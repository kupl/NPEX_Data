{
    "lucene-solr_0d5a475": {
        "bug_id": "lucene-solr_0d5a475",
        "commit": "https://github.com/apache/lucene-solr/commit/0d5a4755c9844380ffd4d5bdf5e0c87c0ae281b9",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/lucene-solr/blob/0d5a4755c9844380ffd4d5bdf5e0c87c0ae281b9/src/java/org/apache/lucene/store/BufferedIndexInput.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/src/java/org/apache/lucene/store/BufferedIndexInput.java?ref=0d5a4755c9844380ffd4d5bdf5e0c87c0ae281b9",
                "deletions": 1,
                "filename": "src/java/org/apache/lucene/store/BufferedIndexInput.java",
                "patch": "@@ -49,7 +49,7 @@ public BufferedIndexInput(int bufferSize) {\n \n   /** Change the buffer size used by this IndexInput */\n   public void setBufferSize(int newSize) {\n-    assert bufferSize == buffer.length;\n+    assert buffer == null || bufferSize == buffer.length;\n     if (newSize != bufferSize) {\n       checkBufferSize(newSize);\n       bufferSize = newSize;",
                "raw_url": "https://github.com/apache/lucene-solr/raw/0d5a4755c9844380ffd4d5bdf5e0c87c0ae281b9/src/java/org/apache/lucene/store/BufferedIndexInput.java",
                "sha": "20f9a284e05d087184b92f58bf4e9bec77f4bda2",
                "status": "modified"
            }
        ],
        "message": "LUCENE-888: fix possible NPE in assert statement\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/java/trunk@542667 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/3e09257c09a6ef0c8495938f6e99ab0fcc62c305",
        "repo": "lucene-solr",
        "unit_tests": [
            "TestBufferedIndexInput.java"
        ]
    },
    "lucene-solr_1389f64": {
        "bug_id": "lucene-solr_1389f64",
        "commit": "https://github.com/apache/lucene-solr/commit/1389f64fbe6f68552b44b380ae8d770fd5075c8c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/lucene-solr/blob/1389f64fbe6f68552b44b380ae8d770fd5075c8c/solr/core/src/java/org/apache/solr/update/UpdateHandler.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/update/UpdateHandler.java?ref=1389f64fbe6f68552b44b380ae8d770fd5075c8c",
                "deletions": 1,
                "filename": "solr/core/src/java/org/apache/solr/update/UpdateHandler.java",
                "patch": "@@ -85,7 +85,8 @@ private void initLog(PluginInfo ulogPluginInfo) {\n \n   // not thread safe - for startup\n   private void clearLog(PluginInfo ulogPluginInfo) {\n-    File tlogDir = UpdateLog.getTlogDir(ulogPluginInfo);\n+    if (ulogPluginInfo == null) return;\n+    File tlogDir = UpdateLog.getTlogDir(core, ulogPluginInfo);\n     if (tlogDir.exists()) {\n       String[] files = UpdateLog.getLogList(tlogDir);\n       for (String file : files) {",
                "raw_url": "https://github.com/apache/lucene-solr/raw/1389f64fbe6f68552b44b380ae8d770fd5075c8c/solr/core/src/java/org/apache/solr/update/UpdateHandler.java",
                "sha": "5f343658087dfc1e5f0f88f2f46526e82c88d114",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/lucene-solr/blob/1389f64fbe6f68552b44b380ae8d770fd5075c8c/solr/core/src/java/org/apache/solr/update/UpdateLog.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/update/UpdateLog.java?ref=1389f64fbe6f68552b44b380ae8d770fd5075c8c",
                "deletions": 2,
                "filename": "solr/core/src/java/org/apache/solr/update/UpdateLog.java",
                "patch": "@@ -1395,8 +1395,18 @@ public static void deleteFile(File file) {\n     }\n   }\n   \n-  public static File getTlogDir(PluginInfo info) {\n-    String dataDir = (String)info.initArgs.get(\"dir\");\n+  public static File getTlogDir(SolrCore core, PluginInfo info) {\n+    String dataDir = (String) info.initArgs.get(\"dir\");\n+    if (dataDir == null) {\n+      String ulogDir = core.getCoreDescriptor().getUlogDir();\n+      if (ulogDir != null) {\n+        dataDir = ulogDir;\n+      }\n+      \n+      if (dataDir == null || dataDir.length() == 0) {\n+        dataDir = core.getDataDir();\n+      }\n+    }\n     return new File(dataDir, TLOG_NAME);\n   }\n   ",
                "raw_url": "https://github.com/apache/lucene-solr/raw/1389f64fbe6f68552b44b380ae8d770fd5075c8c/solr/core/src/java/org/apache/solr/update/UpdateLog.java",
                "sha": "bc761ea41f6e4389be0f52859e0ca5daa44b4856",
                "status": "modified"
            }
        ],
        "message": "SOLR-4203: whoops - fix npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1423625 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/bef4454e2f28ce884dbda8542377e357f64e6192",
        "repo": "lucene-solr",
        "unit_tests": [
            "UpdateLogTest.java"
        ]
    },
    "lucene-solr_1779767": {
        "bug_id": "lucene-solr_1779767",
        "commit": "https://github.com/apache/lucene-solr/commit/17797673f2eb152c09af022e5d2e03bf5c1d584b",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/lucene-solr/blob/17797673f2eb152c09af022e5d2e03bf5c1d584b/solr/CHANGES.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/CHANGES.txt?ref=17797673f2eb152c09af022e5d2e03bf5c1d584b",
                "deletions": 0,
                "filename": "solr/CHANGES.txt",
                "patch": "@@ -189,6 +189,8 @@ Bug Fixes\n \n * SOLR-9308: Fix distributed RTG to forward request params, fixes fq and non-default fl params (hossman)\n \n+* SOLR-9179: NPE in IndexSchema using IBM JDK (noble, Colvin Cowie)\n+\n Optimizations\n ----------------------\n ",
                "raw_url": "https://github.com/apache/lucene-solr/raw/17797673f2eb152c09af022e5d2e03bf5c1d584b/solr/CHANGES.txt",
                "sha": "787edee55a4c7980bb3dceed9f69cb438bce9023",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/lucene-solr/blob/17797673f2eb152c09af022e5d2e03bf5c1d584b/solr/core/src/java/org/apache/solr/handler/SchemaHandler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/handler/SchemaHandler.java?ref=17797673f2eb152c09af022e5d2e03bf5c1d584b",
                "deletions": 1,
                "filename": "solr/core/src/java/org/apache/solr/handler/SchemaHandler.java",
                "patch": "@@ -185,7 +185,7 @@ private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n           if (parts.get(0).isEmpty()) parts.remove(0);\n           if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n             String realName = parts.get(1);\n-            String fieldName = IndexSchema.SchemaProps.nameMapping.get(realName);\n+            String fieldName = IndexSchema.nameMapping.get(realName);\n \n             String pathParam = level2.get(realName);\n             if (parts.size() > 2) {",
                "raw_url": "https://github.com/apache/lucene-solr/raw/17797673f2eb152c09af022e5d2e03bf5c1d584b/solr/core/src/java/org/apache/solr/handler/SchemaHandler.java",
                "sha": "35e463b44caa1ba92bd65a96e4ac66f2ff6ad2ff",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/lucene-solr/blob/17797673f2eb152c09af022e5d2e03bf5c1d584b/solr/core/src/java/org/apache/solr/schema/IndexSchema.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/schema/IndexSchema.java?ref=17797673f2eb152c09af022e5d2e03bf5c1d584b",
                "deletions": 2,
                "filename": "solr/core/src/java/org/apache/solr/schema/IndexSchema.java",
                "patch": "@@ -1500,10 +1500,12 @@ SimpleOrderedMap getProperties(SchemaField sf) {\n               (v1, v2) -> v2,\n               LinkedHashMap::new));\n     }\n-    public static Map<String,String> nameMapping = Collections.unmodifiableMap(Stream.of(Handler.values())\n-        .collect(Collectors.toMap(Handler::getNameLower , Handler::getRealName)));\n   }\n \n+  public static Map<String,String> nameMapping = Collections.unmodifiableMap(Stream.of(SchemaProps.Handler.values())\n+      .collect(Collectors.toMap(SchemaProps.Handler::getNameLower , SchemaProps.Handler::getRealName)));\n+\n+\n   public Map<String, Object> getNamedPropertyValues(String name, SolrParams params) {\n     return new SchemaProps(name, params, this).toMap();\n ",
                "raw_url": "https://github.com/apache/lucene-solr/raw/17797673f2eb152c09af022e5d2e03bf5c1d584b/solr/core/src/java/org/apache/solr/schema/IndexSchema.java",
                "sha": "c48518ca583ee6ff769e52f89892a6de20e18cbd",
                "status": "modified"
            }
        ],
        "message": "SOLR-9179: NPE in IndexSchema using IBM JDK",
        "parent": "https://github.com/apache/lucene-solr/commit/2c4542ea0204f8cb3a966fc697651226e09d2ee5",
        "repo": "lucene-solr",
        "unit_tests": [
            "IndexSchemaTest.java"
        ]
    },
    "lucene-solr_18c317a": {
        "bug_id": "lucene-solr_18c317a",
        "commit": "https://github.com/apache/lucene-solr/commit/18c317a1e6fca78a7db2077eecaca3285b52dad3",
        "file": [
            {
                "additions": 71,
                "blob_url": "https://github.com/apache/lucene-solr/blob/18c317a1e6fca78a7db2077eecaca3285b52dad3/solr/src/java/org/apache/solr/search/Grouping.java",
                "changes": 76,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/src/java/org/apache/solr/search/Grouping.java?ref=18c317a1e6fca78a7db2077eecaca3285b52dad3",
                "deletions": 5,
                "filename": "solr/src/java/org/apache/solr/search/Grouping.java",
                "patch": "@@ -19,10 +19,14 @@\n \n import org.apache.lucene.index.IndexReader;\n import org.apache.lucene.search.*;\n+import org.apache.lucene.util.BytesRef;\n import org.apache.solr.common.util.NamedList;\n import org.apache.solr.common.util.SimpleOrderedMap;\n+import org.apache.solr.schema.StrFieldSource;\n import org.apache.solr.search.function.DocValues;\n+import org.apache.solr.search.function.StringIndexDocValues;\n import org.apache.solr.search.function.ValueSource;\n+import org.apache.solr.util.SentinelIntSet;\n \n import java.io.IOException;\n import java.util.*;\n@@ -141,6 +145,9 @@ void prepare() throws IOException {\n     Collector createCollector() throws IOException {\n       maxGroupToFind = getMax(offset, numGroups, maxDoc);\n \n+      // if we aren't going to return any groups, disregard the offset \n+      if (numGroups == 0) maxGroupToFind = 0;\n+\n       if (compareSorts(sort, groupSort)) {\n         collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n       } else {\n@@ -151,22 +158,32 @@ Collector createCollector() throws IOException {\n \n     @Override\n     Collector createNextCollector() throws IOException {\n+      if (numGroups == 0) return null;\n+\n       int docsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n-      if (docsToCollect < 0 || docsToCollect > maxDoc) docsToCollect = maxDoc;\n \n-      collector2 = new Phase2GroupCollector(collector, groupBy, context, groupSort, docsToCollect, needScores, offset);\n+      if (false && groupBy instanceof StrFieldSource) {\n+        collector2 = new Phase2StringGroupCollector(collector, groupBy, context, groupSort, docsToCollect, needScores, offset);\n+      } else {\n+        collector2 = new Phase2GroupCollector(collector, groupBy, context, groupSort, docsToCollect, needScores, offset);\n+      }\n       return collector2;\n     }\n \n     @Override\n     void finish() throws IOException {\n       NamedList groupResult = commonResponse();\n \n-      if (collector.orderedGroups == null) collector.buildSet();\n-\n       List groupList = new ArrayList();\n       groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n \n+      // handle case of rows=0\n+      if (numGroups == 0) return;\n+\n+      if (collector.orderedGroups == null) collector.buildSet();\n+\n+\n+\n       int skipCount = offset;\n       for (SearchGroup group : collector.orderedGroups) {\n         if (skipCount > 0) {\n@@ -411,7 +428,7 @@ Collector getCollector() {\n   public TopGroupCollector(ValueSource groupByVS, Map vsContext, Sort sort, int nGroups) throws IOException {\n     this.vs = groupByVS;\n     this.context = vsContext;\n-    this.nGroups = nGroups;\n+    this.nGroups = nGroups = Math.max(1,nGroups);  // we need a minimum of 1 for this collector\n \n     SortField[] sortFields = sort.getSort();\n     this.comparators = new FieldComparator[sortFields.length];\n@@ -839,3 +856,52 @@ public boolean acceptsDocsOutOfOrder() {\n   TopDocsCollector collector;\n }\n \n+\n+\n+class Phase2StringGroupCollector extends Phase2GroupCollector {\n+  FieldCache.DocTermsIndex index;\n+  SentinelIntSet ordSet;\n+  SearchGroupDocs[] groups;\n+  BytesRef spare;\n+\n+  public Phase2StringGroupCollector(TopGroupCollector topGroups, ValueSource groupByVS, Map vsContext, Sort sort, int docsPerGroup, boolean getScores, int offset) throws IOException {\n+    super(topGroups, groupByVS, vsContext,sort,docsPerGroup,getScores,offset);\n+    ordSet = new SentinelIntSet(groupMap.size(), -1);\n+    groups = new SearchGroupDocs[ordSet.keys.length];\n+  }\n+\n+  @Override\n+  public void setScorer(Scorer scorer) throws IOException {\n+    this.scorer = scorer;\n+    for (SearchGroupDocs group : groupMap.values())\n+      group.collector.setScorer(scorer);\n+  }\n+\n+  @Override\n+  public void collect(int doc) throws IOException {\n+    int slot = ordSet.find(index.getOrd(doc));\n+    if (slot >= 0) {\n+      groups[slot].collector.collect(doc);\n+    }\n+  }\n+\n+  @Override\n+  public void setNextReader(IndexReader reader, int docBase) throws IOException {\n+    super.setNextReader(reader, docBase);\n+    index = ((StringIndexDocValues)docValues).getDocTermsIndex();\n+\n+    ordSet.clear();\n+    for (SearchGroupDocs group : groupMap.values()) {\n+      int ord = index.binarySearchLookup(((MutableValueStr)group.groupValue).value, spare);\n+      if (ord > 0) {\n+        int slot = ordSet.put(ord);\n+        groups[slot] = group;\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public boolean acceptsDocsOutOfOrder() {\n+    return false;\n+  }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/lucene-solr/raw/18c317a1e6fca78a7db2077eecaca3285b52dad3/solr/src/java/org/apache/solr/search/Grouping.java",
                "sha": "f8dc1f5e92d17ae38714a0e01829fae2aeb6ed80",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/lucene-solr/blob/18c317a1e6fca78a7db2077eecaca3285b52dad3/solr/src/java/org/apache/solr/search/function/StringIndexDocValues.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/src/java/org/apache/solr/search/function/StringIndexDocValues.java?ref=18c317a1e6fca78a7db2077eecaca3285b52dad3",
                "deletions": 0,
                "filename": "solr/src/java/org/apache/solr/search/function/StringIndexDocValues.java",
                "patch": "@@ -41,6 +41,10 @@ public StringIndexDocValues(ValueSource vs, IndexReader reader, String field) th\n       }\n       this.vs = vs;\n     }\n+\n+    public FieldCache.DocTermsIndex getDocTermsIndex() {\n+      return termsIndex;\n+    }\n   \n     protected abstract String toTerm(String readableValue);\n ",
                "raw_url": "https://github.com/apache/lucene-solr/raw/18c317a1e6fca78a7db2077eecaca3285b52dad3/solr/src/java/org/apache/solr/search/function/StringIndexDocValues.java",
                "sha": "fb22cfd3aef62d773a4e2290bab766d7751ad77e",
                "status": "modified"
            },
            {
                "additions": 132,
                "blob_url": "https://github.com/apache/lucene-solr/blob/18c317a1e6fca78a7db2077eecaca3285b52dad3/solr/src/java/org/apache/solr/util/SentinelIntSet.java",
                "changes": 132,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/src/java/org/apache/solr/util/SentinelIntSet.java?ref=18c317a1e6fca78a7db2077eecaca3285b52dad3",
                "deletions": 0,
                "filename": "solr/src/java/org/apache/solr/util/SentinelIntSet.java",
                "patch": "@@ -0,0 +1,132 @@\n+/**\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.solr.util;\r\n+\r\n+import java.util.Arrays;\r\n+\r\n+/** A native int set where one value is reserved to mean \"EMPTY\" */\r\n+public class SentinelIntSet {\r\n+  public int[] keys;\r\n+  public int count;\r\n+  public final int emptyVal;\r\n+  public int rehashCount;   // the count at which a rehash should be done\r\n+\r\n+  public SentinelIntSet(int size, int emptyVal) {\r\n+    this.emptyVal = emptyVal;\r\n+    int tsize = Math.max(org.apache.lucene.util.BitUtil.nextHighestPowerOfTwo(size), 1);\r\n+    rehashCount = tsize - (tsize>>2);\r\n+    if (tsize <= rehashCount) {\r\n+      tsize <<= 1;\r\n+      rehashCount = tsize - (tsize>>2);\r\n+    }\r\n+    keys = new int[tsize];\r\n+    if (emptyVal != 0)\r\n+      clear();\r\n+  }\r\n+\r\n+  public void clear() {\r\n+    Arrays.fill(keys, emptyVal);\r\n+    count = 0;\r\n+  }\r\n+\r\n+  public int hash(int key) {\r\n+    return key;\r\n+  }\r\n+\r\n+  public int size() { return count; }\r\n+\r\n+  /** returns the slot for this key */\r\n+  public int getSlot(int key) {\r\n+    assert key != emptyVal;\r\n+    int h = hash(key);\r\n+    int s = h & (keys.length-1);\r\n+    if (keys[s] == key || keys[s]== emptyVal) return s;\r\n+\r\n+    int increment = (h>>7)|1;\r\n+    do {\r\n+      s = (s + increment) & (keys.length-1);\r\n+    } while (keys[s] != key && keys[s] != emptyVal);\r\n+    return s;\r\n+  }\r\n+\r\n+  /** returns the slot for this key, or -slot-1 if not found */\r\n+  public int find(int key) {\r\n+    assert key != emptyVal;\r\n+    int h = hash(key);\r\n+    int s = h & (keys.length-1);\r\n+    if (keys[s] == key) return s;\r\n+    if (keys[s] == emptyVal) return -s-1;\r\n+\r\n+    int increment = (h>>7)|1;\r\n+    for(;;) {\r\n+      s = (s + increment) & (keys.length-1);\r\n+      if (keys[s] == key) return s;\r\n+      if (keys[s] == emptyVal) return -s-1;\r\n+    }\r\n+  }\r\n+\r\n+\r\n+  public boolean exists(int key) {\r\n+    return find(key) >= 0;\r\n+  }\r\n+\r\n+\r\n+  public int put(int key) {\r\n+    int s = find(key);\r\n+    if (s < 0) {\r\n+      if (count >= rehashCount) {\r\n+        rehash();\r\n+        s = getSlot(key);\r\n+      } else {\r\n+        s = -s-1;\r\n+      }\r\n+      count++;\r\n+      keys[s] = key;\r\n+      putKey(key, s);\r\n+    } else {\r\n+      overwriteKey(key, s);\r\n+    }\r\n+    return s;\r\n+  }\r\n+\r\n+\r\n+  protected void putKey(int key, int slot) {}\r\n+  protected void overwriteKey(int key, int slot) {}\r\n+\r\n+  protected void startRehash(int newSize) {}\r\n+  protected void moveKey(int key, int oldSlot, int newSlot) {}\r\n+  protected void endRehash() {}\r\n+\r\n+  public void rehash() {\r\n+    int newSize = keys.length << 1;\r\n+    startRehash(newSize);\r\n+    int[] oldKeys = keys;\r\n+    keys = new int[newSize];\r\n+    for (int i=0; i<oldKeys.length; i++) {\r\n+      int key = oldKeys[i];\r\n+      if (key == emptyVal) continue;\r\n+      int newSlot = getSlot(key);\r\n+      keys[newSlot] = key;\r\n+      moveKey(key, i, newSlot);\r\n+    }\r\n+    endRehash();\r\n+    rehashCount = newSize - (newSize>>2);\r\n+\r\n+  }\r\n+\r\n+}\r",
                "raw_url": "https://github.com/apache/lucene-solr/raw/18c317a1e6fca78a7db2077eecaca3285b52dad3/solr/src/java/org/apache/solr/util/SentinelIntSet.java",
                "sha": "28ed7eba81fb0060dded42d34a4feb068143632c",
                "status": "added"
            }
        ],
        "message": "SOLR-236: grouping - fix NPE if rows=0, add prototype string grouping speedup\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1035074 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/a73f5e279c510a8746bbf0e4754d205248a0d355",
        "repo": "lucene-solr",
        "unit_tests": [
            "TestSentinelIntSet.java"
        ]
    },
    "lucene-solr_1941777": {
        "bug_id": "lucene-solr_1941777",
        "commit": "https://github.com/apache/lucene-solr/commit/1941777fdcf4d7cb0600df9633a466f2790b4448",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/lucene-solr/blob/1941777fdcf4d7cb0600df9633a466f2790b4448/solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager.java?ref=1941777fdcf4d7cb0600df9633a466f2790b4448",
                "deletions": 21,
                "filename": "solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager.java",
                "patch": "@@ -63,20 +63,14 @@ public ConnectionManager(String name, SolrZkClient client, String zkServerAddres\n   }\n   \n   private synchronized void connected() {\n-    if (disconnectedTimer != null) {\n-      disconnectedTimer.cancel();\n-      disconnectedTimer = null;\n-    }\n+    cancelTimer();\n     connected = true;\n     likelyExpired = false;\n     notifyAll();\n   }\n \n   private synchronized void disconnected() {\n-    if (disconnectedTimer != null) {\n-      disconnectedTimer.cancel();\n-      disconnectedTimer = null;\n-    }\n+    cancelTimer();\n     if (!isClosed) {\n       disconnectedTimer = new Timer(true);\n       disconnectedTimer.schedule(new TimerTask() {\n@@ -90,14 +84,23 @@ public void run() {\n       if (isClosed) {\n         // we might have closed after getting by isClosed\n         // and before starting the new timer\n-        disconnectedTimer.cancel();\n-        disconnectedTimer = null;\n+        cancelTimer();\n       }\n     }\n     connected = false;\n     notifyAll();\n   }\n \n+  private void cancelTimer() {\n+    try {\n+      this.disconnectedTimer.cancel();\n+    } catch (NullPointerException e) {\n+      // fine\n+    } finally {\n+      this.disconnectedTimer = null;\n+    }\n+  }\n+\n   @Override\n   public void process(WatchedEvent event) {\n     if (log.isInfoEnabled()) {\n@@ -117,10 +120,10 @@ public void process(WatchedEvent event) {\n       clientConnected.countDown();\n       connectionStrategy.connected();\n     } else if (state == KeeperState.Expired) {\n-      if (disconnectedTimer != null) {\n-        disconnectedTimer.cancel();\n-        disconnectedTimer = null;\n-      }\n+      // we don't call disconnected because there\n+      // is no need to start the timer - if we are expired\n+      // likelyExpired can just be set to true\n+      cancelTimer();\n       \n       connected = false;\n       likelyExpired = true;\n@@ -197,13 +200,7 @@ public synchronized boolean isConnected() {\n   public void close() {\n     this.isClosed = true;\n     this.likelyExpired = true;\n-    try {\n-      this.disconnectedTimer.cancel();\n-    } catch (NullPointerException e) {\n-      // fine\n-    } finally {\n-      this.disconnectedTimer = null;\n-    }\n+    cancelTimer();\n   }\n   \n   public boolean isLikelyExpired() {",
                "raw_url": "https://github.com/apache/lucene-solr/raw/1941777fdcf4d7cb0600df9633a466f2790b4448/solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager.java",
                "sha": "961ed35597576ee91de061306d943a014ecd71e9",
                "status": "modified"
            }
        ],
        "message": "SOLR-5577: Protect against NPE race with close - spotted by Greg Chanan\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1559844 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/fc9f019cdbbd9f8c30468f4439de76c20c6a90b8",
        "repo": "lucene-solr",
        "unit_tests": [
            "ConnectionManagerTest.java"
        ]
    },
    "lucene-solr_22f119d": {
        "bug_id": "lucene-solr_22f119d",
        "commit": "https://github.com/apache/lucene-solr/commit/22f119d50c62f695330005d8bfba09595e592439",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/lucene-solr/blob/22f119d50c62f695330005d8bfba09595e592439/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer.java?ref=22f119d50c62f695330005d8bfba09595e592439",
                "deletions": 1,
                "filename": "lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer.java",
                "patch": "@@ -227,7 +227,7 @@ public JapaneseTokenizer(Reader input, UserDictionary userDictionary, boolean di\n         outputCompounds = false;\n         break;\n     }\n-    buffer.reset(input);\n+    buffer.reset(null); // best effort NPE consumers that don't call reset()\n \n     resetState();\n ",
                "raw_url": "https://github.com/apache/lucene-solr/raw/22f119d50c62f695330005d8bfba09595e592439/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer.java",
                "sha": "b03c80effc8fcfeb7a0ee3e782fad0fa25c46055",
                "status": "modified"
            }
        ],
        "message": "throw a best-effort NPE from kuromoji if you don't consume the TS correctly\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1401461 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/e670e324717e6f0098cc4f1211ba276f6cd2989e",
        "repo": "lucene-solr",
        "unit_tests": [
            "TestJapaneseTokenizer.java"
        ]
    },
    "lucene-solr_232aaa4": {
        "bug_id": "lucene-solr_232aaa4",
        "commit": "https://github.com/apache/lucene-solr/commit/232aaa42ed3d136672881d1bd1563aa29945fdbf",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/lucene-solr/blob/232aaa42ed3d136672881d1bd1563aa29945fdbf/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java?ref=232aaa42ed3d136672881d1bd1563aa29945fdbf",
                "deletions": 2,
                "filename": "solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java",
                "patch": "@@ -162,12 +162,16 @@ public void close() {\n     }\n     \n     try {\n-      defaultClient.getConnectionManager().shutdown();\n+      if(defaultClient != null) {\n+        defaultClient.getConnectionManager().shutdown();\n+      }\n     } catch (Throwable e) {\n       SolrException.log(log, e);\n     }\n     try {\n-      loadbalancer.shutdown();\n+      if(loadbalancer != null) {\n+        loadbalancer.shutdown();\n+      }\n     } catch (Throwable e) {\n       SolrException.log(log, e);\n     }",
                "raw_url": "https://github.com/apache/lucene-solr/raw/232aaa42ed3d136672881d1bd1563aa29945fdbf/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java",
                "sha": "9410f959a8798a6810b63cafc94740a68572a66d",
                "status": "modified"
            }
        ],
        "message": "SOLR-4218: SolrTestCaseJ4 throws NPE when closing the core (on the afterClass method)\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1423932 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/aa695debba46841efe52125973ab12fca896bf79",
        "repo": "lucene-solr",
        "unit_tests": [
            "TestHttpShardHandlerFactory.java"
        ]
    },
    "lucene-solr_2559617": {
        "bug_id": "lucene-solr_2559617",
        "commit": "https://github.com/apache/lucene-solr/commit/255961719f8d0f3704dbfbf5c6191e3a6a88e029",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/lucene-solr/blob/255961719f8d0f3704dbfbf5c6191e3a6a88e029/solr/core/src/java/org/apache/solr/core/RequestHandlers.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/core/RequestHandlers.java?ref=255961719f8d0f3704dbfbf5c6191e3a6a88e029",
                "deletions": 1,
                "filename": "solr/core/src/java/org/apache/solr/core/RequestHandlers.java",
                "patch": "@@ -494,7 +494,7 @@ protected SolrRequestHandler createRequestHandler() {\n     public void close() throws Exception {\n       super.close();\n       if (_closed) return;\n-      classLoader.releaseJar();\n+      if(classLoader != null) classLoader.releaseJar();\n       _closed = true;\n     }\n   }",
                "raw_url": "https://github.com/apache/lucene-solr/raw/255961719f8d0f3704dbfbf5c6191e3a6a88e029/solr/core/src/java/org/apache/solr/core/RequestHandlers.java",
                "sha": "58d0449f3a182b11ed0c4b0ea0395ced89ef3afb",
                "status": "modified"
            }
        ],
        "message": "SOLR-6801 NPE on core reload\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1652431 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/94836356486b628aaa6e34b5c1be1cbcc83bb604",
        "repo": "lucene-solr",
        "unit_tests": [
            "RequestHandlersTest.java"
        ]
    },
    "lucene-solr_27c6275": {
        "bug_id": "lucene-solr_27c6275",
        "commit": "https://github.com/apache/lucene-solr/commit/27c6275c484f2dcb73cc64a06fb42ba2c4eefcbf",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/lucene-solr/blob/27c6275c484f2dcb73cc64a06fb42ba2c4eefcbf/solr/core/src/java/org/apache/solr/update/UpdateLog.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/update/UpdateLog.java?ref=27c6275c484f2dcb73cc64a06fb42ba2c4eefcbf",
                "deletions": 2,
                "filename": "solr/core/src/java/org/apache/solr/update/UpdateLog.java",
                "patch": "@@ -295,8 +295,8 @@ public long getTotalLogsSize() {\n   /**\n    * @return the current transaction log's size (based on its output stream)\n    */\n-  public long getCurrentLogSizeFromStream() {\n-    return tlog.getLogSizeFromStream();\n+  public synchronized long getCurrentLogSizeFromStream() {\n+    return tlog == null ? 0 : tlog.getLogSizeFromStream();\n   }\n \n   public long getTotalLogsNumber() {",
                "raw_url": "https://github.com/apache/lucene-solr/raw/27c6275c484f2dcb73cc64a06fb42ba2c4eefcbf/solr/core/src/java/org/apache/solr/update/UpdateLog.java",
                "sha": "ef0e73e5f830f1332c14658e5a21f5491c77e755",
                "status": "modified"
            }
        ],
        "message": "SOLR-11277: Synchronize UpdateLog.getCurrentLogSizeFromStream and return size of tlog as 0 to avoid NPE",
        "parent": "https://github.com/apache/lucene-solr/commit/b1ee23c525a64017242148bca43111168fe1be3a",
        "repo": "lucene-solr",
        "unit_tests": [
            "UpdateLogTest.java"
        ]
    },
    "lucene-solr_2a074e6": {
        "bug_id": "lucene-solr_2a074e6",
        "commit": "https://github.com/apache/lucene-solr/commit/2a074e6dc1f50f791b58437e2746cf5efdec4979",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/lucene-solr/blob/2a074e6dc1f50f791b58437e2746cf5efdec4979/client/java/solrj/src/org/apache/solr/client/solrj/SolrQuery.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/client/java/solrj/src/org/apache/solr/client/solrj/SolrQuery.java?ref=2a074e6dc1f50f791b58437e2746cf5efdec4979",
                "deletions": 2,
                "filename": "client/java/solrj/src/org/apache/solr/client/solrj/SolrQuery.java",
                "patch": "@@ -372,7 +372,12 @@ public String getQuery() {\n   }\n \n   public void setRows(Integer rows) {\n-    this.set(CommonParams.ROWS, rows);\n+    if( rows == null ) {\n+      this.remove( CommonParams.ROWS );\n+    }\n+    else {\n+      this.set(CommonParams.ROWS, rows);\n+    }\n   }\n \n   public Integer getRows()\n@@ -390,7 +395,12 @@ public void setShowDebugInfo(boolean showDebugInfo) {\n //  }\n \n   public void setStart(Integer start) {\n-    this.set(CommonParams.START, start);\n+    if( start == null ) {\n+      this.remove( CommonParams.START );\n+    }\n+    else {\n+      this.set(CommonParams.START, start);\n+    }\n   }\n   \n   public Integer getStart()",
                "raw_url": "https://github.com/apache/lucene-solr/raw/2a074e6dc1f50f791b58437e2746cf5efdec4979/client/java/solrj/src/org/apache/solr/client/solrj/SolrQuery.java",
                "sha": "0a4890ad6b058222d16070da1ea29f8974d0ae8c",
                "status": "modified"
            }
        ],
        "message": "let SolrQuery take null start/rows to remove them  (rather then throw NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/solr/trunk@609854 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/b80c55ebb40b6b7cc5f60d934a2c84bdc71403ea",
        "repo": "lucene-solr",
        "unit_tests": [
            "SolrQueryTest.java"
        ]
    },
    "lucene-solr_321b292": {
        "bug_id": "lucene-solr_321b292",
        "commit": "https://github.com/apache/lucene-solr/commit/321b292be9ef1ddd344517bf4dc660d78ad95d3f",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/lucene-solr/blob/321b292be9ef1ddd344517bf4dc660d78ad95d3f/src/java/org/apache/lucene/search/PhrasePrefixQuery.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/src/java/org/apache/lucene/search/PhrasePrefixQuery.java?ref=321b292be9ef1ddd344517bf4dc660d78ad95d3f",
                "deletions": 1,
                "filename": "src/java/org/apache/lucene/search/PhrasePrefixQuery.java",
                "patch": "@@ -212,7 +212,10 @@ public Explanation explain(IndexReader reader, int doc)\n       fieldExpl.addDetail(idfExpl);\n \n       Explanation fieldNormExpl = new Explanation();\n-      fieldNormExpl.setValue(Similarity.decodeNorm(reader.norms(field)[doc]));\n+      byte[] fieldNorms = reader.norms(field);\n+      float fieldNorm =\n+        fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 0.0f;\n+      fieldNormExpl.setValue(fieldNorm);\n       fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n       fieldExpl.addDetail(fieldNormExpl);\n ",
                "raw_url": "https://github.com/apache/lucene-solr/raw/321b292be9ef1ddd344517bf4dc660d78ad95d3f/src/java/org/apache/lucene/search/PhrasePrefixQuery.java",
                "sha": "3d481c6df20907634ce7a3e6f3b24f6333c1335e",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/lucene-solr/blob/321b292be9ef1ddd344517bf4dc660d78ad95d3f/src/java/org/apache/lucene/search/PhraseQuery.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/src/java/org/apache/lucene/search/PhraseQuery.java?ref=321b292be9ef1ddd344517bf4dc660d78ad95d3f",
                "deletions": 1,
                "filename": "src/java/org/apache/lucene/search/PhraseQuery.java",
                "patch": "@@ -210,7 +210,10 @@ public Explanation explain(IndexReader reader, int doc)\n       fieldExpl.addDetail(idfExpl);\n \n       Explanation fieldNormExpl = new Explanation();\n-      fieldNormExpl.setValue(Similarity.decodeNorm(reader.norms(field)[doc]));\n+      byte[] fieldNorms = reader.norms(field);\n+      float fieldNorm =\n+        fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 0.0f;\n+      fieldNormExpl.setValue(fieldNorm);\n       fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n       fieldExpl.addDetail(fieldNormExpl);\n ",
                "raw_url": "https://github.com/apache/lucene-solr/raw/321b292be9ef1ddd344517bf4dc660d78ad95d3f/src/java/org/apache/lucene/search/PhraseQuery.java",
                "sha": "4b7bdd2be7a2ffe9480f2a5ce74e406d7ad12cf3",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/lucene-solr/blob/321b292be9ef1ddd344517bf4dc660d78ad95d3f/src/java/org/apache/lucene/search/TermQuery.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/src/java/org/apache/lucene/search/TermQuery.java?ref=321b292be9ef1ddd344517bf4dc660d78ad95d3f",
                "deletions": 1,
                "filename": "src/java/org/apache/lucene/search/TermQuery.java",
                "patch": "@@ -139,7 +139,10 @@ public Explanation explain(IndexReader reader, int doc)\n       fieldExpl.addDetail(idfExpl);\n \n       Explanation fieldNormExpl = new Explanation();\n-      fieldNormExpl.setValue(Similarity.decodeNorm(reader.norms(field)[doc]));\n+      byte[] fieldNorms = reader.norms(field);\n+      float fieldNorm =\n+        fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 0.0f;\n+      fieldNormExpl.setValue(fieldNorm);\n       fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n       fieldExpl.addDetail(fieldNormExpl);\n ",
                "raw_url": "https://github.com/apache/lucene-solr/raw/321b292be9ef1ddd344517bf4dc660d78ad95d3f/src/java/org/apache/lucene/search/TermQuery.java",
                "sha": "631be64ec2d6f14441fb469da0971ca297eedddc",
                "status": "modified"
            }
        ],
        "message": "Fixed a NPE in Query.explain().\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/java/trunk@150155 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/859e6eee2054c72064e874c6ae7aff7e4abe4129",
        "repo": "lucene-solr",
        "unit_tests": [
            "TestTermQuery.java"
        ]
    },
    "lucene-solr_328cace": {
        "bug_id": "lucene-solr_328cace",
        "commit": "https://github.com/apache/lucene-solr/commit/328cacec627701087d11aa5b269d0563450a508a",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/lucene-solr/blob/328cacec627701087d11aa5b269d0563450a508a/src/java/org/apache/solr/core/SolrCore.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/src/java/org/apache/solr/core/SolrCore.java?ref=328cacec627701087d11aa5b269d0563450a508a",
                "deletions": 2,
                "filename": "src/java/org/apache/solr/core/SolrCore.java",
                "patch": "@@ -357,6 +357,9 @@ void initIndex() {\n       boolean indexExists = dirFile.canRead();\n       boolean firstTime = dirs.add(dirFile.getCanonicalPath());\n       boolean removeLocks = solrConfig.getBool(\"mainIndex/unlockOnStartup\", false);\n+\n+      initDirectoryFactory();\n+\n       if (indexExists && firstTime && removeLocks) {\n         // to remove locks, the directory must already exist... so we create it\n         // if it didn't exist already...\n@@ -378,8 +381,6 @@ void initIndex() {\n         SolrIndexWriter writer = new SolrIndexWriter(\"SolrCore.initIndex\",getIndexDir(), true, schema, solrConfig.mainIndexConfig);\n         writer.close();\n       }\n-      \n-      initDirectoryFactory();\n \n     } catch (IOException e) {\n       throw new RuntimeException(e);",
                "raw_url": "https://github.com/apache/lucene-solr/raw/328cacec627701087d11aa5b269d0563450a508a/src/java/org/apache/solr/core/SolrCore.java",
                "sha": "b7a0c967392489a80564620b005872f8fb2b6567",
                "status": "modified"
            }
        ],
        "message": "SOLR-863 -- Fixing NPE. DirectoryFactory should be created before calling SolrIndexWriter.getDirectory.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/solr/trunk@727779 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/82279f712f9c0e919824d6c6f6535a907a282bfa",
        "repo": "lucene-solr",
        "unit_tests": [
            "SolrCoreTest.java"
        ]
    },
    "lucene-solr_3ab1790": {
        "bug_id": "lucene-solr_3ab1790",
        "commit": "https://github.com/apache/lucene-solr/commit/3ab1790be74bbb6590038632d631c8b86de194c7",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/lucene-solr/blob/3ab1790be74bbb6590038632d631c8b86de194c7/solr/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/CHANGES.txt?ref=3ab1790be74bbb6590038632d631c8b86de194c7",
                "deletions": 0,
                "filename": "solr/CHANGES.txt",
                "patch": "@@ -81,6 +81,7 @@ New Features\n   - SOLR-4033: Consistently use the solrconfig.xml lockType everywhere.\n     (Mark Miller, Markus Jelsma)\n   - SOLR-4144: Replication using too much RAM. (yonik, Markus Jelsma)\n+  - SOLR-4187: NPE on Directory release (Mark Miller, Markus Jelsma)\n     \n * SOLR-1972: Add extra statistics to RequestHandlers - 5 & 15-minute reqs/sec\n   rolling averages; median, 75th, 95th, 99th, 99.9th percentile request times",
                "raw_url": "https://github.com/apache/lucene-solr/raw/3ab1790be74bbb6590038632d631c8b86de194c7/solr/CHANGES.txt",
                "sha": "2a8a4b7da09bc8eb5b1ea74ca13f599d0d236135",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/lucene-solr/blob/3ab1790be74bbb6590038632d631c8b86de194c7/solr/core/src/java/org/apache/solr/core/SolrCore.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/core/SolrCore.java?ref=3ab1790be74bbb6590038632d631c8b86de194c7",
                "deletions": 5,
                "filename": "solr/core/src/java/org/apache/solr/core/SolrCore.java",
                "patch": "@@ -258,11 +258,12 @@ public String getNewIndexDir() {\n     } catch (IOException e) {\n       SolrException.log(log, \"\", e);\n     } finally {\n-    \n-      try {\n-        getDirectoryFactory().release(dir);\n-      } catch (IOException e) {\n-        SolrException.log(log, \"\", e);\n+      if (dir != null) {\n+        try {\n+          getDirectoryFactory().release(dir);\n+        } catch (IOException e) {\n+          SolrException.log(log, \"\", e);\n+        }\n       }\n     }\n     if (!result.equals(lastNewIndexDir)) {",
                "raw_url": "https://github.com/apache/lucene-solr/raw/3ab1790be74bbb6590038632d631c8b86de194c7/solr/core/src/java/org/apache/solr/core/SolrCore.java",
                "sha": "5cb0be38a15e40e3accbed6e39a1a19f6e3fda57",
                "status": "modified"
            }
        ],
        "message": "SOLR-4187: NPE on Directory release \n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1421914 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/96926cf07d27e0a7c1f5e08af96ec526b52c0696",
        "repo": "lucene-solr",
        "unit_tests": [
            "SolrCoreTest.java"
        ]
    },
    "lucene-solr_407080a": {
        "bug_id": "lucene-solr_407080a",
        "commit": "https://github.com/apache/lucene-solr/commit/407080af5bc68c9eb11c05c587368a783ff78d0c",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/lucene-solr/blob/407080af5bc68c9eb11c05c587368a783ff78d0c/solr/CHANGES.txt",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/CHANGES.txt?ref=407080af5bc68c9eb11c05c587368a783ff78d0c",
                "deletions": 0,
                "filename": "solr/CHANGES.txt",
                "patch": "@@ -86,6 +86,10 @@ Bug Fixes\n \n * SOLR-8626: 404 error when clicking nodes in cloud graph view in angular UI. (janhoy, Trey Grainger via shalin)\n \n+* SOLR-9254: GraphTermsQueryQParserPlugin throws NPE when field being search is not present in segment\n+  (Joel Bernstein)\n+\n+\n Optimizations\n ----------------------\n ",
                "raw_url": "https://github.com/apache/lucene-solr/raw/407080af5bc68c9eb11c05c587368a783ff78d0c/solr/CHANGES.txt",
                "sha": "7fc6f560309914d5a3a5639f95df8aed9fe0b080",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/lucene-solr/blob/407080af5bc68c9eb11c05c587368a783ff78d0c/solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.java?ref=407080af5bc68c9eb11c05c587368a783ff78d0c",
                "deletions": 0,
                "filename": "solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.java",
                "patch": "@@ -40,9 +40,11 @@\n import org.apache.lucene.search.Scorer;\n import org.apache.lucene.search.Weight;\n import org.apache.lucene.util.ArrayUtil;\n+import org.apache.lucene.util.BitDocIdSet;\n import org.apache.lucene.util.BytesRef;\n import org.apache.lucene.util.BytesRefBuilder;\n import org.apache.lucene.util.DocIdSetBuilder;\n+import org.apache.lucene.util.FixedBitSet;\n import org.apache.solr.common.params.SolrParams;\n import org.apache.solr.request.SolrQueryRequest;\n import org.apache.solr.schema.FieldType;\n@@ -220,6 +222,9 @@ private WeightOrDocIdSet rewrite(LeafReaderContext context) throws IOException {\n           final LeafReader reader = context.reader();\n           final Fields fields = reader.fields();\n           Terms terms = fields.terms(field);\n+          if(terms == null) {\n+            return new WeightOrDocIdSet(new BitDocIdSet(new FixedBitSet(reader.maxDoc()), 0));\n+          }\n           TermsEnum  termsEnum = terms.iterator();\n           PostingsEnum docs = null;\n           DocIdSetBuilder builder = new DocIdSetBuilder(reader.maxDoc(), terms);",
                "raw_url": "https://github.com/apache/lucene-solr/raw/407080af5bc68c9eb11c05c587368a783ff78d0c/solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.java",
                "sha": "dfe411a95689c428617767f0fe5338f8faae2523",
                "status": "modified"
            }
        ],
        "message": "SOLR-9254: GraphTermsQueryQParserPlugin throws NPE when field being search is not present in segment",
        "parent": "https://github.com/apache/lucene-solr/commit/ab2348e3efc4cbc9d2d5c1653bfad5e22a5edf74",
        "repo": "lucene-solr",
        "unit_tests": [
            "TestGraphTermsQParserPlugin.java"
        ]
    },
    "lucene-solr_423e469": {
        "bug_id": "lucene-solr_423e469",
        "commit": "https://github.com/apache/lucene-solr/commit/423e469e5f73d04cf757b888dac127a7ae14b054",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/lucene-solr/blob/423e469e5f73d04cf757b888dac127a7ae14b054/solr/CHANGES.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/CHANGES.txt?ref=423e469e5f73d04cf757b888dac127a7ae14b054",
                "deletions": 0,
                "filename": "solr/CHANGES.txt",
                "patch": "@@ -435,6 +435,8 @@ Bug Fixes\n * SOLR-6923: AutoAddReplicas also consults live_nodes to see if a state change has happened.\n   (Varun Thacker via Anshum Gupta)\n \n+* SOLR-6941: DistributedQueue#containsTaskWithRequestId can fail with NPE. (Mark Miller)\n+\n Optimizations\n ----------------------\n ",
                "raw_url": "https://github.com/apache/lucene-solr/raw/423e469e5f73d04cf757b888dac127a7ae14b054/solr/CHANGES.txt",
                "sha": "2bfc3e29a8c5bcc063492ffe17cfae26f45d1ba3",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/lucene-solr/blob/423e469e5f73d04cf757b888dac127a7ae14b054/solr/core/src/java/org/apache/solr/cloud/DistributedQueue.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/cloud/DistributedQueue.java?ref=423e469e5f73d04cf757b888dac127a7ae14b054",
                "deletions": 4,
                "filename": "solr/core/src/java/org/apache/solr/cloud/DistributedQueue.java",
                "patch": "@@ -122,10 +122,13 @@ public boolean containsTaskWithRequestId(String requestId)\n     for (String childName : childNames) {\n       if (childName != null) {\n         try {\n-          ZkNodeProps message = ZkNodeProps.load(zookeeper.getData(dir + \"/\" + childName, null, null, true));\n-          if (message.containsKey(OverseerCollectionProcessor.ASYNC)) {\n-            LOG.info(\">>>> {}\", message.get(OverseerCollectionProcessor.ASYNC));\n-            if(message.get(OverseerCollectionProcessor.ASYNC).equals(requestId)) return true;\n+          byte[] data = zookeeper.getData(dir + \"/\" + childName, null, null, true);\n+          if (data != null) {\n+            ZkNodeProps message = ZkNodeProps.load(data);\n+            if (message.containsKey(OverseerCollectionProcessor.ASYNC)) {\n+              LOG.debug(\">>>> {}\", message.get(OverseerCollectionProcessor.ASYNC));\n+              if(message.get(OverseerCollectionProcessor.ASYNC).equals(requestId)) return true;\n+            }\n           }\n         } catch (KeeperException.NoNodeException e) {\n           // Another client removed the node first, try next",
                "raw_url": "https://github.com/apache/lucene-solr/raw/423e469e5f73d04cf757b888dac127a7ae14b054/solr/core/src/java/org/apache/solr/cloud/DistributedQueue.java",
                "sha": "99d7769bd678b040e0da382979db04719581d038",
                "status": "modified"
            }
        ],
        "message": "SOLR-6941: DistributedQueue#containsTaskWithRequestId can fail with NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1651380 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/1696206de684a6699938ea3d2458e3fa9658f292",
        "repo": "lucene-solr",
        "unit_tests": [
            "DistributedQueueTest.java"
        ]
    },
    "lucene-solr_58fe66d": {
        "bug_id": "lucene-solr_58fe66d",
        "commit": "https://github.com/apache/lucene-solr/commit/58fe66dba7c4a49827bb2d20e6f9dc15dc61aff3",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/lucene-solr/blob/58fe66dba7c4a49827bb2d20e6f9dc15dc61aff3/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java?ref=58fe66dba7c4a49827bb2d20e6f9dc15dc61aff3",
                "deletions": 4,
                "filename": "solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java",
                "patch": "@@ -850,10 +850,12 @@ private void doFinish() {\n         List<ZkCoreNodeProps> myReplicas = zkController.getZkStateReader().getReplicaProps(collection,\n             cloudDesc.getShardId(), cloudDesc.getCoreNodeName());\n         boolean foundErrorNodeInReplicaList = false;\n-        for (ZkCoreNodeProps replicaProp : myReplicas) {\n-          if (((Replica) replicaProp.getNodeProps()).getName().equals(((Replica)stdNode.getNodeProps().getNodeProps()).getName()))  {\n-            foundErrorNodeInReplicaList = true;\n-            break;\n+        if (myReplicas != null) {\n+          for (ZkCoreNodeProps replicaProp : myReplicas) {\n+            if (((Replica) replicaProp.getNodeProps()).getName().equals(((Replica)stdNode.getNodeProps().getNodeProps()).getName()))  {\n+              foundErrorNodeInReplicaList = true;\n+              break;\n+            }\n           }\n         }\n ",
                "raw_url": "https://github.com/apache/lucene-solr/raw/58fe66dba7c4a49827bb2d20e6f9dc15dc61aff3/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java",
                "sha": "39daf72cb61639beb9fb7ac1a08cebe9e4690339",
                "status": "modified"
            }
        ],
        "message": "SOLR-6530: Protect against NPE when there are no live replicas\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1633276 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/c1bdf27d9751cc37a2c1ad5c136fe04dc2decab8",
        "repo": "lucene-solr",
        "unit_tests": [
            "DistributedUpdateProcessorTest.java"
        ]
    },
    "lucene-solr_592b47f": {
        "bug_id": "lucene-solr_592b47f",
        "commit": "https://github.com/apache/lucene-solr/commit/592b47f7350ae6a8c6964e69bff4e6de02e1e81c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/lucene-solr/blob/592b47f7350ae6a8c6964e69bff4e6de02e1e81c/solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse.java?ref=592b47f7350ae6a8c6964e69bff4e6de02e1e81c",
                "deletions": 1,
                "filename": "solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse.java",
                "patch": "@@ -211,7 +211,7 @@ private void extractGroupedInfo( NamedList<Object> info ) {\n             SimpleOrderedMap grpMap = (SimpleOrderedMap) oGrp;\n             Object sGroupValue = grpMap.get( \"groupValue\");\n             SolrDocumentList doclist = (SolrDocumentList) grpMap.get( \"doclist\");\n-            Group group = new Group(sGroupValue.toString(), doclist) ;\n+            Group group = new Group(sGroupValue != null ? sGroupValue.toString() : null, doclist) ;\n             groupedCommand.add(group);\n           }\n ",
                "raw_url": "https://github.com/apache/lucene-solr/raw/592b47f7350ae6a8c6964e69bff4e6de02e1e81c/solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse.java",
                "sha": "6d52482f1d27d6733fb26437db7f360d28c8a29c",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE when group value is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1154739 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/0bc43983c42b3acea1f1b05fc6eaee2f50e81dd7",
        "repo": "lucene-solr",
        "unit_tests": [
            "QueryResponseTest.java"
        ]
    },
    "lucene-solr_5a69734": {
        "bug_id": "lucene-solr_5a69734",
        "commit": "https://github.com/apache/lucene-solr/commit/5a697344ed1be537ef2acdd18aab653283593370",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/lucene-solr/blob/5a697344ed1be537ef2acdd18aab653283593370/solr/CHANGES.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/CHANGES.txt?ref=5a697344ed1be537ef2acdd18aab653283593370",
                "deletions": 0,
                "filename": "solr/CHANGES.txt",
                "patch": "@@ -197,6 +197,8 @@ Bug Fixes\n \n * SOLR-13465: CoreContainer.auditloggerPlugin should be volatile (janhoy, hossman)\n \n+* SOLR-13805: NPE when calling /solr/admin/info/health on standalone solr (Nicholas DiPiazza, shalin)\n+\n Other Changes\n ---------------------\n ",
                "raw_url": "https://github.com/apache/lucene-solr/raw/5a697344ed1be537ef2acdd18aab653283593370/solr/CHANGES.txt",
                "sha": "9ebcc575f81f065d46647dde59d4670a8b964de3",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/lucene-solr/blob/5a697344ed1be537ef2acdd18aab653283593370/solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler.java?ref=5a697344ed1be537ef2acdd18aab653283593370",
                "deletions": 1,
                "filename": "solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler.java",
                "patch": "@@ -66,7 +66,6 @@ public CoreContainer getCoreContainer() {\n   @Override\n   public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n \n-    log.debug(\"Invoked HealthCheckHandler on [{}]\", coreContainer.getZkController().getNodeName());\n     CoreContainer cores = getCoreContainer();\n \n     // Core container should not be null and active (redundant check)\n@@ -79,6 +78,7 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n       rsp.setException(new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Health check is only available when running in SolrCloud mode\"));\n       return;\n     }\n+    log.debug(\"Invoked HealthCheckHandler on [{}]\", coreContainer.getZkController().getNodeName());\n     ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n     ClusterState clusterState = zkStateReader.getClusterState();\n     // Check for isConnected and isClosed",
                "raw_url": "https://github.com/apache/lucene-solr/raw/5a697344ed1be537ef2acdd18aab653283593370/solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler.java",
                "sha": "cc2a649a0ebf8fa1248ca172d2b10c0fbd1b8729",
                "status": "modified"
            }
        ],
        "message": "SOLR-13805: NPE when calling /solr/admin/info/health on standalone solr",
        "parent": "https://github.com/apache/lucene-solr/commit/936f4b6ee9cd8c7f9a17800aadc8c5a91bdf74f6",
        "repo": "lucene-solr",
        "unit_tests": [
            "HealthCheckHandlerTest.java"
        ]
    },
    "lucene-solr_5ea9310": {
        "bug_id": "lucene-solr_5ea9310",
        "commit": "https://github.com/apache/lucene-solr/commit/5ea93100216dd7e8b05a7ddd0fbc8507b037c4fc",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/lucene-solr/blob/5ea93100216dd7e8b05a7ddd0fbc8507b037c4fc/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java?ref=5ea93100216dd7e8b05a7ddd0fbc8507b037c4fc",
                "deletions": 1,
                "filename": "src/java/org/apache/solr/handler/admin/LukeRequestHandler.java",
                "patch": "@@ -293,7 +293,7 @@ private static String getFieldFlags( SchemaField f )\n       f.add( \"schema\", getFieldFlags( sfield ) );\n \n       // If numTerms==0, the call is just asking for a quick field list\n-      if( ttinfo != null ) {\n+      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n         Query q = qp.parse( fieldName+\":[* TO *]\" ); \n         int docCount = searcher.numDocs( q, matchAllDocs );\n         if( docCount > 0 ) {",
                "raw_url": "https://github.com/apache/lucene-solr/raw/5ea93100216dd7e8b05a7ddd0fbc8507b037c4fc/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java",
                "sha": "1b6ddfc2e0efd76695b282ee6d933c2e750a5023",
                "status": "modified"
            }
        ],
        "message": "only search for fields solr knows about (otherwise you could get NPE for range query) -- also searching for non-indexed fields is useless.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/solr/trunk@541824 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/6b26f007b2b2c97b66840b077eb9f6b0af90a0d3",
        "repo": "lucene-solr",
        "unit_tests": [
            "LukeRequestHandlerTest.java"
        ]
    },
    "lucene-solr_612d922": {
        "bug_id": "lucene-solr_612d922",
        "commit": "https://github.com/apache/lucene-solr/commit/612d9227dec4803fd648d605592ff72d9a2a2355",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/lucene-solr/blob/612d9227dec4803fd648d605592ff72d9a2a2355/lucene/core/src/java/org/apache/lucene/index/DocTermOrds.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/lucene/core/src/java/org/apache/lucene/index/DocTermOrds.java?ref=612d9227dec4803fd648d605592ff72d9a2a2355",
                "deletions": 6,
                "filename": "lucene/core/src/java/org/apache/lucene/index/DocTermOrds.java",
                "patch": "@@ -195,9 +195,6 @@ protected DocTermOrds(String field, int maxTermDocFreq, int indexIntervalBits) t\n    *  <p><b>NOTE</b>: you must pass the same reader that was\n    *  used when creating this class */\n   public TermsEnum getOrdTermsEnum(AtomicReader reader) throws IOException {\n-    if (termInstances == 0) {\n-      return null;\n-    }\n     if (indexedTermsArray == null) {\n       //System.out.println(\"GET normal enum\");\n       final Fields fields = reader.fields();\n@@ -511,9 +508,9 @@ protected void uninvert(final AtomicReader reader, final BytesRef termPrefix) th\n           break;\n       }\n \n-      if (indexedTerms != null) {\n-        indexedTermsArray = indexedTerms.toArray(new BytesRef[indexedTerms.size()]);\n-      }\n+    }\n+    if (indexedTerms != null) {\n+      indexedTermsArray = indexedTerms.toArray(new BytesRef[indexedTerms.size()]);\n     }\n \n     long endTime = System.currentTimeMillis();",
                "raw_url": "https://github.com/apache/lucene-solr/raw/612d9227dec4803fd648d605592ff72d9a2a2355/lucene/core/src/java/org/apache/lucene/index/DocTermOrds.java",
                "sha": "4b120b6a47e98fc762d4cfca3a829490e3e49f39",
                "status": "modified"
            },
            {
                "additions": 252,
                "blob_url": "https://github.com/apache/lucene-solr/blob/612d9227dec4803fd648d605592ff72d9a2a2355/solr/core/src/test/org/apache/solr/TestRandomFaceting.java",
                "changes": 252,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/test/org/apache/solr/TestRandomFaceting.java?ref=612d9227dec4803fd648d605592ff72d9a2a2355",
                "deletions": 0,
                "filename": "solr/core/src/test/org/apache/solr/TestRandomFaceting.java",
                "patch": "@@ -0,0 +1,252 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr;\n+\n+import org.apache.lucene.search.FieldCache;\n+import org.apache.lucene.util._TestUtil;\n+import org.apache.noggit.JSONUtil;\n+import org.apache.noggit.ObjectBuilder;\n+import org.apache.solr.common.params.ModifiableSolrParams;\n+import org.apache.solr.request.SolrQueryRequest;\n+import org.apache.solr.schema.IndexSchema;\n+import org.apache.solr.schema.SchemaField;\n+import org.apache.solr.util.TestUtils;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+public class TestRandomFaceting extends SolrTestCaseJ4 {\n+\n+  public static final String FOO_STRING_FIELD = \"foo_s1\";\n+  public static final String SMALL_STRING_FIELD = \"small_s1\";\n+  public static final String SMALL_INT_FIELD = \"small_i\";\n+\n+  @BeforeClass\n+  public static void beforeTests() throws Exception {\n+    initCore(\"solrconfig.xml\",\"schema12.xml\");\n+  }\n+\n+\n+  int indexSize;\n+  List<FldType> types;\n+  Map<Comparable, Doc> model = null;\n+  boolean validateResponses = true;\n+\n+  void init() {\n+    Random rand = random();\n+    clearIndex();\n+    model = null;\n+    indexSize = rand.nextBoolean() ? (rand.nextInt(10) + 1) : (rand.nextInt(100) + 10);\n+\n+    types = new ArrayList<FldType>();\n+    types.add(new FldType(\"id\",ONE_ONE, new SVal('A','Z',4,4)));\n+    types.add(new FldType(\"score_f\",ONE_ONE, new FVal(1,100)));\n+    types.add(new FldType(\"foo_i\",ZERO_ONE, new IRange(0,indexSize)));\n+    types.add(new FldType(\"small_s\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n+    types.add(new FldType(\"small2_s\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n+    types.add(new FldType(\"small2_ss\",ZERO_TWO, new SVal('a',(char)('c'+indexSize/3),1,1)));\n+    types.add(new FldType(\"small3_ss\",new IRange(0,25), new SVal('A','z',1,1)));\n+    types.add(new FldType(\"small_i\",ZERO_ONE, new IRange(0,5+indexSize/3)));\n+    types.add(new FldType(\"small2_i\",ZERO_ONE, new IRange(0,5+indexSize/3)));\n+    types.add(new FldType(\"small2_is\",ZERO_TWO, new IRange(0,5+indexSize/3)));\n+    types.add(new FldType(\"small3_is\",new IRange(0,25), new IRange(0,100)));\n+\n+    types.add(new FldType(\"missing_i\",new IRange(0,0), new IRange(0,100)));\n+    types.add(new FldType(\"missing_is\",new IRange(0,0), new IRange(0,100)));\n+    types.add(new FldType(\"missing_s\",new IRange(0,0), new SVal('a','b',1,1)));\n+    types.add(new FldType(\"missing_ss\",new IRange(0,0), new SVal('a','b',1,1)));\n+\n+    // TODO: doubles, multi-floats, ints with precisionStep>0, booleans\n+  }\n+\n+  void addMoreDocs(int ndocs) throws Exception {\n+    model = indexDocs(types, model, ndocs);\n+  }\n+\n+  void deleteSomeDocs() throws Exception {\n+    Random rand = random();\n+    int percent = rand.nextInt(100);\n+    if (model == null) return;\n+    ArrayList<String> ids = new ArrayList<String>(model.size());\n+    for (Comparable id : model.keySet()) {\n+      if (rand.nextInt(100) < percent) {\n+        ids.add(id.toString());\n+      }\n+    }\n+    if (ids.size() == 0) return;\n+\n+    StringBuffer sb = new StringBuffer(\"id:(\");\n+    for (String id : ids) {\n+      sb.append(id).append(' ');\n+      model.remove(id);\n+    }\n+    sb.append(')');\n+\n+    assertU(delQ(sb.toString()));\n+\n+    if (rand.nextInt(10)==0) {\n+      assertU(optimize());\n+    } else {\n+      assertU(commit(\"softCommit\",\"\"+(rand.nextInt(10)!=0)));\n+    }\n+  }\n+\n+  @Test\n+  public void testRandomFaceting() throws Exception {\n+    try {\n+      Random rand = random();\n+      int iter = atLeast(100);\n+      init();\n+      addMoreDocs(0);\n+\n+      for (int i=0; i<iter; i++) {\n+        doFacetTests();\n+\n+        if (rand.nextInt(100) < 5) {\n+          init();\n+        }\n+\n+        addMoreDocs(rand.nextInt(indexSize) + 1);\n+\n+        if (rand.nextInt(100) < 50) {\n+          deleteSomeDocs();\n+        }\n+      }\n+    } finally {\n+      purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity\n+    }\n+  }\n+\n+\n+  void doFacetTests() throws Exception {\n+    for (FldType ftype : types) {\n+      doFacetTests(ftype);\n+    }\n+  }\n+\n+\n+  List<String> multiValuedMethods = Arrays.asList(new String[]{\"enum\",\"fc\"});\n+  List<String> singleValuedMethods = Arrays.asList(new String[]{\"enum\",\"fc\",\"fcs\"});\n+\n+\n+  void doFacetTests(FldType ftype) throws Exception {\n+    SolrQueryRequest req = req();\n+    try {\n+      Random rand = random();\n+      boolean validate = validateResponses;\n+      ModifiableSolrParams params = params(\"facet\",\"true\", \"wt\",\"json\", \"indent\",\"true\", \"omitHeader\",\"true\");\n+      params.add(\"q\",\"*:*\", \"rows\",\"0\");  // TODO: select subsets\n+      params.add(\"rows\",\"0\");\n+\n+\n+      SchemaField sf = req.getSchema().getField(ftype.fname);\n+      boolean multiValued = sf.getType().multiValuedFieldCache();\n+\n+      int offset = 0;\n+      if (rand.nextInt(100) < 20) {\n+        if (rand.nextBoolean()) {\n+          offset = rand.nextInt(100) < 10 ? rand.nextInt(indexSize*2) : rand.nextInt(indexSize/3+1);\n+        }\n+        params.add(\"facet.offset\", Integer.toString(offset));\n+      }\n+\n+      int limit = 100;\n+      if (rand.nextInt(100) < 20) {\n+        if (rand.nextBoolean()) {\n+          limit = rand.nextInt(100) < 10 ? rand.nextInt(indexSize/2+1) : rand.nextInt(indexSize*2);\n+        }\n+        params.add(\"facet.limit\", Integer.toString(limit));\n+      }\n+\n+      if (rand.nextBoolean()) {\n+        params.add(\"facet.sort\", rand.nextBoolean() ? \"index\" : \"count\");\n+      }\n+\n+      if ((ftype.vals instanceof SVal) && rand.nextInt(100) < 20) {\n+        // validate = false;\n+        String prefix = ftype.createValue().toString();\n+        if (rand.nextInt(100) < 5) prefix =  _TestUtil.randomUnicodeString(rand);\n+        else if (rand.nextInt(100) < 10) prefix = Character.toString((char)rand.nextInt(256));\n+        else if (prefix.length() > 0) prefix = prefix.substring(0, rand.nextInt(prefix.length()));\n+        params.add(\"facet.prefix\", prefix);\n+      }\n+\n+      if (rand.nextInt(100) < 10) {\n+        params.add(\"facet.mincount\", Integer.toString(rand.nextInt(5)));\n+      }\n+\n+      if (rand.nextInt(100) < 20) {\n+        params.add(\"facet.missing\", \"true\");\n+      }\n+\n+      // TODO: randomly add other facet params\n+      String key = ftype.fname;\n+      String facet_field = ftype.fname;\n+      if (random().nextBoolean()) {\n+        key = \"alternate_key\";\n+        facet_field = \"{!key=\"+key+\"}\"+ftype.fname;\n+      }\n+      params.set(\"facet.field\", facet_field);\n+\n+      List<String> methods = multiValued ? multiValuedMethods : singleValuedMethods;\n+      List<String> responses = new ArrayList<String>(methods.size());\n+      for (String method : methods) {\n+        // params.add(\"facet.field\", \"{!key=\"+method+\"}\" + ftype.fname);\n+        // TODO: allow method to be passed on local params?\n+\n+        params.set(\"facet.method\", method);\n+\n+        // if (random().nextBoolean()) params.set(\"facet.mincount\", \"1\");  // uncomment to test that validation fails\n+\n+        String strResponse = h.query(req(params));\n+        // Object realResponse = ObjectBuilder.fromJSON(strResponse);\n+        // System.out.println(strResponse);\n+\n+        responses.add(strResponse);\n+      }\n+\n+      /**\n+      String strResponse = h.query(req(params));\n+      Object realResponse = ObjectBuilder.fromJSON(strResponse);\n+      **/\n+\n+      if (validate) {\n+        for (int i=1; i<methods.size(); i++) {\n+          String err = JSONTestUtil.match(\"/\", responses.get(i), responses.get(0), 0.0);\n+          if (err != null) {\n+            log.error(\"ERROR: mismatch facet response: \" + err +\n+                \"\\n expected =\" + responses.get(0) +\n+                \"\\n response = \" + responses.get(i) +\n+                \"\\n request = \" + params\n+            );\n+            fail(err);\n+          }\n+        }\n+      }\n+\n+\n+    } finally {\n+      req.close();\n+    }\n+  }\n+\n+}\n+\n+",
                "raw_url": "https://github.com/apache/lucene-solr/raw/612d9227dec4803fd648d605592ff72d9a2a2355/solr/core/src/test/org/apache/solr/TestRandomFaceting.java",
                "sha": "b4b1fa21489854aa3714eb583829741edd0b7a77",
                "status": "added"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/lucene-solr/blob/612d9227dec4803fd648d605592ff72d9a2a2355/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java?ref=612d9227dec4803fd648d605592ff72d9a2a2355",
                "deletions": 1,
                "filename": "solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java",
                "patch": "@@ -1154,7 +1154,11 @@ public Fld createField() {\n     if (random().nextInt(10)==0) {\n       assertU(optimize());\n     } else {\n-      assertU(commit());\n+      if (random().nextInt(10) == 0) {\n+        assertU(commit());\n+      } else {\n+        assertU(commit(\"softCommit\",\"true\"));\n+      }\n     }\n \n     // merging segments no longer selects just adjacent segments hence ids (doc.order) can be shuffled.",
                "raw_url": "https://github.com/apache/lucene-solr/raw/612d9227dec4803fd648d605592ff72d9a2a2355/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java",
                "sha": "af666e5ed4c35da1566134e057c6dfb73c5a256e",
                "status": "modified"
            }
        ],
        "message": "SOLR-3427: fix NPE in UnInvertedField faceting\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1333125 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/0f7bc01bc585846f17dc5dfa0995f82bcae86ee5",
        "repo": "lucene-solr",
        "unit_tests": [
            "SolrTestCaseJ4Test.java",
            "TestSolrTestCaseJ4.java"
        ]
    },
    "lucene-solr_617028b": {
        "bug_id": "lucene-solr_617028b",
        "commit": "https://github.com/apache/lucene-solr/commit/617028b3c14e4684656ca937125dc06fede1913a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/lucene-solr/blob/617028b3c14e4684656ca937125dc06fede1913a/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java?ref=617028b3c14e4684656ca937125dc06fede1913a",
                "deletions": 1,
                "filename": "solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java",
                "patch": "@@ -186,7 +186,7 @@ public void process(WatchedEvent event) {\n           if (EventType.None.equals(event.getType())) {\n             return;\n           }\n-          log.info(\"A cluster state change has occurred - updating... ({})\", ZkStateReader.this.clusterState.getLiveNodes().size());\n+          log.info(\"A cluster state change has occurred - updating... ({})\", ZkStateReader.this.clusterState == null ? 0 : ZkStateReader.this.clusterState.getLiveNodes().size());\n           try {\n             \n             // delayed approach",
                "raw_url": "https://github.com/apache/lucene-solr/raw/617028b3c14e4684656ca937125dc06fede1913a/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java",
                "sha": "05186f6433fa01050f7cfe495a03a50912ec05a1",
                "status": "modified"
            }
        ],
        "message": "avoid possible logging npe in race\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1411932 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/925dcb80bdb4fec19a8569cf42d68e80088b3e4c",
        "repo": "lucene-solr",
        "unit_tests": [
            "ZkStateReaderTest.java"
        ]
    },
    "lucene-solr_645fd55": {
        "bug_id": "lucene-solr_645fd55",
        "commit": "https://github.com/apache/lucene-solr/commit/645fd551f60b23779ff3c09eeedd9a9daf293ab2",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/lucene-solr/blob/645fd551f60b23779ff3c09eeedd9a9daf293ab2/src/java/org/apache/solr/spelling/SpellingQueryConverter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/src/java/org/apache/solr/spelling/SpellingQueryConverter.java?ref=645fd551f60b23779ff3c09eeedd9a9daf293ab2",
                "deletions": 0,
                "filename": "src/java/org/apache/solr/spelling/SpellingQueryConverter.java",
                "patch": "@@ -21,6 +21,7 @@\n import java.io.StringReader;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n@@ -38,6 +39,9 @@\n \n \n   public Collection<Token> convert(String original) {\n+    if( original == null ) { // this can happen with q.alt = and no query\n+      return Collections.emptyList();\n+    }\n     Collection<Token> result = new ArrayList<Token>();\n     //TODO: Extract the words using a simple regex, but not query stuff, and then analyze them to produce the token stream\n     Matcher matcher = QUERY_REGEX.matcher(original);",
                "raw_url": "https://github.com/apache/lucene-solr/raw/645fd551f60b23779ff3c09eeedd9a9daf293ab2/src/java/org/apache/solr/spelling/SpellingQueryConverter.java",
                "sha": "000c46e22dad1822a8bb366a5a23b042fe3ccbeb",
                "status": "modified"
            }
        ],
        "message": "SOLR-661 -- fix NPE when there is no query\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/solr/trunk@679925 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/22cd8ef46f5ebd8580e398a9c622397438376020",
        "repo": "lucene-solr",
        "unit_tests": [
            "SpellingQueryConverterTest.java"
        ]
    },
    "lucene-solr_64bdf38": {
        "bug_id": "lucene-solr_64bdf38",
        "commit": "https://github.com/apache/lucene-solr/commit/64bdf38619cf04c029532b46ac84c50942317f2b",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/lucene-solr/blob/64bdf38619cf04c029532b46ac84c50942317f2b/lucene/src/java/org/apache/lucene/search/AutomatonQuery.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/lucene/src/java/org/apache/lucene/search/AutomatonQuery.java?ref=64bdf38619cf04c029532b46ac84c50942317f2b",
                "deletions": 1,
                "filename": "lucene/src/java/org/apache/lucene/search/AutomatonQuery.java",
                "patch": "@@ -75,7 +75,8 @@ public AutomatonQuery(Term term, Automaton automaton) {\n     MinimizationOperations.minimize(automaton);\n   }\n \n-  private void compileAutomaton() {\n+  private synchronized void compileAutomaton() {\n+    // this method must be synchronized, as setting the three transient fields is not atomic:\n     if (runAutomaton == null) {\n       runAutomaton = new ByteRunAutomaton(automaton);\n       isFinite = SpecialOperations.isFinite(automaton);",
                "raw_url": "https://github.com/apache/lucene-solr/raw/64bdf38619cf04c029532b46ac84c50942317f2b/lucene/src/java/org/apache/lucene/search/AutomatonQuery.java",
                "sha": "0d2d5ee2b20d3401594fccaf8bfaeb7b7ee4ab71",
                "status": "modified"
            }
        ],
        "message": "Make compileAutomaton synchronized, as it can break for queries that are shared constants (like a drop down list in a web interface that provides predefined query constraints. These types of queries are in most places somewhere predefined in your code and then used by different threads/servlets/whatever). As the three transient vars cannot be set atomically, a parallel running thread may see half of the fields assigned and will get NPE).\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@987118 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/cbc4a3a1cf1252569c25909ec58e5e89631e1249",
        "repo": "lucene-solr",
        "unit_tests": [
            "TestAutomatonQuery.java"
        ]
    },
    "lucene-solr_6abb23b": {
        "bug_id": "lucene-solr_6abb23b",
        "commit": "https://github.com/apache/lucene-solr/commit/6abb23b22b12457f85beae879656a7908ef663cc",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/lucene-solr/blob/6abb23b22b12457f85beae879656a7908ef663cc/solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler.java?ref=6abb23b22b12457f85beae879656a7908ef663cc",
                "deletions": 1,
                "filename": "solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler.java",
                "patch": "@@ -95,7 +95,8 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw\n     if (solrCloudMode) {\n       rsp.add(\"zkHost\", getCoreContainer(req, core).getZkController().getZkServerAddress());\n     }\n-    rsp.add( \"solr_home\", cc.getSolrHome());\n+    if (cc != null)\n+      rsp.add( \"solr_home\", cc.getSolrHome());\n     rsp.add( \"lucene\", getLuceneInfo() );\n     rsp.add( \"jvm\", getJvmInfo() );\n     rsp.add( \"system\", getSystemInfo() );",
                "raw_url": "https://github.com/apache/lucene-solr/raw/6abb23b22b12457f85beae879656a7908ef663cc/solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler.java",
                "sha": "1bb2a6e61d37c7cad31f68cef26e523578095f2e",
                "status": "modified"
            }
        ],
        "message": "SOLR-3619: Fix NPE during unit tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1642017 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/f8cd5c66889664170d8e2e8b6851153b7f67213f",
        "repo": "lucene-solr",
        "unit_tests": [
            "SystemInfoHandlerTest.java"
        ]
    },
    "lucene-solr_6d4867e": {
        "bug_id": "lucene-solr_6d4867e",
        "commit": "https://github.com/apache/lucene-solr/commit/6d4867eca0ac9f562d89ad8ade5c3bb4067f69af",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/lucene-solr/blob/6d4867eca0ac9f562d89ad8ade5c3bb4067f69af/solr/src/java/org/apache/solr/handler/CSVRequestHandler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/src/java/org/apache/solr/handler/CSVRequestHandler.java?ref=6d4867eca0ac9f562d89ad8ade5c3bb4067f69af",
                "deletions": 1,
                "filename": "solr/src/java/org/apache/solr/handler/CSVRequestHandler.java",
                "patch": "@@ -307,7 +307,7 @@ void prepareFields() {\n         String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n         char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n         String escStr = params.getFieldParam(fname,ESCAPE);\n-        char fesc = escStr==null || encStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n+        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n \n         CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n         adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);",
                "raw_url": "https://github.com/apache/lucene-solr/raw/6d4867eca0ac9f562d89ad8ade5c3bb4067f69af/solr/src/java/org/apache/solr/handler/CSVRequestHandler.java",
                "sha": "b46eb41cb9fd6daf52e66fdd250b8ad933dd69cc",
                "status": "modified"
            }
        ],
        "message": "SOLR-2264: CSVRequestHandler can throw NPE when no escape parameter is specified for splitting\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1041963 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/8ec36c3f567662cdc8f16fb0e787d829719f7538",
        "repo": "lucene-solr",
        "unit_tests": [
            "CSVRequestHandlerTest.java"
        ]
    },
    "lucene-solr_6f99196": {
        "bug_id": "lucene-solr_6f99196",
        "commit": "https://github.com/apache/lucene-solr/commit/6f99196e816761706e616325b3b2399867c571cc",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/lucene-solr/blob/6f99196e816761706e616325b3b2399867c571cc/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.java?ref=6f99196e816761706e616325b3b2399867c571cc",
                "deletions": 6,
                "filename": "solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.java",
                "patch": "@@ -986,15 +986,11 @@ public RouteException(ErrorCode errorCode, NamedList<Throwable> throwables, Map<\n \n       // if the state was stale, then we retry the request once with new state pulled from Zk\n       if (stateWasStale) {\n-        log.warn(\"Re-trying request to  collection(s) \"+inputCollections+\" after stale state error from server.\");\n+        log.warn(\"Re-trying request to collection(s) \"+inputCollections+\" after stale state error from server.\");\n         resp = requestWithRetryOnStaleState(request, retryCount+1, inputCollections);\n       } else {\n-        if(exc instanceof SolrException) {\n+        if (exc instanceof SolrException || exc instanceof SolrServerException || exc instanceof IOException) {\n           throw exc;\n-        } if (exc instanceof SolrServerException) {\n-          throw (SolrServerException)exc;\n-        } else if (exc instanceof IOException) {\n-          throw (IOException)exc;\n         } else {\n           throw new SolrServerException(rootCause);\n         }\n@@ -1059,6 +1055,9 @@ public RouteException(ErrorCode errorCode, NamedList<Throwable> throwables, Map<\n       String shardKeys = reqParams.get(ShardParams._ROUTE_);\n       for (String collectionName : collectionNames) {\n         DocCollection col = getDocCollection(collectionName, null);\n+        if (col == null) {\n+          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n+        }\n         Collection<Slice> routeSlices = col.getRouter().getSearchSlices(shardKeys, reqParams , col);\n         ClientUtils.addSlices(slices, collectionName, routeSlices, true);\n       }",
                "raw_url": "https://github.com/apache/lucene-solr/raw/6f99196e816761706e616325b3b2399867c571cc/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.java",
                "sha": "2432fb22d7e8d586714a6c77a7b161d75d522247",
                "status": "modified"
            }
        ],
        "message": "SOLR-11444: CloudSolrClient could have thrown an NPE if the collection doesn't exist.\nRefactor: Tidy the exception throwing",
        "parent": "https://github.com/apache/lucene-solr/commit/51b2dea68e291141e2bfb98a2e07420a6b5869b2",
        "repo": "lucene-solr",
        "unit_tests": [
            "CloudSolrClientTest.java"
        ]
    },
    "lucene-solr_80cce99": {
        "bug_id": "lucene-solr_80cce99",
        "commit": "https://github.com/apache/lucene-solr/commit/80cce99ebc9ced8b6af0af3fa813af8ea4241454",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/lucene-solr/blob/80cce99ebc9ced8b6af0af3fa813af8ea4241454/solr/core/src/java/org/apache/solr/update/processor/DocExpirationUpdateProcessorFactory.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/update/processor/DocExpirationUpdateProcessorFactory.java?ref=80cce99ebc9ced8b6af0af3fa813af8ea4241454",
                "deletions": 2,
                "filename": "solr/core/src/java/org/apache/solr/update/processor/DocExpirationUpdateProcessorFactory.java",
                "patch": "@@ -23,7 +23,7 @@\n import static org.apache.solr.common.SolrException.ErrorCode.*;\n import org.apache.solr.common.util.NamedList;\n import org.apache.solr.common.SolrInputDocument;\n-import org.apache.solr.common.cloud.Slice;\n+import org.apache.solr.common.cloud.Replica;\n import org.apache.solr.common.cloud.Slice;\n \n import org.apache.solr.core.CloseHook;\n@@ -469,7 +469,17 @@ private boolean iAmInChargeOfPeriodicDeletes() {\n \n     List<Slice> slices = new ArrayList<Slice>(zk.getClusterState().getActiveSlices(col));\n     Collections.sort(slices, COMPARE_SLICES_BY_NAME);\n-    String leaderInCharge = slices.get(0).getLeader().getName();\n+    if (slices.isEmpty()) {\n+      log.error(\"Collection {} has no active Slices?\", col);\n+      return false;\n+    }\n+    Replica firstSliceLeader = slices.get(0).getLeader();\n+    if (null == firstSliceLeader) {\n+      log.warn(\"Slice in charge of periodic deletes for {} does not currently have a leader\",\n+               col);\n+      return false;\n+    }\n+    String leaderInCharge = firstSliceLeader.getName();\n     String myCoreNodeName = desc.getCoreNodeName();\n     \n     boolean inChargeOfDeletesRightNow = leaderInCharge.equals(myCoreNodeName);",
                "raw_url": "https://github.com/apache/lucene-solr/raw/80cce99ebc9ced8b6af0af3fa813af8ea4241454/solr/core/src/java/org/apache/solr/update/processor/DocExpirationUpdateProcessorFactory.java",
                "sha": "a006ebbb2579cd16ddf7290b59dcbf41835a214a",
                "status": "modified"
            }
        ],
        "message": "SOLR-5795: harden leader check to log cleanly (no NPE) in transient situations when there is no leader due to election in progress\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1584097 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/a9e04127dfe52b8ddfb9d24e8da4264e4446936e",
        "repo": "lucene-solr",
        "unit_tests": [
            "DocExpirationUpdateProcessorFactoryTest.java"
        ]
    },
    "lucene-solr_832dacf": {
        "bug_id": "lucene-solr_832dacf",
        "commit": "https://github.com/apache/lucene-solr/commit/832dacffc8dddfef07456624660118a593f176bd",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/lucene-solr/blob/832dacffc8dddfef07456624660118a593f176bd/solr/core/src/java/org/apache/solr/search/SolrCoreParser.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/search/SolrCoreParser.java?ref=832dacffc8dddfef07456624660118a593f176bd",
                "deletions": 0,
                "filename": "solr/core/src/java/org/apache/solr/search/SolrCoreParser.java",
                "patch": "@@ -43,6 +43,9 @@ public SolrCoreParser(String defaultField, Analyzer analyzer,\n \n   @Override\n   public void init(NamedList initArgs) {\n+    if (initArgs == null || initArgs.size() == 0) {\n+      return;\n+    }\n     final SolrResourceLoader loader;\n     if (req == null) {\n       loader = new SolrResourceLoader();",
                "raw_url": "https://github.com/apache/lucene-solr/raw/832dacffc8dddfef07456624660118a593f176bd/solr/core/src/java/org/apache/solr/search/SolrCoreParser.java",
                "sha": "4857b7534bde6acde95e799a1e830edf69baef2a",
                "status": "modified"
            }
        ],
        "message": "SOLR-9275: fix NPE in SolrCoreParser.init",
        "parent": "https://github.com/apache/lucene-solr/commit/5c4b7173a8535b76a96a32bdba79d8b89be14dc7",
        "repo": "lucene-solr",
        "unit_tests": [
            "TestSolrCoreParser.java"
        ]
    },
    "lucene-solr_847a8af": {
        "bug_id": "lucene-solr_847a8af",
        "commit": "https://github.com/apache/lucene-solr/commit/847a8af93b97cfbfc41664c6e3297a4af5c0c012",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/lucene-solr/blob/847a8af93b97cfbfc41664c6e3297a4af5c0c012/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader.java?ref=847a8af93b97cfbfc41664c6e3297a4af5c0c012",
                "deletions": 0,
                "filename": "lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader.java",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.Collections;\n import java.util.Locale;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.LinkedHashMap;\n import java.util.Set;\n import java.util.ServiceConfigurationError;\n@@ -54,6 +55,9 @@ public AnalysisSPILoader(Class<S> clazz, String[] suffixes, ClassLoader classloa\n     this.suffixes = suffixes;\n     // if clazz' classloader is not a parent of the given one, we scan clazz's classloader, too:\n     final ClassLoader clazzClassloader = clazz.getClassLoader();\n+    if (classloader == null) {\n+      classloader = clazzClassloader;\n+    }\n     if (clazzClassloader != null && !SPIClassIterator.isParentClassLoader(clazzClassloader, classloader)) {\n       reload(clazzClassloader);\n     }\n@@ -72,6 +76,7 @@ public AnalysisSPILoader(Class<S> clazz, String[] suffixes, ClassLoader classloa\n    * of new service providers on the given classpath/classloader!</em>\n    */\n   public synchronized void reload(ClassLoader classloader) {\n+    Objects.requireNonNull(classloader, \"classloader\");\n     final LinkedHashMap<String,Class<? extends S>> services =\n       new LinkedHashMap<>(this.services);\n     final SPIClassIterator<S> loader = SPIClassIterator.get(clazz, classloader);",
                "raw_url": "https://github.com/apache/lucene-solr/raw/847a8af93b97cfbfc41664c6e3297a4af5c0c012/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader.java",
                "sha": "b41e784de734985334b02fb9fde0eebd2c316197",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/lucene-solr/blob/847a8af93b97cfbfc41664c6e3297a4af5c0c012/lucene/core/src/java/org/apache/lucene/util/NamedSPILoader.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/lucene/core/src/java/org/apache/lucene/util/NamedSPILoader.java?ref=847a8af93b97cfbfc41664c6e3297a4af5c0c012",
                "deletions": 0,
                "filename": "lucene/core/src/java/org/apache/lucene/util/NamedSPILoader.java",
                "patch": "@@ -20,6 +20,7 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.LinkedHashMap;\n import java.util.Set;\n import java.util.ServiceConfigurationError;\n@@ -41,6 +42,9 @@ public NamedSPILoader(Class<S> clazz, ClassLoader classloader) {\n     this.clazz = clazz;\n     // if clazz' classloader is not a parent of the given one, we scan clazz's classloader, too:\n     final ClassLoader clazzClassloader = clazz.getClassLoader();\n+    if (classloader == null) {\n+      classloader = clazzClassloader;\n+    }\n     if (clazzClassloader != null && !SPIClassIterator.isParentClassLoader(clazzClassloader, classloader)) {\n       reload(clazzClassloader);\n     }\n@@ -59,6 +63,7 @@ public NamedSPILoader(Class<S> clazz, ClassLoader classloader) {\n    * of new service providers on the given classpath/classloader!</em>\n    */\n   public void reload(ClassLoader classloader) {\n+    Objects.requireNonNull(classloader, \"classloader\");\n     final LinkedHashMap<String,S> services = new LinkedHashMap<>(this.services);\n     final SPIClassIterator<S> loader = SPIClassIterator.get(clazz, classloader);\n     while (loader.hasNext()) {",
                "raw_url": "https://github.com/apache/lucene-solr/raw/847a8af93b97cfbfc41664c6e3297a4af5c0c012/lucene/core/src/java/org/apache/lucene/util/NamedSPILoader.java",
                "sha": "33f45b27025349648ff36de6496566f0bf5498f8",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/lucene-solr/blob/847a8af93b97cfbfc41664c6e3297a4af5c0c012/lucene/core/src/java/org/apache/lucene/util/SPIClassIterator.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/lucene/core/src/java/org/apache/lucene/util/SPIClassIterator.java?ref=847a8af93b97cfbfc41664c6e3297a4af5c0c012",
                "deletions": 1,
                "filename": "lucene/core/src/java/org/apache/lucene/util/SPIClassIterator.java",
                "patch": "@@ -50,7 +50,11 @@\n   \n   /** Creates a new SPI iterator to lookup services of type {@code clazz} using the context classloader. */\n   public static <S> SPIClassIterator<S> get(Class<S> clazz) {\n-    return new SPIClassIterator<>(clazz, Thread.currentThread().getContextClassLoader());\n+    ClassLoader cl = Thread.currentThread().getContextClassLoader();\n+    if (cl == null) {\n+      cl = clazz.getClassLoader();\n+    }\n+    return new SPIClassIterator<>(clazz, cl);\n   }\n   \n   /** Creates a new SPI iterator to lookup services of type {@code clazz} using the given classloader. */",
                "raw_url": "https://github.com/apache/lucene-solr/raw/847a8af93b97cfbfc41664c6e3297a4af5c0c012/lucene/core/src/java/org/apache/lucene/util/SPIClassIterator.java",
                "sha": "6293e45415bc70d7eea10d4920ebb4c00a423c8c",
                "status": "modified"
            }
        ],
        "message": "LUCENE-6921: Prevent NPE if stupid context classloader is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1718113 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/889bf7f9538c96c2d6637490e581985415f59baa",
        "repo": "lucene-solr",
        "unit_tests": [
            "TestSPIClassIterator.java"
        ]
    },
    "lucene-solr_86039cd": {
        "bug_id": "lucene-solr_86039cd",
        "commit": "https://github.com/apache/lucene-solr/commit/86039cdb361babf39552aac44b9cc789134e2f11",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/lucene-solr/blob/86039cdb361babf39552aac44b9cc789134e2f11/src/java/org/apache/lucene/index/SegmentReader.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/src/java/org/apache/lucene/index/SegmentReader.java?ref=86039cdb361babf39552aac44b9cc789134e2f11",
                "deletions": 1,
                "filename": "src/java/org/apache/lucene/index/SegmentReader.java",
                "patch": "@@ -106,7 +106,6 @@\n       segment = si.name;\n       this.readBufferSize = readBufferSize;\n       this.dir = dir;\n-      this.origInstance = origInstance;\n \n       boolean success = false;\n \n@@ -144,6 +143,12 @@\n           decRef();\n         }\n       }\n+\n+      // Must assign this at the end -- if we hit an\n+      // exception above core, we don't want to attempt to\n+      // purge the FieldCache (will hit NPE because core is\n+      // not assigned yet).\n+      this.origInstance = origInstance;\n     }\n \n     synchronized TermVectorsReader getTermVectorsReaderOrig() {",
                "raw_url": "https://github.com/apache/lucene-solr/raw/86039cdb361babf39552aac44b9cc789134e2f11/src/java/org/apache/lucene/index/SegmentReader.java",
                "sha": "09aa645203061ca69ffdbc44359ebf41558467e4",
                "status": "modified"
            }
        ],
        "message": "LUCENE-2135: don't flush field cache if we hit exception during init (it leads to NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/java/trunk@890439 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/c67b43ef34955bd5218bf87da961171e749a3fec",
        "repo": "lucene-solr",
        "unit_tests": [
            "TestSegmentReader.java"
        ]
    },
    "lucene-solr_8643227": {
        "bug_id": "lucene-solr_8643227",
        "commit": "https://github.com/apache/lucene-solr/commit/86432275f6185436b437c6320ba41cac4ed46f95",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/lucene-solr/blob/86432275f6185436b437c6320ba41cac4ed46f95/src/java/org/apache/lucene/index/IndexWriter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/src/java/org/apache/lucene/index/IndexWriter.java?ref=86432275f6185436b437c6320ba41cac4ed46f95",
                "deletions": 1,
                "filename": "src/java/org/apache/lucene/index/IndexWriter.java",
                "patch": "@@ -2273,7 +2273,9 @@ else if (next != si.getDocStoreOffset())\n       }\n     } finally {\n       // close readers before we attempt to delete now-obsolete segments\n-      merger.closeReaders();\n+      if (merger != null) {\n+        merger.closeReaders();\n+      }\n     }\n \n     // Give deleter a chance to remove files now.",
                "raw_url": "https://github.com/apache/lucene-solr/raw/86432275f6185436b437c6320ba41cac4ed46f95/src/java/org/apache/lucene/index/IndexWriter.java",
                "sha": "02826ada5905b7c75a6a78bc52ae36c7ea74fc11",
                "status": "modified"
            }
        ],
        "message": "protect object against NPE in finally block, as an NPE here would hide the original exception\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/java/trunk@558160 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/58027a24bb6972e8c173d55dc29e3b274a10d08b",
        "repo": "lucene-solr",
        "unit_tests": [
            "TestIndexWriter.java"
        ]
    },
    "lucene-solr_8808cf5": {
        "bug_id": "lucene-solr_8808cf5",
        "commit": "https://github.com/apache/lucene-solr/commit/8808cf5373522f37bce509729b0b3a7fc9bcbd88",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/lucene-solr/blob/8808cf5373522f37bce509729b0b3a7fc9bcbd88/lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier.java?ref=8808cf5373522f37bce509729b0b3a7fc9bcbd88",
                "deletions": 12,
                "filename": "lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier.java",
                "patch": "@@ -145,18 +145,19 @@ public SimpleNaiveBayesClassifier(LeafReader leafReader, Analyzer analyzer, Quer\n     List<ClassificationResult<BytesRef>> assignedClasses = new ArrayList<>();\n \n     Terms classes = MultiFields.getTerms(leafReader, classFieldName);\n-    TermsEnum classesEnum = classes.iterator();\n-    BytesRef next;\n-    String[] tokenizedText = tokenize(inputDocument);\n-    int docsWithClassSize = countDocsWithClass();\n-    while ((next = classesEnum.next()) != null) {\n-      if (next.length > 0) {\n-        Term term = new Term(this.classFieldName, next);\n-        double clVal = calculateLogPrior(term, docsWithClassSize) + calculateLogLikelihood(tokenizedText, term, docsWithClassSize);\n-        assignedClasses.add(new ClassificationResult<>(term.bytes(), clVal));\n+    if (classes != null) {\n+      TermsEnum classesEnum = classes.iterator();\n+      BytesRef next;\n+      String[] tokenizedText = tokenize(inputDocument);\n+      int docsWithClassSize = countDocsWithClass();\n+      while ((next = classesEnum.next()) != null) {\n+        if (next.length > 0) {\n+          Term term = new Term(this.classFieldName, next);\n+          double clVal = calculateLogPrior(term, docsWithClassSize) + calculateLogLikelihood(tokenizedText, term, docsWithClassSize);\n+          assignedClasses.add(new ClassificationResult<>(term.bytes(), clVal));\n+        }\n       }\n     }\n-\n     // normalization; the values transforms to a 0-1 range\n     return normClassificationResults(assignedClasses);\n   }\n@@ -168,8 +169,9 @@ public SimpleNaiveBayesClassifier(LeafReader leafReader, Analyzer analyzer, Quer\n    * @throws IOException if accessing to term vectors or search fails\n    */\n   protected int countDocsWithClass() throws IOException {\n-    int docCount = MultiFields.getTerms(this.leafReader, this.classFieldName).getDocCount();\n-    if (docCount == -1) { // in case codec doesn't support getDocCount\n+    Terms terms = MultiFields.getTerms(this.leafReader, this.classFieldName);\n+    int docCount;\n+    if (terms == null || terms.getDocCount() == -1) { // in case codec doesn't support getDocCount\n       TotalHitCountCollector classQueryCountCollector = new TotalHitCountCollector();\n       BooleanQuery.Builder q = new BooleanQuery.Builder();\n       q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n@@ -179,6 +181,8 @@ protected int countDocsWithClass() throws IOException {\n       indexSearcher.search(q.build(),\n           classQueryCountCollector);\n       docCount = classQueryCountCollector.getTotalHits();\n+    } else {\n+      docCount = terms.getDocCount();\n     }\n     return docCount;\n   }",
                "raw_url": "https://github.com/apache/lucene-solr/raw/8808cf5373522f37bce509729b0b3a7fc9bcbd88/lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier.java",
                "sha": "2514ae1e64409b8ad2ae4b3f758e759406f734c6",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/lucene-solr/blob/8808cf5373522f37bce509729b0b3a7fc9bcbd88/lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier.java?ref=8808cf5373522f37bce509729b0b3a7fc9bcbd88",
                "deletions": 22,
                "filename": "lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier.java",
                "patch": "@@ -168,28 +168,6 @@ private void analyzeSeedDocument(Document inputDocument, Map<String, List<String\n     }\n   }\n \n-  /**\n-   * Counts the number of documents in the index having at least a value for the 'class' field\n-   *\n-   * @return the no. of documents having a value for the 'class' field\n-   * @throws java.io.IOException If accessing to term vectors or search fails\n-   */\n-  protected int countDocsWithClass() throws IOException {\n-    int docCount = MultiFields.getTerms(this.leafReader, this.classFieldName).getDocCount();\n-    if (docCount == -1) { // in case codec doesn't support getDocCount\n-      TotalHitCountCollector classQueryCountCollector = new TotalHitCountCollector();\n-      BooleanQuery.Builder q = new BooleanQuery.Builder();\n-      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n-      if (query != null) {\n-        q.add(query, BooleanClause.Occur.MUST);\n-      }\n-      indexSearcher.search(q.build(),\n-          classQueryCountCollector);\n-      docCount = classQueryCountCollector.getTotalHits();\n-    }\n-    return docCount;\n-  }\n-\n   /**\n    * Returns a token array from the {@link org.apache.lucene.analysis.TokenStream} in input\n    *",
                "raw_url": "https://github.com/apache/lucene-solr/raw/8808cf5373522f37bce509729b0b3a7fc9bcbd88/lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier.java",
                "sha": "2c5a493ed773d16d0af710b09ffcc8900769e377",
                "status": "modified"
            }
        ],
        "message": "LUCENE-7303 - avoid NPE in MultiFields.getTerms(leafReader, classFieldName), removed duplicated code in DocumentSNBC",
        "parent": "https://github.com/apache/lucene-solr/commit/2aabed4ab630a65f514cd536fbf79bb5c0a342c5",
        "repo": "lucene-solr",
        "unit_tests": [
            "SimpleNaiveBayesDocumentClassifierTest.java"
        ]
    },
    "lucene-solr_911ee1d": {
        "bug_id": "lucene-solr_911ee1d",
        "commit": "https://github.com/apache/lucene-solr/commit/911ee1dcd3435269e6f3970d3754aee4ab91e725",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/lucene-solr/blob/911ee1dcd3435269e6f3970d3754aee4ab91e725/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java?ref=911ee1dcd3435269e6f3970d3754aee4ab91e725",
                "deletions": 5,
                "filename": "solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java",
                "patch": "@@ -1163,7 +1163,7 @@ private void migrateKey(ClusterState clusterState, DocCollection sourceCollectio\n       Map<String, RoutingRule> rules = zkStateReader.getClusterState().getSlice(sourceCollection.getName(), sourceSlice.getName()).getRoutingRules();\n       if (rules != null) {\n         RoutingRule rule = rules.get(splitKey);\n-        if (rule.getRouteRanges().contains(splitRange)) {\n+        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n           added = true;\n           break;\n         }\n@@ -1179,13 +1179,13 @@ private void migrateKey(ClusterState clusterState, DocCollection sourceCollectio\n     Replica sourceLeader = sourceSlice.getLeader();\n \n     // create a temporary collection with just one node on the shard leader\n-    String sourceLeaderUrl = zkStateReader.getZkClient().getBaseUrlForNodeName(sourceLeader.getNodeName());\n-    if (sourceLeaderUrl.startsWith(\"http://\")) sourceLeaderUrl = sourceLeaderUrl.substring(7);\n+    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n     Map<String, Object> props = ZkNodeProps.makeMap(\n         QUEUE_OPERATION, CREATECOLLECTION,\n         \"name\", tempSourceCollectionName,\n         REPLICATION_FACTOR, 1,\n         NUM_SLICES, 1,\n+        COLL_CONF, configName,\n         CREATE_NODE_SET, sourceLeader.getNodeName());\n     log.info(\"Creating temporary collection: \" + props);\n     createCollection(clusterState, new ZkNodeProps(props), results);\n@@ -1194,6 +1194,23 @@ private void migrateKey(ClusterState clusterState, DocCollection sourceCollectio\n     Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n     Replica tempSourceLeader = clusterState.getLeader(tempSourceCollectionName, tempSourceSlice.getName());\n \n+    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n+    String coreNodeName = waitForCoreNodeName(clusterState.getCollection(tempSourceCollectionName),\n+        zkStateReader.getZkClient().getBaseUrlForNodeName(sourceLeader.getNodeName()), tempCollectionReplica1);\n+    // wait for the replicas to be seen as active on temp source leader\n+    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n+    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n+    cmd.setCoreName(tempCollectionReplica1);\n+    cmd.setNodeName(sourceLeader.getNodeName());\n+    cmd.setCoreNodeName(coreNodeName);\n+    cmd.setState(ZkStateReader.ACTIVE);\n+    cmd.setCheckLive(true);\n+    cmd.setOnlyIfLeader(true);\n+    sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()));\n+\n+    collectShardResponses(results, true,\n+        \"MIGRATE failed to create temp collection leader or timed out waiting for it to come up\");\n+\n     log.info(\"Asking source leader to split index\");\n     params = new ModifiableSolrParams();\n     params.set(CoreAdminParams.ACTION, CoreAdminAction.SPLIT.toString());\n@@ -1215,11 +1232,11 @@ private void migrateKey(ClusterState clusterState, DocCollection sourceCollectio\n     params.set(CoreAdminParams.SHARD, tempSourceSlice.getName());\n     sendShardRequest(targetLeader.getNodeName(), params);\n \n-    String coreNodeName = waitForCoreNodeName(clusterState.getCollection(tempSourceCollectionName),\n+    coreNodeName = waitForCoreNodeName(clusterState.getCollection(tempSourceCollectionName),\n         zkStateReader.getZkClient().getBaseUrlForNodeName(targetLeader.getNodeName()), tempCollectionReplica2);\n     // wait for the replicas to be seen as active on temp source leader\n     log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n-    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n+    cmd = new CoreAdminRequest.WaitForState();\n     cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n     cmd.setNodeName(targetLeader.getNodeName());\n     cmd.setCoreNodeName(coreNodeName);",
                "raw_url": "https://github.com/apache/lucene-solr/raw/911ee1dcd3435269e6f3970d3754aee4ab91e725/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java",
                "sha": "c0c7a93601b0a7979dcf2fb32dd861ece2b9b380",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/lucene-solr/blob/911ee1dcd3435269e6f3970d3754aee4ab91e725/solr/core/src/java/org/apache/solr/cloud/ZkController.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/cloud/ZkController.java?ref=911ee1dcd3435269e6f3970d3754aee4ab91e725",
                "deletions": 29,
                "filename": "solr/core/src/java/org/apache/solr/cloud/ZkController.java",
                "patch": "@@ -733,35 +733,6 @@ public boolean pathExists(String path) throws KeeperException,\n     return zkClient.exists(path, true);\n   }\n \n-  /**\n-   * Returns config value\n-   */\n-  public String readConfigName(String collection) throws KeeperException,\n-      InterruptedException {\n-\n-    String configName = null;\n-\n-    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n-    if (log.isInfoEnabled()) {\n-      log.info(\"Load collection config from:\" + path);\n-    }\n-    byte[] data = zkClient.getData(path, null, null, true);\n-    \n-    if(data != null) {\n-      ZkNodeProps props = ZkNodeProps.load(data);\n-      configName = props.getStr(CONFIGNAME_PROP);\n-    }\n-    \n-    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n-      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n-      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n-          \"Specified config does not exist in ZooKeeper:\" + configName);\n-    }\n-\n-    return configName;\n-  }\n-\n-\n \n   /**\n    * Register shard with ZooKeeper.",
                "raw_url": "https://github.com/apache/lucene-solr/raw/911ee1dcd3435269e6f3970d3754aee4ab91e725/solr/core/src/java/org/apache/solr/cloud/ZkController.java",
                "sha": "ee2a8e2956a5c689b62f98a78618b59d2d1ea06d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/lucene-solr/blob/911ee1dcd3435269e6f3970d3754aee4ab91e725/solr/core/src/java/org/apache/solr/core/CoreContainer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/core/CoreContainer.java?ref=911ee1dcd3435269e6f3970d3754aee4ab91e725",
                "deletions": 1,
                "filename": "solr/core/src/java/org/apache/solr/core/CoreContainer.java",
                "patch": "@@ -676,7 +676,7 @@ public void reload(String name) {\n             String collection = cd.getCloudDescriptor().getCollectionName();\n             zkSys.getZkController().createCollectionZkNode(cd.getCloudDescriptor());\n \n-            String zkConfigName = zkSys.getZkController().readConfigName(collection);\n+            String zkConfigName = zkSys.getZkController().getZkStateReader().readConfigName(collection);\n             if (zkConfigName == null) {\n               log.error(\"Could not find config name for collection:\" + collection);\n               throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,",
                "raw_url": "https://github.com/apache/lucene-solr/raw/911ee1dcd3435269e6f3970d3754aee4ab91e725/solr/core/src/java/org/apache/solr/core/CoreContainer.java",
                "sha": "9aaabfb75912e982e5eeedaf8af05a2269327ee0",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/lucene-solr/blob/911ee1dcd3435269e6f3970d3754aee4ab91e725/solr/core/src/java/org/apache/solr/core/ZkContainer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/core/ZkContainer.java?ref=911ee1dcd3435269e6f3970d3754aee4ab91e725",
                "deletions": 1,
                "filename": "solr/core/src/java/org/apache/solr/core/ZkContainer.java",
                "patch": "@@ -220,7 +220,7 @@ SolrCore createFromZk(String instanceDir, CoreDescriptor dcore, SolrResourceLoad\n       String collection = dcore.getCloudDescriptor().getCollectionName();\n       zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n       \n-      zkConfigName = zkController.readConfigName(collection);\n+      zkConfigName = zkController.getZkStateReader().readConfigName(collection);\n       if (zkConfigName == null) {\n         log.error(\"Could not find config name for collection:\" + collection);\n         throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,",
                "raw_url": "https://github.com/apache/lucene-solr/raw/911ee1dcd3435269e6f3970d3754aee4ab91e725/solr/core/src/java/org/apache/solr/core/ZkContainer.java",
                "sha": "e61487aebccfd950accc57c9a15c7c50a9fc5dbe",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/lucene-solr/blob/911ee1dcd3435269e6f3970d3754aee4ab91e725/solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java?ref=911ee1dcd3435269e6f3970d3754aee4ab91e725",
                "deletions": 1,
                "filename": "solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java",
                "patch": "@@ -208,7 +208,7 @@ public void inform(SolrCore core) {\n         ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n         if (zkController != null) {\n           // TODO : shouldn't have to keep reading the config name when it has been read before\n-          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n+          exists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n         } else {\n           File fC = new File(core.getResourceLoader().getConfigDir(), f);\n           File fD = new File(core.getDataDir(), f);",
                "raw_url": "https://github.com/apache/lucene-solr/raw/911ee1dcd3435269e6f3970d3754aee4ab91e725/solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java",
                "sha": "b0caa898c287f68fe0eaeba6b9c55e625e3b73e4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/lucene-solr/blob/911ee1dcd3435269e6f3970d3754aee4ab91e725/solr/core/src/test/org/apache/solr/cloud/ZkControllerTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/test/org/apache/solr/cloud/ZkControllerTest.java?ref=911ee1dcd3435269e6f3970d3754aee4ab91e725",
                "deletions": 1,
                "filename": "solr/core/src/test/org/apache/solr/cloud/ZkControllerTest.java",
                "patch": "@@ -188,7 +188,7 @@ public void testReadConfigName() throws Exception {\n             }\n           });\n       try {\n-        String configName = zkController.readConfigName(COLLECTION_NAME);\n+        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n         assertEquals(configName, actualConfigName);\n       } finally {\n         zkController.close();",
                "raw_url": "https://github.com/apache/lucene-solr/raw/911ee1dcd3435269e6f3970d3754aee4ab91e725/solr/core/src/test/org/apache/solr/cloud/ZkControllerTest.java",
                "sha": "3352e22ab86cd3cb6f91155f64f2c72ed33727d9",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/lucene-solr/blob/911ee1dcd3435269e6f3970d3754aee4ab91e725/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java?ref=911ee1dcd3435269e6f3970d3754aee4ab91e725",
                "deletions": 0,
                "filename": "solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java",
                "patch": "@@ -74,6 +74,9 @@\n   public static final String ACTIVE = \"active\";\n   public static final String DOWN = \"down\";\n   public static final String SYNC = \"sync\";\n+\n+  public static final String CONFIGS_ZKNODE = \"/configs\";\n+  public final static String CONFIGNAME_PROP=\"configName\";\n   \n   private volatile ClusterState clusterState;\n \n@@ -115,6 +118,35 @@ public static Object fromJSON(byte[] utf8) {\n     }\n   }\n \n+  /**\n+   * Returns config value\n+   * @param collection\n+   */\n+  public String readConfigName(String collection) throws KeeperException,\n+      InterruptedException {\n+\n+    String configName = null;\n+\n+    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n+    if (log.isInfoEnabled()) {\n+      log.info(\"Load collection config from:\" + path);\n+    }\n+    byte[] data = zkClient.getData(path, null, null, true);\n+\n+    if(data != null) {\n+      ZkNodeProps props = ZkNodeProps.load(data);\n+      configName = props.getStr(CONFIGNAME_PROP);\n+    }\n+\n+    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n+      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n+      throw new ZooKeeperException(ErrorCode.SERVER_ERROR,\n+          \"Specified config does not exist in ZooKeeper:\" + configName);\n+    }\n+\n+    return configName;\n+  }\n+\n \n   private static class ZKTF implements ThreadFactory {\n     private static ThreadGroup tg = new ThreadGroup(\"ZkStateReader\");",
                "raw_url": "https://github.com/apache/lucene-solr/raw/911ee1dcd3435269e6f3970d3754aee4ab91e725/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java",
                "sha": "35bc01e7d042ccb05043d7037ee9f1c3855202a6",
                "status": "modified"
            }
        ],
        "message": "SOLR-5308: Use source collection's configName to create temp collection. Fixed NPE routing rule wait loop. Wait for temp collection leader to be active before splitting the source index.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1544414 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/0971bc8f219b7e558efe659f0af77c163d96a019",
        "repo": "lucene-solr",
        "unit_tests": [
            "ZkStateReaderTest.java"
        ]
    },
    "lucene-solr_93ba7da": {
        "bug_id": "lucene-solr_93ba7da",
        "commit": "https://github.com/apache/lucene-solr/commit/93ba7da65f5836d18ed933907c897d958aaa2b63",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/lucene-solr/blob/93ba7da65f5836d18ed933907c897d958aaa2b63/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java?ref=93ba7da65f5836d18ed933907c897d958aaa2b63",
                "deletions": 23,
                "filename": "solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java",
                "patch": "@@ -148,10 +148,6 @@ public void destroy() {\n     }\n   }\n \n-\n-\n-\n-\n   public JettySolrRunner(String solrHome, String context, int port) {\n     this.init(solrHome, context, port, true);\n     this.name = \"jetty-\" + JETTY_ID_COUNTER.incrementAndGet();\n@@ -218,11 +214,19 @@ public JettySolrRunner(String solrHome, String context, int port,\n   \n   private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n     this.context = context;\n-\n     this.solrHome = solrHome;\n     this.stopAtShutdown = stopAtShutdown;\n \n     System.setProperty(\"solr.solr.home\", solrHome);\n+    \n+    QueuedThreadPool qtp = new QueuedThreadPool();\n+    qtp.setMaxThreads(10000);\n+    qtp.setIdleTimeout((int) TimeUnit.SECONDS.toMillis(5));\n+    qtp.setStopTimeout((int) TimeUnit.MINUTES.toMillis(1));\n+    server = new Server(qtp);\n+    server.manage(qtp);\n+    server.setStopAtShutdown(stopAtShutdown);\n+    \n     if (System.getProperty(\"jetty.testMode\") != null) {\n       // if this property is true, then jetty will be configured to use SSL\n       // leveraging the same system properties as java to specify\n@@ -237,15 +241,6 @@ private void init(String solrHome, String context, int port, boolean stopAtShutd\n       final SslContextFactory sslcontext = new SslContextFactory(false);\n       sslInit(useSsl, sslcontext);\n \n-      QueuedThreadPool qtp = new QueuedThreadPool();\n-      qtp.setMaxThreads(10000);\n-      qtp.setIdleTimeout((int) TimeUnit.SECONDS.toMillis(5));\n-      qtp.setStopTimeout((int) TimeUnit.MINUTES.toMillis(1));\n-\n-      server = new Server(qtp);\n-      server.setStopAtShutdown(stopAtShutdown);\n-      server.manage(qtp);\n-\n       ServerConnector connector;\n       if (useSsl) {\n         HttpConfiguration configuration = new HttpConfiguration();\n@@ -273,15 +268,7 @@ private void init(String solrHome, String context, int port, boolean stopAtShutd\n     } else {\n       ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n       connector.setPort(port);\n-\n-      QueuedThreadPool qtp = new QueuedThreadPool();\n-      qtp.setMaxThreads(10000);\n-      qtp.setIdleTimeout((int) TimeUnit.SECONDS.toMillis(5));\n-      qtp.setStopTimeout((int) TimeUnit.SECONDS.toMillis(1));\n-\n-      server = new Server(qtp);\n-      server.setStopAtShutdown(stopAtShutdown);\n-      server.manage(qtp);\n+      server.setConnectors(new Connector[] {connector});\n     }\n \n     // Initialize the servlets",
                "raw_url": "https://github.com/apache/lucene-solr/raw/93ba7da65f5836d18ed933907c897d958aaa2b63/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java",
                "sha": "5e6b34e4470560b7148d1c3a6fbc6a9ec218f557",
                "status": "modified"
            }
        ],
        "message": "SOLR-4839: Avoid NPE when jetty.testMode=false\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1657495 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/118a8263781b35015cc56222c5d74f81ff412284",
        "repo": "lucene-solr",
        "unit_tests": [
            "JettySolrRunnerTest.java",
            "TestJettySolrRunner.java"
        ]
    },
    "lucene-solr_9a24dc5": {
        "bug_id": "lucene-solr_9a24dc5",
        "commit": "https://github.com/apache/lucene-solr/commit/9a24dc5d2ca890a50dc9751cb3abfd93c9939fee",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/lucene-solr/blob/9a24dc5d2ca890a50dc9751cb3abfd93c9939fee/solr/CHANGES.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/CHANGES.txt?ref=9a24dc5d2ca890a50dc9751cb3abfd93c9939fee",
                "deletions": 0,
                "filename": "solr/CHANGES.txt",
                "patch": "@@ -163,6 +163,8 @@ Bug Fixes\n \n * SOLR-9334: CloudSolrClient.collectionStateCache is unbounded (noble)\n \n+* SOLR-9339: NPE in CloudSolrClient when the response is null (noble)\n+\n \n Optimizations\n ----------------------",
                "raw_url": "https://github.com/apache/lucene-solr/raw/9a24dc5d2ca890a50dc9751cb3abfd93c9939fee/solr/CHANGES.txt",
                "sha": "4da2d0eef9467fed23fdba299b5416cc51b0db2e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/lucene-solr/blob/9a24dc5d2ca890a50dc9751cb3abfd93c9939fee/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.java?ref=9a24dc5d2ca890a50dc9751cb3abfd93c9939fee",
                "deletions": 1,
                "filename": "solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.java",
                "patch": "@@ -1060,7 +1060,7 @@ public RouteException(ErrorCode errorCode, NamedList<Throwable> throwables, Map<\n     try {\n       resp = sendRequest(request, collection);\n       //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n-      Object o = resp.get(STATE_VERSION, resp.size()-1);\n+      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n       if(o != null && o instanceof Map) {\n         //remove this because no one else needs this and tests would fail if they are comparing responses\n         resp.remove(resp.size()-1);",
                "raw_url": "https://github.com/apache/lucene-solr/raw/9a24dc5d2ca890a50dc9751cb3abfd93c9939fee/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.java",
                "sha": "1f1c675c8273a8e8ce5ba0c301dedf070a504841",
                "status": "modified"
            }
        ],
        "message": "SOLR-9339: NPE in CloudSolrClient when the response is null",
        "parent": "https://github.com/apache/lucene-solr/commit/4ed68bc80e7990f4acd1b73dce3b5b8cd16d9fe5",
        "repo": "lucene-solr",
        "unit_tests": [
            "CloudSolrClientTest.java"
        ]
    },
    "lucene-solr_9c1d10c": {
        "bug_id": "lucene-solr_9c1d10c",
        "commit": "https://github.com/apache/lucene-solr/commit/9c1d10c4e982b79b1672d2513ccd0570f40fb162",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/lucene-solr/blob/9c1d10c4e982b79b1672d2513ccd0570f40fb162/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java?ref=9c1d10c4e982b79b1672d2513ccd0570f40fb162",
                "deletions": 4,
                "filename": "solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java",
                "patch": "@@ -403,12 +403,20 @@ public void preClose(SolrCore core) {}\n         @Override\n         public void postClose(SolrCore core) {\n           File dataDir = new File(core.getIndexDir());\n-          for (File file : dataDir.listFiles()) {\n-            if (!file.delete()) {\n-              log.error(file.getAbsolutePath() + \" could not be deleted on core unload\");\n+          File[] files = dataDir.listFiles();\n+          if (files != null) {\n+            for (File file : files) {\n+              if (!file.delete()) {\n+                log.error(file.getAbsolutePath()\n+                    + \" could not be deleted on core unload\");\n+              }\n             }\n+            if (!dataDir.delete()) log.error(dataDir.getAbsolutePath()\n+                + \" could not be deleted on core unload\");\n+          } else {\n+            log.error(dataDir.getAbsolutePath()\n+                + \" could not be deleted on core unload\");\n           }\n-          if (!dataDir.delete()) log.error(dataDir.getAbsolutePath() + \" could not be deleted on core unload\");\n         }\n       });\n     }",
                "raw_url": "https://github.com/apache/lucene-solr/raw/9c1d10c4e982b79b1672d2513ccd0570f40fb162/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java",
                "sha": "4d325b727447651e7d33f4002c9528e6e5ba846e",
                "status": "modified"
            }
        ],
        "message": "defense against NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1156201 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/8c83a10317b37315ce698ce1bde4c2eb147ef27d",
        "repo": "lucene-solr",
        "unit_tests": [
            "CoreAdminHandlerTest.java"
        ]
    },
    "lucene-solr_9f644b1": {
        "bug_id": "lucene-solr_9f644b1",
        "commit": "https://github.com/apache/lucene-solr/commit/9f644b1c6911a68b7ed29d5992bc0bec66dec0ed",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/lucene-solr/blob/9f644b1c6911a68b7ed29d5992bc0bec66dec0ed/solr/CHANGES.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/CHANGES.txt?ref=9f644b1c6911a68b7ed29d5992bc0bec66dec0ed",
                "deletions": 0,
                "filename": "solr/CHANGES.txt",
                "patch": "@@ -217,6 +217,8 @@ Bug Fixes\n \n * SOLR-13408: Cannot start/stop DaemonStream repeatedly, other API improvements (Erick Erickson)\n \n+* SOLR-13281: Fixed NPE in DocExpirationUpdateProcessorFactory (Munendra S N, Tom\u00e1s Fern\u00e1ndez L\u00f6bbe)\n+\n Improvements\n ----------------------\n ",
                "raw_url": "https://github.com/apache/lucene-solr/raw/9f644b1c6911a68b7ed29d5992bc0bec66dec0ed/solr/CHANGES.txt",
                "sha": "d08112c9d0e58b0ebeee7a93b53d45b080c15d1a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/lucene-solr/blob/9f644b1c6911a68b7ed29d5992bc0bec66dec0ed/solr/core/src/java/org/apache/solr/update/processor/DocExpirationUpdateProcessorFactory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/update/processor/DocExpirationUpdateProcessorFactory.java?ref=9f644b1c6911a68b7ed29d5992bc0bec66dec0ed",
                "deletions": 0,
                "filename": "solr/core/src/java/org/apache/solr/update/processor/DocExpirationUpdateProcessorFactory.java",
                "patch": "@@ -38,6 +38,7 @@\n import org.apache.solr.common.cloud.Slice;\n import org.apache.solr.common.util.ExecutorUtil;\n import org.apache.solr.common.util.NamedList;\n+import org.apache.solr.common.util.SimpleOrderedMap;\n import org.apache.solr.core.CloseHook;\n import org.apache.solr.core.SolrCore;\n import org.apache.solr.request.LocalSolrQueryRequest;\n@@ -384,6 +385,7 @@ public void run() {\n         (factory.core, Collections.<String,String[]>emptyMap());\n       try {\n         final SolrQueryResponse rsp = new SolrQueryResponse();\n+        rsp.addResponseHeader(new SimpleOrderedMap<>(1));\n         SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n         try {\n           ",
                "raw_url": "https://github.com/apache/lucene-solr/raw/9f644b1c6911a68b7ed29d5992bc0bec66dec0ed/solr/core/src/java/org/apache/solr/update/processor/DocExpirationUpdateProcessorFactory.java",
                "sha": "38f6c47be5853f2249be94552c4063b2d04d430c",
                "status": "modified"
            }
        ],
        "message": "SOLR-13281: Fix NPE in DocExpirationUpdateProcessor",
        "parent": "https://github.com/apache/lucene-solr/commit/2a3bd8e8648e85963a668d46a239cc48db777f5b",
        "repo": "lucene-solr",
        "unit_tests": [
            "DocExpirationUpdateProcessorFactoryTest.java"
        ]
    },
    "lucene-solr_a0396da": {
        "bug_id": "lucene-solr_a0396da",
        "commit": "https://github.com/apache/lucene-solr/commit/a0396da64b5874886a801f22b7cb81e11ed9642a",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/lucene-solr/blob/a0396da64b5874886a801f22b7cb81e11ed9642a/solr/core/src/java/org/apache/solr/search/CaffeineCache.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/search/CaffeineCache.java?ref=a0396da64b5874886a801f22b7cb81e11ed9642a",
                "deletions": 20,
                "filename": "solr/core/src/java/org/apache/solr/search/CaffeineCache.java",
                "patch": "@@ -76,7 +76,7 @@\n   private CacheStats priorStats;\n   private long priorInserts;\n \n-  private String description;\n+  private String description = \"Caffeine Cache\";\n   private LongAdder inserts;\n   private Cache<K,V> cache;\n   private long warmupTime;\n@@ -340,25 +340,27 @@ public String toString() {\n   public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n     registry = manager.registry(registryName);\n     cacheMap = new MetricsMap((detailed, map) -> {\n-      CacheStats stats = cache.stats();\n-      long insertCount = inserts.sum();\n-\n-      map.put(LOOKUPS_PARAM, stats.requestCount());\n-      map.put(HITS_PARAM, stats.hitCount());\n-      map.put(HIT_RATIO_PARAM, stats.hitRate());\n-      map.put(INSERTS_PARAM, insertCount);\n-      map.put(EVICTIONS_PARAM, stats.evictionCount());\n-      map.put(SIZE_PARAM, cache.asMap().size());\n-      map.put(\"warmupTime\", warmupTime);\n-      map.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n-      map.put(MAX_RAM_MB_PARAM, getMaxRamMB());\n-\n-      CacheStats cumulativeStats = priorStats.plus(stats);\n-      map.put(\"cumulative_lookups\", cumulativeStats.requestCount());\n-      map.put(\"cumulative_hits\", cumulativeStats.hitCount());\n-      map.put(\"cumulative_hitratio\", cumulativeStats.hitRate());\n-      map.put(\"cumulative_inserts\", priorInserts + insertCount);\n-      map.put(\"cumulative_evictions\", cumulativeStats.evictionCount());\n+      if (cache != null) {\n+        CacheStats stats = cache.stats();\n+        long insertCount = inserts.sum();\n+\n+        map.put(LOOKUPS_PARAM, stats.requestCount());\n+        map.put(HITS_PARAM, stats.hitCount());\n+        map.put(HIT_RATIO_PARAM, stats.hitRate());\n+        map.put(INSERTS_PARAM, insertCount);\n+        map.put(EVICTIONS_PARAM, stats.evictionCount());\n+        map.put(SIZE_PARAM, cache.asMap().size());\n+        map.put(\"warmupTime\", warmupTime);\n+        map.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n+        map.put(MAX_RAM_MB_PARAM, getMaxRamMB());\n+\n+        CacheStats cumulativeStats = priorStats.plus(stats);\n+        map.put(\"cumulative_lookups\", cumulativeStats.requestCount());\n+        map.put(\"cumulative_hits\", cumulativeStats.hitCount());\n+        map.put(\"cumulative_hitratio\", cumulativeStats.hitRate());\n+        map.put(\"cumulative_inserts\", priorInserts + insertCount);\n+        map.put(\"cumulative_evictions\", cumulativeStats.evictionCount());\n+      }\n     });\n     manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n   }",
                "raw_url": "https://github.com/apache/lucene-solr/raw/a0396da64b5874886a801f22b7cb81e11ed9642a/solr/core/src/java/org/apache/solr/search/CaffeineCache.java",
                "sha": "71eb86f34ddacac44755c45ffc8af4f5a9a0a401",
                "status": "modified"
            }
        ],
        "message": "SOLR-8241: Fix an NPE.",
        "parent": "https://github.com/apache/lucene-solr/commit/8007ac0cb0c88838ba6e58e56e2bc23374c15dc4",
        "repo": "lucene-solr",
        "unit_tests": [
            "TestCaffeineCache.java"
        ]
    },
    "lucene-solr_a162755": {
        "bug_id": "lucene-solr_a162755",
        "commit": "https://github.com/apache/lucene-solr/commit/a162755e24561250210560521aee58dd896c859e",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/lucene-solr/blob/a162755e24561250210560521aee58dd896c859e/src/solrj/org/apache/solr/client/solrj/response/QueryResponse.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/src/solrj/org/apache/solr/client/solrj/response/QueryResponse.java?ref=a162755e24561250210560521aee58dd896c859e",
                "deletions": 2,
                "filename": "src/solrj/org/apache/solr/client/solrj/response/QueryResponse.java",
                "patch": "@@ -131,8 +131,11 @@ private void extractStatsInfo(NamedList<Object> info) {\n       NamedList<NamedList<Object>> ff = (NamedList<NamedList<Object>>) info.get( \"stats_fields\" );\n       if( ff != null ) {\n         for( Map.Entry<String,NamedList<Object>> entry : ff ) {\n-          _fieldStatsInfo.put( entry.getKey(), \n-              new FieldStatsInfo( entry.getValue(), entry.getKey() ) );\n+          NamedList<Object> v = entry.getValue();\n+          if( v != null ) {\n+            _fieldStatsInfo.put( entry.getKey(), \n+                new FieldStatsInfo( v, entry.getKey() ) );\n+          }\n         }\n       }\n     }",
                "raw_url": "https://github.com/apache/lucene-solr/raw/a162755e24561250210560521aee58dd896c859e/src/solrj/org/apache/solr/client/solrj/response/QueryResponse.java",
                "sha": "61571693f1794cca760a86f81a2ef10e63c4f9e0",
                "status": "modified"
            }
        ],
        "message": "fix potential NPE with FieldStatsInfo\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/solr/trunk@763791 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/c9ed885d3b6a4246fac3ed40021da9d209bb79ea",
        "repo": "lucene-solr",
        "unit_tests": [
            "QueryResponseTest.java"
        ]
    },
    "lucene-solr_a417a2c": {
        "bug_id": "lucene-solr_a417a2c",
        "commit": "https://github.com/apache/lucene-solr/commit/a417a2cd6a612e7ed1a99b14230c3f08e455f9c1",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/lucene-solr/blob/a417a2cd6a612e7ed1a99b14230c3f08e455f9c1/solr/CHANGES.txt",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/CHANGES.txt?ref=a417a2cd6a612e7ed1a99b14230c3f08e455f9c1",
                "deletions": 1,
                "filename": "solr/CHANGES.txt",
                "patch": "@@ -161,7 +161,9 @@ Bug Fixes\n   (Amrit Sarkar, Varun Thacker)\n \n * SOLR-11840: Fix bin/solr help-text inconsistencies (Jason Gerlowski)\n- \n+\n+* SOLR-10169: PeerSync will hit an NPE on no response errors when looking for fingerprint. (Erick Erickson)\n+\n Optimizations\n ----------------------\n ",
                "raw_url": "https://github.com/apache/lucene-solr/raw/a417a2cd6a612e7ed1a99b14230c3f08e455f9c1/solr/CHANGES.txt",
                "sha": "e01036684fa39dc6e5eca419f8bf55950c37bc7f",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/lucene-solr/blob/a417a2cd6a612e7ed1a99b14230c3f08e455f9c1/solr/core/src/java/org/apache/solr/update/PeerSync.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/update/PeerSync.java?ref=a417a2cd6a612e7ed1a99b14230c3f08e455f9c1",
                "deletions": 3,
                "filename": "solr/core/src/java/org/apache/solr/update/PeerSync.java",
                "patch": "@@ -388,9 +388,13 @@ private boolean alreadyInSync() {\n       ShardResponse srsp = shardHandler.takeCompletedOrError();\n       if (srsp == null) break;\n \n-      Object replicaFingerprint = srsp.getSolrResponse().getResponse().get(\"fingerprint\");\n+      Object replicaFingerprint = null;\n+      if (srsp.getSolrResponse() != null && srsp.getSolrResponse().getResponse() != null) {\n+        replicaFingerprint = srsp.getSolrResponse().getResponse().get(\"fingerprint\");\n+      }\n+\n       if (replicaFingerprint == null) {\n-        log.warn(\"Replica did not return a fingerprint - possibly an older Solr version\");\n+        log.warn(\"Replica did not return a fingerprint - possibly an older Solr version or exception\");\n         continue;\n       }\n       \n@@ -402,7 +406,7 @@ private boolean alreadyInSync() {\n           return true;\n         }\n       } catch(IOException e) {\n-        log.warn(\"Could not cofirm if we are already in sync. Continue with PeerSync\");\n+        log.warn(\"Could not confirm if we are already in sync. Continue with PeerSync\");\n       }\n     }\n     ",
                "raw_url": "https://github.com/apache/lucene-solr/raw/a417a2cd6a612e7ed1a99b14230c3f08e455f9c1/solr/core/src/java/org/apache/solr/update/PeerSync.java",
                "sha": "3511a6cb4738558a559c27b6ad42a92c3fe6d9d1",
                "status": "modified"
            }
        ],
        "message": "SOLR-10169: PeerSync will hit an NPE on no response errors when looking for fingerprint.",
        "parent": "https://github.com/apache/lucene-solr/commit/7edfd9c41018f16e7b6af1b58e9983e427eff9de",
        "repo": "lucene-solr",
        "unit_tests": [
            "PeerSyncTest.java"
        ]
    },
    "lucene-solr_b3241a2": {
        "bug_id": "lucene-solr_b3241a2",
        "commit": "https://github.com/apache/lucene-solr/commit/b3241a23b34ebfa633766e6a6a31e831ba653fd2",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/lucene-solr/blob/b3241a23b34ebfa633766e6a6a31e831ba653fd2/solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils.java?ref=b3241a23b34ebfa633766e6a6a31e831ba653fd2",
                "deletions": 10,
                "filename": "solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils.java",
                "patch": "@@ -23,13 +23,7 @@\n import java.net.URLEncoder;\n import java.text.DateFormat;\n import java.text.ParseException;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Date;\n-import java.util.Iterator;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.TimeZone;\n+import java.util.*;\n import java.util.Map.Entry;\n import java.nio.ByteBuffer;\n \n@@ -231,9 +225,13 @@ public static String toQueryString( SolrParams params, boolean xml ) {\n   }\n   \n   public static void appendMap(String collection, Map<String,Slice> map1, Map<String,Slice> map2) {\n-    Set<Entry<String,Slice>> entrySet = map2.entrySet();\n-    for (Entry<String,Slice> entry : entrySet) {\n-      map1.put(collection + \"_\" + entry.getKey(), entry.getValue());\n+    if (map1==null)\n+      map1 = new HashMap<String,Slice>();\n+    if (map2!=null) {\n+      Set<Entry<String,Slice>> entrySet = map2.entrySet();\n+      for (Entry<String,Slice> entry : entrySet) {\n+        map1.put(collection + \"_\" + entry.getKey(), entry.getValue());\n+      }\n     }\n   }\n }",
                "raw_url": "https://github.com/apache/lucene-solr/raw/b3241a23b34ebfa633766e6a6a31e831ba653fd2/solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils.java",
                "sha": "6353e8332a2e43fed43253c70c253cc413186522",
                "status": "modified"
            }
        ],
        "message": "[SOLR-3396] - avoid NPEs on appendMap method\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1329640 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/b91898b5df905754324d7e274c41775b70c439ee",
        "repo": "lucene-solr",
        "unit_tests": [
            "ClientUtilsTest.java"
        ]
    },
    "lucene-solr_b7f99fe": {
        "bug_id": "lucene-solr_b7f99fe",
        "commit": "https://github.com/apache/lucene-solr/commit/b7f99fe55a6fb6e7b38828676750b3512d6899a1",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/lucene-solr/blob/b7f99fe55a6fb6e7b38828676750b3512d6899a1/solr/CHANGES.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/CHANGES.txt?ref=b7f99fe55a6fb6e7b38828676750b3512d6899a1",
                "deletions": 0,
                "filename": "solr/CHANGES.txt",
                "patch": "@@ -247,6 +247,8 @@ Bug Fixes\n * SOLR-13053: NodeAddedTrigger and NodeLostTrigger do not reserve added/removed time populated by restoreState\n   (Cao Manh Dat)\n \n+* SOLR-13137: NPE when /admin/zookeeper/status endpoint hit in standalone mode (janhoy)\n+\n Improvements\n ----------------------\n ",
                "raw_url": "https://github.com/apache/lucene-solr/raw/b7f99fe55a6fb6e7b38828676750b3512d6899a1/solr/CHANGES.txt",
                "sha": "8aa752776294974ef25cc9779fc4bbf9dd038405",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/lucene-solr/blob/b7f99fe55a6fb6e7b38828676750b3512d6899a1/solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler.java?ref=b7f99fe55a6fb6e7b38828676750b3512d6899a1",
                "deletions": 4,
                "filename": "solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler.java",
                "patch": "@@ -32,7 +32,6 @@\n import java.util.stream.Collectors;\n \n import org.apache.solr.common.SolrException;\n-import org.apache.solr.common.params.SolrParams;\n import org.apache.solr.common.util.NamedList;\n import org.apache.solr.core.CoreContainer;\n import org.apache.solr.handler.RequestHandlerBase;\n@@ -73,10 +72,12 @@ public Category getCategory() {\n \n   @Override\n   public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n-    final SolrParams params = req.getParams();\n-    Map<String, String> map = new HashMap<>(1);\n     NamedList values = rsp.getValues();\n-    values.add(\"zkStatus\", getZkStatus(cores.getZkController().getZkServerAddress()));\n+    if (cores.isZooKeeperAware()) {\n+      values.add(\"zkStatus\", getZkStatus(cores.getZkController().getZkServerAddress()));\n+    } else {\n+      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The Zookeeper status API is only available in Cloud mode\");\n+    }\n   }\n \n   /*",
                "raw_url": "https://github.com/apache/lucene-solr/raw/b7f99fe55a6fb6e7b38828676750b3512d6899a1/solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler.java",
                "sha": "1f3a50401aab71accb6af49f572a0d56249c9ae7",
                "status": "modified"
            }
        ],
        "message": "SOLR-13137: NPE when /admin/zookeeper/status endpoint hit in standalone mode",
        "parent": "https://github.com/apache/lucene-solr/commit/d4e016afdf41baf0104f79e82d953a4650df42aa",
        "repo": "lucene-solr",
        "unit_tests": [
            "ZookeeperStatusHandlerTest.java"
        ]
    },
    "lucene-solr_bc6a8d9": {
        "bug_id": "lucene-solr_bc6a8d9",
        "commit": "https://github.com/apache/lucene-solr/commit/bc6a8d9fff38c1fa303626d8169ea0229be8ce18",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/lucene-solr/blob/bc6a8d9fff38c1fa303626d8169ea0229be8ce18/solr/CHANGES.txt",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/CHANGES.txt?ref=bc6a8d9fff38c1fa303626d8169ea0229be8ce18",
                "deletions": 0,
                "filename": "solr/CHANGES.txt",
                "patch": "@@ -139,6 +139,9 @@ Bug Fixes\n \n * SOLR-7920: Resolve XSS issue in Admin UI Schema Browser (David Chiu via Upayavira)\n \n+* SOLR-7935: Fix very rare race condition that can cause an update to fail\n+  via NullPointerException during a core reload. (yonik)\n+\n Optimizations\n ----------------------\n ",
                "raw_url": "https://github.com/apache/lucene-solr/raw/bc6a8d9fff38c1fa303626d8169ea0229be8ce18/solr/CHANGES.txt",
                "sha": "581365ede3bb1b32b47c3c6acfa4294c92fae9b3",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/lucene-solr/blob/bc6a8d9fff38c1fa303626d8169ea0229be8ce18/solr/core/src/java/org/apache/solr/core/SolrCore.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/core/SolrCore.java?ref=bc6a8d9fff38c1fa303626d8169ea0229be8ce18",
                "deletions": 3,
                "filename": "solr/core/src/java/org/apache/solr/core/SolrCore.java",
                "patch": "@@ -1584,8 +1584,8 @@ public UpdateHandler getUpdateHandler() {\n \n         // SolrCore.verbose(\"start reopen from\",previousSearcher,\"writer=\",writer);\n \n-        RefCounted<IndexWriter> writer = getUpdateHandler().getSolrCoreState()\n-            .getIndexWriter(null);\n+        RefCounted<IndexWriter> writer = getSolrCoreState().getIndexWriter(null);\n+\n         try {\n           if (writer != null) {\n             // if in NRT mode, open from the writer\n@@ -1639,7 +1639,7 @@ public UpdateHandler getUpdateHandler() {\n           tmp = new SolrIndexSearcher(this, newIndexDir, getLatestSchema(),\n               (realtime ? \"realtime\":\"main\"), newReader, true, !realtime, true, directoryFactory);\n         } else  {\n-          RefCounted<IndexWriter> writer = getUpdateHandler().getSolrCoreState().getIndexWriter(this);\n+          RefCounted<IndexWriter> writer = getSolrCoreState().getIndexWriter(this);\n           DirectoryReader newReader = null;\n           try {\n             newReader = indexReaderFactory.newReader(writer.get(), this);",
                "raw_url": "https://github.com/apache/lucene-solr/raw/bc6a8d9fff38c1fa303626d8169ea0229be8ce18/solr/core/src/java/org/apache/solr/core/SolrCore.java",
                "sha": "80707cb21ad5246e2dbc71c5502c09bf827064f3",
                "status": "modified"
            }
        ],
        "message": "SOLR-7935:fix race that can cause a NPE in openNewSearcher called from an update concurrent with a core reload\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1696417 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/3109c453bb01ee33b965538a6cfb2428212efa62",
        "repo": "lucene-solr",
        "unit_tests": [
            "SolrCoreTest.java"
        ]
    },
    "lucene-solr_c2c2e8a": {
        "bug_id": "lucene-solr_c2c2e8a",
        "commit": "https://github.com/apache/lucene-solr/commit/c2c2e8a85e92024d627381858cd1dbcff4cbab72",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/lucene-solr/blob/c2c2e8a85e92024d627381858cd1dbcff4cbab72/lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier.java?ref=c2c2e8a85e92024d627381858cd1dbcff4cbab72",
                "deletions": 14,
                "filename": "lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier.java",
                "patch": "@@ -113,24 +113,26 @@ public SimpleNaiveBayesDocumentClassifier(IndexReader indexReader, Query query,\n     Map<String, List<String[]>> fieldName2tokensArray = new LinkedHashMap<>();\n     Map<String, Float> fieldName2boost = new LinkedHashMap<>();\n     Terms classes = MultiFields.getTerms(indexReader, classFieldName);\n-    TermsEnum classesEnum = classes.iterator();\n-    BytesRef c;\n+    if (classes != null) {\n+      TermsEnum classesEnum = classes.iterator();\n+      BytesRef c;\n \n-    analyzeSeedDocument(inputDocument, fieldName2tokensArray, fieldName2boost);\n+      analyzeSeedDocument(inputDocument, fieldName2tokensArray, fieldName2boost);\n \n-    int docsWithClassSize = countDocsWithClass();\n-    while ((c = classesEnum.next()) != null) {\n-      double classScore = 0;\n-      Term term = new Term(this.classFieldName, c);\n-      for (String fieldName : textFieldNames) {\n-        List<String[]> tokensArrays = fieldName2tokensArray.get(fieldName);\n-        double fieldScore = 0;\n-        for (String[] fieldTokensArray : tokensArrays) {\n-          fieldScore += calculateLogPrior(term, docsWithClassSize) + calculateLogLikelihood(fieldTokensArray, fieldName, term, docsWithClassSize) * fieldName2boost.get(fieldName);\n+      int docsWithClassSize = countDocsWithClass();\n+      while ((c = classesEnum.next()) != null) {\n+        double classScore = 0;\n+        Term term = new Term(this.classFieldName, c);\n+        for (String fieldName : textFieldNames) {\n+          List<String[]> tokensArrays = fieldName2tokensArray.get(fieldName);\n+          double fieldScore = 0;\n+          for (String[] fieldTokensArray : tokensArrays) {\n+            fieldScore += calculateLogPrior(term, docsWithClassSize) + calculateLogLikelihood(fieldTokensArray, fieldName, term, docsWithClassSize) * fieldName2boost.get(fieldName);\n+          }\n+          classScore += fieldScore;\n         }\n-        classScore += fieldScore;\n+        assignedClasses.add(new ClassificationResult<>(term.bytes(), classScore));\n       }\n-      assignedClasses.add(new ClassificationResult<>(term.bytes(), classScore));\n     }\n     return normClassificationResults(assignedClasses);\n   }",
                "raw_url": "https://github.com/apache/lucene-solr/raw/c2c2e8a85e92024d627381858cd1dbcff4cbab72/lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier.java",
                "sha": "6bc8573c094dcd6cbca004500f5e5b8eeb624533",
                "status": "modified"
            }
        ],
        "message": "LUCENE-7950 - fixed potential NPE when no docs have the class field",
        "parent": "https://github.com/apache/lucene-solr/commit/cd471cc98dcee4f587739b2288e4e120f8c54808",
        "repo": "lucene-solr",
        "unit_tests": [
            "SimpleNaiveBayesDocumentClassifierTest.java"
        ]
    },
    "lucene-solr_cabc125": {
        "bug_id": "lucene-solr_cabc125",
        "commit": "https://github.com/apache/lucene-solr/commit/cabc125eefce10a8b021f1698371eabc6289ed60",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/lucene-solr/blob/cabc125eefce10a8b021f1698371eabc6289ed60/solr/CHANGES.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/CHANGES.txt?ref=cabc125eefce10a8b021f1698371eabc6289ed60",
                "deletions": 0,
                "filename": "solr/CHANGES.txt",
                "patch": "@@ -115,6 +115,8 @@ Bug Fixes\n \n * SOLR-13827: Fail on unknown operation in Request Parameters API (Munendra S N, noble)\n \n+* SOLR-13403: Fix NPE in TermsComponent for DatePointField (yonik, Munendra S N)\n+\n Other Changes\n ---------------------\n ",
                "raw_url": "https://github.com/apache/lucene-solr/raw/cabc125eefce10a8b021f1698371eabc6289ed60/solr/CHANGES.txt",
                "sha": "b21ef2cad6b53dab5b467e7c028d2a95b54f35bf",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/lucene-solr/blob/cabc125eefce10a8b021f1698371eabc6289ed60/solr/core/src/java/org/apache/solr/handler/component/TermsComponent.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/handler/component/TermsComponent.java?ref=cabc125eefce10a8b021f1698371eabc6289ed60",
                "deletions": 4,
                "filename": "solr/core/src/java/org/apache/solr/handler/component/TermsComponent.java",
                "patch": "@@ -50,6 +50,7 @@\n import org.apache.solr.common.util.NamedList;\n import org.apache.solr.common.util.SimpleOrderedMap;\n import org.apache.solr.common.util.StrUtils;\n+import org.apache.solr.common.util.Utils;\n import org.apache.solr.handler.component.HttpShardHandlerFactory.WhitelistHostChecker;\n import org.apache.solr.request.SimpleFacets.CountPair;\n import org.apache.solr.schema.FieldType;\n@@ -201,7 +202,7 @@ public void process(ResponseBuilder rb) throws IOException {\n         SchemaField sf = rb.req.getSchema().getFieldOrNull(field);\n         if (sf != null && sf.getType().isPointField()) {\n           // FIXME: terms.ttf=true is not supported for pointFields\n-          if (lowerStr!=null || upperStr!=null || prefix!=null || regexp!=null) {\n+          if (lowerStr != null || upperStr != null || prefix != null || regexp != null) {\n             throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                 String.format(Locale.ROOT, \"The terms component does not support Points-based fields with sorting or with parameters %s,%s,%s,%s \", TermsParams.TERMS_LOWER, TermsParams.TERMS_UPPER, TermsParams.TERMS_PREFIX_STR, TermsParams.TERMS_REGEXP_STR));\n           }\n@@ -221,7 +222,7 @@ public void process(ResponseBuilder rb) throws IOException {\n             }\n \n             for (CountPair<MutableValue, Integer> item : queue) {\n-              fieldTerms.add(item.key.toString(), item.val);\n+              fieldTerms.add(Utils.OBJECT_TO_STRING.apply(item.key.toObject()), item.val);\n             }\n             continue;\n           } else {\n@@ -237,7 +238,7 @@ public void process(ResponseBuilder rb) throws IOException {\n                 if (count < 0) break;\n                 if (count < freqmin || count > freqmax) continue;\n                 if (++num > limit) break;\n-                ew.put(mv.toString(), (int)count); // match the numeric type of terms\n+                ew.put(Utils.OBJECT_TO_STRING.apply(mv.toObject()), (int)count); // match the numeric type of terms\n               }\n             });\n              ***/\n@@ -250,7 +251,7 @@ public void process(ResponseBuilder rb) throws IOException {\n               if (count < 0) break;\n               if (count < freqmin || count > freqmax) continue;\n               if (++num > limit) break;\n-              fieldTerms.add(mv.toString(), (int)count); // match the numeric type of terms\n+              fieldTerms.add(Utils.OBJECT_TO_STRING.apply(mv.toObject()), (int)count); // match the numeric type of terms\n             }\n             continue;\n           }",
                "raw_url": "https://github.com/apache/lucene-solr/raw/cabc125eefce10a8b021f1698371eabc6289ed60/solr/core/src/java/org/apache/solr/handler/component/TermsComponent.java",
                "sha": "022a844a0cf35badcab6eb21b3ee741e67812399",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/lucene-solr/blob/cabc125eefce10a8b021f1698371eabc6289ed60/solr/core/src/java/org/apache/solr/search/PointMerger.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/search/PointMerger.java?ref=cabc125eefce10a8b021f1698371eabc6289ed60",
                "deletions": 0,
                "filename": "solr/core/src/java/org/apache/solr/search/PointMerger.java",
                "patch": "@@ -80,6 +80,7 @@ public ValueIterator(SchemaField field, List<LeafReaderContext> readers, int tot\n             seg = new DoubleSeg(pv, capacity);\n             break;\n           case DATE:\n+            seg = new DateSeg(pv, capacity);\n             break;\n         }\n         int count = seg.setNextValue();",
                "raw_url": "https://github.com/apache/lucene-solr/raw/cabc125eefce10a8b021f1698371eabc6289ed60/solr/core/src/java/org/apache/solr/search/PointMerger.java",
                "sha": "a2d9ade015111b7c957f8a429cefc9bd1fcf1b3b",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/lucene-solr/blob/cabc125eefce10a8b021f1698371eabc6289ed60/solr/core/src/test-files/solr/collection1/conf/schema.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/test-files/solr/collection1/conf/schema.xml?ref=cabc125eefce10a8b021f1698371eabc6289ed60",
                "deletions": 0,
                "filename": "solr/core/src/test-files/solr/collection1/conf/schema.xml",
                "patch": "@@ -841,6 +841,11 @@\n    <dynamicField name=\"*_ds_ni_p\"   type=\"pdouble\"    indexed=\"false\"  stored=\"true\" docValues=\"true\" multiValued=\"true\"/>\n    <dynamicField name=\"*_sortable\"  type=\"sortable_text\" indexed=\"true\" multiValued=\"false\" stored=\"true\" />\n \n+  <dynamicField name=\"*_date_p\"      type=\"pdate\"    indexed=\"true\"  stored=\"true\" docValues=\"true\" multiValued=\"false\"/>\n+  <dynamicField name=\"*_dates_p\"     type=\"pdate\"    indexed=\"true\"  stored=\"true\" docValues=\"true\" multiValued=\"true\"/>\n+  <dynamicField name=\"*_date_ni_p\"   type=\"pdate\"    indexed=\"false\"  stored=\"true\" docValues=\"true\" multiValued=\"false\"/>\n+  <dynamicField name=\"*_dates_ni_p\"  type=\"pdate\"    indexed=\"false\"  stored=\"true\" docValues=\"true\" multiValued=\"true\"/>\n+\n   <copyField source=\"single_i_dvn\" dest=\"copy_single_i_dvn\"/>\n   <copyField source=\"single_d_dvn\" dest=\"copy_single_d_dvn\"/>\n   <copyField source=\"single_s_dvn\" dest=\"copy_single_s_dvn\"/>",
                "raw_url": "https://github.com/apache/lucene-solr/raw/cabc125eefce10a8b021f1698371eabc6289ed60/solr/core/src/test-files/solr/collection1/conf/schema.xml",
                "sha": "d5cf09035f44bbd0929b68d11cd585b1b598c8e1",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/lucene-solr/blob/cabc125eefce10a8b021f1698371eabc6289ed60/solr/core/src/test/org/apache/solr/handler/component/DistributedTermsComponentTest.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/test/org/apache/solr/handler/component/DistributedTermsComponentTest.java?ref=cabc125eefce10a8b021f1698371eabc6289ed60",
                "deletions": 6,
                "filename": "solr/core/src/test/org/apache/solr/handler/component/DistributedTermsComponentTest.java",
                "patch": "@@ -51,13 +51,13 @@ public void test() throws Exception {\n     Random random = random();\n     del(\"*:*\");\n     index(id, random.nextInt(), \"b_t\", \"snake a,b spider shark snail slug seal\", \"foo_i\", \"1\");\n-    index(id, random.nextInt(), \"b_t\", \"snake spider shark snail slug\", \"foo_i\", \"2\");\n+    index(id, random.nextInt(), \"b_t\", \"snake spider shark snail slug\", \"foo_i\", \"2\", \"foo_date_p\", \"2015-01-03T14:30:00Z\");\n     index(id, random.nextInt(), \"b_t\", \"snake spider shark snail\", \"foo_i\", \"3\");\n-    index(id, random.nextInt(), \"b_t\", \"snake spider shark\", \"foo_i\", \"2\");\n-    index(id, random.nextInt(), \"b_t\", \"snake spider\", \"c_t\", \"snake spider\");\n-    index(id, random.nextInt(), \"b_t\", \"snake\", \"c_t\", \"snake\");\n-    index(id, random.nextInt(), \"b_t\", \"ant zebra\", \"c_t\", \"ant zebra\");\n-    index(id, random.nextInt(), \"b_t\", \"zebra\", \"c_t\", \"zebra\");\n+    index(id, random.nextInt(), \"b_t\", \"snake spider shark\", \"foo_i\", \"2\", \"foo_date_p\", \"2014-03-15T12:00:00Z\");\n+    index(id, random.nextInt(), \"b_t\", \"snake spider\", \"c_t\", \"snake spider\", \"foo_date_p\", \"2014-03-15T12:00:00Z\");\n+    index(id, random.nextInt(), \"b_t\", \"snake\", \"c_t\", \"snake\", \"foo_date_p\", \"2014-03-15T12:00:00Z\");\n+    index(id, random.nextInt(), \"b_t\", \"ant zebra\", \"c_t\", \"ant zebra\", \"foo_date_p\", \"2015-01-03T14:30:00Z\");\n+    index(id, random.nextInt(), \"b_t\", \"zebra\", \"c_t\", \"zebra\", \"foo_date_p\", \"2015-01-03T14:30:00Z\");\n     commit();\n \n     handle.clear();\n@@ -77,6 +77,11 @@ public void test() throws Exception {\n     query(\"qt\", \"/terms\", \"shards.qt\", \"/terms\", \"terms\", \"true\", \"terms.fl\", \"foo_i\", \"terms.stats\", \"true\",\"terms.list\", \"2,3,1\");\n     query(\"qt\", \"/terms\", \"shards.qt\", \"/terms\", \"terms\", \"true\", \"terms.fl\", \"b_t\", \"terms.list\", \"snake,zebra\", \"terms.ttf\", \"true\");\n     query(\"qt\", \"/terms\", \"shards.qt\", \"/terms\", \"terms\", \"true\", \"terms.fl\", \"b_t\", \"terms.fl\", \"c_t\", \"terms.list\", \"snake,ant,zebra\", \"terms.ttf\", \"true\");\n+\n+    // for date point field\n+    query(\"qt\", \"/terms\", \"shards.qt\", \"/terms\", \"terms\", \"true\", \"terms.fl\", \"foo_date_p\");\n+    // terms.ttf=true doesn't work for point fields\n+    //query(\"qt\", \"/terms\", \"shards.qt\", \"/terms\", \"terms\", \"true\", \"terms.fl\", \"foo_date_p\", \"terms.ttf\", \"true\");\n   }\n   \n   protected QueryResponse query(Object... q) throws Exception {",
                "raw_url": "https://github.com/apache/lucene-solr/raw/cabc125eefce10a8b021f1698371eabc6289ed60/solr/core/src/test/org/apache/solr/handler/component/DistributedTermsComponentTest.java",
                "sha": "8e7dc9b16f795e461ced1543b7daeb2d6d3b9b65",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/lucene-solr/blob/cabc125eefce10a8b021f1698371eabc6289ed60/solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest.java?ref=cabc125eefce10a8b021f1698371eabc6289ed60",
                "deletions": 0,
                "filename": "solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest.java",
                "patch": "@@ -612,4 +612,28 @@ public void testTermsSortIndexDistribution() {\n   private static String createShardQueryParamsString(ModifiableSolrParams params) {\n     return TermsComponent.createShardQuery(params).params.toString();\n   }\n+\n+  @Test\n+  public void testDatePointField() throws Exception {\n+    String[] dates = new String[]{\"2015-01-03T14:30:00Z\", \"2014-03-15T12:00:00Z\"};\n+    for (int i = 0; i < 100; i++) {\n+      assertU(adoc(\"id\", Integer.toString(100000+i), \"foo_pdt\", dates[i % 2]) );\n+      if (random().nextInt(10) == 0) assertU(commit());  // make multiple segments\n+    }\n+    assertU(commit());\n+    assertU(adoc(\"id\", Integer.toString(100102), \"foo_pdt\", dates[1]));\n+    assertU(commit());\n+\n+    try {\n+      assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\", \"terms\",\"true\",\n+          \"terms.fl\",\"foo_pdt\", \"terms.sort\",\"count\"),\n+          \"count(//lst[@name='foo_pdt']/*)=2\",\n+          \"//lst[@name='foo_pdt']/int[1][@name='\" + dates[1] + \"'][.='51']\",\n+          \"//lst[@name='foo_pdt']/int[2][@name='\" + dates[0] + \"'][.='50']\"\n+      );\n+    } finally {\n+      assertU(delQ(\"foo_pdt:[* TO *]\"));\n+      assertU(commit());\n+    }\n+  }\n }",
                "raw_url": "https://github.com/apache/lucene-solr/raw/cabc125eefce10a8b021f1698371eabc6289ed60/solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest.java",
                "sha": "3a39d38e9b060c7fb0e7b8191b2c2b93c00e3138",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/lucene-solr/blob/cabc125eefce10a8b021f1698371eabc6289ed60/solr/solrj/src/java/org/apache/solr/common/util/Utils.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/solrj/src/java/org/apache/solr/common/util/Utils.java?ref=cabc125eefce10a8b021f1698371eabc6289ed60",
                "deletions": 9,
                "filename": "solr/solrj/src/java/org/apache/solr/common/util/Utils.java",
                "patch": "@@ -23,7 +23,6 @@\n import java.io.OutputStreamWriter;\n import java.io.Reader;\n import java.io.StringReader;\n-import java.io.UnsupportedEncodingException;\n import java.io.Writer;\n import java.lang.invoke.MethodHandles;\n import java.net.URL;\n@@ -36,12 +35,14 @@\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.NoSuchElementException;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.TreeMap;\n import java.util.TreeSet;\n@@ -324,6 +325,13 @@ public Object newObject() {\n     }\n   };\n \n+  /**\n+   * Util function to convert {@link Object} to {@link String}\n+   * Specially handles {@link Date} to string conversion\n+   */\n+  public static final Function<Object, String> OBJECT_TO_STRING =\n+      obj -> ((obj instanceof Date) ? Objects.toString(((Date) obj).toInstant()) : Objects.toString(obj));\n+\n   public static Object fromJSON(InputStream is, Function<JSONParser, ObjectBuilder> objBuilderProvider) {\n     try {\n       return objBuilderProvider.apply(getJSONParser((new InputStreamReader(is, StandardCharsets.UTF_8)))).getVal();\n@@ -646,7 +654,6 @@ public static String parseMetricsReplicaName(String collectionName, String coreN\n    * @param input the json with new values\n    * @return whether there was any change made to sink or not.\n    */\n-\n   public static boolean mergeJson(Map<String, Object> sink, Map<String, Object> input) {\n     boolean isModified = false;\n     for (Map.Entry<String, Object> e : input.entrySet()) {\n@@ -686,12 +693,8 @@ public static String getBaseUrlForNodeName(final String nodeName, String urlSche\n       throw new IllegalArgumentException(\"nodeName does not contain expected '_' separator: \" + nodeName);\n     }\n     final String hostAndPort = nodeName.substring(0, _offset);\n-    try {\n-      final String path = URLDecoder.decode(nodeName.substring(1 + _offset), \"UTF-8\");\n-      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n-    } catch (UnsupportedEncodingException e) {\n-      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n-    }\n+    final String path = URLDecoder.decode(nodeName.substring(1 + _offset), UTF_8);\n+    return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n   }\n \n   public static long time(TimeSource timeSource, TimeUnit unit) {\n@@ -728,7 +731,7 @@ public static String getMDCNode() {\n   }\n \n   public static final InputStreamConsumer<?> JAVABINCONSUMER = is -> new JavaBinCodec().unmarshal(is);\n-  public static final InputStreamConsumer<?> JSONCONSUMER = is -> Utils.fromJSON(is);\n+  public static final InputStreamConsumer<?> JSONCONSUMER = Utils::fromJSON;\n \n   public static InputStreamConsumer<ByteBuffer> newBytesConsumer(int maxSize) {\n     return is -> {",
                "raw_url": "https://github.com/apache/lucene-solr/raw/cabc125eefce10a8b021f1698371eabc6289ed60/solr/solrj/src/java/org/apache/solr/common/util/Utils.java",
                "sha": "7d9f7834598ee81acd8bbdb69ee229c8615aac9a",
                "status": "modified"
            }
        ],
        "message": "SOLR-13403: fix NPE in terms for DatePointField\n\n* This fixes NPE and adds support for DatePointField in terms\n  component",
        "parent": "https://github.com/apache/lucene-solr/commit/227a624f8afe846a8e1157d1114a312c7f84df66",
        "repo": "lucene-solr",
        "unit_tests": [
            "TestUtils.java"
        ]
    },
    "lucene-solr_d0ed896": {
        "bug_id": "lucene-solr_d0ed896",
        "commit": "https://github.com/apache/lucene-solr/commit/d0ed896f4b8a03f56bbc575b51919ab677795318",
        "file": [
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/lucene-solr/blob/d0ed896f4b8a03f56bbc575b51919ab677795318/src/java/org/apache/solr/common/util/NamedListCodec.java",
                "changes": 49,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/src/java/org/apache/solr/common/util/NamedListCodec.java?ref=d0ed896f4b8a03f56bbc575b51919ab677795318",
                "deletions": 24,
                "filename": "src/java/org/apache/solr/common/util/NamedListCodec.java",
                "patch": "@@ -87,7 +87,7 @@ public NamedList unmarshal(InputStream is) throws IOException {\n   }\n \n \n-  private SimpleOrderedMap readOrderedMap(FastInputStream dis) throws IOException {\n+  public SimpleOrderedMap readOrderedMap(FastInputStream dis) throws IOException {\n     int sz = readSize(dis);\n     SimpleOrderedMap nl = new SimpleOrderedMap();\n     for (int i = 0; i < sz; i++) {\n@@ -98,7 +98,7 @@ private SimpleOrderedMap readOrderedMap(FastInputStream dis) throws IOException\n     return nl;\n   }\n \n-  private NamedList readNamedList(FastInputStream dis) throws IOException {\n+  public NamedList readNamedList(FastInputStream dis) throws IOException {\n     int sz = readSize(dis);\n     NamedList nl = new NamedList();\n     for (int i = 0; i < sz; i++) {\n@@ -109,7 +109,7 @@ private NamedList readNamedList(FastInputStream dis) throws IOException {\n     return nl;\n   }\n \n-  private void writeNamedList(NamedList nl) throws IOException {\n+  public void writeNamedList(NamedList nl) throws IOException {\n     writeTag(nl instanceof SimpleOrderedMap ? ORDERED_MAP : NAMED_LST, nl.size());\n     for (int i = 0; i < nl.size(); i++) {\n       String name = nl.getName(i);\n@@ -135,7 +135,7 @@ public void writeVal(Object val) throws IOException {\n   }\n \n   byte tagByte;\n-  private Object readVal(FastInputStream dis) throws IOException {\n+  public Object readVal(FastInputStream dis) throws IOException {\n     tagByte = dis.readByte();\n \n     // if ((tagByte & 0xe0) == 0) {\n@@ -171,7 +171,7 @@ private Object readVal(FastInputStream dis) throws IOException {\n     throw new RuntimeException(\"Unknown type \" + tagByte);\n   }\n \n-  private boolean writeKnownType(Object val) throws IOException {\n+  public boolean writeKnownType(Object val) throws IOException {\n     if (writePrimitive(val)) return true;\n     if (val instanceof NamedList) {\n       writeNamedList((NamedList) val);\n@@ -222,12 +222,12 @@ public void writeTag(byte tag, int size) throws IOException {\n     }\n   }\n \n-  private void writeByteArray(byte[] arr, int offset, int len) throws IOException {\n+  public void writeByteArray(byte[] arr, int offset, int len) throws IOException {\n     writeTag(BYTEARR, len);\n     daos.write(arr, offset, len);\n   }\n \n-  private byte[] readByteArray(FastInputStream dis) throws IOException {\n+  public byte[] readByteArray(FastInputStream dis) throws IOException {\n     byte[] arr = new byte[readVInt(dis)];\n     dis.readFully(arr);\n     return arr;\n@@ -244,7 +244,7 @@ public void writeSolrDocument(SolrDocument doc) throws IOException {\n     }\n   }\n \n-   private SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n+   public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n     NamedList nl = (NamedList) readVal(dis);\n     SolrDocument doc = new SolrDocument();\n     for (int i = 0; i < nl.size(); i++) {\n@@ -255,7 +255,7 @@ private SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n     return doc;\n   }\n \n-  private SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\n+  public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\n     SolrDocumentList solrDocs = new SolrDocumentList();\n     List list = (List) readVal(dis);\n     solrDocs.setNumFound((Long) list.get(0));\n@@ -267,7 +267,7 @@ private SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOExce\n     return solrDocs;\n   }\n \n-   private void writeSolrDocumentList(SolrDocumentList docs)\n+   public void writeSolrDocumentList(SolrDocumentList docs)\n          throws IOException {\n      writeTag(SOLRDOCLST);\n      List l = new ArrayList(3);\n@@ -278,7 +278,7 @@ private void writeSolrDocumentList(SolrDocumentList docs)\n      writeArray(docs);\n    }\n \n-  private Map readMap(FastInputStream dis)\n+  public Map readMap(FastInputStream dis)\n           throws IOException {\n     int sz = readVInt(dis);\n     Map m = new LinkedHashMap();\n@@ -291,7 +291,7 @@ private Map readMap(FastInputStream dis)\n     return m;\n   }\n \n-  private void writeIterator(Iterator iter) throws IOException {\n+  public void writeIterator(Iterator iter) throws IOException {\n     ArrayList l = new ArrayList();\n     while (iter.hasNext()) l.add(iter.next());\n     writeArray(l);\n@@ -312,7 +312,7 @@ public void writeArray(Object[] arr) throws IOException {\n     }\n   }\n \n-  private List readArray(FastInputStream dis) throws IOException {\n+  public List readArray(FastInputStream dis) throws IOException {\n     int sz = readSize(dis);\n     ArrayList l = new ArrayList(sz);\n     for (int i = 0; i < sz; i++) {\n@@ -324,9 +324,10 @@ private List readArray(FastInputStream dis) throws IOException {\n   /** write the string as tag+length, with length being the number of UTF-16 characters,\n    * followed by the string encoded in modified-UTF8 \n    */\n-  private void writeStr(String s) throws IOException {\n+  public void writeStr(String s) throws IOException {\n     if (s==null) {\n       writeTag(NULL);\n+      return;\n     }\n     // Can't use string serialization or toUTF()... it's limited to 64K\n     // plus it's bigger than it needs to be for small strings anyway\n@@ -346,7 +347,7 @@ private String readStr(FastInputStream dis) throws IOException {\n     return new String(charArr, 0, sz);\n   }\n \n-  private void writeInt(int val) throws IOException {\n+  public void writeInt(int val) throws IOException {\n     if (val>0) {\n       int b = SINT | (val & 0x0f);\n \n@@ -364,15 +365,15 @@ private void writeInt(int val) throws IOException {\n     }\n   }\n \n-  private int readSmallInt(FastInputStream dis) throws IOException {\n+  public int readSmallInt(FastInputStream dis) throws IOException {\n     int v = tagByte & 0x0F;\n     if ((tagByte & 0x10) != 0)\n       v = (readVInt(dis)<<4) | v;\n     return v;\n   }\n \n \n-  private void writeLong(long val) throws IOException {\n+  public void writeLong(long val) throws IOException {\n     if ((val & 0xff00000000000000L) == 0) {\n       int b = SLONG | ((int)val & 0x0f);\n       if (val >= 0x0f) {\n@@ -388,14 +389,14 @@ private void writeLong(long val) throws IOException {\n     }\n   }\n \n-  private long readSmallLong(FastInputStream dis) throws IOException {\n+  public long readSmallLong(FastInputStream dis) throws IOException {\n     long v = tagByte & 0x0F;\n     if ((tagByte & 0x10) != 0)\n       v = (readVLong(dis)<<4) | v;\n     return v;\n   }\n \n-  private boolean writePrimitive(Object val) throws IOException {\n+  public boolean writePrimitive(Object val) throws IOException {\n     if (val == null) {\n       daos.writeByte(NULL);\n       return true;\n@@ -439,7 +440,7 @@ private boolean writePrimitive(Object val) throws IOException {\n     return false;\n   }\n \n-  private void writeMap( Map val)\n+  public void writeMap( Map val)\n           throws IOException {\n     writeTag(MAP, val.size());\n     for (Map.Entry entry : (Set<Map.Entry>) val.entrySet()) {\n@@ -449,7 +450,7 @@ private void writeMap( Map val)\n   }\n \n \n-  private int readSize(FastInputStream in) throws IOException {\n+  public int readSize(FastInputStream in) throws IOException {\n     int sz = tagByte & 0x1f;\n     if (sz == 0x1f) sz += readVInt(in);\n     return sz;\n@@ -465,7 +466,7 @@ private int readSize(FastInputStream in) throws IOException {\n    * @param out\n    * @throws IOException\n    */\n-  private static void writeVInt(int i, FastOutputStream out) throws IOException {\n+  public static void writeVInt(int i, FastOutputStream out) throws IOException {\n     while ((i & ~0x7F) != 0) {\n       out.writeByte((byte) ((i & 0x7f) | 0x80));\n       i >>>= 7;\n@@ -491,15 +492,15 @@ public static int readVInt(FastInputStream in) throws IOException {\n   }\n \n \n-  private static void writeVLong(long i, FastOutputStream out) throws IOException {\n+  public static void writeVLong(long i, FastOutputStream out) throws IOException {\n     while ((i & ~0x7F) != 0) {\n       out.writeByte((byte)((i & 0x7f) | 0x80));\n       i >>>= 7;\n     }\n     out.writeByte((byte) i);\n   }\n \n-  private static long readVLong(FastInputStream in) throws IOException {\n+  public static long readVLong(FastInputStream in) throws IOException {\n     byte b = in.readByte();\n     long i = b & 0x7F;\n     for (int shift = 7; (b & 0x80) != 0; shift += 7) {",
                "raw_url": "https://github.com/apache/lucene-solr/raw/d0ed896f4b8a03f56bbc575b51919ab677795318/src/java/org/apache/solr/common/util/NamedListCodec.java",
                "sha": "fa3608b4621697720356ebc50ec8f4a4251f43d5",
                "status": "modified"
            }
        ],
        "message": "SOLR-562: Namedlistcodec throws NPE for null names\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/solr/trunk@653511 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/f3ed5f8424b47d087a3c8c4a5d48058d3e17ed35",
        "repo": "lucene-solr",
        "unit_tests": [
            "TestNamedListCodec.java"
        ]
    },
    "lucene-solr_d90d10e": {
        "bug_id": "lucene-solr_d90d10e",
        "commit": "https://github.com/apache/lucene-solr/commit/d90d10e48e6dfeec37643e4bbdee6c154c473df1",
        "file": [
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/lucene-solr/blob/d90d10e48e6dfeec37643e4bbdee6c154c473df1/solr/src/java/org/apache/solr/search/QueryParsing.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/src/java/org/apache/solr/search/QueryParsing.java?ref=d90d10e48e6dfeec37643e4bbdee6c154c473df1",
                "deletions": 3,
                "filename": "solr/src/java/org/apache/solr/search/QueryParsing.java",
                "patch": "@@ -32,6 +32,8 @@\n import org.apache.lucene.search.TermQuery;\n import org.apache.lucene.search.TermRangeQuery;\n import org.apache.lucene.search.WildcardQuery;\n+import org.apache.lucene.util.BytesRef;\n+import org.apache.lucene.util.CharsRef;\n import org.apache.solr.common.SolrException;\n import org.apache.solr.common.params.MapSolrParams;\n import org.apache.solr.common.params.SolrParams;\n@@ -382,6 +384,22 @@ static void writeFieldVal(String val, FieldType ft, Appendable out, int flags) t\n     }\n   }\n \n+  static void writeFieldVal(BytesRef val, FieldType ft, Appendable out, int flags) throws IOException {\n+    if (ft != null) {\n+      try {\n+        CharsRef readable = new CharsRef();\n+        ft.indexedToReadable(val, readable);\n+        out.append(readable);\n+      } catch (Exception e) {\n+        out.append(\"EXCEPTION(val=\");\n+        out.append(val.utf8ToString());\n+        out.append(\")\");\n+      }\n+    } else {\n+      out.append(val.utf8ToString());\n+    }\n+  }\n+\n   /**\n    * @see #toString(Query,IndexSchema)\n    */\n@@ -392,14 +410,14 @@ public static void toString(Query query, IndexSchema schema, Appendable out, int\n       TermQuery q = (TermQuery) query;\n       Term t = q.getTerm();\n       FieldType ft = writeFieldName(t.field(), schema, out, flags);\n-      writeFieldVal(t.text(), ft, out, flags);\n+      writeFieldVal(t.bytes(), ft, out, flags);\n     } else if (query instanceof TermRangeQuery) {\n       TermRangeQuery q = (TermRangeQuery) query;\n       String fname = q.getField();\n       FieldType ft = writeFieldName(fname, schema, out, flags);\n       out.append(q.includesLower() ? '[' : '{');\n-      String lt = q.getLowerTerm().utf8ToString();\n-      String ut = q.getUpperTerm().utf8ToString();\n+      BytesRef lt = q.getLowerTerm();\n+      BytesRef ut = q.getUpperTerm();\n       if (lt == null) {\n         out.append('*');\n       } else {",
                "raw_url": "https://github.com/apache/lucene-solr/raw/d90d10e48e6dfeec37643e4bbdee6c154c473df1/solr/src/java/org/apache/solr/search/QueryParsing.java",
                "sha": "22a68f8266a438b257a7bdd1f1885f4782931cf2",
                "status": "modified"
            }
        ],
        "message": "LUCENE-2514: fix NPE in solr's toString when range endpoints are null\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1131029 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/6f607a5fda4abddd60a8160c327b18254a7506ce",
        "repo": "lucene-solr",
        "unit_tests": [
            "QueryParsingTest.java"
        ]
    },
    "lucene-solr_da5cfe8": {
        "bug_id": "lucene-solr_da5cfe8",
        "commit": "https://github.com/apache/lucene-solr/commit/da5cfe80340faacaffd65a55550bde40f0c57391",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/lucene-solr/blob/da5cfe80340faacaffd65a55550bde40f0c57391/src/java/org/apache/lucene/index/SegmentReader.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/src/java/org/apache/lucene/index/SegmentReader.java?ref=da5cfe80340faacaffd65a55550bde40f0c57391",
                "deletions": 2,
                "filename": "src/java/org/apache/lucene/index/SegmentReader.java",
                "patch": "@@ -242,8 +242,12 @@ synchronized void decRef() throws IOException {\n           storeCFSReader.close();\n         }\n \n-        // Force FieldCache to evict our entries at this point\n-        if (freqStream != null) {\n+        // Force FieldCache to evict our entries at this\n+        // point.  If the exception occurred while\n+        // initialzing the core readers, then\n+        // origInstance will be null, and we don't want\n+        // to call FieldcAche.purge (it leads to NPE):\n+        if (origInstance != null) {\n           FieldCache.DEFAULT.purge(origInstance);\n         }\n       }",
                "raw_url": "https://github.com/apache/lucene-solr/raw/da5cfe80340faacaffd65a55550bde40f0c57391/src/java/org/apache/lucene/index/SegmentReader.java",
                "sha": "6caaf9100fd4a5b05a4fa6a6dc5bde03f09b38ac",
                "status": "modified"
            }
        ],
        "message": "don't throw NPE if an exception is hit while init'ing the core readers in SegmentReader\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/java/trunk@903742 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/e9a979f1eb80733756b0467950e1c2cc70b84800",
        "repo": "lucene-solr",
        "unit_tests": [
            "TestSegmentReader.java"
        ]
    },
    "lucene-solr_dfc05fa": {
        "bug_id": "lucene-solr_dfc05fa",
        "commit": "https://github.com/apache/lucene-solr/commit/dfc05faa352c7037c4924aafb2f5746872e36448",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/lucene-solr/blob/dfc05faa352c7037c4924aafb2f5746872e36448/solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest.java?ref=dfc05faa352c7037c4924aafb2f5746872e36448",
                "deletions": 0,
                "filename": "solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest.java",
                "patch": "@@ -29,6 +29,7 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import org.apache.lucene.util.LuceneTestCase;\n import org.apache.lucene.util.TestUtil;\n import org.apache.solr.client.solrj.SolrClient;\n import org.apache.solr.client.solrj.SolrRequest;\n@@ -64,6 +65,7 @@\n  *\n  */\n @LogLevel(\"org.apache.solr.cloud.autoscaling=DEBUG\")\n+@LuceneTestCase.AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12181\")\n public class IndexSizeTriggerTest extends SolrCloudTestCase {\n   private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n ",
                "raw_url": "https://github.com/apache/lucene-solr/raw/dfc05faa352c7037c4924aafb2f5746872e36448/solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest.java",
                "sha": "3bf702157011eb79098e6e8c7d935fffba72e662",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/lucene-solr/blob/dfc05faa352c7037c4924aafb2f5746872e36448/solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider.java?ref=dfc05faa352c7037c4924aafb2f5746872e36448",
                "deletions": 2,
                "filename": "solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider.java",
                "patch": "@@ -1049,9 +1049,14 @@ public UpdateResponse simUpdate(UpdateRequest req) throws SolrException, Interru\n         for (String id : deletes) {\n           Slice s = router.getTargetSlice(id, null, null, req.getParams(), coll);\n           // NOTE: we don't use getProperty because it uses PROPERTY_PROP_PREFIX\n-          String numDocsStr = s.getLeader().getStr(\"SEARCHER.searcher.numDocs\");\n+          Replica leader = s.getLeader();\n+          if (leader == null) {\n+            LOG.debug(\"-- no leader in \" + s);\n+            continue;\n+          }\n+          String numDocsStr = leader.getStr(\"SEARCHER.searcher.numDocs\");\n           if (numDocsStr == null) {\n-            LOG.debug(\"-- no docs in \" + s.getLeader());\n+            LOG.debug(\"-- no docs in \" + leader);\n             continue;\n           }\n           long numDocs = Long.parseLong(numDocsStr);",
                "raw_url": "https://github.com/apache/lucene-solr/raw/dfc05faa352c7037c4924aafb2f5746872e36448/solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider.java",
                "sha": "12aa9c1a9830d5d0b41755c0087fcf73f2bb467d",
                "status": "modified"
            }
        ],
        "message": "SOLR-12181: Fix NPE. Disable the test until it's fixed.",
        "parent": "https://github.com/apache/lucene-solr/commit/e851b89cbeb1f55edc0f2c1276e2ae812eca2643",
        "repo": "lucene-solr",
        "unit_tests": [
            "TestSimClusterStateProvider.java"
        ]
    },
    "lucene-solr_e2583ca": {
        "bug_id": "lucene-solr_e2583ca",
        "commit": "https://github.com/apache/lucene-solr/commit/e2583ca6ddd6c90b3c0881314e5616c3779d5891",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/lucene-solr/blob/e2583ca6ddd6c90b3c0881314e5616c3779d5891/CHANGES.txt",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/CHANGES.txt?ref=e2583ca6ddd6c90b3c0881314e5616c3779d5891",
                "deletions": 1,
                "filename": "CHANGES.txt",
                "patch": "@@ -355,7 +355,8 @@ Bug Fixes\n     when no RequestHandler is mapped to \"/update\") now logs error correctly.\n     (hossman)\n \n-\n+26. SOLR-509: Moved firstSearcher event notification to the end of the SolrCore constructor (Koji Sekiguchi via gsingers)\n+    \n Other Changes\n  1. SOLR-135: Moved common classes to org.apache.solr.common and altered the\n     build scripts to make two jars: apache-solr-1.3.jar and ",
                "raw_url": "https://github.com/apache/lucene-solr/raw/e2583ca6ddd6c90b3c0881314e5616c3779d5891/CHANGES.txt",
                "sha": "0be158268d7af1bbf71d9a329df643eacd597356",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/lucene-solr/blob/e2583ca6ddd6c90b3c0881314e5616c3779d5891/src/java/org/apache/solr/core/SolrCore.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/src/java/org/apache/solr/core/SolrCore.java?ref=e2583ca6ddd6c90b3c0881314e5616c3779d5891",
                "deletions": 17,
                "filename": "src/java/org/apache/solr/core/SolrCore.java",
                "patch": "@@ -396,6 +396,29 @@ public SolrCore(String name, String dataDir, SolrConfig config, IndexSchema sche\n       // Finally tell anyone who wants to know\n       loader.inform( loader );\n       loader.inform( this );\n+      \n+      // execute firstSearcher event\n+      //TODO: It may not always be the case that this is the only time the first searcher event needs to fire.\n+      doFirstSearcherEvent(getSearcher().get());\n+    }\n+  }\n+  \n+  private void doFirstSearcherEvent(final SolrIndexSearcher firstSearcher){\n+    if (firstSearcherListeners.size() > 0) {\n+      searcherExecutor.submit(\n+              new Callable() {\n+                public Object call() throws Exception {\n+                  try {\n+                    for (SolrEventListener listener : firstSearcherListeners) {\n+                      listener.newSearcher(firstSearcher,null);\n+                    }\n+                  } catch (Throwable e) {\n+                    SolrException.logOnce(log,null,e);\n+                  }\n+                  return null;\n+                }\n+              }\n+      );\n     }\n   }\n \n@@ -780,23 +803,6 @@ public Object call() throws Exception {\n         );\n       }\n \n-      if (currSearcher==null && firstSearcherListeners.size() > 0) {\n-        future = searcherExecutor.submit(\n-                new Callable() {\n-                  public Object call() throws Exception {\n-                    try {\n-                      for (SolrEventListener listener : firstSearcherListeners) {\n-                        listener.newSearcher(newSearcher,null);\n-                      }\n-                    } catch (Throwable e) {\n-                      SolrException.logOnce(log,null,e);\n-                    }\n-                    return null;\n-                  }\n-                }\n-        );\n-      }\n-\n       if (currSearcher!=null && newSearcherListeners.size() > 0) {\n         future = searcherExecutor.submit(\n                 new Callable() {",
                "raw_url": "https://github.com/apache/lucene-solr/raw/e2583ca6ddd6c90b3c0881314e5616c3779d5891/src/java/org/apache/solr/core/SolrCore.java",
                "sha": "e242642551270aca0d7885df9165972543a26ec2",
                "status": "modified"
            }
        ],
        "message": "SOLR-509: Fix NPE when starting up SolrCore due to FirstSearcher event not being initialized\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/solr/trunk@649046 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/783bd8c9e94ddc9ff1f55d837edc8d70ed280753",
        "repo": "lucene-solr",
        "unit_tests": [
            "SolrCoreTest.java"
        ]
    },
    "lucene-solr_f1a6b68": {
        "bug_id": "lucene-solr_f1a6b68",
        "commit": "https://github.com/apache/lucene-solr/commit/f1a6b68d75e58f464b2ed4ee3702a6c1b14511a0",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/lucene-solr/blob/f1a6b68d75e58f464b2ed4ee3702a6c1b14511a0/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.java?ref=f1a6b68d75e58f464b2ed4ee3702a6c1b14511a0",
                "deletions": 4,
                "filename": "solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.java",
                "patch": "@@ -922,10 +922,12 @@ public RouteException(ErrorCode errorCode, NamedList<Throwable> throwables, Map<\n         // so that the next attempt would fetch the fresh state\n         // just re-read state for all of them, if it has not been retried\n         // in retryExpiryTime time\n-        for (DocCollection ext : requestedCollections) {\n-          ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n-          if (cacheEntry == null) continue;\n-          cacheEntry.maybeStale = true;\n+        if (requestedCollections != null) {\n+          for (DocCollection ext : requestedCollections) {\n+            ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n+            if (cacheEntry == null) continue;\n+            cacheEntry.maybeStale = true;\n+          }\n         }\n         if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n           //may be, we have a stale version of the collection state",
                "raw_url": "https://github.com/apache/lucene-solr/raw/f1a6b68d75e58f464b2ed4ee3702a6c1b14511a0/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.java",
                "sha": "d746fe6b8a54ee6e123861cd0a1f2e5af3e0b97d",
                "status": "modified"
            }
        ],
        "message": "SOLR-11484: fixing NPE",
        "parent": "https://github.com/apache/lucene-solr/commit/64f60e5cec447ff534a51bd1a9da24c67188508d",
        "repo": "lucene-solr",
        "unit_tests": [
            "CloudSolrClientTest.java"
        ]
    },
    "lucene-solr_f51253a": {
        "bug_id": "lucene-solr_f51253a",
        "commit": "https://github.com/apache/lucene-solr/commit/f51253a331fb938fd92eab4dab60df380d6837b8",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/lucene-solr/blob/f51253a331fb938fd92eab4dab60df380d6837b8/solr/CHANGES.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/CHANGES.txt?ref=f51253a331fb938fd92eab4dab60df380d6837b8",
                "deletions": 0,
                "filename": "solr/CHANGES.txt",
                "patch": "@@ -231,6 +231,8 @@ Bug Fixes\n   Default settings in solrconfig.xml /config/indexConfig/metrics have been changed to turn off\n   IndexWriter and Directory level metrics collection. (ab, ishan)\n \n+* SOLR-10138: Transaction log replay can hit an NPE due to new Metrics code. (ab)\n+\n ==================  6.4.1 ==================\n \n Consult the LUCENE_CHANGES.txt file for additional, low level, changes in this release.",
                "raw_url": "https://github.com/apache/lucene-solr/raw/f51253a331fb938fd92eab4dab60df380d6837b8/solr/CHANGES.txt",
                "sha": "9fcc20c29e4a3dd23d3d6c110e0520365eba815a",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/lucene-solr/blob/f51253a331fb938fd92eab4dab60df380d6837b8/solr/core/src/java/org/apache/solr/update/HdfsUpdateLog.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/update/HdfsUpdateLog.java?ref=f51253a331fb938fd92eab4dab60df380d6837b8",
                "deletions": 2,
                "filename": "solr/core/src/java/org/apache/solr/update/HdfsUpdateLog.java",
                "patch": "@@ -37,6 +37,7 @@\n import org.apache.solr.common.util.IOUtils;\n import org.apache.solr.core.PluginInfo;\n import org.apache.solr.core.SolrCore;\n+import org.apache.solr.core.SolrInfoMBean;\n import org.apache.solr.util.HdfsUtil;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -121,7 +122,7 @@ public void init(UpdateHandler uhandler, SolrCore core) {\n     String ulogDir = core.getCoreDescriptor().getUlogDir();\n \n     this.uhandler = uhandler;\n-    \n+\n     synchronized (fsLock) {\n       // just like dataDir, we do not allow\n       // moving the tlog dir on reload\n@@ -259,7 +260,9 @@ public void init(UpdateHandler uhandler, SolrCore core) {\n       }\n \n     }\n-    \n+\n+    // initialize metrics\n+    core.getCoreMetricManager().registerMetricProducer(SolrInfoMBean.Category.TLOG.toString(), this);\n   }\n   \n   @Override",
                "raw_url": "https://github.com/apache/lucene-solr/raw/f51253a331fb938fd92eab4dab60df380d6837b8/solr/core/src/java/org/apache/solr/update/HdfsUpdateLog.java",
                "sha": "71e20d9f2608ab409f8301cbb95dc576799e47cb",
                "status": "modified"
            }
        ],
        "message": "SOLR-10138: Transaction log replay can hit an NPE due to new Metrics code.",
        "parent": "https://github.com/apache/lucene-solr/commit/9275c2f87ff4fb6909bc748c59ba673cbc599c2c",
        "repo": "lucene-solr",
        "unit_tests": [
            "TestHdfsUpdateLog.java"
        ]
    },
    "lucene-solr_f96b02a": {
        "bug_id": "lucene-solr_f96b02a",
        "commit": "https://github.com/apache/lucene-solr/commit/f96b02af060feaa044b85224bfbfeeb548e8b1da",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/lucene-solr/blob/f96b02af060feaa044b85224bfbfeeb548e8b1da/lucene/CHANGES.txt",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/lucene/CHANGES.txt?ref=f96b02af060feaa044b85224bfbfeeb548e8b1da",
                "deletions": 0,
                "filename": "lucene/CHANGES.txt",
                "patch": "@@ -219,6 +219,9 @@ Bug Fixes\n   In addition, it wasn't possible to index a shape representing the entire\n   globe.\n \n+* LUCENE--4595: EnwikiContentSource had a thread safety problem (NPE) in \n+  'forever' mode (Doron Cohen)\n+\n Optimizations\n \n * LUCENE-2221: oal.util.BitUtil was modified to use Long.bitCount and",
                "raw_url": "https://github.com/apache/lucene-solr/raw/f96b02af060feaa044b85224bfbfeeb548e8b1da/lucene/CHANGES.txt",
                "sha": "d6a7d92d3e7d18bf2585f04cab62fdf25c4228fd",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/lucene-solr/blob/f96b02af060feaa044b85224bfbfeeb548e8b1da/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.java?ref=f96b02af060feaa044b85224bfbfeeb548e8b1da",
                "deletions": 15,
                "filename": "lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.java",
                "patch": "@@ -178,23 +178,25 @@ public void run() {\n         reader.setErrorHandler(this);\n         while(!stopped){\n           final InputStream localFileIS = is;\n-          try {\n-            // To work around a bug in XERCES (XERCESJ-1257), we assume the XML is always UTF8, so we simply provide reader.\n-            CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n-                .onMalformedInput(CodingErrorAction.REPORT)\n-                .onUnmappableCharacter(CodingErrorAction.REPORT);\n-            reader.parse(new InputSource(new BufferedReader(new InputStreamReader(localFileIS, decoder))));\n-          } catch (IOException ioe) {\n-            synchronized(EnwikiContentSource.this) {\n-              if (localFileIS != is) {\n-                // fileIS was closed on us, so, just fall through\n-              } else\n-                // Exception is real\n-                throw ioe;\n+          if (localFileIS != null) { // null means fileIS was closed on us \n+            try {\n+              // To work around a bug in XERCES (XERCESJ-1257), we assume the XML is always UTF8, so we simply provide reader.\n+              CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n+                  .onMalformedInput(CodingErrorAction.REPORT)\n+                  .onUnmappableCharacter(CodingErrorAction.REPORT);\n+              reader.parse(new InputSource(new BufferedReader(new InputStreamReader(localFileIS, decoder))));\n+            } catch (IOException ioe) {\n+              synchronized(EnwikiContentSource.this) {\n+                if (localFileIS != is) {\n+                  // fileIS was closed on us, so, just fall through\n+                } else\n+                  // Exception is real\n+                  throw ioe;\n+              }\n             }\n           }\n           synchronized(this) {\n-            if (!forever) {\n+            if (stopped || !forever) {\n               nmde = new NoMoreDataException();\n               notify();\n               return;\n@@ -291,11 +293,11 @@ private final static int getElementType(String elem) {\n   @Override\n   public void close() throws IOException {\n     synchronized (EnwikiContentSource.this) {\n+      parser.stop();\n       if (is != null) {\n         is.close();\n         is = null;\n       }\n-      parser.stop();\n     }\n   }\n   ",
                "raw_url": "https://github.com/apache/lucene-solr/raw/f96b02af060feaa044b85224bfbfeeb548e8b1da/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.java",
                "sha": "09745cbe88e3ba3b698d693400c6800aa693481e",
                "status": "modified"
            }
        ],
        "message": "LUCENE--4595: EnwikiContentSource thread safety NPE in 'forever' mode\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1418281 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/49593470e3337d433996b73afd992c61df40db6a",
        "repo": "lucene-solr",
        "unit_tests": [
            "EnwikiContentSourceTest.java"
        ]
    },
    "lucene-solr_fd993e0": {
        "bug_id": "lucene-solr_fd993e0",
        "commit": "https://github.com/apache/lucene-solr/commit/fd993e0c116b98ff31ca06af642e46f13d72ca60",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/lucene-solr/blob/fd993e0c116b98ff31ca06af642e46f13d72ca60/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java?ref=fd993e0c116b98ff31ca06af642e46f13d72ca60",
                "deletions": 14,
                "filename": "solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java",
                "patch": "@@ -36,6 +36,7 @@\n import org.apache.solr.common.SolrException;\n import org.apache.solr.common.SolrException.ErrorCode;\n import org.apache.solr.common.cloud.CloudState;\n+import org.apache.solr.common.cloud.Slice;\n import org.apache.solr.common.cloud.ZkCoreNodeProps;\n import org.apache.solr.common.cloud.ZkNodeProps;\n import org.apache.solr.common.cloud.ZkStateReader;\n@@ -645,20 +646,21 @@ protected void handleWaitForStateAction(SolrQueryRequest req,\n             .getZkController()\n             .getCloudState();\n         String collection = cloudDescriptor.getCollectionName();\n-        ZkNodeProps nodeProps = \n-            cloudState.getSlice(collection,\n-                cloudDescriptor.getShardId()).getShards().get(coreNodeName);\n-        \n-        if (nodeProps != null) {\n-          state = nodeProps.get(ZkStateReader.STATE_PROP);\n-          live = cloudState.liveNodesContain(nodeName);\n-          if (nodeProps != null && state.equals(waitForState)) {\n-            if (checkLive == null) {\n-              break;\n-            } else if (checkLive && live) {\n-              break;\n-            } else if (!checkLive && !live) {\n-              break;\n+        Slice slice = cloudState.getSlice(collection,\n+            cloudDescriptor.getShardId());\n+        if (slice != null) {\n+          ZkNodeProps nodeProps = slice.getShards().get(coreNodeName);\n+          if (nodeProps != null) {\n+            state = nodeProps.get(ZkStateReader.STATE_PROP);\n+            live = cloudState.liveNodesContain(nodeName);\n+            if (nodeProps != null && state.equals(waitForState)) {\n+              if (checkLive == null) {\n+                break;\n+              } else if (checkLive && live) {\n+                break;\n+              } else if (!checkLive && !live) {\n+                break;\n+              }\n             }\n           }\n         }",
                "raw_url": "https://github.com/apache/lucene-solr/raw/fd993e0c116b98ff31ca06af642e46f13d72ca60/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java",
                "sha": "132cfc6cad05d749c9c6a7045ffc580fcd195eb0",
                "status": "modified"
            }
        ],
        "message": "be careful about retrying rather than NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1292312 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/lucene-solr/commit/baee5394c1f8fbc313828d2b0f4848df6aab1e00",
        "repo": "lucene-solr",
        "unit_tests": [
            "CoreAdminHandlerTest.java"
        ]
    }
}