[
    {
        "repo": "jclouds",
        "commit": "https://github.com/apache/jclouds/commit/b76a594e816b0c04a8382b1876e160ae4581ae09",
        "bug_id": "jclouds_b76a594",
        "message": "JCLOUDS-1421: Add default credentials to images created by the ImageExtension\n\nBy default, when listing images the ComputeServiceAdapter adds the\ndefault credentials for each image. This is not done when images are\ncreated by the image extension, and NPEs can appear in code that assumes\nthe default credentials are there, as the field is not nullable.\n\nThis change tries to populate the known node credentials for images\ncreated form nodes, and falls back to the default strategy to add the\ndefault credentials to an image if there are not known credentials.",
        "parent": "https://github.com/apache/jclouds/commit/29655f3149f151a834ed5a724e91e32994b28d89",
        "patched_files": [
            "NovaComputeService.java",
            "GoogleComputeEngineService.java",
            "CloudStackComputeService.java",
            "AWSEC2ComputeService.java",
            "EC2ComputeService.java",
            "GoGridComputeService.java",
            "BaseComputeService.java",
            "DelegatingImageExtension.java",
            "BaseComputeServiceContextModule.java",
            "AzureComputeService.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 33,
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/apis/cloudstack/src/main/java/org/jclouds/cloudstack/compute/CloudStackComputeService.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/main/java/org/jclouds/cloudstack/compute/CloudStackComputeService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "filename": "apis/cloudstack/src/main/java/org/jclouds/cloudstack/compute/CloudStackComputeService.java",
                "deletions": 35,
                "sha": "70227bd46828f57a6bfe0fa2d6f66cf6c566cb52",
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/apis/cloudstack/src/main/java/org/jclouds/cloudstack/compute/CloudStackComputeService.java",
                "patch": "@@ -17,11 +17,11 @@\n package org.jclouds.cloudstack.compute;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n+import static org.jclouds.cloudstack.predicates.SshKeyPairPredicates.nameMatches;\n+import static org.jclouds.cloudstack.predicates.ZonePredicates.supportsSecurityGroups;\n import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_RUNNING;\n import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_SUSPENDED;\n import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_TERMINATED;\n-import static org.jclouds.cloudstack.predicates.SshKeyPairPredicates.nameMatches;\n-import static org.jclouds.cloudstack.predicates.ZonePredicates.supportsSecurityGroups;\n \n import java.util.Map;\n import java.util.Set;\n@@ -33,6 +33,13 @@\n import javax.inject.Singleton;\n \n import org.jclouds.Constants;\n+import org.jclouds.cloudstack.CloudStackApi;\n+import org.jclouds.cloudstack.compute.options.CloudStackTemplateOptions;\n+import org.jclouds.cloudstack.domain.SecurityGroup;\n+import org.jclouds.cloudstack.domain.SshKeyPair;\n+import org.jclouds.cloudstack.domain.Zone;\n+import org.jclouds.cloudstack.domain.ZoneAndName;\n+import org.jclouds.cloudstack.predicates.SecurityGroupPredicates;\n import org.jclouds.collect.Memoized;\n import org.jclouds.compute.ComputeServiceContext;\n import org.jclouds.compute.callables.RunScriptOnNode;\n@@ -42,11 +49,11 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.functions.GroupNamingConvention;\n import org.jclouds.compute.internal.BaseComputeService;\n import org.jclouds.compute.internal.PersistNodeCredentials;\n import org.jclouds.compute.options.TemplateOptions;\n-import org.jclouds.compute.reference.ComputeServiceConstants.Timeouts;\n import org.jclouds.compute.strategy.CreateNodesInGroupThenAddToSet;\n import org.jclouds.compute.strategy.DestroyNodeStrategy;\n import org.jclouds.compute.strategy.GetImageStrategy;\n@@ -58,13 +65,6 @@\n import org.jclouds.compute.strategy.SuspendNodeStrategy;\n import org.jclouds.domain.Credentials;\n import org.jclouds.domain.Location;\n-import org.jclouds.cloudstack.CloudStackApi;\n-import org.jclouds.cloudstack.compute.options.CloudStackTemplateOptions;\n-import org.jclouds.cloudstack.domain.SecurityGroup;\n-import org.jclouds.cloudstack.domain.SshKeyPair;\n-import org.jclouds.cloudstack.domain.Zone;\n-import org.jclouds.cloudstack.domain.ZoneAndName;\n-import org.jclouds.cloudstack.predicates.SecurityGroupPredicates;\n import org.jclouds.scriptbuilder.functions.InitAdminAccess;\n \n import com.google.common.base.Function;\n@@ -88,32 +88,30 @@\n \n    @Inject\n    protected CloudStackComputeService(ComputeServiceContext context, Map<String, Credentials> credentialStore,\n-            @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> sizes,\n-            @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n-            GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n-            CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n-            DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy startNodeStrategy,\n-            SuspendNodeStrategy stopNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n-            @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n-            @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n-            @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n-            @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n-            InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n-            RunScriptOnNode.Factory runScriptOnNodeFactory, InitAdminAccess initAdminAccess,\n-            PersistNodeCredentials persistNodeCredentials, Timeouts timeouts,\n-            @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor, CloudStackApi client,\n-            LoadingCache<ZoneAndName, SecurityGroup> securityGroupMap,\n-            LoadingCache<String, SshKeyPair> keyPairCache,\n-            Function<Set<? extends NodeMetadata>, Multimap<String, String>> orphanedGroupsByZoneId,\n-            GroupNamingConvention.Factory namingConvention,\n-            Supplier<LoadingCache<String, Zone>> zoneIdToZone,\n-            Optional<ImageExtension> imageExtension,\n-            Optional<SecurityGroupExtension> securityGroupExtension) {\n+         @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> sizes,\n+         @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n+         GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n+         CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n+         DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy startNodeStrategy,\n+         SuspendNodeStrategy stopNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n+         @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n+         @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n+         @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n+         @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n+         InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n+         RunScriptOnNode.Factory runScriptOnNodeFactory, InitAdminAccess initAdminAccess,\n+         PersistNodeCredentials persistNodeCredentials,\n+         @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor, CloudStackApi client,\n+         LoadingCache<ZoneAndName, SecurityGroup> securityGroupMap, LoadingCache<String, SshKeyPair> keyPairCache,\n+         Function<Set<? extends NodeMetadata>, Multimap<String, String>> orphanedGroupsByZoneId,\n+         GroupNamingConvention.Factory namingConvention, Supplier<LoadingCache<String, Zone>> zoneIdToZone,\n+         Optional<ImageExtension> imageExtension, Optional<SecurityGroupExtension> securityGroupExtension,\n+         DelegatingImageExtension.Factory delegatingImageExtension) {\n       super(context, credentialStore, images, sizes, locations, listNodesStrategy, getImageStrategy,\n-               getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n-               startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n-               nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n-               persistNodeCredentials, timeouts, userExecutor, imageExtension, securityGroupExtension);\n+            getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n+            startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n+            nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n+            persistNodeCredentials, userExecutor, imageExtension, securityGroupExtension, delegatingImageExtension);\n       this.zoneIdToZone = checkNotNull(zoneIdToZone, \"zoneIdToZone\");\n       this.client = checkNotNull(client, \"client\");\n       this.securityGroupMap = checkNotNull(securityGroupMap, \"securityGroupMap\");",
                "changes": 68
            },
            {
                "status": "modified",
                "additions": 25,
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/apis/ec2/src/main/java/org/jclouds/ec2/compute/EC2ComputeService.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/main/java/org/jclouds/ec2/compute/EC2ComputeService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "filename": "apis/ec2/src/main/java/org/jclouds/ec2/compute/EC2ComputeService.java",
                "deletions": 23,
                "sha": "fea023c109df06027206b553e44f158bd974513c",
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/apis/ec2/src/main/java/org/jclouds/ec2/compute/EC2ComputeService.java",
                "patch": "@@ -57,6 +57,7 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.functions.GroupNamingConvention;\n import org.jclouds.compute.functions.GroupNamingConvention.Factory;\n import org.jclouds.compute.internal.BaseComputeService;\n@@ -113,30 +114,31 @@\n \n    @Inject\n    protected EC2ComputeService(ComputeServiceContext context, Map<String, Credentials> credentialStore,\n-            @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> sizes,\n-            @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n-            GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n-            CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n-            DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy startNodeStrategy,\n-            SuspendNodeStrategy stopNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n-            @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n-            @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n-            @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n-            @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n-            InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n-            RunScriptOnNode.Factory runScriptOnNodeFactory, InitAdminAccess initAdminAccess,\n-            PersistNodeCredentials persistNodeCredentials, Timeouts timeouts,\n-            @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor, EC2Api client,\n-            ConcurrentMap<RegionAndName, KeyPair> credentialsMap,\n-            @Named(\"SECURITY\") LoadingCache<RegionAndName, String> securityGroupMap,\n-            Optional<ImageExtension> imageExtension, GroupNamingConvention.Factory namingConvention,\n-            @Named(PROPERTY_EC2_GENERATE_INSTANCE_NAMES) boolean generateInstanceNames,\n-            Optional<SecurityGroupExtension> securityGroupExtension) {\n+         @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> sizes,\n+         @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n+         GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n+         CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n+         DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy startNodeStrategy,\n+         SuspendNodeStrategy stopNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n+         @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n+         @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n+         @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n+         @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n+         InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n+         RunScriptOnNode.Factory runScriptOnNodeFactory, InitAdminAccess initAdminAccess,\n+         PersistNodeCredentials persistNodeCredentials, Timeouts timeouts,\n+         @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor, EC2Api client,\n+         ConcurrentMap<RegionAndName, KeyPair> credentialsMap,\n+         @Named(\"SECURITY\") LoadingCache<RegionAndName, String> securityGroupMap,\n+         Optional<ImageExtension> imageExtension, GroupNamingConvention.Factory namingConvention,\n+         @Named(PROPERTY_EC2_GENERATE_INSTANCE_NAMES) boolean generateInstanceNames,\n+         Optional<SecurityGroupExtension> securityGroupExtension,\n+         DelegatingImageExtension.Factory delegatingImageExtension) {\n       super(context, credentialStore, images, sizes, locations, listNodesStrategy, getImageStrategy,\n-               getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n-               startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n-               nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n-               persistNodeCredentials, timeouts, userExecutor, imageExtension, securityGroupExtension);\n+            getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n+            startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n+            nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n+            persistNodeCredentials, userExecutor, imageExtension, securityGroupExtension, delegatingImageExtension);\n       this.client = client;\n       this.credentialsMap = credentialsMap;\n       this.securityGroupMap = securityGroupMap;",
                "changes": 48
            },
            {
                "status": "modified",
                "additions": 23,
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/NovaComputeService.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/NovaComputeService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "filename": "apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/NovaComputeService.java",
                "deletions": 22,
                "sha": "c28319cb1d2b9a1aaadf7715734ca750a190847e",
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/NovaComputeService.java",
                "patch": "@@ -20,6 +20,7 @@\n import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_RUNNING;\n import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_SUSPENDED;\n import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_TERMINATED;\n+\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicReference;\n@@ -39,10 +40,10 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.internal.BaseComputeService;\n import org.jclouds.compute.internal.PersistNodeCredentials;\n import org.jclouds.compute.options.TemplateOptions;\n-import org.jclouds.compute.reference.ComputeServiceConstants.Timeouts;\n import org.jclouds.compute.strategy.CreateNodesInGroupThenAddToSet;\n import org.jclouds.compute.strategy.DestroyNodeStrategy;\n import org.jclouds.compute.strategy.GetImageStrategy;\n@@ -69,28 +70,28 @@\n \n    @Inject\n    protected NovaComputeService(ComputeServiceContext context, Map<String, Credentials> credentialStore,\n-            @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> sizes,\n-            @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n-            GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n-            CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n-            DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy startNodeStrategy,\n-            SuspendNodeStrategy stopNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n-            @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n-            @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n-            @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n-            @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n-            InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n-            RunScriptOnNode.Factory runScriptOnNodeFactory, InitAdminAccess initAdminAccess,\n-            PersistNodeCredentials persistNodeCredentials, Timeouts timeouts,\n-            @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n-            CleanupResources cleanupResources,\n-            Optional<ImageExtension> imageExtension,\n-            Optional<SecurityGroupExtension> securityGroupExtension) {\n+         @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> sizes,\n+         @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n+         GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n+         CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n+         DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy startNodeStrategy,\n+         SuspendNodeStrategy stopNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n+         @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n+         @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n+         @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n+         @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n+         InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n+         RunScriptOnNode.Factory runScriptOnNodeFactory, InitAdminAccess initAdminAccess,\n+         PersistNodeCredentials persistNodeCredentials,\n+         @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n+         CleanupResources cleanupResources, Optional<ImageExtension> imageExtension,\n+         Optional<SecurityGroupExtension> securityGroupExtension,\n+         DelegatingImageExtension.Factory delegatingImageExtension) {\n       super(context, credentialStore, images, sizes, locations, listNodesStrategy, getImageStrategy,\n-               getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n-               startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n-               nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n-               persistNodeCredentials, timeouts, userExecutor, imageExtension, securityGroupExtension);\n+            getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n+            startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n+            nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n+            persistNodeCredentials, userExecutor, imageExtension, securityGroupExtension, delegatingImageExtension);\n       this.cleanupResources = checkNotNull(cleanupResources, \"cleanupResources\");\n \n    }",
                "changes": 45
            },
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/main/java/org/jclouds/compute/config/BaseComputeServiceContextModule.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/main/java/org/jclouds/compute/config/BaseComputeServiceContextModule.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "filename": "compute/src/main/java/org/jclouds/compute/config/BaseComputeServiceContextModule.java",
                "deletions": 0,
                "sha": "39265b9ff94a4bd1e58b8b49684d6d23a9e7b6ef",
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/main/java/org/jclouds/compute/config/BaseComputeServiceContextModule.java",
                "patch": "@@ -45,6 +45,7 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.functions.CreateSshClientOncePortIsListeningOnNode;\n import org.jclouds.compute.functions.DefaultCredentialsFromImageOrOverridingCredentials;\n import org.jclouds.compute.options.RunScriptOptions;\n@@ -112,6 +113,8 @@ protected void configure() {\n       }, InitializeRunScriptOnNodeOrPlaceInBadMap.class).build(InitializeRunScriptOnNodeOrPlaceInBadMap.Factory.class));\n \n       install(new FactoryModuleBuilder().build(BlockUntilInitScriptStatusIsZeroThenReturnOutput.Factory.class));\n+      \n+      install(new FactoryModuleBuilder().build(DelegatingImageExtension.Factory.class));\n    }\n \n    protected void bindCredentialsOverriderFunction() {",
                "changes": 3
            },
            {
                "status": "modified",
                "additions": 63,
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/main/java/org/jclouds/compute/extensions/internal/DelegatingImageExtension.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/main/java/org/jclouds/compute/extensions/internal/DelegatingImageExtension.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "filename": "compute/src/main/java/org/jclouds/compute/extensions/internal/DelegatingImageExtension.java",
                "deletions": 5,
                "sha": "7fd7544ac730377f161c2d43182ca2d1ac3ac93e",
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/main/java/org/jclouds/compute/extensions/internal/DelegatingImageExtension.java",
                "patch": "@@ -16,17 +16,30 @@\n  */\n package org.jclouds.compute.extensions.internal;\n \n-import static com.google.common.base.Preconditions.checkNotNull;\n+import java.util.Map;\n \n+import javax.annotation.Resource;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.jclouds.compute.config.ComputeServiceAdapterContextModule.AddDefaultCredentialsToImage;\n+import org.jclouds.compute.domain.CloneImageTemplate;\n import org.jclouds.compute.domain.Image;\n+import org.jclouds.compute.domain.ImageBuilder;\n import org.jclouds.compute.domain.ImageTemplate;\n import org.jclouds.compute.extensions.ImageExtension;\n+import org.jclouds.compute.reference.ComputeServiceConstants;\n import org.jclouds.compute.suppliers.ImageCacheSupplier;\n+import org.jclouds.domain.Credentials;\n+import org.jclouds.domain.LoginCredentials;\n+import org.jclouds.logging.Logger;\n \n import com.google.common.annotations.Beta;\n+import com.google.common.base.Function;\n import com.google.common.util.concurrent.FutureCallback;\n import com.google.common.util.concurrent.Futures;\n import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.inject.assistedinject.Assisted;\n \n /**\n  * Delegates to the provider specific {@link ImageExtension} and takes care of\n@@ -35,20 +48,65 @@\n @Beta\n public class DelegatingImageExtension implements ImageExtension {\n \n+   public interface Factory {\n+      DelegatingImageExtension create(ImageCacheSupplier imageCache, ImageExtension delegate);\n+   }\n+\n+   @Resource\n+   @Named(ComputeServiceConstants.COMPUTE_LOGGER)\n+   protected Logger logger = Logger.NULL;\n+\n    private final ImageCacheSupplier imageCache;\n    private final ImageExtension delegate;\n+   private final AddDefaultCredentialsToImage addDefaultCredentialsToImage;\n+   private final Map<String, Credentials> credentialStore;\n \n-   public DelegatingImageExtension(ImageCacheSupplier imageCache, ImageExtension delegate) {\n-      this.imageCache = checkNotNull(imageCache, \"imageCache\");\n-      this.delegate = checkNotNull(delegate, \"delegate\");\n+   @Inject\n+   DelegatingImageExtension(@Assisted ImageCacheSupplier imageCache, @Assisted ImageExtension delegate,\n+         AddDefaultCredentialsToImage addDefaultCredentialsToImage, Map<String, Credentials> credentialStore) {\n+      this.imageCache = imageCache;\n+      this.delegate = delegate;\n+      this.addDefaultCredentialsToImage = addDefaultCredentialsToImage;\n+      this.credentialStore = credentialStore;\n    }\n \n    public ImageTemplate buildImageTemplateFromNode(String name, String id) {\n       return delegate.buildImageTemplateFromNode(name, id);\n    }\n \n-   public ListenableFuture<Image> createImage(ImageTemplate template) {\n+   public ListenableFuture<Image> createImage(final ImageTemplate template) {\n       ListenableFuture<Image> future = delegate.createImage(template);\n+\n+      // Populate the default image credentials, if missing\n+      future = Futures.transform(future, new Function<Image, Image>() {\n+         @Override\n+         public Image apply(Image input) {\n+            if (input.getDefaultCredentials() != null) {\n+               return input;\n+            }\n+\n+            // If the image has been created by cloning a node, then try to\n+            // populate the known node credentials as the default image\n+            // credentials\n+            if (template instanceof CloneImageTemplate) {\n+               final CloneImageTemplate cloneImageTemplate = (CloneImageTemplate) template;\n+\n+               Credentials nodeCredentials = credentialStore.get(\"node#\" + cloneImageTemplate.getSourceNodeId());\n+               if (nodeCredentials != null) {\n+                  logger.info(\">> Adding node(%s) credentials to image(%s)...\", cloneImageTemplate.getSourceNodeId(),\n+                        cloneImageTemplate.getName());\n+                  return ImageBuilder.fromImage(input)\n+                        .defaultCredentials(LoginCredentials.fromCredentials(nodeCredentials)).build();\n+               }\n+            }\n+\n+            // If no credentials are known for the node, populate the default\n+            // credentials using the defined strategy\n+            logger.info(\">> Adding default image credentials to image(%s)...\", template.getName());\n+            return addDefaultCredentialsToImage.apply(input);\n+         }\n+      });\n+\n       Futures.addCallback(future, new FutureCallback<Image>() {\n          @Override\n          public void onSuccess(Image result) {",
                "changes": 68
            },
            {
                "status": "modified",
                "additions": 5,
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/main/java/org/jclouds/compute/internal/BaseComputeService.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/main/java/org/jclouds/compute/internal/BaseComputeService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "filename": "compute/src/main/java/org/jclouds/compute/internal/BaseComputeService.java",
                "deletions": 7,
                "sha": "c8c4c1f704e24d1e3927b07eb848a9dc4c941b74",
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/main/java/org/jclouds/compute/internal/BaseComputeService.java",
                "patch": "@@ -68,7 +68,6 @@\n import org.jclouds.compute.options.RunScriptOptions;\n import org.jclouds.compute.options.TemplateOptions;\n import org.jclouds.compute.reference.ComputeServiceConstants;\n-import org.jclouds.compute.reference.ComputeServiceConstants.Timeouts;\n import org.jclouds.compute.strategy.CreateNodesInGroupThenAddToSet;\n import org.jclouds.compute.strategy.DestroyNodeStrategy;\n import org.jclouds.compute.strategy.GetImageStrategy;\n@@ -131,7 +130,6 @@\n    private final Predicate<AtomicReference<NodeMetadata>> nodeTerminated;\n    private final Predicate<AtomicReference<NodeMetadata>> nodeSuspended;\n    private final InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory;\n-   private final Timeouts timeouts;\n    private final InitAdminAccess initAdminAccess;\n    private final PersistNodeCredentials persistNodeCredentials;\n    private final RunScriptOnNode.Factory runScriptOnNodeFactory;\n@@ -154,8 +152,9 @@ protected BaseComputeService(ComputeServiceContext context, Map<String, Credenti\n             @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n             InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory, InitAdminAccess initAdminAccess,\n             RunScriptOnNode.Factory runScriptOnNodeFactory, PersistNodeCredentials persistNodeCredentials,\n-            Timeouts timeouts, @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n-            Optional<ImageExtension> imageExtension, Optional<SecurityGroupExtension> securityGroupExtension) {\n+            @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n+            Optional<ImageExtension> imageExtension, Optional<SecurityGroupExtension> securityGroupExtension,\n+            DelegatingImageExtension.Factory delegatingImageExtension) {\n       this.context = checkNotNull(context, \"context\");\n       this.credentialStore = checkNotNull(credentialStore, \"credentialStore\");\n       this.images = checkNotNull(images, \"images\");\n@@ -175,15 +174,14 @@ protected BaseComputeService(ComputeServiceContext context, Map<String, Credenti\n       this.nodeTerminated = checkNotNull(nodeTerminated, \"nodeTerminated\");\n       this.nodeSuspended = checkNotNull(nodeSuspended, \"nodeSuspended\");\n       this.initScriptRunnerFactory = checkNotNull(initScriptRunnerFactory, \"initScriptRunnerFactory\");\n-      this.timeouts = checkNotNull(timeouts, \"timeouts\");\n       this.initAdminAccess = checkNotNull(initAdminAccess, \"initAdminAccess\");\n       this.runScriptOnNodeFactory = checkNotNull(runScriptOnNodeFactory, \"runScriptOnNodeFactory\");\n       this.persistNodeCredentials = checkNotNull(persistNodeCredentials, \"persistNodeCredentials\");\n       this.userExecutor = checkNotNull(userExecutor, \"userExecutor\");\n       this.securityGroupExtension = checkNotNull(securityGroupExtension, \"securityGroupExtension\");\n       if (imageExtension.isPresent() && images instanceof ImageCacheSupplier) {\n-         this.imageExtension = Optional.<ImageExtension> of(new DelegatingImageExtension(ImageCacheSupplier.class\n-               .cast(images), imageExtension.get()));\n+         this.imageExtension = Optional.<ImageExtension> of(delegatingImageExtension.create(\n+               ImageCacheSupplier.class.cast(images), imageExtension.get()));\n       } else {\n          this.imageExtension = checkNotNull(imageExtension, \"imageExtension\");\n       }",
                "changes": 12
            },
            {
                "status": "added",
                "additions": 214,
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/test/java/org/jclouds/compute/extensions/internal/DelegatingImageExtensionTest.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/test/java/org/jclouds/compute/extensions/internal/DelegatingImageExtensionTest.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "filename": "compute/src/test/java/org/jclouds/compute/extensions/internal/DelegatingImageExtensionTest.java",
                "deletions": 0,
                "sha": "4eb6a39240c2a484c3bb7b2489eb374ba0a7c570",
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/test/java/org/jclouds/compute/extensions/internal/DelegatingImageExtensionTest.java",
                "patch": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jclouds.compute.extensions.internal;\n+\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.expectLastCall;\n+import static org.easymock.EasyMock.replay;\n+import static org.easymock.EasyMock.verify;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+\n+import org.jclouds.compute.config.ComputeServiceAdapterContextModule.AddDefaultCredentialsToImage;\n+import org.jclouds.compute.domain.Image;\n+import org.jclouds.compute.domain.Image.Status;\n+import org.jclouds.compute.domain.ImageBuilder;\n+import org.jclouds.compute.domain.ImageTemplate;\n+import org.jclouds.compute.domain.ImageTemplateBuilder.CloneImageTemplateBuilder;\n+import org.jclouds.compute.domain.OperatingSystem;\n+import org.jclouds.compute.domain.internal.ImageTemplateImpl;\n+import org.jclouds.compute.extensions.ImageExtension;\n+import org.jclouds.compute.suppliers.ImageCacheSupplier;\n+import org.jclouds.domain.Credentials;\n+import org.jclouds.domain.LoginCredentials;\n+import org.testng.annotations.Test;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.util.concurrent.Futures;\n+\n+@Test(groups = \"unit\", testName = \"DelegatingImageExtensionTest\")\n+public class DelegatingImageExtensionTest {\n+\n+   @Test\n+   public void createImageRegistersInCacheAndAddsCredentials()  {\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+      AddDefaultCredentialsToImage credsToImage = createMock(AddDefaultCredentialsToImage.class);\n+\n+      ImageTemplate template = new ImageTemplateImpl(\"test\") {\n+      };\n+      Image result = new ImageBuilder().id(\"test\")\n+            .operatingSystem(OperatingSystem.builder().description(\"test\").build()).status(Status.AVAILABLE).build();\n+\n+      LoginCredentials credentials = LoginCredentials.builder().user(\"jclouds\").password(\"pass\").build();\n+      Image withCredentials = ImageBuilder.fromImage(result).defaultCredentials(credentials).build();\n+\n+      expect(delegate.createImage(template)).andReturn(immediateFuture(result));\n+      expect(credsToImage.apply(result)).andReturn(withCredentials);\n+      imageCache.registerImage(withCredentials);\n+      expectLastCall();\n+      replay(delegate, imageCache, credsToImage);\n+\n+      new DelegatingImageExtension(imageCache, delegate, credsToImage, null).createImage(template);\n+\n+      verify(delegate, imageCache, credsToImage);\n+   }\n+\n+   @Test\n+   public void createImageDoesNotRegisterInCacheWhenFailed() {\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+      AddDefaultCredentialsToImage credsToImage = createMock(AddDefaultCredentialsToImage.class);\n+\n+      ImageTemplate template = new ImageTemplateImpl(\"test\") {\n+      };\n+\n+      expect(delegate.createImage(template)).andReturn(Futures.<Image> immediateFailedFuture(new RuntimeException()));\n+      replay(delegate, imageCache, credsToImage);\n+\n+      new DelegatingImageExtension(imageCache, delegate, credsToImage, null).createImage(template);\n+\n+      verify(delegate, imageCache, credsToImage);\n+   }\n+\n+   @Test\n+   public void createImageDoesNotRegisterInCacheWhenCancelled() {\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+      AddDefaultCredentialsToImage credsToImage = createMock(AddDefaultCredentialsToImage.class);\n+\n+      ImageTemplate template = new ImageTemplateImpl(\"test\") {\n+      };\n+\n+      expect(delegate.createImage(template)).andReturn(Futures.<Image> immediateCancelledFuture());\n+      replay(delegate, imageCache, credsToImage);\n+\n+      new DelegatingImageExtension(imageCache, delegate, credsToImage, null).createImage(template);\n+\n+      verify(delegate, imageCache, credsToImage);\n+   }\n+\n+   @Test\n+   public void deleteUnregistersImageFromCache() {\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+\n+      expect(delegate.deleteImage(\"test\")).andReturn(true);\n+      imageCache.removeImage(\"test\");\n+      expectLastCall();\n+      replay(delegate, imageCache);\n+\n+      new DelegatingImageExtension(imageCache, delegate, null, null).deleteImage(\"test\");\n+\n+      verify(delegate, imageCache);\n+   }\n+\n+   @Test\n+   public void deleteDoesNotUnregisterImageFromCacheWhenFailed() {\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+\n+      expect(delegate.deleteImage(\"test\")).andReturn(false);\n+      replay(delegate, imageCache);\n+\n+      new DelegatingImageExtension(imageCache, delegate, null, null).deleteImage(\"test\");\n+\n+      verify(delegate, imageCache);\n+   }\n+\n+   @Test\n+   public void createByCloningDoesNothingIfImageHasCredentials() throws InterruptedException, ExecutionException {\n+      LoginCredentials credentials = LoginCredentials.builder().user(\"jclouds\").password(\"pass\").build();\n+\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+      AddDefaultCredentialsToImage credsToImage = createMock(AddDefaultCredentialsToImage.class);\n+\n+      ImageTemplate template = new CloneImageTemplateBuilder().name(\"test\").nodeId(\"node1\").build();\n+      Image result = new ImageBuilder().id(\"test\")\n+            .operatingSystem(OperatingSystem.builder().description(\"test\").build()).status(Status.AVAILABLE)\n+            .defaultCredentials(credentials).build();\n+\n+      expect(delegate.createImage(template)).andReturn(immediateFuture(result));\n+      replay(delegate, credsToImage);\n+\n+      Future<Image> image = new DelegatingImageExtension(imageCache, delegate, credsToImage, null)\n+            .createImage(template);\n+\n+      // Verify that the exact same instance is returned unmodified\n+      assertTrue(image.get() == result);\n+\n+      verify(delegate, credsToImage);\n+   }\n+\n+   @Test\n+   public void createByCloningAddsNodeCredentials() throws InterruptedException, ExecutionException {\n+      Credentials credentials = LoginCredentials.builder().user(\"jclouds\").password(\"pass\").build();\n+\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+      AddDefaultCredentialsToImage credsToImage = createMock(AddDefaultCredentialsToImage.class);\n+      Map<String, Credentials> credentialStore = ImmutableMap.of(\"node#node1\", credentials);\n+\n+      ImageTemplate template = new CloneImageTemplateBuilder().name(\"test\").nodeId(\"node1\").build();\n+      Image result = new ImageBuilder().id(\"test\")\n+            .operatingSystem(OperatingSystem.builder().description(\"test\").build()).status(Status.AVAILABLE).build();\n+\n+      expect(delegate.createImage(template)).andReturn(immediateFuture(result));\n+      replay(delegate, credsToImage);\n+\n+      Future<Image> image = new DelegatingImageExtension(imageCache, delegate, credsToImage, credentialStore)\n+            .createImage(template);\n+\n+      assertEquals(image.get().getDefaultCredentials(), credentials);\n+\n+      verify(delegate, credsToImage);\n+   }\n+\n+   @Test\n+   public void createByCloningAddsDefaultImageCredentials() throws InterruptedException, ExecutionException {\n+      LoginCredentials credentials = LoginCredentials.builder().user(\"jclouds\").password(\"pass\").build();\n+\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+      AddDefaultCredentialsToImage credsToImage = createMock(AddDefaultCredentialsToImage.class);\n+      Map<String, Credentials> credentialStore = Collections.emptyMap();\n+\n+      ImageTemplate template = new CloneImageTemplateBuilder().name(\"test\").nodeId(\"node1\").build();\n+      Image result = new ImageBuilder().id(\"test\")\n+            .operatingSystem(OperatingSystem.builder().description(\"test\").build()).status(Status.AVAILABLE).build();\n+\n+      expect(delegate.createImage(template)).andReturn(immediateFuture(result));\n+      expect(credsToImage.apply(result)).andReturn(\n+            ImageBuilder.fromImage(result).defaultCredentials(credentials).build());\n+      replay(delegate, credsToImage);\n+\n+      Future<Image> image = new DelegatingImageExtension(imageCache, delegate, credsToImage, credentialStore)\n+            .createImage(template);\n+\n+      assertEquals(image.get().getDefaultCredentials(), credentials);\n+\n+      verify(delegate, credsToImage);\n+   }\n+}",
                "changes": 214
            },
            {
                "status": "modified",
                "additions": 4,
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/aws-ec2/src/main/java/org/jclouds/aws/ec2/compute/AWSEC2ComputeService.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/aws-ec2/src/main/java/org/jclouds/aws/ec2/compute/AWSEC2ComputeService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "filename": "providers/aws-ec2/src/main/java/org/jclouds/aws/ec2/compute/AWSEC2ComputeService.java",
                "deletions": 2,
                "sha": "cc2f13abc8b5ade33013f8a276e40d0e59f425b4",
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/aws-ec2/src/main/java/org/jclouds/aws/ec2/compute/AWSEC2ComputeService.java",
                "patch": "@@ -47,6 +47,7 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.functions.GroupNamingConvention;\n import org.jclouds.compute.internal.PersistNodeCredentials;\n import org.jclouds.compute.options.TemplateOptions;\n@@ -103,13 +104,14 @@ protected AWSEC2ComputeService(ComputeServiceContext context, Map<String, Creden\n          @Named(\"DELETED\") Predicate<PlacementGroup> placementGroupDeleted, Optional<ImageExtension> imageExtension,\n          GroupNamingConvention.Factory namingConvention,\n          @Named(PROPERTY_EC2_GENERATE_INSTANCE_NAMES) boolean generateInstanceNames,\n-         Optional<SecurityGroupExtension> securityGroupExtension) {\n+         Optional<SecurityGroupExtension> securityGroupExtension,\n+         DelegatingImageExtension.Factory delegatingImageExtension) {\n       super(context, credentialStore, images, sizes, locations, listNodesStrategy, getImageStrategy,\n             getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n             startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n             nodeTerminated, nodeSuspended, initScriptRunnerFactory, runScriptOnNodeFactory, initAdminAccess,\n             persistNodeCredentials, timeouts, userExecutor, client, credentialsMap, securityGroupMap, imageExtension,\n-            namingConvention, generateInstanceNames, securityGroupExtension);\n+            namingConvention, generateInstanceNames, securityGroupExtension, delegatingImageExtension);\n       this.client = client;\n       this.placementGroupMap = placementGroupMap;\n       this.placementGroupDeleted = placementGroupDeleted;",
                "changes": 6
            },
            {
                "status": "modified",
                "additions": 9,
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/AzureComputeService.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/AzureComputeService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "filename": "providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/AzureComputeService.java",
                "deletions": 8,
                "sha": "9a85abe940dacf26c8e592824a48196bd8d7a224",
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/AzureComputeService.java",
                "patch": "@@ -16,6 +16,10 @@\n  */\n package org.jclouds.azurecompute.arm.compute;\n \n+import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_RUNNING;\n+import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_SUSPENDED;\n+import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_TERMINATED;\n+\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.Set;\n@@ -38,10 +42,10 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.internal.BaseComputeService;\n import org.jclouds.compute.internal.PersistNodeCredentials;\n import org.jclouds.compute.options.TemplateOptions;\n-import org.jclouds.compute.reference.ComputeServiceConstants.Timeouts;\n import org.jclouds.compute.strategy.CreateNodesInGroupThenAddToSet;\n import org.jclouds.compute.strategy.DestroyNodeStrategy;\n import org.jclouds.compute.strategy.GetImageStrategy;\n@@ -62,10 +66,6 @@\n import com.google.common.collect.ImmutableSet;\n import com.google.common.util.concurrent.ListeningExecutorService;\n \n-import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_RUNNING;\n-import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_SUSPENDED;\n-import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_TERMINATED;\n-\n @Singleton\n public class AzureComputeService extends BaseComputeService {\n    private final CleanupResources cleanupResources;\n@@ -84,15 +84,16 @@ protected AzureComputeService(ComputeServiceContext context, Map<String, Credent\n          @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n          InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n          RunScriptOnNode.Factory runScriptOnNodeFactory, InitAdminAccess initAdminAccess,\n-         PersistNodeCredentials persistNodeCredentials, Timeouts timeouts,\n+         PersistNodeCredentials persistNodeCredentials,\n          @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n          CleanupResources cleanupResources, Optional<ImageExtension> imageExtension,\n-         Optional<SecurityGroupExtension> securityGroupExtension) {\n+         Optional<SecurityGroupExtension> securityGroupExtension,\n+         DelegatingImageExtension.Factory delegatingImageExtension) {\n       super(context, credentialStore, images, sizes, locations, listNodesStrategy, getImageStrategy,\n             getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n             startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n             nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n-            persistNodeCredentials, timeouts, userExecutor, imageExtension, securityGroupExtension);\n+            persistNodeCredentials, userExecutor, imageExtension, securityGroupExtension, delegatingImageExtension);\n       this.cleanupResources = cleanupResources;\n    }\n ",
                "changes": 17
            },
            {
                "status": "modified",
                "additions": 20,
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/gogrid/src/main/java/org/jclouds/gogrid/compute/GoGridComputeService.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/gogrid/src/main/java/org/jclouds/gogrid/compute/GoGridComputeService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "filename": "providers/gogrid/src/main/java/org/jclouds/gogrid/compute/GoGridComputeService.java",
                "deletions": 20,
                "sha": "96ac4d7d42766f476e4f9be7b0e7693df4cf3e61",
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/gogrid/src/main/java/org/jclouds/gogrid/compute/GoGridComputeService.java",
                "patch": "@@ -38,10 +38,10 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.internal.BaseComputeService;\n import org.jclouds.compute.internal.PersistNodeCredentials;\n import org.jclouds.compute.options.TemplateOptions;\n-import org.jclouds.compute.reference.ComputeServiceConstants.Timeouts;\n import org.jclouds.compute.strategy.CreateNodesInGroupThenAddToSet;\n import org.jclouds.compute.strategy.DestroyNodeStrategy;\n import org.jclouds.compute.strategy.GetImageStrategy;\n@@ -65,26 +65,26 @@\n public class GoGridComputeService extends BaseComputeService {\n    @Inject\n    protected GoGridComputeService(ComputeServiceContext context, Map<String, Credentials> credentialStore,\n-            @Memoized Supplier<Set<? extends Image>> images,\n-            @Memoized Supplier<Set<? extends Hardware>> hardwareProfiles,\n-            @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n-            GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n-            CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n-            DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy resumeNodeStrategy,\n-            SuspendNodeStrategy suspendNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n-            @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n-            @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n-            @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n-            @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n-            InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory, InitAdminAccess initAdminAccess,\n-            RunScriptOnNode.Factory runScriptOnNodeFactory, PersistNodeCredentials persistNodeCredentials,\n-            Timeouts timeouts, @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n-            Optional<ImageExtension> imageExtension, Optional<SecurityGroupExtension> securityGroupExtension) {\n+         @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> hardwareProfiles,\n+         @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n+         GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n+         CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n+         DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy resumeNodeStrategy,\n+         SuspendNodeStrategy suspendNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n+         @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n+         @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n+         @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n+         @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n+         InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory, InitAdminAccess initAdminAccess,\n+         RunScriptOnNode.Factory runScriptOnNodeFactory, PersistNodeCredentials persistNodeCredentials,\n+         @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n+         Optional<ImageExtension> imageExtension, Optional<SecurityGroupExtension> securityGroupExtension,\n+         DelegatingImageExtension.Factory delegatingImageExtension) {\n       super(context, credentialStore, images, hardwareProfiles, locations, listNodesStrategy, getImageStrategy,\n-               getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n-               resumeNodeStrategy, suspendNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n-               nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n-               persistNodeCredentials, timeouts, userExecutor, imageExtension, securityGroupExtension);\n+            getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n+            resumeNodeStrategy, suspendNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n+            nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n+            persistNodeCredentials, userExecutor, imageExtension, securityGroupExtension, delegatingImageExtension);\n    }\n \n    /**",
                "changes": 40
            },
            {
                "status": "modified",
                "additions": 24,
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/GoogleComputeEngineService.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/GoogleComputeEngineService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "filename": "providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/GoogleComputeEngineService.java",
                "deletions": 38,
                "sha": "1142b06a3c8cc0bfbf5268fd5a69134cedeee7f5",
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/GoogleComputeEngineService.java",
                "patch": "@@ -39,11 +39,11 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.functions.GroupNamingConvention;\n import org.jclouds.compute.internal.BaseComputeService;\n import org.jclouds.compute.internal.PersistNodeCredentials;\n import org.jclouds.compute.options.TemplateOptions;\n-import org.jclouds.compute.reference.ComputeServiceConstants;\n import org.jclouds.compute.strategy.CreateNodesInGroupThenAddToSet;\n import org.jclouds.compute.strategy.DestroyNodeStrategy;\n import org.jclouds.compute.strategy.GetImageStrategy;\n@@ -76,44 +76,30 @@\n    private final GoogleComputeEngineApi api;\n    private final Predicate<AtomicReference<Operation>> operationDone;\n \n-   @Inject GoogleComputeEngineService(ComputeServiceContext context,\n-                                        Map<String, Credentials> credentialStore,\n-                                        @Memoized Supplier<Set<? extends Image>> images,\n-                                        @Memoized Supplier<Set<? extends Hardware>> hardwareProfiles,\n-                                        @Memoized Supplier<Set<? extends Location>> locations,\n-                                        ListNodesStrategy listNodesStrategy,\n-                                        GetImageStrategy getImageStrategy,\n-                                        GetNodeMetadataStrategy getNodeMetadataStrategy,\n-                                        CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy,\n-                                        RebootNodeStrategy rebootNodeStrategy,\n-                                        DestroyNodeStrategy destroyNodeStrategy,\n-                                        ResumeNodeStrategy resumeNodeStrategy,\n-                                        SuspendNodeStrategy suspendNodeStrategy,\n-                                        Provider<TemplateBuilder> templateBuilderProvider,\n-                                        @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n-                                        @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>>\n-                                                nodeRunning,\n-                                        @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>>\n-                                                nodeTerminated,\n-                                        @Named(TIMEOUT_NODE_SUSPENDED)\n-                                        Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n-                                        InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n-                                        InitAdminAccess initAdminAccess,\n-                                        RunScriptOnNode.Factory runScriptOnNodeFactory,\n-                                        PersistNodeCredentials persistNodeCredentials,\n-                                        ComputeServiceConstants.Timeouts timeouts,\n-                                        @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n-                                        Optional<ImageExtension> imageExtension,\n-                                        Optional<SecurityGroupExtension> securityGroupExtension,\n-                                        Function<Set<? extends NodeMetadata>, Set<String>> findOrphanedGroups,\n-                                        GroupNamingConvention.Factory namingConvention,\n-                                        GoogleComputeEngineApi api,\n-                                        Predicate<AtomicReference<Operation>> operationDone) {\n+   @Inject\n+   GoogleComputeEngineService(ComputeServiceContext context, Map<String, Credentials> credentialStore,\n+         @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> hardwareProfiles,\n+         @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n+         GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n+         CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n+         DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy resumeNodeStrategy,\n+         SuspendNodeStrategy suspendNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n+         @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n+         @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n+         @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n+         @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n+         InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory, InitAdminAccess initAdminAccess,\n+         RunScriptOnNode.Factory runScriptOnNodeFactory, PersistNodeCredentials persistNodeCredentials,\n+         @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n+         Optional<ImageExtension> imageExtension, Optional<SecurityGroupExtension> securityGroupExtension,\n+         Function<Set<? extends NodeMetadata>, Set<String>> findOrphanedGroups,\n+         GroupNamingConvention.Factory namingConvention, GoogleComputeEngineApi api,\n+         Predicate<AtomicReference<Operation>> operationDone, DelegatingImageExtension.Factory delegatingImageExtension) {\n       super(context, credentialStore, images, hardwareProfiles, locations, listNodesStrategy, getImageStrategy,\n-              getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n-              resumeNodeStrategy, suspendNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n-              nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n-              persistNodeCredentials, timeouts, userExecutor, imageExtension, securityGroupExtension);\n+            getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n+            resumeNodeStrategy, suspendNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n+            nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n+            persistNodeCredentials, userExecutor, imageExtension, securityGroupExtension, delegatingImageExtension);\n       this.findOrphanedGroups = findOrphanedGroups;\n       this.namingConvention = namingConvention;\n       this.api = api;",
                "changes": 62
            }
        ],
        "unit_tests": [
            "DelegatingImageExtensionTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "compute/src/test/java/org/jclouds/compute/extensions/internal/DelegatingImageExtensionTest.java",
        "buggy_files": [
            "apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/NovaComputeService.java",
            "providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/GoogleComputeEngineService.java",
            "apis/cloudstack/src/main/java/org/jclouds/cloudstack/compute/CloudStackComputeService.java",
            "providers/aws-ec2/src/main/java/org/jclouds/aws/ec2/compute/AWSEC2ComputeService.java",
            "apis/ec2/src/main/java/org/jclouds/ec2/compute/EC2ComputeService.java",
            "providers/gogrid/src/main/java/org/jclouds/gogrid/compute/GoGridComputeService.java",
            "compute/src/main/java/org/jclouds/compute/internal/BaseComputeService.java",
            "compute/src/main/java/org/jclouds/compute/extensions/internal/DelegatingImageExtension.java",
            "compute/src/main/java/org/jclouds/compute/config/BaseComputeServiceContextModule.java",
            "providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/AzureComputeService.java"
        ],
        "fixed": true
    }
]