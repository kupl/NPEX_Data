{
    "sling-org-apache-sling-discovery-oak_030410f": {
        "bug_id": "sling-org-apache-sling-discovery-oak_030410f",
        "commit": "https://github.com/apache/sling-org-apache-sling-discovery-oak/commit/030410f6446c49b564877ce059f6f0efc705f45d",
        "file": [
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-discovery-oak/blob/030410f6446c49b564877ce059f6f0efc705f45d/src/main/java/org/apache/sling/discovery/oak/OakDiscoveryService.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-discovery-oak/contents/src/main/java/org/apache/sling/discovery/oak/OakDiscoveryService.java?ref=030410f6446c49b564877ce059f6f0efc705f45d",
                "deletions": 10,
                "filename": "src/main/java/org/apache/sling/discovery/oak/OakDiscoveryService.java",
                "patch": "@@ -107,7 +107,7 @@\n      * whether or not this service is activated - necessary to avoid sending\n      * events to discovery awares before activate is done\n      **/\n-    private boolean activated = false;\n+    private volatile boolean activated = false;\n \n     @Reference\n     private ResourceResolverFactory resourceResolverFactory;\n@@ -400,7 +400,9 @@ private void bindPropertyProviderInteral(final PropertyProvider propertyProvider\n         final ProviderInfo info = new ProviderInfo(propertyProvider, props);\n         this.providerInfos.add(info);\n         Collections.sort(this.providerInfos);\n-        this.doUpdateProperties();\n+        if (activated) {\n+            this.doUpdateProperties();\n+        }\n         checkForTopologyChange();\n     }\n \n@@ -439,7 +441,9 @@ private void unbindPropertyProviderInternal(\n \n         final ProviderInfo info = new ProviderInfo(propertyProvider, props);\n         if ( this.providerInfos.remove(info) && update ) {\n-            this.doUpdateProperties();\n+            if (activated) {\n+                this.doUpdateProperties();\n+            }\n             this.checkForTopologyChange();\n         }\n     }\n@@ -454,9 +458,19 @@ private void unbindPropertyProviderInternal(\n      * @see Config#getClusterInstancesPath()\n      */\n     private void doUpdateProperties() {\n-        if (resourceResolverFactory == null) {\n+        // SLING-5382 : the caller must ensure that this method\n+        // is not invoked after deactivation or before activation.\n+        // so this method doesn't have to do any further synchronization.\n+        // what we do nevertheless is a paranoia way of checking if\n+        // all variables are available and do a NOOP if that's not the case.\n+        final ResourceResolverFactory rrf = resourceResolverFactory;\n+        final Config c = config;\n+        final String sid = slingId;\n+        if (rrf == null || c == null || sid == null) {\n             // cannot update the properties then..\n-            logger.debug(\"doUpdateProperties: too early to update the properties. resourceResolverFactory not yet set.\");\n+            logger.debug(\"doUpdateProperties: too early to update the properties. \"\n+                    + \"resourceResolverFactory ({}), config ({}) or slingId ({}) not yet set.\",\n+                    new Object[] {rrf, c, sid});\n             return;\n         } else {\n             logger.debug(\"doUpdateProperties: updating properties now..\");\n@@ -470,14 +484,14 @@ private void doUpdateProperties() {\n \n         ResourceResolver resourceResolver = null;\n         try {\n-            resourceResolver = resourceResolverFactory\n+            resourceResolver = rrf\n                     .getAdministrativeResourceResolver(null);\n \n             Resource myInstance = ResourceHelper\n                     .getOrCreateResource(\n                             resourceResolver,\n-                            config.getClusterInstancesPath()\n-                                    + \"/\" + slingId + \"/properties\");\n+                            c.getClusterInstancesPath()\n+                                    + \"/\" + sid + \"/properties\");\n             // SLING-2879 - revert/refresh resourceResolver here to work\n             // around a potential issue with jackrabbit in a clustered environment\n             resourceResolver.revert();\n@@ -541,8 +555,12 @@ private void doUpdateProperties() {\n      */\n     public void updateProperties() {\n         synchronized (lock) {\n-            logger.debug(\"updateProperties: calling doUpdateProperties.\");\n-            doUpdateProperties();\n+            if (!activated) {\n+                logger.debug(\"updateProperties: not yet activated, not calling doUpdateProperties this time.\");\n+            } else {\n+                logger.debug(\"updateProperties: calling doUpdateProperties.\");\n+                doUpdateProperties();\n+            }\n             logger.debug(\"updateProperties: calling handlePotentialTopologyChange.\");\n             checkForTopologyChange();\n             logger.debug(\"updateProperties: done.\");",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-discovery-oak/raw/030410f6446c49b564877ce059f6f0efc705f45d/src/main/java/org/apache/sling/discovery/oak/OakDiscoveryService.java",
                "sha": "bdbbd97fb5e5c2e6f8145e5a548c9a9846b004ed",
                "status": "modified"
            }
        ],
        "message": "SLING-5382 : avoid NPE when PropertyProviders are bind/unbind/changed before activate\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1727036 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/sling-org-apache-sling-discovery-oak/commit/dd977f32e74792c8f3b7291ae2ec656073e28ec7",
        "patched_files": [
            "OakDiscoveryService.java"
        ],
        "repo": "sling-org-apache-sling-discovery-oak",
        "unit_tests": [
            "OakDiscoveryServiceTest.java"
        ]
    },
    "sling-org-apache-sling-discovery-oak_b18eef5": {
        "bug_id": "sling-org-apache-sling-discovery-oak_b18eef5",
        "commit": "https://github.com/apache/sling-org-apache-sling-discovery-oak/commit/b18eef58389cb6205c7f236dbc7669948a4a93cc",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-discovery-oak/blob/b18eef58389cb6205c7f236dbc7669948a4a93cc/pom.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-discovery-oak/contents/pom.xml?ref=b18eef58389cb6205c7f236dbc7669948a4a93cc",
                "deletions": 2,
                "filename": "pom.xml",
                "patch": "@@ -167,7 +167,7 @@\n \t\t<dependency>\n \t\t\t<groupId>org.apache.sling</groupId>\n \t\t\t<artifactId>org.apache.sling.discovery.base</artifactId>\n-\t\t\t<version>2.0.1-SNAPSHOT</version>\n+\t\t\t<version>2.0.3-SNAPSHOT</version>\n             <scope>provided</scope>\n \t\t</dependency>\n         <!-- besides including discovery.base' normal jar above, \n@@ -176,7 +176,7 @@\n         <dependency>\n             <groupId>org.apache.sling</groupId>\n             <artifactId>org.apache.sling.discovery.base</artifactId>\n-            <version>2.0.1-SNAPSHOT</version>\n+            <version>2.0.3-SNAPSHOT</version>\n             <scope>test</scope>\n             <type>test-jar</type>\n         </dependency>",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-discovery-oak/raw/b18eef58389cb6205c7f236dbc7669948a4a93cc/pom.xml",
                "sha": "570fa418da917995f865bb98315774bc8508eb1b",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-discovery-oak/blob/b18eef58389cb6205c7f236dbc7669948a4a93cc/src/main/java/org/apache/sling/discovery/oak/cluster/OakClusterViewService.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-discovery-oak/contents/src/main/java/org/apache/sling/discovery/oak/cluster/OakClusterViewService.java?ref=b18eef58389cb6205c7f236dbc7669948a4a93cc",
                "deletions": 2,
                "filename": "src/main/java/org/apache/sling/discovery/oak/cluster/OakClusterViewService.java",
                "patch": "@@ -179,6 +179,20 @@ private LocalClusterView asClusterView(DiscoveryLiteDescriptor descriptor, Resou\n             }\n             String leaderElectionId = getLeaderElectionId(resourceResolver,\n                     slingId);\n+            // SLING-6924 : leaderElectionId can be null here\n+            // this means that another instance is just starting up, has already\n+            // created its oak lease, thus is already visible from an oak discover-lite\n+            // point of view - but upper level code here in discovery.oak has not yet\n+            // set the leaderElectionId. This is rare but valid case\n+            if (leaderElectionId == null) {\n+                // then at this stage the clusterView is not yet established\n+                // in a few moments it will but at this point not.\n+                // so falling back to treating this as NO_ESTABLISHED_VIEW\n+                // and with the heartbeat interval this situation will\n+                // resolve itself upon one of the next pings\n+                throw new UndefinedClusterViewException(Reason.NO_ESTABLISHED_VIEW,\n+                        \"no leaderElectionId available yet for slingId=\"+slingId);\n+            }\n             leaderElectionIds.put(id, leaderElectionId);\n         }\n \n@@ -293,9 +307,20 @@ private String getLeaderElectionId(ResourceResolver resourceResolver, String sli\n             throw new IllegalStateException(\"slingId must not be null\");\n         }\n         final String myClusterNodePath = config.getClusterInstancesPath()+\"/\"+slingId;\n-        ValueMap resourceMap = resourceResolver.getResource(myClusterNodePath)\n-                .adaptTo(ValueMap.class);\n+        // SLING-6924 case 1 : /var/discovery/oak/clusterInstances/<slingId> can be non existant == null\n+        final Resource myClusterNode = resourceResolver.getResource(myClusterNodePath);\n+        if (myClusterNode == null) {\n+            // SLING-6924 : return null case 1\n+            return null;\n+        }\n+        ValueMap resourceMap = myClusterNode.adaptTo(ValueMap.class);\n+        // SLING-6924 case 2 : /var/discovery/oak/clusterInstances/<slingId> can exist BUT leaderElectionId not yet set\n+        //    namely the \"leaderElectionId\" is only written when resetLeaderElectionId() is called - which happens\n+        //    on OakViewChecker.activate (or when isolated) - and this activate *can* happen after properties\n+        //    or announcements have been written - those end up below /var/discovery/oak/clusterInstances/<slingId>/\n         String result = resourceMap.get(\"leaderElectionId\", String.class);\n+        \n+        // SLING-6924 : return null case 2 (if leaderElectionId is indeed null, that is)\n         return result;\n     }\n ",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-discovery-oak/raw/b18eef58389cb6205c7f236dbc7669948a4a93cc/src/main/java/org/apache/sling/discovery/oak/cluster/OakClusterViewService.java",
                "sha": "af30f202cd4b45c2d5b094cf18f4d5900c48de7b",
                "status": "modified"
            },
            {
                "additions": 152,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-discovery-oak/blob/b18eef58389cb6205c7f236dbc7669948a4a93cc/src/test/java/org/apache/sling/discovery/oak/OakDiscoveryServiceTest.java",
                "changes": 152,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-discovery-oak/contents/src/test/java/org/apache/sling/discovery/oak/OakDiscoveryServiceTest.java?ref=b18eef58389cb6205c7f236dbc7669948a4a93cc",
                "deletions": 0,
                "filename": "src/test/java/org/apache/sling/discovery/oak/OakDiscoveryServiceTest.java",
                "patch": "@@ -20,20 +20,33 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.UUID;\n \n+import org.apache.sling.api.resource.LoginException;\n+import org.apache.sling.api.resource.ModifiableValueMap;\n+import org.apache.sling.api.resource.Resource;\n import org.apache.sling.api.resource.ResourceResolver;\n import org.apache.sling.api.resource.ResourceResolverFactory;\n+import org.apache.sling.discovery.TopologyEvent;\n+import org.apache.sling.discovery.base.its.setup.OSGiMock;\n import org.apache.sling.discovery.base.its.setup.VirtualInstance;\n+import org.apache.sling.discovery.base.its.setup.mock.DummyResourceResolverFactory;\n+import org.apache.sling.discovery.base.its.setup.mock.MockFactory;\n import org.apache.sling.discovery.commons.providers.base.DummyListener;\n import org.apache.sling.discovery.commons.providers.spi.base.DescriptorHelper;\n import org.apache.sling.discovery.commons.providers.spi.base.DiscoveryLiteConfig;\n+import org.apache.sling.discovery.commons.providers.spi.base.DiscoveryLiteDescriptor;\n import org.apache.sling.discovery.commons.providers.spi.base.DiscoveryLiteDescriptorBuilder;\n import org.apache.sling.discovery.commons.providers.spi.base.DummySlingSettingsService;\n import org.apache.sling.discovery.commons.providers.spi.base.IdMapService;\n+import org.apache.sling.discovery.oak.its.setup.OakTestConfig;\n import org.apache.sling.discovery.oak.its.setup.OakVirtualInstanceBuilder;\n+import org.apache.sling.discovery.oak.its.setup.SimulatedLease;\n import org.apache.sling.discovery.oak.its.setup.SimulatedLeaseCollection;\n import org.junit.Test;\n import org.slf4j.Logger;\n@@ -111,6 +124,10 @@ public void testBindBeforeActivate() throws Exception {\n         discoBuilder.setFinal(true);\n         DescriptorHelper.setDiscoveryLiteDescriptor(builder.getResourceResolverFactory(),\n                 discoBuilder);\n+        // SLING-6924 : need to simulate a OakViewChecker.activate to trigger resetLeaderElectionId\n+        // otherwise no TOPOLOGY_INIT will be generated as without a leaderElectionId we now\n+        // consider a view as NO_ESTABLISHED_VIEW\n+        OSGiMock.activate(builder.getViewChecker());\n         discoveryService.checkForTopologyChange();\n         assertEquals(0, discoveryService.getViewStateManager().waitForAsyncEvents(2000));\n         assertEquals(1, listener.countEvents());\n@@ -181,4 +198,139 @@ public void testDescriptorSeqNumChange() throws Exception {\n         assertEquals(3, listener.countEvents());\n     }\n \n+    @Test\n+    public void testNotYetInitializedLeaderElectionid() throws Exception {\n+        logger.info(\"testNotYetInitializedLeaderElectionid: start\");\n+        OakVirtualInstanceBuilder builder1 =\n+                (OakVirtualInstanceBuilder) new OakVirtualInstanceBuilder()\n+                .setDebugName(\"instance\")\n+                .newRepository(\"/foo/barrx/foo/\", true)\n+                .setConnectorPingInterval(999)\n+                .setConnectorPingTimeout(999);\n+        VirtualInstance instance1 = builder1.build();\n+        logger.info(\"testNotYetInitializedLeaderElectionid: created 1 instance, binding listener...\");\n+\n+        DummyListener listener = new DummyListener();\n+        OakDiscoveryService discoveryService = (OakDiscoveryService) instance1.getDiscoveryService();\n+        discoveryService.bindTopologyEventListener(listener);\n+\n+        logger.info(\"testNotYetInitializedLeaderElectionid: waiting 2sec, listener should not get anything yet\");\n+        assertEquals(0, discoveryService.getViewStateManager().waitForAsyncEvents(2000));\n+        assertEquals(0, listener.countEvents());\n+\n+        logger.info(\"testNotYetInitializedLeaderElectionid: issuing 2 heartbeats with each instance should let the topology get established\");\n+        instance1.heartbeatsAndCheckView();\n+        instance1.heartbeatsAndCheckView();\n+\n+        logger.info(\"testNotYetInitializedLeaderElectionid: listener should get an event within 2sec from now at latest\");\n+        assertEquals(0, discoveryService.getViewStateManager().waitForAsyncEvents(2000));\n+        assertEquals(1, listener.countEvents());\n+\n+        SimulatedLeaseCollection c = builder1.getSimulatedLeaseCollection();\n+        String secondSlingId = UUID.randomUUID().toString();\n+        final SimulatedLease newIncomingInstance = new SimulatedLease(instance1.getResourceResolverFactory(), c, secondSlingId);\n+        c.hooked(newIncomingInstance);\n+        c.incSeqNum(1);\n+        newIncomingInstance.updateLeaseAndDescriptor(new OakTestConfig());\n+        \n+        logger.info(\"testNotYetInitializedLeaderElectionid: issuing another 2 heartbeats\");\n+        instance1.heartbeatsAndCheckView();\n+        instance1.heartbeatsAndCheckView();\n+        \n+        // there are different properties that an instance must set in the repository such that it finally becomes visible.\n+        // these include:\n+        // 1) idmap : it must map the oak id to sling id\n+        // 2) node named after its own slingId under /var/discovery/oak/clusterInstances/<slingId>\n+        // 3) store the leaderElectionId under /var/discovery/oak/clusterInstances/<slingId>\n+        // in all 3 cases the code must work fine if that node/property doesn't exist\n+        // and that's exactly what we're testing here.\n+\n+\n+        // initially not even the idmap is updated, so we're stuck with TOPOLOGY_CHANGING\n+\n+        // due to the nature of the syncService/minEventDelay we now explicitly first sleep 2sec before waiting for async events for another 2sec\n+        logger.info(\"testNotYetInitializedLeaderElectionid: sleeping 2sec for topology change to happen\");\n+        Thread.sleep(2000);\n+        logger.info(\"testNotYetInitializedLeaderElectionid: ensuring no async events are still in the pipe - for another 2sec\");\n+        assertEquals(0, discoveryService.getViewStateManager().waitForAsyncEvents(2000));\n+        logger.info(\"testNotYetInitializedLeaderElectionid: now listener should have received 2 events, INIT and CHANGING, it got: \"+listener.countEvents());\n+        assertEquals(2, listener.countEvents());\n+        List<TopologyEvent> events = listener.getEvents();\n+        assertEquals(TopologyEvent.Type.TOPOLOGY_INIT, events.get(0).getType());\n+        assertEquals(TopologyEvent.Type.TOPOLOGY_CHANGING, events.get(1).getType());\n+        \n+        // let's update the idmap first then\n+        DummyResourceResolverFactory factory1 = (DummyResourceResolverFactory) instance1.getResourceResolverFactory();\n+        ResourceResolverFactory factory2 = MockFactory.mockResourceResolverFactory(factory1.getSlingRepository());\n+\n+        ResourceResolver resourceResolver = getResourceResolver(instance1.getResourceResolverFactory());\n+        DiscoveryLiteDescriptor descriptor =\n+                DiscoveryLiteDescriptor.getDescriptorFrom(resourceResolver);\n+        resourceResolver.close();\n+        \n+        DiscoveryLiteDescriptorBuilder dlb = prefill(descriptor);\n+        dlb.me(2);\n+        DescriptorHelper.setDiscoveryLiteDescriptor(factory2, dlb);\n+\n+        IdMapService secondIdMapService = IdMapService.testConstructor((DiscoveryLiteConfig) builder1.getConnectorConfig(), new DummySlingSettingsService(secondSlingId), factory2);\n+        \n+        instance1.heartbeatsAndCheckView();\n+        instance1.heartbeatsAndCheckView();\n+        Thread.sleep(2000);\n+        assertEquals(2, listener.countEvents());\n+        \n+        \n+        // now let's add the /var/discovery/oak/clusterInstances/<slingId> node\n+        resourceResolver = getResourceResolver(factory2);\n+        Resource clusterInstancesRes = resourceResolver.getResource(builder1.getConnectorConfig().getClusterInstancesPath());\n+        assertNull(clusterInstancesRes.getChild(secondSlingId));\n+        resourceResolver.create(clusterInstancesRes, secondSlingId, null);\n+        resourceResolver.commit();\n+        assertNotNull(clusterInstancesRes.getChild(secondSlingId));\n+        resourceResolver.close();\n+\n+        instance1.heartbeatsAndCheckView();\n+        instance1.heartbeatsAndCheckView();\n+        Thread.sleep(2000);\n+        assertEquals(2, listener.countEvents());\n+\n+        // now let's add the leaderElectionId\n+        resourceResolver = getResourceResolver(factory2);\n+        Resource instanceResource = resourceResolver.getResource(builder1.getConnectorConfig().getClusterInstancesPath() + \"/\" + secondSlingId);\n+        assertNotNull(instanceResource);\n+        instanceResource.adaptTo(ModifiableValueMap.class).put(\"leaderElectionId\", \"0\");\n+        resourceResolver.commit();\n+        resourceResolver.close();\n+        \n+        instance1.heartbeatsAndCheckView();\n+        instance1.heartbeatsAndCheckView();\n+        Thread.sleep(2000);\n+        assertEquals(3, listener.countEvents());\n+        assertEquals(TopologyEvent.Type.TOPOLOGY_CHANGED, events.get(2).getType());\n+    }\n+\n+    private DiscoveryLiteDescriptorBuilder prefill(DiscoveryLiteDescriptor d) throws Exception {\n+        DiscoveryLiteDescriptorBuilder b = new DiscoveryLiteDescriptorBuilder();\n+        b.setFinal(true);\n+        long seqnum = d.getSeqNum();\n+        b.seq((int) seqnum);\n+        b.activeIds(box(d.getActiveIds()));\n+        b.deactivatingIds(box(d.getDeactivatingIds()));\n+        b.me(d.getMyId());\n+        b.id(d.getViewId());\n+        return b;\n+    }\n+\n+    private Integer[] box(final int[] ids) {\n+        //TODO: use Guava\n+        List<Integer> list = new ArrayList<Integer>(ids.length);\n+        for (Integer i : ids) {\n+            list.add(i);\n+        }\n+        return list.toArray(new Integer[list.size()]);\n+    }\n+    \n+    private ResourceResolver getResourceResolver(ResourceResolverFactory resourceResolverFactory) throws LoginException {\n+        return resourceResolverFactory.getServiceResourceResolver(null);\n+    }\n }",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-discovery-oak/raw/b18eef58389cb6205c7f236dbc7669948a4a93cc/src/test/java/org/apache/sling/discovery/oak/OakDiscoveryServiceTest.java",
                "sha": "4a41e7fa2a9bbca98cbd307e0973859fe07f5444",
                "status": "modified"
            }
        ],
        "message": "SLING-6924 : avoid harmless error message when new instance joins : a slowly starting new instance might first be visible via discovery-lite before it sets the leaderElectionid property - if that's the case there used to be a NPE - which is harmless but not nice as its an error\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1800761 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/sling-org-apache-sling-discovery-oak/commit/9cd976d69b447af59faf8d8da470dd8c204d6747",
        "patched_files": [
            "OakDiscoveryService.java",
            "pom.java",
            "OakClusterViewService.java"
        ],
        "repo": "sling-org-apache-sling-discovery-oak",
        "unit_tests": [
            "OakDiscoveryServiceTest.java"
        ]
    }
}