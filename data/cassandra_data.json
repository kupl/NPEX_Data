[{"commit": "https://github.com/apache/cassandra/commit/2374a74eba6a4df84f9bda3fd311916c820e9cd6", "parent": "https://github.com/apache/cassandra/commit/50608af522f54976254edc4fe49525fcb82abd71", "message": "Fix NPE when using allocate_tokens_for_keyspace on new DC/rack\n\n patch by Jaydeepkumar Chovatia; reviewed by Mick Semb Wever for CASSANDRA-14592", "bug_id": "cassandra_1", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/2374a74eba6a4df84f9bda3fd311916c820e9cd6/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/2374a74eba6a4df84f9bda3fd311916c820e9cd6/CHANGES.txt", "sha": "e4f4d22d58739949a89f85293e68d10a80ef7f49", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=2374a74eba6a4df84f9bda3fd311916c820e9cd6", "patch": "@@ -1,4 +1,5 @@\n 3.0.19\n+ * Fix NPE when using allocate_tokens_for_keyspace on new DC/rack (CASSANDRA-14592)\n  * Filter sstables earlier when running cleanup (CASSANDRA-15100)\n  * Use mean row count instead of mean column count for index selectivity calculation (CASSANDRA-15259)\n  * Avoid updating unchanged gossip states (CASSANDRA-15097)", "filename": "CHANGES.txt"}, {"additions": 5, "raw_url": "https://github.com/apache/cassandra/raw/2374a74eba6a4df84f9bda3fd311916c820e9cd6/src/java/org/apache/cassandra/dht/tokenallocator/TokenAllocation.java", "blob_url": "https://github.com/apache/cassandra/blob/2374a74eba6a4df84f9bda3fd311916c820e9cd6/src/java/org/apache/cassandra/dht/tokenallocator/TokenAllocation.java", "sha": "5501378c60e0a75216e5e609a70644c5f040f3ef", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/dht/tokenallocator/TokenAllocation.java?ref=2374a74eba6a4df84f9bda3fd311916c820e9cd6", "patch": "@@ -199,7 +199,11 @@ static StrategyAdapter getStrategy(final TokenMetadata tokenMetadata, final Netw\n         final int replicas = rs.getReplicationFactor(dc);\n \n         Topology topology = tokenMetadata.getTopology();\n-        int racks = topology.getDatacenterRacks().get(dc).asMap().size();\n+\n+        // if topology hasn't been setup yet for this endpoint+rack then treat it as a separate unit\n+        int racks = topology.getDatacenterRacks().get(dc) != null && topology.getDatacenterRacks().get(dc).containsKey(snitch.getRack(endpoint))\n+                ? topology.getDatacenterRacks().get(dc).asMap().size()\n+                : 1;\n \n         if (racks >= replicas)\n         {", "filename": "src/java/org/apache/cassandra/dht/tokenallocator/TokenAllocation.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/527514109469b925ee310abf06848c8eb484da13", "parent": "https://github.com/apache/cassandra/commit/7d2c3c215f65ee41f86886304257647fc24b1f70", "message": "ninja: fix CASSANDRA-15078 NPE", "bug_id": "cassandra_2", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/527514109469b925ee310abf06848c8eb484da13/test/distributed/org/apache/cassandra/distributed/impl/AbstractCluster.java", "blob_url": "https://github.com/apache/cassandra/blob/527514109469b925ee310abf06848c8eb484da13/test/distributed/org/apache/cassandra/distributed/impl/AbstractCluster.java", "sha": "c27d9bf2d8924b8bff592d004399c8e8a1fbbb56", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/distributed/org/apache/cassandra/distributed/impl/AbstractCluster.java?ref=527514109469b925ee310abf06848c8eb484da13", "patch": "@@ -141,7 +141,7 @@ public synchronized void startup()\n         {\n             if (!isShutdown)\n                 throw new IllegalStateException();\n-            delegate.startup(AbstractCluster.this);\n+            delegate().startup(AbstractCluster.this);\n             isShutdown = false;\n             updateMessagingVersions();\n         }", "filename": "test/distributed/org/apache/cassandra/distributed/impl/AbstractCluster.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae", "parent": "https://github.com/apache/cassandra/commit/d75c438b21678eda3bf8ba3890fd7f61b9673548", "message": "Avoid NPE in fireErrorAndComplete and make sure we log the parentSessionId and exception\n\nPatch by marcuse; reviewed by Blake Eggleston for CASSANDRA-15025", "bug_id": "cassandra_3", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae/CHANGES.txt", "sha": "7b0675724aaa6dc2799e793bbf35688ac4f6d08d", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae", "patch": "@@ -1,4 +1,5 @@\n 4.0\n+ * Avoid NPE in RepairRunnable.recordFailure (CASSANDRA-15025)\n  * SSL Cert Hot Reloading should check for sanity of the new keystore/truststore before loading it (CASSANDRA-14991)\n  * Avoid leaking threads when failing anticompactions and rate limit anticompactions (CASSANDRA-15002)\n  * Validate token() arguments early instead of throwing NPE at execution (CASSANDRA-14989)", "filename": "CHANGES.txt"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae/src/java/org/apache/cassandra/repair/CommonRange.java", "blob_url": "https://github.com/apache/cassandra/blob/98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae/src/java/org/apache/cassandra/repair/CommonRange.java", "sha": "dab77c51346c9dbbd33e485fd6e3020e286cc33d", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/repair/CommonRange.java?ref=98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae", "patch": "@@ -41,10 +41,10 @@\n \n     public CommonRange(Set<InetAddressAndPort> endpoints, Set<InetAddressAndPort> transEndpoints, Collection<Range<Token>> ranges)\n     {\n-        Preconditions.checkArgument(endpoints != null && !endpoints.isEmpty());\n-        Preconditions.checkArgument(transEndpoints != null);\n+        Preconditions.checkArgument(endpoints != null && !endpoints.isEmpty(), \"Endpoints can not be empty\");\n+        Preconditions.checkArgument(transEndpoints != null, \"Transient endpoints can not be null\");\n         Preconditions.checkArgument(endpoints.containsAll(transEndpoints), \"transEndpoints must be a subset of endpoints\");\n-        Preconditions.checkArgument(ranges != null && !ranges.isEmpty());\n+        Preconditions.checkArgument(ranges != null && !ranges.isEmpty(), \"Ranges can not be empty\");\n \n         this.endpoints = ImmutableSet.copyOf(endpoints);\n         this.transEndpoints = ImmutableSet.copyOf(transEndpoints);", "filename": "src/java/org/apache/cassandra/repair/CommonRange.java"}, {"additions": 11, "raw_url": "https://github.com/apache/cassandra/raw/98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae/src/java/org/apache/cassandra/repair/RepairRunnable.java", "blob_url": "https://github.com/apache/cassandra/blob/98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae/src/java/org/apache/cassandra/repair/RepairRunnable.java", "sha": "7e931e81caab722c6d00e471ab096d524bea847d", "changes": 16, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/repair/RepairRunnable.java?ref=98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae", "patch": "@@ -133,10 +133,11 @@ protected void fireProgressEvent(ProgressEvent event)\n     protected void fireErrorAndComplete(int progressCount, int totalProgress, String message)\n     {\n         StorageMetrics.repairExceptions.inc();\n-        fireProgressEvent(new ProgressEvent(ProgressEventType.ERROR, progressCount, totalProgress, message));\n+        String errorMessage = String.format(\"Repair command #%d failed with error %s\", cmd, message);\n+        fireProgressEvent(new ProgressEvent(ProgressEventType.ERROR, progressCount, totalProgress, errorMessage));\n         String completionMessage = String.format(\"Repair command #%d finished with error\", cmd);\n         fireProgressEvent(new ProgressEvent(ProgressEventType.COMPLETE, progressCount, totalProgress, completionMessage));\n-        recordFailure(message, completionMessage);\n+        recordFailure(errorMessage, completionMessage);\n     }\n \n \n@@ -159,7 +160,7 @@ protected void runMayThrow() throws Exception\n         }\n         catch (IllegalArgumentException | IOException e)\n         {\n-            logger.error(\"Repair failed:\", e);\n+            logger.error(\"Repair {} failed:\", parentSession, e);\n             fireErrorAndComplete(progress.get(), totalProgress, e.getMessage());\n             return;\n         }\n@@ -216,7 +217,7 @@ protected void runMayThrow() throws Exception\n         }\n         catch (IllegalArgumentException e)\n         {\n-            logger.error(\"Repair failed:\", e);\n+            logger.error(\"Repair {} failed:\", parentSession, e);\n             fireErrorAndComplete(progress.get(), totalProgress, e.getMessage());\n             return;\n         }\n@@ -230,6 +231,7 @@ protected void runMayThrow() throws Exception\n         }\n         catch (IllegalArgumentException e)\n         {\n+            logger.error(\"Repair {} failed:\", parentSession, e);\n             fireErrorAndComplete(progress.get(), totalProgress, e.getMessage());\n             return;\n         }\n@@ -261,6 +263,7 @@ protected void runMayThrow() throws Exception\n         }\n         catch (Throwable t)\n         {\n+            logger.error(\"Repair {} failed:\", parentSession, t);\n             if (!options.isPreview())\n             {\n                 SystemDistributedKeyspace.failParentRepair(parentSession, t);\n@@ -639,8 +642,11 @@ private void recordFailure(String failureMessage, String completionMessage)\n     {\n         // Note we rely on the first message being the reason for the failure\n         // when inspecting this state from RepairRunner.queryForCompletedRepair\n+        String failure = failureMessage == null ? \"unknown failure\" : failureMessage;\n+        String completion = completionMessage == null ? \"unknown completion\" : completionMessage;\n+\n         ActiveRepairService.instance.recordRepairStatus(cmd, ActiveRepairService.ParentRepairStatus.FAILED,\n-                                               ImmutableList.of(failureMessage, completionMessage));\n+                                               ImmutableList.of(failure, completion));\n     }\n \n     private static void addRangeToNeighbors(List<CommonRange> neighborRangeList, Range<Token> range, EndpointsForRange neighbors)", "filename": "src/java/org/apache/cassandra/repair/RepairRunnable.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/174cf761f7897443080b8a840b649b7eab17ae25", "parent": "https://github.com/apache/cassandra/commit/7d138e20ea987d44fffbc47de4674b253b7431ff", "message": "Validate token() arguments early instead of throwing NPE at execution\n\npatch by Dinesh Joshi; reviewed by Aleksey Yeschenko and Jon Meredith\nfor CASSANDRA-14989", "bug_id": "cassandra_4", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/174cf761f7897443080b8a840b649b7eab17ae25/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/174cf761f7897443080b8a840b649b7eab17ae25/CHANGES.txt", "sha": "852cccf248542d881a1e5d1962c4f374975a4ae5", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=174cf761f7897443080b8a840b649b7eab17ae25", "patch": "@@ -1,4 +1,5 @@\n 4.0\n+ * Validate token() arguments early instead of throwing NPE at execution (CASSANDRA-14989)\n  * Add a new tool to dump audit logs (CASSANDRA-14885)\n  * Fix generating javadoc with Java11 (CASSANDRA-14988)\n  * Only cancel conflicting compactions when starting anticompactions and sub range compactions (CASSANDRA-14935)", "filename": "CHANGES.txt"}, {"additions": 37, "raw_url": "https://github.com/apache/cassandra/raw/174cf761f7897443080b8a840b649b7eab17ae25/src/java/org/apache/cassandra/cql3/functions/FunctionResolver.java", "blob_url": "https://github.com/apache/cassandra/blob/174cf761f7897443080b8a840b649b7eab17ae25/src/java/org/apache/cassandra/cql3/functions/FunctionResolver.java", "sha": "ae5d17eff6e1bfd21064f5100cdb9a69b220f841", "changes": 52, "status": "modified", "deletions": 15, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/functions/FunctionResolver.java?ref=174cf761f7897443080b8a840b649b7eab17ae25", "patch": "@@ -69,8 +69,32 @@ public static Function get(String keyspace,\n                                AbstractType<?> receiverType)\n     throws InvalidRequestException\n     {\n+        Collection<Function> candidates = collectCandidates(keyspace, name, receiverKs, receiverCf, receiverType);\n+\n+        if (candidates.isEmpty())\n+            return null;\n+\n+        // Fast path if there is only one choice\n+        if (candidates.size() == 1)\n+        {\n+            Function fun = candidates.iterator().next();\n+            validateTypes(keyspace, fun, providedArgs, receiverKs, receiverCf);\n+            return fun;\n+        }\n+\n+        return pickBestMatch(keyspace, name, providedArgs, receiverKs, receiverCf, receiverType, candidates);\n+    }\n+\n+    private static Collection<Function> collectCandidates(String keyspace,\n+                                                          FunctionName name,\n+                                                          String receiverKs,\n+                                                          String receiverCf,\n+                                                          AbstractType<?> receiverType)\n+    {\n+        Collection<Function> candidates = new ArrayList<>();\n+\n         if (name.equalsNativeFunction(TOKEN_FUNCTION_NAME))\n-            return new TokenFct(Schema.instance.getTableMetadata(receiverKs, receiverCf));\n+            candidates.add(new TokenFct(Schema.instance.getTableMetadata(receiverKs, receiverCf)));\n \n         // The toJson() function can accept any type of argument, so instances of it are not pre-declared.  Instead,\n         // we create new instances as needed while handling selectors (which is the only place that toJson() is supported,\n@@ -83,14 +107,12 @@ public static Function get(String keyspace,\n         {\n             if (receiverType == null)\n                 throw new InvalidRequestException(\"fromJson() cannot be used in the selection clause of a SELECT statement\");\n-            return FromJsonFct.getInstance(receiverType);\n+            candidates.add(FromJsonFct.getInstance(receiverType));\n         }\n \n-        Collection<Function> candidates;\n         if (!name.hasKeyspace())\n         {\n             // function name not fully qualified\n-            candidates = new ArrayList<>();\n             // add 'SYSTEM' (native) candidates\n             candidates.addAll(Schema.instance.getFunctions(name.asNativeFunction()));\n             // add 'current keyspace' candidates\n@@ -99,20 +121,19 @@ public static Function get(String keyspace,\n         else\n         {\n             // function name is fully qualified (keyspace + name)\n-            candidates = Schema.instance.getFunctions(name);\n+            candidates.addAll(Schema.instance.getFunctions(name));\n         }\n \n-        if (candidates.isEmpty())\n-            return null;\n-\n-        // Fast path if there is only one choice\n-        if (candidates.size() == 1)\n-        {\n-            Function fun = candidates.iterator().next();\n-            validateTypes(keyspace, fun, providedArgs, receiverKs, receiverCf);\n-            return fun;\n-        }\n+        return candidates;\n+    }\n \n+    private static Function pickBestMatch(String keyspace,\n+                                          FunctionName name,\n+                                          List<? extends AssignmentTestable> providedArgs,\n+                                          String receiverKs,\n+                                          String receiverCf, AbstractType<?> receiverType,\n+                                          Collection<Function> candidates)\n+    {\n         List<Function> compatibles = null;\n         for (Function toTest : candidates)\n         {\n@@ -166,6 +187,7 @@ public static Function get(String keyspace,\n             throw invalidRequest(\"Ambiguous call to function %s (can be matched by following signatures: %s): use type casts to disambiguate\",\n                                  name, format(compatibles));\n         }\n+\n         return compatibles.get(0);\n     }\n ", "filename": "src/java/org/apache/cassandra/cql3/functions/FunctionResolver.java"}, {"additions": 73, "raw_url": "https://github.com/apache/cassandra/raw/174cf761f7897443080b8a840b649b7eab17ae25/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java", "blob_url": "https://github.com/apache/cassandra/blob/174cf761f7897443080b8a840b649b7eab17ae25/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java", "sha": "d7c1e251005fabaf755bf3d08dbd29ee2979e0d8", "changes": 73, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java?ref=174cf761f7897443080b8a840b649b7eab17ae25", "patch": "@@ -3086,4 +3086,77 @@ public void testMixedTTLOnColumnsWide() throws Throwable\n         }\n     }\n \n+    @Test // CASSANDRA-14989\n+    public void testTokenFctAcceptsValidArguments() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (k1 uuid, k2 text, PRIMARY KEY ((k1, k2)))\");\n+        execute(\"INSERT INTO %s (k1, k2) VALUES (uuid(), 'k2')\");\n+        assertRowCount(execute(\"SELECT token(k1, k2) FROM %s\"), 1);\n+    }\n+\n+    @Test\n+    public void testTokenFctRejectsInvalidColumnName() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (k1 uuid, k2 text, PRIMARY KEY ((k1, k2)))\");\n+        execute(\"INSERT INTO %s (k1, k2) VALUES (uuid(), 'k2')\");\n+        assertInvalidMessage(\"Undefined column name \", \"SELECT token(s1, k1) FROM %s\");\n+    }\n+\n+    @Test\n+    public void testTokenFctRejectsInvalidColumnType() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (k1 uuid, k2 text, PRIMARY KEY ((k1, k2)))\");\n+        execute(\"INSERT INTO %s (k1, k2) VALUES (uuid(), 'k2')\");\n+        assertInvalidMessage(\"Type error: k2 cannot be passed as argument 0 of function system.token of type uuid\",\n+                             \"SELECT token(k2, k1) FROM %s\");\n+    }\n+\n+    @Test\n+    public void testTokenFctRejectsInvalidColumnCount() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (k1 uuid, k2 text, PRIMARY KEY ((k1, k2)))\");\n+        execute(\"INSERT INTO %s (k1, k2) VALUES (uuid(), 'k2')\");\n+        assertInvalidMessage(\"Invalid number of arguments in call to function system.token: 2 required but 1 provided\",\n+                             \"SELECT token(k1) FROM %s\");\n+    }\n+\n+    @Test\n+    public void testCreatingUDFWithSameNameAsBuiltin_PrefersCompatibleArgs_SameKeyspace() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (k1 uuid, k2 text, PRIMARY KEY ((k1, k2)))\");\n+        createFunctionOverload(KEYSPACE + \".token\", \"double\",\n+                               \"CREATE FUNCTION %s (val double) RETURNS null ON null INPUT RETURNS double LANGUAGE java AS 'return 10.0d;'\");\n+        execute(\"INSERT INTO %s (k1, k2) VALUES (uuid(), 'k2')\");\n+        assertRows(execute(\"SELECT token(10) FROM %s\"), row(10.0d));\n+    }\n+\n+    @Test\n+    public void testCreatingUDFWithSameNameAsBuiltin_FullyQualifiedFunctionNameWorks() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (k1 uuid, k2 text, PRIMARY KEY ((k1, k2)))\");\n+        createFunctionOverload(KEYSPACE + \".token\", \"double\",\n+                               \"CREATE FUNCTION %s (val double) RETURNS null ON null INPUT RETURNS double LANGUAGE java AS 'return 10.0d;'\");\n+        execute(\"INSERT INTO %s (k1, k2) VALUES (uuid(), 'k2')\");\n+        assertRows(execute(\"SELECT \" + KEYSPACE + \".token(10) FROM %s\"), row(10.0d));\n+    }\n+\n+    @Test\n+    public void testCreatingUDFWithSameNameAsBuiltin_PrefersCompatibleArgs() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (k1 uuid, k2 text, PRIMARY KEY ((k1, k2)))\");\n+        createFunctionOverload(KEYSPACE + \".token\", \"double\",\n+                               \"CREATE FUNCTION %s (val double) RETURNS null ON null INPUT RETURNS double LANGUAGE java AS 'return 10.0d;'\");\n+        execute(\"INSERT INTO %s (k1, k2) VALUES (uuid(), 'k2')\");\n+        assertRowCount(execute(\"SELECT token(k1, k2) FROM %s\"), 1);\n+    }\n+\n+    @Test\n+    public void testCreatingUDFWithSameNameAsBuiltin_FullyQualifiedFunctionNameWorks_SystemKeyspace() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (k1 uuid, k2 text, PRIMARY KEY ((k1, k2)))\");\n+        createFunctionOverload(KEYSPACE + \".token\", \"double\",\n+                               \"CREATE FUNCTION %s (val double) RETURNS null ON null INPUT RETURNS double LANGUAGE java AS 'return 10.0d;'\");\n+        execute(\"INSERT INTO %s (k1, k2) VALUES (uuid(), 'k2')\");\n+        assertRowCount(execute(\"SELECT system.token(k1, k2) FROM %s\"), 1);\n+    }\n }", "filename": "test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/71a27ee2b93a47e177edc16571f91bb5d592899e", "parent": "https://github.com/apache/cassandra/commit/4e744e7688e01d35a6acac1cf8a7a3ff2573836f", "message": "This commit fixes NPE when the 'insert' section is missing from user-defined profile\n\nFixes #221\n\nPatch by Alex Ott; Reviewed by Jeff Jirsa for CASSANDRA-14426", "bug_id": "cassandra_5", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/71a27ee2b93a47e177edc16571f91bb5d592899e/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/71a27ee2b93a47e177edc16571f91bb5d592899e/CHANGES.txt", "sha": "15c2c2e95f4fd7449657f2ee749e30d4d0ef5957", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=71a27ee2b93a47e177edc16571f91bb5d592899e", "patch": "@@ -1,4 +1,5 @@\n 4.0\n+ * cassandra-stress throws NPE if insert section isn't specified in user profile (CASSSANDRA-14426)\n  * Improve LatencyMetrics performance by reducing write path processing (CASSANDRA-14281)\n  * Add network authz (CASSANDRA-13985)\n  * Use the correct IP/Port for Streaming when localAddress is left unbound (CASSANDAR-14389)", "filename": "CHANGES.txt"}, {"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/71a27ee2b93a47e177edc16571f91bb5d592899e/tools/stress/src/org/apache/cassandra/stress/StressProfile.java", "blob_url": "https://github.com/apache/cassandra/blob/71a27ee2b93a47e177edc16571f91bb5d592899e/tools/stress/src/org/apache/cassandra/stress/StressProfile.java", "sha": "2338873a8de8a6ad19fed68cae980ff1bf2ff523", "changes": 8, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/tools/stress/src/org/apache/cassandra/stress/StressProfile.java?ref=71a27ee2b93a47e177edc16571f91bb5d592899e", "patch": "@@ -499,6 +499,10 @@ public SchemaInsert getInsert(Timer timer, PartitionGenerator generator, SeedMan\n                         }\n                     }\n \n+                    if (insert == null)\n+                        insert = new HashMap<>();\n+                    lowerCase(insert);\n+\n                     //Non PK Columns\n                     StringBuilder sb = new StringBuilder();\n                     if (!isKeyOnlyTable)\n@@ -563,10 +567,6 @@ public SchemaInsert getInsert(Timer timer, PartitionGenerator generator, SeedMan\n                         sb.append(\") \").append(\"values(\").append(value).append(')');\n                     }\n \n-                    if (insert == null)\n-                        insert = new HashMap<>();\n-                    lowerCase(insert);\n-\n                     partitions = select(settings.insert.batchsize, \"partitions\", \"fixed(1)\", insert, OptionDistribution.BUILDER);\n                     selectchance = select(settings.insert.selectRatio, \"select\", \"fixed(1)/1\", insert, OptionRatioDistribution.BUILDER);\n                     rowPopulation = select(settings.insert.rowPopulationRatio, \"row-population\", \"fixed(1)/1\", insert, OptionRatioDistribution.BUILDER);", "filename": "tools/stress/src/org/apache/cassandra/stress/StressProfile.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/2c150980cc1bfea81fd039f304e74fc2fb30fb45", "parent": "https://github.com/apache/cassandra/commit/d7740052ff6cee74fb6ab973f1052422180d75bc", "message": "Fix NPE when performing comparison against a null frozen in LWT\n\nPatch by Kurt Greaves; Reviewed by Blake Eggleston for CASSANDRA-14087", "bug_id": "cassandra_6", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/2c150980cc1bfea81fd039f304e74fc2fb30fb45/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/2c150980cc1bfea81fd039f304e74fc2fb30fb45/CHANGES.txt", "sha": "9c6a853d11c09a8f06588027fb2add3252bb8f00", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=2c150980cc1bfea81fd039f304e74fc2fb30fb45", "patch": "@@ -1,4 +1,5 @@\n 3.0.17\n+ * Fix NPE when performing comparison against a null frozen in LWT (CASSANDRA-14087)\n  * Log when SSTables are deleted (CASSANDRA-14302)\n  * Fix batch commitlog sync regression (CASSANDRA-14292)\n  * Write to pending endpoint when view replica is also base replica (CASSANDRA-14251)", "filename": "CHANGES.txt"}, {"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/2c150980cc1bfea81fd039f304e74fc2fb30fb45/src/java/org/apache/cassandra/cql3/ColumnCondition.java", "blob_url": "https://github.com/apache/cassandra/blob/2c150980cc1bfea81fd039f304e74fc2fb30fb45/src/java/org/apache/cassandra/cql3/ColumnCondition.java", "sha": "c3a3af715b40c11b88383c46929ab6abc26416ce", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/ColumnCondition.java?ref=2c150980cc1bfea81fd039f304e74fc2fb30fb45", "patch": "@@ -513,6 +513,10 @@ else if (operator == Operator.NEQ)\n                 else\n                     throw new InvalidRequestException(String.format(\"Invalid comparison with null for operator \\\"%s\\\"\", operator));\n             }\n+            else if (cell == null) // cell is null but condition has a value\n+            {\n+                return false;\n+            }\n \n             // make sure we use v3 serialization format for comparison\n             ByteBuffer conditionValue;", "filename": "src/java/org/apache/cassandra/cql3/ColumnCondition.java"}, {"additions": 18, "raw_url": "https://github.com/apache/cassandra/raw/2c150980cc1bfea81fd039f304e74fc2fb30fb45/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java", "blob_url": "https://github.com/apache/cassandra/blob/2c150980cc1bfea81fd039f304e74fc2fb30fb45/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java", "sha": "a47691a1da119f2eb9465dd88e9bbd247880530a", "changes": 18, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java?ref=2c150980cc1bfea81fd039f304e74fc2fb30fb45", "patch": "@@ -871,6 +871,24 @@ public void testMapItem() throws Throwable\n         }\n     }\n \n+    @Test\n+    public void testFrozenWithNullValues() throws Throwable\n+    {\n+        createTable(String.format(\"CREATE TABLE %%s (k int PRIMARY KEY, m %s)\", \"frozen<list<text>>\"));\n+        execute(\"INSERT INTO %s (k, m) VALUES (0, null)\");\n+\n+        assertRows(execute(\"UPDATE %s SET m = ? WHERE k = 0 IF m = ?\", list(\"test\"), list(\"comparison\")), row(false, null));\n+\n+        createTable(String.format(\"CREATE TABLE %%s (k int PRIMARY KEY, m %s)\", \"frozen<map<text,int>>\"));\n+        execute(\"INSERT INTO %s (k, m) VALUES (0, null)\");\n+\n+        assertRows(execute(\"UPDATE %s SET m = ? WHERE k = 0 IF m = ?\", map(\"test\", 3), map(\"comparison\", 2)), row(false, null));\n+\n+        createTable(String.format(\"CREATE TABLE %%s (k int PRIMARY KEY, m %s)\", \"frozen<set<text>>\"));\n+        execute(\"INSERT INTO %s (k, m) VALUES (0, null)\");\n+\n+        assertRows(execute(\"UPDATE %s SET m = ? WHERE k = 0 IF m = ?\", set(\"test\"), set(\"comparison\")), row(false, null));\n+    }\n     /**\n      * Test expanded functionality from CASSANDRA-6839,\n      * migrated from cql_tests.py:TestCQL.expanded_map_item_conditional_test()", "filename": "test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/633babf0f02fac56cad7bff03a4ff415feb38f39", "parent": "https://github.com/apache/cassandra/commit/56ea68ef7240982f71b73238c7b1b0c9c3ba28ed", "message": "Fix NPE after CASSANDRA-12929", "bug_id": "cassandra_7", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/633babf0f02fac56cad7bff03a4ff415feb38f39/src/java/org/apache/cassandra/streaming/StreamSession.java", "blob_url": "https://github.com/apache/cassandra/blob/633babf0f02fac56cad7bff03a4ff415feb38f39/src/java/org/apache/cassandra/streaming/StreamSession.java", "sha": "bfae0bf8c21ea33eda33407210a43dbef133553d", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamSession.java?ref=633babf0f02fac56cad7bff03a4ff415feb38f39", "patch": "@@ -241,7 +241,7 @@ public LifecycleTransaction getTransaction(TableId tableId)\n     private boolean isKeepAliveSupported()\n     {\n         CassandraVersion peerVersion = Gossiper.instance.getReleaseVersion(peer);\n-        return peerVersion.compareTo(STREAM_KEEP_ALIVE_VERSION) >= 0;\n+        return peerVersion != null && peerVersion.compareTo(STREAM_KEEP_ALIVE_VERSION) >= 0;\n     }\n \n     /**", "filename": "src/java/org/apache/cassandra/streaming/StreamSession.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/a586f6c88dab173663b765261d084ed8410efe81", "parent": "https://github.com/apache/cassandra/commit/12103653f313d6f1ef030a535986123ddcffea9c", "message": "Improve config validation and documentation on overflow and NPE\n\npatch by Zhao Yang; reviewed by Kurt Greaves for CASSANDRA-13622", "bug_id": "cassandra_8", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/a586f6c88dab173663b765261d084ed8410efe81/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/a586f6c88dab173663b765261d084ed8410efe81/CHANGES.txt", "sha": "6053117a109033b785aa7abed23b6eef0a1400d8", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=a586f6c88dab173663b765261d084ed8410efe81", "patch": "@@ -1,5 +1,6 @@\n 3.0.15\n  * Fix pending view mutations handling and cleanup batchlog when there are local and remote paired mutations (CASSANDRA-13069)\n+ * Improve config validation and documentation on overflow and NPE (CASSANDRA-13622)\n  * Range deletes in a CAS batch are ignored (CASSANDRA-13655)\n  * Change repair midpoint logging for tiny ranges (CASSANDRA-13603)\n  * Better handle corrupt final commitlog segment (CASSANDRA-11995)", "filename": "CHANGES.txt"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/a586f6c88dab173663b765261d084ed8410efe81/conf/cassandra.yaml", "blob_url": "https://github.com/apache/cassandra/blob/a586f6c88dab173663b765261d084ed8410efe81/conf/cassandra.yaml", "sha": "d77d27a2f5dd6f5498c6d7e79950e003e0c813c1", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/conf/cassandra.yaml?ref=a586f6c88dab173663b765261d084ed8410efe81", "patch": "@@ -315,6 +315,7 @@ commitlog_sync_period_in_ms: 10000\n # is reasonable.\n # Max mutation size is also configurable via max_mutation_size_in_kb setting in\n # cassandra.yaml. The default is half the size commitlog_segment_size_in_mb * 1024.\n+# This should be positive and less than 2048.\n #\n # NOTE: If max_mutation_size_in_kb is set explicitly then commitlog_segment_size_in_mb must\n # be set to at least twice the size of max_mutation_size_in_kb / 1024\n@@ -517,7 +518,7 @@ native_transport_port: 9042\n #\n # The maximum size of allowed frame. Frame (requests) larger than this will\n # be rejected as invalid. The default is 256MB. If you're changing this parameter,\n-# you may want to adjust max_value_size_in_mb accordingly.\n+# you may want to adjust max_value_size_in_mb accordingly. This should be positive and less than 2048.\n # native_transport_max_frame_size_in_mb: 256\n \n # The maximum number of concurrent client connections.\n@@ -960,7 +961,7 @@ windows_timer_interval: 1\n \n # Maximum size of any value in SSTables. Safety measure to detect SSTable corruption\n # early. Any value size larger than this threshold will result into marking an SSTable\n-# as corrupted.\n+# as corrupted. This should be positive and less than 2048.\n # max_value_size_in_mb: 256\n \n # Coalescing Strategies #", "filename": "conf/cassandra.yaml"}, {"additions": 15, "raw_url": "https://github.com/apache/cassandra/raw/a586f6c88dab173663b765261d084ed8410efe81/src/java/org/apache/cassandra/config/DatabaseDescriptor.java", "blob_url": "https://github.com/apache/cassandra/blob/a586f6c88dab173663b765261d084ed8410efe81/src/java/org/apache/cassandra/config/DatabaseDescriptor.java", "sha": "029db89cd940dd95d2b3848ef1e697a89cc79c6c", "changes": 15, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=a586f6c88dab173663b765261d084ed8410efe81", "patch": "@@ -442,6 +442,9 @@ else if (conf.disk_access_mode == Config.DiskAccessMode.mmap_index_only)\n \n         if (conf.native_transport_max_frame_size_in_mb <= 0)\n             throw new ConfigurationException(\"native_transport_max_frame_size_in_mb must be positive, but was \" + conf.native_transport_max_frame_size_in_mb, false);\n+        else if (conf.native_transport_max_frame_size_in_mb >= 2048)\n+            throw new ConfigurationException(\"native_transport_max_frame_size_in_mb must be smaller than 2048, but was \"\n+                    + conf.native_transport_max_frame_size_in_mb, false);\n \n         // fail early instead of OOMing (see CASSANDRA-8116)\n         if (ThriftServer.HSHA.equals(conf.rpc_server_type) && conf.rpc_max_threads == Integer.MAX_VALUE)\n@@ -576,6 +579,8 @@ public int compare(InetAddress endpoint1, InetAddress endpoint2)\n         /* data file and commit log directories. they get created later, when they're needed. */\n         for (String datadir : conf.data_file_directories)\n         {\n+            if (datadir == null)\n+                throw new ConfigurationException(\"data_file_directories must not contain empty entry\", false);\n             if (datadir.equals(conf.commitlog_directory))\n                 throw new ConfigurationException(\"commitlog_directory must not be the same as any data_file_directories\", false);\n             if (datadir.equals(conf.hints_directory))\n@@ -718,6 +723,13 @@ else if (conf.num_tokens > MAX_NUM_TOKENS)\n         if (conf.user_defined_function_fail_timeout < conf.user_defined_function_warn_timeout)\n             throw new ConfigurationException(\"user_defined_function_warn_timeout must less than user_defined_function_fail_timeout\", false);\n \n+        if (conf.commitlog_segment_size_in_mb <= 0)\n+            throw new ConfigurationException(\"commitlog_segment_size_in_mb must be positive, but was \"\n+                    + conf.commitlog_segment_size_in_mb, false);\n+        else if (conf.commitlog_segment_size_in_mb >= 2048)\n+            throw new ConfigurationException(\"commitlog_segment_size_in_mb must be smaller than 2048, but was \"\n+                    + conf.commitlog_segment_size_in_mb, false);\n+\n         if (conf.max_mutation_size_in_kb == null)\n             conf.max_mutation_size_in_kb = conf.commitlog_segment_size_in_mb * 1024 / 2;\n         else if (conf.commitlog_segment_size_in_mb * 1024 < 2 * conf.max_mutation_size_in_kb)\n@@ -733,6 +745,9 @@ else if (conf.commitlog_segment_size_in_mb * 1024 < 2 * conf.max_mutation_size_i\n \n         if (conf.max_value_size_in_mb == null || conf.max_value_size_in_mb <= 0)\n             throw new ConfigurationException(\"max_value_size_in_mb must be positive\", false);\n+        else if (conf.max_value_size_in_mb >= 2048)\n+            throw new ConfigurationException(\"max_value_size_in_mb must be smaller than 2048, but was \"\n+                    + conf.max_value_size_in_mb, false);\n \n         if (conf.otc_coalescing_enough_coalesced_messages > 128)\n             throw new ConfigurationException(\"otc_coalescing_enough_coalesced_messages must be smaller than 128\", false);", "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java"}, {"additions": 5, "raw_url": "https://github.com/apache/cassandra/raw/a586f6c88dab173663b765261d084ed8410efe81/src/java/org/apache/cassandra/utils/FBUtilities.java", "blob_url": "https://github.com/apache/cassandra/blob/a586f6c88dab173663b765261d084ed8410efe81/src/java/org/apache/cassandra/utils/FBUtilities.java", "sha": "5562f5e22c370f4ec12fba1346e9fc4e820642e3", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/utils/FBUtilities.java?ref=a586f6c88dab173663b765261d084ed8410efe81", "patch": "@@ -34,6 +34,8 @@\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Joiner;\n+import com.google.common.base.Strings;\n+\n import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -82,8 +84,9 @@\n \n     public static int getAvailableProcessors()\n     {\n-        if (System.getProperty(\"cassandra.available_processors\") != null)\n-            return Integer.parseInt(System.getProperty(\"cassandra.available_processors\"));\n+        String availableProcessors = System.getProperty(\"cassandra.available_processors\");\n+        if (!Strings.isNullOrEmpty(availableProcessors))\n+            return Integer.parseInt(availableProcessors);\n         else\n             return Runtime.getRuntime().availableProcessors();\n     }", "filename": "src/java/org/apache/cassandra/utils/FBUtilities.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/8fc9275d3020fa0c80ed1852726be0a5a63e487c", "parent": "https://github.com/apache/cassandra/commit/e86bef4394650dfb96a041533de50c4fbf47bbdb", "message": "Improve config validation and documentation on overflow and NPE\n\npatch by Zhao Yang; reviewed by Kurt Greaves for CASSANDRA-13622", "bug_id": "cassandra_9", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/8fc9275d3020fa0c80ed1852726be0a5a63e487c/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/8fc9275d3020fa0c80ed1852726be0a5a63e487c/CHANGES.txt", "sha": "b00e47c604d83747d35fe81176c70590bee015e5", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=8fc9275d3020fa0c80ed1852726be0a5a63e487c", "patch": "@@ -1,4 +1,5 @@\n 3.0.15\n+ * Improve config validation and documentation on overflow and NPE (CASSANDRA-13622)\n  * Range deletes in a CAS batch are ignored (CASSANDRA-13655)\n  * Change repair midpoint logging for tiny ranges (CASSANDRA-13603)\n  * Better handle corrupt final commitlog segment (CASSANDRA-11995)", "filename": "CHANGES.txt"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/8fc9275d3020fa0c80ed1852726be0a5a63e487c/conf/cassandra.yaml", "blob_url": "https://github.com/apache/cassandra/blob/8fc9275d3020fa0c80ed1852726be0a5a63e487c/conf/cassandra.yaml", "sha": "d77d27a2f5dd6f5498c6d7e79950e003e0c813c1", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/conf/cassandra.yaml?ref=8fc9275d3020fa0c80ed1852726be0a5a63e487c", "patch": "@@ -315,6 +315,7 @@ commitlog_sync_period_in_ms: 10000\n # is reasonable.\n # Max mutation size is also configurable via max_mutation_size_in_kb setting in\n # cassandra.yaml. The default is half the size commitlog_segment_size_in_mb * 1024.\n+# This should be positive and less than 2048.\n #\n # NOTE: If max_mutation_size_in_kb is set explicitly then commitlog_segment_size_in_mb must\n # be set to at least twice the size of max_mutation_size_in_kb / 1024\n@@ -517,7 +518,7 @@ native_transport_port: 9042\n #\n # The maximum size of allowed frame. Frame (requests) larger than this will\n # be rejected as invalid. The default is 256MB. If you're changing this parameter,\n-# you may want to adjust max_value_size_in_mb accordingly.\n+# you may want to adjust max_value_size_in_mb accordingly. This should be positive and less than 2048.\n # native_transport_max_frame_size_in_mb: 256\n \n # The maximum number of concurrent client connections.\n@@ -960,7 +961,7 @@ windows_timer_interval: 1\n \n # Maximum size of any value in SSTables. Safety measure to detect SSTable corruption\n # early. Any value size larger than this threshold will result into marking an SSTable\n-# as corrupted.\n+# as corrupted. This should be positive and less than 2048.\n # max_value_size_in_mb: 256\n \n # Coalescing Strategies #", "filename": "conf/cassandra.yaml"}, {"additions": 15, "raw_url": "https://github.com/apache/cassandra/raw/8fc9275d3020fa0c80ed1852726be0a5a63e487c/src/java/org/apache/cassandra/config/DatabaseDescriptor.java", "blob_url": "https://github.com/apache/cassandra/blob/8fc9275d3020fa0c80ed1852726be0a5a63e487c/src/java/org/apache/cassandra/config/DatabaseDescriptor.java", "sha": "029db89cd940dd95d2b3848ef1e697a89cc79c6c", "changes": 15, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=8fc9275d3020fa0c80ed1852726be0a5a63e487c", "patch": "@@ -442,6 +442,9 @@ else if (conf.disk_access_mode == Config.DiskAccessMode.mmap_index_only)\n \n         if (conf.native_transport_max_frame_size_in_mb <= 0)\n             throw new ConfigurationException(\"native_transport_max_frame_size_in_mb must be positive, but was \" + conf.native_transport_max_frame_size_in_mb, false);\n+        else if (conf.native_transport_max_frame_size_in_mb >= 2048)\n+            throw new ConfigurationException(\"native_transport_max_frame_size_in_mb must be smaller than 2048, but was \"\n+                    + conf.native_transport_max_frame_size_in_mb, false);\n \n         // fail early instead of OOMing (see CASSANDRA-8116)\n         if (ThriftServer.HSHA.equals(conf.rpc_server_type) && conf.rpc_max_threads == Integer.MAX_VALUE)\n@@ -576,6 +579,8 @@ public int compare(InetAddress endpoint1, InetAddress endpoint2)\n         /* data file and commit log directories. they get created later, when they're needed. */\n         for (String datadir : conf.data_file_directories)\n         {\n+            if (datadir == null)\n+                throw new ConfigurationException(\"data_file_directories must not contain empty entry\", false);\n             if (datadir.equals(conf.commitlog_directory))\n                 throw new ConfigurationException(\"commitlog_directory must not be the same as any data_file_directories\", false);\n             if (datadir.equals(conf.hints_directory))\n@@ -718,6 +723,13 @@ else if (conf.num_tokens > MAX_NUM_TOKENS)\n         if (conf.user_defined_function_fail_timeout < conf.user_defined_function_warn_timeout)\n             throw new ConfigurationException(\"user_defined_function_warn_timeout must less than user_defined_function_fail_timeout\", false);\n \n+        if (conf.commitlog_segment_size_in_mb <= 0)\n+            throw new ConfigurationException(\"commitlog_segment_size_in_mb must be positive, but was \"\n+                    + conf.commitlog_segment_size_in_mb, false);\n+        else if (conf.commitlog_segment_size_in_mb >= 2048)\n+            throw new ConfigurationException(\"commitlog_segment_size_in_mb must be smaller than 2048, but was \"\n+                    + conf.commitlog_segment_size_in_mb, false);\n+\n         if (conf.max_mutation_size_in_kb == null)\n             conf.max_mutation_size_in_kb = conf.commitlog_segment_size_in_mb * 1024 / 2;\n         else if (conf.commitlog_segment_size_in_mb * 1024 < 2 * conf.max_mutation_size_in_kb)\n@@ -733,6 +745,9 @@ else if (conf.commitlog_segment_size_in_mb * 1024 < 2 * conf.max_mutation_size_i\n \n         if (conf.max_value_size_in_mb == null || conf.max_value_size_in_mb <= 0)\n             throw new ConfigurationException(\"max_value_size_in_mb must be positive\", false);\n+        else if (conf.max_value_size_in_mb >= 2048)\n+            throw new ConfigurationException(\"max_value_size_in_mb must be smaller than 2048, but was \"\n+                    + conf.max_value_size_in_mb, false);\n \n         if (conf.otc_coalescing_enough_coalesced_messages > 128)\n             throw new ConfigurationException(\"otc_coalescing_enough_coalesced_messages must be smaller than 128\", false);", "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java"}, {"additions": 5, "raw_url": "https://github.com/apache/cassandra/raw/8fc9275d3020fa0c80ed1852726be0a5a63e487c/src/java/org/apache/cassandra/utils/FBUtilities.java", "blob_url": "https://github.com/apache/cassandra/blob/8fc9275d3020fa0c80ed1852726be0a5a63e487c/src/java/org/apache/cassandra/utils/FBUtilities.java", "sha": "5562f5e22c370f4ec12fba1346e9fc4e820642e3", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/utils/FBUtilities.java?ref=8fc9275d3020fa0c80ed1852726be0a5a63e487c", "patch": "@@ -34,6 +34,8 @@\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Joiner;\n+import com.google.common.base.Strings;\n+\n import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -82,8 +84,9 @@\n \n     public static int getAvailableProcessors()\n     {\n-        if (System.getProperty(\"cassandra.available_processors\") != null)\n-            return Integer.parseInt(System.getProperty(\"cassandra.available_processors\"));\n+        String availableProcessors = System.getProperty(\"cassandra.available_processors\");\n+        if (!Strings.isNullOrEmpty(availableProcessors))\n+            return Integer.parseInt(availableProcessors);\n         else\n             return Runtime.getRuntime().availableProcessors();\n     }", "filename": "src/java/org/apache/cassandra/utils/FBUtilities.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/5b982d790bffbf1beb92fd605f6f213914ba4b63", "parent": "https://github.com/apache/cassandra/commit/cb6fad3efcd7cd3dc87d02ca7e8e97eb277a66ab", "message": "Fix potential NPE when resume bootstrap fails\n\npatch by Tim Lamballais; reviewed by Benjamin Lerer for CASSANDRA-13272", "bug_id": "cassandra_10", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/5b982d790bffbf1beb92fd605f6f213914ba4b63/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/5b982d790bffbf1beb92fd605f6f213914ba4b63/CHANGES.txt", "sha": "122ba54cb52efe248c372a22ac34c42db8519b6a", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=5b982d790bffbf1beb92fd605f6f213914ba4b63", "patch": "@@ -1,4 +1,5 @@\n 2.2.11\n+ * Fix potential NPE when resume bootstrap fails (CASSANDRA-13272)\n  * Fix toJSONString for the UDT, tuple and collection types (CASSANDRA-13592)\n  * Fix nested Tuples/UDTs validation (CASSANDRA-13646)\n  * Remove unused max_value_size_in_mb config setting from yaml (CASSANDRA-13625", "filename": "CHANGES.txt"}, {"additions": 10, "raw_url": "https://github.com/apache/cassandra/raw/5b982d790bffbf1beb92fd605f6f213914ba4b63/src/java/org/apache/cassandra/service/StorageService.java", "blob_url": "https://github.com/apache/cassandra/blob/5b982d790bffbf1beb92fd605f6f213914ba4b63/src/java/org/apache/cassandra/service/StorageService.java", "sha": "1ecedacd7c571ede1f8c2ed19cedb6d801e0fbb9", "changes": 12, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=5b982d790bffbf1beb92fd605f6f213914ba4b63", "patch": "@@ -1254,8 +1254,16 @@ public void onSuccess(StreamState streamState)\n                 @Override\n                 public void onFailure(Throwable e)\n                 {\n-                    String message = \"Error during bootstrap: \" + e.getCause().getMessage();\n-                    logger.error(message, e.getCause());\n+                    String message = \"Error during bootstrap: \";\n+                    if (e instanceof ExecutionException && e.getCause() != null)\n+                    {\n+                        message += e.getCause().getMessage();\n+                    }\n+                    else\n+                    {\n+                        message += e.getMessage();\n+                    }\n+                    logger.error(message, e);\n                     progressSupport.progress(\"bootstrap\", new ProgressEvent(ProgressEventType.ERROR, 1, 1, message));\n                     progressSupport.progress(\"bootstrap\", new ProgressEvent(ProgressEventType.COMPLETE, 1, 1, \"Resume bootstrap complete\"));\n                 }", "filename": "src/java/org/apache/cassandra/service/StorageService.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/95c4320baf468c32085676607521e0f33410c351", "parent": "https://github.com/apache/cassandra/commit/88b7126a177a77e28b34384e7792d4b4394cb55f", "message": "avoid chance of NPEs while generating informational strings", "bug_id": "cassandra_11", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/cache/AutoSavingCache.java", "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/cache/AutoSavingCache.java", "sha": "b7616b9b6a5a637eb1175b4f2c0536ebe4f4597a", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cache/AutoSavingCache.java?ref=95c4320baf468c32085676607521e0f33410c351", "patch": "@@ -201,7 +201,7 @@ public int loadSaved()\n                 UUID schemaVersion = new UUID(in.readLong(), in.readLong());\n                 if (!schemaVersion.equals(Schema.instance.getVersion()))\n                     throw new RuntimeException(\"Cache schema version \"\n-                                              + schemaVersion.toString()\n+                                              + schemaVersion\n                                               + \" does not match current schema version \"\n                                               + Schema.instance.getVersion());\n ", "filename": "src/java/org/apache/cassandra/cache/AutoSavingCache.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/cache/ChunkCache.java", "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/cache/ChunkCache.java", "sha": "7e5b9e1ca8d9fc7ee5e3cb43f186d9d3794da325", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cache/ChunkCache.java?ref=95c4320baf468c32085676607521e0f33410c351", "patch": "@@ -289,7 +289,7 @@ public double getCrcCheckChance()\n         @Override\n         public String toString()\n         {\n-            return \"CachingRebufferer:\" + source.toString();\n+            return \"CachingRebufferer:\" + source;\n         }\n     }\n ", "filename": "src/java/org/apache/cassandra/cache/ChunkCache.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/cql3/functions/UDHelper.java", "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/cql3/functions/UDHelper.java", "sha": "935b1b8914d30f39a2f235952315470145c1c46f", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/functions/UDHelper.java?ref=95c4320baf468c32085676607521e0f33410c351", "patch": "@@ -159,7 +159,7 @@ public static Object deserialize(TypeCodec<?> codec, ProtocolVersion protocolVer\n     public static ByteBuffer serialize(TypeCodec<?> codec, ProtocolVersion protocolVersion, Object value)\n     {\n         if (!codec.getJavaType().getRawType().isAssignableFrom(value.getClass()))\n-            throw new InvalidTypeException(\"Invalid value for CQL type \" + codec.getCqlType().getName().toString());\n+            throw new InvalidTypeException(\"Invalid value for CQL type \" + codec.getCqlType().getName());\n \n         return ((TypeCodec)codec).serialize(value, com.datastax.driver.core.ProtocolVersion.fromInt(protocolVersion.asInt()));\n     }", "filename": "src/java/org/apache/cassandra/cql3/functions/UDHelper.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/io/util/BufferManagingRebufferer.java", "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/io/util/BufferManagingRebufferer.java", "sha": "f3b9a8824cf433f71001392ac54eecd453afeaab", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/util/BufferManagingRebufferer.java?ref=95c4320baf468c32085676607521e0f33410c351", "patch": "@@ -89,7 +89,7 @@ public double getCrcCheckChance()\n     @Override\n     public String toString()\n     {\n-        return \"BufferManagingRebufferer.\" + getClass().getSimpleName() + \":\" + source.toString();\n+        return \"BufferManagingRebufferer.\" + getClass().getSimpleName() + \":\" + source;\n     }\n \n     // BufferHolder methods", "filename": "src/java/org/apache/cassandra/io/util/BufferManagingRebufferer.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/io/util/LimitingRebufferer.java", "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/io/util/LimitingRebufferer.java", "sha": "b5c7f3498d763eef0a99deb1c473833ad86ddf24", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/util/LimitingRebufferer.java?ref=95c4320baf468c32085676607521e0f33410c351", "patch": "@@ -101,7 +101,7 @@ public void closeReader()\n     @Override\n     public String toString()\n     {\n-        return \"LimitingRebufferer[\" + limiter.toString() + \"]:\" + wrapped.toString();\n+        return \"LimitingRebufferer[\" + limiter + \"]:\" + wrapped;\n     }\n \n     // BufferHolder methods", "filename": "src/java/org/apache/cassandra/io/util/LimitingRebufferer.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/io/util/RandomAccessReader.java", "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/io/util/RandomAccessReader.java", "sha": "a0ea520aec717d3188a7bd282f3f8d12828df6a5", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/util/RandomAccessReader.java?ref=95c4320baf468c32085676607521e0f33410c351", "patch": "@@ -169,7 +169,7 @@ public void close()\n     @Override\n     public String toString()\n     {\n-        return getClass().getSimpleName() + ':' + rebufferer.toString();\n+        return getClass().getSimpleName() + ':' + rebufferer;\n     }\n \n     /**", "filename": "src/java/org/apache/cassandra/io/util/RandomAccessReader.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/schema/SchemaKeyspace.java", "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/schema/SchemaKeyspace.java", "sha": "ee0974fb30843da5ae10b3533c8d73a515d57950", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/schema/SchemaKeyspace.java?ref=95c4320baf468c32085676607521e0f33410c351", "patch": "@@ -1074,7 +1074,7 @@ public static ColumnDefinition createColumnFromRow(UntypedResultSet.Row row, Typ\n                                      ? ColumnDefinition.Kind.valueOf(row.getString(\"kind\").toUpperCase())\n                                      : ColumnDefinition.Kind.REGULAR;\n         assert kind == ColumnDefinition.Kind.REGULAR || kind == ColumnDefinition.Kind.STATIC\n-            : \"Unexpected dropped column kind: \" + kind.toString();\n+            : \"Unexpected dropped column kind: \" + kind;\n         return new CFMetaData.DroppedColumn(name, type, droppedTime, kind);\n     }\n ", "filename": "src/java/org/apache/cassandra/schema/SchemaKeyspace.java"}, {"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/service/ActiveRepairService.java", "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/service/ActiveRepairService.java", "sha": "1e89c8be883af787554be694141ce1d2ce1142b3", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/ActiveRepairService.java?ref=95c4320baf468c32085676607521e0f33410c351", "patch": "@@ -333,13 +333,13 @@ public void onFailure(InetAddress from, RequestFailureReason failureReason)\n         catch (InterruptedException e)\n         {\n             removeParentRepairSession(parentRepairSession);\n-            throw new RuntimeException(\"Did not get replies from all endpoints. List of failed endpoint(s): \" + failedNodes.toString(), e);\n+            throw new RuntimeException(\"Did not get replies from all endpoints. List of failed endpoint(s): \" + failedNodes, e);\n         }\n \n         if (!status.get())\n         {\n             removeParentRepairSession(parentRepairSession);\n-            throw new RuntimeException(\"Did not get positive replies from all endpoints. List of failed endpoint(s): \" + failedNodes.toString());\n+            throw new RuntimeException(\"Did not get positive replies from all endpoints. List of failed endpoint(s): \" + failedNodes);\n         }\n \n         return parentRepairSession;", "filename": "src/java/org/apache/cassandra/service/ActiveRepairService.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/fee2a3a0958b801e1c3b26b7ad7d4ce1a79868bd", "parent": "https://github.com/apache/cassandra/commit/833c993b8e604046179067e663f963dcf4c4a2ca", "message": "Fix NPE issue in StorageService\n\nPatch by Jay Zhuang; Reviewed by Jeff Jirsa for CASSANDRa-13060", "bug_id": "cassandra_12", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/fee2a3a0958b801e1c3b26b7ad7d4ce1a79868bd/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/fee2a3a0958b801e1c3b26b7ad7d4ce1a79868bd/CHANGES.txt", "sha": "7b577dd4af3b5bbef2e1f70b57a68be14151b268", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=fee2a3a0958b801e1c3b26b7ad7d4ce1a79868bd", "patch": "@@ -17,6 +17,7 @@\n  * Add formatted row output to assertEmpty in CQL Tester (CASSANDRA-13238)\n  * Legacy caching options can prevent 3.0 upgrade (CASSANDRA-13384)\n  * Nodetool upgradesstables/scrub/compact ignores system tables (CASSANDRA-13410)\n+ * Fix NPE issue in StorageService (CASSANDRA-13060)\n Merged from 2.2:\n  * Honor truststore-password parameter in cassandra-stress (CASSANDRA-12773)\n  * Discard in-flight shadow round responses (CASSANDRA-12653)", "filename": "CHANGES.txt"}, {"additions": 6, "raw_url": "https://github.com/apache/cassandra/raw/fee2a3a0958b801e1c3b26b7ad7d4ce1a79868bd/src/java/org/apache/cassandra/service/StorageService.java", "blob_url": "https://github.com/apache/cassandra/blob/fee2a3a0958b801e1c3b26b7ad7d4ce1a79868bd/src/java/org/apache/cassandra/service/StorageService.java", "sha": "143b402d786542e48222984edbf45c84b36e9f39", "changes": 9, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=fee2a3a0958b801e1c3b26b7ad7d4ce1a79868bd", "patch": "@@ -1850,13 +1850,16 @@ private void notifyLeft(InetAddress endpoint)\n \n     private boolean isStatus(InetAddress endpoint, String status)\n     {\n-        return Gossiper.instance.getEndpointStateForEndpoint(endpoint).getStatus().equals(status);\n+        EndpointState state = Gossiper.instance.getEndpointStateForEndpoint(endpoint);\n+        return state != null && state.getStatus().equals(status);\n     }\n \n     public boolean isRpcReady(InetAddress endpoint)\n     {\n-        return MessagingService.instance().getVersion(endpoint) < MessagingService.VERSION_22 ||\n-                Gossiper.instance.getEndpointStateForEndpoint(endpoint).isRpcReady();\n+        if (MessagingService.instance().getVersion(endpoint) < MessagingService.VERSION_22)\n+            return true;\n+        EndpointState state = Gossiper.instance.getEndpointStateForEndpoint(endpoint);\n+        return state != null && state.isRpcReady();\n     }\n \n     /**", "filename": "src/java/org/apache/cassandra/service/StorageService.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/c86de2a9817aa45930afe181ae1891d2363393c7", "parent": "https://github.com/apache/cassandra/commit/3dabeeaa29bfb6757e79f17031cb467b7b052fcd", "message": "Fix NPEs in original CASSANDRA-13324 commit\n\nPatch by Ariel Weisberg; Reviewed by Marcus Eriksson", "bug_id": "cassandra_13", "file": [{"additions": 26, "raw_url": "https://github.com/apache/cassandra/raw/c86de2a9817aa45930afe181ae1891d2363393c7/src/java/org/apache/cassandra/net/MessagingService.java", "blob_url": "https://github.com/apache/cassandra/blob/c86de2a9817aa45930afe181ae1891d2363393c7/src/java/org/apache/cassandra/net/MessagingService.java", "sha": "b7d4329fe8f1919e825853b29543d66247d7d28a", "changes": 40, "status": "modified", "deletions": 14, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/net/MessagingService.java?ref=c86de2a9817aa45930afe181ae1891d2363393c7", "patch": "@@ -536,8 +536,6 @@ public Object apply(Pair<Integer, ExpiringMap.CacheableObject<CallbackInfo>> pai\n                 if (cp != null)\n                     cp.incrementTimeout();\n \n-                getConnectionPool(expiredCallbackInfo.target).incrementTimeout();\n-\n                 if (expiredCallbackInfo.callback.supportsBackPressure())\n                 {\n                     updateBackPressureOnReceive(expiredCallbackInfo.target, expiredCallbackInfo.callback, true);\n@@ -607,8 +605,12 @@ public void updateBackPressureOnSend(InetAddress host, IAsyncCallback callback,\n     {\n         if (DatabaseDescriptor.backPressureEnabled() && callback.supportsBackPressure())\n         {\n-            BackPressureState backPressureState = getConnectionPool(host).getBackPressureState();\n-            backPressureState.onMessageSent(message);\n+            OutboundTcpConnectionPool cp = getConnectionPool(host);\n+            if (cp != null)\n+            {\n+                BackPressureState backPressureState = cp.getBackPressureState();\n+                backPressureState.onMessageSent(message);\n+            }\n         }\n     }\n \n@@ -623,11 +625,15 @@ public void updateBackPressureOnReceive(InetAddress host, IAsyncCallback callbac\n     {\n         if (DatabaseDescriptor.backPressureEnabled() && callback.supportsBackPressure())\n         {\n-            BackPressureState backPressureState = getConnectionPool(host).getBackPressureState();\n-            if (!timeout)\n-                backPressureState.onResponseReceived();\n-            else\n-                backPressureState.onResponseTimeout();\n+            OutboundTcpConnectionPool cp = getConnectionPool(host);\n+            if (cp != null)\n+            {\n+                BackPressureState backPressureState = cp.getBackPressureState();\n+                if (!timeout)\n+                    backPressureState.onResponseReceived();\n+                else\n+                    backPressureState.onResponseTimeout();\n+            }\n         }\n     }\n \n@@ -644,10 +650,16 @@ public void applyBackPressure(Iterable<InetAddress> hosts, long timeoutInNanos)\n     {\n         if (DatabaseDescriptor.backPressureEnabled())\n         {\n-            backPressure.apply(StreamSupport.stream(hosts.spliterator(), false)\n-                    .filter(h -> !h.equals(FBUtilities.getBroadcastAddress()))\n-                    .map(h -> getConnectionPool(h).getBackPressureState())\n-                    .collect(Collectors.toSet()), timeoutInNanos, TimeUnit.NANOSECONDS);\n+            Set<BackPressureState> states = new HashSet<BackPressureState>();\n+            for (InetAddress host : hosts)\n+            {\n+                if (host.equals(FBUtilities.getBroadcastAddress()))\n+                    continue;\n+                OutboundTcpConnectionPool cp = getConnectionPool(host);\n+                if (cp != null)\n+                    states.add(cp.getBackPressureState());\n+            }\n+            backPressure.apply(states, timeoutInNanos, TimeUnit.NANOSECONDS);\n         }\n     }\n \n@@ -679,7 +691,7 @@ public void convict(InetAddress ep)\n         if (cp != null)\n         {\n             logger.trace(\"Resetting pool for {}\", ep);\n-            getConnectionPool(ep).reset();\n+            cp.reset();\n         }\n         else\n         {", "filename": "src/java/org/apache/cassandra/net/MessagingService.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/ff29d609979aae2c584ec6e6cd370da56945dc18", "parent": "https://github.com/apache/cassandra/commit/10397a1bfca96f07eb815cfa81cc2cb745f42cf1", "message": "NPE in IR cleanup when columnfamily has no sstables\n\nPatch by Jeff Jirsa; Reviewed by Marcus Eriksson for CASSANDRA-13585", "bug_id": "cassandra_14", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/ff29d609979aae2c584ec6e6cd370da56945dc18/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/ff29d609979aae2c584ec6e6cd370da56945dc18/CHANGES.txt", "sha": "4425aad7bae778a07c76ba92c944d4f298e13c35", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=ff29d609979aae2c584ec6e6cd370da56945dc18", "patch": "@@ -1,4 +1,5 @@\n 4.0\n+ * NPE in IR cleanup when columnfamily has no sstables (CASSANDRA-13585)\n  * Fix Randomness of stress values (CASSANDRA-12744)\n  * Allow selecting Map values and Set elements (CASSANDRA-7396)\n  * Fast and garbage-free Streaming Histogram (CASSANDRA-13444)", "filename": "CHANGES.txt"}, {"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/ff29d609979aae2c584ec6e6cd370da56945dc18/src/java/org/apache/cassandra/repair/consistent/PendingAntiCompaction.java", "blob_url": "https://github.com/apache/cassandra/blob/ff29d609979aae2c584ec6e6cd370da56945dc18/src/java/org/apache/cassandra/repair/consistent/PendingAntiCompaction.java", "sha": "f183d1443ad76160a9a484f11b627fc562163d60", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/repair/consistent/PendingAntiCompaction.java?ref=ff29d609979aae2c584ec6e6cd370da56945dc18", "patch": "@@ -69,8 +69,10 @@\n \n         void abort()\n         {\n-            txn.abort();\n-            refs.release();\n+            if (txn != null)\n+                txn.abort();\n+            if (refs != null)\n+                refs.release();\n         }\n     }\n ", "filename": "src/java/org/apache/cassandra/repair/consistent/PendingAntiCompaction.java"}, {"additions": 14, "raw_url": "https://github.com/apache/cassandra/raw/ff29d609979aae2c584ec6e6cd370da56945dc18/test/unit/org/apache/cassandra/repair/consistent/PendingAntiCompactionTest.java", "blob_url": "https://github.com/apache/cassandra/blob/ff29d609979aae2c584ec6e6cd370da56945dc18/test/unit/org/apache/cassandra/repair/consistent/PendingAntiCompactionTest.java", "sha": "3119453a30788dde5ab16fc82f9f3d701144a2b3", "changes": 14, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/repair/consistent/PendingAntiCompactionTest.java?ref=ff29d609979aae2c584ec6e6cd370da56945dc18", "patch": "@@ -255,6 +255,20 @@ public void pendingRepairSSTablesAreNotAcquired() throws Exception\n         result.abort();  // releases sstable refs\n     }\n \n+    @Test\n+    public void pendingRepairNoSSTablesExist() throws Exception\n+    {\n+        cfs.disableAutoCompaction();\n+\n+        Assert.assertEquals(0, cfs.getLiveSSTables().size());\n+\n+        PendingAntiCompaction.AcquisitionCallable acquisitionCallable = new PendingAntiCompaction.AcquisitionCallable(cfs, FULL_RANGE, UUIDGen.getTimeUUID());\n+        PendingAntiCompaction.AcquireResult result = acquisitionCallable.call();\n+        Assert.assertNotNull(result);\n+\n+        result.abort();  // There's nothing to release, but we should exit cleanly\n+    }\n+\n     /**\n      * anti compaction task should be submitted if everything is ok\n      */", "filename": "test/unit/org/apache/cassandra/repair/consistent/PendingAntiCompactionTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/6ed9134336bb48d04284cefd303d8374ed901c0a", "parent": "https://github.com/apache/cassandra/commit/617c8ebadb6c4df99c35a913184760e82172b1f5", "message": "CASSANDRA-13163, fix NPE in StorageService.excise()\n\nPatch by Ariel Weisberg; Reviewed by Jason Brown for CASSANDRA-13163", "bug_id": "cassandra_15", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/6ed9134336bb48d04284cefd303d8374ed901c0a/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/6ed9134336bb48d04284cefd303d8374ed901c0a/CHANGES.txt", "sha": "17a11ab889f914d9ea8ed7b906a480928d0e1570", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=6ed9134336bb48d04284cefd303d8374ed901c0a", "patch": "@@ -1,4 +1,5 @@\n 3.0.14\n+ * Fix NPE in StorageService.excise() (CASSANDRA-13163)\n  * Expire OutboundTcpConnection messages by a single Thread (CASSANDRA-13265)\n  * Fail repair if insufficient responses received (CASSANDRA-13397)\n  * Fix SSTableLoader fail when the loaded table contains dropped columns (CASSANDRA-13276)", "filename": "CHANGES.txt"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/6ed9134336bb48d04284cefd303d8374ed901c0a/src/java/org/apache/cassandra/service/StorageService.java", "blob_url": "https://github.com/apache/cassandra/blob/6ed9134336bb48d04284cefd303d8374ed901c0a/src/java/org/apache/cassandra/service/StorageService.java", "sha": "9bc046f5d3c2b9f3a71f6ed6bd5e0d6c91ef8bc8", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=6ed9134336bb48d04284cefd303d8374ed901c0a", "patch": "@@ -2247,8 +2247,9 @@ private void excise(Collection<Token> tokens, InetAddress endpoint)\n     {\n         logger.info(\"Removing tokens {} for {}\", tokens, endpoint);\n \n-        if (tokenMetadata.isMember(endpoint))\n-            HintsService.instance.excise(tokenMetadata.getHostId(endpoint));\n+        UUID hostId = tokenMetadata.getHostId(endpoint);\n+        if (hostId != null && tokenMetadata.isMember(endpoint))\n+            HintsService.instance.excise(hostId);\n \n         removeEndpoint(endpoint);\n         tokenMetadata.removeEndpoint(endpoint);", "filename": "src/java/org/apache/cassandra/service/StorageService.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/5d8f6c64c40612462bbecaef8e21c0f7baf5b815", "parent": "https://github.com/apache/cassandra/commit/36ce4e02b429b1297d71c5c8a963623c62d9e159", "message": "Fix nodetool compactionstats NPE\n\npatch by Jay Zhuang; reviewed by jasobrown for CASSANDRA-13021", "bug_id": "cassandra_16", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/5d8f6c64c40612462bbecaef8e21c0f7baf5b815/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/5d8f6c64c40612462bbecaef8e21c0f7baf5b815/CHANGES.txt", "sha": "4d8bb3a1528266552554a1cce7984b5a813dacb7", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=5d8f6c64c40612462bbecaef8e21c0f7baf5b815", "patch": "@@ -1,4 +1,5 @@\n 3.0.11\n+ * Nodetool compactionstats fails with NullPointerException (CASSANDRA-13021)\n  * Thread local pools never cleaned up (CASSANDRA-13033)\n  * Set RPC_READY to false when draining or if a node is marked as shutdown (CASSANDRA-12781)\n  * CQL often queries static columns unnecessarily (CASSANDRA-12768)", "filename": "CHANGES.txt"}, {"additions": 9, "raw_url": "https://github.com/apache/cassandra/raw/5d8f6c64c40612462bbecaef8e21c0f7baf5b815/src/java/org/apache/cassandra/tools/nodetool/CompactionStats.java", "blob_url": "https://github.com/apache/cassandra/blob/5d8f6c64c40612462bbecaef8e21c0f7baf5b815/src/java/org/apache/cassandra/tools/nodetool/CompactionStats.java", "sha": "bac23c2f8bd2e2e3125b2c7b501a8460c3408ea3", "changes": 15, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/tools/nodetool/CompactionStats.java?ref=5d8f6c64c40612462bbecaef8e21c0f7baf5b815", "patch": "@@ -30,7 +30,6 @@\n import org.apache.cassandra.db.compaction.OperationType;\n import org.apache.cassandra.io.util.FileUtils;\n import org.apache.cassandra.tools.NodeProbe;\n-import org.apache.cassandra.tools.NodeTool;\n import org.apache.cassandra.tools.NodeTool.NodeToolCmd;\n \n @Command(name = \"compactionstats\", description = \"Print statistics on compactions\")\n@@ -96,10 +95,14 @@ public void execute(NodeProbe probe)\n         }\n     }\n \n-    private void addLine(List<String[]> lines, int[] columnSizes, String... columns) {\n-        lines.add(columns);\n-        for (int i = 0; i < columns.length; i++) {\n-            columnSizes[i] = Math.max(columnSizes[i], columns[i].length());\n+    private void addLine(List<String[]> lines, int[] columnSizes, String... columns)\n+    {\n+        String[] newColumns = new String[columns.length];\n+        for (int i = 0; i < columns.length; i++)\n+        {\n+            columnSizes[i] = Math.max(columnSizes[i], columns[i] != null ? columns[i].length() : 1);\n+            newColumns[i] = columns[i] != null ? columns[i] : \"\";\n         }\n+        lines.add(newColumns);\n     }\n-}\n\\ No newline at end of file\n+}", "filename": "src/java/org/apache/cassandra/tools/nodetool/CompactionStats.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/cbebb29adf5d8b13e75fe60c2f7aa312420be35c", "parent": "https://github.com/apache/cassandra/commit/312e21bda7c50f05fc5f8868740b513022385951", "message": "Fix potential NPE for compactionstats\n\npatch by Simon Zhou; reviewed by yukim for CASSANDRA-12462", "bug_id": "cassandra_17", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/cbebb29adf5d8b13e75fe60c2f7aa312420be35c/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/cbebb29adf5d8b13e75fe60c2f7aa312420be35c/CHANGES.txt", "sha": "9d328ae6378aae7b00ebd3487f93b5bde2f12791", "changes": 3, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=cbebb29adf5d8b13e75fe60c2f7aa312420be35c", "patch": "@@ -1,4 +1,5 @@\n 2.2.9\n+ * Fix potential NPE for compactionstats (CASSANDRA-12462)\n  * Prepare legacy authenticate statement if credentials table initialised after node startup (CASSANDRA-12813)\n  * Change cassandra.wait_for_tracing_events_timeout_secs default to 0 (CASSANDRA-12754)\n  * Clean up permissions when a UDA is dropped (CASSANDRA-12720)\n@@ -9,8 +10,6 @@\n  * Better handle invalid system roles table (CASSANDRA-12700)\n  * Split consistent range movement flag correction (CASSANDRA-12786)\n Merged from 2.1:\n-=======\n-2.1.17\n  * Don't skip sstables based on maxLocalDeletionTime (CASSANDRA-12765)\n \n ", "filename": "CHANGES.txt"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/cbebb29adf5d8b13e75fe60c2f7aa312420be35c/src/java/org/apache/cassandra/db/compaction/CompactionInfo.java", "blob_url": "https://github.com/apache/cassandra/blob/cbebb29adf5d8b13e75fe60c2f7aa312420be35c/src/java/org/apache/cassandra/db/compaction/CompactionInfo.java", "sha": "3cd8737dfada7e604b211c8dff237aab774c2874", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/compaction/CompactionInfo.java?ref=cbebb29adf5d8b13e75fe60c2f7aa312420be35c", "patch": "@@ -65,17 +65,17 @@ public CompactionInfo forProgress(long complete, long total)\n \n     public UUID getId()\n     {\n-        return cfm.cfId;\n+        return cfm != null ? cfm.cfId : null;\n     }\n \n     public String getKeyspace()\n     {\n-        return cfm.ksName;\n+        return cfm != null ? cfm.ksName : null;\n     }\n \n     public String getColumnFamily()\n     {\n-        return cfm.cfName;\n+        return cfm != null ? cfm.cfName : null;\n     }\n \n     public CFMetaData getCFMetaData()", "filename": "src/java/org/apache/cassandra/db/compaction/CompactionInfo.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/79a16e5e977bea4ec86fb3fef97a7ea0719a9095", "parent": "https://github.com/apache/cassandra/commit/cd8a98a2dd2d7e4993cd1aa3c282602b48be73c8", "message": "Fix NPE in ComponentOfSlice.isEQ()\n\nPatch by Stefania Alborghetti; reviewed by Swen Moczarski for CASSANDRA-12706", "bug_id": "cassandra_18", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/79a16e5e977bea4ec86fb3fef97a7ea0719a9095/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/79a16e5e977bea4ec86fb3fef97a7ea0719a9095/CHANGES.txt", "sha": "cbf9ab1ff8975e6067a770f1fee3a661024cb37c", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=79a16e5e977bea4ec86fb3fef97a7ea0719a9095", "patch": "@@ -1,4 +1,5 @@\n 3.0.10\n+ * Fix NPE in ComponentOfSlice.isEQ() (CASSANDRA-12706)\n  * Fix failure in LogTransactionTest (CASSANDRA-12632)\n  * Fix potentially incomplete non-frozen UDT values when querying with the\n    full primary key specified (CASSANDRA-12605)", "filename": "CHANGES.txt"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/79a16e5e977bea4ec86fb3fef97a7ea0719a9095/src/java/org/apache/cassandra/db/Slices.java", "blob_url": "https://github.com/apache/cassandra/blob/79a16e5e977bea4ec86fb3fef97a7ea0719a9095/src/java/org/apache/cassandra/db/Slices.java", "sha": "269386e15efec496a667b11105986aae33a6b516", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/Slices.java?ref=79a16e5e977bea4ec86fb3fef97a7ea0719a9095", "patch": "@@ -745,7 +745,7 @@ public static ComponentOfSlice fromSlice(int component, Slice slice)\n \n             public boolean isEQ()\n             {\n-                return startValue.equals(endValue);\n+                return Objects.equals(startValue, endValue);\n             }\n         }\n     }", "filename": "src/java/org/apache/cassandra/db/Slices.java"}, {"additions": 21, "raw_url": "https://github.com/apache/cassandra/raw/79a16e5e977bea4ec86fb3fef97a7ea0719a9095/test/unit/org/apache/cassandra/db/SinglePartitionSliceCommandTest.java", "blob_url": "https://github.com/apache/cassandra/blob/79a16e5e977bea4ec86fb3fef97a7ea0719a9095/test/unit/org/apache/cassandra/db/SinglePartitionSliceCommandTest.java", "sha": "7f59e2fd73bdd62eac1473a932a026c0ca0cc7f4", "changes": 21, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/db/SinglePartitionSliceCommandTest.java?ref=79a16e5e977bea4ec86fb3fef97a7ea0719a9095", "patch": "@@ -215,4 +215,25 @@ public void staticColumnsAreReturned() throws IOException\n             checkForS(pi);\n         }\n     }\n+\n+    @Test\n+    public void toCQLStringIsSafeToCall() throws IOException\n+    {\n+        DecoratedKey key = cfm.decorateKey(ByteBufferUtil.bytes(\"k1\"));\n+\n+        ColumnFilter columnFilter = ColumnFilter.selection(PartitionColumns.of(s));\n+        Slice slice = Slice.make(Slice.Bound.BOTTOM, Slice.Bound.inclusiveEndOf(ByteBufferUtil.bytes(\"i1\")));\n+        ClusteringIndexSliceFilter sliceFilter = new ClusteringIndexSliceFilter(Slices.with(cfm.comparator, slice), false);\n+        ReadCommand cmd = new SinglePartitionReadCommand(false, MessagingService.VERSION_30, true, cfm,\n+                                                         FBUtilities.nowInSeconds(),\n+                                                         columnFilter,\n+                                                         RowFilter.NONE,\n+                                                         DataLimits.NONE,\n+                                                         key,\n+                                                         sliceFilter);\n+\n+        String ret = cmd.toCQLString();\n+        Assert.assertNotNull(ret);\n+        Assert.assertFalse(ret.isEmpty());\n+    }\n }", "filename": "test/unit/org/apache/cassandra/db/SinglePartitionSliceCommandTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/182051c453c30f6941b49c030092008918cfa2e2", "parent": "https://github.com/apache/cassandra/commit/995904c2ddb3bf91aa138db9dca93a78b645e7d4", "message": "simplify/avoid possible npes", "bug_id": "cassandra_19", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/auth/Resources.java", "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/auth/Resources.java", "sha": "47a7aa424b33ad11710267641ecad66627ffe9c9", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/auth/Resources.java?ref=182051c453c30f6941b49c030092008918cfa2e2", "patch": "@@ -58,7 +58,7 @@ public static String toString(List<Object> resource)\n             if (component instanceof byte[])\n                 buff.append(Hex.bytesToHex((byte[])component));\n             else\n-                buff.append(component.toString());\n+                buff.append(component);\n         }\n         return buff.toString();\n     }", "filename": "src/java/org/apache/cassandra/auth/Resources.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/cli/CliClient.java", "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/cli/CliClient.java", "sha": "703d4c13e77b990016e17ddcc50e7be249bad1d2", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cli/CliClient.java?ref=182051c453c30f6941b49c030092008918cfa2e2", "patch": "@@ -2102,7 +2102,7 @@ private void executeTraceNextQuery() throws TException\n \n         UUID sessionId = TimeUUIDType.instance.compose(thriftClient.trace_next_query());\n \n-        sessionState.out.println(\"Will trace next query. Session ID: \" + sessionId.toString());\n+        sessionState.out.println(\"Will trace next query. Session ID: \" + sessionId);\n     }\n \n     private void describeKeySpace(String keySpaceName, KsDef metadata) throws TException", "filename": "src/java/org/apache/cassandra/cli/CliClient.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/cql3/ResultSet.java", "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/cql3/ResultSet.java", "sha": "30b5c4edf3b0016325a66933456e068b4e324bd4", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/ResultSet.java?ref=182051c453c30f6941b49c030092008918cfa2e2", "patch": "@@ -333,7 +333,7 @@ public String toString()\n             {\n                 for (ColumnSpecification name : names)\n                 {\n-                    sb.append(\"[\").append(name.name.toString());\n+                    sb.append(\"[\").append(name.name);\n                     sb.append(\"(\").append(name.ksName).append(\", \").append(name.cfName).append(\")\");\n                     sb.append(\", \").append(name.type).append(\"]\");\n                 }", "filename": "src/java/org/apache/cassandra/cql3/ResultSet.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/db/context/CounterContext.java", "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/db/context/CounterContext.java", "sha": "ffffbb14a53f9cf972efc3ee9846d18ce30c7cce", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/context/CounterContext.java?ref=182051c453c30f6941b49c030092008918cfa2e2", "patch": "@@ -509,7 +509,7 @@ public String toString(ByteBuffer context)\n             if (state.getElementIndex() > 0)\n                 sb.append(\",\");\n             sb.append(\"{\");\n-            sb.append(state.getCounterId().toString()).append(\", \");\n+            sb.append(state.getCounterId()).append(\", \");\n             sb.append(state.getClock()).append(\", \");\n             sb.append(state.getCount());\n             sb.append(\"}\");", "filename": "src/java/org/apache/cassandra/db/context/CounterContext.java"}, {"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/db/marshal/TypeParser.java", "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/db/marshal/TypeParser.java", "sha": "37f8708e30af43bb4bfb826954b035cec560fa0a", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/marshal/TypeParser.java?ref=182051c453c30f6941b49c030092008918cfa2e2", "patch": "@@ -271,7 +271,7 @@ else if (str.charAt(idx) != ',' && str.charAt(idx) != ')')\n             {\n                 AbstractType<?> type = parse();\n                 if (!(type instanceof CollectionType))\n-                    throw new SyntaxException(type.toString() + \" is not a collection type\");\n+                    throw new SyntaxException(type + \" is not a collection type\");\n                 map.put(bb, (CollectionType)type);\n             }\n             catch (SyntaxException e)\n@@ -572,7 +572,7 @@ public static String stringifyUserTypeParameters(String keysace, ByteBuffer type\n         {\n             sb.append(',');\n             sb.append(ByteBufferUtil.bytesToHex(columnNames.get(i))).append(\":\");\n-            sb.append(columnTypes.get(i).toString());\n+            sb.append(columnTypes.get(i));\n         }\n         sb.append(')');\n         return sb.toString();", "filename": "src/java/org/apache/cassandra/db/marshal/TypeParser.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/exceptions/RepairException.java", "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/exceptions/RepairException.java", "sha": "2f5f2c1c728774975f88013bc13766d054946c4c", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/exceptions/RepairException.java?ref=182051c453c30f6941b49c030092008918cfa2e2", "patch": "@@ -41,6 +41,6 @@ public RepairException(RepairJobDesc desc, String message, Throwable cause)\n     @Override\n     public String getMessage()\n     {\n-        return desc.toString() + \" \" + super.getMessage();\n+        return desc + \" \" + super.getMessage();\n     }\n }", "filename": "src/java/org/apache/cassandra/exceptions/RepairException.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/gms/FailureDetector.java", "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/gms/FailureDetector.java", "sha": "ec723792559dc90f94a1993aa6b10291dc9f0768", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/gms/FailureDetector.java?ref=182051c453c30f6941b49c030092008918cfa2e2", "patch": "@@ -277,7 +277,7 @@ public String toString()\n         {\n             ArrivalWindow hWnd = arrivalSamples.get(ep);\n             sb.append(ep + \" : \");\n-            sb.append(hWnd.toString());\n+            sb.append(hWnd);\n             sb.append(System.getProperty(\"line.separator\"));\n         }\n         sb.append(\"-----------------------------------------------------------------------\");", "filename": "src/java/org/apache/cassandra/gms/FailureDetector.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/hadoop/AbstractColumnFamilyRecordWriter.java", "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/hadoop/AbstractColumnFamilyRecordWriter.java", "sha": "cb44beb122f76617286fba1afa0ef63e9ff15dfa", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/hadoop/AbstractColumnFamilyRecordWriter.java?ref=182051c453c30f6941b49c030092008918cfa2e2", "patch": "@@ -186,7 +186,7 @@ protected void closeInternal()\n         @Override\n         public String toString()\n         {\n-            return \"#<Client for \" + endpoints.toString() + \">\";\n+            return \"#<Client for \" + endpoints + \">\";\n         }\n     }\n }", "filename": "src/java/org/apache/cassandra/hadoop/AbstractColumnFamilyRecordWriter.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/streaming/StreamCoordinator.java", "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/streaming/StreamCoordinator.java", "sha": "04bd1b745bfaa8b3642d154dc205c5b2330c2c4d", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamCoordinator.java?ref=182051c453c30f6941b49c030092008918cfa2e2", "patch": "@@ -175,7 +175,7 @@ private HostStreamingData getHostData(InetAddress peer)\n     {\n         HostStreamingData data = peerSessions.get(peer);\n         if (data == null)\n-            throw new IllegalArgumentException(\"Unknown peer requested: \" + peer.toString());\n+            throw new IllegalArgumentException(\"Unknown peer requested: \" + peer);\n         return data;\n     }\n ", "filename": "src/java/org/apache/cassandra/streaming/StreamCoordinator.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/streaming/StreamEvent.java", "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/streaming/StreamEvent.java", "sha": "e3cdce5cf8692f0fc4ac736f43abe911f5959037", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamEvent.java?ref=182051c453c30f6941b49c030092008918cfa2e2", "patch": "@@ -66,7 +66,7 @@ public ProgressEvent(UUID planId, ProgressInfo progress)\n         @Override\n         public String toString()\n         {\n-            return \"<ProgressEvent \" + progress.toString() + \">\";\n+            return \"<ProgressEvent \" + progress + \">\";\n         }\n     }\n ", "filename": "src/java/org/apache/cassandra/streaming/StreamEvent.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/streaming/StreamLockfile.java", "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/streaming/StreamLockfile.java", "sha": "d00842a947e8c8ce7fe7e05b531d6651add76ef9", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamLockfile.java?ref=182051c453c30f6941b49c030092008918cfa2e2", "patch": "@@ -57,7 +57,7 @@\n \n     public StreamLockfile(File directory, UUID uuid)\n     {\n-        lockfile = new File(directory, uuid.toString() + FILE_EXT);\n+        lockfile = new File(directory, uuid + FILE_EXT);\n     }\n \n     public StreamLockfile(File lockfile)", "filename": "src/java/org/apache/cassandra/streaming/StreamLockfile.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/thrift/TCustomServerSocket.java", "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/thrift/TCustomServerSocket.java", "sha": "477ef8c00442d4578a4edba91bb7e562d0c84b6e", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/thrift/TCustomServerSocket.java?ref=182051c453c30f6941b49c030092008918cfa2e2", "patch": "@@ -72,7 +72,7 @@ public TCustomServerSocket(InetSocketAddress bindAddr, boolean keepAlive, Intege\n         catch (IOException ioe)\n         {\n             serverSocket = null;\n-            throw new TTransportException(\"Could not create ServerSocket on address \" + bindAddr.toString() + \".\");\n+            throw new TTransportException(\"Could not create ServerSocket on address \" + bindAddr + \".\");\n         }\n \n         this.keepAlive = keepAlive;", "filename": "src/java/org/apache/cassandra/thrift/TCustomServerSocket.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/tools/BulkLoader.java", "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/tools/BulkLoader.java", "sha": "19f49b1c2c0cca3cf4b3198dc7902159bcd4bc31", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/tools/BulkLoader.java?ref=182051c453c30f6941b49c030092008918cfa2e2", "patch": "@@ -181,7 +181,7 @@ else if (event.eventType == StreamEvent.Type.FILE_PROGRESS || event.eventType ==\n                 // recalculate progress across all sessions in all hosts and display\n                 for (InetAddress peer : sessionsByHost.keySet())\n                 {\n-                    sb.append(\"[\").append(peer.toString()).append(\"]\");\n+                    sb.append(\"[\").append(peer).append(\"]\");\n \n                     for (SessionInfo session : sessionsByHost.get(peer))\n                     {", "filename": "src/java/org/apache/cassandra/tools/BulkLoader.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/tools/NodeTool.java", "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/src/java/org/apache/cassandra/tools/NodeTool.java", "sha": "9fbee9cb72f851775c6aaeee4a63a401b0c367e1", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/tools/NodeTool.java?ref=182051c453c30f6941b49c030092008918cfa2e2", "patch": "@@ -828,7 +828,7 @@ public void verifyColumnFamilies()\n             {\n                 for (String ks : filter.keySet())\n                     if (verifier.get(ks).size() > 0)\n-                        throw new IllegalArgumentException(\"Unknown tables: \" + verifier.get(ks).toString() + \" in keyspace: \" + ks);\n+                        throw new IllegalArgumentException(\"Unknown tables: \" + verifier.get(ks) + \" in keyspace: \" + ks);\n             }\n         }\n     }", "filename": "src/java/org/apache/cassandra/tools/NodeTool.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/182051c453c30f6941b49c030092008918cfa2e2/tools/stress/src/org/apache/cassandra/stress/operations/predefined/CqlOperation.java", "blob_url": "https://github.com/apache/cassandra/blob/182051c453c30f6941b49c030092008918cfa2e2/tools/stress/src/org/apache/cassandra/stress/operations/predefined/CqlOperation.java", "sha": "a8144c905fb2379d75b03f24c8ca6907ba6e0411", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/tools/stress/src/org/apache/cassandra/stress/operations/predefined/CqlOperation.java?ref=182051c453c30f6941b49c030092008918cfa2e2", "patch": "@@ -638,7 +638,7 @@ private static String formatCqlQuery(String query, List<Object> parms)\n             if (parm instanceof ByteBuffer)\n                 result.append(getUnQuotedCqlBlob((ByteBuffer) parm));\n             else if (parm instanceof Long)\n-                result.append(parm.toString());\n+                result.append(parm);\n             else throw new AssertionError();\n \n             position = marker + 1;", "filename": "tools/stress/src/org/apache/cassandra/stress/operations/predefined/CqlOperation.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/849f8cd6162c4850d64581a2c4a542c677e43e0a", "parent": "https://github.com/apache/cassandra/commit/451fe9d8ac567942f62852f542d28d7d1116f1a1", "message": "Fix possible NPE on upgrade to 3.0/3.X in case of IO errors\n\npatch by Stefania Alborghetti; reviewed by Alex Petrov for CASSANDRA-13389", "bug_id": "cassandra_20", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/849f8cd6162c4850d64581a2c4a542c677e43e0a/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/849f8cd6162c4850d64581a2c4a542c677e43e0a/CHANGES.txt", "sha": "5d7b2678dd694f83de1898959401edd6b167e9de", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=849f8cd6162c4850d64581a2c4a542c677e43e0a", "patch": "@@ -1,4 +1,5 @@\n 3.0.13\n+ * Fix possible NPE on upgrade to 3.0/3.X in case of IO errors (CASSANDRA-13389)\n  * Legacy deserializer can create empty range tombstones (CASSANDRA-13341)\n  * Use the Kernel32 library to retrieve the PID on Windows and fix startup checks (CASSANDRA-13333)\n  * Fix code to not exchange schema across major versions (CASSANDRA-13274)", "filename": "CHANGES.txt"}, {"additions": 25, "raw_url": "https://github.com/apache/cassandra/raw/849f8cd6162c4850d64581a2c4a542c677e43e0a/src/java/org/apache/cassandra/db/SystemKeyspace.java", "blob_url": "https://github.com/apache/cassandra/blob/849f8cd6162c4850d64581a2c4a542c677e43e0a/src/java/org/apache/cassandra/db/SystemKeyspace.java", "sha": "cc2143507a56b68c714088f490210b12e9bbc209", "changes": 44, "status": "modified", "deletions": 19, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/SystemKeyspace.java?ref=849f8cd6162c4850d64581a2c4a542c677e43e0a", "patch": "@@ -64,6 +64,7 @@\n import static java.util.Collections.singletonMap;\n import static org.apache.cassandra.cql3.QueryProcessor.executeInternal;\n import static org.apache.cassandra.cql3.QueryProcessor.executeOnceInternal;\n+import static org.apache.cassandra.io.util.FileUtils.visitDirectory;\n \n public final class SystemKeyspace\n {\n@@ -1338,28 +1339,33 @@ public static void migrateDataDirs()\n         Iterable<String> dirs = Arrays.asList(DatabaseDescriptor.getAllDataFileLocations());\n         for (String dataDir : dirs)\n         {\n-            logger.trace(\"Checking {} for old files\", dataDir);\n+            logger.debug(\"Checking {} for legacy files\", dataDir);\n             File dir = new File(dataDir);\n             assert dir.exists() : dir + \" should have been created by startup checks\";\n \n-            for (File ksdir : dir.listFiles((d, n) -> new File(d, n).isDirectory()))\n-            {\n-                logger.trace(\"Checking {} for old files\", ksdir);\n-\n-                for (File cfdir : ksdir.listFiles((d, n) -> new File(d, n).isDirectory()))\n-                {\n-                    logger.trace(\"Checking {} for old files\", cfdir);\n-\n-                    if (Descriptor.isLegacyFile(cfdir))\n-                    {\n-                        FileUtils.deleteRecursive(cfdir);\n-                    }\n-                    else\n-                    {\n-                        FileUtils.delete(cfdir.listFiles((d, n) -> Descriptor.isLegacyFile(new File(d, n))));\n-                    }\n-                }\n-            }\n+            visitDirectory(dir.toPath(),\n+                           File::isDirectory,\n+                           ksdir ->\n+                           {\n+                               logger.trace(\"Checking {} for legacy files\", ksdir);\n+                               visitDirectory(ksdir.toPath(),\n+                                              File::isDirectory,\n+                                              cfdir ->\n+                                              {\n+                                                  logger.trace(\"Checking {} for legacy files\", cfdir);\n+\n+                                                  if (Descriptor.isLegacyFile(cfdir))\n+                                                  {\n+                                                      FileUtils.deleteRecursive(cfdir);\n+                                                  }\n+                                                  else\n+                                                  {\n+                                                      visitDirectory(cfdir.toPath(),\n+                                                                     Descriptor::isLegacyFile,\n+                                                                     FileUtils::delete);\n+                                                  }\n+                                              });\n+                           });\n         }\n     }\n ", "filename": "src/java/org/apache/cassandra/db/SystemKeyspace.java"}, {"additions": 26, "raw_url": "https://github.com/apache/cassandra/raw/849f8cd6162c4850d64581a2c4a542c677e43e0a/src/java/org/apache/cassandra/io/util/FileUtils.java", "blob_url": "https://github.com/apache/cassandra/blob/849f8cd6162c4850d64581a2c4a542c677e43e0a/src/java/org/apache/cassandra/io/util/FileUtils.java", "sha": "0bfbbb1c2b3385fceebb0ae06022a577bc82861e", "changes": 26, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/util/FileUtils.java?ref=849f8cd6162c4850d64581a2c4a542c677e43e0a", "patch": "@@ -28,6 +28,9 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Predicate;\n+import java.util.stream.StreamSupport;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -369,6 +372,13 @@ public static boolean delete(String file)\n \n     public static void delete(File... files)\n     {\n+        if (files == null)\n+        {\n+            // CASSANDRA-13389: some callers use Files.listFiles() which, on error, silently returns null\n+            logger.debug(\"Received null list of files to delete\");\n+            return;\n+        }\n+\n         for ( File file : files )\n         {\n             file.delete();\n@@ -387,6 +397,22 @@ public void run()\n         ScheduledExecutors.nonPeriodicTasks.execute(runnable);\n     }\n \n+    public static void visitDirectory(Path dir, Predicate<? super File> filter, Consumer<? super File> consumer)\n+    {\n+        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir))\n+        {\n+            StreamSupport.stream(stream.spliterator(), false)\n+                         .map(Path::toFile)\n+                         // stream directories are weakly consistent so we always check if the file still exists\n+                         .filter(f -> f.exists() && (filter == null || filter.test(f)))\n+                         .forEach(consumer);\n+        }\n+        catch (IOException|DirectoryIteratorException ex)\n+        {\n+            logger.error(\"Failed to list files in {} with exception: {}\", dir, ex.getMessage(), ex);\n+        }\n+    }\n+\n     public static String stringifyFileSize(double value)\n     {\n         double d;", "filename": "src/java/org/apache/cassandra/io/util/FileUtils.java"}, {"additions": 102, "raw_url": "https://github.com/apache/cassandra/raw/849f8cd6162c4850d64581a2c4a542c677e43e0a/test/unit/org/apache/cassandra/db/SystemKeyspaceTest.java", "blob_url": "https://github.com/apache/cassandra/blob/849f8cd6162c4850d64581a2c4a542c677e43e0a/test/unit/org/apache/cassandra/db/SystemKeyspaceTest.java", "sha": "bcbabfde21aa458e0616af62aacf8654c1c39f4b", "changes": 106, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/db/SystemKeyspaceTest.java?ref=849f8cd6162c4850d64581a2c4a542c677e43e0a", "patch": "@@ -39,12 +39,15 @@\n import org.apache.cassandra.utils.FBUtilities;\n import org.apache.cassandra.utils.CassandraVersion;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.*;\n \n public class SystemKeyspaceTest\n {\n-    public static final String MIGRATION_SSTABLES_ROOT = \"migration-sstable-root\";\n+    private static final String MIGRATION_SSTABLES_ROOT = \"migration-sstable-root\";\n+\n+    // any file name will do but unrelated files in our folders tend to be log files or very old data files\n+    private static final String UNRELATED_FILE_NAME = \"system.log\";\n+    private static final String UNRELATED_FOLDER_NAME = \"snapshot-abc\";\n \n     @BeforeClass\n     public static void prepSnapshotTracker()\n@@ -221,14 +224,109 @@ private static int numLegacyFiles()\n                     else\n                     {\n                         File[] legacyFiles = cfdir.listFiles((d, n) -> Descriptor.isLegacyFile(new File(d, n)));\n-                        ret += legacyFiles.length;\n+                        if (legacyFiles != null)\n+                            ret += legacyFiles.length;\n                     }\n                 }\n             }\n         }\n         return ret;\n     }\n \n+    @Test\n+    public void testMigrateDataDirs_UnrelatedFiles_2_1() throws IOException\n+    {\n+        testMigrateDataDirsWithUnrelatedFiles(\"2.1\");\n+    }\n+\n+    @Test\n+    public void testMigrateDataDirs_UnrelatedFiles_2_2() throws IOException\n+    {\n+        testMigrateDataDirsWithUnrelatedFiles(\"2.2\");\n+    }\n+\n+    private void testMigrateDataDirsWithUnrelatedFiles(String version) throws IOException\n+    {\n+        Path migrationSSTableRoot = Paths.get(System.getProperty(MIGRATION_SSTABLES_ROOT), version);\n+        Path dataDir = Paths.get(DatabaseDescriptor.getAllDataFileLocations()[0]);\n+\n+        FileUtils.copyDirectory(migrationSSTableRoot.toFile(), dataDir.toFile());\n+\n+        addUnRelatedFiles(dataDir);\n+\n+        SystemKeyspace.migrateDataDirs();\n+\n+        checkUnrelatedFiles(dataDir);\n+    }\n+\n+    /**\n+     * Add some extra and totally unrelated files to the data dir and its sub-folders\n+     */\n+    private void addUnRelatedFiles(Path dataDir) throws IOException\n+    {\n+        File dir = new File(dataDir.toString());\n+        createAndCheck(dir, UNRELATED_FILE_NAME, false);\n+        createAndCheck(dir, UNRELATED_FOLDER_NAME, true);\n+\n+        for (File ksdir : dir.listFiles((d, n) -> new File(d, n).isDirectory()))\n+        {\n+            createAndCheck(ksdir, UNRELATED_FILE_NAME, false);\n+            createAndCheck(ksdir, UNRELATED_FOLDER_NAME, true);\n+\n+            for (File cfdir : ksdir.listFiles((d, n) -> new File(d, n).isDirectory()))\n+            {\n+                createAndCheck(cfdir, UNRELATED_FILE_NAME, false);\n+                createAndCheck(cfdir, UNRELATED_FOLDER_NAME, true);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Make sure the extra files are still in the data dir and its sub-folders, then\n+     * remove them.\n+     */\n+    private void checkUnrelatedFiles(Path dataDir) throws IOException\n+    {\n+        File dir = new File(dataDir.toString());\n+        checkAndDelete(dir, UNRELATED_FILE_NAME, false);\n+        checkAndDelete(dir, UNRELATED_FOLDER_NAME, true);\n+\n+        for (File ksdir : dir.listFiles((d, n) -> new File(d, n).isDirectory()))\n+        {\n+            checkAndDelete(ksdir, UNRELATED_FILE_NAME, false);\n+            checkAndDelete(ksdir, UNRELATED_FOLDER_NAME, true);\n+\n+            for (File cfdir : ksdir.listFiles((d, n) -> new File(d, n).isDirectory()))\n+            {\n+                checkAndDelete(cfdir, UNRELATED_FILE_NAME, false);\n+                checkAndDelete(cfdir, UNRELATED_FOLDER_NAME, true);\n+            }\n+        }\n+    }\n+\n+    private void createAndCheck(File dir, String fileName, boolean isDir) throws IOException\n+    {\n+        File f = new File(dir, fileName);\n+\n+        if (isDir)\n+            f.mkdir();\n+        else\n+            f.createNewFile();\n+\n+        assertTrue(f.exists());\n+    }\n+\n+    private void checkAndDelete(File dir, String fileName, boolean isDir) throws IOException\n+    {\n+        File f = new File(dir, fileName);\n+        assertTrue(f.exists());\n+\n+        if (isDir)\n+            FileUtils.deleteDirectory(f);\n+        else\n+            f.delete();\n+    }\n+\n     private String getOlderVersionString()\n     {\n         String version = FBUtilities.getReleaseVersionString();", "filename": "test/unit/org/apache/cassandra/db/SystemKeyspaceTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/fad5ad5a6af5a9ed2954a6395149f0ca95d34603", "parent": "https://github.com/apache/cassandra/commit/233bd3c0340d6bd19fe0c25072bd3b4931be0e1f", "message": "reorder to avoid NPE", "bug_id": "cassandra_21", "file": [{"additions": 10, "raw_url": "https://github.com/apache/cassandra/raw/fad5ad5a6af5a9ed2954a6395149f0ca95d34603/src/java/org/apache/cassandra/config/DatabaseDescriptor.java", "blob_url": "https://github.com/apache/cassandra/blob/fad5ad5a6af5a9ed2954a6395149f0ca95d34603/src/java/org/apache/cassandra/config/DatabaseDescriptor.java", "sha": "d89967d8e1a07c45da655b47cf196d2a14d4ec2c", "changes": 19, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=fad5ad5a6af5a9ed2954a6395149f0ca95d34603", "patch": "@@ -288,15 +288,6 @@ else if (conf.disk_access_mode == Config.DiskAccessMode.mmap_index_only)\n             logger.info(\"Global memtable off-heap threshold is disabled, HeapAllocator will be used instead\");\n         else\n             logger.info(\"Global memtable off-heap threshold is enabled at {}MB\", conf.memtable_offheap_space_in_mb);\n-        if (conf.memtable_cleanup_threshold < 0.01f)\n-            throw new ConfigurationException(\"memtable_cleanup_threshold must be >= 0.01\");\n-        if (conf.memtable_cleanup_threshold > 0.99f)\n-            throw new ConfigurationException(\"memtable_cleanup_threshold must be <= 0.99\");\n-        if (conf.memtable_cleanup_threshold < 0.1f)\n-            logger.warn(\"memtable_cleanup_threshold is set very low, which may cause performance degradation\");\n-\n-        if (conf.memtable_flush_writers < 1)\n-            throw new ConfigurationException(\"memtable_flush_writers must be at least 1\");\n \n         /* Local IP or hostname to bind services to */\n         if (conf.listen_address != null)\n@@ -486,9 +477,19 @@ public int compare(InetAddress endpoint1, InetAddress endpoint2)\n         if (conf.memtable_flush_writers == null)\n             conf.memtable_flush_writers = Math.min(8, Math.max(2, Math.min(FBUtilities.getAvailableProcessors(), conf.data_file_directories.length)));\n \n+        if (conf.memtable_flush_writers < 1)\n+            throw new ConfigurationException(\"memtable_flush_writers must be at least 1\");\n+\n         if (conf.memtable_cleanup_threshold == null)\n             conf.memtable_cleanup_threshold = (float) (1.0 / (1 + conf.memtable_flush_writers));\n \n+        if (conf.memtable_cleanup_threshold < 0.01f)\n+            throw new ConfigurationException(\"memtable_cleanup_threshold must be >= 0.01\");\n+        if (conf.memtable_cleanup_threshold > 0.99f)\n+            throw new ConfigurationException(\"memtable_cleanup_threshold must be <= 0.99\");\n+        if (conf.memtable_cleanup_threshold < 0.1f)\n+            logger.warn(\"memtable_cleanup_threshold is set very low, which may cause performance degradation\");\n+\n         if (conf.concurrent_compactors == null)\n             conf.concurrent_compactors = Math.min(8, Math.max(2, Math.min(FBUtilities.getAvailableProcessors(), conf.data_file_directories.length)));\n ", "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/ed645f32aaa0247f010840170594f5b214c6c185", "parent": "https://github.com/apache/cassandra/commit/5a18e3706424270439aaacbf8ef9b57547510459", "message": "Avoid NPE", "bug_id": "cassandra_22", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/ed645f32aaa0247f010840170594f5b214c6c185/src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java", "blob_url": "https://github.com/apache/cassandra/blob/ed645f32aaa0247f010840170594f5b214c6c185/src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java", "sha": "298715463bf5214b82d13c4519377e5fdd90d908", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java?ref=ed645f32aaa0247f010840170594f5b214c6c185", "patch": "@@ -523,7 +523,7 @@ protected Parsed(CFName name, Attributes.Raw attrs, List<Pair<ColumnIdentifier,\n         {\n             super(name);\n             this.attrs = attrs;\n-            this.conditions = conditions;\n+            this.conditions = conditions == null ? Collections.<Pair<ColumnIdentifier, Operation.RawUpdate>>emptyList() : conditions;\n             this.ifNotExists = ifNotExists;\n         }\n ", "filename": "src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/57e6888e6aa8cc726fadb4087fe0cb77853c12eb", "parent": "https://github.com/apache/cassandra/commit/2d0dff7acec0c36f43536c92480892d9c92bd27f", "message": "fix NPE", "bug_id": "cassandra_23", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/57e6888e6aa8cc726fadb4087fe0cb77853c12eb/src/java/org/apache/cassandra/db/commitlog/CommitLogReplayer.java", "blob_url": "https://github.com/apache/cassandra/blob/57e6888e6aa8cc726fadb4087fe0cb77853c12eb/src/java/org/apache/cassandra/db/commitlog/CommitLogReplayer.java", "sha": "6b401fb07c4c03a930717366eb02b63942d35db0", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/commitlog/CommitLogReplayer.java?ref=57e6888e6aa8cc726fadb4087fe0cb77853c12eb", "patch": "@@ -80,7 +80,8 @@ public CommitLogReplayer()\n             ReplayPosition rp = ReplayPosition.getReplayPosition(cfs.getSSTables());\n \n             // but, if we've truncted the cf in question, then we need to need to start replay after the truncation\n-            ReplayPosition truncatedAt = truncationPositions.get(cfs.metadata.cfId).left;\n+            Pair<ReplayPosition, Long> truncateRecord = truncationPositions.get(cfs.metadata.cfId);\n+            ReplayPosition truncatedAt = truncateRecord == null ? null : truncateRecord.left;\n             if (truncatedAt != null)\n                 rp = replayPositionOrdering.max(Arrays.asList(rp, truncatedAt));\n ", "filename": "src/java/org/apache/cassandra/db/commitlog/CommitLogReplayer.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/582b66fbdfbedd8eb14b16c9f6522067ea921a13", "parent": "https://github.com/apache/cassandra/commit/ecd66de2bdf2ecb88c4276a4616a76f5ec2921bb", "message": "Follow up to 10089 - fix possible NPE in Gossiper.getStateForVersionBiggerThan", "bug_id": "cassandra_24", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/582b66fbdfbedd8eb14b16c9f6522067ea921a13/src/java/org/apache/cassandra/gms/Gossiper.java", "blob_url": "https://github.com/apache/cassandra/blob/582b66fbdfbedd8eb14b16c9f6522067ea921a13/src/java/org/apache/cassandra/gms/Gossiper.java", "sha": "2f69d664cb6861f09dcb087cb091566b5a0b1bef", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/gms/Gossiper.java?ref=582b66fbdfbedd8eb14b16c9f6522067ea921a13", "patch": "@@ -887,7 +887,8 @@ EndpointState getStateForVersionBiggerThan(InetAddress forEndpoint, int version)\n                     states.put(key, value);\n                 }\n             }\n-            reqdEndpointState.addApplicationStates(states);\n+            if (reqdEndpointState != null)\n+                reqdEndpointState.addApplicationStates(states);\n         }\n         return reqdEndpointState;\n     }", "filename": "src/java/org/apache/cassandra/gms/Gossiper.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/5749fb1eaa81e4c6c6ba06bce38e3b29d17d398e", "parent": "https://github.com/apache/cassandra/commit/07a451ea0274ab75f4772aef741bf8aa83e86f91", "message": "Fix potential NPE", "bug_id": "cassandra_25", "file": [{"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/5749fb1eaa81e4c6c6ba06bce38e3b29d17d398e/src/java/org/apache/cassandra/db/ColumnFamilyStore.java", "blob_url": "https://github.com/apache/cassandra/blob/5749fb1eaa81e4c6c6ba06bce38e3b29d17d398e/src/java/org/apache/cassandra/db/ColumnFamilyStore.java", "sha": "0a2eb1421e92e79d85ee66d0abe2fe810ac251dd", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=5749fb1eaa81e4c6c6ba06bce38e3b29d17d398e", "patch": "@@ -1725,6 +1725,9 @@ public ColumnFamily getColumnFamily(QueryFilter filter)\n      */\n     ColumnFamily filterColumnFamily(ColumnFamily cached, QueryFilter filter)\n     {\n+        if (cached == null)\n+            return null;\n+\n         ColumnFamily cf = cached.cloneMeShallow(ArrayBackedSortedColumns.factory, filter.filter.isReversed());\n         OnDiskAtomIterator ci = filter.getColumnFamilyIterator(cached);\n ", "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/60faac4340d959f9ce100430c84e1d26f7aa28af", "parent": "https://github.com/apache/cassandra/commit/ef92bb5f33bfcc10cf82d9764d4741f377374b48", "message": "Fix NPE when stream requestRanges", "bug_id": "cassandra_26", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/60faac4340d959f9ce100430c84e1d26f7aa28af/src/java/org/apache/cassandra/streaming/StreamCoordinator.java", "blob_url": "https://github.com/apache/cassandra/blob/60faac4340d959f9ce100430c84e1d26f7aa28af/src/java/org/apache/cassandra/streaming/StreamCoordinator.java", "sha": "ed94f89c3d1799d50b81bdc965d32bf2d76ab3ba", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamCoordinator.java?ref=60faac4340d959f9ce100430c84e1d26f7aa28af", "patch": "@@ -223,7 +223,7 @@ public StreamSession getOrCreateNextSession(InetAddress peer)\n             // get\n             else\n             {\n-                if (lastReturned == streamSessions.size() - 1)\n+                if (lastReturned >= streamSessions.size() - 1)\n                     lastReturned = 0;\n \n                 return streamSessions.get(lastReturned++);", "filename": "src/java/org/apache/cassandra/streaming/StreamCoordinator.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/0d7b232bdb406c2a49784f175ea4c8ab9e245cef", "parent": "https://github.com/apache/cassandra/commit/f50e9321f78a644a69383b410b165367b72435c5", "message": "Fix coverity warning for potential NPE (CASSANDRA-6717 follow up)", "bug_id": "cassandra_27", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/0d7b232bdb406c2a49784f175ea4c8ab9e245cef/src/java/org/apache/cassandra/schema/SchemaKeyspace.java", "blob_url": "https://github.com/apache/cassandra/blob/0d7b232bdb406c2a49784f175ea4c8ab9e245cef/src/java/org/apache/cassandra/schema/SchemaKeyspace.java", "sha": "f93ccfdc79d92950451287374d487bcd2dcb0f7b", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/schema/SchemaKeyspace.java?ref=0d7b232bdb406c2a49784f175ea4c8ab9e245cef", "patch": "@@ -1434,13 +1434,13 @@ private static IndexMetadata createIndexMetadataFromIndexesRow(CFMetaData cfm, U\n \n         Set<String> targetColumnNames = row.getSet(\"target_columns\", UTF8Type.instance);\n         assert targetType == IndexMetadata.TargetType.COLUMN : \"Per row indexes with dynamic target columns are not supported yet\";\n-        assert targetColumnNames.size() == 1 : \"Secondary indexes targetting multiple columns are not supported yet\";\n \n         Set<ColumnIdentifier> targetColumns = new HashSet<>();\n         // if it's not a CQL table, we can't assume that the column name is utf8, so\n         // in that case we have to do a linear scan of the cfm's columns to get the matching one\n         if (targetColumnNames != null)\n         {\n+            assert targetColumnNames.size() == 1 : \"Secondary indexes targetting multiple columns are not supported yet\";\n             targetColumnNames.forEach(targetColumnName -> {\n                 if (cfm.isCQLTable())\n                     targetColumns.add(ColumnIdentifier.getInterned(targetColumnName, true));", "filename": "src/java/org/apache/cassandra/schema/SchemaKeyspace.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2", "parent": "https://github.com/apache/cassandra/commit/9c564f10fddce15746e81f003798ddddd023522b", "message": "avoid npe chance, use == with enums", "bug_id": "cassandra_28", "file": [{"additions": 6, "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/auth/DataResource.java", "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/auth/DataResource.java", "sha": "75a3fdf3dc25f91636745c68b3e2402a88a87bba", "changes": 10, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/auth/DataResource.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2", "patch": "@@ -152,17 +152,17 @@ public IResource getParent()\n \n     public boolean isRootLevel()\n     {\n-        return level.equals(Level.ROOT);\n+        return level == Level.ROOT;\n     }\n \n     public boolean isKeyspaceLevel()\n     {\n-        return level.equals(Level.KEYSPACE);\n+        return level == Level.KEYSPACE;\n     }\n \n     public boolean isColumnFamilyLevel()\n     {\n-        return level.equals(Level.COLUMN_FAMILY);\n+        return level == Level.COLUMN_FAMILY;\n     }\n     /**\n      * @return keyspace of the resource. Throws IllegalStateException if it's the root-level resource.\n@@ -187,14 +187,16 @@ public String getColumnFamily()\n     /**\n      * @return Whether or not the resource has a parent in the hierarchy.\n      */\n+    @Override\n     public boolean hasParent()\n     {\n-        return !level.equals(Level.ROOT);\n+        return level != Level.ROOT;\n     }\n \n     /**\n      * @return Whether or not the resource exists in Cassandra.\n      */\n+    @Override\n     public boolean exists()\n     {\n         switch (level)", "filename": "src/java/org/apache/cassandra/auth/DataResource.java"}, {"additions": 6, "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/cache/CachingOptions.java", "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/cache/CachingOptions.java", "sha": "c2605f58479b007c89b0a792ff42a1bf778fe711", "changes": 12, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cache/CachingOptions.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2", "patch": "@@ -188,7 +188,7 @@ public static KeyCache fromString(String keyCache)\n \n         public boolean isEnabled()\n         {\n-            return type.equals(Type.ALL);\n+            return type == Type.ALL;\n         }\n \n         @Override\n@@ -223,7 +223,7 @@ public String toString()\n \n         public RowCache(Type type)\n         {\n-            this(type, type.equals(Type.ALL) ? Integer.MAX_VALUE : 0);\n+            this(type, (type == Type.ALL) ? Integer.MAX_VALUE : 0);\n         }\n         public RowCache(Type type, int rowsToCache)\n         {\n@@ -246,17 +246,17 @@ else if (rowCache.equalsIgnoreCase(\"all\"))\n         }\n         public boolean isEnabled()\n         {\n-            return type.equals(Type.ALL) || type.equals(Type.HEAD);\n+            return (type == Type.ALL) || (type == Type.HEAD);\n         }\n         public boolean cacheFullPartitions()\n         {\n-            return type.equals(Type.ALL);\n+            return type == Type.ALL;\n         }\n         @Override\n         public String toString()\n         {\n-            if (type.equals(Type.ALL)) return \"ALL\";\n-            if (type.equals(Type.NONE)) return \"NONE\";\n+            if (type == Type.ALL) return \"ALL\";\n+            if (type == Type.NONE) return \"NONE\";\n             return String.valueOf(rowsToCache);\n         }\n ", "filename": "src/java/org/apache/cassandra/cache/CachingOptions.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/config/CFMetaData.java", "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/config/CFMetaData.java", "sha": "23c1b8b639328f01afb19f15e3c3c1584b395813", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/CFMetaData.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2", "patch": "@@ -815,7 +815,7 @@ public void validateCompatility(CFMetaData cfm) throws ConfigurationException\n             throw new ConfigurationException(String.format(\"Column family ID mismatch (found %s; expected %s)\",\n                                                            cfm.cfId, cfId));\n \n-        if (!cfm.cfType.equals(cfType))\n+        if (cfm.cfType != cfType)\n             throw new ConfigurationException(\"types do not match.\");\n \n         if (!cfm.comparator.isCompatibleWith(comparator))", "filename": "src/java/org/apache/cassandra/config/CFMetaData.java"}, {"additions": 17, "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/cql3/ColumnCondition.java", "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/cql3/ColumnCondition.java", "sha": "a8c8cc2ada36c9c163f3d9310384c91226a1fc27", "changes": 34, "status": "modified", "deletions": 17, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/ColumnCondition.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2", "patch": "@@ -59,7 +59,7 @@ private ColumnCondition(ColumnDefinition column, Term collectionElement, Term va\n         this.inValues = inValues;\n         this.operator = op;\n \n-        if (!operator.equals(Operator.IN))\n+        if (operator != Operator.IN)\n             assert this.inValues == null;\n     }\n \n@@ -117,7 +117,7 @@ public void collectMarkerSpecification(VariableSpecifications boundNames)\n         if (collectionElement != null)\n             collectionElement.collectMarkerSpecification(boundNames);\n \n-        if (operator.equals(Operator.IN) && inValues != null)\n+        if ((operator == Operator.IN) && inValues != null)\n         {\n             for (Term value : inValues)\n                 value.collectMarkerSpecification(boundNames);\n@@ -130,7 +130,7 @@ public void collectMarkerSpecification(VariableSpecifications boundNames)\n \n     public ColumnCondition.Bound bind(QueryOptions options) throws InvalidRequestException\n     {\n-        boolean isInCondition = operator.equals(Operator.IN);\n+        boolean isInCondition = operator == Operator.IN;\n         if (column.type instanceof CollectionType)\n         {\n             if (collectionElement == null)\n@@ -186,7 +186,7 @@ protected boolean compareWithOperator(Operator operator, AbstractType<?> type, B\n             else if (otherValue == null)\n             {\n                 // the condition value is not null, so only NEQ can return true\n-                return operator.equals(Operator.NEQ);\n+                return operator == Operator.NEQ;\n             }\n             int comparison = type.compare(otherValue, value);\n             switch (operator)\n@@ -236,7 +236,7 @@ private SimpleBound(ColumnCondition condition, QueryOptions options) throws Inva\n         {\n             super(condition.column, condition.operator);\n             assert !(column.type instanceof CollectionType) && condition.collectionElement == null;\n-            assert !condition.operator.equals(Operator.IN);\n+            assert condition.operator != Operator.IN;\n             this.value = condition.value.bindAndGet(options);\n         }\n \n@@ -258,7 +258,7 @@ private SimpleInBound(ColumnCondition condition, QueryOptions options) throws In\n         {\n             super(condition.column, condition.operator);\n             assert !(column.type instanceof CollectionType) && condition.collectionElement == null;\n-            assert condition.operator.equals(Operator.IN);\n+            assert condition.operator == Operator.IN;\n             if (condition.inValues == null)\n                 this.inValues = ((Lists.Marker) condition.value).bind(options).getElements();\n             else\n@@ -291,7 +291,7 @@ private ElementAccessBound(ColumnCondition condition, QueryOptions options) thro\n         {\n             super(condition.column, condition.operator);\n             assert column.type instanceof CollectionType && condition.collectionElement != null;\n-            assert !condition.operator.equals(Operator.IN);\n+            assert condition.operator != Operator.IN;\n             this.collectionElement = condition.collectionElement.bindAndGet(options);\n             this.value = condition.value.bindAndGet(options);\n         }\n@@ -468,7 +468,7 @@ private CollectionBound(ColumnCondition condition, QueryOptions options) throws\n         {\n             super(condition.column, condition.operator);\n             assert column.type.isCollection() && condition.collectionElement == null;\n-            assert !condition.operator.equals(Operator.IN);\n+            assert condition.operator != Operator.IN;\n             this.value = condition.value.bind(options);\n         }\n \n@@ -481,9 +481,9 @@ public boolean appliesTo(Composite rowPrefix, ColumnFamily current, final long n\n                 Iterator<Cell> iter = collectionColumns(current.metadata().comparator.create(rowPrefix, column), current, now);\n                 if (value == null)\n                 {\n-                    if (operator.equals(Operator.EQ))\n+                    if (operator == Operator.EQ)\n                         return !iter.hasNext();\n-                    else if (operator.equals(Operator.NEQ))\n+                    else if (operator == Operator.NEQ)\n                         return iter.hasNext();\n                     else\n                         throw new InvalidRequestException(String.format(\"Invalid comparison with null for operator \\\"%s\\\"\", operator));\n@@ -535,7 +535,7 @@ private static boolean setOrListAppliesTo(AbstractType<?> type, Iterator<Cell> i\n             while(iter.hasNext())\n             {\n                 if (!conditionIter.hasNext())\n-                    return operator.equals(Operator.GT) || operator.equals(Operator.GTE) || operator.equals(Operator.NEQ);\n+                    return (operator == Operator.GT) || (operator == Operator.GTE) || (operator == Operator.NEQ);\n \n                 // for lists we use the cell value; for sets we use the cell name\n                 ByteBuffer cellValue = isSet? iter.next().name().collectionElement() : iter.next().value();\n@@ -545,7 +545,7 @@ private static boolean setOrListAppliesTo(AbstractType<?> type, Iterator<Cell> i\n             }\n \n             if (conditionIter.hasNext())\n-                return operator.equals(Operator.LT) || operator.equals(Operator.LTE) || operator.equals(Operator.NEQ);\n+                return (operator == Operator.LT) || (operator == Operator.LTE) || (operator == Operator.NEQ);\n \n             // they're equal\n             return operator == Operator.EQ || operator == Operator.LTE || operator == Operator.GTE;\n@@ -590,7 +590,7 @@ static boolean mapAppliesTo(MapType type, Iterator<Cell> iter, Map<ByteBuffer, B\n             while(iter.hasNext())\n             {\n                 if (!conditionIter.hasNext())\n-                    return operator.equals(Operator.GT) || operator.equals(Operator.GTE) || operator.equals(Operator.NEQ);\n+                    return (operator == Operator.GT) || (operator == Operator.GTE) || (operator == Operator.NEQ);\n \n                 Map.Entry<ByteBuffer, ByteBuffer> conditionEntry = conditionIter.next();\n                 Cell c = iter.next();\n@@ -607,7 +607,7 @@ static boolean mapAppliesTo(MapType type, Iterator<Cell> iter, Map<ByteBuffer, B\n             }\n \n             if (conditionIter.hasNext())\n-                return operator.equals(Operator.LT) || operator.equals(Operator.LTE) || operator.equals(Operator.NEQ);\n+                return (operator == Operator.LT) || (operator == Operator.LTE) || (operator == Operator.NEQ);\n \n             // they're equal\n             return operator == Operator.EQ || operator == Operator.LTE || operator == Operator.GTE;\n@@ -622,7 +622,7 @@ private CollectionInBound(ColumnCondition condition, QueryOptions options) throw\n         {\n             super(condition.column, condition.operator);\n             assert column.type instanceof CollectionType && condition.collectionElement == null;\n-            assert condition.operator.equals(Operator.IN);\n+            assert condition.operator == Operator.IN;\n             inValues = new ArrayList<>();\n             if (condition.inValues == null)\n             {\n@@ -768,7 +768,7 @@ public ColumnCondition prepare(String keyspace, ColumnDefinition receiver) throw\n \n             if (collectionElement == null)\n             {\n-                if (operator.equals(Operator.IN))\n+                if (operator == Operator.IN)\n                 {\n                     if (inValues == null)\n                         return ColumnCondition.inCondition(receiver, inMarker.prepare(keyspace, receiver));\n@@ -802,7 +802,7 @@ public ColumnCondition prepare(String keyspace, ColumnDefinition receiver) throw\n                 default:\n                     throw new AssertionError();\n             }\n-            if (operator.equals(Operator.IN))\n+            if (operator == Operator.IN)\n             {\n                 if (inValues == null)\n                     return ColumnCondition.inCondition(receiver, collectionElement.prepare(keyspace, elementSpec), inMarker.prepare(keyspace, valueSpec));", "filename": "src/java/org/apache/cassandra/cql3/ColumnCondition.java"}, {"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java", "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java", "sha": "960abaa788b3f40642acda2f1e43395608513a75", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2", "patch": "@@ -1422,7 +1422,7 @@ public RawStatement(CFName cfName, Parameters parameters, List<RawSelector> sele\n                         hasQueriableIndex |= queriable[0];\n                         hasQueriableClusteringColumnIndex |= queriable[1];\n                         names.add(def);\n-                        hasMultiColumnRelations |= ColumnDefinition.Kind.CLUSTERING_COLUMN.equals(def.kind);\n+                        hasMultiColumnRelations |= ColumnDefinition.Kind.CLUSTERING_COLUMN == def.kind;\n                     }\n                     updateRestrictionsForRelation(stmt, names, rel, boundNames);\n                 }\n@@ -1434,7 +1434,7 @@ public RawStatement(CFName cfName, Parameters parameters, List<RawSelector> sele\n                     boolean[] queriable = processRelationEntity(stmt, indexManager, relation, entity, def);\n                     hasQueriableIndex |= queriable[0];\n                     hasQueriableClusteringColumnIndex |= queriable[1];\n-                    hasSingleColumnRelations |= ColumnDefinition.Kind.CLUSTERING_COLUMN.equals(def.kind);\n+                    hasSingleColumnRelations |= ColumnDefinition.Kind.CLUSTERING_COLUMN == def.kind;\n                     updateRestrictionsForRelation(stmt, def, rel, boundNames);\n                 }\n             }", "filename": "src/java/org/apache/cassandra/cql3/statements/SelectStatement.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/db/DataTracker.java", "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/db/DataTracker.java", "sha": "f8b9376b927ba24e7b64588dab62940bc6224bdd", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/DataTracker.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2", "patch": "@@ -312,7 +312,7 @@ public void replaceWithNewInstances(Collection<SSTableReader> toReplace, Collect\n     public void replaceEarlyOpenedFiles(Collection<SSTableReader> toReplace, Collection<SSTableReader> replaceWith)\n     {\n         for (SSTableReader s : toReplace)\n-            assert s.openReason.equals(SSTableReader.OpenReason.EARLY);\n+            assert s.openReason == SSTableReader.OpenReason.EARLY;\n         // note that we can replace an early opened file with a real one\n         replaceReaders(toReplace, replaceWith, false);\n     }", "filename": "src/java/org/apache/cassandra/db/DataTracker.java"}, {"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/service/ClientState.java", "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/service/ClientState.java", "sha": "9c8d7d86e43507c8fb157f6e7bfb4f820099d38b", "changes": 8, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/ClientState.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2", "patch": "@@ -235,10 +235,10 @@ private void hasAccess(String keyspace, Permission perm, DataResource resource)\n             return;\n         validateLogin();\n         preventSystemKSSchemaModification(keyspace, resource, perm);\n-        if (perm.equals(Permission.SELECT) && READABLE_SYSTEM_RESOURCES.contains(resource))\n+        if ((perm == Permission.SELECT) && READABLE_SYSTEM_RESOURCES.contains(resource))\n             return;\n         if (PROTECTED_AUTH_RESOURCES.contains(resource))\n-            if (perm.equals(Permission.CREATE) || perm.equals(Permission.ALTER) || perm.equals(Permission.DROP))\n+            if ((perm == Permission.CREATE) || (perm == Permission.ALTER) || (perm == Permission.DROP))\n                 throw new UnauthorizedException(String.format(\"%s schema is protected\", resource));\n         ensureHasPermission(perm, resource);\n     }\n@@ -258,7 +258,7 @@ public void ensureHasPermission(Permission perm, IResource resource) throws Unau\n     private void preventSystemKSSchemaModification(String keyspace, DataResource resource, Permission perm) throws UnauthorizedException\n     {\n         // we only care about schema modification.\n-        if (!(perm.equals(Permission.ALTER) || perm.equals(Permission.DROP) || perm.equals(Permission.CREATE)))\n+        if (!((perm == Permission.ALTER) || (perm == Permission.DROP) || (perm == Permission.CREATE)))\n             return;\n \n         // prevent system keyspace modification\n@@ -267,7 +267,7 @@ private void preventSystemKSSchemaModification(String keyspace, DataResource res\n \n         // we want to allow altering AUTH_KS and TRACING_KS.\n         Set<String> allowAlter = Sets.newHashSet(Auth.AUTH_KS, TraceKeyspace.NAME);\n-        if (allowAlter.contains(keyspace.toLowerCase()) && !(resource.isKeyspaceLevel() && perm.equals(Permission.ALTER)))\n+        if (allowAlter.contains(keyspace.toLowerCase()) && !(resource.isKeyspaceLevel() && (perm == Permission.ALTER)))\n             throw new UnauthorizedException(String.format(\"Cannot %s %s\", perm, resource));\n     }\n ", "filename": "src/java/org/apache/cassandra/service/ClientState.java"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/service/StorageService.java", "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/service/StorageService.java", "sha": "9cc643babaf0846b8f9340da4cdb48de92c942ba", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2", "patch": "@@ -1335,7 +1335,7 @@ public void beforeChange(InetAddress endpoint, EndpointState currentState, Appli\n      */\n     public void onChange(InetAddress endpoint, ApplicationState state, VersionedValue value)\n     {\n-        if (state.equals(ApplicationState.STATUS))\n+        if (state == ApplicationState.STATUS)\n         {\n             String apStateValue = value.value;\n             String[] pieces = apStateValue.split(VersionedValue.DELIMITER_STR, -1);\n@@ -2194,7 +2194,7 @@ public void forceKeyspaceCompaction(String keyspaceName, String... columnFamilie\n      */\n     public void takeSnapshot(String tag, String... keyspaceNames) throws IOException\n     {\n-        if (operationMode.equals(Mode.JOINING))\n+        if (operationMode == Mode.JOINING)\n             throw new IOException(\"Cannot snapshot until bootstrap completes\");\n         if (tag == null || tag.equals(\"\"))\n             throw new IOException(\"You must supply a snapshot name.\");\n@@ -2233,7 +2233,7 @@ public void takeColumnFamilySnapshot(String keyspaceName, String columnFamilyNam\n     {\n         if (keyspaceName == null)\n             throw new IOException(\"You must supply a keyspace name\");\n-        if (operationMode.equals(Mode.JOINING))\n+        if (operationMode == Mode.JOINING)\n             throw new IOException(\"Cannot snapshot until bootstrap completes\");\n \n         if (columnFamilyName == null)", "filename": "src/java/org/apache/cassandra/service/StorageService.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/893fd21b52254b1f7d68d87f6cf5f77f3010734b", "parent": "https://github.com/apache/cassandra/commit/fa14804543e9ed2cc781d9f8511ab7a5c22f8dd7", "message": "Fix NPE in SSTableLoader when specifying partial directory path\n\npatch by hkroger reviewed by dbrosius for CASSANDRA-12609", "bug_id": "cassandra_29", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/893fd21b52254b1f7d68d87f6cf5f77f3010734b/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/893fd21b52254b1f7d68d87f6cf5f77f3010734b/CHANGES.txt", "sha": "798496af336deaf47ee146c8fec23a232f9603ed", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=893fd21b52254b1f7d68d87f6cf5f77f3010734b", "patch": "@@ -48,6 +48,7 @@\n  * Avoid digest mismatch with empty but static rows (CASSANDRA-12090)\n  * Fix EOF exception when altering column type (CASSANDRA-11820)\n  * Fix JsonTransformer output of partition with deletion info (CASSANDRA-12418)\n+ * Fix NPE in SSTableLoader when specifying partial directory path (CASSANDRA-12609)\n Merged from 2.2:\n  * Add local address entry in PropertyFileSnitch (CASSANDRA-11332)\n  * cqlshlib tests: increase default execute timeout (CASSANDRA-12481)", "filename": "CHANGES.txt"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/893fd21b52254b1f7d68d87f6cf5f77f3010734b/src/java/org/apache/cassandra/tools/BulkLoader.java", "blob_url": "https://github.com/apache/cassandra/blob/893fd21b52254b1f7d68d87f6cf5f77f3010734b/src/java/org/apache/cassandra/tools/BulkLoader.java", "sha": "9dba1b2531d372af30792ba5624c1edb36abbb5d", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/tools/BulkLoader.java?ref=893fd21b52254b1f7d68d87f6cf5f77f3010734b", "patch": "@@ -77,7 +77,7 @@ public static void main(String args[])\n         LoaderOptions options = LoaderOptions.parseArgs(args).validateArguments();\n         OutputHandler handler = new OutputHandler.SystemOutput(options.verbose, options.debug);\n         SSTableLoader loader = new SSTableLoader(\n-                options.directory,\n+                options.directory.getAbsoluteFile(),\n                 new ExternalClient(\n                         options.hosts,\n                         options.nativePort,", "filename": "src/java/org/apache/cassandra/tools/BulkLoader.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/c20b33c93775f62a638a8725dc07b00142aae252", "parent": "https://github.com/apache/cassandra/commit/c4692a1713e5abe1446954c9202aebe0f2d3ec81", "message": "Avoid NPE (and cleanups)", "bug_id": "cassandra_30", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/c20b33c93775f62a638a8725dc07b00142aae252/src/java/org/apache/cassandra/cql3/statements/BatchStatement.java", "blob_url": "https://github.com/apache/cassandra/blob/c20b33c93775f62a638a8725dc07b00142aae252/src/java/org/apache/cassandra/cql3/statements/BatchStatement.java", "sha": "ac78c8937975bba61f98a33aae8f945e7fcb18d8", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/BatchStatement.java?ref=c20b33c93775f62a638a8725dc07b00142aae252", "patch": "@@ -103,7 +103,7 @@ public void validate(ClientState state) throws InvalidRequestException\n         for (ModificationStatement statement : statements)\n         {\n             if (isSetTimestamp())\n-                statement.timestamp = timestamp;\n+                statement.setTimestamp(getTimestamp(clientState));\n \n             List<IMutation> lm = statement.getMutations(clientState, variables);\n             // Group mutation together, otherwise they won't get applied atomically\n@@ -164,7 +164,7 @@ public void validate(ClientState state) throws InvalidRequestException\n \n     public String toString()\n     {\n-        return String.format(\"BatchStatement(statements=%s, consistency=%s)\", statements, cLevel);\n+        return String.format(\"BatchStatement(statements=%s, consistency=%s)\", statements, getConsistencyLevel());\n     }\n \n     private static class RowAndCounterMutation", "filename": "src/java/org/apache/cassandra/cql3/statements/BatchStatement.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/c20b33c93775f62a638a8725dc07b00142aae252/src/java/org/apache/cassandra/cql3/statements/DeleteStatement.java", "blob_url": "https://github.com/apache/cassandra/blob/c20b33c93775f62a638a8725dc07b00142aae252/src/java/org/apache/cassandra/cql3/statements/DeleteStatement.java", "sha": "73f7c0fda564736434ebbc701c73e6196501f887", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/DeleteStatement.java?ref=c20b33c93775f62a638a8725dc07b00142aae252", "patch": "@@ -231,7 +231,7 @@ public String toString()\n         return String.format(\"DeleteStatement(name=%s, columns=%s, consistency=%s keys=%s)\",\n                              cfName,\n                              columns,\n-                             cLevel,\n+                             getConsistencyLevel(),\n                              whereClause);\n     }\n }", "filename": "src/java/org/apache/cassandra/cql3/statements/DeleteStatement.java"}, {"additions": 8, "raw_url": "https://github.com/apache/cassandra/raw/c20b33c93775f62a638a8725dc07b00142aae252/src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java", "blob_url": "https://github.com/apache/cassandra/blob/c20b33c93775f62a638a8725dc07b00142aae252/src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java", "sha": "291ecd9561e367586a8d6a0de0e8c39c164b5112", "changes": 11, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java?ref=c20b33c93775f62a638a8725dc07b00142aae252", "patch": "@@ -42,9 +42,9 @@\n {\n     public static final ConsistencyLevel defaultConsistency = ConsistencyLevel.ONE;\n \n-    protected final ConsistencyLevel cLevel;\n-    protected Long timestamp;\n-    protected final int timeToLive;\n+    private final ConsistencyLevel cLevel;\n+    private Long timestamp;\n+    private final int timeToLive;\n \n     public ModificationStatement(CFName name, Attributes attrs)\n     {\n@@ -98,6 +98,11 @@ public long getTimestamp(ClientState clientState)\n         return timestamp == null ? clientState.getTimestamp() : timestamp;\n     }\n \n+    public void setTimestamp(long timestamp)\n+    {\n+        this.timestamp = timestamp;\n+    }\n+\n     public boolean isSetTimestamp()\n     {\n         return timestamp != null;", "filename": "src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java"}, {"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/c20b33c93775f62a638a8725dc07b00142aae252/src/java/org/apache/cassandra/cql3/statements/UpdateStatement.java", "blob_url": "https://github.com/apache/cassandra/blob/c20b33c93775f62a638a8725dc07b00142aae252/src/java/org/apache/cassandra/cql3/statements/UpdateStatement.java", "sha": "a31d7cb202be180e727a092373182c4b65b1da78", "changes": 8, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/UpdateStatement.java?ref=c20b33c93775f62a638a8725dc07b00142aae252", "patch": "@@ -130,7 +130,7 @@ public UpdateStatement(CFName name,\n         Map<ByteBuffer, ColumnGroupMap> rows = needsReading ? readRows(keys, builder, (CompositeType)cfDef.cfm.comparator) : null;\n \n         List<IMutation> rowMutations = new LinkedList<IMutation>();\n-        UpdateParameters params = new UpdateParameters(variables, getTimestamp(clientState), timeToLive);\n+        UpdateParameters params = new UpdateParameters(variables, getTimestamp(clientState), getTimeToLive());\n \n         for (ByteBuffer key: keys)\n             rowMutations.add(mutationForKey(cfDef, key, builder, params, rows == null ? null : rows.get(key)));\n@@ -304,7 +304,7 @@ private boolean addToMutation(ColumnFamily cf,\n         // Deal here with the keyspace overwrite thingy to avoid mistake\n         CFMetaData metadata = validateColumnFamily(keyspace(), columnFamily(), hasCommutativeOperation);\n         if (hasCommutativeOperation)\n-            cLevel.validateCounterForWrite(metadata);\n+            getConsistencyLevel().validateCounterForWrite(metadata);\n \n         cfDef = metadata.getCfDef();\n \n@@ -429,7 +429,7 @@ public String toString()\n                              whereClause,\n                              columns,\n                              getConsistencyLevel(),\n-                             timestamp,\n-                             timeToLive);\n+                             isSetTimestamp() ? getTimestamp(null) : \"<now>\",\n+                             getTimeToLive());\n     }\n }", "filename": "src/java/org/apache/cassandra/cql3/statements/UpdateStatement.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/aae0dfc92aa6e17e1b977788ec8a4280cd4fce42", "parent": "https://github.com/apache/cassandra/commit/6a858a30d61fb6a575521bce9afa9448b5c309c1", "message": "fix potential NPE", "bug_id": "cassandra_31", "file": [{"additions": 6, "raw_url": "https://github.com/apache/cassandra/raw/aae0dfc92aa6e17e1b977788ec8a4280cd4fce42/src/java/org/apache/cassandra/net/MessagingService.java", "blob_url": "https://github.com/apache/cassandra/blob/aae0dfc92aa6e17e1b977788ec8a4280cd4fce42/src/java/org/apache/cassandra/net/MessagingService.java", "sha": "9c9240290afc6e84b90230f6012486dae9fba3fa", "changes": 8, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/net/MessagingService.java?ref=aae0dfc92aa6e17e1b977788ec8a4280cd4fce42", "patch": "@@ -764,10 +764,14 @@ public ByteBuffer constructStreamHeader(StreamHeader streamHeader, boolean compr\n         return buffer;\n     }\n \n-    public Integer setVersion(InetAddress address, int version)\n+    /**\n+     * @return the last version associated with address, or @param version if this is the first such version\n+     */\n+    public int setVersion(InetAddress address, int version)\n     {\n         logger.debug(\"Setting version {} for {}\", version, address);\n-        return versions.put(address, version);\n+        Integer v = versions.put(address, version);\n+        return v == null ? version : v;\n     }\n \n     public void resetVersion(InetAddress endpoint)", "filename": "src/java/org/apache/cassandra/net/MessagingService.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/9002e76d6971c3035a439209a9f2e5b8c2465247", "parent": "https://github.com/apache/cassandra/commit/95e09f262ce8d448e8bbbd17aa9c77f6546d5ed1", "message": "Avoid NPE when doing CFS.scrubDataDirectories", "bug_id": "cassandra_32", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/9002e76d6971c3035a439209a9f2e5b8c2465247/src/java/org/apache/cassandra/db/ColumnFamilyStore.java", "blob_url": "https://github.com/apache/cassandra/blob/9002e76d6971c3035a439209a9f2e5b8c2465247/src/java/org/apache/cassandra/db/ColumnFamilyStore.java", "sha": "bfd3b08a9f25e45bfa0c6ba67a6027d99922efb7", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=9002e76d6971c3035a439209a9f2e5b8c2465247", "patch": "@@ -434,7 +434,8 @@ public boolean accept(File pathname)\n         for (File dir : directories.getCFDirectories())\n         {\n             File[] lockfiles = dir.listFiles(filter);\n-            if (lockfiles.length == 0)\n+            // lock files can be null if I/O error happens\n+            if (lockfiles == null || lockfiles.length == 0)\n                 continue;\n             logger.info(\"Removing SSTables from failed streaming session. Found {} files to cleanup.\", lockfiles.length);\n ", "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/30f5d44d8cc53726fc9a17b6df4928ccd23af977", "parent": "https://github.com/apache/cassandra/commit/778f2a46e2df52aa8451aceaf17046e6b8c86ace", "message": "Merge commit 'ef18a17' into cassandra-3.0\n\n* commit 'ef18a17':\n  NPE when trying to remove purgable tombstones from result", "bug_id": "cassandra_33", "file": [], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/ef18a1768a6589eac212a7f320f9748ca6dc8371", "parent": "https://github.com/apache/cassandra/commit/00e7ecf1394f8704e2f13369f7950e129459ce2c", "message": "NPE when trying to remove purgable tombstones from result\n\npatch by mck; reviewed by Sylvain Lebresne for CASSANDRA-12143", "bug_id": "cassandra_34", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/ef18a1768a6589eac212a7f320f9748ca6dc8371/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/ef18a1768a6589eac212a7f320f9748ca6dc8371/CHANGES.txt", "sha": "e10af6f046ad53131bd3e969bf74ab67455b7bb0", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=ef18a1768a6589eac212a7f320f9748ca6dc8371", "patch": "@@ -1,4 +1,5 @@\n 2.2.8\n+ * NPE when trying to remove purgable tombstones from result (CASSANDRA-12143)\n  * Improve streaming synchronization and fault tolerance (CASSANDRA-11414)\n  * MemoryUtil.getShort() should return an unsigned short also for architectures not supporting unaligned memory accesses (CASSANDRA-11973)\n Merged from 2.1:", "filename": "CHANGES.txt"}, {"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/ef18a1768a6589eac212a7f320f9748ca6dc8371/src/java/org/apache/cassandra/db/ColumnFamilyStore.java", "blob_url": "https://github.com/apache/cassandra/blob/ef18a1768a6589eac212a7f320f9748ca6dc8371/src/java/org/apache/cassandra/db/ColumnFamilyStore.java", "sha": "ff63163fe7b50f5de9e2e6bc1e9a8a6de291d242", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=ef18a1768a6589eac212a7f320f9748ca6dc8371", "patch": "@@ -2347,7 +2347,8 @@ public ExtendedFilter makeExtendedFilter(AbstractBounds<RowPosition> range,\n                 }\n \n                 // remove purgable tombstones from result - see CASSANDRA-11427\n-                data.purgeTombstones(gcBefore(filter.timestamp));\n+                if (data != null)\n+                    data.purgeTombstones(gcBefore(filter.timestamp));\n \n                 rows.add(new Row(rawRow.key, data));\n                 if (!ignoreTombstonedPartitions || !data.hasOnlyTombstones(filter.timestamp))", "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java"}, {"additions": 41, "raw_url": "https://github.com/apache/cassandra/raw/ef18a1768a6589eac212a7f320f9748ca6dc8371/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java", "blob_url": "https://github.com/apache/cassandra/blob/ef18a1768a6589eac212a7f320f9748ca6dc8371/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java", "sha": "2d67baf735c17282e0cdcc7f23e376781aa7f25f", "changes": 50, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java?ref=ef18a1768a6589eac212a7f320f9748ca6dc8371", "patch": "@@ -66,6 +66,7 @@\n import org.apache.cassandra.db.composites.CellNames;\n import org.apache.cassandra.db.composites.Composites;\n import org.apache.cassandra.db.filter.ColumnSlice;\n+import org.apache.cassandra.db.filter.ExtendedFilter;\n import org.apache.cassandra.db.filter.IDiskAtomFilter;\n import org.apache.cassandra.db.filter.NamesQueryFilter;\n import org.apache.cassandra.db.filter.QueryFilter;\n@@ -94,7 +95,6 @@\n import org.apache.cassandra.utils.FBUtilities;\n import org.apache.cassandra.utils.Pair;\n import org.apache.cassandra.utils.WrappedRunnable;\n-import org.apache.thrift.TException;\n \n import static org.apache.cassandra.Util.cellname;\n import static org.apache.cassandra.Util.column;\n@@ -245,6 +245,38 @@ public void runMayThrow() throws IOException\n         KeyspaceTest.reTest(store, r);\n     }\n \n+    @Test\n+    public void testFilterWithNullCF() throws Exception\n+    {\n+        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n+        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1);\n+        final Row row = new Row(Util.dk(\"key1\"), null);\n+\n+        ColumnFamilyStore.AbstractScanIterator iterator = new ColumnFamilyStore.AbstractScanIterator()\n+        {\n+            Iterator<Row> it = Collections.singletonList(row).iterator();\n+\n+            protected Row computeNext()\n+            {\n+                return it.hasNext() ? it.next() : endOfData();\n+            }\n+\n+            @Override\n+            public void close()\n+            {\n+            }\n+        };\n+\n+        ExtendedFilter filter = ExtendedFilter.create(\n+                cfs,\n+                DataRange.allData(DatabaseDescriptor.getPartitioner()), null, 1, true, System.currentTimeMillis());\n+\n+        List<Row> list = cfs.filter(iterator, filter);\n+        assert 1 == list.size();\n+        assert list.get(0).key == row.key;\n+        assert null == list.get(0).cf;\n+    }\n+\n     @Test\n     public void testSkipStartKey()\n     {\n@@ -571,7 +603,7 @@ public void testDeleteOfInconsistentValuesInKeysIndex() throws Exception\n         cfs.truncateBlocking();\n \n         ByteBuffer rowKey = ByteBufferUtil.bytes(\"k1\");\n-        CellName colName = cellname(\"birthdate\"); \n+        CellName colName = cellname(\"birthdate\");\n         ByteBuffer val1 = ByteBufferUtil.bytes(1L);\n         ByteBuffer val2 = ByteBufferUtil.bytes(2L);\n \n@@ -635,7 +667,7 @@ public void testDeleteOfInconsistentValuesFromCompositeIndex() throws Exception\n \n         ByteBuffer rowKey = ByteBufferUtil.bytes(\"k1\");\n         ByteBuffer clusterKey = ByteBufferUtil.bytes(\"ck1\");\n-        ByteBuffer colName = ByteBufferUtil.bytes(\"col1\"); \n+        ByteBuffer colName = ByteBufferUtil.bytes(\"col1\");\n \n         CellNameType baseComparator = cfs.getComparator();\n         CellName compositeName = baseComparator.makeCellName(clusterKey, colName);\n@@ -2291,7 +2323,7 @@ public String apply(Cell arg0)\n         });\n         System.err.println(\"Row key: \" + rowKey + \" Cols: \" + transformed);\n     }\n-    \n+\n     @Test\n     public void testRebuildSecondaryIndex() throws IOException\n     {\n@@ -2303,19 +2335,19 @@ public void testRebuildSecondaryIndex() throws IOException\n \n         rm.apply();\n         assertTrue(Arrays.equals(\"k1\".getBytes(), PerRowSecondaryIndexTest.TestIndex.LAST_INDEXED_KEY.array()));\n-        \n+\n         Keyspace.open(\"PerRowSecondaryIndex\").getColumnFamilyStore(\"Indexed1\").forceBlockingFlush();\n-        \n+\n         PerRowSecondaryIndexTest.TestIndex.reset();\n-        \n+\n         ColumnFamilyStore.rebuildSecondaryIndex(\"PerRowSecondaryIndex\", \"Indexed1\", PerRowSecondaryIndexTest.TestIndex.class.getSimpleName());\n         assertTrue(Arrays.equals(\"k1\".getBytes(), PerRowSecondaryIndexTest.TestIndex.LAST_INDEXED_KEY.array()));\n-        \n+\n         PerRowSecondaryIndexTest.TestIndex.reset();\n         PerRowSecondaryIndexTest.TestIndex.ACTIVE = false;\n         ColumnFamilyStore.rebuildSecondaryIndex(\"PerRowSecondaryIndex\", \"Indexed1\", PerRowSecondaryIndexTest.TestIndex.class.getSimpleName());\n         assertNull(PerRowSecondaryIndexTest.TestIndex.LAST_INDEXED_KEY);\n-        \n+\n         PerRowSecondaryIndexTest.TestIndex.reset();\n     }\n }", "filename": "test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/98cc2c8d6cc27f1a2e675030a13b46fd336812f8", "parent": "https://github.com/apache/cassandra/commit/1b02a6eb40f4cd25675e9b003b4beff1a375ac2d", "message": "Avoid NPE on incremental repair failure\n\nPatch by marcuse; reviewed by Carl Yeksigian for CASSANDRA-10909", "bug_id": "cassandra_35", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/98cc2c8d6cc27f1a2e675030a13b46fd336812f8/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/98cc2c8d6cc27f1a2e675030a13b46fd336812f8/CHANGES.txt", "sha": "717595309d49992a5033e882d10d56fe75b344dd", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=98cc2c8d6cc27f1a2e675030a13b46fd336812f8", "patch": "@@ -1,4 +1,5 @@\n 2.1.13\n+ * Avoid NPE when incremental repair fails (CASSANDRA-10909)\n  * Unmark sstables compacting once they are done in cleanup/scrub/upgradesstables (CASSANDRA-10829)\n  * Revert CASSANDRA-10012 and add more logging (CASSANDRA-10961)\n  * Allow simultaneous bootstrapping with strict consistency when no vnodes are used (CASSANDRA-11005)", "filename": "CHANGES.txt"}, {"additions": 5, "raw_url": "https://github.com/apache/cassandra/raw/98cc2c8d6cc27f1a2e675030a13b46fd336812f8/src/java/org/apache/cassandra/service/ActiveRepairService.java", "blob_url": "https://github.com/apache/cassandra/blob/98cc2c8d6cc27f1a2e675030a13b46fd336812f8/src/java/org/apache/cassandra/service/ActiveRepairService.java", "sha": "732267eaca172c7518339e4b793e06743e6cecad", "changes": 12, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/ActiveRepairService.java?ref=98cc2c8d6cc27f1a2e675030a13b46fd336812f8", "patch": "@@ -428,15 +428,17 @@ public void handleMessage(InetAddress endpoint, RepairMessage message)\n     {\n         public final Map<UUID, ColumnFamilyStore> columnFamilyStores = new HashMap<>();\n         public final Collection<Range<Token>> ranges;\n-        public final Map<UUID, Set<SSTableReader>> sstableMap;\n+        public final Map<UUID, Set<SSTableReader>> sstableMap = new HashMap<>();\n         public final long repairedAt;\n \n         public ParentRepairSession(List<ColumnFamilyStore> columnFamilyStores, Collection<Range<Token>> ranges, long repairedAt)\n         {\n             for (ColumnFamilyStore cfs : columnFamilyStores)\n+            {\n                 this.columnFamilyStores.put(cfs.metadata.cfId, cfs);\n+                sstableMap.put(cfs.metadata.cfId, new HashSet<SSTableReader>());\n+            }\n             this.ranges = ranges;\n-            this.sstableMap = new HashMap<>();\n             this.repairedAt = repairedAt;\n         }\n \n@@ -466,11 +468,7 @@ public ParentRepairSession(List<ColumnFamilyStore> columnFamilyStores, Collectio\n \n         public void addSSTables(UUID cfId, Collection<SSTableReader> sstables)\n         {\n-            Set<SSTableReader> existingSSTables = this.sstableMap.get(cfId);\n-            if (existingSSTables == null)\n-                existingSSTables = new HashSet<>();\n-            existingSSTables.addAll(sstables);\n-            this.sstableMap.put(cfId, existingSSTables);\n+            sstableMap.get(cfId).addAll(sstables);\n         }\n \n         @Override", "filename": "src/java/org/apache/cassandra/service/ActiveRepairService.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/4754cddfb980226326994b60383ef83baed06714", "parent": "https://github.com/apache/cassandra/commit/c35e55de455dc790264f0a9e72be19967cbadc8a", "message": "Fix non-fatal NPE in CompactionMetrics\n\npatch by Achal Shah; reviewed by Robert Stupp for CASSANDRA-11961", "bug_id": "cassandra_36", "file": [{"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/4754cddfb980226326994b60383ef83baed06714/src/java/org/apache/cassandra/metrics/CompactionMetrics.java", "blob_url": "https://github.com/apache/cassandra/blob/4754cddfb980226326994b60383ef83baed06714/src/java/org/apache/cassandra/metrics/CompactionMetrics.java", "sha": "9d2863fe49a79670dd7a6d841a2025f325f83ef5", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/metrics/CompactionMetrics.java?ref=4754cddfb980226326994b60383ef83baed06714", "patch": "@@ -100,6 +100,10 @@ public Integer getValue()\n                 for (CompactionInfo.Holder compaction : compactions)\n                 {\n                     CFMetaData metaData = compaction.getCompactionInfo().getCFMetaData();\n+                    if (metaData == null)\n+                    {\n+                        continue;\n+                    }\n                     if (!resultMap.containsKey(metaData.ksName))\n                     {\n                         resultMap.put(metaData.ksName, new HashMap<>());", "filename": "src/java/org/apache/cassandra/metrics/CompactionMetrics.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/a9a2d75b269cf5e53c40c69064d3478c1cd43643", "parent": "https://github.com/apache/cassandra/commit/b89037fe400b2b5097961c8276fa5c157b6cd49c", "message": "Fix NPE on stream read error\n\npatch by yukim; reviewed by jmckenzie for CASSANDRA-10771", "bug_id": "cassandra_37", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/a9a2d75b269cf5e53c40c69064d3478c1cd43643/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/a9a2d75b269cf5e53c40c69064d3478c1cd43643/CHANGES.txt", "sha": "a82dcfc28b520ea2d183493053683190cce0eb02", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=a9a2d75b269cf5e53c40c69064d3478c1cd43643", "patch": "@@ -1,4 +1,5 @@\n 3.0.1\n+ * Fix NPE on stream read error (CASSANDRA-10771)\n  * Normalize cqlsh DESC output (CASSANDRA-10431)\n  * Rejects partition range deletions when columns are specified (CASSANDRA-10739)\n  * Fix error when saving cached key for old format sstable (CASSANDRA-10778)", "filename": "CHANGES.txt"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/a9a2d75b269cf5e53c40c69064d3478c1cd43643/src/java/org/apache/cassandra/streaming/StreamReader.java", "blob_url": "https://github.com/apache/cassandra/blob/a9a2d75b269cf5e53c40c69064d3478c1cd43643/src/java/org/apache/cassandra/streaming/StreamReader.java", "sha": "87dcda01d02166e15103b3bca0cd463dbbe3d258", "changes": 4, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamReader.java?ref=a9a2d75b269cf5e53c40c69064d3478c1cd43643", "patch": "@@ -116,9 +116,7 @@ public SSTableMultiWriter read(ReadableByteChannel channel) throws IOException\n         {\n             if (writer != null)\n             {\n-                Throwable e2 = writer.abort(null);\n-                // add abort error to original and continue so we can drain unread stream\n-                e.addSuppressed(e2);\n+                writer.abort(e);\n             }\n             drain(dis, in.getBytesRead());\n             if (e instanceof IOException)", "filename": "src/java/org/apache/cassandra/streaming/StreamReader.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/a9a2d75b269cf5e53c40c69064d3478c1cd43643/src/java/org/apache/cassandra/streaming/compress/CompressedStreamReader.java", "blob_url": "https://github.com/apache/cassandra/blob/a9a2d75b269cf5e53c40c69064d3478c1cd43643/src/java/org/apache/cassandra/streaming/compress/CompressedStreamReader.java", "sha": "4d102442e177302ddb7c47bf19a257771a1d906f", "changes": 4, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/compress/CompressedStreamReader.java?ref=a9a2d75b269cf5e53c40c69064d3478c1cd43643", "patch": "@@ -104,9 +104,7 @@ public SSTableMultiWriter read(ReadableByteChannel channel) throws IOException\n         {\n             if (writer != null)\n             {\n-                Throwable e2 = writer.abort(null);\n-                // add abort error to original and continue so we can drain unread stream\n-                e.addSuppressed(e2);\n+                writer.abort(e);\n             }\n             drain(cis, in.getBytesRead());\n             if (e instanceof IOException)", "filename": "src/java/org/apache/cassandra/streaming/compress/CompressedStreamReader.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/b89037fe400b2b5097961c8276fa5c157b6cd49c", "parent": "https://github.com/apache/cassandra/commit/4743fd7631e645a5c75a3da2eeb3870af36e985f", "message": "Fix potential NPE while assasinating unknown endpoint\n\nPatch by dbrosius; reviewed by jknighton for CASSANDRA-9510", "bug_id": "cassandra_38", "file": [{"additions": 12, "raw_url": "https://github.com/apache/cassandra/raw/b89037fe400b2b5097961c8276fa5c157b6cd49c/src/java/org/apache/cassandra/gms/Gossiper.java", "blob_url": "https://github.com/apache/cassandra/blob/b89037fe400b2b5097961c8276fa5c157b6cd49c/src/java/org/apache/cassandra/gms/Gossiper.java", "sha": "43a45cfccd6a5d7d5f021db28a9b9658d174ed15", "changes": 23, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/gms/Gossiper.java?ref=b89037fe400b2b5097961c8276fa5c157b6cd49c", "patch": "@@ -580,17 +580,6 @@ public void assassinateEndpoint(String address) throws UnknownHostException\n         }\n         else\n         {\n-            try\n-            {\n-                tokens = StorageService.instance.getTokenMetadata().getTokens(endpoint);\n-            }\n-            catch (Throwable th)\n-            {\n-                JVMStabilityInspector.inspectThrowable(th);\n-                // TODO this is broken\n-                logger.warn(\"Unable to calculate tokens for {}.  Will use a random one\", address);\n-                tokens = Collections.singletonList(StorageService.instance.getTokenMetadata().partitioner.getRandomToken());\n-            }\n             int generation = epState.getHeartBeatState().getGeneration();\n             int heartbeat = epState.getHeartBeatState().getHeartBeatVersion();\n             logger.info(\"Sleeping for {}ms to ensure {} does not change\", StorageService.RING_DELAY, endpoint);\n@@ -607,6 +596,18 @@ else if (newState.getHeartBeatState().getHeartBeatVersion() != heartbeat)\n             epState.getHeartBeatState().forceNewerGenerationUnsafe();\n         }\n \n+        try\n+        {\n+            tokens = StorageService.instance.getTokenMetadata().getTokens(endpoint);\n+        }\n+        catch (Throwable th)\n+        {\n+            JVMStabilityInspector.inspectThrowable(th);\n+            // TODO this is broken\n+            logger.warn(\"Unable to calculate tokens for {}.  Will use a random one\", address);\n+            tokens = Collections.singletonList(StorageService.instance.getTokenMetadata().partitioner.getRandomToken());\n+        }\n+\n         // do not pass go, do not collect 200 dollars, just gtfo\n         epState.addApplicationState(ApplicationState.STATUS, StorageService.instance.valueFactory.left(tokens, computeExpireTime()));\n         handleMajorStateChange(endpoint, epState);", "filename": "src/java/org/apache/cassandra/gms/Gossiper.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/55dda732bdafc081addcb2f0280d0f7945343ff6", "parent": "https://github.com/apache/cassandra/commit/d21556f4f53d4b59c3e2ae1d3571fb1fba6bf5ed", "message": "avoid NPE on no-op major compaction", "bug_id": "cassandra_39", "file": [{"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/55dda732bdafc081addcb2f0280d0f7945343ff6/src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java", "blob_url": "https://github.com/apache/cassandra/blob/55dda732bdafc081addcb2f0280d0f7945343ff6/src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java", "sha": "8d990e51e5d0109919090bbb75a0395eb76e4fe3", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java?ref=55dda732bdafc081addcb2f0280d0f7945343ff6", "patch": "@@ -151,6 +151,9 @@ public synchronized AbstractCompactionTask getNextBackgroundTask(int gcBefore)\n     public AbstractCompactionTask getMaximalTask(final int gcBefore)\n     {\n         Collection<SSTableReader> sstables = cfs.markAllCompacting();\n+        if (sstables == null)\n+            return null;\n+\n         return new CompactionTask(cfs, sstables, gcBefore);\n     }\n ", "filename": "src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/6bad57fc3cf967838a220d8402db37ed9a5b3b4e", "parent": "https://github.com/apache/cassandra/commit/3674ad9dab8f29173d7d4ee82488a8e9ea586240", "message": "Fix NPE in Gossip handleStateNormal\n\nPatch by stefania; reviewed by jknighton for CASSANDRA-10089", "bug_id": "cassandra_40", "file": [{"additions": 51, "raw_url": "https://github.com/apache/cassandra/raw/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/src/java/org/apache/cassandra/gms/EndpointState.java", "blob_url": "https://github.com/apache/cassandra/blob/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/src/java/org/apache/cassandra/gms/EndpointState.java", "sha": "3e2929556a290916ae4bd817c3a77688a05c04a4", "changes": 76, "status": "modified", "deletions": 25, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/gms/EndpointState.java?ref=6bad57fc3cf967838a220d8402db37ed9a5b3b4e", "patch": "@@ -18,7 +18,11 @@\n package org.apache.cassandra.gms;\n \n import java.io.*;\n+import java.util.Collections;\n+import java.util.EnumMap;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -27,8 +31,6 @@\n import org.apache.cassandra.io.IVersionedSerializer;\n import org.apache.cassandra.io.util.DataOutputPlus;\n \n-import org.cliffc.high_scale_lib.NonBlockingHashMap;\n-\n /**\n  * This abstraction represents both the HeartBeatState and the ApplicationState in an EndpointState\n  * instance. Any state for a given endpoint can be retrieved from this instance.\n@@ -42,15 +44,21 @@\n     public final static IVersionedSerializer<EndpointState> serializer = new EndpointStateSerializer();\n \n     private volatile HeartBeatState hbState;\n-    final Map<ApplicationState, VersionedValue> applicationState = new NonBlockingHashMap<ApplicationState, VersionedValue>();\n+    private final AtomicReference<Map<ApplicationState, VersionedValue>> applicationState;\n \n     /* fields below do not get serialized */\n     private volatile long updateTimestamp;\n     private volatile boolean isAlive;\n \n     EndpointState(HeartBeatState initialHbState)\n+    {\n+        this(initialHbState, new EnumMap<ApplicationState, VersionedValue>(ApplicationState.class));\n+    }\n+\n+    EndpointState(HeartBeatState initialHbState, Map<ApplicationState, VersionedValue> states)\n     {\n         hbState = initialHbState;\n+        applicationState = new AtomicReference<Map<ApplicationState, VersionedValue>>(new EnumMap<>(states));\n         updateTimestamp = System.nanoTime();\n         isAlive = true;\n     }\n@@ -68,21 +76,37 @@ void setHeartBeatState(HeartBeatState newHbState)\n \n     public VersionedValue getApplicationState(ApplicationState key)\n     {\n-        return applicationState.get(key);\n+        return applicationState.get().get(key);\n     }\n \n-    /**\n-     * TODO replace this with operations that don't expose private state\n-     */\n-    @Deprecated\n-    public Map<ApplicationState, VersionedValue> getApplicationStateMap()\n+    public Set<Map.Entry<ApplicationState, VersionedValue>> states()\n+    {\n+        return applicationState.get().entrySet();\n+    }\n+\n+    public void addApplicationState(ApplicationState key, VersionedValue value)\n     {\n-        return applicationState;\n+        addApplicationStates(Collections.singletonMap(key, value));\n     }\n \n-    void addApplicationState(ApplicationState key, VersionedValue value)\n+    public void addApplicationStates(Map<ApplicationState, VersionedValue> values)\n     {\n-        applicationState.put(key, value);\n+        addApplicationStates(values.entrySet());\n+    }\n+\n+    public void addApplicationStates(Set<Map.Entry<ApplicationState, VersionedValue>> values)\n+    {\n+        while (true)\n+        {\n+            Map<ApplicationState, VersionedValue> orig = applicationState.get();\n+            Map<ApplicationState, VersionedValue> copy = new EnumMap<>(orig);\n+\n+            for (Map.Entry<ApplicationState, VersionedValue> value : values)\n+                copy.put(value.getKey(), value.getValue());\n+\n+            if (applicationState.compareAndSet(orig, copy))\n+                return;\n+        }\n     }\n \n     /* getters and setters */\n@@ -116,7 +140,7 @@ void markDead()\n \n     public String toString()\n     {\n-        return \"EndpointState: HeartBeatState = \" + hbState + \", AppStateMap = \" + applicationState;\n+        return \"EndpointState: HeartBeatState = \" + hbState + \", AppStateMap = \" + applicationState.get();\n     }\n }\n \n@@ -129,39 +153,41 @@ public void serialize(EndpointState epState, DataOutputPlus out, int version) th\n         HeartBeatState.serializer.serialize(hbState, out, version);\n \n         /* serialize the map of ApplicationState objects */\n-        int size = epState.applicationState.size();\n-        out.writeInt(size);\n-        for (Map.Entry<ApplicationState, VersionedValue> entry : epState.applicationState.entrySet())\n+        Set<Map.Entry<ApplicationState, VersionedValue>> states = epState.states();\n+        out.writeInt(states.size());\n+        for (Map.Entry<ApplicationState, VersionedValue> state : states)\n         {\n-            VersionedValue value = entry.getValue();\n-            out.writeInt(entry.getKey().ordinal());\n+            VersionedValue value = state.getValue();\n+            out.writeInt(state.getKey().ordinal());\n             VersionedValue.serializer.serialize(value, out, version);\n         }\n     }\n \n     public EndpointState deserialize(DataInput in, int version) throws IOException\n     {\n         HeartBeatState hbState = HeartBeatState.serializer.deserialize(in, version);\n-        EndpointState epState = new EndpointState(hbState);\n \n         int appStateSize = in.readInt();\n+        Map<ApplicationState, VersionedValue> states = new EnumMap<>(ApplicationState.class);\n         for (int i = 0; i < appStateSize; ++i)\n         {\n             int key = in.readInt();\n             VersionedValue value = VersionedValue.serializer.deserialize(in, version);\n-            epState.addApplicationState(Gossiper.STATES[key], value);\n+            states.put(Gossiper.STATES[key], value);\n         }\n-        return epState;\n+\n+        return new EndpointState(hbState, states);\n     }\n \n     public long serializedSize(EndpointState epState, int version)\n     {\n         long size = HeartBeatState.serializer.serializedSize(epState.getHeartBeatState(), version);\n-        size += TypeSizes.NATIVE.sizeof(epState.applicationState.size());\n-        for (Map.Entry<ApplicationState, VersionedValue> entry : epState.applicationState.entrySet())\n+        Set<Map.Entry<ApplicationState, VersionedValue>> states = epState.states();\n+        size += TypeSizes.NATIVE.sizeof(states.size());\n+        for (Map.Entry<ApplicationState, VersionedValue> state : states)\n         {\n-            VersionedValue value = entry.getValue();\n-            size += TypeSizes.NATIVE.sizeof(entry.getKey().ordinal());\n+            VersionedValue value = state.getValue();\n+            size += TypeSizes.NATIVE.sizeof(state.getKey().ordinal());\n             size += VersionedValue.serializer.serializedSize(value, version);\n         }\n         return size;", "filename": "src/java/org/apache/cassandra/gms/EndpointState.java"}, {"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/src/java/org/apache/cassandra/gms/FailureDetector.java", "blob_url": "https://github.com/apache/cassandra/blob/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/src/java/org/apache/cassandra/gms/FailureDetector.java", "sha": "b2fe9d356b0062f0f0692708876060ad6ca6dd87", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/gms/FailureDetector.java?ref=6bad57fc3cf967838a220d8402db37ed9a5b3b4e", "patch": "@@ -160,15 +160,16 @@ private void appendEndpointState(StringBuilder sb, EndpointState endpointState)\n     {\n         sb.append(\"  generation:\").append(endpointState.getHeartBeatState().getGeneration()).append(\"\\n\");\n         sb.append(\"  heartbeat:\").append(endpointState.getHeartBeatState().getHeartBeatVersion()).append(\"\\n\");\n-        for (Map.Entry<ApplicationState, VersionedValue> state : endpointState.applicationState.entrySet())\n+        for (Map.Entry<ApplicationState, VersionedValue> state : endpointState.states())\n         {\n             if (state.getKey() == ApplicationState.TOKENS)\n                 continue;\n             sb.append(\"  \").append(state.getKey()).append(\":\").append(state.getValue().version).append(\":\").append(state.getValue().value).append(\"\\n\");\n         }\n-        if (endpointState.applicationState.containsKey(ApplicationState.TOKENS))\n+        VersionedValue tokens = endpointState.getApplicationState(ApplicationState.TOKENS);\n+        if (tokens != null)\n         {\n-            sb.append(\"  TOKENS:\").append(endpointState.applicationState.get(ApplicationState.TOKENS).version).append(\":<hidden>\\n\");\n+            sb.append(\"  TOKENS:\").append(tokens.version).append(\":<hidden>\\n\");\n         }\n         else\n         {", "filename": "src/java/org/apache/cassandra/gms/FailureDetector.java"}, {"additions": 24, "raw_url": "https://github.com/apache/cassandra/raw/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/src/java/org/apache/cassandra/gms/Gossiper.java", "blob_url": "https://github.com/apache/cassandra/blob/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/src/java/org/apache/cassandra/gms/Gossiper.java", "sha": "e9ebb6f73e20279e7dc2d8d443a8a2fbc5ca37e5", "changes": 47, "status": "modified", "deletions": 23, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/gms/Gossiper.java?ref=6bad57fc3cf967838a220d8402db37ed9a5b3b4e", "patch": "@@ -224,7 +224,8 @@ public boolean seenAnySeed()\n                 return true;\n             try\n             {\n-                if (entry.getValue().getApplicationStateMap().containsKey(ApplicationState.INTERNAL_IP) && seeds.contains(InetAddress.getByName(entry.getValue().getApplicationState(ApplicationState.INTERNAL_IP).value)))\n+                VersionedValue internalIp = entry.getValue().getApplicationState(ApplicationState.INTERNAL_IP);\n+                if (internalIp != null && seeds.contains(InetAddress.getByName(internalIp.value)))\n                     return true;\n             }\n             catch (UnknownHostException e)\n@@ -371,8 +372,8 @@ protected void markAsShutdown(InetAddress endpoint)\n     int getMaxEndpointStateVersion(EndpointState epState)\n     {\n         int maxVersion = epState.getHeartBeatState().getHeartBeatVersion();\n-        for (VersionedValue value : epState.getApplicationStateMap().values())\n-            maxVersion = Math.max(maxVersion, value.version);\n+        for (Map.Entry<ApplicationState, VersionedValue> state : epState.states())\n+            maxVersion = Math.max(maxVersion, state.getValue().version);\n         return maxVersion;\n     }\n \n@@ -525,8 +526,10 @@ public void advertiseRemoving(InetAddress endpoint, UUID hostId, UUID localHostI\n         logger.info(\"Advertising removal for {}\", endpoint);\n         epState.updateTimestamp(); // make sure we don't evict it too soon\n         epState.getHeartBeatState().forceNewerGenerationUnsafe();\n-        epState.addApplicationState(ApplicationState.STATUS, StorageService.instance.valueFactory.removingNonlocal(hostId));\n-        epState.addApplicationState(ApplicationState.REMOVAL_COORDINATOR, StorageService.instance.valueFactory.removalCoordinator(localHostId));\n+        Map<ApplicationState, VersionedValue> states = new EnumMap<>(ApplicationState.class);\n+        states.put(ApplicationState.STATUS, StorageService.instance.valueFactory.removingNonlocal(hostId));\n+        states.put(ApplicationState.REMOVAL_COORDINATOR, StorageService.instance.valueFactory.removalCoordinator(localHostId));\n+        epState.addApplicationStates(states);\n         endpointStateMap.put(endpoint, epState);\n     }\n \n@@ -867,7 +870,8 @@ EndpointState getStateForVersionBiggerThan(InetAddress forEndpoint, int version)\n                     logger.trace(\"local heartbeat version \" + localHbVersion + \" greater than \" + version + \" for \" + forEndpoint);\n             }\n             /* Accumulate all application states whose versions are greater than \"version\" variable */\n-            for (Entry<ApplicationState, VersionedValue> entry : epState.getApplicationStateMap().entrySet())\n+            Map<ApplicationState, VersionedValue> states = new EnumMap<>(ApplicationState.class);\n+            for (Entry<ApplicationState, VersionedValue> entry : epState.states())\n             {\n                 VersionedValue value = entry.getValue();\n                 if (value.version > version)\n@@ -879,9 +883,11 @@ EndpointState getStateForVersionBiggerThan(InetAddress forEndpoint, int version)\n                     final ApplicationState key = entry.getKey();\n                     if (logger.isTraceEnabled())\n                         logger.trace(\"Adding state \" + key + \": \" + value.value);\n-                    reqdEndpointState.addApplicationState(key, value);\n+\n+                    states.put(key, value);\n                 }\n             }\n+            reqdEndpointState.addApplicationStates(states);\n         }\n         return reqdEndpointState;\n     }\n@@ -1153,19 +1159,13 @@ private void applyNewStates(InetAddress addr, EndpointState localState, Endpoint\n         localState.setHeartBeatState(remoteState.getHeartBeatState());\n         if (logger.isTraceEnabled())\n             logger.trace(\"Updating heartbeat state version to \" + localState.getHeartBeatState().getHeartBeatVersion() + \" from \" + oldVersion + \" for \" + addr + \" ...\");\n-        // we need to make two loops here, one to apply, then another to notify, this way all states in an update are present and current when the notifications are received\n-        for (Entry<ApplicationState, VersionedValue> remoteEntry : remoteState.getApplicationStateMap().entrySet())\n-        {\n-            ApplicationState remoteKey = remoteEntry.getKey();\n-            VersionedValue remoteValue = remoteEntry.getValue();\n \n-            assert remoteState.getHeartBeatState().getGeneration() == localState.getHeartBeatState().getGeneration();\n-            localState.addApplicationState(remoteKey, remoteValue);\n-        }\n-        for (Entry<ApplicationState, VersionedValue> remoteEntry : remoteState.getApplicationStateMap().entrySet())\n-        {\n+        Set<Entry<ApplicationState, VersionedValue>> remoteStates = remoteState.states();\n+        assert remoteState.getHeartBeatState().getGeneration() == localState.getHeartBeatState().getGeneration();\n+        localState.addApplicationStates(remoteStates);\n+\n+        for (Entry<ApplicationState, VersionedValue> remoteEntry : remoteStates)\n             doOnChangeNotifications(addr, remoteEntry.getKey(), remoteEntry.getValue());\n-        }\n     }\n     \n     // notify that a local application state is going to change (doesn't get triggered for remote changes)\n@@ -1279,7 +1279,7 @@ else if (maxRemoteVersion < maxLocalVersion)\n \n     public void start(int generationNumber)\n     {\n-        start(generationNumber, new HashMap<ApplicationState, VersionedValue>());\n+        start(generationNumber, new EnumMap<ApplicationState, VersionedValue>(ApplicationState.class));\n     }\n \n     /**\n@@ -1291,8 +1291,7 @@ public void start(int generationNbr, Map<ApplicationState, VersionedValue> prelo\n         /* initialize the heartbeat state for this localEndpoint */\n         maybeInitializeLocalState(generationNbr);\n         EndpointState localState = endpointStateMap.get(FBUtilities.getBroadcastAddress());\n-        for (Map.Entry<ApplicationState, VersionedValue> entry : preloadLocalStates.entrySet())\n-            localState.addApplicationState(entry.getKey(), entry.getValue());\n+        localState.addApplicationStates(preloadLocalStates);\n \n         //notify snitches that Gossiper is about to start\n         DatabaseDescriptor.getEndpointSnitch().gossiperStarting();\n@@ -1481,8 +1480,10 @@ public void initializeNodeUnsafe(InetAddress addr, UUID uuid, int generationNbr)\n         EndpointState localState = oldState == null ? newState : oldState;\n \n         // always add the version state\n-        localState.addApplicationState(ApplicationState.NET_VERSION, StorageService.instance.valueFactory.networkVersion());\n-        localState.addApplicationState(ApplicationState.HOST_ID, StorageService.instance.valueFactory.hostId(uuid));\n+        Map<ApplicationState, VersionedValue> states = new EnumMap<>(ApplicationState.class);\n+        states.put(ApplicationState.NET_VERSION, StorageService.instance.valueFactory.networkVersion());\n+        states.put(ApplicationState.HOST_ID, StorageService.instance.valueFactory.hostId(uuid));\n+        localState.addApplicationStates(states);\n     }\n \n     @VisibleForTesting", "filename": "src/java/org/apache/cassandra/gms/Gossiper.java"}, {"additions": 5, "raw_url": "https://github.com/apache/cassandra/raw/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/src/java/org/apache/cassandra/gms/VersionedValue.java", "blob_url": "https://github.com/apache/cassandra/blob/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/src/java/org/apache/cassandra/gms/VersionedValue.java", "sha": "810a668c7ddf917461e7992b0f58c1350d948781", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/gms/VersionedValue.java?ref=6bad57fc3cf967838a220d8402db37ed9a5b3b4e", "patch": "@@ -105,6 +105,11 @@ public String toString()\n         return \"Value(\" + value + \",\" + version + \")\";\n     }\n \n+    public byte[] toBytes()\n+    {\n+        return value.getBytes(ISO_8859_1);\n+    }\n+\n     private static String versionString(String... args)\n     {\n         return StringUtils.join(args, VersionedValue.DELIMITER);", "filename": "src/java/org/apache/cassandra/gms/VersionedValue.java"}, {"additions": 31, "raw_url": "https://github.com/apache/cassandra/raw/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/src/java/org/apache/cassandra/service/StorageService.java", "blob_url": "https://github.com/apache/cassandra/blob/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/src/java/org/apache/cassandra/service/StorageService.java", "sha": "93b1b976f8479ec60f614985b9ca683e590b6510", "changes": 65, "status": "modified", "deletions": 34, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=6bad57fc3cf967838a220d8402db37ed9a5b3b4e", "patch": "@@ -31,6 +31,7 @@\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.EnumMap;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n@@ -518,9 +519,10 @@ public void stopDaemon()\n         hostId = Gossiper.instance.getHostId(DatabaseDescriptor.getReplaceAddress());\n         try\n         {\n-            if (Gossiper.instance.getEndpointStateForEndpoint(DatabaseDescriptor.getReplaceAddress()).getApplicationState(ApplicationState.TOKENS) == null)\n+            VersionedValue tokensVersionedValue = Gossiper.instance.getEndpointStateForEndpoint(DatabaseDescriptor.getReplaceAddress()).getApplicationState(ApplicationState.TOKENS);\n+            if (tokensVersionedValue == null)\n                 throw new RuntimeException(\"Could not find tokens for \" + DatabaseDescriptor.getReplaceAddress() + \" to replace\");\n-            Collection<Token> tokens = TokenSerializer.deserialize(getPartitioner(), new DataInputStream(new ByteArrayInputStream(getApplicationStateValue(DatabaseDescriptor.getReplaceAddress(), ApplicationState.TOKENS))));\n+            Collection<Token> tokens = TokenSerializer.deserialize(getPartitioner(), new DataInputStream(new ByteArrayInputStream(tokensVersionedValue.toBytes())));\n \n             SystemKeyspace.setLocalHostId(hostId); // use the replacee's host Id as our own so we receive hints, etc\n             Gossiper.instance.resetEndpointStateMap(); // clean up since we have what we need\n@@ -767,7 +769,7 @@ private void prepareToJoin() throws ConfigurationException\n     {\n         if (!joined)\n         {\n-            Map<ApplicationState, VersionedValue> appStates = new HashMap<>();\n+            Map<ApplicationState, VersionedValue> appStates = new EnumMap<>(ApplicationState.class);\n \n             if (DatabaseDescriptor.isReplacing() && !(Boolean.parseBoolean(System.getProperty(\"cassandra.join_ring\", \"true\"))))\n                 throw new ConfigurationException(\"Cannot set both join_ring=false and attempt to replace a node\");\n@@ -1506,8 +1508,10 @@ public void onChange(InetAddress endpoint, ApplicationState state, VersionedValu\n                     handleStateBootstrap(endpoint);\n                     break;\n                 case VersionedValue.STATUS_NORMAL:\n+                    handleStateNormal(endpoint, VersionedValue.STATUS_NORMAL);\n+                    break;\n                 case VersionedValue.SHUTDOWN:\n-                    handleStateNormal(endpoint);\n+                    handleStateNormal(endpoint, VersionedValue.SHUTDOWN);\n                     break;\n                 case VersionedValue.REMOVING_TOKEN:\n                 case VersionedValue.REMOVED_TOKEN:\n@@ -1586,7 +1590,7 @@ public void updateTopology()\n     private void updatePeerInfo(InetAddress endpoint)\n     {\n         EndpointState epState = Gossiper.instance.getEndpointStateForEndpoint(endpoint);\n-        for (Map.Entry<ApplicationState, VersionedValue> entry : epState.getApplicationStateMap().entrySet())\n+        for (Map.Entry<ApplicationState, VersionedValue> entry : epState.states())\n         {\n             switch (entry.getKey())\n             {\n@@ -1619,17 +1623,19 @@ private void updatePeerInfo(InetAddress endpoint)\n         }\n     }\n \n-    private byte[] getApplicationStateValue(InetAddress endpoint, ApplicationState appstate)\n-    {\n-        String vvalue = Gossiper.instance.getEndpointStateForEndpoint(endpoint).getApplicationState(appstate).value;\n-        return vvalue.getBytes(ISO_8859_1);\n-    }\n-\n     private Collection<Token> getTokensFor(InetAddress endpoint)\n     {\n         try\n         {\n-            return TokenSerializer.deserialize(getPartitioner(), new DataInputStream(new ByteArrayInputStream(getApplicationStateValue(endpoint, ApplicationState.TOKENS))));\n+            EndpointState state = Gossiper.instance.getEndpointStateForEndpoint(endpoint);\n+            if (state == null)\n+                return Collections.emptyList();\n+\n+            VersionedValue versionedValue = state.getApplicationState(ApplicationState.TOKENS);\n+            if (versionedValue == null)\n+                return Collections.emptyList();\n+\n+            return TokenSerializer.deserialize(getPartitioner(), new DataInputStream(new ByteArrayInputStream(versionedValue.toBytes())));\n         }\n         catch (IOException e)\n         {\n@@ -1679,22 +1685,23 @@ private void handleStateBootstrap(InetAddress endpoint)\n      *\n      * @param endpoint node\n      */\n-    private void handleStateNormal(final InetAddress endpoint)\n+    private void handleStateNormal(final InetAddress endpoint, final String status)\n     {\n-        Collection<Token> tokens;\n-\n-        tokens = getTokensFor(endpoint);\n-\n+        Collection<Token> tokens = getTokensFor(endpoint);\n         Set<Token> tokensToUpdateInMetadata = new HashSet<>();\n         Set<Token> tokensToUpdateInSystemKeyspace = new HashSet<>();\n         Set<InetAddress> endpointsToRemove = new HashSet<>();\n \n-\n         if (logger.isDebugEnabled())\n-            logger.debug(\"Node {} state normal, token {}\", endpoint, tokens);\n+            logger.debug(\"Node {} state {}, token {}\", endpoint, status, tokens);\n \n         if (tokenMetadata.isMember(endpoint))\n-            logger.info(\"Node {} state jump to normal\", endpoint);\n+            logger.info(\"Node {} state jump to {}\", endpoint, status);\n+\n+        if (tokens.isEmpty() && status.equals(VersionedValue.STATUS_NORMAL))\n+            logger.error(\"Node {} is in state normal but it has no tokens, state: {}\",\n+                         endpoint,\n+                         Gossiper.instance.getEndpointStateForEndpoint(endpoint));\n \n         updatePeerInfo(endpoint);\n         // Order Matters, TM.updateHostID() should be called before TM.updateNormalToken(), (see CASSANDRA-4300).\n@@ -1820,8 +1827,7 @@ else if (Gossiper.instance.compareEndpointStartup(endpoint, currentOwner) > 0)\n      */\n     private void handleStateLeaving(InetAddress endpoint)\n     {\n-        Collection<Token> tokens;\n-        tokens = getTokensFor(endpoint);\n+        Collection<Token> tokens = getTokensFor(endpoint);\n \n         if (logger.isDebugEnabled())\n             logger.debug(\"Node {} state leaving, tokens {}\", endpoint, tokens);\n@@ -1855,16 +1861,7 @@ else if (!tokenMetadata.getTokens(endpoint).containsAll(tokens))\n     private void handleStateLeft(InetAddress endpoint, String[] pieces)\n     {\n         assert pieces.length >= 2;\n-        Collection<Token> tokens = null;\n-        try\n-        {\n-            tokens = getTokensFor(endpoint);\n-        }\n-        catch (Throwable th)\n-        {\n-            JVMStabilityInspector.inspectThrowable(th);\n-            logger.warn(\"Unable to calculate tokens for {}.\", endpoint);\n-        }\n+        Collection<Token> tokens = getTokensFor(endpoint);\n \n         if (logger.isDebugEnabled())\n             logger.debug(\"Node {} state left, tokens {}\", endpoint, tokens);\n@@ -1953,7 +1950,7 @@ private void excise(Collection<Token> tokens, InetAddress endpoint)\n         HintedHandOffManager.instance.deleteHintsForEndpoint(endpoint);\n         removeEndpoint(endpoint);\n         tokenMetadata.removeEndpoint(endpoint);\n-        if (tokens != null)\n+        if (!tokens.isEmpty())\n             tokenMetadata.removeBootstrapTokens(tokens);\n \n         if (!isClientMode)\n@@ -2162,7 +2159,7 @@ public void onFailure(Throwable t)\n \n     public void onJoin(InetAddress endpoint, EndpointState epState)\n     {\n-        for (Map.Entry<ApplicationState, VersionedValue> entry : epState.getApplicationStateMap().entrySet())\n+        for (Map.Entry<ApplicationState, VersionedValue> entry : epState.states())\n         {\n             onChange(endpoint, entry.getKey(), entry.getValue());\n         }", "filename": "src/java/org/apache/cassandra/service/StorageService.java"}, {"additions": 159, "raw_url": "https://github.com/apache/cassandra/raw/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/test/unit/org/apache/cassandra/gms/EndpointStateTest.java", "blob_url": "https://github.com/apache/cassandra/blob/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/test/unit/org/apache/cassandra/gms/EndpointStateTest.java", "sha": "b06c4351052e05c95ed4ebc13cbc00c7766052b3", "changes": 159, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/gms/EndpointStateTest.java?ref=6bad57fc3cf967838a220d8402db37ed9a5b3b4e", "patch": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cassandra.gms;\n+\n+import java.util.Collections;\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.junit.Test;\n+\n+import org.apache.cassandra.config.DatabaseDescriptor;\n+import org.apache.cassandra.dht.Token;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class EndpointStateTest\n+{\n+    public volatile VersionedValue.VersionedValueFactory valueFactory =\n+        new VersionedValue.VersionedValueFactory(DatabaseDescriptor.getPartitioner());\n+\n+    @Test\n+    public void testMultiThreadedReadConsistency() throws InterruptedException\n+    {\n+        for (int i = 0; i < 500; i++)\n+            innerTestMultiThreadedReadConsistency();\n+    }\n+\n+    /**\n+     * Test that a thread reading values whilst they are updated by another thread will\n+     * not see an entry unless it sees the entry previously added as well, even though\n+     * we are accessing the map via an iterator backed by the underlying map. This\n+     * works because EndpointState copies the map each time values are added.\n+     */\n+    private void innerTestMultiThreadedReadConsistency() throws InterruptedException\n+    {\n+        final Token token = DatabaseDescriptor.getPartitioner().getRandomToken();\n+        final List<Token> tokens = Collections.singletonList(token);\n+        final HeartBeatState hb = new HeartBeatState(0);\n+        final EndpointState state = new EndpointState(hb);\n+        final AtomicInteger numFailures = new AtomicInteger();\n+\n+        Thread t1 = new Thread(new Runnable()\n+        {\n+            public void run()\n+            {\n+                state.addApplicationState(ApplicationState.TOKENS, valueFactory.tokens(tokens));\n+                state.addApplicationState(ApplicationState.STATUS, valueFactory.normal(tokens));\n+            }\n+        });\n+\n+        Thread t2 = new Thread(new Runnable()\n+        {\n+            public void run()\n+            {\n+                for (int i = 0; i < 50; i++)\n+                {\n+                    Map<ApplicationState, VersionedValue> values = new EnumMap<>(ApplicationState.class);\n+                    for (Map.Entry<ApplicationState, VersionedValue> entry : state.states())\n+                        values.put(entry.getKey(), entry.getValue());\n+\n+                    if (values.containsKey(ApplicationState.STATUS) && !values.containsKey(ApplicationState.TOKENS))\n+                    {\n+                        numFailures.incrementAndGet();\n+                        System.out.println(String.format(\"Failed: %s\", values));\n+                    }\n+                }\n+            }\n+        });\n+\n+        t1.start();\n+        t2.start();\n+\n+        t1.join();\n+        t2.join();\n+\n+        assertTrue(numFailures.get() == 0);\n+    }\n+\n+    @Test\n+    public void testMultiThreadWriteConsistency() throws InterruptedException\n+    {\n+        for (int i = 0; i < 500; i++)\n+            innerTestMultiThreadWriteConsistency();\n+    }\n+\n+    /**\n+     * Test that two threads can update the state map concurrently.\n+     */\n+    private void innerTestMultiThreadWriteConsistency() throws InterruptedException\n+    {\n+        final Token token = DatabaseDescriptor.getPartitioner().getRandomToken();\n+        final List<Token> tokens = Collections.singletonList(token);\n+        final String ip = \"127.0.0.1\";\n+        final UUID hostId = UUID.randomUUID();\n+        final HeartBeatState hb = new HeartBeatState(0);\n+        final EndpointState state = new EndpointState(hb);\n+\n+        Thread t1 = new Thread(new Runnable()\n+        {\n+            public void run()\n+            {\n+                Map<ApplicationState, VersionedValue> states = new EnumMap<>(ApplicationState.class);\n+                states.put(ApplicationState.TOKENS, valueFactory.tokens(tokens));\n+                states.put(ApplicationState.STATUS, valueFactory.normal(tokens));\n+                state.addApplicationStates(states);\n+            }\n+        });\n+\n+        Thread t2 = new Thread(new Runnable()\n+        {\n+            public void run()\n+            {\n+                Map<ApplicationState, VersionedValue> states = new EnumMap<>(ApplicationState.class);\n+                states.put(ApplicationState.INTERNAL_IP, valueFactory.internalIP(ip));\n+                states.put(ApplicationState.HOST_ID, valueFactory.hostId(hostId));\n+                state.addApplicationStates(states);\n+            }\n+        });\n+\n+        t1.start();\n+        t2.start();\n+\n+        t1.join();\n+        t2.join();\n+\n+        Set<Map.Entry<ApplicationState, VersionedValue>> states = state.states();\n+        assertEquals(4, states.size());\n+\n+        Map<ApplicationState, VersionedValue> values = new EnumMap<>(ApplicationState.class);\n+        for (Map.Entry<ApplicationState, VersionedValue> entry : states)\n+            values.put(entry.getKey(), entry.getValue());\n+\n+        assertTrue(values.containsKey(ApplicationState.STATUS));\n+        assertTrue(values.containsKey(ApplicationState.TOKENS));\n+        assertTrue(values.containsKey(ApplicationState.INTERNAL_IP));\n+        assertTrue(values.containsKey(ApplicationState.HOST_ID));\n+    }\n+}", "filename": "test/unit/org/apache/cassandra/gms/EndpointStateTest.java"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/test/unit/org/apache/cassandra/locator/CloudstackSnitchTest.java", "blob_url": "https://github.com/apache/cassandra/blob/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/test/unit/org/apache/cassandra/locator/CloudstackSnitchTest.java", "sha": "90e63e0caf8d0d12337d83db5e0b177064895611", "changes": 8, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/locator/CloudstackSnitchTest.java?ref=6bad57fc3cf967838a220d8402db37ed9a5b3b4e", "patch": "@@ -19,11 +19,10 @@\n \n import java.io.IOException;\n import java.net.InetAddress;\n-import java.net.UnknownHostException;\n+import java.util.EnumMap;\n import java.util.Map;\n \n import org.junit.AfterClass;\n-import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n@@ -32,8 +31,6 @@\n import org.apache.cassandra.gms.ApplicationState;\n import org.apache.cassandra.gms.Gossiper;\n import org.apache.cassandra.gms.VersionedValue;\n-import org.apache.cassandra.net.MessagingService;\n-import org.apache.cassandra.net.OutboundTcpConnectionPool;\n import org.apache.cassandra.service.StorageService;\n import org.apache.cassandra.db.Keyspace;\n \n@@ -81,9 +78,10 @@ public void testRacks() throws IOException, ConfigurationException\n         InetAddress nonlocal = InetAddress.getByName(\"127.0.0.7\");\n \n         Gossiper.instance.addSavedEndpoint(nonlocal);\n-        Map<ApplicationState,VersionedValue> stateMap = Gossiper.instance.getEndpointStateForEndpoint(nonlocal).getApplicationStateMap();\n+        Map<ApplicationState, VersionedValue> stateMap = new EnumMap<>(ApplicationState.class);\n         stateMap.put(ApplicationState.DC, StorageService.instance.valueFactory.datacenter(\"ch-zrh\"));\n         stateMap.put(ApplicationState.RACK, StorageService.instance.valueFactory.rack(\"2\"));\n+        Gossiper.instance.getEndpointStateForEndpoint(nonlocal).addApplicationStates(stateMap);\n \n         assertEquals(\"ch-zrh\", snitch.getDatacenter(nonlocal));\n         assertEquals(\"2\", snitch.getRack(nonlocal));", "filename": "test/unit/org/apache/cassandra/locator/CloudstackSnitchTest.java"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/test/unit/org/apache/cassandra/locator/EC2SnitchTest.java", "blob_url": "https://github.com/apache/cassandra/blob/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/test/unit/org/apache/cassandra/locator/EC2SnitchTest.java", "sha": "56bbb775e5ee4fd7e519ed0e634802ae74166a14", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/locator/EC2SnitchTest.java?ref=6bad57fc3cf967838a220d8402db37ed9a5b3b4e", "patch": "@@ -24,6 +24,7 @@\n import java.io.IOException;\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n+import java.util.EnumMap;\n import java.util.Map;\n \n import org.junit.AfterClass;\n@@ -79,9 +80,10 @@ public void testRac() throws IOException, ConfigurationException\n         InetAddress nonlocal = InetAddress.getByName(\"127.0.0.7\");\n \n         Gossiper.instance.addSavedEndpoint(nonlocal);\n-        Map<ApplicationState,VersionedValue> stateMap = Gossiper.instance.getEndpointStateForEndpoint(nonlocal).getApplicationStateMap();\n+        Map<ApplicationState, VersionedValue> stateMap = new EnumMap<>(ApplicationState.class);\n         stateMap.put(ApplicationState.DC, StorageService.instance.valueFactory.datacenter(\"us-west\"));\n         stateMap.put(ApplicationState.RACK, StorageService.instance.valueFactory.datacenter(\"1a\"));\n+        Gossiper.instance.getEndpointStateForEndpoint(nonlocal).addApplicationStates(stateMap);\n \n         assertEquals(\"us-west\", snitch.getDatacenter(nonlocal));\n         assertEquals(\"1a\", snitch.getRack(nonlocal));", "filename": "test/unit/org/apache/cassandra/locator/EC2SnitchTest.java"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/test/unit/org/apache/cassandra/locator/GoogleCloudSnitchTest.java", "blob_url": "https://github.com/apache/cassandra/blob/6bad57fc3cf967838a220d8402db37ed9a5b3b4e/test/unit/org/apache/cassandra/locator/GoogleCloudSnitchTest.java", "sha": "1521454ecefca779a00e3bea528ff4e148f4157e", "changes": 8, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/locator/GoogleCloudSnitchTest.java?ref=6bad57fc3cf967838a220d8402db37ed9a5b3b4e", "patch": "@@ -23,11 +23,10 @@\n \n import java.io.IOException;\n import java.net.InetAddress;\n-import java.net.UnknownHostException;\n+import java.util.EnumMap;\n import java.util.Map;\n \n import org.junit.AfterClass;\n-import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n@@ -37,8 +36,6 @@\n import org.apache.cassandra.gms.ApplicationState;\n import org.apache.cassandra.gms.Gossiper;\n import org.apache.cassandra.gms.VersionedValue;\n-import org.apache.cassandra.net.MessagingService;\n-import org.apache.cassandra.net.OutboundTcpConnectionPool;\n import org.apache.cassandra.service.StorageService;\n \n import static org.junit.Assert.assertEquals;\n@@ -79,9 +76,10 @@ public void testRac() throws IOException, ConfigurationException\n         InetAddress nonlocal = InetAddress.getByName(\"127.0.0.7\");\n \n         Gossiper.instance.addSavedEndpoint(nonlocal);\n-        Map<ApplicationState,VersionedValue> stateMap = Gossiper.instance.getEndpointStateForEndpoint(nonlocal).getApplicationStateMap();\n+        Map<ApplicationState, VersionedValue> stateMap = new EnumMap<>(ApplicationState.class);\n         stateMap.put(ApplicationState.DC, StorageService.instance.valueFactory.datacenter(\"europe-west1\"));\n         stateMap.put(ApplicationState.RACK, StorageService.instance.valueFactory.datacenter(\"a\"));\n+        Gossiper.instance.getEndpointStateForEndpoint(nonlocal).addApplicationStates(stateMap);\n \n         assertEquals(\"europe-west1\", snitch.getDatacenter(nonlocal));\n         assertEquals(\"a\", snitch.getRack(nonlocal));", "filename": "test/unit/org/apache/cassandra/locator/GoogleCloudSnitchTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/6516eba92e893f86c367b89f5c9291a9393deb52", "parent": "https://github.com/apache/cassandra/commit/353309f01313c2f7fd7ce882444b175dcd62baef", "message": "guard against npe on error condition", "bug_id": "cassandra_41", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/6516eba92e893f86c367b89f5c9291a9393deb52/src/java/org/apache/cassandra/tools/Shuffle.java", "blob_url": "https://github.com/apache/cassandra/blob/6516eba92e893f86c367b89f5c9291a9393deb52/src/java/org/apache/cassandra/tools/Shuffle.java", "sha": "70b747d5708fb0d4d35425c056094716ed6e0aee", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/tools/Shuffle.java?ref=6516eba92e893f86c367b89f5c9291a9393deb52", "patch": "@@ -496,7 +496,8 @@ public static CqlResult executeCqlQuery(String hostName, int port, boolean isFra\n         }\n         finally\n         {\n-            client.close();\n+            if (client != null)\n+                client.close();\n         }\n     }\n ", "filename": "src/java/org/apache/cassandra/tools/Shuffle.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/da8be1c093ba0a78604effd76769067e428ca04d", "parent": "https://github.com/apache/cassandra/commit/86583af4ca0eac34725136adee3143f9b14b75b4", "message": "NPE fix on null highestSelectivityIndex\n\nPatch by Berenguer Blasi; reviewed by Sam Tunnicliffe for\nCASSANDRA-10550", "bug_id": "cassandra_42", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/da8be1c093ba0a78604effd76769067e428ca04d/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/da8be1c093ba0a78604effd76769067e428ca04d/CHANGES.txt", "sha": "2a28a86ceba322684569f7d216bd9f9f303157d2", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=da8be1c093ba0a78604effd76769067e428ca04d", "patch": "@@ -1,4 +1,5 @@\n 2.1.12\n+ * Fix potential NPE from handling result of SIM.highestSelectivityIndex (CASSANDRA-10550)\n  * Fix paging issues with partitions containing only static columns data\n    (CASSANDRA-10381)\n  * Fix conditions on static columns (CASSANDRA-10264)", "filename": "CHANGES.txt"}, {"additions": 7, "raw_url": "https://github.com/apache/cassandra/raw/da8be1c093ba0a78604effd76769067e428ca04d/src/java/org/apache/cassandra/db/index/SecondaryIndexManager.java", "blob_url": "https://github.com/apache/cassandra/blob/da8be1c093ba0a78604effd76769067e428ca04d/src/java/org/apache/cassandra/db/index/SecondaryIndexManager.java", "sha": "12a0a555b2a8ad43d72248d99a65d2a8416144f8", "changes": 11, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/index/SecondaryIndexManager.java?ref=da8be1c093ba0a78604effd76769067e428ca04d", "patch": "@@ -858,11 +858,14 @@ public SecondaryIndexSearcher getHighestSelectivityIndexSearcher(List<IndexExpre\n         for (SecondaryIndexSearcher searcher : indexSearchers)\n         {\n             SecondaryIndex highestSelectivityIndex = searcher.highestSelectivityIndex(clause);\n-            long estimate = highestSelectivityIndex.estimateResultRows();\n-            if (estimate <= bestEstimate)\n+            if (highestSelectivityIndex != null)\n             {\n-                bestEstimate = estimate;\n-                mostSelective = searcher;\n+                long estimate = highestSelectivityIndex.estimateResultRows();\n+                if (estimate <= bestEstimate)\n+                {\n+                    bestEstimate = estimate;\n+                    mostSelective = searcher;\n+                }\n             }\n         }\n ", "filename": "src/java/org/apache/cassandra/db/index/SecondaryIndexManager.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/da8be1c093ba0a78604effd76769067e428ca04d/src/java/org/apache/cassandra/service/StorageProxy.java", "blob_url": "https://github.com/apache/cassandra/blob/da8be1c093ba0a78604effd76769067e428ca04d/src/java/org/apache/cassandra/service/StorageProxy.java", "sha": "4f20ef0273db74ee163287e8f5011ae978764bd3", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageProxy.java?ref=da8be1c093ba0a78604effd76769067e428ca04d", "patch": "@@ -1571,7 +1571,7 @@ private static float estimateResultRowsPerRange(AbstractRangeCommand command, Ke\n                 {\n                     // use our own mean column count as our estimate for how many matching rows each node will have\n                     SecondaryIndex highestSelectivityIndex = searcher.highestSelectivityIndex(command.rowFilter);\n-                    resultRowsPerRange = Math.min(resultRowsPerRange, highestSelectivityIndex.estimateResultRows());\n+                    resultRowsPerRange = highestSelectivityIndex == null ? resultRowsPerRange : Math.min(resultRowsPerRange, highestSelectivityIndex.estimateResultRows());\n                 }\n             }\n         }", "filename": "src/java/org/apache/cassandra/service/StorageProxy.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/ea5b6246d24c6092cda17c28610f76b17b0be25c", "parent": "https://github.com/apache/cassandra/commit/6faf80c9d267ede53c139b5f2a39e8e56ee80b2a", "message": "don't NPE shutting down, due to gossip failure", "bug_id": "cassandra_43", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/ea5b6246d24c6092cda17c28610f76b17b0be25c/src/java/org/apache/cassandra/gms/Gossiper.java", "blob_url": "https://github.com/apache/cassandra/blob/ea5b6246d24c6092cda17c28610f76b17b0be25c/src/java/org/apache/cassandra/gms/Gossiper.java", "sha": "c04a87d41610e71720b490467a70e8fc45376848", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/gms/Gossiper.java?ref=ea5b6246d24c6092cda17c28610f76b17b0be25c", "patch": "@@ -1267,7 +1267,8 @@ public void addLocalApplicationState(ApplicationState state, VersionedValue valu\n \n     public void stop()\n     {\n-        scheduledGossipTask.cancel(false);\n+    \tif (scheduledGossipTask != null)\n+    \t\tscheduledGossipTask.cancel(false);\n         logger.info(\"Announcing shutdown\");\n         Uninterruptibles.sleepUninterruptibly(intervalInMillis * 2, TimeUnit.MILLISECONDS);\n         MessageOut message = new MessageOut(MessagingService.Verb.GOSSIP_SHUTDOWN);", "filename": "src/java/org/apache/cassandra/gms/Gossiper.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/3fb2dcdf06fa74db14891abb76a447c040f32436", "parent": "https://github.com/apache/cassandra/commit/3047ab63875b3ac5dd716bddd5eb3e321af09eaf", "message": "fix npe if configURL is null (new URL(null) throws)", "bug_id": "cassandra_44", "file": [{"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/3fb2dcdf06fa74db14891abb76a447c040f32436/src/java/org/apache/cassandra/locator/SnitchProperties.java", "blob_url": "https://github.com/apache/cassandra/blob/3fb2dcdf06fa74db14891abb76a447c040f32436/src/java/org/apache/cassandra/locator/SnitchProperties.java", "sha": "36fec7f36d49ac847c3ff5f956e07d76529ad4d1", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/locator/SnitchProperties.java?ref=3fb2dcdf06fa74db14891abb76a447c040f32436", "patch": "@@ -38,9 +38,12 @@\n         String configURL = System.getProperty(RACKDC_PROPERTY_FILENAME);\n         try\n         {\n-            URL url = new URL(configURL);\n+            URL url;\n             if (configURL == null)\n                 url = SnitchProperties.class.getClassLoader().getResource(RACKDC_PROPERTY_FILENAME);\n+            else \n+            \turl = new URL(configURL);\n+            \n             stream = url.openStream(); // catch block handles potential NPE\n             properties.load(stream);\n         }", "filename": "src/java/org/apache/cassandra/locator/SnitchProperties.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/723fcd1936ad792b8e85490312cbe3edc9d4099e", "parent": "https://github.com/apache/cassandra/commit/039e9b9a18cbe78091231a4538b6d428deacc771", "message": "fix NPE when stopping nonexistent native server, again.", "bug_id": "cassandra_45", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/723fcd1936ad792b8e85490312cbe3edc9d4099e/src/java/org/apache/cassandra/service/StorageService.java", "blob_url": "https://github.com/apache/cassandra/blob/723fcd1936ad792b8e85490312cbe3edc9d4099e/src/java/org/apache/cassandra/service/StorageService.java", "sha": "5f9657d1223f228cb24da83a58347eb982c2f051", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=723fcd1936ad792b8e85490312cbe3edc9d4099e", "patch": "@@ -346,7 +346,8 @@ public void stopNativeTransport()\n         {\n             throw new IllegalStateException(\"No configured daemon\");\n         }\n-        daemon.nativeServer.stop();\n+        if (daemon.nativeServer != null)\n+            daemon.nativeServer.stop();\n     }\n \n     public boolean isNativeTransportRunning()", "filename": "src/java/org/apache/cassandra/service/StorageService.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/0a35341675c6c2026113736f9447f08069b6eb83", "parent": "https://github.com/apache/cassandra/commit/8fc1b28e8320cfae71e3195954470a1edbfa6121", "message": "Don't NPE when using forceRepairRangeAsync\n\nPatch by Nick Bailey; reviewed by Paulo Motta for CASSANDRA-11239", "bug_id": "cassandra_46", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/0a35341675c6c2026113736f9447f08069b6eb83/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/0a35341675c6c2026113736f9447f08069b6eb83/CHANGES.txt", "sha": "ba3d2fd3e39c83813545815d25d5f2c4a8452add", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=0a35341675c6c2026113736f9447f08069b6eb83", "patch": "@@ -18,6 +18,7 @@\n  * Hadoop integration is incompatible with Cassandra Driver 3.0.0 (CASSANDRA-11001)\n  * Add dropped_columns to the list of schema table so it gets handled\n    properly (CASSANDRA-11050)\n+ * Fix NPE when using forceRepairRangeAsync without DC (CASSANDRA-11239)\n Merged from 2.2:\n  * Range.compareTo() violates the contract of Comparable (CASSANDRA-11216)\n  * Avoid NPE when serializing ErrorMessage with null message (CASSANDRA-11167)", "filename": "CHANGES.txt"}, {"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/0a35341675c6c2026113736f9447f08069b6eb83/src/java/org/apache/cassandra/service/StorageService.java", "blob_url": "https://github.com/apache/cassandra/blob/0a35341675c6c2026113736f9447f08069b6eb83/src/java/org/apache/cassandra/service/StorageService.java", "sha": "164c419f829440defc4c87d8b6cfa13ee4c5703d", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=0a35341675c6c2026113736f9447f08069b6eb83", "patch": "@@ -3081,7 +3081,10 @@ public int forceRepairRangeAsync(String beginToken,\n         Collection<Range<Token>> repairingRange = createRepairRangeFrom(beginToken, endToken);\n \n         RepairOption options = new RepairOption(parallelism, false, !fullRepair, false, 1, repairingRange, true);\n-        options.getDataCenters().addAll(dataCenters);\n+        if (dataCenters != null)\n+        {\n+            options.getDataCenters().addAll(dataCenters);\n+        }\n         if (hosts != null)\n         {\n             options.getHosts().addAll(hosts);", "filename": "src/java/org/apache/cassandra/service/StorageService.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/50095947e25f630ce48ee24d10ff3e1f3fd91183", "parent": "https://github.com/apache/cassandra/commit/c8c8cf679c0e597dd741d0780a1c2ac5e0113251", "message": "Avoid NPE when serializing ErrorMessage with null msg\n\nPatch by Tyler Hobbs; reviewed by Carl Yeksigian for CASSANDRA-11167", "bug_id": "cassandra_47", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/50095947e25f630ce48ee24d10ff3e1f3fd91183/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/50095947e25f630ce48ee24d10ff3e1f3fd91183/CHANGES.txt", "sha": "01e7b3d7f12025cc71bb992730926e52c070dc91", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=50095947e25f630ce48ee24d10ff3e1f3fd91183", "patch": "@@ -1,4 +1,5 @@\n 2.2.6\n+ * Avoid NPE when serializing ErrorMessage with null message (CASSANDRA-11167)\n  * Replacing an aggregate with a new version doesn't reset INITCOND (CASSANDRA-10840)\n  * (cqlsh) cqlsh cannot be called through symlink (CASSANDRA-11037)\n  * fix ohc and java-driver pom dependencies in build.xml (CASSANDRA-10793)", "filename": "CHANGES.txt"}, {"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/50095947e25f630ce48ee24d10ff3e1f3fd91183/src/java/org/apache/cassandra/transport/messages/ErrorMessage.java", "blob_url": "https://github.com/apache/cassandra/blob/50095947e25f630ce48ee24d10ff3e1f3fd91183/src/java/org/apache/cassandra/transport/messages/ErrorMessage.java", "sha": "021db5ae749d3cdd2cec6457be6346e7b1f12010", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/transport/messages/ErrorMessage.java?ref=50095947e25f630ce48ee24d10ff3e1f3fd91183", "patch": "@@ -151,7 +151,8 @@ public void encode(ErrorMessage msg, ByteBuf dest, int version)\n         {\n             final TransportException err = getBackwardsCompatibleException(msg, version);\n             dest.writeInt(err.code().value);\n-            CBUtil.writeString(err.getMessage(), dest);\n+            String errorString = err.getMessage() == null ? \"\" : err.getMessage();\n+            CBUtil.writeString(errorString, dest);\n \n             switch (err.code())\n             {\n@@ -212,7 +213,8 @@ public void encode(ErrorMessage msg, ByteBuf dest, int version)\n         public int encodedSize(ErrorMessage msg, int version)\n         {\n             final TransportException err = getBackwardsCompatibleException(msg, version);\n-            int size = 4 + CBUtil.sizeOfString(err.getMessage());\n+            String errorString = err.getMessage() == null ? \"\" : err.getMessage();\n+            int size = 4 + CBUtil.sizeOfString(errorString);\n             switch (err.code())\n             {\n                 case UNAVAILABLE:", "filename": "src/java/org/apache/cassandra/transport/messages/ErrorMessage.java"}, {"additions": 18, "raw_url": "https://github.com/apache/cassandra/raw/50095947e25f630ce48ee24d10ff3e1f3fd91183/test/unit/org/apache/cassandra/transport/ProtocolErrorTest.java", "blob_url": "https://github.com/apache/cassandra/blob/50095947e25f630ce48ee24d10ff3e1f3fd91183/test/unit/org/apache/cassandra/transport/ProtocolErrorTest.java", "sha": "fc8c41cc4bebc84d25625822870de1895d8635e7", "changes": 18, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/transport/ProtocolErrorTest.java?ref=50095947e25f630ce48ee24d10ff3e1f3fd91183", "patch": "@@ -113,4 +113,22 @@ public void testBodyLengthOverLimit() throws Exception\n             Assert.assertTrue(e.getMessage().contains(\"Request is too big\"));\n         }\n     }\n+\n+    @Test\n+    public void testErrorMessageWithNullString() throws Exception\n+    {\n+        // test for CASSANDRA-11167\n+        ErrorMessage msg = ErrorMessage.fromException(new ServerError((String) null));\n+        assert msg.toString().endsWith(\"null\") : msg.toString();\n+        int size = ErrorMessage.codec.encodedSize(msg, Server.CURRENT_VERSION);\n+        ByteBuf buf = Unpooled.buffer(size);\n+        ErrorMessage.codec.encode(msg, buf, Server.CURRENT_VERSION);\n+\n+        ByteBuf expected = Unpooled.wrappedBuffer(new byte[]{\n+                0x00, 0x00, 0x00, 0x00,  // int error code\n+                0x00, 0x00               // short message length\n+        });\n+\n+        Assert.assertEquals(expected, buf);\n+    }\n }", "filename": "test/unit/org/apache/cassandra/transport/ProtocolErrorTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/9eddaa8ffa212c42f32f7d1e8b485d5aa0e2f10f", "parent": "https://github.com/apache/cassandra/commit/c040759da53e70c2cb9ed93186bcdba2b55405ec", "message": "Don't NPE when shutting down non-existent thrift server", "bug_id": "cassandra_48", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/9eddaa8ffa212c42f32f7d1e8b485d5aa0e2f10f/src/java/org/apache/cassandra/service/StorageService.java", "blob_url": "https://github.com/apache/cassandra/blob/9eddaa8ffa212c42f32f7d1e8b485d5aa0e2f10f/src/java/org/apache/cassandra/service/StorageService.java", "sha": "96c2dd97c5382244fd535e9c343ede82cdfe36b9", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=9eddaa8ffa212c42f32f7d1e8b485d5aa0e2f10f", "patch": "@@ -318,7 +318,8 @@ public void stopRPCServer()\n         {\n             throw new IllegalStateException(\"No configured daemon\");\n         }\n-        daemon.thriftServer.stop();\n+        if (daemon.thriftServer != null)\n+            daemon.thriftServer.stop();\n     }\n \n     public boolean isRPCServerRunning()", "filename": "src/java/org/apache/cassandra/service/StorageService.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/deafdbe373df3717ec21f8e52d93f3d02bb5094a", "parent": "https://github.com/apache/cassandra/commit/0b479a7f3e284960f5ebf8ef5110dfdf2c2db7fd", "message": "Avoid potential NPE for queries with ORDER BY and IN\n\npatch by blerer; reviewed by beobal for CASSANDRA-10955", "bug_id": "cassandra_49", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/deafdbe373df3717ec21f8e52d93f3d02bb5094a/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/deafdbe373df3717ec21f8e52d93f3d02bb5094a/CHANGES.txt", "sha": "1a92fd6a0de95ca188ef88101574a52243871ab8", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=deafdbe373df3717ec21f8e52d93f3d02bb5094a", "patch": "@@ -1,4 +1,5 @@\n 2.2.5\n+ * Fix potential NPE on ORDER BY queries with IN (CASSANDRA-10955)\n  * Avoid over-fetching during the page of range queries (CASSANDRA-8521)\n  * Start L0 STCS-compactions even if there is a L0 -> L1 compaction\n    going (CASSANDRA-10979)", "filename": "CHANGES.txt"}, {"additions": 15, "raw_url": "https://github.com/apache/cassandra/raw/deafdbe373df3717ec21f8e52d93f3d02bb5094a/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java", "blob_url": "https://github.com/apache/cassandra/blob/deafdbe373df3717ec21f8e52d93f3d02bb5094a/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java", "sha": "848b3a6df47f2c7e12f41a4bacc5756b9878b622", "changes": 22, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java?ref=deafdbe373df3717ec21f8e52d93f3d02bb5094a", "patch": "@@ -1092,10 +1092,21 @@ public Parameters(Map<ColumnIdentifier.Raw, Boolean> orderings,\n         }\n     }\n \n+    private static abstract class ColumnComparator<T> implements Comparator<T>\n+    {\n+        protected final int compare(Comparator<ByteBuffer> comparator, ByteBuffer aValue, ByteBuffer bValue)\n+        {\n+            if (aValue == null)\n+                return bValue == null ? 0 : -1;\n+\n+            return bValue == null ? 1 : comparator.compare(aValue, bValue);\n+        }\n+    }\n+\n     /**\n      * Used in orderResults(...) method when single 'ORDER BY' condition where given\n      */\n-    private static class SingleColumnComparator implements Comparator<List<ByteBuffer>>\n+    private static class SingleColumnComparator extends ColumnComparator<List<ByteBuffer>>\n     {\n         private final int index;\n         private final Comparator<ByteBuffer> comparator;\n@@ -1108,14 +1119,14 @@ public SingleColumnComparator(int columnIndex, Comparator<ByteBuffer> orderer)\n \n         public int compare(List<ByteBuffer> a, List<ByteBuffer> b)\n         {\n-            return comparator.compare(a.get(index), b.get(index));\n+            return compare(comparator, a.get(index), b.get(index));\n         }\n     }\n \n     /**\n      * Used in orderResults(...) method when multiple 'ORDER BY' conditions where given\n      */\n-    private static class CompositeComparator implements Comparator<List<ByteBuffer>>\n+    private static class CompositeComparator extends ColumnComparator<List<ByteBuffer>>\n     {\n         private final List<Comparator<ByteBuffer>> orderTypes;\n         private final List<Integer> positions;\n@@ -1133,10 +1144,7 @@ public int compare(List<ByteBuffer> a, List<ByteBuffer> b)\n                 Comparator<ByteBuffer> type = orderTypes.get(i);\n                 int columnPos = positions.get(i);\n \n-                ByteBuffer aValue = a.get(columnPos);\n-                ByteBuffer bValue = b.get(columnPos);\n-\n-                int comparison = type.compare(aValue, bValue);\n+                int comparison = compare(type, a.get(columnPos), b.get(columnPos));\n \n                 if (comparison != 0)\n                     return comparison;", "filename": "src/java/org/apache/cassandra/cql3/statements/SelectStatement.java"}, {"additions": 43, "raw_url": "https://github.com/apache/cassandra/raw/deafdbe373df3717ec21f8e52d93f3d02bb5094a/test/unit/org/apache/cassandra/cql3/validation/operations/SelectOrderByTest.java", "blob_url": "https://github.com/apache/cassandra/blob/deafdbe373df3717ec21f8e52d93f3d02bb5094a/test/unit/org/apache/cassandra/cql3/validation/operations/SelectOrderByTest.java", "sha": "f8ec13c73aaf5704068d68e562a9fe647d53be86", "changes": 43, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/validation/operations/SelectOrderByTest.java?ref=deafdbe373df3717ec21f8e52d93f3d02bb5094a", "patch": "@@ -392,6 +392,49 @@ public void testOrderByForInClause() throws Throwable\n                    row(\"A\"));\n     }\n \n+    @Test\n+    public void testOrderByForInClauseWithNullValue() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (a int, b int, c int, s int static, d int, PRIMARY KEY (a, b, c))\");\n+\n+        execute(\"INSERT INTO %s (a, b, c, d) VALUES (1, 1, 1, 1)\");\n+        execute(\"INSERT INTO %s (a, b, c, d) VALUES (1, 1, 2, 1)\");\n+        execute(\"INSERT INTO %s (a, b, c, d) VALUES (2, 2, 1, 1)\");\n+        execute(\"INSERT INTO %s (a, b, c, d) VALUES (2, 2, 2, 1)\");\n+\n+        execute(\"UPDATE %s SET s = 1 WHERE a = 1\");\n+        execute(\"UPDATE %s SET s = 2 WHERE a = 2\");\n+        execute(\"UPDATE %s SET s = 3 WHERE a = 3\");\n+\n+        assertRows(execute(\"SELECT a, b, c, d, s FROM %s WHERE a IN (1, 2, 3) ORDER BY b DESC\"),\n+                   row(2, 2, 2, 1, 2),\n+                   row(2, 2, 1, 1, 2),\n+                   row(1, 1, 2, 1, 1),\n+                   row(1, 1, 1, 1, 1),\n+                   row(3, null, null, null, 3));\n+\n+        assertRows(execute(\"SELECT a, b, c, d, s FROM %s WHERE a IN (1, 2, 3) ORDER BY b ASC\"),\n+                   row(3, null, null, null, 3),\n+                   row(1, 1, 1, 1, 1),\n+                   row(1, 1, 2, 1, 1),\n+                   row(2, 2, 1, 1, 2),\n+                   row(2, 2, 2, 1, 2));\n+\n+        assertRows(execute(\"SELECT a, b, c, d, s FROM %s WHERE a IN (1, 2, 3) ORDER BY b DESC , c DESC\"),\n+                   row(2, 2, 2, 1, 2),\n+                   row(2, 2, 1, 1, 2),\n+                   row(1, 1, 2, 1, 1),\n+                   row(1, 1, 1, 1, 1),\n+                   row(3, null, null, null, 3));\n+\n+        assertRows(execute(\"SELECT a, b, c, d, s FROM %s WHERE a IN (1, 2, 3) ORDER BY b ASC, c ASC\"),\n+                   row(3, null, null, null, 3),\n+                   row(1, 1, 1, 1, 1),\n+                   row(1, 1, 2, 1, 1),\n+                   row(2, 2, 1, 1, 2),\n+                   row(2, 2, 2, 1, 2));\n+    }\n+\n     /**\n      * Test reversed comparators\n      * migrated from cql_tests.py:TestCQL.reversed_comparator_test()", "filename": "test/unit/org/apache/cassandra/cql3/validation/operations/SelectOrderByTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/d349787515554087efc92231599e270c2c3aa29b", "parent": "https://github.com/apache/cassandra/commit/26995337b8d65f7af8eb12ef3a2c946fc4ad41c1", "message": "avoid NPE on describe cf with no compaction strategy (local)", "bug_id": "cassandra_50", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/d349787515554087efc92231599e270c2c3aa29b/src/java/org/apache/cassandra/cli/CliClient.java", "blob_url": "https://github.com/apache/cassandra/blob/d349787515554087efc92231599e270c2c3aa29b/src/java/org/apache/cassandra/cli/CliClient.java", "sha": "fe7f02b4380e58720958036eb021ffab8b4c6be6", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cli/CliClient.java?ref=d349787515554087efc92231599e270c2c3aa29b", "patch": "@@ -2209,7 +2209,7 @@ private void describeColumnFamily(KsDef ks_def, CfDef cf_def, NodeProbe probe) t\n \n         sessionState.out.printf(\"      Compaction Strategy: %s%n\", cf_def.compaction_strategy);\n \n-        if (!cf_def.compaction_strategy_options.isEmpty())\n+        if (cf_def.compaction_strategy_options != null && !cf_def.compaction_strategy_options.isEmpty())\n         {\n             sessionState.out.println(\"      Compaction Strategy Options:\");\n             for (Map.Entry<String, String> e : cf_def.compaction_strategy_options.entrySet())", "filename": "src/java/org/apache/cassandra/cli/CliClient.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/101cd72e55168f6a97bbb2556aed9f23cef80f42", "parent": "https://github.com/apache/cassandra/commit/97474ee36adcd960db4916cd33b533c086228f70", "message": "Avoid NPE when performing sstable tasks (scrub etc)\n\npatch by yukim; reviewed by marcuse for CASSANDRA-10980", "bug_id": "cassandra_51", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/101cd72e55168f6a97bbb2556aed9f23cef80f42/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/101cd72e55168f6a97bbb2556aed9f23cef80f42/CHANGES.txt", "sha": "52e3d4d11e072106bcf565f825916e71288fe73d", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=101cd72e55168f6a97bbb2556aed9f23cef80f42", "patch": "@@ -1,4 +1,5 @@\n 2.2.5\n+ * Avoid NPE when performing sstable tasks (scrub etc.) (CASSANDRA-10980)\n  * Make sure client gets tombstone overwhelmed warning (CASSANDRA-9465)\n  * Fix error streaming section more than 2GB (CASSANDRA-10961)\n  * (cqlsh) Also apply --connect-timeout to control connection", "filename": "CHANGES.txt"}, {"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/101cd72e55168f6a97bbb2556aed9f23cef80f42/src/java/org/apache/cassandra/db/compaction/CompactionManager.java", "blob_url": "https://github.com/apache/cassandra/blob/101cd72e55168f6a97bbb2556aed9f23cef80f42/src/java/org/apache/cassandra/db/compaction/CompactionManager.java", "sha": "e0caf76b35a836b2fed0ad28a1e0217c48319b47", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/compaction/CompactionManager.java?ref=101cd72e55168f6a97bbb2556aed9f23cef80f42", "patch": "@@ -258,9 +258,9 @@ public void run()\n     private AllSSTableOpStatus parallelAllSSTableOperation(final ColumnFamilyStore cfs, final OneSSTableOperation operation, OperationType operationType) throws ExecutionException, InterruptedException\n     {\n         List<LifecycleTransaction> transactions = new ArrayList<>();\n-        try (LifecycleTransaction compacting = cfs.markAllCompacting(operationType);)\n+        try (LifecycleTransaction compacting = cfs.markAllCompacting(operationType))\n         {\n-            Iterable<SSTableReader> sstables = Lists.newArrayList(operation.filterSSTables(compacting));\n+            Iterable<SSTableReader> sstables = compacting != null ? Lists.newArrayList(operation.filterSSTables(compacting)) : Collections.<SSTableReader>emptyList();\n             if (Iterables.isEmpty(sstables))\n             {\n                 logger.info(\"No sstables for {}.{}\", cfs.keyspace.getName(), cfs.name);", "filename": "src/java/org/apache/cassandra/db/compaction/CompactionManager.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/c8c2044e40454530bbb14ffd07bfbef44f60ae16", "parent": "https://github.com/apache/cassandra/commit/de0707432d92bdcf9b846a1135f64e1777ab56d6", "message": "prevent NPE when there is nothing to do", "bug_id": "cassandra_52", "file": [{"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/c8c2044e40454530bbb14ffd07bfbef44f60ae16/src/java/org/apache/cassandra/db/compaction/CompactionManager.java", "blob_url": "https://github.com/apache/cassandra/blob/c8c2044e40454530bbb14ffd07bfbef44f60ae16/src/java/org/apache/cassandra/db/compaction/CompactionManager.java", "sha": "867227f20633ee097247c574f2140716cc46fe30", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/compaction/CompactionManager.java?ref=c8c2044e40454530bbb14ffd07bfbef44f60ae16", "patch": "@@ -184,6 +184,9 @@ public void run()\n     private void performAllSSTableOperation(final ColumnFamilyStore cfs, final AllSSTablesOperation operation) throws InterruptedException, ExecutionException\n     {\n         final Collection<SSTableReader> sstables = cfs.markAllCompacting();\n+        if (sstables == null)\n+            return;\n+\n         Callable<Object> runnable = new Callable<Object>()\n         {\n             public Object call() throws IOException", "filename": "src/java/org/apache/cassandra/db/compaction/CompactionManager.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/21191e6efa8a31292791717295f460faacec54ae", "parent": "https://github.com/apache/cassandra/commit/13daf89dafa254c640c04cf5ef38946efa349651", "message": "guard against npe if no thrift supercolumn data\npatch by dbrosius, reviewed by slebresne for CASSANDRA-10942", "bug_id": "cassandra_53", "file": [{"additions": 11, "raw_url": "https://github.com/apache/cassandra/raw/21191e6efa8a31292791717295f460faacec54ae/src/java/org/apache/cassandra/thrift/ThriftResultsMerger.java", "blob_url": "https://github.com/apache/cassandra/blob/21191e6efa8a31292791717295f460faacec54ae/src/java/org/apache/cassandra/thrift/ThriftResultsMerger.java", "sha": "ea3fa2f3ddbdb25dd3e876ecacfa5d3a0b1dcf84", "changes": 14, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/thrift/ThriftResultsMerger.java?ref=21191e6efa8a31292791717295f460faacec54ae", "patch": "@@ -234,9 +234,17 @@ public Row applyToRow(Row row)\n             builder.newRow(row.clustering());\n \n             ComplexColumnData complexData = row.getComplexColumnData(superColumnMapColumn);\n-            PeekingIterator<Cell> dynamicCells = Iterators.peekingIterator(complexData == null ? Collections.<Cell>emptyIterator() : complexData.iterator());\n-\n-            builder.addComplexDeletion(superColumnMapColumn, complexData.complexDeletion());\n+            \n+            PeekingIterator<Cell> dynamicCells;\n+            if (complexData == null)\n+            {\n+                dynamicCells = Iterators.peekingIterator(Collections.<Cell>emptyIterator());\n+            }\n+            else\n+            {\n+                dynamicCells = Iterators.peekingIterator(complexData.iterator());\n+                builder.addComplexDeletion(superColumnMapColumn, complexData.complexDeletion());\n+            }\n \n             while (staticCells.hasNext() && dynamicCells.hasNext())\n             {", "filename": "src/java/org/apache/cassandra/thrift/ThriftResultsMerger.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/59ba098d29fd492a715b7b5c13e6be17cebd33d9", "parent": "https://github.com/apache/cassandra/commit/922a2c49b6de281c95b0ef05481c076bf2abd077", "message": "initialize IndexBuilder before updating digest to avoid NPE (follow up CASSANDRA-8979)", "bug_id": "cassandra_54", "file": [{"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/59ba098d29fd492a715b7b5c13e6be17cebd33d9/src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java", "blob_url": "https://github.com/apache/cassandra/blob/59ba098d29fd492a715b7b5c13e6be17cebd33d9/src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java", "sha": "f61cc2b8583bafb4707ca0242bf482b3b4d90355", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java?ref=59ba098d29fd492a715b7b5c13e6be17cebd33d9", "patch": "@@ -141,6 +141,9 @@ public void update(MessageDigest digest)\n         // blindly updating everything wouldn't be correct\n         DataOutputBuffer out = new DataOutputBuffer();\n \n+        // initialize indexBuilder for the benefit of its tombstoneTracker, used by our reducing iterator\n+        indexBuilder = new ColumnIndex.Builder(emptyColumnFamily, key.key, out);\n+\n         try\n         {\n             DeletionTime.serializer.serialize(emptyColumnFamily.deletionInfo().getTopLevelDeletion(), out);\n@@ -158,8 +161,6 @@ public void update(MessageDigest digest)\n             throw new AssertionError(e);\n         }\n \n-        // initialize indexBuilder for the benefit of its tombstoneTracker, used by our reducing iterator\n-        indexBuilder = new ColumnIndex.Builder(emptyColumnFamily, key.key, out);\n         while (iter.hasNext())\n             iter.next().updateDigest(digest);\n         close();", "filename": "src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/5b6a2b11bc8a9499ac012d745869e3d814cc91ad", "parent": "https://github.com/apache/cassandra/commit/ad52ce4fa303d2c63cbd9833b7245ab2cdff28b3", "message": "fix NPE\npatch by David Alves for CASSANDRA-1123", "bug_id": "cassandra_55", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/5b6a2b11bc8a9499ac012d745869e3d814cc91ad/src/java/org/apache/cassandra/db/ColumnFamilyStore.java", "blob_url": "https://github.com/apache/cassandra/blob/5b6a2b11bc8a9499ac012d745869e3d814cc91ad/src/java/org/apache/cassandra/db/ColumnFamilyStore.java", "sha": "ef0e55dcec4d496e8e5305ae6f465a3b45b89f4d", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=5b6a2b11bc8a9499ac012d745869e3d814cc91ad", "patch": "@@ -1192,7 +1192,7 @@ ColumnFamily getColumnFamily(QueryFilter filter, int gcBefore)\n             readStats.addNano(System.nanoTime() - start);\n         }\n \n-        logger.debug(\"Read {} columns\", result.getColumnCount());\n+        logger.debug(\"Read {} columns\", result == null ? 0 : result.getColumnCount());\n         return result;\n     }\n ", "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/043d1808366a40b81d5275090060b7372ae4cbf5", "parent": "https://github.com/apache/cassandra/commit/853a75936c886136e9c7d5e0be42583e0305a6bd", "message": "fix NPE from circular dependency on compaction strategy", "bug_id": "cassandra_56", "file": [{"additions": 8, "raw_url": "https://github.com/apache/cassandra/raw/043d1808366a40b81d5275090060b7372ae4cbf5/src/java/org/apache/cassandra/db/ColumnFamilyStore.java", "blob_url": "https://github.com/apache/cassandra/blob/043d1808366a40b81d5275090060b7372ae4cbf5/src/java/org/apache/cassandra/db/ColumnFamilyStore.java", "sha": "b3da68ee36e69f6ab3b1db09e58f10f662b4ffa0", "changes": 10, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=043d1808366a40b81d5275090060b7372ae4cbf5", "patch": "@@ -1730,7 +1730,10 @@ public void setMinimumCompactionThreshold(int minCompactionThreshold)\n             throw new RuntimeException(\"The min_compaction_threshold cannot be larger than the max.\");\n \n         this.minCompactionThreshold.set(minCompactionThreshold);\n-        CompactionManager.instance.submitBackground(this);\n+\n+        // this is called as part of CompactionStrategy constructor; avoid circular dependency by checking for null\n+        if (compactionStrategy != null)\n+            CompactionManager.instance.submitBackground(this);\n     }\n \n     public int getMaximumCompactionThreshold()\n@@ -1744,7 +1747,10 @@ public void setMaximumCompactionThreshold(int maxCompactionThreshold)\n             throw new RuntimeException(\"The max_compaction_threshold cannot be smaller than the min.\");\n \n         this.maxCompactionThreshold.set(maxCompactionThreshold);\n-        CompactionManager.instance.submitBackground(this);\n+\n+        // this is called as part of CompactionStrategy constructor; avoid circular dependency by checking for null\n+        if (compactionStrategy != null)\n+            CompactionManager.instance.submitBackground(this);\n     }\n \n     public boolean isCompactionDisabled()", "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/376dae26833591303cd3140001666f23aa216a11", "parent": "https://github.com/apache/cassandra/commit/59ee46e55a15775a49edde86de81b9b79875731d", "message": "Merge branch 'cassandra-3.0' into cassandra-3.9\n\n* cassandra-3.0:\n  NPE when trying to remove purgable tombstones from result", "bug_id": "cassandra_57", "file": [], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/ac9cfbd9aeb91c3391d78724fe8cb1e49ada55aa", "parent": "https://github.com/apache/cassandra/commit/451c514a3a02f4e889f040176453beefbcd75843", "message": "Fix NPE after dropping a keyspace\n\nPatch by tjake; reviewed by Chris Lohfink for CASSANDRA-8332", "bug_id": "cassandra_58", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/ac9cfbd9aeb91c3391d78724fe8cb1e49ada55aa/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/ac9cfbd9aeb91c3391d78724fe8cb1e49ada55aa/CHANGES.txt", "sha": "c25caf96768d2a1b4295bade772e48e3c43ff8ff", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=ac9cfbd9aeb91c3391d78724fe8cb1e49ada55aa", "patch": "@@ -1,4 +1,5 @@\n 2.0.12:\n+ * Fix NPE after dropping a keyspace (CASSANDRA-8332)\n  * Fix error message on read repair timeouts (CASSANDRA-7947)\n  * Default DTCS base_time_seconds changed to 60 (CASSANDRA-8417)\n  * Refuse Paxos operation with more than one pending endpoint (CASSANDRA-8346)", "filename": "CHANGES.txt"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/ac9cfbd9aeb91c3391d78724fe8cb1e49ada55aa/src/java/org/apache/cassandra/io/compress/CompressionParameters.java", "blob_url": "https://github.com/apache/cassandra/blob/ac9cfbd9aeb91c3391d78724fe8cb1e49ada55aa/src/java/org/apache/cassandra/io/compress/CompressionParameters.java", "sha": "98f01d4d2f1f2db6e60106171fd8cfdac3eeeb66", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/compress/CompressionParameters.java?ref=ac9cfbd9aeb91c3391d78724fe8cb1e49ada55aa", "patch": "@@ -105,6 +105,9 @@ public CompressionParameters copy()\n \n     public void setLiveMetadata(final CFMetaData liveMetadata)\n     {\n+        if (liveMetadata == null)\n+            return;\n+\n         assert this.liveMetadata == null || this.liveMetadata == liveMetadata;\n         this.liveMetadata = liveMetadata;\n     }", "filename": "src/java/org/apache/cassandra/io/compress/CompressionParameters.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/588dc06eb8b5a7678128e9f0c0421fc391b14bce", "parent": "https://github.com/apache/cassandra/commit/4b1d59e13143f5a55478a7cfcaca61ba22259f9f", "message": "Fix NPE in nodetool compactionhistory\n\npatch by Pierre N. and yukim; reviewed by yukim for CASSANDRA-9758", "bug_id": "cassandra_59", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/588dc06eb8b5a7678128e9f0c0421fc391b14bce/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/588dc06eb8b5a7678128e9f0c0421fc391b14bce/CHANGES.txt", "sha": "278773967b9bc1da706b35ce68a0428edde084a2", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=588dc06eb8b5a7678128e9f0c0421fc391b14bce", "patch": "@@ -1,4 +1,5 @@\n 2.1.10\n+ * Fix NPE in nodetool compactionhistory (CASSANDRA-9758)\n  * (Pig) support BulkOutputFormat as a URL parameter (CASSANDRA-7410)\n  * BATCH statement is broken in cqlsh (CASSANDRA-10272)\n  * Added configurable warning threshold for GC duration (CASSANDRA-8907)", "filename": "CHANGES.txt"}, {"additions": 14, "raw_url": "https://github.com/apache/cassandra/raw/588dc06eb8b5a7678128e9f0c0421fc391b14bce/src/java/org/apache/cassandra/utils/FBUtilities.java", "blob_url": "https://github.com/apache/cassandra/blob/588dc06eb8b5a7678128e9f0c0421fc391b14bce/src/java/org/apache/cassandra/utils/FBUtilities.java", "sha": "f866610b1dd811a6940d831de7539a391c27a1a0", "changes": 16, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/utils/FBUtilities.java?ref=588dc06eb8b5a7678128e9f0c0421fc391b14bce", "patch": "@@ -28,14 +28,16 @@\n import java.nio.ByteBuffer;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n-import java.text.NumberFormat;\n import java.util.*;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n import java.util.zip.Checksum;\n \n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n import com.google.common.base.Joiner;\n import com.google.common.collect.AbstractIterator;\n import org.apache.cassandra.io.util.FileUtils;\n@@ -472,8 +474,18 @@ public static IAuthenticator newAuthenticator(String className) throws Configura\n         return s;\n     }\n \n-    public static String toString(Map<?,?> map)\n+    /**\n+     * Make straing out of the given {@code Map}.\n+     *\n+     * @param map Map to make string.\n+     * @return String representation of all entries in the map,\n+     *         where key and value pair is concatenated with ':'.\n+     */\n+    @Nonnull\n+    public static String toString(@Nullable Map<?, ?> map)\n     {\n+        if (map == null)\n+            return \"\";\n         Joiner.MapJoiner joiner = Joiner.on(\", \").withKeyValueSeparator(\":\");\n         return joiner.join(map);\n     }", "filename": "src/java/org/apache/cassandra/utils/FBUtilities.java"}, {"additions": 19, "raw_url": "https://github.com/apache/cassandra/raw/588dc06eb8b5a7678128e9f0c0421fc391b14bce/test/unit/org/apache/cassandra/utils/FBUtilitiesTest.java", "blob_url": "https://github.com/apache/cassandra/blob/588dc06eb8b5a7678128e9f0c0421fc391b14bce/test/unit/org/apache/cassandra/utils/FBUtilitiesTest.java", "sha": "c82bcc963ba951b99f0c13d886c9c06d5c9d9856", "changes": 19, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/utils/FBUtilitiesTest.java?ref=588dc06eb8b5a7678128e9f0c0421fc391b14bce", "patch": "@@ -27,6 +27,11 @@\n import com.google.common.primitives.Ints;\n import org.junit.Test;\n \n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import static org.junit.Assert.assertEquals;\n+\n public class FBUtilitiesTest\n {\n     @Test\n@@ -70,6 +75,20 @@ public void testCompareByteSubArrays()\n         }\n     }\n \n+    @Test\n+    public void testToString()\n+    {\n+        // null turns to empty string\n+        assertEquals(\"\", FBUtilities.toString(null));\n+        Map<String, String> map = new TreeMap<>();\n+        // empty map turns to empty string\n+        assertEquals(\"\", FBUtilities.toString(map));\n+        map.put(\"aaa\", \"bbb\");\n+        assertEquals(\"aaa:bbb\", FBUtilities.toString(map));\n+        map.put(\"ccc\", \"ddd\");\n+        assertEquals(\"aaa:bbb, ccc:ddd\", FBUtilities.toString(map));\n+    }\n+\n     @Test(expected=CharacterCodingException.class)\n     public void testDecode() throws IOException\n     {", "filename": "test/unit/org/apache/cassandra/utils/FBUtilitiesTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/7e53db0b927ad2f7bd25dbebc6c01a942afd79da", "parent": "https://github.com/apache/cassandra/commit/a1f7ccfb2446b332a42f95cb57bfa53fdf625df5", "message": "Fix NPE when preparing statements\n\npatch by blere; reviewed by slebresne for CASSANDRA-8090", "bug_id": "cassandra_60", "file": [{"additions": 16, "raw_url": "https://github.com/apache/cassandra/raw/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/ColumnIdentifier.java", "blob_url": "https://github.com/apache/cassandra/blob/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/ColumnIdentifier.java", "sha": "9b4f29f8b1a2f560f478418ba3121a20abeba869", "changes": 18, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/ColumnIdentifier.java?ref=7e53db0b927ad2f7bd25dbebc6c01a942afd79da", "patch": "@@ -17,12 +17,18 @@\n  */\n package org.apache.cassandra.cql3;\n \n+import java.util.List;\n import java.util.Locale;\n import java.nio.ByteBuffer;\n \n import org.apache.cassandra.cache.IMeasurableMemory;\n-import org.apache.cassandra.cql3.statements.Selectable;\n+import org.apache.cassandra.config.CFMetaData;\n+import org.apache.cassandra.config.ColumnDefinition;\n+import org.apache.cassandra.cql3.selection.Selectable;\n+import org.apache.cassandra.cql3.selection.Selector;\n+import org.apache.cassandra.cql3.selection.SimpleSelector;\n import org.apache.cassandra.db.marshal.AbstractType;\n+import org.apache.cassandra.exceptions.InvalidRequestException;\n import org.apache.cassandra.utils.ByteBufferUtil;\n import org.apache.cassandra.utils.ObjectSizes;\n import org.apache.cassandra.utils.memory.AbstractAllocator;\n@@ -31,7 +37,7 @@\n  * Represents an identifer for a CQL column definition.\n  * TODO : should support light-weight mode without text representation for when not interned\n  */\n-public class ColumnIdentifier implements Selectable, IMeasurableMemory\n+public class ColumnIdentifier extends Selectable implements IMeasurableMemory\n {\n     public final ByteBuffer bytes;\n     private final String text;\n@@ -101,4 +107,12 @@ public ColumnIdentifier clone(AbstractAllocator allocator)\n         return new ColumnIdentifier(allocator.clone(bytes), text);\n     }\n \n+    public Selector.Factory newSelectorFactory(CFMetaData cfm, List<ColumnDefinition> defs) throws InvalidRequestException\n+    {\n+        ColumnDefinition def = cfm.getColumnDefinition(this);\n+        if (def == null)\n+            throw new InvalidRequestException(String.format(\"Undefined name %s in selection clause\", this));\n+\n+        return SimpleSelector.newFactory(def.name.toString(), addAndGetIndex(def, defs), def.type);\n+    }\n }", "filename": "src/java/org/apache/cassandra/cql3/ColumnIdentifier.java"}, {"additions": 11, "raw_url": "https://github.com/apache/cassandra/raw/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/ColumnSpecification.java", "blob_url": "https://github.com/apache/cassandra/blob/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/ColumnSpecification.java", "sha": "2584f857f5a4d075d2ff1e8124efc55a210c8dcc", "changes": 11, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/ColumnSpecification.java?ref=7e53db0b927ad2f7bd25dbebc6c01a942afd79da", "patch": "@@ -33,4 +33,15 @@ public ColumnSpecification(String ksName, String cfName, ColumnIdentifier name,\n         this.name = name;\n         this.type = type;\n     }\n+\n+    /**\n+     * Returns a new <code>ColumnSpecification</code> for the same column but with the specified alias.\n+     *\n+     * @param alias the column alias\n+     * @return a new <code>ColumnSpecification</code> for the same column but with the specified alias.\n+     */\n+    public ColumnSpecification withAlias(ColumnIdentifier alias)\n+    {\n+        return new ColumnSpecification(ksName, cfName, alias, type);\n+    }\n }", "filename": "src/java/org/apache/cassandra/cql3/ColumnSpecification.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/Cql.g", "blob_url": "https://github.com/apache/cassandra/blob/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/Cql.g", "sha": "7634a4824db1c33ff819312aadeb8143cfa14376", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/Cql.g?ref=7e53db0b927ad2f7bd25dbebc6c01a942afd79da", "patch": "@@ -42,6 +42,7 @@ options {\n     import org.apache.cassandra.auth.IResource;\n     import org.apache.cassandra.cql3.*;\n     import org.apache.cassandra.cql3.statements.*;\n+    import org.apache.cassandra.cql3.selection.*;\n     import org.apache.cassandra.cql3.functions.*;\n     import org.apache.cassandra.db.marshal.CollectionType;\n     import org.apache.cassandra.exceptions.ConfigurationException;", "filename": "src/java/org/apache/cassandra/cql3/Cql.g"}, {"additions": 111, "raw_url": "https://github.com/apache/cassandra/raw/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/selection/AbstractFunctionSelector.java", "blob_url": "https://github.com/apache/cassandra/blob/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/selection/AbstractFunctionSelector.java", "sha": "b04f3468c3eae86ac6f7cc6292a213b6384f47dd", "changes": 111, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/selection/AbstractFunctionSelector.java?ref=7e53db0b927ad2f7bd25dbebc6c01a942afd79da", "patch": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.cassandra.cql3.selection;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.cassandra.config.CFMetaData;\n+import org.apache.cassandra.cql3.ColumnIdentifier;\n+import org.apache.cassandra.cql3.ColumnSpecification;\n+import org.apache.cassandra.cql3.functions.Function;\n+import org.apache.cassandra.db.marshal.AbstractType;\n+import org.apache.cassandra.exceptions.InvalidRequestException;\n+import org.apache.commons.lang3.text.StrBuilder;\n+\n+abstract class AbstractFunctionSelector<T extends Function> extends Selector\n+{\n+    protected final T fun;\n+\n+    /**\n+     * The list used to pass the function arguments is recycled to avoid the cost of instantiating a new list\n+     * with each function call.\n+     */\n+    protected final List<ByteBuffer> args;\n+    protected final List<Selector> argSelectors;\n+\n+    public static Factory newFactory(final Function fun, final SelectorFactories factories) throws InvalidRequestException\n+    {\n+        if (fun.isAggregate())\n+        {\n+            if (factories.doesAggregation())\n+                throw new InvalidRequestException(\"aggregate functions cannot be used as arguments of aggregate functions\");\n+        }\n+        else\n+        {\n+            if (factories.doesAggregation() && !factories.containsOnlyAggregateFunctions())\n+                throw new InvalidRequestException(String.format(\"the %s function arguments must be either all aggregates or all none aggregates\",\n+                                                                fun.name().name));\n+        }\n+\n+        return new Factory()\n+        {\n+            public ColumnSpecification getColumnSpecification(CFMetaData cfm)\n+            {\n+                return new ColumnSpecification(cfm.ksName,\n+                                               cfm.cfName,\n+                                               new ColumnIdentifier(fun.toString(), true),\n+                                               fun.returnType());\n+            }\n+\n+            public Selector newInstance()\n+            {\n+                return fun.isAggregate() ? new AggregateFunctionSelector(fun, factories.newInstances())\n+                                         : new ScalarFunctionSelector(fun, factories.newInstances());\n+            }\n+\n+            public boolean isWritetimeSelectorFactory()\n+            {\n+                return factories.containsWritetimeSelectorFactory();\n+            }\n+\n+            public boolean isTTLSelectorFactory()\n+            {\n+                return factories.containsTTLSelectorFactory();\n+            }\n+\n+            public boolean isAggregateSelectorFactory()\n+            {\n+                return fun.isAggregate() || factories.containsOnlyAggregateFunctions();\n+            }\n+        };\n+    }\n+\n+    protected AbstractFunctionSelector(T fun, List<Selector> argSelectors)\n+    {\n+        this.fun = fun;\n+        this.argSelectors = argSelectors;\n+        this.args = Arrays.asList(new ByteBuffer[argSelectors.size()]);\n+    }\n+\n+    public AbstractType<?> getType()\n+    {\n+        return fun.returnType();\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return new StrBuilder().append(fun.name())\n+                               .append(\"(\")\n+                               .appendWithSeparators(argSelectors, \", \")\n+                               .append(\")\")\n+                               .toString();\n+    }\n+}", "filename": "src/java/org/apache/cassandra/cql3/selection/AbstractFunctionSelector.java"}, {"additions": 66, "raw_url": "https://github.com/apache/cassandra/raw/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/selection/AggregateFunctionSelector.java", "blob_url": "https://github.com/apache/cassandra/blob/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/selection/AggregateFunctionSelector.java", "sha": "6ea9716cfc7f1c05775f3dd3014040e63e0a37f7", "changes": 66, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/selection/AggregateFunctionSelector.java?ref=7e53db0b927ad2f7bd25dbebc6c01a942afd79da", "patch": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.cassandra.cql3.selection;\n+\n+import java.nio.ByteBuffer;\n+import java.util.List;\n+\n+import org.apache.cassandra.cql3.functions.AggregateFunction;\n+import org.apache.cassandra.cql3.functions.Function;\n+import org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder;\n+import org.apache.cassandra.exceptions.InvalidRequestException;\n+\n+final class AggregateFunctionSelector extends AbstractFunctionSelector<AggregateFunction>\n+{\n+    private final AggregateFunction.Aggregate aggregate;\n+\n+    public boolean isAggregate()\n+    {\n+        return true;\n+    }\n+\n+    public void addInput(ResultSetBuilder rs) throws InvalidRequestException\n+    {\n+        // Aggregation of aggregation is not supported\n+        for (int i = 0, m = argSelectors.size(); i < m; i++)\n+        {\n+            Selector s = argSelectors.get(i);\n+            s.addInput(rs);\n+            args.set(i, s.getOutput());\n+            s.reset();\n+        }\n+        this.aggregate.addInput(args);\n+    }\n+\n+    public ByteBuffer getOutput() throws InvalidRequestException\n+    {\n+        return aggregate.compute();\n+    }\n+\n+    public void reset()\n+    {\n+        aggregate.reset();\n+    }\n+\n+    AggregateFunctionSelector(Function fun, List<Selector> argSelectors)\n+    {\n+        super((AggregateFunction) fun, argSelectors);\n+\n+        this.aggregate = this.fun.newAggregate();\n+    }\n+}", "filename": "src/java/org/apache/cassandra/cql3/selection/AggregateFunctionSelector.java"}, {"additions": 104, "raw_url": "https://github.com/apache/cassandra/raw/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/selection/FieldSelector.java", "blob_url": "https://github.com/apache/cassandra/blob/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/selection/FieldSelector.java", "sha": "0bba56c5a46c2c582c8ddededd228a268d51d367", "changes": 104, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/selection/FieldSelector.java?ref=7e53db0b927ad2f7bd25dbebc6c01a942afd79da", "patch": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.cassandra.cql3.selection;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.cassandra.config.CFMetaData;\n+import org.apache.cassandra.cql3.ColumnIdentifier;\n+import org.apache.cassandra.cql3.ColumnSpecification;\n+import org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder;\n+import org.apache.cassandra.db.marshal.AbstractType;\n+import org.apache.cassandra.db.marshal.UTF8Type;\n+import org.apache.cassandra.db.marshal.UserType;\n+import org.apache.cassandra.exceptions.InvalidRequestException;\n+\n+final class FieldSelector extends Selector\n+{\n+    private final UserType type;\n+    private final int field;\n+    private final Selector selected;\n+\n+    public static Factory newFactory(final UserType type, final int field, final Selector.Factory factory)\n+    {\n+        return new Factory()\n+        {\n+            public ColumnSpecification getColumnSpecification(CFMetaData cfm)\n+            {\n+                ColumnIdentifier identifier =\n+                        new ColumnIdentifier(String.format(\"%s.%s\",\n+                                                           factory.getColumnSpecification(cfm).name,\n+                                                           UTF8Type.instance.getString(type.fieldName(field))), true);\n+\n+                return new ColumnSpecification(cfm.ksName, cfm.cfName, identifier, type.fieldType(field));\n+            }\n+\n+            public Selector newInstance()\n+            {\n+                return new FieldSelector(type, field, factory.newInstance());\n+            }\n+\n+            public boolean isAggregateSelectorFactory()\n+            {\n+                return factory.isAggregateSelectorFactory();\n+            }\n+        };\n+    }\n+\n+    public boolean isAggregate()\n+    {\n+        return false;\n+    }\n+\n+    public void addInput(ResultSetBuilder rs) throws InvalidRequestException\n+    {\n+        selected.addInput(rs);\n+    }\n+\n+    public ByteBuffer getOutput() throws InvalidRequestException\n+    {\n+        ByteBuffer value = selected.getOutput();\n+        if (value == null)\n+            return null;\n+        ByteBuffer[] buffers = type.split(value);\n+        return field < buffers.length ? buffers[field] : null;\n+    }\n+\n+    public AbstractType<?> getType()\n+    {\n+        return type.fieldType(field);\n+    }\n+\n+    public void reset()\n+    {\n+        selected.reset();\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return String.format(\"%s.%s\", selected, UTF8Type.instance.getString(type.fieldName(field)));\n+    }\n+\n+    private FieldSelector(UserType type, int field, Selector selected)\n+    {\n+        this.type = type;\n+        this.field = field;\n+        this.selected = selected;\n+    }\n+}\n\\ No newline at end of file", "filename": "src/java/org/apache/cassandra/cql3/selection/FieldSelector.java"}, {"additions": 23, "raw_url": "https://github.com/apache/cassandra/raw/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/selection/RawSelector.java", "blob_url": "https://github.com/apache/cassandra/blob/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/selection/RawSelector.java", "previous_filename": "src/java/org/apache/cassandra/cql3/statements/RawSelector.java", "sha": "372c4b35d7d5c1f702bd037b6384896f981cf3cb", "changes": 24, "status": "renamed", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/selection/RawSelector.java?ref=7e53db0b927ad2f7bd25dbebc6c01a942afd79da", "patch": "@@ -16,10 +16,15 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.cassandra.cql3.statements;\n+package org.apache.cassandra.cql3.selection;\n+\n+import java.util.List;\n \n import org.apache.cassandra.cql3.ColumnIdentifier;\n \n+import com.google.common.base.Function;\n+import com.google.common.collect.Lists;\n+\n public class RawSelector\n {\n     public final Selectable selectable;\n@@ -30,4 +35,21 @@ public RawSelector(Selectable selectable, ColumnIdentifier alias)\n         this.selectable = selectable;\n         this.alias = alias;\n     }\n+\n+    /**\n+     * Converts the specified list of <code>RawSelector</code>s into a list of <code>Selectable</code>s.\n+     *\n+     * @param raws the <code>RawSelector</code>s to converts.\n+     * @return a list of <code>Selectable</code>s\n+     */\n+    public static List<Selectable> toSelectables(List<RawSelector> raws)\n+    {\n+        return Lists.transform(raws, new Function<RawSelector, Selectable>()\n+        {\n+            public Selectable apply(RawSelector raw)\n+            {\n+                return raw.selectable;\n+            }\n+        });\n+    }\n }", "filename": "src/java/org/apache/cassandra/cql3/selection/RawSelector.java"}, {"additions": 67, "raw_url": "https://github.com/apache/cassandra/raw/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/selection/ScalarFunctionSelector.java", "blob_url": "https://github.com/apache/cassandra/blob/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/selection/ScalarFunctionSelector.java", "sha": "4ceadb9103cbf9f10949eba0a5affddff8444575", "changes": 67, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/selection/ScalarFunctionSelector.java?ref=7e53db0b927ad2f7bd25dbebc6c01a942afd79da", "patch": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.cassandra.cql3.selection;\n+\n+import java.nio.ByteBuffer;\n+import java.util.List;\n+\n+import org.apache.cassandra.cql3.functions.Function;\n+import org.apache.cassandra.cql3.functions.ScalarFunction;\n+import org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder;\n+import org.apache.cassandra.exceptions.InvalidRequestException;\n+\n+final class ScalarFunctionSelector extends AbstractFunctionSelector<ScalarFunction>\n+{\n+    public boolean isAggregate()\n+    {\n+        // We cannot just return true as it is possible to have a scalar function wrapping an aggregation function\n+        if (argSelectors.isEmpty())\n+            return false;\n+\n+        return argSelectors.get(0).isAggregate();\n+    }\n+\n+    public void addInput(ResultSetBuilder rs) throws InvalidRequestException\n+    {\n+        for (int i = 0, m = argSelectors.size(); i < m; i++)\n+        {\n+            Selector s = argSelectors.get(i);\n+            s.addInput(rs);\n+        }\n+    }\n+\n+    public void reset()\n+    {\n+    }\n+\n+    public ByteBuffer getOutput() throws InvalidRequestException\n+    {\n+        for (int i = 0, m = argSelectors.size(); i < m; i++)\n+        {\n+            Selector s = argSelectors.get(i);\n+            args.set(i, s.getOutput());\n+            s.reset();\n+        }\n+        return fun.execute(args);\n+    }\n+\n+    ScalarFunctionSelector(Function fun, List<Selector> argSelectors)\n+    {\n+        super((ScalarFunction) fun, argSelectors);\n+    }\n+}\n\\ No newline at end of file", "filename": "src/java/org/apache/cassandra/cql3/selection/ScalarFunctionSelector.java"}, {"additions": 166, "raw_url": "https://github.com/apache/cassandra/raw/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/selection/Selectable.java", "blob_url": "https://github.com/apache/cassandra/blob/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/selection/Selectable.java", "sha": "9324647920f72aeb588ce0e05ffc225c827a8064", "changes": 166, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/selection/Selectable.java?ref=7e53db0b927ad2f7bd25dbebc6c01a942afd79da", "patch": "@@ -0,0 +1,166 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cassandra.cql3.selection;\n+\n+import java.util.List;\n+\n+import org.apache.cassandra.config.CFMetaData;\n+import org.apache.cassandra.config.ColumnDefinition;\n+import org.apache.cassandra.cql3.ColumnIdentifier;\n+import org.apache.cassandra.cql3.functions.Function;\n+import org.apache.cassandra.cql3.functions.FunctionName;\n+import org.apache.cassandra.cql3.functions.Functions;\n+import org.apache.cassandra.db.marshal.AbstractType;\n+import org.apache.cassandra.db.marshal.UserType;\n+import org.apache.cassandra.exceptions.InvalidRequestException;\n+import org.apache.commons.lang3.text.StrBuilder;\n+\n+public abstract class Selectable\n+{\n+    public abstract Selector.Factory newSelectorFactory(CFMetaData cfm, List<ColumnDefinition> defs)\n+            throws InvalidRequestException;\n+\n+    protected static int addAndGetIndex(ColumnDefinition def, List<ColumnDefinition> l)\n+    {\n+        int idx = l.indexOf(def);\n+        if (idx < 0)\n+        {\n+            idx = l.size();\n+            l.add(def);\n+        }\n+        return idx;\n+    }\n+\n+    public static class WritetimeOrTTL extends Selectable\n+    {\n+        public final ColumnIdentifier id;\n+        public final boolean isWritetime;\n+\n+        public WritetimeOrTTL(ColumnIdentifier id, boolean isWritetime)\n+        {\n+            this.id = id;\n+            this.isWritetime = isWritetime;\n+        }\n+\n+        @Override\n+        public String toString()\n+        {\n+            return (isWritetime ? \"writetime\" : \"ttl\") + \"(\" + id + \")\";\n+        }\n+\n+        public Selector.Factory newSelectorFactory(CFMetaData cfm,\n+                                                   List<ColumnDefinition> defs) throws InvalidRequestException\n+        {\n+            ColumnDefinition def = cfm.getColumnDefinition(id);\n+            if (def == null)\n+                throw new InvalidRequestException(String.format(\"Undefined name %s in selection clause\", id));\n+            if (def.isPrimaryKeyColumn())\n+                throw new InvalidRequestException(\n+                        String.format(\"Cannot use selection function %s on PRIMARY KEY part %s\",\n+                                      isWritetime ? \"writeTime\" : \"ttl\",\n+                                      def.name));\n+            if (def.type.isCollection())\n+                throw new InvalidRequestException(String.format(\"Cannot use selection function %s on collections\",\n+                                                                isWritetime ? \"writeTime\" : \"ttl\"));\n+\n+            return WritetimeOrTTLSelector.newFactory(def.name.toString(), addAndGetIndex(def, defs), isWritetime);\n+        }\n+    }\n+\n+    public static class WithFunction extends Selectable\n+    {\n+        public final FunctionName functionName;\n+        public final List<Selectable> args;\n+\n+        public WithFunction(FunctionName functionName, List<Selectable> args)\n+        {\n+            this.functionName = functionName;\n+            this.args = args;\n+        }\n+\n+        @Override\n+        public String toString()\n+        {\n+            return new StrBuilder().append(functionName)\n+                                   .append(\"(\")\n+                                   .appendWithSeparators(args, \", \")\n+                                   .append(\")\")\n+                                   .toString();\n+        }\n+\n+        public Selector.Factory newSelectorFactory(CFMetaData cfm,\n+                                                   List<ColumnDefinition> defs) throws InvalidRequestException\n+        {\n+            SelectorFactories factories  =\n+                    SelectorFactories.createFactoriesAndCollectColumnDefinitions(args, cfm, defs);\n+\n+            // resolve built-in functions before user defined functions\n+            Function fun = Functions.get(cfm.ksName, functionName, factories.newInstances(), cfm.ksName, cfm.cfName);\n+            if (fun == null)\n+                throw new InvalidRequestException(String.format(\"Unknown function '%s'\", functionName));\n+            if (fun.returnType() == null)\n+                throw new InvalidRequestException(String.format(\"Unknown function %s called in selection clause\",\n+                                                                functionName));\n+\n+            return AbstractFunctionSelector.newFactory(fun, factories);\n+        }\n+    }\n+\n+    public static class WithFieldSelection extends Selectable\n+    {\n+        public final Selectable selected;\n+        public final ColumnIdentifier field;\n+\n+        public WithFieldSelection(Selectable selected, ColumnIdentifier field)\n+        {\n+            this.selected = selected;\n+            this.field = field;\n+        }\n+\n+        @Override\n+        public String toString()\n+        {\n+            return String.format(\"%s.%s\", selected, field);\n+        }\n+\n+        public Selector.Factory newSelectorFactory(CFMetaData cfm,\n+                                                   List<ColumnDefinition> defs) throws InvalidRequestException\n+        {\n+            Selector.Factory factory = selected.newSelectorFactory(cfm, defs);\n+            AbstractType<?> type = factory.newInstance().getType();\n+            if (!(type instanceof UserType))\n+                throw new InvalidRequestException(\n+                        String.format(\"Invalid field selection: %s of type %s is not a user type\",\n+                                      selected,\n+                                      type.asCQL3Type()));\n+\n+            UserType ut = (UserType) type;\n+            for (int i = 0; i < ut.size(); i++)\n+            {\n+                if (!ut.fieldName(i).equals(field.bytes))\n+                    continue;\n+                return FieldSelector.newFactory(ut, i, factory);\n+            }\n+            throw new InvalidRequestException(String.format(\"%s of type %s has no field %s\",\n+                                                            selected,\n+                                                            type.asCQL3Type(),\n+                                                            field));\n+        }\n+    }\n+}", "filename": "src/java/org/apache/cassandra/cql3/selection/Selectable.java"}, {"additions": 390, "raw_url": "https://github.com/apache/cassandra/raw/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/selection/Selection.java", "blob_url": "https://github.com/apache/cassandra/blob/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/selection/Selection.java", "sha": "67cce72b92c9a37cccf964a2f2416f413846de84", "changes": 390, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/selection/Selection.java?ref=7e53db0b927ad2f7bd25dbebc6c01a942afd79da", "patch": "@@ -0,0 +1,390 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.cassandra.cql3.selection;\n+\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.apache.cassandra.config.CFMetaData;\n+import org.apache.cassandra.config.ColumnDefinition;\n+import org.apache.cassandra.cql3.ColumnIdentifier;\n+import org.apache.cassandra.cql3.ColumnSpecification;\n+import org.apache.cassandra.cql3.ResultSet;\n+import org.apache.cassandra.db.Cell;\n+import org.apache.cassandra.db.CounterCell;\n+import org.apache.cassandra.db.ExpiringCell;\n+import org.apache.cassandra.db.context.CounterContext;\n+import org.apache.cassandra.exceptions.InvalidRequestException;\n+import org.apache.cassandra.utils.ByteBufferUtil;\n+\n+import com.google.common.collect.Iterators;\n+\n+public abstract class Selection\n+{\n+    private final Collection<ColumnDefinition> columns;\n+    private final ResultSet.Metadata metadata;\n+    private final boolean collectTimestamps;\n+    private final boolean collectTTLs;\n+\n+    protected Selection(Collection<ColumnDefinition> columns, List<ColumnSpecification> metadata, boolean collectTimestamps, boolean collectTTLs)\n+    {\n+        this.columns = columns;\n+        this.metadata = new ResultSet.Metadata(metadata);\n+        this.collectTimestamps = collectTimestamps;\n+        this.collectTTLs = collectTTLs;\n+    }\n+\n+    // Overriden by SimpleSelection when appropriate.\n+    public boolean isWildcard()\n+    {\n+        return false;\n+    }\n+\n+    public ResultSet.Metadata getResultMetadata()\n+    {\n+        return metadata;\n+    }\n+\n+    public static Selection wildcard(CFMetaData cfm)\n+    {\n+        List<ColumnDefinition> all = new ArrayList<ColumnDefinition>(cfm.allColumns().size());\n+        Iterators.addAll(all, cfm.allColumnsInSelectOrder());\n+        return new SimpleSelection(all, true);\n+    }\n+\n+    public static Selection forColumns(Collection<ColumnDefinition> columns)\n+    {\n+        return new SimpleSelection(columns, false);\n+    }\n+\n+    public int addColumnForOrdering(ColumnDefinition c)\n+    {\n+        columns.add(c);\n+        metadata.addNonSerializedColumn(c);\n+        return columns.size() - 1;\n+    }\n+\n+    private static boolean isUsingFunction(List<RawSelector> rawSelectors)\n+    {\n+        for (RawSelector rawSelector : rawSelectors)\n+        {\n+            if (!(rawSelector.selectable instanceof ColumnIdentifier))\n+                return true;\n+        }\n+        return false;\n+    }\n+\n+    public static Selection fromSelectors(CFMetaData cfm, List<RawSelector> rawSelectors) throws InvalidRequestException\n+    {\n+        List<ColumnDefinition> defs = new ArrayList<ColumnDefinition>();\n+\n+        SelectorFactories factories =\n+                SelectorFactories.createFactoriesAndCollectColumnDefinitions(RawSelector.toSelectables(rawSelectors), cfm, defs);\n+        List<ColumnSpecification> metadata = collectMetadata(cfm, rawSelectors, factories);\n+\n+        return isUsingFunction(rawSelectors) ? new SelectionWithFunctions(defs, metadata, factories)\n+                                             : new SimpleSelection(defs, metadata, false);\n+    }\n+\n+    private static List<ColumnSpecification> collectMetadata(CFMetaData cfm,\n+                                                             List<RawSelector> rawSelectors,\n+                                                             SelectorFactories factories)\n+    {\n+        List<ColumnSpecification> metadata = new ArrayList<ColumnSpecification>(rawSelectors.size());\n+        Iterator<RawSelector> iter = rawSelectors.iterator();\n+        for (Selector.Factory factory : factories)\n+        {\n+            ColumnSpecification colSpec = factory.getColumnSpecification(cfm);\n+            ColumnIdentifier alias = iter.next().alias;\n+            metadata.add(alias == null ? colSpec : colSpec.withAlias(alias));\n+        }\n+        return metadata;\n+    }\n+\n+    protected abstract Selectors newSelectors();\n+\n+    /**\n+     * @return the list of CQL3 columns value this SelectionClause needs.\n+     */\n+    public Collection<ColumnDefinition> getColumns()\n+    {\n+        return columns;\n+    }\n+\n+    public ResultSetBuilder resultSetBuilder(long now)\n+    {\n+        return new ResultSetBuilder(now);\n+    }\n+\n+    public abstract boolean isAggregate();\n+\n+    /**\n+     * Checks that selectors are either all aggregates or that none of them is.\n+     *\n+     * @param selectors the selectors to test.\n+     * @param msgTemplate the error message template\n+     * @param messageArgs the error message arguments\n+     * @throws InvalidRequestException if some of the selectors are aggregate but not all of them\n+     */\n+    static void validateSelectors(List<Selector> selectors, String messageTemplate, Object... messageArgs)\n+            throws InvalidRequestException\n+    {\n+        int aggregates = 0;\n+        for (Selector s : selectors)\n+            if (s.isAggregate())\n+                ++aggregates;\n+\n+        if (aggregates != 0 && aggregates != selectors.size())\n+            throw new InvalidRequestException(String.format(messageTemplate, messageArgs));\n+    }\n+\n+    public class ResultSetBuilder\n+    {\n+        private final ResultSet resultSet;\n+\n+        /**\n+         * As multiple thread can access a <code>Selection</code> instance each <code>ResultSetBuilder</code> will use\n+         * its own <code>Selectors</code> instance.\n+         */\n+        private final Selectors selectors;\n+\n+        /*\n+         * We'll build CQL3 row one by one.\n+         * The currentRow is the values for the (CQL3) columns we've fetched.\n+         * We also collect timestamps and ttls for the case where the writetime and\n+         * ttl functions are used. Note that we might collect timestamp and/or ttls\n+         * we don't care about, but since the array below are allocated just once,\n+         * it doesn't matter performance wise.\n+         */\n+        List<ByteBuffer> current;\n+        final long[] timestamps;\n+        final int[] ttls;\n+        final long now;\n+\n+        private ResultSetBuilder(long now)\n+        {\n+            this.resultSet = new ResultSet(getResultMetadata().copy(), new ArrayList<List<ByteBuffer>>());\n+            this.selectors = newSelectors();\n+            this.timestamps = collectTimestamps ? new long[columns.size()] : null;\n+            this.ttls = collectTTLs ? new int[columns.size()] : null;\n+            this.now = now;\n+        }\n+\n+        public void add(ByteBuffer v)\n+        {\n+            current.add(v);\n+        }\n+\n+        public void add(Cell c)\n+        {\n+            current.add(isDead(c) ? null : value(c));\n+            if (timestamps != null)\n+            {\n+                timestamps[current.size() - 1] = isDead(c) ? -1 : c.timestamp();\n+            }\n+            if (ttls != null)\n+            {\n+                int ttl = -1;\n+                if (!isDead(c) && c instanceof ExpiringCell)\n+                    ttl = c.getLocalDeletionTime() - (int) (now / 1000);\n+                ttls[current.size() - 1] = ttl;\n+            }\n+        }\n+\n+        private boolean isDead(Cell c)\n+        {\n+            return c == null || !c.isLive(now);\n+        }\n+\n+        public void newRow() throws InvalidRequestException\n+        {\n+            if (current != null)\n+            {\n+                selectors.addInputRow(this);\n+                if (!selectors.isAggregate())\n+                {\n+                    resultSet.addRow(selectors.getOutputRow());\n+                    selectors.reset();\n+                }\n+            }\n+            current = new ArrayList<ByteBuffer>(columns.size());\n+        }\n+\n+        public ResultSet build() throws InvalidRequestException\n+        {\n+            if (current != null)\n+            {\n+                selectors.addInputRow(this);\n+                resultSet.addRow(selectors.getOutputRow());\n+                selectors.reset();\n+                current = null;\n+            }\n+            return resultSet;\n+        }\n+\n+        private ByteBuffer value(Cell c)\n+        {\n+            return (c instanceof CounterCell)\n+                ? ByteBufferUtil.bytes(CounterContext.instance().total(c.value()))\n+                : c.value();\n+        }\n+    }\n+\n+    private static interface Selectors\n+    {\n+        public boolean isAggregate();\n+\n+        /**\n+         * Adds the current row of the specified <code>ResultSetBuilder</code>.\n+         *\n+         * @param rs the <code>ResultSetBuilder</code>\n+         * @throws InvalidRequestException\n+         */\n+        public void addInputRow(ResultSetBuilder rs) throws InvalidRequestException;\n+\n+        public List<ByteBuffer> getOutputRow() throws InvalidRequestException;\n+\n+        public void reset();\n+    }\n+\n+    // Special cased selection for when no function is used (this save some allocations).\n+    private static class SimpleSelection extends Selection\n+    {\n+        private final boolean isWildcard;\n+\n+        public SimpleSelection(Collection<ColumnDefinition> columns, boolean isWildcard)\n+        {\n+            this(columns, new ArrayList<ColumnSpecification>(columns), isWildcard);\n+        }\n+\n+        public SimpleSelection(Collection<ColumnDefinition> columns, List<ColumnSpecification> metadata, boolean isWildcard)\n+        {\n+            /*\n+             * In theory, even a simple selection could have multiple time the same column, so we\n+             * could filter those duplicate out of columns. But since we're very unlikely to\n+             * get much duplicate in practice, it's more efficient not to bother.\n+             */\n+            super(columns, metadata, false, false);\n+            this.isWildcard = isWildcard;\n+        }\n+\n+        @Override\n+        public boolean isWildcard()\n+        {\n+            return isWildcard;\n+        }\n+\n+        public boolean isAggregate()\n+        {\n+            return false;\n+        }\n+\n+        protected Selectors newSelectors()\n+        {\n+            return new Selectors()\n+            {\n+                private List<ByteBuffer> current;\n+\n+                public void reset()\n+                {\n+                    current = null;\n+                }\n+\n+                public List<ByteBuffer> getOutputRow()\n+                {\n+                    return current;\n+                }\n+\n+                public void addInputRow(ResultSetBuilder rs) throws InvalidRequestException\n+                {\n+                    current = rs.current;\n+                }\n+\n+                public boolean isAggregate()\n+                {\n+                    return false;\n+                }\n+            };\n+        }\n+    }\n+\n+    private static class SelectionWithFunctions extends Selection\n+    {\n+        private final SelectorFactories factories;\n+\n+        public SelectionWithFunctions(Collection<ColumnDefinition> columns,\n+                                      List<ColumnSpecification> metadata,\n+                                      SelectorFactories factories) throws InvalidRequestException\n+        {\n+            super(columns, metadata, factories.containsWritetimeSelectorFactory(), factories.containsTTLSelectorFactory());\n+            this.factories = factories;\n+\n+            if (factories.doesAggregation() && !factories.containsOnlyAggregateFunctions())\n+                throw new InvalidRequestException(\"the select clause must either contains only aggregates or none\");\n+        }\n+\n+        public boolean isAggregate()\n+        {\n+            return factories.containsOnlyAggregateFunctions();\n+        }\n+\n+        protected Selectors newSelectors()\n+        {\n+            return new Selectors()\n+            {\n+                private final List<Selector> selectors = factories.newInstances();\n+\n+                public void reset()\n+                {\n+                    for (int i = 0, m = selectors.size(); i < m; i++)\n+                    {\n+                        selectors.get(i).reset();\n+                    }\n+                }\n+\n+                public boolean isAggregate()\n+                {\n+                    return factories.containsOnlyAggregateFunctions();\n+                }\n+\n+                public List<ByteBuffer> getOutputRow() throws InvalidRequestException\n+                {\n+                    List<ByteBuffer> outputRow = new ArrayList<>(selectors.size());\n+\n+                    for (int i = 0, m = selectors.size(); i < m; i++)\n+                    {\n+                        outputRow.add(selectors.get(i).getOutput());\n+                    }\n+                    return outputRow;\n+                }\n+\n+                public void addInputRow(ResultSetBuilder rs) throws InvalidRequestException\n+                {\n+                    for (int i = 0, m = selectors.size(); i < m; i++)\n+                    {\n+                        selectors.get(i).addInput(rs);\n+                    }\n+                }\n+            };\n+        }\n+\n+    }\n+}", "filename": "src/java/org/apache/cassandra/cql3/selection/Selection.java"}, {"additions": 140, "raw_url": "https://github.com/apache/cassandra/raw/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/selection/Selector.java", "blob_url": "https://github.com/apache/cassandra/blob/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/selection/Selector.java", "sha": "310e175405037878f4cb8c426218b8294b484e83", "changes": 140, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/selection/Selector.java?ref=7e53db0b927ad2f7bd25dbebc6c01a942afd79da", "patch": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.cassandra.cql3.selection;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.cassandra.config.CFMetaData;\n+import org.apache.cassandra.cql3.AssignmentTestable;\n+import org.apache.cassandra.cql3.ColumnSpecification;\n+import org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder;\n+import org.apache.cassandra.db.marshal.AbstractType;\n+import org.apache.cassandra.exceptions.InvalidRequestException;\n+\n+/**\n+ * A <code>Selector</code> is used to convert the data returned by the storage engine into the data requested by the \n+ * user. They correspond to the &lt;selector&gt; elements from the select clause.\n+ * <p>Since the introduction of aggregation, <code>Selector</code>s cannot be called anymore by multiple threads \n+ * as they have an internal state.</p>\n+ */\n+public abstract class Selector implements AssignmentTestable\n+{\n+    /**\n+     * A factory for <code>Selector</code> instances.\n+     */\n+    public static abstract class Factory\n+    {\n+        /**\n+         * Returns the column specification corresponding to the output value of the selector instances created by\n+         * this factory.\n+         *\n+         * @param cfm the column family meta data\n+         * @return a column specification\n+         */\n+        public abstract ColumnSpecification getColumnSpecification(CFMetaData cfm);\n+\n+        /**\n+         * Creates a new <code>Selector</code> instance.\n+         *\n+         * @return a new <code>Selector</code> instance\n+         */\n+        public abstract Selector newInstance();\n+\n+        /**\n+         * Checks if this factory creates selectors instances that creates aggregates.\n+         *\n+         * @return <code>true</code> if this factory creates selectors instances that creates aggregates,\n+         * <code>false</code> otherwise\n+         */\n+        public boolean isAggregateSelectorFactory()\n+        {\n+            return false;\n+        }\n+\n+        /**\n+         * Checks if this factory creates <code>writetime</code> selectors instances.\n+         *\n+         * @return <code>true</code> if this factory creates <code>writetime</code> selectors instances,\n+         * <code>false</code> otherwise\n+         */\n+        public boolean isWritetimeSelectorFactory()\n+        {\n+            return false;\n+        }\n+\n+        /**\n+         * Checks if this factory creates <code>TTL</code> selectors instances.\n+         *\n+         * @return <code>true</code> if this factory creates <code>TTL</code> selectors instances,\n+         * <code>false</code> otherwise\n+         */\n+        public boolean isTTLSelectorFactory()\n+        {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Add the current value from the specified <code>ResultSetBuilder</code>.\n+     *\n+     * @param rs the <code>ResultSetBuilder</code>\n+     * @throws InvalidRequestException if a problem occurs while add the input value\n+     */\n+    public abstract void addInput(ResultSetBuilder rs) throws InvalidRequestException;\n+\n+    /**\n+     * Returns the selector output.\n+     *\n+     * @return the selector output\n+     * @throws InvalidRequestException if a problem occurs while computing the output value\n+     */\n+    public abstract ByteBuffer getOutput() throws InvalidRequestException;\n+\n+    /**\n+     * Returns the <code>Selector</code> output type.\n+     *\n+     * @return the <code>Selector</code> output type.\n+     */\n+    public abstract AbstractType<?> getType();\n+\n+    /**\n+     * Checks if this <code>Selector</code> is creating aggregates.\n+     *\n+     * @return <code>true</code> if this <code>Selector</code> is creating aggregates <code>false</code>\n+     * otherwise.\n+     */\n+    public boolean isAggregate()\n+    {\n+        return false;\n+    }\n+\n+    /**\n+     * Reset the internal state of this <code>Selector</code>.\n+     */\n+    public abstract void reset();\n+\n+    public AssignmentTestable.TestResult testAssignment(String keyspace, ColumnSpecification receiver)\n+    {\n+        if (receiver.type.equals(getType()))\n+            return AssignmentTestable.TestResult.EXACT_MATCH;\n+        else if (receiver.type.isValueCompatibleWith(getType()))\n+            return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;\n+        else\n+            return AssignmentTestable.TestResult.NOT_ASSIGNABLE;\n+    }\n+}\n\\ No newline at end of file", "filename": "src/java/org/apache/cassandra/cql3/selection/Selector.java"}, {"additions": 151, "raw_url": "https://github.com/apache/cassandra/raw/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/selection/SelectorFactories.java", "blob_url": "https://github.com/apache/cassandra/blob/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/selection/SelectorFactories.java", "sha": "e0335562ed5af1c38d1eb728b0c0bcaed856762e", "changes": 151, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/selection/SelectorFactories.java?ref=7e53db0b927ad2f7bd25dbebc6c01a942afd79da", "patch": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.cassandra.cql3.selection;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.apache.cassandra.config.CFMetaData;\n+import org.apache.cassandra.config.ColumnDefinition;\n+import org.apache.cassandra.cql3.selection.Selector.Factory;\n+import org.apache.cassandra.exceptions.InvalidRequestException;\n+\n+/**\n+ * A set of <code>Selector</code> factories.\n+ */\n+final class SelectorFactories implements Iterable<Selector.Factory>\n+{\n+    /**\n+     * The <code>Selector</code> factories.\n+     */\n+    private final List<Selector.Factory> factories;\n+\n+    /**\n+     * <code>true</code> if one of the factory creates writetime selectors.\n+     */\n+    private boolean containsWritetimeFactory;\n+\n+    /**\n+     * <code>true</code> if one of the factory creates TTL selectors.\n+     */\n+    private boolean containsTTLFactory;\n+\n+    /**\n+     * The number of factories creating aggregates.\n+     */\n+    private int numberOfAggregateFactories;\n+\n+    /**\n+     * Creates a new <code>SelectorFactories</code> instance and collect the column definitions.\n+     *\n+     * @param selectables the <code>Selectable</code>s for which the factories must be created\n+     * @param cfm the Column Family Definition\n+     * @param defs the collector parameter for the column definitions\n+     * @return a new <code>SelectorFactories</code> instance\n+     * @throws InvalidRequestException if a problem occurs while creating the factories\n+     */\n+    public static SelectorFactories createFactoriesAndCollectColumnDefinitions(List<Selectable> selectables,\n+                                                                               CFMetaData cfm,\n+                                                                               List<ColumnDefinition> defs)\n+                                                                               throws InvalidRequestException\n+    {\n+        return new SelectorFactories(selectables, cfm, defs);\n+    }\n+\n+    private SelectorFactories(List<Selectable> selectables,\n+                              CFMetaData cfm,\n+                              List<ColumnDefinition> defs)\n+                              throws InvalidRequestException\n+    {\n+        factories = new ArrayList<>(selectables.size());\n+\n+        for (Selectable selectable : selectables)\n+        {\n+            Factory factory = selectable.newSelectorFactory(cfm, defs);\n+            containsWritetimeFactory |= factory.isWritetimeSelectorFactory();\n+            containsTTLFactory |= factory.isTTLSelectorFactory();\n+            if (factory.isAggregateSelectorFactory())\n+                ++numberOfAggregateFactories;\n+            factories.add(factory);\n+        }\n+    }\n+\n+    /**\n+     * Checks if this <code>SelectorFactories</code> contains only factories for aggregates.\n+     *\n+     * @return <code>true</code> if this <code>SelectorFactories</code> contains only factories for aggregates,\n+     * <code>false</code> otherwise.\n+     */\n+    public boolean containsOnlyAggregateFunctions()\n+    {\n+        int size = factories.size();\n+        return  size != 0 && numberOfAggregateFactories == size;\n+    }\n+\n+    /**\n+     * Whether the selector built by this factory does aggregation or not (either directly or in a sub-selector).\n+     *\n+     * @return <code>true</code> if the selector built by this factor does aggregation, <code>false</code> otherwise.\n+     */\n+    public boolean doesAggregation()\n+    {\n+        return numberOfAggregateFactories > 0;\n+    }\n+\n+    /**\n+     * Checks if this <code>SelectorFactories</code> contains at least one factory for writetime selectors.\n+     *\n+     * @return <code>true</code> if this <code>SelectorFactories</code> contains at least one factory for writetime\n+     * selectors, <code>false</code> otherwise.\n+     */\n+    public boolean containsWritetimeSelectorFactory()\n+    {\n+        return containsWritetimeFactory;\n+    }\n+\n+    /**\n+     * Checks if this <code>SelectorFactories</code> contains at least one factory for TTL selectors.\n+     *\n+     * @return <code>true</code> if this <code>SelectorFactories</code> contains at least one factory for TTL\n+     * selectors, <code>false</code> otherwise.\n+     */\n+    public boolean containsTTLSelectorFactory()\n+    {\n+        return containsTTLFactory;\n+    }\n+\n+    /**\n+     * Creates a list of new <code>Selector</code> instances.\n+     * @return a list of new <code>Selector</code> instances.\n+     */\n+    public List<Selector> newInstances()\n+    {\n+        List<Selector> selectors = new ArrayList<>(factories.size());\n+        for (Selector.Factory factory : factories)\n+        {\n+            selectors.add(factory.newInstance());\n+        }\n+        return selectors;\n+    }\n+\n+    public Iterator<Factory> iterator()\n+    {\n+        return factories.iterator();\n+    }\n+}", "filename": "src/java/org/apache/cassandra/cql3/selection/SelectorFactories.java"}, {"additions": 87, "raw_url": "https://github.com/apache/cassandra/raw/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/selection/SimpleSelector.java", "blob_url": "https://github.com/apache/cassandra/blob/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/selection/SimpleSelector.java", "sha": "37459d2925d5b36af468a27ba05173a36bf47f48", "changes": 87, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/selection/SimpleSelector.java?ref=7e53db0b927ad2f7bd25dbebc6c01a942afd79da", "patch": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.cassandra.cql3.selection;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.cassandra.config.CFMetaData;\n+import org.apache.cassandra.cql3.ColumnIdentifier;\n+import org.apache.cassandra.cql3.ColumnSpecification;\n+import org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder;\n+import org.apache.cassandra.db.marshal.AbstractType;\n+import org.apache.cassandra.exceptions.InvalidRequestException;\n+\n+public final class SimpleSelector extends Selector\n+{\n+    private final String columnName;\n+    private final int idx;\n+    private final AbstractType<?> type;\n+    private ByteBuffer current;\n+\n+    public static Factory newFactory(final String columnName, final int idx, final AbstractType<?> type)\n+    {\n+        return new Factory()\n+        {\n+            public ColumnSpecification getColumnSpecification(CFMetaData cfm)\n+            {\n+                return new ColumnSpecification(cfm.ksName,\n+                                               cfm.cfName,\n+                                               new ColumnIdentifier(columnName, true),\n+                                               type);\n+            }\n+\n+            public Selector newInstance()\n+            {\n+                return new SimpleSelector(columnName, idx, type);\n+            }\n+        };\n+    }\n+\n+    public void addInput(ResultSetBuilder rs) throws InvalidRequestException\n+    {\n+        current = rs.current.get(idx);\n+    }\n+\n+    public ByteBuffer getOutput() throws InvalidRequestException\n+    {\n+        return current;\n+    }\n+\n+    public void reset()\n+    {\n+        current = null;\n+    }\n+\n+    public AbstractType<?> getType()\n+    {\n+        return type;\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return columnName;\n+    }\n+\n+    private SimpleSelector(String columnName, int idx, AbstractType<?> type)\n+    {\n+        this.columnName = columnName;\n+        this.idx = idx;\n+        this.type = type;\n+    }\n+}\n\\ No newline at end of file", "filename": "src/java/org/apache/cassandra/cql3/selection/SimpleSelector.java"}, {"additions": 110, "raw_url": "https://github.com/apache/cassandra/raw/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/selection/WritetimeOrTTLSelector.java", "blob_url": "https://github.com/apache/cassandra/blob/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/selection/WritetimeOrTTLSelector.java", "sha": "6d6edd378695bc2eb32d363eece52f486042b49e", "changes": 110, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/selection/WritetimeOrTTLSelector.java?ref=7e53db0b927ad2f7bd25dbebc6c01a942afd79da", "patch": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.cassandra.cql3.selection;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.cassandra.config.CFMetaData;\n+import org.apache.cassandra.cql3.ColumnIdentifier;\n+import org.apache.cassandra.cql3.ColumnSpecification;\n+import org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder;\n+import org.apache.cassandra.db.marshal.AbstractType;\n+import org.apache.cassandra.db.marshal.Int32Type;\n+import org.apache.cassandra.db.marshal.LongType;\n+import org.apache.cassandra.utils.ByteBufferUtil;\n+\n+final class WritetimeOrTTLSelector extends Selector\n+{\n+    private final String columnName;\n+    private final int idx;\n+    private final boolean isWritetime;\n+    private ByteBuffer current;\n+\n+    public static Factory newFactory(final String columnName, final int idx, final boolean isWritetime)\n+    {\n+        return new Factory()\n+        {\n+            public ColumnSpecification getColumnSpecification(CFMetaData cfm)\n+            {\n+                String text = String.format(\"%s(%s)\", isWritetime ? \"writetime\" : \"ttl\", columnName);\n+                return new ColumnSpecification(cfm.ksName,\n+                                               cfm.cfName,\n+                                               new ColumnIdentifier(text, true),\n+                                               isWritetime ? LongType.instance : Int32Type.instance);\n+            }\n+\n+            public Selector newInstance()\n+            {\n+                return new WritetimeOrTTLSelector(columnName, idx, isWritetime);\n+            }\n+\n+            public boolean isWritetimeSelectorFactory()\n+            {\n+                return isWritetime;\n+            }\n+\n+            public boolean isTTLSelectorFactory()\n+            {\n+                return !isWritetime;\n+            }\n+        };\n+    }\n+\n+    public void addInput(ResultSetBuilder rs)\n+    {\n+        if (isWritetime)\n+        {\n+            long ts = rs.timestamps[idx];\n+            current = ts >= 0 ? ByteBufferUtil.bytes(ts) : null;\n+        }\n+        else\n+        {\n+            int ttl = rs.ttls[idx];\n+            current = ttl > 0 ? ByteBufferUtil.bytes(ttl) : null;\n+        }\n+    }\n+\n+    public ByteBuffer getOutput()\n+    {\n+        return current;\n+    }\n+\n+    public void reset()\n+    {\n+        current = null;\n+    }\n+\n+    public AbstractType<?> getType()\n+    {\n+        return isWritetime ? LongType.instance : Int32Type.instance;\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return columnName;\n+    }\n+\n+    private WritetimeOrTTLSelector(String columnName, int idx, boolean isWritetime)\n+    {\n+        this.columnName = columnName;\n+        this.idx = idx;\n+        this.isWritetime = isWritetime;\n+    }\n+\n+}\n\\ No newline at end of file", "filename": "src/java/org/apache/cassandra/cql3/selection/WritetimeOrTTLSelector.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java", "blob_url": "https://github.com/apache/cassandra/blob/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java", "sha": "32dd1c732a5bee09cda301c1b9261ee4c20b392c", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java?ref=7e53db0b927ad2f7bd25dbebc6c01a942afd79da", "patch": "@@ -28,6 +28,7 @@\n import org.apache.cassandra.config.CFMetaData;\n import org.apache.cassandra.config.ColumnDefinition;\n import org.apache.cassandra.cql3.*;\n+import org.apache.cassandra.cql3.selection.Selection;\n import org.apache.cassandra.db.*;\n import org.apache.cassandra.db.composites.CBuilder;\n import org.apache.cassandra.db.composites.Composite;", "filename": "src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java"}, {"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java", "blob_url": "https://github.com/apache/cassandra/blob/7e53db0b927ad2f7bd25dbebc6c01a942afd79da/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java", "sha": "44bd23c5f2ad54f1d7d385fa09f7efc52738644e", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java?ref=7e53db0b927ad2f7bd25dbebc6c01a942afd79da", "patch": "@@ -32,6 +32,8 @@\n import org.apache.cassandra.auth.Permission;\n import org.apache.cassandra.cql3.*;\n import org.apache.cassandra.cql3.statements.SingleColumnRestriction.Contains;\n+import org.apache.cassandra.cql3.selection.RawSelector;\n+import org.apache.cassandra.cql3.selection.Selection;\n import org.apache.cassandra.db.composites.*;\n import org.apache.cassandra.db.composites.Composite.EOC;\n import org.apache.cassandra.transport.messages.ResultMessage;", "filename": "src/java/org/apache/cassandra/cql3/statements/SelectStatement.java"}, {"additions": 0, "raw_url": "https://github.com/apache/cassandra/raw/a1f7ccfb2446b332a42f95cb57bfa53fdf625df5/src/java/org/apache/cassandra/cql3/statements/Selectable.java", "blob_url": "https://github.com/apache/cassandra/blob/a1f7ccfb2446b332a42f95cb57bfa53fdf625df5/src/java/org/apache/cassandra/cql3/statements/Selectable.java", "sha": "be47d17f84f491c80a89a7ef1125ba6ee49ce9d3", "changes": 89, "status": "removed", "deletions": 89, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/Selectable.java?ref=a1f7ccfb2446b332a42f95cb57bfa53fdf625df5", "patch": "@@ -1,89 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.cassandra.cql3.statements;\n-\n-import java.util.List;\n-\n-import org.apache.cassandra.cql3.ColumnIdentifier;\n-import org.apache.cassandra.cql3.functions.FunctionName;\n-\n-public interface Selectable\n-{\n-    public static class WritetimeOrTTL implements Selectable\n-    {\n-        public final ColumnIdentifier id;\n-        public final boolean isWritetime;\n-\n-        public WritetimeOrTTL(ColumnIdentifier id, boolean isWritetime)\n-        {\n-            this.id = id;\n-            this.isWritetime = isWritetime;\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return (isWritetime ? \"writetime\" : \"ttl\") + \"(\" + id + \")\";\n-        }\n-    }\n-\n-    public static class WithFunction implements Selectable\n-    {\n-        public final FunctionName functionName;\n-        public final List<Selectable> args;\n-\n-        public WithFunction(FunctionName functionName, List<Selectable> args)\n-        {\n-            this.functionName = functionName;\n-            this.args = args;\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            StringBuilder sb = new StringBuilder();\n-            sb.append(functionName).append(\"(\");\n-            for (int i = 0; i < args.size(); i++)\n-            {\n-                if (i > 0)\n-                    sb.append(\", \");\n-                sb.append(args.get(i));\n-            }\n-            return sb.append(\")\").toString();\n-        }\n-    }\n-\n-    public static class WithFieldSelection implements Selectable\n-    {\n-        public final Selectable selected;\n-        public final ColumnIdentifier field;\n-\n-        public WithFieldSelection(Selectable selected, ColumnIdentifier field)\n-        {\n-            this.selected = selected;\n-            this.field = field;\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return String.format(\"%s.%s\", selected, field);\n-        }\n-    }\n-}", "filename": "src/java/org/apache/cassandra/cql3/statements/Selectable.java"}, {"additions": 0, "raw_url": "https://github.com/apache/cassandra/raw/a1f7ccfb2446b332a42f95cb57bfa53fdf625df5/src/java/org/apache/cassandra/cql3/statements/Selection.java", "blob_url": "https://github.com/apache/cassandra/blob/a1f7ccfb2446b332a42f95cb57bfa53fdf625df5/src/java/org/apache/cassandra/cql3/statements/Selection.java", "sha": "ba6ad1d839adf5d73647d1afb81527132e106844", "changes": 770, "status": "removed", "deletions": 770, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/Selection.java?ref=a1f7ccfb2446b332a42f95cb57bfa53fdf625df5", "patch": "@@ -1,770 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.cassandra.cql3.statements;\n-\n-import java.nio.ByteBuffer;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n-\n-import org.apache.cassandra.config.CFMetaData;\n-import org.apache.cassandra.config.ColumnDefinition;\n-import org.apache.cassandra.cql3.AssignmentTestable;\n-import org.apache.cassandra.cql3.ColumnIdentifier;\n-import org.apache.cassandra.cql3.ColumnSpecification;\n-import org.apache.cassandra.cql3.ResultSet;\n-import org.apache.cassandra.cql3.functions.AggregateFunction;\n-import org.apache.cassandra.cql3.functions.Function;\n-import org.apache.cassandra.cql3.functions.Functions;\n-import org.apache.cassandra.cql3.functions.ScalarFunction;\n-import org.apache.cassandra.db.Cell;\n-import org.apache.cassandra.db.CounterCell;\n-import org.apache.cassandra.db.ExpiringCell;\n-import org.apache.cassandra.db.context.CounterContext;\n-import org.apache.cassandra.db.marshal.AbstractType;\n-import org.apache.cassandra.db.marshal.Int32Type;\n-import org.apache.cassandra.db.marshal.LongType;\n-import org.apache.cassandra.db.marshal.UTF8Type;\n-import org.apache.cassandra.db.marshal.UserType;\n-import org.apache.cassandra.exceptions.InvalidRequestException;\n-import org.apache.cassandra.utils.ByteBufferUtil;\n-\n-import com.google.common.collect.Iterators;\n-\n-public abstract class Selection\n-{\n-    private final Collection<ColumnDefinition> columns;\n-    private final ResultSet.Metadata metadata;\n-    private final boolean collectTimestamps;\n-    private final boolean collectTTLs;\n-\n-    protected Selection(Collection<ColumnDefinition> columns, List<ColumnSpecification> metadata, boolean collectTimestamps, boolean collectTTLs)\n-    {\n-        this.columns = columns;\n-        this.metadata = new ResultSet.Metadata(metadata);\n-        this.collectTimestamps = collectTimestamps;\n-        this.collectTTLs = collectTTLs;\n-    }\n-\n-    // Overriden by SimpleSelection when appropriate.\n-    public boolean isWildcard()\n-    {\n-        return false;\n-    }\n-\n-    public ResultSet.Metadata getResultMetadata()\n-    {\n-        return metadata;\n-    }\n-\n-    public static Selection wildcard(CFMetaData cfm)\n-    {\n-        List<ColumnDefinition> all = new ArrayList<ColumnDefinition>(cfm.allColumns().size());\n-        Iterators.addAll(all, cfm.allColumnsInSelectOrder());\n-        return new SimpleSelection(all, true);\n-    }\n-\n-    public static Selection forColumns(Collection<ColumnDefinition> columns)\n-    {\n-        return new SimpleSelection(columns, false);\n-    }\n-\n-    public int addColumnForOrdering(ColumnDefinition c)\n-    {\n-        columns.add(c);\n-        metadata.addNonSerializedColumn(c);\n-        return columns.size() - 1;\n-    }\n-\n-    private static boolean isUsingFunction(List<RawSelector> rawSelectors)\n-    {\n-        for (RawSelector rawSelector : rawSelectors)\n-        {\n-            if (!(rawSelector.selectable instanceof ColumnIdentifier))\n-                return true;\n-        }\n-        return false;\n-    }\n-\n-    private static int addAndGetIndex(ColumnDefinition def, List<ColumnDefinition> l)\n-    {\n-        int idx = l.indexOf(def);\n-        if (idx < 0)\n-        {\n-            idx = l.size();\n-            l.add(def);\n-        }\n-        return idx;\n-    }\n-\n-    private static Selector makeSelector(CFMetaData cfm, RawSelector raw, List<ColumnDefinition> defs, List<ColumnSpecification> metadata) throws InvalidRequestException\n-    {\n-        if (raw.selectable instanceof ColumnIdentifier)\n-        {\n-            ColumnDefinition def = cfm.getColumnDefinition((ColumnIdentifier)raw.selectable);\n-            if (def == null)\n-                throw new InvalidRequestException(String.format(\"Undefined name %s in selection clause\", raw.selectable));\n-            if (metadata != null)\n-                metadata.add(raw.alias == null ? def : makeAliasSpec(cfm, def.type, raw.alias));\n-            return new SimpleSelector(def.name.toString(), addAndGetIndex(def, defs), def.type);\n-        }\n-        else if (raw.selectable instanceof Selectable.WritetimeOrTTL)\n-        {\n-            Selectable.WritetimeOrTTL tot = (Selectable.WritetimeOrTTL)raw.selectable;\n-            ColumnDefinition def = cfm.getColumnDefinition(tot.id);\n-            if (def == null)\n-                throw new InvalidRequestException(String.format(\"Undefined name %s in selection clause\", tot.id));\n-            if (def.isPrimaryKeyColumn())\n-                throw new InvalidRequestException(String.format(\"Cannot use selection function %s on PRIMARY KEY part %s\", tot.isWritetime ? \"writeTime\" : \"ttl\", def.name));\n-            if (def.type.isCollection())\n-                throw new InvalidRequestException(String.format(\"Cannot use selection function %s on collections\", tot.isWritetime ? \"writeTime\" : \"ttl\"));\n-\n-            if (metadata != null)\n-                metadata.add(makeWritetimeOrTTLSpec(cfm, tot, raw.alias));\n-            return new WritetimeOrTTLSelector(def.name.toString(), addAndGetIndex(def, defs), tot.isWritetime);\n-        }\n-        else if (raw.selectable instanceof Selectable.WithFieldSelection)\n-        {\n-            Selectable.WithFieldSelection withField = (Selectable.WithFieldSelection)raw.selectable;\n-            Selector selected = makeSelector(cfm, new RawSelector(withField.selected, null), defs, null);\n-            AbstractType<?> type = selected.getType();\n-            if (!(type instanceof UserType))\n-                throw new InvalidRequestException(String.format(\"Invalid field selection: %s of type %s is not a user type\", withField.selected, type.asCQL3Type()));\n-\n-            UserType ut = (UserType)type;\n-            for (int i = 0; i < ut.size(); i++)\n-            {\n-                if (!ut.fieldName(i).equals(withField.field.bytes))\n-                    continue;\n-\n-                if (metadata != null)\n-                    metadata.add(makeFieldSelectSpec(cfm, withField, ut.fieldType(i), raw.alias));\n-                return new FieldSelector(ut, i, selected);\n-            }\n-            throw new InvalidRequestException(String.format(\"%s of type %s has no field %s\", withField.selected, type.asCQL3Type(), withField.field));\n-        }\n-        else\n-        {\n-            Selectable.WithFunction withFun = (Selectable.WithFunction)raw.selectable;\n-            List<Selector> args = new ArrayList<>(withFun.args.size());\n-            for (Selectable rawArg : withFun.args)\n-                args.add(makeSelector(cfm, new RawSelector(rawArg, null), defs, null));\n-\n-            // resolve built-in functions before user defined functions\n-            Function fun = Functions.get(cfm.ksName, withFun.functionName, args, cfm.ksName, cfm.cfName);\n-            if (fun == null)\n-                throw new InvalidRequestException(String.format(\"Unknown function '%s'\", withFun.functionName));\n-            if (metadata != null)\n-                metadata.add(makeFunctionSpec(cfm, withFun, fun.returnType(), raw.alias));\n-            return fun.isAggregate() ? new AggregateFunctionSelector(fun, args)\n-                                     : new ScalarFunctionSelector(fun, args);\n-        }\n-    }\n-\n-    private static ColumnSpecification makeWritetimeOrTTLSpec(CFMetaData cfm, Selectable.WritetimeOrTTL tot, ColumnIdentifier alias)\n-    {\n-        return new ColumnSpecification(cfm.ksName,\n-                                       cfm.cfName,\n-                                       alias == null ? new ColumnIdentifier(tot.toString(), true) : alias,\n-                                       tot.isWritetime ? LongType.instance : Int32Type.instance);\n-    }\n-\n-    private static ColumnSpecification makeFieldSelectSpec(CFMetaData cfm, Selectable.WithFieldSelection s, AbstractType<?> type, ColumnIdentifier alias)\n-    {\n-        return new ColumnSpecification(cfm.ksName,\n-                                       cfm.cfName,\n-                                       alias == null ? new ColumnIdentifier(s.toString(), true) : alias,\n-                                       type);\n-    }\n-\n-    private static ColumnSpecification makeFunctionSpec(CFMetaData cfm,\n-                                                        Selectable.WithFunction fun,\n-                                                        AbstractType<?> returnType,\n-                                                        ColumnIdentifier alias) throws InvalidRequestException\n-    {\n-        if (returnType == null)\n-            throw new InvalidRequestException(String.format(\"Unknown function %s called in selection clause\", fun.functionName));\n-\n-        return new ColumnSpecification(cfm.ksName,\n-                                       cfm.cfName,\n-                                       alias == null ? new ColumnIdentifier(fun.toString(), true) : alias,\n-                                       returnType);\n-    }\n-\n-    private static ColumnSpecification makeAliasSpec(CFMetaData cfm, AbstractType<?> type, ColumnIdentifier alias)\n-    {\n-        return new ColumnSpecification(cfm.ksName, cfm.cfName, alias, type);\n-    }\n-\n-    public static Selection fromSelectors(CFMetaData cfm, List<RawSelector> rawSelectors) throws InvalidRequestException\n-    {\n-        boolean usesFunction = isUsingFunction(rawSelectors);\n-\n-        if (usesFunction)\n-        {\n-            List<ColumnDefinition> defs = new ArrayList<ColumnDefinition>();\n-            List<ColumnSpecification> metadata = new ArrayList<ColumnSpecification>(rawSelectors.size());\n-            List<Selector> selectors = new ArrayList<Selector>(rawSelectors.size());\n-            boolean collectTimestamps = false;\n-            boolean collectTTLs = false;\n-            for (RawSelector rawSelector : rawSelectors)\n-            {\n-                Selector selector = makeSelector(cfm, rawSelector, defs, metadata);\n-                selectors.add(selector);\n-                if (selector instanceof WritetimeOrTTLSelector)\n-                {\n-                    collectTimestamps |= ((WritetimeOrTTLSelector)selector).isWritetime;\n-                    collectTTLs |= !((WritetimeOrTTLSelector)selector).isWritetime;\n-                }\n-            }\n-            return new SelectionWithFunctions(defs, metadata, selectors, collectTimestamps, collectTTLs);\n-        }\n-        else\n-        {\n-            List<ColumnDefinition> defs = new ArrayList<ColumnDefinition>(rawSelectors.size());\n-            List<ColumnSpecification> metadata = new ArrayList<ColumnSpecification>(rawSelectors.size());\n-            for (RawSelector rawSelector : rawSelectors)\n-            {\n-                assert rawSelector.selectable instanceof ColumnIdentifier;\n-                ColumnDefinition def = cfm.getColumnDefinition((ColumnIdentifier)rawSelector.selectable);\n-                if (def == null)\n-                    throw new InvalidRequestException(String.format(\"Undefined name %s in selection clause\", rawSelector.selectable));\n-                defs.add(def);\n-                metadata.add(rawSelector.alias == null ? def : makeAliasSpec(cfm, def.type, rawSelector.alias));\n-            }\n-            return new SimpleSelection(defs, metadata, false);\n-        }\n-    }\n-\n-    protected abstract void addInputRow(ResultSetBuilder rs) throws InvalidRequestException;\n-\n-    protected abstract boolean isAggregate();\n-\n-    protected abstract List<ByteBuffer> getOutputRow() throws InvalidRequestException;\n-\n-    protected abstract void reset();\n-\n-    /**\n-     * @return the list of CQL3 columns value this SelectionClause needs.\n-     */\n-    public Collection<ColumnDefinition> getColumns()\n-    {\n-        return columns;\n-    }\n-\n-    public ResultSetBuilder resultSetBuilder(long now)\n-    {\n-        return new ResultSetBuilder(now);\n-    }\n-\n-    private static ByteBuffer value(Cell c)\n-    {\n-        return (c instanceof CounterCell)\n-            ? ByteBufferUtil.bytes(CounterContext.instance().total(c.value()))\n-            : c.value();\n-    }\n-\n-    /**\n-     * Checks that selectors are either all aggregates or that none of them is.\n-     *\n-     * @param selectors the selectors to test.\n-     * @param msgTemplate the error message template\n-     * @param messageArgs the error message arguments\n-     * @throws InvalidRequestException if some of the selectors are aggregate but not all of them\n-     */\n-    private static void validateSelectors(List<Selector> selectors, String messageTemplate, Object... messageArgs)\n-            throws InvalidRequestException\n-    {\n-        int aggregates = 0;\n-        for (Selector s : selectors)\n-            if (s.isAggregate())\n-                ++aggregates;\n-\n-        if (aggregates != 0 && aggregates != selectors.size())\n-            throw new InvalidRequestException(String.format(messageTemplate, messageArgs));\n-    }\n-\n-    public class ResultSetBuilder\n-    {\n-        private final ResultSet resultSet;\n-\n-        /*\n-         * We'll build CQL3 row one by one.\n-         * The currentRow is the values for the (CQL3) columns we've fetched.\n-         * We also collect timestamps and ttls for the case where the writetime and\n-         * ttl functions are used. Note that we might collect timestamp and/or ttls\n-         * we don't care about, but since the array below are allocated just once,\n-         * it doesn't matter performance wise.\n-         */\n-        List<ByteBuffer> current;\n-        final long[] timestamps;\n-        final int[] ttls;\n-        final long now;\n-\n-        private ResultSetBuilder(long now)\n-        {\n-            this.resultSet = new ResultSet(getResultMetadata().copy(), new ArrayList<List<ByteBuffer>>());\n-            this.timestamps = collectTimestamps ? new long[columns.size()] : null;\n-            this.ttls = collectTTLs ? new int[columns.size()] : null;\n-            this.now = now;\n-        }\n-\n-        public void add(ByteBuffer v)\n-        {\n-            current.add(v);\n-        }\n-\n-        public void add(Cell c)\n-        {\n-            current.add(isDead(c) ? null : value(c));\n-            if (timestamps != null)\n-            {\n-                timestamps[current.size() - 1] = isDead(c) ? -1 : c.timestamp();\n-            }\n-            if (ttls != null)\n-            {\n-                int ttl = -1;\n-                if (!isDead(c) && c instanceof ExpiringCell)\n-                    ttl = c.getLocalDeletionTime() - (int) (now / 1000);\n-                ttls[current.size() - 1] = ttl;\n-            }\n-        }\n-\n-        private boolean isDead(Cell c)\n-        {\n-            return c == null || !c.isLive(now);\n-        }\n-\n-        public void newRow() throws InvalidRequestException\n-        {\n-            if (current != null)\n-            {\n-                addInputRow(this);\n-                if (!isAggregate())\n-                {\n-                    resultSet.addRow(getOutputRow());\n-                    reset();\n-                }\n-            }\n-            current = new ArrayList<ByteBuffer>(columns.size());\n-        }\n-\n-        public ResultSet build() throws InvalidRequestException\n-        {\n-            if (current != null)\n-            {\n-                addInputRow(this);\n-                resultSet.addRow(getOutputRow());\n-                reset();\n-                current = null;\n-            }\n-            return resultSet;\n-        }\n-    }\n-\n-    // Special cased selection for when no function is used (this save some allocations).\n-    private static class SimpleSelection extends Selection\n-    {\n-        private final boolean isWildcard;\n-\n-        private List<ByteBuffer> current;\n-\n-        public SimpleSelection(Collection<ColumnDefinition> columns, boolean isWildcard)\n-        {\n-            this(columns, new ArrayList<ColumnSpecification>(columns), isWildcard);\n-        }\n-\n-        public SimpleSelection(Collection<ColumnDefinition> columns, List<ColumnSpecification> metadata, boolean isWildcard)\n-        {\n-            /*\n-             * In theory, even a simple selection could have multiple time the same column, so we\n-             * could filter those duplicate out of columns. But since we're very unlikely to\n-             * get much duplicate in practice, it's more efficient not to bother.\n-             */\n-            super(columns, metadata, false, false);\n-            this.isWildcard = isWildcard;\n-        }\n-\n-        @Override\n-        public boolean isWildcard()\n-        {\n-            return isWildcard;\n-        }\n-\n-        protected void addInputRow(ResultSetBuilder rs) throws InvalidRequestException\n-        {\n-            current = rs.current;\n-        }\n-\n-        protected boolean isAggregate()\n-        {\n-            return false;\n-        }\n-\n-        protected List<ByteBuffer> getOutputRow() throws InvalidRequestException\n-        {\n-            return current;\n-        }\n-\n-        protected void reset()\n-        {\n-            current = null;\n-        }\n-    }\n-\n-    private static abstract class Selector implements AssignmentTestable\n-    {\n-        public abstract void addInput(ResultSetBuilder rs) throws InvalidRequestException;\n-\n-        public abstract ByteBuffer getOutput() throws InvalidRequestException;\n-\n-        public abstract AbstractType<?> getType();\n-\n-        public boolean isAggregate()\n-        {\n-            return false;\n-        }\n-\n-        public abstract void reset();\n-\n-        public AssignmentTestable.TestResult testAssignment(String keyspace, ColumnSpecification receiver)\n-        {\n-            if (receiver.type.equals(getType()))\n-                return AssignmentTestable.TestResult.EXACT_MATCH;\n-            else if (receiver.type.isValueCompatibleWith(getType()))\n-                return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;\n-            else\n-                return AssignmentTestable.TestResult.NOT_ASSIGNABLE;\n-        }\n-    }\n-\n-    private static class SimpleSelector extends Selector\n-    {\n-        private final String columnName;\n-        private final int idx;\n-        private final AbstractType<?> type;\n-        private ByteBuffer current;\n-\n-        public SimpleSelector(String columnName, int idx, AbstractType<?> type)\n-        {\n-            this.columnName = columnName;\n-            this.idx = idx;\n-            this.type = type;\n-        }\n-\n-        public void addInput(ResultSetBuilder rs) throws InvalidRequestException\n-        {\n-            current = rs.current.get(idx);\n-        }\n-\n-        public ByteBuffer getOutput() throws InvalidRequestException\n-        {\n-            return current;\n-        }\n-\n-        public void reset()\n-        {\n-            current = null;\n-        }\n-\n-        public AbstractType<?> getType()\n-        {\n-            return type;\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return columnName;\n-        }\n-    }\n-\n-    private static abstract class AbstractFunctionSelector<T extends Function> extends Selector\n-    {\n-        protected final T fun;\n-        protected final List<Selector> argSelectors;\n-\n-        public AbstractFunctionSelector(T fun, List<Selector> argSelectors)\n-        {\n-            this.fun = fun;\n-            this.argSelectors = argSelectors;\n-        }\n-\n-        public AbstractType<?> getType()\n-        {\n-            return fun.returnType();\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            StringBuilder sb = new StringBuilder();\n-            sb.append(fun.name()).append(\"(\");\n-            for (int i = 0; i < argSelectors.size(); i++)\n-            {\n-                if (i > 0)\n-                    sb.append(\", \");\n-                sb.append(argSelectors.get(i));\n-            }\n-            return sb.append(\")\").toString();\n-        }\n-    }\n-\n-    private static class ScalarFunctionSelector extends AbstractFunctionSelector<ScalarFunction>\n-    {\n-        public ScalarFunctionSelector(Function fun, List<Selector> argSelectors) throws InvalidRequestException\n-        {\n-            super((ScalarFunction) fun, argSelectors);\n-            validateSelectors(argSelectors,\n-                              \"the %s function arguments must be either all aggregates or all none aggregates\",\n-                              fun.name().name);\n-        }\n-\n-        public boolean isAggregate()\n-        {\n-            // We cannot just return true as it is possible to have a scalar function wrapping an aggregation function\n-            if (argSelectors.isEmpty())\n-                return false;\n-\n-            return argSelectors.get(0).isAggregate();\n-        }\n-\n-        public void addInput(ResultSetBuilder rs) throws InvalidRequestException\n-        {\n-            for (Selector s : argSelectors)\n-                s.addInput(rs);\n-        }\n-\n-        public void reset()\n-        {\n-        }\n-\n-        public ByteBuffer getOutput() throws InvalidRequestException\n-        {\n-            List<ByteBuffer> args = new ArrayList<ByteBuffer>(argSelectors.size());\n-            for (Selector s : argSelectors)\n-            {\n-                args.add(s.getOutput());\n-                s.reset();\n-            }\n-            return fun.execute(args);\n-        }\n-    }\n-\n-    private static class AggregateFunctionSelector extends AbstractFunctionSelector<AggregateFunction>\n-    {\n-        private final AggregateFunction.Aggregate aggregate;\n-\n-        public AggregateFunctionSelector(Function fun, List<Selector> argSelectors) throws InvalidRequestException\n-        {\n-            super((AggregateFunction) fun, argSelectors);\n-\n-            validateAgruments(argSelectors);\n-            this.aggregate = this.fun.newAggregate();\n-        }\n-\n-        public boolean isAggregate()\n-        {\n-            return true;\n-        }\n-\n-        public void addInput(ResultSetBuilder rs) throws InvalidRequestException\n-        {\n-            List<ByteBuffer> args = new ArrayList<ByteBuffer>(argSelectors.size());\n-            // Aggregation of aggregation is not supported\n-            for (Selector s : argSelectors)\n-            {\n-                s.addInput(rs);\n-                args.add(s.getOutput());\n-                s.reset();\n-            }\n-            this.aggregate.addInput(args);\n-        }\n-\n-        public ByteBuffer getOutput() throws InvalidRequestException\n-        {\n-            return aggregate.compute();\n-        }\n-\n-        public void reset()\n-        {\n-            aggregate.reset();\n-        }\n-\n-        /**\n-         * Checks that the arguments are not themselves aggregation functions.\n-         *\n-         * @param argSelectors the selector to check\n-         * @throws InvalidRequestException if on of the arguments is an aggregation function\n-         */\n-        private static void validateAgruments(List<Selector> argSelectors) throws InvalidRequestException\n-        {\n-            for (Selector selector : argSelectors)\n-                if (selector.isAggregate())\n-                    throw new InvalidRequestException(\n-                            \"aggregate functions cannot be used as arguments of aggregate functions\");\n-        }\n-    }\n-\n-    private static class FieldSelector extends Selector\n-    {\n-        private final UserType type;\n-        private final int field;\n-        private final Selector selected;\n-\n-        public FieldSelector(UserType type, int field, Selector selected)\n-        {\n-            this.type = type;\n-            this.field = field;\n-            this.selected = selected;\n-        }\n-\n-        public boolean isAggregate()\n-        {\n-            return selected.isAggregate();\n-        }\n-\n-        public void addInput(ResultSetBuilder rs) throws InvalidRequestException\n-        {\n-            selected.addInput(rs);\n-        }\n-\n-        public ByteBuffer getOutput() throws InvalidRequestException\n-        {\n-            ByteBuffer value = selected.getOutput();\n-            if (value == null)\n-                return null;\n-            ByteBuffer[] buffers = type.split(value);\n-            return field < buffers.length ? buffers[field] : null;\n-        }\n-\n-        public AbstractType<?> getType()\n-        {\n-            return type.fieldType(field);\n-        }\n-\n-        public void reset()\n-        {\n-            selected.reset();\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return String.format(\"%s.%s\", selected, UTF8Type.instance.getString(type.fieldName(field)));\n-        }\n-    }\n-\n-    private static class WritetimeOrTTLSelector extends Selector\n-    {\n-        private final String columnName;\n-        private final int idx;\n-        private final boolean isWritetime;\n-        private ByteBuffer current;\n-\n-        public WritetimeOrTTLSelector(String columnName, int idx, boolean isWritetime)\n-        {\n-            this.columnName = columnName;\n-            this.idx = idx;\n-            this.isWritetime = isWritetime;\n-        }\n-\n-        public void addInput(ResultSetBuilder rs)\n-        {\n-            if (isWritetime)\n-            {\n-                long ts = rs.timestamps[idx];\n-                current = ts >= 0 ? ByteBufferUtil.bytes(ts) : null;\n-            }\n-            else\n-            {\n-                int ttl = rs.ttls[idx];\n-                current = ttl > 0 ? ByteBufferUtil.bytes(ttl) : null;\n-            }\n-        }\n-\n-        public ByteBuffer getOutput()\n-        {\n-            return current;\n-        }\n-\n-        public void reset()\n-        {\n-            current = null;\n-        }\n-\n-        public AbstractType<?> getType()\n-        {\n-            return isWritetime ? LongType.instance : Int32Type.instance;\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return columnName;\n-        }\n-    }\n-\n-    private static class SelectionWithFunctions extends Selection\n-    {\n-        private final List<Selector> selectors;\n-\n-        public SelectionWithFunctions(Collection<ColumnDefinition> columns,\n-                                      List<ColumnSpecification> metadata,\n-                                      List<Selector> selectors,\n-                                      boolean collectTimestamps,\n-                                      boolean collectTTLs) throws InvalidRequestException\n-        {\n-            super(columns, metadata, collectTimestamps, collectTTLs);\n-            this.selectors = selectors;\n-\n-            validateSelectors(selectors, \"the select clause must either contains only aggregates or none\");\n-        }\n-\n-        protected void addInputRow(ResultSetBuilder rs) throws InvalidRequestException\n-        {\n-            for (Selector selector : selectors)\n-            {\n-                selector.addInput(rs);\n-            }\n-        }\n-\n-        protected List<ByteBuffer> getOutputRow() throws InvalidRequestException\n-        {\n-            List<ByteBuffer> result = new ArrayList<ByteBuffer>();\n-            for (Selector selector : selectors)\n-            {\n-                result.add(selector.getOutput());\n-            }\n-            return result;\n-        }\n-\n-        protected void reset()\n-        {\n-            for (Selector selector : selectors)\n-            {\n-                selector.reset();\n-            }\n-        }\n-\n-        public boolean isAggregate()\n-        {\n-            return selectors.get(0).isAggregate();\n-        }\n-    }\n-}", "filename": "src/java/org/apache/cassandra/cql3/statements/Selection.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/f463fed234ce5bd9c536ac5fdf51c3555b9af805", "parent": "https://github.com/apache/cassandra/commit/e0c6a9eca074f1be00ef60131f4db40cc4ea5307", "message": "Avoid calls to `getCause` on `Throwable` as it might result into NPE\n\nPatch by Alex Petrov; reviewed by Joel Knighton for CASSANDRA-11272", "bug_id": "cassandra_61", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/f463fed234ce5bd9c536ac5fdf51c3555b9af805/src/java/org/apache/cassandra/service/StorageService.java", "blob_url": "https://github.com/apache/cassandra/blob/f463fed234ce5bd9c536ac5fdf51c3555b9af805/src/java/org/apache/cassandra/service/StorageService.java", "sha": "82d7c8f4a51ab382e1859fa9d5bc97d5e9b77876", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=f463fed234ce5bd9c536ac5fdf51c3555b9af805", "patch": "@@ -1255,7 +1255,7 @@ public void onSuccess(StreamState streamState)\n             @Override\n             public void onFailure(Throwable e)\n             {\n-                logger.warn(\"Error during bootstrap: \" + e.getCause().getMessage(), e.getCause());\n+                logger.warn(\"Error during bootstrap.\", e);\n             }\n         });\n         try", "filename": "src/java/org/apache/cassandra/service/StorageService.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/d143487cb198051d0eaccc7f587f35cc63fc85a9", "parent": "https://github.com/apache/cassandra/commit/6198a756338a6101cd0787bd3774ad86b56d4fa5", "message": "Fix NPE when table dropped during streaming\n\npatch by yukim; reviewed by krummas for CASSANDRA-7946", "bug_id": "cassandra_62", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/d143487cb198051d0eaccc7f587f35cc63fc85a9/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/d143487cb198051d0eaccc7f587f35cc63fc85a9/CHANGES.txt", "sha": "fd49b09ce72c6487aac943ea70de3b968e48849d", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=d143487cb198051d0eaccc7f587f35cc63fc85a9", "patch": "@@ -20,6 +20,7 @@\n  * Always send Paxos commit to all replicas (CASSANDRA-7479)\n  * Make disruptor_thrift_server invocation pool configurable (CASSANDRA-7594)\n  * Make repair no-op when RF=1 (CASSANDRA-7864)\n+ * Fix NPE when table dropped during streaming (CASSANDRA-7946)\n Merged from 1.2:\n  * Don't index tombstones (CASSANDRA-7828)\n ", "filename": "CHANGES.txt"}, {"additions": 5, "raw_url": "https://github.com/apache/cassandra/raw/d143487cb198051d0eaccc7f587f35cc63fc85a9/src/java/org/apache/cassandra/streaming/StreamReader.java", "blob_url": "https://github.com/apache/cassandra/blob/d143487cb198051d0eaccc7f587f35cc63fc85a9/src/java/org/apache/cassandra/streaming/StreamReader.java", "sha": "3b2a924275d3fb856b97e077897d83b2dffbc05e", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamReader.java?ref=d143487cb198051d0eaccc7f587f35cc63fc85a9", "patch": "@@ -75,6 +75,11 @@ public SSTableWriter read(ReadableByteChannel channel) throws IOException\n         long totalSize = totalSize();\n \n         Pair<String, String> kscf = Schema.instance.getCF(cfId);\n+        if (kscf == null)\n+        {\n+            // schema was dropped during streaming\n+            throw new IOException(\"CF \" + cfId + \" was dropped during streaming\");\n+        }\n         ColumnFamilyStore cfs = Keyspace.open(kscf.left).getColumnFamilyStore(kscf.right);\n \n         SSTableWriter writer = createWriter(cfs, totalSize);", "filename": "src/java/org/apache/cassandra/streaming/StreamReader.java"}, {"additions": 8, "raw_url": "https://github.com/apache/cassandra/raw/d143487cb198051d0eaccc7f587f35cc63fc85a9/src/java/org/apache/cassandra/streaming/StreamReceiveTask.java", "blob_url": "https://github.com/apache/cassandra/blob/d143487cb198051d0eaccc7f587f35cc63fc85a9/src/java/org/apache/cassandra/streaming/StreamReceiveTask.java", "sha": "33da3d182f793e84c1e01a97094817f8d369edbe", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamReceiveTask.java?ref=d143487cb198051d0eaccc7f587f35cc63fc85a9", "patch": "@@ -103,6 +103,14 @@ public OnCompletionRunnable(StreamReceiveTask task)\n         public void run()\n         {\n             Pair<String, String> kscf = Schema.instance.getCF(task.cfId);\n+            if (kscf == null)\n+            {\n+                // schema was dropped during streaming\n+                for (SSTableWriter writer : task.sstables)\n+                    writer.abort();\n+                task.sstables.clear();\n+                return;\n+            }\n             ColumnFamilyStore cfs = Keyspace.open(kscf.left).getColumnFamilyStore(kscf.right);\n \n             StreamLockfile lockfile = new StreamLockfile(cfs.directories.getWriteableLocationAsFile(), UUID.randomUUID());", "filename": "src/java/org/apache/cassandra/streaming/StreamReceiveTask.java"}, {"additions": 5, "raw_url": "https://github.com/apache/cassandra/raw/d143487cb198051d0eaccc7f587f35cc63fc85a9/src/java/org/apache/cassandra/streaming/compress/CompressedStreamReader.java", "blob_url": "https://github.com/apache/cassandra/blob/d143487cb198051d0eaccc7f587f35cc63fc85a9/src/java/org/apache/cassandra/streaming/compress/CompressedStreamReader.java", "sha": "219cabbf1a9d5c574edaebc4fc120b52271e2534", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/compress/CompressedStreamReader.java?ref=d143487cb198051d0eaccc7f587f35cc63fc85a9", "patch": "@@ -60,6 +60,11 @@ public SSTableWriter read(ReadableByteChannel channel) throws IOException\n         long totalSize = totalSize();\n \n         Pair<String, String> kscf = Schema.instance.getCF(cfId);\n+        if (kscf == null)\n+        {\n+            // schema was dropped during streaming\n+            throw new IOException(\"CF \" + cfId + \" was dropped during streaming\");\n+        }\n         ColumnFamilyStore cfs = Keyspace.open(kscf.left).getColumnFamilyStore(kscf.right);\n \n         SSTableWriter writer = createWriter(cfs, totalSize);", "filename": "src/java/org/apache/cassandra/streaming/compress/CompressedStreamReader.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/05920cb38bc8559704450965ce4bb326a917c86a", "parent": "https://github.com/apache/cassandra/commit/f19b4cb807d30cc7fdb1869c407ee9a5e9e3acce", "message": "Prevent NPE on FD conviction race\n\nPatch by brandonwilliams, reviewed by thobbs for CASSANDRA-7940", "bug_id": "cassandra_63", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/05920cb38bc8559704450965ce4bb326a917c86a/src/java/org/apache/cassandra/gms/Gossiper.java", "blob_url": "https://github.com/apache/cassandra/blob/05920cb38bc8559704450965ce4bb326a917c86a/src/java/org/apache/cassandra/gms/Gossiper.java", "sha": "4514da717303b1acb01f3bc94d78dba585433bfb", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/gms/Gossiper.java?ref=05920cb38bc8559704450965ce4bb326a917c86a", "patch": "@@ -298,6 +298,8 @@ public long getEndpointDowntime(InetAddress ep)\n     public void convict(InetAddress endpoint, double phi)\n     {\n         EndpointState epState = endpointStateMap.get(endpoint);\n+        if (epState == null)\n+            return;\n         if (epState.isAlive() && !isDeadState(epState))\n         {\n             markDead(endpoint, epState);", "filename": "src/java/org/apache/cassandra/gms/Gossiper.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/ad6ba3d243058f060569ad16d6713f46e2ce6160", "parent": "https://github.com/apache/cassandra/commit/e7566609e232d2adee2e2879ad4811b7cce1f5d2", "message": "Fix NPE in FileCacheService.sizeInBytes\n\npatch by tjake; reviewed by jbellis for (CASSANDRA-7756)", "bug_id": "cassandra_64", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/ad6ba3d243058f060569ad16d6713f46e2ce6160/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/ad6ba3d243058f060569ad16d6713f46e2ce6160/CHANGES.txt", "sha": "4306de5652837d3387573bf9a254d850cf4e024b", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=ad6ba3d243058f060569ad16d6713f46e2ce6160", "patch": "@@ -1,4 +1,5 @@\n 2.0.10\n+ * Fix NPE in FileCacheService.sizeInBytes (CASSANDRA-7756)\n  * (cqlsh) cqlsh should automatically disable tracing when selecting\n    from system_traces (CASSANDRA-7641)\n  * (Hadoop) Add CqlOutputFormat (CASSANDRA-6927)", "filename": "CHANGES.txt"}, {"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/ad6ba3d243058f060569ad16d6713f46e2ce6160/src/java/org/apache/cassandra/io/util/RandomAccessReader.java", "blob_url": "https://github.com/apache/cassandra/blob/ad6ba3d243058f060569ad16d6713f46e2ce6160/src/java/org/apache/cassandra/io/util/RandomAccessReader.java", "sha": "09ecac097423b313fe9e110f1f787734c3a349a3", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/util/RandomAccessReader.java?ref=ad6ba3d243058f060569ad16d6713f46e2ce6160", "patch": "@@ -154,7 +154,10 @@ public String getPath()\n \n     public int getTotalBufferSize()\n     {\n-        return buffer.length;\n+        //This may NPE so we make a ref\n+        //https://issues.apache.org/jira/browse/CASSANDRA-7756\n+        byte[] ref = buffer;\n+        return ref != null ? ref.length : 0;\n     }\n \n     public void reset()", "filename": "src/java/org/apache/cassandra/io/util/RandomAccessReader.java"}, {"additions": 70, "raw_url": "https://github.com/apache/cassandra/raw/ad6ba3d243058f060569ad16d6713f46e2ce6160/test/unit/org/apache/cassandra/io/util/BufferedRandomAccessFileTest.java", "blob_url": "https://github.com/apache/cassandra/blob/ad6ba3d243058f060569ad16d6713f46e2ce6160/test/unit/org/apache/cassandra/io/util/BufferedRandomAccessFileTest.java", "sha": "a16b2913032e7490a7a9722c9a36b5d4407b36d1", "changes": 70, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/io/util/BufferedRandomAccessFileTest.java?ref=ad6ba3d243058f060569ad16d6713f46e2ce6160", "patch": "@@ -19,6 +19,7 @@\n  */\n package org.apache.cassandra.io.util;\n \n+import org.apache.cassandra.service.FileCacheService;\n import org.apache.cassandra.utils.ByteBufferUtil;\n \n import java.io.File;\n@@ -28,6 +29,11 @@\n import java.nio.channels.ClosedChannelException;\n import java.util.Arrays;\n import java.util.concurrent.Callable;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n import static org.apache.cassandra.Util.expectEOF;\n import static org.apache.cassandra.Util.expectException;\n@@ -507,6 +513,70 @@ public void testAssertionErrorWhenBytesPastMarkIsNegative() throws IOException\n         r.bytesPastMark();\n     }\n \n+    @Test\n+    public void testFileCacheService() throws IOException, InterruptedException\n+    {\n+        //see https://issues.apache.org/jira/browse/CASSANDRA-7756\n+\n+        final int THREAD_COUNT = 40;\n+        ExecutorService executorService = Executors.newFixedThreadPool(THREAD_COUNT);\n+\n+        SequentialWriter w1 = createTempFile(\"fscache1\");\n+        SequentialWriter w2 = createTempFile(\"fscache2\");\n+\n+        w1.write(new byte[30]);\n+        w1.close();\n+\n+        w2.write(new byte[30]);\n+        w2.close();\n+\n+        for (int i = 0; i < 20; i++)\n+        {\n+\n+\n+            RandomAccessReader r1 = RandomAccessReader.open(w1);\n+            RandomAccessReader r2 = RandomAccessReader.open(w2);\n+\n+\n+            FileCacheService.instance.put(r1);\n+            FileCacheService.instance.put(r2);\n+\n+            final CountDownLatch finished = new CountDownLatch(THREAD_COUNT);\n+            final AtomicBoolean hadError = new AtomicBoolean(false);\n+\n+            for (int k = 0; k < THREAD_COUNT; k++)\n+            {\n+                executorService.execute( new Runnable()\n+                {\n+                    @Override\n+                    public void run()\n+                    {\n+                        try\n+                        {\n+                            long size = FileCacheService.instance.sizeInBytes();\n+\n+                            while (size > 0)\n+                                size = FileCacheService.instance.sizeInBytes();\n+                        }\n+                        catch (Throwable t)\n+                        {\n+                            t.printStackTrace();\n+                            hadError.set(true);\n+                        }\n+                        finally\n+                        {\n+                            finished.countDown();\n+                        }\n+                    }\n+                });\n+\n+            }\n+\n+            finished.await();\n+            assert !hadError.get();\n+        }\n+    }\n+\n     @Test\n     public void testReadOnly() throws IOException\n     {", "filename": "test/unit/org/apache/cassandra/io/util/BufferedRandomAccessFileTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/ed4fad19ecd9b02892623ffd538c0c45dcdc5a56", "parent": "https://github.com/apache/cassandra/commit/fa6205c909656b09165da4b5ca469328a6450917", "message": "Fix NPE when internode compression is off\n\npatch by yukim; reviewed by Jeremiah Jordan; follow up for CASSANDRA-9884", "bug_id": "cassandra_65", "file": [{"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/ed4fad19ecd9b02892623ffd538c0c45dcdc5a56/src/java/org/apache/cassandra/net/IncomingTcpConnection.java", "blob_url": "https://github.com/apache/cassandra/blob/ed4fad19ecd9b02892623ffd538c0c45dcdc5a56/src/java/org/apache/cassandra/net/IncomingTcpConnection.java", "sha": "cfdb8540003617faaa211125a65ca36724fb12a1", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/net/IncomingTcpConnection.java?ref=ed4fad19ecd9b02892623ffd538c0c45dcdc5a56", "patch": "@@ -21,6 +21,8 @@\n import java.net.InetAddress;\n import java.net.Socket;\n import java.net.SocketException;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n import java.util.zip.Checksum;\n import java.util.Set;\n \n@@ -162,7 +164,8 @@ private void receiveMessages() throws IOException\n         }\n         else\n         {\n-            in = new NIODataInputStream(socket.getChannel(), BUFFER_SIZE);\n+            ReadableByteChannel channel = socket.getChannel();\n+            in = new NIODataInputStream(channel != null ? channel : Channels.newChannel(socket.getInputStream()), BUFFER_SIZE);\n         }\n \n         while (true)", "filename": "src/java/org/apache/cassandra/net/IncomingTcpConnection.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/1a0aaf04986155eae45b2685d234b928866b681c", "parent": "https://github.com/apache/cassandra/commit/892bf5551c06e669b02d161439463ebf2de0793c", "message": "Avoid NPE when listing saved caches directory\n\nPatch by marcuse; reviewed by yukim for CASSANDRA-7632", "bug_id": "cassandra_66", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/1a0aaf04986155eae45b2685d234b928866b681c/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/1a0aaf04986155eae45b2685d234b928866b681c/CHANGES.txt", "sha": "1fcb556a30c8a396b1a0d7a97dbb0d2acaecc444", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=1a0aaf04986155eae45b2685d234b928866b681c", "patch": "@@ -22,6 +22,7 @@\n  * Fix error when doing reversed queries with static columns (CASSANDRA-7490)\n  * Backport CASSANDRA-6747 (CASSANDRA-7560)\n  * Track max/min timestamps for range tombstones (CASSANDRA-7647)\n+ * Fix NPE when listing saved caches dir (CASSANDRA-7632)\n Merged from 1.2:\n  * Set correct stream ID on responses when non-Exception Throwables\n    are thrown while handling native protocol messages (CASSANDRA-7470)", "filename": "CHANGES.txt"}, {"additions": 14, "raw_url": "https://github.com/apache/cassandra/raw/1a0aaf04986155eae45b2685d234b928866b681c/src/java/org/apache/cassandra/cache/AutoSavingCache.java", "blob_url": "https://github.com/apache/cassandra/blob/1a0aaf04986155eae45b2685d234b928866b681c/src/java/org/apache/cassandra/cache/AutoSavingCache.java", "sha": "64234e2f2771ca3028666dac0689426ef9314cce", "changes": 23, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cache/AutoSavingCache.java?ref=1a0aaf04986155eae45b2685d234b928866b681c", "patch": "@@ -261,19 +261,24 @@ private void deleteOldCacheFiles()\n         {\n             File savedCachesDir = new File(DatabaseDescriptor.getSavedCachesLocation());\n             assert savedCachesDir.exists() && savedCachesDir.isDirectory();\n-\n-            for (File file : savedCachesDir.listFiles())\n+            File[] files = savedCachesDir.listFiles();\n+            if (files != null)\n             {\n-                if (!file.isFile())\n-                    continue; // someone's been messing with our directory.  naughty!\n-\n-                if (file.getName().endsWith(cacheType.toString())\n-                    || file.getName().endsWith(String.format(\"%s-%s.db\", cacheType.toString(), CURRENT_VERSION)))\n+                for (File file : files)\n                 {\n-                    if (!file.delete())\n-                        logger.warn(\"Failed to delete {}\", file.getAbsolutePath());\n+                    if (!file.isFile())\n+                        continue; // someone's been messing with our directory.  naughty!\n+\n+                    if (file.getName().endsWith(cacheType.toString())\n+                            || file.getName().endsWith(String.format(\"%s-%s.db\", cacheType.toString(), CURRENT_VERSION)))\n+                    {\n+                        if (!file.delete())\n+                            logger.warn(\"Failed to delete {}\", file.getAbsolutePath());\n+                    }\n                 }\n             }\n+            else\n+                logger.warn(\"Could not list files in {}\", savedCachesDir);\n         }\n     }\n ", "filename": "src/java/org/apache/cassandra/cache/AutoSavingCache.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/886d9fce46b369807071c5fc87204bb552db906d", "parent": "https://github.com/apache/cassandra/commit/8480fa7be1bbf54c526d76aeee7ecb07c417db6d", "message": "Fix NPE in StreamTransferTask.createMessageForRetry()\n\npatch by Josh McKenzie; reviewed by Aleksey Yeschenko for CASSANDRA-7323", "bug_id": "cassandra_67", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/886d9fce46b369807071c5fc87204bb552db906d/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/886d9fce46b369807071c5fc87204bb552db906d/CHANGES.txt", "sha": "d1d10301d899c351694512a80b22b992ada1b079", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=886d9fce46b369807071c5fc87204bb552db906d", "patch": "@@ -1,4 +1,5 @@\n 2.0.9\n+ * Fix NPE in StreamTransferTask.createMessageForRetry() (CASSANDRA-7323)\n  * Add conditional CREATE/DROP USER support (CASSANDRA-7264)\n  * Swap local and global default read repair chances (CASSANDRA-7320)\n  * Add missing iso8601 patterns for date strings (CASSANDRA-6973)", "filename": "CHANGES.txt"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/886d9fce46b369807071c5fc87204bb552db906d/src/java/org/apache/cassandra/streaming/StreamTransferTask.java", "blob_url": "https://github.com/apache/cassandra/blob/886d9fce46b369807071c5fc87204bb552db906d/src/java/org/apache/cassandra/streaming/StreamTransferTask.java", "sha": "a543d01e8d633d06c6a8de98afc5ed6ddedb404d", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamTransferTask.java?ref=886d9fce46b369807071c5fc87204bb552db906d", "patch": "@@ -99,11 +99,12 @@ public long getTotalSize()\n         return new ArrayList<>(files.values());\n     }\n \n-    public OutgoingFileMessage createMessageForRetry(int sequenceNumber)\n+    public synchronized OutgoingFileMessage createMessageForRetry(int sequenceNumber)\n     {\n         // remove previous time out task to be rescheduled later\n         ScheduledFuture future = timeoutTasks.get(sequenceNumber);\n-        future.cancel(false);\n+        if (future != null)\n+            future.cancel(false);\n         return files.get(sequenceNumber);\n     }\n ", "filename": "src/java/org/apache/cassandra/streaming/StreamTransferTask.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/c939422637bdba13fa3b5849cc1e7eacf26d46d0", "parent": "https://github.com/apache/cassandra/commit/f778c1f88f4deb075b383f3a8b24ef279585bd32", "message": "'WITH WITH' in alter keyspace statements causes NPE\n\npatch by Benjamin Lerer; reviewed by Robert Stupp for CASSANDRA-9565", "bug_id": "cassandra_68", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/c939422637bdba13fa3b5849cc1e7eacf26d46d0/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/c939422637bdba13fa3b5849cc1e7eacf26d46d0/CHANGES.txt", "sha": "6e3a147cfe4481d5c81cd3c91e64ef3418b9a2c8", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=c939422637bdba13fa3b5849cc1e7eacf26d46d0", "patch": "@@ -1,4 +1,5 @@\n 2.0.17\n+ * 'WITH WITH' in alter keyspace statements causes NPE (CASSANDRA-9565)\n  * Display min timestamp in sstablemetadata viewer (CASSANDRA-6767)\n \n ", "filename": "CHANGES.txt"}, {"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/c939422637bdba13fa3b5849cc1e7eacf26d46d0/src/java/org/apache/cassandra/cql3/Cql.g", "blob_url": "https://github.com/apache/cassandra/blob/c939422637bdba13fa3b5849cc1e7eacf26d46d0/src/java/org/apache/cassandra/cql3/Cql.g", "sha": "8b382fa297e51eb4c385fb65d2db4dca0af4cac1", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/Cql.g?ref=c939422637bdba13fa3b5849cc1e7eacf26d46d0", "patch": "@@ -891,8 +891,8 @@ properties[PropertyDefinitions props]\n     ;\n \n property[PropertyDefinitions props]\n-    : k=ident '=' (simple=propertyValue { try { $props.addProperty(k.toString(), simple); } catch (SyntaxException e) { addRecognitionError(e.getMessage()); } }\n-                   |   map=map_literal   { try { $props.addProperty(k.toString(), convertPropertyMap(map)); } catch (SyntaxException e) { addRecognitionError(e.getMessage()); } })\n+    : k=ident '=' simple=propertyValue { try { $props.addProperty(k.toString(), simple); } catch (SyntaxException e) { addRecognitionError(e.getMessage()); } }\n+    | k=ident '=' map=map_literal { try { $props.addProperty(k.toString(), convertPropertyMap(map)); } catch (SyntaxException e) { addRecognitionError(e.getMessage()); } }\n     ;\n \n propertyValue returns [String str]", "filename": "src/java/org/apache/cassandra/cql3/Cql.g"}, {"additions": 89, "raw_url": "https://github.com/apache/cassandra/raw/c939422637bdba13fa3b5849cc1e7eacf26d46d0/test/unit/org/apache/cassandra/cql3/CreateAndAlterKeyspaceTest.java", "blob_url": "https://github.com/apache/cassandra/blob/c939422637bdba13fa3b5849cc1e7eacf26d46d0/test/unit/org/apache/cassandra/cql3/CreateAndAlterKeyspaceTest.java", "sha": "45be0df82a26edf9ba4ff56744141a870fabd723", "changes": 89, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/CreateAndAlterKeyspaceTest.java?ref=c939422637bdba13fa3b5849cc1e7eacf26d46d0", "patch": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.cassandra.cql3;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import org.apache.cassandra.SchemaLoader;\n+import org.apache.cassandra.db.ConsistencyLevel;\n+import org.apache.cassandra.exceptions.SyntaxException;\n+import org.apache.cassandra.gms.Gossiper;\n+\n+import static org.apache.cassandra.cql3.QueryProcessor.process;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class CreateAndAlterKeyspaceTest\n+{\n+    @BeforeClass\n+    public static void setUpClass() throws Throwable\n+    {\n+        SchemaLoader.loadSchema();\n+    }\n+\n+    @AfterClass\n+    public static void stopGossiper()\n+    {\n+        Gossiper.instance.stop();\n+    }\n+\n+    @Test\n+    // tests CASSANDRA-9565\n+    public void testCreateAndAlterWithDoubleWith() throws Throwable\n+    {\n+        String[] stmts = new String[] {\"ALTER KEYSPACE WITH WITH DURABLE_WRITES = true\",\n+                                       \"ALTER KEYSPACE ks WITH WITH DURABLE_WRITES = true\",\n+                                       \"CREATE KEYSPACE WITH WITH DURABLE_WRITES = true\",\n+                                       \"CREATE KEYSPACE ks WITH WITH DURABLE_WRITES = true\"};\n+\n+        for (String stmt : stmts) {\n+            assertInvalidSyntax(stmt, \"no viable alternative at input 'WITH'\");\n+        }\n+    }\n+\n+    /**\n+     * Checks that the specified statement result in a <code>SyntaxException</code> containing the specified message.\n+     *\n+     * @param stmt the statement to check\n+     */\n+    private static void assertInvalidSyntax(String stmt, String msg) throws Throwable {\n+        try {\n+            process(stmt, ConsistencyLevel.ONE);\n+            fail();\n+        } catch (RuntimeException e) {\n+            assertSyntaxException(e.getCause(), msg);\n+        }\n+    }\n+\n+    /**\n+     * Asserts that the specified exception is a <code>SyntaxException</code> for which the error message contains\n+     * the specified text.\n+     *\n+     * @param exception the exception to test\n+     * @param expectedContent the expected content of the error message\n+     */\n+    private static void assertSyntaxException(Throwable exception, String expectedContent) {\n+        assertTrue(\"The exception should be a SyntaxException but is not\", exception instanceof SyntaxException);\n+\n+        String msg = exception.getMessage();\n+        assertTrue(String.format(\"The error message was expected to contains: %s but was %s\", expectedContent, msg),\n+                   msg.contains(expectedContent));\n+    }\n+}", "filename": "test/unit/org/apache/cassandra/cql3/CreateAndAlterKeyspaceTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/6658a6e03cb4062036f84e78aba6fc3114499c80", "parent": "https://github.com/apache/cassandra/commit/7232783bc5ab7134c1698d866ceb9cca330d0441", "message": "Fix sstableloader NPE\n\npatch by benedict; reviewed by yukim for CASSANDRA7015", "bug_id": "cassandra_69", "file": [{"additions": 6, "raw_url": "https://github.com/apache/cassandra/raw/6658a6e03cb4062036f84e78aba6fc3114499c80/src/java/org/apache/cassandra/io/sstable/SSTableReader.java", "blob_url": "https://github.com/apache/cassandra/blob/6658a6e03cb4062036f84e78aba6fc3114499c80/src/java/org/apache/cassandra/io/sstable/SSTableReader.java", "sha": "e70fd60c2748125a91f0e37bb1b5589ce0168df4", "changes": 10, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/SSTableReader.java?ref=6658a6e03cb4062036f84e78aba6fc3114499c80", "patch": "@@ -89,6 +89,8 @@\n import org.apache.cassandra.io.sstable.metadata.MetadataType;\n import org.apache.cassandra.io.sstable.metadata.StatsMetadata;\n import org.apache.cassandra.io.sstable.metadata.ValidationMetadata;\n+import org.apache.cassandra.io.util.BufferedSegmentedFile;\n+import org.apache.cassandra.io.util.CompressedSegmentedFile;\n import org.apache.cassandra.io.util.DataOutputStreamAndChannel;\n import org.apache.cassandra.io.util.FileDataInput;\n import org.apache.cassandra.io.util.FileUtils;\n@@ -335,10 +337,10 @@ public static SSTableReader openForBatch(Descriptor descriptor, Set<Component> c\n                                                   statsMetadata);\n \n         // special implementation of load to use non-pooled SegmentedFile builders\n-        SegmentedFile.Builder ibuilder = SegmentedFile.getBuilder(DatabaseDescriptor.getIndexAccessMode());\n+        SegmentedFile.Builder ibuilder = new BufferedSegmentedFile.Builder();\n         SegmentedFile.Builder dbuilder = sstable.compression\n-                                       ? SegmentedFile.getCompressedBuilder()\n-                                       : SegmentedFile.getBuilder(DatabaseDescriptor.getDiskAccessMode());\n+                                       ? new CompressedSegmentedFile.Builder()\n+                                       : new BufferedSegmentedFile.Builder();\n         if (!sstable.loadSummary(ibuilder, dbuilder))\n             sstable.buildSummary(false, ibuilder, dbuilder, false, Downsampling.BASE_SAMPLING_LEVEL);\n         sstable.ifile = ibuilder.complete(sstable.descriptor.filenameFor(Component.PRIMARY_INDEX));\n@@ -796,7 +798,7 @@ public boolean loadSummary(SegmentedFile.Builder ibuilder, SegmentedFile.Builder\n         }\n         catch (IOException e)\n         {\n-            logger.debug(\"Cannot deserialize SSTable {} Summary: {}\", toString(), e.getMessage());\n+            logger.debug(\"Cannot deserialize SSTable Summary File {}: {}\", summariesFile.getPath(), e.getMessage());\n             // corrupted; delete it and fall back to creating a new summary\n             FileUtils.closeQuietly(iStream);\n             // delete it and fall back to creating a new summary", "filename": "src/java/org/apache/cassandra/io/sstable/SSTableReader.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/c6ec5d5b2b1cecf6189bf469959bd9b014c54513", "parent": "https://github.com/apache/cassandra/commit/84daab53eaa20f30cdf77c174dcc432525771221", "message": "Fix NPE caused by CASSANDRA-6818\n\npatch by yukim; reviewed by thobbs for CASSANDRA-6984", "bug_id": "cassandra_70", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/c6ec5d5b2b1cecf6189bf469959bd9b014c54513/src/java/org/apache/cassandra/streaming/ConnectionHandler.java", "blob_url": "https://github.com/apache/cassandra/blob/c6ec5d5b2b1cecf6189bf469959bd9b014c54513/src/java/org/apache/cassandra/streaming/ConnectionHandler.java", "sha": "b06a818adf3e731148de8614ef9bf5ba7dce96f8", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/ConnectionHandler.java?ref=c6ec5d5b2b1cecf6189bf469959bd9b014c54513", "patch": "@@ -366,7 +366,7 @@ public void run()\n             {\n                 throw new AssertionError(e);\n             }\n-            catch (IOException e)\n+            catch (Throwable e)\n             {\n                 session.onError(e);\n             }", "filename": "src/java/org/apache/cassandra/streaming/ConnectionHandler.java"}, {"additions": 5, "raw_url": "https://github.com/apache/cassandra/raw/c6ec5d5b2b1cecf6189bf469959bd9b014c54513/src/java/org/apache/cassandra/streaming/StreamSession.java", "blob_url": "https://github.com/apache/cassandra/blob/c6ec5d5b2b1cecf6189bf469959bd9b014c54513/src/java/org/apache/cassandra/streaming/StreamSession.java", "sha": "7976a40a591b837e858496c1d229dfb51a75044c", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamSession.java?ref=c6ec5d5b2b1cecf6189bf469959bd9b014c54513", "patch": "@@ -462,7 +462,11 @@ public void fileSent(FileMessageHeader header)\n         StreamingMetrics.totalOutgoingBytes.inc(headerSize);\n         metrics.outgoingBytes.inc(headerSize);\n         // schedule timeout for receiving ACK\n-        transfers.get(header.cfId).scheduleTimeout(header.sequenceNumber, 12, TimeUnit.HOURS);\n+        StreamTransferTask task = transfers.get(header.cfId);\n+        if (task != null)\n+        {\n+            task.scheduleTimeout(header.sequenceNumber, 12, TimeUnit.HOURS);\n+        }\n     }\n \n     /**", "filename": "src/java/org/apache/cassandra/streaming/StreamSession.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/1a1f836f20ba4bf1c263d4fd3c32338e55abbcbc", "parent": "https://github.com/apache/cassandra/commit/15131391d833c1a0ba0e26903e27867fd101fe72", "message": "Fix rare NPE on schema upgrade from 2.x to 3.x\n\npatch by Aleksey Yeschenko; reviewed by Sylvain Lebresne for\nCASSANDRA-10943", "bug_id": "cassandra_71", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/1a1f836f20ba4bf1c263d4fd3c32338e55abbcbc/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/1a1f836f20ba4bf1c263d4fd3c32338e55abbcbc/CHANGES.txt", "sha": "0ce75a8ebcd1b6e4f829d7cf87c058a66ac34d4c", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=1a1f836f20ba4bf1c263d4fd3c32338e55abbcbc", "patch": "@@ -1,4 +1,5 @@\n 3.0.5\n+ * Fix rare NPE on schema upgrade from 2.x to 3.x (CASSANDRA-10943)\n  * Improve backoff policy for cqlsh COPY FROM (CASSANDRA-11320)\n  * Improve IF NOT EXISTS check in CREATE INDEX (CASSANDRA-11131)\n  * Upgrade ohc to 0.4.3", "filename": "CHANGES.txt"}, {"additions": 62, "raw_url": "https://github.com/apache/cassandra/raw/1a1f836f20ba4bf1c263d4fd3c32338e55abbcbc/src/java/org/apache/cassandra/schema/LegacySchemaMigrator.java", "blob_url": "https://github.com/apache/cassandra/blob/1a1f836f20ba4bf1c263d4fd3c32338e55abbcbc/src/java/org/apache/cassandra/schema/LegacySchemaMigrator.java", "sha": "7411b9310f5cc2397f222afcc8680038840bb5bd", "changes": 63, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/schema/LegacySchemaMigrator.java?ref=1a1f836f20ba4bf1c263d4fd3c32338e55abbcbc", "patch": "@@ -284,7 +284,9 @@ private static CFMetaData decodeTableMetadata(UntypedResultSet.Row tableRow,\n         AbstractType<?> subComparator = tableRow.has(\"subcomparator\") ? TypeParser.parse(tableRow.getString(\"subcomparator\")) : null;\n \n         boolean isSuper = \"super\".equals(tableRow.getString(\"type\").toLowerCase());\n-        boolean isDense = tableRow.getBoolean(\"is_dense\");\n+        boolean isDense = tableRow.has(\"is_dense\")\n+                        ? tableRow.getBoolean(\"is_dense\")\n+                        : calculateIsDense(rawComparator, columnRows);\n         boolean isCompound = rawComparator instanceof CompositeType;\n \n         // We don't really use the default validator but as we have it for backward compatibility, we use it to know if it's a counter table\n@@ -364,6 +366,65 @@ private static CFMetaData decodeTableMetadata(UntypedResultSet.Row tableRow,\n                   .triggers(createTriggersFromTriggerRows(triggerRows));\n     }\n \n+    /*\n+     * We call dense a CF for which each component of the comparator is a clustering column, i.e. no\n+     * component is used to store a regular column names. In other words, non-composite static \"thrift\"\n+     * and CQL3 CF are *not* dense.\n+     * We save whether the table is dense or not during table creation through CQL, but we don't have this\n+     * information for table just created through thrift, nor for table prior to CASSANDRA-7744, so this\n+     * method does its best to infer whether the table is dense or not based on other elements.\n+     */\n+    public static boolean calculateIsDense(AbstractType<?> comparator, UntypedResultSet columnRows)\n+    {\n+        /*\n+         * As said above, this method is only here because we need to deal with thrift upgrades.\n+         * Once a CF has been \"upgraded\", i.e. we've rebuilt and save its CQL3 metadata at least once,\n+         * then we'll have saved the \"is_dense\" value and will be good to go.\n+         *\n+         * But non-upgraded thrift CF (and pre-7744 CF) will have no value for \"is_dense\", so we need\n+         * to infer that information without relying on it in that case. And for the most part this is\n+         * easy, a CF that has at least one REGULAR definition is not dense. But the subtlety is that not\n+         * having a REGULAR definition may not mean dense because of CQL3 definitions that have only the\n+         * PRIMARY KEY defined.\n+         *\n+         * So we need to recognize those special case CQL3 table with only a primary key. If we have some\n+         * clustering columns, we're fine as said above. So the only problem is that we cannot decide for\n+         * sure if a CF without REGULAR columns nor CLUSTERING_COLUMN definition is meant to be dense, or if it\n+         * has been created in CQL3 by say:\n+         *    CREATE TABLE test (k int PRIMARY KEY)\n+         * in which case it should not be dense. However, we can limit our margin of error by assuming we are\n+         * in the latter case only if the comparator is exactly CompositeType(UTF8Type).\n+         */\n+        boolean hasRegular = false;\n+        int maxClusteringIdx = -1;\n+\n+        for (UntypedResultSet.Row columnRow : columnRows)\n+        {\n+            switch (columnRow.getString(\"type\"))\n+            {\n+                case \"clustering_key\":\n+                    maxClusteringIdx = Math.max(maxClusteringIdx, columnRow.has(\"component_index\") ? columnRow.getInt(\"component_index\") : 0);\n+                    break;\n+                case \"regular\":\n+                    hasRegular = true;\n+                    break;\n+            }\n+        }\n+\n+        return maxClusteringIdx >= 0\n+               ? maxClusteringIdx == comparator.componentsCount() - 1\n+               : !hasRegular && !isCQL3OnlyPKComparator(comparator);\n+    }\n+\n+    private static boolean isCQL3OnlyPKComparator(AbstractType<?> comparator)\n+    {\n+        if (!(comparator instanceof CompositeType))\n+            return false;\n+\n+        CompositeType ct = (CompositeType)comparator;\n+        return ct.types.size() == 1 && ct.types.get(0) instanceof UTF8Type;\n+    }\n+\n     private static TableParams decodeTableParams(UntypedResultSet.Row row)\n     {\n         TableParams.Builder params = TableParams.builder();", "filename": "src/java/org/apache/cassandra/schema/LegacySchemaMigrator.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/535c56fb217c1a12d2fb9a217203c03d26642444", "parent": "https://github.com/apache/cassandra/commit/d1cc70138ca9088e6d390af767b357bc40d147fc", "message": "Fix NPE in MeteredFlusher\npatch by Nicolas Favre-Felix; reviewed by jbellis for CASSANDRA-6820", "bug_id": "cassandra_72", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/535c56fb217c1a12d2fb9a217203c03d26642444/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/535c56fb217c1a12d2fb9a217203c03d26642444/CHANGES.txt", "sha": "ed202cc01e27de8cf3d1f0d5403f5bd4a000e138", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=535c56fb217c1a12d2fb9a217203c03d26642444", "patch": "@@ -1,4 +1,5 @@\n 2.0.7\n+ * Fix NPE in MeteredFlusher (CASSANDRA-6820)\n  * Fix race processing range scan responses (CASSANDRA-6820)\n  * Allow deleting snapshots from dropped keyspaces (CASSANDRA-6821)\n  * Add uuid() function (CASSANDRA-6473)", "filename": "CHANGES.txt"}, {"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/535c56fb217c1a12d2fb9a217203c03d26642444/src/java/org/apache/cassandra/db/MeteredFlusher.java", "blob_url": "https://github.com/apache/cassandra/blob/535c56fb217c1a12d2fb9a217203c03d26642444/src/java/org/apache/cassandra/db/MeteredFlusher.java", "sha": "5c71fc6f1e0e27f8f81ac19e606c1ddeed1fc9d8", "changes": 5, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/MeteredFlusher.java?ref=535c56fb217c1a12d2fb9a217203c03d26642444", "patch": "@@ -37,9 +37,8 @@ public void run()\n         long totalMemtableBytesAllowed = DatabaseDescriptor.getTotalMemtableSpaceInMB() * 1048576L;\n \n         // first, find how much memory non-active memtables are using\n-        long flushingBytes = Memtable.activelyMeasuring == null\n-                           ? 0\n-                           : Memtable.activelyMeasuring.getMemtableThreadSafe().getLiveSize();\n+        ColumnFamilyStore measuredCfs = Memtable.activelyMeasuring;\n+        long flushingBytes = measuredCfs == null ? 0 : measuredCfs.getMemtableThreadSafe().getLiveSize();\n         flushingBytes += countFlushingBytes();\n         if (flushingBytes > 0)\n             logger.debug(\"Currently flushing {} bytes of {} max\", flushingBytes, totalMemtableBytesAllowed);", "filename": "src/java/org/apache/cassandra/db/MeteredFlusher.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/5223c4797cbb46d5df427d72bb115f96af342d60", "parent": "https://github.com/apache/cassandra/commit/63b1ef4eebb26523d69b96cfcf20d9e5ae0b15c0", "message": "Fix ABTC NPE\npatch by Benedict Elliott Smith; reviewed by jbellis for CASSANDRA-6692", "bug_id": "cassandra_73", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/5223c4797cbb46d5df427d72bb115f96af342d60/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/5223c4797cbb46d5df427d72bb115f96af342d60/CHANGES.txt", "sha": "efc54f8034e0119ed1d7316a1885ef07721cc30f", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=5223c4797cbb46d5df427d72bb115f96af342d60", "patch": "@@ -1,7 +1,9 @@\n 2.1.0-beta2\n+ * Fix ABTC NPE (CASSANDRA-6692)\n  * Allow nodetool to use a file or prompt for password (CASSANDRA-6660)\n  * Fix AIOOBE when concurrently accessing ABSC (CASSANDRA-6742)\n \n+\n 2.1.0-beta1\n  * Add flush directory distinct from compaction directories (CASSANDRA-6357)\n  * Require JNA by default (CASSANDRA-6575)", "filename": "CHANGES.txt"}, {"additions": 9, "raw_url": "https://github.com/apache/cassandra/raw/5223c4797cbb46d5df427d72bb115f96af342d60/src/java/org/apache/cassandra/db/AtomicBTreeColumns.java", "blob_url": "https://github.com/apache/cassandra/blob/5223c4797cbb46d5df427d72bb115f96af342d60/src/java/org/apache/cassandra/db/AtomicBTreeColumns.java", "sha": "f75efd2fc765b0d80d8c9ef112bc9c074083b320", "changes": 14, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/AtomicBTreeColumns.java?ref=5223c4797cbb46d5df427d72bb115f96af342d60", "patch": "@@ -230,25 +230,29 @@ public Delta addAllWithSizeDelta(final ColumnFamily cm, AbstractAllocator alloca\n             Holder current = ref;\n \n             delta.reset();\n-            DeletionInfo deletionInfo = cm.deletionInfo();\n-            if (deletionInfo.mayModify(current.deletionInfo))\n+            DeletionInfo deletionInfo;\n+            if (cm.deletionInfo().mayModify(current.deletionInfo))\n             {\n-                if (deletionInfo.hasRanges())\n+                if (cm.deletionInfo().hasRanges())\n                 {\n                     for (Iterator<Cell> iter : new Iterator[] { insert.iterator(), BTree.<Cell>slice(current.tree, true) })\n                     {\n                         while (iter.hasNext())\n                         {\n                             Cell col = iter.next();\n-                            if (deletionInfo.isDeleted(col))\n+                            if (cm.deletionInfo().isDeleted(col))\n                                 indexer.remove(col);\n                         }\n                     }\n                 }\n \n-                deletionInfo = current.deletionInfo.copy().add(deletionInfo);\n+                deletionInfo = current.deletionInfo.copy().add(cm.deletionInfo());\n                 delta.addHeapSize(deletionInfo.unsharedHeapSize() - current.deletionInfo.unsharedHeapSize());\n             }\n+            else\n+            {\n+                deletionInfo = current.deletionInfo;\n+            }\n \n             ColumnUpdater updater = new ColumnUpdater(this, current, allocator, transformation, indexer, delta);\n             Object[] tree = BTree.update(current.tree, metadata.comparator.columnComparator(), insert, true, updater);", "filename": "src/java/org/apache/cassandra/db/AtomicBTreeColumns.java"}, {"additions": 19, "raw_url": "https://github.com/apache/cassandra/raw/5223c4797cbb46d5df427d72bb115f96af342d60/src/java/org/apache/cassandra/utils/btree/BTree.java", "blob_url": "https://github.com/apache/cassandra/blob/5223c4797cbb46d5df427d72bb115f96af342d60/src/java/org/apache/cassandra/utils/btree/BTree.java", "sha": "69cf1455095b248c18a98d7d20eef71f4f1da982", "changes": 24, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/utils/btree/BTree.java?ref=5223c4797cbb46d5df427d72bb115f96af342d60", "patch": "@@ -18,9 +18,11 @@\n  */\n package org.apache.cassandra.utils.btree;\n \n+import java.util.ArrayDeque;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Comparator;\n+import java.util.Queue;\n \n import org.apache.cassandra.utils.ObjectSizes;\n \n@@ -113,7 +115,13 @@\n         if (!sorted)\n             source = sorted(source, comparator, size);\n \n-        return modifier.get().build(source, size);\n+        Queue<Builder> queue = modifier.get();\n+        Builder builder = queue.poll();\n+        if (builder == null)\n+            builder = new Builder();\n+        Object[] btree = builder.build(source, size);\n+        queue.add(builder);\n+        return btree;\n     }\n \n     /**\n@@ -154,7 +162,13 @@\n         if (!updateWithIsSorted)\n             updateWith = sorted(updateWith, comparator, updateWith.size());\n \n-        return modifier.get().update(btree, comparator, updateWith, updateF);\n+        Queue<Builder> queue = modifier.get();\n+        Builder builder = queue.poll();\n+        if (builder == null)\n+            builder = new Builder();\n+        btree = builder.update(btree, comparator, updateWith, updateF);\n+        queue.add(builder);\n+        return btree;\n     }\n \n     /**\n@@ -319,12 +333,12 @@ public int compareTo(Object o)\n         }\n     };\n \n-    private static final ThreadLocal<Builder> modifier = new ThreadLocal<Builder>()\n+    private static final ThreadLocal<Queue<Builder>> modifier = new ThreadLocal<Queue<Builder>>()\n     {\n         @Override\n-        protected Builder initialValue()\n+        protected Queue<Builder> initialValue()\n         {\n-            return new Builder();\n+            return new ArrayDeque<>();\n         }\n     };\n ", "filename": "src/java/org/apache/cassandra/utils/btree/BTree.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/5fe0600744cba01d8e238746c0bd363f2059320c", "parent": "https://github.com/apache/cassandra/commit/ff2a92c13c822e3220fe980323590bb4032f32bc", "message": "fix NPE\npatch by Benedict Elliott Smith; reviewed by jbellis for CASSANDRA-6671", "bug_id": "cassandra_74", "file": [{"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/5fe0600744cba01d8e238746c0bd363f2059320c/src/java/org/apache/cassandra/db/DataTracker.java", "blob_url": "https://github.com/apache/cassandra/blob/5fe0600744cba01d8e238746c0bd363f2059320c/src/java/org/apache/cassandra/db/DataTracker.java", "sha": "d90c0ffa4d4844e5d276c98ece508b5624ab20db", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/DataTracker.java?ref=5fe0600744cba01d8e238746c0bd363f2059320c", "patch": "@@ -437,11 +437,12 @@ public long estimatedKeys()\n     public int getMeanColumns()\n     {\n         long sum = 0;\n-        int count = 0;\n+        long count = 0;\n         for (SSTableReader sstable : getSSTables())\n         {\n-            sum += sstable.getEstimatedColumnCount().mean();\n-            count++;\n+            long n = sstable.getEstimatedColumnCount().count();\n+            sum += sstable.getEstimatedColumnCount().mean() * n;\n+            count += n;\n         }\n         return count > 0 ? (int) (sum / count) : 0;\n     }", "filename": "src/java/org/apache/cassandra/db/DataTracker.java"}, {"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/5fe0600744cba01d8e238746c0bd363f2059320c/src/java/org/apache/cassandra/utils/concurrent/WaitQueue.java", "blob_url": "https://github.com/apache/cassandra/blob/5fe0600744cba01d8e238746c0bd363f2059320c/src/java/org/apache/cassandra/utils/concurrent/WaitQueue.java", "sha": "4f3747d3c95404e8bf675348f442e7974d3b484f", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/utils/concurrent/WaitQueue.java?ref=5fe0600744cba01d8e238746c0bd363f2059320c", "patch": "@@ -111,15 +111,15 @@ public boolean signal()\n      */\n     public void signalAll()\n     {\n-        if (!hasWaiters())\n+        RegisteredSignal last = queue.peekLast();\n+        if (last == null)\n             return;\n         List<Thread> woke = null;\n         if (logger.isTraceEnabled())\n             woke = new ArrayList<>();\n         long start = System.nanoTime();\n         // we wake up only a snapshot of the queue, to avoid a race where the condition is not met and the woken thread\n         // immediately waits on the queue again\n-        RegisteredSignal last = queue.getLast();\n         Iterator<RegisteredSignal> iter = queue.iterator();\n         while (iter.hasNext())\n         {", "filename": "src/java/org/apache/cassandra/utils/concurrent/WaitQueue.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/dbb36a476bc502708ee7443e41bba570bfd5633a", "parent": "https://github.com/apache/cassandra/commit/a11bc78656dd4740960c0a1eb6265f910337a16b", "message": "Avoid NPE when generating scrub error message\n\nPatch by Stefania Alborghetti; reviewed by Tyler Hobbs for\nCASSANDRA-9290", "bug_id": "cassandra_75", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/dbb36a476bc502708ee7443e41bba570bfd5633a/src/java/org/apache/cassandra/db/compaction/Scrubber.java", "blob_url": "https://github.com/apache/cassandra/blob/dbb36a476bc502708ee7443e41bba570bfd5633a/src/java/org/apache/cassandra/db/compaction/Scrubber.java", "sha": "f04df27b562e846b211d09ca7a755c3285ddb5f3", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/compaction/Scrubber.java?ref=dbb36a476bc502708ee7443e41bba570bfd5633a", "patch": "@@ -187,7 +187,7 @@ public void scrub()\n                     if (key == null)\n                         throw new IOError(new IOException(\"Unable to read row key from data file\"));\n \n-                    if (!key.key.equals(currentIndexKey))\n+                    if (currentIndexKey != null && !key.key.equals(currentIndexKey))\n                     {\n                         throw new IOError(new IOException(String.format(\"Key from data file (%s) does not match key from index file (%s)\",\n                                 ByteBufferUtil.bytesToHex(key.key), ByteBufferUtil.bytesToHex(currentIndexKey))));", "filename": "src/java/org/apache/cassandra/db/compaction/Scrubber.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/1240c9bd228da81c4052eade48e40bc34ec1d34d", "parent": "https://github.com/apache/cassandra/commit/93da683e0c835eb7e6cd28a03561c11f90435bb0", "message": "Fix potential NPE while loading paxos state\n\npatch by slebresne; reviewed by jbellis for CASSANDRA-6211", "bug_id": "cassandra_76", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/1240c9bd228da81c4052eade48e40bc34ec1d34d/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/1240c9bd228da81c4052eade48e40bc34ec1d34d/CHANGES.txt", "sha": "1df6ade07568945b893a3bd7de5eac63d02fd33a", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=1240c9bd228da81c4052eade48e40bc34ec1d34d", "patch": "@@ -1,5 +1,6 @@\n 2.0.3\n  * Reject bootstrapping if the node already exists in gossip (CASSANDRA-5571)\n+ * Fix NPE while loading paxos state (CASSANDRA-6211)\n Merged from 1.2:\n  * Fix altering column types (CASSANDRA-6185)\n  * cqlsh: fix CREATE/ALTER WITH completion (CASSANDRA-6196)", "filename": "CHANGES.txt"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/1240c9bd228da81c4052eade48e40bc34ec1d34d/src/java/org/apache/cassandra/db/SystemKeyspace.java", "blob_url": "https://github.com/apache/cassandra/blob/1240c9bd228da81c4052eade48e40bc34ec1d34d/src/java/org/apache/cassandra/db/SystemKeyspace.java", "sha": "1917bc8741ad70f794cfeb938b8c44a5175157de", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/SystemKeyspace.java?ref=1240c9bd228da81c4052eade48e40bc34ec1d34d", "patch": "@@ -844,7 +844,9 @@ public static PaxosState loadPaxosState(ByteBuffer key, CFMetaData metadata)\n         if (results.isEmpty())\n             return new PaxosState(key, metadata);\n         UntypedResultSet.Row row = results.one();\n-        Commit promised = new Commit(key, row.getUUID(\"in_progress_ballot\"), EmptyColumns.factory.create(metadata));\n+        Commit promised = row.has(\"in_progress_ballot\")\n+                        ? new Commit(key, row.getUUID(\"in_progress_ballot\"), EmptyColumns.factory.create(metadata))\n+                        : Commit.emptyCommit(key, metadata);\n         // either we have both a recently accepted ballot and update or we have neither\n         Commit accepted = row.has(\"proposal\")\n                         ? new Commit(key, row.getUUID(\"proposal_ballot\"), ColumnFamily.fromBytes(row.getBytes(\"proposal\")))", "filename": "src/java/org/apache/cassandra/db/SystemKeyspace.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/59bf44dd94939cea513a74250f6002357d1f9f2c", "parent": "https://github.com/apache/cassandra/commit/12413ad1f848aacb3314d279fb4db7e2b293d066", "message": "Fix harmless NPE in MM/HHOM\nPatch by brandonwilliams, reviewed by Tyler Hobbs for CASSANDRA-5185", "bug_id": "cassandra_77", "file": [{"additions": 6, "raw_url": "https://github.com/apache/cassandra/raw/59bf44dd94939cea513a74250f6002357d1f9f2c/src/java/org/apache/cassandra/db/HintedHandOffManager.java", "blob_url": "https://github.com/apache/cassandra/blob/59bf44dd94939cea513a74250f6002357d1f9f2c/src/java/org/apache/cassandra/db/HintedHandOffManager.java", "sha": "ede49e4a6158d7570b2ee0a42bb1deb8aa803f44", "changes": 8, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/HintedHandOffManager.java?ref=59bf44dd94939cea513a74250f6002357d1f9f2c", "patch": "@@ -209,7 +209,7 @@ private int waitForSchemaAgreement(InetAddress endpoint) throws TimeoutException\n         Gossiper gossiper = Gossiper.instance;\n         int waited = 0;\n         // first, wait for schema to be gossiped.\n-        while (gossiper.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.SCHEMA) == null)\n+        while (gossiper.getEndpointStateForEndpoint(endpoint) != null && gossiper.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.SCHEMA) == null)\n         {\n             try\n             {\n@@ -223,12 +223,14 @@ private int waitForSchemaAgreement(InetAddress endpoint) throws TimeoutException\n             if (waited > 2 * StorageService.RING_DELAY)\n                 throw new TimeoutException(\"Didin't receive gossiped schema from \" + endpoint + \" in \" + 2 * StorageService.RING_DELAY + \"ms\");\n         }\n+        if (gossiper.getEndpointStateForEndpoint(endpoint) == null)\n+            throw new TimeoutException(\"Node \" + endpoint + \" vanished while waiting for agreement\");\n         waited = 0;\n         // then wait for the correct schema version.\n         // usually we use DD.getDefsVersion, which checks the local schema uuid as stored in the system table.\n         // here we check the one in gossip instead; this serves as a canary to warn us if we introduce a bug that\n         // causes the two to diverge (see CASSANDRA-2946)\n-        while (!gossiper.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.SCHEMA).value.equals(\n+        while (gossiper.getEndpointStateForEndpoint(endpoint) != null && !gossiper.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.SCHEMA).value.equals(\n                 gossiper.getEndpointStateForEndpoint(FBUtilities.getBroadcastAddress()).getApplicationState(ApplicationState.SCHEMA).value))\n         {\n             try\n@@ -243,6 +245,8 @@ private int waitForSchemaAgreement(InetAddress endpoint) throws TimeoutException\n             if (waited > 2 * StorageService.RING_DELAY)\n                 throw new TimeoutException(\"Could not reach schema agreement with \" + endpoint + \" in \" + 2 * StorageService.RING_DELAY + \"ms\");\n         }\n+        if (gossiper.getEndpointStateForEndpoint(endpoint) == null)\n+            throw new TimeoutException(\"Node \" + endpoint + \" vanished while waiting for agreement\");\n         logger.debug(\"schema for {} matches local schema\", endpoint);\n         return waited;\n     }", "filename": "src/java/org/apache/cassandra/db/HintedHandOffManager.java"}, {"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/59bf44dd94939cea513a74250f6002357d1f9f2c/src/java/org/apache/cassandra/service/MigrationManager.java", "blob_url": "https://github.com/apache/cassandra/blob/59bf44dd94939cea513a74250f6002357d1f9f2c/src/java/org/apache/cassandra/service/MigrationManager.java", "sha": "3ede35e72215c561cd6375294ccfb011aa598462", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/MigrationManager.java?ref=59bf44dd94939cea513a74250f6002357d1f9f2c", "patch": "@@ -127,7 +127,10 @@ private static void maybeScheduleSchemaPull(final UUID theirVersion, final InetA\n                 public void run()\n                 {\n                     // grab the latest version of the schema since it may have changed again since the initial scheduling\n-                    VersionedValue value = Gossiper.instance.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.SCHEMA);\n+                    EndpointState epState = Gossiper.instance.getEndpointStateForEndpoint(endpoint);\n+                    if (epState == null)\n+                        return;\n+                    VersionedValue value = epState.getApplicationState(ApplicationState.SCHEMA);\n                     UUID currentVersion = UUID.fromString(value.value);\n                     if (Schema.instance.getVersion().equals(currentVersion))\n                         return;", "filename": "src/java/org/apache/cassandra/service/MigrationManager.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/58eebc9a977ef7dfafe6ea568cece963191598ce", "parent": "https://github.com/apache/cassandra/commit/65b1e36c7853694275721c6bac1e705e61ee79ef", "message": "Fix potential NPE in 2ndary indexes\n\npatch by slebresne; reviewed by jbellis for CASSANDRA-6098", "bug_id": "cassandra_78", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/58eebc9a977ef7dfafe6ea568cece963191598ce/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/58eebc9a977ef7dfafe6ea568cece963191598ce/CHANGES.txt", "sha": "0fa788aa0df2b8f4bef5f5ed0cc892f53c23a589", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=58eebc9a977ef7dfafe6ea568cece963191598ce", "patch": "@@ -10,6 +10,7 @@\n    leveled manifest (CASSANDRA-6093)\n  * make sequential nodetool repair the default (CASSANDRA-5950)\n  * Add more hooks for compaction strategy implementations (CASSANDRA-6111)\n+ * Fix potential NPE on composite 2ndary indexes (CASSANDRA-6098)\n Merged from 1.2:\n  * lock access to TM.endpointToHostIdMap (CASSANDRA-6103)\n  * Allow estimated memtable size to exceed slab allocator size (CASSANDRA-6078)", "filename": "CHANGES.txt"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/58eebc9a977ef7dfafe6ea568cece963191598ce/src/java/org/apache/cassandra/db/index/composites/CompositesIndexOnClusteringKey.java", "blob_url": "https://github.com/apache/cassandra/blob/58eebc9a977ef7dfafe6ea568cece963191598ce/src/java/org/apache/cassandra/db/index/composites/CompositesIndexOnClusteringKey.java", "sha": "954f3809ec1f7aea5dc128511146ec0bd0b01e20", "changes": 3, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/index/composites/CompositesIndexOnClusteringKey.java?ref=58eebc9a977ef7dfafe6ea568cece963191598ce", "patch": "@@ -110,7 +110,6 @@ public boolean indexes(ByteBuffer name)\n \n     public boolean isStale(IndexedEntry entry, ColumnFamily data, long now)\n     {\n-        return data == null || data.hasOnlyTombstones(now);\n+        return data.hasOnlyTombstones(now);\n     }\n }\n-", "filename": "src/java/org/apache/cassandra/db/index/composites/CompositesIndexOnClusteringKey.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/58eebc9a977ef7dfafe6ea568cece963191598ce/src/java/org/apache/cassandra/db/index/composites/CompositesIndexOnPartitionKey.java", "blob_url": "https://github.com/apache/cassandra/blob/58eebc9a977ef7dfafe6ea568cece963191598ce/src/java/org/apache/cassandra/db/index/composites/CompositesIndexOnPartitionKey.java", "sha": "4e2c5809278e5369862ebc777314bc1c32e25fcc", "changes": 4, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/index/composites/CompositesIndexOnPartitionKey.java?ref=58eebc9a977ef7dfafe6ea568cece963191598ce", "patch": "@@ -97,8 +97,6 @@ public boolean indexes(ByteBuffer name)\n \n     public boolean isStale(IndexedEntry entry, ColumnFamily data, long now)\n     {\n-        return data == null || data.hasOnlyTombstones(now);\n+        return data.hasOnlyTombstones(now);\n     }\n }\n-\n-", "filename": "src/java/org/apache/cassandra/db/index/composites/CompositesIndexOnPartitionKey.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/58eebc9a977ef7dfafe6ea568cece963191598ce/src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java", "blob_url": "https://github.com/apache/cassandra/blob/58eebc9a977ef7dfafe6ea568cece963191598ce/src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java", "sha": "0242fd2945af616e6c0f69c50dd90b85cff5f703", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java?ref=58eebc9a977ef7dfafe6ea568cece963191598ce", "patch": "@@ -240,7 +240,7 @@ else if (!currentKey.equals(dk))\n                                                                            Integer.MAX_VALUE,\n                                                                            baseCfs.metadata.clusteringKeyColumns().size());\n                         ColumnFamily newData = baseCfs.getColumnFamily(new QueryFilter(dk, baseCfs.name, dataFilter, filter.timestamp));\n-                        if (index.isStale(entry, newData, filter.timestamp))\n+                        if (newData == null || index.isStale(entry, newData, filter.timestamp))\n                         {\n                             index.delete(entry);\n                             continue;", "filename": "src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java"}, {"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/58eebc9a977ef7dfafe6ea568cece963191598ce/test/unit/org/apache/cassandra/SchemaLoader.java", "blob_url": "https://github.com/apache/cassandra/blob/58eebc9a977ef7dfafe6ea568cece963191598ce/test/unit/org/apache/cassandra/SchemaLoader.java", "sha": "55cd329676501af01d511810b839112ecbe23d5d", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/SchemaLoader.java?ref=58eebc9a977ef7dfafe6ea568cece963191598ce", "patch": "@@ -222,7 +222,8 @@ public static void stopGossiper()\n                                            superCFMD(ks2, \"Super3\", bytes),\n                                            superCFMD(ks2, \"Super4\", TimeUUIDType.instance),\n                                            indexCFMD(ks2, \"Indexed1\", true),\n-                                           compositeIndexCFMD(ks2, \"Indexed2\", true, withOldCfIds)));\n+                                           compositeIndexCFMD(ks2, \"Indexed2\", true, withOldCfIds),\n+                                           compositeIndexCFMD(ks2, \"Indexed3\", true, withOldCfIds).gcGraceSeconds(0)));\n \n         // Keyspace 3\n         schema.add(KSMetaData.testMetadata(ks3,", "filename": "test/unit/org/apache/cassandra/SchemaLoader.java"}, {"additions": 48, "raw_url": "https://github.com/apache/cassandra/raw/58eebc9a977ef7dfafe6ea568cece963191598ce/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java", "blob_url": "https://github.com/apache/cassandra/blob/58eebc9a977ef7dfafe6ea568cece963191598ce/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java", "sha": "f01745311ba692ff93289bda1871a72e9820f9c2", "changes": 48, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java?ref=58eebc9a977ef7dfafe6ea568cece963191598ce", "patch": "@@ -554,6 +554,54 @@ public void testDeleteOfInconsistentValuesFromCompositeIndex() throws Exception\n         assertEquals(0, rows.size());\n     }\n \n+    // See CASSANDRA-6098\n+    @Test\n+    public void testDeleteCompositeIndex() throws Exception\n+    {\n+        String keySpace = \"Keyspace2\";\n+        String cfName = \"Indexed3\"; // has gcGrace 0\n+\n+        Keyspace keyspace = Keyspace.open(keySpace);\n+        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfName);\n+        cfs.truncateBlocking();\n+\n+        ByteBuffer rowKey = ByteBufferUtil.bytes(\"k1\");\n+        ByteBuffer clusterKey = ByteBufferUtil.bytes(\"ck1\");\n+        ByteBuffer colName = ByteBufferUtil.bytes(\"col1\");\n+        CompositeType baseComparator = (CompositeType)cfs.getComparator();\n+        CompositeType.Builder builder = baseComparator.builder();\n+        builder.add(clusterKey);\n+        builder.add(colName);\n+        ByteBuffer compositeName = builder.build();\n+\n+        ByteBuffer val1 = ByteBufferUtil.bytes(\"v2\");\n+\n+        // Insert indexed value.\n+        RowMutation rm;\n+        rm = new RowMutation(keySpace, rowKey);\n+        rm.add(cfName, compositeName, val1, 0);\n+        rm.apply();\n+\n+        // Now delete the value and flush too.\n+        rm = new RowMutation(keySpace, rowKey);\n+        rm.delete(cfName, 1);\n+        rm.apply();\n+\n+        // We want the data to be gcable, but even if gcGrace == 0, we still need to wait 1 second\n+        // since we won't gc on a tie.\n+        try { Thread.sleep(1000); } catch (Exception e) {}\n+\n+        // Read the index and we check we do get no value (and no NPE)\n+        // Note: the index will return the entry because it hasn't been deleted (we\n+        // haven't read yet nor compacted) but the data read itself will return null\n+        IndexExpression expr = new IndexExpression(colName, IndexOperator.EQ, val1);\n+        List<IndexExpression> clause = Arrays.asList(expr);\n+        IDiskAtomFilter filter = new IdentityQueryFilter();\n+        Range<RowPosition> range = Util.range(\"\", \"\");\n+        List<Row> rows = keyspace.getColumnFamilyStore(cfName).search(range, clause, filter, 100);\n+        assertEquals(0, rows.size());\n+    }\n+\n     // See CASSANDRA-2628\n     @Test\n     public void testIndexScanWithLimitOne() throws IOException", "filename": "test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/37eb2a0e29c22a1b2f033e8191b5808a6f7b0d3f", "parent": "https://github.com/apache/cassandra/commit/5fd4a01165586f1c4e273e08595238bd1bc2d5ea", "message": "Fix NPE in nodetool getendpoints with bad ks/cf\n\nPatch by Stefania Alborghetti; reviewed by Tyler Hobbs for\nCASSANDRA-8950", "bug_id": "cassandra_79", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/37eb2a0e29c22a1b2f033e8191b5808a6f7b0d3f/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/37eb2a0e29c22a1b2f033e8191b5808a6f7b0d3f/CHANGES.txt", "sha": "25fbd74468e0bebda489643ab77547613d1d6b85", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=37eb2a0e29c22a1b2f033e8191b5808a6f7b0d3f", "patch": "@@ -1,4 +1,6 @@\n 2.0.14:\n+ * Fix NullPointerException when nodetool getendpoints is run\n+   against invalid keyspaces or tables (CASSANDRA-8950)\n  * Allow specifying the tmp dir (CASSANDRA-7712)\n  * Improve compaction estimated tasks estimation (CASSANDRA-8904)\n  * Fix duplicate up/down messages sent to native clients (CASSANDRA-7816)", "filename": "CHANGES.txt"}, {"additions": 8, "raw_url": "https://github.com/apache/cassandra/raw/37eb2a0e29c22a1b2f033e8191b5808a6f7b0d3f/src/java/org/apache/cassandra/service/StorageService.java", "blob_url": "https://github.com/apache/cassandra/blob/37eb2a0e29c22a1b2f033e8191b5808a6f7b0d3f/src/java/org/apache/cassandra/service/StorageService.java", "sha": "622380e88bb35660ea17d3293479267329cb7172", "changes": 9, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=37eb2a0e29c22a1b2f033e8191b5808a6f7b0d3f", "patch": "@@ -2778,7 +2778,14 @@ public void forceTerminateAllRepairSessions() {\n      */\n     public List<InetAddress> getNaturalEndpoints(String keyspaceName, String cf, String key)\n     {\n-        CFMetaData cfMetaData = Schema.instance.getKSMetaData(keyspaceName).cfMetaData().get(cf);\n+        KSMetaData ksMetaData = Schema.instance.getKSMetaData(keyspaceName);\n+        if (ksMetaData == null)\n+            throw new IllegalArgumentException(\"Unknown keyspace '\" + keyspaceName + \"'\");\n+\n+        CFMetaData cfMetaData = ksMetaData.cfMetaData().get(cf);\n+        if (cfMetaData == null)\n+            throw new IllegalArgumentException(\"Unknown table '\" + cf + \"' in keyspace '\" + keyspaceName + \"'\");\n+\n         return getNaturalEndpoints(keyspaceName, getPartitioner().getToken(cfMetaData.getKeyValidator().fromString(key)));\n     }\n ", "filename": "src/java/org/apache/cassandra/service/StorageService.java"}, {"additions": 9, "raw_url": "https://github.com/apache/cassandra/raw/37eb2a0e29c22a1b2f033e8191b5808a6f7b0d3f/src/java/org/apache/cassandra/tools/NodeCmd.java", "blob_url": "https://github.com/apache/cassandra/blob/37eb2a0e29c22a1b2f033e8191b5808a6f7b0d3f/src/java/org/apache/cassandra/tools/NodeCmd.java", "sha": "bc5410f90921ee24d0c2a77285d5ec2097f2e3ff", "changes": 13, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/tools/NodeCmd.java?ref=37eb2a0e29c22a1b2f033e8191b5808a6f7b0d3f", "patch": "@@ -1182,11 +1182,16 @@ private void printProxyHistograms(PrintStream output, boolean compactFormat)\n \n     private void printEndPoints(String keySpace, String cf, String key, PrintStream output)\n     {\n-        List<InetAddress> endpoints = this.probe.getEndpoints(keySpace, cf, key);\n-\n-        for (InetAddress anEndpoint : endpoints)\n+        try\n+        {\n+            List<InetAddress> endpoints = probe.getEndpoints(keySpace, cf, key);\n+            for (InetAddress anEndpoint : endpoints)\n+               output.println(anEndpoint.getHostAddress());\n+        }\n+        catch (IllegalArgumentException ex)\n         {\n-           output.println(anEndpoint.getHostAddress());\n+            output.println(ex.getMessage());\n+            probe.failed();\n         }\n     }\n ", "filename": "src/java/org/apache/cassandra/tools/NodeCmd.java"}, {"additions": 5, "raw_url": "https://github.com/apache/cassandra/raw/37eb2a0e29c22a1b2f033e8191b5808a6f7b0d3f/src/java/org/apache/cassandra/tools/NodeProbe.java", "blob_url": "https://github.com/apache/cassandra/blob/37eb2a0e29c22a1b2f033e8191b5808a6f7b0d3f/src/java/org/apache/cassandra/tools/NodeProbe.java", "sha": "d66d12d75cc9dbb33e7b50553c6a2938ad492120", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/tools/NodeProbe.java?ref=37eb2a0e29c22a1b2f033e8191b5808a6f7b0d3f", "patch": "@@ -907,6 +907,11 @@ public void resetLocalSchema() throws IOException\n         ssProxy.resetLocalSchema();\n     }\n \n+    public void failed()\n+    {\n+        failed = true;\n+    }\n+\n     public boolean isFailed()\n     {\n         return failed;", "filename": "src/java/org/apache/cassandra/tools/NodeProbe.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/56b5c6f3024625b90f7a1deef1def7a7002b6e28", "parent": "https://github.com/apache/cassandra/commit/765d1e97ff7dbe50ce13297993720147ddb6eca0", "message": "Fix NPE in sstablesplit\n\npatch by slebresne; reviewed by iamaleksey for CASSANDRA-6027", "bug_id": "cassandra_80", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/56b5c6f3024625b90f7a1deef1def7a7002b6e28/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/56b5c6f3024625b90f7a1deef1def7a7002b6e28/CHANGES.txt", "sha": "f48fb5c45ed66bb3d2eaad7b28a8b7eb2d5237ce", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=56b5c6f3024625b90f7a1deef1def7a7002b6e28", "patch": "@@ -18,6 +18,7 @@\n  * Fix paxos bugs (CASSANDRA-6012, 6013, 6023)\n  * Fix paged ranges with multiple replicas (CASSANDRA-6004)\n  * Fix potential AssertionError during tracing (CASSANDRA-6041)\n+ * Fix NPE in sstablesplit (CASSANDRA-6027)\n Merged from 1.2:\n 1.2.10\n  * Fix possible divide-by-zero in HHOM (CASSANDRA-5990)", "filename": "CHANGES.txt"}, {"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/56b5c6f3024625b90f7a1deef1def7a7002b6e28/src/java/org/apache/cassandra/db/compaction/CompactionController.java", "blob_url": "https://github.com/apache/cassandra/blob/56b5c6f3024625b90f7a1deef1def7a7002b6e28/src/java/org/apache/cassandra/db/compaction/CompactionController.java", "sha": "95528954f096320c5d2b64cf81404df24a830cc3", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/compaction/CompactionController.java?ref=56b5c6f3024625b90f7a1deef1def7a7002b6e28", "patch": "@@ -100,6 +100,10 @@ public CompactionController(ColumnFamilyStore cfs, Set<SSTableReader> compacting\n     public static Set<SSTableReader> getFullyExpiredSSTables(ColumnFamilyStore cfStore, Set<SSTableReader> compacting, Set<SSTableReader> overlapping, int gcBefore)\n     {\n         logger.debug(\"Checking droppable sstables in {}\", cfStore);\n+\n+        if (compacting == null)\n+            return Collections.<SSTableReader>emptySet();\n+\n         List<SSTableReader> candidates = new ArrayList<SSTableReader>();\n \n         long minTimestamp = Integer.MAX_VALUE;", "filename": "src/java/org/apache/cassandra/db/compaction/CompactionController.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/0804b76100c8e01df46918818a31fb496ed79368", "parent": "https://github.com/apache/cassandra/commit/742e5baf6311a1141b42bec0b3c3dc2ff19fa376", "message": "Fix NPE during sstablesplit\n\npatch by slebresne; reviewed by brandon.williams for CASSANDRA-6026", "bug_id": "cassandra_81", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/0804b76100c8e01df46918818a31fb496ed79368/src/java/org/apache/cassandra/io/sstable/SSTableDeletingTask.java", "blob_url": "https://github.com/apache/cassandra/blob/0804b76100c8e01df46918818a31fb496ed79368/src/java/org/apache/cassandra/io/sstable/SSTableDeletingTask.java", "sha": "d02efd8cf7f354a0365ca15087972c3ef7521296", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/SSTableDeletingTask.java?ref=0804b76100c8e01df46918818a31fb496ed79368", "patch": "@@ -67,7 +67,8 @@ public void schedule()\n \n     public void run()\n     {\n-        tracker.notifyDeleting(referent);\n+        if (tracker != null)\n+            tracker.notifyDeleting(referent);\n \n         // If we can't successfully delete the DATA component, set the task to be retried later: see above\n         File datafile = new File(desc.filenameFor(Component.DATA));", "filename": "src/java/org/apache/cassandra/io/sstable/SSTableDeletingTask.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/89cdfd8e075d8883d776d7f881735f1c25e3cb54", "parent": "https://github.com/apache/cassandra/commit/c0f159b82a9d805990818f60735623e2a7d8c517", "message": "DatabaseDescriptor throws NPE when rpc_interface is used\n\npatch by Ariel Weisberg; reviewed by Carl Yeksigian for CASSANDRA-8839", "bug_id": "cassandra_82", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/89cdfd8e075d8883d776d7f881735f1c25e3cb54/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/89cdfd8e075d8883d776d7f881735f1c25e3cb54/CHANGES.txt", "sha": "30bf698e3d564349cb687c0a0acabb47ee151ea3", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=89cdfd8e075d8883d776d7f881735f1c25e3cb54", "patch": "@@ -1,4 +1,5 @@\n 2.1.4\n+ * DatabaseDescriptor throws NPE when rpc_interface is used (CASSANDRA-8839)\n  * Don't check if an sstable is live for offline compactions (CASSANDRA-8841)\n  * Don't set clientMode in SSTableLoader (CASSANDRA-8238)\n  * Fix SSTableRewriter with disabled early open (CASSANDRA-8535)", "filename": "CHANGES.txt"}, {"additions": 12, "raw_url": "https://github.com/apache/cassandra/raw/89cdfd8e075d8883d776d7f881735f1c25e3cb54/conf/cassandra.yaml", "blob_url": "https://github.com/apache/cassandra/blob/89cdfd8e075d8883d776d7f881735f1c25e3cb54/conf/cassandra.yaml", "sha": "2b43ba73b414e041b07f394c191ad7ec604095e9", "changes": 12, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/conf/cassandra.yaml?ref=89cdfd8e075d8883d776d7f881735f1c25e3cb54", "patch": "@@ -370,8 +370,14 @@ ssl_storage_port: 7001\n # address associated with the hostname (it might not be).\n #\n # Setting listen_address to 0.0.0.0 is always wrong.\n+#\n+# If you choose to specify the interface by name and the interface has an ipv4 and an ipv6 address\n+# you can specify which should be chosen using listen_interface_prefer_ipv6. If false the first ipv4\n+# address will be used. If true the first ipv6 address will be used. Defaults to false preferring\n+# ipv4. If there is only one address it will be selected regardless of ipv4/ipv6.\n listen_address: localhost\n # listen_interface: eth0\n+# listen_interface_prefer_ipv6: false\n \n # Address to broadcast to other Cassandra nodes\n # Leaving this blank will set it to the same value as listen_address\n@@ -422,8 +428,14 @@ start_rpc: true\n # set broadcast_rpc_address to a value other than 0.0.0.0.\n #\n # For security reasons, you should not expose this port to the internet.  Firewall it if needed.\n+#\n+# If you choose to specify the interface by name and the interface has an ipv4 and an ipv6 address\n+# you can specify which should be chosen using rpc_interface_prefer_ipv6. If false the first ipv4\n+# address will be used. If true the first ipv6 address will be used. Defaults to false preferring\n+# ipv4. If there is only one address it will be selected regardless of ipv4/ipv6.\n rpc_address: localhost\n # rpc_interface: eth1\n+# rpc_interface_prefer_ipv6: false\n \n # port for Thrift to listen for clients on\n rpc_port: 9160", "filename": "conf/cassandra.yaml"}, {"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/89cdfd8e075d8883d776d7f881735f1c25e3cb54/src/java/org/apache/cassandra/config/Config.java", "blob_url": "https://github.com/apache/cassandra/blob/89cdfd8e075d8883d776d7f881735f1c25e3cb54/src/java/org/apache/cassandra/config/Config.java", "sha": "fbbd1dd696de816e24be87c637986556ef39fe7b", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/Config.java?ref=89cdfd8e075d8883d776d7f881735f1c25e3cb54", "patch": "@@ -34,7 +34,7 @@\n \n /**\n  * A class that contains configuration properties for the cassandra node it runs within.\n- * \n+ *\n  * Properties declared as volatile can be mutated via JMX.\n  */\n public class Config\n@@ -101,12 +101,14 @@\n     public Integer ssl_storage_port = 7001;\n     public String listen_address;\n     public String listen_interface;\n+    public Boolean listen_interface_prefer_ipv6 = false;\n     public String broadcast_address;\n     public String internode_authenticator;\n \n     public Boolean start_rpc = true;\n     public String rpc_address;\n     public String rpc_interface;\n+    public Boolean rpc_interface_prefer_ipv6 = false;\n     public String broadcast_rpc_address;\n     public Integer rpc_port = 9160;\n     public Integer rpc_listen_backlog = 50;\n@@ -155,7 +157,7 @@\n     public Double commitlog_sync_batch_window_in_ms;\n     public Integer commitlog_sync_period_in_ms;\n     public int commitlog_segment_size_in_mb = 32;\n- \n+\n     @Deprecated\n     public int commitlog_periodic_queue_size = -1;\n ", "filename": "src/java/org/apache/cassandra/config/Config.java"}, {"additions": 114, "raw_url": "https://github.com/apache/cassandra/raw/89cdfd8e075d8883d776d7f881735f1c25e3cb54/src/java/org/apache/cassandra/config/DatabaseDescriptor.java", "blob_url": "https://github.com/apache/cassandra/blob/89cdfd8e075d8883d776d7f881735f1c25e3cb54/src/java/org/apache/cassandra/config/DatabaseDescriptor.java", "sha": "65cec9c211b8b1fbdb44f3b6ae732e6417271d72", "changes": 205, "status": "modified", "deletions": 91, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=89cdfd8e075d8883d776d7f881735f1c25e3cb54", "patch": "@@ -20,6 +20,8 @@\n import java.io.File;\n import java.io.FileFilter;\n import java.io.IOException;\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n import java.net.InetAddress;\n import java.net.NetworkInterface;\n import java.net.SocketException;\n@@ -38,6 +40,7 @@\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.primitives.Longs;\n+\n import org.apache.cassandra.thrift.ThriftServer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -158,7 +161,7 @@ public static Config loadConfig() throws ConfigurationException\n         return loader.loadConfig();\n     }\n \n-    private static InetAddress getNetworkInterfaceAddress(String intf, String configName) throws ConfigurationException\n+    private static InetAddress getNetworkInterfaceAddress(String intf, String configName, boolean preferIPv6) throws ConfigurationException\n     {\n         try\n         {\n@@ -168,9 +171,18 @@ private static InetAddress getNetworkInterfaceAddress(String intf, String config\n             Enumeration<InetAddress> addrs = ni.getInetAddresses();\n             if (!addrs.hasMoreElements())\n                 throw new ConfigurationException(\"Configured \" + configName + \" \\\"\" + intf + \"\\\" was found, but had no addresses\");\n-            InetAddress retval = listenAddress = addrs.nextElement();\n-            if (addrs.hasMoreElements())\n-                throw new ConfigurationException(\"Configured \" + configName + \" \\\"\" + intf + \"\\\" can't have more than one address\");\n+\n+            /*\n+             * Try to return the first address of the preferred type, otherwise return the first address\n+             */\n+            InetAddress retval = null;\n+            while (addrs.hasMoreElements())\n+            {\n+                InetAddress temp = addrs.nextElement();\n+                if (preferIPv6 && temp.getClass() == Inet6Address.class) return temp;\n+                if (!preferIPv6 && temp.getClass() == Inet4Address.class) return temp;\n+                if (retval == null) retval = temp;\n+            }\n             return retval;\n         }\n         catch (SocketException e)\n@@ -179,6 +191,103 @@ private static InetAddress getNetworkInterfaceAddress(String intf, String config\n         }\n     }\n \n+    @VisibleForTesting\n+    static void applyAddressConfig(Config config) throws ConfigurationException\n+    {\n+        listenAddress = null;\n+        rpcAddress = null;\n+        broadcastAddress = null;\n+        broadcastRpcAddress = null;\n+\n+        /* Local IP, hostname or interface to bind services to */\n+        if (config.listen_address != null && config.listen_interface != null)\n+        {\n+            throw new ConfigurationException(\"Set listen_address OR listen_interface, not both\");\n+        }\n+        else if (config.listen_address != null)\n+        {\n+            try\n+            {\n+                listenAddress = InetAddress.getByName(config.listen_address);\n+            }\n+            catch (UnknownHostException e)\n+            {\n+                throw new ConfigurationException(\"Unknown listen_address '\" + config.listen_address + \"'\");\n+            }\n+\n+            if (listenAddress.isAnyLocalAddress())\n+                throw new ConfigurationException(\"listen_address cannot be a wildcard address (\" + config.listen_address + \")!\");\n+        }\n+        else if (config.listen_interface != null)\n+        {\n+            listenAddress = getNetworkInterfaceAddress(config.listen_interface, \"listen_interface\", config.listen_interface_prefer_ipv6);\n+        }\n+\n+        /* Gossip Address to broadcast */\n+        if (config.broadcast_address != null)\n+        {\n+            try\n+            {\n+                broadcastAddress = InetAddress.getByName(config.broadcast_address);\n+            }\n+            catch (UnknownHostException e)\n+            {\n+                throw new ConfigurationException(\"Unknown broadcast_address '\" + config.broadcast_address + \"'\");\n+            }\n+\n+            if (broadcastAddress.isAnyLocalAddress())\n+                throw new ConfigurationException(\"broadcast_address cannot be a wildcard address (\" + config.broadcast_address + \")!\");\n+        }\n+\n+        /* Local IP, hostname or interface to bind RPC server to */\n+        if (config.rpc_address != null && config.rpc_interface != null)\n+        {\n+            throw new ConfigurationException(\"Set rpc_address OR rpc_interface, not both\");\n+        }\n+        else if (config.rpc_address != null)\n+        {\n+            try\n+            {\n+                rpcAddress = InetAddress.getByName(config.rpc_address);\n+            }\n+            catch (UnknownHostException e)\n+            {\n+                throw new ConfigurationException(\"Unknown host in rpc_address \" + config.rpc_address);\n+            }\n+        }\n+        else if (config.rpc_interface != null)\n+        {\n+            rpcAddress = getNetworkInterfaceAddress(config.rpc_interface, \"rpc_interface\", config.rpc_interface_prefer_ipv6);\n+        }\n+        else\n+        {\n+            rpcAddress = FBUtilities.getLocalAddress();\n+        }\n+\n+        /* RPC address to broadcast */\n+        if (config.broadcast_rpc_address != null)\n+        {\n+            try\n+            {\n+                broadcastRpcAddress = InetAddress.getByName(config.broadcast_rpc_address);\n+            }\n+            catch (UnknownHostException e)\n+            {\n+                throw new ConfigurationException(\"Unknown broadcast_rpc_address '\" + config.broadcast_rpc_address + \"'\");\n+            }\n+\n+            if (broadcastRpcAddress.isAnyLocalAddress())\n+                throw new ConfigurationException(\"broadcast_rpc_address cannot be a wildcard address (\" + config.broadcast_rpc_address + \")!\");\n+        }\n+        else\n+        {\n+            if (rpcAddress.isAnyLocalAddress())\n+                throw new ConfigurationException(\"If rpc_address is set to a wildcard address (\" + config.rpc_address + \"), then \" +\n+                                                 \"you must set broadcast_rpc_address to a value other than \" + config.rpc_address);\n+            broadcastRpcAddress = rpcAddress;\n+        }\n+    }\n+\n     private static void applyConfig(Config config) throws ConfigurationException\n     {\n         conf = config;\n@@ -326,93 +435,7 @@ else if (conf.disk_access_mode == Config.DiskAccessMode.mmap_index_only)\n         else\n             logger.info(\"Global memtable off-heap threshold is enabled at {}MB\", conf.memtable_offheap_space_in_mb);\n \n-        /* Local IP, hostname or interface to bind services to */\n-        if (conf.listen_address != null && conf.listen_interface != null)\n-        {\n-            throw new ConfigurationException(\"Set listen_address OR listen_interface, not both\");\n-        }\n-        else if (conf.listen_address != null)\n-        {\n-            try\n-            {\n-                listenAddress = InetAddress.getByName(conf.listen_address);\n-            }\n-            catch (UnknownHostException e)\n-            {\n-                throw new ConfigurationException(\"Unknown listen_address '\" + conf.listen_address + \"'\");\n-            }\n-\n-            if (listenAddress.isAnyLocalAddress())\n-                throw new ConfigurationException(\"listen_address cannot be a wildcard address (\" + conf.listen_address + \")!\");\n-        }\n-        else if (conf.listen_interface != null)\n-        {\n-            listenAddress = getNetworkInterfaceAddress(conf.listen_interface, \"listen_interface\");\n-        }\n-\n-        /* Gossip Address to broadcast */\n-        if (conf.broadcast_address != null)\n-        {\n-            try\n-            {\n-                broadcastAddress = InetAddress.getByName(conf.broadcast_address);\n-            }\n-            catch (UnknownHostException e)\n-            {\n-                throw new ConfigurationException(\"Unknown broadcast_address '\" + conf.broadcast_address + \"'\");\n-            }\n-\n-            if (broadcastAddress.isAnyLocalAddress())\n-                throw new ConfigurationException(\"broadcast_address cannot be a wildcard address (\" + conf.broadcast_address + \")!\");\n-        }\n-\n-        /* Local IP, hostname or interface to bind RPC server to */\n-        if (conf.rpc_address != null && conf.rpc_interface != null)\n-        {\n-            throw new ConfigurationException(\"Set rpc_address OR rpc_interface, not both\");\n-        }\n-        else if (conf.rpc_address != null)\n-        {\n-            try\n-            {\n-                rpcAddress = InetAddress.getByName(conf.rpc_address);\n-            }\n-            catch (UnknownHostException e)\n-            {\n-                throw new ConfigurationException(\"Unknown host in rpc_address \" + conf.rpc_address);\n-            }\n-        }\n-        else if (conf.rpc_interface != null)\n-        {\n-            listenAddress = getNetworkInterfaceAddress(conf.rpc_interface, \"rpc_interface\");\n-        }\n-        else\n-        {\n-            rpcAddress = FBUtilities.getLocalAddress();\n-        }\n-\n-        /* RPC address to broadcast */\n-        if (conf.broadcast_rpc_address != null)\n-        {\n-            try\n-            {\n-                broadcastRpcAddress = InetAddress.getByName(conf.broadcast_rpc_address);\n-            }\n-            catch (UnknownHostException e)\n-            {\n-                throw new ConfigurationException(\"Unknown broadcast_rpc_address '\" + conf.broadcast_rpc_address + \"'\");\n-            }\n-\n-            if (broadcastRpcAddress.isAnyLocalAddress())\n-                throw new ConfigurationException(\"broadcast_rpc_address cannot be a wildcard address (\" + conf.broadcast_rpc_address + \")!\");\n-        }\n-        else\n-        {\n-            if (rpcAddress.isAnyLocalAddress())\n-                throw new ConfigurationException(\"If rpc_address is set to a wildcard address (\" + conf.rpc_address + \"), then \" +\n-                                                 \"you must set broadcast_rpc_address to a value other than \" + conf.rpc_address);\n-            broadcastRpcAddress = rpcAddress;\n-        }\n+        applyAddressConfig(config);\n \n         if (conf.thrift_framed_transport_size_in_mb <= 0)\n             throw new ConfigurationException(\"thrift_framed_transport_size_in_mb must be positive\");", "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java"}, {"additions": 8, "raw_url": "https://github.com/apache/cassandra/raw/89cdfd8e075d8883d776d7f881735f1c25e3cb54/src/java/org/apache/cassandra/config/YamlConfigurationLoader.java", "blob_url": "https://github.com/apache/cassandra/blob/89cdfd8e075d8883d776d7f881735f1c25e3cb54/src/java/org/apache/cassandra/config/YamlConfigurationLoader.java", "sha": "0061926e2ef381adde5908d474de7887aa692edf", "changes": 16, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/YamlConfigurationLoader.java?ref=89cdfd8e075d8883d776d7f881735f1c25e3cb54", "patch": "@@ -50,7 +50,7 @@\n     /**\n      * Inspect the classpath to find storage configuration file\n      */\n-    private URL getStorageConfigURL() throws ConfigurationException\n+    static URL getStorageConfigURL() throws ConfigurationException\n     {\n         String configUrl = System.getProperty(\"cassandra.config\");\n         if (configUrl == null)\n@@ -100,7 +100,7 @@ public Config loadConfig(URL url) throws ConfigurationException\n                 // getStorageConfigURL should have ruled this out\n                 throw new AssertionError(e);\n             }\n-            \n+\n             logConfig(configBytes);\n             \n             org.yaml.snakeyaml.constructor.Constructor constructor = new org.yaml.snakeyaml.constructor.Constructor(Config.class);\n@@ -134,16 +134,16 @@ private void logConfig(byte[] configBytes)\n         }\n         logger.info(\"Node configuration:[\" + Joiner.on(\"; \").join(configMap.entrySet()) + \"]\");\n     }\n-    \n-    private static class MissingPropertiesChecker extends PropertyUtils \n+\n+    private static class MissingPropertiesChecker extends PropertyUtils\n     {\n         private final Set<String> missingProperties = new HashSet<>();\n-        \n+\n         public MissingPropertiesChecker()\n         {\n             setSkipMissingProperties(true);\n         }\n-        \n+\n         @Override\n         public Property getProperty(Class<? extends Object> type, String name) throws IntrospectionException\n         {\n@@ -154,10 +154,10 @@ public Property getProperty(Class<? extends Object> type, String name) throws In\n             }\n             return result;\n         }\n-        \n+\n         public void check() throws ConfigurationException\n         {\n-            if (!missingProperties.isEmpty()) \n+            if (!missingProperties.isEmpty())\n             {\n                 throw new ConfigurationException(\"Invalid yaml. Please remove properties \" + missingProperties + \" from your cassandra.yaml\");\n             }", "filename": "src/java/org/apache/cassandra/config/YamlConfigurationLoader.java"}, {"additions": 138, "raw_url": "https://github.com/apache/cassandra/raw/89cdfd8e075d8883d776d7f881735f1c25e3cb54/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java", "blob_url": "https://github.com/apache/cassandra/blob/89cdfd8e075d8883d776d7f881735f1c25e3cb54/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java", "sha": "46522cca822e45436c7cba4c4278903690d90778", "changes": 139, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java?ref=89cdfd8e075d8883d776d7f881735f1c25e3cb54", "patch": "@@ -18,9 +18,17 @@\n */\n package org.apache.cassandra.config;\n \n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+\n+import junit.framework.Assert;\n+\n+import org.junit.BeforeClass;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-\n import org.apache.cassandra.OrderedJUnit4ClassRunner;\n import org.apache.cassandra.SchemaLoader;\n import org.apache.cassandra.db.Keyspace;\n@@ -126,4 +134,133 @@ public Config loadConfig() throws ConfigurationException\n             return testConfig;\n         }\n     }\n+\n+    static NetworkInterface suitableInterface = null;\n+    static boolean hasIPv4andIPv6 = false;\n+\n+    /*\n+     * Server only accepts interfaces by name if they have a single address\n+     * OS X seems to always have an ipv4 and ipv6 address on all interfaces which means some tests fail\n+     * if not checked for and skipped\n+     */\n+    @BeforeClass\n+    public static void selectSuitableInterface() throws Exception {\n+        Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();\n+        while(interfaces.hasMoreElements()) {\n+            NetworkInterface intf = interfaces.nextElement();\n+\n+            System.out.println(\"Evaluating \" + intf.getName());\n+\n+            if (intf.isLoopback()) {\n+                suitableInterface = intf;\n+\n+                boolean hasIPv4 = false;\n+                boolean hasIPv6 = false;\n+                Enumeration<InetAddress> addresses = suitableInterface.getInetAddresses();\n+                while (addresses.hasMoreElements()) {\n+                    if (addresses.nextElement().getClass() == Inet6Address.class)\n+                        hasIPv6 = true;\n+                    else\n+                        hasIPv4 = true;\n+                }\n+                hasIPv4andIPv6 = hasIPv4 && hasIPv6;\n+                return;\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testRpcInterface() throws Exception\n+    {\n+        Config testConfig = DatabaseDescriptor.loadConfig();\n+        testConfig.rpc_interface = suitableInterface.getName();\n+        testConfig.rpc_address = null;\n+        DatabaseDescriptor.applyAddressConfig(testConfig);\n+\n+        /*\n+         * Confirm ability to select between IPv4 and IPv6\n+         */\n+        if (hasIPv4andIPv6)\n+        {\n+            testConfig = DatabaseDescriptor.loadConfig();\n+            testConfig.rpc_interface = suitableInterface.getName();\n+            testConfig.rpc_address = null;\n+            testConfig.rpc_interface_prefer_ipv6 = true;\n+            DatabaseDescriptor.applyAddressConfig(testConfig);\n+\n+            assertEquals(DatabaseDescriptor.getRpcAddress().getClass(), Inet6Address.class);\n+\n+            testConfig = DatabaseDescriptor.loadConfig();\n+            testConfig.rpc_interface = suitableInterface.getName();\n+            testConfig.rpc_address = null;\n+            testConfig.rpc_interface_prefer_ipv6 = false;\n+            DatabaseDescriptor.applyAddressConfig(testConfig);\n+\n+            assertEquals(DatabaseDescriptor.getRpcAddress().getClass(), Inet4Address.class);\n+        }\n+        else\n+        {\n+            /*\n+             * Confirm first address of interface is selected\n+             */\n+            assertEquals(DatabaseDescriptor.getRpcAddress(), suitableInterface.getInetAddresses().nextElement());\n+        }\n+    }\n+\n+    @Test\n+    public void testListenInterface() throws Exception\n+    {\n+        Config testConfig = DatabaseDescriptor.loadConfig();\n+        testConfig.listen_interface = suitableInterface.getName();\n+        testConfig.listen_address = null;\n+        DatabaseDescriptor.applyAddressConfig(testConfig);\n+\n+        /*\n+         * Confirm ability to select between IPv4 and IPv6\n+         */\n+        if (hasIPv4andIPv6)\n+        {\n+            testConfig = DatabaseDescriptor.loadConfig();\n+            testConfig.listen_interface = suitableInterface.getName();\n+            testConfig.listen_address = null;\n+            testConfig.listen_interface_prefer_ipv6 = true;\n+            DatabaseDescriptor.applyAddressConfig(testConfig);\n+\n+            assertEquals(DatabaseDescriptor.getListenAddress().getClass(), Inet6Address.class);\n+\n+            testConfig = DatabaseDescriptor.loadConfig();\n+            testConfig.listen_interface = suitableInterface.getName();\n+            testConfig.listen_address = null;\n+            testConfig.listen_interface_prefer_ipv6 = false;\n+            DatabaseDescriptor.applyAddressConfig(testConfig);\n+\n+            assertEquals(DatabaseDescriptor.getListenAddress().getClass(), Inet4Address.class);\n+        }\n+        else\n+        {\n+            /*\n+             * Confirm first address of interface is selected\n+             */\n+            assertEquals(DatabaseDescriptor.getRpcAddress(), suitableInterface.getInetAddresses().nextElement());\n+        }\n+    }\n+\n+    @Test\n+    public void testListenAddress() throws Exception\n+    {\n+        Config testConfig = DatabaseDescriptor.loadConfig();\n+        testConfig.listen_address = suitableInterface.getInterfaceAddresses().get(0).getAddress().getHostAddress();\n+        testConfig.listen_interface = null;\n+        DatabaseDescriptor.applyAddressConfig(testConfig);\n+    }\n+\n+    @Test\n+    public void testRpcAddress() throws Exception\n+    {\n+        Config testConfig = DatabaseDescriptor.loadConfig();\n+        testConfig.rpc_address = suitableInterface.getInterfaceAddresses().get(0).getAddress().getHostAddress();\n+        testConfig.rpc_interface = null;\n+        DatabaseDescriptor.applyAddressConfig(testConfig);\n+\n+    }\n }", "filename": "test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/6ad62c3f4a44ccbf1b462075610487e771e56f73", "parent": "https://github.com/apache/cassandra/commit/cf1de311224dce9c3db51db9dcbeae30bb22cfd0", "message": "Fix NPE in cas operations\n\npatch by slebresne; reviewed by jbellis for CASSANDRA-5925", "bug_id": "cassandra_83", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/6ad62c3f4a44ccbf1b462075610487e771e56f73/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/6ad62c3f4a44ccbf1b462075610487e771e56f73/CHANGES.txt", "sha": "0cb223fb7488bf65e1ee06e4bbdef20cbb1b3d4f", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=6ad62c3f4a44ccbf1b462075610487e771e56f73", "patch": "@@ -4,6 +4,7 @@\n  * Fix dateOf() function for pre-2.0 timestamp columns (CASSANDRA-5928)\n  * Fix SSTable unintentionally loads BF when opened for batch (CASSANDRA-5938)\n  * Add stream session progress to JMX (CASSANDRA-4757)\n+ * Fix NPE during CAS operation (CASSANDRA-5925)\n Merged from 1.2:\n  * Fix getBloomFilterDiskSpaceUsed for AlwaysPresentFilter (CASSANDRA-5900)\n  * Don't announce schema version until we've loaded the changes locally", "filename": "CHANGES.txt"}, {"additions": 9, "raw_url": "https://github.com/apache/cassandra/raw/6ad62c3f4a44ccbf1b462075610487e771e56f73/src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java", "blob_url": "https://github.com/apache/cassandra/blob/6ad62c3f4a44ccbf1b462075610487e771e56f73/src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java", "sha": "93c4438d01ea32d07d2c3ce274e145f5787b263f", "changes": 12, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java?ref=6ad62c3f4a44ccbf1b462075610487e771e56f73", "patch": "@@ -108,6 +108,8 @@ public void checkAccess(ClientState state) throws InvalidRequestException, Unaut\n \n     public void validate(ClientState state) throws InvalidRequestException\n     {\n+        if (hasConditions() && attrs.isTimestampSet())\n+            throw new InvalidRequestException(\"Custom timestamps are not allowed when conditions are used\");\n     }\n \n     public void addOperation(Operation op)\n@@ -370,13 +372,17 @@ public ResultMessage executeWithCondition(QueryState queryState, QueryOptions op\n             throw new InvalidRequestException(\"IN on the partition key is not supported with conditional updates\");\n \n         ColumnNameBuilder clusteringPrefix = createClusteringPrefixBuilder(variables);\n-        UpdateParameters params = new UpdateParameters(cfm, variables, getTimestamp(queryState.getTimestamp(), variables), getTimeToLive(variables), null);\n \n         ByteBuffer key = keys.get(0);\n         ThriftValidation.validateKey(cfm, key);\n \n-        ColumnFamily updates = updateForKey(key, clusteringPrefix, params);\n-        ColumnFamily expected = buildConditions(key, clusteringPrefix, params);\n+        UpdateParameters updParams = new UpdateParameters(cfm, variables, queryState.getTimestamp(), getTimeToLive(variables), null);\n+        ColumnFamily updates = updateForKey(key, clusteringPrefix, updParams);\n+\n+        // When building the conditions, we should not use the TTL. It's not useful, and if a very low ttl (1 seconds) is used, it's possible\n+        // for it to expire before actually build the conditions which would break since we would then test for the presence of tombstones.\n+        UpdateParameters condParams = new UpdateParameters(cfm, variables, queryState.getTimestamp(), 0, null);\n+        ColumnFamily expected = buildConditions(key, clusteringPrefix, condParams);\n \n         ColumnFamily result = StorageProxy.cas(keyspace(),\n                                                columnFamily(),", "filename": "src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java"}, {"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/6ad62c3f4a44ccbf1b462075610487e771e56f73/src/java/org/apache/cassandra/db/SystemKeyspace.java", "blob_url": "https://github.com/apache/cassandra/blob/6ad62c3f4a44ccbf1b462075610487e771e56f73/src/java/org/apache/cassandra/db/SystemKeyspace.java", "sha": "5dd505f67cc760c9fe0caea2e51d47b7dd2f3487", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/SystemKeyspace.java?ref=6ad62c3f4a44ccbf1b462075610487e771e56f73", "patch": "@@ -806,10 +806,11 @@ public static void savePaxosPromise(Commit promise)\n \n     public static void savePaxosProposal(Commit commit)\n     {\n-        processInternal(String.format(\"UPDATE %s USING TIMESTAMP %d AND TTL %d SET proposal = 0x%s WHERE row_key = 0x%s AND cf_id = %s\",\n+        processInternal(String.format(\"UPDATE %s USING TIMESTAMP %d AND TTL %d SET in_progress_ballot = %s, proposal = 0x%s WHERE row_key = 0x%s AND cf_id = %s\",\n                                       PAXOS_CF,\n                                       UUIDGen.microsTimestamp(commit.ballot),\n                                       paxosTtl(commit.update.metadata),\n+                                      commit.ballot,\n                                       ByteBufferUtil.bytesToHex(commit.update.toBytes()),\n                                       ByteBufferUtil.bytesToHex(commit.key),\n                                       commit.update.id()));", "filename": "src/java/org/apache/cassandra/db/SystemKeyspace.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/2206ffadd32b7d4d428e7a391a8c2e11d91a8ea9", "parent": "https://github.com/apache/cassandra/commit/81fe1a2a86772512945a2b19a7b968a3fd1295f4", "message": "Fix rare NPE in ColumnDefinition#hasIndexOption()\n\npatch by Aleksey Yeschenko; reviewed by Tyler Hobbs for CASSANDRA-8786", "bug_id": "cassandra_84", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/2206ffadd32b7d4d428e7a391a8c2e11d91a8ea9/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/2206ffadd32b7d4d428e7a391a8c2e11d91a8ea9/CHANGES.txt", "sha": "29e7541526fa632000e1339d02bd2204a23cdbd6", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=2206ffadd32b7d4d428e7a391a8c2e11d91a8ea9", "patch": "@@ -1,4 +1,5 @@\n 2.1.4\n+ * Fix rare NPE in ColumnDefinition#hasIndexOption() (CASSANDRA-8786)\n  * cassandra-stress reports per-operation statistics, plus misc (CASSANDRA-8769)\n  * Add SimpleDate (cql date) and Time (cql time) types (CASSANDRA-7523)\n  * Use long for key count in cfstats (CASSANDRA-8913)", "filename": "CHANGES.txt"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/2206ffadd32b7d4d428e7a391a8c2e11d91a8ea9/src/java/org/apache/cassandra/config/ColumnDefinition.java", "blob_url": "https://github.com/apache/cassandra/blob/2206ffadd32b7d4d428e7a391a8c2e11d91a8ea9/src/java/org/apache/cassandra/config/ColumnDefinition.java", "sha": "c44737554dfabeb4f6576391c1042100c5648605", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/ColumnDefinition.java?ref=2206ffadd32b7d4d428e7a391a8c2e11d91a8ea9", "patch": "@@ -486,6 +486,6 @@ public IndexType getIndexType()\n      */\n     public boolean hasIndexOption(String name)\n     {\n-        return indexOptions.containsKey(name);\n+        return indexOptions != null && indexOptions.containsKey(name);\n     }\n }", "filename": "src/java/org/apache/cassandra/config/ColumnDefinition.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/9ee34b6e656428299a98eb2f1403b2246be3190f", "parent": "https://github.com/apache/cassandra/commit/107545b3929c32c61e7d00c6ca448c10046db792", "message": "Make logging for NPE in removeUnfinishedCompactionLeftovers more useful\n\nPatch by jmckenzie; reviewed by ayeschenko for CASSANDRA-8544", "bug_id": "cassandra_85", "file": [{"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/9ee34b6e656428299a98eb2f1403b2246be3190f/src/java/org/apache/cassandra/db/ColumnFamilyStore.java", "blob_url": "https://github.com/apache/cassandra/blob/9ee34b6e656428299a98eb2f1403b2246be3190f/src/java/org/apache/cassandra/db/ColumnFamilyStore.java", "sha": "3d5e4c2d4bae8f9c8bb631c876801f5eec7dde20", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=9ee34b6e656428299a98eb2f1403b2246be3190f", "patch": "@@ -612,6 +612,10 @@ public static void removeUnfinishedCompactionLeftovers(CFMetaData metadata, Map<\n             {\n                 throw new FSReadError(e, desc.filenameFor(Component.STATS));\n             }\n+            catch (NullPointerException e)\n+            {\n+                throw new FSReadError(e, \"Failed to remove unfinished compaction leftovers (file: \" + desc.filenameFor(Component.STATS) + \").  See log for details.\");\n+            }\n \n             if (!ancestors.isEmpty()\n                 && unfinishedGenerations.containsAll(ancestors)", "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/bef1d0cb064faa3641fee31e1584b77ca95c9843", "parent": "https://github.com/apache/cassandra/commit/abc4a37d0ae1972d73866079ad7a01eefc5220c5", "message": "Fix rare NPE in KeyCacheSerializer\n\npatch by Aleksey Yeschenko; reviewed by Benedict Elliott Smith for\nCASSANDRA-8067", "bug_id": "cassandra_86", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/bef1d0cb064faa3641fee31e1584b77ca95c9843/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/bef1d0cb064faa3641fee31e1584b77ca95c9843/CHANGES.txt", "sha": "a90dd48747b03cc80c1d5f8210434d85b852f5d8", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=bef1d0cb064faa3641fee31e1584b77ca95c9843", "patch": "@@ -1,4 +1,5 @@\n 2.1.4\n+ * Fix rare NPE in KeyCacheSerializer (CASSANDRA-8067)\n  * Pick sstables for validation as late as possible inc repairs (CASSANDRA-8366)\n  * Fix commitlog getPendingTasks to not increment (CASSANDRA-8856)\n  * Fix parallelism adjustment in range and secondary index queries", "filename": "CHANGES.txt"}, {"additions": 6, "raw_url": "https://github.com/apache/cassandra/raw/bef1d0cb064faa3641fee31e1584b77ca95c9843/src/java/org/apache/cassandra/service/CacheService.java", "blob_url": "https://github.com/apache/cassandra/blob/bef1d0cb064faa3641fee31e1584b77ca95c9843/src/java/org/apache/cassandra/service/CacheService.java", "sha": "48c09411080dc21d5d6f37bc40297327f066616b", "changes": 9, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/CacheService.java?ref=bef1d0cb064faa3641fee31e1584b77ca95c9843", "patch": "@@ -467,11 +467,14 @@ public void serialize(KeyCacheKey key, DataOutputPlus out) throws IOException\n             RowIndexEntry entry = CacheService.instance.keyCache.get(key);\n             if (entry == null)\n                 return;\n+\n+            CFMetaData cfm = Schema.instance.getCFMetaData(key.cfId);\n+            if (cfm == null)\n+                return; // the table no longer exists.\n+\n             ByteBufferUtil.writeWithLength(key.key, out);\n-            Descriptor desc = key.desc;\n-            out.writeInt(desc.generation);\n+            out.writeInt(key.desc.generation);\n             out.writeBoolean(true);\n-            CFMetaData cfm = Schema.instance.getCFMetaData(key.desc.ksname, key.desc.cfname);\n             cfm.comparator.rowIndexEntrySerializer().serialize(entry, out);\n         }\n ", "filename": "src/java/org/apache/cassandra/service/CacheService.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/b82027ccbc315bfd46f760204c71358e5f85b254", "parent": "https://github.com/apache/cassandra/commit/65b9093d4905da489e472dfd565417c6865d44c8", "message": "Fix NPE during cql3 select with token()\n\npatch by slebresne; reviewed by driftx for CASSANDRA-5404", "bug_id": "cassandra_87", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/b82027ccbc315bfd46f760204c71358e5f85b254/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/b82027ccbc315bfd46f760204c71358e5f85b254/CHANGES.txt", "sha": "727ede8237cc68d1ccdfb31b844a923d195d162b", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=b82027ccbc315bfd46f760204c71358e5f85b254", "patch": "@@ -16,6 +16,7 @@\n  * Fix streaming compressed files when using encryption (CASSANDRA-5391)\n  * cassandra-all 1.2.0 pom missing netty dependency (CASSANDRA-5392)\n  * Fix writetime/ttl functions on null values (CASSANDRA-5341)\n+ * Fix NPE during cql3 select with token() (CASSANDRA-5404)\n Merged from 1.1:\n  * cli: Quote ks and cf names in schema output when needed (CASSANDRA-5052)\n  * Fix bad default for min/max timestamp in SSTableMetadata (CASSANDRA-5372)", "filename": "CHANGES.txt"}, {"additions": 5, "raw_url": "https://github.com/apache/cassandra/raw/b82027ccbc315bfd46f760204c71358e5f85b254/src/java/org/apache/cassandra/cql3/functions/FunctionCall.java", "blob_url": "https://github.com/apache/cassandra/blob/b82027ccbc315bfd46f760204c71358e5f85b254/src/java/org/apache/cassandra/cql3/functions/FunctionCall.java", "sha": "14a9b78600dc723560eaeb0e1398991599ea582c", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/functions/FunctionCall.java?ref=b82027ccbc315bfd46f760204c71358e5f85b254", "patch": "@@ -132,7 +132,11 @@ private static ByteBuffer execute(Function fun, List<Term> parameters) throws In\n         public boolean isAssignableTo(ColumnSpecification receiver)\n         {\n             AbstractType<?> returnType = Functions.getReturnType(functionName, receiver.ksName, receiver.cfName);\n-            return receiver.type.asCQL3Type().equals(returnType.asCQL3Type());\n+            // Note: if returnType == null, it means the function doesn't exist. We may get this if an undefined function\n+            // is used as argument of another, existing, function. In that case, we return true here because we'll catch\n+            // the fact that the method is undefined latter anyway and with a more helpful error message that if we were\n+            // to return false here.\n+            return returnType == null || receiver.type.asCQL3Type().equals(returnType.asCQL3Type());\n         }\n \n         @Override", "filename": "src/java/org/apache/cassandra/cql3/functions/FunctionCall.java"}, {"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/b82027ccbc315bfd46f760204c71358e5f85b254/src/java/org/apache/cassandra/cql3/statements/Selection.java", "blob_url": "https://github.com/apache/cassandra/blob/b82027ccbc315bfd46f760204c71358e5f85b254/src/java/org/apache/cassandra/cql3/statements/Selection.java", "sha": "e4e59c56e1e92514f66b2a426f408c38065fd356", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/Selection.java?ref=b82027ccbc315bfd46f760204c71358e5f85b254", "patch": "@@ -117,6 +117,8 @@ else if (raw instanceof RawSelector.WritetimeOrTTL)\n                 args.add(makeSelector(cfDef, rawArg, names, null));\n \n             AbstractType<?> returnType = Functions.getReturnType(withFun.functionName, cfDef.cfm.ksName, cfDef.cfm.cfName);\n+            if (returnType == null)\n+                throw new InvalidRequestException(String.format(\"Unknown function '%s'\", withFun.functionName));\n             ColumnSpecification spec = makeFunctionSpec(cfDef, withFun, returnType);\n             Function fun = Functions.get(withFun.functionName, args, spec);\n             if (metadata != null)", "filename": "src/java/org/apache/cassandra/cql3/statements/Selection.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/db3c198ad0ce46e255202d03ead7ad44df127070", "parent": "https://github.com/apache/cassandra/commit/5eb9e1c1576edb90f5b6e2ef975686e87a8c93af", "message": "fix BulkLoader NPE caused by #4732\npatch by jbellis; reviewed by yukim for CASSANDRA-4846", "bug_id": "cassandra_88", "file": [{"additions": 7, "raw_url": "https://github.com/apache/cassandra/raw/db3c198ad0ce46e255202d03ead7ad44df127070/src/java/org/apache/cassandra/io/sstable/SSTableReader.java", "blob_url": "https://github.com/apache/cassandra/blob/db3c198ad0ce46e255202d03ead7ad44df127070/src/java/org/apache/cassandra/io/sstable/SSTableReader.java", "sha": "91713a1469106b562f2b862b0ad1e9b4f614d518", "changes": 9, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/SSTableReader.java?ref=db3c198ad0ce46e255202d03ead7ad44df127070", "patch": "@@ -84,7 +84,7 @@\n     private IndexSummary indexSummary;\n     private Filter bf;\n \n-    private final InstrumentingCache<KeyCacheKey, RowIndexEntry> keyCache = CacheService.instance.keyCache;\n+    private InstrumentingCache<KeyCacheKey, RowIndexEntry> keyCache;\n \n     private final BloomFilterTracker bloomFilterTracker = new BloomFilterTracker();\n \n@@ -312,6 +312,10 @@ private SSTableReader(Descriptor desc,\n     public void setTrackedBy(DataTracker tracker)\n     {\n         deletingTask.setTracker(tracker);\n+        // under normal operation we can do this at any time, but SSTR is also used outside C* proper,\n+        // e.g. by BulkLoader, which does not initialize the cache.  As a kludge, we set up the cache\n+        // here when we know we're being wired into the rest of the server infrastructure.\n+        keyCache = CacheService.instance.keyCache;\n     }\n \n     void loadBloomFilter() throws IOException\n@@ -680,6 +684,7 @@ public void cacheKey(DecoratedKey key, RowIndexEntry info)\n \n         if (caching == CFMetaData.Caching.NONE\n             || caching == CFMetaData.Caching.ROWS_ONLY\n+            || keyCache == null\n             || keyCache.getCapacity() == 0)\n         {\n             return;\n@@ -697,7 +702,7 @@ public RowIndexEntry getCachedPosition(DecoratedKey key, boolean updateStats)\n \n     private RowIndexEntry getCachedPosition(KeyCacheKey unifiedKey, boolean updateStats)\n     {\n-        if (keyCache.getCapacity() > 0)\n+        if (keyCache != null && keyCache.getCapacity() > 0)\n             return updateStats ? keyCache.get(unifiedKey) : keyCache.getInternal(unifiedKey);\n         return null;\n     }", "filename": "src/java/org/apache/cassandra/io/sstable/SSTableReader.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/c8a7618763f59372d291f928d996d2593b93872b", "parent": "https://github.com/apache/cassandra/commit/d525cf969c042b21a9375446f5449ee82d7d1484", "message": "Fix potential NPE during CFS reload\n\npatch by slebresne; reviewed by xedin for CASSANDRA-4786", "bug_id": "cassandra_89", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/c8a7618763f59372d291f928d996d2593b93872b/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/c8a7618763f59372d291f928d996d2593b93872b/CHANGES.txt", "sha": "c3df5514e3e84353ab7008e47e729a1c91a8ca8a", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=c8a7618763f59372d291f928d996d2593b93872b", "patch": "@@ -28,6 +28,7 @@\n  * Store more information into peers table (CASSANDRA-4351)\n  * Configurable bucket size for size tiered compaction (CASSANDRA-4704)\n  * Run leveled compaction in parallel (CASSANDRA-4310)\n+ * Fix potential NPE during CFS reload (CASSANDRA-4786)\n \n \n 1.2-beta1", "filename": "CHANGES.txt"}, {"additions": 25, "raw_url": "https://github.com/apache/cassandra/raw/c8a7618763f59372d291f928d996d2593b93872b/src/java/org/apache/cassandra/config/CFMetaData.java", "blob_url": "https://github.com/apache/cassandra/blob/c8a7618763f59372d291f928d996d2593b93872b/src/java/org/apache/cassandra/config/CFMetaData.java", "sha": "fe44b5498edd73ee7491fef0a087530edb58a2bc", "changes": 50, "status": "modified", "deletions": 25, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/CFMetaData.java?ref=c8a7618763f59372d291f928d996d2593b93872b", "patch": "@@ -234,40 +234,40 @@ public static Caching fromString(String cache) throws ConfigurationException\n     public final String ksName;                       // name of keyspace\n     public final String cfName;                       // name of this column family\n     public final ColumnFamilyType cfType;             // standard, super\n-    public AbstractType<?> comparator;          // bytes, long, timeuuid, utf8, etc.\n-    public AbstractType<?> subcolumnComparator; // like comparator, for supercolumns\n+    public volatile AbstractType<?> comparator;          // bytes, long, timeuuid, utf8, etc.\n+    public volatile AbstractType<?> subcolumnComparator; // like comparator, for supercolumns\n \n     //OPTIONAL\n-    private String comment;                           // default none, for humans only\n-    private double readRepairChance;                  // default 1.0 (always), chance [0.0,1.0] of read repair\n-    private double dcLocalReadRepairChance;           // default 0.0\n-    private boolean replicateOnWrite;                 // default false\n-    private int gcGraceSeconds;                       // default 864000 (ten days)\n-    private AbstractType<?> defaultValidator;         // default BytesType (no-op), use comparator types\n-    private AbstractType<?> keyValidator;             // default BytesType (no-op), use comparator types\n-    private int minCompactionThreshold;               // default 4\n-    private int maxCompactionThreshold;               // default 32\n-    private List<ByteBuffer> keyAliases = new ArrayList<ByteBuffer>();\n-    private List<ByteBuffer> columnAliases = new ArrayList<ByteBuffer>();\n-    private ByteBuffer valueAlias;                    // default NULL\n-    private Double bloomFilterFpChance;               // default NULL\n-    private Caching caching;                          // default KEYS_ONLY (possible: all, key_only, row_only, none)\n-\n-    Map<ByteBuffer, ColumnDefinition> column_metadata;\n-    public Class<? extends AbstractCompactionStrategy> compactionStrategyClass;\n-    public Map<String, String> compactionStrategyOptions;\n-\n-    public CompressionParameters compressionParameters;\n+    private volatile String comment;                           // default none, for humans only\n+    private volatile double readRepairChance;                  // default 1.0 (always), chance [0.0,1.0] of read repair\n+    private volatile double dcLocalReadRepairChance;           // default 0.0\n+    private volatile boolean replicateOnWrite;                 // default false\n+    private volatile int gcGraceSeconds;                       // default 864000 (ten days)\n+    private volatile AbstractType<?> defaultValidator;         // default BytesType (no-op), use comparator types\n+    private volatile AbstractType<?> keyValidator;             // default BytesType (no-op), use comparator types\n+    private volatile int minCompactionThreshold;               // default 4\n+    private volatile int maxCompactionThreshold;               // default 32\n+    private volatile List<ByteBuffer> keyAliases = new ArrayList<ByteBuffer>();\n+    private volatile List<ByteBuffer> columnAliases = new ArrayList<ByteBuffer>();\n+    private volatile ByteBuffer valueAlias;                    // default NULL\n+    private volatile Double bloomFilterFpChance;               // default NULL\n+    private volatile Caching caching;                          // default KEYS_ONLY (possible: all, key_only, row_only, none)\n+\n+    volatile Map<ByteBuffer, ColumnDefinition> column_metadata;\n+    public volatile Class<? extends AbstractCompactionStrategy> compactionStrategyClass;\n+    public volatile Map<String, String> compactionStrategyOptions;\n+\n+    public volatile CompressionParameters compressionParameters;\n \n     // Default consistency levels for CQL3. The default for those values is ONE,\n     // but we keep the internal default to null as it help handling thrift compatibility\n-    private ConsistencyLevel readConsistencyLevel;\n-    private ConsistencyLevel writeConsistencyLevel;\n+    private volatile ConsistencyLevel readConsistencyLevel;\n+    private volatile ConsistencyLevel writeConsistencyLevel;\n \n     // Processed infos used by CQL. This can be fully reconstructed from the CFMedata,\n     // so it's not saved on disk. It is however costlyish to recreate for each query\n     // so we cache it here (and update on each relevant CFMetadata change)\n-    private CFDefinition cqlCfDef;\n+    private volatile CFDefinition cqlCfDef;\n \n     public CFMetaData comment(String prop) { comment = enforceCommentNotNull(prop); return this;}\n     public CFMetaData readRepairChance(double prop) {readRepairChance = prop; return this;}", "filename": "src/java/org/apache/cassandra/config/CFMetaData.java"}, {"additions": 15, "raw_url": "https://github.com/apache/cassandra/raw/c8a7618763f59372d291f928d996d2593b93872b/src/java/org/apache/cassandra/db/ColumnFamilyStore.java", "blob_url": "https://github.com/apache/cassandra/blob/c8a7618763f59372d291f928d996d2593b93872b/src/java/org/apache/cassandra/db/ColumnFamilyStore.java", "sha": "8a1d54f0461e3757b253c42e51ad905957d9fd59", "changes": 17, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=c8a7618763f59372d291f928d996d2593b93872b", "patch": "@@ -156,10 +156,23 @@ public void reload()\n         // If the CF comparator has changed, we need to change the memtable,\n         // because the old one still aliases the previous comparator. We don't\n         // call forceFlush() because it can skip the switch if the memtable is\n-        // clean, which we don't want here.\n+        // clean, which we don't want here. Also, because there can be a race\n+        // between the time we acquire the current memtable and we flush it\n+        // (another thread can have flushed it first), we attempt the switch\n+        // until we know the memtable has the current comparator.\n         try\n         {\n-            maybeSwitchMemtable(getMemtableThreadSafe(), true).get();\n+            while (true)\n+            {\n+                AbstractType comparator = metadata.comparator;\n+                Memtable memtable = getMemtableThreadSafe();\n+                if (memtable.initialComparator == comparator)\n+                    break;\n+\n+                Future future = maybeSwitchMemtable(getMemtableThreadSafe(), true);\n+                if (future != null)\n+                    future.get();\n+            }\n         }\n         catch (ExecutionException e)\n         {", "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java"}, {"additions": 7, "raw_url": "https://github.com/apache/cassandra/raw/c8a7618763f59372d291f928d996d2593b93872b/src/java/org/apache/cassandra/db/Memtable.java", "blob_url": "https://github.com/apache/cassandra/blob/c8a7618763f59372d291f928d996d2593b93872b/src/java/org/apache/cassandra/db/Memtable.java", "sha": "82d22ca0a3c1b3da56ef2ef8e4e15101aa6e6d0b", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/Memtable.java?ref=c8a7618763f59372d291f928d996d2593b93872b", "patch": "@@ -41,6 +41,7 @@\n import org.apache.cassandra.db.filter.AbstractColumnIterator;\n import org.apache.cassandra.db.filter.NamesQueryFilter;\n import org.apache.cassandra.db.filter.SliceQueryFilter;\n+import org.apache.cassandra.db.marshal.AbstractType;\n import org.apache.cassandra.io.sstable.SSTableMetadata;\n import org.apache.cassandra.io.sstable.SSTableReader;\n import org.apache.cassandra.io.sstable.SSTableWriter;\n@@ -101,10 +102,16 @@ public IColumn apply(IColumn c)\n         };\n     };\n \n+    // Record the comparator of the CFS at the creation of the memtable. This\n+    // is only used when a user update the CF comparator, to know if the\n+    // memtable was created with the new or old comparator.\n+    public final AbstractType initialComparator;\n+\n     public Memtable(ColumnFamilyStore cfs)\n     {\n         this.cfs = cfs;\n         this.creationTime = System.currentTimeMillis();\n+        this.initialComparator = cfs.metadata.comparator;\n \n         Callable<Set<Object>> provider = new Callable<Set<Object>>()\n         {", "filename": "src/java/org/apache/cassandra/db/Memtable.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/98cf63431af3d1cd6a411e311250ab71961df9e7", "parent": "https://github.com/apache/cassandra/commit/58c88b7d54ca2290cee9cfb322d8b34e873a370c", "message": "Fix NPE in SelectStatement with empty IN values\n\nPatch by Benjamin Lerer; reviewed by Tyler Hobbs for CASSANDRA-8419", "bug_id": "cassandra_90", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/98cf63431af3d1cd6a411e311250ab71961df9e7/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/98cf63431af3d1cd6a411e311250ab71961df9e7/CHANGES.txt", "sha": "588f58f2576fffea9656afaa83f39595fcdbef00", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=98cf63431af3d1cd6a411e311250ab71961df9e7", "patch": "@@ -1,4 +1,5 @@\n 3.0\n+ * Fix NPE in SelectStatement with empty IN values (CASSANDRA-8419)\n  * Refactor SelectStatement, return IN results in natural order instead\n    of IN value list order (CASSANDRA-7981)\n  * Support UDTs, tuples, and collections in user-defined", "filename": "CHANGES.txt"}, {"additions": 7, "raw_url": "https://github.com/apache/cassandra/raw/98cf63431af3d1cd6a411e311250ab71961df9e7/src/java/org/apache/cassandra/cql3/restrictions/SingleColumnPrimaryKeyRestrictions.java", "blob_url": "https://github.com/apache/cassandra/blob/98cf63431af3d1cd6a411e311250ab71961df9e7/src/java/org/apache/cassandra/cql3/restrictions/SingleColumnPrimaryKeyRestrictions.java", "sha": "5c8386e4446100872315e147a9b491dbc29ccf2f", "changes": 9, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/restrictions/SingleColumnPrimaryKeyRestrictions.java?ref=98cf63431af3d1cd6a411e311250ab71961df9e7", "patch": "@@ -186,7 +186,7 @@ public PrimaryKeyRestrictions mergeWith(Restriction restriction) throws InvalidR\n             List<ByteBuffer> values = r.values(options);\n \n             if (values.isEmpty())\n-                return null;\n+                return Collections.emptyList();\n \n             builder.addEachElementToAll(values);\n             checkFalse(builder.containsNull(), \"Invalid null value for column %s\", def.name);\n@@ -236,7 +236,12 @@ public PrimaryKeyRestrictions mergeWith(Restriction restriction) throws InvalidR\n                 return compositeBuilder.buildWithEOC(eoc);\n             }\n \n-            compositeBuilder.addEachElementToAll(r.values(options));\n+            List<ByteBuffer> values = r.values(options);\n+\n+            if (values.isEmpty())\n+                return Collections.emptyList();\n+\n+            compositeBuilder.addEachElementToAll(values);\n \n             checkFalse(compositeBuilder.containsNull(), \"Invalid null clustering key part %s\", def.name);\n             keyPosition++;", "filename": "src/java/org/apache/cassandra/cql3/restrictions/SingleColumnPrimaryKeyRestrictions.java"}, {"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/98cf63431af3d1cd6a411e311250ab71961df9e7/test/unit/org/apache/cassandra/cql3/MultiColumnRelationTest.java", "blob_url": "https://github.com/apache/cassandra/blob/98cf63431af3d1cd6a411e311250ab71961df9e7/test/unit/org/apache/cassandra/cql3/MultiColumnRelationTest.java", "sha": "b178498d2b3aceaabd7d9126bfe3a6673dd546fe", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/MultiColumnRelationTest.java?ref=98cf63431af3d1cd6a411e311250ab71961df9e7", "patch": "@@ -441,11 +441,15 @@ public void testMultipleClustering() throws Throwable\n                     row(0, 0, 1, 1)\n             );\n \n+            assertEmpty(execute(\"SELECT * FROM %s WHERE a = ? and (b) IN ()\", 0));\n+\n             assertRows(execute(\"SELECT * FROM %s WHERE a = ? AND (b, c) IN ((?, ?)) ORDER BY b DESC, c DESC, d DESC\", 0, 0, 1),\n                     row(0, 0, 1, 1),\n                     row(0, 0, 1, 0)\n             );\n \n+            assertEmpty(execute(\"SELECT * FROM %s WHERE a = ? AND (b, c) IN () ORDER BY b DESC, c DESC, d DESC\", 0));\n+\n             // IN on both partition key and clustering key\n             execute(\"INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)\", 1, 0, 0, 0);\n             execute(\"INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)\", 1, 0, 1, 0);", "filename": "test/unit/org/apache/cassandra/cql3/MultiColumnRelationTest.java"}, {"additions": 16, "raw_url": "https://github.com/apache/cassandra/raw/98cf63431af3d1cd6a411e311250ab71961df9e7/test/unit/org/apache/cassandra/cql3/SingleColumnRelationTest.java", "blob_url": "https://github.com/apache/cassandra/blob/98cf63431af3d1cd6a411e311250ab71961df9e7/test/unit/org/apache/cassandra/cql3/SingleColumnRelationTest.java", "sha": "e6412a391548116e42bfc3c61ef625a351176f02", "changes": 16, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/SingleColumnRelationTest.java?ref=98cf63431af3d1cd6a411e311250ab71961df9e7", "patch": "@@ -363,4 +363,20 @@ public void testRangeQueryOnIndex() throws Throwable\n                              \"SELECT * FROM %s WHERE setid = 0 AND row < 1;\");\n         assertRows(execute(\"SELECT * FROM %s WHERE setid = 0 AND row < 1 ALLOW FILTERING;\"), row(0, 0, 0));\n     }\n+\n+    @Test\n+    public void testEmptyIN() throws Throwable\n+    {\n+        for (String compactOption : new String[] { \"\", \" WITH COMPACT STORAGE\" })\n+        {\n+            createTable(\"CREATE TABLE %s (k1 int, k2 int, v int, PRIMARY KEY (k1, k2))\" + compactOption);\n+\n+            for (int i = 0; i <= 2; i++)\n+                for (int j = 0; j <= 2; j++)\n+                    execute(\"INSERT INTO %s (k1, k2, v) VALUES (?, ?, ?)\", i, j, i + j);\n+\n+            assertEmpty(execute(\"SELECT v FROM %s WHERE k1 IN ()\"));\n+            assertEmpty(execute(\"SELECT v FROM %s WHERE k1 = 0 AND k2 IN ()\"));\n+        }\n+    }\n }", "filename": "test/unit/org/apache/cassandra/cql3/SingleColumnRelationTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/6e1f3a0195b777c9ae79ab89230b67ca20c1adc4", "parent": "https://github.com/apache/cassandra/commit/b0342978a0a444b067fae25f4bf9a2f7e5dca0e3", "message": "Fix NPE when listing directory; patch by yukim reviewed by jbellis for\nCASSANDRA-4572", "bug_id": "cassandra_91", "file": [{"additions": 36, "raw_url": "https://github.com/apache/cassandra/raw/6e1f3a0195b777c9ae79ab89230b67ca20c1adc4/src/java/org/apache/cassandra/db/Directories.java", "blob_url": "https://github.com/apache/cassandra/blob/6e1f3a0195b777c9ae79ab89230b67ca20c1adc4/src/java/org/apache/cassandra/db/Directories.java", "sha": "7ee2823d6d4f3761160dde554e9769a59fa0c3f7", "changes": 55, "status": "modified", "deletions": 19, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/Directories.java?ref=6e1f3a0195b777c9ae79ab89230b67ca20c1adc4", "patch": "@@ -31,7 +31,6 @@\n import org.apache.cassandra.config.*;\n import org.apache.cassandra.db.compaction.LeveledManifest;\n import org.apache.cassandra.io.util.FileUtils;\n-import org.apache.cassandra.io.util.MmappedSegmentedFile;\n import org.apache.cassandra.io.sstable.*;\n import org.apache.cassandra.service.StorageService;\n import org.apache.cassandra.utils.CLibrary;\n@@ -479,16 +478,24 @@ public static void migrateSSTables()\n             if (!location.exists() || !location.isDirectory())\n                 continue;\n \n-            for (File ksDir : location.listFiles())\n+            File[] ksDirs = location.listFiles();\n+            if (ksDirs != null)\n             {\n-                if (!ksDir.isDirectory())\n-                    continue;\n+                for (File ksDir : ksDirs)\n+                {\n+                    if (!ksDir.isDirectory())\n+                        continue;\n \n-                for (File file : ksDir.listFiles())\n-                    migrateFile(file, ksDir, null);\n+                    File[] files = ksDir.listFiles();\n+                    if (files != null)\n+                    {\n+                        for (File file : files)\n+                            migrateFile(file, ksDir, null);\n+                    }\n \n-                migrateSnapshots(ksDir);\n-                migrateBackups(ksDir);\n+                    migrateSnapshots(ksDir);\n+                    migrateBackups(ksDir);\n+                }\n             }\n         }\n     }\n@@ -499,16 +506,23 @@ private static void migrateSnapshots(File ksDir)\n         if (!snapshotDir.exists())\n             return;\n \n-        for (File snapshot : snapshotDir.listFiles())\n+        File[] snapshots = snapshotDir.listFiles();\n+        if (snapshots != null)\n         {\n-            if (!snapshot.isDirectory())\n-                continue;\n-\n-            for (File f : snapshot.listFiles())\n-                migrateFile(f, ksDir, join(SNAPSHOT_SUBDIR, snapshot.getName()));\n+            for (File snapshot : snapshots)\n+            {\n+                if (!snapshot.isDirectory())\n+                    continue;\n \n-            if (!snapshot.delete())\n-                logger.info(\"Old snapsot directory {} not deleted by migraation as it is not empty\", snapshot);\n+                File[] files = snapshot.listFiles();\n+                if (files != null)\n+                {\n+                    for (File f : files)\n+                        migrateFile(f, ksDir, join(SNAPSHOT_SUBDIR, snapshot.getName()));\n+                }\n+                if (!snapshot.delete())\n+                    logger.info(\"Old snapsot directory {} not deleted by migraation as it is not empty\", snapshot);\n+            }\n         }\n         if (!snapshotDir.delete())\n             logger.info(\"Old directory {} not deleted by migration as it is not empty\", snapshotDir);\n@@ -520,9 +534,12 @@ private static void migrateBackups(File ksDir)\n         if (!backupDir.exists())\n             return;\n \n-        for (File f : backupDir.listFiles())\n-            migrateFile(f, ksDir, BACKUPS_SUBDIR);\n-\n+        File[] files = backupDir.listFiles();\n+        if (files != null)\n+        {\n+            for (File f : files)\n+                migrateFile(f, ksDir, BACKUPS_SUBDIR);\n+        }\n         if (!backupDir.delete())\n             logger.info(\"Old directory {} not deleted by migration as it is not empty\", backupDir);\n     }", "filename": "src/java/org/apache/cassandra/db/Directories.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/1124615a65329a4991a5a610fa78af56b0502627", "parent": "https://github.com/apache/cassandra/commit/71f5d91ab7825196990a2744cf3e40e654917d33", "message": "NPE while loading Saved KeyCache\npatch by Vijay; reviewed by Jonathan Ellis for CASSANDRA-4553", "bug_id": "cassandra_92", "file": [{"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/1124615a65329a4991a5a610fa78af56b0502627/src/java/org/apache/cassandra/cache/AutoSavingCache.java", "blob_url": "https://github.com/apache/cassandra/blob/1124615a65329a4991a5a610fa78af56b0502627/src/java/org/apache/cassandra/cache/AutoSavingCache.java", "sha": "ec054fb4984c48f165136199fb298b5c96963669", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cache/AutoSavingCache.java?ref=1124615a65329a4991a5a610fa78af56b0502627", "patch": "@@ -137,6 +137,9 @@ public int loadSaved(ColumnFamilyStore cfs)\n                 while (in.available() > 0)\n                 {\n                     Pair<K, V> entry = cacheLoader.deserialize(in, cfs);\n+                    // Key cache entry can return null, if the SSTable doesn't exist.\n+                    if (entry == null)\n+                        continue;\n                     put(entry.left, entry.right);\n                     count++;\n                 }", "filename": "src/java/org/apache/cassandra/cache/AutoSavingCache.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/6352edb3fe0a3a678e83ba11002e4cdde2cac468", "parent": "https://github.com/apache/cassandra/commit/8fd3f49e8469f0123a58b37243b3a2e1147fa51f", "message": "fix NPE in compactionstats\npatch by jbellis; reviewed by xedin for CASSANDRA-4318", "bug_id": "cassandra_93", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/6352edb3fe0a3a678e83ba11002e4cdde2cac468/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/6352edb3fe0a3a678e83ba11002e4cdde2cac468/CHANGES.txt", "sha": "ed9650c398e06d289bb525dd3c16ae1bdc09bb97", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=6352edb3fe0a3a678e83ba11002e4cdde2cac468", "patch": "@@ -1,4 +1,5 @@\n 1.1.2\n+ * fix NPE in compactionstats (CASSANDRA-4318)\n  * enforce 1m min keycache for auto (CASSANDRA-4306)\n  * Have DeletedColumn.isMFD always return true (CASSANDRA-4307)\n  * ex msg for cql3 order by constraints says primary filter can be an IN clause ", "filename": "CHANGES.txt"}, {"additions": 5, "raw_url": "https://github.com/apache/cassandra/raw/6352edb3fe0a3a678e83ba11002e4cdde2cac468/src/java/org/apache/cassandra/cache/AutoSavingCache.java", "blob_url": "https://github.com/apache/cassandra/blob/6352edb3fe0a3a678e83ba11002e4cdde2cac468/src/java/org/apache/cassandra/cache/AutoSavingCache.java", "sha": "7eed2a02cad4840e41266a0b1e673182ba1d6b1d", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cache/AutoSavingCache.java?ref=6352edb3fe0a3a678e83ba11002e4cdde2cac468", "patch": "@@ -30,6 +30,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import org.apache.cassandra.config.CFMetaData;\n import org.apache.cassandra.config.DatabaseDescriptor;\n import org.apache.cassandra.db.compaction.CompactionInfo;\n import org.apache.cassandra.db.compaction.CompactionManager;\n@@ -192,7 +193,10 @@ else if (cacheType == CacheService.CacheType.ROW_CACHE)\n             else\n                 type = OperationType.UNKNOWN;\n \n-            info = new CompactionInfo(type, 0, estimatedTotalBytes);\n+            info = new CompactionInfo(new CFMetaData(\"system\", cacheType.toString(), null, null, null),\n+                                      type,\n+                                      0,\n+                                      estimatedTotalBytes);\n         }\n \n         public CompactionInfo getCompactionInfo()", "filename": "src/java/org/apache/cassandra/cache/AutoSavingCache.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/6352edb3fe0a3a678e83ba11002e4cdde2cac468/src/java/org/apache/cassandra/db/compaction/AbstractCompactionIterable.java", "blob_url": "https://github.com/apache/cassandra/blob/6352edb3fe0a3a678e83ba11002e4cdde2cac468/src/java/org/apache/cassandra/db/compaction/AbstractCompactionIterable.java", "sha": "db3e1b3b17288f358f2268be3a18d12582ae76e8", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/compaction/AbstractCompactionIterable.java?ref=6352edb3fe0a3a678e83ba11002e4cdde2cac468", "patch": "@@ -53,7 +53,7 @@ public AbstractCompactionIterable(CompactionController controller, OperationType\n \n     public CompactionInfo getCompactionInfo()\n     {\n-        return new CompactionInfo(this.hashCode(),\n+        return new CompactionInfo(controller.cfs.metadata,\n                                   type,\n                                   bytesRead,\n                                   totalBytes);", "filename": "src/java/org/apache/cassandra/db/compaction/AbstractCompactionIterable.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/6352edb3fe0a3a678e83ba11002e4cdde2cac468/src/java/org/apache/cassandra/db/compaction/CompactionController.java", "blob_url": "https://github.com/apache/cassandra/blob/6352edb3fe0a3a678e83ba11002e4cdde2cac468/src/java/org/apache/cassandra/db/compaction/CompactionController.java", "sha": "8ff871e52eda03930d0c0a5e0d194b622464ef23", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/compaction/CompactionController.java?ref=6352edb3fe0a3a678e83ba11002e4cdde2cac468", "patch": "@@ -42,7 +42,7 @@\n {\n     private static Logger logger = LoggerFactory.getLogger(CompactionController.class);\n \n-    private final ColumnFamilyStore cfs;\n+    public final ColumnFamilyStore cfs;\n     private final boolean deserializeRequired;\n     private final IntervalTree<SSTableReader> overlappingTree;\n ", "filename": "src/java/org/apache/cassandra/db/compaction/CompactionController.java"}, {"additions": 6, "raw_url": "https://github.com/apache/cassandra/raw/6352edb3fe0a3a678e83ba11002e4cdde2cac468/src/java/org/apache/cassandra/db/compaction/CompactionInfo.java", "blob_url": "https://github.com/apache/cassandra/blob/6352edb3fe0a3a678e83ba11002e4cdde2cac468/src/java/org/apache/cassandra/db/compaction/CompactionInfo.java", "sha": "fdb363eb4fcaa3bb06f1b55bf2817eaae6959dd9", "changes": 17, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/compaction/CompactionInfo.java?ref=6352edb3fe0a3a678e83ba11002e4cdde2cac468", "patch": "@@ -34,38 +34,33 @@\n     private final long bytesComplete;\n     private final long totalBytes;\n \n-    public CompactionInfo(OperationType tasktype, long bytesComplete, long totalBytes)\n-    {\n-        this(null, tasktype, bytesComplete, totalBytes);\n-    }\n-\n-    public CompactionInfo(Integer id, OperationType tasktype, long bytesComplete, long totalBytes)\n+    public CompactionInfo(CFMetaData cfm, OperationType tasktype, long bytesComplete, long totalBytes)\n     {\n         this.tasktype = tasktype;\n         this.bytesComplete = bytesComplete;\n         this.totalBytes = totalBytes;\n-        this.cfm = id == null ? null : Schema.instance.getCFMetaData(id);\n+        this.cfm = cfm;\n     }\n \n     /** @return A copy of this CompactionInfo with updated progress. */\n     public CompactionInfo forProgress(long bytesComplete, long totalBytes)\n     {\n-        return new CompactionInfo(cfm == null ? null : cfm.cfId, tasktype, bytesComplete, totalBytes);\n+        return new CompactionInfo(cfm, tasktype, bytesComplete, totalBytes);\n     }\n \n     public Integer getId()\n     {\n-        return cfm == null ? null : cfm.cfId;\n+        return cfm.cfId;\n     }\n \n     public String getKeyspace()\n     {\n-        return cfm == null ? null : cfm.ksName;\n+        return cfm.ksName;\n     }\n \n     public String getColumnFamily()\n     {\n-        return cfm == null ? null : cfm.cfName;\n+        return cfm.cfName;\n     }\n \n     public CFMetaData getCFMetaData()", "filename": "src/java/org/apache/cassandra/db/compaction/CompactionInfo.java"}, {"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/6352edb3fe0a3a678e83ba11002e4cdde2cac468/src/java/org/apache/cassandra/db/compaction/CompactionManager.java", "blob_url": "https://github.com/apache/cassandra/blob/6352edb3fe0a3a678e83ba11002e4cdde2cac468/src/java/org/apache/cassandra/db/compaction/CompactionManager.java", "sha": "46aaa7d30999c7bafd34bc77623411b0469c432b", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/compaction/CompactionManager.java?ref=6352edb3fe0a3a678e83ba11002e4cdde2cac468", "patch": "@@ -1204,7 +1204,7 @@ public CompactionInfo getCompactionInfo()\n         {\n             try\n             {\n-                return new CompactionInfo(this.hashCode(),\n+                return new CompactionInfo(sstable.metadata,\n                                           OperationType.CLEANUP,\n                                           scanner.getCurrentPosition(),\n                                           scanner.getLengthInBytes());\n@@ -1230,7 +1230,7 @@ public CompactionInfo getCompactionInfo()\n         {\n             try\n             {\n-                return new CompactionInfo(this.hashCode(),\n+                return new CompactionInfo(sstable.metadata,\n                                           OperationType.SCRUB,\n                                           dataFile.getFilePointer(),\n                                           dataFile.length());", "filename": "src/java/org/apache/cassandra/db/compaction/CompactionManager.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/6352edb3fe0a3a678e83ba11002e4cdde2cac468/src/java/org/apache/cassandra/db/index/SecondaryIndexBuilder.java", "blob_url": "https://github.com/apache/cassandra/blob/6352edb3fe0a3a678e83ba11002e4cdde2cac468/src/java/org/apache/cassandra/db/index/SecondaryIndexBuilder.java", "sha": "f93be04ec6a1c1a6edcc280b64cfb9d7d4c6fd8d", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/index/SecondaryIndexBuilder.java?ref=6352edb3fe0a3a678e83ba11002e4cdde2cac468", "patch": "@@ -47,7 +47,7 @@ public SecondaryIndexBuilder(ColumnFamilyStore cfs, SortedSet<ByteBuffer> column\n \n     public CompactionInfo getCompactionInfo()\n     {\n-        return new CompactionInfo(this.hashCode(),\n+        return new CompactionInfo(cfs.metadata,\n                                   OperationType.INDEX_BUILD,\n                                   iter.getBytesRead(),\n                                   iter.getTotalBytes());", "filename": "src/java/org/apache/cassandra/db/index/SecondaryIndexBuilder.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/36a9f9bd8f70b35a13fe510576635c619b2b81ff", "parent": "https://github.com/apache/cassandra/commit/dc975e8ac3c6fc557e8b2b3ad83742bd259f91ac", "message": "fix NPE in cql3 ALTER TABLE\npatch by pcannon; reviewed by jbellis for CASSANDRA-4163", "bug_id": "cassandra_94", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/36a9f9bd8f70b35a13fe510576635c619b2b81ff/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/36a9f9bd8f70b35a13fe510576635c619b2b81ff/CHANGES.txt", "sha": "5e84e664071114998c63fe247632dfb356186577", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=36a9f9bd8f70b35a13fe510576635c619b2b81ff", "patch": "@@ -1,4 +1,5 @@\n 1.1-dev\n+ * fix NPE in cql3 ALTER TABLE (CASSANDRA-4163)\n  * (cqlsh) fix recognizing uppercase SELECT keyword (CASSANDRA-4161)\n  * average a reduced liveRatio estimate with the previous one (CASSANDRA-4065)\n  * Allow KS and CF names up to 48 characters (CASSANDRA-4157)", "filename": "CHANGES.txt"}, {"additions": 5, "raw_url": "https://github.com/apache/cassandra/raw/36a9f9bd8f70b35a13fe510576635c619b2b81ff/build.xml", "blob_url": "https://github.com/apache/cassandra/blob/36a9f9bd8f70b35a13fe510576635c619b2b81ff/build.xml", "sha": "89f3bc2006028931ff36cca1e056f0fd2160a525", "changes": 12, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/build.xml?ref=36a9f9bd8f70b35a13fe510576635c619b2b81ff", "patch": "@@ -190,16 +190,14 @@\n        This generates the CQL grammar files from Cql.g\n     -->\n     <target name=\"check-gen-cql-grammar\">\n-      <uptodate property=\"cqlcurrent\" \n-                srcfile=\"${build.src.java}/org/apache/cassandra/cql/Cql.g\" \n-                targetfile=\"${build.src.gen-java}/org/apache/cassandra/cql/Cql.tokens\"/>\n-      <uptodate property=\"cqlcurrent\"\n-                srcfile=\"${build.src.java}/org/apache/cassandra/cql3/Cql.g\"\n-                targetfile=\"${build.src.gen-java}/org/apache/cassandra/cql3/Cql.tokens\"/>\n+      <uptodate property=\"cqlcurrent\">\n+        <srcfiles dir=\"${build.src.java}\" includes=\"org/apache/cassandra/cql*/Cql.g\"/>\n+        <mapper type=\"glob\" from=\"*.g\" to=\"*.tokens\"/>\n+      </uptodate>\n     </target>\n  \n     <target name=\"gen-cql-grammar\" depends=\"check-gen-cql-grammar\" unless=\"cqlcurrent\">\n-      <echo>Building Grammar ${build.src.java}/org/apache/cassandra/cql/Cql.g  ...</echo>\n+      <echo>Building Grammar ${build.src.java}/org/apache/cassandra/cql*/Cql.g  ...</echo>\n       <java classname=\"org.antlr.Tool\"\n             classpath=\"${build.lib}/antlr-3.2.jar\"\n             fork=\"true\"", "filename": "build.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/36a9f9bd8f70b35a13fe510576635c619b2b81ff/src/java/org/apache/cassandra/cql3/Cql.g", "blob_url": "https://github.com/apache/cassandra/blob/36a9f9bd8f70b35a13fe510576635c619b2b81ff/src/java/org/apache/cassandra/cql3/Cql.g", "sha": "f1b4718b61330432e01a93c69cb446fe56d866bd", "changes": 4, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/Cql.g?ref=36a9f9bd8f70b35a13fe510576635c619b2b81ff", "patch": "@@ -362,9 +362,7 @@ createIndexStatement returns [CreateIndexStatement expr]\n alterTableStatement returns [AlterTableStatement expr]\n     @init {\n         AlterTableStatement.Type type = null;\n-        String validator = null;\n-        ColumnIdentifier columnName = null;\n-        Map<String, String> propertyMap = null;\n+        props = new HashMap<String, String>();\n     }\n     : K_ALTER K_COLUMNFAMILY cf=columnFamilyName\n           ( K_ALTER id=cident K_TYPE v=comparatorType { type = AlterTableStatement.Type.ALTER; }", "filename": "src/java/org/apache/cassandra/cql3/Cql.g"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/36a9f9bd8f70b35a13fe510576635c619b2b81ff/src/java/org/apache/cassandra/cql3/statements/AlterTableStatement.java", "blob_url": "https://github.com/apache/cassandra/blob/36a9f9bd8f70b35a13fe510576635c619b2b81ff/src/java/org/apache/cassandra/cql3/statements/AlterTableStatement.java", "sha": "37db2fd72ff91e667d86e1c7cbbe8aeb87ac60aa", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/AlterTableStatement.java?ref=36a9f9bd8f70b35a13fe510576635c619b2b81ff", "patch": "@@ -47,7 +47,7 @@ public AlterTableStatement(CFName name, Type type, ColumnIdentifier columnName,\n     {\n         super(name);\n         this.oType = type;\n-        this.columnName = null;\n+        this.columnName = columnName;\n         this.validator = validator; // used only for ADD/ALTER commands\n         this.cfProps.addAll(propertyMap);\n     }", "filename": "src/java/org/apache/cassandra/cql3/statements/AlterTableStatement.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/5cde93d9607ddbdb5316afaa2be9b9132d1bec3f", "parent": "https://github.com/apache/cassandra/commit/3931ee709da29d3b9d9c28b8d0ef34cfdb357c1c", "message": "Fix intermittent NPE in get_slice\n\npatch by jbellis; reviewed by vijay for CASSANDRA-4095", "bug_id": "cassandra_95", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/5cde93d9607ddbdb5316afaa2be9b9132d1bec3f/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/5cde93d9607ddbdb5316afaa2be9b9132d1bec3f/CHANGES.txt", "sha": "bf1a34ff0cb5faeb19d7bfd77233068fcb31091f", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=5cde93d9607ddbdb5316afaa2be9b9132d1bec3f", "patch": "@@ -15,7 +15,8 @@\n    tasks and upgradesstables (CASSANDRA-3985)\n  * fix NPE on invalid CQL delete command (CASSANDRA-3755)\n  * allow custom types in CLI's assume command (CASSANDRA-4081)\n- * Fix totalBytes count for parallel compactions (CASSANDRA-3758)\n+ * fix totalBytes count for parallel compactions (CASSANDRA-3758)\n+ * fix intermittent NPE in get_slice (CASSANDRA-4095)\n \n \n 1.0.8", "filename": "CHANGES.txt"}, {"additions": 5, "raw_url": "https://github.com/apache/cassandra/raw/5cde93d9607ddbdb5316afaa2be9b9132d1bec3f/src/java/org/apache/cassandra/db/Row.java", "blob_url": "https://github.com/apache/cassandra/blob/5cde93d9607ddbdb5316afaa2be9b9132d1bec3f/src/java/org/apache/cassandra/db/Row.java", "sha": "71a73323414cf811c36baf25638f85d8ae1ee2d5", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/Row.java?ref=5cde93d9607ddbdb5316afaa2be9b9132d1bec3f", "patch": "@@ -45,6 +45,11 @@ public Row(DecoratedKey<?> key, ColumnFamily cf)\n         this.cf = cf;\n     }\n \n+    public int getLiveColumnCount()\n+    {\n+        return cf == null ? 0 : cf.getLiveColumnCount();\n+    }\n+\n     @Override\n     public String toString()\n     {", "filename": "src/java/org/apache/cassandra/db/Row.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/5cde93d9607ddbdb5316afaa2be9b9132d1bec3f/src/java/org/apache/cassandra/db/SliceFromReadCommand.java", "blob_url": "https://github.com/apache/cassandra/blob/5cde93d9607ddbdb5316afaa2be9b9132d1bec3f/src/java/org/apache/cassandra/db/SliceFromReadCommand.java", "sha": "be73472ba8d2946ad1721c2b8f79e1d54a8862bf", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/SliceFromReadCommand.java?ref=5cde93d9607ddbdb5316afaa2be9b9132d1bec3f", "patch": "@@ -73,7 +73,7 @@ public Row getRow(Table table) throws IOException\n     public ReadCommand maybeGenerateRetryCommand(RepairCallback handler, Row row)\n     {\n         int maxLiveColumns = handler.getMaxLiveColumns();\n-        int liveColumnsInRow = row != null ? row.cf.getLiveColumnCount() : 0;\n+        int liveColumnsInRow = row != null ? row.getLiveColumnCount() : 0;\n \n         assert maxLiveColumns <= count;\n         // We generate a retry if at least one node reply with count live columns but after merge we have less", "filename": "src/java/org/apache/cassandra/db/SliceFromReadCommand.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/b0dfb4cdc4717a4ba759cc3353e29cc76235d74e", "parent": "https://github.com/apache/cassandra/commit/281af5e4f7e37cc82a8f37ce56bd7754ec38306b", "message": "fix NPE on invalid CQL DELETE command\n\npatch by dbrosius; reviewed by slebresne for CASSANDRA-3755", "bug_id": "cassandra_96", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/b0dfb4cdc4717a4ba759cc3353e29cc76235d74e/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/b0dfb4cdc4717a4ba759cc3353e29cc76235d74e/CHANGES.txt", "sha": "e4d207c1d423b3f15cdeeb84c8c27d81d81c510e", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=b0dfb4cdc4717a4ba759cc3353e29cc76235d74e", "patch": "@@ -13,6 +13,7 @@\n  * fix race leading to super columns assertion failure (CASSANDRA-3957)\n  * ensure that directory is selected for compaction for user-defined\n    tasks and upgradesstables (CASSANDRA-3985)\n+ * fix NPE on invalid CQL delete command (CASSANDRA-3755)\n \n \n 1.0.8", "filename": "CHANGES.txt"}, {"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/b0dfb4cdc4717a4ba759cc3353e29cc76235d74e/src/java/org/apache/cassandra/cql/DeleteStatement.java", "blob_url": "https://github.com/apache/cassandra/blob/b0dfb4cdc4717a4ba759cc3353e29cc76235d74e/src/java/org/apache/cassandra/cql/DeleteStatement.java", "sha": "1b33a01bf555db589901e08c8ddd65e9566562c6", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql/DeleteStatement.java?ref=b0dfb4cdc4717a4ba759cc3353e29cc76235d74e", "patch": "@@ -74,25 +74,26 @@ public DeleteStatement(List<Term> columns, String keyspace, String columnFamily,\n     /** {@inheritDoc} */\n     public List<IMutation> prepareRowMutations(String keyspace, ClientState clientState, Long timestamp) throws InvalidRequestException\n     {\n+        CFMetaData metadata = validateColumnFamily(keyspace, columnFamily);\n+\n         clientState.hasColumnFamilyAccess(columnFamily, Permission.WRITE);\n         AbstractType<?> keyType = Schema.instance.getCFMetaData(keyspace, columnFamily).getKeyValidator();\n \n         List<IMutation> rowMutations = new ArrayList<IMutation>();\n \n         for (Term key : keys)\n         {\n-            rowMutations.add(mutationForKey(key.getByteBuffer(keyType), keyspace, timestamp, clientState));\n+            rowMutations.add(mutationForKey(key.getByteBuffer(keyType), keyspace, timestamp, clientState, metadata));\n         }\n \n         return rowMutations;\n     }\n \n     /** {@inheritDoc} */\n-    public RowMutation mutationForKey(ByteBuffer key, String keyspace, Long timestamp, ClientState clientState) throws InvalidRequestException\n+    public RowMutation mutationForKey(ByteBuffer key, String keyspace, Long timestamp, ClientState clientState, CFMetaData metadata) throws InvalidRequestException\n     {\n         RowMutation rm = new RowMutation(keyspace, key);\n \n-        CFMetaData metadata = validateColumnFamily(keyspace, columnFamily);\n         QueryProcessor.validateKeyAlias(metadata, keyName);\n \n         AbstractType comparator = metadata.getComparatorFor(null);", "filename": "src/java/org/apache/cassandra/cql/DeleteStatement.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/417b175fa4bfc80994b3d4e85c9f8d93f3d9ab60", "parent": "https://github.com/apache/cassandra/commit/1d850e1a5647697d58c1c37a607d4b3809ca7f9a", "message": "fix NPE in index summarization\npatch by yukim; reviewed by dbrosius for CASSANDRA-4023", "bug_id": "cassandra_97", "file": [{"additions": 12, "raw_url": "https://github.com/apache/cassandra/raw/417b175fa4bfc80994b3d4e85c9f8d93f3d9ab60/src/java/org/apache/cassandra/db/RowIndexEntry.java", "blob_url": "https://github.com/apache/cassandra/blob/417b175fa4bfc80994b3d4e85c9f8d93f3d9ab60/src/java/org/apache/cassandra/db/RowIndexEntry.java", "sha": "aea3c2fe4ada58e77c19a085d039621d65230ce6", "changes": 12, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/RowIndexEntry.java?ref=417b175fa4bfc80994b3d4e85c9f8d93f3d9ab60", "patch": "@@ -90,6 +90,18 @@ public void serialize(RowIndexEntry rie, DataOutput dos) throws IOException\n             }\n         }\n \n+        public RowIndexEntry deserializePositionOnly(DataInput dis, Descriptor descriptor) throws IOException\n+        {\n+            long position = dis.readLong();\n+            if (descriptor.hasPromotedIndexes)\n+            {\n+                int size = dis.readInt();\n+                if (size > 0)\n+                    FileUtils.skipBytesFully(dis, size);\n+            }\n+            return new RowIndexEntry(position);\n+        }\n+\n         public RowIndexEntry deserialize(DataInput dis, Descriptor descriptor) throws IOException\n         {\n             long position = dis.readLong();", "filename": "src/java/org/apache/cassandra/db/RowIndexEntry.java"}, {"additions": 11, "raw_url": "https://github.com/apache/cassandra/raw/417b175fa4bfc80994b3d4e85c9f8d93f3d9ab60/src/java/org/apache/cassandra/io/sstable/SSTableReader.java", "blob_url": "https://github.com/apache/cassandra/blob/417b175fa4bfc80994b3d4e85c9f8d93f3d9ab60/src/java/org/apache/cassandra/io/sstable/SSTableReader.java", "sha": "9799846401057cc023376f1b2928ddd1c18724e9", "changes": 16, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/SSTableReader.java?ref=417b175fa4bfc80994b3d4e85c9f8d93f3d9ab60", "patch": "@@ -360,23 +360,24 @@ private void load(boolean recreatebloom, Set<DecoratedKey> keysToLoadInCache) th\n                 DecoratedKey decoratedKey = null;\n                 int len = ByteBufferUtil.readShortLength(input);\n \n+                // when primary index file contains info other than data position, there is noway to determine\n+                // the last key without deserializing index entry\n                 boolean firstKey = left == null;\n-                boolean lastKey = indexPosition + DBConstants.SHORT_SIZE + len + DBConstants.LONG_SIZE == indexSize;\n+                boolean lastKeyForUnpromoted = indexPosition + DBConstants.SHORT_SIZE + len + DBConstants.LONG_SIZE == indexSize;\n                 boolean shouldAddEntry = indexSummary.shouldAddEntry();\n-                if (shouldAddEntry || cacheLoading || recreatebloom || firstKey || lastKey)\n+                if (shouldAddEntry || cacheLoading || recreatebloom || firstKey || lastKeyForUnpromoted || descriptor.hasPromotedIndexes)\n                 {\n                     decoratedKey = decodeKey(partitioner, descriptor, ByteBufferUtil.read(input, len));\n                     if (firstKey)\n                         left = decoratedKey;\n-                    if (lastKey)\n-                        right = decoratedKey;\n+                    right = decoratedKey;\n                 }\n                 else\n                 {\n                     FileUtils.skipBytesFully(input, len);\n                 }\n \n-                RowIndexEntry indexEntry = RowIndexEntry.serializer.deserialize(input, descriptor);\n+                RowIndexEntry indexEntry = null;\n                 if (decoratedKey != null)\n                 {\n                     if (recreatebloom)\n@@ -385,8 +386,13 @@ private void load(boolean recreatebloom, Set<DecoratedKey> keysToLoadInCache) th\n                         indexSummary.addEntry(decoratedKey, indexPosition);\n                     // if key cache could be used and we have key already pre-loaded\n                     if (cacheLoading && keysToLoadInCache.contains(decoratedKey))\n+                    {\n+                        indexEntry = RowIndexEntry.serializer.deserialize(input, descriptor);\n                         cacheKey(decoratedKey, indexEntry);\n+                    }\n                 }\n+                if (indexEntry == null)\n+                    indexEntry = RowIndexEntry.serializer.deserializePositionOnly(input, descriptor);\n \n                 indexSummary.incrementRowid();\n                 ibuilder.addPotentialBoundary(indexPosition);", "filename": "src/java/org/apache/cassandra/io/sstable/SSTableReader.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/d4eaf3cab3ba5726503934a6c5b026aae399aa04", "parent": "https://github.com/apache/cassandra/commit/d025bec100dfa21b297a14103e5ae10af7aaf2c8", "message": "Guard against NPE in SSTableIdentityIterator\n\npatch by dbrosius; reviewed by slebresne for CASSANDRA-4056", "bug_id": "cassandra_98", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/d4eaf3cab3ba5726503934a6c5b026aae399aa04/src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java", "blob_url": "https://github.com/apache/cassandra/blob/d4eaf3cab3ba5726503934a6c5b026aae399aa04/src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java", "sha": "242b24973e7e9fb12ba7a04c957c90e22c64792f", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java?ref=d4eaf3cab3ba5726503934a6c5b026aae399aa04", "patch": "@@ -151,7 +151,8 @@ private SSTableIdentityIterator(CFMetaData metadata, DataInput input, DecoratedK\n         }\n         catch (IOException e)\n         {\n-            sstable.markSuspect();\n+            if (sstable != null)\n+                sstable.markSuspect();\n             throw new IOError(e);\n         }\n     }", "filename": "src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/44d6f49bb051a3a49fb2b758b6fb8016a1845f13", "parent": "https://github.com/apache/cassandra/commit/9dbb1b7757b1601e78254fde5a7142e93f46b620", "message": "fix NPE in DefsTest and DatabaseDescriptorTest caused by not initialized (started) Gossiper", "bug_id": "cassandra_99", "file": [{"additions": 26, "raw_url": "https://github.com/apache/cassandra/raw/44d6f49bb051a3a49fb2b758b6fb8016a1845f13/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java", "blob_url": "https://github.com/apache/cassandra/blob/44d6f49bb051a3a49fb2b758b6fb8016a1845f13/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java", "sha": "1cb2b64c5b56722faa5d4de118e343d38a169866", "changes": 42, "status": "modified", "deletions": 16, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java?ref=44d6f49bb051a3a49fb2b758b6fb8016a1845f13", "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.cassandra.CleanupHelper;\n import org.apache.cassandra.db.migration.AddKeyspace;\n+import org.apache.cassandra.gms.Gossiper;\n import org.apache.cassandra.locator.SimpleStrategy;\n import org.apache.cassandra.thrift.InvalidRequestException;\n \n@@ -64,25 +65,34 @@ public void testTransKsMigration() throws IOException, ConfigurationException\n         CleanupHelper.cleanupAndLeaveDirs();\n         DatabaseDescriptor.loadSchemas();\n         assert Schema.instance.getNonSystemTables().size() == 0;\n-        \n-        // add a few.\n-        AddKeyspace ks0 = new AddKeyspace(KSMetaData.testMetadata(\"ks0\", SimpleStrategy.class, KSMetaData.optsWithRF(3)));\n-        ks0.apply();\n-        AddKeyspace ks1 = new AddKeyspace(KSMetaData.testMetadata(\"ks1\", SimpleStrategy.class, KSMetaData.optsWithRF(3)));\n-        ks1.apply();\n \n-        assert Schema.instance.getTableDefinition(\"ks0\") != null;\n-        assert Schema.instance.getTableDefinition(\"ks1\") != null;\n+        Gossiper.instance.start((int)(System.currentTimeMillis() / 1000));\n \n-        Schema.instance.clearTableDefinition(Schema.instance.getTableDefinition(\"ks0\"));\n-        Schema.instance.clearTableDefinition(Schema.instance.getTableDefinition(\"ks1\"));\n+        try\n+        {\n+            // add a few.\n+            AddKeyspace ks0 = new AddKeyspace(KSMetaData.testMetadata(\"ks0\", SimpleStrategy.class, KSMetaData.optsWithRF(3)));\n+            ks0.apply();\n+            AddKeyspace ks1 = new AddKeyspace(KSMetaData.testMetadata(\"ks1\", SimpleStrategy.class, KSMetaData.optsWithRF(3)));\n+            ks1.apply();\n \n-        assert Schema.instance.getTableDefinition(\"ks0\") == null;\n-        assert Schema.instance.getTableDefinition(\"ks1\") == null;\n-        \n-        DatabaseDescriptor.loadSchemas();\n+            assert Schema.instance.getTableDefinition(\"ks0\") != null;\n+            assert Schema.instance.getTableDefinition(\"ks1\") != null;\n+\n+            Schema.instance.clearTableDefinition(Schema.instance.getTableDefinition(\"ks0\"));\n+            Schema.instance.clearTableDefinition(Schema.instance.getTableDefinition(\"ks1\"));\n+\n+            assert Schema.instance.getTableDefinition(\"ks0\") == null;\n+            assert Schema.instance.getTableDefinition(\"ks1\") == null;\n \n-        assert Schema.instance.getTableDefinition(\"ks0\") != null;\n-        assert Schema.instance.getTableDefinition(\"ks1\") != null;\n+            DatabaseDescriptor.loadSchemas();\n+\n+            assert Schema.instance.getTableDefinition(\"ks0\") != null;\n+            assert Schema.instance.getTableDefinition(\"ks1\") != null;\n+        }\n+        finally\n+        {\n+            Gossiper.instance.stop();\n+        }\n     }\n }", "filename": "test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java"}, {"additions": 15, "raw_url": "https://github.com/apache/cassandra/raw/44d6f49bb051a3a49fb2b758b6fb8016a1845f13/test/unit/org/apache/cassandra/db/DefsTest.java", "blob_url": "https://github.com/apache/cassandra/blob/44d6f49bb051a3a49fb2b758b6fb8016a1845f13/test/unit/org/apache/cassandra/db/DefsTest.java", "sha": "9bfa82c1bf0054670cc7eeea392022cae0450935", "changes": 15, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/db/DefsTest.java?ref=44d6f49bb051a3a49fb2b758b6fb8016a1845f13", "patch": "@@ -39,6 +39,7 @@\n import org.apache.cassandra.db.migration.Migration;\n import org.apache.cassandra.db.migration.UpdateColumnFamily;\n import org.apache.cassandra.db.migration.UpdateKeyspace;\n+import org.apache.cassandra.gms.Gossiper;\n import org.apache.cassandra.io.sstable.Component;\n import org.apache.cassandra.io.sstable.Descriptor;\n import org.apache.cassandra.io.sstable.SSTableDeletingTask;\n@@ -49,10 +50,24 @@\n import org.apache.cassandra.thrift.IndexType;\n import org.apache.cassandra.utils.ByteBufferUtil;\n \n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n \n public class DefsTest extends CleanupHelper\n {\n+    @BeforeClass\n+    public static void startGossiper()\n+    {\n+        Gossiper.instance.start((int) (System.currentTimeMillis() / 1000));\n+    }\n+\n+    @AfterClass\n+    public static void stopGossiper()\n+    {\n+        Gossiper.instance.stop();\n+    }\n+\n     @Test\n     public void ensureStaticCFMIdsAreLessThan1000()\n     {", "filename": "test/unit/org/apache/cassandra/db/DefsTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/e0c655dc8555bacd3c16a4a69be6776e3f7b1b1e", "parent": "https://github.com/apache/cassandra/commit/82a75d4ae7e7c21aa6e4106ed5457c4dfc2634cb", "message": "Avoids NPE on aborted stream sessions\n\npatch by scode; reviewed by slebresne for CASSANDRA-3904", "bug_id": "cassandra_100", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/e0c655dc8555bacd3c16a4a69be6776e3f7b1b1e/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/e0c655dc8555bacd3c16a4a69be6776e3f7b1b1e/CHANGES.txt", "sha": "10ff2be1ff1fe6d41d20000d4a5b44dd479c36df", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=e0c655dc8555bacd3c16a4a69be6776e3f7b1b1e", "patch": "@@ -74,6 +74,7 @@\n  * Make secondary indexes CF inherit compression and compaction from their\n    parent CF (CASSANDRA-3877)\n  * Finish cleanup up tombstone purge code (CASSANDRA-3872)\n+ * Avoid NPE on aboarted stream-out sessions (CASSANDRA-3904)\n \n \n 1.0.8", "filename": "CHANGES.txt"}, {"additions": 7, "raw_url": "https://github.com/apache/cassandra/raw/e0c655dc8555bacd3c16a4a69be6776e3f7b1b1e/src/java/org/apache/cassandra/streaming/FileStreamTask.java", "blob_url": "https://github.com/apache/cassandra/blob/e0c655dc8555bacd3c16a4a69be6776e3f7b1b1e/src/java/org/apache/cassandra/streaming/FileStreamTask.java", "sha": "948bea77b9ad64323cb649b18f2588a2dffee958", "changes": 8, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/FileStreamTask.java?ref=e0c655dc8555bacd3c16a4a69be6776e3f7b1b1e", "patch": "@@ -94,7 +94,13 @@ public void runMayThrow() throws IOException\n             // successfully connected: stream.\n             // (at this point, if we fail, it is the receiver's job to re-request)\n             stream();\n-            if (StreamOutSession.get(to, header.sessionId).getFiles().size() == 0)\n+\n+            StreamOutSession session = StreamOutSession.get(to, header.sessionId);\n+            if (session == null)\n+            {\n+                logger.info(\"Found no stream out session at end of file stream task - this is expected if the receiver went down\");\n+            }\n+            else if (session.getFiles().size() == 0)\n             {\n                 // we are the last of our kind, receive the final confirmation before closing\n                 receiveReply();", "filename": "src/java/org/apache/cassandra/streaming/FileStreamTask.java"}, {"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/e0c655dc8555bacd3c16a4a69be6776e3f7b1b1e/src/java/org/apache/cassandra/streaming/StreamOutSession.java", "blob_url": "https://github.com/apache/cassandra/blob/e0c655dc8555bacd3c16a4a69be6776e3f7b1b1e/src/java/org/apache/cassandra/streaming/StreamOutSession.java", "sha": "ea5ccda12bc0a32d91e0f150f980960654abed66", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamOutSession.java?ref=e0c655dc8555bacd3c16a4a69be6776e3f7b1b1e", "patch": "@@ -229,7 +229,8 @@ public void convict(InetAddress endpoint, double phi)\n         if (phi < 2 * DatabaseDescriptor.getPhiConvictThreshold())\n             return;\n \n-        logger.error(\"StreamOutSession {} failed because {} died or was restarted/removed\", endpoint);\n+        logger.error(\"StreamOutSession {} failed because {} died or was restarted/removed (streams may still be active \"\n+                + \"in background, but further streams won't be started)\", endpoint);\n         close(false);\n     }\n }", "filename": "src/java/org/apache/cassandra/streaming/StreamOutSession.java"}], "repo": "cassandra"}]
[{"commit": "https://github.com/apache/cassandra/commit/7c374547793c30f62366b2a28a2ca2c1d914f146", "parent": "https://github.com/apache/cassandra/commit/341611095a884f9222326af6207e838888b5764d", "message": "fixes NPE exception in ClientState.hasKeyspaceSchemaAccess(...) method introduced by CASSANDRA-3759", "bug_id": "cassandra_101", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/7c374547793c30f62366b2a28a2ca2c1d914f146/src/java/org/apache/cassandra/service/ClientState.java", "blob_url": "https://github.com/apache/cassandra/blob/7c374547793c30f62366b2a28a2ca2c1d914f146/src/java/org/apache/cassandra/service/ClientState.java", "sha": "ea1af500d39e4c5e8a3793079ab8b7e51780fc64", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/ClientState.java?ref=7c374547793c30f62366b2a28a2ca2c1d914f146", "patch": "@@ -124,7 +124,7 @@ public void hasKeyspaceSchemaAccess(Permission perm) throws InvalidRequestExcept\n         validateLogin();\n         \n         // hardcode disallowing messing with system keyspace\n-        if (keyspace.equalsIgnoreCase(Table.SYSTEM_TABLE) && perm == Permission.WRITE)\n+        if (keyspace != null && keyspace.equalsIgnoreCase(Table.SYSTEM_TABLE) && perm == Permission.WRITE)\n             throw new InvalidRequestException(\"system keyspace is not user-modifiable\");\n \n         resourceClear();", "filename": "src/java/org/apache/cassandra/service/ClientState.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/2f115d4342e3830fbf320cb4a4f34f4c3613b29d", "parent": "https://github.com/apache/cassandra/commit/f6edaa8555307dc94c905e5627e79c97d06b254e", "message": "fixes NPE exception in ClientState.hasKeyspaceSchemaAccess(...) method introduced by CASSANDRA-3759", "bug_id": "cassandra_102", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/2f115d4342e3830fbf320cb4a4f34f4c3613b29d/src/java/org/apache/cassandra/service/ClientState.java", "blob_url": "https://github.com/apache/cassandra/blob/2f115d4342e3830fbf320cb4a4f34f4c3613b29d/src/java/org/apache/cassandra/service/ClientState.java", "sha": "152d6594965aa34ec65fe98ddb711e3e8bd44918", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/ClientState.java?ref=2f115d4342e3830fbf320cb4a4f34f4c3613b29d", "patch": "@@ -141,7 +141,7 @@ public void hasKeyspaceSchemaAccess(Permission perm) throws InvalidRequestExcept\n         validateLogin();\n         \n         // hardcode disallowing messing with system keyspace\n-        if (keyspace.equalsIgnoreCase(Table.SYSTEM_TABLE) && perm == Permission.WRITE)\n+        if (keyspace != null && keyspace.equalsIgnoreCase(Table.SYSTEM_TABLE) && perm == Permission.WRITE)\n             throw new InvalidRequestException(\"system keyspace is not user-modifiable\");\n \n         resourceClear();", "filename": "src/java/org/apache/cassandra/service/ClientState.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/f6ea46e93ccd9d5388a6f0fa37ddef9cf2279997", "parent": "https://github.com/apache/cassandra/commit/ba79107aefb8a40047c4068b8d3a3f838ddb62fc", "message": "Avoid NPE on null nested UDT inside a set\n\nPatch by Robert Stupp; reviewed by Tyler Hobbs for CASSANDRA-8105", "bug_id": "cassandra_103", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/f6ea46e93ccd9d5388a6f0fa37ddef9cf2279997/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/f6ea46e93ccd9d5388a6f0fa37ddef9cf2279997/CHANGES.txt", "sha": "0d3941695062b297ef6567a32fe82464408ddd70", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=f6ea46e93ccd9d5388a6f0fa37ddef9cf2279997", "patch": "@@ -1,4 +1,5 @@\n 2.1.1\n+ * Fix NPE on null nested UDT inside a set (CASSANDRA-8105)\n  * Fix exception when querying secondary index on set items or map keys\n    when some clustering columns are specified (CASSANDRA-8073)\n  * Send proper error response when there is an error during native", "filename": "CHANGES.txt"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/f6ea46e93ccd9d5388a6f0fa37ddef9cf2279997/src/java/org/apache/cassandra/db/marshal/TupleType.java", "blob_url": "https://github.com/apache/cassandra/blob/f6ea46e93ccd9d5388a6f0fa37ddef9cf2279997/src/java/org/apache/cassandra/db/marshal/TupleType.java", "sha": "42aaba13cfe679bf4b28ada7b008725549a0fd3d", "changes": 5, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/marshal/TupleType.java?ref=f6ea46e93ccd9d5388a6f0fa37ddef9cf2279997", "patch": "@@ -72,8 +72,7 @@ public int compare(ByteBuffer o1, ByteBuffer o2)\n         ByteBuffer bb1 = o1.duplicate();\n         ByteBuffer bb2 = o2.duplicate();\n \n-        int i = 0;\n-        while (bb1.remaining() > 0 && bb2.remaining() > 0)\n+        for (int i = 0; bb1.remaining() > 0 && bb2.remaining() > 0; i++)\n         {\n             AbstractType<?> comparator = types.get(i);\n \n@@ -95,8 +94,6 @@ public int compare(ByteBuffer o1, ByteBuffer o2)\n             int cmp = comparator.compare(value1, value2);\n             if (cmp != 0)\n                 return cmp;\n-\n-            ++i;\n         }\n \n         if (bb1.remaining() == 0)", "filename": "src/java/org/apache/cassandra/db/marshal/TupleType.java"}, {"additions": 19, "raw_url": "https://github.com/apache/cassandra/raw/f6ea46e93ccd9d5388a6f0fa37ddef9cf2279997/test/unit/org/apache/cassandra/cql3/UserTypesTest.java", "blob_url": "https://github.com/apache/cassandra/blob/f6ea46e93ccd9d5388a6f0fa37ddef9cf2279997/test/unit/org/apache/cassandra/cql3/UserTypesTest.java", "sha": "184de19cb4d490b0f1529613b0efc3a68c13aedb", "changes": 19, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/UserTypesTest.java?ref=f6ea46e93ccd9d5388a6f0fa37ddef9cf2279997", "patch": "@@ -31,6 +31,25 @@ public void testInvalidField() throws Throwable\n         assertInvalid(\"INSERT INTO %s (k, v) VALUES (?, {s : ?})\", 0, 1);\n     }\n \n+    @Test\n+    public void testCassandra8105() throws Throwable\n+    {\n+        String ut1 = createType(\"CREATE TYPE %s (a int, b int)\");\n+        String ut2 = createType(\"CREATE TYPE %s (j frozen<\" + KEYSPACE + \".\" + ut1 + \">, k int)\");\n+        createTable(\"CREATE TABLE %s (x int PRIMARY KEY, y set<frozen<\" + KEYSPACE + \".\" + ut2 + \">>)\");\n+        execute(\"INSERT INTO %s (x, y) VALUES (1, { { k: 1 } })\");\n+\n+        String ut3 = createType(\"CREATE TYPE %s (a int, b int)\");\n+        String ut4 = createType(\"CREATE TYPE %s (j frozen<\" + KEYSPACE + \".\" + ut3 + \">, k int)\");\n+        createTable(\"CREATE TABLE %s (x int PRIMARY KEY, y list<frozen<\" + KEYSPACE + \".\" + ut4 + \">>)\");\n+        execute(\"INSERT INTO %s (x, y) VALUES (1, [ { k: 1 } ])\");\n+\n+        String ut5 = createType(\"CREATE TYPE %s (a int, b int)\");\n+        String ut6 = createType(\"CREATE TYPE %s (i int, j frozen<\" + KEYSPACE + \".\" + ut5 + \">)\");\n+        createTable(\"CREATE TABLE %s (x int PRIMARY KEY, y set<frozen<\" + KEYSPACE + \".\" + ut6 + \">>)\");\n+        execute(\"INSERT INTO %s (x, y) VALUES (1, { { i: 1 } })\");\n+    }\n+\n     @Test\n     public void testFor7684() throws Throwable\n     {", "filename": "test/unit/org/apache/cassandra/cql3/UserTypesTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/932b5eb46d413af94add6ac199d4ef043234e55e", "parent": "https://github.com/apache/cassandra/commit/3a94b3379ec9efb012d227af684c61ca19291b99", "message": "Avoid NPE when creating table w/ frozen sets, lists\n\nPatch by Robert Stupp; reviewed by Tyler Hobbs for CASSANDRA-8104", "bug_id": "cassandra_104", "file": [{"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/932b5eb46d413af94add6ac199d4ef043234e55e/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/932b5eb46d413af94add6ac199d4ef043234e55e/CHANGES.txt", "sha": "1c7ee383dd8627ba8e31ca7e069aa06c8ae395bb", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=932b5eb46d413af94add6ac199d4ef043234e55e", "patch": "@@ -1,5 +1,7 @@\n 2.1.1\n- * Fix high memory use due to tracking reads on incrementally opened sstable readers (CASSANDRA-8066)\n+ * Fix NPE when creating a table with frozen sets, lists (CASSANDRA-8104)\n+ * Fix high memory use due to tracking reads on incrementally opened sstable\n+   readers (CASSANDRA-8066)\n  * Fix EXECUTE request with skipMetadata=false returning no metadata\n    (CASSANDRA-8054)\n  * Allow concurrent use of CQLBulkOutputFormat (CASSANDRA-7776)", "filename": "CHANGES.txt"}, {"additions": 5, "raw_url": "https://github.com/apache/cassandra/raw/932b5eb46d413af94add6ac199d4ef043234e55e/src/java/org/apache/cassandra/cql3/CQL3Type.java", "blob_url": "https://github.com/apache/cassandra/blob/932b5eb46d413af94add6ac199d4ef043234e55e/src/java/org/apache/cassandra/cql3/CQL3Type.java", "sha": "6d5528510eb9ffc18635df97652d87437b3a9be1", "changes": 8, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/CQL3Type.java?ref=932b5eb46d413af94add6ac199d4ef043234e55e", "patch": "@@ -347,7 +347,7 @@ public static Raw set(CQL3Type.Raw t) throws InvalidRequestException\n         public static Raw tuple(List<CQL3Type.Raw> ts) throws InvalidRequestException\n         {\n             for (int i = 0; i < ts.size(); i++)\n-                if (ts.get(i).isCounter())\n+                if (ts.get(i) != null && ts.get(i).isCounter())\n                     throw new InvalidRequestException(\"counters are not allowed inside tuples\");\n \n             return new RawTuple(ts);\n@@ -404,7 +404,8 @@ private RawCollection(CollectionType.Kind kind, CQL3Type.Raw keys, CQL3Type.Raw\n \n             public Raw freeze()\n             {\n-                keys.freeze();\n+                if (keys != null)\n+                    keys.freeze();\n                 values.freeze();\n                 return super.freeze();\n             }\n@@ -500,7 +501,8 @@ private RawTuple(List<CQL3Type.Raw> types)\n             public Raw freeze()\n             {\n                 for (CQL3Type.Raw t : types)\n-                    t.freeze();\n+                    if (t != null)\n+                        t.freeze();\n                 return super.freeze();\n             }\n ", "filename": "src/java/org/apache/cassandra/cql3/CQL3Type.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/8206839328e665108e33de8b48926942d46cf12e", "parent": "https://github.com/apache/cassandra/commit/944608428116b47c25596dd14ef0e697b971197f", "message": "DatabaseDescriptor should set some defaults to prevent NPE's.\n\nSet Disk Optimization Strategy and Partitioner in DD.clientInitialization.\n\npatch by Jeremiah Jordan; reviewed by Yuki Morishita for CASSANDRA-12667", "bug_id": "cassandra_105", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/8206839328e665108e33de8b48926942d46cf12e/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/8206839328e665108e33de8b48926942d46cf12e/CHANGES.txt", "sha": "74a23722fa2124b41f36095ef54a6639def4916a", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=8206839328e665108e33de8b48926942d46cf12e", "patch": "@@ -1,4 +1,5 @@\n 3.10\n+ * Fix NPE when using CQLSSTableWriter (CASSANDRA-12667)\n  * Support optional backpressure strategies at the coordinator (CASSANDRA-9318)\n  * Make randompartitioner work with new vnode allocation (CASSANDRA-12647)\n  * Fix cassandra-stress graphing (CASSANDRA-12237)", "filename": "CHANGES.txt"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/8206839328e665108e33de8b48926942d46cf12e/src/java/org/apache/cassandra/config/DatabaseDescriptor.java", "blob_url": "https://github.com/apache/cassandra/blob/8206839328e665108e33de8b48926942d46cf12e/src/java/org/apache/cassandra/config/DatabaseDescriptor.java", "sha": "963d5649a553d605d7c826a2ea9d169d03e5fe13", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=8206839328e665108e33de8b48926942d46cf12e", "patch": "@@ -44,6 +44,7 @@\n import org.apache.cassandra.config.Config.CommitLogSync;\n import org.apache.cassandra.config.Config.RequestSchedulerId;\n import org.apache.cassandra.dht.IPartitioner;\n+import org.apache.cassandra.dht.Murmur3Partitioner;\n import org.apache.cassandra.exceptions.ConfigurationException;\n import org.apache.cassandra.io.FSWriteError;\n import org.apache.cassandra.io.util.DiskOptimizationStrategy;\n@@ -218,6 +219,8 @@ public static void clientInitialization(boolean failIfDaemonOrTool)\n \n         Config.setClientMode(true);\n         conf = new Config();\n+        diskOptimizationStrategy = new SpinningDiskOptimizationStrategy();\n+        partitioner = Murmur3Partitioner.instance;\n     }\n \n     public static boolean isClientInitialized()", "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/8206839328e665108e33de8b48926942d46cf12e/src/java/org/apache/cassandra/io/sstable/CQLSSTableWriter.java", "blob_url": "https://github.com/apache/cassandra/blob/8206839328e665108e33de8b48926942d46cf12e/src/java/org/apache/cassandra/io/sstable/CQLSSTableWriter.java", "sha": "dd9eb599bd5b03e36158de540272a6d68b097f49", "changes": 4, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/CQLSSTableWriter.java?ref=8206839328e665108e33de8b48926942d46cf12e", "patch": "@@ -53,6 +53,7 @@\n import org.apache.cassandra.exceptions.RequestValidationException;\n import org.apache.cassandra.exceptions.SyntaxException;\n import org.apache.cassandra.io.sstable.format.SSTableFormat;\n+import org.apache.cassandra.io.util.SpinningDiskOptimizationStrategy;\n import org.apache.cassandra.schema.KeyspaceMetadata;\n import org.apache.cassandra.schema.KeyspaceParams;\n import org.apache.cassandra.schema.Types;\n@@ -105,9 +106,6 @@\n     static\n     {\n         DatabaseDescriptor.clientInitialization(false);\n-        // Partitioner is not set in client mode.\n-        if (DatabaseDescriptor.getPartitioner() == null)\n-            DatabaseDescriptor.setPartitionerUnsafe(Murmur3Partitioner.instance);\n     }\n \n     private final AbstractSSTableSimpleWriter writer;", "filename": "src/java/org/apache/cassandra/io/sstable/CQLSSTableWriter.java"}, {"additions": 0, "raw_url": "https://github.com/apache/cassandra/raw/8206839328e665108e33de8b48926942d46cf12e/test/microbench/org/apache/cassandra/test/microbench/MutationBench.java", "blob_url": "https://github.com/apache/cassandra/blob/8206839328e665108e33de8b48926942d46cf12e/test/microbench/org/apache/cassandra/test/microbench/MutationBench.java", "sha": "20d8ff5a30c89802dd4e5713724c4ae9f5ea18bf", "changes": 3, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/microbench/org/apache/cassandra/test/microbench/MutationBench.java?ref=8206839328e665108e33de8b48926942d46cf12e", "patch": "@@ -65,9 +65,6 @@\n     static\n     {\n         DatabaseDescriptor.clientInitialization(false);\n-        // Partitioner is not set in client mode.\n-        if (DatabaseDescriptor.getPartitioner() == null)\n-            DatabaseDescriptor.setPartitionerUnsafe(Murmur3Partitioner.instance);\n     }\n \n     static String keyspace = \"keyspace1\";", "filename": "test/microbench/org/apache/cassandra/test/microbench/MutationBench.java"}, {"additions": 0, "raw_url": "https://github.com/apache/cassandra/raw/8206839328e665108e33de8b48926942d46cf12e/tools/stress/src/org/apache/cassandra/io/sstable/StressCQLSSTableWriter.java", "blob_url": "https://github.com/apache/cassandra/blob/8206839328e665108e33de8b48926942d46cf12e/tools/stress/src/org/apache/cassandra/io/sstable/StressCQLSSTableWriter.java", "sha": "d9bf6690de77f5c17ea5ce5ed6342cdeff83bea8", "changes": 3, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/tools/stress/src/org/apache/cassandra/io/sstable/StressCQLSSTableWriter.java?ref=8206839328e665108e33de8b48926942d46cf12e", "patch": "@@ -99,9 +99,6 @@\n     static\n     {\n         DatabaseDescriptor.clientInitialization(false);\n-        // Partitioner is not set in client mode.\n-        if (DatabaseDescriptor.getPartitioner() == null)\n-            DatabaseDescriptor.setPartitionerUnsafe(Murmur3Partitioner.instance);\n     }\n \n     private final AbstractSSTableSimpleWriter writer;", "filename": "tools/stress/src/org/apache/cassandra/io/sstable/StressCQLSSTableWriter.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/cf76ac66af4344acaaf44f8dec3ef584cff79bf2", "parent": "https://github.com/apache/cassandra/commit/82136e3b7e4e3fbe08bd9bcb0220cf79a91760cd", "message": "Fix NPE when using collections in frozen tuple\n\npatch by omichallat; reviewed by slebresne for CASSANDRA-7869", "bug_id": "cassandra_106", "file": [{"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/cf76ac66af4344acaaf44f8dec3ef584cff79bf2/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/cf76ac66af4344acaaf44f8dec3ef584cff79bf2/CHANGES.txt", "sha": "93d77c106e8bd63a3283f9599b0d78f1d012f235", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=cf76ac66af4344acaaf44f8dec3ef584cff79bf2", "patch": "@@ -1,3 +1,7 @@\n+2.1.0\n+ * Add null check for keys when freezing collection (CASSANDRA-7869)\n+\n+\n 2.1.0-rc7\n  * Add frozen keyword and require UDT to be frozen (CASSANDRA-7857)\n  * Track added sstable size correctly (CASSANDRA-7239)", "filename": "CHANGES.txt"}, {"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/cf76ac66af4344acaaf44f8dec3ef584cff79bf2/src/java/org/apache/cassandra/cql3/CQL3Type.java", "blob_url": "https://github.com/apache/cassandra/blob/cf76ac66af4344acaaf44f8dec3ef584cff79bf2/src/java/org/apache/cassandra/cql3/CQL3Type.java", "sha": "bb3bc62fa5885f9866e333dedc2ce8648cc0d890", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/CQL3Type.java?ref=cf76ac66af4344acaaf44f8dec3ef584cff79bf2", "patch": "@@ -404,7 +404,8 @@ private RawCollection(CollectionType.Kind kind, CQL3Type.Raw keys, CQL3Type.Raw\n \n             public Raw freeze()\n             {\n-                keys.freeze();\n+                if (keys != null)\n+                    keys.freeze();\n                 values.freeze();\n                 return super.freeze();\n             }", "filename": "src/java/org/apache/cassandra/cql3/CQL3Type.java"}, {"additions": 39, "raw_url": "https://github.com/apache/cassandra/raw/cf76ac66af4344acaaf44f8dec3ef584cff79bf2/test/unit/org/apache/cassandra/cql3/TupleTypeTest.java", "blob_url": "https://github.com/apache/cassandra/blob/cf76ac66af4344acaaf44f8dec3ef584cff79bf2/test/unit/org/apache/cassandra/cql3/TupleTypeTest.java", "sha": "f8771c18dda896a4761ae3faf427aafe6d0e1e19", "changes": 39, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/TupleTypeTest.java?ref=cf76ac66af4344acaaf44f8dec3ef584cff79bf2", "patch": "@@ -100,4 +100,43 @@ public void testNonFrozenTuple() throws Throwable\n     {\n         assertInvalid(\"CREATE TABLE wrong (k int PRIMARY KEY, v tuple<int, text>)\");\n     }\n+\n+    @Test\n+    public void testFrozenTupleWithList() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (k int PRIMARY KEY, t frozen<tuple<text, list<int>>>)\");\n+\n+        execute(\"INSERT INTO %s (k, t) VALUES (?, ?)\", 0, tuple(\"foo\", list(2, 1)));\n+        execute(\"INSERT INTO %s (k, t) VALUES (?, ?)\", 1, tuple(\"bar\", list(3, 4)));\n+        assertAllRows(\n+            row(0, tuple(\"foo\", list(2, 1))),\n+            row(1, tuple(\"bar\", list(3, 4)))\n+        );\n+    }\n+\n+    @Test\n+    public void testFrozenTupleWithSet() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (k int PRIMARY KEY, t frozen<tuple<text, set<int>>>)\");\n+\n+        execute(\"INSERT INTO %s (k, t) VALUES (?, ?)\", 0, tuple(\"foo\", set(2, 1)));\n+        execute(\"INSERT INTO %s (k, t) VALUES (?, ?)\", 1, tuple(\"bar\", set(3, 4)));\n+        assertAllRows(\n+            row(0, tuple(\"foo\", set(2, 1))),\n+            row(1, tuple(\"bar\", set(3, 4)))\n+        );\n+    }\n+\n+    @Test\n+    public void testFrozenTupleWithMap() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (k int PRIMARY KEY, t frozen<tuple<text, map<int, int>>>)\");\n+\n+        execute(\"INSERT INTO %s (k, t) VALUES (?, ?)\", 0, tuple(\"foo\", map(2, 1)));\n+        execute(\"INSERT INTO %s (k, t) VALUES (?, ?)\", 1, tuple(\"bar\", map(3, 4)));\n+        assertAllRows(\n+            row(0, tuple(\"foo\", map(2, 1))),\n+            row(1, tuple(\"bar\", map(3, 4)))\n+        );\n+    }\n }", "filename": "test/unit/org/apache/cassandra/cql3/TupleTypeTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/254df46b19ea574084b9e5dd6810cdc403d16720", "parent": "https://github.com/apache/cassandra/commit/e4e56c2fd08037b4ddc7459f341e2c86c272e803", "message": "Fix NPE at compaction leftover cleanup for dropped table\n\npatch by yukim; reviewed by jbellis for CASSANDRA-7770", "bug_id": "cassandra_107", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/254df46b19ea574084b9e5dd6810cdc403d16720/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/254df46b19ea574084b9e5dd6810cdc403d16720/CHANGES.txt", "sha": "7c54a9e5886638da140cec1e982bea88999ee4c0", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=254df46b19ea574084b9e5dd6810cdc403d16720", "patch": "@@ -11,6 +11,7 @@\n  * Fix binding null values inside UDT (CASSANDRA-7685)\n  * Fix UDT field selection with empty fields (CASSANDRA-7670)\n  * Bogus deserialization of static cells from sstable (CASSANDRA-7684)\n+ * Fix NPE on compaction leftover cleanup for dropped table (CASSANDRA-7770)\n Merged from 2.0:\n  * Remove duplicates from StorageService.getJoiningNodes (CASSANDRA-7478)\n  * Clone token map outside of hot gossip loops (CASSANDRA-7758)", "filename": "CHANGES.txt"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/254df46b19ea574084b9e5dd6810cdc403d16720/src/java/org/apache/cassandra/service/CassandraDaemon.java", "blob_url": "https://github.com/apache/cassandra/blob/254df46b19ea574084b9e5dd6810cdc403d16720/src/java/org/apache/cassandra/service/CassandraDaemon.java", "sha": "a0dacee85bb86592d40f7ed3263cdb55e8f3de81", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/CassandraDaemon.java?ref=254df46b19ea574084b9e5dd6810cdc403d16720", "patch": "@@ -242,7 +242,9 @@ public void uncaughtException(Thread t, Throwable e)\n         for (Pair<String, String> kscf : unfinishedCompactions.keySet())\n         {\n             CFMetaData cfm = Schema.instance.getCFMetaData(kscf.left, kscf.right);\n-            ColumnFamilyStore.removeUnfinishedCompactionLeftovers(cfm, unfinishedCompactions.get(kscf));\n+            // CFMetaData can be null if CF is already dropped\n+            if (cfm != null)\n+                ColumnFamilyStore.removeUnfinishedCompactionLeftovers(cfm, unfinishedCompactions.get(kscf));\n         }\n         SystemKeyspace.discardCompactionsInProgress();\n ", "filename": "src/java/org/apache/cassandra/service/CassandraDaemon.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/a14211fbd147ba3219103549153254fa5f09fb1c", "parent": "https://github.com/apache/cassandra/commit/f39cb073ac0ecd68a3df4b60c43d6b0b8f3e8de6", "message": "Workaround JVM NPE on JMX bind failure\npatch by Brandon Williams; reviewed by tjake for CASSANDRA-7254", "bug_id": "cassandra_108", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/a14211fbd147ba3219103549153254fa5f09fb1c/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/a14211fbd147ba3219103549153254fa5f09fb1c/CHANGES.txt", "sha": "23be3380004b698ed756d340fad8bb8c5dd08640", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=a14211fbd147ba3219103549153254fa5f09fb1c", "patch": "@@ -1,4 +1,5 @@\n 2.0.10\n+ * Workaround JVM NPE on JMX bind failure (CASSANDRA-7254)\n  * Fix race in FileCacheService RemovalListener (CASSANDRA-7278)\n  * Fix inconsistent use of consistencyForCommit that allowed LOCAL_QUORUM\n    operations to incorrect become full QUORUM (CASSANDRA-7345)", "filename": "CHANGES.txt"}, {"additions": 7, "raw_url": "https://github.com/apache/cassandra/raw/a14211fbd147ba3219103549153254fa5f09fb1c/bin/cassandra", "blob_url": "https://github.com/apache/cassandra/blob/a14211fbd147ba3219103549153254fa5f09fb1c/bin/cassandra", "sha": "a950e0b18d0adcc0ed4fe56651b318375680d898", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/bin/cassandra?ref=a14211fbd147ba3219103549153254fa5f09fb1c", "patch": "@@ -201,6 +201,13 @@ while true; do\n     esac\n done\n \n+# see CASSANDRA-7254\n+\"$JAVA\" -cp $CLASSPATH $JVM_OPTS 2>&1 | grep -q 'Error: Exception thrown by the agent : java.lang.NullPointerException'\n+if [ $? -ne \"1\" ]; then \n+    echo Unable to bind JMX, is Cassandra already running?\n+    exit 1;\n+fi\n+\n # Start up the service\n launch_service \"$pidfile\" \"$foreground\" \"$properties\" \"$classname\"\n ", "filename": "bin/cassandra"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/12c694edb6910e11bae25231ba1517a8599cd6ff", "parent": "https://github.com/apache/cassandra/commit/9e3d13e70a23c3144c0f4de61c5666862011b996", "message": "Fix NPE when unknown prepared statement ID is used\n\nPatch by Tyler Hobbs; reviewed by Sylvain Lebresne for CASSANDRA-7454", "bug_id": "cassandra_109", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/12c694edb6910e11bae25231ba1517a8599cd6ff/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/12c694edb6910e11bae25231ba1517a8599cd6ff/CHANGES.txt", "sha": "171879eae5d9458b6d1c5daf9bf05e3e01611165", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=12c694edb6910e11bae25231ba1517a8599cd6ff", "patch": "@@ -1,5 +1,6 @@\n 2.1.0\n  * Improve schema merge performance (CASSANDRA-7444)\n+ * Fix NPE when unknown prepared statement ID is used (CASSANDRA-7454)\n Merged from 2.0:\n  * Fix CC#collectTimeOrderedData() tombstone optimisations (CASSANDRA-7394)\n  * Support DISTINCT for static columns and fix behaviour when DISTINC is", "filename": "CHANGES.txt"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/12c694edb6910e11bae25231ba1517a8599cd6ff/src/java/org/apache/cassandra/transport/messages/ExecuteMessage.java", "blob_url": "https://github.com/apache/cassandra/blob/12c694edb6910e11bae25231ba1517a8599cd6ff/src/java/org/apache/cassandra/transport/messages/ExecuteMessage.java", "sha": "78182b289134445a9b92a24bbb38f757f859df11", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/transport/messages/ExecuteMessage.java?ref=12c694edb6910e11bae25231ba1517a8599cd6ff", "patch": "@@ -102,12 +102,12 @@ public ExecuteMessage(MD5Digest statementId, QueryOptions options)\n         {\n             QueryHandler handler = state.getClientState().getCQLQueryHandler();\n             ParsedStatement.Prepared prepared = handler.getPrepared(statementId);\n+            if (prepared == null)\n+                throw new PreparedQueryNotFoundException(statementId);\n+\n             options.prepare(prepared.boundNames);\n             CQLStatement statement = prepared.statement;\n \n-            if (statement == null)\n-                throw new PreparedQueryNotFoundException(statementId);\n-\n             if (options.getPageSize() == 0)\n                 throw new ProtocolException(\"The page size cannot be 0\");\n ", "filename": "src/java/org/apache/cassandra/transport/messages/ExecuteMessage.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/1e49abaf9cbc0833146f30c32ab574cd892aa0a4", "parent": "https://github.com/apache/cassandra/commit/dc73f214e0831c11986f0548cc3ae5879449e683", "message": "Fix rare potential NPE in HHOM page size calculation\n\npatch by Aleksey Yeschenko; reviewed by Jonathan Ellis for\nCASSANDRA-7354", "bug_id": "cassandra_110", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/1e49abaf9cbc0833146f30c32ab574cd892aa0a4/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/1e49abaf9cbc0833146f30c32ab574cd892aa0a4/CHANGES.txt", "sha": "a6ea1884e720a7043a5edeae7b2f5d4f0435591b", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=1e49abaf9cbc0833146f30c32ab574cd892aa0a4", "patch": "@@ -1,4 +1,5 @@\n 1.2.17\n+ * Fix rare potential NPE in HHOM page size calculation (CASSANDRA-7354)\n  * Fix handling of empty counter replication mutations (CASSANDRA-7144)\n  * Use LOCAL_ONE for non-superuser auth queries (CASSANDRA-7328)\n  * Set keepalive on MessagingService connections (CASSANDRA-7170)", "filename": "CHANGES.txt"}, {"additions": 9, "raw_url": "https://github.com/apache/cassandra/raw/1e49abaf9cbc0833146f30c32ab574cd892aa0a4/src/java/org/apache/cassandra/db/HintedHandOffManager.java", "blob_url": "https://github.com/apache/cassandra/blob/1e49abaf9cbc0833146f30c32ab574cd892aa0a4/src/java/org/apache/cassandra/db/HintedHandOffManager.java", "sha": "58702dfd85df0b260f04848590527b53be899c2d", "changes": 19, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/HintedHandOffManager.java?ref=1e49abaf9cbc0833146f30c32ab574cd892aa0a4", "patch": "@@ -431,20 +431,19 @@ public void run()\n         }\n     }\n \n+    // read less columns (mutations) per page if they are very large\n     private int calculatePageSize()\n     {\n-        // read less columns (mutations) per page if they are very large\n         int meanColumnCount = hintStore.getMeanColumns();\n-        if (meanColumnCount > 0)\n-        {\n-            int averageColumnSize = (int) (hintStore.getMeanRowSize() / meanColumnCount);\n-            // page size of 1 does not allow actual paging b/c of >= behavior on startColumn\n-            return Math.max(2, Math.min(PAGE_SIZE, DatabaseDescriptor.getInMemoryCompactionLimit() / averageColumnSize));\n-        }\n-        else\n-        {\n+        if (meanColumnCount <= 0)\n             return PAGE_SIZE;\n-        }\n+\n+        int averageColumnSize = (int) (hintStore.getMeanRowSize() / meanColumnCount);\n+        if (averageColumnSize <= 0)\n+            return PAGE_SIZE;\n+\n+        // page size of 1 does not allow actual paging b/c of >= behavior on startColumn\n+        return Math.max(2, Math.min(PAGE_SIZE, DatabaseDescriptor.getInMemoryCompactionLimit() / averageColumnSize));\n     }\n \n     /**", "filename": "src/java/org/apache/cassandra/db/HintedHandOffManager.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/7f019804ca82c727062c2a787fe534690e9dbf6d", "parent": "https://github.com/apache/cassandra/commit/63ba5886e3ee3d6e5b5ab538c4b2e5890bfebeb3", "message": "fix npe when specifying -Dcassandra.fd_initial_value_ms\n\npatch by dbrosius reviewed by bwilliams for cassandra 6751", "bug_id": "cassandra_111", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/7f019804ca82c727062c2a787fe534690e9dbf6d/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/7f019804ca82c727062c2a787fe534690e9dbf6d/CHANGES.txt", "sha": "e8d6a8d47b024b3094e8f40452880f42b19f6801", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=7f019804ca82c727062c2a787fe534690e9dbf6d", "patch": "@@ -13,6 +13,7 @@\n  * Ensure that batchlog and hint timeouts do not produce hints (CASSANDRA-7058)\n  * Don't shut MessagingService down when replacing a node (CASSANDRA-6476)\n  * Always clean up references in SerializingCache (CASSANDRA-6994)\n+ * fix npe when doing -Dcassandra.fd_initial_value_ms (CASSANDRA-6751)\n \n \n 1.2.16", "filename": "CHANGES.txt"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/7f019804ca82c727062c2a787fe534690e9dbf6d/src/java/org/apache/cassandra/gms/FailureDetector.java", "blob_url": "https://github.com/apache/cassandra/blob/7f019804ca82c727062c2a787fe534690e9dbf6d/src/java/org/apache/cassandra/gms/FailureDetector.java", "sha": "f5c500cb5ab3a7eee3f1a2adb8e962a21c66aebf", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/gms/FailureDetector.java?ref=7f019804ca82c727062c2a787fe534690e9dbf6d", "patch": "@@ -43,12 +43,12 @@\n  */\n public class FailureDetector implements IFailureDetector, FailureDetectorMBean\n {\n+    private static final Logger logger = LoggerFactory.getLogger(FailureDetector.class);\n     public static final String MBEAN_NAME = \"org.apache.cassandra.net:type=FailureDetector\";\n     private static final int SAMPLE_SIZE = 1000;\n     protected static final int INITIAL_VALUE = getInitialValue();\n \n     public static final IFailureDetector instance = new FailureDetector();\n-    private static final Logger logger = LoggerFactory.getLogger(FailureDetector.class);\n \n     // this is useless except to provide backwards compatibility in phi_convict_threshold,\n     // because everyone seems pretty accustomed to the default of 8, and users who have", "filename": "src/java/org/apache/cassandra/gms/FailureDetector.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/b3a9a443433a271fee33bede60d4892e0c8ffb03", "parent": "https://github.com/apache/cassandra/commit/fd53628cb0e229e1ecc095eeebde056f0ae3e202", "message": "Fix NPE on BulkLoader caused by losing StreamEvent\n\npatch by yukim; reviewed by sankalp kohli for CASSANDRA-6636", "bug_id": "cassandra_112", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/b3a9a443433a271fee33bede60d4892e0c8ffb03/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/b3a9a443433a271fee33bede60d4892e0c8ffb03/CHANGES.txt", "sha": "3e73f910672d193ad7d229f754e0ecff20027ac5", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=b3a9a443433a271fee33bede60d4892e0c8ffb03", "patch": "@@ -27,6 +27,7 @@\n  * Optimize single partition batch statements (CASSANDRA-6737)\n  * Disallow post-query re-ordering when paging (CASSANDRA-6722)\n  * Fix potential paging bug with deleted columns (CASSANDRA-6748)\n+ * Fix NPE on BulkLoader caused by losing StreamEvent (CASSANDRA-6636)\n Merged from 1.2:\n  * Add CMSClassUnloadingEnabled JVM option (CASSANDRA-6541)\n  * Catch memtable flush exceptions during shutdown (CASSANDRA-6735)", "filename": "CHANGES.txt"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/io/sstable/SSTableLoader.java", "blob_url": "https://github.com/apache/cassandra/blob/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/io/sstable/SSTableLoader.java", "sha": "1ea4c55b5e684cbb2b8f06253e66125a3d2caa8f", "changes": 7, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/SSTableLoader.java?ref=b3a9a443433a271fee33bede60d4892e0c8ffb03", "patch": "@@ -144,7 +144,7 @@ public StreamResultFuture stream()\n         return stream(Collections.<InetAddress>emptySet());\n     }\n \n-    public StreamResultFuture stream(Set<InetAddress> toIgnore)\n+    public StreamResultFuture stream(Set<InetAddress> toIgnore, StreamEventHandler... listeners)\n     {\n         client.init(keyspace);\n         outputHandler.output(\"Established connection to initial hosts\");\n@@ -175,9 +175,8 @@ public StreamResultFuture stream(Set<InetAddress> toIgnore)\n \n             plan.transferFiles(remote, streamingDetails.get(remote));\n         }\n-        StreamResultFuture bulkResult = plan.execute();\n-        bulkResult.addEventListener(this);\n-        return bulkResult;\n+        plan.listeners(this, listeners);\n+        return plan.execute();\n     }\n \n     public void onSuccess(StreamState finalState) {}", "filename": "src/java/org/apache/cassandra/io/sstable/SSTableLoader.java"}, {"additions": 10, "raw_url": "https://github.com/apache/cassandra/raw/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/streaming/StreamPlan.java", "blob_url": "https://github.com/apache/cassandra/blob/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/streaming/StreamPlan.java", "sha": "740ad6645944a37d68e153fe2594e50556c95a10", "changes": 11, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamPlan.java?ref=b3a9a443433a271fee33bede60d4892e0c8ffb03", "patch": "@@ -33,6 +33,7 @@\n {\n     private final UUID planId = UUIDGen.getTimeUUID();\n     private final String description;\n+    private final List<StreamEventHandler> handlers = new ArrayList<>();\n \n     // sessions per InetAddress of the other end.\n     private final Map<InetAddress, StreamSession> sessions = new HashMap<>();\n@@ -121,6 +122,14 @@ public StreamPlan transferFiles(InetAddress to, Collection<StreamSession.SSTable\n         return this;\n     }\n \n+    public StreamPlan listeners(StreamEventHandler handler, StreamEventHandler... handlers)\n+    {\n+        this.handlers.add(handler);\n+        if (handlers != null)\n+            Collections.addAll(this.handlers, handlers);\n+        return this;\n+    }\n+\n     /**\n      * @return true if this plan has no plan to execute\n      */\n@@ -136,7 +145,7 @@ public boolean isEmpty()\n      */\n     public StreamResultFuture execute()\n     {\n-        return StreamResultFuture.init(planId, description, sessions.values());\n+        return StreamResultFuture.init(planId, description, sessions.values(), handlers);\n     }\n \n     /**", "filename": "src/java/org/apache/cassandra/streaming/StreamPlan.java"}, {"additions": 6, "raw_url": "https://github.com/apache/cassandra/raw/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/streaming/StreamResultFuture.java", "blob_url": "https://github.com/apache/cassandra/blob/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/streaming/StreamResultFuture.java", "sha": "dcffaff54c4a9d5c95efb0aea810657bb31f3270", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamResultFuture.java?ref=b3a9a443433a271fee33bede60d4892e0c8ffb03", "patch": "@@ -75,9 +75,14 @@ private StreamResultFuture(UUID planId, String description, Collection<StreamSes\n             set(getCurrentState());\n     }\n \n-    static StreamResultFuture init(UUID planId, String description, Collection<StreamSession> sessions)\n+    static StreamResultFuture init(UUID planId, String description, Collection<StreamSession> sessions, Collection<StreamEventHandler> listeners)\n     {\n         StreamResultFuture future = createAndRegister(planId, description, sessions);\n+        if (listeners != null)\n+        {\n+            for (StreamEventHandler listener : listeners)\n+                future.addEventListener(listener);\n+        }\n \n         logger.info(\"[Stream #{}] Executing streaming plan for {}\", planId,  description);\n         // start sessions", "filename": "src/java/org/apache/cassandra/streaming/StreamResultFuture.java"}, {"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/tools/BulkLoader.java", "blob_url": "https://github.com/apache/cassandra/blob/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/tools/BulkLoader.java", "sha": "37ec635d98d966b4802be0a843a63200c15fca65", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/tools/BulkLoader.java?ref=b3a9a443433a271fee33bede60d4892e0c8ffb03", "patch": "@@ -79,7 +79,10 @@ public static void main(String args[])\n         StreamResultFuture future = null;\n         try\n         {\n-            future = loader.stream(options.ignores);\n+            if (options.noProgress)\n+                future = loader.stream(options.ignores);\n+            else\n+                future = loader.stream(options.ignores, new ProgressIndicator());\n         }\n         catch (Exception e)\n         {\n@@ -94,8 +97,6 @@ public static void main(String args[])\n         }\n \n         handler.output(String.format(\"Streaming session ID: %s\", future.planId));\n-        if (!options.noProgress)\n-            future.addEventListener(new ProgressIndicator());\n \n         try\n         {", "filename": "src/java/org/apache/cassandra/tools/BulkLoader.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/fd609339eebd13e2adc37969c8e0b439775a17af", "parent": "https://github.com/apache/cassandra/commit/89da2c9704b5d2a4148a97a274170c3f634a1f0f", "message": "Fix NPE when using static columns and IN\n\npatch by slebresne; reviewed by iamaleksey for CASSANDRA-6769", "bug_id": "cassandra_113", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/fd609339eebd13e2adc37969c8e0b439775a17af/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java", "blob_url": "https://github.com/apache/cassandra/blob/fd609339eebd13e2adc37969c8e0b439775a17af/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java", "sha": "5a9d3d9f2e31743af3d45fd27b1fbfda44eae7bb", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java?ref=fd609339eebd13e2adc37969c8e0b439775a17af", "patch": "@@ -508,7 +508,7 @@ else if (isColumnRange())\n                     slices = new ColumnSlice[l.size()+1];\n                     slices[0] = staticSlice;\n                     for (int i = 0; i < l.size(); i++)\n-                        slices[i] = l.get(i);\n+                        slices[i+1] = l.get(i);\n                 }\n             }\n             return sliceFilter(slices, limit, toGroup);", "filename": "src/java/org/apache/cassandra/cql3/statements/SelectStatement.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9", "parent": "https://github.com/apache/cassandra/commit/adcb713d597302a868b6224a87ea6ce38e718e5d", "message": "Fix upgradesstables NPE for non-CF-based indexes\npatch by Sergio Bossa; reviewed by jbellis for CASSANDRA-6645", "bug_id": "cassandra_114", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9/CHANGES.txt", "sha": "4be97f14bf8fc375ec3156302a9f3b5d680c1d0b", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9", "patch": "@@ -1,6 +1,8 @@\n 1.2.16\n+ * Fix upgradesstables NPE for non-CF-based indexes (CASSANDRA-6645)\n  * Fix partition and range deletes not triggering flush (CASSANDRA-6655)\n \n+\n 1.2.15\n  * Move handling of migration event source to solve bootstrap race (CASSANDRA-6648)\n  * Make sure compaction throughput value doesn't overflow with int math (CASSANDRA-6647)", "filename": "CHANGES.txt"}, {"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9/src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java", "blob_url": "https://github.com/apache/cassandra/blob/8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9/src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java", "sha": "39744662181fed9da798cf934b2f7913349b791b", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java?ref=8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9", "patch": "@@ -65,7 +65,7 @@ private IndexExpression highestSelectivityPredicate(List<IndexExpression> clause\n                 continue;\n \n             SecondaryIndex index = indexManager.getIndexForColumn(expression.column_name);\n-            if (index == null || (expression.op != IndexOperator.EQ))\n+            if (index == null || index.getIndexCfs() == null || (expression.op != IndexOperator.EQ))\n                 continue;\n             int columns = index.getIndexCfs().getMeanColumns();\n             candidates.put(index, columns);\n@@ -106,6 +106,7 @@ public boolean isIndexing(List<IndexExpression> clause)\n         final IndexExpression primary = highestSelectivityPredicate(filter.getClause());\n         final SecondaryIndex index = indexManager.getIndexForColumn(primary.column_name);\n         assert index != null;\n+        assert index.getIndexCfs() != null;\n         final DecoratedKey indexKey = index.getIndexKeyFor(primary.value);\n \n         if (logger.isDebugEnabled())", "filename": "src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java"}, {"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9/src/java/org/apache/cassandra/db/index/keys/KeysSearcher.java", "blob_url": "https://github.com/apache/cassandra/blob/8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9/src/java/org/apache/cassandra/db/index/keys/KeysSearcher.java", "sha": "7e7595b4986b9c301c71c66d40637ba77a616809", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/index/keys/KeysSearcher.java?ref=8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9", "patch": "@@ -61,7 +61,7 @@ private IndexExpression highestSelectivityPredicate(List<IndexExpression> clause\n                 continue;\n \n             SecondaryIndex index = indexManager.getIndexForColumn(expression.column_name);\n-            if (index == null || (expression.op != IndexOperator.EQ))\n+            if (index == null || index.getIndexCfs() == null || (expression.op != IndexOperator.EQ))\n                 continue;\n             int columns = index.getIndexCfs().getMeanColumns();\n             candidates.put(index, columns);\n@@ -102,6 +102,7 @@ public boolean isIndexing(List<IndexExpression> clause)\n         final IndexExpression primary = highestSelectivityPredicate(filter.getClause());\n         final SecondaryIndex index = indexManager.getIndexForColumn(primary.column_name);\n         assert index != null;\n+        assert index.getIndexCfs() != null;\n         final DecoratedKey indexKey = index.getIndexKeyFor(primary.value);\n \n         if (logger.isDebugEnabled())", "filename": "src/java/org/apache/cassandra/db/index/keys/KeysSearcher.java"}, {"additions": 10, "raw_url": "https://github.com/apache/cassandra/raw/8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9/src/java/org/apache/cassandra/service/StorageService.java", "blob_url": "https://github.com/apache/cassandra/blob/8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9/src/java/org/apache/cassandra/service/StorageService.java", "sha": "94dd73d9d742dbc35d818c5f5f208b6d989ad168", "changes": 14, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9", "patch": "@@ -2314,8 +2314,11 @@ public void clearSnapshot(String tag, String... tableNames) throws IOException\n                 {\n                     for (SecondaryIndex si : cfStore.indexManager.getIndexes())\n                     {\n-                        logger.info(\"adding secondary index {} to operation\", si.getIndexName());\n-                        valid.add(si.getIndexCfs());\n+                        if (si.getIndexCfs() != null)\n+                        {\n+                            logger.info(\"adding secondary index {} to operation\", si.getIndexName());\n+                            valid.add(si.getIndexCfs());\n+                        }\n                     }\n \n                 }\n@@ -2364,8 +2367,11 @@ public void clearSnapshot(String tag, String... tableNames) throws IOException\n                 {\n                     for(SecondaryIndex si : cfStore.indexManager.getIndexes())\n                     {\n-                        logger.info(\"adding secondary index {} to operation\", si.getIndexName());\n-                        valid.add(si.getIndexCfs());\n+                        if (si.getIndexCfs() != null)\n+                        {\n+                            logger.info(\"adding secondary index {} to operation\", si.getIndexName());\n+                            valid.add(si.getIndexCfs());\n+                        }\n                     }\n                 }\n             }", "filename": "src/java/org/apache/cassandra/service/StorageService.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/45955e6829a765cb12671f628480e9c397cb695d", "parent": "https://github.com/apache/cassandra/commit/43e6e184b0bc4881a3324fa1caad987207a95e9e", "message": "Fix upgradesstables NPE for non-CF-based indexes\npatch by Sergio Bossa; reviewed by jbellis for CASSANDRA-6645", "bug_id": "cassandra_115", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/45955e6829a765cb12671f628480e9c397cb695d/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/45955e6829a765cb12671f628480e9c397cb695d/CHANGES.txt", "sha": "b260b49397447e751ea72da8cefec102b4ccf8e6", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=45955e6829a765cb12671f628480e9c397cb695d", "patch": "@@ -1,4 +1,5 @@\n 2.0.6\n+ * Fix upgradesstables NPE for non-CF-based indexes (CASSANDRA-6645)\n  * Improve nodetool cfhistograms formatting (CASSANDRA-6360)\n  * Expose bulk loading progress over JMX (CASSANDRA-4757)\n  * Correctly handle null with IF conditions and TTL (CASSANDRA-6623)", "filename": "CHANGES.txt"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/45955e6829a765cb12671f628480e9c397cb695d/src/java/org/apache/cassandra/db/index/SecondaryIndexSearcher.java", "blob_url": "https://github.com/apache/cassandra/blob/45955e6829a765cb12671f628480e9c397cb695d/src/java/org/apache/cassandra/db/index/SecondaryIndexSearcher.java", "sha": "e93efd18b46f7fc4f3adbe136447da65cbef8b5d", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/index/SecondaryIndexSearcher.java?ref=45955e6829a765cb12671f628480e9c397cb695d", "patch": "@@ -63,7 +63,7 @@ protected IndexExpression highestSelectivityPredicate(List<IndexExpression> clau\n                 continue;\n \n             SecondaryIndex index = indexManager.getIndexForColumn(expression.column_name);\n-            if (index == null || (expression.op != IndexOperator.EQ))\n+            if (index == null || index.getIndexCfs() == null || expression.op != IndexOperator.EQ)\n                 continue;\n             int columns = index.getIndexCfs().getMeanColumns();\n             candidates.put(index, columns);", "filename": "src/java/org/apache/cassandra/db/index/SecondaryIndexSearcher.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/45955e6829a765cb12671f628480e9c397cb695d/src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java", "blob_url": "https://github.com/apache/cassandra/blob/45955e6829a765cb12671f628480e9c397cb695d/src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java", "sha": "90e708986268a1c99d2ba58bd47c4d8422265756", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java?ref=45955e6829a765cb12671f628480e9c397cb695d", "patch": "@@ -80,6 +80,7 @@ private ByteBuffer makePrefix(CompositesIndex index, ByteBuffer key, ExtendedFil\n         final IndexExpression primary = highestSelectivityPredicate(filter.getClause());\n         final CompositesIndex index = (CompositesIndex)indexManager.getIndexForColumn(primary.column_name);\n         assert index != null;\n+        assert index.getIndexCfs() != null;\n         final DecoratedKey indexKey = index.getIndexKeyFor(primary.value);\n \n         if (logger.isDebugEnabled())", "filename": "src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/45955e6829a765cb12671f628480e9c397cb695d/src/java/org/apache/cassandra/db/index/keys/KeysSearcher.java", "blob_url": "https://github.com/apache/cassandra/blob/45955e6829a765cb12671f628480e9c397cb695d/src/java/org/apache/cassandra/db/index/keys/KeysSearcher.java", "sha": "5d82ba0251f304dfd93912aee75e84765e2d90a3", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/index/keys/KeysSearcher.java?ref=45955e6829a765cb12671f628480e9c397cb695d", "patch": "@@ -63,6 +63,7 @@ public KeysSearcher(SecondaryIndexManager indexManager, Set<ByteBuffer> columns)\n         final IndexExpression primary = highestSelectivityPredicate(filter.getClause());\n         final SecondaryIndex index = indexManager.getIndexForColumn(primary.column_name);\n         assert index != null;\n+        assert index.getIndexCfs() != null;\n         final DecoratedKey indexKey = index.getIndexKeyFor(primary.value);\n \n         if (logger.isDebugEnabled())", "filename": "src/java/org/apache/cassandra/db/index/keys/KeysSearcher.java"}, {"additions": 8, "raw_url": "https://github.com/apache/cassandra/raw/45955e6829a765cb12671f628480e9c397cb695d/src/java/org/apache/cassandra/service/StorageService.java", "blob_url": "https://github.com/apache/cassandra/blob/45955e6829a765cb12671f628480e9c397cb695d/src/java/org/apache/cassandra/service/StorageService.java", "sha": "26846e7becf1e515f8356aeef3d9227acfd32162", "changes": 12, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=45955e6829a765cb12671f628480e9c397cb695d", "patch": "@@ -2297,8 +2297,10 @@ public void clearSnapshot(String tag, String... keyspaceNames) throws IOExceptio\n                 {\n                     for (SecondaryIndex si : cfStore.indexManager.getIndexes())\n                     {\n-                        logger.info(\"adding secondary index {} to operation\", si.getIndexName());\n-                        valid.add(si.getIndexCfs());\n+                        if (si.getIndexCfs() != null) {\n+                            logger.info(\"adding secondary index {} to operation\", si.getIndexName());\n+                            valid.add(si.getIndexCfs());\n+                        }\n                     }\n \n                 }\n@@ -2346,8 +2348,10 @@ public void clearSnapshot(String tag, String... keyspaceNames) throws IOExceptio\n                 {\n                     for(SecondaryIndex si : cfStore.indexManager.getIndexes())\n                     {\n-                        logger.info(\"adding secondary index {} to operation\", si.getIndexName());\n-                        valid.add(si.getIndexCfs());\n+                        if (si.getIndexCfs() != null) {\n+                            logger.info(\"adding secondary index {} to operation\", si.getIndexName());\n+                            valid.add(si.getIndexCfs());\n+                        }\n                     }\n                 }\n             }", "filename": "src/java/org/apache/cassandra/service/StorageService.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/41ffca1281dcdc69b1b843b47a5bb6dc3c462aac", "parent": "https://github.com/apache/cassandra/commit/20c2adc87102963836a59a5e9626005fd9ee08bc", "message": "Fix NPE when streaming connection is not yet ready\n\npatch by yukim; reviewed by Russell Spitzer for CASSANDRA-6210", "bug_id": "cassandra_116", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/41ffca1281dcdc69b1b843b47a5bb6dc3c462aac/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/41ffca1281dcdc69b1b843b47a5bb6dc3c462aac/CHANGES.txt", "sha": "46b14fca2f621f97c0ea553a1d736ecbe794255b", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=41ffca1281dcdc69b1b843b47a5bb6dc3c462aac", "patch": "@@ -9,6 +9,7 @@\n  * Fix LOCAL_SERIAL from thrift (CASSANDRA-6584)\n  * Don't special case received counts in CAS timeout exceptions (CASSANDRA-6595)\n  * Add support for 2.1 global counter shards (CASSANDRA-6505)\n+ * Fix NPE when streaming connection is not yet established (CASSANDRA-6210)\n Merged from 1.2:\n  * fsync compression metadata (CASSANDRA-6531)\n  * Validate CF existence on execution for prepared statement (CASSANDRA-6535)", "filename": "CHANGES.txt"}, {"additions": 58, "raw_url": "https://github.com/apache/cassandra/raw/41ffca1281dcdc69b1b843b47a5bb6dc3c462aac/src/java/org/apache/cassandra/streaming/ConnectionHandler.java", "blob_url": "https://github.com/apache/cassandra/blob/41ffca1281dcdc69b1b843b47a5bb6dc3c462aac/src/java/org/apache/cassandra/streaming/ConnectionHandler.java", "sha": "356138be0134fab7622d559dbedc3cad739194c5", "changes": 117, "status": "modified", "deletions": 59, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/ConnectionHandler.java?ref=41ffca1281dcdc69b1b843b47a5bb6dc3c462aac", "patch": "@@ -21,6 +21,7 @@\n import java.net.InetAddress;\n import java.net.Socket;\n import java.net.SocketException;\n+import java.nio.ByteBuffer;\n import java.nio.channels.Channels;\n import java.nio.channels.ReadableByteChannel;\n import java.nio.channels.WritableByteChannel;\n@@ -64,6 +65,8 @@\n     ConnectionHandler(StreamSession session)\n     {\n         this.session = session;\n+        this.incoming = new IncomingMessageHandler(session);\n+        this.outgoing = new OutgoingMessageHandler(session);\n     }\n \n     /**\n@@ -77,15 +80,13 @@ public void initiate() throws IOException\n     {\n         logger.debug(\"[Stream #{}] Sending stream init for incoming stream\", session.planId());\n         Socket incomingSocket = connect(session.peer);\n-        incoming = new IncomingMessageHandler(session, incomingSocket, StreamMessage.CURRENT_VERSION);\n-        incoming.sendInitMessage(true);\n-        incoming.start();\n+        incoming.start(incomingSocket, StreamMessage.CURRENT_VERSION);\n+        incoming.sendInitMessage(incomingSocket, true);\n \n         logger.debug(\"[Stream #{}] Sending stream init for outgoing stream\", session.planId());\n         Socket outgoingSocket = connect(session.peer);\n-        outgoing = new OutgoingMessageHandler(session, outgoingSocket, StreamMessage.CURRENT_VERSION);\n-        outgoing.sendInitMessage(false);\n-        outgoing.start();\n+        outgoing.start(outgoingSocket, StreamMessage.CURRENT_VERSION);\n+        outgoing.sendInitMessage(outgoingSocket, false);\n     }\n \n     /**\n@@ -98,15 +99,9 @@ public void initiate() throws IOException\n     public void initiateOnReceivingSide(Socket socket, boolean isForOutgoing, int version) throws IOException\n     {\n         if (isForOutgoing)\n-        {\n-            outgoing = new OutgoingMessageHandler(session, socket, version);\n-            outgoing.start();\n-        }\n+            outgoing.start(socket, version);\n         else\n-        {\n-            incoming = new IncomingMessageHandler(session, socket, version);\n-            incoming.start();\n-        }\n+            incoming.start(socket, version);\n     }\n \n     /**\n@@ -189,21 +184,19 @@ public boolean isOutgoingConnected()\n     {\n         protected final StreamSession session;\n \n-        protected final Socket socket;\n-        protected final int protocolVersion;\n+        protected int protocolVersion;\n+        protected Socket socket;\n \n         private final AtomicReference<SettableFuture<?>> closeFuture = new AtomicReference<>();\n \n-        protected MessageHandler(StreamSession session, Socket socket, int protocolVersion)\n+        protected MessageHandler(StreamSession session)\n         {\n             this.session = session;\n-            this.socket = socket;\n-            this.protocolVersion = protocolVersion;\n         }\n \n         protected abstract String name();\n \n-        protected WritableByteChannel getWriteChannel() throws IOException\n+        protected static WritableByteChannel getWriteChannel(Socket socket) throws IOException\n         {\n             WritableByteChannel out = socket.getChannel();\n             // socket channel is null when encrypted(SSL)\n@@ -212,7 +205,7 @@ protected WritableByteChannel getWriteChannel() throws IOException\n                  : out;\n         }\n \n-        protected ReadableByteChannel getReadChannel() throws IOException\n+        protected static ReadableByteChannel getReadChannel(Socket socket) throws IOException\n         {\n             ReadableByteChannel in = socket.getChannel();\n             // socket channel is null when encrypted(SSL)\n@@ -221,14 +214,19 @@ protected ReadableByteChannel getReadChannel() throws IOException\n                  : in;\n         }\n \n-        public void sendInitMessage(boolean isForOutgoing) throws IOException\n+        public void sendInitMessage(Socket socket, boolean isForOutgoing) throws IOException\n         {\n             StreamInitMessage message = new StreamInitMessage(FBUtilities.getBroadcastAddress(), session.planId(), session.description(), isForOutgoing);\n-            getWriteChannel().write(message.createMessage(false, protocolVersion));\n+            ByteBuffer messageBuf = message.createMessage(false, protocolVersion);\n+            while (messageBuf.hasRemaining())\n+                getWriteChannel(socket).write(messageBuf);\n         }\n \n-        public void start()\n+        public void start(Socket socket, int protocolVersion)\n         {\n+            this.socket = socket;\n+            this.protocolVersion = protocolVersion;\n+\n             new Thread(this, name() + \"-\" + session.peer).start();\n         }\n \n@@ -264,12 +262,9 @@ protected void signalCloseDone()\n      */\n     static class IncomingMessageHandler extends MessageHandler\n     {\n-        private final ReadableByteChannel in;\n-\n-        IncomingMessageHandler(StreamSession session, Socket socket, int protocolVersion) throws IOException\n+        IncomingMessageHandler(StreamSession session)\n         {\n-            super(session, socket, protocolVersion);\n-            this.in = getReadChannel();\n+            super(session);\n         }\n \n         protected String name()\n@@ -279,9 +274,10 @@ protected String name()\n \n         public void run()\n         {\n-            while (!isClosed())\n+            try\n             {\n-                try\n+                ReadableByteChannel in = getReadChannel(socket);\n+                while (!isClosed())\n                 {\n                     // receive message\n                     StreamMessage message = StreamMessage.deserialize(in, protocolVersion, session);\n@@ -293,17 +289,20 @@ public void run()\n                         session.messageReceived(message);\n                     }\n                 }\n-                catch (SocketException e)\n-                {\n-                    // socket is closed\n-                    close();\n-                }\n-                catch (Throwable e)\n-                {\n-                    session.onError(e);\n-                }\n             }\n-            signalCloseDone();\n+            catch (SocketException e)\n+            {\n+                // socket is closed\n+                close();\n+            }\n+            catch (Throwable e)\n+            {\n+                session.onError(e);\n+            }\n+            finally\n+            {\n+                signalCloseDone();\n+            }\n         }\n     }\n \n@@ -326,12 +325,9 @@ public int compare(StreamMessage o1, StreamMessage o2)\n             }\n         });\n \n-        private final WritableByteChannel out;\n-\n-        OutgoingMessageHandler(StreamSession session, Socket socket, int protocolVersion) throws IOException\n+        OutgoingMessageHandler(StreamSession session)\n         {\n-            super(session, socket, protocolVersion);\n-            this.out = getWriteChannel();\n+            super(session);\n         }\n \n         protected String name()\n@@ -346,38 +342,41 @@ public void enqueue(StreamMessage message)\n \n         public void run()\n         {\n-            StreamMessage next;\n-            while (!isClosed())\n+            try\n             {\n-                try\n+                WritableByteChannel out = getWriteChannel(socket);\n+\n+                StreamMessage next;\n+                while (!isClosed())\n                 {\n                     if ((next = messageQueue.poll(1, TimeUnit.SECONDS)) != null)\n                     {\n                         logger.debug(\"[Stream #{}] Sending {}\", session.planId(), next);\n-                        sendMessage(next);\n+                        sendMessage(out, next);\n                         if (next.type == StreamMessage.Type.SESSION_FAILED)\n                             close();\n                     }\n                 }\n-                catch (InterruptedException e)\n-                {\n-                    throw new AssertionError(e);\n-                }\n-            }\n \n-            try\n-            {\n                 // Sends the last messages on the queue\n                 while ((next = messageQueue.poll()) != null)\n-                    sendMessage(next);\n+                    sendMessage(out, next);\n+            }\n+            catch (InterruptedException e)\n+            {\n+                throw new AssertionError(e);\n+            }\n+            catch (IOException e)\n+            {\n+                session.onError(e);\n             }\n             finally\n             {\n                 signalCloseDone();\n             }\n         }\n \n-        private void sendMessage(StreamMessage message)\n+        private void sendMessage(WritableByteChannel out, StreamMessage message)\n         {\n             try\n             {", "filename": "src/java/org/apache/cassandra/streaming/ConnectionHandler.java"}, {"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/41ffca1281dcdc69b1b843b47a5bb6dc3c462aac/src/java/org/apache/cassandra/streaming/messages/StreamMessage.java", "blob_url": "https://github.com/apache/cassandra/blob/41ffca1281dcdc69b1b843b47a5bb6dc3c462aac/src/java/org/apache/cassandra/streaming/messages/StreamMessage.java", "sha": "9e146e8c199e6e5e54b15943bcde4ad55c9aedab", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/messages/StreamMessage.java?ref=41ffca1281dcdc69b1b843b47a5bb6dc3c462aac", "patch": "@@ -40,7 +40,8 @@ public static void serialize(StreamMessage message, WritableByteChannel out, int\n         // message type\n         buff.put(message.type.type);\n         buff.flip();\n-        out.write(buff);\n+        while (buff.hasRemaining())\n+            out.write(buff);\n         message.type.serializer.serialize(message, out, version, session);\n     }\n ", "filename": "src/java/org/apache/cassandra/streaming/messages/StreamMessage.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/c198b76c46e4beae45e2a98910322a8761b73684", "parent": "https://github.com/apache/cassandra/commit/111c74ef94d4d75c19611ca3e77d7c54552810f0", "message": "Fix NPE if StorageService.getOperationMode() is executed before full startup\npatch by cwarrington reviewed by dbrosius for cassandra-6166", "bug_id": "cassandra_117", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/c198b76c46e4beae45e2a98910322a8761b73684/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/c198b76c46e4beae45e2a98910322a8761b73684/CHANGES.txt", "sha": "2b37a39fa3d5552583a906f47dc20f8a94cb4f08", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=c198b76c46e4beae45e2a98910322a8761b73684", "patch": "@@ -21,6 +21,7 @@\n  * Disallow empty column names in cql (CASSANDRA-6136)\n  * Use Java7 file-handling APIs and fix file moving on Windows (CASSANDRA-5383)\n  * Save compaction history to system keyspace (CASSANDRA-5078)\n+ * Fix NPE if StorageService.getOperationMode() is executed before full startup (CASSANDRA-6166)\n Merged from 1.2:\n  * Limit CQL prepared statement cache by size instead of count (CASSANDRA-6107)\n  * Tracing should log write failure rather than raw exceptions (CASSANDRA-6133)", "filename": "CHANGES.txt"}, {"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/c198b76c46e4beae45e2a98910322a8761b73684/src/java/org/apache/cassandra/service/StorageService.java", "blob_url": "https://github.com/apache/cassandra/blob/c198b76c46e4beae45e2a98910322a8761b73684/src/java/org/apache/cassandra/service/StorageService.java", "sha": "33fa25d3d1148fcf2b7debd33fe6c0d337db5451", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=c198b76c46e4beae45e2a98910322a8761b73684", "patch": "@@ -175,8 +175,8 @@ public static IPartitioner getPartitioner()\n     /* the probability for tracing any particular request, 0 disables tracing and 1 enables for all */\n     private double tracingProbability = 0.0;\n \n-    private static enum Mode { NORMAL, CLIENT, JOINING, LEAVING, DECOMMISSIONED, MOVING, DRAINING, DRAINED, RELOCATING }\n-    private Mode operationMode;\n+    private static enum Mode { STARTING, NORMAL, CLIENT, JOINING, LEAVING, DECOMMISSIONED, MOVING, DRAINING, DRAINED, RELOCATING }\n+    private Mode operationMode = Mode.STARTING;\n \n     private final MigrationManager migrationManager = MigrationManager.instance;\n ", "filename": "src/java/org/apache/cassandra/service/StorageService.java"}, {"additions": 7, "raw_url": "https://github.com/apache/cassandra/raw/c198b76c46e4beae45e2a98910322a8761b73684/test/unit/org/apache/cassandra/service/StorageServiceServerTest.java", "blob_url": "https://github.com/apache/cassandra/blob/c198b76c46e4beae45e2a98910322a8761b73684/test/unit/org/apache/cassandra/service/StorageServiceServerTest.java", "sha": "7189a26cbe08779bbb8aa9439d796b118b8331bf", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/service/StorageServiceServerTest.java?ref=c198b76c46e4beae45e2a98910322a8761b73684", "patch": "@@ -263,4 +263,11 @@ public void testPrimaryRangesWithSimpleStrategy() throws Exception\n         assert primaryRanges.size() == 1;\n         assert primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\")));\n     }\n+    \n+    @Test\n+    public void testGetOperationMode()\n+    {\n+    \tString operationMode = StorageService.instance.getOperationMode();\n+    \tassert operationMode.equals(\"STARTING\");\n+    }\n }", "filename": "test/unit/org/apache/cassandra/service/StorageServiceServerTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/308a3e41e7a70be90ab3335601f3a67aa93d8927", "parent": "https://github.com/apache/cassandra/commit/5d08a2518d3c538ba7c6a91893424493b28fd9ac", "message": "Fix NPE in pig with tables created from thrift\nPatch by Alex Liu, reviewed by brandonwilliams for CASSANDRA-6072", "bug_id": "cassandra_118", "file": [{"additions": 36, "raw_url": "https://github.com/apache/cassandra/raw/308a3e41e7a70be90ab3335601f3a67aa93d8927/src/java/org/apache/cassandra/hadoop/pig/AbstractCassandraStorage.java", "blob_url": "https://github.com/apache/cassandra/blob/308a3e41e7a70be90ab3335601f3a67aa93d8927/src/java/org/apache/cassandra/hadoop/pig/AbstractCassandraStorage.java", "sha": "74702e32e00ecc4d478fbcc0861c1529f34c3c05", "changes": 97, "status": "modified", "deletions": 61, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/hadoop/pig/AbstractCassandraStorage.java?ref=308a3e41e7a70be90ab3335601f3a67aa93d8927", "patch": "@@ -578,8 +578,7 @@ protected CfDef getCfDef(Cassandra.Client client)\n                        \"       subcomparator,\" +\n                        \"       default_validator,\" +\n                        \"       key_validator,\" +\n-                       \"       key_aliases,\" +\n-                       \"       key_alias \" +\n+                       \"       key_aliases \" +\n                        \"FROM system.schema_columnfamilies \" +\n                        \"WHERE keyspace_name = '%s' \" +\n                        \"  AND columnfamily_name = '%s' \";\n@@ -608,32 +607,22 @@ protected CfDef getCfDef(Cassandra.Client client)\n                 cfDef.subcomparator_type = ByteBufferUtil.string(subComparator);\n             cfDef.default_validation_class = ByteBufferUtil.string(cqlRow.columns.get(3).value);\n             cfDef.key_validation_class = ByteBufferUtil.string(cqlRow.columns.get(4).value);\n-            List<String> keys = null;\n-            if (cqlRow.columns.get(5).value != null)\n+            String keyAliases = ByteBufferUtil.string(cqlRow.columns.get(5).value);\n+            List<String> keys = FBUtilities.fromJsonList(keyAliases);\n+            // classis thrift tables\n+            if (keys.size() == 0)\n             {\n-                String keyAliases = ByteBufferUtil.string(cqlRow.columns.get(5).value);\n-                keys = FBUtilities.fromJsonList(keyAliases);\n-                // classis thrift tables\n-                if (keys.size() == 0 && cqlRow.columns.get(6).value == null)\n+                CFDefinition cfDefinition = getCfDefinition(keyspace, column_family, client);\n+                for (ColumnIdentifier column : cfDefinition.keys.keySet())\n                 {\n-                    CFDefinition cfDefinition = getCfDefinition(keyspace, column_family, client);\n-                    for (ColumnIdentifier column : cfDefinition.keys.keySet())\n-                    {\n-                        String key = column.toString();\n-                        String type = cfDefinition.keys.get(column).type.toString();\n-                        logger.debug(\"name: {}, type: {} \", key, type);\n-                        keys.add(key);\n-                    }\n+                    String key = column.toString();\n+                    String type = cfDefinition.keys.get(column).type.toString();\n+                    logger.debug(\"name: {}, type: {} \", key, type);\n+                    keys.add(key);\n                 }\n-                else\n-                    cql3Table = true;\n             }\n             else\n-            {\n-                String keyAlias = ByteBufferUtil.string(cqlRow.columns.get(6).value);\n-                keys = new ArrayList<String>(1);\n-                keys.add(keyAlias);\n-            }\n+                cql3Table = true;\n         }\n         cfDef.column_metadata = getColumnMetadata(client, cql3Table);\n         return cfDef;\n@@ -732,8 +721,7 @@ else if (rows == null || rows.isEmpty())\n                        \"       comparator, \" +\n                        \"       keyspace_name, \" +\n                        \"       value_alias, \" +\n-                       \"       default_validator,\" +\n-                       \"       key_alias  \" +\n+                       \"       default_validator \" +\n                        \"FROM system.schema_columnfamilies \" +\n                        \"WHERE keyspace_name = '%s'\" +\n                        \"  AND columnfamily_name = '%s' \";\n@@ -746,60 +734,47 @@ else if (rows == null || rows.isEmpty())\n         if (result == null || result.rows == null || result.rows.isEmpty())\n             return null;\n \n-        List<CqlRow> rows = result.rows;\n-        Iterator<CqlRow> iteraRow = rows.iterator();\n+        Iterator<CqlRow> iteraRow = result.rows.iterator();\n         List<ColumnDef> keys = new ArrayList<ColumnDef>();\n         if (iteraRow.hasNext())\n         {\n             CqlRow cqlRow = iteraRow.next();\n             String name = ByteBufferUtil.string(cqlRow.columns.get(4).value);\n             logger.debug(\"Found ksDef name: {}\", name);\n-            String keyString;\n-            List<String> keyNames;\n-            Iterator<String> iterator;\n-            if (cqlRow.columns.get(0).getValue() == null)\n+            String keyString = ByteBufferUtil.string(ByteBuffer.wrap(cqlRow.columns.get(0).getValue()));\n+\n+            logger.debug(\"partition keys: {}\", keyString);\n+            List<String> keyNames = FBUtilities.fromJsonList(keyString);\n+ \n+            Iterator<String> iterator = keyNames.iterator();\n+            while (iterator.hasNext())\n             {\n                 ColumnDef cDef = new ColumnDef();\n-                cDef.name = ByteBuffer.wrap(result.rows.get(0).columns.get(7).getValue());\n+                cDef.name = ByteBufferUtil.bytes(iterator.next());\n                 keys.add(cDef);\n             }\n-            else\n+            // classic thrift tables\n+            if (keys.size() == 0)\n             {\n-                keyString = ByteBufferUtil.string(ByteBuffer.wrap(cqlRow.columns.get(0).getValue()));\n-\n-                logger.debug(\"partition keys: {}\", keyString);\n-                keyNames = FBUtilities.fromJsonList(keyString);\n-     \n-                iterator = keyNames.iterator();\n-                while (iterator.hasNext())\n+                CFDefinition cfDefinition = getCfDefinition(keyspace, column_family, client);\n+                for (ColumnIdentifier column : cfDefinition.keys.keySet())\n                 {\n+                    String key = column.toString();\n+                    logger.debug(\"name: {} \", key);\n                     ColumnDef cDef = new ColumnDef();\n-                    cDef.name = ByteBufferUtil.bytes(iterator.next());\n+                    cDef.name = ByteBufferUtil.bytes(key);\n                     keys.add(cDef);\n                 }\n-                // classic thrift tables\n-                if (keys.size() == 0)\n+                for (ColumnIdentifier column : cfDefinition.columns.keySet())\n                 {\n-                    CFDefinition cfDefinition = getCfDefinition(keyspace, column_family, client);\n-                    for (ColumnIdentifier column : cfDefinition.keys.keySet())\n-                    {\n-                        String key = column.toString();\n-                        logger.debug(\"name: {} \", key);\n-                        ColumnDef cDef = new ColumnDef();\n-                        cDef.name = ByteBufferUtil.bytes(key);\n-                        keys.add(cDef);\n-                    }\n-                    for (ColumnIdentifier column : cfDefinition.columns.keySet())\n-                    {\n-                        String key = column.toString();\n-                        logger.debug(\"name: {} \", key);\n-                        ColumnDef cDef = new ColumnDef();\n-                        cDef.name = ByteBufferUtil.bytes(key);\n-                        keys.add(cDef);\n-                    }\n+                    String key = column.toString();\n+                    logger.debug(\"name: {} \", key);\n+                    ColumnDef cDef = new ColumnDef();\n+                    cDef.name = ByteBufferUtil.bytes(key);\n+                    keys.add(cDef);\n                 }\n-\n             }\n+\n             keyString = ByteBufferUtil.string(ByteBuffer.wrap(cqlRow.columns.get(1).getValue()));\n \n             logger.debug(\"cluster keys: {}\", keyString);", "filename": "src/java/org/apache/cassandra/hadoop/pig/AbstractCassandraStorage.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/5d08a2518d3c538ba7c6a91893424493b28fd9ac", "parent": "https://github.com/apache/cassandra/commit/25926d0946ff04243dab6876dcdd76b05c57e472", "message": "Fix fat client schema pull NPE\n\npatch by Mikhail Panchenko; reviewed by Aleksey Yeschenko for\nCASSANDRA-6089", "bug_id": "cassandra_119", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/5d08a2518d3c538ba7c6a91893424493b28fd9ac/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/5d08a2518d3c538ba7c6a91893424493b28fd9ac/CHANGES.txt", "sha": "27ebc9b8e57e6135cae5dc24286c64fe98335800", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=5d08a2518d3c538ba7c6a91893424493b28fd9ac", "patch": "@@ -7,6 +7,7 @@\n  * Do not open non-ssl storage port if encryption option is all (CASSANDRA-3916)\n  * Move batchlog replay to its own executor (CASSANDRA-6079)\n  * Add tombstone debug threshold and histogram (CASSANDRA-6042, 6057)\n+ * Fix fat client schema pull NPE (CASSANDRA-6089)\n \n \n 1.2.10", "filename": "CHANGES.txt"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/5d08a2518d3c538ba7c6a91893424493b28fd9ac/src/java/org/apache/cassandra/service/MigrationManager.java", "blob_url": "https://github.com/apache/cassandra/blob/5d08a2518d3c538ba7c6a91893424493b28fd9ac/src/java/org/apache/cassandra/service/MigrationManager.java", "sha": "e901b61140d4cb0420b0b0020b7f9c9daa0939fb", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/MigrationManager.java?ref=5d08a2518d3c538ba7c6a91893424493b28fd9ac", "patch": "@@ -110,7 +110,7 @@ public void onRemove(InetAddress endpoint)\n      */\n     private static void maybeScheduleSchemaPull(final UUID theirVersion, final InetAddress endpoint)\n     {\n-        if (Schema.instance.getVersion().equals(theirVersion) || !shouldPullSchemaFrom(endpoint))\n+        if ((Schema.instance.getVersion() != null && Schema.instance.getVersion().equals(theirVersion)) || !shouldPullSchemaFrom(endpoint))\n             return;\n \n         if (Schema.emptyVersion.equals(Schema.instance.getVersion()) || runtimeMXBean.getUptime() < MIGRATION_DELAY_IN_MS)", "filename": "src/java/org/apache/cassandra/service/MigrationManager.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/08c07f5f323a30926fdb760a01b7ef993693153c", "parent": "https://github.com/apache/cassandra/commit/0e18f23c5cb7080b3bbaee15b87001b323fd1c29", "message": "Fix NPE in nodetool on booting instances.\nPatch by Mikhail Stepura, reviewed by brandonwilliams for CASSANDRA-5968", "bug_id": "cassandra_120", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/08c07f5f323a30926fdb760a01b7ef993693153c/src/java/org/apache/cassandra/service/StorageService.java", "blob_url": "https://github.com/apache/cassandra/blob/08c07f5f323a30926fdb760a01b7ef993693153c/src/java/org/apache/cassandra/service/StorageService.java", "sha": "7967deec73be0b1506cebe165f07f3a15524df80", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=08c07f5f323a30926fdb760a01b7ef993693153c", "patch": "@@ -323,7 +323,7 @@ public void stopRPCServer()\n \n     public boolean isRPCServerRunning()\n     {\n-        if (daemon == null)\n+        if ((daemon == null) || (daemon.thriftServer == null))\n         {\n             return false;\n         }\n@@ -358,7 +358,7 @@ public void stopNativeTransport()\n \n     public boolean isNativeTransportRunning()\n     {\n-        if (daemon == null)\n+        if ((daemon == null) || (daemon.nativeServer == null))\n         {\n             return false;\n         }", "filename": "src/java/org/apache/cassandra/service/StorageService.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/3016dc7c2f321c072dc11831be92a0331795ae89", "parent": "https://github.com/apache/cassandra/commit/9fd607778091c48910db557d7a95029cac077244", "message": "Merge branch 'cassandra-3.9' into trunk\n\n* cassandra-3.9:\n  Don't ignore deletion info in sstable on reverse queries\n  NPE when trying to remove purgable tombstones from result", "bug_id": "cassandra_121", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/3016dc7c2f321c072dc11831be92a0331795ae89/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/3016dc7c2f321c072dc11831be92a0331795ae89/CHANGES.txt", "sha": "90e93aa6ff936ea28c9364f1de13cc22ea5f2958", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=3016dc7c2f321c072dc11831be92a0331795ae89", "patch": "@@ -7,6 +7,7 @@\n  * Fix SASI PREFIX search in CONTAINS mode with partial terms (CASSANDRA-12073)\n  * Increase size of flushExecutor thread pool (CASSANDRA-12071)\n Merged from 3.0:\n+ * Fix reverse queries ignoring range tombstones (CASSANDRA-11733)\n  * Improve streaming synchronization and fault tolerance (CASSANDRA-11414)\n  * Avoid potential race when rebuilding CFMetaData (CASSANDRA-12098)\n  * Avoid missing sstables when getting the canonical sstables (CASSANDRA-11996)", "filename": "CHANGES.txt"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/3016dc7c2f321c072dc11831be92a0331795ae89/src/java/org/apache/cassandra/db/columniterator/SSTableReversedIterator.java", "blob_url": "https://github.com/apache/cassandra/blob/3016dc7c2f321c072dc11831be92a0331795ae89/src/java/org/apache/cassandra/db/columniterator/SSTableReversedIterator.java", "sha": "8f576f1f25963a1e554b6d68fb51799dbcfc1f4b", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/columniterator/SSTableReversedIterator.java?ref=3016dc7c2f321c072dc11831be92a0331795ae89", "patch": "@@ -361,7 +361,7 @@ public void build()\n         {\n             deletionInfo = deletionBuilder.build();\n             built = new ImmutableBTreePartition(metadata, partitionKey, columns, Rows.EMPTY_STATIC_ROW, rowBuilder.build(),\n-                                                DeletionInfo.LIVE, EncodingStats.NO_STATS);\n+                                                deletionInfo, EncodingStats.NO_STATS);\n             deletionBuilder = null;\n         }\n     }", "filename": "src/java/org/apache/cassandra/db/columniterator/SSTableReversedIterator.java"}, {"additions": 26, "raw_url": "https://github.com/apache/cassandra/raw/3016dc7c2f321c072dc11831be92a0331795ae89/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java", "blob_url": "https://github.com/apache/cassandra/blob/3016dc7c2f321c072dc11831be92a0331795ae89/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java", "sha": "9b92ebb0468ced3f5cc7c542948cf7bb3745253e", "changes": 26, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java?ref=3016dc7c2f321c072dc11831be92a0331795ae89", "patch": "@@ -1105,4 +1105,30 @@ public void testDeleteColumnNoClustering() throws Throwable\n         compact();\n         assertRows(execute(\"SELECT * FROM %s\"), row(0, null));\n     }\n+\n+    @Test\n+    public void testDeleteAndReverseQueries() throws Throwable\n+    {\n+        // This test insert rows in one sstable and a range tombstone covering some of those rows in another, and it\n+        // validates we correctly get only the non-removed rows when doing reverse queries.\n+\n+        createTable(\"CREATE TABLE %s (k text, i int, PRIMARY KEY (k, i))\");\n+\n+        for (int i = 0; i < 10; i++)\n+            execute(\"INSERT INTO %s(k, i) values (?, ?)\", \"a\", i);\n+\n+        flush();\n+\n+        execute(\"DELETE FROM %s WHERE k = ? AND i >= ? AND i <= ?\", \"a\", 2, 7);\n+\n+        assertRows(execute(\"SELECT i FROM %s WHERE k = ? ORDER BY i DESC\", \"a\"),\n+            row(9), row(8), row(1), row(0)\n+        );\n+\n+        flush();\n+\n+        assertRows(execute(\"SELECT i FROM %s WHERE k = ? ORDER BY i DESC\", \"a\"),\n+            row(9), row(8), row(1), row(0)\n+        );\n+    }\n }", "filename": "test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/7d2ce5f957b1fb392617c1ff05a561571eccd593", "parent": "https://github.com/apache/cassandra/commit/c5dc0292e0689f2e714e23495944f6a6a58b5028", "message": "Fix NPE in Pig's widerow mode.\nPatch by Sheetal Gorsani and Jeremy Hanna, reviewed by brandonwilliams\nfor CASSANDRA-5488", "bug_id": "cassandra_122", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/7d2ce5f957b1fb392617c1ff05a561571eccd593/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/7d2ce5f957b1fb392617c1ff05a561571eccd593/CHANGES.txt", "sha": "256e69a019f01a51a0c44591e5b0e68dbb7ea435", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=7d2ce5f957b1fb392617c1ff05a561571eccd593", "patch": "@@ -4,6 +4,7 @@\n    (CASSANDRA-5497)\n  * fsync leveled manifest to avoid corruption (CASSANDRA-5535)\n  * Fix Bound intersection computation (CASSANDRA-5551)\n+ * Fix NPE in Pig's widerow mode (CASSANDRA-5488)\n \n 1.1.11\n  * Fix trying to load deleted row into row cache on startup (CASSANDRA-4463)", "filename": "CHANGES.txt"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/7d2ce5f957b1fb392617c1ff05a561571eccd593/examples/pig/test/test_storage.pig", "blob_url": "https://github.com/apache/cassandra/blob/7d2ce5f957b1fb392617c1ff05a561571eccd593/examples/pig/test/test_storage.pig", "sha": "93dd91f2db0f1a30fb4f08f5254ce84bb28a6598", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/examples/pig/test/test_storage.pig?ref=7d2ce5f957b1fb392617c1ff05a561571eccd593", "patch": "@@ -1,4 +1,4 @@\n-rows = LOAD 'cassandra://PigTest/SomeApp' USING CassandraStorage();\n+rows = LOAD 'cassandra://PigTest/SomeApp?widerows=true' USING CassandraStorage();\n -- full copy\n STORE rows INTO 'cassandra://PigTest/CopyOfSomeApp' USING CassandraStorage();\n -- single tuple", "filename": "examples/pig/test/test_storage.pig"}, {"additions": 10, "raw_url": "https://github.com/apache/cassandra/raw/7d2ce5f957b1fb392617c1ff05a561571eccd593/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java", "blob_url": "https://github.com/apache/cassandra/blob/7d2ce5f957b1fb392617c1ff05a561571eccd593/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java", "sha": "b681ee387a84f9b7f3a68cba21e647e2043a2662", "changes": 23, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java?ref=7d2ce5f957b1fb392617c1ff05a561571eccd593", "patch": "@@ -144,7 +144,7 @@ public Tuple getNextWide() throws IOException\n                         if (tuple.size() == 0) // lastRow is a new one\n                         {\n                             key = (ByteBuffer)reader.getCurrentKey();\n-                            addKeyToTuple(tuple, key, cfDef, parseType(cfDef.getKey_validation_class()));\n+                            tuple = addKeyToTuple(tuple, key, cfDef, parseType(cfDef.getKey_validation_class()));\n                         }\n                         for (Map.Entry<ByteBuffer, IColumn> entry : lastRow.entrySet())\n                         {\n@@ -180,7 +180,7 @@ public Tuple getNextWide() throws IOException\n                     key = (ByteBuffer)reader.getCurrentKey();\n                     if (lastKey != null && !(key.equals(lastKey))) // last key only had one value\n                     {\n-                        addKeyToTuple(tuple, lastKey, cfDef, parseType(cfDef.getKey_validation_class()));\n+                        tuple = addKeyToTuple(tuple, lastKey, cfDef, parseType(cfDef.getKey_validation_class()));\n                         for (Map.Entry<ByteBuffer, IColumn> entry : lastRow.entrySet())\n                         {\n                             bag.add(columnToTuple(entry.getValue(), cfDef, parseType(cfDef.getComparator_type())));\n@@ -190,7 +190,7 @@ public Tuple getNextWide() throws IOException\n                         lastRow = (SortedMap<ByteBuffer,IColumn>)reader.getCurrentValue();\n                         return tuple;\n                     }\n-                    addKeyToTuple(tuple, lastKey, cfDef, parseType(cfDef.getKey_validation_class()));\n+                    tuple = addKeyToTuple(tuple, lastKey, cfDef, parseType(cfDef.getKey_validation_class()));\n                 }\n                 SortedMap<ByteBuffer,IColumn> row = (SortedMap<ByteBuffer,IColumn>)reader.getCurrentValue();\n                 if (lastRow != null) // prepend what was read last time\n@@ -233,7 +233,7 @@ public Tuple getNext() throws IOException\n             // output tuple, will hold the key, each indexed column in a tuple, then a bag of the rest\n             // NOTE: we're setting the tuple size here only for the key so we can use setTupleValue on it\n \n-            Tuple tuple = keyToTuple(key, cfDef, parseType(cfDef.getKey_validation_class()));\n+            Tuple tuple = addKeyToTuple(null, key, cfDef, parseType(cfDef.getKey_validation_class()));\n             DefaultDataBag bag = new DefaultDataBag();\n \n             // we must add all the indexed columns first to match the schema\n@@ -292,15 +292,12 @@ private Tuple composeComposite( AbstractCompositeType comparator, ByteBuffer nam\n         return t;\n     }\n \n-    private Tuple keyToTuple(ByteBuffer key, CfDef cfDef, AbstractType comparator) throws IOException\n-    {\n-        Tuple tuple = TupleFactory.getInstance().newTuple(1);\n-        addKeyToTuple(tuple, key, cfDef, comparator);\n-        return tuple;\n-    }\n-\n-    private void addKeyToTuple(Tuple tuple, ByteBuffer key, CfDef cfDef, AbstractType comparator) throws IOException\n+    private Tuple addKeyToTuple(Tuple tuple, ByteBuffer key, CfDef cfDef, AbstractType comparator) throws IOException\n     {\n+        if( tuple == null )\n+        {\n+            tuple = TupleFactory.getInstance().newTuple(1);\n+        }\n         if( comparator instanceof AbstractCompositeType )\n         {\n             setTupleValue(tuple, 0, composeComposite((AbstractCompositeType)comparator,key));\n@@ -309,7 +306,7 @@ private void addKeyToTuple(Tuple tuple, ByteBuffer key, CfDef cfDef, AbstractTyp\n         {\n             setTupleValue(tuple, 0, getDefaultMarshallers(cfDef).get(MarshallerType.KEY_VALIDATOR).compose(key));\n         }\n-\n+        return tuple;\n     }\n \n     private Tuple columnToTuple(IColumn col, CfDef cfDef, AbstractType comparator) throws IOException", "filename": "src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/8e03f7bdf26558dc397628c885c5b6ab0cfde3e0", "parent": "https://github.com/apache/cassandra/commit/acaa52465554e82519fc312d3fcff586f55ee36e", "message": "fix potential NPE with both equal and unequal restriction\n\npatch by slebresne; reviewed by jbellis for CASSANDRA-4532", "bug_id": "cassandra_123", "file": [{"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/8e03f7bdf26558dc397628c885c5b6ab0cfde3e0/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/8e03f7bdf26558dc397628c885c5b6ab0cfde3e0/CHANGES.txt", "sha": "6e72892f66141412e29a5e2d977c426bbf895f9c", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=8e03f7bdf26558dc397628c885c5b6ab0cfde3e0", "patch": "@@ -1,3 +1,6 @@\n+1.1.6\n+  * (cql3) fix potential NPE with both equal and unequal restriction (CASSANDRA-4532)\n+\n 1.1.5\n  * add SecondaryIndex.reload API (CASSANDRA-4581)\n  * use millis + atomicint for commitlog segment creation instead of", "filename": "CHANGES.txt"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/8e03f7bdf26558dc397628c885c5b6ab0cfde3e0/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java", "blob_url": "https://github.com/apache/cassandra/blob/8e03f7bdf26558dc397628c885c5b6ab0cfde3e0/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java", "sha": "dd00c5ce26120d04339c44a55de3f150c50b2461", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java?ref=8e03f7bdf26558dc397628c885c5b6ab0cfde3e0", "patch": "@@ -1274,6 +1274,9 @@ public void setBound(ColumnIdentifier name, Relation.Type type, Term t) throws I\n                     break;\n             }\n \n+            if (bounds == null)\n+                throw new InvalidRequestException(String.format(\"%s cannot be restricted by both an equal and an inequal relation\", name));\n+\n             if (bounds[b.idx] != null)\n                 throw new InvalidRequestException(String.format(\"Invalid restrictions found on %s\", name));\n             bounds[b.idx] = t;", "filename": "src/java/org/apache/cassandra/cql3/statements/SelectStatement.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/03ea58a94827087ac75bf48ae1ef8698fb48fda0", "parent": "https://github.com/apache/cassandra/commit/bd32d4f0b9f0f88fed97e8ddf2ee41b5b048d31d", "message": "Revert \"StorageProxy throws NPEs for when there's no hostids for a target\"\n\nThis reverts commit bd32d4f0b9f0f88fed97e8ddf2ee41b5b048d31d.", "bug_id": "cassandra_124", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/03ea58a94827087ac75bf48ae1ef8698fb48fda0/src/java/org/apache/cassandra/service/StorageProxy.java", "blob_url": "https://github.com/apache/cassandra/blob/03ea58a94827087ac75bf48ae1ef8698fb48fda0/src/java/org/apache/cassandra/service/StorageProxy.java", "sha": "9fad95a6e309becfce280eac7cce5ccce4cc38ae", "changes": 7, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageProxy.java?ref=03ea58a94827087ac75bf48ae1ef8698fb48fda0", "patch": "@@ -362,11 +362,8 @@ public void runMayThrow() throws IOException\n                 try\n                 {\n                     UUID hostId = StorageService.instance.getTokenMetadata().getHostId(target);\n-                    if (hostId == null) // The node in question will not have a host id if older than MessagingService.VERSION_12 in a mixed version cluster\n-                    {\n-                        logger.warn(\"Unable to store hint for host with missing ID, {} (old node?)\", target.toString());\n-                        return;\n-                    }\n+                    if ((hostId == null) && (Gossiper.instance.getVersion(target) < MessagingService.VERSION_12))\n+                        logger.info(\"Unable to store hint for host with missing ID, {} (old node?)\", target.toString());\n                     RowMutation hintedMutation = RowMutation.hintFor(mutation, ByteBuffer.wrap(UUIDGen.decompose(hostId)));\n                     hintedMutation.apply();\n ", "filename": "src/java/org/apache/cassandra/service/StorageProxy.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/cc672f36158c2dee3abad1fa6f51488f14ffb902", "parent": "https://github.com/apache/cassandra/commit/28af4fa04fc84e61bf35bb3761c01f51533b9b15", "message": "Fix NPE when deleting/setting by index on null list collection\n\nPatch by Jeff Jirsa; reviewed by Benjamin Lerer for CASSANDRA-9077", "bug_id": "cassandra_125", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/cc672f36158c2dee3abad1fa6f51488f14ffb902/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/cc672f36158c2dee3abad1fa6f51488f14ffb902/CHANGES.txt", "sha": "6137e00a1f3fad4a2fd8b5ea378f066f363b9f94", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=cc672f36158c2dee3abad1fa6f51488f14ffb902", "patch": "@@ -1,4 +1,6 @@\n 2.1.5\n+ * Fix NullPointerException when deleting or setting an element by index on\n+   a null list collection (CASSANDRA-9077)\n  * Buffer bloom filter serialization (CASSANDRA-9066)\n  * Fix anti-compaction target bloom filter size (CASSANDRA-9060)\n  * Make FROZEN and TUPLE unreserved keywords in CQL (CASSANDRA-9047)", "filename": "CHANGES.txt"}, {"additions": 6, "raw_url": "https://github.com/apache/cassandra/raw/cc672f36158c2dee3abad1fa6f51488f14ffb902/src/java/org/apache/cassandra/cql3/Lists.java", "blob_url": "https://github.com/apache/cassandra/blob/cc672f36158c2dee3abad1fa6f51488f14ffb902/src/java/org/apache/cassandra/cql3/Lists.java", "sha": "6ca495b7f8cfbf422c4c1c450e3d11c7bce39110", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/Lists.java?ref=cc672f36158c2dee3abad1fa6f51488f14ffb902", "patch": "@@ -342,6 +342,8 @@ public void execute(ByteBuffer rowKey, ColumnFamily cf, Composite prefix, Update\n \n             List<Cell> existingList = params.getPrefetchedList(rowKey, column.name);\n             int idx = ByteBufferUtil.toInt(index);\n+            if (existingList == null)\n+                throw new InvalidRequestException(\"Attempted to set an element on a list which is null\");\n             if (idx < 0 || idx >= existingList.size())\n                 throw new InvalidRequestException(String.format(\"List index %d out of bound, list has size %d\", idx, existingList.size()));\n \n@@ -453,6 +455,8 @@ public void execute(ByteBuffer rowKey, ColumnFamily cf, Composite prefix, Update\n             // We want to call bind before possibly returning to reject queries where the value provided is not a list.\n             Term.Terminal value = t.bind(params.options);\n \n+            if (existingList == null)\n+                throw new InvalidRequestException(\"Attempted to delete an element from a list which is null\");\n             if (existingList.isEmpty())\n                 return;\n \n@@ -496,6 +500,8 @@ public void execute(ByteBuffer rowKey, ColumnFamily cf, Composite prefix, Update\n \n             List<Cell> existingList = params.getPrefetchedList(rowKey, column.name);\n             int idx = ByteBufferUtil.toInt(index.get(params.options));\n+            if (existingList == null)\n+                throw new InvalidRequestException(\"Attempted to delete an element from a list which is null\");\n             if (idx < 0 || idx >= existingList.size())\n                 throw new InvalidRequestException(String.format(\"List index %d out of bound, list has size %d\", idx, existingList.size()));\n ", "filename": "src/java/org/apache/cassandra/cql3/Lists.java"}, {"additions": 20, "raw_url": "https://github.com/apache/cassandra/raw/cc672f36158c2dee3abad1fa6f51488f14ffb902/test/unit/org/apache/cassandra/cql3/CollectionsTest.java", "blob_url": "https://github.com/apache/cassandra/blob/cc672f36158c2dee3abad1fa6f51488f14ffb902/test/unit/org/apache/cassandra/cql3/CollectionsTest.java", "sha": "3d266b7c8f0365c8480ee3ab9d14c86c254edd85", "changes": 44, "status": "modified", "deletions": 24, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/CollectionsTest.java?ref=cc672f36158c2dee3abad1fa6f51488f14ffb902", "patch": "@@ -166,51 +166,47 @@ public void testLists() throws Throwable\n \n         execute(\"INSERT INTO %s(k, l) VALUES (0, ?)\", list(\"v1\", \"v2\", \"v3\"));\n \n-        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"),\n-            row(list(\"v1\", \"v2\", \"v3\"))\n-        );\n+        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"), row(list(\"v1\", \"v2\", \"v3\")));\n \n         execute(\"DELETE l[?] FROM %s WHERE k = 0\", 1);\n \n-        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"),\n-            row(list(\"v1\", \"v3\"))\n-        );\n+        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"), row(list(\"v1\", \"v3\")));\n \n         execute(\"UPDATE %s SET l[?] = ? WHERE k = 0\", 1, \"v4\");\n \n-        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"),\n-            row(list(\"v1\", \"v4\"))\n-        );\n+        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"), row(list(\"v1\", \"v4\")));\n \n         // Full overwrite\n         execute(\"UPDATE %s SET l = ? WHERE k = 0\", list(\"v6\", \"v5\"));\n \n-        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"),\n-            row(list(\"v6\", \"v5\"))\n-        );\n+        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"), row(list(\"v6\", \"v5\")));\n \n         execute(\"UPDATE %s SET l = l + ? WHERE k = 0\", list(\"v7\", \"v8\"));\n \n-        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"),\n-            row(list(\"v6\", \"v5\", \"v7\", \"v8\"))\n-        );\n+        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"), row(list(\"v6\", \"v5\", \"v7\", \"v8\")));\n \n         execute(\"UPDATE %s SET l = ? + l WHERE k = 0\", list(\"v9\"));\n \n-        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"),\n-            row(list(\"v9\", \"v6\", \"v5\", \"v7\", \"v8\"))\n-        );\n+        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"), row(list(\"v9\", \"v6\", \"v5\", \"v7\", \"v8\")));\n \n         execute(\"UPDATE %s SET l = l - ? WHERE k = 0\", list(\"v5\", \"v8\"));\n \n-        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"),\n-            row(list(\"v9\", \"v6\", \"v7\"))\n-        );\n+        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"), row(list(\"v9\", \"v6\", \"v7\")));\n \n         execute(\"DELETE l FROM %s WHERE k = 0\");\n \n-        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"),\n-            row((Object)null)\n-        );\n+        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"), row((Object) null));\n+\n+        assertInvalidMessage(\"Attempted to delete an element from a list which is null\",\n+                             \"DELETE l[0] FROM %s WHERE k=0 \");\n+\n+        assertInvalidMessage(\"Attempted to set an element on a list which is null\",\n+                             \"UPDATE %s SET l[0] = ? WHERE k=0\", list(\"v10\"));\n+\n+        assertInvalidMessage(\"Attempted to delete an element from a list which is null\",\n+                             \"UPDATE %s SET l = l - ? WHERE k=0 \",\n+                             list(\"v11\"));\n+\n+        assertRows(execute(\"SELECT l FROM %s WHERE k = 0\"), row((Object) null));\n     }\n }", "filename": "test/unit/org/apache/cassandra/cql3/CollectionsTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/abb39c2bc4f985b848c07d181b45efd378b4795c", "parent": "https://github.com/apache/cassandra/commit/f20badb685393e60f74b236edf623c7c9264f1eb", "message": "fix compaction NPE when out of disk space and assertions disabled\npatch by jbellis; reviewed by xedin for CASSANDRA-3985", "bug_id": "cassandra_126", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/abb39c2bc4f985b848c07d181b45efd378b4795c/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/abb39c2bc4f985b848c07d181b45efd378b4795c/CHANGES.txt", "sha": "1c1c184f6665c2fa572be083f98fce338326cb70", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=abb39c2bc4f985b848c07d181b45efd378b4795c", "patch": "@@ -12,6 +12,8 @@\n  * fix stress tool that hangs forever on timeout or error (CASSANDRA-4128)\n  * Fix super columns bug where cache is not updated (CASSANDRA-4190)\n  * stress tool to return appropriate exit code on failure (CASSANDRA-4188)\n+ * fix compaction NPE when out of disk space and assertions disabled\n+   (CASSANDRA-3985)\n \n \n 1.0.9\n@@ -27,8 +29,6 @@\n  * don't change manifest level for cleanup, scrub, and upgradesstables\n    operations under LeveledCompactionStrategy (CASSANDRA-3989, 4112)\n  * fix race leading to super columns assertion failure (CASSANDRA-3957)\n- * ensure that directory is selected for compaction for user-defined\n-   tasks and upgradesstables (CASSANDRA-3985)\n  * fix NPE on invalid CQL delete command (CASSANDRA-3755)\n  * allow custom types in CLI's assume command (CASSANDRA-4081)\n  * fix totalBytes count for parallel compactions (CASSANDRA-3758)", "filename": "CHANGES.txt"}, {"additions": 8, "raw_url": "https://github.com/apache/cassandra/raw/abb39c2bc4f985b848c07d181b45efd378b4795c/src/java/org/apache/cassandra/config/DatabaseDescriptor.java", "blob_url": "https://github.com/apache/cassandra/blob/abb39c2bc4f985b848c07d181b45efd378b4795c/src/java/org/apache/cassandra/config/DatabaseDescriptor.java", "sha": "82132012826d3a7068542d59d3a771d2f4b5153d", "changes": 29, "status": "modified", "deletions": 21, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=abb39c2bc4f985b848c07d181b45efd378b4795c", "patch": "@@ -757,23 +757,19 @@ public static String getSavedCachesLocation()\n         return Collections.unmodifiableSet(new HashSet(seedProvider.getSeeds()));\n     }\n \n-    public synchronized static String getDataFileLocationForTable(String table, long expectedCompactedFileSize)\n-    {\n-        return getDataFileLocationForTable(table, expectedCompactedFileSize, true);\n-    }\n-\n     /*\n      * Loop through all the disks to see which disk has the max free space\n      * return the disk with max free space for compactions. If the size of the expected\n      * compacted file is greater than the max disk space available return null, we cannot\n      * do compaction in this case.\n      *\n+     * Should only be called by Table.getDataFileLocation, which knows how to free up extra space under\n+     * some contitions to retry.  (Left public because some test methods cheat and call this directly.)\n+     *\n      * @param table name of the table.\n      * @param expectedCompactedSize expected file size in bytes.\n-     * @param ensureFreeSpace Flag if the function should ensure enough free space exists for the expected file size.\n-     *                        If False and there is not enough free space a warning is logged, and the dir with the most space is returned.\n      */\n-    public synchronized static String getDataFileLocationForTable(String table, long expectedCompactedFileSize, boolean ensureFreeSpace)\n+    public synchronized static String getDataFileLocationForTable(String table, long expectedCompactedFileSize)\n     {\n         long maxFreeDisk = 0;\n         int maxDiskIndex = 0;\n@@ -791,22 +787,13 @@ public synchronized static String getDataFileLocationForTable(String table, long\n             }\n         }\n \n-        logger.debug(\"expected data files size is {}; largest free partition has {} bytes free\",\n-                     expectedCompactedFileSize,\n-                     maxFreeDisk);\n-\n         // Load factor of 0.9 we do not want to use the entire disk that is too risky.\n         maxFreeDisk = (long) (0.9 * maxFreeDisk);\n-        if (!ensureFreeSpace || expectedCompactedFileSize < maxFreeDisk)\n-        {\n-            dataFileDirectory = dataDirectoryForTable[maxDiskIndex];\n+        logger.debug(\"expected data files size is {}; largest free partition has {} bytes usable\",\n+                     expectedCompactedFileSize, maxFreeDisk);\n \n-            if (expectedCompactedFileSize >= maxFreeDisk)\n-                logger.warn(String.format(\"Data file location %s only has %d free, expected size is %d\",\n-                                          dataFileDirectory,\n-                                          maxFreeDisk,\n-                                          expectedCompactedFileSize));\n-        }\n+        if (expectedCompactedFileSize < maxFreeDisk)\n+            dataFileDirectory = dataDirectoryForTable[maxDiskIndex];\n \n         return dataFileDirectory;\n     }", "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java"}, {"additions": 7, "raw_url": "https://github.com/apache/cassandra/raw/abb39c2bc4f985b848c07d181b45efd378b4795c/src/java/org/apache/cassandra/db/Table.java", "blob_url": "https://github.com/apache/cassandra/blob/abb39c2bc4f985b848c07d181b45efd378b4795c/src/java/org/apache/cassandra/db/Table.java", "sha": "d3a38dbe587b6f23c850296b016e1f76f0b6950b", "changes": 15, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/Table.java?ref=abb39c2bc4f985b848c07d181b45efd378b4795c", "patch": "@@ -556,17 +556,15 @@ private Object indexLockFor(ByteBuffer key)\n \n     public String getDataFileLocation(long expectedSize)\n     {\n-        return getDataFileLocation(expectedSize, true);\n-    }\n+        String path = DatabaseDescriptor.getDataFileLocationForTable(name, expectedSize);\n \n-    public String getDataFileLocation(long expectedSize, boolean ensureFreeSpace)\n-    {\n-        String path = DatabaseDescriptor.getDataFileLocationForTable(name, expectedSize, ensureFreeSpace);\n         // Requesting GC has a chance to free space only if we're using mmap and a non SUN jvm\n         if (path == null\n-         && (DatabaseDescriptor.getDiskAccessMode() == Config.DiskAccessMode.mmap || DatabaseDescriptor.getIndexAccessMode() == Config.DiskAccessMode.mmap)\n-         && !MmappedSegmentedFile.isCleanerAvailable())\n+            && (DatabaseDescriptor.getDiskAccessMode() == Config.DiskAccessMode.mmap || DatabaseDescriptor.getIndexAccessMode() == Config.DiskAccessMode.mmap)\n+            && !MmappedSegmentedFile.isCleanerAvailable())\n         {\n+            logger.info(\"Forcing GC to free up disk space.  Upgrade to the Oracle JVM to avoid this\");\n+\n             StorageService.instance.requestGC();\n             // retry after GCing has forced unmap of compacted SSTables so they can be deleted\n             // Note: GCInspector will do this already, but only sun JVM supports GCInspector so far\n@@ -579,8 +577,9 @@ public String getDataFileLocation(long expectedSize, boolean ensureFreeSpace)\n             {\n                 throw new AssertionError(e);\n             }\n-            path = DatabaseDescriptor.getDataFileLocationForTable(name, expectedSize, ensureFreeSpace);\n+            path = DatabaseDescriptor.getDataFileLocationForTable(name, expectedSize);\n         }\n+\n         return path;\n     }\n ", "filename": "src/java/org/apache/cassandra/db/Table.java"}, {"additions": 7, "raw_url": "https://github.com/apache/cassandra/raw/abb39c2bc4f985b848c07d181b45efd378b4795c/src/java/org/apache/cassandra/db/compaction/CompactionTask.java", "blob_url": "https://github.com/apache/cassandra/blob/abb39c2bc4f985b848c07d181b45efd378b4795c/src/java/org/apache/cassandra/db/compaction/CompactionTask.java", "sha": "2a1b4156329bd31c25b0b2c01c0fc88775ecb4eb", "changes": 22, "status": "modified", "deletions": 15, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/compaction/CompactionTask.java?ref=abb39c2bc4f985b848c07d181b45efd378b4795c", "patch": "@@ -77,7 +77,7 @@ public int execute(CompactionExecutorStatsCollector collector) throws IOExceptio\n             return 0;\n \n         if (compactionFileLocation == null)\n-            compactionFileLocation = cfs.table.getDataFileLocation(cfs.getExpectedCompactedFileSize(toCompact), ensureFreeSpace());\n+            compactionFileLocation = cfs.table.getDataFileLocation(cfs.getExpectedCompactedFileSize(toCompact));\n \n         if (compactionFileLocation == null && partialCompactionsAcceptable())\n         {\n@@ -89,17 +89,14 @@ public int execute(CompactionExecutorStatsCollector collector) throws IOExceptio\n                 // Note that we have removed files that are still marked as compacting.\n                 // This suboptimal but ok since the caller will unmark all the sstables at the end.\n                 toCompact.remove(cfs.getMaxSizeFile(toCompact));\n-                compactionFileLocation = cfs.table.getDataFileLocation(cfs.getExpectedCompactedFileSize(toCompact),\n-                                                                       ensureFreeSpace());\n-            }\n-\n-            if (compactionFileLocation == null)\n-            {\n-                logger.warn(\"insufficient space to compact even the two smallest files, aborting\");\n-                return 0;\n+                compactionFileLocation = cfs.table.getDataFileLocation(cfs.getExpectedCompactedFileSize(toCompact));\n             }\n         }\n-        assert compactionFileLocation != null;\n+        if (compactionFileLocation == null)\n+        {\n+            logger.warn(\"insufficient space to compact; aborting compaction\");\n+            return 0;\n+        }\n \n         if (DatabaseDescriptor.isSnapshotBeforeCompaction())\n             cfs.snapshotWithoutFlush(System.currentTimeMillis() + \"-\" + \"compact-\" + cfs.columnFamily);\n@@ -231,11 +228,6 @@ protected boolean partialCompactionsAcceptable()\n         return !isUserDefined;\n     }\n \n-    protected boolean ensureFreeSpace()\n-    {\n-        return !isUserDefined;\n-    }\n-\n     //extensibility point for other strategies that may want to limit the upper bounds of the sstable segment size\n     protected boolean newSSTableSegmentThresholdReached(SSTableWriter writer, long position)\n     {", "filename": "src/java/org/apache/cassandra/db/compaction/CompactionTask.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/ef01ca5bcf42fcf6c6a43a77eb4f0a90a93bbc1d", "parent": "https://github.com/apache/cassandra/commit/53fb52ac713e5471edd988b59cbd75f202a4f57b", "message": "Avoids NPE during repair when a keyspace has no CFs\n\npatch by slebresne; reviewed by jbellis for CASSANDRA-3988", "bug_id": "cassandra_127", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/ef01ca5bcf42fcf6c6a43a77eb4f0a90a93bbc1d/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/ef01ca5bcf42fcf6c6a43a77eb4f0a90a93bbc1d/CHANGES.txt", "sha": "bc10ae20534d673f4286100ac480f854392c636a", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=ef01ca5bcf42fcf6c6a43a77eb4f0a90a93bbc1d", "patch": "@@ -7,6 +7,7 @@\n  * add CompositeType ref to the CLI doc for create/update column family (CASSANDRA-3980)\n  * Pig: support Counter ColumnFamilies (CASSANDRA-3973)\n  * Pig: Composite column support (CASSANDRA-384)\n+ * Avoid NPE during repair when a keyspace has no CFs (CASSANDRA-3988)\n \n \n 1.0.8", "filename": "CHANGES.txt"}, {"additions": 10, "raw_url": "https://github.com/apache/cassandra/raw/ef01ca5bcf42fcf6c6a43a77eb4f0a90a93bbc1d/src/java/org/apache/cassandra/service/StorageService.java", "blob_url": "https://github.com/apache/cassandra/blob/ef01ca5bcf42fcf6c6a43a77eb4f0a90a93bbc1d/src/java/org/apache/cassandra/service/StorageService.java", "sha": "7f2f9886b600d5e276c60db966b502462527e625", "changes": 10, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=ef01ca5bcf42fcf6c6a43a77eb4f0a90a93bbc1d", "patch": "@@ -1808,6 +1808,8 @@ public void forceTableRepair(final String tableName, final String... columnFamil\n         for (Range range : ranges)\n         {\n             AntiEntropyService.RepairFuture future = forceTableRepair(range, tableName, columnFamilies);\n+            if (future == null)\n+                continue;\n             futures.add(future);\n             // wait for a session to be done with its differencing before starting the next one\n             try\n@@ -1848,6 +1850,8 @@ public void forceTableRepairPrimaryRange(final String tableName, final String...\n             return;\n \n         AntiEntropyService.RepairFuture future = forceTableRepair(getLocalPrimaryRange(), tableName, columnFamilies);\n+        if (future == null)\n+            return;\n         try\n         {\n             future.get();\n@@ -1867,6 +1871,12 @@ public void forceTableRepairPrimaryRange(final String tableName, final String...\n             names.add(cfStore.getColumnFamilyName());\n         }\n \n+        if (names.isEmpty())\n+        {\n+            logger_.info(\"No column family to repair for keyspace \" + tableName);\n+            return null;\n+        }\n+\n         return AntiEntropyService.instance.submitRepairSession(range, tableName, names.toArray(new String[names.size()]));\n     }\n ", "filename": "src/java/org/apache/cassandra/service/StorageService.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/648e62e58eaea8dba261d81e9048b0ae64536518", "parent": "https://github.com/apache/cassandra/commit/d2c22a855c260a9c4e51ac41f42b7b3de46a0a7b", "message": "BulkRecordWriter throws NPE for counter columns\nPatch by goffinet and driftx, reviewed by Brandon Williams for CASSANDRA-3906", "bug_id": "cassandra_128", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/648e62e58eaea8dba261d81e9048b0ae64536518/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/648e62e58eaea8dba261d81e9048b0ae64536518/CHANGES.txt", "sha": "9481f5e381fa52dec70f498462ef790143971ed8", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=648e62e58eaea8dba261d81e9048b0ae64536518", "patch": "@@ -75,7 +75,7 @@\n    parent CF (CASSANDRA-3877)\n  * Finish cleanup up tombstone purge code (CASSANDRA-3872)\n  * Avoid NPE on aboarted stream-out sessions (CASSANDRA-3904)\n-\n+ * BulkRecordWriter throws NPE for counter columns (CASSANDRA-3906)\n \n 1.0.8\n  * fix race between cleanup and flush on secondary index CFSes (CASSANDRA-3712)", "filename": "CHANGES.txt"}, {"additions": 8, "raw_url": "https://github.com/apache/cassandra/raw/648e62e58eaea8dba261d81e9048b0ae64536518/src/java/org/apache/cassandra/hadoop/BulkRecordWriter.java", "blob_url": "https://github.com/apache/cassandra/blob/648e62e58eaea8dba261d81e9048b0ae64536518/src/java/org/apache/cassandra/hadoop/BulkRecordWriter.java", "sha": "aded15e5d92e8ca3bcc32fae574701718d20c407", "changes": 15, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/hadoop/BulkRecordWriter.java?ref=648e62e58eaea8dba261d81e9048b0ae64536518", "patch": "@@ -143,13 +143,14 @@ public void write(ByteBuffer keybuff, List<Mutation> value) throws IOException\n             if (cfType == CFType.SUPER)\n             {\n                 writer.newSuperColumn(mut.getColumn_or_supercolumn().getSuper_column().name);\n-                for (Column column : mut.getColumn_or_supercolumn().getSuper_column().columns)\n+                if (colType == ColType.COUNTER)\n+                    for (CounterColumn column : mut.getColumn_or_supercolumn().getCounter_super_column().columns)\n+                        writer.addCounterColumn(column.name, column.value);\n+                else\n                 {\n-                    if (colType == ColType.COUNTER)\n-                        writer.addCounterColumn(column.name, column.value.getLong());\n-                    else\n+                    for (Column column : mut.getColumn_or_supercolumn().getSuper_column().columns)\n                     {\n-                        if(0 == column.ttl)\n+                        if(column.ttl == 0)\n                             writer.addColumn(column.name, column.value, column.timestamp);\n                         else\n                             writer.addExpiringColumn(column.name, column.value, column.timestamp, column.ttl, System.currentTimeMillis() + (column.ttl * 1000));\n@@ -159,10 +160,10 @@ public void write(ByteBuffer keybuff, List<Mutation> value) throws IOException\n             else\n             {\n                 if (colType == ColType.COUNTER)\n-                    writer.addCounterColumn(mut.getColumn_or_supercolumn().column.name, mut.getColumn_or_supercolumn().column.value.getLong());\n+                    writer.addCounterColumn(mut.getColumn_or_supercolumn().counter_column.name, mut.getColumn_or_supercolumn().counter_column.value);\n                 else\n \t            {\n-                    if(0 == mut.getColumn_or_supercolumn().column.ttl)\n+                    if(mut.getColumn_or_supercolumn().column.ttl == 0)\n \t                     writer.addColumn(mut.getColumn_or_supercolumn().column.name, mut.getColumn_or_supercolumn().column.value, mut.getColumn_or_supercolumn().column.timestamp);\n                     else\n                         writer.addExpiringColumn(mut.getColumn_or_supercolumn().column.name, mut.getColumn_or_supercolumn().column.value, mut.getColumn_or_supercolumn().column.timestamp, mut.getColumn_or_supercolumn().column.ttl, System.currentTimeMillis() + (mut.getColumn_or_supercolumn().column.ttl * 1000));", "filename": "src/java/org/apache/cassandra/hadoop/BulkRecordWriter.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/3e5edb82c73b7b7c6e1d1e970fb764c3e3158da6", "parent": "https://github.com/apache/cassandra/commit/33297bad040c660c8cd5ea6378189fffb100b0ab", "message": "rpc_interface and listen_interface generate NPE on startup when specified interface doesn't exist\n\nPatch by Ariel Weisberg; reviewed by Robert Stupp for CASSANDRA-8677", "bug_id": "cassandra_129", "file": [{"additions": 23, "raw_url": "https://github.com/apache/cassandra/raw/3e5edb82c73b7b7c6e1d1e970fb764c3e3158da6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java", "blob_url": "https://github.com/apache/cassandra/blob/3e5edb82c73b7b7c6e1d1e970fb764c3e3158da6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java", "sha": "1dd16883eb0da7329d2a7a802a35ef017e0f88d6", "changes": 46, "status": "modified", "deletions": 23, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=3e5edb82c73b7b7c6e1d1e970fb764c3e3158da6", "patch": "@@ -158,6 +158,27 @@ public static Config loadConfig() throws ConfigurationException\n         return loader.loadConfig();\n     }\n \n+    private static InetAddress getNetworkInterfaceAddress(String intf, String configName) throws ConfigurationException\n+    {\n+        try\n+        {\n+            NetworkInterface ni = NetworkInterface.getByName(intf);\n+            if (ni == null)\n+                throw new ConfigurationException(\"Configured \" + configName + \" \\\"\" + intf + \"\\\" could not be found\");\n+            Enumeration<InetAddress> addrs = ni.getInetAddresses();\n+            if (!addrs.hasMoreElements())\n+                throw new ConfigurationException(\"Configured \" + configName + \" \\\"\" + intf + \"\\\" was found, but had no addresses\");\n+            InetAddress retval = listenAddress = addrs.nextElement();\n+            if (addrs.hasMoreElements())\n+                throw new ConfigurationException(\"Configured \" + configName + \" \\\"\" + intf + \"\\\" can't have more than one address\");\n+            return retval;\n+        }\n+        catch (SocketException e)\n+        {\n+            throw new ConfigurationException(\"Configured \" + configName + \" \\\"\" + intf + \"\\\" caused an exception\", e);\n+        }\n+    }\n+\n     private static void applyConfig(Config config) throws ConfigurationException\n     {\n         conf = config;\n@@ -326,18 +347,7 @@ else if (conf.listen_address != null)\n         }\n         else if (conf.listen_interface != null)\n         {\n-            try\n-            {\n-                Enumeration<InetAddress> addrs = NetworkInterface.getByName(conf.listen_interface).getInetAddresses();\n-                listenAddress = addrs.nextElement();\n-                if (addrs.hasMoreElements())\n-                    throw new ConfigurationException(\"Interface \" + conf.listen_interface +\" can't have more than one address\");\n-            }\n-            catch (SocketException e)\n-            {\n-                throw new ConfigurationException(\"Unknown network interface in listen_interface \" + conf.listen_interface);\n-            }\n-\n+            listenAddress = getNetworkInterfaceAddress(conf.listen_interface, \"listen_interface\");\n         }\n \n         /* Gossip Address to broadcast */\n@@ -374,17 +384,7 @@ else if (conf.rpc_address != null)\n         }\n         else if (conf.rpc_interface != null)\n         {\n-            try\n-            {\n-                Enumeration<InetAddress> addrs = NetworkInterface.getByName(conf.rpc_interface).getInetAddresses();\n-                rpcAddress = addrs.nextElement();\n-                if (addrs.hasMoreElements())\n-                    throw new ConfigurationException(\"Interface \" + conf.rpc_interface +\" can't have more than one address\");\n-            }\n-            catch (SocketException e)\n-            {\n-                throw new ConfigurationException(\"Unknown network interface in rpc_interface \" + conf.rpc_interface);\n-            }\n+            listenAddress = getNetworkInterfaceAddress(conf.rpc_interface, \"rpc_interface\");\n         }\n         else\n         {", "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/25d4a13d5621f11290af83b81b0be1588ffc87db", "parent": "https://github.com/apache/cassandra/commit/cf07fc259799bc403ab4946f9dcb142da1c11ed5", "message": "Fix NPE when passing wrong argument in ALTER TABLE statement\n\npatch by Benjamin Lerer; reviewed by Robert Stupp for CASSANDRA-8355", "bug_id": "cassandra_130", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/25d4a13d5621f11290af83b81b0be1588ffc87db/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/25d4a13d5621f11290af83b81b0be1588ffc87db/CHANGES.txt", "sha": "8f312a7ea9f49faf1cf36b7b8541e2227e89b6ec", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=25d4a13d5621f11290af83b81b0be1588ffc87db", "patch": "@@ -1,4 +1,5 @@\n 2.1.3\n+ * Fix NPE when passing wrong argument in ALTER TABLE statement (CASSANDRA-8355)\n  * Pig: Refactor and deprecate CqlStorage (CASSANDRA-8599)\n  * Don't reuse the same cleanup strategy for all sstables (CASSANDRA-8537)\n  * Fix case-sensitivity of index name on CREATE and DROP INDEX", "filename": "CHANGES.txt"}, {"additions": 9, "raw_url": "https://github.com/apache/cassandra/raw/25d4a13d5621f11290af83b81b0be1588ffc87db/src/java/org/apache/cassandra/cql3/Cql.g", "blob_url": "https://github.com/apache/cassandra/blob/25d4a13d5621f11290af83b81b0be1588ffc87db/src/java/org/apache/cassandra/cql3/Cql.g", "sha": "9067fc44eeb4eb4e5c1c00fc18afde4788a767d5", "changes": 15, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/Cql.g?ref=25d4a13d5621f11290af83b81b0be1588ffc87db", "patch": "@@ -942,16 +942,19 @@ functionName returns [String s]\n     | K_TOKEN                       { $s = \"token\"; }\n     ;\n \n-functionArgs returns [List<Term.Raw> a]\n-    : '(' ')' { $a = Collections.emptyList(); }\n-    | '(' t1=term { List<Term.Raw> args = new ArrayList<Term.Raw>(); args.add(t1); }\n-          ( ',' tn=term { args.add(tn); } )*\n-       ')' { $a = args; }\n+function returns [Term.Raw t]\n+    : f=functionName '(' ')'                   { $t = new FunctionCall.Raw(f, Collections.<Term.Raw>emptyList()); }\n+    | f=functionName '(' args=functionArgs ')' { $t = new FunctionCall.Raw(f, args); }\n+    ;\n+\n+functionArgs returns [List<Term.Raw> args]\n+    @init{ $args = new ArrayList<Term.Raw>(); }\n+    : t1=term {args.add(t1); } ( ',' tn=term { args.add(tn); } )*\n     ;\n \n term returns [Term.Raw term]\n     : v=value                          { $term = v; }\n-    | f=functionName args=functionArgs { $term = new FunctionCall.Raw(f, args); }\n+    | f=function                       { $term = f; }\n     | '(' c=comparatorType ')' t=term  { $term = new TypeCast(c, t); }\n     ;\n ", "filename": "src/java/org/apache/cassandra/cql3/Cql.g"}, {"additions": 9, "raw_url": "https://github.com/apache/cassandra/raw/25d4a13d5621f11290af83b81b0be1588ffc87db/test/unit/org/apache/cassandra/cql3/AlterTableTest.java", "blob_url": "https://github.com/apache/cassandra/blob/25d4a13d5621f11290af83b81b0be1588ffc87db/test/unit/org/apache/cassandra/cql3/AlterTableTest.java", "sha": "9668a41898b133c8531277d0a87b73cff4466d2d", "changes": 11, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/AlterTableTest.java?ref=25d4a13d5621f11290af83b81b0be1588ffc87db", "patch": "@@ -19,8 +19,6 @@\n \n import org.junit.Test;\n \n-import org.apache.cassandra.exceptions.InvalidRequestException;\n-\n public class AlterTableTest extends CQLTester\n {\n     @Test\n@@ -83,4 +81,13 @@ public void testDropListAndAddMapWithSameName() throws Throwable\n \n         assertInvalid(\"ALTER TABLE %s ADD myCollection map<int, int>;\");\n     }\n+\n+    @Test\n+    public void testChangeStrategyWithUnquotedAgrument() throws Throwable\n+    {\n+        createTable(\"CREATE TABLE %s (id text PRIMARY KEY);\");\n+\n+        assertInvalidSyntaxMessage(\"no viable alternative at input '}'\",\n+                                   \"ALTER TABLE %s WITH caching = {'keys' : 'all', 'rows_per_partition' : ALL};\");\n+    }\n }", "filename": "test/unit/org/apache/cassandra/cql3/AlterTableTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/3f3d0edbad6b42f5fc8715ecfa52e2e41bbdcea9", "parent": "https://github.com/apache/cassandra/commit/ac9cfbd9aeb91c3391d78724fe8cb1e49ada55aa", "message": "Fix NPE when writetime() or ttl() are nested inside a fn call\n\nPatch by Tyler Hobbs; reviewed by Benjamin Lerer for CASSANDRA-8451", "bug_id": "cassandra_131", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/3f3d0edbad6b42f5fc8715ecfa52e2e41bbdcea9/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/3f3d0edbad6b42f5fc8715ecfa52e2e41bbdcea9/CHANGES.txt", "sha": "cc426bb5b25a81e5b995feddd909256bf75e8f08", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=3f3d0edbad6b42f5fc8715ecfa52e2e41bbdcea9", "patch": "@@ -1,4 +1,6 @@\n 2.0.12:\n+ * Fix NPE when writetime() or ttl() calls are wrapped by\n+   another function call (CASSANDRA-8451)\n  * Fix NPE after dropping a keyspace (CASSANDRA-8332)\n  * Fix error message on read repair timeouts (CASSANDRA-7947)\n  * Default DTCS base_time_seconds changed to 60 (CASSANDRA-8417)", "filename": "CHANGES.txt"}, {"additions": 45, "raw_url": "https://github.com/apache/cassandra/raw/3f3d0edbad6b42f5fc8715ecfa52e2e41bbdcea9/src/java/org/apache/cassandra/cql3/statements/Selection.java", "blob_url": "https://github.com/apache/cassandra/blob/3f3d0edbad6b42f5fc8715ecfa52e2e41bbdcea9/src/java/org/apache/cassandra/cql3/statements/Selection.java", "sha": "223f698b6f91d889d919944aefe21f8a2343f471", "changes": 50, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/Selection.java?ref=3f3d0edbad6b42f5fc8715ecfa52e2e41bbdcea9", "patch": "@@ -186,11 +186,8 @@ public static Selection fromSelectors(CFDefinition cfDef, List<RawSelector> rawS\n             {\n                 Selector selector = makeSelector(cfDef, rawSelector, names, metadata);\n                 selectors.add(selector);\n-                if (selector instanceof WritetimeOrTTLSelector)\n-                {\n-                    collectTimestamps |= ((WritetimeOrTTLSelector)selector).isWritetime;\n-                    collectTTLs |= !((WritetimeOrTTLSelector)selector).isWritetime;\n-                }\n+                collectTimestamps |= selector.usesTimestamps();\n+                collectTTLs |= selector.usesTTLs();\n             }\n             return new SelectionWithProcessing(names, metadata, selectors, collectTimestamps, collectTTLs);\n         }\n@@ -374,6 +371,12 @@ public SelectionWithProcessing(List<CFDefinition.Name> columns, List<ColumnSpeci\n     private interface Selector extends AssignementTestable\n     {\n         public ByteBuffer compute(ResultSetBuilder rs) throws InvalidRequestException;\n+\n+        /** Returns true if the selector acts on a column's timestamp, false otherwise. */\n+        public boolean usesTimestamps();\n+\n+        /** Returns true if the selector acts on a column's TTL, false otherwise. */\n+        public boolean usesTTLs();\n     }\n \n     private static class SimpleSelector implements Selector\n@@ -399,6 +402,16 @@ public boolean isAssignableTo(ColumnSpecification receiver)\n             return receiver.type.isValueCompatibleWith(type);\n         }\n \n+        public boolean usesTimestamps()\n+        {\n+            return false;\n+        }\n+\n+        public boolean usesTTLs()\n+        {\n+            return false;\n+        }\n+\n         @Override\n         public String toString()\n         {\n@@ -431,6 +444,22 @@ public boolean isAssignableTo(ColumnSpecification receiver)\n             return receiver.type.isValueCompatibleWith(fun.returnType());\n         }\n \n+        public boolean usesTimestamps()\n+        {\n+            for (Selector s : argSelectors)\n+                if (s.usesTimestamps())\n+                    return true;\n+            return false;\n+        }\n+\n+        public boolean usesTTLs()\n+        {\n+            for (Selector s : argSelectors)\n+                if (s.usesTTLs())\n+                    return true;\n+            return false;\n+        }\n+\n         @Override\n         public String toString()\n         {\n@@ -476,6 +505,17 @@ public boolean isAssignableTo(ColumnSpecification receiver)\n             return receiver.type.isValueCompatibleWith(isWritetime ? LongType.instance : Int32Type.instance);\n         }\n \n+\n+        public boolean usesTimestamps()\n+        {\n+            return isWritetime;\n+        }\n+\n+        public boolean usesTTLs()\n+        {\n+            return !isWritetime;\n+        }\n+\n         @Override\n         public String toString()\n         {", "filename": "src/java/org/apache/cassandra/cql3/statements/Selection.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/729d0b8aaf15a3c1e9ab62b97d06ba492c00cfee", "parent": "https://github.com/apache/cassandra/commit/a31441f01adc9912ec441412cc3c94d12f4bebec", "message": "Avoid NPEs when receiving table changes for an unknown keyspace\n\npatch by Robert Stupp; reviewed by Aleksey Yeschenko for CASSANDRA-7689", "bug_id": "cassandra_132", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/729d0b8aaf15a3c1e9ab62b97d06ba492c00cfee/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/729d0b8aaf15a3c1e9ab62b97d06ba492c00cfee/CHANGES.txt", "sha": "897119b84a71592c3f098f75c88e6cf02d7d55cc", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=729d0b8aaf15a3c1e9ab62b97d06ba492c00cfee", "patch": "@@ -1,4 +1,5 @@\n 2.1.1\n+ * Avoid NPEs when receiving type changes for an unknown keyspace (CASSANDRA-7689)\n  * Add support for custom 2i validation (CASSANDRA-7575)\n  * Pig support for hadoop CqlInputFormat (CASSANDRA-6454)\n  * Add listen_interface and rpc_interface options (CASSANDRA-7417)", "filename": "CHANGES.txt"}, {"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/729d0b8aaf15a3c1e9ab62b97d06ba492c00cfee/src/java/org/apache/cassandra/service/MigrationManager.java", "blob_url": "https://github.com/apache/cassandra/blob/729d0b8aaf15a3c1e9ab62b97d06ba492c00cfee/src/java/org/apache/cassandra/service/MigrationManager.java", "sha": "bdae208b4c107cc08dc4e8efdbb39bb03c1a2f77", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/MigrationManager.java?ref=729d0b8aaf15a3c1e9ab62b97d06ba492c00cfee", "patch": "@@ -256,7 +256,7 @@ public static void announceNewType(UserType newType)\n \n     public static void announceNewType(UserType newType, boolean announceLocally)\n     {\n-        announce(UTMetaData.toSchema(newType, FBUtilities.timestampMicros()), announceLocally);\n+        announce(addSerializedKeyspace(UTMetaData.toSchema(newType, FBUtilities.timestampMicros()), newType.keyspace), announceLocally);\n     }\n \n     public static void announceKeyspaceUpdate(KSMetaData ksm) throws ConfigurationException\n@@ -349,7 +349,7 @@ public static void announceTypeDrop(UserType droppedType)\n \n     public static void announceTypeDrop(UserType droppedType, boolean announceLocally)\n     {\n-        announce(UTMetaData.dropFromSchema(droppedType, FBUtilities.timestampMicros()), announceLocally);\n+        announce(addSerializedKeyspace(UTMetaData.dropFromSchema(droppedType, FBUtilities.timestampMicros()), droppedType.keyspace), announceLocally);\n     }\n \n     /**", "filename": "src/java/org/apache/cassandra/service/MigrationManager.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/8b8042b032fd93103fa6c74fc4b751e0dd9a207b", "parent": "https://github.com/apache/cassandra/commit/3dad8ca60c14a6c57a1a2830310b14d50d36b0c0", "message": "Don't NPE when username is supplied but password isn't.\n\nPatch by Mike Adamson, reviewed by brandonwilliams for CASSANDRA-7050", "bug_id": "cassandra_133", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/8b8042b032fd93103fa6c74fc4b751e0dd9a207b/src/java/org/apache/cassandra/hadoop/AbstractColumnFamilyInputFormat.java", "blob_url": "https://github.com/apache/cassandra/blob/8b8042b032fd93103fa6c74fc4b751e0dd9a207b/src/java/org/apache/cassandra/hadoop/AbstractColumnFamilyInputFormat.java", "sha": "73bc25c52e58cf54859f295e12d6770a7279bf8e", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/hadoop/AbstractColumnFamilyInputFormat.java?ref=8b8042b032fd93103fa6c74fc4b751e0dd9a207b", "patch": "@@ -103,7 +103,7 @@ protected void validateConfiguration(Configuration conf)\n \n         // log in\n         client.set_keyspace(ConfigHelper.getInputKeyspace(conf));\n-        if (ConfigHelper.getInputKeyspaceUserName(conf) != null)\n+        if ((ConfigHelper.getInputKeyspaceUserName(conf) != null) && (ConfigHelper.getInputKeyspacePassword(conf) != null))\n         {\n             Map<String, String> creds = new HashMap<String, String>();\n             creds.put(IAuthenticator.USERNAME_KEY, ConfigHelper.getInputKeyspaceUserName(conf));", "filename": "src/java/org/apache/cassandra/hadoop/AbstractColumnFamilyInputFormat.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/8b8042b032fd93103fa6c74fc4b751e0dd9a207b/src/java/org/apache/cassandra/hadoop/AbstractColumnFamilyOutputFormat.java", "blob_url": "https://github.com/apache/cassandra/blob/8b8042b032fd93103fa6c74fc4b751e0dd9a207b/src/java/org/apache/cassandra/hadoop/AbstractColumnFamilyOutputFormat.java", "sha": "96ca65da7bff92c9b28d663d9f72a04e20d944f0", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/hadoop/AbstractColumnFamilyOutputFormat.java?ref=8b8042b032fd93103fa6c74fc4b751e0dd9a207b", "patch": "@@ -124,7 +124,7 @@ public OutputCommitter getOutputCommitter(TaskAttemptContext context) throws IOE\n         TProtocol binaryProtocol = new TBinaryProtocol(transport, true, true);\n         Cassandra.Client client = new Cassandra.Client(binaryProtocol);\n         client.set_keyspace(ConfigHelper.getOutputKeyspace(conf));\n-        if (ConfigHelper.getOutputKeyspaceUserName(conf) != null)\n+        if ((ConfigHelper.getOutputKeyspaceUserName(conf) != null) && (ConfigHelper.getOutputKeyspacePassword(conf) != null))\n         {\n             Map<String, String> creds = new HashMap<String, String>();\n             creds.put(IAuthenticator.USERNAME_KEY, ConfigHelper.getOutputKeyspaceUserName(conf));", "filename": "src/java/org/apache/cassandra/hadoop/AbstractColumnFamilyOutputFormat.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/5e40a3b7c120f430d73ab34db68b361c0313b2eb", "parent": "https://github.com/apache/cassandra/commit/c92b20b3073f1c5cca3666225db33ea102ba77b5", "message": "Avoid NPEs when receiving table changes for an unknown keyspace\n\npatch by Aleksey Yeschenko; reviewed by Sylvain Lebresne for CASSANDRA-5631", "bug_id": "cassandra_134", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/5e40a3b7c120f430d73ab34db68b361c0313b2eb/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/5e40a3b7c120f430d73ab34db68b361c0313b2eb/CHANGES.txt", "sha": "51dec14a5da818d3d289d9597bc1433f188eecff", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=5e40a3b7c120f430d73ab34db68b361c0313b2eb", "patch": "@@ -15,6 +15,7 @@\n  * Fix SecondaryIndexManager#deleteFromIndexes() (CASSANDRA-6711)\n  * Fix snapshot repair not snapshotting coordinator itself (CASSANDRA-6713)\n  * Support negative timestamps for CQL3 dates in query string (CASSANDRA-6718)\n+ * Avoid NPEs when receiving table changes for an unknown keyspace (CASSANDRA-5631)\n \n \n 1.2.15", "filename": "CHANGES.txt"}, {"additions": 10, "raw_url": "https://github.com/apache/cassandra/raw/5e40a3b7c120f430d73ab34db68b361c0313b2eb/src/java/org/apache/cassandra/service/MigrationManager.java", "blob_url": "https://github.com/apache/cassandra/blob/5e40a3b7c120f430d73ab34db68b361c0313b2eb/src/java/org/apache/cassandra/service/MigrationManager.java", "sha": "9f6113cb486663876460163436ffdd75baed1ac0", "changes": 13, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/MigrationManager.java?ref=5e40a3b7c120f430d73ab34db68b361c0313b2eb", "patch": "@@ -210,7 +210,7 @@ else if (ksm.cfMetaData().containsKey(cfm.cfName))\n             throw new AlreadyExistsException(cfm.ksName, cfm.cfName);\n \n         logger.info(String.format(\"Create new ColumnFamily: %s\", cfm));\n-        announce(cfm.toSchema(FBUtilities.timestampMicros()));\n+        announce(addSerializedKeyspace(cfm.toSchema(FBUtilities.timestampMicros()), cfm.ksName));\n     }\n \n     public static void announceKeyspaceUpdate(KSMetaData ksm) throws ConfigurationException\n@@ -236,7 +236,7 @@ public static void announceColumnFamilyUpdate(CFMetaData cfm) throws Configurati\n         oldCfm.validateCompatility(cfm);\n \n         logger.info(String.format(\"Update ColumnFamily '%s/%s' From %s To %s\", cfm.ksName, cfm.cfName, oldCfm, cfm));\n-        announce(oldCfm.toSchemaUpdate(cfm, FBUtilities.timestampMicros()));\n+        announce(addSerializedKeyspace(oldCfm.toSchemaUpdate(cfm, FBUtilities.timestampMicros()), cfm.ksName));\n     }\n \n     public static void announceKeyspaceDrop(String ksName) throws ConfigurationException\n@@ -256,7 +256,14 @@ public static void announceColumnFamilyDrop(String ksName, String cfName) throws\n             throw new ConfigurationException(String.format(\"Cannot drop non existing column family '%s' in keyspace '%s'.\", cfName, ksName));\n \n         logger.info(String.format(\"Drop ColumnFamily '%s/%s'\", oldCfm.ksName, oldCfm.cfName));\n-        announce(oldCfm.dropFromSchema(FBUtilities.timestampMicros()));\n+        announce(addSerializedKeyspace(oldCfm.dropFromSchema(FBUtilities.timestampMicros()), ksName));\n+    }\n+\n+    // Include the serialized keyspace for when a target node missed the CREATE KEYSPACE migration (see #5631).\n+    private static RowMutation addSerializedKeyspace(RowMutation migration, String ksName)\n+    {\n+        migration.add(SystemTable.readSchemaRow(ksName).cf);\n+        return migration;\n     }\n \n     /**", "filename": "src/java/org/apache/cassandra/service/MigrationManager.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/45c8f53a2c42f48317110908734119a7cb24baf1", "parent": "https://github.com/apache/cassandra/commit/0ba2631ee228bdefaba61a53d723a65107ca044d", "message": "Raise a meaningful exception instead of NPE when PFS encounters an unconfigured node\npatch by jbellis; reviewed by brandonwilliams for CASSANDRA-4349", "bug_id": "cassandra_135", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/45c8f53a2c42f48317110908734119a7cb24baf1/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/45c8f53a2c42f48317110908734119a7cb24baf1/CHANGES.txt", "sha": "b6702cb5232386ab29a48ba5bb5a69231382b69e", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=45c8f53a2c42f48317110908734119a7cb24baf1", "patch": "@@ -1,4 +1,6 @@\n 1.1.2\n+ * Raise a meaningful exception instead of NPE when PFS encounters\n+   an unconfigured node + no default (CASSANDRA-4349)\n  * fix bug in sstable blacklisting with LCS (CASSANDRA-4343)\n  * LCS no longer promotes tiny sstables out of L0 (CASSANDRA-4341)\n  * skip tombstones during hint replay (CASSANDRA-4320)", "filename": "CHANGES.txt"}, {"additions": 0, "raw_url": "https://github.com/apache/cassandra/raw/45c8f53a2c42f48317110908734119a7cb24baf1/src/java/org/apache/cassandra/locator/AbstractNetworkTopologySnitch.java", "blob_url": "https://github.com/apache/cassandra/blob/45c8f53a2c42f48317110908734119a7cb24baf1/src/java/org/apache/cassandra/locator/AbstractNetworkTopologySnitch.java", "sha": "68404c91938a2b6f1942e34a3840480d6ba8cd29", "changes": 2, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/locator/AbstractNetworkTopologySnitch.java?ref=45c8f53a2c42f48317110908734119a7cb24baf1", "patch": "@@ -34,15 +34,13 @@\n      * Return the rack for which an endpoint resides in\n      * @param endpoint a specified endpoint\n      * @return string of rack\n-     * @throws UnknownHostException\n      */\n     abstract public String getRack(InetAddress endpoint);\n \n     /**\n      * Return the data center for which an endpoint resides in\n      * @param endpoint a specified endpoint\n      * @return string of data center\n-     * @throws UnknownHostException\n      */\n     abstract public String getDatacenter(InetAddress endpoint);\n ", "filename": "src/java/org/apache/cassandra/locator/AbstractNetworkTopologySnitch.java"}, {"additions": 8, "raw_url": "https://github.com/apache/cassandra/raw/45c8f53a2c42f48317110908734119a7cb24baf1/src/java/org/apache/cassandra/locator/PropertyFileSnitch.java", "blob_url": "https://github.com/apache/cassandra/blob/45c8f53a2c42f48317110908734119a7cb24baf1/src/java/org/apache/cassandra/locator/PropertyFileSnitch.java", "sha": "0bf58507c916887d466423c32e5bdb68c85ac1d6", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/locator/PropertyFileSnitch.java?ref=45c8f53a2c42f48317110908734119a7cb24baf1", "patch": "@@ -83,6 +83,14 @@ protected void runMayThrow() throws ConfigurationException\n      * @return a array of string with the first index being the data center and the second being the rack\n      */\n     public String[] getEndpointInfo(InetAddress endpoint)\n+    {\n+        String[] rawEndpointInfo = getRawEndpointInfo(endpoint);\n+        if (rawEndpointInfo == null)\n+            throw new RuntimeException(\"Unknown host \" + endpoint + \" with no default configured\");\n+        return rawEndpointInfo;\n+    }\n+\n+    private String[] getRawEndpointInfo(InetAddress endpoint)\n     {\n         String[] value = endpointMap.get(endpoint);\n         if (value == null)", "filename": "src/java/org/apache/cassandra/locator/PropertyFileSnitch.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/bd32d4f0b9f0f88fed97e8ddf2ee41b5b048d31d", "parent": "https://github.com/apache/cassandra/commit/669025cf2319d66629c362e7e377ee321489bded", "message": "StorageProxy throws NPEs for when there's no hostids for a target\npatch by dbrosius reviewed by jbellis for CASSANDRA-4227", "bug_id": "cassandra_136", "file": [{"additions": 5, "raw_url": "https://github.com/apache/cassandra/raw/bd32d4f0b9f0f88fed97e8ddf2ee41b5b048d31d/src/java/org/apache/cassandra/service/StorageProxy.java", "blob_url": "https://github.com/apache/cassandra/blob/bd32d4f0b9f0f88fed97e8ddf2ee41b5b048d31d/src/java/org/apache/cassandra/service/StorageProxy.java", "sha": "10189a0b3989379be91ef638d77356e4575f2f6c", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageProxy.java?ref=bd32d4f0b9f0f88fed97e8ddf2ee41b5b048d31d", "patch": "@@ -362,8 +362,11 @@ public void runMayThrow() throws IOException\n                 try\n                 {\n                     UUID hostId = StorageService.instance.getTokenMetadata().getHostId(target);\n-                    if ((hostId == null) && (Gossiper.instance.getVersion(target) < MessagingService.VERSION_12))\n-                        logger.info(\"Unable to store hint for host with missing ID, {} (old node?)\", target.toString());\n+                    if (hostId == null) // The node in question will not have a host id if older than MessagingService.VERSION_12 in a mixed version cluster\n+                    {\n+                        logger.warn(\"Unable to store hint for host with missing ID, {} (old node?)\", target.toString());\n+                        return;\n+                    }\n                     RowMutation hintedMutation = RowMutation.hintFor(mutation, ByteBuffer.wrap(UUIDGen.decompose(hostId)));\n                     hintedMutation.apply();\n ", "filename": "src/java/org/apache/cassandra/service/StorageProxy.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/a47d4cbf0fcce64c995b1dfc1192ab051a85ee33", "parent": "https://github.com/apache/cassandra/commit/527d590d435073ebefab7369f77e7d3a04d5b651", "message": "Fix BulkRecordWriter to not throw NPE if reducer gets no map data from Hadoop\nPatch by goffinet, reviewed by goffinet for CASSANDRA-3944", "bug_id": "cassandra_137", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/a47d4cbf0fcce64c995b1dfc1192ab051a85ee33/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/a47d4cbf0fcce64c995b1dfc1192ab051a85ee33/CHANGES.txt", "sha": "842b60327e270d4ef3abb6396b55016df396e596", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=a47d4cbf0fcce64c995b1dfc1192ab051a85ee33", "patch": "@@ -4,6 +4,7 @@\n  * fix concurrency issues with CQL keyspace creation (CASSANDRA-3903)\n  * Show Effective Owership via Nodetool ring <keyspace> (CASSANDRA-3412)\n  * Update ORDER BY syntax for CQL3 (CASSANDRA-3925)\n+ * Fix BulkRecordWriter to not throw NPE if reducer gets no map data from Hadoop (CASSANDRA-3944)\n \n 1.1-beta1\n  * add nodetool rebuild_index (CASSANDRA-3583)", "filename": "CHANGES.txt"}, {"additions": 10, "raw_url": "https://github.com/apache/cassandra/raw/a47d4cbf0fcce64c995b1dfc1192ab051a85ee33/src/java/org/apache/cassandra/hadoop/BulkRecordWriter.java", "blob_url": "https://github.com/apache/cassandra/blob/a47d4cbf0fcce64c995b1dfc1192ab051a85ee33/src/java/org/apache/cassandra/hadoop/BulkRecordWriter.java", "sha": "71ea2f4b3d54b23ebae0dc76c4d31ef32c34074c", "changes": 17, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/hadoop/BulkRecordWriter.java?ref=a47d4cbf0fcce64c995b1dfc1192ab051a85ee33", "patch": "@@ -187,14 +187,17 @@ public void close(org.apache.hadoop.mapred.Reporter reporter) throws IOException\n \n     private void close() throws IOException\n     {\n-        writer.close();\n-        try\n+        if (writer != null)\n         {\n-            loader.stream().get();\n-        }\n-        catch (InterruptedException e)\n-        {\n-            throw new IOException(e);\n+            writer.close();\n+            try\n+            {\n+                loader.stream().get();\n+            }\n+            catch (InterruptedException e)\n+            {\n+                throw new IOException(e);\n+            }\n         }\n     }\n ", "filename": "src/java/org/apache/cassandra/hadoop/BulkRecordWriter.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/333e7ace0aa939c3c22f21e92b2f937f17d22948", "parent": "https://github.com/apache/cassandra/commit/54528835775460f427989138529624f8a6b6e34c", "message": "Fix NPE during HH when target has been removed from the cluster.\nPatch by Sam Overton, reviewed by brandonwilliams for CASSANDRA-3677", "bug_id": "cassandra_138", "file": [{"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/333e7ace0aa939c3c22f21e92b2f937f17d22948/src/java/org/apache/cassandra/db/HintedHandOffManager.java", "blob_url": "https://github.com/apache/cassandra/blob/333e7ace0aa939c3c22f21e92b2f937f17d22948/src/java/org/apache/cassandra/db/HintedHandOffManager.java", "sha": "e2dc0464b9a978d165fccd8aa7cd5490f749ac81", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/HintedHandOffManager.java?ref=333e7ace0aa939c3c22f21e92b2f937f17d22948", "patch": "@@ -391,7 +391,9 @@ private void scheduleAllDeliveries()\n         {\n             Token<?> token = StorageService.getPartitioner().getTokenFactory().fromByteArray(row.key.key);\n             InetAddress target = StorageService.instance.getTokenMetadata().getEndpoint(token);\n-            scheduleHintDelivery(target);\n+            // token may have since been removed (in which case we have just read back a tombstone)\n+            if (target != null)\n+                scheduleHintDelivery(target);\n         }\n \n         if (logger_.isDebugEnabled())", "filename": "src/java/org/apache/cassandra/db/HintedHandOffManager.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/62cd28dfef1086607bef8d4b714ceb9be8dde250", "parent": "https://github.com/apache/cassandra/commit/0dc0029e820783f168297bdafd6169d03aa6ea20", "message": "fix debug log NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.7@1100448 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_139", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/62cd28dfef1086607bef8d4b714ceb9be8dde250/src/java/org/apache/cassandra/db/Table.java", "blob_url": "https://github.com/apache/cassandra/blob/62cd28dfef1086607bef8d4b714ceb9be8dde250/src/java/org/apache/cassandra/db/Table.java", "sha": "063f94c14fb7d7a95fec6cfdfd60097963ee3634", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/Table.java?ref=62cd28dfef1086607bef8d4b714ceb9be8dde250", "patch": "@@ -442,7 +442,7 @@ private static void ignoreObsoleteMutations(ColumnFamily cf, SortedSet<ByteBuffe\n             if (bothDeleted || obsoleteRowTombstone || obsoleteColumn)\n             {\n                 if (logger.isDebugEnabled())\n-                    logger.debug(\"skipping index update for obsolete mutation of \" + cf.getComparator().getString(oldColumn.name()));\n+                    logger.debug(\"skipping index update for obsolete mutation of \" + cf.getComparator().getString(name));\n                 iter.remove();\n                 oldIndexedColumns.remove(name);\n             }", "filename": "src/java/org/apache/cassandra/db/Table.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/64e1c79501028d6d8d3e835f72f73c7c5e8c7f11", "parent": "https://github.com/apache/cassandra/commit/9460a5fb6ec61745b89e50577a8a1e4a81768567", "message": "fix NPE from #2102\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.7@1069517 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_140", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/64e1c79501028d6d8d3e835f72f73c7c5e8c7f11/src/java/org/apache/cassandra/db/ColumnFamilyStore.java", "blob_url": "https://github.com/apache/cassandra/blob/64e1c79501028d6d8d3e835f72f73c7c5e8c7f11/src/java/org/apache/cassandra/db/ColumnFamilyStore.java", "sha": "f9b81703a6951aee8a4289f9f79e9cb749b8b959", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=64e1c79501028d6d8d3e835f72f73c7c5e8c7f11", "patch": "@@ -1149,7 +1149,7 @@ else if (!column.name().hasArray() || !column.value().hasArray())\n                 }\n             }\n \n-            // TFFT resuses the underlying buffer for the key\n+            // avoid keeping a permanent reference to the original key buffer\n             ssTables.getRowCache().put(new DecoratedKey(key.token, ByteBufferUtil.clone(key.key)), cached);\n         }\n         return cached;", "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java"}, {"additions": 10, "raw_url": "https://github.com/apache/cassandra/raw/64e1c79501028d6d8d3e835f72f73c7c5e8c7f11/src/java/org/apache/cassandra/io/sstable/SSTableReader.java", "blob_url": "https://github.com/apache/cassandra/blob/64e1c79501028d6d8d3e835f72f73c7c5e8c7f11/src/java/org/apache/cassandra/io/sstable/SSTableReader.java", "sha": "feb53df07a28308b6518557bb66b7b9a1cd4c0ae", "changes": 15, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/SSTableReader.java?ref=64e1c79501028d6d8d3e835f72f73c7c5e8c7f11", "patch": "@@ -417,8 +417,9 @@ public DecoratedKey apply(IndexSummary.KeyPosition kp)\n \n     public void cacheKey(DecoratedKey key, Long info)\n     {\n-        //TFFT reuses the underlying buffer for the key\n-        keyCache.put(new Pair<Descriptor, DecoratedKey>(descriptor, new DecoratedKey(key.token, ByteBufferUtil.clone(key.key))), info);\n+        // avoid keeping a permanent reference to the original key buffer\n+        DecoratedKey copiedKey = new DecoratedKey(key.token, key.key == null ? null : ByteBufferUtil.clone(key.key));\n+        keyCache.put(new Pair<Descriptor, DecoratedKey>(descriptor, copiedKey), info);\n     }\n \n     public Long getCachedPosition(DecoratedKey key)\n@@ -441,8 +442,12 @@ private Long getCachedPosition(Pair<Descriptor, DecoratedKey> unifiedKey)\n     public long getPosition(DecoratedKey decoratedKey, Operator op)\n     {\n         // first, check bloom filter\n-        if (op == Operator.EQ && !bf.isPresent(decoratedKey.key))\n-            return -1;\n+        if (op == Operator.EQ)\n+        {\n+            assert decoratedKey.key != null; // null is ok for GE scans\n+            if (!bf.isPresent(decoratedKey.key))\n+                return -1;\n+        }\n \n         // next, the key cache\n         Pair<Descriptor, DecoratedKey> unifiedKey = new Pair<Descriptor, DecoratedKey>(descriptor, decoratedKey);\n@@ -482,7 +487,7 @@ public long getPosition(DecoratedKey decoratedKey, Operator op)\n                             if (op == Operator.EQ)\n                                 bloomFilterTracker.addTruePositive();\n                             // store exact match for the key\n-                            cacheKey(unifiedKey.right, dataPosition);\n+                            cacheKey(decoratedKey, dataPosition);\n                         }\n                         return dataPosition;\n                     }", "filename": "src/java/org/apache/cassandra/io/sstable/SSTableReader.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/3f56f6b4dd975e4eaed65c9f27d0d50b1b6b5788", "parent": "https://github.com/apache/cassandra/commit/2ad01352a88b319a4364bb5a9e714e601b17a700", "message": "include cf/keyspace name in sstable2json NPEs.  patch by jbellis\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/cassandra/trunk@898809 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_141", "file": [{"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/3f56f6b4dd975e4eaed65c9f27d0d50b1b6b5788/src/java/org/apache/cassandra/config/DatabaseDescriptor.java", "blob_url": "https://github.com/apache/cassandra/blob/3f56f6b4dd975e4eaed65c9f27d0d50b1b6b5788/src/java/org/apache/cassandra/config/DatabaseDescriptor.java", "sha": "2d524a9c416247f222d6ccf18cb2f0acc0b4488e", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=3f56f6b4dd975e4eaed65c9f27d0d50b1b6b5788", "patch": "@@ -939,7 +939,10 @@ public static String getDataFileLocationForTable(String table, long expectedComp\n     public static AbstractType getComparator(String tableName, String cfName)\n     {\n         assert tableName != null;\n-        return getCFMetaData(tableName, cfName).comparator;\n+        CFMetaData cfmd = getCFMetaData(tableName, cfName);\n+        if (cfmd == null)\n+            throw new NullPointerException(\"Unknown ColumnFamily \" + cfName + \" in keyspace \" + tableName);\n+        return cfmd.comparator;\n     }\n \n     public static AbstractType getSubComparator(String tableName, String cfName)", "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/82e26b217dab3c327bab882be8cc6b8c0c257139", "parent": "https://github.com/apache/cassandra/commit/e39dc56eda3e325d537da44def54d85749def9d2", "message": "Fix test timeout in CQLSSTableWriterTest\n\nTime out is caused by NPE when creating SSTable writer.\n3.0 does not have ks and cf names in SSTable file name,\nwhen writing SSTable, it has to be under ks/cf directory.", "bug_id": "cassandra_142", "file": [{"additions": 9, "raw_url": "https://github.com/apache/cassandra/raw/82e26b217dab3c327bab882be8cc6b8c0c257139/test/unit/org/apache/cassandra/io/sstable/CQLSSTableWriterTest.java", "blob_url": "https://github.com/apache/cassandra/blob/82e26b217dab3c327bab882be8cc6b8c0c257139/test/unit/org/apache/cassandra/io/sstable/CQLSSTableWriterTest.java", "sha": "250545a088f9b7d3e2429de63a42e458cc2ee953", "changes": 13, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/io/sstable/CQLSSTableWriterTest.java?ref=82e26b217dab3c327bab882be8cc6b8c0c257139", "patch": "@@ -70,7 +70,7 @@ public void testUnsortedWriter() throws Exception\n         CQLSSTableWriter writer = CQLSSTableWriter.builder()\n                                                   .inDirectory(dataDir)\n                                                   .forTable(schema)\n-                                                  .withPartitioner(StorageService.instance.getPartitioner())\n+                                                  .withPartitioner(StorageService.getPartitioner())\n                                                   .using(insert).build();\n \n         writer.addRow(0, \"test1\", 24);\n@@ -129,16 +129,21 @@ public void testSyncWithinPartition() throws Exception\n         // Check that the write respect the buffer size even if we only insert rows withing the same partition (#7360)\n         // To do that simply, we use a writer with a buffer of 1MB, and write 2 rows in the same partition with a value\n         // > 1MB and validate that this created more than 1 sstable.\n+        String KS = \"ks\";\n+        String TABLE = \"test\";\n+\n         File tempdir = Files.createTempDir();\n+        File dataDir = new File(tempdir.getAbsolutePath() + File.separator + KS + File.separator + TABLE);\n+        assert dataDir.mkdirs();\n         String schema = \"CREATE TABLE ks.test (\"\n                       + \"  k int PRIMARY KEY,\"\n                       + \"  v blob\"\n                       + \")\";\n         String insert = \"INSERT INTO ks.test (k, v) VALUES (?, ?)\";\n         CQLSSTableWriter writer = CQLSSTableWriter.builder()\n-                                                  .inDirectory(tempdir)\n+                                                  .inDirectory(dataDir)\n                                                   .forTable(schema)\n-                                                  .withPartitioner(StorageService.instance.getPartitioner())\n+                                                  .withPartitioner(StorageService.getPartitioner())\n                                                   .using(insert)\n                                                   .withBufferSizeInMB(1)\n                                                   .build();\n@@ -156,6 +161,6 @@ public boolean accept(File dir, String name)\n                 return name.endsWith(\"-Data.db\");\n             }\n         };\n-        assert tempdir.list(filterDataFiles).length > 1 : Arrays.toString(tempdir.list(filterDataFiles));\n+        assert dataDir.list(filterDataFiles).length > 1 : Arrays.toString(dataDir.list(filterDataFiles));\n     }\n }", "filename": "test/unit/org/apache/cassandra/io/sstable/CQLSSTableWriterTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/2046956b6cfd809702bf33cb85a9cae091ce1d72", "parent": "https://github.com/apache/cassandra/commit/c9cf050982f83cacfe973fc588fa385bcf544690", "message": "Fix BulkLoader to support new SSTable layout and add stream throttling to prevent an NPE when there is no yaml config\npatch by Brandon Williams; reviewed by Pavel Yaskevich for CASSANDRA-3752", "bug_id": "cassandra_143", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/2046956b6cfd809702bf33cb85a9cae091ce1d72/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/2046956b6cfd809702bf33cb85a9cae091ce1d72/CHANGES.txt", "sha": "4a8ee4203769dfb16ca2f3c64e91b7c6daf062fe", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=2046956b6cfd809702bf33cb85a9cae091ce1d72", "patch": "@@ -46,6 +46,8 @@\n  * Allows (internally) doing a range query with a limit of columns instead of\n    rows (CASSANDRA-3742)\n  * Allow rangeSlice queries to be start/end inclusive/exclusive (CASSANDRA-3749)\n+ * Fix BulkLoader to support new SSTable layout and add stream\n+   throttling to prevent an NPE when there is no yaml config (CASSANDRA-3752)\n \n \n 1.0.8", "filename": "CHANGES.txt"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/2046956b6cfd809702bf33cb85a9cae091ce1d72/src/java/org/apache/cassandra/io/sstable/SSTableLoader.java", "blob_url": "https://github.com/apache/cassandra/blob/2046956b6cfd809702bf33cb85a9cae091ce1d72/src/java/org/apache/cassandra/io/sstable/SSTableLoader.java", "sha": "131deb26d33ac5e58b8118a5928eecca9e97e1dd", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/SSTableLoader.java?ref=2046956b6cfd809702bf33cb85a9cae091ce1d72", "patch": "@@ -50,7 +50,7 @@\n     public SSTableLoader(File directory, Client client, OutputHandler outputHandler)\n     {\n         this.directory = directory;\n-        this.keyspace = directory.getName();\n+        this.keyspace = directory.getParentFile().getName();\n         this.client = client;\n         this.outputHandler = outputHandler;\n     }", "filename": "src/java/org/apache/cassandra/io/sstable/SSTableLoader.java"}, {"additions": 11, "raw_url": "https://github.com/apache/cassandra/raw/2046956b6cfd809702bf33cb85a9cae091ce1d72/src/java/org/apache/cassandra/tools/BulkLoader.java", "blob_url": "https://github.com/apache/cassandra/blob/2046956b6cfd809702bf33cb85a9cae091ce1d72/src/java/org/apache/cassandra/tools/BulkLoader.java", "sha": "b1a0560888c473bea116072bb4f825724c79375e", "changes": 15, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/tools/BulkLoader.java?ref=2046956b6cfd809702bf33cb85a9cae091ce1d72", "patch": "@@ -52,13 +52,15 @@\n     private static final String IGNORE_NODES_OPTION  = \"ignore\";\n     private static final String INITIAL_HOST_ADDRESS_OPTION = \"nodes\";\n     private static final String RPC_PORT_OPTION = \"port\";\n+    private static final String THROTTLE_MBITS = \"throttle\";\n \n     public static void main(String args[]) throws IOException\n     {\n         LoaderOptions options = LoaderOptions.parseArgs(args);\n         try\n         {\n             SSTableLoader loader = new SSTableLoader(options.directory, new ExternalClient(options, options.hosts, options.rpcPort), options);\n+            DatabaseDescriptor.setStreamThroughputOutboundMegabitsPerSec(options.throttle);\n             SSTableLoader.LoaderFuture future = loader.stream(options.ignores);\n \n             if (options.noProgress)\n@@ -249,6 +251,7 @@ public boolean validateColumnFamily(String keyspace, String cfName)\n         public boolean verbose;\n         public boolean noProgress;\n         public int rpcPort = 9160;\n+        public int throttle = 0;\n \n         public Set<InetAddress> hosts = new HashSet<InetAddress>();\n         public Set<InetAddress> ignores = new HashSet<InetAddress>();\n@@ -302,6 +305,9 @@ public static LoaderOptions parseArgs(String cmdArgs[])\n                 opts.verbose = cmd.hasOption(VERBOSE_OPTION);\n                 opts.noProgress = cmd.hasOption(NOPROGRESS_OPTION);\n \n+                if (cmd.hasOption(THROTTLE_MBITS))\n+                    opts.throttle = Integer.valueOf(cmd.getOptionValue(THROTTLE_MBITS));\n+\n                 if (cmd.hasOption(RPC_PORT_OPTION))\n                     opts.rpcPort = Integer.valueOf(cmd.getOptionValue(RPC_PORT_OPTION));\n \n@@ -381,6 +387,7 @@ private static CmdLineOptions getCmdLineOptions()\n             options.addOption(\"i\",  IGNORE_NODES_OPTION, \"NODES\", \"don't stream to this (comma separated) list of nodes\");\n             options.addOption(\"d\",  INITIAL_HOST_ADDRESS_OPTION, \"initial hosts\", \"try to connect to these hosts (comma separated) initially for ring information\");\n             options.addOption(\"p\",  RPC_PORT_OPTION, \"rpc port\", \"port used for rpc (default 9160)\");\n+            options.addOption(\"t\",  THROTTLE_MBITS, \"throttle\", \"throttle speed in Mbits (default unlimited)\");\n             return options;\n         }\n \n@@ -389,11 +396,11 @@ public static void printUsage(Options options)\n             String usage = String.format(\"%s [options] <dir_path>\", TOOL_NAME);\n             StringBuilder header = new StringBuilder();\n             header.append(\"--\\n\");\n-            header.append(\"Bulk load the sstables find in the directory <dir_path> to the configured cluster.\" );\n-            header.append(\"The last directory of <dir_path> is used as the keyspace name. \");\n-            header.append(\"So for instance, to load a sstable named Standard1-g-1-Data.db into keyspace Keyspace1, \");\n+            header.append(\"Bulk load the sstables found in the directory <dir_path> to the configured cluster.\" );\n+            header.append(\"The parent directory of <dir_path> is used as the keyspace name. \");\n+            header.append(\"So for instance, to load an sstable named Standard1-g-1-Data.db into keyspace Keyspace1, \");\n             header.append(\"you will need to have the files Standard1-g-1-Data.db and Standard1-g-1-Index.db in a \");\n-            header.append(\"directory Keyspace1/ in the current directory and call: sstableloader Keyspace1\");\n+            header.append(\"directory Keyspace1/Standard1/ in the directory and call: sstableloader Keyspace1/Standard1\");\n             header.append(\"\\n--\\n\");\n             header.append(\"Options are:\");\n             new HelpFormatter().printHelp(usage, header.toString(), options, \"\");", "filename": "src/java/org/apache/cassandra/tools/BulkLoader.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/511d16321e267d84cc32c88b54a5c896089e6647", "parent": "https://github.com/apache/cassandra/commit/24f8ddeea135b89a828d5ca625932c446695dad2", "message": "Fix NPE in get_count for counters\npatch by ghinkle; reviewed by slebresne for CASSANDRA-3601\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-1.0@1212284 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_144", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/511d16321e267d84cc32c88b54a5c896089e6647/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/511d16321e267d84cc32c88b54a5c896089e6647/CHANGES.txt", "sha": "70e7fa44fbb9ad11ea19e1934f54638eac11e321", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=511d16321e267d84cc32c88b54a5c896089e6647", "patch": "@@ -19,6 +19,7 @@\n  * fix missing response during range slice repair (CASSANDRA-3551)\n  * 'describe ring' moved from CLI to nodetool and available through JMX (CASSANDRA-3220)\n  * add back partitioner to sstable metadata (CASSANDRA-3540)\n+ * fix NPE in get_count for counters (CASSANDRA-3601)\n Merged from 0.8:\n  * use cannonical host for local node in nodetool info (CASSANDRA-3556)\n  * remove nonlocal DC write optimization since it only worked with", "filename": "CHANGES.txt"}, {"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/511d16321e267d84cc32c88b54a5c896089e6647/src/java/org/apache/cassandra/thrift/CassandraServer.java", "blob_url": "https://github.com/apache/cassandra/blob/511d16321e267d84cc32c88b54a5c896089e6647/src/java/org/apache/cassandra/thrift/CassandraServer.java", "sha": "dd69e4aa7bc0d863063debc532b2abbed8090f64", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/thrift/CassandraServer.java?ref=511d16321e267d84cc32c88b54a5c896089e6647", "patch": "@@ -449,7 +449,10 @@ public int get_count(ByteBuffer key, ColumnParent column_parent, SlicePredicate\n             totalCount += columns.size();\n             requestedCount -= columns.size();\n             ColumnOrSuperColumn lastColumn = columns.get(columns.size() - 1);\n-            ByteBuffer lastName = lastColumn.isSetSuper_column() ? lastColumn.super_column.name : lastColumn.column.name;\n+            ByteBuffer lastName =\n+                    lastColumn.isSetSuper_column() ? lastColumn.super_column.name :\n+                        (lastColumn.isSetColumn() ? lastColumn.column.name :\n+                            (lastColumn.isSetCounter_column() ? lastColumn.counter_column.name : lastColumn.counter_super_column.name));\n             if ((requestedCount == 0) || ((columns.size() == 1) && (lastName.equals(predicate.slice_range.start))))\n             {\n                 break;", "filename": "src/java/org/apache/cassandra/thrift/CassandraServer.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/5ae93209f29aab470dbe159eadc040bee073c5f5", "parent": "https://github.com/apache/cassandra/commit/ed1c9a26de39e17cc84f4cdbf1c96d22a327533d", "message": "Prevent NPE when encryption options are missing.\nPatch by brandonwilliams, reviewed by jbellis for CASSANDRA-3489\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-1.0@1209229 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_145", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/5ae93209f29aab470dbe159eadc040bee073c5f5/src/java/org/apache/cassandra/config/Config.java", "blob_url": "https://github.com/apache/cassandra/blob/5ae93209f29aab470dbe159eadc040bee073c5f5/src/java/org/apache/cassandra/config/Config.java", "sha": "9f5480c5e40aabda88d7f407dbc53500b74f200a", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/Config.java?ref=5ae93209f29aab470dbe159eadc040bee073c5f5", "patch": "@@ -109,7 +109,7 @@\n     public RequestSchedulerId request_scheduler_id;\n     public RequestSchedulerOptions request_scheduler_options;\n \n-    public EncryptionOptions encryption_options;\n+    public EncryptionOptions encryption_options = new EncryptionOptions();\n \n     public Integer index_interval = 128;\n ", "filename": "src/java/org/apache/cassandra/config/Config.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/5ae93209f29aab470dbe159eadc040bee073c5f5/src/java/org/apache/cassandra/net/MessagingService.java", "blob_url": "https://github.com/apache/cassandra/blob/5ae93209f29aab470dbe159eadc040bee073c5f5/src/java/org/apache/cassandra/net/MessagingService.java", "sha": "8829557f3a6c31ecf2ebad944febf2ae663e9e5d", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/net/MessagingService.java?ref=5ae93209f29aab470dbe159eadc040bee073c5f5", "patch": "@@ -240,7 +240,7 @@ public void listen(InetAddress localEp) throws IOException, ConfigurationExcepti\n     private List<ServerSocket> getServerSocket(InetAddress localEp) throws IOException, ConfigurationException\n     {\n        final List<ServerSocket> ss = new ArrayList<ServerSocket>();\n-        if (DatabaseDescriptor.getEncryptionOptions() != null && DatabaseDescriptor.getEncryptionOptions().internode_encryption != EncryptionOptions.InternodeEncryption.none)\n+        if (DatabaseDescriptor.getEncryptionOptions().internode_encryption != EncryptionOptions.InternodeEncryption.none)\n         {\n             ss.add(SSLFactory.getServerSocket(DatabaseDescriptor.getEncryptionOptions(), localEp, DatabaseDescriptor.getSSLStoragePort()));\n             // setReuseAddress happens in the factory.", "filename": "src/java/org/apache/cassandra/net/MessagingService.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/46e61bfeb31ce377676345aa878b4c6218c9e7bb", "parent": "https://github.com/apache/cassandra/commit/9976ae4d2ce6e32db16a890a04f3a8ed9e015019", "message": "Set default rack/dc in ec2snitch to avoid NPEs.\nPatch by Alex Araujo, reviewed by brandonwilliams for CASSANDRA-3186.\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.8@1202892 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_146", "file": [{"additions": 10, "raw_url": "https://github.com/apache/cassandra/raw/46e61bfeb31ce377676345aa878b4c6218c9e7bb/src/java/org/apache/cassandra/locator/Ec2Snitch.java", "blob_url": "https://github.com/apache/cassandra/blob/46e61bfeb31ce377676345aa878b4c6218c9e7bb/src/java/org/apache/cassandra/locator/Ec2Snitch.java", "sha": "bb038386b3114b117ed23f4ba07aff128ff5a174", "changes": 12, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/locator/Ec2Snitch.java?ref=46e61bfeb31ce377676345aa878b4c6218c9e7bb", "patch": "@@ -44,6 +44,8 @@\n {\n     protected static Logger logger = LoggerFactory.getLogger(Ec2Snitch.class);\n     protected static final String ZONE_NAME_QUERY_URL = \"http://169.254.169.254/latest/meta-data/placement/availability-zone\";\n+    private static final String DEFAULT_DC = \"UNKNOWN-DC\";\n+    private static final String DEFAULT_RACK = \"UNKNOWN-RACK\";\n     protected String ec2zone;\n     protected String ec2region;\n \n@@ -83,14 +85,20 @@ public String getRack(InetAddress endpoint)\n     {\n         if (endpoint.equals(FBUtilities.getLocalAddress()))\n             return ec2zone;\n-        return Gossiper.instance.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.RACK).value;\n+        EndpointState state = Gossiper.instance.getEndpointStateForEndpoint(endpoint);\n+        if (null == state || null == state.getApplicationState(ApplicationState.RACK))\n+            return DEFAULT_RACK;\n+        return state.getApplicationState(ApplicationState.RACK).value;\n     }\n \n     public String getDatacenter(InetAddress endpoint)\n     {\n         if (endpoint.equals(FBUtilities.getLocalAddress()))\n             return ec2region;\n-        return Gossiper.instance.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.DC).value;\n+        EndpointState state = Gossiper.instance.getEndpointStateForEndpoint(endpoint);\n+        if (null == state || null == state.getApplicationState(ApplicationState.DC))\n+            return DEFAULT_DC;\n+        return state.getApplicationState(ApplicationState.DC).value;\n     }\n \n     @Override", "filename": "src/java/org/apache/cassandra/locator/Ec2Snitch.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/9b9c4d32973ea4e586031775b3322180169135cd", "parent": "https://github.com/apache/cassandra/commit/467e89b12f62bbe3a2e05407383d2cac0b8e88eb", "message": "Make SSTW.RowIndexer.iwriter a final field to avoid NPE\npatch by slebresne; reviewed by jbellis for CASSANDRA-2863\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.8@1180958 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_147", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/9b9c4d32973ea4e586031775b3322180169135cd/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/9b9c4d32973ea4e586031775b3322180169135cd/CHANGES.txt", "sha": "a8fb6c6b9b0c15c1ded16ef5449f4a0e1158fa82", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=9b9c4d32973ea4e586031775b3322180169135cd", "patch": "@@ -1,5 +1,6 @@\n 0.8.8\n  * fix truncate allowing data to be replayed post-restart (CASSANDRA-3297)\n+ * make iwriter final in IndexWriter to avoid NPE (CASSANDRA-2863)\n \n \n 0.8.7", "filename": "CHANGES.txt"}, {"additions": 6, "raw_url": "https://github.com/apache/cassandra/raw/9b9c4d32973ea4e586031775b3322180169135cd/src/java/org/apache/cassandra/io/sstable/SSTableWriter.java", "blob_url": "https://github.com/apache/cassandra/blob/9b9c4d32973ea4e586031775b3322180169135cd/src/java/org/apache/cassandra/io/sstable/SSTableWriter.java", "sha": "6a181aeaae287ff7f07afc34807479e821a41bc0", "changes": 17, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/SSTableWriter.java?ref=9b9c4d32973ea4e586031775b3322180169135cd", "patch": "@@ -302,19 +302,18 @@ public SSTableReader build() throws IOException\n         {\n             if (cfs.isInvalid())\n                 return null;\n-            maybeOpenIndexer();\n \n             File ifile = new File(desc.filenameFor(SSTable.COMPONENT_INDEX));\n             File ffile = new File(desc.filenameFor(SSTable.COMPONENT_FILTER));\n             assert !ifile.exists();\n             assert !ffile.exists();\n \n-            long estimatedRows = indexer.prepareIndexing();\n+            maybeOpenIndexer();\n \n             // build the index and filter\n             long rows = indexer.index();\n \n-            logger.debug(\"estimated row count was {} of real count\", ((double)estimatedRows) / rows);\n+            logger.debug(\"estimated row count was {} of real count\", ((double)indexer.estimatedRows) / rows);\n             return SSTableReader.open(rename(desc, SSTable.componentsFor(desc, false)));\n         }\n     }\n@@ -324,8 +323,9 @@ public SSTableReader build() throws IOException\n         protected final Descriptor desc;\n         public final BufferedRandomAccessFile dfile;\n         private final OperationType type;\n+        protected final IndexWriter iwriter;\n+        public final long estimatedRows;\n \n-        protected IndexWriter iwriter;\n         protected ColumnFamilyStore cfs;\n \n         RowIndexer(Descriptor desc, ColumnFamilyStore cfs, OperationType type) throws IOException\n@@ -339,16 +339,11 @@ protected RowIndexer(Descriptor desc, BufferedRandomAccessFile dfile, ColumnFami\n             this.dfile = dfile;\n             this.type = type;\n             this.cfs = cfs;\n-        }\n \n-        long prepareIndexing() throws IOException\n-        {\n-            long estimatedRows;\n             try\n             {\n-                estimatedRows = SSTable.estimateRowsFromData(desc, dfile);\n-                iwriter = new IndexWriter(desc, StorageService.getPartitioner(), estimatedRows);\n-                return estimatedRows;\n+                this.estimatedRows = SSTable.estimateRowsFromData(desc, dfile);\n+                this.iwriter = new IndexWriter(desc, StorageService.getPartitioner(), estimatedRows);\n             }\n             catch(IOException e)\n             {", "filename": "src/java/org/apache/cassandra/io/sstable/SSTableWriter.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/c2709ba27757e5aabee28ff5c7affd0f87164fd6", "parent": "https://github.com/apache/cassandra/commit/5d0cb3a9219a080673e3b7fcb8c87ebf65cdb8ad", "message": "fix RRR NPE\npatch by jbellis; reviewed by slebresne for CASSANDRA-3192\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-1.0.0@1170162 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_148", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/c2709ba27757e5aabee28ff5c7affd0f87164fd6/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/c2709ba27757e5aabee28ff5c7affd0f87164fd6/CHANGES.txt", "sha": "289ed9363d609d10d13c4ca12ee44fdb916c9e25", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=c2709ba27757e5aabee28ff5c7affd0f87164fd6", "patch": "@@ -24,7 +24,7 @@\n  * use lazy initialization instead of class initialization in NodeId\n    (CASSANDRA-2953)\n  * add paging to get_count (CASSANDRA-2894)\n- * fix \"short reads\" in [multi]get (CASSANDRA-2643, 3157)\n+ * fix \"short reads\" in [multi]get (CASSANDRA-2643, 3157, 3192)\n  * add optional compression for sstables (CASSANDRA-47, 3001, 3128)\n  * add scheduler JMX metrics (CASSANDRA-2962)\n  * add block level checksum for compressed data (CASSANDRA-1717)", "filename": "CHANGES.txt"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/c2709ba27757e5aabee28ff5c7affd0f87164fd6/src/java/org/apache/cassandra/service/RowRepairResolver.java", "blob_url": "https://github.com/apache/cassandra/blob/c2709ba27757e5aabee28ff5c7affd0f87164fd6/src/java/org/apache/cassandra/service/RowRepairResolver.java", "sha": "e1d9df0032ec9f4ab16dd7d960049abb2ce3a570", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/RowRepairResolver.java?ref=c2709ba27757e5aabee28ff5c7affd0f87164fd6", "patch": "@@ -79,7 +79,7 @@ public Row resolve() throws DigestMismatchException, IOException\n                 endpoints.add(message.getFrom());\n \n                 // compute maxLiveColumns to prevent short reads -- see https://issues.apache.org/jira/browse/CASSANDRA-2643\n-                int liveColumns = cf.getLiveColumnCount();\n+                int liveColumns = cf == null ? 0 : cf.getLiveColumnCount();\n                 if (liveColumns > maxLiveColumns)\n                     maxLiveColumns = liveColumns;\n             }", "filename": "src/java/org/apache/cassandra/service/RowRepairResolver.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/428eaec33857126b2fe32e0918ee809e868fe8d4", "parent": "https://github.com/apache/cassandra/commit/cea0342823bd306ff469d61c37fc851c9088daea", "message": "Fix NPE in describe_ring with a mixed cluster.\nPatch by brandonwilliams, reviewed by jbellis for CASSANDRA-3032\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.8@1161189 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_149", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/428eaec33857126b2fe32e0918ee809e868fe8d4/src/java/org/apache/cassandra/service/StorageService.java", "blob_url": "https://github.com/apache/cassandra/blob/428eaec33857126b2fe32e0918ee809e868fe8d4/src/java/org/apache/cassandra/service/StorageService.java", "sha": "ff2aff10cf4461679000d3be2b1879724966f68a", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=428eaec33857126b2fe32e0918ee809e868fe8d4", "patch": "@@ -619,6 +619,8 @@ public TokenMetadata getTokenMetadata()\n             {\n                 if (endpoint.equals(FBUtilities.getLocalAddress()))\n                     rpcaddrs.add(DatabaseDescriptor.getRpcAddress().getHostAddress());\n+                else if (Gossiper.instance.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.RPC_ADDRESS) == null)\n+                    rpcaddrs.add(endpoint.getHostAddress());\n                 else\n                     rpcaddrs.add(Gossiper.instance.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.RPC_ADDRESS).value);\n             }", "filename": "src/java/org/apache/cassandra/service/StorageService.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/dfcb62163b6cfba75714357ee4f63f1b59f9e87a", "parent": "https://github.com/apache/cassandra/commit/4346146a46b3ad886124b323f64756b090a06e92", "message": "fix NPE when encryption_options is unspecified\npatch by jbellis; reviewed by brandonwilliams for CASSANDRA-3007\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.8@1156749 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_150", "file": [{"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/dfcb62163b6cfba75714357ee4f63f1b59f9e87a/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/dfcb62163b6cfba75714357ee4f63f1b59f9e87a/CHANGES.txt", "sha": "f44ee6978ee9c2145427439bc6a7005800953ddd", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=dfcb62163b6cfba75714357ee4f63f1b59f9e87a", "patch": "@@ -1,3 +1,7 @@\n+0.8.5\n+ * fix NPE when encryption_options is unspecified (CASSANDRA-3007)\n+\n+\n 0.8.4\n  * include files-to-be-streamed in StreamInSession.getSources (CASSANDRA-2972)\n  * use JAVA env var in cassandra-env.sh (CASSANDRA-2785, 2992)", "filename": "CHANGES.txt"}, {"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/dfcb62163b6cfba75714357ee4f63f1b59f9e87a/src/java/org/apache/cassandra/net/MessagingService.java", "blob_url": "https://github.com/apache/cassandra/blob/dfcb62163b6cfba75714357ee4f63f1b59f9e87a/src/java/org/apache/cassandra/net/MessagingService.java", "sha": "c35a3c0a09c3627bbe26111549e6c1859aadd165", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/net/MessagingService.java?ref=dfcb62163b6cfba75714357ee4f63f1b59f9e87a", "patch": "@@ -417,7 +417,8 @@ public IAsyncResult sendRR(Message message, InetAddress to)\n     public void stream(StreamHeader header, InetAddress to)\n     {\n         /* Streaming asynchronously on streamExector_ threads. */\n-        if (DatabaseDescriptor.getEncryptionOptions().internode_encryption == EncryptionOptions.InternodeEncryption.all)\n+        EncryptionOptions encryption = DatabaseDescriptor.getEncryptionOptions();\n+        if (encryption != null && encryption.internode_encryption == EncryptionOptions.InternodeEncryption.all)\n             streamExecutor_.execute(new SSLFileStreamTask(header, to));\n         else\n             streamExecutor_.execute(new FileStreamTask(header, to));", "filename": "src/java/org/apache/cassandra/net/MessagingService.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/bc756792aa4cef31e4274045ec14768b8375674b", "parent": "https://github.com/apache/cassandra/commit/931c2f1208dee513634cde9b701ef8a00c566d89", "message": "Fix NPE in getRangeToRpcaddressMap\npatch by slebresne; reviewed by jbellis for CASSANDRA-2996\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.8@1154219 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_151", "file": [{"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/bc756792aa4cef31e4274045ec14768b8375674b/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/bc756792aa4cef31e4274045ec14768b8375674b/CHANGES.txt", "sha": "7e7c7f8ff5076243cb0ed690433beba2cf888251", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=bc756792aa4cef31e4274045ec14768b8375674b", "patch": "@@ -1,3 +1,6 @@\n+0.8.4\n+ * include files-to-be-streamed in StreamInSession.getSources (CASSANDRA-2972)\n+\n 0.8.3\n  * add ability to drop local reads/writes that are going to timeout\n    (CASSANDRA-2943)\n@@ -34,7 +37,6 @@\n  * add asynchronous and half-sync/half-async thrift servers (CASSANDRA-1405)\n  * fix potential use of free'd native memory in SerializingCache \n    (CASSANDRA-2951)\n- * include files-to-be-streamed in StreamInSession.getSources (CASSANDRA-2972)\n \n \n 0.8.2", "filename": "CHANGES.txt"}, {"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/bc756792aa4cef31e4274045ec14768b8375674b/src/java/org/apache/cassandra/config/DatabaseDescriptor.java", "blob_url": "https://github.com/apache/cassandra/blob/bc756792aa4cef31e4274045ec14768b8375674b/src/java/org/apache/cassandra/config/DatabaseDescriptor.java", "sha": "1ccff5208021fc2afe76c93f66155a103fbdfdda", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=bc756792aa4cef31e4274045ec14768b8375674b", "patch": "@@ -274,6 +274,10 @@ else if (conf.memtable_flush_writers == null)\n                     throw new ConfigurationException(\"Unknown host in rpc_address \" + conf.rpc_address);\n                 }\n             }\n+            else\n+            {\n+                rpcAddress = FBUtilities.getLocalAddress();\n+            }\n \n             if (conf.thrift_framed_transport_size_in_mb <= 0)\n                 throw new ConfigurationException(\"thrift_framed_transport_size_in_mb must be positive\");", "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java"}, {"additions": 0, "raw_url": "https://github.com/apache/cassandra/raw/bc756792aa4cef31e4274045ec14768b8375674b/src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java", "blob_url": "https://github.com/apache/cassandra/blob/bc756792aa4cef31e4274045ec14768b8375674b/src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java", "sha": "203ecc8bf597c041d7dcc707ba502bf9087ba911", "changes": 6, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java?ref=bc756792aa4cef31e4274045ec14768b8375674b", "patch": "@@ -125,12 +125,6 @@ protected void setup() throws IOException\n \n         listenPort = DatabaseDescriptor.getRpcPort();\n         listenAddr = DatabaseDescriptor.getRpcAddress();\n-        /* \n-         * If ThriftAddress was left completely unconfigured, then assume\n-         * the same default as ListenAddress\n-         */\n-        if (listenAddr == null)\n-            listenAddr = FBUtilities.getLocalAddress();\n \n         Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler()\n         {", "filename": "src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/bc756792aa4cef31e4274045ec14768b8375674b/src/java/org/apache/cassandra/service/StorageService.java", "blob_url": "https://github.com/apache/cassandra/blob/bc756792aa4cef31e4274045ec14768b8375674b/src/java/org/apache/cassandra/service/StorageService.java", "sha": "137e76f1bcbd5d9d8e92f39d095949688fbc0a09", "changes": 5, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=bc756792aa4cef31e4274045ec14768b8375674b", "patch": "@@ -452,10 +452,7 @@ private void joinTokenRing() throws IOException, org.apache.cassandra.config.Con\n         Gossiper.instance.start(SystemTable.incrementAndGetGeneration()); // needed for node-ring gathering.\n \n         // add rpc listening info\n-        if (DatabaseDescriptor.getRpcAddress() == null)\n-            Gossiper.instance.addLocalApplicationState(ApplicationState.RPC_ADDRESS, valueFactory.rpcaddress(FBUtilities.getLocalAddress()));\n-        else\n-            Gossiper.instance.addLocalApplicationState(ApplicationState.RPC_ADDRESS, valueFactory.rpcaddress(DatabaseDescriptor.getRpcAddress()));\n+        Gossiper.instance.addLocalApplicationState(ApplicationState.RPC_ADDRESS, valueFactory.rpcaddress(DatabaseDescriptor.getRpcAddress()));\n \n         MessagingService.instance().listen(FBUtilities.getLocalAddress());\n         StorageLoadBalancer.instance.startBroadcasting();", "filename": "src/java/org/apache/cassandra/service/StorageService.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/76d625d5094807a10e6e2f10c5e314c957053170", "parent": "https://github.com/apache/cassandra/commit/4624cb45655aaf231c49258d8796828aeabf560a", "message": "avoid NPE when flushing in shutdown hook\npatch by jbellis for CASSANDRA-2958\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.8@1152891 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_152", "file": [{"additions": 5, "raw_url": "https://github.com/apache/cassandra/raw/76d625d5094807a10e6e2f10c5e314c957053170/src/java/org/apache/cassandra/service/StorageService.java", "blob_url": "https://github.com/apache/cassandra/blob/76d625d5094807a10e6e2f10c5e314c957053170/src/java/org/apache/cassandra/service/StorageService.java", "sha": "c40de136d17df3154eb354faee9806bc8440e020", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=76d625d5094807a10e6e2f10c5e314c957053170", "patch": "@@ -417,7 +417,11 @@ public void runMayThrow() throws ExecutionException, InterruptedException, IOExc\n                     if (!ksm.isDurableWrites())\n                     {\n                         for (ColumnFamilyStore cfs : table.getColumnFamilyStores())\n-                            flushes.add(cfs.forceFlush());\n+                        {\n+                            Future<?> future = cfs.forceFlush();\n+                            if (future != null)\n+                                flushes.add(future);\n+                        }\n                     }\n                 }\n                 FBUtilities.waitOnFutures(flushes);", "filename": "src/java/org/apache/cassandra/service/StorageService.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/058cf7fe690d8db822a891b0b2cd3979b6f42a62", "parent": "https://github.com/apache/cassandra/commit/8a80faf41e1179a31b7a42434f363e5c8e306aff", "message": "Fix potential NPE during read repair\npatch by slebresne; reviewed by jbellis for CASSANDRA-2823\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.7@1140550 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_153", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/058cf7fe690d8db822a891b0b2cd3979b6f42a62/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/058cf7fe690d8db822a891b0b2cd3979b6f42a62/CHANGES.txt", "sha": "5aaa3699e3066f6db138aa5cc95a14ccc8929547", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=058cf7fe690d8db822a891b0b2cd3979b6f42a62", "patch": "@@ -22,6 +22,7 @@\n    (CASSANDRA-2766, CASSANDRA-2792)\n  * Expose number of threads blocked on submitting memtable to flush\n    (CASSANDRA-2817)\n+ * Fix potential NPE during read repair (CASSANDRA-2823)\n \n \n 0.7.6", "filename": "CHANGES.txt"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/058cf7fe690d8db822a891b0b2cd3979b6f42a62/src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java", "blob_url": "https://github.com/apache/cassandra/blob/058cf7fe690d8db822a891b0b2cd3979b6f42a62/src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java", "sha": "c4dad04c5120441476e329ee89e956e932082d56", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java?ref=058cf7fe690d8db822a891b0b2cd3979b6f42a62", "patch": "@@ -117,7 +117,9 @@ protected Row getReduced()\n                         }\n                     }\n                 }\n-                RowRepairResolver.maybeScheduleRepairs(resolved, table, key, versions, versionSources);\n+                // resolved can be null even if versions doesn't have all nulls because of the call to removeDeleted in resolveSuperSet\n+                if (resolved != null)\n+                    RowRepairResolver.maybeScheduleRepairs(resolved, table, key, versions, versionSources);\n                 versions.clear();\n                 versionSources.clear();\n                 return new Row(key, resolved);", "filename": "src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/058cf7fe690d8db822a891b0b2cd3979b6f42a62/src/java/org/apache/cassandra/service/RowRepairResolver.java", "blob_url": "https://github.com/apache/cassandra/blob/058cf7fe690d8db822a891b0b2cd3979b6f42a62/src/java/org/apache/cassandra/service/RowRepairResolver.java", "sha": "8d951b6cd0a641366eaeff1cabc616e2107058fa", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/RowRepairResolver.java?ref=058cf7fe690d8db822a891b0b2cd3979b6f42a62", "patch": "@@ -78,7 +78,9 @@ public Row resolve() throws DigestMismatchException, IOException\n             resolved = resolveSuperset(versions);\n             if (logger.isDebugEnabled())\n                 logger.debug(\"versions merged\");\n-            maybeScheduleRepairs(resolved, table, key, versions, endpoints);\n+            // resolved can be null even if versions doesn't have all nulls because of the call to removeDeleted in resolveSuperSet\n+            if (resolved != null)\n+                maybeScheduleRepairs(resolved, table, key, versions, endpoints);\n         }\n         else\n         {", "filename": "src/java/org/apache/cassandra/service/RowRepairResolver.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/ebe9815431255fceba3b2238814be92360caada7", "parent": "https://github.com/apache/cassandra/commit/66583186283fa4f22e61d85c1c0d2be16831f7db", "message": "Fix potential NPE in range slice read repair\npatch by slebresne; reviewed by jbellis for CASSANDRA-2823\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.8@1140470 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_154", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/ebe9815431255fceba3b2238814be92360caada7/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/ebe9815431255fceba3b2238814be92360caada7/CHANGES.txt", "sha": "9739e656d0cef67cf7b3009b938c376a2f7775f4", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=ebe9815431255fceba3b2238814be92360caada7", "patch": "@@ -7,6 +7,8 @@\n  * add ability to return \"endpoints\" to nodetool (CASSANDRA-2776)\n  * Add support for multiple (comma-delimited) coordinator addresses\n    to ColumnFamilyInputFormat (CASSANDRA-2807)\n+ * fix potential NPE while scheduling read repair for range slice\n+   (CASSANDRA-2823)\n \n \n 0.8.1", "filename": "CHANGES.txt"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/ebe9815431255fceba3b2238814be92360caada7/src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java", "blob_url": "https://github.com/apache/cassandra/blob/ebe9815431255fceba3b2238814be92360caada7/src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java", "sha": "8559b31ba13a539405717aaf135f384145a9647f", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java?ref=ebe9815431255fceba3b2238814be92360caada7", "patch": "@@ -117,7 +117,9 @@ protected Row getReduced()\n                         }\n                     }\n                 }\n-                RowRepairResolver.maybeScheduleRepairs(resolved, table, key, versions, versionSources);\n+                // resolved can be null even if versions doesn't have all nulls because of the call to removeDeleted in resolveSuperSet\n+                if (resolved != null)\n+                    RowRepairResolver.maybeScheduleRepairs(resolved, table, key, versions, versionSources);\n                 versions.clear();\n                 versionSources.clear();\n                 return new Row(key, resolved);", "filename": "src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/ebe9815431255fceba3b2238814be92360caada7/src/java/org/apache/cassandra/service/RowRepairResolver.java", "blob_url": "https://github.com/apache/cassandra/blob/ebe9815431255fceba3b2238814be92360caada7/src/java/org/apache/cassandra/service/RowRepairResolver.java", "sha": "0e73a85e3ad9c11f36e2c43ed89494604122c3df", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/RowRepairResolver.java?ref=ebe9815431255fceba3b2238814be92360caada7", "patch": "@@ -80,7 +80,9 @@ public Row resolve() throws DigestMismatchException, IOException\n             resolved = resolveSuperset(versions);\n             if (logger.isDebugEnabled())\n                 logger.debug(\"versions merged\");\n-            maybeScheduleRepairs(resolved, table, key, versions, endpoints);\n+            // resolved can be null even if versions doesn't have all nulls because of the call to removeDeleted in resolveSuperSet\n+            if (resolved != null)\n+                maybeScheduleRepairs(resolved, table, key, versions, endpoints);\n         }\n         else\n         {", "filename": "src/java/org/apache/cassandra/service/RowRepairResolver.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/0f4dd380e7e2da67165bf61e96a8942ed9ab0538", "parent": "https://github.com/apache/cassandra/commit/d12de23b4c8e4fadfd9512cf5cf908571722d10c", "message": "avoid NPE in debug logging when deleted CF is dirty\npatch by jbellis\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.8@1139317 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_155", "file": [{"additions": 5, "raw_url": "https://github.com/apache/cassandra/raw/0f4dd380e7e2da67165bf61e96a8942ed9ab0538/src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java", "blob_url": "https://github.com/apache/cassandra/blob/0f4dd380e7e2da67165bf61e96a8942ed9ab0538/src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java", "sha": "12d23864ec82ba4b229fdaf7a2f6824b75218c62", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java?ref=0f4dd380e7e2da67165bf61e96a8942ed9ab0538", "patch": "@@ -30,6 +30,7 @@\n import java.util.zip.CRC32;\n import java.util.zip.Checksum;\n \n+import org.apache.cassandra.config.CFMetaData;\n import org.apache.cassandra.net.MessagingService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -182,7 +183,10 @@ String dirtyString()\n     {\n         StringBuilder sb = new StringBuilder();\n         for (Integer cfId : cfDirty)\n-            sb.append(DatabaseDescriptor.getCFMetaData(cfId).cfName).append(\" (\").append(cfId).append(\"), \");\n+        {\n+            CFMetaData m = DatabaseDescriptor.getCFMetaData(cfId);\n+            sb.append(m == null ? m.cfName : \"<deleted>\").append(\" (\").append(cfId).append(\"), \");\n+        }\n         return sb.toString();\n     }\n ", "filename": "src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/4e96cc9d41bccc9781cbe3008db6e72c91c7d5f1", "parent": "https://github.com/apache/cassandra/commit/1dd1df7c912892fe67f37a6fe7437bd3e56259b0", "message": "fix NPE\twhen bypassing commitlog during\tmemtable flush\n\nPatch by tjake;\t reviewed by Sylvain Lebresne for CASSANDRA-2718\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.8@1128306 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_156", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/4e96cc9d41bccc9781cbe3008db6e72c91c7d5f1/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/4e96cc9d41bccc9781cbe3008db6e72c91c7d5f1/CHANGES.txt", "sha": "53cb3f63a6804e46ff3febc88e3d6d1da3f4d858", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=4e96cc9d41bccc9781cbe3008db6e72c91c7d5f1", "patch": "@@ -23,6 +23,7 @@\n  * remove no-op HHOM.renameHints (CASSANDRA-2693)\n  * clone super columns to avoid modifying them during flush (CASSANDRA-2675)\n  * allow writes to bypass the commitlog for certain keyspaces (CASSANDRA-2683)\n+ * avoid NPE when bypassing commitlog during memtable flush (CASSANDRA-2781)\n \n \n 0.8.0-final", "filename": "CHANGES.txt"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/4e96cc9d41bccc9781cbe3008db6e72c91c7d5f1/src/java/org/apache/cassandra/db/ColumnFamilyStore.java", "blob_url": "https://github.com/apache/cassandra/blob/4e96cc9d41bccc9781cbe3008db6e72c91c7d5f1/src/java/org/apache/cassandra/db/ColumnFamilyStore.java", "sha": "e1759951a9bf30cfff58705fedb530549b1d4492", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=4e96cc9d41bccc9781cbe3008db6e72c91c7d5f1", "patch": "@@ -646,7 +646,7 @@ public String getTempSSTablePath(String directory)\n \n             assert getMemtableThreadSafe() == oldMemtable;\n             oldMemtable.freeze();\n-            final ReplayPosition ctx = writeCommitLog ? CommitLog.instance.getContext() : null;\n+            final ReplayPosition ctx = writeCommitLog ? CommitLog.instance.getContext() : ReplayPosition.NONE;\n \n             // submit the memtable for any indexed sub-cfses, and our own.\n             List<ColumnFamilyStore> icc = new ArrayList<ColumnFamilyStore>(indexedColumns.size());", "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/16d860683c29e47010d50326289a18d9ca337c13", "parent": "https://github.com/apache/cassandra/commit/741c616ce95df93fac5c5cf4aebcf8bc3cc9a0f5", "message": "NPE running SELECT with an IN clause\n\nPatch by eevans; reviewed by jbellis for CASSANDRA-2538\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.8@1096931 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_157", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/16d860683c29e47010d50326289a18d9ca337c13/src/java/org/apache/cassandra/cql/WhereClause.java", "blob_url": "https://github.com/apache/cassandra/blob/16d860683c29e47010d50326289a18d9ca337c13/src/java/org/apache/cassandra/cql/WhereClause.java", "sha": "108de747c533b8069a9755ef0f24d926c6d8cf53", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql/WhereClause.java?ref=16d860683c29e47010d50326289a18d9ca337c13", "patch": "@@ -56,7 +56,7 @@ public WhereClause()\n      */\n     public void and(Relation relation)\n     {\n-        if (relation.isKey())\n+        if ((relation != null) && relation.isKey())\n         {\n             if (relation.operator().equals(RelationType.EQ))\n                 keys.add(relation.getValue());", "filename": "src/java/org/apache/cassandra/cql/WhereClause.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/0137829ac4add5b0e5b4e25b8403e7f9ad057276", "parent": "https://github.com/apache/cassandra/commit/72fb2ade882e14654f12ded2b5d4d0807c7f2d2a", "message": "fix NPE compacting index CFs\npatch by jbellis; reviewed by Jackson Chung for CASSANDRA-2528\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.8@1095840 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_158", "file": [{"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/0137829ac4add5b0e5b4e25b8403e7f9ad057276/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/0137829ac4add5b0e5b4e25b8403e7f9ad057276/CHANGES.txt", "sha": "d926c0f0fa25a7b9f16b6966680436b4becbe375", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=0137829ac4add5b0e5b4e25b8403e7f9ad057276", "patch": "@@ -1,3 +1,7 @@\n+0.8.0-?\n+ * fix NPE compacting index CFs (CASSANDRA-2528)\n+\n+\n 0.8.0-beta1\n  * remove Avro RPC support (CASSANDRA-926)\n  * adds support for columns that act as incr/decr counters ", "filename": "CHANGES.txt"}, {"additions": 16, "raw_url": "https://github.com/apache/cassandra/raw/0137829ac4add5b0e5b4e25b8403e7f9ad057276/src/java/org/apache/cassandra/db/ColumnFamily.java", "blob_url": "https://github.com/apache/cassandra/blob/0137829ac4add5b0e5b4e25b8403e7f9ad057276/src/java/org/apache/cassandra/db/ColumnFamily.java", "sha": "b617e41b91c6dc02d8531b70c479c92c2d55bb79", "changes": 35, "status": "modified", "deletions": 19, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamily.java?ref=0137829ac4add5b0e5b4e25b8403e7f9ad057276", "patch": "@@ -36,7 +36,6 @@\n import org.apache.cassandra.config.CFMetaData;\n import org.apache.cassandra.config.DatabaseDescriptor;\n import org.apache.cassandra.db.filter.QueryPath;\n-import org.apache.cassandra.db.marshal.AbstractCommutativeType;\n import org.apache.cassandra.db.marshal.AbstractType;\n import org.apache.cassandra.db.marshal.MarshalException;\n import org.apache.cassandra.io.IColumnSerializer;\n@@ -49,6 +48,7 @@\n \n     /* The column serializer for this Column Family. Create based on config. */\n     private static ColumnFamilySerializer serializer = new ColumnFamilySerializer();\n+    private final CFMetaData cfm;\n \n     public static ColumnFamilySerializer serializer()\n     {\n@@ -67,29 +67,25 @@ public static ColumnFamily create(String tableName, String cfName)\n \n     public static ColumnFamily create(CFMetaData cfm)\n     {\n-        assert cfm != null;\n-        return new ColumnFamily(cfm.cfType, cfm.comparator, cfm.subcolumnComparator, cfm.cfId);\n+        return new ColumnFamily(cfm);\n     }\n \n-    private final Integer cfid;\n-    private final ColumnFamilyType type;\n-\n     private transient IColumnSerializer columnSerializer;\n     final AtomicLong markedForDeleteAt = new AtomicLong(Long.MIN_VALUE);\n     final AtomicInteger localDeletionTime = new AtomicInteger(Integer.MIN_VALUE);\n     private ConcurrentSkipListMap<ByteBuffer, IColumn> columns;\n     \n-    public ColumnFamily(ColumnFamilyType type, AbstractType comparator, AbstractType subcolumnComparator, Integer cfid)\n+    public ColumnFamily(CFMetaData cfm)\n     {\n-        this.type = type;\n-        columnSerializer = type == ColumnFamilyType.Standard ? Column.serializer() : SuperColumn.serializer(subcolumnComparator);\n-        columns = new ConcurrentSkipListMap<ByteBuffer, IColumn>(comparator);\n-        this.cfid = cfid;\n+        assert cfm != null;\n+        this.cfm = cfm;\n+        columnSerializer = cfm.cfType == ColumnFamilyType.Standard ? Column.serializer() : SuperColumn.serializer(cfm.subcolumnComparator);\n+        columns = new ConcurrentSkipListMap<ByteBuffer, IColumn>(cfm.comparator);\n      }\n     \n     public ColumnFamily cloneMeShallow()\n     {\n-        ColumnFamily cf = new ColumnFamily(type, getComparator(), getSubComparator(), cfid);\n+        ColumnFamily cf = new ColumnFamily(cfm);\n         cf.markedForDeleteAt.set(markedForDeleteAt.get());\n         cf.localDeletionTime.set(localDeletionTime.get());\n         return cf;\n@@ -100,9 +96,9 @@ public AbstractType getSubComparator()\n         return (columnSerializer instanceof SuperColumnSerializer) ? ((SuperColumnSerializer)columnSerializer).getComparator() : null;\n     }\n \n-    public ColumnFamilyType getColumnFamilyType()\n+    public ColumnFamilyType getType()\n     {\n-        return type;\n+        return cfm.cfType;\n     }\n \n     public ColumnFamily cloneMe()\n@@ -114,15 +110,15 @@ public ColumnFamily cloneMe()\n \n     public Integer id()\n     {\n-        return cfid;\n+        return cfm.cfId;\n     }\n \n     /**\n-     * @return The CFMetaData for this row, or null if the column family was dropped.\n+     * @return The CFMetaData for this row\n      */\n     public CFMetaData metadata()\n     {\n-        return DatabaseDescriptor.getCFMetaData(cfid);\n+        return cfm;\n     }\n \n     /*\n@@ -148,7 +144,7 @@ public int getColumnCount()\n \n     public boolean isSuper()\n     {\n-        return type == ColumnFamilyType.Super;\n+        return getType() == ColumnFamilyType.Super;\n     }\n \n     public void addColumn(QueryPath path, ByteBuffer value, long timestamp)\n@@ -294,7 +290,8 @@ public boolean isMarkedForDelete()\n      */\n     public ColumnFamily diff(ColumnFamily cfComposite)\n     {\n-        ColumnFamily cfDiff = new ColumnFamily(cfComposite.type, getComparator(), getSubComparator(), cfComposite.id());\n+        assert cfComposite.id().equals(id());\n+        ColumnFamily cfDiff = new ColumnFamily(cfm);\n         if (cfComposite.getMarkedForDeleteAt() > getMarkedForDeleteAt())\n         {\n             cfDiff.delete(cfComposite.getLocalDeletionTime(), cfComposite.getMarkedForDeleteAt());", "filename": "src/java/org/apache/cassandra/db/ColumnFamily.java"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/0137829ac4add5b0e5b4e25b8403e7f9ad057276/src/java/org/apache/cassandra/tools/SSTableImport.java", "blob_url": "https://github.com/apache/cassandra/blob/0137829ac4add5b0e5b4e25b8403e7f9ad057276/src/java/org/apache/cassandra/tools/SSTableImport.java", "sha": "5e6e45c6f8c734f50c7d59999470dc736c97c672", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/tools/SSTableImport.java?ref=0137829ac4add5b0e5b4e25b8403e7f9ad057276", "patch": "@@ -278,7 +278,7 @@ private static int importUnsorted(JsonParser parser, ColumnFamily columnFamily,\n \n         for (Map.Entry<DecoratedKey, String> rowKey : decoratedKeys.entrySet())\n         {\n-            if (columnFamily.getColumnFamilyType() == ColumnFamilyType.Super)\n+            if (columnFamily.getType() == ColumnFamilyType.Super)\n             {\n                 addToSuperCF((Map<?, ?>) data.get(rowKey.getValue()), columnFamily);\n             }\n@@ -350,7 +350,7 @@ public static int importSorted(String jsonFile, ColumnFamily columnFamily, Strin\n \n                 if (tokenName.equals(\"START_ARRAY\"))\n                 {\n-                    if (columnFamily.getColumnFamilyType() == ColumnFamilyType.Super)\n+                    if (columnFamily.getType() == ColumnFamilyType.Super)\n                     {\n                         throw new RuntimeException(\"Can't write Standard columns to the Super Column Family.\");\n                     }\n@@ -360,7 +360,7 @@ public static int importSorted(String jsonFile, ColumnFamily columnFamily, Strin\n                 }\n                 else if (tokenName.equals(\"START_OBJECT\"))\n                 {\n-                    if (columnFamily.getColumnFamilyType() == ColumnFamilyType.Standard)\n+                    if (columnFamily.getType() == ColumnFamilyType.Standard)\n                     {\n                         throw new RuntimeException(\"Can't write Super columns to the Standard Column Family.\");\n                     }", "filename": "src/java/org/apache/cassandra/tools/SSTableImport.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/28a4b070a0a215ce586103fd50827eae7865b252", "parent": "https://github.com/apache/cassandra/commit/f60187d4d56395f25c45ab26422ac8e7d72f5c9c", "message": "merge validateKey/validateKeyType, add CF validation to cql, add comparator to cql name validation.  fixes test NPE.\npatch by jbellis\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/trunk@1086755 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_159", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/28a4b070a0a215ce586103fd50827eae7865b252/src/java/org/apache/cassandra/config/CFMetaData.java", "blob_url": "https://github.com/apache/cassandra/blob/28a4b070a0a215ce586103fd50827eae7865b252/src/java/org/apache/cassandra/config/CFMetaData.java", "sha": "c392a03439320969f248c081cc279c6d7703d409", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/CFMetaData.java?ref=28a4b070a0a215ce586103fd50827eae7865b252", "patch": "@@ -730,6 +730,7 @@ else if (subcolumnComparator != DatabaseDescriptor.getComparator(cf_def.subcompa\n         def.memtable_throughput_in_mb = cfm.memtableThroughputInMb;\n         def.memtable_operations_in_millions = cfm.memtableOperationsInMillions;\n         def.merge_shards_chance = cfm.mergeShardsChance;\n+        def.key_validation_class = cfm.keyValidator.getClass().getName();\n         List<org.apache.cassandra.db.migration.avro.ColumnDef> column_meta = new ArrayList<org.apache.cassandra.db.migration.avro.ColumnDef>(cfm.column_metadata.size());\n         for (ColumnDefinition cd : cfm.column_metadata.values())\n         {", "filename": "src/java/org/apache/cassandra/config/CFMetaData.java"}, {"additions": 32, "raw_url": "https://github.com/apache/cassandra/raw/28a4b070a0a215ce586103fd50827eae7865b252/src/java/org/apache/cassandra/cql/QueryProcessor.java", "blob_url": "https://github.com/apache/cassandra/blob/28a4b070a0a215ce586103fd50827eae7865b252/src/java/org/apache/cassandra/cql/QueryProcessor.java", "sha": "c5197ae8ba34e9eda9e5a6d3619d7f54b30dfc4d", "changes": 76, "status": "modified", "deletions": 44, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql/QueryProcessor.java?ref=28a4b070a0a215ce586103fd50827eae7865b252", "patch": "@@ -69,7 +69,7 @@\n \n import static org.apache.cassandra.thrift.ThriftValidation.validateKey;\n import static org.apache.cassandra.thrift.ThriftValidation.validateColumnFamily;\n-import static org.apache.cassandra.thrift.ThriftValidation.validateKeyType;\n+import static org.apache.cassandra.thrift.ThriftValidation.validateColumnNames;\n \n public class QueryProcessor\n {\n@@ -86,16 +86,17 @@\n         assert select.getKeys().size() == 1;\n         \n         ByteBuffer key = select.getKeys().get(0).getByteBuffer(AsciiType.instance);\n-        validateKey(key);\n-        \n+        CFMetaData metadata = validateColumnFamily(keyspace, select.getColumnFamily(), false);\n+        validateKey(metadata, key);\n+\n         // ...of a list of column names\n         if (!select.isColumnRange())\n         {\n             Collection<ByteBuffer> columnNames = new ArrayList<ByteBuffer>();\n             for (Term column : select.getColumnNames())\n                 columnNames.add(column.getByteBuffer(comparator));\n             \n-            validateColumnNames(keyspace, select.getColumnFamily(), columnNames);\n+            validateColumnNames(metadata, null, columnNames);\n             commands.add(new SliceByNamesReadCommand(keyspace, key, queryPath, columnNames));\n         }\n         // ...a range (slice) of column names\n@@ -104,7 +105,7 @@\n             ByteBuffer start = select.getColumnStart().getByteBuffer(comparator);\n             ByteBuffer finish = select.getColumnFinish().getByteBuffer(comparator);\n             \n-            validateSliceRange(keyspace, select.getColumnFamily(), start, finish, select.isColumnsReversed());\n+            validateSliceRange(metadata, start, finish, select.isColumnsReversed());\n             commands.add(new SliceFromReadCommand(keyspace,\n                                                   key,\n                                                   queryPath,\n@@ -140,10 +141,11 @@\n         IPartitioner<?> p = StorageService.getPartitioner();\n         AbstractBounds bounds = new Bounds(p.getToken(startKey), p.getToken(finishKey));\n         \n-        AbstractType<?> comparator = select.getComparator(keyspace);\n+        CFMetaData metadata = validateColumnFamily(keyspace, select.getColumnFamily(), false);\n+        AbstractType<?> comparator = metadata.getComparatorFor(null);\n         // XXX: Our use of Thrift structs internally makes me Sad. :(\n         SlicePredicate thriftSlicePredicate = slicePredicateFromSelect(select, comparator);\n-        validateSlicePredicate(keyspace, select.getColumnFamily(), thriftSlicePredicate);\n+        validateSlicePredicate(metadata, thriftSlicePredicate);\n \n         try\n         {\n@@ -174,10 +176,11 @@\n     private static List<org.apache.cassandra.db.Row> getIndexedSlices(String keyspace, SelectStatement select)\n     throws TimedOutException, UnavailableException, InvalidRequestException\n     {\n-        AbstractType<?> comparator = select.getComparator(keyspace);\n+        CFMetaData metadata = validateColumnFamily(keyspace, select.getColumnFamily(), false);\n+        AbstractType<?> comparator = metadata.getComparatorFor(null);\n         // XXX: Our use of Thrift structs internally (still) makes me Sad. :~(\n         SlicePredicate thriftSlicePredicate = slicePredicateFromSelect(select, comparator);\n-        validateSlicePredicate(keyspace, select.getColumnFamily(), thriftSlicePredicate);\n+        validateSlicePredicate(metadata, thriftSlicePredicate);\n         \n         List<IndexExpression> expressions = new ArrayList<IndexExpression>();\n         for (Relation columnRelation : select.getColumnRelations())\n@@ -225,7 +228,7 @@ private static void batchUpdate(ClientState clientState, List<UpdateStatement> u\n \n         for (UpdateStatement update : updateStatements)\n         {\n-            String cfname = update.getColumnFamily();\n+            CFMetaData metadata = validateColumnFamily(keyspace, update.getColumnFamily(), false);\n             // Avoid unnecessary authorizations.\n             if (!(cfamsSeen.contains(update.getColumnFamily())))\n             {\n@@ -235,9 +238,7 @@ private static void batchUpdate(ClientState clientState, List<UpdateStatement> u\n             \n             // FIXME: keys as ascii is not a Real Solution\n             ByteBuffer key = update.getKey().getByteBuffer(AsciiType.instance);\n-            validateKey(key);\n-            validateColumnFamily(keyspace, update.getColumnFamily(), false);\n-            validateKeyType(key, keyspace, cfname);\n+            validateKey(metadata, key);\n             AbstractType<?> comparator = update.getComparator(keyspace);\n             \n             RowMutation rm = new RowMutation(keyspace, key);\n@@ -246,7 +247,7 @@ private static void batchUpdate(ClientState clientState, List<UpdateStatement> u\n                 ByteBuffer colName = column.getKey().getByteBuffer(comparator);\n                 ByteBuffer colValue = column.getValue().getByteBuffer(update.getValueValidator(keyspace, colName));\n                 \n-                validateColumn(keyspace, update.getColumnFamily(), colName, colValue);\n+                validateColumn(metadata, colName, colValue);\n                 rm.add(new QueryPath(update.getColumnFamily(), null, colName), colValue, System.currentTimeMillis());\n             }\n             \n@@ -365,33 +366,19 @@ public Object call() throws Exception\n             }\n         }\n     }\n-\n-    private static void validateColumnNames(String keyspace, String columnFamily, Iterable<ByteBuffer> columns)\n-    throws InvalidRequestException\n-    {\n-        for (ByteBuffer name : columns)\n-        {\n-            if (name.remaining() > IColumn.MAX_NAME_LENGTH)\n-                throw new InvalidRequestException(String.format(\"column name is too long (%s > %s)\",\n-                                                                name.remaining(),\n-                                                                IColumn.MAX_NAME_LENGTH));\n-            if (name.remaining() == 0)\n-                throw new InvalidRequestException(\"zero-length column name\");\n-        }\n-    }\n     \n-    private static void validateColumnName(String keyspace, String columnFamily, ByteBuffer column)\n+    private static void validateColumnName(CFMetaData metadata, ByteBuffer column)\n     throws InvalidRequestException\n     {\n-        validateColumnNames(keyspace, columnFamily, Arrays.asList(column));\n+        validateColumnNames(metadata, null, Arrays.asList(column));\n     }\n     \n-    private static void validateColumn(String keyspace, String columnFamily, ByteBuffer name, ByteBuffer value)\n+    private static void validateColumn(CFMetaData metadata, ByteBuffer name, ByteBuffer value)\n     throws InvalidRequestException\n     {\n-        validateColumnName(keyspace, columnFamily, name);\n-        AbstractType<?> validator = DatabaseDescriptor.getValueValidator(keyspace, columnFamily, name);\n-        \n+        validateColumnName(metadata, name);\n+        AbstractType<?> validator = metadata.getValueValidator(name);\n+\n         try\n         {\n             if (validator != null)\n@@ -405,25 +392,25 @@ private static void validateColumn(String keyspace, String columnFamily, ByteBuf\n         }\n     }\n     \n-    private static void validateSlicePredicate(String keyspace, String columnFamily, SlicePredicate predicate)\n+    private static void validateSlicePredicate(CFMetaData metadata, SlicePredicate predicate)\n     throws InvalidRequestException\n     {\n         if (predicate.slice_range != null)\n-            validateSliceRange(keyspace, columnFamily, predicate.slice_range);\n+            validateSliceRange(metadata, predicate.slice_range);\n         else\n-            validateColumnNames(keyspace, columnFamily, predicate.column_names);\n+            validateColumnNames(metadata, null, predicate.column_names);\n     }\n     \n-    private static void validateSliceRange(String keyspace, String columnFamily, SliceRange range)\n+    private static void validateSliceRange(CFMetaData metadata, SliceRange range)\n     throws InvalidRequestException\n     {\n-        validateSliceRange(keyspace, columnFamily, range.start, range.finish, range.reversed);\n+        validateSliceRange(metadata, range.start, range.finish, range.reversed);\n     }\n     \n-    private static void validateSliceRange(String keyspace, String columnFamily, ByteBuffer start, ByteBuffer finish, boolean reversed)\n+    private static void validateSliceRange(CFMetaData metadata, ByteBuffer start, ByteBuffer finish, boolean reversed)\n     throws InvalidRequestException\n     {\n-        AbstractType<?> comparator = ColumnFamily.getComparatorFor(keyspace, columnFamily, null);\n+        AbstractType<?> comparator = metadata.getComparatorFor(null);\n         Comparator<ByteBuffer> orderedComparator = reversed ? comparator.reverseComparator: comparator;\n         if (start.remaining() > 0 && finish.remaining() > 0 && orderedComparator.compare(start, finish) > 0)\n             throw new InvalidRequestException(\"range finish must come after start in traversal order\");\n@@ -577,8 +564,9 @@ public static CqlResult process(String queryString, ClientState clientState)\n             case DELETE:\n                 DeleteStatement delete = (DeleteStatement)statement.statement;\n                 clientState.hasColumnFamilyAccess(delete.getColumnFamily(), Permission.WRITE);\n-                AbstractType<?> comparator = DatabaseDescriptor.getComparator(keyspace, delete.getColumnFamily());\n-                \n+                CFMetaData metadata = validateColumnFamily(keyspace, delete.getColumnFamily(), false);\n+                AbstractType<?> comparator = metadata.getComparatorFor(null);\n+\n                 List<RowMutation> rowMutations = new ArrayList<RowMutation>();\n                 for (Term key : delete.getKeys())\n                 {\n@@ -590,7 +578,7 @@ public static CqlResult process(String queryString, ClientState clientState)\n                         for (Term column : delete.getColumns())\n                         {\n                             ByteBuffer columnName = column.getByteBuffer(comparator);\n-                            validateColumnName(keyspace, delete.getColumnFamily(), columnName);\n+                            validateColumnName(metadata, columnName);\n                             rm.delete(new QueryPath(delete.getColumnFamily(), null, columnName),\n                                       System.currentTimeMillis());\n                         }", "filename": "src/java/org/apache/cassandra/cql/QueryProcessor.java"}, {"additions": 8, "raw_url": "https://github.com/apache/cassandra/raw/28a4b070a0a215ce586103fd50827eae7865b252/src/java/org/apache/cassandra/thrift/CassandraServer.java", "blob_url": "https://github.com/apache/cassandra/blob/28a4b070a0a215ce586103fd50827eae7865b252/src/java/org/apache/cassandra/thrift/CassandraServer.java", "sha": "80833da944479f1fff374c47ec3819fb609dea7a", "changes": 18, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/thrift/CassandraServer.java?ref=28a4b070a0a215ce586103fd50827eae7865b252", "patch": "@@ -265,7 +265,7 @@ public ClientState state()\n         {\n             for (ByteBuffer key: keys)\n             {\n-                ThriftValidation.validateKey(key);\n+                ThriftValidation.validateKey(metadata, key);\n                 commands.add(new SliceByNamesReadCommand(keyspace, key, column_parent, predicate.column_names));\n             }\n         }\n@@ -274,7 +274,7 @@ public ClientState state()\n             SliceRange range = predicate.slice_range;\n             for (ByteBuffer key: keys)\n             {\n-                ThriftValidation.validateKey(key);\n+                ThriftValidation.validateKey(metadata, key);\n                 commands.add(new SliceFromReadCommand(keyspace, key, column_parent, range.start, range.finish, range.reversed, range.count));\n             }\n         }\n@@ -293,7 +293,7 @@ private ColumnOrSuperColumn internal_get(ByteBuffer key, ColumnPath column_path,\n \n         QueryPath path = new QueryPath(column_path.column_family, column_path.column == null ? null : column_path.super_column);\n         List<ByteBuffer> nameAsList = Arrays.asList(column_path.column == null ? column_path.super_column : column_path.column);\n-        ThriftValidation.validateKey(key);\n+        ThriftValidation.validateKey(metadata, key);\n         ReadCommand command = new SliceByNamesReadCommand(keyspace, key, path, nameAsList);\n \n         Map<DecoratedKey, ColumnFamily> cfamilies = readColumnFamily(Arrays.asList(command), consistency_level);\n@@ -349,11 +349,10 @@ private void internal_insert(ByteBuffer key, ColumnParent column_parent, Column\n     {\n         state().hasColumnFamilyAccess(column_parent.column_family, Permission.WRITE);\n \n-        ThriftValidation.validateKey(key);\n         CFMetaData metadata = ThriftValidation.validateColumnFamily(state().getKeyspace(), column_parent.column_family, isCommutativeOp);\n+        ThriftValidation.validateKey(metadata, key);\n         if (isCommutativeOp)\n             ThriftValidation.validateCommutativeForWrite(metadata, consistency_level);\n-        ThriftValidation.validateKeyType(key, state().getKeyspace(), column_parent.column_family);\n         ThriftValidation.validateColumnNames(metadata, column_parent, Arrays.asList(column.name));\n         ThriftValidation.validateColumnData(metadata, column);\n \n@@ -387,12 +386,12 @@ private void internal_batch_mutate(Map<ByteBuffer,Map<String,List<Mutation>>> mu\n         {\n             ByteBuffer key = mutationEntry.getKey();\n \n-            ThriftValidation.validateKey(key);\n             Map<String, List<Mutation>> columnFamilyToMutations = mutationEntry.getValue();\n             for (Map.Entry<String, List<Mutation>> columnFamilyMutations : columnFamilyToMutations.entrySet())\n             {\n                 String cfName = columnFamilyMutations.getKey();\n-                ThriftValidation.validateKeyType(key, state().getKeyspace(), cfName);\n+                CFMetaData metadata = ThriftValidation.validateColumnFamily(state().getKeyspace(), cfName, isCommutativeOp);\n+                ThriftValidation.validateKey(metadata, key);\n \n                 // Avoid unneeded authorizations\n                 if (!(cfamsSeen.contains(cfName)))\n@@ -401,7 +400,6 @@ private void internal_batch_mutate(Map<ByteBuffer,Map<String,List<Mutation>>> mu\n                     cfamsSeen.add(cfName);\n                 }\n \n-                CFMetaData metadata = ThriftValidation.validateColumnFamily(state().getKeyspace(), cfName, isCommutativeOp);\n                 if (isCommutativeOp)\n                     ThriftValidation.validateCommutativeForWrite(metadata, consistency_level);\n \n@@ -431,11 +429,11 @@ private void internal_remove(ByteBuffer key, ColumnPath column_path, long timest\n     {\n         state().hasColumnFamilyAccess(column_path.column_family, Permission.WRITE);\n \n-        ThriftValidation.validateKey(key);\n         CFMetaData metadata = ThriftValidation.validateColumnFamily(state().getKeyspace(), column_path.column_family, isCommutativeOp);\n+        ThriftValidation.validateKey(metadata, key);\n+        ThriftValidation.validateColumnPathOrParent(metadata, column_path);\n         if (isCommutativeOp)\n             ThriftValidation.validateCommutativeForWrite(metadata, consistency_level);\n-        ThriftValidation.validateKeyType(key, state().getKeyspace(), column_path.column_family);\n \n         RowMutation rm = new RowMutation(state().getKeyspace(), key);\n         rm.delete(new QueryPath(column_path), timestamp); ", "filename": "src/java/org/apache/cassandra/thrift/CassandraServer.java"}, {"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/28a4b070a0a215ce586103fd50827eae7865b252/src/java/org/apache/cassandra/thrift/ThriftValidation.java", "blob_url": "https://github.com/apache/cassandra/blob/28a4b070a0a215ce586103fd50827eae7865b252/src/java/org/apache/cassandra/thrift/ThriftValidation.java", "sha": "1d041b54f3ce83b96db4740c8d888f7664772e31", "changes": 11, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/thrift/ThriftValidation.java?ref=28a4b070a0a215ce586103fd50827eae7865b252", "patch": "@@ -47,30 +47,27 @@\n  */\n public class ThriftValidation\n {\n-    public static void validateKey(ByteBuffer key) throws InvalidRequestException\n+    public static void validateKey(CFMetaData metadata, ByteBuffer key) throws InvalidRequestException\n     {\n         if (key == null || key.remaining() == 0)\n         {\n             throw new InvalidRequestException(\"Key may not be empty\");\n         }\n+\n         // check that key can be handled by FBUtilities.writeShortByteArray\n         if (key.remaining() > FBUtilities.MAX_UNSIGNED_SHORT)\n         {\n             throw new InvalidRequestException(\"Key length of \" + key.remaining() +\n                                               \" is longer than maximum of \" + FBUtilities.MAX_UNSIGNED_SHORT);\n         }\n-    }\n \n-    public static void validateKeyType(ByteBuffer key, String ksname, String cfname) throws InvalidRequestException\n-    {\n         try\n         {\n-            AbstractType<?> keyValidator = DatabaseDescriptor.getCFMetaData(ksname, cfname).getKeyValidator();\n-            keyValidator.validate(key);\n+            metadata.getKeyValidator().validate(key);\n         }\n         catch (MarshalException e)\n         {\n-            throw new InvalidRequestException(e.toString());\n+            throw new InvalidRequestException(e.getMessage());\n         }\n     }\n ", "filename": "src/java/org/apache/cassandra/thrift/ThriftValidation.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/4618b41ea9374e09ee61e569da9ca4a4fedf81ed", "parent": "https://github.com/apache/cassandra/commit/2303abc1ef3e7163eab99ae600696b445bfc4e6c", "message": "fix #2 for counter replication NPE\npatch by Stu Hood; reviewed by slebresne for CASSANDRA-2289\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/trunk@1079833 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_160", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/4618b41ea9374e09ee61e569da9ca4a4fedf81ed/src/java/org/apache/cassandra/db/CounterMutation.java", "blob_url": "https://github.com/apache/cassandra/blob/4618b41ea9374e09ee61e569da9ca4a4fedf81ed/src/java/org/apache/cassandra/db/CounterMutation.java", "sha": "14d863053083e0ef63edab9b620462e486716555", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/CounterMutation.java?ref=4618b41ea9374e09ee61e569da9ca4a4fedf81ed", "patch": "@@ -126,7 +126,7 @@ public RowMutation makeReplicationMutation() throws IOException\n         {\n             Table table = Table.open(readCommand.table);\n             Row row = readCommand.getRow(table);\n-            if (null == row)\n+            if (row == null || row.cf == null)\n                 continue;\n             AbstractType defaultValidator = row.cf.metadata().getDefaultValidator();\n             if (defaultValidator.isCommutative())", "filename": "src/java/org/apache/cassandra/db/CounterMutation.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/c75b0c1d2b91d6101d6527b8c24fee2d0234b4ab", "parent": "https://github.com/apache/cassandra/commit/82dd73b3a549b7d101aea9ee07dd31cf756035c6", "message": "Fix NPE in nodetool when gossip isn't initialized.\nPatch by brandonwilliams, reviewed by jbellis for CASSANDRA-2270\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.7@1078108 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_161", "file": [{"additions": 7, "raw_url": "https://github.com/apache/cassandra/raw/c75b0c1d2b91d6101d6527b8c24fee2d0234b4ab/src/java/org/apache/cassandra/tools/NodeCmd.java", "blob_url": "https://github.com/apache/cassandra/blob/c75b0c1d2b91d6101d6527b8c24fee2d0234b4ab/src/java/org/apache/cassandra/tools/NodeCmd.java", "sha": "cad3af9f7b326d42599f99607ddfe8b50244c8d3", "changes": 10, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/tools/NodeCmd.java?ref=c75b0c1d2b91d6101d6527b8c24fee2d0234b4ab", "patch": "@@ -209,11 +209,15 @@ public void printThreadPoolStats(PrintStream outs)\n      */\n     public void printInfo(PrintStream outs)\n     {\n+        boolean gossipInitialized = probe.isInitialized();\n         outs.println(probe.getToken());\n-        outs.printf(\"%-17s: %s%n\", \"Gossip active\", probe.isInitialized());\n+        outs.printf(\"%-17s: %s%n\", \"Gossip active\", gossipInitialized);\n         outs.printf(\"%-17s: %s%n\", \"Load\", probe.getLoadString());\n-        outs.printf(\"%-17s: %s%n\", \"Generation No\", probe.getCurrentGenerationNumber());\n-        \n+        if (gossipInitialized)\n+            outs.printf(\"%-17s: %s%n\", \"Generation No\", probe.getCurrentGenerationNumber());\n+        else\n+            outs.printf(\"%-17s: %s%n\", \"Generation No\", 0);\n+\n         // Uptime\n         long secondsUp = probe.getUptime() / 1000;\n         outs.printf(\"%-17s: %d%n\", \"Uptime (seconds)\", secondsUp);", "filename": "src/java/org/apache/cassandra/tools/NodeCmd.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/e70502c094194fd41d69c1bf8356255a8783a21c", "parent": "https://github.com/apache/cassandra/commit/75e832aa7ae2f6e38050b9c8c87f1c7a8e84bce7", "message": "avoid NPE when no keyspaces are defined in yaml. Patch by Sylvain Lebresne, reviewd by gdusbabek. CASSANDRA-1080\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/trunk@943566 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_162", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/e70502c094194fd41d69c1bf8356255a8783a21c/src/java/org/apache/cassandra/config/DatabaseDescriptor.java", "blob_url": "https://github.com/apache/cassandra/blob/e70502c094194fd41d69c1bf8356255a8783a21c/src/java/org/apache/cassandra/config/DatabaseDescriptor.java", "sha": "720a2f1538003b440a11b1637c2678f0cd13dabf", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=e70502c094194fd41d69c1bf8356255a8783a21c", "patch": "@@ -388,9 +388,9 @@ public static void loadSchemas() throws IOException\n                 Table.open(def.name);\n             }\n             \n-            // since we loaded definitions from local storage, log a warning if definitions exist in xml.\n+            // since we loaded definitions from local storage, log a warning if definitions exist in yaml.\n             \n-            if (conf.keyspaces.size() > 0)\n+            if (conf.keyspaces != null && conf.keyspaces.size() > 0)\n                 logger.warn(\"Schema definitions were defined both locally and in \" + STORAGE_CONF_FILE +\n                     \". Definitions in \" + STORAGE_CONF_FILE + \" were ignored.\");\n             ", "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/939709f977311add1cdc89cdd51bb19dc694d8f7", "parent": "https://github.com/apache/cassandra/commit/debfcf8acaf2345c824bd426858ce89159c6d753", "message": "fix NPE on iterator close.  patch by jbellis; reviewed by Chris Goffinet for CASSANDRA-341\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/cassandra/trunk@801047 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_163", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/939709f977311add1cdc89cdd51bb19dc694d8f7/src/java/org/apache/cassandra/db/ColumnFamilyStore.java", "blob_url": "https://github.com/apache/cassandra/blob/939709f977311add1cdc89cdd51bb19dc694d8f7/src/java/org/apache/cassandra/db/ColumnFamilyStore.java", "sha": "8baf41ffa802e4526085b8aa49e3d8d483571f6e", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=939709f977311add1cdc89cdd51bb19dc694d8f7", "patch": "@@ -1453,7 +1453,7 @@ public ColumnFamily getColumnFamily(QueryFilter filter, int gcBefore) throws IOE\n                 }\n                 catch (Throwable th)\n                 {\n-                    logger_.error(th);\n+                    logger_.error(\"error closing \" + ci, th);\n                 }\n             }\n ", "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java"}, {"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/939709f977311add1cdc89cdd51bb19dc694d8f7/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java", "blob_url": "https://github.com/apache/cassandra/blob/939709f977311add1cdc89cdd51bb19dc694d8f7/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java", "sha": "15e41cc32b0e4b0779b05fd4f5012603fce68635", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java?ref=939709f977311add1cdc89cdd51bb19dc694d8f7", "patch": "@@ -127,7 +127,8 @@ protected IColumn computeNext()\n \n     public void close() throws IOException\n     {\n-        reader.close();\n+        if (reader != null)\n+            reader.close();\n     }\n \n     /**", "filename": "src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/fb347bd3d16e35c50df5fca14ed3c0611e80985b", "parent": "https://github.com/apache/cassandra/commit/3395efdb30be0e57dd3039993ade1d5ed691187d", "message": "fix CF.digest NPE.  patch by jbellis; reviewed by Eric Evans for CASSANDRA-149\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/cassandra/trunk@772690 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_164", "file": [{"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/fb347bd3d16e35c50df5fca14ed3c0611e80985b/src/java/org/apache/cassandra/db/ColumnFamily.java", "blob_url": "https://github.com/apache/cassandra/blob/fb347bd3d16e35c50df5fca14ed3c0611e80985b/src/java/org/apache/cassandra/db/ColumnFamily.java", "sha": "d5312f937c83eff6e72392998f40447ddd27a73f", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamily.java?ref=fb347bd3d16e35c50df5fca14ed3c0611e80985b", "patch": "@@ -32,6 +32,7 @@\n import java.util.concurrent.atomic.AtomicInteger;\r\n \r\n import org.apache.commons.lang.StringUtils;\r\n+import org.apache.commons.lang.ArrayUtils;\r\n import org.apache.log4j.Logger;\r\n \r\n import org.apache.cassandra.config.DatabaseDescriptor;\r\n@@ -399,10 +400,10 @@ public String toString()\n     public byte[] digest()\r\n     {\r\n     \tSet<IColumn> columns = columns_.getSortedColumns();\r\n-    \tbyte[] xorHash = null;\r\n-    \tfor(IColumn column : columns)\r\n+    \tbyte[] xorHash = ArrayUtils.EMPTY_BYTE_ARRAY;\r\n+        for(IColumn column : columns)\r\n     \t{\r\n-    \t\tif(xorHash == null)\r\n+    \t\tif(xorHash.length == 0)\r\n     \t\t{\r\n     \t\t\txorHash = column.digest();\r\n     \t\t}\r", "filename": "src/java/org/apache/cassandra/db/ColumnFamily.java"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/fb347bd3d16e35c50df5fca14ed3c0611e80985b/src/java/org/apache/cassandra/db/ReadResponse.java", "blob_url": "https://github.com/apache/cassandra/blob/fb347bd3d16e35c50df5fca14ed3c0611e80985b/src/java/org/apache/cassandra/db/ReadResponse.java", "sha": "e6e069f29a345fc718b05a35b0c771edcff674a1", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ReadResponse.java?ref=fb347bd3d16e35c50df5fca14ed3c0611e80985b", "patch": "@@ -27,6 +27,7 @@\n import org.apache.cassandra.net.Message;\r\n import org.apache.cassandra.net.MessagingService;\r\n import org.apache.cassandra.service.StorageService;\r\n+import org.apache.commons.lang.ArrayUtils;\r\n \r\n \r\n /*\r\n@@ -60,11 +61,12 @@ public static Message makeReadResponseMessage(ReadResponse readResponse) throws\n \t\r\n \tprivate String table_;\r\n \tprivate Row row_;\r\n-\tprivate byte[] digest_ = new byte[0];\r\n+\tprivate byte[] digest_ = ArrayUtils.EMPTY_BYTE_ARRAY;\r\n     private boolean isDigestQuery_ = false;\r\n \r\n \tpublic ReadResponse(String table, byte[] digest )\r\n     {\r\n+        assert digest != null;\r\n \t\ttable_ = table;\r\n \t\tdigest_= digest;\r\n \t}\r", "filename": "src/java/org/apache/cassandra/db/ReadResponse.java"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/fb347bd3d16e35c50df5fca14ed3c0611e80985b/src/java/org/apache/cassandra/db/ReadVerbHandler.java", "blob_url": "https://github.com/apache/cassandra/blob/fb347bd3d16e35c50df5fca14ed3c0611e80985b/src/java/org/apache/cassandra/db/ReadVerbHandler.java", "sha": "5ec85905b0f9b4f74844aa42ad262b043570e663", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ReadVerbHandler.java?ref=fb347bd3d16e35c50df5fca14ed3c0611e80985b", "patch": "@@ -77,7 +77,7 @@ public void doVerb(Message message)\n             Row row = null;\r\n             row = readCommand.getRow(table);\r\n             ReadResponse readResponse = null;\r\n-            if(readCommand.isDigestQuery())\r\n+            if (readCommand.isDigestQuery())\r\n             {\r\n                 readResponse = new ReadResponse(table.getTableName(), row.digest());\r\n             }\r", "filename": "src/java/org/apache/cassandra/db/ReadVerbHandler.java"}, {"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/fb347bd3d16e35c50df5fca14ed3c0611e80985b/src/java/org/apache/cassandra/db/Row.java", "blob_url": "https://github.com/apache/cassandra/blob/fb347bd3d16e35c50df5fca14ed3c0611e80985b/src/java/org/apache/cassandra/db/Row.java", "sha": "44f6bcf5fd2a232fcfc2e84dc1bf6d7476a7e4fc", "changes": 6, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/Row.java?ref=fb347bd3d16e35c50df5fca14ed3c0611e80985b", "patch": "@@ -178,12 +178,10 @@ public Row cloneMe()\n             }\r\n             else\r\n             {\r\n-                byte[] tmpHash = columnFamilies_.get(cFamily).digest();\r\n-                xorHash = FBUtilities.xor(xorHash, tmpHash);\r\n+                xorHash = FBUtilities.xor(xorHash, columnFamilies_.get(cFamily).digest());\r\n             }\r\n         }\r\n-        logger_.info(\"DIGEST TIME: \" + (System.currentTimeMillis() - start)\r\n-                     + \" ms.\");\r\n+        logger_.info(\"DIGEST TIME: \" + (System.currentTimeMillis() - start) + \" ms.\");\r\n         return xorHash;\r\n     }\r\n \r", "filename": "src/java/org/apache/cassandra/db/Row.java"}, {"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/fb347bd3d16e35c50df5fca14ed3c0611e80985b/src/java/org/apache/cassandra/utils/FBUtilities.java", "blob_url": "https://github.com/apache/cassandra/blob/fb347bd3d16e35c50df5fca14ed3c0611e80985b/src/java/org/apache/cassandra/utils/FBUtilities.java", "sha": "e7a6325fa4b8e8c6610a6d13a62c22fe050559d7", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/utils/FBUtilities.java?ref=fb347bd3d16e35c50df5fca14ed3c0611e80985b", "patch": "@@ -331,8 +331,10 @@ public static void compressToStream(byte[] input, ByteArrayOutputStream bos) thr\n \r\n      public static byte[] xor(byte[] b1, byte[] b2)\r\n      {\r\n-    \t byte[] bLess = null;\r\n-    \t byte[] bMore = null;\r\n+         assert b1 != null;\r\n+         assert b2 != null;\r\n+    \t byte[] bLess;\r\n+    \t byte[] bMore;\r\n \r\n     \t if(b1.length > b2.length)\r\n     \t {\r", "filename": "src/java/org/apache/cassandra/utils/FBUtilities.java"}, {"additions": 54, "raw_url": "https://github.com/apache/cassandra/raw/fb347bd3d16e35c50df5fca14ed3c0611e80985b/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java", "blob_url": "https://github.com/apache/cassandra/blob/fb347bd3d16e35c50df5fca14ed3c0611e80985b/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java", "sha": "1647efb335ca2864c42f15caa7103d425fe58720", "changes": 96, "status": "modified", "deletions": 42, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java?ref=fb347bd3d16e35c50df5fca14ed3c0611e80985b", "patch": "@@ -15,7 +15,8 @@\n     // TODO test SuperColumns\n \n     @Test\n-    public void testSingleColumn() throws IOException {\n+    public void testSingleColumn() throws IOException\n+    {\n         Random random = new Random();\n         byte[] bytes = new byte[1024];\n         random.nextBytes(bytes);\n@@ -35,19 +36,20 @@ public void testSingleColumn() throws IOException {\n     }\n \n     @Test\n-    public void testManyColumns() throws IOException {\n+    public void testManyColumns() throws IOException\n+    {\n         ColumnFamily cf;\n \n-        TreeMap<String, byte[]> map = new TreeMap<String,byte[]>();\n-        for ( int i = 100; i < 1000; ++i )\n+        TreeMap<String, byte[]> map = new TreeMap<String, byte[]>();\n+        for (int i = 100; i < 1000; ++i)\n         {\n             map.put(Integer.toString(i), (\"Avinash Lakshman is a good man: \" + i).getBytes());\n         }\n \n         // write\n         cf = new ColumnFamily(\"Standard1\", \"Standard\");\n         DataOutputBuffer bufOut = new DataOutputBuffer();\n-        for (String cName: map.navigableKeySet())\n+        for (String cName : map.navigableKeySet())\n         {\n             cf.addColumn(cName, map.get(cName), 314);\n         }\n@@ -57,60 +59,70 @@ public void testManyColumns() throws IOException {\n         DataInputBuffer bufIn = new DataInputBuffer();\n         bufIn.reset(bufOut.getData(), bufOut.getLength());\n         cf = ColumnFamily.serializer().deserialize(bufIn);\n-        for (String cName: map.navigableKeySet())\n+        for (String cName : map.navigableKeySet())\n         {\n             assert Arrays.equals(cf.getColumn(cName).value(), map.get(cName));\n \n         }\n         assert new HashSet<String>(cf.getColumns().keySet()).equals(map.keySet());\n     }\n-    \n+\n     @Test\n-\tpublic void testGetColumnCount() {\n-    \tColumnFamily cf = new ColumnFamily(\"Standard1\", \"Standard\");\n-\t\tbyte val[] = \"sample value\".getBytes();\n-\t\t\n-\t\tcf.addColumn(\"col1\", val, 1);\n-\t\tcf.addColumn(\"col2\", val, 2);\n-\t\tcf.addColumn(\"col1\", val, 3);\n-\n-\t\tassert 2 == cf.getColumnCount();\n-\t\tassert 2 == cf.getAllColumns().size();\n-\t}\n-    \n+    public void testGetColumnCount()\n+    {\n+        ColumnFamily cf = new ColumnFamily(\"Standard1\", \"Standard\");\n+        byte val[] = \"sample value\".getBytes();\n+\n+        cf.addColumn(\"col1\", val, 1);\n+        cf.addColumn(\"col2\", val, 2);\n+        cf.addColumn(\"col1\", val, 3);\n+\n+        assert 2 == cf.getColumnCount();\n+        assert 2 == cf.getAllColumns().size();\n+    }\n+\n     @Test\n-    public void testTimestamp() {\n-    \tColumnFamily cf = new ColumnFamily(\"Standard1\", \"Standard\");\n-    \tbyte val1[] = \"sample 1\".getBytes();\n+    public void testTimestamp()\n+    {\n+        ColumnFamily cf = new ColumnFamily(\"Standard1\", \"Standard\");\n+        byte val1[] = \"sample 1\".getBytes();\n         byte val2[] = \"sample 2\".getBytes();\n         byte val3[] = \"sample 3\".getBytes();\n \n-    \tcf.addColumn(\"col1\", val1, 2);\n+        cf.addColumn(\"col1\", val1, 2);\n         cf.addColumn(\"col1\", val2, 2); // same timestamp, new value\n         cf.addColumn(\"col1\", val3, 1); // older timestamp -- should be ignored\n \n         assert Arrays.equals(val2, cf.getColumn(\"col1\").value());\n     }\n-    \n+\n     @Test\n-    public void testMergeAndAdd(){\n-    \tColumnFamily cf_new = new ColumnFamily(\"Standard1\", \"Standard\");\n-    \tColumnFamily cf_old = new ColumnFamily(\"Standard1\", \"Standard\");\n-    \tColumnFamily cf_result = new ColumnFamily(\"Standard1\", \"Standard\");\n-    \tbyte val[] = \"sample value\".getBytes();\n-    \tbyte val2[] = \"x value \".getBytes();\n-    \t\n-    \tcf_new.addColumn(\"col1\", val, 3);\n-    \tcf_new.addColumn(\"col2\", val, 4);\n-\n-    \tcf_old.addColumn(\"col2\", val2, 1);\n-    \tcf_old.addColumn(\"col3\", val2, 2);\n-\n-    \tcf_result.addColumns(cf_new);\n-    \tcf_result.addColumns(cf_old);\n-    \t\n-    \tassert 3 == cf_result.getColumnCount() : \"Count is \" + cf_new.getColumnCount();\n-    \t//addcolumns will only add if timestamp >= old timestamp\n+    public void testMergeAndAdd()\n+    {\n+        ColumnFamily cf_new = new ColumnFamily(\"Standard1\", \"Standard\");\n+        ColumnFamily cf_old = new ColumnFamily(\"Standard1\", \"Standard\");\n+        ColumnFamily cf_result = new ColumnFamily(\"Standard1\", \"Standard\");\n+        byte val[] = \"sample value\".getBytes();\n+        byte val2[] = \"x value \".getBytes();\n+\n+        cf_new.addColumn(\"col1\", val, 3);\n+        cf_new.addColumn(\"col2\", val, 4);\n+\n+        cf_old.addColumn(\"col2\", val2, 1);\n+        cf_old.addColumn(\"col3\", val2, 2);\n+\n+        cf_result.addColumns(cf_new);\n+        cf_result.addColumns(cf_old);\n+\n+        assert 3 == cf_result.getColumnCount() : \"Count is \" + cf_new.getColumnCount();\n+        //addcolumns will only add if timestamp >= old timestamp\n         assert Arrays.equals(val, cf_result.getColumn(\"col2\").value());\n     }\n+\n+    @Test\n+    public void testEmptyDigest()\n+    {\n+        ColumnFamily cf = new ColumnFamily(\"Standard1\", \"Standard\");\n+        assert cf.digest().length == 0;\n+    }\n }", "filename": "test/unit/org/apache/cassandra/db/ColumnFamilyTest.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/fb05f27d5196bde59cf15d1276cd6a7de82968e8", "parent": "https://github.com/apache/cassandra/commit/3b198d148546d2cd124a64a42353430ee176559c", "message": "fix NPE when debug logging is enabled and dropped CF is present\npatch by fantayeneh gizaw; reviewed by jbellis for CASSANDRA-3021\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.8@1157225 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_165", "file": [{"additions": 2, "raw_url": "https://github.com/apache/cassandra/raw/fb05f27d5196bde59cf15d1276cd6a7de82968e8/CHANGES.txt", "blob_url": "https://github.com/apache/cassandra/blob/fb05f27d5196bde59cf15d1276cd6a7de82968e8/CHANGES.txt", "sha": "9efe2b0d94b9e54fb1ba9fe8e491ccf1bfb38f2d", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=fb05f27d5196bde59cf15d1276cd6a7de82968e8", "patch": "@@ -3,6 +3,8 @@\n  * include column name in validation failure exceptions (CASSANDRA-2849)\n  * make sure truncate clears out the commitlog so replay won't re-\n    populate with truncated data (CASSANDRA-2950)\n+ * fix NPE when debug logging is enabled and dropped CF is present\n+   in a commitlog segment (CASSANDRA-3021)\n \n \n 0.8.4", "filename": "CHANGES.txt"}, {"additions": 1, "raw_url": "https://github.com/apache/cassandra/raw/fb05f27d5196bde59cf15d1276cd6a7de82968e8/src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java", "blob_url": "https://github.com/apache/cassandra/blob/fb05f27d5196bde59cf15d1276cd6a7de82968e8/src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java", "sha": "1fc2ad7c3890eea1e960a089a41eae343b3a2f2e", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java?ref=fb05f27d5196bde59cf15d1276cd6a7de82968e8", "patch": "@@ -212,7 +212,7 @@ String dirtyString()\n         for (Integer cfId : cfLastWrite.keySet())\n         {\n             CFMetaData m = DatabaseDescriptor.getCFMetaData(cfId);\n-            sb.append(m == null ? m.cfName : \"<deleted>\").append(\" (\").append(cfId).append(\"), \");\n+            sb.append(m == null ? \"<deleted>\" : m.cfName).append(\" (\").append(cfId).append(\"), \");\n         }\n         return sb.toString();\n     }", "filename": "src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/e05fb25675bf20567b530ed862116d0607841ad1", "parent": "https://github.com/apache/cassandra/commit/253b34fe967f4aefa3d4798f31caebafd14fbc90", "message": "Log a message when a streaming action for an unkown session is received\ninstead of NPE.\nPatch by brandonwilliams, reviewed by jbellis for CASSANDRA-2377\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.7@1085074 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_166", "file": [{"additions": 5, "raw_url": "https://github.com/apache/cassandra/raw/e05fb25675bf20567b530ed862116d0607841ad1/src/java/org/apache/cassandra/streaming/StreamReplyVerbHandler.java", "blob_url": "https://github.com/apache/cassandra/blob/e05fb25675bf20567b530ed862116d0607841ad1/src/java/org/apache/cassandra/streaming/StreamReplyVerbHandler.java", "sha": "4094ec834279e91e92e391791ebc2a24db99b7da", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamReplyVerbHandler.java?ref=e05fb25675bf20567b530ed862116d0607841ad1", "patch": "@@ -46,6 +46,11 @@ public void doVerb(Message message, String id)\n             StreamReply reply = StreamReply.serializer.deserialize(new DataInputStream(bufIn));\n             logger.debug(\"Received StreamReply {}\", reply);\n             StreamOutSession session = StreamOutSession.get(message.getFrom(), reply.sessionId);\n+            if (session == null)\n+            {\n+                logger.debug(\"Received stream action \" + reply.action + \" for an unknown session from \" + message.getFrom());\n+                return;\n+            }\n \n             switch (reply.action)\n             {", "filename": "src/java/org/apache/cassandra/streaming/StreamReplyVerbHandler.java"}], "repo": "cassandra"}, {"commit": "https://github.com/apache/cassandra/commit/46e5f23e1bb6cf374d0d89ecff40c84a1824b998", "parent": "https://github.com/apache/cassandra/commit/3678daa0be6e88821b3a61e20c78493d6f119449", "message": "fix NPE caused by getToken on endpoint that isn't member of ring yet.  add assert to prevent in the future.\npatch by jbellis for CASSANDRA-522\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/cassandra/trunk@832268 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "cassandra_167", "file": [{"additions": 4, "raw_url": "https://github.com/apache/cassandra/raw/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/dht/BootStrapper.java", "blob_url": "https://github.com/apache/cassandra/blob/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/dht/BootStrapper.java", "sha": "7f50e2ff952a2a1bfba09e882d4c89401dfe75fc", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/dht/BootStrapper.java?ref=46e5f23e1bb6cf374d0d89ecff40c84a1824b998", "patch": "@@ -110,7 +110,7 @@ public void run()\n         }).start();\n     }\n \n-    public static void guessTokenIfNotSpecified() throws IOException\n+    public static void guessTokenIfNotSpecified(TokenMetadata metadata) throws IOException\n     {\n         StorageService ss = StorageService.instance();\n         StorageLoadBalancer slb = StorageLoadBalancer.instance();\n@@ -122,8 +122,10 @@ public static void guessTokenIfNotSpecified() throws IOException\n         {\n             double maxLoad = 0;\n             InetAddress maxEndpoint = null;\n-            for (Map.Entry<InetAddress,Double> entry : slb.getLoadInfo().entrySet())\n+            for (Map.Entry<InetAddress, Double> entry : slb.getLoadInfo().entrySet())\n             {\n+                if (!metadata.isMember(entry.getKey()))\n+                    continue;\n                 if (maxEndpoint == null || entry.getValue() > maxLoad)\n                 {\n                     maxEndpoint = entry.getKey();", "filename": "src/java/org/apache/cassandra/dht/BootStrapper.java"}, {"additions": 3, "raw_url": "https://github.com/apache/cassandra/raw/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/locator/TokenMetadata.java", "blob_url": "https://github.com/apache/cassandra/blob/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/locator/TokenMetadata.java", "sha": "837e1190ddad70b5922decd3ffbe10db85cd5351", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/locator/TokenMetadata.java?ref=46e5f23e1bb6cf374d0d89ecff40c84a1824b998", "patch": "@@ -114,7 +114,8 @@ public void update(Token token, InetAddress endpoint)\n     public Token getToken(InetAddress endpoint)\n     {\n         assert endpoint != null;\n-\n+        assert isMember(endpoint); // don't want to return nulls\n+        \n         lock.readLock().lock();\n         try\n         {\n@@ -126,7 +127,7 @@ public Token getToken(InetAddress endpoint)\n         }\n     }\n     \n-    public boolean isKnownEndPoint(InetAddress endpoint)\n+    public boolean isMember(InetAddress endpoint)\n     {\n         assert endpoint != null;\n ", "filename": "src/java/org/apache/cassandra/locator/TokenMetadata.java"}, {"additions": 9, "raw_url": "https://github.com/apache/cassandra/raw/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/service/StorageService.java", "blob_url": "https://github.com/apache/cassandra/blob/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/service/StorageService.java", "sha": "d39f7c4647b84b07a48d5355bbfbdace18c31411", "changes": 17, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=46e5f23e1bb6cf374d0d89ecff40c84a1824b998", "patch": "@@ -272,7 +272,7 @@ public void start() throws IOException\n         {\n             logger_.info(\"Starting in bootstrap mode (first, sleeping to get load information)\");\n             Gossiper.instance().addApplicationState(MODE, new ApplicationState(MODE_MOVING));\n-            BootStrapper.guessTokenIfNotSpecified();\n+            BootStrapper.guessTokenIfNotSpecified(tokenMetadata_);\n             new BootStrapper(replicationStrategy_, FBUtilities.getLocalAddress(), getLocalToken(), tokenMetadata_).startBootstrap(); // handles token update\n         }\n         else\n@@ -373,20 +373,21 @@ public void onChange(InetAddress endpoint, EndPointState epState)\n             Token newToken = getPartitioner().getTokenFactory().fromString(nodeIdState.getState());\n             if (logger_.isDebugEnabled())\n               logger_.debug(\"CHANGE IN STATE FOR \" + endpoint + \" - has token \" + nodeIdState.getState());\n-            Token oldToken = tokenMetadata_.getToken(endpoint);\n \n-            if ( oldToken != null )\n+            if (tokenMetadata_.isMember(endpoint))\n             {\n+                Token oldToken = tokenMetadata_.getToken(endpoint);\n+\n                 /*\n                  * If oldToken equals the newToken then the node had crashed\n                  * and is coming back up again. If oldToken is not equal to\n                  * the newToken this means that the node is being relocated\n                  * to another position in the ring.\n                 */\n-                if ( !oldToken.equals(newToken) )\n+                if (!oldToken.equals(newToken))\n                 {\n                     if (logger_.isDebugEnabled())\n-                      logger_.debug(\"Relocation for endpoint \" + endpoint);\n+                        logger_.debug(\"Relocation for endpoint \" + endpoint);\n                     updateForeignToken(newToken, endpoint);\n                 }\n                 else\n@@ -396,7 +397,7 @@ public void onChange(InetAddress endpoint, EndPointState epState)\n                      * Deliver the hints that we have for this endpoint.\n                     */\n                     if (logger_.isDebugEnabled())\n-                      logger_.debug(\"Sending hinted data to \" + endpoint);\n+                        logger_.debug(\"Sending hinted data to \" + endpoint);\n                     deliverHints(endpoint);\n                 }\n             }\n@@ -414,10 +415,10 @@ public void onChange(InetAddress endpoint, EndPointState epState)\n              * If we are here and if this node is UP and already has an entry\n              * in the token map. It means that the node was behind a network partition.\n             */\n-            if ( epState.isAlive() && tokenMetadata_.isKnownEndPoint(endpoint) )\n+            if (epState.isAlive() && tokenMetadata_.isMember(endpoint))\n             {\n                 if (logger_.isDebugEnabled())\n-                  logger_.debug(\"InetAddress \" + endpoint + \" just recovered from a partition. Sending hinted data.\");\n+                    logger_.debug(\"InetAddress \" + endpoint + \" just recovered from a partition. Sending hinted data.\");\n                 deliverHints(endpoint);\n             }\n         }", "filename": "src/java/org/apache/cassandra/service/StorageService.java"}], "repo": "cassandra"}]
