[
    {
        "repo": "incubator-brooklyn",
        "message": "Try to fix NPE in TomcatAutoScalerPolicyTest\n\n- JavaSoftwareProcessSshDriver.getJmxPort throwing NPE",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/4f081abb4bb0456056210e44d568d14e6376085e",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/87a850e0bee8398fbc98789d956a9afeb37e4d46",
        "bug_id": "incubator-brooklyn_1",
        "file": [
            {
                "sha": "e799967eb57d3039bccb9fa088dfe27c24d562c2",
                "filename": "software/base/src/main/java/brooklyn/entity/java/JavaSoftwareProcessSshDriver.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/4f081abb4bb0456056210e44d568d14e6376085e/software/base/src/main/java/brooklyn/entity/java/JavaSoftwareProcessSshDriver.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/4f081abb4bb0456056210e44d568d14e6376085e/software/base/src/main/java/brooklyn/entity/java/JavaSoftwareProcessSshDriver.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/java/JavaSoftwareProcessSshDriver.java?ref=4f081abb4bb0456056210e44d568d14e6376085e",
                "patch": "@@ -206,7 +206,7 @@ protected Map getCustomJavaSystemProperties() {\n \n     @Override\n     public Integer getJmxPort() {\n-        return !isJmxEnabled() ? -1 : entity.getAttribute(UsesJmx.JMX_PORT);\n+        return !isJmxEnabled() ? Integer.valueOf(-1) : entity.getAttribute(UsesJmx.JMX_PORT);\n     }\n \n     @Deprecated",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Avoid NPE in REST api deserialisation\n\n- motivated by NPE in TaskSummary<init> for tags",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/2d11d2bf78877444a228cc9d162968b28df7e9ea",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/e994a3ae462d9454347e102dd977d71be6f8aed6",
        "bug_id": "incubator-brooklyn_2",
        "file": [
            {
                "sha": "68cc1b8f36e4fe55f6b466cc24f8518791789695",
                "filename": "usage/rest-api/src/main/java/brooklyn/rest/domain/AccessSummary.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/AccessSummary.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/AccessSummary.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/rest-api/src/main/java/brooklyn/rest/domain/AccessSummary.java?ref=2d11d2bf78877444a228cc9d162968b28df7e9ea",
                "patch": "@@ -38,7 +38,7 @@ public AccessSummary(\n             @JsonProperty(\"links\") Map<String, URI> links\n     ) {\n         this.locationProvisioningAllowed = locationProvisioningAllowed;\n-        this.links = links == null ? ImmutableMap.<String, URI>of() : ImmutableMap.copyOf(links);\n+        this.links = (links == null) ? ImmutableMap.<String, URI>of() : ImmutableMap.copyOf(links);\n       }\n \n     public boolean isLocationProvisioningAllowed() {",
                "deletions": 1
            },
            {
                "sha": "fa06b82cd6a8ee0488be5d367aa3652332271449",
                "filename": "usage/rest-api/src/main/java/brooklyn/rest/domain/ApplicationSummary.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/ApplicationSummary.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/ApplicationSummary.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/rest-api/src/main/java/brooklyn/rest/domain/ApplicationSummary.java?ref=2d11d2bf78877444a228cc9d162968b28df7e9ea",
                "patch": "@@ -53,7 +53,7 @@ public ApplicationSummary(\n         this.id = id;\n         this.spec = checkNotNull(spec, \"spec\");\n         this.status = checkNotNull(status, \"status\");\n-        this.links = links == null ? ImmutableMap.<String, URI>of() : ImmutableMap.copyOf(links);\n+        this.links = (links == null) ? ImmutableMap.<String, URI>of() : ImmutableMap.copyOf(links);\n     }\n \n     @Override",
                "deletions": 1
            },
            {
                "sha": "61e54a8b719074089d659230d3baef42f66e9f73",
                "filename": "usage/rest-api/src/main/java/brooklyn/rest/domain/CatalogItemSummary.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/CatalogItemSummary.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/CatalogItemSummary.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/rest-api/src/main/java/brooklyn/rest/domain/CatalogItemSummary.java?ref=2d11d2bf78877444a228cc9d162968b28df7e9ea",
                "patch": "@@ -68,7 +68,7 @@ public CatalogItemSummary(\n         this.planYaml = planYaml;\n         this.description = description;\n         this.iconUrl = iconUrl;\n-        this.links = ImmutableMap.copyOf(links);\n+        this.links = (links == null) ? ImmutableMap.<String, URI>of() : ImmutableMap.copyOf(links);\n     }\n     \n     @Override",
                "deletions": 1
            },
            {
                "sha": "1625095ce119de8c4341a15b1cc8ee3f786b07f9",
                "filename": "usage/rest-api/src/main/java/brooklyn/rest/domain/CatalogPolicySummary.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/CatalogPolicySummary.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/CatalogPolicySummary.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/rest-api/src/main/java/brooklyn/rest/domain/CatalogPolicySummary.java?ref=2d11d2bf78877444a228cc9d162968b28df7e9ea",
                "patch": "@@ -24,6 +24,8 @@\n \n import org.codehaus.jackson.annotate.JsonProperty;\n \n+import com.google.common.collect.ImmutableSet;\n+\n public class CatalogPolicySummary extends CatalogItemSummary {\n \n     private final Set<PolicyConfigSummary> config;\n@@ -40,7 +42,7 @@ public CatalogPolicySummary(\n         ) {\n         super(id, name, type, type, type, planYaml, description, iconUrl, links);\n         // TODO expose config from policies\n-        this.config = config;\n+        this.config = (config == null) ? ImmutableSet.<PolicyConfigSummary>of() : config;\n     }\n     \n     public Set<PolicyConfigSummary> getConfig() {",
                "deletions": 1
            },
            {
                "sha": "4911d9ac484d7ea68841a810bd3151162d48ec3c",
                "filename": "usage/rest-api/src/main/java/brooklyn/rest/domain/EntityConfigSummary.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/EntityConfigSummary.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/EntityConfigSummary.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/rest-api/src/main/java/brooklyn/rest/domain/EntityConfigSummary.java?ref=2d11d2bf78877444a228cc9d162968b28df7e9ea",
                "patch": "@@ -45,7 +45,7 @@ public EntityConfigSummary(\n       @JsonProperty(\"links\") Map<String, URI> links\n   ) {\n     super(name, type, description, defaultValue, reconfigurable, label, priority, possibleValues);\n-    this.links = links!=null ? ImmutableMap.copyOf(links) : null;\n+    this.links = (links == null) ? ImmutableMap.<String, URI>of() : ImmutableMap.copyOf(links);\n   }\n \n   public EntityConfigSummary(ConfigKey<?> config, String label, Double priority, Map<String, URI> links) {",
                "deletions": 1
            },
            {
                "sha": "6ec84e584f7f69667407fd1d7f0fde83b17d29b3",
                "filename": "usage/rest-api/src/main/java/brooklyn/rest/domain/EntitySummary.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/EntitySummary.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/EntitySummary.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/rest-api/src/main/java/brooklyn/rest/domain/EntitySummary.java?ref=2d11d2bf78877444a228cc9d162968b28df7e9ea",
                "patch": "@@ -40,7 +40,7 @@ public EntitySummary(\n     this.type = type;\n     this.id = id;\n     this.name = name;\n-    this.links = links == null ? ImmutableMap.<String, URI>of() : ImmutableMap.copyOf(links);\n+    this.links = (links == null) ? ImmutableMap.<String, URI>of() : ImmutableMap.copyOf(links);\n   }\n \n   public String getType() {",
                "deletions": 1
            },
            {
                "sha": "33c6f3ee225052e41365a72997441ed1016b2a78",
                "filename": "usage/rest-api/src/main/java/brooklyn/rest/domain/HighAvailabilitySummary.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/HighAvailabilitySummary.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/HighAvailabilitySummary.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/rest-api/src/main/java/brooklyn/rest/domain/HighAvailabilitySummary.java?ref=2d11d2bf78877444a228cc9d162968b28df7e9ea",
                "patch": "@@ -23,6 +23,7 @@\n \n import org.codehaus.jackson.annotate.JsonProperty;\n \n+import com.google.common.base.Objects;\n import com.google.common.collect.ImmutableMap;\n \n public class HighAvailabilitySummary {\n@@ -70,12 +71,12 @@ public Long getRemoteTimestamp() {\n             \n             @Override\n             public boolean equals(Object o) {\n-              return (o instanceof HaNodeSummary) && nodeId.equals(((HaNodeSummary)o).getNodeId());\n+              return (o instanceof HaNodeSummary) && Objects.equal(nodeId, ((HaNodeSummary)o).getNodeId());\n             }\n \n             @Override\n             public int hashCode() {\n-              return nodeId != null ? nodeId.hashCode() : 0;\n+              return Objects.hashCode(nodeId);\n             }\n \n             @Override\n@@ -100,8 +101,8 @@ public HighAvailabilitySummary(\n     ) {\n       this.ownId = ownId;\n       this.masterId = masterId;\n-      this.nodes = nodes;\n-      this.links = links == null ? ImmutableMap.<String, URI>of() : ImmutableMap.copyOf(links);\n+      this.nodes = (nodes == null) ? ImmutableMap.<String, HaNodeSummary>of() : nodes;\n+      this.links = (links == null) ? ImmutableMap.<String, URI>of() : ImmutableMap.copyOf(links);\n     }\n \n     public String getOwnId() {",
                "deletions": 4
            },
            {
                "sha": "cf828b80a3cc333761bbe10e091d19baa19cf25d",
                "filename": "usage/rest-api/src/main/java/brooklyn/rest/domain/LinkWithMetadata.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/LinkWithMetadata.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/LinkWithMetadata.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/rest-api/src/main/java/brooklyn/rest/domain/LinkWithMetadata.java?ref=2d11d2bf78877444a228cc9d162968b28df7e9ea",
                "patch": "@@ -39,7 +39,7 @@ public LinkWithMetadata(\n             @JsonProperty(\"link\") String link, \n             @Nullable @JsonProperty(\"metadata\") Map<String,?> metadata) {\n         this.link = link;\n-        this.metadata = metadata==null ? ImmutableMap.<String,Object>of() : ImmutableMap.<String,Object>copyOf(metadata);\n+        this.metadata = (metadata == null) ? ImmutableMap.<String,Object>of() : ImmutableMap.<String,Object>copyOf(metadata);\n     }\n     \n     public String getLink() {",
                "deletions": 1
            },
            {
                "sha": "935ad01fea2a21e503cbdc93317722ae44d03be8",
                "filename": "usage/rest-api/src/main/java/brooklyn/rest/domain/LocationSummary.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/LocationSummary.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/LocationSummary.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/rest-api/src/main/java/brooklyn/rest/domain/LocationSummary.java?ref=2d11d2bf78877444a228cc9d162968b28df7e9ea",
                "patch": "@@ -52,7 +52,7 @@ public LocationSummary(\n     super(name, spec, config);\n     this.id = checkNotNull(id);\n     this.type = type;\n-    this.links = ImmutableMap.copyOf(links);\n+    this.links = (links == null) ? ImmutableMap.<String, URI>of() : ImmutableMap.copyOf(links);\n   }\n \n   @Override",
                "deletions": 1
            },
            {
                "sha": "0088d9f30c963c8c0f22fb0a6bcc1f8a741733f5",
                "filename": "usage/rest-api/src/main/java/brooklyn/rest/domain/PolicyConfigSummary.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/PolicyConfigSummary.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/PolicyConfigSummary.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/rest-api/src/main/java/brooklyn/rest/domain/PolicyConfigSummary.java?ref=2d11d2bf78877444a228cc9d162968b28df7e9ea",
                "patch": "@@ -41,7 +41,7 @@ public PolicyConfigSummary(\n       @JsonProperty(\"links\") Map<String, URI> links\n   ) {\n     super(name, type, description, defaultValue, reconfigurable, null, null, null);\n-    this.links = links!=null ? ImmutableMap.copyOf(links) : null;\n+    this.links = (links == null) ? ImmutableMap.<String, URI>of() : ImmutableMap.copyOf(links);\n   }\n   \n   @Override",
                "deletions": 1
            },
            {
                "sha": "42c670e3926edab81ae463011930d41172a0e089",
                "filename": "usage/rest-api/src/main/java/brooklyn/rest/domain/PolicySummary.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/PolicySummary.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/PolicySummary.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/rest-api/src/main/java/brooklyn/rest/domain/PolicySummary.java?ref=2d11d2bf78877444a228cc9d162968b28df7e9ea",
                "patch": "@@ -19,6 +19,7 @@\n package brooklyn.rest.domain;\n \n import com.google.common.collect.ImmutableMap;\n+\n import org.codehaus.jackson.annotate.JsonProperty;\n \n import java.net.URI;\n@@ -40,7 +41,7 @@ public PolicySummary(\n     this.id = id;\n     this.name = name;\n     this.state = state;\n-    this.links = ImmutableMap.copyOf(links);\n+    this.links = (links == null) ? ImmutableMap.<String, URI>of() : ImmutableMap.copyOf(links);\n   }\n \n   @Override",
                "deletions": 1
            },
            {
                "sha": "a6cdb4d779996ab211b31bd9911479c07780355c",
                "filename": "usage/rest-api/src/main/java/brooklyn/rest/domain/SensorSummary.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/SensorSummary.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/SensorSummary.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/rest-api/src/main/java/brooklyn/rest/domain/SensorSummary.java?ref=2d11d2bf78877444a228cc9d162968b28df7e9ea",
                "patch": "@@ -45,7 +45,7 @@ public SensorSummary(\n     this.name = name;\n     this.type = type;\n     this.description = description;\n-    this.links = links != null ? ImmutableMap.copyOf(links) : null;\n+    this.links = (links == null) ? ImmutableMap.<String, URI>of() : ImmutableMap.copyOf(links);\n   }\n \n   @Override",
                "deletions": 1
            },
            {
                "sha": "a69aa5642d68b2539c1d78e03348f001e19d3249",
                "filename": "usage/rest-api/src/main/java/brooklyn/rest/domain/TaskSummary.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/TaskSummary.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/TaskSummary.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/rest-api/src/main/java/brooklyn/rest/domain/TaskSummary.java?ref=2d11d2bf78877444a228cc9d162968b28df7e9ea",
                "patch": "@@ -94,7 +94,7 @@ public TaskSummary(\n     this.description = description;\n     this.entityId = entityId;\n     this.entityDisplayName = entityDisplayName;\n-    this.tags = ImmutableList.<Object>copyOf(tags);\n+    this.tags = (tags == null) ? ImmutableList.of() : ImmutableList.<Object>copyOf(tags);\n     this.submitTimeUtc = submitTimeUtc;\n     this.startTimeUtc = startTimeUtc;\n     this.endTimeUtc = endTimeUtc;\n@@ -108,7 +108,7 @@ public TaskSummary(\n     this.submittedByTask = submittedByTask;\n     this.detailedStatus = detailedStatus;\n     this.streams = streams;\n-    this.links = ImmutableMap.copyOf(links);\n+    this.links = (links == null) ? ImmutableMap.<String, URI>of() : ImmutableMap.copyOf(links);\n }\n \n ",
                "deletions": 2
            },
            {
                "sha": "64dfe97655561841548cd9095f387e19815d570a",
                "filename": "usage/rest-api/src/main/java/brooklyn/rest/domain/UsageStatistic.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/UsageStatistic.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/UsageStatistic.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/rest-api/src/main/java/brooklyn/rest/domain/UsageStatistic.java?ref=2d11d2bf78877444a228cc9d162968b28df7e9ea",
                "patch": "@@ -21,7 +21,9 @@\n import org.codehaus.jackson.annotate.JsonProperty;\n \n import com.google.common.base.Objects;\n+import com.google.common.collect.ImmutableMap;\n \n+import java.net.URI;\n import java.util.Map;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n@@ -48,7 +50,7 @@ public UsageStatistic(@JsonProperty(\"status\") Status status, @JsonProperty(\"id\")\n         this.start = start;\n         this.end = end;\n         this.duration = duration;\n-        this.metadata = checkNotNull(metadata, \"metadata\");\n+        this.metadata = (metadata == null) ? ImmutableMap.<String, String>of() : metadata;\n     }\n \n     public Status getStatus() {",
                "deletions": 1
            },
            {
                "sha": "c26a987401d9c7d461e7158b0158fa4ffc7b0374",
                "filename": "usage/rest-api/src/main/java/brooklyn/rest/domain/UsageStatistics.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/UsageStatistics.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/2d11d2bf78877444a228cc9d162968b28df7e9ea/usage/rest-api/src/main/java/brooklyn/rest/domain/UsageStatistics.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/rest-api/src/main/java/brooklyn/rest/domain/UsageStatistics.java?ref=2d11d2bf78877444a228cc9d162968b28df7e9ea",
                "patch": "@@ -43,7 +43,7 @@ public UsageStatistics(\n             @JsonProperty(\"links\") Map<String, URI> links\n     ) {\n         this.statistics = statistics == null ? ImmutableList.<UsageStatistic>of() : ImmutableList.copyOf(statistics);\n-        this.links = links == null ? ImmutableMap.<String, URI>of() : ImmutableMap.copyOf(links);\n+        this.links = (links == null) ? ImmutableMap.<String, URI>of() : ImmutableMap.copyOf(links);\n       }\n \n     public List<UsageStatistic> getStatistics() {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "JmxSupport: improve NPE message when jmxPort null\n\nWas previously throwing NPE converting the null attribute value to\nan `int`.",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/cda838a41265ef45eebd1854ac688bef979a4c96",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/2655dca06ad871068494180b31ef01964ac7fab6",
        "bug_id": "incubator-brooklyn_3",
        "file": [
            {
                "sha": "f10cf8d591eb14eeb2df85f4b0c4fbfedb43dd71",
                "filename": "software/base/src/main/java/brooklyn/entity/java/JmxSupport.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/cda838a41265ef45eebd1854ac688bef979a4c96/software/base/src/main/java/brooklyn/entity/java/JmxSupport.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/cda838a41265ef45eebd1854ac688bef979a4c96/software/base/src/main/java/brooklyn/entity/java/JmxSupport.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/java/JmxSupport.java?ref=cda838a41265ef45eebd1854ac688bef979a4c96",
                "patch": "@@ -273,7 +273,8 @@ public String getJmxAgentJarUrl() {\n     public void applyJmxJavaSystemProperties(MutableMap.Builder<String,Object> result) {\n         if (!isJmx()) return ;\n \n-        HostAndPort jmx = BrooklynAccessUtils.getBrooklynAccessibleAddress(entity, entity.getAttribute(JMX_PORT));\n+        Integer jmxPort = Preconditions.checkNotNull(entity.getAttribute(JMX_PORT), \"jmx port must not be null for %s\", entity);\n+        HostAndPort jmx = BrooklynAccessUtils.getBrooklynAccessibleAddress(entity, jmxPort);\n         Integer jmxRemotePort = getEntity().getAttribute(JMX_PORT);\n         String hostName = jmx.getHostText();\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Rebind NPE fixes",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/3db2ca4b4ce8ca8c013db145a08c619f8dbbe12c",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/e6235d9bcfce0829e3160302a568422c1429c5ae",
        "bug_id": "incubator-brooklyn_4",
        "file": [
            {
                "sha": "ab046d58e47845f466b554c93ce0c69ea2ce3ba9",
                "filename": "api/src/main/java/org/apache/brooklyn/api/internal/AbstractBrooklynObjectSpec.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/3db2ca4b4ce8ca8c013db145a08c619f8dbbe12c/api/src/main/java/org/apache/brooklyn/api/internal/AbstractBrooklynObjectSpec.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/3db2ca4b4ce8ca8c013db145a08c619f8dbbe12c/api/src/main/java/org/apache/brooklyn/api/internal/AbstractBrooklynObjectSpec.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/api/src/main/java/org/apache/brooklyn/api/internal/AbstractBrooklynObjectSpec.java?ref=3db2ca4b4ce8ca8c013db145a08c619f8dbbe12c",
                "patch": "@@ -136,7 +136,12 @@ public final String getCatalogItemId() {\n \n     /** A list of configuration options that the entity supports. */\n     public final List<SpecParameter<?>> getParameters() {\n-        return ImmutableList.copyOf(parameters);\n+        //Could be null after rebind\n+        if (parameters != null) {\n+            return ImmutableList.copyOf(parameters);\n+        } else {\n+            return ImmutableList.of();\n+        }\n     }\n \n     // TODO Duplicates method in BasicEntityTypeRegistry and InternalEntityFactory.isNewStyleEntity",
                "deletions": 1
            },
            {
                "sha": "2e591858dd0aa8bb5da5838e392fc61177b85d15",
                "filename": "core/src/main/java/org/apache/brooklyn/core/config/BasicConfigKey.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/3db2ca4b4ce8ca8c013db145a08c619f8dbbe12c/core/src/main/java/org/apache/brooklyn/core/config/BasicConfigKey.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/3db2ca4b4ce8ca8c013db145a08c619f8dbbe12c/core/src/main/java/org/apache/brooklyn/core/config/BasicConfigKey.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/org/apache/brooklyn/core/config/BasicConfigKey.java?ref=3db2ca4b4ce8ca8c013db145a08c619f8dbbe12c",
                "patch": "@@ -217,7 +217,12 @@ public ConfigInheritance getInheritance() {\n     /** @see ConfigKey#getConstraint() */\n     @Override @Nonnull\n     public Predicate<? super T> getConstraint() {\n-        return constraint;\n+        // Could be null after rebinding\n+        if (constraint != null) {\n+            return constraint;\n+        } else {\n+            return Predicates.alwaysTrue();\n+        }\n     }\n \n     /** @see ConfigKey#isValueValid(T) */",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Merge pull request #208 from pveentjer/npe-followthesun\n\nFixed the NPE problems with the pools",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/4c9ea0f9bd9b3e43ce052867677b9b83629863b2",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/a0ebe0b281323ae20cd40f4e204af9c3a4d40bfd",
        "bug_id": "incubator-brooklyn_5",
        "file": [
            {
                "sha": "01869e0be4d2ab8bc4ddc592cf66c50a3c842762",
                "filename": "policy/src/main/java/brooklyn/policy/followthesun/FollowTheSunPool.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/4c9ea0f9bd9b3e43ce052867677b9b83629863b2/policy/src/main/java/brooklyn/policy/followthesun/FollowTheSunPool.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/4c9ea0f9bd9b3e43ce052867677b9b83629863b2/policy/src/main/java/brooklyn/policy/followthesun/FollowTheSunPool.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/policy/src/main/java/brooklyn/policy/followthesun/FollowTheSunPool.java?ref=4c9ea0f9bd9b3e43ce052867677b9b83629863b2",
                "patch": "@@ -155,7 +155,7 @@ public Integer resize(Integer desiredSize) {\n \n     private void onContainerAdded(Entity newContainer) {\n         subscribe(newContainer, Startable.SERVICE_UP, eventHandler);\n-        if (!(newContainer instanceof Startable) || newContainer.getAttribute(Startable.SERVICE_UP)) {\n+        if (!(newContainer instanceof Startable) || Boolean.TRUE.equals(newContainer.getAttribute(Startable.SERVICE_UP))) {\n             onContainerUp(newContainer);\n         }\n     }",
                "deletions": 1
            },
            {
                "sha": "7dc3ac7b2cf11126d771256a2bbdb5ac3193c1dc",
                "filename": "policy/src/main/java/brooklyn/policy/loadbalancing/BalanceableWorkerPool.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/4c9ea0f9bd9b3e43ce052867677b9b83629863b2/policy/src/main/java/brooklyn/policy/loadbalancing/BalanceableWorkerPool.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/4c9ea0f9bd9b3e43ce052867677b9b83629863b2/policy/src/main/java/brooklyn/policy/loadbalancing/BalanceableWorkerPool.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/policy/src/main/java/brooklyn/policy/loadbalancing/BalanceableWorkerPool.java?ref=4c9ea0f9bd9b3e43ce052867677b9b83629863b2",
                "patch": "@@ -168,7 +168,7 @@ public Integer resize(Integer desiredSize) {\n     \n     private void onContainerAdded(BalanceableContainer<?> newContainer) {\n         subscribe(newContainer, Startable.SERVICE_UP, eventHandler);\n-        if (!(newContainer instanceof Startable) || newContainer.getAttribute(Startable.SERVICE_UP)) {\n+        if (!(newContainer instanceof Startable) || Boolean.TRUE.equals(newContainer.getAttribute(Startable.SERVICE_UP))) {\n             onContainerUp(newContainer);\n         }\n     }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Avoid NullPointerException when removing primary from a replica set\n\ngetPrimary() checks all members but the entity that /was/ the primary\nhas been removed from the group by the time this log statement is reached.\nIf the set hasn't chosen a new primary and the sensors haven't updated\nthis causes a NullPointerException.",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/96be90c1933b7e658e01f4a7195b4dcd6a320a04",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/9a5c0ee7385e56a5a4eb66cac5e6dd858c693c4f",
        "bug_id": "incubator-brooklyn_6",
        "file": [
            {
                "sha": "cdfaeb565e739db4107ce4bf3b40e16dca76f971",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/96be90c1933b7e658e01f4a7195b4dcd6a320a04/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/96be90c1933b7e658e01f4a7195b4dcd6a320a04/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetImpl.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetImpl.java?ref=96be90c1933b7e658e01f4a7195b4dcd6a320a04",
                "patch": "@@ -221,9 +221,8 @@ public void run() {\n     }\n \n     private void serverRemoved(MongoDBServer server) {\n-        if (LOG.isInfoEnabled())\n-            LOG.info(\"Informing {} primary {} of removal of member: {}\",\n-                    new Object[]{getReplicaSetName(), getPrimary().getId(), server});\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"Scheduling removal of member from {}: {}\", getReplicaSetName(), server);\n         executor.submit(removeMember(server));\n     }\n ",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Merge pull request #139 from aledsage/ActiveMQ-jmx-npe-fix\n\nActive mq jmx npe fix",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/b80c623bff3890f20a527ca419d48beb0a0fc0c1",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/ce1e04eac49096e67c3e9cd3e492339b6cecfabf",
        "bug_id": "incubator-brooklyn_7",
        "file": [
            {
                "sha": "50c3d2a57e2cb8566b30623df2dddaf53ebfc606",
                "filename": "core/src/main/java/brooklyn/event/adapter/AbstractPollHelper.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/b80c623bff3890f20a527ca419d48beb0a0fc0c1/core/src/main/java/brooklyn/event/adapter/AbstractPollHelper.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/b80c623bff3890f20a527ca419d48beb0a0fc0c1/core/src/main/java/brooklyn/event/adapter/AbstractPollHelper.groovy",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/event/adapter/AbstractPollHelper.groovy?ref=b80c623bff3890f20a527ca419d48beb0a0fc0c1",
                "patch": "@@ -18,7 +18,7 @@ public abstract class AbstractPollHelper {\n \n     final Map<AttributeSensor, Closure> polledSensors = [:]\n \n-    boolean lastWasSuccessful = false;\n+    boolean lastWasSuccessful = true;\n \n     AbstractSensorAdapter adapter;\n     public AbstractPollHelper(AbstractSensorAdapter adapter) {",
                "deletions": 1
            },
            {
                "sha": "d76be3d89288544b15a8948a14dd9d0ca0c8e2ec",
                "filename": "core/src/main/java/brooklyn/event/adapter/JmxAttributeAdapter.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/b80c623bff3890f20a527ca419d48beb0a0fc0c1/core/src/main/java/brooklyn/event/adapter/JmxAttributeAdapter.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/b80c623bff3890f20a527ca419d48beb0a0fc0c1/core/src/main/java/brooklyn/event/adapter/JmxAttributeAdapter.groovy",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/event/adapter/JmxAttributeAdapter.groovy?ref=b80c623bff3890f20a527ca419d48beb0a0fc0c1",
                "patch": "@@ -67,7 +67,9 @@ public class JmxAttributeAdapter extends AbstractSensorAdapter {\n         super.activateAdapter();\n         if (adapter.checkObjectNameExists(objectName)) {\n             if (log.isDebugEnabled()) \n-                log.debug(\"Initial value of $entity ${adapter.helper.url} JMX is: \"+adapter.helper.getAttribute(objectName, attributeName));\n+                log.debug(\"For $entity ${adapter.helper.url}, MBean ${objectName} exists\");\n+        } else {\n+            log.warn(\"For $entity ${adapter.helper.url}, MBean ${objectName} does not yet exist; continuing...\");\n         }\n     }\n }",
                "deletions": 1
            },
            {
                "sha": "a3e21d3f756233c2599bf40cc0c9dda8a111c914",
                "filename": "core/src/main/java/brooklyn/event/adapter/JmxHelper.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/b80c623bff3890f20a527ca419d48beb0a0fc0c1/core/src/main/java/brooklyn/event/adapter/JmxHelper.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/b80c623bff3890f20a527ca419d48beb0a0fc0c1/core/src/main/java/brooklyn/event/adapter/JmxHelper.groovy",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/event/adapter/JmxHelper.groovy?ref=b80c623bff3890f20a527ca419d48beb0a0fc0c1",
                "patch": "@@ -159,14 +159,14 @@ public class JmxHelper {\n \n         triedConnecting = true\n         if (connector) connector.close()\n-        JMXServiceURL url = new JMXServiceURL(url)\n+        JMXServiceURL serviceUrl = new JMXServiceURL(url)\n         Map env = [:]\n         if (user && password) {\n             String[] creds = [user, password]\n             env.put(JMXConnector.CREDENTIALS, creds);\n         }\n         try {\n-            connector = JMXConnectorFactory.connect(url, env);\n+            connector = JMXConnectorFactory.connect(serviceUrl, env);\n         } catch (NullPointerException npe) {\n             //some software -- eg WSO2 -- will throw an NPE exception if the JMX connection can't be created, instead of an IOException.\n             //this is a break of contract with the JMXConnectorFactory.connect method, so this code verifies if the NPE is",
                "deletions": 2
            },
            {
                "sha": "1993950e39df301d427a597b683d6d86c73151b9",
                "filename": "software/messaging/src/main/java/brooklyn/entity/messaging/jms/JMSBroker.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/b80c623bff3890f20a527ca419d48beb0a0fc0c1/software/messaging/src/main/java/brooklyn/entity/messaging/jms/JMSBroker.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/b80c623bff3890f20a527ca419d48beb0a0fc0c1/software/messaging/src/main/java/brooklyn/entity/messaging/jms/JMSBroker.groovy",
                "status": "modified",
                "changes": 30,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/messaging/src/main/java/brooklyn/entity/messaging/jms/JMSBroker.groovy?ref=b80c623bff3890f20a527ca419d48beb0a0fc0c1",
                "patch": "@@ -1,22 +1,24 @@\n package brooklyn.entity.messaging.jms\n \n-import groovy.lang.MetaClass\n \n import java.util.Collection\n import java.util.Map\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory\n+\n import brooklyn.entity.Entity\n import brooklyn.entity.basic.AbstractEntity\n-import brooklyn.entity.basic.Lifecycle\n import brooklyn.entity.basic.SoftwareProcessEntity\n import brooklyn.entity.messaging.MessageBroker\n import brooklyn.entity.messaging.Queue\n import brooklyn.entity.messaging.Topic\n-import brooklyn.event.adapter.SensorRegistry\n \n import com.google.common.base.Preconditions\n \n public abstract class JMSBroker<Q extends JMSDestination & Queue, T extends JMSDestination & Topic> extends SoftwareProcessEntity implements MessageBroker {\n+    private static final Logger log = LoggerFactory.getLogger(JMSBroker.class)\n+    \n     Collection<String> queueNames;\n     Collection<String> topicNames;\n     Map<String, Q> queues = [:];\n@@ -54,9 +56,25 @@ public abstract class JMSBroker<Q extends JMSDestination & Queue, T extends JMSD\n \n     @Override\n     public void preStop() {\n-        queues.each { String name, JMSDestination queue -> queue.destroy() }\n-        topics.each { String name, JMSDestination topic -> topic.destroy() }\n-        super.preStop()\n+        // If can't delete queues, continue trying to stop.\n+        // (e.g. in CI have seen activemq \"BrokerStoppedException\" thrown in queue.destroy()). \n+        try {\n+            queues.each { String name, JMSDestination queue -> queue.destroy() }\n+        } catch (InterruptedException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            log.warn(\"Error deleting queues from broker \"+this+\"; continuing with stop...\", e);\n+        }\n+        \n+        try {\n+            topics.each { String name, JMSDestination topic -> topic.destroy() }\n+        } catch (InterruptedException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            log.warn(\"Error deleting topics from broker \"+this+\"; continuing with stop...\", e);\n+        }\n+        \n+        super.preStop();\n     }\n \t\n     /** TODO make this an effector */",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Merge pull request #1111 from grkvlt/fix/cassandra-npe\n\nFix NPE when CASSANDRA_CLUSTER_NODES not set",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/fe305a86a6482d4e9edf54514ce7450fd273da5c",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/7d8d891f2f862187ed4a550a04f7b6bc6a41d127",
        "bug_id": "incubator-brooklyn_8",
        "file": [
            {
                "sha": "d5e449a41ffc1db43b46b0d7b0f7c6f3a4cca4e7",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fe305a86a6482d4e9edf54514ce7450fd273da5c/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fe305a86a6482d4e9edf54514ce7450fd273da5c/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java?ref=fe305a86a6482d4e9edf54514ce7450fd273da5c",
                "patch": "@@ -399,7 +399,8 @@ public void update() {\n                 setAttribute(HOSTNAME, upNode.get().getAttribute(Attributes.HOSTNAME));\n                 setAttribute(THRIFT_PORT, upNode.get().getAttribute(CassandraNode.THRIFT_PORT));\n                 \n-                Set<String> oldNodes = MutableSet.copyOf(getAttribute(CASSANDRA_CLUSTER_NODES));\n+                List<String> currentNodes = getAttribute(CASSANDRA_CLUSTER_NODES);\n+                Set<String> oldNodes = (currentNodes != null) ? MutableSet.copyOf(currentNodes) : MutableSet.<String>of();\n                 Set<String> newNodes = MutableSet.<String>of();\n                 for (Entity member: getMembers()) {\n                     if (member.getAttribute(SERVICE_UP)==Boolean.TRUE) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Merge pull request #1039 from aledsage/fix/NPE-jclouds-toMetadataRecord\n\nAvoid NPE in toMetadataRecord for jclouds machine",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/6bcb62dc1079ff6b8698a4e6c3a28c00017c68cb",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/7f9dd9e6f28a717479bb1cbb25831b4353d29047",
        "bug_id": "incubator-brooklyn_9",
        "file": [
            {
                "sha": "282a37fdd723c5c9d63cf22d68da0a1597b85fc5",
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsSshMachineLocation.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6bcb62dc1079ff6b8698a4e6c3a28c00017c68cb/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsSshMachineLocation.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6bcb62dc1079ff6b8698a4e6c3a28c00017c68cb/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsSshMachineLocation.java",
                "status": "modified",
                "changes": 14,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsSshMachineLocation.java?ref=6bcb62dc1079ff6b8698a4e6c3a28c00017c68cb",
                "patch": "@@ -5,6 +5,7 @@\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.TimeUnit;\n@@ -15,7 +16,9 @@\n import org.jclouds.compute.ComputeServiceContext;\n import org.jclouds.compute.callables.RunScriptOnNode;\n import org.jclouds.compute.domain.ExecResponse;\n+import org.jclouds.compute.domain.Hardware;\n import org.jclouds.compute.domain.NodeMetadata;\n+import org.jclouds.compute.domain.Processor;\n import org.jclouds.compute.options.RunScriptOptions;\n import org.jclouds.domain.LoginCredentials;\n import org.jclouds.scriptbuilder.domain.InterpretableStatement;\n@@ -209,16 +212,19 @@ public OsDetails getOsDetails() {\n     \n     @Override\n     public Map<String, String> toMetadataRecord() {\n+        Hardware hardware = node.getHardware();\n+        List<? extends Processor> processors = (hardware != null) ? hardware.getProcessors() : null;\n+        \n         ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();\n         builder.putAll(super.toMetadataRecord());\n         putIfNotNull(builder, \"provider\", getParent().getProvider());\n         putIfNotNull(builder, \"account\", getParent().getIdentity());\n         putIfNotNull(builder, \"serverId\", node.getProviderId());\n         putIfNotNull(builder, \"imageId\", node.getImageId());\n-        putIfNotNull(builder, \"instanceTypeName\", node.getHardware().getName());\n-        putIfNotNull(builder, \"instanceTypeId\", node.getHardware().getProviderId());\n-        putIfNotNull(builder, \"ram\", \"\" + node.getHardware().getRam());\n-        putIfNotNull(builder, \"cpus\", \"\" + node.getHardware().getProcessors().size());\n+        putIfNotNull(builder, \"instanceTypeName\", (hardware != null ? hardware.getName() : null));\n+        putIfNotNull(builder, \"instanceTypeId\", (hardware != null ? hardware.getProviderId() : null));\n+        putIfNotNull(builder, \"ram\", \"\" + (hardware != null ? hardware.getRam() : null));\n+        putIfNotNull(builder, \"cpus\", \"\" + (processors != null ? processors.size() : null));\n         putIfNotNull(builder, \"osName\", getOsDetails().getName());\n         putIfNotNull(builder, \"osArch\", getOsDetails().getArch());\n         putIfNotNull(builder, \"64bit\", getOsDetails().is64bit() ? \"true\" : \"false\");",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "MachineEntity.exec: better NPE if no driver",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/590bf741d3c4472542e5713e706ae4bdd2192ddd",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/70ed0e1e965f284dc84fbe3c1b107071791bdde6",
        "bug_id": "incubator-brooklyn_10",
        "file": [
            {
                "sha": "87bbc720249808f7419d811e7ac93490e8d9fed5",
                "filename": "software/base/src/main/java/org/apache/brooklyn/entity/machine/MachineEntityImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/590bf741d3c4472542e5713e706ae4bdd2192ddd/software/base/src/main/java/org/apache/brooklyn/entity/machine/MachineEntityImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/590bf741d3c4472542e5713e706ae4bdd2192ddd/software/base/src/main/java/org/apache/brooklyn/entity/machine/MachineEntityImpl.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/org/apache/brooklyn/entity/machine/MachineEntityImpl.java?ref=590bf741d3c4472542e5713e706ae4bdd2192ddd",
                "patch": "@@ -156,8 +156,12 @@ public String execCommand(String command) {\n \n     @Override\n     public String execCommandTimeout(String command, Duration timeout) {\n+        AbstractSoftwareProcessSshDriver driver = (AbstractSoftwareProcessSshDriver) getDriver();\n+        if (driver == null) {\n+            throw new NullPointerException(\"No driver for \"+this);\n+        }\n         ProcessTaskWrapper<String> task = SshEffectorTasks.ssh(command)\n-                .environmentVariables(((AbstractSoftwareProcessSshDriver) getDriver()).getShellEnvironment())\n+                .environmentVariables(driver.getShellEnvironment())\n                 .requiringZeroAndReturningStdout()\n                 .machine(getMachine())\n                 .summary(command)",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Merge pull request #930 from aledsage/fix/NPE-from-ConfigKeys-fields-strike2\n\nFix: NPE from ConfigKeys fields",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/fef452b9e05940b83d479866efed78427478fd0e",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/2c41e0bf3e99cfbe5bfce6f55b1d20c0795f2c6b",
        "bug_id": "incubator-brooklyn_11",
        "file": [
            {
                "sha": "08a1963a6674263072102842296a80a1b35e3cdc",
                "filename": "core/src/main/java/brooklyn/config/ConfigUtils.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/config/ConfigUtils.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/config/ConfigUtils.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/config/ConfigUtils.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "patch": "@@ -92,19 +92,19 @@ public static BrooklynProperties filterForPrefixAndStrip(Map<String,?> propertie\n     @SuppressWarnings(\"rawtypes\")\n     public static Set<HasConfigKey<?>> getStaticKeysOnClass(Class<?> type) {\n         Set<HasConfigKey<?>> result = new LinkedHashSet<ConfigKey.HasConfigKey<?>>();\n-        try {\n-            for (Field f: type.getFields()) {\n+        for (Field f: type.getFields()) {\n+            try {\n                 if ((f.getModifiers() & Modifier.STATIC)==0)\n                     continue;\n                 if (ConfigKey.class.isAssignableFrom(f.getType()))\n                     result.add(new WrappedConfigKey((ConfigKey<?>) f.get(null)));\n                 else if (HasConfigKey.class.isAssignableFrom(f.getType()))\n                     result.add((HasConfigKey<?>) f.get(null));\n+            } catch (Exception e) {\n+                log.error(\"Error retrieving config key for field \"+f+\" on class \"+type+\"; rethrowing\", e);\n+                throw Exceptions.propagate(e);\n             }\n-        } catch (Exception e) {\n-            throw Exceptions.propagate(e);\n         }\n         return Collections.unmodifiableSet(result);\n     }\n-\n }",
                "deletions": 5
            },
            {
                "sha": "6af95be92773598e35274f57ae13a63d05a65c51",
                "filename": "core/src/main/java/brooklyn/entity/basic/Attributes.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/entity/basic/Attributes.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/entity/basic/Attributes.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/basic/Attributes.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "patch": "@@ -28,7 +28,7 @@\n     /**\n      * Application information sensors.\n      * \n-     * @deprecated since 0.5; see {@link ConfigKeys#SUGGESTED_VERSION}\n+     * @deprecated since 0.5; see {@link BrooklynConfigKeys#SUGGESTED_VERSION}\n      */\n     @Deprecated\n     AttributeSensor<String> VERSION = Sensors.newStringSensor( \"version\", \"Version information\");",
                "deletions": 1
            },
            {
                "sha": "f4a27a7a4921369b651e823e92de197bffa63c64",
                "filename": "core/src/main/java/brooklyn/entity/basic/ConfigKeys.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/entity/basic/ConfigKeys.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/entity/basic/ConfigKeys.java",
                "status": "modified",
                "changes": 40,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/basic/ConfigKeys.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "patch": "@@ -136,44 +136,4 @@\n     public static ConfigKey<Boolean> newBooleanConfigKey(String name, String description, Boolean defaultValue) {\n         return newConfigKey(Boolean.class, name, description, defaultValue);\n     }\n-\n-    /* Key definitions were deprecated here in 0.6.0 because they introduce nasty circular dependencies on the\n-     * methods in this class, causing some final fields to be null when they are accessed. \n-     */\n-\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> BROOKLYN_DATA_DIR = BrooklynConfigKeys.BROOKLYN_DATA_DIR;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SUGGESTED_VERSION = BrooklynConfigKeys.SUGGESTED_VERSION;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SUGGESTED_INSTALL_DIR = BrooklynConfigKeys.SUGGESTED_INSTALL_DIR;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SUGGESTED_RUN_DIR = BrooklynConfigKeys.SUGGESTED_RUN_DIR;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Boolean> START_LATCH = BrooklynConfigKeys.START_LATCH;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Boolean> INSTALL_LATCH = BrooklynConfigKeys.INSTALL_LATCH;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Boolean> CUSTOMIZE_LATCH = BrooklynConfigKeys.CUSTOMIZE_LATCH;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Boolean> LAUNCH_LATCH = BrooklynConfigKeys.LAUNCH_LATCH;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Integer> START_TIMEOUT = BrooklynConfigKeys.START_TIMEOUT;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_TOOL_CLASS = BrooklynConfigKeys.SSH_TOOL_CLASS;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_HOST = BrooklynConfigKeys.SSH_CONFIG_HOST;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Integer> SSH_CONFIG_PORT = BrooklynConfigKeys.SSH_CONFIG_PORT;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_USER = BrooklynConfigKeys.SSH_CONFIG_USER;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_PASSWORD = BrooklynConfigKeys.SSH_CONFIG_PASSWORD;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_SCRIPT_DIR = BrooklynConfigKeys.SSH_CONFIG_SCRIPT_DIR;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_SCRIPT_HEADER = BrooklynConfigKeys.SSH_CONFIG_SCRIPT_HEADER;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_DIRECT_HEADER = BrooklynConfigKeys.SSH_CONFIG_DIRECT_HEADER;\n-\n }",
                "deletions": 40
            },
            {
                "sha": "40c20b919763cabf2551d035a31e69d6d8a09424",
                "filename": "core/src/main/java/brooklyn/entity/drivers/downloads/DownloadSubstituters.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/entity/drivers/downloads/DownloadSubstituters.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/entity/drivers/downloads/DownloadSubstituters.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/drivers/downloads/DownloadSubstituters.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "patch": "@@ -13,7 +13,7 @@\n \n import brooklyn.entity.Entity;\n import brooklyn.entity.basic.Attributes;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.entity.drivers.EntityDriver;\n import brooklyn.entity.drivers.downloads.DownloadResolverManager.DownloadRequirement;\n import brooklyn.entity.drivers.downloads.DownloadResolverManager.DownloadTargets;\n@@ -92,14 +92,14 @@ public static String substitute(DownloadRequirement req, String basevalue) {\n         Entity entity = driver.getEntity();\n         String type = entity.getEntityType().getName();\n         String simpleType = type.substring(type.lastIndexOf(\".\")+1);\n-        String version = entity.getConfig(ConfigKeys.SUGGESTED_VERSION);\n+        String version = entity.getConfig(BrooklynConfigKeys.SUGGESTED_VERSION);\n         \n         String v2 = entity.getAttribute(Attributes.VERSION);\n         if (v2!=null && !v2.equals(version)) {\n             // Attributes.VERSION was deprecated in 0.5.0 but was preferred here without warning in 0.6.0\n             // now warn on use of deprecated key when it is different\n             LOG.warn(\"Using deprecated key \"+Attributes.VERSION+\", value \"+v2+\", which differs from the \" +\n-            \t\t\"preferred key \"+ConfigKeys.SUGGESTED_VERSION+\", value \"+version+\"; old key will be retired shortly!\");\n+            \t\t\"preferred key \"+BrooklynConfigKeys.SUGGESTED_VERSION+\", value \"+version+\"; old key will be retired shortly!\");\n             version = v2;\n         }\n         ",
                "deletions": 3
            },
            {
                "sha": "1b8df65dae914ddd952b818d255127373af6e718",
                "filename": "core/src/main/java/brooklyn/location/basic/ByonLocationResolver.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/location/basic/ByonLocationResolver.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/location/basic/ByonLocationResolver.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/ByonLocationResolver.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "patch": "@@ -13,7 +13,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.location.LocationRegistry;\n import brooklyn.location.LocationResolver;\n import brooklyn.location.LocationSpec;\n@@ -135,7 +135,7 @@ public void init(ManagementContext managementContext) {\n         if (user != null) flags.put(\"user\", user);\n         if (name != null) flags.put(\"name\", name);\n         if (registry != null) {\n-            String brooklynDataDir = (String) registry.getProperties().get(ConfigKeys.BROOKLYN_DATA_DIR.getName());\n+            String brooklynDataDir = (String) registry.getProperties().get(BrooklynConfigKeys.BROOKLYN_DATA_DIR.getName());\n             if (brooklynDataDir != null && brooklynDataDir.length() > 0) {\n                 flags.put(\"localTempDir\", new File(brooklynDataDir));\n             }",
                "deletions": 2
            },
            {
                "sha": "ebd0d7636ae686baa7aec6400bba64af49bb322b",
                "filename": "core/src/main/java/brooklyn/location/basic/LocalhostResolver.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/location/basic/LocalhostResolver.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/location/basic/LocalhostResolver.java",
                "status": "modified",
                "changes": 7,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/LocalhostResolver.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "patch": "@@ -12,9 +12,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import brooklyn.config.ConfigKey;\n-import brooklyn.config.ConfigUtils;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.location.Location;\n import brooklyn.location.LocationRegistry;\n import brooklyn.location.LocationResolver;\n@@ -24,7 +22,6 @@\n import brooklyn.util.text.KeyValueParser;\n \n import com.google.common.collect.ImmutableSet;\n-import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n \n /**\n@@ -96,7 +93,7 @@ protected Location newLocationFromString(String spec, brooklyn.location.Location\n             flags.put(\"name\", namePart);\n         }\n         if (registry != null) {\n-            String brooklynDataDir = (String) registry.getProperties().get(ConfigKeys.BROOKLYN_DATA_DIR.getName());\n+            String brooklynDataDir = (String) registry.getProperties().get(BrooklynConfigKeys.BROOKLYN_DATA_DIR.getName());\n             if (brooklynDataDir != null && brooklynDataDir.length() > 0) {\n                 flags.put(\"localTempDir\", new File(brooklynDataDir));\n             }",
                "deletions": 5
            },
            {
                "sha": "e4d13d8fe85a0da239ea512ca9d6ca3f4b460bb2",
                "filename": "core/src/test/java/brooklyn/entity/drivers/downloads/BasicDownloadsRegistryTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/core/src/test/java/brooklyn/entity/drivers/downloads/BasicDownloadsRegistryTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/core/src/test/java/brooklyn/entity/drivers/downloads/BasicDownloadsRegistryTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/entity/drivers/downloads/BasicDownloadsRegistryTest.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "patch": "@@ -10,7 +10,7 @@\n import brooklyn.config.BrooklynProperties;\n import brooklyn.entity.basic.ApplicationBuilder;\n import brooklyn.entity.basic.Attributes;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.entity.basic.Entities;\n import brooklyn.entity.proxying.EntitySpec;\n import brooklyn.location.Location;\n@@ -89,7 +89,7 @@ public void testReturnsLocalRepoThenOverrideThenAttributeValThenCloudsoftUrlThen\n         brooklynProperties.put(\"brooklyn.downloads.all.url\", \"http://fromprops/${version}.allprimary\");\n         brooklynProperties.put(\"brooklyn.downloads.all.fallbackurl\", \"http://fromfallback/${version}.allfallback\");\n         entity.setAttribute(Attributes.DOWNLOAD_URL, \"http://fromattrib/${version}.default\");\n-        entity.setConfig(ConfigKeys.SUGGESTED_VERSION, \"myversion\");\n+        entity.setConfig(BrooklynConfigKeys.SUGGESTED_VERSION, \"myversion\");\n         String expectedFilename = \"myversion.allprimary\";\n \n         String expectedLocalRepo = String.format(\"file://$HOME/.brooklyn/repository/%s/%s/%s\", \"TestEntity\", \"myversion\", expectedFilename);",
                "deletions": 2
            },
            {
                "sha": "f169bee621189aa2186d80cd49946c45e34503ce",
                "filename": "core/src/test/java/brooklyn/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/core/src/test/java/brooklyn/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/core/src/test/java/brooklyn/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "patch": "@@ -10,7 +10,7 @@\n \n import brooklyn.config.BrooklynProperties;\n import brooklyn.entity.basic.ApplicationBuilder;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.entity.basic.Entities;\n import brooklyn.entity.drivers.downloads.DownloadResolverManager.DownloadRequirement;\n import brooklyn.entity.drivers.downloads.DownloadResolverManager.DownloadTargets;\n@@ -79,7 +79,7 @@ public void testReturnsGlobalFallbackUrl() throws Exception {\n     @Test\n     public void testSubstitutionsAppliedToFallbackUrl() throws Exception {\n         brooklynProperties.put(\"brooklyn.downloads.all.fallbackurl\", \"version=${version}\");\n-        entity.setConfig(ConfigKeys.SUGGESTED_VERSION, \"myversion\");\n+        entity.setConfig(BrooklynConfigKeys.SUGGESTED_VERSION, \"myversion\");\n         assertResolves(ImmutableList.<String>of(), ImmutableList.of(\"version=myversion\"));\n     }\n \n@@ -93,15 +93,15 @@ public void testReturnsGlobalFallbackUrlAsLast() throws Exception {\n     @Test\n     public void testReturnsGlobalUrlWithEntitySubstituions() throws Exception {\n         brooklynProperties.put(\"brooklyn.downloads.all.url\", \"version=${version}\");\n-        entity.setConfig(ConfigKeys.SUGGESTED_VERSION, \"myversion\");\n+        entity.setConfig(BrooklynConfigKeys.SUGGESTED_VERSION, \"myversion\");\n         assertResolves(\"version=myversion\");\n     }\n     \n     @Test\n     public void testEntitySpecificUrlOverridesGlobalUrl() throws Exception {\n         brooklynProperties.put(\"brooklyn.downloads.all.url\", \"version=${version}\");\n         brooklynProperties.put(\"brooklyn.downloads.entity.TestEntity.url\", \"overridden,version=${version}\");\n-        entity.setConfig(ConfigKeys.SUGGESTED_VERSION, \"myversion\");\n+        entity.setConfig(BrooklynConfigKeys.SUGGESTED_VERSION, \"myversion\");\n         assertResolves(\"overridden,version=myversion\", \"version=myversion\");\n     }\n     ",
                "deletions": 4
            },
            {
                "sha": "e9ac5b600cbd96274ed6a9a4f27a727e4874b6b4",
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsByonLocationResolver.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsByonLocationResolver.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsByonLocationResolver.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsByonLocationResolver.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "patch": "@@ -12,7 +12,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.location.LocationRegistry;\n import brooklyn.location.LocationResolver;\n import brooklyn.location.LocationSpec;\n@@ -147,7 +147,7 @@ public void init(ManagementContext managementContext) {\n         if (user != null) flags.put(\"user\", user);\n         if (name != null) flags.put(\"name\", name);\n         if (registry != null) {\n-            String brooklynDataDir = (String) registry.getProperties().get(ConfigKeys.BROOKLYN_DATA_DIR.getName());\n+            String brooklynDataDir = (String) registry.getProperties().get(BrooklynConfigKeys.BROOKLYN_DATA_DIR.getName());\n             if (brooklynDataDir != null && brooklynDataDir.length() > 0) {\n                 flags.put(\"localTempDir\", new File(brooklynDataDir));\n             }",
                "deletions": 2
            },
            {
                "sha": "a3cef2ce3ffe8ec88bb3be62b4c8c370cbaa21ab",
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsPropertiesFromBrooklynProperties.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsPropertiesFromBrooklynProperties.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsPropertiesFromBrooklynProperties.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsPropertiesFromBrooklynProperties.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "patch": "@@ -7,7 +7,7 @@\n import org.slf4j.LoggerFactory;\n \n import brooklyn.config.ConfigUtils;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.location.basic.DeprecatedKeysMappingBuilder;\n import brooklyn.location.basic.LocationPropertiesFromBrooklynProperties;\n \n@@ -74,7 +74,7 @@\n         jcloudsProperties.putAll(transformDeprecated(getProviderOrApiJcloudsProperties(providerOrApi, properties)));\n         jcloudsProperties.putAll(transformDeprecated(getRegionJcloudsProperties(providerOrApi, regionName, properties)));\n         if (!Strings.isNullOrEmpty(namedLocation)) jcloudsProperties.putAll(transformDeprecated(getNamedJcloudsProperties(namedLocation, properties)));\n-        String brooklynDataDir = (String) properties.get(ConfigKeys.BROOKLYN_DATA_DIR.getName());\n+        String brooklynDataDir = (String) properties.get(BrooklynConfigKeys.BROOKLYN_DATA_DIR.getName());\n         if (brooklynDataDir != null && brooklynDataDir.length() > 0) {\n             jcloudsProperties.put(\"localTempDir\", new File(brooklynDataDir));\n         }",
                "deletions": 2
            },
            {
                "sha": "1adc1ee0948935095c2056ec67f77797f7c71083",
                "filename": "software/base/src/main/java/brooklyn/entity/basic/AbstractSoftwareProcessDriver.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/software/base/src/main/java/brooklyn/entity/basic/AbstractSoftwareProcessDriver.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/software/base/src/main/java/brooklyn/entity/basic/AbstractSoftwareProcessDriver.java",
                "status": "modified",
                "changes": 12,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/basic/AbstractSoftwareProcessDriver.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "patch": "@@ -56,17 +56,17 @@ public void rebind() {\n \t@Override\n \tpublic void start() {\n \t    DynamicTasks.queue(\"install\", new Runnable() { public void run() {\n-            waitForConfigKey(ConfigKeys.INSTALL_LATCH);\n+            waitForConfigKey(BrooklynConfigKeys.INSTALL_LATCH);\n             install();\n         }});\n         \n \t    DynamicTasks.queue(\"customize\", new Runnable() { public void run() {\n-            waitForConfigKey(ConfigKeys.CUSTOMIZE_LATCH);\n+            waitForConfigKey(BrooklynConfigKeys.CUSTOMIZE_LATCH);\n             customize();\n         }});\n         \n \t    DynamicTasks.queue(\"launch\", new Runnable() { public void run() {\n-            waitForConfigKey(ConfigKeys.LAUNCH_LATCH);\n+            waitForConfigKey(BrooklynConfigKeys.LAUNCH_LATCH);\n             launch();\n         }});\n         \n@@ -113,9 +113,11 @@ public void restart() {\n         }});\n \t}\n \t\n-\tpublic EntityLocal getEntity() { return entity; } \n+\t@Override\n+    public EntityLocal getEntity() { return entity; } \n \n-\tpublic Location getLocation() { return location; } \n+\t@Override\n+    public Location getLocation() { return location; } \n     \n     public InputStream getResource(String url) {\n         return new ResourceUtils(entity).getResourceFromUrl(url);",
                "deletions": 5
            },
            {
                "sha": "b41bcad9694a57a5a38b1fe0917255d6bf0684bb",
                "filename": "software/base/src/main/java/brooklyn/entity/brooklynnode/BrooklynNode.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/software/base/src/main/java/brooklyn/entity/brooklynnode/BrooklynNode.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/software/base/src/main/java/brooklyn/entity/brooklynnode/BrooklynNode.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/brooklynnode/BrooklynNode.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "patch": "@@ -5,6 +5,7 @@\n import java.util.Map;\n \n import brooklyn.config.ConfigKey;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.entity.basic.ConfigKeys;\n import brooklyn.entity.basic.SoftwareProcess;\n import brooklyn.entity.java.UsesJava;\n@@ -31,7 +32,7 @@\n             Map.class, \"brooklynnode.copytorundir\", \"URLs of resources to be copied across to the server, giving the path they are to be copied to\", MutableMap.of());\n     \n     @SetFromFlag(\"version\")\n-    public static final ConfigKey<String> SUGGESTED_VERSION = ConfigKeys.newConfigKeyWithDefault(ConfigKeys.SUGGESTED_VERSION, \"0.6.0-SNAPSHOT\"); // BROOKLYN_VERSION\n+    public static final ConfigKey<String> SUGGESTED_VERSION = ConfigKeys.newConfigKeyWithDefault(BrooklynConfigKeys.SUGGESTED_VERSION, \"0.6.0-SNAPSHOT\"); // BROOKLYN_VERSION\n \n     // Takes presidence over downloadUrl, if non-null\n     @SetFromFlag(\"distroUploadUrl\")",
                "deletions": 1
            },
            {
                "sha": "84fdd44175812bd176981070400146c8c0830db6",
                "filename": "software/base/src/test/java/brooklyn/entity/basic/lifecycle/StartStopSshDriverTest.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/software/base/src/test/java/brooklyn/entity/basic/lifecycle/StartStopSshDriverTest.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/software/base/src/test/java/brooklyn/entity/basic/lifecycle/StartStopSshDriverTest.groovy",
                "status": "modified",
                "changes": 9,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/test/java/brooklyn/entity/basic/lifecycle/StartStopSshDriverTest.groovy?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "patch": "@@ -12,8 +12,7 @@ import org.testng.annotations.BeforeMethod\n import org.testng.annotations.Test\n \n import brooklyn.entity.basic.AbstractSoftwareProcessSshDriver\n-import brooklyn.entity.basic.ConfigKeys\n-import brooklyn.entity.basic.Entities;\n+import brooklyn.entity.basic.BrooklynConfigKeys\n import brooklyn.location.basic.SshMachineLocation\n import brooklyn.test.entity.TestApplication\n import brooklyn.test.entity.TestApplicationImpl\n@@ -22,7 +21,7 @@ import brooklyn.test.entity.TestEntityImpl\n import brooklyn.util.internal.ssh.SshTool\n import brooklyn.util.internal.ssh.cli.SshCliTool\n import brooklyn.util.internal.ssh.sshj.SshjTool\n-import brooklyn.util.stream.StreamGobbler;\n+import brooklyn.util.stream.StreamGobbler\n \n class StartStopSshDriverTest {\n \n@@ -69,7 +68,7 @@ class StartStopSshDriverTest {\n \n     @Test(groups = [ \"Integration\" ])\n     public void testSshScriptHeaderUsedWhenSpecified() {\n-        entity.setConfig(ConfigKeys.SSH_CONFIG_SCRIPT_HEADER, \"#!/bin/bash -e\\necho hello world\");\n+        entity.setConfig(BrooklynConfigKeys.SSH_CONFIG_SCRIPT_HEADER, \"#!/bin/bash -e\\necho hello world\");\n         ByteArrayOutputStream out = new ByteArrayOutputStream();\n         driver.execute(out: out, Arrays.asList(\"echo goodbye\"), \"test\");\n         String s = out.toString();\n@@ -81,7 +80,7 @@ class StartStopSshDriverTest {\n \n     @Test(groups = [ \"Integration\" ])\n     public void testSshCliPickedUpWhenSpecified() {\n-        entity.setConfig(ConfigKeys.SSH_TOOL_CLASS, SshCliTool.class.getName());\n+        entity.setConfig(BrooklynConfigKeys.SSH_TOOL_CLASS, SshCliTool.class.getName());\n         driver.execute(Arrays.asList(\"echo hi\"), \"test\");\n         assertTrue(sshMachineLocation.lastTool instanceof SshCliTool, \"expect CLI tool, got \"+\n                         (sshMachineLocation.lastTool!=null ? \"\"+sshMachineLocation.lastTool.getClass()+\":\" : \"\") + sshMachineLocation.lastTool);",
                "deletions": 5
            },
            {
                "sha": "1217468e22ea2ac72731d2b5cdd8fc8577f61e5a",
                "filename": "software/messaging/src/main/java/brooklyn/entity/messaging/kafka/KafkaCluster.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/software/messaging/src/main/java/brooklyn/entity/messaging/kafka/KafkaCluster.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/software/messaging/src/main/java/brooklyn/entity/messaging/kafka/KafkaCluster.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/messaging/src/main/java/brooklyn/entity/messaging/kafka/KafkaCluster.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "patch": "@@ -19,6 +19,7 @@\n import brooklyn.config.ConfigKey;\n import brooklyn.entity.Entity;\n import brooklyn.entity.Group;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.entity.basic.ConfigKeys;\n import brooklyn.entity.group.Cluster;\n import brooklyn.entity.group.DynamicCluster;\n@@ -30,7 +31,6 @@\n import brooklyn.event.AttributeSensor;\n import brooklyn.event.basic.BasicAttributeSensor;\n import brooklyn.event.basic.BasicAttributeSensorAndConfigKey;\n-import brooklyn.event.basic.BasicConfigKey;\n import brooklyn.util.flags.SetFromFlag;\n \n /**\n@@ -56,7 +56,7 @@\n public interface KafkaCluster extends Entity, Startable, Resizable, Group  {\n \n     @SetFromFlag(\"startTimeout\")\n-    ConfigKey<Integer> START_TIMEOUT = ConfigKeys.START_TIMEOUT;\n+    ConfigKey<Integer> START_TIMEOUT = BrooklynConfigKeys.START_TIMEOUT;\n \n     @SetFromFlag(\"initialSize\")\n     ConfigKey<Integer> INITIAL_SIZE = ConfigKeys.newConfigKeyWithDefault(Cluster.INITIAL_SIZE, 1);",
                "deletions": 2
            },
            {
                "sha": "12d43ef9ba9ae8b384bb3130d0319a0057c4f865",
                "filename": "usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "patch": "@@ -30,7 +30,7 @@\n import brooklyn.BrooklynVersion;\n import brooklyn.config.BrooklynServiceAttributes;\n import brooklyn.config.ConfigKey;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.launcher.config.CustomResourceLocator;\n import brooklyn.location.PortRange;\n import brooklyn.location.basic.LocalhostMachineProvisioningLocation;\n@@ -147,7 +147,7 @@ public BrooklynWebServer(Map flags, ManagementContext managementContext) {\n         if (!leftovers.isEmpty())\n             log.warn(\"Ignoring unknown flags \" + leftovers);\n         \n-        String brooklynDataDir = checkNotNull(managementContext.getConfig().getConfig(ConfigKeys.BROOKLYN_DATA_DIR));\n+        String brooklynDataDir = checkNotNull(managementContext.getConfig().getConfig(BrooklynConfigKeys.BROOKLYN_DATA_DIR));\n         this.webappTempDir = new File(brooklynDataDir, \"jetty\");\n     }\n ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Fix NPE in removeMember",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/c6e1bf3ffd0d682e760daef6d7d653221edcc0a7",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/2a18a79c7edb5c5497af74223bc4a24a9b81ca78",
        "bug_id": "incubator-brooklyn_12",
        "file": [
            {
                "sha": "14ccd258e243604a3b2e43943761a423ec476aa9",
                "filename": "core/src/main/java/brooklyn/entity/basic/AbstractGroupImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/c6e1bf3ffd0d682e760daef6d7d653221edcc0a7/core/src/main/java/brooklyn/entity/basic/AbstractGroupImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/c6e1bf3ffd0d682e760daef6d7d653221edcc0a7/core/src/main/java/brooklyn/entity/basic/AbstractGroupImpl.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/basic/AbstractGroupImpl.java?ref=c6e1bf3ffd0d682e760daef6d7d653221edcc0a7",
                "patch": "@@ -189,14 +189,16 @@ public boolean removeMember(final Entity member) {\n                     Optional<Entity> result = Iterables.tryFind(getChildren(), new Predicate<Entity>() {\n                         @Override\n                         public boolean apply(Entity input) {\n-                            return input.getConfig(DelegateEntity.DELEGATE_ENTITY).equals(member);\n+                            Entity delegate = input.getConfig(DelegateEntity.DELEGATE_ENTITY);\n+                            if (delegate == null) return false;\n+                            return delegate.equals(member);\n                         }\n                     });\n                     if (result.isPresent()) {\n                         Entity child = result.get();\n                         removeChild(child);\n                         Entities.unmanage(child);\n-                       }\n+                    }\n                 }\n \n                 getManagementSupport().getEntityChangeListener().onMembersChanged();",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "fix NPE",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/f3f93b79881aa576af935f2a83bb6d7cf84fbaac",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/37d2004fae1ee22cf207f2ff97e1986c36f66d31",
        "bug_id": "incubator-brooklyn_13",
        "file": [
            {
                "sha": "0d45cc8984c61b918c0c5ecc132b4ecb56f5fd15",
                "filename": "core/src/main/java/brooklyn/catalog/internal/BasicBrooklynCatalog.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/f3f93b79881aa576af935f2a83bb6d7cf84fbaac/core/src/main/java/brooklyn/catalog/internal/BasicBrooklynCatalog.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/f3f93b79881aa576af935f2a83bb6d7cf84fbaac/core/src/main/java/brooklyn/catalog/internal/BasicBrooklynCatalog.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/catalog/internal/BasicBrooklynCatalog.java?ref=f3f93b79881aa576af935f2a83bb6d7cf84fbaac",
                "patch": "@@ -104,6 +104,7 @@ public CatalogDo getCatalog() {\n     public <T,SpecT> CatalogItem<T,SpecT> getCatalogItem(Class<T> type, String id) {\n         if (id==null) return null;\n         CatalogItem<?,?> result = getCatalogItem(id);\n+        if (result==null) return null;\n         if (type==null || type.isAssignableFrom(result.getCatalogItemJavaType())) \n             return (CatalogItem<T,SpecT>)result;\n         return null;",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "JcloudsLocation: avoid NPE on user-creation\n\nIf jclouds node doesn\u2019t know its operatingSystem, then was\ngetting NPE. Guard against that, and default to unix.",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/2915b77a66dbf438c5c28b2028113453517a2c79",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/ecc62b040520da141e123264a44655d1f7113d15",
        "bug_id": "incubator-brooklyn_14",
        "file": [
            {
                "sha": "cafe1c7c54a9f7d12809c8d68f2864bf1fb78044",
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/2915b77a66dbf438c5c28b2028113453517a2c79/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/2915b77a66dbf438c5c28b2028113453517a2c79/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "status": "modified",
                "changes": 13,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java?ref=2915b77a66dbf438c5c28b2028113453517a2c79",
                "patch": "@@ -1242,10 +1242,15 @@ protected LoginCredentials createUser(ComputeService computeService, NodeMetadat\n         UserCreation userCreation = createUserStatements(image, config);\n         \n         if (!userCreation.statements.isEmpty()) {\n-            org.jclouds.compute.domain.OsFamily osFamily = node.getOperatingSystem().getFamily();\n-            org.jclouds.scriptbuilder.domain.OsFamily scriptOsFamily = (osFamily == org.jclouds.compute.domain.OsFamily.WINDOWS) \n-                    ? org.jclouds.scriptbuilder.domain.OsFamily.WINDOWS\n-                    : org.jclouds.scriptbuilder.domain.OsFamily.UNIX;\n+            // If unsure of OS family, default to unix for rendering statements.\n+            org.jclouds.scriptbuilder.domain.OsFamily scriptOsFamily;\n+            if (node.getOperatingSystem() == null) {\n+                scriptOsFamily = org.jclouds.scriptbuilder.domain.OsFamily.UNIX;\n+            } else {\n+                scriptOsFamily = (node.getOperatingSystem().getFamily() == org.jclouds.compute.domain.OsFamily.WINDOWS) \n+                        ? org.jclouds.scriptbuilder.domain.OsFamily.WINDOWS\n+                        : org.jclouds.scriptbuilder.domain.OsFamily.UNIX;\n+            }\n             \n             List<String> commands = Lists.newArrayList();\n             for (Statement statement : userCreation.statements) {",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Avoid NPE in MongoDBShardClusterImpl",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/7157b6d3d2d8ce0720a45d16ddb0e30052c0b2dc",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/28fc278ff4850c4125216d9aa3f8da6a2f91d5fa",
        "bug_id": "incubator-brooklyn_15",
        "file": [
            {
                "sha": "5b465caed57cbd7581641b699871047fb686dd0f",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/sharding/MongoDBShardClusterImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/7157b6d3d2d8ce0720a45d16ddb0e30052c0b2dc/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/sharding/MongoDBShardClusterImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/7157b6d3d2d8ce0720a45d16ddb0e30052c0b2dc/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/sharding/MongoDBShardClusterImpl.java",
                "status": "modified",
                "changes": 14,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/sharding/MongoDBShardClusterImpl.java?ref=7157b6d3d2d8ce0720a45d16ddb0e30052c0b2dc",
                "patch": "@@ -89,11 +89,15 @@ protected void addShards() {\n         for (Entity member : this.getMembers()) {\n             if (member.getAttribute(Startable.SERVICE_UP) && !addedMembers.contains(member)) {\n                 MongoDBServer primary = member.getAttribute(MongoDBReplicaSet.PRIMARY_ENTITY);\n-                String addr = Strings.removeFromStart(primary.getAttribute(MongoDBServer.MONGO_SERVER_ENDPOINT), \"http://\");\n-                String replicaSetURL = ((MongoDBReplicaSet) member).getName() + \"/\" + addr;\n-                LOG.info(\"Using {} to add shard URL {}...\", router, replicaSetURL);\n-                client.addShardToRouter(replicaSetURL);\n-                addedMembers.add(member);\n+                if (primary != null) {\n+                    String addr = Strings.removeFromStart(primary.getAttribute(MongoDBServer.MONGO_SERVER_ENDPOINT), \"http://\");\n+                    String replicaSetURL = ((MongoDBReplicaSet) member).getName() + \"/\" + addr;\n+                    LOG.info(\"Using {} to add shard URL {}...\", router, replicaSetURL);\n+                    client.addShardToRouter(replicaSetURL);\n+                    addedMembers.add(member);\n+                } else {\n+                    LOG.debug(\"{} not set for member {}); not adding shart to router {}\", new Object[] {MongoDBReplicaSet.PRIMARY_ENTITY, member, router});\n+                }\n             }\n         }\n     }",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "fix NPE in SensorResource",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/b11274a450a09ec9b540cc9b8a9340b7c597e4c2",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/96ff6f76989697223e55abbc0a5ecf43ee6c82e3",
        "bug_id": "incubator-brooklyn_16",
        "file": [
            {
                "sha": "fedd60dc9614620058012b4cbd7a61d9c43561fe",
                "filename": "usage/rest-server/src/main/java/brooklyn/rest/resources/SensorResource.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/b11274a450a09ec9b540cc9b8a9340b7c597e4c2/usage/rest-server/src/main/java/brooklyn/rest/resources/SensorResource.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/b11274a450a09ec9b540cc9b8a9340b7c597e4c2/usage/rest-server/src/main/java/brooklyn/rest/resources/SensorResource.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/rest-server/src/main/java/brooklyn/rest/resources/SensorResource.java?ref=b11274a450a09ec9b540cc9b8a9340b7c597e4c2",
                "patch": "@@ -124,7 +124,7 @@ public void delete(String application, String entityToken, String sensorName) {\n         final EntityLocal entity = brooklyn().getEntity(application, entityToken);\n         AttributeSensor<?> sensor = findSensor(entity, sensorName);\n         if (log.isDebugEnabled())\n-            log.debug(\"REST user \"+Entitlements.getEntitlementContext().user()+\" deleting sensor \"+sensorName);\n+            log.debug(\"REST user \"+Entitlements.getEntitlementContext()+\" deleting sensor \"+sensorName);\n         ((EntityInternal)entity).removeAttribute(sensor);\n     }\n     ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Fix Entities.waitForServiceUp to avoid NPE\n\n- Never return null for repeater\u2019s `until`; always return TRUE or FALSE.\n  Otherwise it will NPE.",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/79b2cac02edf21e3ada14f62c122dd091d797f1f",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/de1d8bcc0b4675842d9c531bf38fe5612cdfbd82",
        "bug_id": "incubator-brooklyn_17",
        "file": [
            {
                "sha": "51f86f67075c10f8489008ac25105e27364a8f67",
                "filename": "core/src/main/java/brooklyn/entity/basic/Entities.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/79b2cac02edf21e3ada14f62c122dd091d797f1f/core/src/main/java/brooklyn/entity/basic/Entities.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/79b2cac02edf21e3ada14f62c122dd091d797f1f/core/src/main/java/brooklyn/entity/basic/Entities.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/basic/Entities.java?ref=79b2cac02edf21e3ada14f62c122dd091d797f1f",
                "patch": "@@ -1022,7 +1022,7 @@ public static void waitForServiceUp(final Entity entity, Duration timeout) {\n                     .rethrowException().backoffTo(Duration.ONE_SECOND)\n                     .until(new Callable<Boolean>() {\n                         public Boolean call() {\n-                            return entity.getAttribute(Startable.SERVICE_UP);\n+                            return Boolean.TRUE.equals(entity.getAttribute(Startable.SERVICE_UP));\n                         }})\n                     .run()) {\n                 throw new IllegalStateException(\"Timeout waiting for SERVICE_UP from \"+entity);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "BROOKLYN-215: fix NPE when SshMachineLocation.port==null",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/e07f0ee16a71c932b9b8adfbd1bbf2bb5f7d19c6",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/289eb5b856d9c6eb0e9d18a3fa981eee59936c66",
        "bug_id": "incubator-brooklyn_18",
        "file": [
            {
                "sha": "b059858cbe986e73f940ddeb6b46c8e6dc950511",
                "filename": "brooklyn-server/core/src/main/java/org/apache/brooklyn/location/ssh/SshMachineLocation.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/e07f0ee16a71c932b9b8adfbd1bbf2bb5f7d19c6/brooklyn-server/core/src/main/java/org/apache/brooklyn/location/ssh/SshMachineLocation.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/e07f0ee16a71c932b9b8adfbd1bbf2bb5f7d19c6/brooklyn-server/core/src/main/java/org/apache/brooklyn/location/ssh/SshMachineLocation.java",
                "status": "modified",
                "changes": 19,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/brooklyn-server/core/src/main/java/org/apache/brooklyn/location/ssh/SshMachineLocation.java?ref=e07f0ee16a71c932b9b8adfbd1bbf2bb5f7d19c6",
                "patch": "@@ -89,6 +89,7 @@\n import org.apache.brooklyn.util.exceptions.Exceptions;\n import org.apache.brooklyn.util.exceptions.RuntimeInterruptedException;\n import org.apache.brooklyn.util.guava.KeyTransformingLoadingCache.KeyTransformingSameTypeLoadingCache;\n+import org.apache.brooklyn.util.guava.Maybe;\n import org.apache.brooklyn.util.pool.BasicPool;\n import org.apache.brooklyn.util.pool.Pool;\n import org.apache.brooklyn.util.ssh.BashCommands;\n@@ -389,7 +390,7 @@ public void onRemoval(RemovalNotification<Map<String, ?>, Pool<SshTool>> notific\n     private BasicPool<SshTool> buildPool(final Map<String, ?> properties) {\n         return BasicPool.<SshTool>builder()\n                 .name(getDisplayName()+\"@\"+address+\":\"+getPort()+\n-                        (config().getRaw(SSH_HOST).isPresent() ? \"(\"+getConfig(SSH_HOST)+\":\"+getConfig(SSH_PORT)+\")\" : \"\")+\n+                        (config().getRaw(SSH_HOST).isPresent() ? \"(\"+getConfig(SSH_HOST)+\":\"+getPort()+\")\" : \"\")+\n                         \":hash\"+System.identityHashCode(this))\n                 .supplier(new Supplier<SshTool>() {\n                         @Override public SshTool get() {\n@@ -550,7 +551,21 @@ public String getUser() {\n \n     /** port for SSHing */\n     public int getPort() {\n-        return getConfig(SshTool.PROP_PORT);\n+        // Prefer PROP_PORT (i.e. \"port\"). However if that is explicitly null or is not set, then see if\n+        // SSH_PORT (i.e. \"brooklyn.ssh.config.port\") has been set and use that.\n+        // If neither is set (or is explicitly set to null), then use the default PROP_PORT value.\n+        //\n+        // Note we don't just rely on config().get(PROP_PORT) returning the default, because we hit a rebind\n+        // error where the location's port configuration had been explicitly set to null.\n+        // See https://issues.apache.org/jira/browse/BROOKLYN-215\n+        \n+        Maybe<Object> raw = config().getRaw(SshTool.PROP_PORT);\n+        if (raw.orNull() == null && config().getRaw(SSH_PORT).orNull() != null) {\n+            return config().get(SSH_PORT);\n+        } else {\n+            Integer result = config().get(SshTool.PROP_PORT);\n+            return (result != null) ? result : SshTool.PROP_PORT.getDefaultValue();\n+        }\n     }\n \n     protected <T> T execSsh(final Map<String, ?> props, final Function<ShellTool, T> task) {",
                "deletions": 2
            },
            {
                "sha": "ec8cacba0971e76d1ce7d34b3a9de49616b50224",
                "filename": "brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindSshMachineLocationTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/e07f0ee16a71c932b9b8adfbd1bbf2bb5f7d19c6/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindSshMachineLocationTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/e07f0ee16a71c932b9b8adfbd1bbf2bb5f7d19c6/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindSshMachineLocationTest.java",
                "status": "modified",
                "changes": 20,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindSshMachineLocationTest.java?ref=e07f0ee16a71c932b9b8adfbd1bbf2bb5f7d19c6",
                "patch": "@@ -80,5 +80,23 @@ public void testMachineUsableAfterRebind() throws Exception {\n         \n         assertEquals(newChildLoc.execScript(Collections.<String,Object>emptyMap(), \"mysummary\", ImmutableList.of(\"true\")), 0);\n     }\n-    \n+\n+    // See https://issues.apache.org/jira/browse/BROOKLYN-215\n+    @Test(groups=\"Integration\")\n+    public void testRebindWhenPortNull() throws Exception {\n+        SshMachineLocation machine = origManagementContext.getLocationManager().createLocation(LocationSpec.create(SshMachineLocation.class)\n+                .configure(\"address\", \"localhost\")\n+                .configure(\"port\", null));\n+        FixedListMachineProvisioningLocation<?> byon = origManagementContext.getLocationManager().createLocation(LocationSpec.create(FixedListMachineProvisioningLocation.class)\n+                .configure(\"machines\", ImmutableList.of(machine)));\n+        origApp.start(ImmutableList.of(byon));\n+        LOG.info(\"Before rebind, machine=\"+machine.toString());\n+\n+        newApp = (TestApplication) rebind();\n+        \n+        FixedListMachineProvisioningLocation<?> newByon = (FixedListMachineProvisioningLocation<?>) Iterables.getOnlyElement(newApp.getLocations(), 0);\n+        SshMachineLocation newMachine = (SshMachineLocation) Iterables.get(newByon.getChildren(), 0);\n+        \n+        LOG.info(\"After rebind, machine=\"+newMachine.toString());\n+    }\n }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Dumpers.logUnserializableChains: handle NPEs",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/b02f56d1580d24897d248baa27a555253f1dea5c",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/03dc1f5486b6c733cf13e71b4bc93a08d8249518",
        "bug_id": "incubator-brooklyn_19",
        "file": [
            {
                "sha": "1071a4ba20bb77a3604e755ed340a24f7d15af74",
                "filename": "core/src/test/java/brooklyn/entity/rebind/Dumpers.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/b02f56d1580d24897d248baa27a555253f1dea5c/core/src/test/java/brooklyn/entity/rebind/Dumpers.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/b02f56d1580d24897d248baa27a555253f1dea5c/core/src/test/java/brooklyn/entity/rebind/Dumpers.java",
                "status": "modified",
                "changes": 12,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/entity/rebind/Dumpers.java?ref=b02f56d1580d24897d248baa27a555253f1dea5c",
                "patch": "@@ -18,6 +18,7 @@\n import org.testng.collections.Lists;\n import org.testng.collections.Maps;\n \n+import brooklyn.util.exceptions.Exceptions;\n import brooklyn.util.flags.FlagUtils;\n import brooklyn.util.javalang.Serializers;\n import brooklyn.util.javalang.Serializers.ObjectReplacer;\n@@ -106,7 +107,16 @@ public static void logUnserializableChains(Object root, final ObjectReplacer rep\n         for (Map.Entry<List<Object>, Class<?>> entry : unserializablePaths.entrySet()) {\n             StringBuilder msg = new StringBuilder(\"\\t\"+\"type=\"+entry.getValue()+\"; chain=\"+\"\\n\");\n             for (Object chainElement : entry.getKey()) {\n-                msg.append(\"\\t\\t\"+\"type=\").append(chainElement.getClass()).append(\"; val=\").append(chainElement).append(\"\\n\");\n+                // try-catch motivated by NPE in org.jclouds.domain.LoginCredentials.toString\n+                String chainElementStr;\n+                try {\n+                    chainElementStr = chainElement.toString();\n+                } catch (Exception e) {\n+                    Exceptions.propagateIfFatal(e);\n+                    LOG.error(\"Error calling toString on instance of \"+chainElement.getClass(), e);\n+                    chainElementStr = \"<error \"+e.getClass().getSimpleName()+\" in toString>\";\n+                }\n+                msg.append(\"\\t\\t\"+\"type=\").append(chainElement.getClass()).append(\"; val=\").append(chainElementStr).append(\"\\n\");\n             }\n             LOG.warn(msg.toString());\n         }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Added npe check",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/f6a9116b18720ef8b097a04c1a0a727d94b95469",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/1148c3cb170ef450c7cd8ad5218475f91e246169",
        "bug_id": "incubator-brooklyn_20",
        "file": [
            {
                "sha": "267397fdadb4c48ce6c75e488ff6935943e8bffb",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/f6a9116b18720ef8b097a04c1a0a727d94b95469/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/f6a9116b18720ef8b097a04c1a0a727d94b95469/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "status": "modified",
                "changes": 23,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java?ref=f6a9116b18720ef8b097a04c1a0a727d94b95469",
                "patch": "@@ -2,6 +2,16 @@\n \n import java.util.Map;\n \n+<<<<<<< HEAD\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Predicate;\n+import com.google.common.base.Predicates;\n+\n+=======\n+>>>>>>> upstream/master\n import brooklyn.entity.basic.EntityLocal;\n import brooklyn.entity.nosql.mongodb.sharding.MongoDBRouter;\n import brooklyn.entity.nosql.mongodb.sharding.MongoDBRouterCluster;\n@@ -18,6 +28,8 @@\n \n public class MongoDBClientSshDriver extends AbstractMongoDBSshDriver implements MongoDBClientDriver {\n     \n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDBClientSshDriver.class);\n+\n     private boolean isRunning = false;\n \n     public MongoDBClientSshDriver(EntityLocal entity, SshMachineLocation machine) {\n@@ -41,8 +53,15 @@ public void launch() {\n         AbstractMongoDBServer server = getServer();\n         String host = server.getAttribute(AbstractMongoDBServer.HOSTNAME);\n         Integer port = server.getAttribute(AbstractMongoDBServer.PORT);\n-        for (String scriptName : entity.getConfig(MongoDBClient.STARTUP_JS_SCRIPTS)) {\n-            runScript(\"\", scriptName, host, port);\n+        try {\n+            for (String scriptName : entity.getConfig(MongoDBClient.STARTUP_JS_SCRIPTS)) {\n+                runScript(\"\", scriptName, host, port);\n+            }\n+        } catch (NullPointerException e) {\n+            // FIXME avoid the null ptr, and do something more intelligent\n+            LOG.error(\"startupScripts not specified in MongoDBClientSshDriver launch method;\", e);\n+            isRunning = false;\n+            return;\n         }\n         isRunning = true;\n     }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Avoid NPE in BrooklynWebServer.stop",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/bb28e29cc0f6b1f4eeea1a26d018375ca5a14d33",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/5bef6866daf455e4abf2c69d02bb73b23ed36097",
        "bug_id": "incubator-brooklyn_21",
        "file": [
            {
                "sha": "f4bfacb07265dfe35012c6d0388ef873e0e5315e",
                "filename": "usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/bb28e29cc0f6b1f4eeea1a26d018375ca5a14d33/usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/bb28e29cc0f6b1f4eeea1a26d018375ca5a14d33/usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java?ref=bb28e29cc0f6b1f4eeea1a26d018375ca5a14d33",
                "patch": "@@ -453,7 +453,7 @@ private String checkFileExists(String path, String name) {\n     public synchronized void stop() throws Exception {\n         if (server==null) return;\n         String root = getRootUrl();\n-        Threads.removeShutdownHook(shutdownHook);\n+        if (shutdownHook != null) Threads.removeShutdownHook(shutdownHook);\n         if (log.isDebugEnabled())\n             log.debug(\"Stopping Brooklyn web console at \"+root+ \" (\" + war + (wars != null ? \" and \" + wars.values() : \"\") + \")\");\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "fix NPE in locaton rebinding",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/4d5f9e038baadeb93e108a89cecad1a3764f5430",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/223892aa223f8af3d6b40dc2bd2a839dfc220ab1",
        "bug_id": "incubator-brooklyn_22",
        "file": [
            {
                "sha": "ede4c69262fada74fb92f554f390fb602902f10e",
                "filename": "core/src/main/java/brooklyn/management/internal/LocalLocationManager.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/4d5f9e038baadeb93e108a89cecad1a3764f5430/core/src/main/java/brooklyn/management/internal/LocalLocationManager.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/4d5f9e038baadeb93e108a89cecad1a3764f5430/core/src/main/java/brooklyn/management/internal/LocalLocationManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/management/internal/LocalLocationManager.java?ref=4d5f9e038baadeb93e108a89cecad1a3764f5430",
                "patch": "@@ -235,7 +235,7 @@ protected Location manageRecursive(Location loc, final ManagementTransitionMode\n                 }\n             }\n             \n-            boolean result = manageNonRecursive(it, null);\n+            boolean result = manageNonRecursive(it, mode);\n             if (result) {\n                 it.setManagementContext(managementContext);\n                 if (!mode.isReadOnly()) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Jclouds openIptables: avoid NPE if no inboundPorts",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/2227415b25f0b821f23c1899181f6040195fc54b",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/0416bd1aa04a01c0985c44d710312ebc711f798d",
        "bug_id": "incubator-brooklyn_23",
        "file": [
            {
                "sha": "706b3eefa95df870850d375206b85bc14e5ed187",
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/2227415b25f0b821f23c1899181f6040195fc54b/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/2227415b25f0b821f23c1899181f6040195fc54b/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "status": "modified",
                "changes": 38,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java?ref=2227415b25f0b821f23c1899181f6040195fc54b",
                "patch": "@@ -742,25 +742,31 @@ protected JcloudsSshMachineLocation obtainOnce(ConfigBag setup) throws NoMachine\n                 }\n \n                 if (setup.get(OPEN_IPTABLES)) {\n-                    customisationForLogging.add(\"open iptables\");\n-                    \n                     @SuppressWarnings(\"unchecked\")\n-                    List<String> iptablesRules = createIptablesRulesForNetworkInterface((Iterable<Integer>) setup.get(INBOUND_PORTS));\n-                    iptablesRules.add(IptablesCommands.saveIptablesRules());\n-                    List<String> batch = Lists.newArrayList();\n-                    // Some entities, such as Riak (erlang based) have a huge range of ports, which leads to a script that\n-                    // is too large to run (fails with a broken pipe). Batch the rules into batches of 50\n-                    for (String rule : iptablesRules) {\n-                        batch.add(rule);\n-                        if (batch.size() == 50) {\n-                            sshMachineLocation.execCommands(\"Inserting iptables rules, 50 command batch\", batch);\n-                            batch.clear();\n+                    Iterable<Integer> inboundPorts = (Iterable<Integer>) setup.get(INBOUND_PORTS);\n+                    \n+                    if (inboundPorts == null || Iterables.isEmpty(inboundPorts)) {\n+                        LOG.info(\"No ports to open in iptables (no inbound ports) for {} at {}\", sshMachineLocation, this);\n+                    } else {\n+                        customisationForLogging.add(\"open iptables\");\n+                        \n+                        List<String> iptablesRules = createIptablesRulesForNetworkInterface(inboundPorts);\n+                        iptablesRules.add(IptablesCommands.saveIptablesRules());\n+                        List<String> batch = Lists.newArrayList();\n+                        // Some entities, such as Riak (erlang based) have a huge range of ports, which leads to a script that\n+                        // is too large to run (fails with a broken pipe). Batch the rules into batches of 50\n+                        for (String rule : iptablesRules) {\n+                            batch.add(rule);\n+                            if (batch.size() == 50) {\n+                                sshMachineLocation.execCommands(\"Inserting iptables rules, 50 command batch\", batch);\n+                                batch.clear();\n+                            }\n                         }\n+                        if (batch.size() > 0) {\n+                            sshMachineLocation.execCommands(\"Inserting iptables rules\", batch);\n+                        }\n+                        sshMachineLocation.execCommands(\"List iptables rules\", ImmutableList.of(IptablesCommands.listIptablesRule()));\n                     }\n-                    if (batch.size() > 0) {\n-                        sshMachineLocation.execCommands(\"Inserting iptables rules\", batch);\n-                    }\n-                    sshMachineLocation.execCommands(\"List iptables rules\", ImmutableList.of(IptablesCommands.listIptablesRule()));\n                 }\n                 \n                 if (setup.get(STOP_IPTABLES)) {",
                "deletions": 16
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Prevent DynamicCluster NPE when subclasses have not called super.init()",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/a8f191f71f1b08c5c0888761c66436184655879c",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/c2494dce841c3d6e0e4e14ed8ae63c4ac2b1dc30",
        "bug_id": "incubator-brooklyn_24",
        "file": [
            {
                "sha": "ac79dd69039f65c192c4d75878b79b33a6d5f462",
                "filename": "core/src/main/java/org/apache/brooklyn/entity/group/DynamicClusterImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/a8f191f71f1b08c5c0888761c66436184655879c/core/src/main/java/org/apache/brooklyn/entity/group/DynamicClusterImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/a8f191f71f1b08c5c0888761c66436184655879c/core/src/main/java/org/apache/brooklyn/entity/group/DynamicClusterImpl.java",
                "status": "modified",
                "changes": 20,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/org/apache/brooklyn/entity/group/DynamicClusterImpl.java?ref=a8f191f71f1b08c5c0888761c66436184655879c",
                "patch": "@@ -170,7 +170,15 @@ public DynamicClusterImpl() {\n     @Override\n     public void init() {\n         super.init();\n-        sensors().set(NEXT_CLUSTER_MEMBER_ID, new NextClusterMemberIdSupplier());\n+        initialiseMemberId();\n+    }\n+\n+    private void initialiseMemberId() {\n+        synchronized (mutex) {\n+            if (sensors().get(NEXT_CLUSTER_MEMBER_ID) == null) {\n+                sensors().set(NEXT_CLUSTER_MEMBER_ID, new NextClusterMemberIdSupplier());\n+            }\n+        }\n     }\n \n     @Override\n@@ -778,11 +786,13 @@ public boolean removeChild(Entity child) {\n     }\n \n     @Override\n-    public Entity addNode(Location loc, Map<?,?> extraFlags) {\n-        Map<?,?> createFlags = MutableMap.builder()\n+    public Entity addNode(Location loc, Map<?, ?> extraFlags) {\n+        // In case subclasses are foolish and do not call super.init() when overriding.\n+        initialiseMemberId();\n+        Map<?, ?> createFlags = MutableMap.builder()\n                 .putAll(getCustomChildFlags())\n                 .putAll(extraFlags)\n-                .put(CLUSTER_MEMBER_ID, getAttribute(NEXT_CLUSTER_MEMBER_ID).get())\n+                .put(CLUSTER_MEMBER_ID, sensors().get(NEXT_CLUSTER_MEMBER_ID).get())\n                 .build();\n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Creating and adding a node to cluster {}({}) with properties {}\", new Object[] { this, getId(), createFlags });\n@@ -797,7 +807,7 @@ public Entity addNode(Location loc, Map<?,?> extraFlags) {\n         // Continue to call manage(), because some uses of NodeFactory (in tests) still instantiate the\n         // entity via its constructor\n         Entities.manage(entity);\n-        \n+\n         addMember(entity);\n         return entity;\n     }",
                "deletions": 5
            },
            {
                "sha": "1a80c3ab9908294a17d93819141b82625bb197ac",
                "filename": "software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/a8f191f71f1b08c5c0888761c66436184655879c/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/a8f191f71f1b08c5c0888761c66436184655879c/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetImpl.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetImpl.java?ref=a8f191f71f1b08c5c0888761c66436184655879c",
                "patch": "@@ -137,6 +137,7 @@ public Entity apply(@Nullable Collection<Entity> entities) {\n     \n     @Override\n     public void init() {\n+        super.init();\n         enrichers().add(Enrichers.builder()\n                 .aggregating(MongoDBAuthenticationMixins.ROOT_USERNAME)\n                 .publishing(MongoDBAuthenticationMixins.ROOT_USERNAME)",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "avoid NPE resolving camp yaml",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/a336c0df5e67f06da7cb2865d1b3da1f42351d95",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/c690a294f8da300eac4b355d9c8522252f88109a",
        "bug_id": "incubator-brooklyn_25",
        "file": [
            {
                "sha": "9f6a32416f4a01520bb31634a97d49546e2f7608",
                "filename": "usage/camp/src/main/java/io/brooklyn/camp/brooklyn/spi/creation/BrooklynComponentTemplateResolver.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/a336c0df5e67f06da7cb2865d1b3da1f42351d95/usage/camp/src/main/java/io/brooklyn/camp/brooklyn/spi/creation/BrooklynComponentTemplateResolver.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/a336c0df5e67f06da7cb2865d1b3da1f42351d95/usage/camp/src/main/java/io/brooklyn/camp/brooklyn/spi/creation/BrooklynComponentTemplateResolver.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/camp/src/main/java/io/brooklyn/camp/brooklyn/spi/creation/BrooklynComponentTemplateResolver.java?ref=a336c0df5e67f06da7cb2865d1b3da1f42351d95",
                "patch": "@@ -13,6 +13,8 @@\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n+import javax.annotation.Nullable;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -97,7 +99,7 @@ private static BrooklynComponentTemplateResolver newInstance(ManagementContext m\n             } catch (Exception e) { throw Exceptions.propagate(e); }\n         }\n \n-        private static String getDeclaredType(String knownServiceType, AbstractResource optionalTemplate, ConfigBag attrs) {\n+        private static String getDeclaredType(String knownServiceType, AbstractResource optionalTemplate, @Nullable ConfigBag attrs) {\n             String type = knownServiceType;\n             if (type==null && optionalTemplate!=null) {\n                 type = optionalTemplate.getType();\n@@ -109,7 +111,8 @@ private static String getDeclaredType(String knownServiceType, AbstractResource\n             return type;\n         }\n         \n-        private static String extractServiceTypeAttribute(ConfigBag attrs) {\n+        private static String extractServiceTypeAttribute(@Nullable ConfigBag attrs) {\n+            if (attrs==null) return null;\n             String type;\n             type = (String)attrs.getStringKey(\"serviceType\");\n             if (type==null) type = (String)attrs.getStringKey(\"service_type\");",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Merge pull request #951 from aledsage/fix/NPE-EntityDynamicType-constructor-calling-entity.toString\n\nFix NPE when EntityDynamicType constructor calling entity.toString",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/3203ac200b005b0a53905362289f2b19624bf220",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/e39271f647cb57a93bf5fb69ff8e6f5179a2b4a8",
        "bug_id": "incubator-brooklyn_26",
        "file": [
            {
                "sha": "69615fdfa39f66981dd9081f2f6318ee53c1f20f",
                "filename": "core/src/main/java/brooklyn/entity/basic/EntityDynamicType.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/3203ac200b005b0a53905362289f2b19624bf220/core/src/main/java/brooklyn/entity/basic/EntityDynamicType.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/3203ac200b005b0a53905362289f2b19624bf220/core/src/main/java/brooklyn/entity/basic/EntityDynamicType.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/basic/EntityDynamicType.java?ref=3203ac200b005b0a53905362289f2b19624bf220",
                "patch": "@@ -24,10 +24,10 @@\n import brooklyn.entity.EntityType;\n import brooklyn.entity.effector.EffectorAndBody;\n import brooklyn.entity.effector.EffectorBody;\n-import brooklyn.entity.effector.EffectorWithBody;\n-import brooklyn.entity.effector.Effectors;\n import brooklyn.entity.effector.EffectorTasks.EffectorBodyTaskFactory;\n import brooklyn.entity.effector.EffectorTasks.EffectorTaskFactory;\n+import brooklyn.entity.effector.EffectorWithBody;\n+import brooklyn.entity.effector.Effectors;\n import brooklyn.event.Sensor;\n import brooklyn.event.basic.BasicConfigKey.BasicConfigKeyOverwriting;\n import brooklyn.util.flags.FlagUtils;\n@@ -87,15 +87,15 @@ private EntityDynamicType(Class<? extends Entity> clazz, AbstractEntity entity)\n         setName((clazz.getCanonicalName() == null) ? clazz.getName() : clazz.getCanonicalName());\n         String id = entity==null ? clazz.getName() : entity.getId();\n         \n-        effectors.putAll(findEffectors(clazz, entity));\n+        effectors.putAll(findEffectors(clazz, null));\n         if (LOG.isTraceEnabled())\n             LOG.trace(\"Entity {} effectors: {}\", id, Joiner.on(\", \").join(effectors.keySet()));\n         \n-        sensors.putAll(findSensors(clazz, entity));\n+        sensors.putAll(findSensors(clazz, null));\n         if (LOG.isTraceEnabled())\n             LOG.trace(\"Entity {} sensors: {}\", id, Joiner.on(\", \").join(sensors.keySet()));\n         \n-        buildConfigKeys(clazz, entity, configKeys);\n+        buildConfigKeys(clazz, null, configKeys);\n         if (LOG.isTraceEnabled())\n             LOG.trace(\"Entity {} config keys: {}\", id, Joiner.on(\", \").join(configKeys.keySet()));\n ",
                "deletions": 5
            },
            {
                "sha": "9f62dca25504e983b4025da632a70c63f1205b08",
                "filename": "core/src/test/java/brooklyn/entity/basic/EntityTypeTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/3203ac200b005b0a53905362289f2b19624bf220/core/src/test/java/brooklyn/entity/basic/EntityTypeTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/3203ac200b005b0a53905362289f2b19624bf220/core/src/test/java/brooklyn/entity/basic/EntityTypeTest.java",
                "status": "modified",
                "changes": 31,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/entity/basic/EntityTypeTest.java?ref=3203ac200b005b0a53905362289f2b19624bf220",
                "patch": "@@ -1,12 +1,12 @@\n package brooklyn.entity.basic;\n \n+import static brooklyn.entity.basic.AbstractEntity.EFFECTOR_ADDED;\n+import static brooklyn.entity.basic.AbstractEntity.EFFECTOR_CHANGED;\n+import static brooklyn.entity.basic.AbstractEntity.EFFECTOR_REMOVED;\n import static brooklyn.entity.basic.AbstractEntity.POLICY_ADDED;\n import static brooklyn.entity.basic.AbstractEntity.POLICY_REMOVED;\n import static brooklyn.entity.basic.AbstractEntity.SENSOR_ADDED;\n import static brooklyn.entity.basic.AbstractEntity.SENSOR_REMOVED;\n-import static brooklyn.entity.basic.AbstractEntity.EFFECTOR_ADDED;\n-import static brooklyn.entity.basic.AbstractEntity.EFFECTOR_REMOVED;\n-import static brooklyn.entity.basic.AbstractEntity.EFFECTOR_CHANGED;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertFalse;\n import static org.testng.Assert.assertNotNull;\n@@ -31,6 +31,7 @@\n import brooklyn.test.TestUtils;\n import brooklyn.test.entity.TestApplication;\n import brooklyn.test.entity.TestEntity;\n+import brooklyn.test.entity.TestEntityImpl;\n import brooklyn.util.collections.CollectionFunctionals;\n import brooklyn.util.collections.MutableSet;\n \n@@ -221,4 +222,28 @@ public void testHasSensor() throws Exception {\n         assertTrue(entity.getEntityType().hasSensor(\"entity.sensor.added\"));\n         assertFalse(entity.getEntityType().hasSensor(\"does.not.exist\"));\n     }\n+    \n+    // Previously EntityDynamicType's constructor when passed `entity` during the entity's construction (!)\n+    // would pass this to EntityDynamicType.findEffectors, which would do log.warn in some cirumstances,\n+    // with entity.toString as part of the log message. But if the toString called getConfig() this would \n+    // fail because we were still in the middle of constructing the entity.entityType!\n+    @Test\n+    public void testEntityDynamicTypeDoesNotCallToStringDuringConstruction() throws Exception {\n+        entity = app.createAndManageChild(EntitySpec.create(TestEntity.class).impl(EntityWithToStringAccessingConfig.class));\n+        entity.toString();\n+    }\n+    \n+    public static class EntityWithToStringAccessingConfig extends TestEntityImpl {\n+        \n+        // to cause warning to be logged: non-static constant\n+        public final MethodEffector<Void> NON_STATIC_EFFECTOR = new MethodEffector<Void>(EntityWithToStringAccessingConfig.class, \"nonStaticEffector\");\n+\n+        public void nonStaticEffector() {\n+        }\n+        \n+        @Override\n+        public String toString() {\n+            return super.toString() + getConfig(CONF_NAME);\n+        }\n+    }\n }",
                "deletions": 3
            },
            {
                "sha": "818b50e91019f9b0da6f2941898f425a6b0515ba",
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/3203ac200b005b0a53905362289f2b19624bf220/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/3203ac200b005b0a53905362289f2b19624bf220/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "status": "modified",
                "changes": 16,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java?ref=3203ac200b005b0a53905362289f2b19624bf220",
                "patch": "@@ -88,6 +88,7 @@\n import com.google.common.base.Function;\n import com.google.common.base.Objects;\n import com.google.common.base.Splitter;\n+import com.google.common.base.Stopwatch;\n import com.google.common.base.Throwables;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n@@ -1150,11 +1151,10 @@ protected void waitForReachable(final ComputeService computeService, NodeMetadat\n             delayMs = Time.parseTimeString(WAIT_FOR_SSHABLE.getDefaultValue());\n         \n         String user = expectedCredentialsRef.getUser();\n-        LOG.info(\"Started VM in {}; waiting {} for it to be sshable on {}@{}{}\",\n-                new Object[] {\n-                        setup.getDescription(),Time.makeTimeString(delayMs),\n-                        user, vmIp, Objects.equal(user, getUser(setup)) ? \"\" : \" (setup user is different: \"+getUser(setup)+\")\"\n-                });\n+        LOG.info(\"Started VM {}; waiting {} for it to be sshable on {}@{}{}\", new Object[] {\n+                setup.getDescription(), Time.makeTimeStringRounded(delayMs),\n+                user, vmIp, Objects.equal(user, getUser(setup)) ? \"\" : \" (setup user is different: \"+getUser(setup)+\")\"});\n+        Stopwatch stopwatch = new Stopwatch().start();\n         \n         boolean reachable = new Repeater()\n             .repeat()\n@@ -1173,8 +1173,12 @@ public Boolean call() {\n         if (!reachable) {\n             throw new IllegalStateException(\"SSH failed for \"+\n                     user+\"@\"+vmIp+\" (\"+setup.getDescription()+\") after waiting \"+\n-                    Time.makeTimeString(delayMs));\n+                    Time.makeTimeStringRounded(delayMs));\n         }\n+        \n+        LOG.info(\"VM {}; is sshable after {} on {}@{}\",new Object[] {\n+                setup.getDescription(), Time.makeTimeStringRounded(stopwatch),\n+                user, vmIp});\n     }\n     \n     // -------------------- hostnames ------------------------",
                "deletions": 6
            },
            {
                "sha": "a8d8e60411b7d26da067d9207479743d0f829cc7",
                "filename": "sandbox/dropwizard/src/test/java/brooklyn/rest/commands/ApplicationCommandsIntegrationTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/3203ac200b005b0a53905362289f2b19624bf220/sandbox/dropwizard/src/test/java/brooklyn/rest/commands/ApplicationCommandsIntegrationTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/3203ac200b005b0a53905362289f2b19624bf220/sandbox/dropwizard/src/test/java/brooklyn/rest/commands/ApplicationCommandsIntegrationTest.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/sandbox/dropwizard/src/test/java/brooklyn/rest/commands/ApplicationCommandsIntegrationTest.java?ref=3203ac200b005b0a53905362289f2b19624bf220",
                "patch": "@@ -36,7 +36,6 @@ protected void setUpResources() throws Exception {\n   @AfterClass\n   public void tearDown() throws Exception {\n     super.tearDownJersey();\n-    stopManager();\n   }\n \n   @Test(groups=\"Integration\")",
                "deletions": 1
            },
            {
                "sha": "68dee63b20d2e4740938c036db6cfd6336b4e4ac",
                "filename": "sandbox/dropwizard/src/test/java/brooklyn/rest/commands/ApplicationCommandsTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/3203ac200b005b0a53905362289f2b19624bf220/sandbox/dropwizard/src/test/java/brooklyn/rest/commands/ApplicationCommandsTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/3203ac200b005b0a53905362289f2b19624bf220/sandbox/dropwizard/src/test/java/brooklyn/rest/commands/ApplicationCommandsTest.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/sandbox/dropwizard/src/test/java/brooklyn/rest/commands/ApplicationCommandsTest.java?ref=3203ac200b005b0a53905362289f2b19624bf220",
                "patch": "@@ -29,7 +29,6 @@ protected void setUpResources() throws Exception {\n   @AfterClass\n   public void tearDown() throws Exception {\n     super.tearDownJersey();\n-    stopManager();\n   }\n \n   @Test",
                "deletions": 1
            },
            {
                "sha": "a95ca92c92339b49e1b7d488b5bd6a927b8cb3fe",
                "filename": "software/webapp/src/test/java/brooklyn/entity/dns/AbstractGeoDnsServiceTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/3203ac200b005b0a53905362289f2b19624bf220/software/webapp/src/test/java/brooklyn/entity/dns/AbstractGeoDnsServiceTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/3203ac200b005b0a53905362289f2b19624bf220/software/webapp/src/test/java/brooklyn/entity/dns/AbstractGeoDnsServiceTest.java",
                "status": "modified",
                "changes": 12,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/webapp/src/test/java/brooklyn/entity/dns/AbstractGeoDnsServiceTest.java?ref=3203ac200b005b0a53905362289f2b19624bf220",
                "patch": "@@ -166,7 +166,9 @@ public GeoDnsTestServiceImpl() {\n \n         @Override\n         public Map<String, HostGeoInfo> getTargetHostsByName() {\n-            return targetHostsByName;\n+            synchronized (targetHostsByName) {\n+                return targetHostsByName;\n+            }\n         }\n         \n         @Override\n@@ -185,9 +187,11 @@ protected boolean addTargetHost(Entity e) {\n         \n         @Override\n         protected void reconfigureService(Collection<HostGeoInfo> targetHosts) {\n-            targetHostsByName.clear();\n-            for (HostGeoInfo host : targetHosts) {\n-                if (host != null) targetHostsByName.put(host.displayName, host);\n+            synchronized (targetHostsByName) {\n+                targetHostsByName.clear();\n+                for (HostGeoInfo host : targetHosts) {\n+                    if (host != null) targetHostsByName.put(host.displayName, host);\n+                }\n             }\n         }\n ",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "JcloudsLocation: avoid NPE on rebindMachine",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/92d213b4a55b2f51a35205d2ca0292d1988830d1",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/40fc99f5cf216afd1dfc038899448d5e2bdfeebe",
        "bug_id": "incubator-brooklyn_27",
        "file": [
            {
                "sha": "51f5aa8ceb7c816c7302559f9ba7405fd5ac02b9",
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/92d213b4a55b2f51a35205d2ca0292d1988830d1/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/92d213b4a55b2f51a35205d2ca0292d1988830d1/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java?ref=92d213b4a55b2f51a35205d2ca0292d1988830d1",
                "patch": "@@ -1517,7 +1517,7 @@ protected JcloudsSshMachineLocation createJcloudsSshMachineLocation(ComputeServi\n     \n     protected Map<String,Object> extractSshConfig(ConfigBag setup, NodeMetadata node) {\n         ConfigBag nodeConfig = new ConfigBag();\n-        if (node!=null) {\n+        if (node!=null && node.getCredentials() != null) {\n             nodeConfig.putIfNotNull(PASSWORD, node.getCredentials().getPassword());\n             nodeConfig.putIfNotNull(PRIVATE_KEY_DATA, node.getCredentials().getPrivateKey());\n         }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "winrm: avoid NPE if command==null && psCommand==null",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/868f765a7e0532b7a46a70af496ffef9e195f168",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/b9d95a4dd88704a4d57f6fcd094e69968473205a",
        "bug_id": "incubator-brooklyn_28",
        "file": [
            {
                "sha": "65d05abac381c7e06a26861a977a6ed844da327b",
                "filename": "software/base/src/main/java/org/apache/brooklyn/entity/software/base/lifecycle/WinRmExecuteHelper.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/868f765a7e0532b7a46a70af496ffef9e195f168/software/base/src/main/java/org/apache/brooklyn/entity/software/base/lifecycle/WinRmExecuteHelper.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/868f765a7e0532b7a46a70af496ffef9e195f168/software/base/src/main/java/org/apache/brooklyn/entity/software/base/lifecycle/WinRmExecuteHelper.java",
                "status": "modified",
                "changes": 31,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/org/apache/brooklyn/entity/software/base/lifecycle/WinRmExecuteHelper.java?ref=868f765a7e0532b7a46a70af496ffef9e195f168",
                "patch": "@@ -18,10 +18,16 @@\n  */\n package org.apache.brooklyn.entity.software.base.lifecycle;\n \n-import com.google.common.annotations.Beta;\n-import com.google.common.base.Predicate;\n-import com.google.common.base.Predicates;\n-import org.apache.brooklyn.api.entity.Entity;\n+import static java.lang.String.format;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+\n+import javax.annotation.Nullable;\n+\n import org.apache.brooklyn.api.mgmt.ExecutionContext;\n import org.apache.brooklyn.api.mgmt.Task;\n import org.apache.brooklyn.api.mgmt.TaskQueueingContext;\n@@ -33,14 +39,9 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import javax.annotation.Nullable;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-import java.util.concurrent.Callable;\n-\n-import static java.lang.String.format;\n+import com.google.common.annotations.Beta;\n+import com.google.common.base.Predicate;\n+import com.google.common.base.Predicates;\n \n /**\n  * <code>org.apache.brooklyn.entity.software.base.lifecycle.ScriptHelper</code> analog for WinRM\n@@ -96,7 +97,11 @@ public Integer call() throws Exception {\n \n         try {\n             ByteArrayOutputStream stdin = new ByteArrayOutputStream();\n-            stdin.write((command != null ? command : psCommand).getBytes());\n+            if (command != null) {\n+                stdin.write(command.getBytes());\n+            } else if (psCommand != null) {\n+                stdin.write(psCommand.getBytes());\n+            }\n             tb.tag(BrooklynTaskTags.tagForStreamSoft(BrooklynTaskTags.STREAM_STDIN, stdin));\n         } catch (IOException e) {\n             LOG.warn(\"Error registering stream \"+BrooklynTaskTags.STREAM_STDIN+\" on \"+tb+\": \"+e, e);",
                "deletions": 13
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Avoid NPE in TomcatServer.disconnectSensors",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/4542aee68179fd7c394daea525714855ba423372",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/8e4e78e87e020b83ffbc1a24c02dc86bcc41dc59",
        "bug_id": "incubator-brooklyn_29",
        "file": [
            {
                "sha": "dd4ac9464b4fee58a1f8521496fd6fa68926a1d5",
                "filename": "software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/4542aee68179fd7c394daea525714855ba423372/software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/4542aee68179fd7c394daea525714855ba423372/software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java?ref=4542aee68179fd7c394daea525714855ba423372",
                "patch": "@@ -70,7 +70,7 @@ public void connectSensors() {\n     @Override\n     public void disconnectSensors() {\n         super.disconnectSensors();\n-        if (getDriver().isJmxEnabled()) {\n+        if (getDriver() != null && getDriver().isJmxEnabled()) {\n            if (jmxFeed != null) jmxFeed.stop();\n         } else {\n             disconnectServiceUpIsRunning();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Fix NPE in AbstractController.update",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/393a95c65bafdae203393006e634d05857dcc2c2",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/b84033a1080afa09977832d7be4b8facde233bf5",
        "bug_id": "incubator-brooklyn_30",
        "file": [
            {
                "sha": "95ac9975fcf5ace89dc87c0cbe85ddd5d0f39de3",
                "filename": "software/webapp/src/main/java/brooklyn/entity/proxy/AbstractControllerImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/393a95c65bafdae203393006e634d05857dcc2c2/software/webapp/src/main/java/brooklyn/entity/proxy/AbstractControllerImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/393a95c65bafdae203393006e634d05857dcc2c2/software/webapp/src/main/java/brooklyn/entity/proxy/AbstractControllerImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/webapp/src/main/java/brooklyn/entity/proxy/AbstractControllerImpl.java?ref=393a95c65bafdae203393006e634d05857dcc2c2",
                "patch": "@@ -268,7 +268,7 @@ public void run() {\n     @Override\n     public void update() {\n         Task<?> task = updateAsync();\n-        task.getUnchecked();\n+        if (task != null) task.getUnchecked();\n     }\n     \n     public synchronized Task<?> updateAsync() {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "JcloudsLocation: avoid NPE if node.getImageId null",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/638809cb522f0524ffebc7a888e18f4423aaa6b8",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/3e7aa47db620e87026d970df6ed7933d20cb19b6",
        "bug_id": "incubator-brooklyn_31",
        "file": [
            {
                "sha": "da5f5dd953b27ade3950c2cce01f1fc35ce7fa13",
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/638809cb522f0524ffebc7a888e18f4423aaa6b8/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/638809cb522f0524ffebc7a888e18f4423aaa6b8/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java?ref=638809cb522f0524ffebc7a888e18f4423aaa6b8",
                "patch": "@@ -1135,7 +1135,8 @@ protected SshMachineLocation createTemporarySshMachineLocation(HostAndPort hostA\n      * Create the user immediately - executing ssh commands as required.\n      */\n     protected LoginCredentials createUser(ComputeService computeService, NodeMetadata node, Optional<HostAndPort> hostAndPortOverride, ConfigBag config) {\n-        UserCreation userCreation = createUserStatements(computeService.getImage(node.getImageId()), config);\n+        Image image = (node.getImageId() != null) ? computeService.getImage(node.getImageId()) : null;\n+        UserCreation userCreation = createUserStatements(image, config);\n         \n         if (!userCreation.statements.isEmpty()) {\n             org.jclouds.compute.domain.OsFamily osFamily = node.getOperatingSystem().getFamily();\n@@ -1260,15 +1261,15 @@ public UserCreation(LoginCredentials creds, List<Statement> statements) {\n      * @param config Configuration for creating the VM\n      * @return       The commands required to create the user, along with the expected login credentials.\n      */\n-    protected UserCreation createUserStatements(Image image, ConfigBag config) {\n+    protected UserCreation createUserStatements(@Nullable Image image, ConfigBag config) {\n         //NB: we ignore private key here because, by default we probably should not be installing it remotely;\n         //also, it may not be valid for first login (it is created before login e.g. on amazon, so valid there;\n         //but not elsewhere, e.g. on rackspace).\n         \n         LoginCredentials loginCreds = null;\n         String user = getUser(config);\n         String explicitLoginUser = config.get(LOGIN_USER);\n-        String loginUser = groovyTruth(explicitLoginUser) ? explicitLoginUser : (image.getDefaultCredentials() != null) ? image.getDefaultCredentials().identity : null;\n+        String loginUser = groovyTruth(explicitLoginUser) ? explicitLoginUser : (image != null && image.getDefaultCredentials() != null) ? image.getDefaultCredentials().identity : null;\n         Boolean dontCreateUser = config.get(DONT_CREATE_USER);\n         Boolean grantUserSudo = config.get(GRANT_USER_SUDO);\n         String publicKeyData = LocationConfigUtils.getPublicKeyData(config);",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Fix NPE on getJmxSensors",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/90257ded144e9201d1174c38d5a3249253698d05",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/3875c22d2edc3c95aa29a545e159660c0725dce4",
        "bug_id": "incubator-brooklyn_32",
        "file": [
            {
                "sha": "4724e5afa00e5ec34dfbbf05318139eefd4472d6",
                "filename": "org.overpaas.core/src/main/java/org/overpaas/web/tomcat/TomcatNode.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/90257ded144e9201d1174c38d5a3249253698d05/org.overpaas.core/src/main/java/org/overpaas/web/tomcat/TomcatNode.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/90257ded144e9201d1174c38d5a3249253698d05/org.overpaas.core/src/main/java/org/overpaas/web/tomcat/TomcatNode.groovy",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/org.overpaas.core/src/main/java/org/overpaas/web/tomcat/TomcatNode.groovy?ref=90257ded144e9201d1174c38d5a3249253698d05",
                "patch": "@@ -69,7 +69,7 @@ public class TomcatNode extends AbstractEntity implements Startable {\n         }\n \t}\n \t\n-\tprivate double getJmxSensors(JmxSensorEffectorTool jmxTool) {\n+\tprivate double getJmxSensors() {\n \t\tdef reqs = jmxTool.getChildrenAttributesWithTotal(\"Catalina:type=GlobalRequestProcessor,name=\\\"*\\\"\")\n \t\treqs.put \"timestamp\", System.currentTimeMillis()\n \t\t//update to explicit location in activity map, but not linked to sensor so probably shouldn't be used too widely ",
                "deletions": 1
            },
            {
                "sha": "2137a12c2cbf95194ac56ca45e8638e822a1370e",
                "filename": "org.overpaas.core/src/test/java/org/overpaas/example/SimpleTomcatApp.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/90257ded144e9201d1174c38d5a3249253698d05/org.overpaas.core/src/test/java/org/overpaas/example/SimpleTomcatApp.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/90257ded144e9201d1174c38d5a3249253698d05/org.overpaas.core/src/test/java/org/overpaas/example/SimpleTomcatApp.groovy",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/org.overpaas.core/src/test/java/org/overpaas/example/SimpleTomcatApp.groovy?ref=90257ded144e9201d1174c38d5a3249253698d05",
                "patch": "@@ -83,7 +83,7 @@ public class SimpleTomcatApp extends AbstractApplication {\n \t\t\n \t\t//TODO find a better way to shutdown a cluster?\n \t\tprintln \"shutting down...\"\n-\t\tapp.entities.values().each { if (it in TomcatNode) it.shutdown() }\n+\t\tapp.getEntities().each { if (it in TomcatNode) it.shutdown() }\n \t\t//TODO there is still an executor service running, not doing anything but not marked as a daemon,\n \t\t//so doesn't quit immediately (i think it will time out but haven't verified)\n \t\t//app shutdown should exist and handle that???",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "prevent NPE due to applicationName being null",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/08a91f61c83fabe2dacafc9176423db988207e64",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/8f2a6941bc538280a22ed2094f8c078ced5cc7f2",
        "bug_id": "incubator-brooklyn_33",
        "file": [
            {
                "sha": "cf7279141f7c8c504413553f2de608c704af7641",
                "filename": "core/src/main/java/brooklyn/management/usage/ApplicationUsage.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/08a91f61c83fabe2dacafc9176423db988207e64/core/src/main/java/brooklyn/management/usage/ApplicationUsage.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/08a91f61c83fabe2dacafc9176423db988207e64/core/src/main/java/brooklyn/management/usage/ApplicationUsage.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/management/usage/ApplicationUsage.java?ref=08a91f61c83fabe2dacafc9176423db988207e64",
                "patch": "@@ -66,7 +66,8 @@ public String toString() {\n \n     public ApplicationUsage(String applicationId, String applicationName, String entityType, Map<String, String> metadata) {\n         this.applicationId = checkNotNull(applicationId, \"applicationId\");\n-        this.applicationName = checkNotNull(applicationName, \"applicationName\");\n+        // allow name to be null, happens in certain failed rebind cases\n+        this.applicationName = applicationName;\n         this.entityType = checkNotNull(entityType, \"entityType\");\n         this.metadata = checkNotNull(metadata, \"metadata\");\n     }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "fix NPE in BrooklynYamlTypeInstantiatorTest (supertype is null)",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/75ed2ae7c2d15ed30c7a67f5efd1c8524d093d3e",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/0d0f712471ed940d2fcbb2cf714e15fdaecec8d1",
        "bug_id": "incubator-brooklyn_34",
        "file": [
            {
                "sha": "290876b35fe7a28e3f4c499db119ecab97daae72",
                "filename": "api/src/main/java/brooklyn/management/classloading/BrooklynClassLoadingContext.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/75ed2ae7c2d15ed30c7a67f5efd1c8524d093d3e/api/src/main/java/brooklyn/management/classloading/BrooklynClassLoadingContext.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/75ed2ae7c2d15ed30c7a67f5efd1c8524d093d3e/api/src/main/java/brooklyn/management/classloading/BrooklynClassLoadingContext.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/api/src/main/java/brooklyn/management/classloading/BrooklynClassLoadingContext.java?ref=75ed2ae7c2d15ed30c7a67f5efd1c8524d093d3e",
                "patch": "@@ -1,5 +1,7 @@\n package brooklyn.management.classloading;\n \n+import javax.annotation.Nullable;\n+\n import brooklyn.management.ManagementContext;\n import brooklyn.util.guava.Maybe;\n \n@@ -11,9 +13,9 @@\n \n     public ManagementContext getManagementContext();\n     public Class<?> loadClass(String className);\n-    public <T> Class<? extends T> loadClass(String className, Class<T> type);\n+    public <T> Class<? extends T> loadClass(String className, @Nullable Class<T> supertype);\n     \n     public Maybe<Class<?>> tryLoadClass(String className);\n-    public <T> Maybe<Class<? extends T>> tryLoadClass(String className, Class<T> type);\n+    public <T> Maybe<Class<? extends T>> tryLoadClass(String className, @Nullable Class<T> supertype);\n     \n }",
                "deletions": 2
            },
            {
                "sha": "fe1b45e83b2a3beb19847f17dfd26609c5519a7e",
                "filename": "core/src/main/java/brooklyn/management/classloading/AbstractBrooklynClassLoadingContext.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/75ed2ae7c2d15ed30c7a67f5efd1c8524d093d3e/core/src/main/java/brooklyn/management/classloading/AbstractBrooklynClassLoadingContext.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/75ed2ae7c2d15ed30c7a67f5efd1c8524d093d3e/core/src/main/java/brooklyn/management/classloading/AbstractBrooklynClassLoadingContext.java",
                "status": "modified",
                "changes": 12,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/management/classloading/AbstractBrooklynClassLoadingContext.java?ref=75ed2ae7c2d15ed30c7a67f5efd1c8524d093d3e",
                "patch": "@@ -1,5 +1,7 @@\n package brooklyn.management.classloading;\n \n+import javax.annotation.Nullable;\n+\n import brooklyn.management.ManagementContext;\n import brooklyn.util.guava.Maybe;\n \n@@ -28,18 +30,18 @@ public ManagementContext getManagementContext() {\n     public abstract Maybe<Class<?>> tryLoadClass(String className);\n \n     @Override\n-    public <T> Class<? extends T> loadClass(String className, Class<T> type) {\n-        return tryLoadClass(className, type).get();\n+    public <T> Class<? extends T> loadClass(String className, @Nullable Class<T> supertype) {\n+        return tryLoadClass(className, supertype).get();\n     }\n \n     @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n     @Override\n-    public <T> Maybe<Class<? extends T>> tryLoadClass(String className, Class<T> type) {\n+    public <T> Maybe<Class<? extends T>> tryLoadClass(String className, @Nullable Class<T> supertype) {\n         Maybe<Class<?>> result = tryLoadClass(className);\n         if (result.isAbsent()) return (Maybe)result;\n         Class<?> clazz = result.get();\n-        if (type.isAssignableFrom(clazz)) return (Maybe)result;\n-        throw new ClassCastException(className+\" is not an instance of \"+type);\n+        if (supertype==null || supertype.isAssignableFrom(clazz)) return (Maybe)result;\n+        throw new ClassCastException(className+\" is not an instance of \"+supertype);\n     }\n \n     @Override",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Fix NPE when jclouds image does not have OsFamily",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/892823d3e6b86c77e37fc89fceb8c3c198565c4a",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/5dd08aa11cd613e6b0ccad0e19d6b5880f34141f",
        "bug_id": "incubator-brooklyn_35",
        "file": [
            {
                "sha": "23b79eda356903266026e7d71d493c5206300616",
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/892823d3e6b86c77e37fc89fceb8c3c198565c4a/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/892823d3e6b86c77e37fc89fceb8c3c198565c4a/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java?ref=892823d3e6b86c77e37fc89fceb8c3c198565c4a",
                "patch": "@@ -1290,11 +1290,13 @@ public Template buildTemplate(ComputeService computeService, ConfigBag config) {\n \n         // Finally try to build the template\n         Template template;\n+        Image image;\n         try {\n             template = templateBuilder.build();\n             if (template==null) throw new NullPointerException(\"No template found (templateBuilder.build returned null)\");\n-            LOG.debug(\"jclouds found template \"+template+\" (image \"+template.getImage()+\") for provisioning in \"+this+\" for \"+config.getDescription());\n-            if (template.getImage()==null) throw new NullPointerException(\"Template does not contain an image (templateBuilder.build returned invalid template)\");\n+            image = template.getImage();\n+            LOG.debug(\"jclouds found template \"+template+\" (image \"+image+\") for provisioning in \"+this+\" for \"+config.getDescription());\n+            if (image==null) throw new NullPointerException(\"Template does not contain an image (templateBuilder.build returned invalid template)\");\n         } catch (AuthorizationException e) {\n             LOG.warn(\"Error resolving template: not authorized (rethrowing: \"+e+\")\");\n             throw new IllegalStateException(\"Not authorized to access cloud \"+this+\" to resolve \"+templateBuilder, e);\n@@ -1319,7 +1321,8 @@ public Template buildTemplate(ComputeService computeService, ConfigBag config) {\n         }\n         TemplateOptions options = template.getOptions();\n \n-        if (template.getImage().getOperatingSystem().getFamily().equals(OsFamily.WINDOWS)) {\n+        OsFamily osFamily = (image.getOperatingSystem() != null) ? image.getOperatingSystem().getFamily() : null;\n+        if (OsFamily.WINDOWS == osFamily) {\n             if (!(config.containsKey(JcloudsLocationConfig.USER_METADATA_STRING) || config.containsKey(JcloudsLocationConfig.USER_METADATA_MAP))) {\n                 config.put(JcloudsLocationConfig.USER_METADATA_STRING, WinRmMachineLocation.getDefaultUserMetadataString());\n             }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "rebind's loadMemento: guard against NPE",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/f9dd10afcce16f7c1ae309d12a7b1670d9163188",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/cf1a80dc2013d02d8eaf6406e9d4d81350179f5e",
        "bug_id": "incubator-brooklyn_36",
        "file": [
            {
                "sha": "c5be2aab33233eaa45439b57af4677e83ae0e9f8",
                "filename": "core/src/main/java/brooklyn/entity/rebind/dto/BrooklynMementoImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/f9dd10afcce16f7c1ae309d12a7b1670d9163188/core/src/main/java/brooklyn/entity/rebind/dto/BrooklynMementoImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/f9dd10afcce16f7c1ae309d12a7b1670d9163188/core/src/main/java/brooklyn/entity/rebind/dto/BrooklynMementoImpl.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/rebind/dto/BrooklynMementoImpl.java?ref=f9dd10afcce16f7c1ae309d12a7b1670d9163188",
                "patch": "@@ -26,11 +26,11 @@ public static Builder builder() {\n     \n     public static class Builder {\n         protected String brooklynVersion = BrooklynVersion.get();\n-        protected List<String> applicationIds = Lists.newArrayList();\n-        protected List<String> topLevelLocationIds = Lists.newArrayList();\n-        protected Map<String, EntityMemento> entities = Maps.newLinkedHashMap();\n-        protected Map<String, LocationMemento> locations = Maps.newLinkedHashMap();\n-        protected Map<String, PolicyMemento> policies = Maps.newLinkedHashMap();\n+        protected final List<String> applicationIds = Lists.newArrayList();\n+        protected final List<String> topLevelLocationIds = Lists.newArrayList();\n+        protected final Map<String, EntityMemento> entities = Maps.newLinkedHashMap();\n+        protected final Map<String, LocationMemento> locations = Maps.newLinkedHashMap();\n+        protected final Map<String, PolicyMemento> policies = Maps.newLinkedHashMap();\n         \n         public Builder brooklynVersion(String val) {\n             brooklynVersion = val; return this;",
                "deletions": 5
            },
            {
                "sha": "94c44d6d3f919ca8a043aaa3751fe25b5b018cc4",
                "filename": "core/src/main/java/brooklyn/entity/rebind/persister/BrooklynMementoPersisterToMultiFile.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/f9dd10afcce16f7c1ae309d12a7b1670d9163188/core/src/main/java/brooklyn/entity/rebind/persister/BrooklynMementoPersisterToMultiFile.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/f9dd10afcce16f7c1ae309d12a7b1670d9163188/core/src/main/java/brooklyn/entity/rebind/persister/BrooklynMementoPersisterToMultiFile.java",
                "status": "modified",
                "changes": 22,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/rebind/persister/BrooklynMementoPersisterToMultiFile.java?ref=f9dd10afcce16f7c1ae309d12a7b1670d9163188",
                "patch": "@@ -111,18 +111,30 @@ public BrooklynMemento loadMemento(LookupContext lookupContext) throws IOExcepti\n         try {\n             for (File file : entityFiles) {\n                 EntityMemento memento = (EntityMemento) serializer.fromString(readFile(file));\n-                builder.entity(memento);\n-                if (memento.isTopLevelApp()) {\n-                    builder.applicationId(memento.getId());\n+                if (memento == null) {\n+                    LOG.warn(\"No entity-memento deserialized from file \"+file+\"; ignoring and continuing\");\n+                } else {\n+                    builder.entity(memento);\n+                    if (memento.isTopLevelApp()) {\n+                        builder.applicationId(memento.getId());\n+                    }\n                 }\n             }\n             for (File file : locationFiles) {\n                 LocationMemento memento = (LocationMemento) serializer.fromString(readFile(file));\n-                builder.location(memento);\n+                if (memento == null) {\n+                    LOG.warn(\"No location-memento deserialized from file \"+file+\"; ignoring and continuing\");\n+                } else {\n+                    builder.location(memento);\n+                }\n             }\n             for (File file : policyFiles) {\n                 PolicyMemento memento = (PolicyMemento) serializer.fromString(readFile(file));\n-                builder.policy(memento);\n+                if (memento == null) {\n+                    LOG.warn(\"No policy-memento deserialized from file \"+file+\"; ignoring and continuing\");\n+                } else {\n+                    builder.policy(memento);\n+                }\n             }\n             \n             if (LOG.isDebugEnabled()) LOG.debug(\"Loaded memento; took {}\", Time.makeTimeStringRounded(stopwatch.elapsed(TimeUnit.MILLISECONDS))); ",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Fix NPE in CassandraClusterImpl update of HostAndPort",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/8b889d3288b2e6caf453e2cd17553314c4dbacec",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/aff8bc8ad93dd8570d4245bd4197c3c982e95b6e",
        "bug_id": "incubator-brooklyn_37",
        "file": [
            {
                "sha": "aa10487b86b5653651c6a605205bba97fb68b5fe",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8b889d3288b2e6caf453e2cd17553314c4dbacec/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8b889d3288b2e6caf453e2cd17553314c4dbacec/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "status": "modified",
                "changes": 13,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java?ref=8b889d3288b2e6caf453e2cd17553314c4dbacec",
                "patch": "@@ -313,7 +313,11 @@ protected void connectSensors() {\n         connectEnrichers();\n         \n         // track members\n-        policy = new AbstractMembershipTrackingPolicy(MutableMap.of(\"name\", \"Cassandra Cluster Tracker\")) {\n+        Map<String, Object> flags = MutableMap.<String, Object>builder()\n+                .put(\"name\", \"Cassandra Cluster Tracker\")\n+                .put(\"sensorsToTrack\", ImmutableSet.of(Attributes.SERVICE_UP, Attributes.HOSTNAME, CassandraNode.THRIFT_PORT))\n+                .build();\n+        policy = new AbstractMembershipTrackingPolicy(flags) {\n             @Override\n             protected void onEntityChange(Entity member) {\n                 if (log.isDebugEnabled()) log.debug(\"Node {} updated in Cluster {}\", member, this);\n@@ -404,8 +408,11 @@ public void update() {\n                 Set<String> newNodes = MutableSet.<String>of();\n                 for (Entity member : getMembers()) {\n                     if (member instanceof CassandraNode && Boolean.TRUE.equals(member.getAttribute(SERVICE_UP))) {\n-                        HostAndPort address = HostAndPort.fromParts(member.getAttribute(HOSTNAME), member.getAttribute(THRIFT_PORT));\n-                        newNodes.add(address.toString());\n+                        String hostname = member.getAttribute(HOSTNAME);\n+                        Integer thriftPort = member.getAttribute(THRIFT_PORT);\n+                        if (hostname != null && thriftPort != null) {\n+                            newNodes.add(HostAndPort.fromParts(hostname, thriftPort).toString());\n+                        }\n                     }\n                 }\n                 if (Sets.symmetricDifference(oldNodes, newNodes).size() > 0) {",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Fix NPE when processOwner not set",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/09527119ba89d8b31a7ef0fe59da4d505d1af610",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/b3124467cec4e24ec707df81a671db94aede105f",
        "bug_id": "incubator-brooklyn_38",
        "file": [
            {
                "sha": "ee2804e7a43fa17481cc08a27c4e50c87c1d1c90",
                "filename": "software/base/src/main/java/brooklyn/entity/basic/AbstractSoftwareProcessSshDriver.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/09527119ba89d8b31a7ef0fe59da4d505d1af610/software/base/src/main/java/brooklyn/entity/basic/AbstractSoftwareProcessSshDriver.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/09527119ba89d8b31a7ef0fe59da4d505d1af610/software/base/src/main/java/brooklyn/entity/basic/AbstractSoftwareProcessSshDriver.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/basic/AbstractSoftwareProcessSshDriver.java?ref=09527119ba89d8b31a7ef0fe59da4d505d1af610",
                "patch": "@@ -320,7 +320,7 @@ protected ScriptHelper newScript(Map<?,?> flags, String phase) {\n \n         if (truth(flags.get(USE_PID_FILE))) {\n             String pidFile = (flags.get(USE_PID_FILE) instanceof CharSequence ? flags.get(USE_PID_FILE) : getRunDir()+\"/\"+PID_FILENAME).toString();\n-            String processOwner = (flags.containsKey(PROCESS_OWNER) ? flags.get(PROCESS_OWNER) : getMachine().getUser()).toString();\n+            String processOwner = (String) flags.get(PROCESS_OWNER);\n             if (LAUNCHING.equals(phase)) {\n                 s.footer.prepend(\"echo $! > \"+pidFile);\n             } else if (CHECK_RUNNING.equals(phase)) {\n@@ -338,15 +338,15 @@ protected ScriptHelper newScript(Map<?,?> flags, String phase) {\n                 s.body.append(\n                         \"export PID=`cat \"+pidFile+\"`\",\n                         \"[[ -n \\\"$PID\\\" ]] || exit 0\",\n-                        BashCommands.sudoAsUser(processOwner, \"kill $PID\"),\n-                        BashCommands.sudoAsUser(processOwner, \"kill -9 $PID\"),\n+                        processOwner != null ? BashCommands.sudoAsUser(processOwner, \"kill $PID\") : \"kill $PID\",\n+                        processOwner != null ? BashCommands.sudoAsUser(processOwner, \"kill -9 $PID\") : \"kill -9 $PID\",\n                         \"rm -f \"+pidFile\n                         );\n             } else if (KILLING.equals(phase)) {\n                 s.body.append(\n                         \"export PID=`cat \"+pidFile+\"`\",\n                         \"[[ -n \\\"$PID\\\" ]] || exit 0\",\n-                        BashCommands.sudoAsUser(processOwner, \"kill -9 $PID\"),\n+                        processOwner != null ? BashCommands.sudoAsUser(processOwner, \"kill -9 $PID\") : \"kill -9 $PID\",\n                         \"rm -f \"+pidFile\n                         );\n             } else if (RESTARTING.equals(phase)) {",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "avoid NPE when stopping after error (cassandra)",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/0a02b89d8d1d48d40d81640d6542c34ef126aed3",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/2c786756a3eba7417f6768894029dc6654dbe910",
        "bug_id": "incubator-brooklyn_39",
        "file": [
            {
                "sha": "160c4f67271ccb209dd2fb48cf3d46ecd5ca754b",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraNodeImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/0a02b89d8d1d48d40d81640d6542c34ef126aed3/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraNodeImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/0a02b89d8d1d48d40d81640d6542c34ef126aed3/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraNodeImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraNodeImpl.java?ref=0a02b89d8d1d48d40d81640d6542c34ef126aed3",
                "patch": "@@ -454,7 +454,7 @@ public void disconnectSensors() {\n \n         if (jmxFeed != null) jmxFeed.stop();\n         if (jmxMxBeanFeed != null) jmxMxBeanFeed.stop();\n-        if (jmxHelper.isConnected()) jmxHelper.disconnect();\n+        if (jmxHelper != null && jmxHelper.isConnected()) jmxHelper.disconnect();\n         if (functionFeed != null) functionFeed.stop();\n     }\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Avoid NPE in toMetadataRecord for jclouds machine",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/87c532224e0129f4fd6eeed58533fc59df7cb5c7",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/7f9dd9e6f28a717479bb1cbb25831b4353d29047",
        "bug_id": "incubator-brooklyn_40",
        "file": [
            {
                "sha": "282a37fdd723c5c9d63cf22d68da0a1597b85fc5",
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsSshMachineLocation.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/87c532224e0129f4fd6eeed58533fc59df7cb5c7/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsSshMachineLocation.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/87c532224e0129f4fd6eeed58533fc59df7cb5c7/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsSshMachineLocation.java",
                "status": "modified",
                "changes": 14,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsSshMachineLocation.java?ref=87c532224e0129f4fd6eeed58533fc59df7cb5c7",
                "patch": "@@ -5,6 +5,7 @@\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.TimeUnit;\n@@ -15,7 +16,9 @@\n import org.jclouds.compute.ComputeServiceContext;\n import org.jclouds.compute.callables.RunScriptOnNode;\n import org.jclouds.compute.domain.ExecResponse;\n+import org.jclouds.compute.domain.Hardware;\n import org.jclouds.compute.domain.NodeMetadata;\n+import org.jclouds.compute.domain.Processor;\n import org.jclouds.compute.options.RunScriptOptions;\n import org.jclouds.domain.LoginCredentials;\n import org.jclouds.scriptbuilder.domain.InterpretableStatement;\n@@ -209,16 +212,19 @@ public OsDetails getOsDetails() {\n     \n     @Override\n     public Map<String, String> toMetadataRecord() {\n+        Hardware hardware = node.getHardware();\n+        List<? extends Processor> processors = (hardware != null) ? hardware.getProcessors() : null;\n+        \n         ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();\n         builder.putAll(super.toMetadataRecord());\n         putIfNotNull(builder, \"provider\", getParent().getProvider());\n         putIfNotNull(builder, \"account\", getParent().getIdentity());\n         putIfNotNull(builder, \"serverId\", node.getProviderId());\n         putIfNotNull(builder, \"imageId\", node.getImageId());\n-        putIfNotNull(builder, \"instanceTypeName\", node.getHardware().getName());\n-        putIfNotNull(builder, \"instanceTypeId\", node.getHardware().getProviderId());\n-        putIfNotNull(builder, \"ram\", \"\" + node.getHardware().getRam());\n-        putIfNotNull(builder, \"cpus\", \"\" + node.getHardware().getProcessors().size());\n+        putIfNotNull(builder, \"instanceTypeName\", (hardware != null ? hardware.getName() : null));\n+        putIfNotNull(builder, \"instanceTypeId\", (hardware != null ? hardware.getProviderId() : null));\n+        putIfNotNull(builder, \"ram\", \"\" + (hardware != null ? hardware.getRam() : null));\n+        putIfNotNull(builder, \"cpus\", \"\" + (processors != null ? processors.size() : null));\n         putIfNotNull(builder, \"osName\", getOsDetails().getName());\n         putIfNotNull(builder, \"osArch\", getOsDetails().getArch());\n         putIfNotNull(builder, \"64bit\", getOsDetails().is64bit() ? \"true\" : \"false\");",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Fix NPE in TomcatServer.disconnectSensors (when inactive)",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/b84033a1080afa09977832d7be4b8facde233bf5",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/2900a3077d7b1af5dbaa53d6291d72309d0c96a5",
        "bug_id": "incubator-brooklyn_41",
        "file": [
            {
                "sha": "a6c1b728a4d705eda9ba444ce16f1e0459b86d72",
                "filename": "software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/b84033a1080afa09977832d7be4b8facde233bf5/software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/b84033a1080afa09977832d7be4b8facde233bf5/software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java?ref=b84033a1080afa09977832d7be4b8facde233bf5",
                "patch": "@@ -1,6 +1,6 @@\n package brooklyn.entity.webapp.tomcat;\n \n-import static java.lang.String.*;\n+import static java.lang.String.format;\n \n import java.util.concurrent.TimeUnit;\n \n@@ -71,7 +71,7 @@ public void connectSensors() {\n     public void disconnectSensors() {\n         super.disconnectSensors();\n         if (getDriver().isJmxEnabled()) {\n-           if (jmxFeed.isActivated()) jmxFeed.stop();\n+           if (jmxFeed != null) jmxFeed.stop();\n         } else {\n             disconnectServiceUpIsRunning();\n         }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Fix NPE on creating entities with no explicit location",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/5868b7d65a247512cb14d78f0406ca7de52eb508",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/253583e8cc68c8edf8bee5c725497bd393b8be02",
        "bug_id": "incubator-brooklyn_42",
        "file": [
            {
                "sha": "8381e99ceb54bac71e9f0c64dfa563d6461f1ee9",
                "filename": "software/base/src/main/java/brooklyn/entity/software/MachineLifecycleEffectorTasks.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/5868b7d65a247512cb14d78f0406ca7de52eb508/software/base/src/main/java/brooklyn/entity/software/MachineLifecycleEffectorTasks.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/5868b7d65a247512cb14d78f0406ca7de52eb508/software/base/src/main/java/brooklyn/entity/software/MachineLifecycleEffectorTasks.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/software/MachineLifecycleEffectorTasks.java?ref=5868b7d65a247512cb14d78f0406ca7de52eb508",
                "patch": "@@ -152,12 +152,18 @@ public void attachLifecycleEffectors(Entity entity) {\n         return new EffectorBody<Void>() {\n             @Override\n             public Void call(ConfigBag parameters) {\n+                Collection<? extends Location> locations  = null;\n+\n                 Object locationsRaw = parameters.getStringKey(LOCATIONS.getName());\n-                Collection<? extends Location> locations = Locations.coerceToCollection(entity().getManagementContext(), locationsRaw);\n+                if (locationsRaw != null) {\n+                    locations = Locations.coerceToCollection(entity().getManagementContext(), locationsRaw);\n+                }\n+\n                 if (locations==null) {\n                     // null/empty will mean to inherit from parent\n                     locations = Collections.emptyList();\n                 }\n+\n                 start(locations);\n                 return null;\n             }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Avoid NPE on SoftwareProcessEntity.start(null)",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/71561bb1ebf63cc24000ca07590a9c50491d9e82",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/8285cb7e320824eed67c1a77c77182d20cb87b4a",
        "bug_id": "incubator-brooklyn_43",
        "file": [
            {
                "sha": "48c94b5b82a1746b15a27d36ca42aff171804e0f",
                "filename": "software/base/src/main/java/brooklyn/entity/basic/SoftwareProcessEntity.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/71561bb1ebf63cc24000ca07590a9c50491d9e82/software/base/src/main/java/brooklyn/entity/basic/SoftwareProcessEntity.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/71561bb1ebf63cc24000ca07590a9c50491d9e82/software/base/src/main/java/brooklyn/entity/basic/SoftwareProcessEntity.groovy",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/basic/SoftwareProcessEntity.groovy?ref=71561bb1ebf63cc24000ca07590a9c50491d9e82",
                "patch": "@@ -1,5 +1,7 @@\n package brooklyn.entity.basic\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n import groovy.time.TimeDuration\n \n import java.util.concurrent.TimeUnit\n@@ -219,9 +221,10 @@ public abstract class SoftwareProcessEntity extends AbstractEntity implements St\n \n     @Override\n \tpublic void start(Collection<? extends Location> locations) {\n+        checkNotNull(locations, \"locations\");\n \t\tsetAttribute(SERVICE_STATE, Lifecycle.STARTING)\n \t\tif (!sensorRegistry) sensorRegistry = new SensorRegistry(this)\n-\n+        \n \t\tstartInLocation locations\n \t\tpostStart()\n \t\tsensorRegistry.activateAdapters()\n@@ -234,7 +237,7 @@ public abstract class SoftwareProcessEntity extends AbstractEntity implements St\n \t\tif (locations.size() != 1) {\n             throw new IllegalArgumentException(\"Expected one location when starting \"+this+\", but given \"+locations);\n \t\t}\n-\t\tLocation location = Iterables.getOnlyElement(locations)\n+\t\tLocation location = checkNotNull(Iterables.getOnlyElement(locations), \"location\");\n \t\tstartInLocation(location)\n \t}\n ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Geo info: log and fix NPE",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/ac8c47d3b5b6a9381baad358daafea0e6817742b",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/afe0f087522760ec884f99be6dd4f55f03f01713",
        "bug_id": "incubator-brooklyn_44",
        "file": [
            {
                "sha": "b73060f60056f61b75cc54f35278272ede97872f",
                "filename": "core/src/main/java/brooklyn/location/geo/HostGeoInfo.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/ac8c47d3b5b6a9381baad358daafea0e6817742b/core/src/main/java/brooklyn/location/geo/HostGeoInfo.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/ac8c47d3b5b6a9381baad358daafea0e6817742b/core/src/main/java/brooklyn/location/geo/HostGeoInfo.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/geo/HostGeoInfo.java?ref=ac8c47d3b5b6a9381baad358daafea0e6817742b",
                "patch": "@@ -35,7 +35,7 @@ public static HostGeoInfo fromIpAddress(InetAddress address) {\n             }\n         } catch (Exception e) {\n             if (log.isDebugEnabled())\n-                log.debug(\"unable to look up geo DNS info for \"+address+\": \"+e);\n+                log.debug(\"unable to look up geo DNS info for \"+address, e);\n         }\n         return null;\n     }",
                "deletions": 1
            },
            {
                "sha": "6e22373137c812c34d0f6936668f459ee6ee74b4",
                "filename": "core/src/main/java/brooklyn/location/geo/MaxMindHostGeoLookup.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/ac8c47d3b5b6a9381baad358daafea0e6817742b/core/src/main/java/brooklyn/location/geo/MaxMindHostGeoLookup.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/ac8c47d3b5b6a9381baad358daafea0e6817742b/core/src/main/java/brooklyn/location/geo/MaxMindHostGeoLookup.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/geo/MaxMindHostGeoLookup.java?ref=ac8c47d3b5b6a9381baad358daafea0e6817742b",
                "patch": "@@ -45,6 +45,11 @@ public HostGeoInfo getHostGeoInfo(InetAddress address) throws MalformedURLExcept\n         if (NetworkUtils.isPrivateSubnet(extAddress)) extAddress = InetAddress.getByName(UtraceHostGeoLookup.getLocalhostExternalIp());\n         \n         com.maxmind.geoip.Location l = ll.getLocation(extAddress);\n+        if (l==null) {\n+            if (log.isDebugEnabled()) log.debug(\"Geo info failed to find location for address {}, using {}\", extAddress, ll);\n+            return null;\n+        }\n+        \n         try {\n             StringBuilder name = new StringBuilder();\n             ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "fix for NPE when passphrase not set",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/cd69b45599c1d3ed2d034b69d52261a290b6789b",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/7bd88762fd71c6ba7f8cfc367b84eae0aff2605a",
        "bug_id": "incubator-brooklyn_45",
        "file": [
            {
                "sha": "3ec5603b40909db99da5c02ec484c82ebf809c10",
                "filename": "core/src/main/java/brooklyn/util/internal/ssh/SshjClientConnection.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/cd69b45599c1d3ed2d034b69d52261a290b6789b/core/src/main/java/brooklyn/util/internal/ssh/SshjClientConnection.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/cd69b45599c1d3ed2d034b69d52261a290b6789b/core/src/main/java/brooklyn/util/internal/ssh/SshjClientConnection.java",
                "status": "modified",
                "changes": 11,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/util/internal/ssh/SshjClientConnection.java?ref=cd69b45599c1d3ed2d034b69d52261a290b6789b",
                "patch": "@@ -32,6 +32,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import brooklyn.util.GroovyJavaMethods;\n import brooklyn.util.internal.ssh.SshjTool.SshAction;\n \n import com.google.common.base.Objects;\n@@ -176,11 +177,17 @@ public SSHClient create() throws Exception {\n             ssh.authPassword(username, password);\n         } else if (privateKeyData != null) {\n             OpenSSHKeyFile key = new OpenSSHKeyFile();\n-            key.init(privateKeyData, null, PasswordUtils.createOneOff(privateKeyPassphrase.toCharArray()));\n+            key.init(privateKeyData, null, \n+                    GroovyJavaMethods.truth(privateKeyPassphrase) ? \n+                            PasswordUtils.createOneOff(privateKeyPassphrase.toCharArray())\n+                            : null);\n             ssh.authPublickey(username, key);\n         } else if (privateKeyFile != null) {\n             OpenSSHKeyFile key = new OpenSSHKeyFile();\n-            key.init(privateKeyFile, PasswordUtils.createOneOff(privateKeyPassphrase.toCharArray()));\n+            key.init(privateKeyFile, \n+                    GroovyJavaMethods.truth(privateKeyPassphrase) ? \n+                            PasswordUtils.createOneOff(privateKeyPassphrase.toCharArray())\n+                            : null);\n             ssh.authPublickey(username, key);\n         } else {\n             // Accept defaults (in ~/.ssh)",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Fixed the NPE problems with the pools",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/24b2c0a67d64f4cff226b5a786476816bbfe56ee",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/a0ebe0b281323ae20cd40f4e204af9c3a4d40bfd",
        "bug_id": "incubator-brooklyn_46",
        "file": [
            {
                "sha": "01869e0be4d2ab8bc4ddc592cf66c50a3c842762",
                "filename": "policy/src/main/java/brooklyn/policy/followthesun/FollowTheSunPool.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/24b2c0a67d64f4cff226b5a786476816bbfe56ee/policy/src/main/java/brooklyn/policy/followthesun/FollowTheSunPool.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/24b2c0a67d64f4cff226b5a786476816bbfe56ee/policy/src/main/java/brooklyn/policy/followthesun/FollowTheSunPool.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/policy/src/main/java/brooklyn/policy/followthesun/FollowTheSunPool.java?ref=24b2c0a67d64f4cff226b5a786476816bbfe56ee",
                "patch": "@@ -155,7 +155,7 @@ public Integer resize(Integer desiredSize) {\n \n     private void onContainerAdded(Entity newContainer) {\n         subscribe(newContainer, Startable.SERVICE_UP, eventHandler);\n-        if (!(newContainer instanceof Startable) || newContainer.getAttribute(Startable.SERVICE_UP)) {\n+        if (!(newContainer instanceof Startable) || Boolean.TRUE.equals(newContainer.getAttribute(Startable.SERVICE_UP))) {\n             onContainerUp(newContainer);\n         }\n     }",
                "deletions": 1
            },
            {
                "sha": "7dc3ac7b2cf11126d771256a2bbdb5ac3193c1dc",
                "filename": "policy/src/main/java/brooklyn/policy/loadbalancing/BalanceableWorkerPool.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/24b2c0a67d64f4cff226b5a786476816bbfe56ee/policy/src/main/java/brooklyn/policy/loadbalancing/BalanceableWorkerPool.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/24b2c0a67d64f4cff226b5a786476816bbfe56ee/policy/src/main/java/brooklyn/policy/loadbalancing/BalanceableWorkerPool.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/policy/src/main/java/brooklyn/policy/loadbalancing/BalanceableWorkerPool.java?ref=24b2c0a67d64f4cff226b5a786476816bbfe56ee",
                "patch": "@@ -168,7 +168,7 @@ public Integer resize(Integer desiredSize) {\n     \n     private void onContainerAdded(BalanceableContainer<?> newContainer) {\n         subscribe(newContainer, Startable.SERVICE_UP, eventHandler);\n-        if (!(newContainer instanceof Startable) || newContainer.getAttribute(Startable.SERVICE_UP)) {\n+        if (!(newContainer instanceof Startable) || Boolean.TRUE.equals(newContainer.getAttribute(Startable.SERVICE_UP))) {\n             onContainerUp(newContainer);\n         }\n     }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "don't cause NPE inside location list coercions (alt fix for recent fix for NPE from where this is invoked in MachineLifecycleTasks), and some notes on jclouds location for softlayer",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/1bc16cf747d920adffddd354c9ce5b81cd463b7b",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/9fd29505a8217863cd422d53d097fa0169cb35cd",
        "bug_id": "incubator-brooklyn_47",
        "file": [
            {
                "sha": "09cef7cc98c74098f0eca6dc1996852c70611805",
                "filename": "core/src/main/java/brooklyn/location/basic/Locations.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/1bc16cf747d920adffddd354c9ce5b81cd463b7b/core/src/main/java/brooklyn/location/basic/Locations.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/1bc16cf747d920adffddd354c9ce5b81cd463b7b/core/src/main/java/brooklyn/location/basic/Locations.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/Locations.java?ref=1bc16cf747d920adffddd354c9ce5b81cd463b7b",
                "patch": "@@ -111,6 +111,8 @@ public static void manage(Location loc, ManagementContext managementContext) {\n     }\n \n     public static Location coerce(ManagementContext mgmt, Object rawO) {\n+        if (rawO==null)\n+            return null;\n         if (rawO instanceof Location)\n             return (Location)rawO;\n         ",
                "deletions": 0
            },
            {
                "sha": "c58d9bebed5fc9fabd560f36285b2345c863506b",
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/1bc16cf747d920adffddd354c9ce5b81cd463b7b/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/1bc16cf747d920adffddd354c9ce5b81cd463b7b/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java?ref=1bc16cf747d920adffddd354c9ce5b81cd463b7b",
                "patch": "@@ -888,6 +888,9 @@ public void apply(TemplateOptions t, ConfigBag props, Object v) {\n                         if (t instanceof EC2TemplateOptions) {\n                             if (v==null) return;\n                             ((EC2TemplateOptions)t).userData(v.toString().getBytes());\n+                            // TODO avail in next jclouds thanks to @andreaturli\n+//                          } else if (t instanceof SoftLayerTemplateOptions) {\n+//                              ((SoftLayerTemplateOptions)t).userData(Strings.toString(v));\n                         } else {\n                             LOG.info(\"ignoring userDataString({}) in VM creation because not supported for cloud/type ({})\", v, t.getClass());\n                         }\n@@ -897,6 +900,9 @@ public void apply(TemplateOptions t, ConfigBag props, Object v) {\n                         if (t instanceof EC2TemplateOptions) {\n                             byte[] bytes = toByteArray(v);\n                             ((EC2TemplateOptions)t).userData(bytes);\n+                          // TODO avail in next jclouds thanks to @andreaturli\n+//                        } else if (t instanceof SoftLayerTemplateOptions) {\n+//                            ((SoftLayerTemplateOptions)t).userData(Strings.toString(v));\n                         } else {\n                             LOG.info(\"ignoring userData({}) in VM creation because not supported for cloud/type ({})\", v, t.getClass());\n                         }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "BalanceablePoolModel: avoid NPE if duplicate onContainerRemoved received",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/32bb4db4efa3dcc738b25f3cb09a59348b70d939",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/b70188e59983a7dac184c2322e466ba823d42eaf",
        "bug_id": "incubator-brooklyn_48",
        "file": [
            {
                "sha": "589683c81882049847bc481aeaea75e64d7359dc",
                "filename": "extra/src/main/java/brooklyn/policy/loadbalancing/DefaultBalanceablePoolModel.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/32bb4db4efa3dcc738b25f3cb09a59348b70d939/extra/src/main/java/brooklyn/policy/loadbalancing/DefaultBalanceablePoolModel.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/32bb4db4efa3dcc738b25f3cb09a59348b70d939/extra/src/main/java/brooklyn/policy/loadbalancing/DefaultBalanceablePoolModel.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/extra/src/main/java/brooklyn/policy/loadbalancing/DefaultBalanceablePoolModel.java?ref=32bb4db4efa3dcc738b25f3cb09a59348b70d939",
                "patch": "@@ -156,8 +156,10 @@ public void onContainerAdded(ContainerType newContainer, double lowThreshold, do\n     @Override\n     public void onContainerRemoved(ContainerType oldContainer) {\n         containers.remove(oldContainer);\n-        poolLowThreshold -= containerToLowThreshold.remove(oldContainer);\n-        poolHighThreshold -= containerToHighThreshold.remove(oldContainer);\n+        Double containerLowThreshold = containerToLowThreshold.remove(oldContainer);\n+        Double containerHighThresold = containerToHighThreshold.remove(oldContainer);\n+        poolLowThreshold -= (containerLowThreshold != null ? containerLowThreshold : 0);\n+        poolHighThreshold -= (containerHighThresold != null ? containerHighThresold : 0);\n         \n         // TODO: assert no orphaned items\n     }",
                "deletions": 2
            },
            {
                "sha": "78a5c6ecffd73a48d13859d66b72aa9b32659957",
                "filename": "extra/src/main/java/brooklyn/policy/loadbalancing/LoadBalancingPolicy.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/32bb4db4efa3dcc738b25f3cb09a59348b70d939/extra/src/main/java/brooklyn/policy/loadbalancing/LoadBalancingPolicy.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/32bb4db4efa3dcc738b25f3cb09a59348b70d939/extra/src/main/java/brooklyn/policy/loadbalancing/LoadBalancingPolicy.groovy",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/extra/src/main/java/brooklyn/policy/loadbalancing/LoadBalancingPolicy.groovy?ref=32bb4db4efa3dcc738b25f3cb09a59348b70d939",
                "patch": "@@ -181,6 +181,7 @@ public class LoadBalancingPolicy extends AbstractPolicy {\n         return null\n     }\n     \n+    // TODO Receiving duplicates of onContainerRemoved (e.g. when running LoadBalancingInmemorySoakTest)\n     private void onContainerRemoved(Entity oldContainer, boolean rebalanceNow) {\n         if (LOG.isTraceEnabled()) LOG.trace(\"{} recording removal of container {}\", this, oldContainer)\n         model.onContainerRemoved(oldContainer)",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Eliminating NPE when port in use",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/82c36545e6664d5137dd573fa82fd9765cc3f520",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/fa7ac67961242add77c0021c210871ab6045176c",
        "bug_id": "incubator-brooklyn_49",
        "file": [
            {
                "sha": "a35df49fa3f3a9374bcc9d9ca1c09519c47b0a16",
                "filename": "extra/src/test/java/brooklyn/entity/webapp/tomcat/TomcatSimulator.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/82c36545e6664d5137dd573fa82fd9765cc3f520/extra/src/test/java/brooklyn/entity/webapp/tomcat/TomcatSimulator.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/82c36545e6664d5137dd573fa82fd9765cc3f520/extra/src/test/java/brooklyn/entity/webapp/tomcat/TomcatSimulator.groovy",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/extra/src/test/java/brooklyn/entity/webapp/tomcat/TomcatSimulator.groovy?ref=82c36545e6664d5137dd573fa82fd9765cc3f520",
                "patch": "@@ -64,7 +64,9 @@ public class TomcatSimulator {\n     }\n \n     public void shutdown() {\n-        jmxService.shutdown();\n+        if (jmxService) {\n+            jmxService.shutdown();\n+        }\n         jmxService = null;\n         synchronized (activeInstances) { activeInstances.remove(this) }\n         lock.release()",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "avoid NPE on rebind when locations have been unmanaged",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/6b4b9e5d31281d76b1478926e195a556592796c8",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/04a18c073cbf5a3a5911ad51ce9a76ec074e1d76",
        "bug_id": "incubator-brooklyn_50",
        "file": [
            {
                "sha": "595ab8a7285a03872d2e5ba275240ba6d11e5f75",
                "filename": "core/src/main/java/brooklyn/location/basic/FixedListMachineProvisioningLocation.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6b4b9e5d31281d76b1478926e195a556592796c8/core/src/main/java/brooklyn/location/basic/FixedListMachineProvisioningLocation.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6b4b9e5d31281d76b1478926e195a556592796c8/core/src/main/java/brooklyn/location/basic/FixedListMachineProvisioningLocation.java",
                "status": "modified",
                "changes": 25,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/FixedListMachineProvisioningLocation.java?ref=6b4b9e5d31281d76b1478926e195a556592796c8",
                "patch": "@@ -28,13 +28,17 @@\n import java.util.Map;\n import java.util.Set;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import brooklyn.location.Location;\n import brooklyn.location.LocationSpec;\n import brooklyn.location.MachineLocation;\n import brooklyn.location.MachineProvisioningLocation;\n import brooklyn.location.NoMachinesAvailableException;\n import brooklyn.management.LocationManager;\n import brooklyn.util.collections.MutableMap;\n+import brooklyn.util.collections.MutableSet;\n import brooklyn.util.flags.SetFromFlag;\n import brooklyn.util.stream.Streams;\n import brooklyn.util.text.WildcardGlobs;\n@@ -63,6 +67,8 @@\n     // and getMachines() returns the real sets risking \n     // ConcurrentModificationException in the caller if it iterates over them etc.\n     \n+    private static final Logger log = LoggerFactory.getLogger(FixedListMachineProvisioningLocation.class);\n+    \n     private final Object lock = new Object();\n     \n     @SetFromFlag\n@@ -89,14 +95,21 @@ public FixedListMachineProvisioningLocation(Map properties) {\n     public void init() {\n         super.init();\n         \n-        for (MachineLocation location: machines) {\n-            // FIXME Bad casting\n-            Location machine = (Location) location;\n-            Location parent = machine.getParent();\n-            if (parent == null) {\n-                addChild(machine);\n+        Set<T> machinesCopy = MutableSet.of();\n+        for (T location: machines) {\n+            if (location==null) {\n+                log.warn(\"\"+this+\" initialized with null location, removing (may be due to rebind with reference to an unmanaged location)\");\n+            } else {\n+                Location parent = location.getParent();\n+                if (parent == null) {\n+                    addChild(location);\n+                }\n+                machinesCopy.add(location);\n             }\n         }\n+        if (!machinesCopy.equals(machines)) {\n+            machines = machinesCopy;\n+        }\n     }\n     \n     @Override",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "HA master promotion: avoid NPE if no valid masters",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/cd75ce8b669f98eb48798b66ccc08e9f229fc918",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/30aea3cbd01fda453f60dc2bb082a3a5152ee6e5",
        "bug_id": "incubator-brooklyn_51",
        "file": [
            {
                "sha": "b941a9590f8cc84610d6640389d3fe87945a2d3f",
                "filename": "core/src/main/java/brooklyn/management/ha/HighAvailabilityManagerImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/cd75ce8b669f98eb48798b66ccc08e9f229fc918/core/src/main/java/brooklyn/management/ha/HighAvailabilityManagerImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/cd75ce8b669f98eb48798b66ccc08e9f229fc918/core/src/main/java/brooklyn/management/ha/HighAvailabilityManagerImpl.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/management/ha/HighAvailabilityManagerImpl.java?ref=cd75ce8b669f98eb48798b66ccc08e9f229fc918",
                "patch": "@@ -368,7 +368,8 @@ protected void checkMaster() {\n         }\n         \n         // Need to choose a new master\n-        String newMasterNodeId = masterChooser.choose(memento, heartbeatTimeout, ownNodeId, now).getNodeId();\n+        ManagementNodeSyncRecord newMasterRecord = masterChooser.choose(memento, heartbeatTimeout, ownNodeId, now);\n+        String newMasterNodeId = (newMasterRecord == null) ? null : newMasterRecord.getNodeId();\n         boolean newMasterIsSelf = ownNodeId.equals(newMasterNodeId);\n         \n         LOG.warn(\"Management node master-promotion required: newMaster={}; oldMaster={}; plane={}, self={}; heartbeatTimeout={}\", ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "jsonya now no-op if put(null), previously threw NPE",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/a46bf8039da74d5f1bb3dc0d85cc8f45bd937e9a",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/a336c0df5e67f06da7cb2865d1b3da1f42351d95",
        "bug_id": "incubator-brooklyn_52",
        "file": [
            {
                "sha": "c4bac406647a98e9dbf5f6b66218fd31d5fc5276",
                "filename": "utils/common/src/main/java/brooklyn/util/collections/Jsonya.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/a46bf8039da74d5f1bb3dc0d85cc8f45bd937e9a/utils/common/src/main/java/brooklyn/util/collections/Jsonya.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/a46bf8039da74d5f1bb3dc0d85cc8f45bd937e9a/utils/common/src/main/java/brooklyn/util/collections/Jsonya.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/utils/common/src/main/java/brooklyn/util/collections/Jsonya.java?ref=a46bf8039da74d5f1bb3dc0d85cc8f45bd937e9a",
                "patch": "@@ -213,9 +213,10 @@ protected void putInternal(Map target, Object k1, Object v1, Object ...kvOthers)\n             }\n         }\n \n-        /** as {@link #put(Object, Object, Object...)} for the kv-pairs in the given map */\n+        /** as {@link #put(Object, Object, Object...)} for the kv-pairs in the given map; ignores null for convenience */\n         public Navigator<T> put(Map map) {\n             map();\n+            if (map==null) return this;\n             ((Map)focus).putAll((Map)translate(map));\n             return this;\n         }\n@@ -388,6 +389,8 @@ protected void addFlattened(Collection target, Object item) {\n             target.add(translate(item));\n         }\n         \n+        /** Returns JSON serialized output for given focus in the given jsonya;\n+         * applies a naive toString for specialized types */\n         @Override\n         public String toString() {\n             return render(get());",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Fix NPE if loginUser is not present and useJcloudsSshInit is false",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/e07411973fc284c0f4c3d4cdee1fc00f4d8780c3",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/e3553a1df74cdaffdfa49c662587b70d5871e9a2",
        "bug_id": "incubator-brooklyn_53",
        "file": [
            {
                "sha": "4c3297d92f9808e0f59390afd7955ff0afb81055",
                "filename": "locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsLocation.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/e07411973fc284c0f4c3d4cdee1fc00f4d8780c3/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsLocation.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/e07411973fc284c0f4c3d4cdee1fc00f4d8780c3/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsLocation.java",
                "status": "modified",
                "changes": 12,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsLocation.java?ref=e07411973fc284c0f4c3d4cdee1fc00f4d8780c3",
                "patch": "@@ -2515,8 +2515,16 @@ protected LoginCredentials waitForSshable(final ComputeService computeService, f\n         LoginCredentials nodeCreds = node.getCredentials();\n         String nodeUser = nodeCreds.getUser();\n         String loginUserOverride = setup.get(LOGIN_USER);\n-        Set<String> users = MutableSet.<String>builder().add(nodeUser).add(loginUserOverride).build();\n-        \n+        Set<String> users = MutableSet.of();\n+\n+        if (Strings.isNonBlank(nodeUser)) {\n+            users.add(nodeUser);\n+        }\n+\n+        if (Strings.isNonBlank(loginUserOverride)) {\n+            users.add(loginUserOverride);\n+        }\n+\n         // See https://issues.apache.org/jira/browse/BROOKLYN-186\n         // Handle where jclouds gives us the wrong login user (!) and both a password + ssh key.\n         // Try all the permutations to find the one that works.",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Merge pull request #1344 from ahgittin/mongo\n\nMongo NPE check",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/3b1434b4f2abf769277e506e37f2fdc427d9d1c8",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/0098022e0e70361704ab7576c6eb94ae3da0a3d0",
        "bug_id": "incubator-brooklyn_54",
        "file": [
            {
                "sha": "5e4f325323a9476d340a84752fef6021a148ba42",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/3b1434b4f2abf769277e506e37f2fdc427d9d1c8/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/3b1434b4f2abf769277e506e37f2fdc427d9d1c8/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "status": "modified",
                "changes": 32,
                "additions": 30,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java?ref=3b1434b4f2abf769277e506e37f2fdc427d9d1c8",
                "patch": "@@ -1,7 +1,11 @@\n package brooklyn.entity.nosql.mongodb;\n \n+import java.util.List;\n import java.util.Map;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import brooklyn.entity.basic.EntityLocal;\n import brooklyn.entity.nosql.mongodb.sharding.MongoDBRouter;\n import brooklyn.entity.nosql.mongodb.sharding.MongoDBRouterCluster;\n@@ -18,6 +22,8 @@\n \n public class MongoDBClientSshDriver extends AbstractMongoDBSshDriver implements MongoDBClientDriver {\n     \n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDBClientSshDriver.class);\n+\n     private boolean isRunning = false;\n \n     public MongoDBClientSshDriver(EntityLocal entity, SshMachineLocation machine) {\n@@ -41,17 +47,39 @@ public void launch() {\n         AbstractMongoDBServer server = getServer();\n         String host = server.getAttribute(AbstractMongoDBServer.HOSTNAME);\n         Integer port = server.getAttribute(AbstractMongoDBServer.PORT);\n-        for (String scriptName : entity.getConfig(MongoDBClient.STARTUP_JS_SCRIPTS)) {\n-            runScript(\"\", scriptName, host, port);\n+        \n+        List<String> scripts = entity.getConfig(MongoDBClient.STARTUP_JS_SCRIPTS);\n+        if (scripts!=null) {\n+            for (String scriptName : scripts) {\n+                try {\n+                    LOG.debug(\"Running MongoDB script \"+scriptName+\" at \"+getEntity());\n+                    runScript(\"\", scriptName, host, port);\n+                } catch (Exception e) {\n+                    LOG.warn(\"Error running MongoDB script \"+scriptName+\" at \"+getEntity()+\", throwing: \"+e);\n+                    isRunning = false;\n+                    Exceptions.propagateIfFatal(e);\n+                    throw new IllegalStateException(\"Error running MongoDB script \"+scriptName+\" at \"+entity+\": \"+e, e);\n+                }\n+            }\n         }\n         isRunning = true;\n     }\n     \n     @Override\n     public boolean isRunning() {\n+        // TODO better would be to get some confirmation\n         return isRunning;\n     }\n     \n+    @Override\n+    public void stop() {\n+        try {\n+            super.stop();\n+        } finally {\n+            isRunning = false;\n+        }\n+    }\n+    \n     private String getUserScriptDir() {\n         return getRunDir() + \"/userScripts/\" ;\n     }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "This closes #973\n\nPrevent DynamicCluster NPE when subclasses have not called super.init()",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/f29b3fb10b19fe45d07d488c26c38ef6fefb6b1a",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/c2494dce841c3d6e0e4e14ed8ae63c4ac2b1dc30",
        "bug_id": "incubator-brooklyn_55",
        "file": [
            {
                "sha": "ac79dd69039f65c192c4d75878b79b33a6d5f462",
                "filename": "core/src/main/java/org/apache/brooklyn/entity/group/DynamicClusterImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/f29b3fb10b19fe45d07d488c26c38ef6fefb6b1a/core/src/main/java/org/apache/brooklyn/entity/group/DynamicClusterImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/f29b3fb10b19fe45d07d488c26c38ef6fefb6b1a/core/src/main/java/org/apache/brooklyn/entity/group/DynamicClusterImpl.java",
                "status": "modified",
                "changes": 20,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/org/apache/brooklyn/entity/group/DynamicClusterImpl.java?ref=f29b3fb10b19fe45d07d488c26c38ef6fefb6b1a",
                "patch": "@@ -170,7 +170,15 @@ public DynamicClusterImpl() {\n     @Override\n     public void init() {\n         super.init();\n-        sensors().set(NEXT_CLUSTER_MEMBER_ID, new NextClusterMemberIdSupplier());\n+        initialiseMemberId();\n+    }\n+\n+    private void initialiseMemberId() {\n+        synchronized (mutex) {\n+            if (sensors().get(NEXT_CLUSTER_MEMBER_ID) == null) {\n+                sensors().set(NEXT_CLUSTER_MEMBER_ID, new NextClusterMemberIdSupplier());\n+            }\n+        }\n     }\n \n     @Override\n@@ -778,11 +786,13 @@ public boolean removeChild(Entity child) {\n     }\n \n     @Override\n-    public Entity addNode(Location loc, Map<?,?> extraFlags) {\n-        Map<?,?> createFlags = MutableMap.builder()\n+    public Entity addNode(Location loc, Map<?, ?> extraFlags) {\n+        // In case subclasses are foolish and do not call super.init() when overriding.\n+        initialiseMemberId();\n+        Map<?, ?> createFlags = MutableMap.builder()\n                 .putAll(getCustomChildFlags())\n                 .putAll(extraFlags)\n-                .put(CLUSTER_MEMBER_ID, getAttribute(NEXT_CLUSTER_MEMBER_ID).get())\n+                .put(CLUSTER_MEMBER_ID, sensors().get(NEXT_CLUSTER_MEMBER_ID).get())\n                 .build();\n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Creating and adding a node to cluster {}({}) with properties {}\", new Object[] { this, getId(), createFlags });\n@@ -797,7 +807,7 @@ public Entity addNode(Location loc, Map<?,?> extraFlags) {\n         // Continue to call manage(), because some uses of NodeFactory (in tests) still instantiate the\n         // entity via its constructor\n         Entities.manage(entity);\n-        \n+\n         addMember(entity);\n         return entity;\n     }",
                "deletions": 5
            },
            {
                "sha": "1a80c3ab9908294a17d93819141b82625bb197ac",
                "filename": "software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/f29b3fb10b19fe45d07d488c26c38ef6fefb6b1a/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/f29b3fb10b19fe45d07d488c26c38ef6fefb6b1a/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetImpl.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetImpl.java?ref=f29b3fb10b19fe45d07d488c26c38ef6fefb6b1a",
                "patch": "@@ -137,6 +137,7 @@ public Entity apply(@Nullable Collection<Entity> entities) {\n     \n     @Override\n     public void init() {\n+        super.init();\n         enrichers().add(Enrichers.builder()\n                 .aggregating(MongoDBAuthenticationMixins.ROOT_USERNAME)\n                 .publishing(MongoDBAuthenticationMixins.ROOT_USERNAME)",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "avoid NPE in AbstractLocation if creationTimeUtc null\n\n- happens if you unmanaged and then remanage an entity.\n- the old creationTimeUtc will have been deleted from storage so will\n  be null, so doing `long l = createTimeUtc.get()` NPEs",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/b2c549a4aa2bdbf47f37730a1fd0ba12ecc26476",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/eacfb2667acd1715eace343a0103fddeecb8ff57",
        "bug_id": "incubator-brooklyn_56",
        "file": [
            {
                "sha": "808653f53ed4670023e6b36c80730ee4692696da",
                "filename": "core/src/main/java/brooklyn/location/basic/AbstractLocation.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/b2c549a4aa2bdbf47f37730a1fd0ba12ecc26476/core/src/main/java/brooklyn/location/basic/AbstractLocation.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/b2c549a4aa2bdbf47f37730a1fd0ba12ecc26476/core/src/main/java/brooklyn/location/basic/AbstractLocation.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/AbstractLocation.java?ref=b2c549a4aa2bdbf47f37730a1fd0ba12ecc26476",
                "patch": "@@ -167,7 +167,7 @@ public void setManagementContext(ManagementContextInternal managementContext) {\n         Location oldParent = parent.get();\n         Set<Location> oldChildren = children;\n         Map<String, Object> oldConfig = configBag.getAllConfig();\n-        long oldCreationTimeUtc = creationTimeUtc.get();\n+        Long oldCreationTimeUtc = creationTimeUtc.get();\n         String oldDisplayName = name.get();\n         HostGeoInfo oldHostGeoInfo = hostGeoInfo.get();\n         ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Fix NPE when CASSANDRA_CLUSTER_NODES not set",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/5d136f06ecc823ccc097e0b79252183745fc8d59",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/d8f3fa9a52c1b5e8420e7c1c519c0a424b8f2cf2",
        "bug_id": "incubator-brooklyn_57",
        "file": [
            {
                "sha": "d5e449a41ffc1db43b46b0d7b0f7c6f3a4cca4e7",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/5d136f06ecc823ccc097e0b79252183745fc8d59/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/5d136f06ecc823ccc097e0b79252183745fc8d59/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java?ref=5d136f06ecc823ccc097e0b79252183745fc8d59",
                "patch": "@@ -399,7 +399,8 @@ public void update() {\n                 setAttribute(HOSTNAME, upNode.get().getAttribute(Attributes.HOSTNAME));\n                 setAttribute(THRIFT_PORT, upNode.get().getAttribute(CassandraNode.THRIFT_PORT));\n                 \n-                Set<String> oldNodes = MutableSet.copyOf(getAttribute(CASSANDRA_CLUSTER_NODES));\n+                List<String> currentNodes = getAttribute(CASSANDRA_CLUSTER_NODES);\n+                Set<String> oldNodes = (currentNodes != null) ? MutableSet.copyOf(currentNodes) : MutableSet.<String>of();\n                 Set<String> newNodes = MutableSet.<String>of();\n                 for (Entity member: getMembers()) {\n                     if (member.getAttribute(SERVICE_UP)==Boolean.TRUE) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "fix NPE resolving name/id from web api",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/286891b9e4c2f16b42d90a1e286a7c0f980f204a",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/6381b412fa02d64228ad8f7e5e2abf2624057a61",
        "bug_id": "incubator-brooklyn_58",
        "file": [
            {
                "sha": "0b95766cac765bcd55a1db8dd455dd9f95601679",
                "filename": "core/src/main/java/brooklyn/location/basic/LocalhostPropertiesFromBrooklynProperties.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/286891b9e4c2f16b42d90a1e286a7c0f980f204a/core/src/main/java/brooklyn/location/basic/LocalhostPropertiesFromBrooklynProperties.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/286891b9e4c2f16b42d90a1e286a7c0f980f204a/core/src/main/java/brooklyn/location/basic/LocalhostPropertiesFromBrooklynProperties.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/LocalhostPropertiesFromBrooklynProperties.java?ref=286891b9e4c2f16b42d90a1e286a7c0f980f204a",
                "patch": "@@ -32,7 +32,8 @@\n         if (!Strings.isNullOrEmpty(namedLocation)) {\n             String namedProvider = getNamedProvider(namedLocation, properties);\n             if (!Strings.isNullOrEmpty(provider)) {\n-                if (!provider.equals(namedProvider)) throw new IllegalStateException(\"Conflicting configuration: provider=\"+provider+\"; namedLocation=\"+namedLocation+\"; namedProvider=\"+namedProvider);\n+                if (namedProvider!=null && !provider.equals(namedProvider)) \n+                    throw new IllegalStateException(\"Conflicting configuration: provider=\"+provider+\"; namedLocation=\"+namedLocation+\"; namedProvider=\"+namedProvider);\n             } else if (Strings.isNullOrEmpty(namedProvider)) {\n                 throw new IllegalStateException(\"Missing configuration: no named provider for named location \"+namedLocation);\n             }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "networkutils fix; npe on when a port is null",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/4d85f30b37b681afd3149b42782e4aa7c156a251",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/75c124476292f02a671a0fa9897751345d3d9cc5",
        "bug_id": "incubator-brooklyn_59",
        "file": [
            {
                "sha": "6190edffef567534bf63a509aa3030ae73b35a71",
                "filename": "core/src/main/java/brooklyn/util/NetworkUtils.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/4d85f30b37b681afd3149b42782e4aa7c156a251/core/src/main/java/brooklyn/util/NetworkUtils.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/4d85f30b37b681afd3149b42782e4aa7c156a251/core/src/main/java/brooklyn/util/NetworkUtils.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/util/NetworkUtils.java?ref=4d85f30b37b681afd3149b42782e4aa7c156a251",
                "patch": "@@ -67,7 +67,9 @@ public static void checkPortsValid(Map ports) {\n         for (Object ppo : ports.entrySet()) {\n             Map.Entry<?,?> pp = (Map.Entry<?,?>)ppo;\n             Object val = pp.getValue();\n-            if (!(val instanceof Integer)) {\n+            if(val == null){\n+                throw new IllegalArgumentException(\"port for \"+pp.getKey()+\" is null\");\n+            }else if (!(val instanceof Integer)) {\n                 throw new IllegalArgumentException(\"port \"+val+\" for \"+pp.getKey()+\" is not an integer (\"+val.getClass()+\")\");\n             }\n             checkPortValid((Integer)val, \"\"+pp.getKey());",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Whirr integration: avoid NPE in stop, when start was unsuccessful",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/f65d489637e55d22bef417ee4aa450e9751e98ba",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/f6d5f4f37663476dadfc0509b10f02e70d94a63f",
        "bug_id": "incubator-brooklyn_60",
        "file": [
            {
                "sha": "c5aa342001fdf5ad2553ef43c21013d51268f40a",
                "filename": "systems/whirr/hadoop/src/main/java/brooklyn/extras/whirr/hadoop/WhirrHadoopCluster.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/f65d489637e55d22bef417ee4aa450e9751e98ba/systems/whirr/hadoop/src/main/java/brooklyn/extras/whirr/hadoop/WhirrHadoopCluster.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/f65d489637e55d22bef417ee4aa450e9751e98ba/systems/whirr/hadoop/src/main/java/brooklyn/extras/whirr/hadoop/WhirrHadoopCluster.groovy",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/systems/whirr/hadoop/src/main/java/brooklyn/extras/whirr/hadoop/WhirrHadoopCluster.groovy?ref=f65d489637e55d22bef417ee4aa450e9751e98ba",
                "patch": "@@ -80,7 +80,7 @@ public class WhirrHadoopCluster extends WhirrCluster {\n \n     @Override\n     public void stop() {\n-        proxy.stop()\n+        proxy?.stop()\n         super.stop()\n     }\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Avoid NPE when item has no workrate in map",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/b5b37c49ac46c7bb0efd8acb1c707427e89e352b",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/e40470d2faa8e4007d08584eef03d5813df378f6",
        "bug_id": "incubator-brooklyn_61",
        "file": [
            {
                "sha": "bc8e364f357c4c085c0b95d3e6e27a121525b791",
                "filename": "extra/src/main/java/brooklyn/policy/loadbalancing/BalancingStrategy.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/b5b37c49ac46c7bb0efd8acb1c707427e89e352b/extra/src/main/java/brooklyn/policy/loadbalancing/BalancingStrategy.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/b5b37c49ac46c7bb0efd8acb1c707427e89e352b/extra/src/main/java/brooklyn/policy/loadbalancing/BalancingStrategy.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/extra/src/main/java/brooklyn/policy/loadbalancing/BalancingStrategy.java?ref=b5b37c49ac46c7bb0efd8acb1c707427e89e352b",
                "patch": "@@ -520,7 +520,12 @@ protected ItemType findBestItemToMove(Map<ItemType, Double> costsPerItem, double\n         \n         for (Entry<ItemType, Double> entry : costsPerItem.entrySet()) {\n             ItemType item = entry.getKey();\n-            double cost = entry.getValue();\n+            Double cost = entry.getValue();\n+            \n+            if (cost == null) {\n+                LOG.debug(MessageFormat.format(\"Item ''{0}'' has null workrate: skipping\", item));\n+                continue;\n+            }\n             \n             if (!model.isItemMoveable(item)) {\n                 LOG.debug(MessageFormat.format(\"Item ''{0}'' cannot be moved: skipping\", item));",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "HttpSensorAdapter: avoid NPE if URL returns empty string",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/d1eef27e59102febda357275202ea36034838a31",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/7239850e8842044098872c69cc09a7b4c8c644ac",
        "bug_id": "incubator-brooklyn_62",
        "file": [
            {
                "sha": "845cebe6462410abb6e95d37b0aa701151d88dfb",
                "filename": "core/src/main/java/brooklyn/event/adapter/HttpSensorAdapter.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/d1eef27e59102febda357275202ea36034838a31/core/src/main/java/brooklyn/event/adapter/HttpSensorAdapter.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/d1eef27e59102febda357275202ea36034838a31/core/src/main/java/brooklyn/event/adapter/HttpSensorAdapter.groovy",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/event/adapter/HttpSensorAdapter.groovy?ref=d1eef27e59102febda357275202ea36034838a31",
                "patch": "@@ -108,6 +108,8 @@ public class HttpSensorAdapter {\n     public String getJson(URL url, String key) {\n         try {\n \t        String jsonOut = new String(getContents(url))\n+            if (jsonOut == null || jsonOut.isEmpty()) return null\n+            \n \t        def slurper = new JsonSlurper()\n \t        def parsed = slurper.parseText(jsonOut)\n \t        return parsed[key]",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "summing/averaging aggregator: avoid NPE if sensor value is null",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/e02142f66ed4f9f5373ed3eb3feaed97f68ce3e6",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/ca1d6cd2072a3ec3a9967511f03f724b96039638",
        "bug_id": "incubator-brooklyn_63",
        "file": [
            {
                "sha": "77dd91491a9974af112bac9a423357d50b104366",
                "filename": "extra/src/main/java/brooklyn/policy/CustomAggregatingEnricher.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/e02142f66ed4f9f5373ed3eb3feaed97f68ce3e6/extra/src/main/java/brooklyn/policy/CustomAggregatingEnricher.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/e02142f66ed4f9f5373ed3eb3feaed97f68ce3e6/extra/src/main/java/brooklyn/policy/CustomAggregatingEnricher.groovy",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/extra/src/main/java/brooklyn/policy/CustomAggregatingEnricher.groovy?ref=e02142f66ed4f9f5373ed3eb3feaed97f68ce3e6",
                "patch": "@@ -76,13 +76,13 @@ class CustomAggregatingEnricher<T> extends AbstractPolicy implements SensorEvent\n     \n     public static <R extends Number> CustomAggregatingEnricher<R> getSummingEnricher(\n             List<Entity> producer, Sensor<R> source, Sensor<R> target) {\n-        return new CustomAggregatingEnricher<R>(producer, source, target, { it.sum(0) }, 0)\n+        return new CustomAggregatingEnricher<R>(producer, source, target, { it?.sum(0, {it ?: 0}) ?: 0 }, 0)\n     }\n \n     public static <R extends Number> CustomAggregatingEnricher<R> getAveragingEnricher(\n             List<Entity> producer, Sensor<R> source, Sensor<Double> target) {\n         return new CustomAggregatingEnricher<R>(producer, source, target, {\n-            it.isEmpty() ? 0d : (Double) it.sum(0) / it.size()\n+            (it == null || it.isEmpty()) ? 0d : (Double) it.sum(0, {it ?: 0}) / it.size()\n         }, 0d)\n     }\n ",
                "deletions": 2
            },
            {
                "sha": "61062a13c38f3be84b640b045f22bb60d8e30dce",
                "filename": "extra/src/test/java/brooklyn/policy/CustomAggregatingEnricherTest.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/e02142f66ed4f9f5373ed3eb3feaed97f68ce3e6/extra/src/test/java/brooklyn/policy/CustomAggregatingEnricherTest.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/e02142f66ed4f9f5373ed3eb3feaed97f68ce3e6/extra/src/test/java/brooklyn/policy/CustomAggregatingEnricherTest.groovy",
                "status": "modified",
                "changes": 39,
                "additions": 39,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/extra/src/test/java/brooklyn/policy/CustomAggregatingEnricherTest.groovy?ref=e02142f66ed4f9f5373ed3eb3feaed97f68ce3e6",
                "patch": "@@ -36,6 +36,23 @@ class CustomAggregatingEnricherTest {\n         assertEquals cae.getAggregate(), 0\n     }\n \n+    @Test\n+    public void testSummingEnricherWhenNoSensorValuesYet() {\n+        CustomAggregatingEnricher<Integer> cae = CustomAggregatingEnricher.<Integer>getSummingEnricher([producer],\n+                intSensor, target)\n+        producer.addPolicy(cae)\n+        assertEquals cae.getAggregate(), 0\n+    }\n+\n+    @Test\n+    public void testSummingEnricherWhenNullSensorValue() {\n+        CustomAggregatingEnricher<Integer> cae = CustomAggregatingEnricher.<Integer>getSummingEnricher([producer],\n+                intSensor, target)\n+        producer.addPolicy(cae)\n+        cae.onEvent(intSensor.newEvent(producer, null))\n+        assertEquals cae.getAggregate(), 0\n+    }\n+    \n     @Test\n     public void testSingleProducerSum() {\n         CustomAggregatingEnricher<Integer> cae = CustomAggregatingEnricher.<Integer>getSummingEnricher([producer],\n@@ -66,6 +83,28 @@ class CustomAggregatingEnricherTest {\n \n     }\n     \n+    @Test\n+    public void testAveragingEnricherWhenNoSensorValuesYet() {\n+        List<LocallyManagedEntity> producers = [\n+                [owner: app] as LocallyManagedEntity]\n+        CustomAggregatingEnricher<Double> cae = CustomAggregatingEnricher.<Double>getAveragingEnricher(producers,\n+            intSensor, new BasicAttributeSensor<Double>(Double.class, \"target sensor\"))\n+        producer.addPolicy(cae)\n+        assertEquals cae.getAggregate(), 0d\n+    }\n+\n+    @Test\n+    public void testAveragingEnricherWhenNullSensorValue() {\n+        List<LocallyManagedEntity> producers = [\n+                [owner: app] as LocallyManagedEntity]\n+        CustomAggregatingEnricher<Double> cae = CustomAggregatingEnricher.<Double>getAveragingEnricher(producers,\n+            intSensor, new BasicAttributeSensor<Double>(Double.class, \"target sensor\"))\n+        producer.addPolicy(cae)\n+        \n+        cae.onEvent(intSensor.newEvent(producers[0], null))\n+        assertEquals cae.getAggregate(), 0d\n+    }\n+\n     @Test\n     public void testMultipleProducersAverage() {\n         List<LocallyManagedEntity> producers = [",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Fix JMX adapter for when ActiveMQ throwns NPE\n\nActiveMQ sometimes throws NPE in MBeanServer during startup,\nbut when retrying then the problem goes away it seems.\n\nThese changes make the JmxSensorAdapter code more robust to this\nkind of error.",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/f8fc3237db92a44103e938e13d5eb4cfda8a99e6",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/35047dc279caa01e86f43ac0ba95b2479b553ca2",
        "bug_id": "incubator-brooklyn_64",
        "file": [
            {
                "sha": "50c3d2a57e2cb8566b30623df2dddaf53ebfc606",
                "filename": "core/src/main/java/brooklyn/event/adapter/AbstractPollHelper.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/f8fc3237db92a44103e938e13d5eb4cfda8a99e6/core/src/main/java/brooklyn/event/adapter/AbstractPollHelper.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/f8fc3237db92a44103e938e13d5eb4cfda8a99e6/core/src/main/java/brooklyn/event/adapter/AbstractPollHelper.groovy",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/event/adapter/AbstractPollHelper.groovy?ref=f8fc3237db92a44103e938e13d5eb4cfda8a99e6",
                "patch": "@@ -18,7 +18,7 @@ public abstract class AbstractPollHelper {\n \n     final Map<AttributeSensor, Closure> polledSensors = [:]\n \n-    boolean lastWasSuccessful = false;\n+    boolean lastWasSuccessful = true;\n \n     AbstractSensorAdapter adapter;\n     public AbstractPollHelper(AbstractSensorAdapter adapter) {",
                "deletions": 1
            },
            {
                "sha": "d76be3d89288544b15a8948a14dd9d0ca0c8e2ec",
                "filename": "core/src/main/java/brooklyn/event/adapter/JmxAttributeAdapter.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/f8fc3237db92a44103e938e13d5eb4cfda8a99e6/core/src/main/java/brooklyn/event/adapter/JmxAttributeAdapter.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/f8fc3237db92a44103e938e13d5eb4cfda8a99e6/core/src/main/java/brooklyn/event/adapter/JmxAttributeAdapter.groovy",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/event/adapter/JmxAttributeAdapter.groovy?ref=f8fc3237db92a44103e938e13d5eb4cfda8a99e6",
                "patch": "@@ -67,7 +67,9 @@ public class JmxAttributeAdapter extends AbstractSensorAdapter {\n         super.activateAdapter();\n         if (adapter.checkObjectNameExists(objectName)) {\n             if (log.isDebugEnabled()) \n-                log.debug(\"Initial value of $entity ${adapter.helper.url} JMX is: \"+adapter.helper.getAttribute(objectName, attributeName));\n+                log.debug(\"For $entity ${adapter.helper.url}, MBean ${objectName} exists\");\n+        } else {\n+            log.warn(\"For $entity ${adapter.helper.url}, MBean ${objectName} does not yet exist; continuing...\");\n         }\n     }\n }",
                "deletions": 1
            },
            {
                "sha": "a3e21d3f756233c2599bf40cc0c9dda8a111c914",
                "filename": "core/src/main/java/brooklyn/event/adapter/JmxHelper.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/f8fc3237db92a44103e938e13d5eb4cfda8a99e6/core/src/main/java/brooklyn/event/adapter/JmxHelper.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/f8fc3237db92a44103e938e13d5eb4cfda8a99e6/core/src/main/java/brooklyn/event/adapter/JmxHelper.groovy",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/event/adapter/JmxHelper.groovy?ref=f8fc3237db92a44103e938e13d5eb4cfda8a99e6",
                "patch": "@@ -159,14 +159,14 @@ public class JmxHelper {\n \n         triedConnecting = true\n         if (connector) connector.close()\n-        JMXServiceURL url = new JMXServiceURL(url)\n+        JMXServiceURL serviceUrl = new JMXServiceURL(url)\n         Map env = [:]\n         if (user && password) {\n             String[] creds = [user, password]\n             env.put(JMXConnector.CREDENTIALS, creds);\n         }\n         try {\n-            connector = JMXConnectorFactory.connect(url, env);\n+            connector = JMXConnectorFactory.connect(serviceUrl, env);\n         } catch (NullPointerException npe) {\n             //some software -- eg WSO2 -- will throw an NPE exception if the JMX connection can't be created, instead of an IOException.\n             //this is a break of contract with the JMXConnectorFactory.connect method, so this code verifies if the NPE is",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "tidy code for gathering couchbase sensors, and prevent NPE's using new functional methods",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/4b563d7b5bcf0873ae82fba1483ccf6fc9f4e919",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/9e9f50c6e02fbe35b36395404e53dd9b4ea1f81d",
        "bug_id": "incubator-brooklyn_65",
        "file": [
            {
                "sha": "06d9c187688fc6e83e67f3561749e028f71de1d0",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNodeImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/4b563d7b5bcf0873ae82fba1483ccf6fc9f4e919/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNodeImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/4b563d7b5bcf0873ae82fba1483ccf6fc9f4e919/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNodeImpl.java",
                "status": "modified",
                "changes": 93,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNodeImpl.java?ref=4b563d7b5bcf0873ae82fba1483ccf6fc9f4e919",
                "patch": "@@ -8,6 +8,7 @@\n \n import brooklyn.entity.basic.Attributes;\n import brooklyn.entity.basic.SoftwareProcessImpl;\n+import brooklyn.event.AttributeSensor;\n import brooklyn.event.SensorEvent;\n import brooklyn.event.SensorEventListener;\n import brooklyn.event.feed.http.HttpFeed;\n@@ -19,6 +20,9 @@\n import brooklyn.location.cloud.CloudLocationConfig;\n import brooklyn.util.collections.MutableSet;\n import brooklyn.util.config.ConfigBag;\n+import brooklyn.util.guava.Functionals;\n+import brooklyn.util.guava.MaybeFunctions;\n+import brooklyn.util.guava.TypeTokens;\n import brooklyn.util.http.HttpToolResponse;\n \n import com.google.common.base.Function;\n@@ -88,26 +92,35 @@ public void rebalance() {\n         getDriver().rebalance();\n     }\n \n+    protected final static Function<HttpToolResponse, JsonElement> GET_THIS_NODE_STATS = Functionals.chain(\n+        HttpValueFunctions.jsonContents(), \n+        JsonFunctions.walk(\"nodes\"), \n+        new Function<JsonElement, JsonElement>() {\n+            @Override public JsonElement apply(JsonElement input) {\n+                JsonArray nodes = input.getAsJsonArray();\n+                for (JsonElement element : nodes) {\n+                    JsonElement thisNode = element.getAsJsonObject().get(\"thisNode\");\n+                    if (thisNode!=null && Boolean.TRUE.equals(thisNode.getAsBoolean())) {\n+                        return element.getAsJsonObject().get(\"interestingStats\");\n+                    }\n+                }\n+                return null;\n+        }}\n+    );\n+    \n+    protected final static <T> HttpPollConfig<T> getSensorFromNodeStat(AttributeSensor<T> sensor, String ...jsonPath) {\n+        return new HttpPollConfig<T>(sensor)\n+            .onSuccess(Functionals.chain(GET_THIS_NODE_STATS, \n+                MaybeFunctions.<JsonElement>wrap(), \n+                JsonFunctions.walkM(jsonPath), \n+                JsonFunctions.castM(TypeTokens.getRawRawType(sensor.getTypeToken()), null)))\n+            .onFailureOrException(Functions.<T>constant(null));\n+    }\n \n     public void connectSensors() {\n         super.connectSensors();\n         connectServiceUpIsRunning();\n-        \n-        Function<HttpToolResponse, JsonElement> getThisNodesStats = HttpValueFunctions.chain(\n-            HttpValueFunctions.jsonContents(), \n-            JsonFunctions.walk(\"nodes\"), \n-            new Function<JsonElement, JsonElement>() {\n-                @Override public JsonElement apply(JsonElement input) {\n-                    JsonArray nodes = input.getAsJsonArray();\n-                    for (JsonElement element : nodes) {\n-                        if (Boolean.TRUE.equals(element.getAsJsonObject().get(\"thisNode\").getAsBoolean())) {\n-                            return element.getAsJsonObject().get(\"interestingStats\");\n-                        }\n-                    }\n-                    return null;\n-            }}\n-        );\n-        \n+                \n         Integer rawPort = getAttribute(CouchbaseNode.COUCHBASE_WEB_ADMIN_PORT);\n         Preconditions.checkNotNull(rawPort, \"HTTP_PORT sensors not set for %s; is an acceptable port available?\", this);\n         HostAndPort hp = BrooklynAccessUtils.getBrooklynAccessibleAddress(this, rawPort);\n@@ -119,42 +132,18 @@ public void connectSensors() {\n             .period(1000)\n             .baseUri(adminUrl + \"/pools/nodes/\")\n             .credentialsIfNotNull(getConfig(CouchbaseNode.COUCHBASE_ADMIN_USERNAME), getConfig(CouchbaseNode.COUCHBASE_ADMIN_PASSWORD))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.OPS)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"ops\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.COUCH_DOCS_DATA_SIZE)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"couch_docs_data_size\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.COUCH_DOCS_ACTUAL_DISK_SIZE)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"couch_docs_actual_disk_size\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.EP_BG_FETCHED)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"ep_bg_fetched\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.MEM_USED)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"mem_used\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.COUCH_VIEWS_ACTUAL_DISK_SIZE)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"couch_views_actual_disk_size\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.CURR_ITEMS)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"curr_items\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.VB_REPLICA_CURR_ITEMS)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"vb_replica_curr_items\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.COUCH_VIEWS_DATA_SIZE)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"couch_views_data_size\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.GET_HITS)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"get_hits\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.CMD_GET)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"cmd_get\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.CURR_ITEMS_TOT)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"curr_items_tot\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.OPS, \"ops\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.COUCH_DOCS_DATA_SIZE, \"couch_docs_data_size\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.COUCH_DOCS_ACTUAL_DISK_SIZE, \"couch_docs_actual_disk_size\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.EP_BG_FETCHED, \"ep_bg_fetched\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.MEM_USED, \"mem_used\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.COUCH_VIEWS_ACTUAL_DISK_SIZE, \"couch_views_actual_disk_size\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.CURR_ITEMS, \"curr_items\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.VB_REPLICA_CURR_ITEMS, \"vb_replica_curr_items\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.COUCH_VIEWS_DATA_SIZE, \"couch_views_data_size\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.GET_HITS, \"get_hits\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.CMD_GET, \"cmd_get\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.CURR_ITEMS_TOT, \"curr_items_tot\"))\n             .build();\n     }\n ",
                "deletions": 52
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Avoid NPE in JcloudsUtil.dockerPortMappingsFor\n\n- happened if container.getNetworkSettings().getPorts() returned null",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/81209ec02497b8c6299204174984ab85ef7e3cd4",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/ac87e04680f1179d8e0b32c189389ee9353032bf",
        "bug_id": "incubator-brooklyn_66",
        "file": [
            {
                "sha": "cc60409e56cc4f61a96c98a6b8c3dd674c212a14",
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsUtil.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/81209ec02497b8c6299204174984ab85ef7e3cd4/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsUtil.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/81209ec02497b8c6299204174984ab85ef7e3cd4/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsUtil.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsUtil.java?ref=81209ec02497b8c6299204174984ab85ef7e3cd4",
                "patch": "@@ -61,6 +61,7 @@\n import com.google.common.base.Predicates;\n import com.google.common.base.Splitter;\n import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.Maps;\n@@ -359,6 +360,8 @@ public static String waitForPasswordOnAws(ComputeService computeService, final N\n             Container container = api.getRemoteApi().inspectContainer(containerId);\n             Map<Integer, Integer> portMappings = Maps.newLinkedHashMap();\n             Map<String, List<Map<String, String>>> ports = container.getNetworkSettings().getPorts();\n+            if (ports == null) ports = ImmutableMap.<String, List<Map<String,String>>>of();\n+            \n             LOG.debug(\"Docker will forward these ports {}\", ports);\n             for (Map.Entry<String, List<Map<String, String>>> entrySet : ports.entrySet()) {\n                 String containerPort = Iterables.get(Splitter.on(\"/\").split(entrySet.getKey()), 0);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "HA manager: loadManagementPlaneSyncRecord avoid NPE if persister null\n\n- return an empty ManagementPlaneSyncRecordImpl",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/ac87e04680f1179d8e0b32c189389ee9353032bf",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/37a5e329e4cb60cbb859cf3c94eef15a26993135",
        "bug_id": "incubator-brooklyn_67",
        "file": [
            {
                "sha": "f19dcec0b73c65679b485802db0368ea35f717a9",
                "filename": "core/src/main/java/brooklyn/management/ha/HighAvailabilityManagerImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/ac87e04680f1179d8e0b32c189389ee9353032bf/core/src/main/java/brooklyn/management/ha/HighAvailabilityManagerImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/ac87e04680f1179d8e0b32c189389ee9353032bf/core/src/main/java/brooklyn/management/ha/HighAvailabilityManagerImpl.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/management/ha/HighAvailabilityManagerImpl.java?ref=ac87e04680f1179d8e0b32c189389ee9353032bf",
                "patch": "@@ -436,6 +436,11 @@ protected ManagementPlaneSyncRecord loadManagementPlaneSyncRecord(boolean replac\n             }\n             return builder.build();\n         }\n+        if (persister == null) {\n+            // e.g. web-console may be polling before we've started up\n+            LOG.debug(\"High availablity manager has no persister; returning empty record\");\n+            return ManagementPlaneSyncRecordImpl.builder().build();\n+        }\n         \n         int maxLoadAttempts = 5;\n         Exception lastException = null;",
                "deletions": 0
            },
            {
                "sha": "491e633ce0dab7ab2801988285b3fa10c2a48814",
                "filename": "core/src/test/java/brooklyn/management/ha/HighAvailabilityManagerTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/ac87e04680f1179d8e0b32c189389ee9353032bf/core/src/test/java/brooklyn/management/ha/HighAvailabilityManagerTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/ac87e04680f1179d8e0b32c189389ee9353032bf/core/src/test/java/brooklyn/management/ha/HighAvailabilityManagerTest.java",
                "status": "modified",
                "changes": 20,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/management/ha/HighAvailabilityManagerTest.java?ref=ac87e04680f1179d8e0b32c189389ee9353032bf",
                "patch": "@@ -2,6 +2,7 @@\n \n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotNull;\n import static org.testng.Assert.assertTrue;\n \n import java.util.List;\n@@ -69,6 +70,23 @@ public void tearDown() throws Exception {\n         if (managementContext != null) Entities.destroyAll(managementContext);\n     }\n     \n+    // The web-console could still be polling (e.g. if have just restarted brooklyn), before the persister is set.\n+    // Must not throw NPE, but instead return something sensible (e.g. an empty state record).\n+    @Test\n+    public void testGetManagementPlaneSyncStateDoesNotThrowNpeBeforePersisterSet() throws Exception {\n+        HighAvailabilityManagerImpl manager2 = new HighAvailabilityManagerImpl(managementContext)\n+            .setPollPeriod(Duration.of(10, TimeUnit.MILLISECONDS))\n+            .setHeartbeatTimeout(Duration.THIRTY_SECONDS)\n+            .setPromotionListener(promotionListener)\n+            .setTicker(ticker);\n+        try {\n+            ManagementPlaneSyncRecord state = manager2.getManagementPlaneSyncState();\n+            assertNotNull(state);\n+        } finally {\n+            manager2.stop();\n+        }\n+\n+    }\n     // Can get a log.error about our management node's heartbeat being out of date. Caused by\n     // poller first writing a heartbeat record, and then the clock being incremented. But the\n     // next poll fixes it.\n@@ -140,7 +158,7 @@ private long currentTimeMillis() {\n     }\n     \n     private long incrementClock(long increment, TimeUnit unit) {\n-        currentTime.addAndGet(unit.toNanos(increment));\n+        currentTime.addAndGet(unit.toMillis(increment));\n         return currentTimeMillis();\n     }\n     ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Disable HA when running from BrooklynRestApiLauncher\n\nOtherwise HighAvailabilityManagerImpl throws NPE when creating\nmanagement record",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/80c40c52e66fa25ed46c208a63e8a81131ae87a8",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/38b9031d11e27f176a817a6169c16f6452e0a262",
        "bug_id": "incubator-brooklyn_68",
        "file": [
            {
                "sha": "6465799758bb9eccc8a0a72232750a93afcf4fb2",
                "filename": "usage/rest-server/src/test/java/brooklyn/rest/BrooklynRestApiLauncher.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/80c40c52e66fa25ed46c208a63e8a81131ae87a8/usage/rest-server/src/test/java/brooklyn/rest/BrooklynRestApiLauncher.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/80c40c52e66fa25ed46c208a63e8a81131ae87a8/usage/rest-server/src/test/java/brooklyn/rest/BrooklynRestApiLauncher.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/rest-server/src/test/java/brooklyn/rest/BrooklynRestApiLauncher.java?ref=80c40c52e66fa25ed46c208a63e8a81131ae87a8",
                "patch": "@@ -171,6 +171,8 @@ public static Server startServer(ManagementContext mgmt, ContextHandler context,\n                 ((BrooklynProperties)mgmt.getConfig()).put(BrooklynWebConfig.SECURITY_PROVIDER_CLASSNAME, AnyoneSecurityProvider.class.getName());\n             }\n         }\n+        if (mgmt != null)\n+            mgmt.getHighAvailabilityManager().disabled();\n         InetSocketAddress bindLocation = new InetSocketAddress(\n                 secure ? Networking.ANY_NIC : Networking.LOOPBACK, \n                         Networking.nextAvailablePort(FAVOURITE_PORT));",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "tidy of MongoDB client NPE check (as per discussion in #1327), and clearing isRunning on stop",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/92a39ed2abc6624b606e1221636f572c07db26e8",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/f47bb5ca64939a69118b67c6ec231c0f207fdc4d",
        "bug_id": "incubator-brooklyn_69",
        "file": [
            {
                "sha": "5e4f325323a9476d340a84752fef6021a148ba42",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/92a39ed2abc6624b606e1221636f572c07db26e8/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/92a39ed2abc6624b606e1221636f572c07db26e8/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "status": "modified",
                "changes": 36,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java?ref=92a39ed2abc6624b606e1221636f572c07db26e8",
                "patch": "@@ -1,14 +1,11 @@\n package brooklyn.entity.nosql.mongodb;\n \n+import java.util.List;\n import java.util.Map;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.common.base.Preconditions;\n-import com.google.common.base.Predicate;\n-import com.google.common.base.Predicates;\n-\n import brooklyn.entity.basic.EntityLocal;\n import brooklyn.entity.nosql.mongodb.sharding.MongoDBRouter;\n import brooklyn.entity.nosql.mongodb.sharding.MongoDBRouterCluster;\n@@ -50,24 +47,39 @@ public void launch() {\n         AbstractMongoDBServer server = getServer();\n         String host = server.getAttribute(AbstractMongoDBServer.HOSTNAME);\n         Integer port = server.getAttribute(AbstractMongoDBServer.PORT);\n-        try {\n-            for (String scriptName : entity.getConfig(MongoDBClient.STARTUP_JS_SCRIPTS)) {\n-                runScript(\"\", scriptName, host, port);\n+        \n+        List<String> scripts = entity.getConfig(MongoDBClient.STARTUP_JS_SCRIPTS);\n+        if (scripts!=null) {\n+            for (String scriptName : scripts) {\n+                try {\n+                    LOG.debug(\"Running MongoDB script \"+scriptName+\" at \"+getEntity());\n+                    runScript(\"\", scriptName, host, port);\n+                } catch (Exception e) {\n+                    LOG.warn(\"Error running MongoDB script \"+scriptName+\" at \"+getEntity()+\", throwing: \"+e);\n+                    isRunning = false;\n+                    Exceptions.propagateIfFatal(e);\n+                    throw new IllegalStateException(\"Error running MongoDB script \"+scriptName+\" at \"+entity+\": \"+e, e);\n+                }\n             }\n-        } catch (NullPointerException e) {\n-            // FIXME avoid the null ptr, and do something more intelligent\n-            LOG.error(\"startupScripts not specified in MongoDBClientSshDriver launch method;\", e);\n-            isRunning = false;\n-            return;\n         }\n         isRunning = true;\n     }\n     \n     @Override\n     public boolean isRunning() {\n+        // TODO better would be to get some confirmation\n         return isRunning;\n     }\n     \n+    @Override\n+    public void stop() {\n+        try {\n+            super.stop();\n+        } finally {\n+            isRunning = false;\n+        }\n+    }\n+    \n     private String getUserScriptDir() {\n         return getRunDir() + \"/userScripts/\" ;\n     }",
                "deletions": 12
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Merge branch 'npe' of https://github.com/dave-finnegan/brooklyn into misc",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/f47bb5ca64939a69118b67c6ec231c0f207fdc4d",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/5f0b7793248cd25ba7a8557001269fcb869e0b52",
        "bug_id": "incubator-brooklyn_70",
        "file": [
            {
                "sha": "a8636b3756b40b89f860d8ec3e95b454cd9eb79c",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/f47bb5ca64939a69118b67c6ec231c0f207fdc4d/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/f47bb5ca64939a69118b67c6ec231c0f207fdc4d/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java",
                "status": "modified",
                "changes": 20,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/MongoDBClientSshDriver.java?ref=f47bb5ca64939a69118b67c6ec231c0f207fdc4d",
                "patch": "@@ -2,6 +2,13 @@\n \n import java.util.Map;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Predicate;\n+import com.google.common.base.Predicates;\n+\n import brooklyn.entity.basic.EntityLocal;\n import brooklyn.entity.nosql.mongodb.sharding.MongoDBRouter;\n import brooklyn.entity.nosql.mongodb.sharding.MongoDBRouterCluster;\n@@ -18,6 +25,8 @@\n \n public class MongoDBClientSshDriver extends AbstractMongoDBSshDriver implements MongoDBClientDriver {\n     \n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDBClientSshDriver.class);\n+\n     private boolean isRunning = false;\n \n     public MongoDBClientSshDriver(EntityLocal entity, SshMachineLocation machine) {\n@@ -41,8 +50,15 @@ public void launch() {\n         AbstractMongoDBServer server = getServer();\n         String host = server.getAttribute(AbstractMongoDBServer.HOSTNAME);\n         Integer port = server.getAttribute(AbstractMongoDBServer.PORT);\n-        for (String scriptName : entity.getConfig(MongoDBClient.STARTUP_JS_SCRIPTS)) {\n-            runScript(\"\", scriptName, host, port);\n+        try {\n+            for (String scriptName : entity.getConfig(MongoDBClient.STARTUP_JS_SCRIPTS)) {\n+                runScript(\"\", scriptName, host, port);\n+            }\n+        } catch (NullPointerException e) {\n+            // FIXME avoid the null ptr, and do something more intelligent\n+            LOG.error(\"startupScripts not specified in MongoDBClientSshDriver launch method;\", e);\n+            isRunning = false;\n+            return;\n         }\n         isRunning = true;\n     }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Fix NPE in tests by adding instanceof check for cluster members",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/a8ddf053d0f8a88110aac14b69168e43ad33164c",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/fa60830f6b266c4064313fb0f841d22865545733",
        "bug_id": "incubator-brooklyn_71",
        "file": [
            {
                "sha": "6c73ae175347f19d2450c22e44a9443a21226a8f",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/a8ddf053d0f8a88110aac14b69168e43ad33164c/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/a8ddf053d0f8a88110aac14b69168e43ad33164c/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/nosql/src/main/java/brooklyn/entity/nosql/cassandra/CassandraClusterImpl.java?ref=a8ddf053d0f8a88110aac14b69168e43ad33164c",
                "patch": "@@ -396,14 +396,14 @@ public void update() {\n             setAttribute(SERVICE_UP, upNode.isPresent());\n \n             if (upNode.isPresent()) {\n-                setAttribute(HOSTNAME, upNode.get().getAttribute(Attributes.HOSTNAME));\n-                setAttribute(THRIFT_PORT, upNode.get().getAttribute(CassandraNode.THRIFT_PORT));\n+                setAttribute(HOSTNAME, upNode.get().getAttribute(HOSTNAME));\n+                setAttribute(THRIFT_PORT, upNode.get().getAttribute(THRIFT_PORT));\n \n                 List<String> currentNodes = getAttribute(CASSANDRA_CLUSTER_NODES);\n                 Set<String> oldNodes = (currentNodes != null) ? ImmutableSet.copyOf(currentNodes) : ImmutableSet.<String>of();\n                 Set<String> newNodes = MutableSet.<String>of();\n-                for (Entity member: getMembers()) {\n-                    if (member.getAttribute(SERVICE_UP)==Boolean.TRUE) {\n+                for (Entity member : getMembers()) {\n+                    if (member instanceof CassandraNode && member.getAttribute(SERVICE_UP) == Boolean.TRUE) {\n                         HostAndPort address = HostAndPort.fromParts(member.getAttribute(HOSTNAME), member.getAttribute(THRIFT_PORT));\n                         newNodes.add(address.toString());\n                     }",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "JcloudsLocation: No NPE if setup.script is given but not setup.script.vars",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/e587dd5b3bea21c8dce8d1b13a46be135d6f0853",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/06c01537704381c99f517c68013556396c1e1e64",
        "bug_id": "incubator-brooklyn_72",
        "file": [
            {
                "sha": "ff6c596759fc01bbc473d4339e7509ec337d8b7b",
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/e587dd5b3bea21c8dce8d1b13a46be135d6f0853/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/e587dd5b3bea21c8dce8d1b13a46be135d6f0853/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java?ref=e587dd5b3bea21c8dce8d1b13a46be135d6f0853",
                "patch": "@@ -401,10 +401,12 @@ public JcloudsSshMachineLocation obtain(Map<?,?> flags) throws NoMachinesAvailab\n             if (!(waitForSshable!=null && \"false\".equalsIgnoreCase(waitForSshable))) {\n                String setupScript = setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_URL);\n                 if(Strings.isNonBlank(setupScript)) {\n-                   String setupVarsString = setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_VARS);\n-                   Map<String, String> substitutions = Splitter.on(\",\").withKeyValueSeparator(\":\").split(setupVarsString);\n-                   String script = TemplateProcessor.processTemplate(setupScript, substitutions);\n-                   sshMachineLocation.execCommands(\"Customizing node \" + this, ImmutableList.of(script));\n+                    String setupVarsString = setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_VARS);\n+                    Map<String, String> substitutions = (setupVarsString != null)\n+                            ? Splitter.on(\",\").withKeyValueSeparator(\":\").split(setupVarsString)\n+                            : Maps.<String, String>newHashMap();\n+                    String script = TemplateProcessor.processTemplate(setupScript, substitutions);\n+                    sshMachineLocation.execCommands(\"Customizing node \" + this, ImmutableList.of(script));\n                 }\n                 \n                 if (setup.get(JcloudsLocationConfig.MAP_DEV_RANDOM_TO_DEV_URANDOM))",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Merge pull request #920 from aledsage/fix/BrooklynLauncher-supplying-ManagementContext\n\nFix NPE when BrooklynLauncher given ManagementContext",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/5feb638f5988f7ed94fb85c3b39b542342a5d257",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/0441b3e73d6644a8b53c29925aade624bb70a6ee",
        "bug_id": "incubator-brooklyn_73",
        "file": [
            {
                "sha": "d5d353fba9804d284eef2177a3a8bc3d906d21dd",
                "filename": "core/src/main/java/brooklyn/management/internal/AbstractManagementContext.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/5feb638f5988f7ed94fb85c3b39b542342a5d257/core/src/main/java/brooklyn/management/internal/AbstractManagementContext.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/5feb638f5988f7ed94fb85c3b39b542342a5d257/core/src/main/java/brooklyn/management/internal/AbstractManagementContext.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/management/internal/AbstractManagementContext.java?ref=5feb638f5988f7ed94fb85c3b39b542342a5d257",
                "patch": "@@ -275,15 +275,22 @@ public T call() {\n \n     protected abstract <T> Task<T> runAtEntity(final Entity entity, final Effector<T> eff, @SuppressWarnings(\"rawtypes\") final Map parameters);\n \n+    @Override\n     public abstract void addEntitySetListener(CollectionChangeListener<Entity> listener);\n \n+    @Override\n     public abstract void removeEntitySetListener(CollectionChangeListener<Entity> listener);\n     \n     @Override\n     public StringConfigMap getConfig() {\n         return configMap;\n     }\n \n+    @Override\n+    public BrooklynProperties getBrooklynProperties() {\n+        return configMap;\n+    }\n+\n     @Override\n     public synchronized LocationRegistry getLocationRegistry() {\n         if (locationRegistry==null) locationRegistry = new BasicLocationRegistry(this);",
                "deletions": 0
            },
            {
                "sha": "57139e3bdab9edee45c896b93b7045ed93ed61e3",
                "filename": "core/src/main/java/brooklyn/management/internal/ManagementContextInternal.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/5feb638f5988f7ed94fb85c3b39b542342a5d257/core/src/main/java/brooklyn/management/internal/ManagementContextInternal.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/5feb638f5988f7ed94fb85c3b39b542342a5d257/core/src/main/java/brooklyn/management/internal/ManagementContextInternal.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/management/internal/ManagementContextInternal.java?ref=5feb638f5988f7ed94fb85c3b39b542342a5d257",
                "patch": "@@ -4,6 +4,7 @@\n import java.util.Map;\n import java.util.concurrent.ExecutionException;\n \n+import brooklyn.config.BrooklynProperties;\n import brooklyn.config.ConfigKey;\n import brooklyn.entity.Effector;\n import brooklyn.entity.Entity;\n@@ -41,4 +42,6 @@\n     <T> Task<T> invokeEffector(final Entity entity, final Effector<T> eff, @SuppressWarnings(\"rawtypes\") final Map parameters);\n \n     BrooklynStorage getStorage();\n+    \n+    BrooklynProperties getBrooklynProperties();\n }",
                "deletions": 0
            },
            {
                "sha": "a4ef9b798647a2ae906645253f025f7a4ebffa57",
                "filename": "core/src/main/java/brooklyn/management/internal/NonDeploymentManagementContext.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/5feb638f5988f7ed94fb85c3b39b542342a5d257/core/src/main/java/brooklyn/management/internal/NonDeploymentManagementContext.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/5feb638f5988f7ed94fb85c3b39b542342a5d257/core/src/main/java/brooklyn/management/internal/NonDeploymentManagementContext.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/management/internal/NonDeploymentManagementContext.java?ref=5feb638f5988f7ed94fb85c3b39b542342a5d257",
                "patch": "@@ -13,6 +13,7 @@\n import java.util.concurrent.TimeoutException;\n \n import brooklyn.catalog.BrooklynCatalog;\n+import brooklyn.config.BrooklynProperties;\n import brooklyn.config.StringConfigMap;\n import brooklyn.entity.Application;\n import brooklyn.entity.Effector;\n@@ -154,6 +155,12 @@ public StringConfigMap getConfig() {\n         return initialManagementContext.getConfig();\n     }\n \n+    @Override\n+    public BrooklynProperties getBrooklynProperties() {\n+        checkInitialManagementContextReal();\n+        return initialManagementContext.getBrooklynProperties();\n+    }\n+\n     @Override\n     public BrooklynStorage getStorage() {\n         checkInitialManagementContextReal();",
                "deletions": 0
            },
            {
                "sha": "20425ed86bae779fc9d849ff5416e9e5f4bf55a6",
                "filename": "usage/launcher/src/main/java/brooklyn/launcher/BrooklynLauncher.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/5feb638f5988f7ed94fb85c3b39b542342a5d257/usage/launcher/src/main/java/brooklyn/launcher/BrooklynLauncher.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/5feb638f5988f7ed94fb85c3b39b542342a5d257/usage/launcher/src/main/java/brooklyn/launcher/BrooklynLauncher.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/launcher/src/main/java/brooklyn/launcher/BrooklynLauncher.java?ref=5feb638f5988f7ed94fb85c3b39b542342a5d257",
                "patch": "@@ -331,7 +331,10 @@ protected BrooklynLauncher doLaunch() {\n                 brooklynProperties = builder.build();\n             }\n             managementContext = new LocalManagementContext(brooklynProperties);\n+        } else if (brooklynProperties == null) {\n+            brooklynProperties = ((ManagementContextInternal)managementContext).getBrooklynProperties();\n         }\n+        \n         for (Map.Entry<String, Object> entry : brooklynAdditionalProperties.entrySet()) {\n             brooklynProperties.put(entry.getKey(), entry.getValue());\n         }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Fix NPE when BrooklynLauncher given ManagementContext\n\n- caused by brooklynProperties being null",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/8428219afa7f45c2541c04fc4a381e756bdf3932",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/f8c18b8cd5f687a4bf83479a4c62a15f7a012ce7",
        "bug_id": "incubator-brooklyn_74",
        "file": [
            {
                "sha": "d5d353fba9804d284eef2177a3a8bc3d906d21dd",
                "filename": "core/src/main/java/brooklyn/management/internal/AbstractManagementContext.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8428219afa7f45c2541c04fc4a381e756bdf3932/core/src/main/java/brooklyn/management/internal/AbstractManagementContext.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8428219afa7f45c2541c04fc4a381e756bdf3932/core/src/main/java/brooklyn/management/internal/AbstractManagementContext.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/management/internal/AbstractManagementContext.java?ref=8428219afa7f45c2541c04fc4a381e756bdf3932",
                "patch": "@@ -275,15 +275,22 @@ public T call() {\n \n     protected abstract <T> Task<T> runAtEntity(final Entity entity, final Effector<T> eff, @SuppressWarnings(\"rawtypes\") final Map parameters);\n \n+    @Override\n     public abstract void addEntitySetListener(CollectionChangeListener<Entity> listener);\n \n+    @Override\n     public abstract void removeEntitySetListener(CollectionChangeListener<Entity> listener);\n     \n     @Override\n     public StringConfigMap getConfig() {\n         return configMap;\n     }\n \n+    @Override\n+    public BrooklynProperties getBrooklynProperties() {\n+        return configMap;\n+    }\n+\n     @Override\n     public synchronized LocationRegistry getLocationRegistry() {\n         if (locationRegistry==null) locationRegistry = new BasicLocationRegistry(this);",
                "deletions": 0
            },
            {
                "sha": "57139e3bdab9edee45c896b93b7045ed93ed61e3",
                "filename": "core/src/main/java/brooklyn/management/internal/ManagementContextInternal.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8428219afa7f45c2541c04fc4a381e756bdf3932/core/src/main/java/brooklyn/management/internal/ManagementContextInternal.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8428219afa7f45c2541c04fc4a381e756bdf3932/core/src/main/java/brooklyn/management/internal/ManagementContextInternal.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/management/internal/ManagementContextInternal.java?ref=8428219afa7f45c2541c04fc4a381e756bdf3932",
                "patch": "@@ -4,6 +4,7 @@\n import java.util.Map;\n import java.util.concurrent.ExecutionException;\n \n+import brooklyn.config.BrooklynProperties;\n import brooklyn.config.ConfigKey;\n import brooklyn.entity.Effector;\n import brooklyn.entity.Entity;\n@@ -41,4 +42,6 @@\n     <T> Task<T> invokeEffector(final Entity entity, final Effector<T> eff, @SuppressWarnings(\"rawtypes\") final Map parameters);\n \n     BrooklynStorage getStorage();\n+    \n+    BrooklynProperties getBrooklynProperties();\n }",
                "deletions": 0
            },
            {
                "sha": "a4ef9b798647a2ae906645253f025f7a4ebffa57",
                "filename": "core/src/main/java/brooklyn/management/internal/NonDeploymentManagementContext.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8428219afa7f45c2541c04fc4a381e756bdf3932/core/src/main/java/brooklyn/management/internal/NonDeploymentManagementContext.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8428219afa7f45c2541c04fc4a381e756bdf3932/core/src/main/java/brooklyn/management/internal/NonDeploymentManagementContext.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/management/internal/NonDeploymentManagementContext.java?ref=8428219afa7f45c2541c04fc4a381e756bdf3932",
                "patch": "@@ -13,6 +13,7 @@\n import java.util.concurrent.TimeoutException;\n \n import brooklyn.catalog.BrooklynCatalog;\n+import brooklyn.config.BrooklynProperties;\n import brooklyn.config.StringConfigMap;\n import brooklyn.entity.Application;\n import brooklyn.entity.Effector;\n@@ -154,6 +155,12 @@ public StringConfigMap getConfig() {\n         return initialManagementContext.getConfig();\n     }\n \n+    @Override\n+    public BrooklynProperties getBrooklynProperties() {\n+        checkInitialManagementContextReal();\n+        return initialManagementContext.getBrooklynProperties();\n+    }\n+\n     @Override\n     public BrooklynStorage getStorage() {\n         checkInitialManagementContextReal();",
                "deletions": 0
            },
            {
                "sha": "20425ed86bae779fc9d849ff5416e9e5f4bf55a6",
                "filename": "usage/launcher/src/main/java/brooklyn/launcher/BrooklynLauncher.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8428219afa7f45c2541c04fc4a381e756bdf3932/usage/launcher/src/main/java/brooklyn/launcher/BrooklynLauncher.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8428219afa7f45c2541c04fc4a381e756bdf3932/usage/launcher/src/main/java/brooklyn/launcher/BrooklynLauncher.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/launcher/src/main/java/brooklyn/launcher/BrooklynLauncher.java?ref=8428219afa7f45c2541c04fc4a381e756bdf3932",
                "patch": "@@ -331,7 +331,10 @@ protected BrooklynLauncher doLaunch() {\n                 brooklynProperties = builder.build();\n             }\n             managementContext = new LocalManagementContext(brooklynProperties);\n+        } else if (brooklynProperties == null) {\n+            brooklynProperties = ((ManagementContextInternal)managementContext).getBrooklynProperties();\n         }\n+        \n         for (Map.Entry<String, Object> entry : brooklynAdditionalProperties.entrySet()) {\n             brooklynProperties.put(entry.getKey(), entry.getValue());\n         }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "strings.join does not throw NPE\n\nuseful when using the joiner enricher if the inputted list is null",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/c7e20ceb56c570f810b53e57241e5035b53b3fe1",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/3dde5f4748928a7b3c3fb01b759a7473a460adb4",
        "bug_id": "incubator-brooklyn_75",
        "file": [
            {
                "sha": "c619565c38c9dce58704e179d0a81271808c8240",
                "filename": "utils/common/src/main/java/brooklyn/util/text/Strings.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/c7e20ceb56c570f810b53e57241e5035b53b3fe1/utils/common/src/main/java/brooklyn/util/text/Strings.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/c7e20ceb56c570f810b53e57241e5035b53b3fe1/utils/common/src/main/java/brooklyn/util/text/Strings.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/utils/common/src/main/java/brooklyn/util/text/Strings.java?ref=c7e20ceb56c570f810b53e57241e5035b53b3fe1",
                "patch": "@@ -181,6 +181,7 @@ public static String removeAllFromStart(String string, String ...prefixes) {\n \n     /** convenience for {@link com.google.common.base.Joiner} */\n     public static String join(Iterable<? extends Object> list, String seperator) {\n+        if (list==null) return null;\n         boolean app = false;\n         StringBuilder out = new StringBuilder();\n         for (Object s: list) {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Review changes for #810 including fix for NPE and adding new reverse lookup attributes",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/52e041b49f732362d43dab9b14d6a0c86f13a508",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/af3d47585927951bbb1e4bd8623b92c05e08f87d",
        "bug_id": "incubator-brooklyn_76",
        "file": [
            {
                "sha": "271e898bac199988041f3e2eee2b5712b633937b",
                "filename": "software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServer.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/52e041b49f732362d43dab9b14d6a0c86f13a508/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServer.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/52e041b49f732362d43dab9b14d6a0c86f13a508/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServer.java",
                "status": "modified",
                "changes": 15,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServer.java?ref=52e041b49f732362d43dab9b14d6a0c86f13a508",
                "patch": "@@ -25,10 +25,12 @@\n import brooklyn.entity.basic.SoftwareProcess;\n import brooklyn.entity.proxying.ImplementedBy;\n import brooklyn.event.AttributeSensor;\n+import brooklyn.event.basic.BasicAttributeSensor;\n import brooklyn.event.basic.BasicConfigKey;\n import brooklyn.event.basic.PortAttributeSensorAndConfigKey;\n import brooklyn.location.basic.PortRanges;\n import brooklyn.util.flags.SetFromFlag;\n+import brooklyn.util.net.Cidr;\n \n import com.google.common.base.Predicate;\n import com.google.common.base.Predicates;\n@@ -52,12 +54,11 @@\n \n     @SetFromFlag(\"reverseLookupNetwork\")\n     ConfigKey<String> REVERSE_LOOKUP_NETWORK = new BasicConfigKey<String>(String.class,\n-            \"bind.reverse-lookup.address\", \"Network address for reverse lookup zone (defaults to server address /24)\");\n+            \"bind.reverse-lookup.address\", \"Network address for reverse lookup zone\");\n \n     @SetFromFlag(\"subnet\")\n     ConfigKey<String> MANAGEMENT_CIDR = new BasicConfigKey<String>(String.class,\n-            \"bind.access.cidr\", \"Subnet CIDR allowed to access DNS\", \"0.0.0.0/0\");\n-            // TODO should default be a /0, or 'any', or use brooklyn management CIDR?\n+            \"bind.access.cidr\", \"Subnet CIDR or ACL allowed to access DNS\", \"0.0.0.0/0\");\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     @SetFromFlag(\"hostnameSensor\")\n@@ -82,6 +83,14 @@\n             \"bind.template.named-conf\", \"The BIND named configuration file (as FreeMarker template)\",\n             \"classpath://brooklyn/entity/network/bind/named.conf\");\n \n+    /* Reverse lookup attributes. */\n+\n+    AttributeSensor<Cidr> REVERSE_LOOKUP_CIDR = new BasicAttributeSensor<Cidr>(Cidr.class,\n+            \"bind.reverse-lookup.cidr\", \"The network CIDR that hosts must have for reverse lookup entriers to be added (default uses server address /24)\");\n+\n+    AttributeSensor<String> REVERSE_LOOKUP_DOMAIN = new BasicAttributeSensor<String>(String.class,\n+            \"bind.reverse-lookup.domain\", \"The in-addr.arpa reverse lookup domain name\");\n+\n     /* Configuration applicable to clients of the BIND DNS service. */\n \n     @SetFromFlag(\"replaceResolvConf\")",
                "deletions": 3
            },
            {
                "sha": "6ab00b68adf0e39a92ce61eeb5260b6c4935ae91",
                "filename": "software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServerImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/52e041b49f732362d43dab9b14d6a0c86f13a508/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServerImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/52e041b49f732362d43dab9b14d6a0c86f13a508/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServerImpl.java",
                "status": "modified",
                "changes": 34,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServerImpl.java?ref=52e041b49f732362d43dab9b14d6a0c86f13a508",
                "patch": "@@ -16,8 +16,6 @@\n package brooklyn.entity.network.bind;\n \n import java.io.ByteArrayInputStream;\n-import java.net.InetAddress;\n-import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.atomic.AtomicLong;\n@@ -67,7 +65,6 @@\n     private Multimap<Location, Entity> entityLocations = HashMultimap.create();\n     private ConcurrentMap<String, String> addressMappings = Maps.newConcurrentMap();\n     private ConcurrentMap<String, String> reverseMappings = Maps.newConcurrentMap();\n-    private Cidr reverseNetwork;\n \n     public BindDnsServerImpl() {\n         super();\n@@ -89,11 +86,12 @@ public long getSerial() {\n         return serial.incrementAndGet();\n     }\n \n+    public Cidr getReverseLookupNetwork() {\n+        return getAttribute(REVERSE_LOOKUP_CIDR);\n+    }\n+\n     public String getReverseLookupDomain() {\n-        String reverse = getConfig(REVERSE_LOOKUP_NETWORK);\n-        if (Strings.isBlank(reverse)) reverse = getAttribute(ADDRESS);\n-        reverseNetwork = new Cidr(reverse + \"/24\");\n-        return Joiner.on('.').join(Iterables.skip(Lists.reverse(Lists.newArrayList(Splitter.on('.').split(reverse))), 1)) + \" .in-addr.arpa\";\n+        return getAttribute(REVERSE_LOOKUP_DOMAIN);\n     }\n \n     @Override\n@@ -134,6 +132,12 @@ public void disconnectSensors() {\n \n     @Override\n     protected void preStart() {\n+        String reverse = getConfig(REVERSE_LOOKUP_NETWORK);\n+        if (Strings.isBlank(reverse)) reverse = getAttribute(ADDRESS);\n+        setAttribute(REVERSE_LOOKUP_CIDR, new Cidr(reverse + \"/24\"));\n+        String reverseLookupDomain = Joiner.on('.').join(Iterables.skip(Lists.reverse(Lists.newArrayList(Splitter.on('.').split(reverse))), 1)) + \".in-addr.arpa\";\n+        setAttribute(REVERSE_LOOKUP_DOMAIN, reverseLookupDomain);\n+\n         Map<?, ?> flags = MutableMap.builder()\n                 .put(\"name\", \"Address tracker\")\n                 .put(\"sensorsToTrack\", ImmutableSet.of(getConfig(HOSTNAME_SENSOR)))\n@@ -142,14 +146,16 @@ protected void preStart() {\n             @Override\n             protected void onEntityChange(Entity member) { added(member); }\n             @Override\n-            protected void onEntityAdded(Entity member) { added(member); }\n+            protected void onEntityAdded(Entity member) {\n+                if (Strings.isNonBlank(member.getAttribute(getConfig(HOSTNAME_SENSOR)))) added(member); // Ignore, unless hostname set\n+            }\n             @Override\n             protected void onEntityRemoved(Entity member) { removed(member); }\n         };\n \n         // For any entities that have already come up\n         for (Entity member : entities.getMembers()) {\n-            added(member);\n+            if (Strings.isNonBlank(member.getAttribute(getConfig(HOSTNAME_SENSOR)))) added(member); // Ignore, unless hostname set\n         }\n \n         addPolicy(policy);\n@@ -171,7 +177,7 @@ public void added(Entity member) {\n                 if (!entityLocations.containsKey(machine)) {\n                     entityLocations.put(machine, member);\n                     addressMappings.putIfAbsent(address, hostname);\n-                    if (reverseNetwork.contains(new Cidr(address + \"/32\"))) {\n+                    if (getReverseLookupNetwork().contains(new Cidr(address + \"/32\"))) {\n                         String octet = Iterables.get(Splitter.on('.').split(address), 3);\n                         reverseMappings.putIfAbsent(hostname, octet);\n                     }\n@@ -181,8 +187,6 @@ public void added(Entity member) {\n                     configure(machine);\n                     LOG.info(\"{} added at location {} with name {}\", new Object[] { member, machine, hostname });\n                 }\n-            } else {\n-                LOG.warn(\"added({}) called but entity not ready\", member);\n             }\n         }\n     }\n@@ -208,12 +212,10 @@ private Location findLocation(Entity member) {\n                     return entry.getKey();\n                 }\n             }\n-            return null;\n-        } else {\n-            return null;\n         }\n+        return null;\n     }\n-    \n+\n     public void update() {\n         Optional<Location> location = Iterables.tryFind(getLocations(), Predicates.instanceOf(SshMachineLocation.class));\n         SshMachineLocation machine = (SshMachineLocation) location.get();",
                "deletions": 16
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Sensor feed JsonFunctions: avoid NPE\n\n- In cast(Class), return null if input is null",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/0cf895dbbfddf824bef85de881c07a887f1eff4e",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/f2df16a130df56503c1a11f4b3667a71afb6388f",
        "bug_id": "incubator-brooklyn_77",
        "file": [
            {
                "sha": "b41e3126956f8aceeed96ebe29b3c67832b097cd",
                "filename": "core/src/main/java/brooklyn/event/feed/http/JsonFunctions.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/0cf895dbbfddf824bef85de881c07a887f1eff4e/core/src/main/java/brooklyn/event/feed/http/JsonFunctions.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/0cf895dbbfddf824bef85de881c07a887f1eff4e/core/src/main/java/brooklyn/event/feed/http/JsonFunctions.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/event/feed/http/JsonFunctions.java?ref=0cf895dbbfddf824bef85de881c07a887f1eff4e",
                "patch": "@@ -36,7 +36,9 @@ private JsonFunctions() {} // instead use static utility methods\n     public static <T> Function<JsonElement, T> cast(final Class<T> expected) {\n         return new Function<JsonElement, T>() {\n             @Override public T apply(JsonElement input) {\n-                if (input.isJsonNull()) {\n+                if (input == null) {\n+                    return (T) null;\n+                } else if (input.isJsonNull()) {\n                     return (T) null;\n                 } else if (expected == boolean.class || expected == Boolean.class) {\n                     return (T) (Boolean) input.getAsBoolean();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Merge pull request #395 from aledsage/fix/npe-EntityManagementSupport\n\nEntityManagementSupport: defensive programming",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/09e4ea5d2e3ca776f9e8f29f3faf0c67dbcda115",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/f9d85d7a74d1089efd23b506f38e9c2d5032f7dc",
        "bug_id": "incubator-brooklyn_78",
        "file": [
            {
                "sha": "0330a29f3d6a57c92d2dd49368c4258b464612e6",
                "filename": "api/src/main/java/brooklyn/management/SubscriptionManager.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/09e4ea5d2e3ca776f9e8f29f3faf0c67dbcda115/api/src/main/java/brooklyn/management/SubscriptionManager.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/09e4ea5d2e3ca776f9e8f29f3faf0c67dbcda115/api/src/main/java/brooklyn/management/SubscriptionManager.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/api/src/main/java/brooklyn/management/SubscriptionManager.java?ref=09e4ea5d2e3ca776f9e8f29f3faf0c67dbcda115",
                "patch": "@@ -32,8 +32,8 @@\n      * </ul>\n      * \n      * @param flags optional parameters to be associated with the subscription\n-     * @param producer entity to listen to\n-     * @param sensor sensor channel of events to listen to\n+     * @param producer entity to listen to, or null to listen to all entities\n+     * @param sensor sensor channel of events to listen to, or null for all sensors from the given producer(s)\n      * @param listener callback to invoke when an event occurs\n      * @return an id for this subscription\n      * ",
                "deletions": 2
            },
            {
                "sha": "b521b90453dbb745b765794f96213f0fb8067792",
                "filename": "core/src/main/java/brooklyn/management/internal/EntityManagementSupport.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/09e4ea5d2e3ca776f9e8f29f3faf0c67dbcda115/core/src/main/java/brooklyn/management/internal/EntityManagementSupport.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/09e4ea5d2e3ca776f9e8f29f3faf0c67dbcda115/core/src/main/java/brooklyn/management/internal/EntityManagementSupport.java",
                "status": "modified",
                "changes": 219,
                "additions": 125,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/management/internal/EntityManagementSupport.java?ref=09e4ea5d2e3ca776f9e8f29f3faf0c67dbcda115",
                "patch": "@@ -1,5 +1,7 @@\n package brooklyn.management.internal;\n \n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -12,8 +14,7 @@\n import brooklyn.management.ManagementContext;\n import brooklyn.management.SubscriptionContext;\n import brooklyn.management.internal.NonDeploymentManagementContext.NonDeploymentManagementContextMode;\n-\n-import com.google.common.base.Throwables;\n+import brooklyn.util.exceptions.Exceptions;\n \n /**\n  * Encapsulates management activities at an entity.\n@@ -50,117 +51,114 @@ public EntityManagementSupport(AbstractEntity entity) {\n     \n     // TODO the application\n     \n-    protected boolean managementContextUsable = false;\n-    protected boolean currentlyDeployed = false;\n-    protected boolean everDeployed = false;\n+    protected final AtomicBoolean managementContextUsable = new AtomicBoolean(false);\n+    protected final AtomicBoolean currentlyDeployed = new AtomicBoolean(false);\n+    protected final AtomicBoolean everDeployed = new AtomicBoolean(false);\n+    protected final AtomicBoolean managementFailed = new AtomicBoolean(false);\n     \n     private volatile EntityChangeListener entityChangeListener = EntityChangeListener.NOOP;\n \n-    public boolean isDeployed() { return currentlyDeployed; }\n+    public boolean isDeployed() { return currentlyDeployed.get(); }\n     public boolean isNoLongerManaged() {\n         return wasDeployed() && !isDeployed();\n     }\n-    public boolean wasDeployed() { return everDeployed; }\n+    public boolean wasDeployed() { return everDeployed.get(); }\n \n     public void onRebind(ManagementTransitionInfo info) {\n         nonDeploymentManagementContext.setMode(NonDeploymentManagementContext.NonDeploymentManagementContextMode.MANAGEMENT_REBINDING);\n     }\n     \n     public void onManagementStarting(ManagementTransitionInfo info) {\n-        synchronized (this) {\n-            assert nonDeploymentManagementContext!=null && nonDeploymentManagementContext.getMode().isPreManaged() : \"Already managed: \"+entity+\" (\"+nonDeploymentManagementContext+\")\";\n-            assert managementContext==null || managementContext.equals(info.getManagementContext()) : \"Already has management context: \"+managementContext+\"; can't set \"+info.getManagementContext();\n-            this.managementContext = info.getManagementContext();\n-            nonDeploymentManagementContext.setMode(NonDeploymentManagementContext.NonDeploymentManagementContextMode.MANAGEMENT_STARTING);\n-            \n-            nonDeploymentManagementContext.getSubscriptionManager().setDelegate((AbstractSubscriptionManager) managementContext.getSubscriptionManager());\n-            nonDeploymentManagementContext.getSubscriptionManager().startDelegatingForSubscribing();\n-\n-            managementContextUsable = true;\n-            currentlyDeployed = true;\n-            everDeployed = true;\n-            \n-            entityChangeListener = new EntityChangeListener() {\n-                @Override\n-                public void onChildrenChanged() {\n-                    getManagementContext(false).getRebindManager().getChangeListener().onChanged(entity);\n-                }\n-                @Override\n-                public void onLocationsChanged() {\n-                    getManagementContext(false).getRebindManager().getChangeListener().onChanged(entity);\n-                }\n-                @Override\n-                public void onMembersChanged() {\n-                    getManagementContext(false).getRebindManager().getChangeListener().onChanged(entity);\n-                }\n-                @Override\n-                public void onPoliciesChanged() {\n-                    getManagementContext(false).getRebindManager().getChangeListener().onChanged(entity);\n-                }\n-                @Override public void onAttributeChanged(AttributeSensor<?> attribute) {\n-                    getManagementContext(false).getRebindManager().getChangeListener().onChanged(entity);\n-                }\n-                @Override public void onEffectorStarting(Effector<?> effector) {\n-                    // ignore\n+        try {\n+            synchronized (this) {\n+                if (nonDeploymentManagementContext == null || !nonDeploymentManagementContext.getMode().isPreManaged()) {\n+                    throw new IllegalStateException(\"Already managed: \"+entity+\" (\"+nonDeploymentManagementContext+\")\");\n                 }\n-                @Override public void onEffectorCompleted(Effector<?> effector) {\n-                    getManagementContext(false).getRebindManager().getChangeListener().onChanged(entity);\n+                if (managementContext != null && !managementContext.equals(info.getManagementContext())) {\n+                    throw new IllegalStateException(\"Already has management context: \"+managementContext+\"; can't set \"+info.getManagementContext());\n                 }\n-            };\n+                this.managementContext = info.getManagementContext();\n+                nonDeploymentManagementContext.setMode(NonDeploymentManagementContext.NonDeploymentManagementContextMode.MANAGEMENT_STARTING);\n+                \n+                nonDeploymentManagementContext.getSubscriptionManager().setDelegate((AbstractSubscriptionManager) managementContext.getSubscriptionManager());\n+                nonDeploymentManagementContext.getSubscriptionManager().startDelegatingForSubscribing();\n+    \n+                managementContextUsable.set(true);\n+                currentlyDeployed.set(true);\n+                everDeployed.set(true);\n+                \n+                entityChangeListener = new EntityChangeListenerImpl();\n+            }\n+            \n+            /*\n+             * TODO framework starting events - phase 1, including rebind\n+             *  - establish hierarchy (child, groups, etc; construction if necessary on rebind)\n+             *  - set location\n+             *  - set local config values\n+             *  - set saved sensor values\n+             *  - register subscriptions -- BUT nothing is allowed to execute\n+             *  [these operations may be done before we invoke starting also; above can happen in any order;\n+             *  sensor _publications_ and executor submissions are queued]\n+             *  then:  set the management context and the entity is \"managed\" from the perspective of external viewers (ManagementContext.isManaged(entity) returns true)\n+             */\n+            \n+            entity.onManagementStarting();\n+        } catch (Throwable t) {\n+            managementFailed.set(true);\n+            throw Exceptions.propagate(t);\n         }\n-        \n-        // TODO framework starting events - phase 1, including rebind\n-//        - establish hierarchy (child, groups, etc; construction if necessary on rebind)\n-//        - set location\n-//        - set local config values\n-//        - set saved sensor values\n-//        - register subscriptions -- BUT nothing is allowed to execute\n-//        [these operations may be done before we invoke starting also; above can happen in any order;\n-//        sensor _publications_ and executor submissions are queued]\n-//        then:  set the management context and the entity is \"managed\" from the perspective of external viewers (ManagementContext.isManaged(entity) returns true)\n-        \n-        entity.onManagementStarting();\n-\n-//        synchronized (this) {\n-//            nonDeploymentManagementContext.getSubscriptionManager().setDelegate((AbstractSubscriptionManager) managementContext.getSubscriptionManager());\n-//            nonDeploymentManagementContext.getSubscriptionManager().startDelegatingForSubscribing();\n-//        }\n     }\n \n     public void onManagementStarted(ManagementTransitionInfo info) {\n-        synchronized (this) {\n-            assert nonDeploymentManagementContext!=null && nonDeploymentManagementContext.getMode()==NonDeploymentManagementContextMode.MANAGEMENT_STARTING : \"Already managed: \"+entity+\" (\"+nonDeploymentManagementContext+\")\";\n-            assert managementContext == info.getManagementContext() : \"Already has management context: \"+managementContext+\"; can't set \"+info.getManagementContext();\n-            nonDeploymentManagementContext.setMode(NonDeploymentManagementContext.NonDeploymentManagementContextMode.MANAGEMENT_STARTED);\n-//        - set derived/inherited config values\n-//        - publish all queued sensors\n-//        - start all queued executions (e.g. subscription delivery)\n-//        [above happens in exactly this order, at each entity]\n-//        then: the entity internally knows it fully managed (ManagementSupport.isManaged() returns true -- though not sure we need that);\n-//            subsequent sensor events and executions occur directly (no queueing)\n-            nonDeploymentManagementContext.getSubscriptionManager().startDelegatingForPublishing();\n-            //TODO more of the above\n-        \n-            // TODO custom started activities\n-        }\n-        \n-        entity.onManagementBecomingMaster();\n-        entity.onManagementStarted();\n-        \n-        synchronized (this) {\n-            nonDeploymentManagementContext = null;\n+        try {\n+            synchronized (this) {\n+                if (nonDeploymentManagementContext == null || nonDeploymentManagementContext.getMode() != NonDeploymentManagementContextMode.MANAGEMENT_STARTING) {\n+                    throw new IllegalStateException(\"Already managed: \"+entity+\" (\"+nonDeploymentManagementContext+\")\");\n+                }\n+                if (managementContext != info.getManagementContext()) {\n+                    throw new IllegalStateException(\"Already has management context: \"+managementContext+\"; can't set \"+info.getManagementContext());\n+                }\n+                nonDeploymentManagementContext.setMode(NonDeploymentManagementContext.NonDeploymentManagementContextMode.MANAGEMENT_STARTED);\n+                \n+                /*\n+                 * - set derived/inherited config values\n+                 * - publish all queued sensors\n+                 * - start all queued executions (e.g. subscription delivery)\n+                 * [above happens in exactly this order, at each entity]\n+                 * then: the entity internally knows it fully managed (ManagementSupport.isManaged() returns true -- though not sure we need that);\n+                 * subsequent sensor events and executions occur directly (no queueing)\n+                 */\n+                \n+                nonDeploymentManagementContext.getSubscriptionManager().startDelegatingForPublishing();\n+                //TODO more of the above\n+            \n+                // TODO custom started activities\n+            }\n+            \n+            entity.onManagementBecomingMaster();\n+            entity.onManagementStarted();\n+            \n+            synchronized (this) {\n+                nonDeploymentManagementContext = null;\n+            }\n+        } catch (Throwable t) {\n+            managementFailed.set(true);\n+            throw Exceptions.propagate(t);\n         }\n     }\n     \n     public void onManagementStopping(ManagementTransitionInfo info) {\n         synchronized (this) {\n-            assert managementContext == info.getManagementContext();\n-            while (nonDeploymentManagementContext!=null && nonDeploymentManagementContext.getMode()==NonDeploymentManagementContextMode.MANAGEMENT_STARTING) {\n+            if (managementContext != info.getManagementContext()) {\n+                throw new IllegalStateException(\"Has different management context: \"+managementContext+\"; expected \"+info.getManagementContext());\n+            }\n+            while (!managementFailed.get() && nonDeploymentManagementContext!=null && \n+                    nonDeploymentManagementContext.getMode()==NonDeploymentManagementContextMode.MANAGEMENT_STARTING) {\n                 // still becoming managed\n                 try {\n                     wait(100);\n                 } catch (InterruptedException e) {\n-                    Throwables.propagate(e);\n+                    Exceptions.propagate(e);\n                 }\n             }\n             if (nonDeploymentManagementContext==null) {\n@@ -184,10 +182,12 @@ public void onManagementStopping(ManagementTransitionInfo info) {\n     \n     public void onManagementStopped(ManagementTransitionInfo info) {\n         synchronized (this) {\n-            assert managementContext == info.getManagementContext();\n+            if (managementContext != info.getManagementContext()) {\n+                throw new IllegalStateException(\"Has different management context: \"+managementContext+\"; expected \"+info.getManagementContext());\n+            }\n             entityChangeListener = EntityChangeListener.NOOP;\n-            managementContextUsable = false;\n-            currentlyDeployed = false;\n+            managementContextUsable.set(false);\n+            currentlyDeployed.set(false);\n             executionContext = null;\n             subscriptionContext = null;\n         }\n@@ -201,12 +201,12 @@ public void onManagementStopped(ManagementTransitionInfo info) {\n         }\n     }\n \n-    public synchronized boolean isManagementContextReal() {\n-        return managementContextUsable;\n+    public boolean isManagementContextReal() {\n+        return managementContextUsable.get();\n     }\n     \n     public synchronized ManagementContext getManagementContext(boolean returnNonDeploymentIfNotDeployed) {\n-        if (managementContextUsable) return managementContext;\n+        if (managementContextUsable.get()) return managementContext;\n         if (returnNonDeploymentIfNotDeployed) {\n             return nonDeploymentManagementContext;\n         } else {\n@@ -216,15 +216,15 @@ public synchronized ManagementContext getManagementContext(boolean returnNonDepl\n     }\n     public synchronized ExecutionContext getExecutionContext() {\n         if (executionContext!=null) return executionContext;\n-        if (managementContextUsable) {\n+        if (managementContextUsable.get()) {\n             executionContext = managementContext.getExecutionContext(entity);\n             return executionContext;\n         }\n         return nonDeploymentManagementContext.getExecutionContext(entity);\n     }\n     public synchronized SubscriptionContext getSubscriptionContext() {\n         if (subscriptionContext!=null) return subscriptionContext;\n-        if (managementContextUsable) {\n+        if (managementContextUsable.get()) {\n             subscriptionContext = managementContext.getSubscriptionContext(entity);\n             return subscriptionContext;\n         }\n@@ -255,4 +255,35 @@ public synchronized void attemptLegacyAutodeployment(String effectorName) {\n     public EntityChangeListener getEntityChangeListener() {\n         return entityChangeListener;\n     }\n+    \n+    private class EntityChangeListenerImpl implements EntityChangeListener {\n+        @Override\n+        public void onChildrenChanged() {\n+            getManagementContext(false).getRebindManager().getChangeListener().onChanged(entity);\n+        }\n+        @Override\n+        public void onLocationsChanged() {\n+            getManagementContext(false).getRebindManager().getChangeListener().onChanged(entity);\n+        }\n+        @Override\n+        public void onMembersChanged() {\n+            getManagementContext(false).getRebindManager().getChangeListener().onChanged(entity);\n+        }\n+        @Override\n+        public void onPoliciesChanged() {\n+            getManagementContext(false).getRebindManager().getChangeListener().onChanged(entity);\n+        }\n+        @Override\n+        public void onAttributeChanged(AttributeSensor<?> attribute) {\n+            getManagementContext(false).getRebindManager().getChangeListener().onChanged(entity);\n+        }\n+        @Override\n+        public void onEffectorStarting(Effector<?> effector) {\n+            // ignore\n+        }\n+        @Override\n+        public void onEffectorCompleted(Effector<?> effector) {\n+            getManagementContext(false).getRebindManager().getChangeListener().onChanged(entity);\n+        }\n+    }\n }",
                "deletions": 94
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Avoids npe in SshMachineLocation.toString\n\n(e.g. if exception during configure(), before address has been set).",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/fc24a59fde26ca5df4c374053e2a41ddba16b7b3",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/1e3f6b284ece7a16cf3ecfa3e8d5209f5e426816",
        "bug_id": "incubator-brooklyn_79",
        "file": [
            {
                "sha": "9275374a162b0f0c7f5b68b38998478ee0650a51",
                "filename": "core/src/main/java/brooklyn/location/basic/SshMachineLocation.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fc24a59fde26ca5df4c374053e2a41ddba16b7b3/core/src/main/java/brooklyn/location/basic/SshMachineLocation.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fc24a59fde26ca5df4c374053e2a41ddba16b7b3/core/src/main/java/brooklyn/location/basic/SshMachineLocation.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/SshMachineLocation.java?ref=fc24a59fde26ca5df4c374053e2a41ddba16b7b3",
                "patch": "@@ -46,7 +46,6 @@\n import com.google.common.base.Preconditions;\n import com.google.common.base.Throwables;\n import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n@@ -439,7 +438,7 @@ public int installTo(ResourceUtils loader, String url, String destination) {\n     \n     @Override\n     public String toString() {\n-        return address.toString();\n+        return (address != null) ? address.toString() : \"SshMachineLocation(null)\";\n     }\n \n     /**",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "workaround for WSO2-specific JMX error condition (throws NPE when contract expects an IOE) (via pveentjer)",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/2c063409991ca647d0ff91a9361a7ebf3b5570a6",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/47c1e11922be739c146139549acc68c41be65dd4",
        "bug_id": "incubator-brooklyn_80",
        "file": [
            {
                "sha": "edb06d67c1edefdd2415934daf89af7ccae05fc3",
                "filename": "core/src/main/java/brooklyn/event/adapter/JmxHelper.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/2c063409991ca647d0ff91a9361a7ebf3b5570a6/core/src/main/java/brooklyn/event/adapter/JmxHelper.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/2c063409991ca647d0ff91a9361a7ebf3b5570a6/core/src/main/java/brooklyn/event/adapter/JmxHelper.groovy",
                "status": "modified",
                "changes": 17,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/event/adapter/JmxHelper.groovy?ref=2c063409991ca647d0ff91a9361a7ebf3b5570a6",
                "patch": "@@ -127,8 +127,21 @@ public class JmxHelper {\n \t\t\tString[] creds = [ user, password ]\n \t\t\tenv.put(JMXConnector.CREDENTIALS, creds);\n \t\t}\n-\t\tjmxc = JMXConnectorFactory.connect(url, env);\n-\t\tmbsc = jmxc.getMBeanServerConnection();\n+\t\ttry{\n+            jmxc = JMXConnectorFactory.connect(url, env);\n+        }catch(NullPointerException npe){\n+            //some software -- eg WSO2 -- will throw an NPE exception if the JMX connection can't be created, instead of an IOException.\n+            //this is a break of contract with the JMXConnectorFactory.connect method, so this code verifies if the NPE is\n+            //thrown by a known offender (wso2) and if so replaces the bad exception by a new IOException.\n+            //ideally WSO2 will fix this bug and we can remove this code.\n+            boolean thrownByWso2 = npe.stackTrace[0].toString().contains(\"org.wso2.carbon.core.security.CarbonJMXAuthenticator.authenticate\")\n+            if(thrownByWso2){\n+                throw new IOException(\"Failed to connect to url ${url}. NullPointerException is thrown, but replaced by an IOException to fix a WSO2 JMX problem\",npe)\n+            }else{\n+                throw npe\n+            }\n+        }\n+        mbsc = jmxc.getMBeanServerConnection();\n \t}\n \t\n \t/** continuously attempts to connect (blocking), for at least the indicated amount of time; or indefinitely if -1 */",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "web-console: return 404 if entity id not found, rather than NPE",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/590bb09a7c8169e37cf15edde49fdd7c62f158fe",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/cff74ad88353f744076388068d84a47381bceeb5",
        "bug_id": "incubator-brooklyn_81",
        "file": [
            {
                "sha": "0495d248eb82c5b2d5f8c624afd1eb9c8c218588",
                "filename": "web-console/grails-app/controllers/brooklyn/web/console/EntityController.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/590bb09a7c8169e37cf15edde49fdd7c62f158fe/web-console/grails-app/controllers/brooklyn/web/console/EntityController.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/590bb09a7c8169e37cf15edde49fdd7c62f158fe/web-console/grails-app/controllers/brooklyn/web/console/EntityController.groovy",
                "status": "modified",
                "changes": 30,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/web-console/grails-app/controllers/brooklyn/web/console/EntityController.groovy?ref=590bb09a7c8169e37cf15edde49fdd7c62f158fe",
                "patch": "@@ -56,8 +56,7 @@ class EntityController {\n             if (entity != null) {\n                 render(new EntitySummary(entity) as JSON)\n             } else {\n-                render(status: 404,\n-                       text: '{message: \"Cannot retrieve info: Entity with specified id '+ params.id + ' does not exist\"}')\n+            render(status: 404, text: '{message: \"Entity with specified id '+params.id+'does not exist\"}')\n             }\n         } else {\n             render(status: 400, text: '{message: \"You must provide an entity id\"}')\n@@ -82,8 +81,7 @@ class EntityController {\n                 }\n                 render(result as JSON)\n             } else {\n-                render(status: 404,\n-                       text: '{message: \"Cannot retrieve info: Entity with specified id '+ params.id + ' does not exist\"}')\n+            render(status: 404, text: '{message: \"Entity with specified id '+params.id+'does not exist\"}')\n             }\n         } else {\n             render(status: 400, text: '{message: \"You must provide an entity id\"}')\n@@ -104,8 +102,7 @@ class EntityController {\n                 render(locationSummaries as JSON)\n             }\n              else {\n-                render(status: 404,\n-                       text: '{message: \"Cannot retrieve info: Entity with specified id '+ params.id + ' does not exist\"}')\n+            render(status: 404, text: '{message: \"Entity with specified id '+params.id+'does not exist\"}')\n             }\n         } else {\n             render(status: 400, text: '{message: \"You must provide an entity id\"}')\n@@ -116,7 +113,12 @@ class EntityController {\n         if (!params.id) {\n             render(status: 400, text: '{message: \"You must provide an entity id\"}')\n         }\n-        render entityService.getEffectorsOfEntity(params.id) as JSON\n+        \n+        try {\n+            render entityService.getEffectorsOfEntity(params.id) as JSON\n+        } catch (NoSuchEntity e) {\n+            render(status: 404, text: '{message: \"Entity with specified id '+params.id+'does not exist\"}')\n+        }\n     }\n \n     def sensors = {\n@@ -127,7 +129,7 @@ class EntityController {\n         try {\n             render entityService.getSensorData(params.id) as JSON\n         } catch (NoSuchEntity e) {\n-            render(status: 404, text: '{message: \"Entity with specified id does not exist\"}')\n+            render(status: 404, text: '{message: \"Entity with specified id '+params.id+'does not exist\"}')\n         }\n     }\n \n@@ -136,7 +138,12 @@ class EntityController {\n             render(status: 400, text: '{message: \"You must provide an entity id\"}')\n             return\n         }\n-        render entityService.getTasksOfEntity(params.id) as JSON\n+        \n+        try {\n+            render entityService.getTasksOfEntity(params.id) as JSON\n+        } catch (NoSuchEntity e) {\n+            render(status: 404, text: '{message: \"Entity with specified id '+params.id+'does not exist\"}')\n+        }\n     }\n \n     def allActivity = {\n@@ -170,6 +177,11 @@ class EntityController {\n \n     def invoke = {\n         Entity entity = entityService.getEntity(params.entityId)\n+        if (!entity) {\n+            render(status: 404, text: '{message: \"Entity with specified id '+params.entityId+'does not exist\"}')\n+            return\n+        }\n+        \n         Collection<Effector> effectorsOfEntity = entityService.getEffectorsOfEntity(entity.id)\n \n         if(effectorsOfEntity != null){",
                "deletions": 9
            },
            {
                "sha": "863dd51801bad23b0db24c30a1167a3105ac0b04",
                "filename": "web-console/grails-app/services/brooklyn/web/console/EntityService.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/590bb09a7c8169e37cf15edde49fdd7c62f158fe/web-console/grails-app/services/brooklyn/web/console/EntityService.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/590bb09a7c8169e37cf15edde49fdd7c62f158fe/web-console/grails-app/services/brooklyn/web/console/EntityService.groovy",
                "status": "modified",
                "changes": 11,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/web-console/grails-app/services/brooklyn/web/console/EntityService.groovy?ref=590bb09a7c8169e37cf15edde49fdd7c62f158fe",
                "patch": "@@ -47,6 +47,8 @@ public class EntityService {\n     // TODO Should this return Task objects, and let the EntityController convert them to TaskSummary?\n     public Collection<TaskSummary> getTasksOfEntity(String entityId) {\n         Entity e = getEntity(entityId)\n+        if (!e) throw new NoSuchEntity()\n+\n         return managementContextService.executionManager.getTasksWithAllTags(\n                 [e, AbstractManagementContext.EFFECTOR_TAG]).collect { new TaskSummary(it) }\n     }\n@@ -97,13 +99,10 @@ public class EntityService {\n     }\n \n     public Collection<Effector> getEffectorsOfEntity(String entityId) {\n-        Set<Effector> results = []\n         Entity entity = getEntity(entityId)\n-        if (entity) {\n-            results.addAll(entity.entityClass.effectors)\n-        }\n-\n-        return results\n+        if (!entity) throw new NoSuchEntity()\n+        \n+        return entity.entityClass.effectors\n     }\n \n     public List<Entity> getAncestorsOf(Entity child) {",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "entityClass returning null for some reason; now it uses a sensible default, rather than throwing NPE",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/221d453c577e1a2351e3c6035f75b03b3f4ad5d2",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/51a4441bc9f704364bd3859386aba5eafba10f06",
        "bug_id": "incubator-brooklyn_82",
        "file": [
            {
                "sha": "46e237ebbf07045ec31dc2ac9fea12905f510d67",
                "filename": "web-console/grails-app/utils/brooklyn/web/console/entity/JsTreeNodeImpl.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/221d453c577e1a2351e3c6035f75b03b3f4ad5d2/web-console/grails-app/utils/brooklyn/web/console/entity/JsTreeNodeImpl.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/221d453c577e1a2351e3c6035f75b03b3f4ad5d2/web-console/grails-app/utils/brooklyn/web/console/entity/JsTreeNodeImpl.groovy",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/web-console/grails-app/utils/brooklyn/web/console/entity/JsTreeNodeImpl.groovy?ref=221d453c577e1a2351e3c6035f75b03b3f4ad5d2",
                "patch": "@@ -12,7 +12,7 @@ public class JsTreeNodeImpl implements JsTreeNode {\n     public transient boolean matched;\n \n     public JsTreeNodeImpl(Entity e, Boolean matched=false) {\n-        this(e.id, e.displayName, e.entityClass.name, matched)\n+        this(e.id, e.displayName, e.entityClass?.name ?: \"$e [no entity class]\", matched)\n     }\n \n     public JsTreeNodeImpl(String id, String name, String clazz, Boolean matched) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "correct description and tidied code for determining backup location spec v non-backup location spec, fixing NPE's",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/a6891c691a3ead9ef0dac4e978527e034a83e576",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/9edd58db490863e3e34758b31a19e3cb1ed8deae",
        "bug_id": "incubator-brooklyn_83",
        "file": [
            {
                "sha": "4fdf4c4e8d81f7efb78c8b13c225a619c27929a4",
                "filename": "core/src/main/java/brooklyn/config/BrooklynServerConfig.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/a6891c691a3ead9ef0dac4e978527e034a83e576/core/src/main/java/brooklyn/config/BrooklynServerConfig.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/a6891c691a3ead9ef0dac4e978527e034a83e576/core/src/main/java/brooklyn/config/BrooklynServerConfig.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/config/BrooklynServerConfig.java?ref=a6891c691a3ead9ef0dac4e978527e034a83e576",
                "patch": "@@ -76,7 +76,7 @@\n     public static final ConfigKey<String> PERSISTENCE_BACKUPS_LOCATION_SPEC = newStringConfigKey(\n         \"brooklyn.persistence.backups.location.spec\", \n         \"Location spec string for an object store (e.g. jclouds:swift:URL) where backups of persisted state should be kept; \"\n-        + \"defaults to the same location spec as regular persisted state, failing back to local file system\");\n+        + \"defaults to the local file system\");\n     \n     public static final ConfigKey<Boolean> PERSISTENCE_BACKUPS_REQUIRED_ON_PROMOTION =\n         ConfigKeys.newBooleanConfigKey(\"brooklyn.persistence.backups.required.promotion\",",
                "deletions": 1
            },
            {
                "sha": "06c803312d4f69285e43dc4dac383a2755aec8ce",
                "filename": "core/src/main/java/brooklyn/config/BrooklynServerPaths.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/a6891c691a3ead9ef0dac4e978527e034a83e576/core/src/main/java/brooklyn/config/BrooklynServerPaths.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/a6891c691a3ead9ef0dac4e978527e034a83e576/core/src/main/java/brooklyn/config/BrooklynServerPaths.java",
                "status": "modified",
                "changes": 14,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/config/BrooklynServerPaths.java?ref=a6891c691a3ead9ef0dac4e978527e034a83e576",
                "patch": "@@ -162,22 +162,26 @@ protected String getDefaultContainerForAnyNonFilesystem() {\n      * It also includes conveniences for resolving further subpaths, cf {@link PersistenceBackupPathResolver#resolveWithSubpathFor(ManagementContextInternal, String)}.\n      */\n     public static class PersistenceBackupPathResolver extends PersistencePathResolver {\n-        protected String nonBackuplocationSpec;\n+        private String nonBackupLocationSpec;\n         private PersistenceBackupPathResolver(StringConfigMap brooklynProperties) {\n             super(brooklynProperties);\n         }\n-        @Override\n-        public PersistenceBackupPathResolver location(@Nullable String locationSpec) {\n-            this.nonBackuplocationSpec = locationSpec;\n+        public PersistenceBackupPathResolver nonBackupLocation(@Nullable String locationSpec) {\n+            this.nonBackupLocationSpec = locationSpec;\n             return this;\n         }\n         @Override\n         public PersistenceBackupPathResolver dir(String dirOrContainer) {\n             super.dir(dirOrContainer);\n             return this;\n         }\n+        @Override\n+        public PersistenceBackupPathResolver location(String backupLocationSpec) {\n+            super.location(backupLocationSpec);\n+            return this;\n+        }\n         protected boolean isBackupSameLocation() {\n-            return Objects.equal(locationSpec, nonBackuplocationSpec);\n+            return Objects.equal(locationSpec, nonBackupLocationSpec);\n         }\n         /** Appends a sub-path to the path returned by {@link #resolve()} */\n         public String resolveWithSubpath(String subpath) {",
                "deletions": 5
            },
            {
                "sha": "9d2721d9daad7eb9eb6576ea1e60a543eae75f6e",
                "filename": "core/src/main/java/brooklyn/entity/rebind/persister/BrooklynPersistenceUtils.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/a6891c691a3ead9ef0dac4e978527e034a83e576/core/src/main/java/brooklyn/entity/rebind/persister/BrooklynPersistenceUtils.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/a6891c691a3ead9ef0dac4e978527e034a83e576/core/src/main/java/brooklyn/entity/rebind/persister/BrooklynPersistenceUtils.java",
                "status": "modified",
                "changes": 13,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/rebind/persister/BrooklynPersistenceUtils.java?ref=a6891c691a3ead9ef0dac4e978527e034a83e576",
                "patch": "@@ -230,9 +230,10 @@ public static void createBackup(ManagementContext managementContext, CreateBacku\n         \n             PersistenceObjectStore destinationObjectStore = null;\n             String backupSpec = managementContext.getConfig().getConfig(BrooklynServerConfig.PERSISTENCE_BACKUPS_LOCATION_SPEC);\n+            String nonBackupSpec = managementContext.getConfig().getConfig(BrooklynServerConfig.PERSISTENCE_LOCATION_SPEC);\n             try {\n-                String backupContainer = BrooklynServerPaths.newBackupPersistencePathResolver(managementContext).location(backupSpec)\n-                    .resolveWithSubpathFor(managementContext, mode.toString());\n+                String backupContainer = BrooklynServerPaths.newBackupPersistencePathResolver(managementContext)\n+                    .location(backupSpec).nonBackupLocation(nonBackupSpec).resolveWithSubpathFor(managementContext, mode.toString());\n                 destinationObjectStore = BrooklynPersistenceUtils.newPersistenceObjectStore(managementContext, backupSpec, backupContainer);\n                 log.debug(\"Backing up persisted state on \"+mode+\", to \"+destinationObjectStore.getSummaryName());\n                 BrooklynPersistenceUtils.writeMemento(managementContext, memento, destinationObjectStore);\n@@ -243,11 +244,13 @@ public static void createBackup(ManagementContext managementContext, CreateBacku\n                 Exceptions.propagateIfFatal(e);\n                 PersistenceObjectStore failedStore = destinationObjectStore;\n                 if (!Strings.isBlank(backupSpec) && !\"localhost\".equals(backupSpec)) {\n+                    String failedSpec = backupSpec;\n                     backupSpec = \"localhost\";\n-                    String backupContainer = BrooklynServerPaths.newBackupPersistencePathResolver(managementContext).location(backupSpec)\n-                        .resolveWithSubpathFor(managementContext, mode.toString());\n+                    String backupContainer = BrooklynServerPaths.newBackupPersistencePathResolver(managementContext)\n+                        .location(backupSpec).nonBackupLocation(nonBackupSpec).resolveWithSubpathFor(managementContext, mode.toString());\n                     destinationObjectStore = BrooklynPersistenceUtils.newPersistenceObjectStore(managementContext, backupSpec, backupContainer);\n-                    log.warn(\"Persisted state back-up to \"+failedStore.getSummaryName()+\" failed with \"+e, e);\n+                    log.warn(\"Persisted state back-up to \"+(failedStore!=null ? failedStore.getSummaryName() : failedSpec)\n+                        +\" failed with \"+e, e);\n                     \n                     log.debug(\"Backing up persisted state on \"+mode+\", locally because remote failed, to \"+destinationObjectStore.getSummaryName());\n                     BrooklynPersistenceUtils.writeMemento(managementContext, memento, destinationObjectStore);",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "create specs from catalog items, and use these in many places.  also fix some NPE and serialization issues.",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/468d788542d19810062d3e0b8a41019aa699f740",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/407de80ae9f0b975ad45e283146adfcf881fdfb6",
        "bug_id": "incubator-brooklyn_84",
        "file": [
            {
                "sha": "276eba478a056b5c34182ade72f277635ef65e1d",
                "filename": "api/src/main/java/brooklyn/catalog/CatalogItem.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/api/src/main/java/brooklyn/catalog/CatalogItem.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/api/src/main/java/brooklyn/catalog/CatalogItem.java",
                "status": "modified",
                "changes": 17,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/api/src/main/java/brooklyn/catalog/CatalogItem.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -1,7 +1,9 @@\n package brooklyn.catalog;\n \n import java.util.List;\n+\n import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n \n public interface CatalogItem<T,SpecT> {\n     \n@@ -14,15 +16,28 @@\n     }\n \n     public CatalogItemType getCatalogItemType();\n+    /** the high-level type of this entity, e.g. Entity (not a specific Entity class) */\n     public Class<T> getCatalogItemJavaType();\n+    /** the type of the spec e.g. EntitySpec corresponding to {@link #getCatalogItemJavaType()} */\n+    public Class<SpecT> getSpecType();\n     \n+    /** the explicit ID of this item, or the type if not supplied */\n     public String getId();\n-    public String getJavaType();\n+    \n+    /** the type name registered in the catalog for this item */ \n+    public String getRegisteredTypeName();\n+    \n+    /** the underlying java type of the item represented, or null if not known (e.g. if it comes from yaml) */\n+    // TODO references to this should probably query getRegisteredType\n+    @Nullable public String getJavaType();\n+    \n     public String getName();\n     public String getDescription();\n     public String getIconUrl();\n     public String getVersion();\n \n+    // FIXME many of the static methods in CatalogItemAbstractDto which create CatalogItems set this as null\n+    // I (alex) suggest removing the annotation, here, and in subclasses where the method is defined\n     @Nonnull\n     public CatalogItemLibraries getLibraries();\n ",
                "deletions": 1
            },
            {
                "sha": "389ec41e71b1922f53042fe12418f85c5da9ef9c",
                "filename": "camp/camp-base/src/test/java/io/brooklyn/camp/test/mock/web/MockWebPlatform.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/camp/camp-base/src/test/java/io/brooklyn/camp/test/mock/web/MockWebPlatform.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/camp/camp-base/src/test/java/io/brooklyn/camp/test/mock/web/MockWebPlatform.java",
                "status": "modified",
                "changes": 15,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/camp/camp-base/src/test/java/io/brooklyn/camp/test/mock/web/MockWebPlatform.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -1,12 +1,15 @@\n package io.brooklyn.camp.test.mock.web;\n \n+import javax.annotation.Nullable;\n+\n import brooklyn.util.guava.Maybe;\n import io.brooklyn.camp.BasicCampPlatform;\n import io.brooklyn.camp.spi.ApplicationComponentTemplate;\n import io.brooklyn.camp.spi.AssemblyTemplate;\n import io.brooklyn.camp.spi.PlatformComponentTemplate;\n import io.brooklyn.camp.spi.collection.BasicResourceLookup;\n import io.brooklyn.camp.spi.collection.ResolvableLink;\n+import io.brooklyn.camp.spi.instantiate.AssemblyTemplateInstantiator;\n import io.brooklyn.camp.spi.pdp.Artifact;\n import io.brooklyn.camp.spi.pdp.AssemblyTemplateConstructor;\n import io.brooklyn.camp.spi.pdp.Service;\n@@ -57,7 +60,7 @@ public boolean apply(Object art, AssemblyTemplateConstructor atc) {\n         }\n     };\n \n-    public static final PdpMatcher newLiteralServiceTypeToPlatformComponentTemplateMatcher(final BasicCampPlatform platform) {\n+    public static final PdpMatcher newLiteralServiceTypeToPlatformComponentTemplateMatcher(final BasicCampPlatform platform, @Nullable final Class<? extends AssemblyTemplateInstantiator> instantiator) {\n         return new PdpMatcher() {\n             public boolean apply(Object item, AssemblyTemplateConstructor atc) {\n                 if (!(item instanceof Service)) return false;\n@@ -71,8 +74,11 @@ public boolean apply(Object item, AssemblyTemplateConstructor atc) {\n                             .customAttribute(\"serviceType\", type)\n                             .description(Maybe.fromNullable(svc.getDescription()).or(t.resolve().getDescription()))\n                             .build();\n-                        if (atc!=null)\n+                        if (atc!=null) {\n                             atc.add(pct);\n+                            if (instantiator!=null)\n+                                atc.instantiator(instantiator);\n+                        }\n                         return true;\n                     }\n                 }\n@@ -87,12 +93,15 @@ public boolean accepts(Object deploymentPlanItem) {\n     }\n     \n     public static <T extends BasicCampPlatform> T populate(T platform) {\n+        return populate(platform, null);\n+    }\n+    public static <T extends BasicCampPlatform> T populate(T platform, @Nullable Class<? extends AssemblyTemplateInstantiator> instantiator) {\n         platform.platformComponentTemplates().addAll(APPSERVER, DATABASE);\n         platform.applicationComponentTemplates().add(WAR);\n         platform.assemblyTemplates().add(ASSEMBLY1);\n         \n         platform.pdp().addMatcher(WAR_GETS_WAR_MATCHER);\n-        platform.pdp().addMatcher(newLiteralServiceTypeToPlatformComponentTemplateMatcher(platform));\n+        platform.pdp().addMatcher(newLiteralServiceTypeToPlatformComponentTemplateMatcher(platform, instantiator));\n         \n         return platform;\n     }",
                "deletions": 3
            },
            {
                "sha": "0054a8018ad6ce021668ae1486549e4fe3a5b0bb",
                "filename": "core/src/main/java/brooklyn/camp/brooklyn/api/AssemblyTemplateSpecInstantiator.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/camp/brooklyn/api/AssemblyTemplateSpecInstantiator.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/camp/brooklyn/api/AssemblyTemplateSpecInstantiator.java",
                "status": "added",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/camp/brooklyn/api/AssemblyTemplateSpecInstantiator.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -0,0 +1,12 @@\n+package brooklyn.camp.brooklyn.api;\n+\n+import io.brooklyn.camp.CampPlatform;\n+import io.brooklyn.camp.spi.AssemblyTemplate;\n+import io.brooklyn.camp.spi.instantiate.AssemblyTemplateInstantiator;\n+import brooklyn.entity.proxying.EntitySpec;\n+\n+public interface AssemblyTemplateSpecInstantiator extends AssemblyTemplateInstantiator {\n+\n+    EntitySpec<?> createSpec(AssemblyTemplate template, CampPlatform platform);\n+    \n+}",
                "deletions": 0
            },
            {
                "sha": "e21bff1ff79875266246e6fe8b588fc5753aced0",
                "filename": "core/src/main/java/brooklyn/camp/brooklyn/api/HasBrooklynManagementContext.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/camp/brooklyn/api/HasBrooklynManagementContext.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/camp/brooklyn/api/HasBrooklynManagementContext.java",
                "status": "renamed",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/camp/brooklyn/api/HasBrooklynManagementContext.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -1,4 +1,4 @@\n-package io.brooklyn.camp.brooklyn.spi.platform;\n+package brooklyn.camp.brooklyn.api;\n \n import brooklyn.management.ManagementContext;\n ",
                "deletions": 1,
                "previous_filename": "usage/camp/src/main/java/io/brooklyn/camp/brooklyn/spi/platform/HasBrooklynManagementContext.java"
            },
            {
                "sha": "6dfe89a8ba657b5603d389245131969d2abe5e8c",
                "filename": "core/src/main/java/brooklyn/catalog/CatalogPredicates.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/CatalogPredicates.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/CatalogPredicates.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/catalog/CatalogPredicates.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -47,6 +47,15 @@ public boolean apply(@Nullable CatalogItem<T,SpecT> item) {\n         };\n     }\n \n+    public static <T,SpecT> Predicate<CatalogItem<T,SpecT>> registeredType(final Predicate<? super String> filter) {\n+        return new Predicate<CatalogItem<T,SpecT>>() {\n+            @Override\n+            public boolean apply(@Nullable CatalogItem<T,SpecT> item) {\n+                return (item != null) && filter.apply(item.getRegisteredTypeName());\n+            }\n+        };\n+    }\n+\n     public static <T,SpecT> Predicate<CatalogItem<T,SpecT>> javaType(final Predicate<? super String> filter) {\n         return new Predicate<CatalogItem<T,SpecT>>() {\n             @Override",
                "deletions": 0
            },
            {
                "sha": "6a4f3d2c46966ed3bc00c70b5de354b03ac3572c",
                "filename": "core/src/main/java/brooklyn/catalog/internal/BasicBrooklynCatalog.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/BasicBrooklynCatalog.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/BasicBrooklynCatalog.java",
                "status": "modified",
                "changes": 99,
                "additions": 82,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/catalog/internal/BasicBrooklynCatalog.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -1,7 +1,10 @@\n package brooklyn.catalog.internal;\n \n import io.brooklyn.camp.CampPlatform;\n+import io.brooklyn.camp.spi.AssemblyTemplate;\n+import io.brooklyn.camp.spi.instantiate.AssemblyTemplateInstantiator;\n import io.brooklyn.camp.spi.pdp.DeploymentPlan;\n+import io.brooklyn.camp.spi.pdp.Service;\n \n import java.util.NoSuchElementException;\n \n@@ -10,6 +13,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import brooklyn.camp.brooklyn.api.AssemblyTemplateSpecInstantiator;\n import brooklyn.catalog.BrooklynCatalog;\n import brooklyn.catalog.CatalogItem;\n import brooklyn.catalog.CatalogPredicates;\n@@ -18,7 +22,9 @@\n import brooklyn.util.exceptions.Exceptions;\n import brooklyn.util.javalang.AggregateClassLoader;\n import brooklyn.util.javalang.LoadedClassLoader;\n+import brooklyn.util.javalang.Reflections;\n import brooklyn.util.stream.Streams;\n+import brooklyn.util.text.Strings;\n import brooklyn.util.time.Duration;\n import brooklyn.util.time.Time;\n \n@@ -96,14 +102,57 @@ public void load() {\n         }\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T, SpecT> SpecT createSpec(CatalogItem<T, SpecT> item) {\n-        // TODO #2\n-        throw new UnsupportedOperationException();\n+        CatalogItemDo<T,SpecT> loadedItem = (CatalogItemDo<T, SpecT>) getCatalogItemDo(item.getId());\n+        \n+        Class<SpecT> specType = loadedItem.getSpecType();\n+        if (specType==null) return null;\n+            \n+        String yaml = loadedItem.getYaml();\n+        SpecT spec = null;\n+            \n+        if (yaml!=null) {\n+            DeploymentPlan plan = makePlanFromYaml(yaml);\n+            CampPlatform camp = BrooklynServerConfig.getCampPlatform(mgmt).get();\n+            \n+            // TODO should not register new AT each time we instantiate from the same plan; use some kind of cache\n+            AssemblyTemplate at = camp.pdp().registerDeploymentPlan(plan);\n+            \n+            try {\n+                AssemblyTemplateInstantiator instantiator = at.getInstantiator().newInstance();\n+                if (instantiator instanceof AssemblyTemplateSpecInstantiator) {\n+                    return (SpecT) ((AssemblyTemplateSpecInstantiator)instantiator).createSpec(at, camp);\n+                }\n+                throw new IllegalStateException(\"Unable to instantiate YAML; incompatible instantiator \"+instantiator+\" for \"+at);\n+            } catch (Exception e) {\n+                throw Exceptions.propagate(e);\n+            }\n+        }\n+            \n+        // revert to legacy mechanism\n+        try {\n+            if (loadedItem.getJavaType()!=null) {\n+                @SuppressWarnings({ \"deprecation\" })\n+                SpecT specT = (SpecT) Reflections.findMethod(specType, \"create\", Class.class).invoke(null, loadedItem.getJavaClass());\n+                spec = specT;\n+            }\n+        } catch (Exception e) {\n+            Exceptions.propagateIfFatal(e);\n+            throw new IllegalStateException(\"Unsupported creation of spec type \"+specType+\"; it must have a public static create(Class) method\", e);\n+        }\n+\n+        if (spec==null) \n+            throw new IllegalStateException(\"Unknown how to create instance of \"+this);\n+\n+        return spec;\n     }\n     \n     @SuppressWarnings(\"unchecked\")\n     @Override\n+    /** @deprecated since 0.7.0 use {@link #createSpec(CatalogItem)} */\n+    @Deprecated\n     public <T,SpecT> Class<? extends T> loadClass(CatalogItem<T,SpecT> item) {\n         if (log.isDebugEnabled())\n             log.debug(\"Loading class for catalog item \" + item);\n@@ -115,6 +164,8 @@ public void load() {\n     \n     @SuppressWarnings(\"unchecked\")\n     @Override\n+    /** @deprecated since 0.7.0 use {@link #createSpec(CatalogItem)} */\n+    @Deprecated\n     public <T> Class<? extends T> loadClassByType(String typeName, Class<T> typeClass) {\n         Iterable<CatalogItem<Object,Object>> resultL = getCatalogItems(CatalogPredicates.javaType(Predicates.equalTo(typeName)));\n         if (Iterables.isEmpty(resultL)) throw new NoSuchElementException(\"Unable to find catalog item for type \"+typeName);\n@@ -125,29 +176,45 @@ public void load() {\n         return (Class<? extends T>) loadClass(resultI);\n     }\n \n-    @Deprecated\n+    @Deprecated /** @deprecated since 0.7.0 only used by other deprecated items */ \n     private <T,SpecT> CatalogItemDtoAbstract<T,SpecT> getAbstractCatalogItem(CatalogItem<T,SpecT> item) {\n         while (item instanceof CatalogItemDo) item = ((CatalogItemDo<T,SpecT>)item).itemDto;\n         if (item==null) return null;\n         if (item instanceof CatalogItemDtoAbstract) return (CatalogItemDtoAbstract<T,SpecT>) item;\n         throw new IllegalStateException(\"Cannot unwrap catalog item '\"+item+\"' (type \"+item.getClass()+\") to restore DTO\");\n     }\n \n-    private <T,SpecT> CatalogItemDtoAbstract<T,SpecT> getAbstractCatalogItem(String yaml) {\n-        CampPlatform camp = BrooklynServerConfig.getCampPlatform(mgmt).get();\n+    private CatalogItemDtoAbstract<?,?> getAbstractCatalogItem(String yaml) {\n+        DeploymentPlan plan = makePlanFromYaml(yaml);\n         \n-        DeploymentPlan plan = camp.pdp().parseDeploymentPlan(Streams.newReaderWithContents(yaml));\n+        // TODO #2 parse brooklyn.catalog for metadata - name, bundles/libraries, etc\n+        // (for now we default to taking the name from the plan or from a single service type therein, below)\n+        String name = null;\n+        CatalogLibrariesDto libraries = null;\n         \n-        // TODO #2 parse brooklyn.catalog metadata, bundles etc.\n-        // for now take the name from the plan or from a single service type therein\n+        // TODO #3 support version info\n         \n-        // TODO #3 version info\n+        // take name from plan if not specified in brooklyn.catalog section not supplied\n+        if (Strings.isBlank(name)) {\n+            name = plan.getName();\n+            if (Strings.isBlank(name)) {\n+                if (plan.getServices().size()==1) {\n+                    Service svc = Iterables.getOnlyElement(plan.getServices());\n+                    name = svc.getServiceType();\n+                }\n+            }\n+        }\n         \n-        // TODO #1 build the catalog item from the plan (as CatalogItem<Entity> ?)\n-//        plan.getName()\n-        // TODO #2 then support instantiating from the item, replacing \n+        // build the catalog item from the plan (as CatalogItem<Entity> for now)\n+        // TODO applications / templates\n+        // TODO long-term support policies etc\n         \n-        throw new UnsupportedOperationException();\n+        return CatalogItemDtoAbstract.newEntityFromPlan(name, libraries, plan, yaml);\n+    }\n+\n+    private DeploymentPlan makePlanFromYaml(String yaml) {\n+        CampPlatform camp = BrooklynServerConfig.getCampPlatform(mgmt).get();\n+        return camp.pdp().parseDeploymentPlan(Streams.newReaderWithContents(yaml));\n     }\n \n     @Override\n@@ -160,15 +227,15 @@ public void load() {\n         return itemDto;\n     }\n \n-    @Override @Deprecated\n+    @Override @Deprecated /** @deprecated see super */\n     public void addItem(CatalogItem<?,?> item) {\n         log.debug(\"Adding manual catalog item to \"+mgmt+\": \"+item);\n         Preconditions.checkNotNull(item, \"item\");\n         if (manualAdditionsCatalog==null) loadManualAdditionsCatalog();\n         manualAdditionsCatalog.addEntry(getAbstractCatalogItem(item));\n     }\n \n-    @Override @Deprecated\n+    @Override @Deprecated /** @deprecated see super */\n     public CatalogItem<?,?> addItem(Class<?> type) {\n         log.debug(\"Adding manual catalog item to \"+mgmt+\": \"+type);\n         Preconditions.checkNotNull(type, \"type\");\n@@ -177,7 +244,6 @@ public void addItem(CatalogItem<?,?> item) {\n         return manualAdditionsCatalog.classpath.addCatalogEntry(type);\n     }\n \n-    @Deprecated\n     private synchronized void loadManualAdditionsCatalog() {\n         if (manualAdditionsCatalog!=null) return;\n         CatalogDto manualAdditionsCatalogDto = CatalogDto.newNamedInstance(\n@@ -218,7 +284,6 @@ private synchronized void loadManualAdditionsCatalog() {\n         return Iterables.transform(filtered, BasicBrooklynCatalog.<T,SpecT>itemDoToDto());\n     }\n \n-    @SuppressWarnings({ \"unchecked\" })\n     private static <T,SpecT> Function<CatalogItemDo<T,SpecT>, CatalogItem<T,SpecT>> itemDoToDto() {\n         return new Function<CatalogItemDo<T,SpecT>, CatalogItem<T,SpecT>>() {\n             @Override",
                "deletions": 17
            },
            {
                "sha": "badf3191f373600928ee40533cbfa93a0d67856d",
                "filename": "core/src/main/java/brooklyn/catalog/internal/CatalogClasspathDo.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/CatalogClasspathDo.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/CatalogClasspathDo.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/catalog/internal/CatalogClasspathDo.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -207,7 +207,9 @@ public boolean apply(@Nullable Class<? extends T> input) {\n         return Iterables.filter(input, f);\n     }\n \n-    /** augments the given item with annotations and class data for the given class, then adds to catalog */\n+    /** augments the given item with annotations and class data for the given class, then adds to catalog\n+     * @deprecated since 0.7.0 the classpath DO is replaced by libraries */\n+    @Deprecated\n     public CatalogItem<?,?> addCatalogEntry(Class<?> c) {\n         if (Application.class.isAssignableFrom(c)) return addCatalogEntry(new CatalogTemplateItemDto(), c);\n         if (ApplicationBuilder.class.isAssignableFrom(c)) return addCatalogEntry(new CatalogTemplateItemDto(), c);\n@@ -217,10 +219,12 @@ public boolean apply(@Nullable Class<? extends T> input) {\n     }\n     \n     /** augments the given item with annotations and class data for the given class, then adds to catalog \n-     */\n+     * @deprecated since 0.7.0 the classpath DO is replaced by libraries */\n+    @Deprecated\n     public CatalogItem<?,?> addCatalogEntry(CatalogItemDtoAbstract<?,?> item, Class<?> c) {\n         Catalog annotations = c.getAnnotation(Catalog.class);\n-        item.type = c.getName();\n+        item.registeredType = c.getName();\n+        item.javaType = c.getName();\n         item.name = firstNonEmpty(c.getSimpleName(), c.getName());\n         if (annotations!=null) {\n             item.name = firstNonEmpty(annotations.name(), item.name);",
                "deletions": 3
            },
            {
                "sha": "f07c9422da7c7f91b7d94fcd558615ec8b12165a",
                "filename": "core/src/main/java/brooklyn/catalog/internal/CatalogConfigurationDto.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/CatalogConfigurationDto.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/CatalogConfigurationDto.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/catalog/internal/CatalogConfigurationDto.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -12,4 +12,15 @@ public CatalogItemType getCatalogItemType() {\n     }\n \n     public Class<ConfigKey> getCatalogItemJavaType() { return ConfigKey.class; }\n+\n+    @Override\n+    public String getRegisteredTypeName() {\n+        return getJavaType();\n+    }\n+    \n+    @Override\n+    public Class<Void> getSpecType() {\n+        return null;\n+    }\n+    \n }",
                "deletions": 0
            },
            {
                "sha": "5cda68dc61e24720d05192b3a8e54765cd64c5c0",
                "filename": "core/src/main/java/brooklyn/catalog/internal/CatalogDo.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/CatalogDo.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/CatalogDo.java",
                "status": "modified",
                "changes": 13,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/catalog/internal/CatalogDo.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -92,10 +92,15 @@ private void loadCatalogClasspath() {\n \n     private void loadCatalogItems() {\n         List<CatalogLibrariesDo> loadedLibraries = Lists.newLinkedList();\n-        for (CatalogItemDtoAbstract<?,?> entry : dto.entries) {\n-            CatalogLibrariesDo library = new CatalogLibrariesDo(entry.getLibrariesDto());\n-            library.load(mgmt);\n-            loadedLibraries.add(library);\n+        List<CatalogItemDtoAbstract<?, ?>> entries = dto.entries;\n+        if (entries!=null) {\n+            for (CatalogItemDtoAbstract<?,?> entry : entries) {\n+                if (entry.getLibrariesDto()!=null) {\n+                    CatalogLibrariesDo library = new CatalogLibrariesDo(entry.getLibrariesDto());\n+                    library.load(mgmt);\n+                    loadedLibraries.add(library);\n+                }\n+            }\n         }\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "655ed29d3a1347830fa444436ea969e1a25cdcd4",
                "filename": "core/src/main/java/brooklyn/catalog/internal/CatalogDto.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/CatalogDto.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/CatalogDto.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/catalog/internal/CatalogDto.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -7,10 +7,11 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.common.base.Objects;\n-\n import brooklyn.util.ResourceUtils;\n import brooklyn.util.exceptions.Exceptions;\n+import brooklyn.util.exceptions.PropagatedRuntimeException;\n+\n+import com.google.common.base.Objects;\n \n public class CatalogDto {\n \n@@ -42,8 +43,8 @@ public static CatalogDto newDtoFromUrl(String url) {\n             if (LOG.isDebugEnabled()) LOG.debug(\"Retrieved catalog from: {}\", url);\n             return result;\n         } catch (Throwable t) {\n-            LOG.debug(\"Unable to retrieve catalog from: \" + url + \" (\" + t + \")\");\n-            throw Exceptions.propagate(t);\n+            Exceptions.propagateIfFatal(t);\n+            throw new PropagatedRuntimeException(\"Unable to retrieve catalog from \" + url + \": \" + t, t);\n         }\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "60d6fbe5f587accc8433e21ba8e1648d10828cf8",
                "filename": "core/src/main/java/brooklyn/catalog/internal/CatalogEntityItemDto.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/CatalogEntityItemDto.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/CatalogEntityItemDto.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/catalog/internal/CatalogEntityItemDto.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -6,6 +6,8 @@\n \n public class CatalogEntityItemDto extends CatalogItemDtoAbstract<Entity,EntitySpec<?>> {\n     \n+    String planYaml;\n+\n     @Override\n     public CatalogItemType getCatalogItemType() {\n         return CatalogItemType.ENTITY;\n@@ -16,4 +18,14 @@ public CatalogItemType getCatalogItemType() {\n         return Entity.class;\n     }\n \n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    @Override\n+    public Class<EntitySpec<?>> getSpecType() {\n+        return (Class)EntitySpec.class;\n+    }\n+\n+    public String getPlanYaml() {\n+        return planYaml;\n+    }\n+    \n }",
                "deletions": 0
            },
            {
                "sha": "200db52772895244ddfa3b81da2c52d8c24d6749",
                "filename": "core/src/main/java/brooklyn/catalog/internal/CatalogItemDo.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/CatalogItemDo.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/CatalogItemDo.java",
                "status": "modified",
                "changes": 32,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/catalog/internal/CatalogItemDo.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -1,22 +1,23 @@\n package brooklyn.catalog.internal;\n \n import javax.annotation.Nonnull;\n-\n-import com.google.common.base.Preconditions;\n+import javax.annotation.Nullable;\n \n import brooklyn.catalog.CatalogItem;\n import brooklyn.util.exceptions.Exceptions;\n \n+import com.google.common.base.Preconditions;\n+\n public class CatalogItemDo<T,SpecT> implements CatalogItem<T,SpecT> {\n \n     protected final CatalogDo catalog;\n-    protected final CatalogItem<T,SpecT> itemDto;\n+    protected final CatalogItemDtoAbstract<T,SpecT> itemDto;\n \n     protected volatile Class<T> javaClass; \n     \n     public CatalogItemDo(CatalogDo catalog, CatalogItem<T,SpecT> itemDto) {\n         this.catalog = Preconditions.checkNotNull(catalog, \"catalog\");\n-        this.itemDto = Preconditions.checkNotNull(itemDto, \"itemDto\");\n+        this.itemDto = (CatalogItemDtoAbstract<T, SpecT>) Preconditions.checkNotNull(itemDto, \"itemDto\");\n     }\n \n     public CatalogItem<T,SpecT> getDto() {\n@@ -38,6 +39,11 @@ public String getId() {\n         return itemDto.getId();\n     }\n \n+    @Override\n+    public String getRegisteredTypeName() {\n+        return itemDto.getRegisteredTypeName();\n+    }\n+    \n     @Override\n     public String getJavaType() {\n         return itemDto.getJavaType();\n@@ -69,6 +75,17 @@ public CatalogItemLibraries getLibraries() {\n         return itemDto.getLibraries();\n     }\n \n+    @Nullable\n+    public String getYaml() {\n+        if (itemDto instanceof CatalogEntityItemDto) {\n+            return ((CatalogEntityItemDto)itemDto).getPlanYaml();\n+        }\n+        return null;\n+    }\n+    \n+    /** @deprecated since 0.7.0 this is the legacy mechanism; still needed for policies and apps, but being phased out.\n+     * new items should use {@link #getYaml()} */\n+    @Deprecated\n     public Class<T> getJavaClass() {\n         if (javaClass==null) loadJavaClass();\n         return javaClass;\n@@ -78,6 +95,9 @@ public CatalogItemLibraries getLibraries() {\n     protected Class<? extends T> loadJavaClass() {\n         try {\n             if (javaClass!=null) return javaClass;\n+            \n+            // TODO use OSGi\n+            \n             javaClass = (Class<T>) catalog.getRootClassLoader().loadClass(getJavaType());\n             return javaClass;\n         } catch (ClassNotFoundException e) {\n@@ -93,5 +113,9 @@ public String toString() {\n     public String toXmlString() {\n         return itemDto.toXmlString();\n     }\n+\n+    public Class<SpecT> getSpecType() {\n+        return itemDto.getSpecType();\n+    }\n     \n }",
                "deletions": 4
            },
            {
                "sha": "4957474c1a138d6060be6d80f04591c56da52f15",
                "filename": "core/src/main/java/brooklyn/catalog/internal/CatalogItemDtoAbstract.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/CatalogItemDtoAbstract.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/CatalogItemDtoAbstract.java",
                "status": "modified",
                "changes": 74,
                "additions": 51,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/catalog/internal/CatalogItemDtoAbstract.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -1,26 +1,45 @@\n package brooklyn.catalog.internal;\n \n+import io.brooklyn.camp.spi.pdp.DeploymentPlan;\n+\n import javax.annotation.Nonnull;\n \n import brooklyn.catalog.CatalogItem;\n \n public abstract class CatalogItemDtoAbstract<T,SpecT> implements CatalogItem<T,SpecT> {\n \n+    // TODO are ID and registeredType the same?\n     String id;\n-    String type;\n+    String registeredType;\n+    \n+    String javaType;\n     String name;\n     String description;\n     String iconUrl;\n     String version;\n     CatalogLibrariesDto libraries;\n     \n+    /** @deprecated since 0.7.0.\n+     * used for backwards compatibility when deserializing.\n+     * when catalogs are converted to new yaml format, this can be removed. */\n+    @Deprecated\n+    String type;\n+    \n     public String getId() {\n         if (id!=null) return id;\n-        return type;\n+        return getRegisteredTypeName();\n+    }\n+    \n+    @Override\n+    public String getRegisteredTypeName() {\n+        if (registeredType!=null) return registeredType;\n+        return getJavaType();\n     }\n     \n     public String getJavaType() {\n-        return type;\n+        if (javaType!=null) return javaType;\n+        if (type!=null) return type;\n+        return null;\n     }\n     \n     public String getName() {\n@@ -49,41 +68,48 @@ public CatalogLibrariesDto getLibrariesDto() {\n         return libraries;\n     }\n \n-    public static CatalogTemplateItemDto newTemplate(String type, String name) {\n-        return newTemplate(null, type, name, null);\n+    public static CatalogTemplateItemDto newTemplateFromJava(String javaType, String name) {\n+        return newTemplateFromJava(null, javaType, name, null);\n     }\n-    public static CatalogTemplateItemDto newTemplate(String id, String type, String name, String description) {\n-        return newTemplate(id, type, name, description, null);\n+    public static CatalogTemplateItemDto newTemplateFromJava(String id, String javaType, String name, String description) {\n+        return newTemplateFromJava(id, javaType, name, description, null);\n     }\n-    public static CatalogTemplateItemDto newTemplate(String id, String type, String name, String description, CatalogLibrariesDto libraries) {\n-        return set(new CatalogTemplateItemDto(), id, type, name, description, libraries);\n+    public static CatalogTemplateItemDto newTemplateFromJava(String id, String javaType, String name, String description, CatalogLibrariesDto libraries) {\n+        return set(new CatalogTemplateItemDto(), id, javaType, javaType, name, description, libraries);\n     }\n \n-    public static CatalogEntityItemDto newEntity(String type, String name) {\n-        return newEntity(null, type, name, null);\n+    public static CatalogEntityItemDto newEntityFromPlan(String registeredTypeName, CatalogLibrariesDto libraries, DeploymentPlan plan, String underlyingPlanYaml) {\n+        CatalogEntityItemDto target = set(new CatalogEntityItemDto(), null, registeredTypeName, null, plan.getName(), plan.getDescription(), libraries);\n+        target.planYaml = underlyingPlanYaml;\n+        return target;\n     }\n-    public static CatalogEntityItemDto newEntity(String id, String type, String name, String description) {\n-        return newEntity(id, type, name, description, null);\n+    \n+    public static CatalogEntityItemDto newEntityFromJava(String javaType, String name) {\n+        return newEntityFromJava(null, javaType, name, null);\n+    }\n+    public static CatalogEntityItemDto newEntityFromJava(String id, String javaType, String name, String description) {\n+        return newEntityFromJava(id, javaType, name, description, null);\n     }\n-    public static CatalogEntityItemDto newEntity(String id, String type, String name, String description, CatalogLibrariesDto libraries) {\n-        return set(new CatalogEntityItemDto(), id, type, name, description, libraries);\n+    public static CatalogEntityItemDto newEntityFromJava(String id, String javaType, String name, String description, CatalogLibrariesDto libraries) {\n+        return set(new CatalogEntityItemDto(), id, javaType, javaType, name, description, libraries);\n     }\n \n-    public static CatalogPolicyItemDto newPolicy(String type, String name) {\n-        return newPolicy(null, type, name, null);\n+    public static CatalogPolicyItemDto newPolicyFromJava(String javaType, String name) {\n+        return newPolicyFromJava(null, javaType, name, null);\n     }\n-    public static CatalogPolicyItemDto newPolicy(String id, String type, String name, String description) {\n-        return newPolicy(id, type, name, description, null);\n+    public static CatalogPolicyItemDto newPolicyFromJava(String id, String javaType, String name, String description) {\n+        return newPolicyFromJava(id, javaType, name, description, null);\n     }\n-    public static CatalogPolicyItemDto newPolicy(String id, String type, String name, String description, CatalogLibrariesDto libraries) {\n-        return set(new CatalogPolicyItemDto(), id, type, name, description, libraries);\n+    public static CatalogPolicyItemDto newPolicyFromJava(String id, String javaType, String name, String description, CatalogLibrariesDto libraries) {\n+        return set(new CatalogPolicyItemDto(), id, javaType, javaType, name, description, libraries);\n     }\n \n     @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n-    private static <T extends CatalogItemDtoAbstract> T set(T target, String id, String type, String name,\n+    private static <T extends CatalogItemDtoAbstract> T set(T target, String id, String registeredType, String javaType, String name,\n             String description, CatalogLibrariesDto libraries) {\n         target.id = id;\n-        target.type = type;\n+        target.registeredType = registeredType;\n+        target.javaType = javaType;\n         target.name = name;\n         target.description = description;\n         target.libraries = libraries != null ? libraries : new CatalogLibrariesDto();\n@@ -106,5 +132,7 @@ private synchronized void loadSerializer() {\n         if (serializer==null) \n             serializer = new CatalogXmlSerializer();\n     }\n+\n+    public abstract Class<SpecT> getSpecType();\n     \n }",
                "deletions": 23
            },
            {
                "sha": "0892c31d16a7a4edcc852c053fead8b512c906a8",
                "filename": "core/src/main/java/brooklyn/catalog/internal/CatalogLibrariesDo.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/CatalogLibrariesDo.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/CatalogLibrariesDo.java",
                "status": "modified",
                "changes": 9,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/catalog/internal/CatalogLibrariesDo.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -5,18 +5,17 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.common.base.Joiner;\n-import com.google.common.base.Preconditions;\n-import com.google.common.base.Stopwatch;\n-\n import brooklyn.catalog.CatalogItem;\n import brooklyn.management.ManagementContext;\n import brooklyn.management.ha.OsgiManager;\n import brooklyn.management.internal.ManagementContextInternal;\n import brooklyn.util.guava.Maybe;\n-import brooklyn.util.text.Strings;\n import brooklyn.util.time.Time;\n \n+import com.google.common.base.Joiner;\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Stopwatch;\n+\n public class CatalogLibrariesDo implements CatalogItem.CatalogItemLibraries {\n \n     private static final Logger LOG = LoggerFactory.getLogger(CatalogLibrariesDo.class);",
                "deletions": 5
            },
            {
                "sha": "a4089218b182ef080b822fdea8be84130f58ab7f",
                "filename": "core/src/main/java/brooklyn/catalog/internal/CatalogLibrariesDto.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/CatalogLibrariesDto.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/CatalogLibrariesDto.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/catalog/internal/CatalogLibrariesDto.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -1,8 +1,10 @@\n package brooklyn.catalog.internal;\n \n+import java.util.Collections;\n import java.util.List;\n import java.util.concurrent.CopyOnWriteArrayList;\n \n+import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableList;\n \n import brooklyn.catalog.CatalogItem;\n@@ -12,11 +14,16 @@\n     private List<String> bundles = new CopyOnWriteArrayList<String>();\n \n     public void addBundle(String url) {\n-        bundles.add(url);\n+        Preconditions.checkNotNull(url, \"Cannot add a bundle to a deserialized DTO\");\n+        bundles.add( Preconditions.checkNotNull(url) );\n     }\n \n     /** @return An immutable copy of the bundle URLs referenced by this object */\n     public List<String> getBundles() {\n+        if (bundles==null)  {\n+            // can be null on deserialization\n+            return Collections.emptyList();\n+        }\n         return ImmutableList.copyOf(bundles);\n     }\n ",
                "deletions": 1
            },
            {
                "sha": "a07781997071c318e9621abbef2f69499719391b",
                "filename": "core/src/main/java/brooklyn/catalog/internal/CatalogPolicyItemDto.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/CatalogPolicyItemDto.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/CatalogPolicyItemDto.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/catalog/internal/CatalogPolicyItemDto.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -16,4 +16,10 @@ public CatalogItemType getCatalogItemType() {\n         return Policy.class;\n     }\n \n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    @Override\n+    public Class<PolicySpec<?>> getSpecType() {\n+        return (Class)PolicySpec.class;\n+    }\n+\n }",
                "deletions": 0
            },
            {
                "sha": "76531e93845331db142dd2cfc620dbc2e8c09267",
                "filename": "core/src/main/java/brooklyn/catalog/internal/CatalogTemplateItemDto.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/CatalogTemplateItemDto.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/catalog/internal/CatalogTemplateItemDto.java",
                "status": "modified",
                "changes": 10,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/catalog/internal/CatalogTemplateItemDto.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -3,7 +3,7 @@\n import brooklyn.entity.Application;\n import brooklyn.entity.proxying.EntitySpec;\n \n-public class CatalogTemplateItemDto extends CatalogItemDtoAbstract<Application,EntitySpec<?>> {\n+public class CatalogTemplateItemDto extends CatalogItemDtoAbstract<Application,EntitySpec<? extends Application>> {\n \n     @Override\n     public CatalogItemType getCatalogItemType() {\n@@ -14,5 +14,11 @@ public CatalogItemType getCatalogItemType() {\n     public Class<Application> getCatalogItemJavaType() {\n         return Application.class;\n     }\n-    \n+\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    @Override\n+    public Class<EntitySpec<? extends Application>> getSpecType() {\n+        return (Class)EntitySpec.class;\n+    }\n+\n }",
                "deletions": 2
            },
            {
                "sha": "2d9ea9120c9c345e25f8b34f309b63dde13d517d",
                "filename": "core/src/main/java/brooklyn/entity/rebind/plane/dto/BasicManagementNodeSyncRecord.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/entity/rebind/plane/dto/BasicManagementNodeSyncRecord.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/core/src/main/java/brooklyn/entity/rebind/plane/dto/BasicManagementNodeSyncRecord.java",
                "status": "modified",
                "changes": 12,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/rebind/plane/dto/BasicManagementNodeSyncRecord.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -78,8 +78,14 @@ public ManagementNodeSyncRecord build() {\n     private String nodeId;\n     private URI uri;\n     private ManagementNodeState status;\n-    private long localTimestamp;\n+    private Long localTimestamp;\n     private Long remoteTimestamp;\n+    \n+    /** @deprecated since 0.7.0, use {@link #localTimestamp} or {@link #remoteTimestamp},\n+     * but kept (or rather added back in) to support deserializing previous instances */\n+    @Deprecated\n+    private Long timestampUtc;\n+\n \n     // for de-serialization\n     @SuppressWarnings(\"unused\")\n@@ -118,7 +124,9 @@ public ManagementNodeState getStatus() {\n     \n     @Override\n     public long getLocalTimestamp() {\n-        return localTimestamp;\n+        if (localTimestamp!=null) return localTimestamp;\n+        if (timestampUtc!=null) return timestampUtc;\n+        throw new NullPointerException(\"localTimestamp not known for \"+getNodeId());\n     }\n     \n     @Override",
                "deletions": 2
            },
            {
                "sha": "89e6b2eeeb0eac548e72939319b964b0a1b912e3",
                "filename": "core/src/test/java/brooklyn/camp/lite/CampPlatformWithJustBrooklynMgmt.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/core/src/test/java/brooklyn/camp/lite/CampPlatformWithJustBrooklynMgmt.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/core/src/test/java/brooklyn/camp/lite/CampPlatformWithJustBrooklynMgmt.java",
                "status": "added",
                "changes": 23,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/camp/lite/CampPlatformWithJustBrooklynMgmt.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -0,0 +1,23 @@\n+package brooklyn.camp.lite;\n+\n+import io.brooklyn.camp.BasicCampPlatform;\n+import brooklyn.camp.brooklyn.api.HasBrooklynManagementContext;\n+import brooklyn.config.BrooklynProperties;\n+import brooklyn.config.BrooklynServerConfig;\n+import brooklyn.management.ManagementContext;\n+\n+public class CampPlatformWithJustBrooklynMgmt extends BasicCampPlatform implements HasBrooklynManagementContext {\n+\n+    private ManagementContext mgmt;\n+\n+    public CampPlatformWithJustBrooklynMgmt(ManagementContext mgmt) {\n+        this.mgmt = mgmt;\n+        ((BrooklynProperties)mgmt.getConfig()).put(BrooklynServerConfig.CAMP_PLATFORM, this);\n+    }\n+    \n+    @Override\n+    public ManagementContext getBrooklynManagementContext() {\n+        return mgmt;\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "9bbadf7b53e0e6e4a97e08f406a23dd9fbf0544b",
                "filename": "core/src/test/java/brooklyn/camp/lite/CampYamlLiteTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/core/src/test/java/brooklyn/camp/lite/CampYamlLiteTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/core/src/test/java/brooklyn/camp/lite/CampYamlLiteTest.java",
                "status": "modified",
                "changes": 37,
                "additions": 30,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/camp/lite/CampYamlLiteTest.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -1,12 +1,10 @@\n package brooklyn.camp.lite;\n \n-import io.brooklyn.camp.BasicCampPlatform;\n import io.brooklyn.camp.spi.Assembly;\n import io.brooklyn.camp.spi.AssemblyTemplate;\n import io.brooklyn.camp.spi.pdp.PdpYamlTest;\n import io.brooklyn.camp.test.mock.web.MockWebPlatform;\n \n-import java.io.IOException;\n import java.io.InputStreamReader;\n import java.io.Reader;\n import java.util.Map;\n@@ -18,12 +16,17 @@\n import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n+import brooklyn.catalog.CatalogItem;\n+import brooklyn.catalog.CatalogPredicates;\n import brooklyn.entity.Entity;\n+import brooklyn.entity.proxying.EntitySpec;\n import brooklyn.management.internal.LocalManagementContext;\n import brooklyn.test.entity.LocalManagementContextForTests;\n import brooklyn.test.entity.TestApplication;\n import brooklyn.test.entity.TestEntity;\n+import brooklyn.util.stream.Streams;\n \n+import com.google.common.base.Predicates;\n import com.google.common.collect.Iterables;\n \n /** Tests of lightweight CAMP integration. Since the \"real\" integration is in brooklyn-camp project,\n@@ -33,10 +36,12 @@\n     private static final Logger log = LoggerFactory.getLogger(CampYamlLiteTest.class);\n     \n     protected LocalManagementContext mgmt;\n+    protected CampPlatformWithJustBrooklynMgmt platform;\n     \n     @BeforeMethod(alwaysRun=true)\n     public void setUp() {\n-        mgmt = new LocalManagementContextForTests();        \n+        mgmt = new LocalManagementContextForTests();\n+        platform = new CampPlatformWithJustBrooklynMgmt(mgmt);\n     }\n     \n     @AfterMethod(alwaysRun=true)\n@@ -47,16 +52,17 @@ public void tearDown() {\n     /** based on {@link PdpYamlTest} for parsing,\n      * then creating a {@link TestAppAssembly} */\n     @Test\n-    public void testYamlServiceMatchAndBrooklynInstantiate() throws IOException {\n-        BasicCampPlatform platform = MockWebPlatform.populate(new BasicCampPlatform());\n+    public void testYamlServiceMatchAndBrooklynInstantiate() throws Exception {\n+        MockWebPlatform.populate(platform, TestAppAssemblyInstantiator.class);\n+        \n         Reader input = new InputStreamReader(getClass().getResourceAsStream(\"test-app-service-blueprint.yaml\"));\n         AssemblyTemplate at = platform.pdp().registerDeploymentPlan(input);\n         log.info(\"AT is:\\n\"+at.toString());\n         Assert.assertEquals(at.getName(), \"sample\");\n         Assert.assertEquals(at.getPlatformComponentTemplates().links().size(), 1);\n         \n         // now use brooklyn to instantiate\n-        Assembly assembly = new TestAppAssemblyInstantiator(mgmt).instantiate(at, platform);\n+        Assembly assembly = at.getInstantiator().newInstance().instantiate(at, platform);\n         \n         TestApplication app = ((TestAppAssembly)assembly).getBrooklynApp();\n         Assert.assertEquals( app.getConfig(TestEntity.CONF_NAME), \"sample\" );\n@@ -71,5 +77,22 @@ public void testYamlServiceMatchAndBrooklynInstantiate() throws IOException {\n         // desc ensures we got the information from the matcher, as this value is NOT in the yaml\n         Assert.assertEquals( map.get(\"desc\"), MockWebPlatform.APPSERVER.getDescription() );\n     }\n-    \n+\n+    @Test(groups=\"WIP\")\n+    public void testYamlServiceForCatalog() {\n+        MockWebPlatform.populate(platform, TestAppAssemblyInstantiator.class);\n+        \n+        CatalogItem<?, ?> realItem = mgmt.getCatalog().addItem(Streams.readFullyString(getClass().getResourceAsStream(\"test-app-service-blueprint.yaml\")));\n+        Iterable<CatalogItem<Object, Object>> retrievedItems = mgmt.getCatalog().getCatalogItems(CatalogPredicates.registeredType(Predicates.equalTo(\"sample\")));\n+        \n+        Assert.assertEquals(Iterables.size(retrievedItems), 1, \"Wrong retrieved items: \"+retrievedItems);\n+        CatalogItem<Object, Object> retrievedItem = Iterables.getOnlyElement(retrievedItems);\n+        Assert.assertEquals(retrievedItem, realItem);\n+        \n+        EntitySpec<?> spec1 = (EntitySpec<?>) mgmt.getCatalog().createSpec(retrievedItem);\n+        Assert.assertNotNull(spec1);\n+        Assert.assertEquals(spec1.getConfig().get(TestEntity.CONF_NAME), \"sample\");\n+        \n+        // TODO other assertions, about children\n+    }\n }",
                "deletions": 7
            },
            {
                "sha": "e8b7ff863c7c5051576676c1e93b2c3e77396c40",
                "filename": "core/src/test/java/brooklyn/camp/lite/TestAppAssemblyInstantiator.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/core/src/test/java/brooklyn/camp/lite/TestAppAssemblyInstantiator.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/core/src/test/java/brooklyn/camp/lite/TestAppAssemblyInstantiator.java",
                "status": "modified",
                "changes": 40,
                "additions": 32,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/camp/lite/TestAppAssemblyInstantiator.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -6,9 +6,11 @@\n import io.brooklyn.camp.spi.PlatformComponentTemplate;\n import io.brooklyn.camp.spi.collection.ResolvableLink;\n import io.brooklyn.camp.spi.instantiate.BasicAssemblyTemplateInstantiator;\n+import brooklyn.camp.brooklyn.api.AssemblyTemplateSpecInstantiator;\n+import brooklyn.camp.brooklyn.api.HasBrooklynManagementContext;\n import brooklyn.entity.basic.ApplicationBuilder;\n import brooklyn.entity.proxying.EntitySpec;\n-import brooklyn.management.internal.LocalManagementContext;\n+import brooklyn.management.ManagementContext;\n import brooklyn.test.entity.TestApplication;\n import brooklyn.test.entity.TestEntity;\n import brooklyn.util.collections.MutableMap;\n@@ -17,16 +19,20 @@\n  * all setting {@link TestEntity#CONF_NAME} for the name in the plan and in the service specs\n  * <p>\n  * the \"real\" instantiator for brooklyn is in brooklyn-camp project, not visible here, so let's have something we can test */\n-public class TestAppAssemblyInstantiator extends BasicAssemblyTemplateInstantiator {\n+public class TestAppAssemblyInstantiator extends BasicAssemblyTemplateInstantiator implements AssemblyTemplateSpecInstantiator {\n \n-    protected final LocalManagementContext mgmt;\n-    \n-    public TestAppAssemblyInstantiator(LocalManagementContext mgmt) {\n-        this.mgmt = mgmt;\n-    }\n-    \n     @Override\n     public Assembly instantiate(AssemblyTemplate template, CampPlatform platform) {\n+        if (!(platform instanceof HasBrooklynManagementContext)) {\n+            throw new IllegalStateException(\"Instantiator can only be used with CAMP platforms with a Brooklyn management context\");\n+        }\n+        ManagementContext mgmt = ((HasBrooklynManagementContext)platform).getBrooklynManagementContext();\n+        \n+        // TODO when createSpec is working:\n+//        TestApplication app = (TestApplication) mgmt.getEntityManager().createEntity( createSpec(template, platform) );\n+//        mgmt.getEntityManager().manage(app);\n+        \n+        // workaround until above is reacy\n         TestApplication app = ApplicationBuilder.newManagedApp(EntitySpec.create(TestApplication.class)\n             .configure(TestEntity.CONF_NAME, template.getName())\n             .configure(TestEntity.CONF_MAP_THING, MutableMap.of(\"type\", template.getType(), \"desc\", template.getDescription()))\n@@ -37,7 +43,25 @@ public Assembly instantiate(AssemblyTemplate template, CampPlatform platform) {\n                 .configure(TestEntity.CONF_MAP_THING, MutableMap.of(\"type\", t.resolve().getType(), \"desc\", t.resolve().getDescription()))\n                 );\n         }\n+\n         return new TestAppAssembly(app);\n     }\n \n+    @Override\n+    public EntitySpec<?> createSpec(AssemblyTemplate template, CampPlatform platform) {\n+        EntitySpec<TestApplication> app = EntitySpec.create(TestApplication.class)\n+            .configure(TestEntity.CONF_NAME, template.getName())\n+            .configure(TestEntity.CONF_MAP_THING, MutableMap.of(\"type\", template.getType(), \"desc\", template.getDescription()));\n+        \n+        for (ResolvableLink<PlatformComponentTemplate> t: template.getPlatformComponentTemplates().links()) {\n+            // TODO use EntitySpec.child(...)\n+//            app.child(EntitySpec.create(TestEntity.class)\n+//                .configure(TestEntity.CONF_NAME, t.getName())\n+//                .configure(TestEntity.CONF_MAP_THING, MutableMap.of(\"type\", t.resolve().getType(), \"desc\", t.resolve().getDescription()))\n+//                );\n+        }\n+        \n+        return app;\n+    }\n+\n }",
                "deletions": 8
            },
            {
                "sha": "1989cb22de02cd493a2e615f7e731daa3eb5c7c7",
                "filename": "core/src/test/java/brooklyn/catalog/internal/CatalogDtoTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/core/src/test/java/brooklyn/catalog/internal/CatalogDtoTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/core/src/test/java/brooklyn/catalog/internal/CatalogDtoTest.java",
                "status": "modified",
                "changes": 74,
                "additions": 36,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/catalog/internal/CatalogDtoTest.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -11,6 +11,10 @@\n import brooklyn.entity.basic.Entities;\n import brooklyn.management.internal.LocalManagementContext;\n import brooklyn.test.entity.LocalManagementContextForTests;\n+import brooklyn.test.entity.TestApplication;\n+import brooklyn.test.entity.TestEntity;\n+import brooklyn.util.BrooklynMavenArtifacts;\n+import brooklyn.util.maven.MavenRetriever;\n \n public class CatalogDtoTest {\n \n@@ -31,28 +35,31 @@ public void tearDown() throws Exception {\n     @Test(groups=\"Integration\")\n     public void testCatalogLookup() {\n         CatalogDto root = buildExampleCatalog();\n-        checkHadoopsExample(root);\n+        checkCatalogHealthy(root);\n     }\n     \n     @Test(groups=\"Integration\")\n     public void testCatalogSerializeAndLookup() {\n         CatalogDto root = buildExampleCatalog();\n-        CatalogXmlSerializer seriailizer = new CatalogXmlSerializer();\n+        CatalogXmlSerializer serializer = new CatalogXmlSerializer();\n         \n-        String xml = seriailizer.toString(root);\n-        log.info(\"Hadoops example catalog serialized as:\\n\"+xml);\n+        String xml = serializer.toString(root);\n+        log.info(\"Example catalog serialized as:\\n\"+xml);\n         \n-        CatalogDto root2 = (CatalogDto) seriailizer.fromString(xml);\n-        checkHadoopsExample(root2);\n+        CatalogDto root2 = (CatalogDto) serializer.fromString(xml);\n+        checkCatalogHealthy(root2);\n     }\n \n-    protected void checkHadoopsExample(CatalogDto root) {\n-        Assert.assertEquals(root.catalogs.size(), 5);\n+    protected void checkCatalogHealthy(CatalogDto root) {\n+        Assert.assertEquals(root.catalogs.size(), 4);\n         CatalogDo loader = new CatalogDo(root).load(managementContext, null);\n         \n-        CatalogItemDo<?,?> worker = loader.getCache().get(\"io.brooklyn.mapr.m3.WorkerNode\");\n+        // test app comes from jar, by default\n+        CatalogItemDo<?,?> worker = loader.getCache().get(TestApplication.class.getCanonicalName());\n         Assert.assertNotNull(worker);\n-        Assert.assertEquals(worker.getName(), \"M3 Worker Node\");\n+        Assert.assertEquals(worker.getName(), \"Test App from JAR\");\n+        \n+        // TODO can test scanned elements, links to other catalogs, etc\n     }\n \n     public static CatalogDto buildExampleCatalog() {\n@@ -61,39 +68,30 @@ public static CatalogDto buildExampleCatalog() {\n         \t\t\"intended partly as a teaching example for what can be expressed, and how\"));\n         root.setClasspathScanForEntities(CatalogScanningModes.NONE);\n         \n-        CatalogDo m3Catalog = new CatalogDo(CatalogDto.newNamedInstance(\"MapR M3\", null));\n-        m3Catalog.addToClasspath(\"file://~/.m2/repository/io/cloudsoft/brooklyn-mapr/1.0.0-SNAPSHOT/brooklyn-mapr.jar\");\n-        m3Catalog.addEntry(CatalogItemDtoAbstract.newTemplate(\n-                \"io.brooklyn.mapr.M3App\", \"M3 Application\"));\n-        m3Catalog.addEntry(CatalogItemDtoAbstract.newEntity(\n-                \"io.brooklyn.mapr.m3.ZookeperWorkerNode\", \"M3 Zookeeper+Worker Node\"));\n-        m3Catalog.addEntry(CatalogItemDtoAbstract.newEntity(\n-                \"io.brooklyn.mapr.m3.WorkerNode\", \"M3 Worker Node\"));\n-        root.addCatalog(m3Catalog.dto);\n-        \n-        CatalogDo cdhCatalog = new CatalogDo(CatalogDto.newNamedInstance(\"Cloudera\", \n-                \"CDH catalog, pointing to JARs as I have them installed on my machine already, \"+\n-                \"tweaked for my preferences (overriding templates scanned from these JARs)\"));\n-        cdhCatalog.setClasspathScanForEntities(CatalogScanningModes.ANNOTATIONS);\n-        cdhCatalog.addToClasspath(\n-                \"file://~/.m2/repository/io/cloudsoft/brooklyn-cdh/1.0.0-SNAPSHOT/brooklyn-cdh.jar\",\n-                \"file://~/.m2/repository/io/cloudsoft/brooklyn-cdh/1.0.0-SNAPSHOT/whirr-cm.jar\");\n-        cdhCatalog.addEntry(CatalogItemDtoAbstract.newTemplate(\n-                \"io.brooklyn.cloudera.ClouderaForHadoopWithManager\",\n-                \"RECOMMENDED: CDH Hadoop Application with Cloudera Manager\"));\n-        root.addCatalog(cdhCatalog.dto);\n+        CatalogDo testEntitiesJavaCatalog = new CatalogDo(CatalogDto.newNamedInstance(\"Test Entities from Java\", null));\n+        testEntitiesJavaCatalog.setClasspathScanForEntities(CatalogScanningModes.NONE);\n+        testEntitiesJavaCatalog.addToClasspath(MavenRetriever.localUrl(BrooklynMavenArtifacts.artifact(\"\", \"brooklyn-core\", \"jar\", \"tests\")));\n+        testEntitiesJavaCatalog.addEntry(CatalogItemDtoAbstract.newTemplateFromJava(\n+                TestApplication.class.getCanonicalName(), \"Test App from JAR\"));\n+        testEntitiesJavaCatalog.addEntry(CatalogItemDtoAbstract.newEntityFromJava(\n+                TestEntity.class.getCanonicalName(), \"Test Entity from JAR\"));\n+        root.addCatalog(testEntitiesJavaCatalog.dto);\n \n-        CatalogDo osgiCatalog = new CatalogDo(CatalogDto.newNamedInstance(\"OSGi\",\n+        CatalogDo testEntitiesJavaCatalogScanning = new CatalogDo(CatalogDto.newNamedInstance(\"Test Entities from Java Scanning\", null));\n+        testEntitiesJavaCatalogScanning.addToClasspath(MavenRetriever.localUrl(BrooklynMavenArtifacts.artifact(\"\", \"brooklyn-core\", \"jar\", \"tests\")));\n+        testEntitiesJavaCatalogScanning.setClasspathScanForEntities(CatalogScanningModes.ANNOTATIONS);\n+        root.addCatalog(testEntitiesJavaCatalogScanning.dto);\n+        \n+        CatalogDo osgiCatalog = new CatalogDo(CatalogDto.newNamedInstance(\"Test Entities from OSGi\",\n                 \"A catalog whose entries define their libraries as a list of OSGi bundles\"));\n         osgiCatalog.setClasspathScanForEntities(CatalogScanningModes.NONE);\n-        CatalogLibrariesDto m3Context = new CatalogLibrariesDto();\n-        m3Context.addBundle(\"file://~/.m2/repository/io/cloudsoft/brooklyn-mapr/1.0.0-SNAPSHOT/brooklyn-mapr.jar\");\n-        osgiCatalog.addEntry(CatalogItemDtoAbstract.newTemplate(\"M3App\", \"io.brooklyn.mapr.M3App\", \"M3 Application\",\n-                \"Description\", m3Context));\n+        CatalogEntityItemDto osgiEntity = CatalogItemDtoAbstract.newEntityFromJava(TestEntity.class.getCanonicalName(), \"Test Entity from OSGi\");\n+        // NB: this is not actually an OSGi bundle, but it's okay as we don't instantiate the bundles ahead of time (currently)\n+        osgiEntity.libraries.addBundle(MavenRetriever.localUrl(BrooklynMavenArtifacts.artifact(\"\", \"brooklyn-core\", \"jar\", \"tests\")));\n+        testEntitiesJavaCatalog.addEntry(osgiEntity);\n         root.addCatalog(osgiCatalog.dto);\n \n-        root.addCatalog(CatalogDto.newLinkedInstance(\"http://cloudsoftcorp.com/amp-brooklyn-catalog.xml\"));\n-        root.addCatalog(CatalogDto.newLinkedInstance(\"http://microsoot.com/oofice-catalog.xml\"));\n+        root.addCatalog(CatalogDto.newLinkedInstance(\"classpath://brooklyn-catalog-empty.xml\"));\n         return root.dto;\n     }\n ",
                "deletions": 38
            },
            {
                "sha": "32102eea744b126f89b31c50433c6ce0746a701c",
                "filename": "usage/camp/src/main/java/io/brooklyn/camp/brooklyn/BrooklynCampPlatform.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/usage/camp/src/main/java/io/brooklyn/camp/brooklyn/BrooklynCampPlatform.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/usage/camp/src/main/java/io/brooklyn/camp/brooklyn/BrooklynCampPlatform.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/camp/src/main/java/io/brooklyn/camp/brooklyn/BrooklynCampPlatform.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -5,8 +5,8 @@\n import io.brooklyn.camp.brooklyn.spi.creation.BrooklynEntityMatcher;\n import io.brooklyn.camp.brooklyn.spi.dsl.BrooklynDslInterpreter;\n import io.brooklyn.camp.brooklyn.spi.platform.BrooklynImmutableCampPlatform;\n-import io.brooklyn.camp.brooklyn.spi.platform.HasBrooklynManagementContext;\n import io.brooklyn.camp.spi.PlatformRootSummary;\n+import brooklyn.camp.brooklyn.api.HasBrooklynManagementContext;\n import brooklyn.config.BrooklynProperties;\n import brooklyn.management.ManagementContext;\n import brooklyn.management.ManagementContext.PropertiesReloadListener;",
                "deletions": 1
            },
            {
                "sha": "fbdd5ec2d27ab11c6f63e7be22d4f7ac4379604a",
                "filename": "usage/camp/src/main/java/io/brooklyn/camp/brooklyn/spi/creation/BrooklynAssemblyTemplateInstantiator.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/usage/camp/src/main/java/io/brooklyn/camp/brooklyn/spi/creation/BrooklynAssemblyTemplateInstantiator.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/usage/camp/src/main/java/io/brooklyn/camp/brooklyn/spi/creation/BrooklynAssemblyTemplateInstantiator.java",
                "status": "modified",
                "changes": 35,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/camp/src/main/java/io/brooklyn/camp/brooklyn/spi/creation/BrooklynAssemblyTemplateInstantiator.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -1,12 +1,10 @@\n package io.brooklyn.camp.brooklyn.spi.creation;\n \n import io.brooklyn.camp.CampPlatform;\n-import io.brooklyn.camp.brooklyn.spi.platform.HasBrooklynManagementContext;\n import io.brooklyn.camp.spi.Assembly;\n import io.brooklyn.camp.spi.AssemblyTemplate;\n import io.brooklyn.camp.spi.PlatformComponentTemplate;\n import io.brooklyn.camp.spi.collection.ResolvableLink;\n-import io.brooklyn.camp.spi.instantiate.AssemblyTemplateInstantiator;\n \n import java.lang.reflect.Constructor;\n import java.util.LinkedHashMap;\n@@ -17,6 +15,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import brooklyn.camp.brooklyn.api.AssemblyTemplateSpecInstantiator;\n+import brooklyn.camp.brooklyn.api.HasBrooklynManagementContext;\n import brooklyn.catalog.BrooklynCatalog;\n import brooklyn.catalog.CatalogItem;\n import brooklyn.config.ConfigKey;\n@@ -44,7 +44,7 @@\n \n import com.google.common.collect.Maps;\n \n-public class BrooklynAssemblyTemplateInstantiator implements AssemblyTemplateInstantiator {\n+public class BrooklynAssemblyTemplateInstantiator implements AssemblyTemplateSpecInstantiator {\n \n     private static final Logger log = LoggerFactory.getLogger(BrooklynAssemblyTemplateInstantiator.class);\n     \n@@ -76,6 +76,11 @@ public Application create(AssemblyTemplate template, CampPlatform platform) {\n         }\n     }\n \n+    public EntitySpec<?> createSpec(AssemblyTemplate template, CampPlatform platform) {\n+        // TODO rewrite this class so everything below returns a spec, then rewrite above just to instantiate (and start?) the spec\n+        throw new UnsupportedOperationException();\n+    }\n+    \n     protected Application createApplicationFromCatalog(CampPlatform platform, CatalogItem<?,?> item, AssemblyTemplate template) {\n         ManagementContext mgmt = getBrooklynManagementContext(platform);\n \n@@ -112,9 +117,7 @@ protected Application createApplicationFromCatalog(CampPlatform platform, Catalo\n                 appBuilder.configure( convertFlagsToKeys(appBuilder.getType(), configO) );\n                 instance = appBuilder.manage(mgmt);\n                 \n-                List<Location> locations = new BrooklynYamlLocationResolver(mgmt).resolveLocations(template.getCustomAttributes(), false);\n-                if (locations!=null)\n-                    ((EntityInternal)instance).addLocations(locations);\n+                applyLocations(mgmt, template, instance);\n                 \n             } else if (Application.class.isAssignableFrom(clazz)) {\n                 // TODO use resolver's configureEntitySpec instead\n@@ -126,9 +129,7 @@ protected Application createApplicationFromCatalog(CampPlatform platform, Catalo\n                 log.info(\"CAMP placing '{}' under management\", instance);\n                 Entities.startManagement(instance, mgmt);\n                 \n-                List<Location> locations = new BrooklynYamlLocationResolver(mgmt).resolveLocations(template.getCustomAttributes(), false);\n-                if (locations!=null)\n-                    ((EntityInternal)instance).addLocations(locations);\n+                applyLocations(mgmt, template, instance);\n                 \n             } else {\n                 throw new IllegalArgumentException(\"Class \"+clazz+\" must extend one of ApplicationBuilder or Application\");\n@@ -142,6 +143,12 @@ protected Application createApplicationFromCatalog(CampPlatform platform, Catalo\n         }\n     }\n \n+    private void applyLocations(ManagementContext mgmt, AssemblyTemplate template, final Application instance) {\n+        List<Location> locations = new BrooklynYamlLocationResolver(mgmt).resolveLocations(template.getCustomAttributes(), false);\n+        if (locations!=null)\n+            ((EntityInternal)instance).addLocations(locations);\n+    }\n+\n     private ManagementContext getBrooklynManagementContext(CampPlatform platform) {\n         return ((HasBrooklynManagementContext)platform).getBrooklynManagementContext();\n     }\n@@ -216,6 +223,13 @@ protected Application createApplicationFromNonCatalogCampTemplate(AssemblyTempla\n \n         Map<Entity, EntitySpec<?>> rootEntities = Maps.newLinkedHashMap();\n         Map<Entity, EntitySpec<?>> allEntities = Maps.newLinkedHashMap();\n+        /* FIXME there is a subtlety here, and tests failing;\n+         * OT1H we might not want/need the wrapper application if we are creating a single one,   \n+         * but OTOH we might need a guarantee of an app at root, if we are creating certain nested entities\n+         * \n+         * i (alex) think the solution is to use the new createSpec(...) and interrogate it\n+         * to see if we need the wrapper or not\n+         */\n         buildEntities(template, rootEntities, allEntities, mgmt);\n         \n         EntitySpec<StartableApplication> appSpec;\n@@ -230,11 +244,12 @@ protected Application createApplicationFromNonCatalogCampTemplate(AssemblyTempla\n             Entry<Entity, EntitySpec<?>> entry = rootEntities.entrySet().iterator().next();\n             app = (StartableApplication)entry.getKey();\n             appSpec = (EntitySpec<StartableApplication>)entry.getValue();\n+            applyLocations(mgmt, template, app);\n         }\n         \n         initEntities(mgmt, allEntities);\n         \n-        log.info(\"CAMP placing '{}' under management\", appSpec);\n+        log.info(\"CAMP placing '{}' under`` management\", appSpec);\n         Entities.startManagement(app, mgmt);\n \n         return app;",
                "deletions": 10
            },
            {
                "sha": "8ddcddaf7931738c35b19104d6195aa9e91f6c63",
                "filename": "usage/camp/src/main/java/io/brooklyn/camp/brooklyn/spi/platform/BrooklynImmutableCampPlatform.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/usage/camp/src/main/java/io/brooklyn/camp/brooklyn/spi/platform/BrooklynImmutableCampPlatform.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/usage/camp/src/main/java/io/brooklyn/camp/brooklyn/spi/platform/BrooklynImmutableCampPlatform.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/camp/src/main/java/io/brooklyn/camp/brooklyn/spi/platform/BrooklynImmutableCampPlatform.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -16,6 +16,7 @@\n import io.brooklyn.camp.spi.collection.BasicResourceLookup;\n import io.brooklyn.camp.spi.collection.ResourceLookup;\n import io.brooklyn.camp.spi.collection.ResourceLookup.EmptyResourceLookup;\n+import brooklyn.camp.brooklyn.api.HasBrooklynManagementContext;\n import brooklyn.management.ManagementContext;\n \n /** Immutable CAMP platform which reflects things in the underlying Brooklyn system */",
                "deletions": 0
            },
            {
                "sha": "c4703e8e87e90f96b80065cadaa9ee7cb306fe5f",
                "filename": "usage/camp/src/test/java/io/brooklyn/camp/brooklyn/EmptySoftwareProcessYamlTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/usage/camp/src/test/java/io/brooklyn/camp/brooklyn/EmptySoftwareProcessYamlTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/usage/camp/src/test/java/io/brooklyn/camp/brooklyn/EmptySoftwareProcessYamlTest.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/camp/src/test/java/io/brooklyn/camp/brooklyn/EmptySoftwareProcessYamlTest.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -55,14 +55,14 @@ public void testProvisioningPropertiesViaJsonya() throws Exception {\n \n     @Test\n     // for issue #1377\n-    // currently provisions in the loopback-on-app location, rather surprisingly;\n-    // but not sure that's the desired behaviour\n     public void testWithAppAndEntityLocations() throws Exception {\n         Entity app = createAndStartApplication(Streams.newReaderWithContents(\"services:\\n\"+\n             \"- serviceType: \"+EmptySoftwareProcess.class.getName()+\"\\n\"+\n             \"  location: localhost:(name=localhost on entity)\"+\"\\n\"+\n             \"location: byon:(hosts=\\\"127.0.0.1\\\", name=loopback on app)\"));\n         waitForApplicationTasks(app);\n+        Entities.dumpInfo(app);\n+        \n         Assert.assertEquals(app.getLocations().size(), 1);\n         Assert.assertEquals(app.getChildren().size(), 1);\n         Entity entity = app.getChildren().iterator().next();\n@@ -75,6 +75,7 @@ public void testWithAppAndEntityLocations() throws Exception {\n         Assert.assertEquals(entityLocationIterator.next().getDisplayName(), \"localhost on entity\");\n         Location actualMachine = entityLocationIterator.next();\n         Assert.assertTrue(actualMachine instanceof SshMachineLocation, \"wrong location: \"+actualMachine);\n+        // TODO this, below, probably should be 'localhost on entity', see #1377\n         Assert.assertEquals(actualMachine.getParent().getDisplayName(), \"loopback on app\");\n     }\n ",
                "deletions": 2
            },
            {
                "sha": "0a0e67bb038351ee3d0a63ae1427eb3616e7bc31",
                "filename": "usage/cli/src/main/java/brooklyn/cli/Main.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/usage/cli/src/main/java/brooklyn/cli/Main.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/usage/cli/src/main/java/brooklyn/cli/Main.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/cli/src/main/java/brooklyn/cli/Main.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -402,7 +402,13 @@ public Void call() throws Exception {\n             BrooklynServerDetails server = launcher.getServerDetails();\n             ManagementContext ctx = server.getManagementContext();\n             \n-            populateCatalog(launcher.getServerDetails().getManagementContext().getCatalog());\n+            try {\n+                populateCatalog(launcher.getServerDetails().getManagementContext().getCatalog());\n+            } catch (Exception e) {\n+                Exceptions.propagateIfFatal(e);\n+                // don't fail to start just because catalog is not available\n+                log.error(\"Error populating catalog: \"+e, e);\n+            }\n \n             if (verbose) {\n                 Entities.dumpInfo(launcher.getApplications());",
                "deletions": 1
            },
            {
                "sha": "9e8c01a2a791f8c7c578058d85f5ed14d0bfe162",
                "filename": "usage/launcher/src/main/java/brooklyn/launcher/BrooklynLauncher.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/usage/launcher/src/main/java/brooklyn/launcher/BrooklynLauncher.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/usage/launcher/src/main/java/brooklyn/launcher/BrooklynLauncher.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/launcher/src/main/java/brooklyn/launcher/BrooklynLauncher.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -32,6 +32,7 @@\n import brooklyn.entity.basic.ApplicationBuilder;\n import brooklyn.entity.basic.BrooklynShutdownHooks;\n import brooklyn.entity.basic.Entities;\n+import brooklyn.entity.basic.EntityInternal;\n import brooklyn.entity.basic.StartableApplication;\n import brooklyn.entity.proxying.EntitySpec;\n import brooklyn.entity.rebind.RebindManager;\n@@ -628,9 +629,8 @@ protected void createApps() {\n     }\n \n     protected Application getAppFromYaml(String input) {\n-        AssemblyTemplate at = campPlatform.pdp()\n-                .registerDeploymentPlan(new StringReader(input));\n-         BrooklynAssemblyTemplateInstantiator instantiator;\n+        AssemblyTemplate at = campPlatform.pdp().registerDeploymentPlan(new StringReader(input));\n+        BrooklynAssemblyTemplateInstantiator instantiator;\n         try {\n             AssemblyTemplateInstantiator ati = at.getInstantiator().newInstance();\n             if (ati instanceof BrooklynAssemblyTemplateInstantiator) {\n@@ -641,7 +641,9 @@ protected Application getAppFromYaml(String input) {\n         } catch (Exception e) {\n             throw Exceptions.propagate(e);\n         }\n-        return instantiator.create(at, campPlatform);\n+        Application app = instantiator.create(at, campPlatform);\n+//        ((EntityInternal)app).addLocations(XXX);\n+        return app;\n     }\n     \n     protected void startApps() {",
                "deletions": 4
            },
            {
                "sha": "6dc15ade8ec81f0b3e3605f53e45a14a90732074",
                "filename": "usage/rest-server/src/main/java/brooklyn/rest/resources/AbstractBrooklynRestResource.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/468d788542d19810062d3e0b8a41019aa699f740/usage/rest-server/src/main/java/brooklyn/rest/resources/AbstractBrooklynRestResource.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/468d788542d19810062d3e0b8a41019aa699f740/usage/rest-server/src/main/java/brooklyn/rest/resources/AbstractBrooklynRestResource.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/rest-server/src/main/java/brooklyn/rest/resources/AbstractBrooklynRestResource.java?ref=468d788542d19810062d3e0b8a41019aa699f740",
                "patch": "@@ -8,6 +8,7 @@\n \n import org.codehaus.jackson.map.ObjectMapper;\n \n+import brooklyn.config.BrooklynServerConfig;\n import brooklyn.config.BrooklynServiceAttributes;\n import brooklyn.management.ManagementContext;\n import brooklyn.rest.util.BrooklynRestResourceUtils;\n@@ -63,9 +64,7 @@ protected Object getValueForDisplay(Object value, boolean preferJson, boolean is\n     }\n \n     protected CampPlatform camp() {\n-        CampPlatform camp = mgmt().getConfig().getConfig(BrooklynCampConstants.CAMP_PLATFORM);\n-        if (camp!=null) return camp;\n-        throw new IllegalStateException(\"CAMP platform server not enabled\");\n+        return BrooklynServerConfig.getCampPlatform(mgmt()).get();\n     }\n     \n }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Disable `-use` in javadoc generation\n\n- fix for NPE when trying to deploy 0.6.0-M1 to sonatype",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/7de3d3ed8a98add63329f8f659ff2beb7c59525e",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/bd2a4652fcae201967d726f76dc33158457c5c0e",
        "bug_id": "incubator-brooklyn_85",
        "file": [
            {
                "sha": "5915e04e2832da5a65bccbd492964f6bf6c6f379",
                "filename": "pom.xml",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/7de3d3ed8a98add63329f8f659ff2beb7c59525e/pom.xml",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/7de3d3ed8a98add63329f8f659ff2beb7c59525e/pom.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/pom.xml?ref=7de3d3ed8a98add63329f8f659ff2beb7c59525e",
                "patch": "@@ -305,6 +305,11 @@\n                     <version>2.8</version>\n                     <inherited>true</inherited>\n                     <configuration>\n+                        <!-- disabling use because of NPE deploying to sonatype:\n+                             http://stackoverflow.com/questions/888199/why-does-maven-install-fail-during-javadoc-generation\n+                             http://bugs.sun.com/bugdatabase/view_bug.do;jsessionid=ac084ab7f47c4e7f1df2117cecd?bug_id=5101868\n+                        -->\n+                        <use>false</use>\n                         <links>\n                             <link>http://download.oracle.com/javaee/6/api</link>\n                         </links>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Merge pull request #389 from ahgittin/master\n\nfix NPE bug where we assume jclouds images are named",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/89905289b7afcfef6fb48861f0f3c3cd4af0ea76",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/bc803baea14d4d4b01c6ae11615e854b9608b36a",
        "bug_id": "incubator-brooklyn_86",
        "file": [
            {
                "sha": "bf29697cd2651e0c9960a8332ab1173fe247cb72",
                "filename": "core/src/main/java/brooklyn/location/basic/jclouds/JcloudsLocation.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/89905289b7afcfef6fb48861f0f3c3cd4af0ea76/core/src/main/java/brooklyn/location/basic/jclouds/JcloudsLocation.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/89905289b7afcfef6fb48861f0f3c3cd4af0ea76/core/src/main/java/brooklyn/location/basic/jclouds/JcloudsLocation.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/jclouds/JcloudsLocation.java?ref=89905289b7afcfef6fb48861f0f3c3cd4af0ea76",
                "patch": "@@ -972,7 +972,11 @@ private Template buildTemplate(ComputeService computeService, BrooklynJcloudsSet\n         Template template;\n         try {\n             template = templateBuilder.build();\n-            if (template.getImage().getName().contains(\".rc-\")) {\n+            if (template==null) throw new NullPointerException(\"No template found (templateBuilder.build returned null)\");\n+            LOG.debug(\"\"+this+\" got template \"+template+\" (image \"+template.getImage()+\")\");\n+            if (template.getImage()==null) throw new NullPointerException(\"Template does not contain an image (templateBuilder.build returned invalid template)\");\n+            String name = template.getImage().getName();\n+            if (name != null && name.contains(\".rc-\")) {\n                 // release candidates might break things :(\n                 if (templateBuilder instanceof PortableTemplateBuilder) {\n                     if (((PortableTemplateBuilder)templateBuilder).getOsFamily()==null) {",
                "deletions": 1
            },
            {
                "sha": "5b54f9f4cbea162d3e7c55681fc25663eb467cb1",
                "filename": "core/src/test/java/brooklyn/location/basic/jclouds/AwsJcloudsMinRamTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/89905289b7afcfef6fb48861f0f3c3cd4af0ea76/core/src/test/java/brooklyn/location/basic/jclouds/AwsJcloudsMinRamTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/89905289b7afcfef6fb48861f0f3c3cd4af0ea76/core/src/test/java/brooklyn/location/basic/jclouds/AwsJcloudsMinRamTest.java",
                "status": "added",
                "changes": 42,
                "additions": 42,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/location/basic/jclouds/AwsJcloudsMinRamTest.java?ref=89905289b7afcfef6fb48861f0f3c3cd4af0ea76",
                "patch": "@@ -0,0 +1,42 @@\n+package brooklyn.location.basic.jclouds;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.Test;\n+\n+import brooklyn.location.MachineProvisioningLocation;\n+import brooklyn.location.basic.JcloudsResolver;\n+import brooklyn.location.basic.LocationRegistry;\n+import brooklyn.location.basic.SshMachineLocation;\n+import brooklyn.location.basic.jclouds.JcloudsLocation.JcloudsSshMachineLocation;\n+import brooklyn.util.MutableMap;\n+\n+public class AwsJcloudsMinRamTest {\n+\n+    private static final Logger log = LoggerFactory.getLogger(AwsJcloudsMinRamTest.class);\n+    \n+    @Test(groups=\"Live\")\n+    public void testJcloudsCreateWithMinRam() throws Exception {\n+        JcloudsLocation l = JcloudsResolver.resolve(\"aws-ec2:us-east-1\");\n+        l.configure(MutableMap.of(\"minRam\", \"4096\"));\n+        \n+        JcloudsSshMachineLocation m1 = l.obtain();\n+\n+        log.info(\"GOT \"+m1);\n+        \n+        l.release(m1);\n+    }\n+\n+    @Test(groups=\"Live\")\n+    public void testJcloudsCreateNamedJungleBig() throws Exception {\n+        @SuppressWarnings(\"unchecked\")\n+        MachineProvisioningLocation<SshMachineLocation> l = (MachineProvisioningLocation<SshMachineLocation>) new LocationRegistry().resolve(\"named:jungle-big\");\n+        \n+        SshMachineLocation m1 = l.obtain(MutableMap.<String,String>of());\n+\n+        log.info(\"GOT \"+m1);\n+        \n+        l.release(m1);\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "8d5802894fe7ba60e27ec3a47a0895e671c35cb8",
                "filename": "core/src/test/java/brooklyn/location/basic/jclouds/SimpleJcloudsLocationUserLoginAndConfigTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/89905289b7afcfef6fb48861f0f3c3cd4af0ea76/core/src/test/java/brooklyn/location/basic/jclouds/SimpleJcloudsLocationUserLoginAndConfigTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/89905289b7afcfef6fb48861f0f3c3cd4af0ea76/core/src/test/java/brooklyn/location/basic/jclouds/SimpleJcloudsLocationUserLoginAndConfigTest.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/location/basic/jclouds/SimpleJcloudsLocationUserLoginAndConfigTest.java?ref=89905289b7afcfef6fb48861f0f3c3cd4af0ea76",
                "patch": "@@ -6,7 +6,6 @@\n import java.util.List;\n import java.util.Map;\n \n-import brooklyn.location.basic.LocationRegistry;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.testng.Assert;",
                "deletions": 1
            },
            {
                "sha": "b7f63d7d2cf7d94d9f3009fbaa98445ba8fbc325",
                "filename": "core/src/test/java/brooklyn/location/basic/jclouds/StandaloneJcloudsTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/89905289b7afcfef6fb48861f0f3c3cd4af0ea76/core/src/test/java/brooklyn/location/basic/jclouds/StandaloneJcloudsTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/89905289b7afcfef6fb48861f0f3c3cd4af0ea76/core/src/test/java/brooklyn/location/basic/jclouds/StandaloneJcloudsTest.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/location/basic/jclouds/StandaloneJcloudsTest.java?ref=89905289b7afcfef6fb48861f0f3c3cd4af0ea76",
                "patch": "@@ -1,5 +1,7 @@\n package brooklyn.location.basic.jclouds;\n \n+import static org.testng.Assert.assertNotNull;\n+\n import java.io.File;\n import java.nio.charset.Charset;\n import java.util.Arrays;\n@@ -27,8 +29,6 @@\n import org.jclouds.sshj.config.SshjSshClientModule;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.testng.Assert;\n-import org.testng.AssertJUnit;\n import org.testng.annotations.Test;\n \n import brooklyn.config.BrooklynProperties;\n@@ -38,8 +38,6 @@\n import com.google.common.collect.Iterables;\n import com.google.common.io.Files;\n \n-import static org.testng.Assert.assertNotNull;\n-\n public class StandaloneJcloudsTest {\n \n     public static final Logger LOG = LoggerFactory.getLogger(StandaloneJcloudsTest.class);",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Avoid NPE in BasicEntityMemento creation\n\n- Either an attribute sensor key passed in was null,\n  or (less likely) getStaticSensorKeys() return null.",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/504cf9035a354708ac3e4f77b2d3baf5b40d9dff",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/966fee5ecc6344bf96880517a8b951dc0f46a2b4",
        "bug_id": "incubator-brooklyn_87",
        "file": [
            {
                "sha": "a0c4b8892fce5ed915118a09f9422d620e82ff54",
                "filename": "core/src/main/java/brooklyn/entity/basic/AbstractEntity.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/504cf9035a354708ac3e4f77b2d3baf5b40d9dff/core/src/main/java/brooklyn/entity/basic/AbstractEntity.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/504cf9035a354708ac3e4f77b2d3baf5b40d9dff/core/src/main/java/brooklyn/entity/basic/AbstractEntity.groovy",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/basic/AbstractEntity.groovy?ref=504cf9035a354708ac3e4f77b2d3baf5b40d9dff",
                "patch": "@@ -542,7 +542,11 @@ public abstract class AbstractEntity extends GroovyObjectSupport implements Enti\n         Map<String, Object> attribs = attributesInternal.asMap();\n         for (Map.Entry<?,Object> entry : attribs.entrySet()) {\n             AttributeSensor attribKey = (AttributeSensor) entityType.getSensor(entry.getKey());\n-            result.put(attribKey, entry.getValue());\n+            if (attribKey == null) {\n+                LOG.warn(\"When retrieving all attributes of {}, ignoring attribute {} because no matching AttributeSensor found\", this, entry.getKey());\n+            } else {\n+                result.put(attribKey, entry.getValue());\n+            }\n         }\n         return result;\n     }",
                "deletions": 1
            },
            {
                "sha": "c9422e2c683a035d068c5df8788fe508015c9a6d",
                "filename": "core/src/main/java/brooklyn/entity/basic/EntityConfigMap.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/504cf9035a354708ac3e4f77b2d3baf5b40d9dff/core/src/main/java/brooklyn/entity/basic/EntityConfigMap.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/504cf9035a354708ac3e4f77b2d3baf5b40d9dff/core/src/main/java/brooklyn/entity/basic/EntityConfigMap.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/basic/EntityConfigMap.java?ref=504cf9035a354708ac3e4f77b2d3baf5b40d9dff",
                "patch": "@@ -109,7 +109,7 @@ public Object getRawConfig(ConfigKey<?> key) {\n     public Map<ConfigKey<?>,Object> getLocalConfig() {\n         Map<ConfigKey<?>,Object> result = new LinkedHashMap<ConfigKey<?>,Object>(ownConfig.size());\n         result.putAll(ownConfig);\n-        return Collections.unmodifiableMap(result);        \n+        return Collections.unmodifiableMap(result);\n     }\n     \n     public Object setConfig(ConfigKey<?> key, Object v) {",
                "deletions": 1
            },
            {
                "sha": "074d039da58a502f73eabca501194b8bae3e3194",
                "filename": "core/src/main/java/brooklyn/entity/rebind/dto/MementosGenerators.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/504cf9035a354708ac3e4f77b2d3baf5b40d9dff/core/src/main/java/brooklyn/entity/rebind/dto/MementosGenerators.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/504cf9035a354708ac3e4f77b2d3baf5b40d9dff/core/src/main/java/brooklyn/entity/rebind/dto/MementosGenerators.java",
                "status": "modified",
                "changes": 12,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/rebind/dto/MementosGenerators.java?ref=504cf9035a354708ac3e4f77b2d3baf5b40d9dff",
                "patch": "@@ -1,5 +1,7 @@\n package brooklyn.entity.rebind.dto;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n import java.lang.reflect.Modifier;\n import java.util.Map;\n \n@@ -70,8 +72,9 @@ public static EntityMemento newEntityMemento(Entity entity) {\n         builder.type = entity.getClass().getName();\n         builder.isTopLevelApp = (entity instanceof Application && entity.getOwner() == null);\n         \n-        for (Map.Entry<ConfigKey<?>, Object> entry : ((AbstractEntity)entity).getConfigMap().getLocalConfig().entrySet()) {\n-            ConfigKey<?> key = entry.getKey();\n+        Map<ConfigKey<?>, Object> localConfig = ((AbstractEntity)entity).getConfigMap().getLocalConfig();\n+        for (Map.Entry<ConfigKey<?>, Object> entry : localConfig.entrySet()) {\n+            ConfigKey<?> key = checkNotNull(entry.getKey(), localConfig);\n             Object value = entry.getValue();\n             Object transformedValue = MementoTransformer.transformEntitiesToIds(value);\n             if (transformedValue != value) {\n@@ -85,8 +88,9 @@ public static EntityMemento newEntityMemento(Entity entity) {\n             builder.config.put(key, transformedValue); \n         }\n         \n-        for (Map.Entry<AttributeSensor, Object> entry : ((AbstractEntity)entity).getAllAttributes().entrySet()) {\n-            AttributeSensor<?> key = entry.getKey();\n+        Map<AttributeSensor, Object> allAttributes = ((AbstractEntity)entity).getAllAttributes();\n+        for (Map.Entry<AttributeSensor, Object> entry : allAttributes.entrySet()) {\n+            AttributeSensor<?> key = checkNotNull(entry.getKey(), allAttributes);\n             Object value = entry.getValue();\n             Object transformedValue = MementoTransformer.transformEntitiesToIds(value);\n             if (transformedValue != value) {",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Deletes keys defined in ConfigKeys\n\n- Update all uses to the new BrooklynConfigKeys\n- Was previously deprecated, with fields in ConfigKeys referencing\n  those in BrooklynConfigKeys. But this led to strange NPEs where\n  ConfigKeys fields were null (presumably due to ordering of\n  initialising the two classes' fields)!\n- Breaks backwards compatibility, but better to have a compilation error\n  than a weird NPE.",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/c62b647575b49c08b4dcc6dc6ce646794f4afea5",
        "bug_id": "incubator-brooklyn_88",
        "file": [
            {
                "sha": "6af95be92773598e35274f57ae13a63d05a65c51",
                "filename": "core/src/main/java/brooklyn/entity/basic/Attributes.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/main/java/brooklyn/entity/basic/Attributes.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/main/java/brooklyn/entity/basic/Attributes.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/basic/Attributes.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "patch": "@@ -28,7 +28,7 @@\n     /**\n      * Application information sensors.\n      * \n-     * @deprecated since 0.5; see {@link ConfigKeys#SUGGESTED_VERSION}\n+     * @deprecated since 0.5; see {@link BrooklynConfigKeys#SUGGESTED_VERSION}\n      */\n     @Deprecated\n     AttributeSensor<String> VERSION = Sensors.newStringSensor( \"version\", \"Version information\");",
                "deletions": 1
            },
            {
                "sha": "f4a27a7a4921369b651e823e92de197bffa63c64",
                "filename": "core/src/main/java/brooklyn/entity/basic/ConfigKeys.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/main/java/brooklyn/entity/basic/ConfigKeys.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/main/java/brooklyn/entity/basic/ConfigKeys.java",
                "status": "modified",
                "changes": 40,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/basic/ConfigKeys.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "patch": "@@ -136,44 +136,4 @@\n     public static ConfigKey<Boolean> newBooleanConfigKey(String name, String description, Boolean defaultValue) {\n         return newConfigKey(Boolean.class, name, description, defaultValue);\n     }\n-\n-    /* Key definitions were deprecated here in 0.6.0 because they introduce nasty circular dependencies on the\n-     * methods in this class, causing some final fields to be null when they are accessed. \n-     */\n-\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> BROOKLYN_DATA_DIR = BrooklynConfigKeys.BROOKLYN_DATA_DIR;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SUGGESTED_VERSION = BrooklynConfigKeys.SUGGESTED_VERSION;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SUGGESTED_INSTALL_DIR = BrooklynConfigKeys.SUGGESTED_INSTALL_DIR;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SUGGESTED_RUN_DIR = BrooklynConfigKeys.SUGGESTED_RUN_DIR;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Boolean> START_LATCH = BrooklynConfigKeys.START_LATCH;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Boolean> INSTALL_LATCH = BrooklynConfigKeys.INSTALL_LATCH;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Boolean> CUSTOMIZE_LATCH = BrooklynConfigKeys.CUSTOMIZE_LATCH;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Boolean> LAUNCH_LATCH = BrooklynConfigKeys.LAUNCH_LATCH;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Integer> START_TIMEOUT = BrooklynConfigKeys.START_TIMEOUT;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_TOOL_CLASS = BrooklynConfigKeys.SSH_TOOL_CLASS;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_HOST = BrooklynConfigKeys.SSH_CONFIG_HOST;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Integer> SSH_CONFIG_PORT = BrooklynConfigKeys.SSH_CONFIG_PORT;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_USER = BrooklynConfigKeys.SSH_CONFIG_USER;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_PASSWORD = BrooklynConfigKeys.SSH_CONFIG_PASSWORD;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_SCRIPT_DIR = BrooklynConfigKeys.SSH_CONFIG_SCRIPT_DIR;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_SCRIPT_HEADER = BrooklynConfigKeys.SSH_CONFIG_SCRIPT_HEADER;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_DIRECT_HEADER = BrooklynConfigKeys.SSH_CONFIG_DIRECT_HEADER;\n-\n }",
                "deletions": 40
            },
            {
                "sha": "40c20b919763cabf2551d035a31e69d6d8a09424",
                "filename": "core/src/main/java/brooklyn/entity/drivers/downloads/DownloadSubstituters.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/main/java/brooklyn/entity/drivers/downloads/DownloadSubstituters.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/main/java/brooklyn/entity/drivers/downloads/DownloadSubstituters.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/drivers/downloads/DownloadSubstituters.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "patch": "@@ -13,7 +13,7 @@\n \n import brooklyn.entity.Entity;\n import brooklyn.entity.basic.Attributes;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.entity.drivers.EntityDriver;\n import brooklyn.entity.drivers.downloads.DownloadResolverManager.DownloadRequirement;\n import brooklyn.entity.drivers.downloads.DownloadResolverManager.DownloadTargets;\n@@ -92,14 +92,14 @@ public static String substitute(DownloadRequirement req, String basevalue) {\n         Entity entity = driver.getEntity();\n         String type = entity.getEntityType().getName();\n         String simpleType = type.substring(type.lastIndexOf(\".\")+1);\n-        String version = entity.getConfig(ConfigKeys.SUGGESTED_VERSION);\n+        String version = entity.getConfig(BrooklynConfigKeys.SUGGESTED_VERSION);\n         \n         String v2 = entity.getAttribute(Attributes.VERSION);\n         if (v2!=null && !v2.equals(version)) {\n             // Attributes.VERSION was deprecated in 0.5.0 but was preferred here without warning in 0.6.0\n             // now warn on use of deprecated key when it is different\n             LOG.warn(\"Using deprecated key \"+Attributes.VERSION+\", value \"+v2+\", which differs from the \" +\n-            \t\t\"preferred key \"+ConfigKeys.SUGGESTED_VERSION+\", value \"+version+\"; old key will be retired shortly!\");\n+            \t\t\"preferred key \"+BrooklynConfigKeys.SUGGESTED_VERSION+\", value \"+version+\"; old key will be retired shortly!\");\n             version = v2;\n         }\n         ",
                "deletions": 3
            },
            {
                "sha": "1b8df65dae914ddd952b818d255127373af6e718",
                "filename": "core/src/main/java/brooklyn/location/basic/ByonLocationResolver.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/main/java/brooklyn/location/basic/ByonLocationResolver.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/main/java/brooklyn/location/basic/ByonLocationResolver.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/ByonLocationResolver.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "patch": "@@ -13,7 +13,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.location.LocationRegistry;\n import brooklyn.location.LocationResolver;\n import brooklyn.location.LocationSpec;\n@@ -135,7 +135,7 @@ public void init(ManagementContext managementContext) {\n         if (user != null) flags.put(\"user\", user);\n         if (name != null) flags.put(\"name\", name);\n         if (registry != null) {\n-            String brooklynDataDir = (String) registry.getProperties().get(ConfigKeys.BROOKLYN_DATA_DIR.getName());\n+            String brooklynDataDir = (String) registry.getProperties().get(BrooklynConfigKeys.BROOKLYN_DATA_DIR.getName());\n             if (brooklynDataDir != null && brooklynDataDir.length() > 0) {\n                 flags.put(\"localTempDir\", new File(brooklynDataDir));\n             }",
                "deletions": 2
            },
            {
                "sha": "ebd0d7636ae686baa7aec6400bba64af49bb322b",
                "filename": "core/src/main/java/brooklyn/location/basic/LocalhostResolver.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/main/java/brooklyn/location/basic/LocalhostResolver.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/main/java/brooklyn/location/basic/LocalhostResolver.java",
                "status": "modified",
                "changes": 7,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/LocalhostResolver.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "patch": "@@ -12,9 +12,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import brooklyn.config.ConfigKey;\n-import brooklyn.config.ConfigUtils;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.location.Location;\n import brooklyn.location.LocationRegistry;\n import brooklyn.location.LocationResolver;\n@@ -24,7 +22,6 @@\n import brooklyn.util.text.KeyValueParser;\n \n import com.google.common.collect.ImmutableSet;\n-import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n \n /**\n@@ -96,7 +93,7 @@ protected Location newLocationFromString(String spec, brooklyn.location.Location\n             flags.put(\"name\", namePart);\n         }\n         if (registry != null) {\n-            String brooklynDataDir = (String) registry.getProperties().get(ConfigKeys.BROOKLYN_DATA_DIR.getName());\n+            String brooklynDataDir = (String) registry.getProperties().get(BrooklynConfigKeys.BROOKLYN_DATA_DIR.getName());\n             if (brooklynDataDir != null && brooklynDataDir.length() > 0) {\n                 flags.put(\"localTempDir\", new File(brooklynDataDir));\n             }",
                "deletions": 5
            },
            {
                "sha": "e4d13d8fe85a0da239ea512ca9d6ca3f4b460bb2",
                "filename": "core/src/test/java/brooklyn/entity/drivers/downloads/BasicDownloadsRegistryTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/test/java/brooklyn/entity/drivers/downloads/BasicDownloadsRegistryTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/test/java/brooklyn/entity/drivers/downloads/BasicDownloadsRegistryTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/entity/drivers/downloads/BasicDownloadsRegistryTest.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "patch": "@@ -10,7 +10,7 @@\n import brooklyn.config.BrooklynProperties;\n import brooklyn.entity.basic.ApplicationBuilder;\n import brooklyn.entity.basic.Attributes;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.entity.basic.Entities;\n import brooklyn.entity.proxying.EntitySpec;\n import brooklyn.location.Location;\n@@ -89,7 +89,7 @@ public void testReturnsLocalRepoThenOverrideThenAttributeValThenCloudsoftUrlThen\n         brooklynProperties.put(\"brooklyn.downloads.all.url\", \"http://fromprops/${version}.allprimary\");\n         brooklynProperties.put(\"brooklyn.downloads.all.fallbackurl\", \"http://fromfallback/${version}.allfallback\");\n         entity.setAttribute(Attributes.DOWNLOAD_URL, \"http://fromattrib/${version}.default\");\n-        entity.setConfig(ConfigKeys.SUGGESTED_VERSION, \"myversion\");\n+        entity.setConfig(BrooklynConfigKeys.SUGGESTED_VERSION, \"myversion\");\n         String expectedFilename = \"myversion.allprimary\";\n \n         String expectedLocalRepo = String.format(\"file://$HOME/.brooklyn/repository/%s/%s/%s\", \"TestEntity\", \"myversion\", expectedFilename);",
                "deletions": 2
            },
            {
                "sha": "f169bee621189aa2186d80cd49946c45e34503ce",
                "filename": "core/src/test/java/brooklyn/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/test/java/brooklyn/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/test/java/brooklyn/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "patch": "@@ -10,7 +10,7 @@\n \n import brooklyn.config.BrooklynProperties;\n import brooklyn.entity.basic.ApplicationBuilder;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.entity.basic.Entities;\n import brooklyn.entity.drivers.downloads.DownloadResolverManager.DownloadRequirement;\n import brooklyn.entity.drivers.downloads.DownloadResolverManager.DownloadTargets;\n@@ -79,7 +79,7 @@ public void testReturnsGlobalFallbackUrl() throws Exception {\n     @Test\n     public void testSubstitutionsAppliedToFallbackUrl() throws Exception {\n         brooklynProperties.put(\"brooklyn.downloads.all.fallbackurl\", \"version=${version}\");\n-        entity.setConfig(ConfigKeys.SUGGESTED_VERSION, \"myversion\");\n+        entity.setConfig(BrooklynConfigKeys.SUGGESTED_VERSION, \"myversion\");\n         assertResolves(ImmutableList.<String>of(), ImmutableList.of(\"version=myversion\"));\n     }\n \n@@ -93,15 +93,15 @@ public void testReturnsGlobalFallbackUrlAsLast() throws Exception {\n     @Test\n     public void testReturnsGlobalUrlWithEntitySubstituions() throws Exception {\n         brooklynProperties.put(\"brooklyn.downloads.all.url\", \"version=${version}\");\n-        entity.setConfig(ConfigKeys.SUGGESTED_VERSION, \"myversion\");\n+        entity.setConfig(BrooklynConfigKeys.SUGGESTED_VERSION, \"myversion\");\n         assertResolves(\"version=myversion\");\n     }\n     \n     @Test\n     public void testEntitySpecificUrlOverridesGlobalUrl() throws Exception {\n         brooklynProperties.put(\"brooklyn.downloads.all.url\", \"version=${version}\");\n         brooklynProperties.put(\"brooklyn.downloads.entity.TestEntity.url\", \"overridden,version=${version}\");\n-        entity.setConfig(ConfigKeys.SUGGESTED_VERSION, \"myversion\");\n+        entity.setConfig(BrooklynConfigKeys.SUGGESTED_VERSION, \"myversion\");\n         assertResolves(\"overridden,version=myversion\", \"version=myversion\");\n     }\n     ",
                "deletions": 4
            },
            {
                "sha": "e9ac5b600cbd96274ed6a9a4f27a727e4874b6b4",
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsByonLocationResolver.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsByonLocationResolver.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsByonLocationResolver.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsByonLocationResolver.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "patch": "@@ -12,7 +12,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.location.LocationRegistry;\n import brooklyn.location.LocationResolver;\n import brooklyn.location.LocationSpec;\n@@ -147,7 +147,7 @@ public void init(ManagementContext managementContext) {\n         if (user != null) flags.put(\"user\", user);\n         if (name != null) flags.put(\"name\", name);\n         if (registry != null) {\n-            String brooklynDataDir = (String) registry.getProperties().get(ConfigKeys.BROOKLYN_DATA_DIR.getName());\n+            String brooklynDataDir = (String) registry.getProperties().get(BrooklynConfigKeys.BROOKLYN_DATA_DIR.getName());\n             if (brooklynDataDir != null && brooklynDataDir.length() > 0) {\n                 flags.put(\"localTempDir\", new File(brooklynDataDir));\n             }",
                "deletions": 2
            },
            {
                "sha": "a3cef2ce3ffe8ec88bb3be62b4c8c370cbaa21ab",
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsPropertiesFromBrooklynProperties.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsPropertiesFromBrooklynProperties.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsPropertiesFromBrooklynProperties.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsPropertiesFromBrooklynProperties.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "patch": "@@ -7,7 +7,7 @@\n import org.slf4j.LoggerFactory;\n \n import brooklyn.config.ConfigUtils;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.location.basic.DeprecatedKeysMappingBuilder;\n import brooklyn.location.basic.LocationPropertiesFromBrooklynProperties;\n \n@@ -74,7 +74,7 @@\n         jcloudsProperties.putAll(transformDeprecated(getProviderOrApiJcloudsProperties(providerOrApi, properties)));\n         jcloudsProperties.putAll(transformDeprecated(getRegionJcloudsProperties(providerOrApi, regionName, properties)));\n         if (!Strings.isNullOrEmpty(namedLocation)) jcloudsProperties.putAll(transformDeprecated(getNamedJcloudsProperties(namedLocation, properties)));\n-        String brooklynDataDir = (String) properties.get(ConfigKeys.BROOKLYN_DATA_DIR.getName());\n+        String brooklynDataDir = (String) properties.get(BrooklynConfigKeys.BROOKLYN_DATA_DIR.getName());\n         if (brooklynDataDir != null && brooklynDataDir.length() > 0) {\n             jcloudsProperties.put(\"localTempDir\", new File(brooklynDataDir));\n         }",
                "deletions": 2
            },
            {
                "sha": "1adc1ee0948935095c2056ec67f77797f7c71083",
                "filename": "software/base/src/main/java/brooklyn/entity/basic/AbstractSoftwareProcessDriver.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/software/base/src/main/java/brooklyn/entity/basic/AbstractSoftwareProcessDriver.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/software/base/src/main/java/brooklyn/entity/basic/AbstractSoftwareProcessDriver.java",
                "status": "modified",
                "changes": 12,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/basic/AbstractSoftwareProcessDriver.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "patch": "@@ -56,17 +56,17 @@ public void rebind() {\n \t@Override\n \tpublic void start() {\n \t    DynamicTasks.queue(\"install\", new Runnable() { public void run() {\n-            waitForConfigKey(ConfigKeys.INSTALL_LATCH);\n+            waitForConfigKey(BrooklynConfigKeys.INSTALL_LATCH);\n             install();\n         }});\n         \n \t    DynamicTasks.queue(\"customize\", new Runnable() { public void run() {\n-            waitForConfigKey(ConfigKeys.CUSTOMIZE_LATCH);\n+            waitForConfigKey(BrooklynConfigKeys.CUSTOMIZE_LATCH);\n             customize();\n         }});\n         \n \t    DynamicTasks.queue(\"launch\", new Runnable() { public void run() {\n-            waitForConfigKey(ConfigKeys.LAUNCH_LATCH);\n+            waitForConfigKey(BrooklynConfigKeys.LAUNCH_LATCH);\n             launch();\n         }});\n         \n@@ -113,9 +113,11 @@ public void restart() {\n         }});\n \t}\n \t\n-\tpublic EntityLocal getEntity() { return entity; } \n+\t@Override\n+    public EntityLocal getEntity() { return entity; } \n \n-\tpublic Location getLocation() { return location; } \n+\t@Override\n+    public Location getLocation() { return location; } \n     \n     public InputStream getResource(String url) {\n         return new ResourceUtils(entity).getResourceFromUrl(url);",
                "deletions": 5
            },
            {
                "sha": "b41bcad9694a57a5a38b1fe0917255d6bf0684bb",
                "filename": "software/base/src/main/java/brooklyn/entity/brooklynnode/BrooklynNode.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/software/base/src/main/java/brooklyn/entity/brooklynnode/BrooklynNode.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/software/base/src/main/java/brooklyn/entity/brooklynnode/BrooklynNode.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/brooklynnode/BrooklynNode.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "patch": "@@ -5,6 +5,7 @@\n import java.util.Map;\n \n import brooklyn.config.ConfigKey;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.entity.basic.ConfigKeys;\n import brooklyn.entity.basic.SoftwareProcess;\n import brooklyn.entity.java.UsesJava;\n@@ -31,7 +32,7 @@\n             Map.class, \"brooklynnode.copytorundir\", \"URLs of resources to be copied across to the server, giving the path they are to be copied to\", MutableMap.of());\n     \n     @SetFromFlag(\"version\")\n-    public static final ConfigKey<String> SUGGESTED_VERSION = ConfigKeys.newConfigKeyWithDefault(ConfigKeys.SUGGESTED_VERSION, \"0.6.0-SNAPSHOT\"); // BROOKLYN_VERSION\n+    public static final ConfigKey<String> SUGGESTED_VERSION = ConfigKeys.newConfigKeyWithDefault(BrooklynConfigKeys.SUGGESTED_VERSION, \"0.6.0-SNAPSHOT\"); // BROOKLYN_VERSION\n \n     // Takes presidence over downloadUrl, if non-null\n     @SetFromFlag(\"distroUploadUrl\")",
                "deletions": 1
            },
            {
                "sha": "84fdd44175812bd176981070400146c8c0830db6",
                "filename": "software/base/src/test/java/brooklyn/entity/basic/lifecycle/StartStopSshDriverTest.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/software/base/src/test/java/brooklyn/entity/basic/lifecycle/StartStopSshDriverTest.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/software/base/src/test/java/brooklyn/entity/basic/lifecycle/StartStopSshDriverTest.groovy",
                "status": "modified",
                "changes": 9,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/test/java/brooklyn/entity/basic/lifecycle/StartStopSshDriverTest.groovy?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "patch": "@@ -12,8 +12,7 @@ import org.testng.annotations.BeforeMethod\n import org.testng.annotations.Test\n \n import brooklyn.entity.basic.AbstractSoftwareProcessSshDriver\n-import brooklyn.entity.basic.ConfigKeys\n-import brooklyn.entity.basic.Entities;\n+import brooklyn.entity.basic.BrooklynConfigKeys\n import brooklyn.location.basic.SshMachineLocation\n import brooklyn.test.entity.TestApplication\n import brooklyn.test.entity.TestApplicationImpl\n@@ -22,7 +21,7 @@ import brooklyn.test.entity.TestEntityImpl\n import brooklyn.util.internal.ssh.SshTool\n import brooklyn.util.internal.ssh.cli.SshCliTool\n import brooklyn.util.internal.ssh.sshj.SshjTool\n-import brooklyn.util.stream.StreamGobbler;\n+import brooklyn.util.stream.StreamGobbler\n \n class StartStopSshDriverTest {\n \n@@ -69,7 +68,7 @@ class StartStopSshDriverTest {\n \n     @Test(groups = [ \"Integration\" ])\n     public void testSshScriptHeaderUsedWhenSpecified() {\n-        entity.setConfig(ConfigKeys.SSH_CONFIG_SCRIPT_HEADER, \"#!/bin/bash -e\\necho hello world\");\n+        entity.setConfig(BrooklynConfigKeys.SSH_CONFIG_SCRIPT_HEADER, \"#!/bin/bash -e\\necho hello world\");\n         ByteArrayOutputStream out = new ByteArrayOutputStream();\n         driver.execute(out: out, Arrays.asList(\"echo goodbye\"), \"test\");\n         String s = out.toString();\n@@ -81,7 +80,7 @@ class StartStopSshDriverTest {\n \n     @Test(groups = [ \"Integration\" ])\n     public void testSshCliPickedUpWhenSpecified() {\n-        entity.setConfig(ConfigKeys.SSH_TOOL_CLASS, SshCliTool.class.getName());\n+        entity.setConfig(BrooklynConfigKeys.SSH_TOOL_CLASS, SshCliTool.class.getName());\n         driver.execute(Arrays.asList(\"echo hi\"), \"test\");\n         assertTrue(sshMachineLocation.lastTool instanceof SshCliTool, \"expect CLI tool, got \"+\n                         (sshMachineLocation.lastTool!=null ? \"\"+sshMachineLocation.lastTool.getClass()+\":\" : \"\") + sshMachineLocation.lastTool);",
                "deletions": 5
            },
            {
                "sha": "1217468e22ea2ac72731d2b5cdd8fc8577f61e5a",
                "filename": "software/messaging/src/main/java/brooklyn/entity/messaging/kafka/KafkaCluster.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/software/messaging/src/main/java/brooklyn/entity/messaging/kafka/KafkaCluster.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/software/messaging/src/main/java/brooklyn/entity/messaging/kafka/KafkaCluster.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/messaging/src/main/java/brooklyn/entity/messaging/kafka/KafkaCluster.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "patch": "@@ -19,6 +19,7 @@\n import brooklyn.config.ConfigKey;\n import brooklyn.entity.Entity;\n import brooklyn.entity.Group;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.entity.basic.ConfigKeys;\n import brooklyn.entity.group.Cluster;\n import brooklyn.entity.group.DynamicCluster;\n@@ -30,7 +31,6 @@\n import brooklyn.event.AttributeSensor;\n import brooklyn.event.basic.BasicAttributeSensor;\n import brooklyn.event.basic.BasicAttributeSensorAndConfigKey;\n-import brooklyn.event.basic.BasicConfigKey;\n import brooklyn.util.flags.SetFromFlag;\n \n /**\n@@ -56,7 +56,7 @@\n public interface KafkaCluster extends Entity, Startable, Resizable, Group  {\n \n     @SetFromFlag(\"startTimeout\")\n-    ConfigKey<Integer> START_TIMEOUT = ConfigKeys.START_TIMEOUT;\n+    ConfigKey<Integer> START_TIMEOUT = BrooklynConfigKeys.START_TIMEOUT;\n \n     @SetFromFlag(\"initialSize\")\n     ConfigKey<Integer> INITIAL_SIZE = ConfigKeys.newConfigKeyWithDefault(Cluster.INITIAL_SIZE, 1);",
                "deletions": 2
            },
            {
                "sha": "12d43ef9ba9ae8b384bb3130d0319a0057c4f865",
                "filename": "usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "patch": "@@ -30,7 +30,7 @@\n import brooklyn.BrooklynVersion;\n import brooklyn.config.BrooklynServiceAttributes;\n import brooklyn.config.ConfigKey;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.launcher.config.CustomResourceLocator;\n import brooklyn.location.PortRange;\n import brooklyn.location.basic.LocalhostMachineProvisioningLocation;\n@@ -147,7 +147,7 @@ public BrooklynWebServer(Map flags, ManagementContext managementContext) {\n         if (!leftovers.isEmpty())\n             log.warn(\"Ignoring unknown flags \" + leftovers);\n         \n-        String brooklynDataDir = checkNotNull(managementContext.getConfig().getConfig(ConfigKeys.BROOKLYN_DATA_DIR));\n+        String brooklynDataDir = checkNotNull(managementContext.getConfig().getConfig(BrooklynConfigKeys.BROOKLYN_DATA_DIR));\n         this.webappTempDir = new File(brooklynDataDir, \"jetty\");\n     }\n ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Merge pull request #120 from pveentjer/fix-networkutils\n\nnetworkutils fix; npe on when a port is null",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/1994dcd9f56d5936770d0f045b3dfd64fbe211ad",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/0a96e5a7d466f013d663b503962fe5034b75ce12",
        "bug_id": "incubator-brooklyn_89",
        "file": [
            {
                "sha": "6190edffef567534bf63a509aa3030ae73b35a71",
                "filename": "core/src/main/java/brooklyn/util/NetworkUtils.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/1994dcd9f56d5936770d0f045b3dfd64fbe211ad/core/src/main/java/brooklyn/util/NetworkUtils.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/1994dcd9f56d5936770d0f045b3dfd64fbe211ad/core/src/main/java/brooklyn/util/NetworkUtils.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/util/NetworkUtils.java?ref=1994dcd9f56d5936770d0f045b3dfd64fbe211ad",
                "patch": "@@ -67,7 +67,9 @@ public static void checkPortsValid(Map ports) {\n         for (Object ppo : ports.entrySet()) {\n             Map.Entry<?,?> pp = (Map.Entry<?,?>)ppo;\n             Object val = pp.getValue();\n-            if (!(val instanceof Integer)) {\n+            if(val == null){\n+                throw new IllegalArgumentException(\"port for \"+pp.getKey()+\" is null\");\n+            }else if (!(val instanceof Integer)) {\n                 throw new IllegalArgumentException(\"port \"+val+\" for \"+pp.getKey()+\" is not an integer (\"+val.getClass()+\")\");\n             }\n             checkPortValid((Integer)val, \"\"+pp.getKey());",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Rebind: avoid NPEs and FileNotFound\n\n- Was getting NPE in RebindManagerImpl.waitForPendingComplete \n  if was not running (so changeListener had not been set)\n- Was not waiting for Persister's executor to shutdown, so \n  test tearDown deleting directory while thread trying to write\n  file.",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/be636631f1d0a740c4ddca9efb477c8099458275",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/7113150667322908b7166a627a8282017101f6fc",
        "bug_id": "incubator-brooklyn_90",
        "file": [
            {
                "sha": "60d8cbbed4f2b69a1dae2b6a4b00538f3977c808",
                "filename": "core/src/main/java/brooklyn/entity/rebind/RebindManagerImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/be636631f1d0a740c4ddca9efb477c8099458275/core/src/main/java/brooklyn/entity/rebind/RebindManagerImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/be636631f1d0a740c4ddca9efb477c8099458275/core/src/main/java/brooklyn/entity/rebind/RebindManagerImpl.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/rebind/RebindManagerImpl.java?ref=be636631f1d0a740c4ddca9efb477c8099458275",
                "patch": "@@ -88,6 +88,7 @@ public void stop() {\n     @Override\n     @VisibleForTesting\n     public void waitForPendingComplete() throws InterruptedException {\n+        if (persister == null || !running) return;\n         realChangeListener.waitForPendingComplete();\n         if (persister != null) persister.waitForWritesCompleted();\n     }",
                "deletions": 0
            },
            {
                "sha": "7a352f9f61cef2348218f72d3a9228e4f7c65199",
                "filename": "core/src/main/java/brooklyn/entity/rebind/persister/BrooklynMementoPersisterToMultiFile.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/be636631f1d0a740c4ddca9efb477c8099458275/core/src/main/java/brooklyn/entity/rebind/persister/BrooklynMementoPersisterToMultiFile.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/be636631f1d0a740c4ddca9efb477c8099458275/core/src/main/java/brooklyn/entity/rebind/persister/BrooklynMementoPersisterToMultiFile.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/rebind/persister/BrooklynMementoPersisterToMultiFile.java?ref=be636631f1d0a740c4ddca9efb477c8099458275",
                "patch": "@@ -9,6 +9,7 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -19,6 +20,7 @@\n import brooklyn.mementos.EntityMemento;\n import brooklyn.mementos.LocationMemento;\n import brooklyn.mementos.PolicyMemento;\n+import brooklyn.util.exceptions.Exceptions;\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Charsets;\n@@ -31,6 +33,8 @@\n \n     protected static final Logger LOG = LoggerFactory.getLogger(BrooklynMementoPersisterToMultiFile.class);\n \n+    private static final int SHUTDOWN_TIMEOUT_MS = 10*1000;\n+    \n     private final File dir;\n     private final File entitiesDir;\n     private final File locationsDir;\n@@ -77,6 +81,11 @@ public BrooklynMementoPersisterToMultiFile(File dir, ClassLoader classLoader) {\n     public void stop() {\n         running = false;\n         executor.shutdown();\n+        try {\n+            executor.awaitTermination(SHUTDOWN_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+        } catch (InterruptedException e) {\n+            throw Exceptions.propagate(e);\n+        }\n     }\n     \n     @Override",
                "deletions": 0
            },
            {
                "sha": "845b3abeac576c6a31ab5e0b454624fe57d1b75f",
                "filename": "core/src/main/java/brooklyn/entity/rebind/persister/MementoFileWriter.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/be636631f1d0a740c4ddca9efb477c8099458275/core/src/main/java/brooklyn/entity/rebind/persister/MementoFileWriter.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/be636631f1d0a740c4ddca9efb477c8099458275/core/src/main/java/brooklyn/entity/rebind/persister/MementoFileWriter.java",
                "status": "modified",
                "changes": 12,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/rebind/persister/MementoFileWriter.java?ref=be636631f1d0a740c4ddca9efb477c8099458275",
                "patch": "@@ -108,7 +108,11 @@ private void deleteAsync() {\n                     deleteNow();\n                     return null;\n                 } catch (Throwable t) {\n-                    LOG.error(\"Error deleting \"+file, t);\n+                    if (executor.isShutdown()) {\n+                        LOG.debug(\"Error deleting \"+file+\" (but executor shutdown)\", t);\n+                    } else {\n+                        LOG.error(\"Error deleting \"+file, t);\n+                    }\n                     throw Throwables.propagate(t);\n                 }\n             }});\n@@ -122,7 +126,11 @@ private void writeAsync() {\n                     writeNow();\n                     return null;\n                 } catch (Throwable t) {\n-                    LOG.error(\"Error writing to \"+file, t);\n+                    if (executor.isShutdown()) {\n+                        LOG.debug(\"Error writing to \"+file+\" (but executor shutdown)\", t);\n+                    } else {\n+                        LOG.error(\"Error writing to \"+file, t);\n+                    }\n                     throw Throwables.propagate(t);\n                 }\n              }});",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "minor geo-lookup fixes\n\noccasional NPE in utrace lookup, deprecate geobytes lookup whose api has changed, better messages in integration test",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/a08c72dd125f388852a5ea125c47135c4c793428",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/44b6b4a011bea0d0e8d2b9d2ea5ddda6018f96f4",
        "bug_id": "incubator-brooklyn_91",
        "file": [
            {
                "sha": "1c68000b49861a7e9f8ea0f96ebfc92b2a5187d2",
                "filename": "core/src/main/java/brooklyn/location/geo/GeoBytesHostGeoLookup.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/a08c72dd125f388852a5ea125c47135c4c793428/core/src/main/java/brooklyn/location/geo/GeoBytesHostGeoLookup.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/a08c72dd125f388852a5ea125c47135c4c793428/core/src/main/java/brooklyn/location/geo/GeoBytesHostGeoLookup.java",
                "status": "modified",
                "changes": 11,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/geo/GeoBytesHostGeoLookup.java?ref=a08c72dd125f388852a5ea125c47135c4c793428",
                "patch": "@@ -29,6 +29,8 @@\n \n import brooklyn.util.net.Networking;\n \n+/** @deprecated Mar 2015 - the API has changed; GetLocation now discouraged for free access, and valuepairs.txt not supported */\n+@Deprecated\n public class GeoBytesHostGeoLookup implements HostGeoLookup {\n \n     public static final Logger log = LoggerFactory.getLogger(GeoBytesHostGeoLookup.class);\n@@ -84,7 +86,12 @@ public HostGeoInfo getHostGeoInfo(InetAddress address) throws MalformedURLExcept\n         Properties props = new Properties();\n         try {\n             props.load( new URL(url).openStream() );\n+            HostGeoInfo geo = new HostGeoInfo(address.getHostName(), props.getProperty(\"city\")+\" (\"+props.getProperty(\"iso2\")+\")\", \n+                Double.parseDouble(props.getProperty(\"latitude\")), Double.parseDouble(props.getProperty(\"longitude\")));\n+            log.info(\"Geo info lookup for \"+address+\" returned: \"+geo);\n+            return geo;\n         } catch (Exception e) {\n+            // may be web not available, or gateway giving us funny crap\n             if (log.isDebugEnabled())\n                 log.debug(\"Geo info lookup for \"+address+\" failed: \"+e);\n             if (!LOGGED_GEO_LOOKUP_UNAVAILABLE) {\n@@ -93,10 +100,6 @@ public HostGeoInfo getHostGeoInfo(InetAddress address) throws MalformedURLExcept\n             }\n             return null;\n         }\n-        HostGeoInfo geo = new HostGeoInfo(address.getHostName(), props.getProperty(\"city\")+\" (\"+props.getProperty(\"iso2\")+\")\", \n-                Double.parseDouble(props.getProperty(\"latitude\")), Double.parseDouble(props.getProperty(\"longitude\")));\n-        log.info(\"Geo info lookup for \"+address+\" returned: \"+geo);\n-        return geo;\n     }\n     \n }",
                "deletions": 4
            },
            {
                "sha": "37ed9f72f6efc32ae9c29d23cb0b0a417b9e320e",
                "filename": "core/src/main/java/brooklyn/location/geo/UtraceHostGeoLookup.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/a08c72dd125f388852a5ea125c47135c4c793428/core/src/main/java/brooklyn/location/geo/UtraceHostGeoLookup.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/a08c72dd125f388852a5ea125c47135c4c793428/core/src/main/java/brooklyn/location/geo/UtraceHostGeoLookup.java",
                "status": "modified",
                "changes": 15,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/geo/UtraceHostGeoLookup.java?ref=a08c72dd125f388852a5ea125c47135c4c793428",
                "patch": "@@ -27,6 +27,9 @@\n import java.net.MalformedURLException;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -189,9 +192,17 @@ public HostGeoInfo retrieveHostGeoInfo(InetAddress address) throws MalformedURLE\n         }\n     }\n     \n+    @Nullable\n+    private static Node getFirstChild(Node xml, String field) {\n+        if (xml==null) return null;\n+        NodeList nl = (NodeList)xml.get(field);\n+        if (nl==null || nl.isEmpty()) return null;\n+        return (Node)nl.get(0);\n+    }\n+    @Nonnull\n     private static String getXmlResultsField(Node xml, String field) {\n-        Node r1 = ((Node)((NodeList)xml.get(\"result\")).get(0));\n-        Node f1 = ((Node)((NodeList)r1.get(field)).get(0));\n+        Node f1 = getFirstChild(getFirstChild(xml, \"result\"), field);\n+        if (f1==null) return \"\";\n         return f1.text();\n     }\n }",
                "deletions": 2
            },
            {
                "sha": "85acb6d69e79afe85fc174ad0d83e9028cd4c3ff",
                "filename": "core/src/test/java/brooklyn/location/geo/HostGeoLookupIntegrationTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/a08c72dd125f388852a5ea125c47135c4c793428/core/src/test/java/brooklyn/location/geo/HostGeoLookupIntegrationTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/a08c72dd125f388852a5ea125c47135c4c793428/core/src/test/java/brooklyn/location/geo/HostGeoLookupIntegrationTest.java",
                "status": "modified",
                "changes": 13,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/location/geo/HostGeoLookupIntegrationTest.java?ref=a08c72dd125f388852a5ea125c47135c4c793428",
                "patch": "@@ -36,16 +36,21 @@\n     \n     @Test(groups = \"Integration\")\n     public void testLocalhostGetsLocation() throws Exception {\n-        SshMachineLocation l = new LocalhostMachineProvisioningLocation().obtain();\n+        LocalhostMachineProvisioningLocation ll = new LocalhostMachineProvisioningLocation();\n+        SshMachineLocation l = ll.obtain();\n         HostGeoInfo geo = HostGeoInfo.fromLocation(l);\n+        Assert.assertNotNull(geo, \"host lookup unavailable - is the maxmind database installed? or else network unavailable or too slow?\");\n         log.info(\"localhost is in \"+geo);\n         Assert.assertNotNull(geo, \"couldn't load data; must have a valid HostGeoLookup impl (e.g. MaxMind installed, or online and with Utrace credit)\");\n         Assert.assertTrue(-90 <= geo.latitude && geo.latitude <= 90); \n+        ll.close();\n     }\n \n-    @Test(groups = \"Integration\")\n+    @Deprecated // see GeoBytesHostGeoLookup - their API changed\n+    @Test(groups = \"Integration\", enabled=false)\n     public void testGeobytesLookup() throws Exception {\n         HostGeoInfo geo = new GeoBytesHostGeoLookup().getHostGeoInfo(InetAddress.getByName(\"geobytes.com\"));\n+        Assert.assertNotNull(geo, \"host lookup unavailable\");\n         Assert.assertEquals(geo.displayName, \"Baltimore (US)\");\n         Assert.assertEquals(geo.latitude, 39.2894, 0.1);\n         Assert.assertEquals(geo.longitude, -76.6384, 0.1);\n@@ -54,14 +59,16 @@ public void testGeobytesLookup() throws Exception {\n     @Test(groups = \"Integration\")\n     public void testUtraceLookup() throws Exception {\n         HostGeoInfo geo = new UtraceHostGeoLookup().getHostGeoInfo(InetAddress.getByName(\"utrace.de\"));\n+        Assert.assertNotNull(geo, \"host lookup unavailable - maybe network not available \");\n         Assert.assertTrue(geo.displayName.contains(\"(DE)\"));\n         Assert.assertEquals(geo.latitude, 51, 2);\n         Assert.assertEquals(geo.longitude, 9, 5);\n     }\n \n-    @Test(groups = \"Integration\")\n+    @Test(groups = \"Integration\")  // only works if maxmind database is installed to ~/.brooklyn/\n     public void testMaxmindLookup() throws Exception {\n         HostGeoInfo geo = new MaxMind2HostGeoLookup().getHostGeoInfo(InetAddress.getByName(\"maxmind.com\"));\n+        Assert.assertNotNull(geo, \"host lookup unavailable - is the maxmind database installed?\");\n         log.info(\"maxmind.com at \"+geo);\n         \n         // used to be Washington; now Dallas - in case this changes again, we will accept either!",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Fix sharded-mongodb, with CoLocatedMongoDbRouter\n\n- was getting NPE in CoLocatedMongoDbRouter.init, while trying to\n  resolve config set in yam that pointed at another entity.",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/a46391e1671bd37460eaa5676badb87c4ba48463",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/7051e6c740ac9e9f5a9c7847f8e2e984dd5a00f4",
        "bug_id": "incubator-brooklyn_92",
        "file": [
            {
                "sha": "a8bec4e8af0194b14208ad122d75f652179df3fb",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/sharding/CoLocatedMongoDBRouterImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/a46391e1671bd37460eaa5676badb87c4ba48463/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/sharding/CoLocatedMongoDBRouterImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/a46391e1671bd37460eaa5676badb87c4ba48463/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/sharding/CoLocatedMongoDBRouterImpl.java",
                "status": "modified",
                "changes": 33,
                "additions": 27,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/nosql/src/main/java/brooklyn/entity/nosql/mongodb/sharding/CoLocatedMongoDBRouterImpl.java?ref=a46391e1671bd37460eaa5676badb87c4ba48463",
                "patch": "@@ -21,12 +21,16 @@\n import java.util.Collection;\n \n import brooklyn.enricher.Enrichers;\n+import brooklyn.entity.basic.Entities;\n import brooklyn.entity.basic.SameServerEntityImpl;\n import brooklyn.entity.proxying.EntitySpec;\n import brooklyn.entity.trait.Startable;\n import brooklyn.event.basic.DependentConfiguration;\n import brooklyn.location.Location;\n \n+import com.google.common.base.Predicates;\n+import com.google.common.collect.Iterables;\n+\n public class CoLocatedMongoDBRouterImpl extends SameServerEntityImpl implements CoLocatedMongoDBRouter {\n     @Override\n     public void init() {\n@@ -35,15 +39,32 @@ public void init() {\n         for (EntitySpec<?> siblingSpec : getConfig(CoLocatedMongoDBRouter.SIBLING_SPECS)) {\n             addChild(siblingSpec);\n         }\n-        setAttribute(ROUTER, addChild(EntitySpec.create(MongoDBRouter.class)\n-                .configure(MongoDBRouter.CONFIG_SERVERS,\n-                        DependentConfiguration.attributeWhenReady(getConfig(CoLocatedMongoDBRouter.SHARDED_DEPLOYMENT), MongoDBConfigServerCluster.CONFIG_SERVER_ADDRESSES))));\n-        addEnricher(Enrichers.builder().propagating(MongoDBRouter.PORT).from(getAttribute(ROUTER)).build());\n     }\n-    \n+\n     @Override\n     protected void doStart(Collection<? extends Location> locations) {\n-        super.start(locations);\n+        // TODO Changed to create the router child after init as a workaround.\n+        // When we use `mongo-sharded.yaml`, and we call \n+        // `getConfig(CoLocatedMongoDBRouter.SHARDED_DEPLOYMENT)`,\n+        // the value is `$brooklyn:component(\"shardeddeployment\")`.\n+        // To look up the component, it tries to do `entity().getApplication()` to\n+        // search the entities for one with the correct id. However if being done\n+        // during `init()`, then this (which is returned by `entity()`) has not had its parent\n+        // set, so `entity().getApplication()` returns null.\n+        //\n+        // We should move this code back to `init()` once we have a solution for that.\n+        // We can also remove the call to Entities.manage() once this is in init() again.\n+        \n+        MongoDBRouter router = addChild(EntitySpec.create(MongoDBRouter.class)\n+                .configure(MongoDBRouter.CONFIG_SERVERS,\n+                        DependentConfiguration.attributeWhenReady(\n+                                getConfig(CoLocatedMongoDBRouter.SHARDED_DEPLOYMENT), \n+                                MongoDBConfigServerCluster.CONFIG_SERVER_ADDRESSES)));\n+        Entities.manage(router);\n+        setAttribute(ROUTER, (MongoDBRouter) Iterables.tryFind(getChildren(), Predicates.instanceOf(MongoDBRouter.class)).get());\n+        addEnricher(Enrichers.builder().propagating(MongoDBRouter.PORT).from(router).build());\n+        \n+        super.doStart(locations);\n         setAttribute(Startable.SERVICE_UP, true);\n     }\n }",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Merge pull request #1474 from ahgittin/couchbase\n\nCouchbase code tidy, nicer way to define sensors, and prevent NPE's, using new `Functionals`",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/c2faca4ef56cf61962c1972a637bb8a4f432b55b",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/fdea712f9fdd06b87a7231faa72fcd2754895c53",
        "bug_id": "incubator-brooklyn_93",
        "file": [
            {
                "sha": "b1d0ca44290481d70576ab6911ac2c6288d4ede6",
                "filename": "core/src/main/java/brooklyn/event/feed/http/HttpValueFunctions.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/c2faca4ef56cf61962c1972a637bb8a4f432b55b/core/src/main/java/brooklyn/event/feed/http/HttpValueFunctions.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/c2faca4ef56cf61962c1972a637bb8a4f432b55b/core/src/main/java/brooklyn/event/feed/http/HttpValueFunctions.java",
                "status": "modified",
                "changes": 23,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/event/feed/http/HttpValueFunctions.java?ref=c2faca4ef56cf61962c1972a637bb8a4f432b55b",
                "patch": "@@ -2,8 +2,7 @@\n \n import java.util.List;\n \n-import javax.annotation.Nullable;\n-\n+import brooklyn.util.guava.Functionals;\n import brooklyn.util.http.HttpToolResponse;\n \n import com.google.common.base.Function;\n@@ -64,19 +63,19 @@ public Long apply(HttpToolResponse input) {\n         };\n     }\n     \n+    /** @deprecated since 0.7.0 use {@link Functionals#chain(Function, Function)} */ @Deprecated\n     public static <A,B,C> Function<A,C> chain(final Function<A,? extends B> f1, final Function<B,C> f2) {\n-        return new Function<A,C>() {\n-            @Override public C apply(@Nullable A input) {\n-                return f2.apply(f1.apply(input));\n-            }\n-        };\n+        return Functionals.chain(f1, f2);\n     }\n     \n+    /** @deprecated since 0.7.0 use {@link Functionals#chain(Function, Function, Function)} */ @Deprecated\n     public static <A,B,C,D> Function<A,D> chain(final Function<A,? extends B> f1, final Function<B,? extends C> f2, final Function<C,D> f3) {\n-        return new Function<A,D>() {\n-            @Override public D apply(@Nullable A input) {\n-                return f3.apply(f2.apply(f1.apply(input)));\n-            }\n-        };\n+        return Functionals.chain(f1, f2, f3);\n+    }\n+\n+    /** @deprecated since 0.7.0 use {@link Functionals#chain(Function, Function, Function, Function)} */ @Deprecated\n+    public static <A,B,C,D,E> Function<A,E> chain(final Function<A,? extends B> f1, final Function<B,? extends C> f2, final Function<C,? extends D> f3, final Function<D,E> f4) {\n+        return Functionals.chain(f1, f2, f3, f4);\n     }\n+\n }",
                "deletions": 12
            },
            {
                "sha": "46b4635f04ebeeead220f9df7f83942fe920e792",
                "filename": "core/src/main/java/brooklyn/event/feed/http/JsonFunctions.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/c2faca4ef56cf61962c1972a637bb8a4f432b55b/core/src/main/java/brooklyn/event/feed/http/JsonFunctions.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/c2faca4ef56cf61962c1972a637bb8a4f432b55b/core/src/main/java/brooklyn/event/feed/http/JsonFunctions.java",
                "status": "modified",
                "changes": 98,
                "additions": 90,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/event/feed/http/JsonFunctions.java?ref=c2faca4ef56cf61962c1972a637bb8a4f432b55b",
                "patch": "@@ -7,6 +7,12 @@\n import java.util.List;\n import java.util.NoSuchElementException;\n \n+import javax.annotation.Nullable;\n+\n+import brooklyn.util.guava.Functionals;\n+import brooklyn.util.guava.Maybe;\n+import brooklyn.util.guava.MaybeFunctions;\n+\n import com.google.common.base.Function;\n import com.google.common.base.Splitter;\n import com.google.common.collect.Lists;\n@@ -40,31 +46,92 @@ private JsonFunctions() {} // instead use static utility methods\n         };\n     }\n \n-    public static Function<JsonElement, JsonElement> walk(String elements) {\n-        Iterable<String> iterable = Splitter.on('.').split(elements);\n-        return walk(iterable);\n+    \n+    /** as {@link #walkM(Iterable)} taking a single string consisting of a dot separated path */\n+    public static Function<JsonElement, JsonElement> walk(String elementOrDotSeparatedElements) {\n+        return walk( Splitter.on('.').split(elementOrDotSeparatedElements) );\n     }\n \n-    public static Function<JsonElement, JsonElement> walk(Iterable<String> elements) {\n-        String[] array = Lists.newArrayList(elements).toArray(new String[0]);\n-        return walk(array);\n+    /** as {@link #walkM(Iterable)} taking a series of strings (dot separators not respected here) */\n+    public static Function<JsonElement, JsonElement> walk(final String... elements) {\n+        return walk(Arrays.asList(elements));\n     }\n \n-    public static Function<JsonElement, JsonElement> walk(final String... elements) {\n+    /** returns a function which traverses the supplied path of entries in a json object (maps of maps of maps...), \n+     * @throws NoSuchElementException if any path is not present as a key in that map */\n+    public static Function<JsonElement, JsonElement> walk(final Iterable<String> elements) {\n+        // could do this instead, pointing at Maybe for this, and for walkN, but it's slightly less efficient\n+//      return Functionals.chain(MaybeFunctions.<JsonElement>wrap(), walkM(elements), MaybeFunctions.<JsonElement>get());\n+        \n         return new Function<JsonElement, JsonElement>() {\n             @Override public JsonElement apply(JsonElement input) {\n                 JsonElement curr = input;\n                 for (String element : elements) {\n                     JsonObject jo = curr.getAsJsonObject();\n                     curr = jo.get(element);\n                     if (curr==null) \n-                        throw new NoSuchElementException(\"No element '\"+element+\" in JSON, when walking \"+Arrays.asList(elements));\n+                        throw new NoSuchElementException(\"No element '\"+element+\" in JSON, when walking \"+elements);\n                 }\n                 return curr;\n             }\n         };\n     }\n+\n     \n+    /** as {@link #walk(String)} but if any element is not found it simply returns null */\n+    public static Function<JsonElement, JsonElement> walkN(@Nullable String elements) {\n+        return walkN( Splitter.on('.').split(elements) );\n+    }\n+\n+    /** as {@link #walk(String...))} but if any element is not found it simply returns null */\n+    public static Function<JsonElement, JsonElement> walkN(final String... elements) {\n+        return walkN(Arrays.asList(elements));\n+    }\n+\n+    /** as {@link #walk(Iterable))} but if any element is not found it simply returns null */\n+    public static Function<JsonElement, JsonElement> walkN(final Iterable<String> elements) {\n+        return new Function<JsonElement, JsonElement>() {\n+            @Override public JsonElement apply(JsonElement input) {\n+                JsonElement curr = input;\n+                for (String element : elements) {\n+                    if (curr==null) return null;\n+                    JsonObject jo = curr.getAsJsonObject();\n+                    curr = jo.get(element);\n+                }\n+                return curr;\n+            }\n+        };\n+    }\n+\n+    /** as {@link #walk(String))} and {@link #walk(Iterable)} */\n+    public static Function<Maybe<JsonElement>, Maybe<JsonElement>> walkM(@Nullable String elements) {\n+        return walkM( Splitter.on('.').split(elements) );\n+    }\n+\n+    /** as {@link #walk(String...))} and {@link #walk(Iterable)} */\n+    public static Function<Maybe<JsonElement>, Maybe<JsonElement>> walkM(final String... elements) {\n+        return walkM(Arrays.asList(elements));\n+    }\n+\n+    /** as {@link #walk(Iterable))} but working with objects which {@link Maybe} contain {@link JsonElement},\n+     * simply preserving a {@link Maybe#absent()} object if additional walks are requested upon it\n+     * (cf jquery) */\n+    public static Function<Maybe<JsonElement>, Maybe<JsonElement>> walkM(final Iterable<String> elements) {\n+        return new Function<Maybe<JsonElement>, Maybe<JsonElement>>() {\n+            @Override public Maybe<JsonElement> apply(Maybe<JsonElement> input) {\n+                Maybe<JsonElement> curr = input;\n+                for (String element : elements) {\n+                    if (curr.isAbsent()) return curr;\n+                    JsonObject jo = curr.get().getAsJsonObject();\n+                    JsonElement currO = jo.get(element);\n+                    if (currO==null) return Maybe.absent(\"No element '\"+element+\" in JSON, when walking \"+elements);\n+                    curr = Maybe.of(currO);\n+                }\n+                return curr;\n+            }\n+        };\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     public static <T> Function<JsonElement, T> cast(final Class<T> expected) {\n         return new Function<JsonElement, T>() {\n@@ -120,4 +187,19 @@ private JsonFunctions() {} // instead use static utility methods\n             }\n         };\n     }\n+    \n+    public static <T> Function<Maybe<JsonElement>, T> castM(final Class<T> expected) {\n+        return Functionals.chain(MaybeFunctions.<JsonElement>get(), cast(expected));\n+    }\n+    \n+    public static <T> Function<Maybe<JsonElement>, T> castM(final Class<T> expected, final T defaultValue) {\n+        return new Function<Maybe<JsonElement>, T>() {\n+            @Override\n+            public T apply(Maybe<JsonElement> input) {\n+                if (input.isAbsent()) return defaultValue;\n+                return cast(expected).apply(input.get());\n+            }\n+        };\n+    }\n+\n }",
                "deletions": 8
            },
            {
                "sha": "d555b3722369d6652017ceee731db750ccf185a3",
                "filename": "core/src/test/java/brooklyn/event/feed/http/JsonFunctionsTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/c2faca4ef56cf61962c1972a637bb8a4f432b55b/core/src/test/java/brooklyn/event/feed/http/JsonFunctionsTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/c2faca4ef56cf61962c1972a637bb8a4f432b55b/core/src/test/java/brooklyn/event/feed/http/JsonFunctionsTest.java",
                "status": "added",
                "changes": 88,
                "additions": 88,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/event/feed/http/JsonFunctionsTest.java?ref=c2faca4ef56cf61962c1972a637bb8a4f432b55b",
                "patch": "@@ -0,0 +1,88 @@\n+package brooklyn.event.feed.http;\n+\n+import java.util.NoSuchElementException;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import brooklyn.util.collections.Jsonya;\n+import brooklyn.util.collections.Jsonya.Navigator;\n+import brooklyn.util.collections.MutableMap;\n+import brooklyn.util.guava.Functionals;\n+import brooklyn.util.guava.Maybe;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParser;\n+\n+public class JsonFunctionsTest {\n+\n+    public static JsonElement europeMap() {\n+        Navigator<MutableMap<Object, Object>> europe = Jsonya.newInstance().at(\"europe\", \"uk\", \"edinburgh\")\n+                .put(\"population\", 500*1000)\n+                .put(\"weather\", \"wet\", \"lighting\", \"dark\")\n+                .root().at(\"europe\").at(\"france\").put(\"population\", 80*1000*1000)\n+                .root();\n+        return new JsonParser().parse( europe.toString() );\n+    }\n+\n+    @Test\n+    public void testWalk1() {\n+        JsonElement pop = JsonFunctions.walk(\"europe\", \"france\", \"population\").apply(europeMap());\n+        Assert.assertEquals( (int)JsonFunctions.cast(Integer.class).apply(pop), 80*1000*1000 );\n+    }\n+\n+    @Test\n+    public void testWalk2() {\n+        String weather = Functionals.chain(\n+            JsonFunctions.walk(\"europe.uk.edinburgh.weather\"),\n+            JsonFunctions.cast(String.class) ).apply(europeMap());\n+        Assert.assertEquals(weather, \"wet\");\n+    }\n+\n+    @Test(expectedExceptions=NoSuchElementException.class)\n+    public void testWalkWrong() {\n+        Functionals.chain(\n+            JsonFunctions.walk(\"europe\", \"spain\", \"barcelona\"),\n+            JsonFunctions.cast(String.class) ).apply(europeMap());\n+    }\n+\n+\n+    @Test\n+    public void testWalkM() {\n+        Maybe<JsonElement> pop = JsonFunctions.walkM(\"europe\", \"france\", \"population\").apply( Maybe.of(europeMap()) );\n+        Assert.assertEquals( (int)JsonFunctions.castM(Integer.class).apply(pop), 80*1000*1000 );\n+    }\n+\n+    @Test\n+    public void testWalkMWrong1() {\n+        Maybe<JsonElement> m = JsonFunctions.walkM(\"europe\", \"spain\", \"barcelona\").apply( Maybe.of( europeMap()) );\n+        Assert.assertTrue(m.isAbsent());\n+    }\n+\n+    @Test(expectedExceptions=Exception.class)\n+    public void testWalkMWrong2() {\n+        Maybe<JsonElement> m = JsonFunctions.walkM(\"europe\", \"spain\", \"barcelona\").apply( Maybe.of( europeMap()) );\n+        JsonFunctions.castM(String.class).apply(m);\n+    }\n+\n+    \n+    @Test\n+    public void testWalkN() {\n+        JsonElement pop = JsonFunctions.walkN(\"europe\", \"france\", \"population\").apply( europeMap() );\n+        Assert.assertEquals( (int)JsonFunctions.cast(Integer.class).apply(pop), 80*1000*1000 );\n+    }\n+\n+    @Test\n+    public void testWalkNWrong1() {\n+        JsonElement m = JsonFunctions.walkN(\"europe\", \"spain\", \"barcelona\").apply( europeMap() );\n+        Assert.assertNull(m);\n+    }\n+\n+    public void testWalkNWrong2() {\n+        JsonElement m = JsonFunctions.walkN(\"europe\", \"spain\", \"barcelona\").apply( europeMap() );\n+        String n = JsonFunctions.cast(String.class).apply(m);\n+        Assert.assertNull(n);\n+    }\n+\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "46b49f5cd5fb10cd194ea0f4a7502174a7bf9f71",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNode.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/c2faca4ef56cf61962c1972a637bb8a4f432b55b/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNode.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/c2faca4ef56cf61962c1972a637bb8a4f432b55b/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNode.java",
                "status": "modified",
                "changes": 26,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNode.java?ref=c2faca4ef56cf61962c1972a637bb8a4f432b55b",
                "patch": "@@ -8,12 +8,14 @@\n import brooklyn.entity.basic.MethodEffector;\n import brooklyn.entity.basic.SoftwareProcess;\n import brooklyn.entity.proxying.ImplementedBy;\n+import brooklyn.entity.webapp.WebAppService;\n import brooklyn.entity.webapp.WebAppServiceConstants;\n import brooklyn.event.AttributeSensor;\n import brooklyn.event.basic.BasicAttributeSensorAndConfigKey;\n import brooklyn.event.basic.PortAttributeSensorAndConfigKey;\n import brooklyn.event.basic.Sensors;\n import brooklyn.util.flags.SetFromFlag;\n+import brooklyn.util.text.ByteSizeStrings;\n \n @ImplementedBy(CouchbaseNodeImpl.class)\n public interface CouchbaseNode extends SoftwareProcess {\n@@ -78,27 +80,33 @@\n             \"Retrieved from pools/nodes/<current node>/interestingStats/cmd_get\");\n     AttributeSensor<Integer> CURR_ITEMS_TOT = Sensors.newIntegerSensor(\"couchbase.stats.curr.items.tot\", \n             \"Retrieved from pools/nodes/<current node>/interestingStats/curr_items_tot\");\n+\n     \n-    // this class is added because the ROOT_URL relies on a static initialization which unfortunately\n-    // can't be added to\n-    // an interface.\n     class RootUrl {\n-        public static final AttributeSensor<String> ROOT_URL = Sensors.newStringSensor(\"webapp.url\", \"URL\");\n-\n+        public static final AttributeSensor<String> ROOT_URL = WebAppService.ROOT_URL;\n+        \n         static {\n-            RendererHints.register(ROOT_URL, new RendererHints.NamedActionWithUrl(\"Open\"));\n+            // ROOT_URL does not need init because it refers to something already initialized\n             RendererHints.register(COUCHBASE_WEB_ADMIN_URL, new RendererHints.NamedActionWithUrl(\"Open\"));\n+\n+            RendererHints.register(COUCH_DOCS_DATA_SIZE, RendererHints.displayValue(ByteSizeStrings.metric()));\n+            RendererHints.register(COUCH_DOCS_ACTUAL_DISK_SIZE, RendererHints.displayValue(ByteSizeStrings.metric()));\n+            RendererHints.register(MEM_USED, RendererHints.displayValue(ByteSizeStrings.metric()));\n+            RendererHints.register(COUCH_VIEWS_ACTUAL_DISK_SIZE, RendererHints.displayValue(ByteSizeStrings.metric()));\n+            RendererHints.register(COUCH_VIEWS_DATA_SIZE, RendererHints.displayValue(ByteSizeStrings.metric()));\n         }\n     }\n+    \n+    // this long-winded reference is done just to trigger the initialization above\n+    AttributeSensor<String> ROOT_URL = RootUrl.ROOT_URL;\n \n-    public static final MethodEffector<Void> SERVER_ADD = new MethodEffector<Void>(CouchbaseNode.class, \"serverAdd\");\n-    public static final MethodEffector<Void> REBALANCE = new MethodEffector<Void>(CouchbaseNode.class, \"rebalance\");\n+    MethodEffector<Void> SERVER_ADD = new MethodEffector<Void>(CouchbaseNode.class, \"serverAdd\");\n+    MethodEffector<Void> REBALANCE = new MethodEffector<Void>(CouchbaseNode.class, \"rebalance\");\n \n     @Effector(description = \"add a server to a cluster\")\n     public void serverAdd(@EffectorParam(name = \"serverHostname\") String serverToAdd, @EffectorParam(name = \"username\") String username, @EffectorParam(name = \"password\") String password);\n \n     @Effector(description = \"rebalance the couchbase cluster\")\n     public void rebalance();\n \n-\n }",
                "deletions": 9
            },
            {
                "sha": "06d9c187688fc6e83e67f3561749e028f71de1d0",
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNodeImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/c2faca4ef56cf61962c1972a637bb8a4f432b55b/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNodeImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/c2faca4ef56cf61962c1972a637bb8a4f432b55b/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNodeImpl.java",
                "status": "modified",
                "changes": 93,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNodeImpl.java?ref=c2faca4ef56cf61962c1972a637bb8a4f432b55b",
                "patch": "@@ -8,6 +8,7 @@\n \n import brooklyn.entity.basic.Attributes;\n import brooklyn.entity.basic.SoftwareProcessImpl;\n+import brooklyn.event.AttributeSensor;\n import brooklyn.event.SensorEvent;\n import brooklyn.event.SensorEventListener;\n import brooklyn.event.feed.http.HttpFeed;\n@@ -19,6 +20,9 @@\n import brooklyn.location.cloud.CloudLocationConfig;\n import brooklyn.util.collections.MutableSet;\n import brooklyn.util.config.ConfigBag;\n+import brooklyn.util.guava.Functionals;\n+import brooklyn.util.guava.MaybeFunctions;\n+import brooklyn.util.guava.TypeTokens;\n import brooklyn.util.http.HttpToolResponse;\n \n import com.google.common.base.Function;\n@@ -88,26 +92,35 @@ public void rebalance() {\n         getDriver().rebalance();\n     }\n \n+    protected final static Function<HttpToolResponse, JsonElement> GET_THIS_NODE_STATS = Functionals.chain(\n+        HttpValueFunctions.jsonContents(), \n+        JsonFunctions.walk(\"nodes\"), \n+        new Function<JsonElement, JsonElement>() {\n+            @Override public JsonElement apply(JsonElement input) {\n+                JsonArray nodes = input.getAsJsonArray();\n+                for (JsonElement element : nodes) {\n+                    JsonElement thisNode = element.getAsJsonObject().get(\"thisNode\");\n+                    if (thisNode!=null && Boolean.TRUE.equals(thisNode.getAsBoolean())) {\n+                        return element.getAsJsonObject().get(\"interestingStats\");\n+                    }\n+                }\n+                return null;\n+        }}\n+    );\n+    \n+    protected final static <T> HttpPollConfig<T> getSensorFromNodeStat(AttributeSensor<T> sensor, String ...jsonPath) {\n+        return new HttpPollConfig<T>(sensor)\n+            .onSuccess(Functionals.chain(GET_THIS_NODE_STATS, \n+                MaybeFunctions.<JsonElement>wrap(), \n+                JsonFunctions.walkM(jsonPath), \n+                JsonFunctions.castM(TypeTokens.getRawRawType(sensor.getTypeToken()), null)))\n+            .onFailureOrException(Functions.<T>constant(null));\n+    }\n \n     public void connectSensors() {\n         super.connectSensors();\n         connectServiceUpIsRunning();\n-        \n-        Function<HttpToolResponse, JsonElement> getThisNodesStats = HttpValueFunctions.chain(\n-            HttpValueFunctions.jsonContents(), \n-            JsonFunctions.walk(\"nodes\"), \n-            new Function<JsonElement, JsonElement>() {\n-                @Override public JsonElement apply(JsonElement input) {\n-                    JsonArray nodes = input.getAsJsonArray();\n-                    for (JsonElement element : nodes) {\n-                        if (Boolean.TRUE.equals(element.getAsJsonObject().get(\"thisNode\").getAsBoolean())) {\n-                            return element.getAsJsonObject().get(\"interestingStats\");\n-                        }\n-                    }\n-                    return null;\n-            }}\n-        );\n-        \n+                \n         Integer rawPort = getAttribute(CouchbaseNode.COUCHBASE_WEB_ADMIN_PORT);\n         Preconditions.checkNotNull(rawPort, \"HTTP_PORT sensors not set for %s; is an acceptable port available?\", this);\n         HostAndPort hp = BrooklynAccessUtils.getBrooklynAccessibleAddress(this, rawPort);\n@@ -119,42 +132,18 @@ public void connectSensors() {\n             .period(1000)\n             .baseUri(adminUrl + \"/pools/nodes/\")\n             .credentialsIfNotNull(getConfig(CouchbaseNode.COUCHBASE_ADMIN_USERNAME), getConfig(CouchbaseNode.COUCHBASE_ADMIN_PASSWORD))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.OPS)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"ops\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.COUCH_DOCS_DATA_SIZE)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"couch_docs_data_size\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.COUCH_DOCS_ACTUAL_DISK_SIZE)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"couch_docs_actual_disk_size\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.EP_BG_FETCHED)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"ep_bg_fetched\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.MEM_USED)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"mem_used\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.COUCH_VIEWS_ACTUAL_DISK_SIZE)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"couch_views_actual_disk_size\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.CURR_ITEMS)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"curr_items\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.VB_REPLICA_CURR_ITEMS)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"vb_replica_curr_items\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.COUCH_VIEWS_DATA_SIZE)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"couch_views_data_size\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.GET_HITS)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"get_hits\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.CMD_GET)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"cmd_get\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.CURR_ITEMS_TOT)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"curr_items_tot\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.OPS, \"ops\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.COUCH_DOCS_DATA_SIZE, \"couch_docs_data_size\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.COUCH_DOCS_ACTUAL_DISK_SIZE, \"couch_docs_actual_disk_size\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.EP_BG_FETCHED, \"ep_bg_fetched\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.MEM_USED, \"mem_used\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.COUCH_VIEWS_ACTUAL_DISK_SIZE, \"couch_views_actual_disk_size\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.CURR_ITEMS, \"curr_items\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.VB_REPLICA_CURR_ITEMS, \"vb_replica_curr_items\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.COUCH_VIEWS_DATA_SIZE, \"couch_views_data_size\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.GET_HITS, \"get_hits\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.CMD_GET, \"cmd_get\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.CURR_ITEMS_TOT, \"curr_items_tot\"))\n             .build();\n     }\n ",
                "deletions": 52
            },
            {
                "sha": "19f320d4ef5594deb7ac1f374395eb650300b95f",
                "filename": "software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppCluster.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/c2faca4ef56cf61962c1972a637bb8a4f432b55b/software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppCluster.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/c2faca4ef56cf61962c1972a637bb8a4f432b55b/software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppCluster.java",
                "status": "modified",
                "changes": 13,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppCluster.java?ref=c2faca4ef56cf61962c1972a637bb8a4f432b55b",
                "patch": "@@ -1,9 +1,11 @@\n package brooklyn.entity.webapp;\n \n+import brooklyn.config.render.RendererHints;\n import brooklyn.entity.group.DynamicCluster;\n import brooklyn.entity.proxying.ImplementedBy;\n import brooklyn.event.AttributeSensor;\n import brooklyn.event.basic.BasicAttributeSensor;\n+import brooklyn.util.time.Duration;\n \n /**\n  * DynamicWebAppClusters provide cluster-wide aggregates of entity attributes.  Currently totals and averages:\n@@ -29,10 +31,17 @@\n     public static final AttributeSensor<Double> REQUESTS_PER_SECOND_IN_WINDOW_PER_NODE = new BasicAttributeSensor<Double>(\n             Double.class, \"webapp.reqs.perSec.windowed.perNode\", \"Reqs/sec (over time window) averaged over all nodes\");\n \n-    public static final AttributeSensor<Integer> TOTAL_PROCESSING_TIME_PER_NODE = new BasicAttributeSensor<Integer>(\n-            Integer.class, \"webapp.reqs.processingTime.perNode\", \"Total processing time per node\");\n+    public static final AttributeSensor<Integer> TOTAL_PROCESSING_TIME_PER_NODE = ApplyDisplayHints.TOTAL_PROCESSING_TIME_PER_NODE;\n \n     public static final AttributeSensor<Double> PROCESSING_TIME_FRACTION_IN_WINDOW_PER_NODE = new BasicAttributeSensor<Double>(\n             Double.class, \"webapp.reqs.processingTime.fraction.windowed.perNode\", \"Fraction of time spent processing reported by webserver (percentage, over time window) averaged over all nodes\");\n \n+    class ApplyDisplayHints {\n+        public static final AttributeSensor<Integer> TOTAL_PROCESSING_TIME_PER_NODE = new BasicAttributeSensor<Integer>(\n+            Integer.class, \"webapp.reqs.processingTime.perNode\", \"Total processing time per node (millis)\");\n+        static {\n+            RendererHints.register(TOTAL_PROCESSING_TIME_PER_NODE, RendererHints.displayValue(Duration.millisToStringRounded()));\n+        }\n+    }\n+\n }",
                "deletions": 2
            },
            {
                "sha": "b1c75cfc9d3cc63c0dda56536244def7413640e3",
                "filename": "software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppFabric.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/c2faca4ef56cf61962c1972a637bb8a4f432b55b/software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppFabric.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/c2faca4ef56cf61962c1972a637bb8a4f432b55b/software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppFabric.java",
                "status": "modified",
                "changes": 10,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppFabric.java?ref=c2faca4ef56cf61962c1972a637bb8a4f432b55b",
                "patch": "@@ -23,12 +23,8 @@\n     public static final AttributeSensor<Integer> ERROR_COUNT_PER_NODE = new BasicAttributeSensor<Integer>(\n             Integer.class, \"webapp.reqs.errors.perNode\", \"Fabric entity request error average\");\n \n-    public static final AttributeSensor<Double> REQUESTS_PER_SECOND_LAST_PER_NODE = new BasicAttributeSensor<Double>(\n-            Double.class, \"webapp.reqs.perSec.last.perNode\", \"Reqs/sec (last datapoint) averaged over all nodes\");\n+    public static final AttributeSensor<Double> REQUESTS_PER_SECOND_LAST_PER_NODE = DynamicWebAppCluster.REQUESTS_PER_SECOND_LAST_PER_NODE;\n+    public static final AttributeSensor<Double> REQUESTS_PER_SECOND_IN_WINDOW_PER_NODE = DynamicWebAppCluster.REQUESTS_PER_SECOND_IN_WINDOW_PER_NODE;\n+    public static final AttributeSensor<Integer> TOTAL_PROCESSING_TIME_PER_NODE = DynamicWebAppCluster.TOTAL_PROCESSING_TIME_PER_NODE;\n \n-    public static final AttributeSensor<Double> REQUESTS_PER_SECOND_IN_WINDOW_PER_NODE = new BasicAttributeSensor<Double>(\n-            Double.class, \"webapp.reqs.perSec.windowed.perNode\", \"Reqs/sec (over time window) averaged over all nodes\");\n-\n-    public static final AttributeSensor<Integer> TOTAL_PROCESSING_TIME_PER_NODE = new BasicAttributeSensor<Integer>(\n-            Integer.class, \"webapp.reqs.processingTime.perNode\", \"Total processing time per node\");\n }",
                "deletions": 7
            },
            {
                "sha": "91a46e2cd91158aeeddcb8d2b2d8b07069aed1a4",
                "filename": "software/webapp/src/main/java/brooklyn/entity/webapp/WebAppServiceConstants.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/c2faca4ef56cf61962c1972a637bb8a4f432b55b/software/webapp/src/main/java/brooklyn/entity/webapp/WebAppServiceConstants.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/c2faca4ef56cf61962c1972a637bb8a4f432b55b/software/webapp/src/main/java/brooklyn/entity/webapp/WebAppServiceConstants.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/webapp/src/main/java/brooklyn/entity/webapp/WebAppServiceConstants.java?ref=c2faca4ef56cf61962c1972a637bb8a4f432b55b",
                "patch": "@@ -10,6 +10,8 @@\n import brooklyn.event.basic.PortAttributeSensorAndConfigKey;\n import brooklyn.event.basic.Sensors;\n import brooklyn.util.flags.SetFromFlag;\n+import brooklyn.util.text.ByteSizeStrings;\n+import brooklyn.util.time.Duration;\n \n import com.google.common.collect.ImmutableList;\n \n@@ -71,5 +73,9 @@\n \n     static {\n         RendererHints.register(ROOT_URL, new RendererHints.NamedActionWithUrl(\"Open\"));\n+        RendererHints.register(WebAppServiceConstants.TOTAL_PROCESSING_TIME, RendererHints.displayValue(Duration.millisToStringRounded()));\n+        RendererHints.register(WebAppServiceConstants.MAX_PROCESSING_TIME, RendererHints.displayValue(Duration.millisToStringRounded()));\n+        RendererHints.register(WebAppServiceConstants.BYTES_RECEIVED, RendererHints.displayValue(ByteSizeStrings.metric()));\n+        RendererHints.register(WebAppServiceConstants.BYTES_SENT, RendererHints.displayValue(ByteSizeStrings.metric()));\n     }\n }",
                "deletions": 0
            },
            {
                "sha": "ef3916520cda23d8b4be4b018447aabec36cb0c8",
                "filename": "utils/common/src/main/java/brooklyn/util/collections/Jsonya.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/c2faca4ef56cf61962c1972a637bb8a4f432b55b/utils/common/src/main/java/brooklyn/util/collections/Jsonya.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/c2faca4ef56cf61962c1972a637bb8a4f432b55b/utils/common/src/main/java/brooklyn/util/collections/Jsonya.java",
                "status": "modified",
                "changes": 49,
                "additions": 45,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/utils/common/src/main/java/brooklyn/util/collections/Jsonya.java?ref=c2faca4ef56cf61962c1972a637bb8a4f432b55b",
                "patch": "@@ -7,7 +7,11 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.Stack;\n \n+import javax.annotation.Nonnull;\n+\n+import brooklyn.util.guava.Maybe;\n import brooklyn.util.text.StringEscapes.JavaStringEscapes;\n \n import com.google.common.annotations.Beta;\n@@ -94,6 +98,7 @@ public static boolean isJsonPrimitiveCompatible(Object x) {\n         protected final Object root;\n         protected final Class<? extends Map> mapType;\n         protected Object focus;\n+        protected Stack<Object> focusStack = new Stack<Object>();\n         protected Function<Object,Void> creationInPreviousFocus;\n         protected Function<Object,Object> translator;\n \n@@ -109,15 +114,33 @@ public Navigator(Object backingStore, Class<? extends Map> mapType) {\n         public Object get() {\n             return focus;\n         }\n+\n+        /** as {@link #get()} but always wrapped in a {@link Maybe}, absent if null */\n+        public @Nonnull Maybe<Object> getMaybe() {\n+            return Maybe.fromNullable(focus);\n+        }\n         \n-        /** returns the object at the focus, casted to the given type, null if none */\n+        /** returns the object at the focus, casted to the given type, null if none\n+         * @throws ClassCastException if object exists here but of the wrong type  */\n         public <V> V get(Class<V> type) {\n             return (V)focus;\n         }\n-        \n+\n+        /** as {@link #get(Class)} but always wrapped in a {@link Maybe}, absent if null\n+         * @throws ClassCastException if object exists here but of the wrong type  */\n+        public @Nonnull <V> Maybe<V> getMaybe(Class<V> type) {\n+            return Maybe.fromNullable(get(type));\n+        }\n+\n+        /** gets the object at the indicated path from the current focus\n+         * (without changing the path to that focus; use {@link #at(Object, Object...)} to change focus) */\n+        // Jun 2014, semantics changed so that focus does not change, which is more natural\n         public Object get(Object pathSegment, Object ...furtherPathSegments) {\n+            push();\n             at(pathSegment, furtherPathSegments);\n-            return get();\n+            Object result = get();\n+            pop();\n+            return result;\n         }\n         \n         public Navigator<T> root() {\n@@ -141,6 +164,12 @@ public T getFocusMap() {\n             map();\n             return (T)focus;\n         }\n+        \n+        /** as {@link #getFocusMap()} but always wrapped in a {@link Maybe}, absent if null\n+         * @throws ClassCastException if object exists here but of the wrong type  */\n+        public @Nonnull Maybe<T> getFocusMapMaybe() {\n+            return Maybe.fromNullable(getFocusMap());\n+        }\n \n         /** specifies a translator function to use when new data is added;\n          * by default everything is added as a literal (ie {@link Functions#identity()}), \n@@ -168,7 +197,19 @@ protected Object translateKey(Object x) {\n \n         // ------------- navigation (map mainly)\n \n-        /** returns the navigator focussed at the indicated key sequence in the given map */\n+        /** pushes the current focus to a stack, so that this location will be restored on the corresponding {@link #pop()} */\n+        public Navigator<T> push() {\n+            focusStack.push(focus);\n+            return this;\n+        }\n+        \n+        /** pops the most recently pushed focus, so that it returns to the last location {@link #push()}ed */\n+        public Navigator<T> pop() {\n+            focus = focusStack.pop();\n+            return this;\n+        }\n+        \n+        /** returns the navigator moved to focus at the indicated key sequence in the given map */\n         public Navigator<T> at(Object pathSegment, Object ...furtherPathSegments) {\n             down(pathSegment);\n             return atArray(furtherPathSegments);",
                "deletions": 4
            },
            {
                "sha": "d026710b3037232d961e9585291c1ffda9757ed9",
                "filename": "utils/common/src/main/java/brooklyn/util/guava/Functionals.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/c2faca4ef56cf61962c1972a637bb8a4f432b55b/utils/common/src/main/java/brooklyn/util/guava/Functionals.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/c2faca4ef56cf61962c1972a637bb8a4f432b55b/utils/common/src/main/java/brooklyn/util/guava/Functionals.java",
                "status": "added",
                "changes": 23,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/utils/common/src/main/java/brooklyn/util/guava/Functionals.java?ref=c2faca4ef56cf61962c1972a637bb8a4f432b55b",
                "patch": "@@ -0,0 +1,23 @@\n+package brooklyn.util.guava;\n+\n+import com.google.common.base.Function;\n+import com.google.common.base.Functions;\n+\n+public class Functionals {\n+\n+    /** applies f1 to the input, then the result of that is passed to f2 (note opposite semantics to {@link Functions#compose(Function, Function)} */ \n+    public static <A,B,C> Function<A,C> chain(final Function<A,? extends B> f1, final Function<B,C> f2) {\n+        return Functions.compose(f2, f1);\n+    }\n+    \n+    /** applies f1 to the input, then f2 to that result, then f3 to that result */\n+    public static <A,B,C,D> Function<A,D> chain(final Function<A,? extends B> f1, final Function<B,? extends C> f2, final Function<C,D> f3) {\n+        return chain(f1, chain(f2, f3));\n+    }\n+    \n+    /** applies f1 to the input, then f2 to that result, then f3 to that result, then f4 to that result */\n+    public static <A,B,C,D,E> Function<A,E> chain(final Function<A,? extends B> f1, final Function<B,? extends C> f2, final Function<C,? extends D> f3, final Function<D,E> f4) {\n+        return chain(f1, chain(f2, chain(f3, f4)));\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "8836e73638eed565b851770d5fe1948dd0a05d71",
                "filename": "utils/common/src/main/java/brooklyn/util/guava/MaybeFunctions.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/c2faca4ef56cf61962c1972a637bb8a4f432b55b/utils/common/src/main/java/brooklyn/util/guava/MaybeFunctions.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/c2faca4ef56cf61962c1972a637bb8a4f432b55b/utils/common/src/main/java/brooklyn/util/guava/MaybeFunctions.java",
                "status": "added",
                "changes": 34,
                "additions": 34,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/utils/common/src/main/java/brooklyn/util/guava/MaybeFunctions.java?ref=c2faca4ef56cf61962c1972a637bb8a4f432b55b",
                "patch": "@@ -0,0 +1,34 @@\n+package brooklyn.util.guava;\n+\n+import com.google.common.base.Function;\n+\n+public class MaybeFunctions {\n+\n+    public static <T> Function<T, Maybe<T>> wrap() {\n+        return new Function<T, Maybe<T>>() {\n+            @Override\n+            public Maybe<T> apply(T input) {\n+                return Maybe.fromNullable(input);\n+            }\n+        };\n+    }\n+\n+    public static <T> Function<Maybe<T>, T> get() {\n+        return new Function<Maybe<T>, T>() {\n+            @Override\n+            public T apply(Maybe<T> input) {\n+                return input.get();\n+            }\n+        };\n+    }\n+\n+    public static <T> Function<Maybe<T>, T> or(final T value) {\n+        return new Function<Maybe<T>, T>() {\n+            @Override\n+            public T apply(Maybe<T> input) {\n+                return input.or(value);\n+            }\n+        };\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "26105f433bb98efbdbebe23603d7ecfa5df2898e",
                "filename": "utils/common/src/main/java/brooklyn/util/guava/TypeTokens.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/c2faca4ef56cf61962c1972a637bb8a4f432b55b/utils/common/src/main/java/brooklyn/util/guava/TypeTokens.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/c2faca4ef56cf61962c1972a637bb8a4f432b55b/utils/common/src/main/java/brooklyn/util/guava/TypeTokens.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/utils/common/src/main/java/brooklyn/util/guava/TypeTokens.java?ref=c2faca4ef56cf61962c1972a637bb8a4f432b55b",
                "patch": "@@ -44,4 +44,11 @@\n         throw new IllegalStateException(\"Both indicators of type are null\");\n     }\n \n+    /** gets the Class<T> object from a token; normal methods return Class<? super T> which may technically be correct \n+     * with generics but this sloppily but handily gives you Class<T> which is usually what you have anyway */\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    public static <T> Class<T> getRawRawType(TypeToken<T> token) {\n+        return (Class)token.getRawType();\n+    }\n+    \n }",
                "deletions": 0
            },
            {
                "sha": "1650c9c82f098c1da0da1baf558179e2972f9c4b",
                "filename": "utils/common/src/test/java/brooklyn/util/collections/JsonyaTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/c2faca4ef56cf61962c1972a637bb8a4f432b55b/utils/common/src/test/java/brooklyn/util/collections/JsonyaTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/c2faca4ef56cf61962c1972a637bb8a4f432b55b/utils/common/src/test/java/brooklyn/util/collections/JsonyaTest.java",
                "status": "modified",
                "changes": 41,
                "additions": 38,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/utils/common/src/test/java/brooklyn/util/collections/JsonyaTest.java?ref=c2faca4ef56cf61962c1972a637bb8a4f432b55b",
                "patch": "@@ -13,7 +13,7 @@\n \n public class JsonyaTest {\n     \n-    protected Navigator<MutableMap<Object,Object>> europeMap() {\n+    public static Navigator<MutableMap<Object,Object>> europeMap() {\n         return Jsonya.newInstance().at(\"europe\", \"uk\", \"edinburgh\")\n                 .put(\"population\", 500*1000)\n                 .put(\"weather\", \"wet\", \"lighting\", \"dark\")\n@@ -50,10 +50,10 @@ public void testJsonyaWithList() {\n         n.at(\"europe\", \"uk\", \"neighbours\").list().add(\"ireland\")\n             .root().at(\"europe\", \"france\", \"neighbours\").list().add(\"spain\", \"germany\").add(\"switzerland\")\n             .root().at(\"europe\", \"france\", \"neighbours\").add(\"lux\");\n-        Object l = n.root().get(\"europe\", \"france\", \"neighbours\");\n+        Object l = n.root().at(\"europe\", \"france\", \"neighbours\").get();\n         Assert.assertTrue(l instanceof List);\n         Assert.assertEquals(((List)l).size(), 4);\n-        // currently remembers last position; not sure that behaviour will continue however...\n+        // this wants a map, so it creates a map in the list\n         n.put(\"east\", \"germany\", \"south\", \"spain\");\n         Assert.assertEquals(((List)l).size(), 5);\n         Map nd = (Map) ((List)l).get(4);\n@@ -135,4 +135,39 @@ public void testPrimitivedAndLiteralledMap() {\n         Assert.assertEquals(MutableMap.copyOf(mapP).add('C', null), MutableMap.copyOf(map).add('C', null));\n     }\n \n+    @Test\n+    public void testJsonyaBadPathNull() {\n+        Navigator<MutableMap<Object, Object>> m = europeMap();\n+        // does not create (but if we 'pushed' it would)\n+        Assert.assertNull( m.at(\"europe\",  \"spain\", \"barcelona\").get() );\n+        Assert.assertNull( m.root().at(\"europe\").at(\"spain\").at(\"barcelona\").get() );\n+    }\n+    @Test\n+    public void testJsonyaMaybe() {\n+        Navigator<MutableMap<Object, Object>> m = europeMap();\n+        Assert.assertEquals( m.at(\"europe\",  \"spain\", \"barcelona\").getMaybe().or(\"norealabc\"), \"norealabc\" );\n+        Assert.assertEquals(m.root().at(\"europe\").getFocusMap().keySet(), MutableSet.of(\"uk\", \"france\"));\n+    }\n+    \n+    @Test\n+    public void testJsonyaPushPop() {\n+        Navigator<MutableMap<Object, Object>> m = europeMap();\n+        Assert.assertTrue(m.getFocusMap().containsKey(\"europe\"));\n+        Assert.assertFalse(m.getFocusMap().containsKey(\"edinburgh\"));\n+        m.push();\n+        \n+        m.at(\"europe\", \"uk\");\n+        Assert.assertTrue(m.getFocusMap().containsKey(\"edinburgh\"));\n+        Assert.assertFalse(m.getFocusMap().containsKey(\"europe\"));\n+        \n+        m.pop();\n+        Assert.assertTrue(m.getFocusMap().containsKey(\"europe\"));\n+        Assert.assertFalse(m.getFocusMap().containsKey(\"edinburgh\"));\n+\n+        // also check 'get' does not change focus\n+        m.get(\"europe\", \"uk\");\n+        Assert.assertTrue(m.getFocusMap().containsKey(\"europe\"));\n+        Assert.assertFalse(m.getFocusMap().containsKey(\"edinburgh\"));\n+    }\n+\n }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Fix SshMachineLocation NPE\n\n- sshPoolCache initialisation was moved to init() previously\n  But for things that instantiate SshMachineLocation directly then\n  the framework won't have called init.",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/8039a827ab7b063674ceddf5f4be679e1d32ca5c",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/6de4ee9e4941279f9eb8ebca2d257c93266a6837",
        "bug_id": "incubator-brooklyn_94",
        "file": [
            {
                "sha": "3bcb45131aac6c1b03dca25ac21c54669dac86fb",
                "filename": "core/src/main/java/brooklyn/location/basic/SshMachineLocation.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8039a827ab7b063674ceddf5f4be679e1d32ca5c/core/src/main/java/brooklyn/location/basic/SshMachineLocation.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8039a827ab7b063674ceddf5f4be679e1d32ca5c/core/src/main/java/brooklyn/location/basic/SshMachineLocation.java",
                "status": "modified",
                "changes": 12,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/SshMachineLocation.java?ref=8039a827ab7b063674ceddf5f4be679e1d32ca5c",
                "patch": "@@ -345,10 +345,12 @@ public void init() {\n     \n     @Override\n     public void close() throws IOException {\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"{} invalidating all entries in ssh pool cache. Final stats: {}\", this, sshPoolCache.stats());\n+        if (sshPoolCache != null) {\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"{} invalidating all entries in ssh pool cache. Final stats: {}\", this, sshPoolCache.stats());\n+            }\n+            sshPoolCache.invalidateAll();\n         }\n-        sshPoolCache.invalidateAll();\n         if (cleanupTask != null) cleanupTask.cancel(false);\n     }\n \n@@ -389,6 +391,10 @@ public int getPort() {\n     }\n \n     protected <T> T execSsh(Map<String, ?> props, Function<ShellTool, T> task) {\n+        if (sshPoolCache == null) {\n+            // required for uses that instantiate SshMachineLocation directly, so init() will not have been called\n+            sshPoolCache = buildSshToolPoolCacheLoader();\n+        }\n         Pool<SshTool> pool = sshPoolCache.getUnchecked(props);\n         if (LOG.isTraceEnabled()) {\n             LOG.trace(\"{} execSsh got pool: {}\", this, pool);",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "JcloudsLocation: support unsetting config\n\n- if set null loginUser, loginUserPassword, etc then don't pass it\n  through to jclouds (i.e. don't NPE)",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/d3a19f2fe5dbc831addd8a8b111f05df5adfec83",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/aca2764da3e3001c86d302a903cd48bfab46597a",
        "bug_id": "incubator-brooklyn_95",
        "file": [
            {
                "sha": "dc20f471bd6dc48659e17878e72b700e8b39ba9a",
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/d3a19f2fe5dbc831addd8a8b111f05df5adfec83/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/d3a19f2fe5dbc831addd8a8b111f05df5adfec83/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "status": "modified",
                "changes": 30,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java?ref=d3a19f2fe5dbc831addd8a8b111f05df5adfec83",
                "patch": "@@ -580,27 +580,35 @@ public void apply(TemplateOptions t, ConfigBag props, Object v) {\n                     }})\n             .put(LOGIN_USER, new CustomizeTemplateOptions() {\n                     public void apply(TemplateOptions t, ConfigBag props, Object v) {\n-                        t.overrideLoginUser(((CharSequence)v).toString());\n+                        if (v != null) {\n+                            t.overrideLoginUser(((CharSequence)v).toString());\n+                        }\n                     }})\n             .put(LOGIN_USER_PASSWORD, new CustomizeTemplateOptions() {\n                     public void apply(TemplateOptions t, ConfigBag props, Object v) {\n-                        t.overrideLoginPassword(((CharSequence)v).toString());\n+                        if (v != null) {\n+                            t.overrideLoginPassword(((CharSequence)v).toString());\n+                        }\n                     }})\n             .put(LOGIN_USER_PRIVATE_KEY_FILE, new CustomizeTemplateOptions() {\n                     public void apply(TemplateOptions t, ConfigBag props, Object v) {\n-                        String privateKeyFileName = ((CharSequence)v).toString();\n-                        String privateKey;\n-                        try {\n-                            privateKey = Files.toString(new File(ResourceUtils.tidyFilePath(privateKeyFileName)), Charsets.UTF_8);\n-                        } catch (IOException e) {\n-                            LOG.error(privateKeyFileName + \"not found\", e);\n-                            throw Exceptions.propagate(e);\n+                        if (v != null) {\n+                            String privateKeyFileName = ((CharSequence)v).toString();\n+                            String privateKey;\n+                            try {\n+                                privateKey = Files.toString(new File(ResourceUtils.tidyFilePath(privateKeyFileName)), Charsets.UTF_8);\n+                            } catch (IOException e) {\n+                                LOG.error(privateKeyFileName + \"not found\", e);\n+                                throw Exceptions.propagate(e);\n+                            }\n+                            t.overrideLoginPrivateKey(privateKey);\n                         }\n-                        t.overrideLoginPrivateKey(privateKey);\n                     }})\n             .put(LOGIN_USER_PRIVATE_KEY_DATA, new CustomizeTemplateOptions() {\n                     public void apply(TemplateOptions t, ConfigBag props, Object v) {\n-                        t.overrideLoginPrivateKey(((CharSequence)v).toString());\n+                        if (v != null) {\n+                            t.overrideLoginPrivateKey(((CharSequence)v).toString());\n+                        }\n                     }})                    \n             .put(KEY_PAIR, new CustomizeTemplateOptions() {\n                     public void apply(TemplateOptions t, ConfigBag props, Object v) {",
                "deletions": 11
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "don't throw NPE when named location refers to another (causing locations in catalog to fail), and extend unit test to trap this error",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/c7a7c9d1d28b0947b4482f7e4b1345b4ceb6dfea",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/a8e49d2a82f7ebf09ce50f958f2edc22f4b90082",
        "bug_id": "incubator-brooklyn_96",
        "file": [
            {
                "sha": "6330104e7bd0e3f9df3615bd5bdf7821d731455e",
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsPropertiesFromBrooklynProperties.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/c7a7c9d1d28b0947b4482f7e4b1345b4ceb6dfea/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsPropertiesFromBrooklynProperties.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/c7a7c9d1d28b0947b4482f7e4b1345b4ceb6dfea/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsPropertiesFromBrooklynProperties.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsPropertiesFromBrooklynProperties.java?ref=c7a7c9d1d28b0947b4482f7e4b1345b4ceb6dfea",
                "patch": "@@ -80,7 +80,9 @@\n     private static String getProviderName(String providerOrApi, String locationName, Map<String, Object> properties) {\n         String provider = providerOrApi;\n         if(!Strings.isNullOrEmpty(locationName)) {\n-            provider = getProviderFromNamedProperty(locationName, properties);\n+            String providerDefinition = (String) properties.get(String.format(\"brooklyn.location.named.%s\", locationName));\n+            if (providerDefinition!=null)\n+                provider = getProviderFromDefinition(providerDefinition);\n         }\n         return provider;\n     }\n@@ -105,8 +107,8 @@ private static String getProviderName(String providerOrApi, String locationName,\n         return ConfigUtils.filterForPrefixAndStrip(properties, prefix).asMapWithStringKeys();\n     }\n \n-    private static String getProviderFromNamedProperty(String locationName, Map<String, Object> properties) {\n-        return Iterables.get(Splitter.on(\":\").split((String) properties.get(String.format(\"brooklyn.location.named.%s\", locationName))), 1);\n+    private static String getProviderFromDefinition(String definition) {\n+        return Iterables.get(Splitter.on(\":\").split(definition), 1);\n     }\n \n     private static void warnOfDeprecated(Map<String, Object> properties) {",
                "deletions": 3
            },
            {
                "sha": "6ba9a8d247de426579f26da34c387ac716a71ffe",
                "filename": "usage/rest-server/src/test/java/brooklyn/rest/resources/LocationResourceTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/c7a7c9d1d28b0947b4482f7e4b1345b4ceb6dfea/usage/rest-server/src/test/java/brooklyn/rest/resources/LocationResourceTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/c7a7c9d1d28b0947b4482f7e4b1345b4ceb6dfea/usage/rest-server/src/test/java/brooklyn/rest/resources/LocationResourceTest.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/rest-server/src/test/java/brooklyn/rest/resources/LocationResourceTest.java?ref=c7a7c9d1d28b0947b4482f7e4b1345b4ceb6dfea",
                "patch": "@@ -11,16 +11,16 @@\n import javax.annotation.Nullable;\n import javax.ws.rs.core.Response;\n \n-import brooklyn.test.Asserts;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.testng.Assert;\n import org.testng.annotations.Test;\n \n+import brooklyn.location.jclouds.JcloudsLocation;\n import brooklyn.rest.domain.LocationSpec;\n import brooklyn.rest.domain.LocationSummary;\n import brooklyn.rest.testing.BrooklynRestResourceTest;\n-import brooklyn.test.TestUtils;\n+import brooklyn.test.Asserts;\n \n import com.google.common.base.Predicate;\n import com.google.common.collect.ImmutableMap;\n@@ -57,6 +57,9 @@ public void testAddNewLocation() {\n     assertThat(location.getConfig().get(\"identity\"), is(\"bob\"));\n     assertFalse(location.getConfig().containsKey(\"CR3dential\"));\n     Assert.assertTrue(addedLocationUri.toString().startsWith(\"/v1/locations/\"));\n+    \n+    JcloudsLocation l = (JcloudsLocation) getManagementContext().getLocationRegistry().resolve(location.getId());\n+    Assert.assertEquals(l.getProvider(), \"aws-ec2\");\n   }\n \n   @Test(dependsOnMethods={\"testAddNewLocation\"})",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Fixes BrooklynMetricsTest non-deterministic failures\n\nFailed once with NPE because NUM_SUBSCRIPTIONS sensor hadn't\nbeen set yet, so couldn't cast value to long.",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/e2fa1ad648bfdee814b6a37bd207cde99d6690e8",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/825155f2cde5bd320d68bc48b3b5a6b259cd41c4",
        "bug_id": "incubator-brooklyn_97",
        "file": [
            {
                "sha": "a52359e969bc0c6eca9595376bae2ec0df309b6a",
                "filename": "policy/src/test/java/brooklyn/entity/brooklyn/BrooklynMetricsTest.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/e2fa1ad648bfdee814b6a37bd207cde99d6690e8/policy/src/test/java/brooklyn/entity/brooklyn/BrooklynMetricsTest.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/e2fa1ad648bfdee814b6a37bd207cde99d6690e8/policy/src/test/java/brooklyn/entity/brooklyn/BrooklynMetricsTest.groovy",
                "status": "modified",
                "changes": 18,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/policy/src/test/java/brooklyn/entity/brooklyn/BrooklynMetricsTest.groovy?ref=e2fa1ad648bfdee814b6a37bd207cde99d6690e8",
                "patch": "@@ -6,6 +6,8 @@ import static org.testng.Assert.*\n import org.testng.annotations.BeforeMethod\n import org.testng.annotations.Test\n \n+import brooklyn.entity.Entity\n+import brooklyn.event.AttributeSensor\n import brooklyn.event.SensorEventListener\n import brooklyn.location.basic.SimulatedLocation\n import brooklyn.test.entity.TestApplication\n@@ -50,11 +52,12 @@ class BrooklynMetricsTest {\n             assertEquals(brooklynMetrics.getAttribute(BrooklynMetrics.TOTAL_EFFECTORS_INVOKED), 2) // for app and testEntity's start\n         }\n \n-        long effsInvoked = brooklynMetrics.getAttribute(BrooklynMetrics.TOTAL_EFFECTORS_INVOKED)\n-        long tasksSubmitted = brooklynMetrics.getAttribute(BrooklynMetrics.TOTAL_TASKS_SUBMITTED)\n-        long eventsPublished = brooklynMetrics.getAttribute(BrooklynMetrics.TOTAL_EVENTS_PUBLISHED)\n-        long eventsDelivered = brooklynMetrics.getAttribute(BrooklynMetrics.TOTAL_EVENTS_DELIVERED)\n-        long subscriptions = brooklynMetrics.getAttribute(BrooklynMetrics.NUM_SUBSCRIPTIONS)\n+        // Note if attribute has not yet been set, the value returned could be null\n+        long effsInvoked = getAttribute(brooklynMetrics, BrooklynMetrics.TOTAL_EFFECTORS_INVOKED, 0);\n+        long tasksSubmitted = getAttribute(brooklynMetrics, BrooklynMetrics.TOTAL_TASKS_SUBMITTED, 0);\n+        long eventsPublished = getAttribute(brooklynMetrics, BrooklynMetrics.TOTAL_EVENTS_PUBLISHED, 0);\n+        long eventsDelivered = getAttribute(brooklynMetrics, BrooklynMetrics.TOTAL_EVENTS_DELIVERED, 0);\n+        long subscriptions = getAttribute(brooklynMetrics, BrooklynMetrics.NUM_SUBSCRIPTIONS, 0);\n \n         // Invoking an effector increments effector/task count\n         e.myEffector()\n@@ -75,4 +78,9 @@ class BrooklynMetricsTest {\n             assertEquals(brooklynMetrics.getAttribute(BrooklynMetrics.NUM_SUBSCRIPTIONS), 1)\n         }\n     }\n+    \n+    private long getAttribute(Entity entity, AttributeSensor<Long> attribute, long defaultVal) {\n+        Long result = entity.getAttribute(attribute);\n+        return (result != null) ? result : defaultVal;\n+    }\n }",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Sshj: gracefully handle null env variables\n\nlog.warn and ignore environment variable that has null key or value.\nPreviously, it NPE'ed so command wasn't executed.",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/40c750bfc92595cc331e5dfbef8eb245c5c1f24b",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/9a4b86a912c96d6d716064a41f4e1de4398e07b5",
        "bug_id": "incubator-brooklyn_98",
        "file": [
            {
                "sha": "462e69522494a14934970246d7923215305d136c",
                "filename": "core/src/main/java/brooklyn/util/internal/ssh/SshjTool.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/40c750bfc92595cc331e5dfbef8eb245c5c1f24b/core/src/main/java/brooklyn/util/internal/ssh/SshjTool.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/40c750bfc92595cc331e5dfbef8eb245c5c1f24b/core/src/main/java/brooklyn/util/internal/ssh/SshjTool.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/util/internal/ssh/SshjTool.java?ref=40c750bfc92595cc331e5dfbef8eb245c5c1f24b",
                "patch": "@@ -456,6 +456,10 @@ private String toScript(List<String> commands, Map<String,?> env) {\n         List<String> result = new ArrayList<String>(env.size()+commands.size());\n         \n         for (Entry<String,?> entry : env.entrySet()) {\n+            if (entry.getKey() == null || entry.getValue() == null) {\n+                LOG.warn(\"env key-values must not be null; ignoring: key=\"+entry.getKey()+\"; value=\"+entry.getValue());\n+                continue;\n+            }\n             String escapedVal = StringEscapeUtils.escapeLiteralForDoubleQuotedBash(entry.getValue().toString());\n             result.add(\"export \"+entry.getKey()+\"=\\\"\"+escapedVal+\"\\\"\");\n         }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "fix misc errors during hot standby (access to unavailable methods, clearing more things on location unmanagement) and after rebind (NPE in SshMachineLocation), and fix sensor logic bug in tomcat",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/a4e7741f9658d1117329668cd1ff4581cb5bd32f",
        "bug_id": "incubator-brooklyn_99",
        "file": [
            {
                "sha": "3ca2d544f27be373b78031ad3754d0d51ee133ca",
                "filename": "core/src/main/java/brooklyn/entity/basic/EntityTransientCopyInternal.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/core/src/main/java/brooklyn/entity/basic/EntityTransientCopyInternal.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/core/src/main/java/brooklyn/entity/basic/EntityTransientCopyInternal.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/basic/EntityTransientCopyInternal.java?ref=df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2",
                "patch": "@@ -37,6 +37,7 @@\n import brooklyn.entity.rebind.RebindSupport;\n import brooklyn.event.AttributeSensor;\n import brooklyn.location.Location;\n+import brooklyn.management.ExecutionContext;\n import brooklyn.management.ManagementContext;\n import brooklyn.management.internal.EntityManagementSupport;\n import brooklyn.mementos.EntityMemento;\n@@ -102,5 +103,7 @@\n     Effector<?> getEffector(String effectorName);\n     FeedSupport getFeedSupport();\n     RebindSupport<EntityMemento> getRebindSupport();\n+    // for REST calls on read-only entities which want to resolve values\n+    ExecutionContext getExecutionContext();\n     \n }",
                "deletions": 0
            },
            {
                "sha": "113fb67e84bf0683ecf407367cc4a0db487630e5",
                "filename": "core/src/main/java/brooklyn/location/basic/LocalhostMachineProvisioningLocation.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/core/src/main/java/brooklyn/location/basic/LocalhostMachineProvisioningLocation.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/core/src/main/java/brooklyn/location/basic/LocalhostMachineProvisioningLocation.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/LocalhostMachineProvisioningLocation.java?ref=df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2",
                "patch": "@@ -256,6 +256,11 @@ public LocalhostMachine(Map properties) {\n             super(MutableMap.builder().putAll(properties).put(\"mutexSupport\", mutexSupport).build());\n         }\n         \n+        @Override\n+        protected WithMutexes getMutexSupport() {\n+            return mutexSupport;\n+        }\n+        \n         public boolean obtainSpecificPort(int portNumber) {\n             if (!isSudoAllowed() && portNumber <= 1024)\n                 return false;",
                "deletions": 0
            },
            {
                "sha": "2bf81f967c41aca4fb9428e9b98727707f030109",
                "filename": "core/src/main/java/brooklyn/location/basic/SshMachineLocation.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/core/src/main/java/brooklyn/location/basic/SshMachineLocation.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/core/src/main/java/brooklyn/location/basic/SshMachineLocation.java",
                "status": "modified",
                "changes": 28,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/SshMachineLocation.java?ref=df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2",
                "patch": "@@ -140,8 +140,11 @@\n     @SetFromFlag(nullable = false)\n     protected InetAddress address;\n \n+    // TODO should not allow this to be set from flag; it is not persisted so that will be lost\n+    // (mainly used for localhost currently so not a big problem)\n+    @Nullable  // lazily initialized; use getMutexSupport()\n     @SetFromFlag\n-    protected transient WithMutexes mutexSupport;\n+    private transient WithMutexes mutexSupport;\n \n     @SetFromFlag\n     private Set<Integer> usedPorts;\n@@ -336,10 +339,6 @@ public SshMachineLocation configure(Map properties) {\n         // TODO Note that check for addresss!=null is done automatically in super-constructor, in FlagUtils.checkRequiredFields\n         // Yikes, dangerous code for accessing fields of sub-class in super-class' constructor! But getting away with it so far!\n \n-        if (mutexSupport == null) {\n-            mutexSupport = new MutexSupport();\n-        }\n-\n         boolean deferConstructionChecks = (properties.containsKey(\"deferConstructionChecks\") && TypeCoercions.coerce(properties.get(\"deferConstructionChecks\"), Boolean.class));\n         if (!deferConstructionChecks) {\n             if (getDisplayName() == null) {\n@@ -349,6 +348,17 @@ public SshMachineLocation configure(Map properties) {\n         return this;\n     }\n     \n+    private transient final Object mutexSupportCreationLock = new Object();\n+    protected WithMutexes getMutexSupport() {\n+        synchronized (mutexSupportCreationLock) {\n+            // create on demand so that it is not null after serialization\n+            if (mutexSupport == null) {\n+                mutexSupport = new MutexSupport();\n+            }\n+            return mutexSupport;\n+        }\n+    }\n+    \n     protected void addSshPoolCacheCleanupTask() {\n         if (cleanupTask!=null && !cleanupTask.isDone()) {\n             return;\n@@ -895,25 +905,25 @@ protected MachineDetails inferMachineDetails() {\n     @Override\n     public void acquireMutex(String mutexId, String description) throws RuntimeInterruptedException {\n         try {\n-            mutexSupport.acquireMutex(mutexId, description);\n+            getMutexSupport().acquireMutex(mutexId, description);\n         } catch (InterruptedException ie) {\n             throw new RuntimeInterruptedException(\"Interrupted waiting for mutex: \" + mutexId, ie);\n         }\n     }\n \n     @Override\n     public boolean tryAcquireMutex(String mutexId, String description) {\n-        return mutexSupport.tryAcquireMutex(mutexId, description);\n+        return getMutexSupport().tryAcquireMutex(mutexId, description);\n     }\n \n     @Override\n     public void releaseMutex(String mutexId) {\n-        mutexSupport.releaseMutex(mutexId);\n+        getMutexSupport().releaseMutex(mutexId);\n     }\n \n     @Override\n     public boolean hasMutex(String mutexId) {\n-        return mutexSupport.hasMutex(mutexId);\n+        return getMutexSupport().hasMutex(mutexId);\n     }\n \n     //We want the SshMachineLocation to be serializable and therefore the pool needs to be dealt with correctly.",
                "deletions": 9
            },
            {
                "sha": "f1da1142c0d0ac3b38b9fc5608a1d3863a4fa44c",
                "filename": "core/src/main/java/brooklyn/management/internal/LocalLocationManager.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/core/src/main/java/brooklyn/management/internal/LocalLocationManager.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/core/src/main/java/brooklyn/management/internal/LocalLocationManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/management/internal/LocalLocationManager.java?ref=df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2",
                "patch": "@@ -376,7 +376,7 @@ private synchronized void unmanageNonRecursiveOnlyClearItsFields(Location loc, M\n             // if not destroying, don't change the parent's children list\n             ((AbstractLocation)loc).setParent(null, false);\n         }\n-        // clear config to help with GC\n+        // clear config to help with GC; i know you're not supposed to, but this seems to help, else config bag is littered with refs to entities etc\n         ((AbstractLocation)loc).getLocalConfigBag().clear();\n     }\n     ",
                "deletions": 1
            },
            {
                "sha": "5bc9204bd8e0058b4b209a3398238b1172594621",
                "filename": "software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java?ref=df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2",
                "patch": "@@ -70,7 +70,7 @@ public void connectSensors() {\n                     .pollAttribute(new JmxAttributePollConfig<String>(CONNECTOR_STATUS)\n                             .objectName(connectorMbeanName)\n                             .attributeName(\"stateName\"))\n-                    .pollAttribute(new JmxAttributePollConfig<Boolean>(SERVICE_UP)\n+                    .pollAttribute(new JmxAttributePollConfig<Boolean>(SERVICE_PROCESS_IS_RUNNING)\n                             .objectName(connectorMbeanName)\n                             .attributeName(\"stateName\")\n                             .onSuccess(Functions.forPredicate(Predicates.<Object>equalTo(\"STARTED\")))",
                "deletions": 1
            },
            {
                "sha": "6b9be050698f67898fd2cfc1afce7a72faabce22",
                "filename": "usage/rest-server/src/main/java/brooklyn/rest/resources/ApplicationResource.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/usage/rest-server/src/main/java/brooklyn/rest/resources/ApplicationResource.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/usage/rest-server/src/main/java/brooklyn/rest/resources/ApplicationResource.java",
                "status": "modified",
                "changes": 9,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/rest-server/src/main/java/brooklyn/rest/resources/ApplicationResource.java?ref=df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2",
                "patch": "@@ -47,6 +47,7 @@\n import brooklyn.entity.Application;\n import brooklyn.entity.Entity;\n import brooklyn.entity.Group;\n+import brooklyn.entity.basic.AbstractGroup;\n import brooklyn.entity.basic.Attributes;\n import brooklyn.entity.basic.Lifecycle;\n import brooklyn.entity.trait.Startable;\n@@ -144,8 +145,12 @@ private JsonNode fromEntity(Entity entity) {\n         if (!entity.getChildren().isEmpty())\n             aRoot.put(\"children\", entitiesIdAndNameAsArray(entity.getChildren()));\n \n-        if ((entity instanceof Group) && !((Group) entity).getMembers().isEmpty())\n-            aRoot.put(\"members\", entitiesIdAndNameAsArray(((Group) entity).getMembers()));\n+        if (entity instanceof Group) {\n+            // use attribute instead of method in case it is read-only\n+            Collection<Entity> members = entity.getAttribute(AbstractGroup.GROUP_MEMBERS);\n+            if (members!=null && !members.isEmpty())\n+                aRoot.put(\"members\", entitiesIdAndNameAsArray(members));\n+        }\n \n         return aRoot;\n     }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "improve display of task results, catch NPE when switching task contexts, and ensure data is cleared (nulled) for old map entries due to backbone bug (without this, sometimes blockingTask might show up as `TYPEOF undefined` when you inspect its JSON)",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/bbfbd37608bc76ceb00db96f83168b65a9973ca0",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/931d3970ea95cd283d98a873cc9adfc384c94bc0",
        "bug_id": "incubator-brooklyn_100",
        "file": [
            {
                "sha": "afc3549d575dd5a4257061d50e820c6c8cdc91e1",
                "filename": "usage/jsgui/src/main/webapp/assets/js/model/task-summary.js",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/bbfbd37608bc76ceb00db96f83168b65a9973ca0/usage/jsgui/src/main/webapp/assets/js/model/task-summary.js",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/bbfbd37608bc76ceb00db96f83168b65a9973ca0/usage/jsgui/src/main/webapp/assets/js/model/task-summary.js",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/jsgui/src/main/webapp/assets/js/model/task-summary.js?ref=bbfbd37608bc76ceb00db96f83168b65a9973ca0",
                "patch": "@@ -65,7 +65,7 @@ define([\n         parse: function(resp) {\n             _.keys(this.attributes).forEach(function(key) {\n               if (resp[key] === undefined) {\n-                resp[key] = undefined;\n+                resp[key] = null;\n               }\n             });\n ",
                "deletions": 1
            },
            {
                "sha": "df98a77d778ee1e07aea0812e91c7396680ee772",
                "filename": "usage/jsgui/src/main/webapp/assets/js/view/activity-details.js",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/bbfbd37608bc76ceb00db96f83168b65a9973ca0/usage/jsgui/src/main/webapp/assets/js/view/activity-details.js",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/bbfbd37608bc76ceb00db96f83168b65a9973ca0/usage/jsgui/src/main/webapp/assets/js/view/activity-details.js",
                "status": "modified",
                "changes": 12,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/jsgui/src/main/webapp/assets/js/view/activity-details.js?ref=bbfbd37608bc76ceb00db96f83168b65a9973ca0",
                "patch": "@@ -146,10 +146,14 @@ define([\n                         that.displayTextForLinkedTask(v)+\"</a>\" })\n             this.updateFieldWith('result',\n                 function(v) {\n-                    if (v.toString().length<20 &&  !/\\r|\\n/.exec(v)) {\n-                        return \" with result: <span class='result-literal'>\"+_.escape(v)+\"</span>\";\n+                    // use display string (JSON.stringify(_.escape(v)) because otherwise list of [null,null] is just \",\"  \n+                    var vs = Util.toDisplayString(v);\n+                    if (vs.trim().length==0) {\n+                        return \" (empty result)\";\n+                    } else if (vs.length<20 &&  !/\\r|\\n/.exec(v)) {\n+                        return \" with result: <span class='result-literal'>\"+vs+\"</span>\";\n                     } else {\n-                        return \"<div class='result-literal'>\"+_.escape(v).replace(/\\n+/g,\"<br>\")+\"</div>\"\n+                        return \"<div class='result-literal'>\"+vs.replace(/\\n+/g,\"<br>\")+\"</div>\"\n                     }\n                  })\n             this.updateFieldWith('tags', function(tags) {\n@@ -276,7 +280,7 @@ define([\n             }\n             ViewUtils.updateMyDataTable(this.subtasksTable, subtasks, function(task, index) {\n                 return [ task.get(\"id\"),\n-                         (task.get(\"entityId\") && task.get(\"entityId\")!=that.task.get(\"entityId\") ? task.get(\"entityDisplayName\") + \": \" : \"\") + \n+                         (task.get(\"entityId\") && (!that.task || task.get(\"entityId\")!=that.task.get(\"entityId\")) ? task.get(\"entityDisplayName\") + \": \" : \"\") + \n                          task.get(\"displayName\"),\n                          task.get(\"submitTimeUtc\") <= 0 ? \"-\" : moment(task.get(\"submitTimeUtc\")).calendar(),\n                          task.get(\"currentStatus\")",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Fix integration tests\n\n- NginxUrlMapping: test webapp changed, so writes out original url rather\n  than url-mapping id\n- Fix ElasticJavaWebAppServiceIntegrationTest\n- Avoid NPE in ReflectionScanner if class can't be found\n- fix RabbitSshDriver imports",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/a88e2d219338e4f0e396c99deae6a9ea98580b95",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/6ee9282d8e1b4b84ed339ffe1e058d9e71c0cba1",
        "bug_id": "incubator-brooklyn_101",
        "file": [
            {
                "sha": "518e51f67ff9beb6c5db31d9bea046898b3c715e",
                "filename": "core/src/main/java/brooklyn/util/javalang/ReflectionScanner.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/a88e2d219338e4f0e396c99deae6a9ea98580b95/core/src/main/java/brooklyn/util/javalang/ReflectionScanner.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/a88e2d219338e4f0e396c99deae6a9ea98580b95/core/src/main/java/brooklyn/util/javalang/ReflectionScanner.java",
                "status": "modified",
                "changes": 9,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/util/javalang/ReflectionScanner.java?ref=a88e2d219338e4f0e396c99deae6a9ea98580b95",
                "patch": "@@ -76,9 +76,14 @@ public ReflectionScanner(final ClassLoader classLoaderToSearch, final ClassLoade\n         for (String className : subTypes) {\n             //noinspection unchecked\n             try {\n-                result.add((Class<? extends T>) loadClass(className));\n+                Class<? extends T> subClazz = (Class<? extends T>) loadClass(className);\n+                if (subClazz != null) {\n+                    result.add(subClazz);\n+                } else {\n+                    log.warn(\"Unable to instantiate '\"+className+\"' (sub-type of \"+type+\")\");\n+                }\n             } catch (Throwable e) {\n-                log.warn(\"Unable to instantiate '\"+className+\"': \"+e);\n+                log.warn(\"Unable to instantiate '\"+className+\"' (sub-type of \"+type+\"): \"+e);\n             }\n         }\n         return ImmutableSet.copyOf(result);",
                "deletions": 2
            },
            {
                "sha": "12a95355135a00566f87c50147f92fdd7504603d",
                "filename": "software/messaging/src/main/java/brooklyn/entity/messaging/rabbit/RabbitSshDriver.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/a88e2d219338e4f0e396c99deae6a9ea98580b95/software/messaging/src/main/java/brooklyn/entity/messaging/rabbit/RabbitSshDriver.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/a88e2d219338e4f0e396c99deae6a9ea98580b95/software/messaging/src/main/java/brooklyn/entity/messaging/rabbit/RabbitSshDriver.groovy",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/messaging/src/main/java/brooklyn/entity/messaging/rabbit/RabbitSshDriver.groovy?ref=a88e2d219338e4f0e396c99deae6a9ea98580b95",
                "patch": "@@ -1,15 +1,19 @@\n package brooklyn.entity.messaging.rabbit;\n \n+import static java.lang.String.format;\n import static brooklyn.entity.basic.lifecycle.CommonCommands.*\n \n import org.slf4j.Logger\n import org.slf4j.LoggerFactory\n \n import brooklyn.entity.basic.AbstractSoftwareProcessSshDriver\n+import brooklyn.entity.basic.lifecycle.CommonCommands\n import brooklyn.entity.messaging.amqp.AmqpServer\n import brooklyn.location.basic.SshMachineLocation\n import brooklyn.util.NetworkUtils\n \n+import com.google.common.collect.ImmutableList\n+\n /**\n  * TODO javadoc\n  */\n@@ -35,7 +39,7 @@ public class RabbitSshDriver extends AbstractSoftwareProcessSshDriver implements\n         String url = \"http://www.rabbitmq.com/releases/rabbitmq-server/v${version}/rabbitmq-server-generic-unix-${version}.tar.gz\";\n         String saveAs = \"rabbitmq-server-generic-unix-${version}.tar.gz\";\n \n-        List<String> commands = ImmutableList.builder()\n+        List<String> commands = ImmutableList.<String>builder()\n                 .add(installPackage(\"erlang\", // NOTE only 'port' states the version of Erlang used, maybe remove this constraint?\n                         apt:\"erlang-nox erlang-dev\",\n                         port:\"erlang@${erlangVersion}+ssl\"))",
                "deletions": 1
            },
            {
                "sha": "18934137c6cc8718afa4fea77bf88d54ff6a785f",
                "filename": "software/webapp/src/test/java/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/a88e2d219338e4f0e396c99deae6a9ea98580b95/software/webapp/src/test/java/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/a88e2d219338e4f0e396c99deae6a9ea98580b95/software/webapp/src/test/java/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.groovy",
                "status": "modified",
                "changes": 22,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/webapp/src/test/java/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.groovy?ref=a88e2d219338e4f0e396c99deae6a9ea98580b95",
                "patch": "@@ -122,19 +122,19 @@ public class NginxUrlMappingIntegrationTest {\n             for (int i = 0; i < 2; i++) {\n                 assertUrlHasText(\"http://localhost1:${port}\", \"Hello\");\n                 assertUrlHasText(\"http://localhost1:${port}/\", \"Hello\");\n-                assertUrlHasText(\"http://localhost1:${port}/hello/frank\", \"http://\"+u0.id+\"/hello/frank\");\n+                assertUrlHasText(\"http://localhost1:${port}/hello/frank\", \"http://localhost1:${port}/hello/frank\");\n             }\n             //cluster 1\n             for (int i = 0; i < 2; i++) {\n                 assertUrlHasText(\"http://localhost2:${port}/hello-world\", \"Hello\");\n                 assertUrlHasText(\"http://localhost2:${port}/hello-world/\", \"Hello\");\n-                assertUrlHasText(\"http://localhost2:${port}/hello-world/hello/bob\", \"http://\"+u1.id+\"/hello-world/hello/bob\");\n+                assertUrlHasText(\"http://localhost2:${port}/hello-world/hello/bob\", \"http://localhost2:${port}/hello-world/hello/bob\");\n             }\n             //cluster 2\n             for (int i = 0; i < 2; i++) {\n                 assertUrlHasText(\"http://localhost3:${port}/c2\", \"Hello\");\n                 assertUrlHasText(\"http://localhost3:${port}/c2/\", \"Hello\");\n-                assertUrlHasText(\"http://localhost3:${port}/c2/hello/joe\", \"http://\"+u2.id+\"/c2/hello/new%20joe\");\n+                assertUrlHasText(\"http://localhost3:${port}/c2/hello/joe\", \"http://localhost3:${port}/c2/hello/new%20joe\");\n             }\n         }\n         \n@@ -273,24 +273,24 @@ public class NginxUrlMappingIntegrationTest {\n         executeUntilSucceeds {\n             // health check\n             assertUrlHasText(\"http://localhost1:${port}\", \"Hello\");\n-            assertUrlHasText(\"http://localhost1:${port}/hello/frank\", \"http://\"+u0.id+\"/hello/frank\");\n+            assertUrlHasText(\"http://localhost1:${port}/hello/frank\", \"http://localhost1:${port}/hello/frank\");\n             \n             // goodbye rewritten to hello\n-            assertUrlHasText(\"http://localhost1:${port}/goodbye/frank\", \"http://\"+u0.id+\"/hello/frank\");\n+            assertUrlHasText(\"http://localhost1:${port}/goodbye/frank\", \"http://localhost1:${port}/hello/frank\");\n             // hello al rewritten to hello Big Al\n-            assertUrlHasText(\"http://localhost1:${port}/hello/aled\", \"http://\"+u0.id+\"/hello/Big%20Aled\");\n+            assertUrlHasText(\"http://localhost1:${port}/hello/aled\", \"http://localhost1:${port}/hello/Big%20Aled\");\n             // hello andrew rewritten to hello Sir Andrew\n-            assertUrlHasText(\"http://localhost1:${port}/hello/andrew\", \"http://\"+u0.id+\"/hello/Sir%20Andrew\");\n+            assertUrlHasText(\"http://localhost1:${port}/hello/andrew\", \"http://localhost1:${port}/hello/Sir%20Andrew\");\n             \n             // goodbye alex rewritten to hello Big Alex (two rewrites)\n-            assertUrlHasText(\"http://localhost1:${port}/goodbye/alex\", \"http://\"+u0.id+\"/hello/Big%20Alex\");\n+            assertUrlHasText(\"http://localhost1:${port}/goodbye/alex\", \"http://localhost1:${port}/hello/Big%20Alex\");\n             // but goodbye andrew rewritten only to hello Andrew -- test the \"break\" logic above (won't continue rewriting)\n-            assertUrlHasText(\"http://localhost1:${port}/goodbye/andrew\", \"http://\"+u0.id+\"/hello/andrew\");\n+            assertUrlHasText(\"http://localhost1:${port}/goodbye/andrew\", \"http://localhost1:${port}/hello/andrew\");\n             \n             // al rewrite can be anywhere\n-            assertUrlHasText(\"http://localhost1:${port}/hello/hello/alex\", \"http://\"+u0.id+\"/hello/hello/Big%20Alex\");\n+            assertUrlHasText(\"http://localhost1:${port}/hello/hello/alex\", \"http://localhost1:${port}/hello/hello/Big%20Alex\");\n             // but an rewrite must be at beginning\n-            assertUrlHasText(\"http://localhost1:${port}/hello/hello/andrew\", \"http://\"+u0.id+\"/hello/hello/andrew\");\n+            assertUrlHasText(\"http://localhost1:${port}/hello/hello/andrew\", \"http://localhost1:${port}/hello/hello/andrew\");\n         }\n     }\n     ",
                "deletions": 11
            },
            {
                "sha": "931b1e193efeefb1d236049d67ae39690b376a59",
                "filename": "software/webapp/src/test/java/brooklyn/entity/webapp/ElasticJavaWebAppServiceIntegrationTest.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/a88e2d219338e4f0e396c99deae6a9ea98580b95/software/webapp/src/test/java/brooklyn/entity/webapp/ElasticJavaWebAppServiceIntegrationTest.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/a88e2d219338e4f0e396c99deae6a9ea98580b95/software/webapp/src/test/java/brooklyn/entity/webapp/ElasticJavaWebAppServiceIntegrationTest.groovy",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/webapp/src/test/java/brooklyn/entity/webapp/ElasticJavaWebAppServiceIntegrationTest.groovy?ref=a88e2d219338e4f0e396c99deae6a9ea98580b95",
                "patch": "@@ -33,6 +33,6 @@ public class ElasticJavaWebAppServiceIntegrationTest {\n         app.start([new LocalhostMachineProvisioningLocation()]);\n         String url = svc.getAttribute(ElasticJavaWebAppService.ROOT_URL);\n         Assert.assertNotNull(url);\n-        HttpTestUtils.assertContentContainsText(url, \"Hello\");\n+        HttpTestUtils.assertContentEventuallyContainsText(url, \"Hello\");\n     }\n }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "BrooklynYamlLocationResolver: don\u2019t swallow exception\n\nPreviously inresolveLocation() we were just getting the \u201ccollapseText\u201d\nof the exception in the thrown toString, rather than having the\ncause set. This meant that the underlying cause (e.g. of an NPE etc)\nwas never being logged.\n\nInstead, set the cause when throwing the the IllegalStateException,\nas well as having the nice toString.",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/43beb54c29a093e0c96268c1a9fd6ca16101a231",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/7fd92be51e3cd1e791d4a7060610399d77ac1713",
        "bug_id": "incubator-brooklyn_102",
        "file": [
            {
                "sha": "3495687e7f78210be664b1090ad5ae41d0036a90",
                "filename": "usage/camp/src/main/java/io/brooklyn/camp/brooklyn/spi/creation/BrooklynYamlLocationResolver.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/43beb54c29a093e0c96268c1a9fd6ca16101a231/usage/camp/src/main/java/io/brooklyn/camp/brooklyn/spi/creation/BrooklynYamlLocationResolver.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/43beb54c29a093e0c96268c1a9fd6ca16101a231/usage/camp/src/main/java/io/brooklyn/camp/brooklyn/spi/creation/BrooklynYamlLocationResolver.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/camp/src/main/java/io/brooklyn/camp/brooklyn/spi/creation/BrooklynYamlLocationResolver.java?ref=43beb54c29a093e0c96268c1a9fd6ca16101a231",
                "patch": "@@ -134,7 +134,9 @@ protected Location resolveLocation(String spec, Map<?,?> flags) {\n         \n         Maybe<Location> l = mgmt.getLocationRegistry().resolve(spec, null, flags);\n         if (l.isPresent()) return l.get();\n+        \n+        RuntimeException exception = ((Absent<?>)l).getException();\n         throw new IllegalStateException(\"Illegal parameter for 'location' (\"+spec+\"); not resolvable: \"+\n-            Exceptions.collapseText( ((Absent<?>)l).getException() ));\n+            Exceptions.collapseText( exception ), exception);\n     }\n }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Avoid NPE in PortForwardManager.rebindSupport\n\n- caused by publicIpIdToHostname containing a null key or null value\n  (not sure what; it\u2019s deprecated so not worrying about it!).\n- Instead of ImmutableMap for copying it, use MutableMap.copyOf\n  so will not fail on null.",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/c61a309302240c6108243ef25341802a12031d56",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/d89062b86f99d2cfae0d1558c4697b23ab7d3c7c",
        "bug_id": "incubator-brooklyn_103",
        "file": [
            {
                "sha": "c9a596b2775cbf14563950fce11c0184e9584773",
                "filename": "core/src/main/java/brooklyn/location/access/PortForwardManagerImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/c61a309302240c6108243ef25341802a12031d56/core/src/main/java/brooklyn/location/access/PortForwardManagerImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/c61a309302240c6108243ef25341802a12031d56/core/src/main/java/brooklyn/location/access/PortForwardManagerImpl.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/access/PortForwardManagerImpl.java?ref=c61a309302240c6108243ef25341802a12031d56",
                "patch": "@@ -117,8 +117,8 @@ public void init() {\n                 Map<String, PortMapping> mappingsCopy;\n                 Map<String,String> publicIpIdToHostnameCopy;\n                 synchronized (mutex) {\n-                    mappingsCopy = ImmutableMap.copyOf(mappings);\n-                    publicIpIdToHostnameCopy = ImmutableMap.copyOf(publicIpIdToHostname);\n+                    mappingsCopy = MutableMap.copyOf(mappings);\n+                    publicIpIdToHostnameCopy = MutableMap.copyOf(publicIpIdToHostname);\n                 }\n                 return getMementoWithProperties(MutableMap.<String,Object>of(\n                         \"mappings\", mappingsCopy, ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Fix softlayer: delete custom code; rely on jclouds\n\n- The SoftLayerFastVirtualGuestToNodeMetadata broke softlayer for me:\n  when I provisioned a VM, the NodeMetadata returned had a null imageId\n  and null OperatingSystem, which caused an NPE in\n  JcloudsLocation.createUser.\n- Deleting that class to rely on normal jclouds 1.8 fixed the problem\n  for me.",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/4318230dbf09490d2263451db1493291bac6b55d",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/c49d7d393687d414d82450135eda19b6a3e07cb7",
        "bug_id": "incubator-brooklyn_104",
        "file": [
            {
                "sha": "540c707fec5c8e14cb6b0128b34836a487d7a01d",
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsUtil.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/4318230dbf09490d2263451db1493291bac6b55d/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsUtil.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/4318230dbf09490d2263451db1493291bac6b55d/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsUtil.java",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsUtil.java?ref=4318230dbf09490d2263451db1493291bac6b55d",
                "patch": "@@ -72,7 +72,6 @@\n \n import brooklyn.entity.basic.Entities;\n import brooklyn.location.jclouds.config.AlwaysRetryOnRenew;\n-import brooklyn.location.jclouds.config.BrooklynStandardJcloudsGuiceModule;\n import brooklyn.util.collections.MutableList;\n import brooklyn.util.collections.MutableMap;\n import brooklyn.util.config.ConfigBag;\n@@ -318,8 +317,7 @@ public static ComputeService findComputeService(ConfigBag conf, boolean allowReu\n         return ImmutableSet.<Module> of(\n                 new SshjSshClientModule(), \n                 new SLF4JLoggingModule(),\n-                new BouncyCastleCryptoModule(),\n-                new BrooklynStandardJcloudsGuiceModule());\n+                new BouncyCastleCryptoModule());\n     }\n      \n     /** ",
                "deletions": 3
            },
            {
                "sha": "9c289110be4637b4f08f2a89368aa492f795170e",
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/config/BrooklynStandardJcloudsGuiceModule.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/c49d7d393687d414d82450135eda19b6a3e07cb7/locations/jclouds/src/main/java/brooklyn/location/jclouds/config/BrooklynStandardJcloudsGuiceModule.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/c49d7d393687d414d82450135eda19b6a3e07cb7/locations/jclouds/src/main/java/brooklyn/location/jclouds/config/BrooklynStandardJcloudsGuiceModule.java",
                "status": "removed",
                "changes": 32,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/config/BrooklynStandardJcloudsGuiceModule.java?ref=c49d7d393687d414d82450135eda19b6a3e07cb7",
                "patch": "@@ -1,32 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package brooklyn.location.jclouds.config;\n-\n-import org.jclouds.softlayer.compute.functions.VirtualGuestToNodeMetadata;\n-\n-import com.google.inject.AbstractModule;\n-\n-public class BrooklynStandardJcloudsGuiceModule extends AbstractModule {\n-    @Override\n-    protected void configure() {\n-        bind(VirtualGuestToNodeMetadata.class).to(\n-                Class.class.cast(SoftLayerFastVirtualGuestToNodeMetadata.class));\n-    }\n-\n-}",
                "deletions": 32
            },
            {
                "sha": "be77f14d88ca87b5d12644e0cd52b446e4bfb187",
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/config/SoftLayerFastVirtualGuestToNodeMetadata.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/c49d7d393687d414d82450135eda19b6a3e07cb7/locations/jclouds/src/main/java/brooklyn/location/jclouds/config/SoftLayerFastVirtualGuestToNodeMetadata.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/c49d7d393687d414d82450135eda19b6a3e07cb7/locations/jclouds/src/main/java/brooklyn/location/jclouds/config/SoftLayerFastVirtualGuestToNodeMetadata.java",
                "status": "removed",
                "changes": 96,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/config/SoftLayerFastVirtualGuestToNodeMetadata.java?ref=c49d7d393687d414d82450135eda19b6a3e07cb7",
                "patch": "@@ -1,96 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package brooklyn.location.jclouds.config;\n-\n-import java.util.Map;\n-\n-import javax.inject.Inject;\n-import javax.inject.Singleton;\n-\n-import org.jclouds.compute.domain.NodeMetadata;\n-import org.jclouds.compute.domain.NodeMetadata.Status;\n-import org.jclouds.compute.domain.NodeMetadataBuilder;\n-import org.jclouds.compute.functions.GroupNamingConvention;\n-import org.jclouds.softlayer.compute.functions.DatacenterToLocation;\n-import org.jclouds.softlayer.domain.VirtualGuest;\n-\n-import com.google.common.base.Function;\n-import com.google.common.collect.ImmutableMap;\n-import com.google.common.collect.ImmutableSet;\n-\n-/**\n- * @author Andrea Turli\n- */\n-@Singleton\n-public class SoftLayerFastVirtualGuestToNodeMetadata implements\n-        Function<VirtualGuest, NodeMetadata> {\n-\n-    public static final Map<VirtualGuest.State, Status> serverStateToNodeStatus = ImmutableMap\n-            .<VirtualGuest.State, Status> builder()\n-            .put(VirtualGuest.State.HALTED, Status.PENDING)\n-            .put(VirtualGuest.State.PAUSED, Status.SUSPENDED)\n-            .put(VirtualGuest.State.RUNNING, Status.RUNNING)\n-            .put(VirtualGuest.State.UNRECOGNIZED, Status.UNRECOGNIZED).build();\n-\n-    private final GroupNamingConvention nodeNamingConvention;\n-    private final DatacenterToLocation datacenterConverter;\n-\n-    @Inject\n-    SoftLayerFastVirtualGuestToNodeMetadata(\n-          DatacenterToLocation datacenterConverter,\n-          GroupNamingConvention.Factory namingConvention\n-        ) {\n-        this.datacenterConverter = datacenterConverter;\n-        this.nodeNamingConvention = namingConvention.createWithoutPrefix();\n-    }\n-    \n-    @Override\n-    public NodeMetadata apply(VirtualGuest from) {\n-        // convert the result object to a jclouds NodeMetadata\n-        NodeMetadataBuilder builder = new NodeMetadataBuilder();\n-        builder.ids(from.getId() + \"\");\n-        builder.name(from.getHostname());\n-        builder.hostname(from.getHostname());\n-        builder.group(nodeNamingConvention.groupInUniqueNameOrNull(from\n-                .getHostname()));\n-        builder.status(serverStateToNodeStatus.get(from.getPowerState()\n-                .getKeyName()));\n-        // These are null for 'bad' guest orders in the HALTED state.\n-        if (from.getPrimaryIpAddress() != null)\n-            builder.publicAddresses(ImmutableSet.<String> of(from\n-                    .getPrimaryIpAddress()));\n-        if (from.getPrimaryBackendIpAddress() != null)\n-            builder.privateAddresses(ImmutableSet.<String> of(from\n-                    .getPrimaryBackendIpAddress()));\n-        if (from.getDatacenter()!=null) {\n-            builder.location(\n-                // this is how it is done in org/jclouds/softlayer/compute/functions/VirtualGuestToNodeMetadata.java\n-                // but it requires two lookups (Account.ActivePackages then Product_Package.46) which take 30s or more:\n-//                FluentIterable.from(locations.get()).firstMatch(\n-//                    LocationPredicates.idEquals(from.getDatacenter().getId() + \"\")).orNull()\n-                // also note if the Supplier<Location> is injected (using the following in the constructor)\n-                // then it works for softlayer but it breaks OTHER clouds eg rackspace with a guice circular reference!\n-//                @Memoized Supplier<Set<? extends Location>> locations\n-                \n-                // this little lightweight snippet does it without any expensive lookups or guice errors :)\n-                datacenterConverter.apply(from.getDatacenter())\n-            );\n-        }\n-        return builder.build();\n-    }\n-\n-}",
                "deletions": 96
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Cleanup AbstractGeoDnsService.addTargetHost\n\n- avoid NPE when hostname==null and ip!=null, and !USE_HOSTNAMES\n- improve logging, so if log about hostname missing and then subsequent\n  can't infer geo, then still log about the latter.\n- general code cleanup; but more could be done.",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/0ba865f80da59e723bb9f78070c37ee383b7db91",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/06c01537704381c99f517c68013556396c1e1e64",
        "bug_id": "incubator-brooklyn_105",
        "file": [
            {
                "sha": "d22a88a9fe37b4b90de59535a8bd4a59bc745300",
                "filename": "software/webapp/src/main/java/brooklyn/entity/dns/AbstractGeoDnsServiceImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/0ba865f80da59e723bb9f78070c37ee383b7db91/software/webapp/src/main/java/brooklyn/entity/dns/AbstractGeoDnsServiceImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/0ba865f80da59e723bb9f78070c37ee383b7db91/software/webapp/src/main/java/brooklyn/entity/dns/AbstractGeoDnsServiceImpl.java",
                "status": "modified",
                "changes": 117,
                "additions": 81,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/webapp/src/main/java/brooklyn/entity/dns/AbstractGeoDnsServiceImpl.java?ref=0ba865f80da59e723bb9f78070c37ee383b7db91",
                "patch": "@@ -5,6 +5,7 @@\n import java.net.InetAddress;\n import java.net.MalformedURLException;\n import java.net.URL;\n+import java.net.UnknownHostException;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n@@ -47,11 +48,17 @@\n \n     protected Map<Entity, HostGeoInfo> targetHosts = Collections.synchronizedMap(new LinkedHashMap<Entity, HostGeoInfo>());\n     \n-    // We complain when we encounter a target entity for whom we can't derive geo information; the commonest case is a\n-    // transient condition between the time the entity is created and the time it is started (at which point the location is\n-    // specified). This set contains those entities we've complained about already, to avoid repetitive logging.\n+    // We complain (at debug) when we encounter a target entity for whom we can't derive hostname/ip information; \n+    // this is the commonest case for the transient condition between the time the entity is created and the time \n+    // it is started (at which point the location is specified). This set contains those entities we've complained \n+    // about already, to avoid repetitive logging.\n+    transient protected Set<Entity> entitiesWithoutHostname = new HashSet<Entity>();\n+\n+    // We complain (at info/warn) when we encounter a target entity for whom we can't derive geo information, even \n+    // when hostname/ip is known. This set contains those entities we've complained about already, to avoid repetitive \n+    // logging.\n     transient protected Set<Entity> entitiesWithoutGeoInfo = new HashSet<Entity>();\n-    \n+\n     public AbstractGeoDnsServiceImpl() {\n         super();\n     }\n@@ -170,53 +177,58 @@ protected void refreshGroupMembership() {\n     \n     /**\n      * Adds this host, if it is absent or if its hostname has changed.\n-     *  \n+     * \n+     * For whether to use hostname or ip, see config and attributes {@link AbstractGeoDnsService#USE_HOSTNAMES}, \n+     * {@link Attributes#HOSTNAME} and {@link Attributes#ADDRESS} (via {@link #inferHostname(Entity)} and {@link #inferIp(Entity)}.\n+     * Note that the \"hostname\" could infact be an IP address, if {@link #inferHostname(Entity)} returns an IP!\n+     * <p>\n+     * The \"hostname\" is always preferred for inferring the geo info, if it is available. The {@code USE_HOSTNAMES==false} \n+     * is just used to say whether to fall back to IP if that is not available (and whether to switch the the geo-info so it\n+     * refs the IP instead of the hostname).\n+     * \n+     * TODO in a future release, we may change this to explicitly set the sensor(s) to look at on the entity, and \n+     * be stricter about using them in order.\n+     * \n      * @return true if host is added or changed\n      */\n-    protected boolean addTargetHost(Entity e) {\n+    protected boolean addTargetHost(Entity entity) {\n         try {\n-            HostGeoInfo oldGeo = targetHosts.get(e);\n-            String hostname = inferHostname(e);\n-            String ip = inferIp(e);\n-            HostGeoInfo geoH = (hostname == null) ? null : HostGeoInfo.fromIpAddress(InetAddress.getByName(hostname));\n-            HostGeoInfo geoE = HostGeoInfo.fromEntity(e);\n-\n-            // Switch to IP address if that's what we're configured to use, and it's available\n-            if (!getConfig(USE_HOSTNAMES) && ip != null) {\n-                geoH = HostGeoInfo.create(ip, geoH.displayName, geoH.latitude, geoH.longitude);\n-            }\n-            \n-            if (hostname == null || (!getConfig(USE_HOSTNAMES) && ip!=null)) hostname = ip;\n+            HostGeoInfo oldGeo = targetHosts.get(entity);\n+            String hostname = inferHostname(entity);\n+            String ip = inferIp(entity);\n+            String addr = (getConfig(USE_HOSTNAMES) || ip == null) ? hostname : ip;\n+            HostGeoInfo geoE = HostGeoInfo.fromEntity(entity);\n+            HostGeoInfo geoH = inferHostGeoInfo(hostname, ip);\n             \n-            if (hostname == null) {\n-                if (entitiesWithoutGeoInfo.add(e)) {\n-                    log.debug(\"GeoDns ignoring {}, will continue scanning (no hostname or URL available)\", e);\n+            if (addr == null) {\n+                if (entitiesWithoutHostname.add(entity)) {\n+                    log.debug(\"GeoDns ignoring {}, will continue scanning (no hostname or URL available)\", entity);\n                 }\n                 return false;\n             }\n             \n-            if (Networking.isPrivateSubnet(hostname)) {\n+            if (Networking.isPrivateSubnet(addr)) {\n                 if (getConfig(INCLUDE_HOMELESS_ENTITIES)) {\n-                    if (entitiesWithoutGeoInfo.add(e)) {\n-                        log.info(\"GeoDns including {}, even though {} is a private subnet (homeless entities included)\", e, hostname);\n+                    if (entitiesWithoutGeoInfo.add(entity)) {\n+                        log.info(\"GeoDns including {}, even though {} is a private subnet (homeless entities included)\", entity, addr);\n                     }\n                 } else {\n-                    if (entitiesWithoutGeoInfo.add(e)) {\n-                        log.warn(\"GeoDns ignoring {} (private subnet detected for {})\", e, hostname);\n+                    if (entitiesWithoutGeoInfo.add(entity)) {\n+                        log.warn(\"GeoDns ignoring {} (private subnet detected for {})\", entity, addr);\n                     }\n                     return false;\n                 }\n             }\n             \n             if (geoH == null) {\n                 if (getConfig(INCLUDE_HOMELESS_ENTITIES)) {\n-                    if (entitiesWithoutGeoInfo.add(e)) {\n-                        log.info(\"GeoDns including {}, even though no geography info available for {})\", e, hostname);\n+                    if (entitiesWithoutGeoInfo.add(entity)) {\n+                        log.info(\"GeoDns including {}, even though no geography info available for {})\", entity, addr);\n                     }\n-                    geoH = (geoE != null) ? geoE : HostGeoInfo.create(hostname, \"unknownLocation(\"+hostname+\")\", 0, 0);\n+                    geoH = (geoE != null) ? geoE : HostGeoInfo.create(addr, \"unknownLocation(\"+addr+\")\", 0, 0);\n                 } else {\n-                    if (entitiesWithoutGeoInfo.add(e)) {\n-                        log.warn(\"GeoDns ignoring {} (no geography info available for {})\", e, hostname);\n+                    if (entitiesWithoutGeoInfo.add(entity)) {\n+                        log.warn(\"GeoDns ignoring {} (no geography info available for {})\", entity, addr);\n                     }\n                     return false;\n                 }\n@@ -231,17 +243,18 @@ protected boolean addTargetHost(Entity e) {\n             if (geoE != null) {\n                 if ((Math.abs(geoH.latitude-geoE.latitude)>3) ||\n                         (Math.abs(geoH.longitude-geoE.longitude)>3) ) {\n-                    log.warn(\"GeoDns mismatch, {} is in {} but hosts URL in {}\", new Object[] {e, geoE, geoH});\n+                    log.warn(\"GeoDns mismatch, {} is in {} but hosts URL in {}\", new Object[] {entity, geoE, geoH});\n                 }\n             }\n             \n-            entitiesWithoutGeoInfo.remove(e);\n-            log.info(\"GeoDns adding \"+e+\" at \"+geoH+(oldGeo != null ? \" (previously \"+oldGeo+\")\" : \"\"));\n-            targetHosts.put(e, geoH);\n+            entitiesWithoutHostname.remove(entity);\n+            entitiesWithoutGeoInfo.remove(entity);\n+            log.info(\"GeoDns adding \"+entity+\" at \"+geoH+(oldGeo != null ? \" (previously \"+oldGeo+\")\" : \"\"));\n+            targetHosts.put(entity, geoH);\n             return true;\n \n         } catch (Exception ee) {\n-            log.warn(\"GeoDns ignoring {} (error analysing location, {}\", e, ee);\n+            log.warn(\"GeoDns ignoring {} (error analysing location, {}\", entity, ee);\n             return false;\n         }\n     }\n@@ -301,4 +314,36 @@ protected String inferHostname(Entity entity) {\n     protected String inferIp(Entity entity) {\n         return entity.getAttribute(Attributes.ADDRESS);\n     }\n+    \n+    protected HostGeoInfo inferHostGeoInfo(String hostname, String ip) throws UnknownHostException {\n+        // Look up the geo-info from the hostname/ip\n+        HostGeoInfo geoH;\n+        try {\n+            InetAddress addr = (hostname == null) ? null : InetAddress.getByName(hostname);\n+            geoH = (addr == null) ? null : HostGeoInfo.fromIpAddress(addr);\n+        } catch (UnknownHostException e) {\n+            if (getConfig(USE_HOSTNAMES) || ip == null) {\n+                throw e;\n+            } else {\n+                if (log.isTraceEnabled()) log.trace(\"GeoDns failed to infer GeoInfo from hostname {}; will try with IP {} ({})\", new Object[] {hostname, ip, e});\n+                geoH = null;\n+            }\n+        }\n+\n+        // Switch to IP address if that's what we're configured to use, and it's available\n+        if (!getConfig(USE_HOSTNAMES) && ip != null) {\n+            if (geoH == null) {\n+                InetAddress addr = Networking.getInetAddressWithFixedName(ip);\n+                geoH = HostGeoInfo.fromIpAddress(addr);\n+                if (log.isTraceEnabled()) log.trace(\"GeoDns inferred GeoInfo {} from ip {} (could not infer from hostname {})\", new Object[] {geoH, ip, hostname});\n+            } else {\n+                geoH = HostGeoInfo.create(ip, geoH.displayName, geoH.latitude, geoH.longitude);\n+                if (log.isTraceEnabled()) log.trace(\"GeoDns inferred GeoInfo {} from hostname {}; switching it to ip {}\", new Object[] {geoH, hostname, ip});\n+            }\n+        } else {\n+            if (log.isTraceEnabled()) log.trace(\"GeoDns inferred GeoInfo {} from hostname {}\", geoH, hostname);\n+        }\n+        \n+        return geoH;\n+    }\n }",
                "deletions": 36
            },
            {
                "sha": "cb5dd20ce94e1aa1ce089fc007cc20f95120ba21",
                "filename": "software/webapp/src/test/java/brooklyn/entity/dns/geoscaling/GeoscalingIntegrationTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/0ba865f80da59e723bb9f78070c37ee383b7db91/software/webapp/src/test/java/brooklyn/entity/dns/geoscaling/GeoscalingIntegrationTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/0ba865f80da59e723bb9f78070c37ee383b7db91/software/webapp/src/test/java/brooklyn/entity/dns/geoscaling/GeoscalingIntegrationTest.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/webapp/src/test/java/brooklyn/entity/dns/geoscaling/GeoscalingIntegrationTest.java?ref=0ba865f80da59e723bb9f78070c37ee383b7db91",
                "patch": "@@ -92,6 +92,9 @@ public void tearDown() throws Exception {\n     \n     @Test(groups={\"Integration\"})\n     public void testRoutesToExpectedLocation() {\n+        // Without this config, running on a home network (i.e. no public IP) the entity will have a private IP and will be ignored\n+        ((EntityLocal)geoDns).setConfig(GeoscalingDnsService.INCLUDE_HOMELESS_ENTITIES, true);\n+        \n         target.setAttribute(Attributes.HOSTNAME,addrWithGeo.getHostName());\n         \n         app.start(ImmutableList.of(locWithGeo));\n@@ -121,12 +124,14 @@ public void testIgnoresAddressWithoutGeography() {\n     public void testIncludesAddressWithoutGeography() {\n         System.setProperty(BrooklynSystemProperties.HOST_GEO_LOOKUP_IMPL.getPropertyName(), StubHostGeoLookup.class.getName());\n         ((EntityLocal)geoDns).setConfig(GeoscalingDnsService.INCLUDE_HOMELESS_ENTITIES, true);\n-        target.setAttribute(Attributes.HOSTNAME, StubHostGeoLookup.HOMELESS_IP);\n+        //target.setAttribute(Attributes.HOSTNAME, StubHostGeoLookup.HOMELESS_IP);\n         \n         app.start(ImmutableList.of(locWithoutGeo));\n         \n         LOG.info(\"geo-scaling test, using {}.{}; expect to be wired to {}\", new Object[] {subDomain, primaryDomain, addrWithoutGeo});\n         \n+        target.setAttribute(Attributes.HOSTNAME, StubHostGeoLookup.HOMELESS_IP);\n+        \n         assertTargetHostsEventually(geoDns, 1);\n     }\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "Supports periodic persist for RebindManager\n\n- Avoids hammering the CPU too much, by continually serializing\n  mementos and persisting them.\n- Fixes NPE in AbstractEntity.invalidate\n- Fixes location rebind, where was overwriting all fields\n  with their default values!\n- In EntityManagementSupport, sets currentlyDeployed before\n  calling onManagementStarting.\n- ScheduledTask: make it useable from java\n- Fixes SoftwareProcessEntity rebind (so provisioningLocation is\n  restored, and stop can subsequently release the machine)",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/04d0c68eed5b0ffdef25b8ffea26a4f063ae331b",
        "bug_id": "incubator-brooklyn_106",
        "file": [
            {
                "sha": "d3acef7ef8a9b208a0f22f3406f2726c4209b9f1",
                "filename": "api/src/main/java/brooklyn/entity/rebind/ChangeListener.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/api/src/main/java/brooklyn/entity/rebind/ChangeListener.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/api/src/main/java/brooklyn/entity/rebind/ChangeListener.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/api/src/main/java/brooklyn/entity/rebind/ChangeListener.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -6,6 +6,16 @@\n \n public interface ChangeListener {\n \n+    public static final ChangeListener NOOP = new ChangeListener() {\n+        @Override public void onManaged(Entity entity) {}\n+        @Override public void onUnmanaged(Entity entity) {}\n+        @Override public void onChanged(Entity entity) {}\n+        @Override public void onManaged(Location location) {}\n+        @Override public void onUnmanaged(Location location) {}\n+        @Override public void onChanged(Location location) {}\n+        @Override public void onChanged(Policy policy) {}\n+    };\n+    \n     void onManaged(Entity entity);\n     \n     void onUnmanaged(Entity entity);",
                "deletions": 0
            },
            {
                "sha": "2b78b1a09526e3ef83576385a2fac83e5d90d5ad",
                "filename": "api/src/main/java/brooklyn/entity/rebind/RebindManager.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/api/src/main/java/brooklyn/entity/rebind/RebindManager.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/api/src/main/java/brooklyn/entity/rebind/RebindManager.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/api/src/main/java/brooklyn/entity/rebind/RebindManager.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -6,6 +6,8 @@\n import brooklyn.mementos.BrooklynMemento;\n import brooklyn.mementos.BrooklynMementoPersister;\n \n+import com.google.common.annotations.VisibleForTesting;\n+\n public interface RebindManager {\n     \n     // FIXME Should we be calling managementContext.getRebindManager().rebind, using a\n@@ -24,4 +26,7 @@\n     public ChangeListener getChangeListener();\n \n     public void stop();\n+\n+    @VisibleForTesting\n+    public void waitForPendingComplete() throws InterruptedException;\n }",
                "deletions": 0
            },
            {
                "sha": "7a03c7bb90f3a75346811a536442ced29857e15d",
                "filename": "api/src/main/java/brooklyn/mementos/BrooklynMementoPersister.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/api/src/main/java/brooklyn/mementos/BrooklynMementoPersister.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/api/src/main/java/brooklyn/mementos/BrooklynMementoPersister.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/api/src/main/java/brooklyn/mementos/BrooklynMementoPersister.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -3,6 +3,8 @@\n import java.io.IOException;\n import java.util.Collection;\n \n+import com.google.common.annotations.VisibleForTesting;\n+\n public interface BrooklynMementoPersister {\n \n     BrooklynMemento loadMemento() throws IOException;\n@@ -13,6 +15,9 @@\n \n     void stop();\n \n+    @VisibleForTesting\n+    void waitForWritesCompleted() throws InterruptedException;\n+\n     public interface Delta {\n         Collection<LocationMemento> locations();\n         Collection<EntityMemento> entities();",
                "deletions": 0
            },
            {
                "sha": "5af8b22da77eaac631ffc76b08058ade6d379156",
                "filename": "core/src/main/java/brooklyn/entity/basic/AbstractEntity.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/entity/basic/AbstractEntity.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/entity/basic/AbstractEntity.groovy",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/basic/AbstractEntity.groovy?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -832,7 +832,7 @@ public abstract class AbstractEntity extends GroovyObjectSupport implements Enti\n         // TODO move this to EntityMangementSupport,\n         // when hierarchy fields can also be moved there\n         this.@owner?.invalidate();\n-        this.@application.invalidate();\n+        this.@application?.invalidate();\n         this.@ownedChildren.invalidate();\n         this.@groups.invalidate();\n     }",
                "deletions": 1
            },
            {
                "sha": "fc40988d39fbcf8cd6e9b3f0f62e5a1928f2106e",
                "filename": "core/src/main/java/brooklyn/entity/rebind/BasicLocationRebindSupport.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/entity/rebind/BasicLocationRebindSupport.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/entity/rebind/BasicLocationRebindSupport.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/rebind/BasicLocationRebindSupport.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -60,7 +60,7 @@ public void reconstruct(RebindContext rebindContext, LocationMemento memento) {\n             Class<?> fieldType = field.getType();\n             Object transformedValue = memento.getFlags().get(flagName);\n             Object restoredValue = MementoTransformer.transformIdsToLocations(rebindContext, transformedValue, fieldType, true);\n-            FlagUtils.setFieldsFromFlags(ImmutableMap.of(flagName, restoredValue), location);\n+            FlagUtils.setFieldFromFlag(flagName, restoredValue, location);\n         }\n \n         setParent(rebindContext, memento);",
                "deletions": 1
            },
            {
                "sha": "5a2d22344461a6f1487b0b2e3e0ec884aae5eb2f",
                "filename": "core/src/main/java/brooklyn/entity/rebind/ImmediateDeltaChangeListener.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/entity/rebind/ImmediateDeltaChangeListener.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/entity/rebind/ImmediateDeltaChangeListener.java",
                "status": "added",
                "changes": 110,
                "additions": 110,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/rebind/ImmediateDeltaChangeListener.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -0,0 +1,110 @@\n+package brooklyn.entity.rebind;\n+\n+import java.util.Map;\n+\n+import brooklyn.entity.Entity;\n+import brooklyn.location.Location;\n+import brooklyn.mementos.BrooklynMementoPersister;\n+import brooklyn.mementos.LocationMemento;\n+import brooklyn.policy.Policy;\n+\n+import com.google.common.collect.Maps;\n+\n+/**\n+ * Persists changes immediately. This can cause massive CPU load if entities etc are changing frequently\n+ * (for any serializing / file-based persister implementation).\n+ * \n+ * @author aled\n+ */\n+public class ImmediateDeltaChangeListener implements ChangeListener {\n+\n+    private final BrooklynMementoPersister persister;\n+    \n+    private volatile boolean running = true;\n+\n+    public ImmediateDeltaChangeListener(BrooklynMementoPersister persister) {\n+        this.persister = persister;\n+    }\n+    \n+    @Override\n+    public void onManaged(Entity entity) {\n+        if (running && persister != null) {\n+            onChanged(entity);\n+        }\n+    }\n+\n+    @Override\n+    public void onManaged(Location location) {\n+        if (running && persister != null) {\n+            onChanged(location);\n+        }\n+    }\n+    \n+    @Override\n+    public void onChanged(Entity entity) {\n+        if (running && persister != null) {\n+            PersisterDeltaImpl delta = new PersisterDeltaImpl();\n+            delta.entities.add(entity.getRebindSupport().getMemento());\n+\n+            // FIXME How to let the policy/location tell us about changes?\n+            // Don't do this every time!\n+            Map<String, LocationMemento> locations = Maps.newLinkedHashMap();\n+            for (Location location : entity.getLocations()) {\n+                if (!locations.containsKey(location.getId())) {\n+                    for (Location locationInHierarchy : TreeUtils.findLocationsInHierarchy(location)) {\n+                        locations.put(locationInHierarchy.getId(), locationInHierarchy.getRebindSupport().getMemento());\n+                    }\n+                }\n+            }\n+            delta.locations = locations.values();\n+\n+            // FIXME Not including policies, because lots of places regiser anonymous inner class policies\n+            // (e.g. AbstractController registering a AbstractMembershipTrackingPolicy)\n+            // Also, the entity constructor often re-creates the policy.\n+            // Also see MementosGenerator.newEntityMementoBuilder()\n+//            List<PolicyMemento> policies = Lists.newArrayList();\n+//            for (Policy policy : entity.getPolicies()) {\n+//                policies.add(policy.getRebindSupport().getMemento());\n+//            }\n+//            delta.policies = policies;\n+\n+            persister.delta(delta);\n+        }\n+    }\n+    \n+    @Override\n+    public void onUnmanaged(Entity entity) {\n+        if (running && persister != null) {\n+            PersisterDeltaImpl delta = new PersisterDeltaImpl();\n+            delta.removedEntityIds.add(entity.getId());\n+            persister.delta(delta);\n+        }\n+    }\n+\n+    @Override\n+    public void onUnmanaged(Location location) {\n+        if (running && persister != null) {\n+            PersisterDeltaImpl delta = new PersisterDeltaImpl();\n+            delta.removedLocationIds.add(location.getId());\n+            persister.delta(delta);\n+        }\n+    }\n+\n+    @Override\n+    public void onChanged(Location location) {\n+        if (running && persister != null) {\n+            PersisterDeltaImpl delta = new PersisterDeltaImpl();\n+            delta.locations.add(location.getRebindSupport().getMemento());\n+            persister.delta(delta);\n+        }\n+    }\n+    \n+    @Override\n+    public void onChanged(Policy policy) {\n+        if (running && persister != null) {\n+            PersisterDeltaImpl delta = new PersisterDeltaImpl();\n+            delta.policies.add(policy.getRebindSupport().getMemento());\n+            persister.delta(delta);\n+        }\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "8a87d769e96c4f3d516aced102487c3b7590ea0b",
                "filename": "core/src/main/java/brooklyn/entity/rebind/PeriodicDeltaChangeListener.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/entity/rebind/PeriodicDeltaChangeListener.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/entity/rebind/PeriodicDeltaChangeListener.java",
                "status": "added",
                "changes": 206,
                "additions": 206,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/rebind/PeriodicDeltaChangeListener.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -0,0 +1,206 @@\n+package brooklyn.entity.rebind;\n+\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import brooklyn.entity.Entity;\n+import brooklyn.location.Location;\n+import brooklyn.management.ExecutionManager;\n+import brooklyn.management.Task;\n+import brooklyn.mementos.BrooklynMementoPersister;\n+import brooklyn.policy.Policy;\n+import brooklyn.util.task.BasicTask;\n+import brooklyn.util.task.ScheduledTask;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Throwables;\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * A \"simple\" implementation that periodically persists all entities/locations/policies that have changed\n+ * since the last periodic persistence.\n+ * \n+ * TODO A better implementation would look at a per-entity basis. When the entity was modified, then  \n+ * schedule a write for that entity in X milliseconds time (if not already scheduled). That would\n+ * prevent hammering the persister when a bunch of entity attributes change (e.g. when the entity\n+ * has just polled over JMX/http/etc). Such a scheduled-write approach would be similar to the \n+ * Nagle buffering algorithm in TCP (see tcp_nodelay).\n+ * \n+ * @author aled\n+ *\n+ */\n+public class PeriodicDeltaChangeListener implements ChangeListener {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PeriodicDeltaChangeListener.class);\n+\n+    private static class DeltaCollector {\n+        Set<Location> locations = Sets.newLinkedHashSet();\n+        Set<Entity> entities = Sets.newLinkedHashSet();\n+        Set<Policy> policies = Sets.newLinkedHashSet();\n+        Set<String> removedLocationIds = Sets.newLinkedHashSet();\n+        Set<String> removedEntityIds = Sets.newLinkedHashSet();\n+        Set<String> removedPolicyIds = Sets.newLinkedHashSet();\n+        \n+        public boolean isEmpty() {\n+            return locations.isEmpty() && entities.isEmpty() && policies.isEmpty() && \n+                    removedEntityIds.isEmpty() && removedLocationIds.isEmpty() && removedPolicyIds.isEmpty();\n+        }\n+    }\n+    \n+    private final BrooklynMementoPersister persister;\n+\n+    private final AtomicLong writeCount = new AtomicLong();\n+    \n+    private DeltaCollector deltaCollector = new DeltaCollector();\n+\n+    private volatile boolean running = true;\n+\n+    public PeriodicDeltaChangeListener(ExecutionManager executionManager, BrooklynMementoPersister persister, long periodMillis) {\n+        this.persister = persister;\n+        \n+        Callable<Task> taskFactory = new Callable<Task>() {\n+            @Override public Task<Void> call() {\n+                return new BasicTask<Void>(new Callable<Void>() {\n+                    public Void call() {\n+                        try {\n+                            persistNow();\n+                            return null;\n+                        } catch (Throwable t) {\n+                            LOG.warn(\"Problem persisting change-delta (rethrowing)\", t);\n+                            throw Throwables.propagate(t);\n+                        }\n+                    }});\n+            }\n+        };\n+        ScheduledTask scheduledTask = new ScheduledTask(taskFactory).period(periodMillis);\n+        executionManager.submit(scheduledTask);\n+    }\n+    \n+    void stop() {\n+        running = false;\n+    }\n+    \n+    /**\n+     * This method must only be used for testing. If required in production, then revisit implementation!\n+     */\n+    @VisibleForTesting\n+    public void waitForPendingComplete() throws InterruptedException {\n+        long mods = writeCount.get();\n+        while (true) {\n+            if (!isActive()) {\n+                return; // no pending activity;\n+            } else if (writeCount.get() > mods) {\n+                return;\n+            }\n+            Thread.sleep(1);\n+        }\n+    }\n+\n+    private boolean isActive() {\n+        return running && persister != null;\n+    }\n+    \n+    private void persistNow() {\n+        if (isActive()) {\n+            // Atomically switch the delta, so subsequent modifications will be done in the\n+            // next scheduled persist\n+            DeltaCollector prevDeltaCollector;\n+            synchronized (this) {\n+                prevDeltaCollector = deltaCollector;\n+                deltaCollector = new DeltaCollector();\n+            }\n+            \n+            // Generate mementos for everything that has changed in this time period\n+            if (prevDeltaCollector.isEmpty()) {\n+                if (LOG.isTraceEnabled()) LOG.trace(\"No changes to persist since last delta\");\n+            } else {\n+                PersisterDeltaImpl persisterDelta = new PersisterDeltaImpl();\n+                for (Location location : prevDeltaCollector.locations) {\n+                    persisterDelta.locations.add(location.getRebindSupport().getMemento());\n+                }\n+                for (Entity entity : prevDeltaCollector.entities) {\n+                    persisterDelta.entities.add(entity.getRebindSupport().getMemento());\n+                }\n+                for (Policy policy : prevDeltaCollector.policies) {\n+                    persisterDelta.policies.add(policy.getRebindSupport().getMemento());\n+                }\n+                persisterDelta.removedLocationIds = prevDeltaCollector.removedLocationIds;\n+                persisterDelta.removedEntityIds = prevDeltaCollector.removedEntityIds;\n+                persisterDelta.removedPolicyIds = prevDeltaCollector.removedPolicyIds;\n+                \n+                // Tell the persister to persist it\n+                persister.delta(persisterDelta);\n+            }\n+            \n+            writeCount.incrementAndGet();\n+        }\n+    }\n+    \n+    @Override\n+    public synchronized void onManaged(Entity entity) {\n+        if (isActive()) {\n+            onChanged(entity);\n+        }\n+    }\n+\n+    @Override\n+    public synchronized void onManaged(Location location) {\n+        if (isActive()) {\n+            onChanged(location);\n+        }\n+    }\n+    \n+    @Override\n+    public synchronized void onChanged(Entity entity) {\n+        if (isActive()) {\n+            deltaCollector.entities.add(entity);\n+\n+            // FIXME How to let the policy/location tell us about changes? Don't do this every time!\n+            for (Location location : entity.getLocations()) {\n+                deltaCollector.locations.addAll(TreeUtils.findLocationsInHierarchy(location));\n+            }\n+\n+            // FIXME Not including policies, because lots of places regiser anonymous inner class policies\n+            // (e.g. AbstractController registering a AbstractMembershipTrackingPolicy)\n+            // Also, the entity constructor often re-creates the policy.\n+            // Also see MementosGenerator.newEntityMementoBuilder()\n+//            for (Policy policy : entity.getPolicies()) {\n+//                delta.policies.add(policy);\n+//            }\n+        }\n+    }\n+    \n+    @Override\n+    public synchronized void onUnmanaged(Entity entity) {\n+        if (isActive()) {\n+            deltaCollector.removedEntityIds.add(entity.getId());\n+            deltaCollector.entities.remove(entity);\n+        }\n+    }\n+\n+    @Override\n+    public synchronized void onUnmanaged(Location location) {\n+        if (isActive()) {\n+            deltaCollector.removedLocationIds.add(location.getId());\n+            deltaCollector.locations.remove(location);\n+        }\n+    }\n+\n+    @Override\n+    public synchronized void onChanged(Location location) {\n+        if (isActive()) {\n+            deltaCollector.locations.add(location);\n+        }\n+    }\n+    \n+    @Override\n+    public synchronized void onChanged(Policy policy) {\n+        if (isActive()) {\n+            deltaCollector.policies.add(policy);\n+        }\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "b3a3d7fcf0a8f2aa786b4d48b3452025e3dca225",
                "filename": "core/src/main/java/brooklyn/entity/rebind/PersisterDeltaImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/entity/rebind/PersisterDeltaImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/entity/rebind/PersisterDeltaImpl.java",
                "status": "added",
                "changes": 49,
                "additions": 49,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/rebind/PersisterDeltaImpl.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -0,0 +1,49 @@\n+package brooklyn.entity.rebind;\n+\n+import java.util.Collection;\n+\n+import brooklyn.mementos.BrooklynMementoPersister.Delta;\n+import brooklyn.mementos.EntityMemento;\n+import brooklyn.mementos.LocationMemento;\n+import brooklyn.mementos.PolicyMemento;\n+\n+import com.google.common.collect.Sets;\n+\n+class PersisterDeltaImpl implements Delta {\n+    Collection<LocationMemento> locations = Sets.newLinkedHashSet();\n+    Collection<EntityMemento> entities = Sets.newLinkedHashSet();\n+    Collection<PolicyMemento> policies = Sets.newLinkedHashSet();\n+    Collection <String> removedLocationIds = Sets.newLinkedHashSet();\n+    Collection <String> removedEntityIds = Sets.newLinkedHashSet();\n+    Collection <String> removedPolicyIds = Sets.newLinkedHashSet();\n+    \n+    @Override\n+    public Collection<LocationMemento> locations() {\n+        return locations;\n+    }\n+\n+    @Override\n+    public Collection<EntityMemento> entities() {\n+        return entities;\n+    }\n+\n+    @Override\n+    public Collection<PolicyMemento> policies() {\n+        return policies;\n+    }\n+\n+    @Override\n+    public Collection<String> removedLocationIds() {\n+        return removedLocationIds;\n+    }\n+\n+    @Override\n+    public Collection<String> removedEntityIds() {\n+        return removedEntityIds;\n+    }\n+    \n+    @Override\n+    public Collection<String> removedPolicyIds() {\n+        return removedPolicyIds;\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "fa7be8b8dfa662844fbf4b55beea262104c2f231",
                "filename": "core/src/main/java/brooklyn/entity/rebind/RebindManagerImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/entity/rebind/RebindManagerImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/entity/rebind/RebindManagerImpl.java",
                "status": "modified",
                "changes": 130,
                "additions": 35,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/rebind/RebindManagerImpl.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -26,33 +26,53 @@\n import brooklyn.util.MutableMap;\n import brooklyn.util.javalang.Reflections;\n \n-import com.google.common.collect.ImmutableList;\n+import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n \n public class RebindManagerImpl implements RebindManager {\n \n+    // TODO Use ImmediateDeltaChangeListener if the period is set to 0?\n+    // But for MultiFile persister, that is still async\n+    \n     public static final Logger LOG = LoggerFactory.getLogger(RebindManagerImpl.class);\n \n+    // FIXME Make configurable\n+    private volatile long periodicPersistPeriod = 1000;\n+    \n+    private volatile boolean running = true;\n+    \n     private final ManagementContext managementContext;\n \n-    private final ChangeListener changeListener;\n+    private volatile PeriodicDeltaChangeListener realChangeListener;\n+    private volatile ChangeListener changeListener;\n     \n     private volatile BrooklynMementoPersister persister;\n \n-    private volatile boolean running = true;\n-    \n     public RebindManagerImpl(ManagementContext managementContext) {\n         this.managementContext = managementContext;\n-        this.changeListener = new SafeChangeListener(new PersistingChangeListener());\n+        this.changeListener = ChangeListener.NOOP;\n     }\n-    \n+\n+    /**\n+     * Must be called before setPerister()\n+     */\n+    @VisibleForTesting\n+    public void setPeriodicPersistPeriod(long periodMillis) {\n+        this.periodicPersistPeriod = periodMillis;\n+    }\n+\n     @Override\n     public void setPersister(BrooklynMementoPersister val) {\n         if (persister != null && persister != val) {\n             throw new IllegalStateException(\"Dynamically changing persister is not supported: old=\"+persister+\"; new=\"+val);\n         }\n         this.persister = checkNotNull(val, \"persister\");\n+        \n+        if (running) {\n+            this.realChangeListener = new PeriodicDeltaChangeListener(managementContext.getExecutionManager(), persister, periodicPersistPeriod);\n+            this.changeListener = new SafeChangeListener(realChangeListener);\n+        }\n     }\n \n     @Override\n@@ -63,7 +83,15 @@ public BrooklynMementoPersister getPersister() {\n     @Override\n     public void stop() {\n         running = false;\n-        persister.stop();\n+        if (realChangeListener != null) realChangeListener.stop();\n+        if (persister != null) persister.stop();\n+    }\n+    \n+    @Override\n+    @VisibleForTesting\n+    public void waitForPendingComplete() throws InterruptedException {\n+        realChangeListener.waitForPendingComplete();\n+        if (persister != null) persister.waitForWritesCompleted();\n     }\n     \n     @Override\n@@ -259,94 +287,6 @@ private Policy newPolicy(PolicyMemento memento, Reflections reflections) {\n         }\n     }\n     \n-    private class PersistingChangeListener implements ChangeListener {\n-\n-        @Override\n-        public void onManaged(Entity entity) {\n-            if (running && persister != null) {\n-                // TODO Currently, we get an onManaged call for every entity (rather than just the root of a sub-tree)\n-                // Also, we'll be told about an entity before its children are officially managed.\n-                // So it's really the same as \"changed\".\n-                onChanged(entity);\n-            }\n-        }\n-\n-        @Override\n-        public void onManaged(Location location) {\n-            if (running && persister != null) {\n-                onChanged(location);\n-            }\n-        }\n-        \n-        @Override\n-        public void onChanged(Entity entity) {\n-            if (running && persister != null) {\n-                DeltaImpl delta = new DeltaImpl();\n-                delta.entities = ImmutableList.of(entity.getRebindSupport().getMemento());\n-\n-                // FIXME How to let the policy/location tell us about changes?\n-                // Don't do this every time!\n-                Map<String, LocationMemento> locations = Maps.newLinkedHashMap();\n-                for (Location location : entity.getLocations()) {\n-                    if (!locations.containsKey(location.getId())) {\n-                        for (Location locationInHierarchy : TreeUtils.findLocationsInHierarchy(location)) {\n-                            locations.put(locationInHierarchy.getId(), locationInHierarchy.getRebindSupport().getMemento());\n-                        }\n-                    }\n-                }\n-                delta.locations = locations.values();\n-\n-                // FIXME Not including policies, because lots of places regiser anonymous inner class policies\n-                // (e.g. AbstractController registering a AbstractMembershipTrackingPolicy)\n-                // Also, the entity constructor often re-creates the policy.\n-                // Also see MementosGenerator.newEntityMementoBuilder()\n-//                List<PolicyMemento> policies = Lists.newArrayList();\n-//                for (Policy policy : entity.getPolicies()) {\n-//                    policies.add(policy.getRebindSupport().getMemento());\n-//                }\n-//                delta.policies = policies;\n-\n-                persister.delta(delta);\n-            }\n-        }\n-        \n-        @Override\n-        public void onUnmanaged(Entity entity) {\n-            if (running && persister != null) {\n-                DeltaImpl delta = new DeltaImpl();\n-                delta.removedEntityIds = ImmutableList.of(entity.getId());\n-                persister.delta(delta);\n-            }\n-        }\n-\n-        @Override\n-        public void onUnmanaged(Location location) {\n-            if (running && persister != null) {\n-                DeltaImpl delta = new DeltaImpl();\n-                delta.removedLocationIds = ImmutableList.of(location.getId());\n-                persister.delta(delta);\n-            }\n-        }\n-\n-        @Override\n-        public void onChanged(Location location) {\n-            if (running && persister != null) {\n-                DeltaImpl delta = new DeltaImpl();\n-                delta.locations = ImmutableList.of(location.getRebindSupport().getMemento());\n-                persister.delta(delta);\n-            }\n-        }\n-        \n-        @Override\n-        public void onChanged(Policy policy) {\n-            if (running && persister != null) {\n-                DeltaImpl delta = new DeltaImpl();\n-                delta.policies = ImmutableList.of(policy.getRebindSupport().getMemento());\n-                persister.delta(delta);\n-            }\n-        }\n-    }\n-    \n     /**\n      * Wraps a ChangeListener, to log and never propagate any exceptions that it throws.\n      * ",
                "deletions": 95
            },
            {
                "sha": "be167cff9a2ea68cd55f0f690bcb18b05a3d65a5",
                "filename": "core/src/main/java/brooklyn/entity/rebind/persister/BrooklynMementoPersisterInMemory.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/entity/rebind/persister/BrooklynMementoPersisterInMemory.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/entity/rebind/persister/BrooklynMementoPersisterInMemory.java",
                "status": "modified",
                "changes": 21,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/rebind/persister/BrooklynMementoPersisterInMemory.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -7,26 +7,41 @@\n import brooklyn.mementos.BrooklynMemento;\n import brooklyn.util.Serializers;\n \n+import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Throwables;\n \n public class BrooklynMementoPersisterInMemory extends AbstractBrooklynMementoPersister {\n \n     private final ClassLoader classLoader;\n+    private final boolean checkPersistable;\n     \n-    BrooklynMementoPersisterInMemory(ClassLoader classLoader) {\n+    public BrooklynMementoPersisterInMemory(ClassLoader classLoader) {\n+        this(classLoader, true);\n+    }\n+    \n+    public BrooklynMementoPersisterInMemory(ClassLoader classLoader, boolean checkPersistable) {\n         this.classLoader = checkNotNull(classLoader, \"classLoader\");\n+        this.checkPersistable = checkPersistable;\n     }\n     \n+    @VisibleForTesting\n+    @Override\n+    public void waitForWritesCompleted() throws InterruptedException {\n+        // TODO Could wait for concurrent checkpoint/delta, but don't need to for tests\n+        // because first waits for checkpoint/delta to have been called by RebindManagerImpl.\n+        return;\n+    }\n+\n     @Override\n     public void checkpoint(BrooklynMemento newMemento) {\n         super.checkpoint(newMemento);\n-        reserializeMemento();\n+        if (checkPersistable) reserializeMemento();\n     }\n \n     @Override\n     public void delta(Delta delta) {\n         super.delta(delta);\n-        reserializeMemento();\n+        if (checkPersistable) reserializeMemento();\n     }\n     \n     private void reserializeMemento() {",
                "deletions": 3
            },
            {
                "sha": "fb2e20310439294242e202cb3c4282a0c5130d47",
                "filename": "core/src/main/java/brooklyn/entity/rebind/persister/BrooklynMementoPersisterToFile.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/entity/rebind/persister/BrooklynMementoPersisterToFile.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/entity/rebind/persister/BrooklynMementoPersisterToFile.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/rebind/persister/BrooklynMementoPersisterToFile.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -21,6 +21,7 @@\n import brooklyn.event.basic.BasicConfigKey;\n import brooklyn.mementos.BrooklynMemento;\n \n+import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Charsets;\n import com.google.common.base.Joiner;\n import com.google.common.base.Stopwatch;\n@@ -49,6 +50,14 @@ public BrooklynMementoPersisterToFile(File file, ClassLoader classLoader) {\n //        this.serializer = new JsonMementoSerializer(classLoader);\n     }\n     \n+    @VisibleForTesting\n+    @Override\n+    public void waitForWritesCompleted() throws InterruptedException {\n+        // TODO Could wait for concurrent checkpoint/delta, but don't need to for tests\n+        // because first waits for checkpoint/delta to have been called by RebindManagerImpl.\n+        return;\n+    }\n+\n     @Override\n     public BrooklynMemento loadMemento() {\n         try {",
                "deletions": 0
            },
            {
                "sha": "c98e913f1dada648f848c7cd09a4095fb82f3c66",
                "filename": "core/src/main/java/brooklyn/entity/rebind/persister/BrooklynMementoPersisterToMultiFile.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/entity/rebind/persister/BrooklynMementoPersisterToMultiFile.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/entity/rebind/persister/BrooklynMementoPersisterToMultiFile.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/rebind/persister/BrooklynMementoPersisterToMultiFile.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -20,6 +20,7 @@\n import brooklyn.mementos.LocationMemento;\n import brooklyn.mementos.PolicyMemento;\n \n+import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Charsets;\n import com.google.common.base.Joiner;\n import com.google.common.io.Files;\n@@ -139,8 +140,8 @@ public void delta(Delta delta) {\n         }\n         if (LOG.isDebugEnabled()) LOG.debug(\"Checkpointed delta of memento; updating {} entities, {} locations and {} policies; \" +\n         \t\t\"removing {} entities, {} locations and {} policies\", \n-                new Object[] {delta.entities().size(), delta.locations().size(), delta.policies().size(),\n-                delta.removedEntityIds().size(), delta.removedLocationIds().size(), delta.removedPolicyIds().size()});\n+                new Object[] {delta.entities(), delta.locations(), delta.policies(),\n+                delta.removedEntityIds(), delta.removedLocationIds(), delta.removedPolicyIds()});\n         \n         for (EntityMemento entity : delta.entities()) {\n             persist(entity);\n@@ -161,7 +162,9 @@ public void delta(Delta delta) {\n             deletePolicy(id);\n         }\n     }\n-    \n+\n+    @Override\n+    @VisibleForTesting\n     public void waitForWritesCompleted() throws InterruptedException {\n         for (MementoFileWriter<?> writer : entityWriters.values()) {\n             writer.waitForWriteCompleted();",
                "deletions": 3
            },
            {
                "sha": "326d6c403349234279bd2869baa4ea99e1ce0147",
                "filename": "core/src/main/java/brooklyn/entity/rebind/persister/MementoFileWriter.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/entity/rebind/persister/MementoFileWriter.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/entity/rebind/persister/MementoFileWriter.java",
                "status": "modified",
                "changes": 58,
                "additions": 37,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/rebind/persister/MementoFileWriter.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -14,6 +14,7 @@\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Charsets;\n import com.google.common.base.Stopwatch;\n+import com.google.common.base.Throwables;\n import com.google.common.io.Files;\n import com.google.common.util.concurrent.ListenableFuture;\n import com.google.common.util.concurrent.ListeningExecutorService;\n@@ -103,18 +104,28 @@ public void waitForWriteCompleted() throws InterruptedException {\n     private void deleteAsync() {\n         ListenableFuture<Void> future = executor.submit(new Callable<Void>() {\n             @Override public Void call() throws IOException {\n-                deleteNow();\n-                return null;\n+                try {\n+                    deleteNow();\n+                    return null;\n+                } catch (Throwable t) {\n+                    LOG.error(\"Error deleting \"+file, t);\n+                    throw Throwables.propagate(t);\n+                }\n             }});\n         addPostExecListener(future);\n     }\n     \n     private void writeAsync() {\n         ListenableFuture<Void> future = executor.submit(new Callable<Void>() {\n             @Override public Void call() throws IOException {\n-                writeNow();\n-                return null;\n-            }});\n+                try {\n+                    writeNow();\n+                    return null;\n+                } catch (Throwable t) {\n+                    LOG.error(\"Error writing to \"+file, t);\n+                    throw Throwables.propagate(t);\n+                }\n+             }});\n         addPostExecListener(future);\n     }\n     \n@@ -123,24 +134,29 @@ private void addPostExecListener(ListenableFuture<?> future) {\n                 new Runnable() {\n                     @Override public void run() {\n                         if (LOG.isTraceEnabled()) LOG.trace(\"Write complete for {}\", file);\n-                        executing.set(false);\n-                        if (requireDelete.get()) {\n-                            if (executing.compareAndSet(false, true)) {\n-                                if (LOG.isTraceEnabled()) LOG.trace(\"Submitting delete-task for {} (in post-exec) due to recorded delete-requirement\", file);\n-                                deleteAsync();\n-                            } else {\n-                                if (LOG.isTraceEnabled()) LOG.trace(\"Delete-requirement for {} (in post-exec) handled by other thread; returning\", file);\n-                            }\n-                            \n-                        } else if (requireWrite.get() != null) {\n-                            if (executing.compareAndSet(false, true)) {\n-                                if (LOG.isTraceEnabled()) LOG.trace(\"Submitting write task for {} (in post-exec) due to recorded write-requirement\", file);\n-                                writeAsync();\n+                        try {\n+                            executing.set(false);\n+                            if (requireDelete.get()) {\n+                                if (executing.compareAndSet(false, true)) {\n+                                    if (LOG.isTraceEnabled()) LOG.trace(\"Submitting delete-task for {} (in post-exec) due to recorded delete-requirement\", file);\n+                                    deleteAsync();\n+                                } else {\n+                                    if (LOG.isTraceEnabled()) LOG.trace(\"Delete-requirement for {} (in post-exec) handled by other thread; returning\", file);\n+                                }\n+                                \n+                            } else if (requireWrite.get() != null) {\n+                                if (executing.compareAndSet(false, true)) {\n+                                    if (LOG.isTraceEnabled()) LOG.trace(\"Submitting write task for {} (in post-exec) due to recorded write-requirement\", file);\n+                                    writeAsync();\n+                                } else {\n+                                    if (LOG.isTraceEnabled()) LOG.trace(\"Write-requirement for {} (in post-exec) handled by other thread; returning\", file);\n+                                }\n                             } else {\n-                                if (LOG.isTraceEnabled()) LOG.trace(\"Write-requirement for {} (in post-exec) handled by other thread; returning\", file);\n+                                if (LOG.isTraceEnabled()) LOG.trace(\"No pending exec-requirements for {}\", file);\n                             }\n-                        } else {\n-                            if (LOG.isTraceEnabled()) LOG.trace(\"No pending exec-requirements for {}\", file);\n+                        } catch (Throwable t) {\n+                            LOG.error(\"Error in post-exec for \"+file, t);\n+                            throw Throwables.propagate(t);\n                         }\n                     }\n                 }, ",
                "deletions": 21
            },
            {
                "sha": "7cddd80772d88ac8d3bafc2bdd377e823d1152c0",
                "filename": "core/src/main/java/brooklyn/entity/rebind/persister/RetryingMementoSerializer.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/entity/rebind/persister/RetryingMementoSerializer.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/entity/rebind/persister/RetryingMementoSerializer.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/rebind/persister/RetryingMementoSerializer.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -26,7 +26,8 @@ public String toString(T memento) {\n             try {\n                 return delegate.toString(memento);\n             } catch (RuntimeException e) {\n-                LOG.warn(\"Error serializing memento (attempt \"+attempt+\" of \"+maxAttempts+\") for \"+memento, e);\n+                LOG.warn(\"Error serializing memento (attempt \"+attempt+\" of \"+maxAttempts+\") for \"+memento+\n+                        \"; expected sometimes if attribute value modified\", e);\n                 lastException = e;\n             }\n         } while (attempt < maxAttempts);",
                "deletions": 1
            },
            {
                "sha": "20e0ca1ca9a9001d96e0e8fad3b4f9a2b5644532",
                "filename": "core/src/main/java/brooklyn/management/internal/EntityManagementSupport.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/management/internal/EntityManagementSupport.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/management/internal/EntityManagementSupport.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/management/internal/EntityManagementSupport.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -77,6 +77,8 @@ public void onManagementStarting(ManagementTransitionInfo info) {\n             nonDeploymentManagementContext.getSubscriptionManager().startDelegatingForSubscribing();\n \n             managementContextUsable = true;\n+            currentlyDeployed = true;\n+            everDeployed = true;\n             \n             entityChangeListener = new EntityChangeListener() {\n                 @Override\n@@ -147,8 +149,6 @@ public void onManagementStarted(ManagementTransitionInfo info) {\n         \n         synchronized (this) {\n             nonDeploymentManagementContext = null;\n-            currentlyDeployed = true;\n-            everDeployed = true;\n         }\n     }\n     ",
                "deletions": 2
            },
            {
                "sha": "4c7ded3ff3993ce68762f085d36b45336321259d",
                "filename": "core/src/main/java/brooklyn/util/flags/FlagUtils.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/util/flags/FlagUtils.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/util/flags/FlagUtils.java",
                "status": "modified",
                "changes": 23,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/util/flags/FlagUtils.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -1,5 +1,7 @@\n package brooklyn.util.flags;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n import static brooklyn.util.GroovyJavaMethods.elvis;\n import static brooklyn.util.GroovyJavaMethods.truth;\n import groovy.lang.Closure;\n@@ -52,6 +54,17 @@ private FlagUtils() {}\n         return setFieldsFromFlagsInternal(flags, o, getAllFields(o.getClass()));\n     }\n \t\n+    /**\n+     * Sets the field with the given flag (if it exists) to the given value.\n+     * Will attempt to coerce the value to the required type.\n+     * Will respect \"nullable\" on the SetFromFlag annotation.\n+     * \n+     * @throws IllegalArgumentException If fieldVal is null and the SetFromFlag annotation set nullable=false\n+     */\n+    public static void setFieldFromFlag(String flagName, Object fieldVal, Object o) {\n+        setFieldFromFlagInternal(checkNotNull(flagName, \"flagName\"), fieldVal, o, getAllFields(o.getClass()));\n+    }\n+    \n     /** get all fields (including private and static) on the given object and all supertypes, \n      * that are annotated with SetFromFlags. \n      */\n@@ -165,6 +178,16 @@ private static Field findFieldForFlagInternal(String flagName, Object o, Collect\n         throw new NoSuchElementException(\"Field with flag \"+flagName+\" not found on \"+o+\" of type \"+(o != null ? o.getClass() : null));\n     }\n \n+    private static void setFieldFromFlagInternal(String flagName, Object fieldVal, Object o, Collection<Field> fields) {\n+        for (Field f: fields) {\n+            SetFromFlag cf = f.getAnnotation(SetFromFlag.class);\n+            if (cf != null && flagName.equals(elvis(cf.value(), f.getName()))) {\n+                setField(o, f, fieldVal, cf);\n+                break;\n+            }\n+        }\n+    }\n+\n     private static Map<String, ? extends Object> setFieldsFromFlagsInternal(Map<String,? extends Object> flags, Object o, Collection<Field> fields) {\n         Map<String, Object> remaining = Maps.newLinkedHashMap();\n \t\tif (truth(flags)) remaining.putAll(flags);",
                "deletions": 0
            },
            {
                "sha": "08d66f19075deef5d7660d513a4d07d4ada32519",
                "filename": "core/src/main/java/brooklyn/util/task/ScheduledTask.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/util/task/ScheduledTask.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/main/java/brooklyn/util/task/ScheduledTask.java",
                "status": "modified",
                "changes": 26,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/util/task/ScheduledTask.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -14,14 +14,19 @@\n import brooklyn.management.Task;\n import brooklyn.util.JavaGroovyEquivalents;\n import brooklyn.util.MutableMap;\n+import brooklyn.util.internal.TimeExtras;\n \n import com.google.common.base.Throwables;\n \n public class ScheduledTask extends BasicTask {\n \n-    // TODO See BasicExecutionManager.submitNewScheduledTask for where these fields are actually set.\n-    // Would be nice if the scheduledTask was more self-contained, rather than its fields being\n-    // modified by a different class in a non-obvious way...\n+    // TODO It looks like now groovy callers construct ScheduledTask with these values in the map constructor.\n+    // How does that work in pure-java!?\n+    // Adding builder-like-setters so can be used in Java. But would be much nicer if this was immutable.\n+    // Previous (out-of-date?) todo was:\n+    //     See BasicExecutionManager.submitNewScheduledTask for where these fields are actually set.\n+    //     Would be nice if the scheduledTask was more self-contained, rather than its fields being\n+    //     modified by a different class in a non-obvious way...\n     \n \tfinal Callable<Task> taskFactory;\n \t/** initial delay before running, set as flag in constructor; defaults to 0 */\n@@ -50,6 +55,21 @@ public ScheduledTask(Map flags, Callable<Task> taskFactory) {\n \t\tperiod = JavaGroovyEquivalents.toTimeDuration(elvis(flags.remove(\"period\"), null));\n \t\tmaxIterations = elvis(flags.remove(\"maxIterations\"), null);\n \t}\n+\t\n+\tpublic ScheduledTask delay(long val) {\n+\t    this.delay = JavaGroovyEquivalents.toTimeDuration(val);\n+\t    return this;\n+\t}\n+\n+\tpublic ScheduledTask period(long val) {\n+        this.period = JavaGroovyEquivalents.toTimeDuration(val);\n+        return this;\n+\t}\n+\n+    public ScheduledTask maxIterations(int val) {\n+        this.maxIterations = val;\n+        return this;\n+    }\n \n     public Callable<Task> getTaskFactory() {\n         return taskFactory;",
                "deletions": 3
            },
            {
                "sha": "de6a4d233b75428edc90fe52932f509df4fbda2f",
                "filename": "core/src/test/java/brooklyn/entity/rebind/CheckpointEntityTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/test/java/brooklyn/entity/rebind/CheckpointEntityTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/test/java/brooklyn/entity/rebind/CheckpointEntityTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/entity/rebind/CheckpointEntityTest.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -39,7 +39,7 @@\n     @BeforeMethod\n     public void setUp() throws Exception {\n         mementoDir = Files.createTempDir();\n-        managementContext = RebindTestUtils.newPersistingManagementContext(mementoDir, classLoader);\n+        managementContext = RebindTestUtils.newPersistingManagementContext(mementoDir, classLoader, 1);\n         origApp = new MyApplication();\n         origE = new MyEntity(MutableMap.of(\"myconfig\", \"myval\"), origApp);\n         managementContext.manage(origApp);",
                "deletions": 1
            },
            {
                "sha": "eaa4f227e1addb76ef5765ccaa942c5f1d83f0f4",
                "filename": "core/src/test/java/brooklyn/entity/rebind/RebindDynamicGroupTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/test/java/brooklyn/entity/rebind/RebindDynamicGroupTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/test/java/brooklyn/entity/rebind/RebindDynamicGroupTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/entity/rebind/RebindDynamicGroupTest.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -32,7 +32,7 @@\n     @BeforeMethod\n     public void setUp() throws Exception {\n         mementoDir = Files.createTempDir();\n-        managementContext = RebindTestUtils.newPersistingManagementContext(mementoDir, classLoader);\n+        managementContext = RebindTestUtils.newPersistingManagementContext(mementoDir, classLoader, 1);\n         origApp = new TestApplication();\n     }\n \n@@ -47,7 +47,7 @@ public void testRestoresDynamicGroup() throws Exception {\n         DynamicGroup origG = new DynamicGroup(origApp, Predicates.instanceOf(MyEntity.class));\n         managementContext.manage(origApp);\n         \n-        TestApplication newApp = (TestApplication) RebindTestUtils.rebind(mementoDir, getClass().getClassLoader());\n+        TestApplication newApp = rebind();\n         ManagementContext newManagementContext = newApp.getManagementSupport().getManagementContext(false);\n         final DynamicGroup newG = (DynamicGroup) Iterables.find(newApp.getOwnedChildren(), Predicates.instanceOf(DynamicGroup.class));\n         final MyEntity newE = (MyEntity) Iterables.find(newApp.getOwnedChildren(), Predicates.instanceOf(MyEntity.class));\n@@ -69,4 +69,9 @@ private void assertGroupMemebers(DynamicGroup group, Collection<? extends Entity\n         assertEquals(Sets.newHashSet(group.getMembers()), ImmutableSet.copyOf(expected));\n         assertEquals(group.getMembers().size(), expected.size(), \"members=\"+group.getMembers());\n     }\n+    \n+    private TestApplication rebind() throws Exception {\n+        RebindTestUtils.waitForPersisted(origApp);\n+        return (TestApplication) RebindTestUtils.rebind(mementoDir, getClass().getClassLoader());\n+    }\n }",
                "deletions": 2
            },
            {
                "sha": "a6c7e0c8bc910038285d8e38829b50614451e3da",
                "filename": "core/src/test/java/brooklyn/entity/rebind/RebindEntityTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/test/java/brooklyn/entity/rebind/RebindEntityTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/test/java/brooklyn/entity/rebind/RebindEntityTest.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/entity/rebind/RebindEntityTest.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -29,7 +29,7 @@\n import brooklyn.event.basic.BasicAttributeSensor;\n import brooklyn.event.basic.BasicConfigKey;\n import brooklyn.location.Location;\n-import brooklyn.management.ManagementContext;\n+import brooklyn.management.internal.LocalManagementContext;\n import brooklyn.mementos.EntityMemento;\n import brooklyn.test.TestUtils;\n import brooklyn.test.entity.TestEntity;\n@@ -49,19 +49,20 @@\n     // FIXME Add test about dependent configuration serialization?!\n     \n     private ClassLoader classLoader = getClass().getClassLoader();\n-    private ManagementContext managementContext;\n+    private LocalManagementContext managementContext;\n     private MyApplication origApp;\n     private File mementoDir;\n     \n     @BeforeMethod\n     public void setUp() throws Exception {\n         mementoDir = Files.createTempDir();\n-        managementContext = RebindTestUtils.newPersistingManagementContext(mementoDir, classLoader);\n+        managementContext = RebindTestUtils.newPersistingManagementContext(mementoDir, classLoader, 1);\n         origApp = new MyApplication();\n     }\n \n     @AfterMethod\n     public void tearDown() throws Exception {\n+        managementContext.terminate();\n         if (mementoDir != null) RebindTestUtils.deleteMementoDir(mementoDir);\n     }\n ",
                "deletions": 3
            },
            {
                "sha": "abd4a5301c049fc9bd3213817aab18885bda5695",
                "filename": "core/src/test/java/brooklyn/entity/rebind/RebindLocationTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/test/java/brooklyn/entity/rebind/RebindLocationTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/test/java/brooklyn/entity/rebind/RebindLocationTest.java",
                "status": "modified",
                "changes": 29,
                "additions": 27,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/entity/rebind/RebindLocationTest.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -6,6 +6,7 @@\n import java.io.File;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n \n import org.testng.annotations.AfterMethod;\n import org.testng.annotations.BeforeMethod;\n@@ -37,7 +38,7 @@\n     @BeforeMethod\n     public void setUp() throws Exception {\n         mementoDir = Files.createTempDir();\n-        managementContext = RebindTestUtils.newPersistingManagementContext(mementoDir, classLoader);\n+        managementContext = RebindTestUtils.newPersistingManagementContext(mementoDir, classLoader, 1);\n         origApp = new MyApplication();\n         origE = new MyEntity(origApp);\n         managementContext.manage(origApp);\n@@ -100,6 +101,21 @@ public void testRestoresFieldsWithSetFromFlag() throws Exception {\n         assertEquals(newLoc.myfield, \"myval\");\n     }\n     \n+    @Test\n+    public void testRestoresAtomicLongWithSetFromFlag() throws Exception {\n+        MyLocation origLoc = new MyLocation(MutableMap.of(\"myAtomicLong\", \"123\"));\n+        origApp.start(ImmutableList.of(origLoc));\n+\n+        origLoc.myAtomicLong.incrementAndGet();\n+        assertEquals(origLoc.myAtomicLong.get(), 124L);\n+        origApp.getManagementSupport().getManagementContext(false).getRebindManager().getChangeListener().onChanged(origLoc);\n+        \n+        MyApplication newApp = (MyApplication) rebind();\n+        MyLocation newLoc = (MyLocation) Iterables.get(newApp.getLocations(), 0);\n+        \n+        assertEquals(newLoc.myAtomicLong.get(), 124L);\n+    }\n+    \n     @Test\n     public void testIgnoresTransientFields() throws Exception {\n     \tMyLocation origLoc = new MyLocation(MutableMap.of(\"myTransientField\", \"myval\"));\n@@ -127,7 +143,7 @@ public void testIgnoresStaticFields() throws Exception {\n     @Test\n     public void testHandlesFieldReferencingOtherLocations() throws Exception {\n     \tMyLocation origOtherLoc = new MyLocation();\n-    \tMyLocationReffingOthers origLoc = new MyLocationReffingOthers(MutableMap.of(\"otherLocs\", ImmutableList.of(origOtherLoc)));\n+    \tMyLocationReffingOthers origLoc = new MyLocationReffingOthers(MutableMap.of(\"otherLocs\", ImmutableList.of(origOtherLoc), \"myfield\", \"myval\"));\n     \torigOtherLoc.setParentLocation(origLoc);\n     \t\n         origApp.start(ImmutableList.of(origLoc));\n@@ -138,6 +154,9 @@ public void testHandlesFieldReferencingOtherLocations() throws Exception {\n         assertEquals(newLoc.getChildLocations().size(), 1);\n         assertTrue(Iterables.get(newLoc.getChildLocations(), 0) instanceof MyLocation, \"children=\"+newLoc.getChildLocations());\n         assertEquals(newLoc.otherLocs, ImmutableList.copyOf(newLoc.getChildLocations()));\n+        \n+        // Confirm this didn't override other values (e.g. setting other fields back to their defaults, as was once the case!)\n+        assertEquals(newLoc.myfield, \"myval\");\n     }\n \n     private MyApplication rebind() throws Exception {\n@@ -151,6 +170,9 @@ private MyApplication rebind() throws Exception {\n         @SetFromFlag\n         String myfield;\n \n+        @SetFromFlag(defaultVal=\"1\")\n+        AtomicLong myAtomicLong;\n+\n         private final Object dummy = new Object(); // so not serializable\n         \n         @SetFromFlag\n@@ -170,6 +192,9 @@ public MyLocation(Map flags) {\n     public static class MyLocationReffingOthers extends AbstractLocation {\n         private static final long serialVersionUID = 1L;\n         \n+        @SetFromFlag(defaultVal=\"a\")\n+        String myfield;\n+\n         @SetFromFlag\n         List<Location> otherLocs;\n ",
                "deletions": 2
            },
            {
                "sha": "39c818387736dbcf5f928ecc188a27e290e2e345",
                "filename": "core/src/test/java/brooklyn/entity/rebind/RebindSshMachineLocationTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/test/java/brooklyn/entity/rebind/RebindSshMachineLocationTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/test/java/brooklyn/entity/rebind/RebindSshMachineLocationTest.java",
                "status": "added",
                "changes": 59,
                "additions": 59,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/entity/rebind/RebindSshMachineLocationTest.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -0,0 +1,59 @@\n+package brooklyn.entity.rebind;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.util.Collections;\n+\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import brooklyn.entity.rebind.RebindEntityTest.MyApplication;\n+import brooklyn.location.basic.SshMachineLocation;\n+import brooklyn.management.ManagementContext;\n+import brooklyn.util.MutableMap;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.io.Files;\n+\n+public class RebindSshMachineLocationTest {\n+\n+    private ClassLoader classLoader = getClass().getClassLoader();\n+    private ManagementContext managementContext;\n+    private MyApplication origApp;\n+    private SshMachineLocation origLoc;\n+    private File mementoDir;\n+    \n+    @BeforeMethod\n+    public void setUp() throws Exception {\n+        mementoDir = Files.createTempDir();\n+        managementContext = RebindTestUtils.newPersistingManagementContext(mementoDir, classLoader, 1);\n+        origApp = new MyApplication();\n+        origLoc = new SshMachineLocation(MutableMap.of(\"address\", \"localhost\"));\n+        managementContext.manage(origApp);\n+    }\n+\n+    @AfterMethod\n+    public void tearDown() throws Exception {\n+        if (mementoDir != null) RebindTestUtils.deleteMementoDir(mementoDir);\n+    }\n+    \n+    @Test\n+    public void testMachineUsableAfterRebind() throws Exception {\n+        origApp.start(ImmutableList.of(origLoc));\n+\n+        assertEquals(origLoc.execScript(Collections.<String,Object>emptyMap(), \"mysummary\", ImmutableList.of(\"true\")), 0);\n+\n+        MyApplication newApp = (MyApplication) rebind();\n+        SshMachineLocation newLoc = (SshMachineLocation) Iterables.getOnlyElement(newApp.getLocations(), 0);\n+        \n+        assertEquals(newLoc.execScript(Collections.<String,Object>emptyMap(), \"mysummary\", ImmutableList.of(\"true\")), 0);\n+    }\n+    \n+    private MyApplication rebind() throws Exception {\n+        RebindTestUtils.waitForPersisted(origApp);\n+        return (MyApplication) RebindTestUtils.rebind(mementoDir, getClass().getClassLoader());\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "f91ad675e951dd5f0da858ba34def3822775bc41",
                "filename": "core/src/test/java/brooklyn/entity/rebind/RebindTestUtils.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/test/java/brooklyn/entity/rebind/RebindTestUtils.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/core/src/test/java/brooklyn/entity/rebind/RebindTestUtils.java",
                "status": "modified",
                "changes": 29,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/entity/rebind/RebindTestUtils.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -1,5 +1,7 @@\n package brooklyn.entity.rebind;\n \n+import static com.google.common.base.Preconditions.checkArgument;\n+\n import java.io.File;\n import java.util.List;\n \n@@ -8,7 +10,6 @@\n \n import brooklyn.entity.Application;\n import brooklyn.entity.rebind.dto.MementosGenerators;\n-import brooklyn.entity.rebind.persister.BrooklynMementoPersisterInMemory;\n import brooklyn.entity.rebind.persister.BrooklynMementoPersisterToMultiFile;\n import brooklyn.management.internal.LocalManagementContext;\n import brooklyn.mementos.BrooklynMemento;\n@@ -62,13 +63,22 @@ public static void checkMementoSerializable(Application app) throws Exception {\n         BrooklynMemento memento = MementosGenerators.newBrooklynMemento(app.getManagementContext());\n         serializeAndDeserialize(memento);\n     }\n-    \n+\n     public static LocalManagementContext newPersistingManagementContext(File mementoDir, ClassLoader classLoader) {\n         LocalManagementContext result = new LocalManagementContext();\n         BrooklynMementoPersisterToMultiFile newPersister = new BrooklynMementoPersisterToMultiFile(mementoDir, classLoader);\n         result.getRebindManager().setPersister(newPersister);\n         return result;\n     }\n+    \n+    public static LocalManagementContext newPersistingManagementContext(File mementoDir, ClassLoader classLoader, long persistPeriodMillis) {\n+        checkArgument(persistPeriodMillis > 0, \"persistPeriodMillis must be greater than 0; was \"+persistPeriodMillis);\n+        LocalManagementContext result = new LocalManagementContext();\n+        BrooklynMementoPersisterToMultiFile newPersister = new BrooklynMementoPersisterToMultiFile(mementoDir, classLoader);\n+        ((RebindManagerImpl)result.getRebindManager()).setPeriodicPersistPeriod(persistPeriodMillis);\n+        result.getRebindManager().setPersister(newPersister);\n+        return result;\n+    }\n \n     public static Application rebind(File mementoDir, ClassLoader classLoader) throws Exception {\n         LOG.info(\"Rebinding app, using directory \"+mementoDir);\n@@ -80,20 +90,7 @@ public static Application rebind(File mementoDir, ClassLoader classLoader) throw\n     }\n \n     public static void waitForPersisted(Application origApp) throws InterruptedException {\n-        BrooklynMementoPersister persister = origApp.getManagementContext().getRebindManager().getPersister();\n-        if (persister == null) {\n-            throw new IllegalStateException(\"No persister set for \"+origApp);\n-            \n-        } else if (persister instanceof BrooklynMementoPersisterInMemory) {\n-            // ops are blocking; nothing to wait for\n-            \n-        } else if (persister instanceof BrooklynMementoPersisterToMultiFile) {\n-            BrooklynMementoPersisterToMultiFile p = (BrooklynMementoPersisterToMultiFile) persister;\n-            p.waitForWritesCompleted();\n-            \n-        } else {\n-            throw new IllegalStateException(\"Unhandled persister type: \"+persister.getClass()+\"; \"+persister); \n-        }\n+        origApp.getManagementContext().getRebindManager().waitForPendingComplete();\n     }\n     \n     public static void checkCurrentMementoSerializable(Application app) throws Exception {",
                "deletions": 16
            },
            {
                "sha": "01534d2c70e53c7869db8ce62c59878a2fed14d9",
                "filename": "software/base/src/main/java/brooklyn/entity/basic/SoftwareProcessEntity.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/software/base/src/main/java/brooklyn/entity/basic/SoftwareProcessEntity.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/software/base/src/main/java/brooklyn/entity/basic/SoftwareProcessEntity.groovy",
                "status": "modified",
                "changes": 14,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/basic/SoftwareProcessEntity.groovy?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -78,9 +78,11 @@ public abstract class SoftwareProcessEntity extends AbstractEntity implements St\n \tpublic static final AttributeSensor<String> HOSTNAME = Attributes.HOSTNAME\n \tpublic static final AttributeSensor<String> ADDRESS = Attributes.ADDRESS\n \n+    public static final AttributeSensor<MachineProvisioningLocation> PROVISIONING_LOCATION = new BasicAttributeSensor<MachineProvisioningLocation>(\n+            MachineProvisioningLocation.class, \"softwareservice.provisioningLocation\", \"Location used to provision a machine where this is running\");\n+        \n \tpublic static final BasicAttributeSensor<Lifecycle> SERVICE_STATE = Attributes.SERVICE_STATE\n \t\n-\tprivate MachineProvisioningLocation provisioningLoc\n \tprivate SoftwareProcessDriver driver\n \tprotected transient SensorRegistry sensorRegistry\n \n@@ -96,12 +98,12 @@ public abstract class SoftwareProcessEntity extends AbstractEntity implements St\n     }\n \n     protected void setProvisioningLocation(MachineProvisioningLocation val) {\n-        if (provisioningLoc) throw new IllegalStateException(\"Cannot change provisioning location: existing=\"+provisioningLoc+\"; new=\"+val)\n-        provisioningLoc = val\n+        if (getAttribute(PROVISIONING_LOCATION) != null) throw new IllegalStateException(\"Cannot change provisioning location: existing=\"+getAttribute(PROVISIONING_LOCATION)+\"; new=\"+val)\n+        setAttribute(PROVISIONING_LOCATION, val);\n     }\n     \n     protected MachineProvisioningLocation getProvisioningLocation() {\n-        return provisioningLoc\n+        return getAttribute(PROVISIONING_LOCATION);\n     }\n     \n \tpublic SoftwareProcessDriver getDriver() { driver }\n@@ -255,7 +257,7 @@ public abstract class SoftwareProcessEntity extends AbstractEntity implements St\n \t\tMap<String,Object> flags = obtainProvisioningFlags(location);\n         if (!(location in LocalhostMachineProvisioningLocation))\n             LOG.info(\"Starting {}, obtaining a new location instance in {} with ports {}\", this, location, flags.inboundPorts)\n-\t\tprovisioningLoc = location;\n+\t\tsetAttribute(PROVISIONING_LOCATION, location);\n         SshMachineLocation machine;\n         Tasks.withBlockingDetails(\"Provisioning machine in \"+location) {\n             machine = location.obtain(flags);\n@@ -403,7 +405,7 @@ public abstract class SoftwareProcessEntity extends AbstractEntity implements St\n \t\tif (driver) driver.stop()\n \n \t\t// Only release this machine if we ourselves provisioned it (e.g. it might be running other services)\n-\t\tprovisioningLoc?.release(machine)\n+\t\tgetAttribute(PROVISIONING_LOCATION)?.release(machine)\n \n \t\tdriver = null;\n \t}",
                "deletions": 6
            },
            {
                "sha": "45ef0ee92aacf6a0eff8bcd92873e38555f4c290",
                "filename": "software/base/src/test/java/brooklyn/entity/basic/SoftwareProcessEntityRebindTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/software/base/src/test/java/brooklyn/entity/basic/SoftwareProcessEntityRebindTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/software/base/src/test/java/brooklyn/entity/basic/SoftwareProcessEntityRebindTest.java",
                "status": "added",
                "changes": 100,
                "additions": 100,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/test/java/brooklyn/entity/basic/SoftwareProcessEntityRebindTest.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -0,0 +1,100 @@\n+package brooklyn.entity.basic;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import brooklyn.entity.basic.SoftwareProcessEntityTest.MyService;\n+import brooklyn.entity.rebind.RebindEntityTest.MyApplication;\n+import brooklyn.entity.rebind.RebindTestUtils;\n+import brooklyn.location.MachineProvisioningLocation;\n+import brooklyn.location.NoMachinesAvailableException;\n+import brooklyn.location.basic.AbstractLocation;\n+import brooklyn.location.basic.SshMachineLocation;\n+import brooklyn.management.ManagementContext;\n+import brooklyn.util.MutableMap;\n+import brooklyn.util.flags.SetFromFlag;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.io.Files;\n+\n+public class SoftwareProcessEntityRebindTest {\n+\n+    private ClassLoader classLoader = getClass().getClassLoader();\n+    private ManagementContext managementContext;\n+    private MyApplication origApp;\n+    private MyService origE;\n+    private File mementoDir;\n+    \n+    @BeforeMethod\n+    public void setUp() throws Exception {\n+        mementoDir = Files.createTempDir();\n+        managementContext = RebindTestUtils.newPersistingManagementContext(mementoDir, classLoader);\n+        origApp = new MyApplication();\n+        managementContext.manage(origApp);\n+    }\n+\n+    @AfterMethod\n+    public void tearDown() throws Exception {\n+        if (mementoDir != null) RebindTestUtils.deleteMementoDir(mementoDir);\n+    }\n+    \n+    // FIXME Use SoftwareProcessEntity; so move test to software/base or webapps\n+    @Test\n+    public void testReleasesLocationOnStopAfterRebinding() throws Exception {\n+        origE = new MyService(MutableMap.of(), origApp);\n+        managementContext.manage(origE);\n+        \n+        MyProvisioningLocation origLoc = new MyProvisioningLocation(MutableMap.of(\"name\", \"mylocname\"));\n+        origApp.start(ImmutableList.of(origLoc));\n+        assertEquals(origLoc.inUseCount.get(), 1);\n+        \n+        MyApplication newApp = (MyApplication) rebind();\n+        MyProvisioningLocation newLoc = (MyProvisioningLocation) Iterables.getOnlyElement(newApp.getLocations());\n+        assertEquals(newLoc.inUseCount.get(), 1);\n+        \n+        newApp.stop();\n+        assertEquals(newLoc.inUseCount.get(), 0);\n+    }\n+\n+    private MyApplication rebind() throws Exception {\n+        RebindTestUtils.waitForPersisted(origApp);\n+        return (MyApplication) RebindTestUtils.rebind(mementoDir, getClass().getClassLoader());\n+    }\n+    \n+    public static class MyProvisioningLocation extends AbstractLocation implements MachineProvisioningLocation<SshMachineLocation> {\n+        private static final long serialVersionUID = 1L;\n+        \n+        @SetFromFlag(defaultVal=\"0\")\n+        AtomicInteger inUseCount;\n+\n+        public MyProvisioningLocation(Map flags) {\n+            super(flags);\n+        }\n+\n+        @Override\n+        public SshMachineLocation obtain(Map flags) throws NoMachinesAvailableException {\n+            inUseCount.incrementAndGet();\n+            return new SshMachineLocation(MutableMap.of(\"address\",\"localhost\"));\n+        }\n+\n+        @Override\n+        public void release(SshMachineLocation machine) {\n+            inUseCount.decrementAndGet();\n+        }\n+\n+        @Override\n+        public Map getProvisioningFlags(Collection tags) {\n+            return Collections.emptyMap();\n+        }\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "95f90cdab0aa2ffa314ba215a873d75b172c895b",
                "filename": "software/base/src/test/java/brooklyn/entity/basic/SoftwareProcessEntityTest.groovy",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/software/base/src/test/java/brooklyn/entity/basic/SoftwareProcessEntityTest.groovy",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/software/base/src/test/java/brooklyn/entity/basic/SoftwareProcessEntityTest.groovy",
                "status": "modified",
                "changes": 12,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/test/java/brooklyn/entity/basic/SoftwareProcessEntityTest.groovy?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -1,12 +1,12 @@\n package brooklyn.entity.basic;\n \n-import groovy.transform.InheritConstructors;\n+import groovy.transform.InheritConstructors\n \n import org.testng.Assert\n import org.testng.annotations.Test\n \n import brooklyn.config.ConfigKey\n-import brooklyn.entity.Application\n+import brooklyn.entity.Entity\n import brooklyn.location.MachineLocation\n import brooklyn.location.basic.FixedListMachineProvisioningLocation\n import brooklyn.location.basic.SshMachineLocation\n@@ -46,7 +46,13 @@ public class SoftwareProcessEntityTest {\n     }\n     \n     @InheritConstructors\n-    private static class MyService extends SoftwareProcessEntity {\n+    public static class MyService extends SoftwareProcessEntity {\n+        public MyService(Entity owner) {\n+            super(owner);\n+        }\n+        public MyService(Map flags, Entity owner) {\n+            super(flags, owner);\n+        }\n         @Override\n         public <T> T getConfig(ConfigKey<T> key, T defaultValue=null) {\n             return super.getConfig(key, defaultValue)",
                "deletions": 3
            },
            {
                "sha": "fa5103cbf416cbc26cec109f5115b6f18510fc9b",
                "filename": "software/webapp/src/test/java/brooklyn/entity/proxy/nginx/NginxRebindIntegrationTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/software/webapp/src/test/java/brooklyn/entity/proxy/nginx/NginxRebindIntegrationTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6d9e2801dc3a9e94f5caf075737a3c4a306c40fd/software/webapp/src/test/java/brooklyn/entity/proxy/nginx/NginxRebindIntegrationTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/webapp/src/test/java/brooklyn/entity/proxy/nginx/NginxRebindIntegrationTest.java?ref=6d9e2801dc3a9e94f5caf075737a3c4a306c40fd",
                "patch": "@@ -75,7 +75,7 @@ public void tearDown() throws Exception {\n         \tmonitor.terminate();\n         }\n         if (executor != null) executor.shutdownNow();\n-        if (newApp != null) newApp.stop();\n+        if (newApp != null && newApp.getManagementSupport().getManagementContext(true).isManaged(newApp)) newApp.stop();\n         if (origApp != null && origApp.getManagementSupport().getManagementContext(true).isManaged(origApp)) origApp.stop();\n         //if (mementoDir != null) RebindTestUtils.deleteMementoDir(mementoDir);\n     }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-brooklyn",
        "message": "many minor usability enhancements for chef, as shown by new simple example mysql-chef.yaml\n\n- catch occasional NPE\n- don't use ruby `absolute_path` as it is not in some common (older) versions\n- better messages on errors\n- respond to more flags in simple yaml\n- install recipes from local machine (using classpath or file:/// URL's)\n- misc tweaks to deploy/archive/install (cc @grkvlt) to run as tasks for traceability",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/41a8a0928e2963a50bbfd0d1105180e992cd8769",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/9b0496051bb404c83b393e2439511d040deec965",
        "bug_id": "incubator-brooklyn_107",
        "file": [
            {
                "sha": "4adee00ae4d3beb9f6f0724eea7b2e977824bee8",
                "filename": "core/src/main/java/brooklyn/location/basic/SshMachineLocation.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/41a8a0928e2963a50bbfd0d1105180e992cd8769/core/src/main/java/brooklyn/location/basic/SshMachineLocation.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/41a8a0928e2963a50bbfd0d1105180e992cd8769/core/src/main/java/brooklyn/location/basic/SshMachineLocation.java",
                "status": "modified",
                "changes": 43,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/SshMachineLocation.java?ref=41a8a0928e2963a50bbfd0d1105180e992cd8769",
                "patch": "@@ -1,6 +1,7 @@\n package brooklyn.location.basic;\n \n import static brooklyn.util.GroovyJavaMethods.truth;\n+import groovy.lang.Closure;\n \n import java.io.Closeable;\n import java.io.File;\n@@ -22,29 +23,12 @@\n import java.util.Set;\n import java.util.concurrent.Callable;\n import java.util.concurrent.TimeUnit;\n+\n import javax.annotation.Nullable;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.common.base.Function;\n-import com.google.common.base.Objects;\n-import com.google.common.base.Preconditions;\n-import com.google.common.base.Predicate;\n-import com.google.common.base.Supplier;\n-import com.google.common.base.Throwables;\n-import com.google.common.cache.CacheBuilder;\n-import com.google.common.cache.CacheLoader;\n-import com.google.common.cache.LoadingCache;\n-import com.google.common.cache.RemovalListener;\n-import com.google.common.cache.RemovalNotification;\n-import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.ImmutableMap;\n-import com.google.common.collect.ImmutableSet;\n-import com.google.common.collect.Iterables;\n-import com.google.common.collect.Sets;\n-import com.google.common.net.HostAndPort;\n-\n import brooklyn.config.BrooklynLogging;\n import brooklyn.config.ConfigKey;\n import brooklyn.config.ConfigKey.HasConfigKey;\n@@ -88,7 +72,24 @@\n import brooklyn.util.task.system.internal.ExecWithLoggingHelpers.ExecRunner;\n import brooklyn.util.text.Strings;\n import brooklyn.util.time.Duration;\n-import groovy.lang.Closure;\n+\n+import com.google.common.base.Function;\n+import com.google.common.base.Objects;\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Predicate;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Throwables;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.google.common.cache.RemovalListener;\n+import com.google.common.cache.RemovalNotification;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+import com.google.common.net.HostAndPort;\n \n /**\n  * Operations on a machine that is accessible via ssh.\n@@ -667,6 +668,7 @@ public int installTo(ResourceUtils loader, String url, String destPath) {\n      *\n      * TODO allow s3://bucket/file URIs for AWS S3 resources\n      * TODO use PAX-URL style URIs for maven artifacts\n+     * TODO use subtasks here for greater visibility?; deprecate in favour of SshTasks.installFromUrl?\n      *\n      * @param utils A {@link ResourceUtils} that can resolve the source URLs\n      * @param url The source URL to be installed\n@@ -687,7 +689,8 @@ public int installTo(ResourceUtils utils, Map<String,?> props, String url, Strin\n             Map<String, ?> sshProps = MutableMap.<String, Object>builder().putAll(props).put(\"out\", outO).put(\"err\", outE).build();\n             int result = execScript(sshProps, \"copying remote resource \"+url+\" to server\",  ImmutableList.of(\n                     BashCommands.INSTALL_CURL, // TODO should hold the 'installing' mutex\n-                    \"curl \"+url+\" -L --silent --insecure --show-error --fail --connect-timeout 60 --max-time 600 --retry 5 -o \"+destPath));\n+                    \"mkdir -p `dirname '\"+destPath+\"'`\",\n+                    \"curl \"+url+\" -L --silent --insecure --show-error --fail --connect-timeout 60 --max-time 600 --retry 5 -o '\"+destPath+\"'\"));\n             sgsO.close();\n             sgsE.close();\n             if (result != 0) {",
                "deletions": 20
            },
            {
                "sha": "6a01bc430d8f15b2eef5049831fc6cd1c22400f6",
                "filename": "core/src/main/java/brooklyn/util/config/ConfigBag.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/41a8a0928e2963a50bbfd0d1105180e992cd8769/core/src/main/java/brooklyn/util/config/ConfigBag.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/41a8a0928e2963a50bbfd0d1105180e992cd8769/core/src/main/java/brooklyn/util/config/ConfigBag.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/util/config/ConfigBag.java?ref=41a8a0928e2963a50bbfd0d1105180e992cd8769",
                "patch": "@@ -174,6 +174,8 @@ public ConfigBag putAsStringKeyIfAbsent(Object key, Object value) {\n     }\n \n     public ConfigBag putIfAbsent(Map<?, ?> propertiesToSet) {\n+        if (propertiesToSet==null)\n+            return this;\n         for (Map.Entry<?, ?> entry: propertiesToSet.entrySet()) {\n             Object key = entry.getKey();\n             if (key instanceof HasConfigKey<?>)",
                "deletions": 0
            },
            {
                "sha": "5d64aab07c30a95d05d53084a21e8985ed5ade78",
                "filename": "core/src/main/java/brooklyn/util/file/ArchiveTasks.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/41a8a0928e2963a50bbfd0d1105180e992cd8769/core/src/main/java/brooklyn/util/file/ArchiveTasks.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/41a8a0928e2963a50bbfd0d1105180e992cd8769/core/src/main/java/brooklyn/util/file/ArchiveTasks.java",
                "status": "added",
                "changes": 34,
                "additions": 34,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/util/file/ArchiveTasks.java?ref=41a8a0928e2963a50bbfd0d1105180e992cd8769",
                "patch": "@@ -0,0 +1,34 @@\n+package brooklyn.util.file;\n+\n+import java.util.Map;\n+\n+import brooklyn.location.basic.SshMachineLocation;\n+import brooklyn.management.TaskAdaptable;\n+import brooklyn.management.TaskFactory;\n+import brooklyn.util.ResourceUtils;\n+import brooklyn.util.net.Urls;\n+import brooklyn.util.task.Tasks;\n+\n+public class ArchiveTasks {\n+\n+    /** as {@link #deploy(ResourceUtils, Map, String, SshMachineLocation, String, String, String)} with the most common parameters */\n+    public static TaskFactory<?> deploy(final ResourceUtils optionalResolver, final String archiveUrl, final SshMachineLocation machine, final String destDir) {\n+        return deploy(optionalResolver, null, archiveUrl, machine, destDir, false, null, null);\n+    }\n+    \n+    /** returns a task which installs and unpacks the given archive, as per {@link ArchiveUtils#deploy(ResourceUtils, Map, String, SshMachineLocation, String, String, String)} */\n+    public static TaskFactory<?> deploy(final ResourceUtils resolver, final Map<String, ?> props, final String archiveUrl, final SshMachineLocation machine, final String destDir, final boolean keepArchiveAfterDeploy, final String tmpDir, final String destFile) {\n+        return new TaskFactory<TaskAdaptable<?>>() {\n+            @Override\n+            public TaskAdaptable<?> newTask() {\n+                return Tasks.<Void>builder().name(\"deploying \"+Urls.getFilename(archiveUrl)).description(\"installing \"+archiveUrl+\" and unpacking to \"+destDir).body(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        ArchiveUtils.deploy(resolver, props, archiveUrl, machine, destDir, keepArchiveAfterDeploy, tmpDir, destFile);\n+                    }\n+                }).build();\n+            }\n+        };\n+    }\n+    \n+}",
                "deletions": 0
            },
            {
                "sha": "9f7b7ecdfe535f4b10db04800a3b731116dc61e1",
                "filename": "core/src/main/java/brooklyn/util/file/ArchiveUtils.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/41a8a0928e2963a50bbfd0d1105180e992cd8769/core/src/main/java/brooklyn/util/file/ArchiveUtils.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/41a8a0928e2963a50bbfd0d1105180e992cd8769/core/src/main/java/brooklyn/util/file/ArchiveUtils.java",
                "status": "modified",
                "changes": 48,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/util/file/ArchiveUtils.java?ref=41a8a0928e2963a50bbfd0d1105180e992cd8769",
                "patch": "@@ -29,16 +29,21 @@\n import org.slf4j.LoggerFactory;\n \n import brooklyn.location.basic.SshMachineLocation;\n+import brooklyn.util.ResourceUtils;\n+import brooklyn.util.collections.MutableList;\n import brooklyn.util.collections.MutableMap;\n import brooklyn.util.exceptions.Exceptions;\n import brooklyn.util.javalang.StackTraceSimplifier;\n import brooklyn.util.net.Urls;\n import brooklyn.util.os.Os;\n import brooklyn.util.ssh.BashCommands;\n+import brooklyn.util.task.DynamicTasks;\n import brooklyn.util.task.Tasks;\n import brooklyn.util.task.ssh.SshTasks;\n+import brooklyn.util.text.Strings;\n \n import com.google.common.base.Charsets;\n+import com.google.common.base.Preconditions;\n import com.google.common.io.Files;\n \n public class ArchiveUtils {\n@@ -126,6 +131,11 @@ public String toString() {\n      * @see #extractCommands(String, String)\n      */\n     public static List<String> extractCommands(String fileName, String sourceDir, String targetDir, boolean extractJar) {\n+        return extractCommands(fileName, sourceDir, targetDir, extractJar, true);\n+    }\n+    \n+    /** as {@link #extractCommands(String, String, String, boolean)}, but also with option to keep the original */\n+    public static List<String> extractCommands(String fileName, String sourceDir, String targetDir, boolean extractJar, boolean keepOriginal) {\n         List<String> commands = new LinkedList<String>();\n         commands.add(\"cd \" + targetDir);\n         String sourcePath = Os.mergePathsUnix(sourceDir, fileName);\n@@ -150,9 +160,12 @@ public String toString() {\n                     break;\n                 }\n             case UNKNOWN:\n-                commands.add(\"cp \" + sourcePath + \" \" + targetDir);\n+                if (!sourcePath.equals(Urls.mergePaths(targetDir, fileName)))\n+                    commands.add(\"cp \" + sourcePath + \" \" + targetDir);\n                 break;\n         }\n+        if (!keepOriginal && !commands.isEmpty())\n+            commands.add(\"rm \"+sourcePath);\n         return commands;\n     }\n \n@@ -212,7 +225,10 @@ public static void deploy(String archiveUrl, SshMachineLocation machine, String\n     public static void deploy(Map<String, ?> props, String archiveUrl, SshMachineLocation machine, String destDir, String destFile) {\n         deploy(props, archiveUrl, machine, destDir, destDir, destFile);\n     }\n-\n+    public static void deploy(Map<String, ?> props, String archiveUrl, SshMachineLocation machine, String tmpDir, String destDir, String destFile) {\n+        deploy(null, props, archiveUrl, machine, destDir, true, tmpDir, destFile);\n+    }\n+    \n     /**\n      * Deploys an archive file to a remote machine and extracts the contents.\n      * <p>\n@@ -224,17 +240,30 @@ public static void deploy(Map<String, ?> props, String archiveUrl, SshMachineLoc\n      * @see #deploy(Map, String, SshMachineLocation, String, String, String)\n      * @see #install(SshMachineLocation, String, String, int)\n      */\n-    public static void deploy(Map<String, ?> props, String archiveUrl, SshMachineLocation machine, String tmpDir, String destDir, String destFile) {\n-        String destPath = Os.mergePaths(tmpDir, destFile);\n+    public static void deploy(ResourceUtils resolver, Map<String, ?> props, String archiveUrl, SshMachineLocation machine, String destDir, boolean keepArchiveAfterUnpacking, String optionalTmpDir, String optionalDestFile) {\n+        if (optionalDestFile==null) optionalDestFile = Urls.getFilename(Preconditions.checkNotNull(archiveUrl, \"archiveUrl\"));\n+        if (Strings.isBlank(optionalDestFile)) \n+            throw new IllegalStateException(\"Not given filename and cannot infer archive type from '\"+archiveUrl+\"'\");\n+        if (optionalTmpDir==null) optionalTmpDir=Preconditions.checkNotNull(destDir, \"destDir\");\n+        if (props==null) props = MutableMap.of();\n+        String destPath = Os.mergePaths(optionalTmpDir, optionalDestFile);\n \n         // Use the location mutex to prevent package manager locking issues\n         try {\n             machine.acquireMutex(\"installing\", \"installing archive\");\n-            int result = install(props, machine, archiveUrl, destPath, NUM_RETRIES_FOR_COPYING);\n+            int result = install(resolver, props, machine, archiveUrl, destPath, NUM_RETRIES_FOR_COPYING);\n             if (result != 0) {\n                 throw new IllegalStateException(format(\"Unable to install archive %s to %s\", archiveUrl, machine));\n             }\n-            result = machine.execCommands(props, \"extracting content\", extractCommands(destFile, tmpDir, destDir, false));\n+            \n+            // extract, now using task if available\n+            MutableList<String> commands = MutableList.copyOf(installCommands(optionalDestFile))\n+                .appendAll(extractCommands(optionalDestFile, optionalTmpDir, destDir, false, keepArchiveAfterUnpacking));\n+            if (DynamicTasks.getTaskQueuingContext()!=null) {\n+                result = DynamicTasks.queue(SshTasks.newSshExecTaskFactory(machine, commands.toArray(new String[0])).summary(\"extracting archive\").requiringExitCodeZero()).get();\n+            } else {\n+                result = machine.execCommands(props, \"extracting content\", commands);\n+            }\n             if (result != 0) {\n                 throw new IllegalStateException(format(\"Failed to expand archive %s on %s\", archiveUrl, machine));\n             }\n@@ -261,6 +290,11 @@ public static int install(SshMachineLocation machine, String urlToInstall, Strin\n      * @see SshMachineLocation#installTo(Map, String, String)\n      */\n     public static int install(Map<String, ?> props, SshMachineLocation machine, String urlToInstall, String target, int numAttempts) {\n+        return install(null, props, machine, urlToInstall, target, numAttempts);\n+    }\n+    \n+    public static int install(ResourceUtils resolver, Map<String, ?> props, SshMachineLocation machine, String urlToInstall, String target, int numAttempts) {\n+        if (resolver==null) resolver = ResourceUtils.create(machine);\n         Exception lastError = null;\n         int retriesRemaining = numAttempts;\n         int attemptNum = 0;\n@@ -269,7 +303,7 @@ public static int install(Map<String, ?> props, SshMachineLocation machine, Stri\n             try {\n                 Tasks.setBlockingDetails(\"Installing \"+urlToInstall+\" at \"+machine);\n                 // TODO would be nice to have this in a task (and the things within it!)\n-                return machine.installTo(props, urlToInstall, target);\n+                return machine.installTo(resolver, props, urlToInstall, target);\n             } catch (Exception e) {\n                 Exceptions.propagateIfFatal(e);\n                 lastError = e;",
                "deletions": 7
            },
            {
                "sha": "d0b92a5601b020d265bc5f2f8fe293796555cba5",
                "filename": "core/src/main/java/brooklyn/util/task/ssh/SshTasks.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/41a8a0928e2963a50bbfd0d1105180e992cd8769/core/src/main/java/brooklyn/util/task/ssh/SshTasks.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/41a8a0928e2963a50bbfd0d1105180e992cd8769/core/src/main/java/brooklyn/util/task/ssh/SshTasks.java",
                "status": "modified",
                "changes": 26,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/util/task/ssh/SshTasks.java?ref=41a8a0928e2963a50bbfd0d1105180e992cd8769",
                "patch": "@@ -18,8 +18,12 @@\n import brooklyn.location.basic.SshMachineLocation;\n import brooklyn.management.ManagementContext;\n import brooklyn.management.Task;\n+import brooklyn.management.TaskAdaptable;\n+import brooklyn.management.TaskFactory;\n+import brooklyn.util.ResourceUtils;\n import brooklyn.util.config.ConfigBag;\n import brooklyn.util.internal.ssh.SshTool;\n+import brooklyn.util.net.Urls;\n import brooklyn.util.ssh.BashCommands;\n import brooklyn.util.stream.Streams;\n import brooklyn.util.task.Tasks;\n@@ -31,6 +35,7 @@\n \n import com.google.common.annotations.Beta;\n import com.google.common.base.Function;\n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.Maps;\n \n /**\n@@ -147,4 +152,25 @@ public String apply(@Nullable ProcessTaskWrapper<?> input) {\n         };\n     }\n \n+    /** task to install a file given a url, where the url is resolved remotely first then locally */\n+    public static TaskFactory<?> installFromUrl(final SshMachineLocation location, final String url, final String destPath) {\n+        return installFromUrl(ResourceUtils.create(SshTasks.class), ImmutableMap.<String,Object>of(), location, url, destPath);\n+    }\n+    /** task to install a file given a url, where the url is resolved remotely first then locally */\n+    public static TaskFactory<?> installFromUrl(final ResourceUtils utils, final Map<String, ?> props, final SshMachineLocation location, final String url, final String destPath) {\n+        return new TaskFactory<TaskAdaptable<?>>() {\n+            @Override\n+            public TaskAdaptable<?> newTask() {\n+                return Tasks.<Void>builder().name(\"installing \"+Urls.getFilename(url)).description(\"installing \"+url+\" to \"+destPath).body(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        int result = location.installTo(utils, props, url, destPath);\n+                        if (result!=0) \n+                            throw new IllegalStateException(\"Failed to install '\"+url+\"' to '\"+destPath+\"' at \"+location+\": exit code \"+result);\n+                    }\n+                }).build();\n+            }\n+        };\n+    }\n+    \n }",
                "deletions": 0
            },
            {
                "sha": "40b0f184a68c4e6463ed4238da7d921a8fefb023",
                "filename": "software/base/src/main/java/brooklyn/entity/chef/ChefBashCommands.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/41a8a0928e2963a50bbfd0d1105180e992cd8769/software/base/src/main/java/brooklyn/entity/chef/ChefBashCommands.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/41a8a0928e2963a50bbfd0d1105180e992cd8769/software/base/src/main/java/brooklyn/entity/chef/ChefBashCommands.java",
                "status": "modified",
                "changes": 100,
                "additions": 51,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/chef/ChefBashCommands.java?ref=41a8a0928e2963a50bbfd0d1105180e992cd8769",
                "patch": "@@ -5,17 +5,9 @@\n import static brooklyn.util.ssh.BashCommands.INSTALL_UNZIP;\n import static brooklyn.util.ssh.BashCommands.downloadToStdout;\n import static brooklyn.util.ssh.BashCommands.sudo;\n-\n-import javax.annotation.Nullable;\n-\n-import org.apache.commons.io.FilenameUtils;\n-\n import brooklyn.util.ssh.BashCommands;\n-import brooklyn.util.text.Identifiers;\n-import brooklyn.util.text.Strings;\n \n import com.google.common.annotations.Beta;\n-import com.google.common.io.Files;\n \n /** BASH commands useful for setting up Chef */\n @Beta\n@@ -28,46 +20,56 @@\n                     INSTALL_UNZIP,\n                     \"( \"+downloadToStdout(\"https://www.opscode.com/chef/install.sh\") + \" | \" + sudo(\"bash\")+\" )\");\n \n-    /** this assumes the download is an archive containing a single directory on the root which will be renamed to \"cookbookName\";\n-     * if that directory already has the correct name cookbookName can be null,\n-     * but if e.g. taking from a github tarball it will typically be of the form cookbookName-master/ \n-     * hence the renaming */\n-    // TODO support installing from classpath, and using the repository (tie in with those methods)\n-    public static final String downloadAndExpandCookbook(String source, @Nullable String cookbookName, boolean force) {\n-        String dl = downloadAndExpandCookbook(source);\n-        if (cookbookName==null) return dl;\n-        String tmpName = \"tmp-\"+Strings.makeValidFilename(cookbookName)+\"-\"+Identifiers.makeRandomId(4);\n-        String installCmd = BashCommands.chain(\"mkdir \"+tmpName, \"cd \"+tmpName, dl, \n-                BashCommands.requireTest(\"`ls | wc -w` -eq 1\", \n-                        \"The downloaded archive must contain exactly one directory; contained\"),\n-        \t\t\"COOKBOOK_EXPANDED_DIR=`ls`\",\n-        \t\t\"mv $COOKBOOK_EXPANDED_DIR '../\"+cookbookName+\"'\",\n-        \t\t\"cd ..\",\n-        \t\t\"rm -rf \"+tmpName);\n-        if (!force) return BashCommands.alternatives(\"ls \"+cookbookName, installCmd);\n-        else return BashCommands.alternatives(\"rm -rf \"+cookbookName, installCmd);\n-    }\n-    \n-    /** as {@link #downloadAndExpandCookbook(String, String)} with no cookbook name */\n-    public static final String downloadAndExpandCookbook(String source) {\n-//        curl -f -L  https://github.com/opscode-cookbooks/postgresql/archive/master.tar.gz | tar xvz\n-        String ext = Files.getFileExtension(source);\n-        if (\"tar\".equalsIgnoreCase(ext))\n-            return downloadToStdout(source) + \" | tar xv\";\n-        if (\"tgz\".equalsIgnoreCase(ext) || source.toLowerCase().endsWith(\".tar.gz\"))\n-            return downloadToStdout(source) + \" | tar xvz\";\n-        \n-        String target = FilenameUtils.getName(source);\n-        if (target==null) target = \"\"; else target = target.trim();\n-        target += \"_\"+Strings.makeRandomId(4);\n-        \n-        if (\"zip\".equalsIgnoreCase(ext) || \"tar.gz\".equalsIgnoreCase(ext))\n-            return BashCommands.chain(\n-                BashCommands.commandToDownloadUrlAs(source, target), \n-                \"unzip \"+target,\n-        \t\t\"rm \"+target);\n-        \n-        throw new UnsupportedOperationException(\"No way to expand \"+source+\" (yet)\");\n-    }\n+    // TODO replaced by tasks\n     \n+//    /** this assumes the download is an archive containing a single directory on the root which will be renamed to \"cookbookName\";\n+//     * if that directory already has the correct name cookbookName can be null,\n+//     * but if e.g. taking from a github tarball it will typically be of the form cookbookName-master/ \n+//     * hence the renaming */\n+//    // TODO support installing from classpath, and using the repository (tie in with those methods)\n+//    public static final String downloadAndExpandCookbook(String cookbookArchiveUrl, @Nullable String cookbookName, boolean force) {\n+//        String dl = downloadAndExpandCookbook(cookbookArchiveUrl);\n+//        if (cookbookName==null) return dl;\n+//        XXX;\n+//        String privateTmpDirContainingUnpackedCookbook = \"tmp-\"+Strings.makeValidFilename(cookbookName)+\"-\"+Identifiers.makeRandomId(4);\n+//        String installCmd = BashCommands.chain(\"mkdir \"+privateTmpDirContainingUnpackedCookbook, \"cd \"+privateTmpDirContainingUnpackedCookbook, dl, \n+//                BashCommands.requireTest(\"`ls | wc -w` -eq 1\", \n+//                        \"The downloaded archive must contain exactly one directory; contained\"),\n+//        \t\t\"COOKBOOK_EXPANDED_DIR=`ls`\",\n+//        \t\t\"mv $COOKBOOK_EXPANDED_DIR '../\"+cookbookName+\"'\",\n+//        \t\t\"cd ..\",\n+//        \t\t\"rm -rf \"+privateTmpDirContainingUnpackedCookbook);\n+//        if (!force) return BashCommands.alternatives(\"ls \"+cookbookName, installCmd);\n+//        else return BashCommands.alternatives(\"rm -rf \"+cookbookName, installCmd);\n+//    }\n+//    \n+//    /** as {@link #downloadAndExpandCookbook(String, String)} with no cookbook name */\n+//    // TODO deprecate\n+//    public static final String downloadAndExpandCookbook(String cookbookArchiveUrl) {\n+////        curl -f -L  https://github.com/opscode-cookbooks/postgresql/archive/master.tar.gz | tar xvz\n+//        String ext = Files.getFileExtension(cookbookArchiveUrl);\n+//        if (\"tar\".equalsIgnoreCase(ext))\n+//            return downloadToStdout(cookbookArchiveUrl) + \" | tar xv\";\n+//        if (\"tgz\".equalsIgnoreCase(ext) || cookbookArchiveUrl.toLowerCase().endsWith(\".tar.gz\"))\n+//            return downloadToStdout(cookbookArchiveUrl) + \" | tar xvz\";\n+//        \n+//        String target = FilenameUtils.getName(cookbookArchiveUrl);\n+//        if (target==null) target = \"\"; else target = target.trim();\n+//        target += \"_\"+Strings.makeRandomId(4);\n+//        \n+//        if (\"zip\".equalsIgnoreCase(ext) || \"tar.gz\".equalsIgnoreCase(ext))\n+//            return BashCommands.chain(\n+//                BashCommands.commandToDownloadUrlAs(cookbookArchiveUrl, target), \n+//                \"unzip \"+target,\n+//        \t\t\"rm \"+target);\n+//\n+//        // TODO if it's a local dir, automatically pack it\n+//        throw new UnsupportedOperationException(\"No way to install cookbooks in format \"+cookbookArchiveUrl+\" (yet) -- use tgz, tar, or zip\");\n+//    }\n+//\n+//    public static String renameDownloadedCookbook(String privateTmpDirContainingUnpackedCookbook, String cookbook, boolean force) {\n+//        XXX;\n+//        return null;\n+//    }\n+//    \n }",
                "deletions": 49
            },
            {
                "sha": "c0ba0aa26216f0e90bbcb1231de877f40b8fa729",
                "filename": "software/base/src/main/java/brooklyn/entity/chef/ChefConfig.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/41a8a0928e2963a50bbfd0d1105180e992cd8769/software/base/src/main/java/brooklyn/entity/chef/ChefConfig.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/41a8a0928e2963a50bbfd0d1105180e992cd8769/software/base/src/main/java/brooklyn/entity/chef/ChefConfig.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/chef/ChefConfig.java?ref=41a8a0928e2963a50bbfd0d1105180e992cd8769",
                "patch": "@@ -32,6 +32,7 @@\n     /** typically set from spec, to customize the launch part of the start effector */\n     public static final SetConfigKey<String> CHEF_LAUNCH_RUN_LIST = new SetConfigKey<String>(String.class, \"brooklyn.chef.launch.runList\");\n     /** typically set from spec, to customize the launch part of the start effector */\n+    @SetFromFlag(\"launch_attributes\")\n     public static final MapConfigKey<Object> CHEF_LAUNCH_ATTRIBUTES = new MapConfigKey<Object>(Object.class, \"brooklyn.chef.launch.attributes\");\n     \n     public static enum ChefModes {",
                "deletions": 0
            },
            {
                "sha": "4f8e53255d91f259dcce7c0fcfd4f79fcc8c1910",
                "filename": "software/base/src/main/java/brooklyn/entity/chef/ChefEntity.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/41a8a0928e2963a50bbfd0d1105180e992cd8769/software/base/src/main/java/brooklyn/entity/chef/ChefEntity.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/41a8a0928e2963a50bbfd0d1105180e992cd8769/software/base/src/main/java/brooklyn/entity/chef/ChefEntity.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/chef/ChefEntity.java?ref=41a8a0928e2963a50bbfd0d1105180e992cd8769",
                "patch": "@@ -4,5 +4,5 @@\n import brooklyn.entity.proxying.ImplementedBy;\n \n @ImplementedBy(ChefEntityImpl.class)\n-public interface ChefEntity extends SoftwareProcess {\n+public interface ChefEntity extends SoftwareProcess, ChefConfig {\n }",
                "deletions": 1
            },
            {
                "sha": "b204e733635f14e071a6812326fb52e95faea54e",
                "filename": "software/base/src/main/java/brooklyn/entity/chef/ChefEntityImpl.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/41a8a0928e2963a50bbfd0d1105180e992cd8769/software/base/src/main/java/brooklyn/entity/chef/ChefEntityImpl.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/41a8a0928e2963a50bbfd0d1105180e992cd8769/software/base/src/main/java/brooklyn/entity/chef/ChefEntityImpl.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/chef/ChefEntityImpl.java?ref=41a8a0928e2963a50bbfd0d1105180e992cd8769",
                "patch": "@@ -1,12 +1,18 @@\n package brooklyn.entity.chef;\n \n import brooklyn.entity.basic.EffectorStartableImpl;\n+import brooklyn.util.text.Strings;\n \n public class ChefEntityImpl extends EffectorStartableImpl implements ChefEntity {\n \n     public void init() {\n+        String primaryName = getConfig(CHEF_COOKBOOK_PRIMARY_NAME);\n+        if (!Strings.isBlank(primaryName)) setDefaultDisplayName(primaryName+\" (chef)\");\n+        \n         super.init();\n         new ChefLifecycleEffectorTasks().attachLifecycleEffectors(this);\n     }\n     \n+    \n+    \n }",
                "deletions": 0
            },
            {
                "sha": "eecd2bad8e9a183ce2718b6eecd1eca404381e4d",
                "filename": "software/base/src/main/java/brooklyn/entity/chef/ChefLifecycleEffectorTasks.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/41a8a0928e2963a50bbfd0d1105180e992cd8769/software/base/src/main/java/brooklyn/entity/chef/ChefLifecycleEffectorTasks.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/41a8a0928e2963a50bbfd0d1105180e992cd8769/software/base/src/main/java/brooklyn/entity/chef/ChefLifecycleEffectorTasks.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/chef/ChefLifecycleEffectorTasks.java?ref=41a8a0928e2963a50bbfd0d1105180e992cd8769",
                "patch": "@@ -9,6 +9,7 @@\n import brooklyn.entity.Entity;\n import brooklyn.entity.basic.Attributes;\n import brooklyn.entity.basic.Lifecycle;\n+import brooklyn.entity.basic.SoftwareProcess;\n import brooklyn.entity.software.MachineLifecycleEffectorTasks;\n import brooklyn.entity.software.SshEffectorTasks;\n import brooklyn.location.MachineLocation;\n@@ -206,6 +207,7 @@ protected void postStartCustom() {\n         if (!result) {\n             log.warn(\"No way to check whether \"+entity()+\" is running; assuming yes\");\n         }\n+        entity().setAttribute(SoftwareProcess.SERVICE_UP, true);\n     }\n     \n     protected boolean tryCheckStartPid() {",
                "deletions": 0
            },
            {
                "sha": "5239d68796f5efe2990b81f97774db04ebc6b42f",
                "filename": "software/base/src/main/java/brooklyn/entity/chef/ChefSoloTasks.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/41a8a0928e2963a50bbfd0d1105180e992cd8769/software/base/src/main/java/brooklyn/entity/chef/ChefSoloTasks.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/41a8a0928e2963a50bbfd0d1105180e992cd8769/software/base/src/main/java/brooklyn/entity/chef/ChefSoloTasks.java",
                "status": "modified",
                "changes": 48,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/chef/ChefSoloTasks.java?ref=41a8a0928e2963a50bbfd0d1105180e992cd8769",
                "patch": "@@ -2,20 +2,11 @@\n \n import java.util.Map;\n \n-import brooklyn.entity.Entity;\n-import brooklyn.entity.effector.EffectorTasks;\n import brooklyn.entity.software.SshEffectorTasks;\n import brooklyn.management.TaskFactory;\n-import brooklyn.util.collections.MutableMap;\n-import brooklyn.util.net.Urls;\n import brooklyn.util.ssh.BashCommands;\n-import brooklyn.util.task.DynamicTasks;\n-import brooklyn.util.task.Tasks;\n \n import com.google.common.annotations.Beta;\n-import com.google.common.collect.ImmutableList;\n-import com.google.gson.Gson;\n-import com.google.gson.GsonBuilder;\n \n @Beta\n public class ChefSoloTasks {\n@@ -28,23 +19,11 @@\n     }\n \n     public static TaskFactory<?> installCookbooks(final String chefDirectory, final Map<String,String> cookbooksAndUrls, final boolean force) {\n-        return Tasks.<Void>builder().name(\"install cookbooks\").body(\n-                new Runnable() {\n-                    public void run() {\n-                        Entity e = EffectorTasks.findEntity();\n-                        if (cookbooksAndUrls==null)\n-                            throw new IllegalStateException(\"No cookbooks defined to install at \"+e);\n-                        for (String cookbook: cookbooksAndUrls.keySet())\n-                            DynamicTasks.queue(installCookbook(chefDirectory, cookbook, cookbooksAndUrls.get(cookbook), force));\n-                    }\n-                }).buildFactory();\n+        return ChefTasks.installCookbooks(chefDirectory, cookbooksAndUrls, force);\n     }\n \n-    public static TaskFactory<?> installCookbook(String chefDirectory, String cookbook, String url, boolean force) {\n-        // TODO if it's server, try knife first\n-        // TODO support downloads from classpath / local server\n-        return SshEffectorTasks.ssh(cdAndRun(chefDirectory, ChefBashCommands.downloadAndExpandCookbook(url, cookbook, force))).\n-                summary(\"install cookbook \"+cookbook).requiringExitCodeZero();\n+    public static TaskFactory<?> installCookbook(String chefDirectory, String cookbookName, String cookbookArchiveUrl, boolean force) {\n+        return ChefTasks.installCookbook(chefDirectory, cookbookName, cookbookArchiveUrl, force);\n     }\n \n     protected static String cdAndRun(String targetDirectory, String command) {\n@@ -55,26 +34,7 @@ protected static String cdAndRun(String targetDirectory, String command) {\n \n     public static TaskFactory<?> buildChefFile(String runDirectory, String chefDirectory, String phase, Iterable<? extends String> runList,\n             Map<String, Object> optionalAttributes) {\n-        // TODO if it's server, try knife first\n-        // TODO configure add'l properties\n-        String phaseRb = \n-                \"root = File.absolute_path(File.dirname(__FILE__))\\n\"+\n-                \"\\n\"+\n-                \"file_cache_path root\\n\"+\n-//                \"cookbook_path root + '/cookbooks'\\n\";\n-                \"cookbook_path '\"+chefDirectory+\"'\\n\";\n-\n-        Map<String,Object> phaseJsonMap = MutableMap.of();\n-        if (optionalAttributes!=null)\n-            phaseJsonMap.putAll(optionalAttributes);\n-        if (runList!=null)\n-            phaseJsonMap.put(\"run_list\", ImmutableList.copyOf(runList));\n-        Gson json = new GsonBuilder().create();\n-        String phaseJson = json.toJson(phaseJsonMap);\n-\n-        return Tasks.sequential(\"build chef files for \"+phase,\n-                    SshEffectorTasks.put(Urls.mergePaths(runDirectory)+\"/\"+phase+\".rb\").contents(phaseRb).createDirectory(),\n-                    SshEffectorTasks.put(Urls.mergePaths(runDirectory)+\"/\"+phase+\".json\").contents(phaseJson));\n+        return ChefTasks.buildChefFile(runDirectory, chefDirectory, phase, runList, optionalAttributes);\n     }\n \n     public static TaskFactory<?> runChef(String runDir, String phase) {",
                "deletions": 44
            },
            {
                "sha": "4f2efc137a9b9373d1fe549cf819ae18d7fcadd2",
                "filename": "software/base/src/main/java/brooklyn/entity/chef/ChefTasks.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/41a8a0928e2963a50bbfd0d1105180e992cd8769/software/base/src/main/java/brooklyn/entity/chef/ChefTasks.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/41a8a0928e2963a50bbfd0d1105180e992cd8769/software/base/src/main/java/brooklyn/entity/chef/ChefTasks.java",
                "status": "modified",
                "changes": 64,
                "additions": 51,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/chef/ChefTasks.java?ref=41a8a0928e2963a50bbfd0d1105180e992cd8769",
                "patch": "@@ -5,12 +5,17 @@\n import brooklyn.entity.Entity;\n import brooklyn.entity.effector.EffectorTasks;\n import brooklyn.entity.software.SshEffectorTasks;\n+import brooklyn.management.TaskAdaptable;\n import brooklyn.management.TaskFactory;\n import brooklyn.util.collections.MutableMap;\n+import brooklyn.util.file.ArchiveTasks;\n import brooklyn.util.net.Urls;\n import brooklyn.util.ssh.BashCommands;\n import brooklyn.util.task.DynamicTasks;\n+import brooklyn.util.task.TaskBuilder;\n import brooklyn.util.task.Tasks;\n+import brooklyn.util.text.Identifiers;\n+import brooklyn.util.text.Strings;\n \n import com.google.common.annotations.Beta;\n import com.google.common.collect.ImmutableList;\n@@ -28,7 +33,7 @@\n     }\n \n     public static TaskFactory<?> installCookbooks(final String chefDirectory, final Map<String,String> cookbooksAndUrls, final boolean force) {\n-        return Tasks.<Void>builder().name(\"install cookbooks\").body(\n+        return Tasks.<Void>builder().name(\"install \"+(cookbooksAndUrls==null ? \"0\" : cookbooksAndUrls.size())+\" cookbook\"+Strings.s(cookbooksAndUrls)).body(\n                 new Runnable() {\n                     public void run() {\n                         Entity e = EffectorTasks.findEntity();\n@@ -40,16 +45,46 @@ public void run() {\n                 }).buildFactory();\n     }\n \n-    public static TaskFactory<?> installCookbook(String chefDirectory, String cookbook, String url, boolean force) {\n-        // TODO if it's server, try knife first\n-        // TODO support downloads from classpath / local server\n-        return SshEffectorTasks.ssh(cdAndRun(chefDirectory, ChefBashCommands.downloadAndExpandCookbook(url, cookbook, force))).\n-                summary(\"install cookbook \"+cookbook).requiringExitCodeZero();\n+    public static TaskFactory<?> installCookbook(final String chefDirectory, final String cookbookName, final String cookbookArchiveUrl, final boolean force) {\n+        return new TaskFactory<TaskAdaptable<?>>() {\n+            @Override\n+            public TaskAdaptable<?> newTask() {\n+                TaskBuilder<Void> tb = Tasks.<Void>builder().name(\"install cookbook \"+cookbookName);\n+                \n+                String cookbookDir = Urls.mergePaths(chefDirectory, cookbookName);\n+                String privateTmpDirContainingUnpackedCookbook = \n+                    Urls.mergePaths(chefDirectory, \"tmp-\"+Strings.makeValidFilename(cookbookName)+\"-\"+Identifiers.makeRandomId(4));\n+\n+                // TODO - skip the install earlier if it exists and isn't forced\n+//                if (!force) {\n+//                    // in builder.body, check \n+//                    // \"ls \"+cookbookDir\n+//                    // and stop if it's zero\n+//                    // remove reference to 'force' below\n+//                }\n+                \n+                tb.add(ArchiveTasks.deploy(null, cookbookArchiveUrl, EffectorTasks.findSshMachine(), privateTmpDirContainingUnpackedCookbook).newTask());\n+                \n+                String installCmd = BashCommands.chain(\n+                    \"cd \"+privateTmpDirContainingUnpackedCookbook,  \n+                    \"COOKBOOK_EXPANDED_DIR=`ls`\",\n+                    BashCommands.requireTest(\"`ls | wc -w` -eq 1\", \n+                            \"The deployed archive \"+cookbookArchiveUrl+\" must contain exactly one directory\"),\n+                    \"mv $COOKBOOK_EXPANDED_DIR '../\"+cookbookName+\"'\",\n+                    \"cd ..\",\n+                    \"rm -rf '\"+privateTmpDirContainingUnpackedCookbook+\"'\");\n+                \n+                installCmd = force ? BashCommands.alternatives(\"rm -rf \"+cookbookDir, installCmd) : BashCommands.alternatives(\"ls \"+cookbookDir+\" > /dev/null 2> /dev/null\", installCmd);\n+                tb.add(SshEffectorTasks.ssh(installCmd).summary(\"renaming cookbook dir\").requiringExitCodeZero().newTask());\n+                \n+                return tb.build();\n+            }\n+        };\n     }\n \n     protected static String cdAndRun(String targetDirectory, String command) {\n-        return BashCommands.chain(\"mkdir -p \"+targetDirectory,\n-                \"cd \"+targetDirectory,\n+        return BashCommands.chain(\"mkdir -p '\"+targetDirectory+\"'\",\n+                \"cd '\"+targetDirectory+\"'\",\n                 command);\n     }\n \n@@ -58,11 +93,14 @@ protected static String cdAndRun(String targetDirectory, String command) {\n         // TODO if it's server, try knife first\n         // TODO configure add'l properties\n         String phaseRb = \n-                \"root = File.absolute_path(File.dirname(__FILE__))\\n\"+\n-                \"\\n\"+\n-                \"file_cache_path root\\n\"+\n-//                \"cookbook_path root + '/cookbooks'\\n\";\n-                \"cookbook_path '\"+chefDirectory+\"'\\n\";\n+            \"root = \"\n+            + \"'\"+runDirectory+\"'\" \n+            // recommended alternate to runDir is the following, but it is not available in some rubies\n+            //+ File.absolute_path(File.dirname(__FILE__))\"+\n+            + \"\\n\"+\n+            \"file_cache_path root\\n\"+\n+//            \"cookbook_path root + '/cookbooks'\\n\";\n+            \"cookbook_path '\"+chefDirectory+\"'\\n\";\n \n         Map<String,Object> phaseJsonMap = MutableMap.of();\n         if (optionalAttributes!=null)",
                "deletions": 13
            },
            {
                "sha": "cec45fb9c4c3dd6fc7d54b49c8f209bdc6d14993",
                "filename": "usage/camp/src/test/resources/mysql-chef.yaml",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/41a8a0928e2963a50bbfd0d1105180e992cd8769/usage/camp/src/test/resources/mysql-chef.yaml",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/41a8a0928e2963a50bbfd0d1105180e992cd8769/usage/camp/src/test/resources/mysql-chef.yaml",
                "status": "added",
                "changes": 26,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/camp/src/test/resources/mysql-chef.yaml?ref=41a8a0928e2963a50bbfd0d1105180e992cd8769",
                "patch": "@@ -0,0 +1,26 @@\n+name: chef-mysql-sample\n+services:\n+- type: chef:mysql\n+  \n+  cookbook_urls:\n+    # the standard cookbooks should be packaged as tarballs, unless you have knife installed\n+    mysql: file:///tmp/brooklyn-chef/cookbooks/mysql.tgz\n+    openssl: file:///tmp/brooklyn-chef/cookbooks/openssl.tgz\n+    \n+  launch_attributes:\n+    mysql:\n+      # these attrs are required by the mysql cookbook under node['mysql']\n+      # (many others are supported and can also be passed here)\n+      server_debian_password: p4ssw0rd\n+      server_root_password: p4ssw0rd\n+      server_repl_password: p4ssw0rd\n+      \n+  # how to determine if the process is running and how to kill it\n+  # (supported options are `service_name` and `pid_file`; typically pick one)\n+  service_name: mysqld\n+  #pid_file: /var/run/mysqld/mysqld.pid\n+\n+location:\n+  byon:\n+    hosts: 192.168.33.12\n+    user: vagrant",
                "deletions": 0
            },
            {
                "sha": "8cffc53a741a78fcedca5083f3568200e059ac6c",
                "filename": "utils/common/src/main/java/brooklyn/util/collections/MutableList.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/41a8a0928e2963a50bbfd0d1105180e992cd8769/utils/common/src/main/java/brooklyn/util/collections/MutableList.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/41a8a0928e2963a50bbfd0d1105180e992cd8769/utils/common/src/main/java/brooklyn/util/collections/MutableList.java",
                "status": "modified",
                "changes": 14,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/utils/common/src/main/java/brooklyn/util/collections/MutableList.java?ref=41a8a0928e2963a50bbfd0d1105180e992cd8769",
                "patch": "@@ -162,14 +162,22 @@ public Builder() {}\n             for (V item: items) add(item);\n         return this;\n     }\n+    /** as {@link List#addAll(Collection)} but fluent style\u00a0*/\n+    public MutableList<V> appendAll(Iterator<? extends V> items) {\n+        addAll(items);\n+        return this;\n+    }\n \n     public boolean addAll(Iterable<? extends V> setToAdd) {\n         // copy of parent, but accepting Iterable and null\n+        if (setToAdd==null) return false;\n+        return addAll(setToAdd.iterator());\n+    }\n+    public boolean addAll(Iterator<? extends V> setToAdd) {\n         if (setToAdd==null) return false;\n         boolean modified = false;\n-        Iterator<? extends V> e = setToAdd.iterator();\n-        while (e.hasNext()) {\n-            if (add(e.next()))\n+        while (setToAdd.hasNext()) {\n+            if (add(setToAdd.next()))\n                 modified = true;\n         }\n         return modified;",
                "deletions": 3
            },
            {
                "sha": "74d6f167327ba9c04f724dbca0fd4a41c70c60ce",
                "filename": "utils/common/src/main/java/brooklyn/util/net/Urls.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/41a8a0928e2963a50bbfd0d1105180e992cd8769/utils/common/src/main/java/brooklyn/util/net/Urls.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/41a8a0928e2963a50bbfd0d1105180e992cd8769/utils/common/src/main/java/brooklyn/util/net/Urls.java",
                "status": "modified",
                "changes": 14,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/utils/common/src/main/java/brooklyn/util/net/Urls.java?ref=41a8a0928e2963a50bbfd0d1105180e992cd8769",
                "patch": "@@ -9,6 +9,8 @@\n \n import javax.annotation.Nullable;\n \n+import brooklyn.util.text.Strings;\n+\n import com.google.common.base.Function;\n import com.google.common.base.Throwables;\n \n@@ -143,6 +145,18 @@ else if (c==':') {\n         }\n     }\n \n+    /** return the last segment of the given url before any '?', typically its name */\n+    public static String getFilename(String url) {\n+        if (url==null) return null;\n+        if (getProtocol(url)!=null) {\n+            int firstQ = url.indexOf('?');\n+            if (firstQ>=0)\n+                url = url.substring(0, firstQ);\n+        }\n+        url = Strings.removeAllFromEnd(url, \"/\");\n+        return url.substring(url.lastIndexOf('/')+1);\n+    }\n+\n     public static boolean isDirectory(String fileUrl) {\n         File file;\n         if (isUrlWithProtocol(fileUrl)) {",
                "deletions": 0
            },
            {
                "sha": "24285463bb483f21e7fed4f09b030f6ba9c3c0bd",
                "filename": "utils/common/src/main/java/brooklyn/util/text/Strings.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/41a8a0928e2963a50bbfd0d1105180e992cd8769/utils/common/src/main/java/brooklyn/util/text/Strings.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/41a8a0928e2963a50bbfd0d1105180e992cd8769/utils/common/src/main/java/brooklyn/util/text/Strings.java",
                "status": "modified",
                "changes": 21,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/utils/common/src/main/java/brooklyn/util/text/Strings.java?ref=41a8a0928e2963a50bbfd0d1105180e992cd8769",
                "patch": "@@ -7,6 +7,7 @@\n import java.text.NumberFormat;\n import java.util.Arrays;\n import java.util.Collections;\n+import java.util.Iterator;\n import java.util.Map;\n import java.util.StringTokenizer;\n \n@@ -664,6 +665,24 @@ public static FormattedString format(String pattern, Object... args) {\n     public static String s(int count) {\n         return count==1 ? \"\" : \"s\";\n     }\n+    /** as {@link #s(int)} based on size of argument */\n+    public static String s(@Nullable Map<?,?> map) {\n+        if (map==null) return \"s\";\n+        return s(map.size());\n+    }\n+    /** as {@link #s(int)} based on size of argument */\n+    public static String s(Iterable<?> iter) {\n+        if (iter==null) return \"s\";\n+        return s(iter.iterator());\n+    }\n+    /** as {@link #s(int)} based on size of argument */\n+    public static String s(Iterator<?> iter) {\n+        if (iter==null) return \"s\";\n+        if (!iter.hasNext()) return \"s\";\n+        iter.next();\n+        if (!iter.hasNext()) return \"\";\n+        return \"s\";\n+    }\n \n     /** converts a map of any objects to a map of strings, preserving nulls and invoking toString where needed */\n     public static Map<String, String> toStringMap(Map<?,?> map) {\n@@ -721,5 +740,5 @@ public static int getWordCount(String phrase, boolean respectQuotes) {\n         else\n             return Collections.list(new StringTokenizer(phrase)).size();\n     }\n-    \n+\n }",
                "deletions": 1
            },
            {
                "sha": "6630e4051d8e7fb32f38724ce918bff878f71033",
                "filename": "utils/common/src/test/java/brooklyn/util/net/UrlsTest.java",
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/41a8a0928e2963a50bbfd0d1105180e992cd8769/utils/common/src/test/java/brooklyn/util/net/UrlsTest.java",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/41a8a0928e2963a50bbfd0d1105180e992cd8769/utils/common/src/test/java/brooklyn/util/net/UrlsTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/utils/common/src/test/java/brooklyn/util/net/UrlsTest.java?ref=41a8a0928e2963a50bbfd0d1105180e992cd8769",
                "patch": "@@ -33,5 +33,15 @@ public void testIsUrlWithProtocol() {\n         Assert.assertFalse(Urls.isUrlWithProtocol(\"1:/\"));\n         Assert.assertFalse(Urls.isUrlWithProtocol(null));\n     }\n+\n+    @Test\n+    public void testGetFilename() {\n+        assertEquals(Urls.getFilename(\"http://somewhere.com/path/to/file.txt\"), \"file.txt\");\n+        assertEquals(Urls.getFilename(\"http://somewhere.com/path/to/dir/\"), \"dir\");\n+        assertEquals(Urls.getFilename(\"http://somewhere.com/path/to/file.txt?with/optional/suffice\"), \"file.txt\");\n+        assertEquals(Urls.getFilename(\"filewith?.txt\"), \"filewith?.txt\");\n+        assertEquals(Urls.getFilename(\"\"), \"\");\n+        assertEquals(Urls.getFilename(null), null);\n+    }\n     \n }",
                "deletions": 0
            }
        ]
    }
]