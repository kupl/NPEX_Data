{
    "ranger_1e8dc41": {
        "bug_id": "ranger_1e8dc41",
        "commit": "https://github.com/apache/ranger/commit/1e8dc41a82e2217a5c10a67c8f6bb58b6e06342e",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ranger/blob/1e8dc41a82e2217a5c10a67c8f6bb58b6e06342e/hdfs-agent/src/main/java/org/apache/hadoop/hdfs/server/namenode/RangerFSPermissionChecker.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/hdfs-agent/src/main/java/org/apache/hadoop/hdfs/server/namenode/RangerFSPermissionChecker.java?ref=1e8dc41a82e2217a5c10a67c8f6bb58b6e06342e",
                "deletions": 1,
                "filename": "hdfs-agent/src/main/java/org/apache/hadoop/hdfs/server/namenode/RangerFSPermissionChecker.java",
                "patch": "@@ -292,7 +292,8 @@ public void logAudit(RangerAccessResult result) {\n \t\tString              serviceName  = result.getServiceName();\n \t\tString              resourceType = getResourceName(request.getResource(), serviceDef);\n \t\tString              resourcePath = getResourceValueAsString(request.getResource(), serviceDef);\n-\t\tLong                policyId     = (result.getAccessTypeResults() != null && result.getAccessTypeResults().size() > 0) ? result.getAccessTypeResults().get(0).getPolicyId() : null;\n+\t\tLong                policyId     = (result.getAccessTypeResults() != null && !result.getAccessTypeResults().isEmpty())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t? result.getAccessTypeResults().values().iterator().next().getPolicyId() : null;\n \n \t\tauditEvent.setUser(request.getUser());\n \t\tauditEvent.setResourcePath(pathToBeValidated);",
                "raw_url": "https://github.com/apache/ranger/raw/1e8dc41a82e2217a5c10a67c8f6bb58b6e06342e/hdfs-agent/src/main/java/org/apache/hadoop/hdfs/server/namenode/RangerFSPermissionChecker.java",
                "sha": "9cf57a9332ed7e55d96a855f7396b9d3d5c51a38",
                "status": "modified"
            }
        ],
        "message": "RANGER-203: fix NPE while getting policyId from the result.",
        "parent": "https://github.com/apache/ranger/commit/6a803eaa1a569753974e2c550a58fa1c2cf7e443",
        "patched_files": [
            "RangerFSPermissionChecker.java"
        ],
        "repo": "ranger",
        "unit_tests": [
            "TestRangerFSPermissionChecker.java"
        ]
    },
    "ranger_29f8f20": {
        "bug_id": "ranger_29f8f20",
        "commit": "https://github.com/apache/ranger/commit/29f8f2027f7703dcb144f4bd87499fe3d8459a88",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/ranger/blob/29f8f2027f7703dcb144f4bd87499fe3d8459a88/security-admin/src/main/java/org/apache/ranger/service/RangerServiceDefService.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/RangerServiceDefService.java?ref=29f8f2027f7703dcb144f4bd87499fe3d8459a88",
                "deletions": 2,
                "filename": "security-admin/src/main/java/org/apache/ranger/service/RangerServiceDefService.java",
                "patch": "@@ -26,6 +26,7 @@\n import org.apache.ranger.common.SortField;\n import org.apache.ranger.common.SearchField.DATA_TYPE;\n import org.apache.ranger.common.SearchField.SEARCH_TYPE;\n+import org.apache.ranger.common.UserSessionBase;\n import org.apache.ranger.entity.XXContextEnricherDef;\n import org.apache.ranger.entity.XXAccessTypeDef;\n import org.apache.ranger.entity.XXEnumDef;\n@@ -158,13 +159,14 @@ public RangerServiceDef getPopulatedViewObject(XXServiceDef xServiceDef) {\n \t\treturn this.populateViewBean(xServiceDef);\n \t}\n \t@Override\n-\t@SuppressWarnings(\"unchecked\")\n \tpublic RangerServiceDefList searchRangerServiceDefs(SearchFilter searchFilter) {\n \t\tList<RangerServiceDef> serviceDefList = new ArrayList<RangerServiceDef>();\n \t\tRangerServiceDefList retList = new RangerServiceDefList();\n \n \t\tList<XXServiceDef> xSvcDefList = (List<XXServiceDef>) searchResources(searchFilter, searchFields, sortFields, retList);\n-\t\tList<String> userRoleList = ContextUtil.getCurrentUserSession().getUserRoleList();\n+\t\tUserSessionBase sessionBase = ContextUtil.getCurrentUserSession();\n+\t\tList<String> userRoleList = (sessionBase != null) ? sessionBase.getUserRoleList() : null;\n+\n \t\tfor (XXServiceDef xSvcDef : xSvcDefList) {\n \t\t\tif(userRoleList != null && !userRoleList.contains(RangerConstants.ROLE_KEY_ADMIN)){\n \t\t\t\tif(xSvcDef!=null && !\"KMS\".equalsIgnoreCase(xSvcDef.getName())){",
                "raw_url": "https://github.com/apache/ranger/raw/29f8f2027f7703dcb144f4bd87499fe3d8459a88/security-admin/src/main/java/org/apache/ranger/service/RangerServiceDefService.java",
                "sha": "33a2da375790d6a75ef9a0fbf70029e563ade6bb",
                "status": "modified"
            }
        ],
        "message": "NPE fix\n\nSigned-off-by: sneethiraj <sneethir@apache.org>",
        "parent": "https://github.com/apache/ranger/commit/ab4683eb1fa325494b36b516ef2d80a2962f4548",
        "patched_files": [
            "RangerServiceDefService.java"
        ],
        "repo": "ranger",
        "unit_tests": [
            "TestRangerServiceDefService.java"
        ]
    },
    "ranger_2a3ada0": {
        "bug_id": "ranger_2a3ada0",
        "commit": "https://github.com/apache/ranger/commit/2a3ada00603b17093678a78c4106ca91a4b5a2fd",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ranger/blob/2a3ada00603b17093678a78c4106ca91a4b5a2fd/agents-common/src/main/java/org/apache/ranger/plugin/client/HadoopConfigHolder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/client/HadoopConfigHolder.java?ref=2a3ada00603b17093678a78c4106ca91a4b5a2fd",
                "deletions": 1,
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/client/HadoopConfigHolder.java",
                "patch": "@@ -293,7 +293,7 @@ private void initLoginInfo() {\n \t\tif (prop != null) {\n \t\t\tuserName = prop.getProperty(RANGER_LOGIN_USER_NAME_PROP);\n \t\t\tkeyTabFile = prop.getProperty(RANGER_LOGIN_KEYTAB_FILE_PROP);\n-\t\t\tif (!StringUtils.isEmpty(prop.getProperty(ENABLE_HIVE_METASTORE_LOOKUP).trim())) {\n+\t\t\tif (!StringUtils.isEmpty(prop.getProperty(ENABLE_HIVE_METASTORE_LOOKUP))) {\n \t\t\t\ttry {\n \t\t\t\t\tenableHiveMetastoreLookup = Boolean.valueOf(prop.getProperty(ENABLE_HIVE_METASTORE_LOOKUP,\"false\").trim());\n \t\t\t\t} catch (Exception e) {",
                "raw_url": "https://github.com/apache/ranger/raw/2a3ada00603b17093678a78c4106ca91a4b5a2fd/agents-common/src/main/java/org/apache/ranger/plugin/client/HadoopConfigHolder.java",
                "sha": "fabbdcbb0b007852aaaa854cbe9df6074598f0e6",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ranger/blob/2a3ada00603b17093678a78c4106ca91a4b5a2fd/hdfs-agent/src/main/java/org/apache/ranger/services/hdfs/client/HdfsClient.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/hdfs-agent/src/main/java/org/apache/ranger/services/hdfs/client/HdfsClient.java?ref=2a3ada00603b17093678a78c4106ca91a4b5a2fd",
                "deletions": 2,
                "filename": "hdfs-agent/src/main/java/org/apache/ranger/services/hdfs/client/HdfsClient.java",
                "patch": "@@ -53,7 +53,7 @@ public HdfsClient(String serviceName, Map<String,String> connectionProperties) {\n     for (Map.Entry<String, String> entry: connectionProperties.entrySet())  {\n       String key = entry.getKey();\n       String value = entry.getValue();\n-      if (!rangerInternalPropertyKeys.contains(key)) {\n+      if (!rangerInternalPropertyKeys.contains(key) && value != null) {\n         conf.set(key, value);\n       }\n     }\n@@ -253,7 +253,7 @@ public static void validateConnectionConfigs(Map<String, String> configs)\n \t  String lookupPrincipal=null;\n \t  try{\n \t\t  lookupPrincipal = SecureClientLogin.getPrincipal(configs.get(\"lookupprincipal\"), java.net.InetAddress.getLocalHost().getCanonicalHostName());\n-\t  }catch(Exception e){\t\n+\t  }catch(Exception e){\n \t\t  //do nothing\n \t  }\n \t  String lookupKeytab = configs.get(\"lookupkeytab\");",
                "raw_url": "https://github.com/apache/ranger/raw/2a3ada00603b17093678a78c4106ca91a4b5a2fd/hdfs-agent/src/main/java/org/apache/ranger/services/hdfs/client/HdfsClient.java",
                "sha": "cd5c0130c46c9d03fd863a04acac7feeb6ebdb71",
                "status": "modified"
            }
        ],
        "message": "RANGER-1530 - NPE in HadoopConfigHolder",
        "parent": "https://github.com/apache/ranger/commit/770f274d04f1a438b90d3cb6643d587558f6bbf7",
        "patched_files": [
            "HdfsClient.java"
        ],
        "repo": "ranger",
        "unit_tests": [
            "HdfsClientTest.java"
        ]
    },
    "ranger_8744627": {
        "bug_id": "ranger_8744627",
        "commit": "https://github.com/apache/ranger/commit/87446272e0e3678463aad96770c7f957f1d9418b",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/ranger/blob/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/biz/AssetMgr.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/biz/AssetMgr.java?ref=87446272e0e3678463aad96770c7f957f1d9418b",
                "deletions": 7,
                "filename": "security-admin/src/main/java/org/apache/ranger/biz/AssetMgr.java",
                "patch": "@@ -1047,13 +1047,15 @@ public VXAsset createXAsset(VXAsset vXAsset) {\n \t\t\txaBizUtil.createTrxLog(trxLogList);\n \t\t\treturn createdVXAsset;\n \t\t} else {\n-\t\t\tlogger.debug(\"User id : \" + usb.getUserId() + \" doesn't have \"\n-\t\t\t\t\t+ \"admin access to create repository.\");\n-\t\t\tthrow restErrorUtil\n-\t\t\t\t\t.createRESTException(\n-\t\t\t\t\t\t\t\"Sorry, you don't have permission to perform the operation\",\n-\t\t\t\t\t\t\tMessageEnums.OPER_NOT_ALLOWED_FOR_ENTITY);\n-\t\t}\n+                logger.debug(\"User id : \" + (usb != null ? usb.getUserId() : \"<UNKNOWN>\") + \" doesn't have \"\n+                        + \"admin access to create repository.\");\n+\n+                throw restErrorUtil\n+                        .createRESTException(\n+                                \"Sorry, you don't have permission to perform the operation\",\n+                                MessageEnums.OPER_NOT_ALLOWED_FOR_ENTITY);\n+\n+        }\n \t}\n \n \tprivate void createDefaultPolicy(VXAsset vXAsset, String config) {",
                "raw_url": "https://github.com/apache/ranger/raw/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/biz/AssetMgr.java",
                "sha": "9d112561ffb9c8612feeb3cb63cc6d1ee447ba1d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ranger/blob/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/biz/UserMgr.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/biz/UserMgr.java?ref=87446272e0e3678463aad96770c7f957f1d9418b",
                "deletions": 2,
                "filename": "security-admin/src/main/java/org/apache/ranger/biz/UserMgr.java",
                "patch": "@@ -1038,8 +1038,7 @@ public VXPortalUser createDefaultAccountUser(VXPortalUser userProfile) {\n \t\t\tif (!session.isUserAdmin()) {\n \t\t\t\tthrow restErrorUtil.create403RESTException(\"User \"\n \t\t\t\t\t\t+ \"creation denied. LoggedInUser=\"\n-\t\t\t\t\t\t+ (session != null ? session.getXXPortalUser().getId()\n-\t\t\t\t\t\t\t\t: \"Not Logged In\")\n+\t\t\t\t\t\t+ session.getXXPortalUser().getId()\n \t\t\t\t\t\t+ \" ,isn't permitted to perform the action.\");\n \n \t\t\t}",
                "raw_url": "https://github.com/apache/ranger/raw/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/biz/UserMgr.java",
                "sha": "78c6c001a55daeaf7d0c204d7faabc7f2a36390a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ranger/blob/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/biz/XUserMgr.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/biz/XUserMgr.java?ref=87446272e0e3678463aad96770c7f957f1d9418b",
                "deletions": 1,
                "filename": "security-admin/src/main/java/org/apache/ranger/biz/XUserMgr.java",
                "patch": "@@ -217,7 +217,7 @@ public VXUser updateXUser(VXUser vXUser) {\n \t\tString hiddenPasswordString = PropertiesUtil.getProperty(\n \t\t\t\t\"xa.password.hidden\", \"*****\");\n \t\tString password = vXUser.getPassword();\n-\t\tif (password != null && password.equals(hiddenPasswordString)) {\n+\t\tif (oldUserProfile != null && password != null && password.equals(hiddenPasswordString)) {\n \t\t\tvXPortalUser.setPassword(oldUserProfile.getPassword());\n \t\t}\n \t\tvXPortalUser.setPassword(password);",
                "raw_url": "https://github.com/apache/ranger/raw/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/biz/XUserMgr.java",
                "sha": "3ed6ff32f916ca04793dc7be1d6f47368f3b9a6f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ranger/blob/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/common/SearchGroup.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/common/SearchGroup.java?ref=87446272e0e3678463aad96770c7f957f1d9418b",
                "deletions": 1,
                "filename": "security-admin/src/main/java/org/apache/ranger/common/SearchGroup.java",
                "patch": "@@ -108,7 +108,7 @@ public String getWhereClause(String prefix) {\n \t */\n \tpublic void resolveValues(Query query, String prefix) {\n \t\tif ((values == null || values.size() == 0)\n-\t\t\t\t&& (searchGroups == null || searchGroups.size() == 0)) {\n+\t\t\t\t|| (searchGroups == null || searchGroups.size() == 0)) {\n \t\t\treturn;\n \t\t}\n ",
                "raw_url": "https://github.com/apache/ranger/raw/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/common/SearchGroup.java",
                "sha": "2c93f8d069006db3539b28ceb5ef3502882b3943",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ranger/blob/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/service/XAuditMapService.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XAuditMapService.java?ref=87446272e0e3678463aad96770c7f957f1d9418b",
                "deletions": 2,
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XAuditMapService.java",
                "patch": "@@ -143,9 +143,9 @@ protected void validateForUpdate(VXAuditMap vObj, XXAuditMap mObj) {\n \n \t@Override\n \tprotected XXAuditMap mapViewToEntityBean(VXAuditMap vObj, XXAuditMap mObj, int OPERATION_CONTEXT) {\n-\t\tsuper.mapViewToEntityBean(vObj, mObj, OPERATION_CONTEXT);\n \t\tif(vObj!=null && mObj!=null){\n-\t\t\tXXPortalUser xXPortalUser=null;\n+            super.mapViewToEntityBean(vObj, mObj, OPERATION_CONTEXT);\n+            XXPortalUser xXPortalUser=null;\n \t\t\tif(mObj.getAddedByUserId()==null || mObj.getAddedByUserId()==0){\n \t\t\t\tif(!stringUtil.isEmpty(vObj.getOwner())){\n \t\t\t\t\txXPortalUser=rangerDaoManager.getXXPortalUser().findByLoginId(vObj.getOwner());\t",
                "raw_url": "https://github.com/apache/ranger/raw/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/service/XAuditMapService.java",
                "sha": "a66928088c649bdff568f6d06cae6938b60a246a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ranger/blob/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/service/XPermMapService.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XPermMapService.java?ref=87446272e0e3678463aad96770c7f957f1d9418b",
                "deletions": 2,
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XPermMapService.java",
                "patch": "@@ -299,9 +299,9 @@ protected XXPermMap mapViewToEntityBean(VXPermMap vObj, XXPermMap mObj, int OPER\n \n \t@Override\n \tprotected VXPermMap mapEntityToViewBean(VXPermMap vObj, XXPermMap mObj) {\n-\t\tsuper.mapEntityToViewBean(vObj, mObj);\n \t\tif(mObj!=null && vObj!=null){\n-\t\t\tXXPortalUser xXPortalUser=null;\n+            super.mapEntityToViewBean(vObj, mObj);\n+            XXPortalUser xXPortalUser=null;\n \t\t\tif(stringUtil.isEmpty(vObj.getOwner())){\n \t\t\t\txXPortalUser= rangerDaoManager.getXXPortalUser().getById(mObj.getAddedByUserId());\t\n \t\t\t\tif(xXPortalUser!=null){",
                "raw_url": "https://github.com/apache/ranger/raw/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/service/XPermMapService.java",
                "sha": "9b8247c05d793f25eafbe365e3ad0db3081f04e9",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/ranger/blob/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/service/XResourceService.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XResourceService.java?ref=87446272e0e3678463aad96770c7f957f1d9418b",
                "deletions": 10,
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XResourceService.java",
                "patch": "@@ -275,7 +275,7 @@ protected void validateForUpdate(VXResource vObj, XXResource mObj) {\n \t\t\t\t\t\t+ \"resource path.\", MessageEnums.INVALID_INPUT_DATA);\n \t\t\t}\n \t\t}\n-\t\tif (!vObj.getName().equalsIgnoreCase(mObj.getName()) || \n+\t\tif (vObj != null && mObj != null && !vObj.getName().equalsIgnoreCase(mObj.getName()) ||\n \t\t\t\tvObj.getIsRecursive()!=mObj.getIsRecursive() || \n \t\t\t\tvObj.getResourceType() != mObj.getResourceType()) {\n \t\t\tvalidateForCreate(vObj);\n@@ -340,8 +340,8 @@ private void populateAssetProperties(VXResource vXResource) {\n \t\t\t\tvXResource.getAssetId());\n \t\tif (xxAsset != null) {\n \t\t\tvXResource.setAssetName(xxAsset.getName());\n-\t\t}\n-\t\tvXResource.setAssetType(xxAsset.getAssetType());\n+            vXResource.setAssetType(xxAsset.getAssetType());\n+        }\n \t}\n \n \tprivate void populateAuditList(VXResource vXResource) {\n@@ -451,22 +451,22 @@ protected XXResource mapViewToEntityBean(VXResource vObj, XXResource mObj, int O\n \n \t@Override\n \tprotected VXResource mapEntityToViewBean(VXResource vObj, XXResource mObj) {\n-\t\tsuper.mapEntityToViewBean(vObj, mObj);\n-\t\tvObj.setUdfs(mObj.getUdfs());\n-\t\tpopulateAssetProperties(vObj);\n-\t\tif(mObj!=null && vObj!=null){\t\t\t\n+        if(mObj!=null && vObj!=null){\n+            super.mapEntityToViewBean(vObj, mObj);\n+\t\t    vObj.setUdfs(mObj.getUdfs());\n+\t\t    populateAssetProperties(vObj);\n \t\t\tXXPortalUser xXPortalUser= null;\n \t\t\tif(stringUtil.isEmpty(vObj.getOwner())){\n-\t\t\t\txXPortalUser=rangerDaoManager.getXXPortalUser().getById(mObj.getAddedByUserId());\t\t\n+\t\t\t\txXPortalUser=rangerDaoManager.getXXPortalUser().getById(mObj.getAddedByUserId());\n \t\t\t\tif(xXPortalUser!=null){\n \t\t\t\t\tvObj.setOwner(xXPortalUser.getLoginId());\n \t\t\t\t}\n \t\t\t}\n \t\t\tif(stringUtil.isEmpty(vObj.getUpdatedBy())){\n-\t\t\t\txXPortalUser= rangerDaoManager.getXXPortalUser().getById(mObj.getUpdatedByUserId());\t\t\n+\t\t\t\txXPortalUser= rangerDaoManager.getXXPortalUser().getById(mObj.getUpdatedByUserId());\n \t\t\t\tif(xXPortalUser!=null){\n \t\t\t\t\tvObj.setUpdatedBy(xXPortalUser.getLoginId());\n-\t\t\t\t}\t\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\treturn vObj;",
                "raw_url": "https://github.com/apache/ranger/raw/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/service/XResourceService.java",
                "sha": "a7e2f12dada4560738249bb64e6587ee4d0d2bd5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ranger/blob/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/service/XUserService.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XUserService.java?ref=87446272e0e3678463aad96770c7f957f1d9418b",
                "deletions": 4,
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XUserService.java",
                "patch": "@@ -261,10 +261,8 @@ private void populateUserAttributes(String userName, VXUser vObj) {\n \n \tpublic List<XXTrxLog> getTransactionLog(VXUser vObj, VXPortalUser mObj,\n \t\t\tString action) {\n-\t\tif (vObj == null\n-\t\t\t\t&& (action == null || !action.equalsIgnoreCase(\"update\"))) {\n-\t\t\treturn null;\n-\t\t}\n+\t\tif (vObj == null || action == null || (action.equalsIgnoreCase(\"update\") && mObj == null))\n+\t    \t\treturn null;\n \n \t\tList<XXTrxLog> trxLogList = new ArrayList<XXTrxLog>();\n \t\ttry {",
                "raw_url": "https://github.com/apache/ranger/raw/87446272e0e3678463aad96770c7f957f1d9418b/security-admin/src/main/java/org/apache/ranger/service/XUserService.java",
                "sha": "d847ca077008c3b3ea10ab40129ee675af06a6cb",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ranger/blob/87446272e0e3678463aad96770c7f957f1d9418b/storm-agent/src/main/java/org/apache/ranger/services/storm/client/StormClient.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/storm-agent/src/main/java/org/apache/ranger/services/storm/client/StormClient.java?ref=87446272e0e3678463aad96770c7f957f1d9418b",
                "deletions": 2,
                "filename": "storm-agent/src/main/java/org/apache/ranger/services/storm/client/StormClient.java",
                "patch": "@@ -366,8 +366,7 @@ public static StormClient getStormClient(String serviceName,\n \t\t\t}\n \n \t\t\tif (topologyName != null) {\n-\t\t\t\tString finalTopologyNameMatching = (topologyName == null) ? \"\"\n-\t\t\t\t\t\t: topologyName.trim();\n+\t\t\t\tString finalTopologyNameMatching = topologyName.trim();\n \t\t\t\tresultList = stormClient\n \t\t\t\t\t\t.getTopologyList(finalTopologyNameMatching,stormTopologyList);\n \t\t\t\tif (resultList != null) {",
                "raw_url": "https://github.com/apache/ranger/raw/87446272e0e3678463aad96770c7f957f1d9418b/storm-agent/src/main/java/org/apache/ranger/services/storm/client/StormClient.java",
                "sha": "2b62c4f499a4c24a69ac0fd93c7f476e263a1998",
                "status": "modified"
            }
        ],
        "message": "Mainly potential NPE problems in security-admin process.\n\nSigned-off-by: Madhan Neethiraj <madhan@apache.org>",
        "parent": "https://github.com/apache/ranger/commit/24543ec1d171134f33bdd2544299b7ce2eec2c9d",
        "patched_files": [
            "XUserMgr.java",
            "AssetMgr.java",
            "UserMgr.java"
        ],
        "repo": "ranger",
        "unit_tests": [
            "TestAssetMgr.java",
            "TestXUserMgr.java",
            "TestUserMgr.java"
        ]
    },
    "ranger_87d97cd": {
        "bug_id": "ranger_87d97cd",
        "commit": "https://github.com/apache/ranger/commit/87d97cd14903b1bada33225081ec67d0ea6079da",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/ranger/blob/87d97cd14903b1bada33225081ec67d0ea6079da/agents-common/src/main/java/org/apache/ranger/plugin/policyevaluator/RangerDefaultPolicyEvaluator.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/policyevaluator/RangerDefaultPolicyEvaluator.java?ref=87d97cd14903b1bada33225081ec67d0ea6079da",
                "deletions": 1,
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/policyevaluator/RangerDefaultPolicyEvaluator.java",
                "patch": "@@ -71,7 +71,9 @@ public void init(RangerPolicy policy, RangerServiceDef serviceDef, RangerPolicyE\n \t\t}\n \n \t\tStringBuffer perfTagBuffer = new StringBuffer();\n-\t\tperfTagBuffer.append(\"policyId=\").append(policy.getId()).append(\", policyName=\").append(policy.getName());\n+\t\tif (policy != null) {\n+\t\t\tperfTagBuffer.append(\"policyId=\").append(policy.getId()).append(\", policyName=\").append(policy.getName());\n+\t\t}\n \n \t\tperfTag = perfTagBuffer.toString();\n ",
                "raw_url": "https://github.com/apache/ranger/raw/87d97cd14903b1bada33225081ec67d0ea6079da/agents-common/src/main/java/org/apache/ranger/plugin/policyevaluator/RangerDefaultPolicyEvaluator.java",
                "sha": "93fbcd4464112d2e4733e82ac4a5c43b8a1fed08",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/ranger/blob/87d97cd14903b1bada33225081ec67d0ea6079da/agents-common/src/main/java/org/apache/ranger/plugin/store/AbstractTagStore.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/store/AbstractTagStore.java?ref=87d97cd14903b1bada33225081ec67d0ea6079da",
                "deletions": 17,
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/store/AbstractTagStore.java",
                "patch": "@@ -113,32 +113,35 @@ public void deleteAllTagObjectsForService(String serviceName, boolean isResoureP\n \n \t\tList<RangerServiceResource> serviceResources = getServiceResourcesByService(serviceName);\n \n-\t\tSet<Long> tagsToDelete = new HashSet<Long>();\n+\t\tif (serviceResources != null) {\n \n+\t\t\tSet<Long> tagsToDelete = new HashSet<Long>();\n \n-\t\tfor (RangerServiceResource serviceResource : serviceResources) {\n-\t\t\tLong resourceId = serviceResource.getId();\n \n-\t\t\tList<RangerTagResourceMap> tagResourceMapsForService = getTagResourceMapsForResourceId(resourceId);\n+\t\t\tfor (RangerServiceResource serviceResource : serviceResources) {\n+\t\t\t\tLong resourceId = serviceResource.getId();\n \n-\t\t\tif (isResourePrivateTag) {\n+\t\t\t\tList<RangerTagResourceMap> tagResourceMapsForService = getTagResourceMapsForResourceId(resourceId);\n+\n+\t\t\t\tif (isResourePrivateTag) {\n+\t\t\t\t\tfor (RangerTagResourceMap tagResourceMap : tagResourceMapsForService) {\n+\t\t\t\t\t\tLong tagId = tagResourceMap.getTagId();\n+\t\t\t\t\t\tRangerTag tag = getTag(tagId);\n+\t\t\t\t\t\ttagsToDelete.add(tag.getId());\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t\tfor (RangerTagResourceMap tagResourceMap : tagResourceMapsForService) {\n-\t\t\t\t\tLong tagId = tagResourceMap.getTagId();\n-\t\t\t\t\tRangerTag tag = getTag(tagId);\n-\t\t\t\t\ttagsToDelete.add(tag.getId());\n+\t\t\t\t\tdeleteTagResourceMap(tagResourceMap.getId());\n \t\t\t\t}\n \t\t\t}\n-\t\t\tfor (RangerTagResourceMap tagResourceMap : tagResourceMapsForService) {\n-\t\t\t\tdeleteTagResourceMap(tagResourceMap.getId());\n-\t\t\t}\n-\t\t}\n \n-\t\tfor (RangerServiceResource serviceResource : serviceResources) {\n-\t\t\tdeleteServiceResource(serviceResource.getId());\n-\t\t}\n+\t\t\tfor (RangerServiceResource serviceResource : serviceResources) {\n+\t\t\t\tdeleteServiceResource(serviceResource.getId());\n+\t\t\t}\n \n-\t\tfor (Long tagId : tagsToDelete) {\n-\t\t\tdeleteTag(tagId);\n+\t\t\tfor (Long tagId : tagsToDelete) {\n+\t\t\t\tdeleteTag(tagId);\n+\t\t\t}\n \t\t}\n \n \t\tif (LOG.isDebugEnabled()) {",
                "raw_url": "https://github.com/apache/ranger/raw/87d97cd14903b1bada33225081ec67d0ea6079da/agents-common/src/main/java/org/apache/ranger/plugin/store/AbstractTagStore.java",
                "sha": "43d2254cb061da18343041cffea70e53b80c5966",
                "status": "modified"
            }
        ],
        "message": "RANGER-753: Fixed a potential NPE introduced in Optimize Tag Download Performance\n\nSigned-off-by: Madhan Neethiraj <madhan@apache.org>",
        "parent": "https://github.com/apache/ranger/commit/cd234cd617090f1a23e61e78bfe17219e54a2eca",
        "patched_files": [
            "RangerDefaultPolicyEvaluator.java"
        ],
        "repo": "ranger",
        "unit_tests": [
            "RangerDefaultPolicyEvaluatorTest.java"
        ]
    },
    "ranger_8e1e54e": {
        "bug_id": "ranger_8e1e54e",
        "commit": "https://github.com/apache/ranger/commit/8e1e54e6518ea7e485cd3ec580f9ccc9ab82b4bf",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ranger/blob/8e1e54e6518ea7e485cd3ec580f9ccc9ab82b4bf/security-admin/src/main/java/org/apache/ranger/entity/XXTagAttributeDef.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/entity/XXTagAttributeDef.java?ref=8e1e54e6518ea7e485cd3ec580f9ccc9ab82b4bf",
                "deletions": 2,
                "filename": "security-admin/src/main/java/org/apache/ranger/entity/XXTagAttributeDef.java",
                "patch": "@@ -41,8 +41,8 @@\n \tprivate static final long serialVersionUID = 1L;\n \n \t@Id\n-\t@SequenceGenerator(name = \"X_SERVICE_RESOURCE_ELEMENT_SEQ\", sequenceName = \"X_SERVICE_RESOURCE_ELEMENT_SEQ\", allocationSize = 1)\n-\t@GeneratedValue(strategy = GenerationType.AUTO, generator = \"X_SERVICE_RESOURCE_ELEMENT_SEQ\")\n+\t@SequenceGenerator(name = \"X_TAG_ATTR_DEF_SEQ\", sequenceName = \"X_TAG_ATTR_DEF_SEQ\", allocationSize = 1)\n+\t@GeneratedValue(strategy = GenerationType.AUTO, generator = \"X_TAG_ATTR_DEF_SEQ\")\n \t@Column(name = \"id\")\n \tprotected Long id;\n ",
                "raw_url": "https://github.com/apache/ranger/raw/8e1e54e6518ea7e485cd3ec580f9ccc9ab82b4bf/security-admin/src/main/java/org/apache/ranger/entity/XXTagAttributeDef.java",
                "sha": "64591283533d7d4f96f3baa0660d984cc28a7afd",
                "status": "modified"
            },
            {
                "additions": 47,
                "blob_url": "https://github.com/apache/ranger/blob/8e1e54e6518ea7e485cd3ec580f9ccc9ab82b4bf/security-admin/src/test/java/org/apache/ranger/rest/TestServiceREST.java",
                "changes": 75,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/test/java/org/apache/ranger/rest/TestServiceREST.java?ref=8e1e54e6518ea7e485cd3ec580f9ccc9ab82b4bf",
                "deletions": 28,
                "filename": "security-admin/src/test/java/org/apache/ranger/rest/TestServiceREST.java",
                "patch": "@@ -703,7 +703,6 @@ public void test15revokeAccess() throws Exception {\n \n \t@Test\n \tpublic void test16createPolicyFalse() throws Exception {\n-\n \t\tRangerPolicy rangerPolicy = rangerPolicy();\n \t\tRangerServiceDef rangerServiceDef = rangerServiceDef();\n \n@@ -730,29 +729,36 @@ public void test16createPolicyFalse() throws Exception {\n \t\trangerAccessTypeDefObj.setName(\"read\");\n \t\trangerAccessTypeDefObj.setRbKeyLabel(null);\n \t\trangerAccessTypeDefList.add(rangerAccessTypeDefObj);\n+\t\tXXServiceDef xServiceDef = serviceDef();\n+\t\tXXService xService = xService();\n+\t\tXXServiceDefDao xServiceDefDao = Mockito.mock(XXServiceDefDao.class);\n+\t\tXXServiceDao xServiceDao = Mockito.mock(XXServiceDao.class);\n \n \t\tMockito.when(\n \t\t\t\tsvcStore.getServicePoliciesIfUpdated(Mockito.anyString(),\n \t\t\t\t\t\tMockito.anyLong())).thenReturn(servicePolicies);\n \t\tMockito.when(validatorFactory.getPolicyValidator(svcStore)).thenReturn(\n \t\t\t\tpolicyValidator);\n-\t\tMockito.when(bizUtil.isAdmin()).thenReturn(false);\n+\t\tMockito.when(bizUtil.isAdmin()).thenReturn(true);\n \t\tMockito.when(bizUtil.getCurrentUserLoginId()).thenReturn(userName);\n \t\tMockito.when(userMgr.getGroupsForUser(userName)).thenReturn(\n \t\t\t\tuserGroupsList);\n-\n-\t\tMockito.when(restErrorUtil.createRESTException((String)null))\n-\t\t\t\t.thenThrow(new WebApplicationException());\n-\t\tthrown.expect(WebApplicationException.class);\n+\t\tMockito.when(daoManager.getXXService()).thenReturn(xServiceDao);\n+\t\tMockito.when(xServiceDao.findByName(Mockito.anyString())).thenReturn(\n+\t\t\t\txService);\n+\t\tMockito.when(daoManager.getXXServiceDef()).thenReturn(xServiceDefDao);\n+\t\tMockito.when(xServiceDefDao.getById(xService.getType())).thenReturn(\n+\t\t\t\txServiceDef);\n+\t\tMockito.when(svcStore.createPolicy((RangerPolicy) Mockito.anyObject()))\n+\t\t\t\t.thenReturn(rangPolicy);\n \n \t\tRangerPolicy dbRangerPolicy = serviceREST.createPolicy(rangerPolicy);\n \t\tAssert.assertNotNull(dbRangerPolicy);\n-\t\tMockito.verify(svcStore).getServicePoliciesIfUpdated(\n-\t\t\t\tMockito.anyString(), Mockito.anyLong());\n-\t\tMockito.verify(bizUtil).getCurrentUserLoginId();\n-\t\tMockito.verify(bizUtil).isAdmin();\n-\t\tMockito.verify(userMgr).getGroupsForUser(userName);\n+\t\tMockito.verify(bizUtil, Mockito.times(2)).isAdmin();\n \t\tMockito.verify(validatorFactory).getPolicyValidator(svcStore);\n+\n+\t\tMockito.verify(daoManager).getXXService();\n+\t\tMockito.verify(daoManager).getXXServiceDef();\n \t}\n \n \t@Test\n@@ -770,16 +776,21 @@ public void test17updatePolicyFalse() throws Exception {\n \t\trangerAccessTypeDefObj.setName(\"read\");\n \t\trangerAccessTypeDefObj.setRbKeyLabel(null);\n \t\trangerAccessTypeDefList.add(rangerAccessTypeDefObj);\n+\t\tXXServiceDef xServiceDef = serviceDef();\n+\t\tXXService xService = xService();\n+\t\tXXServiceDefDao xServiceDefDao = Mockito.mock(XXServiceDefDao.class);\n+\t\tXXServiceDao xServiceDao = Mockito.mock(XXServiceDao.class);\n+\n \t\tMockito.when(validatorFactory.getPolicyValidator(svcStore)).thenReturn(\n \t\t\t\tpolicyValidator);\n-\t\tMockito.when(bizUtil.isAdmin()).thenReturn(false);\n+\t\tMockito.when(bizUtil.isAdmin()).thenReturn(true);\n \t\tMockito.when(bizUtil.getCurrentUserLoginId()).thenReturn(userName);\n \t\tMockito.when(userMgr.getGroupsForUser(userName)).thenReturn(\n \t\t\t\tuserGroupsList);\n-\n-\t\tMockito.when(restErrorUtil.createRESTException((String)null))\n-\t\t\t\t.thenThrow(new WebApplicationException());\n-\t\tthrown.expect(WebApplicationException.class);\n+\t\tMockito.when(daoManager.getXXService()).thenReturn(xServiceDao);\n+\t\tMockito.when(xServiceDao.findByName(Mockito.anyString())).thenReturn(xService);\n+\t\tMockito.when(daoManager.getXXServiceDef()).thenReturn(xServiceDefDao);\n+\t\tMockito.when(xServiceDefDao.getById(xService.getType())).thenReturn(xServiceDef);\n \t\tRangerPolicy dbRangerPolicy = serviceREST.updatePolicy(rangerPolicy);\n \t\tAssert.assertNull(dbRangerPolicy);\n \t\tMockito.verify(validatorFactory).getPolicyValidator(svcStore);\n@@ -803,16 +814,20 @@ public void test18deletePolicyFalse() throws Exception {\n \t\trangerAccessTypeDefObj.setName(\"read\");\n \t\trangerAccessTypeDefObj.setRbKeyLabel(null);\n \t\trangerAccessTypeDefList.add(rangerAccessTypeDefObj);\n+\t\tXXServiceDef xServiceDef = serviceDef();\n+\t\tXXService xService = xService();\n+\t\tXXServiceDefDao xServiceDefDao = Mockito.mock(XXServiceDefDao.class);\n+\t\tXXServiceDao xServiceDao = Mockito.mock(XXServiceDao.class);\n \t\tMockito.when(validatorFactory.getPolicyValidator(svcStore)).thenReturn(\n \t\t\t\tpolicyValidator);\n-\t\tMockito.when(bizUtil.isAdmin()).thenReturn(false);\n+\t\tMockito.when(bizUtil.isAdmin()).thenReturn(true);\n \t\tMockito.when(bizUtil.getCurrentUserLoginId()).thenReturn(userName);\n-\t\tMockito.when(userMgr.getGroupsForUser(userName)).thenReturn(\n-\t\t\t\tuserGroupsList);\n-\n-\t\tMockito.when(restErrorUtil.createRESTException((String)null))\n-\t\t\t\t.thenThrow(new WebApplicationException());\n-\t\tthrown.expect(WebApplicationException.class);\n+\t\tMockito.when(userMgr.getGroupsForUser(userName)).thenReturn(userGroupsList);\n+\t\tMockito.when(svcStore.getPolicy(Id)).thenReturn(rangerPolicy);\n+\t\tMockito.when(daoManager.getXXService()).thenReturn(xServiceDao);\n+\t\tMockito.when(xServiceDao.findByName(Mockito.anyString())).thenReturn(xService);\n+\t\tMockito.when(daoManager.getXXServiceDef()).thenReturn(xServiceDefDao);\n+\t\tMockito.when(xServiceDefDao.getById(xService.getType())).thenReturn(xServiceDef);\n \t\tserviceREST.deletePolicy(rangerPolicy.getId());\n \t\tMockito.verify(validatorFactory).getPolicyValidator(svcStore);\n \t}\n@@ -834,16 +849,20 @@ public void test19getPolicyFalse() throws Exception {\n \t\trangerAccessTypeDefObj.setName(\"read\");\n \t\trangerAccessTypeDefObj.setRbKeyLabel(null);\n \t\trangerAccessTypeDefList.add(rangerAccessTypeDefObj);\n+\t\tXXServiceDef xServiceDef = serviceDef();\n+\t\tXXService xService = xService();\n+\t\tXXServiceDefDao xServiceDefDao = Mockito.mock(XXServiceDefDao.class);\n+\t\tXXServiceDao xServiceDao = Mockito.mock(XXServiceDao.class);\n \t\tMockito.when(validatorFactory.getPolicyValidator(svcStore)).thenReturn(\n \t\t\t\tpolicyValidator);\n-\t\tMockito.when(bizUtil.isAdmin()).thenReturn(false);\n+\t\tMockito.when(bizUtil.isAdmin()).thenReturn(true);\n \t\tMockito.when(bizUtil.getCurrentUserLoginId()).thenReturn(userName);\n \t\tMockito.when(userMgr.getGroupsForUser(userName)).thenReturn(\n \t\t\t\tuserGroupsList);\n-\n-\t\tMockito.when(restErrorUtil.createRESTException((String)null))\n-\t\t\t\t.thenThrow(new WebApplicationException());\n-\t\tthrown.expect(WebApplicationException.class);\n+\t\tMockito.when(daoManager.getXXService()).thenReturn(xServiceDao);\n+\t\tMockito.when(xServiceDao.findByName(Mockito.anyString())).thenReturn(xService);\n+\t\tMockito.when(daoManager.getXXServiceDef()).thenReturn(xServiceDefDao);\n+\t\tMockito.when(xServiceDefDao.getById(xService.getType())).thenReturn(xServiceDef);\n \t\tRangerPolicy dbRangerPolicy = serviceREST.getPolicy(rangerPolicy\n \t\t\t\t.getId());\n \t\tAssert.assertNotNull(dbRangerPolicy);",
                "raw_url": "https://github.com/apache/ranger/raw/8e1e54e6518ea7e485cd3ec580f9ccc9ab82b4bf/security-admin/src/test/java/org/apache/ranger/rest/TestServiceREST.java",
                "sha": "339f1e7de87b153a0f21036d2cc80d61457aa5d2",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/ranger/blob/8e1e54e6518ea7e485cd3ec580f9ccc9ab82b4bf/security-admin/src/test/java/org/apache/ranger/service/TestRangerServiceDefServiceBase.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/test/java/org/apache/ranger/service/TestRangerServiceDefServiceBase.java?ref=8e1e54e6518ea7e485cd3ec580f9ccc9ab82b4bf",
                "deletions": 3,
                "filename": "security-admin/src/test/java/org/apache/ranger/service/TestRangerServiceDefServiceBase.java",
                "patch": "@@ -26,6 +26,7 @@\n import org.apache.ranger.biz.RangerBizUtil;\n import org.apache.ranger.common.ContextUtil;\n import org.apache.ranger.common.GUIDUtil;\n+import org.apache.ranger.common.JSONUtil;\n import org.apache.ranger.common.MessageEnums;\n import org.apache.ranger.common.RESTErrorUtil;\n import org.apache.ranger.common.RangerSearchUtil;\n@@ -98,6 +99,9 @@\n \t\n \t@Mock\n \tGUIDUtil guidUtil;\n+\t\n+\t@Mock\n+\tJSONUtil jsonUtil;\n \n \t@Rule\n \tpublic ExpectedException thrown = ExpectedException.none();\n@@ -427,17 +431,14 @@ public void test10populateRangerPolicyConditionDefToXX() {\n \t\tserviceDefObj.setDescription(\"HDFS Repository\");\n \t\tserviceDefObj.setGuid(\"1427365526516_835_0\");\n \t\tserviceDefObj.setId(Id);\n-\n \t\tMockito.when(\n \t\t\t\t(XXPolicyConditionDef) rangerAuditFields.populateAuditFields(\n \t\t\t\t\t\tpolicyConditionDefObj, serviceDefObj)).thenReturn(\n \t\t\t\tpolicyConditionDefObj);\n-\n \t\tXXPolicyConditionDef dbPolicyConditionDef = rangerServiceDefService\n \t\t\t\t.populateRangerPolicyConditionDefToXX(rangerConditionDefvObj,\n \t\t\t\t\t\tpolicyConditionDefObj, serviceDefObj, 1);\n \t\tAssert.assertNotNull(dbPolicyConditionDef);\n-\t\tAssert.assertEquals(dbPolicyConditionDef, policyConditionDefObj);\n \t\tAssert.assertEquals(dbPolicyConditionDef.getName(),\n \t\t\t\tpolicyConditionDefObj.getName());\n \t\tAssert.assertEquals(dbPolicyConditionDef.getDescription(),",
                "raw_url": "https://github.com/apache/ranger/raw/8e1e54e6518ea7e485cd3ec580f9ccc9ab82b4bf/security-admin/src/test/java/org/apache/ranger/service/TestRangerServiceDefServiceBase.java",
                "sha": "b73a629a5429c35dde65575f068fa4947c34dde4",
                "status": "modified"
            }
        ],
        "message": "RANGER-770 : Fix NullPointerException Unit test cases on master branch",
        "parent": "https://github.com/apache/ranger/commit/f3467abc3dce82c66acaa4530ce8c6d34bb455a2",
        "patched_files": [
            "RangerServiceDefServiceBase.java",
            "XXTagAttributeDef.java",
            "ServiceREST.java"
        ],
        "repo": "ranger",
        "unit_tests": [
            "TestRangerServiceDefServiceBase.java",
            "TestServiceREST.java"
        ]
    },
    "ranger_9f639f3": {
        "bug_id": "ranger_9f639f3",
        "commit": "https://github.com/apache/ranger/commit/9f639f3c5876c7134f43df33467691a2b01735a7",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/ranger/blob/9f639f3c5876c7134f43df33467691a2b01735a7/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java?ref=9f639f3c5876c7134f43df33467691a2b01735a7",
                "deletions": 8,
                "filename": "security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "patch": "@@ -2880,14 +2880,16 @@ public static void persistVersionChange(RangerDaoManager daoMgr, Long id, VERSIO\n \n \t\t} else {\n \t\t\tXXService service = daoMgr.getXXService().getById(id);\n-\t\t\tserviceVersionInfoDbObj = new XXServiceVersionInfo();\n-\t\t\tserviceVersionInfoDbObj.setServiceId(service.getId());\n-\t\t\tserviceVersionInfoDbObj.setPolicyVersion(1L);\n-\t\t\tserviceVersionInfoDbObj.setPolicyUpdateTime(new Date());\n-\t\t\tserviceVersionInfoDbObj.setTagVersion(1L);\n-\t\t\tserviceVersionInfoDbObj.setTagUpdateTime(new Date());\n-\n-\t\t\tserviceVersionInfoDao.create(serviceVersionInfoDbObj);\n+\t\t\tif (service != null) {\n+\t\t\t\tserviceVersionInfoDbObj = new XXServiceVersionInfo();\n+\t\t\t\tserviceVersionInfoDbObj.setServiceId(service.getId());\n+\t\t\t\tserviceVersionInfoDbObj.setPolicyVersion(1L);\n+\t\t\t\tserviceVersionInfoDbObj.setPolicyUpdateTime(new Date());\n+\t\t\t\tserviceVersionInfoDbObj.setTagVersion(1L);\n+\t\t\t\tserviceVersionInfoDbObj.setTagUpdateTime(new Date());\n+\n+\t\t\t\tserviceVersionInfoDao.create(serviceVersionInfoDbObj);\n+\t\t\t}\n \t\t}\n \t}\n ",
                "raw_url": "https://github.com/apache/ranger/raw/9f639f3c5876c7134f43df33467691a2b01735a7/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "sha": "6c699cad9d946c7e125594f93d0f477edb242bfa",
                "status": "modified"
            }
        ],
        "message": "RANGER-2186: Part II - check for NPE when incrementing service-specific policy and tag versions after update transaction is committed",
        "parent": "https://github.com/apache/ranger/commit/46a75938bfa58676044361b597bd52d1496804a0",
        "patched_files": [
            "ServiceDBStore.java"
        ],
        "repo": "ranger",
        "unit_tests": [
            "TestServiceDBStore.java"
        ]
    },
    "ranger_a977585": {
        "bug_id": "ranger_a977585",
        "commit": "https://github.com/apache/ranger/commit/a9775857dcfb36477bd282e97e0a71380ffb700f",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ranger/blob/a9775857dcfb36477bd282e97e0a71380ffb700f/security-admin/src/test/java/org/apache/ranger/rest/TestServiceREST.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/test/java/org/apache/ranger/rest/TestServiceREST.java?ref=a9775857dcfb36477bd282e97e0a71380ffb700f",
                "deletions": 1,
                "filename": "security-admin/src/test/java/org/apache/ranger/rest/TestServiceREST.java",
                "patch": "@@ -89,6 +89,7 @@\n import org.junit.runner.RunWith;\n import org.junit.runners.MethodSorters;\n import org.mockito.InjectMocks;\n+import org.mockito.Matchers;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n import org.mockito.runners.MockitoJUnitRunner;\n@@ -1012,7 +1013,7 @@ public void test30getPolicyFromEventTime() throws Exception {\n \t\tMockito.when(userMgr.getGroupsForUser(userName)).thenReturn(\n \t\t\t\tuserGroupsList);\n \n-\t\tMockito.when(restErrorUtil.createRESTException((String)null))\n+\t\tMockito.when(restErrorUtil.createRESTException(Matchers.anyInt(), Matchers.anyString(), Matchers.anyBoolean()))\n \t\t\t\t.thenThrow(new WebApplicationException());\n \t\tthrown.expect(WebApplicationException.class);\n \t",
                "raw_url": "https://github.com/apache/ranger/raw/a9775857dcfb36477bd282e97e0a71380ffb700f/security-admin/src/test/java/org/apache/ranger/rest/TestServiceREST.java",
                "sha": "7d2b98fce6f50d9f033af86688ced0358784682a",
                "status": "modified"
            }
        ],
        "message": "RANGER-850 Change mocking code of test test30getPolicyFromEventTime to elimate the spurious NPE",
        "parent": "https://github.com/apache/ranger/commit/02b4790aae3e0b3da797499f6a275edb3385bdda",
        "patched_files": [
            "ServiceREST.java"
        ],
        "repo": "ranger",
        "unit_tests": [
            "TestServiceREST.java"
        ]
    },
    "ranger_ab0b91f": {
        "bug_id": "ranger_ab0b91f",
        "commit": "https://github.com/apache/ranger/commit/ab0b91fd666feb034a7a3c06d419d915f8c6721d",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/ranger/blob/ab0b91fd666feb034a7a3c06d419d915f8c6721d/security-admin/src/main/java/org/apache/ranger/common/RangerSearchUtil.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/common/RangerSearchUtil.java?ref=ab0b91fd666feb034a7a3c06d419d915f8c6721d",
                "deletions": 4,
                "filename": "security-admin/src/main/java/org/apache/ranger/common/RangerSearchUtil.java",
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.commons.collections.MapUtils;\n import org.apache.commons.lang.ArrayUtils;\n import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.Validate;\n import org.apache.log4j.Logger;\n import org.apache.ranger.plugin.util.SearchFilter;\n import org.springframework.stereotype.Component;\n@@ -42,7 +43,7 @@\n \tfinal static Logger logger = Logger.getLogger(RangerSearchUtil.class);\n \t\n \tpublic SearchFilter getSearchFilter(@Nonnull HttpServletRequest request, List<SortField> sortFields) {\n-\n+\t\tValidate.notNull(request, \"request\");\n \t\tSearchFilter ret = new SearchFilter();\n \n \t\tif (MapUtils.isEmpty(request.getParameterMap())) {\n@@ -112,9 +113,7 @@ public SearchFilter getSearchFilterFromLegacyRequestForRepositorySearch(HttpServ\n \n \n \tpublic SearchFilter getSearchFilterFromLegacyRequest(HttpServletRequest request, List<SortField> sortFields) {\n-\t\tif (request == null) {\n-\t\t\treturn null;\n-\t\t}\n+\t\tValidate.notNull(request, \"request\");\n \t\tSearchFilter ret = new SearchFilter();\n \n \t\tif (MapUtils.isEmpty(request.getParameterMap())) {",
                "raw_url": "https://github.com/apache/ranger/raw/ab0b91fd666feb034a7a3c06d419d915f8c6721d/security-admin/src/main/java/org/apache/ranger/common/RangerSearchUtil.java",
                "sha": "94374ab2fe4f749326460bb81606cc6115ef2b9f",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/ranger/blob/ab0b91fd666feb034a7a3c06d419d915f8c6721d/security-admin/src/main/java/org/apache/ranger/rest/ServiceREST.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/rest/ServiceREST.java?ref=ab0b91fd666feb034a7a3c06d419d915f8c6721d",
                "deletions": 17,
                "filename": "security-admin/src/main/java/org/apache/ranger/rest/ServiceREST.java",
                "patch": "@@ -2089,7 +2089,7 @@ public void importPoliciesFromFile(\n \t\t\t\t\t\t\tLOG.debug(\"Deleting Policy from provided services in servicesMapJson file...\");\n \t\t\t\t\t\t}\n \t\t\t\t\t\tif (CollectionUtils.isNotEmpty(sourceServices) && CollectionUtils.isNotEmpty(destinationServices)) {\n-\t\t\t\t\t\t\tdeletePoliciesProvidedInServiceMap(sourceServices, destinationServices, null);\n+\t\t\t\t\t\t\tdeletePoliciesProvidedInServiceMap(sourceServices, destinationServices);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \n@@ -2303,16 +2303,14 @@ public void importPoliciesFromFile(\n \t}\n \t\n \tprivate void deletePoliciesProvidedInServiceMap(\n-\t\t\tList<String> sourceServices, List<String> destinationServices,\n-\t\t\tHttpServletRequest request) {\n+\t\t\tList<String> sourceServices, List<String> destinationServices) {\n \t\tint totalDeletedPilicies = 0;\n \t\tif (CollectionUtils.isNotEmpty(sourceServices)\n \t\t\t\t&& CollectionUtils.isNotEmpty(destinationServices)) {\n \t\t\tRangerPolicyValidator validator = validatorFactory.getPolicyValidator(svcStore);\n \t\t\tfor (int i = 0; i < sourceServices.size(); i++) {\n \t\t\t\tif (!destinationServices.get(i).isEmpty()) {\n-\t\t\t\t\tRangerPolicyList servicePolicies = null;\n-\t\t\t\t\tservicePolicies = getServicePoliciesByName(destinationServices.get(i), request);\n+\t\t\t\t\tfinal RangerPolicyList servicePolicies = getServicePolicies(destinationServices.get(i), new SearchFilter());\n \t\t\t\t\tif (servicePolicies != null) {\n \t\t\t\t\t\tList<RangerPolicy> rangerPolicyList = servicePolicies.getPolicies();\n \t\t\t\t\t\tif (CollectionUtils.isNotEmpty(rangerPolicyList)) {\n@@ -2535,11 +2533,20 @@ public RangerPolicyList getServicePoliciesByName(@PathParam(\"name\") String servi\n \t\t\tLOG.debug(\"==> ServiceREST.getServicePolicies(\" + serviceName + \")\");\n \t\t}\n \n-\t\tRangerPolicyList ret  = new RangerPolicyList();\n-\t\tRangerPerfTracer perf = null;\n-\n \t\tSearchFilter filter = searchUtil.getSearchFilter(request, policyService.sortFields);\n \n+\t\tRangerPolicyList ret = getServicePolicies(serviceName, filter);\n+\n+\t\tif (LOG.isDebugEnabled()) {\n+\t\t\tLOG.debug(\"<== ServiceREST.getServicePolicies(\" + serviceName + \"): count=\"\n+\t\t\t\t\t+ (ret == null ? 0 : ret.getListSize()));\n+\t\t}\n+\n+\t\treturn ret;\n+\t}\n+\n+\tprivate RangerPolicyList getServicePolicies(String serviceName, SearchFilter filter) {\n+\t\tRangerPerfTracer perf = null;\n \t\ttry {\n \t\t\tif(RangerPerfTracer.isPerfTraceEnabled(PERF_LOG)) {\n \t\t\t\tperf = RangerPerfTracer.getPerfTracer(PERF_LOG, \"ServiceREST.getServicePolicies(serviceName=\" + serviceName + \")\");\n@@ -2548,7 +2555,7 @@ public RangerPolicyList getServicePoliciesByName(@PathParam(\"name\") String servi\n \t\t\tif(isAdminUserWithNoFilterParams(filter)) {\n \t\t\t\tPList<RangerPolicy> policies = svcStore.getPaginatedServicePolicies(serviceName, filter);\n \n-\t\t\t\tret = toRangerPolicyList(policies);\n+\t\t\t\treturn toRangerPolicyList(policies);\n \t\t\t} else {\n \t\t\t\t// get all policies from the store; pick the page to return after applying filter\n \t\t\t\tint savedStartIndex = filter == null ? 0 : filter.getStartIndex();\n@@ -2568,7 +2575,7 @@ public RangerPolicyList getServicePoliciesByName(@PathParam(\"name\") String servi\n \n \t\t\t\tservicePolicies = applyAdminAccessFilter(servicePolicies);\n \n-\t\t\t\tret = toRangerPolicyList(servicePolicies, filter);\n+\t\t\t\treturn toRangerPolicyList(servicePolicies, filter);\n \t\t\t}\n \t\t} catch(WebApplicationException excp) {\n \t\t\tthrow excp;\n@@ -2579,13 +2586,6 @@ public RangerPolicyList getServicePoliciesByName(@PathParam(\"name\") String servi\n \t\t} finally {\n \t\t\tRangerPerfTracer.log(perf);\n \t\t}\n-\n-\t\tif (LOG.isDebugEnabled()) {\n-\t\t\tLOG.debug(\"<== ServiceREST.getServicePolicies(\" + serviceName + \"): count=\"\n-\t\t\t\t\t+ (ret == null ? 0 : ret.getListSize()));\n-\t\t}\n-\n-\t\treturn ret;\n \t}\n \n \t@GET",
                "raw_url": "https://github.com/apache/ranger/raw/ab0b91fd666feb034a7a3c06d419d915f8c6721d/security-admin/src/main/java/org/apache/ranger/rest/ServiceREST.java",
                "sha": "1bff8158fccdff6a3b67f184797f5d339de9da73",
                "status": "modified"
            }
        ],
        "message": "RANGER-2016 : fix NPE caused by a code path, where a HttpServletRequest is passed as null, and re-introduce the non-null validity check",
        "parent": "https://github.com/apache/ranger/commit/5f6e6ce72e16343c47b5294b93e15b81f4ebf475",
        "patched_files": [
            "ServiceREST.java"
        ],
        "repo": "ranger",
        "unit_tests": [
            "TestServiceREST.java"
        ]
    },
    "ranger_aca4c3b": {
        "bug_id": "ranger_aca4c3b",
        "commit": "https://github.com/apache/ranger/commit/aca4c3b5438e0e52b1e2d24a7e322278d36c7ffc",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/ranger/blob/aca4c3b5438e0e52b1e2d24a7e322278d36c7ffc/agents-common/src/main/java/org/apache/ranger/plugin/model/validation/RangerValidityScheduleValidator.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/model/validation/RangerValidityScheduleValidator.java?ref=aca4c3b5438e0e52b1e2d24a7e322278d36c7ffc",
                "deletions": 10,
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/model/validation/RangerValidityScheduleValidator.java",
                "patch": "@@ -141,7 +141,7 @@ private boolean validateTimeRangeSpec(List<ValidationFailureDetails> validationF\n         for (RangerValidityRecurrence recurrence : validitySchedule.getRecurrences()) {\n             ret = validateValidityInterval(recurrence, validationFailures) && ret;\n \n-            if (RangerValidityRecurrence.ValidityInterval.getValidityIntervalInMinutes(recurrence.getInterval()) > 0) {\n+            if (ret) {\n                 ret = validateFieldSpec(recurrence, RangerValidityRecurrence.RecurrenceSchedule.ScheduleFieldSpec.minute, validationFailures) && ret;\n                 ret = validateFieldSpec(recurrence, RangerValidityRecurrence.RecurrenceSchedule.ScheduleFieldSpec.hour, validationFailures) && ret;\n                 ret = validateFieldSpec(recurrence, RangerValidityRecurrence.RecurrenceSchedule.ScheduleFieldSpec.dayOfMonth, validationFailures) && ret;\n@@ -156,7 +156,6 @@ private boolean validateTimeRangeSpec(List<ValidationFailureDetails> validationF\n                             getNormalizedValue(recurrence, RangerValidityRecurrence.RecurrenceSchedule.ScheduleFieldSpec.month), getNormalizedValue(recurrence, RangerValidityRecurrence.RecurrenceSchedule.ScheduleFieldSpec.year));\n                     RangerValidityRecurrence normalizedRecurrence = new RangerValidityRecurrence(schedule, recurrence.getInterval());\n                     normalizedValiditySchedule.getRecurrences().add(normalizedRecurrence);\n-\n                 }\n             }\n         }\n@@ -174,22 +173,24 @@ private boolean validateTimeZone(String timeZone, List<ValidationFailureDetails>\n     }\n \n     private boolean validateValidityInterval(RangerValidityRecurrence recurrence, List<ValidationFailureDetails> validationFailures) {\n-        boolean ret = true;\n-        RangerValidityRecurrence.ValidityInterval validityInterval = recurrence.getInterval();\n-        if (validityInterval != null) {\n+        boolean ret = recurrence.getInterval() != null && recurrence.getSchedule() != null;\n+\n+        if (ret) {\n+            RangerValidityRecurrence.ValidityInterval validityInterval = recurrence.getInterval();\n+\n             if (validityInterval.getDays() < 0\n-                    || (validityInterval.getHours() < 0 || validityInterval.getHours() > 23)\n-                    || (validityInterval.getMinutes() < 0 || validityInterval.getMinutes() > 59)) {\n+                        || (validityInterval.getHours() < 0 || validityInterval.getHours() > 23)\n+                        || (validityInterval.getMinutes() < 0 || validityInterval.getMinutes() > 59)) {\n                 validationFailures.add(new ValidationFailureDetails(0, \"interval\", \"\", false, true, false, \"invalid interval\"));\n                 ret = false;\n             }\n-        }\n-        int validityIntervalInMinutes = RangerValidityRecurrence.ValidityInterval.getValidityIntervalInMinutes(validityInterval);\n-        if (validityIntervalInMinutes > 0) {\n+\n             if (StringUtils.isBlank(recurrence.getSchedule().getDayOfMonth()) && StringUtils.isBlank(recurrence.getSchedule().getDayOfWeek())) {\n                 validationFailures.add(new ValidationFailureDetails(0, \"validitySchedule\", \"\", false, true, false, \"empty dayOfMonth and dayOfWeek\"));\n                 ret = false;\n             }\n+        } else {\n+\t        validationFailures.add(new ValidationFailureDetails(0, \"recurrence\", \"schedule/interval\", true, true, false, \"empty schedule/interval in recurrence spec\"));\n         }\n         return ret;\n     }",
                "raw_url": "https://github.com/apache/ranger/raw/aca4c3b5438e0e52b1e2d24a7e322278d36c7ffc/agents-common/src/main/java/org/apache/ranger/plugin/model/validation/RangerValidityScheduleValidator.java",
                "sha": "4557b9f0439b84e19251504bb55891c08c49f11b",
                "status": "modified"
            },
            {
                "additions": 69,
                "blob_url": "https://github.com/apache/ranger/blob/aca4c3b5438e0e52b1e2d24a7e322278d36c7ffc/agents-common/src/test/resources/policyengine/validityscheduler/test-validity-schedules-invalid.json",
                "changes": 70,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/test/resources/policyengine/validityscheduler/test-validity-schedules-invalid.json?ref=aca4c3b5438e0e52b1e2d24a7e322278d36c7ffc",
                "deletions": 1,
                "filename": "agents-common/src/test/resources/policyengine/validityscheduler/test-validity-schedules-invalid.json",
                "patch": "@@ -95,7 +95,7 @@\n     \"result\": {\n       \"isValid\": false,\n       \"isApplicable\": false,\n-      \"validationFailureCount\": 1\n+      \"validationFailureCount\": 2\n     }\n   },\n   {\n@@ -143,4 +143,72 @@\n       \"validationFailureCount\": 1\n     }\n   }\n+  ,\n+  {\n+    \"name\": \"schedule blank\",\n+\n+    \"validitySchedules\": [\n+      {\n+        \"startTime\": \"2018/01/12 14:32:00\",\n+        \"endTime\": \"2020/01/23 06:30:00\",\n+        \"recurrences\": [\n+          {\n+            \"interval\": {\"minutes\": 10 }\n+          }\n+        ]\n+      }\n+    ],\n+    \"accessTime\": \"20180112-14:32:27.000-0800\",\n+    \"result\": {\n+      \"isValid\": false,\n+      \"isApplicable\": false,\n+      \"validationFailureCount\": 1\n+    }\n+  }\n+  ,\n+  {\n+    \"name\": \"interval blank\",\n+\n+    \"validitySchedules\": [\n+      {\n+        \"startTime\": \"2018/01/12 14:32:00\",\n+        \"endTime\": \"2020/01/23 06:30:00\",\n+        \"recurrences\": [\n+          {\n+            \"schedule\": {\"minute\": \"45, 30, 1, 14\", \"hour\": \"*, 0,20, 21\", \"dayOfMonth\": \"\", \"dayOfWeek\": \"2\", \"month\": \"12, 1-2\", \"year\": \"2018\"}\n+          }\n+        ]\n+      }\n+    ],\n+    \"accessTime\": \"20180112-14:32:27.000-0800\",\n+    \"result\": {\n+      \"isValid\": false,\n+      \"isApplicable\": false,\n+      \"validationFailureCount\": 1\n+    }\n+  },\n+  {\n+    \"name\": \"schedule and interval blank\",\n+\n+    \"validitySchedules\": [\n+      {\n+        \"startTime\": \"2018/01/12 14:32:00\",\n+        \"endTime\": \"2020/01/23 06:30:00\",\n+        \"recurrences\": [\n+          {\n+            \"schedule\": {\"minute\": \"45, 30, 1, 14\", \"hour\": \"*, 0,20, 21\", \"dayOfMonth\": \"\", \"dayOfWeek\": \"2\", \"month\": \"12, 1-2\", \"year\": \"2018\"}\n+          },\n+          {\n+            \"interval\": {\"minutes\": 10 }\n+          }\n+        ]\n+      }\n+    ],\n+    \"accessTime\": \"20180112-14:32:27.000-0800\",\n+    \"result\": {\n+      \"isValid\": false,\n+      \"isApplicable\": false,\n+      \"validationFailureCount\": 2\n+    }\n+  }\n ]\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/ranger/raw/aca4c3b5438e0e52b1e2d24a7e322278d36c7ffc/agents-common/src/test/resources/policyengine/validityscheduler/test-validity-schedules-invalid.json",
                "sha": "321df659f2e706bca9f9efa1051f0dd336cb171d",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/ranger/blob/aca4c3b5438e0e52b1e2d24a7e322278d36c7ffc/agents-common/src/test/resources/policyengine/validityscheduler/test-validity-schedules-valid-and-applicable.json",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/test/resources/policyengine/validityscheduler/test-validity-schedules-valid-and-applicable.json?ref=aca4c3b5438e0e52b1e2d24a7e322278d36c7ffc",
                "deletions": 3,
                "filename": "agents-common/src/test/resources/policyengine/validityscheduler/test-validity-schedules-valid-and-applicable.json",
                "patch": "@@ -8,15 +8,15 @@\n         \"recurrences\": [\n           {\n             \"schedule\": {\n-              \"minute\": \"60\",\n+              \"minute\": \"30\",\n               \"hour\": \"*\",\n               \"dayOfMonth\": \"*\",\n               \"dayOfWeek\": \"5, 7\",\n               \"month\": \"*\",\n               \"year\": \"2018\"\n             },\n             \"interval\": {\n-              \"minutes\": 0\n+              \"minutes\": 10\n             }\n           }\n         ]\n@@ -45,7 +45,7 @@\n               \"month\": \"*\",\n               \"year\": \"2018\"\n             },\n-            \"inteval\": {\n+            \"interval\": {\n               \"minutes\": 9\n             }\n           }",
                "raw_url": "https://github.com/apache/ranger/raw/aca4c3b5438e0e52b1e2d24a7e322278d36c7ffc/agents-common/src/test/resources/policyengine/validityscheduler/test-validity-schedules-valid-and-applicable.json",
                "sha": "7df6fcfe272a74eec8e8d644fb799b0931370772",
                "status": "modified"
            }
        ],
        "message": "RANGER-2000: NPE in ValiditySchedule validation",
        "parent": "https://github.com/apache/ranger/commit/c85ef54762b94b77fe7ef7b71a97a7acea7e8b26",
        "patched_files": [
            "RangerValidityScheduleValidator.java"
        ],
        "repo": "ranger",
        "unit_tests": [
            "test-validity-schedules-invalid.java",
            "test-validity-schedules-valid-and-applicable.java"
        ]
    },
    "ranger_b1bfbc5": {
        "bug_id": "ranger_b1bfbc5",
        "commit": "https://github.com/apache/ranger/commit/b1bfbc572cd2a2974403abb7c023b5390c21f55d",
        "file": [
            {
                "additions": 59,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/biz/AssetMgr.java",
                "changes": 131,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/biz/AssetMgr.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "deletions": 72,
                "filename": "security-admin/src/main/java/org/apache/ranger/biz/AssetMgr.java",
                "patch": "@@ -68,22 +68,7 @@\n import org.apache.ranger.service.XUserService;\n import org.apache.ranger.solr.SolrAccessAuditsService;\n import org.apache.ranger.util.RestUtil;\n-import org.apache.ranger.view.VXAccessAuditList;\n-import org.apache.ranger.view.VXAsset;\n-import org.apache.ranger.view.VXAuditMap;\n-import org.apache.ranger.view.VXAuditMapList;\n-import org.apache.ranger.view.VXLong;\n-import org.apache.ranger.view.VXPermMap;\n-import org.apache.ranger.view.VXPermMapList;\n-import org.apache.ranger.view.VXPolicy;\n-import org.apache.ranger.view.VXPolicyExportAuditList;\n-import org.apache.ranger.view.VXResource;\n-import org.apache.ranger.view.VXResourceList;\n-import org.apache.ranger.view.VXResponse;\n-import org.apache.ranger.view.VXStringList;\n-import org.apache.ranger.view.VXTrxLog;\n-import org.apache.ranger.view.VXTrxLogList;\n-import org.apache.ranger.view.VXUser;\n+import org.apache.ranger.view.*;\n import org.codehaus.jackson.JsonGenerationException;\n import org.codehaus.jackson.map.JsonMappingException;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -1756,39 +1741,42 @@ public VXTrxLogList getReportLogs(SearchCriteria searchCriteria) {\n \n \tpublic VXAccessAuditList getAccessLogs(SearchCriteria searchCriteria) {\n \n-\t\tif (searchCriteria != null && searchCriteria.getParamList() != null\n-\t\t\t\t&& searchCriteria.getParamList().size() > 0) {\n-\t\t\tint clientTimeOffsetInMinute = RestUtil.getClientTimeOffset();\n-\t\t\tjava.util.Date temp = null;\n-\t\t\tDateUtil dateUtil = new DateUtil();\n-\t\t\tif (searchCriteria.getParamList().containsKey(\"startDate\")) {\n-\t\t\t\ttemp = (java.util.Date) searchCriteria.getParamList().get(\n-\t\t\t\t\t\t\"startDate\");\n-\t\t\t\ttemp = dateUtil.getDateFromGivenDate(temp, 0, 0, 0, 0);\n-\t\t\t\ttemp = dateUtil.addTimeOffset(temp, clientTimeOffsetInMinute);\n-\t\t\t\tsearchCriteria.getParamList().put(\"startDate\", temp);\n-\t\t\t}\n-\t\t\tif (searchCriteria.getParamList().containsKey(\"endDate\")) {\n-\t\t\t\ttemp = (java.util.Date) searchCriteria.getParamList().get(\n-\t\t\t\t\t\t\"endDate\");\n-\t\t\t\ttemp = dateUtil.getDateFromGivenDate(temp, 0, 23, 59, 59);\n-\t\t\t\ttemp = dateUtil.addTimeOffset(temp, clientTimeOffsetInMinute);\n-\t\t\t\tsearchCriteria.getParamList().put(\"endDate\", temp);\n-\t\t\t}\n+        if (searchCriteria == null) {\n+            searchCriteria = new SearchCriteria();\n+        }\n+        if (searchCriteria.getParamList() != null\n+                && searchCriteria.getParamList().size() > 0) {\n+            int clientTimeOffsetInMinute = RestUtil.getClientTimeOffset();\n+            java.util.Date temp = null;\n+            DateUtil dateUtil = new DateUtil();\n+            if (searchCriteria.getParamList().containsKey(\"startDate\")) {\n+                temp = (java.util.Date) searchCriteria.getParamList().get(\n+                        \"startDate\");\n+                temp = dateUtil.getDateFromGivenDate(temp, 0, 0, 0, 0);\n+                temp = dateUtil.addTimeOffset(temp, clientTimeOffsetInMinute);\n+                searchCriteria.getParamList().put(\"startDate\", temp);\n+            }\n+            if (searchCriteria.getParamList().containsKey(\"endDate\")) {\n+                temp = (java.util.Date) searchCriteria.getParamList().get(\n+                        \"endDate\");\n+                temp = dateUtil.getDateFromGivenDate(temp, 0, 23, 59, 59);\n+                temp = dateUtil.addTimeOffset(temp, clientTimeOffsetInMinute);\n+                searchCriteria.getParamList().put(\"endDate\", temp);\n+            }\n+\n+        }\n+        if (searchCriteria.getSortType() == null) {\n+            searchCriteria.setSortType(\"desc\");\n+        } else if (!searchCriteria.getSortType().equalsIgnoreCase(\"asc\") && !searchCriteria.getSortType().equalsIgnoreCase(\"desc\")) {\n+            searchCriteria.setSortType(\"desc\");\n+        }\n+        if (xaBizUtil.getAuditDBType().equalsIgnoreCase(RangerBizUtil.AUDIT_STORE_SOLR)) {\n+            return solrAccessAuditsService.searchXAccessAudits(searchCriteria);\n+        } else {\n+            return xAccessAuditService.searchXAccessAudits(searchCriteria);\n+        }\n+    }\n \n-\t\t}\n-\t\tif(searchCriteria.getSortType()==null){\n-\t\t\tsearchCriteria.setSortType(\"desc\");\n-\t\t}else if(!searchCriteria.getSortType().equalsIgnoreCase(\"asc\")&& !searchCriteria.getSortType().equalsIgnoreCase(\"desc\")){\n-\t\t\tsearchCriteria.setSortType(\"desc\");\n-\t\t}\n-\t\tif (xaBizUtil.getAuditDBType().equalsIgnoreCase(RangerBizUtil.AUDIT_STORE_SOLR)) {\n-\t\t\treturn solrAccessAuditsService.searchXAccessAudits(searchCriteria);\n-\t\t} else {\n-\t\t\treturn xAccessAuditService.searchXAccessAudits(searchCriteria);\n-\t\t}\n-\t\t//return xAccessAuditService.searchXAccessAudits(searchCriteria);\n-\t}\n \n \tpublic VXTrxLogList getTransactionReport(String transactionId) {\n \t\tList<XXTrxLog> xTrxLogList = rangerDaoManager.getXXTrxLog()\n@@ -1854,30 +1842,29 @@ public VXTrxLogList getTransactionReport(String transactionId) {\n \t@Override\n \tpublic VXPolicyExportAuditList searchXPolicyExportAudits(\n \t\t\tSearchCriteria searchCriteria) {\n-\t\tif (searchCriteria != null && searchCriteria.getParamList() != null\n-\t\t\t\t&& searchCriteria.getParamList().size() > 0) {\n-\n-\t\t\tint clientTimeOffsetInMinute = RestUtil.getClientTimeOffset();\n-\t\t\tjava.util.Date temp = null;\n-\t\t\tDateUtil dateUtil = new DateUtil();\n-\t\t\tif (searchCriteria.getParamList().containsKey(\"startDate\")) {\n-\t\t\t\ttemp = (java.util.Date) searchCriteria.getParamList().get(\n-\t\t\t\t\t\t\"startDate\");\n-\t\t\t\ttemp = dateUtil.getDateFromGivenDate(temp, 0, 0, 0, 0);\n-\t\t\t\ttemp = dateUtil.addTimeOffset(temp, clientTimeOffsetInMinute);\n-\t\t\t\tsearchCriteria.getParamList().put(\"startDate\", temp);\n-\t\t\t}\n-\t\t\tif (searchCriteria.getParamList().containsKey(\"endDate\")) {\n-\t\t\t\ttemp = (java.util.Date) searchCriteria.getParamList().get(\n-\t\t\t\t\t\t\"endDate\");\n-\t\t\t\ttemp = dateUtil.getDateFromGivenDate(temp, 0, 23, 59, 59);\n-\t\t\t\ttemp = dateUtil.addTimeOffset(temp, clientTimeOffsetInMinute);\n-\t\t\t\tsearchCriteria.getParamList().put(\"endDate\", temp);\n-\t\t\t}\n-\t\t}\n-\t\n-\t\treturn xPolicyExportAuditService.searchXPolicyExportAudits(searchCriteria);\n-\t}\n+        if (searchCriteria != null && searchCriteria.getParamList() != null\n+                && searchCriteria.getParamList().size() > 0) {\n+\n+            int clientTimeOffsetInMinute = RestUtil.getClientTimeOffset();\n+            java.util.Date temp = null;\n+            DateUtil dateUtil = new DateUtil();\n+            if (searchCriteria.getParamList().containsKey(\"startDate\")) {\n+                temp = (java.util.Date) searchCriteria.getParamList().get(\n+                        \"startDate\");\n+                temp = dateUtil.getDateFromGivenDate(temp, 0, 0, 0, 0);\n+                temp = dateUtil.addTimeOffset(temp, clientTimeOffsetInMinute);\n+                searchCriteria.getParamList().put(\"startDate\", temp);\n+            }\n+            if (searchCriteria.getParamList().containsKey(\"endDate\")) {\n+                temp = (java.util.Date) searchCriteria.getParamList().get(\n+                        \"endDate\");\n+                temp = dateUtil.getDateFromGivenDate(temp, 0, 23, 59, 59);\n+                temp = dateUtil.addTimeOffset(temp, clientTimeOffsetInMinute);\n+                searchCriteria.getParamList().put(\"endDate\", temp);\n+            }\n+        }\n+        return xPolicyExportAuditService.searchXPolicyExportAudits(searchCriteria);\n+    }\n \t\n \tpublic VXAsset getXAsset(Long id){\n \t\tUserSessionBase currentUserSession = ContextUtil",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/biz/AssetMgr.java",
                "sha": "47500813f368dd10172faa98e13764b69bfa8e1f",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/biz/UserMgr.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/biz/UserMgr.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "deletions": 2,
                "filename": "security-admin/src/main/java/org/apache/ranger/biz/UserMgr.java",
                "patch": "@@ -1081,8 +1081,11 @@ public VXPortalUser createDefaultAccountUser(VXPortalUser userProfile) {\n \t\t\t\t\t\t\t\tMessageEnums.OPER_NOT_ALLOWED_FOR_STATE);*/\n \t\t\t}\n \t\t}\n-\n-\t\treturn mapXXPortalUserToVXPortalUserForDefaultAccount(xXPortalUser);\n+        if (xXPortalUser != null) {\n+            return mapXXPortalUserToVXPortalUserForDefaultAccount(xXPortalUser);\n+        }else {\n+            return null;\n+        }\n \t}\n \n \tprivate VXPortalUser mapXXPortalUserToVXPortalUserForDefaultAccount(XXPortalUser user) {",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/biz/UserMgr.java",
                "sha": "420b37d5583962e924e7ee4d5cbdabc10e1a160d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/patch/BaseLoader.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/patch/BaseLoader.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "deletions": 1,
                "filename": "security-admin/src/main/java/org/apache/ranger/patch/BaseLoader.java",
                "patch": "@@ -146,7 +146,7 @@ public String timeTakenSoFar(int lineCount) {\n \tlong currTime =  DateUtil.getUTCDate().getTime();\n \tString retStr = formatTimeTaken(currTime - startTime);\n \tif (currTime - startTime > 0 && countSoFar > 0) {\n-\t    double rateSoFar = countSoFar * 1000 / (currTime - startTime);\n+\t    double rateSoFar = (double)(countSoFar * 1000) / (currTime - startTime);\n \t    retStr = retStr + \" \" + \". Rate so far for \" + countSoFar + \" is \"\n \t\t    + twoDForm.format(rateSoFar);\n ",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/patch/BaseLoader.java",
                "sha": "014dedc0195e50482bb594a50a47f2fbe9acc8d6",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XAccessAuditService.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XAccessAuditService.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "deletions": 12,
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XAccessAuditService.java",
                "patch": "@@ -147,21 +147,22 @@ protected VXAccessAudit mapEntityToViewBean(VXAccessAudit vObj, XXAccessAudit mO\n \t * @return\n \t */\n \tpublic VXAccessAuditList searchXAccessAudits(SearchCriteria searchCriteria) {\n-\t\tVXAccessAuditList returnList = new VXAccessAuditList();\n-\t\tList<VXAccessAudit> xAccessAuditList = new ArrayList<VXAccessAudit>();\n+        VXAccessAuditList returnList = new VXAccessAuditList();\n+        List<VXAccessAudit> xAccessAuditList = new ArrayList<VXAccessAudit>();\n \n-\t\tList<XXAccessAudit> resultList = (List<XXAccessAudit>)searchResources(searchCriteria,\n-\t\t\t\tsearchFields, sortFields, returnList);\n+        List<XXAccessAudit> resultList = (List<XXAccessAudit>) searchResources(searchCriteria,\n+                searchFields, sortFields, returnList);\n \n-\t\t// Iterate over the result list and create the return list\n-\t\tfor (XXAccessAudit gjXAccessAudit : resultList) {\n-\t\t\tVXAccessAudit vXAccessAudit = populateViewBean(gjXAccessAudit);\n-\t\t\txAccessAuditList.add(vXAccessAudit);\n-\t\t}\n+        // Iterate over the result list and create the return list\n+        for (XXAccessAudit gjXAccessAudit : resultList) {\n+            VXAccessAudit vXAccessAudit = populateViewBean(gjXAccessAudit);\n+            xAccessAuditList.add(vXAccessAudit);\n+        }\n \n-\t\treturnList.setVXAccessAudits(xAccessAuditList);\n-\t\treturn returnList;\n-\t}\n+\n+        returnList.setVXAccessAudits(xAccessAuditList);\n+        return returnList;\n+    }\n \t\n \tpublic VXAccessAudit populateViewBean(XXAccessAudit gjXAccessAudit) {\n \t\tVXAccessAudit vXAccessAudit = new VXAccessAudit();",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XAccessAuditService.java",
                "sha": "a8999a980b67e59512a0ffe41723b541f1353ddf",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XAssetService.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XAssetService.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "deletions": 27,
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XAssetService.java",
                "patch": "@@ -117,33 +117,35 @@ protected void validateForUpdate(VXAsset vObj, XXAsset mObj) {\n \t@Override\n \tprotected XXAsset mapViewToEntityBean(VXAsset vObj, XXAsset mObj,\n \t\t\tint OPERATION_CONTEXT) {\n-\t\tString oldConfig = (mObj != null) ? mObj.getConfig() : null;\n-\t\tsuper.mapViewToEntityBean(vObj, mObj, OPERATION_CONTEXT);\n-\t\tString config = vObj.getConfig();\n-\t\tif (config != null && !config.isEmpty()) {\n-\t\t\tMap<String, String> configMap = jsonUtil.jsonToMap(config);\n-\t\t\tEntry<String, String> passwordEntry = getPasswordEntry(configMap);\n-\t\t\tif (passwordEntry != null) {\n-\t\t\t\t// If \"*****\" then get password from db and update\n-\t\t\t\tString password = passwordEntry.getValue();\n-\t\t\t\tif (password != null) {\n-\t\t\t\t\tif (password.equals(hiddenPasswordString)) {\n-\t\t\t\t\t\tif (oldConfig != null && !oldConfig.isEmpty()) {\n-\t\t\t\t\t\t\tMap<String, String> oldConfigMap = jsonUtil\n-\t\t\t\t\t\t\t\t\t.jsonToMap(oldConfig);\n-\t\t\t\t\t\t\tEntry<String, String> oldPasswordEntry \n-\t\t\t\t\t\t\t\t\t= getPasswordEntry(oldConfigMap);\n-\t\t\t\t\t\t\tif (oldPasswordEntry != null) {\n-\t\t\t\t\t\t\t\tconfigMap.put(oldPasswordEntry.getKey(),\n-\t\t\t\t\t\t\t\t\t\toldPasswordEntry.getValue());\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\tconfig = jsonUtil.readMapToString(configMap);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tmObj.setConfig(config);\n+        if (vObj != null && mObj != null) {\n+            String oldConfig = (mObj != null) ? mObj.getConfig() : null;\n+            super.mapViewToEntityBean(vObj, mObj, OPERATION_CONTEXT);\n+            String config = vObj.getConfig();\n+            if (config != null && !config.isEmpty()) {\n+                Map<String, String> configMap = jsonUtil.jsonToMap(config);\n+                Entry<String, String> passwordEntry = getPasswordEntry(configMap);\n+                if (passwordEntry != null) {\n+                    // If \"*****\" then get password from db and update\n+                    String password = passwordEntry.getValue();\n+                    if (password != null) {\n+                        if (password.equals(hiddenPasswordString)) {\n+                            if (oldConfig != null && !oldConfig.isEmpty()) {\n+                                Map<String, String> oldConfigMap = jsonUtil\n+                                        .jsonToMap(oldConfig);\n+                                Entry<String, String> oldPasswordEntry\n+                                        = getPasswordEntry(oldConfigMap);\n+                                if (oldPasswordEntry != null) {\n+                                    configMap.put(oldPasswordEntry.getKey(),\n+                                            oldPasswordEntry.getValue());\n+                                }\n+                            }\n+                        }\n+                        config = jsonUtil.readMapToString(configMap);\n+                    }\n+                }\n+            }\n+            mObj.setConfig(config);\n+        }\n \t\treturn mObj;\n \t}\n ",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XAssetService.java",
                "sha": "1d6f42c3ffa5097bd6c30dcb6fc9eb6cd4952118",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XAuditMapService.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XAuditMapService.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "deletions": 1,
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XAuditMapService.java",
                "patch": "@@ -78,7 +78,7 @@ protected void validateForUpdate(VXAuditMap vObj, XXAuditMap mObj) {\n \t}\n \n \tpublic List<XXTrxLog> getTransactionLog(VXAuditMap vObj, VXAuditMap mObj, String action){\n-\t\tif(vObj == null && (action == null || !action.equalsIgnoreCase(\"update\"))){\n+\t\tif(vObj == null || action == null || (action.equalsIgnoreCase(\"update\") && mObj == null)){\n \t\t\treturn null;\n \t\t}\n \t\t",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XAuditMapService.java",
                "sha": "c00ca74ee982f74d647074bcffd0b2aea087a7a5",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XGroupService.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XGroupService.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "deletions": 1,
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XGroupService.java",
                "patch": "@@ -154,7 +154,7 @@ public VXGroup readResourceWithOutLogin(Long id) {\n \t}\n \n \tpublic List<XXTrxLog> getTransactionLog(VXGroup vObj, XXGroup mObj, String action){\n-\t\tif(vObj == null && (action == null || !action.equalsIgnoreCase(\"update\"))){\n+\t\tif(vObj == null || action == null || (action.equalsIgnoreCase(\"update\") && mObj == null)){\n \t\t\treturn null;\n \t\t}\n \t\t",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XGroupService.java",
                "sha": "d31e178787c18b02453d245f6738e57e64264ca7",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XPermMapService.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XPermMapService.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "deletions": 1,
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XPermMapService.java",
                "patch": "@@ -150,7 +150,7 @@ public String getUserName(Long userId){\n \t}\n \t\n \tpublic List<XXTrxLog> getTransactionLog(VXPermMap vObj, VXPermMap mObj, String action){\n-\t\tif(vObj == null && (action == null || !action.equalsIgnoreCase(\"update\"))){\n+\t\tif(vObj == null || action == null || (action.equalsIgnoreCase(\"update\") && mObj == null)){\n \t\t\treturn null;\n \t\t}\n \t\t",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XPermMapService.java",
                "sha": "34109aeb0444a7b7443c5a2a5411198684618b58",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XResourceService.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XResourceService.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "deletions": 4,
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XResourceService.java",
                "patch": "@@ -424,9 +424,9 @@ private void populatePageList(List<XXResource> resourceList,\n \n \t@Override\n \tprotected XXResource mapViewToEntityBean(VXResource vObj, XXResource mObj, int OPERATION_CONTEXT) {\n-\t\tsuper.mapViewToEntityBean(vObj, mObj, OPERATION_CONTEXT);\n-\t\tmObj.setUdfs(vObj.getUdfs());\n-\t\tif(vObj!=null && mObj!=null){\n+        if(vObj!=null && mObj!=null){\n+\t\t    super.mapViewToEntityBean(vObj, mObj, OPERATION_CONTEXT);\n+\t\t    mObj.setUdfs(vObj.getUdfs());\n \t\t\tXXPortalUser xXPortalUser= null;\n \t\t\tif(mObj.getAddedByUserId()==null || mObj.getAddedByUserId()==0){\n \t\t\t\tif(!stringUtil.isEmpty(vObj.getOwner())){\n@@ -951,7 +951,7 @@ public boolean checkGroupAccess(VXPermMap vxPermMap, List<String> pathList,\n \t}\n \t\n \tpublic List<XXTrxLog> getTransactionLog(VXResource vObj, XXResource mObj, String action){\n-\t\tif(vObj == null && (action == null || !action.equalsIgnoreCase(\"update\"))){\n+\t\tif(vObj == null || action == null || (action.equalsIgnoreCase(\"update\") && mObj == null)) {\n \t\t\treturn null;\n \t\t}\n ",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XResourceService.java",
                "sha": "1faec211c8bdace0655cbb7a04cc3e3147a78433",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XTrxLogService.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XTrxLogService.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "deletions": 17,
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XTrxLogService.java",
                "patch": "@@ -438,22 +438,22 @@ protected XXTrxLog mapViewToEntityBean(VXTrxLog vObj, XXTrxLog mObj, int OPERATI\n \n \t@Override\n \tprotected VXTrxLog mapEntityToViewBean(VXTrxLog vObj, XXTrxLog mObj) {\n-\t\tsuper.mapEntityToViewBean(vObj, mObj);\n-\t\tif(mObj!=null && vObj!=null){\n-\t\t\tXXPortalUser xXPortalUser=null;\n-\t\t\tif(stringUtil.isEmpty(vObj.getOwner())){\n-\t\t\t\txXPortalUser= rangerDaoManager.getXXPortalUser().getById(mObj.getAddedByUserId());\t\n-\t\t\t\tif(xXPortalUser!=null){\n-\t\t\t\t\tvObj.setOwner(xXPortalUser.getLoginId());\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif(stringUtil.isEmpty(vObj.getUpdatedBy())){\n-\t\t\t\txXPortalUser= rangerDaoManager.getXXPortalUser().getById(mObj.getUpdatedByUserId());\t\t\n-\t\t\t\tif(xXPortalUser!=null){\n-\t\t\t\t\tvObj.setUpdatedBy(xXPortalUser.getLoginId());\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn vObj;\n+        if(mObj!=null && vObj!=null){\n+            super.mapEntityToViewBean(vObj, mObj);\n+            XXPortalUser xXPortalUser=null;\n+            if(stringUtil.isEmpty(vObj.getOwner())){\n+                xXPortalUser= rangerDaoManager.getXXPortalUser().getById(mObj.getAddedByUserId());\n+                if(xXPortalUser!=null){\n+                    vObj.setOwner(xXPortalUser.getLoginId());\n+                }\n+            }\n+            if(stringUtil.isEmpty(vObj.getUpdatedBy())){\n+                xXPortalUser= rangerDaoManager.getXXPortalUser().getById(mObj.getUpdatedByUserId());\n+                if(xXPortalUser!=null){\n+                    vObj.setUpdatedBy(xXPortalUser.getLoginId());\n+                }\n+            }\n+        }\n+        return vObj;\n \t}\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XTrxLogService.java",
                "sha": "3c3ac641dd8b4e2370c77ea6d08e1e34337f83bb",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XUserService.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/XUserService.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "deletions": 2,
                "filename": "security-admin/src/main/java/org/apache/ranger/service/XUserService.java",
                "patch": "@@ -261,8 +261,10 @@ private void populateUserAttributes(String userName, VXUser vObj) {\n \n \tpublic List<XXTrxLog> getTransactionLog(VXUser vObj, VXPortalUser mObj,\n \t\t\tString action) {\n-\t\tif (vObj == null || action == null || (action.equalsIgnoreCase(\"update\") && mObj == null))\n-\t    \t\treturn null;\n+\n+\t\tif (vObj == null || action == null || (action.equalsIgnoreCase(\"update\") && mObj == null)) {\n+\t\t\treturn null;\n+\t\t}\n \n \t\tList<XXTrxLog> trxLogList = new ArrayList<XXTrxLog>();\n \t\ttry {",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/security-admin/src/main/java/org/apache/ranger/service/XUserService.java",
                "sha": "c70fbb87ce2719333605b5b9898f8641cd35811a",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/ugsync/src/main/java/org/apache/ranger/ldapusersync/process/PolicyMgrUserGroupBuilder.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/ugsync/src/main/java/org/apache/ranger/ldapusersync/process/PolicyMgrUserGroupBuilder.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "deletions": 13,
                "filename": "ugsync/src/main/java/org/apache/ranger/ldapusersync/process/PolicyMgrUserGroupBuilder.java",
                "patch": "@@ -126,7 +126,7 @@ public static void main(String[] args) throws Throwable {\n \t}\n \n \t\n-\tpublic void init() throws Throwable {\n+\tpublic synchronized void init() throws Throwable {\n \t\trecordsToPullPerCall = config.getMaxRecordsPerAPICall() ;\n \t\tpolicyMgrBaseUrl = config.getPolicyManagerBaseURL() ;\n \t\tisMockRun = config.isMockRunEnabled() ;\n@@ -164,24 +164,28 @@ private String getURL(String uri) {\n \t\n \t\n \tprivate void rebuildUserGroupMap() {\n-\t\t\n-\t\tfor(XUserInfo user : xuserList) {\n-\t\t\taddUserToList(user);\n+\n+        List<XUserInfo> newUsers = new ArrayList<XUserInfo>();\n+        for(XUserInfo user : xuserList) {\n+\t\t\taddUserToList(user, newUsers);\n \t\t}\n-\t\t\n+        xuserList.addAll(newUsers);\n+\n+        List<XGroupInfo> newGroups = new ArrayList<XGroupInfo>();\n \t\tfor(XGroupInfo group : xgroupList) {\n-\t\t\taddGroupToList(group);\n+\t\t\taddGroupToList(group, newGroups);\n \t\t}\n-\t\t\n+        xgroupList.addAll(newGroups);\n+\n \t\tfor(XUserGroupInfo ug : xusergroupList) {\n \t\t\taddUserGroupToList(ug);\n \t\t}\n \t}\n \t\n \t\n-\tprivate void addUserToList(XUserInfo aUserInfo) {\n+\tprivate void addUserToList(XUserInfo aUserInfo, List<XUserInfo> newUsers) {\n \t\tif (! xuserList.contains(aUserInfo)) {\n-\t\t\txuserList.add(aUserInfo) ;\n+            newUsers.add(aUserInfo);\n \t\t}\n \t\t\n \t\tString userId = aUserInfo.getId() ;\n@@ -198,10 +202,10 @@ private void addUserToList(XUserInfo aUserInfo) {\n \t}\n \t\n \n-\tprivate void addGroupToList(XGroupInfo aGroupInfo) {\n+\tprivate void addGroupToList(XGroupInfo aGroupInfo, List<XGroupInfo> newGroups) {\n \t\t\n \t\tif (! xgroupList.contains(aGroupInfo) ) {\n-\t\t\txgroupList.add(aGroupInfo) ;\n+            newGroups.add(aGroupInfo);\n \t\t}\n \n \t\tif (aGroupInfo.getName() != null) {\n@@ -437,7 +441,7 @@ private XUserInfo addXUserInfo(String aUserName) {\n \t    ret = gson.fromJson(response, XUserInfo.class) ;\n \n \t    if (ret != null) {\n-\t    \taddUserToList(ret);\n+\t    \taddUserToList(ret, xuserList);\n \t    }\n \t\t\n \t\treturn ret ;\n@@ -467,7 +471,7 @@ private XGroupInfo addXGroupInfo(String aGroupName) {\n \t    ret = gson.fromJson(response, XGroupInfo.class) ;\n \t    \n \t    if (ret != null) {\n-\t    \taddGroupToList(ret);\n+\t    \taddGroupToList(ret, xgroupList);\n \t    }\n \t\t\n \t\treturn ret ;",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/ugsync/src/main/java/org/apache/ranger/ldapusersync/process/PolicyMgrUserGroupBuilder.java",
                "sha": "7cd06cc4d2d6781c8f6bf3dc38aba2ea635abef2",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/ugsync/src/main/java/org/apache/ranger/unixusersync/config/UserGroupSyncConfig.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/ugsync/src/main/java/org/apache/ranger/unixusersync/config/UserGroupSyncConfig.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "deletions": 3,
                "filename": "ugsync/src/main/java/org/apache/ranger/unixusersync/config/UserGroupSyncConfig.java",
                "patch": "@@ -280,7 +280,7 @@ public String getSSLTrustStorePathPassword() {\n \tpublic long getSleepTimeInMillisBetweenCycle() throws Throwable {\n \t\tString val =  prop.getProperty(UGSYNC_SLEEP_TIME_IN_MILLIS_BETWEEN_CYCLE_PARAM) ;\n \t\tif (val == null) {\n-\t\t\tif (LGSYNC_SOURCE_CLASS.equals(getUserGroupSource())) {\n+\t\t\tif (LGSYNC_SOURCE_CLASS.equals(getUserGroupSource().getClass().getName())) {\n \t\t\t\treturn UGSYNC_SLEEP_TIME_IN_MILLIS_BETWEEN_CYCLE_LDAP_DEFAULT_VALUE ;\n \t\t\t} else {\n \t\t\t\treturn UGSYNC_SLEEP_TIME_IN_MILLIS_BETWEEN_CYCLE_UNIX_DEFAULT_VALUE ;\n@@ -389,9 +389,9 @@ public int getUserSearchScope() {\n \t\t}\n \t\t\n \t\tval = val.trim().toLowerCase();\n-\t\tif (val.equals(0) || val.startsWith(\"base\")) {\n+\t\tif (val.equals(\"0\") || val.startsWith(\"base\")) {\n \t\t\treturn 0; // object scope\n-\t\t} else if (val.equals(1) || val.startsWith(\"one\")) {\n+\t\t} else if (val.equals(\"1\") || val.startsWith(\"one\")) {\n \t\t\treturn 1; // one level scope\n \t\t} else {\n \t\t\treturn 2; // subtree scope",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/ugsync/src/main/java/org/apache/ranger/unixusersync/config/UserGroupSyncConfig.java",
                "sha": "6e98b3423148fe9967c8877ca3b216875c57ac6c",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/ugsync/src/main/java/org/apache/ranger/unixusersync/poc/RangerClientUserGroupMapping.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/ugsync/src/main/java/org/apache/ranger/unixusersync/poc/RangerClientUserGroupMapping.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "deletions": 19,
                "filename": "ugsync/src/main/java/org/apache/ranger/unixusersync/poc/RangerClientUserGroupMapping.java",
                "patch": "@@ -1,22 +1,22 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- * http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ * \r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n  package org.apache.ranger.unixusersync.poc;\r\n \r\n import java.io.BufferedReader;\r\n@@ -44,6 +44,10 @@\n \t    while ((strLine = br.readLine()) != null)  {\r\n \t    \t\r\n \t    \tListRangerUser userList = ListRangerUser.parseUser(strLine);\r\n+\r\n+            if (userList == null) {\r\n+                continue;\r\n+            }\r\n \t\t \r\n \t    \tHashMap<String, String> map = new HashMap<String, String>();\r\n          \r",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/ugsync/src/main/java/org/apache/ranger/unixusersync/poc/RangerClientUserGroupMapping.java",
                "sha": "408e861b031eddf5a3a80b0b8a4bb67c03174c6d",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/ranger/blob/b1bfbc572cd2a2974403abb7c023b5390c21f55d/unixauthclient/src/main/java/org/apache/ranger/authentication/unix/jaas/ConsolePromptCallbackHandler.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/unixauthclient/src/main/java/org/apache/ranger/authentication/unix/jaas/ConsolePromptCallbackHandler.java?ref=b1bfbc572cd2a2974403abb7c023b5390c21f55d",
                "deletions": 2,
                "filename": "unixauthclient/src/main/java/org/apache/ranger/authentication/unix/jaas/ConsolePromptCallbackHandler.java",
                "patch": "@@ -42,13 +42,23 @@ public void handle(Callback[] callbacks) throws IOException, UnsupportedCallback\n \t\t          NameCallback nc = (NameCallback)cb ;\n \t\t          System.out.print(nc.getPrompt());\n \t\t          System.out.flush();\n-\t\t          nc.setName(reader.readLine());\n+                  String line = null;\n+\n+                  while (line == null) {\n+                    line = reader.readLine();\n+                  }\n+\t\t          nc.setName(line);\n \t\t\t}\n \t\t\telse if (cb instanceof PasswordCallback) {\n \t\t          PasswordCallback pc = (PasswordCallback)cb;\n \t\t          System.out.print(pc.getPrompt());\n \t\t          System.out.flush();\n-\t\t          pc.setPassword(reader.readLine().toCharArray());\t\t\t\t\n+\n+                  String line = null;\n+                  while (line == null) {\n+                    line = reader.readLine();\n+                  }\n+\t\t          pc.setPassword(line.toCharArray());\n \t\t\t}\n \t\t\telse {\n \t\t\t\tSystem.out.println(\"Unknown callbacl [\" + cb.getClass().getName() + \"]\") ;",
                "raw_url": "https://github.com/apache/ranger/raw/b1bfbc572cd2a2974403abb7c023b5390c21f55d/unixauthclient/src/main/java/org/apache/ranger/authentication/unix/jaas/ConsolePromptCallbackHandler.java",
                "sha": "f1400b2e1d2798f548023e214470aeb1b84e66a6",
                "status": "modified"
            }
        ],
        "message": "RANGER-339: Fix for potential NPE, remove dead code",
        "parent": "https://github.com/apache/ranger/commit/87446272e0e3678463aad96770c7f957f1d9418b",
        "patched_files": [
            "AssetMgr.java",
            "UserMgr.java"
        ],
        "repo": "ranger",
        "unit_tests": [
            "TestAssetMgr.java",
            "TestUserMgr.java"
        ]
    },
    "ranger_f8bea62": {
        "bug_id": "ranger_f8bea62",
        "commit": "https://github.com/apache/ranger/commit/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/admin/client/RangerAdminRESTClient.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/admin/client/RangerAdminRESTClient.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "deletions": 2,
                "filename": "agents-common/src/main/java/org/apache/ranger/admin/client/RangerAdminRESTClient.java",
                "patch": "@@ -204,8 +204,7 @@ public ServiceTags getServiceTagsIfUpdated(long lastKnownVersion) throws Excepti\n \n \t\tServiceTags ret;\n \n-\t\tWebResource webResource = createWebResource(RangerRESTUtils.REST_URL_GET_SERVICE_TAGS_IF_UPDATED)\n-\t\t\t\t.queryParam(RangerRESTUtils.SERVICE_NAME_PARAM, serviceName)\n+\t\tWebResource webResource = createWebResource(RangerRESTUtils.REST_URL_GET_SERVICE_TAGS_IF_UPDATED + serviceName)\n \t\t\t\t.queryParam(RangerRESTUtils.LAST_KNOWN_TAG_VERSION_PARAM, Long.toString(lastKnownVersion))\n \t\t\t\t.queryParam(RangerRESTUtils.REST_PARAM_PLUGIN_ID, pluginId);\n ",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/admin/client/RangerAdminRESTClient.java",
                "sha": "de138ed9edb1ef14fc7b7693705be88c517dda83",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerAdminTagRetriever.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerAdminTagRetriever.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "deletions": 14,
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerAdminTagRetriever.java",
                "patch": "@@ -69,29 +69,25 @@ public void setReceiver(RangerTagReceiver receiver) {\n \n \t@Override\n \tpublic void retrieveTags() {\n-\t\tif (adminClient != null) {\n+\t\tif (adminClient != null && receiver != null) {\n \t\t\tServiceTags serviceTags = null;\n-\t\t\tlong savedLastKnownVersion = lastKnownVersion;\n \t\t\ttry {\n \t\t\t\tserviceTags = adminClient.getServiceTagsIfUpdated(lastKnownVersion);\n-\t\t\t\tlastKnownVersion = serviceTags.getTagVersion();\n \t\t\t} catch (Exception exp) {\n-\t\t\t\tLOG.error(\"RangerAdminTagRetriever.retrieveTags() - Error retrieving resources\");\n+\t\t\t\tLOG.error(\"RangerAdminTagRetriever.retrieveTags() - Error retrieving resources, exception=\", exp);\n \t\t\t}\n \n-\t\t\tif (receiver != null && serviceTags != null) {\n-\t\t\t\tif (serviceTags.getTagVersion() != null && serviceTags.getTagVersion().longValue() > savedLastKnownVersion) {\n-\t\t\t\t\treceiver.setServiceTags(serviceTags);\n-\t\t\t\t} else {\n-\t\t\t\t\tif (LOG.isDebugEnabled()) {\n-\t\t\t\t\t\tLOG.debug(\"RangerAdminTagRetriever.retrieveTags() - no updates to tags !!\");\n-\t\t\t\t\t}\n-\t\t\t\t}\n+\t\t\tif (serviceTags != null) {\n+\t\t\t\tLOG.info(\"RangerAdminTagRetriever.retrieveTags() - Updating tags-cache to new version of tags, lastKnownVersion=\" + lastKnownVersion + \"; newVersion=\" + serviceTags.getTagVersion());\n+\t\t\t\tlastKnownVersion = serviceTags.getTagVersion();\n+\t\t\t\treceiver.setServiceTags(serviceTags);\n \t\t\t} else {\n-\t\t\t\tLOG.error(\"RangerAdminTagRetriever.retrieveTags() - No receiver to send resources to \");\n+\t\t\t\tif (LOG.isDebugEnabled()) {\n+\t\t\t\t\tLOG.debug(\"RangerAdminTagRetriever.retrieveTags() - No need to update tags-cache. lastKnownVersion=\" + lastKnownVersion);\n+\t\t\t\t}\n \t\t\t}\n \t\t} else {\n-\t\t\tLOG.error(\"RangerAdminTagRetriever.retrieveTags() - No Tag Provider ...\");\n+\t\t\tLOG.error(\"RangerAdminTagRetriever.retrieveTags() - No admin client to get tags from or no tag receiver to update tag-cache\");\n \t\t}\n \t}\n ",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerAdminTagRetriever.java",
                "sha": "889fbbcee0429f8ee13de389087a8b35bfa35719",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerTagProvider.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerTagProvider.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "deletions": 5,
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerTagProvider.java",
                "patch": "@@ -161,17 +161,14 @@ public void setServiceTags(final ServiceTags serviceTags) {\n \n \t\t\tfor (RangerServiceResourceMatcher resourceMatcher : resourceMatchers) {\n \n-\t\t\t\tRangerServiceResource serviceResource = resourceMatcher.getServiceResource();\n-\t\t\t\tRangerPolicyResourceMatcher matcher = resourceMatcher.getPolicyResourceMatcher();\n-\n-\t\t\t\tboolean matchResult = matcher.isMatch(resource);\n+\t\t\t\tboolean matchResult = resourceMatcher.isMatch(resource);\n \n \t\t\t\tif (matchResult) {\n \t\t\t\t\tif (ret == null) {\n \t\t\t\t\t\tret = new ArrayList<RangerTag>();\n \t\t\t\t\t}\n \t\t\t\t\t// Find tags from serviceResource\n-\t\t\t\t\tret.addAll(getTagsForServiceResource(serviceTags, serviceResource));\n+\t\t\t\t\tret.addAll(getTagsForServiceResource(serviceTags, resourceMatcher.getServiceResource()));\n \t\t\t\t}\n \t\t\t}\n \t\t}",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerTagProvider.java",
                "sha": "83600c927880447527acd1745f7681da3b282188",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/store/file/TagFileStore.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/store/file/TagFileStore.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "deletions": 5,
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/store/file/TagFileStore.java",
                "patch": "@@ -1026,6 +1026,7 @@ public ServiceTags getServiceTagsIfUpdated(String serviceName, Long lastKnownVer\n \t\t\tfilter.setParam(SearchFilter.TAG_RESOURCE_SERVICE_NAME, serviceName);\n \n \t\t\tList<RangerServiceResource> serviceResources = getServiceResources(filter);\n+\t\t\tList<RangerServiceResource> filteredServiceResources = new ArrayList<RangerServiceResource>();\n \n \t\t\tMap<Long, RangerTag> tagsMap = new HashMap<Long, RangerTag>();\n \t\t\tMap<Long, List<Long>> resourceToTagIdsMap = new HashMap<Long, List<Long>>();\n@@ -1040,14 +1041,11 @@ public ServiceTags getServiceTagsIfUpdated(String serviceName, Long lastKnownVer\n \t\t\t\t\t\ttagIdList.add(tag.getId());\n \t\t\t\t\t}\n \t\t\t\t\tresourceToTagIdsMap.put(serviceResource.getId(), tagIdList);\n+\t\t\t\t\tfilteredServiceResources.add(serviceResource);\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif (MapUtils.isEmpty(resourceToTagIdsMap)) {\n-\t\t\t\tserviceResources.clear();\n-\t\t\t}\n-\n-\t\t\tret.setServiceResources(serviceResources);\n+\t\t\tret.setServiceResources(filteredServiceResources);\n \t\t\tret.setResourceToTagIds(resourceToTagIdsMap);\n \t\t\tret.setTags(tagsMap);\n ",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/store/file/TagFileStore.java",
                "sha": "0b4f0cad7f0bba8721088dc977a0b65e22df68e2",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/util/RangerRESTUtils.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/util/RangerRESTUtils.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "deletions": 2,
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/util/RangerRESTUtils.java",
                "patch": "@@ -40,9 +40,9 @@\n \tpublic static final String REST_URL_SERVICE_GRANT_ACCESS              = \"/service/plugins/services/grant/\";\n \tpublic static final String REST_URL_SERVICE_REVOKE_ACCESS             = \"/service/plugins/services/revoke/\";\n \n-\tpublic static final String REST_URL_GET_SERVICE_TAGS_IF_UPDATED = \"/service/tags/download\";\n+\tpublic static final String REST_URL_GET_SERVICE_TAGS_IF_UPDATED = \"/service/tags/download/\";\n \tpublic static final String SERVICE_NAME_PARAM = \"serviceName\";\n-\tpublic static final String LAST_KNOWN_TAG_VERSION_PARAM = \"tagVersion\";\n+\tpublic static final String LAST_KNOWN_TAG_VERSION_PARAM = \"lastKnownVersion\";\n \tpublic static final String PATTERN_PARAM = \"pattern\";\n \n \tpublic static final String REST_URL_LOOKUP_TAG_NAMES = \"/service/tags/lookup\";",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/util/RangerRESTUtils.java",
                "sha": "ad113fef7100832aad656a61562ee06591f9493e",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/test/java/org/apache/ranger/plugin/store/TestTagStore.java",
                "changes": 64,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/test/java/org/apache/ranger/plugin/store/TestTagStore.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "deletions": 31,
                "filename": "agents-common/src/test/java/org/apache/ranger/plugin/store/TestTagStore.java",
                "patch": "@@ -40,68 +40,66 @@\n import org.apache.ranger.plugin.util.SearchFilter;\n import org.apache.ranger.plugin.util.ServiceTags;\n import org.junit.BeforeClass;\n+import org.junit.AfterClass;\n import org.junit.Test;\n \n \n public class TestTagStore {\n \tstatic TagStore tagStore = null;\n \tstatic TagValidator validator = null;\n-\n+\tstatic RangerServiceDef serviceDef = null;\n+\tstatic RangerService service = null;\n \tstatic SearchFilter filter = null;\n-\tstatic Path filePath = new Path(\"file:///etc/ranger/data/ranger-admin-test-site.xml\");\n+\n+\tstatic String tmpDir = null;\n+\tstatic Path filePath = null;\n+\n \tstatic Configuration config = new Configuration();\n \n \tstatic final String serviceDefJsonFile = \"/admin/service-defs/test-hive-servicedef.json\";\n \tstatic final String serviceName = \"tag-unit-test-TestTagStore\";\n \n-\tstatic final String crcSuffix = \".crc\";\n-\tstatic final String jsonSuffix = \".json\";\n-\n \tstatic Gson gsonBuilder = null;\n-\tstatic RangerServiceDef serviceDef = null;\n-\tstatic RangerService service = null;\n \n \t@BeforeClass\n \tpublic static void setupTest() throws Exception {\n \n-\t\ttearDownAfterClass(crcSuffix);\n-\t\ttearDownAfterClass(jsonSuffix);\n+\t\ttmpDir = \"file://\" + System.getProperty(\"java.io.tmpdir\");\n \n-\t\tFileSystem fs = filePath.getFileSystem(config);\n-\n-\t\tFSDataOutputStream outStream = fs.create(filePath, true);\n-\t\tOutputStreamWriter writer = null;\n-\n-\t\twriter = new OutputStreamWriter(outStream);\n-\n-\t\twriter.write(\"<configuration>\\n\" +\n+\t\tString textTemplate = \"<configuration>\\n\" +\n \t\t\t\t\"        <property>\\n\" +\n \t\t\t\t\"                <name>ranger.tag.store.file.dir</name>\\n\" +\n-\t\t\t\t\"                <value>file:///etc/ranger/data</value>\\n\" +\n+\t\t\t\t\"                <value>%s</value>\\n\" +\n \t\t\t\t\"        </property>\\n\" +\n \t\t\t\t\"        <property>\\n\" +\n \t\t\t\t\"                <name>ranger.service.store.file.dir</name>\\n\" +\n-\t\t\t\t\"                <value>file:///etc/ranger/data</value>\\n\" +\n+\t\t\t\t\"                <value>%s</value>\\n\" +\n \t\t\t\t\"        </property>\\n\" +\n-\t\t\t\t\"</configuration>\\n\");\n+\t\t\t\t\"</configuration>\\n\";\n+\n+\t\tString text = String.format(textTemplate, tmpDir, tmpDir);\n \n+\t\tString fileName =  tmpDir + \"/ranger-admin-test-site.xml\";\n+\t\tfilePath = new Path(fileName);\n+\t\tFileSystem fs = filePath.getFileSystem(config);\n+\n+\t\tFSDataOutputStream outStream = fs.create(filePath, true);\n+\n+\t\tOutputStreamWriter writer = new OutputStreamWriter(outStream);\n+\t\twriter.write(text);\n \t\twriter.close();\n \n \t\tRangerConfiguration config = RangerConfiguration.getInstance();\n \t\tconfig.addResource(filePath);\n \n-\t\ttagStore = TagFileStore.getInstance();\n-\t\ttagStore.init();\n-\n-\t\tServiceStore svcStore;\n-\n-\t\tsvcStore = new ServiceFileStore();\n+\t\tServiceStore svcStore = new ServiceFileStore();\n \t\tsvcStore.init();\n \n+\t\ttagStore = TagFileStore.getInstance();\n+\t\ttagStore.init();\n \t\ttagStore.setServiceStore(svcStore);\n \n \t\tvalidator = new TagValidator();\n-\n \t\tvalidator.setTagStore(tagStore);\n \n \t\tgsonBuilder = new GsonBuilder().setDateFormat(\"yyyyMMdd-HH:mm:ss.SSS-Z\")\n@@ -110,17 +108,20 @@ public static void setupTest() throws Exception {\n \n \t\tInputStream inStream = TestTagStore.class.getResourceAsStream(serviceDefJsonFile);\n \t\tInputStreamReader reader = new InputStreamReader(inStream);\n+\n \t\tserviceDef = gsonBuilder.fromJson(reader, RangerServiceDef.class);\n+\n \t\tservice = svcStore.createService(new RangerService(serviceDef.getName(), serviceName, serviceName, null, null));\n+\n \t\treader.close();\n \t\tinStream.close();\n \n \t}\n \n-\t//@AfterClass\n-\tpublic static void tearDownAfterClass(String suffix) throws Exception {\n+\t@AfterClass\n+\tpublic static void tearDownAfterClass() throws Exception {\n \n-\t\tPath dirPath = new Path(\"file:///etc/ranger/data\");\n+\t\tPath dirPath = new Path(tmpDir);\n \t\tFileSystem fs = dirPath.getFileSystem(config);\n \n \t\ttry {\n@@ -132,7 +133,7 @@ public static void tearDownAfterClass(String suffix) throws Exception {\n \t\t\t\t\twhile (files.hasNext()) {\n \t\t\t\t\t\tLocatedFileStatus fileStatus = files.next();\n \t\t\t\t\t\tPath path = fileStatus.getPath();\n-\t\t\t\t\t\tif (fs.isFile(path) && path.getName().endsWith(suffix)) {\n+\t\t\t\t\t\tif (fs.isFile(path)) {\n \t\t\t\t\t\t\tfs.delete(path, true);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n@@ -142,6 +143,7 @@ public static void tearDownAfterClass(String suffix) throws Exception {\n \t\t}\n \n \t\tfs.delete(filePath, true);\n+\n \t}\n \n \t@Test",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/test/java/org/apache/ranger/plugin/store/TestTagStore.java",
                "sha": "54241585facebff41cb6ae486e26c87cdef47f9a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "deletions": 0,
                "filename": "security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "patch": "@@ -1027,6 +1027,7 @@ public RangerService createService(RangerService service) throws Exception {\n \n \t\t// While creating, value of version should be 1.\n \t\tservice.setVersion(new Long(1));\n+\t\tservice.setTagVersion(new Long(1));\n \n \t\tif (populateExistingBaseFields) {\n \t\t\tsvcServiceWithAssignedId.setPopulateExistingBaseFields(true);",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "sha": "a4765acd83d381dde11a01a9a249531ca3733469",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/security-admin/src/main/java/org/apache/ranger/rest/TagRESTConstants.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/rest/TagRESTConstants.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "deletions": 2,
                "filename": "security-admin/src/main/java/org/apache/ranger/rest/TagRESTConstants.java",
                "patch": "@@ -29,8 +29,8 @@\n \tstatic final String RESOURCES_RESOURCE       = \"/resources/\";\n \tstatic final String RESOURCE_RESOURCE        = \"/resource/\";\n \tstatic final String TAGRESOURCEMAPS_RESOURCE = \"/tagresourcemaps/\";\n-\tstatic final String TAGNAMES_RESOURCE        = \"/tags/names/\";\n-\tstatic final String LOOKUP_TAGS_RESOURCE     = \"/tags/lookup/\";\n+\tstatic final String TAGNAMES_RESOURCE        = \"/names/\";\n+\tstatic final String LOOKUP_TAGS_RESOURCE     = \"/lookup/\";\n \tstatic final String TAGS_DOWNLOAD            = \"/download/\";\n \n \tpublic static final String SERVICE_NAME_PARAM           = \"serviceName\";",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/security-admin/src/main/java/org/apache/ranger/rest/TagRESTConstants.java",
                "sha": "91525df50a70c8e96fba462ebcffa39bc0400718",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/security-admin/src/main/java/org/apache/ranger/service/RangerServiceServiceBase.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/RangerServiceServiceBase.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "deletions": 0,
                "filename": "security-admin/src/main/java/org/apache/ranger/service/RangerServiceServiceBase.java",
                "patch": "@@ -95,7 +95,9 @@ protected XXServiceBase mapViewToEntityBean(RangerService vObj, XXServiceBase xO\n \t\txObj.setName(vObj.getName());\n \t\txObj.setTagService(tagServiceId);\n \t\txObj.setPolicyVersion(vObj.getPolicyVersion());\n+\t\txObj.setTagVersion(vObj.getTagVersion());\n \t\txObj.setPolicyUpdateTime(vObj.getPolicyUpdateTime());\n+\t\txObj.setTagUpdateTime(vObj.getTagUpdateTime());\n \t\txObj.setDescription(vObj.getDescription());\n \t\txObj.setIsEnabled(vObj.getIsEnabled());\n \t\treturn xObj;\n@@ -113,7 +115,9 @@ protected RangerService mapEntityToViewBean(RangerService vObj, XXServiceBase xO\n \t\tvObj.setDescription(xObj.getDescription());\n \t\tvObj.setTagService(xTagService != null ? xTagService.getName() : null);\n \t\tvObj.setPolicyVersion(xObj.getPolicyVersion());\n+\t\tvObj.setTagVersion(xObj.getTagVersion());\n \t\tvObj.setPolicyUpdateTime(xObj.getPolicyUpdateTime());\n+\t\tvObj.setTagUpdateTime(xObj.getTagUpdateTime());\n \t\tvObj.setIsEnabled(xObj.getIsenabled());\n \t\treturn vObj;\n \t}",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/security-admin/src/main/java/org/apache/ranger/service/RangerServiceServiceBase.java",
                "sha": "3cbeaf0bdfbc9aca20b44387a39fb1f970e1f1c0",
                "status": "modified"
            }
        ],
        "message": "RANGER-274: Fixed minor bugs, potential NPE, REST resource path. Fixed service creation\n\nSigned-off-by: Madhan Neethiraj <madhan@apache.org>",
        "parent": "https://github.com/apache/ranger/commit/5876e22723c3ba82c405efbb29d97fae28e189aa",
        "patched_files": [
            "ServiceDBStore.java",
            "RangerRESTUtils.java",
            "RangerAdminRESTClient.java",
            "RangerTagProvider.java",
            "RangerAdminTagRetriever.java",
            "TagStore.java",
            "TagFileStore.java",
            "RangerServiceServiceBase.java",
            "TagRESTConstants.java"
        ],
        "repo": "ranger",
        "unit_tests": [
            "TestRangerServiceServiceBase.java",
            "TestServiceDBStore.java",
            "TestTagStore.java"
        ]
    }
}