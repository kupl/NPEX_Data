{
    "tomee_04eb5f2": {
        "bug_id": "tomee_04eb5f2",
        "commit": "https://github.com/apache/tomee/commit/04eb5f21b0a6422f6db5611178dd0a50cf92b28a",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomee/blob/04eb5f21b0a6422f6db5611178dd0a50cf92b28a/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckDescriptorLocation.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckDescriptorLocation.java?ref=04eb5f21b0a6422f6db5611178dd0a50cf92b28a",
                "deletions": 2,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckDescriptorLocation.java",
                "patch": "@@ -29,6 +29,8 @@\n import java.net.URL;\n import java.util.*;\n \n+import static org.apache.openejb.util.CollectionsUtil.safe;\n+\n \n public class CheckDescriptorLocation extends ValidationBase {\n \n@@ -40,13 +42,13 @@ public void validate(AppModule appModule){\n \n         List<String> validated = new ArrayList<String>();\n \n-        for(WebModule webModule:appModule.getWebModules())\n+        for(WebModule webModule: safe(appModule.getWebModules()))\n         {\n             validated.add(webModule.getModuleId());\n             validateWebModule(webModule);\n         }\n \n-        for(EjbModule ejbModule:appModule.getEjbModules())\n+        for(EjbModule ejbModule: safe(appModule.getEjbModules()))\n         {\n             //without this check, CheckDescriptorLocationTest#testWarWithDescriptorInRoot() would fail\n             if(!validated.contains(ejbModule.getModuleId()))\n@@ -57,6 +59,9 @@ public void validate(AppModule appModule){\n \n     }\n \n+\n+\n+\n     private void validateWebModule(DeploymentModule webModule) {\n         URL baseUrl = null;\n         this.module= webModule;",
                "raw_url": "https://github.com/apache/tomee/raw/04eb5f21b0a6422f6db5611178dd0a50cf92b28a/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckDescriptorLocation.java",
                "sha": "6506cf50fb131ce4186b96085d686d7ecfe09a13",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/tomee/blob/04eb5f21b0a6422f6db5611178dd0a50cf92b28a/container/openejb-core/src/main/java/org/apache/openejb/util/CollectionsUtil.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/util/CollectionsUtil.java?ref=04eb5f21b0a6422f6db5611178dd0a50cf92b28a",
                "deletions": 0,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/util/CollectionsUtil.java",
                "patch": "@@ -0,0 +1,32 @@\n+/**\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.openejb.util;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.List;\r\n+\r\n+public class CollectionsUtil\r\n+{\r\n+    public static <T> List<T> safe(List<T> list)\r\n+    {\r\n+        if(list==null)\r\n+        {   return Collections.emptyList();\r\n+        }\r\n+        return list;\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/tomee/raw/04eb5f21b0a6422f6db5611178dd0a50cf92b28a/container/openejb-core/src/main/java/org/apache/openejb/util/CollectionsUtil.java",
                "sha": "e6849714f2da4e1b40ecd6a3433072bcfa21d6f9",
                "status": "added"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/tomee/blob/04eb5f21b0a6422f6db5611178dd0a50cf92b28a/container/openejb-core/src/test/java/org/apache/openejb/util/CollectionsUtilTest.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/test/java/org/apache/openejb/util/CollectionsUtilTest.java?ref=04eb5f21b0a6422f6db5611178dd0a50cf92b28a",
                "deletions": 0,
                "filename": "container/openejb-core/src/test/java/org/apache/openejb/util/CollectionsUtilTest.java",
                "patch": "@@ -0,0 +1,36 @@\n+/**\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.openejb.util;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import java.util.List;\r\n+\r\n+public class CollectionsUtilTest {\r\n+\r\n+    @Test\r\n+    public void safeIterationForNullList()\r\n+    {\r\n+        List<String> stringList =null;\r\n+        for(String string: CollectionsUtil.safe(stringList))\r\n+        {\r\n+        }\r\n+\r\n+        //PASS: No NPE thrown\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/tomee/raw/04eb5f21b0a6422f6db5611178dd0a50cf92b28a/container/openejb-core/src/test/java/org/apache/openejb/util/CollectionsUtilTest.java",
                "sha": "2001f22ca1b2f858709032913185121807fd2fbb",
                "status": "added"
            }
        ],
        "message": "Avoid NPE during emptyList forEach\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1377486 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/1d83fa473b96c5d938fb53a650a80fecf925f4d5",
        "repo": "tomee",
        "unit_tests": [
            "CheckDescriptorLocationTest.java",
            "CollectionsUtilTest.java"
        ]
    },
    "tomee_0d76911": {
        "bug_id": "tomee_0d76911",
        "commit": "https://github.com/apache/tomee/commit/0d769119cc44f227155f9d39efa98dd6a2c1b4b6",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomee/blob/0d769119cc44f227155f9d39efa98dd6a2c1b4b6/container/openejb-core/src/main/java/org/apache/openejb/config/PersistenceUnitLinkResolver.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/PersistenceUnitLinkResolver.java?ref=0d769119cc44f227155f9d39efa98dd6a2c1b4b6",
                "deletions": 2,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/PersistenceUnitLinkResolver.java",
                "patch": "@@ -99,7 +99,7 @@ private boolean isIn(final PersistenceUnit value, final WebModule war) {\n     }\n \n     private WebModule extractWebApp(final URI moduleUri) {\n-        if (module == null) {\n+        if (module == null || module.getJarLocation() == null) {\n             return null;\n         }\n \n@@ -113,7 +113,7 @@ private WebModule extractWebApp(final URI moduleUri) {\n         }\n \n         for (WebModule webModule : module.getWebModules()) {\n-            if (isParent(new File(webModule.getJarLocation()), moduleFile, appModuleFile)) {\n+            if (webModule.getJarLocation() != null && isParent(new File(webModule.getJarLocation()), moduleFile, appModuleFile)) {\n                 return webModule;\n             }\n         }",
                "raw_url": "https://github.com/apache/tomee/raw/0d769119cc44f227155f9d39efa98dd6a2c1b4b6/container/openejb-core/src/main/java/org/apache/openejb/config/PersistenceUnitLinkResolver.java",
                "sha": "aae109062f8926a67b872806ab9300cbe3cbc3e1",
                "status": "modified"
            }
        ],
        "message": "NPE check\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1423851 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/7556523201643c5c62f8ff87e76b0e974712e3d0",
        "repo": "tomee",
        "unit_tests": [
            "PersistenceUnitLinkResolverTest.java"
        ]
    },
    "tomee_1554b10": {
        "bug_id": "tomee_1554b10",
        "commit": "https://github.com/apache/tomee/commit/1554b1054c920ece474d18028b3c20c9444fc176",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomee/blob/1554b1054c920ece474d18028b3c20c9444fc176/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiAppContextsService.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiAppContextsService.java?ref=1554b1054c920ece474d18028b3c20c9444fc176",
                "deletions": 4,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiAppContextsService.java",
                "patch": "@@ -49,11 +49,9 @@\n import javax.enterprise.context.spi.Context;\n import javax.enterprise.util.AnnotationLiteral;\n import javax.inject.Singleton;\n-import javax.servlet.ServletRequest;\n import javax.servlet.ServletRequestEvent;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpSession;\n-import javax.servlet.http.HttpSessionEvent;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Constructor;\n import java.util.ArrayList;\n@@ -257,7 +255,9 @@ private void initRequestContext(final ServletRequestEvent event) {\n             final HttpServletRequest request = (HttpServletRequest) event.getServletRequest();\n             ((ServletRequestContext) rq).setServletRequest(request);\n \n-            webBeansContext.getBeanManagerImpl().fireEvent(request, InitializedLiteral.REQUEST);\n+            if (request != null) {\n+                webBeansContext.getBeanManagerImpl().fireEvent(request, InitializedLiteral.REQUEST);\n+            }\n \n             if (request != null) {\n                 //Re-initialize thread local for session\n@@ -283,7 +283,10 @@ private void destroyRequestContext() {\n \n         //Destroy context\n         if (context != null) {\n-            webBeansContext.getBeanManagerImpl().fireEvent(ServletRequestContext.class.cast(context).getServletRequest(), DestroyedLiteral.REQUEST);\n+            final HttpServletRequest servletRequest = ServletRequestContext.class.cast(context).getServletRequest();\n+            if (servletRequest != null) {\n+                webBeansContext.getBeanManagerImpl().fireEvent(servletRequest, DestroyedLiteral.REQUEST);\n+            }\n             context.destroy();\n         }\n ",
                "raw_url": "https://github.com/apache/tomee/raw/1554b1054c920ece474d18028b3c20c9444fc176/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiAppContextsService.java",
                "sha": "e80306f29c003e89979e9dc20051212f36c9511a",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/tomee/blob/1554b1054c920ece474d18028b3c20c9444fc176/container/openejb-core/src/main/java/org/apache/openejb/cdi/OpenEJBBeanBuilder.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/OpenEJBBeanBuilder.java?ref=1554b1054c920ece474d18028b3c20c9444fc176",
                "deletions": 1,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/OpenEJBBeanBuilder.java",
                "patch": "@@ -19,7 +19,6 @@\n \n import org.apache.openejb.BeanContext;\n import org.apache.openejb.assembler.classic.ProxyInterfaceResolver;\n-import org.apache.webbeans.component.creation.BeanAttributesBuilder;\n import org.apache.webbeans.config.WebBeansContext;\n import org.apache.webbeans.ejb.common.component.EjbBeanBuilder;\n ",
                "raw_url": "https://github.com/apache/tomee/raw/1554b1054c920ece474d18028b3c20c9444fc176/container/openejb-core/src/main/java/org/apache/openejb/cdi/OpenEJBBeanBuilder.java",
                "sha": "3f01ebbcc57249be2316b3c785730efd698bfd4c",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/tomee/blob/1554b1054c920ece474d18028b3c20c9444fc176/container/openejb-core/src/main/java/org/apache/openejb/cdi/ScopeHelper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/ScopeHelper.java?ref=1554b1054c920ece474d18028b3c20c9444fc176",
                "deletions": 2,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/ScopeHelper.java",
                "patch": "@@ -19,11 +19,9 @@\n \n import org.apache.webbeans.spi.ContextsService;\n \n-import javax.enterprise.context.ApplicationScoped;\n import javax.enterprise.context.ConversationScoped;\n import javax.enterprise.context.RequestScoped;\n import javax.enterprise.context.SessionScoped;\n-import javax.inject.Singleton;\n import javax.servlet.ServletContext;\n import javax.servlet.http.HttpSession;\n ",
                "raw_url": "https://github.com/apache/tomee/raw/1554b1054c920ece474d18028b3c20c9444fc176/container/openejb-core/src/main/java/org/apache/openejb/cdi/ScopeHelper.java",
                "sha": "57ce98ae0654c5ff07a12e59aeb0328c004b1de8",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/tomee/blob/1554b1054c920ece474d18028b3c20c9444fc176/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=1554b1054c920ece474d18028b3c20c9444fc176",
                "deletions": 1,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "patch": "@@ -187,7 +187,6 @@\n import javax.enterprise.context.NormalScope;\n import javax.enterprise.inject.Produces;\n import javax.enterprise.inject.Stereotype;\n-import javax.enterprise.inject.spi.BeanManager;\n import javax.enterprise.inject.spi.DefinitionException;\n import javax.enterprise.inject.spi.Extension;\n import javax.inject.Scope;",
                "raw_url": "https://github.com/apache/tomee/raw/1554b1054c920ece474d18028b3c20c9444fc176/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "sha": "cee4c2eda138474b0325d30ec7744f38d14f27cb",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomee/blob/1554b1054c920ece474d18028b3c20c9444fc176/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckInjectionPointUsage.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckInjectionPointUsage.java?ref=1554b1054c920ece474d18028b3c20c9444fc176",
                "deletions": 1,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckInjectionPointUsage.java",
                "patch": "@@ -19,10 +19,12 @@\n \n import org.apache.openejb.config.EjbModule;\n \n+import javax.enterprise.inject.Default;\n import javax.enterprise.inject.spi.DefinitionException;\n import javax.enterprise.inject.spi.InjectionPoint;\n import javax.inject.Inject;\n import javax.servlet.http.HttpServlet;\n+import java.lang.annotation.Annotation;\n import java.lang.reflect.Field;\n \n /**\n@@ -42,7 +44,8 @@ public void validate(final EjbModule ejbModule) {\n                     continue;\n                 }\n \n-                if (field.getAnnotations().length == 1) {\n+                final Annotation[] annotations = field.getAnnotations();\n+                if (annotations.length == 1 || (annotations.length == 2 && field.getAnnotation(Default.class) != null)) {\n                     throw new DefinitionException(\"Can't inject InjectionPoint in \" + field.getDeclaringClass());\n                 } // else we should check is there is no other qualifier than @Default but too early\n             }",
                "raw_url": "https://github.com/apache/tomee/raw/1554b1054c920ece474d18028b3c20c9444fc176/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckInjectionPointUsage.java",
                "sha": "97b32f2ee454584aa3daf4255915d93b7d3b0f77",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomee/blob/1554b1054c920ece474d18028b3c20c9444fc176/tck/cdi-embedded/src/test/resources/failing.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tck/cdi-embedded/src/test/resources/failing.xml?ref=1554b1054c920ece474d18028b3c20c9444fc176",
                "deletions": 2,
                "filename": "tck/cdi-embedded/src/test/resources/failing.xml",
                "patch": "@@ -18,8 +18,8 @@\n <suite name=\"CDI TCK\" verbose=\"0\">\n   <test name=\"CDI TCK\">\n     <!-- -Dopenejb.cdi.filter.classloader=false -Dorg.apache.openejb.assembler.classic.WebAppBuilder=org.apache.openejb.web.LightweightWebAppBuilder -Dopenejb.cdi.debug=true -Dopenejb.http.mock-request=true  -->\n-    <classes>\n-      <class name=\"org.jboss.cdi.tck.tests.context.request.event.RequestScopeEventTest\" />\n+    <classes><!-- org.jboss.cdi.tck.tests.context.conversation.ClientConversationContextTest, org.jboss.cdi.tck.tests.context.application.ApplicationContextTest, org.jboss.cdi.tck.tests.extensions.beanManager.beanAttributes.CreateBeanAttributesTest, org.jboss.cdi.tck.tests.event.fires.FireEventTest, org.jboss.cdi.tck.tests.extensions.lifecycle.processInjectionPoint.ProcessInjectionPointFiredTest -->\n+      <class name=\"org.jboss.cdi.tck.tests.context.application.async.ApplicationContextAsyncListenerTest\" />\n     </classes>\n   </test>\n </suite>",
                "raw_url": "https://github.com/apache/tomee/raw/1554b1054c920ece474d18028b3c20c9444fc176/tck/cdi-embedded/src/test/resources/failing.xml",
                "sha": "40f6f295c234ca1cccf2461f5663cccf1416eb34",
                "status": "modified"
            }
        ],
        "message": "avoid npe when we fake requests",
        "parent": "https://github.com/apache/tomee/commit/02818cc3878dde5647efdbd4537e7e8d28f77647",
        "repo": "tomee",
        "unit_tests": [
            "CdiAppContextsServiceTest.java",
            "AnnotationDeployerTest.java"
        ]
    },
    "tomee_1642cda": {
        "bug_id": "tomee_1642cda",
        "commit": "https://github.com/apache/tomee/commit/1642cda8170561e2b0d9cb4dd6c1c971500c86bf",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomee/blob/1642cda8170561e2b0d9cb4dd6c1c971500c86bf/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java?ref=1642cda8170561e2b0d9cb4dd6c1c971500c86bf",
                "deletions": 2,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "patch": "@@ -611,15 +611,16 @@ protected void addWebModule(AppModule appModule, URL warUrl, ClassLoader parentC\n         ClassLoader webClassLoader = webModule.getClassLoader();\n \n         // get include/exclude properties from context-param\n+        // using a Set instead of a list would be easier ...\n         Options contextParams = new Options(getContextParams(webModule.getWebApp().getContextParam()));\n         String include = contextParams.get(CLASSPATH_INCLUDE, \"\");\n         String exclude = contextParams.get(CLASSPATH_EXCLUDE, \".*\");\n         Set<RequireDescriptors> requireDescriptors = contextParams.getAll(CLASSPATH_REQUIRE_DESCRIPTOR, RequireDescriptors.CLIENT);\n         boolean filterDescriptors = contextParams.get(CLASSPATH_FILTER_DESCRIPTORS, false);\n         boolean filterSystemApps = contextParams.get(CLASSPATH_FILTER_SYSTEMAPPS, true);\n \n-        contextParams.getProperties().put(moduleName, warPath);\n-        FileUtils base = new FileUtils(moduleName, moduleName, contextParams.getProperties());\n+        contextParams.getProperties().put(webModule.getModuleId(), warPath);\n+        FileUtils base = new FileUtils(webModule.getModuleId(), webModule.getModuleId(), contextParams.getProperties());\n         DeploymentsResolver.loadFromClasspath(base, urls, webClassLoader, include, exclude, requireDescriptors, filterDescriptors, filterSystemApps);\n \n         // we need to exclude previously deployed modules",
                "raw_url": "https://github.com/apache/tomee/raw/1642cda8170561e2b0d9cb4dd6c1c971500c86bf/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "sha": "b394e52f0a34c2a1c7bec824da02e9b12fc89725",
                "status": "modified"
            }
        ],
        "message": "Change the module name by the module id in the map to avoid NPE when not running in Tomcat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@1057107 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/635230ae97c8719fff1c0de54924ca71cac6994e",
        "repo": "tomee",
        "unit_tests": [
            "DeploymentLoaderTest.java"
        ]
    },
    "tomee_1747386": {
        "bug_id": "tomee_1747386",
        "commit": "https://github.com/apache/tomee/commit/17473860f8096944340ea1d2bb11f74acfe6610b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomee/blob/17473860f8096944340ea1d2bb11f74acfe6610b/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java?ref=17473860f8096944340ea1d2bb11f74acfe6610b",
                "deletions": 1,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "patch": "@@ -808,7 +808,7 @@ private Beans mergeBeansXml(final Beans current, final URL url) {\n                 current.getInterceptors().addAll(beans.getInterceptors());\n             }\n             // check is done here since later we lost the data of the origin\n-            ReadDescriptors.checkDuplicatedByBeansXml(beans, current);\n+            ReadDescriptors.checkDuplicatedByBeansXml(beans, returnValue);\n         } catch (OpenEJBException e) {\n             logger.error(\"Unable to read beans.xml from :\" + url.toExternalForm());\n         }",
                "raw_url": "https://github.com/apache/tomee/raw/17473860f8096944340ea1d2bb11f74acfe6610b/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "sha": "15a1be44b909fe695969c60e7fbf5a8e110c007f",
                "status": "modified"
            }
        ],
        "message": "NPE check\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1360040 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/32c07d0ec642a68ba2c8c44968c577c8cf1b1a62",
        "repo": "tomee",
        "unit_tests": [
            "DeploymentLoaderTest.java"
        ]
    },
    "tomee_19646c2": {
        "bug_id": "tomee_19646c2",
        "commit": "https://github.com/apache/tomee/commit/19646c2554d3c1d5d31fe4f09c52b6da708871a4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomee/blob/19646c2554d3c1d5d31fe4f09c52b6da708871a4/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/Setup.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/Setup.java?ref=19646c2554d3c1d5d31fe4f09c52b6da708871a4",
                "deletions": 0,
                "filename": "arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/Setup.java",
                "patch": "@@ -369,6 +369,7 @@ private static String relativize(final File f, final File base) {\n     public static void installArquillianBeanDiscoverer(final File home) {\n         final File destination = new File(home, TOMEE_BEAN_DISCOVERER_JAR);\n         ShrinkWrap.create(JavaArchive.class, destination.getName())\n+                .addManifest() // avoid NPE from org.apache.tomcat.util.scan.StandardJarScanner.processManifest()\n                 .addClasses(BeanDicovererInstaller.class, TestClassDiscoverer.class, ArquillianFilterRunner.class, Discover.class)\n                 .addAsManifestResource(new StringAsset(BeanDicovererInstaller.class.getName()), ArchivePaths.create(\"org.apache.openejb.extension\"))\n                 .as(ZipExporter.class).exportTo(destination, false);",
                "raw_url": "https://github.com/apache/tomee/raw/19646c2554d3c1d5d31fe4f09c52b6da708871a4/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/Setup.java",
                "sha": "83c7f95af422933d9ebfcd89ea32cce23ea2d6f8",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/tomee/blob/19646c2554d3c1d5d31fe4f09c52b6da708871a4/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/securityejb/SecurityEJBPropagationTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/securityejb/SecurityEJBPropagationTest.java?ref=19646c2554d3c1d5d31fe4f09c52b6da708871a4",
                "deletions": 2,
                "filename": "arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/securityejb/SecurityEJBPropagationTest.java",
                "patch": "@@ -23,7 +23,6 @@\n import org.jboss.shrinkwrap.api.Archive;\n import org.jboss.shrinkwrap.api.ShrinkWrap;\n import org.jboss.shrinkwrap.api.spec.WebArchive;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n \n@@ -46,7 +45,6 @@\n     private URL base;\n \n     @Test\n-    @Ignore(\"we need to upgrade to tomcat 8.5.1 cause org.apache.catalina.connector.Response.applicationResponse init should be null and not this\")\n     public void run() throws IOException {\n         assertEquals(\"testtestnullguest\", IO.slurp(new URL(base.toExternalForm() + \"test?doLogin=true\")));\n     }",
                "raw_url": "https://github.com/apache/tomee/raw/19646c2554d3c1d5d31fe4f09c52b6da708871a4/arquillian/arquillian-tomee-tests/arquillian-tomee-webprofile-tests/src/test/java/org/apache/openejb/arquillian/tests/securityejb/SecurityEJBPropagationTest.java",
                "sha": "d1c4500c04c642a5fbe82284d57921919a02c6ba",
                "status": "modified"
            }
        ],
        "message": "SecurityEJBPropagationTest now passes + avoid NPE cause of a missing MANIFEST.MF in internal arquillian jar",
        "parent": "https://github.com/apache/tomee/commit/b6cf7dee46b808869908ee512e9f865f3f015453",
        "repo": "tomee",
        "unit_tests": [
            "SetupTest.java",
            "TestSetup.java"
        ]
    },
    "tomee_19f7b11": {
        "bug_id": "tomee_19f7b11",
        "commit": "https://github.com/apache/tomee/commit/19f7b1164a3bbed9acdebe168035076d7ec2f948",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomee/blob/19f7b1164a3bbed9acdebe168035076d7ec2f948/container/openejb-core/src/main/java/org/apache/openejb/core/security/AbstractSecurityService.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/core/security/AbstractSecurityService.java?ref=19f7b1164a3bbed9acdebe168035076d7ec2f948",
                "deletions": 0,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/core/security/AbstractSecurityService.java",
                "patch": "@@ -243,6 +243,10 @@ public boolean isCallerInRole(final String role) {\n         }\n \n         final ThreadContext threadContext = ThreadContext.getThreadContext();\n+        if (threadContext == null) {\n+            return false;\n+        }\n+\n         final SecurityContext securityContext = threadContext.get(SecurityContext.class);\n \n         if (\"**\".equals(role)) {",
                "raw_url": "https://github.com/apache/tomee/raw/19f7b1164a3bbed9acdebe168035076d7ec2f948/container/openejb-core/src/main/java/org/apache/openejb/core/security/AbstractSecurityService.java",
                "sha": "cd001ed569e7d93ec6abe7a1dc505bf5323a61fd",
                "status": "modified"
            }
        ],
        "message": "avoid NPE",
        "parent": "https://github.com/apache/tomee/commit/9670c840f265adfb6e6a1dbbf6d31ecf4cc48206",
        "repo": "tomee",
        "unit_tests": [
            "AbstractSecurityServiceTest.java"
        ]
    },
    "tomee_231ad85": {
        "bug_id": "tomee_231ad85",
        "commit": "https://github.com/apache/tomee/commit/231ad8583179631f191f181f9f2b7967e4719d61",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/tomee/blob/231ad8583179631f191f181f9f2b7967e4719d61/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TomEEContainer.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TomEEContainer.java?ref=231ad8583179631f191f181f9f2b7967e4719d61",
                "deletions": 4,
                "filename": "arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TomEEContainer.java",
                "patch": "@@ -171,7 +171,15 @@ public void addServlets(final HTTPContext httpContext, final AppInfo appInfo) {\n         for (WebAppInfo webApps : appInfo.webApps) {\n             for (ServletInfo servlet : webApps.servlets) {\n                 // weird but arquillianurl doesn't match the servlet url but its context\n-                httpContext.add(new Servlet(servlet.servletClass, webApps.contextRoot));\n+                String clazz = servlet.servletClass;\n+                if (clazz == null) {\n+                    clazz = servlet.servletName;\n+                    if (clazz == null) {\n+                        continue;\n+                    }\n+                }\n+\n+                httpContext.add(new Servlet(clazz, webApps.contextRoot));\n                 /*\n                 for (String mapping : servlet.mappings) {\n                     httpContext.add(new Servlet(servlet.servletClass, startWithSlash(uniqueSlash(webApps.contextRoot, mapping))));\n@@ -231,9 +239,7 @@ public ProtocolMetaData deploy(Archive<?> archive) throws DeploymentException {\n             httpContext.add(new Servlet(\"ArquillianServletRunner\", arquillianServlet));\n             addServlets(httpContext, appInfo);\n \n-            // we should probably get all servlets and add them to the context\n-            final ProtocolMetaData metadata = new ProtocolMetaData().addContext(httpContext);\n-            return metadata;\n+            return new ProtocolMetaData().addContext(httpContext);\n         } catch (Exception e) {\n             e.printStackTrace();\n             throw new DeploymentException(\"Unable to deploy\", e);",
                "raw_url": "https://github.com/apache/tomee/raw/231ad8583179631f191f181f9f2b7967e4719d61/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TomEEContainer.java",
                "sha": "b8852d5deb60089d4d706cef9c54b0ecfa6589a6",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/tomee/blob/77e49a2111f072aa02d9a88f8482ed340018ecbb/arquillian/arquillian-tomee-extensions/pom.xml",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-extensions/pom.xml?ref=77e49a2111f072aa02d9a88f8482ed340018ecbb",
                "deletions": 22,
                "filename": "arquillian/arquillian-tomee-extensions/pom.xml",
                "patch": "@@ -1,22 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-  <parent>\n-    <artifactId>arquillian</artifactId>\n-    <groupId>org.apache.openejb</groupId>\n-    <version>1.1.0-SNAPSHOT</version>\n-  </parent>\n-  <modelVersion>4.0.0</modelVersion>\n-\n-  <artifactId>arquillian-tomee-extensions</artifactId>\n-  <name>OpenEJB :: Arquillian Adaptors Parent :: TomEE Extensions</name>\n-\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.jboss.arquillian.container</groupId>\n-      <artifactId>arquillian-container-test-impl-base</artifactId>\n-      <version>${version.arquillian}</version>\n-    </dependency>\n-  </dependencies>\n-</project>",
                "raw_url": "https://github.com/apache/tomee/raw/77e49a2111f072aa02d9a88f8482ed340018ecbb/arquillian/arquillian-tomee-extensions/pom.xml",
                "sha": "15941019865c600bd1aa42da171c665cb0587564",
                "status": "removed"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/tomee/blob/231ad8583179631f191f181f9f2b7967e4719d61/arquillian/pom.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/pom.xml?ref=231ad8583179631f191f181f9f2b7967e4719d61",
                "deletions": 1,
                "filename": "arquillian/pom.xml",
                "patch": "@@ -48,6 +48,5 @@\n     <module>arquillian-tomee-moviefun-example</module>\n     <module>arquillian-openejb-embedded-4</module>\n     <module>ziplock</module>\n-    <module>arquillian-tomee-extensions</module>\n   </modules>\n </project>",
                "raw_url": "https://github.com/apache/tomee/raw/231ad8583179631f191f181f9f2b7967e4719d61/arquillian/pom.xml",
                "sha": "f27b508a288750f7fd6513840a7b765f866852b4",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/tomee/blob/231ad8583179631f191f181f9f2b7967e4719d61/server/openejb-webservices/src/main/java/org/apache/openejb/server/webservices/WsService.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-webservices/src/main/java/org/apache/openejb/server/webservices/WsService.java?ref=231ad8583179631f191f181f9f2b7967e4719d61",
                "deletions": 2,
                "filename": "server/openejb-webservices/src/main/java/org/apache/openejb/server/webservices/WsService.java",
                "patch": "@@ -323,8 +323,14 @@ public void afterApplicationCreated(WebAppInfo webApp) {\n         }\n \n         for (ServletInfo servlet : webApp.servlets) {\n+            if (servlet.servletName == null) {\n+                continue;\n+            }\n+\n             PortInfo portInfo = ports.get(servlet.servletName);\n-            if (portInfo == null) continue;\n+            if (portInfo == null) {\n+                continue;\n+            }\n \n             try {\n                 ClassLoader classLoader = webContext.getClassLoader();\n@@ -396,8 +402,14 @@ public void beforeApplicationDestroyed(AppInfo appInfo) {\n                 }\n \n                 for (ServletInfo servlet : webApp.servlets) {\n+                    if (servlet.servletClass == null) {\n+                        continue;\n+                    }\n+\n                     PortInfo portInfo = ports.get(servlet.servletClass);\n-                    if (portInfo == null) continue;\n+                    if (portInfo == null) {\n+                        continue;\n+                    }\n \n                     // remove wsdl addresses from global registry\n                     String address = servletAddresses.remove(webApp.moduleId + \".\" + servlet.servletName);",
                "raw_url": "https://github.com/apache/tomee/raw/231ad8583179631f191f181f9f2b7967e4719d61/server/openejb-webservices/src/main/java/org/apache/openejb/server/webservices/WsService.java",
                "sha": "60e8a9234a78a66fa83dc3185bbbd0ff72a12aff",
                "status": "modified"
            }
        ],
        "message": "avoiding NPE when the servlet cant be added\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1343695 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/77e49a2111f072aa02d9a88f8482ed340018ecbb",
        "repo": "tomee",
        "unit_tests": [
            "TomEEContainerTest.java"
        ]
    },
    "tomee_27d92e2": {
        "bug_id": "tomee_27d92e2",
        "commit": "https://github.com/apache/tomee/commit/27d92e24ebcf367e9e051b673ef8003c315c2f8d",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomee/blob/27d92e24ebcf367e9e051b673ef8003c315c2f8d/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=27d92e24ebcf367e9e051b673ef8003c315c2f8d",
                "deletions": 1,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "patch": "@@ -827,7 +827,13 @@ void process(ClassLoader cl, String cls, Object object) {\n \n \t\tprivate String getConfigPropertyType(javax.resource.spi.ConfigProperty annotation, Class<?> type) {\n \t\t\tClass<?> t = (annotation == null) ? null : annotation.type();\n-\t\t\tif (t == null || t.equals(Object.class)) {\n+            if (t == null && type != null) {\n+                return type.getName();\n+            } else if (t == null) {\n+                return null;\n+            }\n+\n+\t\t\tif (t.equals(Object.class)) {\n \t\t\t\tt = type;\n \t\t\t}\n             if (t == null) { // t == null && type == null",
                "raw_url": "https://github.com/apache/tomee/raw/27d92e24ebcf367e9e051b673ef8003c315c2f8d/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "sha": "dc438489a407a9af0649798cb445c89fac57bb6c",
                "status": "modified"
            }
        ],
        "message": "avoiding NPE when a custom mdb container uses badly defined activation properties\nOPENEJB-1747: Avoid NPE when a custom mdb container uses badly defined activation properties\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1203155 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/e25a26cc21356a0e894db5dd8bf7b9cc41772293",
        "repo": "tomee",
        "unit_tests": [
            "AnnotationDeployerTest.java"
        ]
    },
    "tomee_28e762e": {
        "bug_id": "tomee_28e762e",
        "commit": "https://github.com/apache/tomee/commit/28e762ec05a2dce449650a688fa01e56569c73bb",
        "file": [
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/tomee/blob/28e762ec05a2dce449650a688fa01e56569c73bb/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java?ref=28e762ec05a2dce449650a688fa01e56569c73bb",
                "deletions": 20,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "patch": "@@ -76,6 +76,7 @@\n import java.util.ArrayList;\n import java.util.Set;\n import java.util.LinkedHashSet;\n+import java.util.HashMap;\n import java.net.URL;\n import java.io.File;\n import java.io.IOException;\n@@ -250,29 +251,40 @@ void configureWebserviceSecurity(EjbJarInfo ejbJarInfo, EjbModule ejbModule) {\n \n         OpenejbJarType openejbJarType = (OpenejbJarType) altDD;\n \n+\n+        Map<String, org.apache.openejb.jee.oejb2.EnterpriseBean> beans = new HashMap<String, org.apache.openejb.jee.oejb2.EnterpriseBean>();\n+        for (org.apache.openejb.jee.oejb2.EnterpriseBean enterpriseBean : openejbJarType.getEnterpriseBeans()) {\n+            beans.put(enterpriseBean.getEjbName(), enterpriseBean);\n+        }\n+\n         List<PortInfo> infoList = ejbJarInfo.portInfos;\n         for (PortInfo portInfo : infoList) {\n-            String link = portInfo.serviceLink;\n-\n-            List<org.apache.openejb.jee.oejb2.EnterpriseBean> enterpriseBeans = openejbJarType.getEnterpriseBeans();\n-            for (org.apache.openejb.jee.oejb2.EnterpriseBean enterpriseBean : enterpriseBeans) {\n-                if (link.equals(enterpriseBean.getEjbName()) && enterpriseBean instanceof SessionBeanType) {\n-                    SessionBeanType sessionBean = (SessionBeanType) enterpriseBean;\n-                    WebServiceSecurityType webServiceSecurityType = sessionBean.getWebServiceSecurity();\n-                    portInfo.realmName = webServiceSecurityType.getRealmName();\n-                    portInfo.securityRealmName = webServiceSecurityType.getSecurityRealmName();\n-                    if (webServiceSecurityType.getTransportGuarantee() != null) {\n-                        portInfo.transportGuarantee = webServiceSecurityType.getTransportGuarantee().value();\n-                    } else {\n-                        portInfo.transportGuarantee = \"NONE\";\n-                    }\n \n-                    if (webServiceSecurityType.getAuthMethod() != null) {\n-                        portInfo.authMethod = webServiceSecurityType.getAuthMethod().value();\n-                    } else {\n-                        portInfo.authMethod = \"NONE\";\n-                    }\n-                }\n+            org.apache.openejb.jee.oejb2.EnterpriseBean bean = beans.get(portInfo.serviceLink);\n+\n+            if (bean == null) continue; /* TODO: throw something? */\n+            if (!(bean instanceof SessionBeanType)) continue; /* TODO: throw something? */\n+\n+            SessionBeanType sessionBean = (SessionBeanType) bean;\n+            WebServiceSecurityType webServiceSecurityType = sessionBean.getWebServiceSecurity();\n+\n+            if (webServiceSecurityType == null) {\n+                //TODO: this ok?\n+                continue;\n+            }\n+\n+            portInfo.realmName = webServiceSecurityType.getRealmName();\n+            portInfo.securityRealmName = webServiceSecurityType.getSecurityRealmName();\n+            if (webServiceSecurityType.getTransportGuarantee() != null) {\n+                portInfo.transportGuarantee = webServiceSecurityType.getTransportGuarantee().value();\n+            } else {\n+                portInfo.transportGuarantee = \"NONE\";\n+            }\n+\n+            if (webServiceSecurityType.getAuthMethod() != null) {\n+                portInfo.authMethod = webServiceSecurityType.getAuthMethod().value();\n+            } else {\n+                portInfo.authMethod = \"NONE\";\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/tomee/raw/28e762ec05a2dce449650a688fa01e56569c73bb/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "sha": "ca6b0a45c8aabbe51b5bfeeb03c7e8328a8025fc",
                "status": "modified"
            }
        ],
        "message": "Fix for OPENEJB-1021: NPE in AppInfoBuilder.configureWebserviceSecurity()\nNot sure if it's a good fix\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@767242 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/15f21a11aa6208b4810a571eee9d555824ccb76c",
        "repo": "tomee",
        "unit_tests": [
            "AppInfoBuilderTest.java"
        ]
    },
    "tomee_2a5ed08": {
        "bug_id": "tomee_2a5ed08",
        "commit": "https://github.com/apache/tomee/commit/2a5ed08afd40e1ee98df07a9a38de89a5ea7c947",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomee/blob/2a5ed08afd40e1ee98df07a9a38de89a5ea7c947/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/AppInfo.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/AppInfo.java?ref=2a5ed08afd40e1ee98df07a9a38de89a5ea7c947",
                "deletions": 4,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/AppInfo.java",
                "patch": "@@ -18,9 +18,8 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n+import java.util.Properties;\n import java.util.Set;\n-import java.util.TreeMap;\n import java.util.TreeSet;\n \n /**\n@@ -41,6 +40,6 @@\n     public final JndiEncInfo globalJndiEnc = new JndiEncInfo();\n     public final JndiEncInfo appJndiEnc = new JndiEncInfo();\n     public String cmpMappingsXml;\n-    public Map<String, String> jmx = new TreeMap<String, String>();\n-    public Set<String> mbeans = new TreeSet<String>();\n+    public final Properties jmx = new Properties();\n+    public final Set<String> mbeans = new TreeSet<String>();\n }",
                "raw_url": "https://github.com/apache/tomee/raw/2a5ed08afd40e1ee98df07a9a38de89a5ea7c947/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/AppInfo.java",
                "sha": "0af49b9f36113e6437f86232f64f6973bceac11a",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomee/blob/2a5ed08afd40e1ee98df07a9a38de89a5ea7c947/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java?ref=2a5ed08afd40e1ee98df07a9a38de89a5ea7c947",
                "deletions": 3,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "patch": "@@ -909,7 +909,7 @@ public AppContext createApplication(AppInfo appInfo, ClassLoader classLoader, bo\n         }\n     }\n \n-    private static void deployMBean(final BeanManager bm, final ClassLoader cl, final String mbeanClass, final Map<String, String> appMbeans, final String id) {\n+    private static void deployMBean(final BeanManager bm, final ClassLoader cl, final String mbeanClass, final Properties appMbeans, final String id) {\n         final Class<?> clazz;\n         try {\n             clazz = cl.loadClass(mbeanClass);\n@@ -1291,9 +1291,9 @@ public synchronized void destroyApplication(AppInfo appInfo) throws UndeployExce\n \n         // mbeans\n         MBeanServer server = LocalMBeanServer.get();\n-        for (String objectName : appInfo.jmx.values()) {\n+        for (Object objectName : appInfo.jmx.values()) {\n             try {\n-              ObjectName on = new ObjectName(objectName);\n+              ObjectName on = new ObjectName((String) objectName);\n               if (server.isRegistered(on)) {\n                       server.unregisterMBean(on);\n               }",
                "raw_url": "https://github.com/apache/tomee/raw/2a5ed08afd40e1ee98df07a9a38de89a5ea7c947/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "sha": "5d087c7c5de33a4365b34f6f560d399a73c537ec",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomee/blob/2a5ed08afd40e1ee98df07a9a38de89a5ea7c947/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java?ref=2a5ed08afd40e1ee98df07a9a38de89a5ea7c947",
                "deletions": 1,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "patch": "@@ -102,7 +102,7 @@ public AppInfo build(AppModule appModule) throws OpenEJBException {\n         appInfo.path = appModule.getJarLocation();\n         appInfo.standaloneModule = appModule.isStandaloneModule();\n         appInfo.watchedResources.addAll(appModule.getWatchedResources());\n-        appInfo.mbeans = appModule.getAdditionalLibMbeans();\n+        appInfo.mbeans.addAll(appModule.getAdditionalLibMbeans());\n \n         if (appInfo.appId == null) throw new IllegalArgumentException(\"AppInfo.appId cannot be null\");\n         if (appInfo.path == null) appInfo.path = appInfo.appId;",
                "raw_url": "https://github.com/apache/tomee/raw/2a5ed08afd40e1ee98df07a9a38de89a5ea7c947/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "sha": "07ea3c1501d9809804e177c6d2b51ede18b0af52",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tomee/blob/2a5ed08afd40e1ee98df07a9a38de89a5ea7c947/container/openejb-core/src/main/java/org/apache/openejb/config/MBeanDeployer.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/MBeanDeployer.java?ref=2a5ed08afd40e1ee98df07a9a38de89a5ea7c947",
                "deletions": 0,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/MBeanDeployer.java",
                "patch": "@@ -43,6 +43,10 @@ public AppModule deploy(AppModule appModule) throws OpenEJBException {\n         // there is an ejbmodule by webapp so we should't need to go through the webapp\n \n         for (EjbModule ejbModule : appModule.getEjbModules()) {\n+            if (ejbModule.getFinder() == null) {\n+                continue;\n+            }\n+\n             for (Annotated<Class<?>> clazz : ejbModule.getFinder().findMetaAnnotatedClasses(MBean.class)) {\n                 final Class<?> realClass = clazz.get();\n                 final String name = clazz.get().getName();\n@@ -55,6 +59,10 @@ public AppModule deploy(AppModule appModule) throws OpenEJBException {\n             }\n         }\n         for (ClientModule clientModule : appModule.getClientModules()) {\n+            if (clientModule.getFinder() == null) {\n+                continue;\n+            }\n+\n             for (Annotated<Class<?>> clazz : clientModule.getFinder().findMetaAnnotatedClasses(MBean.class)) {\n                 final String name = clazz.get().getName();\n                 if (done.contains(name)) {",
                "raw_url": "https://github.com/apache/tomee/raw/2a5ed08afd40e1ee98df07a9a38de89a5ea7c947/container/openejb-core/src/main/java/org/apache/openejb/config/MBeanDeployer.java",
                "sha": "602d4f2de87eb7cc6f0deed32f153defdaa8e144",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomee/blob/2a5ed08afd40e1ee98df07a9a38de89a5ea7c947/container/openejb-core/src/test/java/org/apache/openejb/config/MBeanDeployerTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/test/java/org/apache/openejb/config/MBeanDeployerTest.java?ref=2a5ed08afd40e1ee98df07a9a38de89a5ea7c947",
                "deletions": 2,
                "filename": "container/openejb-core/src/test/java/org/apache/openejb/config/MBeanDeployerTest.java",
                "patch": "@@ -90,8 +90,8 @@ public void resetList() {\n     @Test\n     public void mbeans() throws Exception {\n         final Set<String> parsed = new HashSet<String>();\n-        for (String name : appInfo.jmx.values()) {\n-            final ObjectName on = new ObjectName(name);\n+        for (Object name : appInfo.jmx.values()) {\n+            final ObjectName on = new ObjectName((String) name);\n             final String cn = on.getCanonicalName();\n             if (cn.contains(\"name=Empty\")) {\n                 assertTrue(cn.startsWith(\"openejb.user.mbeans\"));",
                "raw_url": "https://github.com/apache/tomee/raw/2a5ed08afd40e1ee98df07a9a38de89a5ea7c947/container/openejb-core/src/test/java/org/apache/openejb/config/MBeanDeployerTest.java",
                "sha": "acde838e568255944c97f3ad8be5e99df871b420",
                "status": "modified"
            }
        ],
        "message": "avoiding NPE in MBeanDeployer\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1298185 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/5c44513dff15bfe772840efc1b312b721f3058ee",
        "repo": "tomee",
        "unit_tests": [
            "AppInfoBuilderTest.java",
            "MBeanDeployerTest.java"
        ]
    },
    "tomee_39d2f25": {
        "bug_id": "tomee_39d2f25",
        "commit": "https://github.com/apache/tomee/commit/39d2f255dbc979708a27c3ac339a587b22b02eb3",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomee/blob/39d2f255dbc979708a27c3ac339a587b22b02eb3/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java?ref=39d2f255dbc979708a27c3ac339a587b22b02eb3",
                "deletions": 1,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "patch": "@@ -831,7 +831,7 @@ public static EjbModule addWebModule(final WebModule webModule, final AppModule\n         {\n             final Object pXml = appModule.getAltDDs().get(\"persistence.xml\");\n \n-            List<URL> persistenceXmls = List.class.isInstance(pXml) ? (List<URL>) pXml : new ArrayList<>(asList(URL.class.cast(pXml)));\n+            List<URL> persistenceXmls = pXml == null ? null : (List.class.isInstance(pXml) ? (List<URL>) pXml : new ArrayList<>(asList(URL.class.cast(pXml))));\n             if (persistenceXmls == null) {\n                 persistenceXmls = new ArrayList<>();\n                 appModule.getAltDDs().put(\"persistence.xml\", persistenceXmls);",
                "raw_url": "https://github.com/apache/tomee/raw/39d2f255dbc979708a27c3ac339a587b22b02eb3/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "sha": "b74e526e88016896187d6c0d936dfb27504eecc9",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomee/blob/39d2f255dbc979708a27c3ac339a587b22b02eb3/examples/cucumber-jvm/pom.xml",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/examples/cucumber-jvm/pom.xml?ref=39d2f255dbc979708a27c3ac339a587b22b02eb3",
                "deletions": 1,
                "filename": "examples/cucumber-jvm/pom.xml",
                "patch": "@@ -32,7 +32,7 @@\n     <plugins>\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-compiler-plugin</artifactId>\r\n+        <artifactId>maven-compiler-plugin</artifactId>\n         <version>3.1</version>\n         <configuration>\n           <source>1.7</source>\n@@ -74,6 +74,12 @@\n       <artifactId>cucumber-openejb</artifactId>\n       <version>1.0.10</version>\n       <scope>test</scope>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.apache.openejb</groupId>\n+          <artifactId>openejb-core</artifactId>\n+        </exclusion>\n+      </exclusions>\n     </dependency>\n     <dependency>\n       <groupId>info.cukes</groupId>",
                "raw_url": "https://github.com/apache/tomee/raw/39d2f255dbc979708a27c3ac339a587b22b02eb3/examples/cucumber-jvm/pom.xml",
                "sha": "de06eab77b73c5ad6335f503b8aa8dc0660f5ba5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomee/blob/39d2f255dbc979708a27c3ac339a587b22b02eb3/itests/legacy-server/src/test/java/org/apache/openejb/itest/legacy/LegacyServerTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/itests/legacy-server/src/test/java/org/apache/openejb/itest/legacy/LegacyServerTest.java?ref=39d2f255dbc979708a27c3ac339a587b22b02eb3",
                "deletions": 2,
                "filename": "itests/legacy-server/src/test/java/org/apache/openejb/itest/legacy/LegacyServerTest.java",
                "patch": "@@ -72,8 +72,8 @@ public void test() throws Exception {\n         //        System.setProperty(\"version\", OpenEjbVersion.get().getVersion());\n         System.setProperty(\"openejb.client.connection.strategy\", \"roundrobin\");\n \n-        logger.info(\"Retrieving standalone server: \" + Repository.guessVersion(\"org.apache.tomee\", \"openejb-standalone\") + \" - This may take a while...\");\n-        final File zip = Repository.getArtifact(\"org.apache.tomee\", \"openejb-standalone\", \"zip\");\n+        logger.info(\"Retrieving standalone server: \" + Repository.guessVersion(\"org.apache.openejb\", \"openejb-standalone\") + \" - This may take a while...\");\n+        final File zip = Repository.getArtifact(\"org.apache.openejb\", \"openejb-standalone\", \"zip\");\n         final File app = Repository.getArtifact(\"org.apache.openejb.itests\", \"failover-ejb\", \"jar\");\n \n         final File dir = Files.tmpdir();",
                "raw_url": "https://github.com/apache/tomee/raw/39d2f255dbc979708a27c3ac339a587b22b02eb3/itests/legacy-server/src/test/java/org/apache/openejb/itest/legacy/LegacyServerTest.java",
                "sha": "fd4d7654e426d945a9d71b40b6308c84997072a6",
                "status": "modified"
            }
        ],
        "message": "fixing some test + avoiding npe when no p.xml is found at appmodule level",
        "parent": "https://github.com/apache/tomee/commit/961371dd1c0ee4386177395d5e797aad04952c15",
        "repo": "tomee",
        "unit_tests": [
            "DeploymentLoaderTest.java"
        ]
    },
    "tomee_3a2d915": {
        "bug_id": "tomee_3a2d915",
        "commit": "https://github.com/apache/tomee/commit/3a2d915422c6089890a7f668f73fe968bfdc3944",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/tomee/blob/3a2d915422c6089890a7f668f73fe968bfdc3944/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java?ref=3a2d915422c6089890a7f668f73fe968bfdc3944",
                "deletions": 10,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "patch": "@@ -64,6 +64,7 @@\n import org.apache.openejb.jee.ServiceImplBean;\n import org.apache.openejb.jee.Servlet;\n import org.apache.openejb.jee.SessionConfig;\n+import org.apache.openejb.jee.TransactionSupportType;\n import org.apache.openejb.jee.WebApp;\n import org.apache.openejb.jee.WebserviceDescription;\n import org.apache.openejb.jee.Webservices;\n@@ -515,16 +516,19 @@ private void buildConnectorModules(final AppModule appModule, final AppInfo appI\n             final OutboundResourceAdapter outbound = resourceAdapter.getOutboundResourceAdapter();\n             if (outbound != null) {\n                 String transactionSupport = \"none\";\n-                switch (outbound.getTransactionSupport()) {\n-                    case LOCAL_TRANSACTION:\n-                        transactionSupport = \"local\";\n-                        break;\n-                    case NO_TRANSACTION:\n-                        transactionSupport = \"none\";\n-                        break;\n-                    case XA_TRANSACTION:\n-                        transactionSupport = \"xa\";\n-                        break;\n+                final TransactionSupportType transactionSupportType = outbound.getTransactionSupport();\n+                if (transactionSupportType != null) {\n+                    switch (transactionSupportType) {\n+                        case LOCAL_TRANSACTION:\n+                            transactionSupport = \"local\";\n+                            break;\n+                        case NO_TRANSACTION:\n+                            transactionSupport = \"none\";\n+                            break;\n+                        case XA_TRANSACTION:\n+                            transactionSupport = \"xa\";\n+                            break;\n+                    }\n                 }\n                 for (final ConnectionDefinition connection : outbound.getConnectionDefinition()) {\n ",
                "raw_url": "https://github.com/apache/tomee/raw/3a2d915422c6089890a7f668f73fe968bfdc3944/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "sha": "a8f3d6e23ffe3d5c32f784e60660e96666440638",
                "status": "modified"
            }
        ],
        "message": "TOMEE-1497 patch from Roman Boykov to avoid a NPE when outbound transactionSupport is null",
        "parent": "https://github.com/apache/tomee/commit/9a9efa35b645a92f640c1cf32a3fba9aef1a5e72",
        "repo": "tomee",
        "unit_tests": [
            "AppInfoBuilderTest.java"
        ]
    },
    "tomee_49656df": {
        "bug_id": "tomee_49656df",
        "commit": "https://github.com/apache/tomee/commit/49656dffdd089daa7a87253375c14068443df370",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomee/blob/49656dffdd089daa7a87253375c14068443df370/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Configuration.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Configuration.java?ref=49656dffdd089daa7a87253375c14068443df370",
                "deletions": 3,
                "filename": "tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Configuration.java",
                "patch": "@@ -71,9 +71,13 @@ public void setHost(String host) {\n     }\n \n     public void setServerXml(String file) {\n-        final File sXml = new File(file);\n-        if (sXml.exists()) {\n-            serverXml = sXml;\n+        if (file == null) {\n+            serverXml = null;\n+        } else {\n+            final File sXml = new File(file);\n+            if (sXml.exists()) {\n+                serverXml = sXml;\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/tomee/raw/49656dffdd089daa7a87253375c14068443df370/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Configuration.java",
                "sha": "84b0019ffe318eb38e620669001f88f41edc8de7",
                "status": "modified"
            }
        ],
        "message": "avoiding NPE when file is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1351171 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/bbc58c7ddb92133ea136e21e46a8b4bd8098a38b",
        "repo": "tomee",
        "unit_tests": [
            "ConfigurationTest.java"
        ]
    },
    "tomee_5462f96": {
        "bug_id": "tomee_5462f96",
        "commit": "https://github.com/apache/tomee/commit/5462f967d56ceb6657c353ad6fb3dce7423bcd82",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomee/blob/5462f967d56ceb6657c353ad6fb3dce7423bcd82/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java?ref=5462f967d56ceb6657c353ad6fb3dce7423bcd82",
                "deletions": 2,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "patch": "@@ -488,9 +488,11 @@ public OpenEjbConfiguration getOpenEjbConfiguration() throws OpenEJBException {\n                 final AppInfo appInfo = configureApplication(jarFile);\n                 sys.containerSystem.applications.add(appInfo);\n \n-            } catch (OpenEJBException alreadyHandled) {\n+            } catch (final OpenEJBException alreadyHandled) {\n                 final DeploymentExceptionManager exceptionManager = SystemInstance.get().getComponent(DeploymentExceptionManager.class);\n-                exceptionManager.pushDelpoymentException(alreadyHandled);\n+                if (exceptionManager != null) {\n+                    exceptionManager.pushDelpoymentException(alreadyHandled);\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/tomee/raw/5462f967d56ceb6657c353ad6fb3dce7423bcd82/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "sha": "342d90f1af75188577a30764c27d15d0352bc590",
                "status": "modified"
            }
        ],
        "message": "avoiding NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1457341 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/fcb3df9d4dc2280f6945d72aa1d787f7ee1ce018",
        "repo": "tomee",
        "unit_tests": [
            "ConfigurationFactoryTest.java"
        ]
    },
    "tomee_59e1858": {
        "bug_id": "tomee_59e1858",
        "commit": "https://github.com/apache/tomee/commit/59e185828811d35f2e06501cab0d407843441224",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomee/blob/59e185828811d35f2e06501cab0d407843441224/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=59e185828811d35f2e06501cab0d407843441224",
                "deletions": 3,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "patch": "@@ -1912,7 +1912,7 @@ public ClientModule deploy(final ClientModule clientModule) throws OpenEJBExcept\n             validateRemoteClientRefs(classLoader, client, remoteClients);\n \n             final IAnnotationFinder finder = clientModule.getFinder();\n-            if (!AnnotationFinder.class.isInstance(finder)) {\n+            if (!AnnotationFinder.class.isInstance(finder) && finder != null) {\n                 final Class<?>[] loadedClasses = new Class<?>[finder.getAnnotatedClassNames().size()];\n                 int i = 0;\n                 for (final String s : finder.getAnnotatedClassNames()) {\n@@ -4716,7 +4716,7 @@ private void processWebServiceHandlers(final EjbModule ejbModule, final Enterpri\n                     }\n                 }\n             }\n-            classes.add(bean.getEjbClass());\n+            // classes.add(bean.getEjbClass());\n             final AnnotationFinder handlersFinder = finder.select(classes);\n             buildAnnotatedRefs(bean, handlersFinder, ejbModule.getClassLoader());\n         }\n@@ -4752,9 +4752,13 @@ private void processWebServiceClientHandlers(final JndiConsumer consumer, final\n                     }\n                 }\n                 handlerClasses.removeAll(processedClasses);\n+                if (handlerClasses.isEmpty()) {\n+                    continue;\n+                }\n \n                 // process handler classes\n-                final AnnotationFinder handlerAnnotationFinder = finder.select(handlerClasses);\n+                final AnnotationFinder handlerAnnotationFinder = finder != null ? finder.select(handlerClasses) :\n+                        new FinderFactory.OpenEJBAnnotationFinder(new FinderFactory.DoLoadClassesArchive(classLoader, handlerClasses));\n \n                 /*\n                  * @EJB",
                "raw_url": "https://github.com/apache/tomee/raw/59e185828811d35f2e06501cab0d407843441224/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "sha": "7e6320c47f09e6fd79ab34e367861228478b30cf",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/tomee/blob/59e185828811d35f2e06501cab0d407843441224/container/openejb-core/src/main/java/org/apache/openejb/config/FinderFactory.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/FinderFactory.java?ref=59e185828811d35f2e06501cab0d407843441224",
                "deletions": 0,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/FinderFactory.java",
                "patch": "@@ -550,4 +550,22 @@ public boolean foundSomething() {\n             return !classInfos.isEmpty();\n         }\n     }\n+\n+    public static class DoLoadClassesArchive extends ClassesArchive {\n+        public DoLoadClassesArchive(final ClassLoader loader, final Collection<String> classes) {\n+            super(load(loader, classes));\n+        }\n+\n+        private static Iterable<Class<?>> load(final ClassLoader loader, final Collection<String> classes) {\n+            final Collection<Class<?>> loaded = new ArrayList<>(classes.size());\n+            for (final String n : classes) {\n+                try {\n+                    loaded.add(loader.loadClass(n));\n+                } catch (final ClassNotFoundException e) {\n+                    // no-op\n+                }\n+            }\n+            return loaded;\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/tomee/raw/59e185828811d35f2e06501cab0d407843441224/container/openejb-core/src/main/java/org/apache/openejb/config/FinderFactory.java",
                "sha": "79501d3f6db16d7a734a3da4498d592a329b5be5",
                "status": "modified"
            }
        ],
        "message": "avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1617934 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/cb85a80985c830a536702354231939aec52ffbee",
        "repo": "tomee",
        "unit_tests": [
            "AnnotationDeployerTest.java"
        ]
    },
    "tomee_5e75f65": {
        "bug_id": "tomee_5e75f65",
        "commit": "https://github.com/apache/tomee/commit/5e75f652cf96e1d95e3a5504f27306f6d6fb85f2",
        "file": [
            {
                "additions": 61,
                "blob_url": "https://github.com/apache/tomee/blob/5e75f652cf96e1d95e3a5504f27306f6d6fb85f2/container/openejb-core/src/main/java/org/apache/openejb/config/AutoConfig.java",
                "changes": 99,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AutoConfig.java?ref=5e75f652cf96e1d95e3a5504f27306f6d6fb85f2",
                "deletions": 38,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AutoConfig.java",
                "patch": "@@ -864,7 +864,7 @@ private void deploy(final EjbModule ejbModule, final AppResources appResources)\n                     containerId = createContainer(containerInfoType, ejbDeployment, bean);\n                 }\n \n-                logger.debug(\"Setting container ID {0} for bean {0}\", containerId, bean.getEjbName());\n+                logger.debug(\"Setting container ID {0} for bean {1}\", containerId, bean.getEjbName());\n                 ejbDeployment.setContainerId(containerId);\n             }\n \n@@ -879,7 +879,7 @@ private void deploy(final EjbModule ejbModule, final AppResources appResources)\n             }\n \n             if (!containerIds.contains(ejbDeployment.getContainerId()) && !skipMdb(bean)) {\n-                logger.debug(\"Desired container {0} not found. Containers availble: {1}. Creating a new container.\",\n+                logger.debug(\"Desired container {0} not found. Containers available: {1}. Creating a new container.\",\n                         ejbDeployment.getContainerId(),\n                         Join.join(\", \", containerIds)\n                 );\n@@ -2251,51 +2251,66 @@ private String getResourceEnvId(final String beanName, String resourceId, final\n     }\n \n     private String getUsableContainer(final Class<? extends ContainerInfo> containerInfoType, final EnterpriseBean bean, final AppResources appResources) {\n-        logger.debug(\"Searching for usable container for bean: {0}. Available application containers: {1}, available system containers {2}\",\n-                bean.getEjbName(),\n-                getContainerIds(appResources.getContainerInfos()),\n-                getContainerIds(configFactory.getContainerInfos())\n-        );\n+        if (logger.isDebugEnabled()) {\n+            logger.debug(\"Searching for usable container for bean: {0}. Available application containers: {1}, available system containers {2}\",\n+                    bean.getEjbName(),\n+                    getContainerIds(appResources.getContainerInfos()),\n+                    getContainerIds(configFactory.getContainerInfos())\n+            );\n+        }\n \n         if (MessageDrivenBean.class.isInstance(bean)) {\n             final MessageDrivenBean messageDrivenBean = (MessageDrivenBean) bean;\n             final String messagingType = messageDrivenBean.getMessagingType();\n \n             final List<String> containerIds = appResources.containerIdsByType.get(messagingType);\n-            logger.debug(\"Searching for usable container for bean: {0} by messaging type: {1}. Potential application containers: {2}\",\n-                    bean.getEjbName(),\n-                    messagingType,\n-                    Join.join(\",\", containerIds));\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"Searching for usable container for bean: {0} by messaging type: {1}. Potential application containers: {2}\",\n+                        bean.getEjbName(),\n+                        messagingType,\n+                        containerIds == null ? \"\" : Join.join(\",\", containerIds));\n+            }\n \n             if (containerIds != null && !containerIds.isEmpty()) {\n-                logger.debug(\"Returning first application container matching by type: {0} - {1}\",\n-                        messagingType,\n-                        containerIds.get(0));\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"Returning first application container matching by type: {0} - {1}\",\n+                            messagingType,\n+                            containerIds.get(0));\n+                }\n \n                 return containerIds.get(0);\n             }\n         }\n \n-        logger.debug(\"Attempting to find a matching container for bean: {0} from application containers {1}\",\n-                bean.getEjbName(),\n-                getContainerIds(appResources.getContainerInfos()));\n+        if (logger.isDebugEnabled()) {\n+            logger.debug(\"Attempting to find a matching container for bean: {0} from application containers {1}\",\n+                    bean.getEjbName(),\n+                    getContainerIds(appResources.getContainerInfos()));\n+        }\n \n         String containerInfo = matchContainer(containerInfoType, bean, appResources.getContainerInfos());\n         if (containerInfo == null) { // avoid to build configFactory.getContainerInfos() if not needed\n \n-            logger.debug(\"Matching application container not found. Attempting to find a matching container for bean: {0} from system containers {1}\",\n-                    bean.getEjbName(),\n-                    getContainerIds(appResources.getContainerInfos()));\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"Matching application container not found. Attempting to find a matching container for bean: {0} from system containers {1}\",\n+                        bean.getEjbName(),\n+                        getContainerIds(appResources.getContainerInfos()));\n+            }\n \n             containerInfo = matchContainer(containerInfoType, bean, configFactory.getContainerInfos());\n         }\n \n         if (containerInfo != null) {\n-            logger.debug(\"Using container {0} for bean {1}\", containerInfo, bean.getEjbName());\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"Using container {0} for bean {1}\", containerInfo, bean.getEjbName());\n+            }\n             return containerInfo;\n         }\n \n-        logger.debug(\"No suitable existing container found for bean {0}\", bean.getEjbName());\n+        if (logger.isDebugEnabled()) {\n+            logger.debug(\"No suitable existing container found for bean {0}\", bean.getEjbName());\n+        }\n+\n         return null;\n     }\n \n@@ -2318,34 +2333,42 @@ private String matchContainer(final Class<? extends ContainerInfo> containerInfo\n                     final String messagingType = messageDrivenBean.getMessagingType();\n \n                     if (containerInfo.properties.get(\"MessageListenerInterface\").equals(messagingType)) {\n-                        logger.debug(\"Container {0} matches container type {1} and MessageListenerInterface {2} for bean {3}, this container will be used.\",\n-                                containerInfo.id,\n-                                containerInfoType.getName(),\n-                                messagingType,\n-                                bean.getEjbName());\n+                        if (logger.isDebugEnabled()) {\n+                            logger.debug(\"Container {0} matches container type {1} and MessageListenerInterface {2} for bean {3}, this container will be used.\",\n+                                    containerInfo.id,\n+                                    containerInfoType.getName(),\n+                                    messagingType,\n+                                    bean.getEjbName());\n+                        }\n \n                         return containerInfo.id;\n                     } else {\n-                        logger.debug(\"Container {0} of type {1} does not have the matching MessageListenerInterface. Bean listener interface is {2}, \" +\n-                                        \"container listener interface is {3} for bean {4}. Skipping.\",\n+                        if (logger.isDebugEnabled()) {\n+                            logger.debug(\"Container {0} of type {1} does not have the matching MessageListenerInterface. Bean listener interface is {2}, \" +\n+                                            \"container listener interface is {3} for bean {4}. Skipping.\",\n+                                    containerInfo.id,\n+                                    containerInfoType.getName(),\n+                                    messagingType,\n+                                    containerInfo.properties.get(\"MessageListenerInterface\"),\n+                                    bean.getEjbName());\n+                        }\n+\n+                    }\n+                } else {\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"Container {0} matches container type {1} for bean {2}, this container will be used.\",\n                                 containerInfo.id,\n                                 containerInfoType.getName(),\n-                                messagingType,\n-                                containerInfo.properties.get(\"MessageListenerInterface\"),\n                                 bean.getEjbName());\n-\n                     }\n-                } else {\n-                    logger.debug(\"Container {0} matches container type {1} for bean {2}, this container will be used.\",\n-                            containerInfo.id,\n-                            containerInfoType.getName(),\n-                            bean.getEjbName());\n \n                     return containerInfo.id;\n                 }\n             }\n \n-            logger.debug(\"Skipping container {0} of type {1}\", containerInfo.id, containerInfoType.getName());\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"Skipping container {0} of type {1}\", containerInfo.id, containerInfoType.getName());\n+            }\n         }\n \n         return null;",
                "raw_url": "https://github.com/apache/tomee/raw/5e75f652cf96e1d95e3a5504f27306f6d6fb85f2/container/openejb-core/src/main/java/org/apache/openejb/config/AutoConfig.java",
                "sha": "57a2e1a9f84dadf5c35b6d10218f441b9c144587",
                "status": "modified"
            }
        ],
        "message": "Check if debug logging is enabled, and avoid a NPE",
        "parent": "https://github.com/apache/tomee/commit/2e05749c199661ea9f512ae60e8422e3952a8f70",
        "repo": "tomee",
        "unit_tests": [
            "AutoConfigTest.java"
        ]
    },
    "tomee_68f2e4b": {
        "bug_id": "tomee_68f2e4b",
        "commit": "https://github.com/apache/tomee/commit/68f2e4b5ae4856f862ba828ac44d73e74c0d6601",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomee/blob/68f2e4b5ae4856f862ba828ac44d73e74c0d6601/container/openejb-core/src/main/java/org/apache/openejb/util/ContainerClassesFilter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/util/ContainerClassesFilter.java?ref=68f2e4b5ae4856f862ba828ac44d73e74c0d6601",
                "deletions": 2,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/util/ContainerClassesFilter.java",
                "patch": "@@ -34,8 +34,8 @@\n     private final Filter delegateSkip;\n \n     public ContainerClassesFilter(final Properties configuration) {\n-        final String forcedStr = configuration.getProperty(\"openejb.container.additional.exclude\", null);\n-        final String skippedStr = configuration.getProperty(\"openejb.container.additional.include\", null);\n+        final String forcedStr = configuration == null ? null : configuration.getProperty(\"openejb.container.additional.exclude\", null);\n+        final String skippedStr = configuration == null ? null : configuration.getProperty(\"openejb.container.additional.include\", null);\n         forced = forcedStr == null ? EMPTY_ARRAY : forcedStr.split(\" *, *\");\n         skipped = skippedStr == null ? EMPTY_ARRAY : skippedStr.split(\" *, *\");\n ",
                "raw_url": "https://github.com/apache/tomee/raw/68f2e4b5ae4856f862ba828ac44d73e74c0d6601/container/openejb-core/src/main/java/org/apache/openejb/util/ContainerClassesFilter.java",
                "sha": "a95a70085363423888b493cf28826f13773dc38a",
                "status": "modified"
            }
        ],
        "message": "avoiding NPE",
        "parent": "https://github.com/apache/tomee/commit/936430684fb314582e09a8a479510f90929280f8",
        "repo": "tomee",
        "unit_tests": [
            "ContainerClassesFilterTest.java"
        ]
    },
    "tomee_7377306": {
        "bug_id": "tomee_7377306",
        "commit": "https://github.com/apache/tomee/commit/737730616841192e39c2ea58374935b8a72ba513",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/tomee/blob/737730616841192e39c2ea58374935b8a72ba513/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=737730616841192e39c2ea58374935b8a72ba513",
                "deletions": 12,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "patch": "@@ -1476,20 +1476,22 @@ public EjbModule deploy(EjbModule ejbModule) throws OpenEJBException {\n                 addJaxRsProviders(finder, ejbModule.getAppModule().getJaxRsProviders(), Provider.class);\n             }\n \n-            for (PersistenceModule pm : ejbModule.getAppModule().getPersistenceModules()) {\n-                for (org.apache.openejb.jee.jpa.unit.PersistenceUnit pu : pm.getPersistence().getPersistenceUnit()) {\n-                    if ((pu.isExcludeUnlistedClasses() == null || !pu.isExcludeUnlistedClasses())\n-                            && \"true\".equalsIgnoreCase(pu.getProperties().getProperty(OPENEJB_JPA_AUTO_SCAN))) {\n-                        // no need of meta currently since JPA providers doesn't support it\n-                        final List<Class<?>> classes = finder.findAnnotatedClasses(Entity.class);\n-                        final List<String> existingClasses = pu.getClazz();\n-                        for (Class<?> clazz : classes) {\n-                            final String name = clazz.getName();\n-                            if (!existingClasses.contains(name)) {\n-                                pu.getClazz().add(name);\n+            if (ejbModule.getAppModule() != null) {\n+                for (PersistenceModule pm : ejbModule.getAppModule().getPersistenceModules()) {\n+                    for (org.apache.openejb.jee.jpa.unit.PersistenceUnit pu : pm.getPersistence().getPersistenceUnit()) {\n+                        if ((pu.isExcludeUnlistedClasses() == null || !pu.isExcludeUnlistedClasses())\n+                                && \"true\".equalsIgnoreCase(pu.getProperties().getProperty(OPENEJB_JPA_AUTO_SCAN))) {\n+                            // no need of meta currently since JPA providers doesn't support it\n+                            final List<Class<?>> classes = finder.findAnnotatedClasses(Entity.class);\n+                            final List<String> existingClasses = pu.getClazz();\n+                            for (Class<?> clazz : classes) {\n+                                final String name = clazz.getName();\n+                                if (!existingClasses.contains(name)) {\n+                                    pu.getClazz().add(name);\n+                                }\n                             }\n+                            pu.setScanned(true);\n                         }\n-                        pu.setScanned(true);\n                     }\n                 }\n             }",
                "raw_url": "https://github.com/apache/tomee/raw/737730616841192e39c2ea58374935b8a72ba513/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "sha": "0370a2264824f7769d3558d2c45867adf81be6c6",
                "status": "modified"
            }
        ],
        "message": "avoiding NPE (mainly coming from custom test classes)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1407969 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/059ba86bcb1f701e919208fdbcc50edff037c1f3",
        "repo": "tomee",
        "unit_tests": [
            "AnnotationDeployerTest.java"
        ]
    },
    "tomee_7ac4e38": {
        "bug_id": "tomee_7ac4e38",
        "commit": "https://github.com/apache/tomee/commit/7ac4e38cfb2c8d10fbaacac91a385635cd8119f6",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomee/blob/7ac4e38cfb2c8d10fbaacac91a385635cd8119f6/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java?ref=7ac4e38cfb2c8d10fbaacac91a385635cd8119f6",
                "deletions": 1,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java",
                "patch": "@@ -784,7 +784,7 @@ private void discardInstance(ThreadContext threadContext) {\n         }\n \n         Instance instance = checkedOutInstances.remove(primaryKey);\n-        if (!containsExtendedPersistenceContext(instance.beanContext)) {\n+        if (instance != null && !containsExtendedPersistenceContext(instance.beanContext)) {\n             cache.remove(primaryKey);\n         }\n ",
                "raw_url": "https://github.com/apache/tomee/raw/7ac4e38cfb2c8d10fbaacac91a385635cd8119f6/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java",
                "sha": "5fc40d09dc1e7bd287e58ba87bd9659d81f6825b",
                "status": "modified"
            }
        ],
        "message": "NPE check\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1341276 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/d2d1d54ef3c3c70fe6d39e3dd31c4edfceea28a7",
        "repo": "tomee",
        "unit_tests": [
            "StatefulContainerTest.java"
        ]
    },
    "tomee_7ce920b": {
        "bug_id": "tomee_7ce920b",
        "commit": "https://github.com/apache/tomee/commit/7ce920b20500e6a5f84e93423d88dc63fd77ba06",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/tomee/blob/7ce920b20500e6a5f84e93423d88dc63fd77ba06/container/openejb-jee/src/main/java/org/apache/openejb/jee/Beans.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-jee/src/main/java/org/apache/openejb/jee/Beans.java?ref=7ce920b20500e6a5f84e93423d88dc63fd77ba06",
                "deletions": 0,
                "filename": "container/openejb-jee/src/main/java/org/apache/openejb/jee/Beans.java",
                "patch": "@@ -202,14 +202,23 @@ private Alternatives getAlternatives() {\n     }\n \n     public List<String> getDuplicatedInterceptors() {\n+        if (duplicatedInterceptors == null) {\n+            duplicatedInterceptors = new ArrayList<String>();\n+        }\n         return duplicatedInterceptors;\n     }\n \n     public List<String> getDuplicatedDecorators() {\n+        if (duplicatedDecorators == null) {\n+            duplicatedDecorators = new ArrayList<String>();\n+        }\n         return duplicatedDecorators;\n     }\n \n     public Alternatives getDuplicatedAlternatives() {\n+        if (duplicatedAlternatives == null) {\n+            duplicatedAlternatives = new Alternatives();\n+        }\n         return duplicatedAlternatives;\n     }\n }",
                "raw_url": "https://github.com/apache/tomee/raw/7ce920b20500e6a5f84e93423d88dc63fd77ba06/container/openejb-jee/src/main/java/org/apache/openejb/jee/Beans.java",
                "sha": "feb20bd2ce9d7ddb4f8bf2cd5d04eea4e8ddca04",
                "status": "modified"
            }
        ],
        "message": "NPE (last commit check)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1359943 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/1e669fd738935b96bbdbf590afc1fe1a7df6de13",
        "repo": "tomee",
        "unit_tests": [
            "BeansTest.java"
        ]
    },
    "tomee_7da9d6f": {
        "bug_id": "tomee_7da9d6f",
        "commit": "https://github.com/apache/tomee/commit/7da9d6f0882d20c6e41b1481ae62560186c3d771",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/tomee/blob/7da9d6f0882d20c6e41b1481ae62560186c3d771/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/HttpRequestImpl.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/HttpRequestImpl.java?ref=7da9d6f0882d20c6e41b1481ae62560186c3d771",
                "deletions": 3,
                "filename": "server/openejb-http/src/main/java/org/apache/openejb/server/httpd/HttpRequestImpl.java",
                "patch": "@@ -405,10 +405,12 @@ public int getLocalPort() {\n      * @param input the data input for this page\n      * @throws java.io.IOException if an exception is thrown\n      */\n-    protected void readMessage(InputStream input) throws IOException {\n+    protected boolean readMessage(InputStream input) throws IOException {\n         final DataInput di = new DataInputStream(input);\n \n-        readRequestLine(di);\n+        if (!readRequestLine(di)) {\n+            return false;\n+        }\n         readHeaders(di);\n         readBody(di);\n \n@@ -431,6 +433,7 @@ protected void readMessage(InputStream input) throws IOException {\n                 }\n             }\n         }\n+        return true;\n     }\n \n     public void print(final Logger log, boolean formatXml) {\n@@ -460,7 +463,7 @@ public void print(final Logger log, boolean formatXml) {\n      * @param in the input to be read\n      * @throws java.io.IOException if an exception is thrown\n      */\n-    private void readRequestLine(DataInput in) throws IOException {\n+    private boolean readRequestLine(DataInput in) throws IOException {\n         String line;\n         try {\n             line = in.readLine();\n@@ -471,12 +474,16 @@ private void readRequestLine(DataInput in) throws IOException {\n                 + \" : \"\n                 + e.getMessage());\n         }\n+        if (line == null) {\n+            return false;\n+        }\n \n         StringTokenizer lineParts = new StringTokenizer(line, \" \");\n         /* [1] Parse the method */\n         parseMethod(lineParts);\n         /* [2] Parse the URI */\n         parseURI(lineParts);\n+        return true;\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/tomee/raw/7da9d6f0882d20c6e41b1481ae62560186c3d771/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/HttpRequestImpl.java",
                "sha": "4cd69ec8fa7ab8975fd6c112b7a7dd9f86786e5e",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomee/blob/7da9d6f0882d20c6e41b1481ae62560186c3d771/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/OpenEJBHttpServer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/OpenEJBHttpServer.java?ref=7da9d6f0882d20c6e41b1481ae62560186c3d771",
                "deletions": 1,
                "filename": "server/openejb-http/src/main/java/org/apache/openejb/server/httpd/OpenEJBHttpServer.java",
                "patch": "@@ -230,7 +230,9 @@ private HttpResponseImpl process(final Socket socket, final URI socketURI, final\n         final HttpResponseImpl res = new HttpResponseImpl();\n \n         try {\n-            req.readMessage(in);\n+            if (!req.readMessage(in)) {\n+                return res;\n+            }\n \n             if (print.size() > 0 && print.contains(Output.REQUEST)) {\n                 req.print(log, indent);",
                "raw_url": "https://github.com/apache/tomee/raw/7da9d6f0882d20c6e41b1481ae62560186c3d771/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/OpenEJBHttpServer.java",
                "sha": "33f358c1d53f3ed3db83883f69f64e54fad03347",
                "status": "modified"
            }
        ],
        "message": "avoid NPE is inputstream of a http request is empty",
        "parent": "https://github.com/apache/tomee/commit/a0c37da955c1f40652862fb8847d497838e47d66",
        "repo": "tomee",
        "unit_tests": [
            "HttpRequestImplTest.java"
        ]
    },
    "tomee_87120fa": {
        "bug_id": "tomee_87120fa",
        "commit": "https://github.com/apache/tomee/commit/87120faad06a30e4dc898bc2492d155bc811ea1d",
        "file": [
            {
                "additions": 66,
                "blob_url": "https://github.com/apache/tomee/blob/87120faad06a30e4dc898bc2492d155bc811ea1d/arquillian/arquillian-tomee-embedded/src/test/java/org/apache/openejb/arquillian/embedded/JAXRSWebXmlMappingTest.java",
                "changes": 66,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-embedded/src/test/java/org/apache/openejb/arquillian/embedded/JAXRSWebXmlMappingTest.java?ref=87120faad06a30e4dc898bc2492d155bc811ea1d",
                "deletions": 0,
                "filename": "arquillian/arquillian-tomee-embedded/src/test/java/org/apache/openejb/arquillian/embedded/JAXRSWebXmlMappingTest.java",
                "patch": "@@ -0,0 +1,66 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openejb.arquillian.embedded;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.EmptyAsset;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.jboss.shrinkwrap.descriptor.api.Descriptors;\n+import org.jboss.shrinkwrap.descriptor.api.webapp31.WebAppDescriptor;\n+import org.jboss.shrinkwrap.descriptor.api.webcommon31.WebAppVersionType;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.ws.rs.client.ClientBuilder;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(Arquillian.class)\n+public class JAXRSWebXmlMappingTest {\n+    @Deployment(testable = false)\n+    public static Archive<?> app() {\n+        return ShrinkWrap.create(WebArchive.class, JAXRSWebXmlMappingTest.class.getSimpleName() + \".war\")\n+            .addClass(ARestService.class)\n+            .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\")\n+            .setWebXML(new StringAsset(\n+                Descriptors.create(WebAppDescriptor.class)\n+                    .version(WebAppVersionType._3_1)\n+                    .getOrCreateServlet().servletName(\"javax.ws.rs.core.Application\")\n+                    .getOrCreateInitParam().paramName(\"javax.ws.rs.Application\").paramValue(SimpleApp.class.getName()).up()\n+                    .up()\n+                    .getOrCreateServletMapping().servletName(\"javax.ws.rs.core.Application\").urlPattern(\"/rs/*\").up()\n+                    .exportAsString()\n+            ));\n+    }\n+\n+    @ArquillianResource\n+    private URL base;\n+\n+    @Test\n+    public void noNpe() throws MalformedURLException { // TOMEE-1718\n+        assertEquals(\n+            \"foo\",\n+            ClientBuilder.newBuilder().build().target(new URL(base, \"rs/rest/foo\").toExternalForm()).request().get(String.class));\n+    }\n+}",
                "raw_url": "https://github.com/apache/tomee/raw/87120faad06a30e4dc898bc2492d155bc811ea1d/arquillian/arquillian-tomee-embedded/src/test/java/org/apache/openejb/arquillian/embedded/JAXRSWebXmlMappingTest.java",
                "sha": "ae4456c59b13d67058d360e96da60ef9aa49764c",
                "status": "added"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/tomee/blob/87120faad06a30e4dc898bc2492d155bc811ea1d/arquillian/arquillian-tomee-embedded/src/test/java/org/apache/openejb/arquillian/embedded/SimpleApp.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/arquillian/arquillian-tomee-embedded/src/test/java/org/apache/openejb/arquillian/embedded/SimpleApp.java?ref=87120faad06a30e4dc898bc2492d155bc811ea1d",
                "deletions": 0,
                "filename": "arquillian/arquillian-tomee-embedded/src/test/java/org/apache/openejb/arquillian/embedded/SimpleApp.java",
                "patch": "@@ -0,0 +1,22 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openejb.arquillian.embedded;\n+\n+import javax.ws.rs.core.Application;\n+\n+public class SimpleApp extends Application {\n+}",
                "raw_url": "https://github.com/apache/tomee/raw/87120faad06a30e4dc898bc2492d155bc811ea1d/arquillian/arquillian-tomee-embedded/src/test/java/org/apache/openejb/arquillian/embedded/SimpleApp.java",
                "sha": "72a560efcedd619e999b512ae84dad3111d07637",
                "status": "added"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/tomee/blob/87120faad06a30e4dc898bc2492d155bc811ea1d/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=87120faad06a30e4dc898bc2492d155bc811ea1d",
                "deletions": 6,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "patch": "@@ -2211,12 +2211,23 @@ public WebModule deploy(final WebModule webModule) throws OpenEJBException {\n              */\n             for (final Servlet servlet : webApp.getServlet()) {\n                 final String servletName = servlet.getServletName();\n-                if (\"javax.ws.rs.core.Application\".equals(servletName)) {\n-                    servlet.setServletName(ProvidedJAXRSApplication.class.getName());\n-                    webModule.getRestApplications().add(ProvidedJAXRSApplication.class.getName());\n-                    for (final ServletMapping mapping : webApp.getServletMapping()) {\n-                        if (servletName.equals(mapping.getServletName())) {\n-                            mapping.setServletName(ProvidedJAXRSApplication.class.getName());\n+                if (\"javax.ws.rs.core.Application\".equals(servletName) || \"javax.ws.rs.Application\".equals(servletName)) {\n+                    // check first if there is a real application as init param\n+                    boolean done = false;\n+                    for (final ParamValue pv : servlet.getInitParam()) {\n+                        if (\"javax.ws.rs.core.Application\".equals(pv.getParamName()) || \"javax.ws.rs.Application\".equals(pv.getParamName())) {\n+                            webModule.getRestApplications().add(pv.getParamValue());\n+                            done = true;\n+                            break;\n+                        }\n+                    }\n+                    if (!done) {\n+                        servlet.setServletName(ProvidedJAXRSApplication.class.getName());\n+                        webModule.getRestApplications().add(ProvidedJAXRSApplication.class.getName());\n+                        for (final ServletMapping mapping : webApp.getServletMapping()) {\n+                            if (servletName.equals(mapping.getServletName())) {\n+                                mapping.setServletName(ProvidedJAXRSApplication.class.getName());\n+                            }\n                         }\n                     }\n                     continue;",
                "raw_url": "https://github.com/apache/tomee/raw/87120faad06a30e4dc898bc2492d155bc811ea1d/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "sha": "2d4569abef7db9261ebb63c214b25b34660989be",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomee/blob/87120faad06a30e4dc898bc2492d155bc811ea1d/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/OpenEJBContextConfig.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/OpenEJBContextConfig.java?ref=87120faad06a30e4dc898bc2492d155bc811ea1d",
                "deletions": 1,
                "filename": "tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/OpenEJBContextConfig.java",
                "patch": "@@ -201,7 +201,9 @@ private void cleanUpRestServlets() {\n                 try { // remove only \"fake\" servlets to let users use their own stuff\n                     if (child != null) {\n                         final String servletClass = StandardWrapper.class.cast(child).getServletClass();\n-                        if (\"org.apache.openejb.server.rest.OpenEJBRestServlet\".equals(servletClass) || !HttpServlet.class.isAssignableFrom(info.loader().loadClass(servletClass))) {\n+                        if (servletClass == null\n+                            || \"org.apache.openejb.server.rest.OpenEJBRestServlet\".equals(servletClass)\n+                            || !HttpServlet.class.isAssignableFrom(info.loader().loadClass(servletClass))) {\n                             context.removeChild(child);\n                         }\n                     }",
                "raw_url": "https://github.com/apache/tomee/raw/87120faad06a30e4dc898bc2492d155bc811ea1d/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/OpenEJBContextConfig.java",
                "sha": "910bffad8545533d6d47a036f50caa77e960470e",
                "status": "modified"
            }
        ],
        "message": "TOMEE-1718 avoid NPE when jaxrs application if configured without a servlet class",
        "parent": "https://github.com/apache/tomee/commit/3bf5aa10582c015f61954030273367f4b8ea69ec",
        "repo": "tomee",
        "unit_tests": [
            "AnnotationDeployerTest.java"
        ]
    },
    "tomee_87f3b42": {
        "bug_id": "tomee_87f3b42",
        "commit": "https://github.com/apache/tomee/commit/87f3b425e6fb08844ec417441026a168b1b4f132",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/tomee/blob/87f3b425e6fb08844ec417441026a168b1b4f132/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java?ref=87f3b425e6fb08844ec417441026a168b1b4f132",
                "deletions": 5,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "patch": "@@ -101,6 +101,11 @@ public ConfigurationFactory() {\n         this(false);\n     }\n \n+    public ConfigurationFactory(boolean offline, OpenEjbConfiguration configuration) {\n+        this(offline);\n+        sys = configuration;\n+    }\n+\n     public static class Chain implements DynamicDeployer{\n         private final List<DynamicDeployer> chain = new ArrayList<DynamicDeployer>();\n \n@@ -670,9 +675,11 @@ private Properties getSystemProperties(String serviceId) {\n         List<String> resourceIds = new ArrayList<String>();\n \n         OpenEjbConfiguration runningConfig = getRunningConfig();\n-        for (ResourceInfo resourceInfo : runningConfig.facilities.resources) {\n-            if (isResourceType(resourceInfo.service, resourceInfo.types, type)) {\n-                resourceIds.add(resourceInfo.id);\n+        if (runningConfig != null) {\n+            for (ResourceInfo resourceInfo : runningConfig.facilities.resources) {\n+                if (isResourceType(resourceInfo.service, resourceInfo.types, type)) {\n+                    resourceIds.add(resourceInfo.id);\n+                }\n             }\n         }\n \n@@ -744,8 +751,10 @@ private boolean isResourceType(String service, List<String> types, String type)\n         List<ContainerInfo> containers = new ArrayList<ContainerInfo>();\n \n         OpenEjbConfiguration runningConfig = getRunningConfig();\n-        for (ContainerInfo containerInfo : runningConfig.containerSystem.containers) {\n-            containers.add(containerInfo);\n+        if (runningConfig != null) {\n+            for (ContainerInfo containerInfo : runningConfig.containerSystem.containers) {\n+                containers.add(containerInfo);\n+            }\n         }\n \n         if (sys != null) {",
                "raw_url": "https://github.com/apache/tomee/raw/87f3b425e6fb08844ec417441026a168b1b4f132/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "sha": "6cdddc4ea3380efc6f0fa013dc82d01f9955864f",
                "status": "modified"
            }
        ],
        "message": "GERONIMO-3481, there may be no running OpenEjbConfiguration so avoid NPEs, and allow construction of ConfigurationFactory with a known sys configuration.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@579046 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/34d061133e6c45e3542b97ce42ec5357acdfbeeb",
        "repo": "tomee",
        "unit_tests": [
            "ConfigurationFactoryTest.java"
        ]
    },
    "tomee_8ea00eb": {
        "bug_id": "tomee_8ea00eb",
        "commit": "https://github.com/apache/tomee/commit/8ea00ebd46f30209bb3195aa85ae3aacf5a60074",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomee/blob/8ea00ebd46f30209bb3195aa85ae3aacf5a60074/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiAppContextsService.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiAppContextsService.java?ref=8ea00ebd46f30209bb3195aa85ae3aacf5a60074",
                "deletions": 1,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiAppContextsService.java",
                "patch": "@@ -446,7 +446,7 @@ private void initSessionContext(final HttpSession session) {\n \n         final String sessionId = session.getId();\n         //Current context\n-        SessionContext currentSessionContext = sessionCtxManager.getSessionContextWithSessionId(sessionId);\n+        SessionContext currentSessionContext = sessionId == null ? null : sessionCtxManager.getSessionContextWithSessionId(sessionId);\n \n         //No current context\n         boolean fire = false;",
                "raw_url": "https://github.com/apache/tomee/raw/8ea00ebd46f30209bb3195aa85ae3aacf5a60074/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiAppContextsService.java",
                "sha": "5e48183297ab19690670669ce12a6696bd110099",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomee/blob/8ea00ebd46f30209bb3195aa85ae3aacf5a60074/tck/cdi-embedded/src/test/resources/failing.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tck/cdi-embedded/src/test/resources/failing.xml?ref=8ea00ebd46f30209bb3195aa85ae3aacf5a60074",
                "deletions": 1,
                "filename": "tck/cdi-embedded/src/test/resources/failing.xml",
                "patch": "@@ -26,7 +26,7 @@\n     -Dopenejb.deploymentId.format={appId}/{ejbJarId}/{ejbName}\n     -->\n     <classes>\n-      <class name=\"org.jboss.cdi.tck.tests.context.conversation.filter.ConversationFilterTest\" />\n+      <class name=\"org.jboss.cdi.tck.tests.context.conversation.LongRunningConversationPropagatedByFacesContextTest\" />\n     </classes>\n   </test>\n </suite>",
                "raw_url": "https://github.com/apache/tomee/raw/8ea00ebd46f30209bb3195aa85ae3aacf5a60074/tck/cdi-embedded/src/test/resources/failing.xml",
                "sha": "bad9ab44caa41e2d07858d104dcf9491d5aa9ae7",
                "status": "modified"
            }
        ],
        "message": "avoid NPE",
        "parent": "https://github.com/apache/tomee/commit/f112bdd7b74297d61175dc640c1f8119663a49b2",
        "repo": "tomee",
        "unit_tests": [
            "CdiAppContextsServiceTest.java"
        ]
    },
    "tomee_97377f6": {
        "bug_id": "tomee_97377f6",
        "commit": "https://github.com/apache/tomee/commit/97377f61b9e86e00aec6cdc1ab0673e52e0c5f91",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/tomee/blob/97377f61b9e86e00aec6cdc1ab0673e52e0c5f91/container/openejb-core/src/main/java/org/apache/openejb/cdi/WebappBeanManager.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/WebappBeanManager.java?ref=97377f61b9e86e00aec6cdc1ab0673e52e0c5f91",
                "deletions": 3,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/WebappBeanManager.java",
                "patch": "@@ -27,6 +27,7 @@\n import javax.enterprise.context.spi.Context;\n import javax.enterprise.context.spi.Contextual;\n import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.inject.UnsatisfiedResolutionException;\n import javax.enterprise.inject.spi.AnnotatedType;\n import javax.enterprise.inject.spi.Bean;\n import javax.enterprise.inject.spi.Decorator;\n@@ -152,7 +153,7 @@ public Object getInjectableReference(InjectionPoint injectionPoint, CreationalCo\n     @Override\n     public void fireEvent(Object event, Annotation... qualifiers) {\n         super.fireEvent(event, qualifiers);\n-        getParentBm().fireEvent(event, qualifiers);\n+        // getParentBm().fireEvent(event, qualifiers); // send twice the same event for webapps with extension in lib part\n     }\n \n     @Override\n@@ -204,8 +205,15 @@ public void fireEvent(Object event, Annotation... qualifiers) {\n \n     @Override\n     public void validate(InjectionPoint injectionPoint) {\n-        super.validate(injectionPoint);\n-        // getParentBm().validate(injectionPoint); // prevent injections from webapp only\n+        try {\n+            super.validate(injectionPoint);\n+        } catch (UnsatisfiedResolutionException ure) {\n+            try {\n+                getParentBm().validate(injectionPoint); // prevent injections from webapp only if called directly\n+            } catch (UnsatisfiedResolutionException ure2) {\n+                throw ure;\n+            }\n+        }\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/tomee/raw/97377f61b9e86e00aec6cdc1ab0673e52e0c5f91/container/openejb-core/src/main/java/org/apache/openejb/cdi/WebappBeanManager.java",
                "sha": "903bb23f45e8dabbe16a8c1873f9686cf1873d03",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tomee/blob/97377f61b9e86e00aec6cdc1ab0673e52e0c5f91/container/openejb-core/src/main/java/org/apache/openejb/core/managed/ManagedContainer.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/core/managed/ManagedContainer.java?ref=97377f61b9e86e00aec6cdc1ab0673e52e0c5f91",
                "deletions": 6,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/core/managed/ManagedContainer.java",
                "patch": "@@ -251,12 +251,14 @@ public void stop(final BeanContext beanContext) throws OpenEJBException {\n     public synchronized void undeploy(final BeanContext bean) throws OpenEJBException {\n         final Data data = (Data) bean.getContainerData();\n \n-        final MBeanServer server = LocalMBeanServer.get();\n-        for (final ObjectName objectName : data.jmxNames) {\n-            try {\n-                server.unregisterMBean(objectName);\n-            } catch (Exception e) {\n-                logger.error(\"Unable to unregister MBean \" + objectName);\n+        if (data != null) {\n+            final MBeanServer server = LocalMBeanServer.get();\n+            for (final ObjectName objectName : data.jmxNames) {\n+                try {\n+                    server.unregisterMBean(objectName);\n+                } catch (Exception e) {\n+                    logger.error(\"Unable to unregister MBean \" + objectName);\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/tomee/raw/97377f61b9e86e00aec6cdc1ab0673e52e0c5f91/container/openejb-core/src/main/java/org/apache/openejb/core/managed/ManagedContainer.java",
                "sha": "f1f469b6077305eda3079102e254a773a53c12c1",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/tomee/blob/97377f61b9e86e00aec6cdc1ab0673e52e0c5f91/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatWebAppBuilder.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatWebAppBuilder.java?ref=97377f61b9e86e00aec6cdc1ab0673e52e0c5f91",
                "deletions": 5,
                "filename": "tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatWebAppBuilder.java",
                "patch": "@@ -713,7 +713,9 @@ public void init(final StandardContext standardContext) {\n         if (isIgnored(standardContext)) return;\n \n         // just adding a carriage return to get logs more readable\n-        logger.info(\"------------------------- \" + finalName(standardContext.getPath()));\n+        logger.info(\"------------------------- \"\n+                + standardContext.getHostname().replace(\"_\", defaultHost) + \" -> \"\n+                + finalName(standardContext.getPath()));\n \n         if (FORCE_RELOADABLE) {\n             standardContext.setReloadable(true);\n@@ -1149,15 +1151,19 @@ private void startInternal(final StandardContext standardContext) {\n             for (final WebAppInfo w : contextInfo.appInfo.webApps) {\n                 final String wId = getId(w.host, w.contextRoot);\n                 if (id.equals(wId)) {\n-                    webAppInfo = w;\n-\n-                    if (appContext == null) {\n-                        appContext = cs.getAppContext(contextInfo.appInfo.appId);\n+                    if (webAppInfo == null) {\n+                        webAppInfo = w;\n+                    } else if (w.host != null && w.host.equals(standardContext.getHostname())) {\n+                        webAppInfo = w;\n                     }\n \n                     break;\n                 }\n             }\n+\n+            if (appContext == null) {\n+                appContext = cs.getAppContext(contextInfo.appInfo.appId);\n+            }\n         }\n \n         if (webAppInfo != null) {",
                "raw_url": "https://github.com/apache/tomee/raw/97377f61b9e86e00aec6cdc1ab0673e52e0c5f91/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatWebAppBuilder.java",
                "sha": "6128100e1e3ed429146376f14ac5bab7c14ace48",
                "status": "modified"
            }
        ],
        "message": "logging host when deploying an app (and not only the context) + sending only once cdi events in ear + avoiding NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1435256 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/4235edadcb85a695da032be562057086305c94b1",
        "repo": "tomee",
        "unit_tests": [
            "WebappBeanManagerTest.java"
        ]
    },
    "tomee_9ec751c": {
        "bug_id": "tomee_9ec751c",
        "commit": "https://github.com/apache/tomee/commit/9ec751cbb443e4a3e34961aa6c0e7e584e47306e",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomee/blob/9ec751cbb443e4a3e34961aa6c0e7e584e47306e/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/HttpRequestImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/HttpRequestImpl.java?ref=9ec751cbb443e4a3e34961aa6c0e7e584e47306e",
                "deletions": 1,
                "filename": "server/openejb-http/src/main/java/org/apache/openejb/server/httpd/HttpRequestImpl.java",
                "patch": "@@ -233,7 +233,10 @@ public String getRemoteUser() {\n \n     @Override\n     public String getRequestedSessionId() {\n-        return session.getId();\n+        if (session != null) {\n+            return session.getId();\n+        }\n+        return null;\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/tomee/raw/9ec751cbb443e4a3e34961aa6c0e7e584e47306e/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/HttpRequestImpl.java",
                "sha": "03a7b2914ae99520221fd60e4f907efe4f8af5c6",
                "status": "modified"
            }
        ],
        "message": "avoiding NPE and fixing implementation of request#getRequestedSessionId\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1429688 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/cacfcaf967b9152ce34b3a9c1386f3a17994fee0",
        "repo": "tomee",
        "unit_tests": [
            "HttpRequestImplTest.java"
        ]
    },
    "tomee_9fa6292": {
        "bug_id": "tomee_9fa6292",
        "commit": "https://github.com/apache/tomee/commit/9fa629268e8517a05f14c71d29ac89c7764c46c2",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomee/blob/9fa629268e8517a05f14c71d29ac89c7764c46c2/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java?ref=9fa629268e8517a05f14c71d29ac89c7764c46c2",
                "deletions": 0,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "patch": "@@ -547,6 +547,9 @@ public AppInfo configureApplication(File jarFile) throws OpenEJBException {\n      * @throws OpenEJBException on error\n      */\n     public AppInfo configureApplication(ClassLoader classLoader, String id, List<File> jarFiles) throws OpenEJBException {\n+        if (id == null) {\n+            id = \"\";\n+        }\n         Application application = new Application();\n         application.setApplicationName(id);\n         AppModule collection = new AppModule(classLoader, id, application, false);",
                "raw_url": "https://github.com/apache/tomee/raw/9fa629268e8517a05f14c71d29ac89c7764c46c2/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "sha": "e6ba1c33fb24cb4e6c2158b32cf9992c63a478fe",
                "status": "modified"
            }
        ],
        "message": "pass an empty application id to prevent NPEs and to ensure proper global jndi names are used\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@988313 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/a48715af16dcd4b03c5b0a5fcc72e001819a6dee",
        "repo": "tomee",
        "unit_tests": [
            "ConfigurationFactoryTest.java"
        ]
    },
    "tomee_a0a903f": {
        "bug_id": "tomee_a0a903f",
        "commit": "https://github.com/apache/tomee/commit/a0a903f10aeb6fdbd3b56dff05abde1325db9165",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomee/blob/a0a903f10aeb6fdbd3b56dff05abde1325db9165/container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java?ref=a0a903f10aeb6fdbd3b56dff05abde1325db9165",
                "deletions": 5,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java",
                "patch": "@@ -79,11 +79,7 @@ public AppModule deploy(AppModule appModule) throws OpenEJBException {\n             logger.info(\"Set the '\"+VALIDATION_LEVEL+\"' system property to \"+ join(\" or \", levels) +\" for increased validation details.\");\n         }\n \n-        validationFailedException = new ValidationFailedException(\"Module failed validation. \" + uberContext.getModuleType() + \"(name=\" + uberContext.getName() + \")\", uberContext, validationFailedException);\n-\n-        if (validationFailedException != null) throw validationFailedException;\n-\n-        return appModule;\n+        throw  new ValidationFailedException(\"Module failed validation. \" + uberContext.getModuleType() + \"(name=\" + uberContext.getName() + \")\", uberContext, validationFailedException);\n     }\n \n     private void logResults(ValidationContext context, Level level) {",
                "raw_url": "https://github.com/apache/tomee/raw/a0a903f10aeb6fdbd3b56dff05abde1325db9165/container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java",
                "sha": "fb0201cf2e440d6d4e1c24deee24b0fef408674f",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/tomee/blob/a0a903f10aeb6fdbd3b56dff05abde1325db9165/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckCdiEnabled.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckCdiEnabled.java?ref=a0a903f10aeb6fdbd3b56dff05abde1325db9165",
                "deletions": 2,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckCdiEnabled.java",
                "patch": "@@ -17,15 +17,24 @@\n package org.apache.openejb.config.rules;\n \n import org.apache.openejb.config.EjbModule;\n+import org.apache.xbean.finder.IAnnotationFinder;\n \n import javax.inject.Inject;\n \n public class CheckCdiEnabled extends ValidationBase {\n     public void validate(EjbModule ejbModule) {\n+        if (ejbModule.getFinder() == null) {\n+            return;\n+        }\n+\n         if (ejbModule.getBeans() == null\n-                && (!ejbModule.getFinder().findAnnotatedMethods(Inject.class).isEmpty()\n-                || !ejbModule.getFinder().findAnnotatedFields(Inject.class).isEmpty())) {\n+                && hasAtInject(ejbModule.getFinder())) {\n             warn(ejbModule.getModuleId(), \"cdi.notEnabled\", ejbModule.getModuleId());\n         }\n     }\n+\n+    private static boolean hasAtInject(final IAnnotationFinder finder) {\n+        return !finder.findAnnotatedMethods(Inject.class).isEmpty()\n+                || !finder.findAnnotatedFields(Inject.class).isEmpty();\n+    }\n }",
                "raw_url": "https://github.com/apache/tomee/raw/a0a903f10aeb6fdbd3b56dff05abde1325db9165/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckCdiEnabled.java",
                "sha": "3b56543648f34c8d5d36b07f3692553b399a3b51",
                "status": "modified"
            }
        ],
        "message": "avoiding NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1425860 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/e6dae643cb8f6dd52ca56f20efbb8fd043f0e721",
        "repo": "tomee",
        "unit_tests": [
            "CheckCdiEnabledTest.java"
        ]
    },
    "tomee_a46b829": {
        "bug_id": "tomee_a46b829",
        "commit": "https://github.com/apache/tomee/commit/a46b8296de0a856a328ab1535150885dc6050fb6",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomee/blob/a46b8296de0a856a328ab1535150885dc6050fb6/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/ValidatorBuilder.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/ValidatorBuilder.java?ref=a46b8296de0a856a328ab1535150885dc6050fb6",
                "deletions": 0,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/ValidatorBuilder.java",
                "patch": "@@ -81,6 +81,9 @@ public static ValidatorFactory buildFactory(ValidationInfo config, ClassLoader c\n                 factory = Validation.buildDefaultValidatorFactory();\n             } else {\n                 Configuration<?> configuration = getConfig(config);\n+                if (configuration == null) {\n+                    configuration = getConfig(config);\n+                }\n                 try {\n                     factory = configuration.buildValidatorFactory();\n                 } catch (ValidationException ve) {",
                "raw_url": "https://github.com/apache/tomee/raw/a46b8296de0a856a328ab1535150885dc6050fb6/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/ValidatorBuilder.java",
                "sha": "e249e0b46712d70c0a4fbe6e6ad978b680405bae",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/tomee/blob/a46b8296de0a856a328ab1535150885dc6050fb6/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java?ref=a46b8296de0a856a328ab1535150885dc6050fb6",
                "deletions": 0,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "patch": "@@ -84,6 +84,7 @@\n import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n import java.util.jar.Manifest;\n+import java.util.zip.ZipEntry;\n \n import static org.apache.openejb.config.NewLoaderLogic.applyBuiltinExcludes;\n import static org.apache.openejb.config.TldScanner.scanForTagLibs;\n@@ -1538,6 +1539,19 @@ public boolean accept(final String annotationName) {\n \n             if (classFinder.find(filter)) {\n                 cls = EjbModule.class;\n+                // if it is a war just throw an error\n+                try {\n+                    final File ar = URLs.toFile(urls);\n+                    if (!ar.isDirectory() && !ar.getName().endsWith(\"ar\")) { // guess no archive extension, check it is not a hidden war\n+                        final JarFile war = new JarFile(ar);\n+                        final ZipEntry entry = war.getEntry(\"WEB-INF/\");\n+                        if (entry != null) {\n+                            logger.warning(\"you deployed \" + urls.toExternalForm() + \", it seems it is a war with no extension, please rename it\");\n+                        }\n+                    }\n+                } catch (Exception ignored) {\n+                    // no-op\n+                }\n             }\n \n             if (otherTypes.size() > 0) {",
                "raw_url": "https://github.com/apache/tomee/raw/a46b8296de0a856a328ab1535150885dc6050fb6/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "sha": "74363546a66edd30ec357af0db60dd376cb554b2",
                "status": "modified"
            }
        ],
        "message": "trying to avoid NPE (appears on builbot) + logging a warning if a a war is deployed without extension\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1373184 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/ecce944814fd2dc166bb4ed58d1b1ad9c3ba82da",
        "repo": "tomee",
        "unit_tests": [
            "DeploymentLoaderTest.java"
        ]
    },
    "tomee_af5b154": {
        "bug_id": "tomee_af5b154",
        "commit": "https://github.com/apache/tomee/commit/af5b154c64f22ddcdd17c9a64434e630a9db6363",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomee/blob/af5b154c64f22ddcdd17c9a64434e630a9db6363/container/openejb-core/src/main/java/org/apache/openejb/core/security/AbstractSecurityService.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/core/security/AbstractSecurityService.java?ref=af5b154c64f22ddcdd17c9a64434e630a9db6363",
                "deletions": 0,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/core/security/AbstractSecurityService.java",
                "patch": "@@ -267,6 +267,10 @@ public boolean isCallerInRole(final String role) {\n     @Override\n     public Principal getCallerPrincipal() {\n         final ThreadContext threadContext = ThreadContext.getThreadContext();\n+        if (threadContext == null) {\n+            return null;\n+        }\n+\n         final SecurityContext securityContext = threadContext.get(SecurityContext.class);\n         final Set<Principal> principals = securityContext.subject.getPrincipals();\n ",
                "raw_url": "https://github.com/apache/tomee/raw/af5b154c64f22ddcdd17c9a64434e630a9db6363/container/openejb-core/src/main/java/org/apache/openejb/core/security/AbstractSecurityService.java",
                "sha": "2969a92d6eb1380f941c842afa7c7b2d4205e349",
                "status": "modified"
            }
        ],
        "message": "avoid NPE",
        "parent": "https://github.com/apache/tomee/commit/3222d017ebf3034f0a8f68501f94c26a5a9e35ea",
        "repo": "tomee",
        "unit_tests": [
            "AbstractSecurityServiceTest.java"
        ]
    },
    "tomee_b0927be": {
        "bug_id": "tomee_b0927be",
        "commit": "https://github.com/apache/tomee/commit/b0927beff068b4529a5a7818879bf8afc2d369d3",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomee/blob/b0927beff068b4529a5a7818879bf8afc2d369d3/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=b0927beff068b4529a5a7818879bf8afc2d369d3",
                "deletions": 1,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "patch": "@@ -1380,7 +1380,7 @@ private void buildResource(JndiConsumer consumer, Resource resource, Member memb\n             JndiReference reference = consumer.getEnvEntryMap().get(refName);\n             if (reference == null) {\n \n-                { // Little quick validation for common mistake\n+                if (member != null) { // Little quick validation for common mistake\n                     Class type = member.getType();\n                     boolean shouldReturn = false;\n                     if (EntityManager.class.isAssignableFrom(type)){",
                "raw_url": "https://github.com/apache/tomee/raw/b0927beff068b4529a5a7818879bf8afc2d369d3/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "sha": "e3221e4d45ae6d0b468e9f15eb52ae8cf16aa5ea",
                "status": "modified"
            }
        ],
        "message": "OPENEJB-735 NPE in AnnotationDeployer if null member is passed into buildResource()\n\nContributed by: Joe Bohn\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@604145 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/478963cef9ff999670254e17130bb2cfab842f85",
        "repo": "tomee",
        "unit_tests": [
            "AnnotationDeployerTest.java"
        ]
    },
    "tomee_b9f18c0": {
        "bug_id": "tomee_b9f18c0",
        "commit": "https://github.com/apache/tomee/commit/b9f18c089f626426993b3f878c6dee88f88fb868",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomee/blob/b9f18c089f626426993b3f878c6dee88f88fb868/container/openejb-core/src/main/java/org/apache/openejb/persistence/PersistenceUnitInfoImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/persistence/PersistenceUnitInfoImpl.java?ref=b9f18c089f626426993b3f878c6dee88f88fb868",
                "deletions": 0,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/persistence/PersistenceUnitInfoImpl.java",
                "patch": "@@ -327,6 +327,10 @@ public PersistenceClassFileTransformer(ClassTransformer classTransformer) {\n     // not the shouldSkip() method from UrlClassLoaderFirst since we skip more here\n     // we just need JPA stuff so all the tricks we have for the server part are useless\n     public static boolean isServerClass(final String name) {\n+        if (name == null) {\n+            return false;\n+        }\n+\n         for (String prefix : URLClassLoaderFirst.FORCED_SKIP) {\n             if (name.startsWith(prefix)) {\n                 return true;\n@@ -369,6 +373,7 @@ public static boolean isServerClass(final String name) {\n                 if (apache.startsWith(\"juli.\")) return true;\n                 if (apache.startsWith(\"webbeans.\")) return true;\n                 if (apache.startsWith(\"cxf.\")) return true;\n+                if (apache.startsWith(\"activemq.\")) return true;\n \n                 if (apache.startsWith(\"commons.\")) {\n                     final String commons = apache.substring(\"commons.\".length());",
                "raw_url": "https://github.com/apache/tomee/raw/b9f18c089f626426993b3f878c6dee88f88fb868/container/openejb-core/src/main/java/org/apache/openejb/persistence/PersistenceUnitInfoImpl.java",
                "sha": "66405c519994f784c80b9b3a53c1b991186e605a",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomee/blob/b9f18c089f626426993b3f878c6dee88f88fb868/container/openejb-core/src/main/java/org/apache/openejb/util/classloader/URLClassLoaderFirst.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/util/classloader/URLClassLoaderFirst.java?ref=b9f18c089f626426993b3f878c6dee88f88fb868",
                "deletions": 0,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/util/classloader/URLClassLoaderFirst.java",
                "patch": "@@ -169,6 +169,10 @@ public static boolean canBeLoadedFromSystem(final String name) {\n     // /!\\ please check org.apache.openejb.persistence.PersistenceUnitInfoImpl.isServerClass() too\n     // when updating this method\n     public static boolean shouldSkip(final String name) {\n+        if (name == null) { // can happen with rest servlet definition or errors\n+            return false;\n+        }\n+\n         for (String prefix : FORCED_SKIP) {\n             if (name.startsWith(prefix)) {\n                 return true;",
                "raw_url": "https://github.com/apache/tomee/raw/b9f18c089f626426993b3f878c6dee88f88fb868/container/openejb-core/src/main/java/org/apache/openejb/util/classloader/URLClassLoaderFirst.java",
                "sha": "72b8b447adc30799e19e46edecf098f2762ff9ad",
                "status": "modified"
            },
            {
                "additions": 82,
                "blob_url": "https://github.com/apache/tomee/blob/b9f18c089f626426993b3f878c6dee88f88fb868/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSRoutingTest.java",
                "changes": 82,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSRoutingTest.java?ref=b9f18c089f626426993b3f878c6dee88f88fb868",
                "deletions": 0,
                "filename": "server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSRoutingTest.java",
                "patch": "@@ -0,0 +1,82 @@\n+/*\n+ *     Licensed to the Apache Software Foundation (ASF) under one or more\n+ *     contributor license agreements.  See the NOTICE file distributed with\n+ *     this work for additional information regarding copyright ownership.\n+ *     The ASF licenses this file to You under the Apache License, Version 2.0\n+ *     (the \"License\"); you may not use this file except in compliance with\n+ *     the License.  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *     Unless required by applicable law or agreed to in writing, software\n+ *     distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *     See the License for the specific language governing permissions and\n+ *     limitations under the License.\n+ */\n+package org.apache.openejb.server.cxf.rs;\n+\n+import org.apache.cxf.jaxrs.client.ServerWebApplicationException;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.openejb.jee.WebApp;\n+import org.apache.openejb.junit.ApplicationComposer;\n+import org.apache.openejb.junit.Classes;\n+import org.apache.openejb.junit.EnableServices;\n+import org.apache.openejb.junit.Module;\n+import org.apache.openejb.server.cxf.rs.beans.*;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Application;\n+import javax.ws.rs.core.Response;\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@EnableServices(\"jax-rs\")\n+@RunWith(ApplicationComposer.class)\n+public class JAXRSRoutingTest {\n+    public static final String BASE_URL = \"http://localhost:4204/foo/\";\n+\n+    @Module\n+    @Classes({ RestWithInjections.class, SimpleEJB.class, MyExpertRestClass.class, MyFirstRestClass.class })\n+    public WebApp war() {\n+        return new WebApp()\n+                .contextRoot(\"foo\")\n+                .addServlet(\"REST Application\", Application.class.getName())\n+                .addInitParam(\"REST Application\", \"javax.ws.rs.Application\", NoClassAtPathApplication.class.getName());\n+    }\n+\n+    @Test\n+    public void routing() {\n+        assertEquals(\"routing\", WebClient.create(BASE_URL).path(\"routing\").get(String.class));\n+    }\n+\n+    public static class NoClassAtPathApplication extends Application {\n+        private final Set<Class<?>> classes = new HashSet<Class<?>>();\n+\n+        public NoClassAtPathApplication() {\n+            classes.add(FirstService.class);\n+        }\n+\n+        @Override\n+        public Set<Class<?>> getClasses() {\n+            return classes;\n+        }\n+    }\n+\n+    public static class FirstService {\n+        @Path(\"routing\")\n+        @GET\n+        public String routing() {\n+            return \"routing\";\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/tomee/raw/b9f18c089f626426993b3f878c6dee88f88fb868/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSRoutingTest.java",
                "sha": "5e6db17a351001046aa1b4c422a086f5b16b0452",
                "status": "added"
            },
            {
                "additions": 83,
                "blob_url": "https://github.com/apache/tomee/blob/b9f18c089f626426993b3f878c6dee88f88fb868/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSWithInterfaceTest.java",
                "changes": 83,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSWithInterfaceTest.java?ref=b9f18c089f626426993b3f878c6dee88f88fb868",
                "deletions": 0,
                "filename": "server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSWithInterfaceTest.java",
                "patch": "@@ -0,0 +1,83 @@\n+/*\n+ *     Licensed to the Apache Software Foundation (ASF) under one or more\n+ *     contributor license agreements.  See the NOTICE file distributed with\n+ *     this work for additional information regarding copyright ownership.\n+ *     The ASF licenses this file to You under the Apache License, Version 2.0\n+ *     (the \"License\"); you may not use this file except in compliance with\n+ *     the License.  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *     Unless required by applicable law or agreed to in writing, software\n+ *     distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *     See the License for the specific language governing permissions and\n+ *     limitations under the License.\n+ */\n+package org.apache.openejb.server.cxf.rs;\n+\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.openejb.jee.WebApp;\n+import org.apache.openejb.junit.ApplicationComposer;\n+import org.apache.openejb.junit.Classes;\n+import org.apache.openejb.junit.EnableServices;\n+import org.apache.openejb.junit.Module;\n+import org.apache.openejb.server.cxf.rs.beans.MyExpertRestClass;\n+import org.apache.openejb.server.cxf.rs.beans.MyFirstRestClass;\n+import org.apache.openejb.server.cxf.rs.beans.RestWithInjections;\n+import org.apache.openejb.server.cxf.rs.beans.SimpleEJB;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Application;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@EnableServices(\"jax-rs\")\n+@RunWith(ApplicationComposer.class)\n+public class JAXRSWithInterfaceTest {\n+    public static final String BASE_URL = \"http://localhost:4204/foo/\";\n+\n+    @Module\n+    @Classes({ RestWithInjections.class, SimpleEJB.class, MyExpertRestClass.class, MyFirstRestClass.class })\n+    public WebApp war() {\n+        return new WebApp()\n+                .contextRoot(\"foo\")\n+                .addServlet(\"REST Application\", Application.class.getName())\n+                .addInitParam(\"REST Application\", \"javax.ws.rs.Application\", InterfaceApp.class.getName());\n+    }\n+\n+    @Test\n+    public void itf() {\n+        assertEquals(\"itf\", WebClient.create(BASE_URL).path(\"itf\").get(String.class));\n+    }\n+\n+    public static class InterfaceApp extends Application {\n+        private final Set<Class<?>> classes = new HashSet<Class<?>>();\n+\n+        public InterfaceApp() {\n+            classes.add(Impl.class);\n+        }\n+\n+        @Override\n+        public Set<Class<?>> getClasses() {\n+            return classes;\n+        }\n+    }\n+\n+    public static interface Itf {\n+        @Path(\"itf\")\n+        @GET\n+        String itf();\n+    }\n+\n+    public static class Impl implements Itf {\n+        public String itf() {\n+            return \"itf\";\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/tomee/raw/b9f18c089f626426993b3f878c6dee88f88fb868/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSWithInterfaceTest.java",
                "sha": "44417f03461322a7d8b89680cd3bf83eeda98881",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomee/blob/b9f18c089f626426993b3f878c6dee88f88fb868/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java?ref=b9f18c089f626426993b3f878c6dee88f88fb868",
                "deletions": 1,
                "filename": "server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java",
                "patch": "@@ -71,7 +71,7 @@\n     private List<DeployedService> services = new ArrayList<DeployedService>();\n     private String virtualHost;\n     private boolean enabled = true;\n-    private String wildcard = SystemInstance.get().getProperty(\"openejb.rest.wildcard\", \".*\");\n+    private String wildcard = SystemInstance.get().getProperty(\"openejb.rest.wildcard\", \".*\"); // embedded = regex, tomee = servlet\n \n     public void afterApplicationCreated(final AppInfo appInfo, final WebAppInfo webApp) {\n         final WebContext webContext = containerSystem.getWebContext(webApp.moduleId);",
                "raw_url": "https://github.com/apache/tomee/raw/b9f18c089f626426993b3f878c6dee88f88fb868/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java",
                "sha": "2d6859bea73bded948bba0790ffb25ffa0614e88",
                "status": "modified"
            }
        ],
        "message": "avoiding npe + some more jaxrs test\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1427453 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/7fcecae09687781e44a712037a3d9f90cb2068be",
        "repo": "tomee",
        "unit_tests": [
            "URLClassLoaderFirstTest.java"
        ]
    },
    "tomee_c317600": {
        "bug_id": "tomee_c317600",
        "commit": "https://github.com/apache/tomee/commit/c31760076f93ad377896af86eb72991296a42692",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomee/blob/c31760076f93ad377896af86eb72991296a42692/container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/router/FailOverRouter.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/router/FailOverRouter.java?ref=c31760076f93ad377896af86eb72991296a42692",
                "deletions": 3,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/router/FailOverRouter.java",
                "patch": "@@ -152,9 +152,12 @@ public Object invoke(final Object proxy, final Method method, final Object[] arg\n             final TransactionManager txMgr = OpenEJB.getTransactionManager();\n             final Transaction transaction = txMgr.getTransaction();\n \n-            final DataSource currentDs = txDs.get(transaction);\n-            if (currentDs != null) {\n-                return method.invoke(currentDs, args);\n+            if (transaction != null) {\n+                \n+                final DataSource currentDs = txDs.get(transaction);\n+                if (currentDs != null) {\n+                    return method.invoke(currentDs, args);\n+                }\n             }\n \n             int ex = 0;",
                "raw_url": "https://github.com/apache/tomee/raw/c31760076f93ad377896af86eb72991296a42692/container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/router/FailOverRouter.java",
                "sha": "88d823bdd4c80073c59265ad909b60aaf1d3dbb2",
                "status": "modified"
            }
        ],
        "message": "avoiding NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1476895 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/8ae5b0e159fbb5dcfd9984589a76e0686e4b329a",
        "repo": "tomee",
        "unit_tests": [
            "FailOverRouterTest.java"
        ]
    },
    "tomee_ca77a1c": {
        "bug_id": "tomee_ca77a1c",
        "commit": "https://github.com/apache/tomee/commit/ca77a1cd121d16ced344ec010bb0046b1d15cc2b",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/tomee/blob/ca77a1cd121d16ced344ec010bb0046b1d15cc2b/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=ca77a1cd121d16ced344ec010bb0046b1d15cc2b",
                "deletions": 18,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "patch": "@@ -856,18 +856,22 @@ void process(final ClassLoader cl, final String cls, final Object object) {\n                     }\n \n                     if (!containsConfigProperty(configProperties, name)) {\n-                        if (type != null) {\n-                            final ConfigProperty configProperty = new ConfigProperty();\n-                            configProperties.add(configProperty);\n+                        final ConfigProperty configProperty = new ConfigProperty();\n+                        configProperties.add(configProperty);\n \n-                            Object value = null;\n+                        Object value = null;\n+                        if (propertyDescriptor.getReadMethod() != null) {\n                             try {\n                                 value = propertyDescriptor.getReadMethod().invoke(o);\n                             } catch (final Exception e) {\n                                 // no-op\n                             }\n+                        }\n \n-                            javax.resource.spi.ConfigProperty annotation = propertyDescriptor.getWriteMethod().getAnnotation(javax.resource.spi.ConfigProperty.class);\n+                        final Method write = propertyDescriptor.getWriteMethod();\n+                        javax.resource.spi.ConfigProperty annotation = null;\n+                        if (write != null) {\n+                            annotation = write.getAnnotation(javax.resource.spi.ConfigProperty.class);\n                             if (annotation == null) {\n                                 try {\n                                     // if there's no annotation on the setter, we'll try and scrape one off the field itself (assuming the same name)\n@@ -876,22 +880,22 @@ void process(final ClassLoader cl, final String cls, final Object object) {\n                                     // no-op : getDeclaredField() throws exceptions and does not return null\n                                 }\n                             }\n+                        }\n \n-                            configProperty.setConfigPropertyName(name);\n-                            configProperty.setConfigPropertyType(getConfigPropertyType(annotation, type));\n-                            if (value != null) {\n-                                configProperty.setConfigPropertyValue(value.toString());\n-                            }\n+                        configProperty.setConfigPropertyName(name);\n+                        configProperty.setConfigPropertyType(getConfigPropertyType(annotation, type));\n+                        if (value != null) {\n+                            configProperty.setConfigPropertyValue(value.toString());\n+                        }\n \n-                            if (annotation != null) {\n-                                if (annotation.defaultValue() != null && annotation.defaultValue().length() > 0) {\n-                                    configProperty.setConfigPropertyValue(annotation.defaultValue());\n-                                }\n-                                configProperty.setConfigPropertyConfidential(annotation.confidential());\n-                                configProperty.setConfigPropertyIgnore(annotation.ignore());\n-                                configProperty.setConfigPropertySupportsDynamicUpdates(annotation.supportsDynamicUpdates());\n-                                configProperty.setDescriptions(stringsToTexts(annotation.description()));\n+                        if (annotation != null) {\n+                            if (annotation.defaultValue() != null && annotation.defaultValue().length() > 0) {\n+                                configProperty.setConfigPropertyValue(annotation.defaultValue());\n                             }\n+                            configProperty.setConfigPropertyConfidential(annotation.confidential());\n+                            configProperty.setConfigPropertyIgnore(annotation.ignore());\n+                            configProperty.setConfigPropertySupportsDynamicUpdates(annotation.supportsDynamicUpdates());\n+                            configProperty.setDescriptions(stringsToTexts(annotation.description()));\n                         }\n                     }\n                 }",
                "raw_url": "https://github.com/apache/tomee/raw/ca77a1cd121d16ced344ec010bb0046b1d15cc2b/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "sha": "93fcf5bbdf89047bf15b47459992735d5a02a91c",
                "status": "modified"
            },
            {
                "additions": 250,
                "blob_url": "https://github.com/apache/tomee/blob/ca77a1cd121d16ced344ec010bb0046b1d15cc2b/container/openejb-core/src/test/java/org/apache/openejb/config/GetterConnectorTest.java",
                "changes": 250,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/test/java/org/apache/openejb/config/GetterConnectorTest.java?ref=ca77a1cd121d16ced344ec010bb0046b1d15cc2b",
                "deletions": 0,
                "filename": "container/openejb-core/src/test/java/org/apache/openejb/config/GetterConnectorTest.java",
                "patch": "@@ -0,0 +1,250 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openejb.config;\n+\n+import org.apache.openejb.jee.ConfigProperty;\n+import org.apache.openejb.jee.ConnectionDefinition;\n+import org.apache.openejb.jee.Connector;\n+import org.apache.openejb.jee.OutboundResourceAdapter;\n+import org.apache.openejb.jee.ResourceAdapter;\n+import org.apache.openejb.junit.ApplicationComposer;\n+import org.apache.openejb.loader.SystemInstance;\n+import org.apache.openejb.spi.ContainerSystem;\n+import org.apache.openejb.testing.Module;\n+import org.apache.openejb.testing.SimpleLog;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.annotation.Resource;\n+import javax.naming.NamingException;\n+import javax.resource.ResourceException;\n+import javax.resource.cci.ConnectionFactory;\n+import javax.resource.spi.ActivationSpec;\n+import javax.resource.spi.BootstrapContext;\n+import javax.resource.spi.ConnectionEventListener;\n+import javax.resource.spi.ConnectionManager;\n+import javax.resource.spi.ConnectionRequestInfo;\n+import javax.resource.spi.LocalTransaction;\n+import javax.resource.spi.ManagedConnection;\n+import javax.resource.spi.ManagedConnectionFactory;\n+import javax.resource.spi.ManagedConnectionMetaData;\n+import javax.resource.spi.ResourceAdapterInternalException;\n+import javax.resource.spi.ValidatingManagedConnectionFactory;\n+import javax.resource.spi.endpoint.MessageEndpointFactory;\n+import javax.security.auth.Subject;\n+import javax.transaction.xa.XAResource;\n+import java.io.PrintWriter;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+@SimpleLog\n+@RunWith(ApplicationComposer.class)\n+public class GetterConnectorTest {\n+    @Module\n+    public Connector connector() {\n+        final ConfigProperty configProperty = new ConfigProperty();\n+        configProperty.setConfigPropertyName(\"conf\");\n+        configProperty.setConfigPropertyType(String.class.getName());\n+        configProperty.setConfigPropertyValue(\"GetterConnectorTest\");\n+\n+        final ConnectionDefinition connectionDefinition = new ConnectionDefinition();\n+        connectionDefinition.setConnectionFactoryImplClass(MyMcf.class.getName());\n+        connectionDefinition.setConnectionInterface(ConnectionFactory.class.getName());\n+\n+        final OutboundResourceAdapter out = new OutboundResourceAdapter();\n+        out.getConnectionDefinition().add(connectionDefinition);\n+\n+        final ResourceAdapter ra = new ResourceAdapter();\n+        ra.setResourceAdapterClass(MyRa.class.getName());\n+        ra.getConfigProperty().add(configProperty);\n+\n+        final Connector connector = new Connector();\n+        connector.setVersion(\"1.7\");\n+        connector.setResourceAdapter(ra);\n+        return connector;\n+    }\n+\n+    @Test\n+    public void run() throws NamingException {\n+        // https://issues.apache.org/jira/browse/TOMEE-1817 is a NPE so if started we are good\n+        final MyRa ra = MyRa.class.cast(SystemInstance.get().getComponent(ContainerSystem.class).getJNDIContext().lookup(\"openejb:Resource/connectorRA\"));\n+        assertNotNull(ra);\n+        assertEquals(\"GetterConnectorTest\", ra.getConf());\n+    }\n+\n+    public static class MyRa implements javax.resource.spi.ResourceAdapter {\n+        @javax.resource.spi.ConfigProperty\n+        private String conf;\n+\n+        private String TOMEE1817;\n+\n+        public String getTOMEE1817() { // getter without setter\n+            return TOMEE1817;\n+        }\n+\n+        public String getConf() {\n+            return conf;\n+        }\n+\n+        public void setConf(final String conf) {\n+            this.conf = conf;\n+        }\n+\n+        @Override\n+        public void start(final BootstrapContext ctx) throws ResourceAdapterInternalException {\n+            // no-op\n+        }\n+\n+        @Override\n+        public void stop() {\n+            // no-op\n+        }\n+\n+        @Override\n+        public void endpointActivation(final MessageEndpointFactory endpointFactory, final ActivationSpec spec) throws ResourceException {\n+            // no-op\n+        }\n+\n+        @Override\n+        public void endpointDeactivation(final MessageEndpointFactory endpointFactory, final ActivationSpec spec) {\n+            // no-op\n+        }\n+\n+        @Override\n+        public XAResource[] getXAResources(final ActivationSpec[] specs) throws ResourceException {\n+            return new XAResource[0];\n+        }\n+    }\n+    public static class MyMcf implements ManagedConnectionFactory, ValidatingManagedConnectionFactory {\n+        private final Set<ManagedConnection> connections = new HashSet<>();\n+        private final AtomicBoolean evicted = new AtomicBoolean(false);\n+        private final AtomicBoolean destroyed = new AtomicBoolean(false);\n+\n+        @Override\n+        public Object createConnectionFactory(final ConnectionManager cxManager) throws ResourceException {\n+            return null;\n+        }\n+\n+        @Override\n+        public Object createConnectionFactory() throws ResourceException {\n+            return null;\n+        }\n+\n+        @Override\n+        public ManagedConnection createManagedConnection(final Subject subject, final ConnectionRequestInfo cxRequestInfo) throws ResourceException {\n+            return new ManagedConnection() {\n+                @Override\n+                public Object getConnection(Subject subject, ConnectionRequestInfo cxRequestInfo) throws ResourceException {\n+                    connections.add(this);\n+                    return this;\n+                }\n+\n+                @Override\n+                public void destroy() throws ResourceException {\n+                    connections.remove(this);\n+                    destroyed.set(true);\n+                }\n+\n+                @Override\n+                public void cleanup() throws ResourceException {\n+                    // no-op\n+                }\n+\n+                @Override\n+                public void associateConnection(Object connection) throws ResourceException {\n+                    // no-op\n+                }\n+\n+                @Override\n+                public void addConnectionEventListener(ConnectionEventListener listener) {\n+                    // no-op\n+                }\n+\n+                @Override\n+                public void removeConnectionEventListener(ConnectionEventListener listener) {\n+                    // no-op\n+                }\n+\n+                @Override\n+                public XAResource getXAResource() throws ResourceException {\n+                    return null;\n+                }\n+\n+                @Override\n+                public LocalTransaction getLocalTransaction() throws ResourceException {\n+                    return new LocalTransaction() {\n+                        @Override\n+                        public void begin() throws ResourceException {\n+\n+                        }\n+\n+                        @Override\n+                        public void commit() throws ResourceException {\n+\n+                        }\n+\n+                        @Override\n+                        public void rollback() throws ResourceException {\n+\n+                        }\n+                    };\n+                }\n+\n+                @Override\n+                public ManagedConnectionMetaData getMetaData() throws ResourceException {\n+                    return null;\n+                }\n+\n+                @Override\n+                public void setLogWriter(PrintWriter out) throws ResourceException {\n+                    // no-op\n+                }\n+\n+                @Override\n+                public PrintWriter getLogWriter() throws ResourceException {\n+                    return null;\n+                }\n+            };\n+        }\n+\n+        @Override\n+        public ManagedConnection matchManagedConnections(final Set connectionSet, final Subject subject,\n+                                                         final ConnectionRequestInfo cxRequestInfo) throws ResourceException {\n+            return null;\n+        }\n+\n+        @Override\n+        public void setLogWriter(PrintWriter out) throws ResourceException {\n+            // no-op\n+        }\n+\n+        @Override\n+        public PrintWriter getLogWriter() throws ResourceException {\n+            return null;\n+        }\n+\n+        @Override\n+        public Set getInvalidConnections(final Set connectionSet) throws ResourceException {\n+            evicted.set(true);\n+            return connections;\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/tomee/raw/ca77a1cd121d16ced344ec010bb0046b1d15cc2b/container/openejb-core/src/test/java/org/apache/openejb/config/GetterConnectorTest.java",
                "sha": "7e673316e3e6f1da90ba4cc56f2c708638b0ad74",
                "status": "added"
            }
        ],
        "message": "TOMEE-1817 avoid NPE if a RA has a getter which is not supposed to be handled by the container",
        "parent": "https://github.com/apache/tomee/commit/5868a43c757405870e561aad6fa09ebd50623057",
        "repo": "tomee",
        "unit_tests": [
            "AnnotationDeployerTest.java"
        ]
    },
    "tomee_cf2692b": {
        "bug_id": "tomee_cf2692b",
        "commit": "https://github.com/apache/tomee/commit/cf2692b602ee0615f21acf5dbf8eecc043838dfd",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomee/blob/cf2692b602ee0615f21acf5dbf8eecc043838dfd/container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java?ref=cf2692b602ee0615f21acf5dbf8eecc043838dfd",
                "deletions": 3,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java",
                "patch": "@@ -763,9 +763,11 @@ public void deployApp(final Object inputTestInstance) throws Exception {\n     private boolean isCdi(final boolean cdi, final Class<?>[] cdiInterceptors,\n                           final Class<?>[] cdiAlternatives, final Class<?>[] cdiStereotypes,\n                           final Class<?>[] cdiDecorators) {\n-        return cdi || cdiAlternatives.length > 0\n-            || cdiDecorators.length > 0 || cdiInterceptors.length > 0\n-            || cdiStereotypes.length > 0;\n+        return cdi\n+            || (cdiAlternatives != null && cdiAlternatives.length > 0)\n+            || (cdiDecorators != null && cdiDecorators.length > 0)\n+            || (cdiInterceptors != null && cdiInterceptors.length > 0)\n+            || (cdiStereotypes != null && cdiStereotypes.length > 0);\n     }\n \n     protected boolean mockCdiContexts() {",
                "raw_url": "https://github.com/apache/tomee/raw/cf2692b602ee0615f21acf5dbf8eecc043838dfd/container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java",
                "sha": "61e0e06e0c3130e80e9487e680d4e279549ff850",
                "status": "modified"
            }
        ],
        "message": "NPE protection",
        "parent": "https://github.com/apache/tomee/commit/ca0436e8f34c08de809c18bce6732f3675ac01ee",
        "repo": "tomee",
        "unit_tests": [
            "ApplicationComposersTest.java"
        ]
    },
    "tomee_d78ccc6": {
        "bug_id": "tomee_d78ccc6",
        "commit": "https://github.com/apache/tomee/commit/d78ccc6090c1fdcb0010e6aa73800b517b58a653",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomee/blob/d78ccc6090c1fdcb0010e6aa73800b517b58a653/container/openejb-core/src/main/java/org/apache/openejb/config/AutoConfig.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AutoConfig.java?ref=d78ccc6090c1fdcb0010e6aa73800b517b58a653",
                "deletions": 1,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AutoConfig.java",
                "patch": "@@ -191,7 +191,7 @@ private void processPersistenceRefs(JndiConsumer component, AppModule appModule,\n \n     private PersistenceUnit processPersistenceRef(LinkResolver<PersistenceUnit> persistenceUnits, PersistenceRef ref, URI moduleURI, String componentName, ValidationContext validation) {\n \n-        if (ref.getMappedName().startsWith(\"jndi:\")){\n+        if (ref.getMappedName() != null && ref.getMappedName().startsWith(\"jndi:\")){\n             return null;\n         }\n ",
                "raw_url": "https://github.com/apache/tomee/raw/d78ccc6090c1fdcb0010e6aa73800b517b58a653/container/openejb-core/src/main/java/org/apache/openejb/config/AutoConfig.java",
                "sha": "29f313436d9f9f8ab64b514d54dea55e3eedf48a",
                "status": "modified"
            }
        ],
        "message": "Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@603579 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/53f8c293006adbb06e18260e7795330e49834886",
        "repo": "tomee",
        "unit_tests": [
            "AutoConfigTest.java"
        ]
    },
    "tomee_d903b63": {
        "bug_id": "tomee_d903b63",
        "commit": "https://github.com/apache/tomee/commit/d903b63d52d61fe692a029df34934e3ff67ff2ef",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomee/blob/d903b63d52d61fe692a029df34934e3ff67ff2ef/container/openejb-core/src/main/java/org/apache/openejb/util/Logger.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/util/Logger.java?ref=d903b63d52d61fe692a029df34934e3ff67ff2ef",
                "deletions": 1,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/util/Logger.java",
                "patch": "@@ -87,7 +87,10 @@ public static synchronized void configure(final Properties config) {\n         // without changing LogStreamFactory contract\n         final String specialKey = \"openejb.jul.forceReload\";\n         final String original = System.getProperty(specialKey);\n-        System.setProperty(specialKey, config.getProperty(specialKey, SystemInstance.isInitialized() ? SystemInstance.get().getOptions().get(specialKey, (String) null) : null));\n+        final String property = config.getProperty(specialKey, SystemInstance.isInitialized() ? SystemInstance.get().getOptions().get(specialKey, (String) null) : null);\n+        if (property != null) {\n+            System.setProperty(specialKey, property);\n+        }\n \n         try {\n             if (factoryName != null) {",
                "raw_url": "https://github.com/apache/tomee/raw/d903b63d52d61fe692a029df34934e3ff67ff2ef/container/openejb-core/src/main/java/org/apache/openejb/util/Logger.java",
                "sha": "69fbd71c5091f309ab7f3a8373d90b22d73e81ec",
                "status": "modified"
            }
        ],
        "message": "avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1629626 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/6abdc427659162dfeba724f2096c8c1d79207756",
        "repo": "tomee",
        "unit_tests": [
            "LoggerTest.java"
        ]
    },
    "tomee_e60f923": {
        "bug_id": "tomee_e60f923",
        "commit": "https://github.com/apache/tomee/commit/e60f92340bdb5bef2d1c3c71bc9c4983f97e86a3",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/tomee/blob/e60f92340bdb5bef2d1c3c71bc9c4983f97e86a3/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiPlugin.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiPlugin.java?ref=e60f92340bdb5bef2d1c3c71bc9c4983f97e86a3",
                "deletions": 1,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiPlugin.java",
                "patch": "@@ -103,10 +103,18 @@\n \n     public void setWebBeansContext(final WebBeansContext webBeansContext) {\n         this.webBeansContext = webBeansContext;\n+        if (webBeansContext == null) {\n+            return;\n+        }\n         if (!WebappWebBeansContext.class.isInstance(webBeansContext)) {\n             cacheProxies = new ConcurrentHashMap<Contextual<?>, Object>();\n         } else { // share cache of proxies between the whole app otherwise hard to share an EJB between a webapp and the lib part of the app\n-            cacheProxies = CdiPlugin.class.cast(WebappWebBeansContext.class.cast(webBeansContext).getParent().getPluginLoader().getEjbPlugin()).cacheProxies;\n+            final WebBeansContext parent = WebappWebBeansContext.class.cast(webBeansContext).getParent();\n+            if (parent != null) {\n+                cacheProxies = CdiPlugin.class.cast(parent.getPluginLoader().getEjbPlugin()).cacheProxies;\n+            } else {\n+                cacheProxies = new ConcurrentHashMap<Contextual<?>, Object>();\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/tomee/raw/e60f92340bdb5bef2d1c3c71bc9c4983f97e86a3/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiPlugin.java",
                "sha": "db39ccb6d29934bc9fa8e280857a8ef55f7326a6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomee/blob/e60f92340bdb5bef2d1c3c71bc9c4983f97e86a3/container/openejb-core/src/main/java/org/apache/openejb/cdi/WebAppInjectionResolver.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/WebAppInjectionResolver.java?ref=e60f92340bdb5bef2d1c3c71bc9c4983f97e86a3",
                "deletions": 1,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/WebAppInjectionResolver.java",
                "patch": "@@ -35,7 +35,7 @@ public WebAppInjectionResolver(final WebappWebBeansContext ctx) {\n     @Override\n     public Set<Bean<?>> implResolveByType(final boolean delegate, final Type injectionPointType, final Class<?> injectinPointClass, final Annotation... qualifiers) {\n         final Set<Bean<?>> set = super.implResolveByType(delegate, injectionPointType, injectinPointClass, qualifiers);\n-        if (set.isEmpty()) {\n+        if (set.isEmpty() && context.getParent() != null) {\n             return context.getParent().getBeanManagerImpl().getInjectionResolver().implResolveByType(delegate, injectionPointType, injectinPointClass, qualifiers);\n         }\n         return set;",
                "raw_url": "https://github.com/apache/tomee/raw/e60f92340bdb5bef2d1c3c71bc9c4983f97e86a3/container/openejb-core/src/main/java/org/apache/openejb/cdi/WebAppInjectionResolver.java",
                "sha": "98c5a1146ccde42c62235d3b70d6567f3e861003",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/tomee/blob/e60f92340bdb5bef2d1c3c71bc9c4983f97e86a3/container/openejb-core/src/main/java/org/apache/openejb/cdi/WebappBeanManager.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/cdi/WebappBeanManager.java?ref=e60f92340bdb5bef2d1c3c71bc9c4983f97e86a3",
                "deletions": 10,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/cdi/WebappBeanManager.java",
                "patch": "@@ -21,6 +21,7 @@\n import org.apache.webbeans.component.BuiltInOwbBean;\n import org.apache.webbeans.component.ExtensionBean;\n import org.apache.webbeans.component.OwbBean;\n+import org.apache.webbeans.config.WebBeansContext;\n import org.apache.webbeans.container.BeanManagerImpl;\n import org.apache.webbeans.context.creational.CreationalContextImpl;\n import org.apache.webbeans.event.EventMetadataImpl;\n@@ -68,7 +69,10 @@ public WebappBeanManager(final WebappWebBeansContext ctx) {\n     public void fireEvent(final Object event, final EventMetadataImpl metadata, final boolean isLifecycleEvent) {\n         getNotificationManager().fireEvent(event, metadata, isLifecycleEvent);\n         if (isEvent(event)) {\n-            getParentBm().getNotificationManager().fireEvent(event, metadata, isLifecycleEvent);\n+            final BeanManagerImpl parentBm = getParentBm();\n+            if (parentBm != null) {\n+                parentBm.getNotificationManager().fireEvent(event, metadata, isLifecycleEvent);\n+            }\n         }\n     }\n \n@@ -90,7 +94,10 @@ public void fireEvent(final Object event, final EventMetadataImpl metadata, fina\n         set.addAll(getNotificationManager().resolveObservers(event, metadata, false));\n \n         if (isEvent(event)) {\n-            set.addAll(getParentBm().getNotificationManager().resolveObservers(event, metadata, false));\n+            final BeanManagerImpl parentBm = getParentBm();\n+            if (parentBm != null) {\n+                set.addAll(parentBm.getNotificationManager().resolveObservers(event, metadata, false));\n+            }\n         } // else nothing since extensions are loaded by classloader so we already have it\n \n         return set;\n@@ -103,18 +110,22 @@ public Object getInjectableReference(final InjectionPoint injectionPoint, final\n             return null;\n         }\n \n+        final BeanManagerImpl parentBm = getParentBm();\n         final Boolean existing = USE_PARENT_BM.get();\n         if (existing != null && existing) { // shortcut the whole logic to keep the threadlocal set up correctly\n-            return getParentBm().getInjectableReference(injectionPoint, ctx);\n+            if (parentBm == null) {\n+                return null;\n+            }\n+            return parentBm.getInjectableReference(injectionPoint, ctx);\n         }\n \n         // we can do it cause there is caching but we shouldn't - easy way to overide OWB actually\n         final Bean<Object> injectedBean = (Bean<Object>)getInjectionResolver().getInjectionPointBean(injectionPoint);\n         try {\n-            if (injectedBean != null && injectedBean == getParentBm().getInjectionResolver().getInjectionPointBean(injectionPoint)) {\n+            if (parentBm != null && injectedBean != null && injectedBean == parentBm.getInjectionResolver().getInjectionPointBean(injectionPoint)) {\n                 USE_PARENT_BM.set(true);\n                 try {\n-                    return getParentBm().getInjectableReference(injectionPoint, ctx);\n+                    return parentBm.getInjectableReference(injectionPoint, ctx);\n                 } finally {\n                     USE_PARENT_BM.remove();\n                 }\n@@ -268,7 +279,8 @@ public ExpressionFactory wrapExpressionFactory(final ExpressionFactory expressio\n     }\n \n     public BeanManagerImpl getParentBm() {\n-        return webappCtx.getParent().getBeanManagerImpl();\n+        final WebBeansContext parent = webappCtx.getParent();\n+        return parent != null ? parent.getBeanManagerImpl() : null;\n     }\n \n     @Override\n@@ -304,7 +316,7 @@ public boolean isInUse() {\n     @Override\n     public Bean<?> getPassivationCapableBean(final String id) {\n         final Bean<?> bean = super.getPassivationCapableBean(id);\n-        if (bean == null) {\n+        if (bean == null && getParentBm() != null) {\n             return getParentBm().getPassivationCapableBean(id);\n         }\n         return bean;\n@@ -318,9 +330,12 @@ public void afterStart() {\n \n     private Set<Bean<?>> mergeBeans() {\n         final Set<Bean<?>> allBeans = new CopyOnWriteArraySet<>(); // override parent one with a \"webapp\" bean list\n-        for (final Bean<?> bean : getParentBm().getBeans()) {\n-            if (filter.accept(bean)) {\n-                allBeans.add(bean);\n+        final BeanManagerImpl parentBm = getParentBm();\n+        if (parentBm != null) {\n+            for (final Bean<?> bean : parentBm.getBeans()) {\n+                if (filter.accept(bean)) {\n+                    allBeans.add(bean);\n+                }\n             }\n         }\n         allBeans.addAll(super.getBeans());",
                "raw_url": "https://github.com/apache/tomee/raw/e60f92340bdb5bef2d1c3c71bc9c4983f97e86a3/container/openejb-core/src/main/java/org/apache/openejb/cdi/WebappBeanManager.java",
                "sha": "eacfc5ddf98018070a59c078f856cd1bcf4945d4",
                "status": "modified"
            }
        ],
        "message": "NPE when skipping cdi for ears",
        "parent": "https://github.com/apache/tomee/commit/e677d4d5c25f8514b357478f7e94ff832731e5e4",
        "repo": "tomee",
        "unit_tests": [
            "WebappBeanManagerTest.java"
        ]
    },
    "tomee_ec82941": {
        "bug_id": "tomee_ec82941",
        "commit": "https://github.com/apache/tomee/commit/ec82941a6b9ab08e6051452c1029f1e77b341be1",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomee/blob/ec82941a6b9ab08e6051452c1029f1e77b341be1/container/openejb-core/src/main/java/org/apache/openejb/config/OpenEjb2Conversion.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/OpenEjb2Conversion.java?ref=ec82941a6b9ab08e6051452c1029f1e77b341be1",
                "deletions": 2,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/OpenEjb2Conversion.java",
                "patch": "@@ -230,8 +230,10 @@ public void convertMdbConfigs(EjbJar ejbJar, OpenejbJarType openejbJarType) {\n \n     public void mergeEntityMappings(String moduleId, EntityMappings entityMappings, OpenejbJar openejbJar, OpenejbJarType openejbJarType) {\n         Map<String, EntityData> entities =  new TreeMap<String, EntityData>();\n-        for (Entity entity : entityMappings.getEntity()) {\n-            entities.put(entity.getDescription(), new EntityData(entity));\n+        if (entityMappings != null) {\n+            for (Entity entity : entityMappings.getEntity()) {\n+                entities.put(entity.getDescription(), new EntityData(entity));\n+            }\n         }\n         for (org.apache.openejb.jee.oejb2.EnterpriseBean enterpriseBean : openejbJarType.getEnterpriseBeans()) {\n             if (!(enterpriseBean instanceof EntityBeanType)) {",
                "raw_url": "https://github.com/apache/tomee/raw/ec82941a6b9ab08e6051452c1029f1e77b341be1/container/openejb-core/src/main/java/org/apache/openejb/config/OpenEjb2Conversion.java",
                "sha": "83bcbadebdb0677ebb70bec580a4b413d0a0f519",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE (it seems to have broken Geronimo build today)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@606054 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/b2d19b719b3fa3d4d6c93edb582bb26982721dc7",
        "repo": "tomee",
        "unit_tests": [
            "OpenEjb2ConversionTest.java"
        ]
    },
    "tomee_ef303f2": {
        "bug_id": "tomee_ef303f2",
        "commit": "https://github.com/apache/tomee/commit/ef303f28d545f2c08b1a6e39c83ce86c7214681c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomee/blob/ef303f28d545f2c08b1a6e39c83ce86c7214681c/container/openejb-core/src/main/java/org/apache/openejb/config/ReadDescriptors.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/ReadDescriptors.java?ref=ef303f28d545f2c08b1a6e39c83ce86c7214681c",
                "deletions": 1,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/ReadDescriptors.java",
                "patch": "@@ -137,7 +137,7 @@ private void readValidationConfigType(Module module) throws OpenEJBException {\n             return;\n         }\n         URL url = (URL) module.getAltDDs().get(\"validation.xml\");\n-        if (url == null) { // library but not a module case\n+        if (url == null && module.getClassLoader() != null) { // library but not a module case\n             url = module.getClassLoader().getResource(\"META-INF/validation.xml\");\n             if (url != null) {\n                 module.getAltDDs().put(\"validation.xml\", url);",
                "raw_url": "https://github.com/apache/tomee/raw/ef303f28d545f2c08b1a6e39c83ce86c7214681c/container/openejb-core/src/main/java/org/apache/openejb/config/ReadDescriptors.java",
                "sha": "c49a5fd5885df17f6f3d253b76bde7fce21c2b46",
                "status": "modified"
            }
        ],
        "message": "avoiding a NPE in ReadDescriptors (for ConfigurationFactoryTest)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb3@1161255 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/d9e54486150ad1f540293b9a2f30acbeaffd1580",
        "repo": "tomee",
        "unit_tests": [
            "ReadDescriptorsTest.java"
        ]
    },
    "tomee_f0c5ecc": {
        "bug_id": "tomee_f0c5ecc",
        "commit": "https://github.com/apache/tomee/commit/f0c5ecc62d7deef5b879a58fdcc64f3c102f4213",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/tomee/blob/f0c5ecc62d7deef5b879a58fdcc64f3c102f4213/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/EJBExceptionMapper.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/EJBExceptionMapper.java?ref=f0c5ecc62d7deef5b879a58fdcc64f3c102f4213",
                "deletions": 2,
                "filename": "server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/EJBExceptionMapper.java",
                "patch": "@@ -16,8 +16,10 @@\n  */\n package org.apache.openejb.server.cxf.rs;\n \n+import javax.ejb.EJBAccessException;\n import javax.ejb.EJBException;\n import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.ext.ExceptionMapper;\n import javax.ws.rs.ext.Providers;\n@@ -31,8 +33,18 @@ public Response toResponse(final EJBException ejbException) {\n         final Exception cause = ejbException.getCausedByException();\n         if (cause != null) {\n             final Class causeClass = cause.getClass();\n-            return providers.getExceptionMapper(causeClass).toResponse(cause);\n+            final ExceptionMapper exceptionMapper = providers.getExceptionMapper(causeClass);\n+            if (exceptionMapper == null) {\n+                return defaultResponse(cause);\n+            }\n+            return exceptionMapper.toResponse(cause);\n+        } else if (EJBAccessException.class.isInstance(ejbException)) {\n+            return Response.status(Response.Status.FORBIDDEN).build();\n         }\n-        throw ejbException;\n+        return defaultResponse(ejbException);\n+    }\n+\n+    private Response defaultResponse(Exception cause) {\n+        return Response.serverError().type(MediaType.TEXT_PLAIN_TYPE).entity(cause.getMessage()).build();\n     }\n }",
                "raw_url": "https://github.com/apache/tomee/raw/f0c5ecc62d7deef5b879a58fdcc64f3c102f4213/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/EJBExceptionMapper.java",
                "sha": "1a67b665959236da1c3a63a308d771d604c6fbb0",
                "status": "modified"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/tomee/blob/f0c5ecc62d7deef5b879a58fdcc64f3c102f4213/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/EJBExceptionMapperTest.java",
                "changes": 95,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/EJBExceptionMapperTest.java?ref=f0c5ecc62d7deef5b879a58fdcc64f3c102f4213",
                "deletions": 61,
                "filename": "server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/EJBExceptionMapperTest.java",
                "patch": "@@ -17,94 +17,67 @@\n package org.apache.openejb.server.cxf.rs;\n \n import org.apache.cxf.jaxrs.client.WebClient;\n-import org.apache.openejb.OpenEjbContainer;\n-import org.apache.openejb.config.DeploymentFilterable;\n-import org.apache.openejb.server.cxf.rs.beans.SimpleEJB;\n-import org.apache.openejb.util.NetworkUtil;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n+import org.apache.openejb.junit.ApplicationComposer;\n+import org.apache.openejb.testing.Classes;\n+import org.apache.openejb.testing.EnableServices;\n+import org.apache.openejb.testing.RandomPort;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n \n import javax.annotation.security.RolesAllowed;\n-import javax.ejb.EJB;\n import javax.ejb.Lock;\n import javax.ejb.LockType;\n import javax.ejb.Singleton;\n-import javax.ejb.embeddable.EJBContainer;\n-import javax.ws.rs.DefaultValue;\n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n-import javax.ws.rs.QueryParam;\n-import javax.ws.rs.core.Request;\n import javax.ws.rs.core.Response;\n-import java.util.Properties;\n+import javax.ws.rs.ext.ExceptionMapper;\n+import javax.ws.rs.ext.Provider;\n \n import static org.junit.Assert.assertEquals;\n \n-@SuppressWarnings(\"FieldCanBeLocal\")\n+@EnableServices(\"jaxrs\")\n+@Classes(cdi = true, innerClassesAsBean = true)\n+@RunWith(ApplicationComposer.class)\n public class EJBExceptionMapperTest {\n-    private static EJBContainer container;\n-    private static RESTIsCoolOne service;\n-    private static int port = -1;\n+    @RandomPort(\"http\")\n+    private int port;\n \n-    @BeforeClass\n-    public static void start() throws Exception {\n-        port = NetworkUtil.getNextAvailablePort();\n-        final Properties properties = new Properties();\n-        properties.setProperty(\"httpejbd.port\", Integer.toString(port));\n-        properties.setProperty(DeploymentFilterable.CLASSPATH_INCLUDE, \".*openejb-cxf-rs.*\");\n-        properties.setProperty(OpenEjbContainer.OPENEJB_EMBEDDED_REMOTABLE, \"true\");\n-        container = EJBContainer.createEJBContainer(properties);\n-        service = (RESTIsCoolOne) container.getContext().lookup(\"java:/global/openejb-cxf-rs/RESTIsCoolOne\");\n-    }\n-\n-    @AfterClass\n-    public static void close() throws Exception {\n-        if (container != null) {\n-            container.close();\n-        }\n+    @Test\n+    public void security() {\n+        final Response response = WebClient.create(\"http://localhost:\" + port + \"/openejb\").path(\"/ejbsecu/rest\").get();\n+        assertEquals(403, response.getStatus());\n     }\n \n-\n     @Test\n-    public void rest() {\n-        final Response response = WebClient.create(\"http://localhost:\" + port + \"/openejb-cxf-rs\").path(\"/ejbsecu/rest\").get();\n-        assertEquals(500, response.getStatus());\n+    public void businessError() {\n+        final Response response = WebClient.create(\"http://localhost:\" + port + \"/openejb\").path(\"/ejbsecu/oops\").get();\n+        assertEquals(234, response.getStatus());\n     }\n \n+    @Provider\n+    public static class IllegalMapper implements ExceptionMapper<IllegalArgumentException> {\n+        @Override\n+        public Response toResponse(final IllegalArgumentException exception) {\n+            return Response.status(234).build();\n+        }\n+    }\n \n     @Singleton\n-    @RolesAllowed(\"Something that does not exit at all\")\n     @Lock(LockType.READ)\n-    @Path(\"/ejbsecu\")\n+    @Path(\"ejbsecu\")\n     public static class RESTIsCoolOne {\n-        @EJB\n-        private SimpleEJB simpleEJB;\n-        @javax.ws.rs.core.Context\n-        Request request;\n-\n-        @Path(\"/normal\")\n-        @GET\n-        public String normal() {\n-            return simpleEJB.ok();\n-        }\n-\n-        @Path(\"/rest\")\n-        @GET\n-        public String rest() {\n-            return simpleEJB.ok();\n-        }\n-\n-        @Path(\"/param\")\n+        @Path(\"rest\")\n+        @RolesAllowed(\"Something that does not exit at all\")\n         @GET\n-        public String param(@QueryParam(\"arg\") @DefaultValue(\"true\") final String p) {\n-            return p;\n+        public boolean secu() {\n+            return true;\n         }\n \n-        @Path(\"/field\")\n+        @Path(\"/oops\")\n         @GET\n-        public boolean field() {\n-            return \"GET\".equals(request.getMethod());\n+        public boolean err() {\n+            throw new IllegalArgumentException(\"oops\");\n         }\n     }\n }",
                "raw_url": "https://github.com/apache/tomee/raw/f0c5ecc62d7deef5b879a58fdcc64f3c102f4213/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/EJBExceptionMapperTest.java",
                "sha": "b47aecda08d71dd64eae7f18329f08d9d2e0d66d",
                "status": "modified"
            },
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/tomee/blob/f0c5ecc62d7deef5b879a58fdcc64f3c102f4213/utils/openejb-provisionning/src/main#java/org/apache/openejb/resolver/maven/ShrinkwrapBridge.java",
                "changes": 63,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/utils/openejb-provisionning/src/main#java/org/apache/openejb/resolver/maven/ShrinkwrapBridge.java?ref=f0c5ecc62d7deef5b879a58fdcc64f3c102f4213",
                "deletions": 0,
                "filename": "utils/openejb-provisionning/src/main#java/org/apache/openejb/resolver/maven/ShrinkwrapBridge.java",
                "patch": "@@ -0,0 +1,63 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openejb.resolver.maven;\n+\n+import org.apache.openejb.util.reflection.Reflections;\n+\n+import java.io.File;\n+\n+public class ShrinkwrapBridge {\n+    private static final Class<?>[] NO_PARAM = new Class[0];\n+    private static final Class<?>[] STRING_PARAM = new Class[]{String.class};\n+    private static final Object[] NO_ARG = new Object[0];\n+\n+    public File resolve(final String rawLocation) throws Exception {\n+        final Class<?> mvn = Thread.currentThread().getContextClassLoader().loadClass(\"org.jboss.shrinkwrap.resolver.api.maven.Maven\");\n+        /*\n+        return Maven.configureResolver().workOffline()\n+            .resolve(toSwFormat(rawLocation))\n+            .withoutTransitivity()\n+            .asSingleFile()\n+            .getAbsolutePath()\n+         */\n+        return File.class.cast(Reflections.invokeByReflection(\n+            Reflections.invokeByReflection(\n+                Reflections.invokeByReflection(\n+                    Reflections.invokeByReflection(\n+                        mvn.getMethod(\"configureResolver\").invoke(null),\n+                        \"workOffline\", NO_PARAM, NO_ARG),\n+                    \"resolve\", STRING_PARAM, new Object[]{toSwFormat(rawLocation)}),\n+                \"withoutTransitivity\", NO_PARAM, NO_ARG),\n+            \"asSingleFile\", NO_PARAM, NO_ARG));\n+    }\n+\n+    private String toSwFormat(final String rawLocation) {\n+        final String[] segments = rawLocation.split(\":\");\n+        if (!\"mvn\".equals(segments[0])) {\n+            throw new IllegalArgumentException(\"Only mvn prefix is supported: \" + rawLocation);\n+        }\n+\n+        if (segments.length == 5) {\n+            return segments[1] + ':' + segments[2] + ':' + segments[4] + ':' + segments[3];\n+        } else if (segments.length == 4) {\n+            return segments[1] + ':' + segments[2] + ':' + segments[3];\n+        } else if (segments.length == 3) {\n+            return segments[1] + ':' + segments[2];\n+        }\n+        throw new IllegalArgumentException(\"Unknown mvn format: \" + rawLocation);\n+    }\n+}",
                "raw_url": "https://github.com/apache/tomee/raw/f0c5ecc62d7deef5b879a58fdcc64f3c102f4213/utils/openejb-provisionning/src/main#java/org/apache/openejb/resolver/maven/ShrinkwrapBridge.java",
                "sha": "9e98f5669be62c7af0ece4bfa9f1d597c25c8ff1",
                "status": "added"
            },
            {
                "additions": 1196,
                "blob_url": "https://github.com/apache/tomee/blob/f0c5ecc62d7deef5b879a58fdcc64f3c102f4213/utils/openejb-provisionning/src/main#legal/LICENSE",
                "changes": 1196,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/utils/openejb-provisionning/src/main#legal/LICENSE?ref=f0c5ecc62d7deef5b879a58fdcc64f3c102f4213",
                "deletions": 0,
                "filename": "utils/openejb-provisionning/src/main#legal/LICENSE",
                "patch": "@@ -0,0 +1,1196 @@\n+\n+                                 Apache License\n+                           Version 2.0, January 2004\n+                        http://www.apache.org/licenses/\n+\n+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n+\n+   1. Definitions.\n+\n+      \"License\" shall mean the terms and conditions for use, reproduction,\n+      and distribution as defined by Sections 1 through 9 of this document.\n+\n+      \"Licensor\" shall mean the copyright owner or entity authorized by\n+      the copyright owner that is granting the License.\n+\n+      \"Legal Entity\" shall mean the union of the acting entity and all\n+      other entities that control, are controlled by, or are under common\n+      control with that entity. For the purposes of this definition,\n+      \"control\" means (i) the power, direct or indirect, to cause the\n+      direction or management of such entity, whether by contract or\n+      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n+      outstanding shares, or (iii) beneficial ownership of such entity.\n+\n+      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n+      exercising permissions granted by this License.\n+\n+      \"Source\" form shall mean the preferred form for making modifications,\n+      including but not limited to software source code, documentation\n+      source, and configuration files.\n+\n+      \"Object\" form shall mean any form resulting from mechanical\n+      transformation or translation of a Source form, including but\n+      not limited to compiled object code, generated documentation,\n+      and conversions to other media types.\n+\n+      \"Work\" shall mean the work of authorship, whether in Source or\n+      Object form, made available under the License, as indicated by a\n+      copyright notice that is included in or attached to the work\n+      (an example is provided in the Appendix below).\n+\n+      \"Derivative Works\" shall mean any work, whether in Source or Object\n+      form, that is based on (or derived from) the Work and for which the\n+      editorial revisions, annotations, elaborations, or other modifications\n+      represent, as a whole, an original work of authorship. For the purposes\n+      of this License, Derivative Works shall not include works that remain\n+      separable from, or merely link (or bind by name) to the interfaces of,\n+      the Work and Derivative Works thereof.\n+\n+      \"Contribution\" shall mean any work of authorship, including\n+      the original version of the Work and any modifications or additions\n+      to that Work or Derivative Works thereof, that is intentionally\n+      submitted to Licensor for inclusion in the Work by the copyright owner\n+      or by an individual or Legal Entity authorized to submit on behalf of\n+      the copyright owner. For the purposes of this definition, \"submitted\"\n+      means any form of electronic, verbal, or written communication sent\n+      to the Licensor or its representatives, including but not limited to\n+      communication on electronic mailing lists, source code control systems,\n+      and issue tracking systems that are managed by, or on behalf of, the\n+      Licensor for the purpose of discussing and improving the Work, but\n+      excluding communication that is conspicuously marked or otherwise\n+      designated in writing by the copyright owner as \"Not a Contribution.\"\n+\n+      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n+      on behalf of whom a Contribution has been received by Licensor and\n+      subsequently incorporated within the Work.\n+\n+   2. Grant of Copyright License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      copyright license to reproduce, prepare Derivative Works of,\n+      publicly display, publicly perform, sublicense, and distribute the\n+      Work and such Derivative Works in Source or Object form.\n+\n+   3. Grant of Patent License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      (except as stated in this section) patent license to make, have made,\n+      use, offer to sell, sell, import, and otherwise transfer the Work,\n+      where such license applies only to those patent claims licensable\n+      by such Contributor that are necessarily infringed by their\n+      Contribution(s) alone or by combination of their Contribution(s)\n+      with the Work to which such Contribution(s) was submitted. If You\n+      institute patent litigation against any entity (including a\n+      cross-claim or counterclaim in a lawsuit) alleging that the Work\n+      or a Contribution incorporated within the Work constitutes direct\n+      or contributory patent infringement, then any patent licenses\n+      granted to You under this License for that Work shall terminate\n+      as of the date such litigation is filed.\n+\n+   4. Redistribution. You may reproduce and distribute copies of the\n+      Work or Derivative Works thereof in any medium, with or without\n+      modifications, and in Source or Object form, provided that You\n+      meet the following conditions:\n+\n+      (a) You must give any other recipients of the Work or\n+          Derivative Works a copy of this License; and\n+\n+      (b) You must cause any modified files to carry prominent notices\n+          stating that You changed the files; and\n+\n+      (c) You must retain, in the Source form of any Derivative Works\n+          that You distribute, all copyright, patent, trademark, and\n+          attribution notices from the Source form of the Work,\n+          excluding those notices that do not pertain to any part of\n+          the Derivative Works; and\n+\n+      (d) If the Work includes a \"NOTICE\" text file as part of its\n+          distribution, then any Derivative Works that You distribute must\n+          include a readable copy of the attribution notices contained\n+          within such NOTICE file, excluding those notices that do not\n+          pertain to any part of the Derivative Works, in at least one\n+          of the following places: within a NOTICE text file distributed\n+          as part of the Derivative Works; within the Source form or\n+          documentation, if provided along with the Derivative Works; or,\n+          within a display generated by the Derivative Works, if and\n+          wherever such third-party notices normally appear. The contents\n+          of the NOTICE file are for informational purposes only and\n+          do not modify the License. You may add Your own attribution\n+          notices within Derivative Works that You distribute, alongside\n+          or as an addendum to the NOTICE text from the Work, provided\n+          that such additional attribution notices cannot be construed\n+          as modifying the License.\n+\n+      You may add Your own copyright statement to Your modifications and\n+      may provide additional or different license terms and conditions\n+      for use, reproduction, or distribution of Your modifications, or\n+      for any such Derivative Works as a whole, provided Your use,\n+      reproduction, and distribution of the Work otherwise complies with\n+      the conditions stated in this License.\n+\n+   5. Submission of Contributions. Unless You explicitly state otherwise,\n+      any Contribution intentionally submitted for inclusion in the Work\n+      by You to the Licensor shall be under the terms and conditions of\n+      this License, without any additional terms or conditions.\n+      Notwithstanding the above, nothing herein shall supersede or modify\n+      the terms of any separate license agreement you may have executed\n+      with Licensor regarding such Contributions.\n+\n+   6. Trademarks. This License does not grant permission to use the trade\n+      names, trademarks, service marks, or product names of the Licensor,\n+      except as required for reasonable and customary use in describing the\n+      origin of the Work and reproducing the content of the NOTICE file.\n+\n+   7. Disclaimer of Warranty. Unless required by applicable law or\n+      agreed to in writing, Licensor provides the Work (and each\n+      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+      implied, including, without limitation, any warranties or conditions\n+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n+      PARTICULAR PURPOSE. You are solely responsible for determining the\n+      appropriateness of using or redistributing the Work and assume any\n+      risks associated with Your exercise of permissions under this License.\n+\n+   8. Limitation of Liability. In no event and under no legal theory,\n+      whether in tort (including negligence), contract, or otherwise,\n+      unless required by applicable law (such as deliberate and grossly\n+      negligent acts) or agreed to in writing, shall any Contributor be\n+      liable to You for damages, including any direct, indirect, special,\n+      incidental, or consequential damages of any character arising as a\n+      result of this License or out of the use or inability to use the\n+      Work (including but not limited to damages for loss of goodwill,\n+      work stoppage, computer failure or malfunction, or any and all\n+      other commercial damages or losses), even if such Contributor\n+      has been advised of the possibility of such damages.\n+\n+   9. Accepting Warranty or Additional Liability. While redistributing\n+      the Work or Derivative Works thereof, You may choose to offer,\n+      and charge a fee for, acceptance of support, warranty, indemnity,\n+      or other liability obligations and/or rights consistent with this\n+      License. However, in accepting such obligations, You may act only\n+      on Your own behalf and on Your sole responsibility, not on behalf\n+      of any other Contributor, and only if You agree to indemnify,\n+      defend, and hold each Contributor harmless for any liability\n+      incurred by, or claims asserted against, such Contributor by reason\n+      of your accepting any such warranty or additional liability.\n+\n+   END OF TERMS AND CONDITIONS\n+\n+   APPENDIX: How to apply the Apache License to your work.\n+\n+      To apply the Apache License to your work, attach the following\n+      boilerplate notice, with the fields enclosed by brackets \"[]\"\n+      replaced with your own identifying information. (Don't include\n+      the brackets!)  The text should be enclosed in the appropriate\n+      comment syntax for the file format. We also recommend that a\n+      file or class name and description of purpose be included on the\n+      same \"printed page\" as the copyright notice for easier\n+      identification within third-party archives.\n+\n+   Copyright [yyyy] [name of copyright owner]\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+\n+=========================================================================\n+  - W3C Schemas\n+    License: W3C Software Notice and License\n+-------------------------------------------------------------------------\n+\n+W3C\u00a8 SOFTWARE NOTICE AND LICENSE\n+Copyright \u00a9 1994-2014 World Wide Web Consortium, (Massachusetts Institute of\n+Technology, Institut National de Recherche en Informatique et en Automatique,\n+Keio University). All Rights Reserved. http://www.w3.org/Consortium/Legal/\n+\n+This W3C work (including software, documents, or other related items) is\n+being provided by the copyright holders under the following license. By\n+obtaining, using and/or copying this work, you (the licensee) agree that you\n+have read, understood, and will comply with the following terms and\n+conditions:\n+\n+Permission to use, copy, modify, and distribute this software and its\n+documentation, with or without modification,  for any purpose and without\n+fee or royalty is hereby granted, provided that you include the following on\n+ALL copies of the software and documentation or portions thereof, including\n+modifications, that you make:\n+\n+   1. The full text of this NOTICE in a location viewable to users of the\n+         redistributed or derivative work.\n+   2. Any pre-existing intellectual property disclaimers, notices, or terms\n+         and conditions. If none exist, a short notice of the following form\n+         (hypertext is preferred, text is permitted) should be used within\n+         the body of any redistributed or derivative code: \"Copyright \u00a9\n+         [$date-of-software] World Wide Web Consortium, (Massachusetts Institute\n+         of Technology, Institut National de Recherche en Informatique et en\n+         Automatique, Keio University). All Rights Reserved.\n+         http://www.w3.org/Consortium/Legal/\"\n+   3. Notice of any changes or modifications to the W3C files, including the\n+         date changes were made. (We recommend you provide URIs to the location\n+         from which the code is derived.)\n+\n+THIS SOFTWARE AND DOCUMENTATION IS PROVIDED \"AS IS,\" AND COPYRIGHT HOLDERS MAKE\n+NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\n+TO, WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT\n+THE USE OF THE SOFTWARE OR DOCUMENTATION WILL NOT INFRINGE ANY THIRD PARTY PATENTS,\n+COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.\n+\n+COPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR\n+CONSEQUENTIAL DAMAGES ARISING OUT OF ANY USE OF THE SOFTWARE OR DOCUMENTATION.\n+\n+The name and trademarks of copyright holders may NOT be used in advertising or\n+publicity pertaining to the software without specific, written prior permission.\n+Title to copyright in this software and any associated documentation will at all\n+times remain with copyright holders.\n+\n+\n+=========================================================================\n+  - HSQLDB (http://hsqldb.org/) org.hsqldb:hsqldb:jar:224\n+    License: HSQLDB License  (http://hsqldb.org/web/hsqlLicense.html)\n+-------------------------------------------------------------------------\n+\n+For work developed by the HSQL Development Group:\n+\n+Copyright (c) 2001-2014, The HSQL Development Group\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are met:\n+\n+Redistributions of source code must retain the above copyright notice, this\n+list of conditions and the following disclaimer.\n+\n+Redistributions in binary form must reproduce the above copyright notice,\n+this list of conditions and the following disclaimer in the documentation\n+and/or other materials provided with the distribution.\n+\n+Neither the name of the HSQL Development Group nor the names of its\n+contributors may be used to endorse or promote products derived from this\n+software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ARE DISCLAIMED. IN NO EVENT SHALL HSQL DEVELOPMENT GROUP, HSQLDB.ORG,\n+OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n+PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+\n+For work originally developed by the Hypersonic SQL Group:\n+\n+Copyright (c) 1995-2000 by the Hypersonic SQL Group.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are met:\n+\n+Redistributions of source code must retain the above copyright notice, this\n+list of conditions and the following disclaimer.\n+\n+Redistributions in binary form must reproduce the above copyright notice,\n+this list of conditions and the following disclaimer in the documentation\n+and/or other materials provided with the distribution.\n+\n+Neither the name of the Hypersonic SQL Group nor the names of its\n+contributors may be used to endorse or promote products derived from this\n+software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ARE DISCLAIMED. IN NO EVENT SHALL THE HYPERSONIC SQL GROUP,\n+OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n+PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+This software consists of voluntary contributions made by many individuals on behalf of the\n+Hypersonic SQL Group.\n+\n+=========================================================================\n+  - Serp (http://serp.sourceforge.net) net.sourceforge.serp:serp:jar:1.13.1\n+    License: BSD  (LICENSE.txt)\n+-------------------------------------------------------------------------\n+\n+Copyright (c) 2002, A. Abram White\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are met:\n+\n+* Redistributions of source code must retain the above copyright notice, this\n+  list of conditions and the following disclaimer.\n+* Redistributions in binary form must reproduce the above copyright notice,\n+  this list of conditions and the following disclaimer in the documentation\n+  and/or other materials provided with the distribution.\n+* Neither the name of 'serp' nor the names of its contributors may\n+  be used to endorse or promote products derived from this software without\n+  specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+\n+=========================================================================\n+  - WSDL4J (http://sf.net/projects/wsdl4j) wsdl4j:wsdl4j:jar:1.6.2\n+    License: CPL  (http://www.opensource.org/licenses/cpl1.0.txt)\n+-------------------------------------------------------------------------\n+\n+Common Public License Version 1.0\n+\n+THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS COMMON PUBLIC\n+LICENSE (\"AGREEMENT\"). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM\n+CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.\n+\n+1. DEFINITIONS\n+\n+\"Contribution\" means:\n+\n+a) in the case of the initial Contributor, the initial code and\n+documentation distributed under this Agreement, and\n+\n+b) in the case of each subsequent Contributor:\n+\n+i) changes to the Program, and\n+\n+ii) additions to the Program;\n+\n+where such changes and/or additions to the Program originate from and are\n+distributed by that particular Contributor. A Contribution 'originates' from a\n+Contributor if it was added to the Program by such Contributor itself or anyone\n+acting on such Contributor's behalf. Contributions do not include additions to\n+the Program which: (i) are separate modules of software distributed in\n+conjunction with the Program under their own license agreement, and (ii) are not\n+derivative works of the Program.\n+\n+\"Contributor\" means any person or entity that distributes the Program.\n+\n+\"Licensed Patents \" mean patent claims licensable by a Contributor which are\n+necessarily infringed by the use or sale of its Contribution alone or when\n+combined with the Program.\n+\n+\"Program\" means the Contributions distributed in accordance with this Agreement.\n+\n+\"Recipient\" means anyone who receives the Program under this Agreement,\n+including all Contributors.\n+\n+2. GRANT OF RIGHTS\n+\n+a) Subject to the terms of this Agreement, each Contributor hereby grants\n+Recipient a non-exclusive, worldwide, royalty-free copyright license to\n+reproduce, prepare derivative works of, publicly display, publicly perform,\n+distribute and sublicense the Contribution of such Contributor, if any, and such\n+derivative works, in source code and object code form.\n+\n+b) Subject to the terms of this Agreement, each Contributor hereby grants\n+Recipient a non-exclusive, worldwide, royalty-free patent license under Licensed\n+Patents to make, use, sell, offer to sell, import and otherwise transfer the\n+Contribution of such Contributor, if any, in source code and object code form.\n+This patent license shall apply to the combination of the Contribution and the\n+Program if, at the time the Contribution is added by the Contributor, such\n+addition of the Contribution causes such combination to be covered by the\n+Licensed Patents. The patent license shall not apply to any other combinations\n+which include the Contribution. No hardware per se is licensed hereunder.\n+\n+c) Recipient understands that although each Contributor grants the licenses\n+to its Contributions set forth herein, no assurances are provided by any\n+Contributor that the Program does not infringe the patent or other intellectual\n+property rights of any other entity. Each Contributor disclaims any liability to\n+Recipient for claims brought by any other entity based on infringement of\n+intellectual property rights or otherwise. As a condition to exercising the\n+rights and licenses granted hereunder, each Recipient hereby assumes sole\n+responsibility to secure any other intellectual property rights needed, if any.\n+For example, if a third party patent license is required to allow Recipient to\n+distribute the Program, it is Recipient's responsibility to acquire that license\n+before distributing the Program.\n+\n+d) Each Contributor represents that to its knowledge it has sufficient\n+copyright rights in its Contribution, if any, to grant the copyright license set\n+forth in this Agreement.\n+\n+3. REQUIREMENTS\n+\n+A Contributor may choose to distribute the Program in object code form under its\n+own license agreement, provided that:\n+\n+a) it complies with the terms and conditions of this Agreement; and\n+\n+b) its license agreement:\n+\n+i) effectively disclaims on behalf of all Contributors all warranties and\n+conditions, express and implied, including warranties or conditions of title and\n+non-infringement, and implied warranties or conditions of merchantability and\n+fitness for a particular purpose;\n+\n+ii) effectively excludes on behalf of all Contributors all liability for\n+damages, including direct, indirect, special, incidental and consequential\n+damages, such as lost profits;\n+\n+iii) states that any provisions which differ from this Agreement are offered\n+by that Contributor alone and not by any other party; and\n+\n+iv) states that source code for the Program is available from such\n+Contributor, and informs licensees how to obtain it in a reasonable manner on or\n+through a medium customarily used for software exchange.\n+\n+When the Program is made available in source code form:\n+\n+a) it must be made available under this Agreement; and\n+\n+b) a copy of this Agreement must be included with each copy of the Program.\n+\n+Contributors may not remove or alter any copyright notices contained within the\n+Program.\n+\n+Each Contributor must identify itself as the originator of its Contribution, if\n+any, in a manner that reasonably allows subsequent Recipients to identify the\n+originator of the Contribution.\n+\n+4. COMMERCIAL DISTRIBUTION\n+\n+Commercial distributors of software may accept certain responsibilities with\n+respect to end users, business partners and the like. While this license is\n+intended to facilitate the commercial use of the Program, the Contributor who\n+includes the Program in a commercial product offering should do so in a manner\n+which does not create potential liability for other Contributors. Therefore, if\n+a Contributor includes the Program in a commercial product offering, such\n+Contributor (\"Commercial Contributor\") hereby agrees to defend and indemnify\n+every other Contributor (\"Indemnified Contributor\") against any losses, damages\n+and costs (collectively \"Losses\") arising from claims, lawsuits and other legal\n+actions brought by a third party against the Indemnified Contributor to the\n+extent caused by the acts or omissions of such Commercial Contributor in\n+connection with its distribution of the Program in a commercial product\n+offering. The obligations in this section do not apply to any claims or Losses\n+relating to any actual or alleged intellectual property infringement. In order\n+to qualify, an Indemnified Contributor must: a) promptly notify the Commercial\n+Contributor in writing of such claim, and b) allow the Commercial Contributor to\n+control, and cooperate with the Commercial Contributor in, the defense and any\n+related settlement negotiations. The Indemnified Contributor may participate in\n+any such claim at its own expense.\n+\n+For example, a Contributor might include the Program in a commercial product\n+offering, Product X. That Contributor is then a Commercial Contributor. If that\n+Commercial Contributor then makes performance claims, or offers warranties\n+related to Product X, those performance claims and warranties are such\n+Commercial Contributor's responsibility alone. Under this section, the\n+Commercial Contributor would have to defend claims against the other\n+Contributors related to those performance claims and warranties, and if a court\n+requires any other Contributor to pay any damages as a result, the Commercial\n+Contributor must pay those damages.\n+\n+5. NO WARRANTY\n+\n+EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS PROVIDED ON AN\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR\n+IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE,\n+NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each\n+Recipient is solely responsible for determining the appropriateness of using and\n+distributing the Program and assumes all risks associated with its exercise of\n+rights under this Agreement, including but not limited to the risks and costs of\n+program errors, compliance with applicable laws, damage to or loss of data,\n+programs or equipment, and unavailability or interruption of operations.\n+\n+6. DISCLAIMER OF LIABILITY\n+\n+EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT NOR ANY\n+CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST\n+PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n+STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n+OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS\n+GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n+\n+7. GENERAL\n+\n+If any provision of this Agreement is invalid or unenforceable under applicable\n+law, it shall not affect the validity or enforceability of the remainder of the\n+terms of this Agreement, and without further action by the parties hereto, such\n+provision shall be reformed to the minimum extent necessary to make such\n+provision valid and enforceable.\n+\n+If Recipient institutes patent litigation against a Contributor with respect to\n+a patent applicable to software (including a cross-claim or counterclaim in a\n+lawsuit), then any patent licenses granted by that Contributor to such Recipient\n+under this Agreement shall terminate as of the date such litigation is filed. In\n+addition, if Recipient institutes patent litigation against any entity\n+(including a cross-claim or counterclaim in a lawsuit) alleging that the Program\n+itself (excluding combinations of the Program with other software or hardware)\n+infringes such Recipient's patent(s), then such Recipient's rights granted under\n+Section 2(b) shall terminate as of the date such litigation is filed.\n+\n+All Recipient's rights under this Agreement shall terminate if it fails to\n+comply with any of the material terms or conditions of this Agreement and does\n+not cure such failure in a reasonable period of time after becoming aware of\n+such noncompliance. If all Recipient's rights under this Agreement terminate,\n+Recipient agrees to cease use and distribution of the Program as soon as\n+reasonably practicable. However, Recipient's obligations under this Agreement\n+and any licenses granted by Recipient relating to the Program shall continue and\n+survive.\n+\n+Everyone is permitted to copy and distribute copies of this Agreement, but in\n+order to avoid inconsistency the Agreement is copyrighted and may only be\n+modified in the following manner. The Agreement Steward reserves the right to\n+publish new versions (including revisions) of this Agreement from time to time.\n+No one other than the Agreement Steward has the right to modify this Agreement.\n+IBM is the initial Agreement Steward. IBM may assign the responsibility to serve\n+as the Agreement Steward to a suitable separate entity. Each new version of the\n+Agreement will be given a distinguishing version number. The Program (including\n+Contributions) may always be distributed subject to the version of the Agreement\n+under which it was received. In addition, after a new version of the Agreement\n+is published, Contributor may elect to distribute the Program (including its\n+Contributions) under the new version. Except as expressly stated in Sections\n+2(a) and 2(b) above, Recipient receives no rights or licenses to the\n+intellectual property of any Contributor under this Agreement, whether\n+expressly, by implication, estoppel or otherwise. All rights in the Program not\n+expressly granted under this Agreement are reserved.\n+\n+This Agreement is governed by the laws of the State of New York and the\n+intellectual property laws of the United States of America. No party to this\n+Agreement will bring a legal action under this Agreement more than one year\n+after the cause of action arose. Each party waives its rights to a jury trial in\n+any resulting litigation.\n+\n+\n+=========================================================================\n+  - HOWL logger (http://forge.objectweb.org/projects/howl/) org.objectweb.howl:howl:jar:1.0.1-1\n+    License: BSD\n+-------------------------------------------------------------------------\n+\n+Copyright (c) 2004, Bull S.A.\n+\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions\n+are met:\n+\n+  * Redistributions of source code must retain the above copyright\n+    notice, this list of conditions and the following disclaimer.\n+\n+  * Redistributions in binary form must reproduce the above copyright\n+    notice, this list of conditions and the following disclaimer in the\n+    documentation and/or other materials provided with the distribution.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n+TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n+CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n+PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n+PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n+NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+\n+=========================================================================\n+  - SLF4J API Module (http://www.slf4j.org) org.slf4j:slf4j-api:jar:1.6.1\n+  - SLF4J LOG4J-12 Binding (http://www.slf4j.org) org.slf4j:slf4j-log4j12:jar:1.6.1\n+    License: MIT License  (http://www.opensource.org/licenses/mit-license.php)\n+-------------------------------------------------------------------------\n+\n+Copyright (c) 2004-2014 QOS.ch\n+ All rights reserved.\n+\n+ Permission is hereby granted, free  of charge, to any person obtaining\n+ a  copy  of this  software  and  associated  documentation files  (the\n+ \"Software\"), to  deal in  the Software without  restriction, including\n+ without limitation  the rights to  use, copy, modify,  merge, publish,\n+ distribute,  sublicense, and/or sell  copies of  the Software,  and to\n+ permit persons to whom the Software  is furnished to do so, subject to\n+ the following conditions:\n+\n+ The  above  copyright  notice  and  this permission  notice  shall  be\n+ included in all copies or substantial portions of the Software.\n+\n+ THE  SOFTWARE IS  PROVIDED  \"AS  IS\", WITHOUT  WARRANTY  OF ANY  KIND,\n+ EXPRESS OR  IMPLIED, INCLUDING  BUT NOT LIMITED  TO THE  WARRANTIES OF\n+ MERCHANTABILITY,    FITNESS    FOR    A   PARTICULAR    PURPOSE    AND\n+ NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n+ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n+ OF CONTRACT, TORT OR OTHERWISE,  ARISING FROM, OUT OF OR IN CONNECTION\n+ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+\n+\n+=========================================================================\n+  - Apache XBean :: ASM shaded (repackaged) org.apache.xbean:xbean-asm-shaded:bundle:3.8\n+    License: BSD (http://asm.ow2.org/license.html)\n+-------------------------------------------------------------------------\n+\n+Copyright (c) 2000-2014 INRIA, France Telecom\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions\n+are met:\n+\n+1. Redistributions of source code must retain the above copyright\n+   notice, this list of conditions and the following disclaimer.\n+\n+2. Redistributions in binary form must reproduce the above copyright\n+   notice, this list of conditions and the following disclaimer in the\n+   documentation and/or other materials provided with the distribution.\n+\n+3. Neither the name of the copyright holders nor the names of its\n+   contributors may be used to endorse or promote products derived from\n+   this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n+LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n+THE POSSIBILITY OF SUCH DAMAGE.\n+\n+\n+=========================================================================\n+  - JSTL, JSP, Java EE Schemas\n+    License: CDDL\n+-------------------------------------------------------------------------\n+\n+COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0\n+\n+1. Definitions.\n+\n+1.1. \"Contributor\" means each individual or entity that\n+creates or contributes to the creation of Modifications.\n+\n+1.2. \"Contributor Version\" means the combination of the\n+Original Software, prior Modifications used by a\n+Contributor (if any), and the Modifications made by that\n+particular Contributor.\n+\n+1.3. \"Covered Software\" means (a) the Original Software, or\n+(b) Modifications, or (c) the combination of files\n+containing Original Software with files containing\n+Modifications, in each case including portions thereof.\n+\n+1.4. \"Executable\" means the Covered Software in any form\n+other than Source Code.\n+\n+1.5. \"Initial Developer\" means the individual or entity\n+that first makes Original Software available under this\n+License.\n+\n+1.6. \"Larger Work\" means a work which combines Covered\n+Software or portions thereof with code not governed by the\n+terms of this License.\n+\n+1.7. \"License\" means this document.\n+\n+1.8. \"Licensable\" means having the right to grant, to the\n+maximum extent possible, whether at the time of the initial\n+grant or subsequently acquired, any and all of the rights\n+conveyed herein.\n+\n+1.9. \"Modifications\" means the Source Code and Executable\n+form of any of the following:\n+\n+A. Any file that results from an addition to,\n+deletion from or modification of the contents of a\n+file containing Original Software or previous\n+Modifications;\n+\n+B. Any new file that contains any part of the\n+Original Software or previous Modification; or\n+\n+C. Any new file that is contributed or otherwise made\n+available under the terms of this License.\n+\n+1.10. \"Original Software\" means the Source Code and\n+Executable form of computer software code that is\n+originally released under this License.\n+\n+1.11. \"Patent Claims\" means any patent claim(s), now owned\n+or hereafter acquired, including without limitation,\n+method, process, and apparatus claims, in any patent\n+Licensable by grantor.\n+\n+1.12. \"Source Code\" means (a) the common form of computer\n+software code in which modifications are made and (b)\n+associated documentation included in or with such code.\n+\n+1.13. \"You\" (or \"Your\") means an individual or a legal\n+entity exercising rights under, and complying with all of\n+the terms of, this License. For legal entities, \"You\"\n+includes any entity which controls, is controlled by, or is\n+under common control with You. For purposes of this\n+definition, \"control\" means (a) the power, direct or\n+indirect, to cause the direction or management of such\n+entity, whether by contract or otherwise, or (b) ownership\n+of more than fifty percent (50%) of the outstanding shares\n+or beneficial ownership of such entity.\n+\n+2. License Grants.\n+\n+2.1. The Initial Developer Grant.\n+\n+Conditioned upon Your compliance with Section 3.1 below and\n+subject to third party intellectual property claims, the\n+Initial Developer hereby grants You a world-wide,\n+royalty-free, non-exclusive license:\n+\n+(a) under intellectual property rights (other than\n+patent or trademark) Licensable by Initial Developer,\n+to use, reproduce, modify, display, perform,\n+sublicense and distribute the Original Software (or\n+portions thereof), with or without Modifications,\n+and/or as part of a Larger Work; and\n+\n+(b) under Patent Claims infringed by the making,\n+using or selling of Original Software, to make, have\n+made, use, practice, sell, and offer for sale, and/or\n+otherwise dispose of the Original Software (or\n+portions thereof).\n+\n+(c) The licenses granted in Sections 2.1(a) and (b)\n+are effective on the date Initial Developer first\n+distributes or otherwise makes the Original Software\n+available to a third party under the terms of this\n+License.\n+\n+(d) Notwithstanding Section 2.1(b) above, no patent\n+license is granted: (1) for code that You delete from\n+the Original Software, or (2) for infringements\n+caused by: (i) the modification of the Original\n+Software, or (ii) the combination of the Original\n+Software with other software or devices.\n+\n+2.2. Contributor Grant.\n+\n+Conditioned upon Your compliance with Section 3.1 below and\n+subject to third party intellectual property claims, each\n+Contributor hereby grants You a world-wide, royalty-free,\n+non-exclusive license:\n+\n+(a) under intellectual property rights (other than\n+patent or trademark) Licensable by Contributor to\n+use, reproduce, modify, display, perform, sublicense\n+and distribute the Modifications created by such\n+Contributor (or portions thereof), either on an\n+unmodified basis, with other Modifications, as\n+Covered Software and/or as part of a Larger Work; and\n+\n+(b) under Patent Claims infringed by the making,\n+using, or selling of Modifications made by that\n+Contributor either alone and/or in combination with\n+its Contributor Version (or portions of such\n+combination), to make, use, sell, offer for sale,\n+have made, and/or otherwise dispose of: (1)\n+Modifications made by that Contributor (or portions\n+thereof); and (2) the combination of Modifications\n+made by that Contributor with its Contributor Version\n+(or portions of such combination).\n+\n+(c) The licenses granted in Sections 2.2(a) and\n+2.2(b) are effective on the date Contributor first\n+distributes or otherwise makes the Modifications\n+available to a third party.\n+\n+(d) Notwithstanding Section 2.2(b) above, no patent\n+license is granted: (1) for any code that Contributor\n+has deleted from the Contributor Version; (2) for\n+infringements caused by: (i) third party\n+modifications of Contributor Version, or (ii) the\n+combination of Modifications made by that Contributor\n+with other software (except as part of the\n+Contributor Version) or other devices; or (3) under\n+Patent Claims infringed by Covered Software in the\n+absence of Modifications made by that Contributor.\n+\n+3. Distribution Obligations.\n+\n+3.1. Availability of Source Code.\n+\n+Any Covered Software that You distribute or otherwise make\n+available in Executable form must also be made available in\n+Source Code form and that Source Code form must be\n+distributed only under the terms of this License. You must\n+include a copy of this License with every copy of the\n+Source Code form of the Covered Software You distribute or\n+otherwise make available. You must inform recipients of any\n+such Covered Software in Executable form as to how they can\n+obtain such Covered Software in Source Code form in a\n+reasonable manner on or through a medium customarily used\n+for software exchange.\n+\n+3.2. Modifications.\n+\n+The Modifications that You create or to which You\n+contribute are governed by the terms of this License. You\n+represent that You believe Your Modifications are Your\n+original creation(s) and/or You have sufficient rights to\n+grant the rights conveyed by this License.\n+\n+3.3. Required Notices.\n+\n+You must include a notice in each of Your Modifications\n+that identifies You as the Contributor of the Modification.\n+You may not remove or alter any copyright, patent or\n+trademark notices contained within the Covered Software, or\n+any notices of licensing or any descriptive text giving\n+attribution to any Contributor or the Initial Developer.\n+\n+3.4. Application of Additional Terms.\n+\n+You may not offer or impose any terms on any Covered\n+Software in Source Code form that alters or restricts the\n+applicable version of this License or the recipients'\n+rights hereunder. You may choose to offer, and to charge a\n+fee for, warranty, support, indemnity or liability\n+obligations to one or more recipients of Covered Software.\n+However, you may do so only on Your own behalf, and not on\n+behalf of the Initial Developer or any Contributor. You\n+must make it absolutely clear that any such warranty,\n+support, indemnity or liability obligation is offered by\n+You alone, and You hereby agree to indemnify the Initial\n+Developer and every Contributor for any liability incurred\n+by the Initial Developer or such Contributor as a result of\n+warranty, support, indemnity or liability terms You offer.\n+\n+3.5. Distribution of Executable Versions.\n+\n+You may distribute the Executable form of the Covered\n+Software under the terms of this License or under the terms\n+of a license of Your choice, which may contain terms\n+different from this License, provided that You are in\n+compliance with the terms of this License and that the\n+license for the Executable form does not attempt to limit\n+or alter the recipient's rights in the Source Code form\n+from the rights set forth in this License. If You\n+distribute the Covered Software in Executable form under a\n+different license, You must make it absolutely clear that\n+any terms which differ from this License are offered by You\n+alone, not by the Initial Developer or Contributor. You\n+hereby agree to indemnify the Initial Developer and every\n+Contributor for any liability incurred by the Initial\n+Developer or such Contributor as a result of any such terms\n+You offer.\n+\n+3.6. Larger Works.\n+\n+You may create a Larger Work by combining Covered Software\n+with other code not governed by the terms of this License\n+and distribute the Larger Work as a single product. In such\n+a case, You must make sure the requirements of this License\n+are fulfilled for the Covered Software.\n+\n+4. Versions of the License.\n+\n+4.1. New Versions.\n+\n+Sun Microsystems, Inc. is the initial license steward and\n+may publish revised and/or new versions of this License\n+from time to time. Each version will be given a\n+distinguishing version number. Except as provided in\n+Section 4.3, no one other than the license steward has the\n+right to modify this License.\n+\n+4.2. Effect of New Versions.\n+\n+You may always continue to use, distribute or otherwise\n+make the Covered Software available under the terms of the\n+version of the License under which You originally received\n+the Covered Software. If the Initial Developer includes a\n+notice in the Original Software prohibiting it from being\n+distributed or otherwise made available under any\n+subsequent version of the License, You must distribute and\n+make the Covered Software available under the terms of the\n+version of the License under which You originally received\n+the Covered Software. Otherwise, You may also choose to\n+use, distribute or otherwise make the Covered Software\n+available under the terms of any subsequent version of the\n+License published by the license steward.\n+\n+4.3. Modified Versions.\n+\n+When You are an Initial Developer and You want to create a\n+new license for Your Original Software, You may create and\n+use a modified version of this License if You: (a) rename\n+the license and remove any references to the name of the\n+license steward (except to note that the license differs\n+from this License); and (b) otherwise make it clear that\n+the license contains terms which differ from this License.\n+\n+5. DISCLAIMER OF WARRANTY.\n+\n+COVERED SOFTWARE IS PROVIDED UNDER THIS LICENSE ON AN \"AS IS\"\n+BASIS, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,\n+INCLUDING, WITHOUT LIMITATION, WARRANTIES THAT THE COVERED\n+SOFTWARE IS FREE OF DEFECTS, MERCHANTABLE, FIT FOR A PARTICULAR\n+PURPOSE OR NON-INFRINGING. THE ENTIRE RISK AS TO THE QUALITY AND\n+PERFORMANCE OF THE COVERED SOFTWARE IS WITH YOU. SHOULD ANY\n+COVERED SOFTWARE PROVE DEFECTIVE IN ANY RESPECT, YOU (NOT THE\n+INITIAL DEVELOPER OR ANY OTHER CONTRIBUTOR) ASSUME THE COST OF\n+ANY NECESSARY SERVICING, REPAIR OR CORRECTION. THIS DISCLAIMER OF\n+WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS LICENSE. NO USE OF\n+ANY COVERED SOFTWARE IS AUTHORIZED HEREUNDER EXCEPT UNDER THIS\n+DISCLAIMER.\n+\n+6. TERMINATION.\n+\n+6.1. This License and the rights granted hereunder will\n+terminate automatically if You fail to comply with terms\n+herein and fail to cure such breach within 30 days of\n+becoming aware of the breach. Provisions which, by their\n+nature, must remain in effect beyond the termination of\n+this License shall survive.\n+\n+6.2. If You assert a patent infringement claim (excluding\n+declaratory judgment actions) against Initial Developer or\n+a Contributor (the Initial Developer or Contributor against\n+whom You assert such claim is referred to as \"Participant\")\n+alleging that the Participant Software (meaning the\n+Contributor Version where the Participant is a Contributor\n+or the Original Software where the Participant is the\n+Initial Developer) directly or indirectly infringes any\n+patent, then any and all rights granted directly or\n+indirectly to You by such Participant, the Initial\n+Developer (if the Initial Developer is not the Participant)\n+and all Contributors under Sections 2.1 and/or 2.2 of this\n+License shall, upon 60 days notice from Participant\n+terminate prospectively and automatically at the expiration\n+of such 60 day notice period, unless if within such 60 day\n+period You withdraw Your claim with respect to the\n+Participant Software against such Participant either\n+unilaterally or pursuant to a written agreement with\n+Participant.\n+\n+6.3. In the event of termination under Sections 6.1 or 6.2\n+above, all end user licenses that have been validly granted\n+by You or any distributor hereunder prior to termination\n+(excluding licenses granted to You by any distributor)\n+shall survive termination.\n+\n+7. LIMITATION OF LIABILITY.\n+\n+UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL THEORY, WHETHER TORT\n+(INCLUDING NEGLIGENCE), CONTRACT, OR OTHERWISE, SHALL YOU, THE\n+INITIAL DEVELOPER, ANY OTHER CONTRIBUTOR, OR ANY DISTRIBUTOR OF\n+COVERED SOFTWARE, OR ANY SUPPLIER OF ANY OF SUCH PARTIES, BE\n+LIABLE TO ANY PERSON FOR ANY INDIRECT, SPECIAL, INCIDENTAL, OR\n+CONSEQUENTIAL DAMAGES OF ANY CHARACTER INCLUDING, WITHOUT\n+LIMITATION, DAMAGES FOR LOST PROFITS, LOSS OF GOODWILL, WORK\n+STOPPAGE, COMPUTER FAILURE OR MALFUNCTION, OR ANY AND ALL OTHER\n+COMMERCIAL DAMAGES OR LOSSES, EVEN IF SUCH PARTY SHALL HAVE BEEN\n+INFORMED OF THE POSSIBILITY OF SUCH DAMAGES. THIS LIMITATION OF\n+LIABILITY SHALL NOT APPLY TO LIABILITY FOR DEATH OR PERSONAL\n+INJURY RESULTING FROM SUCH PARTY'S NEGLIGENCE TO THE EXTENT\n+APPLICABLE LAW PROHIBITS SUCH LIMITATION. SOME JURISDICTIONS DO\n+NOT ALLOW THE EXCLUSION OR LIMITATION OF INCIDENTAL OR\n+CONSEQUENTIAL DAMAGES, SO THIS EXCLUSION AND LIMITATION MAY NOT\n+APPLY TO YOU.\n+\n+8. U.S. GOVERNMENT END USERS.\n+\n+The Covered Software is a \"commercial item,\" as that term is\n+defined in 48 C.F.R. 2.101 (Oct. 1995), consisting of \"commercial\n+computer software\" (as that term is defined at 48 C.F.R. ?\n+252.227-7014(a)(1)) and \"commercial computer software\n+documentation\" as such terms are used in 48 C.F.R. 12.212 (Sept.\n+1995). Consistent with 48 C.F.R. 12.212 and 48 C.F.R. 227.7202-1\n+through 227.7202-4 (June 1995), all U.S. Government End Users\n+acquire Covered Software with only those rights set forth herein.\n+This U.S. Government Rights clause is in lieu of, and supersedes,\n+any other FAR, DFAR, or other clause or provision that addresses\n+Government rights in computer software under this License.\n+\n+9. MISCELLANEOUS.\n+\n+This License represents the complete agreement concerning subject\n+matter hereof. If any provision of this License is held to be\n+unenforceable, such provision shall be reformed only to the\n+extent necessary to make it enforceable. This License shall be\n+governed by the law of the jurisdiction specified in a notice\n+contained within the Original Software (except to the extent\n+applicable law, if any, provides otherwise), excluding such\n+jurisdiction's conflict-of-law provisions. Any litigation\n+relating to this License shall be subject to the jurisdiction of\n+the courts located in the jurisdiction and venue specified in a\n+notice contained within the Original Software, with the losing\n+party responsible for costs, including, without limitation, court\n+costs and reasonable attorneys' fees and expenses. The\n+application of the United Nations Convention on Contracts for the\n+International Sale of Goods is expressly excluded. Any law or\n+regulation which provides that the language of a contract shall\n+be construed against the drafter shall not apply to this License.\n+You agree that You alone are responsible for compliance with the\n+United States export administration regulations (and the export\n+control laws and regulation of any other countries) when You use,\n+distribute or otherwise make available any Covered Software.\n+\n+10. RESPONSIBILITY FOR CLAIMS.\n+\n+As between Initial Developer and the Contributors, each party is\n+responsible for claims and damages arising, directly or\n+indirectly, out of its utilization of rights under this License\n+and You agree to work with Initial Developer and Contributors to\n+distribute such responsibility on an equitable basis. Nothing\n+herein is intended or shall be deemed to constitute any admission\n+of liability.\n+============================================================\n+el-api, istack\n+\n+The GNU General Public License (GPL) Version 2, June 1991\n+\n+Copyright (C) 1989, 1991 Free Software Foundation, Inc.\n+59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n+\n+Everyone is permitted to copy and distribute verbatim copies\n+of this license document, but changing it is not allowed.\n+\n+Preamble\n+\n+The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Library General Public License instead.) You can apply it to your programs, too.\n+\n+When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things.\n+\n+To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it.\n+\n+For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.\n+\n+We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software.\n+\n+Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations.\n+\n+Finally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all.\n+\n+The precise terms and conditions for copying, distribution and modification follow.\n+\n+TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n+\n+0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) Each licensee is addressed as \"you\".\n+\n+Activities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does.\n+\n+1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program.\n+\n+You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.\n+\n+2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:\n+\n+    a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change.\n+\n+    b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License.\n+\n+    c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.)\n+\n+These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.\n+\n+Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program.\n+\n+In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.\n+\n+3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following:\n+\n+    a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,\n+\n+    b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,\n+\n+    c) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.)\n+\n+The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.\n+\n+If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code.\n+\n+4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\n+\n+5. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it.\n+\n+6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License.\n+\n+7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program.\n+\n+If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances.\n+\n+It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.\n+\n+This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.\n+\n+8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.\n+\n+9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n+\n+Each version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation.\n+\n+10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.\n+\n+NO WARRANTY\n+\n+11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n+\n+12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n+\n+END OF TERMS AND CONDITIONS\n+\n+How to Apply These Terms to Your New Programs\n+\n+If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.\n+\n+To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.\n+\n+    One line to give the program's name and a brief idea of what it does.\n+    Copyright (C) <year> <name of author>\n+\n+    This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.\n+\n+    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+    You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n+\n+Also add information on how to contact you by electronic and paper mail.\n+\n+If the program is interactive, make it output a short notice like this when it starts in an interactive mode:\n+\n+    Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details.\n+\n+The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, the commands you use may be called something other than `show w' and `show c'; they could even be mouse-clicks or menu items--whatever suits your program.\n+\n+You should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. Here is a sample; alter the names:\n+\n+    Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.\n+\n+    signature of Ty Coon, 1 April 1989\n+    Ty Coon, President of Vice\n+\n+This General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Library General Public License instead of this License.\n+\n+\"CLASSPATH\" EXCEPTION TO THE GPL VERSION 2\n+\n+Certain source files distributed by Oracle are subject to the following clarification and special exception to the GPL Version 2, but only where Oracle has expressly included in the particular source file's header the words \"Oracle designates this particular file as subject to the \"Classpath\" exception as provided by Oracle in the License file that accompanied this code.\"\n+\n+Linking this library statically or dynamically with other modules is making a combined work based on this library.  Thus, the terms and conditions of the GNU General Public License Version 2 cover the whole combination.\n+\n+As a special exception, the copyright holders of this library give you permission to link this library with independent modules to produce an executable, regardless of the license terms of these independent modules, and to copy and distribute the resulting executable under terms of your choice, provided that you also meet, for each linked independent module, the terms and conditions of the license of that module.  An independent module is a module which is not derived from or based on this library.  If you modify this library, you may extend this exception to your version of the library, but you are not obligated to do so.  If you do not wish to do so, delete this exception statement from your version.\n+\n+",
                "raw_url": "https://github.com/apache/tomee/raw/f0c5ecc62d7deef5b879a58fdcc64f3c102f4213/utils/openejb-provisionning/src/main#legal/LICENSE",
                "sha": "b77986a23c0c2e9ef7a12ebb6d6044e67a29e9b7",
                "status": "added"
            }
        ],
        "message": "TOMEE-1787 EJBExceptionMapper can lead to NPE",
        "parent": "https://github.com/apache/tomee/commit/ba36564badd07fbce0c2ca51864774de28717be5",
        "repo": "tomee",
        "unit_tests": [
            "EJBExceptionMapperTest.java"
        ]
    },
    "tomee_f2a36c7": {
        "bug_id": "tomee_f2a36c7",
        "commit": "https://github.com/apache/tomee/commit/f2a36c73c945612716b5ac54efb648c930efd88e",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomee/blob/f2a36c73c945612716b5ac54efb648c930efd88e/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=f2a36c73c945612716b5ac54efb648c930efd88e",
                "deletions": 1,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "patch": "@@ -1438,7 +1438,9 @@ public EjbModule deploy(EjbModule ejbModule) throws OpenEJBException {\n \n             // ejb can be rest bean and only then in standalone so scan providers here too\n             // adding them to app since they should be in the app classloader\n-            addJaxRsProviders(finder, ejbModule.getAppModule().getJaxRsProviders(), Provider.class);\n+            if (ejbModule.getAppModule() != null) {\n+                addJaxRsProviders(finder, ejbModule.getAppModule().getJaxRsProviders(), Provider.class);\n+            }\n \n             return ejbModule;\n         }",
                "raw_url": "https://github.com/apache/tomee/raw/f2a36c73c945612716b5ac54efb648c930efd88e/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "sha": "c9921b87b4ad74a8f123232fef853408f2b33b53",
                "status": "modified"
            }
        ],
        "message": "avoiding NPE when scanning jaxrs @Provider\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk/openejb@1342746 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/02b7fcc446723ffa5e47910eb591963602e78c64",
        "repo": "tomee",
        "unit_tests": [
            "AnnotationDeployerTest.java"
        ]
    },
    "tomee_f9f73a4": {
        "bug_id": "tomee_f9f73a4",
        "commit": "https://github.com/apache/tomee/commit/f9f73a49bc51e56613da9e64c85b79502fcb5b2a",
        "file": [
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/tomee/blob/f9f73a49bc51e56613da9e64c85b79502fcb5b2a/container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java?ref=f9f73a49bc51e56613da9e64c85b79502fcb5b2a",
                "deletions": 9,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java",
                "patch": "@@ -373,8 +373,7 @@ private boolean isValidModuleType(final Class<?> type, final Class<?>[] moduleTy\n \n     @SuppressWarnings(\"unchecked\")\n     public void before(final Object inputTestInstance) throws Exception {\n-        // we hacked testInstance while we were not aware of it, now we can solve it\n-        testClassFinders.put(inputTestInstance, testClassFinders.remove(this));\n+        fixFakeClassFinder(inputTestInstance);\n \n         startContainer(inputTestInstance);\n \n@@ -385,12 +384,7 @@ public void before(final Object inputTestInstance) throws Exception {\n     }\n \n     public void deployApp(final Object inputTestInstance) throws Exception {\n-        // test injections\n-        ClassFinder testClassFinder = testClassFinders.remove(inputTestInstance);\n-        if (testClassFinder == null) {\n-            testClassFinders.put(inputTestInstance, testClassFinders.remove(this));\n-            testClassFinder = testClassFinders.remove(inputTestInstance);\n-        }\n+        final ClassFinder testClassFinder = fixFakeClassFinder(inputTestInstance);\n \n         final ClassLoader loader = testClass.getClassLoader();\n         AppModule appModule = new AppModule(loader, testClass.getSimpleName());\n@@ -773,6 +767,29 @@ public void deployApp(final Object inputTestInstance) throws Exception {\n         testClassFinders.put(this, testClassFinder);\n     }\n \n+    private ClassFinder fixFakeClassFinder(final Object inputTestInstance) {\n+        // test injections, we faked the instance before having it so ensuring we use the right finder\n+        ClassFinder testClassFinder = testClassFinders.get(inputTestInstance);\n+        if (testClassFinder == null) {\n+            final ApplicationComposers self = this;\n+            final ClassFinder remove = testClassFinders.remove(self);\n+            if (remove != null) {\n+                testClassFinders.put(inputTestInstance, remove);\n+                testClassFinder = remove;\n+                afterRunnables.add(new Runnable() { // reset state for next test\n+                    @Override\n+                    public void run() {\n+                        final ClassFinder classFinder = testClassFinders.remove(inputTestInstance);\n+                        if (classFinder != null) {\n+                            testClassFinders.put(self, classFinder);\n+                        }\n+                    }\n+                });\n+            }\n+        }\n+        return testClassFinder;\n+    }\n+\n     private boolean isCdi(final boolean cdi, final Class<?>[] cdiInterceptors,\n                           final Class<?>[] cdiAlternatives, final Class<?>[] cdiStereotypes,\n                           final Class<?>[] cdiDecorators) {\n@@ -1264,7 +1281,7 @@ private static void linkageErrorProtection() { // mainly for macos jre\n     public void startContainer(final Object instance) throws Exception {\n         originalProperties = (Properties) System.getProperties().clone();\n         originalLoader = Thread.currentThread().getContextClassLoader();\n-        testClassFinders.remove(this); // see constructor\n+        fixFakeClassFinder(instance);\n \n         // For the moment we just take the first @Configuration method\n         // maybe later we can add something fancy to allow multiple configurations using a qualifier",
                "raw_url": "https://github.com/apache/tomee/raw/f9f73a49bc51e56613da9e64c85b79502fcb5b2a/container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java",
                "sha": "4f54482bd36c23a553ff1d988eeaf01d78bb0aa4",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomee/blob/f9f73a49bc51e56613da9e64c85b79502fcb5b2a/container/openejb-core/src/test/java/org/apache/openejb/bval/BeanValidationTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/test/java/org/apache/openejb/bval/BeanValidationTest.java?ref=f9f73a49bc51e56613da9e64c85b79502fcb5b2a",
                "deletions": 0,
                "filename": "container/openejb-core/src/test/java/org/apache/openejb/bval/BeanValidationTest.java",
                "patch": "@@ -23,6 +23,7 @@\n import org.apache.openejb.junit.ApplicationComposer;\n import org.apache.openejb.testing.Configuration;\n import org.apache.openejb.testing.Module;\n+import org.apache.openejb.testing.SimpleLog;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n \n@@ -51,12 +52,15 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+@SimpleLog\n @RunWith(ApplicationComposer.class)\n public class BeanValidationTest {\n     @EJB\n     private PersistManager persistManager;\n+\n     @Resource\n     private Validator validator;\n+\n     @Resource\n     private ValidatorFactory validatorFactory;\n ",
                "raw_url": "https://github.com/apache/tomee/raw/f9f73a49bc51e56613da9e64c85b79502fcb5b2a/container/openejb-core/src/test/java/org/apache/openejb/bval/BeanValidationTest.java",
                "sha": "4d7136f0f63515742bdde8a2c6ced08b69400007",
                "status": "modified"
            }
        ],
        "message": "some NPE protections",
        "parent": "https://github.com/apache/tomee/commit/04294bfdeaeb2d7fa6df80dd5129fbc7bf7e2aea",
        "repo": "tomee",
        "unit_tests": [
            "ApplicationComposersTest.java"
        ]
    },
    "tomee_fc99d94": {
        "bug_id": "tomee_fc99d94",
        "commit": "https://github.com/apache/tomee/commit/fc99d9445e21fe009cd849d9d60b39e40d772649",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomee/blob/fc99d9445e21fe009cd849d9d60b39e40d772649/container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java?ref=fc99d9445e21fe009cd849d9d60b39e40d772649",
                "deletions": 1,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java",
                "patch": "@@ -1059,7 +1059,9 @@ public void after() throws Exception {\n             if (originalLoader != null) {\n                 Thread.currentThread().setContextClassLoader(originalLoader);\n             }\n-            System.setProperties(originalProperties);\n+            if (originalProperties != null) {\n+                System.setProperties(originalProperties);\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/tomee/raw/fc99d9445e21fe009cd849d9d60b39e40d772649/container/openejb-core/src/main/java/org/apache/openejb/testing/ApplicationComposers.java",
                "sha": "4b830580197b2a21c15aa7120a80536cef535bda",
                "status": "modified"
            }
        ],
        "message": "NPE protection",
        "parent": "https://github.com/apache/tomee/commit/5f26017a95c2388a1ebf62500590af72e1aca21d",
        "repo": "tomee",
        "unit_tests": [
            "ApplicationComposersTest.java"
        ]
    },
    "tomee_ff677f6": {
        "bug_id": "tomee_ff677f6",
        "commit": "https://github.com/apache/tomee/commit/ff677f61c18ee15b34be73e2d4ff38e9ab06455b",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomee/blob/ff677f61c18ee15b34be73e2d4ff38e9ab06455b/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/tomee/contents/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java?ref=ff677f61c18ee15b34be73e2d4ff38e9ab06455b",
                "deletions": 5,
                "filename": "container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java",
                "patch": "@@ -812,11 +812,13 @@ private void discardInstance(final Object primaryKey, final Instance instance) {\n             i = instance;\n         }\n \n-        if (!containsExtendedPersistenceContext(instance.beanContext)) {\n-            cache.remove(primaryKey);\n-        }\n-        if (i != null && null != i.creationalContext) {\n-            i.creationalContext.release();\n+        if (i != null) {\n+            if (!containsExtendedPersistenceContext(i.beanContext)) {\n+                cache.remove(primaryKey);\n+            }\n+            if (null != i.creationalContext) {\n+                i.creationalContext.release();\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/tomee/raw/ff677f61c18ee15b34be73e2d4ff38e9ab06455b/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java",
                "sha": "b3494cb3f350322f6bbee557ace268e5e047d38e",
                "status": "modified"
            }
        ],
        "message": "avoid npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomee/tomee/trunk@1568435 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomee/commit/1783fd86076a80049c2f3b09377169d2c553493a",
        "repo": "tomee",
        "unit_tests": [
            "StatefulContainerTest.java"
        ]
    }
}