[
    {
        "repo": "avro",
        "message": "AVRO-2627: Unify NullPointerException Management",
        "commit": "https://github.com/apache/avro/commit/68796d30d8898cf1cd9e806623602da519cd4058",
        "parent": "https://github.com/apache/avro/commit/f8afef1f98b1f27deb9e73ef804ed74ba2d20bbb",
        "bug_id": "avro_1",
        "file": [
            {
                "sha": "b9e92381aa6937dfb6576162fc9e43871062d3e6",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/LogicalTypes.java",
                "blob_url": "https://github.com/apache/avro/blob/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/LogicalTypes.java",
                "raw_url": "https://github.com/apache/avro/raw/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/LogicalTypes.java",
                "status": "modified",
                "changes": 18,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/LogicalTypes.java?ref=68796d30d8898cf1cd9e806623602da519cd4058",
                "patch": "@@ -19,6 +19,7 @@\n package org.apache.avro;\n \n import java.util.Map;\n+import java.util.Objects;\n import java.util.concurrent.ConcurrentHashMap;\n \n import org.slf4j.Logger;\n@@ -34,13 +35,18 @@\n \n   private static final Map<String, LogicalTypeFactory> REGISTERED_TYPES = new ConcurrentHashMap<>();\n \n+  /**\n+   * Register a logical type.\n+   *\n+   * @param logicalTypeName The logical type name\n+   * @param factory         The logical type factory\n+   *\n+   * @throws NullPointerException if {@code logicalTypeName} or {@code factory} is\n+   *                              {@code null}\n+   */\n   public static void register(String logicalTypeName, LogicalTypeFactory factory) {\n-    if (logicalTypeName == null) {\n-      throw new NullPointerException(\"Invalid logical type name: null\");\n-    }\n-    if (factory == null) {\n-      throw new NullPointerException(\"Invalid logical type factory: null\");\n-    }\n+    Objects.requireNonNull(logicalTypeName, \"Logical type name cannot be null\");\n+    Objects.requireNonNull(factory, \"Logical type factory cannot be null\");\n     REGISTERED_TYPES.put(logicalTypeName, factory);\n   }\n ",
                "deletions": 6
            },
            {
                "sha": "50b403695c4159ec3d29acb2c3e06a59fe7cf101",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java",
                "blob_url": "https://github.com/apache/avro/blob/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java",
                "raw_url": "https://github.com/apache/avro/raw/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java",
                "status": "modified",
                "changes": 10,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java?ref=68796d30d8898cf1cd9e806623602da519cd4058",
                "patch": "@@ -26,6 +26,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n \n import com.fasterxml.jackson.core.io.JsonStringEncoder;\n@@ -412,9 +413,8 @@ private boolean hasProps() {\n     private String[] aliases;\n \n     protected NamedBuilder(NameContext names, String name) {\n-      checkRequired(name, \"Type must have a name\");\n+      this.name = Objects.requireNonNull(name, \"Type must have a name\");\n       this.names = names;\n-      this.name = name;\n     }\n \n     /** configure this type's optional documentation string **/\n@@ -2692,12 +2692,6 @@ public R endUnion() {\n     }\n   }\n \n-  private static void checkRequired(Object reference, String errorMessage) {\n-    if (reference == null) {\n-      throw new NullPointerException(errorMessage);\n-    }\n-  }\n-\n   // create default value JsonNodes from objects\n   private static JsonNode toJsonNode(Object o) {\n     try {",
                "deletions": 8
            },
            {
                "sha": "91276ef45b9dd6cb2382c849aabe179b5c12e5a3",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/data/RecordBuilderBase.java",
                "blob_url": "https://github.com/apache/avro/blob/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/data/RecordBuilderBase.java",
                "raw_url": "https://github.com/apache/avro/raw/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/data/RecordBuilderBase.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/data/RecordBuilderBase.java?ref=68796d30d8898cf1cd9e806623602da519cd4058",
                "patch": "@@ -85,13 +85,11 @@ protected RecordBuilderBase(RecordBuilderBase<T> other, GenericData data) {\n    * \n    * @param field the field to validate.\n    * @param value the value to validate.\n-   * @throws NullPointerException if value is null and the given field does not\n+   * @throws AvroRuntimeException if value is null and the given field does not\n    *                              accept null values.\n    */\n   protected void validate(Field field, Object value) {\n-    if (isValidValue(field, value)) {\n-    } else if (field.defaultVal() != null) {\n-    } else {\n+    if (!isValidValue(field, value) && field.defaultVal() == null) {\n       throw new AvroRuntimeException(\"Field \" + field + \" does not accept null values\");\n     }\n   }",
                "deletions": 4
            },
            {
                "sha": "376289ec882c4fd19da7f28358e051772cf569c3",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/io/BufferedBinaryEncoder.java",
                "blob_url": "https://github.com/apache/avro/blob/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/BufferedBinaryEncoder.java",
                "raw_url": "https://github.com/apache/avro/raw/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/BufferedBinaryEncoder.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/io/BufferedBinaryEncoder.java?ref=68796d30d8898cf1cd9e806623602da519cd4058",
                "patch": "@@ -22,6 +22,7 @@\n import java.nio.ByteBuffer;\n import java.nio.channels.Channels;\n import java.nio.channels.WritableByteChannel;\n+import java.util.Objects;\n \n import org.apache.avro.AvroRuntimeException;\n \n@@ -57,8 +58,7 @@\n   }\n \n   BufferedBinaryEncoder configure(OutputStream out, int bufferSize) {\n-    if (null == out)\n-      throw new NullPointerException(\"OutputStream cannot be null!\");\n+    Objects.requireNonNull(out, \"OutputStream cannot be null\");\n     if (null != this.sink) {\n       if (pos > 0) {\n         try {",
                "deletions": 2
            },
            {
                "sha": "62b2a48262721f55742e763f9bf23f3e5ea6da74",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/io/DirectBinaryEncoder.java",
                "blob_url": "https://github.com/apache/avro/blob/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/DirectBinaryEncoder.java",
                "raw_url": "https://github.com/apache/avro/raw/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/DirectBinaryEncoder.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/io/DirectBinaryEncoder.java?ref=68796d30d8898cf1cd9e806623602da519cd4058",
                "patch": "@@ -19,6 +19,7 @@\n \n import java.io.IOException;\n import java.io.OutputStream;\n+import java.util.Objects;\n \n /**\n  * An {@link Encoder} for Avro's binary encoding that does not buffer output.\n@@ -52,8 +53,7 @@\n   }\n \n   DirectBinaryEncoder configure(OutputStream out) {\n-    if (null == out)\n-      throw new NullPointerException(\"OutputStream cannot be null!\");\n+    Objects.requireNonNull(out, \"OutputStream cannot be null\");\n     this.out = out;\n     return this;\n   }",
                "deletions": 2
            },
            {
                "sha": "c1c38511ab4c9a3e963626495448082f329f3ec0",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/io/JsonDecoder.java",
                "blob_url": "https://github.com/apache/avro/blob/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/JsonDecoder.java",
                "raw_url": "https://github.com/apache/avro/raw/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/JsonDecoder.java",
                "status": "modified",
                "changes": 15,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/io/JsonDecoder.java?ref=68796d30d8898cf1cd9e806623602da519cd4058",
                "patch": "@@ -24,6 +24,7 @@\n import java.nio.charset.StandardCharsets;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Stack;\n \n import org.apache.avro.AvroTypeException;\n@@ -74,9 +75,7 @@ private JsonDecoder(Symbol root, String in) throws IOException {\n   }\n \n   private static Symbol getSymbol(Schema schema) {\n-    if (null == schema) {\n-      throw new NullPointerException(\"Schema cannot be null!\");\n-    }\n+    Objects.requireNonNull(schema, \"Schema cannot be null\");\n     return new JsonGrammarGenerator().generate(schema);\n   }\n \n@@ -90,12 +89,11 @@ private static Symbol getSymbol(Schema schema) {\n    * \n    * @param in The InputStream to read from. Cannot be null.\n    * @throws IOException\n+   * @throws NullPointerException if {@code in} is {@code null}\n    * @return this JsonDecoder\n    */\n   public JsonDecoder configure(InputStream in) throws IOException {\n-    if (null == in) {\n-      throw new NullPointerException(\"InputStream to read from cannot be null!\");\n-    }\n+    Objects.requireNonNull(in, \"InputStream cannot be null\");\n     parser.reset();\n     reorderBuffers.clear();\n     currentReorderBuffer = null;\n@@ -114,12 +112,11 @@ public JsonDecoder configure(InputStream in) throws IOException {\n    * \n    * @param in The String to read from. Cannot be null.\n    * @throws IOException\n+   * @throws NullPointerException if {@code in} is {@code null}\n    * @return this JsonDecoder\n    */\n   public JsonDecoder configure(String in) throws IOException {\n-    if (null == in) {\n-      throw new NullPointerException(\"String to read from cannot be null!\");\n-    }\n+    Objects.requireNonNull(in, \"String to read from cannot be null\");\n     parser.reset();\n     reorderBuffers.clear();\n     currentReorderBuffer = null;",
                "deletions": 9
            },
            {
                "sha": "71cc690b8a4e44875c956da4a01cb2d9b04eaa58",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/io/JsonEncoder.java",
                "blob_url": "https://github.com/apache/avro/blob/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/JsonEncoder.java",
                "raw_url": "https://github.com/apache/avro/raw/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/JsonEncoder.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/io/JsonEncoder.java?ref=68796d30d8898cf1cd9e806623602da519cd4058",
                "patch": "@@ -22,6 +22,7 @@\n import java.nio.ByteBuffer;\n import java.nio.charset.StandardCharsets;\n import java.util.BitSet;\n+import java.util.Objects;\n \n import org.apache.avro.AvroTypeException;\n import org.apache.avro.Schema;\n@@ -80,8 +81,7 @@ public void flush() throws IOException {\n   // by default, one object per line.\n   // with pretty option use default pretty printer with root line separator.\n   private static JsonGenerator getJsonGenerator(OutputStream out, boolean pretty) throws IOException {\n-    if (null == out)\n-      throw new NullPointerException(\"OutputStream cannot be null\");\n+    Objects.requireNonNull(out, \"OutputStream cannot be null\");\n     JsonGenerator g = new JsonFactory().createGenerator(out, JsonEncoding.UTF8);\n     if (pretty) {\n       DefaultPrettyPrinter pp = new DefaultPrettyPrinter() {\n@@ -118,6 +118,7 @@ public void setIncludeNamespace(final boolean includeNamespace) {\n    *\n    * @param out The OutputStream to direct output to. Cannot be null.\n    * @throws IOException\n+   * @throws NullPointerException if {@code out} is {@code null}\n    * @return this JsonEncoder\n    */\n   public JsonEncoder configure(OutputStream out) throws IOException {\n@@ -135,11 +136,11 @@ public JsonEncoder configure(OutputStream out) throws IOException {\n    *\n    * @param generator The JsonGenerator to direct output to. Cannot be null.\n    * @throws IOException\n+   * @throws NullPointerException if {@code generator} is {@code null}\n    * @return this JsonEncoder\n    */\n   private JsonEncoder configure(JsonGenerator generator) throws IOException {\n-    if (null == generator)\n-      throw new NullPointerException(\"JsonGenerator cannot be null\");\n+    Objects.requireNonNull(generator, \"JsonGenerator cannot be null\");\n     if (null != parser) {\n       flush();\n     }",
                "deletions": 4
            },
            {
                "sha": "8952ff96763d463e832d3ffb8b43d53679dbc459",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java",
                "blob_url": "https://github.com/apache/avro/blob/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java",
                "raw_url": "https://github.com/apache/avro/raw/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java",
                "status": "modified",
                "changes": 11,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java?ref=68796d30d8898cf1cd9e806623602da519cd4058",
                "patch": "@@ -20,6 +20,7 @@\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n \n import org.apache.avro.AvroTypeException;\n import org.apache.avro.Schema;\n@@ -74,14 +75,12 @@ private ResolvingDecoder(Object resolver, Decoder in) throws IOException {\n    * @param reader The reader's schema. Cannot be null.\n    * @return The opaque resolver.\n    * @throws IOException\n+   * @throws NullPointerException if {@code writer} or {@code reader} is\n+   *                              {@code null}\n    */\n   public static Object resolve(Schema writer, Schema reader) throws IOException {\n-    if (null == writer) {\n-      throw new NullPointerException(\"writer cannot be null!\");\n-    }\n-    if (null == reader) {\n-      throw new NullPointerException(\"reader cannot be null!\");\n-    }\n+    Objects.requireNonNull(writer, \"Writer schema cannot be null\");\n+    Objects.requireNonNull(reader, \"Reader schema cannot be null\");\n     return new ResolvingGrammarGenerator().generate(writer, reader);\n   }\n ",
                "deletions": 6
            },
            {
                "sha": "dbee4458575d2a070ebeade3310fcba6f0f51ee5",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/io/ValidatingDecoder.java",
                "blob_url": "https://github.com/apache/avro/blob/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/ValidatingDecoder.java",
                "raw_url": "https://github.com/apache/avro/raw/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/ValidatingDecoder.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/io/ValidatingDecoder.java?ref=68796d30d8898cf1cd9e806623602da519cd4058",
                "patch": "@@ -19,6 +19,7 @@\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n+import java.util.Objects;\n \n import org.apache.avro.AvroTypeException;\n import org.apache.avro.Schema;\n@@ -52,9 +53,7 @@\n   }\n \n   private static Symbol getSymbol(Schema schema) {\n-    if (null == schema) {\n-      throw new NullPointerException(\"Schema cannot be null\");\n-    }\n+    Objects.requireNonNull(schema, \"Schema cannot be null\");\n     return new ValidatingGrammarGenerator().generate(schema);\n   }\n ",
                "deletions": 3
            },
            {
                "sha": "d141a5a8ece8a7c307772a4fa0d0855bada97e0a",
                "filename": "lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java",
                "blob_url": "https://github.com/apache/avro/blob/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java",
                "raw_url": "https://github.com/apache/avro/raw/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java?ref=68796d30d8898cf1cd9e806623602da519cd4058",
                "patch": "@@ -24,6 +24,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Executors;\n@@ -170,13 +171,13 @@ public NettyTransceiver(InetSocketAddress addr, ChannelFactory channelFactory, L\n    *                                    Channel.\n    * @param nettyClientBootstrapOptions map of Netty ClientBootstrap options to\n    *                                    use.\n-   * @throws IOException if an error occurs connecting to the given address.\n+   * @throws IOException          if an error occurs connecting to the given\n+   *                              address.\n+   * @throws NullPointerException if {@code channelFactory} is {@code null}\n    */\n   public NettyTransceiver(InetSocketAddress addr, ChannelFactory channelFactory,\n       Map<String, Object> nettyClientBootstrapOptions) throws IOException {\n-    if (channelFactory == null) {\n-      throw new NullPointerException(\"channelFactory is null\");\n-    }\n+    Objects.requireNonNull(channelFactory, \"channelFactory cannot be null\");\n \n     // Set up.\n     this.channelFactory = channelFactory;",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "avro",
        "message": "AVRO-2383: NPE during Schema.applyAliases (#510)",
        "commit": "https://github.com/apache/avro/commit/196777ccc2e698e9dba153d48a08ef4b68b144a1",
        "parent": "https://github.com/apache/avro/commit/3f44b7c22e355e5fde239fd16b5105cf5804b70b",
        "bug_id": "avro_2",
        "file": [
            {
                "sha": "f4dda2686b5b9f1422b9c2b50c352e65b4a9a429",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "blob_url": "https://github.com/apache/avro/blob/196777ccc2e698e9dba153d48a08ef4b68b144a1/lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "raw_url": "https://github.com/apache/avro/raw/196777ccc2e698e9dba153d48a08ef4b68b144a1/lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/Schema.java?ref=196777ccc2e698e9dba153d48a08ef4b68b144a1",
                "patch": "@@ -886,7 +886,7 @@ public boolean equals(Object o) {\n       boolean first = seen.isEmpty();\n       try {\n         seen.add(here);\n-        return fields.equals(((RecordSchema) o).fields);\n+        return Objects.equals(fields, that.fields);\n       } finally {\n         if (first)\n           seen.clear();",
                "deletions": 1
            },
            {
                "sha": "cd5413a5fb945eff5a88ae0ec0aafc83ce9a6bef",
                "filename": "lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java",
                "blob_url": "https://github.com/apache/avro/blob/196777ccc2e698e9dba153d48a08ef4b68b144a1/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java",
                "raw_url": "https://github.com/apache/avro/raw/196777ccc2e698e9dba153d48a08ef4b68b144a1/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java",
                "status": "modified",
                "changes": 15,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java?ref=196777ccc2e698e9dba153d48a08ef4b68b144a1",
                "patch": "@@ -594,6 +594,21 @@ public void testAliases() {\n     assertEquals(s2, s3);\n   }\n \n+  @Test\n+  public void testAliasesSelfReferential() {\n+    String t1 = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"a\\\",\\\"fields\\\":[{\\\"name\\\":\\\"f\\\",\\\"type\\\":{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"C\\\",\\\"fields\\\":[{\\\"name\\\":\\\"c\\\",\\\"type\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":[\\\"null\\\",\\\"C\\\"]}}]}}]}\";\n+    String t2 = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"x\\\",\\\"fields\\\":[{\\\"name\\\":\\\"f\\\",\\\"type\\\":{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"C\\\",\\\"fields\\\":[{\\\"name\\\":\\\"d\\\",\\\"type\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":[\\\"null\\\",\\\"C\\\"]},\\\"aliases\\\":[\\\"c\\\"]}]}}],\\\"aliases\\\":[\\\"a\\\"]}\";\n+    Schema s1 = new Schema.Parser().parse(t1);\n+    Schema s2 = new Schema.Parser().parse(t2);\n+\n+    assertEquals(s1.getAliases(), Collections.emptySet());\n+    assertEquals(s2.getAliases(), Collections.singleton(\"a\"));\n+\n+    Schema s3 = Schema.applyAliases(s1, s2);\n+    assertNotSame(s2, s3);\n+    assertEquals(s2, s3);\n+  }\n+\n   private static void check(File dst, String schemaJson, String defaultJson, Object defaultValue) throws Exception {\n     check(dst, schemaJson, defaultJson, defaultValue, true);\n   }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "avro",
        "message": "AVRO-2120: Fix NullPointerException thrown by Schema.Parser#parse(\"\")",
        "commit": "https://github.com/apache/avro/commit/a7a43da6de9bd44e57e057319127c64b2fca56a0",
        "parent": "https://github.com/apache/avro/commit/a3e05bee1c81b54eed8cb37b278652cf80666121",
        "bug_id": "avro_3",
        "file": [
            {
                "sha": "04c49235cd5c6b36b9c2657862c8da10489543af",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/avro/blob/a7a43da6de9bd44e57e057319127c64b2fca56a0/CHANGES.txt",
                "raw_url": "https://github.com/apache/avro/raw/a7a43da6de9bd44e57e057319127c64b2fca56a0/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/CHANGES.txt?ref=a7a43da6de9bd44e57e057319127c64b2fca56a0",
                "patch": "@@ -220,6 +220,8 @@ Trunk (not yet released)\n     AVRO-1485: Specification says Record field type can be record name but implementation allows any named type.\n     (Nandor Kollar via gabor)\n \n+    AVRO-2120: Fix NullPointerException thrown by Schema.Parser#parse(\"\")\n+\n Avro 1.8.1 (14 May 2016)\n \n   INCOMPATIBLE CHANGES",
                "deletions": 0
            },
            {
                "sha": "97aed83cc84c462b444920be6784734163f8703c",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "blob_url": "https://github.com/apache/avro/blob/a7a43da6de9bd44e57e057319127c64b2fca56a0/lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "raw_url": "https://github.com/apache/avro/raw/a7a43da6de9bd44e57e057319127c64b2fca56a0/lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/Schema.java?ref=a7a43da6de9bd44e57e057319127c64b2fca56a0",
                "patch": "@@ -1225,6 +1225,9 @@ private static boolean isValidDefault(Schema schema, JsonNode defaultValue) {\n \n   /** @see #parse(String) */\n   static Schema parse(JsonNode schema, Names names) {\n+    if (schema == null) {\n+      throw new SchemaParseException(\"Cannot parse <null> schema\");\n+    }\n     if (schema.isTextual()) {                     // name\n       Schema result = names.get(schema.getTextValue());\n       if (result == null)",
                "deletions": 0
            },
            {
                "sha": "25858b5f9e6bf4c9c80b19e51ee8bb28a44e3546",
                "filename": "lang/java/avro/src/test/java/org/apache/avro/TestSchema.java",
                "blob_url": "https://github.com/apache/avro/blob/a7a43da6de9bd44e57e057319127c64b2fca56a0/lang/java/avro/src/test/java/org/apache/avro/TestSchema.java",
                "raw_url": "https://github.com/apache/avro/raw/a7a43da6de9bd44e57e057319127c64b2fca56a0/lang/java/avro/src/test/java/org/apache/avro/TestSchema.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/test/java/org/apache/avro/TestSchema.java?ref=a7a43da6de9bd44e57e057319127c64b2fca56a0",
                "patch": "@@ -83,6 +83,11 @@ public void testEmptyRecordSchema() {\n     assertNotNull(schemaString);\n   }\n \n+  @Test(expected = SchemaParseException.class)\n+  public void testParseEmptySchema() {\n+    Schema schema = new Schema.Parser().parse(\"\");\n+  }\n+\n   @Test\n   public void testSchemaWithFields() {\n     List<Field> fields = new ArrayList<>();",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "avro",
        "message": "AVRO-1967: Java: Fix NPE when calling getXyzBuilder on instance where the xyz is null",
        "commit": "https://github.com/apache/avro/commit/152fa0954bb74e8e1e627751ccab55ada4f5b375",
        "parent": "https://github.com/apache/avro/commit/a53a4fd10072471aa7c8170499a10792e61e0d95",
        "bug_id": "avro_4",
        "file": [
            {
                "sha": "d5341e8905cfaf43b09732f958d21ea7598bc84b",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/avro/blob/152fa0954bb74e8e1e627751ccab55ada4f5b375/CHANGES.txt",
                "raw_url": "https://github.com/apache/avro/raw/152fa0954bb74e8e1e627751ccab55ada4f5b375/CHANGES.txt",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/CHANGES.txt?ref=152fa0954bb74e8e1e627751ccab55ada4f5b375",
                "patch": "@@ -106,6 +106,9 @@ Trunk (not yet released)\n \n     AVRO-1966: Java: Fix NPE When copying builder with nullable record. (Niels Basjes)\n \n+    AVRO-1967: Java: Fix NPE when calling getXyzBuilder on instance where the xyz is null\n+    (Niels Basjes)\n+\n Avro 1.8.1 (14 May 2016)\n \n   INCOMPATIBLE CHANGES",
                "deletions": 0
            },
            {
                "sha": "ccec4b60c1d666c52a71912b04d6d705f944c5c1",
                "filename": "lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm",
                "blob_url": "https://github.com/apache/avro/blob/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm",
                "raw_url": "https://github.com/apache/avro/raw/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm",
                "status": "modified",
                "changes": 14,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm?ref=152fa0954bb74e8e1e627751ccab55ada4f5b375",
                "patch": "@@ -221,7 +221,11 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or\n    * @return A new ${this.mangle($schema.getName())} RecordBuilder\n    */\n   public static #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder newBuilder(#if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder other) {\n-    return new #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder(other);\n+    if (other == null) {\n+      return new #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder();\n+    } else {\n+      return new #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder(other);\n+    }\n   }\n \n   /**\n@@ -230,7 +234,11 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or\n    * @return A new ${this.mangle($schema.getName())} RecordBuilder\n    */\n   public static #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder newBuilder(#if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())} other) {\n-    return new #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder(other);\n+    if (other == null) {\n+      return new #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder();\n+    } else {\n+      return new #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder(other);\n+    }\n   }\n \n   /**\n@@ -279,7 +287,7 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or\n      * @param other The existing instance to copy.\n      */\n     private Builder(#if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())} other) {\n-      #if ($schema.isError())super(other)#else\n+#if ($schema.isError())      super(other)#else\n       super(SCHEMA$)#end;\n #foreach ($field in $schema.getFields())\n       if (isValidValue(fields()[$field.pos()], other.${this.mangle($field.name(), $schema.isError())})) {",
                "deletions": 3
            },
            {
                "sha": "6a69833698946606e34fb1f344fa8fb27b97d49d",
                "filename": "lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java",
                "blob_url": "https://github.com/apache/avro/blob/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java",
                "raw_url": "https://github.com/apache/avro/raw/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java",
                "status": "modified",
                "changes": 77,
                "additions": 77,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java?ref=152fa0954bb74e8e1e627751ccab55ada4f5b375",
                "patch": "@@ -27,6 +27,7 @@\n import static org.apache.avro.test.nullable.Nullable.*;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n public class TestSpecificBuilderTree {\n@@ -283,4 +284,80 @@ public void copyBuilderWithNullables() {\n     builderCopy.getNullableRecordBuilder();\n   }\n \n+  @Test\n+  public void copyBuilderWithNullablesAndSetToNull() {\n+    // Create builder with all values default to null, yet unset.\n+    RecordWithNullables.Builder builder = RecordWithNullables.newBuilder();\n+\n+    // Ensure all values have not been set\n+    assertFalse(builder.hasNullableRecordBuilder());\n+    assertFalse(builder.hasNullableRecord());\n+    assertFalse(builder.hasNullableString());\n+    assertFalse(builder.hasNullableLong  ());\n+    assertFalse(builder.hasNullableInt   ());\n+    assertFalse(builder.hasNullableMap   ());\n+    assertFalse(builder.hasNullableArray ());\n+\n+    // Set all values to null\n+    builder.setNullableRecordBuilder(null);\n+    builder.setNullableRecord(null);\n+    builder.setNullableString(null);\n+    builder.setNullableLong  (null);\n+    builder.setNullableInt   (null);\n+    builder.setNullableMap   (null);\n+    builder.setNullableArray (null);\n+\n+    // A Builder remains False because it is null\n+    assertFalse(builder.hasNullableRecordBuilder());\n+\n+    // Ensure all values have been set\n+    assertTrue(builder.hasNullableRecord());\n+    assertTrue(builder.hasNullableString());\n+    assertTrue(builder.hasNullableLong  ());\n+    assertTrue(builder.hasNullableInt   ());\n+    assertTrue(builder.hasNullableMap   ());\n+    assertTrue(builder.hasNullableArray ());\n+\n+    // Implicitly create a builder instance and clear the actual value.\n+    builder.getNullableRecordBuilder();\n+    assertTrue(builder.hasNullableRecordBuilder());\n+    assertFalse(builder.hasNullableRecord());\n+\n+    // Create a copy of this builder.\n+    RecordWithNullables.Builder builderCopy = RecordWithNullables.newBuilder(builder);\n+\n+    // Ensure all values are still the same\n+    assertTrue(builder.hasNullableRecordBuilder());\n+    assertFalse(builder.hasNullableRecord());\n+    assertTrue(builder.hasNullableString());\n+    assertTrue(builder.hasNullableLong  ());\n+    assertTrue(builder.hasNullableInt   ());\n+    assertTrue(builder.hasNullableMap   ());\n+    assertTrue(builder.hasNullableArray ());\n+  }\n+\n+  @Test\n+  public void getBuilderForRecordWithNullRecord() {\n+    // Create a record with all nullable fields set to the default value : null\n+    RecordWithNullables recordWithNullables = RecordWithNullables.newBuilder().build();\n+\n+    // Now create a Builder using this record as the base\n+    RecordWithNullables.Builder builder = RecordWithNullables.newBuilder(recordWithNullables);\n+\n+    // In the past this caused an NPE\n+    builder.getNullableRecordBuilder();\n+  }\n+\n+  @Test\n+  public void getBuilderForNullRecord() {\n+    // In the past this caused an NPE\n+    RecordWithNullables.newBuilder((RecordWithNullables)null);\n+  }\n+\n+  @Test\n+  public void getBuilderForNullBuilder() {\n+    // In the past this caused an NPE\n+    RecordWithNullables.newBuilder((RecordWithNullables.Builder)null);\n+  }\n+\n }",
                "deletions": 0
            },
            {
                "sha": "4dff5ef5053974adb6a4dbce785a0604224df27e",
                "filename": "lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java",
                "blob_url": "https://github.com/apache/avro/blob/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java",
                "raw_url": "https://github.com/apache/avro/raw/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java",
                "status": "modified",
                "changes": 14,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java?ref=152fa0954bb74e8e1e627751ccab55ada4f5b375",
                "patch": "@@ -182,7 +182,11 @@ public void setPosition(java.util.List<avro.examples.baseball.Position> value) {\n    * @return A new Player RecordBuilder\n    */\n   public static avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player.Builder other) {\n-    return new avro.examples.baseball.Player.Builder(other);\n+    if (other == null) {\n+      return new avro.examples.baseball.Player.Builder();\n+    } else {\n+      return new avro.examples.baseball.Player.Builder(other);\n+    }\n   }\n \n   /**\n@@ -191,7 +195,11 @@ public void setPosition(java.util.List<avro.examples.baseball.Position> value) {\n    * @return A new Player RecordBuilder\n    */\n   public static avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player other) {\n-    return new avro.examples.baseball.Player.Builder(other);\n+    if (other == null) {\n+      return new avro.examples.baseball.Player.Builder();\n+    } else {\n+      return new avro.examples.baseball.Player.Builder(other);\n+    }\n   }\n \n   /**\n@@ -240,7 +248,7 @@ private Builder(avro.examples.baseball.Player.Builder other) {\n      * @param other The existing instance to copy.\n      */\n     private Builder(avro.examples.baseball.Player other) {\n-            super(SCHEMA$);\n+      super(SCHEMA$);\n       if (isValidValue(fields()[0], other.number)) {\n         this.number = data().deepCopy(fields()[0].schema(), other.number);\n         fieldSetFlags()[0] = true;",
                "deletions": 3
            },
            {
                "sha": "26fcbc0d559c37373a7f5bb195fa2bd830195b4a",
                "filename": "lang/java/tools/src/test/compiler/output/Player.java",
                "blob_url": "https://github.com/apache/avro/blob/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/tools/src/test/compiler/output/Player.java",
                "raw_url": "https://github.com/apache/avro/raw/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/tools/src/test/compiler/output/Player.java",
                "status": "modified",
                "changes": 14,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/tools/src/test/compiler/output/Player.java?ref=152fa0954bb74e8e1e627751ccab55ada4f5b375",
                "patch": "@@ -182,7 +182,11 @@ public void setPosition(java.util.List<avro.examples.baseball.Position> value) {\n    * @return A new Player RecordBuilder\n    */\n   public static avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player.Builder other) {\n-    return new avro.examples.baseball.Player.Builder(other);\n+    if (other == null) {\n+      return new avro.examples.baseball.Player.Builder();\n+    } else {\n+      return new avro.examples.baseball.Player.Builder(other);\n+    }\n   }\n \n   /**\n@@ -191,7 +195,11 @@ public void setPosition(java.util.List<avro.examples.baseball.Position> value) {\n    * @return A new Player RecordBuilder\n    */\n   public static avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player other) {\n-    return new avro.examples.baseball.Player.Builder(other);\n+    if (other == null) {\n+      return new avro.examples.baseball.Player.Builder();\n+    } else {\n+      return new avro.examples.baseball.Player.Builder(other);\n+    }\n   }\n \n   /**\n@@ -240,7 +248,7 @@ private Builder(avro.examples.baseball.Player.Builder other) {\n      * @param other The existing instance to copy.\n      */\n     private Builder(avro.examples.baseball.Player other) {\n-            super(SCHEMA$);\n+      super(SCHEMA$);\n       if (isValidValue(fields()[0], other.number)) {\n         this.number = data().deepCopy(fields()[0].schema(), other.number);\n         fieldSetFlags()[0] = true;",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "avro",
        "message": "AVRO-1966: Java: Fix NPE When copying builder with nullable record.",
        "commit": "https://github.com/apache/avro/commit/a53a4fd10072471aa7c8170499a10792e61e0d95",
        "parent": "https://github.com/apache/avro/commit/cae491a6204b8167481fcc46e7f7eed061a44a82",
        "bug_id": "avro_5",
        "file": [
            {
                "sha": "fa11bb821309c8e2fd4f2f0dbb92225119b1a4eb",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/avro/blob/a53a4fd10072471aa7c8170499a10792e61e0d95/CHANGES.txt",
                "raw_url": "https://github.com/apache/avro/raw/a53a4fd10072471aa7c8170499a10792e61e0d95/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/CHANGES.txt?ref=a53a4fd10072471aa7c8170499a10792e61e0d95",
                "patch": "@@ -104,6 +104,8 @@ Trunk (not yet released)\n \n     AVRO-1951: Python: Fix ipc_test.py with a valid DNS name. (blue)\n \n+    AVRO-1966: Java: Fix NPE When copying builder with nullable record. (Niels Basjes)\n+\n Avro 1.8.1 (14 May 2016)\n \n   INCOMPATIBLE CHANGES",
                "deletions": 0
            },
            {
                "sha": "c333dd076d5790c3ba2b2f57159fdb7c39531ac2",
                "filename": "lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm",
                "blob_url": "https://github.com/apache/avro/blob/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm",
                "raw_url": "https://github.com/apache/avro/raw/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm?ref=a53a4fd10072471aa7c8170499a10792e61e0d95",
                "patch": "@@ -264,7 +264,7 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or\n #foreach ($field in $schema.getFields())\n       if (isValidValue(fields()[$field.pos()], other.${this.mangle($field.name(), $schema.isError())})) {\n         this.${this.mangle($field.name(), $schema.isError())} = data().deepCopy(fields()[$field.pos()].schema(), other.${this.mangle($field.name(), $schema.isError())});\n-        fieldSetFlags()[$field.pos()] = true;\n+        fieldSetFlags()[$field.pos()] = other.fieldSetFlags()[$field.pos()];\n       }\n #if (${this.hasBuilder($field.schema())})\n       if (other.${this.generateHasBuilderMethod($schema, $field)}()) {",
                "deletions": 1
            },
            {
                "sha": "87b9e6f6e944520da278b9b68a5e393eedadbc18",
                "filename": "lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java",
                "blob_url": "https://github.com/apache/avro/blob/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java",
                "raw_url": "https://github.com/apache/avro/raw/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java",
                "status": "modified",
                "changes": 29,
                "additions": 29,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java?ref=a53a4fd10072471aa7c8170499a10792e61e0d95",
                "patch": "@@ -18,11 +18,15 @@\n package org.apache.avro.specific;\n \n import org.apache.avro.test.http.*;\n+import org.apache.avro.test.nullable.Nullable;\n+import org.apache.avro.test.nullable.RecordWithNullables;\n import org.junit.Test;\n \n import java.util.ArrayList;\n \n+import static org.apache.avro.test.nullable.Nullable.*;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.fail;\n \n public class TestSpecificBuilderTree {\n@@ -254,4 +258,29 @@ public void lastOneWins_Builder() {\n     assertEquals(\"/index.html\",     request.getHttpRequest().getURI().getPath());\n   }\n \n+  @Test\n+  public void copyBuilderWithNullables() {\n+    RecordWithNullables.Builder builder = RecordWithNullables.newBuilder();\n+\n+    assertFalse(builder.hasNullableRecordBuilder());\n+    assertFalse(builder.hasNullableRecord());\n+    assertFalse(builder.hasNullableString());\n+    assertFalse(builder.hasNullableLong  ());\n+    assertFalse(builder.hasNullableInt   ());\n+    assertFalse(builder.hasNullableMap   ());\n+    assertFalse(builder.hasNullableArray ());\n+\n+    RecordWithNullables.Builder builderCopy = RecordWithNullables.newBuilder(builder);\n+\n+    assertFalse(builderCopy.hasNullableRecordBuilder());\n+    assertFalse(builderCopy.hasNullableRecord());\n+    assertFalse(builderCopy.hasNullableString());\n+    assertFalse(builderCopy.hasNullableLong  ());\n+    assertFalse(builderCopy.hasNullableInt   ());\n+    assertFalse(builderCopy.hasNullableMap   ());\n+    assertFalse(builderCopy.hasNullableArray ());\n+\n+    builderCopy.getNullableRecordBuilder();\n+  }\n+\n }",
                "deletions": 0
            },
            {
                "sha": "da58e20c88ea6d69b770a199a486e1860367b7d6",
                "filename": "lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java",
                "blob_url": "https://github.com/apache/avro/blob/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java",
                "raw_url": "https://github.com/apache/avro/raw/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java?ref=a53a4fd10072471aa7c8170499a10792e61e0d95",
                "patch": "@@ -219,19 +219,19 @@ private Builder(avro.examples.baseball.Player.Builder other) {\n       super(other);\n       if (isValidValue(fields()[0], other.number)) {\n         this.number = data().deepCopy(fields()[0].schema(), other.number);\n-        fieldSetFlags()[0] = true;\n+        fieldSetFlags()[0] = other.fieldSetFlags()[0];\n       }\n       if (isValidValue(fields()[1], other.first_name)) {\n         this.first_name = data().deepCopy(fields()[1].schema(), other.first_name);\n-        fieldSetFlags()[1] = true;\n+        fieldSetFlags()[1] = other.fieldSetFlags()[1];\n       }\n       if (isValidValue(fields()[2], other.last_name)) {\n         this.last_name = data().deepCopy(fields()[2].schema(), other.last_name);\n-        fieldSetFlags()[2] = true;\n+        fieldSetFlags()[2] = other.fieldSetFlags()[2];\n       }\n       if (isValidValue(fields()[3], other.position)) {\n         this.position = data().deepCopy(fields()[3].schema(), other.position);\n-        fieldSetFlags()[3] = true;\n+        fieldSetFlags()[3] = other.fieldSetFlags()[3];\n       }\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "0a0b88203dc1db27efceb8fab2d1baac0bb8cd96",
                "filename": "lang/java/tools/src/test/compiler/output/Player.java",
                "blob_url": "https://github.com/apache/avro/blob/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/tools/src/test/compiler/output/Player.java",
                "raw_url": "https://github.com/apache/avro/raw/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/tools/src/test/compiler/output/Player.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/tools/src/test/compiler/output/Player.java?ref=a53a4fd10072471aa7c8170499a10792e61e0d95",
                "patch": "@@ -219,19 +219,19 @@ private Builder(avro.examples.baseball.Player.Builder other) {\n       super(other);\n       if (isValidValue(fields()[0], other.number)) {\n         this.number = data().deepCopy(fields()[0].schema(), other.number);\n-        fieldSetFlags()[0] = true;\n+        fieldSetFlags()[0] = other.fieldSetFlags()[0];\n       }\n       if (isValidValue(fields()[1], other.first_name)) {\n         this.first_name = data().deepCopy(fields()[1].schema(), other.first_name);\n-        fieldSetFlags()[1] = true;\n+        fieldSetFlags()[1] = other.fieldSetFlags()[1];\n       }\n       if (isValidValue(fields()[2], other.last_name)) {\n         this.last_name = data().deepCopy(fields()[2].schema(), other.last_name);\n-        fieldSetFlags()[2] = true;\n+        fieldSetFlags()[2] = other.fieldSetFlags()[2];\n       }\n       if (isValidValue(fields()[3], other.position)) {\n         this.position = data().deepCopy(fields()[3].schema(), other.position);\n-        fieldSetFlags()[3] = true;\n+        fieldSetFlags()[3] = other.fieldSetFlags()[3];\n       }\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "a62c205a3372d1811dde81c6305b8b5a0f1ec047",
                "filename": "share/test/schemas/nestedNullable.avdl",
                "blob_url": "https://github.com/apache/avro/blob/a53a4fd10072471aa7c8170499a10792e61e0d95/share/test/schemas/nestedNullable.avdl",
                "raw_url": "https://github.com/apache/avro/raw/a53a4fd10072471aa7c8170499a10792e61e0d95/share/test/schemas/nestedNullable.avdl",
                "status": "added",
                "changes": 41,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/share/test/schemas/nestedNullable.avdl?ref=a53a4fd10072471aa7c8170499a10792e61e0d95",
                "patch": "@@ -0,0 +1,41 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+@namespace(\"org.apache.avro.test.nullable\")\n+protocol Nullable {\n+\n+    enum MyEnum {\n+        One,\n+        Two\n+    }\n+\n+    record SubRecord {\n+        string value;\n+    }\n+\n+    record RecordWithNullables {\n+        union { null, string        } nullableString    = null;\n+        union { null, long          } nullableLong      = null;\n+        union { null, int           } nullableInt       = null;\n+        union { null, map<string>   } nullableMap       = null;\n+        union { null, array<string> } nullableArray     = null;\n+        union { null, SubRecord     } nullableRecord    = null;\n+        union { null, MyEnum        } nullableEnum      = null;\n+    }\n+\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "avro",
        "message": "AVRO-687.  Fix a NullPointerException.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/avro/trunk@1049732 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/avro/commit/d5ec60896fef71973d49436df077664b830aaa46",
        "parent": "https://github.com/apache/avro/commit/352bc86e525eda5f83f13485cac01e57ab9447bb",
        "bug_id": "avro_6",
        "file": [
            {
                "sha": "d8f469feac77c760caa8e53f969314404d1f1166",
                "filename": "lang/java/src/java/org/apache/avro/ipc/Requestor.java",
                "blob_url": "https://github.com/apache/avro/blob/d5ec60896fef71973d49436df077664b830aaa46/lang/java/src/java/org/apache/avro/ipc/Requestor.java",
                "raw_url": "https://github.com/apache/avro/raw/d5ec60896fef71973d49436df077664b830aaa46/lang/java/src/java/org/apache/avro/ipc/Requestor.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/ipc/Requestor.java?ref=d5ec60896fef71973d49436df077664b830aaa46",
                "patch": "@@ -237,10 +237,10 @@ private void setRemote(HandshakeResponse handshake) {\n \n   /** Return the remote protocol.  Force a handshake if required. */\n   public synchronized Protocol getRemote() throws IOException {\n+    if (remote != null) return remote;            // already have it\n     MD5 remoteHash = REMOTE_HASHES.get(transceiver.getRemoteName());\n     remote = REMOTE_PROTOCOLS.get(remoteHash);\n-    if (remote != null)\n-      return remote;\n+    if (remote != null) return remote;            // already cached\n     // force handshake\n     ByteBufferOutputStream bbo = new ByteBufferOutputStream();\n     Encoder out = new BinaryEncoder(bbo);",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "avro",
        "message": "AVRO-615. Java: Improve error message for NullPointerException while writing data.\n\ngit-svn-id: https://svn.apache.org/repos/asf/avro/trunk@986959 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/avro/commit/77a7965f776d2e6932d0abaac69c0747ac33d2d6",
        "parent": "https://github.com/apache/avro/commit/7afee340172a95bf1d7df4038ce615448f719a0d",
        "bug_id": "avro_7",
        "file": [
            {
                "sha": "53c03cbbbec9d1f2a5f37e167ab5d319680a6df2",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/avro/blob/77a7965f776d2e6932d0abaac69c0747ac33d2d6/CHANGES.txt",
                "raw_url": "https://github.com/apache/avro/raw/77a7965f776d2e6932d0abaac69c0747ac33d2d6/CHANGES.txt",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/CHANGES.txt?ref=77a7965f776d2e6932d0abaac69c0747ac33d2d6",
                "patch": "@@ -122,6 +122,9 @@ Avro 1.4.0 (unreleased)\n     AVRO-616. Java: Add comment to generated source files noting that\n     they should not be edited. (Patrick Wendell via cutting)\n \n+    AVRO-615. Java: Improve error message for NullPointerException\n+    when writing data.  (cutting)\n+\n   BUG FIXES\n \n     AVRO-502. Memory leak from parsing JSON schema.",
                "deletions": 0
            },
            {
                "sha": "2153b44017f8f2ec821fda31af8cc048a1f79fae",
                "filename": "lang/java/src/java/org/apache/avro/generic/GenericDatumWriter.java",
                "blob_url": "https://github.com/apache/avro/blob/77a7965f776d2e6932d0abaac69c0747ac33d2d6/lang/java/src/java/org/apache/avro/generic/GenericDatumWriter.java",
                "raw_url": "https://github.com/apache/avro/raw/77a7965f776d2e6932d0abaac69c0747ac33d2d6/lang/java/src/java/org/apache/avro/generic/GenericDatumWriter.java",
                "status": "modified",
                "changes": 59,
                "additions": 37,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/generic/GenericDatumWriter.java?ref=77a7965f776d2e6932d0abaac69c0747ac33d2d6",
                "patch": "@@ -58,35 +58,50 @@ public void write(D datum, Encoder out) throws IOException {\n   /** Called to write data.*/\n   protected void write(Schema schema, Object datum, Encoder out)\n     throws IOException {\n-    switch (schema.getType()) {\n-    case RECORD: writeRecord(schema, datum, out); break;\n-    case ENUM:   writeEnum(schema, datum, out);   break;\n-    case ARRAY:  writeArray(schema, datum, out);  break;\n-    case MAP:    writeMap(schema, datum, out);    break;\n-    case UNION:\n-      int index = data.resolveUnion(schema, datum);\n-      out.writeIndex(index);\n-      write(schema.getTypes().get(index), datum, out);\n-      break;\n-    case FIXED:   writeFixed(schema, datum, out);   break;\n-    case STRING:  writeString(schema, datum, out);  break;\n-    case BYTES:   writeBytes(datum, out);           break;\n-    case INT:     out.writeInt((Integer)datum);     break;\n-    case LONG:    out.writeLong((Long)datum);       break;\n-    case FLOAT:   out.writeFloat((Float)datum);     break;\n-    case DOUBLE:  out.writeDouble((Double)datum);   break;\n-    case BOOLEAN: out.writeBoolean((Boolean)datum); break;\n-    case NULL:    out.writeNull();                  break;\n-    default: error(schema,datum);\n+    try {\n+      switch (schema.getType()) {\n+      case RECORD: writeRecord(schema, datum, out); break;\n+      case ENUM:   writeEnum(schema, datum, out);   break;\n+      case ARRAY:  writeArray(schema, datum, out);  break;\n+      case MAP:    writeMap(schema, datum, out);    break;\n+      case UNION:\n+        int index = data.resolveUnion(schema, datum);\n+        out.writeIndex(index);\n+        write(schema.getTypes().get(index), datum, out);\n+        break;\n+      case FIXED:   writeFixed(schema, datum, out);   break;\n+      case STRING:  writeString(schema, datum, out);  break;\n+      case BYTES:   writeBytes(datum, out);           break;\n+      case INT:     out.writeInt((Integer)datum);     break;\n+      case LONG:    out.writeLong((Long)datum);       break;\n+      case FLOAT:   out.writeFloat((Float)datum);     break;\n+      case DOUBLE:  out.writeDouble((Double)datum);   break;\n+      case BOOLEAN: out.writeBoolean((Boolean)datum); break;\n+      case NULL:    out.writeNull();                  break;\n+      default: error(schema,datum);\n+      }\n+    } catch (NullPointerException e) {\n+      throw npe(e, \" of \"+schema.getName());\n     }\n   }\n \n+  private NullPointerException npe(NullPointerException e, String s) {\n+    NullPointerException result = new NullPointerException(e.getMessage()+s);\n+    result.initCause(e.getCause() == null ? e : e.getCause());\n+    return result;\n+  }\n+\n   /** Called to write a record.  May be overridden for alternate record\n    * representations.*/\n   protected void writeRecord(Schema schema, Object datum, Encoder out)\n     throws IOException {\n-    for (Field field : schema.getFields()) {\n-      write(field.schema(), getField(datum, field.name(), field.pos()), out);\n+    for (Field f : schema.getFields()) {\n+      Object value = getField(datum, f.name(), f.pos());\n+      try {\n+        write(f.schema(), value, out);\n+      } catch (NullPointerException e) {\n+        throw npe(e, \" in field \"+f.name());\n+      }\n     }\n   }\n   ",
                "deletions": 22
            },
            {
                "sha": "6660f960a02c24df2683d35e87e677f0514e57df",
                "filename": "lang/java/src/test/java/org/apache/avro/TestSchema.java",
                "blob_url": "https://github.com/apache/avro/blob/77a7965f776d2e6932d0abaac69c0747ac33d2d6/lang/java/src/test/java/org/apache/avro/TestSchema.java",
                "raw_url": "https://github.com/apache/avro/raw/77a7965f776d2e6932d0abaac69c0747ac33d2d6/lang/java/src/test/java/org/apache/avro/TestSchema.java",
                "status": "modified",
                "changes": 15,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/test/java/org/apache/avro/TestSchema.java?ref=77a7965f776d2e6932d0abaac69c0747ac33d2d6",
                "patch": "@@ -331,6 +331,21 @@ public void testNamespaceScope() throws Exception {\n     assertEquals(\"q.Z\", ys.getField(\"f\").schema().getFullName());\n   }\n \n+  @Test\n+  public void testNullPointer() throws Exception {\n+    String recordJson = \"{\\\"type\\\":\\\"record\\\", \\\"name\\\":\\\"Test\\\", \\\"fields\\\":\"\n+      +\"[{\\\"name\\\":\\\"x\\\", \\\"type\\\":\\\"string\\\"}]}\";\n+    Schema schema = Schema.parse(recordJson);\n+    GenericData.Record record = new GenericData.Record(schema);\n+    try {\n+      checkBinary(schema, record,\n+                  new GenericDatumWriter<Object>(),\n+                  new GenericDatumReader<Object>());\n+    } catch (NullPointerException e) {\n+      assertEquals(\"null of string in field x of Test\", e.getMessage());\n+    }\n+  }\n+\n   private static void checkParseError(String json) {\n     try {\n       Schema.parse(json);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "avro",
        "message": "AVRO-780. Java: Fix a NullPointerException with reflect data when a union contains an array and null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/avro/trunk@1087136 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/avro/commit/a02c5c2ce3edae38b70648b177a78cc7a64a7b25",
        "parent": "https://github.com/apache/avro/commit/7784b56a4aeda94de1de3bbe12a468108b7b8e0e",
        "bug_id": "avro_8",
        "file": [
            {
                "sha": "e82fedaac1bd40a3059b8f089bd69995f54beed4",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/avro/blob/a02c5c2ce3edae38b70648b177a78cc7a64a7b25/CHANGES.txt",
                "raw_url": "https://github.com/apache/avro/raw/a02c5c2ce3edae38b70648b177a78cc7a64a7b25/CHANGES.txt",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/CHANGES.txt?ref=a02c5c2ce3edae38b70648b177a78cc7a64a7b25",
                "patch": "@@ -29,6 +29,9 @@ Avro 1.5.1 (unreleased)\n \n     AVRO-786. Java: Fix equals() to work on objects containing maps. (cutting)\n \n+    AVRO-780. Java: Fix a NullPointerException with reflect data when\n+    a union contains an array and null. (cutting)\n+\n Avro 1.5.0 (10 March 2011)\n \n   INCOMPATIBLE CHANGES",
                "deletions": 0
            },
            {
                "sha": "8a6585e35d9740e70e19f1c6ac88c37b3c9c362c",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java",
                "blob_url": "https://github.com/apache/avro/blob/a02c5c2ce3edae38b70648b177a78cc7a64a7b25/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java",
                "raw_url": "https://github.com/apache/avro/raw/a02c5c2ce3edae38b70648b177a78cc7a64a7b25/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java?ref=a02c5c2ce3edae38b70648b177a78cc7a64a7b25",
                "patch": "@@ -106,6 +106,7 @@ protected boolean isRecord(Object datum) {\n \n   @Override\n   protected boolean isArray(Object datum) {\n+    if (datum == null) return false;\n     return (datum instanceof Collection) || datum.getClass().isArray();\n   }\n ",
                "deletions": 0
            },
            {
                "sha": "17248ac3c7e5d585dbafba9ab94a818f5c991300",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectDatumWriter.java",
                "blob_url": "https://github.com/apache/avro/blob/a02c5c2ce3edae38b70648b177a78cc7a64a7b25/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectDatumWriter.java",
                "raw_url": "https://github.com/apache/avro/raw/a02c5c2ce3edae38b70648b177a78cc7a64a7b25/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectDatumWriter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectDatumWriter.java?ref=a02c5c2ce3edae38b70648b177a78cc7a64a7b25",
                "patch": "@@ -103,7 +103,7 @@ protected void write(Schema schema, Object datum, Encoder out)\n     } catch (NullPointerException e) {            // improve error message\n       NullPointerException result =\n         new NullPointerException(\"in \"+schema.getFullName()+\" \"+e.getMessage());\n-      result.initCause(e);\n+      result.initCause(e.getCause() == null ? e : e.getCause());\n       throw result;\n     }\n   }",
                "deletions": 1
            },
            {
                "sha": "f6856c77e39ddf2f99163cd382c471591dfce574",
                "filename": "lang/java/avro/src/test/java/org/apache/avro/TestReflect.java",
                "blob_url": "https://github.com/apache/avro/blob/a02c5c2ce3edae38b70648b177a78cc7a64a7b25/lang/java/avro/src/test/java/org/apache/avro/TestReflect.java",
                "raw_url": "https://github.com/apache/avro/raw/a02c5c2ce3edae38b70648b177a78cc7a64a7b25/lang/java/avro/src/test/java/org/apache/avro/TestReflect.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/test/java/org/apache/avro/TestReflect.java?ref=a02c5c2ce3edae38b70648b177a78cc7a64a7b25",
                "patch": "@@ -550,6 +550,14 @@ public void testReflectWithinGeneric() throws Exception {\n     checkBinary(schema, record);\n   }\n \n+  /** Test union of null and an array. */\n+  @Test\n+  public void testNullArray() throws Exception {\n+    String json = \"[{\\\"type\\\":\\\"array\\\", \\\"items\\\": \\\"long\\\"}, \\\"null\\\"]\";\n+    Schema schema = Schema.parse(json);\n+    checkBinary(schema, null);\n+  }\n+\n   public static void checkBinary(Schema schema, Object datum)\n     throws IOException {\n     ReflectDatumWriter<Object> writer = new ReflectDatumWriter<Object>(schema);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "avro",
        "message": "AVRO-759. Java: Fix NullPointerException when some but not all fields are aliased.  Contributed by Xiaolu Ye.\n\ngit-svn-id: https://svn.apache.org/repos/asf/avro/trunk@1071083 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/avro/commit/9075618bf7890a8761107fa96da92dedf73d8a3e",
        "parent": "https://github.com/apache/avro/commit/c6469bfc32c0ebd53439b42feebc28439ac04506",
        "bug_id": "avro_9",
        "file": [
            {
                "sha": "6e3b3704796636aeeec35ef7270678c6bc9f8f2a",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/avro/blob/9075618bf7890a8761107fa96da92dedf73d8a3e/CHANGES.txt",
                "raw_url": "https://github.com/apache/avro/raw/9075618bf7890a8761107fa96da92dedf73d8a3e/CHANGES.txt",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/CHANGES.txt?ref=9075618bf7890a8761107fa96da92dedf73d8a3e",
                "patch": "@@ -212,6 +212,9 @@ Avro 1.5.0 (unreleased)\n     over stateful connections, permitting interoperability with\n     Python and Ruby, which drop the one-way message attribute. (cutting)\n \n+    AVRO-759. Java: Fix NullPointerException when some but not all\n+    fields are aliased. (Xiaolu Ye via cutting)\n+\n Avro 1.4.1 (13 October 2010)\n \n   NEW FEATURES",
                "deletions": 0
            },
            {
                "sha": "d69cb51aaf2a3a06741d727a36f4e132c4771418",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "blob_url": "https://github.com/apache/avro/blob/9075618bf7890a8761107fa96da92dedf73d8a3e/lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "raw_url": "https://github.com/apache/avro/raw/9075618bf7890a8761107fa96da92dedf73d8a3e/lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/Schema.java?ref=9075618bf7890a8761107fa96da92dedf73d8a3e",
                "patch": "@@ -1253,7 +1253,10 @@ private static void getAliases(Schema schema,\n     Map<String,String> recordAliases = fieldAliases.get(record);\n     if (recordAliases == null)\n       return field;\n-    return recordAliases.get(field);\n+    String alias = recordAliases.get(field);\n+    if (alias == null)\n+      return field;\n+    return alias;\n   }\n \n   /**",
                "deletions": 1
            },
            {
                "sha": "6585230caadafaf11bfc74578346d70b3d2ea48d",
                "filename": "lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java",
                "blob_url": "https://github.com/apache/avro/blob/9075618bf7890a8761107fa96da92dedf73d8a3e/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java",
                "raw_url": "https://github.com/apache/avro/raw/9075618bf7890a8761107fa96da92dedf73d8a3e/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java?ref=9075618bf7890a8761107fa96da92dedf73d8a3e",
                "patch": "@@ -482,10 +482,12 @@ public void testFieldDocs() {\n \n   @Test\n   public void testAliases() throws Exception {\n-    String t1 = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"a.b\\\",\"\n-      +\"\\\"fields\\\":[{\\\"name\\\":\\\"f\\\",\\\"type\\\":\\\"long\\\"}]}\";\n+    String t1 = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"a.b\\\",\\\"fields\\\":[\"\n+      +\"{\\\"name\\\":\\\"f\\\",\\\"type\\\":\\\"long\\\"},\"\n+      +\"{\\\"name\\\":\\\"h\\\",\\\"type\\\":\\\"int\\\"}]}\";\n     String t2 = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"x.y\\\",\\\"aliases\\\":[\\\"a.b\\\"],\"\n-      +\"\\\"fields\\\":[{\\\"name\\\":\\\"g\\\",\\\"type\\\":\\\"long\\\",\\\"aliases\\\":[\\\"f\\\"]}]}\";\n+      +\"\\\"fields\\\":[{\\\"name\\\":\\\"g\\\",\\\"type\\\":\\\"long\\\",\\\"aliases\\\":[\\\"f\\\"]},\"\n+      +\"{\\\"name\\\":\\\"h\\\",\\\"type\\\":\\\"int\\\"}]}\";\n     Schema s1 = Schema.parse(t1);\n     Schema s2 = Schema.parse(t2);\n     Schema s3 = Schema.applyAliases(s1,s2);",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "avro",
        "message": "AVRO-86. Java: Fix NullPointerException when reflect API infers schema for a class without a package.\n\ngit-svn-id: https://svn.apache.org/repos/asf/avro/trunk@989252 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/avro/commit/ce397913a36beaf1077aa2f98cab98f9b2a0a45a",
        "parent": "https://github.com/apache/avro/commit/35bb270f96850e789372c9e68855a9727e64aa9c",
        "bug_id": "avro_10",
        "file": [
            {
                "sha": "43008aa3f643bafd14ea189e2e5963416a42435b",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/avro/blob/ce397913a36beaf1077aa2f98cab98f9b2a0a45a/CHANGES.txt",
                "raw_url": "https://github.com/apache/avro/raw/ce397913a36beaf1077aa2f98cab98f9b2a0a45a/CHANGES.txt",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/CHANGES.txt?ref=ce397913a36beaf1077aa2f98cab98f9b2a0a45a",
                "patch": "@@ -178,6 +178,9 @@ Avro 1.4.0 (unreleased)\n     AVRO-541. Java: Fix sporadic corruption when appending a\n     compressed file to an uncompressed file. (scottcarey via cutting)\n \n+    AVRO-86. Java: Fix NullPointerException when reflect API infers\n+    schema for a class without a package. (cutting)\n+\n Avro 1.3.3 (7 June 2010)\n \n   IMPROVEMENTS",
                "deletions": 0
            },
            {
                "sha": "ec92e180f7771044082a65af86cee936fa7cfdca",
                "filename": "lang/java/src/java/org/apache/avro/reflect/ReflectData.java",
                "blob_url": "https://github.com/apache/avro/blob/ce397913a36beaf1077aa2f98cab98f9b2a0a45a/lang/java/src/java/org/apache/avro/reflect/ReflectData.java",
                "raw_url": "https://github.com/apache/avro/raw/ce397913a36beaf1077aa2f98cab98f9b2a0a45a/lang/java/src/java/org/apache/avro/reflect/ReflectData.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/reflect/ReflectData.java?ref=ce397913a36beaf1077aa2f98cab98f9b2a0a45a",
                "patch": "@@ -245,7 +245,7 @@ protected Schema createSchema(Type type, Map<String,Schema> names) {\n       Schema schema = names.get(fullName);\n       if (schema == null) {\n         String name = c.getSimpleName();\n-        String space = c.getPackage().getName();\n+        String space = c.getPackage() == null ? \"\" : c.getPackage().getName();\n         if (c.getEnclosingClass() != null)                   // nested class\n           space = c.getEnclosingClass().getName() + \"$\";\n         Union union = c.getAnnotation(Union.class);\n@@ -321,7 +321,8 @@ public static Schema makeNullable(Schema schema) {\n     Map<String,Field> fields = new LinkedHashMap<String,Field>();\n     Class c = recordClass;\n     do {\n-      if (c.getPackage().getName().startsWith(\"java.\"))\n+      if (c.getPackage() != null\n+          && c.getPackage().getName().startsWith(\"java.\"))\n         break;                                    // skip java built-in classes\n       for (Field field : c.getDeclaredFields())\n         if ((field.getModifiers() & (Modifier.TRANSIENT|Modifier.STATIC)) == 0)\n@@ -348,7 +349,8 @@ protected Schema createFieldSchema(Field field, Map<String, Schema> names) {\n   @Override\n   public Protocol getProtocol(Class iface) {\n     Protocol protocol =\n-      new Protocol(iface.getSimpleName(), iface.getPackage().getName()); \n+      new Protocol(iface.getSimpleName(),\n+                   iface.getPackage()==null?\"\":iface.getPackage().getName());\n     Map<String,Schema> names = new LinkedHashMap<String,Schema>();\n     Map<String,Message> messages = protocol.getMessages();\n     for (Method method : iface.getMethods())",
                "deletions": 3
            },
            {
                "sha": "1d896144075b5691cf25b4c7cf84f74445614391",
                "filename": "lang/java/src/test/java/NoPackage.java",
                "blob_url": "https://github.com/apache/avro/blob/ce397913a36beaf1077aa2f98cab98f9b2a0a45a/lang/java/src/test/java/NoPackage.java",
                "raw_url": "https://github.com/apache/avro/raw/ce397913a36beaf1077aa2f98cab98f9b2a0a45a/lang/java/src/test/java/NoPackage.java",
                "status": "added",
                "changes": 21,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/test/java/NoPackage.java?ref=ce397913a36beaf1077aa2f98cab98f9b2a0a45a",
                "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/** I am a class without a package. */\n+public interface NoPackage {\n+}",
                "deletions": 0
            },
            {
                "sha": "bb0fe6e36f57ed40605b3b585f4550a672703e50",
                "filename": "lang/java/src/test/java/org/apache/avro/TestReflect.java",
                "blob_url": "https://github.com/apache/avro/blob/ce397913a36beaf1077aa2f98cab98f9b2a0a45a/lang/java/src/test/java/org/apache/avro/TestReflect.java",
                "raw_url": "https://github.com/apache/avro/raw/ce397913a36beaf1077aa2f98cab98f9b2a0a45a/lang/java/src/test/java/org/apache/avro/TestReflect.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/test/java/org/apache/avro/TestReflect.java?ref=ce397913a36beaf1077aa2f98cab98f9b2a0a45a",
                "patch": "@@ -43,6 +43,7 @@\n import org.apache.avro.reflect.Stringable;\n import org.apache.avro.reflect.Nullable;\n import org.apache.avro.reflect.Union;\n+\n import org.junit.Test;\n \n public class TestReflect {\n@@ -511,5 +512,14 @@ public void testOverloadedMethod() {\n     ReflectData.get().getProtocol(P3.class);\n   }\n \n+  @Test\n+  public void testNoPackageSchema() throws Exception {\n+    ReflectData.get().getSchema(Class.forName(\"NoPackage\"));\n+  }\n+\n+  @Test\n+  public void testNoPackageProtocol() throws Exception {\n+    ReflectData.get().getProtocol(Class.forName(\"NoPackage\"));\n+  }\n \n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "avro",
        "message": "AVRO-382. Avro hashCode throws a NullPointerException when fields are uninitialized.  Contributed by Michael Armbrust.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/avro/trunk@903745 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/avro/commit/8f3ad160ce8c452bfbafc4ca09ab263a2e6aa06a",
        "parent": "https://github.com/apache/avro/commit/0319db2a8fe241b364968693afbb9bd741ee148d",
        "bug_id": "avro_11",
        "file": [
            {
                "sha": "15f800971d28c847868a59615d7ecbe64c9a495d",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/avro/blob/8f3ad160ce8c452bfbafc4ca09ab263a2e6aa06a/CHANGES.txt",
                "raw_url": "https://github.com/apache/avro/raw/8f3ad160ce8c452bfbafc4ca09ab263a2e6aa06a/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/CHANGES.txt?ref=8f3ad160ce8c452bfbafc4ca09ab263a2e6aa06a",
                "patch": "@@ -390,6 +390,8 @@ Trunk (unreleased changes)\n \n     AVRO-373. EOF detection broken in JsonDecoder (thiru)\n \n+    AVRO-382. Avro hashCode throws a NullPointerException when fields are uninitialized (Michael Armbrust via philz)\n+\n Avro 1.2.0 (14 October 2009)\n \n   INCOMPATIBLE CHANGES",
                "deletions": 0
            },
            {
                "sha": "da9a27cb78b247d4e9db97f743bd26f026db9418",
                "filename": "lang/java/src/java/org/apache/avro/generic/GenericData.java",
                "blob_url": "https://github.com/apache/avro/blob/8f3ad160ce8c452bfbafc4ca09ab263a2e6aa06a/lang/java/src/java/org/apache/avro/generic/GenericData.java",
                "raw_url": "https://github.com/apache/avro/raw/8f3ad160ce8c452bfbafc4ca09ab263a2e6aa06a/lang/java/src/java/org/apache/avro/generic/GenericData.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/generic/GenericData.java?ref=8f3ad160ce8c452bfbafc4ca09ab263a2e6aa06a",
                "patch": "@@ -430,7 +430,7 @@ public int hashCode(Object o, Schema s) {\n     case NULL:\n       return 0;\n     default:\n-      return o.hashCode();\n+      return (o == null) ? 0 : o.hashCode();\n     }\n   }\n ",
                "deletions": 1
            },
            {
                "sha": "a253ef588e89b3ae2f91edf9c6062da1132dae7b",
                "filename": "lang/java/src/test/java/org/apache/avro/TestProtocolSpecific.java",
                "blob_url": "https://github.com/apache/avro/blob/8f3ad160ce8c452bfbafc4ca09ab263a2e6aa06a/lang/java/src/test/java/org/apache/avro/TestProtocolSpecific.java",
                "raw_url": "https://github.com/apache/avro/raw/8f3ad160ce8c452bfbafc4ca09ab263a2e6aa06a/lang/java/src/test/java/org/apache/avro/TestProtocolSpecific.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/test/java/org/apache/avro/TestProtocolSpecific.java?ref=8f3ad160ce8c452bfbafc4ca09ab263a2e6aa06a",
                "patch": "@@ -81,6 +81,12 @@ public void testHello() throws IOException {\n     assertEquals(new Utf8(\"goodbye\"), response);\n   }\n \n+  @Test\n+  public void testHashCode() throws IOException {\n+    TestError error = new TestError();\n+    error.hashCode();\n+  }\n+\n   @Test\n   public void testEcho() throws IOException {\n     TestRecord record = new TestRecord();",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "avro",
        "message": "AVRO-141.  Fix a NullPointerException in ReflectData#isRecord().  Contributed by Isabel Drost.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/avro/trunk@825217 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/avro/commit/a7bfbd4b56d99655062c069e26ab6d476f5f06a0",
        "parent": "https://github.com/apache/avro/commit/2427f18b729c51eb485f580572086bc782974d4a",
        "bug_id": "avro_12",
        "file": [
            {
                "sha": "228e11f0f2f0681830a0dfd5646cba604bcf1499",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/avro/blob/a7bfbd4b56d99655062c069e26ab6d476f5f06a0/CHANGES.txt",
                "raw_url": "https://github.com/apache/avro/raw/a7bfbd4b56d99655062c069e26ab6d476f5f06a0/CHANGES.txt",
                "status": "modified",
                "changes": 15,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/CHANGES.txt?ref=a7bfbd4b56d99655062c069e26ab6d476f5f06a0",
                "patch": "@@ -1,5 +1,20 @@\n Avro Change Log\n \n+Trunk (unreleased changes)\n+\n+  INCOMPATIBLE CHANGES\n+\n+  NEW FEATURES\n+\n+  IMPROVEMENTS\n+\n+  OPTIMIZATIONS\n+\n+  BUG FIXES\n+ \n+    AVRO-141.  Fix a NullPointerException in ReflectData#isRecord().\n+    (Isabel Drost via cutting)\n+\n Avro 1.2.0 (14 October 2009)\n \n   INCOMPATIBLE CHANGES",
                "deletions": 0
            },
            {
                "sha": "a47c441c02348a4fec4cc934763db0fe08852151",
                "filename": "src/java/org/apache/avro/reflect/ReflectData.java",
                "blob_url": "https://github.com/apache/avro/blob/a7bfbd4b56d99655062c069e26ab6d476f5f06a0/src/java/org/apache/avro/reflect/ReflectData.java",
                "raw_url": "https://github.com/apache/avro/raw/a7bfbd4b56d99655062c069e26ab6d476f5f06a0/src/java/org/apache/avro/reflect/ReflectData.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/src/java/org/apache/avro/reflect/ReflectData.java?ref=a7bfbd4b56d99655062c069e26ab6d476f5f06a0",
                "patch": "@@ -76,6 +76,7 @@ protected ReflectData() {}\n \n   @Override\n   protected boolean isRecord(Object datum) {\n+    if (datum == null) return false;\n     return getSchema(datum.getClass()).getType() == Type.RECORD;\n   }\n ",
                "deletions": 0
            },
            {
                "sha": "7fbd9944ac8f941c812674a6aa550442d688841e",
                "filename": "src/test/java/org/apache/avro/TestReflect.java",
                "blob_url": "https://github.com/apache/avro/blob/a7bfbd4b56d99655062c069e26ab6d476f5f06a0/src/test/java/org/apache/avro/TestReflect.java",
                "raw_url": "https://github.com/apache/avro/raw/a7bfbd4b56d99655062c069e26ab6d476f5f06a0/src/test/java/org/apache/avro/TestReflect.java",
                "status": "modified",
                "changes": 19,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/src/test/java/org/apache/avro/TestReflect.java?ref=a7bfbd4b56d99655062c069e26ab6d476f5f06a0",
                "patch": "@@ -121,23 +121,32 @@ public boolean equals(Object obj) {\n     \n     public static class AnotherSampleRecord {\n       private Integer a = null;\n-      \n+      private SampleRecord s = null;\n+\n       public AnotherSampleRecord() {\n       }\n-      \n+\n       AnotherSampleRecord(Integer a) {\n         this.a = a;\n+        this.s = new SampleRecord();\n       }\n \n       public int hashCode() {\n-        return (a != null ? a.hashCode() : 0);\n+        int hash = (a != null ? a.hashCode() : 0);\n+        hash += (s != null ? s.hashCode() : 0);\n+        return hash;\n       }\n \n       public boolean equals(Object other) {\n         if (other instanceof AnotherSampleRecord) {\n-          return this.a == ((AnotherSampleRecord)other).a;\n+          AnotherSampleRecord o = (AnotherSampleRecord) other;\n+          boolean equals = this.a == o.a;\n+          if (this.s == null && o.s != null)\n+            equals = false;\n+          if (this.s != null && this.s.equals(o.s))\n+            equals = true;\n         }\n-        return false;\n+        return true;\n       }\n     }\n   }",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "avro",
        "message": "AVRO-1780: Java: Fix NPE in tools. Contributed by Tom White.\n\nChanges for AVRO-1728 moved NOTICE, which was used to create the\nno-argument output for Java's avro-tools. Using the new location fixed\nthe NPE and this also includes an update to show just the top of NOTICE\nsince it is now much longer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/avro/trunk@1724287 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/avro/commit/2564afeb1fdc4792603f7ddc1a7b3b347d05b54e",
        "parent": "https://github.com/apache/avro/commit/080cd772f235a8f490928ce512aa62089af0f203",
        "bug_id": "avro_13",
        "file": [
            {
                "sha": "93c827ccd7d7934095ee0c5da25c0e8b3313e698",
                "filename": "lang/java/tools/src/main/java/org/apache/avro/tool/Main.java",
                "blob_url": "https://github.com/apache/avro/blob/2564afeb1fdc4792603f7ddc1a7b3b347d05b54e/lang/java/tools/src/main/java/org/apache/avro/tool/Main.java",
                "raw_url": "https://github.com/apache/avro/raw/2564afeb1fdc4792603f7ddc1a7b3b347d05b54e/lang/java/tools/src/main/java/org/apache/avro/tool/Main.java",
                "status": "modified",
                "changes": 15,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/tools/src/main/java/org/apache/avro/tool/Main.java?ref=2564afeb1fdc4792603f7ddc1a7b3b347d05b54e",
                "patch": "@@ -17,6 +17,8 @@\n  */\n package org.apache.avro.tool;\n \n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n import java.util.Arrays;\n import java.util.Map;\n import java.util.TreeMap;\n@@ -89,7 +91,7 @@ private int run(String[] args) throws Exception {\n     System.err.print(\"Version \");\n     printStream(Main.class.getClassLoader().getResourceAsStream(\"VERSION.txt\"));\n     System.err.print(\" of \");\n-    printStream(Main.class.getClassLoader().getResourceAsStream(\"NOTICE.txt\"));\n+    printHead(Main.class.getClassLoader().getResourceAsStream(\"META-INF/NOTICE\"), 5);\n     System.err.println(\"----------------\");\n \n     System.err.println(\"Available tools:\");\n@@ -106,4 +108,15 @@ private static void printStream(InputStream in) throws Exception {\n       System.err.write(buffer, 0, i);\n   }\n \n+  private static void printHead(InputStream in, int lines) throws Exception {\n+    BufferedReader r = new BufferedReader(new InputStreamReader(in));\n+    for (int i = 0; i < lines; i++) {\n+      String line = r.readLine();\n+      if (line == null) {\n+        break;\n+      }\n+      System.err.println(line);\n+    }\n+  }\n+\n }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "avro",
        "message": "AVRO-1655. Java: Fix NPE in RecordSchema#toString. Contributed by Lars Francke.\n\nThis also adds a variant of Schema.createRecord with a field list to\nallow callers to create valid record schemas in a single call.\n\ngit-svn-id: https://svn.apache.org/repos/asf/avro/trunk@1674398 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/avro/commit/60d9ef0ad24d91735210830b2481e884ec45c9e7",
        "parent": "https://github.com/apache/avro/commit/630562a0b16ae73c8cb8d85da723bca6b28de6db",
        "bug_id": "avro_14",
        "file": [
            {
                "sha": "e0ce5c79e73ccec11d59d9b41080dc2132822825",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/avro/blob/60d9ef0ad24d91735210830b2481e884ec45c9e7/CHANGES.txt",
                "raw_url": "https://github.com/apache/avro/raw/60d9ef0ad24d91735210830b2481e884ec45c9e7/CHANGES.txt",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/CHANGES.txt?ref=60d9ef0ad24d91735210830b2481e884ec45c9e7",
                "patch": "@@ -68,6 +68,9 @@ Trunk (not yet released)\n     AVRO-1628. Java: Add Schema#createUnion(Schema ...) convenience method.\n     (Cl\u00e9ment Mahtieu via cutting)\n \n+    AVRO-1655. Java: Add Schema.createRecord with field list.\n+    (Lars Francke via blue)\n+\n   BUG FIXES\n \n     AVRO-1553. Java: MapReduce never uses MapOutputValueSchema (tomwhite)\n@@ -131,6 +134,9 @@ Trunk (not yet released)\n     AVRO-1652. Java: Do not warn or validate defaults if validation is off.\n     (Michael D'Angelo via blue)\n \n+    AVRO-1655. Java: Fix NPE in RecordSchema#toString when fields are null.\n+    (Lars Francke via blue)\n+\n Avro 1.7.7 (23 July 2014)\n \n   NEW FEATURES",
                "deletions": 0
            },
            {
                "sha": "1f2dd8fa7ca862b542e01497bfb3ee7ebf982799",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "blob_url": "https://github.com/apache/avro/blob/60d9ef0ad24d91735210830b2481e884ec45c9e7/lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "raw_url": "https://github.com/apache/avro/raw/60d9ef0ad24d91735210830b2481e884ec45c9e7/lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "status": "modified",
                "changes": 22,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/Schema.java?ref=60d9ef0ad24d91735210830b2481e884ec45c9e7",
                "patch": "@@ -151,6 +151,12 @@ public static Schema createRecord(String name, String doc, String namespace,\n     return new RecordSchema(new Name(name, namespace), doc, isError);\n   }\n \n+  /** Create a named record schema with fields already set. */\n+  public static Schema createRecord(String name, String doc, String namespace,\n+                                    boolean isError, List<Field> fields) {\n+    return new RecordSchema(new Name(name, namespace), doc, isError, fields);\n+  }\n+\n   /** Create an enum schema. */\n   public static Schema createEnum(String name, String doc, String namespace,\n                                   List<String> values) {\n@@ -594,6 +600,14 @@ public RecordSchema(Name name, String doc, boolean isError) {\n       super(Type.RECORD, name, doc);\n       this.isError = isError;\n     }\n+\n+    public RecordSchema(Name name, String doc, boolean isError,\n+                        List<Field> fields) {\n+      super(Type.RECORD, name, doc);\n+      this.isError = isError;\n+      setFields(fields);\n+    }\n+\n     public boolean isError() { return isError; }\n \n     @Override\n@@ -671,8 +685,12 @@ void toJson(Names names, JsonGenerator gen) throws IOException {\n       names.space = name.space;                   // set default namespace\n       if (getDoc() != null)\n         gen.writeStringField(\"doc\", getDoc());\n-      gen.writeFieldName(\"fields\");\n-      fieldsToJson(names, gen);\n+\n+      if (fields != null) {\n+        gen.writeFieldName(\"fields\");\n+        fieldsToJson(names, gen);\n+      }\n+\n       writeProps(gen);\n       aliasesToJson(gen);\n       gen.writeEndObject();",
                "deletions": 2
            },
            {
                "sha": "ba2cab49d72b8ce9c1619994a9355daf42c15f1f",
                "filename": "lang/java/avro/src/test/java/org/apache/avro/TestSchema.java",
                "blob_url": "https://github.com/apache/avro/blob/60d9ef0ad24d91735210830b2481e884ec45c9e7/lang/java/avro/src/test/java/org/apache/avro/TestSchema.java",
                "raw_url": "https://github.com/apache/avro/raw/60d9ef0ad24d91735210830b2481e884ec45c9e7/lang/java/avro/src/test/java/org/apache/avro/TestSchema.java",
                "status": "modified",
                "changes": 25,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/test/java/org/apache/avro/TestSchema.java?ref=60d9ef0ad24d91735210830b2481e884ec45c9e7",
                "patch": "@@ -75,4 +75,29 @@ public void testCreateUnionVarargs() {\n     Schema schema = Schema.createUnion(Schema.create(Type.NULL), Schema.create(Type.LONG));\n     assertEquals(expected, schema);\n   }\n+\n+  @Test\n+  public void testEmptyRecordSchema() {\n+    Schema schema = Schema.createRecord(\"foobar\", null, null, false);\n+    String schemaString = schema.toString();\n+    assertNotNull(schemaString);\n+  }\n+\n+  @Test\n+  public void testSchemaWithFields() {\n+    List<Field> fields = new ArrayList<Field>();\n+    fields.add(new Field(\"field_name1\", Schema.create(Type.NULL), null, null));\n+    fields.add(new Field(\"field_name2\", Schema.create(Type.INT), null, null));\n+    Schema schema = Schema.createRecord(\"foobar\", null, null, false, fields);\n+    String schemaString = schema.toString();\n+    assertNotNull(schemaString);\n+    assertEquals(2, schema.getFields().size());\n+  }\n+\n+  @Test(expected = NullPointerException.class)\n+  public void testSchemaWithNullFields() {\n+    Schema.createRecord(\"foobar\", null, null, false, null);\n+  }\n+\n+\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "avro",
        "message": "AVRO-350.  Fix GenericData.Record#get(String) to return null rather than throw NPE when passed a field name not in the record.  Contributed by Kevin Oliver.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/avro/trunk@905827 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/avro/commit/1b9263f5e8587f147c7d2920552c639f1bbf9759",
        "parent": "https://github.com/apache/avro/commit/f86e0305115fdf9aaa90b19e3bb8ee58324a1406",
        "bug_id": "avro_15",
        "file": [
            {
                "sha": "9cc5d13ccf511cffa28e8d57249d6b834891350f",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/avro/blob/1b9263f5e8587f147c7d2920552c639f1bbf9759/CHANGES.txt",
                "raw_url": "https://github.com/apache/avro/raw/1b9263f5e8587f147c7d2920552c639f1bbf9759/CHANGES.txt",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/CHANGES.txt?ref=1b9263f5e8587f147c7d2920552c639f1bbf9759",
                "patch": "@@ -414,6 +414,10 @@ Trunk (unreleased changes)\n \n     AVRO-361. Specific Compiler fails to handle union with two fixed branches (Scott Carey via philz)\n \n+    AVRO-350. Fix GenericData.Record#get(String) to return null rather than\n+    throw NPE when passed a field name that's not in the record.\n+    (Kevin Oliver via cutting)\n+\n Avro 1.2.0 (14 October 2009)\n \n   INCOMPATIBLE CHANGES",
                "deletions": 0
            },
            {
                "sha": "37f2ed8eb15a7c31bf745b761862b280dec71c02",
                "filename": "lang/java/src/java/org/apache/avro/generic/GenericData.java",
                "blob_url": "https://github.com/apache/avro/blob/1b9263f5e8587f147c7d2920552c639f1bbf9759/lang/java/src/java/org/apache/avro/generic/GenericData.java",
                "raw_url": "https://github.com/apache/avro/raw/1b9263f5e8587f147c7d2920552c639f1bbf9759/lang/java/src/java/org/apache/avro/generic/GenericData.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/generic/GenericData.java?ref=1b9263f5e8587f147c7d2920552c639f1bbf9759",
                "patch": "@@ -56,7 +56,9 @@ public Record(Schema schema) {\n     }\n     @Override public void put(int i, Object v) { values[i] = v; }\n     @Override public Object get(String key) {\n-      return values[schema.getFields().get(key).pos()];\n+      Field field = schema.getFields().get(key);\n+      if (field == null) return null;\n+      return values[field.pos()];\n     }\n     @Override public Object get(int i) { return values[i]; }\n     @Override public boolean equals(Object o) {",
                "deletions": 1
            },
            {
                "sha": "5c7061969f5ea437f4c72d1a323673faaf5b3610",
                "filename": "lang/java/src/test/java/org/apache/avro/generic/TestGenericData.java",
                "blob_url": "https://github.com/apache/avro/blob/1b9263f5e8587f147c7d2920552c639f1bbf9759/lang/java/src/test/java/org/apache/avro/generic/TestGenericData.java",
                "raw_url": "https://github.com/apache/avro/raw/1b9263f5e8587f147c7d2920552c639f1bbf9759/lang/java/src/test/java/org/apache/avro/generic/TestGenericData.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/test/java/org/apache/avro/generic/TestGenericData.java?ref=1b9263f5e8587f147c7d2920552c639f1bbf9759",
                "patch": "@@ -17,11 +17,14 @@\n  */\n package org.apache.avro.generic;\n \n+import java.util.LinkedHashMap;\n+\n import static org.junit.Assert.*;\n \n import java.util.Arrays;\n \n import org.apache.avro.Schema;\n+import org.apache.avro.Schema.Field;\n import org.apache.avro.AvroRuntimeException;\n import org.apache.avro.Schema.Type;\n \n@@ -57,4 +60,12 @@ public void testHashCode() {\n         Arrays.asList(Schema.create(Type.BOOLEAN), Schema.create(Type.STRING))));\n   }\n \n+  @Test\n+  public void testRecordGetFieldDoesntExist() throws Exception {\n+    LinkedHashMap<String, Field> fields = new LinkedHashMap<String, Field>();\n+    Schema schema = Schema.createRecord(fields);\n+    GenericData.Record record = new GenericData.Record(schema);\n+    assertNull(record.get(\"does not exist\"));\n+  }\n+    \n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "avro",
        "message": "AVRO-387.  Add IndexedRecord interface, so that specific & generic may share #toString(), #hashCode(), #compare(), etc.  Also fix toString() and hashCode() to not throw NPE for uninitialized records.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/avro/trunk@905807 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/avro/commit/f86e0305115fdf9aaa90b19e3bb8ee58324a1406",
        "parent": "https://github.com/apache/avro/commit/6c7b0e1396e9e6326f80a82515f4de44d4f0ebf9",
        "bug_id": "avro_16",
        "file": [
            {
                "sha": "be908211b9d0f421efc6b37953a8fc3c7e7048b1",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/CHANGES.txt",
                "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/CHANGES.txt",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/CHANGES.txt?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406",
                "patch": "@@ -36,6 +36,11 @@ Trunk (unreleased changes)\n \n     AVRO-374. Remove and ignore files that are created by autoreconf. (sbanacho)\n \n+    AVRO-387. Add IndexedRecord interface, common to both specific and\n+    generic records, so that toString() and hashCode() implementations\n+    can be shared.  Also fix toString() and hashCode() to not throw\n+    NPE for uninitialized records. (cutting)\n+\n   NEW FEATURES\n \n     AVRO-151. Validating Avro schema parser for C (massie)",
                "deletions": 0
            },
            {
                "sha": "5f7141d78ecf50f43a0a54accdf85331ea105867",
                "filename": "lang/java/src/java/org/apache/avro/generic/GenericData.java",
                "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/generic/GenericData.java",
                "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/generic/GenericData.java",
                "status": "modified",
                "changes": 30,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/generic/GenericData.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406",
                "patch": "@@ -175,8 +175,8 @@ public int compareTo(Fixed that) {\n   public boolean validate(Schema schema, Object datum) {\n     switch (schema.getType()) {\n     case RECORD:\n-      if (!(datum instanceof GenericRecord)) return false;\n-      GenericRecord fields = (GenericRecord)datum;\n+      if (!(datum instanceof IndexedRecord)) return false;\n+      IndexedRecord fields = (IndexedRecord)datum;\n       for (Map.Entry<String, Field> entry : schema.getFields().entrySet()) {\n         Field f = entry.getValue();\n         if (!validate(f.schema(), fields.get(f.pos())))\n@@ -225,11 +225,12 @@ public String toString(Object datum) {\n     toString(datum, buffer);\n     return buffer.toString();\n   }\n-  private void toString(Object datum, StringBuilder buffer) {\n-    if (datum instanceof GenericRecord) {\n+  /** Renders a Java datum as <a href=\"http://www.json.org/\">JSON</a>. */\n+  protected void toString(Object datum, StringBuilder buffer) {\n+    if (datum instanceof IndexedRecord) {\n       buffer.append(\"{\");\n       int count = 0;\n-      GenericRecord record = (GenericRecord)datum;\n+      IndexedRecord record = (IndexedRecord)datum;\n       for (Map.Entry<String,Field> e :\n              record.getSchema().getFields().entrySet()) {\n         toString(e.getKey(), buffer);\n@@ -280,8 +281,8 @@ private void toString(Object datum, StringBuilder buffer) {\n \n   /** Create a schema given an example datum. */\n   public Schema induce(Object datum) {\n-    if (datum instanceof GenericRecord) {\n-      return ((GenericRecord)datum).getSchema();\n+    if (datum instanceof IndexedRecord) {\n+      return ((IndexedRecord)datum).getSchema();\n     } else if (datum instanceof GenericArray) {\n       Schema elementType = null;\n       for (Object element : (GenericArray)datum) {\n@@ -370,11 +371,11 @@ protected boolean isArray(Object datum) {\n \n   /** Called by the default implementation of {@link #instanceOf}.*/\n   protected boolean isRecord(Object datum) {\n-    return datum instanceof GenericRecord;\n+    return datum instanceof IndexedRecord;\n   }\n \n   /** Called to obtain the schema of a record.  By default calls\n-   * {GenericRecord#getSchema().  May be overridden for alternate record\n+   * {GenericContainer#getSchema().  May be overridden for alternate record\n    * representations. */\n   protected Schema getRecordSchema(Object record) {\n     return ((GenericContainer)record).getSchema();\n@@ -387,7 +388,7 @@ protected boolean isEnum(Object datum) {\n   \n   /** Called by the default implementation of {@link #instanceOf}.*/\n   protected boolean isMap(Object datum) {\n-    return (datum instanceof Map) && (!(datum instanceof GenericRecord));\n+    return datum instanceof Map;\n   }\n   \n   /** Called by the default implementation of {@link #instanceOf}.*/\n@@ -408,10 +409,11 @@ protected boolean isBytes(Object datum) {\n   /** Compute a hash code according to a schema, consistent with {@link\n    * #compare(Object,Object,Schema)}. */\n   public int hashCode(Object o, Schema s) {\n+    if (o == null) return 0;                      // incomplete datum\n     int hashCode = 1;\n     switch (s.getType()) {\n     case RECORD:\n-      GenericRecord r = (GenericRecord)o;\n+      IndexedRecord r = (IndexedRecord)o;\n       for (Map.Entry<String, Field> e : s.getFields().entrySet()) {\n         Field f = e.getValue();\n         if (f.order() == Field.Order.IGNORE)\n@@ -430,7 +432,7 @@ public int hashCode(Object o, Schema s) {\n     case NULL:\n       return 0;\n     default:\n-      return (o == null) ? 0 : o.hashCode();\n+      return o.hashCode();\n     }\n   }\n \n@@ -448,8 +450,8 @@ public int compare(Object o1, Object o2, Schema s) {\n     if (o1 == o2) return 0;\n     switch (s.getType()) {\n     case RECORD:\n-      GenericRecord r1 = (GenericRecord)o1;\n-      GenericRecord r2 = (GenericRecord)o2;\n+      IndexedRecord r1 = (IndexedRecord)o1;\n+      IndexedRecord r2 = (IndexedRecord)o2;\n       for (Map.Entry<String, Field> e : s.getFields().entrySet()) {\n         Field f = e.getValue();\n         if (f.order() == Field.Order.IGNORE)",
                "deletions": 14
            },
            {
                "sha": "1f173b15e481b1d6dc454c468175d25f13e0e03c",
                "filename": "lang/java/src/java/org/apache/avro/generic/GenericDatumReader.java",
                "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/generic/GenericDatumReader.java",
                "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/generic/GenericDatumReader.java",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/generic/GenericDatumReader.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406",
                "patch": "@@ -174,16 +174,16 @@ protected Object readRecord(Object old, Schema actual, Schema expected,\n \n   /** Called by the default implementation of {@link #readRecord} to set a\n    * record fields value to a record instance.  The default implementation is\n-   * for {@link GenericRecord}.*/\n+   * for {@link IndexedRecord}.*/\n   protected void setField(Object record, String name, int position, Object o) {\n-    ((GenericRecord)record).put(position, o);\n+    ((IndexedRecord)record).put(position, o);\n   }\n   \n   /** Called by the default implementation of {@link #readRecord} to retrieve a\n    * record field value from a reused instance.  The default implementation is\n-   * for {@link GenericRecord}.*/\n+   * for {@link IndexedRecord}.*/\n   protected Object getField(Object record, String name, int position) {\n-    return ((GenericRecord)record).get(position);\n+    return ((IndexedRecord)record).get(position);\n   }\n \n   /** Called by the default implementation of {@link #readRecord} to construct\n@@ -359,8 +359,8 @@ protected Object createFixed(Object old, byte[] bytes, Schema schema) {\n    * a {@link GenericData.Record}.\n    */\n   protected Object newRecord(Object old, Schema schema) {\n-    if (old instanceof GenericRecord) {\n-      GenericRecord record = (GenericRecord)old;\n+    if (old instanceof IndexedRecord) {\n+      IndexedRecord record = (IndexedRecord)old;\n       if (record.getSchema() == schema)\n         return record;\n     }",
                "deletions": 6
            },
            {
                "sha": "d2bb29867accb01139c56fbbac31876c5cea0e32",
                "filename": "lang/java/src/java/org/apache/avro/generic/GenericDatumWriter.java",
                "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/generic/GenericDatumWriter.java",
                "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/generic/GenericDatumWriter.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/generic/GenericDatumWriter.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406",
                "patch": "@@ -93,9 +93,9 @@ protected void writeRecord(Schema schema, Object datum, Encoder out)\n   \n   /** Called by the default implementation of {@link #writeRecord} to retrieve\n    * a record field value.  The default implementation is for {@link\n-   * GenericRecord}.*/\n+   * IndexedRecord}.*/\n   protected Object getField(Object record, String field, int position) {\n-    return ((GenericRecord) record).get(position);\n+    return ((IndexedRecord) record).get(position);\n   }\n   \n   /** Called to write an enum value.  May be overridden for alternate enum",
                "deletions": 2
            },
            {
                "sha": "aa8c1939bb3d6934cc68c30b7e1d7947fdf95fe2",
                "filename": "lang/java/src/java/org/apache/avro/generic/GenericRecord.java",
                "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/generic/GenericRecord.java",
                "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/generic/GenericRecord.java",
                "status": "modified",
                "changes": 9,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/generic/GenericRecord.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406",
                "patch": "@@ -17,14 +17,11 @@\n  */\n package org.apache.avro.generic;\n \n-/** An instance of a record schema.*/\n-public interface GenericRecord extends GenericContainer {\n+/** A generic instance of a record schema.  Fields are accessible by name as\n+ * well as by index. */\n+public interface GenericRecord extends IndexedRecord {\n   /** Set the value of a field given its name. */\n   void put(String key, Object v);\n-  /** Set the value of a field given its position in the schema. */\n-  void put(int i, Object v);\n   /** Return the value of a field given its name. */\n   Object get(String key);\n-  /** Return the value of a field given its position in the schema. */\n-  Object get(int i);\n }",
                "deletions": 6
            },
            {
                "sha": "e3e93d8c2296ba8462d5ed81ddad64a190f9c907",
                "filename": "lang/java/src/java/org/apache/avro/generic/IndexedRecord.java",
                "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/generic/IndexedRecord.java",
                "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/generic/IndexedRecord.java",
                "status": "added",
                "changes": 26,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/generic/IndexedRecord.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406",
                "patch": "@@ -0,0 +1,26 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.avro.generic;\n+\n+/** A record implementation that permits field access by integer index.*/\n+public interface IndexedRecord extends GenericContainer {\n+  /** Set the value of a field given its position in the schema. */\n+  void put(int i, Object v);\n+  /** Return the value of a field given its position in the schema. */\n+  Object get(int i);\n+}",
                "deletions": 0
            },
            {
                "sha": "7618c3c16a0c8bfb9d9c48ebb2c5f60e3ffe1878",
                "filename": "lang/java/src/java/org/apache/avro/specific/SpecificCompiler.java",
                "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificCompiler.java",
                "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificCompiler.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/specific/SpecificCompiler.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406",
                "patch": "@@ -275,7 +275,7 @@ private OutputFile compile(Schema schema) {\n       line(out, 1, \"}\");\n       // set method\n       line(out, 1, \"@SuppressWarnings(value=\\\"unchecked\\\")\");\n-      line(out, 1, \"public void set(int field$, java.lang.Object value$) {\");\n+      line(out, 1, \"public void put(int field$, java.lang.Object value$) {\");\n       line(out, 2, \"switch (field$) {\");\n       i = 0;\n       for (Map.Entry<String, Schema> field : schema.getFieldSchemas())",
                "deletions": 1
            },
            {
                "sha": "a6b12d72857193c50c6393757f4f5a4845b22891",
                "filename": "lang/java/src/java/org/apache/avro/specific/SpecificData.java",
                "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificData.java",
                "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificData.java",
                "status": "modified",
                "changes": 43,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/specific/SpecificData.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406",
                "patch": "@@ -17,7 +17,6 @@\n  */\n package org.apache.avro.specific;\n \n-import java.util.Iterator;\n import java.util.Map;\n import java.util.List;\n import java.util.WeakHashMap;\n@@ -30,7 +29,6 @@\n import org.apache.avro.Protocol;\n import org.apache.avro.AvroRuntimeException;\n import org.apache.avro.AvroTypeException;\n-import org.apache.avro.Schema.Field;\n import org.apache.avro.Schema.Type;\n import org.apache.avro.generic.GenericData;\n import org.apache.avro.generic.GenericArray;\n@@ -64,15 +62,6 @@ protected boolean isEnum(Object datum) {\n   @Override\n   public boolean validate(Schema schema, Object datum) {\n     switch (schema.getType()) {\n-    case RECORD:\n-      Class c = datum.getClass(); \n-      if (!(datum instanceof SpecificRecord)) return false;\n-      SpecificRecord record = (SpecificRecord)datum;\n-      Iterator<Field> fields = schema.getFields().values().iterator();\n-      for (int i = 0; fields.hasNext(); i++)\n-        if (!validate(fields.next().schema(), record.get(i)))\n-          return false;\n-      return true;\n     case ENUM:\n       return datum instanceof Enum\n         && schema.getEnumSymbols().contains(((Enum)datum).name());\n@@ -209,41 +198,9 @@ public Protocol getProtocol(Class iface) {\n     }\n   }\n \n-  @Override\n-  public int hashCode(Object o, Schema s) {\n-    switch (s.getType()) {\n-    case RECORD:\n-      int hashCode = 1;\n-      SpecificRecord r = (SpecificRecord)o;\n-      Iterator<Field> fields = s.getFields().values().iterator();\n-      for (int i = 0; fields.hasNext(); i++) {\n-        Field f = fields.next();\n-        if (f.order() == Field.Order.IGNORE)\n-          continue;\n-        hashCode = hashCodeAdd(hashCode, r.get(i), f.schema());\n-      }\n-      return hashCode;\n-    default:\n-      return super.hashCode(o, s);\n-    }\n-  }\n-\n   @Override\n   public int compare(Object o1, Object o2, Schema s) {\n     switch (s.getType()) {\n-    case RECORD:\n-      SpecificRecord r1 = (SpecificRecord)o1;\n-      SpecificRecord r2 = (SpecificRecord)o2;\n-      Iterator<Field> fields = s.getFields().values().iterator();\n-      for (int i = 0; fields.hasNext(); i++) {\n-        Field f = fields.next();\n-        if (f.order() == Field.Order.IGNORE)\n-          continue;                               // ignore this field\n-        int compare = compare(r1.get(i), r2.get(i), f.schema());\n-        if (compare != 0)                         // not equal\n-          return f.order() == Field.Order.DESCENDING ? -compare : compare;\n-      }\n-      return 0;\n     case ENUM:\n       return ((Enum)o1).ordinal() - ((Enum)o2).ordinal();\n     default:",
                "deletions": 43
            },
            {
                "sha": "327b7ff4693eaeadb787f97d9f819c58929e55e6",
                "filename": "lang/java/src/java/org/apache/avro/specific/SpecificDatumReader.java",
                "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificDatumReader.java",
                "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificDatumReader.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/specific/SpecificDatumReader.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406",
                "patch": "@@ -44,7 +44,7 @@ protected Object newRecord(Object old, Schema schema) {\n \n   @Override\n   protected void setField(Object record, String name, int position, Object o) {\n-    ((SpecificRecord)record).set(position, o);\n+    ((SpecificRecord)record).put(position, o);\n   }\n   @Override\n   protected Object getField(Object record, String name, int position) {",
                "deletions": 1
            },
            {
                "sha": "b3cd436de9d0e324ff11a5a8fd6feae6b923eec1",
                "filename": "lang/java/src/java/org/apache/avro/specific/SpecificExceptionBase.java",
                "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificExceptionBase.java",
                "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificExceptionBase.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/specific/SpecificExceptionBase.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406",
                "patch": "@@ -27,7 +27,7 @@\n \n   public abstract Schema getSchema();\n   public abstract Object get(int field);\n-  public abstract void set(int field, Object value);\n+  public abstract void put(int field, Object value);\n \n   public boolean equals(Object that) {\n     if (that == this) return true;                        // identical object",
                "deletions": 1
            },
            {
                "sha": "ad78df2aabfaea6d14b2acf882a985a5f281254d",
                "filename": "lang/java/src/java/org/apache/avro/specific/SpecificRecord.java",
                "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificRecord.java",
                "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificRecord.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/specific/SpecificRecord.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406",
                "patch": "@@ -17,12 +17,10 @@\n  */\n package org.apache.avro.specific;\n \n-import org.apache.avro.generic.GenericContainer;\n+import org.apache.avro.generic.IndexedRecord;\n \n /** Implemented by generated record classes. Permits efficient access to\n  * fields.*/\n-public interface SpecificRecord extends GenericContainer {\n-  Object get(int field);\n-  void set(int field, Object value);\n+public interface SpecificRecord extends IndexedRecord {\n }\n ",
                "deletions": 4
            },
            {
                "sha": "d0a67052a4605efd1509aaa189757f7f74c1931b",
                "filename": "lang/java/src/java/org/apache/avro/specific/SpecificRecordBase.java",
                "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificRecordBase.java",
                "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificRecordBase.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/specific/SpecificRecordBase.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406",
                "patch": "@@ -25,7 +25,7 @@\n \n   public abstract Schema getSchema();\n   public abstract Object get(int field);\n-  public abstract void set(int field, Object value);\n+  public abstract void put(int field, Object value);\n \n   @Override\n   public boolean equals(Object that) {\n@@ -45,5 +45,10 @@ public int compareTo(SpecificRecord that) {\n     return SpecificData.get().compare(this, that, this.getSchema());\n   }\n \n+  @Override\n+  public String toString() {\n+    return SpecificData.get().toString(this);\n+  }\n+\n }\n ",
                "deletions": 1
            },
            {
                "sha": "843963e070f154ac2ead59cce654c7ae002e8ab8",
                "filename": "lang/java/src/test/java/org/apache/avro/generic/TestGenericData.java",
                "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/test/java/org/apache/avro/generic/TestGenericData.java",
                "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/test/java/org/apache/avro/generic/TestGenericData.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/test/java/org/apache/avro/generic/TestGenericData.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406",
                "patch": "@@ -19,8 +19,11 @@\n \n import static org.junit.Assert.*;\n \n+import java.util.Arrays;\n+\n import org.apache.avro.Schema;\n import org.apache.avro.AvroRuntimeException;\n+import org.apache.avro.Schema.Type;\n \n import org.junit.Test;\n \n@@ -45,5 +48,13 @@ public void testArrayConstructorNullSchema() throws Exception {\n     public void testArrayConstructorWrongSchema() throws Exception {\n     new GenericData.Array<Object>(1, Schema.create(Schema.Type.INT));\n   }\n+  \n+  @Test\n+  /** Make sure that even with nulls, hashCode() doesn't throw NPE. */\n+  public void testHashCode() {\n+    GenericData.get().hashCode(null, Schema.create(Type.NULL));\n+    GenericData.get().hashCode(null, Schema.createUnion(\n+        Arrays.asList(Schema.create(Type.BOOLEAN), Schema.create(Type.STRING))));\n+  }\n \n }",
                "deletions": 0
            },
            {
                "sha": "89a8ad83a83bb8c27cd59266c233b51b7b881006",
                "filename": "lang/java/src/test/java/org/apache/avro/specific/TestSpecificData.java",
                "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/test/java/org/apache/avro/specific/TestSpecificData.java",
                "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/test/java/org/apache/avro/specific/TestSpecificData.java",
                "status": "added",
                "changes": 41,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/test/java/org/apache/avro/specific/TestSpecificData.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406",
                "patch": "@@ -0,0 +1,41 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.avro.specific;\n+\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+\n+import org.apache.avro.test.TestRecord;\n+\n+public class TestSpecificData {\n+  \n+  @Test\n+  /** Make sure that even with nulls, hashCode() doesn't throw NPE. */\n+  public void testHashCode() {\n+    new TestRecord().hashCode();\n+    SpecificData.get().hashCode(null, TestRecord.SCHEMA$);\n+  }\n+\n+  @Test\n+  /** Make sure that even with nulls, toString() doesn't throw NPE. */\n+  public void testToString() {\n+    new TestRecord().toString();\n+  }\n+\n+}",
                "deletions": 0
            }
        ]
    }
]