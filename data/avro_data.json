[{"commit": "https://github.com/apache/avro/commit/196777ccc2e698e9dba153d48a08ef4b68b144a1", "parent": "https://github.com/apache/avro/commit/3f44b7c22e355e5fde239fd16b5105cf5804b70b", "message": "AVRO-2383: NPE during Schema.applyAliases (#510)", "bug_id": "avro_1", "file": [{"additions": 1, "raw_url": "https://github.com/apache/avro/raw/196777ccc2e698e9dba153d48a08ef4b68b144a1/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "blob_url": "https://github.com/apache/avro/blob/196777ccc2e698e9dba153d48a08ef4b68b144a1/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "sha": "f4dda2686b5b9f1422b9c2b50c352e65b4a9a429", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/Schema.java?ref=196777ccc2e698e9dba153d48a08ef4b68b144a1", "patch": "@@ -886,7 +886,7 @@ public boolean equals(Object o) {\n       boolean first = seen.isEmpty();\n       try {\n         seen.add(here);\n-        return fields.equals(((RecordSchema) o).fields);\n+        return Objects.equals(fields, that.fields);\n       } finally {\n         if (first)\n           seen.clear();", "filename": "lang/java/avro/src/main/java/org/apache/avro/Schema.java"}, {"additions": 15, "raw_url": "https://github.com/apache/avro/raw/196777ccc2e698e9dba153d48a08ef4b68b144a1/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java", "blob_url": "https://github.com/apache/avro/blob/196777ccc2e698e9dba153d48a08ef4b68b144a1/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java", "sha": "cd5413a5fb945eff5a88ae0ec0aafc83ce9a6bef", "changes": 15, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java?ref=196777ccc2e698e9dba153d48a08ef4b68b144a1", "patch": "@@ -594,6 +594,21 @@ public void testAliases() {\n     assertEquals(s2, s3);\n   }\n \n+  @Test\n+  public void testAliasesSelfReferential() {\n+    String t1 = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"a\\\",\\\"fields\\\":[{\\\"name\\\":\\\"f\\\",\\\"type\\\":{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"C\\\",\\\"fields\\\":[{\\\"name\\\":\\\"c\\\",\\\"type\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":[\\\"null\\\",\\\"C\\\"]}}]}}]}\";\n+    String t2 = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"x\\\",\\\"fields\\\":[{\\\"name\\\":\\\"f\\\",\\\"type\\\":{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"C\\\",\\\"fields\\\":[{\\\"name\\\":\\\"d\\\",\\\"type\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":[\\\"null\\\",\\\"C\\\"]},\\\"aliases\\\":[\\\"c\\\"]}]}}],\\\"aliases\\\":[\\\"a\\\"]}\";\n+    Schema s1 = new Schema.Parser().parse(t1);\n+    Schema s2 = new Schema.Parser().parse(t2);\n+\n+    assertEquals(s1.getAliases(), Collections.emptySet());\n+    assertEquals(s2.getAliases(), Collections.singleton(\"a\"));\n+\n+    Schema s3 = Schema.applyAliases(s1, s2);\n+    assertNotSame(s2, s3);\n+    assertEquals(s2, s3);\n+  }\n+\n   private static void check(File dst, String schemaJson, String defaultJson, Object defaultValue) throws Exception {\n     check(dst, schemaJson, defaultJson, defaultValue, true);\n   }", "filename": "lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java"}], "repo": "avro"}, {"commit": "https://github.com/apache/avro/commit/152fa0954bb74e8e1e627751ccab55ada4f5b375", "parent": "https://github.com/apache/avro/commit/a53a4fd10072471aa7c8170499a10792e61e0d95", "message": "AVRO-1967: Java: Fix NPE when calling getXyzBuilder on instance where the xyz is null", "bug_id": "avro_2", "file": [{"additions": 3, "raw_url": "https://github.com/apache/avro/raw/152fa0954bb74e8e1e627751ccab55ada4f5b375/CHANGES.txt", "blob_url": "https://github.com/apache/avro/blob/152fa0954bb74e8e1e627751ccab55ada4f5b375/CHANGES.txt", "sha": "d5341e8905cfaf43b09732f958d21ea7598bc84b", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/avro/contents/CHANGES.txt?ref=152fa0954bb74e8e1e627751ccab55ada4f5b375", "patch": "@@ -106,6 +106,9 @@ Trunk (not yet released)\n \n     AVRO-1966: Java: Fix NPE When copying builder with nullable record. (Niels Basjes)\n \n+    AVRO-1967: Java: Fix NPE when calling getXyzBuilder on instance where the xyz is null\n+    (Niels Basjes)\n+\n Avro 1.8.1 (14 May 2016)\n \n   INCOMPATIBLE CHANGES", "filename": "CHANGES.txt"}, {"additions": 11, "raw_url": "https://github.com/apache/avro/raw/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm", "blob_url": "https://github.com/apache/avro/blob/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm", "sha": "ccec4b60c1d666c52a71912b04d6d705f944c5c1", "changes": 14, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm?ref=152fa0954bb74e8e1e627751ccab55ada4f5b375", "patch": "@@ -221,7 +221,11 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or\n    * @return A new ${this.mangle($schema.getName())} RecordBuilder\n    */\n   public static #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder newBuilder(#if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder other) {\n-    return new #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder(other);\n+    if (other == null) {\n+      return new #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder();\n+    } else {\n+      return new #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder(other);\n+    }\n   }\n \n   /**\n@@ -230,7 +234,11 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or\n    * @return A new ${this.mangle($schema.getName())} RecordBuilder\n    */\n   public static #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder newBuilder(#if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())} other) {\n-    return new #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder(other);\n+    if (other == null) {\n+      return new #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder();\n+    } else {\n+      return new #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder(other);\n+    }\n   }\n \n   /**\n@@ -279,7 +287,7 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or\n      * @param other The existing instance to copy.\n      */\n     private Builder(#if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())} other) {\n-      #if ($schema.isError())super(other)#else\n+#if ($schema.isError())      super(other)#else\n       super(SCHEMA$)#end;\n #foreach ($field in $schema.getFields())\n       if (isValidValue(fields()[$field.pos()], other.${this.mangle($field.name(), $schema.isError())})) {", "filename": "lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm"}, {"additions": 77, "raw_url": "https://github.com/apache/avro/raw/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java", "blob_url": "https://github.com/apache/avro/blob/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java", "sha": "6a69833698946606e34fb1f344fa8fb27b97d49d", "changes": 77, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java?ref=152fa0954bb74e8e1e627751ccab55ada4f5b375", "patch": "@@ -27,6 +27,7 @@\n import static org.apache.avro.test.nullable.Nullable.*;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n public class TestSpecificBuilderTree {\n@@ -283,4 +284,80 @@ public void copyBuilderWithNullables() {\n     builderCopy.getNullableRecordBuilder();\n   }\n \n+  @Test\n+  public void copyBuilderWithNullablesAndSetToNull() {\n+    // Create builder with all values default to null, yet unset.\n+    RecordWithNullables.Builder builder = RecordWithNullables.newBuilder();\n+\n+    // Ensure all values have not been set\n+    assertFalse(builder.hasNullableRecordBuilder());\n+    assertFalse(builder.hasNullableRecord());\n+    assertFalse(builder.hasNullableString());\n+    assertFalse(builder.hasNullableLong  ());\n+    assertFalse(builder.hasNullableInt   ());\n+    assertFalse(builder.hasNullableMap   ());\n+    assertFalse(builder.hasNullableArray ());\n+\n+    // Set all values to null\n+    builder.setNullableRecordBuilder(null);\n+    builder.setNullableRecord(null);\n+    builder.setNullableString(null);\n+    builder.setNullableLong  (null);\n+    builder.setNullableInt   (null);\n+    builder.setNullableMap   (null);\n+    builder.setNullableArray (null);\n+\n+    // A Builder remains False because it is null\n+    assertFalse(builder.hasNullableRecordBuilder());\n+\n+    // Ensure all values have been set\n+    assertTrue(builder.hasNullableRecord());\n+    assertTrue(builder.hasNullableString());\n+    assertTrue(builder.hasNullableLong  ());\n+    assertTrue(builder.hasNullableInt   ());\n+    assertTrue(builder.hasNullableMap   ());\n+    assertTrue(builder.hasNullableArray ());\n+\n+    // Implicitly create a builder instance and clear the actual value.\n+    builder.getNullableRecordBuilder();\n+    assertTrue(builder.hasNullableRecordBuilder());\n+    assertFalse(builder.hasNullableRecord());\n+\n+    // Create a copy of this builder.\n+    RecordWithNullables.Builder builderCopy = RecordWithNullables.newBuilder(builder);\n+\n+    // Ensure all values are still the same\n+    assertTrue(builder.hasNullableRecordBuilder());\n+    assertFalse(builder.hasNullableRecord());\n+    assertTrue(builder.hasNullableString());\n+    assertTrue(builder.hasNullableLong  ());\n+    assertTrue(builder.hasNullableInt   ());\n+    assertTrue(builder.hasNullableMap   ());\n+    assertTrue(builder.hasNullableArray ());\n+  }\n+\n+  @Test\n+  public void getBuilderForRecordWithNullRecord() {\n+    // Create a record with all nullable fields set to the default value : null\n+    RecordWithNullables recordWithNullables = RecordWithNullables.newBuilder().build();\n+\n+    // Now create a Builder using this record as the base\n+    RecordWithNullables.Builder builder = RecordWithNullables.newBuilder(recordWithNullables);\n+\n+    // In the past this caused an NPE\n+    builder.getNullableRecordBuilder();\n+  }\n+\n+  @Test\n+  public void getBuilderForNullRecord() {\n+    // In the past this caused an NPE\n+    RecordWithNullables.newBuilder((RecordWithNullables)null);\n+  }\n+\n+  @Test\n+  public void getBuilderForNullBuilder() {\n+    // In the past this caused an NPE\n+    RecordWithNullables.newBuilder((RecordWithNullables.Builder)null);\n+  }\n+\n }", "filename": "lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java"}, {"additions": 11, "raw_url": "https://github.com/apache/avro/raw/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java", "blob_url": "https://github.com/apache/avro/blob/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java", "sha": "4dff5ef5053974adb6a4dbce785a0604224df27e", "changes": 14, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java?ref=152fa0954bb74e8e1e627751ccab55ada4f5b375", "patch": "@@ -182,7 +182,11 @@ public void setPosition(java.util.List<avro.examples.baseball.Position> value) {\n    * @return A new Player RecordBuilder\n    */\n   public static avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player.Builder other) {\n-    return new avro.examples.baseball.Player.Builder(other);\n+    if (other == null) {\n+      return new avro.examples.baseball.Player.Builder();\n+    } else {\n+      return new avro.examples.baseball.Player.Builder(other);\n+    }\n   }\n \n   /**\n@@ -191,7 +195,11 @@ public void setPosition(java.util.List<avro.examples.baseball.Position> value) {\n    * @return A new Player RecordBuilder\n    */\n   public static avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player other) {\n-    return new avro.examples.baseball.Player.Builder(other);\n+    if (other == null) {\n+      return new avro.examples.baseball.Player.Builder();\n+    } else {\n+      return new avro.examples.baseball.Player.Builder(other);\n+    }\n   }\n \n   /**\n@@ -240,7 +248,7 @@ private Builder(avro.examples.baseball.Player.Builder other) {\n      * @param other The existing instance to copy.\n      */\n     private Builder(avro.examples.baseball.Player other) {\n-            super(SCHEMA$);\n+      super(SCHEMA$);\n       if (isValidValue(fields()[0], other.number)) {\n         this.number = data().deepCopy(fields()[0].schema(), other.number);\n         fieldSetFlags()[0] = true;", "filename": "lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java"}, {"additions": 11, "raw_url": "https://github.com/apache/avro/raw/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/tools/src/test/compiler/output/Player.java", "blob_url": "https://github.com/apache/avro/blob/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/tools/src/test/compiler/output/Player.java", "sha": "26fcbc0d559c37373a7f5bb195fa2bd830195b4a", "changes": 14, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/tools/src/test/compiler/output/Player.java?ref=152fa0954bb74e8e1e627751ccab55ada4f5b375", "patch": "@@ -182,7 +182,11 @@ public void setPosition(java.util.List<avro.examples.baseball.Position> value) {\n    * @return A new Player RecordBuilder\n    */\n   public static avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player.Builder other) {\n-    return new avro.examples.baseball.Player.Builder(other);\n+    if (other == null) {\n+      return new avro.examples.baseball.Player.Builder();\n+    } else {\n+      return new avro.examples.baseball.Player.Builder(other);\n+    }\n   }\n \n   /**\n@@ -191,7 +195,11 @@ public void setPosition(java.util.List<avro.examples.baseball.Position> value) {\n    * @return A new Player RecordBuilder\n    */\n   public static avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player other) {\n-    return new avro.examples.baseball.Player.Builder(other);\n+    if (other == null) {\n+      return new avro.examples.baseball.Player.Builder();\n+    } else {\n+      return new avro.examples.baseball.Player.Builder(other);\n+    }\n   }\n \n   /**\n@@ -240,7 +248,7 @@ private Builder(avro.examples.baseball.Player.Builder other) {\n      * @param other The existing instance to copy.\n      */\n     private Builder(avro.examples.baseball.Player other) {\n-            super(SCHEMA$);\n+      super(SCHEMA$);\n       if (isValidValue(fields()[0], other.number)) {\n         this.number = data().deepCopy(fields()[0].schema(), other.number);\n         fieldSetFlags()[0] = true;", "filename": "lang/java/tools/src/test/compiler/output/Player.java"}], "repo": "avro"}, {"commit": "https://github.com/apache/avro/commit/a53a4fd10072471aa7c8170499a10792e61e0d95", "parent": "https://github.com/apache/avro/commit/cae491a6204b8167481fcc46e7f7eed061a44a82", "message": "AVRO-1966: Java: Fix NPE When copying builder with nullable record.", "bug_id": "avro_3", "file": [{"additions": 2, "raw_url": "https://github.com/apache/avro/raw/a53a4fd10072471aa7c8170499a10792e61e0d95/CHANGES.txt", "blob_url": "https://github.com/apache/avro/blob/a53a4fd10072471aa7c8170499a10792e61e0d95/CHANGES.txt", "sha": "fa11bb821309c8e2fd4f2f0dbb92225119b1a4eb", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/avro/contents/CHANGES.txt?ref=a53a4fd10072471aa7c8170499a10792e61e0d95", "patch": "@@ -104,6 +104,8 @@ Trunk (not yet released)\n \n     AVRO-1951: Python: Fix ipc_test.py with a valid DNS name. (blue)\n \n+    AVRO-1966: Java: Fix NPE When copying builder with nullable record. (Niels Basjes)\n+\n Avro 1.8.1 (14 May 2016)\n \n   INCOMPATIBLE CHANGES", "filename": "CHANGES.txt"}, {"additions": 1, "raw_url": "https://github.com/apache/avro/raw/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm", "blob_url": "https://github.com/apache/avro/blob/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm", "sha": "c333dd076d5790c3ba2b2f57159fdb7c39531ac2", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm?ref=a53a4fd10072471aa7c8170499a10792e61e0d95", "patch": "@@ -264,7 +264,7 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or\n #foreach ($field in $schema.getFields())\n       if (isValidValue(fields()[$field.pos()], other.${this.mangle($field.name(), $schema.isError())})) {\n         this.${this.mangle($field.name(), $schema.isError())} = data().deepCopy(fields()[$field.pos()].schema(), other.${this.mangle($field.name(), $schema.isError())});\n-        fieldSetFlags()[$field.pos()] = true;\n+        fieldSetFlags()[$field.pos()] = other.fieldSetFlags()[$field.pos()];\n       }\n #if (${this.hasBuilder($field.schema())})\n       if (other.${this.generateHasBuilderMethod($schema, $field)}()) {", "filename": "lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm"}, {"additions": 29, "raw_url": "https://github.com/apache/avro/raw/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java", "blob_url": "https://github.com/apache/avro/blob/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java", "sha": "87b9e6f6e944520da278b9b68a5e393eedadbc18", "changes": 29, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java?ref=a53a4fd10072471aa7c8170499a10792e61e0d95", "patch": "@@ -18,11 +18,15 @@\n package org.apache.avro.specific;\n \n import org.apache.avro.test.http.*;\n+import org.apache.avro.test.nullable.Nullable;\n+import org.apache.avro.test.nullable.RecordWithNullables;\n import org.junit.Test;\n \n import java.util.ArrayList;\n \n+import static org.apache.avro.test.nullable.Nullable.*;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.fail;\n \n public class TestSpecificBuilderTree {\n@@ -254,4 +258,29 @@ public void lastOneWins_Builder() {\n     assertEquals(\"/index.html\",     request.getHttpRequest().getURI().getPath());\n   }\n \n+  @Test\n+  public void copyBuilderWithNullables() {\n+    RecordWithNullables.Builder builder = RecordWithNullables.newBuilder();\n+\n+    assertFalse(builder.hasNullableRecordBuilder());\n+    assertFalse(builder.hasNullableRecord());\n+    assertFalse(builder.hasNullableString());\n+    assertFalse(builder.hasNullableLong  ());\n+    assertFalse(builder.hasNullableInt   ());\n+    assertFalse(builder.hasNullableMap   ());\n+    assertFalse(builder.hasNullableArray ());\n+\n+    RecordWithNullables.Builder builderCopy = RecordWithNullables.newBuilder(builder);\n+\n+    assertFalse(builderCopy.hasNullableRecordBuilder());\n+    assertFalse(builderCopy.hasNullableRecord());\n+    assertFalse(builderCopy.hasNullableString());\n+    assertFalse(builderCopy.hasNullableLong  ());\n+    assertFalse(builderCopy.hasNullableInt   ());\n+    assertFalse(builderCopy.hasNullableMap   ());\n+    assertFalse(builderCopy.hasNullableArray ());\n+\n+    builderCopy.getNullableRecordBuilder();\n+  }\n+\n }", "filename": "lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java"}, {"additions": 4, "raw_url": "https://github.com/apache/avro/raw/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java", "blob_url": "https://github.com/apache/avro/blob/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java", "sha": "da58e20c88ea6d69b770a199a486e1860367b7d6", "changes": 8, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java?ref=a53a4fd10072471aa7c8170499a10792e61e0d95", "patch": "@@ -219,19 +219,19 @@ private Builder(avro.examples.baseball.Player.Builder other) {\n       super(other);\n       if (isValidValue(fields()[0], other.number)) {\n         this.number = data().deepCopy(fields()[0].schema(), other.number);\n-        fieldSetFlags()[0] = true;\n+        fieldSetFlags()[0] = other.fieldSetFlags()[0];\n       }\n       if (isValidValue(fields()[1], other.first_name)) {\n         this.first_name = data().deepCopy(fields()[1].schema(), other.first_name);\n-        fieldSetFlags()[1] = true;\n+        fieldSetFlags()[1] = other.fieldSetFlags()[1];\n       }\n       if (isValidValue(fields()[2], other.last_name)) {\n         this.last_name = data().deepCopy(fields()[2].schema(), other.last_name);\n-        fieldSetFlags()[2] = true;\n+        fieldSetFlags()[2] = other.fieldSetFlags()[2];\n       }\n       if (isValidValue(fields()[3], other.position)) {\n         this.position = data().deepCopy(fields()[3].schema(), other.position);\n-        fieldSetFlags()[3] = true;\n+        fieldSetFlags()[3] = other.fieldSetFlags()[3];\n       }\n     }\n ", "filename": "lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java"}, {"additions": 4, "raw_url": "https://github.com/apache/avro/raw/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/tools/src/test/compiler/output/Player.java", "blob_url": "https://github.com/apache/avro/blob/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/tools/src/test/compiler/output/Player.java", "sha": "0a0b88203dc1db27efceb8fab2d1baac0bb8cd96", "changes": 8, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/tools/src/test/compiler/output/Player.java?ref=a53a4fd10072471aa7c8170499a10792e61e0d95", "patch": "@@ -219,19 +219,19 @@ private Builder(avro.examples.baseball.Player.Builder other) {\n       super(other);\n       if (isValidValue(fields()[0], other.number)) {\n         this.number = data().deepCopy(fields()[0].schema(), other.number);\n-        fieldSetFlags()[0] = true;\n+        fieldSetFlags()[0] = other.fieldSetFlags()[0];\n       }\n       if (isValidValue(fields()[1], other.first_name)) {\n         this.first_name = data().deepCopy(fields()[1].schema(), other.first_name);\n-        fieldSetFlags()[1] = true;\n+        fieldSetFlags()[1] = other.fieldSetFlags()[1];\n       }\n       if (isValidValue(fields()[2], other.last_name)) {\n         this.last_name = data().deepCopy(fields()[2].schema(), other.last_name);\n-        fieldSetFlags()[2] = true;\n+        fieldSetFlags()[2] = other.fieldSetFlags()[2];\n       }\n       if (isValidValue(fields()[3], other.position)) {\n         this.position = data().deepCopy(fields()[3].schema(), other.position);\n-        fieldSetFlags()[3] = true;\n+        fieldSetFlags()[3] = other.fieldSetFlags()[3];\n       }\n     }\n ", "filename": "lang/java/tools/src/test/compiler/output/Player.java"}, {"additions": 41, "raw_url": "https://github.com/apache/avro/raw/a53a4fd10072471aa7c8170499a10792e61e0d95/share/test/schemas/nestedNullable.avdl", "blob_url": "https://github.com/apache/avro/blob/a53a4fd10072471aa7c8170499a10792e61e0d95/share/test/schemas/nestedNullable.avdl", "sha": "a62c205a3372d1811dde81c6305b8b5a0f1ec047", "changes": 41, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/avro/contents/share/test/schemas/nestedNullable.avdl?ref=a53a4fd10072471aa7c8170499a10792e61e0d95", "patch": "@@ -0,0 +1,41 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+@namespace(\"org.apache.avro.test.nullable\")\n+protocol Nullable {\n+\n+    enum MyEnum {\n+        One,\n+        Two\n+    }\n+\n+    record SubRecord {\n+        string value;\n+    }\n+\n+    record RecordWithNullables {\n+        union { null, string        } nullableString    = null;\n+        union { null, long          } nullableLong      = null;\n+        union { null, int           } nullableInt       = null;\n+        union { null, map<string>   } nullableMap       = null;\n+        union { null, array<string> } nullableArray     = null;\n+        union { null, SubRecord     } nullableRecord    = null;\n+        union { null, MyEnum        } nullableEnum      = null;\n+    }\n+\n+}", "filename": "share/test/schemas/nestedNullable.avdl"}], "repo": "avro"}, {"commit": "https://github.com/apache/avro/commit/2564afeb1fdc4792603f7ddc1a7b3b347d05b54e", "parent": "https://github.com/apache/avro/commit/080cd772f235a8f490928ce512aa62089af0f203", "message": "AVRO-1780: Java: Fix NPE in tools. Contributed by Tom White.\n\nChanges for AVRO-1728 moved NOTICE, which was used to create the\nno-argument output for Java's avro-tools. Using the new location fixed\nthe NPE and this also includes an update to show just the top of NOTICE\nsince it is now much longer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/avro/trunk@1724287 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "avro_4", "file": [{"additions": 14, "raw_url": "https://github.com/apache/avro/raw/2564afeb1fdc4792603f7ddc1a7b3b347d05b54e/lang/java/tools/src/main/java/org/apache/avro/tool/Main.java", "blob_url": "https://github.com/apache/avro/blob/2564afeb1fdc4792603f7ddc1a7b3b347d05b54e/lang/java/tools/src/main/java/org/apache/avro/tool/Main.java", "sha": "93c827ccd7d7934095ee0c5da25c0e8b3313e698", "changes": 15, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/tools/src/main/java/org/apache/avro/tool/Main.java?ref=2564afeb1fdc4792603f7ddc1a7b3b347d05b54e", "patch": "@@ -17,6 +17,8 @@\n  */\n package org.apache.avro.tool;\n \n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n import java.util.Arrays;\n import java.util.Map;\n import java.util.TreeMap;\n@@ -89,7 +91,7 @@ private int run(String[] args) throws Exception {\n     System.err.print(\"Version \");\n     printStream(Main.class.getClassLoader().getResourceAsStream(\"VERSION.txt\"));\n     System.err.print(\" of \");\n-    printStream(Main.class.getClassLoader().getResourceAsStream(\"NOTICE.txt\"));\n+    printHead(Main.class.getClassLoader().getResourceAsStream(\"META-INF/NOTICE\"), 5);\n     System.err.println(\"----------------\");\n \n     System.err.println(\"Available tools:\");\n@@ -106,4 +108,15 @@ private static void printStream(InputStream in) throws Exception {\n       System.err.write(buffer, 0, i);\n   }\n \n+  private static void printHead(InputStream in, int lines) throws Exception {\n+    BufferedReader r = new BufferedReader(new InputStreamReader(in));\n+    for (int i = 0; i < lines; i++) {\n+      String line = r.readLine();\n+      if (line == null) {\n+        break;\n+      }\n+      System.err.println(line);\n+    }\n+  }\n+\n }", "filename": "lang/java/tools/src/main/java/org/apache/avro/tool/Main.java"}], "repo": "avro"}, {"commit": "https://github.com/apache/avro/commit/60d9ef0ad24d91735210830b2481e884ec45c9e7", "parent": "https://github.com/apache/avro/commit/630562a0b16ae73c8cb8d85da723bca6b28de6db", "message": "AVRO-1655. Java: Fix NPE in RecordSchema#toString. Contributed by Lars Francke.\n\nThis also adds a variant of Schema.createRecord with a field list to\nallow callers to create valid record schemas in a single call.\n\ngit-svn-id: https://svn.apache.org/repos/asf/avro/trunk@1674398 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "avro_5", "file": [{"additions": 6, "raw_url": "https://github.com/apache/avro/raw/60d9ef0ad24d91735210830b2481e884ec45c9e7/CHANGES.txt", "blob_url": "https://github.com/apache/avro/blob/60d9ef0ad24d91735210830b2481e884ec45c9e7/CHANGES.txt", "sha": "e0ce5c79e73ccec11d59d9b41080dc2132822825", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/avro/contents/CHANGES.txt?ref=60d9ef0ad24d91735210830b2481e884ec45c9e7", "patch": "@@ -68,6 +68,9 @@ Trunk (not yet released)\n     AVRO-1628. Java: Add Schema#createUnion(Schema ...) convenience method.\n     (Cl\u00e9ment Mahtieu via cutting)\n \n+    AVRO-1655. Java: Add Schema.createRecord with field list.\n+    (Lars Francke via blue)\n+\n   BUG FIXES\n \n     AVRO-1553. Java: MapReduce never uses MapOutputValueSchema (tomwhite)\n@@ -131,6 +134,9 @@ Trunk (not yet released)\n     AVRO-1652. Java: Do not warn or validate defaults if validation is off.\n     (Michael D'Angelo via blue)\n \n+    AVRO-1655. Java: Fix NPE in RecordSchema#toString when fields are null.\n+    (Lars Francke via blue)\n+\n Avro 1.7.7 (23 July 2014)\n \n   NEW FEATURES", "filename": "CHANGES.txt"}, {"additions": 20, "raw_url": "https://github.com/apache/avro/raw/60d9ef0ad24d91735210830b2481e884ec45c9e7/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "blob_url": "https://github.com/apache/avro/blob/60d9ef0ad24d91735210830b2481e884ec45c9e7/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "sha": "1f2dd8fa7ca862b542e01497bfb3ee7ebf982799", "changes": 22, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/Schema.java?ref=60d9ef0ad24d91735210830b2481e884ec45c9e7", "patch": "@@ -151,6 +151,12 @@ public static Schema createRecord(String name, String doc, String namespace,\n     return new RecordSchema(new Name(name, namespace), doc, isError);\n   }\n \n+  /** Create a named record schema with fields already set. */\n+  public static Schema createRecord(String name, String doc, String namespace,\n+                                    boolean isError, List<Field> fields) {\n+    return new RecordSchema(new Name(name, namespace), doc, isError, fields);\n+  }\n+\n   /** Create an enum schema. */\n   public static Schema createEnum(String name, String doc, String namespace,\n                                   List<String> values) {\n@@ -594,6 +600,14 @@ public RecordSchema(Name name, String doc, boolean isError) {\n       super(Type.RECORD, name, doc);\n       this.isError = isError;\n     }\n+\n+    public RecordSchema(Name name, String doc, boolean isError,\n+                        List<Field> fields) {\n+      super(Type.RECORD, name, doc);\n+      this.isError = isError;\n+      setFields(fields);\n+    }\n+\n     public boolean isError() { return isError; }\n \n     @Override\n@@ -671,8 +685,12 @@ void toJson(Names names, JsonGenerator gen) throws IOException {\n       names.space = name.space;                   // set default namespace\n       if (getDoc() != null)\n         gen.writeStringField(\"doc\", getDoc());\n-      gen.writeFieldName(\"fields\");\n-      fieldsToJson(names, gen);\n+\n+      if (fields != null) {\n+        gen.writeFieldName(\"fields\");\n+        fieldsToJson(names, gen);\n+      }\n+\n       writeProps(gen);\n       aliasesToJson(gen);\n       gen.writeEndObject();", "filename": "lang/java/avro/src/main/java/org/apache/avro/Schema.java"}, {"additions": 25, "raw_url": "https://github.com/apache/avro/raw/60d9ef0ad24d91735210830b2481e884ec45c9e7/lang/java/avro/src/test/java/org/apache/avro/TestSchema.java", "blob_url": "https://github.com/apache/avro/blob/60d9ef0ad24d91735210830b2481e884ec45c9e7/lang/java/avro/src/test/java/org/apache/avro/TestSchema.java", "sha": "ba2cab49d72b8ce9c1619994a9355daf42c15f1f", "changes": 25, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/test/java/org/apache/avro/TestSchema.java?ref=60d9ef0ad24d91735210830b2481e884ec45c9e7", "patch": "@@ -75,4 +75,29 @@ public void testCreateUnionVarargs() {\n     Schema schema = Schema.createUnion(Schema.create(Type.NULL), Schema.create(Type.LONG));\n     assertEquals(expected, schema);\n   }\n+\n+  @Test\n+  public void testEmptyRecordSchema() {\n+    Schema schema = Schema.createRecord(\"foobar\", null, null, false);\n+    String schemaString = schema.toString();\n+    assertNotNull(schemaString);\n+  }\n+\n+  @Test\n+  public void testSchemaWithFields() {\n+    List<Field> fields = new ArrayList<Field>();\n+    fields.add(new Field(\"field_name1\", Schema.create(Type.NULL), null, null));\n+    fields.add(new Field(\"field_name2\", Schema.create(Type.INT), null, null));\n+    Schema schema = Schema.createRecord(\"foobar\", null, null, false, fields);\n+    String schemaString = schema.toString();\n+    assertNotNull(schemaString);\n+    assertEquals(2, schema.getFields().size());\n+  }\n+\n+  @Test(expected = NullPointerException.class)\n+  public void testSchemaWithNullFields() {\n+    Schema.createRecord(\"foobar\", null, null, false, null);\n+  }\n+\n+\n }", "filename": "lang/java/avro/src/test/java/org/apache/avro/TestSchema.java"}], "repo": "avro"}, {"commit": "https://github.com/apache/avro/commit/1b9263f5e8587f147c7d2920552c639f1bbf9759", "parent": "https://github.com/apache/avro/commit/f86e0305115fdf9aaa90b19e3bb8ee58324a1406", "message": "AVRO-350.  Fix GenericData.Record#get(String) to return null rather than throw NPE when passed a field name not in the record.  Contributed by Kevin Oliver.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/avro/trunk@905827 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "avro_6", "file": [{"additions": 4, "raw_url": "https://github.com/apache/avro/raw/1b9263f5e8587f147c7d2920552c639f1bbf9759/CHANGES.txt", "blob_url": "https://github.com/apache/avro/blob/1b9263f5e8587f147c7d2920552c639f1bbf9759/CHANGES.txt", "sha": "9cc5d13ccf511cffa28e8d57249d6b834891350f", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/avro/contents/CHANGES.txt?ref=1b9263f5e8587f147c7d2920552c639f1bbf9759", "patch": "@@ -414,6 +414,10 @@ Trunk (unreleased changes)\n \n     AVRO-361. Specific Compiler fails to handle union with two fixed branches (Scott Carey via philz)\n \n+    AVRO-350. Fix GenericData.Record#get(String) to return null rather than\n+    throw NPE when passed a field name that's not in the record.\n+    (Kevin Oliver via cutting)\n+\n Avro 1.2.0 (14 October 2009)\n \n   INCOMPATIBLE CHANGES", "filename": "CHANGES.txt"}, {"additions": 3, "raw_url": "https://github.com/apache/avro/raw/1b9263f5e8587f147c7d2920552c639f1bbf9759/lang/java/src/java/org/apache/avro/generic/GenericData.java", "blob_url": "https://github.com/apache/avro/blob/1b9263f5e8587f147c7d2920552c639f1bbf9759/lang/java/src/java/org/apache/avro/generic/GenericData.java", "sha": "37f2ed8eb15a7c31bf745b761862b280dec71c02", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/generic/GenericData.java?ref=1b9263f5e8587f147c7d2920552c639f1bbf9759", "patch": "@@ -56,7 +56,9 @@ public Record(Schema schema) {\n     }\n     @Override public void put(int i, Object v) { values[i] = v; }\n     @Override public Object get(String key) {\n-      return values[schema.getFields().get(key).pos()];\n+      Field field = schema.getFields().get(key);\n+      if (field == null) return null;\n+      return values[field.pos()];\n     }\n     @Override public Object get(int i) { return values[i]; }\n     @Override public boolean equals(Object o) {", "filename": "lang/java/src/java/org/apache/avro/generic/GenericData.java"}, {"additions": 11, "raw_url": "https://github.com/apache/avro/raw/1b9263f5e8587f147c7d2920552c639f1bbf9759/lang/java/src/test/java/org/apache/avro/generic/TestGenericData.java", "blob_url": "https://github.com/apache/avro/blob/1b9263f5e8587f147c7d2920552c639f1bbf9759/lang/java/src/test/java/org/apache/avro/generic/TestGenericData.java", "sha": "5c7061969f5ea437f4c72d1a323673faaf5b3610", "changes": 11, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/test/java/org/apache/avro/generic/TestGenericData.java?ref=1b9263f5e8587f147c7d2920552c639f1bbf9759", "patch": "@@ -17,11 +17,14 @@\n  */\n package org.apache.avro.generic;\n \n+import java.util.LinkedHashMap;\n+\n import static org.junit.Assert.*;\n \n import java.util.Arrays;\n \n import org.apache.avro.Schema;\n+import org.apache.avro.Schema.Field;\n import org.apache.avro.AvroRuntimeException;\n import org.apache.avro.Schema.Type;\n \n@@ -57,4 +60,12 @@ public void testHashCode() {\n         Arrays.asList(Schema.create(Type.BOOLEAN), Schema.create(Type.STRING))));\n   }\n \n+  @Test\n+  public void testRecordGetFieldDoesntExist() throws Exception {\n+    LinkedHashMap<String, Field> fields = new LinkedHashMap<String, Field>();\n+    Schema schema = Schema.createRecord(fields);\n+    GenericData.Record record = new GenericData.Record(schema);\n+    assertNull(record.get(\"does not exist\"));\n+  }\n+    \n }", "filename": "lang/java/src/test/java/org/apache/avro/generic/TestGenericData.java"}], "repo": "avro"}, {"commit": "https://github.com/apache/avro/commit/f86e0305115fdf9aaa90b19e3bb8ee58324a1406", "parent": "https://github.com/apache/avro/commit/6c7b0e1396e9e6326f80a82515f4de44d4f0ebf9", "message": "AVRO-387.  Add IndexedRecord interface, so that specific & generic may share #toString(), #hashCode(), #compare(), etc.  Also fix toString() and hashCode() to not throw NPE for uninitialized records.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/avro/trunk@905807 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "avro_7", "file": [{"additions": 5, "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/CHANGES.txt", "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/CHANGES.txt", "sha": "be908211b9d0f421efc6b37953a8fc3c7e7048b1", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/avro/contents/CHANGES.txt?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406", "patch": "@@ -36,6 +36,11 @@ Trunk (unreleased changes)\n \n     AVRO-374. Remove and ignore files that are created by autoreconf. (sbanacho)\n \n+    AVRO-387. Add IndexedRecord interface, common to both specific and\n+    generic records, so that toString() and hashCode() implementations\n+    can be shared.  Also fix toString() and hashCode() to not throw\n+    NPE for uninitialized records. (cutting)\n+\n   NEW FEATURES\n \n     AVRO-151. Validating Avro schema parser for C (massie)", "filename": "CHANGES.txt"}, {"additions": 16, "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/generic/GenericData.java", "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/generic/GenericData.java", "sha": "5f7141d78ecf50f43a0a54accdf85331ea105867", "changes": 30, "status": "modified", "deletions": 14, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/generic/GenericData.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406", "patch": "@@ -175,8 +175,8 @@ public int compareTo(Fixed that) {\n   public boolean validate(Schema schema, Object datum) {\n     switch (schema.getType()) {\n     case RECORD:\n-      if (!(datum instanceof GenericRecord)) return false;\n-      GenericRecord fields = (GenericRecord)datum;\n+      if (!(datum instanceof IndexedRecord)) return false;\n+      IndexedRecord fields = (IndexedRecord)datum;\n       for (Map.Entry<String, Field> entry : schema.getFields().entrySet()) {\n         Field f = entry.getValue();\n         if (!validate(f.schema(), fields.get(f.pos())))\n@@ -225,11 +225,12 @@ public String toString(Object datum) {\n     toString(datum, buffer);\n     return buffer.toString();\n   }\n-  private void toString(Object datum, StringBuilder buffer) {\n-    if (datum instanceof GenericRecord) {\n+  /** Renders a Java datum as <a href=\"http://www.json.org/\">JSON</a>. */\n+  protected void toString(Object datum, StringBuilder buffer) {\n+    if (datum instanceof IndexedRecord) {\n       buffer.append(\"{\");\n       int count = 0;\n-      GenericRecord record = (GenericRecord)datum;\n+      IndexedRecord record = (IndexedRecord)datum;\n       for (Map.Entry<String,Field> e :\n              record.getSchema().getFields().entrySet()) {\n         toString(e.getKey(), buffer);\n@@ -280,8 +281,8 @@ private void toString(Object datum, StringBuilder buffer) {\n \n   /** Create a schema given an example datum. */\n   public Schema induce(Object datum) {\n-    if (datum instanceof GenericRecord) {\n-      return ((GenericRecord)datum).getSchema();\n+    if (datum instanceof IndexedRecord) {\n+      return ((IndexedRecord)datum).getSchema();\n     } else if (datum instanceof GenericArray) {\n       Schema elementType = null;\n       for (Object element : (GenericArray)datum) {\n@@ -370,11 +371,11 @@ protected boolean isArray(Object datum) {\n \n   /** Called by the default implementation of {@link #instanceOf}.*/\n   protected boolean isRecord(Object datum) {\n-    return datum instanceof GenericRecord;\n+    return datum instanceof IndexedRecord;\n   }\n \n   /** Called to obtain the schema of a record.  By default calls\n-   * {GenericRecord#getSchema().  May be overridden for alternate record\n+   * {GenericContainer#getSchema().  May be overridden for alternate record\n    * representations. */\n   protected Schema getRecordSchema(Object record) {\n     return ((GenericContainer)record).getSchema();\n@@ -387,7 +388,7 @@ protected boolean isEnum(Object datum) {\n   \n   /** Called by the default implementation of {@link #instanceOf}.*/\n   protected boolean isMap(Object datum) {\n-    return (datum instanceof Map) && (!(datum instanceof GenericRecord));\n+    return datum instanceof Map;\n   }\n   \n   /** Called by the default implementation of {@link #instanceOf}.*/\n@@ -408,10 +409,11 @@ protected boolean isBytes(Object datum) {\n   /** Compute a hash code according to a schema, consistent with {@link\n    * #compare(Object,Object,Schema)}. */\n   public int hashCode(Object o, Schema s) {\n+    if (o == null) return 0;                      // incomplete datum\n     int hashCode = 1;\n     switch (s.getType()) {\n     case RECORD:\n-      GenericRecord r = (GenericRecord)o;\n+      IndexedRecord r = (IndexedRecord)o;\n       for (Map.Entry<String, Field> e : s.getFields().entrySet()) {\n         Field f = e.getValue();\n         if (f.order() == Field.Order.IGNORE)\n@@ -430,7 +432,7 @@ public int hashCode(Object o, Schema s) {\n     case NULL:\n       return 0;\n     default:\n-      return (o == null) ? 0 : o.hashCode();\n+      return o.hashCode();\n     }\n   }\n \n@@ -448,8 +450,8 @@ public int compare(Object o1, Object o2, Schema s) {\n     if (o1 == o2) return 0;\n     switch (s.getType()) {\n     case RECORD:\n-      GenericRecord r1 = (GenericRecord)o1;\n-      GenericRecord r2 = (GenericRecord)o2;\n+      IndexedRecord r1 = (IndexedRecord)o1;\n+      IndexedRecord r2 = (IndexedRecord)o2;\n       for (Map.Entry<String, Field> e : s.getFields().entrySet()) {\n         Field f = e.getValue();\n         if (f.order() == Field.Order.IGNORE)", "filename": "lang/java/src/java/org/apache/avro/generic/GenericData.java"}, {"additions": 6, "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/generic/GenericDatumReader.java", "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/generic/GenericDatumReader.java", "sha": "1f173b15e481b1d6dc454c468175d25f13e0e03c", "changes": 12, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/generic/GenericDatumReader.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406", "patch": "@@ -174,16 +174,16 @@ protected Object readRecord(Object old, Schema actual, Schema expected,\n \n   /** Called by the default implementation of {@link #readRecord} to set a\n    * record fields value to a record instance.  The default implementation is\n-   * for {@link GenericRecord}.*/\n+   * for {@link IndexedRecord}.*/\n   protected void setField(Object record, String name, int position, Object o) {\n-    ((GenericRecord)record).put(position, o);\n+    ((IndexedRecord)record).put(position, o);\n   }\n   \n   /** Called by the default implementation of {@link #readRecord} to retrieve a\n    * record field value from a reused instance.  The default implementation is\n-   * for {@link GenericRecord}.*/\n+   * for {@link IndexedRecord}.*/\n   protected Object getField(Object record, String name, int position) {\n-    return ((GenericRecord)record).get(position);\n+    return ((IndexedRecord)record).get(position);\n   }\n \n   /** Called by the default implementation of {@link #readRecord} to construct\n@@ -359,8 +359,8 @@ protected Object createFixed(Object old, byte[] bytes, Schema schema) {\n    * a {@link GenericData.Record}.\n    */\n   protected Object newRecord(Object old, Schema schema) {\n-    if (old instanceof GenericRecord) {\n-      GenericRecord record = (GenericRecord)old;\n+    if (old instanceof IndexedRecord) {\n+      IndexedRecord record = (IndexedRecord)old;\n       if (record.getSchema() == schema)\n         return record;\n     }", "filename": "lang/java/src/java/org/apache/avro/generic/GenericDatumReader.java"}, {"additions": 2, "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/generic/GenericDatumWriter.java", "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/generic/GenericDatumWriter.java", "sha": "d2bb29867accb01139c56fbbac31876c5cea0e32", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/generic/GenericDatumWriter.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406", "patch": "@@ -93,9 +93,9 @@ protected void writeRecord(Schema schema, Object datum, Encoder out)\n   \n   /** Called by the default implementation of {@link #writeRecord} to retrieve\n    * a record field value.  The default implementation is for {@link\n-   * GenericRecord}.*/\n+   * IndexedRecord}.*/\n   protected Object getField(Object record, String field, int position) {\n-    return ((GenericRecord) record).get(position);\n+    return ((IndexedRecord) record).get(position);\n   }\n   \n   /** Called to write an enum value.  May be overridden for alternate enum", "filename": "lang/java/src/java/org/apache/avro/generic/GenericDatumWriter.java"}, {"additions": 3, "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/generic/GenericRecord.java", "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/generic/GenericRecord.java", "sha": "aa8c1939bb3d6934cc68c30b7e1d7947fdf95fe2", "changes": 9, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/generic/GenericRecord.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406", "patch": "@@ -17,14 +17,11 @@\n  */\n package org.apache.avro.generic;\n \n-/** An instance of a record schema.*/\n-public interface GenericRecord extends GenericContainer {\n+/** A generic instance of a record schema.  Fields are accessible by name as\n+ * well as by index. */\n+public interface GenericRecord extends IndexedRecord {\n   /** Set the value of a field given its name. */\n   void put(String key, Object v);\n-  /** Set the value of a field given its position in the schema. */\n-  void put(int i, Object v);\n   /** Return the value of a field given its name. */\n   Object get(String key);\n-  /** Return the value of a field given its position in the schema. */\n-  Object get(int i);\n }", "filename": "lang/java/src/java/org/apache/avro/generic/GenericRecord.java"}, {"additions": 26, "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/generic/IndexedRecord.java", "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/generic/IndexedRecord.java", "sha": "e3e93d8c2296ba8462d5ed81ddad64a190f9c907", "changes": 26, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/generic/IndexedRecord.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406", "patch": "@@ -0,0 +1,26 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.avro.generic;\n+\n+/** A record implementation that permits field access by integer index.*/\n+public interface IndexedRecord extends GenericContainer {\n+  /** Set the value of a field given its position in the schema. */\n+  void put(int i, Object v);\n+  /** Return the value of a field given its position in the schema. */\n+  Object get(int i);\n+}", "filename": "lang/java/src/java/org/apache/avro/generic/IndexedRecord.java"}, {"additions": 1, "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificCompiler.java", "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificCompiler.java", "sha": "7618c3c16a0c8bfb9d9c48ebb2c5f60e3ffe1878", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/specific/SpecificCompiler.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406", "patch": "@@ -275,7 +275,7 @@ private OutputFile compile(Schema schema) {\n       line(out, 1, \"}\");\n       // set method\n       line(out, 1, \"@SuppressWarnings(value=\\\"unchecked\\\")\");\n-      line(out, 1, \"public void set(int field$, java.lang.Object value$) {\");\n+      line(out, 1, \"public void put(int field$, java.lang.Object value$) {\");\n       line(out, 2, \"switch (field$) {\");\n       i = 0;\n       for (Map.Entry<String, Schema> field : schema.getFieldSchemas())", "filename": "lang/java/src/java/org/apache/avro/specific/SpecificCompiler.java"}, {"additions": 0, "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificData.java", "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificData.java", "sha": "a6b12d72857193c50c6393757f4f5a4845b22891", "changes": 43, "status": "modified", "deletions": 43, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/specific/SpecificData.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406", "patch": "@@ -17,7 +17,6 @@\n  */\n package org.apache.avro.specific;\n \n-import java.util.Iterator;\n import java.util.Map;\n import java.util.List;\n import java.util.WeakHashMap;\n@@ -30,7 +29,6 @@\n import org.apache.avro.Protocol;\n import org.apache.avro.AvroRuntimeException;\n import org.apache.avro.AvroTypeException;\n-import org.apache.avro.Schema.Field;\n import org.apache.avro.Schema.Type;\n import org.apache.avro.generic.GenericData;\n import org.apache.avro.generic.GenericArray;\n@@ -64,15 +62,6 @@ protected boolean isEnum(Object datum) {\n   @Override\n   public boolean validate(Schema schema, Object datum) {\n     switch (schema.getType()) {\n-    case RECORD:\n-      Class c = datum.getClass(); \n-      if (!(datum instanceof SpecificRecord)) return false;\n-      SpecificRecord record = (SpecificRecord)datum;\n-      Iterator<Field> fields = schema.getFields().values().iterator();\n-      for (int i = 0; fields.hasNext(); i++)\n-        if (!validate(fields.next().schema(), record.get(i)))\n-          return false;\n-      return true;\n     case ENUM:\n       return datum instanceof Enum\n         && schema.getEnumSymbols().contains(((Enum)datum).name());\n@@ -209,41 +198,9 @@ public Protocol getProtocol(Class iface) {\n     }\n   }\n \n-  @Override\n-  public int hashCode(Object o, Schema s) {\n-    switch (s.getType()) {\n-    case RECORD:\n-      int hashCode = 1;\n-      SpecificRecord r = (SpecificRecord)o;\n-      Iterator<Field> fields = s.getFields().values().iterator();\n-      for (int i = 0; fields.hasNext(); i++) {\n-        Field f = fields.next();\n-        if (f.order() == Field.Order.IGNORE)\n-          continue;\n-        hashCode = hashCodeAdd(hashCode, r.get(i), f.schema());\n-      }\n-      return hashCode;\n-    default:\n-      return super.hashCode(o, s);\n-    }\n-  }\n-\n   @Override\n   public int compare(Object o1, Object o2, Schema s) {\n     switch (s.getType()) {\n-    case RECORD:\n-      SpecificRecord r1 = (SpecificRecord)o1;\n-      SpecificRecord r2 = (SpecificRecord)o2;\n-      Iterator<Field> fields = s.getFields().values().iterator();\n-      for (int i = 0; fields.hasNext(); i++) {\n-        Field f = fields.next();\n-        if (f.order() == Field.Order.IGNORE)\n-          continue;                               // ignore this field\n-        int compare = compare(r1.get(i), r2.get(i), f.schema());\n-        if (compare != 0)                         // not equal\n-          return f.order() == Field.Order.DESCENDING ? -compare : compare;\n-      }\n-      return 0;\n     case ENUM:\n       return ((Enum)o1).ordinal() - ((Enum)o2).ordinal();\n     default:", "filename": "lang/java/src/java/org/apache/avro/specific/SpecificData.java"}, {"additions": 1, "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificDatumReader.java", "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificDatumReader.java", "sha": "327b7ff4693eaeadb787f97d9f819c58929e55e6", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/specific/SpecificDatumReader.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406", "patch": "@@ -44,7 +44,7 @@ protected Object newRecord(Object old, Schema schema) {\n \n   @Override\n   protected void setField(Object record, String name, int position, Object o) {\n-    ((SpecificRecord)record).set(position, o);\n+    ((SpecificRecord)record).put(position, o);\n   }\n   @Override\n   protected Object getField(Object record, String name, int position) {", "filename": "lang/java/src/java/org/apache/avro/specific/SpecificDatumReader.java"}, {"additions": 1, "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificExceptionBase.java", "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificExceptionBase.java", "sha": "b3cd436de9d0e324ff11a5a8fd6feae6b923eec1", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/specific/SpecificExceptionBase.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406", "patch": "@@ -27,7 +27,7 @@\n \n   public abstract Schema getSchema();\n   public abstract Object get(int field);\n-  public abstract void set(int field, Object value);\n+  public abstract void put(int field, Object value);\n \n   public boolean equals(Object that) {\n     if (that == this) return true;                        // identical object", "filename": "lang/java/src/java/org/apache/avro/specific/SpecificExceptionBase.java"}, {"additions": 2, "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificRecord.java", "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificRecord.java", "sha": "ad78df2aabfaea6d14b2acf882a985a5f281254d", "changes": 6, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/specific/SpecificRecord.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406", "patch": "@@ -17,12 +17,10 @@\n  */\n package org.apache.avro.specific;\n \n-import org.apache.avro.generic.GenericContainer;\n+import org.apache.avro.generic.IndexedRecord;\n \n /** Implemented by generated record classes. Permits efficient access to\n  * fields.*/\n-public interface SpecificRecord extends GenericContainer {\n-  Object get(int field);\n-  void set(int field, Object value);\n+public interface SpecificRecord extends IndexedRecord {\n }\n ", "filename": "lang/java/src/java/org/apache/avro/specific/SpecificRecord.java"}, {"additions": 6, "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificRecordBase.java", "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/java/org/apache/avro/specific/SpecificRecordBase.java", "sha": "d0a67052a4605efd1509aaa189757f7f74c1931b", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/java/org/apache/avro/specific/SpecificRecordBase.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406", "patch": "@@ -25,7 +25,7 @@\n \n   public abstract Schema getSchema();\n   public abstract Object get(int field);\n-  public abstract void set(int field, Object value);\n+  public abstract void put(int field, Object value);\n \n   @Override\n   public boolean equals(Object that) {\n@@ -45,5 +45,10 @@ public int compareTo(SpecificRecord that) {\n     return SpecificData.get().compare(this, that, this.getSchema());\n   }\n \n+  @Override\n+  public String toString() {\n+    return SpecificData.get().toString(this);\n+  }\n+\n }\n ", "filename": "lang/java/src/java/org/apache/avro/specific/SpecificRecordBase.java"}, {"additions": 11, "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/test/java/org/apache/avro/generic/TestGenericData.java", "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/test/java/org/apache/avro/generic/TestGenericData.java", "sha": "843963e070f154ac2ead59cce654c7ae002e8ab8", "changes": 11, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/test/java/org/apache/avro/generic/TestGenericData.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406", "patch": "@@ -19,8 +19,11 @@\n \n import static org.junit.Assert.*;\n \n+import java.util.Arrays;\n+\n import org.apache.avro.Schema;\n import org.apache.avro.AvroRuntimeException;\n+import org.apache.avro.Schema.Type;\n \n import org.junit.Test;\n \n@@ -45,5 +48,13 @@ public void testArrayConstructorNullSchema() throws Exception {\n     public void testArrayConstructorWrongSchema() throws Exception {\n     new GenericData.Array<Object>(1, Schema.create(Schema.Type.INT));\n   }\n+  \n+  @Test\n+  /** Make sure that even with nulls, hashCode() doesn't throw NPE. */\n+  public void testHashCode() {\n+    GenericData.get().hashCode(null, Schema.create(Type.NULL));\n+    GenericData.get().hashCode(null, Schema.createUnion(\n+        Arrays.asList(Schema.create(Type.BOOLEAN), Schema.create(Type.STRING))));\n+  }\n \n }", "filename": "lang/java/src/test/java/org/apache/avro/generic/TestGenericData.java"}, {"additions": 41, "raw_url": "https://github.com/apache/avro/raw/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/test/java/org/apache/avro/specific/TestSpecificData.java", "blob_url": "https://github.com/apache/avro/blob/f86e0305115fdf9aaa90b19e3bb8ee58324a1406/lang/java/src/test/java/org/apache/avro/specific/TestSpecificData.java", "sha": "89a8ad83a83bb8c27cd59266c233b51b7b881006", "changes": 41, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/src/test/java/org/apache/avro/specific/TestSpecificData.java?ref=f86e0305115fdf9aaa90b19e3bb8ee58324a1406", "patch": "@@ -0,0 +1,41 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.avro.specific;\n+\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+\n+import org.apache.avro.test.TestRecord;\n+\n+public class TestSpecificData {\n+  \n+  @Test\n+  /** Make sure that even with nulls, hashCode() doesn't throw NPE. */\n+  public void testHashCode() {\n+    new TestRecord().hashCode();\n+    SpecificData.get().hashCode(null, TestRecord.SCHEMA$);\n+  }\n+\n+  @Test\n+  /** Make sure that even with nulls, toString() doesn't throw NPE. */\n+  public void testToString() {\n+    new TestRecord().toString();\n+  }\n+\n+}", "filename": "lang/java/src/test/java/org/apache/avro/specific/TestSpecificData.java"}], "repo": "avro"}]
