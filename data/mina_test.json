{
    "mina_0463d95": {
        "bug_id": "mina_0463d95",
        "commit": "https://github.com/apache/mina/commit/0463d95e77436d5da5937a36054fad5028bbd0e3",
        "file": [
            {
                "additions": 69,
                "blob_url": "https://github.com/apache/mina/blob/0463d95e77436d5da5937a36054fad5028bbd0e3/core/src/main/java/org/apache/mina/core/service/IoServiceListenerSupport.java",
                "changes": 93,
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/core/service/IoServiceListenerSupport.java?ref=0463d95e77436d5da5937a36054fad5028bbd0e3",
                "deletions": 24,
                "filename": "core/src/main/java/org/apache/mina/core/service/IoServiceListenerSupport.java",
                "patch": "@@ -34,61 +34,73 @@\n import org.apache.mina.util.ExceptionMonitor;\n \n /**\n- * A helper which provides addition and removal of {@link IoServiceListener}s and firing\n+ * A helper class which provides addition and removal of {@link IoServiceListener}s and firing\n  * events.\n  *\n  * @author <a href=\"http://mina.apache.org\">Apache MINA Project</a>\n  */\n public class IoServiceListenerSupport {\n-    /**\n-     * The {@link IoService} that this instance manages.\n-     */\n+    /** The {@link IoService} that this instance manages. */\n     private final IoService service;\n \n-    /**\n-     * A list of {@link IoServiceListener}s.\n-     */\n+    /** A list of {@link IoServiceListener}s. */\n     private final List<IoServiceListener> listeners = new CopyOnWriteArrayList<IoServiceListener>();\n \n-    /**\n-     * Tracks managed sessions.\n-     */\n+    /** Tracks managed sessions. */\n     private final ConcurrentMap<Long, IoSession> managedSessions = new ConcurrentHashMap<Long, IoSession>();\n \n-    /**\n-     * Read only version of {@link #managedSessions}.\n-     */\n+    /**  Read only version of {@link #managedSessions}. */\n     private final Map<Long, IoSession> readOnlyManagedSessions = Collections.unmodifiableMap(managedSessions);\n \n     private final AtomicBoolean activated = new AtomicBoolean();\n+    \n+    /** Time this listenerSupport has been activated */\n     private volatile long activationTime;\n-    private volatile int largestManagedSessionCount;\n-    private volatile long cumulativeManagedSessionCount;\n+    \n+    /** A counter used to store the maximum sessions we managed since the listenerSupport has been activated */\n+    private volatile int largestManagedSessionCount = 0;\n+    \n+    /** A global counter to count the number of sessions managed since the start */\n+    private volatile long cumulativeManagedSessionCount = 0;\n \n     /**\n-     * Creates a new instance.\n+     * Creates a new instance of the listenerSupport.\n+     * \n+     * @param service The associated IoService\n      */\n     public IoServiceListenerSupport(IoService service) {\n         if (service == null) {\n             throw new NullPointerException(\"service\");\n         }\n+        \n         this.service = service;\n     }\n \n     /**\n      * Adds a new listener.\n+     * \n+     * @param listener The added listener\n      */\n     public void add(IoServiceListener listener) {\n-        listeners.add(listener);\n+        if (listener != null) {\n+            listeners.add(listener);\n+        }\n     }\n \n     /**\n      * Removes an existing listener.\n+     * \n+     * @param listener The listener to remove\n      */\n     public void remove(IoServiceListener listener) {\n-        listeners.remove(listener);\n+        if (listener != null) {\n+            listeners.remove(listener);\n+        }\n     }\n \n+    /**\n+     * @return The time (in ms) this instance has been activated\n+     */\n     public long getActivationTime() {\n         return activationTime;\n     }\n@@ -101,14 +113,25 @@ public int getManagedSessionCount() {\n         return managedSessions.size();\n     }\n \n+    /**\n+     * @return The largest number of managed session since the creation of this \n+     * listenerSupport\n+     */\n     public int getLargestManagedSessionCount() {\n         return largestManagedSessionCount;\n     }\n \n+    /**\n+     * @return The total number of sessions managed since the initilization of this \n+     * ListenerSupport\n+     */\n     public long getCumulativeManagedSessionCount() {\n         return cumulativeManagedSessionCount;\n     }\n \n+    /**\n+     * @return true if the instance is active\n+     */\n     public boolean isActive() {\n         return activated.get();\n     }\n@@ -119,14 +142,16 @@ public boolean isActive() {\n      */\n     public void fireServiceActivated() {\n         if (!activated.compareAndSet(false, true)) {\n+            // The instance is already active\n             return;\n         }\n \n         activationTime = System.currentTimeMillis();\n \n-        for (IoServiceListener l : listeners) {\n+        // Activate all the listeners now\n+        for (IoServiceListener listener : listeners) {\n             try {\n-                l.serviceActivated(service);\n+                listener.serviceActivated(service);\n             } catch (Throwable e) {\n                 ExceptionMonitor.getInstance().exceptionCaught(e);\n             }\n@@ -139,13 +164,15 @@ public void fireServiceActivated() {\n      */\n     public void fireServiceDeactivated() {\n         if (!activated.compareAndSet(true, false)) {\n+            // The instance is already desactivated \n             return;\n         }\n \n+        // Desactivate all the listeners\n         try {\n-            for (IoServiceListener l : listeners) {\n+            for (IoServiceListener listener : listeners) {\n                 try {\n-                    l.serviceDeactivated(service);\n+                    listener.serviceDeactivated(service);\n                 } catch (Throwable e) {\n                     ExceptionMonitor.getInstance().exceptionCaught(e);\n                 }\n@@ -157,17 +184,20 @@ public void fireServiceDeactivated() {\n \n     /**\n      * Calls {@link IoServiceListener#sessionCreated(IoSession)} for all registered listeners.\n+     * \n+     * @param session The session which has been created\n      */\n     public void fireSessionCreated(IoSession session) {\n         boolean firstSession = false;\n+        \n         if (session.getService() instanceof IoConnector) {\n             synchronized (managedSessions) {\n                 firstSession = managedSessions.isEmpty();\n             }\n         }\n \n         // If already registered, ignore.\n-        if (managedSessions.putIfAbsent(Long.valueOf(session.getId()), session) != null) {\n+        if (managedSessions.putIfAbsent(session.getId(), session) != null) {\n             return;\n         }\n \n@@ -182,9 +212,11 @@ public void fireSessionCreated(IoSession session) {\n         filterChain.fireSessionOpened();\n \n         int managedSessionCount = managedSessions.size();\n+        \n         if (managedSessionCount > largestManagedSessionCount) {\n             largestManagedSessionCount = managedSessionCount;\n         }\n+        \n         cumulativeManagedSessionCount ++;\n \n         // Fire listener events.\n@@ -199,10 +231,12 @@ public void fireSessionCreated(IoSession session) {\n \n     /**\n      * Calls {@link IoServiceListener#sessionDestroyed(IoSession)} for all registered listeners.\n+     * \n+     * @param session The session which has been destroyed\n      */\n     public void fireSessionDestroyed(IoSession session) {\n         // Try to remove the remaining empty session set after removal.\n-        if (managedSessions.remove(Long.valueOf(session.getId())) == null) {\n+        if (managedSessions.remove(session.getId()) == null) {\n             return;\n         }\n \n@@ -222,18 +256,26 @@ public void fireSessionDestroyed(IoSession session) {\n             // Fire a virtual service deactivation event for the last session of the connector.\n             if (session.getService() instanceof IoConnector) {\n                 boolean lastSession = false;\n+                \n                 synchronized (managedSessions) {\n                     lastSession = managedSessions.isEmpty();\n                 }\n+                \n                 if (lastSession) {\n                     fireServiceDeactivated();\n                 }\n             }\n         }\n     }\n \n+    /**\n+     * Close all the sessions\n+     * TODO disconnectSessions.\n+     *\n+     */\n     private void disconnectSessions() {\n         if (!(service instanceof IoAcceptor)) {\n+            // We don't disconnect sessions for anything but an Acceptor\n             return;\n         }\n \n@@ -259,6 +301,9 @@ private void disconnectSessions() {\n         }\n     }\n \n+    /**\n+     * A listener in charge of releasing the lock when the close has been completed\n+     */\n     private static class LockNotifyingListener implements IoFutureListener<IoFuture> {\n         private final Object lock;\n ",
                "raw_url": "https://github.com/apache/mina/raw/0463d95e77436d5da5937a36054fad5028bbd0e3/core/src/main/java/org/apache/mina/core/service/IoServiceListenerSupport.java",
                "sha": "fe64a2b17203463640514fda753bf65490ae43e8",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/mina/blob/0463d95e77436d5da5937a36054fad5028bbd0e3/core/src/main/java/org/apache/mina/util/DefaultExceptionMonitor.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/util/DefaultExceptionMonitor.java?ref=0463d95e77436d5da5937a36054fad5028bbd0e3",
                "deletions": 2,
                "filename": "core/src/main/java/org/apache/mina/util/DefaultExceptionMonitor.java",
                "patch": "@@ -33,9 +33,11 @@\n  * @author <a href=\"http://mina.apache.org\">Apache MINA Project</a>\n  */\n public class DefaultExceptionMonitor extends ExceptionMonitor {\n-    private final static Logger LOGGER = LoggerFactory\n-            .getLogger(DefaultExceptionMonitor.class);\n+    private final static Logger LOGGER = LoggerFactory.getLogger(DefaultExceptionMonitor.class);\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     @Override\n     public void exceptionCaught(Throwable cause) {\n         if (cause instanceof Error) {",
                "raw_url": "https://github.com/apache/mina/raw/0463d95e77436d5da5937a36054fad5028bbd0e3/core/src/main/java/org/apache/mina/util/DefaultExceptionMonitor.java",
                "sha": "7b9d595df7c34ba3b6ea11b3937ebcc4f5b2994a",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/mina/blob/0463d95e77436d5da5937a36054fad5028bbd0e3/core/src/main/java/org/apache/mina/util/ExceptionMonitor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/util/ExceptionMonitor.java?ref=0463d95e77436d5da5937a36054fad5028bbd0e3",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/mina/util/ExceptionMonitor.java",
                "patch": "@@ -55,11 +55,14 @@ public static void setInstance(ExceptionMonitor monitor) {\n         if (monitor == null) {\n             monitor = new DefaultExceptionMonitor();\n         }\n+        \n         instance = monitor;\n     }\n \n     /**\n      * Invoked when there are any uncaught exceptions.\n+     * \n+     * @param cause The caught exception\n      */\n     public abstract void exceptionCaught(Throwable cause);\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/mina/raw/0463d95e77436d5da5937a36054fad5028bbd0e3/core/src/main/java/org/apache/mina/util/ExceptionMonitor.java",
                "sha": "9da76a193057f26acc13e33539f93ed2e02095f3",
                "status": "modified"
            }
        ],
        "message": "o Added Javadoc and comments for those three classes\no Added some check against NPE and removed useless code\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/trunk@900040 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/mina/commit/f6f81270aace599f13895d8aa8022a98da8b165f",
        "patched_files": [
            "IoServiceListenerSupport.java"
        ],
        "repo": "mina",
        "unit_tests": [
            "IoServiceListenerSupportTest.java"
        ]
    }
}