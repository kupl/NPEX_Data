[
    {
        "repo": "odftoolkit",
        "message": "ODFTOOLKIT-401 - NullPointerException from typo hides all ZIP exceptions\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/odf/trunk@1693805 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/odftoolkit/commit/69320af9dfb033dc99c9f5be449b26e30066b83d",
        "parent": "https://github.com/apache/odftoolkit/commit/988d1693bf3cce150ccdcc768a4f7763471d2415",
        "bug_id": "odftoolkit_1",
        "file": [
            {
                "sha": "f6f89781872af5a472c9c1014cc7a237263d3a89",
                "filename": "odfdom/src/main/java/org/odftoolkit/odfdom/pkg/ZipHelper.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/69320af9dfb033dc99c9f5be449b26e30066b83d/odfdom/src/main/java/org/odftoolkit/odfdom/pkg/ZipHelper.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/69320af9dfb033dc99c9f5be449b26e30066b83d/odfdom/src/main/java/org/odftoolkit/odfdom/pkg/ZipHelper.java",
                "status": "modified",
                "changes": 23,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/odfdom/src/main/java/org/odftoolkit/odfdom/pkg/ZipHelper.java?ref=69320af9dfb033dc99c9f5be449b26e30066b83d",
                "patch": "@@ -1,20 +1,20 @@\n /************************************************************************\n  *\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER\n- * \n+ *\n  * Copyright 2008, 2010 Oracle and/or its affiliates. All rights reserved.\n- * \n+ *\n  * Use is subject to license terms.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n  * use this file except in compliance with the License. You may obtain a copy\n  * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also\n  * obtain a copy of the License at http://odftoolkit.org/docs/license.txt\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * \n+ *\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  *\n@@ -82,12 +82,17 @@ String entriesToMap(Map<String, ZipEntry> zipEntries) throws IOException, SAXExc\n \t\t\t\t\t\ttry {\n \t\t\t\t\t\t\tzipEntry = inputStream.getNextEntry();\n \t\t\t\t\t\t} catch (java.util.zip.ZipException e) {\n-\t\t\t\t\t\t\t// JDK 6 -- the try/catch is workaround for a\n+                            // JDK 6 -- the try/catch is workaround for a\n \t\t\t\t\t\t\t// specific JDK 5 only problem\n-\t\t\t\t\t\t\tif (!e.getMessage().contains(\"missing entry name\") && !System.getProperty(\"Java.version\").equals(\"1.5.0\")) {\n+                            String eMsg = e.getMessage();\n+                            String jVersion = System.getProperty(\"java.version\");\n+\t\t\t\t\t\t\tif (eMsg != null && jVersion != null && !eMsg.contains(\"missing entry name\")  && !jVersion.equals(\"1.5.0\")) {\n \t\t\t\t\t\t\t\tLogger.getLogger(ZipHelper.class.getName()).info(\"ZIP ENTRY not found\");\n-\t\t\t\t\t\t\t\tthrow e;\n-\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tthrow new java.util.zip.ZipException(\"ZIP entry '\" + zipEntry.toString() + \"': \" + eMsg);\n+\t\t\t\t\t\t\t}else{\n+                                Logger.getLogger(ZipHelper.class.getName()).info(e.getMessage());\n+                                throw new java.util.zip.ZipException(\"ZIP entry '\" + zipEntry.toString() + \"': \" + eMsg);\n+                            }\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}",
                "deletions": 9
            }
        ]
    },
    {
        "repo": "odftoolkit",
        "message": "ODFTOOLKIT-401 - NullPointerException from typo hides all ZIP exceptions and better feed-back with no version given in ODF\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/odf/trunk@1693806 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/odftoolkit/commit/1ebcbc849f8f6df32bf7fa25464ed40d9659c710",
        "parent": "https://github.com/apache/odftoolkit/commit/69320af9dfb033dc99c9f5be449b26e30066b83d",
        "bug_id": "odftoolkit_2",
        "file": [
            {
                "sha": "7433653cd657894291216bd1dcc975ec9eb6afcf",
                "filename": "validator/src/main/java/org/odftoolkit/odfvalidator/ODFRootPackageValidator.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/1ebcbc849f8f6df32bf7fa25464ed40d9659c710/validator/src/main/java/org/odftoolkit/odfvalidator/ODFRootPackageValidator.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/1ebcbc849f8f6df32bf7fa25464ed40d9659c710/validator/src/main/java/org/odftoolkit/odfvalidator/ODFRootPackageValidator.java",
                "status": "modified",
                "changes": 123,
                "additions": 56,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/validator/src/main/java/org/odftoolkit/odfvalidator/ODFRootPackageValidator.java?ref=1ebcbc849f8f6df32bf7fa25464ed40d9659c710",
                "patch": "@@ -1,34 +1,37 @@\n-/************************************************************************\n+/**\n+ * **********************************************************************\n  *\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER\n- * \n+ *\n  * Copyright 2008, 2010 Oracle and/or its affiliates. All rights reserved.\n- * \n+ *\n  * Use is subject to license terms.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n- * use this file except in compliance with the License. You may obtain a copy\n- * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at http://www.apache.org/licenses/LICENSE-2.0. You can also\n  * obtain a copy of the License at http://odftoolkit.org/docs/license.txt\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * \n+ *\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  *\n- ************************************************************************/\n-\n+ ***********************************************************************\n+ */\n package org.odftoolkit.odfvalidator;\n \n import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.zip.ZipException;\n import javax.xml.validation.Validator;\n-import org.odftoolkit.odfdom.pkg.OdfPackage;\n import org.odftoolkit.odfdom.doc.OdfDocument;\n+import org.odftoolkit.odfdom.pkg.OdfPackage;\n import org.xml.sax.ErrorHandler;\n \n abstract class ODFRootPackageValidator extends ODFPackageValidator implements ManifestEntryListener {\n@@ -61,94 +64,85 @@ protected OdfPackage getPackage(Logger aLogger) {\n                     aLogger.logFatalError(e.getMessage());\n                 }\n             } catch (Exception e) {\n-                aLogger.logFatalError(e.getMessage());\n+                StringWriter errors = new StringWriter();\n+                e.printStackTrace(new PrintWriter(errors));\n+                aLogger.logFatalError(e.getMessage() + \"\\n\" + errors.toString());\n             }\n         }\n-\n         return m_aPkg;\n     }\n \n-    protected String getStreamName( String aEntry )\n-    {\n+    protected String getStreamName(String aEntry) {\n         return aEntry;\n     }\n \n     @Override\n-    protected boolean validatePre(Logger aLogger, OdfVersion aVersion ) throws ODFValidatorException, IOException\n-    {\n-        Logger aManifestLogger = new Logger(OdfPackage.OdfFile.MANIFEST.getPath(),aLogger);\n-        Logger aMimetypeLogger = new Logger(\"mimetype\",aLogger);\n+    protected boolean validatePre(Logger aLogger, OdfVersion aVersion) throws ODFValidatorException, IOException {\n+        Logger aManifestLogger = new Logger(OdfPackage.OdfFile.MANIFEST.getPath(), aLogger);\n+        Logger aMimetypeLogger = new Logger(\"mimetype\", aLogger);\n \n         // UGLY: do something that causes ODFDOM to parse the manifest, which\n         // may cause m_ErrorHandler to be called\n         m_aPkg.getFilePaths();\n         // hack: just create logger again, too lazy to create a Pair class\n         // and return it from validateMimetype...\n-        boolean bErrorsFound = m_ErrorHandler.processErrors( aLogger, aManifestLogger,\n-                                              aMimetypeLogger, aVersion);\n+        boolean bErrorsFound = m_ErrorHandler.processErrors(aLogger, aManifestLogger,\n+            aMimetypeLogger, aVersion);\n \n         bErrorsFound |= validateMimetype(aMimetypeLogger, aVersion);\n-        bErrorsFound |= validateManifest(aManifestLogger, aVersion  );\n+        bErrorsFound |= validateManifest(aManifestLogger, aVersion);\n         aMimetypeLogger.logSummaryInfo();\n \n         return bErrorsFound;\n     }\n \n     @Override\n-    protected boolean validatePost(Logger aLogger,OdfVersion aVersion ) throws ODFValidatorException, IOException\n-    {\n+    protected boolean validatePost(Logger aLogger, OdfVersion aVersion) throws ODFValidatorException, IOException {\n         boolean bHasErrors = false;\n-        if(m_aSubDocs != null )\n-        {\n+        if (m_aSubDocs != null) {\n             Iterator<ManifestEntry> aIter = m_aSubDocs.iterator();\n-            while( aIter.hasNext() )\n-            {\n+            while (aIter.hasNext()) {\n                 ManifestEntry aEntry = aIter.next();\n-                ODFPackageValidator aPackageValidator =\n-                    new ODFSubPackageValidator( getPackage(aLogger), getLoggerName(), aEntry.getFullPath(), aEntry.getMediaType(),\n-                                                  m_nLogLevel, m_eMode, m_aConfigVersion, m_aFilter, m_aResult.getGenerator(), m_aValidatorProvider );\n+                ODFPackageValidator aPackageValidator\n+                    = new ODFSubPackageValidator(getPackage(aLogger), getLoggerName(), aEntry.getFullPath(), aEntry.getMediaType(),\n+                        m_nLogLevel, m_eMode, m_aConfigVersion, m_aFilter, m_aResult.getGenerator(), m_aValidatorProvider);\n                 bHasErrors |= aPackageValidator.validate(aLogger);\n             }\n         }\n \n-        if( aVersion.compareTo(OdfVersion.V1_2) >= 0 )\n-        {\n-            bHasErrors |= validateDSig( aLogger, OdfPackageExt.STREAMNAME_DOCUMENT_SIGNATURES, aVersion );\n-            bHasErrors |= validateDSig( aLogger, OdfPackageExt.STREAMNAME_MACRO_SIGNATURES, aVersion );\n+        if (aVersion.compareTo(OdfVersion.V1_2) >= 0) {\n+            bHasErrors |= validateDSig(aLogger, OdfPackageExt.STREAMNAME_DOCUMENT_SIGNATURES, aVersion);\n+            bHasErrors |= validateDSig(aLogger, OdfPackageExt.STREAMNAME_MACRO_SIGNATURES, aVersion);\n         }\n \n         return bHasErrors;\n     }\n \n     @Override\n-    protected void logSummary( boolean bHasErrors, Logger aLogger )\n-    {\n+    protected void logSummary(boolean bHasErrors, Logger aLogger) {\n         aLogger.logSummaryInfo();\n-        if( (bHasErrors || aLogger.hasError()) && m_nLogLevel.compareTo(Logger.LogLevel.INFO) < 0  )\n-            aLogger.logInfo( \"Generator: \" + m_aResult.getGenerator() , true );\n+        if ((bHasErrors || aLogger.hasError()) && m_nLogLevel.compareTo(Logger.LogLevel.INFO) < 0) {\n+            aLogger.logInfo(\"Generator: \" + m_aResult.getGenerator(), true);\n+        }\n     }\n \n-\n-    public void foundManifestEntry( ManifestEntry aManifestEntry )\n-    {\n-        if( aManifestEntry.isOpenDocumentMediaType() )\n-        {\n-            if( m_aSubDocs == null )\n+    public void foundManifestEntry(ManifestEntry aManifestEntry) {\n+        if (aManifestEntry.isOpenDocumentMediaType()) {\n+            if (m_aSubDocs == null) {\n                 m_aSubDocs = new ArrayList<ManifestEntry>();\n-            m_aSubDocs.add( aManifestEntry );\n+            }\n+            m_aSubDocs.add(aManifestEntry);\n         }\n     }\n \n-    private boolean validateMimetype(Logger aLogger, OdfVersion aVersion)\n-    {\n+    private boolean validateMimetype(Logger aLogger, OdfVersion aVersion) {\n         boolean bHasErrors = false;\n \n-        String aMimetype=getPackage(aLogger).getMediaTypeString();\n-        if( (aMimetype == null) || aMimetype.length() == 0 ) {\n+        String aMimetype = getPackage(aLogger).getMediaTypeString();\n+        if ((aMimetype == null) || aMimetype.length() == 0) {\n             aLogger.logFatalError(\"file is not a zip file, or has no mimetype.\");\n             bHasErrors = true;\n-        } else if(\n-            ! (aMimetype.equals(ODFMediaTypes.TEXT_MEDIA_TYPE)\n+        } else if (!(aMimetype.equals(ODFMediaTypes.TEXT_MEDIA_TYPE)\n             || aMimetype.equals(ODFMediaTypes.TEXT_TEMPLATE_MEDIA_TYPE)\n             || aMimetype.equals(ODFMediaTypes.GRAPHICS_MEDIA_TYPE)\n             || aMimetype.equals(ODFMediaTypes.GRAPHICS_TEMPLATE_MEDIA_TYPE)\n@@ -162,29 +156,24 @@ private boolean validateMimetype(Logger aLogger, OdfVersion aVersion)\n             || aMimetype.equals(ODFMediaTypes.FORMULA_MEDIA_TYPE)\n             || aMimetype.equals(ODFMediaTypes.FORMULA_TEMPLATE_MEDIA_TYPE)\n             || aMimetype.equals(ODFMediaTypes.TEXT_MASTER_MEDIA_TYPE)\n-            || aMimetype.equals(ODFMediaTypes.TEXT_WEB_MEDIA_TYPE) ) )\n-        {\n-                aLogger.logInfo(\"mimetype is not an ODFMediaTypes mimetype.\",false);\n-                bHasErrors = true;\n+            || aMimetype.equals(ODFMediaTypes.TEXT_WEB_MEDIA_TYPE))) {\n+            aLogger.logInfo(\"mimetype is not an ODFMediaTypes mimetype.\", false);\n+            bHasErrors = true;\n         }\n \n         return bHasErrors;\n     }\n \n-    private boolean validateManifest(Logger aLogger, OdfVersion aVersion ) throws IOException, ZipException, IllegalStateException, ODFValidatorException\n-    {\n+    private boolean validateManifest(Logger aLogger, OdfVersion aVersion) throws IOException, ZipException, IllegalStateException, ODFValidatorException {\n         boolean bRet;\n         ManifestFilter aFilter = new ManifestFilter(aLogger, m_aResult, this);\n-        Validator aManifestValidator = m_aValidatorProvider.getManifestValidator(aLogger.getOutputStream(),aVersion);\n-        if( aManifestValidator != null )\n-        {\n+        Validator aManifestValidator = m_aValidatorProvider.getManifestValidator(aLogger.getOutputStream(), aVersion);\n+        if (aManifestValidator != null) {\n             bRet = validateEntry(aFilter,\n-                         aManifestValidator, aLogger, OdfPackage.OdfFile.MANIFEST.getPath() );\n-        }\n-        else\n-        {\n-            aLogger.logInfo( \"Validation of \" + OdfPackage.OdfFile.MANIFEST.getPath() + \" skipped.\", false);\n-            bRet = parseEntry(aFilter, aLogger, OdfPackage.OdfFile.MANIFEST.getPath() , false);\n+                aManifestValidator, aLogger, OdfPackage.OdfFile.MANIFEST.getPath());\n+        } else {\n+            aLogger.logInfo(\"Validation of \" + OdfPackage.OdfFile.MANIFEST.getPath() + \" skipped.\", false);\n+            bRet = parseEntry(aFilter, aLogger, OdfPackage.OdfFile.MANIFEST.getPath(), false);\n         }\n         return bRet;\n     }",
                "deletions": 67
            },
            {
                "sha": "c0a9e9e1f6c9575a910d2b6861d2f2618af6904b",
                "filename": "validator/src/main/java/org/odftoolkit/odfvalidator/ODFValidator.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/1ebcbc849f8f6df32bf7fa25464ed40d9659c710/validator/src/main/java/org/odftoolkit/odfvalidator/ODFValidator.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/1ebcbc849f8f6df32bf7fa25464ed40d9659c710/validator/src/main/java/org/odftoolkit/odfvalidator/ODFValidator.java",
                "status": "modified",
                "changes": 25,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/validator/src/main/java/org/odftoolkit/odfvalidator/ODFValidator.java?ref=1ebcbc849f8f6df32bf7fa25464ed40d9659c710",
                "patch": "@@ -1,40 +1,38 @@\n /************************************************************************\n  *\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER\n- * \n+ *\n  * Copyright 2008, 2010 Oracle and/or its affiliates. All rights reserved.\n- * \n+ *\n  * Use is subject to license terms.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n  * use this file except in compliance with the License. You may obtain a copy\n  * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also\n  * obtain a copy of the License at http://odftoolkit.org/docs/license.txt\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * \n+ *\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  *\n  ************************************************************************/\n package org.odftoolkit.odfvalidator;\n \n-import javax.xml.XMLConstants;\n-\n-import javax.xml.validation.Schema;\n-import javax.xml.validation.SchemaFactory;\n-\n import java.io.File;\n import java.io.FileFilter;\n import java.io.IOException;\n-import java.io.PrintStream;\n import java.io.InputStream;\n+import java.io.PrintStream;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n+import javax.xml.XMLConstants;\n import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n import javax.xml.validation.Validator;\n \n public class ODFValidator implements ODFValidatorProvider {\n@@ -57,6 +55,7 @@\n \tprivate HashMap<OdfVersion, Configuration> m_aConfigurationMap = null;\n \t// Generator from last validateFile or validateStream call\n \tprivate String m_aGenerator = \"\";\n+    private static final String MISSING_ODF_VERSION = \" 'Missing ODF version'\";\n \n \t/** Creates a new instance of Validator */\n \tpublic ODFValidator(Configuration aConfig,\n@@ -88,10 +87,10 @@ public ODFValidator(Configuration aConfig,\n \n \t/** Returns either the ODF version request to validate or the ODF version of the root document as fall-back */\n \tpublic String getOdfVersion() {\n-\t\tString version = null;\n+\t\tString version = MISSING_ODF_VERSION;\n \t\tif (m_aVersion != null) {\n \t\t\tversion = m_aVersion.toString();\n-\t\t} else {\n+\t\t} else if(mOdfPackageVersion != null){\n \t\t\tversion = mOdfPackageVersion.toString();\n \t\t}\n \t\treturn version;",
                "deletions": 13
            }
        ]
    },
    {
        "repo": "odftoolkit",
        "message": "ODFTOOLKIT-379: Preventing NullPointerException in Paragraph.getTextContent(). Patch by Marc Schreiber\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/odf/trunk@1546302 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/odftoolkit/commit/3416490aaf924d1a3c6aa5fb1141408197b2d1b9",
        "parent": "https://github.com/apache/odftoolkit/commit/1d4a3027f1dc4616c628f81fd4ef1feca085c550",
        "bug_id": "odftoolkit_3",
        "file": [
            {
                "sha": "195896cbdadc0cdc9a91c50da53d343eea5beae3",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/odftoolkit/blob/3416490aaf924d1a3c6aa5fb1141408197b2d1b9/CHANGES.txt",
                "raw_url": "https://github.com/apache/odftoolkit/raw/3416490aaf924d1a3c6aa5fb1141408197b2d1b9/CHANGES.txt",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/CHANGES.txt?ref=3416490aaf924d1a3c6aa5fb1141408197b2d1b9",
                "patch": "@@ -40,6 +40,7 @@ Bug Fixes\n * ODFTOOLKIT-355 NullPointerException when removing rows from a new Spreadsheet table (Florian Hopf)\r\n * ODFTOOLKIT-362 TextSelection.replaceWith() ends in an infinite loop (Florian Hopf)\r\n * ODFTOOLKIT-363 Table#appendRow() method creates a row without any cell (Florian Hopf)\r\n+* ODFTOOLKIT-379 NullPointerException in Paragraph.getTextContent() (Florian Hopf, Patch by Marc Schreiber)\r\n \r\n Other\r\n -----\r",
                "deletions": 0
            },
            {
                "sha": "f75ab60fa57521ee3ae1b645d056b35453af6c2f",
                "filename": "simple/src/main/java/org/odftoolkit/simple/text/Paragraph.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/3416490aaf924d1a3c6aa5fb1141408197b2d1b9/simple/src/main/java/org/odftoolkit/simple/text/Paragraph.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/3416490aaf924d1a3c6aa5fb1141408197b2d1b9/simple/src/main/java/org/odftoolkit/simple/text/Paragraph.java",
                "status": "modified",
                "changes": 11,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/simple/src/main/java/org/odftoolkit/simple/text/Paragraph.java?ref=3416490aaf924d1a3c6aa5fb1141408197b2d1b9",
                "patch": "@@ -226,7 +226,7 @@ public String getTextContent() {\n \t}\n \n \tstatic String getTextContent(OdfElement ownerEle) {\n-\t\tStringBuffer buffer = new StringBuffer();\n+\t\tStringBuilder buffer = new StringBuilder();\n \t\tNodeList nodeList = ownerEle.getChildNodes();\n \t\tint i;\n \t\tfor (i = 0; i < nodeList.getLength(); i++) {\n@@ -235,9 +235,12 @@ static String getTextContent(OdfElement ownerEle) {\n \t\t\tif (node.getNodeType() == Node.TEXT_NODE)\n \t\t\t\tbuffer.append(node.getNodeValue());\n \t\t\telse if (node.getNodeType() == Node.ELEMENT_NODE) {\n-\t\t\t\tif (node.getNodeName().equals(\"text:s\")) {\n-\t\t\t\t\tint count = ((TextSElement) node).getTextCAttribute();\n-\t\t\t\t\tfor (int j = 0; j < count; j++)\n+\t\t\t\tif (node instanceof TextSpanElement) {\n+\t\t\t\t\tbuffer.append(((TextSpanElement) node).getTextContent());\n+\t\t\t\t}\n+\t\t\t\telse if (node.getNodeName().equals(\"text:s\")) {\n+\t\t\t\t\tInteger count = ((TextSElement) node).getTextCAttribute();\n+\t\t\t\t\tfor (int j = 0; j < (count != null ? count : 0); j++)\n \t\t\t\t\t\tbuffer.append(' ');\n \t\t\t\t} else if (node.getNodeName().equals(\"text:tab\"))\n \t\t\t\t\tbuffer.append('\\t');",
                "deletions": 4
            },
            {
                "sha": "e59c3cc6a0e067364c710bef1f0fee5571337311",
                "filename": "simple/src/test/java/org/odftoolkit/simple/text/ParagraphTest.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/3416490aaf924d1a3c6aa5fb1141408197b2d1b9/simple/src/test/java/org/odftoolkit/simple/text/ParagraphTest.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/3416490aaf924d1a3c6aa5fb1141408197b2d1b9/simple/src/test/java/org/odftoolkit/simple/text/ParagraphTest.java",
                "status": "modified",
                "changes": 21,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/simple/src/test/java/org/odftoolkit/simple/text/ParagraphTest.java?ref=3416490aaf924d1a3c6aa5fb1141408197b2d1b9",
                "patch": "@@ -19,6 +19,7 @@ Licensed to the Apache Software Foundation (ASF) under one\n \n package org.odftoolkit.simple.text;\n \n+import java.io.FileNotFoundException;\n import java.net.URI;\n import java.util.Iterator;\n import java.util.logging.Level;\n@@ -310,4 +311,24 @@ public void testHyperlink() {\n \t\t\tAssert.fail();\n \t\t}\n \t}\n+        \n+\t@Test\n+\tpublic void testGetTextContentWithLibreOfficeFile() throws FileNotFoundException, Exception {\n+\t\tTextDocument document = TextDocument.loadDocument(ResourceUtilities.getAbsolutePath(\"Bell.odt\"));\n+\t\tParagraph paragraph = document.getParagraphByIndex(0, true);\n+\n+\t\tAssert.assertEquals(\n+\t\t\t\"Bell, based in Los Angeles, makes and distributes electronic articles, \"\n+\t\t\t+ \"computer and building products.\", \n+\t\t\tparagraph.getTextContent());\n+\t}\n+        \n+\t@Test\n+\tpublic void shouldReturnMultipleLines() throws Exception {\n+\t\tfinal String expected = \"Hello\\tWorld!\\twho \\t ever read this, is stupid.\\n\\n\\nReally!\";\n+\t\tTextDocument document = TextDocument.newTextDocument();\n+\t\tParagraph p = document.addParagraph(expected);\n+\t\tString textContent = p.getTextContent();\n+\t\tAssert.assertEquals(expected, textContent.replace(\"\\r\", \"\"));\n+\t}\n }",
                "deletions": 0
            },
            {
                "sha": "d97561cd1609aaa6b95bf8d41bd8cc06a61dc537",
                "filename": "simple/src/test/resources/Bell.odt",
                "blob_url": "https://github.com/apache/odftoolkit/blob/3416490aaf924d1a3c6aa5fb1141408197b2d1b9/simple/src/test/resources/Bell.odt",
                "raw_url": "https://github.com/apache/odftoolkit/raw/3416490aaf924d1a3c6aa5fb1141408197b2d1b9/simple/src/test/resources/Bell.odt",
                "status": "added",
                "changes": 0,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/simple/src/test/resources/Bell.odt?ref=3416490aaf924d1a3c6aa5fb1141408197b2d1b9",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "odftoolkit",
        "message": "changeset:   82:e7a4238c0888\nuser:        Developer:Devin;Reviewer:Daisy\ndate:        Mon Jun 20 14:36:05 2011 +0800\n#bug342# TextProperties.getTextProperties throws NullPointerException.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/odf/trunk@1168173 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/odftoolkit/commit/19ab3c6e7f04e8e4dddea390f3cb4fd2075b9ab4",
        "parent": "https://github.com/apache/odftoolkit/commit/cbcf5bd1e0445579019f84ab03b3b02be1ca49a8",
        "bug_id": "odftoolkit_4",
        "file": [
            {
                "sha": "dbf63ce1bc896e02996eb43e4ddfd9becb4fa0d1",
                "filename": "simple/src/main/java/org/odftoolkit/simple/table/CellStyleHandler.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/19ab3c6e7f04e8e4dddea390f3cb4fd2075b9ab4/simple/src/main/java/org/odftoolkit/simple/table/CellStyleHandler.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/19ab3c6e7f04e8e4dddea390f3cb4fd2075b9ab4/simple/src/main/java/org/odftoolkit/simple/table/CellStyleHandler.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/simple/src/main/java/org/odftoolkit/simple/table/CellStyleHandler.java?ref=19ab3c6e7f04e8e4dddea390f3cb4fd2075b9ab4",
                "patch": "@@ -267,9 +267,11 @@ public Font getFont(ScriptType type) {\n \t\t\tif (defaultStyle == null) {\n \t\t\t\tdefaultStyle = getParagraphDefaultStyle();\n \t\t\t}\n-\t\t\tTextProperties defaultStyleSetting = TextProperties.getTextProperties(defaultStyle);\n-\t\t\tFont tempFont = defaultStyleSetting.getFont(type);\n-\t\t\tmergeFont(font, tempFont);\n+\t\t\tif (defaultStyle != null) {\n+\t\t\t\tTextProperties defaultStyleSetting = TextProperties.getTextProperties(defaultStyle);\n+\t\t\t\tFont tempFont = defaultStyleSetting.getFont(type);\n+\t\t\t\tmergeFont(font, tempFont);\n+\t\t\t}\n \t\t}\n \n \t\tif (font.getColor() == null)",
                "deletions": 3
            },
            {
                "sha": "b90719ff803be6a44c7ae6f5385f8d678d263799",
                "filename": "simple/src/test/java/org/odftoolkit/simple/table/CellStyleHandlerTest.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/19ab3c6e7f04e8e4dddea390f3cb4fd2075b9ab4/simple/src/test/java/org/odftoolkit/simple/table/CellStyleHandlerTest.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/19ab3c6e7f04e8e4dddea390f3cb4fd2075b9ab4/simple/src/test/java/org/odftoolkit/simple/table/CellStyleHandlerTest.java",
                "status": "added",
                "changes": 51,
                "additions": 51,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/simple/src/test/java/org/odftoolkit/simple/table/CellStyleHandlerTest.java?ref=19ab3c6e7f04e8e4dddea390f3cb4fd2075b9ab4",
                "patch": "@@ -0,0 +1,51 @@\n+/************************************************************************\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER\n+ *\n+ * Copyright 2011 IBM. All rights reserved.\n+ *\n+ * Use is subject to license terms.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy\n+ * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also\n+ * obtain a copy of the License at http://odftoolkit.org/docs/license.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ ************************************************************************/\n+package org.odftoolkit.simple.table;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import junit.framework.Assert;\n+\n+import org.junit.Test;\n+import org.odftoolkit.simple.Document;\n+import org.odftoolkit.simple.utils.ResourceUtilities;\n+\n+public class CellStyleHandlerTest {\n+\t\n+\tprivate static final String TEST_FILE_NAME = \"CellStyleHandlerTest.odp\";\n+\n+\t@Test\n+\tpublic void testGetFont() {\n+\t\ttry {\n+\t\t\tDocument doc = Document.loadDocument(ResourceUtilities.getTestResourceAsStream(TEST_FILE_NAME));\n+\t\t\tTable table = doc.getTableByName(\"slideTable\");\n+\t\t\tCellStyleHandler styleHandler = table.getCellByPosition(1, 1).getStyleHandler();\n+\t\t\t// NullPointerException should not be thrown even if no default text\n+\t\t\t// properties style exists.\n+\t\t\tstyleHandler.getFont(Document.ScriptType.WESTERN);\n+\t\t} catch (Exception e) {\n+\t\t\tLogger.getLogger(CellStyleHandlerTest.class.getName()).log(Level.SEVERE, null, e);\n+\t\t\tAssert.fail(e.getMessage());\n+\t\t}\n+\t}\n+}",
                "deletions": 0
            },
            {
                "sha": "5d4f0bd563adca12e0f6d6ca529f1671fae70e85",
                "filename": "simple/src/test/resources/CellStyleHandlerTest.odp",
                "blob_url": "https://github.com/apache/odftoolkit/blob/19ab3c6e7f04e8e4dddea390f3cb4fd2075b9ab4/simple/src/test/resources/CellStyleHandlerTest.odp",
                "raw_url": "https://github.com/apache/odftoolkit/raw/19ab3c6e7f04e8e4dddea390f3cb4fd2075b9ab4/simple/src/test/resources/CellStyleHandlerTest.odp",
                "status": "added",
                "changes": 0,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/simple/src/test/resources/CellStyleHandlerTest.odp?ref=19ab3c6e7f04e8e4dddea390f3cb4fd2075b9ab4",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "odftoolkit",
        "message": "changeset:   52:627aa2ebd604\nuser:        Developer:Devin;Reviewer:Michel\ndate:        Tue Mar 29 17:15:05 2011 +0800\n#bug307# Table.getColumnByIndex() throws NullPointerException.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/odf/trunk@1168146 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/odftoolkit/commit/ce518462f606041690e7a6e0625f04b2adc191c4",
        "parent": "https://github.com/apache/odftoolkit/commit/121804f317abc86f804184e6fc0b0b3a716b4203",
        "bug_id": "odftoolkit_5",
        "file": [
            {
                "sha": "4ed1c16899cf881a0a450ea53f45c2c17c105fbe",
                "filename": "simple/src/main/java/org/odftoolkit/simple/table/Column.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/ce518462f606041690e7a6e0625f04b2adc191c4/simple/src/main/java/org/odftoolkit/simple/table/Column.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/ce518462f606041690e7a6e0625f04b2adc191c4/simple/src/main/java/org/odftoolkit/simple/table/Column.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/simple/src/main/java/org/odftoolkit/simple/table/Column.java?ref=ce518462f606041690e7a6e0625f04b2adc191c4",
                "patch": "@@ -225,6 +225,8 @@ void splitRepeatedColumns() {\n \n \t\t\tif (ownerColumnElement != null) {\n \t\t\t\ttable.updateColumnRepository(maColumnElement, mnRepeatedIndex, ownerColumnElement, 0);\n+\t\t\t\t// update column element.\n+\t\t\t\tmaColumnElement = ownerColumnElement;\n \t\t\t}\n \t\t}\n \t}",
                "deletions": 0
            },
            {
                "sha": "4ebb2c13e62f9faacd5a5d77d1a02e48d1b01cf7",
                "filename": "simple/src/test/java/org/odftoolkit/simple/text/HeaderTest.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/ce518462f606041690e7a6e0625f04b2adc191c4/simple/src/test/java/org/odftoolkit/simple/text/HeaderTest.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/ce518462f606041690e7a6e0625f04b2adc191c4/simple/src/test/java/org/odftoolkit/simple/text/HeaderTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/simple/src/test/java/org/odftoolkit/simple/text/HeaderTest.java?ref=ce518462f606041690e7a6e0625f04b2adc191c4",
                "patch": "@@ -68,6 +68,8 @@ public void testAddTable() {\n \t\t\tAssert.assertEquals(expectedCellValue, table.getCellByPosition(1, 1).getStringValue());\n \t\t\tcell = table.getCellByPosition(4, 0);\n \t\t\tAssert.assertEquals(34, cell.getImage().getHeight(null));\n+\t\t\ttable.getColumnByIndex(4).setWidth(15);\n+\t\t\t\n \t\t\theader = doc.getHeader(true);\n \t\t\ttable = header.getTableByName(\"headerHTable\");\n \t\t\tAssert.assertNotNull(table);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "odftoolkit",
        "message": "changeset:   31:ccb5daaa3ecf\nuser:        Developer:Devin;Reviewer:Daisy\ndate:        Wed Feb 23 11:35:30 2011 +0800\n#bug284# Cell.getFont() throws NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/odf/trunk@1168127 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/odftoolkit/commit/1d7527a8f94459153f91d9ef8d5fd4e0d9965b3c",
        "parent": "https://github.com/apache/odftoolkit/commit/ec26511be9a560f622de42afb277fae60e8aae6f",
        "bug_id": "odftoolkit_6",
        "file": [
            {
                "sha": "91ce910dae2331e4ca803c52f762d30e0f0b974d",
                "filename": "simple/src/main/java/org/odftoolkit/simple/table/CellStyleHandler.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/1d7527a8f94459153f91d9ef8d5fd4e0d9965b3c/simple/src/main/java/org/odftoolkit/simple/table/CellStyleHandler.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/1d7527a8f94459153f91d9ef8d5fd4e0d9965b3c/simple/src/main/java/org/odftoolkit/simple/table/CellStyleHandler.java",
                "status": "modified",
                "changes": 11,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/simple/src/main/java/org/odftoolkit/simple/table/CellStyleHandler.java?ref=1d7527a8f94459153f91d9ef8d5fd4e0d9965b3c",
                "patch": "@@ -414,6 +414,10 @@ private OdfDefaultStyle getCellDefaultStyle() {\n \t\treturn mDocument.getDocumentStyles().getDefaultStyle(OdfStyleFamily.TableCell);\n \t}\n \n+\tprivate OdfDefaultStyle getParagraphDefaultStyle() {\n+\t\treturn mDocument.getDocumentStyles().getDefaultStyle(OdfStyleFamily.Paragraph);\n+\t}\n+\n \tprivate OdfStyleBase getParentStyle(OdfStyle aStyle) {\n \t\tString parentName = aStyle.getStyleParentStyleNameAttribute();\n \t\tif (parentName == null || parentName.length() == 0)\n@@ -521,7 +525,7 @@ public Font getFont(ScriptType type) {\n \t\tif (textProperties != null)\n \t\t\tfont = textProperties.getFont(type);\n \t\telse\n-\t\t\tfont = new Font(null, null, 0, (StyleTypeDefinitions.TextLinePosition)null);\n+\t\t\tfont = new Font(null, null, 0, (StyleTypeDefinitions.TextLinePosition) null);\n \n \t\tif (font != null && font.getFamilyName() != null && font.getColor() != null && font.getSize() != 0\n \t\t\t\t&& font.getFontStyle() != null && font.getTextLinePosition() != null)\n@@ -547,6 +551,11 @@ public Font getFont(ScriptType type) {\n \t\t}\n \t\tif (!isDefault) {\n \t\t\tOdfDefaultStyle defaultStyle = getCellDefaultStyle();\n+\t\t\t// For text document, there is no default table cell style.\n+\t\t\t// So use default font style in default paragraph style.\n+\t\t\tif (defaultStyle == null) {\n+\t\t\t\tdefaultStyle = getParagraphDefaultStyle();\n+\t\t\t}\n \t\t\tTextProperties defaultStyleSetting = TextProperties.getTextProperties(defaultStyle);\n \t\t\tFont tempFont = defaultStyleSetting.getFont(type);\n \t\t\tmergeFont(font, tempFont);",
                "deletions": 1
            },
            {
                "sha": "d8654308956e62fd0012d5cbc59699f87b71c048",
                "filename": "simple/src/test/java/org/odftoolkit/simple/style/FontTest.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/1d7527a8f94459153f91d9ef8d5fd4e0d9965b3c/simple/src/test/java/org/odftoolkit/simple/style/FontTest.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/1d7527a8f94459153f91d9ef8d5fd4e0d9965b3c/simple/src/test/java/org/odftoolkit/simple/style/FontTest.java",
                "status": "modified",
                "changes": 12,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/simple/src/test/java/org/odftoolkit/simple/style/FontTest.java?ref=1d7527a8f94459153f91d9ef8d5fd4e0d9965b3c",
                "patch": "@@ -29,6 +29,7 @@\n import org.odftoolkit.odfdom.type.Color;\n import org.odftoolkit.simple.Document;\n import org.odftoolkit.simple.SpreadsheetDocument;\n+import org.odftoolkit.simple.TextDocument;\n import org.odftoolkit.simple.style.StyleTypeDefinitions.FontStyle;\n import org.odftoolkit.simple.style.StyleTypeDefinitions.TextLinePosition;\n import org.odftoolkit.simple.table.Cell;\n@@ -43,7 +44,8 @@\n \t@Test\n \tpublic void testGetSetFont() {\n \t\tFont font1Base = new Font(\"Arial\", FontStyle.ITALIC, 10, Color.BLACK, TextLinePosition.THROUGH);\n-\t\tFont font2Base = new Font(\"'Times New Roman'\", FontStyle.REGULAR, (float) 13.95, new Color(\"#ff3333\"), TextLinePosition.THROUGHUNDER);\n+\t\tFont font2Base = new Font(\"'Times New Roman'\", FontStyle.REGULAR, (float) 13.95, new Color(\"#ff3333\"),\n+\t\t\t\tTextLinePosition.THROUGHUNDER);\n \t\tFont font3Base = new Font(\"SimSun\", FontStyle.BOLD, 8, Color.BLACK, TextLinePosition.REGULAR);\n \t\tFont font4Base = new Font(\"Arial\", FontStyle.REGULAR, 10, Color.BLACK, TextLinePosition.UNDER);\n \t\ttry {\n@@ -96,6 +98,14 @@ public void testGetSetFont() {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testGetSetFontInODT() throws Exception {\n+\t\tTextDocument doc = TextDocument.newTextDocument();\n+\t\tTable table = Table.newTable(doc);\n+\t\tFont font = table.getCellByPosition(0, 0).getFont();\n+\t\tAssert.assertNotNull(font);\n+\t}\n+\n \t// public StyleTypeDefinitions.SimpleFontStyle getFontStyle(\n \t// Document.ScriptType type);\n \t//",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "odftoolkit",
        "message": "ODFTOOLKIT-398: Prevent NPE in getCellBackgroundColor. Patch by David Reepmeyer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/odf/trunk@1684559 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/odftoolkit/commit/8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1",
        "parent": "https://github.com/apache/odftoolkit/commit/0610e68c062d9cddabe2e518d0ee0960cd50dcdf",
        "bug_id": "odftoolkit_7",
        "file": [
            {
                "sha": "0452f730b3b77c7e646391fc9beac00641cf3651",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/odftoolkit/blob/8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1/CHANGES.txt",
                "raw_url": "https://github.com/apache/odftoolkit/raw/8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1/CHANGES.txt",
                "status": "modified",
                "changes": 36,
                "additions": 36,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/CHANGES.txt?ref=8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1",
                "patch": "@@ -1,6 +1,42 @@\n Apache ODF Toolkit Change Log\r\n =============================\r\n \r\n+======= Release 0.6.2 =======\r\n+\r\n+The most notable changes in ODF Toolkit 0.6.2 incubating over previous release:\r\n+\r\n+Release wiki page: https://cwiki.apache.org/confluence/display/ODFTOOLKIT/0.6.2-incubating\r\n+\r\n+Versions of major components\r\n+----------------------------\r\n+\r\n+* Xerces 2.9.1 (http://xerces.apache.org/mirrors.cgi)\r\n+* Apache Jena 2.9.4 (http://jena.apache.org/download/index.html)\r\n+* Apache Commons Validator 1.4.0 (http://commons.apache.org/proper/commons-validator//download_validator.cgi)\r\n+\r\n+For a full dependecy list run mvn dependency:tree from the top level in the source module or see the release wiki page.\r\n+\r\n+Upgrading from 0.6.1-incubating\r\n+-----------------------------\r\n+\r\n+\r\n+Detailed Change List\r\n+--------------------\r\n+\r\n+New Features\r\n+------------\r\n+\r\n+Optimizations\r\n+-------------\r\n+\r\n+Bug Fixes\r\n+---------\r\n+\r\n+* ODFTOOLKIT-398 prevent NullPointerException in getCellBackgroundColor() (Florian Hopf, Patch by David Reepmeyer)\r\n+\r\n+Other\r\n+-----\r\n+\r\n ======= Release 0.6.1 =======\r\n \r\n The most notable changes in ODF Toolkit 0.6.1 incubating over previous release:\r",
                "deletions": 0
            },
            {
                "sha": "5f297f7558eab09b410826ac46cbc0bb2dcb00c4",
                "filename": "simple/src/main/java/org/odftoolkit/simple/table/CellStyleHandler.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1/simple/src/main/java/org/odftoolkit/simple/table/CellStyleHandler.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1/simple/src/main/java/org/odftoolkit/simple/table/CellStyleHandler.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/simple/src/main/java/org/odftoolkit/simple/table/CellStyleHandler.java?ref=8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1",
                "patch": "@@ -425,7 +425,9 @@ public Color getBackgroundColor() {\n \t\tif (!isDefault) {\n \t\t\tOdfDefaultStyle defaultStyle = getCellDefaultStyle();\n \t\t\tTableCellProperties defaultStyleSetting = TableCellProperties.getTableCellProperties(defaultStyle);\n-\t\t\ttempColor = defaultStyleSetting.getBackgroundColor();\n+\t\t\tif (defaultStyleSetting != null) {\n+\t\t\t\ttempColor = defaultStyleSetting.getBackgroundColor();\n+\t\t\t}\n \t\t}\n \t\t// use default\n \t\tif (tempColor == null)",
                "deletions": 1
            },
            {
                "sha": "af7563ebb3cb2ad032a03fdf276f9145a0f95a77",
                "filename": "simple/src/test/java/org/odftoolkit/simple/SpreadsheetWithoutTableCellPropertiesTest.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1/simple/src/test/java/org/odftoolkit/simple/SpreadsheetWithoutTableCellPropertiesTest.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1/simple/src/test/java/org/odftoolkit/simple/SpreadsheetWithoutTableCellPropertiesTest.java",
                "status": "added",
                "changes": 46,
                "additions": 46,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/simple/src/test/java/org/odftoolkit/simple/SpreadsheetWithoutTableCellPropertiesTest.java?ref=8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1",
                "patch": "@@ -0,0 +1,46 @@\n+/* \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+*/\n+\n+package org.odftoolkit.simple;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import junit.framework.Assert;\n+\n+import org.junit.Test;\n+import org.odftoolkit.simple.table.Table;\n+import org.odftoolkit.simple.utils.ResourceUtilities;\n+import org.odftoolkit.simple.table.Cell;\n+import org.odftoolkit.odfdom.type.Color;\n+\n+public class SpreadsheetWithoutTableCellPropertiesTest {\n+\t\n+\tprivate final static String TEST_FILE_NAME = \"TestCellWithoutTableCellProperties.ods\";\n+\n+\t@Test\n+\tpublic void testGetCellBackgroundColorOfEmptySpace() throws Exception {\n+\t\tSpreadsheetDocument document = SpreadsheetDocument.loadDocument(ResourceUtilities\n+\t\t\t.getTestResourceAsStream(TEST_FILE_NAME));\n+\t\tTable table = document.getSheetByIndex(0);\n+\t\tCell cell = table.getCellByPosition(0, 0);\n+\t\tColor color = cell.getCellBackgroundColor();\n+\t\tAssert.assertEquals(color, org.odftoolkit.odfdom.type.Color.WHITE);\n+\t}\n+}",
                "deletions": 0
            },
            {
                "sha": "46eb6a38dc928f26b9435367ce85cd1dc1df1b3d",
                "filename": "simple/src/test/resources/TestCellWithoutTableCellProperties.ods",
                "blob_url": "https://github.com/apache/odftoolkit/blob/8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1/simple/src/test/resources/TestCellWithoutTableCellProperties.ods",
                "raw_url": "https://github.com/apache/odftoolkit/raw/8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1/simple/src/test/resources/TestCellWithoutTableCellProperties.ods",
                "status": "added",
                "changes": 0,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/simple/src/test/resources/TestCellWithoutTableCellProperties.ods?ref=8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "odftoolkit",
        "message": "test and fix for ODFTOOLKIT-325 NPE in cell.getTimeValue()\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/odf/trunk@1417744 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/odftoolkit/commit/5f4f9d64008176732cd675783c46f5244a5fc6ac",
        "parent": "https://github.com/apache/odftoolkit/commit/e84fa6f3cc430010f0322613940f684298a77d6a",
        "bug_id": "odftoolkit_8",
        "file": [
            {
                "sha": "8a4540436acc5c01048bdb12d8287a5171aa0b37",
                "filename": "odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTableCell.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/5f4f9d64008176732cd675783c46f5244a5fc6ac/odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTableCell.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/5f4f9d64008176732cd675783c46f5244a5fc6ac/odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTableCell.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTableCell.java?ref=5f4f9d64008176732cd675783c46f5244a5fc6ac",
                "patch": "@@ -883,6 +883,9 @@ public String getStringValue() {\n \tpublic Calendar getTimeValue() {\n \t\tif (getTypeAttr() == OfficeValueTypeAttribute.Value.TIME) {\n \t\t\tString timeStr = mCellElement.getOfficeTimeValueAttribute();\n+                        if (timeStr == null) {\n+                            return null;\n+                        }\n \t\t\tDate date = parseString(timeStr, DEFAULT_TIME_FORMAT);\n \t\t\tCalendar calender = Calendar.getInstance();\n \t\t\tcalender.setTime(date);",
                "deletions": 0
            },
            {
                "sha": "d791ee4c508891505a386b7395854207fe0a684c",
                "filename": "odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableCellTest.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/5f4f9d64008176732cd675783c46f5244a5fc6ac/odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableCellTest.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/5f4f9d64008176732cd675783c46f5244a5fc6ac/odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableCellTest.java",
                "status": "modified",
                "changes": 22,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableCellTest.java?ref=5f4f9d64008176732cd675783c46f5244a5fc6ac",
                "patch": "@@ -32,12 +32,12 @@\n import junit.framework.Assert;\n \n import org.junit.Before;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.odftoolkit.odfdom.doc.OdfSpreadsheetDocument;\n import org.odftoolkit.odfdom.doc.OdfTextDocument;\n import org.odftoolkit.odfdom.dom.OdfContentDom;\n import org.odftoolkit.odfdom.dom.OdfStylesDom;\n+import org.odftoolkit.odfdom.dom.attribute.office.OfficeValueTypeAttribute;\n import org.odftoolkit.odfdom.dom.element.draw.DrawFrameElement;\n import org.odftoolkit.odfdom.dom.element.draw.DrawImageElement;\n import org.odftoolkit.odfdom.dom.element.style.StyleParagraphPropertiesElement;\n@@ -50,7 +50,6 @@\n import org.odftoolkit.odfdom.type.Color;\n import org.odftoolkit.odfdom.utils.ResourceUtilities;\n \n-@Ignore\n public class TableCellTest {\n \n \tfinal static String SAMPLE_SPREADSHEET = \"TestSpreadsheetTable\";\n@@ -1051,4 +1050,23 @@ public void testSetDefaultCellStyle() {\n \t\t\tAssert.fail();\n \t\t}\n \t}\n+        \n+        @Test\n+        public void testGetFromEmptyDateValue() throws Exception {\n+            OdfSpreadsheetDocument doc = OdfSpreadsheetDocument.newSpreadsheetDocument();\n+            OdfTable table = OdfTable.newTable(doc);\n+            OdfTableCell dateCell = table.appendRow().getCellByIndex(0);\n+            dateCell.setValueType(OfficeValueTypeAttribute.Value.DATE.toString());\n+            Assert.assertNull(dateCell.getDateValue());\n+        }\n+        \n+        @Test\n+        public void testGetFromEmptyTimeValue() throws Exception {\n+            OdfSpreadsheetDocument doc = OdfSpreadsheetDocument.newSpreadsheetDocument();\n+            OdfTable table = OdfTable.newTable(doc);\n+            OdfTableCell timeCell = table.appendRow().getCellByIndex(0);\n+            timeCell.setValueType(OfficeValueTypeAttribute.Value.TIME.toString());\n+            Assert.assertNull(timeCell.getTimeValue());\n+        }\n+        \n }",
                "deletions": 2
            },
            {
                "sha": "03ca6df1137448a059dd423437d158d49a594c64",
                "filename": "simple/src/main/java/org/odftoolkit/simple/table/Cell.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/5f4f9d64008176732cd675783c46f5244a5fc6ac/simple/src/main/java/org/odftoolkit/simple/table/Cell.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/5f4f9d64008176732cd675783c46f5244a5fc6ac/simple/src/main/java/org/odftoolkit/simple/table/Cell.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/simple/src/main/java/org/odftoolkit/simple/table/Cell.java?ref=5f4f9d64008176732cd675783c46f5244a5fc6ac",
                "patch": "@@ -1201,6 +1201,9 @@ public String getStringValue() {\n \tpublic Calendar getTimeValue() {\n \t\tif (getTypeAttr() == OfficeValueTypeAttribute.Value.TIME) {\n \t\t\tString timeStr = mCellElement.getOfficeTimeValueAttribute();\n+                        if (timeStr == null) {\n+                            return null;\n+                        }\n \t\t\tDate date = parseString(timeStr, DEFAULT_TIME_FORMAT);\n \t\t\tCalendar calender = Calendar.getInstance();\n \t\t\tcalender.setTime(date);",
                "deletions": 0
            },
            {
                "sha": "9de43daa5a8a49a1335432135a017af3147760b4",
                "filename": "simple/src/test/java/org/odftoolkit/simple/table/TableCellTest.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/5f4f9d64008176732cd675783c46f5244a5fc6ac/simple/src/test/java/org/odftoolkit/simple/table/TableCellTest.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/5f4f9d64008176732cd675783c46f5244a5fc6ac/simple/src/test/java/org/odftoolkit/simple/table/TableCellTest.java",
                "status": "modified",
                "changes": 17,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/simple/src/test/java/org/odftoolkit/simple/table/TableCellTest.java?ref=5f4f9d64008176732cd675783c46f5244a5fc6ac",
                "patch": "@@ -35,6 +35,7 @@ Licensed to the Apache Software Foundation (ASF) under one\n import org.junit.Before;\n import org.junit.Test;\n import org.odftoolkit.odfdom.dom.OdfContentDom;\n+import org.odftoolkit.odfdom.dom.attribute.office.OfficeValueTypeAttribute;\n import org.odftoolkit.odfdom.dom.element.draw.DrawFrameElement;\n import org.odftoolkit.odfdom.dom.element.style.StyleParagraphPropertiesElement;\n import org.odftoolkit.odfdom.dom.style.OdfStyleFamily;\n@@ -581,6 +582,22 @@ public void testGetSetDateValue() {\n \t\tAssert.assertEquals(0, fcell.getDateValue().compareTo(expectedCalendar));\n \t}\n \n+        @Test\n+        public void testGetFromEmptyDateValue() throws Exception {\n+            Table table = odsdoc.getTableByName(\"Sheet1\");\n+            Cell cell = table.appendRow().getCellByIndex(1);\n+            cell.setValueType(OfficeValueTypeAttribute.Value.DATE.toString());\n+            Assert.assertNull(cell.getDateValue());\n+        }\n+        \n+        @Test\n+        public void testGetFromEmptyTimeValue() throws Exception {\n+            Table table = odsdoc.getTableByName(\"Sheet1\");\n+            Cell cell = table.appendRow().getCellByIndex(1);\n+            cell.setValueType(OfficeValueTypeAttribute.Value.TIME.toString());\n+            Assert.assertNull(cell.getTimeValue());\n+        }\n+\n \t@Test\n \tpublic void testGetSetStringValue() {\n \t\tint rowindex = 6, columnindex = 0;",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "odftoolkit",
        "message": "changeset:   66:fac64c2d4a3b\nuser:        Developer:Devin;Reviewer:weihuaWang&svanteschubert\ndate:        Mon Jun 21 11:52:57 2010 +0200\n#Bug193# Calling OdfTableCell.getCurrencyValue() throws NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/odf/trunk@1168036 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/odftoolkit/commit/bfb9ea9975621417da23ac88e969b0350e80dcc2",
        "parent": "https://github.com/apache/odftoolkit/commit/67e8aee51988563f4dfdd8ecee484e855824307d",
        "bug_id": "odftoolkit_9",
        "file": [
            {
                "sha": "3ca35f76f47762c89bbce4fc46d2fe1bf0455de1",
                "filename": "odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTableCell.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/bfb9ea9975621417da23ac88e969b0350e80dcc2/odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTableCell.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/bfb9ea9975621417da23ac88e969b0350e80dcc2/odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTableCell.java",
                "status": "modified",
                "changes": 3255,
                "additions": 1630,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTableCell.java?ref=bfb9ea9975621417da23ac88e969b0350e80dcc2",
                "deletions": 1625
            },
            {
                "sha": "a453f8aa2a2a16247bf97687506c2b56fd7fe681",
                "filename": "odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableCellTest.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/bfb9ea9975621417da23ac88e969b0350e80dcc2/odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableCellTest.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/bfb9ea9975621417da23ac88e969b0350e80dcc2/odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableCellTest.java",
                "status": "modified",
                "changes": 1506,
                "additions": 756,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableCellTest.java?ref=bfb9ea9975621417da23ac88e969b0350e80dcc2",
                "patch": "@@ -1,750 +1,756 @@\n-/************************************************************************\r\n- *\r\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER\r\n- * \r\n- * Copyright 2009 IBM. All rights reserved.\r\n- * \r\n- * Use is subject to license terms.\r\n- * \r\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\r\n- * use this file except in compliance with the License. You may obtain a copy\r\n- * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also\r\n- * obtain a copy of the License at http://odftoolkit.org/docs/license.txt\r\n- * \r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\r\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * \r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- *\r\n- ************************************************************************/\r\n-package org.odftoolkit.odfdom.doc.table;\r\n-\r\n-import java.text.DecimalFormatSymbols;\r\n-import java.text.SimpleDateFormat;\r\n-import java.util.Calendar;\r\n-import java.util.GregorianCalendar;\r\n-\r\n-import junit.framework.Assert;\r\n-\r\n-import org.junit.Before;\r\n-import org.junit.Test;\r\n-import org.odftoolkit.odfdom.doc.OdfSpreadsheetDocument;\r\n-import org.odftoolkit.odfdom.doc.OdfTextDocument;\r\n-import org.odftoolkit.odfdom.dom.element.draw.DrawFrameElement;\r\n-import org.odftoolkit.odfdom.dom.element.draw.DrawImageElement;\r\n-import org.odftoolkit.odfdom.type.Color;\r\n-import org.odftoolkit.odfdom.utils.ResourceUtilities;\r\n-\r\n-public class TableCellTest {\r\n-\r\n-\tfinal static String SAMPLE_SPREADSHEET = \"TestSpreadsheetTable\";\r\n-\tfinal static String SAMPLE_TEXT = \"TestTextTable\";\r\n-\tOdfSpreadsheetDocument odsdoc;\r\n-\tOdfTextDocument odtdoc;\r\n-\tOdfTable odsTable, odtTable;\r\n-\r\n-\t@Before\r\n-\tpublic void setUp() {\r\n-\t\ttry {\r\n-\t\t\todsdoc = (OdfSpreadsheetDocument) OdfSpreadsheetDocument\r\n-\t\t\t\t\t.loadDocument(ResourceUtilities\r\n-\t\t\t\t\t\t\t.getTestResourceAsStream(SAMPLE_SPREADSHEET\r\n-\t\t\t\t\t\t\t\t\t+ \".ods\"));\r\n-\t\t\todtdoc = (OdfTextDocument) OdfTextDocument\r\n-\t\t\t\t\t.loadDocument(ResourceUtilities\r\n-\t\t\t\t\t\t\t.getTestResourceAsStream(SAMPLE_TEXT + \".odt\"));\r\n-\r\n-\t\t} catch (Exception e) {\r\n-\t\t\t// TODO Auto-generated catch block\r\n-\t\t\te.printStackTrace();\r\n-\t\t}\r\n-\t}\r\n-\r\n-\tprivate void saveods() {\r\n-\t\ttry {\r\n-\t\t\todsdoc.save(ResourceUtilities.newTestOutputFile(SAMPLE_SPREADSHEET\r\n-\t\t\t\t\t+ \"Output.ods\"));\r\n-\r\n-\t\t} catch (Exception e) {\r\n-\t\t\t// TODO Auto-generated catch block\r\n-\t\t\te.printStackTrace();\r\n-\t\t}\r\n-\t}\r\n-\r\n-\tprivate void saveodt() {\r\n-\t\ttry {\r\n-\t\t\todtdoc.save(ResourceUtilities.newTestOutputFile(SAMPLE_TEXT\r\n-\t\t\t\t\t+ \"Output.odt\"));\r\n-\t\t} catch (Exception e) {\r\n-\t\t\t// TODO Auto-generated catch block\r\n-\t\t\te.printStackTrace();\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetIndexInRowColumn() {\r\n-\t\tint rowindex = 2, columnindex = 1;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell cell = table.getCellByPosition(columnindex, rowindex);\r\n-\r\n-\t\tAssert.assertEquals(rowindex, cell.getRowIndex());\r\n-\t\tAssert.assertEquals(columnindex, cell.getColumnIndex());\r\n-\r\n-\t\tOdfTable table3 = odtdoc.getTableByName(\"Table3\");\r\n-\t\tOdfTableCell cell1 = table.getCellByPosition(0, 1);\r\n-\t\tAssert.assertEquals(1, cell1.getRowIndex());\r\n-\t\tAssert.assertEquals(0, cell1.getColumnIndex());\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetSetHoriJustify() {\r\n-\t\tint rowindex = 3, columnindex = 0;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\r\n-\t\tString align = fcell.getHorizontalJustify();\r\n-\t\tAssert.assertEquals(\"center\", align);\r\n-\r\n-\t\tfcell.setHorizontalJustify(null);\r\n-\t\talign = fcell.getHorizontalJustify();\r\n-\t\t// should be DEFAULT_HORIZONTAL_ALIGN \"start\"\r\n-\t\tAssert.assertEquals(align, \"start\");\r\n-\r\n-\t\tfcell.setHorizontalJustify(\"start\");\r\n-\t\talign = fcell.getHorizontalJustify();\r\n-\t\tAssert.assertEquals(\"start\", align);\r\n-\t\tsaveods();\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetSetVertJustify() {\r\n-\t\tint rowindex = 3, columnindex = 0;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\r\n-\t\tString align = fcell.getVerticalJustify();\r\n-\t\tAssert.assertEquals(\"top\", align);\r\n-\r\n-\t\t// use default vetical align when set null\r\n-\t\tfcell.setVerticalJustify(null);\r\n-\t\talign = fcell.getVerticalJustify();\r\n-\t\tAssert.assertEquals(\"top\", align);\r\n-\r\n-\t\tfcell.setVerticalJustify(\"bottom\");\r\n-\t\talign = fcell.getVerticalJustify();\r\n-\t\tAssert.assertEquals(\"bottom\", align);\r\n-\t\tsaveods();\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetSetValueType() {\r\n-\t\tint rowindex = 3, columnindex = 0;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tboolean illegalArgumentFlag = false;\r\n-\t\ttry {\r\n-\t\t\tfcell.setValueType(null);\r\n-\t\t} catch (IllegalArgumentException ie) {\r\n-\t\t\tif (\"type shouldn't be null.\".equals(ie.getMessage())) {\r\n-\t\t\t\tillegalArgumentFlag = true;\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\tAssert.assertTrue(illegalArgumentFlag);\r\n-\r\n-\t\tfcell.setValueType(\"date\");\r\n-\t\tString valueType = fcell.getValueType();\r\n-\t\tAssert.assertEquals(\"date\", valueType);\r\n-\t\tsaveods();\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetSetWrapOption() {\r\n-\t\tint rowindex = 5, columnindex = 8;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\r\n-\t\tboolean wrap = fcell.isTextWrapped();\r\n-\t\tAssert.assertEquals(true, wrap);\r\n-\r\n-\t\tfcell.setTextWrapped(false);\r\n-\t\twrap = fcell.isTextWrapped();\r\n-\t\tAssert.assertEquals(false, wrap);\r\n-\t\tsaveods();\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetSetTextValue() {\r\n-\t\tint rowindex = 5, columnindex = 8;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\r\n-\t\tString text = fcell.getDisplayText();\r\n-\t\tAssert.assertEquals(\"this is a big cell with a big table\", text);\r\n-\r\n-\t\tfcell.setDisplayText(\"changed\");\r\n-\t\ttext = fcell.getDisplayText();\r\n-\t\tAssert.assertEquals(\"changed\", text);\r\n-\t\t// reproduce bug 150.\r\n-\t\tfcell.setDisplayText(null);\r\n-\t\ttext = fcell.getDisplayText();\r\n-\t\tAssert.assertEquals(\"\", text);\r\n-\t\tfcell.setDisplayText(null, \"automatic7777\");\r\n-\t\ttext = fcell.getDisplayText();\r\n-\t\tAssert.assertEquals(\"\", text);\r\n-\t\tsaveods();\r\n-\r\n-\t\tOdfTable table1 = odtdoc.getTableByName(\"Table1\");\r\n-\t\tOdfTableCell fcell2 = table1.getCellByPosition(0, 1);\r\n-\t\ttext = fcell2.getDisplayText();\r\n-\t\tAssert.assertEquals(\"Aabbccddee\", text);\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testSetGetFormat() {\r\n-\t\tint rowindex = 3, columnindex = 0;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\r\n-\t\tfcell.setFormatString(\"#0.0\");\r\n-\t\tString displayvalue = fcell.getDisplayText();\r\n-\t\tAssert.assertEquals(\"300\"\r\n-\t\t\t\t+ (new DecimalFormatSymbols()).getDecimalSeparator() + \"0\",\r\n-\t\t\t\tdisplayvalue);\r\n-\t\tString format = fcell.getFormatString();\r\n-\t\tAssert.assertEquals(\"#0.0\", format);\r\n-\r\n-\t\tOdfTableCell dcell = table.getCellByPosition(3, 2);\r\n-\t\tformat = dcell.getFormatString();\r\n-\t\tAssert.assertEquals(\"MMM d, yy\", format);\r\n-\r\n-\t\tdcell.setFormatString(\"yyyy-MM-dd\");\r\n-\t\tdisplayvalue = dcell.getDisplayText();\r\n-\t\tAssert.assertEquals(\"2008-12-23\", displayvalue);\r\n-\r\n-\t\tOdfTableCell pcell = table.getCellByPosition(\"B2\");\r\n-\t\tformat = pcell.getFormatString();\r\n-\t\tAssert.assertEquals(\"#0%\", format);\r\n-\r\n-\t\tpcell.setFormatString(\"#0.00%\");\r\n-\t\tdisplayvalue = pcell.getDisplayText();\r\n-\t\tAssert.assertEquals(\"200\"\r\n-\t\t\t\t+ (new DecimalFormatSymbols()).getDecimalSeparator() + \"00%\",\r\n-\t\t\t\tdisplayvalue);\r\n-\t\t// reproduce bug 157\r\n-\t\ttry {\r\n-\t\t\tOdfTableRow tablerow = table.getRowByIndex(6);\r\n-\t\t\tOdfTableCell cell = tablerow.getCellByIndex(3);\r\n-\t\t\tCalendar currenttime = Calendar.getInstance();\r\n-\t\t\tcell.setDateValue(currenttime);\r\n-\t\t\tcell.setFormatString(\"yyyy-MM-dd\");\r\n-\t\t\ttablerow = table.getRowByIndex(7);\r\n-\t\t\tcell = tablerow.getCellByIndex(3);\r\n-\t\t\tcell.setTimeValue(currenttime);\r\n-\t\t\tcell.setFormatString(\"HH:mm:ss\");\r\n-\t\t} catch (Exception e) {\r\n-\t\t\te.printStackTrace();\r\n-\t\t\tAssert.fail(e.getMessage());\r\n-\t\t}\r\n-\t\tsaveods();\r\n-\r\n-\t}\r\n-\r\n-\tprivate void loadOutputSpreadsheet() {\r\n-\t\ttry {\r\n-\t\t\todsdoc = (OdfSpreadsheetDocument) OdfSpreadsheetDocument\r\n-\t\t\t\t\t.loadDocument(ResourceUtilities\r\n-\t\t\t\t\t\t\t.getTestResourceAsStream(SAMPLE_SPREADSHEET\r\n-\t\t\t\t\t\t\t\t\t+ \"Output.ods\"));\r\n-\t\t} catch (Exception e) {\r\n-\t\t\t// TODO Auto-generated catch block\r\n-\t\t\te.printStackTrace();\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetSetCellBackColor() throws Exception {\r\n-\t\tint rowindex = 2, columnindex = 0;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tfcell.setCellBackColor(null);\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\t// set color as DEFAULT_BACK_COLOR #FFFFFF\r\n-\t\tAssert.assertEquals(\"#FFFFFF\", fcell.getCellBackColor().toString());\r\n-\r\n-\t\tColor expectedColor = Color.valueOf(\"#000000\");\r\n-\t\tfcell.setCellBackColor(expectedColor);\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tAssert.assertEquals(expectedColor.toString(), fcell.getCellBackColor()\r\n-\t\t\t\t.toString());\r\n-\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetSetColumnSpannedNumber() throws Exception {\r\n-\t\tint rowindex = 2, columnindex = 0;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tfcell.setColumnSpannedNumber(-2);\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\t// set column spanned number as DEFAULT_COLUMN_SPANNED_NUMBER 1.\r\n-\t\tAssert.assertEquals(1, fcell.getColumnSpannedNumber());\r\n-\r\n-\t\tfcell.setColumnSpannedNumber(0);\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\t// set column spanned number as DEFAULT_COLUMN_SPANNED_NUMBER 1.\r\n-\t\tAssert.assertEquals(1, fcell.getColumnSpannedNumber());\r\n-\r\n-\t\tfcell.setColumnSpannedNumber(2);\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tAssert.assertEquals(2, fcell.getColumnSpannedNumber());\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetSetRowSpannedNumber() throws Exception {\r\n-\t\tint rowindex = 2, columnindex = 0;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tfcell.setRowSpannedNumber(-2);\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\t// set row spanned number as DEFAULT_ROW_SPANNED_NUMBER 1.\r\n-\t\tAssert.assertEquals(1, fcell.getRowSpannedNumber());\r\n-\r\n-\t\tfcell.setRowSpannedNumber(0);\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\t// set row spanned number as DEFAULT_ROW_SPANNED_NUMBER 1.\r\n-\t\tAssert.assertEquals(1, fcell.getRowSpannedNumber());\r\n-\r\n-\t\tfcell.setRowSpannedNumber(2);\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tAssert.assertEquals(2, fcell.getRowSpannedNumber());\r\n-\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetSetColumnsRepeatedNumber() throws Exception {\r\n-\t\tint rowindex = 3, columnindex = 1;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tfcell.setColumnsRepeatedNumber(-2);\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\t// set columns repeated number as DEFAULT_COLUMNS_REPEATED_NUMBER 1.\r\n-\t\tAssert.assertEquals(1, fcell.getColumnsRepeatedNumber());\r\n-\r\n-\t\tfcell.setColumnsRepeatedNumber(0);\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\t// set columns repeated number as DEFAULT_COLUMNS_REPEATED_NUMBER 1.\r\n-\t\tAssert.assertEquals(1, fcell.getColumnsRepeatedNumber());\r\n-\r\n-\t\tfcell.setColumnsRepeatedNumber(2);\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tAssert.assertEquals(2, fcell.getColumnsRepeatedNumber());\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetSetDateValue() {\r\n-\t\tint rowindex = 7, columnindex = 7;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tboolean illegalArgumentFlag = false;\r\n-\t\ttry {\r\n-\t\t\tfcell.setDateValue(null);\r\n-\t\t} catch (IllegalArgumentException ie) {\r\n-\t\t\tif (\"date shouldn't be null.\".equals(ie.getMessage())) {\r\n-\t\t\t\tillegalArgumentFlag = true;\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\tAssert.assertTrue(illegalArgumentFlag);\r\n-\t\tCalendar expectedCalendar = new GregorianCalendar(2010, 1, 30);\r\n-\t\tfcell.setDateValue(expectedCalendar);\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tAssert\r\n-\t\t\t\t.assertEquals(0, fcell.getDateValue().compareTo(\r\n-\t\t\t\t\t\texpectedCalendar));\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetSetStringValue() {\r\n-\t\tint rowindex = 6, columnindex = 0;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tfcell.setStringValue(null);\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tAssert.assertEquals(\"\", fcell.getStringValue());\r\n-\r\n-\t\tString expectedString = \"hello world\";\r\n-\t\tfcell.setStringValue(expectedString);\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tAssert.assertEquals(expectedString, fcell.getStringValue());\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetSetBooleanValue() {\r\n-\t\tint rowindex = 5, columnindex = 5;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tboolean expected = false;\r\n-\t\tfcell.setBooleanValue(expected);\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tAssert.assertFalse(fcell.getBooleanValue());\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetSetCurrencyValue() {\r\n-\t\tint rowindex = 5, columnindex = 5;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tdouble expected = 100.00;\r\n-\t\tboolean illegalArgumentFlag = false;\r\n-\t\ttry {\r\n-\t\t\tfcell.setCurrencyValue(expected, null);\r\n-\t\t} catch (IllegalArgumentException ie) {\r\n-\t\t\tif (\"currency shouldn't be null.\".equals(ie.getMessage())) {\r\n-\t\t\t\tillegalArgumentFlag = true;\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\tAssert.assertTrue(illegalArgumentFlag);\r\n-\r\n-\t\tfcell.setCurrencyValue(expected, \"USD\");\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tAssert.assertEquals(expected, fcell.getCurrencyValue());\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetSetCurrencyDesc() {\r\n-\t\tint rowindex = 1, columnindex = 2;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tboolean illegalArgumentFlag = false;\r\n-\t\ttry {\r\n-\t\t\tfcell.setCurrencyCode(null);\r\n-\t\t} catch (IllegalArgumentException ie) {\r\n-\t\t\tif (\"Currency code of cell should not be null.\".equals(ie\r\n-\t\t\t\t\t.getMessage())) {\r\n-\t\t\t\tillegalArgumentFlag = true;\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\tAssert.assertTrue(illegalArgumentFlag);\r\n-\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tString expected = \"USD\";\r\n-\t\tfcell.setCurrencyCode(expected);\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tAssert.assertEquals(expected, fcell.getCurrencyCode());\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetSetPercentageValue() {\r\n-\t\tint rowindex = 5, columnindex = 5;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tdouble expected = 56.98;\r\n-\t\tfcell.setPercentageValue(expected);\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tAssert.assertEquals(expected, fcell.getPercentageValue());\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetSetTimeValue() {\r\n-\t\tint rowindex = 0, columnindex = 4;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tboolean illegalArgumentFlag = false;\r\n-\t\ttry {\r\n-\t\t\tfcell.setTimeValue(null);\r\n-\t\t} catch (IllegalArgumentException ie) {\r\n-\t\t\tif (\"time shouldn't be null.\".equals(ie.getMessage())) {\r\n-\t\t\t\tillegalArgumentFlag = true;\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\tAssert.assertTrue(illegalArgumentFlag);\r\n-\t\tCalendar expected = Calendar.getInstance();\r\n-\t\tfcell.setTimeValue(expected);\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\r\n-\t\tSimpleDateFormat simpleFormat = new SimpleDateFormat(\r\n-\t\t\t\t\"'PT'HH'H'mm'M'ss'S'\");\r\n-\t\tString expectedString = simpleFormat.format(expected.getTime());\r\n-\t\tString targetString = simpleFormat.format(fcell.getTimeValue()\r\n-\t\t\t\t.getTime());\r\n-\t\tAssert.assertEquals(expectedString, targetString);\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetSetFormula() {\r\n-\t\tint rowindex = 1, columnindex = 10;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tboolean illegalArgumentFlag = false;\r\n-\t\ttry {\r\n-\t\t\tfcell.setFormula(null);\r\n-\t\t} catch (IllegalArgumentException ie) {\r\n-\t\t\tif (\"formula shouldn't be null.\".equals(ie.getMessage())) {\r\n-\t\t\t\tillegalArgumentFlag = true;\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\tAssert.assertTrue(illegalArgumentFlag);\r\n-\r\n-\t\tString expected = \"of:=[.I2]*4\";\r\n-\t\tfcell.setFormula(expected);\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tAssert.assertEquals(expected, fcell.getFormula());\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetStyleName() {\r\n-\t\tint rowindex = 2, columnindex = 0;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tString expected = \"ce2\";\r\n-\t\tfcell.getStyleName();\r\n-\r\n-\t\tAssert.assertEquals(expected, fcell.getStyleName());\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetTableColumn() {\r\n-\t\tint rowindex = 2, columnindex = 0;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\r\n-\t\tAssert.assertNotNull(fcell.getTableColumn());\r\n-\t\tAssert.assertEquals(columnindex, fcell.getTableColumn()\r\n-\t\t\t\t.getColumnIndex());\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetTableRow() {\r\n-\t\tint rowindex = 2, columnindex = 0;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\r\n-\t\tAssert.assertNotNull(fcell.getTableRow());\r\n-\t\tAssert.assertEquals(rowindex, fcell.getTableRow().getRowIndex());\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testRemoveContent() {\r\n-\t\tint rowindex = 5, columnindex = 8;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\r\n-\t\tAssert.assertTrue(fcell.mCellElement.getChildNodes().getLength() > 0);\r\n-\t\tfcell.removeContent();\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tAssert.assertEquals(0, fcell.mCellElement.getChildNodes().getLength());\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testRemoveTextContent() throws Exception {\r\n-\t\tint rowindex = 5, columnindex = 8;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\r\n-\t\t// how to test?\r\n-\t\tfcell.removeContent();\r\n-\t\tAssert.assertEquals(0, fcell.mCellElement.getChildNodes().getLength());\r\n-\r\n-\t\tfcell.setDisplayText(\"hello\");\r\n-\t\tDrawFrameElement drawEle = new DrawFrameElement(odsdoc.getContentDom());\r\n-\t\tDrawImageElement imageEle = drawEle.newDrawImageElement();\r\n-\t\tfcell.mCellElement.appendChild(drawEle);\r\n-\r\n-\t\tAssert.assertEquals(2, fcell.mCellElement.getChildNodes().getLength());\r\n-\r\n-\t\tfcell.removeTextContent();\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tAssert.assertEquals(1, fcell.mCellElement.getChildNodes().getLength());\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetSetDisplayText() {\r\n-\t\tint rowindex = 5, columnindex = 5;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tString expected = \"display text\";\r\n-\r\n-\t\t// Assert.assertEquals(expected, fcell.getDisplayText());\r\n-\r\n-\t\tfcell.setDisplayText(expected);\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tAssert.assertEquals(expected, fcell.getDisplayText());\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetSetFormatString() {\r\n-\t\tint rowindex = 3, columnindex = 0;\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tboolean illegalArgumentFlag = false;\r\n-\t\ttry {\r\n-\t\t\tfcell.setFormatString(null);\r\n-\t\t} catch (IllegalArgumentException ie) {\r\n-\t\t\tif (\"formatStr shouldn't be null.\".equals(ie.getMessage())) {\r\n-\t\t\t\tillegalArgumentFlag = true;\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\tAssert.assertTrue(illegalArgumentFlag);\r\n-\t\t// float format string\r\n-\t\tString expected = \"#0.0\";\r\n-\t\tfcell.setFormatString(expected);\r\n-\t\t// date format string\r\n-\t\t// String expected=\"MMM d, yy\";\r\n-\t\t// String expected=\"yyyy-MM-dd\";\r\n-\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfcell = table.getCellByPosition(columnindex, rowindex);\r\n-\t\tAssert.assertEquals(expected, fcell.getFormatString());\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetCurrencySymbol() {\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tOdfTableCell cell1 = table.getCellByPosition(\"C2\");\r\n-\t\tAssert.assertEquals(\"$\", cell1.getCurrencySymbol());\r\n-\t\tOdfTableCell cell2 = table.getCellByPosition(\"C3\");\r\n-\t\tAssert.assertEquals(\"CNY\", cell2.getCurrencySymbol());\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testGetSetCurrencyFormat() {\r\n-\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tString[] formats = { \"$#,##0.00\", \"#,##0.00 CNY\", \"$#,##0.0\" };\r\n-\r\n-\t\tOdfTableCell cell = table.getCellByPosition(\"J1\");\r\n-\t\tboolean illegalArgumentFlag = false;\r\n-\t\ttry {\r\n-\t\t\tcell.setCurrencyFormat(null, formats[0]);\r\n-\t\t} catch (IllegalArgumentException ie) {\r\n-\t\t\tif (\"currencySymbol shouldn't be null.\".equals(ie.getMessage())) {\r\n-\t\t\t\tillegalArgumentFlag = true;\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\tAssert.assertTrue(illegalArgumentFlag);\r\n-\r\n-\t\ttry {\r\n-\t\t\tcell.setCurrencyFormat(\"$\", null);\r\n-\t\t} catch (IllegalArgumentException ie) {\r\n-\t\t\tif (\"format shouldn't be null.\".equals(ie.getMessage())) {\r\n-\t\t\t\tillegalArgumentFlag = true;\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\tAssert.assertTrue(illegalArgumentFlag);\r\n-\r\n-\t\tcell.setCurrencyValue(32.12, \"USD\");\r\n-\t\tcell.setCurrencyFormat(\"$\", formats[0]);\r\n-\r\n-\t\tcell = table.getCellByPosition(\"J2\");\r\n-\t\tcell.setCurrencyValue(32, \"CNY\");\r\n-\t\tcell.setCurrencyFormat(\"CNY\", formats[1]);\r\n-\r\n-\t\tcell = table.getCellByPosition(\"J3\");\r\n-\t\tcell.setCurrencyValue(-32.12, \"USD\");\r\n-\t\tcell.setCurrencyFormat(\"$\", formats[2]);\r\n-\r\n-\t\tsaveods();\r\n-\t\t// reload\r\n-\t\tloadOutputSpreadsheet();\r\n-\t\ttable = odsdoc.getTableByName(\"Sheet1\");\r\n-\t\tfor (int i = 1; i <= 3; i++) {\r\n-\t\t\tOdfTableCell newcell = table.getCellByPosition(\"J\" + i);\r\n-\t\t\tAssert.assertEquals(formats[i - 1], newcell.getFormatString());\r\n-\t\t}\r\n-\t}\r\n-}\r\n+/************************************************************************\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER\n+ * \n+ * Copyright 2009 IBM. All rights reserved.\n+ * \n+ * Use is subject to license terms.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy\n+ * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also\n+ * obtain a copy of the License at http://odftoolkit.org/docs/license.txt\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * \n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ ************************************************************************/\n+package org.odftoolkit.odfdom.doc.table;\n+\n+import java.text.DecimalFormatSymbols;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.GregorianCalendar;\n+\n+import junit.framework.Assert;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.odftoolkit.odfdom.doc.OdfSpreadsheetDocument;\n+import org.odftoolkit.odfdom.doc.OdfTextDocument;\n+import org.odftoolkit.odfdom.dom.element.draw.DrawFrameElement;\n+import org.odftoolkit.odfdom.dom.element.draw.DrawImageElement;\n+import org.odftoolkit.odfdom.type.Color;\n+import org.odftoolkit.odfdom.utils.ResourceUtilities;\n+\n+public class TableCellTest {\n+\n+\tfinal static String SAMPLE_SPREADSHEET = \"TestSpreadsheetTable\";\n+\tfinal static String SAMPLE_TEXT = \"TestTextTable\";\n+\tOdfSpreadsheetDocument odsdoc;\n+\tOdfTextDocument odtdoc;\n+\tOdfTable odsTable, odtTable;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\ttry {\n+\t\t\todsdoc = (OdfSpreadsheetDocument) OdfSpreadsheetDocument\n+\t\t\t\t\t.loadDocument(ResourceUtilities\n+\t\t\t\t\t\t\t.getTestResourceAsStream(SAMPLE_SPREADSHEET\n+\t\t\t\t\t\t\t\t\t+ \".ods\"));\n+\t\t\todtdoc = (OdfTextDocument) OdfTextDocument\n+\t\t\t\t\t.loadDocument(ResourceUtilities\n+\t\t\t\t\t\t\t.getTestResourceAsStream(SAMPLE_TEXT + \".odt\"));\n+\n+\t\t} catch (Exception e) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+\n+\tprivate void saveods() {\n+\t\ttry {\n+\t\t\todsdoc.save(ResourceUtilities.newTestOutputFile(SAMPLE_SPREADSHEET\n+\t\t\t\t\t+ \"Output.ods\"));\n+\n+\t\t} catch (Exception e) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+\n+\tprivate void saveodt() {\n+\t\ttry {\n+\t\t\todtdoc.save(ResourceUtilities.newTestOutputFile(SAMPLE_TEXT\n+\t\t\t\t\t+ \"Output.odt\"));\n+\t\t} catch (Exception e) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testGetIndexInRowColumn() {\n+\t\tint rowindex = 2, columnindex = 1;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell cell = table.getCellByPosition(columnindex, rowindex);\n+\n+\t\tAssert.assertEquals(rowindex, cell.getRowIndex());\n+\t\tAssert.assertEquals(columnindex, cell.getColumnIndex());\n+\n+\t\tOdfTable table3 = odtdoc.getTableByName(\"Table3\");\n+\t\tOdfTableCell cell1 = table.getCellByPosition(0, 1);\n+\t\tAssert.assertEquals(1, cell1.getRowIndex());\n+\t\tAssert.assertEquals(0, cell1.getColumnIndex());\n+\t}\n+\n+\t@Test\n+\tpublic void testGetSetHoriJustify() {\n+\t\tint rowindex = 3, columnindex = 0;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\n+\t\tString align = fcell.getHorizontalJustify();\n+\t\tAssert.assertEquals(\"center\", align);\n+\n+\t\tfcell.setHorizontalJustify(null);\n+\t\talign = fcell.getHorizontalJustify();\n+\t\t// should be DEFAULT_HORIZONTAL_ALIGN \"start\"\n+\t\tAssert.assertEquals(align, \"start\");\n+\n+\t\tfcell.setHorizontalJustify(\"start\");\n+\t\talign = fcell.getHorizontalJustify();\n+\t\tAssert.assertEquals(\"start\", align);\n+\t\tsaveods();\n+\t}\n+\n+\t@Test\n+\tpublic void testGetSetVertJustify() {\n+\t\tint rowindex = 3, columnindex = 0;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\n+\t\tString align = fcell.getVerticalJustify();\n+\t\tAssert.assertEquals(\"top\", align);\n+\n+\t\t// use default vetical align when set null\n+\t\tfcell.setVerticalJustify(null);\n+\t\talign = fcell.getVerticalJustify();\n+\t\tAssert.assertEquals(\"top\", align);\n+\n+\t\tfcell.setVerticalJustify(\"bottom\");\n+\t\talign = fcell.getVerticalJustify();\n+\t\tAssert.assertEquals(\"bottom\", align);\n+\t\tsaveods();\n+\t}\n+\n+\t@Test\n+\tpublic void testGetSetValueType() {\n+\t\tint rowindex = 3, columnindex = 0;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tboolean illegalArgumentFlag = false;\n+\t\ttry {\n+\t\t\tfcell.setValueType(null);\n+\t\t} catch (IllegalArgumentException ie) {\n+\t\t\tif (\"type shouldn't be null.\".equals(ie.getMessage())) {\n+\t\t\t\tillegalArgumentFlag = true;\n+\t\t\t}\n+\t\t}\n+\t\tAssert.assertTrue(illegalArgumentFlag);\n+\n+\t\tfcell.setValueType(\"date\");\n+\t\tString valueType = fcell.getValueType();\n+\t\tAssert.assertEquals(\"date\", valueType);\n+\t\tsaveods();\n+\t}\n+\n+\t@Test\n+\tpublic void testGetSetWrapOption() {\n+\t\tint rowindex = 5, columnindex = 8;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\n+\t\tboolean wrap = fcell.isTextWrapped();\n+\t\tAssert.assertEquals(true, wrap);\n+\n+\t\tfcell.setTextWrapped(false);\n+\t\twrap = fcell.isTextWrapped();\n+\t\tAssert.assertEquals(false, wrap);\n+\t\tsaveods();\n+\t}\n+\n+\t@Test\n+\tpublic void testGetSetTextValue() {\n+\t\tint rowindex = 5, columnindex = 8;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\n+\t\tString text = fcell.getDisplayText();\n+\t\tAssert.assertEquals(\"this is a big cell with a big table\", text);\n+\n+\t\tfcell.setDisplayText(\"changed\");\n+\t\ttext = fcell.getDisplayText();\n+\t\tAssert.assertEquals(\"changed\", text);\n+\t\t// reproduce bug 150.\n+\t\tfcell.setDisplayText(null);\n+\t\ttext = fcell.getDisplayText();\n+\t\tAssert.assertEquals(\"\", text);\n+\t\tfcell.setDisplayText(null, \"automatic7777\");\n+\t\ttext = fcell.getDisplayText();\n+\t\tAssert.assertEquals(\"\", text);\n+\t\tsaveods();\n+\n+\t\tOdfTable table1 = odtdoc.getTableByName(\"Table1\");\n+\t\tOdfTableCell fcell2 = table1.getCellByPosition(0, 1);\n+\t\ttext = fcell2.getDisplayText();\n+\t\tAssert.assertEquals(\"Aabbccddee\", text);\n+\t}\n+\n+\t@Test\n+\tpublic void testSetGetFormat() {\n+\t\tint rowindex = 3, columnindex = 0;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\n+\t\tfcell.setFormatString(\"#0.0\");\n+\t\tString displayvalue = fcell.getDisplayText();\n+\t\tAssert.assertEquals(\"300\"\n+\t\t\t\t+ (new DecimalFormatSymbols()).getDecimalSeparator() + \"0\",\n+\t\t\t\tdisplayvalue);\n+\t\tString format = fcell.getFormatString();\n+\t\tAssert.assertEquals(\"#0.0\", format);\n+\n+\t\tOdfTableCell dcell = table.getCellByPosition(3, 2);\n+\t\tformat = dcell.getFormatString();\n+\t\tAssert.assertEquals(\"MMM d, yy\", format);\n+\n+\t\tdcell.setFormatString(\"yyyy-MM-dd\");\n+\t\tdisplayvalue = dcell.getDisplayText();\n+\t\tAssert.assertEquals(\"2008-12-23\", displayvalue);\n+\n+\t\tOdfTableCell pcell = table.getCellByPosition(\"B2\");\n+\t\tformat = pcell.getFormatString();\n+\t\tAssert.assertEquals(\"#0%\", format);\n+\n+\t\tpcell.setFormatString(\"#0.00%\");\n+\t\tdisplayvalue = pcell.getDisplayText();\n+\t\tAssert.assertEquals(\"200\"\n+\t\t\t\t+ (new DecimalFormatSymbols()).getDecimalSeparator() + \"00%\",\n+\t\t\t\tdisplayvalue);\n+\t\t// reproduce bug 157\n+\t\ttry {\n+\t\t\tOdfTableRow tablerow = table.getRowByIndex(6);\n+\t\t\tOdfTableCell cell = tablerow.getCellByIndex(3);\n+\t\t\tCalendar currenttime = Calendar.getInstance();\n+\t\t\tcell.setDateValue(currenttime);\n+\t\t\tcell.setFormatString(\"yyyy-MM-dd\");\n+\t\t\ttablerow = table.getRowByIndex(7);\n+\t\t\tcell = tablerow.getCellByIndex(3);\n+\t\t\tcell.setTimeValue(currenttime);\n+\t\t\tcell.setFormatString(\"HH:mm:ss\");\n+\t\t} catch (Exception e) {\n+\t\t\te.printStackTrace();\n+\t\t\tAssert.fail(e.getMessage());\n+\t\t}\n+\t\tsaveods();\n+\n+\t}\n+\n+\tprivate void loadOutputSpreadsheet() {\n+\t\ttry {\n+\t\t\todsdoc = (OdfSpreadsheetDocument) OdfSpreadsheetDocument\n+\t\t\t\t\t.loadDocument(ResourceUtilities\n+\t\t\t\t\t\t\t.getTestResourceAsStream(SAMPLE_SPREADSHEET\n+\t\t\t\t\t\t\t\t\t+ \"Output.ods\"));\n+\t\t} catch (Exception e) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testGetSetCellBackColor() throws Exception {\n+\t\tint rowindex = 2, columnindex = 0;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tfcell.setCellBackColor(null);\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\t// set color as DEFAULT_BACK_COLOR #FFFFFF\n+\t\tAssert.assertEquals(\"#FFFFFF\", fcell.getCellBackColor().toString());\n+\n+\t\tColor expectedColor = Color.valueOf(\"#000000\");\n+\t\tfcell.setCellBackColor(expectedColor);\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tAssert.assertEquals(expectedColor.toString(), fcell.getCellBackColor()\n+\t\t\t\t.toString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testGetSetColumnSpannedNumber() throws Exception {\n+\t\tint rowindex = 2, columnindex = 0;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tfcell.setColumnSpannedNumber(-2);\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\t// set column spanned number as DEFAULT_COLUMN_SPANNED_NUMBER 1.\n+\t\tAssert.assertEquals(1, fcell.getColumnSpannedNumber());\n+\n+\t\tfcell.setColumnSpannedNumber(0);\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\t// set column spanned number as DEFAULT_COLUMN_SPANNED_NUMBER 1.\n+\t\tAssert.assertEquals(1, fcell.getColumnSpannedNumber());\n+\n+\t\tfcell.setColumnSpannedNumber(2);\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tAssert.assertEquals(2, fcell.getColumnSpannedNumber());\n+\t}\n+\n+\t@Test\n+\tpublic void testGetSetRowSpannedNumber() throws Exception {\n+\t\tint rowindex = 2, columnindex = 0;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tfcell.setRowSpannedNumber(-2);\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\t// set row spanned number as DEFAULT_ROW_SPANNED_NUMBER 1.\n+\t\tAssert.assertEquals(1, fcell.getRowSpannedNumber());\n+\n+\t\tfcell.setRowSpannedNumber(0);\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\t// set row spanned number as DEFAULT_ROW_SPANNED_NUMBER 1.\n+\t\tAssert.assertEquals(1, fcell.getRowSpannedNumber());\n+\n+\t\tfcell.setRowSpannedNumber(2);\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tAssert.assertEquals(2, fcell.getRowSpannedNumber());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testGetSetColumnsRepeatedNumber() throws Exception {\n+\t\tint rowindex = 3, columnindex = 1;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tfcell.setColumnsRepeatedNumber(-2);\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\t// set columns repeated number as DEFAULT_COLUMNS_REPEATED_NUMBER 1.\n+\t\tAssert.assertEquals(1, fcell.getColumnsRepeatedNumber());\n+\n+\t\tfcell.setColumnsRepeatedNumber(0);\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\t// set columns repeated number as DEFAULT_COLUMNS_REPEATED_NUMBER 1.\n+\t\tAssert.assertEquals(1, fcell.getColumnsRepeatedNumber());\n+\n+\t\tfcell.setColumnsRepeatedNumber(2);\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tAssert.assertEquals(2, fcell.getColumnsRepeatedNumber());\n+\t}\n+\n+\t@Test\n+\tpublic void testGetSetDateValue() {\n+\t\tint rowindex = 7, columnindex = 7;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tboolean illegalArgumentFlag = false;\n+\t\ttry {\n+\t\t\tfcell.setDateValue(null);\n+\t\t} catch (IllegalArgumentException ie) {\n+\t\t\tif (\"date shouldn't be null.\".equals(ie.getMessage())) {\n+\t\t\t\tillegalArgumentFlag = true;\n+\t\t\t}\n+\t\t}\n+\t\tAssert.assertTrue(illegalArgumentFlag);\n+\t\tCalendar expectedCalendar = new GregorianCalendar(2010, 1, 30);\n+\t\tfcell.setDateValue(expectedCalendar);\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tAssert\n+\t\t\t\t.assertEquals(0, fcell.getDateValue().compareTo(\n+\t\t\t\t\t\texpectedCalendar));\n+\t}\n+\n+\t@Test\n+\tpublic void testGetSetStringValue() {\n+\t\tint rowindex = 6, columnindex = 0;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tfcell.setStringValue(null);\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tAssert.assertEquals(\"\", fcell.getStringValue());\n+\n+\t\tString expectedString = \"hello world\";\n+\t\tfcell.setStringValue(expectedString);\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tAssert.assertEquals(expectedString, fcell.getStringValue());\n+\t}\n+\n+\t@Test\n+\tpublic void testGetSetBooleanValue() {\n+\t\tint rowindex = 5, columnindex = 5;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tboolean expected = false;\n+\t\tfcell.setBooleanValue(expected);\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tAssert.assertFalse(fcell.getBooleanValue());\n+\t}\n+\n+\t@Test\n+\tpublic void testGetSetCurrencyValue() {\n+\t\tint rowindex = 5, columnindex = 5;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\t\t//reproduce bug 193\n+\t\tfcell.setValueType(\"currency\");\n+\t\tfcell.setCurrencyFormat(\"$\", \"#,##0.00\");\n+\t\tdouble actualValue=fcell.getCurrencyValue();\n+\t\tAssert.assertEquals(0.0, actualValue);\n+\t\t\n+\t\tdouble expected = 100.00;\n+\t\tboolean illegalArgumentFlag = false;\n+\t\ttry {\n+\t\t\tfcell.setCurrencyValue(expected, null);\n+\t\t} catch (IllegalArgumentException ie) {\n+\t\t\tif (\"currency shouldn't be null.\".equals(ie.getMessage())) {\n+\t\t\t\tillegalArgumentFlag = true;\n+\t\t\t}\n+\t\t}\n+\t\tAssert.assertTrue(illegalArgumentFlag);\n+\n+\t\tfcell.setCurrencyValue(expected, \"USD\");\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tAssert.assertEquals(expected, fcell.getCurrencyValue());\n+\t}\n+\n+\t@Test\n+\tpublic void testGetSetCurrencyDesc() {\n+\t\tint rowindex = 1, columnindex = 2;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tboolean illegalArgumentFlag = false;\n+\t\ttry {\n+\t\t\tfcell.setCurrencyCode(null);\n+\t\t} catch (IllegalArgumentException ie) {\n+\t\t\tif (\"Currency code of cell should not be null.\".equals(ie\n+\t\t\t\t\t.getMessage())) {\n+\t\t\t\tillegalArgumentFlag = true;\n+\t\t\t}\n+\t\t}\n+\t\tAssert.assertTrue(illegalArgumentFlag);\n+\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tString expected = \"USD\";\n+\t\tfcell.setCurrencyCode(expected);\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tAssert.assertEquals(expected, fcell.getCurrencyCode());\n+\t}\n+\n+\t@Test\n+\tpublic void testGetSetPercentageValue() {\n+\t\tint rowindex = 5, columnindex = 5;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tdouble expected = 56.98;\n+\t\tfcell.setPercentageValue(expected);\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tAssert.assertEquals(expected, fcell.getPercentageValue());\n+\t}\n+\n+\t@Test\n+\tpublic void testGetSetTimeValue() {\n+\t\tint rowindex = 0, columnindex = 4;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tboolean illegalArgumentFlag = false;\n+\t\ttry {\n+\t\t\tfcell.setTimeValue(null);\n+\t\t} catch (IllegalArgumentException ie) {\n+\t\t\tif (\"time shouldn't be null.\".equals(ie.getMessage())) {\n+\t\t\t\tillegalArgumentFlag = true;\n+\t\t\t}\n+\t\t}\n+\t\tAssert.assertTrue(illegalArgumentFlag);\n+\t\tCalendar expected = Calendar.getInstance();\n+\t\tfcell.setTimeValue(expected);\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\n+\t\tSimpleDateFormat simpleFormat = new SimpleDateFormat(\n+\t\t\t\t\"'PT'HH'H'mm'M'ss'S'\");\n+\t\tString expectedString = simpleFormat.format(expected.getTime());\n+\t\tString targetString = simpleFormat.format(fcell.getTimeValue()\n+\t\t\t\t.getTime());\n+\t\tAssert.assertEquals(expectedString, targetString);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetSetFormula() {\n+\t\tint rowindex = 1, columnindex = 10;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tboolean illegalArgumentFlag = false;\n+\t\ttry {\n+\t\t\tfcell.setFormula(null);\n+\t\t} catch (IllegalArgumentException ie) {\n+\t\t\tif (\"formula shouldn't be null.\".equals(ie.getMessage())) {\n+\t\t\t\tillegalArgumentFlag = true;\n+\t\t\t}\n+\t\t}\n+\t\tAssert.assertTrue(illegalArgumentFlag);\n+\n+\t\tString expected = \"of:=[.I2]*4\";\n+\t\tfcell.setFormula(expected);\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tAssert.assertEquals(expected, fcell.getFormula());\n+\t}\n+\n+\t@Test\n+\tpublic void testGetStyleName() {\n+\t\tint rowindex = 2, columnindex = 0;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tString expected = \"ce2\";\n+\t\tfcell.getStyleName();\n+\n+\t\tAssert.assertEquals(expected, fcell.getStyleName());\n+\t}\n+\n+\t@Test\n+\tpublic void testGetTableColumn() {\n+\t\tint rowindex = 2, columnindex = 0;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\n+\t\tAssert.assertNotNull(fcell.getTableColumn());\n+\t\tAssert.assertEquals(columnindex, fcell.getTableColumn()\n+\t\t\t\t.getColumnIndex());\n+\t}\n+\n+\t@Test\n+\tpublic void testGetTableRow() {\n+\t\tint rowindex = 2, columnindex = 0;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\n+\t\tAssert.assertNotNull(fcell.getTableRow());\n+\t\tAssert.assertEquals(rowindex, fcell.getTableRow().getRowIndex());\n+\t}\n+\n+\t@Test\n+\tpublic void testRemoveContent() {\n+\t\tint rowindex = 5, columnindex = 8;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\n+\t\tAssert.assertTrue(fcell.mCellElement.getChildNodes().getLength() > 0);\n+\t\tfcell.removeContent();\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tAssert.assertEquals(0, fcell.mCellElement.getChildNodes().getLength());\n+\t}\n+\n+\t@Test\n+\tpublic void testRemoveTextContent() throws Exception {\n+\t\tint rowindex = 5, columnindex = 8;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\n+\t\t// how to test?\n+\t\tfcell.removeContent();\n+\t\tAssert.assertEquals(0, fcell.mCellElement.getChildNodes().getLength());\n+\n+\t\tfcell.setDisplayText(\"hello\");\n+\t\tDrawFrameElement drawEle = new DrawFrameElement(odsdoc.getContentDom());\n+\t\tDrawImageElement imageEle = drawEle.newDrawImageElement();\n+\t\tfcell.mCellElement.appendChild(drawEle);\n+\n+\t\tAssert.assertEquals(2, fcell.mCellElement.getChildNodes().getLength());\n+\n+\t\tfcell.removeTextContent();\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tAssert.assertEquals(1, fcell.mCellElement.getChildNodes().getLength());\n+\t}\n+\n+\t@Test\n+\tpublic void testGetSetDisplayText() {\n+\t\tint rowindex = 5, columnindex = 5;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tString expected = \"display text\";\n+\n+\t\t// Assert.assertEquals(expected, fcell.getDisplayText());\n+\n+\t\tfcell.setDisplayText(expected);\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tAssert.assertEquals(expected, fcell.getDisplayText());\n+\t}\n+\n+\t@Test\n+\tpublic void testGetSetFormatString() {\n+\t\tint rowindex = 3, columnindex = 0;\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell fcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tboolean illegalArgumentFlag = false;\n+\t\ttry {\n+\t\t\tfcell.setFormatString(null);\n+\t\t} catch (IllegalArgumentException ie) {\n+\t\t\tif (\"formatStr shouldn't be null.\".equals(ie.getMessage())) {\n+\t\t\t\tillegalArgumentFlag = true;\n+\t\t\t}\n+\t\t}\n+\t\tAssert.assertTrue(illegalArgumentFlag);\n+\t\t// float format string\n+\t\tString expected = \"#0.0\";\n+\t\tfcell.setFormatString(expected);\n+\t\t// date format string\n+\t\t// String expected=\"MMM d, yy\";\n+\t\t// String expected=\"yyyy-MM-dd\";\n+\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfcell = table.getCellByPosition(columnindex, rowindex);\n+\t\tAssert.assertEquals(expected, fcell.getFormatString());\n+\t}\n+\n+\t@Test\n+\tpublic void testGetCurrencySymbol() {\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tOdfTableCell cell1 = table.getCellByPosition(\"C2\");\n+\t\tAssert.assertEquals(\"$\", cell1.getCurrencySymbol());\n+\t\tOdfTableCell cell2 = table.getCellByPosition(\"C3\");\n+\t\tAssert.assertEquals(\"CNY\", cell2.getCurrencySymbol());\n+\t}\n+\n+\t@Test\n+\tpublic void testGetSetCurrencyFormat() {\n+\t\tOdfTable table = odsdoc.getTableByName(\"Sheet1\");\n+\t\tString[] formats = { \"$#,##0.00\", \"#,##0.00 CNY\", \"$#,##0.0\" };\n+\n+\t\tOdfTableCell cell = table.getCellByPosition(\"J1\");\n+\t\tboolean illegalArgumentFlag = false;\n+\t\ttry {\n+\t\t\tcell.setCurrencyFormat(null, formats[0]);\n+\t\t} catch (IllegalArgumentException ie) {\n+\t\t\tif (\"currencySymbol shouldn't be null.\".equals(ie.getMessage())) {\n+\t\t\t\tillegalArgumentFlag = true;\n+\t\t\t}\n+\t\t}\n+\t\tAssert.assertTrue(illegalArgumentFlag);\n+\n+\t\ttry {\n+\t\t\tcell.setCurrencyFormat(\"$\", null);\n+\t\t} catch (IllegalArgumentException ie) {\n+\t\t\tif (\"format shouldn't be null.\".equals(ie.getMessage())) {\n+\t\t\t\tillegalArgumentFlag = true;\n+\t\t\t}\n+\t\t}\n+\t\tAssert.assertTrue(illegalArgumentFlag);\n+\n+\t\tcell.setCurrencyValue(32.12, \"USD\");\n+\t\tcell.setCurrencyFormat(\"$\", formats[0]);\n+\n+\t\tcell = table.getCellByPosition(\"J2\");\n+\t\tcell.setCurrencyValue(32, \"CNY\");\n+\t\tcell.setCurrencyFormat(\"CNY\", formats[1]);\n+\n+\t\tcell = table.getCellByPosition(\"J3\");\n+\t\tcell.setCurrencyValue(-32.12, \"USD\");\n+\t\tcell.setCurrencyFormat(\"$\", formats[2]);\n+\n+\t\tsaveods();\n+\t\t// reload\n+\t\tloadOutputSpreadsheet();\n+\t\ttable = odsdoc.getTableByName(\"Sheet1\");\n+\t\tfor (int i = 1; i <= 3; i++) {\n+\t\t\tOdfTableCell newcell = table.getCellByPosition(\"J\" + i);\n+\t\t\tAssert.assertEquals(formats[i - 1], newcell.getFormatString());\n+\t\t}\n+\t}\n+}",
                "deletions": 750
            }
        ]
    },
    {
        "repo": "odftoolkit",
        "message": "changeset:   53:6443f05d3001\nuser:        Developer:Michel;Reviewer:Devin\ndate:        Sat Apr 02 10:42:49 2011 +0800\n#bug324# Table unnamed causes a NullPointerException.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/odf/trunk@1168147 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/odftoolkit/commit/a5922183595a1be13455d9b11ebf3e0d4ed97752",
        "parent": "https://github.com/apache/odftoolkit/commit/ce518462f606041690e7a6e0625f04b2adc191c4",
        "bug_id": "odftoolkit_10",
        "file": [
            {
                "sha": "e59d618eb49be2cb0233bc807f9c8d78efd553d0",
                "filename": "simple/src/main/java/org/odftoolkit/simple/table/Table.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/a5922183595a1be13455d9b11ebf3e0d4ed97752/simple/src/main/java/org/odftoolkit/simple/table/Table.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/a5922183595a1be13455d9b11ebf3e0d4ed97752/simple/src/main/java/org/odftoolkit/simple/table/Table.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/simple/src/main/java/org/odftoolkit/simple/table/Table.java?ref=a5922183595a1be13455d9b11ebf3e0d4ed97752",
                "patch": "@@ -921,9 +921,11 @@ private static String getUniqueTableName(TableContainer container) {\n \t\twhile (notUnique) {\n \t\t\tnotUnique = false;\n \t\t\tfor (int i = 0; i < tableList.size(); i++) {\n-\t\t\t\tif (tableList.get(i).getTableName().equalsIgnoreCase(tablename)) {\n-\t\t\t\t\tnotUnique = true;\n-\t\t\t\t\tbreak;\n+\t\t\t\tif (tableList.get(i).getTableName() != null) {\n+\t\t\t\t\tif (tableList.get(i).getTableName().equalsIgnoreCase(tablename)) {\n+\t\t\t\t\t\tnotUnique = true;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t\tif (notUnique) {",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "odftoolkit",
        "message": "changeset:   78:ee4724e88603\nuser:        Developer:Daisy;Reviewers:Devin,svanteschubert\ndate:        Wed Jul 14 00:31:14 2010 +0200\n#bug 212# Trying to access a spreadsheet cell without first inserting rows causes NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/odf/trunk@1168047 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/odftoolkit/commit/1fa54c87585e0891d324dbb6c64c7cd6d1b94139",
        "parent": "https://github.com/apache/odftoolkit/commit/8e1c4428a9cc95bda04e4ee3a8816bd2dc01e5c7",
        "bug_id": "odftoolkit_11",
        "file": [
            {
                "sha": "02e732d4dabc3a40e7875827fbc3a32e6be19459",
                "filename": "odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTable.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/1fa54c87585e0891d324dbb6c64c7cd6d1b94139/odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTable.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/1fa54c87585e0891d324dbb6c64c7cd6d1b94139/odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTable.java",
                "status": "modified",
                "changes": 19,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTable.java?ref=1fa54c87585e0891d324dbb6c64c7cd6d1b94139",
                "patch": "@@ -896,7 +896,19 @@ public OdfTableColumn appendColumn() {\n \t\tif (positonElement.getParentNode() instanceof TableTableHeaderRowsElement) {\n \t\t\tpositonElement = (OdfElement) positonElement.getParentNode();\n \t\t}\n+\t\t\n+\t\t//Moved before column elements inserted\n+\t\t//insert cells firstly\n+\t\t//Or else, wrong column number will be gotten in updateCellRepository, which will cause a NPE.\n+\t\t//insertCellBefore()->splitRepeatedRows()->updateRowRepository()->updateCellRepository() \n+\t\tList<OdfTableRow> rowList = getRowList();\n+\t\tfor (int i = 0; i < rowList.size();) {\n+\t\t\tOdfTableRow row1 = rowList.get(i);\n+\t\t\trow1.insertCellBefore(row1.getCellByIndex(columnCount - 1), null);\n+\t\t\ti = i + row1.getRowsRepeatedNumber();\n+\t\t}\t\t\n \n+\t\t//insert columns secondly\n \t\tif (columnList.size() == 0) //no column, create a new column\n \t\t{\n \t\t\tOdfStyle columnStyle = mTableElement.getAutomaticStyles().newStyle(OdfStyleFamily.TableColumn);\n@@ -915,13 +927,6 @@ public OdfTableColumn appendColumn() {\n \t\t\tmTableElement.insertBefore(newColumn, positonElement);\n \t\t}\n \n-\t\t//insert cells\n-\t\tList<OdfTableRow> rowList = getRowList();\n-\t\tfor (int i = 0; i < rowList.size();) {\n-\t\t\tOdfTableRow row1 = rowList.get(i);\n-\t\t\trow1.insertCellBefore(row1.getCellByIndex(columnCount - 1), null);\n-\t\t\ti = i + row1.getRowsRepeatedNumber();\n-\t\t}\n \t\treturn getColumnInstance(newColumn, 0);\n \t}\n ",
                "deletions": 7
            },
            {
                "sha": "d5363ee6175b875340aa6993a68558a74156ced5",
                "filename": "odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableTest.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/1fa54c87585e0891d324dbb6c64c7cd6d1b94139/odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableTest.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/1fa54c87585e0891d324dbb6c64c7cd6d1b94139/odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableTest.java",
                "status": "modified",
                "changes": 66,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableTest.java?ref=1fa54c87585e0891d324dbb6c64c7cd6d1b94139",
                "patch": "@@ -24,6 +24,8 @@\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n \n import junit.framework.Assert;\n import org.w3c.dom.Node;\n@@ -53,8 +55,8 @@ public void setUp() {\n \t\ttry {\n \t\t\tmOdsDoc = (OdfSpreadsheetDocument) OdfSpreadsheetDocument.loadDocument(ResourceUtilities.getTestResourceAsStream(mOdsTestFileName + \".ods\"));\n \t\t} catch (Exception e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n+\t\t\tAssert.fail(e.getMessage());\n \t\t}\n \t}\n \n@@ -63,8 +65,8 @@ private OdfTextDocument loadODTDocument(String name) {\n \t\t\tOdfTextDocument odtdoc = (OdfTextDocument) OdfTextDocument.loadDocument(ResourceUtilities.getTestResourceAsStream(name));\n \t\t\treturn odtdoc;\n \t\t} catch (Exception e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n+\t\t\tAssert.fail(e.getMessage());\n \t\t}\n \t\treturn null;\n \t}\n@@ -85,7 +87,7 @@ public void testNewTable() {\n \n \t\t\tdocument.save(ResourceUtilities.newTestOutputFile(\"CreateTableCase.odt\"));\n \t\t} catch (Exception e) {\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n \t\t\tAssert.fail(e.getMessage());\n \t\t}\n \t}\n@@ -179,7 +181,7 @@ public void testNewTableWithArrayData() {\n \t\t\tAssert.assertEquals(rowCount + 1, table1.getRowCount());\n \t\t\tAssert.assertEquals(columnCount + 1, table1.getColumnCount());\n \t\t} catch (Exception e) {\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n \t\t\tAssert.fail(e.getMessage());\n \t\t}\n \t}\n@@ -203,7 +205,7 @@ public void testNewTableWithoutHeaderColumn() {\n \t\t\t\t}\n \t\t\t}\n \t\t} catch (Exception e) {\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n \t\t\tAssert.fail(e.getMessage());\n \t\t}\n \t}\n@@ -319,8 +321,8 @@ public void testDeleteTable() {\n \t\t\ttableList = mOdtDoc.getTableList();\n \t\t\tAssert.assertEquals(count - 1, tableList.size());\n \t\t} catch (Exception e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n+\t\t\tAssert.fail(e.getMessage());\n \t\t}\n \t}\n \n@@ -337,8 +339,8 @@ public void testSetGetWidth() {\n \t\t\tdocument.save(ResourceUtilities.newTestOutputFile(\"TestSetGetWidth.odt\"));\n \n \t\t} catch (Exception e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n+\t\t\tAssert.fail(e.getMessage());\n \t\t}\n \t}\n \n@@ -546,8 +548,7 @@ public void testGetColumnList() {\n \t\t\tAssert.assertEquals(\"\", columns.get(0).getCellByIndex(0).getStringValue());\n \n \t\t} catch (Exception e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n \t\t\tAssert.fail(e.getMessage());\n \t\t}\n \n@@ -595,8 +596,7 @@ public void testGetRowList() {\n \n \t\t\tAssert.assertEquals(\"\", rows.get(0).getCellByIndex(0).getStringValue());\n \t\t} catch (Exception e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n \t\t\tAssert.fail(e.getMessage());\n \t\t}\n \t}\n@@ -800,7 +800,7 @@ public void testGetCellByPosition() {\n \t\tcell = table.getCellByPosition(\"K4\");\n \t\tAssert.assertNotNull(cell);\n \t\tcell.setBooleanValue(true);\n-\t\tAssert.assertEquals(new Boolean(true), cell.getBooleanValue());\n+\t\tAssert.assertEquals(Boolean.TRUE, cell.getBooleanValue());\n \t\tcell = table.getCellByPosition(\"D10\");\n \t\tAssert.assertNotNull(cell);\n \t\tCalendar cal = Calendar.getInstance();\n@@ -816,6 +816,24 @@ public void testGetCellByPosition() {\n \t\tAssert.assertEquals(\"stringM15\", cell.getStringValue());\n \t}\n \n+\t@Test\n+\tpublic void testGetCellWithAutoExtend()\n+\t{\n+\t\tOdfSpreadsheetDocument ods;\n+\t\ttry {\n+\t\t\tods = OdfSpreadsheetDocument.newSpreadsheetDocument();\n+\t\t\tOdfTable tbl = ods.getTableByName(\"Sheet1\");\n+\t\t\ttbl.setTableName(\"Tests\");\n+\t\t\tOdfTableCell cell = tbl.getCellByPosition(5, 5);\n+\t\t\tAssert.assertNotNull(cell);\n+\t\t\tAssert.assertEquals(6, tbl.getRowCount());\n+\t\t\tAssert.assertEquals(6, tbl.getColumnCount());\n+\t\t} catch (Exception e) {\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n+\t\t\tAssert.fail(e.getMessage());\n+\t\t}\n+\t}\n+\t\n \t@Test\n \tpublic void testGetCellRangeByPosition() {\n \t\ttestNewTable();\n@@ -905,8 +923,8 @@ public void testAppendRow() {\n \t\t\tsaveodt(mOdtTestFileName + \"Out.odt\");\n \n \t\t} catch (Exception e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n+\t\t\tAssert.fail(e.getMessage());\n \t\t}\n \t}\n \n@@ -984,8 +1002,7 @@ public void testGetCellAt() {\n \t\t\t\tAssert.assertEquals(1, value);\n \t\t\t}\n \t\t} catch (Exception e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n \t\t}\n \t}\n \n@@ -994,25 +1011,24 @@ private void testAppendRow(TableTableElement table) {\n \t\tint count = fTable.getRowCount();\n \t\tfTable.appendRow();\n \t\tint newcount = fTable.getRowCount();\n-\n \t\tAssert.assertEquals(count + 1, newcount);\n \t}\n \n \tprivate void saveods() {\n \t\ttry {\n \t\t\tmOdsDoc.save(ResourceUtilities.newTestOutputFile(mOdsTestFileName + \"Output.ods\"));\n \t\t} catch (Exception e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n+\t\t\tAssert.fail(e.getMessage());\n \t\t}\n \t}\n \n \tprivate void saveodt(String filename) {\n \t\ttry {\n \t\t\tmOdtDoc.save(ResourceUtilities.newTestOutputFile(filename));\n \t\t} catch (Exception e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n+\t\t\tAssert.fail(e.getMessage());\n \t\t}\n \t}\n }",
                "deletions": 25
            }
        ]
    },
    {
        "repo": "odftoolkit",
        "message": "changeset:   48:ca14534c6e69\nuser:        Developer:Devin; Reviewer:WeiHua, svanteschubert\ndate:        Wed May 26 19:51:29 2010 +0200\n#bug157# Calling OdfTableCell.setFormatString('yyyy-MM-dd') throws NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/odf/trunk@1168019 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/odftoolkit/commit/2f89b53a666460ecbf4df6901671a84900531ae9",
        "parent": "https://github.com/apache/odftoolkit/commit/82c0de5d031cc0456722e89fff5d838a4938e3a4",
        "bug_id": "odftoolkit_12",
        "file": [
            {
                "sha": "c7a5fa76f4ecd484b112f80fed58762e2fcb6ed4",
                "filename": "odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTableCell.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/2f89b53a666460ecbf4df6901671a84900531ae9/odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTableCell.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/2f89b53a666460ecbf4df6901671a84900531ae9/odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTableCell.java",
                "status": "modified",
                "changes": 31,
                "additions": 27,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTableCell.java?ref=2f89b53a666460ecbf4df6901671a84900531ae9",
                "patch": "@@ -39,6 +39,7 @@\n import org.odftoolkit.odfdom.doc.number.OdfNumberPercentageStyle;\r\n import org.odftoolkit.odfdom.doc.number.OdfNumberStyle;\r\n import org.odftoolkit.odfdom.doc.number.OdfNumberText;\r\n+import org.odftoolkit.odfdom.doc.number.OdfNumberTimeStyle;\r\n import org.odftoolkit.odfdom.doc.office.OdfOfficeAutomaticStyles;\r\n import org.odftoolkit.odfdom.doc.style.OdfStyle;\r\n import org.odftoolkit.odfdom.doc.text.OdfTextParagraph;\r\n@@ -820,7 +821,7 @@ public String getStringValue() {\n \t */\r\n \tpublic Calendar getTimeValue() {\r\n \t\tif (getTypeAttr() == OfficeValueTypeAttribute.Value.TIME) {\r\n-\t\t\tString timeStr = mCellElement.getOfficeDateValueAttribute();\r\n+\t\t\tString timeStr = mCellElement.getOfficeTimeValueAttribute();\r\n \t\t\tDate date = parseString(timeStr, msTime_Format);\r\n \t\t\tCalendar calender = Calendar.getInstance();\r\n \t\t\tcalender.setTime(date);\r\n@@ -834,7 +835,7 @@ public Calendar getTimeValue() {\n \t}\r\n \r\n \t/**\r\n-\t * Set the cell value as a date\r\n+\t * Set the cell value as a time\r\n \t * and set the value type to be date too.\r\n \t * \r\n \t * @param date\tthe value of calendar type\r\n@@ -844,7 +845,7 @@ public void setTimeValue(Calendar date) {\n \t\tsetTypeAttr(OfficeValueTypeAttribute.Value.TIME);\r\n \t\tSimpleDateFormat simpleFormat = new SimpleDateFormat(msTime_Format);\r\n \t\tString svalue = simpleFormat.format(date.getTime());\r\n-\t\tmCellElement.setOfficeDateValueAttribute(svalue);\r\n+\t\tmCellElement.setOfficeTimeValueAttribute(svalue);\r\n \t\tsetDisplayText(svalue);\r\n \t}\r\n \r\n@@ -1148,6 +1149,18 @@ public void setFormatString(String formatStr) {\n \t\t\t\tCalendar date = getDateValue();\r\n \t\t\t\tsetDisplayText((new SimpleDateFormat(formatStr)).format(date.getTime()));\r\n \t\t\t}\r\n+\t\t} else if (typeValue == OfficeValueTypeAttribute.Value.TIME) {\r\n+\t\t\tOdfNumberTimeStyle timeStyle = new OdfNumberTimeStyle(\r\n+\t\t\t\t\t(OdfFileDom) mCellElement.getOwnerDocument(), formatStr,\r\n+\t\t\t\t\tgetUniqueDateStyleName());\r\n+\t\t\tmCellElement.getAutomaticStyles().appendChild(timeStyle);\r\n+\t\t\tsetDataDisplayStyleName(timeStyle.getStyleNameAttribute());\r\n+\t\t\tString timeStr = mCellElement.getOfficeTimeValueAttribute();\r\n+\t\t\tif (timeStr != null) {\r\n+\t\t\t\tCalendar time = getTimeValue();\r\n+\t\t\t\tsetDisplayText((new SimpleDateFormat(formatStr)).format(time\r\n+\t\t\t\t\t\t.getTime()));\r\n+\t\t\t} \r\n \t\t} else if (typeValue == OfficeValueTypeAttribute.Value.PERCENTAGE) {\r\n \t\t\tOdfNumberPercentageStyle dateStyle = new OdfNumberPercentageStyle(\r\n \t\t\t\t\t(OdfFileDom) mCellElement.getOwnerDocument(),\r\n@@ -1191,10 +1204,20 @@ private OdfStyle getCellStyleElement() {\n \t\t\tstyleElement = ((OdfFileDom) mCellElement.getOwnerDocument()).getOdfDocument().getDocumentStyles().getStyle(styleName,\r\n \t\t\t\t\tOdfStyleFamily.TableCell);\r\n \t\t}\r\n-\r\n+\t\t\r\n \t\tif (styleElement == null) {\r\n \t\t\tstyleElement = mCellElement.getDocumentStyle();\r\n \t\t}\r\n+\r\n+\t\tif (styleElement == null) {\r\n+\t\t\tOdfStyle newStyle = mCellElement.getAutomaticStyles().newStyle(\r\n+\t\t\t\t\tOdfStyleFamily.TableCell);\r\n+\t\t\tString newname = newStyle.getStyleNameAttribute();\r\n+\t\t\tmCellElement.setStyleName(newname);\r\n+\t\t\tnewStyle.addStyleUser(mCellElement);\r\n+\t\t\treturn newStyle;\r\n+\t\t}\r\n+\r\n \t\treturn styleElement;\r\n \t}\r\n \r",
                "deletions": 4
            },
            {
                "sha": "1a354332c3e84c6b14794a1d53e0eb5a9a26a97e",
                "filename": "odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableCellTest.java",
                "blob_url": "https://github.com/apache/odftoolkit/blob/2f89b53a666460ecbf4df6901671a84900531ae9/odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableCellTest.java",
                "raw_url": "https://github.com/apache/odftoolkit/raw/2f89b53a666460ecbf4df6901671a84900531ae9/odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableCellTest.java",
                "status": "modified",
                "changes": 19,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableCellTest.java?ref=2f89b53a666460ecbf4df6901671a84900531ae9",
                "patch": "@@ -191,6 +191,21 @@ public void testSetGetFormat()\n     \tpcell.setFormatString(\"#0.00%\");\r\n     \tdisplayvalue = pcell.getDisplayText();\r\n     \tAssert.assertEquals(\"200\"+(new DecimalFormatSymbols()).getDecimalSeparator()+\"00%\", displayvalue);\r\n+    \t// reproduce bug 157\r\n+    \ttry {\r\n+    \t\tOdfTableRow tablerow = table.getRowByIndex(6);\r\n+    \t\tOdfTableCell cell = tablerow.getCellByIndex(3);\r\n+    \t\tCalendar currenttime = Calendar.getInstance();\r\n+    \t\tcell.setDateValue(currenttime);\r\n+    \t\tcell.setFormatString(\"yyyy-MM-dd\");\r\n+    \t\ttablerow = table.getRowByIndex(7);\r\n+    \t\tcell = tablerow.getCellByIndex(3);\r\n+    \t\tcell.setTimeValue(currenttime);\r\n+    \t\tcell.setFormatString(\"HH:mm:ss\");\r\n+    \t} catch (Exception e) {\r\n+    \t\te.printStackTrace();\r\n+    \t\tAssert.fail(e.getMessage());\r\n+    \t}\r\n     \tsaveods();\r\n     \t\r\n \t}\r\n@@ -330,6 +345,10 @@ public void testGetSetTimeValue() {\n             String  expectedString= simpleFormat.format(expected.getTime());\r\n             String  targetString= simpleFormat.format(fcell.getTimeValue().getTime());\r\n \t    Assert.assertEquals(expectedString,targetString);\r\n+\t    // reproduce bug156\r\n+\t    String timeValueAttribute = fcell.mCellElement.getOfficeTimeValueAttribute();\r\n+\t    Assert.assertNotNull(timeValueAttribute);\r\n+\t    Assert.assertEquals(expectedString, timeValueAttribute);\r\n \t}\r\n \t\r\n \t@Test\r",
                "deletions": 0
            }
        ]
    }
]