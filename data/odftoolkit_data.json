[{"commit": "https://github.com/apache/odftoolkit/commit/8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1", "parent": "https://github.com/apache/odftoolkit/commit/0610e68c062d9cddabe2e518d0ee0960cd50dcdf", "message": "ODFTOOLKIT-398: Prevent NPE in getCellBackgroundColor. Patch by David Reepmeyer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/odf/trunk@1684559 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "odftoolkit_1", "file": [{"additions": 36, "raw_url": "https://github.com/apache/odftoolkit/raw/8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1/CHANGES.txt", "blob_url": "https://github.com/apache/odftoolkit/blob/8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1/CHANGES.txt", "sha": "0452f730b3b77c7e646391fc9beac00641cf3651", "changes": 36, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/CHANGES.txt?ref=8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1", "patch": "@@ -1,6 +1,42 @@\n Apache ODF Toolkit Change Log\r\n =============================\r\n \r\n+======= Release 0.6.2 =======\r\n+\r\n+The most notable changes in ODF Toolkit 0.6.2 incubating over previous release:\r\n+\r\n+Release wiki page: https://cwiki.apache.org/confluence/display/ODFTOOLKIT/0.6.2-incubating\r\n+\r\n+Versions of major components\r\n+----------------------------\r\n+\r\n+* Xerces 2.9.1 (http://xerces.apache.org/mirrors.cgi)\r\n+* Apache Jena 2.9.4 (http://jena.apache.org/download/index.html)\r\n+* Apache Commons Validator 1.4.0 (http://commons.apache.org/proper/commons-validator//download_validator.cgi)\r\n+\r\n+For a full dependecy list run mvn dependency:tree from the top level in the source module or see the release wiki page.\r\n+\r\n+Upgrading from 0.6.1-incubating\r\n+-----------------------------\r\n+\r\n+\r\n+Detailed Change List\r\n+--------------------\r\n+\r\n+New Features\r\n+------------\r\n+\r\n+Optimizations\r\n+-------------\r\n+\r\n+Bug Fixes\r\n+---------\r\n+\r\n+* ODFTOOLKIT-398 prevent NullPointerException in getCellBackgroundColor() (Florian Hopf, Patch by David Reepmeyer)\r\n+\r\n+Other\r\n+-----\r\n+\r\n ======= Release 0.6.1 =======\r\n \r\n The most notable changes in ODF Toolkit 0.6.1 incubating over previous release:\r", "filename": "CHANGES.txt"}, {"additions": 3, "raw_url": "https://github.com/apache/odftoolkit/raw/8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1/simple/src/main/java/org/odftoolkit/simple/table/CellStyleHandler.java", "blob_url": "https://github.com/apache/odftoolkit/blob/8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1/simple/src/main/java/org/odftoolkit/simple/table/CellStyleHandler.java", "sha": "5f297f7558eab09b410826ac46cbc0bb2dcb00c4", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/simple/src/main/java/org/odftoolkit/simple/table/CellStyleHandler.java?ref=8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1", "patch": "@@ -425,7 +425,9 @@ public Color getBackgroundColor() {\n \t\tif (!isDefault) {\n \t\t\tOdfDefaultStyle defaultStyle = getCellDefaultStyle();\n \t\t\tTableCellProperties defaultStyleSetting = TableCellProperties.getTableCellProperties(defaultStyle);\n-\t\t\ttempColor = defaultStyleSetting.getBackgroundColor();\n+\t\t\tif (defaultStyleSetting != null) {\n+\t\t\t\ttempColor = defaultStyleSetting.getBackgroundColor();\n+\t\t\t}\n \t\t}\n \t\t// use default\n \t\tif (tempColor == null)", "filename": "simple/src/main/java/org/odftoolkit/simple/table/CellStyleHandler.java"}, {"additions": 46, "raw_url": "https://github.com/apache/odftoolkit/raw/8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1/simple/src/test/java/org/odftoolkit/simple/SpreadsheetWithoutTableCellPropertiesTest.java", "blob_url": "https://github.com/apache/odftoolkit/blob/8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1/simple/src/test/java/org/odftoolkit/simple/SpreadsheetWithoutTableCellPropertiesTest.java", "sha": "af7563ebb3cb2ad032a03fdf276f9145a0f95a77", "changes": 46, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/simple/src/test/java/org/odftoolkit/simple/SpreadsheetWithoutTableCellPropertiesTest.java?ref=8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1", "patch": "@@ -0,0 +1,46 @@\n+/* \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+*/\n+\n+package org.odftoolkit.simple;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import junit.framework.Assert;\n+\n+import org.junit.Test;\n+import org.odftoolkit.simple.table.Table;\n+import org.odftoolkit.simple.utils.ResourceUtilities;\n+import org.odftoolkit.simple.table.Cell;\n+import org.odftoolkit.odfdom.type.Color;\n+\n+public class SpreadsheetWithoutTableCellPropertiesTest {\n+\t\n+\tprivate final static String TEST_FILE_NAME = \"TestCellWithoutTableCellProperties.ods\";\n+\n+\t@Test\n+\tpublic void testGetCellBackgroundColorOfEmptySpace() throws Exception {\n+\t\tSpreadsheetDocument document = SpreadsheetDocument.loadDocument(ResourceUtilities\n+\t\t\t.getTestResourceAsStream(TEST_FILE_NAME));\n+\t\tTable table = document.getSheetByIndex(0);\n+\t\tCell cell = table.getCellByPosition(0, 0);\n+\t\tColor color = cell.getCellBackgroundColor();\n+\t\tAssert.assertEquals(color, org.odftoolkit.odfdom.type.Color.WHITE);\n+\t}\n+}", "filename": "simple/src/test/java/org/odftoolkit/simple/SpreadsheetWithoutTableCellPropertiesTest.java"}, {"additions": 0, "raw_url": "https://github.com/apache/odftoolkit/raw/8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1/simple/src/test/resources/TestCellWithoutTableCellProperties.ods", "blob_url": "https://github.com/apache/odftoolkit/blob/8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1/simple/src/test/resources/TestCellWithoutTableCellProperties.ods", "sha": "46eb6a38dc928f26b9435367ce85cd1dc1df1b3d", "changes": 0, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/simple/src/test/resources/TestCellWithoutTableCellProperties.ods?ref=8ad91b2ee746d5e11e1c9d02ab316de53cc0e1f1", "filename": "simple/src/test/resources/TestCellWithoutTableCellProperties.ods"}], "repo": "odftoolkit"}, {"commit": "https://github.com/apache/odftoolkit/commit/5f4f9d64008176732cd675783c46f5244a5fc6ac", "parent": "https://github.com/apache/odftoolkit/commit/e84fa6f3cc430010f0322613940f684298a77d6a", "message": "test and fix for ODFTOOLKIT-325 NPE in cell.getTimeValue()\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/odf/trunk@1417744 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "odftoolkit_2", "file": [{"additions": 3, "raw_url": "https://github.com/apache/odftoolkit/raw/5f4f9d64008176732cd675783c46f5244a5fc6ac/odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTableCell.java", "blob_url": "https://github.com/apache/odftoolkit/blob/5f4f9d64008176732cd675783c46f5244a5fc6ac/odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTableCell.java", "sha": "8a4540436acc5c01048bdb12d8287a5171aa0b37", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTableCell.java?ref=5f4f9d64008176732cd675783c46f5244a5fc6ac", "patch": "@@ -883,6 +883,9 @@ public String getStringValue() {\n \tpublic Calendar getTimeValue() {\n \t\tif (getTypeAttr() == OfficeValueTypeAttribute.Value.TIME) {\n \t\t\tString timeStr = mCellElement.getOfficeTimeValueAttribute();\n+                        if (timeStr == null) {\n+                            return null;\n+                        }\n \t\t\tDate date = parseString(timeStr, DEFAULT_TIME_FORMAT);\n \t\t\tCalendar calender = Calendar.getInstance();\n \t\t\tcalender.setTime(date);", "filename": "odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTableCell.java"}, {"additions": 20, "raw_url": "https://github.com/apache/odftoolkit/raw/5f4f9d64008176732cd675783c46f5244a5fc6ac/odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableCellTest.java", "blob_url": "https://github.com/apache/odftoolkit/blob/5f4f9d64008176732cd675783c46f5244a5fc6ac/odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableCellTest.java", "sha": "d791ee4c508891505a386b7395854207fe0a684c", "changes": 22, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableCellTest.java?ref=5f4f9d64008176732cd675783c46f5244a5fc6ac", "patch": "@@ -32,12 +32,12 @@\n import junit.framework.Assert;\n \n import org.junit.Before;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.odftoolkit.odfdom.doc.OdfSpreadsheetDocument;\n import org.odftoolkit.odfdom.doc.OdfTextDocument;\n import org.odftoolkit.odfdom.dom.OdfContentDom;\n import org.odftoolkit.odfdom.dom.OdfStylesDom;\n+import org.odftoolkit.odfdom.dom.attribute.office.OfficeValueTypeAttribute;\n import org.odftoolkit.odfdom.dom.element.draw.DrawFrameElement;\n import org.odftoolkit.odfdom.dom.element.draw.DrawImageElement;\n import org.odftoolkit.odfdom.dom.element.style.StyleParagraphPropertiesElement;\n@@ -50,7 +50,6 @@\n import org.odftoolkit.odfdom.type.Color;\n import org.odftoolkit.odfdom.utils.ResourceUtilities;\n \n-@Ignore\n public class TableCellTest {\n \n \tfinal static String SAMPLE_SPREADSHEET = \"TestSpreadsheetTable\";\n@@ -1051,4 +1050,23 @@ public void testSetDefaultCellStyle() {\n \t\t\tAssert.fail();\n \t\t}\n \t}\n+        \n+        @Test\n+        public void testGetFromEmptyDateValue() throws Exception {\n+            OdfSpreadsheetDocument doc = OdfSpreadsheetDocument.newSpreadsheetDocument();\n+            OdfTable table = OdfTable.newTable(doc);\n+            OdfTableCell dateCell = table.appendRow().getCellByIndex(0);\n+            dateCell.setValueType(OfficeValueTypeAttribute.Value.DATE.toString());\n+            Assert.assertNull(dateCell.getDateValue());\n+        }\n+        \n+        @Test\n+        public void testGetFromEmptyTimeValue() throws Exception {\n+            OdfSpreadsheetDocument doc = OdfSpreadsheetDocument.newSpreadsheetDocument();\n+            OdfTable table = OdfTable.newTable(doc);\n+            OdfTableCell timeCell = table.appendRow().getCellByIndex(0);\n+            timeCell.setValueType(OfficeValueTypeAttribute.Value.TIME.toString());\n+            Assert.assertNull(timeCell.getTimeValue());\n+        }\n+        \n }", "filename": "odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableCellTest.java"}, {"additions": 3, "raw_url": "https://github.com/apache/odftoolkit/raw/5f4f9d64008176732cd675783c46f5244a5fc6ac/simple/src/main/java/org/odftoolkit/simple/table/Cell.java", "blob_url": "https://github.com/apache/odftoolkit/blob/5f4f9d64008176732cd675783c46f5244a5fc6ac/simple/src/main/java/org/odftoolkit/simple/table/Cell.java", "sha": "03ca6df1137448a059dd423437d158d49a594c64", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/simple/src/main/java/org/odftoolkit/simple/table/Cell.java?ref=5f4f9d64008176732cd675783c46f5244a5fc6ac", "patch": "@@ -1201,6 +1201,9 @@ public String getStringValue() {\n \tpublic Calendar getTimeValue() {\n \t\tif (getTypeAttr() == OfficeValueTypeAttribute.Value.TIME) {\n \t\t\tString timeStr = mCellElement.getOfficeTimeValueAttribute();\n+                        if (timeStr == null) {\n+                            return null;\n+                        }\n \t\t\tDate date = parseString(timeStr, DEFAULT_TIME_FORMAT);\n \t\t\tCalendar calender = Calendar.getInstance();\n \t\t\tcalender.setTime(date);", "filename": "simple/src/main/java/org/odftoolkit/simple/table/Cell.java"}, {"additions": 17, "raw_url": "https://github.com/apache/odftoolkit/raw/5f4f9d64008176732cd675783c46f5244a5fc6ac/simple/src/test/java/org/odftoolkit/simple/table/TableCellTest.java", "blob_url": "https://github.com/apache/odftoolkit/blob/5f4f9d64008176732cd675783c46f5244a5fc6ac/simple/src/test/java/org/odftoolkit/simple/table/TableCellTest.java", "sha": "9de43daa5a8a49a1335432135a017af3147760b4", "changes": 17, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/simple/src/test/java/org/odftoolkit/simple/table/TableCellTest.java?ref=5f4f9d64008176732cd675783c46f5244a5fc6ac", "patch": "@@ -35,6 +35,7 @@ Licensed to the Apache Software Foundation (ASF) under one\n import org.junit.Before;\n import org.junit.Test;\n import org.odftoolkit.odfdom.dom.OdfContentDom;\n+import org.odftoolkit.odfdom.dom.attribute.office.OfficeValueTypeAttribute;\n import org.odftoolkit.odfdom.dom.element.draw.DrawFrameElement;\n import org.odftoolkit.odfdom.dom.element.style.StyleParagraphPropertiesElement;\n import org.odftoolkit.odfdom.dom.style.OdfStyleFamily;\n@@ -581,6 +582,22 @@ public void testGetSetDateValue() {\n \t\tAssert.assertEquals(0, fcell.getDateValue().compareTo(expectedCalendar));\n \t}\n \n+        @Test\n+        public void testGetFromEmptyDateValue() throws Exception {\n+            Table table = odsdoc.getTableByName(\"Sheet1\");\n+            Cell cell = table.appendRow().getCellByIndex(1);\n+            cell.setValueType(OfficeValueTypeAttribute.Value.DATE.toString());\n+            Assert.assertNull(cell.getDateValue());\n+        }\n+        \n+        @Test\n+        public void testGetFromEmptyTimeValue() throws Exception {\n+            Table table = odsdoc.getTableByName(\"Sheet1\");\n+            Cell cell = table.appendRow().getCellByIndex(1);\n+            cell.setValueType(OfficeValueTypeAttribute.Value.TIME.toString());\n+            Assert.assertNull(cell.getTimeValue());\n+        }\n+\n \t@Test\n \tpublic void testGetSetStringValue() {\n \t\tint rowindex = 6, columnindex = 0;", "filename": "simple/src/test/java/org/odftoolkit/simple/table/TableCellTest.java"}], "repo": "odftoolkit"}, {"commit": "https://github.com/apache/odftoolkit/commit/1fa54c87585e0891d324dbb6c64c7cd6d1b94139", "parent": "https://github.com/apache/odftoolkit/commit/8e1c4428a9cc95bda04e4ee3a8816bd2dc01e5c7", "message": "changeset:   78:ee4724e88603\nuser:        Developer:Daisy;Reviewers:Devin,svanteschubert\ndate:        Wed Jul 14 00:31:14 2010 +0200\n#bug 212# Trying to access a spreadsheet cell without first inserting rows causes NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/odf/trunk@1168047 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "odftoolkit_3", "file": [{"additions": 12, "raw_url": "https://github.com/apache/odftoolkit/raw/1fa54c87585e0891d324dbb6c64c7cd6d1b94139/odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTable.java", "blob_url": "https://github.com/apache/odftoolkit/blob/1fa54c87585e0891d324dbb6c64c7cd6d1b94139/odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTable.java", "sha": "02e732d4dabc3a40e7875827fbc3a32e6be19459", "changes": 19, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTable.java?ref=1fa54c87585e0891d324dbb6c64c7cd6d1b94139", "patch": "@@ -896,7 +896,19 @@ public OdfTableColumn appendColumn() {\n \t\tif (positonElement.getParentNode() instanceof TableTableHeaderRowsElement) {\n \t\t\tpositonElement = (OdfElement) positonElement.getParentNode();\n \t\t}\n+\t\t\n+\t\t//Moved before column elements inserted\n+\t\t//insert cells firstly\n+\t\t//Or else, wrong column number will be gotten in updateCellRepository, which will cause a NPE.\n+\t\t//insertCellBefore()->splitRepeatedRows()->updateRowRepository()->updateCellRepository() \n+\t\tList<OdfTableRow> rowList = getRowList();\n+\t\tfor (int i = 0; i < rowList.size();) {\n+\t\t\tOdfTableRow row1 = rowList.get(i);\n+\t\t\trow1.insertCellBefore(row1.getCellByIndex(columnCount - 1), null);\n+\t\t\ti = i + row1.getRowsRepeatedNumber();\n+\t\t}\t\t\n \n+\t\t//insert columns secondly\n \t\tif (columnList.size() == 0) //no column, create a new column\n \t\t{\n \t\t\tOdfStyle columnStyle = mTableElement.getAutomaticStyles().newStyle(OdfStyleFamily.TableColumn);\n@@ -915,13 +927,6 @@ public OdfTableColumn appendColumn() {\n \t\t\tmTableElement.insertBefore(newColumn, positonElement);\n \t\t}\n \n-\t\t//insert cells\n-\t\tList<OdfTableRow> rowList = getRowList();\n-\t\tfor (int i = 0; i < rowList.size();) {\n-\t\t\tOdfTableRow row1 = rowList.get(i);\n-\t\t\trow1.insertCellBefore(row1.getCellByIndex(columnCount - 1), null);\n-\t\t\ti = i + row1.getRowsRepeatedNumber();\n-\t\t}\n \t\treturn getColumnInstance(newColumn, 0);\n \t}\n ", "filename": "odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTable.java"}, {"additions": 41, "raw_url": "https://github.com/apache/odftoolkit/raw/1fa54c87585e0891d324dbb6c64c7cd6d1b94139/odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableTest.java", "blob_url": "https://github.com/apache/odftoolkit/blob/1fa54c87585e0891d324dbb6c64c7cd6d1b94139/odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableTest.java", "sha": "d5363ee6175b875340aa6993a68558a74156ced5", "changes": 66, "status": "modified", "deletions": 25, "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableTest.java?ref=1fa54c87585e0891d324dbb6c64c7cd6d1b94139", "patch": "@@ -24,6 +24,8 @@\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n \n import junit.framework.Assert;\n import org.w3c.dom.Node;\n@@ -53,8 +55,8 @@ public void setUp() {\n \t\ttry {\n \t\t\tmOdsDoc = (OdfSpreadsheetDocument) OdfSpreadsheetDocument.loadDocument(ResourceUtilities.getTestResourceAsStream(mOdsTestFileName + \".ods\"));\n \t\t} catch (Exception e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n+\t\t\tAssert.fail(e.getMessage());\n \t\t}\n \t}\n \n@@ -63,8 +65,8 @@ private OdfTextDocument loadODTDocument(String name) {\n \t\t\tOdfTextDocument odtdoc = (OdfTextDocument) OdfTextDocument.loadDocument(ResourceUtilities.getTestResourceAsStream(name));\n \t\t\treturn odtdoc;\n \t\t} catch (Exception e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n+\t\t\tAssert.fail(e.getMessage());\n \t\t}\n \t\treturn null;\n \t}\n@@ -85,7 +87,7 @@ public void testNewTable() {\n \n \t\t\tdocument.save(ResourceUtilities.newTestOutputFile(\"CreateTableCase.odt\"));\n \t\t} catch (Exception e) {\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n \t\t\tAssert.fail(e.getMessage());\n \t\t}\n \t}\n@@ -179,7 +181,7 @@ public void testNewTableWithArrayData() {\n \t\t\tAssert.assertEquals(rowCount + 1, table1.getRowCount());\n \t\t\tAssert.assertEquals(columnCount + 1, table1.getColumnCount());\n \t\t} catch (Exception e) {\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n \t\t\tAssert.fail(e.getMessage());\n \t\t}\n \t}\n@@ -203,7 +205,7 @@ public void testNewTableWithoutHeaderColumn() {\n \t\t\t\t}\n \t\t\t}\n \t\t} catch (Exception e) {\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n \t\t\tAssert.fail(e.getMessage());\n \t\t}\n \t}\n@@ -319,8 +321,8 @@ public void testDeleteTable() {\n \t\t\ttableList = mOdtDoc.getTableList();\n \t\t\tAssert.assertEquals(count - 1, tableList.size());\n \t\t} catch (Exception e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n+\t\t\tAssert.fail(e.getMessage());\n \t\t}\n \t}\n \n@@ -337,8 +339,8 @@ public void testSetGetWidth() {\n \t\t\tdocument.save(ResourceUtilities.newTestOutputFile(\"TestSetGetWidth.odt\"));\n \n \t\t} catch (Exception e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n+\t\t\tAssert.fail(e.getMessage());\n \t\t}\n \t}\n \n@@ -546,8 +548,7 @@ public void testGetColumnList() {\n \t\t\tAssert.assertEquals(\"\", columns.get(0).getCellByIndex(0).getStringValue());\n \n \t\t} catch (Exception e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n \t\t\tAssert.fail(e.getMessage());\n \t\t}\n \n@@ -595,8 +596,7 @@ public void testGetRowList() {\n \n \t\t\tAssert.assertEquals(\"\", rows.get(0).getCellByIndex(0).getStringValue());\n \t\t} catch (Exception e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n \t\t\tAssert.fail(e.getMessage());\n \t\t}\n \t}\n@@ -800,7 +800,7 @@ public void testGetCellByPosition() {\n \t\tcell = table.getCellByPosition(\"K4\");\n \t\tAssert.assertNotNull(cell);\n \t\tcell.setBooleanValue(true);\n-\t\tAssert.assertEquals(new Boolean(true), cell.getBooleanValue());\n+\t\tAssert.assertEquals(Boolean.TRUE, cell.getBooleanValue());\n \t\tcell = table.getCellByPosition(\"D10\");\n \t\tAssert.assertNotNull(cell);\n \t\tCalendar cal = Calendar.getInstance();\n@@ -816,6 +816,24 @@ public void testGetCellByPosition() {\n \t\tAssert.assertEquals(\"stringM15\", cell.getStringValue());\n \t}\n \n+\t@Test\n+\tpublic void testGetCellWithAutoExtend()\n+\t{\n+\t\tOdfSpreadsheetDocument ods;\n+\t\ttry {\n+\t\t\tods = OdfSpreadsheetDocument.newSpreadsheetDocument();\n+\t\t\tOdfTable tbl = ods.getTableByName(\"Sheet1\");\n+\t\t\ttbl.setTableName(\"Tests\");\n+\t\t\tOdfTableCell cell = tbl.getCellByPosition(5, 5);\n+\t\t\tAssert.assertNotNull(cell);\n+\t\t\tAssert.assertEquals(6, tbl.getRowCount());\n+\t\t\tAssert.assertEquals(6, tbl.getColumnCount());\n+\t\t} catch (Exception e) {\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n+\t\t\tAssert.fail(e.getMessage());\n+\t\t}\n+\t}\n+\t\n \t@Test\n \tpublic void testGetCellRangeByPosition() {\n \t\ttestNewTable();\n@@ -905,8 +923,8 @@ public void testAppendRow() {\n \t\t\tsaveodt(mOdtTestFileName + \"Out.odt\");\n \n \t\t} catch (Exception e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n+\t\t\tAssert.fail(e.getMessage());\n \t\t}\n \t}\n \n@@ -984,8 +1002,7 @@ public void testGetCellAt() {\n \t\t\t\tAssert.assertEquals(1, value);\n \t\t\t}\n \t\t} catch (Exception e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n \t\t}\n \t}\n \n@@ -994,25 +1011,24 @@ private void testAppendRow(TableTableElement table) {\n \t\tint count = fTable.getRowCount();\n \t\tfTable.appendRow();\n \t\tint newcount = fTable.getRowCount();\n-\n \t\tAssert.assertEquals(count + 1, newcount);\n \t}\n \n \tprivate void saveods() {\n \t\ttry {\n \t\t\tmOdsDoc.save(ResourceUtilities.newTestOutputFile(mOdsTestFileName + \"Output.ods\"));\n \t\t} catch (Exception e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n+\t\t\tAssert.fail(e.getMessage());\n \t\t}\n \t}\n \n \tprivate void saveodt(String filename) {\n \t\ttry {\n \t\t\tmOdtDoc.save(ResourceUtilities.newTestOutputFile(filename));\n \t\t} catch (Exception e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t\tLogger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, e);\n+\t\t\tAssert.fail(e.getMessage());\n \t\t}\n \t}\n }", "filename": "odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableTest.java"}], "repo": "odftoolkit"}, {"commit": "https://github.com/apache/odftoolkit/commit/2f89b53a666460ecbf4df6901671a84900531ae9", "parent": "https://github.com/apache/odftoolkit/commit/82c0de5d031cc0456722e89fff5d838a4938e3a4", "message": "changeset:   48:ca14534c6e69\nuser:        Developer:Devin; Reviewer:WeiHua, svanteschubert\ndate:        Wed May 26 19:51:29 2010 +0200\n#bug157# Calling OdfTableCell.setFormatString('yyyy-MM-dd') throws NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/odf/trunk@1168019 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "odftoolkit_4", "file": [{"additions": 27, "raw_url": "https://github.com/apache/odftoolkit/raw/2f89b53a666460ecbf4df6901671a84900531ae9/odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTableCell.java", "blob_url": "https://github.com/apache/odftoolkit/blob/2f89b53a666460ecbf4df6901671a84900531ae9/odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTableCell.java", "sha": "c7a5fa76f4ecd484b112f80fed58762e2fcb6ed4", "changes": 31, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTableCell.java?ref=2f89b53a666460ecbf4df6901671a84900531ae9", "patch": "@@ -39,6 +39,7 @@\n import org.odftoolkit.odfdom.doc.number.OdfNumberPercentageStyle;\r\n import org.odftoolkit.odfdom.doc.number.OdfNumberStyle;\r\n import org.odftoolkit.odfdom.doc.number.OdfNumberText;\r\n+import org.odftoolkit.odfdom.doc.number.OdfNumberTimeStyle;\r\n import org.odftoolkit.odfdom.doc.office.OdfOfficeAutomaticStyles;\r\n import org.odftoolkit.odfdom.doc.style.OdfStyle;\r\n import org.odftoolkit.odfdom.doc.text.OdfTextParagraph;\r\n@@ -820,7 +821,7 @@ public String getStringValue() {\n \t */\r\n \tpublic Calendar getTimeValue() {\r\n \t\tif (getTypeAttr() == OfficeValueTypeAttribute.Value.TIME) {\r\n-\t\t\tString timeStr = mCellElement.getOfficeDateValueAttribute();\r\n+\t\t\tString timeStr = mCellElement.getOfficeTimeValueAttribute();\r\n \t\t\tDate date = parseString(timeStr, msTime_Format);\r\n \t\t\tCalendar calender = Calendar.getInstance();\r\n \t\t\tcalender.setTime(date);\r\n@@ -834,7 +835,7 @@ public Calendar getTimeValue() {\n \t}\r\n \r\n \t/**\r\n-\t * Set the cell value as a date\r\n+\t * Set the cell value as a time\r\n \t * and set the value type to be date too.\r\n \t * \r\n \t * @param date\tthe value of calendar type\r\n@@ -844,7 +845,7 @@ public void setTimeValue(Calendar date) {\n \t\tsetTypeAttr(OfficeValueTypeAttribute.Value.TIME);\r\n \t\tSimpleDateFormat simpleFormat = new SimpleDateFormat(msTime_Format);\r\n \t\tString svalue = simpleFormat.format(date.getTime());\r\n-\t\tmCellElement.setOfficeDateValueAttribute(svalue);\r\n+\t\tmCellElement.setOfficeTimeValueAttribute(svalue);\r\n \t\tsetDisplayText(svalue);\r\n \t}\r\n \r\n@@ -1148,6 +1149,18 @@ public void setFormatString(String formatStr) {\n \t\t\t\tCalendar date = getDateValue();\r\n \t\t\t\tsetDisplayText((new SimpleDateFormat(formatStr)).format(date.getTime()));\r\n \t\t\t}\r\n+\t\t} else if (typeValue == OfficeValueTypeAttribute.Value.TIME) {\r\n+\t\t\tOdfNumberTimeStyle timeStyle = new OdfNumberTimeStyle(\r\n+\t\t\t\t\t(OdfFileDom) mCellElement.getOwnerDocument(), formatStr,\r\n+\t\t\t\t\tgetUniqueDateStyleName());\r\n+\t\t\tmCellElement.getAutomaticStyles().appendChild(timeStyle);\r\n+\t\t\tsetDataDisplayStyleName(timeStyle.getStyleNameAttribute());\r\n+\t\t\tString timeStr = mCellElement.getOfficeTimeValueAttribute();\r\n+\t\t\tif (timeStr != null) {\r\n+\t\t\t\tCalendar time = getTimeValue();\r\n+\t\t\t\tsetDisplayText((new SimpleDateFormat(formatStr)).format(time\r\n+\t\t\t\t\t\t.getTime()));\r\n+\t\t\t} \r\n \t\t} else if (typeValue == OfficeValueTypeAttribute.Value.PERCENTAGE) {\r\n \t\t\tOdfNumberPercentageStyle dateStyle = new OdfNumberPercentageStyle(\r\n \t\t\t\t\t(OdfFileDom) mCellElement.getOwnerDocument(),\r\n@@ -1191,10 +1204,20 @@ private OdfStyle getCellStyleElement() {\n \t\t\tstyleElement = ((OdfFileDom) mCellElement.getOwnerDocument()).getOdfDocument().getDocumentStyles().getStyle(styleName,\r\n \t\t\t\t\tOdfStyleFamily.TableCell);\r\n \t\t}\r\n-\r\n+\t\t\r\n \t\tif (styleElement == null) {\r\n \t\t\tstyleElement = mCellElement.getDocumentStyle();\r\n \t\t}\r\n+\r\n+\t\tif (styleElement == null) {\r\n+\t\t\tOdfStyle newStyle = mCellElement.getAutomaticStyles().newStyle(\r\n+\t\t\t\t\tOdfStyleFamily.TableCell);\r\n+\t\t\tString newname = newStyle.getStyleNameAttribute();\r\n+\t\t\tmCellElement.setStyleName(newname);\r\n+\t\t\tnewStyle.addStyleUser(mCellElement);\r\n+\t\t\treturn newStyle;\r\n+\t\t}\r\n+\r\n \t\treturn styleElement;\r\n \t}\r\n \r", "filename": "odfdom/src/main/java/org/odftoolkit/odfdom/doc/table/OdfTableCell.java"}, {"additions": 19, "raw_url": "https://github.com/apache/odftoolkit/raw/2f89b53a666460ecbf4df6901671a84900531ae9/odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableCellTest.java", "blob_url": "https://github.com/apache/odftoolkit/blob/2f89b53a666460ecbf4df6901671a84900531ae9/odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableCellTest.java", "sha": "1a354332c3e84c6b14794a1d53e0eb5a9a26a97e", "changes": 19, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/odftoolkit/contents/odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableCellTest.java?ref=2f89b53a666460ecbf4df6901671a84900531ae9", "patch": "@@ -191,6 +191,21 @@ public void testSetGetFormat()\n     \tpcell.setFormatString(\"#0.00%\");\r\n     \tdisplayvalue = pcell.getDisplayText();\r\n     \tAssert.assertEquals(\"200\"+(new DecimalFormatSymbols()).getDecimalSeparator()+\"00%\", displayvalue);\r\n+    \t// reproduce bug 157\r\n+    \ttry {\r\n+    \t\tOdfTableRow tablerow = table.getRowByIndex(6);\r\n+    \t\tOdfTableCell cell = tablerow.getCellByIndex(3);\r\n+    \t\tCalendar currenttime = Calendar.getInstance();\r\n+    \t\tcell.setDateValue(currenttime);\r\n+    \t\tcell.setFormatString(\"yyyy-MM-dd\");\r\n+    \t\ttablerow = table.getRowByIndex(7);\r\n+    \t\tcell = tablerow.getCellByIndex(3);\r\n+    \t\tcell.setTimeValue(currenttime);\r\n+    \t\tcell.setFormatString(\"HH:mm:ss\");\r\n+    \t} catch (Exception e) {\r\n+    \t\te.printStackTrace();\r\n+    \t\tAssert.fail(e.getMessage());\r\n+    \t}\r\n     \tsaveods();\r\n     \t\r\n \t}\r\n@@ -330,6 +345,10 @@ public void testGetSetTimeValue() {\n             String  expectedString= simpleFormat.format(expected.getTime());\r\n             String  targetString= simpleFormat.format(fcell.getTimeValue().getTime());\r\n \t    Assert.assertEquals(expectedString,targetString);\r\n+\t    // reproduce bug156\r\n+\t    String timeValueAttribute = fcell.mCellElement.getOfficeTimeValueAttribute();\r\n+\t    Assert.assertNotNull(timeValueAttribute);\r\n+\t    Assert.assertEquals(expectedString, timeValueAttribute);\r\n \t}\r\n \t\r\n \t@Test\r", "filename": "odfdom/src/test/java/org/odftoolkit/odfdom/doc/table/TableCellTest.java"}], "repo": "odftoolkit"}]
