{
    "ws-axiom_24b680b": {
        "bug_id": "ws-axiom_24b680b",
        "commit": "https://github.com/apache/ws-axiom/commit/24b680b32ff99e6ced264fb28384147134faf025",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/ws-axiom/blob/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/util/OMSerializerUtil.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/util/OMSerializerUtil.java?ref=24b680b32ff99e6ced264fb28384147134faf025",
                "deletions": 0,
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/om/impl/util/OMSerializerUtil.java",
                "patch": "@@ -23,6 +23,7 @@\n import org.apache.axiom.om.OMElement;\n import org.apache.axiom.om.OMNamespace;\n import org.apache.axiom.om.OMNode;\n+import org.apache.axiom.om.OMConstants;\n import org.apache.axiom.om.impl.serialize.StreamingOMSerializer;\n \n import javax.xml.namespace.NamespaceContext;\n@@ -379,6 +380,9 @@ public static void serializeStartpart(OMElement element, String localName,\n                 }\n             }\n             if (namespace != null) {\n+                if(prefix == null && OMConstants.XMLNS_URI.equals(namespace)){\n+                    prefix = OMConstants.XMLNS_PREFIX;\n+                }\n                 // Qualified attribute\n                 writer.writeAttribute(prefix, namespace,\n                                       attr.getLocalName(),",
                "raw_url": "https://github.com/apache/ws-axiom/raw/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/util/OMSerializerUtil.java",
                "sha": "3a00cec6fc371f5057d122db8deb5e43e7ab3e5b",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/ws-axiom/blob/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-api/src/main/java/org/apache/axiom/soap/impl/builder/SOAPBuilderHelper.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/soap/impl/builder/SOAPBuilderHelper.java?ref=24b680b32ff99e6ced264fb28384147134faf025",
                "deletions": 4,
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/soap/impl/builder/SOAPBuilderHelper.java",
                "patch": "@@ -43,8 +43,12 @@ public abstract OMElement handleEvent(XMLStreamReader parser,\n     protected void processNamespaceData(OMElement node, boolean checkSOAPNamespace) {\r\n         int namespaceCount = parser.getNamespaceCount();\r\n         for (int i = 0; i < namespaceCount; i++) {\r\n-            node.declareNamespace(parser.getNamespaceURI(i),\r\n-                                  parser.getNamespacePrefix(i));\r\n+            String nsp = parser.getNamespaceURI(i);\r\n+            String prefix = parser.getNamespacePrefix(i);\r\n+            if(nsp != null && prefix != null) {\r\n+                node.declareNamespace(nsp,\r\n+                        prefix);\r\n+            }\r\n         }\r\n \r\n         // set the own namespace\r\n@@ -62,8 +66,6 @@ protected void processNamespaceData(OMElement node, boolean checkSOAPNamespace)\n                 namespace = node.findNamespace(namespaceURI, prefix);\r\n             }\r\n             node.setNamespace(namespace);\r\n-        } else {\r\n-\r\n         }\r\n \r\n         // TODO we got to have this to make sure OM reject mesagess that are not name space qualified\r",
                "raw_url": "https://github.com/apache/ws-axiom/raw/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-api/src/main/java/org/apache/axiom/soap/impl/builder/SOAPBuilderHelper.java",
                "sha": "b163817f0c456fa983fde8ad87877843dd6306a0",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/ws-axiom/blob/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-tests/src/test/java/org/apache/axiom/om/AbstractTestCase.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-tests/src/test/java/org/apache/axiom/om/AbstractTestCase.java?ref=24b680b32ff99e6ced264fb28384147134faf025",
                "deletions": 1,
                "filename": "modules/axiom-tests/src/test/java/org/apache/axiom/om/AbstractTestCase.java",
                "patch": "@@ -23,9 +23,11 @@\n \r\n import java.io.File;\r\n \r\n+import org.custommonkey.xmlunit.XMLTestCase;\r\n+\r\n /** Abstract base class for test cases. */\r\n public abstract class AbstractTestCase\r\n-        extends TestCase {\r\n+        extends XMLTestCase {\r\n     protected String testDir = \"test\" + File.separator;\r\n     protected String sampleDir = \"samples\" + File.separator;\r\n     protected String outDir = \"target\" + File.separator + \"generated\" +\r",
                "raw_url": "https://github.com/apache/ws-axiom/raw/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-tests/src/test/java/org/apache/axiom/om/AbstractTestCase.java",
                "sha": "aba813929de4d1edf01de61a9780a9af6bb6eb14",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ws-axiom/blob/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/llom/OMOutputTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/llom/OMOutputTest.java?ref=24b680b32ff99e6ced264fb28384147134faf025",
                "deletions": 1,
                "filename": "modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/llom/OMOutputTest.java",
                "patch": "@@ -73,7 +73,7 @@ protected void setUp() throws Exception {\n         OMElement data = new OMElementImpl(\"data\", dataName, fac);\r\n \r\n         OMNamespaceImpl mime = new OMNamespaceImpl(\r\n-                \"http://www.w3.org/2003/06/xmlmime\", \"m\");\r\n+                \"http://www.w3.org/2003/06/xmlmime\", \"mime\");\r\n \r\n         OMElement text = new OMElementImpl(\"name\", dataName, fac);\r\n         OMAttribute cType1 = new OMAttributeImpl(\"contentType\", mime,\r",
                "raw_url": "https://github.com/apache/ws-axiom/raw/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/llom/OMOutputTest.java",
                "sha": "be3cf4ca37ac9de81763622d934c117ff4326d7e",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/ws-axiom/blob/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/llom/OMSourcedElementTest.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/llom/OMSourcedElementTest.java?ref=24b680b32ff99e6ced264fb28384147134faf025",
                "deletions": 8,
                "filename": "modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/llom/OMSourcedElementTest.java",
                "patch": "@@ -139,12 +139,12 @@ public void testSerializeToStream() throws Exception {\n         ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n         element.serialize(bos);\r\n         String newText = new String(bos.toByteArray());\r\n-        assertEquals(\"Serialized text error\", testDocument, newText);\r\n+        assertXMLEqual(\"Serialized text error\", testDocument, newText);\r\n         assertTrue(\"Element not expanded when serializing\", element.isExpanded());\r\n \r\n         bos = new ByteArrayOutputStream();\r\n         element.serialize(bos);\r\n-        assertEquals(\"Serialized text error\", testDocument,\r\n+        assertXMLEqual(\"Serialized text error\", testDocument,\r\n                      new String(bos.toByteArray()));\r\n         assertTrue(\"Element not expanded when serializing\", element.isExpanded());\r\n     }\r\n@@ -171,13 +171,13 @@ public void testSerializeToWriter() throws Exception {\n         StringWriter writer = new StringWriter();\r\n         element.serialize(writer);\r\n         String result = writer.toString();\r\n-        assertEquals(\"Serialized text error\", testDocument, result);\r\n+        assertXMLEqual(\"Serialized text error\", testDocument, result);\r\n         assertTrue(\"Element not expanded when serializing\", element.isExpanded());\r\n \r\n         writer = new StringWriter();\r\n         element.serialize(writer);\r\n         result = writer.toString();\r\n-        assertEquals(\"Serialized text error\", testDocument, result);\r\n+        assertXMLEqual(\"Serialized text error\", testDocument, result);\r\n         assertTrue(\"Element not expanded when serializing\", element.isExpanded());\r\n     }\r\n \r\n@@ -190,7 +190,7 @@ public void testSerializeAndConsumeToWriter() throws Exception {\n         StringWriter writer = new StringWriter();\r\n         element.serializeAndConsume(writer);\r\n         String result = writer.toString();\r\n-        assertEquals(\"Serialized text error\", testDocument, result);\r\n+        assertXMLEqual(\"Serialized text error\", testDocument, result);\r\n         assertFalse(\"Element expansion when serializing\", element.isExpanded());\r\n     }\r\n \r\n@@ -204,14 +204,14 @@ public void testSerializeToXMLWriter() throws Exception {\n         XMLStreamWriter xmlwriter = XMLOutputFactory.newInstance().createXMLStreamWriter(writer);\r\n         element.serialize(writer);\r\n         xmlwriter.flush();\r\n-        assertEquals(\"Serialized text error\", testDocument, writer.toString());\r\n+        assertXMLEqual(\"Serialized text error\", testDocument, writer.toString());\r\n         assertTrue(\"Element not expanded when serializing\", element.isExpanded());\r\n \r\n         writer = new StringWriter();\r\n         xmlwriter = XMLOutputFactory.newInstance().createXMLStreamWriter(writer);\r\n         element.serialize(writer);\r\n         xmlwriter.flush();\r\n-        assertEquals(\"Serialized text error\", testDocument, writer.toString());\r\n+        assertXMLEqual(\"Serialized text error\", testDocument, writer.toString());\r\n         assertTrue(\"Element not expanded when serializing\", element.isExpanded());\r\n     }\r\n \r\n@@ -225,7 +225,7 @@ public void testSerializeAndConsumeToXMLWriter() throws Exception {\n         XMLStreamWriter xmlwriter = XMLOutputFactory.newInstance().createXMLStreamWriter(writer);\r\n         element.serializeAndConsume(writer);\r\n         xmlwriter.flush();\r\n-        assertEquals(\"Serialized text error\", testDocument, writer.toString());\r\n+        assertXMLEqual(\"Serialized text error\", testDocument, writer.toString());\r\n         assertFalse(\"Element expansion when serializing\", element.isExpanded());\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/ws-axiom/raw/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/llom/OMSourcedElementTest.java",
                "sha": "8d45201a20e537731136151f3afc47788c0e33fe",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/ws-axiom/blob/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-tests/src/test/java/org/apache/axiom/soap/SOAP11FaultImplConversionTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-tests/src/test/java/org/apache/axiom/soap/SOAP11FaultImplConversionTest.java?ref=24b680b32ff99e6ced264fb28384147134faf025",
                "deletions": 1,
                "filename": "modules/axiom-tests/src/test/java/org/apache/axiom/soap/SOAP11FaultImplConversionTest.java",
                "patch": "@@ -35,7 +35,9 @@\n     public void testConversion() {\n         try {\n             InputStream is = new FileInputStream(soap11FaulXmlPath);\n-            XMLStreamReader reader = XMLInputFactory.newInstance().createXMLStreamReader(is);\n+            XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();\n+            xmlInputFactory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE, Boolean.TRUE) ;\n+            XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(is);\n \n             SOAPEnvelope env = new StAXSOAPModelBuilder(reader, null).getSOAPEnvelope();\n ",
                "raw_url": "https://github.com/apache/ws-axiom/raw/24b680b32ff99e6ced264fb28384147134faf025/modules/axiom-tests/src/test/java/org/apache/axiom/soap/SOAP11FaultImplConversionTest.java",
                "sha": "350cd9b4a58944da065e8d5cc93eed6505895219",
                "status": "modified"
            }
        ],
        "message": "- Prevent NPE in SOAPBuilderHelper\n- Special case for XMLNS_PREFIX since sjsxp does not seem to turn the correct prefix for xml uri in OMSerializerUtil\n- Check for xml being equal instead of explicit byte-by-byte in OMSourcedElementTest\n- add a new prefix in OMOutputTest since the same prefix was being used in 2 spots.",
        "parent": "https://github.com/apache/ws-axiom/commit/89d731e097a2cbc22d2efe1acc6431ab7fb72ffa",
        "patched_files": [
            "OMSerializerUtil.java",
            "OMSourcedElement.java",
            "AbstractTestCase.java",
            "SOAPBuilderHelper.java"
        ],
        "repo": "ws-axiom",
        "unit_tests": [
            "OMSourcedElementTest.java",
            "SOAP11FaultImplConversionTest.java",
            "OMOutputTest.java"
        ]
    },
    "ws-axiom_2599637": {
        "bug_id": "ws-axiom_2599637",
        "commit": "https://github.com/apache/ws-axiom/commit/2599637bb2555d78197546772192a3a0b04bd125",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ws-axiom/blob/2599637bb2555d78197546772192a3a0b04bd125/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/DOMTestSuiteBuilder.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/DOMTestSuiteBuilder.java?ref=2599637bb2555d78197546772192a3a0b04bd125",
                "deletions": 0,
                "filename": "modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/DOMTestSuiteBuilder.java",
                "patch": "@@ -65,6 +65,7 @@ protected void addTests() {\n         addTest(new org.apache.axiom.ts.dom.document.TestGetDomConfigDefaults(dbf));\n         addTest(new org.apache.axiom.ts.dom.document.TestGetOwnerDocument(dbf));\n         addTest(new org.apache.axiom.ts.dom.document.TestLookupNamespaceURI(dbf));\n+        addTest(new org.apache.axiom.ts.dom.document.TestLookupNamespaceURIWithEmptyDocument(dbf));\n         addTest(new org.apache.axiom.ts.dom.document.TestNormalizeDocumentNamespace(dbf));\n         addTest(new org.apache.axiom.ts.dom.document.TestTransformerWithIdentityStylesheet(dbf, org.apache.xalan.processor.TransformerFactoryImpl.class));\n         addTest(new org.apache.axiom.ts.dom.document.TestTransformerWithIdentityStylesheet(dbf, net.sf.saxon.TransformerFactoryImpl.class));",
                "raw_url": "https://github.com/apache/ws-axiom/raw/2599637bb2555d78197546772192a3a0b04bd125/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/DOMTestSuiteBuilder.java",
                "sha": "329973a9a4e3831368a1aeb94e1f28ae18f95ac8",
                "status": "modified"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/ws-axiom/blob/2599637bb2555d78197546772192a3a0b04bd125/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/document/TestLookupNamespaceURIWithEmptyDocument.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/document/TestLookupNamespaceURIWithEmptyDocument.java?ref=2599637bb2555d78197546772192a3a0b04bd125",
                "deletions": 0,
                "filename": "modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/document/TestLookupNamespaceURIWithEmptyDocument.java",
                "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.axiom.ts.dom.document;\n+\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import org.apache.axiom.ts.dom.DOMTestCase;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+\n+/**\n+ * Tests the behavior of {@link Node#lookupNamespaceURI(String)} on an empty {@link Document}.\n+ */\n+public class TestLookupNamespaceURIWithEmptyDocument extends DOMTestCase {\n+    public TestLookupNamespaceURIWithEmptyDocument(DocumentBuilderFactory dbf) {\n+        super(dbf);\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        Document document = dbf.newDocumentBuilder().newDocument();\n+        assertNull(document.lookupNamespaceURI(\"p\"));\n+    }\n+}",
                "raw_url": "https://github.com/apache/ws-axiom/raw/2599637bb2555d78197546772192a3a0b04bd125/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/document/TestLookupNamespaceURIWithEmptyDocument.java",
                "sha": "40166970f3d6ddeecac262b54ddbff2ff777fc99",
                "status": "added"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/ws-axiom/blob/2599637bb2555d78197546772192a3a0b04bd125/modules/axiom-dom-testsuite/src/test/java/org/apache/axiom/ts/dom/XercesTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom-testsuite/src/test/java/org/apache/axiom/ts/dom/XercesTest.java?ref=2599637bb2555d78197546772192a3a0b04bd125",
                "deletions": 0,
                "filename": "modules/axiom-dom-testsuite/src/test/java/org/apache/axiom/ts/dom/XercesTest.java",
                "patch": "@@ -23,13 +23,18 @@\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.apache.axiom.ts.dom.document.TestLookupNamespaceURIWithEmptyDocument;\n import org.apache.xerces.jaxp.DocumentBuilderFactoryImpl;\n \n public class XercesTest extends TestCase {\n     public static TestSuite suite() {\n         DocumentBuilderFactory dbf = new DocumentBuilderFactoryImpl();\n         dbf.setNamespaceAware(true);\n         DOMTestSuiteBuilder builder = new DOMTestSuiteBuilder(dbf);\n+        \n+        // XERCESJ-1582\n+        builder.exclude(TestLookupNamespaceURIWithEmptyDocument.class);\n+        \n         return builder.build();\n     }\n }",
                "raw_url": "https://github.com/apache/ws-axiom/raw/2599637bb2555d78197546772192a3a0b04bd125/modules/axiom-dom-testsuite/src/test/java/org/apache/axiom/ts/dom/XercesTest.java",
                "sha": "348d85c2f66bf3ae07a8b047af1b30c1f9728ff3",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/ws-axiom/blob/2599637bb2555d78197546772192a3a0b04bd125/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/NodeImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/NodeImpl.java?ref=2599637bb2555d78197546772192a3a0b04bd125",
                "deletions": 2,
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/NodeImpl.java",
                "patch": "@@ -34,6 +34,7 @@\n import org.apache.axiom.soap.impl.builder.StAXSOAPModelBuilder;\n import org.w3c.dom.DOMException;\n import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n import org.w3c.dom.NamedNodeMap;\n import org.w3c.dom.Node;\n import org.w3c.dom.UserDataHandler;\n@@ -297,8 +298,9 @@ public String lookupNamespaceURI(String specifiedPrefix) {\n \n         }\n         case Node.DOCUMENT_NODE: {\n-            return ((NodeImpl) ((Document) this).getDocumentElement())\n-                    .lookupNamespaceURI(specifiedPrefix);\n+            Element documentElement = ((Document) this).getDocumentElement();\n+            return documentElement == null ? null\n+                    : documentElement.lookupNamespaceURI(specifiedPrefix);\n         }\n         case Node.ENTITY_NODE:\n         case Node.NOTATION_NODE:",
                "raw_url": "https://github.com/apache/ws-axiom/raw/2599637bb2555d78197546772192a3a0b04bd125/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/NodeImpl.java",
                "sha": "56590eedb0296df9cc8dc05935e6a12e994d0972",
                "status": "modified"
            }
        ],
        "message": "AXIOM-423: Fixed a NullPointerException in the lookupNamespaceURI implementation.",
        "parent": "https://github.com/apache/ws-axiom/commit/5854cbc4bbb84a7473cc5be293d4417e09d28f6f",
        "patched_files": [
            "NodeImpl.java",
            "DOMTestSuiteBuilder.java"
        ],
        "repo": "ws-axiom",
        "unit_tests": [
            "XercesTest.java",
            "TestLookupNamespaceURIWithEmptyDocument.java"
        ]
    },
    "ws-axiom_2bd1eb8": {
        "bug_id": "ws-axiom_2bd1eb8",
        "commit": "https://github.com/apache/ws-axiom/commit/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ws-axiom/blob/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/AttrImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/AttrImpl.java?ref=2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1",
                "deletions": 1,
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/AttrImpl.java",
                "patch": "@@ -149,7 +149,7 @@ public String getValue() {\n     // /\n     public String getName() {\n         return (this.namespace == null) ? this.attrName\n-                : OMConstants.XMLNS_NS_PREFIX + \":\" + this.attrName;\n+                : (OMConstants.XMLNS_NS_PREFIX.equals(this.attrName) ? this.attrName : OMConstants.XMLNS_NS_PREFIX + \":\" + this.attrName);\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/ws-axiom/raw/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/AttrImpl.java",
                "sha": "05358c865d42a1944d9d53ebfacc8e32cca0f790",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ws-axiom/blob/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ChildNode.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ChildNode.java?ref=2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1",
                "deletions": 1,
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ChildNode.java",
                "patch": "@@ -42,7 +42,7 @@ protected ChildNode(OMFactory factory) {\n     }\n \n     public OMNode getNextOMSibling() throws OMException {\n-        while ((nextSibling == null) && !this.parentNode.done) {\n+        while (nextSibling == null && this.parentNode != null && !this.parentNode.done) {\n             this.parentNode.buildNext();\n         }\n         return nextSibling;",
                "raw_url": "https://github.com/apache/ws-axiom/raw/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ChildNode.java",
                "sha": "bffb5cfabfcd8032ac3f5241df0a2e90d57b9e64",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ws-axiom/blob/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/DocumentFragmentimpl.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/DocumentFragmentimpl.java?ref=2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1",
                "deletions": 0,
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/DocumentFragmentimpl.java",
                "patch": "@@ -31,6 +31,7 @@\n      */\n     public DocumentFragmentimpl(DocumentImpl ownerDocument, OMFactory factory) {\n         super(ownerDocument, factory);\n+        this.done = true;\n     }\n \n     /*",
                "raw_url": "https://github.com/apache/ws-axiom/raw/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/DocumentFragmentimpl.java",
                "sha": "fc4cab7f6be69721a98daf9c3453adce986af826",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/ws-axiom/blob/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ParentNode.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ParentNode.java?ref=2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1",
                "deletions": 7,
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ParentNode.java",
                "patch": "@@ -296,14 +296,18 @@ public Node replaceChild(Node newChild, Node oldChild) throws DOMException {\n         ChildNode newDomChild = (ChildNode) newChild;\n         ChildNode oldDomChild = (ChildNode) oldChild;\n \n+        if(newChild == null) {\n+            return this.removeChild(oldChild);\n+        }\n+        \n         if (this == newChild || !isAncestor(newChild)) {\n             throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,\n                     DOMMessageFormatter.formatMessage(\n                             DOMMessageFormatter.DOM_DOMAIN,\n                             \"HIERARCHY_REQUEST_ERR\", null));\n         }\n \n-        if (!this.ownerNode.equals(newDomChild.ownerNode)) {\n+        if (newDomChild != null && !this.ownerNode.equals(newDomChild.ownerNode)) {\n             throw new DOMException(DOMException.WRONG_DOCUMENT_ERR,\n                     DOMMessageFormatter.formatMessage(\n                             DOMMessageFormatter.DOM_DOMAIN,\n@@ -326,13 +330,13 @@ public Node replaceChild(Node newChild, Node oldChild) throws DOMException {\n                     DocumentFragmentimpl docFrag = \n                                             (DocumentFragmentimpl) newDomChild;\n                     ChildNode child = (ChildNode) docFrag.getFirstChild();\n-                    child.parentNode = this;\n                     this.replaceChild(child, oldChild);\n+                    if(child != null) {\n+                        child.parentNode = this;\n+                    }\n                 } else {\n                     if (this.firstChild == oldDomChild) {\n                         \n-                        newDomChild.parentNode = this;\n-                        \n                         if(this.firstChild.nextSibling != null) {\n                             this.firstChild.nextSibling.previousSibling = newDomChild;\n                             newDomChild.nextSibling = this.firstChild.nextSibling;\n@@ -358,10 +362,9 @@ public Node replaceChild(Node newChild, Node oldChild) throws DOMException {\n                             this.lastChild = newDomChild;\n                         }\n \n-                        if (newDomChild.parentNode == null) {\n-                            newDomChild.parentNode = this;\n-                        }\n                     }\n+                \n+                    newDomChild.parentNode = this;\n                 }\n                 found = true;\n ",
                "raw_url": "https://github.com/apache/ws-axiom/raw/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ParentNode.java",
                "sha": "50b699bda313c6f20e188b96d151af0d3bfb8c29",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/ws-axiom/blob/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-dom/src/main/java/org/apache/axiom/soap/impl/dom/SOAPFaultCodeImpl.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/soap/impl/dom/SOAPFaultCodeImpl.java?ref=2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1",
                "deletions": 42,
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/soap/impl/dom/SOAPFaultCodeImpl.java",
                "patch": "@@ -76,46 +76,4 @@ public SOAPFaultSubCode getSubCode() {\n                 SOAP12Constants.SOAP_FAULT_SUB_CODE_LOCAL_NAME);\n     }\n \n-    protected void internalSerialize(XMLStreamWriter writer, boolean cache) throws XMLStreamException {\n-        // select the builder\n-        short builderType = PULL_TYPE_BUILDER;    // default is pull type\n-        if (builder != null) {\n-            builderType = this.builder.getBuilderType();\n-        }\n-        if ((builderType == PUSH_TYPE_BUILDER)\n-                && (builder.getRegisteredContentHandler() == null)) {\n-            builder.registerExternalContentHandler(new StreamWriterToContentHandlerConverter(writer));\n-        }\n-\n-        if (!cache) {\n-            //No caching\n-            if (this.firstChild != null) {\n-                OMSerializerUtil.serializeStartpart(this, writer);\n-                firstChild.internalSerializeAndConsume(writer);\n-                OMSerializerUtil.serializeEndpart(writer);\n-            } else if (!this.done) {\n-                if (builderType == PULL_TYPE_BUILDER) {\n-                    OMSerializerUtil.serializeByPullStream(this, writer);\n-                } else {\n-                    OMSerializerUtil.serializeStartpart(this, writer);\n-                    builder.setCache(cache);\n-                    builder.next();\n-                    OMSerializerUtil.serializeEndpart(writer);\n-                }\n-            } else {\n-                OMSerializerUtil.serializeNormal(this, writer, cache);\n-            }\n-            // do not serialise the siblings\n-\n-\n-        } else {\n-            //Cached\n-            OMSerializerUtil.serializeNormal(this, writer, cache);\n-\n-            // do not serialise the siblings\n-        }\n-\n-\n-    }\n-\n }",
                "raw_url": "https://github.com/apache/ws-axiom/raw/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-dom/src/main/java/org/apache/axiom/soap/impl/dom/SOAPFaultCodeImpl.java",
                "sha": "5f7a49025cd42058b402262ed9ae934d88cb4764",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ws-axiom/blob/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-tests/src/test/java/org/apache/axiom/om/CompareOMWithDOMTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-tests/src/test/java/org/apache/axiom/om/CompareOMWithDOMTest.java?ref=2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1",
                "deletions": 0,
                "filename": "modules/axiom-tests/src/test/java/org/apache/axiom/om/CompareOMWithDOMTest.java",
                "patch": "@@ -40,6 +40,7 @@ public void testAllMessagesInSOAP() throws OMException, Exception {\n         if (files != null) {\r\n             for (int i = 0; i < files.length; i++) {\r\n                 if (files[i].isFile() && files[i].getName().endsWith(\".xml\") && !files[i].getName().startsWith(\"wrong\")) {\r\n+                    System.out.println(files[i].getAbsolutePath());\r\n                     SOAPEnvelope soapEnvelope = (SOAPEnvelope) OMTestUtils.getOMBuilder(\r\n                             files[i])\r\n                             .getDocumentElement();\r",
                "raw_url": "https://github.com/apache/ws-axiom/raw/2bd1eb8ec2b202cd4fc7cbf686b166dec5fa72c1/modules/axiom-tests/src/test/java/org/apache/axiom/om/CompareOMWithDOMTest.java",
                "sha": "d5c473e7a755bb5a86b8515b34bb11cc2e877e76",
                "status": "modified"
            }
        ],
        "message": "Make sure a created DocumentFragment is \"done\"\nPrevent NPE in child node by checking for a null parent before checking its completness\nFix for WSCOMMONS-105 - Thanks C Corvin\nSerialize a soap 12 fault with normally with serilization logic inherited from ElementImpl - possible fix for WSCOMMONS-106",
        "parent": "https://github.com/apache/ws-axiom/commit/c9fe635b0929d1a065e63e3e7fb33772b7db453e",
        "patched_files": [
            "ParentNode.java",
            "AttrImpl.java",
            "SOAPFaultCodeImpl.java",
            "DocumentFragmentimpl.java",
            "ChildNode.java"
        ],
        "repo": "ws-axiom",
        "unit_tests": [
            "CompareOMWithDOMTest.java"
        ]
    },
    "ws-axiom_2c42993": {
        "bug_id": "ws-axiom_2c42993",
        "commit": "https://github.com/apache/ws-axiom/commit/2c4299360c46cc7bc1fbd990495676b63a99871d",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/ws-axiom/blob/2c4299360c46cc7bc1fbd990495676b63a99871d/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/serialize/StreamingOMSerializer.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/serialize/StreamingOMSerializer.java?ref=2c4299360c46cc7bc1fbd990495676b63a99871d",
                "deletions": 1,
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/om/impl/serialize/StreamingOMSerializer.java",
                "patch": "@@ -235,7 +235,11 @@ protected void serializeElement(XMLStreamReader reader,\n                 String prefix = (String) writePrefixList.get(i);\n                 String namespace = (String) writeNSList.get(i);\n                 if (prefix != null) {\n-                    writer.writeNamespace(prefix, namespace);\n+                    if (namespace == null) {\n+                        writer.writeNamespace(prefix, \"\");\n+                    } else {\n+                        writer.writeNamespace(prefix, namespace);\n+                    }\n                 } else {\n                     writer.writeDefaultNamespace(namespace);\n                 }",
                "raw_url": "https://github.com/apache/ws-axiom/raw/2c4299360c46cc7bc1fbd990495676b63a99871d/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/serialize/StreamingOMSerializer.java",
                "sha": "bbd85a4e1a9b4f166a33a2e81cb4a997cd167056",
                "status": "modified"
            },
            {
                "additions": 112,
                "blob_url": "https://github.com/apache/ws-axiom/blob/2c4299360c46cc7bc1fbd990495676b63a99871d/modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/serializer/OMSerializerTest2.java",
                "changes": 112,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/serializer/OMSerializerTest2.java?ref=2c4299360c46cc7bc1fbd990495676b63a99871d",
                "deletions": 0,
                "filename": "modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/serializer/OMSerializerTest2.java",
                "patch": "@@ -0,0 +1,112 @@\n+package org.apache.axiom.om.impl.serializer;\r\n+\r\n+import org.apache.axiom.om.AbstractTestCase;\r\n+import org.apache.axiom.om.OMXMLParserWrapper;\r\n+import org.apache.axiom.om.OMAbstractFactory;\r\n+import org.apache.axiom.om.impl.serialize.StreamingOMSerializer;\r\n+import org.apache.axiom.om.impl.llom.factory.OMXMLBuilderFactory;\r\n+import org.apache.axiom.om.impl.builder.StAXOMBuilder;\r\n+import org.apache.axiom.soap.SOAPEnvelope;\r\n+import org.apache.axiom.soap.SOAPBody;\r\n+import org.apache.axiom.soap.impl.builder.StAXSOAPModelBuilder;\r\n+import org.custommonkey.xmlunit.XMLTestCase;\r\n+\r\n+import javax.xml.stream.*;\r\n+import java.io.*;\r\n+\r\n+public class OMSerializerTest2 extends XMLTestCase {\r\n+    private XMLStreamReader reader;\r\n+    private XMLStreamWriter writer;\r\n+    private static final String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\" +\r\n+            \"<soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\" +\r\n+            \"<soapenv:Header/>\" +\r\n+            \"<soapenv:Body>\" +\r\n+            \"<ReportService_GetOlapServers_1_0_Response xmlns=\\\"http://reportservice.type\\\">\" +\r\n+            \"<status>\" +\r\n+            \"<returnCode xmlns=\\\"\\\">\" +\r\n+            \"<returnCode>0</returnCode>\" +\r\n+            \"</returnCode>\" +\r\n+            \"</status>\" +\r\n+            \"<olapServerId xmlns=\\\"http://type.ws.analyzer.jrisk.appl.net\\\">jnp://192.168.111.66:1234</olapServerId>\" +\r\n+            \"</ReportService_GetOlapServers_1_0_Response>\" +\r\n+            \"</soapenv:Body>\" +\r\n+            \"</soapenv:Envelope>\";\r\n+\r\n+    public OMSerializerTest2(String testName) {\r\n+        super(testName);\r\n+    }\r\n+\r\n+    protected void setUp() throws Exception {\r\n+        reader =\r\n+                XMLInputFactory.newInstance().\r\n+                        createXMLStreamReader(\r\n+                                new StringReader(xml));\r\n+    }\r\n+\r\n+    public void testRawSerializer() throws Exception {\r\n+        StreamingOMSerializer serializer = new StreamingOMSerializer();\r\n+        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n+        writer =\r\n+                XMLOutputFactory.newInstance().\r\n+                        createXMLStreamWriter(byteArrayOutputStream);\r\n+        serializer.serialize(reader, writer);\r\n+        writer.flush();\r\n+\r\n+        String outputString = new String(byteArrayOutputStream.toByteArray());\r\n+        assertXMLEqual(xml, outputString);\r\n+\r\n+    }\r\n+\r\n+    public void testElementPullStream1() throws Exception {\r\n+        OMXMLParserWrapper builder = OMXMLBuilderFactory.createStAXSOAPModelBuilder(\r\n+                OMAbstractFactory.getSOAP11Factory(),\r\n+                reader);\r\n+        SOAPEnvelope env = (SOAPEnvelope) builder.getDocumentElement();\r\n+        StreamingOMSerializer serializer = new StreamingOMSerializer();\r\n+        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n+        writer =\r\n+                XMLOutputFactory.newInstance().\r\n+                        createXMLStreamWriter(byteArrayOutputStream);\r\n+\r\n+        serializer.serialize(env.getXMLStreamReaderWithoutCaching(), writer);\r\n+        writer.flush();\r\n+\r\n+        String outputString = new String(byteArrayOutputStream.toByteArray());\r\n+        assertXMLEqual(xml, outputString);\r\n+    }\r\n+\r\n+    public void testElementPullStream1WithCacheOff() throws Exception {\r\n+\r\n+        StAXSOAPModelBuilder soapBuilder = new StAXSOAPModelBuilder(reader, null);\r\n+        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n+        writer =\r\n+                XMLOutputFactory.newInstance().\r\n+                        createXMLStreamWriter(byteArrayOutputStream);\r\n+\r\n+        SOAPEnvelope env = (SOAPEnvelope) soapBuilder.getDocumentElement();\r\n+        env.serializeAndConsume(writer);\r\n+        writer.flush();\r\n+\r\n+        String outputString = new String(byteArrayOutputStream.toByteArray());\r\n+        assertTrue(outputString != null && !\"\".equals(outputString) && outputString.length() > 1);\r\n+\r\n+        writer =\r\n+                XMLOutputFactory.newInstance().\r\n+                        createXMLStreamWriter(byteArrayOutputStream);\r\n+\r\n+        StringWriter stringWriter = new StringWriter();\r\n+\r\n+        //now we should not be able to serilaize anything ! this should throw\r\n+        //an error\r\n+        try {\r\n+            env.serializeAndConsume(writer);\r\n+            fail();\r\n+        } catch (XMLStreamException e) {\r\n+            e.printStackTrace(new PrintWriter(stringWriter, true));\r\n+            assertTrue(stringWriter.toString()\r\n+                    .indexOf(\"problem accessing the parser. Parser already accessed!\") > -1);\r\n+        } catch (Exception e) {\r\n+            fail(\"Expecting an XMLStreamException \" + e.getMessage());\r\n+        }\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/ws-axiom/raw/2c4299360c46cc7bc1fbd990495676b63a99871d/modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/serializer/OMSerializerTest2.java",
                "sha": "b26cc1652cbc771edeed6f7b5c3e442e7c3fe962",
                "status": "added"
            }
        ],
        "message": "Fix for WSCOMMONS-172 [Default Namespace NPE] and AXIS2-1964 [Null Pointer Exception in Service STUB class at _operationClient.execute(true); line for AXIS2 1.1.1]",
        "parent": "https://github.com/apache/ws-axiom/commit/a4b6d710c93e683d841068c7ce07985b6cbbec38",
        "patched_files": [
            "StreamingOMSerializer.java"
        ],
        "repo": "ws-axiom",
        "unit_tests": [
            "StreamingOMSerializerTest.java"
        ]
    },
    "ws-axiom_376edbc": {
        "bug_id": "ws-axiom_376edbc",
        "commit": "https://github.com/apache/ws-axiom/commit/376edbc63759e008571d7c1a36a09331acbfe5c8",
        "file": [
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/ws-axiom/blob/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-api/src/main/java/org/apache/axiom/util/base64/Base64Utils.java",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/util/base64/Base64Utils.java?ref=376edbc63759e008571d7c1a36a09331acbfe5c8",
                "deletions": 11,
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/util/base64/Base64Utils.java",
                "patch": "@@ -54,25 +54,28 @@ private static int getEncodedSize(int unencodedSize) {\n         return (unencodedSize+2) / 3 * 4;\n     }\n     \n+    private static int getBufferSize(DataHandler dh) {\n+        long size = DataSourceUtils.getSize(dh.getDataSource());\n+        if (size == -1) {\n+            // Use a reasonable default capacity.\n+            return 4096;\n+        } else if (size > Integer.MAX_VALUE) {\n+            throw new IllegalArgumentException(\"DataHandler is too large to encode to string\");\n+        } else {\n+            return getEncodedSize((int)size);\n+        }\n+    }\n+    \n     /**\n-     * Get a base64 representation of the content of a given {@link DataHandler}.\n+     * Get a base64 representation of the content of a given {@link DataHandler} as a string.\n      * This method will try to carry out the encoding operation in the most efficient way.\n      * \n      * @param dh the data handler with the content to encode\n      * @return the base64 encoded content\n      * @throws IOException if an I/O error occurs when reading the content of the data handler\n      */\n     public static String encode(DataHandler dh) throws IOException {\n-        long size = DataSourceUtils.getSize(dh.getDataSource());\n-        StringBuilder buffer;\n-        if (size == -1) {\n-            // Use a reasonable default capacity (better than the default of 16).\n-            buffer = new StringBuilder(4096);\n-        } else if (size > Integer.MAX_VALUE) {\n-            throw new IllegalArgumentException(\"DataHandler is too large to encode to string\");\n-        } else {\n-            buffer = new StringBuilder(getEncodedSize((int)size));\n-        }\n+        StringBuilder buffer = new StringBuilder(getBufferSize(dh));\n         Base64EncodingStringBufferOutputStream out = new Base64EncodingStringBufferOutputStream(buffer);\n         // Always prefer writeTo, because getInputStream will create a thread and a pipe if\n         // the DataHandler was constructed using an object instead of a DataSource\n@@ -81,6 +84,22 @@ public static String encode(DataHandler dh) throws IOException {\n         return buffer.toString();\n     }\n \n+    /**\n+     * Get a base64 representation of the content of a given {@link DataHandler} as a char array.\n+     * This method will try to carry out the encoding operation in the most efficient way.\n+     * \n+     * @param dh the data handler with the content to encode\n+     * @return the base64 encoded content\n+     * @throws IOException if an I/O error occurs when reading the content of the data handler\n+     */\n+    public static char[] encodeToCharArray(DataHandler dh) throws IOException {\n+        NoCopyCharArrayWriter buffer = new NoCopyCharArrayWriter(getBufferSize(dh));\n+        Base64EncodingWriterOutputStream out = new Base64EncodingWriterOutputStream(buffer);\n+        dh.writeTo(out);\n+        out.complete();\n+        return buffer.toCharArray();\n+    }\n+\n     private static int decode0(char[] ibuf, byte[] obuf, int wp) {\n         int outlen = 3;\n         if (ibuf[3] == S_BASE64PAD)",
                "raw_url": "https://github.com/apache/ws-axiom/raw/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-api/src/main/java/org/apache/axiom/util/base64/Base64Utils.java",
                "sha": "56fdcb399c39dbc6f96cd31d8e90ab4285ccfb3a",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/ws-axiom/blob/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-api/src/main/java/org/apache/axiom/util/base64/NoCopyCharArrayWriter.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/util/base64/NoCopyCharArrayWriter.java?ref=376edbc63759e008571d7c1a36a09331acbfe5c8",
                "deletions": 0,
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/util/base64/NoCopyCharArrayWriter.java",
                "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.axiom.util.base64;\n+\n+import java.io.CharArrayWriter;\n+\n+/**\n+ * Modified {@link CharArrayWriter} that returns the internal buffer (instead of a copy) if the\n+ * buffer has just the right size, i.e. if the size of the buffer is equal to the number of\n+ * characters that have been written.\n+ */\n+class NoCopyCharArrayWriter extends CharArrayWriter {\n+    NoCopyCharArrayWriter(int expectedSize) {\n+        super(expectedSize);\n+    }\n+\n+    public char[] toCharArray() {\n+        return count == buf.length ? buf : super.toCharArray();\n+    }\n+}",
                "raw_url": "https://github.com/apache/ws-axiom/raw/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-api/src/main/java/org/apache/axiom/util/base64/NoCopyCharArrayWriter.java",
                "sha": "8a275d8320de59dd2f77fb46d1bd5d8f7c302dd5",
                "status": "added"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/ws-axiom/blob/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/TextNodeImpl.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/TextNodeImpl.java?ref=376edbc63759e008571d7c1a36a09331acbfe5c8",
                "deletions": 1,
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/TextNodeImpl.java",
                "patch": "@@ -269,7 +269,17 @@ public String getData() throws DOMException {\n     }\n \n     public char[] getTextCharacters() {\n-        return charArray != null ? charArray : this.textValue.toCharArray();\n+        if (charArray != null) {\n+            return charArray;\n+        } else if (textValue != null) {\n+            return textValue.toCharArray();\n+        } else {\n+            try {\n+                return Base64Utils.encodeToCharArray((DataHandler)getDataHandler());\n+            } catch (IOException ex) {\n+                throw new OMException(ex);\n+            }\n+        }\n     }\n \n     public boolean isCharacters() {",
                "raw_url": "https://github.com/apache/ws-axiom/raw/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/TextNodeImpl.java",
                "sha": "5b056cccc14376253ef24e5c310f57fe5928a96c",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/ws-axiom/blob/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMTextImpl.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMTextImpl.java?ref=376edbc63759e008571d7c1a36a09331acbfe5c8",
                "deletions": 1,
                "filename": "modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMTextImpl.java",
                "patch": "@@ -255,7 +255,17 @@ public String getText() throws OMException {\n     }\n \n     public char[] getTextCharacters() {\n-        return charArray != null ? charArray : value.toCharArray();\n+        if (charArray != null) {\n+            return charArray;\n+        } else if (value != null) {\n+            return value.toCharArray();\n+        } else {\n+            try {\n+                return Base64Utils.encodeToCharArray((DataHandler)getDataHandler());\n+            } catch (IOException ex) {\n+                throw new OMException(ex);\n+            }\n+        }\n     }\n \n     public boolean isCharacters() {",
                "raw_url": "https://github.com/apache/ws-axiom/raw/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMTextImpl.java",
                "sha": "0b29242e11bcb634d649b063c12eb862e9dfa6b0",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ws-axiom/blob/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java?ref=376edbc63759e008571d7c1a36a09331acbfe5c8",
                "deletions": 0,
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java",
                "patch": "@@ -475,6 +475,7 @@ protected void addTests() {\n         addTest(new org.apache.axiom.ts.om.pi.TestDigest(metaFactory));\n         addTest(new org.apache.axiom.ts.om.text.TestBase64Streaming(metaFactory));\n         addTest(new org.apache.axiom.ts.om.text.TestDigest(metaFactory));\n+        addTest(new org.apache.axiom.ts.om.text.TestGetTextCharactersFromDataHandler(metaFactory));\n         Method[] methods = AXIOMXPathTestCase.class.getMethods();\n         for (int i=0; i<methods.length; i++) {\n             String methodName = methods[i].getName();",
                "raw_url": "https://github.com/apache/ws-axiom/raw/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java",
                "sha": "12d27d322a5df29b6f7a068b900ac5ced54e0e51",
                "status": "modified"
            },
            {
                "additions": 45,
                "blob_url": "https://github.com/apache/ws-axiom/blob/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/text/TestGetTextCharactersFromDataHandler.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/text/TestGetTextCharactersFromDataHandler.java?ref=376edbc63759e008571d7c1a36a09331acbfe5c8",
                "deletions": 0,
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/text/TestGetTextCharactersFromDataHandler.java",
                "patch": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.axiom.ts.om.text;\n+\n+import javax.activation.DataHandler;\n+\n+import org.apache.axiom.om.OMMetaFactory;\n+import org.apache.axiom.om.OMText;\n+import org.apache.axiom.ts.AxiomTestCase;\n+import org.apache.axiom.util.base64.Base64Utils;\n+\n+/**\n+ * Tests that {@link OMText#getTextCharacters()} returns the expected result for an {@link OMText}\n+ * node backed by a {@link DataHandler}. This is a regression test for <a\n+ * href=\"https://issues.apache.org/jira/browse/AXIOM-442\">AXIOM-442</a>.\n+ */\n+public class TestGetTextCharactersFromDataHandler extends AxiomTestCase {\n+    public TestGetTextCharactersFromDataHandler(OMMetaFactory metaFactory) {\n+        super(metaFactory);\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        DataHandler dh = new DataHandler(\"test content\", \"text/plain; charset=utf-8\");\n+        OMText text = metaFactory.getOMFactory().createOMText(dh, true);\n+        char[] chars = text.getTextCharacters();\n+        byte[] decoded = Base64Utils.decode(chars, 0, chars.length);\n+        assertEquals(\"test content\", new String(decoded, \"utf-8\"));\n+    }\n+}",
                "raw_url": "https://github.com/apache/ws-axiom/raw/376edbc63759e008571d7c1a36a09331acbfe5c8/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/text/TestGetTextCharactersFromDataHandler.java",
                "sha": "aafeb8d49a79a1f28f51372cf3a3cfbf6ac46026",
                "status": "added"
            }
        ],
        "message": "AXIOM-442: Fixed a NullPointerException in OMText#getTextCharacters().",
        "parent": "https://github.com/apache/ws-axiom/commit/70ab6086f8ae92d72679b2dc1b7c5d94f08a1d6c",
        "patched_files": [
            "TextNodeImpl.java",
            "OMTextImpl.java",
            "NoCopyCharArrayWriter.java",
            "Base64Utils.java",
            "OMTestSuiteBuilder.java"
        ],
        "repo": "ws-axiom",
        "unit_tests": [
            "TestGetTextCharactersFromDataHandler.java",
            "Base64UtilsTest.java"
        ]
    },
    "ws-axiom_39f1b33": {
        "bug_id": "ws-axiom_39f1b33",
        "commit": "https://github.com/apache/ws-axiom/commit/39f1b33605414684db925c34b9dc53508ac5c915",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ws-axiom/blob/39f1b33605414684db925c34b9dc53508ac5c915/modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java?ref=39f1b33605414684db925c34b9dc53508ac5c915",
                "deletions": 1,
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java",
                "patch": "@@ -214,7 +214,7 @@ public String getNextContentId() {\n      * @return Returns encoding string.\n      */\n     public String getCharSetEncoding() {\n-        return this.charSetEncoding;\n+        return (this.charSetEncoding != null)?this.charSetEncoding:DEFAULT_CHAR_SET_ENCODING;\n     }\n \n     public void setCharSetEncoding(String charSetEncoding) {",
                "raw_url": "https://github.com/apache/ws-axiom/raw/39f1b33605414684db925c34b9dc53508ac5c915/modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java",
                "sha": "31c388b242abaea62caf68df4312a165c2ee10c9",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/ws-axiom/blob/39f1b33605414684db925c34b9dc53508ac5c915/modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java?ref=39f1b33605414684db925c34b9dc53508ac5c915",
                "deletions": 1,
                "filename": "modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java",
                "patch": "@@ -139,7 +139,15 @@ public void testByteArrayDS() throws Exception {\n         String payload = new String(bytes, \"utf-16\");\n         assertTrue(\"The obtained bytes did not match the payload\",\n                    payload1.equals(payload));\n-        \n+\n+        // Test getting the raw bytes with the default encoding\n+        OMOutputFormat outputFormat = new OMOutputFormat();\n+        baos = new ByteArrayOutputStream();\n+        ds.serialize(baos, outputFormat);\n+        output = baos.toString(OMOutputFormat.DEFAULT_CHAR_SET_ENCODING);\n+        System.out.println(output);\n+        assertTrue(\"The obtained bytes did not match the payload\",\n+                   payload1.equals(output));     \n     }\n     \n     /**",
                "raw_url": "https://github.com/apache/ws-axiom/raw/39f1b33605414684db925c34b9dc53508ac5c915/modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java",
                "sha": "e0c7f744906721abc13068046c829c38666f8f20",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPE during serialization if an encoding has not been set for the OMOutputFormat.",
        "parent": "https://github.com/apache/ws-axiom/commit/e1b5c240c8c3e31a6636c2e52926e9c89972d9ac",
        "patched_files": [
            "OMSourcedElement.java",
            "OMOutputFormat.java"
        ],
        "repo": "ws-axiom",
        "unit_tests": [
            "OMSourcedElementTest.java",
            "OMOutputFormatTest.java"
        ]
    },
    "ws-axiom_65bdfc7": {
        "bug_id": "ws-axiom_65bdfc7",
        "commit": "https://github.com/apache/ws-axiom/commit/65bdfc79283d62052adef2da5a04096af8a1e05a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ws-axiom/blob/65bdfc79283d62052adef2da5a04096af8a1e05a/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/DOMTestSuiteBuilder.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/DOMTestSuiteBuilder.java?ref=65bdfc79283d62052adef2da5a04096af8a1e05a",
                "deletions": 0,
                "filename": "modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/DOMTestSuiteBuilder.java",
                "patch": "@@ -39,6 +39,7 @@ protected void addTests() {\n         addTest(new org.apache.axiom.ts.dom.attr.TestGetFirstChild(dbf));\n         addTest(new org.apache.axiom.ts.dom.attr.TestGetValueWithMultipleChildren(dbf));\n         addTest(new org.apache.axiom.ts.dom.attr.TestLookupNamespaceURI(dbf));\n+        addTest(new org.apache.axiom.ts.dom.attr.TestLookupNamespaceURIWithoutOwnerElement(dbf));\n         addTest(new org.apache.axiom.ts.dom.attr.TestSetPrefixNotNullWithNamespace(dbf));\n         addTest(new org.apache.axiom.ts.dom.attr.TestSetPrefixNotNullWithoutNamespace(dbf));\n         addTest(new org.apache.axiom.ts.dom.builder.TestParseURI(dbf));",
                "raw_url": "https://github.com/apache/ws-axiom/raw/65bdfc79283d62052adef2da5a04096af8a1e05a/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/DOMTestSuiteBuilder.java",
                "sha": "8d2899f04e77e2b4c9effe62b2cc0d52baf887e8",
                "status": "modified"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/ws-axiom/blob/65bdfc79283d62052adef2da5a04096af8a1e05a/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/attr/TestLookupNamespaceURIWithoutOwnerElement.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/attr/TestLookupNamespaceURIWithoutOwnerElement.java?ref=65bdfc79283d62052adef2da5a04096af8a1e05a",
                "deletions": 0,
                "filename": "modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/attr/TestLookupNamespaceURIWithoutOwnerElement.java",
                "patch": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.axiom.ts.dom.attr;\n+\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import org.apache.axiom.ts.dom.DOMTestCase;\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+\n+/**\n+ * Tests the behavior of {@link Node#lookupNamespaceURI(String)} on an attribute node that has no\n+ * owner element.\n+ */\n+public class TestLookupNamespaceURIWithoutOwnerElement extends DOMTestCase {\n+    public TestLookupNamespaceURIWithoutOwnerElement(DocumentBuilderFactory dbf) {\n+        super(dbf);\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        Document document = dbf.newDocumentBuilder().newDocument();\n+        Attr attr = document.createAttributeNS(\"urn:test\", \"p:attr\");\n+        assertNull(attr.lookupNamespaceURI(\"p\"));\n+    }\n+}",
                "raw_url": "https://github.com/apache/ws-axiom/raw/65bdfc79283d62052adef2da5a04096af8a1e05a/modules/axiom-dom-testsuite/src/main/java/org/apache/axiom/ts/dom/attr/TestLookupNamespaceURIWithoutOwnerElement.java",
                "sha": "62cd46f96c3fea2c3cf5afb3f86451703618f393",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ws-axiom/blob/65bdfc79283d62052adef2da5a04096af8a1e05a/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/NodeImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/NodeImpl.java?ref=65bdfc79283d62052adef2da5a04096af8a1e05a",
                "deletions": 6,
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/NodeImpl.java",
                "patch": "@@ -309,12 +309,8 @@ public String lookupNamespaceURI(String specifiedPrefix) {\n             // type is unknown\n             return null;\n         case Node.ATTRIBUTE_NODE: {\n-            NodeImpl ownerNode = (NodeImpl) ((Attr) this).getOwnerElement();\n-            if (ownerNode.getNodeType() == Node.ELEMENT_NODE) {\n-                return ownerNode.lookupNamespaceURI(specifiedPrefix);\n-\n-            }\n-            return null;\n+            Element ownerElement = ((Attr) this).getOwnerElement();\n+            return ownerElement == null ? null : ownerElement.lookupNamespaceURI(specifiedPrefix);\n         }\n         default: {\n             NodeImpl ancestor = (NodeImpl) getElementAncestor(this);",
                "raw_url": "https://github.com/apache/ws-axiom/raw/65bdfc79283d62052adef2da5a04096af8a1e05a/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/NodeImpl.java",
                "sha": "f9399866ac49ed0d02991c95e35ab1e51f34ded8",
                "status": "modified"
            }
        ],
        "message": "AXIOM-423: Fixed a NullPointerException.",
        "parent": "https://github.com/apache/ws-axiom/commit/faf1ec9f0ffc125f90492ee0adab00e911bee3c6",
        "patched_files": [
            "NodeImpl.java",
            "DOMTestSuiteBuilder.java"
        ],
        "repo": "ws-axiom",
        "unit_tests": [
            "TestLookupNamespaceURIWithoutOwnerElement.java"
        ]
    },
    "ws-axiom_838c505": {
        "bug_id": "ws-axiom_838c505",
        "commit": "https://github.com/apache/ws-axiom/commit/838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/ws-axiom/blob/838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba/modules/axiom-common-impl/src/main/java/org/apache/axiom/om/impl/common/OMContainerHelper.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-common-impl/src/main/java/org/apache/axiom/om/impl/common/OMContainerHelper.java?ref=838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba",
                "deletions": 0,
                "filename": "modules/axiom-common-impl/src/main/java/org/apache/axiom/om/impl/common/OMContainerHelper.java",
                "patch": "@@ -141,6 +141,9 @@ public static void addChild(IContainer container, OMNode omNode, boolean fromBui\n     }\n     \n     public static void build(IContainer container) {\n+        if (container.getState() == IContainer.DISCARDED) {\n+            throw new NodeUnavailableException();\n+        }\n         OMXMLParserWrapper builder = container.getBuilder();\n         if (builder != null && builder.isCompleted()) {\n             log.debug(\"Builder is already complete.\");",
                "raw_url": "https://github.com/apache/ws-axiom/raw/838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba/modules/axiom-common-impl/src/main/java/org/apache/axiom/om/impl/common/OMContainerHelper.java",
                "sha": "6c42ae9e9b7b3dd93b077686f3baca5ab486e68b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ws-axiom/blob/838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java?ref=838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba",
                "deletions": 0,
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java",
                "patch": "@@ -166,10 +166,12 @@ protected void addTests() {\n         addTest(new org.apache.axiom.ts.om.element.TestAddAttributeWithoutNamespace(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestAddChild(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestAddChild2(metaFactory));\n+        addTest(new org.apache.axiom.ts.om.element.TestAddChildDiscarded(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestAddChildIncomplete(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestAddChildWithParent(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestAddChildWithSameParent(metaFactory, true));\n         addTest(new org.apache.axiom.ts.om.element.TestAddChildWithSameParent(metaFactory, false));\n+        addTest(new org.apache.axiom.ts.om.element.TestBuildDiscarded(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestChildReDeclaringGrandParentsDefaultNSWithPrefix(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestChildReDeclaringParentsDefaultNSWithPrefix(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestCloneOMElement(metaFactory));",
                "raw_url": "https://github.com/apache/ws-axiom/raw/838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java",
                "sha": "8b4d51d4a07929dcdfa98a1eb4bc808599731e8a",
                "status": "modified"
            },
            {
                "additions": 54,
                "blob_url": "https://github.com/apache/ws-axiom/blob/838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddChildDiscarded.java",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddChildDiscarded.java?ref=838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba",
                "deletions": 0,
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddChildDiscarded.java",
                "patch": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.axiom.ts.om.element;\n+\n+import java.io.StringReader;\n+\n+import org.apache.axiom.om.NodeUnavailableException;\n+import org.apache.axiom.om.OMContainer;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMMetaFactory;\n+import org.apache.axiom.om.OMNode;\n+import org.apache.axiom.om.OMXMLBuilderFactory;\n+import org.apache.axiom.ts.AxiomTestCase;\n+\n+/**\n+ * Tests the behavior of {@link OMContainer#addChild(OMNode)} if the parent has been discarded. In\n+ * this case the method is expected to throw a {@link NodeUnavailableException}.\n+ */\n+public class TestAddChildDiscarded extends AxiomTestCase {\n+    public TestAddChildDiscarded(OMMetaFactory metaFactory) {\n+        super(metaFactory);\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        OMFactory factory = metaFactory.getOMFactory();\n+        OMElement parent = OMXMLBuilderFactory.createOMBuilder(factory, new StringReader(\"<root><a/><b/></root>\")).getDocumentElement();\n+        // Partially build the parent\n+        parent.getFirstOMChild();\n+        parent.discard();\n+        try {\n+            parent.addChild(factory.createOMElement(\"c\", null));\n+            fail(\"Expected NodeUnavailableException\");\n+        } catch (NodeUnavailableException ex) {\n+            // Expected\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/ws-axiom/raw/838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddChildDiscarded.java",
                "sha": "9b00f5e82691e2931d4cb7bdcc7a64a8156655a1",
                "status": "added"
            },
            {
                "additions": 53,
                "blob_url": "https://github.com/apache/ws-axiom/blob/838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestBuildDiscarded.java",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestBuildDiscarded.java?ref=838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba",
                "deletions": 0,
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestBuildDiscarded.java",
                "patch": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.axiom.ts.om.element;\n+\n+import java.io.StringReader;\n+\n+import org.apache.axiom.om.NodeUnavailableException;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMMetaFactory;\n+import org.apache.axiom.om.OMSerializable;\n+import org.apache.axiom.om.OMXMLBuilderFactory;\n+import org.apache.axiom.ts.AxiomTestCase;\n+\n+/**\n+ * Tests the behavior of {@link OMSerializable#build()} on an {@link OMElement} that has been\n+ * discarded. In this case the method is expected to throw a {@link NodeUnavailableException}.\n+ */\n+public class TestBuildDiscarded extends AxiomTestCase {\n+    public TestBuildDiscarded(OMMetaFactory metaFactory) {\n+        super(metaFactory);\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        OMFactory factory = metaFactory.getOMFactory();\n+        OMElement parent = OMXMLBuilderFactory.createOMBuilder(factory, new StringReader(\"<root><a/><b/></root>\")).getDocumentElement();\n+        // Partially build the parent\n+        parent.getFirstOMChild();\n+        parent.discard();\n+        try {\n+            parent.build();\n+            fail(\"Expected NodeUnavailableException\");\n+        } catch (NodeUnavailableException ex) {\n+            // Expected\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/ws-axiom/raw/838c5059c443ab6eb6ec8bcf408d56fdd78bb7ba/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestBuildDiscarded.java",
                "sha": "735fec5eeb3e9bace007402286a5aa68d69510a8",
                "status": "added"
            }
        ],
        "message": "Fixed a NullPointerException.",
        "parent": "https://github.com/apache/ws-axiom/commit/03075b3cff67c791e8d09079e6a866e6acbb0aaa",
        "patched_files": [
            "OMContainerHelper.java",
            "OMTestSuiteBuilder.java"
        ],
        "repo": "ws-axiom",
        "unit_tests": [
            "TestBuildDiscarded.java",
            "TestAddChildDiscarded.java"
        ]
    },
    "ws-axiom_959af60": {
        "bug_id": "ws-axiom_959af60",
        "commit": "https://github.com/apache/ws-axiom/commit/959af604b36b92ffcc79058495ab631ee8d193da",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/ws-axiom/blob/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-api/src/main/java/org/apache/axiom/om/OMElement.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/om/OMElement.java?ref=959af604b36b92ffcc79058495ab631ee8d193da",
                "deletions": 3,
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/om/OMElement.java",
                "patch": "@@ -365,9 +365,11 @@\n      *            the given attribute value can be serialized directly as an XML value. The caller\n      *            may, for example, pass a string with the character 0x01.\n      * @param ns\n-     *            The namespace has to be one of the in scope namespace. i.e. the passed namespace\n-     *            must be declared in the parent element of this attribute or ancestors of the\n-     *            parent element of the attribute.\n+     *            The namespace for the attribute. If no corresponding namespace declaration is in\n+     *            scope, then a new namespace declaration will be added to the element. The\n+     *            {@link OMNamespace} may have a <code>null</code> prefix, in which case the method\n+     *            will generate a prefix (if no namespace declaration for the given namespace URI is\n+     *            in scope) or use an existing one.\n      * @return Returns the added attribute.\n      * @throws IllegalArgumentException\n      *             if an attempt is made to create a prefixed attribute with an empty namespace name",
                "raw_url": "https://github.com/apache/ws-axiom/raw/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-api/src/main/java/org/apache/axiom/om/OMElement.java",
                "sha": "2d62079a500f2fb7cd63a526fe37db6c3fd30602",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/ws-axiom/blob/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ElementImpl.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ElementImpl.java?ref=959af604b36b92ffcc79058495ab631ee8d193da",
                "deletions": 8,
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ElementImpl.java",
                "patch": "@@ -59,6 +59,7 @@\n import javax.xml.namespace.NamespaceContext;\n import javax.xml.namespace.QName;\n import javax.xml.stream.XMLStreamException;\n+\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.Reader;\n@@ -531,17 +532,16 @@ public OMAttribute addAttribute(OMAttribute attr) {\n \n     public OMAttribute addAttribute(String localName, String value,\n                                     OMNamespace ns) {\n+        OMNamespace namespace = null;\n         if (ns != null) {\n-            String uri = ns.getNamespaceURI();\n-            if (uri.length() > 0) {\n-                String prefix = ns.getPrefix();\n-                OMNamespace ns2 = findNamespaceURI(prefix);\n-                if (ns2 == null || !uri.equals(ns2.getNamespaceURI())) {\n-                    declareNamespace(uri, prefix);\n-                }\n+            String namespaceURI = ns.getNamespaceURI();\n+            String prefix = ns.getPrefix();\n+            namespace = findNamespace(namespaceURI, prefix);\n+            if (namespace == null) {\n+                namespace = new OMNamespaceImpl(namespaceURI, prefix != null ? prefix : OMSerializerUtil.getNextNSPrefix());\n             }\n         }\n-        return addAttribute(new AttrImpl(null, localName, ns, value, factory));\n+        return addAttribute(new AttrImpl(null, localName, namespace, value, factory));\n     }\n \n     public OMNamespace addNamespaceDeclaration(String uri, String prefix) {",
                "raw_url": "https://github.com/apache/ws-axiom/raw/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ElementImpl.java",
                "sha": "045a0c1ff54348dc04b36513c246ecd5bc016580",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/ws-axiom/blob/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMElementImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMElementImpl.java?ref=959af604b36b92ffcc79058495ab631ee8d193da",
                "deletions": 3,
                "filename": "modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMElementImpl.java",
                "patch": "@@ -593,18 +593,18 @@ public void removeAttribute(OMAttribute attr) {\n         attributes.remove(attr.getQName());\n     }\n \n-    public OMAttribute addAttribute(String attributeName, String value,\n+    public OMAttribute addAttribute(String localName, String value,\n                                     OMNamespace ns) {\n         OMNamespace namespace = null;\n         if (ns != null) {\n             String namespaceURI = ns.getNamespaceURI();\n             String prefix = ns.getPrefix();\n             namespace = findNamespace(namespaceURI, prefix);\n             if (namespace == null) {\n-                namespace = new OMNamespaceImpl(namespaceURI, prefix);\n+                namespace = new OMNamespaceImpl(namespaceURI, prefix != null ? prefix : OMSerializerUtil.getNextNSPrefix());\n             }\n         }\n-        return addAttribute(new OMAttributeImpl(attributeName, namespace, value, this.factory));\n+        return addAttribute(new OMAttributeImpl(localName, namespace, value, this.factory));\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/ws-axiom/raw/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMElementImpl.java",
                "sha": "21f0c5b4ff96a883a6232400f3ab29b39a677d9c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ws-axiom/blob/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java?ref=959af604b36b92ffcc79058495ab631ee8d193da",
                "deletions": 0,
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java",
                "patch": "@@ -198,6 +198,8 @@ protected void addTests() {\n         addTest(new org.apache.axiom.ts.om.document.sr.TestDTDReaderFromParser(metaFactory, false, false));\n         addTest(new org.apache.axiom.ts.om.element.TestAddAttributeAlreadyOwnedByElement(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestAddAttributeAlreadyOwnedByOtherElement(metaFactory));\n+        addTest(new org.apache.axiom.ts.om.element.TestAddAttributeGeneratedPrefix(metaFactory));\n+        addTest(new org.apache.axiom.ts.om.element.TestAddAttributeReuseExistingPrefix(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestAddAttributeWithInvalidNamespace1(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestAddAttributeWithInvalidNamespace2(metaFactory));\n         for (int i=0; i<addAttributeStrategies.length; i++) {",
                "raw_url": "https://github.com/apache/ws-axiom/raw/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java",
                "sha": "1e1c967dd0acf98ef24f600c71939cdd7aba74a0",
                "status": "modified"
            },
            {
                "additions": 51,
                "blob_url": "https://github.com/apache/ws-axiom/blob/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeGeneratedPrefix.java",
                "changes": 51,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeGeneratedPrefix.java?ref=959af604b36b92ffcc79058495ab631ee8d193da",
                "deletions": 0,
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeGeneratedPrefix.java",
                "patch": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.axiom.ts.om.element;\n+\n+import java.util.Iterator;\n+\n+import org.apache.axiom.om.OMAttribute;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMMetaFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.axiom.ts.AxiomTestCase;\n+\n+/**\n+ * Tests that when {@link OMElement#addAttribute(String, String, OMNamespace)} is called with an\n+ * {@link OMNamespace} with a <code>null</code> prefix and no namespace declaration for the given\n+ * namespace URI is in scope, the method generates a prefix.\n+ */\n+public class TestAddAttributeGeneratedPrefix extends AxiomTestCase {\n+    public TestAddAttributeGeneratedPrefix(OMMetaFactory metaFactory) {\n+        super(metaFactory);\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        OMFactory factory = metaFactory.getOMFactory();\n+        OMElement element = factory.createOMElement(\"test\", null);\n+        OMAttribute attr = element.addAttribute(\"attr\", \"value\", factory.createOMNamespace(\"urn:test\", null));\n+        OMNamespace ns = attr.getNamespace();\n+        assertTrue(ns.getPrefix().length() > 0);\n+        Iterator it = element.getAllDeclaredNamespaces();\n+        assertTrue(it.hasNext());\n+        assertEquals(ns, it.next());\n+        assertFalse(it.hasNext());\n+    }\n+}",
                "raw_url": "https://github.com/apache/ws-axiom/raw/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeGeneratedPrefix.java",
                "sha": "aef7015a4623b2ae6601dee901a048196ad727c2",
                "status": "added"
            },
            {
                "additions": 47,
                "blob_url": "https://github.com/apache/ws-axiom/blob/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeReuseExistingPrefix.java",
                "changes": 47,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeReuseExistingPrefix.java?ref=959af604b36b92ffcc79058495ab631ee8d193da",
                "deletions": 0,
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeReuseExistingPrefix.java",
                "patch": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.axiom.ts.om.element;\n+\n+import org.apache.axiom.om.OMAttribute;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMMetaFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.axiom.ts.AxiomTestCase;\n+\n+/**\n+ * Tests that when {@link OMElement#addAttribute(String, String, OMNamespace)} is called with an\n+ * {@link OMNamespace} with a <code>null</code> prefix and a namespace declaration for the given\n+ * namespace URI is in scope, the method reuses the existing prefix instead of generating one.\n+ */\n+public class TestAddAttributeReuseExistingPrefix extends AxiomTestCase {\n+    public TestAddAttributeReuseExistingPrefix(OMMetaFactory metaFactory) {\n+        super(metaFactory);\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        OMFactory factory = metaFactory.getOMFactory();\n+        OMElement parent = factory.createOMElement(\"parent\", null);\n+        OMElement element = factory.createOMElement(\"element\", null, parent);\n+        parent.declareNamespace(\"urn:test\", \"p\");\n+        OMAttribute attr = element.addAttribute(\"attr\", \"test\", factory.createOMNamespace(\"urn:test\", null));\n+        assertEquals(\"p\", attr.getPrefix());\n+        assertFalse(element.getAllDeclaredNamespaces().hasNext());\n+    }\n+}",
                "raw_url": "https://github.com/apache/ws-axiom/raw/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeReuseExistingPrefix.java",
                "sha": "1819b88d52f8e05fdb68ef3ea135666cb0fba6cd",
                "status": "added"
            }
        ],
        "message": "Improve consistency of the OMElement#addAttribute(String, String, OMNamespace) API:\n* Let LLOM's addAttribute implementation generate a prefix (instead of throwing a NPE) if the prefix is null and no namespace declaration for the given namespace URI is found.\n* Add test coverage for the scenario where the prefix is null and a namespace declaration for the given URI is found (in which case the corresponding prefix is reused). This worked correctly in LLOM.\n* Make DOOM's behavior consistent with LLOM.\n* Update Javadoc of the addAttribute method.",
        "parent": "https://github.com/apache/ws-axiom/commit/8ea27174a675ae98f161571df4e246561af5c0da",
        "patched_files": [
            "OMElementImpl.java",
            "ElementImpl.java",
            "OMElement.java",
            "OMTestSuiteBuilder.java"
        ],
        "repo": "ws-axiom",
        "unit_tests": [
            "TestAddAttributeReuseExistingPrefix.java",
            "TestAddAttributeGeneratedPrefix.java",
            "OMElementTest.java"
        ]
    },
    "ws-axiom_a764ce2": {
        "bug_id": "ws-axiom_a764ce2",
        "commit": "https://github.com/apache/ws-axiom/commit/a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ws-axiom/blob/a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1/modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java?ref=a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1",
                "deletions": 3,
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java",
                "patch": "@@ -208,10 +208,9 @@ public String getNextContentId() {\n     }\n \n     /**\n-     * Returns the character set encoding scheme. If the value of the charSetEncoding is not set\n-     * then the default will be returned.\n+     * Returns the character set encoding scheme.\n      *\n-     * @return Returns encoding string.\n+     * @return Returns encoding string or null if it has not been set.\n      */\n     public String getCharSetEncoding() {\n         return this.charSetEncoding;",
                "raw_url": "https://github.com/apache/ws-axiom/raw/a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1/modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java",
                "sha": "86a96a6cb8859241179f9bc84f11844dde024604",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/ws-axiom/blob/a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1/modules/axiom-api/src/main/java/org/apache/axiom/om/ds/ByteArrayDataSource.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/om/ds/ByteArrayDataSource.java?ref=a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1",
                "deletions": 0,
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/om/ds/ByteArrayDataSource.java",
                "patch": "@@ -19,6 +19,7 @@\n package org.apache.axiom.om.ds;\n \n import org.apache.axiom.om.OMDataSourceExt;\n+import org.apache.axiom.om.OMOutputFormat;\n import org.apache.axiom.om.util.StAXUtils;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n@@ -77,9 +78,15 @@ public boolean isDestructiveWrite() {\n     }\n \n     public byte[] getXMLBytes(String encoding) throws UnsupportedEncodingException {\n+        if (encoding == null)\n+        {\n+          encoding = OMOutputFormat.DEFAULT_CHAR_SET_ENCODING;\n+        }\n+\n         if (DEBUG_ENABLED) {\n             log.debug(\"getXMLBytes encoding=\"+encoding);\n         }\n+\n         // Return the byte array directly if it is the same encoding\n         // Otherwise convert the bytes to the proper encoding\n         if (!byteArray.encoding.equalsIgnoreCase(encoding)) {",
                "raw_url": "https://github.com/apache/ws-axiom/raw/a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1/modules/axiom-api/src/main/java/org/apache/axiom/om/ds/ByteArrayDataSource.java",
                "sha": "361f707dc2a90c2e26cdfae80726e1c125417939",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/ws-axiom/blob/a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1/modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java?ref=a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1",
                "deletions": 0,
                "filename": "modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java",
                "patch": "@@ -140,6 +140,15 @@ public void testByteArrayDS() throws Exception {\n         assertTrue(\"The obtained bytes did not match the payload\",\n                    payload1.equals(payload));\n         \n+       \n+        // Test getting the raw bytes with the default encoding\n+        OMOutputFormat outputFormat = new OMOutputFormat();\n+        baos = new ByteArrayOutputStream();\n+        ds.serialize(baos, outputFormat);\n+        output = baos.toString(OMOutputFormat.DEFAULT_CHAR_SET_ENCODING);\n+        System.out.println(output);\n+        assertTrue(\"The obtained bytes did not match the payload\",\n+                   payload1.equals(output));     \n     }\n     \n     /**",
                "raw_url": "https://github.com/apache/ws-axiom/raw/a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1/modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java",
                "sha": "8e2b7810f43cac260db0671be9da773d8f1ef4bf",
                "status": "modified"
            }
        ],
        "message": "Revised patch for fixing potential NPE during serialization if an encoding has not been set for the OMOutputFormat.",
        "parent": "https://github.com/apache/ws-axiom/commit/943bf918ac8dfc7f11945eb21753b2f3829ace43",
        "patched_files": [
            "OMSourcedElement.java",
            "ByteArrayDataSource.java",
            "OMOutputFormat.java"
        ],
        "repo": "ws-axiom",
        "unit_tests": [
            "OMSourcedElementTest.java",
            "OMOutputFormatTest.java"
        ]
    },
    "ws-axiom_c7de279": {
        "bug_id": "ws-axiom_c7de279",
        "commit": "https://github.com/apache/ws-axiom/commit/c7de27908ac6a1162d7bff7435ba57938f6c5854",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/ws-axiom/blob/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-dom/src/main/java/org/apache/axiom/soap/impl/dom/SOAPBodyImpl.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/soap/impl/dom/SOAPBodyImpl.java?ref=c7de27908ac6a1162d7bff7435ba57938f6c5854",
                "deletions": 16,
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/soap/impl/dom/SOAPBodyImpl.java",
                "patch": "@@ -76,14 +76,16 @@ public boolean hasFault() {\n         } else {\n             OMElement element = getFirstElement();\n             if (element != null\n-                    && SOAPConstants.SOAPFAULT_LOCAL_NAME.equals(element\n-                    .getLocalName())\n-                    && (SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI\n-                    .equals(element.getNamespace().getNamespaceURI()) ||\n-                    SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI\n-                            .equals(element.getNamespace().getNamespaceURI()))) { //added this line\n-                hasSOAPFault = true;\n-                return true;\n+                    && SOAPConstants.SOAPFAULT_LOCAL_NAME.equals(element.getLocalName())) {\n+                OMNamespace ns = element.getNamespace();\n+                if (ns != null &&\n+                        (SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(ns.getNamespaceURI()) ||\n+                         SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(ns.getNamespaceURI()))) {\n+                    hasSOAPFault = true;\n+                    return true;\n+                } else {\n+                    return false;\n+                }\n             } else {\n                 return false;\n             }\n@@ -100,17 +102,19 @@ public SOAPFault getFault() {\n         if (hasSOAPFault) {\n             return (SOAPFault) element;\n         } else if (element != null\n-                && SOAPConstants.SOAPFAULT_LOCAL_NAME.equals(element\n-                .getLocalName())\n-                && (SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(element\n-                .getNamespace().getNamespaceURI()) || SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI\n-                .equals(element.getNamespace().getNamespaceURI()))) { //added this line\n-            hasSOAPFault = true;\n-            return (SOAPFault) element;\n+                && SOAPConstants.SOAPFAULT_LOCAL_NAME.equals(element.getLocalName())) {\n+            OMNamespace ns = element.getNamespace();\n+            if (ns != null &&\n+                    (SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(ns.getNamespaceURI()) ||\n+                     SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(ns.getNamespaceURI()))) {\n+                hasSOAPFault = true;\n+                return (SOAPFault) element;\n+            } else {\n+                return null;\n+            }\n         } else {\n             return null;\n         }\n-\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/ws-axiom/raw/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-dom/src/main/java/org/apache/axiom/soap/impl/dom/SOAPBodyImpl.java",
                "sha": "66a435e1ee95cf01772f322e2d78a71e3d10388c",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/ws-axiom/blob/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-impl/src/main/java/org/apache/axiom/soap/impl/llom/SOAPBodyImpl.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-impl/src/main/java/org/apache/axiom/soap/impl/llom/SOAPBodyImpl.java?ref=c7de27908ac6a1162d7bff7435ba57938f6c5854",
                "deletions": 12,
                "filename": "modules/axiom-impl/src/main/java/org/apache/axiom/soap/impl/llom/SOAPBodyImpl.java",
                "patch": "@@ -125,21 +125,19 @@ public SOAPFault getFault() {\n         if (hasSOAPFault) {\n             return (SOAPFault) element;\n         } else if (element != null\n-                &&\n-                SOAPConstants.SOAPFAULT_LOCAL_NAME.equals(\n-                        element.getLocalName())\n-                &&\n-                (SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(\n-                        element.getNamespace().getNamespaceURI())\n-                        ||\n-                        SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(\n-                                element.getNamespace().getNamespaceURI()))) {     //added this line\n-            hasSOAPFault = true;\n-            return (SOAPFault) element;\n+                && SOAPConstants.SOAPFAULT_LOCAL_NAME.equals(element.getLocalName())) {\n+            OMNamespace ns = element.getNamespace();\n+            if (ns != null &&\n+                    (SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(ns.getNamespaceURI()) ||\n+                     SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(ns.getNamespaceURI()))) {\n+                hasSOAPFault = true;\n+                return (SOAPFault) element;\n+            } else {\n+                return null;\n+            }\n         } else {\n             return null;\n         }\n-\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/ws-axiom/raw/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-impl/src/main/java/org/apache/axiom/soap/impl/llom/SOAPBodyImpl.java",
                "sha": "5c87ed078d945ea19ed841362bd16039acaf1e8e",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/ws-axiom/blob/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/SOAPTestSuiteBuilder.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/SOAPTestSuiteBuilder.java?ref=c7de27908ac6a1162d7bff7435ba57938f6c5854",
                "deletions": 5,
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/SOAPTestSuiteBuilder.java",
                "patch": "@@ -23,6 +23,9 @@\n import org.apache.axiom.om.OMMetaFactory;\n import org.apache.axiom.om.OMSourcedElement;\n import org.apache.axiom.om.TestConstants;\n+import org.apache.axiom.soap.SOAP11Constants;\n+import org.apache.axiom.soap.SOAP12Constants;\n+import org.apache.axiom.soap.SOAPConstants;\n import org.apache.axiom.testutils.suite.TestSuiteBuilder;\n \n public class SOAPTestSuiteBuilder extends TestSuiteBuilder {\n@@ -35,11 +38,20 @@\n         TestConstants.EMPTY_BODY_MESSAGE, \"soap/soap11/soapfault.xml\", \"soap/soap11/bodyNotQualified.xml\",\n         \"soap/soap11/faultstring-with-comment.xml\"};\n     \n-    private static final QName[] qnames = {\n+    private static final QName[] generalQNames = {\n         new QName(\"root\"),\n         new QName(\"urn:test\", \"root\", \"p\"),\n         new QName(\"urn:test\", \"root\") };\n     \n+    private static final QName[] noFaultQNames = {\n+        new QName(\"root\"),\n+        new QName(\"urn:test\", \"root\", \"p\"),\n+        new QName(\"urn:test\", \"root\"),\n+        new QName(\"Fault\"),\n+        new QName(\"urn:test\", \"Fault\", \"p\"),\n+        new QName(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI, \"NoFault\", SOAPConstants.SOAP_DEFAULT_NAMESPACE_PREFIX),\n+        new QName(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI, \"NoFault\", SOAPConstants.SOAP_DEFAULT_NAMESPACE_PREFIX) };\n+    \n     private final OMMetaFactory metaFactory;\n     private final boolean supportsOMSourcedElement;\n     private final boolean supportsBodyElementNameOptimization;\n@@ -65,12 +77,17 @@ private void addTests(SOAPSpec spec) {\n         addTest(new org.apache.axiom.ts.soap.body.TestAddFault2(metaFactory, spec));\n         addTest(new org.apache.axiom.ts.soap.body.TestGetFault(metaFactory, spec));\n         addTest(new org.apache.axiom.ts.soap.body.TestGetFaultWithParser(metaFactory, spec));\n-        for (int i=0; i<qnames.length; i++) {\n-            QName qname = qnames[i];\n+        for (int i=0; i<generalQNames.length; i++) {\n+            QName qname = generalQNames[i];\n             addTest(new org.apache.axiom.ts.soap.body.TestGetFirstElementLocalNameWithParser(metaFactory, spec,\n                     qname, supportsBodyElementNameOptimization));\n             addTest(new org.apache.axiom.ts.soap.body.TestGetFirstElementNSWithParser(metaFactory, spec,\n                     qname, supportsBodyElementNameOptimization));\n+        }\n+        for (int i=0; i<noFaultQNames.length; i++) {\n+            QName qname = noFaultQNames[i];\n+            addTest(new org.apache.axiom.ts.soap.body.TestGetFaultNoFault(metaFactory, spec, qname));\n+            addTest(new org.apache.axiom.ts.soap.body.TestHasFaultNoFault(metaFactory, spec, qname));\n             addTest(new org.apache.axiom.ts.soap.body.TestHasFaultWithParserNoFault(metaFactory, spec,\n                     qname, supportsBodyElementNameOptimization));\n         }\n@@ -98,8 +115,8 @@ private void addTests(SOAPSpec spec) {\n         addTest(new org.apache.axiom.ts.soap.envelope.TestGetBodyWithParser(metaFactory, spec));\n         addTest(new org.apache.axiom.ts.soap.envelope.TestGetHeader(metaFactory, spec));\n         addTest(new org.apache.axiom.ts.soap.envelope.TestGetHeaderWithParser(metaFactory, spec));\n-        for (int i=0; i<qnames.length; i++) {\n-            QName qname = qnames[i];\n+        for (int i=0; i<generalQNames.length; i++) {\n+            QName qname = generalQNames[i];\n             addTest(new org.apache.axiom.ts.soap.envelope.TestGetSOAPBodyFirstElementLocalNameAndNS(metaFactory, spec, qname));\n             addTest(new org.apache.axiom.ts.soap.envelope.TestGetSOAPBodyFirstElementLocalNameAndNSWithParser(metaFactory, spec, qname));\n         }",
                "raw_url": "https://github.com/apache/ws-axiom/raw/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/SOAPTestSuiteBuilder.java",
                "sha": "04d802e4a7e08bca183b544738d7b428e5c12960",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ws-axiom/blob/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/FirstElementNameWithParserTestCase.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/FirstElementNameWithParserTestCase.java?ref=c7de27908ac6a1162d7bff7435ba57938f6c5854",
                "deletions": 0,
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/FirstElementNameWithParserTestCase.java",
                "patch": "@@ -49,6 +49,7 @@ public FirstElementNameWithParserTestCase(OMMetaFactory metaFactory,\n         this.qname = qname;\n         addTestProperty(\"prefix\", qname.getPrefix());\n         addTestProperty(\"uri\", qname.getNamespaceURI());\n+        addTestProperty(\"localName\", qname.getLocalPart());\n         this.supportsOptimization = supportsOptimization;\n     }\n ",
                "raw_url": "https://github.com/apache/ws-axiom/raw/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/FirstElementNameWithParserTestCase.java",
                "sha": "d38304d37eb90fd539b41054a65ed9d1efb86c5d",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/ws-axiom/blob/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/TestGetFaultNoFault.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/TestGetFaultNoFault.java?ref=c7de27908ac6a1162d7bff7435ba57938f6c5854",
                "deletions": 0,
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/TestGetFaultNoFault.java",
                "patch": "@@ -0,0 +1,27 @@\n+package org.apache.axiom.ts.soap.body;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.apache.axiom.om.OMMetaFactory;\n+import org.apache.axiom.soap.SOAPBody;\n+import org.apache.axiom.ts.soap.SOAPSpec;\n+import org.apache.axiom.ts.soap.SOAPTestCase;\n+\n+public class TestGetFaultNoFault extends SOAPTestCase {\n+    private final QName qname;\n+    \n+    public TestGetFaultNoFault(OMMetaFactory metaFactory, SOAPSpec spec, QName qname) {\n+        super(metaFactory, spec);\n+        this.qname = qname;\n+        addTestProperty(\"prefix\", qname.getPrefix());\n+        addTestProperty(\"uri\", qname.getNamespaceURI());\n+        addTestProperty(\"localName\", qname.getLocalPart());\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        SOAPBody body = soapFactory.getDefaultEnvelope().getBody();\n+        body.addChild(soapFactory.createOMElement(\n+                qname.getLocalPart(), qname.getNamespaceURI(), qname.getPrefix()));\n+        assertNull(body.getFault());\n+    }\n+}",
                "raw_url": "https://github.com/apache/ws-axiom/raw/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/TestGetFaultNoFault.java",
                "sha": "422534b18ea1e3125e246069f2fe27ced27c6945",
                "status": "added"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/ws-axiom/blob/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/TestHasFaultNoFault.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/TestHasFaultNoFault.java?ref=c7de27908ac6a1162d7bff7435ba57938f6c5854",
                "deletions": 0,
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/TestHasFaultNoFault.java",
                "patch": "@@ -0,0 +1,27 @@\n+package org.apache.axiom.ts.soap.body;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.apache.axiom.om.OMMetaFactory;\n+import org.apache.axiom.soap.SOAPBody;\n+import org.apache.axiom.ts.soap.SOAPSpec;\n+import org.apache.axiom.ts.soap.SOAPTestCase;\n+\n+public class TestHasFaultNoFault extends SOAPTestCase {\n+    private final QName qname;\n+    \n+    public TestHasFaultNoFault(OMMetaFactory metaFactory, SOAPSpec spec, QName qname) {\n+        super(metaFactory, spec);\n+        this.qname = qname;\n+        addTestProperty(\"prefix\", qname.getPrefix());\n+        addTestProperty(\"uri\", qname.getNamespaceURI());\n+        addTestProperty(\"localName\", qname.getLocalPart());\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        SOAPBody body = soapFactory.getDefaultEnvelope().getBody();\n+        body.addChild(soapFactory.createOMElement(\n+                qname.getLocalPart(), qname.getNamespaceURI(), qname.getPrefix()));\n+        assertFalse(body.hasFault());\n+    }\n+}",
                "raw_url": "https://github.com/apache/ws-axiom/raw/c7de27908ac6a1162d7bff7435ba57938f6c5854/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/soap/body/TestHasFaultNoFault.java",
                "sha": "a0183a89b9f8fe3f5cd002daf99574b6e69d6d1e",
                "status": "added"
            }
        ],
        "message": "Fixed a couple of potential NPEs in the hasFault and getFault methods of the SOAPBody implementations.",
        "parent": "https://github.com/apache/ws-axiom/commit/5231ed5429fd47dee9c7818c2fa47cf6160f4c0c",
        "patched_files": [
            "FirstElementNameWithParserTestCase.java",
            "SOAPBodyImpl.java",
            "SOAPTestSuiteBuilder.java"
        ],
        "repo": "ws-axiom",
        "unit_tests": [
            "TestGetFaultNoFault.java",
            "TestHasFaultNoFault.java"
        ]
    },
    "ws-axiom_d49ab20": {
        "bug_id": "ws-axiom_d49ab20",
        "commit": "https://github.com/apache/ws-axiom/commit/d49ab202444f0184e2757c398c60aa7a0a079ba7",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/ws-axiom/blob/d49ab202444f0184e2757c398c60aa7a0a079ba7/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/factory/OMDOMFactory.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/factory/OMDOMFactory.java?ref=d49ab202444f0184e2757c398c60aa7a0a079ba7",
                "deletions": 3,
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/factory/OMDOMFactory.java",
                "patch": "@@ -387,13 +387,17 @@ public OMProcessingInstruction createOMProcessingInstruction(\n             OMContainer parent, String piTarget, String piData) {\n         ProcessingInstructionImpl pi =\n             new ProcessingInstructionImpl(getDocumentFromParent(parent), piTarget, piData, this);\n-        parent.addChild(pi);\n+        if (parent != null) {\n+            parent.addChild(pi);\n+        }\n         return pi;\n     }\n \n     public OMComment createOMComment(OMContainer parent, String content) {\n         CommentImpl comment = new CommentImpl(getDocumentFromParent(parent), content, this);\n-        parent.addChild(comment);\n+        if (parent != null) {\n+            parent.addChild(comment);\n+        }\n         return comment;\n     }\n \n@@ -407,7 +411,10 @@ public OMDocument createOMDocument(OMXMLParserWrapper builder) {\n     }\n \n     private DocumentImpl getDocumentFromParent(OMContainer parent) {\n-        if (parent instanceof DocumentImpl) {\n+        if (parent == null) {\n+            // TODO: this is really a hack; we should make OMDOMFactory stateless\n+            return (DocumentImpl)createOMDocument();\n+        } else if (parent instanceof DocumentImpl) {\n             return (DocumentImpl) parent;\n         } else {\n             return (DocumentImpl) ((ParentNode) parent).getOwnerDocument();",
                "raw_url": "https://github.com/apache/ws-axiom/raw/d49ab202444f0184e2757c398c60aa7a0a079ba7/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/factory/OMDOMFactory.java",
                "sha": "7deeeb5b3cdd671d0db277a922aa3d79c9320685",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/ws-axiom/blob/d49ab202444f0184e2757c398c60aa7a0a079ba7/modules/axiom-dom/src/test/java/org/apache/axiom/om/impl/dom/OMImplementationTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/test/java/org/apache/axiom/om/impl/dom/OMImplementationTest.java?ref=d49ab202444f0184e2757c398c60aa7a0a079ba7",
                "deletions": 3,
                "filename": "modules/axiom-dom/src/test/java/org/apache/axiom/om/impl/dom/OMImplementationTest.java",
                "patch": "@@ -85,9 +85,6 @@ public static TestSuite suite() {\n         // TODO: investigate why this is not working with DOOM\n         builder.exclude(TestGetChildrenWithName4.class);\n \n-        // TODO: there seems to be an issue with OMFactory in this case\n-        builder.exclude(org.apache.axiom.ts.om.pi.TestDigest.class);\n-        \n         // TODO: if there is a comment node surrounded by text, then these text nodes need to be merged\n         builder.exclude(TestDigest.class, \"(|(file=digest3.xml)(file=digest4.xml))\");\n         ",
                "raw_url": "https://github.com/apache/ws-axiom/raw/d49ab202444f0184e2757c398c60aa7a0a079ba7/modules/axiom-dom/src/test/java/org/apache/axiom/om/impl/dom/OMImplementationTest.java",
                "sha": "a5d7af9c2985c8380ca192246da66e04aa253431",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ws-axiom/blob/d49ab202444f0184e2757c398c60aa7a0a079ba7/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/OMTestSuiteBuilder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/OMTestSuiteBuilder.java?ref=d49ab202444f0184e2757c398c60aa7a0a079ba7",
                "deletions": 0,
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/OMTestSuiteBuilder.java",
                "patch": "@@ -188,6 +188,7 @@ protected void addTests() {\n         addTest(new org.apache.axiom.ts.om.element.TestSetTextQNameWithEmptyPrefix(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestSetTextQNameWithoutNamespace(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestUndeclarePrefix(metaFactory));\n+        addTest(new org.apache.axiom.ts.om.factory.TestCreateOMCommentWithoutParent(metaFactory));\n         for (int i=0; i<OMElementCreator.INSTANCES.length; i++) {\n             OMElementCreator creator = OMElementCreator.INSTANCES[i];\n             if (creator.isSupportsDefaultNamespace()) {\n@@ -204,6 +205,7 @@ protected void addTests() {\n         addTest(new org.apache.axiom.ts.om.factory.TestCreateOMElementWithNullURIAndPrefix(metaFactory));\n         addTest(new org.apache.axiom.ts.om.factory.TestCreateOMNamespace(metaFactory));\n         addTest(new org.apache.axiom.ts.om.factory.TestCreateOMNamespaceWithNullURI(metaFactory));\n+        addTest(new org.apache.axiom.ts.om.factory.TestCreateOMProcessingInstructionWithoutParent(metaFactory));\n         addTest(new org.apache.axiom.ts.om.factory.TestCreateOMText(metaFactory));\n         addTest(new org.apache.axiom.ts.om.factory.TestCreateOMTextFromDataHandlerProvider(metaFactory));\n         addTest(new org.apache.axiom.ts.om.namespace.TestEquals(metaFactory));",
                "raw_url": "https://github.com/apache/ws-axiom/raw/d49ab202444f0184e2757c398c60aa7a0a079ba7/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/OMTestSuiteBuilder.java",
                "sha": "9beb9659cbff564a9b15e94dcca38aaeab642372",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/ws-axiom/blob/d49ab202444f0184e2757c398c60aa7a0a079ba7/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/factory/TestCreateOMCommentWithoutParent.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/factory/TestCreateOMCommentWithoutParent.java?ref=d49ab202444f0184e2757c398c60aa7a0a079ba7",
                "deletions": 0,
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/factory/TestCreateOMCommentWithoutParent.java",
                "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.axiom.ts.om.factory;\n+\n+import org.apache.axiom.om.OMComment;\n+import org.apache.axiom.om.OMMetaFactory;\n+import org.apache.axiom.ts.AxiomTestCase;\n+\n+public class TestCreateOMCommentWithoutParent extends AxiomTestCase {\n+    public TestCreateOMCommentWithoutParent(OMMetaFactory metaFactory) {\n+        super(metaFactory);\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        OMComment comment = metaFactory.getOMFactory().createOMComment(null, \"my comment\");\n+        assertNull(comment.getParent());\n+        assertEquals(\"my comment\", comment.getValue());\n+    }\n+}",
                "raw_url": "https://github.com/apache/ws-axiom/raw/d49ab202444f0184e2757c398c60aa7a0a079ba7/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/factory/TestCreateOMCommentWithoutParent.java",
                "sha": "d965dab6a910836fcdc8ae96ac79cb6debb1674e",
                "status": "added"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/ws-axiom/blob/d49ab202444f0184e2757c398c60aa7a0a079ba7/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/factory/TestCreateOMProcessingInstructionWithoutParent.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/factory/TestCreateOMProcessingInstructionWithoutParent.java?ref=d49ab202444f0184e2757c398c60aa7a0a079ba7",
                "deletions": 0,
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/factory/TestCreateOMProcessingInstructionWithoutParent.java",
                "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.axiom.ts.om.factory;\n+\n+import org.apache.axiom.om.OMMetaFactory;\n+import org.apache.axiom.om.OMProcessingInstruction;\n+import org.apache.axiom.ts.AxiomTestCase;\n+\n+public class TestCreateOMProcessingInstructionWithoutParent extends AxiomTestCase {\n+    public TestCreateOMProcessingInstructionWithoutParent(OMMetaFactory metaFactory) {\n+        super(metaFactory);\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        OMProcessingInstruction pi = metaFactory.getOMFactory().createOMProcessingInstruction(null, \"mypi\", \"data\");\n+        assertNull(pi.getParent());\n+        assertEquals(\"mypi\", pi.getTarget());\n+        assertEquals(\"data\", pi.getValue());\n+    }\n+}",
                "raw_url": "https://github.com/apache/ws-axiom/raw/d49ab202444f0184e2757c398c60aa7a0a079ba7/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/factory/TestCreateOMProcessingInstructionWithoutParent.java",
                "sha": "53cbf3d21577cff7eeda59f8beff4772076df4c4",
                "status": "added"
            }
        ],
        "message": "Fixed an issue in DOOM causing a NPE when attempting to create an OMComment or OMProcessingInstruction without a parent.",
        "parent": "https://github.com/apache/ws-axiom/commit/46577906748ab74078363b193c67dd5495228b7e",
        "patched_files": [
            "OMDOMFactory.java",
            "OMTestSuiteBuilder.java"
        ],
        "repo": "ws-axiom",
        "unit_tests": [
            "TestCreateOMProcessingInstructionWithoutParent.java",
            "OMImplementationTest.java",
            "TestCreateOMCommentWithoutParent.java"
        ]
    }
}