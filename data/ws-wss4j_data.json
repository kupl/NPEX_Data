[{"commit": "https://github.com/apache/ws-wss4j/commit/5810cb6c6a83754b23c849c765702cbc0b9ad1e6", "parent": "https://github.com/apache/ws-wss4j/commit/cf68610df3827c517f4564a56b3f3c1644e0016d", "message": "NPE guard for encryption crypto properties", "bug_id": "ws-wss4j_1", "file": [{"additions": 3, "raw_url": "https://github.com/apache/ws-wss4j/raw/5810cb6c6a83754b23c849c765702cbc0b9ad1e6/ws-security-dom/src/main/java/org/apache/wss4j/dom/message/WSSecEncrypt.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/5810cb6c6a83754b23c849c765702cbc0b9ad1e6/ws-security-dom/src/main/java/org/apache/wss4j/dom/message/WSSecEncrypt.java", "sha": "499bf3037ca85a5fa0a99ba4e0c1f4fde8fd0823", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-dom/src/main/java/org/apache/wss4j/dom/message/WSSecEncrypt.java?ref=5810cb6c6a83754b23c849c765702cbc0b9ad1e6", "patch": "@@ -126,6 +126,9 @@ public void prepare(Crypto crypto) throws WSSecurityException {\n             } else {\n                 X509Certificate remoteCert = getUseThisCert();\n                 if (remoteCert == null) {\n+                    if (crypto == null) {\n+                        throw new WSSecurityException(WSSecurityException.ErrorCode.FAILURE, \"encryptionCryptoFailure\");\n+                    }\n                     CryptoType cryptoType = null;\n                     if (keyIdentifierType == WSConstants.ENDPOINT_KEY_IDENTIFIER) {\n                         cryptoType = new CryptoType(CryptoType.TYPE.ENDPOINT);", "filename": "ws-security-dom/src/main/java/org/apache/wss4j/dom/message/WSSecEncrypt.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/62eff4b7ae84cb5bb02128da2d525d670b358c7f", "parent": "https://github.com/apache/ws-wss4j/commit/e74e4b07294beed79f19ac62a881eaba222a8314", "message": "NPE fix", "bug_id": "ws-wss4j_2", "file": [{"additions": 4, "raw_url": "https://github.com/apache/ws-wss4j/raw/62eff4b7ae84cb5bb02128da2d525d670b358c7f/ws-security-common/src/main/java/org/apache/wss4j/common/saml/SamlAssertionWrapper.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/62eff4b7ae84cb5bb02128da2d525d670b358c7f/ws-security-common/src/main/java/org/apache/wss4j/common/saml/SamlAssertionWrapper.java", "sha": "afdf1a28a51a88d9b6f5c6e19522d173ce53cab3", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-common/src/main/java/org/apache/wss4j/common/saml/SamlAssertionWrapper.java?ref=62eff4b7ae84cb5bb02128da2d525d670b358c7f", "patch": "@@ -503,7 +503,10 @@ public void signAssertion(String issuerKeyName, String issuerKeyPassword,\n         // prepare to sign the SAML token\n         CryptoType cryptoType = new CryptoType(CryptoType.TYPE.ALIAS);\n         cryptoType.setAlias(issuerKeyName);\n-        X509Certificate[] issuerCerts = issuerCrypto.getX509Certificates(cryptoType);\n+        X509Certificate[] issuerCerts = null;\n+        if (issuerCrypto != null) {\n+            issuerCerts = issuerCrypto.getX509Certificates(cryptoType);\n+        }\n         if (issuerCerts == null || issuerCerts.length == 0) {\n             throw new WSSecurityException(WSSecurityException.ErrorCode.FAILURE, \"empty\",\n                 new Object[] {\"No issuer certs were found to sign the SAML Assertion using issuer name: \"", "filename": "ws-security-common/src/main/java/org/apache/wss4j/common/saml/SamlAssertionWrapper.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/4365d11113d2a7a5fe8499f034fd53887be97c8c", "parent": "https://github.com/apache/ws-wss4j/commit/200060895d1e4ca31882cdd2b097c4d61f58a574", "message": "NPE fix", "bug_id": "ws-wss4j_3", "file": [{"additions": 3, "raw_url": "https://github.com/apache/ws-wss4j/raw/4365d11113d2a7a5fe8499f034fd53887be97c8c/ws-security-common/src/main/java/org/apache/wss4j/common/crypto/Merlin.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/4365d11113d2a7a5fe8499f034fd53887be97c8c/ws-security-common/src/main/java/org/apache/wss4j/common/crypto/Merlin.java", "sha": "fa5cd027aea2cb034b10bbc03127b0fd978bd322", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-common/src/main/java/org/apache/wss4j/common/crypto/Merlin.java?ref=4365d11113d2a7a5fe8499f034fd53887be97c8c", "patch": "@@ -1280,6 +1280,9 @@ private Object convertSubjectToPrincipal(String subjectDN) {\n      * @return an X509 Certificate (chain) that corresponds to the identifier\n      */\n     private X509Certificate[] getX509Certificates(String identifier) throws WSSecurityException {\n+        if (identifier == null) {\n+            return null;\n+        }\n         Certificate[] certs = null;\n         try {\n             if (keystore != null) {", "filename": "ws-security-common/src/main/java/org/apache/wss4j/common/crypto/Merlin.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/8e84100169cbcf6b24738c670006416d8a9f82d8", "parent": "https://github.com/apache/ws-wss4j/commit/ab8004d7a0ef39b33bc2e61fc48566fded5b6da1", "message": "Avoid NPE", "bug_id": "ws-wss4j_4", "file": [{"additions": 6, "raw_url": "https://github.com/apache/ws-wss4j/raw/8e84100169cbcf6b24738c670006416d8a9f82d8/policy/src/main/java/org/apache/wss4j/policy/model/AbstractSecurityAssertion.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/8e84100169cbcf6b24738c670006416d8a9f82d8/policy/src/main/java/org/apache/wss4j/policy/model/AbstractSecurityAssertion.java", "sha": "0282063603d0bc6047e1cfe94cb8b863814557e9", "changes": 10, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/policy/src/main/java/org/apache/wss4j/policy/model/AbstractSecurityAssertion.java?ref=8e84100169cbcf6b24738c670006416d8a9f82d8", "patch": "@@ -172,10 +172,12 @@ public AbstractSecurityAssertion clone(Policy nestedPolicy) {\n \n     public boolean isAsserted(Map<QName, List<AssertionState>> assertionStatesMap) {\n         List<AssertionState> assertionStateList = assertionStatesMap.get(getName());\n-        for (int i = 0; i < assertionStateList.size(); i++) {\n-            AssertionState assertionState = assertionStateList.get(i);\n-            if (assertionState.getAssertion() == this && !assertionState.isAsserted()) {\n-                return false;\n+        if (assertionStateList != null) {\n+            for (int i = 0; i < assertionStateList.size(); i++) {\n+                AssertionState assertionState = assertionStateList.get(i);\n+                if (assertionState.getAssertion() == this && !assertionState.isAsserted()) {\n+                    return false;\n+                }\n             }\n         }\n         return true;", "filename": "policy/src/main/java/org/apache/wss4j/policy/model/AbstractSecurityAssertion.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/bce68e44472610df963d31d059f408fe6f428285", "parent": "https://github.com/apache/ws-wss4j/commit/301d8e8cf2295ffc8790cb3fe4774a7f40f6674c", "message": "NPE fix", "bug_id": "ws-wss4j_5", "file": [{"additions": 6, "raw_url": "https://github.com/apache/ws-wss4j/raw/bce68e44472610df963d31d059f408fe6f428285/ws-security-dom/src/main/java/org/apache/wss4j/dom/message/WSSecEncryptedKey.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/bce68e44472610df963d31d059f408fe6f428285/ws-security-dom/src/main/java/org/apache/wss4j/dom/message/WSSecEncryptedKey.java", "sha": "31a402b41946e3e3058364136df46c68e47ce15c", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-dom/src/main/java/org/apache/wss4j/dom/message/WSSecEncryptedKey.java?ref=bce68e44472610df963d31d059f408fe6f428285", "patch": "@@ -210,6 +210,12 @@ public void prepare(Document doc, Crypto crypto) throws WSSecurityException {\n         if (remoteCert == null) {\n             CryptoType cryptoType = new CryptoType(CryptoType.TYPE.ALIAS);\n             cryptoType.setAlias(user);\n+            if (crypto == null) {\n+                throw new WSSecurityException(\n+                                              WSSecurityException.ErrorCode.FAILURE,\n+                                              \"noUserCertsFound\",\n+                                              user, \"encryption\");\n+            }\n             X509Certificate[] certs = crypto.getX509Certificates(cryptoType);\n             if (certs == null || certs.length <= 0) {\n                 throw new WSSecurityException(", "filename": "ws-security-dom/src/main/java/org/apache/wss4j/dom/message/WSSecEncryptedKey.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/65a2442c98b5f9d3189461926f5309a21a64eb2c", "parent": "https://github.com/apache/ws-wss4j/commit/adcbd8e12777a6bbfb2f75260185824cdebf6cb7", "message": "NPE fix for BinarySecurity", "bug_id": "ws-wss4j_6", "file": [{"additions": 18, "raw_url": "https://github.com/apache/ws-wss4j/raw/65a2442c98b5f9d3189461926f5309a21a64eb2c/ws-security-common/src/main/java/org/apache/wss4j/common/token/BinarySecurity.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/65a2442c98b5f9d3189461926f5309a21a64eb2c/ws-security-common/src/main/java/org/apache/wss4j/common/token/BinarySecurity.java", "sha": "ff480b2d0752ec689cf71e3c0fdac45767475f1b", "changes": 20, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-common/src/main/java/org/apache/wss4j/common/token/BinarySecurity.java?ref=65a2442c98b5f9d3189461926f5309a21a64eb2c", "patch": "@@ -209,9 +209,25 @@ public void setToken(byte[] data) {\n      * \n      * @return the first text node.\n      */\n-    protected Text getFirstNode() {\n+    private Text getFirstNode() {\n         Node node = element.getFirstChild();\n-        return node != null && Node.TEXT_NODE == node.getNodeType() ? (Text) node : null;\n+        while (node != null && Node.TEXT_NODE != node.getNodeType()) {\n+            node = node.getNextSibling();\n+        }\n+        if (node instanceof Text) {\n+            return (Text)node;\n+        }\n+        \n+        // Otherwise we have no Text child. Just remove the child nodes + add a new text node\n+        node = element.getFirstChild();\n+        while (node != null) {\n+            Node nextNode = node.getNextSibling();\n+            element.removeChild(node);\n+            node = nextNode;\n+        }\n+        \n+        Node textNode = element.getOwnerDocument().createTextNode(\"\");\n+        return (Text)element.appendChild(textNode);\n     }\n \n     /**", "filename": "ws-security-common/src/main/java/org/apache/wss4j/common/token/BinarySecurity.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/013e6a9a7db11df4828d744d6f0a94eda8924267", "parent": "https://github.com/apache/ws-wss4j/commit/3074cf5fd6b61c1f03b20ffd098336af0cb4dca3", "message": "Avoid a few NPEs", "bug_id": "ws-wss4j_7", "file": [{"additions": 5, "raw_url": "https://github.com/apache/ws-wss4j/raw/013e6a9a7db11df4828d744d6f0a94eda8924267/ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/securityToken/X509IssuerSerialTokenImpl.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/013e6a9a7db11df4828d744d6f0a94eda8924267/ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/securityToken/X509IssuerSerialTokenImpl.java", "sha": "324438767e155951ca4710fb23c067f54e30a8f7", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/securityToken/X509IssuerSerialTokenImpl.java?ref=013e6a9a7db11df4828d744d6f0a94eda8924267", "patch": "@@ -57,8 +57,11 @@ protected String getAlias() throws XMLSecurityException {\n             cryptoType.setIssuerSerial(\n                     x509IssuerSerialType.getX509IssuerName(), x509IssuerSerialType.getX509SerialNumber()\n             );\n-            X509Certificate[] certs = getCrypto().getX509Certificates(cryptoType);\n-            setX509Certificates(certs);\n+            X509Certificate[] certs = null;\n+            if (getCrypto() != null) {\n+                certs = getCrypto().getX509Certificates(cryptoType);\n+                setX509Certificates(certs);\n+            }\n             if (certs == null || certs.length == 0) {\n                 throw new WSSecurityException(WSSecurityException.ErrorCode.SECURITY_TOKEN_UNAVAILABLE);\n             }", "filename": "ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/securityToken/X509IssuerSerialTokenImpl.java"}, {"additions": 1, "raw_url": "https://github.com/apache/ws-wss4j/raw/013e6a9a7db11df4828d744d6f0a94eda8924267/ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/securityToken/X509PKIPathv1SecurityTokenImpl.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/013e6a9a7db11df4828d744d6f0a94eda8924267/ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/securityToken/X509PKIPathv1SecurityTokenImpl.java", "sha": "7e5d57c7684d60cc5a1df6d8cfff5fc81ba88d97", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/securityToken/X509PKIPathv1SecurityTokenImpl.java?ref=013e6a9a7db11df4828d744d6f0a94eda8924267", "patch": "@@ -67,7 +67,7 @@ public X509PKIPathv1SecurityTokenImpl(\n \n     @Override\n     protected String getAlias() throws XMLSecurityException {\n-        if (this.alias == null) {\n+        if (this.alias == null && getCrypto() != null) {\n             this.alias = getCrypto().getX509Identifier(getX509Certificates()[0]);\n         }\n         return this.alias;", "filename": "ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/securityToken/X509PKIPathv1SecurityTokenImpl.java"}, {"additions": 4, "raw_url": "https://github.com/apache/ws-wss4j/raw/013e6a9a7db11df4828d744d6f0a94eda8924267/ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/securityToken/X509SKISecurityTokenImpl.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/013e6a9a7db11df4828d744d6f0a94eda8924267/ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/securityToken/X509SKISecurityTokenImpl.java", "sha": "04b4cd499c9609194dbc365118bb6ed5dcfb9315", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/securityToken/X509SKISecurityTokenImpl.java?ref=013e6a9a7db11df4828d744d6f0a94eda8924267", "patch": "@@ -48,7 +48,10 @@ protected String getAlias() throws XMLSecurityException {\n         if (this.alias == null) {\n             CryptoType cryptoType = new CryptoType(CryptoType.TYPE.SKI_BYTES);\n             cryptoType.setBytes(binaryContent);\n-            X509Certificate[] certs = getCrypto().getX509Certificates(cryptoType);\n+            X509Certificate[] certs = null;\n+            if (getCrypto() != null) {\n+                certs = getCrypto().getX509Certificates(cryptoType);\n+            }\n             if (certs == null || certs.length == 0) {\n                 throw new WSSecurityException(WSSecurityException.ErrorCode.SECURITY_TOKEN_UNAVAILABLE);\n             }", "filename": "ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/securityToken/X509SKISecurityTokenImpl.java"}, {"additions": 2, "raw_url": "https://github.com/apache/ws-wss4j/raw/013e6a9a7db11df4828d744d6f0a94eda8924267/ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/securityToken/X509SecurityTokenImpl.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/013e6a9a7db11df4828d744d6f0a94eda8924267/ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/securityToken/X509SecurityTokenImpl.java", "sha": "6c4c3ca21cb7c5c8362d48a8e7c3bbadb1263c5a", "changes": 5, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/securityToken/X509SecurityTokenImpl.java?ref=013e6a9a7db11df4828d744d6f0a94eda8924267", "patch": "@@ -95,7 +95,7 @@ public Key getKey(String algorithmURI, XMLSecurityConstants.AlgorithmUsage algor\n     public X509Certificate[] getX509Certificates() throws XMLSecurityException {\n         if (super.getX509Certificates() == null) {\n             String alias = getAlias();\n-            if (super.getX509Certificates() == null && alias != null) {\n+            if (alias != null) {\n                 CryptoType cryptoType = new CryptoType(CryptoType.TYPE.ALIAS);\n                 cryptoType.setAlias(alias);\n                 setX509Certificates(getCrypto().getX509Certificates(cryptoType));\n@@ -182,9 +182,8 @@ public TokenType getTokenType() {\n         TokenType storedTokenType = super.getTokenType();\n         // Just check to see whether the cert version is \"1\"\n         if (WSSecurityTokenConstants.X509V3Token.equals(storedTokenType)) {\n-            X509Certificate[] certs;\n             try {\n-                certs = super.getX509Certificates();\n+                X509Certificate[] certs = super.getX509Certificates();\n                 if (certs != null && certs.length > 0 && certs[0].getVersion() == 1) {\n                     return WSSecurityTokenConstants.X509V1Token;\n                 }", "filename": "ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/securityToken/X509SecurityTokenImpl.java"}, {"additions": 4, "raw_url": "https://github.com/apache/ws-wss4j/raw/013e6a9a7db11df4828d744d6f0a94eda8924267/ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/securityToken/X509ThumbprintSHA1SecurityTokenImpl.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/013e6a9a7db11df4828d744d6f0a94eda8924267/ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/securityToken/X509ThumbprintSHA1SecurityTokenImpl.java", "sha": "aab6f0e04b8c322dc876cba902b5f5a21d1d6d70", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/securityToken/X509ThumbprintSHA1SecurityTokenImpl.java?ref=013e6a9a7db11df4828d744d6f0a94eda8924267", "patch": "@@ -48,7 +48,10 @@ protected String getAlias() throws XMLSecurityException {\n         if (this.alias == null) {\n             CryptoType cryptoType = new CryptoType(CryptoType.TYPE.THUMBPRINT_SHA1);\n             cryptoType.setBytes(binaryContent);\n-            X509Certificate[] certs = getCrypto().getX509Certificates(cryptoType);\n+            X509Certificate[] certs = null;\n+            if (getCrypto() != null) {\n+                certs = getCrypto().getX509Certificates(cryptoType);\n+            }\n             if (certs == null || certs.length == 0) {\n                 throw new WSSecurityException(WSSecurityException.ErrorCode.SECURITY_TOKEN_UNAVAILABLE);\n             }", "filename": "ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/securityToken/X509ThumbprintSHA1SecurityTokenImpl.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/2d08606c2b7bf57792880a780643acbdc1ee2db4", "parent": "https://github.com/apache/ws-wss4j/commit/ebb10633a6742dcc6af99c34553c93c138147488", "message": "NPE fix", "bug_id": "ws-wss4j_8", "file": [{"additions": 4, "raw_url": "https://github.com/apache/ws-wss4j/raw/2d08606c2b7bf57792880a780643acbdc1ee2db4/ws-security-dom/src/main/java/org/apache/wss4j/dom/saml/WSSSAMLKeyInfoProcessor.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/2d08606c2b7bf57792880a780643acbdc1ee2db4/ws-security-dom/src/main/java/org/apache/wss4j/dom/saml/WSSSAMLKeyInfoProcessor.java", "sha": "fe2474e47501811a379c276bc460e81cec160117", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-dom/src/main/java/org/apache/wss4j/dom/saml/WSSSAMLKeyInfoProcessor.java?ref=2d08606c2b7bf57792880a780643acbdc1ee2db4", "patch": "@@ -71,6 +71,10 @@ public SAMLKeyInfo processSAMLKeyInfo(Element keyInfoElement) throws WSSecurityE\n         //\n         // First try to find an EncryptedKey, BinarySecret or a SecurityTokenReference via DOM\n         //\n+        if (keyInfoElement == null) {\n+            return null;\n+        }\n+        \n         Node node = keyInfoElement.getFirstChild();\n         while (node != null) {\n             if (Node.ELEMENT_NODE == node.getNodeType()) {", "filename": "ws-security-dom/src/main/java/org/apache/wss4j/dom/saml/WSSSAMLKeyInfoProcessor.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/6ed3486cbc109f02f71082fe052b77bcb4e6bf46", "parent": "https://github.com/apache/ws-wss4j/commit/7e0a5d20ab373e0442f0978457cc4be402c53d1e", "message": "Avoid some potential NPEs", "bug_id": "ws-wss4j_9", "file": [{"additions": 5, "raw_url": "https://github.com/apache/ws-wss4j/raw/6ed3486cbc109f02f71082fe052b77bcb4e6bf46/ws-security-common/src/main/java/org/apache/wss4j/common/saml/SamlAssertionWrapper.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/6ed3486cbc109f02f71082fe052b77bcb4e6bf46/ws-security-common/src/main/java/org/apache/wss4j/common/saml/SamlAssertionWrapper.java", "sha": "a92538787c9fceb8f9331051121d16f60efdfc2c", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-common/src/main/java/org/apache/wss4j/common/saml/SamlAssertionWrapper.java?ref=6ed3486cbc109f02f71082fe052b77bcb4e6bf46", "patch": "@@ -524,7 +524,7 @@ public void signAssertion(String issuerKeyName, String issuerKeyPassword,\n         CryptoType cryptoType = new CryptoType(CryptoType.TYPE.ALIAS);\n         cryptoType.setAlias(issuerKeyName);\n         X509Certificate[] issuerCerts = issuerCrypto.getX509Certificates(cryptoType);\n-        if (issuerCerts == null) {\n+        if (issuerCerts == null || issuerCerts.length == 0) {\n             throw new WSSecurityException(WSSecurityException.ErrorCode.FAILURE, \"empty\",\n                     \"No issuer certs were found to sign the SAML Assertion using issuer name: \"\n                             + issuerKeyName);\n@@ -548,6 +548,10 @@ public void signAssertion(String issuerKeyName, String issuerKeyPassword,\n         } catch (Exception ex) {\n             throw new WSSecurityException(WSSecurityException.ErrorCode.FAILURE, ex);\n         }\n+        if (privateKey == null) {\n+            throw new WSSecurityException(WSSecurityException.ErrorCode.FAILURE, \"empty\",\n+                    \"No private key was found using issuer name: \" + issuerKeyName);\n+        }\n \n         signature.setSignatureAlgorithm(sigAlgo);\n ", "filename": "ws-security-common/src/main/java/org/apache/wss4j/common/saml/SamlAssertionWrapper.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/3159586fe674d5264468aaf8782098887cac0802", "parent": "https://github.com/apache/ws-wss4j/commit/ab6ad974f1889a6516935630b388571d9b81727d", "message": "Fix potential NPE", "bug_id": "ws-wss4j_10", "file": [{"additions": 1, "raw_url": "https://github.com/apache/ws-wss4j/raw/3159586fe674d5264468aaf8782098887cac0802/ws-security-common/src/main/java/org/apache/wss4j/common/crypto/CryptoBase.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/3159586fe674d5264468aaf8782098887cac0802/ws-security-common/src/main/java/org/apache/wss4j/common/crypto/CryptoBase.java", "sha": "67d77bc849905e39c774ca583bac2173cc92eac2", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-common/src/main/java/org/apache/wss4j/common/crypto/CryptoBase.java?ref=3159586fe674d5264468aaf8782098887cac0802", "patch": "@@ -320,7 +320,7 @@ protected Object createBCX509Name(String s) {\n     matches(\n         final X509Certificate cert, final Collection<Pattern> subjectDNPatterns\n     ) {\n-        if (subjectDNPatterns.isEmpty()) {\n+        if (subjectDNPatterns == null || subjectDNPatterns.isEmpty()) {\n             LOG.warn(\"No Subject DN Certificate Constraints were defined. This could be a security issue\");\n         }\n         if (!subjectDNPatterns.isEmpty()) {", "filename": "ws-security-common/src/main/java/org/apache/wss4j/common/crypto/CryptoBase.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/4b43610c5ab5a091c3efd8049ceb9f81bac95cd3", "parent": "https://github.com/apache/ws-wss4j/commit/174bbf7b2a6bc46579b8be1713d4986f40b55181", "message": "Fixing NPE", "bug_id": "ws-wss4j_11", "file": [{"additions": 1, "raw_url": "https://github.com/apache/ws-wss4j/raw/4b43610c5ab5a091c3efd8049ceb9f81bac95cd3/ws-security-dom/src/main/java/org/apache/wss4j/dom/processor/EncryptedKeyProcessor.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/4b43610c5ab5a091c3efd8049ceb9f81bac95cd3/ws-security-dom/src/main/java/org/apache/wss4j/dom/processor/EncryptedKeyProcessor.java", "sha": "1d9ce54ffd250beef9cbc54b85da9b7e60dc15b2", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-dom/src/main/java/org/apache/wss4j/dom/processor/EncryptedKeyProcessor.java?ref=4b43610c5ab5a091c3efd8049ceb9f81bac95cd3", "patch": "@@ -105,6 +105,7 @@\n         }\n         if (WSConstants.KEYTRANSPORT_RSA15.equals(encryptedKeyTransportMethod)\n             && !data.isAllowRSA15KeyTransportAlgorithm()\n+            && algorithmSuite != null\n             && !algorithmSuite.getKeyWrapAlgorithms().contains(WSConstants.KEYTRANSPORT_RSA15)) {\n             LOG.debug(\n                 \"The Key transport method does not match the requirement\"", "filename": "ws-security-dom/src/main/java/org/apache/wss4j/dom/processor/EncryptedKeyProcessor.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/efd476e12a6d736a036d692525ba452cddfa204e", "parent": "https://github.com/apache/ws-wss4j/commit/88487a952848ea1c80faa66819b5801c338b82ef", "message": "Fixing some NPEs", "bug_id": "ws-wss4j_12", "file": [{"additions": 12, "raw_url": "https://github.com/apache/ws-wss4j/raw/efd476e12a6d736a036d692525ba452cddfa204e/ws-security-dom/src/main/java/org/apache/wss4j/dom/message/token/SecurityTokenReference.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/efd476e12a6d736a036d692525ba452cddfa204e/ws-security-dom/src/main/java/org/apache/wss4j/dom/message/token/SecurityTokenReference.java", "sha": "576bf0c0903a58ad2301338389111cc08753b9d3", "changes": 12, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-dom/src/main/java/org/apache/wss4j/dom/message/token/SecurityTokenReference.java?ref=efd476e12a6d736a036d692525ba452cddfa204e", "patch": "@@ -469,6 +469,10 @@ public Element getFirstElement() {\n      *         type was detected.\n      */\n     public X509Certificate[] getKeyIdentifier(Crypto crypto) throws WSSecurityException {\n+        if (crypto == null) {\n+            return null;\n+        }\n+        \n         Element elem = getFirstElement();\n         String value = elem.getAttributeNS(null, \"ValueType\");\n \n@@ -537,6 +541,10 @@ public String getKeyIdentifierEncodingType() {\n     }\n     \n     public X509Certificate getX509SKIAlias(Crypto crypto) throws WSSecurityException {\n+        if (crypto == null) {\n+            return null;\n+        }\n+        \n         if (skiBytes == null) {\n             skiBytes = getSKIBytes();\n             if (skiBytes == null) {\n@@ -609,6 +617,10 @@ public void setUnknownElement(Element unknownElement) {\n      * @return a certificate array or null if nothing found\n      */\n     public X509Certificate[] getX509IssuerSerial(Crypto crypto) throws WSSecurityException {\n+        if (crypto == null) {\n+            return null;\n+        }\n+        \n         if (issuerSerial == null) {\n             issuerSerial = getIssuerSerial();\n             if (issuerSerial == null) {", "filename": "ws-security-dom/src/main/java/org/apache/wss4j/dom/message/token/SecurityTokenReference.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/efd7d8f7e59e4686d984180718026b5f99be14f8", "parent": "https://github.com/apache/ws-wss4j/commit/36381e822a7f3227e7d2e70c5a1dec81a3a9c669", "message": "Configure BasicParserPool to avoid a NPE", "bug_id": "ws-wss4j_13", "file": [{"additions": 0, "raw_url": "https://github.com/apache/ws-wss4j/raw/efd7d8f7e59e4686d984180718026b5f99be14f8/ws-security-common/src/main/java/org/apache/wss4j/common/saml/OpenSAMLBootstrap.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/efd7d8f7e59e4686d984180718026b5f99be14f8/ws-security-common/src/main/java/org/apache/wss4j/common/saml/OpenSAMLBootstrap.java", "sha": "f696d7d760ef3d87e79e7e3cc92c0846ac4c5c55", "changes": 20, "status": "modified", "deletions": 20, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-common/src/main/java/org/apache/wss4j/common/saml/OpenSAMLBootstrap.java?ref=efd7d8f7e59e4686d984180718026b5f99be14f8", "patch": "@@ -95,24 +95,4 @@ public static synchronized void bootstrap() throws XMLConfigurationException {\n         }\n     }\n     \n-    \n-    /*\n-    protected static void initializeParserPool() throws ConfigurationException {\n-        StaticBasicParserPool pp = new StaticBasicParserPool();\n-        pp.setMaxPoolSize(50);\n-        \n-        Map<String, Boolean> features = new HashMap<String, Boolean>();\n-        features.put(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n-        features.put(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n-        pp.setBuilderFeatures(features);\n-        pp.setExpandEntityReferences(false);\n-        \n-        try {\n-            pp.initialize();\n-        } catch (XMLParserException e) {\n-            throw new ConfigurationException(\"Error initializing parser pool\", e);\n-        }\n-        Configuration.setParserPool(pp);\n-    }\n-    */\n }\n\\ No newline at end of file", "filename": "ws-security-common/src/main/java/org/apache/wss4j/common/saml/OpenSAMLBootstrap.java"}, {"additions": 9, "raw_url": "https://github.com/apache/ws-wss4j/raw/efd7d8f7e59e4686d984180718026b5f99be14f8/ws-security-common/src/main/java/org/apache/wss4j/common/saml/OpenSAMLUtil.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/efd7d8f7e59e4686d984180718026b5f99be14f8/ws-security-common/src/main/java/org/apache/wss4j/common/saml/OpenSAMLUtil.java", "sha": "f3faeee342e9912f55b8f2811ecfd09ef0d402b7", "changes": 10, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-common/src/main/java/org/apache/wss4j/common/saml/OpenSAMLUtil.java?ref=efd7d8f7e59e4686d984180718026b5f99be14f8", "patch": "@@ -21,6 +21,9 @@\n \n import javax.xml.namespace.QName;\n \n+import net.shibboleth.utilities.java.support.component.ComponentInitializationException;\n+import net.shibboleth.utilities.java.support.xml.BasicParserPool;\n+\n import org.apache.wss4j.common.crypto.WSProviderConfig;\n import org.apache.wss4j.common.ext.WSSecurityException;\n import org.opensaml.core.config.Configuration;\n@@ -90,11 +93,16 @@ public static synchronized void initSamlEngine() {\n                 marshallerFactory = XMLObjectProviderRegistrySupport.getMarshallerFactory();\n                 unmarshallerFactory = XMLObjectProviderRegistrySupport.getUnmarshallerFactory();\n                 \n+                BasicParserPool pp = new BasicParserPool();\n+                pp.setMaxPoolSize(50);\n+                pp.initialize();\n+                providerRegistry.setParserPool(pp);\n+                \n                 samlEngineInitialized = true;\n                 if (LOG.isDebugEnabled()) {\n                     LOG.debug(\"opensaml3 library bootstrap complete\");\n                 }\n-            } catch (XMLConfigurationException ex) {\n+            } catch (XMLConfigurationException | ComponentInitializationException ex) {\n                 LOG.error(\"Unable to bootstrap the opensaml3 library - all SAML operations will fail\", ex);\n             }\n         }", "filename": "ws-security-common/src/main/java/org/apache/wss4j/common/saml/OpenSAMLUtil.java"}, {"additions": 25, "raw_url": "https://github.com/apache/ws-wss4j/raw/efd7d8f7e59e4686d984180718026b5f99be14f8/ws-security-dom/src/test/java/org/apache/wss4j/dom/saml/SamlTokenTest.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/efd7d8f7e59e4686d984180718026b5f99be14f8/ws-security-dom/src/test/java/org/apache/wss4j/dom/saml/SamlTokenTest.java", "sha": "f29a1caf18b317ebb5a3737ae263835dccc732c9", "changes": 25, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-dom/src/test/java/org/apache/wss4j/dom/saml/SamlTokenTest.java?ref=efd7d8f7e59e4686d984180718026b5f99be14f8", "patch": "@@ -871,6 +871,31 @@ public void testAssertionWrapper() throws Exception {\n         assertEquals(assertionString, secondAssertionString);\n     }\n     \n+    @org.junit.Test\n+    public void testAssertionWrapperNoDocument() throws Exception {\n+        SAML1CallbackHandler callbackHandler = new SAML1CallbackHandler();\n+        callbackHandler.setStatement(SAML1CallbackHandler.Statement.AUTHN);\n+        callbackHandler.setIssuer(\"www.example.com\");\n+        \n+        SAMLCallback samlCallback = new SAMLCallback();\n+        SAMLUtil.doSAMLCallback(callbackHandler, samlCallback);\n+        SamlAssertionWrapper samlAssertion = new SamlAssertionWrapper(samlCallback);\n+        \n+        String assertionString = DOM2Writer.nodeToString(samlAssertion.toDOM(null));\n+        \n+        // Convert String to DOM + into an assertionWrapper\n+        InputStream in = new ByteArrayInputStream(assertionString.getBytes());\n+        \n+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+        dbf.setNamespaceAware(true);\n+        Document newDoc = dbf.newDocumentBuilder().parse(in);\n+        \n+        SamlAssertionWrapper newAssertion = \n+            new SamlAssertionWrapper(newDoc.getDocumentElement());\n+        String secondAssertionString = newAssertion.assertionToString();\n+        assertEquals(assertionString, secondAssertionString);\n+    }\n+    \n     @org.junit.Test\n     public void testRequiredSubjectConfirmationMethod() throws Exception {\n         SAML2CallbackHandler callbackHandler = new SAML2CallbackHandler();", "filename": "ws-security-dom/src/test/java/org/apache/wss4j/dom/saml/SamlTokenTest.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/ddd3293dc804be6663e40f5efb189c4978a8aee4", "parent": "https://github.com/apache/ws-wss4j/commit/74a9d8ff2cc2a784e1917c846dfda6fe183e3add", "message": "Avoid potential NPE", "bug_id": "ws-wss4j_14", "file": [{"additions": 1, "raw_url": "https://github.com/apache/ws-wss4j/raw/ddd3293dc804be6663e40f5efb189c4978a8aee4/ws-security-common/src/main/java/org/apache/wss4j/common/saml/SAMLUtil.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/ddd3293dc804be6663e40f5efb189c4978a8aee4/ws-security-common/src/main/java/org/apache/wss4j/common/saml/SAMLUtil.java", "sha": "223ce7f0017a878e0f0252d86c727aead8c596b3", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-common/src/main/java/org/apache/wss4j/common/saml/SAMLUtil.java?ref=ddd3293dc804be6663e40f5efb189c4978a8aee4", "patch": "@@ -144,7 +144,7 @@ public static SAMLKeyInfo getCredentialFromSubject(\n                 samlSubject = authzStmt.getSubject();\n             }\n             \n-            if (samlSubject != null) {\n+            if (samlSubject != null && samlSubject.getSubjectConfirmation() != null) {\n                 Element sub = samlSubject.getSubjectConfirmation().getDOM();\n                 Element keyInfoElement = \n                     XMLUtils.getDirectChildElement(sub, \"KeyInfo\", SIG_NS);", "filename": "ws-security-common/src/main/java/org/apache/wss4j/common/saml/SAMLUtil.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/f9910346b6f116ad25e1d3e2bdcb7ae515c0759a", "parent": "https://github.com/apache/ws-wss4j/commit/7b1a6594b7a9a2212c11360f05d8b4b5ed491ead", "message": "Fixing possible NPE", "bug_id": "ws-wss4j_15", "file": [{"additions": 2, "raw_url": "https://github.com/apache/ws-wss4j/raw/f9910346b6f116ad25e1d3e2bdcb7ae515c0759a/ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/processor/output/SAMLTokenOutputProcessor.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/f9910346b6f116ad25e1d3e2bdcb7ae515c0759a/ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/processor/output/SAMLTokenOutputProcessor.java", "sha": "0ce449e512350f79dff39293746b10bd94c5cf79", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/processor/output/SAMLTokenOutputProcessor.java?ref=f9910346b6f116ad25e1d3e2bdcb7ae515c0759a", "patch": "@@ -384,7 +384,8 @@ public void processEvent(XMLSecEvent xmlSecEvent, OutputProcessorChain outputPro\n \n                 OutputProcessorChain subOutputProcessorChain = outputProcessorChain.createSubChain(this);\n                 if (senderVouches && getSecurityProperties().getSignatureKeyIdentifier() ==\n-                        WSSecurityTokenConstants.KeyIdentifier_SecurityTokenDirectReference) {\n+                        WSSecurityTokenConstants.KeyIdentifier_SecurityTokenDirectReference\n+                        && securityToken != null) {\n \n                     WSSUtils.updateSecurityHeaderOrder(\n                             outputProcessorChain, WSSConstants.TAG_wsse_BinarySecurityToken, getAction(), false);", "filename": "ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/processor/output/SAMLTokenOutputProcessor.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/5b5643647abd377a048c5e1814f7ff5114dac76b", "parent": "https://github.com/apache/ws-wss4j/commit/ed6ea3e7831f5c1892946b7e715e8cc94e46ed6f", "message": "NPE guard.", "bug_id": "ws-wss4j_16", "file": [{"additions": 5, "raw_url": "https://github.com/apache/ws-wss4j/raw/5b5643647abd377a048c5e1814f7ff5114dac76b/src/main/java/org/apache/ws/security/str/SignatureSTRParser.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/5b5643647abd377a048c5e1814f7ff5114dac76b/src/main/java/org/apache/ws/security/str/SignatureSTRParser.java", "sha": "b02a25846b11b1c4b7721215c66c0c83a9ca2e75", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/str/SignatureSTRParser.java?ref=5b5643647abd377a048c5e1814f7ff5114dac76b", "patch": "@@ -457,6 +457,11 @@ private void processPreviousResult(\n                 BSPEnforcer.checkSamlTokenBSPCompliance(secRef, assertion);\n             }\n             SAMLKeyInfo keyInfo = assertion.getSubjectKeyInfo();\n+            if (keyInfo == null) {\n+                throw new WSSecurityException(\n+                    WSSecurityException.FAILURE, \"invalidSAMLsecurity\"\n+                );\n+            }\n             X509Certificate[] foundCerts = keyInfo.getCerts();\n             if (foundCerts != null) {\n                 certs = new X509Certificate[]{foundCerts[0]};", "filename": "src/main/java/org/apache/ws/security/str/SignatureSTRParser.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/da45de1bb74e1baa874bd9ceecaa1eec39c70be2", "parent": "https://github.com/apache/ws-wss4j/commit/18fc87ed7038d8238de63e8c8aeb8d09d17fd7be", "message": "NPE guard.", "bug_id": "ws-wss4j_17", "file": [{"additions": 6, "raw_url": "https://github.com/apache/ws-wss4j/raw/da45de1bb74e1baa874bd9ceecaa1eec39c70be2/src/main/java/org/apache/ws/security/saml/SAMLUtil.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/da45de1bb74e1baa874bd9ceecaa1eec39c70be2/src/main/java/org/apache/ws/security/saml/SAMLUtil.java", "sha": "fc3367a7355655e0237ba7ebeb2951d5b64c7d25", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/saml/SAMLUtil.java?ref=da45de1bb74e1baa874bd9ceecaa1eec39c70be2", "patch": "@@ -100,6 +100,12 @@ public static AssertionWrapper getAssertionFromKeyIdentifier(\n                     strElement.getOwnerDocument(), wsDocInfo,\n                     request.getCallbackHandler(), keyIdentifierValue, type\n                 );\n+            \n+            if (token == null) {\n+                throw new WSSecurityException(\n+                    WSSecurityException.FAILURE, \"invalidSAMLsecurity\"\n+                );\n+            }\n             Processor proc = request.getWssConfig().getProcessor(WSSecurityEngine.SAML_TOKEN);\n             List<WSSecurityEngineResult> samlResult =\n                 proc.handleToken(token, request, wsDocInfo);", "filename": "src/main/java/org/apache/ws/security/saml/SAMLUtil.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/ee1b1fb323fdb99e7bc87cbfca61bdde1fc89899", "parent": "https://github.com/apache/ws-wss4j/commit/1d2262ffb4d1762d130474b809e5ace1492340bd", "message": "Fix for a NPE in KerberosSecurity", "bug_id": "ws-wss4j_18", "file": [{"additions": 3, "raw_url": "https://github.com/apache/ws-wss4j/raw/ee1b1fb323fdb99e7bc87cbfca61bdde1fc89899/ws-security-dom/src/main/java/org/apache/wss4j/dom/message/token/KerberosSecurity.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/ee1b1fb323fdb99e7bc87cbfca61bdde1fc89899/ws-security-dom/src/main/java/org/apache/wss4j/dom/message/token/KerberosSecurity.java", "sha": "753f42562a7b8334ee64931f87879ce0852f76b0", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-dom/src/main/java/org/apache/wss4j/dom/message/token/KerberosSecurity.java?ref=ee1b1fb323fdb99e7bc87cbfca61bdde1fc89899", "patch": "@@ -232,7 +232,9 @@ public void retrieveServiceTicket(\n                 secretKey = new SecretKeySpec(sessionKey.getEncoded(), sessionKey.getAlgorithm());\n             } else {\n                 KerberosTicket serviceTicket = getKerberosTicket(clientSubject, tgt);\n-                secretKey = serviceTicket.getSessionKey();\n+                if (serviceTicket != null) {\n+                    secretKey = serviceTicket.getSessionKey();\n+                }\n             }\n \n             setToken(krbCtx.getKerberosToken());", "filename": "ws-security-dom/src/main/java/org/apache/wss4j/dom/message/token/KerberosSecurity.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/79cf43a698cbaf8bfc0d3a14888b5cbdbaa1c5f8", "parent": "https://github.com/apache/ws-wss4j/commit/064b03279e94aa79b7a1baf9ac79fe07313256c6", "message": "Fix for possible NPE", "bug_id": "ws-wss4j_19", "file": [{"additions": 5, "raw_url": "https://github.com/apache/ws-wss4j/raw/79cf43a698cbaf8bfc0d3a14888b5cbdbaa1c5f8/src/main/java/org/apache/ws/security/message/token/UsernameToken.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/79cf43a698cbaf8bfc0d3a14888b5cbdbaa1c5f8/src/main/java/org/apache/ws/security/message/token/UsernameToken.java", "sha": "456cb776045f6bd8e0487e877cba6af7a24c96a2", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/message/token/UsernameToken.java?ref=79cf43a698cbaf8bfc0d3a14888b5cbdbaa1c5f8", "patch": "@@ -511,6 +511,11 @@ public void setRawPassword(RequestData data) throws WSSecurityException {\n                 getName(), getPassword(), getPasswordType(), \n                 WSPasswordCallback.USERNAME_TOKEN, data\n             );\n+        \n+        if (data.getCallbackHandler() == null) {\n+            LOG.debug(\"CallbackHandler is null\");\n+            throw new WSSecurityException(WSSecurityException.FAILED_AUTHENTICATION);\n+        }\n         try {\n             data.getCallbackHandler().handle(new Callback[]{pwCb});\n         } catch (IOException e) {", "filename": "src/main/java/org/apache/ws/security/message/token/UsernameToken.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/2f68bddbbcf1af16cf56a13e04ee1cbceafaaf71", "parent": "https://github.com/apache/ws-wss4j/commit/dbec5a5d92c36e94e77402c3838d7bc2964e7180", "message": "Fixing potential NPE", "bug_id": "ws-wss4j_20", "file": [{"additions": 1, "raw_url": "https://github.com/apache/ws-wss4j/raw/2f68bddbbcf1af16cf56a13e04ee1cbceafaaf71/src/main/java/org/apache/ws/security/message/WSSecEncrypt.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/2f68bddbbcf1af16cf56a13e04ee1cbceafaaf71/src/main/java/org/apache/ws/security/message/WSSecEncrypt.java", "sha": "b971cfba7a899042cf3994d88992a941c5ffca72", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/message/WSSecEncrypt.java?ref=2f68bddbbcf1af16cf56a13e04ee1cbceafaaf71", "patch": "@@ -444,7 +444,7 @@ private static String encryptElement(\n             config.getIdAllocator().createId(\"ED-\", elementToEncrypt);\n         try {\n             String headerId = \"\";\n-            if (modifier.equals(\"Header\")) {\n+            if (\"Header\".equals(modifier)) {\n                 Element elem = \n                     doc.createElementNS(\n                         WSConstants.WSSE11_NS, \"wsse11:\" + WSConstants.ENCRYPTED_HEADER", "filename": "src/main/java/org/apache/ws/security/message/WSSecEncrypt.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/8ec5ad88807f0d65fe646a655f8eb3cc0c1c9f83", "parent": "https://github.com/apache/ws-wss4j/commit/97155dcd50191800c57df84eab33f6998ce73996", "message": "Add an NPE guard", "bug_id": "ws-wss4j_21", "file": [{"additions": 4, "raw_url": "https://github.com/apache/ws-wss4j/raw/8ec5ad88807f0d65fe646a655f8eb3cc0c1c9f83/src/main/java/org/apache/ws/security/handler/RequestData.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/8ec5ad88807f0d65fe646a655f8eb3cc0c1c9f83/src/main/java/org/apache/ws/security/handler/RequestData.java", "sha": "a6f3b71b58339cea914c752997c63a9e278a7a58", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/handler/RequestData.java?ref=8ec5ad88807f0d65fe646a655f8eb3cc0c1c9f83", "patch": "@@ -399,6 +399,9 @@ public CallbackHandler getCallbackHandler() {\n     }\n \n     public Validator getValidator(QName qName) throws WSSecurityException {\n-        return wssConfig.getValidator(qName);\n+        if (wssConfig != null)  {\n+            return wssConfig.getValidator(qName);\n+        }\n+        return null;\n     }\n }", "filename": "src/main/java/org/apache/ws/security/handler/RequestData.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/a6dda1f194b5adb6dc803042218e06a87dfb91a3", "parent": "https://github.com/apache/ws-wss4j/commit/3616e9893426a3ad1b418b5927394f554e8cda3c", "message": "Avoiding a NPE in ReferenceListProcessor", "bug_id": "ws-wss4j_22", "file": [{"additions": 1, "raw_url": "https://github.com/apache/ws-wss4j/raw/a6dda1f194b5adb6dc803042218e06a87dfb91a3/ws-security-dom/src/main/java/org/apache/wss4j/dom/processor/ReferenceListProcessor.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/a6dda1f194b5adb6dc803042218e06a87dfb91a3/ws-security-dom/src/main/java/org/apache/wss4j/dom/processor/ReferenceListProcessor.java", "sha": "6694ccbad28830e926bb301b9c5b075e83ff76f8", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-dom/src/main/java/org/apache/wss4j/dom/processor/ReferenceListProcessor.java?ref=a6dda1f194b5adb6dc803042218e06a87dfb91a3", "patch": "@@ -229,7 +229,7 @@ private static void checkBSPCompliance(\n             bspEnforcer.handleBSPRule(BSPRule.R5424);\n         }\n         \n-        if (!WSConstants.WSSE_NS.equals(child.getNamespaceURI()) || \n+        if (child == null || !WSConstants.WSSE_NS.equals(child.getNamespaceURI()) || \n             !SecurityTokenReference.SECURITY_TOKEN_REFERENCE.equals(child.getLocalName())) {\n             bspEnforcer.handleBSPRule(BSPRule.R5426);\n         }", "filename": "ws-security-dom/src/main/java/org/apache/wss4j/dom/processor/ReferenceListProcessor.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/4892ec12a9a7d7eba57b863a55d8f9c0ac769c82", "parent": "https://github.com/apache/ws-wss4j/commit/f142999a49890a9f904613ab08cd77cd0f8ddaf6", "message": "Fix NPE in SAML Signature code", "bug_id": "ws-wss4j_23", "file": [{"additions": 5, "raw_url": "https://github.com/apache/ws-wss4j/raw/4892ec12a9a7d7eba57b863a55d8f9c0ac769c82/ws-security-dom/src/main/java/org/apache/wss4j/dom/saml/WSSecSignatureSAML.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/4892ec12a9a7d7eba57b863a55d8f9c0ac769c82/ws-security-dom/src/main/java/org/apache/wss4j/dom/saml/WSSecSignatureSAML.java", "sha": "a156d6ad1d55bbef4d957306474bcbffad43a2da", "changes": 8, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-dom/src/main/java/org/apache/wss4j/dom/saml/WSSecSignatureSAML.java?ref=4892ec12a9a7d7eba57b863a55d8f9c0ac769c82", "patch": "@@ -265,9 +265,11 @@ public void prepare(\n                             samlAssertion, new WSSSAMLKeyInfoProcessor(data, wsDocInfo),\n                             userCrypto, data.getCallbackHandler()\n                     );\n-                publicKey = samlKeyInfo.getPublicKey();\n-                certs = samlKeyInfo.getCerts();\n-                wsDocInfo.setCrypto(userCrypto);\n+                if (samlKeyInfo != null) {\n+                    publicKey = samlKeyInfo.getPublicKey();\n+                    certs = samlKeyInfo.getCerts();\n+                    wsDocInfo.setCrypto(userCrypto);\n+                }\n             }\n         }\n         if ((certs == null || certs.length == 0 || certs[0] == null) ", "filename": "ws-security-dom/src/main/java/org/apache/wss4j/dom/saml/WSSecSignatureSAML.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/359105f46fdc587830d3b1524b0f4e8692afeffd", "parent": "https://github.com/apache/ws-wss4j/commit/91e88ebe1d9f7c22b46c9dd393af85c4b7f0552e", "message": "Fix bad NPE under debug", "bug_id": "ws-wss4j_24", "file": [{"additions": 1, "raw_url": "https://github.com/apache/ws-wss4j/raw/359105f46fdc587830d3b1524b0f4e8692afeffd/src/org/apache/ws/axis/security/WSDoAllSender.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/359105f46fdc587830d3b1524b0f4e8692afeffd/src/org/apache/ws/axis/security/WSDoAllSender.java", "sha": "8431b93d7cf18c2bc014723625042437d04b6c55", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/org/apache/ws/axis/security/WSDoAllSender.java?ref=359105f46fdc587830d3b1524b0f4e8692afeffd", "patch": "@@ -51,7 +51,7 @@\n     public void invoke(MessageContext mc) throws AxisFault {\n \n         doDebug = log.isDebugEnabled();\n-        if (doDebug) {\n+        if (doDebug && mc.getCurrentMessage() != null && mc.getCurrentMessage().getMessageType() != null) {\n             log.debug(\"WSDoAllSender: enter invoke() with msg type: \"\n                     + mc.getCurrentMessage().getMessageType());\n         }", "filename": "src/org/apache/ws/axis/security/WSDoAllSender.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/357b39090cb1aa69c84b2f3545c50bb0b70bbd4a", "parent": "https://github.com/apache/ws-wss4j/commit/510dec150cc430c3ce3430377e3422c91655561c", "message": "Avoid NPE in SAML Out code", "bug_id": "ws-wss4j_25", "file": [{"additions": 4, "raw_url": "https://github.com/apache/ws-wss4j/raw/357b39090cb1aa69c84b2f3545c50bb0b70bbd4a/ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/processor/output/SAMLTokenOutputProcessor.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/357b39090cb1aa69c84b2f3545c50bb0b70bbd4a/ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/processor/output/SAMLTokenOutputProcessor.java", "sha": "5a7f2aa3804e923a710629953f52489db2c632f2", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/processor/output/SAMLTokenOutputProcessor.java?ref=357b39090cb1aa69c84b2f3545c50bb0b70bbd4a", "patch": "@@ -93,7 +93,10 @@ public void processEvent(XMLSecEvent xmlSecEvent, final OutputProcessorChain out\n             if (senderVouches) {\n                 CryptoType cryptoType = new CryptoType(CryptoType.TYPE.ALIAS);\n                 cryptoType.setAlias(samlCallback.getIssuerKeyName());\n-                X509Certificate[] certificates = samlCallback.getIssuerCrypto().getX509Certificates(cryptoType);\n+                X509Certificate[] certificates = null;\n+                if (samlCallback.getIssuerCrypto() != null) {\n+                    certificates = samlCallback.getIssuerCrypto().getX509Certificates(cryptoType);\n+                }\n                 if (certificates == null) {\n                     throw new WSSecurityException(WSSecurityException.ErrorCode.FAILURE,\n                             \"empty\", \"No issuer certs were found to sign the SAML Assertion using issuer name: \"", "filename": "ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/processor/output/SAMLTokenOutputProcessor.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/0bcca62479576ca9deb625f8b64f185998c0f50a", "parent": "https://github.com/apache/ws-wss4j/commit/d3801218d4371d6a8d72242699403183360880b6", "message": "Avoid some NPEs in the OpenSAMLUtil", "bug_id": "ws-wss4j_26", "file": [{"additions": 8, "raw_url": "https://github.com/apache/ws-wss4j/raw/0bcca62479576ca9deb625f8b64f185998c0f50a/src/main/java/org/apache/ws/security/saml/ext/OpenSAMLUtil.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/0bcca62479576ca9deb625f8b64f185998c0f50a/src/main/java/org/apache/ws/security/saml/ext/OpenSAMLUtil.java", "sha": "2e18f8e211551d2e755084fc31409915114d882f", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/saml/ext/OpenSAMLUtil.java?ref=0bcca62479576ca9deb625f8b64f185998c0f50a", "patch": "@@ -83,7 +83,15 @@ public static synchronized void initSamlEngine() {\n      * @throws UnmarshallingException\n      */\n     public static XMLObject fromDom(Element root) throws WSSecurityException {\n+        if (root == null) {\n+            LOG.debug(\"Attempting to unmarshal a null element!\");\n+            throw new WSSecurityException(\"Error unmarshalling a SAML assertion\");\n+        }\n         Unmarshaller unmarshaller = unmarshallerFactory.getUnmarshaller(root);\n+        if (unmarshaller == null) {\n+            LOG.debug(\"Unable to find an unmarshaller for element: \" + root.getLocalName());\n+            throw new WSSecurityException(\"Error unmarshalling a SAML assertion\");\n+        }\n         try {\n             return unmarshaller.unmarshall(root);\n         } catch (UnmarshallingException ex) {", "filename": "src/main/java/org/apache/ws/security/saml/ext/OpenSAMLUtil.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/7720a8744541a98b4a60fc07236595295a7d885a", "parent": "https://github.com/apache/ws-wss4j/commit/3ae29bf2a5393b7fee60b611c0031d40c891a254", "message": "Adding a fix for a NPE.", "bug_id": "ws-wss4j_27", "file": [{"additions": 5, "raw_url": "https://github.com/apache/ws-wss4j/raw/7720a8744541a98b4a60fc07236595295a7d885a/src/main/java/org/apache/ws/security/WSDocInfo.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/7720a8744541a98b4a60fc07236595295a7d885a/src/main/java/org/apache/ws/security/WSDocInfo.java", "sha": "92f37bf4cd72c0bea2d2fa808015542f65dc7ebd", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/WSDocInfo.java?ref=7720a8744541a98b4a60fc07236595295a7d885a", "patch": "@@ -54,7 +54,11 @@ public WSDocInfo(Document doc) {\n         // be that the \"owner\" document of any child elements is an internal Document, rather\n         // than the SOAPPart. This is the case for the SUN SAAJ implementation.\n         //\n-        this.doc = doc.getDocumentElement().getOwnerDocument();\n+        if (doc != null && doc.getDocumentElement() != null) {\n+            this.doc = doc.getDocumentElement().getOwnerDocument();\n+        } else {\n+            this.doc = doc;\n+        }\n     }\n     \n     /**", "filename": "src/main/java/org/apache/ws/security/WSDocInfo.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/d7d8abda3475c75b7c3c534700a68a9b02d5c9ce", "parent": "https://github.com/apache/ws-wss4j/commit/6a7635465571f844c3d782580d0257601462ba59", "message": "Avoid a NPE when retrieving a SAML Assertion", "bug_id": "ws-wss4j_28", "file": [{"additions": 6, "raw_url": "https://github.com/apache/ws-wss4j/raw/d7d8abda3475c75b7c3c534700a68a9b02d5c9ce/src/main/java/org/apache/ws/security/saml/SAMLUtil.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/d7d8abda3475c75b7c3c534700a68a9b02d5c9ce/src/main/java/org/apache/ws/security/saml/SAMLUtil.java", "sha": "2b8e406d7b5f46b11d95b9e00fe548edd262c95f", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/saml/SAMLUtil.java?ref=d7d8abda3475c75b7c3c534700a68a9b02d5c9ce", "patch": "@@ -103,6 +103,11 @@ public static AssertionWrapper getAssertionFromKeyIdentifier(\n                     keyIdentifierValue, type\n                 );\n             if (token != null) {\n+                if (!\"Assertion\".equals(token.getLocalName())) {\n+                    throw new WSSecurityException(\n+                        WSSecurityException.FAILURE, \"invalidSAMLsecurity\"\n+                    );\n+                }\n                 return new AssertionWrapper(token);\n             }\n             token = \n@@ -111,7 +116,7 @@ public static AssertionWrapper getAssertionFromKeyIdentifier(\n                     request.getCallbackHandler(), keyIdentifierValue, type\n                 );\n             \n-            if (token == null) {\n+            if (token == null || !\"Assertion\".equals(token.getLocalName())) {\n                 throw new WSSecurityException(\n                     WSSecurityException.FAILURE, \"invalidSAMLsecurity\"\n                 );", "filename": "src/main/java/org/apache/ws/security/saml/SAMLUtil.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/064b03279e94aa79b7a1baf9ac79fe07313256c6", "parent": "https://github.com/apache/ws-wss4j/commit/aca50deabb88ae5d2cf0f7c4691fd7597fa42518", "message": "Fix for a NPE when verifying a PublicKey", "bug_id": "ws-wss4j_29", "file": [{"additions": 3, "raw_url": "https://github.com/apache/ws-wss4j/raw/064b03279e94aa79b7a1baf9ac79fe07313256c6/src/main/java/org/apache/ws/security/components/crypto/Merlin.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/064b03279e94aa79b7a1baf9ac79fe07313256c6/src/main/java/org/apache/ws/security/components/crypto/Merlin.java", "sha": "dcea00a8e930960f1f713473ae96d7f31d93bf7a", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/components/crypto/Merlin.java?ref=064b03279e94aa79b7a1baf9ac79fe07313256c6", "patch": "@@ -1235,6 +1235,9 @@ public boolean verifyTrust(PublicKey publicKey) throws WSSecurityException {\n      * Find the Public Key in a keystore. \n      */\n     private boolean findPublicKeyInKeyStore(PublicKey publicKey, KeyStore keyStoreToSearch) {\n+        if (keyStoreToSearch == null) {\n+            return false;\n+        }\n         try {\n             for (Enumeration<String> e = keyStoreToSearch.aliases(); e.hasMoreElements();) {\n                 String alias = e.nextElement();", "filename": "src/main/java/org/apache/ws/security/components/crypto/Merlin.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/cef07e87ec887418e44e0b594242ed49c88a1f26", "parent": "https://github.com/apache/ws-wss4j/commit/e5de3513290226df7844d6dcd738d530dac3d344", "message": "Fixed a NPE if an EncryptionPart modifier is not set.", "bug_id": "ws-wss4j_30", "file": [{"additions": 1, "raw_url": "https://github.com/apache/ws-wss4j/raw/cef07e87ec887418e44e0b594242ed49c88a1f26/src/main/java/org/apache/ws/security/message/WSSecEncrypt.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/cef07e87ec887418e44e0b594242ed49c88a1f26/src/main/java/org/apache/ws/security/message/WSSecEncrypt.java", "sha": "ba9ac7667e30f5ac16a33caa027b5eb9b77e1415", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/message/WSSecEncrypt.java?ref=cef07e87ec887418e44e0b594242ed49c88a1f26", "patch": "@@ -475,7 +475,7 @@ private static String encryptElement(\n         KeyInfo keyInfo\n     ) throws WSSecurityException {\n \n-        boolean content = modifier.equals(\"Content\") ? true : false;\n+        boolean content = \"Content\".equals(modifier) ? true : false;\n         //\n         // Encrypt data, and set necessary attributes in xenc:EncryptedData\n         //", "filename": "src/main/java/org/apache/ws/security/message/WSSecEncrypt.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/e9b9213109509e17eb1fc94590f93ad11ff79a18", "parent": "https://github.com/apache/ws-wss4j/commit/ba53296868a301e79fa3d2d16106338c75ace8f7", "message": "[WSS-209] - Applied patch for NPE in AbstractCrypto.getCryptoProvider().", "bug_id": "ws-wss4j_31", "file": [{"additions": 3, "raw_url": "https://github.com/apache/ws-wss4j/raw/e9b9213109509e17eb1fc94590f93ad11ff79a18/src/org/apache/ws/security/components/crypto/AbstractCrypto.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/e9b9213109509e17eb1fc94590f93ad11ff79a18/src/org/apache/ws/security/components/crypto/AbstractCrypto.java", "sha": "46ae69d6a23c535b4ee4480d73ce52ab89095b35", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/org/apache/ws/security/components/crypto/AbstractCrypto.java?ref=e9b9213109509e17eb1fc94590f93ad11ff79a18", "patch": "@@ -262,6 +262,9 @@ public KeyStore load(InputStream input, String storepass, String provider, Strin\n     \n     protected String\n     getCryptoProvider() {\n+        if (properties == null) {\n+            return null;\n+        }\n         String provider = properties.getProperty(CRYPTO_PROVIDER);\n         if (provider == null) {\n             provider = properties.getProperty(OLD_CRYPTO_CERT_PROVIDER);", "filename": "src/org/apache/ws/security/components/crypto/AbstractCrypto.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/a2ab05557ee42f362b7e2a67d5bbc804ccc2fc7c", "parent": "https://github.com/apache/ws-wss4j/commit/8cc138d003d6544d617468c531c57c91df5cfdb4", "message": "Avoid NPE if a signed Assertion does not have a KeyInfo Element", "bug_id": "ws-wss4j_32", "file": [{"additions": 6, "raw_url": "https://github.com/apache/ws-wss4j/raw/a2ab05557ee42f362b7e2a67d5bbc804ccc2fc7c/ws-security-common/src/main/java/org/apache/wss4j/common/saml/SamlAssertionWrapper.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/a2ab05557ee42f362b7e2a67d5bbc804ccc2fc7c/ws-security-common/src/main/java/org/apache/wss4j/common/saml/SamlAssertionWrapper.java", "sha": "07de9afc014b031c2fb86ba39afdb2c13e2fa1b4", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-common/src/main/java/org/apache/wss4j/common/saml/SamlAssertionWrapper.java?ref=a2ab05557ee42f362b7e2a67d5bbc804ccc2fc7c", "patch": "@@ -542,6 +542,12 @@ public void verifySignature(\n         Signature sig = getSignature();\n         if (sig != null) {\n             KeyInfo keyInfo = sig.getKeyInfo();\n+            if (keyInfo == null) {\n+                throw new WSSecurityException(\n+                    WSSecurityException.ErrorCode.FAILURE, \"invalidSAMLsecurity\",\n+                    \"cannot get certificate or key\"\n+                );\n+            }\n             SAMLKeyInfo samlKeyInfo = \n                 SAMLUtil.getCredentialDirectlyFromKeyInfo(keyInfo.getDOM(), sigCrypto);\n             verifySignature(samlKeyInfo);", "filename": "ws-security-common/src/main/java/org/apache/wss4j/common/saml/SamlAssertionWrapper.java"}, {"additions": 6, "raw_url": "https://github.com/apache/ws-wss4j/raw/a2ab05557ee42f362b7e2a67d5bbc804ccc2fc7c/ws-security-dom/src/main/java/org/apache/wss4j/dom/processor/SAMLTokenProcessor.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/a2ab05557ee42f362b7e2a67d5bbc804ccc2fc7c/ws-security-dom/src/main/java/org/apache/wss4j/dom/processor/SAMLTokenProcessor.java", "sha": "ae85c035c1c3c333a97af463b158fc123a07b3b9", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-dom/src/main/java/org/apache/wss4j/dom/processor/SAMLTokenProcessor.java?ref=a2ab05557ee42f362b7e2a67d5bbc804ccc2fc7c", "patch": "@@ -137,6 +137,12 @@ public Credential handleSAMLToken(\n             \n             Signature sig = samlAssertion.getSignature();\n             KeyInfo keyInfo = sig.getKeyInfo();\n+            if (keyInfo == null) {\n+                throw new WSSecurityException(\n+                    WSSecurityException.ErrorCode.FAILURE, \"invalidSAMLsecurity\",\n+                    \"cannot get certificate or key\"\n+                );\n+            }\n             SAMLKeyInfo samlKeyInfo = \n                 SAMLUtil.getCredentialDirectlyFromKeyInfo(\n                     keyInfo.getDOM(), data.getSigVerCrypto()", "filename": "ws-security-dom/src/main/java/org/apache/wss4j/dom/processor/SAMLTokenProcessor.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/5e1b261a4aed4388316feb6e837c1a03b60c5333", "parent": "https://github.com/apache/ws-wss4j/commit/a78057b37ccab02e1e6388f4173d305a47001fc0", "message": "[WSS-319] - NPE when certificate identified by SKI can't be found\n - Patch applied, thanks", "bug_id": "ws-wss4j_33", "file": [{"additions": 3, "raw_url": "https://github.com/apache/ws-wss4j/raw/5e1b261a4aed4388316feb6e837c1a03b60c5333/src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/5e1b261a4aed4388316feb6e837c1a03b60c5333/src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java", "sha": "c43350a988d71e962bffd8ed718ebac5a47a3d41", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java?ref=5e1b261a4aed4388316feb6e837c1a03b60c5333", "patch": "@@ -483,7 +483,9 @@ public Element getFirstElement() {\n             }\n         } else if (SKI_URI.equals(value)) {\n             X509Certificate cert = getX509SKIAlias(crypto);\n-            return new X509Certificate[]{cert};\n+            if (cert != null) {\n+                return new X509Certificate[]{cert};\n+            }\n         } else if (THUMB_URI.equals(value)) {\n             Node node = getFirstElement().getFirstChild();\n             if (node == null) {", "filename": "src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/c46518da05c95319924e2b259ae68ad9e1858cd0", "parent": "https://github.com/apache/ws-wss4j/commit/3df181a278a19d2c92300dc4b34efa1b29e2f4ef", "message": "Avoid a NPE when parsing a SAML Assertion with no (expected) Secret Key", "bug_id": "ws-wss4j_34", "file": [{"additions": 5, "raw_url": "https://github.com/apache/ws-wss4j/raw/c46518da05c95319924e2b259ae68ad9e1858cd0/src/main/java/org/apache/ws/security/str/SecurityTokenRefSTRParser.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/c46518da05c95319924e2b259ae68ad9e1858cd0/src/main/java/org/apache/ws/security/str/SecurityTokenRefSTRParser.java", "sha": "a513c9f7029d9f05708b6bbb3577433defc55bdc", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/str/SecurityTokenRefSTRParser.java?ref=c46518da05c95319924e2b259ae68ad9e1858cd0", "patch": "@@ -216,8 +216,11 @@ public boolean isTrustedCredential() {\n         }\n         SAMLKeyInfo samlKi = \n             SAMLUtil.getCredentialFromSubject(assertion, data, wsDocInfo, bspCompliant);\n-        // TODO Handle malformed SAML tokens where they don't have the \n-        // secret in them\n+        if (samlKi == null) {\n+            throw new WSSecurityException(\n+                WSSecurityException.FAILED_CHECK, \"invalidSAMLToken\", new Object[] {\"No Secret Key\"}\n+            );\n+        }\n         return samlKi.getSecret();\n     }\n     ", "filename": "src/main/java/org/apache/ws/security/str/SecurityTokenRefSTRParser.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/fad321bef524b898c48fa054f22cd74cf0f3349b", "parent": "https://github.com/apache/ws-wss4j/commit/6d6fe32805e9450a6c7d825c8c0f11099f7ece14", "message": "Added a NPE guard and removed an erroneous key identifier check for SAML.", "bug_id": "ws-wss4j_35", "file": [{"additions": 3, "raw_url": "https://github.com/apache/ws-wss4j/raw/fad321bef524b898c48fa054f22cd74cf0f3349b/src/main/java/org/apache/ws/security/processor/BinarySecurityTokenProcessor.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/fad321bef524b898c48fa054f22cd74cf0f3349b/src/main/java/org/apache/ws/security/processor/BinarySecurityTokenProcessor.java", "sha": "f31a41d8107e1de47db910bfedbd9346e0b362d6", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/processor/BinarySecurityTokenProcessor.java?ref=fad321bef524b898c48fa054f22cd74cf0f3349b", "patch": "@@ -91,6 +91,9 @@\n      */\n     private X509Certificate[] getCertificatesTokenReference(BinarySecurity token, Crypto crypto)\n         throws WSSecurityException {\n+        if (crypto == null) {\n+            throw new WSSecurityException(WSSecurityException.FAILURE, \"noSigCryptoFile\");\n+        }\n         if (token instanceof PKIPathSecurity) {\n             return ((PKIPathSecurity) token).getX509Certificates(crypto);\n         } else if (token instanceof X509Security) {", "filename": "src/main/java/org/apache/ws/security/processor/BinarySecurityTokenProcessor.java"}, {"additions": 0, "raw_url": "https://github.com/apache/ws-wss4j/raw/fad321bef524b898c48fa054f22cd74cf0f3349b/src/main/java/org/apache/ws/security/saml/WSSecSignatureSAML.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/fad321bef524b898c48fa054f22cd74cf0f3349b/src/main/java/org/apache/ws/security/saml/WSSecSignatureSAML.java", "sha": "2a925e0c36510b7c80b70e35ec4c1012c5386428", "changes": 9, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/saml/WSSecSignatureSAML.java?ref=fad321bef524b898c48fa054f22cd74cf0f3349b", "patch": "@@ -382,15 +382,6 @@ public void prepare(\n             );\n         }\n         \n-        //\n-        // Test the keyIdentiferType - It must be a BST Direct Reference or an \n-        // X.509 Key Identifier\n-        //\n-        if (keyIdentifierType != WSConstants.X509_KEY_IDENTIFIER &&\n-            keyIdentifierType != WSConstants.BST_DIRECT_REFERENCE) {\n-            keyIdentifierType = WSConstants.X509_KEY_IDENTIFIER;\n-        }\n-\n         if (senderVouches) {\n             switch (keyIdentifierType) {\n             case WSConstants.BST_DIRECT_REFERENCE:", "filename": "src/main/java/org/apache/ws/security/saml/WSSecSignatureSAML.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/c29df5e5ae86425230a16e6a5b3e19bc11c629e4", "parent": "https://github.com/apache/ws-wss4j/commit/c25599feac4c17ade5b5d1f6fe986415d34bbf8d", "message": "[WSS-256] - Turned on BSP compliance by default, and fixed some failing tests and a NPE.", "bug_id": "ws-wss4j_36", "file": [{"additions": 1, "raw_url": "https://github.com/apache/ws-wss4j/raw/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/main/java/org/apache/ws/security/WSSConfig.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/main/java/org/apache/ws/security/WSSConfig.java", "sha": "47b6b43133dbce9f0658c1730037951d27386415", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/WSSConfig.java?ref=c29df5e5ae86425230a16e6a5b3e19bc11c629e4", "patch": "@@ -199,7 +199,7 @@\n         DEFAULT_VALIDATORS = java.util.Collections.unmodifiableMap(tmp);\n     }\n \n-    protected boolean wsiBSPCompliant = false;\n+    protected boolean wsiBSPCompliant = true;\n \n     /**\n      * Set the timestamp precision mode. If set to <code>true</code> then use", "filename": "src/main/java/org/apache/ws/security/WSSConfig.java"}, {"additions": 2, "raw_url": "https://github.com/apache/ws-wss4j/raw/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/main/java/org/apache/ws/security/message/WSSecSignatureBase.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/main/java/org/apache/ws/security/message/WSSecSignatureBase.java", "sha": "94461ae6d3fa749544a5066500954303411993dd", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/message/WSSecSignatureBase.java?ref=c29df5e5ae86425230a16e6a5b3e19bc11c629e4", "patch": "@@ -207,7 +207,8 @@\n     public List<String> getInclusivePrefixes(Element target, boolean excludeVisible) {\n         List<String> result = new ArrayList<String>();\n         Node parent = target;\n-        while (!(Node.DOCUMENT_NODE == parent.getParentNode().getNodeType())) {\n+        while (parent.getParentNode() != null &&\n+            !(Node.DOCUMENT_NODE == parent.getParentNode().getNodeType())) {\n             parent = parent.getParentNode();\n             NamedNodeMap attributes = parent.getAttributes();\n             for (int i = 0; i < attributes.getLength(); i++) {", "filename": "src/main/java/org/apache/ws/security/message/WSSecSignatureBase.java"}, {"additions": 6, "raw_url": "https://github.com/apache/ws-wss4j/raw/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/handler/SignatureConfirmationTest.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/handler/SignatureConfirmationTest.java", "sha": "412c1cbd1c9846dbd4e817718d579a482a7532c2", "changes": 8, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/test/java/org/apache/ws/security/handler/SignatureConfirmationTest.java?ref=c29df5e5ae86425230a16e6a5b3e19bc11c629e4", "patch": "@@ -274,11 +274,15 @@\n         }\n         \n         // Verify the results\n-        verify(doc);\n         \n-        // Now turn on BSP spec compliance\n+        // Turn off BSP spec compliance\n         WSSecurityEngine newEngine = new WSSecurityEngine();\n         WSSConfig config = WSSConfig.getNewInstance();\n+        config.setWsiBSPCompliant(false);\n+        newEngine.setWssConfig(config);\n+        newEngine.processSecurityHeader(doc, null, callbackHandler, crypto);\n+        \n+        // Now turn on BSP spec compliance\n         config.setWsiBSPCompliant(true);\n         newEngine.setWssConfig(config);\n         try {", "filename": "src/test/java/org/apache/ws/security/handler/SignatureConfirmationTest.java"}, {"additions": 4, "raw_url": "https://github.com/apache/ws-wss4j/raw/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/message/EncryptionTest.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/message/EncryptionTest.java", "sha": "0f94432533ee887be3747dedfc0961aa7d2f9c58", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/test/java/org/apache/ws/security/message/EncryptionTest.java?ref=c29df5e5ae86425230a16e6a5b3e19bc11c629e4", "patch": "@@ -529,11 +529,14 @@ public void testBadAttribute() throws Exception {\n             LOG.debug(outputString);\n         }\n         \n+        // Turn off BSP compliance\n         WSSecurityEngine newEngine = new WSSecurityEngine();\n+        WSSConfig wssConfig = WSSConfig.getNewInstance();\n+        wssConfig.setWsiBSPCompliant(false);\n+        newEngine.setWssConfig(wssConfig);\n         newEngine.processSecurityHeader(encryptedDoc, null, keystoreCallbackHandler, crypto);\n         \n         // Now turn on BSP compliance\n-        WSSConfig wssConfig = WSSConfig.getNewInstance();\n         wssConfig.setWsiBSPCompliant(true);\n         newEngine.setWssConfig(wssConfig);\n         try {", "filename": "src/test/java/org/apache/ws/security/message/EncryptionTest.java"}, {"additions": 6, "raw_url": "https://github.com/apache/ws-wss4j/raw/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/message/SignatureEncryptionTest.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/message/SignatureEncryptionTest.java", "sha": "9f416231b3461fe812cdb83606923085748b0d41", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/test/java/org/apache/ws/security/message/SignatureEncryptionTest.java?ref=c29df5e5ae86425230a16e6a5b3e19bc11c629e4", "patch": "@@ -24,6 +24,7 @@\n import org.apache.ws.security.WSConstants;\n import org.apache.ws.security.WSDataRef;\n import org.apache.ws.security.WSEncryptionPart;\n+import org.apache.ws.security.WSSConfig;\n import org.apache.ws.security.WSSecurityEngine;\n import org.apache.ws.security.WSSecurityEngineResult;\n import org.apache.ws.security.common.KeystoreCallbackHandler;\n@@ -349,7 +350,11 @@ public void testSigningEncryptionEmbedded() throws Exception {\n         \n         SecretKeyCallbackHandler secretKeyCallbackHandler = new SecretKeyCallbackHandler();\n         secretKeyCallbackHandler.setOutboundSecret(key);\n-        secEngine.processSecurityHeader(doc, null, secretKeyCallbackHandler, crypto);\n+        WSSecurityEngine engine = new WSSecurityEngine();\n+        WSSConfig config = WSSConfig.getNewInstance();\n+        config.setWsiBSPCompliant(false);\n+        engine.setWssConfig(config);\n+        engine.processSecurityHeader(doc, null, secretKeyCallbackHandler, crypto);\n         if (LOG.isDebugEnabled()) {\n             String outputString = \n                 org.apache.ws.security.util.XMLUtils.PrettyDocumentToString(doc);", "filename": "src/test/java/org/apache/ws/security/message/SignatureEncryptionTest.java"}, {"additions": 20, "raw_url": "https://github.com/apache/ws-wss4j/raw/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/message/SignatureKeyValueTest.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/message/SignatureKeyValueTest.java", "sha": "8a03ff3faf080b6cbe42b34966bb75315339f280", "changes": 36, "status": "modified", "deletions": 16, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/test/java/org/apache/ws/security/message/SignatureKeyValueTest.java?ref=c29df5e5ae86425230a16e6a5b3e19bc11c629e4", "patch": "@@ -23,6 +23,7 @@\n import org.apache.commons.logging.LogFactory;\n import org.apache.ws.security.PublicKeyPrincipal;\n import org.apache.ws.security.WSConstants;\n+import org.apache.ws.security.WSSConfig;\n import org.apache.ws.security.WSSecurityEngine;\n import org.apache.ws.security.WSSecurityEngineResult;\n import org.apache.ws.security.common.SOAPUtil;\n@@ -40,7 +41,6 @@\n  */\n public class SignatureKeyValueTest extends org.junit.Assert {\n     private static final Log LOG = LogFactory.getLog(SignatureKeyValueTest.class);\n-    private WSSecurityEngine secEngine = new WSSecurityEngine();\n     private Crypto crypto = CryptoFactory.getInstance(\"wss40.properties\");\n \n     /**\n@@ -63,7 +63,13 @@ public void testRSAKeyValue() throws Exception {\n         }\n         assertTrue(outputString.indexOf(\"RSAKeyValue\") != -1);\n         \n-        final List<WSSecurityEngineResult> results = verify(signedDoc);\n+        WSSecurityEngine secEngine = new WSSecurityEngine();\n+        WSSConfig config = WSSConfig.getNewInstance();\n+        config.setWsiBSPCompliant(false);\n+        secEngine.setWssConfig(config);\n+        final List<WSSecurityEngineResult> results = \n+            secEngine.processSecurityHeader(signedDoc, null, null, crypto);\n+\n         WSSecurityEngineResult actionResult = \n             WSSecurityUtil.fetchActionResult(results, WSConstants.SIGN);\n         assertTrue(actionResult != null);\n@@ -101,7 +107,11 @@ public void testBadRSAKeyValue() throws Exception {\n         assertTrue(outputString.indexOf(\"RSAKeyValue\") != -1);\n         \n         try {\n-            verify(signedDoc);\n+            WSSecurityEngine secEngine = new WSSecurityEngine();\n+            WSSConfig config = WSSConfig.getNewInstance();\n+            config.setWsiBSPCompliant(false);\n+            secEngine.setWssConfig(config);\n+            secEngine.processSecurityHeader(signedDoc, null, null, crypto);\n             fail(\"Failure expected on bad public key\");\n         } catch (Exception ex) {\n             // expected\n@@ -130,7 +140,13 @@ public void testDSAKeyValue() throws Exception {\n         }\n         assertTrue(outputString.indexOf(\"DSAKeyValue\") != -1);\n         \n-        final List<WSSecurityEngineResult> results = verify(signedDoc);\n+        WSSecurityEngine secEngine = new WSSecurityEngine();\n+        WSSConfig config = WSSConfig.getNewInstance();\n+        config.setWsiBSPCompliant(false);\n+        secEngine.setWssConfig(config);\n+        final List<WSSecurityEngineResult> results = \n+            secEngine.processSecurityHeader(signedDoc, null, null, crypto);\n+        \n         WSSecurityEngineResult actionResult = \n             WSSecurityUtil.fetchActionResult(results, WSConstants.SIGN);\n         assertTrue(actionResult != null);\n@@ -142,17 +158,5 @@ public void testDSAKeyValue() throws Exception {\n             ((PublicKeyPrincipal)principal).getPublicKey();\n         assertTrue(publicKey instanceof java.security.interfaces.DSAPublicKey);\n     }\n-\n-\n-    /**\n-     * Verifies the soap envelope\n-     * <p/>\n-     * \n-     * @param env soap envelope\n-     * @throws java.lang.Exception Thrown when there is a problem in verification\n-     */\n-    private List<WSSecurityEngineResult> verify(Document doc) throws Exception {\n-        return secEngine.processSecurityHeader(doc, null, null, crypto);\n-    }\n     \n }", "filename": "src/test/java/org/apache/ws/security/message/SignatureKeyValueTest.java"}, {"additions": 6, "raw_url": "https://github.com/apache/ws-wss4j/raw/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/message/SignatureTest.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/message/SignatureTest.java", "sha": "44a2ec2c0fdfb0ecec9d70e51249daa07dec58e0", "changes": 9, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/test/java/org/apache/ws/security/message/SignatureTest.java?ref=c29df5e5ae86425230a16e6a5b3e19bc11c629e4", "patch": "@@ -150,11 +150,14 @@ public void testSignatureInclusiveC14N() throws Exception {\n             LOG.debug(outputString);\n         }\n         \n-        verify(signedDoc);\n-        \n-        // Now turn on BSP spec compliance\n+        // Turn off BSP spec compliance\n         WSSecurityEngine newEngine = new WSSecurityEngine();\n         WSSConfig config = WSSConfig.getNewInstance();\n+        config.setWsiBSPCompliant(false);\n+        newEngine.setWssConfig(config);\n+        newEngine.processSecurityHeader(doc, null, null, crypto);\n+        \n+        // Now turn on BSP spec compliance\n         config.setWsiBSPCompliant(true);\n         newEngine.setWssConfig(config);\n         try {", "filename": "src/test/java/org/apache/ws/security/message/SignatureTest.java"}, {"additions": 1, "raw_url": "https://github.com/apache/ws-wss4j/raw/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/message/TimestampTest.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/message/TimestampTest.java", "sha": "c12fe68dd8251822ccc71275e1f1830b55cbcc2d", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/test/java/org/apache/ws/security/message/TimestampTest.java?ref=c29df5e5ae86425230a16e6a5b3e19bc11c629e4", "patch": "@@ -314,7 +314,7 @@ public void testMultipleTimestamps() throws Exception {\n         \n         // Turn off BSP compliance and the test should pass\n         wssConfig.setWsiBSPCompliant(false);\n-        verify(createdDoc, WSSConfig.getNewInstance());\n+        verify(createdDoc, wssConfig);\n     }\n     \n     /**", "filename": "src/test/java/org/apache/ws/security/message/TimestampTest.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/4e4728fa2bbf4c9d53e2df529d38694f80b76a84", "parent": "https://github.com/apache/ws-wss4j/commit/b307632ccdcb4b638a9f06e312a8a9a8b3d284d4", "message": "Add some NPE checks\nSupport custom settings for KeyIdentifier properies set in SecurityTokenReference", "bug_id": "ws-wss4j_37", "file": [{"additions": 1, "raw_url": "https://github.com/apache/ws-wss4j/raw/4e4728fa2bbf4c9d53e2df529d38694f80b76a84/src/org/apache/ws/security/WSConstants.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/4e4728fa2bbf4c9d53e2df529d38694f80b76a84/src/org/apache/ws/security/WSConstants.java", "sha": "6ab98c759303971e686e47cb11f45a36651758cc", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/org/apache/ws/security/WSConstants.java?ref=4e4728fa2bbf4c9d53e2df529d38694f80b76a84", "patch": "@@ -394,6 +394,7 @@\n      */\n     public static final int CUSTOM_SYMM_SIGNING_DIRECT = 11;\n     \n+    public static final int CUSTOM_KEY_IDENTIFIER = 12;\n     \n     public static final String ENCRYPTED_HEADER = \"EncryptedHeader\";\n ", "filename": "src/org/apache/ws/security/WSConstants.java"}, {"additions": 7, "raw_url": "https://github.com/apache/ws-wss4j/raw/4e4728fa2bbf4c9d53e2df529d38694f80b76a84/src/org/apache/ws/security/message/WSSecSignature.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/4e4728fa2bbf4c9d53e2df529d38694f80b76a84/src/org/apache/ws/security/message/WSSecSignature.java", "sha": "9f76063e0c4157460342999072b5fd3348b96808", "changes": 8, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/org/apache/ws/security/message/WSSecSignature.java?ref=4e4728fa2bbf4c9d53e2df529d38694f80b76a84", "patch": "@@ -297,7 +297,8 @@ public void prepare(Document doc, Crypto cr, WSSecHeader secHeader)\n         if (keyIdentifierType != WSConstants.UT_SIGNING\n             && keyIdentifierType != WSConstants.CUSTOM_SYMM_SIGNING\n             && keyIdentifierType != WSConstants.CUSTOM_SYMM_SIGNING_DIRECT\n-            && keyIdentifierType != WSConstants.ENCRYPTED_KEY_SHA1_IDENTIFIER) {\n+            && keyIdentifierType != WSConstants.ENCRYPTED_KEY_SHA1_IDENTIFIER\n+            && keyIdentifierType != WSConstants.CUSTOM_KEY_IDENTIFIER) {\n             certs = crypto.getCertificates(user);\n             if (certs == null || certs.length <= 0) {\n                 throw new WSSecurityException(\n@@ -438,6 +439,10 @@ public void prepare(Document doc, Crypto cr, WSSecHeader secHeader)\n             refCustd.setURI(this.customTokenId);\n             secRef.setReference(refCustd);\n             break;\n+        case WSConstants.CUSTOM_KEY_IDENTIFIER:\n+            secRef.setKeyIdentifier(customTokenValueType, customTokenId);\n+            break;\n+\n         default:\n             throw new WSSecurityException(WSSecurityException.FAILURE, \"unsupportedKeyId\");\n         }\n@@ -667,6 +672,7 @@ public void computeSignature() throws WSSecurityException {\n             if (keyIdentifierType == WSConstants.UT_SIGNING ||\n                     keyIdentifierType == WSConstants.CUSTOM_SYMM_SIGNING ||\n                     keyIdentifierType == WSConstants.CUSTOM_SYMM_SIGNING_DIRECT ||\n+                    keyIdentifierType == WSConstants.CUSTOM_KEY_IDENTIFIER || \n                     keyIdentifierType == WSConstants.ENCRYPTED_KEY_SHA1_IDENTIFIER) {\n                 sig.sign(sig.createSecretKey(secretKey));\n             } else {", "filename": "src/org/apache/ws/security/message/WSSecSignature.java"}, {"additions": 13, "raw_url": "https://github.com/apache/ws-wss4j/raw/4e4728fa2bbf4c9d53e2df529d38694f80b76a84/src/org/apache/ws/security/message/token/SecurityTokenReference.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/4e4728fa2bbf4c9d53e2df529d38694f80b76a84/src/org/apache/ws/security/message/token/SecurityTokenReference.java", "sha": "58f783c35361ca9a31a02ba3995efea24f756364", "changes": 20, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/org/apache/ws/security/message/token/SecurityTokenReference.java?ref=4e4728fa2bbf4c9d53e2df529d38694f80b76a84", "patch": "@@ -246,7 +246,7 @@ public void setKeyIdentifier(X509Certificate cert)\n         }\n         Text text = doc.createTextNode(Base64.encode(data));\n         \n-        createKeyIdentifier(doc, X509Security.X509_V3_TYPE, text);\n+        createKeyIdentifier(doc, X509Security.X509_V3_TYPE, text, true);\n     }\n \n     /**\n@@ -275,7 +275,7 @@ public void setKeyIdentifierSKI(X509Certificate cert, Crypto crypto)\n         byte data[] = crypto.getSKIBytesFromCert(cert);\n         \n         org.w3c.dom.Text text = doc.createTextNode(Base64.encode(data));\n-        createKeyIdentifier(doc, SKI_URI, text);        \n+        createKeyIdentifier(doc, SKI_URI, text, true);        \n     }\n \n     /**\n@@ -309,25 +309,31 @@ public void setKeyIdentifierThumb(X509Certificate cert) throws WSSecurityExcepti\n         byte[] data = sha.digest();\n \n         org.w3c.dom.Text text = doc.createTextNode(Base64.encode(data));\n-        createKeyIdentifier(doc, THUMB_URI, text);\n+        createKeyIdentifier(doc, THUMB_URI, text, true);\n     }\n     \n \n     public void setKeyIdentifierEncKeySHA1(String value) throws WSSecurityException {\n         Document doc = this.element.getOwnerDocument();\n         org.w3c.dom.Text text = doc.createTextNode(value);\n-        createKeyIdentifier(doc, ENC_KEY_SHA1_URI, text);\n+        createKeyIdentifier(doc, ENC_KEY_SHA1_URI, text, true);\n     }\n     \n     public void setSAMLKeyIdentifier(String keyIdVal) throws WSSecurityException {\n         Document doc = this.element.getOwnerDocument();\n-        createKeyIdentifier(doc, SAML_ID_URI, doc.createTextNode(keyIdVal));\n+        createKeyIdentifier(doc, SAML_ID_URI, doc.createTextNode(keyIdVal), false);\n+    }\n+    public void setKeyIdentifier(String valueType, String keyIdVal) throws WSSecurityException {\n+        Document doc = this.element.getOwnerDocument();\n+        createKeyIdentifier(doc, valueType, doc.createTextNode(keyIdVal), false);\n     }\n \n-    private void createKeyIdentifier(Document doc, String uri, Node node) {\n+    private void createKeyIdentifier(Document doc, String uri, Node node, boolean base64) {\n         Element keyId = doc.createElementNS(WSConstants.WSSE_NS, \"wsse:KeyIdentifier\");\n         keyId.setAttributeNS(null, \"ValueType\", uri);\n-        keyId.setAttributeNS(null, \"EncodingType\", BinarySecurity.BASE64_ENCODING);\n+        if (base64) {\n+            keyId.setAttributeNS(null, \"EncodingType\", BinarySecurity.BASE64_ENCODING);\n+        }\n \n         keyId.appendChild(node);\n         Element elem = getFirstElement();", "filename": "src/org/apache/ws/security/message/token/SecurityTokenReference.java"}, {"additions": 14, "raw_url": "https://github.com/apache/ws-wss4j/raw/4e4728fa2bbf4c9d53e2df529d38694f80b76a84/src/org/apache/ws/security/processor/EncryptedDataProcessor.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/4e4728fa2bbf4c9d53e2df529d38694f80b76a84/src/org/apache/ws/security/processor/EncryptedDataProcessor.java", "sha": "38d4fe224022bdb72c0ffe7510326dc08a8e44ba", "changes": 20, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/org/apache/ws/security/processor/EncryptedDataProcessor.java?ref=4e4728fa2bbf4c9d53e2df529d38694f80b76a84", "patch": "@@ -93,6 +93,7 @@ public void handleToken(\n         }\n         \n         Node previousSibling = elem.getPreviousSibling();\n+        Node parent = elem.getParentNode();\n         try {\n             xmlCipher.doFinal(elem.getOwnerDocument(), elem, false);\n         } catch (Exception e) {\n@@ -102,13 +103,20 @@ public void handleToken(\n         }\n         \n         // Get hold of the plain text element\n-        Element decryptedElem = (Element)previousSibling.getNextSibling();\n+        Element decryptedElem;\n+        if (previousSibling == null) {\n+            decryptedElem = (Element)parent.getFirstChild();\n+        } else {\n+            decryptedElem = (Element)previousSibling.getNextSibling();\n+        }\n         QName el = new QName(decryptedElem.getNamespaceURI(), decryptedElem.getLocalName());\n-        Processor proc = config.getProcessor(el);\n-        proc.handleToken(\n-            decryptedElem, crypto, decCrypto, cb, wsDocInfo, returnResults, config\n-        );\n-        wsDocInfo.setProcessor(proc);\n+        if (config != null) {\n+            Processor proc = config.getProcessor(el);\n+            proc.handleToken(\n+                             decryptedElem, crypto, decCrypto, cb, wsDocInfo, returnResults, config\n+            );\n+            wsDocInfo.setProcessor(proc);\n+        }\n     }\n \n }", "filename": "src/org/apache/ws/security/processor/EncryptedDataProcessor.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/14143cf0c8f9b51db753f7619713f71d799ac358", "parent": "https://github.com/apache/ws-wss4j/commit/98b81941fe820ceba1ec994bef09817b871d0e5c", "message": "Fixed a NPE and added the ability to reference a token via a KeyIdentifier in a DerivedKeyToken", "bug_id": "ws-wss4j_38", "file": [{"additions": 40, "raw_url": "https://github.com/apache/ws-wss4j/raw/14143cf0c8f9b51db753f7619713f71d799ac358/src/main/java/org/apache/ws/security/message/WSSecDerivedKeyBase.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/14143cf0c8f9b51db753f7619713f71d799ac358/src/main/java/org/apache/ws/security/message/WSSecDerivedKeyBase.java", "sha": "8b28bfdd0baad12d020ca75a1533d6af769b3e51", "changes": 55, "status": "modified", "deletions": 15, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/message/WSSecDerivedKeyBase.java?ref=14143cf0c8f9b51db753f7619713f71d799ac358", "patch": "@@ -222,23 +222,48 @@ public void prepare(Document doc) throws WSSecurityException, ConversationExcept\n         dkt.setID(dktId);\n         \n         if (strElem == null) {\n-            //Create the SecurityTokenRef to the Encrypted Key\n-            SecurityTokenReference strEncKey = new SecurityTokenReference(document);\n-            Reference ref = new Reference(document);\n+            SecurityTokenReference secRef = new SecurityTokenReference(document);\n+            String strUri = getWsConfig().getIdAllocator().createSecureId(\"STR-\", secRef);\n+            secRef.setID(strUri);\n             \n-            if (tokenIdDirectId) {\n-                ref.setURI(tokenIdentifier);\n-            } else {\n-                ref.setURI(\"#\" + tokenIdentifier);\n-            }\n-            if (customValueType != null && !\"\".equals(customValueType)) {\n-                ref.setValueType(customValueType);\n-            }\n-            if (!WSConstants.WSS_USERNAME_TOKEN_VALUE_TYPE.equals(customValueType)) {\n-                strEncKey.addTokenType(WSConstants.WSS_ENC_KEY_VALUE_TYPE);\n+            switch (keyIdentifierType) {\n+            case WSConstants.CUSTOM_KEY_IDENTIFIER:\n+                secRef.setKeyIdentifier(customValueType, tokenIdentifier);\n+                if (WSConstants.WSS_SAML_KI_VALUE_TYPE.equals(customValueType)) {\n+                    secRef.addTokenType(WSConstants.WSS_SAML_TOKEN_TYPE);\n+                } else if (WSConstants.WSS_SAML2_KI_VALUE_TYPE.equals(customValueType)) {\n+                    secRef.addTokenType(WSConstants.WSS_SAML2_TOKEN_TYPE);\n+                } else if (WSConstants.WSS_ENC_KEY_VALUE_TYPE.equals(customValueType)) {\n+                    secRef.addTokenType(WSConstants.WSS_ENC_KEY_VALUE_TYPE);\n+                }\n+                break;\n+            default:\n+                Reference ref = new Reference(document);\n+                \n+                if (tokenIdDirectId) {\n+                    ref.setURI(tokenIdentifier);\n+                } else {\n+                    ref.setURI(\"#\" + tokenIdentifier);\n+                }\n+                if (customValueType != null && !\"\".equals(customValueType)) {\n+                    ref.setValueType(customValueType);\n+                } \n+                if (WSConstants.WSS_SAML_KI_VALUE_TYPE.equals(customValueType)) {\n+                    secRef.addTokenType(WSConstants.WSS_SAML_TOKEN_TYPE);\n+                    ref.setValueType(customValueType);\n+                } else if (WSConstants.WSS_SAML2_KI_VALUE_TYPE.equals(customValueType)) {\n+                    secRef.addTokenType(WSConstants.WSS_SAML2_TOKEN_TYPE);\n+                } else if (WSConstants.WSS_ENC_KEY_VALUE_TYPE.equals(customValueType)) {\n+                    secRef.addTokenType(WSConstants.WSS_ENC_KEY_VALUE_TYPE);\n+                    ref.setValueType(customValueType);\n+                } else if (!WSConstants.WSS_USERNAME_TOKEN_VALUE_TYPE.equals(customValueType)) {\n+                    secRef.addTokenType(WSConstants.WSS_ENC_KEY_VALUE_TYPE);\n+                }\n+\n+                secRef.setReference(ref);\n             }\n-            strEncKey.setReference(ref);\n-            dkt.setSecurityTokenReference(strEncKey); \n+            \n+            dkt.setSecurityTokenReference(secRef); \n         } else {\n             dkt.setSecurityTokenReference(strElem);\n         }", "filename": "src/main/java/org/apache/ws/security/message/WSSecDerivedKeyBase.java"}, {"additions": 2, "raw_url": "https://github.com/apache/ws-wss4j/raw/14143cf0c8f9b51db753f7619713f71d799ac358/src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/14143cf0c8f9b51db753f7619713f71d799ac358/src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java", "sha": "d567ef023d6b507ade311b205dcac035c566ed62", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java?ref=14143cf0c8f9b51db753f7619713f71d799ac358", "patch": "@@ -308,9 +308,9 @@ public Element findProcessedTokenElement(\n         // \n         // Try to find a custom token\n         //\n-        if (cb != null && (WSConstants.WSC_SCT.equals(type))\n+        if (cb != null && (WSConstants.WSC_SCT.equals(type)\n             || WSConstants.WSS_SAML_KI_VALUE_TYPE.equals(type) \n-            || WSConstants.WSS_SAML2_KI_VALUE_TYPE.equals(type)) {\n+            || WSConstants.WSS_SAML2_KI_VALUE_TYPE.equals(type))) {\n             //try to find a custom token\n             WSPasswordCallback pwcb = \n                 new WSPasswordCallback(id, WSPasswordCallback.CUSTOM_TOKEN);", "filename": "src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/afd2915472de8c8b93040a0dbceaadddb8fc4707", "parent": "https://github.com/apache/ws-wss4j/commit/e9b9213109509e17eb1fc94590f93ad11ff79a18", "message": "[WSS-210] - Fix for NPE in CryptoBase.getAliasForX509Cert() if Keystore does not contain a Certifcate entry for each alias", "bug_id": "ws-wss4j_39", "file": [{"additions": 12, "raw_url": "https://github.com/apache/ws-wss4j/raw/afd2915472de8c8b93040a0dbceaadddb8fc4707/src/org/apache/ws/security/components/crypto/CryptoBase.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/afd2915472de8c8b93040a0dbceaadddb8fc4707/src/org/apache/ws/security/components/crypto/CryptoBase.java", "sha": "f4fe92a239e251e4b21b65bfdb62a24ffff16ffc", "changes": 20, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/org/apache/ws/security/components/crypto/CryptoBase.java?ref=afd2915472de8c8b93040a0dbceaadddb8fc4707", "patch": "@@ -310,7 +310,7 @@ public String getAliasForX509Cert(String issuer, BigInteger serialNumber)\n         //\n         try {\n             X500Principal issuerRDN = new X500Principal(issuer);\n-            issuerName =  createBCX509Name(issuerRDN.getName());\n+            issuerName = createBCX509Name(issuerRDN.getName());\n         } catch (java.lang.IllegalArgumentException ex) {\n             issuerName = createBCX509Name(issuer);\n         }\n@@ -515,7 +515,7 @@ public String getAliasForX509Cert(Certificate cert) throws WSSecurityException {\n             for (Enumeration e = keystore.aliases(); e.hasMoreElements();) {\n                 String alias = (String) e.nextElement();\n                 Certificate retrievedCert = keystore.getCertificate(alias);\n-                if (retrievedCert.equals(cert)) {\n+                if (retrievedCert != null && retrievedCert.equals(cert)) {\n                     return alias;\n                 }\n             }\n@@ -828,9 +828,11 @@ public KeyStore getKeyStore() {\n                     String alias = (String) truststoreAliases.nextElement();\n                     X509Certificate cert = \n                         (X509Certificate) truststore.getCertificate(alias);\n-                    TrustAnchor anchor = \n-                        new TrustAnchor(cert, cert.getExtensionValue(NAME_CONSTRAINTS_OID));\n-                    set.add(anchor);\n+                    if (cert != null) {\n+                        TrustAnchor anchor = \n+                            new TrustAnchor(cert, cert.getExtensionValue(NAME_CONSTRAINTS_OID));\n+                        set.add(anchor);\n+                    }\n                 }\n             }\n \n@@ -841,9 +843,11 @@ public KeyStore getKeyStore() {\n                     String alias = (String) aliases.nextElement();\n                     X509Certificate cert = \n                         (X509Certificate) keystore.getCertificate(alias);\n-                    TrustAnchor anchor = \n-                        new TrustAnchor(cert, cert.getExtensionValue(NAME_CONSTRAINTS_OID));\n-                    set.add(anchor);\n+                    if (cert != null) {\n+                        TrustAnchor anchor = \n+                            new TrustAnchor(cert, cert.getExtensionValue(NAME_CONSTRAINTS_OID));\n+                        set.add(anchor);\n+                    }\n                 }\n             }\n ", "filename": "src/org/apache/ws/security/components/crypto/CryptoBase.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/83f9b1431580cc5b740e0389482b0f8fa339b80e", "parent": "https://github.com/apache/ws-wss4j/commit/12acd69a47f7acaf5e874895c3cbddde8eb04d21", "message": "Fix some problems that lead to NPE. Thanks to members\nof the mailing list for the problem reports.", "bug_id": "ws-wss4j_40", "file": [{"additions": 45, "raw_url": "https://github.com/apache/ws-wss4j/raw/83f9b1431580cc5b740e0389482b0f8fa339b80e/src/org/apache/ws/security/message/token/UsernameToken.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/83f9b1431580cc5b740e0389482b0f8fa339b80e/src/org/apache/ws/security/message/token/UsernameToken.java", "sha": "a712b32939c4120f44ba163d2fb9d7e4a9f0006f", "changes": 109, "status": "modified", "deletions": 64, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/org/apache/ws/security/message/token/UsernameToken.java?ref=83f9b1431580cc5b740e0389482b0f8fa339b80e", "patch": "@@ -103,14 +103,13 @@ public UsernameToken(WSSConfig wssConfig, Element elem) throws WSSecurityExcepti\n         if (elementUsername == null) {\n             throw new WSSecurityException(WSSecurityException.INVALID_SECURITY_TOKEN, \"badTokenType01\", new Object[]{el});\n         }\n+        hashed = false;\n         String type = elementPassword.getAttribute(\"Type\");\n-        if (type.equals(WSConstants.PASSWORD_DIGEST)) {\n+        if (type != null && type.equals(WSConstants.PASSWORD_DIGEST)) {\n             hashed = true;\n             if (elementNonce == null || elementCreated == null) {\n                 throw new WSSecurityException(WSSecurityException.INVALID_SECURITY_TOKEN, \"badTokenType01\", new Object[]{el});\n             }\n-        } else {\n-            hashed = false;\n         }\n     }\n \n@@ -154,9 +153,8 @@ public UsernameToken(WSSConfig wssConfig, Document doc, String passwordType) {\n         this.elementPassword.appendChild(doc.createTextNode(\"\"));\n         element.appendChild(elementPassword);\n \n-        if (passwordType.equals(WSConstants.PASSWORD_TEXT)) {\n-            hashed = false;\n-        } else {\n+        hashed = false;\n+        if (passwordType != null && passwordType.equals(WSConstants.PASSWORD_DIGEST)) {\n             hashed = true;\n             addNonce(doc);\n             addCreated(doc);\n@@ -200,18 +198,16 @@ public void addCreated(Document doc) {\n      * @return the data from the user name element.\n      */\n     public String getName() {\n-        if (this.elementUsername != null) {\n-            return getFirstNode(this.elementUsername).getData();\n-        }\n-        return null;\n-    }\n+\t\treturn nodeString (this.elementUsername);\n+\t}\n \n     /**\n-     * Set the user name.\n-     *\n-     * @param name sets a text node containing the use name into\n-     *             the user name element.\n-     */\n+\t * Set the user name.\n+\t * \n+\t * @param name\n+\t *            sets a text node containing the use name into the user name\n+\t *            element.\n+\t */\n     public void setName(String name) {\n         Text node = getFirstNode(this.elementUsername);\n         node.setData(name);\n@@ -223,60 +219,28 @@ public void setName(String name) {\n      * @return the data from the nonce element.\n      */\n     public String getNonce() {\n-        if (this.elementNonce != null) {\n-            return getFirstNode(this.elementNonce).getData();\n-        }\n-        return null;\n-    }\n-\n-    /**\n-     * Set the nonce.\n-     * <p/>\n-     *\n-     * @param nonce sets a text node containing the nonce data into\n-     *              the nonce element.\n-     */\n-    public void setNonce(String nonce) {\n-        Text node = getFirstNode(this.elementNonce);\n-        node.setData(nonce);\n-    }\n+\t\treturn nodeString(this.elementNonce);\n+\t}\n \n     /**\n-     * Get the created timestamp.\n-     *\n-     * @return the data from the created time element.\n-     */\n+\t * Get the created timestamp.\n+\t * \n+\t * @return the data from the created time element.\n+\t */\n     public String getCreated() {\n-        if (this.elementCreated != null) {\n-            return getFirstNode(this.elementCreated).getData();\n-        }\n-        return null;\n-    }\n-\n-    /**\n-     * Set the created timestamp.\n-     *\n-     * @param created sets a text node containing the created time data into\n-     *                the created time element.\n-     */\n-    public void setCreated(String created) {\n-        Text node = getFirstNode(this.elementCreated);\n-        node.setData(created);\n-    }\n+\t\treturn nodeString(this.elementCreated);\n+\t}\n \n     /**\n-     * Gets the password string.\n-     * This is the password as it is in the password element of a username,\n-     * token. Thus it can be either plain text or the password digest value.\n-     *\n-     * @return the password string or <code>null</code> if no such node exists.\n-     */\n+\t * Gets the password string. This is the password as it is in the password\n+\t * element of a username, token. Thus it can be either plain text or the\n+\t * password digest value.\n+\t * \n+\t * @return the password string or <code>null</code> if no such node\n+\t *         exists.\n+\t */\n     public String getPassword() {\n-        Text node = getFirstNode(this.elementPassword);\n-        if (node == null) {\n-            return null;\n-        }\n-        return node.getData();\n+    \treturn nodeString(this.elementPassword);\n     }\n \n     /**\n@@ -376,6 +340,23 @@ private Text getFirstNode(Element e) {\n         return ((node != null) && node instanceof Text) ? (Text) node : null;\n     }\n \n+    /**\n+     * Returns the data of an elemen as String or null if either the\n+     * the element does not contain a Text node or the node is empty.\n+     * \n+     * @param e DOM element\n+     * @return Element text node data as String\n+     */\n+    private String nodeString(Element e) {\n+        if (e != null) {\n+\t\t\tText node = getFirstNode(e);\n+\t\t\tif (node != null) {\n+\t\t\t\treturn node.getData();\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n+    \t\n+    }\n     /**\n      * Returns the dom element of this <code>UsernameToken</code> object.\n      *", "filename": "src/org/apache/ws/security/message/token/UsernameToken.java"}], "repo": "ws-wss4j"}, {"commit": "https://github.com/apache/ws-wss4j/commit/6c9b390252c61e0bc1766aacf9486ca45f943025", "parent": "https://github.com/apache/ws-wss4j/commit/5a858babb088dabb7ab95de490bfb5ed0421e898", "message": "Avoid a NPE in CryptoFactory on a null Properties object\n\n\nConflicts:\n\tws-security-common/src/main/java/org/apache/wss4j/common/crypto/CryptoFactory.java", "bug_id": "ws-wss4j_41", "file": [{"additions": 15, "raw_url": "https://github.com/apache/ws-wss4j/raw/6c9b390252c61e0bc1766aacf9486ca45f943025/ws-security-common/src/main/java/org/apache/wss4j/common/crypto/CryptoFactory.java", "blob_url": "https://github.com/apache/ws-wss4j/blob/6c9b390252c61e0bc1766aacf9486ca45f943025/ws-security-common/src/main/java/org/apache/wss4j/common/crypto/CryptoFactory.java", "sha": "33655485c62c59671d4b60be0b849ea71f883a1b", "changes": 15, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-common/src/main/java/org/apache/wss4j/common/crypto/CryptoFactory.java?ref=6c9b390252c61e0bc1766aacf9486ca45f943025", "patch": "@@ -73,6 +73,13 @@ public static Crypto getInstance() throws WSSecurityException {\n      * @throws WSSecurityException if there is an error in loading the crypto properties\n      */\n     public static Crypto getInstance(Properties properties) throws WSSecurityException {\n+        if (properties == null) {\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Cannot load Crypto instance as properties object is null\");\n+            }\n+            throw new WSSecurityException(WSSecurityException.ErrorCode.FAILURE,\n+                    \"empty\", null, \"Cannot load Crypto instance as properties object is null\");\n+        }\n         return getInstance(properties, Loader.getClassLoader(CryptoFactory.class));\n     }\n \n@@ -96,6 +103,14 @@ public static Crypto getInstance(\n         Properties properties, \n         ClassLoader classLoader\n     ) throws WSSecurityException {\n+        if (properties == null) {\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Cannot load Crypto instance as properties object is null\");\n+            }\n+            throw new WSSecurityException(WSSecurityException.ErrorCode.FAILURE,\n+                    \"empty\", null, \"Cannot load Crypto instance as properties object is null\");\n+        }\n+\n         String cryptoClassName = properties.getProperty(\"org.apache.wss4j.crypto.provider\");\n         if (cryptoClassName == null) {\n             cryptoClassName = properties.getProperty(\"org.apache.ws.security.crypto.provider\");", "filename": "ws-security-common/src/main/java/org/apache/wss4j/common/crypto/CryptoFactory.java"}], "repo": "ws-wss4j"}]
