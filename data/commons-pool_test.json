{
    "commons-pool_d867d8d": {
        "repo": "commons-pool",
        "message": "Fix possible NPE if forced creation fails\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/pool/trunk@1102622 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-pool/commit/d867d8d1a9a19c50f55b74683fe7627929cde336",
        "parent": "https://github.com/apache/commons-pool/commit/fb70d419c6dee2cfb8a17d88e939bada07d23d9d",
        "bug_id": "commons-pool_d867d8d",
        "file": [
            {
                "sha": "57abf5c7b6ad1b6e0831fc0def73ce3d579a1fe9",
                "filename": "src/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java",
                "blob_url": "https://github.com/apache/commons-pool/blob/d867d8d1a9a19c50f55b74683fe7627929cde336/src/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java",
                "raw_url": "https://github.com/apache/commons-pool/raw/d867d8d1a9a19c50f55b74683fe7627929cde336/src/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-pool/contents/src/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java?ref=d867d8d1a9a19c50f55b74683fe7627929cde336",
                "patch": "@@ -1074,7 +1074,7 @@ public T borrowObject(K key) throws Exception {\n                     create = true;\n                     p = create(key, true);\n                 }\n-                if (!p.allocate()) {\n+                if (p != null && !p.allocate()) {\n                     p = null;\n                 }\n             }",
                "deletions": 1
            }
        ],
        "patched_files": [
            "GenericKeyedObjectPool.java"
        ],
        "unit_tests": [
            "TestGenericKeyedObjectPool.java"
        ]
    },
    "commons-pool_cb38a1b": {
        "repo": "commons-pool",
        "message": "[POOL-374]\norg.apache.commons.pool2.impl.GenericKeyedObjectPool.returnObject(K, T)\nshould throw IllegalStateException instead of NullPointerException when\na key is not found in the pool map.\n\nBetter message.",
        "commit": "https://github.com/apache/commons-pool/commit/cb38a1b69384a3811d50d9eb0145683227fe8d51",
        "parent": "https://github.com/apache/commons-pool/commit/221e85f1afa6abdb0285d86bf917ed287072aba4",
        "bug_id": "commons-pool_cb38a1b",
        "file": [
            {
                "sha": "927a91a19f7fe28661eeb5fbe986f937cf9dfab1",
                "filename": "src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java",
                "blob_url": "https://github.com/apache/commons-pool/blob/cb38a1b69384a3811d50d9eb0145683227fe8d51/src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java",
                "raw_url": "https://github.com/apache/commons-pool/raw/cb38a1b69384a3811d50d9eb0145683227fe8d51/src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-pool/contents/src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java?ref=cb38a1b69384a3811d50d9eb0145683227fe8d51",
                "patch": "@@ -454,7 +454,7 @@ public void returnObject(final K key, final T obj) {\n \n         if (objectDeque == null) {\n             throw new IllegalStateException(\n-                    \"Returned object not currently part of this pool\");\n+                    \"No keyed pool found under the given key.\");\n         }\n \n         final PooledObject<T> p = objectDeque.getAllObjects().get(new IdentityWrapper<>(obj));",
                "deletions": 1
            }
        ],
        "patched_files": [
            "GenericKeyedObjectPool.java"
        ],
        "unit_tests": [
            "TestGenericKeyedObjectPool.java"
        ]
    },
    "commons-pool_44c914a": {
        "repo": "commons-pool",
        "message": "No further read locks required but a few places where an NPE may occur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/pool/trunk@1333153 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-pool/commit/44c914a2648699722fe8082aeaa247a2e7ff8288",
        "parent": "https://github.com/apache/commons-pool/commit/ffcfc6b3b856ac017f7e3486a2abb1cb9b8e4660",
        "bug_id": "commons-pool_44c914a",
        "file": [
            {
                "sha": "fa563a2b6f7c3c378e1d629d9d96a9ab81faaabf",
                "filename": "src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java",
                "blob_url": "https://github.com/apache/commons-pool/blob/44c914a2648699722fe8082aeaa247a2e7ff8288/src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java",
                "raw_url": "https://github.com/apache/commons-pool/raw/44c914a2648699722fe8082aeaa247a2e7ff8288/src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java",
                "status": "modified",
                "changes": 22,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/commons-pool/contents/src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java?ref=44c914a2648699722fe8082aeaa247a2e7ff8288",
                "patch": "@@ -712,12 +712,17 @@ public void clearOldest() {\n         final Map<PooledObject<T>, K> map = new TreeMap<PooledObject<T>, K>();\n \n         for (K k : poolMap.keySet()) {\n-            final LinkedBlockingDeque<PooledObject<T>> idleObjects =\n-                poolMap.get(k).getIdleObjects();\n-            for (PooledObject<T> p : idleObjects) {\n-                // each item into the map using the PooledObject object as the\n-                // key. It then gets sorted based on the idle time\n-                map.put(p, k);\n+            ObjectDeque<T> queue = poolMap.get(k);\n+            // Protect against possible NPE if key has been removed in another\n+            // thread. Not worth locking the keys while this loop completes.\n+            if (queue != null) {\n+                final LinkedBlockingDeque<PooledObject<T>> idleObjects =\n+                    queue.getIdleObjects();\n+                for (PooledObject<T> p : idleObjects) {\n+                    // each item into the map using the PooledObject object as the\n+                    // key. It then gets sorted based on the idle time\n+                    map.put(p, k);\n+                }\n             }\n         }\n \n@@ -1051,7 +1056,6 @@ private boolean destroy(K key, PooledObject<T> toDestroy, boolean always)\n     private void deregister(K k) {\n         ObjectDeque<T> objectDeque;\n \n-        // TODO Think carefully about when a read lock is required\n         objectDeque = poolMap.get(k);\n         long numInterested = objectDeque.getNumInterested().decrementAndGet();\n         if (numInterested == 0 && objectDeque.getCreateCount().get() == 0) {\n@@ -1088,6 +1092,10 @@ void ensureMinIdle() throws Exception {\n     private void ensureMinIdle(K key) throws Exception {\n         // Calculate current pool objects\n         ObjectDeque<T> objectDeque = poolMap.get(key);\n+        // Protect against NPEs in case the key has been removed\n+        if (objectDeque == null) {\n+            return;\n+        }\n \n         // this method isn't synchronized so the\n         // calculateDeficit is done at the beginning",
                "deletions": 7
            }
        ],
        "patched_files": [
            "GenericKeyedObjectPool.java"
        ],
        "unit_tests": [
            "TestGenericKeyedObjectPool.java"
        ]
    },
    "commons-pool_41f4e41": {
        "repo": "commons-pool",
        "message": "[POOL-374]\norg.apache.commons.pool2.impl.GenericKeyedObjectPool.returnObject(K, T)\nshould throw IllegalStateException instead of NullPointerException when\na key is not found in the pool map.",
        "commit": "https://github.com/apache/commons-pool/commit/41f4e410b3e7dc34b294ac9941721073bf5e5271",
        "parent": "https://github.com/apache/commons-pool/commit/11521c1fdbfbb079cc1859034a425191112f5358",
        "bug_id": "commons-pool_41f4e41",
        "file": [
            {
                "sha": "89b89a56cd58fe1fb794f492993c2a9dbe5cda18",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-pool/blob/41f4e410b3e7dc34b294ac9941721073bf5e5271/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-pool/raw/41f4e410b3e7dc34b294ac9941721073bf5e5271/src/changes/changes.xml",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-pool/contents/src/changes/changes.xml?ref=41f4e410b3e7dc34b294ac9941721073bf5e5271",
                "patch": "@@ -43,7 +43,12 @@ The <action> type attribute can be add,update,fix,remove.\n     <title>Apache Commons Pool Release Notes</title>\r\n   </properties>\r\n   <body>\r\n-  <release version=\"2.7.0\" date=\"2019-MM-DD\" description=\"This is a feature release (Java 8).\">\r\n+  <release version=\"2.7.1\" date=\"2019-MM-DD\" description=\"This is a maintenance release (Java 8).\">\r\n+    <action dev=\"ggregory\" issue=\"POOL-374\" type=\"fix\" due-to=\"Gary Gregory, Phil Steitz\">\r\n+       org.apache.commons.pool2.impl.GenericKeyedObjectPool.returnObject(K, T) should throw IllegalStateException instead of NullPointerException when a key is not found in the pool map.\r\n+    </action>\r\n+  </release>\r\n+  <release version=\"2.7.0\" date=\"2019-07-25\" description=\"This is a feature release (Java 8).\">\r\n     <action dev=\"ggregory\" issue=\"POOL-364\" type=\"update\" due-to=\"Gary Gregory\">\r\n        Update from Java 7 to Java 8.\r\n     </action>\r",
                "deletions": 1
            },
            {
                "sha": "7a282f11eba22e504a44939948adaed400809bec",
                "filename": "src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java",
                "blob_url": "https://github.com/apache/commons-pool/blob/41f4e410b3e7dc34b294ac9941721073bf5e5271/src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java",
                "raw_url": "https://github.com/apache/commons-pool/raw/41f4e410b3e7dc34b294ac9941721073bf5e5271/src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-pool/contents/src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java?ref=41f4e410b3e7dc34b294ac9941721073bf5e5271",
                "patch": "@@ -447,6 +447,11 @@ public void returnObject(final K key, final T obj) {\n \n         final ObjectDeque<T> objectDeque = poolMap.get(key);\n \n+        if (objectDeque == null) {\n+            throw new IllegalStateException(\n+                    \"Returned object not currently part of this pool\");\n+        }\n+\n         final PooledObject<T> p = objectDeque.getAllObjects().get(new IdentityWrapper<>(obj));\n \n         if (p == null) {",
                "deletions": 0
            },
            {
                "sha": "f148bc01a712580a29389cd6488a99f9d2f5fda3",
                "filename": "src/test/java/org/apache/commons/pool2/impl/TestGenericKeyedObjectPool.java",
                "blob_url": "https://github.com/apache/commons-pool/blob/41f4e410b3e7dc34b294ac9941721073bf5e5271/src/test/java/org/apache/commons/pool2/impl/TestGenericKeyedObjectPool.java",
                "raw_url": "https://github.com/apache/commons-pool/raw/41f4e410b3e7dc34b294ac9941721073bf5e5271/src/test/java/org/apache/commons/pool2/impl/TestGenericKeyedObjectPool.java",
                "status": "modified",
                "changes": 12,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/commons-pool/contents/src/test/java/org/apache/commons/pool2/impl/TestGenericKeyedObjectPool.java?ref=41f4e410b3e7dc34b294ac9941721073bf5e5271",
                "patch": "@@ -195,6 +195,13 @@ public void testNumActiveNumIdle2() throws Exception {\n         assertEquals(2,gkoPool.getNumIdle(\"B\"));\n     }\n \n+    @Test(expected = IllegalStateException.class)\n+    public void testReturnObjectThrowsIllegalStateException() {\n+        try (final GenericKeyedObjectPool<String, String> pool = new GenericKeyedObjectPool<>(new SimpleFactory<String>())) {\n+            pool.returnObject(\"Foo\", \"Bar\");\n+        }\n+    }\n+\n     @Test(timeout=60000)\n     public void testMaxIdle() throws Exception {\n         gkoPool.setMaxTotalPerKey(100);\n@@ -1069,7 +1076,7 @@ public void testBorrowObjectFairness() throws Exception {\n         final int numThreads = 40;\n         final int maxTotal = 40;\n \n-        final GenericKeyedObjectPoolConfig config = new GenericKeyedObjectPoolConfig();\n+        final GenericKeyedObjectPoolConfig<String> config = new GenericKeyedObjectPoolConfig<String>();\n         config.setMaxTotalPerKey(maxTotal);\n         config.setFairness(true);\n         config.setLifo(false);\n@@ -1086,7 +1093,7 @@ public void testBorrowObjectFairness() throws Exception {\n         // Start and park threads waiting to borrow objects\n         final TestThread[] threads = new TestThread[numThreads];\n         for(int i=0;i<numThreads;i++) {\n-            threads[i] = new TestThread(gkoPool, 1, 0, 2000, false, \"0\" + String.valueOf(i % maxTotal), \"0\");\n+            threads[i] = new TestThread<String>(gkoPool, 1, 0, 2000, false, \"0\" + String.valueOf(i % maxTotal), \"0\");\n             final Thread t = new Thread(threads[i]);\n             t.start();\n             // Short delay to ensure threads start in correct order\n@@ -2371,6 +2378,7 @@ public Object create(final Integer key)\n             return new DefaultPooledObject<>(value);\n         }\n     }\n+    \n }\n \n ",
                "deletions": 2
            }
        ],
        "patched_files": [
            "GenericKeyedObjectPool.java"
        ],
        "unit_tests": [
            "TestGenericKeyedObjectPool.java"
        ]
    },
    "commons-pool_b7b4322": {
        "repo": "commons-pool",
        "message": "[POOL-326] Threading issue, NullPointerException and\nIllegalStateException in GenericKeyedObjectPool.",
        "commit": "https://github.com/apache/commons-pool/commit/b7b4322aada5d6d5521d47b5fed769b40753d68e",
        "parent": "https://github.com/apache/commons-pool/commit/77c0d290fbab322921f1f276848755f2a48518d0",
        "bug_id": "commons-pool_b7b4322",
        "file": [
            {
                "sha": "702637869a4b73dbb650ea63275a66f3173823bc",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-pool/blob/b7b4322aada5d6d5521d47b5fed769b40753d68e/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-pool/raw/b7b4322aada5d6d5521d47b5fed769b40753d68e/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-pool/contents/src/changes/changes.xml?ref=b7b4322aada5d6d5521d47b5fed769b40753d68e",
                "patch": "@@ -68,6 +68,9 @@ The <action> type attribute can be add,update,fix,remove.\n     <action dev=\"ggregory\" issue=\"POOL-360\" type=\"update\">\n       Update optional library cglib from 3.2.9 to 3.2.10.\n     </action>\n+    <action dev=\"ggregory\" issue=\"POOL-326\" type=\"fix\" due-to=\"Chris Allison, Phil Steitz\">\n+      Threading issue, NullPointerException and IllegalStateException in GenericKeyedObjectPool.\n+    </action>\n   </release>  \n   <release version=\"2.6.0\" date=\"2018-07-06\" description=\"This is a maintenance release.\">\n     <action dev=\"ggregory\" issue=\"POOL-336\" type=\"update\" due-to=\"Wolfgang Glas\">",
                "deletions": 0
            },
            {
                "sha": "ab5950e8abb26c4e92f1938313a9ae761ebade68",
                "filename": "src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java",
                "blob_url": "https://github.com/apache/commons-pool/blob/b7b4322aada5d6d5521d47b5fed769b40753d68e/src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java",
                "raw_url": "https://github.com/apache/commons-pool/raw/b7b4322aada5d6d5521d47b5fed769b40753d68e/src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java",
                "status": "modified",
                "changes": 30,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/commons-pool/contents/src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java?ref=b7b4322aada5d6d5521d47b5fed769b40753d68e",
                "patch": "@@ -1144,26 +1144,28 @@ private boolean destroy(final K key, final PooledObject<T> toDestroy, final bool\n      * @param k The key to de-register\n      */\n     private void deregister(final K k) {\n+        Lock lock = keyLock.readLock();\n         ObjectDeque<T> objectDeque;\n-\n-        objectDeque = poolMap.get(k);\n-        final long numInterested = objectDeque.getNumInterested().decrementAndGet();\n-        if (numInterested == 0 && objectDeque.getCreateCount().get() == 0) {\n-            // Potential to remove key\n-            final Lock writeLock = keyLock.writeLock();\n-            writeLock.lock();\n-            try {\n-                if (objectDeque.getCreateCount().get() == 0 &&\n-                        objectDeque.getNumInterested().get() == 0) {\n+        try {\n+            lock.lock();\n+            objectDeque = poolMap.get(k);\n+            final long numInterested = objectDeque.getNumInterested().decrementAndGet();\n+            if (numInterested == 0 && objectDeque.getCreateCount().get() == 0) {\n+                // Potential to remove key\n+                // Upgrade to write lock\n+                lock.unlock();\n+                lock = keyLock.writeLock();\n+                lock.lock();\n+                if (objectDeque.getCreateCount().get() == 0 && objectDeque.getNumInterested().get() == 0) {\n                     // NOTE: Keys must always be removed from both poolMap and\n-                    //       poolKeyList at the same time while protected by\n-                    //       keyLock.writeLock()\n+                    // poolKeyList at the same time while protected by\n+                    // keyLock.writeLock()\n                     poolMap.remove(k);\n                     poolKeyList.remove(k);\n                 }\n-            } finally {\n-                writeLock.unlock();\n             }\n+        } finally {\n+            lock.unlock();\n         }\n     }\n ",
                "deletions": 14
            },
            {
                "sha": "d1fbb49eba013a45480765149ea37af99f2e4c59",
                "filename": "src/test/java/org/apache/commons/pool2/ObjectPoolIssue326.java",
                "blob_url": "https://github.com/apache/commons-pool/blob/b7b4322aada5d6d5521d47b5fed769b40753d68e/src/test/java/org/apache/commons/pool2/ObjectPoolIssue326.java",
                "raw_url": "https://github.com/apache/commons-pool/raw/b7b4322aada5d6d5521d47b5fed769b40753d68e/src/test/java/org/apache/commons/pool2/ObjectPoolIssue326.java",
                "status": "added",
                "changes": 183,
                "additions": 183,
                "contents_url": "https://api.github.com/repos/apache/commons-pool/contents/src/test/java/org/apache/commons/pool2/ObjectPoolIssue326.java?ref=b7b4322aada5d6d5521d47b5fed769b40753d68e",
                "patch": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.pool2;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import org.apache.commons.pool2.BaseKeyedPooledObjectFactory;\n+import org.apache.commons.pool2.PooledObject;\n+import org.apache.commons.pool2.impl.BaseObjectPoolConfig;\n+import org.apache.commons.pool2.impl.DefaultPooledObject;\n+import org.apache.commons.pool2.impl.GenericKeyedObjectPool;\n+import org.apache.commons.pool2.impl.GenericKeyedObjectPoolConfig;\n+\n+/**\n+ * On my box with 4 cores this test fails at between 5s and 900s with an average\n+ * of 240s (data from 10 runs of test).\n+ * \n+ * It is hard to turn this in a unit test because it can affect the build\n+ * negatively since you need to run it for a while.\n+ */\n+public final class ObjectPoolIssue326 {\n+    public static void main(String[] args) {\n+        try {\n+            new ObjectPoolIssue326().run();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private void run() throws Exception {\n+        GenericKeyedObjectPoolConfig poolConfig = new GenericKeyedObjectPoolConfig();\n+        poolConfig.setMaxTotal(10);\n+        poolConfig.setMaxTotalPerKey(5);\n+        poolConfig.setMinIdlePerKey(-1);\n+        poolConfig.setMaxIdlePerKey(-1);\n+        poolConfig.setLifo(true);\n+        poolConfig.setFairness(true);\n+        poolConfig.setMaxWaitMillis(30 * 1000);\n+        poolConfig.setMinEvictableIdleTimeMillis(-1);\n+        poolConfig.setSoftMinEvictableIdleTimeMillis(-1);\n+        poolConfig.setNumTestsPerEvictionRun(1);\n+        poolConfig.setTestOnCreate(false);\n+        poolConfig.setTestOnBorrow(false);\n+        poolConfig.setTestOnReturn(false);\n+        poolConfig.setTestWhileIdle(false);\n+        poolConfig.setTimeBetweenEvictionRunsMillis(5 * 1000);\n+        poolConfig.setEvictionPolicyClassName(BaseObjectPoolConfig.DEFAULT_EVICTION_POLICY_CLASS_NAME);\n+        poolConfig.setBlockWhenExhausted(false);\n+        poolConfig.setJmxEnabled(false);\n+        poolConfig.setJmxNameBase(null);\n+        poolConfig.setJmxNamePrefix(null);\n+\n+        GenericKeyedObjectPool<Integer, Object> pool = new GenericKeyedObjectPool<>(new ObjectFactory(), poolConfig);\n+\n+        // number of threads to reproduce is finicky. this count seems to be best for my\n+        // 4 core box.\n+        // too many doesn't reproduce it ever, too few doesn't either.\n+        ExecutorService service = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() * 2);\n+        long startTime = System.currentTimeMillis();\n+        long testIter = 0;\n+        try {\n+            while (true) {\n+                testIter++;\n+                if (testIter % 1000 == 0) {\n+                    System.out.println(testIter);\n+                }\n+                List<Task> tasks = createTasks(pool);\n+                List<Future<Object>> futures = service.invokeAll(tasks);\n+                for (Future<Object> future : futures) {\n+                    future.get();\n+                }\n+            }\n+        } finally {\n+            System.out.println(\"Time: \" + (System.currentTimeMillis() - startTime) / 1000.0);\n+            service.shutdown();\n+        }\n+    }\n+\n+    private List<Task> createTasks(GenericKeyedObjectPool<Integer, Object> pool) {\n+        List<Task> tasks = new ArrayList<>();\n+        for (int i = 0; i < 250; i++) {\n+            tasks.add(new Task(pool, i));\n+        }\n+        return tasks;\n+    }\n+\n+    private class ObjectFactory extends BaseKeyedPooledObjectFactory<Integer, Object> {\n+        @Override\n+        public Object create(Integer s) throws Exception {\n+            return new TestObject();\n+        }\n+\n+        @Override\n+        public PooledObject<Object> wrap(Object o) {\n+            return new DefaultPooledObject<>(o);\n+        }\n+    }\n+\n+    private class TestObject {\n+    }\n+\n+    private class Task implements Callable<Object> {\n+        private final GenericKeyedObjectPool<Integer, Object> m_pool;\n+        private final int m_key;\n+\n+        Task(GenericKeyedObjectPool<Integer, Object> pool, int count) {\n+            m_pool = pool;\n+            m_key = count % 20;\n+        }\n+\n+        @Override\n+        public Object call() throws Exception {\n+            try {\n+                Object value;\n+                value = m_pool.borrowObject(m_key);\n+                // don't make this too long or it won't reproduce, and don't make it zero or it\n+                // won't reproduce\n+                // constant low value also doesn't reproduce\n+                busyWait(System.currentTimeMillis() % 4);\n+                m_pool.returnObject(m_key, value);\n+                return \"success\";\n+            } catch (NoSuchElementException e) {\n+                // ignore, we've exhausted the pool\n+                // not sure whether what we do here matters for reproducing\n+                busyWait(System.currentTimeMillis() % 20);\n+                return \"exhausted\";\n+            }\n+        }\n+\n+        private void busyWait(long timeMillis) {\n+            // busy waiting intentionally as a simple thread.sleep fails to reproduce\n+            long endTime = System.currentTimeMillis() + timeMillis;\n+            while (System.currentTimeMillis() < endTime)\n+                ;\n+        }\n+    }\n+}\n+\n+/*\n+ * \n+ * Example stack trace: java.util.concurrent.ExecutionException:\n+ * java.lang.NullPointerException at\n+ * java.util.concurrent.FutureTask.report(FutureTask.java:122) at\n+ * java.util.concurrent.FutureTask.get(FutureTask.java:192) at\n+ * threading_pool.ObjectPoolIssue.run(ObjectPoolIssue.java:63) at\n+ * threading_pool.ObjectPoolIssue.main(ObjectPoolIssue.java:23) at\n+ * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at\n+ * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n+ * at\n+ * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.\n+ * java:43) at java.lang.reflect.Method.invoke(Method.java:498) at\n+ * com.intellij.rt.execution.application.AppMain.main(AppMain.java:147) Caused\n+ * by: java.lang.NullPointerException at\n+ * org.apache.commons.pool2.impl.GenericKeyedObjectPool.returnObject(\n+ * GenericKeyedObjectPool.java:474) at\n+ * threading_pool.ObjectPoolIssue$Task.call(ObjectPoolIssue.java:112) at\n+ * java.util.concurrent.FutureTask.run(FutureTask.java:266) at\n+ * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:\n+ * 1142) at\n+ * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:\n+ * 617) at java.lang.Thread.run(Thread.java:745)\n+ * \n+ */",
                "deletions": 0
            }
        ],
        "patched_files": [
            "GenericKeyedObjectPool.java"
        ],
        "unit_tests": [
            "TestGenericKeyedObjectPool.java"
        ]
    },
    "commons-pool_65f5d92": {
        "repo": "commons-pool",
        "message": "[POOL-359] NullPointerException closing multiple GenericObjectPools.",
        "commit": "https://github.com/apache/commons-pool/commit/65f5d920478fdc4568dc5c443b41235a4c8e6ca7",
        "parent": "https://github.com/apache/commons-pool/commit/0a542546b08d39d39f221d89724af539e4f45644",
        "bug_id": "commons-pool_65f5d92",
        "file": [
            {
                "sha": "b92b87a96fd74d616a4f5831f99f007a6ba413b1",
                "filename": "src/main/java/org/apache/commons/pool2/impl/EvictionTimer.java",
                "blob_url": "https://github.com/apache/commons-pool/blob/65f5d920478fdc4568dc5c443b41235a4c8e6ca7/src/main/java/org/apache/commons/pool2/impl/EvictionTimer.java",
                "raw_url": "https://github.com/apache/commons-pool/raw/65f5d920478fdc4568dc5c443b41235a4c8e6ca7/src/main/java/org/apache/commons/pool2/impl/EvictionTimer.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-pool/contents/src/main/java/org/apache/commons/pool2/impl/EvictionTimer.java?ref=65f5d920478fdc4568dc5c443b41235a4c8e6ca7",
                "patch": "@@ -94,7 +94,7 @@ static synchronized void schedule(\n     static synchronized void cancel(\n             final BaseGenericObjectPool<?>.Evictor task, final long timeout, final TimeUnit unit) {\n         task.cancel();\n-        if (executor.getQueue().size() == 0) {\n+        if (executor != null && executor.getQueue().size() == 0) {\n             executor.shutdown();\n             try {\n                 executor.awaitTermination(timeout, unit);",
                "deletions": 1
            },
            {
                "sha": "7f035de30913d722cb02275babefe63cd44796ff",
                "filename": "src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java",
                "blob_url": "https://github.com/apache/commons-pool/blob/65f5d920478fdc4568dc5c443b41235a4c8e6ca7/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java",
                "raw_url": "https://github.com/apache/commons-pool/raw/65f5d920478fdc4568dc5c443b41235a4c8e6ca7/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java",
                "status": "modified",
                "changes": 11,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/commons-pool/contents/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java?ref=65f5d920478fdc4568dc5c443b41235a4c8e6ca7",
                "patch": "@@ -1167,6 +1167,15 @@ public void testClientWaitStats() throws Exception {\n         }\n     }\n \n+    @Test(timeout=60000)\n+    public void testCloseMultiplePools() throws Exception {\n+        GenericObjectPool<String> genericObjectPool2 = new GenericObjectPool<>(simpleFactory);\n+        genericObjectPool.setTimeBetweenEvictionRunsMillis(1);\n+        genericObjectPool2.setTimeBetweenEvictionRunsMillis(1);\n+        genericObjectPool2.close();\n+        genericObjectPool.close();\n+    }\n+\n     @Test(timeout=60000)\n     public void testConcurrentBorrowAndEvict() throws Exception {\n \n@@ -1323,12 +1332,12 @@ public void testConstructors() throws Exception {\n         }\n     }\n \n+\n     @Test(timeout=60000)\n     public void testDefaultConfiguration() throws Exception {\n         assertConfiguration(new GenericObjectPoolConfig(),genericObjectPool);\n     }\n \n-\n     /**\n      * Verifies that when a factory's makeObject produces instances that are not\n      * discernible by equals, the pool can handle them.",
                "deletions": 1
            }
        ],
        "patched_files": [
            "EvictionTimer.java",
            "GenericObjectPool.java"
        ],
        "unit_tests": [
            "TestGenericObjectPool.java",
            "TestEvictionTimer.java"
        ]
    },
    "commons-pool_7162939": {
        "repo": "commons-pool",
        "message": "[POOL-359] NullPointerException closing multiple GenericObjectPools.\n\nAdd a test. Use #isEmpty(). Javadoc.",
        "commit": "https://github.com/apache/commons-pool/commit/7162939e8549d88e1930dfbd4f9dd8662b8ac4d0",
        "parent": "https://github.com/apache/commons-pool/commit/4a6054f50bffb22377c1987e8cd7521cb025f8ea",
        "bug_id": "commons-pool_7162939",
        "file": [
            {
                "sha": "b65dfd2e58599b34a138f537510582cc461092d3",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-pool/blob/7162939e8549d88e1930dfbd4f9dd8662b8ac4d0/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-pool/raw/7162939e8549d88e1930dfbd4f9dd8662b8ac4d0/src/changes/changes.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-pool/contents/src/changes/changes.xml?ref=7162939e8549d88e1930dfbd4f9dd8662b8ac4d0",
                "patch": "@@ -62,7 +62,7 @@ The <action> type attribute can be add,update,fix,remove.\n     <action dev=\"ggregory\" issue=\"POOL-349\" type=\"update\">\n       Update optional library asm-util from 6.2 to 7.0.\n     </action>\n-    <action dev=\"ggregory\" issue=\"POOL-359\" type=\"fix\" due-to=\"Michael Wintermeyer\">\n+    <action dev=\"ggregory\" issue=\"POOL-359\" type=\"fix\" due-to=\"Michael Wintermeyer, Gary Gregory\">\n       NullPointerException closing multiple GenericObjectPools.\n     </action>\n   </release>  ",
                "deletions": 1
            },
            {
                "sha": "738d53c20b19298b3b2724ce6d22e1b93d830820",
                "filename": "src/main/java/org/apache/commons/pool2/impl/EvictionTimer.java",
                "blob_url": "https://github.com/apache/commons-pool/blob/7162939e8549d88e1930dfbd4f9dd8662b8ac4d0/src/main/java/org/apache/commons/pool2/impl/EvictionTimer.java",
                "raw_url": "https://github.com/apache/commons-pool/raw/7162939e8549d88e1930dfbd4f9dd8662b8ac4d0/src/main/java/org/apache/commons/pool2/impl/EvictionTimer.java",
                "status": "modified",
                "changes": 23,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/commons-pool/contents/src/main/java/org/apache/commons/pool2/impl/EvictionTimer.java?ref=7162939e8549d88e1930dfbd4f9dd8662b8ac4d0",
                "patch": "@@ -25,18 +25,20 @@\n import java.util.concurrent.TimeUnit;\n \n /**\n- * Provides a shared idle object eviction timer for all pools. This class is\n- * currently implemented using {@link ScheduledThreadPoolExecutor}. This\n- * implementation may change in any future release. This class keeps track of\n- * how many pools are using it. If no pools are using the timer, it is cancelled.\n- * This prevents a thread being left running which, in application server\n- * environments, can lead to memory leads and/or prevent applications from\n- * shutting down or reloading cleanly.\n+ * Provides a shared idle object eviction timer for all pools.\n  * <p>\n- * This class has package scope to prevent its inclusion in the pool public API.\n- * The class declaration below should *not* be changed to public.\n+ * This class is currently implemented using {@link ScheduledThreadPoolExecutor}. This implementation may change in any\n+ * future release. This class keeps track of how many pools are using it. If no pools are using the timer, it is\n+ * cancelled. This prevents a thread being left running which, in application server environments, can lead to memory\n+ * leads and/or prevent applications from shutting down or reloading cleanly.\n+ * </p>\n+ * <p>\n+ * This class has package scope to prevent its inclusion in the pool public API. The class declaration below should\n+ * *not* be changed to public.\n+ * </p>\n  * <p>\n  * This class is intended to be thread-safe.\n+ * </p>\n  *\n  * @since 2.0\n  */\n@@ -67,6 +69,7 @@ public String toString() {\n      * call to this method *must* call {@link #cancel(TimerTask)} to cancel the\n      * task to prevent memory and/or thread leaks in application server\n      * environments.\n+     * \n      * @param task      Task to be scheduled\n      * @param delay     Delay in milliseconds before task is executed\n      * @param period    Time in milliseconds between executions\n@@ -94,7 +97,7 @@ static synchronized void schedule(\n     static synchronized void cancel(\n             final BaseGenericObjectPool<?>.Evictor task, final long timeout, final TimeUnit unit) {\n         task.cancel();\n-        if (executor != null && executor.getQueue().size() == 0) {\n+        if (executor != null && executor.getQueue().isEmpty()) {\n             executor.shutdown();\n             try {\n                 executor.awaitTermination(timeout, unit);",
                "deletions": 10
            },
            {
                "sha": "ba6b2dca45173879084f304d322717813a471fc4",
                "filename": "src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java",
                "blob_url": "https://github.com/apache/commons-pool/blob/7162939e8549d88e1930dfbd4f9dd8662b8ac4d0/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java",
                "raw_url": "https://github.com/apache/commons-pool/raw/7162939e8549d88e1930dfbd4f9dd8662b8ac4d0/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java",
                "status": "modified",
                "changes": 21,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/commons-pool/contents/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java?ref=7162939e8549d88e1930dfbd4f9dd8662b8ac4d0",
                "patch": "@@ -1168,14 +1168,31 @@ public void testClientWaitStats() throws Exception {\n     }\n \n     @Test(timeout=60000)\n-    public void testCloseMultiplePools() throws Exception {\n+    public void testCloseMultiplePools1() throws Exception {\n         GenericObjectPool<String> genericObjectPool2 = new GenericObjectPool<>(simpleFactory);\n         genericObjectPool.setTimeBetweenEvictionRunsMillis(1);\n         genericObjectPool2.setTimeBetweenEvictionRunsMillis(1);\n         genericObjectPool2.close();\n         genericObjectPool.close();\n     }\n \n+    @Test(timeout=60000)\n+    public void testCloseMultiplePools2() throws Exception {\n+        GenericObjectPool<String> genericObjectPool2 = new GenericObjectPool<>(simpleFactory);\n+         // Ensure eviction takes a long time, during which time EvictionTimer.executor's queue is empty\n+        simpleFactory.setDestroyLatency(1000L);\n+         // Ensure there is an object to evict, so that above latency takes effect\n+        genericObjectPool.setTimeBetweenEvictionRunsMillis(1);\n+        genericObjectPool2.setTimeBetweenEvictionRunsMillis(1);\n+        genericObjectPool.setMinEvictableIdleTimeMillis(1);\n+        genericObjectPool2.setMinEvictableIdleTimeMillis(1);\n+        genericObjectPool.addObject();\n+        genericObjectPool2.addObject();\n+         // Close both pools\n+        genericObjectPool2.close();\n+        genericObjectPool.close();\n+    }\n+\n     @Test(timeout=60000)\n     public void testConcurrentBorrowAndEvict() throws Exception {\n \n@@ -1264,6 +1281,7 @@ public void testConstructorNullFactory() {\n         // Looks like GOP needs to call close() or jmxUnregister() before throwing IAE\n     }\n \n+\n     @Test(timeout=60000)\n     public void testConstructors() throws Exception {\n \n@@ -1332,7 +1350,6 @@ public void testConstructors() throws Exception {\n         }\n     }\n \n-\n     @Test(timeout=60000)\n     public void testDefaultConfiguration() throws Exception {\n         assertConfiguration(new GenericObjectPoolConfig(),genericObjectPool);",
                "deletions": 2
            }
        ],
        "patched_files": [
            "EvictionTimer.java",
            "GenericObjectPool.java"
        ],
        "unit_tests": [
            "TestGenericObjectPool.java",
            "TestEvictionTimer.java"
        ]
    }
}