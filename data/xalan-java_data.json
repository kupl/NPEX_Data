[{"commit": "https://github.com/apache/xalan-java/commit/870e3550ed261579aabddc798107bfec91677d43", "parent": "https://github.com/apache/xalan-java/commit/46331981f28c24c757fe7884211ddac002f215aa", "message": "Fix: if XSLTResultTarget is created with a File argument, we need\nto return the right CharacterStream - TransformerImpl calls\ngetByteStream or getCharacterStream and both are null if file\nis used ( resulting in a NPE in BaseMarkupSerializer.setOutputStream ).\n\nI also changed the fields of trax.Result to protected - it is very\nconfusing to have the same field name in XSLTResultTarget and Result (\nand it have unexpected effects ).", "bug_id": "xalan-java_1", "file": [{"additions": 20, "raw_url": "https://github.com/apache/xalan-java/raw/870e3550ed261579aabddc798107bfec91677d43/src/org/apache/xalan/xslt/XSLTResultTarget.java", "blob_url": "https://github.com/apache/xalan-java/blob/870e3550ed261579aabddc798107bfec91677d43/src/org/apache/xalan/xslt/XSLTResultTarget.java", "sha": "adfeac46719e060eebaa24099c6dcbca0e9cb485", "changes": 23, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/xalan-java/contents/src/org/apache/xalan/xslt/XSLTResultTarget.java?ref=870e3550ed261579aabddc798107bfec91677d43", "patch": "@@ -59,6 +59,10 @@\n import org.w3c.dom.Node;\n import java.io.OutputStream;\n import java.io.Writer;\n+import java.io.FileWriter;\n+import java.io.OutputStreamWriter;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n import org.xml.sax.DocumentHandler;\n import trax.Result;\n \n@@ -271,14 +275,27 @@ public DocumentHandler getDocumentHandler ()\n     return formatterListener;\n   }\n \n+  public Writer getCharacterStream() {\n+    if( characterStream != null ) return characterStream;\n+    if( fileName != null ) {\n+      try {\n+\tif( encoding==null ) {\n+\t  return new FileWriter( fileName );\n+\t} else {\n+\t  return new OutputStreamWriter( new FileOutputStream( fileName ), encoding);\n+\t}\n+      } catch( IOException ex ) {\n+\treturn null;\n+      }\n+    }\n+    return null;\n+  }\n+    \n   //////////////////////////////////////////////////////////////////////\n   // Internal state.\n   //////////////////////////////////////////////////////////////////////\n \n   private String fileName;\n-  private OutputStream byteStream;\n   private String encoding;\n-  private Writer characterStream;\n-  private Node node;\n   private DocumentHandler formatterListener;\n }", "filename": "src/org/apache/xalan/xslt/XSLTResultTarget.java"}, {"additions": 3, "raw_url": "https://github.com/apache/xalan-java/raw/870e3550ed261579aabddc798107bfec91677d43/src/trax/Result.java", "blob_url": "https://github.com/apache/xalan-java/blob/870e3550ed261579aabddc798107bfec91677d43/src/trax/Result.java", "sha": "04d0ebf86771a6015f253ed1aa9ce71282eee8f7", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/xalan-java/contents/src/trax/Result.java?ref=870e3550ed261579aabddc798107bfec91677d43", "patch": "@@ -183,7 +183,7 @@ public Node getNode ()\n   // Internal state.\n   //////////////////////////////////////////////////////////////////////\n \n-  private OutputStream byteStream;\n-  private Writer characterStream;\n-  private Node node;\n+  protected OutputStream byteStream;\n+  protected Writer characterStream;\n+  protected Node node;\n }", "filename": "src/trax/Result.java"}], "repo": "xalan-java"}, {"commit": "https://github.com/apache/xalan-java/commit/d83a9b95eb95d742879d5c2138e9d8f7970b81cb", "parent": "https://github.com/apache/xalan-java/commit/db603f4c92ed13c28b38d353964c963f09ea1062", "message": "Fix the fix for ErrorListener. The spec is not clear about what\nshould happen if an ErrorListener is set, and fatalError is called -\nit does mention that \"ErrorListener callbacks should be called _instead_\nof throwing exception\" ( in ErrorListener's comments ), but what happens\nwhen fatalError returns ?\n\nThe current code returns null ( since creating the object - Transformer,\netc - failed, and we can't throw exceptions ).\n\nThis fix does some extra checks for NPE, in this case. It shouldn't be\na big performance problem, constructing the transformer is a\nvery expensive operation any way.\n\nScott - please review the changes, maybe you have a better idea to deal\nwith ErrorListener.", "bug_id": "xalan-java_2", "file": [{"additions": 12, "raw_url": "https://github.com/apache/xalan-java/raw/d83a9b95eb95d742879d5c2138e9d8f7970b81cb/src/org/apache/xalan/processor/TransformerFactoryImpl.java", "blob_url": "https://github.com/apache/xalan-java/blob/d83a9b95eb95d742879d5c2138e9d8f7970b81cb/src/org/apache/xalan/processor/TransformerFactoryImpl.java", "sha": "3e234e33062f712603fd555ab00b658668c7b7dc", "changes": 14, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/xalan-java/contents/src/org/apache/xalan/processor/TransformerFactoryImpl.java?ref=d83a9b95eb95d742879d5c2138e9d8f7970b81cb", "patch": "@@ -483,7 +483,8 @@ public XMLFilter newXMLFilter(Source src)\n   {\n \n     Templates templates = newTemplates(src);\n-\n+    if( templates==null ) return null;\n+    \n     return newXMLFilter(templates);\n   }\n \n@@ -533,6 +534,7 @@ public TransformerHandler newTransformerHandler(Source src)\n   {\n \n     Templates templates = newTemplates(src);\n+    if( templates==null ) return null;\n     \n     return newTransformerHandler(templates);\n   }\n@@ -629,7 +631,15 @@ public Transformer newTransformer(Source source)\n           throws TransformerConfigurationException\n   {\n     try {\n-      return newTemplates(source).newTransformer();\n+      Templates tmpl=newTemplates( source );\n+      /* this can happen if an ErrorListener is present and it doesn't\n+         throw any exception in fatalError. \n+         The spec says: \"a Transformer must use this interface\n+         instead of throwing an exception\" - the newTemplates() does\n+\t that, and returns null.\n+      */\n+      if( tmpl==null ) return null;\n+      return tmpl.newTransformer();\n     } catch( TransformerConfigurationException ex ) {\n       if( m_errorListener != null ) {\n \ttry {", "filename": "src/org/apache/xalan/processor/TransformerFactoryImpl.java"}], "repo": "xalan-java"}, {"commit": "https://github.com/apache/xalan-java/commit/feedc9ed20b575913dffc9d3797df6a3fdabbab2", "parent": "https://github.com/apache/xalan-java/commit/d5ac3887c40f8f081356bf59e1bf895feefea032", "message": "Use JAXP1.1 to get  the XMLReader - there are 5 files where a new\nXMLReader is created, and now we use SAXParserFactory to get\nit.\n\nWe do check for NoSuchMethodError - that means the code will work even\nif you have an old JAXP1.0 parser ( assuming you have the old parser\nat the beginning of CLASSPATH, same for JAXP1.0 - since xalan\nincludes the latest ). Probably that will disapear when no longer needed.\n\nI tested with crimson, xerces ( latest - JAXP1.1 ), xerces ( old - JAXP1.0),\nit seems to work fine.\n\nAlso, in StylesheetHandler, add an extra check for NPE - during debug\nit happened to have an unchecked null ( and it can't hurt to check )", "bug_id": "xalan-java_3", "file": [{"additions": 16, "raw_url": "https://github.com/apache/xalan-java/raw/feedc9ed20b575913dffc9d3797df6a3fdabbab2/src/org/apache/xalan/processor/ProcessorInclude.java", "blob_url": "https://github.com/apache/xalan-java/blob/feedc9ed20b575913dffc9d3797df6a3fdabbab2/src/org/apache/xalan/processor/ProcessorInclude.java", "sha": "345d0d91e2630578373a11d17f2ebcfe21035a26", "changes": 16, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/xalan-java/contents/src/org/apache/xalan/processor/ProcessorInclude.java?ref=feedc9ed20b575913dffc9d3797df6a3fdabbab2", "patch": "@@ -224,6 +224,22 @@ protected void parse(\n       \n       InputSource inputSource = SAXSource.sourceToInputSource(source);\n \n+      // Use JAXP1.1 ( if possible )\n+      try {\n+\t  javax.xml.parsers.SAXParserFactory factory=\n+\t      javax.xml.parsers.SAXParserFactory.newInstance();\n+\t  factory.setNamespaceAware( true );\n+\t  javax.xml.parsers.SAXParser jaxpParser=\n+\t      factory.newSAXParser();\n+\t  reader=jaxpParser.getXMLReader();\n+\t  \n+      } catch( javax.xml.parsers.ParserConfigurationException ex ) {\n+\t  throw new org.xml.sax.SAXException( ex );\n+      } catch( javax.xml.parsers.FactoryConfigurationError ex1 ) {\n+\t  throw new org.xml.sax.SAXException( ex1.toString() );\n+      } catch( NoSuchMethodError ex2 ) {\n+      }\n+      \n       if (null == reader)\n         reader = XMLReaderFactory.createXMLReader();\n ", "filename": "src/org/apache/xalan/processor/ProcessorInclude.java"}, {"additions": 3, "raw_url": "https://github.com/apache/xalan-java/raw/feedc9ed20b575913dffc9d3797df6a3fdabbab2/src/org/apache/xalan/processor/StylesheetHandler.java", "blob_url": "https://github.com/apache/xalan-java/blob/feedc9ed20b575913dffc9d3797df6a3fdabbab2/src/org/apache/xalan/processor/StylesheetHandler.java", "sha": "6770ecde57285a3d28cb95916b8b537581e69c23", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/xalan-java/contents/src/org/apache/xalan/processor/StylesheetHandler.java?ref=feedc9ed20b575913dffc9d3797df6a3fdabbab2", "patch": "@@ -396,8 +396,9 @@ XSLTElementProcessor getProcessorFor(\n     XSLTElementProcessor elemProcessor = def.getProcessorFor(uri, localName);\n \n     if (null == elemProcessor\n-        && Double.valueOf(getStylesheet().getVersion()).doubleValue()\n-           > Constants.XSLTVERSUPPORTED)\n+        && ( null==getStylesheet() \n+\t     || Double.valueOf(getStylesheet().getVersion()).doubleValue()\n+\t     > Constants.XSLTVERSUPPORTED) )\n     {\n       elemProcessor = def.getProcessorForUnknown(uri, localName);\n     }", "filename": "src/org/apache/xalan/processor/StylesheetHandler.java"}, {"additions": 32, "raw_url": "https://github.com/apache/xalan-java/raw/feedc9ed20b575913dffc9d3797df6a3fdabbab2/src/org/apache/xalan/processor/TransformerFactoryImpl.java", "blob_url": "https://github.com/apache/xalan-java/blob/feedc9ed20b575913dffc9d3797df6a3fdabbab2/src/org/apache/xalan/processor/TransformerFactoryImpl.java", "sha": "5a24e4789896e6e05503d595ed3f0db2448395cd", "changes": 32, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/xalan-java/contents/src/org/apache/xalan/processor/TransformerFactoryImpl.java?ref=feedc9ed20b575913dffc9d3797df6a3fdabbab2", "patch": "@@ -311,6 +311,22 @@ public Source getAssociatedStylesheet(\n       }\n       else\n       {\n+\t// Use JAXP1.1 ( if possible )\n+\ttry {\n+\t    javax.xml.parsers.SAXParserFactory factory=\n+\t\tjavax.xml.parsers.SAXParserFactory.newInstance();\n+\t    factory.setNamespaceAware( true );\n+\t    javax.xml.parsers.SAXParser jaxpParser=\n+\t\tfactory.newSAXParser();\n+\t    reader=jaxpParser.getXMLReader();\n+\t    \n+\t} catch( javax.xml.parsers.ParserConfigurationException ex ) {\n+\t    throw new org.xml.sax.SAXException( ex );\n+\t} catch( javax.xml.parsers.FactoryConfigurationError ex1 ) {\n+\t    throw new org.xml.sax.SAXException( ex1.toString() );\n+\t} catch( NoSuchMethodError ex2 ) {\n+\t}\n+\t\n         if (null == reader)\n         {\n           reader = XMLReaderFactory.createXMLReader();\n@@ -592,6 +608,22 @@ public Templates newTemplates(Source source)\n       XMLReader reader = null;\n       if (source instanceof SAXSource)\n         reader = ((SAXSource)source).getXMLReader();\n+\n+      // Use JAXP1.1 ( if possible )\n+      try {\n+\t  javax.xml.parsers.SAXParserFactory factory=\n+\t      javax.xml.parsers.SAXParserFactory.newInstance();\n+\t  factory.setNamespaceAware( true );\n+\t  javax.xml.parsers.SAXParser jaxpParser=\n+\t      factory.newSAXParser();\n+\t  reader=jaxpParser.getXMLReader();\n+\t  \n+      } catch( javax.xml.parsers.ParserConfigurationException ex ) {\n+\t  throw new org.xml.sax.SAXException( ex );\n+      } catch( javax.xml.parsers.FactoryConfigurationError ex1 ) {\n+\t  throw new org.xml.sax.SAXException( ex1.toString() );\n+      } catch( NoSuchMethodError ex2 ) {\n+      }\n       \n       if (null == reader)\n         reader = XMLReaderFactory.createXMLReader();", "filename": "src/org/apache/xalan/processor/TransformerFactoryImpl.java"}, {"additions": 23, "raw_url": "https://github.com/apache/xalan-java/raw/feedc9ed20b575913dffc9d3797df6a3fdabbab2/src/org/apache/xalan/transformer/TrAXFilter.java", "blob_url": "https://github.com/apache/xalan-java/blob/feedc9ed20b575913dffc9d3797df6a3fdabbab2/src/org/apache/xalan/transformer/TrAXFilter.java", "sha": "aecf2d87b9f49f316c218f04e7aea047f25b0d7b", "changes": 24, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/xalan-java/contents/src/org/apache/xalan/transformer/TrAXFilter.java?ref=feedc9ed20b575913dffc9d3797df6a3fdabbab2", "patch": "@@ -82,7 +82,29 @@ public void parse (InputSource input)\n   {\n     if(null == getParent())\n     {\n-      XMLReader parent = XMLReaderFactory.createXMLReader();\n+      XMLReader reader=null;\n+\n+      // Use JAXP1.1 ( if possible )\n+      try {\n+\t  javax.xml.parsers.SAXParserFactory factory=\n+\t      javax.xml.parsers.SAXParserFactory.newInstance();\n+\t  factory.setNamespaceAware( true );\n+\t  javax.xml.parsers.SAXParser jaxpParser=\n+\t      factory.newSAXParser();\n+\t  reader=jaxpParser.getXMLReader();\n+\t  \n+      } catch( javax.xml.parsers.ParserConfigurationException ex ) {\n+\t  throw new org.xml.sax.SAXException( ex );\n+      } catch( javax.xml.parsers.FactoryConfigurationError ex1 ) {\n+\t  throw new org.xml.sax.SAXException( ex1.toString() );\n+      } catch( NoSuchMethodError ex2 ) {\n+      }\n+\n+      XMLReader parent;\n+      if( reader==null )\n+\t  parent= XMLReaderFactory.createXMLReader();\n+      else\n+\t  parent=reader;\n       try\n       {\n         parent.setFeature(\"http://xml.org/sax/features/namespace-prefixes\",", "filename": "src/org/apache/xalan/transformer/TrAXFilter.java"}, {"additions": 32, "raw_url": "https://github.com/apache/xalan-java/raw/feedc9ed20b575913dffc9d3797df6a3fdabbab2/src/org/apache/xalan/transformer/TransformerImpl.java", "blob_url": "https://github.com/apache/xalan-java/blob/feedc9ed20b575913dffc9d3797df6a3fdabbab2/src/org/apache/xalan/transformer/TransformerImpl.java", "sha": "bd25e33f922bf80fa7e3179f5e445d4aea53e8ea", "changes": 32, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/xalan-java/contents/src/org/apache/xalan/transformer/TransformerImpl.java?ref=feedc9ed20b575913dffc9d3797df6a3fdabbab2", "patch": "@@ -473,6 +473,22 @@ public void transform(Source source)\n       if(source instanceof SAXSource)\n         reader = ((SAXSource)source).getXMLReader();\n \n+      // Use JAXP1.1 ( if possible )\n+      try {\n+\t  javax.xml.parsers.SAXParserFactory factory=\n+\t      javax.xml.parsers.SAXParserFactory.newInstance();\n+\t  factory.setNamespaceAware( true );\n+\t  javax.xml.parsers.SAXParser jaxpParser=\n+\t      factory.newSAXParser();\n+\t  reader=jaxpParser.getXMLReader();\n+\t  \n+      } catch( javax.xml.parsers.ParserConfigurationException ex ) {\n+\t  throw new org.xml.sax.SAXException( ex );\n+      } catch( javax.xml.parsers.FactoryConfigurationError ex1 ) {\n+\t  throw new org.xml.sax.SAXException( ex1.toString() );\n+      } catch( NoSuchMethodError ex2 ) {\n+      }\n+\n       if (null == reader)\n       {\n         reader = XMLReaderFactory.createXMLReader();\n@@ -889,6 +905,22 @@ public Node parseToNode(Source source) throws TransformerException\n       if(source instanceof SAXSource)\n         reader = ((SAXSource)source).getXMLReader();\n \n+      // Use JAXP1.1 ( if possible )\n+      try {\n+\t  javax.xml.parsers.SAXParserFactory factory=\n+\t      javax.xml.parsers.SAXParserFactory.newInstance();\n+\t  factory.setNamespaceAware( true );\n+\t  javax.xml.parsers.SAXParser jaxpParser=\n+\t      factory.newSAXParser();\n+\t  reader=jaxpParser.getXMLReader();\n+\t  \n+      } catch( javax.xml.parsers.ParserConfigurationException ex ) {\n+\t  throw new org.xml.sax.SAXException( ex );\n+      } catch( javax.xml.parsers.FactoryConfigurationError ex1 ) {\n+\t  throw new org.xml.sax.SAXException( ex1.toString() );\n+      } catch( NoSuchMethodError ex2 ) {\n+      }\n+\n       if (null == reader)\n       {\n         reader = XMLReaderFactory.createXMLReader();", "filename": "src/org/apache/xalan/transformer/TransformerImpl.java"}, {"additions": 0, "raw_url": "https://github.com/apache/xalan-java/raw/feedc9ed20b575913dffc9d3797df6a3fdabbab2/src/org/apache/xalan/xslt/Process.java", "blob_url": "https://github.com/apache/xalan-java/blob/feedc9ed20b575913dffc9d3797df6a3fdabbab2/src/org/apache/xalan/xslt/Process.java", "sha": "35828a3cc7f70c900457254a0e535b03f7e30cec", "changes": 11, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/xalan-java/contents/src/org/apache/xalan/xslt/Process.java?ref=feedc9ed20b575913dffc9d3797df6a3fdabbab2", "patch": "@@ -104,17 +104,6 @@\n import javax.xml.transform.OutputKeys;\n import javax.xml.transform.TransformerException;\n \n-// Needed SAX classes\n-import org.xml.sax.InputSource;\n-import org.xml.sax.XMLReader;\n-import org.xml.sax.helpers.ParserAdapter;\n-import org.xml.sax.helpers.XMLReaderFactory;\n-import org.xml.sax.ContentHandler;\n-\n-// Needed DOM classes\n-import org.w3c.dom.Node;\n-import org.w3c.dom.Document;\n-\n // Needed Serializer classes\n import org.apache.xalan.serialize.OutputFormat;\n import org.apache.xalan.serialize.Serializer;", "filename": "src/org/apache/xalan/xslt/Process.java"}], "repo": "xalan-java"}]
