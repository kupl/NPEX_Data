[
    {
        "repo": "commons-math",
        "commit": "https://github.com/apache/commons-math/commit/62a313f67d40f2cd192b7f5890f0be14f358b390",
        "bug_id": "commons-math_62a313f",
        "message": "Replaced NullPointerException by NullArgumentException\n\nJIRA: MATH-403\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1132432 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-math/commit/a4e6f75c86973bf51b5e7c4a11ac38ee90c325d3",
        "patched_files": [
            "DescriptiveStatistics.java",
            "Complex.java",
            "GeometricMean.java",
            "Sum.java",
            "Max.java",
            "ChiSquareTestImpl.java",
            "changes.xml",
            "EmpiricalDistribution.java",
            "FirstMoment.java",
            "StandardDeviation.java",
            "FourthMoment.java",
            "BigFraction.java",
            "ResizableDoubleArray.java",
            "SynchronizedSummaryStatistics.java",
            "SemiVariance.java",
            "SumOfLogs.java",
            "RealMatrix.java",
            "Array2DRowFieldMatrix.java",
            "NullArgumentException.java",
            "SparseRealMatrix.java",
            "Kurtosis.java",
            "Percentile.java",
            "Array2DRowRealMatrix.java",
            "AbstractRealMatrix.java",
            "Mean.java",
            "BlockFieldMatrix.java",
            "MathUtils.java",
            "Skewness.java",
            "Variance.java",
            "BlockRealMatrix.java",
            "Product.java",
            "SumOfSquares.java",
            "ThirdMoment.java",
            "PolynomialFunction.java",
            "SummaryStatistics.java",
            "Min.java",
            "SynchronizedDescriptiveStatistics.java",
            "EmpiricalDistributionImpl.java",
            "SecondMoment.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 14,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java",
                "deletions": 6,
                "sha": "d0128b66d1613f660b1c188835b4bcc647a45000",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java",
                "patch": "@@ -21,10 +21,12 @@\n \n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.NoDataException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.analysis.ParametricUnivariateRealFunction;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Immutable representation of a real polynomial function with real coefficients.\n@@ -57,11 +59,13 @@\n      * the coefficients property.</p>\n      *\n      * @param c Polynomial coefficients.\n-     * @throws NullPointerException if {@code c} is {@code null}.\n+     * @throws NullArgumentException if {@code c} is {@code null}.\n      * @throws NoDataException if {@code c} is empty.\n      */\n-    public PolynomialFunction(double c[]) {\n+    public PolynomialFunction(double c[])\n+        throws NullArgumentException, NoDataException {\n         super();\n+        MathUtils.checkNotNull(c);\n         int n = c.length;\n         if (n == 0) {\n             throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);\n@@ -117,9 +121,11 @@ public int degree() {\n      * @param argument Input value.\n      * @return the value of the polynomial.\n      * @throws NoDataException if {@code coefficients} is empty.\n-     * @throws NullPointerException if {@code coefficients} is {@code null}.\n+     * @throws NullArgumentException if {@code coefficients} is {@code null}.\n      */\n-    protected static double evaluate(double[] coefficients, double argument) {\n+    protected static double evaluate(double[] coefficients, double argument)\n+        throws NullArgumentException, NoDataException {\n+        MathUtils.checkNotNull(coefficients);\n         int n = coefficients.length;\n         if (n == 0) {\n             throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);\n@@ -224,9 +230,11 @@ public PolynomialFunction multiply(final PolynomialFunction p) {\n      * @param coefficients Coefficients of the polynomial to differentiate.\n      * @return the coefficients of the derivative or {@code null} if coefficients has length 1.\n      * @throws NoDataException if {@code coefficients} is empty.\n-     * @throws NullPointerException if {@code coefficients} is {@code null}.\n+     * @throws NullArgumentException if {@code coefficients} is {@code null}.\n      */\n-    protected static double[] differentiate(double[] coefficients) {\n+    protected static double[] differentiate(double[] coefficients)\n+        throws NullArgumentException, NoDataException {\n+        MathUtils.checkNotNull(coefficients);\n         int n = coefficients.length;\n         if (n == 0) {\n             throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);",
                "changes": 20
            },
            {
                "status": "modified",
                "additions": 21,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/complex/Complex.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/complex/Complex.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/complex/Complex.java",
                "deletions": 13,
                "sha": "e65f63371180b938fa503d8165930259929ef4a4",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/complex/Complex.java",
                "patch": "@@ -23,6 +23,7 @@\n \n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.MathUtils;\n import org.apache.commons.math.util.FastMath;\n@@ -144,9 +145,11 @@ public double abs() {\n      *\n      * @param rhs the other complex number\n      * @return the complex number sum\n-     * @throws NullPointerException if <code>rhs</code> is null\n+     * @throws NullArgumentException if <code>rhs</code> is null\n      */\n-    public Complex add(Complex rhs) {\n+    public Complex add(Complex rhs)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(rhs);\n         return createComplex(real + rhs.getReal(),\n             imaginary + rhs.getImaginary());\n     }\n@@ -205,9 +208,11 @@ public Complex conjugate() {\n      *\n      * @param rhs the other complex number\n      * @return the complex number quotient\n-     * @throws NullPointerException if <code>rhs</code> is null\n+     * @throws NullArgumentException if <code>rhs</code> is null\n      */\n-    public Complex divide(Complex rhs) {\n+    public Complex divide(Complex rhs)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(rhs);\n         if (isNaN() || rhs.isNaN()) {\n             return NaN;\n         }\n@@ -352,9 +357,11 @@ public boolean isInfinite() {\n      *\n      * @param rhs the other complex number\n      * @return the complex number product\n-     * @throws NullPointerException if <code>rhs</code> is null\n+     * @throws NullArgumentException if <code>rhs</code> is null\n      */\n-    public Complex multiply(Complex rhs) {\n+    public Complex multiply(Complex rhs)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(rhs);\n         if (isNaN() || rhs.isNaN()) {\n             return NaN;\n         }\n@@ -437,9 +444,11 @@ public Complex negate() {\n      *\n      * @param rhs the other complex number\n      * @return the complex number difference\n-     * @throws NullPointerException if <code>rhs</code> is null\n+     * @throws NullArgumentException if <code>rhs</code> is null\n      */\n-    public Complex subtract(Complex rhs) {\n+    public Complex subtract(Complex rhs)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(rhs);\n         if (isNaN() || rhs.isNaN()) {\n             return NaN;\n         }\n@@ -673,13 +682,12 @@ public Complex log() {\n      *\n      * @param x the exponent.\n      * @return <code>this</code><sup><code>x</code></sup>\n-     * @throws NullPointerException if x is null\n+     * @throws NullArgumentException if x is null\n      * @since 1.2\n      */\n-    public Complex pow(Complex x) {\n-        if (x == null) {\n-            throw new NullPointerException();\n-        }\n+    public Complex pow(Complex x)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(x);\n         return this.log().multiply(x).exp();\n     }\n ",
                "changes": 34
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/exception/NullArgumentException.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/exception/NullArgumentException.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/exception/NullArgumentException.java",
                "deletions": 1,
                "sha": "23309b6363557c9d3f36e3be067e548dfdfaddfb",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/exception/NullArgumentException.java",
                "patch": "@@ -24,7 +24,7 @@\n  * this exception.\n  * This class is meant to signal a precondition violation (\"null is an illegal\n  * argument\") and so does not extend the standard {@code NullPointerException}.\n- * Proagation of {@code NullPointerException} from within Commons-Math is\n+ * Propagation of {@code NullPointerException} from within Commons-Math is\n  * construed to be a bug.\n  *\n  * @since 2.2",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/fraction/BigFraction.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/fraction/BigFraction.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
                "deletions": 2,
                "sha": "8eddcc4ccb5fd28357425b03efc53e1fa9d40cf6",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/fraction/BigFraction.java",
                "patch": "@@ -458,10 +458,11 @@ public BigFraction abs() {\n      * @param bg\n      *            the {@link BigInteger} to add, must'nt be <code>null</code>.\n      * @return a <code>BigFraction</code> instance with the resulting values.\n-     * @throws NullPointerException\n+     * @throws NullArgumentException\n      *             if the {@link BigInteger} is <code>null</code>.\n      */\n-    public BigFraction add(final BigInteger bg) {\n+    public BigFraction add(final BigInteger bg) throws NullArgumentException {\n+        MathUtils.checkNotNull(bg);\n         return new BigFraction(numerator.add(denominator.multiply(bg)), denominator);\n     }\n ",
                "changes": 5
            },
            {
                "status": "modified",
                "additions": 4,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
                "deletions": 1,
                "sha": "c707aeca53ae28bcefa501c92f8e75a0dc13c97e",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.MathUtils;\n import org.apache.commons.math.util.FastMath;\n@@ -385,7 +386,9 @@ public void copySubMatrix(int[] selectedRows, int[] selectedColumns, double[][]\n     }\n \n     /** {@inheritDoc} */\n-    public void setSubMatrix(final double[][] subMatrix, final int row, final int column) {\n+    public void setSubMatrix(final double[][] subMatrix, final int row, final int column)\n+        throws NoDataException, DimensionMismatchException, NullArgumentException {\n+        MathUtils.checkNotNull(subMatrix);\n         final int nRows = subMatrix.length;\n         if (nRows == 0) {\n             throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);",
                "changes": 5
            },
            {
                "status": "modified",
                "additions": 6,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java",
                "deletions": 6,
                "sha": "7255e0f637e0d48162637c62719814b2c5d73516",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java",
                "patch": "@@ -24,7 +24,9 @@\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathIllegalStateException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Implementation of FieldMatrix<T> using a {@link FieldElement}[][] array to store entries.\n@@ -140,18 +142,16 @@ public Array2DRowFieldMatrix(final T[][] d, final boolean copyArray) {\n      * @param copyArray Whether to copy or reference the input array.\n      * @throws DimensionMismatchException if {@code d} is not rectangular.\n      * @throws NoDataException if there are not at least one row and one column.\n-     * @throws org.apache.commons.math.exception.NullArgumentException\n-     * if {@code d} is {@code null}.\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n      * @see #Array2DRowFieldMatrix(FieldElement[][])\n      */\n-    public Array2DRowFieldMatrix(final Field<T> field, final T[][] d, final boolean copyArray) {\n+    public Array2DRowFieldMatrix(final Field<T> field, final T[][] d, final boolean copyArray)\n+        throws DimensionMismatchException, NoDataException, NullArgumentException {\n         super(field);\n         if (copyArray) {\n             copyIn(d);\n         } else {\n-            if (d == null) {\n-                throw new NullPointerException();\n-            }\n+            MathUtils.checkNotNull(d);\n             final int nRows = d.length;\n             if (nRows == 0) {\n                 throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);",
                "changes": 12
            },
            {
                "status": "modified",
                "additions": 8,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
                "deletions": 4,
                "sha": "8db8dc7161413e73b9c1492c879a60f034c0428f",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
                "patch": "@@ -24,6 +24,7 @@\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Implementation of RealMatrix using a double[][] array to store entries and\n@@ -87,10 +88,11 @@ public Array2DRowRealMatrix(final int rowDimension, final int columnDimension) {\n      * @param d Data for the new matrix.\n      * @throws DimensionMismatchException if {@code d} is not rectangular.\n      * @throws NoDataException if {@code d} row or colum dimension is zero.\n-     * @throws NullPointerException if {@code d} is {@code null}.\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n      * @see #Array2DRowRealMatrix(double[][], boolean)\n      */\n-    public Array2DRowRealMatrix(final double[][] d) {\n+    public Array2DRowRealMatrix(final double[][] d)\n+        throws DimensionMismatchException, NoDataException, NullArgumentException {\n         copyIn(d);\n     }\n \n@@ -275,6 +277,7 @@ public void setSubMatrix(final double[][] subMatrix,\n             if (column > 0) {\n                 throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);\n             }\n+            MathUtils.checkNotNull(subMatrix);\n             final int nRows = subMatrix.length;\n             if (nRows == 0) {\n                 throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n@@ -526,10 +529,11 @@ public double walkInColumnOrder(final RealMatrixPreservingVisitor visitor,\n      * @param in Data to copy.\n      * @throws NoDataException if the input array is empty.\n      * @throws DimensionMismatchException if the input array is not rectangular.\n-     * @throws org.apache.commons.math.exception.NullArgumentException if\n+     * @throws NullArgumentException if\n      * the input array is {@code null}.\n      */\n-    private void copyIn(final double[][] in) {\n+    private void copyIn(final double[][] in)\n+        throws DimensionMismatchException, NoDataException, NullArgumentException {\n         setSubMatrix(in, 0, 0);\n     }\n }",
                "changes": 12
            },
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java",
                "deletions": 0,
                "sha": "8e9378317e080646f5bc9890a694be3364b668d2",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java",
                "patch": "@@ -25,6 +25,7 @@\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Cache-friendly implementation of FieldMatrix using a flat arrays to store\n@@ -759,6 +760,7 @@ private void copyBlockPart(final T[] srcBlock, final int srcWidth,\n     @Override\n     public void setSubMatrix(final T[][] subMatrix, final int row, final int column) {\n         // safety checks\n+        MathUtils.checkNotNull(subMatrix);\n         final int refLength = subMatrix[0].length;\n         if (refLength == 0) {\n             throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 5,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
                "deletions": 1,
                "sha": "b466fb6bd0c03fb551fba723914793335bd1af81",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
                "patch": "@@ -22,8 +22,10 @@\n \n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.NoDataException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Cache-friendly implementation of RealMatrix using a flat arrays to store\n@@ -764,8 +766,10 @@ private void copyBlockPart(final double[] srcBlock, final int srcWidth,\n \n     /** {@inheritDoc} */\n     @Override\n-    public void setSubMatrix(final double[][] subMatrix, final int row, final int column) {\n+    public void setSubMatrix(final double[][] subMatrix, final int row, final int column)\n+        throws NoDataException, NullArgumentException {\n         // safety checks\n+        MathUtils.checkNotNull(subMatrix);\n         final int refLength = subMatrix[0].length;\n         if (refLength == 0) {\n             throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);",
                "changes": 6
            },
            {
                "status": "modified",
                "additions": 12,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/RealMatrix.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/linear/RealMatrix.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/linear/RealMatrix.java",
                "deletions": 10,
                "sha": "a0f4fd3c15877c394a4f2c19a133cf9626e08744",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/linear/RealMatrix.java",
                "patch": "@@ -17,6 +17,11 @@\n \n package org.apache.commons.math.linear;\n \n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.OutOfRangeException;\n+import org.apache.commons.math.exception.ZeroException;\n+\n /**\n  * Interface defining a real-valued matrix with basic algebraic operations.\n  * <p>\n@@ -210,19 +215,16 @@ void copySubMatrix(int startRow, int endRow, int startColumn, int endColumn,\n     * @param subMatrix  array containing the submatrix replacement data\n     * @param row  row coordinate of the top, left element to be replaced\n     * @param column  column coordinate of the top, left element to be replaced\n-    * @throws org.apache.commons.math.exception.ZeroException if\n-    * {@code subMatrix} does not contain at least one column.\n-    * @throws org.apache.commons.math.exception.OutOfRangeException if\n-    * {@code subMatrix} does not fit into this matrix from element in\n-    * {@code (row, column)}.\n-    * @throws org.apache.commons.math.exception.DimensionMismatchException\n-    * if {@code subMatrix} is not rectangular.\n+    * @throws ZeroException if {@code subMatrix} does not contain at least one column.\n+    * @throws OutOfRangeException if {@code subMatrix} does not fit into\n+    * this matrix from element in {@code (row, column)}.\n+    * @throws DimensionMismatchException if {@code subMatrix} is not rectangular.\n     * (not all rows have the same length) or empty.\n-    * @throws org.apache.commons.math.exception.NullArgumentException if\n-    * {@code subMatrix} is {@code null}.\n+    * @throws NullArgumentException if {@code subMatrix} is {@code null}.\n     * @since 2.0\n     */\n-    void setSubMatrix(double[][] subMatrix, int row, int column);\n+    void setSubMatrix(double[][] subMatrix, int row, int column)\n+        throws ZeroException, OutOfRangeException, DimensionMismatchException, NullArgumentException;\n \n    /**\n     * Geet the entries at the given row index",
                "changes": 22
            },
            {
                "status": "modified",
                "additions": 4,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java",
                "deletions": 1,
                "sha": "b0a1047a47b456ed54a7b1e04cb31d65e90ff0d4",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.net.URL;\n import java.util.List;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.StatisticalSummary;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n \n@@ -62,6 +63,7 @@\n      *\n      * @param file the input file\n      * @throws IOException if an IO error occurs\n+     * @throws NullArgumentException if file is null\n      */\n     void load(File file) throws IOException;\n \n@@ -70,8 +72,9 @@\n      *\n      * @param url url of the input file\n      * @throws IOException if an IO error occurs\n+     * @throws NullArgumentException if url is null\n      */\n-    void load(URL url) throws IOException;\n+    void load(URL url) throws IOException, NullArgumentException;\n \n     /**\n      * Generates a random value from this distribution.",
                "changes": 5
            },
            {
                "status": "modified",
                "additions": 13,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java",
                "deletions": 4,
                "sha": "4604ac2280498b0191c22783599c2ab5f84236aa",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java",
                "patch": "@@ -28,10 +28,12 @@\n import java.util.List;\n \n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.StatisticalSummary;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Implements <code>EmpiricalDistribution</code> interface.  This implementation\n@@ -115,8 +117,9 @@ public EmpiricalDistributionImpl(int binCount) {\n      * array of numbers.\n      *\n      * @param in the input data array\n+     * @exception NullArgumentException if in is null\n      */\n-    public void load(double[] in) {\n+    public void load(double[] in) throws NullArgumentException {\n         DataAdapter da = new ArrayDataAdapter(in);\n         try {\n             da.computeStats();\n@@ -133,8 +136,10 @@ public void load(double[] in) {\n      * @param url  url of the input file\n      *\n      * @throws IOException if an IO error occurs\n+     * @throws NullArgumentException if url is null\n      */\n-    public void load(URL url) throws IOException {\n+    public void load(URL url) throws IOException, NullArgumentException {\n+        MathUtils.checkNotNull(url);\n         BufferedReader in =\n             new BufferedReader(new InputStreamReader(url.openStream()));\n         try {\n@@ -161,8 +166,10 @@ public void load(URL url) throws IOException {\n      *\n      * @param file the input file\n      * @throws IOException if an IO error occurs\n+     * @throws NullArgumentException if file is null\n      */\n-    public void load(File file) throws IOException {\n+    public void load(File file) throws IOException, NullArgumentException {\n+        MathUtils.checkNotNull(file);\n         BufferedReader in = new BufferedReader(new FileReader(file));\n         try {\n             DataAdapter da = new StreamDataAdapter(in);\n@@ -288,9 +295,11 @@ public void computeStats() throws IOException {\n          * Construct an ArrayDataAdapter from a double[] array\n          *\n          * @param in double[] array holding the data\n+         * @throws NullArgumentException if in is null\n          */\n-        public ArrayDataAdapter(double[] in){\n+        public ArrayDataAdapter(double[] in) throws NullArgumentException {\n             super();\n+            MathUtils.checkNotNull(in);\n             inputArray = in;\n         }\n ",
                "changes": 17
            },
            {
                "status": "modified",
                "additions": 7,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
                "deletions": 2,
                "sha": "c25a4819859cf16036115ee5f4052a5cb89839f8",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.Arrays;\n \n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.moment.GeometricMean;\n import org.apache.commons.math.stat.descriptive.moment.Kurtosis;\n@@ -32,6 +33,7 @@\n import org.apache.commons.math.stat.descriptive.rank.Percentile;\n import org.apache.commons.math.stat.descriptive.summary.Sum;\n import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;\n+import org.apache.commons.math.util.MathUtils;\n import org.apache.commons.math.util.ResizableDoubleArray;\n import org.apache.commons.math.util.FastMath;\n \n@@ -699,9 +701,12 @@ public DescriptiveStatistics copy() {\n      *\n      * @param source DescriptiveStatistics to copy\n      * @param dest DescriptiveStatistics to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(DescriptiveStatistics source, DescriptiveStatistics dest) {\n+    public static void copy(DescriptiveStatistics source, DescriptiveStatistics dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         // Copy data and window size\n         dest.eDA = source.eDA.copy();\n         dest.windowSize = source.windowSize;",
                "changes": 9
            },
            {
                "status": "modified",
                "additions": 6,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
                "deletions": 2,
                "sha": "d4f80e57c68fef810c2800fd89a75e7bae0d55bf",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
                "patch": "@@ -19,6 +19,7 @@\n import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.moment.GeometricMean;\n import org.apache.commons.math.stat.descriptive.moment.Mean;\n@@ -652,9 +653,12 @@ public SummaryStatistics copy() {\n      *\n      * @param source SummaryStatistics to copy\n      * @param dest SummaryStatistics to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(SummaryStatistics source, SummaryStatistics dest) {\n+    public static void copy(SummaryStatistics source, SummaryStatistics dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.maxImpl = source.maxImpl.copy();\n         dest.meanImpl = source.meanImpl.copy();\n         dest.minImpl = source.minImpl.copy();",
                "changes": 8
            },
            {
                "status": "modified",
                "additions": 8,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java",
                "deletions": 2,
                "sha": "0dc015e78426c98468eb9163eec8b965b19f5763",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java",
                "patch": "@@ -16,6 +16,9 @@\n  */\n package org.apache.commons.math.stat.descriptive;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.util.MathUtils;\n+\n /**\n  * Implementation of\n  * {@link org.apache.commons.math.stat.descriptive.DescriptiveStatistics} that\n@@ -159,10 +162,13 @@ public synchronized SynchronizedDescriptiveStatistics copy() {\n      *\n      * @param source SynchronizedDescriptiveStatistics to copy\n      * @param dest SynchronizedDescriptiveStatistics to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n     public static void copy(SynchronizedDescriptiveStatistics source,\n-            SynchronizedDescriptiveStatistics dest) {\n+                            SynchronizedDescriptiveStatistics dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         synchronized (source) {\n             synchronized (dest) {\n                 DescriptiveStatistics.copy(source, dest);",
                "changes": 10
            },
            {
                "status": "modified",
                "additions": 8,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java",
                "deletions": 2,
                "sha": "fa4782838c86dc16bd312a3b4914c9e5ded79a3c",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java",
                "patch": "@@ -16,6 +16,9 @@\n  */\n package org.apache.commons.math.stat.descriptive;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.util.MathUtils;\n+\n /**\n  * Implementation of\n  * {@link org.apache.commons.math.stat.descriptive.SummaryStatistics} that\n@@ -319,10 +322,13 @@ public synchronized SynchronizedSummaryStatistics copy() {\n      *\n      * @param source SynchronizedSummaryStatistics to copy\n      * @param dest SynchronizedSummaryStatistics to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n     public static void copy(SynchronizedSummaryStatistics source,\n-            SynchronizedSummaryStatistics dest) {\n+                            SynchronizedSummaryStatistics dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         synchronized (source) {\n             synchronized (dest) {\n                 SummaryStatistics.copy(source, dest);",
                "changes": 10
            },
            {
                "status": "modified",
                "additions": 8,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java",
                "deletions": 2,
                "sha": "5d5b2f4bcde8b5bee0d5c63b17d8d5471e166621",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java",
                "patch": "@@ -17,7 +17,10 @@\n package org.apache.commons.math.stat.descriptive.moment;\n \n import java.io.Serializable;\n+\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Computes the first moment (arithmetic mean).  Uses the definitional formula:\n@@ -148,9 +151,12 @@ public FirstMoment copy() {\n      *\n      * @param source FirstMoment to copy\n      * @param dest FirstMoment to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(FirstMoment source, FirstMoment dest) {\n+    public static void copy(FirstMoment source, FirstMoment dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.n = source.n;\n         dest.m1 = source.m1;",
                "changes": 10
            },
            {
                "status": "modified",
                "additions": 8,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java",
                "deletions": 2,
                "sha": "ed288e708e03007d53390990b65a8d70f1c52d22",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java",
                "patch": "@@ -18,6 +18,9 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.util.MathUtils;\n+\n /**\n  * Computes a statistic related to the Fourth Central Moment.  Specifically,\n  * what is computed is the sum of\n@@ -133,9 +136,12 @@ public FourthMoment copy() {\n      *\n      * @param source FourthMoment to copy\n      * @param dest FourthMoment to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(FourthMoment source, FourthMoment dest) {\n+    public static void copy(FourthMoment source, FourthMoment dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         ThirdMoment.copy(source, dest);\n         dest.m4 = source.m4;\n     }",
                "changes": 10
            },
            {
                "status": "modified",
                "additions": 7,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java",
                "deletions": 2,
                "sha": "735efea71a1e3e38242d21c08a6f3cb1cceb896f",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java",
                "patch": "@@ -19,11 +19,13 @@\n import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic;\n import org.apache.commons.math.stat.descriptive.summary.SumOfLogs;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Returns the <a href=\"http://www.xycoon.com/geometric_mean.htm\">\n@@ -183,9 +185,12 @@ public StorelessUnivariateStatistic getSumLogImpl() {\n      *\n      * @param source GeometricMean to copy\n      * @param dest GeometricMean to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(GeometricMean source, GeometricMean dest) {\n+    public static void copy(GeometricMean source, GeometricMean dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.sumOfLogs = source.sumOfLogs.copy();\n     }",
                "changes": 9
            },
            {
                "status": "modified",
                "additions": 7,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java",
                "deletions": 2,
                "sha": "e0e552412a8f84d53e70085555779fe50903ae9d",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java",
                "patch": "@@ -19,9 +19,11 @@\n import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n \n /**\n@@ -211,9 +213,12 @@ public Kurtosis copy() {\n      *\n      * @param source Kurtosis to copy\n      * @param dest Kurtosis to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(Kurtosis source, Kurtosis dest) {\n+    public static void copy(Kurtosis source, Kurtosis dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.moment = source.moment.copy();\n         dest.incMoment = source.incMoment;",
                "changes": 9
            },
            {
                "status": "modified",
                "additions": 7,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java",
                "deletions": 2,
                "sha": "b1b67fd1e31780ccf346589bea11bf877c324685",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java",
                "patch": "@@ -18,9 +18,11 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.stat.descriptive.WeightedEvaluation;\n import org.apache.commons.math.stat.descriptive.summary.Sum;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * <p>Computes the arithmetic mean of a set of values. Uses the definitional\n@@ -262,9 +264,12 @@ public Mean copy() {\n      *\n      * @param source Mean to copy\n      * @param dest Mean to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(Mean source, Mean dest) {\n+    public static void copy(Mean source, Mean dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.incMoment = source.incMoment;\n         dest.moment = source.moment.copy();",
                "changes": 9
            },
            {
                "status": "modified",
                "additions": 8,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java",
                "deletions": 2,
                "sha": "53cdf331954562e8ab23e2c879635b342e85fcf9",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java",
                "patch": "@@ -18,6 +18,9 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.util.MathUtils;\n+\n /**\n  * Computes a statistic related to the Second Central Moment.  Specifically,\n  * what is computed is the sum of squared deviations from the sample mean.\n@@ -114,9 +117,12 @@ public SecondMoment copy() {\n      *\n      * @param source SecondMoment to copy\n      * @param dest SecondMoment to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(SecondMoment source, SecondMoment dest) {\n+    public static void copy(SecondMoment source, SecondMoment dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         FirstMoment.copy(source, dest);\n         dest.m2 = source.m2;\n     }",
                "changes": 10
            },
            {
                "status": "modified",
                "additions": 6,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java",
                "deletions": 2,
                "sha": "707a9767520e18b243e058d86bb581fdd3a95fbc",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java",
                "patch": "@@ -21,6 +21,7 @@\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * <p>Computes the semivariance of a set of values with respect to a given cutoff value.\n@@ -156,9 +157,12 @@ public SemiVariance copy() {\n      *\n      * @param source SemiVariance to copy\n      * @param dest SemiVariance to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(final SemiVariance source, SemiVariance dest) {\n+    public static void copy(final SemiVariance source, SemiVariance dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.biasCorrected = source.biasCorrected;\n         dest.varianceDirection = source.varianceDirection;",
                "changes": 8
            },
            {
                "status": "modified",
                "additions": 7,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java",
                "deletions": 2,
                "sha": "a33cbbb2c8d9bec0462dbb0d5f46b03c2c58e80b",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java",
                "patch": "@@ -18,8 +18,10 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Computes the skewness of the available values.\n@@ -203,9 +205,12 @@ public Skewness copy() {\n      *\n      * @param source Skewness to copy\n      * @param dest Skewness to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(Skewness source, Skewness dest) {\n+    public static void copy(Skewness source, Skewness dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.moment = new ThirdMoment(source.moment.copy());\n         dest.incMoment = source.incMoment;",
                "changes": 9
            },
            {
                "status": "modified",
                "additions": 7,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java",
                "deletions": 2,
                "sha": "10a23ed1b8fcccf636cb5a2d3123c04248101643",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java",
                "patch": "@@ -18,8 +18,10 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Computes the sample standard deviation.  The standard deviation\n@@ -261,9 +263,12 @@ public StandardDeviation copy() {\n      *\n      * @param source StandardDeviation to copy\n      * @param dest StandardDeviation to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(StandardDeviation source, StandardDeviation dest) {\n+    public static void copy(StandardDeviation source, StandardDeviation dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.variance = source.variance.copy();\n     }",
                "changes": 9
            },
            {
                "status": "modified",
                "additions": 8,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java",
                "deletions": 2,
                "sha": "7e7c49c8bb3a7f1552f8ecd553367def7ea2d8fa",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java",
                "patch": "@@ -18,6 +18,9 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.util.MathUtils;\n+\n \n /**\n  * Computes a statistic related to the Third Central Moment.  Specifically,\n@@ -128,9 +131,12 @@ public ThirdMoment copy() {\n      *\n      * @param source ThirdMoment to copy\n      * @param dest ThirdMoment to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(ThirdMoment source, ThirdMoment dest) {\n+    public static void copy(ThirdMoment source, ThirdMoment dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         SecondMoment.copy(source, dest);\n         dest.m3 = source.m3;\n         dest.nDevSq = source.nDevSq;",
                "changes": 10
            },
            {
                "status": "modified",
                "additions": 6,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java",
                "deletions": 6,
                "sha": "124d266f1e758ed17a514968b012660490dc3bed",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.WeightedEvaluation;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Computes the variance of the available values.  By default, the unbiased\n@@ -595,13 +596,12 @@ public Variance copy() {\n      *\n      * @param source Variance to copy\n      * @param dest Variance to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(Variance source, Variance dest) {\n-        if (source == null ||\n-            dest == null) {\n-            throw new NullArgumentException();\n-        }\n+    public static void copy(Variance source, Variance dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.moment = source.moment.copy();\n         dest.isBiasCorrected = source.isBiasCorrected;",
                "changes": 12
            },
            {
                "status": "modified",
                "additions": 7,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java",
                "deletions": 2,
                "sha": "c59ed540c3798434ba0eaff2bb35236300bd6a30",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java",
                "patch": "@@ -18,7 +18,9 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Returns the maximum of the available values.\n@@ -153,9 +155,12 @@ public Max copy() {\n      *\n      * @param source Max to copy\n      * @param dest Max to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(Max source, Max dest) {\n+    public static void copy(Max source, Max dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.n = source.n;\n         dest.value = source.value;",
                "changes": 9
            },
            {
                "status": "modified",
                "additions": 7,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java",
                "deletions": 2,
                "sha": "6f5c82d283348ba556b49ca2863dd0ecfb8c2c49",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java",
                "patch": "@@ -18,7 +18,9 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Returns the minimum of the available values.\n@@ -153,9 +155,12 @@ public Min copy() {\n      *\n      * @param source Min to copy\n      * @param dest Min to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(Min source, Min dest) {\n+    public static void copy(Min source, Min dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.n = source.n;\n         dest.value = source.value;",
                "changes": 9
            },
            {
                "status": "modified",
                "additions": 7,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java",
                "deletions": 2,
                "sha": "c3cd66e0fd286da6b64a9e1f1fee0f380c0714c7",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java",
                "patch": "@@ -19,10 +19,12 @@\n import java.io.Serializable;\n import java.util.Arrays;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Provides percentile computation.\n@@ -482,9 +484,12 @@ public Percentile copy() {\n      *\n      * @param source Percentile to copy\n      * @param dest Percentile to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(Percentile source, Percentile dest) {\n+    public static void copy(Percentile source, Percentile dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         if (source.cachedPivots != null) {\n             System.arraycopy(source.cachedPivots, 0, dest.cachedPivots, 0, source.cachedPivots.length);",
                "changes": 9
            },
            {
                "status": "modified",
                "additions": 7,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java",
                "deletions": 2,
                "sha": "bc656d3c4deb0f1f3fd60c53caca254e149e148d",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java",
                "patch": "@@ -18,9 +18,11 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.stat.descriptive.WeightedEvaluation;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Returns the product of the available values.\n@@ -210,9 +212,12 @@ public Product copy() {\n      *\n      * @param source Product to copy\n      * @param dest Product to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(Product source, Product dest) {\n+    public static void copy(Product source, Product dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.n = source.n;\n         dest.value = source.value;",
                "changes": 9
            },
            {
                "status": "modified",
                "additions": 7,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java",
                "deletions": 2,
                "sha": "f865f8d826565dc568b83c027367f9f65a36f1b1",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java",
                "patch": "@@ -18,7 +18,9 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.util.MathUtils;\n \n \n /**\n@@ -206,9 +208,12 @@ public Sum copy() {\n      *\n      * @param source Sum to copy\n      * @param dest Sum to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(Sum source, Sum dest) {\n+    public static void copy(Sum source, Sum dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.n = source.n;\n         dest.value = source.value;",
                "changes": 9
            },
            {
                "status": "modified",
                "additions": 7,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java",
                "deletions": 2,
                "sha": "8166d289d1c9639d2dc047cb9726fdf6c9fd05ea",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java",
                "patch": "@@ -18,8 +18,10 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Returns the sum of the natural logs for this collection of values.\n@@ -152,9 +154,12 @@ public SumOfLogs copy() {\n      *\n      * @param source SumOfLogs to copy\n      * @param dest SumOfLogs to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(SumOfLogs source, SumOfLogs dest) {\n+    public static void copy(SumOfLogs source, SumOfLogs dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.n = source.n;\n         dest.value = source.value;",
                "changes": 9
            },
            {
                "status": "modified",
                "additions": 7,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java",
                "deletions": 2,
                "sha": "15053c8980046db1772c3ef8390fdcfde7e59b23",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java",
                "patch": "@@ -18,7 +18,9 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Returns the sum of the squares of the available values.\n@@ -140,9 +142,12 @@ public SumOfSquares copy() {\n      *\n      * @param source SumOfSquares to copy\n      * @param dest SumOfSquares to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(SumOfSquares source, SumOfSquares dest) {\n+    public static void copy(SumOfSquares source, SumOfSquares dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.n = source.n;\n         dest.value = source.value;",
                "changes": 9
            },
            {
                "status": "modified",
                "additions": 6,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java",
                "deletions": 2,
                "sha": "090aacd0d95356674d3ac76b7e01f9ae7969ab01",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java",
                "patch": "@@ -19,6 +19,7 @@\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.exception.NotPositiveException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n@@ -27,6 +28,7 @@\n import org.apache.commons.math.distribution.ChiSquaredDistributionImpl;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Implements Chi-Square test statistics defined in the\n@@ -337,10 +339,12 @@ private void checkArray(long[][] in) {\n      * Throws MathIllegalArgumentException if the input array is not rectangular.\n      *\n      * @param in array to be tested\n-     * @throws NullPointerException if input array is null\n+     * @throws NullArgumentException if input array is null\n      * @throws MathIllegalArgumentException if input array is not rectangular\n      */\n-    private void checkRectangular(long[][] in) {\n+    private void checkRectangular(long[][] in)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(in);\n         for (int i = 1; i < in.length; i++) {\n             if (in[i].length != in[0].length) {\n                 throw new DimensionMismatchException(LocalizedFormats.DIFFERENT_ROWS_LENGTHS,",
                "changes": 8
            },
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/util/MathUtils.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/util/MathUtils.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/util/MathUtils.java",
                "deletions": 1,
                "sha": "85cb6d26e13d4be96da56a9ebccba272ff17dcfc",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/util/MathUtils.java",
                "patch": "@@ -2325,7 +2325,8 @@ public static void checkNotNull(Object o,\n      * @param o Object to be checked.\n      * @throws NullArgumentException if {@code o} is {@code null}.\n      */\n-    public static void checkNotNull(Object o) {\n+    public static void checkNotNull(Object o)\n+        throws NullArgumentException {\n         if (o == null) {\n             throw new NullArgumentException();\n         }",
                "changes": 3
            },
            {
                "status": "modified",
                "additions": 13,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
                "deletions": 5,
                "sha": "e80f2c0120e4c36d1f0910ab96f70307ef25e2fd",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
                "patch": "@@ -20,6 +20,7 @@\n import java.util.Arrays;\n \n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n@@ -277,13 +278,16 @@ public ResizableDoubleArray(int initialCapacity, float expansionFactor,\n     /**\n      * Copy constructor.  Creates a new ResizableDoubleArray that is a deep,\n      * fresh copy of the original. Needs to acquire synchronization lock\n-     * on original.  Original may not be null; otherwise a NullPointerException\n+     * on original.  Original may not be null; otherwise a {@link NullArgumentException}\n      * is thrown.\n      *\n      * @param original array to copy\n+     * @exception NullArgumentException if original is null\n      * @since 2.0\n      */\n-    public ResizableDoubleArray(ResizableDoubleArray original) {\n+    public ResizableDoubleArray(ResizableDoubleArray original)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(original);\n         copy(original, this);\n     }\n \n@@ -823,16 +827,20 @@ public synchronized int start() {\n      * <p>Obtains synchronization locks on both source and dest\n      * (in that order) before performing the copy.</p>\n      *\n-     * <p>Neither source nor dest may be null; otherwise a NullPointerException\n+     * <p>Neither source nor dest may be null; otherwise a {@link NullArgumentException}\n      * is thrown</p>\n      *\n      * @param source ResizableDoubleArray to copy\n      * @param dest ResizableArray to replace with a copy of the source array\n+     * @exception NullArgumentException if either source or dest is null\n      * @since 2.0\n      *\n      */\n-    public static void copy(ResizableDoubleArray source, ResizableDoubleArray dest) {\n-       synchronized(source) {\n+    public static void copy(ResizableDoubleArray source, ResizableDoubleArray dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n+        synchronized(source) {\n            synchronized(dest) {\n                dest.initialCapacity = source.initialCapacity;\n                dest.contractionCriteria = source.contractionCriteria;",
                "changes": 18
            },
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/site/xdoc/changes.xml",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/site/xdoc/changes.xml?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/site/xdoc/changes.xml",
                "deletions": 0,
                "sha": "8d10be3fc0f28af04769d6eb12329907aabb542a",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/site/xdoc/changes.xml",
                "patch": "@@ -52,6 +52,9 @@ The <action> type attribute can be add,update,fix,remove.\n     If the output is not quite correct, check for invisible trailing spaces!\n      -->\n     <release version=\"3.0\" date=\"TBD\" description=\"TBD\">\n+      <action dev=\"luc\" type=\"fix\" issue=\"MATH-403\">\n+        Replaced NullPointerException by NullArgumentException.\n+      </action>\n       <action dev=\"luc\" type=\"add\">\n         Added a consistent classes hierarchy for Euclidean spaces in dimension 1, 2 and 3.\n       </action>",
                "changes": 3
            },
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/complex/ComplexTest.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/complex/ComplexTest.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
                "deletions": 7,
                "sha": "3eb6d3eabaf9e7ba03ca399f1a6935425ec76df1",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/complex/ComplexTest.java",
                "patch": "@@ -18,6 +18,7 @@\n package org.apache.commons.math.complex;\n \n import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n@@ -632,14 +633,9 @@ public void testPowZero() {\n                new Complex(-1, 3).pow(Complex.ZERO), 10e-12);\n    }\n \n-    @Test\n+    @Test(expected=NullArgumentException.class)\n     public void testpowNull() {\n-        try {\n-            Complex.ONE.pow(null);\n-            Assert.fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {\n-            // expected\n-        }\n+        Complex.ONE.pow(null);\n     }\n \n     @Test",
                "changes": 10
            },
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
                "deletions": 2,
                "sha": "100d3478b11562fc2a002000186088bd41528593",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java",
                "patch": "@@ -23,6 +23,7 @@\n import org.apache.commons.math.util.FastMath;\n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n@@ -930,8 +931,8 @@ public void testSetSubMatrix() throws Exception {\n         // null\n         try {\n             m.setSubMatrix(null,1,1);\n-            Assert.fail(\"expecting NullPointerException\");\n-        } catch (NullPointerException e) {\n+            Assert.fail(\"expecting NullArgumentException\");\n+        } catch (NullArgumentException e) {\n             // expected\n         }\n         Array2DRowRealMatrix m2 = new Array2DRowRealMatrix();",
                "changes": 5
            },
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java",
                "deletions": 2,
                "sha": "15212c3f8a728923bb802e26dcd469c6ab0c8cdc",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java",
                "patch": "@@ -27,6 +27,7 @@\n import org.apache.commons.math.fraction.Fraction;\n import org.apache.commons.math.fraction.FractionField;\n import org.apache.commons.math.exception.NoDataException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n@@ -1213,8 +1214,8 @@ public void testSetSubMatrix() throws Exception {\n         // null\n         try {\n             m.setSubMatrix(null,1,1);\n-            Assert.fail(\"expecting NullPointerException\");\n-        } catch (NullPointerException e) {\n+            Assert.fail(\"expecting NullArgumentException\");\n+        } catch (NullArgumentException e) {\n             // expected\n         }\n ",
                "changes": 5
            },
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java",
                "deletions": 2,
                "sha": "9099b9971e977a0f47c81fdddbe4d84756f7a3b2",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java",
                "patch": "@@ -25,6 +25,7 @@\n import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n@@ -1113,8 +1114,8 @@ public void testSetSubMatrix() throws Exception {\n         // null\n         try {\n             m.setSubMatrix(null,1,1);\n-            Assert.fail(\"expecting NullPointerException\");\n-        } catch (NullPointerException e) {\n+            Assert.fail(\"expecting NullArgumentException\");\n+        } catch (NullArgumentException e) {\n             // expected\n         }\n ",
                "changes": 5
            },
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java",
                "deletions": 2,
                "sha": "ba69bd02178a4d3e66eff64328d52ea915634d89",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java",
                "patch": "@@ -20,6 +20,7 @@\n import org.junit.Assert;\n \n import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n@@ -629,8 +630,8 @@ public void testSetSubMatrix() {\n         // null\n         try {\n             m.setSubMatrix(null, 1, 1);\n-            Assert.fail(\"expecting NullPointerException\");\n-        } catch (NullPointerException e) {\n+            Assert.fail(\"expecting NullArgumentException\");\n+        } catch (NullArgumentException e) {\n             // expected\n         }\n         try {",
                "changes": 5
            },
            {
                "status": "modified",
                "additions": 7,
                "raw_url": "https://github.com/apache/commons-math/raw/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java",
                "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java?ref=62a313f67d40f2cd192b7f5890f0be14f358b390",
                "filename": "src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java",
                "deletions": 24,
                "sha": "9a2ab369edfd14af139cb175dbe9c91f4689405c",
                "blob_url": "https://github.com/apache/commons-math/blob/62a313f67d40f2cd192b7f5890f0be14f358b390/src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java",
                "patch": "@@ -25,6 +25,7 @@\n \n import org.apache.commons.math.RetryRunner;\n import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n import org.junit.Assert;\n import org.junit.Before;\n@@ -184,37 +185,19 @@ public void testSerialization() {\n         verifySame(empiricalDistribution2, dist2);\n     }\n \n-    @Test\n+    @Test(expected=NullArgumentException.class)\n     public void testLoadNullDoubleArray() {\n-        EmpiricalDistribution dist = new EmpiricalDistributionImpl();\n-        try {\n-            dist.load((double[]) null);\n-            Assert.fail(\"load((double[]) null) expected NullPointerException\");\n-        } catch (NullPointerException e) {\n-            // expected\n-        }\n+       new EmpiricalDistributionImpl().load((double[]) null);\n     }\n \n-    @Test\n+    @Test(expected=NullArgumentException.class)\n     public void testLoadNullURL() throws Exception {\n-        EmpiricalDistribution dist = new EmpiricalDistributionImpl();\n-        try {\n-            dist.load((URL) null);\n-            Assert.fail(\"load((URL) null) expected NullPointerException\");\n-        } catch (NullPointerException e) {\n-            // expected\n-        }\n+        new EmpiricalDistributionImpl().load((URL) null);\n     }\n \n-    @Test\n+    @Test(expected=NullArgumentException.class)\n     public void testLoadNullFile() throws Exception {\n-        EmpiricalDistribution dist = new EmpiricalDistributionImpl();\n-        try {\n-            dist.load((File) null);\n-            Assert.fail(\"load((File) null) expected NullPointerException\");\n-        } catch (NullPointerException e) {\n-            // expected\n-        }\n+        new EmpiricalDistributionImpl().load((File) null);\n     }\n \n     /**",
                "changes": 31
            }
        ],
        "unit_tests": [
            "EmpiricalDistributionTest.java",
            "SummaryStatisticsTest.java",
            "MaxTest.java",
            "BlockFieldMatrixTest.java",
            "SynchronizedDescriptiveStatisticsTest.java",
            "Array2DRowRealMatrixTest.java",
            "StandardDeviationTest.java",
            "BlockRealMatrixTest.java",
            "SumTest.java",
            "SecondMomentTest.java",
            "VarianceTest.java",
            "DescriptiveStatisticsTest.java",
            "BigFractionTest.java",
            "MeanTest.java",
            "MathUtilsTest.java",
            "ResizableDoubleArrayTest.java",
            "SparseRealMatrixTest.java",
            "ThirdMomentTest.java",
            "PercentileTest.java",
            "GeometricMeanTest.java",
            "PolynomialFunctionTest.java",
            "ComplexTest.java",
            "KurtosisTest.java",
            "SemiVarianceTest.java",
            "FirstMomentTest.java",
            "SkewnessTest.java",
            "ProductTest.java",
            "MinTest.java",
            "FourthMomentTest.java",
            "SynchronizedSummaryStatisticsTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java",
        "buggy_files": [
            "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
            "src/main/java/org/apache/commons/math/complex/Complex.java",
            "src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java",
            "src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java",
            "src/main/java/org/apache/commons/math/analysis/function/Max.java",
            "src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java",
            "src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java",
            "src/site/xdoc/changes.xml",
            "src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java",
            "src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java",
            "src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java",
            "src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java",
            "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
            "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
            "src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java",
            "src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java",
            "src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java",
            "src/main/java/org/apache/commons/math/linear/RealMatrix.java",
            "src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java",
            "src/main/java/org/apache/commons/math/exception/NullArgumentException.java",
            "src/main/java/org/apache/commons/math/linear/SparseRealMatrix.java",
            "src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java",
            "src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java",
            "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
            "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
            "src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java",
            "src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java",
            "src/main/java/org/apache/commons/math/util/MathUtils.java",
            "src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java",
            "src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java",
            "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
            "src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java",
            "src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java",
            "src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java",
            "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java",
            "src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
            "src/main/java/org/apache/commons/math/analysis/function/Min.java",
            "src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java",
            "src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java",
            "src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java",
            "src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java"
        ],
        "fixed": true
    }
]