[{"commit": "https://github.com/apache/servicecomb-java-chassis/commit/7e23a668ceb7e02cf1e3558a17e80edd9f688357", "parent": "https://github.com/apache/servicecomb-java-chassis/commit/be73f2ea603b254244912f8944ffe2d3f70e549d", "message": "[SCB-1297] NPE would be arised if you haven't given any value for servicecomb.config.ignoreResolveFailure", "bug_id": "servicecomb-java-chassis_1", "file": [{"additions": 10, "raw_url": "https://github.com/apache/servicecomb-java-chassis/raw/7e23a668ceb7e02cf1e3558a17e80edd9f688357/foundations/foundation-config/src/main/java/org/apache/servicecomb/config/ConfigurationSpringInitializer.java", "blob_url": "https://github.com/apache/servicecomb-java-chassis/blob/7e23a668ceb7e02cf1e3558a17e80edd9f688357/foundations/foundation-config/src/main/java/org/apache/servicecomb/config/ConfigurationSpringInitializer.java", "sha": "c7472c7df03f934fedaa93b69092aa4212f959ba", "changes": 17, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/servicecomb-java-chassis/contents/foundations/foundation-config/src/main/java/org/apache/servicecomb/config/ConfigurationSpringInitializer.java?ref=7e23a668ceb7e02cf1e3558a17e80edd9f688357", "patch": "@@ -76,15 +76,16 @@ public ConfigurationSpringInitializer() {\n    */\n   @Override\n   public void setEnvironment(Environment environment) {\n+\n+    ConfigUtil.installDynamicConfig();\n+\n     String environmentName = generateNameForEnvironment(environment);\n     LOGGER.info(\"Environment received, will get configurations from [{}].\", environmentName);\n \n     Map<String, Object> extraConfig = getAllProperties(environment);\n \n     ConfigUtil.addExtraConfig(EXTRA_CONFIG_SOURCE_PREFIX + environmentName, extraConfig);\n \n-    ConfigUtil.installDynamicConfig();\n-\n     setUpSpringPropertySource(environment);\n   }\n \n@@ -200,10 +201,10 @@ private void getProperties(ConfigurableEnvironment environment, PropertySource<?\n         try {\n           configFromSpringBoot.put(propertyName, environment.getProperty(propertyName, Object.class));\n         } catch (Exception e) {\n-          if (!getIfIgnoreEnvironment()) {\n-            throw new RuntimeException(\"set up spring property source failed.\", e);\n-          } else {\n+          if (ignoreResolveFailure()) {\n             LOGGER.warn(\"set up spring property source failed.\", e);\n+          } else {\n+            throw new RuntimeException(\"set up spring property source failed.If you still want to start up the application and ignore the errors, you can set servicecomb.config.ignoreResolveFailure to true.\", e);\n           }\n         }\n       }\n@@ -213,7 +214,9 @@ private void getProperties(ConfigurableEnvironment environment, PropertySource<?\n     LOGGER.debug(\"a none EnumerablePropertySource is ignored, propertySourceName = [{}]\", propertySource.getName());\n   }\n \n-  private boolean getIfIgnoreEnvironment() {\n-    return (Boolean) ConfigUtil.createLocalConfig().getProperty(\"servicecomb.config.ignoreResolveFailure\");\n+  private boolean ignoreResolveFailure() {\n+    return DynamicPropertyFactory.getInstance()\n+            .getBooleanProperty(\"servicecomb.config.ignoreResolveFailure\", false)\n+            .get();\n   }\n }", "filename": "foundations/foundation-config/src/main/java/org/apache/servicecomb/config/ConfigurationSpringInitializer.java"}, {"additions": 22, "raw_url": "https://github.com/apache/servicecomb-java-chassis/raw/7e23a668ceb7e02cf1e3558a17e80edd9f688357/foundations/foundation-config/src/test/java/org/apache/servicecomb/config/TestConfigurationSpringInitializer.java", "blob_url": "https://github.com/apache/servicecomb-java-chassis/blob/7e23a668ceb7e02cf1e3558a17e80edd9f688357/foundations/foundation-config/src/test/java/org/apache/servicecomb/config/TestConfigurationSpringInitializer.java", "sha": "ac20e230d9fedbcff532ed4826413a7eee6c0f26", "changes": 22, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/servicecomb-java-chassis/contents/foundations/foundation-config/src/test/java/org/apache/servicecomb/config/TestConfigurationSpringInitializer.java?ref=7e23a668ceb7e02cf1e3558a17e80edd9f688357", "patch": "@@ -43,6 +43,9 @@\n import org.springframework.core.env.ConfigurableEnvironment;\n import org.springframework.core.env.MapPropertySource;\n import org.springframework.core.env.MutablePropertySources;\n+import org.springframework.core.env.PropertySource;\n+import org.springframework.core.env.StandardEnvironment;\n+import org.springframework.core.env.SystemEnvironmentPropertySource;\n import org.springframework.jndi.JndiPropertySource;\n \n import com.netflix.config.ConfigurationManager;\n@@ -224,8 +227,27 @@ public void testSetEnvironmentOnEnvironmentName() {\n     assertEquals(\"value2\", extraProperties.get(\"key2\"));\n   }\n \n+  @Test(expected = RuntimeException.class)\n+  public void shoud_throw_exception_when_given_ignoreResolveFailure_false() {\n+    StandardEnvironment environment = newStandardEnvironment();\n+\n+    ConfigurationSpringInitializer configurationSpringInitializer = new ConfigurationSpringInitializer();\n+    configurationSpringInitializer.setEnvironment(environment);\n+  }\n+\n   private Map<String, Map<String, Object>> getExtraConfigMapFromConfigUtil() {\n     return Deencapsulation\n         .getField(ConfigUtil.class, \"EXTRA_CONFIG_MAP\");\n   }\n+\n+  private StandardEnvironment newStandardEnvironment() {\n+    Map<String, Object> envProperties = new HashMap<>();\n+    envProperties.put(\"IFS-X\", \"${IFS-X}\");\n+    PropertySource<Map<String, Object>> systemEnvironmentPropertySource = new SystemEnvironmentPropertySource(\"system-env\", envProperties);\n+\n+    StandardEnvironment environment = new StandardEnvironment();\n+    environment.getPropertySources()\n+            .addAfter(StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, systemEnvironmentPropertySource);\n+    return environment;\n+  }\n }", "filename": "foundations/foundation-config/src/test/java/org/apache/servicecomb/config/TestConfigurationSpringInitializer.java"}], "repo": "servicecomb-java-chassis"}, {"commit": "https://github.com/apache/servicecomb-java-chassis/commit/a2304046f39f0fa14174550a16b6fb377d580e90", "parent": "https://github.com/apache/servicecomb-java-chassis/commit/f2216535be3271a5a06472310c5a5224e1fe2cae", "message": "[SCB-753]NPE when query not exists service", "bug_id": "servicecomb-java-chassis_2", "file": [{"additions": 4, "raw_url": "https://github.com/apache/servicecomb-java-chassis/raw/a2304046f39f0fa14174550a16b6fb377d580e90/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/client/LocalServiceRegistryClientImpl.java", "blob_url": "https://github.com/apache/servicecomb-java-chassis/blob/a2304046f39f0fa14174550a16b6fb377d580e90/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/client/LocalServiceRegistryClientImpl.java", "sha": "877b886f8c7fdccbac713349e5fe730ad55c0634", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/servicecomb-java-chassis/contents/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/client/LocalServiceRegistryClientImpl.java?ref=a2304046f39f0fa14174550a16b6fb377d580e90", "patch": "@@ -272,6 +272,9 @@ protected Microservice findLatest(String appId, String serviceName, VersionRule\n       String strVersionRule) {\n     MicroserviceInstances instances =\n         findServiceInstances(selfMicroserviceId, appId, serviceName, strVersionRule, null);\n+    if(instances.isMicroserviceNotExist()) {\n+      return null;\n+    }\n     return instances.getInstancesResponse().getInstances();\n   }\n \n@@ -291,8 +294,7 @@ public MicroserviceInstances findServiceInstances(String selfMicroserviceId, Str\n     VersionRule versionRule = VersionRuleUtils.getOrCreate(strVersionRule);\n     Microservice latestMicroservice = findLatest(appId, serviceName, versionRule);\n     if (latestMicroservice == null) {\n-      response.setInstances(allInstances);\n-      microserviceInstances.setInstancesResponse(response);\n+      microserviceInstances.setMicroserviceNotExist(true);\n       return microserviceInstances;\n     }\n ", "filename": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/client/LocalServiceRegistryClientImpl.java"}, {"additions": 1, "raw_url": "https://github.com/apache/servicecomb-java-chassis/raw/a2304046f39f0fa14174550a16b6fb377d580e90/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/registry/AbstractServiceRegistry.java", "blob_url": "https://github.com/apache/servicecomb-java-chassis/blob/a2304046f39f0fa14174550a16b6fb377d580e90/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/registry/AbstractServiceRegistry.java", "sha": "e6aba3b5239dd1fb41b7ecbe617342f113aa218e", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/servicecomb-java-chassis/contents/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/registry/AbstractServiceRegistry.java?ref=a2304046f39f0fa14174550a16b6fb377d580e90", "patch": "@@ -223,7 +223,7 @@ public boolean unregisterInstance() {\n   public List<MicroserviceInstance> findServiceInstance(String appId, String serviceName,\n       String versionRule) {\n     MicroserviceInstances instances = findServiceInstances(appId, serviceName, versionRule, null);\n-    if (instances == null) {\n+    if (instances == null || instances.isMicroserviceNotExist()) {\n       return null;\n     }\n     return instances.getInstancesResponse().getInstances();", "filename": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/registry/AbstractServiceRegistry.java"}, {"additions": 3, "raw_url": "https://github.com/apache/servicecomb-java-chassis/raw/a2304046f39f0fa14174550a16b6fb377d580e90/service-registry/src/test/java/org/apache/servicecomb/serviceregistry/TestRegistry.java", "blob_url": "https://github.com/apache/servicecomb-java-chassis/blob/a2304046f39f0fa14174550a16b6fb377d580e90/service-registry/src/test/java/org/apache/servicecomb/serviceregistry/TestRegistry.java", "sha": "548f21e233116ed08e368a0f168c2d77ae13aba9", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/servicecomb-java-chassis/contents/service-registry/src/test/java/org/apache/servicecomb/serviceregistry/TestRegistry.java?ref=a2304046f39f0fa14174550a16b6fb377d580e90", "patch": "@@ -99,6 +99,9 @@ public void testDelegate() {\n     Assert.assertEquals(1, instanceList.size());\n     Assert.assertEquals(RegistryUtils.getMicroservice().getServiceId(), instanceList.get(0).getServiceId());\n \n+    instanceList = RegistryUtils.findServiceInstance(\"default\", \"notExists\", \"0.0.1\");\n+    Assert.assertEquals(null, instanceList);\n+\n     MicroserviceInstances microserviceInstances =\n         RegistryUtils.findServiceInstances(\"default\", \"default\", \"0.0.1\", \"0\");\n     List<MicroserviceInstance> instanceLists = microserviceInstances.getInstancesResponse().getInstances();", "filename": "service-registry/src/test/java/org/apache/servicecomb/serviceregistry/TestRegistry.java"}, {"additions": 3, "raw_url": "https://github.com/apache/servicecomb-java-chassis/raw/a2304046f39f0fa14174550a16b6fb377d580e90/service-registry/src/test/java/org/apache/servicecomb/serviceregistry/client/LocalServiceRegistryClientImplTest.java", "blob_url": "https://github.com/apache/servicecomb-java-chassis/blob/a2304046f39f0fa14174550a16b6fb377d580e90/service-registry/src/test/java/org/apache/servicecomb/serviceregistry/client/LocalServiceRegistryClientImplTest.java", "sha": "e4fdc7dcfa54d6efa229e8501be96a14cca1d252", "changes": 7, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/servicecomb-java-chassis/contents/service-registry/src/test/java/org/apache/servicecomb/serviceregistry/client/LocalServiceRegistryClientImplTest.java?ref=a2304046f39f0fa14174550a16b6fb377d580e90", "patch": "@@ -121,13 +121,12 @@ public void findServiceInstance_noInstances() {\n     List<MicroserviceInstance> result =\n         registryClient.findServiceInstance(\"self\", appId, microserviceName, DefinitionConst.VERSION_RULE_ALL);\n \n-    Assert.assertThat(result, Matchers.empty());\n+    Assert.assertThat(result, Matchers.nullValue());\n \n     MicroserviceInstances microserviceInstances =\n         registryClient.findServiceInstances(\"self\", appId, microserviceName, DefinitionConst.VERSION_RULE_ALL, null);\n-    List<MicroserviceInstance> results = microserviceInstances.getInstancesResponse().getInstances();\n-\n-    Assert.assertThat(results, Matchers.empty());\n+    Assert.assertThat(microserviceInstances.isMicroserviceNotExist(), Matchers.is(true));\n+    Assert.assertThat(microserviceInstances.getInstancesResponse(), Matchers.nullValue());\n   }\n \n   @Test", "filename": "service-registry/src/test/java/org/apache/servicecomb/serviceregistry/client/LocalServiceRegistryClientImplTest.java"}], "repo": "servicecomb-java-chassis"}, {"commit": "https://github.com/apache/servicecomb-java-chassis/commit/22faf9d55744c9485996d2852d7db9815b888048", "parent": "https://github.com/apache/servicecomb-java-chassis/commit/fd4acf1b421062b17189b4c6d383316f7eb154f9", "message": "[SCB-617] avoid MetricsBootstrap shutdown NPE", "bug_id": "servicecomb-java-chassis_3", "file": [{"additions": 4, "raw_url": "https://github.com/apache/servicecomb-java-chassis/raw/22faf9d55744c9485996d2852d7db9815b888048/foundations/foundation-metrics/src/main/java/org/apache/servicecomb/foundation/metrics/MetricsBootstrap.java", "blob_url": "https://github.com/apache/servicecomb-java-chassis/blob/22faf9d55744c9485996d2852d7db9815b888048/foundations/foundation-metrics/src/main/java/org/apache/servicecomb/foundation/metrics/MetricsBootstrap.java", "sha": "7f13bf17c87e193195ba179343f85841ef6e90b4", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/servicecomb-java-chassis/contents/foundations/foundation-metrics/src/main/java/org/apache/servicecomb/foundation/metrics/MetricsBootstrap.java?ref=22faf9d55744c9485996d2852d7db9815b888048", "patch": "@@ -54,12 +54,14 @@ public void start(CompositeRegistry globalRegistry, EventBus eventBus) {\n   }\n \n   public void shutdown() {\n-    executorService.shutdown();\n+    if (executorService != null) {\n+      executorService.shutdown();\n+    }\n \n     List<MetricsInitializer> initializers = new ArrayList<>(SPIServiceUtils.getSortedService(MetricsInitializer.class));\n     Collections.reverse(initializers);\n     initializers.forEach(initializer -> {\n-      initializer.uninit();\n+      initializer.destroy();\n     });\n   }\n ", "filename": "foundations/foundation-metrics/src/main/java/org/apache/servicecomb/foundation/metrics/MetricsBootstrap.java"}, {"additions": 1, "raw_url": "https://github.com/apache/servicecomb-java-chassis/raw/22faf9d55744c9485996d2852d7db9815b888048/foundations/foundation-metrics/src/main/java/org/apache/servicecomb/foundation/metrics/MetricsInitializer.java", "blob_url": "https://github.com/apache/servicecomb-java-chassis/blob/22faf9d55744c9485996d2852d7db9815b888048/foundations/foundation-metrics/src/main/java/org/apache/servicecomb/foundation/metrics/MetricsInitializer.java", "sha": "b232f48153017ec1e65a903b7e694953cd5e2d58", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/servicecomb-java-chassis/contents/foundations/foundation-metrics/src/main/java/org/apache/servicecomb/foundation/metrics/MetricsInitializer.java?ref=22faf9d55744c9485996d2852d7db9815b888048", "patch": "@@ -29,7 +29,7 @@ default int getOrder() {\n    */\n   void init(CompositeRegistry globalRegistry, EventBus eventBus, MetricsBootstrapConfig config);\n \n-  default void uninit() {\n+  default void destroy() {\n \n   }\n }", "filename": "foundations/foundation-metrics/src/main/java/org/apache/servicecomb/foundation/metrics/MetricsInitializer.java"}, {"additions": 14, "raw_url": "https://github.com/apache/servicecomb-java-chassis/raw/22faf9d55744c9485996d2852d7db9815b888048/foundations/foundation-metrics/src/test/java/org/apache/servicecomb/foundation/metrics/TestMetricsBootstrap.java", "blob_url": "https://github.com/apache/servicecomb-java-chassis/blob/22faf9d55744c9485996d2852d7db9815b888048/foundations/foundation-metrics/src/test/java/org/apache/servicecomb/foundation/metrics/TestMetricsBootstrap.java", "sha": "50cb30c72cba7b7ece118e6c9690f9f3e198515c", "changes": 20, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/servicecomb-java-chassis/contents/foundations/foundation-metrics/src/test/java/org/apache/servicecomb/foundation/metrics/TestMetricsBootstrap.java?ref=22faf9d55744c9485996d2852d7db9815b888048", "patch": "@@ -102,7 +102,7 @@ public void onEvent(PolledEvent event) {\n \n   @Test\n   public void shutdown(@Mocked ScheduledExecutorService scheduledExecutorService) {\n-    List<MetricsInitializer> uninitList = new ArrayList<>();\n+    List<MetricsInitializer> destroyList = new ArrayList<>();\n     MetricsInitializer initializer1 = new MetricsInitializer() {\n       @Override\n       public int getOrder() {\n@@ -114,8 +114,8 @@ public void init(CompositeRegistry globalRegistry, EventBus eventBus, MetricsBoo\n       }\n \n       @Override\n-      public void uninit() {\n-        uninitList.add(this);\n+      public void destroy() {\n+        destroyList.add(this);\n       }\n     };\n \n@@ -130,8 +130,8 @@ public void init(CompositeRegistry globalRegistry, EventBus eventBus, MetricsBoo\n       }\n \n       @Override\n-      public void uninit() {\n-        uninitList.add(this);\n+      public void destroy() {\n+        destroyList.add(this);\n       }\n     };\n \n@@ -145,6 +145,14 @@ public void uninit() {\n \n     bootstrap.shutdown();\n \n-    Assert.assertThat(uninitList, Matchers.contains(initializer2, initializer1));\n+    Assert.assertThat(destroyList, Matchers.contains(initializer2, initializer1));\n+  }\n+\n+  @Test\n+  public void shutdown_notStart() {\n+    Assert.assertNull(Deencapsulation.getField(bootstrap, \"executorService\"));\n+\n+    // should not throw exception\n+    bootstrap.shutdown();\n   }\n }", "filename": "foundations/foundation-metrics/src/test/java/org/apache/servicecomb/foundation/metrics/TestMetricsBootstrap.java"}, {"additions": 1, "raw_url": "https://github.com/apache/servicecomb-java-chassis/raw/22faf9d55744c9485996d2852d7db9815b888048/metrics/metrics-core/src/main/java/org/apache/servicecomb/metrics/core/DefaultRegistryInitializer.java", "blob_url": "https://github.com/apache/servicecomb-java-chassis/blob/22faf9d55744c9485996d2852d7db9815b888048/metrics/metrics-core/src/main/java/org/apache/servicecomb/metrics/core/DefaultRegistryInitializer.java", "sha": "6bd81463868e26a6364cc89ffcae451064d4cd31", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/servicecomb-java-chassis/contents/metrics/metrics-core/src/main/java/org/apache/servicecomb/metrics/core/DefaultRegistryInitializer.java?ref=22faf9d55744c9485996d2852d7db9815b888048", "patch": "@@ -49,7 +49,7 @@ public void init(CompositeRegistry globalRegistry, EventBus eventBus, MetricsBoo\n   }\n \n   @Override\n-  public void uninit() {\n+  public void destroy() {\n     DefaultMonitorRegistry.getInstance().unregister(registry);\n     globalRegistry.remove(registry);\n   }", "filename": "metrics/metrics-core/src/main/java/org/apache/servicecomb/metrics/core/DefaultRegistryInitializer.java"}, {"additions": 1, "raw_url": "https://github.com/apache/servicecomb-java-chassis/raw/22faf9d55744c9485996d2852d7db9815b888048/metrics/metrics-core/src/test/java/org/apache/servicecomb/metrics/core/TestDefaultRegistryInitializer.java", "blob_url": "https://github.com/apache/servicecomb-java-chassis/blob/22faf9d55744c9485996d2852d7db9815b888048/metrics/metrics-core/src/test/java/org/apache/servicecomb/metrics/core/TestDefaultRegistryInitializer.java", "sha": "4b2a1c3ffd2c2a6c33f8f5aa9b171ba5a692bc24", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/servicecomb-java-chassis/contents/metrics/metrics-core/src/test/java/org/apache/servicecomb/metrics/core/TestDefaultRegistryInitializer.java?ref=22faf9d55744c9485996d2852d7db9815b888048", "patch": "@@ -49,7 +49,7 @@ public void init() {\n     Assert.assertEquals(1, registries.size());\n     Assert.assertEquals(1, DefaultMonitorRegistry.getInstance().getRegisteredMonitors().size());\n \n-    registryInitializer.uninit();\n+    registryInitializer.destroy();\n \n     Assert.assertEquals(0, registries.size());\n     Assert.assertEquals(0, DefaultMonitorRegistry.getInstance().getRegisteredMonitors().size());", "filename": "metrics/metrics-core/src/test/java/org/apache/servicecomb/metrics/core/TestDefaultRegistryInitializer.java"}, {"additions": 1, "raw_url": "https://github.com/apache/servicecomb-java-chassis/raw/22faf9d55744c9485996d2852d7db9815b888048/metrics/metrics-integration/metrics-prometheus/src/main/java/org/apache/servicecomb/metrics/prometheus/PrometheusPublisher.java", "blob_url": "https://github.com/apache/servicecomb-java-chassis/blob/22faf9d55744c9485996d2852d7db9815b888048/metrics/metrics-integration/metrics-prometheus/src/main/java/org/apache/servicecomb/metrics/prometheus/PrometheusPublisher.java", "sha": "b1eb9c67c610fdc932b6dea8b6926097594e72da", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/servicecomb-java-chassis/contents/metrics/metrics-integration/metrics-prometheus/src/main/java/org/apache/servicecomb/metrics/prometheus/PrometheusPublisher.java?ref=22faf9d55744c9485996d2852d7db9815b888048", "patch": "@@ -114,7 +114,7 @@ protected Sample convertMeasurementToSample(Measurement measurement) {\n   }\n \n   @Override\n-  public void uninit() {\n+  public void destroy() {\n     if (httpServer == null) {\n       return;\n     }", "filename": "metrics/metrics-integration/metrics-prometheus/src/main/java/org/apache/servicecomb/metrics/prometheus/PrometheusPublisher.java"}, {"additions": 1, "raw_url": "https://github.com/apache/servicecomb-java-chassis/raw/22faf9d55744c9485996d2852d7db9815b888048/metrics/metrics-integration/metrics-prometheus/src/test/java/org/apache/servicecomb/metrics/prometheus/TestPrometheusPublisher.java", "blob_url": "https://github.com/apache/servicecomb-java-chassis/blob/22faf9d55744c9485996d2852d7db9815b888048/metrics/metrics-integration/metrics-prometheus/src/test/java/org/apache/servicecomb/metrics/prometheus/TestPrometheusPublisher.java", "sha": "c953730f4c0edfe25296c660dc64e59619f12178", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/servicecomb-java-chassis/contents/metrics/metrics-integration/metrics-prometheus/src/test/java/org/apache/servicecomb/metrics/prometheus/TestPrometheusPublisher.java?ref=22faf9d55744c9485996d2852d7db9815b888048", "patch": "@@ -102,6 +102,6 @@ public void collect() throws IllegalAccessException, IOException {\n           \"count_name{tag1=\\\"tag1v\\\",tag2=\\\"tag2v\\\",} 1.0\\n\", IOUtils.toString(is));\n     }\n \n-    publisher.uninit();\n+    publisher.destroy();\n   }\n }", "filename": "metrics/metrics-integration/metrics-prometheus/src/test/java/org/apache/servicecomb/metrics/prometheus/TestPrometheusPublisher.java"}], "repo": "servicecomb-java-chassis"}, {"commit": "https://github.com/apache/servicecomb-java-chassis/commit/6dc769cd363568e20c77cea34e8f198acefec153", "parent": "https://github.com/apache/servicecomb-java-chassis/commit/fc9c7f40f4d957152a602e68f3be889bf5b8c68f", "message": "[SCB-562] fix NPE when had empty interface (not have any method) (#729)", "bug_id": "servicecomb-java-chassis_4", "file": [{"additions": 6, "raw_url": "https://github.com/apache/servicecomb-java-chassis/raw/6dc769cd363568e20c77cea34e8f198acefec153/core/src/main/java/org/apache/servicecomb/core/definition/SchemaMeta.java", "blob_url": "https://github.com/apache/servicecomb-java-chassis/blob/6dc769cd363568e20c77cea34e8f198acefec153/core/src/main/java/org/apache/servicecomb/core/definition/SchemaMeta.java", "sha": "1a4e6f91dfc51218bbc9997f9bfe18e25ffda506", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/servicecomb-java-chassis/contents/core/src/main/java/org/apache/servicecomb/core/definition/SchemaMeta.java?ref=6dc769cd363568e20c77cea34e8f198acefec153", "patch": "@@ -83,6 +83,12 @@ public String getPackageName() {\n   }\n \n   private void initOperations() {\n+    if (swagger.getPaths() == null) {\n+      LOGGER.warn(swagger.getInfo().getTitle() + \" with path \" + swagger.getBasePath()\n+          + \" is an empty interface, please delete it or fill with one method!\");\n+      return;\n+    }\n+\n     for (Entry<String, Path> entry : swagger.getPaths().entrySet()) {\n       String strPath = entry.getKey();\n       Path path = entry.getValue();", "filename": "core/src/main/java/org/apache/servicecomb/core/definition/SchemaMeta.java"}], "repo": "servicecomb-java-chassis"}, {"commit": "https://github.com/apache/servicecomb-java-chassis/commit/aaaaf5b82fbe1b51383e432db62ef7747734fde0", "parent": "https://github.com/apache/servicecomb-java-chassis/commit/ec3b710e21ab16b7dd73485cefa7a6ef29a21f76", "message": "SCB-374 fix NPE when 404 not found", "bug_id": "servicecomb-java-chassis_5", "file": [{"additions": 5, "raw_url": "https://github.com/apache/servicecomb-java-chassis/raw/aaaaf5b82fbe1b51383e432db62ef7747734fde0/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/AbstractRestInvocation.java", "blob_url": "https://github.com/apache/servicecomb-java-chassis/blob/aaaaf5b82fbe1b51383e432db62ef7747734fde0/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/AbstractRestInvocation.java", "sha": "3dfb5cc623cf7a4fd41ad38134b62bcdbd1c81e6", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/servicecomb-java-chassis/contents/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/AbstractRestInvocation.java?ref=aaaaf5b82fbe1b51383e432db62ef7747734fde0", "patch": "@@ -196,7 +196,11 @@ protected void sendResponseQuietly(Response response) {\n           e);\n     } finally {\n       requestEx.getAsyncContext().complete();\n-      invocation.onFinish(response);\n+      // if failed to locate path, then will not create invocation\n+      // TODO: statistics this case\n+      if (invocation != null) {\n+        invocation.onFinish(response);\n+      }\n     }\n   }\n ", "filename": "common/common-rest/src/main/java/org/apache/servicecomb/common/rest/AbstractRestInvocation.java"}], "repo": "servicecomb-java-chassis"}]
