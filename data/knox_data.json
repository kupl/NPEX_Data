[{"commit": "https://github.com/apache/knox/commit/b3923f29ddfee3b10ed99097480aefacb3878f04", "parent": "https://github.com/apache/knox/commit/1bdbdee67be13cc3b83605350536ffc246fb722e", "message": "KNOX-2070 - SSOCookieFederationFilter NPE (#170)\n\nSigned-off-by: Kevin Risden <krisden@apache.org>", "bug_id": "knox_1", "file": [{"additions": 5, "raw_url": "https://github.com/apache/knox/raw/b3923f29ddfee3b10ed99097480aefacb3878f04/gateway-provider-security-jwt/pom.xml", "blob_url": "https://github.com/apache/knox/blob/b3923f29ddfee3b10ed99097480aefacb3878f04/gateway-provider-security-jwt/pom.xml", "sha": "7fa0ba502d64b8a23cc4f726b9581a9eda34819d", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-security-jwt/pom.xml?ref=b3923f29ddfee3b10ed99097480aefacb3878f04", "patch": "@@ -76,5 +76,10 @@\n             <artifactId>gateway-test-utils</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-api</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n     </dependencies>\n </project>", "filename": "gateway-provider-security-jwt/pom.xml"}, {"additions": 15, "raw_url": "https://github.com/apache/knox/raw/b3923f29ddfee3b10ed99097480aefacb3878f04/gateway-provider-security-jwt/src/main/java/org/apache/knox/gateway/provider/federation/jwt/filter/SSOCookieFederationFilter.java", "blob_url": "https://github.com/apache/knox/blob/b3923f29ddfee3b10ed99097480aefacb3878f04/gateway-provider-security-jwt/src/main/java/org/apache/knox/gateway/provider/federation/jwt/filter/SSOCookieFederationFilter.java", "sha": "cbdbbd1cfd8552a7ba2355f4bedc10be02342686", "changes": 28, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-security-jwt/src/main/java/org/apache/knox/gateway/provider/federation/jwt/filter/SSOCookieFederationFilter.java?ref=b3923f29ddfee3b10ed99097480aefacb3878f04", "patch": "@@ -39,8 +39,11 @@\n import java.text.ParseException;\n \n public class SSOCookieFederationFilter extends AbstractJWTFilter {\n+  public static final String XHR_HEADER = \"X-Requested-With\";\n+  public static final String XHR_VALUE = \"XMLHttpRequest\";\n+\n   private static final String GATEWAY_PATH = \"gateway.path\";\n-public static final String SSO_COOKIE_NAME = \"sso.cookie.name\";\n+  public static final String SSO_COOKIE_NAME = \"sso.cookie.name\";\n   public static final String SSO_EXPECTED_AUDIENCES = \"sso.expected.audiences\";\n   public static final String SSO_AUTHENTICATION_PROVIDER_URL = \"sso.authentication.provider.url\";\n   public static final String SSO_VERIFICATION_PEM = \"sso.token.verification.pem\";\n@@ -50,13 +53,11 @@\n \n   private static final String ORIGINAL_URL_QUERY_PARAM = \"originalUrl=\";\n   private static final String DEFAULT_SSO_COOKIE_NAME = \"hadoop-jwt\";\n-  private static final String XHR_HEADER = \"X-Requested-With\";\n-  private static final String XHR_VALUE = \"XMLHttpRequest\";\n   private static JWTMessages log = MessagesFactory.get( JWTMessages.class );\n \n   private String cookieName;\n   private String authenticationProviderUrl;\n-private String gatewayPath;\n+  private String gatewayPath;\n \n   @Override\n   public void init( FilterConfig filterConfig ) throws ServletException {\n@@ -130,19 +131,20 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha\n   }\n \n   @Override\n-  protected void handleValidationError(HttpServletRequest request, HttpServletResponse response, int status,\n-                                       String error) throws IOException {\n-    String loginURL = constructLoginURL(request);\n-\n+  protected void handleValidationError(HttpServletRequest request, HttpServletResponse response,\n+                                       int status, String error) throws IOException {\n     /* We don't need redirect if this is a XHR request */\n-    if (request.getHeader(XHR_HEADER) != null && request.getHeader(XHR_HEADER)\n-        .equalsIgnoreCase(XHR_VALUE)) {\n-      final byte[] data = error.getBytes(StandardCharsets.UTF_8);\n+    if (request.getHeader(XHR_HEADER) != null &&\n+            request.getHeader(XHR_HEADER).equalsIgnoreCase(XHR_VALUE)) {\n       response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n       response.setContentType(MimeTypes.Type.TEXT_PLAIN.toString());\n-      response.setContentLength(data.length);\n-      response.getOutputStream().write(data);\n+      if(error != null && !error.isEmpty()) {\n+        final byte[] data = error.getBytes(StandardCharsets.UTF_8);\n+        response.setContentLength(data.length);\n+        response.getOutputStream().write(data);\n+      }\n     } else {\n+      String loginURL = constructLoginURL(request);\n       response.sendRedirect(loginURL);\n     }\n ", "filename": "gateway-provider-security-jwt/src/main/java/org/apache/knox/gateway/provider/federation/jwt/filter/SSOCookieFederationFilter.java"}, {"additions": 273, "raw_url": "https://github.com/apache/knox/raw/b3923f29ddfee3b10ed99097480aefacb3878f04/gateway-provider-security-jwt/src/test/java/org/apache/knox/gateway/provider/federation/AbstractJWTFilterTest.java", "blob_url": "https://github.com/apache/knox/blob/b3923f29ddfee3b10ed99097480aefacb3878f04/gateway-provider-security-jwt/src/test/java/org/apache/knox/gateway/provider/federation/AbstractJWTFilterTest.java", "sha": "e46d2b922d1b0d322172ed5ab194b87ba0b4c670", "changes": 292, "status": "modified", "deletions": 19, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-security-jwt/src/test/java/org/apache/knox/gateway/provider/federation/AbstractJWTFilterTest.java?ref=b3923f29ddfee3b10ed99097480aefacb3878f04", "patch": "@@ -43,8 +43,10 @@\n import javax.servlet.FilterConfig;\n import javax.servlet.ServletContext;\n import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n import javax.servlet.ServletRequest;\n import javax.servlet.ServletResponse;\n+import javax.servlet.WriteListener;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import java.net.InetAddress;\n@@ -127,7 +129,21 @@ public void testValidJWT() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -159,7 +175,21 @@ public void testValidAudienceJWT() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -193,7 +223,21 @@ public void testInvalidAudienceJWT() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -223,7 +267,21 @@ public void testValidAudienceJWTWhitespace() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -255,7 +313,21 @@ public void testNoTokenAudience() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -284,7 +356,21 @@ public void testNoAudienceConfigured() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -316,7 +402,21 @@ public void testEmptyAudienceConfigured() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -351,7 +451,21 @@ public void testValidVerificationPEM() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -371,7 +485,7 @@ public void testExpiredJWT() throws Exception {\n       handler.init(new TestFilterConfig(props));\n \n       SignedJWT jwt = getJWT(AbstractJWTFilter.JWT_DEFAULT_ISSUER, \"alice\",\n-                             new Date(new Date().getTime() - 1000), privateKey);\n+          new Date(new Date().getTime() - 1000), privateKey);\n \n       HttpServletRequest request = EasyMock.createNiceMock(HttpServletRequest.class);\n       setTokenOnRequest(request, jwt);\n@@ -382,7 +496,21 @@ public void testExpiredJWT() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -410,7 +538,21 @@ public void testValidJWTNoExpiration() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL).anyTimes();\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -441,7 +583,21 @@ public void testUnableToParseJWT() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL).anyTimes();\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -476,7 +632,21 @@ public void testFailedSignatureValidationJWT() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL).anyTimes();\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -517,7 +687,21 @@ public void testInvalidVerificationPEM() throws Exception {\n       EasyMock.expect(request.getQueryString()).andReturn(null);\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -545,7 +729,21 @@ public void testInvalidIssuer() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -574,7 +772,21 @@ public void testValidIssuerViaConfig() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -606,7 +818,21 @@ public void testRS512SignatureAlgorithm() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -637,7 +863,21 @@ public void testInvalidSignatureAlgorithm() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -668,7 +908,21 @@ public void testNotBeforeJWT() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);", "filename": "gateway-provider-security-jwt/src/test/java/org/apache/knox/gateway/provider/federation/AbstractJWTFilterTest.java"}, {"additions": 12, "raw_url": "https://github.com/apache/knox/raw/b3923f29ddfee3b10ed99097480aefacb3878f04/gateway-provider-security-jwt/src/test/java/org/apache/knox/gateway/provider/federation/SSOCookieProviderTest.java", "blob_url": "https://github.com/apache/knox/blob/b3923f29ddfee3b10ed99097480aefacb3878f04/gateway-provider-security-jwt/src/test/java/org/apache/knox/gateway/provider/federation/SSOCookieProviderTest.java", "sha": "4555461f67be924b5bb436cf5c5eef0d24b1e7a6", "changes": 12, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-security-jwt/src/test/java/org/apache/knox/gateway/provider/federation/SSOCookieProviderTest.java?ref=b3923f29ddfee3b10ed99097480aefacb3878f04", "patch": "@@ -17,12 +17,15 @@\n  */\n package org.apache.knox.gateway.provider.federation;\n \n+import static org.apache.knox.gateway.provider.federation.jwt.filter.SSOCookieFederationFilter.XHR_HEADER;\n+import static org.apache.knox.gateway.provider.federation.jwt.filter.SSOCookieFederationFilter.XHR_VALUE;\n import static org.junit.Assert.fail;\n \n import java.security.Principal;\n import java.util.Properties;\n import java.util.Date;\n import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n \n import javax.servlet.ServletException;\n import javax.servlet.http.Cookie;\n@@ -39,8 +42,12 @@\n import org.junit.Test;\n \n import com.nimbusds.jwt.SignedJWT;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class SSOCookieProviderTest extends AbstractJWTFilterTest {\n+  private static Logger LOGGER = LoggerFactory.getLogger(SSOCookieProviderTest.class);\n+\n   private static final String SERVICE_URL = \"https://localhost:8888/resource\";\n \n   @Before\n@@ -53,6 +60,11 @@ public void setUp() {\n   protected void setTokenOnRequest(HttpServletRequest request, SignedJWT jwt) {\n     Cookie cookie = new Cookie(\"hadoop-jwt\", jwt.serialize());\n     EasyMock.expect(request.getCookies()).andReturn(new Cookie[] { cookie });\n+\n+    if(ThreadLocalRandom.current().nextBoolean()) {\n+      LOGGER.info(\"Using XHR header for request\");\n+      EasyMock.expect(request.getHeader(XHR_HEADER)).andReturn(XHR_VALUE).anyTimes();\n+    }\n   }\n \n   @Override", "filename": "gateway-provider-security-jwt/src/test/java/org/apache/knox/gateway/provider/federation/SSOCookieProviderTest.java"}], "repo": "knox"}, {"commit": "https://github.com/apache/knox/commit/9b611aea89a7ff0ef9205e071e076c92b4afccdf", "parent": "https://github.com/apache/knox/commit/07d4af68bfec827d182c8e3a0967b680cad9b883", "message": "KNOX-1851 - Fix NPE in Zookeeper Remote Alias Service (#86)", "bug_id": "knox_2", "file": [{"additions": 4, "raw_url": "https://github.com/apache/knox/raw/9b611aea89a7ff0ef9205e071e076c92b4afccdf/gateway-server/pom.xml", "blob_url": "https://github.com/apache/knox/blob/9b611aea89a7ff0ef9205e071e076c92b4afccdf/gateway-server/pom.xml", "sha": "1d43d9ba48457b31d385b016f44ba58b9b6d2948", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/pom.xml?ref=9b611aea89a7ff0ef9205e071e076c92b4afccdf", "patch": "@@ -354,6 +354,10 @@\n             <groupId>com.sun.xml.bind</groupId>\n             <artifactId>jaxb-impl</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.apache.knox</groupId>\n+            <artifactId>gateway-util-configinjector</artifactId>\n+        </dependency>\n \n         <!-- ********** ********** ********** ********** ********** ********** -->\n         <!-- ********** Test Dependencies                           ********** -->", "filename": "gateway-server/pom.xml"}, {"additions": 25, "raw_url": "https://github.com/apache/knox/raw/9b611aea89a7ff0ef9205e071e076c92b4afccdf/gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/ZookeeperRemoteAliasServiceProvider.java", "blob_url": "https://github.com/apache/knox/blob/9b611aea89a7ff0ef9205e071e076c92b4afccdf/gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/ZookeeperRemoteAliasServiceProvider.java", "sha": "52c4462fb86b8b6d1d3169e2ee98dd282c13063e", "changes": 28, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/ZookeeperRemoteAliasServiceProvider.java?ref=9b611aea89a7ff0ef9205e071e076c92b4afccdf", "patch": "@@ -17,10 +17,18 @@\n  */\n package org.apache.knox.gateway.services.security.impl;\n \n+import org.apache.knox.gateway.GatewayServer;\n+import org.apache.knox.gateway.config.ConfigurationException;\n import org.apache.knox.gateway.security.RemoteAliasServiceProvider;\n-import org.apache.knox.gateway.service.config.remote.zk.ZooKeeperClientServiceProvider;\n+import org.apache.knox.gateway.service.config.remote.zk.ZooKeeperClientService;\n+import org.apache.knox.gateway.services.GatewayServices;\n+import org.apache.knox.gateway.services.ServiceType;\n+import org.apache.knox.gateway.services.config.client.RemoteConfigurationRegistryClientService;\n import org.apache.knox.gateway.services.security.AliasService;\n import org.apache.knox.gateway.services.security.MasterService;\n+import org.apache.knox.gateway.util.KnoxCLI;\n+\n+import java.util.Locale;\n \n public class ZookeeperRemoteAliasServiceProvider implements RemoteAliasServiceProvider {\n   @Override\n@@ -30,7 +38,21 @@ public String getType() {\n \n   @Override\n   public AliasService newInstance(AliasService localAliasService, MasterService ms) {\n-    return new ZookeeperRemoteAliasService(localAliasService, ms,\n-        new ZooKeeperClientServiceProvider().newInstance());\n+\n+    final GatewayServices services = GatewayServer.getGatewayServices() != null ? GatewayServer.getGatewayServices() : KnoxCLI.getGatewayServices();\n+\n+    if(services != null) {\n+      final RemoteConfigurationRegistryClientService registryClientService = services\n+          .getService(ServiceType.REMOTE_REGISTRY_CLIENT_SERVICE);\n+\n+      /* Check to see if we already have ZooKeeperClientService instance, if so use it */\n+      if (registryClientService instanceof ZooKeeperClientService) {\n+        return new ZookeeperRemoteAliasService(localAliasService, ms,\n+            registryClientService);\n+\n+      }\n+    }\n+\n+    throw new ConfigurationException(String.format(Locale.ROOT,\"%s service not configured\", ZooKeeperClientService.TYPE));\n   }\n }", "filename": "gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/ZookeeperRemoteAliasServiceProvider.java"}, {"additions": 1, "raw_url": "https://github.com/apache/knox/raw/9b611aea89a7ff0ef9205e071e076c92b4afccdf/gateway-server/src/main/java/org/apache/knox/gateway/util/KnoxCLI.java", "blob_url": "https://github.com/apache/knox/blob/9b611aea89a7ff0ef9205e071e076c92b4afccdf/gateway-server/src/main/java/org/apache/knox/gateway/util/KnoxCLI.java", "sha": "daae9f3c482e2f5b259e09493e40c7f334a428e0", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/src/main/java/org/apache/knox/gateway/util/KnoxCLI.java?ref=9b611aea89a7ff0ef9205e071e076c92b4afccdf", "patch": "@@ -171,7 +171,7 @@ public int run(String[] args) throws Exception {\n     return exitCode;\n   }\n \n-  GatewayServices getGatewayServices() {\n+  public static synchronized GatewayServices getGatewayServices() {\n     return services;\n   }\n ", "filename": "gateway-server/src/main/java/org/apache/knox/gateway/util/KnoxCLI.java"}], "repo": "knox"}, {"commit": "https://github.com/apache/knox/commit/59c45d3a3e040a5640c203bec5a64f466d83cf7b", "parent": "https://github.com/apache/knox/commit/c659fdb70d8927c613964dcef6a9e5765dd0b126", "message": "KNOX-1684 - Avoid NPE for deployments in GatewayServer\n\nSigned-off-by: Kevin Risden <krisden@apache.org>", "bug_id": "knox_3", "file": [{"additions": 13, "raw_url": "https://github.com/apache/knox/raw/59c45d3a3e040a5640c203bec5a64f466d83cf7b/gateway-server/src/main/java/org/apache/knox/gateway/GatewayServer.java", "blob_url": "https://github.com/apache/knox/blob/59c45d3a3e040a5640c203bec5a64f466d83cf7b/gateway-server/src/main/java/org/apache/knox/gateway/GatewayServer.java", "sha": "a935933f9f20bc216da5faaecb2a8c9125522a2f", "changes": 26, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/src/main/java/org/apache/knox/gateway/GatewayServer.java?ref=59c45d3a3e040a5640c203bec5a64f466d83cf7b", "patch": "@@ -809,29 +809,29 @@ private synchronized void internalDeactivateTopology( Topology topology ) {\n     }\n \n     // Find all the deployed contexts we need to deactivate.\n-    List<WebAppContext> deactivate = new ArrayList<>();\n     if( deployments != null ) {\n+      List<WebAppContext> deactivate = new ArrayList<>();\n       for( WebAppContext app : deployments.values() ) {\n         String appPath = app.getContextPath();\n         if( appPath.equals( topoPath ) || appPath.startsWith( topoPathSlash ) ) {\n           deactivate.add( app );\n         }\n       }\n-    }\n \n-    // Deactivate the required deployed contexts.\n-    for( WebAppContext context : deactivate ) {\n-      String contextPath = context.getContextPath();\n-      deployments.remove( contextPath );\n-      contexts.removeHandler( context );\n-      try {\n-        context.stop();\n-      } catch( Exception e ) {\n-        auditor.audit(Action.UNDEPLOY, topology.getName(), ResourceType.TOPOLOGY, ActionOutcome.FAILURE);\n-        log.failedToUndeployTopology( topology.getName(), e );\n+      // Deactivate the required deployed contexts.\n+      for( WebAppContext context : deactivate ) {\n+        String contextPath = context.getContextPath();\n+        deployments.remove( contextPath );\n+        contexts.removeHandler( context );\n+        try {\n+          context.stop();\n+        } catch( Exception e ) {\n+          auditor.audit(Action.UNDEPLOY, topology.getName(), ResourceType.TOPOLOGY, ActionOutcome.FAILURE);\n+          log.failedToUndeployTopology( topology.getName(), e );\n+        }\n       }\n+      deactivate.clear();\n     }\n-    deactivate.clear();\n   }\n \n   // Using an inner class to hide the handleTopologyEvent method from consumers of GatewayServer.", "filename": "gateway-server/src/main/java/org/apache/knox/gateway/GatewayServer.java"}], "repo": "knox"}, {"commit": "https://github.com/apache/knox/commit/f6d7168c5bc3f4778fdb857b5b4bf23357aa841e", "parent": "https://github.com/apache/knox/commit/1210bfbc9783da5901fdc71b96df426ec5056723", "message": "KNOX-1662 - Avoid GatewayTestDriver NPE on ldap stop\n\nSigned-off-by: Kevin Risden <krisden@apache.org>", "bug_id": "knox_4", "file": [{"additions": 3, "raw_url": "https://github.com/apache/knox/raw/f6d7168c5bc3f4778fdb857b5b4bf23357aa841e/gateway-test-release-utils/src/main/java/org/apache/knox/gateway/GatewayTestDriver.java", "blob_url": "https://github.com/apache/knox/blob/f6d7168c5bc3f4778fdb857b5b4bf23357aa841e/gateway-test-release-utils/src/main/java/org/apache/knox/gateway/GatewayTestDriver.java", "sha": "dae681229583dd26b36bdf9af814b86421aecd60", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-test-release-utils/src/main/java/org/apache/knox/gateway/GatewayTestDriver.java?ref=f6d7168c5bc3f4778fdb857b5b4bf23357aa841e", "patch": "@@ -189,7 +189,9 @@ public void cleanup() throws Exception {\n     }\n     services.clear();\n \n-    ldap.stop( true );\n+    if(ldap != null) {\n+      ldap.stop(true);\n+    }\n   }\n \n   public boolean isUseGateway() {", "filename": "gateway-test-release-utils/src/main/java/org/apache/knox/gateway/GatewayTestDriver.java"}], "repo": "knox"}, {"commit": "https://github.com/apache/knox/commit/529854861c9882f6124ab1a84909f5aa1a813676", "parent": "https://github.com/apache/knox/commit/c3851dd8686003400fec75132526e08c18455510", "message": "KNOX-1387 - NPE in AclsAuthorizationFilter", "bug_id": "knox_5", "file": [{"additions": 6, "raw_url": "https://github.com/apache/knox/raw/529854861c9882f6124ab1a84909f5aa1a813676/gateway-provider-security-authz-acls/src/main/java/org/apache/knox/gateway/filter/AclParser.java", "blob_url": "https://github.com/apache/knox/blob/529854861c9882f6124ab1a84909f5aa1a813676/gateway-provider-security-authz-acls/src/main/java/org/apache/knox/gateway/filter/AclParser.java", "sha": "9df4059965786e53bb22dc46eee63cce0fdb8a04", "changes": 16, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-security-authz-acls/src/main/java/org/apache/knox/gateway/filter/AclParser.java?ref=529854861c9882f6124ab1a84909f5aa1a813676", "patch": "@@ -24,11 +24,11 @@\n import org.apache.knox.gateway.util.IpAddressValidator;\n \n /**\n+ *\n  */\n public class AclParser {\n   private static AclsAuthorizationMessages log = MessagesFactory.get( AclsAuthorizationMessages.class );\n \n-  public String resourceRole;\n   public ArrayList<String> users;\n   public ArrayList<String> groups;\n   public boolean anyUser = true;\n@@ -37,6 +37,9 @@\n \n \n   public AclParser() {\n+    users = new ArrayList<>();\n+    groups = new ArrayList<>();\n+    ipv = new IpAddressValidator(null);\n   }\n   \n   public void parseAcls(String resourceRole, String acls) throws InvalidACLException {\n@@ -45,34 +48,27 @@ public void parseAcls(String resourceRole, String acls) throws InvalidACLExcepti\n       if (parts.length != 3) {\n         log.invalidAclsFoundForResource(resourceRole);\n         throw new InvalidACLException(\"Invalid ACLs specified for requested resource: \" + resourceRole);\n-      }\n-      else {\n+      } else {\n         log.aclsFoundForResource(resourceRole);\n       }\n       parseUserAcls(parts);\n       \n       parseGroupAcls(parts);\n \n       parseIpAddressAcls(parts);\n-    }\n-    else {\n+    } else {\n       log.noAclsFoundForResource(resourceRole);\n-      users = new ArrayList<String>();\n-      groups = new ArrayList<String>();\n-      ipv = new IpAddressValidator(null);\n     }\n   }\n \n   private void parseUserAcls(String[] parts) {\n-    users = new ArrayList<String>();\n     Collections.addAll(users, parts[0].split(\",\"));\n     if (!users.contains(\"*\")) {\n       anyUser = false;\n     }\n   }\n \n   private void parseGroupAcls(String[] parts) {\n-    groups = new ArrayList<String>();\n     Collections.addAll(groups, parts[1].split(\",\"));\n     if (!groups.contains(\"*\")) {\n       anyGroup = false;", "filename": "gateway-provider-security-authz-acls/src/main/java/org/apache/knox/gateway/filter/AclParser.java"}], "repo": "knox"}, {"commit": "https://github.com/apache/knox/commit/fc0e59a9cf6eb77ef7f516591d9cdab5d413332f", "parent": "https://github.com/apache/knox/commit/1afbbea2eaafbb3e789a4fcd86b8bc132587fc99", "message": "KNOX-1288 - NPE during service discovery", "bug_id": "knox_6", "file": [{"additions": 9, "raw_url": "https://github.com/apache/knox/raw/fc0e59a9cf6eb77ef7f516591d9cdab5d413332f/gateway-discovery-ambari/src/main/java/org/apache/knox/gateway/topology/discovery/ambari/AmbariServiceDiscovery.java", "blob_url": "https://github.com/apache/knox/blob/fc0e59a9cf6eb77ef7f516591d9cdab5d413332f/gateway-discovery-ambari/src/main/java/org/apache/knox/gateway/topology/discovery/ambari/AmbariServiceDiscovery.java", "sha": "392909d0480504c97171b43ced354118d4ec3f54", "changes": 16, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-discovery-ambari/src/main/java/org/apache/knox/gateway/topology/discovery/ambari/AmbariServiceDiscovery.java?ref=fc0e59a9cf6eb77ef7f516591d9cdab5d413332f", "patch": "@@ -287,13 +287,15 @@ public Cluster discover(GatewayConfig gatewayConfig, ServiceDiscoveryConfig conf\n             String configType = componentServiceConfigs.get(componentName);\n             if (configType != null) {\n                 AmbariCluster.ServiceConfiguration svcConfig = configs.get(configType);\n-                AmbariComponent c = new AmbariComponent(componentName,\n-                                                        svcConfig.getVersion(),\n-                                                        clusterName,\n-                                                        serviceName,\n-                                                        hostNames,\n-                                                        svcConfig.getProperties());\n-                cluster.addComponent(c);\n+                if (svcConfig != null) {\n+                    AmbariComponent c = new AmbariComponent(componentName,\n+                                                            svcConfig.getVersion(),\n+                                                            clusterName,\n+                                                            serviceName,\n+                                                            hostNames,\n+                                                            svcConfig.getProperties());\n+                    cluster.addComponent(c);\n+                }\n             }\n         }\n ", "filename": "gateway-discovery-ambari/src/main/java/org/apache/knox/gateway/topology/discovery/ambari/AmbariServiceDiscovery.java"}], "repo": "knox"}, {"commit": "https://github.com/apache/knox/commit/6e56ea05f2ce56bb610ad51f2fc7ae9b0aa9b66d", "parent": "https://github.com/apache/knox/commit/5ecb51e3c32941d3dfe85f323003f48cc737c519", "message": "KNOX-1251 - Fix NPE in RemoteAliasService#stop()", "bug_id": "knox_7", "file": [{"additions": 6, "raw_url": "https://github.com/apache/knox/raw/6e56ea05f2ce56bb610ad51f2fc7ae9b0aa9b66d/gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/RemoteAliasService.java", "blob_url": "https://github.com/apache/knox/blob/6e56ea05f2ce56bb610ad51f2fc7ae9b0aa9b66d/gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/RemoteAliasService.java", "sha": "9ba5d0bd774207b3b91b61243f024d619af1d8cf", "changes": 11, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/RemoteAliasService.java?ref=6e56ea05f2ce56bb610ad51f2fc7ae9b0aa9b66d", "patch": "@@ -476,11 +476,12 @@ public void start() throws ServiceLifecycleException {\n \n   @Override\n   public void stop() throws ServiceLifecycleException {\n-    try {\n-      remoteClient.removeEntryListener(PATH_KNOX_ALIAS_STORE_TOPOLOGY);\n-    } catch (final Exception e) {\n-      LOG.errorRemovingRemoteListener(PATH_KNOX_ALIAS_STORE_TOPOLOGY,\n-          e.toString());\n+    if(remoteClient != null) {\n+      try {\n+        remoteClient.removeEntryListener(PATH_KNOX_ALIAS_STORE_TOPOLOGY);\n+      } catch (final Exception e) {\n+        LOG.errorRemovingRemoteListener(PATH_KNOX_ALIAS_STORE_TOPOLOGY, e.toString());\n+      }\n     }\n   }\n ", "filename": "gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/RemoteAliasService.java"}], "repo": "knox"}, {"commit": "https://github.com/apache/knox/commit/c061d20a8135ff80d8c99cb5403a5f295b1c2a63", "parent": "https://github.com/apache/knox/commit/12a1fd65d97ec5c584bad12c9960d58870aa974d", "message": "KNOX-1283 - DefaultURLManager markFailed method throws NPE if urls is empty", "bug_id": "knox_8", "file": [{"additions": 15, "raw_url": "https://github.com/apache/knox/raw/c061d20a8135ff80d8c99cb5403a5f295b1c2a63/gateway-provider-ha/src/main/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManager.java", "blob_url": "https://github.com/apache/knox/blob/c061d20a8135ff80d8c99cb5403a5f295b1c2a63/gateway-provider-ha/src/main/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManager.java", "sha": "8ee59a77f71e6bc7910a42d36d5dfdf6f9d3d4ae", "changes": 28, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-ha/src/main/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManager.java?ref=c061d20a8135ff80d8c99cb5403a5f295b1c2a63", "patch": "@@ -80,19 +80,21 @@ public synchronized void setURLs(List<String> urls) {\n   @Override\n   public synchronized void markFailed(String url) {\n     String top = urls.peek();\n-    boolean pushToBottom = false;\n-    URI topUri = URI.create(top);\n-    URI incomingUri = URI.create(url);\n-    String topHostPort = topUri.getHost() + \":\" + topUri.getPort();\n-    String incomingHostPort = incomingUri.getHost() + \":\" + incomingUri.getPort();\n-    if ( topHostPort.equals(incomingHostPort) ) {\n-      pushToBottom = true;\n-    }\n-    //put the failed url at the bottom\n-    if ( pushToBottom ) {\n-      String failed = urls.poll();\n-      urls.offer(failed);\n-      LOG.markedFailedUrl(failed, urls.peek());\n+    if (top != null) {\n+      boolean pushToBottom = false;\n+      URI topUri = URI.create(top);\n+      URI incomingUri = URI.create(url);\n+      String topHostPort = topUri.getHost() + \":\" + topUri.getPort();\n+      String incomingHostPort = incomingUri.getHost() + \":\" + incomingUri.getPort();\n+      if (topHostPort.equals(incomingHostPort)) {\n+        pushToBottom = true;\n+      }\n+      //put the failed url at the bottom\n+      if (pushToBottom) {\n+        String failed = urls.poll();\n+        urls.offer(failed);\n+        LOG.markedFailedUrl(failed, urls.peek());\n+      }\n     }\n   }\n }", "filename": "gateway-provider-ha/src/main/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManager.java"}, {"additions": 17, "raw_url": "https://github.com/apache/knox/raw/c061d20a8135ff80d8c99cb5403a5f295b1c2a63/gateway-provider-ha/src/test/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManagerTest.java", "blob_url": "https://github.com/apache/knox/blob/c061d20a8135ff80d8c99cb5403a5f295b1c2a63/gateway-provider-ha/src/test/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManagerTest.java", "sha": "84defbcb69177b24b448b114275f486fe1af911e", "changes": 17, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-ha/src/test/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManagerTest.java?ref=c061d20a8135ff80d8c99cb5403a5f295b1c2a63", "patch": "@@ -23,6 +23,7 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n public class DefaultURLManagerTest {\n \n@@ -89,4 +90,20 @@ public void testMarkingFailedURL() {\n       assertEquals(url3, manager.getActiveURL());\n    }\n \n+   /**\n+    * KNOX-1283\n+    */\n+   @Test\n+   public void testMarkFailedWithEmptyURLs() {\n+      ArrayList<String> urls = new ArrayList<>();\n+      DefaultURLManager manager = new DefaultURLManager();\n+      manager.setURLs(urls);\n+      assertTrue(manager.getURLs().isEmpty());\n+      try {\n+         manager.markFailed(\"http://localhost:8080\");\n+      } catch (NullPointerException e) {\n+         fail(\"Empty URL list should not result in NPE.\");\n+      }\n+   }\n+\n }", "filename": "gateway-provider-ha/src/test/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManagerTest.java"}], "repo": "knox"}, {"commit": "https://github.com/apache/knox/commit/c211d05e98c82d57eb0af61487a76f0ddd99660d", "parent": "https://github.com/apache/knox/commit/1ee937071b236909a38dc764db451e65a3225ad6", "message": "KNOX-1049 - check for null topology to avoid NPE in tests", "bug_id": "knox_9", "file": [{"additions": 21, "raw_url": "https://github.com/apache/knox/raw/c211d05e98c82d57eb0af61487a76f0ddd99660d/gateway-server/src/main/java/org/apache/hadoop/gateway/GatewayFilter.java", "blob_url": "https://github.com/apache/knox/blob/c211d05e98c82d57eb0af61487a76f0ddd99660d/gateway-server/src/main/java/org/apache/hadoop/gateway/GatewayFilter.java", "sha": "7617ae8b34542b03323cc3f143f9a52cfca1d659", "changes": 41, "status": "modified", "deletions": 20, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/src/main/java/org/apache/hadoop/gateway/GatewayFilter.java?ref=c211d05e98c82d57eb0af61487a76f0ddd99660d", "patch": "@@ -128,28 +128,29 @@ public void doFilter( ServletRequest servletRequest, ServletResponse servletResp\n     // if there was no match then look for a default service for the topology\n     if (match == null) {\n       Topology topology = (Topology) servletRequest.getServletContext().getAttribute(\"org.apache.hadoop.gateway.topology\");\n-      String defaultServicePath = topology.getDefaultServicePath();\n-      if (defaultServicePath != null) {\n-        try {\n-          String newPathWithQuery = defaultServicePath + \"/\" + pathWithQueryTemplate;\n-          match = chains.match(Parser.parseLiteral(newPathWithQuery));\n-          String origUrl = ((HttpServletRequest) servletRequest).getRequestURL().toString();\n-          String url = origUrl;\n-          if (path.equals(\"/\")) {\n-            url += defaultServicePath;\n-          }\n-          else {\n-            int index = origUrl.indexOf(path);\n-            url = origUrl.substring(0, index) + \"/\" + defaultServicePath + path;\n+      if (topology != null) {\n+        String defaultServicePath = topology.getDefaultServicePath();\n+        if (defaultServicePath != null) {\n+          try {\n+            String newPathWithQuery = defaultServicePath + \"/\" + pathWithQueryTemplate;\n+            match = chains.match(Parser.parseLiteral(newPathWithQuery));\n+            String origUrl = ((HttpServletRequest) servletRequest).getRequestURL().toString();\n+            String url = origUrl;\n+            if (path.equals(\"/\")) {\n+              url += defaultServicePath;\n+            }\n+            else {\n+              int index = origUrl.indexOf(path);\n+              url = origUrl.substring(0, index) + \"/\" + defaultServicePath + path;\n+            }\n+            String contextPath = defaultServicePath;\n+            servletRequest = new ForwardedRequest((HttpServletRequest) servletRequest, \n+                contextPath, \n+                url);\n+          } catch (URISyntaxException e) {\n+            throw new ServletException( e );\n           }\n-          String contextPath = defaultServicePath;\n-          servletRequest = new ForwardedRequest((HttpServletRequest) servletRequest, \n-              contextPath, \n-              url);\n-        } catch (URISyntaxException e) {\n-          throw new ServletException( e );\n         }\n-//        ((HttpServletRequest) servletRequest).getRequestURL();\n       }\n     }\n ", "filename": "gateway-server/src/main/java/org/apache/hadoop/gateway/GatewayFilter.java"}], "repo": "knox"}, {"commit": "https://github.com/apache/knox/commit/1ecb6934a4aa1128f9c168dbc822e055e9e09452", "parent": "https://github.com/apache/knox/commit/f4ccdfd696bca10c73e7a7e336d9e72d4db423b5", "message": "KNOX-966 - NPE when Shiro is misconfigured (Rob Vesse via lmccay)", "bug_id": "knox_10", "file": [{"additions": 5, "raw_url": "https://github.com/apache/knox/raw/1ecb6934a4aa1128f9c168dbc822e055e9e09452/gateway-provider-security-shiro/src/main/java/org/apache/hadoop/gateway/filter/ShiroSubjectIdentityAdapter.java", "blob_url": "https://github.com/apache/knox/blob/1ecb6934a4aa1128f9c168dbc822e055e9e09452/gateway-provider-security-shiro/src/main/java/org/apache/hadoop/gateway/filter/ShiroSubjectIdentityAdapter.java", "sha": "b625f341d8bf14933f1aed95d2cc80bf05a2483c", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-security-shiro/src/main/java/org/apache/hadoop/gateway/filter/ShiroSubjectIdentityAdapter.java?ref=1ecb6934a4aa1128f9c168dbc822e055e9e09452", "patch": "@@ -93,6 +93,11 @@ public Void run() throws Exception {\n         }\n       };\n       Subject shiroSubject = SecurityUtils.getSubject();\n+\n+      if (shiroSubject == null || shiroSubject.getPrincipal() == null) {\n+        throw new IllegalStateException(\"Unable to determine authenticated user from Shiro, please check that your Knox Shiro configuration is correct\");\n+      }\n+\n       final String principal = (String) shiroSubject.getPrincipal().toString();\n       HashSet emptySet = new HashSet();\n       Set<Principal> principals = new HashSet<>();", "filename": "gateway-provider-security-shiro/src/main/java/org/apache/hadoop/gateway/filter/ShiroSubjectIdentityAdapter.java"}], "repo": "knox"}, {"commit": "https://github.com/apache/knox/commit/3004ba8b9b78d603e04d8c6f2313b0b527fdd252", "parent": "https://github.com/apache/knox/commit/315a0ba9b1fd72999666c46ce300b808acb33d63", "message": "KNOX-965 - SecureQueryDecryptProcessor decode call could return null thus it would get a NPE (Jeffrey E Rodriguez via lmccay)", "bug_id": "knox_11", "file": [{"additions": 35, "raw_url": "https://github.com/apache/knox/raw/3004ba8b9b78d603e04d8c6f2313b0b527fdd252/gateway-provider-rewrite-step-secure-query/src/main/java/org/apache/hadoop/gateway/securequery/SecureQueryDecryptProcessor.java", "blob_url": "https://github.com/apache/knox/blob/3004ba8b9b78d603e04d8c6f2313b0b527fdd252/gateway-provider-rewrite-step-secure-query/src/main/java/org/apache/hadoop/gateway/securequery/SecureQueryDecryptProcessor.java", "sha": "0687cb4a98b5c1c32059daf2170ebeda3edfd148", "changes": 57, "status": "modified", "deletions": 22, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-rewrite-step-secure-query/src/main/java/org/apache/hadoop/gateway/securequery/SecureQueryDecryptProcessor.java?ref=3004ba8b9b78d603e04d8c6f2313b0b527fdd252", "patch": "@@ -30,7 +30,6 @@\n import org.apache.hadoop.gateway.util.urltemplate.Template;\n \n import java.io.UnsupportedEncodingException;\n-import java.util.List;\n import java.util.Map;\n import java.util.StringTokenizer;\n \n@@ -60,37 +59,51 @@ public UrlRewriteStepStatus process( UrlRewriteContext context ) throws Exceptio\n     Builder newUrl = new Builder( currUrl );\n     Map<String,Query> map = newUrl.getQuery();\n     Query query = map.remove( ENCRYPTED_PARAMETER_NAME );\n+    UrlRewriteStepStatus status = UrlRewriteStepStatus.FAILURE;\n+    status = getUrlRewriteStepStatus(context, newUrl, map, query, status);\n+    return status;\n+  }\n+\n+  private UrlRewriteStepStatus getUrlRewriteStepStatus(UrlRewriteContext context, Builder newUrl, Map<String, Query> map, Query query, UrlRewriteStepStatus status) throws UnsupportedEncodingException {\n     if( query != null ) {\n       String value = query.getFirstValue().getPattern();\n       value = decode( value );\n-      StringTokenizer outerParser = new StringTokenizer( value, \"&\" );\n-      while( outerParser.hasMoreTokens() ) {\n-        String pair = outerParser.nextToken();\n-        StringTokenizer innerParser = new StringTokenizer( pair, \"=\" );\n-        if( innerParser.hasMoreTokens() ) {\n-          String paramName = innerParser.nextToken();\n-          if( innerParser.hasMoreTokens() ) {\n-            String paramValue = innerParser.nextToken();\n-            // Need to remove from the clear parameters any param name in the encoded params.\n-            // If we don't then someone could override something in the encoded param.\n-            map.remove( paramName );\n-            newUrl.addQuery( paramName, \"\", paramValue, true );\n-          } else {\n-            newUrl.addQuery( paramName, \"\", null, true );\n-          }\n-        }\n-      }\n-      context.setCurrentUrl( newUrl.build() );\n-      context.getParameters().resolve( \"gateway.name\" );\n+      status = getUrlRewriteStepStatus(context, newUrl, map, status, value);\n+    }\n+    return status;\n+  }\n+\n+  private UrlRewriteStepStatus getUrlRewriteStepStatus(UrlRewriteContext context, Builder newUrl, Map<String, Query> map, UrlRewriteStepStatus status, String value) {\n+    if( value != null ) {\n+       StringTokenizer outerParser = new StringTokenizer( value, \"&\" );\n+       while( outerParser.hasMoreTokens() ) {\n+         String pair = outerParser.nextToken();\n+         StringTokenizer innerParser = new StringTokenizer( pair, \"=\" );\n+         if( innerParser.hasMoreTokens() ) {\n+           String paramName = innerParser.nextToken();\n+           if( innerParser.hasMoreTokens() ) {\n+             String paramValue = innerParser.nextToken();\n+             // Need to remove from the clear parameters any param name in the encoded params.\n+             // If we don't then someone could override something in the encoded param.\n+             map.remove( paramName );\n+             newUrl.addQuery( paramName, \"\", paramValue, true );\n+           } else {\n+             newUrl.addQuery( paramName, \"\", null, true );\n+           }\n+         }\n+       }\n+       context.setCurrentUrl( newUrl.build() );\n+       context.getParameters().resolve( \"gateway.name\" );\n+       status = UrlRewriteStepStatus.SUCCESS;\n     }\n-    return UrlRewriteStepStatus.SUCCESS;\n+    return status;\n   }\n \n   @Override\n   public void destroy() {\n   }\n \n-  private String decode( String string ) throws UnsupportedEncodingException {\n+  String decode( String string ) throws UnsupportedEncodingException {\n     byte[] bytes = Base64.decodeBase64( string );\n     EncryptionResult result = EncryptionResult.fromByteArray(bytes);\n     byte[] clear = cryptoService.decryptForCluster(clusterName, ", "filename": "gateway-provider-rewrite-step-secure-query/src/main/java/org/apache/hadoop/gateway/securequery/SecureQueryDecryptProcessor.java"}, {"additions": 68, "raw_url": "https://github.com/apache/knox/raw/3004ba8b9b78d603e04d8c6f2313b0b527fdd252/gateway-provider-rewrite-step-secure-query/src/test/java/org/apache/hadoop/gateway/securequery/SecureQueryEncryptDecryptProcessorTest.java", "blob_url": "https://github.com/apache/knox/blob/3004ba8b9b78d603e04d8c6f2313b0b527fdd252/gateway-provider-rewrite-step-secure-query/src/test/java/org/apache/hadoop/gateway/securequery/SecureQueryEncryptDecryptProcessorTest.java", "sha": "453aeb9df901eb7f2956fced1f6162375cf6729a", "changes": 68, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-rewrite-step-secure-query/src/test/java/org/apache/hadoop/gateway/securequery/SecureQueryEncryptDecryptProcessorTest.java?ref=3004ba8b9b78d603e04d8c6f2313b0b527fdd252", "patch": "@@ -27,9 +27,11 @@\n import org.apache.hadoop.gateway.util.urltemplate.Parser;\n import org.apache.hadoop.gateway.util.urltemplate.Query;\n import org.apache.hadoop.gateway.util.urltemplate.Template;\n+import org.apache.hadoop.gateway.filter.rewrite.spi.UrlRewriteStepStatus;\n import org.easymock.Capture;\n import org.easymock.EasyMock;\n import org.junit.Test;\n+import org.junit.Assert;\n \n import java.util.Arrays;\n \n@@ -108,4 +110,70 @@ public void testEncryptDecrypt() throws Exception {\n     assertThat( query, nullValue() );\n   }\n \n+  @Test\n+  public void testEncryptBadDecrypt() throws Exception {\n+    Query query;\n+    Template origTemplate = Parser.parseLiteral( \"http://host:0/path/file?query-param-name=query-param-value\" );\n+\n+    // Test encryption.  Results are left in encTemplate\n+\n+    AliasService as = EasyMock.createNiceMock( AliasService.class );\n+    String secret = \"sdkjfhsdkjfhsdfs\";\n+    EasyMock.expect( as.getPasswordFromAliasForCluster(\"test-cluster-name\", \"encryptQueryString\")).andReturn( secret.toCharArray() ).anyTimes();\n+    CryptoService cryptoService = new DefaultCryptoService();\n+    ((DefaultCryptoService)cryptoService).setAliasService(as);\n+    GatewayServices gatewayServices = EasyMock.createNiceMock( GatewayServices.class );\n+    EasyMock.expect( gatewayServices.getService( GatewayServices.CRYPTO_SERVICE ) ).andReturn( cryptoService );\n+\n+    UrlRewriteEnvironment encEnvironment = EasyMock.createNiceMock( UrlRewriteEnvironment.class );\n+    EasyMock.expect( encEnvironment.getAttribute( GatewayServices.GATEWAY_SERVICES_ATTRIBUTE ) ).andReturn( gatewayServices ).anyTimes();\n+    EasyMock.expect( encEnvironment.getAttribute( GatewayServices.GATEWAY_CLUSTER_ATTRIBUTE ) ).andReturn( \"test-cluster-name\" ).anyTimes();\n+    UrlRewriteContext encContext = EasyMock.createNiceMock( UrlRewriteContext.class );\n+    EasyMock.expect( encContext.getCurrentUrl() ).andReturn( origTemplate );\n+    Capture<Template> encTemplate = new Capture<Template>();\n+    encContext.setCurrentUrl( EasyMock.capture( encTemplate ) );\n+    EasyMock.replay( gatewayServices, as, encEnvironment, encContext );\n+\n+    SecureQueryEncryptDescriptor descriptor = new SecureQueryEncryptDescriptor();\n+    SecureQueryEncryptProcessor processor = new SecureQueryEncryptProcessor();\n+    processor.initialize( encEnvironment, descriptor );\n+    processor.process( encContext );\n+\n+    assertThat( encTemplate, notNullValue() );\n+    query = encTemplate.getValue().getQuery().get( \"_\" );\n+    assertThat( query.getFirstValue().getPattern().length(), greaterThan( 1 ) );\n+    query = encTemplate.getValue().getQuery().get( \"query-param-name\" );\n+    assertThat( query, nullValue() );\n+\n+    // Test decryption with decode returning null\n+\n+    gatewayServices = EasyMock.createNiceMock( GatewayServices.class );\n+    EasyMock.expect( gatewayServices.getService( GatewayServices.CRYPTO_SERVICE ) ).andReturn( cryptoService );\n+    as = EasyMock.createNiceMock( AliasService.class );\n+    EasyMock.expect( as.getPasswordFromAliasForCluster(\"test-cluster-name\", \"encryptQueryString\")).andReturn( secret.toCharArray() ).anyTimes();\n+\n+    UrlRewriteEnvironment decEnvironment = EasyMock.createNiceMock( UrlRewriteEnvironment.class );\n+    EasyMock.expect( decEnvironment.getAttribute( GatewayServices.GATEWAY_SERVICES_ATTRIBUTE ) ).andReturn( gatewayServices ).anyTimes();\n+    EasyMock.expect( decEnvironment.getAttribute( GatewayServices.GATEWAY_CLUSTER_ATTRIBUTE ) ).andReturn( \"test-cluster-name\" ).anyTimes();\n+    Params decParams = EasyMock.createNiceMock( Params.class );\n+    EasyMock.expect( decParams.resolve( GatewayServices.GATEWAY_CLUSTER_ATTRIBUTE ) ).andReturn( Arrays.asList(\"test-cluster-name\") ).anyTimes();\n+    UrlRewriteContext decContext = EasyMock.createNiceMock( UrlRewriteContext.class );\n+    EasyMock.expect( decContext.getCurrentUrl() ).andReturn( encTemplate.getValue() );\n+    EasyMock.expect( decContext.getParameters() ).andReturn( decParams );\n+    Capture<Template> decTemplate = new Capture<Template>();\n+    decContext.setCurrentUrl( EasyMock.capture( decTemplate ) );\n+    SecureQueryDecryptDescriptor descriptor1 = new SecureQueryDecryptDescriptor();\n+    SecureQueryDecryptProcessor decProcessor =\n+       EasyMock.createMockBuilder(\n+          SecureQueryDecryptProcessor.class ).addMockedMethod( SecureQueryDecryptProcessor.class.getDeclaredMethod(\"decode\", String.class )).createMock();\n+    EasyMock.expect( decProcessor.decode(EasyMock.anyObject(String.class))).andReturn( null );\n+    EasyMock.replay( gatewayServices, as, decEnvironment, decParams, decContext, decProcessor );\n+\n+    decProcessor.initialize( decEnvironment, descriptor1 );\n+    UrlRewriteStepStatus status = decProcessor.process( decContext );\n+\n+    Assert.assertTrue((status == UrlRewriteStepStatus.FAILURE));\n+  }\n+\n+\n }", "filename": "gateway-provider-rewrite-step-secure-query/src/test/java/org/apache/hadoop/gateway/securequery/SecureQueryEncryptDecryptProcessorTest.java"}], "repo": "knox"}, {"commit": "https://github.com/apache/knox/commit/055c9df524e251b852986324141464497c3a402b", "parent": "https://github.com/apache/knox/commit/539557c902404529c4636bfe0425ba44980cc177", "message": "KNOX-602 - protect against NPE in audience validation", "bug_id": "knox_12", "file": [{"additions": 7, "raw_url": "https://github.com/apache/knox/raw/055c9df524e251b852986324141464497c3a402b/gateway-provider-security-jwt/src/main/java/org/apache/hadoop/gateway/provider/federation/jwt/filter/SSOCookieFederationFilter.java", "blob_url": "https://github.com/apache/knox/blob/055c9df524e251b852986324141464497c3a402b/gateway-provider-security-jwt/src/main/java/org/apache/hadoop/gateway/provider/federation/jwt/filter/SSOCookieFederationFilter.java", "sha": "4a1765431dd06754d838e10e074febaa9a5f1c70", "changes": 13, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-security-jwt/src/main/java/org/apache/hadoop/gateway/provider/federation/jwt/filter/SSOCookieFederationFilter.java?ref=055c9df524e251b852986324141464497c3a402b", "patch": "@@ -216,12 +216,13 @@ protected boolean validateAudiences(JWTToken jwtToken) {\n     } else {\n       // if any of the configured audiences is found then consider it\n       // acceptable\n-      for (String aud : tokenAudienceList) {\n-        if (audiences.contains(aud)) {\n-          //log.debug(\"JWT token audience has been successfully validated\");\n-          log.jwtAudienceValidated();\n-          valid = true;\n-          break;\n+      if (tokenAudienceList != null) {\n+        for (String aud : tokenAudienceList) {\n+          if (audiences.contains(aud)) {\n+            log.jwtAudienceValidated();\n+            valid = true;\n+            break;\n+          }\n         }\n       }\n     }", "filename": "gateway-provider-security-jwt/src/main/java/org/apache/hadoop/gateway/provider/federation/jwt/filter/SSOCookieFederationFilter.java"}], "repo": "knox"}, {"commit": "https://github.com/apache/knox/commit/611ffae8d1bec04bffc93605f7acc8f1e8c7f728", "parent": "https://github.com/apache/knox/commit/db926c9e742525acfd3c6f28f5f562782e904e38", "message": "KNOX-564: NPE for Topology with no Providers Confgured", "bug_id": "knox_13", "file": [{"additions": 1, "raw_url": "https://github.com/apache/knox/raw/611ffae8d1bec04bffc93605f7acc8f1e8c7f728/CHANGES", "blob_url": "https://github.com/apache/knox/blob/611ffae8d1bec04bffc93605f7acc8f1e8c7f728/CHANGES", "sha": "af20c8ae729e107ebb2884c9dd3caa6ec8b49738", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/knox/contents/CHANGES?ref=611ffae8d1bec04bffc93605f7acc8f1e8c7f728", "patch": "@@ -11,6 +11,7 @@ Release Notes - Apache Knox - Version 0.7.0\n     * [KNOX-553] - Added topology validation from KnoxCLI to TopologyService deployment.\n     * [KNOX-561] - Allow Knox pid directory to be configured via the knox-env.sh file\n     * [KNOX-575] - Adds more logging for ShiroProvider LDAP Authentication.\n+    * [KNOX-564] - Topology deployment fails for no configured providers\n \n ** Bug\n     * [KNOX-554] - Fixed support for gateway.path change + added support for X-Forward-* headers in admin topology API.", "filename": "CHANGES"}, {"additions": 7, "raw_url": "https://github.com/apache/knox/raw/611ffae8d1bec04bffc93605f7acc8f1e8c7f728/gateway-server/src/main/java/org/apache/hadoop/gateway/GatewayServer.java", "blob_url": "https://github.com/apache/knox/blob/611ffae8d1bec04bffc93605f7acc8f1e8c7f728/gateway-server/src/main/java/org/apache/hadoop/gateway/GatewayServer.java", "sha": "b6e44c31818c2b55b0945963f54ecd507a89a859", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/src/main/java/org/apache/hadoop/gateway/GatewayServer.java?ref=611ffae8d1bec04bffc93605f7acc8f1e8c7f728", "patch": "@@ -59,6 +59,7 @@\n import java.net.ServerSocket;\n import java.net.URI;\n import java.net.URISyntaxException;\n+import java.security.ProviderException;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n@@ -435,6 +436,12 @@ private void handleCreateDeployment(Topology topology, File deployDir) {\n         File warDir = calculateDeploymentDir( topology );\n         if( !warDir.exists() ) {\n           auditor.audit( Action.DEPLOY, topology.getName(), ResourceType.TOPOLOGY, ActionOutcome.UNAVAILABLE );\n+\n+//          KNOX-564 - Topology should fail to deploy with no providers configured.\n+          if(topology.getProviders().isEmpty()) {\n+            throw new ProviderException(\"No providers found inside topology.\");\n+          }\n+\n           log.deployingTopology( topology.getName(), warDir.getAbsolutePath() );\n           internalUndeploy( topology ); // KNOX-152\n           WebArchive war = null;", "filename": "gateway-server/src/main/java/org/apache/hadoop/gateway/GatewayServer.java"}], "repo": "knox"}, {"commit": "https://github.com/apache/knox/commit/0c9c334cb2d7bc5f4cb6609734de1654197d5ada", "parent": "https://github.com/apache/knox/commit/dea8391172344586528e177bbbed1ac67d00894d", "message": "KNOX-661 - NPE in Pac4j Provider when clientName Parameter is Missing", "bug_id": "knox_14", "file": [{"additions": 1, "raw_url": "https://github.com/apache/knox/raw/0c9c334cb2d7bc5f4cb6609734de1654197d5ada/CHANGES", "blob_url": "https://github.com/apache/knox/blob/0c9c334cb2d7bc5f4cb6609734de1654197d5ada/CHANGES", "sha": "9e4fa40daeb01f53ed99f6e75c2693e3219ef93d", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/knox/contents/CHANGES?ref=0c9c334cb2d7bc5f4cb6609734de1654197d5ada", "patch": "@@ -28,6 +28,7 @@ Release Notes - Apache Knox - Version 0.8.0\n     * [KNOX-656] - Test GatewayLdapPosixGroupFuncTest failing intermittently\n     * [KNOX-657] - _default Topology Must Redeploy After Restart\n     * [KNOX-660] - Incompatible Dependencies in Pac4j Provider\n+    * [KNOX-661] - NPE in Pac4j Provider when clientName Parameter is Missing\n \n ------------------------------------------------------------------------------\n Release Notes - Apache Knox - Version 0.7.0", "filename": "CHANGES"}, {"additions": 3, "raw_url": "https://github.com/apache/knox/raw/0c9c334cb2d7bc5f4cb6609734de1654197d5ada/gateway-provider-security-pac4j/src/main/java/org/apache/hadoop/gateway/pac4j/Pac4jMessages.java", "blob_url": "https://github.com/apache/knox/blob/0c9c334cb2d7bc5f4cb6609734de1654197d5ada/gateway-provider-security-pac4j/src/main/java/org/apache/hadoop/gateway/pac4j/Pac4jMessages.java", "sha": "931e494ed1f83fe27101858c6a209b5852560a4c", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-security-pac4j/src/main/java/org/apache/hadoop/gateway/pac4j/Pac4jMessages.java?ref=0c9c334cb2d7bc5f4cb6609734de1654197d5ada", "patch": "@@ -32,6 +32,9 @@\n   @Message( level = MessageLevel.ERROR, text = \"pac4j callback URL required\")\n   public void ssoAuthenticationProviderUrlRequired();\n \n+  @Message( level = MessageLevel.ERROR, text = \"pac4j clientName parameter required\")\n+  public void clientNameParameterRequired();\n+\n   @Message( level = MessageLevel.ERROR, text = \"At least one pac4j client must be defined\")\n   public void atLeastOnePac4jClientMustBeDefined();\n ", "filename": "gateway-provider-security-pac4j/src/main/java/org/apache/hadoop/gateway/pac4j/Pac4jMessages.java"}, {"additions": 5, "raw_url": "https://github.com/apache/knox/raw/0c9c334cb2d7bc5f4cb6609734de1654197d5ada/gateway-provider-security-pac4j/src/main/java/org/apache/hadoop/gateway/pac4j/filter/Pac4jDispatcherFilter.java", "blob_url": "https://github.com/apache/knox/blob/0c9c334cb2d7bc5f4cb6609734de1654197d5ada/gateway-provider-security-pac4j/src/main/java/org/apache/hadoop/gateway/pac4j/filter/Pac4jDispatcherFilter.java", "sha": "79955a00699ebfc2cff4376a64016582af443dd2", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-security-pac4j/src/main/java/org/apache/hadoop/gateway/pac4j/filter/Pac4jDispatcherFilter.java?ref=0c9c334cb2d7bc5f4cb6609734de1654197d5ada", "patch": "@@ -118,8 +118,12 @@ public void init( FilterConfig filterConfig ) throws ServletException {\n \n     final Config config;\n     final String clientName;\n-    // client name from servlet parameter (if defined)\n+    // client name from servlet parameter (mandatory)\n     final String clientNameParameter = filterConfig.getInitParameter(Pac4jConstants.CLIENT_NAME);\n+    if (clientNameParameter == null) {\n+      log.clientNameParameterRequired();\n+      throw new ServletException(\"Required pac4j clientName parameter is missing.\");\n+    }\n     if (TEST_BASIC_AUTH.equalsIgnoreCase(clientNameParameter)) {\n       // test configuration\n       final IndirectBasicAuthClient indirectBasicAuthClient = new IndirectBasicAuthClient(new SimpleTestUsernamePasswordAuthenticator());", "filename": "gateway-provider-security-pac4j/src/main/java/org/apache/hadoop/gateway/pac4j/filter/Pac4jDispatcherFilter.java"}], "repo": "knox"}, {"commit": "https://github.com/apache/knox/commit/7d839171a7c2ecda217732718ae5aedf4d429fba", "parent": "https://github.com/apache/knox/commit/2192932e012186ca8dc5777bdcc1b14d162c9128", "message": "KNOX-501: Avoid NPE , in case of passing invalid argument to KnoxCli.\nContributed by J.Andreina.", "bug_id": "knox_15", "file": [{"additions": 1, "raw_url": "https://github.com/apache/knox/raw/7d839171a7c2ecda217732718ae5aedf4d429fba/CHANGES", "blob_url": "https://github.com/apache/knox/blob/7d839171a7c2ecda217732718ae5aedf4d429fba/CHANGES", "sha": "9f2677a954955f2382539a4eeb838aaf825297cf", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/knox/contents/CHANGES?ref=7d839171a7c2ecda217732718ae5aedf4d429fba", "patch": "@@ -10,6 +10,7 @@ Release Notes - Apache Knox - Version 0.6.0\n \n ** Improvement\n   * [KNOX-462] - Proper error message when root tag of topology file incorrect\n+  * [KNOX-501] - Avoid NPE in case of passing invalid argument to KnoxCli.\n \n ------------------------------------------------------------------------------\n Release Notes - Apache Knox - Version 0.5.1", "filename": "CHANGES"}, {"additions": 5, "raw_url": "https://github.com/apache/knox/raw/7d839171a7c2ecda217732718ae5aedf4d429fba/gateway-server/src/main/java/org/apache/hadoop/gateway/util/KnoxCLI.java", "blob_url": "https://github.com/apache/knox/blob/7d839171a7c2ecda217732718ae5aedf4d429fba/gateway-server/src/main/java/org/apache/hadoop/gateway/util/KnoxCLI.java", "sha": "8366f2ee061965a09057483a8af57208466b04ec", "changes": 8, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/src/main/java/org/apache/hadoop/gateway/util/KnoxCLI.java?ref=7d839171a7c2ecda217732718ae5aedf4d429fba", "patch": "@@ -89,10 +89,12 @@ public int run(String[] args) throws Exception {\n       if (exitCode != 0) {\n         return exitCode;\n       }\n-      if (command.validate()) {\n-          initializeServices( command instanceof MasterCreateCommand );\n-          command.execute();\n+      if (command != null && command.validate()) {\n+        initializeServices( command instanceof MasterCreateCommand );\n+        command.execute();\n       } else {\n+        out.println(\"ERROR: Invalid Command\" + \"\\n\" + \"Unrecognized option:\" + args[0] + \"\\n\"\n+            + \"A fatal exception has occurred. Program will exit.\");\n         exitCode = -2;\n       }\n     } catch (Exception e) {", "filename": "gateway-server/src/main/java/org/apache/hadoop/gateway/util/KnoxCLI.java"}, {"additions": 11, "raw_url": "https://github.com/apache/knox/raw/7d839171a7c2ecda217732718ae5aedf4d429fba/gateway-server/src/test/java/org/apache/hadoop/gateway/util/KnoxCLITest.java", "blob_url": "https://github.com/apache/knox/blob/7d839171a7c2ecda217732718ae5aedf4d429fba/gateway-server/src/test/java/org/apache/hadoop/gateway/util/KnoxCLITest.java", "sha": "82f380adbacb92414fe1424bad191b4dd0d59e97", "changes": 11, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/src/test/java/org/apache/hadoop/gateway/util/KnoxCLITest.java?ref=7d839171a7c2ecda217732718ae5aedf4d429fba", "patch": "@@ -119,6 +119,17 @@ public void testListAndDeleteOfAliasForInvalidClusterName() throws Exception {\n \n   }\n \n+  @Test\n+  public void testForInvalidArgument() throws Exception {\n+    outContent.reset();\n+    String[] args1 = { \"--value\", \"testvalue1\", \"--master\", \"master\" };\n+    KnoxCLI cli = new KnoxCLI();\n+    cli.setConf(new GatewayConfigImpl());\n+    int rc = cli.run(args1);\n+    assertEquals(-2, rc);\n+    assertTrue(outContent.toString().contains(\"ERROR: Invalid Command\"));\n+  }\n+\n   @Test\n   public void testListAndDeleteOfAliasForValidClusterName() throws Exception {\n     outContent.reset();", "filename": "gateway-server/src/test/java/org/apache/hadoop/gateway/util/KnoxCLITest.java"}], "repo": "knox"}, {"commit": "https://github.com/apache/knox/commit/197e9960d2724056f257ddb64980a62b40cf8d6a", "parent": "https://github.com/apache/knox/commit/868e5715e4a3fe21c08cedfd58ba5cd67ff65fe1", "message": "KNOX-459 - added null checks to the closing of resultEnums to avoid NPEs", "bug_id": "knox_16", "file": [{"additions": 12, "raw_url": "https://github.com/apache/knox/raw/197e9960d2724056f257ddb64980a62b40cf8d6a/gateway-provider-security-shiro/src/main/java/org/apache/hadoop/gateway/shirorealm/KnoxLdapRealm.java", "blob_url": "https://github.com/apache/knox/blob/197e9960d2724056f257ddb64980a62b40cf8d6a/gateway-provider-security-shiro/src/main/java/org/apache/hadoop/gateway/shirorealm/KnoxLdapRealm.java", "sha": "1cf9fd88280fcf0ffd78710e4fe54fb927c219b2", "changes": 16, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-security-shiro/src/main/java/org/apache/hadoop/gateway/shirorealm/KnoxLdapRealm.java?ref=197e9960d2724056f257ddb64980a62b40cf8d6a", "patch": "@@ -274,10 +274,14 @@ private void addRoleIfMember(final String userDn, final SearchResult group,\n     }\n     finally {\n       try {\n-        attributeEnum.close();\n+        if (attributeEnum != null) {\n+          attributeEnum.close();\n+        }\n       }\n       finally {\n-        e.close();\n+        if (e != null) {\n+          e.close();\n+        }\n       }\n     }\n   }\n@@ -474,7 +478,9 @@ boolean isUserMemberOfDynamicGroup(LdapName userLdapDn, String memberUrl,\n     finally {\n       if (searchResultEnum != null) {\n         try {\n-          searchResultEnum.close();\n+          if (searchResultEnum != null) {\n+            searchResultEnum.close();\n+          }\n         }\n         finally {\n           LdapUtils.closeContext(systemLdapCtx);\n@@ -534,7 +540,9 @@ protected String getUserDn(String principal) throws IllegalArgumentException, Il\n         throw new IllegalArgumentException(\"Hit NamingException: \" + e.getMessage());\n       } finally {\n         try {\n-          searchResultEnum.close();\n+          if (searchResultEnum != null) {\n+            searchResultEnum.close();\n+          }\n         } catch (NamingException e) {\n         }\n         finally {", "filename": "gateway-provider-security-shiro/src/main/java/org/apache/hadoop/gateway/shirorealm/KnoxLdapRealm.java"}], "repo": "knox"}, {"commit": "https://github.com/apache/knox/commit/9ed2c0246e68bc5025865ab545235e010c65b982", "parent": "https://github.com/apache/knox/commit/886d6919ae463e1af1f646dd30271b53f2adbdc7", "message": "KNOX-57: Prevent NPE by checking for null file list during delete event.", "bug_id": "knox_17", "file": [{"additions": 6, "raw_url": "https://github.com/apache/knox/raw/9ed2c0246e68bc5025865ab545235e010c65b982/gateway-server/src/main/java/org/apache/hadoop/gateway/GatewayServer.java", "blob_url": "https://github.com/apache/knox/blob/9ed2c0246e68bc5025865ab545235e010c65b982/gateway-server/src/main/java/org/apache/hadoop/gateway/GatewayServer.java", "sha": "d3cbc67dd83b11ddab89257b42977e3b710aecfe", "changes": 10, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/src/main/java/org/apache/hadoop/gateway/GatewayServer.java?ref=9ed2c0246e68bc5025865ab545235e010c65b982", "patch": "@@ -348,10 +348,12 @@ public void handleTopologyEvent( List<TopologyEvent> events ) {\n           File warDir = calculateDeploymentDir( topology );\n           if( event.getType().equals( TopologyEvent.Type.DELETED ) ) {\n             File[] files = topoDir.listFiles( new WarDirFilter( topology.getName() + \"\\\\.war\\\\.[0-9A-Fa-f]+\" ) );\n-            for( File file : files ) {\n-              log.deletingDeployment( file.getAbsolutePath() );\n-              internalUndeploy( topology );\n-              FileUtils.deleteQuietly( file );\n+            if( files != null ) {\n+              for( File file : files ) {\n+                log.deletingDeployment( file.getAbsolutePath() );\n+                internalUndeploy( topology );\n+                FileUtils.deleteQuietly( file );\n+              }\n             }\n           } else {\n             try {", "filename": "gateway-server/src/main/java/org/apache/hadoop/gateway/GatewayServer.java"}], "repo": "knox"}]
