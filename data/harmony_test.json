{
    "harmony_0e20c58": {
        "bug_id": "harmony_0e20c58",
        "commit": "https://github.com/apache/harmony/commit/0e20c58070a7c7d6ddf43d94f5c3712c68adcef9",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/harmony/blob/0e20c58070a7c7d6ddf43d94f5c3712c68adcef9/classlib/modules/luni/src/main/java/java/net/DatagramSocket.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony/contents/classlib/modules/luni/src/main/java/java/net/DatagramSocket.java?ref=0e20c58070a7c7d6ddf43d94f5c3712c68adcef9",
                "deletions": 3,
                "filename": "classlib/modules/luni/src/main/java/java/net/DatagramSocket.java",
                "patch": "@@ -442,11 +442,8 @@ public void send(DatagramPacket pack) throws IOException {\n         } else {\n             // not connected so the target address is not allowed to be null\n             if (packAddr == null) {\n-                if (pack.getPort() == -1) {\n                     // KA019 Destination address is null\n                     throw new NullPointerException(Messages.getString(\"luni.59\")); //$NON-NLS-1$\n-                }\n-                return;\n             }\n             SecurityManager security = System.getSecurityManager();\n             if (security != null) {",
                "raw_url": "https://github.com/apache/harmony/raw/0e20c58070a7c7d6ddf43d94f5c3712c68adcef9/classlib/modules/luni/src/main/java/java/net/DatagramSocket.java",
                "sha": "beac3f1411e166841f308cd015984bd950240318",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/harmony/blob/0e20c58070a7c7d6ddf43d94f5c3712c68adcef9/classlib/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/net/DatagramSocketTest.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/harmony/contents/classlib/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/net/DatagramSocketTest.java?ref=0e20c58070a7c7d6ddf43d94f5c3712c68adcef9",
                "deletions": 0,
                "filename": "classlib/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/net/DatagramSocketTest.java",
                "patch": "@@ -36,6 +36,7 @@\n import java.util.Date;\n \n import org.apache.harmony.luni.net.PlainDatagramSocketImpl;\n+import org.junit.Test;\n \n import tests.support.Support_Configuration;\n import tests.support.Support_PortManager;\n@@ -939,6 +940,29 @@ public Object getOption(int arg0) throws SocketException {\n         }\n     }\n     \n+    /**\n+     * If the InetAddress of DatagramPacket is null, DatagramSocket.send(DatagramPacket)\n+     * should throw NullPointer Exception.\n+     * @tests java.net.DatagramSocket#send(java.net.DatagramPacket)\n+     */\n+    @Test\n+    public void test_sendLjava_net_DatagramPacket2() throws IOException {\n+        int udp_port = 20000;\n+        int send_port = 23000;\n+        DatagramSocket udpSocket = new DatagramSocket(udp_port);\n+        byte[] data = {65};\n+        DatagramPacket sendPacket = new DatagramPacket(data, data.length, null, send_port);\n+        try {\n+            udpSocket.send(sendPacket);\n+            fail(\"Should throw SocketException\");\n+        } catch (NullPointerException e) {\n+          // Expected\n+        } finally {\n+            udpSocket.close();\n+        }\n+\n+    }\n+    \n     /**\n      * @tests {@link java.net.DatagramSocket#setDatagramSocketImplFactory(DatagramSocketImplFactory)}\n      */",
                "raw_url": "https://github.com/apache/harmony/raw/0e20c58070a7c7d6ddf43d94f5c3712c68adcef9/classlib/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/net/DatagramSocketTest.java",
                "sha": "130aa583d3ba74168dd1ed30382b36bf0988b1c1",
                "status": "modified"
            }
        ],
        "message": "Applying patches from \"[#HARMONY-6492] [classlib][luni]\nDatagramSocket.send(DatagramPacket) should throw NullPointerException if\nthe InetAdderess of DatagramPacket is null\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/java/trunk@930172 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/harmony/commit/3912770cb3335b933f77ffbabde00c073544d03f",
        "patched_files": [
            "DatagramSocket.java"
        ],
        "repo": "harmony",
        "unit_tests": [
            "DatagramSocketTest.java"
        ]
    },
    "harmony_17765d7": {
        "bug_id": "harmony_17765d7",
        "commit": "https://github.com/apache/harmony/commit/17765d77bf939283b8d0be1bf019ff2320886247",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/harmony/blob/17765d77bf939283b8d0be1bf019ff2320886247/classlib/modules/beans/src/main/java/java/beans/DefaultPersistenceDelegate.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/harmony/contents/classlib/modules/beans/src/main/java/java/beans/DefaultPersistenceDelegate.java?ref=17765d77bf939283b8d0be1bf019ff2320886247",
                "deletions": 8,
                "filename": "classlib/modules/beans/src/main/java/java/beans/DefaultPersistenceDelegate.java",
                "patch": "@@ -294,25 +294,21 @@ protected Expression instantiate(Object oldInstance, Encoder enc) {\n      */\n     @Override\n     protected boolean mutatesTo(Object o1, Object o2) {\n-        if (null == o1 || null == o2) {\n-            return false;\n-        }\n-        Class<? extends Object> c = o1.getClass();\n         if (this.propertyNames.length > 0) {\n+            Class<?> clazz = o1.getClass();\n             // Check the \"equals\" method has been declared\n             Method equalMethod = null;\n             try {\n-                equalMethod = c.getDeclaredMethod(\"equals\", //$NON-NLS-1$\n+                equalMethod = clazz.getDeclaredMethod(\"equals\", //$NON-NLS-1$\n                         new Class[] { Object.class });\n-            } catch (NoSuchMethodException ex) {\n-                // ignore\n+            } catch (NoSuchMethodException e) {\n+                // Ignored\n             }\n \n             if (null != equalMethod) {\n                 return o1.equals(o2);\n             }\n         }\n-\n         return super.mutatesTo(o1, o2);\n     }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/harmony/raw/17765d77bf939283b8d0be1bf019ff2320886247/classlib/modules/beans/src/main/java/java/beans/DefaultPersistenceDelegate.java",
                "sha": "4b9a4be2a176aa2f49937ac5bc6dc7d51c414fb8",
                "status": "modified"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/harmony/blob/17765d77bf939283b8d0be1bf019ff2320886247/classlib/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/DefaultPersistenceDelegateTest.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/harmony/contents/classlib/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/DefaultPersistenceDelegateTest.java?ref=17765d77bf939283b8d0be1bf019ff2320886247",
                "deletions": 0,
                "filename": "classlib/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/DefaultPersistenceDelegateTest.java",
                "patch": "@@ -828,6 +828,45 @@ public void testArrayPD_Normal() {\n         pd.writeObject(ia, enc);\n     }\n \n+    class MockDefaultPersistenceDelegate extends DefaultPersistenceDelegate {\n+        public MockDefaultPersistenceDelegate(String[] args) {\n+            super(args);\n+        }\n+\n+        public boolean mockMutatesTo(Object obj1, Object obj2) {\n+            return mutatesTo(obj1, obj2);\n+        }\n+    }\n+\n+    public void test_MutatesTo_scenario1() throws Exception {\n+        MockDefaultPersistenceDelegate mockDPD = new MockDefaultPersistenceDelegate(\n+                new String[1]);\n+        try {\n+            mockDPD.mockMutatesTo((Object) null, (Object) null);\n+            fail(\"should throw NPE\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+\n+        try {\n+            mockDPD.mockMutatesTo((Object) null, (Object) \"\");\n+            fail(\"should throw NPE\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+\n+        assertFalse(mockDPD.mockMutatesTo((Object) \"\", (Object) null));\n+    }\n+\n+    public void test_MutatesTo_scenario2() throws Exception {\n+        MockDefaultPersistenceDelegate mockDPD = new MockDefaultPersistenceDelegate(\n+                new String[0]);\n+        assertFalse(mockDPD.mockMutatesTo((Object) null, (Object) null));\n+        assertFalse(mockDPD.mockMutatesTo((Object) null, (Object) \"\"));\n+        assertFalse(mockDPD.mockMutatesTo((Object) \"\", (Object) null));\n+        assertTrue(mockDPD.mockMutatesTo((Object) \"\", (Object) \"\"));\n+    }\n+\n     /*\n      * BeanInfo for the MockBean below.\n      */",
                "raw_url": "https://github.com/apache/harmony/raw/17765d77bf939283b8d0be1bf019ff2320886247/classlib/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/DefaultPersistenceDelegateTest.java",
                "sha": "55b4033a5860c2c12b8fb62c08670b2ca1cc0aee",
                "status": "modified"
            }
        ],
        "message": "Apply patch HARMONY-2449 ([classlib][beans] java.beans.DefaultPersistenceDelegate.mutatesTo() should throw NPE for null parameter)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/java/trunk@954547 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/harmony/commit/308f59bd30e33cf1a36b1461d4a0895a811fe17c",
        "patched_files": [
            "DefaultPersistenceDelegate.java"
        ],
        "repo": "harmony",
        "unit_tests": [
            "DefaultPersistenceDelegateTest.java"
        ]
    },
    "harmony_23e4440": {
        "bug_id": "harmony_23e4440",
        "commit": "https://github.com/apache/harmony/commit/23e44405436967981e87b4ee35ea034e6c98489b",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/harmony/blob/23e44405436967981e87b4ee35ea034e6c98489b/classlib/modules/jndi/src/main/java/javax/naming/Reference.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/harmony/contents/classlib/modules/jndi/src/main/java/javax/naming/Reference.java?ref=23e44405436967981e87b4ee35ea034e6c98489b",
                "deletions": 22,
                "filename": "classlib/modules/jndi/src/main/java/javax/naming/Reference.java",
                "patch": "@@ -282,9 +282,9 @@ public void clear() {\n     @Override\n     public Object clone() {\n         try {\n-            Reference r = (Reference) super.clone();\n-            r.addrs = (Vector<RefAddr>) this.addrs.clone();\n-            return r;\n+            Reference reference = (Reference) super.clone();\n+            reference.addrs = (Vector<RefAddr>) this.addrs.clone();\n+            return reference;\n         } catch (CloneNotSupportedException e) {\n             // jndi.03=Failed to clone object of Reference class.\n             throw new AssertionError(Messages.getString(\"jndi.03\")); //$NON-NLS-1$\n@@ -305,12 +305,16 @@ public Object clone() {\n      */\n     @Override\n     public boolean equals(Object o) {\n-        if (o instanceof Reference) {\n-            Reference r = (Reference) o;\n-            return r.className.equals(this.className)\n-                    && r.addrs.equals(this.addrs);\n+        if (o == this) {\n+            return true;\n         }\n-        return false;\n+        if (!(o instanceof Reference)) {\n+            return false;\n+        }\n+        Reference ref = (Reference) o;\n+        return ref.className.equals(this.className)\n+                && ref.addrs.size() == this.addrs.size()\n+                && ref.addrs.equals(this.addrs);\n     }\n \n     /**\n@@ -322,13 +326,12 @@ public boolean equals(Object o) {\n      */\n     @Override\n     public int hashCode() {\n-        int i = this.className.hashCode();\n+        int hashCode = this.className.hashCode();\n         Enumeration<RefAddr> e = this.addrs.elements();\n-\n         while (e.hasMoreElements()) {\n-            i += e.nextElement().hashCode();\n+            hashCode += e.nextElement().hashCode();\n         }\n-        return i;\n+        return hashCode;\n     }\n \n     /**\n@@ -337,18 +340,16 @@ public int hashCode() {\n      * \n      * @return the string representation of this object\n      */\n-    @SuppressWarnings(\"nls\")\n     @Override\n     public String toString() {\n-        StringBuilder s = new StringBuilder(\"Reference Class Name: \");\n-        s.append(className);\n-        s.append(\"\\n\");\n-\n-        Enumeration<RefAddr> e = this.addrs.elements();\n-        while (e.hasMoreElements()) {\n-            s.append(e.nextElement());\n+        StringBuilder sb = new StringBuilder(\"Reference Class Name: \"); //$NON-NLS-1$\n+        sb.append(this.className).append('\\n');\n+        if (addrs.size() > 0) {\n+            Enumeration<RefAddr> elements = this.addrs.elements();\n+            while (elements.hasMoreElements()) {\n+                sb.append(elements.nextElement().toString());\n+            }\n         }\n-        return s.toString();\n+        return sb.toString();\n     }\n-\n }",
                "raw_url": "https://github.com/apache/harmony/raw/23e44405436967981e87b4ee35ea034e6c98489b/classlib/modules/jndi/src/main/java/javax/naming/Reference.java",
                "sha": "f6736920ba6a52024dfebfe1777693475c43d697",
                "status": "modified"
            },
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/harmony/blob/23e44405436967981e87b4ee35ea034e6c98489b/classlib/modules/jndi/src/test/java/org/apache/harmony/jndi/tests/javax/naming/ReferenceTest.java",
                "changes": 98,
                "contents_url": "https://api.github.com/repos/apache/harmony/contents/classlib/modules/jndi/src/test/java/org/apache/harmony/jndi/tests/javax/naming/ReferenceTest.java?ref=23e44405436967981e87b4ee35ea034e6c98489b",
                "deletions": 38,
                "filename": "classlib/modules/jndi/src/test/java/org/apache/harmony/jndi/tests/javax/naming/ReferenceTest.java",
                "patch": "@@ -83,15 +83,35 @@ public void testConstructor_ByRefAddr() {\n \t\tassertEquals(1, reference.size());\n \t}\n \n-\tpublic void testConstructor_ByRefAddrNull() {\n-\t\tReference reference = new Reference(null, null);\n-\n-\t\tassertNull(reference.getClassName());\n-\t\tassertNull(reference.getFactoryClassName());\n-\t\tassertNull(reference.getFactoryClassLocation());\n-\t\tassertNull(reference.get(0));\n-\t\tassertEquals(1, reference.size());\n-\t}\n+    public void testConstructor_ByRefAddrNull() {\n+        Reference reference = new Reference(null, null);\n+        assertNull(reference.getClassName());\n+        assertNull(reference.getFactoryClassName());\n+        assertNull(reference.getFactoryClassLocation());\n+        assertNull(reference.get(0));\n+        assertEquals(1, reference.size());\n+\n+        try {\n+            reference.get(\"type\");\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+\n+        try {\n+            reference.toString();\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+\n+        try {\n+            reference.hashCode();\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n \n \tpublic void testConstructor_ByFactory() {\n \t\tString className = \"java.util.Hashtable\";\n@@ -194,24 +214,25 @@ public void testAdd_ByIndexInsert() {\n \t\tassertEquals(refAddr2, ref.get(1));\n \t}\n \n-\tpublic void testAdd_ByIndexInvalidGreat() {\n-\t\tString type = \"Binary\";\n-\t\tBinaryRefAddr refAddr = new BinaryRefAddr(type, buffer);\n-\t\ttry {\n-\t\t\tref.add(1, refAddr);\n-\t\t\tfail(\"This should throw a ArrayIndexOutOfBoundsException\");\n-\t\t} catch (ArrayIndexOutOfBoundsException e) {\n-\t\t}\n-\t}\n+    public void testAdd_ByIndexInvalidGreat() {\n+        BinaryRefAddr refAddr = new BinaryRefAddr(\"Binary\", buffer);\n+        try {\n+            ref.add(1, refAddr);\n+            fail(\"should throw ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            // Expected\n+        }\n+    }\n \n \tpublic void testAdd_ByIndexInvalidLess() {\n \t\tString type = \"Binary\";\n \t\tBinaryRefAddr refAddr = new BinaryRefAddr(type, buffer);\n \t\ttry {\n \t\t\tref.add(-1, refAddr);\n-\t\t\tfail(\"This should throw a ArrayIndexOutOfBoundsException\");\n-\t\t} catch (ArrayIndexOutOfBoundsException e) {\n-\t\t}\n+\t\t\tfail(\"should throw ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            // Expected\n+        }\n \t}\n \n \tpublic void testGet_SimpleInvalidGreat() {\n@@ -221,9 +242,10 @@ public void testGet_SimpleInvalidGreat() {\n \n \t\ttry {\n \t\t\tref.get(ref.size());\n-\t\t\tfail(\"This should throw a ArrayIndexOutOfBoundsException\");\n-\t\t} catch (ArrayIndexOutOfBoundsException e) {\n-\t\t}\n+\t\t\tfail(\"should throw ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            // Expected\n+        }\n \t}\n \n \tpublic void testGet_SimpleInvalidLess() {\n@@ -233,9 +255,10 @@ public void testGet_SimpleInvalidLess() {\n \n \t\ttry {\n \t\t\tref.get(-1);\n-\t\t\tfail(\"This should throw a ArrayIndexOutOfBoundsException\");\n-\t\t} catch (ArrayIndexOutOfBoundsException e) {\n-\t\t}\n+\t\t\tfail(\"should throw ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            // Expected\n+        }\n \t}\n \n \tpublic void testGet_ByType() {\n@@ -269,8 +292,9 @@ public void testGet_TypeNull() {\n \t\tref.add(refAddr);\n \t\ttry {\n \t\t\tref.get(null);\n-\t\t\tfail(\"Should throw NullPointerException.\");\n+\t\t\tfail(\"Should throw NullPointerException\");\n \t\t} catch (NullPointerException e) {\n+\t\t    // Expected\n \t\t}\n \t}\n \n@@ -304,9 +328,10 @@ public void testRemove_Simple() {\n \tpublic void testRemove_Invalid() {\n \t\ttry {\n \t\t\tref.remove(0);\n-\t\t\tfail(\"This should throw a ArrayIndexOutOfBoundsException\");\n-\t\t} catch (ArrayIndexOutOfBoundsException e) {\n-\t\t}\n+\t\t\tfail(\"should throw ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            // Expected\n+        }\n \t}\n \n \tpublic void testClear_Simple() {\n@@ -425,8 +450,9 @@ public void testEquals_NullClassName() {\n \n \t\ttry {\n \t\t\treference0.equals(reference1);\n-\t\t\tfail(\"Should throw NullPointerException.\");\n+\t\t\tfail(\"Should throw NullPointerException\");\n \t\t} catch (NullPointerException e) {\n+\t\t    // Expected\n \t\t}\n \t}\n \n@@ -437,12 +463,7 @@ public void testEquals_NullClassName2() {\n \n \t\tReference reference0 = new Reference(null, classFactory, location);\n \t\tReference reference2 = new Reference(className, classFactory, location);\n-\n-\t\t// try {\n \t\tassertFalse(reference0.equals(reference2));\n-\t\t// fail(\"Should throw NullPointerException.\");\n-\t\t// } catch (NullPointerException e) {\n-\t\t// }\n \t}\n \n \tpublic void testEquals_NullClassName3() {\n@@ -455,8 +476,9 @@ public void testEquals_NullClassName3() {\n \n \t\ttry {\n \t\t\treference2.equals(reference0);\n-\t\t\tfail(\"Should throw NullPointerException.\");\n+\t\t\tfail(\"Should throw NullPointerException\");\n \t\t} catch (NullPointerException e) {\n+\t\t    // Expected\n \t\t}\n \t}\n ",
                "raw_url": "https://github.com/apache/harmony/raw/23e44405436967981e87b4ee35ea034e6c98489b/classlib/modules/jndi/src/test/java/org/apache/harmony/jndi/tests/javax/naming/ReferenceTest.java",
                "sha": "34346c4a8555a52718a4c1d76f3a870c997fe43f",
                "status": "modified"
            }
        ],
        "message": "javax.naming.Reference.toString() should throw NullPointerException if it has a NULL element. This patch fixes this behavior difference between Harmony and RI. In addition, it attaches 3 test cases to cover this change.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/java/trunk@957416 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/harmony/commit/cfad25367437aa4d561ad52e9ed05453c96469fa",
        "patched_files": [
            "Reference.java"
        ],
        "repo": "harmony",
        "unit_tests": [
            "ReferenceTest.java"
        ]
    },
    "harmony_3594b62": {
        "bug_id": "harmony_3594b62",
        "commit": "https://github.com/apache/harmony/commit/3594b623e8635ef7734fcdaae74cae7fbea2bf0d",
        "file": [
            {
                "additions": 104,
                "blob_url": "https://github.com/apache/harmony/blob/3594b623e8635ef7734fcdaae74cae7fbea2bf0d/classlib/modules/jndi/src/main/java/javax/naming/CompoundName.java",
                "changes": 210,
                "contents_url": "https://api.github.com/repos/apache/harmony/contents/classlib/modules/jndi/src/main/java/javax/naming/CompoundName.java?ref=3594b623e8635ef7734fcdaae74cae7fbea2bf0d",
                "deletions": 106,
                "filename": "classlib/modules/jndi/src/main/java/javax/naming/CompoundName.java",
                "patch": "@@ -21,19 +21,20 @@\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.util.Enumeration;\n+import java.util.Iterator;\n import java.util.Properties;\n import java.util.Vector;\n \n import org.apache.harmony.jndi.internal.nls.Messages;\n \n /**\n- * A <code>CompoundName</code> is a series of string elements, and it\n- * represents a name in a naming service within a single namespace. Typically\n- * these names have a structure which is hierarchical.\n+ * A <code>CompoundName</code> is a series of string elements, and it represents\n+ * a name in a naming service within a single namespace. Typically these names\n+ * have a structure which is hierarchical.\n  * <p>\n- * A <code>CompoundName</code> has a sequence of zero or more elements\n- * delimited by the char specified in the property \"jndi.syntax.separator\". This\n- * property is required except when the direction of the name is \"flat\" (see\n+ * A <code>CompoundName</code> has a sequence of zero or more elements delimited\n+ * by the char specified in the property \"jndi.syntax.separator\". This property\n+ * is required except when the direction of the name is \"flat\" (see\n  * jndi.syntax.direction). The property \"jndi.syntax.separator2\" allows for the\n  * specification of an additional separator. A separator string will be treated\n  * as normal characters if it is preceded by the escape string or is within\n@@ -44,8 +45,8 @@\n  * name is read. Permitted values are \"right_to_left\", \"left_to_right\" and\n  * \"flat\". A flat name does not have a hierarchical structure. If this property\n  * is not specified then the default is \"flat\". If this property is specified\n- * with an invalid value then an <code>IllegalArgumentException</code> should\n- * be raised.\n+ * with an invalid value then an <code>IllegalArgumentException</code> should be\n+ * raised.\n  * </p>\n  * <p>\n  * Each element can be accessed using its position. The first element is at\n@@ -57,18 +58,18 @@\n  * There are other properties which affect the syntax of a\n  * <code>CompoundName</code>. The following properties are all optional:\n  * <ul>\n- * <li> jndi.syntax.escape - Escape sequence,The escape sequence is used to\n+ * <li>jndi.syntax.escape - Escape sequence,The escape sequence is used to\n  * escape a quote, separator or escape. When preceded itself by the escape\n  * sequence it is treated as ordinary characters. When it is followed by chars\n  * which are not quote or separator strings then it is treated as ordinary\n  * characters</li>\n- * <li> jndi.syntax.beginquote - Used as start of quoted string (Defaults to\n+ * <li>jndi.syntax.beginquote - Used as start of quoted string (Defaults to\n  * endquote)</li>\n- * <li> jndi.syntax.endquote - Used as end of quoted string (Defaults to\n+ * <li>jndi.syntax.endquote - Used as end of quoted string (Defaults to\n  * beginquote)</li>\n- * <li> jndi.syntax.beginquote2 - Additionally used as start of quoted string\n+ * <li>jndi.syntax.beginquote2 - Additionally used as start of quoted string\n  * (Defaults to endquote2)</li>\n- * <li> jndi.syntax.endquote2 - Additionally used as end of quoted string\n+ * <li>jndi.syntax.endquote2 - Additionally used as end of quoted string\n  * (Defaults to beginquote2)</li>\n  * </ul>\n  * <p>\n@@ -84,9 +85,9 @@\n  * </p>\n  * <p>\n  * <ul>\n- * <li> jndi.syntax.ignorecase - If 'true' then ignore case when name elements\n+ * <li>jndi.syntax.ignorecase - If 'true' then ignore case when name elements\n  * are compared. If false or not set then case is important.</li>\n- * <li> jndi.syntax.trimblanks - If 'true' then ignore leading & trailing blanks\n+ * <li>jndi.syntax.trimblanks - If 'true' then ignore leading & trailing blanks\n  * when name elements are compared. If false or not set then blanks are\n  * important.</li>\n  * </ul>\n@@ -116,9 +117,9 @@\n  * <p>\n  * Consider the string \"CN=$Mandy Jennings, O=Apache, C=UK\" with\n  * <ul>\n- * <li> jndi.syntax.direction set to \"right_to_left\"</li>\n- * <li> jndi.syntax.separator set to \",\"</li>\n- * <li> jndi.syntax.separator.typeval set to \"=\"</li>\n+ * <li>jndi.syntax.direction set to \"right_to_left\"</li>\n+ * <li>jndi.syntax.separator set to \",\"</li>\n+ * <li>jndi.syntax.separator.typeval set to \"=\"</li>\n  * </ul>\n  * When no jndi.syntax.beginquote is set then this creates a valid\n  * <code>CompoundName</code> with 3 elements.\n@@ -132,8 +133,8 @@\n  * quotes round Mandy Jennings now balance.\n  * </p>\n  * <p>\n- * A <code>CompoundName</code> may be empty. An empty\n- * <code>CompoundName</code> has no elements. Elements may also be empty.\n+ * A <code>CompoundName</code> may be empty. An empty <code>CompoundName</code>\n+ * has no elements. Elements may also be empty.\n  * </p>\n  * \n  * <pre>\n@@ -300,7 +301,7 @@\n     private transient boolean flat;\n \n     // elements of compound name\n-    private transient Vector<String> elem;\n+    private transient Vector<String> elems;\n \n     // property setting\n     protected transient Properties mySyntax;\n@@ -328,16 +329,16 @@ protected CompoundName(Enumeration<String> elements, Properties props) {\n             throw new NullPointerException();\n         }\n         init(props);\n-        this.elem = new Vector<String>();\n+        this.elems = new Vector<String>();\n         while (elements.hasMoreElements()) {\n-            this.elem.add(elements.nextElement());\n+            this.elems.add(elements.nextElement());\n         }\n     }\n \n     /**\n-     * Constructs a <code>CompoundName</code> with supplied\n-     * <code>String</code> and <code>Properties</code>, taking the supplied\n-     * <code>s</code> and breaking it down into its elements.\n+     * Constructs a <code>CompoundName</code> with supplied <code>String</code>\n+     * and <code>Properties</code>, taking the supplied <code>s</code> and\n+     * breaking it down into its elements.\n      * \n      * @param s\n      *            a string containing the full compound name\n@@ -427,7 +428,7 @@ private void init(Properties props) {\n      * parse name from string to elements\n      */\n     private void parseName(String s) throws InvalidNameException {\n-        this.elem = new Vector<String>();\n+        this.elems = new Vector<String>();\n         if (\"\".equals(s)) { //$NON-NLS-1$\n             // if empty string, return empty vector\n             return;\n@@ -523,7 +524,7 @@ private void parseName(String s) throws InvalidNameException {\n             throw new InvalidNameException(Messages.getString(\"jndi.08\", s)); //$NON-NLS-1$\n         }\n         if (!hasNotNullElement) {\n-            elem.remove(elem.size() - 1);\n+            elems.remove(elems.size() - 1);\n         }\n     }\n \n@@ -543,9 +544,9 @@ private int addBuffer(StringBuilder buffer, String des, boolean include) {\n      */\n     private void addElement(StringBuilder element) {\n         if (LEFT_TO_RIGHT == direction) {\n-            elem.add(element.toString());\n+            elems.add(element.toString());\n         } else {\n-            elem.add(0, element.toString());\n+            elems.add(0, element.toString());\n         }\n         element.setLength(0);\n     }\n@@ -599,42 +600,42 @@ private boolean startsWithFromPos(String src, int pos, String des) {\n     }\n \n     public Enumeration<String> getAll() {\n-        return this.elem.elements();\n+        return this.elems.elements();\n     }\n \n     public String get(int index) {\n         validateIndex(index, false);\n-        return elem.elementAt(index);\n+        return elems.elementAt(index);\n     }\n \n     /*\n      * validate the index, if isInclude is true, index which equals to\n      * this.size() is considered as valid, otherwise invalid\n      */\n     private void validateIndex(int index, boolean isInclude) {\n-        if (0 > index || index > elem.size()\n-                || (!isInclude && index == elem.size())) {\n+        if (0 > index || index > elems.size()\n+                || (!isInclude && index == elems.size())) {\n             throw new ArrayIndexOutOfBoundsException();\n         }\n     }\n \n     public Name getPrefix(int index) {\n         validateIndex(index, true);\n-        return new CompoundName(new Vector<String>(elem.subList(0, index))\n+        return new CompoundName(new Vector<String>(elems.subList(0, index))\n                 .elements(), mySyntax);\n     }\n \n     public Name getSuffix(int index) {\n-        if (index == elem.size()) {\n+        if (index == elems.size()) {\n             return new CompoundName(new Vector<String>().elements(), mySyntax);\n         }\n         validateIndex(index, false);\n-        return new CompoundName(new Vector<String>(elem.subList(index, elem\n+        return new CompoundName(new Vector<String>(elems.subList(index, elems\n                 .size())).elements(), mySyntax);\n     }\n \n     public Name addAll(Name name) throws InvalidNameException {\n-        return addAll(elem.size(), name);\n+        return addAll(elems.size(), name);\n     }\n \n     public Name addAll(int index, Name name) throws InvalidNameException {\n@@ -654,7 +655,7 @@ public Name addAll(int index, Name name) throws InvalidNameException {\n         validateIndex(index, true);\n         Enumeration<String> enumeration = name.getAll();\n         while (enumeration.hasMoreElements()) {\n-            elem.add(index++, enumeration.nextElement());\n+            elems.add(index++, enumeration.nextElement());\n         }\n         return this;\n     }\n@@ -668,7 +669,7 @@ public Name add(String element) throws InvalidNameException {\n             // jndi.0A=A flat name can only have a single component\n             throw new InvalidNameException(Messages.getString(\"jndi.0A\")); //$NON-NLS-1$\n         }\n-        elem.add(element);\n+        elems.add(element);\n         return this;\n     }\n \n@@ -697,7 +698,7 @@ public Name add(int index, String element) throws InvalidNameException {\n             throw new InvalidNameException(Messages.getString(\"jndi.0A\")); //$NON-NLS-1$\n         }\n         validateIndex(index, true);\n-        elem.add(index, element);\n+        elems.add(index, element);\n         return this;\n     }\n \n@@ -716,7 +717,7 @@ public Name add(int index, String element) throws InvalidNameException {\n      */\n     public Object remove(int index) throws InvalidNameException {\n         validateIndex(index, false);\n-        return elem.remove(index);\n+        return elems.remove(index);\n     }\n \n     @Override\n@@ -725,11 +726,11 @@ public Object clone() {\n     }\n \n     public int size() {\n-        return elem.size();\n+        return elems.size();\n     }\n \n     public boolean isEmpty() {\n-        return elem.isEmpty();\n+        return elems.isEmpty();\n     }\n \n     public boolean startsWith(Name name) {\n@@ -770,9 +771,10 @@ private String preProcess(String string, boolean caseInsensitive,\n     private void writeObject(ObjectOutputStream oos) throws IOException {\n         oos.defaultWriteObject();\n         oos.writeObject(mySyntax);\n-        oos.writeInt(elem.size());\n-        for (int i = 0; i < elem.size(); i++) {\n-            String element = elem.elementAt(i);\n+        int elemSize = elems.size();\n+        oos.writeInt(elemSize);\n+        for (int i = 0; i < elemSize; i++) {\n+            String element = elems.elementAt(i);\n             oos.writeObject(element);\n         }\n     }\n@@ -795,59 +797,58 @@ private void readObject(ObjectInputStream ois)\n         ois.defaultReadObject();\n         init(((Properties) ois.readObject()));\n         int size = ois.readInt();\n-        elem = new Vector<String>();\n+        elems = new Vector<String>();\n         for (int i = 0; i < size; i++) {\n-            elem.add((String) ois.readObject());\n+            elems.add((String) ois.readObject());\n         }\n     }\n \n     /**\n-     * Compare this <code>CompoundName</code> with the one supplied as a\n-     * param.\n+     * Compare this <code>CompoundName</code> with the one supplied as a param.\n      * <p>\n      * See the definition of the <code>equals()</code> method to see how the\n      * direction, ignorecase and trimblanks properties affect the comparison of\n-     * a <code>CompoundName</code>. Other than that the comparison is the\n-     * same as that for a <code>CompositeName</code>.\n+     * a <code>CompoundName</code>. Other than that the comparison is the same\n+     * as that for a <code>CompositeName</code>.\n      * </p>\n      * \n      * @return a negative number means this is less than the supplied Object\n-     *         <code>o</code>. a positive number means this is greater than\n-     *         the supplied Object <code>o</code>. zero means the two objects\n-     *         are equal.\n+     *         <code>o</code>. a positive number means this is greater than the\n+     *         supplied Object <code>o</code>. zero means the two objects are\n+     *         equal.\n      * @param o\n      *            the object to compare - cannot be null.\n      * @throws ClassCastException\n      *             when <code>o</code> is not a compatible class that can be\n-     *             compared or if the object to compare <code>o</code> is\n-     *             null.\n+     *             compared or if the object to compare <code>o</code> is null.\n      */\n     public int compareTo(Object o) {\n+        if (o == this) {\n+            return 0;\n+        }\n         if (!(o instanceof CompoundName)) {\n             throw new ClassCastException();\n         }\n-        int result = -1;\n-        CompoundName otherName = (CompoundName) o;\n-        Enumeration<String> otherEnum = otherName.getAll();\n-        String thisElement;\n-        String otherElement;\n-        int i;\n-        for (i = 0; i < size() && otherEnum.hasMoreElements(); i++) {\n-            thisElement = preProcess(elem.get(i), ignoreCase, trimBlanks);\n-            otherElement = preProcess(otherEnum.nextElement(), ignoreCase,\n-                    trimBlanks);\n-            result = (null == thisElement ? (null == otherElement ? 0 : -1)\n-                    : thisElement.compareTo(otherElement));\n-            if (0 != result) {\n-                return result;\n+\n+        Iterator<String> thisIter = elems.iterator();\n+        Iterator<String> thatIter = ((CompoundName) o).elems.iterator();\n+        int compareResult;\n+        String thisString, thatString;\n+        while (thisIter.hasNext() && thatIter.hasNext()) {\n+            thisString = preProcess(thisIter.next(), ignoreCase, trimBlanks);\n+            thatString = preProcess(thatIter.next(), ignoreCase, trimBlanks);\n+            compareResult = thisString.compareTo(thatString);\n+            if (0 != compareResult) {\n+                return compareResult;\n             }\n         }\n-        if (i < size()) {\n-            result = 1;\n-        } else if (otherEnum.hasMoreElements()) {\n-            result = -1;\n+        if (thisIter.hasNext()) {\n+            return 1;\n         }\n-        return result;\n+        if (thatIter.hasNext()) {\n+            return -1;\n+        }\n+        return 0;\n     }\n \n     /**\n@@ -866,13 +867,13 @@ public int compareTo(Object o) {\n      */\n     @Override\n     public int hashCode() {\n-        int result = 0;\n-        Enumeration<String> enumeration = elem.elements();\n+        int hashCode = 0;\n+        Enumeration<String> enumeration = elems.elements();\n         while (enumeration.hasMoreElements()) {\n-            result += preProcess(enumeration.nextElement(), ignoreCase,\n+            hashCode += preProcess(enumeration.nextElement(), ignoreCase,\n                     trimBlanks).hashCode();\n         }\n-        return result;\n+        return hashCode;\n     }\n \n     /**\n@@ -896,12 +897,13 @@ public String toString() {\n                 : endQuoteString;\n         String separator = NULL_STRING.equals(separatorString) ? separatorString2\n                 : separatorString;\n+        int elemSize = elems.size();\n         if (RIGHT_TO_LEFT.equals(direction)) {\n-            for (int i = elem.size() - 1; i >= 0; i--) {\n+            for (int i = elemSize - 1; i >= 0; i--) {\n                 addElement(sb, i, separator, begin, end);\n             }\n         } else {\n-            for (int i = 0; i < elem.size(); i++) {\n+            for (int i = 0; i < elemSize; i++) {\n                 addElement(sb, i, separator, begin, end);\n             }\n         }\n@@ -914,9 +916,10 @@ public String toString() {\n     }\n \n     private void addElement(StringBuilder sb, int index, String separator,\n-            String begin, String end) {\n-        String elemString = elem.get(index);\n-        if (0 == elemString.length()) {\n+            String begin, final String end) {\n+        final String elemString = elems.get(index);\n+        final int elemStringLength = elemString.length();\n+        if (0 == elemStringLength) {\n             // if empty element, append a separator and continue\n             sb.append(separator);\n             return;\n@@ -930,8 +933,9 @@ private void addElement(StringBuilder sb, int index, String separator,\n             sb.insert(pos, begin);\n             pos += begin.length();\n             // if quoted, then every endquote char must be escaped\n+            int endLenght = end.length();\n             for (int i = 0, j = 0; 0 <= (j = elemString.indexOf(end, i)); i = j\n-                    + end.length()) {\n+                    + endLenght) {\n                 sb.insert(pos + j, escapeString);\n                 pos += escapeString.length();\n             }\n@@ -944,7 +948,7 @@ private void addElement(StringBuilder sb, int index, String separator,\n                 pos += escapeString.length();\n             }\n             // if not quoted, escape all separator string and all escape string\n-            for (int i = 0; i < elemString.length();) {\n+            for (int i = 0; i < elemStringLength;) {\n                 if (startsWithFromPos(elemString, i, separatorString)) {\n                     sb.insert(pos + i, escapeString);\n                     pos += escapeString.length();\n@@ -969,8 +973,8 @@ private void addElement(StringBuilder sb, int index, String separator,\n      * Check if the supplied object <code>o</code> is equal to this\n      * <code>CompoundName</code>.\n      * <p>\n-     * The supplied <code>Object o</code> may be null but that will cause\n-     * false to be returned.\n+     * The supplied <code>Object o</code> may be null but that will cause false\n+     * to be returned.\n      * </p>\n      * <p>\n      * The supplied <code>Object o</code> may be something other than a\n@@ -979,9 +983,8 @@ private void addElement(StringBuilder sb, int index, String separator,\n      * <p>\n      * To be equal the supplied <code>CompoundName</code> must have the same\n      * number of elements and each element must match the corresponding element\n-     * of this <code>CompoundName</code>. The properties\n-     * jndi.syntax.ignorecase and jndi.syntax.trimblanks need to be considered\n-     * if they have been set.\n+     * of this <code>CompoundName</code>. The properties jndi.syntax.ignorecase\n+     * and jndi.syntax.trimblanks need to be considered if they have been set.\n      * </p>\n      * <p>\n      * The properties associated with the <code>CompoundName</code> must be\n@@ -1001,41 +1004,36 @@ public boolean equals(Object o) {\n             return false;\n         }\n \n-        // compare size\n         CompoundName otherName = (CompoundName) o;\n-        final int size = otherName.size();\n-        if (size != this.size()) {\n+        int otherSize = otherName.size();\n+        if (otherSize != this.size()) {\n             return false;\n         }\n \n         // compare every element\n-        return equals(otherName, 0, size);\n+        return equals(otherName, 0, otherSize);\n     }\n \n     /**\n      * compare this name to the supplied <code>name</code> from position\n-     * <code>start</code> to position <code>start</code>+\n-     * <code>length</code>-1\n+     * <code>start</code> to position <code>start</code>+ <code>length</code>-1\n      */\n-    private boolean equals(Name name, int start, int length) {\n+    private boolean equals(Name name, int offset, int length) {\n         if (length > this.size()) {\n             return false;\n         }\n         CompoundName otherName = (CompoundName) name;\n         Enumeration<String> otherEnum = otherName.getAll();\n-        String thisElement;\n-        String otherElement;\n+        String thisElement, otherElement;\n         for (int i = 0; i < length; i++) {\n-            thisElement = preProcess(elem.get(i + start), ignoreCase,\n+            thisElement = preProcess(elems.get(i + offset), ignoreCase,\n                     trimBlanks);\n             otherElement = preProcess(otherEnum.nextElement(), ignoreCase,\n                     trimBlanks);\n-            if (!(null == thisElement ? null == otherElement : thisElement\n-                    .equals(otherElement))) {\n+            if (!thisElement.equals(otherElement)) {\n                 return false;\n             }\n         }\n         return true;\n     }\n-\n }",
                "raw_url": "https://github.com/apache/harmony/raw/3594b623e8635ef7734fcdaae74cae7fbea2bf0d/classlib/modules/jndi/src/main/java/javax/naming/CompoundName.java",
                "sha": "df855ace7aa16f6560b564d3b332f9a8f82538c8",
                "status": "modified"
            },
            {
                "additions": 171,
                "blob_url": "https://github.com/apache/harmony/blob/3594b623e8635ef7734fcdaae74cae7fbea2bf0d/classlib/modules/jndi/src/test/java/org/apache/harmony/jndi/tests/javax/naming/CompoundNameTest.java",
                "changes": 171,
                "contents_url": "https://api.github.com/repos/apache/harmony/contents/classlib/modules/jndi/src/test/java/org/apache/harmony/jndi/tests/javax/naming/CompoundNameTest.java?ref=3594b623e8635ef7734fcdaae74cae7fbea2bf0d",
                "deletions": 0,
                "filename": "classlib/modules/jndi/src/test/java/org/apache/harmony/jndi/tests/javax/naming/CompoundNameTest.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.io.ObjectOutputStream;\n import java.util.Enumeration;\n import java.util.Properties;\n+import java.util.Vector;\n \n import javax.naming.CompositeName;\n import javax.naming.CompoundName;\n@@ -1815,4 +1816,174 @@ public Object clone() {\n             throw new UnsupportedOperationException();\n         }\n     }\n+\n+    public static class MockCompoundName extends CompoundName {\n+\n+        private static final long serialVersionUID = -5947330494555498760L;\n+\n+        public MockCompoundName(String s) throws InvalidNameException {\n+            super(s, new Properties());\n+        }\n+\n+        public MockCompoundName(Enumeration<String> elements, Properties props) {\n+            super(elements, props);\n+        }\n+    }\n+\n+    private static CompoundName nullName;\n+\n+    private static CompoundName nullName2;\n+\n+    private static CompoundName sampleName;\n+\n+    static {\n+        Vector<String> elems = new Vector<String>();\n+        elems.add(null);\n+        nullName = new MockCompoundName(elems.elements(), new Properties());\n+        elems.add(null);\n+        nullName2 = new MockCompoundName(elems.elements(), new Properties());\n+        try {\n+            sampleName = new MockCompoundName(\"sample\");\n+        } catch (InvalidNameException e) {\n+            // Ignored\n+        }\n+    }\n+\n+    public void testConstructor_NPE() {\n+        try {\n+            new MockCompoundName(null, new Properties());\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void testEquals_NPE() {\n+        try {\n+            nullName.equals(nullName);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+        assertFalse(nullName.equals(nullName2));\n+        assertFalse(nullName2.equals(nullName));\n+\n+        try {\n+            nullName.equals(sampleName);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+        assertFalse(sampleName.equals(nullName));\n+    }\n+\n+    public void testCompareTo_NPE() {\n+        assertEquals(0, nullName.compareTo(nullName));\n+        try {\n+            nullName.compareTo(sampleName);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+        try {\n+            sampleName.compareTo(nullName);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void testHashCode_NPE() {\n+        try {\n+            nullName.hashCode();\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void testToString_NPE() {\n+        try {\n+            nullName.toString();\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void testStartsWith_NPE() {\n+        try {\n+            nullName.startsWith(sampleName);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+        assertFalse(sampleName.startsWith(nullName));\n+    }\n+\n+    public void testEndsWith_NPE() {\n+        try {\n+            nullName.endsWith(sampleName);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+        assertFalse(sampleName.endsWith(nullName));\n+    }\n+\n+    public void testIgnoreCase() throws InvalidNameException {\n+        String key = \"jndi.syntax.ignorecase\";\n+        Properties properties = new Properties();\n+        properties.setProperty(key, \"true\");\n+        // true-true\n+        CompoundName cName1 = new CompoundName(\"cName\", properties);\n+        CompoundName cName2 = new CompoundName(\"CName\", properties);\n+        assertTrue(cName1.equals(cName2));\n+        assertTrue(cName2.equals(cName1));\n+        assertEquals(0, cName1.compareTo(cName2));\n+        assertEquals(0, cName2.compareTo(cName1));\n+\n+        // true-false\n+        properties.setProperty(key, \"false\");\n+        cName2 = new CompoundName(\"CName\", properties);\n+        assertTrue(cName1.equals(cName2));\n+        assertFalse(cName2.equals(cName1));\n+        assertEquals(0, cName1.compareTo(cName2));\n+        assertTrue(cName2.compareTo(cName1) < 0);\n+\n+        // false-false\n+        cName1 = new CompoundName(\"cName\", properties);\n+        assertFalse(cName1.equals(cName2));\n+        assertFalse(cName2.equals(cName1));\n+        assertTrue(cName1.compareTo(cName2) > 0);\n+        assertTrue(cName2.compareTo(cName1) < 0);\n+    }\n+\n+    public void testTrimBlank() throws InvalidNameException {\n+        String key = \"jndi.syntax.trimblanks\";\n+        Properties properties = new Properties();\n+        properties.setProperty(key, \"true\");\n+        // true-true\n+        CompoundName cName1 = new CompoundName(\" cName\", properties);\n+        CompoundName cName2 = new CompoundName(\" cName \", properties);\n+        assertTrue(cName1.equals(cName2));\n+        assertTrue(cName2.equals(cName1));\n+        assertEquals(0, cName1.compareTo(cName2));\n+        assertEquals(0, cName2.compareTo(cName1));\n+\n+        // true-false\n+        properties.setProperty(key, \"false\");\n+        cName2 = new CompoundName(\" cName \", properties);\n+        assertTrue(cName1.equals(cName2));\n+        assertFalse(cName2.equals(cName1));\n+        assertEquals(0, cName1.compareTo(cName2));\n+        assertTrue(cName2.compareTo(cName1) > 0);\n+\n+        // false-false\n+        cName1 = new CompoundName(\" cName\", properties);\n+        assertFalse(cName1.equals(cName2));\n+        assertFalse(cName2.equals(cName1));\n+        assertTrue(cName1.compareTo(cName2) < 0);\n+        assertTrue(cName2.compareTo(cName1) > 0);\n+    }\n }",
                "raw_url": "https://github.com/apache/harmony/raw/3594b623e8635ef7734fcdaae74cae7fbea2bf0d/classlib/modules/jndi/src/test/java/org/apache/harmony/jndi/tests/javax/naming/CompoundNameTest.java",
                "sha": "c37732fa88c0fe1820b7da80c0324f52a1251365",
                "status": "modified"
            }
        ],
        "message": "javax.naming.CompoundName.hashCode()/toString()/equals()/compareTo()/startsWith()/endsWith() should throw NullPointerException when it has NULL element. In addition, attach several tests for coverage and refine CompoundName and CompoundNameTest code.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/java/trunk@957461 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/harmony/commit/a9955b6cbce007d27cbf5968430c32bf68a5ae16",
        "patched_files": [
            "CompoundName.java"
        ],
        "repo": "harmony",
        "unit_tests": [
            "CompoundNameTest.java"
        ]
    },
    "harmony_74d84b5": {
        "bug_id": "harmony_74d84b5",
        "commit": "https://github.com/apache/harmony/commit/74d84b5a8959c05ef3999650dfe343dfce41b17e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/harmony/blob/74d84b5a8959c05ef3999650dfe343dfce41b17e/classlib/modules/luni/src/main/java/java/lang/String.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony/contents/classlib/modules/luni/src/main/java/java/lang/String.java?ref=74d84b5a8959c05ef3999650dfe343dfce41b17e",
                "deletions": 5,
                "filename": "classlib/modules/luni/src/main/java/java/lang/String.java",
                "patch": "@@ -492,11 +492,7 @@ public String(StringBuffer stringbuffer) {\n      */\n     public String(int[] codePoints, int offset, int count) {\n         super();\n-        if (codePoints == null) {\n-            throw new NullPointerException();\n-        }\n-        if (offset < 0 || count < 0\n-                || (long) offset + (long) count > codePoints.length) {\n+        if (offset < 0 || count < 0 || offset > codePoints.length - count) {\n             throw new IndexOutOfBoundsException();\n         }\n         this.offset = 0;",
                "raw_url": "https://github.com/apache/harmony/raw/74d84b5a8959c05ef3999650dfe343dfce41b17e/classlib/modules/luni/src/main/java/java/lang/String.java",
                "sha": "f1762b84e94c0620524ebb68b7f5efc14af371f2",
                "status": "modified"
            }
        ],
        "message": "Remove another explicit NPE.  I'm not re-ordering the bounds checking\nhere as it turns out:\n\n      String s = new String((int[])null, -1, 0);\n\nand:\n\n      String s = new String((int[])null, 0, -1);\n\non the RI throw IndexOutOfBoundsException not NullPointerException.\nSo the behaviour before did not match the RI.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/java/trunk@1005651 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/harmony/commit/0fafb31d1198c8e311f5876fcf93daee063ceee2",
        "patched_files": [
            "String.java"
        ],
        "repo": "harmony",
        "unit_tests": [
            "StringTest.java"
        ]
    },
    "harmony_a9955b6": {
        "bug_id": "harmony_a9955b6",
        "commit": "https://github.com/apache/harmony/commit/a9955b6cbce007d27cbf5968430c32bf68a5ae16",
        "file": [
            {
                "additions": 101,
                "blob_url": "https://github.com/apache/harmony/blob/a9955b6cbce007d27cbf5968430c32bf68a5ae16/classlib/modules/jndi/src/main/java/javax/naming/CompositeName.java",
                "changes": 195,
                "contents_url": "https://api.github.com/repos/apache/harmony/contents/classlib/modules/jndi/src/main/java/javax/naming/CompositeName.java?ref=a9955b6cbce007d27cbf5968430c32bf68a5ae16",
                "deletions": 94,
                "filename": "classlib/modules/jndi/src/main/java/javax/naming/CompositeName.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.io.ObjectOutputStream;\n import java.io.OptionalDataException;\n import java.util.Enumeration;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Vector;\n \n@@ -203,41 +204,40 @@ public CompositeName(String name) throws InvalidNameException {\n      */\n     private static Vector<String> parseName(String name)\n             throws InvalidNameException {\n-\n-        Vector<String> l = new Vector<String>();\n-\n+        Vector<String> result = new Vector<String>();\n         // special case: all '/', means same number of empty elements\n         if (isAllSlash(name)) {\n-            for (int i = 0; i < name.length(); i++) {\n-                l.add(\"\"); //$NON-NLS-1$\n+            int length = name.length();\n+            for (int index = 0; index < length; index++) {\n+                result.add(\"\"); //$NON-NLS-1$\n             }\n-            return l;\n+            return result;\n         }\n \n         // general simple case, without escape and quote\n         if (name.indexOf('\"') < 0 && name.indexOf('\\'') < 0\n                 && name.indexOf('\\\\') < 0) {\n             int i = 0, j = 0;\n             while ((j = name.indexOf('/', i)) >= 0) {\n-                l.add(name.substring(i, j));\n+                result.add(name.substring(i, j));\n                 i = j + 1;\n             }\n-            l.add(name.substring(i));\n-            return l;\n+            result.add(name.substring(i));\n+            return result;\n         }\n \n         // general complicated case, consider escape and quote\n-        char c;\n+        char curC, nextC;\n         char chars[] = name.toCharArray();\n         StringBuilder buf = new StringBuilder();\n         int status = OUT_OF_QUOTE;\n-        for (int i = 0; i < chars.length; i++) {\n-            c = chars[i];\n+        for (int index = 0; index < chars.length; index++) {\n+            curC = chars[index];\n \n             // check end quote violation\n             if (status == QUOTE_ENDED) {\n-                if (c == '/') {\n-                    l.add(buf.toString());\n+                if (curC == '/') {\n+                    result.add(buf.toString());\n                     buf.setLength(0);\n                     status = OUT_OF_QUOTE;\n                     continue;\n@@ -246,15 +246,16 @@ public CompositeName(String name) throws InvalidNameException {\n                 throw new InvalidNameException(Messages.getString(\"jndi.0C\")); //$NON-NLS-1$\n             }\n \n-            if (c == '\\\\') {\n+            if (curC == '\\\\') {\n                 // escape char\n                 try {\n-                    char nc = chars[++i];\n-                    if (nc == '\\\\' || nc == '\\'' || nc == '\"' || nc == '/') {\n-                        buf.append(nc);\n+                    nextC = chars[++index];\n+                    if (nextC == '\\\\' || nextC == '\\'' || nextC == '\"'\n+                            || nextC == '/') {\n+                        buf.append(nextC);\n                     } else {\n-                        buf.append(c);\n-                        buf.append(nc);\n+                        buf.append(curC);\n+                        buf.append(nextC);\n                     }\n                 } catch (ArrayIndexOutOfBoundsException e) {\n                     // jndi.0D=Escape cannot be at the end of element\n@@ -263,41 +264,44 @@ public CompositeName(String name) throws InvalidNameException {\n                 }\n                 continue;\n             }\n-            if (c != '/' && c != '\"' && c != '\\'') {\n+            if (curC != '/' && curC != '\"' && curC != '\\'') {\n                 // normal char\n-                buf.append(c);\n+                buf.append(curC);\n                 continue;\n             }\n \n             // special char\n-            if (status == OUT_OF_QUOTE && c == '/') {\n-                l.add(buf.toString());\n+            if (status == OUT_OF_QUOTE && curC == '/') {\n+                result.add(buf.toString());\n                 buf.setLength(0);\n-            } else if (status == OUT_OF_QUOTE && c == '\\'' && buf.length() == 0) {\n+            } else if (status == OUT_OF_QUOTE && curC == '\\''\n+                    && buf.length() == 0) {\n                 status = IN_SINGLE_QUOTE;\n-            } else if (status == OUT_OF_QUOTE && c == '\"' && buf.length() == 0) {\n+            } else if (status == OUT_OF_QUOTE && curC == '\"'\n+                    && buf.length() == 0) {\n                 status = IN_DOUBLE_QUOTE;\n-            } else if (status == IN_SINGLE_QUOTE && c == '\\'') {\n+            } else if (status == IN_SINGLE_QUOTE && curC == '\\'') {\n                 status = QUOTE_ENDED;\n-            } else if (status == IN_DOUBLE_QUOTE && c == '\"') {\n+            } else if (status == IN_DOUBLE_QUOTE && curC == '\"') {\n                 status = QUOTE_ENDED;\n             } else {\n-                buf.append(c);\n+                buf.append(curC);\n             }\n         }\n-        l.add(buf.toString());\n+        result.add(buf.toString());\n \n         // check end status\n         if (status != OUT_OF_QUOTE && status != QUOTE_ENDED) {\n             // jndi.0E=Wrong quote usage.\n             throw new InvalidNameException(Messages.getString(\"jndi.0E\")); //$NON-NLS-1$\n         }\n-        return l;\n+        return result;\n     }\n \n     private static boolean isAllSlash(String name) {\n-        for (int i = 0; i < name.length(); i++) {\n-            if (name.charAt(i) != '/') {\n+        char[] nameChars = name.toCharArray();\n+        for (int index = 0; index < nameChars.length; index++) {\n+            if (nameChars[index] != '/') {\n                 return false;\n             }\n         }\n@@ -308,39 +312,39 @@ private static boolean isAllSlash(String name) {\n      * Format name elements to its string representation.\n      */\n     private static String formatName(Vector<String> elems) {\n-        // special case: all empty elements\n+        StringBuilder sb = new StringBuilder();\n+        int elemSize = elems.size();\n         if (isAllEmptyElements(elems)) {\n-            StringBuilder buf = new StringBuilder();\n-            for (int i = 0; i < elems.size(); i++) {\n-                buf.append(\"/\"); //$NON-NLS-1$\n+            // special case: all empty elements\n+            for (int index = 0; index < elemSize; index++) {\n+                sb.append('/');\n             }\n-            return buf.toString();\n+            return sb.toString();\n         }\n \n         // general case\n-        StringBuilder buf = new StringBuilder();\n-        for (int i = 0; i < elems.size(); i++) {\n-            String elem = elems.get(i);\n-            if (i > 0) {\n-                buf.append(\"/\"); //$NON-NLS-1$\n+        String elem = null;\n+        for (int index = 0; index < elemSize; index++) {\n+            elem = elems.get(index);\n+            if (index > 0) {\n+                sb.append('/'); //$NON-NLS-1$\n             }\n-            \n-            // Add quotation while elem contains separater char\n-            if (elem.indexOf('/') != -1){\n-                buf.append(\"\\\"\");\n-                buf.append(elem);\n-                buf.append(\"\\\"\");\n-            }else{\n-                buf.append(elem);\n+            // Add quotation while elem contains separator char\n+            if (elem.indexOf('/') != -1) {\n+                sb.append('\\\"');\n+                sb.append(elem);\n+                sb.append('\\\"');\n+            } else {\n+                sb.append(elem);\n             }\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n \n     private static boolean isAllEmptyElements(Vector<String> elems) {\n-        for (int i = 0; i < elems.size(); i++) {\n-            String elem = elems.get(i);\n-            if (elem.length() > 0) {\n+        int elemSize = elems.size();\n+        for (int index = 0; index < elemSize; index++) {\n+            if (elems.get(index).length() > 0) {\n                 return false;\n             }\n         }\n@@ -436,19 +440,14 @@ public boolean startsWith(Name name) {\n         if (!(name instanceof CompositeName)) {\n             return false;\n         }\n-\n         // check size\n         if (name.size() > elems.size()) {\n             return false;\n         }\n-\n         // compare 1 by 1\n         Enumeration<String> enumeration = name.getAll();\n-        String me, he;\n-        for (int i = 0; enumeration.hasMoreElements(); i++) {\n-            me = elems.get(i);\n-            he = enumeration.nextElement();\n-            if (!(null == me ? null == he : me.equals(he))) {\n+        for (int index = 0; enumeration.hasMoreElements(); index++) {\n+            if (!elems.get(index).equals(enumeration.nextElement())) {\n                 return false;\n             }\n         }\n@@ -459,19 +458,16 @@ public boolean endsWith(Name name) {\n         if (!(name instanceof CompositeName)) {\n             return false;\n         }\n-\n         // check size\n         if (name.size() > elems.size()) {\n             return false;\n         }\n \n         // compare 1 by 1\n         Enumeration<String> enumeration = name.getAll();\n-        String me, he;\n-        for (int i = elems.size() - name.size(); enumeration.hasMoreElements(); i++) {\n-            me = elems.get(i);\n-            he = enumeration.nextElement();\n-            if (!(null == me ? null == he : me.equals(he))) {\n+        for (int index = elems.size() - name.size(); enumeration\n+                .hasMoreElements(); index++) {\n+            if (!elems.get(index).equals(enumeration.nextElement())) {\n                 return false;\n             }\n         }\n@@ -495,24 +491,29 @@ public boolean endsWith(Name name) {\n      *             when <code>o</code> is not a <code>CompositeName</code>.\n      */\n     public int compareTo(Object o) {\n-        if (o instanceof CompositeName) {\n-            CompositeName he = (CompositeName) o;\n-            int r;\n-            for (int i = 0; i < elems.size() && i < he.elems.size(); i++) {\n-                r = (elems.get(i)).compareTo(he.elems.get(i));\n-                if (r != 0) {\n-                    return r;\n-                }\n-            }\n-            if (elems.size() == he.elems.size()) {\n-                return 0;\n-            } else if (elems.size() < he.elems.size()) {\n-                return -1;\n-            } else {\n-                return 1;\n+        if (o == this) {\n+            return 0;\n+        }\n+        if (!(o instanceof CompositeName)) {\n+            throw new ClassCastException();\n+        }\n+\n+        Iterator<String> thisIter = elems.iterator();\n+        Iterator<String> thatIter = ((CompositeName) o).elems.iterator();\n+        int compareResult;\n+        while (thisIter.hasNext() && thatIter.hasNext()) {\n+            compareResult = thisIter.next().compareTo(thatIter.next());\n+            if (0 != compareResult) {\n+                return compareResult;\n             }\n         }\n-        throw new ClassCastException();\n+        if (thisIter.hasNext()) {\n+            return 1;\n+        }\n+        if (thatIter.hasNext()) {\n+            return -1;\n+        }\n+        return 0;\n     }\n \n     /**\n@@ -553,16 +554,23 @@ public String toString() {\n      */\n     @Override\n     public boolean equals(Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-\n         // check type\n         if (!(o instanceof CompositeName)) {\n             return false;\n         }\n+        CompositeName that = (CompositeName) o;\n+        if (this.size() != that.size()) {\n+            return false;\n+        }\n \n-        return this.elems.equals(((CompositeName) o).elems);\n+        Iterator<String> thisIter = elems.iterator();\n+        Iterator<String> thatIter = that.elems.iterator();\n+        while (thisIter.hasNext() && thatIter.hasNext()) {\n+            if (!thisIter.next().equals(thatIter.next())) {\n+                return false;\n+            }\n+        }\n+        return true;\n     }\n \n     /**\n@@ -573,11 +581,11 @@ public boolean equals(Object o) {\n      */\n     @Override\n     public int hashCode() {\n-        int sum = 0;\n-        for (int i = 0; i < elems.size(); i++) {\n-            sum += elems.get(i).hashCode();\n+        int hashCode = 0;\n+        for (int index = 0; index < elems.size(); index++) {\n+            hashCode += elems.get(index).hashCode();\n         }\n-        return sum;\n+        return hashCode;\n     }\n \n     /**\n@@ -616,5 +624,4 @@ private void readObject(ObjectInputStream ois)\n             elems.add((String) ois.readObject());\n         }\n     }\n-\n }",
                "raw_url": "https://github.com/apache/harmony/raw/a9955b6cbce007d27cbf5968430c32bf68a5ae16/classlib/modules/jndi/src/main/java/javax/naming/CompositeName.java",
                "sha": "dc2ab66e34aafebccc0c5523ef9b4ceaf95b4fe3",
                "status": "modified"
            },
            {
                "additions": 99,
                "blob_url": "https://github.com/apache/harmony/blob/a9955b6cbce007d27cbf5968430c32bf68a5ae16/classlib/modules/jndi/src/test/java/org/apache/harmony/jndi/tests/javax/naming/CompositeNameTest.java",
                "changes": 100,
                "contents_url": "https://api.github.com/repos/apache/harmony/contents/classlib/modules/jndi/src/test/java/org/apache/harmony/jndi/tests/javax/naming/CompositeNameTest.java?ref=a9955b6cbce007d27cbf5968430c32bf68a5ae16",
                "deletions": 1,
                "filename": "classlib/modules/jndi/src/test/java/org/apache/harmony/jndi/tests/javax/naming/CompositeNameTest.java",
                "patch": "@@ -22,13 +22,15 @@\n import java.io.ObjectOutputStream;\n import java.util.Enumeration;\n import java.util.Properties;\n+import java.util.Vector;\n \n import javax.naming.CompositeName;\n import javax.naming.CompoundName;\n import javax.naming.InvalidNameException;\n import javax.naming.Name;\n \n import junit.framework.TestCase;\n+\n import org.apache.harmony.jndi.tests.javax.naming.util.Log;\n \n /**\n@@ -721,11 +723,107 @@ public void testConstructorEnum() {\n \t}\n \n \t// mock class to test protected methods\n-\tpublic class MockCompositeName extends CompositeName {\n+\tpublic static class MockCompositeName extends CompositeName {\n         private static final long serialVersionUID = 1L;\n \n+        public MockCompositeName(String name) throws InvalidNameException {\n+            super(name);\n+        }\n+\n         public MockCompositeName(Enumeration<String> enumeration) {\n \t\t\tsuper(enumeration);\n \t\t}\n \t}\n+\n+    private static MockCompositeName nullName;\n+\n+    private static MockCompositeName nullName2;\n+\n+    private static MockCompositeName sampleName;\n+\n+    static {\n+        Vector<String> elems = new Vector<String>();\n+        elems.add(null);\n+        nullName = new MockCompositeName(elems.elements());\n+        elems.add(null);\n+        nullName2 = new MockCompositeName(elems.elements());\n+        try {\n+            sampleName = new MockCompositeName(\"sample\");\n+        } catch (InvalidNameException e) {\n+            // Ignored\n+        }\n+    }\n+\n+    public void testEquals_NPE() throws InvalidNameException {\n+        try {\n+            nullName.equals(nullName);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+        assertFalse(nullName.equals(nullName2));\n+        assertFalse(nullName2.equals(nullName));\n+\n+        try {\n+            nullName.equals(sampleName);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+        assertFalse(sampleName.equals(nullName));\n+    }\n+\n+    public void testCompareTo_NPE() throws InvalidNameException {\n+        assertEquals(0, nullName.compareTo(nullName));\n+        try {\n+            nullName.compareTo(sampleName);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+        try {\n+            sampleName.compareTo(nullName);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void testToString_NPE() {\n+        try {\n+            nullName.toString();\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void testHashCode_NPE() {\n+        try {\n+            nullName.hashCode();\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void testStartsWith_NPE() {\n+        try {\n+            nullName.startsWith(sampleName);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+        assertFalse(sampleName.startsWith(nullName));\n+    }\n+\n+    public void testEndsWith_NPE() {\n+        try {\n+            nullName.endsWith(sampleName);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+        assertFalse(sampleName.endsWith(nullName));\n+    }\n }",
                "raw_url": "https://github.com/apache/harmony/raw/a9955b6cbce007d27cbf5968430c32bf68a5ae16/classlib/modules/jndi/src/test/java/org/apache/harmony/jndi/tests/javax/naming/CompositeNameTest.java",
                "sha": "09f957cc3c1ff9f3e31de75181e5582908903200",
                "status": "modified"
            }
        ],
        "message": "javax.naming.CompositeName.hashCode()/toString()/equals()/compareTo()/startsWith()/endsWith() should throw NullPointerException when it contains NULL element. In addition, attach several tests for coverage and refine CompositeName and CompositeNameTest code.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/java/trunk@957458 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/harmony/commit/23e44405436967981e87b4ee35ea034e6c98489b",
        "patched_files": [
            "CompositeName.java"
        ],
        "repo": "harmony",
        "unit_tests": [
            "CompositeNameTest.java"
        ]
    },
    "harmony_c8f39aa": {
        "bug_id": "harmony_c8f39aa",
        "commit": "https://github.com/apache/harmony/commit/c8f39aa26abf6d71fe047ac2804eb4a5e3ef1f0e",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/harmony/blob/c8f39aa26abf6d71fe047ac2804eb4a5e3ef1f0e/classlib/modules/logging/src/main/java/java/util/logging/FileHandler.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/harmony/contents/classlib/modules/logging/src/main/java/java/util/logging/FileHandler.java?ref=c8f39aa26abf6d71fe047ac2804eb4a5e3ef1f0e",
                "deletions": 6,
                "filename": "classlib/modules/logging/src/main/java/java/util/logging/FileHandler.java",
                "patch": "@@ -277,14 +277,15 @@ private String parseFileName(int gen) {\n         boolean hasGeneration = false;\n \n         // TODO privilege code?\n+        String homePath = System.getProperty(\"user.home\"); //$NON-NLS-1$\n+        if (homePath == null) {\n+            throw new NullPointerException();\n+        }\n+        boolean homePathHasSepEnd = homePath.endsWith(File.separator);\n \n         String tempPath = System.getProperty(\"java.io.tmpdir\"); //$NON-NLS-1$\n-        boolean tempPathHasSepEnd = (tempPath == null ? false : tempPath\n-                .endsWith(File.separator));\n-\n-        String homePath = System.getProperty(\"user.home\"); //$NON-NLS-1$\n-        boolean homePathHasSepEnd = (homePath == null ? false : homePath\n-                .endsWith(File.separator));\n+        tempPath = tempPath == null ? homePath : tempPath;\n+        boolean tempPathHasSepEnd = tempPath.endsWith(File.separator);\n \n         StringBuilder sb = new StringBuilder();\n         pattern = pattern.replace('/', File.separatorChar);",
                "raw_url": "https://github.com/apache/harmony/raw/c8f39aa26abf6d71fe047ac2804eb4a5e3ef1f0e/classlib/modules/logging/src/main/java/java/util/logging/FileHandler.java",
                "sha": "a81db3e2c764d4be055219c41b2202090a5aaa44",
                "status": "modified"
            },
            {
                "additions": 55,
                "blob_url": "https://github.com/apache/harmony/blob/c8f39aa26abf6d71fe047ac2804eb4a5e3ef1f0e/classlib/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/FileHandlerTest.java",
                "changes": 57,
                "contents_url": "https://api.github.com/repos/apache/harmony/contents/classlib/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/FileHandlerTest.java?ref=c8f39aa26abf6d71fe047ac2804eb4a5e3ef1f0e",
                "deletions": 2,
                "filename": "classlib/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/FileHandlerTest.java",
                "patch": "@@ -60,9 +60,13 @@\n \n     final static SecurityManager securityManager = new MockLogSecurityManager();\n \n-    final static String HOMEPATH = System.getProperty(\"user.home\");\n+    final static String USR_HOME_KEY = \"user.home\";\n \n-    final static String TEMPPATH = System.getProperty(\"java.io.tmpdir\");\n+    final static String TMP_DIR_KEY = \"java.io.tmpdir\";\n+\n+    final static String HOMEPATH = System.getProperty(USR_HOME_KEY);\n+\n+    final static String TEMPPATH = System.getProperty(TMP_DIR_KEY);\n \n     final static String SEP = File.separator;\n \n@@ -125,6 +129,55 @@ protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n \n+    public void testConstructor_NoUsrHome() throws IOException {\n+        System.clearProperty(USR_HOME_KEY);\n+\n+        try {\n+            new FileHandler(\"%h/log_NoUsrHome.log\");\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        } finally {\n+            if (HOMEPATH != null) {\n+                System.setProperty(USR_HOME_KEY, HOMEPATH);\n+            }\n+        }\n+    }\n+\n+    public void testConstructor_NoTmpDir() throws IOException {\n+        System.clearProperty(TMP_DIR_KEY);\n+\n+        try {\n+            new FileHandler(\"%t/log_NoTmpDir.log\");\n+        } finally {\n+            if (TEMPPATH != null) {\n+                System.setProperty(TMP_DIR_KEY, TEMPPATH);\n+            }\n+        }\n+        assertFalse(new File(TEMPPATH, \"log_NoTmpDir.log\").exists());\n+        assertTrue(new File(HOMEPATH, \"log_NoTmpDir.log\").exists());\n+        new File(HOMEPATH, \"log_NoTmpDir.log\").delete();\n+    }\n+\n+    public void testConstructor_NoTmpDir_NoUsrHome() throws IOException {\n+        System.clearProperty(TMP_DIR_KEY);\n+        System.clearProperty(USR_HOME_KEY);\n+\n+        try {\n+            new FileHandler(\"%t/log_NoTmpDir_NoUsrHome.log\");\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        } finally {\n+            if (TEMPPATH != null) {\n+                System.setProperty(TMP_DIR_KEY, TEMPPATH);\n+            }\n+            if (HOMEPATH != null) {\n+                System.setProperty(USR_HOME_KEY, HOMEPATH);\n+            }\n+        }\n+    }\n+\n     public void testLock() throws Exception {\n         FileOutputStream output = new FileOutputStream(TEMPPATH + SEP + \"log\"\n                 + SEP + \"java1.test.0\");",
                "raw_url": "https://github.com/apache/harmony/raw/c8f39aa26abf6d71fe047ac2804eb4a5e3ef1f0e/classlib/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/FileHandlerTest.java",
                "sha": "22c319ef9c6fb4180e849505411be8590e11d33f",
                "status": "modified"
            }
        ],
        "message": "When including %t in pattern of FileHandler class and java.io.tmpdir system property is null, HY throws FileNotFoundException while RI doesn't.\\nWhen including %h in pattern of FileHandler class and user.home system property is null, HY throws FileNotFoundException while RI throws NullPointerException.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/java/trunk@935099 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/harmony/commit/77eadcf530caf3a252eb8e663177822f96464b66",
        "patched_files": [
            "FileHandler.java"
        ],
        "repo": "harmony",
        "unit_tests": [
            "FileHandlerTest.java"
        ]
    },
    "harmony_d20af9b": {
        "bug_id": "harmony_d20af9b",
        "commit": "https://github.com/apache/harmony/commit/d20af9ba885809a729ae3dec3b25a6fa59d51a9a",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/harmony/blob/d20af9ba885809a729ae3dec3b25a6fa59d51a9a/classlib/modules/lang-management/src/main/java/java/lang/management/ThreadInfo.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony/contents/classlib/modules/lang-management/src/main/java/java/lang/management/ThreadInfo.java?ref=d20af9ba885809a729ae3dec3b25a6fa59d51a9a",
                "deletions": 1,
                "filename": "classlib/modules/lang-management/src/main/java/java/lang/management/ThreadInfo.java",
                "patch": "@@ -101,6 +101,10 @@ public static ThreadInfo from(CompositeData cd) {\n             Object[] attributeVals = cd.getAll(attributeNames);\n             long threadIdVal = ((Long) attributeVals[0]).longValue();\n             String threadNameVal = (String) attributeVals[1];\n+            if (threadNameVal == null) {\n+                throw new IllegalArgumentException(\n+                        \"Invalid composite data: Attribute threadName has null value\"); //$NON-NLS-1$\n+            }\n             String threadStateStringVal = (String) attributeVals[2];\n \n             // Verify that threadStateStringVal contains a string that can be\n@@ -126,8 +130,10 @@ public static ThreadInfo from(CompositeData cd) {\n             String lockOwnerNameVal = attributeVals[11] != null ? (String) attributeVals[11]\n                     : null;\n             CompositeData[] stackTraceDataVal = (CompositeData[]) attributeVals[12];\n+            if (stackTraceDataVal == null) {\n+                throw new IllegalArgumentException(\"StackTraceElement[] is missing\"); //$NON-NLS-1$\n+            }\n             StackTraceElement[] stackTraceVals = getStackTracesFromCompositeData(stackTraceDataVal);\n-\n             result = new ThreadInfo(threadIdVal, threadNameVal, threadStateVal,\n                     suspendedVal, inNativeVal, blockedCountVal, blockedTimeVal,\n                     waitedCountVal, waitedTimeVal, lockNameVal, lockOwnerIdVal,",
                "raw_url": "https://github.com/apache/harmony/raw/d20af9ba885809a729ae3dec3b25a6fa59d51a9a/classlib/modules/lang-management/src/main/java/java/lang/management/ThreadInfo.java",
                "sha": "3c329eca2179aa0c82b59390b00955200058e4bc",
                "status": "modified"
            },
            {
                "additions": 389,
                "blob_url": "https://github.com/apache/harmony/blob/d20af9ba885809a729ae3dec3b25a6fa59d51a9a/classlib/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/ThreadInfoTest.java",
                "changes": 389,
                "contents_url": "https://api.github.com/repos/apache/harmony/contents/classlib/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/ThreadInfoTest.java?ref=d20af9ba885809a729ae3dec3b25a6fa59d51a9a",
                "deletions": 0,
                "filename": "classlib/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/ThreadInfoTest.java",
                "patch": "@@ -88,6 +88,8 @@\n \n     private static final String GOOD_LOCK_NAME = \"foo.Bar@1234567\";\n \n+    private static final String GOOD_THREADINFO_CLASSNAME = ThreadInfo.class.getName();\n+\n     private CompositeData tiCD;\n \n     private ThreadInfo ti;\n@@ -364,6 +366,393 @@ public void test_from_fields() throws Exception {\n         }\n     }\n \n+    private static final Object stackTraceElementData = createGoodStackTraceCompositeData();\n+\n+    private static final CompositeType stackTraceElementType = createGoodStackTraceElementCompositeType();\n+\n+    private String[] initialNames = { \"threadId\", \"threadName\", \"threadState\",\n+            \"suspended\", \"inNative\", \"blockedCount\", \"blockedTime\",\n+            \"waitedCount\", \"waitedTime\", \"lockName\", \"lockOwnerId\",\n+            \"lockOwnerName\", \"stackTrace\", \"additionalName\" };\n+\n+    private Object[] initialValues = { 1L, \"threadName\",\n+            GOOD_THREAD_STATE.toString(), true, false, 1L, 500L, 1L, 1L,\n+            \"lock\", 2L, \"lockOwner\", stackTraceElementData, \"additionalValue\" };\n+\n+    public void test_from_scenario1() throws Exception {\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        ThreadInfo threadInfo = ThreadInfo.from(data);\n+        assertEquals(initialValues[0], threadInfo.getThreadId());\n+        assertEquals(initialValues[1], threadInfo.getThreadName());\n+        assertEquals(GOOD_THREAD_STATE, threadInfo.getThreadState());\n+        assertEquals(initialValues[3], threadInfo.isSuspended());\n+        assertEquals(initialValues[4], threadInfo.isInNative());\n+        assertEquals(initialValues[5], threadInfo.getBlockedCount());\n+        assertEquals(initialValues[6], threadInfo.getBlockedTime());\n+        assertEquals(initialValues[7], threadInfo.getWaitedCount());\n+        assertEquals(initialValues[8], threadInfo.getWaitedTime());\n+        assertEquals(initialValues[9], threadInfo.getLockName());\n+        assertEquals(initialValues[10], threadInfo.getLockOwnerId());\n+        assertEquals(initialValues[11], threadInfo.getLockOwnerName());\n+        StackTraceElement[] stackElements = threadInfo.getStackTrace();\n+        assertEquals(GOOD_STACK_SIZE, stackElements.length);\n+        for (StackTraceElement element : stackElements) {\n+            assertEquals(GOOD_STACK_CLASSNAME, element.getClassName());\n+            assertEquals(GOOD_STACK_NATIVEMETHOD, element.isNativeMethod());\n+            assertEquals(GOOD_STACK_FILENAME, element.getFileName());\n+            assertEquals(GOOD_STACK_LINENUMBER, element.getLineNumber());\n+            assertEquals(GOOD_STACK_METHODNAME, element.getMethodName());\n+        }\n+    }\n+\n+    public void test_from_scenario2() throws Exception {\n+        initialValues[0] = \"1\";\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.STRING, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario3() throws Exception {\n+        int length = 10;\n+        String[] names = new String[length];\n+        for (int index = 0; index < length; index++) {\n+            names[index] = initialNames[index];\n+        }\n+        Object[] values = new Object[length];\n+        for (int index = 0; index < length; index++) {\n+            values[index] = initialValues[index];\n+        }\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(names, types);\n+        CompositeData data = new CompositeDataSupport(compositeType, names,\n+                values);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+\n+        values[0] = null;\n+        compositeType = getCompositeType(names, types);\n+        data = new CompositeDataSupport(compositeType, names, values);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario4() throws Exception {\n+        initialValues[0] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario5() throws Exception {\n+        initialValues[1] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario6() throws Exception {\n+        initialValues[2] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario7() throws Exception {\n+        initialValues[3] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario8() throws Exception {\n+        initialValues[4] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario9() throws Exception {\n+        initialValues[5] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario10() throws Exception {\n+        initialValues[6] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario11() throws Exception {\n+        initialValues[7] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario12() throws Exception {\n+        initialValues[8] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario13() throws Exception {\n+        initialValues[9] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        ThreadInfo threadInfo = ThreadInfo.from(data);\n+        assertEquals(initialValues[0], threadInfo.getThreadId());\n+        assertEquals(initialValues[1], threadInfo.getThreadName());\n+        assertEquals(GOOD_THREAD_STATE, threadInfo.getThreadState());\n+        assertEquals(initialValues[3], threadInfo.isSuspended());\n+        assertEquals(initialValues[4], threadInfo.isInNative());\n+        assertEquals(initialValues[5], threadInfo.getBlockedCount());\n+        assertEquals(initialValues[6], threadInfo.getBlockedTime());\n+        assertEquals(initialValues[7], threadInfo.getWaitedCount());\n+        assertEquals(initialValues[8], threadInfo.getWaitedTime());\n+        assertNull(threadInfo.getLockName());\n+        assertEquals(initialValues[10], threadInfo.getLockOwnerId());\n+        assertEquals(initialValues[11], threadInfo.getLockOwnerName());\n+        StackTraceElement[] stackElements = threadInfo.getStackTrace();\n+        assertEquals(GOOD_STACK_SIZE, stackElements.length);\n+        for (StackTraceElement element : stackElements) {\n+            assertEquals(GOOD_STACK_CLASSNAME, element.getClassName());\n+            assertEquals(GOOD_STACK_NATIVEMETHOD, element.isNativeMethod());\n+            assertEquals(GOOD_STACK_FILENAME, element.getFileName());\n+            assertEquals(GOOD_STACK_LINENUMBER, element.getLineNumber());\n+            assertEquals(GOOD_STACK_METHODNAME, element.getMethodName());\n+        }\n+    }\n+\n+    public void test_from_scenario14() throws Exception {\n+        initialValues[10] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario15() throws Exception {\n+        initialValues[11] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        ThreadInfo.from(data);\n+        ThreadInfo threadInfo = ThreadInfo.from(data);\n+        assertEquals(initialValues[0], threadInfo.getThreadId());\n+        assertEquals(initialValues[1], threadInfo.getThreadName());\n+        assertEquals(GOOD_THREAD_STATE, threadInfo.getThreadState());\n+        assertEquals(initialValues[3], threadInfo.isSuspended());\n+        assertEquals(initialValues[4], threadInfo.isInNative());\n+        assertEquals(initialValues[5], threadInfo.getBlockedCount());\n+        assertEquals(initialValues[6], threadInfo.getBlockedTime());\n+        assertEquals(initialValues[7], threadInfo.getWaitedCount());\n+        assertEquals(initialValues[8], threadInfo.getWaitedTime());\n+        assertEquals(initialValues[9], threadInfo.getLockName());\n+        assertEquals(initialValues[10], threadInfo.getLockOwnerId());\n+        assertNull(threadInfo.getLockOwnerName());\n+        StackTraceElement[] stackElements = threadInfo.getStackTrace();\n+        assertEquals(GOOD_STACK_SIZE, stackElements.length);\n+        for (StackTraceElement element : stackElements) {\n+            assertEquals(GOOD_STACK_CLASSNAME, element.getClassName());\n+            assertEquals(GOOD_STACK_NATIVEMETHOD, element.isNativeMethod());\n+            assertEquals(GOOD_STACK_FILENAME, element.getFileName());\n+            assertEquals(GOOD_STACK_LINENUMBER, element.getLineNumber());\n+            assertEquals(GOOD_STACK_METHODNAME, element.getMethodName());\n+        }\n+    }\n+\n+    public void test_from_scenario16() throws Exception {\n+        initialValues[12] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+    }\n+\n+    protected CompositeType getCompositeType(String[] typeNames,\n+            OpenType[] typeTypes) throws Exception {\n+        return new CompositeType(GOOD_THREADINFO_CLASSNAME,\n+                GOOD_THREADINFO_CLASSNAME, typeNames, typeNames, typeTypes);\n+    }\n+\n     String getGoodToStringVal() {\n         StringBuilder result = new StringBuilder();\n         result.append(\"Thread \" + GOOD_THREAD_NAME + \" (Id = \" + GOOD_THREAD_ID",
                "raw_url": "https://github.com/apache/harmony/raw/d20af9ba885809a729ae3dec3b25a6fa59d51a9a/classlib/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/ThreadInfoTest.java",
                "sha": "bb8dbcde134f2d4f25c4001109116ab4ddc1ad4d",
                "status": "modified"
            }
        ],
        "message": "Fix 2 NPE problems in java.lang.management.ThreadInfo code, add many test case for coverage.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/java/trunk@932328 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/harmony/commit/ebc6ce2b0a49ebc6793bbe8d28c808d107871e1c",
        "patched_files": [
            "ThreadInfo.java"
        ],
        "repo": "harmony",
        "unit_tests": [
            "ThreadInfoTest.java"
        ]
    }
}