{
    "felix_0192fe4": {
        "bug_id": "felix_0192fe4",
        "commit": "https://github.com/apache/felix/commit/0192fe44ed1263035e02551267edd7d4d22f7427",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/felix/blob/0192fe44ed1263035e02551267edd7d4d22f7427/gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/Expression.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/Expression.java?ref=0192fe44ed1263035e02551267edd7d4d22f7427",
                "deletions": 1,
                "filename": "gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/Expression.java",
                "patch": "@@ -1048,7 +1048,7 @@ public BigDecimal eval(List<BigDecimal> parameters) {\n      * @return <code>true</code>, if the input string is a number.\n      */\n     private boolean isNumber(String st) {\n-        if (st.charAt(0) == minusSign && st.length() == 1)\n+        if (st == null || st.isEmpty() || st.charAt(0) == minusSign && st.length() == 1)\n             return false;\n         for (char ch : st.toCharArray()) {\n             if (!Character.isDigit(ch) && ch != minusSign",
                "raw_url": "https://github.com/apache/felix/raw/0192fe44ed1263035e02551267edd7d4d22f7427/gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/Expression.java",
                "sha": "e85f2c29f46a58c9d2cd790e8ecfae645b33d87d",
                "status": "modified"
            }
        ],
        "message": "[FELIX-5655] Possible NPE in Expression.isNumber when passing an empty string\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1799927 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/51cdd67c759daf49bcbdd6617469c07d7fe3a26a",
        "patched_files": [
            "Expression.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ExpressionTest.java"
        ]
    },
    "felix_0316b08": {
        "bug_id": "felix_0316b08",
        "commit": "https://github.com/apache/felix/commit/0316b089c0e2626a0f891b00cb11becef8284aa7",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/felix/blob/0316b089c0e2626a0f891b00cb11becef8284aa7/gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/Activator.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/Activator.java?ref=0316b089c0e2626a0f891b00cb11becef8284aa7",
                "deletions": 1,
                "filename": "gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/Activator.java",
                "patch": "@@ -53,6 +53,11 @@\n     private OSGiCommands commands;\n     private OSGiConverters converters;\n     private ServiceRegistration convertersRegistration;\n+    \n+    protected CommandProcessorImpl newProcessor(ThreadIO tio)\n+    {\n+        return new CommandProcessorImpl(threadio);\n+    }\n \n     public void start(final BundleContext context) throws Exception\n     {\n@@ -61,7 +66,7 @@ public void start(final BundleContext context) throws Exception\n         threadioRegistration = context.registerService(ThreadIO.class.getName(),\n             threadio, null);\n \n-        processor = new CommandProcessorImpl(threadio);\n+        processor = newProcessor(threadio);\n         processorRegistration = context.registerService(CommandProcessor.class.getName(),\n             processor, null);\n         ",
                "raw_url": "https://github.com/apache/felix/raw/0316b089c0e2626a0f891b00cb11becef8284aa7/gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/Activator.java",
                "sha": "75cee01b8a969d535aca506dacd754c845522bb2",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/felix/blob/0316b089c0e2626a0f891b00cb11becef8284aa7/gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/shell/Closure.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/shell/Closure.java?ref=0316b089c0e2626a0f891b00cb11becef8284aa7",
                "deletions": 1,
                "filename": "gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/shell/Closure.java",
                "patch": "@@ -45,6 +45,7 @@\n     private final Object script;\n \n     private Token errTok;\n+    private Token errTok2;\n     private List<Object> parms = null;\n     private List<Object> parmv = null;\n \n@@ -289,6 +290,11 @@ public Object executeStatement(List<Token> statement) throws Exception\n \n         List<Object> values = new ArrayList<Object>();\n         errTok = statement.get(0);\n+        \n+        if ((statement.size() > 3) && Type.ASSIGN.equals(statement.get(1).type))\n+        {\n+            errTok2 = statement.get(2);\n+        }\n \n         for (Token t : statement)\n         {\n@@ -352,7 +358,12 @@ private Object execute(Object cmd, List<Object> values) throws Exception\n                 }\n                 else\n                 {\n-                    value = execute(values.get(1), values.subList(2, values.size()));\n+                    cmd = values.get(1);\n+                    if (null == cmd)\n+                    {\n+                        throw new RuntimeException(\"Command name evaluates to null: \" + errTok2);\n+                    }\n+                    value = execute(cmd, values.subList(2, values.size()));\n                 }\n \n                 return assignment(scmd, value);",
                "raw_url": "https://github.com/apache/felix/raw/0316b089c0e2626a0f891b00cb11becef8284aa7/gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/shell/Closure.java",
                "sha": "8e84e79191b5892a523b60d4f2192cac92a5acdc",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/felix/blob/0316b089c0e2626a0f891b00cb11becef8284aa7/gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/shell/CommandProcessorImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/shell/CommandProcessorImpl.java?ref=0316b089c0e2626a0f891b00cb11becef8284aa7",
                "deletions": 2,
                "filename": "gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/shell/CommandProcessorImpl.java",
                "patch": "@@ -62,9 +62,9 @@ public void removeConverter(Converter c)\n         converters.remove(c);\n     }\n     \n-    public Map<String, Object> getCommands()\n+    public Set<String> getCommands()\n     {\n-        return commands;\n+        return commands.keySet();\n     }\n \n     public Function getCommand(String name)",
                "raw_url": "https://github.com/apache/felix/raw/0316b089c0e2626a0f891b00cb11becef8284aa7/gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/shell/CommandProcessorImpl.java",
                "sha": "a37546f333360e909c53d89d0ee2bb6424605133",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/felix/blob/0316b089c0e2626a0f891b00cb11becef8284aa7/gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/shell/CommandProxy.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/shell/CommandProxy.java?ref=0316b089c0e2626a0f891b00cb11becef8284aa7",
                "deletions": 1,
                "filename": "gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/shell/CommandProxy.java",
                "patch": "@@ -44,11 +44,16 @@ public CommandProxy(Object target, String function)\n         this.function = function;\n         this.target = target;\n     }\n+    \n+    public Object getTarget()\n+    {\n+        return (context != null ? context.getService(reference) : target);\n+    }\n \n     public Object execute(CommandSession session, List<Object> arguments)\n         throws Exception\n     {\n-        Object tgt = (context != null ? context.getService(reference) : target);\n+        Object tgt = getTarget();\n         \n         try\n         {",
                "raw_url": "https://github.com/apache/felix/raw/0316b089c0e2626a0f891b00cb11becef8284aa7/gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/shell/CommandProxy.java",
                "sha": "aca890c2213a149d233dfdaff4080417b930c250",
                "status": "modified"
            }
        ],
        "message": "fix NPE in session.execute(\"a = $b x\") when $b evaluates to null;\nfix session.get(\".commands\") to be list of command names, rather than map.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@943079 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/baf4be12bbf4f65891f2f641776633c9a5b62a12",
        "patched_files": [
            "Activator.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ActivatorTest.java"
        ]
    },
    "felix_0417970": {
        "bug_id": "felix_0417970",
        "commit": "https://github.com/apache/felix/commit/041797036e0a03e2e7986f0f20a8bd25cc26994d",
        "file": [
            {
                "additions": 59,
                "blob_url": "https://github.com/apache/felix/blob/041797036e0a03e2e7986f0f20a8bd25cc26994d/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java",
                "changes": 90,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java?ref=041797036e0a03e2e7986f0f20a8bd25cc26994d",
                "deletions": 31,
                "filename": "configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java",
                "patch": "@@ -138,7 +138,8 @@\n     private Map factories;\n \n     // the cache of Configuration instances mapped by their PID\n-    private Map configurations;\n+    // have this always set to prevent NPE on bundle shutdown\n+    private final Map configurations = new HashMap();\n \n     // the maximum log level when no LogService is available\n     private int logLevel = CM_LOG_LEVEL_DEFAULT;\n@@ -173,7 +174,6 @@ public void start( BundleContext bundleContext )\n         // set up some fields\n         this.bundleContext = bundleContext;\n         this.factories = new HashMap();\n-        this.configurations = new HashMap();\n \n         // configurationlistener support\n         configurationListenerTracker = new ServiceTracker( bundleContext, ConfigurationListener.class.getName(), null );\n@@ -205,8 +205,7 @@ public void start( BundleContext bundleContext )\n         bundleContext.addBundleListener( this );\n \n         // get all persistence managers to begin with\n-        pmtCount = 1; // make sure to get the persistence managers at least\n-        // once\n+        pmtCount = 1; // make sure to get the persistence managers at least once\n         persistenceManagerTracker = new ServiceTracker( bundleContext, PersistenceManager.class.getName(), null );\n         persistenceManagerTracker.open();\n \n@@ -227,6 +226,9 @@ public void start( BundleContext bundleContext )\n     public void stop( BundleContext bundleContext )\n     {\n \n+        // stop handling bundle events immediately\n+        handleBundleEvents = false;\n+\n         // immediately unregister the Configuration Admin before cleaning up\n         // clearing the field before actually unregistering the service\n         // prevents IllegalStateException in getServiceReference() if\n@@ -246,7 +248,6 @@ public void stop( BundleContext bundleContext )\n \n         // stop listening for events\n         bundleContext.removeBundleListener( this );\n-        handleBundleEvents = false;\n \n         if ( configurationListenerTracker != null )\n         {\n@@ -274,8 +275,13 @@ public void stop( BundleContext bundleContext )\n             logTracker.close();\n         }\n \n+        // just ensure the configuration cache is cleared, not cleaning\n+        synchronized ( configurations )\n+        {\n+            configurations.clear();\n+        }\n+\n         this.bundleContext = null;\n-        this.configurations = null;\n     }\n \n \n@@ -942,8 +948,7 @@ else if ( !bundleLocation.equals( cfg.getBundleLocation() ) )\n                 }\n \n                 // 104.3 Report an error in the log if more than one service\n-                // with\n-                // the same PID asks for the configuration\n+                // with the same PID asks for the configuration\n                 if ( cfg.getServiceReference() != null && !sr.equals( cfg.getServiceReference() ) )\n                 {\n                     log( LogService.LOG_ERROR, \"Configuration for \" + pid + \" has already been used for service \"\n@@ -1189,17 +1194,31 @@ public void run()\n             {\n                 if ( config.getFactoryPid() == null )\n                 {\n-                    ServiceReference[] sr = bundleContext.getServiceReferences( ManagedService.class.getName(), \"(\"\n-                        + Constants.SERVICE_PID + \"=\" + config.getPid() + \")\" );\n-                    if ( sr != null && sr.length > 0 )\n+                    final ServiceReference[] srList = bundleContext.getServiceReferences( ManagedService.class\n+                        .getName(), \"(\" + Constants.SERVICE_PID + \"=\" + config.getPid() + \")\" );\n+                    if ( srList != null && srList.length > 0 )\n                     {\n-                        ManagedService srv = ( ManagedService ) bundleContext.getService( sr[0] );\n+                        final ServiceReference sr = srList[0];\n+                        final ManagedService srv = ( ManagedService ) bundleContext.getService( sr );\n+\n+                        // 104.3 Report an error in the log if more than one service\n+                        // with the same PID asks for the configuration\n+                        if ( srList.length > 1 )\n+                        {\n+                            for ( int i = 1; i < srList.length; i++ )\n+                            {\n+                                log( LogService.LOG_ERROR, \"Configuration for \" + config.getPid()\n+                                    + \" is used for service \" + sr\n+                                    + \"following services will not receive configuration: \" + srList[i], null );\n+                            }\n+                        }\n+\n                         try\n                         {\n                             // bind the configuration, fail if bound to another\n                             // bundle !!\n                             // check bundle location of configuration\n-                            String bundleLocation = sr[0].getBundle().getLocation();\n+                            String bundleLocation = sr.getBundle().getLocation();\n                             if ( config.getBundleLocation() == null )\n                             {\n                                 // bind to the location of the service if\n@@ -1215,32 +1234,39 @@ else if ( !bundleLocation.equals( config.getBundleLocation() ) )\n                                 return;\n                             }\n \n+                            // record the delivery of the configuration\n+                            if ( config.getServiceReference() == null )\n+                            {\n+                                config.setServiceReference( sr );\n+                            }\n+\n                             // prepare the configuration for the service (call plugins)\n-                            Dictionary dictionary = callPlugins( config.getPid(), sr[0], config );\n+                            Dictionary dictionary = callPlugins( config.getPid(), sr, config );\n \n                             // update the ManagedService with the properties\n                             srv.updated( dictionary );\n                             config.setDelivered( true );\n                         }\n                         finally\n                         {\n-                            bundleContext.ungetService( sr[0] );\n+                            bundleContext.ungetService( sr );\n                         }\n                     }\n                 }\n                 else\n                 {\n-                    ServiceReference[] sr = bundleContext.getServiceReferences( ManagedServiceFactory.class.getName(),\n-                        \"(\" + Constants.SERVICE_PID + \"=\" + config.getFactoryPid() + \")\" );\n-                    if ( sr != null && sr.length > 0 )\n+                    ServiceReference[] srList = bundleContext.getServiceReferences( ManagedServiceFactory.class\n+                        .getName(), \"(\" + Constants.SERVICE_PID + \"=\" + config.getFactoryPid() + \")\" );\n+                    if ( srList != null && srList.length > 0 )\n                     {\n-                        ManagedServiceFactory srv = ( ManagedServiceFactory ) bundleContext.getService( sr[0] );\n+                        final ServiceReference sr = srList[0];\n+                        final ManagedServiceFactory srv = ( ManagedServiceFactory ) bundleContext.getService( sr );\n                         try\n                         {\n                             // bind the configuration, fail if bound to another\n                             // bundle !!\n                             // check bundle location of configuration\n-                            String bundleLocation = sr[0].getBundle().getLocation();\n+                            String bundleLocation = sr.getBundle().getLocation();\n                             if ( config.getBundleLocation() == null )\n                             {\n                                 // bind to the location of the service if\n@@ -1259,7 +1285,7 @@ else if ( !bundleLocation.equals( config.getBundleLocation() ) )\n                             // prepare the configuration for the service (call plugins)\n                             // call the plugins with cm.target set to the service's factory PID\n                             // (clarification in Section 104.9.1 of Compendium 4.2)\n-                            Dictionary dictionary = callPlugins( config.getFactoryPid(), sr[0], config );\n+                            Dictionary dictionary = callPlugins( config.getFactoryPid(), sr, config );\n \n                             // update the ManagedServiceFactory with the properties\n                             // only, if there is non-null configuration data\n@@ -1271,7 +1297,7 @@ else if ( !bundleLocation.equals( config.getBundleLocation() ) )\n                         }\n                         finally\n                         {\n-                            bundleContext.ungetService( sr[0] );\n+                            bundleContext.ungetService( sr );\n                         }\n                     }\n                 }\n@@ -1331,19 +1357,20 @@ public void run()\n             {\n                 if ( factoryPid == null )\n                 {\n-                    ServiceReference[] sr = bundleContext.getServiceReferences( ManagedService.class.getName(), \"(\"\n+                    ServiceReference[] srList = bundleContext.getServiceReferences( ManagedService.class.getName(), \"(\"\n                         + Constants.SERVICE_PID + \"=\" + pid + \")\" );\n-                    if ( sr != null && sr.length > 0 )\n+                    if ( srList != null && srList.length > 0 )\n                     {\n-                        ManagedService srv = ( ManagedService ) bundleContext.getService( sr[0] );\n+                        final ServiceReference sr = srList[0];\n+                        final ManagedService srv = ( ManagedService ) bundleContext.getService( sr );\n                         try\n                         {\n                             srv.updated( null );\n                             config.setDelivered( true );\n                         }\n                         finally\n                         {\n-                            bundleContext.ungetService( sr[0] );\n+                            bundleContext.ungetService( sr );\n                         }\n                     }\n                 }\n@@ -1354,19 +1381,20 @@ public void run()\n                     factory.removePID( pid );\n                     factory.store();\n \n-                    ServiceReference[] sr = bundleContext.getServiceReferences( ManagedServiceFactory.class.getName(),\n-                        \"(\" + Constants.SERVICE_PID + \"=\" + factoryPid + \")\" );\n-                    if ( sr != null && sr.length > 0 )\n+                    ServiceReference[] srList = bundleContext.getServiceReferences( ManagedServiceFactory.class\n+                        .getName(), \"(\" + Constants.SERVICE_PID + \"=\" + factoryPid + \")\" );\n+                    if ( srList != null && srList.length > 0 )\n                     {\n-                        ManagedServiceFactory srv = ( ManagedServiceFactory ) bundleContext.getService( sr[0] );\n+                        final ServiceReference sr = srList[0];\n+                        final ManagedServiceFactory srv = ( ManagedServiceFactory ) bundleContext.getService( sr );\n                         try\n                         {\n                             srv.deleted( pid );\n                             config.setDelivered( true );\n                         }\n                         finally\n                         {\n-                            bundleContext.ungetService( sr[0] );\n+                            bundleContext.ungetService( sr );\n                         }\n                     }\n                 }",
                "raw_url": "https://github.com/apache/felix/raw/041797036e0a03e2e7986f0f20a8bd25cc26994d/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java",
                "sha": "1bd31ff2624baa5329252d587e6c94a7100c4794",
                "status": "modified"
            },
            {
                "additions": 89,
                "blob_url": "https://github.com/apache/felix/blob/041797036e0a03e2e7986f0f20a8bd25cc26994d/configadmin/src/test/java/org/apache/felix/cm/integration/ConfigurationTest.java",
                "changes": 91,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/configadmin/src/test/java/org/apache/felix/cm/integration/ConfigurationTest.java?ref=041797036e0a03e2e7986f0f20a8bd25cc26994d",
                "deletions": 2,
                "filename": "configadmin/src/test/java/org/apache/felix/cm/integration/ConfigurationTest.java",
                "patch": "@@ -129,6 +129,10 @@ public void test_configuration_unbound_on_uninstall() throws IOException, Bundle\n         // give cm time for distribution\n         delay();\n \n+        // assert activater has configuration\n+        TestCase.assertNotNull( \"Expect Properties after Service Registration\", tester.props );\n+        TestCase.assertEquals( \"Expect a single update call\", 1, tester.numUpdatedCalls );\n+\n         // ensure a freshly retrieved object also has the location\n         final Configuration beforeStop = getConfiguration( pid );\n         TestCase.assertEquals( beforeStop.getBundleLocation(), bundle.getLocation() );\n@@ -160,17 +164,100 @@ public void test_configuration_unbound_on_uninstall() throws IOException, Bundle\n         // ensure a freshly retrieved object also does not have the location\n         final Configuration atEnd = getConfiguration( pid );\n         TestCase.assertNull( atEnd.getBundleLocation() );\n+\n+        // remove the configuration for good\n+        deleteConfig( pid );\n     }\n \n \n-    private Bundle installBundle( final String pid ) throws BundleException {\n+    @Test\n+    public void test_start_bundle_configure_stop_start_bundle() throws IOException, BundleException\n+    {\n+        String pid = \"test_start_bundle_configure_stop_start_bundle\";\n+\n+        // start the bundle and assert this\n+        bundle = installBundle( pid );\n+        bundle.start();\n+        final TestActivator tester = TestActivator.INSTANCE;\n+        TestCase.assertNotNull( \"Activator not started !!\", tester );\n+\n+        // give cm time for distribution\n+        delay();\n+\n+        // assert activater has no configuration\n+        TestCase.assertNull( \"Expect no Properties after Service Registration\", tester.props );\n+        TestCase.assertEquals( \"Expect no update call\", 1, tester.numUpdatedCalls );\n+\n+        // configure after ManagedServiceRegistration --> configure via update\n+        configure( pid );\n+        delay();\n+\n+        // assert activater has configuration\n+        TestCase.assertNotNull( \"Expect Properties after Service Registration\", tester.props );\n+        TestCase.assertEquals( \"Expect a single update call\", 2, tester.numUpdatedCalls );\n+\n+        // stop the bundle now\n+        bundle.stop();\n+\n+        // assert INSTANCE is null\n+        TestCase.assertNull( TestActivator.INSTANCE );\n+\n+        delay();\n+\n+        // start the bundle again (and check)\n+        bundle.start();\n+        final TestActivator tester2 = TestActivator.INSTANCE;\n+        TestCase.assertNotNull( \"Activator not started the second time!!\", tester2 );\n+        TestCase.assertNotSame( \"Instances must not be the same\", tester, tester2 );\n+\n+        // give cm time for distribution\n+        delay();\n+\n+        // assert activater has configuration\n+        TestCase.assertNotNull( \"Expect Properties after Service Registration\", tester2.props );\n+        TestCase.assertEquals( \"Expect a second update call\", 1, tester2.numUpdatedCalls );\n+\n+        // cleanup\n+        bundle.uninstall();\n+        bundle = null;\n+\n+        // remove the configuration for good\n+        deleteConfig( pid );\n+    }\n+\n+\n+    /*\n+    @Test\n+    public void test_() throws BundleException\n+    {\n+        final int count = 2;\n+        for (int i=0; i < count; i++) {\n+            final Bundle bundle = installBundle( \"dummy\", FailureActivator.class );\n+            bundle.start();\n+            delay();\n+            bundle.uninstall();\n+            delay();\n+        }\n+    }\n+    */\n+\n+\n+    private Bundle installBundle( final String pid ) throws BundleException\n+    {\n+        return installBundle( pid, TestActivator.class );\n+    }\n+\n+\n+    private Bundle installBundle( final String pid, final Class<?> activatorClass )\n+        throws BundleException\n+    {\n         final InputStream bundleStream = new MyTinyBundle()\n             .prepare(\n                 withBnd()\n                 .set( Constants.BUNDLE_SYMBOLICNAME, \"simpleconfiguration\" )\n                 .set( Constants.BUNDLE_VERSION, \"0.0.11\" )\n                 .set( Constants.IMPORT_PACKAGE, \"org.apache.felix.cm.integration.helper\" )\n-                .set( Constants.BUNDLE_ACTIVATOR, \"org.apache.felix.cm.integration.helper.TestActivator\" )\n+                .set( Constants.BUNDLE_ACTIVATOR, activatorClass.getName() )\n                 .set( TestActivator.HEADER_PID, pid )\n             )\n             .build( TinyBundles.asStream() );",
                "raw_url": "https://github.com/apache/felix/raw/041797036e0a03e2e7986f0f20a8bd25cc26994d/configadmin/src/test/java/org/apache/felix/cm/integration/ConfigurationTest.java",
                "sha": "cfadf94dcbffbd70d3f83ff04dbdbdb2e0ea0690",
                "status": "modified"
            }
        ],
        "message": "FELIX-1165 Ensure setting the service reference field for a ManagedService\nconfiguration also during update.\nAdditional fixes:\n  * NPE prevention if bundle event is handled after bundle stop (due to timing)\n  * logging if on configuration update multiple ManagedService candidates exist\n  * integration test for service reference field setting\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@804387 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/b68eaaa3794cda40670a6c0f7a5e1d06eedcbffe",
        "patched_files": [
            "Configuration.java",
            "ConfigurationManager.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ConfigurationTest.java",
            "ConfigurationManagerTest.java"
        ]
    },
    "felix_087c0ea": {
        "bug_id": "felix_087c0ea",
        "commit": "https://github.com/apache/felix/commit/087c0ea8696c49df7fbadd3cb6fc6d90718de075",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/felix/blob/087c0ea8696c49df7fbadd3cb6fc6d90718de075/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java?ref=087c0ea8696c49df7fbadd3cb6fc6d90718de075",
                "deletions": 3,
                "filename": "resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "patch": "@@ -2007,8 +2007,20 @@ private static String toStringBlame(\n                         allCandidates,\n                         blame.m_reqs.get(i));\n                     sb.append(export.getNamespace());\n-                    sb.append(\"=\");\n-                    sb.append(export.getAttributes().get(export.getNamespace()).toString());\n+                    sb.append(\": \");\n+                    Object namespaceVal = export.getAttributes().get(export.getNamespace());\n+                    if (namespaceVal != null)\n+                    {\n+                        sb.append(namespaceVal.toString());\n+                    }\n+                    else\n+                    {\n+                        for (Entry<String, Object> attrEntry : export.getAttributes().entrySet())\n+                        {\n+                            sb.append(attrEntry.getKey()).append('=')\n+                                .append(attrEntry.getValue()).append(';');\n+                        }\n+                    }\n                     if (export.getNamespace().equals(PackageNamespace.PACKAGE_NAMESPACE)\n                         && !export.getAttributes().get(PackageNamespace.PACKAGE_NAMESPACE)\n                         .equals(blame.m_cap.getAttributes().get(\n@@ -2193,4 +2205,4 @@ public String toString()\n             return m_blames.toString();\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/felix/raw/087c0ea8696c49df7fbadd3cb6fc6d90718de075/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "sha": "0f2caa0a31e698131e801892944aa2a793a37ed7",
                "status": "modified"
            }
        ],
        "message": "Apply patch (FELIX-4008) to avoid NPE when converting blame to string.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1464569 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/51dc877a678ef327a595c98e2e9397bd9e0e5cd2",
        "patched_files": [
            "ResolverImpl.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ResolverImplTest.java"
        ]
    },
    "felix_0b41eb0": {
        "bug_id": "felix_0b41eb0",
        "commit": "https://github.com/apache/felix/commit/0b41eb0bac4d6a17daee8ae25694e9089b99a3b9",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/felix/blob/0b41eb0bac4d6a17daee8ae25694e9089b99a3b9/framework/src/main/java/org/apache/felix/framework/BundleRevisionImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/framework/src/main/java/org/apache/felix/framework/BundleRevisionImpl.java?ref=0b41eb0bac4d6a17daee8ae25694e9089b99a3b9",
                "deletions": 2,
                "filename": "framework/src/main/java/org/apache/felix/framework/BundleRevisionImpl.java",
                "patch": "@@ -202,7 +202,7 @@ public Version getVersion()\n \n     static List<Capability> asCapabilityList(List reqs)\n     {\n-        return (List<Capability>) reqs;\n+        return reqs;\n     }\n \n     public List<BundleCapability> getDeclaredCapabilities(String namespace)\n@@ -229,7 +229,7 @@ public Version getVersion()\n \n     static List<Requirement> asRequirementList(List reqs)\n     {\n-        return (List<Requirement>) reqs;\n+        return reqs;\n     }\n \n     public List<BundleRequirement> getDeclaredRequirements(String namespace)\n@@ -517,6 +517,9 @@ Enumeration getResourcesLocal(String name)\n         // each bundle class path entry...this isn't very\n         // clean or meaningful, but the Spring guys want it.\n         final List<Content> contentPath = getContentPath();\n+        if (contentPath == null)\n+            return Collections.emptyEnumeration();\n+\n         if (name.equals(\"/\"))\n         {\n             for (int i = 0; i < contentPath.size(); i++)",
                "raw_url": "https://github.com/apache/felix/raw/0b41eb0bac4d6a17daee8ae25694e9089b99a3b9/framework/src/main/java/org/apache/felix/framework/BundleRevisionImpl.java",
                "sha": "abe731e26aa6e60d35ae22fc10bb53dfcd1d95cb",
                "status": "modified"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/felix/blob/0b41eb0bac4d6a17daee8ae25694e9089b99a3b9/framework/src/test/java/org/apache/felix/framework/BundleRevisionImplTest.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/framework/src/test/java/org/apache/felix/framework/BundleRevisionImplTest.java?ref=0b41eb0bac4d6a17daee8ae25694e9089b99a3b9",
                "deletions": 0,
                "filename": "framework/src/test/java/org/apache/felix/framework/BundleRevisionImplTest.java",
                "patch": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.felix.framework;\n+\n+import java.util.Enumeration;\n+import java.util.List;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.felix.framework.cache.Content;\n+\n+public class BundleRevisionImplTest extends TestCase\n+{\n+    public void testGetResourcesLocalNullContentPath()\n+    {\n+        BundleRevisionImpl bri = new BundleRevisionImpl(null, null) {\n+            @Override\n+            synchronized List<Content> getContentPath()\n+            {\n+                return null;\n+            }\n+        };\n+        Enumeration<?> en = bri.getResourcesLocal(\"foo\");\n+        assertFalse(en.hasMoreElements());\n+    }\n+}",
                "raw_url": "https://github.com/apache/felix/raw/0b41eb0bac4d6a17daee8ae25694e9089b99a3b9/framework/src/test/java/org/apache/felix/framework/BundleRevisionImplTest.java",
                "sha": "685af10a72a6450aa0e8b709eafff721e7c8d2c5",
                "status": "added"
            }
        ],
        "message": "FELIX-4960 NPE in BundleRevisionImpl.getResourcesLocal()\n\nThe NPE is fixed. Also added a unit test.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1691137 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/65407cd1634e6f659af7b7265910120ce289cee9",
        "patched_files": [
            "BundleRevisionImpl.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "BundleRevisionImplTest.java"
        ]
    },
    "felix_14d9e21": {
        "bug_id": "felix_14d9e21",
        "commit": "https://github.com/apache/felix/commit/14d9e21ecac16c1207fd6457626ed233d136bc66",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/felix/blob/14d9e21ecac16c1207fd6457626ed233d136bc66/webconsole/src/main/java/org/apache/felix/webconsole/internal/misc/LicenseServlet.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/webconsole/src/main/java/org/apache/felix/webconsole/internal/misc/LicenseServlet.java?ref=14d9e21ecac16c1207fd6457626ed233d136bc66",
                "deletions": 17,
                "filename": "webconsole/src/main/java/org/apache/felix/webconsole/internal/misc/LicenseServlet.java",
                "patch": "@@ -295,30 +295,32 @@ private boolean sendResource( final PathInfo pathInfo, final HttpServletResponse\n                 }\n             }\n         }\n-\n-        // license is in a nested JAR\n-        final URL zipResource = bundle.getResource( pathInfo.innerJar );\n-        if ( zipResource != null )\n+        else\n         {\n-            final InputStream input = zipResource.openStream();\n-            ZipInputStream zin = null;\n-            try\n+            // license is in a nested JAR\n+            final URL zipResource = bundle.getResource( pathInfo.innerJar );\n+            if ( zipResource != null )\n             {\n-                zin = new ZipInputStream( input );\n-                for ( ZipEntry zentry = zin.getNextEntry(); zentry != null; zentry = zin.getNextEntry() )\n+                final InputStream input = zipResource.openStream();\n+                ZipInputStream zin = null;\n+                try\n                 {\n-                    if ( pathInfo.licenseFile.equals( zentry.getName() ) )\n+                    zin = new ZipInputStream( input );\n+                    for ( ZipEntry zentry = zin.getNextEntry(); zentry != null; zentry = zin.getNextEntry() )\n                     {\n-                        IOUtils.copy( zin, response.getWriter() );\n-                        return true;\n+                        if ( pathInfo.licenseFile.equals( zentry.getName() ) )\n+                        {\n+                            IOUtils.copy( zin, response.getWriter() );\n+                            return true;\n+                        }\n                     }\n                 }\n-            }\n-            finally\n-            {\n+                finally\n+                {\n \n-                IOUtils.closeQuietly( zin );\n-                IOUtils.closeQuietly( input );\n+                    IOUtils.closeQuietly( zin );\n+                    IOUtils.closeQuietly( input );\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/felix/raw/14d9e21ecac16c1207fd6457626ed233d136bc66/webconsole/src/main/java/org/apache/felix/webconsole/internal/misc/LicenseServlet.java",
                "sha": "b2cd890edc715a3e63cd03a6583ac455d31a0b71",
                "status": "modified"
            }
        ],
        "message": "FELIX-2708 Prevent NPE in LicenseServlet\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1220409 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/05ede3a5662502e63139484748c98a84fa887aab",
        "patched_files": [
            "LicenseServlet.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "LicenseServletTest.java"
        ]
    },
    "felix_1504e7b": {
        "bug_id": "felix_1504e7b",
        "commit": "https://github.com/apache/felix/commit/1504e7b6a4f4ee5c2a86ee359aa14c846e67be16",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/felix/blob/1504e7b6a4f4ee5c2a86ee359aa14c846e67be16/scrplugin/src/main/java/org/apache/felix/scrplugin/tags/annotation/defaulttag/Util.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scrplugin/src/main/java/org/apache/felix/scrplugin/tags/annotation/defaulttag/Util.java?ref=1504e7b6a4f4ee5c2a86ee359aa14c846e67be16",
                "deletions": 0,
                "filename": "scrplugin/src/main/java/org/apache/felix/scrplugin/tags/annotation/defaulttag/Util.java",
                "patch": "@@ -347,6 +347,14 @@ private static String getAnnotationValue(final AnnotationValue av, final JavaCla\n     {\n         if ( av instanceof AnnotationFieldRef )\n         {\n+            // during prescan of AnnotationTagProviderManager#hasScrPluginAnnotation this method is called without desc attribute\n+            // avoid NPE in this case and just skip value resolving\n+            // FELIX-1629\n+            if ( desc == null)\n+            {\n+                return null;\n+            }\n+\n             // getField throws AIOOBE\n             // return ((AnnotationFieldRef)av).getField().getInitializationExpression();\n             final String s = av.getParameterValue().toString().trim();",
                "raw_url": "https://github.com/apache/felix/raw/1504e7b6a4f4ee5c2a86ee359aa14c846e67be16/scrplugin/src/main/java/org/apache/felix/scrplugin/tags/annotation/defaulttag/Util.java",
                "sha": "28f71c74b7fc94a6908a6545a3a9e00c03dd5f24",
                "status": "modified"
            }
        ],
        "message": "FELIX-1629 : SCR Annotations with Constanst reference may cause NPE. Apply patch from Stefan Seifert\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@818374 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/fd69ad6b9fd510588d858e4e06a31dee1fb59199",
        "patched_files": [
            "Util.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "UtilTest.java"
        ]
    },
    "felix_17c3161": {
        "bug_id": "felix_17c3161",
        "commit": "https://github.com/apache/felix/commit/17c31618089a049f7dc6a10675d275dbd6bb71b7",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/felix/blob/17c31618089a049f7dc6a10675d275dbd6bb71b7/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java?ref=17c31618089a049f7dc6a10675d275dbd6bb71b7",
                "deletions": 1,
                "filename": "resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "patch": "@@ -1520,7 +1520,7 @@ static void permutateIfNeeded(\n             for (Candidates existingPerm : permutations)\n             {\n                 List<Capability> existingPermCands = existingPerm.getCandidates(req);\n-                if (!existingPermCands.get(0).equals(candidates.get(0)))\n+                if (existingPermCands != null && !existingPermCands.get(0).equals(candidates.get(0)))\n                 {\n                     permutated = true;\n                 }",
                "raw_url": "https://github.com/apache/felix/raw/17c31618089a049f7dc6a10675d275dbd6bb71b7/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "sha": "230912a17235a6f0ddd0914ce3a996a20f6d5038",
                "status": "modified"
            }
        ],
        "message": "[FELIX-4642] NPE in the resolver when substituting\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1625895 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/7c92cad682d1bedd19af9dcace1e5c932c9b4473",
        "patched_files": [
            "ResolverImpl.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ResolverImplTest.java"
        ]
    },
    "felix_1957dc1": {
        "bug_id": "felix_1957dc1",
        "commit": "https://github.com/apache/felix/commit/1957dc193859f107f1c53d7ae9633163827f69b9",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/felix/blob/1957dc193859f107f1c53d7ae9633163827f69b9/scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java?ref=1957dc193859f107f1c53d7ae9633163827f69b9",
                "deletions": 18,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java",
                "patch": "@@ -54,25 +54,25 @@\n public class BundleComponentActivator implements Logger\n {\n     // global component registration\n-    private ComponentRegistry m_componentRegistry;\n+    private final ComponentRegistry m_componentRegistry;\n \n     // The bundle context owning the registered component\n-    private BundleContext m_context = null;\n+    private final BundleContext m_context;\n \n     // This is a list of component instance managers that belong to a particular bundle\n     private List<ComponentHolder> m_managers = new ArrayList<ComponentHolder>();\n \n     // The Configuration Admin tracker providing configuration for components\n-    private ServiceTracker m_logService;\n+    private final ServiceTracker m_logService;\n \n     // thread acting upon configurations\n-    private ComponentActorThread m_componentActor;\n+    private final ComponentActorThread m_componentActor;\n \n     // true as long as the dispose method is not called\n     private boolean m_active;\n \n     // the configuration\n-    private ScrConfiguration m_configuration;\n+    private final ScrConfiguration m_configuration;\n \n \n     /**\n@@ -316,14 +316,15 @@ private void loadDescriptor( final URL descriptorURL )\n     */\n     void dispose( int reason )\n     {\n-        if ( m_context == null )\n+        synchronized ( this )\n         {\n-            return;\n+            if ( !m_active )\n+            {\n+                return;\n+            }\n+            // mark instance inactive (no more component activations)\n+            m_active = false;\n         }\n-\n-        // mark instance inactive (no more component activations)\n-        m_active = false;\n-\n         log( LogService.LOG_DEBUG, \"BundleComponentActivator : Bundle [{0}] will destroy {1} instances\", new Object[]\n             { m_context.getBundle().getBundleId(), m_managers.size() }, null, null, null );\n \n@@ -351,14 +352,8 @@ void dispose( int reason )\n         log( LogService.LOG_DEBUG, \"BundleComponentActivator : Bundle [{0}] STOPPED\", new Object[]\n             {m_context.getBundle().getBundleId()}, null, null, null );\n \n-        if (m_logService != null) {\n-            m_logService.close();\n-            m_logService = null;\n-        }\n+        m_logService.close();\n \n-        m_componentActor = null;\n-        m_componentRegistry = null;\n-        m_context = null;\n     }\n \n ",
                "raw_url": "https://github.com/apache/felix/raw/1957dc193859f107f1c53d7ae9633163827f69b9/scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java",
                "sha": "315137c26b9979a9e8a9f3a5334f0300ec6dac3e",
                "status": "modified"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/felix/blob/1957dc193859f107f1c53d7ae9633163827f69b9/scr/src/main/java/org/apache/felix/scr/impl/manager/AbstractComponentManager.java",
                "changes": 72,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/manager/AbstractComponentManager.java?ref=1957dc193859f107f1c53d7ae9633163827f69b9",
                "deletions": 41,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/manager/AbstractComponentManager.java",
                "patch": "@@ -513,7 +513,7 @@ public final void disable( final boolean async )\n             enableLatch = enableLatchWait();\n             if ( !async )\n             {\n-                deactivateInternal( ComponentConstants.DEACTIVATION_REASON_DISABLED, true, m_trackingCount.get() );\n+                deactivateInternal( ComponentConstants.DEACTIVATION_REASON_DISABLED, true, false );\n             }\n             disableInternal();\n         }\n@@ -538,7 +538,7 @@ public void run()\n                 {\n                     try\n                     {\n-                        deactivateInternal( ComponentConstants.DEACTIVATION_REASON_DISABLED, true, m_trackingCount.get() );\n+                        deactivateInternal( ComponentConstants.DEACTIVATION_REASON_DISABLED, true, false );\n                     }\n                     finally\n                     {\n@@ -572,8 +572,7 @@ void dispose()\n      */\n     public void dispose( int reason )\n     {\n-        m_disposed = true;\n-        disposeInternal( reason );\n+        deactivateInternal( reason, true, true );\n     }\n     \n     <T> void registerMissingDependency( DependencyManager<S, T> dm, ServiceReference<T> ref, int trackingCount)\n@@ -834,16 +833,22 @@ final void activateInternal( int trackingCount )\n         }\n     }\n \n-    final void deactivateInternal( int reason, boolean disable, int trackingCount )\n+    /**\n+     * Handles deactivating, disabling, and disposing a component manager. Deactivating a factory instance\n+     * always disables and disposes it.  Deactivating a factory disposes it.\n+     * @param reason reason for action\n+     * @param disable whether to also disable the manager\n+     * @param dispose whether to also dispose of the manager\n+     */\n+    final void deactivateInternal( int reason, boolean disable, boolean dispose )\n     {\n-        if ( m_disposed )\n-        {\n-            return;\n-        }\n-        if ( m_factoryInstance )\n+        synchronized ( this )\n         {\n-            disposeInternal( reason );\n-            return;\n+            if ( m_disposed )\n+            {\n+                return;\n+            }\n+            m_disposed = dispose;\n         }\n         log( LogService.LOG_DEBUG, \"Deactivating component\", null );\n \n@@ -852,45 +857,20 @@ final void deactivateInternal( int reason, boolean disable, int trackingCount )\n         obtainActivationReadLock( \"deactivateInternal\" );\n         try\n         {\n-            doDeactivate( reason, disable );\n+            doDeactivate( reason, disable || m_factoryInstance );\n         }\n         finally \n         {\n             releaseActivationReadLock( \"deactivateInternal\" );\n         }\n-        if ( isFactory() )\n+        if ( isFactory() || m_factoryInstance || dispose )\n         {\n+            log( LogService.LOG_DEBUG, \"Disposing component (reason: \" + reason + \")\", null );\n             clear();\n         }\n     }\n \n-    final void disableInternal()\n-    {\n-        m_internalEnabled = false;\n-        if ( m_disposed )\n-        {\n-            throw new IllegalStateException( \"Cannot disable a disposed component \" + getName() );\n-        }\n-        unregisterComponentId();\n-    }\n-\n-    /**\n-     * Disposes off this component deactivating and disabling it first as\n-     * required. After disposing off the component, it may not be used anymore.\n-     * <p>\n-     * This method unlike the other state change methods immediately takes\n-     * action and disposes the component. The reason for this is, that this\n-     * method has to actually complete before other actions like bundle stopping\n-     * may continue.\n-     */\n-    final void disposeInternal( int reason )\n-    {\n-        log( LogService.LOG_DEBUG, \"Disposing component (reason: \" + reason + \")\", null );\n-        doDeactivate( reason, true );\n-        clear();\n-    }\n-         \n-    final void doDeactivate( int reason, boolean disable )\n+    private void doDeactivate( int reason, boolean disable )\n     {\n         try\n         {\n@@ -924,6 +904,16 @@ final void doDeactivate( int reason, boolean disable )\n         }\n     }\n \n+    final void disableInternal()\n+    {\n+        m_internalEnabled = false;\n+        if ( m_disposed )\n+        {\n+            throw new IllegalStateException( \"Cannot disable a disposed component \" + getName() );\n+        }\n+        unregisterComponentId();\n+    }\n+\n     final ServiceReference<S> getServiceReference()\n     {\n         ServiceRegistration<S> reg = getServiceRegistration();",
                "raw_url": "https://github.com/apache/felix/raw/1957dc193859f107f1c53d7ae9633163827f69b9/scr/src/main/java/org/apache/felix/scr/impl/manager/AbstractComponentManager.java",
                "sha": "a8c895e411eea58dbea25eaf877d496d76abf567",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/felix/blob/1957dc193859f107f1c53d7ae9633163827f69b9/scr/src/main/java/org/apache/felix/scr/impl/manager/ComponentFactoryImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/manager/ComponentFactoryImpl.java?ref=1957dc193859f107f1c53d7ae9633163827f69b9",
                "deletions": 3,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/manager/ComponentFactoryImpl.java",
                "patch": "@@ -129,7 +129,7 @@ public ComponentInstance newInstance( Dictionary<String, ?> dictionary )\n         if ( instance == null || instance.getInstance() == null )\n         {\n             // activation failed, clean up component manager\n-            cm.disposeInternal( ComponentConstants.DEACTIVATION_REASON_DISPOSED );\n+            cm.dispose( ComponentConstants.DEACTIVATION_REASON_DISPOSED );\n             throw new ComponentException( \"Failed activating component\" );\n         }\n \n@@ -313,7 +313,7 @@ public void configurationDeleted( String pid )\n             if ( ( getState() & STATE_DISPOSED ) == 0 && getComponentMetadata().isConfigurationRequired() )\n             {\n                 log( LogService.LOG_DEBUG, \"Deactivating component factory (required configuration has gone)\", null );\n-                deactivateInternal( ComponentConstants.DEACTIVATION_REASON_CONFIGURATION_DELETED, true, getTrackingCount().get() );\n+                deactivateInternal( ComponentConstants.DEACTIVATION_REASON_CONFIGURATION_DELETED, true, false );\n             }\n         }\n         else\n@@ -381,7 +381,7 @@ public boolean configurationUpdated( String pid, Dictionary<String, Object> conf\n                 {\n                     log( LogService.LOG_DEBUG,\n                             \"Component Factory target filters not satisfied anymore: deactivating\", null );\n-                    deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, getTrackingCount().get() );\n+                    deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, false );\n                     return false;\n                 }\n             }",
                "raw_url": "https://github.com/apache/felix/raw/1957dc193859f107f1c53d7ae9633163827f69b9/scr/src/main/java/org/apache/felix/scr/impl/manager/ComponentFactoryImpl.java",
                "sha": "c8f20a16357e68240d780ae0936cac746dd26967",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/felix/blob/1957dc193859f107f1c53d7ae9633163827f69b9/scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java?ref=1957dc193859f107f1c53d7ae9633163827f69b9",
                "deletions": 10,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java",
                "patch": "@@ -263,7 +263,7 @@ public void removedService( ServiceReference<T> serviceReference, RefPair<T> ref\n             {\n                 if (getTracker().isEmpty())\n                 {\n-                    m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, trackingCount );\n+                    m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, false );\n                 }\n             }\n         }\n@@ -362,7 +362,7 @@ public void removedService( ServiceReference<T> serviceReference, RefPair<T> ref\n                 lastRefPair = refPair;\n                 lastRefPairTrackingCount = trackingCount;\n                 tracked( trackingCount );\n-                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, trackingCount );\n+                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, false );\n                 lastRefPair = null;\n                 m_componentManager.log( LogService.LOG_DEBUG, \"dm {0} tracking {1} MultipleDynamic removed (deactivate) {2}\", new Object[] {getName(), trackingCount, serviceReference}, null );\n             }\n@@ -440,7 +440,7 @@ public void addedService( ServiceReference<T> serviceReference, RefPair<T> refPa\n                 m_componentManager.log( LogService.LOG_DEBUG,\n                         \"Dependency Manager: Static dependency on {0}/{1} is broken\", new Object[]\n                         {getName(), m_dependencyMetadata.getInterface()}, null );\n-                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, trackingCount );\n+                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, false );\n                 m_componentManager.activateInternal( trackingCount );\n \n             }\n@@ -472,7 +472,7 @@ public void removedService( ServiceReference<T> serviceReference, RefPair<T> ref\n                 m_componentManager.log( LogService.LOG_DEBUG,\n                         \"Dependency Manager: Static dependency on {0}/{1} is broken\", new Object[]\n                         {getName(), m_dependencyMetadata.getInterface()}, null );\n-                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, trackingCount );\n+                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, false );\n                 //try to reactivate after ref is no longer tracked.\n                 m_componentManager.activateInternal( trackingCount );\n             }\n@@ -481,7 +481,7 @@ else if ( !isOptional() && getTracker().isEmpty() )\n                 m_componentManager.log( LogService.LOG_DEBUG,\n                         \"Dependency Manager: Static dependency on {0}/{1} is broken\", new Object[]\n                         {getName(), m_dependencyMetadata.getInterface()}, null );\n-                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, trackingCount );                \n+                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, false );                \n             }\n             //This is unlikely\n             ungetService( refPair );\n@@ -572,7 +572,7 @@ public void removedService( ServiceReference<T> serviceReference, RefPair<T> ref\n                     m_componentManager.log( LogService.LOG_DEBUG,\n                         \"Dependency Manager: Static dependency on {0}/{1} is broken\", new Object[]\n                             { getName(), m_dependencyMetadata.getInterface() }, null );\n-                    m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, trackingCount );\n+                    m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, false );\n \n                     // FELIX-2368: immediately try to reactivate\n                     m_componentManager.activateInternal( trackingCount );\n@@ -584,7 +584,7 @@ else if ( !isOptional() && getTracker().isEmpty() )\n                 m_componentManager.log( LogService.LOG_DEBUG,\n                         \"Dependency Manager: Static dependency on {0}/{1} is broken\", new Object[]\n                         {getName(), m_dependencyMetadata.getInterface()}, null );\n-                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, trackingCount );                \n+                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, false );                \n             }\n             ungetService( refPair );\n             m_componentManager.log( LogService.LOG_DEBUG, \"dm {0} tracking {1} MultipleStaticReluctant removed {2} (exit)\", new Object[] {getName(), trackingCount, serviceReference}, null );\n@@ -792,7 +792,7 @@ else if ( deactivate )\n                 this.trackingCount = trackingCount;\n                 tracked( trackingCount );\n                 untracked = false;\n-                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, trackingCount );\n+                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, false );\n             }\n             if ( oldRefPair != null )\n             {\n@@ -894,7 +894,7 @@ public void addedService( ServiceReference<T> serviceReference, RefPair<T> refPa\n                 }\n                 if ( reactivate )\n                 {\n-                    m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, trackingCount );\n+                    m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, false );\n                     m_componentManager.activateInternal( trackingCount );\n                 }\n                 else \n@@ -942,7 +942,7 @@ public void removedService( ServiceReference<T> serviceReference, RefPair<T> ref\n             }\n             if ( reactivate )\n             {\n-                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, trackingCount );\n+                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, false );\n                 m_componentManager.activateInternal( trackingCount );\n             }\n             m_componentManager.log( LogService.LOG_DEBUG, \"dm {0} tracking {1} SingleStatic removed {2} (exit)\", new Object[] {getName(), trackingCount, serviceReference}, null );",
                "raw_url": "https://github.com/apache/felix/raw/1957dc193859f107f1c53d7ae9633163827f69b9/scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java",
                "sha": "f75f41c48cd4e3d66bbff883207329a3fb9c5145",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/felix/blob/1957dc193859f107f1c53d7ae9633163827f69b9/scr/src/main/java/org/apache/felix/scr/impl/manager/SingleComponentManager.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/manager/SingleComponentManager.java?ref=1957dc193859f107f1c53d7ae9633163827f69b9",
                "deletions": 2,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/manager/SingleComponentManager.java",
                "patch": "@@ -587,7 +587,7 @@ public void reconfigure( Dictionary<String, Object> configuration, long changeCo\n             if ( configuration == null && getComponentMetadata().isConfigurationRequired() )\n             {\n                 //deactivate and remove service listeners\n-                deactivateInternal( ComponentConstants.DEACTIVATION_REASON_CONFIGURATION_DELETED, true, getTrackingCount().get() );\n+                deactivateInternal( ComponentConstants.DEACTIVATION_REASON_CONFIGURATION_DELETED, true, false );\n                 //do not reset targets as that will reinstall the service listeners which may activate the component.\n                 //when a configuration arrives the properties will get set based on the new configuration.\n                 return;\n@@ -619,7 +619,7 @@ public void reconfigure( Dictionary<String, Object> configuration, long changeCo\n                     //     called through ConfigurationListener API which itself is\n                     //     called asynchronously by the Configuration Admin Service\n                     releaseActivationWriteeLock( \"reconfigure.modified.1\" );;\n-                    deactivateInternal( reason, false, getTrackingCount().get() );\n+                    deactivateInternal( reason, false, false );\n                     obtainActivationWriteLock( \"reconfigure.deactivate.activate\" );\n                     try\n                     {",
                "raw_url": "https://github.com/apache/felix/raw/1957dc193859f107f1c53d7ae9633163827f69b9/scr/src/main/java/org/apache/felix/scr/impl/manager/SingleComponentManager.java",
                "sha": "dc72b8cc46a0008ef630f31dd5ee331d965a673d",
                "status": "modified"
            }
        ],
        "message": "FELIX-4287 fix NPE when dispose called after bundle stopped, simplify deactivate method calls\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1534395 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/0e376caeb10f19d0cc0cfe9430b35dd712f42ac5",
        "patched_files": [
            "BundleComponentActivator.java",
            "AbstractComponentManager.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "BundleComponentActivatorTest.java",
            "AbstractComponentManagerTest.java"
        ]
    },
    "felix_1fdf69d": {
        "bug_id": "felix_1fdf69d",
        "commit": "https://github.com/apache/felix/commit/1fdf69d9c53fe575114d28b78f4274716bbcee3d",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/felix/blob/1fdf69d9c53fe575114d28b78f4274716bbcee3d/useradmin/itest/pom.xml",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/useradmin/itest/pom.xml?ref=1fdf69d9c53fe575114d28b78f4274716bbcee3d",
                "deletions": 6,
                "filename": "useradmin/itest/pom.xml",
                "patch": "@@ -39,12 +39,6 @@\n \t<packaging>jar</packaging>\n \t<description>Integration tests for the UserAdmin OSGi compendium service.</description>\n \t<dependencies>\n-\t\t<dependency>\n-\t\t\t<groupId>org.osgi</groupId>\n-\t\t\t<artifactId>org.osgi.core</artifactId>\n-\t\t\t<version>${osgi.version}</version>\n-\t\t\t<scope>provided</scope>\n-\t\t</dependency>\n \t\t<dependency>\n \t\t\t<groupId>org.osgi</groupId>\n \t\t\t<artifactId>org.osgi.compendium</artifactId>\n@@ -62,6 +56,18 @@\n \t\t\t<version>1.0.3-SNAPSHOT</version>\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.apache.felix</groupId>\n+\t\t\t<artifactId>org.apache.felix.useradmin.mongodb</artifactId>\n+\t\t\t<version>1.0.2-SNAPSHOT</version>\n+\t\t\t<scope>test</scope>\n+\t\t</dependency>\n+        <dependency>\n+        \t<groupId>org.mongodb</groupId>\n+        \t<artifactId>mongo-java-driver</artifactId>\n+        \t<version>2.8.0</version>\n+\t\t\t<scope>test</scope>\n+        </dependency>\n \t\t<dependency>\n \t\t\t<groupId>org.apache.felix</groupId>\n \t\t\t<artifactId>org.apache.felix.dependencymanager</artifactId>",
                "raw_url": "https://github.com/apache/felix/raw/1fdf69d9c53fe575114d28b78f4274716bbcee3d/useradmin/itest/pom.xml",
                "sha": "fbfdf53b1b0e0454953c8b23f2b30651a94b5e2e",
                "status": "modified"
            },
            {
                "additions": 69,
                "blob_url": "https://github.com/apache/felix/blob/1fdf69d9c53fe575114d28b78f4274716bbcee3d/useradmin/itest/src/test/java/org/apache/felix/useradmin/itest/BaseIntegrationTest.java",
                "changes": 103,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/useradmin/itest/src/test/java/org/apache/felix/useradmin/itest/BaseIntegrationTest.java?ref=1fdf69d9c53fe575114d28b78f4274716bbcee3d",
                "deletions": 34,
                "filename": "useradmin/itest/src/test/java/org/apache/felix/useradmin/itest/BaseIntegrationTest.java",
                "patch": "@@ -46,22 +46,26 @@\n  *  \n  * @author <a href=\"mailto:dev@felix.apache.org\">Felix Project Team</a>\n  */\n-public abstract class BaseIntegrationTest {\n+public abstract class BaseIntegrationTest\n+{\n \n-\tprivate static final int DEFAULT_TIMEOUT = 10000;\n-\t\n-\tprotected static final String ORG_APACHE_FELIX_USERADMIN = \"org.apache.felix.useradmin\";\n-\tprotected static final String ORG_APACHE_FELIX_USERADMIN_FILESTORE = \"org.apache.felix.useradmin.filestore\";\n+    private static final int DEFAULT_TIMEOUT = 10000;\n+\n+    protected static final String ORG_APACHE_FELIX_USERADMIN = \"org.apache.felix.useradmin\";\n+    protected static final String ORG_APACHE_FELIX_USERADMIN_FILESTORE = \"org.apache.felix.useradmin.filestore\";\n+    protected static final String ORG_APACHE_FELIX_USERADMIN_MONGODBSTORE = \"org.apache.felix.useradmin.mongodb\";\n+    protected static final String ORG_MONGODB_MONGO_JAVA_DRIVER = \"org.mongodb.mongo-java-driver\";\n \n     @Inject\n     protected volatile BundleContext m_context;\n \n     @Configuration\n-    public Option[] config() {\n+    public Option[] config()\n+    {\n         return options(\n             bootDelegationPackage(\"sun.*\"),\n             cleanCaches(),\n-            CoreOptions.systemProperty(\"logback.configurationFile\").value(\"file:src/test/resources/logback.xml\"),\n+            CoreOptions.systemProperty(\"logback.configurationFile\").value(\"file:src/test/resources/logback.xml\"), //\n //            CoreOptions.vmOption(\"-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8787\"),\n \n             mavenBundle(\"org.slf4j\", \"slf4j-api\").version(\"1.6.5\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n@@ -79,15 +83,15 @@\n             url(\"link:classpath:META-INF/links/org.apache.geronimo.specs.atinject.link\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n \n             mavenBundle(\"org.apache.felix\", ORG_APACHE_FELIX_USERADMIN).versionAsInProject().startLevel(START_LEVEL_SYSTEM_BUNDLES),\n-            mavenBundle(\"org.apache.felix\", ORG_APACHE_FELIX_USERADMIN_FILESTORE).versionAsInProject().startLevel(START_LEVEL_SYSTEM_BUNDLES),\n-            \n-            junitBundles(),\n-            frameworkStartLevel(START_LEVEL_TEST_BUNDLE),\n-            felix());\n+            mavenBundle(\"org.apache.felix\", ORG_APACHE_FELIX_USERADMIN_FILESTORE).versionAsInProject().noStart(),\n+            mavenBundle(\"org.apache.felix\", ORG_APACHE_FELIX_USERADMIN_MONGODBSTORE).versionAsInProject().noStart(), mavenBundle(\"org.mongodb\", \"mongo-java-driver\").versionAsInProject().noStart(),\n+\n+            junitBundles(), frameworkStartLevel(START_LEVEL_TEST_BUNDLE), felix());\n     }\n \n     @Before\n-    public void setUp() throws Exception {\n+    public void setUp() throws Exception\n+    {\n         assertNotNull(\"No bundle context?!\", m_context);\n     }\n \n@@ -97,55 +101,86 @@ public void setUp() throws Exception {\n      * @return\n      * @throws Exception\n      */\n-    protected <T> T awaitService(String serviceName) throws Exception {\n+    protected <T> T awaitService(String serviceName) throws Exception\n+    {\n         ServiceTracker tracker = new ServiceTracker(m_context, serviceName, null);\n         tracker.open();\n         T result;\n-        try {\n+        try\n+        {\n             result = (T) tracker.waitForService(DEFAULT_TIMEOUT);\n         }\n-        finally {\n+        finally\n+        {\n             tracker.close();\n         }\n         return result;\n     }\n \n+    /**\n+     * @param bsn\n+     * @return\n+     */\n+    protected Bundle findBundle(String bsn)\n+    {\n+        for (Bundle bundle : m_context.getBundles())\n+        {\n+            if (bsn.equals(bundle.getSymbolicName()))\n+            {\n+                return bundle;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    protected Bundle getFileStoreBundle()\n+    {\n+        Bundle b = findBundle(ORG_APACHE_FELIX_USERADMIN_FILESTORE);\n+        assertNotNull(\"Filestore bundle not found?!\", b);\n+        return b;\n+    }\n+\n+    protected Bundle getMongoDBStoreBundle()\n+    {\n+        Bundle b = findBundle(ORG_APACHE_FELIX_USERADMIN_MONGODBSTORE);\n+        assertNotNull(\"MongoDB store bundle not found?!\", b);\n+        return b;\n+    }\n+\n+    protected Bundle getMongoDBBundle()\n+    {\n+        Bundle b = findBundle(ORG_MONGODB_MONGO_JAVA_DRIVER);\n+        assertNotNull(\"MongoDB bundle not found?!\", b);\n+        return b;\n+    }\n+\n     /**\n      * Obtains a service without waiting for it to become available.\n      * @param serviceName\n      * @return\n      * @throws Exception\n      */\n-    protected <T> T getService(String serviceName) throws Exception {\n+    protected <T> T getService(String serviceName) throws Exception\n+    {\n         ServiceTracker tracker = new ServiceTracker(m_context, serviceName, null);\n         tracker.open();\n         T result;\n-        try {\n+        try\n+        {\n             result = (T) tracker.getService();\n         }\n-        finally {\n+        finally\n+        {\n             tracker.close();\n         }\n         return result;\n     }\n-    \n+\n     /**\n      * @return the {@link UserAdmin} service instance.\n      */\n-    protected UserAdmin getUserAdmin() throws Exception {\n+    protected UserAdmin getUserAdmin() throws Exception\n+    {\n         return getService(UserAdmin.class.getName());\n     }\n-\n-    /**\n-     * @param bsn\n-     * @return\n-     */\n-    protected Bundle findBundle(String bsn) {\n-    \tfor (Bundle bundle : m_context.getBundles()) {\n-    \t\tif (bsn.equals(bundle.getSymbolicName())) {\n-    \t\t\treturn bundle;\n-    \t\t}\n-    \t}\n-    \treturn null;\n-    }\n }",
                "raw_url": "https://github.com/apache/felix/raw/1fdf69d9c53fe575114d28b78f4274716bbcee3d/useradmin/itest/src/test/java/org/apache/felix/useradmin/itest/BaseIntegrationTest.java",
                "sha": "feb6995291dd4dce49d822d92d9014a06d036dcf",
                "status": "modified"
            },
            {
                "additions": 47,
                "blob_url": "https://github.com/apache/felix/blob/1fdf69d9c53fe575114d28b78f4274716bbcee3d/useradmin/itest/src/test/java/org/apache/felix/useradmin/itest/FileStoreInitializationTest.java",
                "changes": 91,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/useradmin/itest/src/test/java/org/apache/felix/useradmin/itest/FileStoreInitializationTest.java?ref=1fdf69d9c53fe575114d28b78f4274716bbcee3d",
                "deletions": 44,
                "filename": "useradmin/itest/src/test/java/org/apache/felix/useradmin/itest/FileStoreInitializationTest.java",
                "patch": "@@ -36,51 +36,54 @@\n  * @author <a href=\"mailto:dev@felix.apache.org\">Felix Project Team</a>\n  */\n @RunWith(JUnit4TestRunner.class)\n-public class FileStoreInitializationTest extends BaseIntegrationTest {\n-\n-\t/**\n-\t * Tests that initialization and closing of the repository store is\n-\t * performed correctly.\n-\t */\n-\t@Test\n-\tpublic void testStoreIsInitializedAndClosedProperlyOk() throws Exception {\n-\t    UserAdmin ua = getUserAdmin();\n-\t    \n-\t    // Create two roles...\n-\t    User user = (User) ua.createRole(\"user1\", Role.USER);\n-\t    assertNotNull(user);\n-\t    \n-\t    Group group = (Group) ua.createRole(\"group1\", Role.GROUP);\n-\t    assertNotNull(group);\n-\t    \n-\t    group.addMember(user);\n-\t    group.addRequiredMember(ua.getRole(Role.USER_ANYONE));\n-\n-\t\t// Stop the file store; should persist the two roles...\n-\t\tBundle fileStoreBundle = findBundle(ORG_APACHE_FELIX_USERADMIN_FILESTORE);\n-\t\tassertNotNull(fileStoreBundle);\n-\t\tfileStoreBundle.stop();\n-\n-\t\tThread.sleep(100); // Wait a little until the bundle is really stopped...\n-\t\t\n-\t\t// Retrieve the roles again; should both yield null due to the store not being available...\n-\t\tuser = (User) ua.getRole(\"user1\");\n-\t\tassertNull(user);\n-\n-\t\tgroup = (Group) ua.getRole(\"group1\");\n-\t\tassertNull(group);\n-\t\t\n-\t\t// This will not succeed: no backend to store the user in...\n-\t\tassertNull(ua.createRole(\"user2\", Role.USER));\n-\n-\t\tfileStoreBundle.start();\n-\n-\t\tawaitService(ORG_APACHE_FELIX_USERADMIN_FILESTORE);\n-        \n+public class FileStoreInitializationTest extends BaseIntegrationTest\n+{\n+\n+    /**\n+     * Tests that initialization and closing of the repository store is\n+     * performed correctly.\n+     */\n+    @Test\n+    public void testStoreIsInitializedAndClosedProperlyOk() throws Exception\n+    {\n+        UserAdmin ua = getUserAdmin();\n+        // Start the file store bundle...\n+        Bundle fileStoreBundle = getFileStoreBundle();\n+        fileStoreBundle.start();\n+\n+        // Create two roles...\n+        User user = (User) ua.createRole(\"user1\", Role.USER);\n+        assertNotNull(user);\n+\n+        Group group = (Group) ua.createRole(\"group1\", Role.GROUP);\n+        assertNotNull(group);\n+\n+        group.addMember(user);\n+        group.addRequiredMember(ua.getRole(Role.USER_ANYONE));\n+\n+        // Stop the file store; should persist the two roles...\n+        fileStoreBundle.stop();\n+\n+        Thread.sleep(100); // Wait a little until the bundle is really stopped...\n+\n+        // Retrieve the roles again; should both yield null due to the store not being available...\n+        user = (User) ua.getRole(\"user1\");\n+        assertNull(user);\n+\n+        group = (Group) ua.getRole(\"group1\");\n+        assertNull(group);\n+\n+        // This will not succeed: no backend to store the user in...\n+        assertNull(ua.createRole(\"user2\", Role.USER));\n+\n+        fileStoreBundle.start();\n+\n+        awaitService(ORG_APACHE_FELIX_USERADMIN_FILESTORE);\n+\n         // Retrieve the roles again; should both yield valid values...\n         user = (User) ua.getRole(\"user1\");\n         assertNotNull(user);\n-        \n+\n         group = (Group) ua.getRole(\"group1\");\n         assertNotNull(group);\n \n@@ -93,8 +96,8 @@ public void testStoreIsInitializedAndClosedProperlyOk() throws Exception {\n         assertNotNull(members);\n         assertEquals(1, members.length);\n         assertEquals(Role.USER_ANYONE, members[0].getName());\n-        \n+\n         user = (User) ua.getRole(\"user2\");\n         assertNull(user);\n-\t}\n+    }\n }",
                "raw_url": "https://github.com/apache/felix/raw/1fdf69d9c53fe575114d28b78f4274716bbcee3d/useradmin/itest/src/test/java/org/apache/felix/useradmin/itest/FileStoreInitializationTest.java",
                "sha": "fd854e0970faffaff532136361dea808864e6254",
                "status": "modified"
            },
            {
                "additions": 201,
                "blob_url": "https://github.com/apache/felix/blob/1fdf69d9c53fe575114d28b78f4274716bbcee3d/useradmin/itest/src/test/java/org/apache/felix/useradmin/itest/MongoDBStoreTest.java",
                "changes": 201,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/useradmin/itest/src/test/java/org/apache/felix/useradmin/itest/MongoDBStoreTest.java?ref=1fdf69d9c53fe575114d28b78f4274716bbcee3d",
                "deletions": 0,
                "filename": "useradmin/itest/src/test/java/org/apache/felix/useradmin/itest/MongoDBStoreTest.java",
                "patch": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.felix.useradmin.itest;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.ops4j.pax.exam.junit.JUnit4TestRunner;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.BundleException;\n+import org.osgi.framework.ServiceReference;\n+import org.osgi.service.cm.ManagedService;\n+import org.osgi.service.useradmin.Role;\n+import org.osgi.service.useradmin.User;\n+import org.osgi.service.useradmin.UserAdmin;\n+\n+import com.mongodb.BasicDBObject;\n+import com.mongodb.CommandResult;\n+import com.mongodb.DB;\n+import com.mongodb.DBCollection;\n+import com.mongodb.Mongo;\n+import com.mongodb.WriteConcern;\n+\n+/**\n+ * Main integration test for the user admin service.\n+ * \n+ * @author <a href=\"mailto:dev@felix.apache.org\">Felix Project Team</a>\n+ */\n+@RunWith(JUnit4TestRunner.class)\n+public class MongoDBStoreTest extends BaseIntegrationTest\n+{\n+    /**\n+     * Tests that fetching an empty role without properties or other roles does not cause a NPE.\n+     */\n+    @Test\n+    public void testFelix4399_FetchEmptyRoleOk() throws Exception\n+    {\n+        UserAdmin ua = getUserAdmin();\n+\n+        String roleName = \"emptyRole\";\n+\n+        if (canRunTest())\n+        {\n+            Role emptyRole = ua.createRole(roleName, Role.USER);\n+            assertNotNull(\"Collection not empty?!\", emptyRole);\n+\n+            Role readRole = ua.getRole(roleName);\n+\n+            assertNotNull(\"Unable to read back created empty role?!\", readRole);\n+            assertEquals(\"Names not equal?!\", emptyRole.getName(), readRole.getName());\n+            assertEquals(\"Types not equal?!\", emptyRole.getType(), readRole.getType());\n+\n+            Role[] readRoles = ua.getRoles(null);\n+\n+            assertNotNull(\"Unable to read back created empty role?!\", readRoles);\n+            assertEquals(1, readRoles.length);\n+        }\n+    }\n+\n+    /**\n+     * Tests that creating a new role returns the actual created role.\n+     */\n+    @Test\n+    public void testFelix4400_CreateRoleReturnsNonNullOk() throws Exception\n+    {\n+        UserAdmin ua = getUserAdmin();\n+\n+        String roleName = \"newRole\";\n+\n+        if (canRunTest())\n+        {\n+            Role newRole = ua.createRole(roleName, Role.USER);\n+            assertNotNull(\"Felix-4400 not resolved?!\", newRole);\n+\n+            assertEquals(\"Names not equal?!\", roleName, newRole.getName());\n+            assertEquals(\"Types not equal?!\", Role.USER, newRole.getType());\n+        }\n+    }\n+\n+    /**\n+     * Tests that removing a role works correctly.\n+     */\n+    @Test\n+    public void testRemoveRoleOk() throws Exception\n+    {\n+        UserAdmin ua = getUserAdmin();\n+\n+        String roleName = \"newRole\";\n+        Role[] readRoles;\n+\n+        if (canRunTest())\n+        {\n+            Role role = ua.createRole(roleName, Role.USER);\n+            assertNotNull(\"Collection not empty?!\", role);\n+\n+            readRoles = ua.getRoles(null);\n+\n+            assertNotNull(\"No roles stored?!\", readRoles);\n+            assertEquals(1, readRoles.length);\n+\n+            ua.removeRole(roleName);\n+\n+            readRoles = ua.getRoles(null);\n+\n+            assertNull(\"Still roles stored?!\", readRoles);\n+        }\n+    }\n+\n+    /**\n+     * Tests that removing a role works correctly.\n+     */\n+    @Test\n+    public void testUpdateRoleOk() throws Exception\n+    {\n+        UserAdmin ua = getUserAdmin();\n+\n+        String roleName = \"role1\";\n+        Role[] readRoles;\n+\n+        if (canRunTest())\n+        {\n+            User role = (User) ua.createRole(roleName, Role.USER);\n+            assertNotNull(\"Collection not empty?!\", role);\n+\n+            readRoles = ua.getRoles(null);\n+\n+            assertNotNull(\"No roles stored?!\", readRoles);\n+            assertEquals(1, readRoles.length);\n+\n+            role.getProperties().put(\"key\", \"value\");\n+\n+            Thread.sleep(100); // Wait a little to ensure everything is written...\n+\n+            readRoles = ua.getRoles(\"(key=value)\");\n+\n+            assertNotNull(\"Role not updated?!\", readRoles);\n+            assertEquals(1, readRoles.length);\n+        }\n+    }\n+\n+    /**\n+     * Sets up MongoDB and tries to clear the useradmin collection. When this fails, it is assumed that no MongoDB service is available.\n+     */\n+    private boolean canRunTest() throws BundleException\n+    {\n+        Bundle mongoBundle = getMongoDBBundle();\n+        mongoBundle.start();\n+\n+        Bundle mongoStoreBundle = getMongoDBStoreBundle();\n+        mongoStoreBundle.start();\n+\n+        // Provision an empty configuration...\n+        BundleContext context = mongoStoreBundle.getBundleContext();\n+\n+        ServiceReference serviceRef = context.getServiceReference(ManagedService.class.getName());\n+        assertNotNull(serviceRef);\n+\n+        ManagedService service = (ManagedService) context.getService(serviceRef);\n+        try\n+        {\n+            service.updated(null);\n+\n+            Mongo mongo = new Mongo();\n+            DB db = mongo.getDB(\"ua_repo\");\n+            DBCollection collection = db.getCollection(\"useradmin\");\n+            // we always get a collection back, regardless if there is an actual MongoDB listening, hence we should do\n+            // some actual calls that cause a connection to MongoDB to be created...\n+            collection.remove(new BasicDBObject(), WriteConcern.SAFE);\n+\n+            CommandResult lastError = db.getLastError();\n+\n+            return (lastError.getException() == null && collection.getCount() == 0L);\n+        }\n+        catch (Exception e)\n+        {\n+            // Ignore; apparently, we failed to connect to MongoDB...\n+        }\n+\n+        return false;\n+    }\n+}",
                "raw_url": "https://github.com/apache/felix/raw/1fdf69d9c53fe575114d28b78f4274716bbcee3d/useradmin/itest/src/test/java/org/apache/felix/useradmin/itest/MongoDBStoreTest.java",
                "sha": "371d0960860048cf628b06b9b23a221de668024f",
                "status": "added"
            },
            {
                "additions": 108,
                "blob_url": "https://github.com/apache/felix/blob/1fdf69d9c53fe575114d28b78f4274716bbcee3d/useradmin/itest/src/test/java/org/apache/felix/useradmin/itest/UserAdminIntegrationTest.java",
                "changes": 212,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/useradmin/itest/src/test/java/org/apache/felix/useradmin/itest/UserAdminIntegrationTest.java?ref=1fdf69d9c53fe575114d28b78f4274716bbcee3d",
                "deletions": 104,
                "filename": "useradmin/itest/src/test/java/org/apache/felix/useradmin/itest/UserAdminIntegrationTest.java",
                "patch": "@@ -35,108 +35,112 @@\n  * @author <a href=\"mailto:dev@felix.apache.org\">Felix Project Team</a>\n  */\n @RunWith(JUnit4TestRunner.class)\n-public class UserAdminIntegrationTest extends BaseIntegrationTest {\n-\t\n-\t/**\n-\t * Tests that stopping a filled store and starting it again will cause it to\n-\t * properly restore its state.\n-\t */\n-\t@Test\n-\tpublic void testFelix3735_StopRunningStoreRetainsDataOk() throws Exception {\n-\t\tfinal String userName = \"testUser\";\n-\t\tfinal String groupName = \"testGroup\";\n-\n-\t\tUserAdmin userAdmin = awaitService(UserAdmin.class.getName());\n-\n-\t\t// Fill the user admin with some data...\n-\t\tUser testUser = (User) userAdmin.createRole(userName, Role.USER);\n-\t\ttestUser.getProperties().put(\"key\", \"value\");\n-\n-\t\tGroup testGroup = (Group) userAdmin.createRole(groupName, Role.GROUP);\n-\t\ttestGroup.addMember(testUser);\n-\n-\t\t// Stop the file store...\n-\t\tBundle fileStoreBundle = findBundle(ORG_APACHE_FELIX_USERADMIN_FILESTORE);\n-\t\tassertNotNull(fileStoreBundle);\n-\t\tfileStoreBundle.stop();\n-\n-\t\t// retrieve the useradmin again...\n-\t\tuserAdmin = awaitService(UserAdmin.class.getName());\n-\n-\t\t// Verify the user + group are gone (no store available)...\n-\t\tassertNull(userAdmin.getRole(userName));\n-\t\tassertNull(userAdmin.getRole(groupName));\n-\n-\t\t// Start the file store...\n-\t\tfileStoreBundle.start();\n-\n-\t\t// Verify the user + group are gone (no store available)...\n-\t\tUser readUser = (User) userAdmin.getRole(userName);\n-\t\tassertNotNull(readUser);\n-\t\tassertEquals(userName, readUser.getName());\n-\t\tassertEquals(\"value\", readUser.getProperties().get(\"key\"));\n-\n-\t\tGroup readGroup = (Group) userAdmin.getRole(groupName);\n-\t\tassertNotNull(readGroup);\n-\t\tassertEquals(groupName, readGroup.getName());\n-\t\tassertEquals(1, readGroup.getMembers().length);\n-\t\tassertEquals(readUser, readGroup.getMembers()[0]);\n-\t}\n-\n-\t/**\n-\t * Tests that starting the file store <em>after</em> the user admin service\n-\t * is started will cause it to be properly initialized.\n-\t */\n-\t@Test\n-\tpublic void testFelix3735_StartStoreAfterUserAdminInitializesOk() throws Exception {\n-\t\tfinal String userName = \"anotherTestUser\";\n-\t\tfinal String groupName = \"anotherTestGroup\";\n-\n-\t\tUserAdmin userAdmin = awaitService(UserAdmin.class.getName());\n-\n-\t\t// Fill the user admin with some data...\n-\t\tUser testUser = (User) userAdmin.createRole(userName, Role.USER);\n-\t\ttestUser.getProperties().put(\"key\", \"value\");\n-\n-\t\tGroup testGroup = (Group) userAdmin.createRole(groupName, Role.GROUP);\n-\t\ttestGroup.addMember(testUser);\n-\n-\t\t// Stop the file store...\n-\t\tBundle fileStoreBundle = findBundle(ORG_APACHE_FELIX_USERADMIN_FILESTORE);\n-\t\tassertNotNull(fileStoreBundle);\n-\t\tfileStoreBundle.stop();\n-\n-\t\tBundle userAdminBundle = findBundle(ORG_APACHE_FELIX_USERADMIN);\n-\t\tassertNotNull(userAdminBundle);\n-\t\tuserAdminBundle.stop();\n-\n-\t\t// Obtain user admin service again; shouldn't be available...\n-\t\tuserAdmin = getService(UserAdmin.class.getName());\n-\t\tassertNull(userAdmin);\n-\n-\t\tuserAdminBundle.start();\n-\n-\t\t// Obtain user admin service again; should be available now...\n-\t\tuserAdmin = awaitService(UserAdmin.class.getName());\n-\t\tassertNotNull(userAdmin);\n-\n-\t\t// Verify the user + group are gone (no store available)...\n-\t\tassertNull(userAdmin.getRole(userName));\n-\t\tassertNull(userAdmin.getRole(groupName));\n-\n-\t\t// Start the file store...\n-\t\tfileStoreBundle.start();\n-\n-\t\t// Verify the user + group are gone (no store available)...\n-\t\tUser readUser = (User) userAdmin.getRole(userName);\n-\t\tassertNotNull(readUser);\n-\t\tassertEquals(userName, readUser.getName());\n-\t\tassertEquals(\"value\", readUser.getProperties().get(\"key\"));\n-\n-\t\tGroup readGroup = (Group) userAdmin.getRole(groupName);\n-\t\tassertNotNull(readGroup);\n-\t\tassertEquals(groupName, readGroup.getName());\n-\t\tassertEquals(1, readGroup.getMembers().length);\n-\t\tassertEquals(readUser, readGroup.getMembers()[0]);\n-\t}\n+public class UserAdminIntegrationTest extends BaseIntegrationTest\n+{\n+    /**\n+     * Tests that stopping a filled store and starting it again will cause it to\n+     * properly restore its state.\n+     */\n+    @Test\n+    public void testFelix3735_StopRunningStoreRetainsDataOk() throws Exception\n+    {\n+        final String userName = \"testUser\";\n+        final String groupName = \"testGroup\";\n+\n+        UserAdmin userAdmin = awaitService(UserAdmin.class.getName());\n+        Bundle fileStoreBundle = getFileStoreBundle();\n+        // Start a suitable storage service...\n+        fileStoreBundle.start();\n+\n+        // Fill the user admin with some data...\n+        User testUser = (User) userAdmin.createRole(userName, Role.USER);\n+        testUser.getProperties().put(\"key\", \"value\");\n+\n+        Group testGroup = (Group) userAdmin.createRole(groupName, Role.GROUP);\n+        testGroup.addMember(testUser);\n+\n+        // Stop the file store...\n+        fileStoreBundle.stop();\n+\n+        // retrieve the useradmin again...\n+        userAdmin = awaitService(UserAdmin.class.getName());\n+\n+        // Verify the user + group are gone (no store available)...\n+        assertNull(userAdmin.getRole(userName));\n+        assertNull(userAdmin.getRole(groupName));\n+\n+        // Start the file store...\n+        fileStoreBundle.start();\n+\n+        // Verify the user + group are gone (no store available)...\n+        User readUser = (User) userAdmin.getRole(userName);\n+        assertNotNull(readUser);\n+        assertEquals(userName, readUser.getName());\n+        assertEquals(\"value\", readUser.getProperties().get(\"key\"));\n+\n+        Group readGroup = (Group) userAdmin.getRole(groupName);\n+        assertNotNull(readGroup);\n+        assertEquals(groupName, readGroup.getName());\n+        assertEquals(1, readGroup.getMembers().length);\n+        assertEquals(readUser, readGroup.getMembers()[0]);\n+    }\n+\n+    /**\n+     * Tests that starting the file store <em>after</em> the user admin service\n+     * is started will cause it to be properly initialized.\n+     */\n+    @Test\n+    public void testFelix3735_StartStoreAfterUserAdminInitializesOk() throws Exception\n+    {\n+        final String userName = \"anotherTestUser\";\n+        final String groupName = \"anotherTestGroup\";\n+\n+        UserAdmin userAdmin = awaitService(UserAdmin.class.getName());\n+        Bundle fileStoreBundle = getFileStoreBundle();\n+        // Start a suitable storage service...\n+        fileStoreBundle.start();\n+\n+        // Fill the user admin with some data...\n+        User testUser = (User) userAdmin.createRole(userName, Role.USER);\n+        testUser.getProperties().put(\"key\", \"value\");\n+\n+        Group testGroup = (Group) userAdmin.createRole(groupName, Role.GROUP);\n+        testGroup.addMember(testUser);\n+\n+        // Stop the file store...\n+        fileStoreBundle.stop();\n+\n+        Bundle userAdminBundle = findBundle(ORG_APACHE_FELIX_USERADMIN);\n+        assertNotNull(userAdminBundle);\n+        userAdminBundle.stop();\n+\n+        // Obtain user admin service again; shouldn't be available...\n+        userAdmin = getService(UserAdmin.class.getName());\n+        assertNull(userAdmin);\n+\n+        userAdminBundle.start();\n+\n+        // Obtain user admin service again; should be available now...\n+        userAdmin = awaitService(UserAdmin.class.getName());\n+        assertNotNull(userAdmin);\n+\n+        // Verify the user + group are gone (no store available)...\n+        assertNull(userAdmin.getRole(userName));\n+        assertNull(userAdmin.getRole(groupName));\n+\n+        // Start the file store...\n+        fileStoreBundle.start();\n+\n+        // Verify the user + group are gone (no store available)...\n+        User readUser = (User) userAdmin.getRole(userName);\n+        assertNotNull(readUser);\n+        assertEquals(userName, readUser.getName());\n+        assertEquals(\"value\", readUser.getProperties().get(\"key\"));\n+\n+        Group readGroup = (Group) userAdmin.getRole(groupName);\n+        assertNotNull(readGroup);\n+        assertEquals(groupName, readGroup.getName());\n+        assertEquals(1, readGroup.getMembers().length);\n+        assertEquals(readUser, readGroup.getMembers()[0]);\n+    }\n }",
                "raw_url": "https://github.com/apache/felix/raw/1fdf69d9c53fe575114d28b78f4274716bbcee3d/useradmin/itest/src/test/java/org/apache/felix/useradmin/itest/UserAdminIntegrationTest.java",
                "sha": "c09916e8bd9534e14619a14b4041710599f878b3",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/felix/blob/1fdf69d9c53fe575114d28b78f4274716bbcee3d/useradmin/mongodb/src/main/java/org/apache/felix/useradmin/mongodb/MongoDBStore.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/useradmin/mongodb/src/main/java/org/apache/felix/useradmin/mongodb/MongoDBStore.java?ref=1fdf69d9c53fe575114d28b78f4274716bbcee3d",
                "deletions": 1,
                "filename": "useradmin/mongodb/src/main/java/org/apache/felix/useradmin/mongodb/MongoDBStore.java",
                "patch": "@@ -147,7 +147,8 @@ public Role addRole(String roleName, int type) throws MongoException {\n             result.getLastError().throwOnError();\n         }\n \n-        return role;\n+        // FELIX-4400: ensure we return the correct role...\n+        return getRole(roleName);\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/felix/raw/1fdf69d9c53fe575114d28b78f4274716bbcee3d/useradmin/mongodb/src/main/java/org/apache/felix/useradmin/mongodb/MongoDBStore.java",
                "sha": "fd80e86e6928c910b21df4829a8934641f8fdf2a",
                "status": "modified"
            },
            {
                "additions": 81,
                "blob_url": "https://github.com/apache/felix/blob/1fdf69d9c53fe575114d28b78f4274716bbcee3d/useradmin/mongodb/src/main/java/org/apache/felix/useradmin/mongodb/MongoSerializerHelper.java",
                "changes": 131,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/useradmin/mongodb/src/main/java/org/apache/felix/useradmin/mongodb/MongoSerializerHelper.java?ref=1fdf69d9c53fe575114d28b78f4274716bbcee3d",
                "deletions": 50,
                "filename": "useradmin/mongodb/src/main/java/org/apache/felix/useradmin/mongodb/MongoSerializerHelper.java",
                "patch": "@@ -34,26 +34,28 @@\n /**\n  * Provides a helper class for (de)serializing data to/from MongoDB.\n  */\n-final class MongoSerializerHelper {\n-    \n+final class MongoSerializerHelper\n+{\n+\n     static final String TYPE = \"type\";\n     static final String NAME = \"name\";\n-    \n+\n     static final String PROPERTIES = \"properties\";\n     static final String CREDENTIALS = \"credentials\";\n     static final String MEMBERS = \"members\";\n     static final String REQUIRED_MEMBERS = \"requiredMembers\";\n-    \n+\n     static final String SET = \"$set\";\n-    \n+\n     private final RoleProvider m_roleProvider;\n-    \n+\n     /**\n      * Creates a new {@link MongoSerializerHelper} instance.\n      * \n      * @param roleProvider the role provider to use, cannot be <code>null</code>.\n      */\n-    public MongoSerializerHelper(RoleProvider roleProvider) {\n+    public MongoSerializerHelper(RoleProvider roleProvider)\n+    {\n         m_roleProvider = roleProvider;\n     }\n \n@@ -63,29 +65,34 @@ public MongoSerializerHelper(RoleProvider roleProvider) {\n      * @param object the {@link DBObject} to convert, cannot be <code>null</code>.\n      * @return a {@link Role} instance, never <code>null</code>.\n      */\n-    public Role deserialize(DBObject object) {\n+    public Role deserialize(DBObject object)\n+    {\n         int type = ((Integer) object.get(TYPE)).intValue();\n         String name = (String) object.get(NAME);\n \n         Role result = RoleFactory.createRole(type, name);\n         // Read the generic properties of the role...\n         deserializeDictionary(result.getProperties(), (DBObject) object.get(PROPERTIES));\n-        \n-        if ((Role.GROUP == type) || (Role.USER == type)) {\n+\n+        if ((Role.GROUP == type) || (Role.USER == type))\n+        {\n             // This is safe, as Group extends from User...\n             deserializeDictionary(((User) result).getCredentials(), (DBObject) object.get(CREDENTIALS));\n \n-            if (Role.GROUP == type) {\n-                for (Role member : getRoles((BasicDBList) object.get(MEMBERS))) {\n+            if (Role.GROUP == type)\n+            {\n+                for (Role member : getRoles((BasicDBList) object.get(MEMBERS)))\n+                {\n                     ((Group) result).addMember(member);\n                 }\n \n-                for (Role member : getRoles((BasicDBList) object.get(REQUIRED_MEMBERS))) {\n+                for (Role member : getRoles((BasicDBList) object.get(REQUIRED_MEMBERS)))\n+                {\n                     ((Group) result).addRequiredMember(member);\n                 }\n             }\n         }\n-        \n+\n         return result;\n     }\n \n@@ -95,24 +102,27 @@ public Role deserialize(DBObject object) {\n      * @param role the {@link Role} to serialize, cannot be <code>null</code> (unchecked!).\n      * @return a {@link DBObject} representing the given {@link Role}, never <code>null</code>.\n      */\n-    public DBObject serialize(Role role) {\n+    public DBObject serialize(Role role)\n+    {\n         BasicDBObject data = new BasicDBObject();\n-        \n+\n         int type = role.getType();\n-        \n+\n         data.put(TYPE, type);\n         data.put(NAME, role.getName());\n \n         data.put(PROPERTIES, serializeDictionary(role.getProperties()));\n-        if ((Role.GROUP == type) || (Role.USER == type)) {\n+        if ((Role.GROUP == type) || (Role.USER == type))\n+        {\n             data.put(CREDENTIALS, serializeDictionary(((User) role).getCredentials()));\n \n-            if (Role.GROUP == type) {\n+            if (Role.GROUP == type)\n+            {\n                 data.put(MEMBERS, getRoleNames(((Group) role).getMembers()));\n                 data.put(REQUIRED_MEMBERS, getRoleNames(((Group) role).getRequiredMembers()));\n             }\n         }\n-        \n+\n         return data;\n     }\n \n@@ -123,36 +133,40 @@ public DBObject serialize(Role role) {\n      * @param type the type of the role to serialize.\n      * @return a {@link DBObject} representing the role with the given name and type, never <code>null</code>.\n      */\n-    public DBObject serialize(String roleName, int type) {\n+    public DBObject serialize(String roleName, int type)\n+    {\n         BasicDBObject data = new BasicDBObject();\n-        \n+\n         data.put(TYPE, type);\n         data.put(NAME, roleName);\n-        \n+\n         return data;\n     }\n-    \n+\n     /**\n      * Creates a serialized version of the given {@link Role} to be used in an update statement.\n      * \n      * @param role the {@link Role} to update, cannot be <code>null</code>.\n      * @return a {@link DBObject} representing an update statement for the given {@link Role}.\n      */\n-    public DBObject serializeUpdate(Role role) {\n+    public DBObject serializeUpdate(Role role)\n+    {\n         int type = role.getType();\n-        \n+\n         BasicDBObject changeSet = new BasicDBObject();\n-        \n+\n         changeSet.put(PROPERTIES, serializeDictionary(role.getProperties()));\n-        if ((Role.GROUP == type) || (Role.USER == type)) {\n+        if ((Role.GROUP == type) || (Role.USER == type))\n+        {\n             changeSet.put(CREDENTIALS, serializeDictionary(((User) role).getCredentials()));\n \n-            if (Role.GROUP == type) {\n+            if (Role.GROUP == type)\n+            {\n                 changeSet.put(MEMBERS, getRoleNames(((Group) role).getMembers()));\n                 changeSet.put(REQUIRED_MEMBERS, getRoleNames(((Group) role).getRequiredMembers()));\n             }\n         }\n-        \n+\n         return new BasicDBObject(SET, changeSet);\n     }\n \n@@ -163,9 +177,11 @@ public DBObject serializeUpdate(Role role) {\n      * @return a member instance, never <code>null</code>.\n      * @throws MongoException in case the requested member was not found (or any other MongoDB exception).\n      */\n-    final Role findExistingMember(String name) {\n+    final Role findExistingMember(String name)\n+    {\n         Role result = m_roleProvider.getRole(name);\n-        if (result == null) {\n+        if (result == null)\n+        {\n             throw new MongoException(\"No such role: \" + name);\n         }\n         return result;\n@@ -174,40 +190,53 @@ final Role findExistingMember(String name) {\n     /**\n      * Deserializes the given {@link DBObject} into the given {@link Dictionary}.\n      * \n-     * @param dictionary the dictionary to fill;\n-     * @param object the {@link DBObject} to deserialize.\n+     * @param dictionary the dictionary to fill, cannot be <code>null</code>;\n+     * @param object the {@link DBObject} to deserialize, can be <code>null</code>.\n      */\n-    private void deserializeDictionary(Dictionary dictionary, DBObject object) {\n-        for (String key : object.keySet()) {\n-            dictionary.put(KeyCodec.decode(key), object.get(key));\n+    private void deserializeDictionary(Dictionary dictionary, DBObject object)\n+    {\n+        // FELIX-4399: MongoDB does return null for empty properties...\n+        if (object != null)\n+        {\n+            for (String key : object.keySet())\n+            {\n+                dictionary.put(KeyCodec.decode(key), object.get(key));\n+            }\n         }\n     }\n-    \n+\n     /**\n      * Serializes a given array of {@link Role}s to an list for storing in a {@link DBObject}.\n      * \n      * @param members the {@link Role}s to serialize, cannot be <code>null</code>.\n      * @return the \"serialized\" array, never <code>null</code>.\n      */\n-    private List<String> getRoleNames(Role[] members) {\n+    private List<String> getRoleNames(Role[] members)\n+    {\n         List<String> result = new ArrayList<String>();\n-        if (members != null) {\n-            for (Role member : members) {\n+        if (members != null)\n+        {\n+            for (Role member : members)\n+            {\n                 result.add(member.getName());\n             }\n         }\n         return result;\n     }\n-    \n+\n     /**\n      * Returns all roles mentioned in the given list.\n      * \n-     * @param list the list with role names to convert.\n+     * @param list the list with role names to convert, can be <code>null</code>.\n      * @return a list with {@link Role}s, never <code>null</code>.\n      */\n-    private List<Role> getRoles(BasicDBList list) {\n+    private List<Role> getRoles(BasicDBList list)\n+    {\n         List<Role> result = new ArrayList<Role>();\n-        for (int i = 0, size = list.size(); i < size; i++) {\n+        // FELIX-4399: MongoDB does return null for empty properties...\n+        int size = (list == null) ? 0 : list.size();\n+        for (int i = 0; i < size; i++)\n+        {\n             final String memberName = (String) list.get(i);\n             result.add(findExistingMember(memberName));\n         }\n@@ -220,17 +249,19 @@ private void deserializeDictionary(Dictionary dictionary, DBObject object) {\n      * @param properties the {@link Dictionary} to serialize, cannot be <code>null</code>.\n      * @return the serialized dictionary, never <code>null</code>. \n      */\n-    private DBObject serializeDictionary(Dictionary properties) {\n+    private DBObject serializeDictionary(Dictionary properties)\n+    {\n         BasicDBObject result = new BasicDBObject();\n-        \n+\n         Enumeration<String> keysEnum = properties.keys();\n-        while (keysEnum.hasMoreElements()) {\n+        while (keysEnum.hasMoreElements())\n+        {\n             String key = keysEnum.nextElement();\n             Object value = properties.get(key);\n-            \n+\n             result.append(KeyCodec.encode(key), value);\n         }\n-        \n+\n         return result;\n     }\n }",
                "raw_url": "https://github.com/apache/felix/raw/1fdf69d9c53fe575114d28b78f4274716bbcee3d/useradmin/mongodb/src/main/java/org/apache/felix/useradmin/mongodb/MongoSerializerHelper.java",
                "sha": "06a80052edcb85daf092b727872d05e5deb7c65d",
                "status": "modified"
            }
        ],
        "message": "FELIX-4399, FELIX-4400: UserAdmin MongoDB store:\n\n- when creating a new role, we should return the created role if we\n  have good indications that the creation was successful;\n- MongoDB returns null for empty properties, causing NPEs on several\n  occassions.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1560612 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/b869fdd11790092b409b56539e2c5eb6365709c7",
        "patched_files": [
            "MongoSerializerHelper.java",
            "pom.java",
            "MongoDBStore.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "FileStoreInitializationTest.java",
            "UserAdminIntegrationTest.java",
            "BaseIntegrationTest.java",
            "MongoDBStoreTest.java"
        ]
    },
    "felix_2280d06": {
        "bug_id": "felix_2280d06",
        "commit": "https://github.com/apache/felix/commit/2280d0671f0e1fb40f33e5f287f35f8eec4d48ea",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/felix/blob/2280d0671f0e1fb40f33e5f287f35f8eec4d48ea/webconsole/src/main/java/org/apache/felix/webconsole/AbstractWebConsolePlugin.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/webconsole/src/main/java/org/apache/felix/webconsole/AbstractWebConsolePlugin.java?ref=2280d0671f0e1fb40f33e5f287f35f8eec4d48ea",
                "deletions": 0,
                "filename": "webconsole/src/main/java/org/apache/felix/webconsole/AbstractWebConsolePlugin.java",
                "patch": "@@ -346,6 +346,14 @@ private boolean spoolResource( HttpServletRequest request, HttpServletResponse r\n             URLConnection connection = url.openConnection();\n             ins = connection.getInputStream();\n \n+            // FELIX-2017 Equinox may return an URL for a non-existing\n+            // resource but then (instead of throwing) return null on\n+            // getInputStream. We should account for this situation and\n+            // just assume a non-existing resource in this case.\n+            if (ins == null) {\n+                return false;\n+            }\n+\n             // check whether we may return 304/UNMODIFIED\n             long lastModified = connection.getLastModified();\n             if ( lastModified > 0 )",
                "raw_url": "https://github.com/apache/felix/raw/2280d0671f0e1fb40f33e5f287f35f8eec4d48ea/webconsole/src/main/java/org/apache/felix/webconsole/AbstractWebConsolePlugin.java",
                "sha": "693aa70906eb82a9f8ae88e35aef3e11047841b0",
                "status": "modified"
            }
        ],
        "message": "FELIX-2017 prevent NullPointerException if URLConnection.getInputStream() returns\nnull instead of throwing for a non-existing resource.\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@903968 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/6f5f79c12e18607cd0d566dac27d53dfc40845ca",
        "patched_files": [
            "AbstractWebConsolePlugin.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "AbstractWebConsolePluginTest.java"
        ]
    },
    "felix_23b58cf": {
        "bug_id": "felix_23b58cf",
        "commit": "https://github.com/apache/felix/commit/23b58cf4a7d3cc9333906c050e246f3934252c1c",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/felix/blob/23b58cf4a7d3cc9333906c050e246f3934252c1c/gogo/jline/src/main/java/org/apache/felix/gogo/jline/BaseConverters.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/gogo/jline/src/main/java/org/apache/felix/gogo/jline/BaseConverters.java?ref=23b58cf4a7d3cc9333906c050e246f3934252c1c",
                "deletions": 1,
                "filename": "gogo/jline/src/main/java/org/apache/felix/gogo/jline/BaseConverters.java",
                "patch": "@@ -29,6 +29,7 @@\n import java.lang.reflect.Method;\n import java.lang.reflect.Proxy;\n import java.util.Arrays;\n+import java.util.Collections;\n \n public class BaseConverters implements Converter {\n \n@@ -63,7 +64,8 @@ public Object invoke(Object proxy, Method method, Object[] args)\n                                         .bindTo(proxy)\n                                         .invokeWithArguments(args);\n                             } else {\n-                                return command.execute(null, Arrays.asList(args));\n+                                return command.execute(null,\n+                                        args != null ? Arrays.asList(args) : Collections.emptyList());\n                             }\n                         }\n                     });",
                "raw_url": "https://github.com/apache/felix/raw/23b58cf4a7d3cc9333906c050e246f3934252c1c/gogo/jline/src/main/java/org/apache/felix/gogo/jline/BaseConverters.java",
                "sha": "a5a545af92952efa321e8fb537f451d8ffaf12a9",
                "status": "modified"
            }
        ],
        "message": "[FELIX-5463] [gogo][jline] Fix possible NPE in converter\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1779308 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/7c5c20d8748a51fd91559c80de426a6a5812a07f",
        "patched_files": [
            "BaseConverters.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "BaseConvertersTest.java"
        ]
    },
    "felix_2683837": {
        "bug_id": "felix_2683837",
        "commit": "https://github.com/apache/felix/commit/2683837ec7826cd7fedcc53ff206dda7716738aa",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/felix/blob/2683837ec7826cd7fedcc53ff206dda7716738aa/resolver/src/main/java/org/apache/felix/resolver/Candidates.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/resolver/src/main/java/org/apache/felix/resolver/Candidates.java?ref=2683837ec7826cd7fedcc53ff206dda7716738aa",
                "deletions": 1,
                "filename": "resolver/src/main/java/org/apache/felix/resolver/Candidates.java",
                "patch": "@@ -939,7 +939,12 @@ public ResolutionError prepare()\n                 CandidateSelector cands = m_candidateMap.get(origReq);\n                 if (cands != null)\n                 {\n-                    m_candidateMap.put(r, cands.copy());\n+                    if (cands instanceof ShadowList)\n+                    {\n+                        m_candidateMap.put(r, ShadowList.deepCopy((ShadowList) cands));\n+                    } else {\n+                        m_candidateMap.put(r, cands.copy());\n+                    }\n                     for (Capability cand : cands.getRemainingCandidates())\n                     {\n                         Set<Requirement> dependents = m_dependentMap.get(cand);",
                "raw_url": "https://github.com/apache/felix/raw/2683837ec7826cd7fedcc53ff206dda7716738aa/resolver/src/main/java/org/apache/felix/resolver/Candidates.java",
                "sha": "254972922bc91f2fc7557c8f2b35e1c29878ca7a",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/felix/blob/2683837ec7826cd7fedcc53ff206dda7716738aa/resolver/src/main/java/org/apache/felix/resolver/WrappedCapability.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/resolver/src/main/java/org/apache/felix/resolver/WrappedCapability.java?ref=2683837ec7826cd7fedcc53ff206dda7716738aa",
                "deletions": 1,
                "filename": "resolver/src/main/java/org/apache/felix/resolver/WrappedCapability.java",
                "patch": "@@ -15,6 +15,8 @@\n  */\n package org.apache.felix.resolver;\n \n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.Map;\n import org.osgi.framework.namespace.PackageNamespace;\n import org.osgi.resource.Capability;\n@@ -25,11 +27,25 @@\n {\n     private final Resource m_host;\n     private final Capability m_cap;\n+    private final Map<String, Object> m_augmentedAttrs;\n \n     public WrappedCapability(Resource host, Capability cap)\n     {\n         m_host = host;\n         m_cap = cap;\n+        if (\"osgi.content\".equals(m_cap.getNamespace())) {\n+            // Augment the attributes only for osgi.content namespace.\n+            // This is done to work around issues with wrapper resources equality tests.\n+            // Note this is depends on the implementation details of the ResolveContext to actually\n+            // check the osgi.content capability.\n+            Map<String, Object> augmentedDirs = new HashMap<String, Object>(m_cap.getAttributes());\n+            Object wrapperUrl = augmentedDirs.get(\"url\");\n+            wrapperUrl = \"wrapper:\" + wrapperUrl;\n+            augmentedDirs.put(\"url\", wrapperUrl);\n+            m_augmentedAttrs = Collections.unmodifiableMap(augmentedDirs);\n+        } else {\n+            m_augmentedAttrs = m_cap.getAttributes();\n+        }\n     }\n \n     @Override\n@@ -86,7 +102,7 @@ public String getNamespace()\n \n     public Map<String, Object> getAttributes()\n     {\n-        return m_cap.getAttributes();\n+        return m_augmentedAttrs;\n     }\n \n // TODO: RFC-112 - Need impl-specific type.",
                "raw_url": "https://github.com/apache/felix/raw/2683837ec7826cd7fedcc53ff206dda7716738aa/resolver/src/main/java/org/apache/felix/resolver/WrappedCapability.java",
                "sha": "f17969e3011fc64d7d7a89b17ae66f871044204f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/felix/blob/2683837ec7826cd7fedcc53ff206dda7716738aa/resolver/src/main/java/org/apache/felix/resolver/util/CandidateSelector.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/resolver/src/main/java/org/apache/felix/resolver/util/CandidateSelector.java?ref=2683837ec7826cd7fedcc53ff206dda7716738aa",
                "deletions": 1,
                "filename": "resolver/src/main/java/org/apache/felix/resolver/util/CandidateSelector.java",
                "patch": "@@ -26,7 +26,7 @@\n import org.osgi.resource.Capability;\n \n public class CandidateSelector {\n-    private final AtomicBoolean isUnmodifiable;\n+    protected final AtomicBoolean isUnmodifiable;\n     protected final List<Capability> unmodifiable;\n     private int currentIndex = 0;\n ",
                "raw_url": "https://github.com/apache/felix/raw/2683837ec7826cd7fedcc53ff206dda7716738aa/resolver/src/main/java/org/apache/felix/resolver/util/CandidateSelector.java",
                "sha": "de8a5f502d2a23206d999e009e9ddff9aab647aa",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/felix/blob/2683837ec7826cd7fedcc53ff206dda7716738aa/resolver/src/main/java/org/apache/felix/resolver/util/ShadowList.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/resolver/src/main/java/org/apache/felix/resolver/util/ShadowList.java?ref=2683837ec7826cd7fedcc53ff206dda7716738aa",
                "deletions": 1,
                "filename": "resolver/src/main/java/org/apache/felix/resolver/util/ShadowList.java",
                "patch": "@@ -20,17 +20,26 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-\n+import java.util.concurrent.atomic.AtomicBoolean;\n import org.osgi.resource.Capability;\n import org.osgi.service.resolver.HostedCapability;\n import org.osgi.service.resolver.ResolveContext;\n \n public class ShadowList extends CandidateSelector\n {\n     public static  ShadowList createShadowList(CandidateSelector original) {\n+        if (original instanceof ShadowList)\n+        {\n+            throw new IllegalArgumentException(\"Cannot create a ShadowList using another ShadowList.\");\n+        }\n         return new ShadowList(original);\n     }\n \n+    public static ShadowList deepCopy(ShadowList original) {\n+        List<Capability> originalCopy = new ArrayList<Capability>(original.m_original);\n+        return new ShadowList(original.unmodifiable, originalCopy, original.isUnmodifiable);\n+    }\n+\n     private final List<Capability> m_original;\n \n     private ShadowList(CandidateSelector original)\n@@ -45,6 +54,11 @@ private ShadowList(CandidateSelector shadow, List<Capability> original)\n         m_original = original;\n     }\n \n+    public ShadowList(List<Capability> unmodifiable, List<Capability> originalCopy, AtomicBoolean isUnmodifiable) {\n+        super(unmodifiable, isUnmodifiable);\n+        m_original = originalCopy;\n+    }\n+\n     public ShadowList copy() {\n         return new ShadowList(this, m_original);\n     }",
                "raw_url": "https://github.com/apache/felix/raw/2683837ec7826cd7fedcc53ff206dda7716738aa/resolver/src/main/java/org/apache/felix/resolver/util/ShadowList.java",
                "sha": "f69025fdcf09e27e2729c4ac6a90d705dc7afbb8",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/felix/blob/2683837ec7826cd7fedcc53ff206dda7716738aa/resolver/src/test/java/org/apache/felix/resolver/test/Main.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/resolver/src/test/java/org/apache/felix/resolver/test/Main.java?ref=2683837ec7826cd7fedcc53ff206dda7716738aa",
                "deletions": 2,
                "filename": "resolver/src/test/java/org/apache/felix/resolver/test/Main.java",
                "patch": "@@ -35,6 +35,7 @@\n import org.apache.felix.resolver.test.util.PackageRequirement;\n import org.apache.felix.resolver.test.util.ResolveContextImpl;\n import org.apache.felix.resolver.test.util.ResourceImpl;\n+import org.osgi.framework.Version;\n import org.osgi.framework.namespace.BundleNamespace;\n import org.osgi.framework.namespace.HostNamespace;\n import org.osgi.framework.namespace.IdentityNamespace;\n@@ -430,12 +431,12 @@ public static void main(String[] args) throws ResolutionException\n         a1_hostCap.addAttribute(HostNamespace.HOST_NAMESPACE, \"A\");\n         a1.addCapability(a1_hostCap);\n \n-        ResourceImpl f1 = new ResourceImpl(\"F1\", IdentityNamespace.TYPE_FRAGMENT);\n+        ResourceImpl f1 = new ResourceImpl(\"F1\", IdentityNamespace.TYPE_FRAGMENT, Version.emptyVersion);\n         GenericRequirement f1_hostReq = new GenericRequirement(f1, HostNamespace.HOST_NAMESPACE);\n         f1_hostReq.addDirective(Namespace.REQUIREMENT_FILTER_DIRECTIVE, \"(\" + HostNamespace.HOST_NAMESPACE + \"=A)\");\n         f1.addRequirement(f1_hostReq);\n \n-        ResourceImpl f2 = new ResourceImpl(\"F2\", IdentityNamespace.TYPE_FRAGMENT);\n+        ResourceImpl f2 = new ResourceImpl(\"F2\", IdentityNamespace.TYPE_FRAGMENT, Version.emptyVersion);\n         GenericRequirement f2_hostReq = new GenericRequirement(f2, HostNamespace.HOST_NAMESPACE);\n         f2_hostReq.addDirective(Namespace.REQUIREMENT_FILTER_DIRECTIVE, \"(\" + HostNamespace.HOST_NAMESPACE + \"=A)\");\n         f2.addRequirement(f2_hostReq);",
                "raw_url": "https://github.com/apache/felix/raw/2683837ec7826cd7fedcc53ff206dda7716738aa/resolver/src/test/java/org/apache/felix/resolver/test/Main.java",
                "sha": "c6c20b9ce7f9a8e6ffd71b61377be6afa9ea39d1",
                "status": "modified"
            },
            {
                "additions": 64,
                "blob_url": "https://github.com/apache/felix/blob/2683837ec7826cd7fedcc53ff206dda7716738aa/resolver/src/test/java/org/apache/felix/resolver/test/ResolverTest.java",
                "changes": 70,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/resolver/src/test/java/org/apache/felix/resolver/test/ResolverTest.java?ref=2683837ec7826cd7fedcc53ff206dda7716738aa",
                "deletions": 6,
                "filename": "resolver/src/test/java/org/apache/felix/resolver/test/ResolverTest.java",
                "patch": "@@ -46,6 +46,7 @@\n import org.junit.Test;\n import org.mockito.Mockito;\n import org.osgi.framework.Constants;\n+import org.osgi.framework.Version;\n import org.osgi.framework.namespace.BundleNamespace;\n import org.osgi.framework.namespace.HostNamespace;\n import org.osgi.framework.namespace.IdentityNamespace;\n@@ -445,7 +446,7 @@ public void testScenario10() throws Exception\n         ResourceImpl a1 = new ResourceImpl(\"A\");\n         Capability a1_hostCap = addCap(a1, HostNamespace.HOST_NAMESPACE, \"A\");\n \n-        ResourceImpl f1 = new ResourceImpl(\"F1\", IdentityNamespace.TYPE_FRAGMENT);\n+        ResourceImpl f1 = new ResourceImpl(\"F1\", IdentityNamespace.TYPE_FRAGMENT, Version.emptyVersion);\n         Requirement f1_hostReq = addReq(f1, HostNamespace.HOST_NAMESPACE, \"A\");\n         Capability f1_pkgCap = addCap(f1, PackageNamespace.PACKAGE_NAMESPACE, \"org.foo.a\");\n \n@@ -499,7 +500,7 @@ public void testScenario11() throws Exception\n         ResourceImpl a1 = new ResourceImpl(\"A\");\n         Capability a1_hostCap = addCap(a1, HostNamespace.HOST_NAMESPACE, \"A\");\n \n-        ResourceImpl f1 = new ResourceImpl(\"F1\", IdentityNamespace.TYPE_FRAGMENT);\n+        ResourceImpl f1 = new ResourceImpl(\"F1\", IdentityNamespace.TYPE_FRAGMENT, Version.emptyVersion);\n         Requirement f1_hostReq = addReq(f1, HostNamespace.HOST_NAMESPACE, \"A\");\n         Capability f1_pkgCap = addCap(f1, PackageNamespace.PACKAGE_NAMESPACE, \"org.foo.a\");\n \n@@ -603,7 +604,7 @@ public void testScenario13() throws Exception\n         ResourceImpl a1 = new ResourceImpl(\"A\");\n         Capability a1_hostCap = addCap(a1, HostNamespace.HOST_NAMESPACE, \"A\");\n \n-        ResourceImpl f1 = new ResourceImpl(\"F1\", IdentityNamespace.TYPE_FRAGMENT);\n+        ResourceImpl f1 = new ResourceImpl(\"F1\", IdentityNamespace.TYPE_FRAGMENT, Version.emptyVersion);\n         Requirement f1_hostReq = addReq(f1, HostNamespace.HOST_NAMESPACE, \"A\");\n         Capability f1_pkgCap = addCap(f1, PackageNamespace.PACKAGE_NAMESPACE, \"org.foo.a\");\n \n@@ -627,6 +628,63 @@ public void testScenario13() throws Exception\n         assertEquals(f1_pkgCap, wiresB.get(0).getCapability());\n     }\n \n+    @Test\n+    public void testScenario14() throws Exception\n+    {\n+        ResolverImpl resolver = new ResolverImpl(new Logger(Logger.LOG_DEBUG), 1);\n+\n+        Map<Resource, Wiring> wirings = new HashMap<Resource, Wiring>();\n+        Map<Requirement, List<Capability>> candMap = new HashMap<Requirement, List<Capability>>();\n+\n+        ResourceImpl a1 = new ResourceImpl(\"A\", IdentityNamespace.TYPE_BUNDLE, Version.parseVersion(\"1.0.0\"));\n+        Capability a1_hostCap = addCap(a1, HostNamespace.HOST_NAMESPACE, \"A\");\n+        Capability a1_pkgCap = addCap(a1, PackageNamespace.PACKAGE_NAMESPACE, \"a\");\n+        Requirement a1_pkgReq = addReq(a1, PackageNamespace.PACKAGE_NAMESPACE, \"a.impl\");\n+\n+        ResourceImpl a2 = new ResourceImpl(\"A\", IdentityNamespace.TYPE_BUNDLE, Version.parseVersion(\"2.0.0\"));\n+        Capability a2_hostCap = addCap(a2, HostNamespace.HOST_NAMESPACE, \"A\");\n+        Capability a2_pkgCap = addCap(a2, PackageNamespace.PACKAGE_NAMESPACE, \"a\");\n+        Requirement a2_pkgReq = addReq(a2, PackageNamespace.PACKAGE_NAMESPACE, \"a.impl\");\n+\n+        ResourceImpl a3 = new ResourceImpl(\"A\", IdentityNamespace.TYPE_BUNDLE, Version.parseVersion(\"3.0.0\"));\n+        Capability a3_hostCap = addCap(a3, HostNamespace.HOST_NAMESPACE, \"A\");\n+        Capability a3_pkgCap = addCap(a3, PackageNamespace.PACKAGE_NAMESPACE, \"a\");\n+        Requirement a3_pkgReq = addReq(a3, PackageNamespace.PACKAGE_NAMESPACE, \"a.impl\");\n+\n+        ResourceImpl f1 = new ResourceImpl(\"F1\", IdentityNamespace.TYPE_FRAGMENT, Version.emptyVersion);\n+        Requirement f1_hostReq = addReq(f1, HostNamespace.HOST_NAMESPACE, \"A\");\n+        Capability f1_pkgCap = addCap(f1, PackageNamespace.PACKAGE_NAMESPACE, \"a.impl\");\n+        Requirement f1_pkgReq = addReq(f1, PackageNamespace.PACKAGE_NAMESPACE, \"a\");\n+\n+        ResourceImpl b1 = new ResourceImpl(\"B\");\n+        Requirement b_pkgReq1 = addReq(b1, PackageNamespace.PACKAGE_NAMESPACE, \"a\");\n+\n+        candMap.put(a1_pkgReq, Collections.singletonList(f1_pkgCap));\n+        candMap.put(a2_pkgReq, Collections.singletonList(f1_pkgCap));\n+        candMap.put(a3_pkgReq, Collections.singletonList(f1_pkgCap));\n+        candMap.put(b_pkgReq1, Arrays.asList(a3_pkgCap, a2_pkgCap, a1_pkgCap));\n+        candMap.put(f1_pkgReq, Arrays.asList(a3_pkgCap, a2_pkgCap, a1_pkgCap));\n+        candMap.put(f1_hostReq, Arrays.asList(a3_hostCap, a2_hostCap, a1_hostCap));\n+\n+\n+        ResolveContextImpl rci = new ResolveContextImpl(wirings, candMap, Arrays.<Resource> asList(b1, a1, a2, a3), Collections.<Resource> emptyList());\n+\n+        Map<Resource, List<Wire>> wireMap = resolver.resolve(rci);\n+\n+        // all bundles should be resolved\n+        assertEquals(5, wireMap.size());\n+        List<Wire> wiresB = wireMap.get(b1);\n+        assertNotNull(wiresB);\n+        assertEquals(1, wiresB.size());\n+        assertEquals(a3, wiresB.get(0).getProvider());\n+        assertEquals(a3_pkgCap, wiresB.get(0).getCapability());\n+\n+        // There should be three hosts\n+        List<Wire> wiresF1 = wireMap.get(f1);\n+        assertNotNull(wiresF1);\n+        assertEquals(3, wiresF1.size());\n+    }\n+\n     @Test\n     public void testPackageSources() throws Exception {\n         Method m = ResolverImpl.class.getDeclaredMethod(\"getPackageSources\",\n@@ -918,12 +976,12 @@ private static Resource findResource(String identity, Collection<Resource> resou\n         a1_hostCap.addAttribute(HostNamespace.HOST_NAMESPACE, \"A\");\n         a1.addCapability(a1_hostCap);\n \n-        ResourceImpl f1 = new ResourceImpl(\"F1\", IdentityNamespace.TYPE_FRAGMENT);\n+        ResourceImpl f1 = new ResourceImpl(\"F1\", IdentityNamespace.TYPE_FRAGMENT, Version.emptyVersion);\n         GenericRequirement f1_hostReq = new GenericRequirement(f1, HostNamespace.HOST_NAMESPACE);\n         f1_hostReq.addDirective(Namespace.REQUIREMENT_FILTER_DIRECTIVE, \"(\" + HostNamespace.HOST_NAMESPACE + \"=A)\");\n         f1.addRequirement(f1_hostReq);\n \n-        ResourceImpl f2 = new ResourceImpl(\"F2\", IdentityNamespace.TYPE_FRAGMENT);\n+        ResourceImpl f2 = new ResourceImpl(\"F2\", IdentityNamespace.TYPE_FRAGMENT, Version.emptyVersion);\n         GenericRequirement f2_hostReq = new GenericRequirement(f2, HostNamespace.HOST_NAMESPACE);\n         f2_hostReq.addDirective(Namespace.REQUIREMENT_FILTER_DIRECTIVE, \"(\" + HostNamespace.HOST_NAMESPACE + \"=A)\");\n         f2.addRequirement(f2_hostReq);\n@@ -989,7 +1047,7 @@ private static Resource findResource(String identity, Collection<Resource> resou\n         ResourceImpl a1 = new ResourceImpl(\"A\");\n         Capability a1_hostCap = addCap(a1, HostNamespace.HOST_NAMESPACE, \"A\");\n \n-        ResourceImpl f1 = new ResourceImpl(\"F1\", IdentityNamespace.TYPE_FRAGMENT);\n+        ResourceImpl f1 = new ResourceImpl(\"F1\", IdentityNamespace.TYPE_FRAGMENT, Version.emptyVersion);\n         Requirement f1_hostReq = addReq(f1, HostNamespace.HOST_NAMESPACE, \"A\");\n         Requirement f1_pkgReq = addReq(f1, PackageNamespace.PACKAGE_NAMESPACE, \"org.foo.c\");\n         Capability f1_pkgCap = addCap(f1, PackageNamespace.PACKAGE_NAMESPACE, \"org.foo.a\", \"org.foo.c\");",
                "raw_url": "https://github.com/apache/felix/raw/2683837ec7826cd7fedcc53ff206dda7716738aa/resolver/src/test/java/org/apache/felix/resolver/test/ResolverTest.java",
                "sha": "732797df6650dec9fd42f8428ea0f1fb9f9e20d1",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/felix/blob/2683837ec7826cd7fedcc53ff206dda7716738aa/resolver/src/test/java/org/apache/felix/resolver/test/util/IdentityCapability.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/resolver/src/test/java/org/apache/felix/resolver/test/util/IdentityCapability.java?ref=2683837ec7826cd7fedcc53ff206dda7716738aa",
                "deletions": 2,
                "filename": "resolver/src/test/java/org/apache/felix/resolver/test/util/IdentityCapability.java",
                "patch": "@@ -32,14 +32,14 @@\n     private final Map<String, String> m_dirs;\n     private final Map<String, Object> m_attrs;\n \n-    public IdentityCapability(Resource resource, String name, String type)\n+    public IdentityCapability(Resource resource, String name, String type, Version v)\n     {\n         m_resource = resource;\n         m_dirs = new HashMap<String, String>();\n         m_attrs = new HashMap<String, Object>();\n         m_attrs.put(IdentityNamespace.IDENTITY_NAMESPACE, name);\n         m_attrs.put(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE, type);\n-        m_attrs.put(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE, Version.emptyVersion);\n+        m_attrs.put(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE, v);\n     }\n \n     public String getNamespace()",
                "raw_url": "https://github.com/apache/felix/raw/2683837ec7826cd7fedcc53ff206dda7716738aa/resolver/src/test/java/org/apache/felix/resolver/test/util/IdentityCapability.java",
                "sha": "8cbcb2d0941262f5d2a1b2132b3135098b5cf309",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/felix/blob/2683837ec7826cd7fedcc53ff206dda7716738aa/resolver/src/test/java/org/apache/felix/resolver/test/util/ResourceImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/resolver/src/test/java/org/apache/felix/resolver/test/util/ResourceImpl.java?ref=2683837ec7826cd7fedcc53ff206dda7716738aa",
                "deletions": 3,
                "filename": "resolver/src/test/java/org/apache/felix/resolver/test/util/ResourceImpl.java",
                "patch": "@@ -23,6 +23,7 @@\n import java.util.List;\n \n import org.apache.felix.resolver.test.util.IdentityCapability;\n+import org.osgi.framework.Version;\n import org.osgi.framework.namespace.IdentityNamespace;\n import org.osgi.resource.Capability;\n import org.osgi.resource.Requirement;\n@@ -38,12 +39,12 @@ public ResourceImpl() {\n         m_reqs = new ArrayList<Requirement>();\n     }\n     public ResourceImpl(String name) {\n-        this(name, IdentityNamespace.TYPE_BUNDLE);\n+        this(name, IdentityNamespace.TYPE_BUNDLE, Version.emptyVersion);\n     }\n-    public ResourceImpl(String name, String type)\n+    public ResourceImpl(String name, String type, Version v)\n     {\n         m_caps = new ArrayList<Capability>();\n-        m_caps.add(0, new IdentityCapability(this, name, type));\n+        m_caps.add(0, new IdentityCapability(this, name, type, v));\n         m_reqs = new ArrayList<Requirement>();\n     }\n ",
                "raw_url": "https://github.com/apache/felix/raw/2683837ec7826cd7fedcc53ff206dda7716738aa/resolver/src/test/java/org/apache/felix/resolver/test/util/ResourceImpl.java",
                "sha": "5d5afeb7756688ec91af2282fc2636622f40b4a1",
                "status": "modified"
            }
        ],
        "message": "[FELIX-5389] NullPointerException in Candidates#prepare() method\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1767765 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/563f7131678f79967392334b7000b498535a99da",
        "patched_files": [
            "IdentityCapability.java",
            "WrappedCapability.java",
            "Main.java",
            "Resolver.java",
            "ResourceImpl.java",
            "Candidates.java",
            "ShadowList.java",
            "CandidateSelector.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ResourceImplTest.java",
            "ResolverTest.java"
        ]
    },
    "felix_2e83fe9": {
        "bug_id": "felix_2e83fe9",
        "commit": "https://github.com/apache/felix/commit/2e83fe94fe90792f215d15d9d9a44e8b25364e67",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/felix/blob/2e83fe94fe90792f215d15d9d9a44e8b25364e67/ipojo/core/src/main/java/org/apache/felix/ipojo/PrimitiveInstanceDescription.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/ipojo/core/src/main/java/org/apache/felix/ipojo/PrimitiveInstanceDescription.java?ref=2e83fe94fe90792f215d15d9d9a44e8b25364e67",
                "deletions": 14,
                "filename": "ipojo/core/src/main/java/org/apache/felix/ipojo/PrimitiveInstanceDescription.java",
                "patch": "@@ -1,4 +1,4 @@\n-/* \n+/*\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n@@ -34,11 +34,11 @@\n \n /**\n  * Primitive Instance Description.\n- * \n+ *\n  * @author <a href=\"mailto:dev@felix.apache.org\">Felix Project Team</a>\n  */\n public class PrimitiveInstanceDescription extends InstanceDescription {\n-    \n+\n     /**\n      * Creates a Primitive Instance Description.\n      * @param type the component type description\n@@ -64,7 +64,7 @@ public PrimitiveInstanceDescription(ComponentTypeDescription type, InstanceManag\n             return new String[0];\n         }\n     }\n-    \n+\n     /**\n      * Gets the instance service dependencies.\n      * @return the set of dependency description or an empty array if\n@@ -79,7 +79,7 @@ public PrimitiveInstanceDescription(ComponentTypeDescription type, InstanceManag\n                     .getDescription()).getDependencies();\n         }\n     }\n-    \n+\n     /**\n      * Gets the instance service dependency matching with the given service specification or id.\n      * @param specification the service specification of the looked specification.\n@@ -97,12 +97,12 @@ public DependencyDescription getDependency(String specification) {\n                         || specification.equals(deps[i].getSpecification())) {\n                     return deps[i];\n                 }\n-                        \n+\n             }\n         }\n         return null;\n     }\n-    \n+\n     /**\n      * Gets the instance provided service matching with the given service specification.\n      * @param specification the provided specification of the looked provided service.\n@@ -120,12 +120,12 @@ public ProvidedServiceDescription getProvidedService(String specification) {\n                     if (specification.equals(str[j])) {\n                         return pss[i];\n                     }\n-                }        \n+                }\n             }\n         }\n         return null;\n     }\n-    \n+\n     /**\n      * Gets the instance provided service.\n      * @return the set of provided service description or an empty array if\n@@ -140,7 +140,7 @@ public ProvidedServiceDescription getProvidedService(String specification) {\n                     .getDescription()).getProvidedServices();\n         }\n     }\n-    \n+\n     /**\n      * Gets the instance properties.\n      * @return the set of property descriptions or an empty array if\n@@ -155,7 +155,7 @@ public ProvidedServiceDescription getProvidedService(String specification) {\n                     .getDescription()).getProperties();\n         }\n     }\n-    \n+\n     /**\n      * Gets the instance description.\n      * Overridden to add created objects.\n@@ -165,14 +165,14 @@ public Element getDescription() {\n         Element elem = super.getDescription();\n         // Created Object (empty is composite)\n         String[] objs = getCreatedObjects();\n-        for (int i = 0; i < objs.length; i++) {\n+        for (int i = 0; objs != null  && i < objs.length; i++) {\n             Element obj = new Element(\"Object\", \"\");\n             obj.addAttribute(new Attribute(\"name\", ((Object) objs[i]).toString()));\n             elem.addElement(obj);\n         }\n         return elem;\n     }\n-    \n-    \n+\n+\n \n }",
                "raw_url": "https://github.com/apache/felix/raw/2e83fe94fe90792f215d15d9d9a44e8b25364e67/ipojo/core/src/main/java/org/apache/felix/ipojo/PrimitiveInstanceDescription.java",
                "sha": "e0662518d617e87185229f04ece09e6f3a623f64",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/felix/blob/2e83fe94fe90792f215d15d9d9a44e8b25364e67/ipojo/manipulator/src/main/java/org/apache/felix/ipojo/manipulator/Pojoization.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/ipojo/manipulator/src/main/java/org/apache/felix/ipojo/manipulator/Pojoization.java?ref=2e83fe94fe90792f215d15d9d9a44e8b25364e67",
                "deletions": 2,
                "filename": "ipojo/manipulator/src/main/java/org/apache/felix/ipojo/manipulator/Pojoization.java",
                "patch": "@@ -300,7 +300,8 @@ private void computeAnnotations(byte[] inC) {\n         cr.accept(collector, 0);\n \n         if (collector.isIgnoredBecauseOfMissingComponent()) {\n-            warn(\"Annotation processing ignored in \" + collector.getClassName() + \" - @Component missing\");\n+        \t// No @Component, just skip.\n+            //warn(\"Annotation processing ignored in \" + collector.getClassName() + \" - @Component missing\");\n         } else if (collector.isComponentType()) {\n             boolean toskip = false;\n             for (int i = 0; !toskip && i < m_metadata.size(); i++) {\n@@ -329,7 +330,7 @@ private void computeAnnotations(byte[] inC) {\n \n                 // Instantiate ?\n                 if (collector.getInstanceDeclaration() != null) {\n-                    warn(\"Declaring an empty instance of \" + elem.getAttribute(\"classname\"));\n+                    //warn(\"Declaring an empty instance of \" + elem.getAttribute(\"classname\"));\n                     m_metadata.add(collector.getInstanceDeclaration());\n                 }\n             }",
                "raw_url": "https://github.com/apache/felix/raw/2e83fe94fe90792f215d15d9d9a44e8b25364e67/ipojo/manipulator/src/main/java/org/apache/felix/ipojo/manipulator/Pojoization.java",
                "sha": "e7cf61d155b9cc5e05eab81a5990d2619ed6b19e",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/felix/blob/2e83fe94fe90792f215d15d9d9a44e8b25364e67/ipojo/tests/core/annotations/src/main/java/org/apache/felix/ipojo/test/scenarios/component/NoAnnotation.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/ipojo/tests/core/annotations/src/main/java/org/apache/felix/ipojo/test/scenarios/component/NoAnnotation.java?ref=2e83fe94fe90792f215d15d9d9a44e8b25364e67",
                "deletions": 0,
                "filename": "ipojo/tests/core/annotations/src/main/java/org/apache/felix/ipojo/test/scenarios/component/NoAnnotation.java",
                "patch": "@@ -0,0 +1,5 @@\n+package org.apache.felix.ipojo.test.scenarios.component;\n+\n+public class NoAnnotation {\n+\n+}",
                "raw_url": "https://github.com/apache/felix/raw/2e83fe94fe90792f215d15d9d9a44e8b25364e67/ipojo/tests/core/annotations/src/main/java/org/apache/felix/ipojo/test/scenarios/component/NoAnnotation.java",
                "sha": "8e248460895beadd581e879d727236e51c580918",
                "status": "added"
            }
        ],
        "message": "Avoid a potential NPE in arch\n\nClean the output of the manipulator during annotation processing.\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1058231 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/80a15c40ed1725fb4b95983d95c362fc2a46dfff",
        "patched_files": [
            "Pojoization.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "PojoizationTest.java"
        ]
    },
    "felix_33113b3": {
        "bug_id": "felix_33113b3",
        "commit": "https://github.com/apache/felix/commit/33113b30dee87927a9e05090785e3887a23f019f",
        "file": [
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/felix/blob/33113b30dee87927a9e05090785e3887a23f019f/ipojo/runtime/core-it/ipojo-core-configuration-processor-test/src/main/java/org/apache/felix/ipojo/runtime/core/components/SimpleConfiguration.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/ipojo/runtime/core-it/ipojo-core-configuration-processor-test/src/main/java/org/apache/felix/ipojo/runtime/core/components/SimpleConfiguration.java?ref=33113b30dee87927a9e05090785e3887a23f019f",
                "deletions": 0,
                "filename": "ipojo/runtime/core-it/ipojo-core-configuration-processor-test/src/main/java/org/apache/felix/ipojo/runtime/core/components/SimpleConfiguration.java",
                "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.felix.ipojo.runtime.core.components;\n+\n+import org.apache.felix.ipojo.configuration.Configuration;\n+import org.apache.felix.ipojo.configuration.Instance;\n+\n+import java.util.Properties;\n+\n+import static org.apache.felix.ipojo.configuration.Instance.instance;\n+\n+/**\n+ * Simple configuration\n+ */\n+@Configuration\n+public class SimpleConfiguration {\n+\n+    // Declare an instance of MyComponent named myInstance\n+    Instance myInstance = instance().of(MyComponent.class)\n+            .named(\"foo\");\n+}",
                "raw_url": "https://github.com/apache/felix/raw/33113b30dee87927a9e05090785e3887a23f019f/ipojo/runtime/core-it/ipojo-core-configuration-processor-test/src/main/java/org/apache/felix/ipojo/runtime/core/components/SimpleConfiguration.java",
                "sha": "314fb8c305c6e253ef836152a96f1b97327146ab",
                "status": "added"
            },
            {
                "additions": 77,
                "blob_url": "https://github.com/apache/felix/blob/33113b30dee87927a9e05090785e3887a23f019f/ipojo/runtime/core-it/ipojo-core-configuration-processor-test/src/test/java/org/apache/felix/ipojo/runtime/core/TestSimpleConfiguration.java",
                "changes": 77,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/ipojo/runtime/core-it/ipojo-core-configuration-processor-test/src/test/java/org/apache/felix/ipojo/runtime/core/TestSimpleConfiguration.java?ref=33113b30dee87927a9e05090785e3887a23f019f",
                "deletions": 0,
                "filename": "ipojo/runtime/core-it/ipojo-core-configuration-processor-test/src/test/java/org/apache/felix/ipojo/runtime/core/TestSimpleConfiguration.java",
                "patch": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.felix.ipojo.runtime.core;\n+\n+import junit.framework.Assert;\n+import org.apache.felix.ipojo.runtime.core.components.MyComponent;\n+import org.apache.felix.ipojo.runtime.core.components.SimpleConfiguration;\n+import org.apache.felix.ipojo.runtime.core.services.FooService;\n+import org.junit.Test;\n+import org.ops4j.pax.exam.Configuration;\n+import org.ops4j.pax.exam.Option;\n+import org.ops4j.pax.exam.OptionUtils;\n+import org.ops4j.pax.tinybundles.core.TinyBundles;\n+import org.osgi.framework.Constants;\n+import org.ow2.chameleon.testing.helpers.TimeUtils;\n+import org.ow2.chameleon.testing.tinybundles.ipojo.IPOJOStrategy;\n+\n+import java.io.IOException;\n+\n+import static org.ops4j.pax.exam.CoreOptions.streamBundle;\n+import static org.ops4j.pax.tinybundles.core.TinyBundles.withBnd;\n+\n+/**\n+ * Check a simple @Configuration\n+ */\n+public class TestSimpleConfiguration extends Common {\n+\n+    @Configuration\n+    public Option[] config() throws IOException {\n+\n+        Option[] options = super.config();\n+\n+        // Build a service bundle\n+        return OptionUtils.combine(options,\n+                streamBundle(\n+                        TinyBundles.bundle()\n+                                .add(FooService.class)\n+                                .set(Constants.BUNDLE_SYMBOLICNAME, \"ServiceInterface\")\n+                                .set(Constants.EXPORT_PACKAGE, \"org.apache.felix.ipojo.runtime.core.services\")\n+                                .build(withBnd())\n+                ),\n+                streamBundle(\n+                        TinyBundles.bundle()\n+                                .add(MyComponent.class)\n+                                .add(SimpleConfiguration.class)\n+                                .set(Constants.BUNDLE_SYMBOLICNAME, \"MyComponent\")\n+                                .build(IPOJOStrategy.withiPOJO())\n+                )\n+        );\n+    }\n+\n+    @Test\n+    public void testConfiguration() throws InterruptedException {\n+        TimeUtils.grace(1000);\n+        // Check configuration\n+        Assert.assertNotNull(osgiHelper.getServiceReference(FooService.class));\n+    }\n+\n+\n+}",
                "raw_url": "https://github.com/apache/felix/raw/33113b30dee87927a9e05090785e3887a23f019f/ipojo/runtime/core-it/ipojo-core-configuration-processor-test/src/test/java/org/apache/felix/ipojo/runtime/core/TestSimpleConfiguration.java",
                "sha": "1888d9736c4f6f962a2c56390e239fc1509f6114",
                "status": "added"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/felix/blob/33113b30dee87927a9e05090785e3887a23f019f/ipojo/runtime/core/src/main/java/org/apache/felix/ipojo/configuration/Instance.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/ipojo/runtime/core/src/main/java/org/apache/felix/ipojo/configuration/Instance.java?ref=33113b30dee87927a9e05090785e3887a23f019f",
                "deletions": 2,
                "filename": "ipojo/runtime/core/src/main/java/org/apache/felix/ipojo/configuration/Instance.java",
                "patch": "@@ -62,8 +62,10 @@ public String name() {\n \n     public Dictionary<String, Object> configuration() {\n         Hashtable<String, Object> configuration = new Hashtable<String, Object>();\n-        for (Property property : this.configuration) {\n-            configuration.put(property.name, property.value);\n+        if (this.configuration != null) {\n+            for (Property property : this.configuration) {\n+                configuration.put(property.name, property.value);\n+            }\n         }\n \n         if (name != null) {",
                "raw_url": "https://github.com/apache/felix/raw/33113b30dee87927a9e05090785e3887a23f019f/ipojo/runtime/core/src/main/java/org/apache/felix/ipojo/configuration/Instance.java",
                "sha": "bda9f4f5ccca6619500d8e946c590da36af8860b",
                "status": "modified"
            }
        ],
        "message": "Fix FELIX-4261 NPE when an instance is declared without a configuration using the @ConfigurationTracker\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1528105 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/1fdfedc2a6f711ef9d7c2d95a0e72f76585a8e07",
        "patched_files": [
            "Instance.java",
            "SimpleConfiguration.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "TestSimpleConfiguration.java",
            "InstanceTest.java"
        ]
    },
    "felix_331c0a1": {
        "bug_id": "felix_331c0a1",
        "commit": "https://github.com/apache/felix/commit/331c0a17c99136ea5829fd71e7e8fef8f013a8a2",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/felix/blob/331c0a17c99136ea5829fd71e7e8fef8f013a8a2/dependencymanager/org.apache.felix.dependencymanager/test/test/ConfigurationTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/dependencymanager/org.apache.felix.dependencymanager/test/test/ConfigurationTest.java?ref=331c0a17c99136ea5829fd71e7e8fef8f013a8a2",
                "deletions": 1,
                "filename": "dependencymanager/org.apache.felix.dependencymanager/test/test/ConfigurationTest.java",
                "patch": "@@ -38,6 +38,7 @@ public void testConfigurationFailure() throws Throwable {\n \n         // Create our configuration dependency\n         final ConfigurationDependencyImpl conf = new ConfigurationDependencyImpl();\n+        conf.setPid(\"some.pid\");\n \n         // Create another required dependency\n         final SimpleServiceDependency requiredDependency = new SimpleServiceDependency();\n@@ -120,7 +121,8 @@ void start() {\n             conf.updated(props);\n         }\n         catch (ConfigurationException err) {\n-            warn(\"got expected configuration error\");\n+            warn(\"got unexpected configuration error\");\n+            e.throwable(err);\n         }\n         \n         // This time, our component should be started properly.",
                "raw_url": "https://github.com/apache/felix/raw/331c0a17c99136ea5829fd71e7e8fef8f013a8a2/dependencymanager/org.apache.felix.dependencymanager/test/test/ConfigurationTest.java",
                "sha": "98f4e8f057851309b76153980cd761ddc0b49bc8",
                "status": "modified"
            }
        ],
        "message": "Fixed a bug in the test (the configuration pid was not set, this could potentially cause a NPE in ConfigurationEventImpl.compareTo() method.\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1740706 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/23dc30372465897e9843b04a92a26d76fda0b95f",
        "patched_files": [
            "Configuration.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ConfigurationTest.java"
        ]
    },
    "felix_3581344": {
        "bug_id": "felix_3581344",
        "commit": "https://github.com/apache/felix/commit/3581344c7b323b2ee7120933dd9c75f3d69e528b",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/felix/blob/3581344c7b323b2ee7120933dd9c75f3d69e528b/scr/src/main/java/org/apache/felix/scr/impl/config/ConfigurationSupport.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/config/ConfigurationSupport.java?ref=3581344c7b323b2ee7120933dd9c75f3d69e528b",
                "deletions": 0,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/config/ConfigurationSupport.java",
                "patch": "@@ -108,6 +108,10 @@ public void configureComponentHolder(final ComponentHolder holder)\n         if (!holder.getComponentMetadata().isConfigurationIgnored())\n         {\n             final BundleContext bundleContext = holder.getActivator().getBundleContext();\n+            if ( bundleContext == null )\n+            {\n+                return;// bundle was stopped concurrently with configuration deletion\n+            }\n             final String confPid = holder.getComponentMetadata().getConfigurationPid();\n \n             final ServiceReference caRef = bundleContext.getServiceReference(ComponentRegistry.CONFIGURATION_ADMIN);",
                "raw_url": "https://github.com/apache/felix/raw/3581344c7b323b2ee7120933dd9c75f3d69e528b/scr/src/main/java/org/apache/felix/scr/impl/config/ConfigurationSupport.java",
                "sha": "4492cb4262947e5fd265b9926980f86ede004cbb",
                "status": "modified"
            }
        ],
        "message": "FELIX-4088 Fix NPE on concurrent configuration deletion/bundle stop\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1487635 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/8fd0a7b69c6f5c1d8f96792dbec826a8df3a1bf0",
        "patched_files": [
            "ConfigurationSupport.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ConfigurationSupportTest.java"
        ]
    },
    "felix_3645d19": {
        "bug_id": "felix_3645d19",
        "commit": "https://github.com/apache/felix/commit/3645d19956bd42c8aa416d1045e1983b565994e7",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/felix/blob/3645d19956bd42c8aa416d1045e1983b565994e7/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java?ref=3645d19956bd42c8aa416d1045e1983b565994e7",
                "deletions": 7,
                "filename": "configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java",
                "patch": "@@ -1006,18 +1006,28 @@ else if ( pidObj instanceof Collection )\n     static String toString( ServiceReference ref )\n     {\n         String[] ocs = ( String[] ) ref.getProperty( \"objectClass\" );\n-        String oc = \"[\";\n+        StringBuffer buf = new StringBuffer(\"[\");\n         for ( int i = 0; i < ocs.length; i++ )\n         {\n-            oc += ocs[i];\n+            buf.append(ocs[i]);\n             if ( i < ocs.length - 1 )\n-                oc += \", \";\n+                buf.append(\", \");\n         }\n \n-        oc += \", id=\" + ref.getProperty( Constants.SERVICE_ID );\n-        oc += \", bundle=\" + ref.getBundle().getBundleId();\n-        oc += \"]\";\n-        return oc;\n+        buf.append( \", id=\" ).append( ref.getProperty( Constants.SERVICE_ID ) );\n+\n+        Bundle provider = ref.getBundle();\n+        if ( provider != null )\n+        {\n+            buf.append( \", bundle=\" ).append( provider.getBundleId() );\n+        }\n+        else\n+        {\n+            buf.append( \", unregistered\" );\n+        }\n+\n+        buf.append( \"]\" );\n+        return buf.toString();\n     }\n \n ",
                "raw_url": "https://github.com/apache/felix/raw/3645d19956bd42c8aa416d1045e1983b565994e7/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java",
                "sha": "b94e32283a7d2c2ee9e4554a6d998ea8d6e3eed0",
                "status": "modified"
            }
        ],
        "message": "FELIX-2847 Prevent NPE if service already unregistered\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1071990 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/c894cacbb8cc90872cfaa0ce60ce6be167a69cf5",
        "patched_files": [
            "ConfigurationManager.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ConfigurationManagerTest.java"
        ]
    },
    "felix_3867a62": {
        "bug_id": "felix_3867a62",
        "commit": "https://github.com/apache/felix/commit/3867a6223e610e1a513bb6f7b0c35576a0f7dd87",
        "file": [
            {
                "additions": 264,
                "blob_url": "https://github.com/apache/felix/blob/3867a6223e610e1a513bb6f7b0c35576a0f7dd87/dependencymanager/test/src/test/java/org/apache/felix/dm/test/integration/api/ServiceRaceTest.java",
                "changes": 353,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/dependencymanager/test/src/test/java/org/apache/felix/dm/test/integration/api/ServiceRaceTest.java?ref=3867a6223e610e1a513bb6f7b0c35576a0f7dd87",
                "deletions": 89,
                "filename": "dependencymanager/test/src/test/java/org/apache/felix/dm/test/integration/api/ServiceRaceTest.java",
                "patch": "@@ -18,6 +18,8 @@\n  */\n package org.apache.felix.dm.test.integration.api;\n \n+import java.io.IOException;\n+import java.util.Dictionary;\n import java.util.Hashtable;\n import java.util.List;\n import java.util.Map;\n@@ -38,17 +40,21 @@\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.ops4j.pax.exam.junit.PaxExam;\n+import org.osgi.framework.ServiceReference;\n+import org.osgi.service.cm.Configuration;\n import org.osgi.service.cm.ConfigurationAdmin;\n \n /**\n- * FELIX-3910: Another race test for concurrent service registration/unregistration.\n+ * Another race test for concurrent service registrations/unregistrations.\n+ * Aspects are also depending on some configuration pids, which are also registered/unregistered concurrently.\n  */\n @RunWith(PaxExam.class)\n public class ServiceRaceTest extends TestBase {\n-    final static int SERVICES = 10;\n+    final static int STEP_WAIT = 10000;\n+    final static int SERVICES = 3;\n     final static int INVOKES = 10;\n-    volatile ExecutorService m_execRegister; // used to register/unregister S services\n-    volatile ExecutorService m_execInvoke; // Used by Client to invoke S services\n+    volatile ExecutorService m_execServices; // used to register/unregister S services\n+    volatile ExecutorService m_execAspects; // used to register/unregister Aspects\n \n     @Inject\n     volatile ConfigurationAdmin m_ca;\n@@ -60,87 +66,139 @@ public void testConcurrentServices() {\n         final DependencyManager dm = new DependencyManager(context);\n \n         try {\n-            m_execRegister = Executors.newFixedThreadPool(cores);\n-            m_execInvoke = Executors.newFixedThreadPool(1);\n-\n-            for (int loop = 0; loop < 10000; loop++) {\n-                Ensure e = new Ensure(false);\n-                long timeStamp = System.currentTimeMillis();\n-                \n-                // Create one client depending on 'SERVICES' S services\n-                Client client = new Client(e);\n-                Component c = dm\n-                        .createComponent()\n-                        .setImplementation(client);\n-                for (int i = 0; i < SERVICES; i ++) {\n+            m_execServices = Executors.newFixedThreadPool(cores);\n+            m_execAspects = Executors.newFixedThreadPool(cores);\n+            int aspectPidCounter = 1;\n+            int aspectCounter = 1;\n+\n+            long timeStamp = System.currentTimeMillis();\n+            for (int loop = 0; loop < 30000; loop++) {\n+                debug(\"loop#%d -------------------------\", (loop + 1));\n+\n+                final Ensure clientStarted = new Ensure(false);\n+                final Ensure clientStopped = new Ensure(false);\n+                final Ensure serviceStarted = new Ensure(false);\n+                final Ensure serviceStopped = new Ensure(false);\n+                final Ensure serviceInvoked = new Ensure(false);\n+                final Ensure aspectStarted = new Ensure(false);\n+                final Ensure aspectStopped = new Ensure(false);\n+                final Ensure aspectUpdated = new Ensure(false);\n+                final Ensure aspectInvoked = new Ensure(false);\n+\n+                // Create one client depending on many S services\n+                Client client = new Client(clientStarted, clientStopped);\n+                Component c = dm.createComponent().setImplementation(client);\n+                for (int i = 0; i < SERVICES; i++) {\n                     c.add(dm.createServiceDependency().setService(S.class, \"(name=S\" + i + \")\").setRequired(true).setCallbacks(\n-                        \"add\", \"remove\"));\n+                        \"add\", null, \"remove\", \"swap\"));\n                 }\n                 dm.add(c);\n \n-                // Create all the 'SERVICES' S services concurrently\n-                info(\"registering services concurrently\");\n-                final Ensure addE = new Ensure(false);\n+                // Create S services concurrently\n+                info(\"registering S services concurrently\");\n                 final List<Component> services = new CopyOnWriteArrayList<Component>();\n-                for (int i = 0; i < SERVICES; i ++) {\n+                for (int i = 0; i < SERVICES; i++) {\n                     final String name = \"S\" + i;\n-                    m_execRegister.execute(new Runnable() {\n+                    m_execServices.execute(new Runnable() {\n                         public void run() {\n                             Hashtable h = new Hashtable();\n                             h.put(\"name\", name);\n-                            Component sImpl = dm\n-                                .createComponent()\n-                                .setImplementation(new SImpl())\n-                                .setInterface(S.class.getName(), h);\n+                            Component sImpl = dm.createComponent().setImplementation(\n+                                new SImpl(serviceStarted, serviceStopped, serviceInvoked, name)).setInterface(\n+                                S.class.getName(), h);\n                             services.add(sImpl);\n                             dm.add(sImpl);\n-                            addE.step();\n                         }\n                     });\n                 }\n-                addE.waitForStep(SERVICES, 5000);\n-                \n-                // Make sure client is started:\n-                e.waitForStep(1, 5000);\n-                \n-                // Make sure client invoked services SERVICES * INVOKES times\n-                e.waitForStep(1 + (SERVICES * INVOKES), 10000);\n-                if ((loop+1) % 100 == 0) {\n-                    long duration = System.currentTimeMillis() - timeStamp;\n-                    warn(\"Performed %d tests in %d ms.\", (loop+1), duration);\n-                    timeStamp = System.currentTimeMillis();\n+\n+                // Create S aspects concurrently\n+                info(\"registering aspects concurrently\");\n+                final List<Component> aspects = new CopyOnWriteArrayList<Component>();\n+                final List<Configuration> aspectPids = new CopyOnWriteArrayList<Configuration>();\n+                for (int i = 0; i < SERVICES; i++) {\n+                    final String name = \"Aspect\" + i + \"-\" + (aspectCounter++);\n+                    final String filter = \"(name=S\" + i + \")\";\n+                    final String pid = \"Aspect\" + i + \".pid\" + (aspectPidCounter++);\n+                    m_execServices.execute(new Runnable() {\n+                        public void run() {\n+                            SAspect sa = new SAspect(aspectStarted, aspectStopped, aspectUpdated, aspectInvoked, name);\n+                            debug(\"Adding aspect \" + sa);\n+                            Component aspect = dm.createAspectService(S.class, filter, 1).setImplementation(sa).add(\n+                                dm.createConfigurationDependency().setPid(pid));\n+                            aspects.add(aspect);\n+                            dm.add(aspect);\n+                            try {\n+                                Configuration aspectConf = m_ca.getConfiguration(pid, null);\n+                                aspectConf.update(new Hashtable() {\n+                                    {\n+                                        put(\"name\", name);\n+                                    }\n+                                });\n+                                aspectPids.add(aspectConf);\n+                            }\n+                            catch (IOException e) {\n+                                error(\"could not create pid %s for aspect %s\", e, pid, name);\n+                                return;\n+                            }\n+                        }\n+                    });\n                 }\n-                \n+\n+                // Make sure all services and aspects are created\n+                clientStarted.waitForStep(1, STEP_WAIT);\n+                aspectUpdated.waitForStep(SERVICES, STEP_WAIT);\n+                aspectStarted.waitForStep(SERVICES, STEP_WAIT);\n+                info(\"all aspects and services registered\");\n+\n+                // Make sure client invoked services and aspects SERVICES * INVOKES times\n+                serviceInvoked.waitForStep(SERVICES * INVOKES, STEP_WAIT);\n+                aspectInvoked.waitForStep(SERVICES * INVOKES, STEP_WAIT);\n+                info(\"All aspects and services have been properly invoked\");\n+\n                 // Unregister services concurrently\n-                final Ensure removeE = new Ensure(false);\n                 info(\"unregistering services concurrently\");\n                 for (final Component sImpl : services) {\n-                    m_execRegister.execute(new Runnable() {\n+                    m_execServices.execute(new Runnable() {\n                         public void run() {\n                             dm.remove(sImpl);\n-                            removeE.step();\n                         }\n                     });\n                 }\n-                removeE.waitForStep(SERVICES, 5000);\n-                \n-                // Make sure Client has been stopped\n-                info(\"waiting for client to be stopped\");\n-                int nextStep = 1 /* start */ + (SERVICES * INVOKES) + 1 /* stop */;\n-                e.waitForStep(nextStep, 5000);\n-                \n-                info(\"all services stopped\");\n-                \n-                // Make sure all services are all unbound from our client.\n-                nextStep += SERVICES; // Client.removed should have been called for each unbound service.\n-                e.waitForStep(nextStep, 5000);\n-                \n-                // Clear everything before interating on next loop\n-                dm.clear();\n-                \n+\n+                // Unregister aspects (and configuration) concurrently\n+                info(\"unregistering aspects concurrently\");\n+                for (final Component a : aspects) {\n+                    m_execAspects.execute(new Runnable() {\n+                        public void run() {\n+                            debug(\"removing aspect %s\", a);\n+                            dm.remove(a);\n+                        }\n+                    });\n+                }\n+                info(\"unregistering aspect configuration concurrently\");\n+                for (Configuration aspectConf : aspectPids) {\n+                    aspectConf.delete();\n+                }\n+\n+                info(\"removing client from dm\");\n+                dm.remove(c);\n+\n+                // Wait until all services/aspects have been stopped\n+                serviceStopped.waitForStep(SERVICES, STEP_WAIT);\n+                aspectStopped.waitForStep(SERVICES, STEP_WAIT);\n+                clientStopped.waitForStep(1, STEP_WAIT);\n+\n                 if (super.errorsLogged()) {\n                     throw new IllegalStateException(\"Race test interrupted (some error occured, see previous logs)\");\n                 }\n+\n+                info(\"finished one test loop\");\n+                if ((loop + 1) % 100 == 0) {\n+                    long duration = System.currentTimeMillis() - timeStamp;\n+                    warn(\"Performed %d tests in %d ms.\", (loop + 1), duration);\n+                    timeStamp = System.currentTimeMillis();\n+                }\n             }\n         }\n \n@@ -149,8 +207,8 @@ public void run() {\n             Assert.fail(\"Test failed: \" + t.getMessage());\n         }\n         finally {\n-            shutdown(m_execRegister);\n-            shutdown(m_execInvoke);\n+            shutdown(m_execServices);\n+            shutdown(m_execAspects);\n             dm.clear();\n         }\n     }\n@@ -165,53 +223,170 @@ void shutdown(ExecutorService exec) {\n     }\n \n     public interface S {\n-        void invoke(Ensure e);\n+        void invoke();\n     }\n \n-    public static class SImpl implements S {\n-        public void invoke(Ensure e) {\n-            e.step();\n+    public class SImpl implements S {\n+        final Ensure m_started, m_stopped, m_invoked;\n+        final String m_name;\n+\n+        public SImpl(Ensure started, Ensure stopped, Ensure invoked, String name) {\n+            m_name = name;\n+            m_started = started;\n+            m_stopped = stopped;\n+            m_invoked = invoked;\n+        }\n+\n+        public void invoke() {\n+            m_invoked.step();\n+        }\n+\n+        public String toString() {\n+            return m_name;\n+        }\n+\n+        public void start() {\n+            info(\"started %s\", this);\n+            m_started.step();\n+        }\n+\n+        public void stop() {\n+            info(\"stopped %s\", this);\n+            m_stopped.step();\n         }\n     }\n-    \n-    public class Client {\n-        final Ensure m_e;\n+\n+    public class Client implements Runnable {\n+        final Ensure m_started, m_stopped;\n         final Map<String, S> m_services = new ConcurrentHashMap<String, S>();\n+        volatile Thread m_thread;\n+        volatile Exception m_firstStartStackTrace;\n+        volatile boolean m_running;\n+\n+        Client(Ensure started, Ensure stopped) {\n+            m_started = started;\n+            m_stopped = stopped;\n+        }\n \n-        Client(Ensure e) {\n-            m_e = e;\n+        synchronized void swap(ServiceReference prevRef, S prev, ServiceReference nextRef, S next) {\n+            info(\"client.swap: prev=%s, next=%s\", prev, next);\n+            m_services.put((String) nextRef.getProperty(\"name\"), next);\n         }\n-        \n-        void add(Map<String, String> props, S s) {\n-            info(\"client.add: %s (name=%s)\", s, props.get(\"name\"));\n+\n+        synchronized void add(Map<String, String> props, S s) {\n+            info(\"client.add: %s\", s);\n             m_services.put(props.get(\"name\"), s);\n         }\n-        \n-        void remove(Map<String, String> props, S s) {\n-            info(\"client.remove: %s (name=%s)\", s, props.get(\"name\"));\n+\n+        synchronized void remove(Map<String, String> props, S s) {\n+            info(\"client.remove: %s\", s);\n             m_services.remove(props.get(\"name\"));\n-            m_e.step();\n         }\n-        \n-        public void start() {   \n+\n+        public synchronized void start() {\n+            if (m_firstStartStackTrace != null) {\n+                error(\"client already started\", new Exception());\n+                error(\"first start was done here:\", m_firstStartStackTrace);\n+                return;\n+            }\n+            if (m_running) {\n+                error(\"Client already started\");\n+                return;\n+            }\n             if (m_services.size() != SERVICES) {\n                 error(\"Client started with unexpected number of injected services: %s\", m_services);\n                 return;\n             }\n-            m_e.step(1);\n-            m_execInvoke.execute(new Runnable() {\n-                public void run() {\n-                    for (int i = 0; i < INVOKES; i ++) {\n-                        for (Map.Entry<String, S> e : m_services.entrySet()) {\n-                            e.getValue().invoke(m_e);\n-                        }\n+            m_firstStartStackTrace = new Exception(\"First start stacktrace\");\n+            info(\"client starting\");\n+\n+            m_thread = new Thread(this, \"Client\");\n+            m_thread.setDaemon(true);\n+            m_running = true;\n+            m_thread.start();\n+        }\n+\n+        public void run() {\n+            m_started.step();\n+            while (m_running) {\n+                for (int i = 0; i < INVOKES; i++) {\n+                    for (Map.Entry<String, S> e : m_services.entrySet()) {\n+                        e.getValue().invoke();\n                     }\n                 }\n-            });\n+            }\n+        }\n+\n+        public synchronized void stop() {\n+            if (!m_running) {\n+                error(\"client can't be stopped (not running)\");\n+                return;\n+            }\n+\n+            info(\"stopping client\");\n+            m_running = false;\n+            try {\n+                m_thread.join();\n+            }\n+            catch (InterruptedException e) {\n+                error(\"interrupted while stopping client\", e);\n+            }\n+            info(\"client stopped\");\n+            m_firstStartStackTrace = null;\n+            m_stopped.step();\n+        }\n+    }\n+\n+    public class SAspect implements S {\n+        volatile S m_next;\n+        final String m_name;\n+        final Ensure m_invoked, m_started, m_stopped, m_updated;\n+        volatile Dictionary<String, String> m_conf;\n+\n+        SAspect(Ensure started, Ensure stopped, Ensure updated, Ensure invoked, String name) {\n+            m_started = started;\n+            m_stopped = stopped;\n+            m_updated = updated;\n+            m_invoked = invoked;\n+            m_name = name;\n+        }\n+\n+        public void updated(Dictionary<String, String> conf) {\n+            if (conf == null) {\n+                error(\"Aspect %s injected with a null configuration\", this);\n+                return;\n+            }\n+            debug(\"Aspect %s injected with configuration: %s\", this, conf);\n+            m_conf = conf;\n+            m_updated.step();\n         }\n-        \n+\n+        public void start() {\n+            info(\"started aspect %s\", this);\n+            m_started.step();\n+        }\n+\n         public void stop() {\n-            m_e.step(1 /* start */ + (SERVICES * INVOKES) + 1);\n+            info(\"stopped aspect %s\", this);\n+            m_stopped.step();\n+        }\n+\n+        public void invoke() {\n+            if (m_conf == null) {\n+                error(\"Aspect: %s has not been injected with its configuration\", this);\n+                return;\n+            }\n+\n+            if (!m_name.equals(m_conf.get(\"name\"))) {\n+                error(\"Aspect %s has not been injected with expected configuration: %s\", this, m_conf);\n+                return;\n+            }\n+            m_invoked.step();\n+            m_next.invoke();\n+        }\n+\n+        public String toString() {\n+            return m_name;\n         }\n     }\n }",
                "raw_url": "https://github.com/apache/felix/raw/3867a6223e610e1a513bb6f7b0c35576a0f7dd87/dependencymanager/test/src/test/java/org/apache/felix/dm/test/integration/api/ServiceRaceTest.java",
                "sha": "1096b00d68c161ac597ad5f773e5c9dbe12cb6bd",
                "status": "modified"
            }
        ],
        "message": "Finalized this test, which is reproducing some problems inside ConfigurationDependencyImpl.\nAlso, this test seems to reproduce a NPE inside config admin (see FELIX-4385).\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1558377 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/e4035330b7d1e0e2813462d498a3591a1d014fec",
        "patched_files": [],
        "repo": "felix",
        "unit_tests": [
            "ServiceRaceTest.java"
        ]
    },
    "felix_3bf562c": {
        "bug_id": "felix_3bf562c",
        "commit": "https://github.com/apache/felix/commit/3bf562cbf839c9390c3ac548164043a5b2a15fe7",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/felix/blob/3bf562cbf839c9390c3ac548164043a5b2a15fe7/converter/converter/src/main/java/org/apache/felix/converter/impl/AdapterImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/converter/converter/src/main/java/org/apache/felix/converter/impl/AdapterImpl.java?ref=3bf562cbf839c9390c3ac548164043a5b2a15fe7",
                "deletions": 2,
                "filename": "converter/converter/src/main/java/org/apache/felix/converter/impl/AdapterImpl.java",
                "patch": "@@ -65,8 +65,11 @@ public Adapter getAdapter() {\n         if (fromCls.equals(toCls))\n             throw new IllegalArgumentException();\n \n-        classRules.put(new TypePair(fromCls, toCls), (ConvertFunction<Object, Object>) toFun);\n-        classRules.put(new TypePair(toCls, fromCls), (ConvertFunction<Object, Object>) fromFun);\n+        if (toFun != null)\n+            classRules.put(new TypePair(fromCls, toCls), (ConvertFunction<Object, Object>) toFun);\n+\n+        if (fromFun != null)\n+            classRules.put(new TypePair(toCls, fromCls), (ConvertFunction<Object, Object>) fromFun);\n         return this;\n     }\n ",
                "raw_url": "https://github.com/apache/felix/raw/3bf562cbf839c9390c3ac548164043a5b2a15fe7/converter/converter/src/main/java/org/apache/felix/converter/impl/AdapterImpl.java",
                "sha": "9c4cca9ebbfbca293f86e9c4c4a78209b9ecf06d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/felix/blob/3bf562cbf839c9390c3ac548164043a5b2a15fe7/converter/converter/src/main/java/org/osgi/service/converter/Adapter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/converter/converter/src/main/java/org/osgi/service/converter/Adapter.java?ref=3bf562cbf839c9390c3ac548164043a5b2a15fe7",
                "deletions": 1,
                "filename": "converter/converter/src/main/java/org/osgi/service/converter/Adapter.java",
                "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) OSGi Alliance (2016). All Rights Reserved.\n+     * Copyright (c) OSGi Alliance (2016). All Rights Reserved.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.",
                "raw_url": "https://github.com/apache/felix/raw/3bf562cbf839c9390c3ac548164043a5b2a15fe7/converter/converter/src/main/java/org/osgi/service/converter/Adapter.java",
                "sha": "b882a86509585dfe12c8665d826acb7d5b7d9441",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/felix/blob/3bf562cbf839c9390c3ac548164043a5b2a15fe7/converter/converter/src/test/java/org/apache/felix/converter/impl/AdapterTest.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/converter/converter/src/test/java/org/apache/felix/converter/impl/AdapterTest.java?ref=3bf562cbf839c9390c3ac548164043a5b2a15fe7",
                "deletions": 0,
                "filename": "converter/converter/src/test/java/org/apache/felix/converter/impl/AdapterTest.java",
                "patch": "@@ -67,6 +67,41 @@ public void testStringArrayToStringAdapter() {\n                 ca.convert(\"A,B\").to(String[].class));\n     }\n \n+    static String convertToString(char[] a) {\n+        StringBuilder sb = new StringBuilder();\n+        for (char c : a) {\n+            sb.append(c);\n+        }\n+        return sb.toString();\n+    }\n+\n+    @Test\n+    public void testSecondLevelAdapter() {\n+        Adapter ca = converter.getAdapter();\n+\n+        ca.rule(char[].class, String.class, AdapterTest::convertToString, null);\n+        ca.rule(new Rule<String, Number>(String.class, Number.class, new ConvertFunction<String, Number>() {\n+            @Override\n+            public Number convert(String obj, Type targetType) throws Exception {\n+                if (Integer.class.equals(targetType))\n+                    return Integer.valueOf(-1);\n+                else if (Long.class.equals(targetType))\n+                    return Long.valueOf(-1);\n+                return null;\n+            }\n+        }));\n+\n+        assertEquals(\"hi\", ca.convert(new char[] {'h', 'i'}).to(String.class));\n+        assertEquals(Integer.valueOf(-1), ca.convert(\"Hello\").to(Integer.class));\n+        assertEquals(Long.valueOf(-1), ca.convert(\"Hello\").to(Long.class));\n+\n+        Adapter ca2 = ca.getAdapter();\n+        // Shadow the Integer variant but keep Long going to the Number variant.\n+        ca2.rule(String.class, Integer.class, v -> v.length(), null);\n+        assertEquals(5, ca2.convert(\"Hello\").to(Integer.class));\n+        assertEquals(Long.valueOf(-1), ca2.convert(\"Hello\").to(Long.class));\n+    }\n+\n     @Test @SuppressWarnings(\"rawtypes\")\n     public void testWildcardAdapter() {\n         ConvertFunction<List, Object> foo = new ConvertFunction<List, Object>() {",
                "raw_url": "https://github.com/apache/felix/raw/3bf562cbf839c9390c3ac548164043a5b2a15fe7/converter/converter/src/test/java/org/apache/felix/converter/impl/AdapterTest.java",
                "sha": "38240d98f7dc571a753289721c62ab19286df232",
                "status": "modified"
            }
        ],
        "message": "Felix Converter Service - fix NPE and add additional test\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1759361 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/6d4b6f27b1f25b68daa30539a5bcc934f1f67874",
        "patched_files": [
            "AdapterImpl.java",
            "Adapter.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "AdapterTest.java"
        ]
    },
    "felix_3c6475c": {
        "bug_id": "felix_3c6475c",
        "commit": "https://github.com/apache/felix/commit/3c6475c4147ea5d27fa2896f044d61c29d633f8c",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/felix/blob/3c6475c4147ea5d27fa2896f044d61c29d633f8c/osgi-r7/configurator/src/main/java/org/apache/felix/configurator/impl/Configurator.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/osgi-r7/configurator/src/main/java/org/apache/felix/configurator/impl/Configurator.java?ref=3c6475c4147ea5d27fa2896f044d61c29d633f8c",
                "deletions": 10,
                "filename": "osgi-r7/configurator/src/main/java/org/apache/felix/configurator/impl/Configurator.java",
                "patch": "@@ -529,22 +529,28 @@ public boolean activate(final ConfigList configList, final Config cfg) {\n         Long configAdminServiceBundleId = this.state.getConfigAdminBundleId(cfg.getBundleId());\n         if ( configAdminServiceBundleId == null ) {\n             final Bundle configBundle = cfg.getBundleId() == -1 ? this.bundleContext.getBundle() : this.bundleContext.getBundle(Constants.SYSTEM_BUNDLE_LOCATION).getBundleContext().getBundle(cfg.getBundleId());\n-            if ( configBundle != null ) {\n+            if ( configBundle != null && configBundle.getState() == Bundle.ACTIVE ) {\n                 if ( System.getSecurityManager() == null\n                      || configBundle.hasPermission( new ServicePermission(ConfigurationAdmin.class.getName(), ServicePermission.GET)) ) {\n                     try {\n-                        final Collection<ServiceReference<ConfigurationAdmin>> refs = configBundle.getBundleContext().getServiceReferences(ConfigurationAdmin.class, null);\n-                        final List<ServiceReference<ConfigurationAdmin>> sortedRefs = new ArrayList<>(refs);\n-                        Collections.sort(sortedRefs);\n-                        for(int i=sortedRefs.size();i>0;i--) {\n-                            final ServiceReference<ConfigurationAdmin> r = sortedRefs.get(i-1);\n-                            synchronized ( this.configAdminReferences ) {\n-                                if ( this.configAdminReferences.contains(r) ) {\n-                                    configAdminServiceBundleId = r.getBundle().getBundleId();\n-                                    break;\n+                        final BundleContext ctx = configBundle.getBundleContext();\n+                        if ( ctx != null ) {\n+                            final Collection<ServiceReference<ConfigurationAdmin>> refs = ctx.getServiceReferences(ConfigurationAdmin.class, null);\n+                            final List<ServiceReference<ConfigurationAdmin>> sortedRefs = new ArrayList<>(refs);\n+                            Collections.sort(sortedRefs);\n+                            for(int i=sortedRefs.size();i>0;i--) {\n+                                final ServiceReference<ConfigurationAdmin> r = sortedRefs.get(i-1);\n+                                synchronized ( this.configAdminReferences ) {\n+                                    if ( this.configAdminReferences.contains(r) ) {\n+                                        configAdminServiceBundleId = r.getBundle().getBundleId();\n+                                        break;\n+                                    }\n                                 }\n                             }\n                         }\n+                    } catch ( final IllegalStateException e) {\n+                        // this might happen if the config admin bundle gets deactivated while we use it\n+                        // we can ignore this and retry later on\n                     } catch (final InvalidSyntaxException e) {\n                         // this can never happen as we pass {@code null} as the filter\n                     }",
                "raw_url": "https://github.com/apache/felix/raw/3c6475c4147ea5d27fa2896f044d61c29d633f8c/osgi-r7/configurator/src/main/java/org/apache/felix/configurator/impl/Configurator.java",
                "sha": "a6de1bd781cc061e169eb1396622c9b50a6eb38c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/felix/blob/3c6475c4147ea5d27fa2896f044d61c29d633f8c/osgi-r7/configurator/src/test/java/org/apache/felix/configurator/impl/ConfiguratorTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/osgi-r7/configurator/src/test/java/org/apache/felix/configurator/impl/ConfiguratorTest.java?ref=3c6475c4147ea5d27fa2896f044d61c29d633f8c",
                "deletions": 0,
                "filename": "osgi-r7/configurator/src/test/java/org/apache/felix/configurator/impl/ConfiguratorTest.java",
                "patch": "@@ -61,6 +61,7 @@\n     @Before public void setup() throws IOException {\n         bundle = mock(Bundle.class);\n         when(bundle.getBundleId()).thenReturn(42L);\n+        when(bundle.getState()).thenReturn(Bundle.ACTIVE);\n         bundleContext = mock(BundleContext.class);\n         when(bundle.getBundleContext()).thenReturn(bundleContext);\n         when(bundleContext.getBundle()).thenReturn(bundle);\n@@ -81,6 +82,7 @@ private Bundle setupBundle(final long id) throws Exception {\n         final Bundle b = mock(Bundle.class);\n         when(b.getBundleId()).thenReturn(id);\n         when(b.getLastModified()).thenReturn(5L);\n+        when(b.getState()).thenReturn(Bundle.ACTIVE);\n         final BundleWiring wiring = mock(BundleWiring.class);\n         when(b.adapt(BundleWiring.class)).thenReturn(wiring);\n         final BundleRequirement req = mock(BundleRequirement.class);",
                "raw_url": "https://github.com/apache/felix/raw/3c6475c4147ea5d27fa2896f044d61c29d633f8c/osgi-r7/configurator/src/test/java/org/apache/felix/configurator/impl/ConfiguratorTest.java",
                "sha": "c18c1b86c19a6cedb1a7ebb2ae80da2462563c3c",
                "status": "modified"
            }
        ],
        "message": "Fix NPE when config admin is started later\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1807388 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/126451ce5220dcfeff48021c744fe590258a13b3",
        "patched_files": [
            "Configurator.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ConfiguratorTest.java"
        ]
    },
    "felix_412b22a": {
        "bug_id": "felix_412b22a",
        "commit": "https://github.com/apache/felix/commit/412b22a76e61fdfd4d1e7d733d316139a56f14aa",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/felix/blob/412b22a76e61fdfd4d1e7d733d316139a56f14aa/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java?ref=412b22a76e61fdfd4d1e7d733d316139a56f14aa",
                "deletions": 4,
                "filename": "resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "patch": "@@ -40,7 +40,6 @@\n \n import org.apache.felix.resolver.util.ArrayMap;\n import org.apache.felix.resolver.util.OpenHashMap;\n-\n import org.osgi.framework.namespace.BundleNamespace;\n import org.osgi.framework.namespace.ExecutionEnvironmentNamespace;\n import org.osgi.framework.namespace.HostNamespace;\n@@ -1730,12 +1729,12 @@ private static boolean isCompatible(\n         }\n \n         Set<Capability> packageSources = sources.get(cap);\n-        if(packageSources == null) \n+        if(packageSources == null)\n         {\n             return new HashSet<Capability>();\n         }\n \n-        return packageSources;  \n+        return packageSources;\n     }\n \n     private static void getPackageSourcesInternal(\n@@ -2074,7 +2073,7 @@ public WireCandidate(Requirement requirement, Capability capability)\n         }\n     }\n \n-    private static class Packages\n+    public static class Packages\n     {\n         public final OpenHashMap<String, Blame> m_exportedPkgs;\n         public final OpenHashMap<String, List<Blame>> m_importedPkgs;",
                "raw_url": "https://github.com/apache/felix/raw/412b22a76e61fdfd4d1e7d733d316139a56f14aa/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "sha": "211e5e21d80c5251a9b3ec47a4269b1be12ad66e",
                "status": "modified"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/felix/blob/412b22a76e61fdfd4d1e7d733d316139a56f14aa/resolver/src/test/java/org/apache/felix/resolver/test/ResolverTest.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/resolver/src/test/java/org/apache/felix/resolver/test/ResolverTest.java?ref=412b22a76e61fdfd4d1e7d733d316139a56f14aa",
                "deletions": 0,
                "filename": "resolver/src/test/java/org/apache/felix/resolver/test/ResolverTest.java",
                "patch": "@@ -23,13 +23,15 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n import org.apache.felix.resolver.Logger;\n import org.apache.felix.resolver.ResolverImpl;\n@@ -42,6 +44,7 @@\n import org.apache.felix.resolver.test.util.ResolveContextImpl;\n import org.apache.felix.resolver.test.util.ResourceImpl;\n import org.junit.Test;\n+import org.mockito.Mockito;\n import org.osgi.framework.Constants;\n import org.osgi.framework.namespace.BundleNamespace;\n import org.osgi.framework.namespace.HostNamespace;\n@@ -577,6 +580,37 @@ public void testScenario12() throws Exception\n         assertEquals(0, wireMap.size());\n     }\n \n+    @Test\n+    public void testPackageSources() throws Exception {\n+        Method m = ResolverImpl.class.getDeclaredMethod(\"getPackageSources\",\n+                Capability.class, Map.class);\n+        m.setAccessible(true);\n+\n+        Capability cap = Mockito.mock(Capability.class);\n+        assertEquals(Collections.emptySet(),\n+                m.invoke(null, cap, new HashMap<Resource, ResolverImpl.Packages>()));\n+\n+        Capability cap2 = Mockito.mock(Capability.class);\n+        Resource res2 = Mockito.mock(Resource.class);\n+        Mockito.when(cap2.getResource()).thenReturn(res2);\n+        Map<Resource, ResolverImpl.Packages> map2 = new HashMap<Resource, ResolverImpl.Packages>();\n+        map2.put(res2, new ResolverImpl.Packages(res2));\n+        assertEquals(Collections.emptySet(), m.invoke(null, cap2, map2));\n+\n+        Capability cap3 = Mockito.mock(Capability.class);\n+        Resource res3 = Mockito.mock(Resource.class);\n+        Mockito.when(cap3.getResource()).thenReturn(res3);\n+        Map<Resource, ResolverImpl.Packages> map3 = new HashMap<Resource, ResolverImpl.Packages>();\n+        ResolverImpl.Packages pkgs3 = new ResolverImpl.Packages(res3);\n+        Set<Capability> srcCaps3 = Collections.singleton(Mockito.mock(Capability.class));\n+        Map<Capability, Set<Capability>> srcMap3 = Collections.singletonMap(\n+                cap3, srcCaps3);\n+        pkgs3.m_sources.putAll(srcMap3);\n+        map3.put(res3, pkgs3);\n+        assertEquals(srcCaps3, m.invoke(null, cap3, map3));\n+\n+    }\n+\n     private static String getResourceName(Resource r)\n     {\n         return r.getCapabilities(IdentityNamespace.IDENTITY_NAMESPACE).get(0).getAttributes()",
                "raw_url": "https://github.com/apache/felix/raw/412b22a76e61fdfd4d1e7d733d316139a56f14aa/resolver/src/test/java/org/apache/felix/resolver/test/ResolverTest.java",
                "sha": "11e518fa922aa07ebcf2a004374dca02ca88b804",
                "status": "modified"
            }
        ],
        "message": "FELIX-5015 Unit tests (for NPE in ResolverImpl)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1705686 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/6dea75105231d39ca155e89dda12acbb87bf8e63",
        "patched_files": [
            "ResolverImpl.java",
            "Resolver.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ResolverImplTest.java",
            "ResolverTest.java"
        ]
    },
    "felix_4365f04": {
        "bug_id": "felix_4365f04",
        "commit": "https://github.com/apache/felix/commit/4365f04e0bda5a92df682a57552d46cca83cddf4",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/felix/blob/4365f04e0bda5a92df682a57552d46cca83cddf4/webconsole/src/main/java/org/apache/felix/webconsole/AbstractWebConsolePlugin.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/webconsole/src/main/java/org/apache/felix/webconsole/AbstractWebConsolePlugin.java?ref=4365f04e0bda5a92df682a57552d46cca83cddf4",
                "deletions": 1,
                "filename": "webconsole/src/main/java/org/apache/felix/webconsole/AbstractWebConsolePlugin.java",
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.commons.io.IOUtils;\n import org.osgi.framework.Bundle;\n import org.osgi.framework.BundleContext;\n+import org.osgi.service.log.LogService;\n \n \n /**\n@@ -898,7 +899,7 @@ private final String readTemplateFile( final Class clazz, final String templateF\n         }\n \n         // template file does not exist, return an empty string\n-        log( \"readTemplateFile: File '\" + templateFile + \"' not found through class \" + clazz ); //$NON-NLS-1$ //$NON-NLS-2$\n+        log( LogService.LOG_ERROR, \"readTemplateFile: File '\" + templateFile + \"' not found through class \" + clazz ); //$NON-NLS-1$ //$NON-NLS-2$\n         return \"\"; //$NON-NLS-1$\n     }\n ",
                "raw_url": "https://github.com/apache/felix/raw/4365f04e0bda5a92df682a57552d46cca83cddf4/webconsole/src/main/java/org/apache/felix/webconsole/AbstractWebConsolePlugin.java",
                "sha": "16d8e56a4461d4aa5aca2c8e2c7ee15486a014d8",
                "status": "modified"
            }
        ],
        "message": "Fixed FELIX-3405 NPE in Web Console\nhttps://issues.apache.org/jira/browse/FELIX-3405\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1306203 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/36e947451db3b558d660b6e4e17e24cc588e411b",
        "patched_files": [
            "AbstractWebConsolePlugin.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "AbstractWebConsolePluginTest.java"
        ]
    },
    "felix_45e286d": {
        "bug_id": "felix_45e286d",
        "commit": "https://github.com/apache/felix/commit/45e286d5f8cccdff22391b7cd1ec6963fae80f4c",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/felix/blob/45e286d5f8cccdff22391b7cd1ec6963fae80f4c/scrplugin/generator/changelog.txt",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scrplugin/generator/changelog.txt?ref=45e286d5f8cccdff22391b7cd1ec6963fae80f4c",
                "deletions": 0,
                "filename": "scrplugin/generator/changelog.txt",
                "patch": "@@ -1,3 +1,8 @@\n+Changes from 1.8.2 to 1.8.0\n+---------------------------\n+** Bug\n+    * [FELIX-4192] - SCR Generator fails with a NPE in case a class level Reference doesn't define a referenceInterface\n+\n Changes from 1.8.0 to 1.7.0\n ---------------------------\n ** Improvement",
                "raw_url": "https://github.com/apache/felix/raw/45e286d5f8cccdff22391b7cd1ec6963fae80f4c/scrplugin/generator/changelog.txt",
                "sha": "dbbc673bc5bc8d248b2f61e7ba32c35d9ae54c9e",
                "status": "modified"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/felix/blob/45e286d5f8cccdff22391b7cd1ec6963fae80f4c/scrplugin/generator/pom.xml",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scrplugin/generator/pom.xml?ref=45e286d5f8cccdff22391b7cd1ec6963fae80f4c",
                "deletions": 0,
                "filename": "scrplugin/generator/pom.xml",
                "patch": "@@ -62,6 +62,43 @@\n             <artifactId>org.osgi.compendium</artifactId>\n             <version>4.2.0</version>\n         </dependency>\n+\n+\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <version>4.8.1</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.easymock</groupId>\n+            <artifactId>easymock</artifactId>\n+            <version>3.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>commons-lang</groupId>\n+            <artifactId>commons-lang</artifactId>\n+            <version>2.6</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>commons-io</groupId>\n+            <artifactId>commons-io</artifactId>\n+            <version>2.4</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.apache.felix</groupId>\n+            <artifactId>org.apache.felix.scr.annotations</artifactId>\n+            <version>1.9.6</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n     </dependencies>\n     \n     <build>",
                "raw_url": "https://github.com/apache/felix/raw/45e286d5f8cccdff22391b7cd1ec6963fae80f4c/scrplugin/generator/pom.xml",
                "sha": "419ad2be934de7544259327b59379902cae26775",
                "status": "modified"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/felix/blob/45e286d5f8cccdff22391b7cd1ec6963fae80f4c/scrplugin/generator/src/main/java/org/apache/felix/scrplugin/helper/Validator.java",
                "changes": 80,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scrplugin/generator/src/main/java/org/apache/felix/scrplugin/helper/Validator.java?ref=45e286d5f8cccdff22391b7cd1ec6963fae80f4c",
                "deletions": 39,
                "filename": "scrplugin/generator/src/main/java/org/apache/felix/scrplugin/helper/Validator.java",
                "patch": "@@ -453,52 +453,54 @@ private void validateReference(final ReferenceDescription ref, final boolean com\n             ref.setStrategy(ReferenceStrategy.EVENT);\n         }\n \n-        // validate bind and unbind methods\n-        if (ref.getStrategy() != ReferenceStrategy.LOOKUP) {\n-            String bindName = ref.getBind();\n-            String unbindName = ref.getUnbind();\n-\n-            final boolean canGenerate = this.options.isGenerateAccessors() &&\n-                            ref.getField() != null\n-                            && (ref.getCardinality() == ReferenceCardinality.OPTIONAL_UNARY || ref.getCardinality() == ReferenceCardinality.MANDATORY_UNARY);\n-            if (bindName == null && !canGenerate ) {\n-                bindName = \"bind\";\n-            }\n-            if (unbindName == null && !canGenerate ) {\n-                unbindName = \"unbind\";\n-            }\n+        // validate methods only if interface name is set\n+        if (!StringUtils.isEmpty(ref.getInterfaceName())) {\n+            // validate bind and unbind methods\n+            if (ref.getStrategy() != ReferenceStrategy.LOOKUP) {\n+                String bindName = ref.getBind();\n+                String unbindName = ref.getUnbind();\n+\n+                final boolean canGenerate = this.options.isGenerateAccessors() &&\n+                                ref.getField() != null\n+                                && (ref.getCardinality() == ReferenceCardinality.OPTIONAL_UNARY || ref.getCardinality() == ReferenceCardinality.MANDATORY_UNARY);\n+                if (bindName == null && !canGenerate ) {\n+                    bindName = \"bind\";\n+                }\n+                if (unbindName == null && !canGenerate ) {\n+                    unbindName = \"unbind\";\n+                }\n \n-            if ( bindName != null ) {\n-                bindName = this.validateMethod(ref, bindName, componentIsAbstract);\n-                if ( bindName == null && ref.getField() != null ) {\n-                    iLog.addError(\"Something went wrong: \" + canGenerate + \" - \" + this.options.isGenerateAccessors() + \" - \" + ref.getCardinality(), ref.getField().getName());\n+                if ( bindName != null ) {\n+                    bindName = this.validateMethod(ref, bindName, componentIsAbstract);\n+                    if ( bindName == null && ref.getField() != null ) {\n+                        iLog.addError(\"Something went wrong: \" + canGenerate + \" - \" + this.options.isGenerateAccessors() + \" - \" + ref.getCardinality(), ref.getField().getName());\n+                    }\n+                } else {\n+                    bindName = \"bind\" + Character.toUpperCase(ref.getName().charAt(0)) + ref.getName().substring(1);\n+                }\n+                if ( unbindName != null ) {\n+                    unbindName = this.validateMethod(ref, unbindName, componentIsAbstract);\n+                } else {\n+                    unbindName = \"unbind\" + Character.toUpperCase(ref.getName().charAt(0)) + ref.getName().substring(1);\n                 }\n-            } else {\n-                bindName = \"bind\" + Character.toUpperCase(ref.getName().charAt(0)) + ref.getName().substring(1);\n-            }\n-            if ( unbindName != null ) {\n-                unbindName = this.validateMethod(ref, unbindName, componentIsAbstract);\n-            } else {\n-                unbindName = \"unbind\" + Character.toUpperCase(ref.getName().charAt(0)) + ref.getName().substring(1);\n-            }\n \n-            if (iLog.getNumberOfErrors() == currentIssueCount) {\n-                ref.setBind(bindName);\n-                ref.setUnbind(unbindName);\n+                if (iLog.getNumberOfErrors() == currentIssueCount) {\n+                    ref.setBind(bindName);\n+                    ref.setUnbind(unbindName);\n+                }\n+            } else {\n+                ref.setBind(null);\n+                ref.setUnbind(null);\n             }\n-        } else {\n-            ref.setBind(null);\n-            ref.setUnbind(null);\n-        }\n \n-        // validate updated method\n-        if (ref.getUpdated() != null) {\n-            if (this.options.getSpecVersion().ordinal() < SpecVersion.VERSION_1_1_FELIX.ordinal()) {\n-                this.logError(ref, \"Updated method declaration requires version \"\n-                                + SpecVersion.VERSION_1_1_FELIX.getName() + \", \" + SpecVersion.VERSION_1_2.getName() + \" or newer\");\n+            // validate updated method\n+            if (ref.getUpdated() != null) {\n+                if (this.options.getSpecVersion().ordinal() < SpecVersion.VERSION_1_1_FELIX.ordinal()) {\n+                    this.logError(ref, \"Updated method declaration requires version \"\n+                                    + SpecVersion.VERSION_1_1_FELIX.getName() + \", \" + SpecVersion.VERSION_1_2.getName() + \" or newer\");\n+                }\n             }\n         }\n-\n     }\n \n     private String validateMethod(final ReferenceDescription ref, final String methodName, final boolean componentIsAbstract)",
                "raw_url": "https://github.com/apache/felix/raw/45e286d5f8cccdff22391b7cd1ec6963fae80f4c/scrplugin/generator/src/main/java/org/apache/felix/scrplugin/helper/Validator.java",
                "sha": "baddef950a416d5b471c82b4b471a56a4886ad81",
                "status": "modified"
            },
            {
                "additions": 115,
                "blob_url": "https://github.com/apache/felix/blob/45e286d5f8cccdff22391b7cd1ec6963fae80f4c/scrplugin/generator/src/test/java/org/apache/felix/scrplugin/SCRDescriptorGeneratorTest.java",
                "changes": 115,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scrplugin/generator/src/test/java/org/apache/felix/scrplugin/SCRDescriptorGeneratorTest.java?ref=45e286d5f8cccdff22391b7cd1ec6963fae80f4c",
                "deletions": 0,
                "filename": "scrplugin/generator/src/test/java/org/apache/felix/scrplugin/SCRDescriptorGeneratorTest.java",
                "patch": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.felix.scrplugin;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.UUID;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.easymock.EasyMock;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class SCRDescriptorGeneratorTest {\n+\n+    File folder;\n+    File dest;\n+\n+    @Before\n+    public void setup() throws IOException {\n+        folder = new File(FileUtils.getTempDirectory(), UUID.randomUUID().toString());\n+        FileUtils.forceMkdir(folder);\n+\n+        dest = new File(folder, \"testComponents\");\n+        FileUtils.forceMkdir(dest);\n+\n+    }\n+\n+    @After\n+    public void tearDown() throws IOException {\n+        FileUtils.deleteDirectory(folder);\n+    }\n+\n+    @Test\n+    public void testSimpleComponent() throws SCRDescriptorException, SCRDescriptorFailureException, IOException {\n+        Env env = new Env(\"SimpleComponent\").invoke();\n+        EasyMock.replay(env.log());\n+        env.generator().execute();\n+        EasyMock.verify(env.log());\n+    }\n+\n+    @Test\n+    public void testComponentWithClassReferenceAndMissingInterface() throws SCRDescriptorException, SCRDescriptorFailureException, IOException {\n+        Env env = new Env(\"ComponentWithClassReferenceAndMissingInterface\").invoke();\n+        EasyMock.replay(env.log());\n+        try {\n+            env.generator().execute();\n+        } catch ( final SCRDescriptorFailureException e) {\n+            // this is expected as the interface for a reference is missing\n+        }\n+        EasyMock.verify(env.log());\n+    }\n+\n+    private void unpackSource(String resource, File dest) throws IOException {\n+        IOUtils.copy(getClass().getResourceAsStream(resource), new FileOutputStream(dest));\n+    }\n+\n+    /**\n+     * Setups a minimal environment.\n+     */\n+    private class Env {\n+        private String className;\n+        private Log log;\n+        private SCRDescriptorGenerator gen;\n+\n+        public Env(String className) {\n+            this.className = className;\n+        }\n+\n+        public Log log() {\n+            return log;\n+        }\n+\n+        public SCRDescriptorGenerator generator() {\n+            return gen;\n+        }\n+\n+        public Env invoke() throws IOException {\n+            File aFile = new File(dest, className + \".class\");\n+            unpackSource(\"/testComponents/\" + className + \".class\", aFile);\n+\n+            log = EasyMock.createNiceMock(Log.class);\n+            gen = new SCRDescriptorGenerator(log);\n+            Project p = new Project();\n+            p.setClassLoader(getClass().getClassLoader());\n+            p.setSources(Collections.<Source>singletonList(new SourceImpl(\"testComponents.\" + className, aFile)));\n+\n+            Options o = new Options();\n+            o.setOutputDirectory(folder);\n+            gen.setProject(p);\n+            gen.setOptions(o);\n+            return this;\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/felix/raw/45e286d5f8cccdff22391b7cd1ec6963fae80f4c/scrplugin/generator/src/test/java/org/apache/felix/scrplugin/SCRDescriptorGeneratorTest.java",
                "sha": "9272576cffade473170a914a9f2f6148fbdbd330",
                "status": "added"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/felix/blob/45e286d5f8cccdff22391b7cd1ec6963fae80f4c/scrplugin/generator/src/test/java/org/apache/felix/scrplugin/SourceImpl.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scrplugin/generator/src/test/java/org/apache/felix/scrplugin/SourceImpl.java?ref=45e286d5f8cccdff22391b7cd1ec6963fae80f4c",
                "deletions": 0,
                "filename": "scrplugin/generator/src/test/java/org/apache/felix/scrplugin/SourceImpl.java",
                "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.felix.scrplugin;\n+\n+import java.io.File;\n+\n+class SourceImpl implements Source {\n+    String className;\n+    File file;\n+\n+    SourceImpl(String className, File file) {\n+        this.className = className;\n+        this.file = file;\n+    }\n+\n+    public String getClassName() {\n+        return className;\n+    }\n+\n+    public File getFile() {\n+        return file;\n+    }\n+}",
                "raw_url": "https://github.com/apache/felix/raw/45e286d5f8cccdff22391b7cd1ec6963fae80f4c/scrplugin/generator/src/test/java/org/apache/felix/scrplugin/SourceImpl.java",
                "sha": "2601490d7529767b45212b37c101d29257db775b",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/felix/blob/45e286d5f8cccdff22391b7cd1ec6963fae80f4c/scrplugin/generator/src/test/java/testComponents/ComponentWithClassReferenceAndMissingInterface.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scrplugin/generator/src/test/java/testComponents/ComponentWithClassReferenceAndMissingInterface.java?ref=45e286d5f8cccdff22391b7cd1ec6963fae80f4c",
                "deletions": 0,
                "filename": "scrplugin/generator/src/test/java/testComponents/ComponentWithClassReferenceAndMissingInterface.java",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package testComponents;\n+\n+import org.apache.felix.scr.annotations.Component;\n+import org.apache.felix.scr.annotations.Reference;\n+\n+@Component\n+@Reference(bind = \"setRunnable\", unbind = \"unsetRunnable\")\n+public class ComponentWithClassReferenceAndMissingInterface {\n+\n+}",
                "raw_url": "https://github.com/apache/felix/raw/45e286d5f8cccdff22391b7cd1ec6963fae80f4c/scrplugin/generator/src/test/java/testComponents/ComponentWithClassReferenceAndMissingInterface.java",
                "sha": "0114444eaa87fd1daf1ab835e9a95ffe82b227ee",
                "status": "added"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/felix/blob/45e286d5f8cccdff22391b7cd1ec6963fae80f4c/scrplugin/generator/src/test/java/testComponents/SimpleComponent.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scrplugin/generator/src/test/java/testComponents/SimpleComponent.java?ref=45e286d5f8cccdff22391b7cd1ec6963fae80f4c",
                "deletions": 0,
                "filename": "scrplugin/generator/src/test/java/testComponents/SimpleComponent.java",
                "patch": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package testComponents;\n+\n+import org.apache.felix.scr.annotations.Component;\n+\n+@Component\n+public class SimpleComponent {\n+}",
                "raw_url": "https://github.com/apache/felix/raw/45e286d5f8cccdff22391b7cd1ec6963fae80f4c/scrplugin/generator/src/test/java/testComponents/SimpleComponent.java",
                "sha": "a093198e94e891cfe3b2411be813d911198ec16a",
                "status": "added"
            }
        ],
        "message": "FELIX-4192 : SCR Generator fails with a NPE in case a class level Reference doesn't define a referenceInterface. Add test cases from Daniel Kuffner\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1513731 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/e1f2842590e35f6487b27542d4fe17f4b4741c0e",
        "patched_files": [
            "Validator.java",
            "SimpleComponent.java",
            "SourceImpl.java",
            "pom.java",
            "changelog.java",
            "ComponentWithClassReferenceAndMissingInterface.java",
            "SCRDescriptorGenerator.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "SCRDescriptorGeneratorTest.java"
        ]
    },
    "felix_4aaa34a": {
        "bug_id": "felix_4aaa34a",
        "commit": "https://github.com/apache/felix/commit/4aaa34a20eb4b5c27a96ead3749996a35ac969b1",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/felix/blob/4aaa34a20eb4b5c27a96ead3749996a35ac969b1/bundleplugin/src/main/java/org/apache/felix/bundleplugin/BundlePlugin.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/bundleplugin/src/main/java/org/apache/felix/bundleplugin/BundlePlugin.java?ref=4aaa34a20eb4b5c27a96ead3749996a35ac969b1",
                "deletions": 4,
                "filename": "bundleplugin/src/main/java/org/apache/felix/bundleplugin/BundlePlugin.java",
                "patch": "@@ -937,10 +937,13 @@ protected Properties getDefaultProperties( MavenProject currentProject )\n \n         if ( currentProject.getOrganization() != null )\n         {\n-            String organizationName = currentProject.getOrganization().getName();\n-            header( properties, Analyzer.BUNDLE_VENDOR, organizationName );\n-            properties.put( \"project.organization.name\", organizationName );\n-            properties.put( \"pom.organization.name\", organizationName );\n+            if ( currentProject.getOrganization().getName() != null )\n+            {\n+                String organizationName = currentProject.getOrganization().getName();\n+                header( properties, Analyzer.BUNDLE_VENDOR, organizationName );\n+                properties.put( \"project.organization.name\", organizationName );\n+                properties.put( \"pom.organization.name\", organizationName );\n+            }\n             if ( currentProject.getOrganization().getUrl() != null )\n             {\n                 String organizationUrl = currentProject.getOrganization().getUrl();",
                "raw_url": "https://github.com/apache/felix/raw/4aaa34a20eb4b5c27a96ead3749996a35ac969b1/bundleplugin/src/main/java/org/apache/felix/bundleplugin/BundlePlugin.java",
                "sha": "7a43d2c660a8f97c171dbaa90d7f0c0d806d13b5",
                "status": "modified"
            }
        ],
        "message": "FELIX-2722: avoid NPE when project.organization.name is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1139278 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/acee946653e22fd863b8ccd78473ad4ff0fb3823",
        "patched_files": [
            "BundlePlugin.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "BundlePluginTest.java"
        ]
    },
    "felix_4d80c9a": {
        "bug_id": "felix_4d80c9a",
        "commit": "https://github.com/apache/felix/commit/4d80c9a243d446b7144efb1ae58458bdf1dfa5e2",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/felix/blob/4d80c9a243d446b7144efb1ae58458bdf1dfa5e2/http/base/src/main/java/org/apache/felix/http/base/internal/registry/HandlerRegistry.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/http/base/src/main/java/org/apache/felix/http/base/internal/registry/HandlerRegistry.java?ref=4d80c9a243d446b7144efb1ae58458bdf1dfa5e2",
                "deletions": 0,
                "filename": "http/base/src/main/java/org/apache/felix/http/base/internal/registry/HandlerRegistry.java",
                "patch": "@@ -52,6 +52,15 @@ public void init()\n         this.add(new PerContextHandlerRegistry());\n     }\n \n+    /**\n+     * Reset to initial state\n+     */\n+    public void reset()\n+    {\n+        this.registrations.clear();\n+        this.init();\n+    }\n+\n     /**\n      * Shutdown\n      */",
                "raw_url": "https://github.com/apache/felix/raw/4d80c9a243d446b7144efb1ae58458bdf1dfa5e2/http/base/src/main/java/org/apache/felix/http/base/internal/registry/HandlerRegistry.java",
                "sha": "8e25b6e3fc1e6400bd097e226e16de121382773c",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/felix/blob/4d80c9a243d446b7144efb1ae58458bdf1dfa5e2/http/base/src/main/java/org/apache/felix/http/base/internal/whiteboard/FailureStateHandler.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/http/base/src/main/java/org/apache/felix/http/base/internal/whiteboard/FailureStateHandler.java?ref=4d80c9a243d446b7144efb1ae58458bdf1dfa5e2",
                "deletions": 0,
                "filename": "http/base/src/main/java/org/apache/felix/http/base/internal/whiteboard/FailureStateHandler.java",
                "patch": "@@ -34,6 +34,14 @@\n \n     private final Map<AbstractInfo<?>, FailureStatus> serviceFailures = new ConcurrentHashMap<AbstractInfo<?>, FailureStatus>();\n \n+    /**\n+     * Remove all failures.\n+     */\n+    public void clear()\n+    {\n+        this.serviceFailures.clear();\n+    }\n+\n     public void add(final AbstractInfo<?> info, final int reason)\n     {\n         this.add(info, 0, reason);",
                "raw_url": "https://github.com/apache/felix/raw/4d80c9a243d446b7144efb1ae58458bdf1dfa5e2/http/base/src/main/java/org/apache/felix/http/base/internal/whiteboard/FailureStateHandler.java",
                "sha": "d5e5b411ed411d1c5b082ab37a0e000b358bf00d",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/felix/blob/4d80c9a243d446b7144efb1ae58458bdf1dfa5e2/http/base/src/main/java/org/apache/felix/http/base/internal/whiteboard/WhiteboardManager.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/http/base/src/main/java/org/apache/felix/http/base/internal/whiteboard/WhiteboardManager.java?ref=4d80c9a243d446b7144efb1ae58458bdf1dfa5e2",
                "deletions": 7,
                "filename": "http/base/src/main/java/org/apache/felix/http/base/internal/whiteboard/WhiteboardManager.java",
                "patch": "@@ -88,12 +88,18 @@\n \n public final class WhiteboardManager\n {\n+    /** The bundle context of the http bundle. */\n     private final BundleContext httpBundleContext;\n \n+    /** The http service factory. */\n     private final HttpServiceFactory httpServiceFactory;\n \n     private final HttpServiceRuntimeImpl serviceRuntime;\n \n+    private final List<ServiceTracker<?, ?>> trackers = new ArrayList<ServiceTracker<?, ?>>();\n+\n+    private final HttpServicePlugin plugin;\n+\n     /** A map containing all servlet context registrations. Mapped by context name */\n     private final Map<String, List<WhiteboardContextHandler>> contextMap = new HashMap<String, List<WhiteboardContextHandler>>();\n \n@@ -108,17 +114,14 @@\n \n     private volatile ServiceRegistration<ServletContextHelper> defaultContextRegistration;\n \n-    private final List<ServiceTracker<?, ?>> trackers = new ArrayList<ServiceTracker<?, ?>>();\n-\n     private volatile ServiceRegistration<HttpServiceRuntime> runtimeServiceReg;\n \n-    private final HttpServicePlugin plugin;\n-\n     /**\n      * Create a new whiteboard http manager\n-     * @param bundleContext\n-     * @param httpServiceFactory\n-     * @param registry\n+     *\n+     * @param bundleContext The bundle context of the http bundle\n+     * @param httpServiceFactory The http service factory\n+     * @param registry The handler registry\n      */\n     public WhiteboardManager(final BundleContext bundleContext,\n             final HttpServiceFactory httpServiceFactory,\n@@ -131,6 +134,10 @@ public WhiteboardManager(final BundleContext bundleContext,\n         this.plugin = new HttpServicePlugin(bundleContext, this.serviceRuntime);\n     }\n \n+    /**\n+     * Start the whiteboard manager\n+     * @param containerContext The servlet context\n+     */\n     public void start(final ServletContext containerContext)\n     {\n         this.serviceRuntime.setAttribute(HttpServiceRuntimeConstants.HTTP_SERVICE_ID,\n@@ -190,6 +197,10 @@ public void ungetService(\n         this.plugin.register();\n     }\n \n+    /**\n+     * Add a tracker and start it\n+     * @param tracker The tracker instance\n+     */\n     private void addTracker(ServiceTracker<?, ?> tracker)\n     {\n         this.trackers.add(tracker);\n@@ -210,6 +221,11 @@ public void stop()\n \n         this.serviceRuntime.setServiceReference(null);\n \n+        this.contextMap.clear();\n+        this.servicesMap.clear();\n+        this.failureStateHandler.clear();\n+        this.registry.reset();\n+\n         if (this.defaultContextRegistration != null)\n         {\n             this.defaultContextRegistration.unregister();\n@@ -221,6 +237,7 @@ public void stop()\n             this.runtimeServiceReg.unregister();\n             this.runtimeServiceReg = null;\n         }\n+        this.webContext = null;\n     }\n \n     public void setProperties(final Hashtable<String, Object> props)",
                "raw_url": "https://github.com/apache/felix/raw/4d80c9a243d446b7144efb1ae58458bdf1dfa5e2/http/base/src/main/java/org/apache/felix/http/base/internal/whiteboard/WhiteboardManager.java",
                "sha": "47662a8c73f6627766f460c9e10c6f6e8eafb061",
                "status": "modified"
            }
        ],
        "message": "FELIX-5302 : NPE using Http Whiteboard\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1751862 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/8d52635d013f915a304c6abfe4b27e72f9f04eca",
        "patched_files": [
            "HandlerRegistry.java",
            "FailureStateHandler.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "HandlerRegistryTest.java",
            "FailureStateHandlerTest.java"
        ]
    },
    "felix_4e9be50": {
        "bug_id": "felix_4e9be50",
        "commit": "https://github.com/apache/felix/commit/4e9be50a769ce218a38ed35aa6bb09b9322d9dfa",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/felix/blob/4e9be50a769ce218a38ed35aa6bb09b9322d9dfa/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java?ref=4e9be50a769ce218a38ed35aa6bb09b9322d9dfa",
                "deletions": 1,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "patch": "@@ -200,7 +200,12 @@ private ServiceReferenceDTO serviceReferenceToDTO( ServiceReference<?> serviceRe\n \t        return null;\n \n \t\tServiceReferenceDTO dto = new ServiceReferenceDTO();\n-\t\tdto.bundle = serviceRef.getBundle().getBundleId();\n+\t\tBundle bundle = serviceRef.getBundle();\n+\t\tif (bundle != null)\n+\t\t    dto.bundle = bundle.getBundleId();\n+\t\telse\n+\t\t    dto.bundle = -1; // No bundle ever has -1 as ID, so this indicates no bundle.\n+\n \t\tdto.id = (Long) serviceRef.getProperty(Constants.SERVICE_ID);\n \t\tdto.properties = deepCopy( serviceRef );\n \t\tBundle[] usingBundles = serviceRef.getUsingBundles();",
                "raw_url": "https://github.com/apache/felix/raw/4e9be50a769ce218a38ed35aa6bb09b9322d9dfa/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "sha": "3d8c14067902d6ea2aee3dcf90ce90bed81cd6e4",
                "status": "modified"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/felix/blob/4e9be50a769ce218a38ed35aa6bb09b9322d9dfa/scr/src/test/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImplTest.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/test/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImplTest.java?ref=4e9be50a769ce218a38ed35aa6bb09b9322d9dfa",
                "deletions": 9,
                "filename": "scr/src/test/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImplTest.java",
                "patch": "@@ -18,18 +18,22 @@\n  */\n package org.apache.felix.scr.impl.runtime;\n \n-import java.lang.reflect.Array;\n+import java.lang.reflect.Method;\n import java.util.Arrays;\n \n+import junit.framework.TestCase;\n+\n+import org.mockito.Mockito;\n import org.osgi.dto.DTO;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.Constants;\n+import org.osgi.framework.ServiceReference;\n import org.osgi.framework.dto.BundleDTO;\n import org.osgi.framework.dto.ServiceReferenceDTO;\n \n-import junit.framework.TestCase;\n-\n public class ServiceComponentRuntimeImplTest extends TestCase\n {\n- \n+\n     /* in case behavior is supposed to actually involve copying\n     public void testCopy()\n     {\n@@ -41,7 +45,7 @@ public void testCopy()\n         equalCopy(new String[] {\"1\", \"2\", \"3\"}, scr);\n         equalCopy(new Long[] {1l, 2l, 3l}, scr);\n     }\n-    \n+\n     private void equalCopy(Object o1, ServiceComponentRuntimeImpl scr)\n     {\n         Object o2 = scr.convert(o1);\n@@ -51,10 +55,40 @@ private void equalCopy(Object o1, ServiceComponentRuntimeImpl scr)\n         {\n             assertEquals(\"expected same value at \" + i, Array.get(o1, i), Array.get(o2, i));\n         }\n-        \n+\n     }\n     */\n-    \n+\n+    public void testNullBundleServiceReferenceDTO() throws Exception\n+    {\n+        ServiceReference<?> sr = Mockito.mock(ServiceReference.class);\n+        Mockito.when(sr.getProperty(Constants.SERVICE_ID)).thenReturn(327L);\n+        Mockito.when(sr.getPropertyKeys()).thenReturn(new String[] {});\n+\n+        ServiceComponentRuntimeImpl scr = new ServiceComponentRuntimeImpl(null, null);\n+        Method m = scr.getClass().getDeclaredMethod(\"serviceReferenceToDTO\", ServiceReference.class);\n+        m.setAccessible(true);\n+        ServiceReferenceDTO dto = (ServiceReferenceDTO) m.invoke(scr, sr);\n+        assertEquals(-1, dto.bundle);\n+    }\n+\n+    public void testNullBundleServiceReferenceDTO2() throws Exception\n+    {\n+        Bundle b = Mockito.mock(Bundle.class);\n+        Mockito.when(b.getBundleId()).thenReturn(42L);\n+\n+        ServiceReference<?> sr = Mockito.mock(ServiceReference.class);\n+        Mockito.when(sr.getProperty(Constants.SERVICE_ID)).thenReturn(327L);\n+        Mockito.when(sr.getPropertyKeys()).thenReturn(new String[] {});\n+        Mockito.when(sr.getBundle()).thenReturn(b);\n+\n+        ServiceComponentRuntimeImpl scr = new ServiceComponentRuntimeImpl(null, null);\n+        Method m = scr.getClass().getDeclaredMethod(\"serviceReferenceToDTO\", ServiceReference.class);\n+        m.setAccessible(true);\n+        ServiceReferenceDTO dto = (ServiceReferenceDTO) m.invoke(scr, sr);\n+        assertEquals(42, dto.bundle);\n+    }\n+\n     public void testConvert()\n     {\n         ServiceComponentRuntimeImpl scr = new ServiceComponentRuntimeImpl(null, null);\n@@ -71,10 +105,10 @@ public void testConvert()\n         equalsToString(Arrays.asList(new int[] {1, 2}), scr);\n         equalsToString(Arrays.asList(new String[] {\"foo\", \"bar\"}), scr);\n     }\n-    \n+\n     private void equalsToString(Object o, ServiceComponentRuntimeImpl scr)\n     {\n-        assertEquals(String.valueOf(o), scr.convert(o));        \n+        assertEquals(String.valueOf(o), scr.convert(o));\n     }\n \n     private void same(Object o, ServiceComponentRuntimeImpl scr)",
                "raw_url": "https://github.com/apache/felix/raw/4e9be50a769ce218a38ed35aa6bb09b9322d9dfa/scr/src/test/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImplTest.java",
                "sha": "2a53bd1db57a12557752bc0e099ddd155f7a8d2c",
                "status": "modified"
            }
        ],
        "message": "FELIX-4883 ServiceComponentRuntime.getComponentConfigurationDTOs NullPointerException\n\nAdded defensive null check on serviceReference.getBundle().\nAlso added 2 unit test that focus on the code changed.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1682309 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/6954807b5b8e4f41b419a9ced5110a8f85149047",
        "patched_files": [
            "ServiceComponentRuntimeImpl.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ServiceComponentRuntimeImplTest.java"
        ]
    },
    "felix_54eaa9e": {
        "bug_id": "felix_54eaa9e",
        "commit": "https://github.com/apache/felix/commit/54eaa9ea58ea56b1d58b5f978d9d0defd4795573",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/felix/blob/54eaa9ea58ea56b1d58b5f978d9d0defd4795573/scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java?ref=54eaa9ea58ea56b1d58b5f978d9d0defd4795573",
                "deletions": 3,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java",
                "patch": "@@ -757,9 +757,11 @@ public BundleLogger getLogger() {\n     public RegionConfigurationSupport setRegionConfigurationSupport(ServiceReference<ConfigurationAdmin> reference)\n     {\n         RegionConfigurationSupport rcs = m_componentRegistry.registerRegionConfigurationSupport( reference );\n-        for ( ComponentHolder<?> holder : m_holders )\n-        {\n-            rcs.configureComponentHolder( holder );\n+        if (rcs != null) {\n+            for ( ComponentHolder<?> holder : m_holders )\n+            {\n+                rcs.configureComponentHolder( holder );\n+            }\n         }\n         return rcs;\n     }",
                "raw_url": "https://github.com/apache/felix/raw/54eaa9ea58ea56b1d58b5f978d9d0defd4795573/scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java",
                "sha": "4a8c94a21cb5181dea09061f423f15557ac5ba70",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/felix/blob/54eaa9ea58ea56b1d58b5f978d9d0defd4795573/scr/src/main/java/org/apache/felix/scr/impl/ComponentRegistry.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/ComponentRegistry.java?ref=54eaa9ea58ea56b1d58b5f978d9d0defd4795573",
                "deletions": 1,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/ComponentRegistry.java",
                "patch": "@@ -640,7 +640,11 @@ public String toString()\n \n     public RegionConfigurationSupport registerRegionConfigurationSupport(\n             ServiceReference<ConfigurationAdmin> reference) {\n-        RegionConfigurationSupport trialRcs = new RegionConfigurationSupport(m_logger, reference) {\n+        Bundle bundle = reference.getBundle();\n+        if (bundle == null) {\n+            return null;\n+        }\n+        RegionConfigurationSupport trialRcs = new RegionConfigurationSupport(m_logger, reference, bundle) {\n             @Override\n             protected Collection<ComponentHolder<?>> getComponentHolders(TargetedPID pid)\n             {",
                "raw_url": "https://github.com/apache/felix/raw/54eaa9ea58ea56b1d58b5f978d9d0defd4795573/scr/src/main/java/org/apache/felix/scr/impl/ComponentRegistry.java",
                "sha": "32f617dcd33e3a86f5cf2e1810c9c4607ec49cf5",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/felix/blob/54eaa9ea58ea56b1d58b5f978d9d0defd4795573/scr/src/main/java/org/apache/felix/scr/impl/manager/RegionConfigurationSupport.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/manager/RegionConfigurationSupport.java?ref=54eaa9ea58ea56b1d58b5f978d9d0defd4795573",
                "deletions": 2,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/manager/RegionConfigurationSupport.java",
                "patch": "@@ -69,11 +69,10 @@\n      * @param bundleContext of the ConfigurationAdmin we are tracking\n      * @param registry\n      */\n-    public RegionConfigurationSupport(final ScrLogger logger, final ServiceReference<ConfigurationAdmin> reference)\n+    public RegionConfigurationSupport(final ScrLogger logger, final ServiceReference<ConfigurationAdmin> reference, Bundle bundle)\n     {\n         this.logger = logger;\n         this.caReference = reference;\n-        final Bundle bundle = reference.getBundle();\n         this.bundleId = bundle.getBundleId();\n         this.caBundleContext = bundle.getBundleContext();\n     }",
                "raw_url": "https://github.com/apache/felix/raw/54eaa9ea58ea56b1d58b5f978d9d0defd4795573/scr/src/main/java/org/apache/felix/scr/impl/manager/RegionConfigurationSupport.java",
                "sha": "d90ac045adf4ba41783a43730975d08ace40fb41",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/felix/blob/54eaa9ea58ea56b1d58b5f978d9d0defd4795573/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java?ref=54eaa9ea58ea56b1d58b5f978d9d0defd4795573",
                "deletions": 3,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "patch": "@@ -288,15 +288,19 @@ private ServiceReferenceDTO serviceReferenceToDTO( ServiceReference<?> serviceRe\n     {\n         if (serviceRef == null)\n             return null;\n-        final long bundleId = serviceRef.getBundle().getBundleId();\n+        final Bundle bundle = serviceRef.getBundle();\n+        if (bundle == null) {\n+            return null;\n+        }\n+        final long bundleId = bundle.getBundleId();\n         ConcurrentHashMap<Long, ServiceReferenceDTO[]> cache = dtoCache.get();\n         if (cache == null) {\n             cache = new ConcurrentHashMap<>();\n             dtoCache = new SoftReference<>(cache);\n         }\n         ServiceReferenceDTO[] dtos = cache.get(bundleId);\n         if (dtos == null) {\n-            dtos = serviceRef.getBundle().adapt(ServiceReferenceDTO[].class);\n+            dtos = bundle.adapt(ServiceReferenceDTO[].class);\n             if (dtos == null) {\n                 dtos = new ServiceReferenceDTO[0];\n             }\n@@ -488,7 +492,9 @@ public void serviceChanged(final ServiceEvent event) {\n             ConcurrentHashMap<Long, ServiceReferenceDTO[]> cache = dtoCache.get();\n             if (cache != null)\n             {\n-                cache.remove(event.getServiceReference().getBundle().getBundleId());\n+                // using bundle id property incase the service has gotten unregistered\n+                // before we could get the bundle object\n+                cache.remove(event.getServiceReference().getProperty(Constants.SERVICE_BUNDLEID));\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/felix/raw/54eaa9ea58ea56b1d58b5f978d9d0defd4795573/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "sha": "328fd0a95fabe97056220a0c1d27734a72560b2c",
                "status": "modified"
            }
        ],
        "message": "WORKING - fix NPE on ServiceRef.getBundle\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1853160 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/26e1cb9037e1ba96e49f27b29b0e4aef74ea8771",
        "patched_files": [
            "ServiceComponentRuntimeImpl.java",
            "BundleComponentActivator.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ServiceComponentRuntimeImplTest.java",
            "BundleComponentActivatorTest.java"
        ]
    },
    "felix_5514b9e": {
        "bug_id": "felix_5514b9e",
        "commit": "https://github.com/apache/felix/commit/5514b9e4dd604c485e984db3701450914bc7e988",
        "file": [
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/felix/blob/5514b9e4dd604c485e984db3701450914bc7e988/framework/src/test/java/org/apache/felix/framework/FilterTest.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/framework/src/test/java/org/apache/felix/framework/FilterTest.java?ref=5514b9e4dd604c485e984db3701450914bc7e988",
                "deletions": 0,
                "filename": "framework/src/test/java/org/apache/felix/framework/FilterTest.java",
                "patch": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.felix.framework;\n+\n+import java.util.Dictionary;\n+import java.util.Hashtable;\n+import junit.framework.TestCase;\n+import org.osgi.framework.Filter;\n+import org.osgi.framework.FrameworkUtil;\n+\n+public class FilterTest extends TestCase\n+{\n+    public void testMissingAttribute()\n+    {\n+        Dictionary dict = new Hashtable();\n+        dict.put(\"one\", \"one-value\");\n+        dict.put(\"two\", \"two-value\");\n+        dict.put(\"three\", \"three-value\");\n+        Filter filter = null;\n+        try\n+        {\n+            filter = FrameworkUtil.createFilter(\"(missing=value)\");\n+        }\n+        catch (Exception ex)\n+        {\n+            assertTrue(\"Filter should parse: \" + ex, false);\n+        }\n+        assertFalse(\"Filter should not match: \" + filter, filter.match(dict));\n+    }\n+}",
                "raw_url": "https://github.com/apache/felix/raw/5514b9e4dd604c485e984db3701450914bc7e988/framework/src/test/java/org/apache/felix/framework/FilterTest.java",
                "sha": "ceb111412be8381226916fc02bb03eac34d19153",
                "status": "added"
            }
        ],
        "message": "Add a test case for missing attributes in filters, which was previously\ncausing an NPE. (FELIX-2401)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@957239 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/fa9b86e8ac2f75f1ea353837e61b9f303e488a7c",
        "patched_files": [
            "Filter.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "FilterTest.java"
        ]
    },
    "felix_58ab5f3": {
        "bug_id": "felix_58ab5f3",
        "commit": "https://github.com/apache/felix/commit/58ab5f3bfc843821a1d960ae996381a1ffcbe60c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/felix/blob/58ab5f3bfc843821a1d960ae996381a1ffcbe60c/scr/src/main/java/org/apache/felix/scr/impl/Activator.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/Activator.java?ref=58ab5f3bfc843821a1d960ae996381a1ffcbe60c",
                "deletions": 1,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/Activator.java",
                "patch": "@@ -375,7 +375,8 @@ public static void log( int level, Bundle bundle, String message, Throwable ex )\n     {\n         if ( m_configuration.getLogLevel() >= level )\n         {\n-            Object logger = ( m_logService != null ) ? m_logService.getService() : null;\n+            ServiceTracker t = m_logService;\n+            Object logger = ( t != null ) ? t.getService() : null;\n             if ( logger == null )\n             {\n                 // output depending on level",
                "raw_url": "https://github.com/apache/felix/raw/58ab5f3bfc843821a1d960ae996381a1ffcbe60c/scr/src/main/java/org/apache/felix/scr/impl/Activator.java",
                "sha": "87b08e7e978de3b0505cf7c2cd06bdae7c8d98c3",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/felix/blob/58ab5f3bfc843821a1d960ae996381a1ffcbe60c/scr/src/main/java/org/apache/felix/scr/impl/ComponentActorThread.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/ComponentActorThread.java?ref=58ab5f3bfc843821a1d960ae996381a1ffcbe60c",
                "deletions": 8,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/ComponentActorThread.java",
                "patch": "@@ -84,23 +84,30 @@ public void run()\n                 task = ( Runnable ) tasks.removeFirst();\n             }\n \n-            // return if the task is this thread itself\n-            if ( task == TERMINATION_TASK )\n-            {\n-                Activator.log( LogService.LOG_DEBUG, null, \"Shutting down ComponentActorThread\", null );\n-                return;\n-            }\n-\n-            // otherwise execute the task, log any issues\n             try\n             {\n+                // return if the task is this thread itself\n+                if ( task == TERMINATION_TASK )\n+                {\n+                    Activator.log( LogService.LOG_DEBUG, null, \"Shutting down ComponentActorThread\", null );\n+                    return;\n+                }\n+\n+                // otherwise execute the task, log any issues\n                 Activator.log( LogService.LOG_DEBUG, null, \"Running task: \" + task, null );\n                 task.run();\n             }\n             catch ( Throwable t )\n             {\n                 Activator.log( LogService.LOG_ERROR, null, \"Unexpected problem executing task \" + task, t );\n             }\n+            finally\n+            {\n+                synchronized ( tasks )\n+                {\n+                    tasks.notifyAll();\n+                }\n+            }\n         }\n     }\n \n@@ -110,6 +117,20 @@ public void run()\n     void terminate()\n     {\n         schedule( TERMINATION_TASK );\n+        synchronized ( tasks )\n+        {\n+            while ( !tasks.isEmpty() )\n+            {\n+                try\n+                {\n+                    tasks.wait();\n+                }\n+                catch ( InterruptedException e )\n+                {\n+                    Activator.log( LogService.LOG_ERROR, null, \"Interrupted exception waiting for queue to empty\", e );\n+                }\n+            }\n+        }\n     }\n \n ",
                "raw_url": "https://github.com/apache/felix/raw/58ab5f3bfc843821a1d960ae996381a1ffcbe60c/scr/src/main/java/org/apache/felix/scr/impl/ComponentActorThread.java",
                "sha": "a6149bcb47238e1fda7204c24ee1a3bfe2a51263",
                "status": "modified"
            }
        ],
        "message": "FELIX-3727 wait for actor to finish, and also avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1402234 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/9beff2ded3326cb4d7a4465c8aeb538ae9c00420",
        "patched_files": [
            "Activator.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ActivatorTest.java"
        ]
    },
    "felix_5de1554": {
        "bug_id": "felix_5de1554",
        "commit": "https://github.com/apache/felix/commit/5de1554fefd79cf864b772e22663f177886c5ae9",
        "file": [
            {
                "additions": 70,
                "blob_url": "https://github.com/apache/felix/blob/5de1554fefd79cf864b772e22663f177886c5ae9/bundlerepository/src/main/java/org/apache/felix/bundlerepository/impl/ResourceImpl.java",
                "changes": 74,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/bundlerepository/src/main/java/org/apache/felix/bundlerepository/impl/ResourceImpl.java?ref=5de1554fefd79cf864b772e22663f177886c5ae9",
                "deletions": 4,
                "filename": "bundlerepository/src/main/java/org/apache/felix/bundlerepository/impl/ResourceImpl.java",
                "patch": "@@ -1,4 +1,4 @@\n-/* \n+/*\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n@@ -18,8 +18,19 @@\n  */\n package org.apache.felix.bundlerepository.impl;\n \n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n import java.net.URI;\n-import java.util.*;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.StringTokenizer;\n \n import org.apache.felix.bundlerepository.Capability;\n import org.apache.felix.bundlerepository.Property;\n@@ -119,7 +130,62 @@ public String getURI()\n \n     public Long getSize()\n     {\n-        return ((Long) m_map.get(Resource.SIZE));\n+        Object sz = m_map.get(Resource.SIZE);\n+        if (sz instanceof Long)\n+            return ((Long) sz);\n+\n+        long size = findResourceSize();\n+        m_map.put(Resource.SIZE, size);\n+        return size;\n+    }\n+\n+    private long findResourceSize()\n+    {\n+        String uri = getURI();\n+        if (uri != null) {\n+            try\n+            {\n+                URL url = new URL(uri);\n+                if (\"file\".equals(url.getProtocol()))\n+                    return new File(url.getFile()).length();\n+                else\n+                    return findResourceSize(url);\n+            }\n+            catch (Exception e)\n+            {\n+                // TODO should really log this...\n+            }\n+        }\n+        return -1L;\n+    }\n+\n+    private long findResourceSize(URL url) throws IOException\n+    {\n+        byte[] bytes = new byte[8192];\n+\n+        // Not a File URL, stream the whole thing through to find out the size\n+        InputStream is = null;\n+        long fileSize = 0;\n+        try\n+        {\n+            is = url.openStream();\n+\n+            int length = 0;\n+            while ((length = is.read(bytes)) != -1)\n+            {\n+                fileSize += length;\n+            }\n+        }\n+        catch (Exception ex)\n+        {\n+            // should really log this...\n+        }\n+        finally\n+        {\n+            if (is != null)\n+                is.close();\n+        }\n+        return fileSize;\n     }\n \n     public Requirement[] getRequirements()\n@@ -169,7 +235,7 @@ public boolean isLocal()\n     }\n \n     /**\n-     * Default setter method when setting parsed data from the XML file. \n+     * Default setter method when setting parsed data from the XML file.\n      **/\n     public Object put(Object key, Object value)\n     {",
                "raw_url": "https://github.com/apache/felix/raw/5de1554fefd79cf864b772e22663f177886c5ae9/bundlerepository/src/main/java/org/apache/felix/bundlerepository/impl/ResourceImpl.java",
                "sha": "554aea5e188fe519afbe0c9af38e0f3e3a65eb83",
                "status": "modified"
            },
            {
                "additions": 85,
                "blob_url": "https://github.com/apache/felix/blob/5de1554fefd79cf864b772e22663f177886c5ae9/bundlerepository/src/test/java/org/apache/felix/bundlerepository/impl/ResourceImplTest.java",
                "changes": 85,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/bundlerepository/src/test/java/org/apache/felix/bundlerepository/impl/ResourceImplTest.java?ref=5de1554fefd79cf864b772e22663f177886c5ae9",
                "deletions": 0,
                "filename": "bundlerepository/src/test/java/org/apache/felix/bundlerepository/impl/ResourceImplTest.java",
                "patch": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.felix.bundlerepository.impl;\n+\n+import java.net.URL;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.felix.bundlerepository.Property;\n+import org.apache.felix.bundlerepository.Repository;\n+\n+public class ResourceImplTest extends TestCase\n+{\n+    public void testGetSizeFileResource() {\n+        ResourceImpl res = new ResourceImpl();\n+        res.put(Property.URI, \"repo_files/test_file_3.jar\");\n+\n+        final URL dir = getClass().getResource(\"/repo_files\");\n+        Repository repo = new RepositoryImpl() {\n+            { setURI(dir.toExternalForm()); }\n+        };\n+        res.setRepository(repo);\n+\n+        assertEquals(\"Should have obtained the file size\", 3, (long) res.getSize());\n+    }\n+\n+    public void testGetSizeNonExistentFileResource() {\n+        ResourceImpl res = new ResourceImpl();\n+        res.put(Property.URI, \"repo_files/test_file_3_garbage.jar\");\n+\n+        final URL dir = getClass().getResource(\"/repo_files\");\n+        Repository repo = new RepositoryImpl() {\n+            { setURI(dir.toExternalForm()); }\n+        };\n+        res.setRepository(repo);\n+\n+        assertEquals(\"File size should be reported as 0\", 0, (long) res.getSize());\n+    }\n+\n+    public void testGetSizeNonFileResource() {\n+        final URL testFile4 = getClass().getResource(\"/repo_files/test_file_4.jar\");\n+\n+        ResourceImpl res = new ResourceImpl();\n+        res.put(Property.URI, \"jar:\" + testFile4.toExternalForm() + \"!/blah.txt\");\n+\n+        final URL dir = getClass().getResource(\"/repo_files\");\n+        Repository repo = new RepositoryImpl() {\n+            { setURI(dir.toExternalForm()); }\n+        };\n+        res.setRepository(repo);\n+\n+        assertEquals(\"Should have obtained the file size\", 5, (long) res.getSize());\n+    }\n+\n+    public void testGetSizeNonExistentResource() {\n+        final URL testFile4 = getClass().getResource(\"/repo_files/test_file_4.jar\");\n+\n+        ResourceImpl res = new ResourceImpl();\n+        res.put(Property.URI, \"jar:\" + testFile4.toExternalForm() + \"!/blah_xyz.txt\");\n+\n+        final URL dir = getClass().getResource(\"/repo_files\");\n+        Repository repo = new RepositoryImpl() {\n+            { setURI(dir.toExternalForm()); }\n+        };\n+        res.setRepository(repo);\n+\n+        assertEquals(\"File size should be reported as 0\", 0, (long) res.getSize());\n+    }\n+}",
                "raw_url": "https://github.com/apache/felix/raw/5de1554fefd79cf864b772e22663f177886c5ae9/bundlerepository/src/test/java/org/apache/felix/bundlerepository/impl/ResourceImplTest.java",
                "sha": "8f9dd3a1166bab9a382bc81cf3a265d532c0849c",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/felix/blob/5de1554fefd79cf864b772e22663f177886c5ae9/bundlerepository/src/test/resources/repo_files/test_file_4.jar",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/bundlerepository/src/test/resources/repo_files/test_file_4.jar?ref=5de1554fefd79cf864b772e22663f177886c5ae9",
                "deletions": 0,
                "filename": "bundlerepository/src/test/resources/repo_files/test_file_4.jar",
                "raw_url": "https://github.com/apache/felix/raw/5de1554fefd79cf864b772e22663f177886c5ae9/bundlerepository/src/test/resources/repo_files/test_file_4.jar",
                "sha": "5816bf4062113a433adc9f715a99c3cc91f01a3f",
                "status": "added"
            }
        ],
        "message": "[FELIX-4571] NullPointerException when using Repository impl with Aries subsystem impl\n\nThis commit should fix this problem.\nUnit test also included.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1626798 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/091fd10b8067a542ddd91f7f525baf79091c8b1b",
        "patched_files": [
            "ResourceImpl.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ResourceImplTest.java",
            "test_file_4.java"
        ]
    },
    "felix_6511160": {
        "bug_id": "felix_6511160",
        "commit": "https://github.com/apache/felix/commit/65111605a44553b7be4009dace612f32f7a646a2",
        "file": [
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/felix/blob/65111605a44553b7be4009dace612f32f7a646a2/configadmin/src/main/java/org/apache/felix/cm/file/FilePersistenceManager.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/configadmin/src/main/java/org/apache/felix/cm/file/FilePersistenceManager.java?ref=65111605a44553b7be4009dace612f32f7a646a2",
                "deletions": 30,
                "filename": "configadmin/src/main/java/org/apache/felix/cm/file/FilePersistenceManager.java",
                "patch": "@@ -1,4 +1,4 @@\n-/* \n+/*\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n@@ -115,7 +115,7 @@\n     /**\n      * The extension of the configuration files, while they are being written\n      * (value is \".tmp\").\n-     * \n+     *\n      * @see #store(String, Dictionary)\n      */\n     private static final String TMP_EXT = \".tmp\";\n@@ -159,9 +159,9 @@\n      * This method is not part of the API of this class and is declared package\n      * private to enable JUnit testing on it. This method may be removed or\n      * modified at any time without notice.\n-     * \n+     *\n      * @param pid The Service PID to encode into a relative path name.\n-     * \n+     *\n      * @return The relative path name corresponding to the Service PID.\n      */\n     static String encodePid( String pid )\n@@ -231,11 +231,11 @@ static String encodePid( String pid )\n      * This constructor is equivalent to calling\n      * {@link #FilePersistenceManager(BundleContext, String)} with a\n      * <code>null</code> <code>BundleContext</code>.\n-     * \n+     *\n      * @param location The configuration file location. If this is\n      *      <code>null</code> the <code>config</code> directory below the current\n      *      working directory is used.\n-     * \n+     *\n      * @throws IllegalArgumentException If the <code>location</code> exists but\n      *      is not a directory or does not exist and cannot be created.\n      */\n@@ -269,15 +269,15 @@ public FilePersistenceManager( String location )\n      * step or the named directory (including any parent directories) cannot be\n      * created, an <code>IllegalArgumentException</code> is thrown.</li>\n      * </ul>\n-     * \n+     *\n      * @param bundleContext The <code>BundleContext</code> to optionally get\n      *      the data location for the configuration files. This may be\n      *      <code>null</code>, in which case this constructor acts exactly the\n      *      same as calling {@link #FilePersistenceManager(String)}.\n      * @param location The configuration file location. If this is\n      *      <code>null</code> the <code>config</code> directory below the current\n      *      working directory is used.\n-     * \n+     *\n      * @throws IllegalArgumentException If the location exists but is not a\n      *      directory or does not exist and cannot be created.\n      * @throws IllegalStateException If the <code>bundleContext</code> is not\n@@ -315,11 +315,11 @@ public FilePersistenceManager( BundleContext bundleContext, String location )\n                     locationFile = bundleLocationFile;\n                 }\n             }\n-            \n+\n             // ensure the file object is an absolute file object\n             locationFile = locationFile.getAbsoluteFile();\n         }\n-        \n+\n         // check the location\n         if ( !locationFile.isDirectory() )\n         {\n@@ -341,7 +341,7 @@ public FilePersistenceManager( BundleContext bundleContext, String location )\n     /**\n      * Returns the directory in which the configuration files are written as\n      * a <code>File</code> object.\n-     * \n+     *\n      * @return The configuration file location.\n      */\n     public File getLocation()\n@@ -356,7 +356,7 @@ public File getLocation()\n      * <p>\n      * This method is a lazy implementation, which is just one configuration\n      * file ahead of the current enumeration location.\n-     * \n+     *\n      * @return an enumeration of configuration data returned as instances of\n      *      the <code>Dictionary</code> class.\n      */\n@@ -368,7 +368,7 @@ public Enumeration getDictionaries()\n \n     /**\n      * Deletes the file for the given identifier.\n-     * \n+     *\n      * @param pid The identifier of the configuration file to delete.\n      */\n     public void delete( String pid )\n@@ -380,9 +380,9 @@ public void delete( String pid )\n     /**\n      * Returns <code>true</code> if a (configuration) file exists for the given\n      * identifier.\n-     * \n+     *\n      * @param pid The identifier of the configuration file to check.\n-     * \n+     *\n      * @return <code>true</code> if the file exists\n      */\n     public boolean exists( String pid )\n@@ -394,9 +394,9 @@ public boolean exists( String pid )\n     /**\n      * Reads the (configuration) for the given identifier into a\n      * <code>Dictionary</code> object.\n-     * \n+     *\n      * @param pid The identifier of the configuration file to delete.\n-     * \n+     *\n      * @return The configuration read from the file. This <code>Dictionary</code>\n      *      may be empty if the file contains no configuration information\n      *      or is not properly formatted.\n@@ -410,11 +410,11 @@ public Dictionary load( String pid ) throws IOException\n     /**\n      * Stores the contents of the <code>Dictionary</code> in a file denoted\n      * by the given identifier.\n-     * \n+     *\n      * @param pid The identifier of the configuration file to which to write\n      *      the configuration contents.\n      * @param props The configuration data to write.\n-     * \n+     *\n      * @throws IOException If an error occurrs writing the configuration data.\n      */\n     public void store( String pid, Dictionary props ) throws IOException\n@@ -424,7 +424,7 @@ public void store( String pid, Dictionary props ) throws IOException\n         try\n         {\n             File cfgFile = getFile( pid );\n-            \n+\n             // ensure parent path\n             File cfgDir = cfgFile.getParentFile();\n             cfgDir.mkdirs();\n@@ -443,7 +443,7 @@ public void store( String pid, Dictionary props ) throws IOException\n                 if (cfgFile.exists()) {\n                     cfgFile.delete();\n                 }\n-                \n+\n                 // rename the temporary file to the new file\n                 tmpFile.renameTo( cfgFile );\n             }\n@@ -461,8 +461,9 @@ public void store( String pid, Dictionary props ) throws IOException\n                     // ignore\n                 }\n             }\n-            \n-            if (tmpFile.exists()) {\n+\n+            if (tmpFile != null && tmpFile.exists())\n+            {\n                 tmpFile.delete();\n             }\n         }\n@@ -472,11 +473,11 @@ public void store( String pid, Dictionary props ) throws IOException\n     /**\n      * Loads the contents of the <code>cfgFile</code> into a new\n      * <code>Dictionary</code> object.\n-     * \n+     *\n      * @param cfgFile The file from which to load the data.\n-     * \n+     *\n      * @return A new <code>Dictionary</code> object providing the file contents.\n-     * \n+     *\n      * @throws java.io.FileNotFoundException If the given file does not exist.\n      * @throws IOException If an error occurrs reading the configuration file.\n      */\n@@ -524,9 +525,9 @@ private Dictionary load( File cfgFile ) throws IOException\n      * </ul>\n      * Before returning the path name, the parent directory and any ancestors\n      * are created.\n-     *  \n+     *\n      * @param pid The identifier for which to create the abstract file name.\n-     * \n+     *\n      * @return The abstract path name, which the parent directory path created.\n      */\n     private File getFile( String pid )\n@@ -602,9 +603,9 @@ private Dictionary seek()\n                         try\n                         {\n                             Dictionary dict =  load( cfgFile );\n-                            \n+\n                             // use the dictionary if it has no PID or the PID\n-                            // derived file name matches the source file name \n+                            // derived file name matches the source file name\n                             if ( dict.get( Constants.SERVICE_PID ) == null\n                                 || cfgFile.equals( getFile( ( String ) dict.get( Constants.SERVICE_PID ) ) ) )\n                             {",
                "raw_url": "https://github.com/apache/felix/raw/65111605a44553b7be4009dace612f32f7a646a2/configadmin/src/main/java/org/apache/felix/cm/file/FilePersistenceManager.java",
                "sha": "369778d9192eed0419e99c3437dbb8f93cfd862b",
                "status": "modified"
            }
        ],
        "message": "Prevent possible NPE when tmpFile is null (if an error occurs before tmpFile could be set)\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@572288 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/0add2d42d8e83c353166c8d7a4089ea0bb2d6cfc",
        "patched_files": [
            "FilePersistenceManager.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "FilePersistenceManagerTest.java"
        ]
    },
    "felix_65b98ca": {
        "bug_id": "felix_65b98ca",
        "commit": "https://github.com/apache/felix/commit/65b98ca9339d09303823e065a1bdbe83f22831cd",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/felix/blob/65b98ca9339d09303823e065a1bdbe83f22831cd/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java?ref=65b98ca9339d09303823e065a1bdbe83f22831cd",
                "deletions": 7,
                "filename": "resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "patch": "@@ -197,15 +197,14 @@ public ResolverImpl(Logger logger)\n                 // If a populated resource is a fragment, then its host\n                 // must ultimately be verified, so store its host requirement\n                 // to use for package space calculation.\n-                Map<Resource, List<Requirement>> hostReqs =\n-                    new HashMap<Resource, List<Requirement>>();\n+                Map<Resource, Requirement> hostReqs = new HashMap<Resource, Requirement>();\n                 for (Resource resource : allResources)\n                 {\n                     if (Util.isFragment(resource))\n                     {\n                         hostReqs.put(\n                             resource,\n-                            resource.getRequirements(HostNamespace.HOST_NAMESPACE));\n+                            resource.getRequirements(HostNamespace.HOST_NAMESPACE).get(0));\n                     }\n                 }\n \n@@ -260,10 +259,18 @@ public ResolverImpl(Logger logger)\n \n                         // If we are resolving a fragment, then get its\n                         // host candidate and verify it instead.\n-                        List<Requirement> hostReq = hostReqs.get(resource);\n+                        Requirement hostReq = hostReqs.get(resource);\n                         if (hostReq != null)\n                         {\n-                            target = allCandidates.getFirstCandidate(hostReq.get(0)).getResource();\n+                            Capability hostCap = allCandidates.getFirstCandidate(hostReq);\n+                            // If the resource is an already resolved fragment and can not\n+                            // be attached to new hosts, there will be no matching host,\n+                            // so ignore this resource\n+                            if (hostCap == null)\n+                            {\n+                                continue;\n+                            }\n+                            target = hostCap.getResource();\n                         }\n \n                         calculatePackageSpaces(\n@@ -366,10 +373,18 @@ else if (faultyResources.size() > currentFaultyResources.size())\n \n                         // If we are resolving a fragment, then we\n                         // actually want to populate its host's wires.\n-                        List<Requirement> hostReq = hostReqs.get(resource);\n+                        Requirement hostReq = hostReqs.get(resource);\n                         if (hostReq != null)\n                         {\n-                            target = allCandidates.getFirstCandidate(hostReq.get(0)).getResource();\n+                            Capability hostCap = allCandidates.getFirstCandidate(hostReq);\n+                            // If the resource is an already resolved fragment and can not\n+                            // be attached to new hosts, there will be no matching host,\n+                            // so ignore this resource\n+                            if (hostCap == null)\n+                            {\n+                                continue;\n+                            }\n+                            target = hostCap.getResource();\n                         }\n \n                         if (allCandidates.isPopulated(target))",
                "raw_url": "https://github.com/apache/felix/raw/65b98ca9339d09303823e065a1bdbe83f22831cd/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "sha": "381240b944741f3a7e83ff461064363815a4c506",
                "status": "modified"
            }
        ],
        "message": "[FELIX-4495] Fix possible NPE when trying to resolve a single bundle which is an already resolved fragment\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1667218 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/e4939fe97f399f8b855d1934f38a4bce6e33aec9",
        "patched_files": [
            "ResolverImpl.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ResolverImplTest.java"
        ]
    },
    "felix_673a88d": {
        "bug_id": "felix_673a88d",
        "commit": "https://github.com/apache/felix/commit/673a88dad1d5dc87728e8239f0048d2f415c92d5",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/felix/blob/673a88dad1d5dc87728e8239f0048d2f415c92d5/http/base/src/main/java/org/apache/felix/http/base/internal/runtime/dto/RuntimeDTOBuilder.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/http/base/src/main/java/org/apache/felix/http/base/internal/runtime/dto/RuntimeDTOBuilder.java?ref=673a88dad1d5dc87728e8239f0048d2f415c92d5",
                "deletions": 33,
                "filename": "http/base/src/main/java/org/apache/felix/http/base/internal/runtime/dto/RuntimeDTOBuilder.java",
                "patch": "@@ -42,18 +42,18 @@\n {\n \n     private final RegistryRuntime registry;\n-    private final ServiceReference<HttpServiceRuntime> serviceReference;\n+    private final ServiceReferenceDTO serviceRefDTO;\n \n-    public RuntimeDTOBuilder(final RegistryRuntime registry, final ServiceReference<HttpServiceRuntime> ref)\n+    public RuntimeDTOBuilder(final RegistryRuntime registry, final ServiceReferenceDTO srDTO)\n     {\n         this.registry = registry;\n-        this.serviceReference = ref;\n+        this.serviceRefDTO = srDTO;\n     }\n \n     public RuntimeDTO build()\n     {\n         final RuntimeDTO runtimeDTO = new RuntimeDTO();\n-        runtimeDTO.serviceDTO = createServiceDTO();\n+        runtimeDTO.serviceDTO = this.serviceRefDTO;\n         runtimeDTO.servletContextDTOs = createContextDTOs();\n         runtimeDTO.preprocessorDTOs = createPreprocessorDTOs();\n \n@@ -68,35 +68,6 @@ public RuntimeDTO build()\n         return runtimeDTO;\n     }\n \n-    private ServiceReferenceDTO createServiceDTO()\n-    {\n-        final ServiceReferenceDTO dto = new ServiceReferenceDTO();\n-        dto.bundle = this.serviceReference.getBundle().getBundleId();\n-        dto.id = (Long) this.serviceReference.getProperty(Constants.SERVICE_ID);\n-        final Map<String, Object> props = new HashMap<String, Object>();\n-        for (String key : this.serviceReference.getPropertyKeys())\n-        {\n-            props.put(key, this.serviceReference.getProperty(key));\n-        }\n-        dto.properties = props;\n-\n-        final Bundle[] ubs = this.serviceReference.getUsingBundles();\n-        if (ubs == null)\n-        {\n-            dto.usingBundles = new long[0];\n-        }\n-        else\n-        {\n-            dto.usingBundles = new long[ubs.length];\n-            for (int j=0; j < ubs.length; j++)\n-            {\n-                dto.usingBundles[j] = ubs[j].getBundleId();\n-            }\n-        }\n-\n-        return dto;\n-    }\n-\n     private ServletContextDTO[] createContextDTOs()\n     {\n         final Collection<ServletContextDTO> contexts = registry.getServletContextDTOs();",
                "raw_url": "https://github.com/apache/felix/raw/673a88dad1d5dc87728e8239f0048d2f415c92d5/http/base/src/main/java/org/apache/felix/http/base/internal/runtime/dto/RuntimeDTOBuilder.java",
                "sha": "5a14735e0f46bef021c3b88d63aeee1698c76f9a",
                "status": "modified"
            },
            {
                "additions": 67,
                "blob_url": "https://github.com/apache/felix/blob/673a88dad1d5dc87728e8239f0048d2f415c92d5/http/base/src/main/java/org/apache/felix/http/base/internal/service/HttpServiceRuntimeImpl.java",
                "changes": 81,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/http/base/src/main/java/org/apache/felix/http/base/internal/service/HttpServiceRuntimeImpl.java?ref=673a88dad1d5dc87728e8239f0048d2f415c92d5",
                "deletions": 14,
                "filename": "http/base/src/main/java/org/apache/felix/http/base/internal/service/HttpServiceRuntimeImpl.java",
                "patch": "@@ -28,8 +28,10 @@\n import org.apache.felix.http.base.internal.runtime.dto.RuntimeDTOBuilder;\n import org.apache.felix.http.base.internal.whiteboard.WhiteboardManager;\n import org.osgi.framework.BundleContext;\n+import org.osgi.framework.Constants;\n import org.osgi.framework.ServiceReference;\n import org.osgi.framework.ServiceRegistration;\n+import org.osgi.framework.dto.ServiceReferenceDTO;\n import org.osgi.service.http.runtime.HttpServiceRuntime;\n import org.osgi.service.http.runtime.dto.RequestInfoDTO;\n import org.osgi.service.http.runtime.dto.RuntimeDTO;\n@@ -52,8 +54,10 @@\n \n     private volatile long changeCount;\n \n-    private volatile ServiceReference<HttpServiceRuntime> serviceReference;\n+    private volatile ServiceRegistration<HttpServiceRuntime> serviceReg;\n \n+    private volatile ServiceReferenceDTO serviceRefDTO;\n+    \n     private volatile Timer timer;\n \n     private final long updateChangeCountDelay;\n@@ -87,9 +91,34 @@ public HttpServiceRuntimeImpl(HandlerRegistry registry,\n     @Override\n     public RuntimeDTO getRuntimeDTO()\n     {\n-        final RuntimeDTOBuilder runtimeDTOBuilder = new RuntimeDTOBuilder(contextManager.getRuntimeInfo(),\n-                this.serviceReference);\n-        return runtimeDTOBuilder.build();\n+    \tif ( this.serviceRefDTO == null )\n+    \t{\n+    \t\t// it might happen that this code is executed in several threads\n+    \t\t// but that's very unlikely and even if, fetching the service \n+    \t\t// reference several times is not a big deal\n+    \t\tfinal ServiceRegistration<HttpServiceRuntime> reg = this.serviceReg;\n+    \t\tif ( reg != null )\n+    \t\t{\n+                final long id = (long) reg.getReference().getProperty(Constants.SERVICE_ID);\n+                final ServiceReferenceDTO[] dtos = reg.getReference().getBundle().adapt(ServiceReferenceDTO[].class);\n+                for(final ServiceReferenceDTO dto : dtos) \n+                {\n+                \tif ( dto.id == id) \n+                \t{\n+                \t\tthis.serviceRefDTO = dto;\n+                \t\tbreak;\n+                \t}\n+                }\n+    \t\t\t\n+    \t\t}\n+    \t}\n+        if ( this.serviceRefDTO != null )\n+        {\n+            final RuntimeDTOBuilder runtimeDTOBuilder = new RuntimeDTOBuilder(contextManager.getRuntimeInfo(),\n+                    this.serviceRefDTO);\n+            return runtimeDTOBuilder.build();\n+        }\n+        throw new IllegalStateException(\"Service is already unregistered\");\n     }\n \n     @Override\n@@ -116,19 +145,43 @@ public synchronized void setAllAttributes(Dictionary<String, Object> newAttribut\n         attributes = replacement;\n     }\n \n-    public Dictionary<String, Object> getAttributes()\n+    public void register(final BundleContext bundleContext)\n     {\n-        return attributes;\n+        this.serviceReg = bundleContext.registerService(HttpServiceRuntime.class,\n+                this,\n+                attributes);\n     }\n-\n-    public void setServiceReference(\n-            final ServiceReference<HttpServiceRuntime> reference)\n+    \n+    public void unregister()\n     {\n-        this.serviceReference = reference;\n+    \tif ( this.serviceReg != null ) \n+    \t{\n+        \ttry\n+        \t{\n+        \t    this.serviceReg.unregister();\n+        \t}\n+        \tcatch ( final IllegalStateException ise)\n+        \t{\n+        \t\t// we just ignore it\n+        \t}\n+        \tthis.serviceReg = null;    \t\t\n+    \t}\n+    \tthis.serviceRefDTO = null;\n     }\n-\n-    public void updateChangeCount(final ServiceRegistration<HttpServiceRuntime> reg)\n+    \n+    public ServiceReference<HttpServiceRuntime> getServiceReference()\n+    {\n+    \tfinal ServiceRegistration<HttpServiceRuntime> reg = this.serviceReg;\n+    \tif ( reg != null ) \n+    \t{\n+    \t\treturn reg.getReference();\n+    \t}\n+    \treturn null;\n+    }\n+    \n+    public void updateChangeCount()\n     {\n+    \tfinal ServiceRegistration<HttpServiceRuntime> reg = this.serviceReg;\n         if ( reg != null )\n         {\n             boolean setPropsDirectly = false;\n@@ -159,7 +212,7 @@ public void run()\n                                 {\n                                     try\n                                     {\n-                                        reg.setProperties(getAttributes());\n+                                        reg.setProperties(attributes);\n                                     }\n                                     catch ( final IllegalStateException ise)\n                                     {\n@@ -177,7 +230,7 @@ public void run()\n             {\n                 try\n                 {\n-                    reg.setProperties(getAttributes());\n+                    reg.setProperties(attributes);\n                 }\n                 catch ( final IllegalStateException ise)\n                 {",
                "raw_url": "https://github.com/apache/felix/raw/673a88dad1d5dc87728e8239f0048d2f415c92d5/http/base/src/main/java/org/apache/felix/http/base/internal/service/HttpServiceRuntimeImpl.java",
                "sha": "9b81137535f0af40c084d011d798feea2184b17f",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/felix/blob/673a88dad1d5dc87728e8239f0048d2f415c92d5/http/base/src/main/java/org/apache/felix/http/base/internal/whiteboard/WhiteboardManager.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/http/base/src/main/java/org/apache/felix/http/base/internal/whiteboard/WhiteboardManager.java?ref=673a88dad1d5dc87728e8239f0048d2f415c92d5",
                "deletions": 16,
                "filename": "http/base/src/main/java/org/apache/felix/http/base/internal/whiteboard/WhiteboardManager.java",
                "patch": "@@ -90,7 +90,6 @@\n import org.osgi.framework.ServiceReference;\n import org.osgi.framework.ServiceRegistration;\n import org.osgi.service.http.context.ServletContextHelper;\n-import org.osgi.service.http.runtime.HttpServiceRuntime;\n import org.osgi.service.http.runtime.HttpServiceRuntimeConstants;\n import org.osgi.service.http.runtime.dto.DTOConstants;\n import org.osgi.service.http.runtime.dto.PreprocessorDTO;\n@@ -129,8 +128,6 @@\n \n     private volatile ServiceRegistration<ServletContextHelper> defaultContextRegistration;\n \n-    private volatile ServiceRegistration<HttpServiceRuntime> runtimeServiceReg;\n-\n     /**\n      * Create a new whiteboard http manager\n      *\n@@ -160,10 +157,7 @@ public void start(final ServletContext containerContext, @NotNull final Dictiona\n \n         this.serviceRuntime.setAttribute(HttpServiceRuntimeConstants.HTTP_SERVICE_ID,\n                 Collections.singletonList(this.httpServiceFactory.getHttpServiceServiceId()));\n-        this.runtimeServiceReg = this.httpBundleContext.registerService(HttpServiceRuntime.class,\n-                serviceRuntime,\n-                this.serviceRuntime.getAttributes());\n-        this.serviceRuntime.setServiceReference(this.runtimeServiceReg.getReference());\n+        this.serviceRuntime.register(this.httpBundleContext);\n \n         this.webContext = containerContext;\n \n@@ -239,7 +233,7 @@ public void stop()\n         }\n         this.trackers.clear();\n \n-        this.serviceRuntime.setServiceReference(null);\n+        this.serviceRuntime.unregister();\n \n         this.preprocessorHandlers = Collections.emptyList();\n         this.contextMap.clear();\n@@ -252,12 +246,6 @@ public void stop()\n             this.defaultContextRegistration.unregister();\n             this.defaultContextRegistration = null;\n         }\n-\n-        if ( this.runtimeServiceReg != null )\n-        {\n-            this.runtimeServiceReg.unregister();\n-            this.runtimeServiceReg = null;\n-        }\n         this.webContext = null;\n     }\n \n@@ -910,7 +898,7 @@ private boolean isMatchingService(final AbstractInfo<?> info)\n             try\n             {\n                 final Filter f = this.httpBundleContext.createFilter(target);\n-                return f.match(this.runtimeServiceReg.getReference());\n+                return f.match(this.serviceRuntime.getServiceReference());\n             }\n             catch ( final InvalidSyntaxException ise)\n             {\n@@ -1027,6 +1015,6 @@ public void doFilter(final ServletRequest request, final ServletResponse respons\n \n     private void updateRuntimeChangeCount()\n     {\n-        this.serviceRuntime.updateChangeCount(this.runtimeServiceReg);\n+        this.serviceRuntime.updateChangeCount();\n     }\n }",
                "raw_url": "https://github.com/apache/felix/raw/673a88dad1d5dc87728e8239f0048d2f415c92d5/http/base/src/main/java/org/apache/felix/http/base/internal/whiteboard/WhiteboardManager.java",
                "sha": "bfcb293237131c7fe37b12d18e9736e3cb5554c1",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/felix/blob/673a88dad1d5dc87728e8239f0048d2f415c92d5/http/itest/pom.xml",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/http/itest/pom.xml?ref=673a88dad1d5dc87728e8239f0048d2f415c92d5",
                "deletions": 0,
                "filename": "http/itest/pom.xml",
                "patch": "@@ -92,6 +92,18 @@\n \t\t\t<artifactId>org.apache.felix.http.servlet-api</artifactId>\n \t\t\t<version>${http.servlet.api.version}</version>\n \t\t</dependency>\n+        <dependency>\n+            <groupId>org.osgi</groupId>\n+            <artifactId>org.osgi.service.http</artifactId>\n+            <version>1.2.1</version>\n+           <scope>provided</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.osgi</groupId>\n+            <artifactId>org.osgi.service.http.whiteboard</artifactId>\n+            <version>1.1.0</version>\n+            <scope>provided</scope>\n+        </dependency>\n \t\t<dependency>\n \t\t\t<groupId>org.apache.felix</groupId>\n \t\t\t<artifactId>org.apache.felix.http.jetty</artifactId>",
                "raw_url": "https://github.com/apache/felix/raw/673a88dad1d5dc87728e8239f0048d2f415c92d5/http/itest/pom.xml",
                "sha": "a4d136a5e8b7f47df4a08e6d6fcf250d4332b602",
                "status": "modified"
            }
        ],
        "message": "FELIX-5966 : NPE at RuntimeDTOBuilder.java:74\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1844307 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/16cb13939de9acd1d721ba17950c37dcec626a9a",
        "patched_files": [
            "RuntimeDTOBuilder.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "RuntimeDTOBuilderTest.java"
        ]
    },
    "felix_69029cb": {
        "bug_id": "felix_69029cb",
        "commit": "https://github.com/apache/felix/commit/69029cb75ab1c8860d9eeab77ba6c7dce3e93538",
        "file": [
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/felix/blob/69029cb75ab1c8860d9eeab77ba6c7dce3e93538/sigil/common/core.tests/src/org/apache/felix/sigil/core/internal/model/osgi/PackageExportTest.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/sigil/common/core.tests/src/org/apache/felix/sigil/core/internal/model/osgi/PackageExportTest.java?ref=69029cb75ab1c8860d9eeab77ba6c7dce3e93538",
                "deletions": 0,
                "filename": "sigil/common/core.tests/src/org/apache/felix/sigil/core/internal/model/osgi/PackageExportTest.java",
                "patch": "@@ -0,0 +1,43 @@\n+package org.apache.felix.sigil.core.internal.model.osgi;\n+\n+import org.osgi.framework.Version;\n+\n+import junit.framework.TestCase;\n+\n+public class PackageExportTest extends TestCase\n+{\n+    public PackageExportTest( String name )\n+    {\n+        super( name );\n+    }\n+\n+    public void testEquals() {\n+        PackageExport p1 = new PackageExport();\n+        p1.setPackageName(\"foo\");\n+        p1.setVersion(Version.parseVersion(\"1.0.0\"));\n+        \n+        PackageExport p2 = new PackageExport();\n+        p2.setPackageName(\"foo\");\n+        p2.setVersion(Version.parseVersion(\"1.0.0\"));\n+        \n+        assertTrue( p1.equals( p2 ) );\n+        assertTrue( p2.equals( p1 ) );\n+        \n+        PackageExport p3 = new PackageExport();\n+        p3.setPackageName(\"foo\");\n+\n+        assertFalse( p1.equals( p3 ) );\n+        assertFalse( p3.equals( p1 ) );\n+        \n+        PackageExport p4 = new PackageExport();\n+        p4.setVersion(Version.parseVersion(\"1.0.0\"));\n+\n+        assertFalse( p1.equals( p4 ) );\n+        assertFalse( p4.equals( p1 ) );\n+        \n+        PackageExport p5 = new PackageExport();\n+        assertFalse( p1.equals( p5 ) );\n+        assertFalse( p5.equals( p1 ) );\n+        \n+    }\n+}",
                "raw_url": "https://github.com/apache/felix/raw/69029cb75ab1c8860d9eeab77ba6c7dce3e93538/sigil/common/core.tests/src/org/apache/felix/sigil/core/internal/model/osgi/PackageExportTest.java",
                "sha": "574884175050ff2d20fd66005331bed76a7b6243",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/felix/blob/69029cb75ab1c8860d9eeab77ba6c7dce3e93538/sigil/common/core/src/org/apache/felix/sigil/core/internal/model/osgi/PackageExport.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/sigil/common/core/src/org/apache/felix/sigil/core/internal/model/osgi/PackageExport.java?ref=69029cb75ab1c8860d9eeab77ba6c7dce3e93538",
                "deletions": 2,
                "filename": "sigil/common/core/src/org/apache/felix/sigil/core/internal/model/osgi/PackageExport.java",
                "patch": "@@ -175,8 +175,8 @@ public boolean equals(Object obj)\n         if ( obj == this ) return true;\n         try {\n             PackageExport e = (PackageExport) obj;\n-            return name == null ? e.name == null : name.equals( e.name ) && \n-                version == null ? e.version == null : version.equals( e.version );\n+            return (name == null ? e.name == null : name.equals( e.name )) && \n+                (version == null ? e.version == null : version.equals( e.version ));\n         }\n         catch (ClassCastException e) {\n             return false;",
                "raw_url": "https://github.com/apache/felix/raw/69029cb75ab1c8860d9eeab77ba6c7dce3e93538/sigil/common/core/src/org/apache/felix/sigil/core/internal/model/osgi/PackageExport.java",
                "sha": "1a1942e78bfbbf9fa1de8991ff045c01b37c7b59",
                "status": "modified"
            }
        ],
        "message": "Fix for npe found in FELIX-2159 missing ()'s\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@918229 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/4d82adce589b797485cc45037c564cbea16f8aa4",
        "patched_files": [
            "PackageExport.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "PackageExportTest.java"
        ]
    },
    "felix_6dea751": {
        "bug_id": "felix_6dea751",
        "commit": "https://github.com/apache/felix/commit/6dea75105231d39ca155e89dda12acbb87bf8e63",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/felix/blob/6dea75105231d39ca155e89dda12acbb87bf8e63/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java?ref=6dea75105231d39ca155e89dda12acbb87bf8e63",
                "deletions": 1,
                "filename": "resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "patch": "@@ -1717,7 +1717,25 @@ private static boolean isCompatible(\n     private static Set<Capability> getPackageSources(\n             Capability cap, Map<Resource, Packages> resourcePkgMap)\n     {\n-        return resourcePkgMap.get(cap.getResource()).m_sources.get(cap);\n+        Resource resource = cap.getResource();\n+        if(resource == null)\n+        {\n+            return new HashSet<Capability>();\n+        }\n+\n+        OpenHashMap<Capability, Set<Capability>> sources = resourcePkgMap.get(resource).m_sources;\n+        if(sources == null)\n+        {\n+            return new HashSet<Capability>();\n+        }\n+\n+        Set<Capability> packageSources = sources.get(cap);\n+        if(packageSources == null) \n+        {\n+            return new HashSet<Capability>();\n+        }\n+\n+        return packageSources;  \n     }\n \n     private static void getPackageSourcesInternal(",
                "raw_url": "https://github.com/apache/felix/raw/6dea75105231d39ca155e89dda12acbb87bf8e63/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "sha": "cf7daa098b4ce107ef179d5e7c3e1f104d0e1fe0",
                "status": "modified"
            }
        ],
        "message": "FELIX-5015 NPE in ResolverImpl\n\nApplying patch on behalf of Alexandre Roman with many thanks!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1705679 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/5745b8c3dae6950a3a77ebe285345a58a3ae23dc",
        "patched_files": [
            "ResolverImpl.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ResolverImplTest.java"
        ]
    },
    "felix_7db017b": {
        "bug_id": "felix_7db017b",
        "commit": "https://github.com/apache/felix/commit/7db017bab175124543e9898ff4db415c5f250e1c",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/felix/blob/7db017bab175124543e9898ff4db415c5f250e1c/bundlerepository/src/main/java/org/apache/felix/bundlerepository/FilterImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/bundlerepository/src/main/java/org/apache/felix/bundlerepository/FilterImpl.java?ref=7db017bab175124543e9898ff4db415c5f250e1c",
                "deletions": 2,
                "filename": "bundlerepository/src/main/java/org/apache/felix/bundlerepository/FilterImpl.java",
                "patch": "@@ -350,7 +350,7 @@ else if (obj instanceof Collection)\n                         }\n                     }\n                 }\n-                else if (numClass.isArray())\n+                else if (numClass != null && numClass.isArray())\n                 {\n                     int len = Array.getLength(obj);\n                     for (int i = 0; i < len; i++)\n@@ -425,6 +425,7 @@ else if (numClass.isArray())\n             }\n             catch (Exception e)\n             {\n+                e.printStackTrace();\n             }\n             return false;\n         }\n@@ -660,4 +661,4 @@ public boolean matchCase(Dictionary dictionary)\n             return false;\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/felix/raw/7db017bab175124543e9898ff4db415c5f250e1c/bundlerepository/src/main/java/org/apache/felix/bundlerepository/FilterImpl.java",
                "sha": "c99ef76c18c0219055d87cfb955aaf3aedc30a38",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/felix/blob/7db017bab175124543e9898ff4db415c5f250e1c/bundlerepository/src/main/java/org/apache/felix/bundlerepository/StringSet.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/bundlerepository/src/main/java/org/apache/felix/bundlerepository/StringSet.java?ref=7db017bab175124543e9898ff4db415c5f250e1c",
                "deletions": 3,
                "filename": "bundlerepository/src/main/java/org/apache/felix/bundlerepository/StringSet.java",
                "patch": "@@ -26,10 +26,13 @@\n \n     public StringSet(String set)\n     {\n-        StringTokenizer st = new StringTokenizer(set, \",\");\n-        while (st.hasMoreTokens())\n+        if (set != null)\n         {\n-            add(st.nextToken().trim());\n+            StringTokenizer st = new StringTokenizer(set, \",\");\n+            while (st.hasMoreTokens())\n+            {\n+                add(st.nextToken().trim());\n+            }\n         }\n     }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/felix/raw/7db017bab175124543e9898ff4db415c5f250e1c/bundlerepository/src/main/java/org/apache/felix/bundlerepository/StringSet.java",
                "sha": "b23fd07f5e634bfef63bda9bbd09002dc8027dcd",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/felix/blob/7db017bab175124543e9898ff4db415c5f250e1c/bundlerepository/src/test/java/org/apache/felix/bundlerepository/FilterImplTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/bundlerepository/src/test/java/org/apache/felix/bundlerepository/FilterImplTest.java?ref=7db017bab175124543e9898ff4db415c5f250e1c",
                "deletions": 3,
                "filename": "bundlerepository/src/test/java/org/apache/felix/bundlerepository/FilterImplTest.java",
                "patch": "@@ -70,7 +70,7 @@ public void testNoneStandardLDAPOperators() throws Exception {\n         dict.put(\"package\", \"org.eclipse.core.runtime\");\n         dict.put(\"version\", \"0.0.0\");\n         dict.put(\"common\", \"split\");\n-        assertFalse(filterImpl.match(dict));\n+        assertTrue(filterImpl.match(dict));\n \n         filterImpl = new FilterImpl(\"(&(package=org.eclipse.core.runtime)(version>=0.0.0)(common=split)(mandatory:*>common))\");\n         dict = new Hashtable();\n@@ -116,5 +116,4 @@ public void testCaseSensitive() throws Exception {\n         assertFalse(filterImpl.matchCase(dict));\n         \n     }\n-    \n-}\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/felix/raw/7db017bab175124543e9898ff4db415c5f250e1c/bundlerepository/src/test/java/org/apache/felix/bundlerepository/FilterImplTest.java",
                "sha": "53d96796b8bd058b276d9343f9ddf0d976c1d538",
                "status": "modified"
            }
        ],
        "message": "Applied patch to address some NPEs. (FELIX-1809)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@910440 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/8cb2cf6203b9eb5bf3cf4e3b09ee223e4e6c1121",
        "patched_files": [
            "StringSet.java",
            "FilterImpl.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "FilterImplTest.java"
        ]
    },
    "felix_82c8452": {
        "bug_id": "felix_82c8452",
        "commit": "https://github.com/apache/felix/commit/82c845266aeb58defbce7bdd7360705e363e856f",
        "file": [
            {
                "additions": 79,
                "blob_url": "https://github.com/apache/felix/blob/82c845266aeb58defbce7bdd7360705e363e856f/configadmin/src/main/java/org/apache/felix/cm/file/FilePersistenceManager.java",
                "changes": 97,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/configadmin/src/main/java/org/apache/felix/cm/file/FilePersistenceManager.java?ref=82c845266aeb58defbce7bdd7360705e363e856f",
                "deletions": 18,
                "filename": "configadmin/src/main/java/org/apache/felix/cm/file/FilePersistenceManager.java",
                "patch": "@@ -72,6 +72,29 @@\n  * <tr><td><code>org.apache.felix.log.LogService</code><td><code>org/apache/felix/log/LogService.config</code></tr>\n  * <tr><td><code>sample.fl&auml;che</code><td><code>sample/fl%00e8che.config</code></tr>\n  * </table>\n+ * <p>\n+ * <b>Mulithreading Issues</b>\n+ * <p>\n+ * In a multithreaded environment the {@link #store(String, Dictionary)} and\n+ * {@link #load(File)} methods may be called at the the quasi-same time for the\n+ * same configuration PID. It may no happen, that the store method starts\n+ * writing the file and the load method might at the same time read from the\n+ * file currently being written and thus loading corrupt data (if data is\n+ * available at all).\n+ * <p>\n+ * To prevent this situation from happening, the methods use synchronization\n+ * and temporary files as follows:\n+ * <ul>\n+ * <li>The {@link #store(String, Dictionary)} method writes a temporary file\n+ * with file extension <code>.tmp</code>. When done, the file is renamed to\n+ * actual configuration file name as implied by the PID. This last step of\n+ * renaming the file is synchronized on the FilePersistenceManager instance.</li>\n+ * <li>The {@link #load(File)} method is completeley synchronized on the\n+ * FilePersistenceManager instance such that the {@link #store} method might\n+ * inadvertantly try to replace the file while it is being read.</li>\n+ * <li>Finally the <code>Iterator</code> returned by {@link #getDictionaries()}\n+ * is implemented such that any temporary configuration file is just ignored.</li>\n+ * </ul>\n  *\n  * @author fmeschbe\n  */\n@@ -89,6 +112,14 @@\n      */\n     private static final String FILE_EXT = \".config\";\n \n+    /**\n+     * The extension of the configuration files, while they are being written\n+     * (value is \".tmp\").\n+     * \n+     * @see #store(String, Dictionary)\n+     */\n+    private static final String TMP_EXT = \".tmp\";\n+\n     private static final BitSet VALID_PATH_CHARS;\n \n     /**\n@@ -389,16 +420,33 @@ public Dictionary load( String pid ) throws IOException\n     public void store( String pid, Dictionary props ) throws IOException\n     {\n         OutputStream out = null;\n+        File tmpFile = null;\n         try\n         {\n             File cfgFile = getFile( pid );\n             \n             // ensure parent path\n-            cfgFile.getParentFile().mkdirs();\n+            File cfgDir = cfgFile.getParentFile();\n+            cfgDir.mkdirs();\n \n-            \n-            out = new FileOutputStream( cfgFile );\n+            // write the configuration to a temporary file\n+            tmpFile = File.createTempFile( cfgFile.getName(), TMP_EXT, cfgDir );\n+            out = new FileOutputStream( tmpFile );\n             ConfigurationHandler.write( out, props );\n+            out.close();\n+\n+            // after writing the file, rename it but ensure, that no other\n+            // might at the same time open the new file\n+            // see load(File)\n+            synchronized (this) {\n+                // make sure the cfg file does not exists (just for sanity)\n+                if (cfgFile.exists()) {\n+                    cfgFile.delete();\n+                }\n+                \n+                // rename the temporary file to the new file\n+                tmpFile.renameTo( cfgFile );\n+            }\n         }\n         finally\n         {\n@@ -413,6 +461,10 @@ public void store( String pid, Dictionary props ) throws IOException\n                     // ignore\n                 }\n             }\n+            \n+            if (tmpFile.exists()) {\n+                tmpFile.delete();\n+            }\n         }\n     }\n \n@@ -430,23 +482,32 @@ public void store( String pid, Dictionary props ) throws IOException\n      */\n     private Dictionary load( File cfgFile ) throws IOException\n     {\n-        InputStream ins = null;\n-        try\n+        // synchronize this instance to make at least sure, the file is\n+        // not at the same time accessed by another thread (see store())\n+        // we have to synchronize the complete load time as the store\n+        // method might want to replace the file while we are reading and\n+        // still have the file open. This might be a problem e.g. in Windows\n+        // environments, where files may not be removed which are still open\n+        synchronized ( this )\n         {\n-            ins = new FileInputStream( cfgFile );\n-            return ConfigurationHandler.read( ins );\n-        }\n-        finally\n-        {\n-            if ( ins != null )\n+            InputStream ins = null;\n+            try\n             {\n-                try\n-                {\n-                    ins.close();\n-                }\n-                catch ( IOException ioe )\n+                ins = new FileInputStream( cfgFile );\n+                return ConfigurationHandler.read( ins );\n+            }\n+            finally\n+            {\n+                if ( ins != null )\n                 {\n-                    // ignore\n+                    try\n+                    {\n+                        ins.close();\n+                    }\n+                    catch ( IOException ioe )\n+                    {\n+                        // ignore\n+                    }\n                 }\n             }\n         }\n@@ -536,7 +597,7 @@ private Dictionary seek()\n                 {\n \n                     File cfgFile = fileList[idx++];\n-                    if ( cfgFile.isFile() )\n+                    if ( cfgFile.isFile() && !cfgFile.getName().endsWith( TMP_EXT ))\n                     {\n                         try\n                         {",
                "raw_url": "https://github.com/apache/felix/raw/82c845266aeb58defbce7bdd7360705e363e856f/configadmin/src/main/java/org/apache/felix/cm/file/FilePersistenceManager.java",
                "sha": "acb5dd880bc831c460d792bb69874c038ee91a0c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/felix/blob/82c845266aeb58defbce7bdd7360705e363e856f/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationAdminImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationAdminImpl.java?ref=82c845266aeb58defbce7bdd7360705e363e856f",
                "deletions": 1,
                "filename": "configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationAdminImpl.java",
                "patch": "@@ -93,7 +93,7 @@ public Configuration createFactoryConfiguration( String factoryPid, String locat\n      */\n     public Configuration getConfiguration( String pid ) throws IOException\n     {\n-        ConfigurationImpl config = configurationManager.getConfiguration( pid );\n+        ConfigurationImpl config = configurationManager.getConfiguration( pid, getBundle().getLocation() );\n \n         if ( config.getBundleLocation() == null )\n         {",
                "raw_url": "https://github.com/apache/felix/raw/82c845266aeb58defbce7bdd7360705e363e856f/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationAdminImpl.java",
                "sha": "11cb3206e3d06181eeef20141974369ea01740a3",
                "status": "modified"
            },
            {
                "additions": 69,
                "blob_url": "https://github.com/apache/felix/blob/82c845266aeb58defbce7bdd7360705e363e856f/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationImpl.java",
                "changes": 90,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationImpl.java?ref=82c845266aeb58defbce7bdd7360705e363e856f",
                "deletions": 21,
                "filename": "configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationImpl.java",
                "patch": "@@ -38,6 +38,24 @@\n class ConfigurationImpl\n {\n \n+    /**\n+     * The name of a synthetic property stored in the persisted configuration\n+     * data to indicate that the configuration data is new, that is created but\n+     * never updated (value is \"_felix_.cm.newConfiguration\").\n+     * <p>\n+     * This special property is stored by the\n+     * {@link #ConfigurationImpl(ConfigurationManager, PersistenceManager, String, String, String)}\n+     * constructor, when the configuration is first created and persisted and is\n+     * interpreted by the\n+     * {@link #ConfigurationImpl(ConfigurationManager, PersistenceManager, Dictionary)}\n+     * method when the configuration data is loaded in a new object.\n+     * <p>\n+     * The goal of this property is to keep the information on whether\n+     * configuration data is new (but persisted as per the spec) or has already\n+     * been assigned with possible no data.\n+     */\n+    private static final String CONFIGURATION_NEW = \"_felix_.cm.newConfiguration\";\n+    \n     /**\n      * The {@link ConfigurationManager configuration manager} instance which\n      * caused this configuration object to be created.\n@@ -83,7 +101,8 @@\n      * The configuration data of this configuration instance. This is a private\n      * copy of the properties of which a copy is made when the\n      * {@link #getProperties()} method is called. This field is <code>null</code> if\n-     * the configuration has been created and never stored to persistence.\n+     * the configuration has been created and never been updated with acutal\n+     * configuration properties.\n      */\n     private CaseInsensitiveDictionary properties;\n \n@@ -98,17 +117,26 @@\n         factoryPID = ( String ) properties.remove( ConfigurationAdmin.SERVICE_FACTORYPID );\n         bundleLocation = ( String ) properties.remove( ConfigurationAdmin.SERVICE_BUNDLELOCATION );\n \n-        configure( properties );\n+        // set the properties internally\n+        configureFromPersistence( properties );\n     }\n \n \n     ConfigurationImpl( ConfigurationManager configurationManager, PersistenceManager persistenceManager, String pid,\n-        String factoryPid )\n+        String factoryPid, String bundleLocation ) throws IOException\n     {\n         this.configurationManager = configurationManager;\n         this.persistenceManager = persistenceManager;\n         this.pid = pid;\n-        factoryPID = factoryPid;\n+        this.factoryPID = factoryPid;\n+        this.bundleLocation = bundleLocation;\n+        this.properties = null;\n+\n+        // this is a new configuration object, store immediately\n+        Dictionary props = new Hashtable();\n+        setAutoProperties( props, true );\n+        props.put( CONFIGURATION_NEW, Boolean.TRUE );\n+        persistenceManager.store( pid, props );\n     }\n \n \n@@ -117,7 +145,7 @@\n      */\n     public void delete() throws IOException\n     {\n-        if ( !this.isDeleted() )\n+        if ( !isDeleted() )\n         {\n             persistenceManager.delete( pid );\n             persistenceManager = null;\n@@ -179,14 +207,14 @@ public Dictionary getProperties()\n      */\n     public void setBundleLocation( String bundleLocation )\n     {\n-        if ( !this.isDeleted() )\n+        if ( !isDeleted() )\n         {\n             this.bundleLocation = bundleLocation;\n \n             // 104.15.2.8 The bundle location will be set persistently\n             try\n             {\n-                this.store();\n+                store();\n             }\n             catch ( IOException ioe )\n             {\n@@ -201,7 +229,7 @@ public void setBundleLocation( String bundleLocation )\n      */\n     public void update() throws IOException\n     {\n-        if ( !this.isDeleted() )\n+        if ( !isDeleted() )\n         {\n             // read configuration from persistence (again)\n             Dictionary properties = persistenceManager.load( pid );\n@@ -214,7 +242,7 @@ public void update() throws IOException\n                     + servicePid );\n             }\n \n-            this.configure( properties );\n+            configureFromPersistence( properties );\n \n             configurationManager.updated( this );\n         }\n@@ -226,15 +254,15 @@ public void update() throws IOException\n      */\n     public void update( Dictionary properties ) throws IOException\n     {\n-        if ( !this.isDeleted() )\n+        if ( !isDeleted() )\n         {\n             CaseInsensitiveDictionary newProperties = new CaseInsensitiveDictionary( properties );\n \n-            this.setAutoProperties( newProperties, true );\n+            setAutoProperties( newProperties, true );\n \n             persistenceManager.store( pid, newProperties );\n \n-            this.configure( newProperties );\n+            configure( newProperties );\n \n             configurationManager.updated( this );\n         }\n@@ -295,18 +323,24 @@ void store() throws IOException\n             props = new Hashtable();\n \n             // add automatic properties including the bundle location (if set)\n-            this.setAutoProperties( props, true );\n+            setAutoProperties( props, true );\n         }\n-        else if ( this.getBundleLocation() != null )\n+        else if ( getBundleLocation() != null )\n         {\n-            props.put( ConfigurationAdmin.SERVICE_BUNDLELOCATION, this.getBundleLocation() );\n+            props.put( ConfigurationAdmin.SERVICE_BUNDLELOCATION, getBundleLocation() );\n         }\n \n         // only store now, if this is not a new configuration\n         persistenceManager.store( pid, props );\n     }\n \n \n+    boolean isNew()\n+    {\n+        return properties == null;\n+    }\n+\n+\n     boolean isDeleted()\n     {\n         if ( persistenceManager != null )\n@@ -323,33 +357,47 @@ boolean isDeleted()\n     }\n \n \n+    private void configureFromPersistence( Dictionary properties )\n+    {\n+        // if the this is not an empty/new configuration, accept the properties\n+        // otherwise just set the properties field to null\n+        if ( properties.get( CONFIGURATION_NEW ) == null )\n+        {\n+            configure( properties );\n+        }\n+        else\n+        {\n+            this.properties = null;\n+        }\n+    }\n+    \n     private void configure( Dictionary properties )\n     {\n         // remove predefined properties\n-        this.clearAutoProperties( properties );\n+        clearAutoProperties( properties );\n \n         // ensure CaseInsensitiveDictionary\n         if ( properties instanceof CaseInsensitiveDictionary )\n         {\n-            this.properties = (CaseInsensitiveDictionary)properties;\n+            this.properties = ( CaseInsensitiveDictionary ) properties;\n         }\n         else\n         {\n-            properties = new CaseInsensitiveDictionary( properties );\n+            this.properties = new CaseInsensitiveDictionary( properties );\n         }\n     }\n \n \n     void setAutoProperties( Dictionary properties, boolean withBundleLocation )\n     {\n         // set pid and factory pid in the properties\n-        this.replaceProperty( properties, Constants.SERVICE_PID, pid );\n-        this.replaceProperty( properties, ConfigurationAdmin.SERVICE_FACTORYPID, factoryPID );\n+        replaceProperty( properties, Constants.SERVICE_PID, pid );\n+        replaceProperty( properties, ConfigurationAdmin.SERVICE_FACTORYPID, factoryPID );\n \n         // bundle location is not set here\n         if ( withBundleLocation )\n         {\n-            this.replaceProperty( properties, ConfigurationAdmin.SERVICE_BUNDLELOCATION, this.getBundleLocation() );\n+            replaceProperty( properties, ConfigurationAdmin.SERVICE_BUNDLELOCATION, getBundleLocation() );\n         }\n         else\n         {",
                "raw_url": "https://github.com/apache/felix/raw/82c845266aeb58defbce7bdd7360705e363e856f/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationImpl.java",
                "sha": "9b26f9026b41055201f547d9b0a241121739635c",
                "status": "modified"
            },
            {
                "additions": 122,
                "blob_url": "https://github.com/apache/felix/blob/82c845266aeb58defbce7bdd7360705e363e856f/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java",
                "changes": 202,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java?ref=82c845266aeb58defbce7bdd7360705e363e856f",
                "deletions": 80,
                "filename": "configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java",
                "patch": "@@ -271,11 +271,18 @@ Iterator getCachedConfigurations()\n     }\n \n \n-    void cacheConfiguration( ConfigurationImpl configuration )\n+    ConfigurationImpl cacheConfiguration( ConfigurationImpl configuration )\n     {\n         synchronized ( configurations )\n         {\n+            Object existing = configurations.get( configuration.getPid() );\n+            if ( existing != null )\n+            {\n+                return ( ConfigurationImpl ) existing;\n+            }\n+\n             configurations.put( configuration.getPid(), configuration );\n+            return configuration;\n         }\n     }\n \n@@ -310,8 +317,7 @@ ConfigurationImpl createFactoryConfiguration( ConfigurationAdminImpl configurati\n \n         // create the configuration\n         String pid = createPid( factoryPid );\n-        ConfigurationImpl config = createConfiguration( pid, factoryPid );\n-        config.setBundleLocation( configurationAdmin.getBundle().getLocation() );\n+        ConfigurationImpl config = createConfiguration( pid, factoryPid, configurationAdmin.getBundle().getLocation() );\n \n         // add the configuration to the factory\n         factory.addPID( pid );\n@@ -331,11 +337,7 @@ ConfigurationImpl createFactoryConfiguration( String factoryPid, String location\n     {\n         // create the configuration\n         String pid = createPid( factoryPid );\n-        ConfigurationImpl config = createConfiguration( pid, factoryPid );\n-        if ( location != null )\n-        {\n-            config.setBundleLocation( location );\n-        }\n+        ConfigurationImpl config = createConfiguration( pid, factoryPid, location );\n \n         // add the configuration to the factory\n         Factory factory = getFactory( factoryPid );\n@@ -346,26 +348,41 @@ ConfigurationImpl createFactoryConfiguration( String factoryPid, String location\n     }\n \n \n-    ConfigurationImpl getConfiguration( String pid ) throws IOException\n+    ConfigurationImpl getExistingConfiguration( String pid ) throws IOException\n     {\n-        return getConfiguration( pid, true );\n+        ConfigurationImpl config = getCachedConfiguration( pid );\n+        if ( config != null )\n+        {\n+            return config;\n+        }\n+        \n+        PersistenceManager[] pmList = getPersistenceManagers();\n+        for ( int i = 0; i < pmList.length; i++ )\n+        {\n+            if ( pmList[i].exists( pid ) )\n+            {\n+                Dictionary props = pmList[i].load( pid );\n+                config = new ConfigurationImpl( this, pmList[i], props );\n+                return cacheConfiguration( config );\n+            }\n+        }\n+        \n+        // neither the cache nor any persistence manager has configuration\n+        return null;\n     }\n-\n-\n+    \n+    \n     ConfigurationImpl getConfiguration( String pid, String bundleLocation ) throws IOException\n     {\n-        ConfigurationImpl config = getConfiguration( pid, false );\n-\n-        if ( config == null )\n+        // check for existing (cached or persistent) configuration\n+        ConfigurationImpl config = getExistingConfiguration( pid );\n+        if ( config != null )\n         {\n-            config = createConfiguration( pid, null );\n-            if ( bundleLocation != null )\n-            {\n-                config.setBundleLocation( bundleLocation );\n-            }\n+            return config;\n         }\n \n-        return config;\n+        // else create new configuration also setting the bundle location\n+        return createConfiguration( pid, null, bundleLocation );\n     }\n \n \n@@ -577,42 +594,13 @@ private void configure( ServiceReference sr, ManagedServiceFactory service )\n     }\n \n \n-    ConfigurationImpl getConfiguration( String pid, boolean create ) throws IOException\n-    {\n-        ConfigurationImpl config = getCachedConfiguration( pid );\n-        if ( config != null )\n-        {\n-            return config;\n-        }\n-\n-        PersistenceManager[] pmList = getPersistenceManagers();\n-        for ( int i = 0; i < pmList.length; i++ )\n-        {\n-            if ( pmList[i].exists( pid ) )\n-            {\n-                Dictionary props = pmList[i].load( pid );\n-                config = new ConfigurationImpl( this, pmList[i], props );\n-                cacheConfiguration( config );\n-                return config;\n-            }\n-        }\n-\n-        // if getting here, there is no configuration yet, optionally create new\n-        return ( create ) ? createConfiguration( pid, null ) : null;\n-    }\n-\n-\n-    ConfigurationImpl createConfiguration( String pid, String factoryPid ) throws IOException\n+    ConfigurationImpl createConfiguration( String pid, String factoryPid, String bundleLocation ) throws IOException\n     {\n-        ConfigurationImpl config = new ConfigurationImpl( this, getPersistenceManagers()[0], pid, factoryPid );\n-\n-        // immediately store the configuration, yet getProperties() must still\n-        // return null\n-        config.store();\n-\n-        cacheConfiguration( config );\n+        // create the configuration (which will also be stored immediately)\n+        ConfigurationImpl config = new ConfigurationImpl( this, getPersistenceManagers()[0], pid, factoryPid,\n+            bundleLocation );\n \n-        return config;\n+        return cacheConfiguration( config );\n     }\n \n \n@@ -648,9 +636,27 @@ Factory createFactory( String factoryPid )\n     }\n \n \n+    /**\n+     * Calls the registered configuration plugins on the given configuration\n+     * object unless the configuration has just been created and not been\n+     * updated yet.\n+     * \n+     * @param sr The service reference of the managed service (factory) which\n+     *            is to be updated with configuration\n+     * @param cfg The configuration object whose properties have to be passed\n+     *            through the plugins\n+     * @return The properties from the configuration object passed through the\n+     *         plugins or <code>null</code> if the configuration object has\n+     *         been newly created and no properties exist yet.\n+     */\n     private Dictionary callPlugins( ServiceReference sr, ConfigurationImpl cfg )\n     {\n         Dictionary props = cfg.getProperties();\n+        \n+        // guard against NPE for new configuration never updated\n+        if (props == null) {\n+            return null;\n+        }\n \n         ServiceReference[] plugins = null;\n         try\n@@ -804,45 +810,66 @@ void log( int level, String message, Throwable t )\n \n         public void run()\n         {\n+            // get or load configuration for the pid\n             ConfigurationImpl cfg;\n             try\n             {\n-                cfg = getConfiguration( pid, sr.getBundle().getLocation() );\n+                cfg = getExistingConfiguration( pid );\n             }\n             catch ( IOException ioe )\n             {\n                 log( LogService.LOG_ERROR, \"Error loading configuration for \" + pid, ioe );\n                 return;\n             }\n+            \n+            // this will be set below to be given to the service\n+            Dictionary dictionary;\n \n-            // 104.3 Ignore duplicate PIDs from other bundles and report them to\n-            // the log\n-            // 104.4.1 No update call back for PID already bound to another\n-            // bundle location\n-            String bundleLocation = sr.getBundle().getLocation();\n-            if ( cfg.getBundleLocation() != null && !bundleLocation.equals( cfg.getBundleLocation() ) )\n+            // check configuration and call plugins if existing and not new\n+            if ( cfg != null && !cfg.isNew() )\n             {\n-                log( LogService.LOG_ERROR, \"Cannot use configuration for \" + pid + \" requested by bundle \"\n-                    + sr.getBundle().getLocation() + \" but belongs to \" + cfg.getBundleLocation(), null );\n-                return;\n-            }\n \n-            // 104.3 Report an error in the log if more than one service with\n-            // the same PID asks for the configuration\n-            if ( cfg.getServiceReference() != null && !sr.equals( cfg.getServiceReference() ) )\n-            {\n-                log( LogService.LOG_ERROR, \"Configuration for \" + pid + \" has already been used for service \"\n-                    + cfg.getServiceReference() + \" and will now also be given to \" + sr, null );\n+                // 104.3 Ignore duplicate PIDs from other bundles and report\n+                // them to the log\n+                // 104.4.1 No update call back for PID already bound to another\n+                // bundle location\n+                // 104.4.1 assign configuration to bundle if unassigned\n+                String bundleLocation = sr.getBundle().getLocation();\n+                if ( cfg.getBundleLocation() == null )\n+                {\n+                    cfg.setBundleLocation( bundleLocation );\n+                }\n+                else if ( !bundleLocation.equals( cfg.getBundleLocation() ) )\n+                {\n+                    log( LogService.LOG_ERROR, \"Cannot use configuration for \" + pid + \" requested by bundle \"\n+                        + sr.getBundle().getLocation() + \" but belongs to \" + cfg.getBundleLocation(), null );\n+                    return;\n+                }\n+\n+                // 104.3 Report an error in the log if more than one service\n+                // with\n+                // the same PID asks for the configuration\n+                if ( cfg.getServiceReference() != null && !sr.equals( cfg.getServiceReference() ) )\n+                {\n+                    log( LogService.LOG_ERROR, \"Configuration for \" + pid + \" has already been used for service \"\n+                        + cfg.getServiceReference() + \" and will now also be given to \" + sr, null );\n+                }\n+                else\n+                {\n+                    // assign the configuration to the service\n+                    cfg.setServiceReference( sr );\n+                }\n+\n+                // prepare the configuration for the service (call plugins)\n+                dictionary = callPlugins( sr, cfg );\n             }\n             else\n             {\n-                // assign the configuration to the service\n-                cfg.setServiceReference( sr );\n+                // 104.5.3 ManagedService.updated must be called with null\n+                // if no configuration is available\n+                dictionary = null;\n             }\n \n-            // prepare the configuration for the service (call plugins)\n-            Dictionary dictionary = callPlugins( sr, cfg );\n-\n             // update the service with the configuration\n             try\n             {\n@@ -925,7 +952,7 @@ else if ( !bundleLocation.equals( factory.getBundleLocation() ) )\n                 ConfigurationImpl cfg;\n                 try\n                 {\n-                    cfg = getConfiguration( pid, false );\n+                    cfg = getExistingConfiguration( pid );\n                 }\n                 catch ( IOException ioe )\n                 {\n@@ -942,6 +969,13 @@ else if ( !bundleLocation.equals( factory.getBundleLocation() ) )\n                     factory.storeSilently();\n                     continue;\n                 }\n+                else if ( cfg.isNew() )\n+                {\n+                    // Configuration has just been created but not yet updated\n+                    // we currently just ignore it and have the update mechanism\n+                    // provide the configuration to the ManagedServiceFactory\n+                    continue;\n+                }\n                 else if ( !factoryPid.equals( cfg.getFactoryPid() ) )\n                 {\n                     log( LogService.LOG_ERROR, \"Configuration \" + pid + \" referred to by factory \" + factoryPid\n@@ -972,7 +1006,11 @@ else if ( !bundleLocation.equals( cfg.getBundleLocation() ) )\n                 // update the service with the configuration\n                 try\n                 {\n-                    service.updated( pid, dictionary );\n+                    // only, if there is non-null configuration data\n+                    if ( dictionary != null )\n+                    {\n+                        service.updated( pid, dictionary );\n+                    }\n                 }\n                 catch ( ConfigurationException ce )\n                 {\n@@ -1085,7 +1123,11 @@ else if ( !bundleLocation.equals( config.getBundleLocation() ) )\n                             Dictionary dictionary = callPlugins( sr[0], config );\n \n                             // update the ManagedServiceFactory with the properties\n-                            srv.updated( config.getPid(), dictionary );\n+                            // only, if there is non-null configuration data\n+                            if ( dictionary != null )\n+                            {\n+                                srv.updated( config.getPid(), dictionary );\n+                            }\n                         }\n                         finally\n                         {",
                "raw_url": "https://github.com/apache/felix/raw/82c845266aeb58defbce7bdd7360705e363e856f/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java",
                "sha": "e0a9a7693817a87dd7cfe7c24dd8d29fa26a5cf7",
                "status": "modified"
            }
        ],
        "message": "FELIX-335 Configuration Admin updates with empty properties and throws NullPointerExceptions due to race condition\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@567688 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/920e393f8f251c773b1b24d9ea223fab5d41bd54",
        "patched_files": [
            "FilePersistenceManager.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "FilePersistenceManagerTest.java"
        ]
    },
    "felix_8b420cc": {
        "bug_id": "felix_8b420cc",
        "commit": "https://github.com/apache/felix/commit/8b420ccc71de3cf2e293f79e90b585095eb281d4",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/felix/blob/8b420ccc71de3cf2e293f79e90b585095eb281d4/framework/src/main/java/org/apache/felix/framework/FilterImpl.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/framework/src/main/java/org/apache/felix/framework/FilterImpl.java?ref=8b420ccc71de3cf2e293f79e90b585095eb281d4",
                "deletions": 16,
                "filename": "framework/src/main/java/org/apache/felix/framework/FilterImpl.java",
                "patch": "@@ -1,4 +1,4 @@\n-/* \n+/*\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n@@ -20,8 +20,8 @@\n \n import java.io.CharArrayReader;\n import java.io.IOException;\n-import java.util.*;\n import java.lang.ref.SoftReference;\n+import java.util.*;\n \n import org.apache.felix.framework.util.StringMap;\n import org.apache.felix.framework.util.ldap.*;\n@@ -56,7 +56,7 @@ public FilterImpl(Logger logger, String expr) throws InvalidSyntaxException\n         m_logger = logger;\n         if (expr == null)\n         {\n-            throw new InvalidSyntaxException(\"Filter cannot be null\", null);\n+            throw new NullPointerException(\"Filter cannot be null\");\n         }\n         Object[] program = null;\n         synchronized (m_programCache)\n@@ -127,44 +127,44 @@ public int hashCode()\n         return toString().hashCode();\n     }\n \n-    private boolean match(Dictionary dict, ServiceReference ref, boolean caseSensitive) \n+    private boolean match(Dictionary dict, ServiceReference ref, boolean caseSensitive)\n         throws IllegalArgumentException\n     {\n         SoftReference tupleRef = (SoftReference) m_cache.get();\n         Evaluator evaluator = null;\n         SimpleMapper mapper = null;\n         Object[] tuple = null;\n \n-        if (tupleRef != null) \n+        if (tupleRef != null)\n         {\n             tuple = (Object[]) tupleRef.get();\n         }\n \n-        if (tuple == null) \n+        if (tuple == null)\n         {\n             evaluator = new Evaluator(m_program);\n             mapper = new SimpleMapper();\n         }\n-        else \n+        else\n         {\n             evaluator = (Evaluator) tuple[0];\n             mapper = (SimpleMapper) tuple[1];\n             m_cache.set(null);\n         }\n \n-        try \n+        try\n         {\n-            if (dict != null) \n+            if (dict != null)\n             {\n                 mapper.setSource(dict, caseSensitive);\n             }\n-            else \n+            else\n             {\n                 mapper.setSource(ref);\n             }\n \n             return evaluator.evaluate(mapper);\n-        } \n+        }\n         catch (AttributeNotFoundException ex)\n         {\n             log(Logger.LOG_DEBUG, \"FilterImpl: Attribute not found.\", ex);\n@@ -173,18 +173,18 @@ private boolean match(Dictionary dict, ServiceReference ref, boolean caseSensiti\n         {\n             log(Logger.LOG_ERROR, \"FilterImpl: \" + toString(), ex);\n         }\n-        finally \n+        finally\n         {\n-            if (dict != null) \n+            if (dict != null)\n             {\n                 mapper.setSource(null, caseSensitive);\n             }\n-            else \n+            else\n             {\n                 mapper.setSource(null);\n             }\n-            \n-            if (tuple == null) \n+\n+            if (tuple == null)\n             {\n                 m_cache.set(new SoftReference(new Object[] {evaluator, mapper}));\n             }",
                "raw_url": "https://github.com/apache/felix/raw/8b420ccc71de3cf2e293f79e90b585095eb281d4/framework/src/main/java/org/apache/felix/framework/FilterImpl.java",
                "sha": "4b7abfbc1a8f20200f036d27e31dddff385f41d7",
                "status": "modified"
            }
        ],
        "message": "FELIX-1028 : Throw NPE instead of InvalidSyntaxException if expr is null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@763227 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/8d0e201d300e7d5d4e12be75130ce5586ea881fe",
        "patched_files": [
            "FilterImpl.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "FilterImplTest.java"
        ]
    },
    "felix_8c13cef": {
        "bug_id": "felix_8c13cef",
        "commit": "https://github.com/apache/felix/commit/8c13cef5f7522f81cd54c5a0db641be12c49baf8",
        "file": [
            {
                "additions": 89,
                "blob_url": "https://github.com/apache/felix/blob/8c13cef5f7522f81cd54c5a0db641be12c49baf8/scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java",
                "changes": 126,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java?ref=8c13cef5f7522f81cd54c5a0db641be12c49baf8",
                "deletions": 37,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java",
                "patch": "@@ -24,8 +24,10 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Dictionary;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import java.util.SortedMap;\n import java.util.TreeMap;\n import java.util.concurrent.atomic.AtomicInteger;\n@@ -137,6 +139,12 @@ void initBindingMethods(BindMethods bindMethods)\n \n         private volatile Map<ServiceReference<T>, RefPair<T>> previousRefMap = EMPTY_REF_MAP;\n \n+        private volatile int floor;\n+\n+        private volatile int ceiling;\n+\n+        private final Set<Integer> missing = new HashSet<Integer>( );\n+\n         public void setTracker( ServiceTracker<T, RefPair<T>> tracker )\n         {\n             this.tracker = tracker;\n@@ -200,30 +208,58 @@ protected void ungetService( RefPair<T> ref )\n                 }\n             }\n         }\n+\n+        protected void tracked( int trackingCount )\n+        {\n+            synchronized ( missing )\n+            {\n+                if (trackingCount == floor + 1 )\n+                {\n+                    floor++;\n+                    missing.remove( trackingCount );\n+                }\n+                else if ( trackingCount < ceiling )\n+                {\n+                    missing.remove( trackingCount );\n+                }\n+                if ( trackingCount > ceiling )\n+                {\n+                    for (int i = ceiling + 1; i < trackingCount; i++ )\n+                    {\n+                        missing.add( i );\n+                    }\n+                    ceiling = trackingCount;\n+                }\n+                if ( missing.isEmpty() )\n+                {\n+                    missing.notifyAll();\n+                }\n+            }\n+        }\n     }\n \n \n     private class FactoryCustomizer extends AbstractCustomizer {\n \n-        public RefPair<T> addingService( ServiceReference<T> serviceReference )\n+        public RefPair<T> addingService( ServiceReference<T> serviceReference, int trackingCount )\n         {\n             RefPair<T> refPair = new RefPair<T>( serviceReference  );\n             return refPair;\n         }\n \n-        public void addedService( ServiceReference<T> serviceReference, RefPair<T> refPair )\n+        public void addedService( ServiceReference<T> serviceReference, RefPair<T> refPair, int trackingCount )\n         {\n             if ( !isOptional() )\n             {\n                 m_componentManager.activateInternal();\n             }\n         }\n \n-        public void modifiedService( ServiceReference<T> serviceReference, RefPair<T> refPair )\n+        public void modifiedService( ServiceReference<T> serviceReference, RefPair<T> refPair, int trackingCount )\n         {\n         }\n \n-        public void removedService( ServiceReference<T> serviceReference, RefPair<T> refPair )\n+        public void removedService( ServiceReference<T> serviceReference, RefPair<T> refPair, int trackingCount )\n         {\n             if ( !isOptional() )\n             {\n@@ -237,7 +273,8 @@ public void removedService( ServiceReference<T> serviceReference, RefPair<T> ref\n         public boolean open()\n         {\n             boolean success = m_dependencyMetadata.isOptional() || !getTracker().isEmpty();\n-            getTracker().getTracked( true );   //TODO activate method??\n+            AtomicInteger trackingCount = new AtomicInteger( );\n+            getTracker().getTracked( true, trackingCount );   //TODO activate method??\n             return success;\n         }\n \n@@ -256,7 +293,7 @@ public void close()\n \n         private RefPair<T> lastRefPair;\n \n-        public RefPair<T> addingService( ServiceReference<T> serviceReference )\n+        public RefPair<T> addingService( ServiceReference<T> serviceReference, int trackingCount )\n         {\n             RefPair<T> refPair = getPreviousRefMap().get( serviceReference );\n             if ( refPair == null )\n@@ -273,7 +310,7 @@ public void close()\n             return refPair;\n         }\n \n-        public void addedService( ServiceReference<T> serviceReference, RefPair<T> refPair )\n+        public void addedService( ServiceReference<T> serviceReference, RefPair<T> refPair, int trackingCount )\n         {\n             if ( getPreviousRefMap().remove( serviceReference ) == null )\n             {\n@@ -289,17 +326,19 @@ else if ( isTrackerOpened() && !isOptional() )\n                     m_componentManager.activateInternal();\n                 }\n             }\n+            tracked( trackingCount );\n         }\n \n-        public void modifiedService( ServiceReference<T> serviceReference, RefPair<T> refPair )\n+        public void modifiedService( ServiceReference<T> serviceReference, RefPair<T> refPair, int trackingCount )\n         {\n             if (isActive())\n             {\n                 m_componentManager.update( DependencyManager.this, refPair );\n             }\n+            tracked( trackingCount );\n         }\n \n-        public void removedService( ServiceReference<T> serviceReference, RefPair<T> refPair )\n+        public void removedService( ServiceReference<T> serviceReference, RefPair<T> refPair, int trackingCount )\n         {\n             if ( isActive() )\n             {\n@@ -316,12 +355,14 @@ public void removedService( ServiceReference<T> serviceReference, RefPair<T> ref\n                 }\n             }\n             ungetService( refPair );\n+            tracked( trackingCount );\n         }\n \n         public boolean open()\n         {\n             boolean success = m_dependencyMetadata.isOptional();\n-            SortedMap<ServiceReference<T>, RefPair<T>> tracked = getTracker().getTracked( true );\n+            AtomicInteger trackingCount = new AtomicInteger( );\n+            SortedMap<ServiceReference<T>, RefPair<T>> tracked = getTracker().getTracked( true, trackingCount );\n             for (RefPair<T> refPair: tracked.values())\n             {\n                 synchronized (refPair)\n@@ -353,7 +394,8 @@ public void close()\n         {\n             if ( lastRefPair == null )\n             {\n-                return getTracker().getTracked( true ).values();\n+                AtomicInteger trackingCount = new AtomicInteger( );\n+                return getTracker().getTracked( true, trackingCount ).values();\n             }\n             else\n             {\n@@ -365,7 +407,7 @@ public void close()\n     private class MultipleStaticGreedyCustomizer extends AbstractCustomizer {\n \n \n-        public RefPair<T> addingService( ServiceReference<T> serviceReference )\n+        public RefPair<T> addingService( ServiceReference<T> serviceReference, int trackingCount )\n         {\n             RefPair<T> refPair = new RefPair<T>( serviceReference  );\n             if (isActive())\n@@ -375,7 +417,7 @@ public void close()\n             return refPair;\n         }\n \n-        public void addedService( ServiceReference<T> serviceReference, RefPair<T> refPair )\n+        public void addedService( ServiceReference<T> serviceReference, RefPair<T> refPair, int trackingCount )\n         {\n             if (isActive())\n             {\n@@ -392,15 +434,15 @@ else if ( isTrackerOpened() &&  !isOptional() )\n             }\n         }\n \n-        public void modifiedService( ServiceReference<T> serviceReference, RefPair<T> refPair )\n+        public void modifiedService( ServiceReference<T> serviceReference, RefPair<T> refPair, int trackingCount )\n         {\n             if (isActive())\n             {\n                 m_componentManager.update( DependencyManager.this, refPair );\n             }\n         }\n \n-        public void removedService( ServiceReference<T> serviceReference, RefPair<T> refPair )\n+        public void removedService( ServiceReference<T> serviceReference, RefPair<T> refPair, int trackingCount )\n         {\n             if ( isActive() )\n             {\n@@ -419,7 +461,8 @@ public void removedService( ServiceReference<T> serviceReference, RefPair<T> ref\n         public boolean open()\n         {\n             boolean success = m_dependencyMetadata.isOptional();\n-            SortedMap<ServiceReference<T>, RefPair<T>> tracked = getTracker().getTracked( success || !getTracker().isEmpty() );\n+            AtomicInteger trackingCount = new AtomicInteger( );\n+            SortedMap<ServiceReference<T>, RefPair<T>> tracked = getTracker().getTracked( success || !getTracker().isEmpty(), trackingCount );\n             for (RefPair<T> refPair: tracked.values())\n             {\n                 synchronized (refPair)\n@@ -441,37 +484,38 @@ public void close()\n \n         public Collection<RefPair<T>> getRefs()\n         {\n-            return getTracker().getTracked( null ).values();\n+            AtomicInteger trackingCount = new AtomicInteger( );\n+            return getTracker().getTracked( null, trackingCount ).values();\n         }\n     }\n \n     private class MultipleStaticReluctantCustomizer extends AbstractCustomizer {\n \n         private final Collection<RefPair<T>> refs = new ArrayList<RefPair<T>>();\n \n-        public RefPair<T> addingService( ServiceReference<T> serviceReference )\n+        public RefPair<T> addingService( ServiceReference<T> serviceReference, int trackingCount )\n         {\n             RefPair<T> refPair = new RefPair<T>( serviceReference  );\n             return refPair;\n         }\n \n-        public void addedService( ServiceReference<T> serviceReference, RefPair<T> refPair )\n+        public void addedService( ServiceReference<T> serviceReference, RefPair<T> refPair, int trackingCount )\n         {\n             if ( isTrackerOpened() && !isOptional() && !isActive())\n             {\n                 m_componentManager.activateInternal();\n             }\n         }\n \n-        public void modifiedService( ServiceReference<T> serviceReference, RefPair<T> refPair )\n+        public void modifiedService( ServiceReference<T> serviceReference, RefPair<T> refPair, int trackingCount )\n         {\n             if (isActive())\n             {\n                 m_componentManager.update( DependencyManager.this, refPair );\n             }\n         }\n \n-        public void removedService( ServiceReference<T> serviceReference, RefPair<T> refPair )\n+        public void removedService( ServiceReference<T> serviceReference, RefPair<T> refPair, int trackingCount )\n         {\n             if ( isActive() )\n             {\n@@ -494,7 +538,8 @@ public void removedService( ServiceReference<T> serviceReference, RefPair<T> ref\n         public boolean open()\n         {\n             boolean success = m_dependencyMetadata.isOptional();\n-            SortedMap<ServiceReference<T>, RefPair<T>> tracked = getTracker().getTracked( true );\n+            AtomicInteger trackingCount = new AtomicInteger( );\n+            SortedMap<ServiceReference<T>, RefPair<T>> tracked = getTracker().getTracked( true, trackingCount );\n             for (RefPair<T> refPair: tracked.values())\n             {\n                 synchronized (refPair)\n@@ -526,13 +571,13 @@ public void close()\n \n         private RefPair<T> refPair;\n \n-        public RefPair<T> addingService( ServiceReference<T> serviceReference )\n+        public RefPair<T> addingService( ServiceReference<T> serviceReference, int trackingCount )\n         {\n             RefPair<T> refPair = new RefPair<T>( serviceReference  );\n             return refPair;\n         }\n \n-        public void addedService( ServiceReference<T> serviceReference, RefPair<T> refPair )\n+        public void addedService( ServiceReference<T> serviceReference, RefPair<T> refPair, int trackingCount )\n         {\n             if (isActive() )\n             {\n@@ -564,15 +609,15 @@ else if ( isTrackerOpened() && !isOptional() )\n             }\n         }\n \n-        public void modifiedService( ServiceReference<T> serviceReference, RefPair<T> refPair )\n+        public void modifiedService( ServiceReference<T> serviceReference, RefPair<T> refPair, int trackingCount )\n         {\n             if (isActive())\n             {\n                 m_componentManager.update( DependencyManager.this, refPair );\n             }\n         }\n \n-        public void removedService( ServiceReference<T> serviceReference, RefPair<T> refPair )\n+        public void removedService( ServiceReference<T> serviceReference, RefPair<T> refPair, int trackingCount )\n         {\n             if (refPair == this.refPair)\n             {\n@@ -581,7 +626,8 @@ public void removedService( ServiceReference<T> serviceReference, RefPair<T> ref\n                     RefPair<T> nextRefPair = null;\n                     if ( !getTracker().isEmpty() )\n                     {\n-                        SortedMap<ServiceReference<T>, RefPair<T>> tracked = getTracker().getTracked( true );\n+                        AtomicInteger trackingCount2 = new AtomicInteger( );\n+                        SortedMap<ServiceReference<T>, RefPair<T>> tracked = getTracker().getTracked( true, trackingCount2 );\n                         nextRefPair = tracked.values().iterator().next();\n                         synchronized ( nextRefPair )\n                         {\n@@ -615,7 +661,8 @@ public boolean open()\n             boolean success = m_dependencyMetadata.isOptional();\n             if ( success || !getTracker().isEmpty() )\n             {\n-                SortedMap<ServiceReference<T>, RefPair<T>> tracked = getTracker().getTracked( true );\n+                AtomicInteger trackingCount = new AtomicInteger( );\n+                SortedMap<ServiceReference<T>, RefPair<T>> tracked = getTracker().getTracked( true, trackingCount );\n                 if ( !tracked.isEmpty() )\n                 {\n                     RefPair<T> refPair = tracked.values().iterator().next();\n@@ -659,13 +706,13 @@ private void closeRefPair()\n \n         private RefPair<T> refPair;\n \n-        public RefPair<T> addingService( ServiceReference<T> serviceReference )\n+        public RefPair<T> addingService( ServiceReference<T> serviceReference, int trackingCount )\n         {\n             RefPair<T> refPair = new RefPair<T>( serviceReference );\n             return refPair;\n         }\n \n-        public void addedService( ServiceReference<T> serviceReference, RefPair<T> refPair )\n+        public void addedService( ServiceReference<T> serviceReference, RefPair<T> refPair, int trackingCount )\n         {\n             if ( isActive() )\n             {\n@@ -681,15 +728,15 @@ else if (isTrackerOpened() && !isOptional() )\n             }\n         }\n \n-        public void modifiedService( ServiceReference<T> serviceReference, RefPair<T> refPair )\n+        public void modifiedService( ServiceReference<T> serviceReference, RefPair<T> refPair, int trackingCount )\n         {\n             if ( isActive() )\n             {\n                 m_componentManager.update( DependencyManager.this, refPair );\n             }\n         }\n \n-        public void removedService( ServiceReference<T> serviceReference, RefPair<T> refPair )\n+        public void removedService( ServiceReference<T> serviceReference, RefPair<T> refPair, int trackingCount )\n         {\n             if ( isActive() && refPair == this.refPair )\n             {\n@@ -703,7 +750,8 @@ public boolean open()\n             boolean success = m_dependencyMetadata.isOptional();\n             if ( success || !getTracker().isEmpty() )\n             {\n-                SortedMap<ServiceReference<T>, RefPair<T>> tracked = getTracker().getTracked( true );\n+                AtomicInteger trackingCount = new AtomicInteger( );\n+                SortedMap<ServiceReference<T>, RefPair<T>> tracked = getTracker().getTracked( true, trackingCount );\n                 if ( !tracked.isEmpty() )\n                 {\n                     RefPair<T> refPair = tracked.values().iterator().next();\n@@ -826,7 +874,8 @@ void deactivate()\n      */\n     int size()\n     {\n-        return trackerRef.get().getTracked( null ).size();\n+        AtomicInteger trackingCount = new AtomicInteger( );\n+        return trackerRef.get().getTracked( null, trackingCount ).size();\n     }\n \n \n@@ -976,7 +1025,8 @@ T getService()\n      */\n     private RefPair<T> getRefPair( ServiceReference<T> serviceReference )\n     {\n-        return trackerRef.get().getTracked( null ).get( serviceReference );\n+        AtomicInteger trackingCount = new AtomicInteger( );\n+        return trackerRef.get().getTracked( null, trackingCount ).get( serviceReference );\n     }\n \n \n@@ -1055,7 +1105,8 @@ public String getName()\n      */\n     public boolean isSatisfied()\n     {\n-        return customizerRef.get().isSatisfied();\n+        Customizer<T> customizer = customizerRef.get();\n+        return customizer != null && customizer.isSatisfied();\n     }\n \n \n@@ -1594,7 +1645,8 @@ else if ( isMultiple() )\n //        trackerRef.set( null ); //???\n         if ( tracker != null )\n         {\n-            refMap = tracker.close();\n+            AtomicInteger trackingCount = new AtomicInteger( );\n+            refMap = tracker.close( trackingCount );\n         }\n         else\n         {",
                "raw_url": "https://github.com/apache/felix/raw/8c13cef5f7522f81cd54c5a0db641be12c49baf8/scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java",
                "sha": "de7403be4eed8fa74f0e2dc71a8556a5a6f8ad15",
                "status": "modified"
            },
            {
                "additions": 61,
                "blob_url": "https://github.com/apache/felix/blob/8c13cef5f7522f81cd54c5a0db641be12c49baf8/scr/src/main/java/org/apache/felix/scr/impl/manager/ServiceTracker.java",
                "changes": 105,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/manager/ServiceTracker.java?ref=8c13cef5f7522f81cd54c5a0db641be12c49baf8",
                "deletions": 44,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/manager/ServiceTracker.java",
                "patch": "@@ -25,6 +25,8 @@\n import java.util.Map;\n import java.util.SortedMap;\n import java.util.TreeMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n import org.osgi.framework.AllServiceListener;\n import org.osgi.framework.BundleContext;\n import org.osgi.framework.Constants;\n@@ -367,8 +369,9 @@ public void open(boolean trackAllServices) {\n \t * <p>\n \t * This implementation calls {@link #getServiceReferences()} to get the list\n \t * of tracked services to remove.\n-\t */\n-\tpublic SortedMap<ServiceReference<S>, T> close() {\n+     * @param trackingCount\n+     */\n+\tpublic SortedMap<ServiceReference<S>, T> close( AtomicInteger trackingCount ) {\n \t\tfinal Tracked outgoing;\n //\t\tfinal ServiceReference<S>[] references;\n         SortedMap<ServiceReference<S>, T> map = new TreeMap<ServiceReference<S>, T>(Collections.reverseOrder());\n@@ -381,7 +384,11 @@ public void open(boolean trackAllServices) {\n \t\t\t\tSystem.out.println(\"ServiceTracker.close: \" + filter);\n \t\t\t}\n \t\t\toutgoing.close();\n-            outgoing.copyEntries( map );\n+            synchronized ( outgoing )\n+            {\n+                trackingCount.set( outgoing.getTrackingCount() );\n+                outgoing.copyEntries( map );\n+            }\n //\t\t\treferences = getServiceReferences();\n //\t\t\ttracked = null;\n \t\t\ttry {\n@@ -440,16 +447,16 @@ public void completeClose(Map<ServiceReference<S>, T> toUntrack) {\n \t * This method can be overridden in a subclass to customize the service\n \t * object to be tracked for the service being added. In that case, take care\n \t * not to rely on the default implementation of\n-\t * {@link #removedService(ServiceReference, Object) removedService} to unget\n+\t * {@link #removedService(ServiceReference, Object, int) removedService} to unget\n \t * the service.\n \t * \n \t * @param reference The reference to the service being added to this\n \t *        {@code ServiceTracker}.\n \t * @return The service object to be tracked for the service added to this\n \t *         {@code ServiceTracker}.\n-\t * @see ServiceTrackerCustomizer#addingService(ServiceReference)\n+\t * @see ServiceTrackerCustomizer#addingService(org.osgi.framework.ServiceReference, int)\n \t */\n-\tpublic T addingService(ServiceReference<S> reference) {\n+\tpublic T addingService(ServiceReference<S> reference, int trackingCount) {\n \t\tT result = (T) context.getService(reference);\n \t\treturn result;\n \t}\n@@ -467,9 +474,9 @@ public T addingService(ServiceReference<S> reference) {\n \t * \n \t * @param reference The reference to modified service.\n \t * @param service The service object for the modified service.\n-\t * @see ServiceTrackerCustomizer#modifiedService(ServiceReference, Object)\n+\t * @see ServiceTrackerCustomizer#modifiedService(org.osgi.framework.ServiceReference, Object, int)\n \t */\n-\tpublic void modifiedService(ServiceReference<S> reference, T service) {\n+\tpublic void modifiedService(ServiceReference<S> reference, T service, int trackingCount) {\n \t\t/* do nothing */\n \t}\n \n@@ -487,14 +494,14 @@ public void modifiedService(ServiceReference<S> reference, T service) {\n \t * passing the specified {@code ServiceReference}.\n \t * <p>\n \t * This method can be overridden in a subclass. If the default\n-\t * implementation of {@link #addingService(ServiceReference) addingService}\n+\t * implementation of {@link #addingService(ServiceReference, int) addingService}\n \t * method was used, this method must unget the service.\n \t * \n \t * @param reference The reference to removed service.\n \t * @param service The service object for the removed service.\n-\t * @see ServiceTrackerCustomizer#removedService(ServiceReference, Object)\n+\t * @see ServiceTrackerCustomizer#removedService(org.osgi.framework.ServiceReference, Object, int)\n \t */\n-\tpublic void removedService(ServiceReference<S> reference, T service) {\n+\tpublic void removedService(ServiceReference<S> reference, T service, int trackingCount) {\n \t\tcontext.ungetService(reference);\n \t}\n \n@@ -818,8 +825,9 @@ void modified() {\n \t *         the returned map is empty.\n \t * @since 1.5\n      * @param activate\n-\t */\n-\tpublic SortedMap<ServiceReference<S>, T> getTracked( Boolean activate ) {\n+     * @param trackingCount\n+     */\n+\tpublic SortedMap<ServiceReference<S>, T> getTracked( Boolean activate, AtomicInteger trackingCount ) {\n \t\tSortedMap<ServiceReference<S>, T> map = new TreeMap<ServiceReference<S>, T>(Collections.reverseOrder());\n \t\tfinal Tracked t = tracked();\n \t\tif (t == null) { /* if ServiceTracker is not open */\n@@ -830,6 +838,7 @@ void modified() {\n             {\n                 active = activate;\n             }\n+            trackingCount.set( t.getTrackingCount() );\n             return t.copyEntries(map);\n \t\t}\n \t}\n@@ -1132,7 +1141,7 @@ void track(final S item, final R related) {\n                 trackAdding(item, related);\n             } else {\n                 /* Call customizer outside of synchronized region */\n-                customizerModified(item, related, object);\n+                customizerModified(item, related, object, trackingCount );\n                 /*\n                  * If the customizer throws an unchecked exception, it is safe to\n                  * let it propagate\n@@ -1156,7 +1165,7 @@ private void trackAdding(final S item, final R related) {\n             boolean becameUntracked = false;\n             /* Call customizer outside of synchronized region */\n             try {\n-                object = customizerAdding(item, related);\n+                object = customizerAdding(item, related, trackingCount );\n                 /*\n                  * If the customizer throws an unchecked exception, it will\n                  * propagate after the finally\n@@ -1184,13 +1193,13 @@ private void trackAdding(final S item, final R related) {\n                     System.out.println(\"AbstractTracked.trackAdding[removed]: \" + item); //$NON-NLS-1$\n                 }\n                 /* Call customizer outside of synchronized region */\n-                customizerRemoved(item, related, object);\n+                customizerRemoved(item, related, object, trackingCount );\n                 /*\n                  * If the customizer throws an unchecked exception, it is safe to\n                  * let it propagate\n                  */\n             } else {\n-                customizerAdded( item, related, object );\n+                customizerAdded( item, related, object, trackingCount );\n             }\n         }\n \n@@ -1238,7 +1247,7 @@ void untrack(final S item, final R related) {\n                 System.out.println(\"AbstractTracked.untrack[removed]: \" + item); //$NON-NLS-1$\n             }\n             /* Call customizer outside of synchronized region */\n-            customizerRemoved(item, related, object);\n+            customizerRemoved(item, related, object, trackingCount );\n             /*\n              * If the customizer throws an unchecked exception, it is safe to let it\n              * propagate\n@@ -1277,7 +1286,7 @@ boolean isEmpty() {\n          * @GuardedBy this\n          */\n         T getCustomizedObject(final S item) {\n-            return tracked.get(item);\n+            return tracked.get( item );\n         }\n \n         /**\n@@ -1337,14 +1346,16 @@ int getTrackingCount() {\n          * Call the specific customizer adding method. This method must not be\n          * called while synchronized on this object.\n          *\n+         *\n          * @param item Item to be tracked.\n          * @param related Action related object.\n+         * @param trackingCount\n          * @return Customized object for the tracked item or {@code null} if the\n          *         item is not to be tracked.\n          */\n-        abstract T customizerAdding(final S item, final R related);\n+        abstract T customizerAdding( final S item, final R related, int trackingCount );\n \n-        abstract void customizerAdded(final S item, final R related, final T object);\n+        abstract void customizerAdded( final S item, final R related, final T object, int trackingCount );\n \n         /**\n          * Call the specific customizer modified method. This method must not be\n@@ -1353,8 +1364,9 @@ int getTrackingCount() {\n          * @param item Tracked item.\n          * @param related Action related object.\n          * @param object Customized object for the tracked item.\n+         * @param trackingCount\n          */\n-        abstract void customizerModified(final S item, final R related, final T object);\n+        abstract void customizerModified( final S item, final R related, final T object, int trackingCount );\n \n         /**\n          * Call the specific customizer removed method. This method must not be\n@@ -1363,8 +1375,9 @@ int getTrackingCount() {\n          * @param item Tracked item.\n          * @param related Action related object.\n          * @param object Customized object for the tracked item.\n+         * @param trackingCount\n          */\n-        abstract void customizerRemoved(final S item, final R related, final T object);\n+        abstract void customizerRemoved( final S item, final R related, final T object, int trackingCount );\n     }\n \n \n@@ -1436,41 +1449,45 @@ final void modified() {\n \t\t * Call the specific customizer adding method. This method must not be\n \t\t * called while synchronized on this object.\n \t\t * \n-\t\t * @param item Item to be tracked.\n-\t\t * @param related Action related object.\n-\t\t * @return Customized object for the tracked item or {@code null} if the\n+\t\t *\n+         * @param item Item to be tracked.\n+         * @param related Action related object.\n+         * @param trackingCount\n+         * @return Customized object for the tracked item or {@code null} if the\n \t\t *         item is not to be tracked.\n \t\t */\n-\t\tfinal T customizerAdding(final ServiceReference<S> item, final ServiceEvent related) {\n-\t\t\treturn customizer.addingService( item );\n+\t\tfinal T customizerAdding( final ServiceReference<S> item, final ServiceEvent related, int trackingCount ) {\n+\t\t\treturn customizer.addingService( item, trackingCount );\n \t\t}\n \n-\t\tfinal void customizerAdded(final ServiceReference<S> item, final ServiceEvent related, final T object) {\n-\t\t    customizer.addedService( item, object );\n+\t\tfinal void customizerAdded( final ServiceReference<S> item, final ServiceEvent related, final T object, int trackingCount ) {\n+\t\t    customizer.addedService( item, object, trackingCount );\n \t\t}\n \n \t\t/**\n \t\t * Call the specific customizer modified method. This method must not be\n \t\t * called while synchronized on this object.\n-\t\t * \n-\t\t * @param item Tracked item.\n-\t\t * @param related Action related object.\n-\t\t * @param object Customized object for the tracked item.\n-\t\t */\n-\t\tfinal void customizerModified(final ServiceReference<S> item, final ServiceEvent related, final T object) {\n-\t\t\tcustomizer.modifiedService(item, object);\n+\t\t *\n+         * @param item Tracked item.\n+         * @param related Action related object.\n+         * @param object Customized object for the tracked item.\n+         * @param trackingCount\n+         */\n+\t\tfinal void customizerModified( final ServiceReference<S> item, final ServiceEvent related, final T object, int trackingCount ) {\n+\t\t\tcustomizer.modifiedService( item, object, trackingCount );\n \t\t}\n \n         /**\n \t\t * Call the specific customizer removed method. This method must not be\n \t\t * called while synchronized on this object.\n-\t\t * \n-\t\t * @param item Tracked item.\n-\t\t * @param related Action related object.\n-\t\t * @param object Customized object for the tracked item.\n-\t\t */\n-\t\tfinal void customizerRemoved(final ServiceReference<S> item, final ServiceEvent related, final T object) {\n-\t\t\tcustomizer.removedService(item, object);\n+\t\t *\n+         * @param item Tracked item.\n+         * @param related Action related object.\n+         * @param object Customized object for the tracked item.\n+         * @param trackingCount\n+         */\n+\t\tfinal void customizerRemoved( final ServiceReference<S> item, final ServiceEvent related, final T object, int trackingCount ) {\n+\t\t\tcustomizer.removedService(item, object, trackingCount );\n \t\t}\n \t}\n ",
                "raw_url": "https://github.com/apache/felix/raw/8c13cef5f7522f81cd54c5a0db641be12c49baf8/scr/src/main/java/org/apache/felix/scr/impl/manager/ServiceTracker.java",
                "sha": "555eb36543b5b8bad186cf6d5bfa1beff8a45e79",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/felix/blob/8c13cef5f7522f81cd54c5a0db641be12c49baf8/scr/src/main/java/org/apache/felix/scr/impl/manager/ServiceTrackerCustomizer.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/manager/ServiceTrackerCustomizer.java?ref=8c13cef5f7522f81cd54c5a0db641be12c49baf8",
                "deletions": 15,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/manager/ServiceTrackerCustomizer.java",
                "patch": "@@ -59,38 +59,42 @@\n \t * service object is stored in the {@code ServiceTracker} and is available\n \t * from the {@code getService} and {@code getServices} methods.\n \t * \n-\t * @param reference The reference to the service being added to the\n-\t *        {@code ServiceTracker}.\n-\t * @return The service object to be tracked for the specified referenced\n+\t *\n+     * @param reference The reference to the service being added to the\n+     *        {@code ServiceTracker}.\n+     * @param trackingCount\n+     * @return The service object to be tracked for the specified referenced\n \t *         service or {@code null} if the specified referenced service\n \t *         should not be tracked.\n \t */\n-\tpublic T addingService(ServiceReference<S> reference);\n+\tpublic T addingService( ServiceReference<S> reference, int trackingCount );\n \n-    public void addedService(ServiceReference<S> reference, T service);\n+    public void addedService( ServiceReference<S> reference, T service, int trackingCount );\n \n \t/**\n \t * A service tracked by the {@code ServiceTracker} has been modified.\n \t * \n \t * <p>\n \t * This method is called when a service being tracked by the\n \t * {@code ServiceTracker} has had it properties modified.\n-\t * \n-\t * @param reference The reference to the service that has been modified.\n-\t * @param service The service object for the specified referenced service.\n-\t */\n-\tpublic void modifiedService(ServiceReference<S> reference, T service);\n+\t *\n+     * @param reference The reference to the service that has been modified.\n+     * @param service The service object for the specified referenced service.\n+     * @param trackingCount\n+     */\n+\tpublic void modifiedService( ServiceReference<S> reference, T service, int trackingCount );\n \n \t/**\n \t * A service tracked by the {@code ServiceTracker} has been removed.\n \t * \n \t * <p>\n \t * This method is called after a service is no longer being tracked by the\n \t * {@code ServiceTracker}.\n-\t * \n-\t * @param reference The reference to the service that has been removed.\n-\t * @param service The service object for the specified referenced service.\n-\t */\n-\tpublic void removedService(ServiceReference<S> reference, T service);\n+\t *\n+     * @param reference The reference to the service that has been removed.\n+     * @param service The service object for the specified referenced service.\n+     * @param trackingCount\n+     */\n+\tpublic void removedService( ServiceReference<S> reference, T service, int trackingCount );\n \n }",
                "raw_url": "https://github.com/apache/felix/raw/8c13cef5f7522f81cd54c5a0db641be12c49baf8/scr/src/main/java/org/apache/felix/scr/impl/manager/ServiceTrackerCustomizer.java",
                "sha": "77dff79b914cef13b7c013b880417f67a6b7909f",
                "status": "modified"
            }
        ],
        "message": "FELIX-3729 Fix NPE in isSatisfied.  Start setting up using trackingCount to track how much work is done when deactivating a component instance\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1424309 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/0edce2ff63dc01bbde4f0480e027b1e8fabd4413",
        "patched_files": [
            "ServiceTracker.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ServiceTrackerTest.java"
        ]
    },
    "felix_8e97091": {
        "bug_id": "felix_8e97091",
        "commit": "https://github.com/apache/felix/commit/8e97091f81b13e5a744b275222665a8d02e8bee5",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/felix/blob/8e97091f81b13e5a744b275222665a8d02e8bee5/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java?ref=8e97091f81b13e5a744b275222665a8d02e8bee5",
                "deletions": 1,
                "filename": "fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java",
                "patch": "@@ -1236,7 +1236,9 @@ private boolean startBundle(Bundle bundle)\n         // Bundles can only be started transient when the start level of the framework is high\n         // enough. Persistent (i.e. non-transient) starts will simply make the framework start the\n         // bundle when the start level is high enough.\n-        if (!isFragment(bundle) && startBundles\n+        if (startBundles\n+                && bundle.getState() != Bundle.UNINSTALLED\n+                && !isFragment(bundle)\n                 && startLevelSvc.getStartLevel() >= startLevelSvc.getBundleStartLevel(bundle))\n         {\n             try",
                "raw_url": "https://github.com/apache/felix/raw/8e97091f81b13e5a744b275222665a8d02e8bee5/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java",
                "sha": "8600e0e709caff7c76d18b64dfb35c3690a6ce6d",
                "status": "modified"
            }
        ],
        "message": "[FELIX-3493] PackageAdminImpl throws NPE - File Install does not handle a bundle uninstall gracefully\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1348898 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/0e4d764291be43fe29e1fb88276069aa5952ede3",
        "patched_files": [
            "DirectoryWatcher.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "DirectoryWatcherTest.java"
        ]
    },
    "felix_90e8b8a": {
        "bug_id": "felix_90e8b8a",
        "commit": "https://github.com/apache/felix/commit/90e8b8a3ed621346cc6a626eb6e91066b7b4d060",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/felix/blob/90e8b8a3ed621346cc6a626eb6e91066b7b4d060/metatype/src/main/java/org/apache/felix/metatype/Attribute.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/metatype/src/main/java/org/apache/felix/metatype/Attribute.java?ref=90e8b8a3ed621346cc6a626eb6e91066b7b4d060",
                "deletions": 21,
                "filename": "metatype/src/main/java/org/apache/felix/metatype/Attribute.java",
                "patch": "@@ -18,7 +18,6 @@\n  */\n package org.apache.felix.metatype;\n \n-\n /**\n  * The <code>Attribute</code> TODO\n  *\n@@ -30,58 +29,53 @@\n     private String adRef;\n     private String[] content;\n \n-\n     public String getAdRef()\n     {\n         return adRef;\n     }\n \n-\n-    public void setAdRef( String adRef )\n+    public void setAdRef(String adRef)\n     {\n         this.adRef = adRef;\n     }\n \n-\n     public String[] getContent()\n     {\n-        return ( String[] ) content.clone();\n+        // FELIX-4771 - removed the clone as we're already working on a local \n+        // copy and this pattern isn't used in other parts of the API...\n+        return this.content;\n     }\n \n-\n-    public void addContent( String[] added )\n+    public void addContent(String[] added)\n     {\n-        if ( added != null && added.length > 0 )\n+        if (added != null && added.length > 0)\n         {\n-            if ( content == null )\n+            if (content == null)\n             {\n-                content = ( String[] ) added.clone();\n+                content = (String[]) added.clone();\n             }\n             else\n             {\n                 String[] newContent = new String[content.length + added.length];\n-                System.arraycopy( content, 0, newContent, 0, content.length );\n-                System.arraycopy( added, 0, newContent, content.length, added.length );\n+                System.arraycopy(content, 0, newContent, 0, content.length);\n+                System.arraycopy(added, 0, newContent, content.length, added.length);\n                 content = newContent;\n             }\n         }\n     }\n \n-\n-    public void addContent( String content, boolean split )\n+    public void addContent(String content, boolean split)\n     {\n-        if ( content != null )\n+        if (content != null)\n         {\n-            if ( split )\n+            if (split)\n             {\n-                addContent( AD.splitList( content ) );\n+                addContent(AD.splitList(content));\n             }\n             else\n             {\n-                addContent( new String[]\n-                    { content } );\n+                addContent(new String[] { content });\n             }\n         }\n     }\n-\n }",
                "raw_url": "https://github.com/apache/felix/raw/90e8b8a3ed621346cc6a626eb6e91066b7b4d060/metatype/src/main/java/org/apache/felix/metatype/Attribute.java",
                "sha": "a62a91ddd00b0807688ca373b058669c46875690",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/felix/blob/90e8b8a3ed621346cc6a626eb6e91066b7b4d060/metatype/src/test/java/org/apache/felix/metatype/ADTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/metatype/src/test/java/org/apache/felix/metatype/ADTest.java?ref=90e8b8a3ed621346cc6a626eb6e91066b7b4d060",
                "deletions": 0,
                "filename": "metatype/src/test/java/org/apache/felix/metatype/ADTest.java",
                "patch": "@@ -157,6 +157,7 @@ public void testToTypeString()\n         assertEquals(AttributeDefinition.INTEGER, AD.toType(\"Integer\"));\n         assertEquals(AttributeDefinition.BYTE, AD.toType(\"Byte\"));\n         assertEquals(AttributeDefinition.CHARACTER, AD.toType(\"Char\"));\n+        assertEquals(AttributeDefinition.CHARACTER, AD.toType(\"Character\"));\n         assertEquals(AttributeDefinition.BOOLEAN, AD.toType(\"Boolean\"));\n         assertEquals(AttributeDefinition.SHORT, AD.toType(\"Short\"));\n         assertEquals(AttributeDefinition.PASSWORD, AD.toType(\"Password\"));",
                "raw_url": "https://github.com/apache/felix/raw/90e8b8a3ed621346cc6a626eb6e91066b7b4d060/metatype/src/test/java/org/apache/felix/metatype/ADTest.java",
                "sha": "b271c82b49bbe9fa1853a45ac3f1ed1624cff25e",
                "status": "modified"
            },
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/felix/blob/90e8b8a3ed621346cc6a626eb6e91066b7b4d060/metatype/src/test/java/org/apache/felix/metatype/AttributeTest.java",
                "changes": 63,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/metatype/src/test/java/org/apache/felix/metatype/AttributeTest.java?ref=90e8b8a3ed621346cc6a626eb6e91066b7b4d060",
                "deletions": 0,
                "filename": "metatype/src/test/java/org/apache/felix/metatype/AttributeTest.java",
                "patch": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.felix.metatype;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author <a href=\"mailto:dev@felix.apache.org\">Felix Project Team</a>\n+ */\n+public class AttributeTest extends TestCase\n+{\n+\n+    /**\n+     * FELIX-4771 - attributes can be content-less.\n+     */\n+    public void testAttributeWithoutContentOk() throws Exception\n+    {\n+        Attribute attr = new Attribute();\n+\n+        assertNull(attr.getContent());\n+\n+        // Null-values are ignored, so attribute remains empty...\n+        attr.addContent(null, false);\n+\n+        assertNull(attr.getContent());\n+    }\n+\n+    /**\n+     * FELIX-4771 - attributes can be content-less.\n+     */\n+    public void testAttributeWithNullContentOk() throws Exception\n+    {\n+        Attribute attr = new Attribute();\n+        // Null-values are ignored, so attribute remains empty...\n+        attr.addContent(null, false);\n+\n+        assertNull(attr.getContent());\n+    }\n+\n+    public void testAttributeWithContentOk() throws Exception\n+    {\n+        Attribute attr = new Attribute();\n+        attr.addContent(\"foo\", false /* split */);\n+\n+        assertNotNull(attr.getContent());\n+    }\n+}",
                "raw_url": "https://github.com/apache/felix/raw/90e8b8a3ed621346cc6a626eb6e91066b7b4d060/metatype/src/test/java/org/apache/felix/metatype/AttributeTest.java",
                "sha": "1ff534959a3d0d4dfa2120f9d996dabd1a09077d",
                "status": "added"
            }
        ],
        "message": "FELIX-4771 - Avoid NPE in Attribute#getContent:\n\n- no longer clone the content field, as it is already a local\n  clone, and this pattern isn't used in the other parts of the\n  API (such as AD);\n- added small test case to verify this behaviour.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1653464 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/4aab0dbe5a99812374aa5328ed93685d5efbd116",
        "patched_files": [
            "Attribute.java",
            "AD.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ADTest.java",
            "AttributeTest.java"
        ]
    },
    "felix_9a12575": {
        "bug_id": "felix_9a12575",
        "commit": "https://github.com/apache/felix/commit/9a1257521a770eb34623595bd8c43066d3797fb8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/felix/blob/9a1257521a770eb34623595bd8c43066d3797fb8/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java?ref=9a1257521a770eb34623595bd8c43066d3797fb8",
                "deletions": 1,
                "filename": "fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java",
                "patch": "@@ -127,7 +127,7 @@ public void doConfigurationEvent(ConfigurationEvent configurationEvent)\n                                             configurationEvent.getPid(),\n                                             \"?\");\n                 Dictionary dict = config.getProperties();\n-                String fileName = (String) dict.get( DirectoryWatcher.FILENAME );\n+                String fileName = dict != null ? (String) dict.get( DirectoryWatcher.FILENAME ) : null;\n                 File file = fileName != null ? fromConfigKey(fileName) : null;\n                 if( file != null && file.isFile() ) {\n                     TypedProperties props = new TypedProperties( bundleSubstitution() );",
                "raw_url": "https://github.com/apache/felix/raw/9a1257521a770eb34623595bd8c43066d3797fb8/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java",
                "sha": "0573e1e850ab84cee756583c02f8613984d874d7",
                "status": "modified"
            }
        ],
        "message": "[FELIX-5125] Possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1812985 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/c4eff57fa2c87b50b479afd6f0a23060700bf2af",
        "patched_files": [
            "ConfigInstaller.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ConfigInstallerTest.java"
        ]
    },
    "felix_a416274": {
        "bug_id": "felix_a416274",
        "commit": "https://github.com/apache/felix/commit/a41627481bdd4526a79f76be91a8c97c2b860497",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/felix/blob/a41627481bdd4526a79f76be91a8c97c2b860497/converter/converter/src/main/java/org/osgi/util/converter/ConvertingImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/converter/converter/src/main/java/org/osgi/util/converter/ConvertingImpl.java?ref=a41627481bdd4526a79f76be91a8c97c2b860497",
                "deletions": 2,
                "filename": "converter/converter/src/main/java/org/osgi/util/converter/ConvertingImpl.java",
                "patch": "@@ -265,9 +265,9 @@ private Object convertMapEntryToSingleValue(Class< ? > cls, InternalConverter c)\n \t\t\treturn c.convert(entry.getKey()).to(cls);\n \t\t} else if (cls.equals(valueCls)) {\n \t\t\treturn c.convert(entry.getValue()).to(cls);\n-\t\t} else if (cls.isAssignableFrom(keyCls)) {\n+\t\t} else if (keyCls != null && cls.isAssignableFrom(keyCls)) {\n \t\t\treturn c.convert(entry.getKey()).to(cls);\n-\t\t} else if (cls.isAssignableFrom(valueCls)) {\n+\t\t} else if (valueCls != null && cls.isAssignableFrom(valueCls)) {\n \t\t\treturn c.convert(entry.getValue()).to(cls);\n \t\t} else if (entry.getKey() instanceof String) {\n \t\t\treturn c.convert(entry.getKey()).to(cls);",
                "raw_url": "https://github.com/apache/felix/raw/a41627481bdd4526a79f76be91a8c97c2b860497/converter/converter/src/main/java/org/osgi/util/converter/ConvertingImpl.java",
                "sha": "71b8aad2811595b7ba978293bdd2210c6721822f",
                "status": "modified"
            },
            {
                "additions": 72,
                "blob_url": "https://github.com/apache/felix/blob/a41627481bdd4526a79f76be91a8c97c2b860497/converter/converter/src/test/java/org/osgi/util/converter/ConverterMapTest.java",
                "changes": 72,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/converter/converter/src/test/java/org/osgi/util/converter/ConverterMapTest.java?ref=a41627481bdd4526a79f76be91a8c97c2b860497",
                "deletions": 0,
                "filename": "converter/converter/src/test/java/org/osgi/util/converter/ConverterMapTest.java",
                "patch": "@@ -505,6 +505,78 @@ public void testMapEntry4() {\n         assertEquals(\"111\", converter.convert(e1).to(Bar.class).value);\n     }\n \n+    @Test\n+    public void testMapEntry5() {\n+    \t// Key is null, value is the right type\n+    \tMap<Short, Integer> m1 = Collections.singletonMap(null, 5);\n+    \tMap.Entry<Short, Integer> e1 = getMapEntry(m1);\n+    \t\n+    \tassertEquals((Integer) 5, converter.convert(e1).to(Integer.class));\n+    }\n+\n+    @Test\n+    public void testMapEntry6() {\n+    \t// Value is null, key is the right type\n+    \tMap<Short, Integer> m1 = Collections.singletonMap((short) 4, null);\n+    \tMap.Entry<Short, Integer> e1 = getMapEntry(m1);\n+    \t\n+    \tassertEquals(4, converter.convert(e1).to(Short.class).intValue());\n+    }\n+\n+    @Test\n+    public void testMapEntry7() {\n+    \t// Key is null, value is assignable to the right type\n+    \tMap<Short, Integer> m1 = Collections.singletonMap(null, 5);\n+    \tMap.Entry<Short, Integer> e1 = getMapEntry(m1);\n+    \t\n+    \tassertEquals((Integer) 5, converter.convert(e1).to(Number.class));\n+    }\n+    \n+    @Test\n+    public void testMapEntry8() {\n+    \t// Value is null, key is assignable to the right type\n+    \tMap<Short, Integer> m1 = Collections.singletonMap((short) 4, null);\n+    \tMap.Entry<Short, Integer> e1 = getMapEntry(m1);\n+    \t\n+    \tassertEquals(4, converter.convert(e1).to(Number.class).intValue());\n+    }\n+\n+    @Test\n+    public void testMapEntry9() {\n+    \t// Key is null, value is a String \n+    \tMap<Short, String> m1 = Collections.singletonMap(null, \"5\");\n+    \tMap.Entry<Short, String> e1 = getMapEntry(m1);\n+    \t\n+    \tassertEquals((Integer) 5, converter.convert(e1).to(Integer.class));\n+    }\n+    \n+    @Test\n+    public void testMapEntry10() {\n+    \t// Value is null, key is a String\n+    \tMap<String, Integer> m1 = Collections.singletonMap(\"4\", null);\n+    \tMap.Entry<String, Integer> e1 = getMapEntry(m1);\n+    \t\n+    \tassertEquals((Integer) 4, converter.convert(e1).to(Integer.class));\n+    }\n+\n+    @Test\n+    public void testMapEntry11() {\n+    \t// Key is null, value is \"wrong\" type \n+    \tMap<Short, Integer> m1 = Collections.singletonMap(null, 5);\n+    \tMap.Entry<Short, Integer> e1 = getMapEntry(m1);\n+    \t\n+    \tassertNull(converter.convert(e1).to(Long.class));\n+    }\n+    \n+    @Test\n+    public void testMapEntry12() {\n+    \t// Key is null, value is null\n+    \tMap<String, Integer> m1 = Collections.singletonMap(null, null);\n+    \tMap.Entry<String, Integer> e1 = getMapEntry(m1);\n+    \t\n+    \tassertNull(converter.convert(e1).to(Integer.class));\n+    }\n+\n     @Test\n     public void testDictionaryToAnnotation() {\n         Dictionary<String, Object> dict = new TestDictionary<>();",
                "raw_url": "https://github.com/apache/felix/raw/a41627481bdd4526a79f76be91a8c97c2b860497/converter/converter/src/test/java/org/osgi/util/converter/ConverterMapTest.java",
                "sha": "069e54787a8bdb4e6d43c1fdf3afaf6a056bd0d7",
                "status": "modified"
            }
        ],
        "message": "[converter] Fix for FELIX-6141 - Avoid NPE when Maps have null keys or values\n\nSigned-off-by: Tim Ward <timothyjward@apache.org>\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1860547 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/b4267abd8f65f266acc58f648c5246c30b4f6990",
        "patched_files": [
            "ConvertingImpl.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ConverterMapTest.java"
        ]
    },
    "felix_a5e9fde": {
        "bug_id": "felix_a5e9fde",
        "commit": "https://github.com/apache/felix/commit/a5e9fdeab9c7f9e13aba70f31f960793737c290b",
        "file": [
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/felix/blob/a5e9fdeab9c7f9e13aba70f31f960793737c290b/karaf/itests/src/test/java/org/apache/felix/karaf/shell/itests/AbstractIntegrationTest.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/karaf/itests/src/test/java/org/apache/felix/karaf/shell/itests/AbstractIntegrationTest.java?ref=a5e9fdeab9c7f9e13aba70f31f960793737c290b",
                "deletions": 6,
                "filename": "karaf/itests/src/test/java/org/apache/felix/karaf/shell/itests/AbstractIntegrationTest.java",
                "patch": "@@ -16,7 +16,11 @@\n  */\n package org.apache.felix.karaf.shell.itests;\n \n+import java.util.Collection;\n import java.util.Dictionary;\n+import java.util.Enumeration;\n+import java.util.LinkedList;\n+import java.util.List;\n \n import org.ops4j.pax.exam.CoreOptions;\n import org.ops4j.pax.exam.Inject;\n@@ -65,15 +69,14 @@\n             // This is buggy, as the service reference may change i think\n             Object svc = type.cast(tracker.waitForService(timeout));\n             if (svc == null) {\n-\n                 Dictionary dic = bundleContext.getBundle().getHeaders();\n-                System.err.println(\"Test bundle headers: \" + dic);\n-                ServiceReference[] refs = bundleContext.getAllServiceReferences(null, null);\n-                for (ServiceReference ref : refs) {\n+                System.err.println(\"Test bundle headers: \" + explode(dic));\n+\n+                for (ServiceReference ref : asCollection(bundleContext.getAllServiceReferences(null, null))) {\n                     System.err.println(\"ServiceReference: \" + ref);\n                 }\n-                refs = bundleContext.getAllServiceReferences(null, flt);\n-                for (ServiceReference ref : refs) {\n+\n+                for (ServiceReference ref : asCollection(bundleContext.getAllServiceReferences(null, flt))) {\n                     System.err.println(\"Filtered ServiceReference: \" + ref);\n                 }\n \n@@ -105,4 +108,33 @@ public static MavenArtifactProvisionOption mavenBundle(String groupId, String ar\n         return CoreOptions.mavenBundle().groupId(groupId).artifactId(artifactId).versionAsInProject();\n     }\n \n+    /*\n+     * Explode the dictionary into a ,-delimited list of key=value pairs\n+     */\n+    private static String explode(Dictionary dictionary) {\n+        Enumeration keys = dictionary.keys();\n+        StringBuffer result = new StringBuffer();\n+        while (keys.hasMoreElements()) {\n+            Object key = keys.nextElement();\n+            result.append(String.format(\"%s=%s\", key, dictionary.get(key)));\n+            if (keys.hasMoreElements()) {\n+                result.append(\", \");\n+            }\n+        }\n+        return result.toString();\n+    }\n+\n+    /*\n+     * Provides an iterable collection of references, even if the original array is null\n+     */\n+    private static final Collection<ServiceReference> asCollection(ServiceReference[] references) {\n+        List<ServiceReference> result = new LinkedList<ServiceReference>();\n+        if (references != null) {\n+            for (ServiceReference reference : references) {\n+                result.add(reference);\n+            }\n+        }\n+        return result;\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/felix/raw/a5e9fdeab9c7f9e13aba70f31f960793737c290b/karaf/itests/src/test/java/org/apache/felix/karaf/shell/itests/AbstractIntegrationTest.java",
                "sha": "950a6609d5518a13431a2a305d91d7d3c4f9760b",
                "status": "modified"
            }
        ],
        "message": "FELIX-1932: Ensure that a missing reference in an itest gets logged without throwing NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@888961 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/577300b8d19fe80d82087c6e3512420f62e4bca6",
        "patched_files": [],
        "repo": "felix",
        "unit_tests": [
            "AbstractIntegrationTest.java"
        ]
    },
    "felix_a99b3e8": {
        "bug_id": "felix_a99b3e8",
        "commit": "https://github.com/apache/felix/commit/a99b3e84c3944f1dee2864a06b07a1699442cfb1",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/felix/blob/a99b3e84c3944f1dee2864a06b07a1699442cfb1/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java?ref=a99b3e84c3944f1dee2864a06b07a1699442cfb1",
                "deletions": 13,
                "filename": "fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java",
                "patch": "@@ -18,6 +18,18 @@\n  */\n package org.apache.felix.fileinstall.internal;\n \n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Dictionary;\n+import java.util.Enumeration;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Properties;\n+\n import org.apache.felix.cm.file.ConfigurationHandler;\n import org.apache.felix.fileinstall.ArtifactInstaller;\n import org.apache.felix.fileinstall.internal.Util.Logger;\n@@ -31,18 +43,6 @@\n import org.osgi.service.cm.ConfigurationEvent;\n import org.osgi.service.cm.ConfigurationListener;\n \n-import java.io.BufferedInputStream;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.util.Dictionary;\n-import java.util.Enumeration;\n-import java.util.Hashtable;\n-import java.util.Map;\n-import java.util.Properties;\n-\n /**\n  * ArtifactInstaller for configurations.\n  * TODO: This service lifecycle should be bound to the ConfigurationAdmin service lifecycle.\n@@ -212,7 +212,8 @@ else if ( f.getName().endsWith( \".config\" ) )\n         String pid[] = parsePid(f.getName());\n         Configuration config = getConfiguration(f.getAbsolutePath(), pid[0], pid[1]);\n \n-        Hashtable old = new Hashtable(new DictionaryAsMap(config.getProperties()));\n+        Dictionary props = config.getProperties();\n+        Hashtable old = props != null ? new Hashtable(new DictionaryAsMap(props)) : new Hashtable();\n         old.remove( DirectoryWatcher.FILENAME );\n         old.remove( Constants.SERVICE_PID );\n         old.remove( ConfigurationAdmin.SERVICE_FACTORYPID );",
                "raw_url": "https://github.com/apache/felix/raw/a99b3e84c3944f1dee2864a06b07a1699442cfb1/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java",
                "sha": "4e2114cc07c814faa6a6cafc56b6edbe6798217a",
                "status": "modified"
            }
        ],
        "message": "[FELIX-2756] NPE when loading configurations\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1054550 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/e5ebb4f48dd278df9dbe03f8914fee4dfb77394f",
        "patched_files": [
            "ConfigInstaller.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ConfigInstallerTest.java"
        ]
    },
    "felix_abbb67f": {
        "bug_id": "felix_abbb67f",
        "commit": "https://github.com/apache/felix/commit/abbb67fe1e0d8ef097c8829ceb2361ff0d7c523f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/felix/blob/abbb67fe1e0d8ef097c8829ceb2361ff0d7c523f/ipojo/core/src/main/java/org/apache/felix/ipojo/InstanceManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/ipojo/core/src/main/java/org/apache/felix/ipojo/InstanceManager.java?ref=abbb67fe1e0d8ef097c8829ceb2361ff0d7c523f",
                "deletions": 1,
                "filename": "ipojo/core/src/main/java/org/apache/felix/ipojo/InstanceManager.java",
                "patch": "@@ -1068,7 +1068,7 @@ public void onError(Object pojo, String methodId, Throwable error) {\n     private Method getMethodById(String methodId) {\n         // Not necessary synchronized as recomputing the methodID will give the same Method twice.\n         Method method = (Method) m_methods.get(methodId);\n-        if (method == null) {\n+        if (method == null  && m_clazz != null) {\n             Method[] mets = m_clazz.getDeclaredMethods();\n             for (int i = 0; i < mets.length; i++) {\n                 // Check if the method was not already computed. If not, compute the Id and check.",
                "raw_url": "https://github.com/apache/felix/raw/abbb67fe1e0d8ef097c8829ceb2361ff0d7c523f/ipojo/core/src/main/java/org/apache/felix/ipojo/InstanceManager.java",
                "sha": "4910516135cb4f4c7314bb468dc076a44631af31",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/felix/blob/abbb67fe1e0d8ef097c8829ceb2361ff0d7c523f/ipojo/core/src/main/java/org/apache/felix/ipojo/handlers/dependency/Dependency.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/ipojo/core/src/main/java/org/apache/felix/ipojo/handlers/dependency/Dependency.java?ref=abbb67fe1e0d8ef097c8829ceb2361ff0d7c523f",
                "deletions": 9,
                "filename": "ipojo/core/src/main/java/org/apache/felix/ipojo/handlers/dependency/Dependency.java",
                "patch": "@@ -397,14 +397,20 @@ public void start() {\n             if (isAggregate()) {\n                 m_proxyObject = new ServiceCollection(this);\n             } else {\n-                String type = getHandler().getInstanceManager().getContext().getProperty(DependencyHandler.PROXY_TYPE_PROPERTY);\n-                if (type == null || type.equals(DependencyHandler.SMART_PROXY)) {\n-                    SmartProxyFactory proxyFactory = new SmartProxyFactory(this.getClass().getClassLoader());\n-                    m_proxyObject = proxyFactory.getProxy(getSpecification(), this);\n-                } else {\n-                    DynamicProxyFactory proxyFactory = new DynamicProxyFactory();\n-                    m_proxyObject = proxyFactory.getProxy(getSpecification());\n-                }\n+            \t// Can we really proxy ? We can proxy only interfaces.\n+            \tif (getSpecification().isInterface()) {\n+\t                String type = getHandler().getInstanceManager().getContext().getProperty(DependencyHandler.PROXY_TYPE_PROPERTY);\n+\t                if (type == null || type.equals(DependencyHandler.SMART_PROXY)) {\n+\t                    SmartProxyFactory proxyFactory = new SmartProxyFactory(this.getClass().getClassLoader());\n+\t                    m_proxyObject = proxyFactory.getProxy(getSpecification(), this);\n+\t                } else {\n+\t                    DynamicProxyFactory proxyFactory = new DynamicProxyFactory();\n+\t                    m_proxyObject = proxyFactory.getProxy(getSpecification());\n+\t                }\n+            \t} else {\n+            \t\tm_handler.warn(\"Cannot create a proxy for a service dependency which is not an interface \" +\n+            \t\t\t\t\"- disabling proxy for \" + getId());\n+            \t}\n             }\n         }\n \n@@ -868,7 +874,12 @@ public SmartProxyFactory(ClassLoader parent) {\n          */\n         protected Class getProxyClass(Class clazz) {\n             byte[] clz = ProxyGenerator.dumpProxy(clazz); // Generate the proxy.\n-            return defineClass(clazz.getName() + \"$$Proxy\", clz, 0, clz.length);\n+        \t// Turn around the VM changes (FELIX-2716) about java.* classes.\n+            String cn = clazz.getName();\n+            if (cn.startsWith(\"java.\")) {\n+            \tcn = \"$\" + cn;\n+            }\n+            return defineClass(cn + \"$$Proxy\", clz, 0, clz.length);\n         }\n \n         /**",
                "raw_url": "https://github.com/apache/felix/raw/abbb67fe1e0d8ef097c8829ceb2361ff0d7c523f/ipojo/core/src/main/java/org/apache/felix/ipojo/handlers/dependency/Dependency.java",
                "sha": "3ffe9053db56032a20394a75304aa294075d67c1",
                "status": "modified"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/felix/blob/abbb67fe1e0d8ef097c8829ceb2361ff0d7c523f/ipojo/core/src/main/java/org/apache/felix/ipojo/handlers/dependency/ProxyGenerator.java",
                "changes": 66,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/ipojo/core/src/main/java/org/apache/felix/ipojo/handlers/dependency/ProxyGenerator.java?ref=abbb67fe1e0d8ef097c8829ceb2361ff0d7c523f",
                "deletions": 26,
                "filename": "ipojo/core/src/main/java/org/apache/felix/ipojo/handlers/dependency/ProxyGenerator.java",
                "patch": "@@ -1,4 +1,4 @@\n-/* \n+/*\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n@@ -34,26 +34,26 @@\n  * @author <a href=\"mailto:dev@felix.apache.org\">Felix Project Team</a>\n  */\n public class ProxyGenerator implements Opcodes {\n-    \n+\n     /**\n-     * The dependency name. \n+     * The dependency name.\n      */\n     private static final String DEPENDENCY = \"m_dependency\";\n-    \n+\n     /**\n      * The dependency descriptor.\n      */\n     private static final String DEPENDENCY_DESC = Type.getDescriptor(Dependency.class);\n-    \n+\n     /**\n-     * Dependency internal class name. \n+     * Dependency internal class name.\n      */\n     private static final String DEPENDENCY_INTERNAL_NAME = \"org/apache/felix/ipojo/handlers/dependency/Dependency\";\n-    \n+\n     /**\n-     * Gets the internal names of the given class objects. \n+     * Gets the internal names of the given class objects.\n      * @param classes the classes\n-     * @return the array containing internal names of the given class array. \n+     * @return the array containing internal names of the given class array.\n      */\n     private static String[] getInternalClassNames(Class[] classes) {\n         final String[] names = new String[classes.length];\n@@ -62,7 +62,7 @@\n         }\n         return names;\n     }\n-    \n+\n     /**\n      * Generates a proxy class.\n      * @param spec the proxied service specification\n@@ -71,25 +71,39 @@\n     public static byte[] dumpProxy(Class spec) {\n         ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n         String internalClassName = Type.getInternalName(spec); // Specification class internal name.\n-        String[] itfs = new String[] {internalClassName};  // Implemented interface.\n+        String[] itfs = new String[0];\n+        String parent = \"java/lang/Object\";\n+        if (spec.isInterface()) {\n+        \titfs = new String[] {internalClassName};  // Implemented interface.\n+        } else {\n+        \tparent = internalClassName;\n+        }\n         String className = internalClassName + \"$$Proxy\"; // Unique name.\n+\n+        // Turn around the VM changes (FELIX-2716) about java.* classes.\n+        if (className.startsWith(\"java/\")) {\n+        \tclassName = \"$\" + className;\n+        }\n+\n         Method[] methods = spec.getMethods(); // Method to delegate\n-        \n-        cw.visit(Opcodes.V1_3, Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL, className, null, \"java/lang/Object\", itfs);\n+\n+        cw.visit(Opcodes.V1_3, Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL, className, null, parent, itfs);\n         addDependencyField(cw);\n-        generateConstructor(cw, className);\n-        \n+\n+        // We try to call super() on the parent, however this should not be used as proxing does work only for interface.\n+        generateConstructor(cw, className, parent);\n+\n         // For each method, create the delegator code.\n         for (int i = 0; i < methods.length; i++) {\n             if ((methods[i].getModifiers() & (Modifier.STATIC | Modifier.FINAL)) == 0) {\n                 generateDelegator(cw, methods[i], className, internalClassName);\n             }\n-        }        \n-        \n+        }\n+\n         cw.visitEnd();\n-        \n+\n         return cw.toByteArray();\n-        \n+\n     }\n \n     /**\n@@ -121,10 +135,10 @@ private static void generateDelegator(ClassWriter cw, Method method,\n         mv.visitFieldInsn(GETFIELD, className, DEPENDENCY, DEPENDENCY_DESC);  // The dependency is on the stack.\n         mv.visitMethodInsn(INVOKEVIRTUAL, DEPENDENCY_INTERNAL_NAME, \"getService\", // Call getService\n                 \"()Ljava/lang/Object;\"); // The service object is on the stack.\n-        int varSvc = freeRoom; \n+        int varSvc = freeRoom;\n         freeRoom = freeRoom + 1; // Object Reference.\n         mv.visitVarInsn(ASTORE, varSvc); // Store the service object.\n-        \n+\n         Label notNull = new Label();\n         Label isNull = new Label();\n         mv.visitVarInsn(ALOAD, varSvc); // Load the service\n@@ -137,16 +151,16 @@ private static void generateDelegator(ClassWriter cw, Method method,\n         mv.visitMethodInsn(INVOKESPECIAL, \"java/lang/RuntimeException\", \"<init>\", \"(Ljava/lang/String;)V\");\n         mv.visitInsn(ATHROW);\n         // End of the null branch\n-        \n+\n         // Not null, go one the execution\n         mv.visitLabel(notNull);\n-                \n+\n         // Invoke the method on the service object.\n         mv.visitVarInsn(ALOAD, varSvc);\n         // Push argument on the stack.\n         int i = 1; // Arguments. (non static method)\n         for (int t = 0; t < types.length; t++) {\n-            mv.visitVarInsn(types[t].getOpcode(ILOAD), i); \n+            mv.visitVarInsn(types[t].getOpcode(ILOAD), i);\n             i = i + types[t].getSize();\n         }\n         // Invocation\n@@ -171,13 +185,13 @@ private static void generateDelegator(ClassWriter cw, Method method,\n      * @param cw the class writer\n      * @param className the generated class name.\n      */\n-    private static void generateConstructor(ClassWriter cw, String className) {\n+    private static void generateConstructor(ClassWriter cw, String className, String parent) {\n         MethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC, \"<init>\", '(' + DEPENDENCY_DESC + \")V\", null, null);\n         mv.visitCode();\n \n         mv.visitVarInsn(ALOAD, 0); // Load this\n         mv.visitInsn(DUP); // Dup\n-        mv.visitMethodInsn(INVOKESPECIAL, \"java/lang/Object\", \"<init>\", \"()V\"); // Call  super\n+        mv.visitMethodInsn(INVOKESPECIAL, parent, \"<init>\", \"()V\"); // Call  super\n         mv.visitVarInsn(ALOAD, 1); // Load the argument\n         mv.visitFieldInsn(PUTFIELD, className, DEPENDENCY, DEPENDENCY_DESC); // Assign the dependency field\n         mv.visitInsn(RETURN); // Return void",
                "raw_url": "https://github.com/apache/felix/raw/abbb67fe1e0d8ef097c8829ceb2361ff0d7c523f/ipojo/core/src/main/java/org/apache/felix/ipojo/handlers/dependency/ProxyGenerator.java",
                "sha": "1dd2cf38351fca17494ba171a894ca130f845049",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/felix/blob/abbb67fe1e0d8ef097c8829ceb2361ff0d7c523f/ipojo/core/src/main/java/org/apache/felix/ipojo/util/Logger.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/ipojo/core/src/main/java/org/apache/felix/ipojo/util/Logger.java?ref=abbb67fe1e0d8ef097c8829ceb2361ff0d7c523f",
                "deletions": 10,
                "filename": "ipojo/core/src/main/java/org/apache/felix/ipojo/util/Logger.java",
                "patch": "@@ -182,41 +182,46 @@ private void dispatch(int level, String msg) {\n         }\n \n         String message = null;\n+        String name = m_name;\n+        if (name == null) {\n+        \tname = \"\";\n+        }\n+\n         switch (level) {\n             case DEBUG:\n-                message = \"[DEBUG] \" + m_name + \" : \" + msg;\n+                message = \"[DEBUG] \" + name + \" : \" + msg;\n                 if (log != null) {\n                     log.log(LogService.LOG_DEBUG, message);\n                 } else {\n                     System.err.println(message);\n                 }\n                 break;\n             case ERROR:\n-                message = \"[ERROR] \" + m_name + \" : \" + msg;\n+                message = \"[ERROR] \" + name + \" : \" + msg;\n                 if (log != null) {\n                     log.log(LogService.LOG_ERROR, message);\n                 } else {\n                     System.err.println(message);\n                 }\n                 break;\n             case INFO:\n-                message = \"[INFO] \" + m_name + \" : \" + msg;\n+                message = \"[INFO] \" + name + \" : \" + msg;\n                 if (log != null) {\n                     log.log(LogService.LOG_INFO, message);\n                 } else {\n                     System.err.println(message);\n                 }\n                 break;\n             case WARNING:\n-                message = \"[WARNING] \" + m_name + \" : \" + msg;\n+                message = \"[WARNING] \" + name + \" : \" + msg;\n                 if (log != null) {\n                     log.log(LogService.LOG_WARNING, message);\n                 } else {\n                     System.err.println(message);\n                 }\n                 break;\n             default:\n-                message = \"[UNKNOWN] \" + m_name + \" : \" + msg;\n+                message = \"[UNKNOWN] \" + name + \" : \" + msg;\n                 System.err.println(message);\n                 break;\n         }\n@@ -251,9 +256,14 @@ private void dispatch(int level, String msg, Throwable exception) {\n         }\n \n         String message = null;\n+        String name = m_name;\n+        if (name == null) {\n+        \tname = \"\";\n+        }\n+\n         switch (level) {\n             case DEBUG:\n-                message = \"[DEBUG] \" + m_name + \" : \" + msg;\n+                message = \"[DEBUG] \" + name + \" : \" + msg;\n                 if (log != null) {\n                     log.log(LogService.LOG_DEBUG, message, exception);\n                 } else {\n@@ -262,7 +272,7 @@ private void dispatch(int level, String msg, Throwable exception) {\n                 }\n                 break;\n             case ERROR:\n-                message = \"[ERROR] \" + m_name + \" : \" + msg;\n+                message = \"[ERROR] \" + name + \" : \" + msg;\n                 if (log != null) {\n                     log.log(LogService.LOG_ERROR, message, exception);\n                 } else {\n@@ -271,7 +281,7 @@ private void dispatch(int level, String msg, Throwable exception) {\n                 }\n                 break;\n             case INFO:\n-                message = \"[INFO] \" + m_name + \" : \" + msg;\n+                message = \"[INFO] \" + name + \" : \" + msg;\n                 if (log != null) {\n                     log.log(LogService.LOG_INFO, message, exception);\n                 } else {\n@@ -280,7 +290,7 @@ private void dispatch(int level, String msg, Throwable exception) {\n                 }\n                 break;\n             case WARNING:\n-                message = \"[WARNING] \" + m_name + \" : \" + msg;\n+                message = \"[WARNING] \" + name + \" : \" + msg;\n                 if (log != null) {\n                     log.log(LogService.LOG_WARNING, message, exception);\n                 } else {\n@@ -289,7 +299,7 @@ private void dispatch(int level, String msg, Throwable exception) {\n                 }\n                 break;\n             default:\n-                message = \"[UNKNOWN] \" + m_name + \" : \" + msg;\n+                message = \"[UNKNOWN] \" + name + \" : \" + msg;\n                 System.err.println(message);\n                 exception.printStackTrace();\n                 break;",
                "raw_url": "https://github.com/apache/felix/raw/abbb67fe1e0d8ef097c8829ceb2361ff0d7c523f/ipojo/core/src/main/java/org/apache/felix/ipojo/util/Logger.java",
                "sha": "387ff75494a0926331d2e30da484092432d78c51",
                "status": "modified"
            },
            {
                "additions": 168,
                "blob_url": "https://github.com/apache/felix/blob/abbb67fe1e0d8ef097c8829ceb2361ff0d7c523f/ipojo/core/src/test/java/org/apache/felix/ipojo/handlers/dependency/SmartProxyTest.java",
                "changes": 168,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/ipojo/core/src/test/java/org/apache/felix/ipojo/handlers/dependency/SmartProxyTest.java?ref=abbb67fe1e0d8ef097c8829ceb2361ff0d7c523f",
                "deletions": 0,
                "filename": "ipojo/core/src/test/java/org/apache/felix/ipojo/handlers/dependency/SmartProxyTest.java",
                "patch": "@@ -0,0 +1,168 @@\n+package org.apache.felix.ipojo.handlers.dependency;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.util.Dictionary;\n+import java.util.Enumeration;\n+import java.util.List;\n+\n+import javax.swing.Action;\n+\n+import junit.framework.Assert;\n+import junit.framework.TestCase;\n+\n+import org.apache.felix.ipojo.ComponentFactory;\n+import org.apache.felix.ipojo.InstanceManager;\n+import org.apache.felix.ipojo.util.Logger;\n+import org.mockito.Mockito;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.BundleException;\n+import org.osgi.framework.ServiceReference;\n+\n+public class SmartProxyTest extends TestCase {\n+\n+\tprivate Dependency dependency;\n+\n+\n+\tpublic void setUp() {\n+\t}\n+\n+\n+\t/**\n+\t * Tests if we can proxies classes from java.* package.\n+\t * Indeed, a recent JVM bug fix introduces a bug:\n+\t * <code>\n+\t * [ERROR] test : Cannot create the proxy object\n+\t * java.lang.SecurityException: Prohibited package name: java.awt\n+\t * </code>\n+\t */\n+\tpublic void testProxiesOfJavaClasses() {\n+\t\tBundle bundle = new Bundle() {\n+\n+\t\t\tpublic int getState() {\n+\t\t\t\treturn 0;\n+\t\t\t}\n+\n+\t\t\tpublic void start() throws BundleException {\n+\t\t\t}\n+\n+\t\t\tpublic void stop() throws BundleException {\n+\t\t\t}\n+\n+\t\t\tpublic void update() throws BundleException {\n+\t\t\t}\n+\n+\t\t\tpublic void update(InputStream in) throws BundleException {\n+\t\t\t}\n+\n+\t\t\tpublic void uninstall() throws BundleException {\n+\t\t\t}\n+\n+\t\t\tpublic Dictionary getHeaders() {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\tpublic long getBundleId() {\n+\t\t\t\treturn 0;\n+\t\t\t}\n+\n+\t\t\tpublic String getLocation() {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\tpublic ServiceReference[] getRegisteredServices() {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\tpublic ServiceReference[] getServicesInUse() {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\tpublic boolean hasPermission(Object permission) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\n+\t\t\tpublic URL getResource(String name) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\tpublic Dictionary getHeaders(String locale) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\tpublic String getSymbolicName() {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\tpublic Class loadClass(String name) throws ClassNotFoundException {\n+\t\t\t\treturn Dependency.class.getClassLoader().loadClass(name);\n+\t\t\t}\n+\n+\t\t\tpublic Enumeration getResources(String name) throws IOException {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\tpublic Enumeration getEntryPaths(String path) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\tpublic URL getEntry(String name) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\tpublic long getLastModified() {\n+\t\t\t\treturn 0;\n+\t\t\t}\n+\n+\t\t\tpublic Enumeration findEntries(String path, String filePattern,\n+\t\t\t\t\tboolean recurse) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t};\n+\n+\n+\t\tBundleContext context = (BundleContext) Mockito.mock(BundleContext.class);\n+\t\tMockito.when(context.getProperty(DependencyHandler.PROXY_TYPE_PROPERTY)).thenReturn(null);\n+\t\tMockito.when(context.getProperty(Logger.IPOJO_LOG_LEVEL_PROP)).thenReturn(null);\n+\t\tMockito.when(context.getBundle()).thenReturn(bundle);\n+\n+\t\t//getBundle().loadClass(name);\n+\n+\t\tComponentFactory factory = (ComponentFactory) Mockito.mock(ComponentFactory.class);\n+\t\tMockito.when(factory.getBundleClassLoader()).thenReturn(Dependency.class.getClassLoader());\n+\n+\t\tInstanceManager im = (InstanceManager) Mockito.mock(InstanceManager.class);\n+\t\tMockito.when(im.getContext()).thenReturn(context);\n+\t\tMockito.when(im.getFactory()).thenReturn(factory);\n+\n+\t\tDependencyHandler handler = (DependencyHandler) Mockito.mock(DependencyHandler.class);\n+\t\tMockito.when(handler.getInstanceManager()).thenReturn(im);\n+\t\tLogger logger = new Logger(context, \"test\", Logger.INFO);\n+\n+\n+\t\tMockito.when(handler.getLogger()).thenReturn(logger);\n+\n+\t\t// Try with java.List\n+\t\tdependency = new Dependency(handler, \"a_field\", List.class, null, false, false, false,\n+\t\t\t\ttrue, \"dep\", context, Dependency.DYNAMIC_BINDING_POLICY, null, null);\n+\t\tdependency.start();\n+\n+\t\t// OK\n+\t\tAssert.assertNotNull(dependency.onGet(new Object(), \"a_field\", null));\n+\t\tAssert.assertTrue(dependency.onGet(new Object(), \"a_field\", null) instanceof List);\n+\n+\t\tdependency.stop();\n+\n+\t\t// Try with javax.swing.Action\n+\t\tdependency = new Dependency(handler, \"a_field\", Action.class, null, false, false, false,\n+\t\t\t\ttrue, \"dep\", context, Dependency.DYNAMIC_BINDING_POLICY, null, null);\n+\t\tdependency.start();\n+\t\t// OK\n+\t\tAssert.assertNotNull(dependency.onGet(new Object(), \"a_field\", null));\n+\t\tAssert.assertTrue(dependency.onGet(new Object(), \"a_field\", null) instanceof Action);\n+\t}\n+\n+}",
                "raw_url": "https://github.com/apache/felix/raw/abbb67fe1e0d8ef097c8829ceb2361ff0d7c523f/ipojo/core/src/test/java/org/apache/felix/ipojo/handlers/dependency/SmartProxyTest.java",
                "sha": "baf97255c792a9ceb32197c2235e143835a0d78b",
                "status": "added"
            }
        ],
        "message": "Fix FELIX-2716 [iPOJO] Failure when creating proxies for classes in java.* packages\nChange the package name of smart proxies of java.* interfaces\nAdd a second check to be sure to never create proxy of non-interface type\n\nImprove the logger messages (cosmetic fixes)\nAvoid an NPE in the InstanceManager.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1042125 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/2dceb845cddfbb4db9e4271dc16005d730271082",
        "patched_files": [
            "InstanceManager.java",
            "Dependency.java",
            "Logger.java",
            "ProxyGenerator.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "SmartProxyTest.java"
        ]
    },
    "felix_b0b2bf4": {
        "bug_id": "felix_b0b2bf4",
        "commit": "https://github.com/apache/felix/commit/b0b2bf4f78721ea9e9dfbd0d4740b01c599243b2",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/felix/blob/b0b2bf4f78721ea9e9dfbd0d4740b01c599243b2/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/BundleTransformer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/BundleTransformer.java?ref=b0b2bf4f78721ea9e9dfbd0d4740b01c599243b2",
                "deletions": 1,
                "filename": "fileinstall/src/main/java/org/apache/felix/fileinstall/internal/BundleTransformer.java",
                "patch": "@@ -49,7 +49,7 @@ public boolean canHandle(File artifact)\n             }\n             jar = new JarFile(artifact);\n             Manifest m = jar.getManifest();\n-            if (m.getMainAttributes().getValue(new Attributes.Name(\"Bundle-SymbolicName\")) != null)\n+            if (m != null && m.getMainAttributes().getValue(new Attributes.Name(\"Bundle-SymbolicName\")) != null)\n             {\n                 return true;\n             }",
                "raw_url": "https://github.com/apache/felix/raw/b0b2bf4f78721ea9e9dfbd0d4740b01c599243b2/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/BundleTransformer.java",
                "sha": "f269dea787ab88b06091d3ffe7368412d994c3f0",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/felix/blob/b0b2bf4f78721ea9e9dfbd0d4740b01c599243b2/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java?ref=b0b2bf4f78721ea9e9dfbd0d4740b01c599243b2",
                "deletions": 0,
                "filename": "fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java",
                "patch": "@@ -921,6 +921,11 @@ private Bundle installOrUpdateBundle(\n         is.mark(256 * 1024);\n         JarInputStream jar = new JarInputStream(is);\n         Manifest m = jar.getManifest();\n+        if( m == null ) {\n+            throw new BundleException(\n+                \"The bundle \" + bundleLocation + \" does not have a META-INF/MANIFEST.MF! \"+\n+                    \"Make sure, META-INF and MANIFEST.MF are the first 2 entries in your JAR!\");\n+        }\n         String sn = m.getMainAttributes().getValue(Constants.BUNDLE_SYMBOLICNAME);\n         String vStr = m.getMainAttributes().getValue(Constants.BUNDLE_VERSION);\n         Version v = vStr == null ? Version.emptyVersion : Version.parseVersion(vStr);",
                "raw_url": "https://github.com/apache/felix/raw/b0b2bf4f78721ea9e9dfbd0d4740b01c599243b2/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java",
                "sha": "a7e3620e02510f00e3030cd61149225b857cf4c7",
                "status": "modified"
            }
        ],
        "message": "[FELIX-2318] Possible NPE for jars with null Manifest\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1027387 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/0465e29241a14580e6d10ae66d9e9a375a5bf315",
        "patched_files": [
            "DirectoryWatcher.java",
            "BundleTransformer.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "DirectoryWatcherTest.java",
            "BundleTransformerTest.java"
        ]
    },
    "felix_b2969a2": {
        "bug_id": "felix_b2969a2",
        "commit": "https://github.com/apache/felix/commit/b2969a2765c1770712efe6842c6eb1d55ee5f894",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/felix/blob/b2969a2765c1770712efe6842c6eb1d55ee5f894/fileinstall/src/main/java/org/apache/felix/fileinstall/DirectoryWatcher.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/fileinstall/src/main/java/org/apache/felix/fileinstall/DirectoryWatcher.java?ref=b2969a2765c1770712efe6842c6eb1d55ee5f894",
                "deletions": 0,
                "filename": "fileinstall/src/main/java/org/apache/felix/fileinstall/DirectoryWatcher.java",
                "patch": "@@ -142,6 +142,15 @@ public void run()\n             try\n             {\n                 Set/*<File>*/ files = scanner.scan();\n+                // Check that there is a result.  If not, this means that the directory can not be listed,\n+                // so it's presumably not a valid directory (it may have been deleted by someone).\n+                // In such case, just sleep\n+                if (files == null)\n+                {\n+                    Thread.sleep(poll);\n+                    continue;\n+                }\n+\n                 List/*<ArtifactListener>*/ listeners = FileInstall.getListeners();\n                 List/*<Artifact>*/ deleted = new ArrayList/*<Artifact>*/();\n                 List/*<Artifact>*/ modified = new ArrayList/*<Artifact>*/();",
                "raw_url": "https://github.com/apache/felix/raw/b2969a2765c1770712efe6842c6eb1d55ee5f894/fileinstall/src/main/java/org/apache/felix/fileinstall/DirectoryWatcher.java",
                "sha": "168ad79103d98675219eeda066d99d7416abd705",
                "status": "modified"
            }
        ],
        "message": "Fix possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@810483 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/80c00cb295148c9d088563af9f6291e1fb3bd87f",
        "patched_files": [
            "DirectoryWatcher.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "DirectoryWatcherTest.java"
        ]
    },
    "felix_b7cc5a2": {
        "bug_id": "felix_b7cc5a2",
        "commit": "https://github.com/apache/felix/commit/b7cc5a29018542ddad92a414c9fbe6f9f29bfc5f",
        "file": [
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/felix/blob/b7cc5a29018542ddad92a414c9fbe6f9f29bfc5f/ipojo/runtime/core-it/ipojo-core-service-dependency-test/src/main/java/org/apache/felix/ipojo/runtime/core/test/components/error/NullPointerExceptionBinder.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/ipojo/runtime/core-it/ipojo-core-service-dependency-test/src/main/java/org/apache/felix/ipojo/runtime/core/test/components/error/NullPointerExceptionBinder.java?ref=b7cc5a29018542ddad92a414c9fbe6f9f29bfc5f",
                "deletions": 0,
                "filename": "ipojo/runtime/core-it/ipojo-core-service-dependency-test/src/main/java/org/apache/felix/ipojo/runtime/core/test/components/error/NullPointerExceptionBinder.java",
                "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.felix.ipojo.runtime.core.test.components.error;\n+\n+import org.apache.felix.ipojo.annotations.*;\n+import org.apache.felix.ipojo.architecture.Architecture;\n+\n+\n+\n+@Component(immediate=true)\n+@Instantiate\n+/**\n+ * Throws an NPE when binding a service.\n+ */\n+public class NullPointerExceptionBinder {\n+\n+  @Bind(id=\"instances\", aggregate=true, optional=true)\n+  public void bindInstance(Architecture instance) {\n+    throw new NullPointerException(\"something went terribly wrong\");\n+  }\n+\n+}",
                "raw_url": "https://github.com/apache/felix/raw/b7cc5a29018542ddad92a414c9fbe6f9f29bfc5f/ipojo/runtime/core-it/ipojo-core-service-dependency-test/src/main/java/org/apache/felix/ipojo/runtime/core/test/components/error/NullPointerExceptionBinder.java",
                "sha": "3aca79dd8c0e73966e469869c49facc10f82f293",
                "status": "added"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/felix/blob/b7cc5a29018542ddad92a414c9fbe6f9f29bfc5f/ipojo/runtime/core-it/ipojo-core-service-dependency-test/src/test/java/org/apache/felix/ipojo/runtime/core/test/dependencies/error/TestNPEInBindMethod.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/ipojo/runtime/core-it/ipojo-core-service-dependency-test/src/test/java/org/apache/felix/ipojo/runtime/core/test/dependencies/error/TestNPEInBindMethod.java?ref=b7cc5a29018542ddad92a414c9fbe6f9f29bfc5f",
                "deletions": 0,
                "filename": "ipojo/runtime/core-it/ipojo-core-service-dependency-test/src/test/java/org/apache/felix/ipojo/runtime/core/test/dependencies/error/TestNPEInBindMethod.java",
                "patch": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.felix.ipojo.runtime.core.test.dependencies.error;\n+\n+import org.apache.felix.ipojo.*;\n+import org.apache.felix.ipojo.runtime.core.test.dependencies.Common;\n+import org.junit.Test;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertNotNull;\n+\n+/**\n+ * Checks what happens when we access a service throwing a NPE in its bind method.\n+ */\n+public class TestNPEInBindMethod extends Common {\n+\n+\n+    @Test\n+    public void testNPEInBindMethod() throws MissingHandlerException, UnacceptableConfiguration, ConfigurationException {\n+         Factory factory = ipojoHelper.getFactory(\"org.apache.felix.ipojo.runtime.core.test.components.error\" +\n+                 \".NullPointerExceptionBinder\");\n+\n+        assertNotNull(factory);\n+\n+        ComponentInstance instance = factory.createComponentInstance(null);\n+        assertEquals(instance.getState(), ComponentInstance.STOPPED);\n+\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/felix/raw/b7cc5a29018542ddad92a414c9fbe6f9f29bfc5f/ipojo/runtime/core-it/ipojo-core-service-dependency-test/src/test/java/org/apache/felix/ipojo/runtime/core/test/dependencies/error/TestNPEInBindMethod.java",
                "sha": "e518d68e186e58eb4a66883b5f94bed47307d317",
                "status": "added"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/felix/blob/b7cc5a29018542ddad92a414c9fbe6f9f29bfc5f/ipojo/runtime/core/src/main/java/org/apache/felix/ipojo/util/DependencyModel.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/ipojo/runtime/core/src/main/java/org/apache/felix/ipojo/util/DependencyModel.java?ref=b7cc5a29018542ddad92a414c9fbe6f9f29bfc5f",
                "deletions": 0,
                "filename": "ipojo/runtime/core/src/main/java/org/apache/felix/ipojo/util/DependencyModel.java",
                "patch": "@@ -907,6 +907,11 @@ public Object getService(ServiceReference ref) {\n      * @return the service object attached to the given reference\r\n      */\r\n     public Object getService(ServiceReference ref, boolean store) {\r\n+        if (m_tracker == null) {\r\n+            // The tracker is already closed, we can't access the service anymore.\r\n+            return null;\r\n+        }\r\n+\r\n         Object svc = m_tracker.getService(ref);\r\n         IPOJOServiceFactory factory = null;\r\n \r",
                "raw_url": "https://github.com/apache/felix/raw/b7cc5a29018542ddad92a414c9fbe6f9f29bfc5f/ipojo/runtime/core/src/main/java/org/apache/felix/ipojo/util/DependencyModel.java",
                "sha": "0ff5614ee7e220d1ff214b46639628ee007d19a1",
                "status": "modified"
            }
        ],
        "message": "Fix the NPE in the DependencyModel\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1497417 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/264afeb6187065bd05611ec1972fcd7bfe5e0b3d",
        "patched_files": [
            "NullPointerExceptionBinder.java",
            "DependencyModel.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "TestNPEInBindMethod.java"
        ]
    },
    "felix_bb3c0b1": {
        "bug_id": "felix_bb3c0b1",
        "commit": "https://github.com/apache/felix/commit/bb3c0b1295c2c235abde2d0dcae46817e79be0e2",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/felix/blob/bb3c0b1295c2c235abde2d0dcae46817e79be0e2/webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/Activator.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/Activator.java?ref=bb3c0b1295c2c235abde2d0dcae46817e79be0e2",
                "deletions": 15,
                "filename": "webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/Activator.java",
                "patch": "@@ -1,18 +1,18 @@\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n+ * or more contributor license agreements. See the NOTICE file\n  * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n+ * regarding copyright ownership. The ASF licenses this file\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n+ * with the License. You may obtain a copy of the License at\n  *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n+ * KIND, either express or implied. See the License for the\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n@@ -49,14 +49,12 @@ public void start(BundleContext bundleContext)\n         // install Web Console plugin\n         try\n         {\n-            MemoryUsagePanel tdp = new MemoryUsagePanel(support);\n-            tdp.activate(bundleContext);\n-\n             Dictionary<String, Object> properties = new Hashtable<String, Object>();\n-            properties.put(\"felix.webconsole.label\", tdp.getLabel());\n+            properties.put(\"felix.webconsole.label\", MemoryUsageConstants.LABEL);\n \n             register(bundleContext, new String[]\n-                { \"javax.servlet.Servlet\", \"org.apache.felix.webconsole.ConfigurationPrinter\" }, tdp, properties);\n+                { \"javax.servlet.Servlet\", \"org.apache.felix.webconsole.ConfigurationPrinter\" }, new MemoryUsagePanel(\n+                bundleContext, support), properties);\n         }\n         catch (Throwable t)\n         {\n@@ -66,15 +64,15 @@ public void start(BundleContext bundleContext)\n         // register for configuration\n         try\n         {\n-            MemoryUsageConfigurator tdp = new MemoryUsageConfigurator(support);\n             Dictionary<String, Object> properties = new Hashtable<String, Object>();\n-            properties.put(Constants.SERVICE_PID, MemoryUsageConfigurator.NAME);\n+            properties.put(Constants.SERVICE_PID, MemoryUsageConstants.PID);\n             register(bundleContext, new String[]\n-                { \"org.osgi.service.cm.ManagedService\" }, tdp, properties);\n+                { \"org.osgi.service.cm.ManagedService\" }, new MemoryUsageConfigurator(support), properties);\n         }\n         catch (Throwable t)\n         {\n-            // Configuration Admin and Metatype Service API might not be available, don't care\n+            // Configuration Admin and Metatype Service API might not be\n+            // available, don't care\n         }\n     }\n \n@@ -87,7 +85,7 @@ public void stop(BundleContext bundleContext)\n         }\n     }\n \n-    private void register(BundleContext context, String[] serviceNames, Object service,\n+    static void register(BundleContext context, String[] serviceNames, Object service,\n         Dictionary<String, Object> properties)\n     {\n ",
                "raw_url": "https://github.com/apache/felix/raw/bb3c0b1295c2c235abde2d0dcae46817e79be0e2/webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/Activator.java",
                "sha": "4b18d68d5b3e991b2b56813619c45f62f53ec132",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/felix/blob/bb3c0b1295c2c235abde2d0dcae46817e79be0e2/webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/MemoryUsageCommand.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/MemoryUsageCommand.java?ref=bb3c0b1295c2c235abde2d0dcae46817e79be0e2",
                "deletions": 2,
                "filename": "webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/MemoryUsageCommand.java",
                "patch": "@@ -25,7 +25,7 @@\n \n import org.apache.felix.shell.Command;\n \n-public class MemoryUsageCommand implements Command\n+class MemoryUsageCommand implements Command\n {\n \n     private static final String HELP_CMD = \"help\";\n@@ -42,7 +42,7 @@\n \n     private final MemoryUsageSupport support;\n \n-    public MemoryUsageCommand(final MemoryUsageSupport support)\n+    MemoryUsageCommand(final MemoryUsageSupport support)\n     {\n         this.support = support;\n     }",
                "raw_url": "https://github.com/apache/felix/raw/bb3c0b1295c2c235abde2d0dcae46817e79be0e2/webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/MemoryUsageCommand.java",
                "sha": "9499a33496ef0de41a17ff2d957d9db956d2ef98",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/felix/blob/bb3c0b1295c2c235abde2d0dcae46817e79be0e2/webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/MemoryUsageConfigurator.java",
                "changes": 63,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/MemoryUsageConfigurator.java?ref=bb3c0b1295c2c235abde2d0dcae46817e79be0e2",
                "deletions": 27,
                "filename": "webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/MemoryUsageConfigurator.java",
                "patch": "@@ -1,18 +1,18 @@\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n+ * or more contributor license agreements. See the NOTICE file\n  * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n+ * regarding copyright ownership. The ASF licenses this file\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n+ * with the License. You may obtain a copy of the License at\n  *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n+ * KIND, either express or implied. See the License for the\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n@@ -21,21 +21,17 @@\n import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.Dictionary;\n+import java.util.Hashtable;\n+\n import org.osgi.service.cm.ConfigurationException;\n import org.osgi.service.cm.ManagedService;\n import org.osgi.service.metatype.AttributeDefinition;\n import org.osgi.service.metatype.MetaTypeProvider;\n import org.osgi.service.metatype.ObjectClassDefinition;\n \n-public class MemoryUsageConfigurator implements ManagedService, MetaTypeProvider\n+class MemoryUsageConfigurator implements ManagedService, MetaTypeProvider\n {\n \n-    static final String NAME = \"org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator\";\n-\n-    private static final String PROP_DUMP_THRESHOLD = \"dump.threshold\";\n-\n-    private static final String PROP_DUMP_LOCATION = \"dump.location\";\n-\n     private final MemoryUsageSupport support;\n \n     private ObjectClassDefinition ocd;\n@@ -48,7 +44,13 @@\n     @SuppressWarnings(\"unchecked\")\n     public void updated(Dictionary properties) throws ConfigurationException\n     {\n-        final Object thresholdValue = properties.get(PROP_DUMP_THRESHOLD);\n+        // ensure default values if there is no config or config is deleted\n+        if (properties == null)\n+        {\n+            properties = new Hashtable();\n+        }\n+\n+        final Object thresholdValue = properties.get(MemoryUsageConstants.PROP_DUMP_THRESHOLD);\n         if (thresholdValue != null)\n         {\n             final int threshold;\n@@ -78,12 +80,20 @@ public void updated(Dictionary properties) throws ConfigurationException\n                 throw failure(iae.getMessage());\n             }\n         }\n+        else\n+        {\n+            support.setThreshold(-1);\n+        }\n \n-        final Object locationValue = properties.get(PROP_DUMP_LOCATION);\n+        final Object locationValue = properties.get(MemoryUsageConstants.PROP_DUMP_LOCATION);\n         if (locationValue instanceof String)\n         {\n             support.setDumpLocation((String) locationValue);\n         }\n+        else\n+        {\n+            support.setDumpLocation(null);\n+        }\n     }\n \n     public String[] getLocales()\n@@ -93,7 +103,7 @@ public void updated(Dictionary properties) throws ConfigurationException\n \n     public ObjectClassDefinition getObjectClassDefinition(String id, String locale)\n     {\n-        if (!NAME.equals(id))\n+        if (!MemoryUsageConstants.PID.equals(id))\n         {\n             return null;\n         }\n@@ -102,23 +112,22 @@ public ObjectClassDefinition getObjectClassDefinition(String id, String locale)\n         {\n \n             final ArrayList<AttributeDefinition> adList = new ArrayList<AttributeDefinition>();\n-            adList.add(new AttributeDefinitionImpl(PROP_DUMP_THRESHOLD, \"Dump Threshold\",\n+            adList.add(new AttributeDefinitionImpl(MemoryUsageConstants.PROP_DUMP_THRESHOLD, \"Dump Threshold\",\n                 \"Threshold at which to automatically create a memory dump as a percentage in the range \"\n-                    + MemoryUsageSupport.MIN_DUMP_THRESHOLD + \" to \" + MemoryUsageSupport.MAX_DUMP_THRESHOLD\n+                    + MemoryUsageConstants.MIN_DUMP_THRESHOLD + \" to \" + MemoryUsageConstants.MAX_DUMP_THRESHOLD\n                     + \" or zero to disable automatic dump creation.\", AttributeDefinition.INTEGER, new String[]\n-                    { String.valueOf(MemoryUsageSupport.DEFAULT_DUMP_THRESHOLD) }, 0, null, null)\n+                    { String.valueOf(MemoryUsageConstants.DEFAULT_DUMP_THRESHOLD) }, 0, null, null)\n             {\n                 @Override\n                 public String validate(String value)\n                 {\n                     try\n                     {\n                         int threshold = Integer.parseInt(value);\n-                        if (threshold != 0\n-                            && (threshold < MemoryUsageSupport.MIN_DUMP_THRESHOLD || threshold > MemoryUsageSupport.MAX_DUMP_THRESHOLD))\n+                        if (!MemoryUsageConstants.isThresholdValid(threshold))\n                         {\n-                            return \"Threshold must in the range \" + MemoryUsageSupport.MIN_DUMP_THRESHOLD + \" to \"\n-                                + MemoryUsageSupport.MAX_DUMP_THRESHOLD + \" or zero\";\n+                            return \"Threshold must in the range \" + MemoryUsageConstants.MIN_DUMP_THRESHOLD + \" to \"\n+                                + MemoryUsageConstants.MAX_DUMP_THRESHOLD + \" or zero\";\n                         }\n                         return \"\"; // everything ok\n                     }\n@@ -128,7 +137,7 @@ public String validate(String value)\n                     }\n                 }\n             });\n-            adList.add(new AttributeDefinitionImpl(PROP_DUMP_LOCATION, \"Dumpe Location\",\n+            adList.add(new AttributeDefinitionImpl(MemoryUsageConstants.PROP_DUMP_LOCATION, \"Dumpe Location\",\n                 \"The filesystem location where heap dumps are stored. If this is null or empty (the default) the dumps are stored in \"\n                     + support.getDefaultDumpLocation(), \"\"));\n \n@@ -149,7 +158,7 @@ public InputStream getIcon(int arg0)\n \n                 public String getID()\n                 {\n-                    return NAME;\n+                    return MemoryUsageConstants.PID;\n                 }\n \n                 public String getDescription()\n@@ -169,9 +178,9 @@ public String getDescription()\n \n     private ConfigurationException failure(final Object invalidValue)\n     {\n-        return new ConfigurationException(PROP_DUMP_THRESHOLD, \"Invalid Dump Threshold value '\" + invalidValue\n-            + \"': Must be an integer number in the range \" + MemoryUsageSupport.MIN_DUMP_THRESHOLD + \" to \"\n-            + MemoryUsageSupport.MAX_DUMP_THRESHOLD + \" or zero to disable\");\n+        return new ConfigurationException(MemoryUsageConstants.PROP_DUMP_THRESHOLD, \"Invalid Dump Threshold value '\"\n+            + invalidValue + \"': Must be an integer number in the range \" + MemoryUsageConstants.MIN_DUMP_THRESHOLD\n+            + \" to \" + MemoryUsageConstants.MAX_DUMP_THRESHOLD + \" or zero to disable\");\n     }\n \n     private static class AttributeDefinitionImpl implements AttributeDefinition",
                "raw_url": "https://github.com/apache/felix/raw/bb3c0b1295c2c235abde2d0dcae46817e79be0e2/webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/MemoryUsageConfigurator.java",
                "sha": "7fbe40af61f66de64b3a83793c77494bb59d9645",
                "status": "modified"
            },
            {
                "additions": 92,
                "blob_url": "https://github.com/apache/felix/blob/bb3c0b1295c2c235abde2d0dcae46817e79be0e2/webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/MemoryUsageConstants.java",
                "changes": 92,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/MemoryUsageConstants.java?ref=bb3c0b1295c2c235abde2d0dcae46817e79be0e2",
                "deletions": 0,
                "filename": "webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/MemoryUsageConstants.java",
                "patch": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.felix.webconsole.plugins.memoryusage.internal;\n+\n+/**\n+ * The <code>MemoryUsageConstants</code> provides some basic constants for\n+ * the MemoryUsage support bundle\n+ */\n+final class MemoryUsageConstants\n+{\n+\n+    /**\n+     * Service PID for the Configuration Admin configuration object to be\n+     * provided to configure the memory usage support.\n+     */\n+    static final String PID = \"org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator\";\n+\n+    /**\n+     * The label (or address) under which the Memory Usage Web Console Plugin\n+     * is accessible.\n+     */\n+    static final String LABEL = \"memoryusage\";\n+\n+    /**\n+     * The name of the property providing the filesystem location where the\n+     * memory dumps should be placed. If this location is relative it is located\n+     * inside the bundle private data area.\n+     * <p>\n+     * This property may be set as a framework property or as a property of\n+     * configuration provided by the Configuration Admin Service for the service\n+     * {@link #PID}.\n+     */\n+    static final String PROP_DUMP_LOCATION = \"felix.memoryusage.dump.location\";\n+\n+    /**\n+     * The name of the property providing threshold as a percentage of the\n+     * maximum available memory at which an automatic memory dumps should\n+     * be created.\n+     * <p>\n+     * This property may be set as a framework property or as a property of\n+     * configuration provided by the Configuration Admin Service for the service\n+     * {@link #PID}.\n+     * <p>\n+     * The property must be an integer value or be parseable to an integer\n+     * value. The value must be zero to disable automatic dump generation or in\n+     * the range [{@link #MIN_DUMP_THRESHOLD}..{@link #MAX_DUMP_THRESHOLD}].\n+     */\n+    static final String PROP_DUMP_THRESHOLD = \"felix.memoryusage.dump.threshold\";\n+\n+    /**\n+     * The default automatic heap dump threshold if none has been configured\n+     * (or no configuration has yet been provided).\n+     */\n+    static final int DEFAULT_DUMP_THRESHOLD = 95;\n+    /**\n+     * The maximum allowed automatic heap dump threshold.\n+     */\n+    static final int MAX_DUMP_THRESHOLD = 99;\n+    /**\n+     * The minimum allowed automatic heap dump threshold.\n+     */\n+    static final int MIN_DUMP_THRESHOLD = 50;\n+\n+    /**\n+     * Returns <code>true</code> if the given <code>threshold</code>value is\n+     * valid; that is if the vaue is either zero or in the range [\n+     * {@link #MIN_DUMP_THRESHOLD}..{@link #MAX_DUMP_THRESHOLD}].\n+     *\n+     * @param threshold The threshold value (percentage) to validate\n+     * @return <code>true</code> if the value is valid\n+     */\n+    static boolean isThresholdValid(final int threshold)\n+    {\n+        return threshold == 0 || (threshold >= MIN_DUMP_THRESHOLD && threshold <= MAX_DUMP_THRESHOLD);\n+    }\n+}",
                "raw_url": "https://github.com/apache/felix/raw/bb3c0b1295c2c235abde2d0dcae46817e79be0e2/webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/MemoryUsageConstants.java",
                "sha": "a89ff98e020eee721a766f9a804b4e50ef6ecaf6",
                "status": "added"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/felix/blob/bb3c0b1295c2c235abde2d0dcae46817e79be0e2/webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/MemoryUsagePanel.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/MemoryUsagePanel.java?ref=bb3c0b1295c2c235abde2d0dcae46817e79be0e2",
                "deletions": 3,
                "filename": "webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/MemoryUsagePanel.java",
                "patch": "@@ -40,29 +40,31 @@\n import org.apache.felix.webconsole.ConfigurationPrinter;\n import org.apache.felix.webconsole.DefaultVariableResolver;\n import org.apache.felix.webconsole.WebConsoleUtil;\n+import org.osgi.framework.BundleContext;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n @SuppressWarnings(\"serial\")\n-public class MemoryUsagePanel extends AbstractWebConsolePlugin implements ConfigurationPrinter, AttachmentProvider\n+class MemoryUsagePanel extends AbstractWebConsolePlugin implements ConfigurationPrinter, AttachmentProvider\n {\n \n     /** default log */\n     private final Logger log = LoggerFactory.getLogger(getClass());\n \n     private final MemoryUsageSupport support;\n \n-    public MemoryUsagePanel(final MemoryUsageSupport support)\n+    MemoryUsagePanel(final BundleContext bundleContext, final MemoryUsageSupport support)\n     {\n         this.support = support;\n+        activate(bundleContext);\n     }\n \n     // ---------- AbstractWebConsolePlugin\n \n     @Override\n     public String getLabel()\n     {\n-        return \"memoryusage\";\n+        return MemoryUsageConstants.LABEL;\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/felix/raw/bb3c0b1295c2c235abde2d0dcae46817e79be0e2/webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/MemoryUsagePanel.java",
                "sha": "3e54f43fb034222687895632cf4636ffc1d3719d",
                "status": "modified"
            },
            {
                "additions": 74,
                "blob_url": "https://github.com/apache/felix/blob/bb3c0b1295c2c235abde2d0dcae46817e79be0e2/webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/MemoryUsageSupport.java",
                "changes": 100,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/MemoryUsageSupport.java?ref=bb3c0b1295c2c235abde2d0dcae46817e79be0e2",
                "deletions": 26,
                "filename": "webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/MemoryUsageSupport.java",
                "patch": "@@ -31,6 +31,7 @@\n import java.util.Date;\n import java.util.List;\n import java.util.NoSuchElementException;\n+import java.util.TreeSet;\n \n import javax.management.ListenerNotFoundException;\n import javax.management.MBeanServer;\n@@ -46,22 +47,6 @@\n final class MemoryUsageSupport implements NotificationListener\n {\n \n-    /**\n-     * The minimum allowed automatic heap dump threshold (value is 50).\n-     */\n-    static final int MIN_DUMP_THRESHOLD = 50;\n-\n-    /**\n-     * The maximum allowed automatic heap dump threshold (value is 99).\n-     */\n-    static final int MAX_DUMP_THRESHOLD = 99;\n-\n-    /**\n-     * The default automatic heap dump threshold if none has been configured\n-     * (or no configuration has yet been provided) (value is 95).\n-     */\n-    static final int DEFAULT_DUMP_THRESHOLD = 95;\n-\n     // This is the name of the HotSpot Diagnostic MBean\n     private static final String HOTSPOT_BEAN_NAME = \"com.sun.management:type=HotSpotDiagnostic\";\n \n@@ -71,6 +56,9 @@\n     // or the current working directory\n     private final File defaultDumpLocation;\n \n+    // the default threshold value\n+    private final int defaultThreshold;\n+\n     // the configured dump location\n     private File dumpLocation;\n \n@@ -79,13 +67,25 @@\n \n     MemoryUsageSupport(final BundleContext context)\n     {\n-        // get the dump location\n-        File dumps = context.getDataFile(\"dumps\");\n-        if (dumps == null)\n+\n+        // the default dump location\n+        String propDumps = context.getProperty(MemoryUsageConstants.PROP_DUMP_LOCATION);\n+        if (propDumps == null)\n         {\n-            dumps = new File(\"dumps\");\n+            propDumps = \"dumps\";\n         }\n-        defaultDumpLocation = dumps.getAbsoluteFile();\n+\n+        // ensure dump location is an absolute path/location\n+        File dumps = new File(propDumps);\n+        if (!dumps.isAbsolute())\n+        {\n+            File bundleDumps = context.getDataFile(propDumps);\n+            if (bundleDumps != null)\n+            {\n+                dumps = bundleDumps;\n+            }\n+        }\n+        this.defaultDumpLocation = dumps.getAbsoluteFile();\n \n         // prepare the dump location\n         setDumpLocation(null);\n@@ -95,7 +95,37 @@\n         memEmitter.addNotificationListener(this, null, null);\n \n         // set the initial automatic dump threshold\n-        setThreshold(DEFAULT_DUMP_THRESHOLD);\n+        int defaultThreshold;\n+        String propThreshold = context.getProperty(MemoryUsageConstants.PROP_DUMP_THRESHOLD);\n+        if (propThreshold != null)\n+        {\n+            try\n+            {\n+                defaultThreshold = Integer.parseInt(propThreshold);\n+                setThreshold(defaultThreshold);\n+            }\n+            catch (Exception e)\n+            {\n+                // NumberFormatException - if propTreshold cannot be parsed to\n+                // int\n+                // IllegalArgumentException - if threshold is invalid\n+                defaultThreshold = -1;\n+            }\n+        }\n+        else\n+        {\n+            defaultThreshold = -1;\n+        }\n+\n+        // default threshold has not been configured (correctly), assume fixed\n+        // default\n+        if (defaultThreshold < 0)\n+        {\n+            defaultThreshold = MemoryUsageConstants.DEFAULT_DUMP_THRESHOLD;\n+            setThreshold(defaultThreshold);\n+        }\n+\n+        this.defaultThreshold = defaultThreshold;\n     }\n \n     void dispose()\n@@ -117,29 +147,45 @@ void dispose()\n      * @param percentage The threshold as a percentage of memory consumption.\n      *            This value may be 0 (zero) to switch off automatic heap dumps\n      *            or in the range {@link #MIN_DUMP_THRESHOLD} to\n-     *            {@link #MAX_DUMP_THRESHOLD}.\n+     *            {@link #MAX_DUMP_THRESHOLD}. If set to a negative value,\n+     *            the default threshold is assumed.\n      * @throws IllegalArgumentException if the percentage value is outside of\n      *             the valid range of thresholds. The message is the percentage\n      *             value which is not accepted.\n      */\n-    final void setThreshold(final int percentage)\n+    final void setThreshold(int percentage)\n     {\n-        if (threshold == 0 || (threshold >= MIN_DUMP_THRESHOLD && threshold <= MAX_DUMP_THRESHOLD))\n+        if (percentage < 0)\n+        {\n+            percentage = defaultThreshold;\n+        }\n+\n+        if (MemoryUsageConstants.isThresholdValid(percentage))\n         {\n+            TreeSet<String> thresholdPools = new TreeSet<String>();\n+            TreeSet<String> noThresholdPools = new TreeSet<String>();\n             List<MemoryPoolMXBean> pools = getMemoryPools();\n             for (MemoryPoolMXBean pool : pools)\n             {\n                 if (pool.isUsageThresholdSupported())\n                 {\n                     long threshold = pool.getUsage().getMax() * percentage / 100;\n                     pool.setUsageThreshold(threshold);\n+                    thresholdPools.add(pool.getName());\n+                }\n+                else\n+                {\n+                    noThresholdPools.add(pool.getName());\n                 }\n             }\n             this.threshold = percentage;\n+\n+            log.info(\"Setting Automatic Memory Dump Threshold to {}% for pools {}\", threshold, thresholdPools);\n+            log.info(\"Automatic Memory Dump cannot be set for pools {}\", noThresholdPools);\n         }\n         else\n         {\n-            throw new IllegalArgumentException(String.valueOf(threshold));\n+            throw new IllegalArgumentException(String.valueOf(percentage));\n         }\n     }\n \n@@ -304,6 +350,8 @@ final void setDumpLocation(final String dumpLocation)\n         {\n             this.dumpLocation = new File(dumpLocation).getAbsoluteFile();\n         }\n+\n+        log.info(\"Storing Memory Dumps in {}\", this.dumpLocation);\n     }\n \n     final File getDumpLocation()",
                "raw_url": "https://github.com/apache/felix/raw/bb3c0b1295c2c235abde2d0dcae46817e79be0e2/webconsole-plugins/memoryusage/src/main/java/org/apache/felix/webconsole/plugins/memoryusage/internal/MemoryUsageSupport.java",
                "sha": "705c4196bbf834f62a3189165479cd88a5965c9b",
                "status": "modified"
            }
        ],
        "message": "FELIX-2236 Improvement and fixes:\n  * Ensure bundle can be started without Config Admin, Metatype and Web Console on IBM J9 VM\n  * Support basic configuration with framework properties\n  * Prevent NullPointerException if no configuration is available or config is deleted\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@927746 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/e8c67797f6737584a92a271becd554768a842415",
        "patched_files": [
            "Activator.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ActivatorTest.java"
        ]
    },
    "felix_c7b3cc1": {
        "bug_id": "felix_c7b3cc1",
        "commit": "https://github.com/apache/felix/commit/c7b3cc172aebd036100974cb655d04d588ed13fc",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/felix/blob/c7b3cc172aebd036100974cb655d04d588ed13fc/gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/Reflective.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/Reflective.java?ref=c7b3cc172aebd036100974cb655d04d588ed13fc",
                "deletions": 1,
                "filename": "gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/Reflective.java",
                "patch": "@@ -171,7 +171,7 @@ public static Object method(CommandSession session, Object target, String name,\n                 {\n                     params.append(\", \");\n                 }\n-                params.append(arg.getClass().getSimpleName());\n+                params.append(arg == null ? \"null\" : arg.getClass().getSimpleName());\n             }\n \n             throw new IllegalArgumentException(String.format(\n@@ -275,6 +275,13 @@ else if (param.presentValue() != null)\n                 else\n                 {\n                     out[i] = coerce(session, target, types[i], in.get(0));\n+                    \n+                    if (out[i] == null && types[i].isArray() && in.size() > 0)\n+                    {\n+                        // don't coerce null to array FELIX-2432\n+                        out[i] = NO_MATCH;\n+                    }\n+                    \n                     if (out[i] != NO_MATCH)\n                     {\n                         in.remove(0);",
                "raw_url": "https://github.com/apache/felix/raw/c7b3cc172aebd036100974cb655d04d588ed13fc/gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/Reflective.java",
                "sha": "7df0e17ed1636bacbf2b879615090856a3d144e5",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/felix/blob/c7b3cc172aebd036100974cb655d04d588ed13fc/gogo/runtime/src/test/java/org/apache/felix/gogo/runtime/TestParser2.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/gogo/runtime/src/test/java/org/apache/felix/gogo/runtime/TestParser2.java?ref=c7b3cc172aebd036100974cb655d04d588ed13fc",
                "deletions": 10,
                "filename": "gogo/runtime/src/test/java/org/apache/felix/gogo/runtime/TestParser2.java",
                "patch": "@@ -35,7 +35,7 @@ public void testComment() throws Exception\n \n         assertEquals(\"file://wibble#tag\", c.execute(\"echo file://wibble#tag\"));\n         assertEquals(\"file:\", c.execute(\"echo file: //wibble#tag\"));\n-        \n+\n         assertEquals(\"PWD/*.java\", c.execute(\"echo PWD/*.java\"));\n         try\n         {\n@@ -46,31 +46,37 @@ public void testComment() throws Exception\n         {\n             // expected\n         }\n-        \n+\n         assertEquals(\"ok\", c.execute(\"// can't quote\\necho ok\\n\"));\n-        \n+\n         // quote in comment in closure\n         assertEquals(\"ok\", c.execute(\"x = { // can't quote\\necho ok\\n}; x\"));\n         assertEquals(\"ok\", c.execute(\"x = {\\n// can't quote\\necho ok\\n}; x\"));\n         assertEquals(\"ok\", c.execute(\"x = {// can't quote\\necho ok\\n}; x\"));\n     }\n \n+    public void testCoercion() throws Exception\n+    {\n+        Context c = new Context();\n+        c.addCommand(\"echo\", this);\n+\n+        // FELIX-2432\n+        assertEquals(\"null x\", c.execute(\"echo $expandsToNull x\"));\n+    }\n+\n     public CharSequence echo(Object args[])\n     {\n         if (args == null)\n         {\n-            return \"\";\n+            return \"null args!\";\n         }\n \n         StringBuilder sb = new StringBuilder();\n         for (Object arg : args)\n         {\n-            if (arg != null)\n-            {\n-                if (sb.length() > 0)\n-                    sb.append(' ');\n-                sb.append(arg);\n-            }\n+            if (sb.length() > 0)\n+                sb.append(' ');\n+            sb.append(String.valueOf(arg));\n         }\n         return sb.toString();\n     }",
                "raw_url": "https://github.com/apache/felix/raw/c7b3cc172aebd036100974cb655d04d588ed13fc/gogo/runtime/src/test/java/org/apache/felix/gogo/runtime/TestParser2.java",
                "sha": "a21e0a1e764afdaf4b7b29ee7c5d1703a34e8475",
                "status": "modified"
            }
        ],
        "message": "fix NPE/coercion error when passing null first argument FELIX-2432\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@956547 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/bdbfb9be3d3c5efd193516511e21882e740c530c",
        "patched_files": [
            "Reflective.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "TestParser2.java"
        ]
    },
    "felix_c821272": {
        "bug_id": "felix_c821272",
        "commit": "https://github.com/apache/felix/commit/c82127209bbeddfe8690f4354ee7553ee116f1ae",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/felix/blob/c82127209bbeddfe8690f4354ee7553ee116f1ae/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java?ref=c82127209bbeddfe8690f4354ee7553ee116f1ae",
                "deletions": 3,
                "filename": "configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java",
                "patch": "@@ -550,6 +550,13 @@ public void bundleChanged( BundleEvent event )\n     }\n \n \n+    private ServiceReference getServiceReference()\n+    {\n+        ServiceRegistration reg = configurationAdminRegistration;\n+        return ( reg != null ) ? reg.getReference() : null;\n+    }\n+\n+\n     private void configure( ServiceReference sr, ManagedService service )\n     {\n         String pid = ( String ) sr.getProperty( Constants.SERVICE_PID );\n@@ -774,7 +781,7 @@ void log( int level, String message, Throwable t )\n         Object log = logTracker.getService();\n         if ( log != null )\n         {\n-            ( ( LogService ) log ).log( configurationAdminRegistration.getReference(), level, message, t );\n+            ( ( LogService ) log ).log( getServiceReference(), level, message, t );\n             return;\n         }\n \n@@ -1356,8 +1363,7 @@ public void run()\n                 return;\n             }\n \n-            ConfigurationEvent event = new ConfigurationEvent( configurationAdminRegistration.getReference(), type,\n-                factoryPid, pid );\n+            ConfigurationEvent event = new ConfigurationEvent( getServiceReference(), type, factoryPid, pid );\n \n             for ( int i = 0; i < srs.length; i++ )\n             {",
                "raw_url": "https://github.com/apache/felix/raw/c82127209bbeddfe8690f4354ee7553ee116f1ae/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java",
                "sha": "35bbdfce2af34e9ea4128967ff47ec9c7e396c5d",
                "status": "modified"
            }
        ],
        "message": "FELIX-881 provide getter for the service reference preventing\nNullPointerException if the service has already been unregistered\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@734634 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/5b7c60510fcc5a1cbce4eee9dd0a7e165bae36d6",
        "patched_files": [
            "ConfigurationManager.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ConfigurationManagerTest.java"
        ]
    },
    "felix_cc12570": {
        "bug_id": "felix_cc12570",
        "commit": "https://github.com/apache/felix/commit/cc125701b343e3883048c5bca4bba58014aea1d6",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/felix/blob/cc125701b343e3883048c5bca4bba58014aea1d6/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java?ref=cc125701b343e3883048c5bca4bba58014aea1d6",
                "deletions": 1,
                "filename": "configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java",
                "patch": "@@ -1663,6 +1663,9 @@ protected boolean provideReplacement( ServiceReference<T> sr )\n                 try\n                 {\n                     final String configPidString = this.getHelper().getServicePid( sr, this.config.getPid() );\n+                    if (configPidString == null) {\n+                        return false; // The managed service is not registered anymore in the OSGi service registry.\n+                    }\n                     final ConfigurationImpl rc = getTargetedConfiguration( configPidString, sr );\n                     if ( rc != null )\n                     {\n@@ -1723,7 +1726,15 @@ public void run()\n             if ( !srList.isEmpty() )\n             {\n                 // optionally bind dynamically to the first service\n-                config.tryBindLocation( srList.get( 0 ).getBundle().getLocation() );\n+                Bundle bundle = srList.get(0).getBundle();\n+                if (bundle == null) {\n+                    log( LogService.LOG_DEBUG,\n+                        \"Service {0} seems to be unregistered concurrently (not providing configuration)\",\n+                        new Object[]\n+                            { ConfigurationManager.toString( srList.get(0) ) } );\n+                    return;\n+                }\n+                config.tryBindLocation( bundle.getLocation() );\n \n                 final String configBundleLocation = config.getBundleLocation();\n ",
                "raw_url": "https://github.com/apache/felix/raw/cc125701b343e3883048c5bca4bba58014aea1d6/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java",
                "sha": "12dd0de92c5b4d5aaffe21b44213ad0b79783edf",
                "status": "modified"
            },
            {
                "additions": 227,
                "blob_url": "https://github.com/apache/felix/blob/cc125701b343e3883048c5bca4bba58014aea1d6/configadmin/src/test/java/org/apache/felix/cm/integration/FELIX4385_StressTest.java",
                "changes": 227,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/configadmin/src/test/java/org/apache/felix/cm/integration/FELIX4385_StressTest.java?ref=cc125701b343e3883048c5bca4bba58014aea1d6",
                "deletions": 0,
                "filename": "configadmin/src/test/java/org/apache/felix/cm/integration/FELIX4385_StressTest.java",
                "patch": "@@ -0,0 +1,227 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.felix.cm.integration;\n+\n+import java.io.IOException;\n+import java.util.Dictionary;\n+import java.util.Hashtable;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import junit.framework.Assert;\n+import junit.framework.TestCase;\n+\n+import org.apache.felix.cm.integration.helper.Log;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.ops4j.pax.exam.junit.JUnit4TestRunner;\n+import org.osgi.framework.Constants;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.cm.Configuration;\n+import org.osgi.service.cm.ConfigurationAdmin;\n+import org.osgi.service.cm.ConfigurationException;\n+import org.osgi.service.cm.ManagedService;\n+\n+/**\n+ * The <code>FELIX4385_StressTest</code> class tests the issue related to concurrency between configuration \n+ * creation/update/removal and ManagedService registration/unregistration.\n+ * The test performs some loops, each one is then executing the following scenario:\n+ * Some ManagedServices are concurrently registered in the OSGi registry using an Executor, and for each \n+ * managed service, we create a Configuration.\n+ * We then wait until every managed services have been updated with a non null configuration. Care is taken when a \n+ * ManagedService is called with an initial update(null) callback, because when a configuration is created the very first\n+ * time, an empty configuration is delivered to the corresponding managed service until the configuration is really updated.\n+ * Once all managed services have been updated, we then concurrently unregister the managed services, and we also\n+ * delete every created configurations. We don't use an executor when deleting configuration because the configuration \n+ * removal is already asynchronous.\n+ * \n+ * <p>\n+ * @see <a href=\"https://issues.apache.org/jira/browse/FELIX-4385\">FELIX-4385</a>\n+ */\n+@RunWith(JUnit4TestRunner.class)\n+public class FELIX4385_StressTest extends ConfigurationTestBase\n+{\n+    final static int MAXWAIT = 10000;\n+    final static int MANAGED_SERVICES = 3;\n+    volatile ExecutorService executor;\n+\n+    @Test\n+    public void test_ConcurrentManagedServicesWithConcurrentConfigurations()\n+    {\n+        final Log log = new Log(bundleContext);\n+        log.info(\"starting test_ConcurrentManagedServicesWithConcurrentConfigurations\");\n+        // Use at least 10 parallel threads, or take all available processors if the running host contains more than 10 processors.\n+        int parallelism = Math.max(10, Runtime.getRuntime().availableProcessors());\n+        final ConfigurationAdmin ca = getConfigurationAdmin();\n+        final ExecutorService executor = Executors.newFixedThreadPool(parallelism);\n+        try\n+        {\n+            int pidCounter = 0;\n+\n+            long timeStamp = System.currentTimeMillis();\n+            for (int loop = 0; loop < 1000; loop++)\n+            {\n+                log.debug(\"loop#%d -------------------------\", (loop + 1));\n+\n+                final CountDownLatch managedServiceUpdated = new CountDownLatch(MANAGED_SERVICES);\n+                final CountDownLatch managedServiceUnregistered = new CountDownLatch(MANAGED_SERVICES);\n+\n+                // Create some ManagedServices concurrently\n+                log.info(\"registering aspects concurrently\");\n+                final CopyOnWriteArrayList<ServiceRegistration> managedServices = new CopyOnWriteArrayList<ServiceRegistration>();\n+                final CopyOnWriteArrayList<Configuration> confs = new CopyOnWriteArrayList<Configuration>();\n+\n+                for (int i = 0; i < MANAGED_SERVICES; i++)\n+                {\n+                    final String pid = \"pid.\" + i + \"-\" + (pidCounter++);\n+                    executor.execute(new Runnable()\n+                    {\n+                        public void run()\n+                        {\n+                            Hashtable props = new Hashtable();\n+                            props.put(Constants.SERVICE_PID, pid);\n+\n+                            ServiceRegistration sr = bundleContext.registerService(\n+                                ManagedService.class.getName(),\n+                                new TestManagedService(managedServiceUpdated), props);\n+                            managedServices.add(sr);\n+                            try\n+                            {\n+                                Configuration c = ca.getConfiguration(pid, null);\n+                                c.update(new Hashtable()\n+                                {\n+                                    {\n+                                        put(\"foo\", \"bar\");\n+                                    }\n+                                });\n+                                confs.add(c);\n+                            }\n+                            catch (IOException e)\n+                            {\n+                                log.error(\"could not create pid %s\", e, pid);\n+                                return;\n+                            }\n+                        }\n+                    });\n+                }\n+\n+                if (!managedServiceUpdated.await(MAXWAIT, TimeUnit.MILLISECONDS))\n+                {\n+                    TestCase.fail(\"Detected errors logged during concurrent test\");\n+                    break;\n+                }\n+                log.info(\"all managed services updated\");\n+\n+                // Unregister managed services concurrently\n+                log.info(\"unregistering services concurrently\");\n+                for (final ServiceRegistration sr : managedServices)\n+                {\n+                    executor.execute(new Runnable()\n+                    {\n+                        public void run()\n+                        {\n+                            sr.unregister();\n+                            managedServiceUnregistered.countDown();\n+                        }\n+                    });\n+                }\n+\n+                // Unregister configuration concurrently\n+                log.info(\"unregistering configuration concurrently\");\n+                for (final Configuration c : confs)\n+                {\n+                    c.delete();\n+                }\n+\n+                // Wait until managed services have been unregistered\n+                if (!managedServiceUnregistered.await(MAXWAIT, TimeUnit.MILLISECONDS))\n+                {\n+                    TestCase.fail(\"Managed Servives could not be unregistered timely\");\n+                    break;\n+                }\n+\n+                if (log.errorsLogged())\n+                {\n+                    TestCase.fail(\"Detected errors logged during concurrent test\");\n+                    break;\n+                }\n+\n+                log.info(\"finished one test loop\");\n+                if ((loop + 1) % 100 == 0)\n+                {\n+                    long duration = System.currentTimeMillis() - timeStamp;\n+                    System.out.println(String.format(\"Performed %d tests in %d ms.\", (loop + 1), duration));\n+                    timeStamp = System.currentTimeMillis();\n+                }\n+            }\n+        }\n+\n+        catch (Throwable t)\n+        {\n+            Assert.fail(\"Test failed: \" + t.getMessage());\n+        }\n+\n+        finally\n+        {\n+            shutdown(executor);\n+            log.close();\n+        }\n+    }\n+\n+    void shutdown(ExecutorService exec)\n+    {\n+        exec.shutdown();\n+        try\n+        {\n+            exec.awaitTermination(5, TimeUnit.SECONDS);\n+        }\n+        catch (InterruptedException e)\n+        {\n+        }\n+    }\n+\n+    /**\n+     * One ManagedService concurrently registered in the OSGI registry.\n+     * We count down a latch once we have been updated with our configuration.\n+     */\n+    public class TestManagedService implements ManagedService\n+    {\n+        private final CountDownLatch latch;\n+        private Dictionary<String, ?> props;\n+\n+        TestManagedService(CountDownLatch latch)\n+        {\n+            this.latch = latch;\n+        }\n+\n+        public synchronized void updated(Dictionary<String, ?> properties) throws ConfigurationException\n+        {\n+            if (this.props == null && properties == null)\n+            {\n+                // GetConfiguration has been called, but configuration have not yet been delivered.\n+                return;\n+            }\n+            this.props = properties;\n+            latch.countDown();\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/felix/raw/cc125701b343e3883048c5bca4bba58014aea1d6/configadmin/src/test/java/org/apache/felix/cm/integration/FELIX4385_StressTest.java",
                "sha": "659ce88cd219aa91114212ed7ec892b725907ec3",
                "status": "added"
            },
            {
                "additions": 239,
                "blob_url": "https://github.com/apache/felix/blob/cc125701b343e3883048c5bca4bba58014aea1d6/configadmin/src/test/java/org/apache/felix/cm/integration/helper/Log.java",
                "changes": 239,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/configadmin/src/test/java/org/apache/felix/cm/integration/helper/Log.java?ref=cc125701b343e3883048c5bca4bba58014aea1d6",
                "deletions": 0,
                "filename": "configadmin/src/test/java/org/apache/felix/cm/integration/helper/Log.java",
                "patch": "@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.felix.cm.integration.helper;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.FrameworkEvent;\n+import org.osgi.framework.FrameworkListener;\n+import org.osgi.framework.ServiceReference;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.log.LogService;\n+\n+/**\n+ * OSGi log service which logs messages to standard output.\n+ * This class can also be used to detect if the ConfigurationAdmin service has logged\n+ * some warnings during a stress integration test.\n+ */\n+public class Log implements LogService, FrameworkListener\n+{\n+    // Default OSGI log service level logged to standard output.\n+    private final static int LOG_LEVEL = LogService.LOG_WARNING;\n+\n+    // Flag used to check if some errors have been logged during the execution of a given test.\n+    private volatile boolean m_errorsLogged;\n+\n+    // We implement OSGI log service.\n+    protected ServiceRegistration logService;\n+\n+    // Bundle context used to register our log listener\n+    private BundleContext ctx;\n+\n+    /**\n+     * Default constructor. \n+     * @Param ctx the Bundle Context used to register this log service. The {@link #close} must\n+     * be called when the logger is not used anymore.\n+     */\n+    public Log(BundleContext ctx)\n+    {\n+        this.ctx = ctx;\n+        logService = ctx.registerService(LogService.class.getName(), this, null);\n+        ctx.addFrameworkListener(this);\n+    }\n+\n+    /**\n+     * Unregister our log listener\n+     */\n+    public void close()\n+    {\n+        logService.unregister();\n+        ctx.removeFrameworkListener(this);\n+    }\n+\n+    public void log(int level, String message)\n+    {\n+        checkError(level, null);\n+        if (LOG_LEVEL >= level)\n+        {\n+            System.out.println(getLevel(level) + \" - \" + Thread.currentThread().getName() + \" : \" + message);\n+        }\n+    }\n+\n+    public void log(int level, String message, Throwable exception)\n+    {\n+        checkError(level, exception);\n+        if (LOG_LEVEL >= level)\n+        {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(getLevel(level) + \" - \" + Thread.currentThread().getName() + \" : \");\n+            sb.append(message);\n+            parse(sb, exception);\n+            System.out.println(sb.toString());\n+        }\n+    }\n+\n+    public void log(ServiceReference sr, int level, String message)\n+    {\n+        checkError(level, null);\n+        if (LOG_LEVEL >= level)\n+        {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(getLevel(level) + \" - \" + Thread.currentThread().getName() + \" : \");\n+            sb.append(message);\n+            System.out.println(sb.toString());\n+        }\n+    }\n+\n+    public void log(ServiceReference sr, int level, String message, Throwable exception)\n+    {\n+        checkError(level, exception);\n+        if (LOG_LEVEL >= level)\n+        {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(getLevel(level) + \" - \" + Thread.currentThread().getName() + \" : \");\n+            sb.append(message);\n+            parse(sb, exception);\n+            System.out.println(sb.toString());\n+        }\n+    }\n+\n+    public boolean errorsLogged()\n+    {\n+        return m_errorsLogged;\n+    }\n+\n+    private void parse(StringBuilder sb, Throwable t)\n+    {\n+        if (t != null)\n+        {\n+            sb.append(\" - \");\n+            StringWriter buffer = new StringWriter();\n+            PrintWriter pw = new PrintWriter(buffer);\n+            t.printStackTrace(pw);\n+            sb.append(buffer.toString());\n+            m_errorsLogged = true;\n+        }\n+    }\n+\n+    private String getLevel(int level)\n+    {\n+        switch (level)\n+        {\n+            case LogService.LOG_DEBUG:\n+                return \"DEBUG\";\n+            case LogService.LOG_ERROR:\n+                return \"ERROR\";\n+            case LogService.LOG_INFO:\n+                return \"INFO\";\n+            case LogService.LOG_WARNING:\n+                return \"WARN\";\n+            default:\n+                return \"\";\n+        }\n+    }\n+\n+    private void checkError(int level, Throwable exception)\n+    {\n+        if (level <= LOG_ERROR)\n+        {\n+            m_errorsLogged = true;\n+        }\n+        if (exception != null)\n+        {\n+            m_errorsLogged = true;\n+        }\n+    }\n+\n+    public void frameworkEvent(FrameworkEvent event)\n+    {\n+        int eventType = event.getType();\n+        String msg = getFrameworkEventMessage(eventType);\n+        int level = (eventType == FrameworkEvent.ERROR) ? LOG_ERROR : LOG_WARNING;\n+        if (msg != null)\n+        {\n+            log(level, msg, event.getThrowable());\n+        }\n+        else\n+        {\n+            log(level, \"Unknown fwk event: \" + event);\n+        }\n+    }\n+\n+    private String getFrameworkEventMessage(int event)\n+    {\n+        switch (event)\n+        {\n+            case FrameworkEvent.ERROR:\n+                return \"FrameworkEvent: ERROR\";\n+            case FrameworkEvent.INFO:\n+                return \"FrameworkEvent INFO\";\n+            case FrameworkEvent.PACKAGES_REFRESHED:\n+                return \"FrameworkEvent: PACKAGE REFRESHED\";\n+            case FrameworkEvent.STARTED:\n+                return \"FrameworkEvent: STARTED\";\n+            case FrameworkEvent.STARTLEVEL_CHANGED:\n+                return \"FrameworkEvent: STARTLEVEL CHANGED\";\n+            case FrameworkEvent.WARNING:\n+                return \"FrameworkEvent: WARNING\";\n+            default:\n+                return null;\n+        }\n+    }\n+\n+    public void warn(String msg, Object... params)\n+    {\n+        if (LOG_LEVEL >= LogService.LOG_WARNING)\n+        {\n+            log(LogService.LOG_WARNING, params.length > 0 ? String.format(msg, params) : msg);\n+        }\n+    }\n+\n+    public void info(String msg, Object... params)\n+    {\n+        if (LOG_LEVEL >= LogService.LOG_INFO)\n+        {\n+            log(LogService.LOG_INFO, params.length > 0 ? String.format(msg, params) : msg);\n+        }\n+    }\n+\n+    public void debug(String msg, Object... params)\n+    {\n+        if (LOG_LEVEL >= LogService.LOG_DEBUG)\n+        {\n+            log(LogService.LOG_DEBUG, params.length > 0 ? String.format(msg, params) : msg);\n+        }\n+    }\n+\n+    public void error(String msg, Object... params)\n+    {\n+        log(LogService.LOG_ERROR, params.length > 0 ? String.format(msg, params) : msg);\n+    }\n+\n+    public void error(String msg, Throwable err, Object... params)\n+    {\n+        log(LogService.LOG_ERROR, params.length > 0 ? String.format(msg, params) : msg, err);\n+    }\n+\n+    public void error(Throwable err)\n+    {\n+        log(LogService.LOG_ERROR, \"error\", err);\n+    }\n+}",
                "raw_url": "https://github.com/apache/felix/raw/cc125701b343e3883048c5bca4bba58014aea1d6/configadmin/src/test/java/org/apache/felix/cm/integration/helper/Log.java",
                "sha": "d30da00dbe2164a6837484272dd6b077b6613372",
                "status": "added"
            }
        ],
        "message": "FELIX-4385: Applied the patch fixing the NPE when configuration is deleted at the same time \nthe corresponding ManagedService service is unregistered from the OSGi registry.\nAlso added the corresponding integration test.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1563946 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/a55c41beb8f26397554741d62e4cd0cfb935f6ab",
        "patched_files": [
            "Log.java",
            "ConfigurationManager.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "FELIX4385_StressTest.java",
            "ConfigurationManagerTest.java"
        ]
    },
    "felix_ce6a80c": {
        "bug_id": "felix_ce6a80c",
        "commit": "https://github.com/apache/felix/commit/ce6a80c41ce2473de68074618a86faaf10b7fc0c",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/felix/blob/ce6a80c41ce2473de68074618a86faaf10b7fc0c/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java?ref=ce6a80c41ce2473de68074618a86faaf10b7fc0c",
                "deletions": 0,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "patch": "@@ -192,6 +192,9 @@ private ComponentConfigurationDTO managerToConfiguration(ComponentManager<?> man\n \n \tprivate ServiceReferenceDTO serviceReferenceToDTO( ServiceReference<?> serviceRef)\n \t{\n+\t    if (serviceRef == null)\n+\t        return null;\n+\n \t\tServiceReferenceDTO dto = new ServiceReferenceDTO();\n \t\tdto.bundle = serviceRef.getBundle().getBundleId();\n \t\tdto.id = (Long) serviceRef.getProperty(Constants.SERVICE_ID);",
                "raw_url": "https://github.com/apache/felix/raw/ce6a80c41ce2473de68074618a86faaf10b7fc0c/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "sha": "eb43a329bec874308b46350dcb6bddbf5edf36a0",
                "status": "modified"
            }
        ],
        "message": "FELIX-4883 Fix NPE when creating ServiceReferenceDTO\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1681073 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/4215fe371e0e2902cc3952b4d55619f9905c8e9b",
        "patched_files": [
            "ServiceComponentRuntimeImpl.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ServiceComponentRuntimeImplTest.java"
        ]
    },
    "felix_cf6665e": {
        "bug_id": "felix_cf6665e",
        "commit": "https://github.com/apache/felix/commit/cf6665e272505981b8236f3c6a54ac5be888ed8b",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/felix/blob/cf6665e272505981b8236f3c6a54ac5be888ed8b/deploymentadmin/autoconf/pom.xml",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/deploymentadmin/autoconf/pom.xml?ref=cf6665e272505981b8236f3c6a54ac5be888ed8b",
                "deletions": 3,
                "filename": "deploymentadmin/autoconf/pom.xml",
                "patch": "@@ -85,9 +85,19 @@\n                         <Bundle-Name>Apache Felix AutoConf Resource Processor</Bundle-Name>\n                         <Bundle-Description>A customizer bundle that publishes a Resource Processor service that processes configuration resources shipped in a Deployment Package.</Bundle-Description>\n                         <Bundle-Vendor>The Apache Software Foundation</Bundle-Vendor>\n-                        <Private-Package>org.apache.felix.deployment.rp.autoconf, org.apache.felix.metatype, org.apache.felix.metatype.internal.l10n, org.apache.felix.metatype.internal, org.kxml2.io;-split-package:=merge-first, org.xmlpull.v1;-split-package:=merge-first, org.osgi.service.metatype;-split-package:=merge-first</Private-Package>\n-                        <Import-Package>org.apache.felix.dm,org.osgi.service.deploymentadmin,org.osgi.service.deploymentadmin.spi,org.osgi.service.event,org.osgi.service.log,*</Import-Package>\n-                        <Export-Package>org.osgi.service.deploymentadmin.spi;version=\"1.0\",org.osgi.service.metatype;version=\"1.2\"</Export-Package>\n+                        <Private-Package>\n+                        \torg.apache.felix.deployment.rp.autoconf,\n+                        \torg.apache.felix.metatype,\n+                        \torg.apache.felix.metatype.internal.l10n,\n+                        \torg.apache.felix.metatype.internal,\n+                        \torg.kxml2.io; -split-package:=merge-first,\n+                        \torg.xmlpull.v1; -split-package:=merge-first,\n+                        \torg.osgi.service.metatype; -split-package:=merge-first\n+                       \t</Private-Package>\n+                        <Export-Package>\n+                        \torg.osgi.service.deploymentadmin.spi; -split-package:=merge-last;version=\"1.0\",\n+                        \torg.osgi.service.metatype; -split-package:=merge-last;version=\"1.2\"\n+                       \t</Export-Package>\n                         <DeploymentPackage-Customizer>true</DeploymentPackage-Customizer>\n                         <Deployment-ProvidesResourceProcessor>org.osgi.deployment.rp.autoconf</Deployment-ProvidesResourceProcessor>\n                     </instructions>",
                "raw_url": "https://github.com/apache/felix/raw/cf6665e272505981b8236f3c6a54ac5be888ed8b/deploymentadmin/autoconf/pom.xml",
                "sha": "0406d3af4d5b4b4b74f8607639d492086f0d2748",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/felix/blob/cf6665e272505981b8236f3c6a54ac5be888ed8b/deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/Activator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/Activator.java?ref=cf6665e272505981b8236f3c6a54ac5be888ed8b",
                "deletions": 1,
                "filename": "deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/Activator.java",
                "patch": "@@ -38,7 +38,7 @@\n     public void init(BundleContext context, DependencyManager manager) throws Exception {\n     \tDictionary properties = new Properties();\n         properties.put(Constants.SERVICE_PID, \"org.osgi.deployment.rp.autoconf\");\n-        \n+\n         AutoConfResourceProcessor processor = new AutoConfResourceProcessor();\n         manager.add(createComponent()\n             .setInterface(ResourceProcessor.class.getName(), properties)",
                "raw_url": "https://github.com/apache/felix/raw/cf6665e272505981b8236f3c6a54ac5be888ed8b/deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/Activator.java",
                "sha": "0a31cfab07e9779b44a2b52e589de416d864aead",
                "status": "modified"
            },
            {
                "additions": 132,
                "blob_url": "https://github.com/apache/felix/blob/cf6665e272505981b8236f3c6a54ac5be888ed8b/deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/AutoConfResource.java",
                "changes": 213,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/AutoConfResource.java?ref=cf6665e272505981b8236f3c6a54ac5be888ed8b",
                "deletions": 81,
                "filename": "deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/AutoConfResource.java",
                "patch": "@@ -18,95 +18,146 @@\n  */\n package org.apache.felix.deployment.rp.autoconf;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import java.util.Dictionary;\n \n-public class AutoConfResource implements Serializable {\n+import org.osgi.framework.Filter;\n+import org.osgi.framework.FrameworkUtil;\n+import org.osgi.framework.InvalidSyntaxException;\n \n-\tprivate static final long serialVersionUID = 1L;\n-\t\n-\tprivate final String m_pid;\n-\tprivate final String m_factoryPid;\n-\tprivate final Dictionary m_properties;\n-\tprivate final String m_bundleLoc;\n-\tprivate final boolean m_merge;\n-\tprivate final String m_name;\n-\tprivate final String m_filter;\n+public class AutoConfResource implements Serializable\n+{\n+    private static final long serialVersionUID = 1L;\n \n-\tprivate String m_alias = null;\n+    private final String m_pid;\n+    private final String m_factoryPid;\n+    private final Dictionary m_properties;\n+    private final String m_bundleLoc;\n+    private final boolean m_merge;\n+    private final String m_name;\n \n-\t\n-\tpublic AutoConfResource(String name, String pid, String factoryPid, String bundleLocation, boolean merge, Dictionary properties, String filter) {\n-\t\tm_name = name;\n-\t\tm_pid = pid;\n+    private transient Filter m_filter;\n+    private String m_alias = null;\n+\n+    public AutoConfResource(String name, String pid, String factoryPid, String bundleLocation, boolean merge, Dictionary properties, Filter filter)\n+    {\n+        m_name = name;\n+        m_pid = pid;\n         m_filter = filter;\n-\t\tm_factoryPid = (factoryPid == null) ? \"\" : factoryPid;\n-\t\tm_bundleLoc = bundleLocation;\n-\t\tm_merge = merge;\n-\t\tm_properties = properties;\n-\t}\n-\n-\tpublic String getName() {\n-\t\treturn m_name;\n-\t}\n-\t\n-\tpublic String getPid() {\n-\t\treturn m_pid;\n-\t}\n-\t\n-\tpublic String getFilter() {\n+        m_factoryPid = (factoryPid == null) ? \"\" : factoryPid;\n+        m_bundleLoc = bundleLocation;\n+        m_merge = merge;\n+        m_properties = properties;\n+    }\n+\n+    public String getName()\n+    {\n+        return m_name;\n+    }\n+\n+    public String getPid()\n+    {\n+        return m_pid;\n+    }\n+\n+    public Filter getFilter()\n+    {\n         return m_filter;\n     }\n \n-\t/**\n-\t * Returns empty string if this configuration is not a factory configuration, otherwise the factory\n-\t * PID is returned.\n-\t * \n-\t * @return Empty string if this is not a factory configuration resource, else the factory PID is returned.\n-\t */\n-\tpublic String getFactoryPid() {\n-\t\treturn m_factoryPid;\n-\t}\n-\n-\tpublic Dictionary getProperties() {\n-\t\treturn m_properties;\n-\t}\n-\t\n-\tpublic String getBundleLocation() {\n-\t\treturn m_bundleLoc;\n-\t}\n-\t\n-\tpublic boolean isMerge() {\n-\t\treturn m_merge;\n-\t}\n-\t\n-\tpublic boolean isFactoryConfig() {\n-\t\treturn !(m_factoryPid == null || \"\".equals(m_factoryPid));\n-\t}\n-\t\n-\tpublic void setGeneratedPid(String alias) {\n-\t\tm_alias = alias;\n-\t}\n-\t\n-\tpublic String getGeneratedPid() {\n-\t\tif (m_alias == null) {\n-\t\t\tthrow new IllegalStateException(\"Must set an alias first.\");\n-\t\t}\n-\t\treturn m_alias;\n-\t}\n-\t\n-\t/**\n-\t * Determine if the specified <code>AutoConfResource</code> is meant to be used for the same <code>Configuration</code> as this object.\n-\t *  \n-\t * @param resource The <code>AutoConfResource</code> to compare with.\n-\t * @return Returns <code>true</code> if the two resources are meant to be used for the same <code>Configuration</code> object, false otherwise.\n-\t */\n-\tpublic boolean equalsTargetConfiguration(AutoConfResource resource) {\n-\t\tif (isFactoryConfig()) {\n-\t\t\treturn m_pid.equals(resource.getPid()) && m_factoryPid.equals(resource.getFactoryPid());\n-\t\t}\n-\t\telse {\n-\t\t\treturn m_pid.equals(resource.getPid());\n-\t\t}\n-\t}\n+    /**\n+     * Returns empty string if this configuration is not a factory configuration, otherwise the factory\n+     * PID is returned.\n+     * \n+     * @return Empty string if this is not a factory configuration resource, else the factory PID is returned.\n+     */\n+    public String getFactoryPid()\n+    {\n+        return m_factoryPid;\n+    }\n+\n+    public Dictionary getProperties()\n+    {\n+        return m_properties;\n+    }\n+\n+    public String getBundleLocation()\n+    {\n+        return m_bundleLoc;\n+    }\n+\n+    public boolean isMerge()\n+    {\n+        return m_merge;\n+    }\n+\n+    public boolean isFactoryConfig()\n+    {\n+        return !(m_factoryPid == null || \"\".equals(m_factoryPid));\n+    }\n+\n+    public void setGeneratedPid(String alias)\n+    {\n+        m_alias = alias;\n+    }\n+\n+    public String getGeneratedPid()\n+    {\n+        if (m_alias == null)\n+        {\n+            throw new IllegalStateException(\"Must set an alias first.\");\n+        }\n+        return m_alias;\n+    }\n+\n+    /**\n+     * Determine if the specified <code>AutoConfResource</code> is meant to be used for the same <code>Configuration</code> as this object.\n+     *  \n+     * @param resource The <code>AutoConfResource</code> to compare with.\n+     * @return Returns <code>true</code> if the two resources are meant to be used for the same <code>Configuration</code> object, false otherwise.\n+     */\n+    public boolean equalsTargetConfiguration(AutoConfResource resource)\n+    {\n+        if (isFactoryConfig())\n+        {\n+            return m_pid.equals(resource.getPid()) && m_factoryPid.equals(resource.getFactoryPid());\n+        }\n+        else\n+        {\n+            return m_pid.equals(resource.getPid());\n+        }\n+    }\n+\n+    private void writeObject(ObjectOutputStream out) throws IOException\n+    {\n+        out.defaultWriteObject();\n+        if (m_filter != null)\n+        {\n+            out.writeUTF(m_filter.toString());\n+        }\n+        else\n+        {\n+            out.writeUTF(\"\");\n+        }\n+    }\n+\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException\n+    {\n+        in.defaultReadObject();\n+        String filter = in.readUTF();\n+        if (!\"\".equals(filter))\n+        {\n+            try\n+            {\n+                m_filter = FrameworkUtil.createFilter(filter);\n+            }\n+            catch (InvalidSyntaxException e)\n+            {\n+                throw new IOException(\"Unable to parse serialized filter: \" + e.getMessage());\n+            }\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/felix/raw/cf6665e272505981b8236f3c6a54ac5be888ed8b/deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/AutoConfResource.java",
                "sha": "ca7e936b5674518d3801343189d336e59362a420",
                "status": "modified"
            },
            {
                "additions": 551,
                "blob_url": "https://github.com/apache/felix/blob/cf6665e272505981b8236f3c6a54ac5be888ed8b/deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/AutoConfResourceProcessor.java",
                "changes": 1066,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/AutoConfResourceProcessor.java?ref=cf6665e272505981b8236f3c6a54ac5be888ed8b",
                "deletions": 515,
                "filename": "deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/AutoConfResourceProcessor.java",
                "patch": "@@ -18,33 +18,32 @@\n  */\n package org.apache.felix.deployment.rp.autoconf;\n \n+import static org.osgi.service.deploymentadmin.spi.ResourceProcessorException.CODE_OTHER_ERROR;\n+\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.Dictionary;\n import java.util.Enumeration;\n import java.util.HashMap;\n-import java.util.Hashtable;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n-import java.util.Set;\n-import java.util.Vector;\n+import java.util.concurrent.atomic.AtomicReference;\n \n import org.apache.felix.dm.Component;\n import org.apache.felix.dm.DependencyManager;\n-import org.apache.felix.metatype.Attribute;\n import org.apache.felix.metatype.Designate;\n+import org.apache.felix.metatype.DesignateObject;\n import org.apache.felix.metatype.MetaData;\n import org.apache.felix.metatype.MetaDataReader;\n import org.apache.felix.metatype.OCD;\n import org.osgi.framework.Bundle;\n-import org.osgi.framework.BundleContext;\n import org.osgi.framework.Filter;\n+import org.osgi.framework.FrameworkUtil;\n import org.osgi.framework.InvalidSyntaxException;\n import org.osgi.framework.ServiceReference;\n import org.osgi.service.cm.Configuration;\n@@ -56,386 +55,495 @@\n import org.osgi.service.event.EventConstants;\n import org.osgi.service.event.EventHandler;\n import org.osgi.service.log.LogService;\n-import org.osgi.service.metatype.AttributeDefinition;\n import org.osgi.service.metatype.MetaTypeInformation;\n import org.osgi.service.metatype.MetaTypeService;\n import org.osgi.service.metatype.ObjectClassDefinition;\n \n-public class AutoConfResourceProcessor implements ResourceProcessor, EventHandler {\n-    private static final int CODE_OTHER_ERROR = ResourceProcessorException.CODE_OTHER_ERROR;\n-    private static final String LOCATION_PREFIX = \"osgi-dp:\";\n+public class AutoConfResourceProcessor implements ResourceProcessor, EventHandler\n+{\n     public static final String CONFIGURATION_ADMIN_FILTER_ATTRIBUTE = \"filter\";\n \n-\t// dependencies injected by Dependency Manager\n-\tprivate volatile LogService m_log;\n-\tprivate volatile ConfigurationAdmin m_configAdmin;\n-\tprivate volatile MetaTypeService m_metaService;\n-\tprivate volatile BundleContext m_bc;\n+    private static final String LOCATION_PREFIX = \"osgi-dp:\";\n+\n+    // dependencies injected by Dependency Manager\n+    private volatile LogService m_log;\n+    private volatile MetaTypeService m_metaService;\n     private volatile DependencyManager m_dm;\n-    \n-\tprivate Component m_component;\n-\t\n-\tprivate final Object m_lock = new Object(); // protects the members below\n-\n-\tprivate DeploymentSession m_session = null;\n-\tprivate final Map m_toBeInstalled = new HashMap(); // Map<String, List<AutoConfResource>>\n-\tprivate final Map m_toBeDeleted = new HashMap();\n-\t\n-\tprivate PersistencyManager m_persistencyManager;\n-\n-\tpublic void start() throws IOException {\n-\t\tFile root = m_bc.getDataFile(\"\");\n-\t\tif (root == null) {\n-\t\t\tthrow new IOException(\"No file system support\");\n-\t\t}\n-\t\tm_persistencyManager = new PersistencyManager(root);\n-\t}\n-\t\n-    public void begin(DeploymentSession session) {\n+    // Locally managed\n+    private Component m_component;\n+    private PersistencyManager m_persistencyManager;\n+\n+    private final Object m_lock; // protects the members below\n+    private final Map<String, List<AutoConfResource>> m_toBeInstalled;\n+    private final Map<String, List<AutoConfResource>> m_toBeDeleted;\n+    private final AtomicReference<DeploymentSession> m_sessionRef;\n+    private final List<ConfigurationAdminTask> m_configurationAdminTasks;\n+    private final List<PostCommitTask> m_postCommitTasks;\n+\n+    public AutoConfResourceProcessor()\n+    {\n+        m_lock = new Object();\n+        m_sessionRef = new AtomicReference<DeploymentSession>();\n+        m_toBeInstalled = new HashMap<String, List<AutoConfResource>>();\n+        m_toBeDeleted = new HashMap<String, List<AutoConfResource>>();\n+        m_configurationAdminTasks = new ArrayList<ConfigurationAdminTask>();\n+        m_postCommitTasks = new ArrayList<PostCommitTask>();\n+    }\n+\n+    /**\n+     * Called by Felix DM for the component created in {@link #commit()}.\n+     */\n+    public void addConfigurationAdmin(ServiceReference ref, ConfigurationAdmin ca)\n+    {\n+        m_log.log(LogService.LOG_DEBUG, \"found configuration admin \" + ref);\n+\n+        List<ConfigurationAdminTask> configAdminTasks;\n+        synchronized (m_lock)\n+        {\n+            configAdminTasks = new ArrayList<ConfigurationAdminTask>(m_configurationAdminTasks);\n+        }\n+\n+        for (ConfigurationAdminTask task : configAdminTasks)\n+        {\n+            try\n+            {\n+                Filter filter = task.getFilter();\n+                if ((filter == null) || (filter != null && filter.match(ref)))\n+                {\n+                    task.run(m_persistencyManager, ca);\n+                }\n+            }\n+            catch (Exception e)\n+            {\n+                m_log.log(LogService.LOG_ERROR, \"Exception during configuration to \" + ca + \". Trying to continue.\", e);\n+            }\n+        }\n+\n+        m_log.log(LogService.LOG_DEBUG, \"found configuration admin \" + ref + \" done\");\n+    }\n+\n+    public void begin(DeploymentSession session)\n+    {\n         m_log.log(LogService.LOG_DEBUG, \"beginning session \" + session);\n-        synchronized (m_lock) {\n-            if (m_session != null) {\n+\n+        synchronized (m_lock)\n+        {\n+            DeploymentSession current = m_sessionRef.get();\n+            if (current != null)\n+            {\n                 throw new IllegalArgumentException(\"Trying to begin new deployment session while already in one.\");\n             }\n-            if (session == null) {\n+            if (session == null)\n+            {\n                 throw new IllegalArgumentException(\"Trying to begin new deployment session with a null session.\");\n             }\n-            if (!m_toBeInstalled.isEmpty() || !m_toBeDeleted.isEmpty() || !m_configurationAdminTasks.isEmpty() || !m_postCommitTasks.isEmpty() || m_component != null) {\n+            if (!m_toBeInstalled.isEmpty() || !m_toBeDeleted.isEmpty() || !m_configurationAdminTasks.isEmpty() || !m_postCommitTasks.isEmpty() || m_component != null)\n+            {\n                 throw new IllegalStateException(\"State not reset correctly at start of session.\");\n             }\n-            m_session = session;\n+            m_sessionRef.set(session);\n         }\n     }\n- \n-    public void process(String name, InputStream stream) throws ResourceProcessorException {\n-        m_log.log(LogService.LOG_DEBUG, \"processing \" + name);\n-        // initial validation\n-        synchronized (m_lock) {\n-            if (m_session == null) {\n-                throw new ResourceProcessorException(CODE_OTHER_ERROR, \"Can not process resource without a Deployment Session\");\n+\n+    public void cancel()\n+    {\n+        m_log.log(LogService.LOG_DEBUG, \"cancel\");\n+        rollback();\n+    }\n+\n+    public void commit()\n+    {\n+        m_log.log(LogService.LOG_DEBUG, \"commit\");\n+\n+        Dictionary properties = new Properties();\n+        properties.put(EventConstants.EVENT_TOPIC, org.apache.felix.deploymentadmin.Constants.EVENTTOPIC_COMPLETE);\n+        m_component = m_dm.createComponent()\n+            .setInterface(EventHandler.class.getName(), properties)\n+            .setImplementation(this)\n+            .setCallbacks(null, null, null, null)\n+            .setAutoConfig(Component.class, false)\n+            .add(m_dm.createServiceDependency()\n+                    .setService(ConfigurationAdmin.class)\n+                    .setCallbacks(\"addConfigurationAdmin\", null)\n+                    .setRequired(false)\n+        );\n+        m_dm.add(m_component);\n+\n+        m_log.log(LogService.LOG_DEBUG, \"commit done\");\n+    }\n+\n+    public void dropAllResources() throws ResourceProcessorException\n+    {\n+        m_log.log(LogService.LOG_DEBUG, \"drop all resources\");\n+\n+        assertInDeploymentSession(\"Can not drop all resources without a Deployment Session\");\n+\n+        for (String name : m_persistencyManager.getResourceNames())\n+        {\n+            dropped(name);\n+        }\n+\n+        m_log.log(LogService.LOG_DEBUG, \"drop all resources done\");\n+    }\n+\n+    public void dropped(String name) throws ResourceProcessorException\n+    {\n+        m_log.log(LogService.LOG_DEBUG, \"dropped \" + name);\n+\n+        assertInDeploymentSession(\"Can not drop resource without a Deployment Session\");\n+\n+        Map<String, List<AutoConfResource>> toBeDeleted;\n+        synchronized (m_lock)\n+        {\n+            toBeDeleted = new HashMap<String, List<AutoConfResource>>(m_toBeDeleted);\n+        }\n+\n+        try\n+        {\n+            List<AutoConfResource> resources = m_persistencyManager.load(name);\n+\n+            if (!toBeDeleted.containsKey(name))\n+            {\n+                toBeDeleted.put(name, new ArrayList());\n             }\n+            toBeDeleted.get(name).addAll(resources);\n         }\n-        MetaDataReader reader = new MetaDataReader();\n-        MetaData data = null;\n-        try {\n-            data = reader.parse(stream);\n+        catch (IOException ioe)\n+        {\n+            throw new ResourceProcessorException(CODE_OTHER_ERROR, \"Unable to drop resource: \" + name, ioe);\n         }\n-        catch (IOException e) {\n-            throw new ResourceProcessorException(CODE_OTHER_ERROR, \"Unable to process resource.\", e);\n+\n+        synchronized (m_lock)\n+        {\n+            m_toBeDeleted.putAll(toBeDeleted);\n         }\n-        if (data == null) {\n-            throw new ResourceProcessorException(CODE_OTHER_ERROR, \"Supplied configuration is not conform the metatype xml specification.\");\n+\n+        m_log.log(LogService.LOG_DEBUG, \"dropped \" + name + \" done\");\n+    }\n+\n+    public void handleEvent(Event event)\n+    {\n+        // regardless of the outcome, we simply invoke postcommit\n+        postcommit();\n+    }\n+\n+    public void postcommit()\n+    {\n+        m_log.log(LogService.LOG_DEBUG, \"post commit\");\n+\n+        List<PostCommitTask> postCommitTasks;\n+        synchronized (m_lock)\n+        {\n+            postCommitTasks = new ArrayList<PostCommitTask>(m_postCommitTasks);\n         }\n-        // process resources\n-        String filter = null;\n-        Map optionalAttributes = data.getOptionalAttributes();\n-        if (optionalAttributes != null) {\n-            filter = (String) optionalAttributes.get(AutoConfResourceProcessor.CONFIGURATION_ADMIN_FILTER_ATTRIBUTE);\n+\n+        for (PostCommitTask task : postCommitTasks)\n+        {\n+            try\n+            {\n+                task.run(m_persistencyManager);\n+            }\n+            catch (Exception e)\n+            {\n+                m_log.log(LogService.LOG_ERROR, \"Exception during post commit wrap-up. Trying to continue.\", e);\n+            }\n         }\n+\n+        endSession();\n+\n+        m_log.log(LogService.LOG_DEBUG, \"post commit done\");\n+    }\n+\n+    public void prepare() throws ResourceProcessorException\n+    {\n+        m_log.log(LogService.LOG_DEBUG, \"prepare\");\n+\n+        assertInDeploymentSession(\"Can not prepare resource without a Deployment Session\");\n+\n+        Map<String, List<AutoConfResource>> toBeDeleted;\n+        Map<String, List<AutoConfResource>> toBeInstalled;\n+        synchronized (m_lock)\n+        {\n+            toBeDeleted = new HashMap<String, List<AutoConfResource>>(m_toBeDeleted);\n+            toBeInstalled = new HashMap<String, List<AutoConfResource>>(m_toBeInstalled);\n+        }\n+\n+        List<ConfigurationAdminTask> configAdminTasks = new ArrayList<ConfigurationAdminTask>();\n+        List<PostCommitTask> postCommitTasks = new ArrayList<PostCommitTask>();\n+\n+        m_log.log(LogService.LOG_DEBUG, \"prepare delete\");\n+        // delete dropped resources\n+        for (Map.Entry<String, List<AutoConfResource>> entry : toBeDeleted.entrySet())\n+        {\n+            String name = entry.getKey();\n+            for (AutoConfResource resource : entry.getValue())\n+            {\n+                configAdminTasks.add(new DropResourceTask(resource));\n+            }\n+            postCommitTasks.add(new DeleteResourceTask(name));\n+        }\n+\n+        m_log.log(LogService.LOG_DEBUG, \"prepare install/update\");\n+        // install new/updated resources\n+        for (Map.Entry<String, List<AutoConfResource>> entry : toBeInstalled.entrySet())\n+        {\n+            String name = entry.getKey();\n+\n+            List<AutoConfResource> existingResources = null;\n+            try\n+            {\n+                existingResources = m_persistencyManager.load(name);\n+            }\n+            catch (IOException ioe)\n+            {\n+                throw new ResourceProcessorException(ResourceProcessorException.CODE_PREPARE, \"Unable to read existing resources for resource \" + name, ioe);\n+            }\n+\n+            List<AutoConfResource> resources = entry.getValue();\n+            for (AutoConfResource resource : resources)\n+            {\n+                // When updating existing configurations, make sure that we delete the ones that have become obsolete... \n+                if (existingResources != null)\n+                {\n+                    Iterator<AutoConfResource> iter = existingResources.iterator();\n+                    while (iter.hasNext())\n+                    {\n+                        AutoConfResource existing = iter.next();\n+                        if (existing.equalsTargetConfiguration(resource))\n+                        {\n+                            iter.remove();\n+                        }\n+                    }\n+                }\n+\n+                configAdminTasks.add(new InstallOrUpdateResourceTask(resource));\n+            }\n+            // remove existing configurations that were not in the new version of the resource\n+            for (AutoConfResource existingResource : existingResources)\n+            {\n+                configAdminTasks.add(new DropResourceTask(existingResource));\n+            }\n+\n+            postCommitTasks.add(new StoreResourceTask(name, resources));\n+        }\n+\n+        synchronized (m_lock)\n+        {\n+            m_configurationAdminTasks.addAll(configAdminTasks);\n+            m_postCommitTasks.addAll(postCommitTasks);\n+        }\n+\n+        m_log.log(LogService.LOG_DEBUG, \"prepare done\");\n+    }\n+\n+    public void process(String name, InputStream stream) throws ResourceProcessorException\n+    {\n+        m_log.log(LogService.LOG_DEBUG, \"processing \" + name);\n+\n+        // initial validation\n+        assertInDeploymentSession(\"Can not process resource without a Deployment Session\");\n+\n+        Map<String, List<AutoConfResource>> toBeInstalled;\n+        synchronized (m_lock)\n+        {\n+            toBeInstalled = new HashMap<String, List<AutoConfResource>>(m_toBeInstalled);\n+        }\n+\n+        MetaData data = parseAutoConfResource(stream);\n+        // process resources\n+        Filter filter = getFilter(data);\n+\n         // add to session data\n-        if (!m_toBeInstalled.containsKey(name)) {\n-            m_toBeInstalled.put(name, new ArrayList());\n+        if (!toBeInstalled.containsKey(name))\n+        {\n+            toBeInstalled.put(name, new ArrayList<AutoConfResource>());\n         }\n-        List designates = data.getDesignates();\n-        if (designates == null || designates.isEmpty()) {\n+\n+        List<Designate> designates = data.getDesignates();\n+        if (designates == null || designates.isEmpty())\n+        {\n             // if there are no designates, there's nothing to process\n             m_log.log(LogService.LOG_INFO, \"No designates found in the resource, so there's nothing to process.\");\n             return;\n         }\n-        Map localOcds = data.getObjectClassDefinitions();\n-        if (localOcds == null) {\n-            localOcds = Collections.EMPTY_MAP;\n+\n+        Map<String, OCD> localOcds = data.getObjectClassDefinitions();\n+        if (localOcds == null)\n+        {\n+            localOcds = Collections.emptyMap();\n         }\n-        Iterator i = designates.iterator();\n-        while (i.hasNext()) {\n-            Designate designate = (Designate) i.next();\n-            \n+\n+        for (Designate designate : designates)\n+        {\n             // check object\n-            if (designate.getObject() == null) {\n+            DesignateObject objectDef = designate.getObject();\n+            if (objectDef == null)\n+            {\n                 throw new ResourceProcessorException(CODE_OTHER_ERROR, \"Designate Object child missing or invalid\");\n             }\n-            \n+\n             // check attributes\n-            if (designate.getObject().getAttributes() == null || designate.getObject().getAttributes().size() == 0) {\n+            if (objectDef.getAttributes() == null || objectDef.getAttributes().isEmpty())\n+            {\n                 throw new ResourceProcessorException(CODE_OTHER_ERROR, \"Object Attributes child missing or invalid\");\n             }\n-            \n+\n             // check ocdRef\n-            String ocdRef = designate.getObject().getOcdRef();\n-            if (ocdRef == null || \"\".equals(ocdRef)) {\n+            String ocdRef = objectDef.getOcdRef();\n+            if (ocdRef == null || \"\".equals(ocdRef))\n+            {\n                 throw new ResourceProcessorException(CODE_OTHER_ERROR, \"Object ocdRef attribute missing or invalid\");\n             }\n \n             // determine OCD\n             ObjectClassDefinition ocd = null;\n-            OCD localOcd = (OCD) localOcds.get(ocdRef);\n+            OCD localOcd = localOcds.get(ocdRef);\n             // ask meta type service for matching OCD if no local OCD has been defined\n             ocd = (localOcd != null) ? new ObjectClassDefinitionImpl(localOcd) : getMetaTypeOCD(data, designate);\n-            if (ocd == null) {\n+            if (ocd == null)\n+            {\n                 throw new ResourceProcessorException(CODE_OTHER_ERROR, \"No Object Class Definition found with id=\" + ocdRef);\n             }\n+\n             // determine configuration data based on the values and their type definition\n-            Dictionary dict = getProperties(designate, ocd);\n-            if (dict == null) {\n+            Dictionary dict = MetaTypeUtil.getProperties(designate, ocd);\n+            if (dict == null)\n+            {\n                 // designate does not match it's definition, but was marked optional, ignore it\n                 continue;\n             }\n-            List resources = (List) m_toBeInstalled.get(name);\n-            resources.add(new AutoConfResource(name, designate.getPid(), designate.getFactoryPid(), designate.getBundleLocation(), designate.isMerge(), dict, filter));\n-        }\n-        m_log.log(LogService.LOG_DEBUG, \"processing \" + name + \" done\");\n-    }\n \n-    public void dropped(String name) throws ResourceProcessorException {\n-        m_log.log(LogService.LOG_DEBUG, \"dropped \" + name);\n-        synchronized (m_lock) {\n-        \tif (m_session == null) {\n-        \t\tthrow new ResourceProcessorException(CODE_OTHER_ERROR, \"Can not process resource without a Deployment Session\");\n-        \t}\n-        }\n-    \ttry {\n-    \t\tList resources = m_persistencyManager.load(name);\n-    \t\tif (!m_toBeDeleted.containsKey(name)) {\n-    \t\t\tm_toBeDeleted.put(name, new ArrayList());\n-    \t\t}\n-    \t\t((List) m_toBeDeleted.get(name)).addAll(resources);\n-    \t}\n-    \tcatch (IOException ioe) {\n-    \t\tthrow new ResourceProcessorException(CODE_OTHER_ERROR, \"Unable to drop resource: \" + name, ioe);\n-    \t}\n-        m_log.log(LogService.LOG_DEBUG, \"dropped \" + name + \" done\");\n-    }\n+            AutoConfResource resource = new AutoConfResource(name, designate.getPid(), designate.getFactoryPid(), designate.getBundleLocation(), designate.isMerge(), dict, filter);\n+            \n+            toBeInstalled.get(name).add(resource);\n+        }\n \n-    public void dropAllResources() throws ResourceProcessorException {\n-        m_log.log(LogService.LOG_DEBUG, \"drop all resources\");\n-        synchronized (m_lock) {\n-        \tif (m_session == null) {\n-        \t\tthrow new ResourceProcessorException(CODE_OTHER_ERROR, \"Can not drop all resources without a Deployment Session\");\n-        \t}\n-        }\n-\n-    \tFile basedir = m_bc.getDataFile(\"\");\n-    \tif (basedir != null && basedir.isDirectory()) {\n-    \t\tString[] files = basedir.list();\n-    \t\tfor (int i = 0; i < files.length; i++) {\n-    \t\t\tdropped(files[i]);\n-    \t\t}\n-    \t}\n-    \telse {\n-    \t\tthrow new ResourceProcessorException(CODE_OTHER_ERROR, \"Unable to drop resources, data area is not accessible\");\n-    \t}\n-        m_log.log(LogService.LOG_DEBUG, \"drop all resources done\");\n-    }\n-    \n-    private List m_configurationAdminTasks = new ArrayList();\n-    private List m_postCommitTasks = new ArrayList();\n+        synchronized (m_lock)\n+        {\n+            m_toBeInstalled.putAll(toBeInstalled);\n+        }\n \n-    public void prepare() throws ResourceProcessorException {\n-        m_log.log(LogService.LOG_DEBUG, \"prepare\");\n-        synchronized (m_lock) {\n-        \tif (m_session == null) {\n-        \t\tthrow new ResourceProcessorException(CODE_OTHER_ERROR, \"Can not process resource without a Deployment Session\");\n-        \t}\n-        }\n-    \ttry {\n-            m_log.log(LogService.LOG_DEBUG, \"prepare delete\");\n-    \t\t// delete dropped resources\n-    \t\tfor (Iterator i = m_toBeDeleted.keySet().iterator(); i.hasNext();) {\n-    \t\t\tString name = (String) i.next();\n-    \t\t\tList resources = (List) m_toBeDeleted.get(name);\n-    \t\t\tfor (Iterator j = resources.iterator(); j.hasNext();) {\n-    \t\t\t\tAutoConfResource resource = (AutoConfResource) j.next();\n-    \t\t\t\tm_configurationAdminTasks.add(new DropResourceTask(resource));\n-    \t\t\t}\n-    \t\t\tm_postCommitTasks.add(new DeleteResourceTask(name));\n-    \t\t}\n-\n-            m_log.log(LogService.LOG_DEBUG, \"prepare install/update\");\n-    \t\t// install new/updated resources\n-    \t\tfor (Iterator j = m_toBeInstalled.keySet().iterator(); j.hasNext();) {\n-    \t\t\tString name = (String) j.next();\n-    \t\t\tList existingResources = null;\n-    \t\t\ttry {\n-    \t\t\t\texistingResources = m_persistencyManager.load(name);\n-    \t\t\t}\n-    \t\t\tcatch (IOException ioe) {\n-    \t\t\t\tthrow new ResourceProcessorException(ResourceProcessorException.CODE_PREPARE, \"Unable to read existing resources for resource \" + name, ioe);\n-    \t\t\t}\n-    \t\t\tList resources = (List) m_toBeInstalled.get(name);\n-    \t\t\tfor (Iterator iterator = resources.iterator(); iterator.hasNext();) {\n-    \t\t\t\tAutoConfResource resource = (AutoConfResource) iterator.next();\n-    \t\t\t\tm_configurationAdminTasks.add(new InstallOrUpdateResourceTask(resource));\n-    \t\t\t}\n-    \t\t\t// remove existing configurations that were not in the new version of the resource\n-    \t\t\tfor (Iterator i = existingResources.iterator(); i.hasNext();) {\n-    \t\t\t\tAutoConfResource existingResource = (AutoConfResource) i.next();\n-    \t\t\t\tConfiguration configuration = null;\n-    \t\t\t\tif (existingResource.isFactoryConfig()) {\n-    \t\t\t\t\tconfiguration = m_configAdmin.getConfiguration(existingResource.getGeneratedPid(), existingResource.getBundleLocation());\n-    \t\t\t\t} else {\n-    \t\t\t\t\tconfiguration = m_configAdmin.getConfiguration(existingResource.getPid(), existingResource.getBundleLocation());\n-    \t\t\t\t}\n-    \t\t\t\tconfiguration.delete();\n-    \t\t\t}\n-    \t\t\tm_postCommitTasks.add(new StoreResourceTask(name, resources));\n-    \t\t}\n-    \t}\n-    \tcatch (IOException ioe) {\n-    \t\tm_toBeInstalled.clear();\n-    \t\tthrow new ResourceProcessorException(ResourceProcessorException.CODE_PREPARE, \"Unable to prepare for commit for resource\", ioe);\n-    \t}\n-        m_log.log(LogService.LOG_DEBUG, \"prepare done\");\n+        m_log.log(LogService.LOG_DEBUG, \"processing \" + name + \" done\");\n     }\n \n-    public synchronized void commit() {\n-        m_log.log(LogService.LOG_DEBUG, \"commit\");\n+    public void rollback()\n+    {\n+        m_log.log(LogService.LOG_DEBUG, \"rollback\");\n \n-        Dictionary properties = new Properties();\n-        properties.put(EventConstants.EVENT_TOPIC, org.apache.felix.deploymentadmin.Constants.EVENTTOPIC_COMPLETE);\n-        m_component = m_dm.createComponent()\n-            .setInterface(EventHandler.class.getName(), properties)\n-            .setImplementation(this)\n-            .setCallbacks(null, null, null, null)\n-            .setAutoConfig(Component.class, false)\n-            .add(m_dm.createServiceDependency()\n-                .setService(ConfigurationAdmin.class)\n-                .setCallbacks(\"addConfigurationAdmin\", null)\n-                .setRequired(false));\n-        m_dm.add(m_component);\n+        Map<String, List<AutoConfResource>> toBeInstalled;\n+        synchronized (m_lock)\n+        {\n+            toBeInstalled = new HashMap<String, List<AutoConfResource>>(m_toBeInstalled);\n+        }\n \n-        m_log.log(LogService.LOG_DEBUG, \"commit done\");\n-    }\n-    \n-    public void addConfigurationAdmin(ServiceReference ref, ConfigurationAdmin ca) {\n-        m_log.log(LogService.LOG_DEBUG, \"found configuration admin \" + ref);\n-        Iterator iterator = m_configurationAdminTasks.iterator();\n-        while (iterator.hasNext()) {\n-            ConfigurationAdminTask task = (ConfigurationAdminTask) iterator.next();\n-            try {\n-                Filter filter = null;\n-                String filterString = task.getFilter();\n-                if (filterString != null) {\n-                    try {\n-                        filter = m_bc.createFilter(filterString);\n-                    }\n-                    catch (InvalidSyntaxException e) {\n-                        m_log.log(LogService.LOG_ERROR, \"Could not parse filter, ignoring it: \" + filterString, e);\n-                    }\n+        for (Map.Entry<String, List<AutoConfResource>> entry : toBeInstalled.entrySet())\n+        {\n+            for (AutoConfResource resource : entry.getValue())\n+            {\n+                String name = resource.getName();\n+                try\n+                {\n+                    dropped(name);\n                 }\n-                if (filter == null || filter != null && filter.match(ref)) {\n-                    task.run(m_persistencyManager, ca);\n+                catch (ResourceProcessorException e)\n+                {\n+                    m_log.log(LogService.LOG_ERROR, \"Unable to roll back resource '\" + name + \"', reason: \" + e.getMessage() + \", caused by: \" + e.getCause().getMessage());\n                 }\n-            }\n-            catch (Exception e) {\n-                m_log.log(LogService.LOG_ERROR, \"Exception during configuration to \" + ca + \". Trying to continue.\", e);\n+                break;\n             }\n         }\n-        m_log.log(LogService.LOG_DEBUG, \"found configuration admin \" + ref + \" done\");\n+\n+        endSession();\n+\n+        m_log.log(LogService.LOG_DEBUG, \"rollback done\");\n     }\n-    \n-    public void postcommit() {\n-        m_log.log(LogService.LOG_DEBUG, \"post commit\");\n-        Iterator iterator = m_postCommitTasks.iterator();\n-        while (iterator.hasNext()) {\n-            PostCommitTask task = (PostCommitTask) iterator.next();\n-            try {\n-                task.run(m_persistencyManager);\n-            }\n-            catch (Exception e) {\n-                m_log.log(LogService.LOG_ERROR, \"Exception during post commit wrap-up. Trying to continue.\", e);\n-            }\n+\n+    /**\n+     * Called by Felix DM when starting this component.\n+     */\n+    public void start() throws IOException\n+    {\n+        File root = m_dm.getBundleContext().getDataFile(\"\");\n+        if (root == null)\n+        {\n+            throw new IOException(\"No file system support\");\n         }\n-        endSession();\n-        m_log.log(LogService.LOG_DEBUG, \"post commit done\");\n+        m_persistencyManager = new PersistencyManager(root);\n     }\n \n-    private void endSession() {\n-        if (m_component != null) {\n-        \tm_dm.remove(m_component);\n-            m_component = null;\n+    private void assertInDeploymentSession(String msg) throws ResourceProcessorException\n+    {\n+        synchronized (m_lock)\n+        {\n+            DeploymentSession current = m_sessionRef.get();\n+            if (current == null)\n+            {\n+                throw new ResourceProcessorException(CODE_OTHER_ERROR, msg);\n+            }\n         }\n-        m_toBeInstalled.clear();\n-        m_toBeDeleted.clear();\n-        m_postCommitTasks.clear();\n-        m_configurationAdminTasks.clear();\n-        m_session = null;\n     }\n \n-    public void rollback() {\n-        m_log.log(LogService.LOG_DEBUG, \"rollback\");\n-    \tSet keys = m_toBeInstalled.keySet();\n-    \tfor (Iterator i = keys.iterator(); i.hasNext();) {\n-    \t\tList configs = (List) m_toBeInstalled.get(i.next());\n-    \t\tfor (Iterator j = configs.iterator(); j.hasNext();) {\n-    \t\t\tAutoConfResource resource = (AutoConfResource) j.next();\n-    \t\t\tString name = resource.getName();\n-    \t\t\ttry {\n-    \t\t\t\tdropped(name);\n-    \t\t\t}\n-    \t\t\tcatch (ResourceProcessorException e) {\n-    \t\t\t\tm_log.log(LogService.LOG_ERROR, \"Unable to roll back resource '\" + name + \"', reason: \" + e.getMessage() + \", caused by: \" + e.getCause().getMessage());\n-    \t\t\t}\n-    \t\t\tbreak;\n-    \t\t}\n-    \t}\n-    \tendSession();\n-        m_log.log(LogService.LOG_DEBUG, \"rollback done\");\n+    private void endSession()\n+    {\n+        if (m_component != null)\n+        {\n+            m_dm.remove(m_component);\n+            m_component = null;\n+        }\n+        synchronized (m_lock)\n+        {\n+            m_toBeInstalled.clear();\n+            m_toBeDeleted.clear();\n+            m_postCommitTasks.clear();\n+            m_configurationAdminTasks.clear();\n+            m_sessionRef.set(null);\n+        }\n     }\n \n-    public void cancel() {\n-        m_log.log(LogService.LOG_DEBUG, \"cancel\");\n-    \trollback();\n+    private Bundle getBundle(String bundleLocation, boolean isFactory) throws ResourceProcessorException\n+    {\n+        Bundle bundle = null;\n+        if (!isFactory)\n+        {\n+            // singleton configuration, no foreign bundles allowed, use source deployment package to find specified bundle\n+            if (bundleLocation.startsWith(LOCATION_PREFIX))\n+            {\n+                DeploymentSession session = m_sessionRef.get();\n+                bundle = session.getSourceDeploymentPackage().getBundle(bundleLocation.substring(LOCATION_PREFIX.length()));\n+            }\n+        }\n+        else\n+        {\n+            // factory configuration, foreign bundles allowed, use bundle context to find the specified bundle\n+            Bundle[] bundles = m_dm.getBundleContext().getBundles();\n+            for (int i = 0; i < bundles.length; i++)\n+            {\n+                String location = bundles[i].getLocation();\n+                if (bundleLocation.equals(location))\n+                {\n+                    bundle = bundles[i];\n+                    break;\n+                }\n+            }\n+        }\n+        return bundle;\n     }\n \n-    /**\n-     * Determines the actual configuration data based on the specified designate and object class definition\n-     * \n-     * @param designate The designate object containing the values for the properties\n-     * @param ocd The object class definition\n-     * @return A dictionary containing data as described in the designate and ocd objects, or <code>null</code> if the designate does not match it's\n-     * definition and the designate was marked as optional.\n-     * @throws ResourceProcessorException If the designate does not match the ocd and the designate is not marked as optional.\n-     */\n-    private Dictionary getProperties(Designate designate, ObjectClassDefinition ocd) throws ResourceProcessorException {\n-    \tDictionary properties = new Hashtable();\n-    \tAttributeDefinition[] attributeDefs = ocd.getAttributeDefinitions(ObjectClassDefinition.ALL);\n-    \tList attributes = designate.getObject().getAttributes();\n-\n-    \tfor (Iterator i = attributes.iterator(); i.hasNext();) {\n-    \t\tAttribute attribute = (Attribute) i.next();\n-\n-    \t\tString adRef = attribute.getAdRef();\n-    \t\tboolean found = false;\n-    \t\tfor(int j = 0; j < attributeDefs.length; j++) {\n-    \t\t\tAttributeDefinition ad = attributeDefs[j];\n-    \t\t\tif (adRef.equals(ad.getID())) {\n-    \t\t\t\t// found attribute definition\n-    \t\t\t\tObject value = getValue(attribute, ad);\n-    \t\t\t\tif (value == null) {\n-    \t\t\t\t\tif (designate.isOptional()) {\n-    \t\t\t\t\t\tproperties = null;\n-    \t\t\t\t\t\tbreak;\n-    \t\t\t\t\t}\n-    \t\t\t\t\telse {\n-    \t\t\t\t\t\tthrow new ResourceProcessorException(CODE_OTHER_ERROR, \"Could not match attribute to it's definition: adref=\" + adRef);\n-    \t\t\t\t\t}\n-    \t\t\t\t}\n-    \t\t\t\tproperties.put(adRef, value);\n-    \t\t\t\tfound = true;\n-    \t\t\t\tbreak;\n-    \t\t\t}\n-    \t\t}\n-    \t\tif (!found) {\n-    \t\t\tif (designate.isOptional()) {\n-    \t\t\t\tproperties = null;\n-    \t\t\t\tbreak;\n-    \t\t\t} else {\n-    \t\t\t\tthrow new ResourceProcessorException(CODE_OTHER_ERROR, \"Could not find attribute definition: adref=\" + adRef);\n-    \t\t\t}\n-    \t\t}\n-    \t}\n-\n-    \treturn properties;\n+    private Filter getFilter(MetaData data) throws ResourceProcessorException\n+    {\n+        Map optionalAttributes = data.getOptionalAttributes();\n+        if (optionalAttributes != null)\n+        {\n+            try\n+            {\n+                return FrameworkUtil.createFilter((String) optionalAttributes.get(AutoConfResourceProcessor.CONFIGURATION_ADMIN_FILTER_ATTRIBUTE));\n+            }\n+            catch (InvalidSyntaxException e)\n+            {\n+                throw new ResourceProcessorException(CODE_OTHER_ERROR, \"Unable to create filter!\", e);\n+            }\n+        }\n+        return null;\n     }\n \n     /**\n@@ -446,268 +554,200 @@ private Dictionary getProperties(Designate designate, ObjectClassDefinition ocd)\n      * @return\n      * @throws ResourceProcessorException\n      */\n-    private ObjectClassDefinition getMetaTypeOCD(MetaData data, Designate designate) throws ResourceProcessorException {\n-    \tObjectClassDefinition ocd = null;\n-    \tString ocdRef = designate.getObject().getOcdRef();\n-    \tBundle bundle = getBundle(designate.getBundleLocation(), isFactoryConfig(designate));\n-    \tif (bundle != null) {\n-    \t\tMetaTypeInformation mti = m_metaService.getMetaTypeInformation(bundle);\n-    \t\tif (mti != null) {\n-    \t\t\tString pid = isFactoryConfig(designate) ? pid = designate.getFactoryPid() : designate.getPid();\n-    \t\t\ttry {\n-    \t\t\t\tObjectClassDefinition tempOcd = mti.getObjectClassDefinition(pid, null);\n-    \t\t\t\t// tempOcd will always have a value, if pid was not known IAE will be thrown\n-    \t\t\t\tif (ocdRef.equals(tempOcd.getID())) {\n-    \t\t\t\t\tocd = tempOcd;\n-    \t\t\t\t}\n-    \t\t\t}\n-    \t\t\tcatch (IllegalArgumentException iae) {\n-    \t\t\t\t// let null be returned\n-    \t\t\t}\n-    \t\t}\n-    \t}\n-    \treturn ocd;\n-    }\n+    private ObjectClassDefinition getMetaTypeOCD(MetaData data, Designate designate) throws ResourceProcessorException\n+    {\n+        boolean isFactoryConfig = isFactoryConfig(designate);\n+\n+        Bundle bundle = getBundle(designate.getBundleLocation(), isFactoryConfig);\n+        if (bundle == null)\n+        {\n+            return null;\n+        }\n \n-    private boolean isFactoryConfig(Designate designate) {\n-    \tString factoryPid = designate.getFactoryPid();\n-    \treturn (factoryPid != null && !\"\".equals(factoryPid));\n-    }\n+        MetaTypeInformation mti = m_metaService.getMetaTypeInformation(bundle);\n+        if (mti == null)\n+        {\n+            return null;\n+        }\n \n-    private Bundle getBundle(String bundleLocation, boolean isFactory) throws ResourceProcessorException {\n-    \tBundle bundle = null;\n-    \tif (!isFactory) {\n-    \t\t// singleton configuration, no foreign bundles allowed, use source deployment package to find specified bundle\n-    \t\tif (bundleLocation.startsWith(LOCATION_PREFIX)) {\n-    \t\t\tbundle = m_session.getSourceDeploymentPackage().getBundle(bundleLocation.substring(LOCATION_PREFIX.length()));\n-    \t\t}\n-    \t}\n-    \telse {\n-    \t\t// factory configuration, foreign bundles allowed, use bundle context to find the specified bundle\n-    \t\tBundle[] bundles = m_bc.getBundles();                                                                               \n-    \t\tfor (int i = 0; i < bundles.length; i++) {\n-    \t\t\tString location = bundles[i].getLocation();\n-    \t\t\tif (bundleLocation.equals(location)) {\n-    \t\t\t\tbundle = bundles[i];\n-    \t\t\t\tbreak;\n-    \t\t\t}\n-    \t\t}\n-    \t}\n-    \treturn bundle;\n+        String pid = isFactoryConfig ? pid = designate.getFactoryPid() : designate.getPid();\n+        try\n+        {\n+            ObjectClassDefinition tempOcd = mti.getObjectClassDefinition(pid, null);\n+            // tempOcd will always have a value, if pid was not known IAE will be thrown\n+            String ocdRef = designate.getObject().getOcdRef();\n+            if (ocdRef.equals(tempOcd.getID()))\n+            {\n+                return tempOcd;\n+            }\n+        }\n+        catch (IllegalArgumentException iae)\n+        {\n+            // let null be returned\n+        }\n+\n+        return null;\n     }\n \n-    /**\n-     * Determines the value of an attribute based on an attribute definition\n-     * \n-     * @param attribute The attribute containing value(s)\n-     * @param ad The attribute definition\n-     * @return An <code>Object</code> reflecting what was specified in the attribute and it's definition or <code>null</code> if the value did not match it's definition.\n-     * @throws ResourceProcessorException in case we're unable to parse the value of an attribute.\n-     */\n-    private Object getValue(Attribute attribute, AttributeDefinition ad) throws ResourceProcessorException {\n-    \tif (attribute == null || ad == null || !attribute.getAdRef().equals(ad.getID())) {\n-    \t\t// wrong attribute or definition\n-    \t\treturn null;\n-    \t}\n-    \tString[] content = attribute.getContent();\n-\n-    \t// verify correct type of the value(s)\n-    \tint type = ad.getType();\n-    \tObject[] typedContent = null;\n-    \ttry {\n-    \t\tfor (int i = 0; i < content.length; i++) {\n-    \t\t\tString value = content[i];\n-    \t\t\tswitch (type) {\n-\t    \t\t\tcase AttributeDefinition.BOOLEAN:\n-\t    \t\t\t\ttypedContent = (typedContent == null) ? new Boolean[content.length] : typedContent;\n-\t    \t\t\t\ttypedContent[i] = Boolean.valueOf(value);\t\n-\t    \t\t\t\tbreak;\n-\t    \t\t\tcase AttributeDefinition.BYTE:\n-\t    \t\t\t\ttypedContent = (typedContent == null) ? new Byte[content.length] : typedContent;\n-\t    \t\t\t\ttypedContent[i] = Byte.valueOf(value);\n-\t    \t\t\t\tbreak;\n-\t    \t\t\tcase AttributeDefinition.CHARACTER:\n-\t    \t\t\t\ttypedContent = (typedContent == null) ? new Character[content.length] : typedContent;\n-\t    \t\t\t\tchar[] charArray = value.toCharArray();\n-\t    \t\t\t\tif (charArray.length == 1) {\n-\t    \t\t\t\t\ttypedContent[i] = new Character(charArray[0]);\n-\t    \t\t\t\t}\n-\t    \t\t\t\telse {\n-\t    \t\t            throw new ResourceProcessorException(CODE_OTHER_ERROR, \"Unable to parse value for definition: adref=\" + ad.getID());\n-\t    \t\t\t\t}\n-\t    \t\t\t\tbreak;\n-\t    \t\t\tcase AttributeDefinition.DOUBLE:\n-\t    \t\t\t\ttypedContent = (typedContent == null) ? new Double[content.length] : typedContent;\n-\t    \t\t\t\ttypedContent[i] = Double.valueOf(value);\n-\t    \t\t\t\tbreak;\n-\t    \t\t\tcase AttributeDefinition.FLOAT:\n-\t    \t\t\t\ttypedContent = (typedContent == null) ? new Float[content.length] : typedContent;\n-\t    \t\t\t\ttypedContent[i] = Float.valueOf(value);\n-\t    \t\t\t\tbreak;\n-\t    \t\t\tcase AttributeDefinition.INTEGER:\n-\t    \t\t\t\ttypedContent = (typedContent == null) ? new Integer[content.length] : typedContent;\n-\t    \t\t\t\ttypedContent[i] = Integer.valueOf(value);\n-\t    \t\t\t\tbreak;\n-\t    \t\t\tcase AttributeDefinition.LONG:\n-\t    \t\t\t\ttypedContent = (typedContent == null) ? new Long[content.length] : typedContent;\n-\t    \t\t\t\ttypedContent[i] = Long.valueOf(value);\n-\t    \t\t\t\tbreak;\n-\t    \t\t\tcase AttributeDefinition.SHORT:\n-\t    \t\t\t\ttypedContent = (typedContent == null) ? new Short[content.length] : typedContent;\n-\t    \t\t\t\ttypedContent[i] = Short.valueOf(value);\n-\t    \t\t\t\tbreak;\n-\t    \t\t\tcase AttributeDefinition.STRING:\n-\t    \t\t\t\ttypedContent = (typedContent == null) ? new String[content.length] : typedContent;\n-\t    \t\t\t\ttypedContent[i] = value;\n-\t    \t\t\t\tbreak;\n-\t    \t\t\tdefault:\n-\t    \t\t\t\t// unsupported type\n-                        throw new ResourceProcessorException(CODE_OTHER_ERROR, \"Unsupported value-type for definition: adref=\" + ad.getID());\n-    \t\t\t}\n-    \t\t}\n-    \t}\n-    \tcatch (NumberFormatException nfe) {\n-            throw new ResourceProcessorException(CODE_OTHER_ERROR, \"Unable to parse value for definition: adref=\" + ad.getID());\n-    \t}\n-\n-    \t// verify cardinality of value(s)\n-    \tint cardinality = ad.getCardinality();\n-    \tObject result = null;\n-    \tif (cardinality == 0) {\n-    \t\tif (typedContent.length == 1) {\n-    \t\t\tresult = typedContent[0];\n-    \t\t}\n-    \t\telse {\n-    \t\t\tresult = null;\n-    \t\t}\n-    \t}\n-    \telse if (cardinality == Integer.MIN_VALUE) {\n-    \t\tresult = new Vector(Arrays.asList(typedContent));\n-    \t}\n-    \telse if (cardinality == Integer.MAX_VALUE) {\n-    \t\tresult = typedContent;\n-    \t}\n-    \telse if (cardinality < 0) {\n-            if (typedContent.length <= Math.abs(cardinality)) {\n-    \t\t\tresult = new Vector(Arrays.asList(typedContent));\n-    \t\t}\n-    \t\telse {\n-    \t\t\tresult = null;\n-    \t\t}\n-    \t}\n-    \telse if (cardinality > 0) {\n-    \t\tif (typedContent.length <= cardinality) {\n-    \t\t\tresult = typedContent;\n-    \t\t}\n-    \t\telse {\n-    \t\t\tresult = null;\n-    \t\t}\n-    \t}\n-    \treturn result;\n+    private boolean isFactoryConfig(Designate designate)\n+    {\n+        String factoryPid = designate.getFactoryPid();\n+        return (factoryPid != null && !\"\".equals(factoryPid));\n     }\n \n-    public void handleEvent(Event event) {\n-    \t// regardless of the outcome, we simply invoke postcommit\n-    \tpostcommit();\n+    private MetaData parseAutoConfResource(InputStream stream) throws ResourceProcessorException\n+    {\n+        MetaDataReader reader = new MetaDataReader();\n+        MetaData data = null;\n+        try\n+        {\n+            data = reader.parse(stream);\n+        }\n+        catch (IOException e)\n+        {\n+            throw new ResourceProcessorException(CODE_OTHER_ERROR, \"Unable to process resource.\", e);\n+        }\n+        if (data == null)\n+        {\n+            throw new ResourceProcessorException(CODE_OTHER_ERROR, \"Supplied configuration is not conform the metatype xml specification.\");\n+        }\n+        return data;\n     }\n }\n \n-interface ConfigurationAdminTask {\n-    public String getFilter();\n+interface ConfigurationAdminTask\n+{\n+    public Filter getFilter();\n+\n     public void run(PersistencyManager persistencyManager, ConfigurationAdmin configAdmin) throws Exception;\n }\n \n-interface PostCommitTask {\n-    public void run(PersistencyManager manager) throws Exception;\n+class DeleteResourceTask implements PostCommitTask\n+{\n+    private final String m_name;\n+\n+    public DeleteResourceTask(String name)\n+    {\n+        m_name = name;\n+    }\n+\n+    public void run(PersistencyManager manager) throws Exception\n+    {\n+        manager.delete(m_name);\n+    }\n }\n \n-class DropResourceTask implements ConfigurationAdminTask {\n+class DropResourceTask implements ConfigurationAdminTask\n+{\n     private final AutoConfResource m_resource;\n \n-    public DropResourceTask(AutoConfResource resource) {\n+    public DropResourceTask(AutoConfResource resource)\n+    {\n         m_resource = resource;\n     }\n-    \n-    public String getFilter() {\n+\n+    public Filter getFilter()\n+    {\n         return m_resource.getFilter();\n     }\n \n-    public void run(PersistencyManager persistencyManager, ConfigurationAdmin configAdmin) throws Exception {\n+    public void run(PersistencyManager persistencyManager, ConfigurationAdmin configAdmin) throws Exception\n+    {\n         String pid;\n-        if (m_resource.isFactoryConfig()) {\n+        if (m_resource.isFactoryConfig())\n+        {\n             pid = m_resource.getGeneratedPid();\n         }\n-        else {\n+        else\n+        {\n             pid = m_resource.getPid();\n         }\n         Configuration configuration = configAdmin.getConfiguration(pid, m_resource.getBundleLocation());\n         configuration.delete();\n     }\n }\n \n-class InstallOrUpdateResourceTask implements ConfigurationAdminTask {\n+class InstallOrUpdateResourceTask implements ConfigurationAdminTask\n+{\n     private final AutoConfResource m_resource;\n \n-    public InstallOrUpdateResourceTask(AutoConfResource resource) {\n+    public InstallOrUpdateResourceTask(AutoConfResource resource)\n+    {\n         m_resource = resource;\n     }\n \n-    public String getFilter() {\n+    public Filter getFilter()\n+    {\n         return m_resource.getFilter();\n     }\n \n-    public void run(PersistencyManager persistencyManager, ConfigurationAdmin configAdmin) throws Exception {\n+    public void run(PersistencyManager persistencyManager, ConfigurationAdmin configAdmin) throws Exception\n+    {\n         String name = m_resource.getName();\n         Dictionary properties = m_resource.getProperties();\n         String bundleLocation = m_resource.getBundleLocation();\n         Configuration configuration = null;\n \n         List existingResources = null;\n-        try {\n+        try\n+        {\n             existingResources = persistencyManager.load(name);\n         }\n-        catch (IOException ioe) {\n+        catch (IOException ioe)\n+        {\n             throw new ResourceProcessorException(ResourceProcessorException.CODE_PREPARE, \"Unable to read existing resources for resource \" + name, ioe);\n         }\n-        \n+\n         // update configuration\n-        if (m_resource.isFactoryConfig()) {\n+        if (m_resource.isFactoryConfig())\n+        {\n             // check if this is an factory config instance update\n-            for (Iterator i = existingResources.iterator(); i.hasNext();) {\n+            for (Iterator i = existingResources.iterator(); i.hasNext();)\n+            {\n                 AutoConfResource existingResource = (AutoConfResource) i.next();\n-                if (m_resource.equalsTargetConfiguration(existingResource)) {\n+                if (m_resource.equalsTargetConfiguration(existingResource))\n+                {\n                     // existing instance found\n                     configuration = configAdmin.getConfiguration(existingResource.getGeneratedPid(), bundleLocation);\n                     existingResources.remove(existingResource);\n                     break;\n                 }\n             }\n-            if (configuration == null) {\n+            if (configuration == null)\n+            {\n                 // no existing instance, create new\n                 configuration = configAdmin.createFactoryConfiguration(m_resource.getFactoryPid(), bundleLocation);\n             }\n             m_resource.setGeneratedPid(configuration.getPid());\n         }\n-        else {\n-            for (Iterator i = existingResources.iterator(); i.hasNext();) {\n+        else\n+        {\n+            for (Iterator i = existingResources.iterator(); i.hasNext();)\n+            {\n                 AutoConfResource existingResource = (AutoConfResource) i.next();\n-                if (m_resource.getPid().equals(existingResource.getPid())) {\n+                if (m_resource.getPid().equals(existingResource.getPid()))\n+                {\n                     // existing resource found\n                     existingResources.remove(existingResource);\n                     break;\n                 }\n             }\n             configuration = configAdmin.getConfiguration(m_resource.getPid(), bundleLocation);\n-            if (!bundleLocation.equals(configuration.getBundleLocation())) {\n+            if (!bundleLocation.equals(configuration.getBundleLocation()))\n+            {\n                 // an existing configuration exists that is bound to a different location, which is not allowed\n-                throw new ResourceProcessorException(ResourceProcessorException.CODE_PREPARE, \"Existing configuration was bound to \" + configuration.getBundleLocation() + \" instead of \" + bundleLocation);\n+                throw new ResourceProcessorException(ResourceProcessorException.CODE_PREPARE,\n+                    \"Existing configuration was bound to \" + configuration.getBundleLocation() + \" instead of \" + bundleLocation);\n             }\n         }\n-        if (m_resource.isMerge()) {\n+        if (m_resource.isMerge())\n+        {\n             Dictionary existingProperties = configuration.getProperties();\n-            if (existingProperties != null) {\n+            if (existingProperties != null)\n+            {\n                 Enumeration keys = existingProperties.keys();\n-                while (keys.hasMoreElements()) {\n+                while (keys.hasMoreElements())\n+                {\n                     Object key = keys.nextElement();\n                     properties.put(key, existingProperties.get(key));\n                 }\n@@ -717,28 +757,24 @@ public void run(PersistencyManager persistencyManager, ConfigurationAdmin config\n     }\n }\n \n-class DeleteResourceTask implements PostCommitTask {\n-    private final String m_name;\n-\n-    public DeleteResourceTask(String name) {\n-        m_name = name;\n-    }\n-\n-    public void run(PersistencyManager manager) throws Exception {\n-        manager.delete(m_name);\n-    }\n+interface PostCommitTask\n+{\n+    public void run(PersistencyManager manager) throws Exception;\n }\n \n-class StoreResourceTask implements PostCommitTask {\n+class StoreResourceTask implements PostCommitTask\n+{\n     private final String m_name;\n     private final List m_resources;\n \n-    public StoreResourceTask(String name, List resources) {\n+    public StoreResourceTask(String name, List resources)\n+    {\n         m_name = name;\n         m_resources = resources;\n     }\n \n-    public void run(PersistencyManager manager) throws Exception {\n+    public void run(PersistencyManager manager) throws Exception\n+    {\n         manager.store(m_name, m_resources);\n     }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/felix/raw/cf6665e272505981b8236f3c6a54ac5be888ed8b/deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/AutoConfResourceProcessor.java",
                "sha": "f158b8ef30dbd56ba8ad674d33ada53c24acc74c",
                "status": "modified"
            },
            {
                "additions": 233,
                "blob_url": "https://github.com/apache/felix/blob/cf6665e272505981b8236f3c6a54ac5be888ed8b/deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/MetaTypeUtil.java",
                "changes": 233,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/MetaTypeUtil.java?ref=cf6665e272505981b8236f3c6a54ac5be888ed8b",
                "deletions": 0,
                "filename": "deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/MetaTypeUtil.java",
                "patch": "@@ -0,0 +1,233 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.felix.deployment.rp.autoconf;\n+\n+import static org.osgi.service.deploymentadmin.spi.ResourceProcessorException.CODE_OTHER_ERROR;\n+\n+import java.util.Arrays;\n+import java.util.Dictionary;\n+import java.util.Hashtable;\n+import java.util.List;\n+import java.util.Vector;\n+\n+import org.apache.felix.metatype.Attribute;\n+import org.apache.felix.metatype.Designate;\n+import org.osgi.service.deploymentadmin.spi.ResourceProcessorException;\n+import org.osgi.service.metatype.AttributeDefinition;\n+import org.osgi.service.metatype.ObjectClassDefinition;\n+\n+/**\n+ * Convenience methods to work with MetaType structures.\n+ */\n+public class MetaTypeUtil\n+{\n+    private MetaTypeUtil()\n+    {\n+        // Nop\n+    }\n+\n+    /**\n+     * Determines the actual configuration data based on the specified designate and object class definition\n+     * \n+     * @param designate The designate object containing the values for the properties\n+     * @param ocd The object class definition\n+     * @return A dictionary containing data as described in the designate and ocd objects, or <code>null</code> if the designate does not match it's\n+     * definition and the designate was marked as optional.\n+     * @throws ResourceProcessorException If the designate does not match the ocd and the designate is not marked as optional.\n+     */\n+    public static Dictionary getProperties(Designate designate, ObjectClassDefinition ocd) throws ResourceProcessorException\n+    {\n+        Dictionary properties = new Hashtable();\n+        AttributeDefinition[] attributeDefs = ocd.getAttributeDefinitions(ObjectClassDefinition.ALL);\n+\n+        List<Attribute> attributes = designate.getObject().getAttributes();\n+        for (Attribute attribute : attributes)\n+        {\n+            String adRef = attribute.getAdRef();\n+            boolean found = false;\n+            for (int j = 0; j < attributeDefs.length; j++)\n+            {\n+                AttributeDefinition ad = attributeDefs[j];\n+                if (adRef.equals(ad.getID()))\n+                {\n+                    // found attribute definition\n+                    Object value = getValue(attribute, ad);\n+                    if (value == null)\n+                    {\n+                        if (designate.isOptional())\n+                        {\n+                            properties = null;\n+                            break;\n+                        }\n+                        else\n+                        {\n+                            throw new ResourceProcessorException(CODE_OTHER_ERROR, \"Could not match attribute to it's definition: adref=\" + adRef);\n+                        }\n+                    }\n+                    properties.put(adRef, value);\n+                    found = true;\n+                    break;\n+                }\n+            }\n+            if (!found)\n+            {\n+                if (designate.isOptional())\n+                {\n+                    properties = null;\n+                    break;\n+                }\n+                else\n+                {\n+                    throw new ResourceProcessorException(CODE_OTHER_ERROR, \"Could not find attribute definition: adref=\" + adRef);\n+                }\n+            }\n+        }\n+\n+        return properties;\n+    }\n+\n+    /**\n+     * Determines the value of an attribute based on an attribute definition\n+     * \n+     * @param attribute The attribute containing value(s)\n+     * @param ad The attribute definition\n+     * @return An <code>Object</code> reflecting what was specified in the attribute and it's definition or <code>null</code> if the value did not match it's definition.\n+     * @throws ResourceProcessorException in case we're unable to parse the value of an attribute.\n+     */\n+    private static Object getValue(Attribute attribute, AttributeDefinition ad) throws ResourceProcessorException\n+    {\n+        if (attribute == null || ad == null || !attribute.getAdRef().equals(ad.getID()))\n+        {\n+            // wrong attribute or definition\n+            return null;\n+        }\n+        String[] content = attribute.getContent();\n+\n+        // verify correct type of the value(s)\n+        int type = ad.getType();\n+        Object[] typedContent = null;\n+        try\n+        {\n+            for (int i = 0; i < content.length; i++)\n+            {\n+                String value = content[i];\n+                switch (type)\n+                {\n+                    case AttributeDefinition.BOOLEAN:\n+                        typedContent = (typedContent == null) ? new Boolean[content.length] : typedContent;\n+                        typedContent[i] = Boolean.valueOf(value);\n+                        break;\n+                    case AttributeDefinition.BYTE:\n+                        typedContent = (typedContent == null) ? new Byte[content.length] : typedContent;\n+                        typedContent[i] = Byte.valueOf(value);\n+                        break;\n+                    case AttributeDefinition.CHARACTER:\n+                        typedContent = (typedContent == null) ? new Character[content.length] : typedContent;\n+                        char[] charArray = value.toCharArray();\n+                        if (charArray.length == 1)\n+                        {\n+                            typedContent[i] = new Character(charArray[0]);\n+                        }\n+                        else\n+                        {\n+                            throw new ResourceProcessorException(CODE_OTHER_ERROR, \"Unable to parse value for definition: adref=\" + ad.getID());\n+                        }\n+                        break;\n+                    case AttributeDefinition.DOUBLE:\n+                        typedContent = (typedContent == null) ? new Double[content.length] : typedContent;\n+                        typedContent[i] = Double.valueOf(value);\n+                        break;\n+                    case AttributeDefinition.FLOAT:\n+                        typedContent = (typedContent == null) ? new Float[content.length] : typedContent;\n+                        typedContent[i] = Float.valueOf(value);\n+                        break;\n+                    case AttributeDefinition.INTEGER:\n+                        typedContent = (typedContent == null) ? new Integer[content.length] : typedContent;\n+                        typedContent[i] = Integer.valueOf(value);\n+                        break;\n+                    case AttributeDefinition.LONG:\n+                        typedContent = (typedContent == null) ? new Long[content.length] : typedContent;\n+                        typedContent[i] = Long.valueOf(value);\n+                        break;\n+                    case AttributeDefinition.SHORT:\n+                        typedContent = (typedContent == null) ? new Short[content.length] : typedContent;\n+                        typedContent[i] = Short.valueOf(value);\n+                        break;\n+                    case AttributeDefinition.STRING:\n+                        typedContent = (typedContent == null) ? new String[content.length] : typedContent;\n+                        typedContent[i] = value;\n+                        break;\n+                    default:\n+                        // unsupported type\n+                        throw new ResourceProcessorException(CODE_OTHER_ERROR, \"Unsupported value-type for definition: adref=\" + ad.getID());\n+                }\n+            }\n+        }\n+        catch (NumberFormatException nfe)\n+        {\n+            throw new ResourceProcessorException(CODE_OTHER_ERROR, \"Unable to parse value for definition: adref=\" + ad.getID());\n+        }\n+\n+        // verify cardinality of value(s)\n+        int cardinality = ad.getCardinality();\n+        Object result = null;\n+        if (cardinality == 0)\n+        {\n+            if (typedContent.length == 1)\n+            {\n+                result = typedContent[0];\n+            }\n+            else\n+            {\n+                result = null;\n+            }\n+        }\n+        else if (cardinality == Integer.MIN_VALUE)\n+        {\n+            result = new Vector(Arrays.asList(typedContent));\n+        }\n+        else if (cardinality == Integer.MAX_VALUE)\n+        {\n+            result = typedContent;\n+        }\n+        else if (cardinality < 0)\n+        {\n+            if (typedContent.length <= Math.abs(cardinality))\n+            {\n+                result = new Vector(Arrays.asList(typedContent));\n+            }\n+            else\n+            {\n+                result = null;\n+            }\n+        }\n+        else if (cardinality > 0)\n+        {\n+            if (typedContent.length <= cardinality)\n+            {\n+                result = typedContent;\n+            }\n+            else\n+            {\n+                result = null;\n+            }\n+        }\n+        return result;\n+    }\n+}",
                "raw_url": "https://github.com/apache/felix/raw/cf6665e272505981b8236f3c6a54ac5be888ed8b/deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/MetaTypeUtil.java",
                "sha": "7abbb91e17c8e279446a167814cfc171b2062786",
                "status": "added"
            },
            {
                "additions": 147,
                "blob_url": "https://github.com/apache/felix/blob/cf6665e272505981b8236f3c6a54ac5be888ed8b/deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/PersistencyManager.java",
                "changes": 242,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/PersistencyManager.java?ref=cf6665e272505981b8236f3c6a54ac5be888ed8b",
                "deletions": 95,
                "filename": "deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/PersistencyManager.java",
                "patch": "@@ -19,6 +19,7 @@\n package org.apache.felix.deployment.rp.autoconf;\n \n import java.io.File;\n+import java.io.FileFilter;\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n import java.io.FileOutputStream;\n@@ -28,104 +29,155 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-public class PersistencyManager {\n-\t\n-\tprivate final File m_root;\n+public class PersistencyManager\n+{\n+    private static final FileFilter FILES_ONLY_FILTER = new FileFilter()\n+    {\n+        public boolean accept(File pathname)\n+        {\n+            return pathname.isFile();\n+        }\n+    };\n \n-\tpublic PersistencyManager(File root) {\n-\t\tm_root = root;\n-\t}\n+    private final File m_root;\n \n-\t/**\n-\t * Stores a resource.\n-\t * \n-\t * @param name Name of the resource.\n-\t * @param configs List of <code>AutoConfResource</code>s representing the specified resource.\n-\t * @throws IOException If the resource could not be stored.\n-\t */\n-\tpublic void store(String name, List configs) throws IOException {\n-\t\tFile targetDir = m_root;\n-\t\tname = name.replace('/', File.separatorChar);\n-\t\t\n-\t\tif (name.startsWith(File.separator)) {\n-\t\t\tname = name.substring(1);\n-\t\t}\n-\t\tint lastSeparator = name.lastIndexOf(File.separator);\n-\t\tFile target = null;\n-\t\tif (lastSeparator != -1) {\n-\t\t\ttargetDir = new File(targetDir, name.substring(0, lastSeparator));\n-\t\t\ttargetDir.mkdirs();\n-\t\t}\n-\t\ttarget = new File(targetDir, name.substring(lastSeparator + 1));\n+    public PersistencyManager(File root)\n+    {\n+        m_root = root;\n+    }\n \n-\t\tObjectOutputStream out = null;\n-\t\ttry {\n-\t\t\tout = new ObjectOutputStream(new FileOutputStream(target));\n-\t\t\tout.writeObject(configs);\n-\t\t}\n-\t\tfinally {\n-\t\t\tif (out != null) {\n-\t\t\t\ttry {\n-\t\t\t\t\tout.close();\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t// not much we can do\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n+    /**\n+     * Deletes a resource.\n+     * \n+     * @param name Name of the resource.\n+     * @throws IOException If the resource could not be deleted.\n+     */\n+    public void delete(String name) throws IOException\n+    {\n+        name = name.replace('/', File.separatorChar);\n+        File target = new File(m_root, name);\n+        if (target.exists() && !target.delete())\n+        {\n+            throw new IOException(\"Unable to delete file: \" + target.getAbsolutePath());\n+        }\n+        while (target.getParentFile().list().length == 0 && !target.getParentFile().getAbsolutePath().equals(m_root.getAbsolutePath()))\n+        {\n+            target = target.getParentFile();\n+            target.delete();\n+        }\n+    }\n \n-\t/**\n-\t * Deletes a resource.\n-\t * \n-\t * @param name Name of the resource.\n-\t * @throws IOException If the resource could not be deleted.\n-\t */\n-\tpublic void delete(String name) throws IOException {\n-\t\tname = name.replace('/', File.separatorChar);\n-\t\tFile target = new File(m_root, name);\n-\t\tif (!target.delete()) {\n-\t\t\tthrow new IOException(\"Unable to delete file: \" + target.getAbsolutePath());\n-\t\t}\n-\t\twhile (target.getParentFile().list().length == 0 && !target.getParentFile().getAbsolutePath().equals(m_root.getAbsolutePath())) {\n-\t\t\ttarget = target.getParentFile();\n-\t\t\ttarget.delete();\n-\t\t}\n-\t}\n+    /**\n+     * Returns the names of all persisted resources.\n+     * @return a list of resource names, never <code>null</code>.\n+     */\n+    public List<String> getResourceNames()\n+    {\n+        List<String> result = new ArrayList<String>();\n \n-\t/**\n-\t * Loads a stored resource.\n-\t * \n-\t * @param name Name of the resource.\n-\t * @return List of <code>AutoConfResource</code>s representing the specified resource, if the resource is unknown an empty list is returned.\n-\t * @throws IOException If the resource could not be properly read.\n-\t */\n-\tpublic List load(String name) throws IOException {\n-\t\tname = name.replace('/', File.separatorChar);\n-\t\tList resources = new ArrayList();\n-\t\tFile resourcesFile = new File(m_root, name);\n-\t\tif (resourcesFile.exists()) {\n-\t\t\tObjectInputStream in = null;\n-\t\t\ttry {\n-\t\t\t\tin = new ObjectInputStream(new FileInputStream(resourcesFile));\n-\t\t\t\tresources = (List) in.readObject();\n-\t\t\t} \n-\t\t\tcatch (FileNotFoundException fnfe) {\n-\t\t\t\tthrow new IOException(\"Resource does not exist: \" + name);\n-\t\t\t} \n-\t\t\tcatch (ClassNotFoundException cnfe) {\n-\t\t\t\tthrow new IOException(\"Unable to recreate persisted object from file: \" + name);\n-\t\t\t} \n-\t\t\tfinally {\n-\t\t\t\tif (in != null) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tin.close();\n-\t\t\t\t\t} \n-\t\t\t\t\tcatch (Exception e) {\n-\t\t\t\t\t\t// not much we can do\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn resources;\n-\t}\n+        File[] list = m_root.listFiles(FILES_ONLY_FILTER);\n+        if (list != null && list.length > 0)\n+        {\n+            for (File resource : list)\n+            {\n+                result.add(resource.getName());\n+            }\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Loads a stored resource.\n+     * \n+     * @param name Name of the resource.\n+     * @return List of <code>AutoConfResource</code>s representing the specified resource, if the resource is unknown an empty list is returned.\n+     * @throws IOException If the resource could not be properly read.\n+     */\n+    public List<AutoConfResource> load(String name) throws IOException\n+    {\n+        List<AutoConfResource> resources = new ArrayList<AutoConfResource>();\n+        name = name.replace('/', File.separatorChar);\n+        File resourcesFile = new File(m_root, name);\n+        if (!resourcesFile.exists())\n+        {\n+            return resources;\n+        }\n+\n+        ObjectInputStream in = null;\n+        try\n+        {\n+            in = new ObjectInputStream(new FileInputStream(resourcesFile));\n+            resources = (List<AutoConfResource>) in.readObject();\n+        }\n+        catch (FileNotFoundException e)\n+        {\n+            throw new IOException(\"Resource does not exist: \" + name);\n+        }\n+        catch (ClassNotFoundException e)\n+        {\n+            throw new IOException(\"Unable to recreate persisted object from file: \" + name);\n+        }\n+        finally\n+        {\n+            if (in != null)\n+            {\n+                try\n+                {\n+                    in.close();\n+                }\n+                catch (Exception e)\n+                {\n+                    // not much we can do\n+                }\n+            }\n+        }\n+        return resources;\n+    }\n+\n+    /**\n+     * Stores a resource.\n+     * \n+     * @param name Name of the resource.\n+     * @param configs List of <code>AutoConfResource</code>s representing the specified resource.\n+     * @throws IOException If the resource could not be stored.\n+     */\n+    public void store(String name, List<AutoConfResource> configs) throws IOException\n+    {\n+        File targetDir = m_root;\n+        name = name.replace('/', File.separatorChar);\n+\n+        if (name.startsWith(File.separator))\n+        {\n+            name = name.substring(1);\n+        }\n+        int lastSeparator = name.lastIndexOf(File.separator);\n+        File target = null;\n+        if (lastSeparator != -1)\n+        {\n+            targetDir = new File(targetDir, name.substring(0, lastSeparator));\n+            targetDir.mkdirs();\n+        }\n+        target = new File(targetDir, name.substring(lastSeparator + 1));\n+\n+        ObjectOutputStream out = null;\n+        try\n+        {\n+            out = new ObjectOutputStream(new FileOutputStream(target));\n+            out.writeObject(configs);\n+        }\n+        finally\n+        {\n+            if (out != null)\n+            {\n+                try\n+                {\n+                    out.close();\n+                }\n+                catch (Exception e)\n+                {\n+                    // not much we can do\n+                }\n+            }\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/felix/raw/cf6665e272505981b8236f3c6a54ac5be888ed8b/deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/PersistencyManager.java",
                "sha": "cd41d3089edf0248833dee9a40046cdf3b8873e0",
                "status": "modified"
            },
            {
                "additions": 506,
                "blob_url": "https://github.com/apache/felix/blob/cf6665e272505981b8236f3c6a54ac5be888ed8b/deploymentadmin/autoconf/src/test/java/org/apache/felix/deployment/rp/autoconf/AutoConfResourceProcessorTest.java",
                "changes": 858,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/deploymentadmin/autoconf/src/test/java/org/apache/felix/deployment/rp/autoconf/AutoConfResourceProcessorTest.java?ref=cf6665e272505981b8236f3c6a54ac5be888ed8b",
                "deletions": 352,
                "filename": "deploymentadmin/autoconf/src/test/java/org/apache/felix/deployment/rp/autoconf/AutoConfResourceProcessorTest.java",
                "patch": "@@ -21,7 +21,10 @@\n import java.io.ByteArrayInputStream;\n import java.io.File;\n import java.io.IOException;\n+import java.util.Collections;\n import java.util.Dictionary;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n import java.util.Properties;\n \n import junit.framework.TestCase;\n@@ -40,434 +43,585 @@\n import org.osgi.service.deploymentadmin.spi.ResourceProcessorException;\n import org.osgi.service.log.LogService;\n \n-public class AutoConfResourceProcessorTest extends TestCase {\n-    /** Make sure the processor does not accept a 'null' session. */\n-    public void testNullSession() throws Exception {\n-        AutoConfResourceProcessor p = new AutoConfResourceProcessor();\n-        try {\n-            p.begin(null);\n-            fail(\"Should have gotten an exception when trying to begin with null session.\");\n+public class AutoConfResourceProcessorTest extends TestCase\n+{\n+    private static class ConfigurationAdminImpl implements ConfigurationAdmin\n+    {\n+        private final String[] m_expectedPIDs;\n+        private final String[] m_expectedFactoryPIDs;\n+        private final Map<String, ConfigurationImpl> m_configs;\n+\n+        public ConfigurationAdminImpl(String... expectedPIDs)\n+        {\n+            this(expectedPIDs, new String[0]);\n         }\n-        catch (Exception e) {\n-            // expected\n+\n+        public ConfigurationAdminImpl(String[] expectedPIDs, String[] expectedFactoryPIDs)\n+        {\n+            m_expectedPIDs = expectedPIDs;\n+            m_expectedFactoryPIDs = expectedFactoryPIDs;\n+\n+            m_configs = new LinkedHashMap<String, ConfigurationImpl>();\n         }\n-    }\n-    \n-    /** Go through a simple session, containing two empty configurations. */\n-    public void testSimpleSession() throws Exception {\n-        AutoConfResourceProcessor p = new AutoConfResourceProcessor();\n-        Utils.configureObject(p, LogService.class);\n-        Utils.configureObject(p, DependencyManager.class, new DependencyManager((BundleContext) Utils.createNullObject(BundleContext.class)) {\n-        \tpublic void remove(Component service) {\n-        \t}\n-        });\n-        File tempDir = File.createTempFile(\"persistence\", \"dir\");\n-        tempDir.delete();\n-        tempDir.mkdirs();\n-        \n-        System.out.println(\"Temporary dir: \" + tempDir);\n-        \n-        Utils.configureObject(p, PersistencyManager.class, new PersistencyManager(tempDir));\n-        Session s = new Session();\n-        p.begin(s);\n-        Utils.configureObject(p, Component.class, Utils.createMockObjectAdapter(Component.class, new Object() {\n-            public DependencyManager getDependencyManager() {\n-                return new DependencyManager((BundleContext) Utils.createNullObject(BundleContext.class));\n-            }\n-        }));\n-        p.process(\"a\", new ByteArrayInputStream(\"<MetaData />\".getBytes()));\n-        p.process(\"b\", new ByteArrayInputStream(\"<MetaData />\".getBytes()));\n-        p.prepare();\n-        p.commit();\n-        p.postcommit();\n-        Utils.removeDirectoryWithContent(tempDir);\n-    }\n \n-    /** Go through a simple session, containing two empty configurations. */\n-    public void testSimpleInstallAndUninstallSession() throws Throwable {\n-        AutoConfResourceProcessor p = new AutoConfResourceProcessor();\n-        Utils.configureObject(p, LogService.class);\n-        Utils.configureObject(p, DependencyManager.class, new DependencyManager((BundleContext) Utils.createNullObject(BundleContext.class)) {\n-        \tpublic void remove(Component service) {\n-        \t}\n-        });\n-        Logger logger = new Logger();\n-        Utils.configureObject(p, LogService.class, logger);\n-        File tempDir = File.createTempFile(\"persistence\", \"dir\");\n-        tempDir.delete();\n-        tempDir.mkdirs();\n-        \n-        System.out.println(\"Temporary dir: \" + tempDir);\n-        \n-        Utils.configureObject(p, PersistencyManager.class, new PersistencyManager(tempDir));\n-        Session s = new Session();\n-        p.begin(s);\n-        Utils.configureObject(p, Component.class, Utils.createMockObjectAdapter(Component.class, new Object() {\n-            public DependencyManager getDependencyManager() {\n-                return new DependencyManager((BundleContext) Utils.createNullObject(BundleContext.class));\n-            }\n-        }));\n-        p.process(\"a\", new ByteArrayInputStream(\"<MetaData />\".getBytes()));\n-        p.prepare();\n-        p.commit();\n-        p.postcommit();\n-        logger.failOnException();\n-        s = new Session();\n-        p.begin(s);\n-        p.dropped(\"a\");\n-        p.prepare();\n-        p.commit();\n-        p.postcommit();\n-        logger.failOnException();\n-        Utils.removeDirectoryWithContent(tempDir);\n-    }\n-    \n-    /** Go through a simple session, containing two empty configurations. */\n-    public void testBasicConfigurationSession() throws Throwable {\n-        AutoConfResourceProcessor p = new AutoConfResourceProcessor();\n-        Logger logger = new Logger();\n-        Utils.configureObject(p, LogService.class, logger);\n-        Utils.configureObject(p, DependencyManager.class, new DependencyManager((BundleContext) Utils.createNullObject(BundleContext.class)) {\n-        \tpublic void remove(Component service) {\n-        \t}\n-        });\n-        File tempDir = File.createTempFile(\"persistence\", \"dir\");\n-        tempDir.delete();\n-        tempDir.mkdirs();\n-        \n-        System.out.println(\"Temporary dir: \" + tempDir);\n-        \n-        Utils.configureObject(p, PersistencyManager.class, new PersistencyManager(tempDir));\n-        Session s = new Session();\n-        p.begin(s);\n-        Utils.configureObject(p, Component.class, Utils.createMockObjectAdapter(Component.class, new Object() {\n-            public DependencyManager getDependencyManager() {\n-                return new DependencyManager((BundleContext) Utils.createNullObject(BundleContext.class));\n-            }\n-        }));\n-        String config =\n-            \"<MetaData xmlns:metatype='http://www.osgi.org/xmlns/metatype/v1.0.0'>\\n\" + \n-            \"  <OCD name='ocd' id='ocd'>\\n\" + \n-            \"    <AD id='name' type='STRING' cardinality='0' />\\n\" + \n-            \"  </OCD>\\n\" + \n-            \"  <Designate pid='simple' bundle='osgi-dp:location'>\\n\" + \n-            \"    <Object ocdref='ocd'>\\n\" + \n-            \"      <Attribute adref='name'>\\n\" + \n-            \"        <Value><![CDATA[test]]></Value>\\n\" + \n-            \"      </Attribute>\\n\" + \n-            \"    </Object>\\n\" + \n-            \"  </Designate>\\n\" + \n-            \"</MetaData>\\n\";\n-        p.process(\"basic\", new ByteArrayInputStream(config.getBytes()));\n-        p.prepare();\n-        p.commit();\n-        p.addConfigurationAdmin(null, new ConfigurationAdmin() {\n-            public Configuration[] listConfigurations(String filter) throws IOException, InvalidSyntaxException {\n-                return null;\n-            }\n-            \n-            public Configuration getConfiguration(String pid, String location) throws IOException {\n-                return new ConfigurationImpl();\n-            }\n-            \n-            public Configuration getConfiguration(String pid) throws IOException {\n-                return null;\n-            }\n-            \n-            public Configuration createFactoryConfiguration(String factoryPid, String location) throws IOException {\n-                return null;\n-            }\n-            \n-            public Configuration createFactoryConfiguration(String factoryPid) throws IOException {\n-                return null;\n-            }\n-        });\n-        p.postcommit();\n-        logger.failOnException();\n-        Utils.removeDirectoryWithContent(tempDir);\n-    }\n+        public Configuration createFactoryConfiguration(String factoryPid) throws IOException\n+        {\n+            return createFactoryConfiguration(factoryPid, null);\n+        }\n \n-    /** Go through a simple session, containing two empty configurations. */\n-    public void testFilteredConfigurationSession() throws Throwable {\n-        AutoConfResourceProcessor p = new AutoConfResourceProcessor();\n-        Logger logger = new Logger();\n-        Utils.configureObject(p, LogService.class, logger);\n-        BundleContext mockBC = (BundleContext) Utils.createMockObjectAdapter(BundleContext.class, new Object() {\n-            public Filter createFilter(String condition) {\n-                return (Filter) Utils.createMockObjectAdapter(Filter.class, new Object() {\n-                    public boolean match(ServiceReference ref) {\n-                        Object id = ref.getProperty(\"id\");\n-                        if (id != null && id.equals(Integer.valueOf(42))) {\n-                            return true;\n-                        }\n-                        return false;\n-                    }\n-                    public void remove(Component service) {\n-                    }\n-                });\n-            }\n-        });\n-\t\tUtils.configureObject(p, BundleContext.class, mockBC);\n-        Utils.configureObject(p, DependencyManager.class, new DependencyManager(mockBC) {\n-        \tpublic void remove(Component service) {\n-        \t}\n-        });\n-        File tempDir = File.createTempFile(\"persistence\", \"dir\");\n-        tempDir.delete();\n-        tempDir.mkdirs();\n-        \n-        System.out.println(\"Temporary dir: \" + tempDir);\n-        \n-        Utils.configureObject(p, PersistencyManager.class, new PersistencyManager(tempDir));\n-        Session s = new Session();\n-        p.begin(s);\n-        Utils.configureObject(p, Component.class, Utils.createMockObjectAdapter(Component.class, new Object() {\n-            public DependencyManager getDependencyManager() {\n-                return new DependencyManager((BundleContext) Utils.createNullObject(BundleContext.class));\n-            }\n-        }));\n-        String config =\n-            \"<MetaData xmlns:metatype='http://www.osgi.org/xmlns/metatype/v1.0.0' filter='(id=42)'>\\n\" + \n-            \"  <OCD name='ocd' id='ocd'>\\n\" + \n-            \"    <AD id='name' type='STRING' cardinality='0' />\\n\" + \n-            \"  </OCD>\\n\" + \n-            \"  <Designate pid='simple' bundle='osgi-dp:location'>\\n\" + \n-            \"    <Object ocdref='ocd'>\\n\" + \n-            \"      <Attribute adref='name'>\\n\" + \n-            \"        <Value><![CDATA[test]]></Value>\\n\" + \n-            \"      </Attribute>\\n\" + \n-            \"    </Object>\\n\" + \n-            \"  </Designate>\\n\" + \n-            \"</MetaData>\\n\";\n-        p.process(\"basic\", new ByteArrayInputStream(config.getBytes()));\n-        p.prepare();\n-        p.commit();\n-        Properties props = new Properties();\n-        props.put(\"id\", Integer.valueOf(42));\n-        final Configuration configuration = new ConfigurationImpl();\n-        p.addConfigurationAdmin(new Reference(props), new ConfigurationAdmin() {\n-            public Configuration[] listConfigurations(String filter) throws IOException, InvalidSyntaxException {\n-                return null;\n-            }\n-            \n-            public Configuration getConfiguration(String pid, String location) throws IOException {\n-                return configuration;\n-            }\n-            \n-            public Configuration getConfiguration(String pid) throws IOException {\n-                return null;\n-            }\n-            \n-            public Configuration createFactoryConfiguration(String factoryPid, String location) throws IOException {\n-                return null;\n-            }\n-            \n-            public Configuration createFactoryConfiguration(String factoryPid) throws IOException {\n-                return null;\n-            }\n-        });\n-        \n-        final Configuration emptyConfiguration = new ConfigurationImpl();\n-        p.addConfigurationAdmin(new Reference(new Properties()), new ConfigurationAdmin() {\n-            public Configuration[] listConfigurations(String filter) throws IOException, InvalidSyntaxException {\n-                return null;\n-            }\n-            \n-            public Configuration getConfiguration(String pid, String location) throws IOException {\n-                return emptyConfiguration;\n-            }\n-            \n-            public Configuration getConfiguration(String pid) throws IOException {\n-                return null;\n-            }\n-            \n-            public Configuration createFactoryConfiguration(String factoryPid, String location) throws IOException {\n-                return null;\n-            }\n-            \n-            public Configuration createFactoryConfiguration(String factoryPid) throws IOException {\n-                return null;\n+        public Configuration createFactoryConfiguration(String factoryPid, String location) throws IOException\n+        {\n+            if (!isExpected(m_expectedFactoryPIDs, factoryPid))\n+            {\n+                throw new IOException(\"Unexpected factory PID: \" + factoryPid);\n             }\n-        });        \n-        p.postcommit();\n-        logger.failOnException();\n-        assertEquals(\"test\", configuration.getProperties().get(\"name\"));\n-        assertNull(emptyConfiguration.getProperties());\n-        Utils.removeDirectoryWithContent(tempDir);\n-    }\n+            // This should be unique enough for our use cases...\n+            String pid = String.format(\"pid%d\", m_configs.size());\n \n-    /** Go through a simple session, containing two empty configurations. */\n-    public void testMissingMandatoryValueInConfig() throws Throwable {\n-        AutoConfResourceProcessor p = new AutoConfResourceProcessor();\n-        Logger logger = new Logger();\n-        Utils.configureObject(p, LogService.class, logger);\n-        BundleContext mockBC = (BundleContext) Utils.createMockObjectAdapter(BundleContext.class, new Object() {\n-            public Filter createFilter(String condition) {\n-                return (Filter) Utils.createMockObjectAdapter(Filter.class, new Object() {\n-                    public boolean match(ServiceReference ref) {\n-                        Object id = ref.getProperty(\"id\");\n-                        if (id != null && id.equals(Integer.valueOf(42))) {\n-                            return true;\n-                        }\n-                        return false;\n-                    }\n-                    public void remove(Component service) {\n-                    }\n-                });\n+            ConfigurationImpl config = m_configs.get(pid);\n+            if (config == null)\n+            {\n+                config = new ConfigurationImpl(factoryPid, pid, location);\n+                m_configs.put(pid, config);\n             }\n-        });\n-        Utils.configureObject(p, BundleContext.class, mockBC);\n-        Utils.configureObject(p, DependencyManager.class, new DependencyManager(mockBC) {\n-            public void remove(Component service) {\n+            config.setBundleLocation(location);\n+            return config;\n+        }\n+\n+        public Configuration getConfiguration(String pid) throws IOException\n+        {\n+            return getConfiguration(pid, null);\n+        }\n+\n+        public Configuration getConfiguration(String pid, String location) throws IOException\n+        {\n+            if (!isExpected(m_expectedPIDs, pid))\n+            {\n+                throw new IOException(\"Unexpected PID: \" + pid);\n             }\n-        });\n-        File tempDir = File.createTempFile(\"persistence\", \"dir\");\n-        tempDir.delete();\n-        tempDir.mkdirs();\n-        \n-        System.out.println(\"Temporary dir: \" + tempDir);\n-        \n-        Utils.configureObject(p, PersistencyManager.class, new PersistencyManager(tempDir));\n-        Session s = new Session();\n-        p.begin(s);\n-        Utils.configureObject(p, Component.class, Utils.createMockObjectAdapter(Component.class, new Object() {\n-            public DependencyManager getDependencyManager() {\n-                return new DependencyManager((BundleContext) Utils.createNullObject(BundleContext.class));\n+\n+            ConfigurationImpl config = m_configs.get(pid);\n+            if (config == null)\n+            {\n+                config = new ConfigurationImpl(null, pid, location);\n+                m_configs.put(pid, config);\n             }\n-        }));\n-\n-        String config =\n-            \"<MetaData xmlns:metatype='http://www.osgi.org/xmlns/metatype/v1.1.0' filter='(id=42)'>\\n\" + \n-            \"  <OCD name='ocd' id='ocd'>\\n\" + \n-            \"    <AD id='name' type='Integer' />\\n\" + \n-            \"  </OCD>\\n\" + \n-            \"  <Designate pid='simple' bundle='osgi-dp:location'>\\n\" + \n-            \"    <Object ocdref='ocd'>\\n\" + \n-            \"      <Attribute adref='name'>\\n\" + \n-            \"        <Value><![CDATA[]]></Value>\\n\" + \n-            \"      </Attribute>\\n\" + \n-            \"    </Object>\\n\" + \n-            \"  </Designate>\\n\" + \n-            \"</MetaData>\\n\";\n-        \n-        try\n+            config.setBundleLocation(location);\n+            return config;\n+        }\n+\n+        public Configuration[] listConfigurations(String filter) throws IOException, InvalidSyntaxException\n         {\n-            p.process(\"missing-value\", new ByteArrayInputStream(config.getBytes()));\n-            fail(\"Expected ResourceProcessorException for missing value!\");\n+            return null;\n         }\n-        catch (ResourceProcessorException e)\n+\n+        private boolean isExpected(String[] expectedPIDs, String actualPID)\n         {\n-            // Ok; expected...\n-            assertEquals(\"Unable to parse value for definition: adref=name\", e.getMessage());\n+            for (String expectedPID : expectedPIDs)\n+            {\n+                if (actualPID.equals(expectedPID))\n+                {\n+                    return true;\n+                }\n+            }\n+            return false;\n         }\n-        Utils.removeDirectoryWithContent(tempDir);\n     }\n \n-    private static class ConfigurationImpl implements Configuration {\n-        private String m_bundleLocation = \"osgi-dp:location\";\n+    private static class ConfigurationImpl implements Configuration\n+    {\n+        private final String m_factoryPID;\n+        private final String m_pid;\n+        private String m_bundleLocation;\n         private Dictionary m_properties;\n+        private boolean m_deleted;\n \n-        public String getPid() {\n-            return null;\n+        public ConfigurationImpl(String factoryPid, String pid, String bundleLocation)\n+        {\n+            m_factoryPID = factoryPid;\n+            m_pid = pid;\n+            m_bundleLocation = bundleLocation;\n         }\n \n-        public Dictionary getProperties() {\n-            return m_properties;\n+        public void delete() throws IOException\n+        {\n+            m_deleted = true;\n         }\n \n-        public void update(Dictionary properties) throws IOException {\n-            m_properties = properties;\n+        public String getBundleLocation()\n+        {\n+            return m_bundleLocation;\n         }\n \n-        public void delete() throws IOException {\n+        public String getFactoryPid()\n+        {\n+            return m_factoryPID;\n         }\n \n-        public String getFactoryPid() {\n-            return null;\n+        public String getPid()\n+        {\n+            return m_pid;\n         }\n \n-        public void update() throws IOException {\n+        public Dictionary getProperties()\n+        {\n+            return m_properties;\n         }\n \n-        public void setBundleLocation(String bundleLocation) {\n+        public void setBundleLocation(String bundleLocation)\n+        {\n+            if (m_bundleLocation != null && !m_bundleLocation.equals(bundleLocation))\n+            {\n+                throw new RuntimeException(\"Configuration already bound to location: \" + m_bundleLocation + \" (trying to set to: \" + bundleLocation + \")\");\n+            }\n             m_bundleLocation = bundleLocation;\n         }\n \n-        public String getBundleLocation() {\n-            return m_bundleLocation;\n+        public void update() throws IOException\n+        {\n+        }\n+\n+        public void update(Dictionary properties) throws IOException\n+        {\n+            m_properties = properties;\n         }\n     }\n \n     /** Dummy session. */\n-    private static class Session implements DeploymentSession {\n-        public DeploymentPackage getTargetDeploymentPackage() {\n+    private static class DeploymentSessionImpl implements DeploymentSession\n+    {\n+        public File getDataFile(Bundle bundle)\n+        {\n             return null;\n         }\n-        public DeploymentPackage getSourceDeploymentPackage() {\n+\n+        public DeploymentPackage getSourceDeploymentPackage()\n+        {\n             return null;\n         }\n-        public File getDataFile(Bundle bundle) {\n+\n+        public DeploymentPackage getTargetDeploymentPackage()\n+        {\n             return null;\n         }\n+\n+        @Override\n+        public String toString()\n+        {\n+            return \"Test DeploymentSession @ 0x\" + System.identityHashCode(this);\n+        }\n     }\n-    \n-    private static class Logger implements LogService {\n+\n+    private static class LogServiceImpl implements LogService\n+    {\n         private static final String[] LEVEL = { \"\", \"[ERROR]\", \"[WARN ]\", \"[INFO ]\", \"[DEBUG]\" };\n         private Throwable m_exception;\n-        \n-        public void log(int level, String message) {\n+\n+        public void failOnException() throws Throwable\n+        {\n+            if (m_exception != null)\n+            {\n+                throw m_exception;\n+            }\n+        }\n+\n+        public void log(int level, String message)\n+        {\n             System.out.println(LEVEL[level] + \" - \" + message);\n         }\n \n-        public void log(int level, String message, Throwable exception) {\n+        public void log(int level, String message, Throwable exception)\n+        {\n             System.out.println(LEVEL[level] + \" - \" + message + \" - \" + exception.getMessage());\n             m_exception = exception;\n         }\n \n-        public void log(ServiceReference sr, int level, String message) {\n+        public void log(ServiceReference sr, int level, String message)\n+        {\n             System.out.println(LEVEL[level] + \" - \" + message);\n         }\n \n-        public void log(ServiceReference sr, int level, String message, Throwable exception) {\n+        public void log(ServiceReference sr, int level, String message, Throwable exception)\n+        {\n             System.out.println(LEVEL[level] + \" - \" + message + \" - \" + exception.getMessage());\n             m_exception = exception;\n         }\n-        \n-        public void failOnException() throws Throwable {\n-            if (m_exception != null) {\n-                throw m_exception;\n-            }\n-        }\n     }\n-    private static class Reference implements ServiceReference {\n-        private final Dictionary m_properties;\n \n-        public Reference(Dictionary properties) {\n+    private static class ServiceReferenceImpl implements ServiceReference\n+    {\n+        private final Properties m_properties;\n+\n+        public ServiceReferenceImpl()\n+        {\n+            this(new Properties());\n+        }\n+\n+        public ServiceReferenceImpl(Properties properties)\n+        {\n             m_properties = properties;\n         }\n \n-        public Object getProperty(String key) {\n-            return m_properties.get(key);\n+        public int compareTo(Object reference)\n+        {\n+            return 0;\n         }\n \n-        public String[] getPropertyKeys() {\n+        public Bundle getBundle()\n+        {\n             return null;\n         }\n \n-        public Bundle getBundle() {\n-            return null;\n+        public Object getProperty(String key)\n+        {\n+            return m_properties.get(key);\n         }\n \n-        public Bundle[] getUsingBundles() {\n+        public String[] getPropertyKeys()\n+        {\n+            return Collections.list(m_properties.keys()).toArray(new String[0]);\n+        }\n+\n+        public Bundle[] getUsingBundles()\n+        {\n             return null;\n         }\n \n-        public boolean isAssignableTo(Bundle bundle, String className) {\n+        public boolean isAssignableTo(Bundle bundle, String className)\n+        {\n             return false;\n         }\n \n-        public int compareTo(Object reference) {\n-            return 0;\n+        @Override\n+        public String toString()\n+        {\n+            return \"Test ConfigAdmin @ 0x\" + System.identityHashCode(this);\n+        }\n+    }\n+\n+    private File m_tempDir;\n+    private LogServiceImpl m_logger;\n+\n+    /** Go through a simple session, containing two empty configurations. */\n+    public void testBasicConfigurationSession() throws Throwable\n+    {\n+        AutoConfResourceProcessor p = createAutoConfRP();\n+\n+        createNewSession(p);\n+        String config = \"<MetaData xmlns:metatype='http://www.osgi.org/xmlns/metatype/v1.0.0'>\\n\" +\n+            \"  <OCD name='ocd' id='ocd'>\\n\" +\n+            \"    <AD id='name' type='STRING' cardinality='0' />\\n\" +\n+            \"  </OCD>\\n\" +\n+            \"  <Designate pid='simple' bundle='osgi-dp:location'>\\n\" +\n+            \"    <Object ocdref='ocd'>\\n\" +\n+            \"      <Attribute adref='name'>\\n\" +\n+            \"        <Value><![CDATA[test]]></Value>\\n\" +\n+            \"      </Attribute>\\n\" +\n+            \"    </Object>\\n\" +\n+            \"  </Designate>\\n\" +\n+            \"</MetaData>\\n\";\n+        p.process(\"basic\", new ByteArrayInputStream(config.getBytes()));\n+        p.prepare();\n+        p.commit();\n+        p.addConfigurationAdmin(new ServiceReferenceImpl(), new ConfigurationAdminImpl(\"simple\"));\n+        p.postcommit();\n+        m_logger.failOnException();\n+    }\n+\n+    /** Go through a simple session, containing two empty configurations. */\n+    public void testFilteredConfigurationSession() throws Throwable\n+    {\n+        AutoConfResourceProcessor p = createAutoConfRP();\n+\n+        createNewSession(p);\n+        String config = \"<MetaData xmlns:metatype='http://www.osgi.org/xmlns/metatype/v1.0.0' filter='(id=42)'>\\n\" +\n+            \"  <OCD name='ocd' id='ocd'>\\n\" +\n+            \"    <AD id='name' type='STRING' cardinality='0' />\\n\" +\n+            \"  </OCD>\\n\" +\n+            \"  <Designate pid='simple' bundle='osgi-dp:location'>\\n\" +\n+            \"    <Object ocdref='ocd'>\\n\" +\n+            \"      <Attribute adref='name'>\\n\" +\n+            \"        <Value><![CDATA[test]]></Value>\\n\" +\n+            \"      </Attribute>\\n\" +\n+            \"    </Object>\\n\" +\n+            \"  </Designate>\\n\" +\n+            \"</MetaData>\\n\";\n+        p.process(\"basic\", new ByteArrayInputStream(config.getBytes()));\n+        p.prepare();\n+        p.commit();\n+\n+        Properties props = new Properties();\n+        props.put(\"id\", Integer.valueOf(42));\n+\n+        ConfigurationAdminImpl ca1 = new ConfigurationAdminImpl(\"simple\");\n+        ConfigurationAdminImpl ca2 = new ConfigurationAdminImpl();\n+\n+        p.addConfigurationAdmin(new ServiceReferenceImpl(props), ca1);\n+        p.addConfigurationAdmin(new ServiceReferenceImpl(), ca2);\n+        p.postcommit();\n+\n+        m_logger.failOnException();\n+\n+        assertEquals(\"test\", ca1.m_configs.get(\"simple\").getProperties().get(\"name\"));\n+        assertTrue(ca2.m_configs.isEmpty());\n+    }\n+\n+    /** Go through a simple session, containing two empty configurations. */\n+    public void testMissingMandatoryValueInConfig() throws Throwable\n+    {\n+        AutoConfResourceProcessor p = createAutoConfRP();\n+\n+        createNewSession(p);\n+\n+        String config = \"<MetaData xmlns:metatype='http://www.osgi.org/xmlns/metatype/v1.1.0' filter='(id=42)'>\\n\" +\n+            \"  <OCD name='ocd' id='ocd'>\\n\" +\n+            \"    <AD id='name' type='Integer' />\\n\" +\n+            \"  </OCD>\\n\" +\n+            \"  <Designate pid='simple' bundle='osgi-dp:location'>\\n\" +\n+            \"    <Object ocdref='ocd'>\\n\" +\n+            \"      <Attribute adref='name'>\\n\" +\n+            \"        <Value><![CDATA[]]></Value>\\n\" +\n+            \"      </Attribute>\\n\" +\n+            \"    </Object>\\n\" +\n+            \"  </Designate>\\n\" +\n+            \"</MetaData>\\n\";\n+\n+        try\n+        {\n+            p.process(\"missing-value\", new ByteArrayInputStream(config.getBytes()));\n+            fail(\"Expected ResourceProcessorException for missing value!\");\n+        }\n+        catch (ResourceProcessorException e)\n+        {\n+            // Ok; expected...\n+            assertEquals(\"Unable to parse value for definition: adref=name\", e.getMessage());\n+        }\n+    }\n+\n+    /** Make sure the processor does not accept a 'null' session. */\n+    public void testNullSession() throws Exception\n+    {\n+        AutoConfResourceProcessor p = new AutoConfResourceProcessor();\n+        try\n+        {\n+            p.begin(null);\n+            fail(\"Should have gotten an exception when trying to begin with null session.\");\n+        }\n+        catch (Exception e)\n+        {\n+            // expected\n         }\n     }\n+\n+    /** Go through a simple session, containing two empty configurations. */\n+    public void testSimpleInstallAndUninstallSession() throws Throwable\n+    {\n+        AutoConfResourceProcessor p = createAutoConfRP();\n+\n+        createNewSession(p);\n+\n+        p.process(\"a\", new ByteArrayInputStream(\"<MetaData />\".getBytes()));\n+        p.prepare();\n+        p.commit();\n+        p.postcommit();\n+        m_logger.failOnException();\n+\n+        createNewSession(p);\n+\n+        p.dropAllResources();\n+        p.prepare();\n+        p.commit();\n+        p.postcommit();\n+        m_logger.failOnException();\n+    }\n+\n+    /** Go through a simple session, containing two empty configurations. */\n+    public void testSimpleSession() throws Throwable\n+    {\n+        AutoConfResourceProcessor p = createAutoConfRP();\n+\n+        createNewSession(p);\n+        p.process(\"a\", new ByteArrayInputStream(\"<MetaData />\".getBytes()));\n+        p.process(\"b\", new ByteArrayInputStream(\"<MetaData />\".getBytes()));\n+        p.prepare();\n+        p.commit();\n+        p.postcommit();\n+        m_logger.failOnException();\n+    }\n+\n+    /** Tests that we can update an existing configuration and properly handling deleted & updated configurations. */\n+    public void testUpdateConfigurationSession() throws Throwable\n+    {\n+        AutoConfResourceProcessor p = createAutoConfRP();\n+\n+        createNewSession(p);\n+\n+        String config1 = \"<MetaData xmlns:metatype='http://www.osgi.org/xmlns/metatype/v1.0.0'>\" +\n+            \"<OCD name='ocd1' id='ocd1'>\" +\n+            \"  <AD id='nameA' type='STRING' cardinality='0' />\" +\n+            \"</OCD>\" +\n+            \"<OCD name='ocd2' id='ocd2'>\" +\n+            \"  <AD id='nameB' type='STRING' cardinality='0' />\" +\n+            \"</OCD>\" +\n+            \"<Designate pid='pid2' bundle='osgi-dp:location2'>\" +\n+            \"  <Object ocdref='ocd2'>\" +\n+            \"    <Attribute adref='nameB'>\" +\n+            \"      <Value><![CDATA[test2]]></Value>\" +\n+            \"    </Attribute>\" +\n+            \"  </Object>\" +\n+            \"</Designate>\" +\n+            \"<Designate pid='pid1' bundle='osgi-dp:location1'>\" +\n+            \"  <Object ocdref='ocd1'>\" +\n+            \"    <Attribute adref='nameA'>\" +\n+            \"      <Value><![CDATA[test1]]></Value>\" +\n+            \"    </Attribute>\" +\n+            \"  </Object>\" +\n+            \"</Designate>\" +\n+            \"</MetaData>\";\n+\n+        ConfigurationAdminImpl ca = new ConfigurationAdminImpl(\"pid1\", \"pid2\", \"pid3\");\n+\n+        p.process(\"update\", new ByteArrayInputStream(config1.getBytes()));\n+        p.prepare();\n+        p.commit();\n+        p.addConfigurationAdmin(new ServiceReferenceImpl(), ca);\n+        p.postcommit();\n+        m_logger.failOnException();\n+\n+        assertEquals(2, ca.m_configs.size());\n+        assertTrue(ca.m_configs.containsKey(\"pid1\"));\n+        assertFalse(ca.m_configs.get(\"pid1\").m_deleted);\n+        assertEquals(\"test1\", ca.m_configs.get(\"pid1\").getProperties().get(\"nameA\"));\n+\n+        assertTrue(ca.m_configs.containsKey(\"pid2\"));\n+        assertFalse(ca.m_configs.get(\"pid2\").m_deleted);\n+        assertEquals(\"test2\", ca.m_configs.get(\"pid2\").getProperties().get(\"nameB\"));\n+\n+        String config2 = \"<MetaData xmlns:metatype='http://www.osgi.org/xmlns/metatype/v1.0.0'>\" +\n+            \"<OCD name='ocd3' id='ocd3'>\" +\n+            \"  <AD id='nameC' type='STRING' cardinality='0' />\" +\n+            \"</OCD>\" +\n+            \"<OCD name='ocd2' id='ocd2'>\" +\n+            \"  <AD id='nameB' type='STRING' cardinality='0' />\" +\n+            \"</OCD>\" +\n+            \"<Designate pid='pid2' bundle='osgi-dp:location2'>\" +\n+            \"  <Object ocdref='ocd2'>\" +\n+            \"    <Attribute adref='nameB'>\" +\n+            \"      <Value><![CDATA[test4]]></Value>\" +\n+            \"    </Attribute>\" +\n+            \"  </Object>\" +\n+            \"</Designate>\" +\n+            \"<Designate pid='pid3' bundle='osgi-dp:location3'>\" +\n+            \"  <Object ocdref='ocd3'>\" +\n+            \"    <Attribute adref='nameC'>\" +\n+            \"      <Value><![CDATA[test3]]></Value>\" +\n+            \"    </Attribute>\" +\n+            \"  </Object>\" +\n+            \"</Designate>\" +\n+            \"</MetaData>\";\n+\n+        createNewSession(p);\n+\n+        p.process(\"update\", new ByteArrayInputStream(config2.getBytes()));\n+        p.prepare();\n+        p.commit();\n+        p.addConfigurationAdmin(new ServiceReferenceImpl(), ca);\n+        p.postcommit();\n+        m_logger.failOnException();\n+\n+        assertEquals(3, ca.m_configs.size());\n+        assertTrue(ca.m_configs.containsKey(\"pid1\"));\n+        assertTrue(ca.m_configs.get(\"pid1\").m_deleted);\n+        assertEquals(\"test1\", ca.m_configs.get(\"pid1\").getProperties().get(\"nameA\"));\n+\n+        assertTrue(ca.m_configs.containsKey(\"pid2\"));\n+        assertFalse(ca.m_configs.get(\"pid2\").m_deleted);\n+        assertEquals(\"test4\", ca.m_configs.get(\"pid2\").getProperties().get(\"nameB\"));\n+\n+        assertTrue(ca.m_configs.containsKey(\"pid3\"));\n+        assertFalse(ca.m_configs.get(\"pid3\").m_deleted);\n+        assertEquals(\"test3\", ca.m_configs.get(\"pid3\").getProperties().get(\"nameC\"));\n+    }\n+\n+    @Override\n+    protected void setUp() throws IOException\n+    {\n+        m_tempDir = File.createTempFile(\"persistence\", \"dir\");\n+        m_tempDir.delete();\n+        m_tempDir.mkdirs();\n+\n+        m_logger = new LogServiceImpl();\n+    }\n+\n+    @Override\n+    protected void tearDown() throws Exception\n+    {\n+        Utils.removeDirectoryWithContent(m_tempDir);\n+    }\n+\n+    private AutoConfResourceProcessor createAutoConfRP()\n+    {\n+        AutoConfResourceProcessor p = new AutoConfResourceProcessor();\n+        Utils.configureObject(p, LogService.class, m_logger);\n+        Utils.configureObject(p, DependencyManager.class, createMockDM());\n+        Utils.configureObject(p, PersistencyManager.class, new PersistencyManager(m_tempDir));\n+        return p;\n+    }\n+\n+    @SuppressWarnings(\"unused\")\n+    private BundleContext createMockBundleContext()\n+    {\n+        return Utils.createMockObjectAdapter(BundleContext.class, new Object()\n+        {\n+            public Filter createFilter(String condition)\n+            {\n+                return Utils.createMockObjectAdapter(Filter.class, new Object()\n+                {\n+                    public boolean match(ServiceReference ref)\n+                    {\n+                        Object id = ref.getProperty(\"id\");\n+                        if (id != null && id.equals(Integer.valueOf(42)))\n+                        {\n+                            return true;\n+                        }\n+                        return false;\n+                    }\n+\n+                    public void remove(Component service)\n+                    {\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    @SuppressWarnings(\"unused\")\n+    private Component createMockComponent()\n+    {\n+        return Utils.createMockObjectAdapter(Component.class, new Object()\n+        {\n+            public DependencyManager getDependencyManager()\n+            {\n+                return new DependencyManager(createMockBundleContext());\n+            }\n+        });\n+    }\n+\n+    private DependencyManager createMockDM()\n+    {\n+        return new DependencyManager(createMockBundleContext())\n+        {\n+            public void remove(Component service)\n+            {\n+            }\n+        };\n+    }\n+\n+    private DeploymentSession createNewSession(AutoConfResourceProcessor p)\n+    {\n+        DeploymentSessionImpl s = new DeploymentSessionImpl();\n+        p.begin(s);\n+        Utils.configureObject(p, Component.class, createMockComponent());\n+        return s;\n+    }\n }",
                "raw_url": "https://github.com/apache/felix/raw/cf6665e272505981b8236f3c6a54ac5be888ed8b/deploymentadmin/autoconf/src/test/java/org/apache/felix/deployment/rp/autoconf/AutoConfResourceProcessorTest.java",
                "sha": "271520c89ccf9a120ce523b07b7bcde5ea26668d",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/felix/blob/cf6665e272505981b8236f3c6a54ac5be888ed8b/deploymentadmin/autoconf/src/test/java/org/apache/felix/deployment/rp/autoconf/DefaultNullObject.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/deploymentadmin/autoconf/src/test/java/org/apache/felix/deployment/rp/autoconf/DefaultNullObject.java?ref=cf6665e272505981b8236f3c6a54ac5be888ed8b",
                "deletions": 18,
                "filename": "deploymentadmin/autoconf/src/test/java/org/apache/felix/deployment/rp/autoconf/DefaultNullObject.java",
                "patch": "@@ -21,50 +21,59 @@\n import java.lang.reflect.InvocationHandler;\n import java.lang.reflect.Method;\n \n-\n /**\n  * Default null object implementation. Uses a dynamic proxy. Null objects are used\n  * as placeholders for services that are not available.\n  * \n  * @author <a href=\"mailto:dev@felix.apache.org\">Felix Project Team</a>\n  */\n-public class DefaultNullObject implements InvocationHandler {\n+public class DefaultNullObject implements InvocationHandler\n+{\n     private static final Boolean DEFAULT_BOOLEAN = Boolean.FALSE;\n     private static final Byte DEFAULT_BYTE = new Byte((byte) 0);\n     private static final Short DEFAULT_SHORT = new Short((short) 0);\n     private static final Integer DEFAULT_INT = new Integer(0);\n     private static final Long DEFAULT_LONG = new Long(0);\n     private static final Float DEFAULT_FLOAT = new Float(0.0f);\n     private static final Double DEFAULT_DOUBLE = new Double(0.0);\n-    \n+\n     /**\n      * Invokes a method on this null object. The method will return a default\n      * value without doing anything.\n      */\n-    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable\n+    {\n         Class returnType = method.getReturnType();\n-        if (returnType.equals(Boolean.class) || returnType.equals(Boolean.TYPE)) {\n+        if (returnType.equals(Boolean.class) || returnType.equals(Boolean.TYPE))\n+        {\n             return DEFAULT_BOOLEAN;\n         }\n-        else if (returnType.equals(Byte.class) || returnType.equals(Byte.TYPE)) {\n+        else if (returnType.equals(Byte.class) || returnType.equals(Byte.TYPE))\n+        {\n             return DEFAULT_BYTE;\n-        } \n-        else if (returnType.equals(Short.class) || returnType.equals(Short.TYPE)) {\n+        }\n+        else if (returnType.equals(Short.class) || returnType.equals(Short.TYPE))\n+        {\n             return DEFAULT_SHORT;\n-        } \n-        else if (returnType.equals(Integer.class) || returnType.equals(Integer.TYPE)) {\n+        }\n+        else if (returnType.equals(Integer.class) || returnType.equals(Integer.TYPE))\n+        {\n             return DEFAULT_INT;\n-        } \n-        else if (returnType.equals(Long.class) || returnType.equals(Long.TYPE)) {\n+        }\n+        else if (returnType.equals(Long.class) || returnType.equals(Long.TYPE))\n+        {\n             return DEFAULT_LONG;\n-        } \n-        else if (returnType.equals(Float.class) || returnType.equals(Float.TYPE)) {\n+        }\n+        else if (returnType.equals(Float.class) || returnType.equals(Float.TYPE))\n+        {\n             return DEFAULT_FLOAT;\n-        } \n-        else if (returnType.equals(Double.class) || returnType.equals(Double.TYPE)) {\n+        }\n+        else if (returnType.equals(Double.class) || returnType.equals(Double.TYPE))\n+        {\n             return DEFAULT_DOUBLE;\n-        } \n-        else {\n+        }\n+        else\n+        {\n             return null;\n         }\n     }",
                "raw_url": "https://github.com/apache/felix/raw/cf6665e272505981b8236f3c6a54ac5be888ed8b/deploymentadmin/autoconf/src/test/java/org/apache/felix/deployment/rp/autoconf/DefaultNullObject.java",
                "sha": "e6b827c3af5098b3ae6d8d5118b9d24aec702b1e",
                "status": "modified"
            },
            {
                "additions": 99,
                "blob_url": "https://github.com/apache/felix/blob/cf6665e272505981b8236f3c6a54ac5be888ed8b/deploymentadmin/autoconf/src/test/java/org/apache/felix/deployment/rp/autoconf/PersistencyManagerTest.java",
                "changes": 99,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/deploymentadmin/autoconf/src/test/java/org/apache/felix/deployment/rp/autoconf/PersistencyManagerTest.java?ref=cf6665e272505981b8236f3c6a54ac5be888ed8b",
                "deletions": 0,
                "filename": "deploymentadmin/autoconf/src/test/java/org/apache/felix/deployment/rp/autoconf/PersistencyManagerTest.java",
                "patch": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.felix.deployment.rp.autoconf;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Hashtable;\n+\n+import org.osgi.framework.Filter;\n+import org.osgi.framework.FrameworkUtil;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test cases for {@link PersistencyManager}.\n+ */\n+public class PersistencyManagerTest extends TestCase\n+{\n+    private File m_tempDir;\n+\n+    public void testHandleNonExistingDirectory() throws Exception\n+    {\n+        PersistencyManager pm = new PersistencyManager(new File(\"/does/not/exist\"));\n+        assertNotNull(pm);\n+\n+        assertEquals(0, pm.getResourceNames().size());\n+    }\n+\n+    public void testHandleEmptyExistingDirectory() throws Exception\n+    {\n+        PersistencyManager pm = new PersistencyManager(m_tempDir);\n+        assertNotNull(pm);\n+\n+        assertEquals(0, pm.getResourceNames().size());\n+    }\n+\n+    public void testLoadNonExistingResource() throws Exception\n+    {\n+        PersistencyManager pm = new PersistencyManager(m_tempDir);\n+        assertEquals(0, pm.load(\"doesNotExist\").size());\n+    }\n+\n+    public void testSaveResourceWithoutFilter() throws Exception\n+    {\n+        AutoConfResource res1 = new AutoConfResource(\"res1\", \"pid1\", null, \"osgi-dp:locationA\", false, new Hashtable<String, Object>(), null);\n+        AutoConfResource res2 = new AutoConfResource(\"res2\", \"pid2\", null, \"osgi-dp:locationB\", false, new Hashtable<String, Object>(), null);\n+\n+        PersistencyManager pm = new PersistencyManager(m_tempDir);\n+        pm.store(\"test1\", Arrays.asList(res1, res2));\n+\n+        assertEquals(2, pm.load(\"test1\").size());\n+    }\n+\n+    public void testSaveResourceWithFilter() throws Exception\n+    {\n+        Filter f = FrameworkUtil.createFilter(\"(name=test)\");\n+\n+        AutoConfResource res1 = new AutoConfResource(\"res1\", \"pid1\", null, \"osgi-dp:locationA\", false, new Hashtable<String, Object>(), f);\n+        AutoConfResource res2 = new AutoConfResource(\"res2\", \"pid2\", null, \"osgi-dp:locationB\", false, new Hashtable<String, Object>(), null);\n+\n+        PersistencyManager pm = new PersistencyManager(m_tempDir);\n+        pm.store(\"test1\", Arrays.asList(res1, res2));\n+\n+        assertEquals(2, pm.load(\"test1\").size());\n+    }\n+\n+    @Override\n+    protected void setUp() throws IOException\n+    {\n+        m_tempDir = File.createTempFile(\"persistence\", \"dir\");\n+        m_tempDir.delete();\n+        m_tempDir.mkdirs();\n+    }\n+\n+    @Override\n+    protected void tearDown() throws Exception\n+    {\n+        Utils.removeDirectoryWithContent(m_tempDir);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/felix/raw/cf6665e272505981b8236f3c6a54ac5be888ed8b/deploymentadmin/autoconf/src/test/java/org/apache/felix/deployment/rp/autoconf/PersistencyManagerTest.java",
                "sha": "07bfe30700a5ee0ec57d4d4b624f6232d0d765d1",
                "status": "added"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/felix/blob/cf6665e272505981b8236f3c6a54ac5be888ed8b/deploymentadmin/autoconf/src/test/java/org/apache/felix/deployment/rp/autoconf/Utils.java",
                "changes": 65,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/deploymentadmin/autoconf/src/test/java/org/apache/felix/deployment/rp/autoconf/Utils.java?ref=cf6665e272505981b8236f3c6a54ac5be888ed8b",
                "deletions": 23,
                "filename": "deploymentadmin/autoconf/src/test/java/org/apache/felix/deployment/rp/autoconf/Utils.java",
                "patch": "@@ -28,14 +28,16 @@\n /**\n  * Utility class that injects dependencies. Can be used to unit test service implementations.\n  */\n-public class Utils {\n+public class Utils\n+{\n     /**\n      * Configures an object to use a null object for the specified service interface.\n      *\n      * @param object the object\n      * @param iface the service interface\n      */\n-    public static void configureObject(Object object, Class iface) {\n+    public static void configureObject(Object object, Class iface)\n+    {\n         configureObject(object, iface, createNullObject(iface));\n     }\n \n@@ -45,8 +47,9 @@ public static void configureObject(Object object, Class iface) {\n      * @param iface the service interface\n      * @return a null object\n      */\n-    public static Object createNullObject(Class iface) {\n-        return Proxy.newProxyInstance(iface.getClassLoader(), new Class[] { iface }, new DefaultNullObject());\n+    public static <T> T createNullObject(Class<T> iface)\n+    {\n+        return (T) Proxy.newProxyInstance(iface.getClassLoader(), new Class[] { iface }, new DefaultNullObject());\n     }\n \n     /**\n@@ -57,19 +60,24 @@ public static Object createNullObject(Class iface) {\n      * @param handler the handler to pass invocations to.\n      * @return an adapter that will try to pass on received invocations to the given handler\n      */\n-    public static Object createMockObjectAdapter(Class iface, final Object handler) {\n-        return Proxy.newProxyInstance(iface.getClassLoader(), new Class[] { iface }, new DefaultNullObject() {\n-\n-            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n-                try {\n+    public static <T> T createMockObjectAdapter(Class<T> iface, final Object handler)\n+    {\n+        return (T) Proxy.newProxyInstance(iface.getClassLoader(), new Class[] { iface }, new DefaultNullObject()\n+        {\n+            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable\n+            {\n+                try\n+                {\n                     Method bridge = handler.getClass().getMethod(method.getName(), method.getParameterTypes());\n                     bridge.setAccessible(true);\n                     return bridge.invoke(handler, args);\n                 }\n-                catch (NoSuchMethodException ex) {\n+                catch (NoSuchMethodException ex)\n+                {\n                     return super.invoke(proxy, method, args);\n                 }\n-                catch (InvocationTargetException ex) {\n+                catch (InvocationTargetException ex)\n+                {\n                     throw ex.getCause();\n                 }\n             }\n@@ -83,42 +91,53 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl\n      * @param iface the service interface\n      * @param instance the implementation\n      */\n-    public static void configureObject(Object object, Class iface, Object instance) {\n+    public static void configureObject(Object object, Class iface, Object instance)\n+    {\n         Class serviceClazz = object.getClass();\n \n-        while (serviceClazz != null) {\n+        while (serviceClazz != null)\n+        {\n             Field[] fields = serviceClazz.getDeclaredFields();\n             AccessibleObject.setAccessible(fields, true);\n-            for (int j = 0; j < fields.length; j++) {\n-                if (fields[j].getType().equals(iface)) {\n-                    try {\n+            for (int j = 0; j < fields.length; j++)\n+            {\n+                if (fields[j].getType().equals(iface))\n+                {\n+                    try\n+                    {\n                         // synchronized makes sure the field is actually written to immediately\n-                        synchronized (new Object()) {\n+                        synchronized (new Object())\n+                        {\n                             fields[j].set(object, instance);\n                         }\n                     }\n-                    catch (Exception e) {\n+                    catch (Exception e)\n+                    {\n                         throw new IllegalStateException(\"Could not set field \" + fields[j].getName() + \" on \" + object);\n                     }\n                 }\n             }\n             serviceClazz = serviceClazz.getSuperclass();\n         }\n     }\n-    \n+\n     /**\n      * Remove the given directory and all it's files and subdirectories\n      * \n      * @param directory the name of the directory to remove\n      */\n-    public static void removeDirectoryWithContent(File directory) {\n-        if ((directory == null) || !directory.exists()) {\n+    public static void removeDirectoryWithContent(File directory)\n+    {\n+        if ((directory == null) || !directory.exists())\n+        {\n             return;\n         }\n         File[] filesAndSubDirs = directory.listFiles();\n-        for (int i=0; i < filesAndSubDirs.length; i++) {\n+        for (int i = 0; i < filesAndSubDirs.length; i++)\n+        {\n             File file = filesAndSubDirs[i];\n-            if (file.isDirectory()) {\n+            if (file.isDirectory())\n+            {\n                 removeDirectoryWithContent(file);\n             }\n             // else just remove the file",
                "raw_url": "https://github.com/apache/felix/raw/cf6665e272505981b8236f3c6a54ac5be888ed8b/deploymentadmin/autoconf/src/test/java/org/apache/felix/deployment/rp/autoconf/Utils.java",
                "sha": "a13d5e79c364f77f6275878af1ebeb25264c707e",
                "status": "modified"
            }
        ],
        "message": "Code review:\n\n- cleaned up the code to use more recent Java constructs, such as foreach\n  loops;\n- cleaned up the test cases to make them a bit more readable and easier to\n  maintain by folding some duplicate code into helper methods;\n- fixed a corner case in which an AutoConf resource drops a configuration while\n  updating existing ones at the same time. A NPE could be thrown in this\n  situation due ConfigurationAdmin not being present;\n- fixed a corner case in which a resource is dropped twice. A IOException could\n  be thrown;\n- moved some really specific MetaType code to a utility class;\n- added some test cases for PersistencyManager;\n- applied the code formatting guidelines for Apache Felix.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1724802 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/66b7605aed25924d75328003be306318859b43f7",
        "patched_files": [
            "PersistencyManager.java",
            "Activator.java",
            "DefaultNullObject.java",
            "AutoConfResourceProcessor.java",
            "Utils.java",
            "MetaTypeUtil.java",
            "AutoConfResource.java",
            "pom.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "AutoConfResourceProcessorTest.java",
            "PersistencyManagerTest.java"
        ]
    },
    "felix_da892ce": {
        "bug_id": "felix_da892ce",
        "commit": "https://github.com/apache/felix/commit/da892ce1ad54867ca41df2ee11e1ec95740b4add",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/felix/blob/da892ce1ad54867ca41df2ee11e1ec95740b4add/scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java?ref=da892ce1ad54867ca41df2ee11e1ec95740b4add",
                "deletions": 2,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java",
                "patch": "@@ -556,8 +556,11 @@ void dispose(int reason)\n                 }\n \n             }\n-            configAdminTracker.dispose();\n-\n+            if (configAdminTracker != null)\n+            {\n+            \tconfigAdminTracker.dispose();\n+            }\n+            \n             log(LogService.LOG_DEBUG, \"BundleComponentActivator : Bundle [{0}] STOPPED\",\n                 new Object[] { m_bundle.getBundleId() }, null, null, null);\n ",
                "raw_url": "https://github.com/apache/felix/raw/da892ce1ad54867ca41df2ee11e1ec95740b4add/scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java",
                "sha": "7ec8bad458659589dd60a40f4920b509f432b123",
                "status": "modified"
            }
        ],
        "message": "FELIX-5079 fix NPE introduced in 1717854\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1719115 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/5ba10eb544b7430674156d38334b8aa588954a40",
        "patched_files": [
            "BundleComponentActivator.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "BundleComponentActivatorTest.java"
        ]
    },
    "felix_de16d74": {
        "bug_id": "felix_de16d74",
        "commit": "https://github.com/apache/felix/commit/de16d74e29c43af71d4f67602dc103f3343d1bf3",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/felix/blob/de16d74e29c43af71d4f67602dc103f3343d1bf3/scr/src/main/java/org/apache/felix/scr/impl/manager/SingleComponentManager.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/manager/SingleComponentManager.java?ref=de16d74e29c43af71d4f67602dc103f3343d1bf3",
                "deletions": 4,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/manager/SingleComponentManager.java",
                "patch": "@@ -450,15 +450,15 @@ void unregisterComponentId()\n                 \t{\n                 \t\tservicePids.addAll((List)configPropServicePids);\n                 \t}\n-                \telse \n+                \telse\n                 \t{\n                 \t\tservicePids.add(configPropServicePids.toString());\n                 \t}\n                     if (m_factoryProperties.get(Constants.SERVICE_PID) instanceof String)\n                     {\n                         servicePids.add((String)m_factoryProperties.get(Constants.SERVICE_PID));\n                     }\n-                    \n+\n                 \tif ( servicePids.size() == 1 )\n                 \t{\n                 \t\tprops.put(Constants.SERVICE_PID, servicePids.get(0));\n@@ -761,10 +761,11 @@ private boolean servicePropertiesMatches( ServiceRegistration<S> reg, Dictionary\n     public S getService( Bundle bundle, ServiceRegistration<S> serviceRegistration )\n     {\n         boolean success = getServiceInternal();\n-        if ( success )\n+        ComponentContextImpl<S> componentContext = m_componentContext;\n+        if ( success && componentContext != null)\n         {\n             m_useCount.incrementAndGet();\n-            return m_componentContext.getImplementationObject( true );\n+            return componentContext.getImplementationObject( true );\n         }\n         else\n         {",
                "raw_url": "https://github.com/apache/felix/raw/de16d74e29c43af71d4f67602dc103f3343d1bf3/scr/src/main/java/org/apache/felix/scr/impl/manager/SingleComponentManager.java",
                "sha": "63038e841508ca319c9c414531b414c2dc3c8bca",
                "status": "modified"
            },
            {
                "additions": 94,
                "blob_url": "https://github.com/apache/felix/blob/de16d74e29c43af71d4f67602dc103f3343d1bf3/scr/src/test/java/org/apache/felix/scr/impl/manager/SingleComponentManagerTest.java",
                "changes": 94,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/test/java/org/apache/felix/scr/impl/manager/SingleComponentManagerTest.java?ref=de16d74e29c43af71d4f67602dc103f3343d1bf3",
                "deletions": 0,
                "filename": "scr/src/test/java/org/apache/felix/scr/impl/manager/SingleComponentManagerTest.java",
                "patch": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.felix.scr.impl.manager;\n+\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+\n+import java.lang.reflect.Field;\n+\n+import org.apache.felix.scr.impl.config.ComponentContainer;\n+import org.apache.felix.scr.impl.helper.ComponentMethods;\n+import org.apache.felix.scr.impl.metadata.ComponentMetadata;\n+import org.apache.felix.scr.impl.metadata.DSVersion;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n+\n+public class SingleComponentManagerTest\n+{\n+    @Test\n+    public void testGetService() throws Exception {\n+        ComponentMetadata cm = new ComponentMetadata(DSVersion.DS13);\n+        cm.setImplementationClassName(\"foo.bar.SomeClass\");\n+        cm.validate(null);\n+\n+        @SuppressWarnings(\"unchecked\")\n+        ComponentContainer<Object> cc = Mockito.mock(ComponentContainer.class);\n+        Mockito.when(cc.getComponentMetadata()).thenReturn(cm);\n+\n+        SingleComponentManager<Object> scm = new SingleComponentManager<Object>(cc, new ComponentMethods()) {\n+            @Override\n+            boolean getServiceInternal()\n+            {\n+                return true;\n+            }\n+        };\n+\n+        BundleContext bc = Mockito.mock(BundleContext.class);\n+        Bundle b = Mockito.mock(Bundle.class);\n+        Mockito.when(b.getBundleContext()).thenReturn(bc);\n+\n+        ComponentContextImpl<Object> cci = new ComponentContextImpl<Object>(scm, b);\n+        Object implObj = new Object();\n+        cci.setImplementationObject(implObj);\n+        cci.setImplementationAccessible(true);\n+\n+        Field f = SingleComponentManager.class.getDeclaredField(\"m_componentContext\");\n+        f.setAccessible(true);\n+        f.set(scm, cci);\n+\n+        scm.m_internalEnabled = true;\n+        assertSame(implObj, scm.getService(null, null));\n+    }\n+\n+    @Test\n+    public void testGetServiceWithNullComponentContext()\n+    {\n+        ComponentMetadata cm = new ComponentMetadata(DSVersion.DS13);\n+        cm.setImplementationClassName(\"foo.bar.SomeClass\");\n+        cm.validate(null);\n+\n+        @SuppressWarnings(\"unchecked\")\n+        ComponentContainer<Object> cc = Mockito.mock(ComponentContainer.class);\n+        Mockito.when(cc.getComponentMetadata()).thenReturn(cm);\n+\n+        SingleComponentManager<?> scm = new SingleComponentManager<Object>(cc, new ComponentMethods()) {\n+            @Override\n+            boolean getServiceInternal()\n+            {\n+                return true;\n+            }\n+        };\n+        scm.m_internalEnabled = true;\n+        assertNull(\"m_componentContext is null, this should not cause an NPE\",\n+                scm.getService(null, null));\n+    }\n+}",
                "raw_url": "https://github.com/apache/felix/raw/de16d74e29c43af71d4f67602dc103f3343d1bf3/scr/src/test/java/org/apache/felix/scr/impl/manager/SingleComponentManagerTest.java",
                "sha": "596f9bb8e943dfc8148c9cd7902ecbd69c808fba",
                "status": "added"
            }
        ],
        "message": "[SCR] Fix potential NPE in concurrent scenarios\n\nAlso included unit tests.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1690926 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/db0043915a0232e043c4d3dbcae01c2538d7dc30",
        "patched_files": [
            "SingleComponentManager.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "SingleComponentManagerTest.java"
        ]
    },
    "felix_e441812": {
        "bug_id": "felix_e441812",
        "commit": "https://github.com/apache/felix/commit/e441812b926ef59ec325c69dc5824f5646b5ced5",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/felix/blob/e441812b926ef59ec325c69dc5824f5646b5ced5/karaf/features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/karaf/features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java?ref=e441812b926ef59ec325c69dc5824f5646b5ced5",
                "deletions": 1,
                "filename": "karaf/features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java",
                "patch": "@@ -301,7 +301,10 @@ public void uninstallFeature(String name, String version) throws Exception {\n             bundles.removeAll(b);\n         }\n         for (long bundleId : bundles) {\n-            getBundleContext().getBundle(bundleId).uninstall();\n+            Bundle b = getBundleContext().getBundle(bundleId);\n+            if (b != null) {\n+                b.uninstall();\n+            }\n         }\n         callListeners(new FeatureEvent(feature, FeatureEvent.EventType.FeatureInstalled, false));\n         saveState();",
                "raw_url": "https://github.com/apache/felix/raw/e441812b926ef59ec325c69dc5824f5646b5ced5/karaf/features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java",
                "sha": "421de12863716757b6f8c661543a3a20bf60f590",
                "status": "modified"
            }
        ],
        "message": "FELIX-1566: Possible NPE when uninstalling a feature\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@812386 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/2a1f92bd6e3d1945e0dd2ce87c52c567bda0195c",
        "patched_files": [
            "FeaturesServiceImpl.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "FeaturesServiceImplTest.java"
        ]
    },
    "felix_eb493a3": {
        "bug_id": "felix_eb493a3",
        "commit": "https://github.com/apache/felix/commit/eb493a3ca0de272bd71d1bc066911b2b74642e67",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/felix/blob/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/assembly/src/main/descriptors/unix-bin.xml",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/karaf/assembly/src/main/descriptors/unix-bin.xml?ref=eb493a3ca0de272bd71d1bc066911b2b74642e67",
                "deletions": 0,
                "filename": "karaf/assembly/src/main/descriptors/unix-bin.xml",
                "patch": "@@ -170,6 +170,15 @@\n                 <include>org.ops4j.pax.url:pax-url-wrap</include>\n             </includes>\n         </dependencySet>\n+       <dependencySet>\n+            <outputDirectory>/system</outputDirectory>\n+            <unpack>false</unpack>\n+            <useProjectArtifact>false</useProjectArtifact>\n+            <outputFileNameMapping>org/apache/felix/karaf/${artifact.artifactId}/${artifact.baseVersion}/${artifact.artifactId}-${artifact.baseVersion}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>\n+            <includes>\n+                <include>org.apache.felix.karaf:org.apache.felix.karaf.commons</include>\n+            </includes>\n+        </dependencySet>\n         <dependencySet>\n             <outputDirectory>/system</outputDirectory>\n             <unpack>false</unpack>",
                "raw_url": "https://github.com/apache/felix/raw/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/assembly/src/main/descriptors/unix-bin.xml",
                "sha": "d148c4803ed48977ed06e9273ed84adacd51c664",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/felix/blob/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/assembly/src/main/descriptors/windows-bin.xml",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/karaf/assembly/src/main/descriptors/windows-bin.xml?ref=eb493a3ca0de272bd71d1bc066911b2b74642e67",
                "deletions": 0,
                "filename": "karaf/assembly/src/main/descriptors/windows-bin.xml",
                "patch": "@@ -162,6 +162,15 @@\n                 <include>org.ops4j.pax.url:pax-url-wrap</include>\n             </includes>\n         </dependencySet>\n+        <dependencySet>\n+            <outputDirectory>/system</outputDirectory>\n+            <unpack>false</unpack>\n+            <useProjectArtifact>false</useProjectArtifact>\n+            <outputFileNameMapping>org/apache/felix/karaf/${artifact.artifactId}/${artifact.baseVersion}/${artifact.artifactId}-${artifact.baseVersion}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>\n+            <includes>\n+                <include>org.apache.felix.karaf:org.apache.felix.karaf.commons</include>\n+            </includes>\n+        </dependencySet>\n         <dependencySet>\n             <outputDirectory>/system</outputDirectory>\n             <unpack>false</unpack>",
                "raw_url": "https://github.com/apache/felix/raw/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/assembly/src/main/descriptors/windows-bin.xml",
                "sha": "995eed193ac1f1de3781a198b35d2e452e3cb2ed",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/felix/blob/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/assembly/src/main/filtered-resources/etc/startup.properties",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/karaf/assembly/src/main/filtered-resources/etc/startup.properties?ref=eb493a3ca0de272bd71d1bc066911b2b74642e67",
                "deletions": 0,
                "filename": "karaf/assembly/src/main/filtered-resources/etc/startup.properties",
                "patch": "@@ -36,6 +36,7 @@ org/apache/felix/org.apache.felix.fileinstall/${felix.fileinstall.version}/org.a\n #\n org/apache/aries/blueprint/org.apache.aries.blueprint/${aries.blueprint.version}/org.apache.aries.blueprint-${aries.blueprint.version}.jar=20\n \n+org/apache/felix/karaf/org.apache.felix.karaf.commons/${pom.version}/org.apache.felix.karaf.commons-${pom.version}.jar=30\n org/apache/felix/gogo/org.apache.felix.gogo.runtime/${felix.gogo.version}/org.apache.felix.gogo.runtime-${felix.gogo.version}.jar=30\n org/apache/felix/karaf/shell/org.apache.felix.karaf.shell.console/${pom.version}/org.apache.felix.karaf.shell.console-${pom.version}.jar=30\n org/apache/felix/karaf/deployer/org.apache.felix.karaf.deployer.spring/${pom.version}/org.apache.felix.karaf.deployer.spring-${pom.version}.jar=30",
                "raw_url": "https://github.com/apache/felix/raw/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/assembly/src/main/filtered-resources/etc/startup.properties",
                "sha": "63c3cd0ada9fbdd813a46ca3073eb7674d6f6c35",
                "status": "modified"
            },
            {
                "additions": 70,
                "blob_url": "https://github.com/apache/felix/blob/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/commons/pom.xml",
                "changes": 70,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/karaf/commons/pom.xml?ref=eb493a3ca0de272bd71d1bc066911b2b74642e67",
                "deletions": 0,
                "filename": "karaf/commons/pom.xml",
                "patch": "@@ -0,0 +1,70 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <!--\n+\n+      Licensed to the Apache Software Foundation (ASF) under one or more\n+      contributor license agreements.  See the NOTICE file distributed with\n+      this work for additional information regarding copyright ownership.\n+      The ASF licenses this file to You under the Apache License, Version 2.0\n+      (the \"License\"); you may not use this file except in compliance with\n+      the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+      Unless required by applicable law or agreed to in writing, software\n+      distributed under the License is distributed on an \"AS IS\" BASIS,\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+      See the License for the specific language governing permissions and\n+      limitations under the License.\n+  -->\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <artifactId>karaf</artifactId>\n+    <groupId>org.apache.felix.karaf</groupId>\n+    <version>1.5.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <groupId>org.apache.felix.karaf</groupId>\n+  <artifactId>org.apache.felix.karaf.commons</artifactId>\n+  <version>1.5.0-SNAPSHOT</version>\n+  <packaging>bundle</packaging>\n+  <name>Apache Felix Karaf :: Commons</name>\n+\n+  <properties>\n+    <appendedResourcesDirectory>${basedir}/../etc/appended-resources</appendedResourcesDirectory>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.felix</groupId>\n+      <artifactId>org.osgi.core</artifactId>\n+      <scope>provided</scope>\n+    </dependency>    \n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.felix</groupId>\n+        <artifactId>maven-bundle-plugin</artifactId>\n+        <configuration>\n+          <instructions>\n+            <Bundle-SymbolicName>${pom.artifactId}</Bundle-SymbolicName>\n+            <Export-Package>${pom.artifactId}*;version=${project.version}</Export-Package>\n+            <Import-Package>\n+                !${pom.artifactId}*,\n+                *\n+            </Import-Package>\n+            <_versionpolicy>${bnd.version.policy}</_versionpolicy>\n+          </instructions>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+\n+</project>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/felix/raw/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/commons/pom.xml",
                "sha": "f491e69987d42efbf384deaf9c91e7c00cf25048",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/felix/blob/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/commons/src/main/java/org/apache/felix/karaf/commons/osgi/VersionRange.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/karaf/commons/src/main/java/org/apache/felix/karaf/commons/osgi/VersionRange.java?ref=eb493a3ca0de272bd71d1bc066911b2b74642e67",
                "deletions": 1,
                "filename": "karaf/commons/src/main/java/org/apache/felix/karaf/commons/osgi/VersionRange.java",
                "patch": "@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.felix.karaf.features.internal;\n+package org.apache.felix.karaf.commons.osgi;\n \n import org.osgi.framework.Version;\n ",
                "previous_filename": "karaf/features/core/src/main/java/org/apache/felix/karaf/features/internal/VersionRange.java",
                "raw_url": "https://github.com/apache/felix/raw/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/commons/src/main/java/org/apache/felix/karaf/commons/osgi/VersionRange.java",
                "sha": "47045deefc36bc8e74695906c9d4c1ed449d59e6",
                "status": "renamed"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/felix/blob/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/features/core/pom.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/karaf/features/core/pom.xml?ref=eb493a3ca0de272bd71d1bc066911b2b74642e67",
                "deletions": 0,
                "filename": "karaf/features/core/pom.xml",
                "patch": "@@ -54,6 +54,11 @@\n             <artifactId>org.apache.felix.bundlerepository</artifactId>\n         </dependency>\n \n+        <dependency>\n+            <groupId>org.apache.felix.karaf</groupId>\n+            <artifactId>org.apache.felix.karaf.commons</artifactId>\n+        </dependency>\n+\n         <dependency>\n             <groupId>org.apache.felix.karaf.shell</groupId>\n             <artifactId>org.apache.felix.karaf.shell.console</artifactId>",
                "raw_url": "https://github.com/apache/felix/raw/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/features/core/pom.xml",
                "sha": "58c19ea8d6d1a27ea7583e686f44345523574d90",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/felix/blob/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/karaf/features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java?ref=eb493a3ca0de272bd71d1bc066911b2b74642e67",
                "deletions": 0,
                "filename": "karaf/features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java",
                "patch": "@@ -40,6 +40,7 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import org.apache.felix.karaf.commons.osgi.VersionRange;\n import org.apache.felix.karaf.features.FeaturesService;\n import org.apache.felix.karaf.features.Feature;\n import org.apache.felix.karaf.features.Repository;",
                "raw_url": "https://github.com/apache/felix/raw/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java",
                "sha": "5bbf00067fdb2e6fd50fbf9612df1f1f2e4c0abc",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/felix/blob/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/pom.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/karaf/pom.xml?ref=eb493a3ca0de272bd71d1bc066911b2b74642e67",
                "deletions": 0,
                "filename": "karaf/pom.xml",
                "patch": "@@ -35,6 +35,7 @@\n \n     <modules>\n         <module>main</module>\n+        <module>commons</module>\n         <module>features</module>\n         <module>admin</module>\n         <module>deployer</module>\n@@ -170,6 +171,11 @@\n                 <artifactId>org.apache.felix.karaf.client</artifactId>\n                 <version>${pom.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>org.apache.felix.karaf</groupId>\n+                <artifactId>org.apache.felix.karaf.commons</artifactId>\n+                <version>${pom.version}</version>\n+            </dependency>\n             <dependency>\n                 <groupId>org.apache.felix.karaf.deployer</groupId>\n                 <artifactId>org.apache.felix.karaf.deployer.spring</artifactId>",
                "raw_url": "https://github.com/apache/felix/raw/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/pom.xml",
                "sha": "88eeb5cd6b2c98fd5ec18dcd938a887f9218067e",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/felix/blob/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/shell/dev/pom.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/karaf/shell/dev/pom.xml?ref=eb493a3ca0de272bd71d1bc066911b2b74642e67",
                "deletions": 0,
                "filename": "karaf/shell/dev/pom.xml",
                "patch": "@@ -36,6 +36,11 @@\n         <artifactId>org.apache.felix.karaf.shell.console</artifactId>\n     </dependency>\n \n+    <dependency>\n+        <groupId>org.apache.felix.karaf</groupId>\n+        <artifactId>org.apache.felix.karaf.commons</artifactId>\n+    </dependency>\n+\n     <dependency>\n         <groupId>org.ops4j.pax.url</groupId>\n         <artifactId>pax-url-wrap</artifactId>",
                "raw_url": "https://github.com/apache/felix/raw/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/shell/dev/pom.xml",
                "sha": "406df26f0c3b83d47c8713cead0a2d20e5a2b693",
                "status": "modified"
            },
            {
                "additions": 51,
                "blob_url": "https://github.com/apache/felix/blob/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/ShowBundleTree.java",
                "changes": 74,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/karaf/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/ShowBundleTree.java?ref=eb493a3ca0de272bd71d1bc066911b2b74642e67",
                "deletions": 23,
                "filename": "karaf/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/ShowBundleTree.java",
                "patch": "@@ -48,16 +48,19 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(ShowBundleTree.class);\n \n-    // a cache of all exported packages\n-    private ExportedPackage[] allExportedPackages;\n+    private Tree<Bundle> tree;\n \n     @Override\n     protected void doExecute(Bundle bundle) throws Exception {\n+        long start = System.currentTimeMillis();\n         // let's do the real work here\n         printHeader(bundle);\n-        Tree<Bundle> tree = createTree(bundle);\n+        tree = new Tree<Bundle>(bundle);\n+        createTree(bundle);\n         printTree(tree);\n         printDuplicatePackages(tree);\n+        LOGGER.debug(format(\"Dependency tree calculated in %d ms\",\n+                            System.currentTimeMillis() - start));\n     }\n \n     /*\n@@ -119,44 +122,69 @@ private void printDuplicatePackages(Tree<Bundle> tree) {\n     /*\n      * Creates the bundle tree\n      */\n-    protected Tree<Bundle> createTree(Bundle bundle) {\n-        Tree<Bundle> tree = new Tree<Bundle>(bundle);\n-        Set<Bundle> trail = new HashSet<Bundle>();\n+    protected void createTree(Bundle bundle) {\n         if (bundle.getState() >= Bundle.RESOLVED) {\n-            createNode(tree, trail);\n+            createNode(tree);\n         } else {\n-            for (Import i : Import.parse(String.valueOf(bundle.getHeaders().get(\"Import-Package\")))) {\n-                for (ExportedPackage ep : getPackageAdmin().getExportedPackages(i.getPackage())) {\n-                    if (ep.getVersion().compareTo(i.getVersion()) >= 0) {\n-                        if (!bundle.equals(ep.getExportingBundle())) {\n-                            Node child = tree.addChild(ep.getExportingBundle());\n-                            System.out.printf(\"- using %s to resolve import %s%n\", ep.getExportingBundle(), i);\n-                            createNode(child, trail);\n-                        }\n+            createNodesForImports(tree, bundle);\n+        }\n+    }\n+\n+    /*\n+     * Creates nodes for the imports of the bundle (instead of reporting wiring information\n+     */\n+    private void createNodesForImports(Node node, Bundle bundle) {\n+        for (Import i : Import.parse(String.valueOf(bundle.getHeaders().get(\"Import-Package\")),\n+                                     String.valueOf(bundle.getHeaders().get(\"Export-Package\")))) {\n+            createNodeForImport(node, bundle, i);\n+        }\n+    }\n+\n+    /*\n+     * Create a child node for a given import (by finding a matching export in the currently installed bundles)\n+     */\n+    private void createNodeForImport(Node node, Bundle bundle, Import i) {\n+        ExportedPackage[] exporters = getPackageAdmin().getExportedPackages(i.getPackage());\n+        boolean foundMatch = false;\n+        if (exporters != null) {\n+            for (ExportedPackage ep : exporters) {\n+                if (i.getVersion().isInRange(ep.getVersion())) {\n+                    if (bundle.equals(ep.getExportingBundle())) {\n+                        foundMatch = true;\n+                    } else {\n+                        Node child = node.addChild(ep.getExportingBundle());\n+                        System.out.printf(\"- import %s: resolved using %s%n\", i, ep.getExportingBundle());\n+                        foundMatch = true;\n+                        createNode(child);\n                     }\n                 }\n             }\n         }\n-        return tree;\n+        if (!foundMatch) {\n+            System.out.printf(\"- import %s: WARNING - unable to find matching export%n\", i);            \n+        }\n     }\n \n     /*\n      * Creates a node in the bundle tree\n      */\n-    private void createNode(Node<Bundle> node, Set<Bundle> trail) {\n+    private void createNode(Node<Bundle> node) {\n         Bundle bundle = node.getValue();\n         Collection<Bundle> exporters = new HashSet<Bundle>();\n         exporters.addAll(getWiredBundles(bundle).values());\n \n         for (Bundle exporter : exporters) {\n-            if (trail.contains(exporter)) {\n-                LOGGER.debug(format(\"Skipping %s because it already exists in the current tree branch\", exporter));\n+            if (node.hasAncestor(exporter)) {                \n+                LOGGER.debug(format(\"Skipping %s (already exists in the current branch)\", exporter));\n             } else {\n-                trail.add(exporter);\n-                Node child = node.addChild(exporter);\n+                boolean existing = tree.flatten().contains(exporter);\n                 LOGGER.debug(format(\"Adding %s as a dependency for %s\", exporter, bundle));\n-                createNode(child, trail);\n-                trail.remove(exporter);\n+                Node child = node.addChild(exporter);\n+                if (existing) {\n+                    LOGGER.debug(format(\"Skipping children of %s (already exists in another branch)\", exporter));\n+                } else {\n+                    createNode(child);\n+                }\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/felix/raw/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/ShowBundleTree.java",
                "sha": "c46127489156039713eb3df35b37155dedf70c47",
                "status": "modified"
            },
            {
                "additions": 67,
                "blob_url": "https://github.com/apache/felix/blob/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Import.java",
                "changes": 80,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/karaf/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Import.java?ref=eb493a3ca0de272bd71d1bc066911b2b74642e67",
                "deletions": 13,
                "filename": "karaf/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Import.java",
                "patch": "@@ -19,15 +19,15 @@\n import java.util.LinkedList;\n import java.util.List;\n \n-import org.osgi.framework.Version;\n+import org.apache.felix.karaf.commons.osgi.VersionRange;\n \n /**\n  * Simple class to model an OSGi Import-Package\n  */\n public class Import {\n \n     private final String packageName;\n-    private final Version version;\n+    private final VersionRange version;\n     private final String value;\n \n     /**\n@@ -38,28 +38,24 @@\n     protected Import(String value) {\n         super();\n         this.value = value;\n-        if (value.contains(\";\")) {\n-            this.packageName = value.split(\";\")[0];\n-        } else {\n-            this.packageName = value;\n-        }\n+        this.packageName = extractPackageName(value);\n         if (value.contains(\"version=\")) {\n             this.version = extractVersion(value);\n         } else {\n-            this.version = Version.emptyVersion;\n+            this.version = VersionRange.infiniteRange;\n         }\n     }\n \n     /*\n      * Extract the version from the string\n      */\n-    private Version extractVersion(String value) {\n+    private VersionRange extractVersion(String value) {\n         int begin = value.indexOf(\"version=\") + 8;\n         int end = value.indexOf(\";\", begin);\n         if (end < 0) {\n-            return Version.parseVersion(unquote(value.substring(begin)));\n+            return VersionRange.parse(unquote(value.substring(begin)));\n         } else {\n-            return Version.parseVersion(unquote(value.substring(begin, end)));\n+            return VersionRange.parse(unquote(value.substring(begin, end)));\n         }\n     }\n \n@@ -74,7 +70,7 @@ public String getPackage() {\n         return packageName;  \n     }\n \n-    public Version getVersion() {\n+    public VersionRange getVersion() {\n         return version;\n     }\n \n@@ -89,9 +85,67 @@ public String toString() {\n      */\n     public static List<Import> parse(String value) {\n         LinkedList<Import> imports = new LinkedList<Import>();\n-        for (String imp : value.split(\",\")) {\n+        for (String imp : split(value)) {\n             imports.add(new Import(imp));\n         }\n         return imports;\n     }\n+\n+    /**\n+     * Parse the value of an Import-Package META-INF header and return\n+     * a list of Import instances, filtering out packages that are in the\n+     * Export-Package META-INF header\n+     *\n+     * @param importValue the value of the Import-Package header\n+     * @param exportValue the value of the Export-Package header\n+     */\n+    public static List<Import> parse(String importValue, String exportValue) {\n+        LinkedList<String> exports = new LinkedList<String>();\n+        for (String exp : split(exportValue)) {\n+            exports.add(extractPackageName(exp));\n+        }\n+        LinkedList<Import> imports = new LinkedList<Import>();\n+        for (Import imp : parse(importValue)) {\n+            if (!exports.contains(imp.getPackage())) {\n+                imports.add(imp);\n+            }\n+        }\n+        return imports;\n+    }\n+\n+    /*\n+     * Extract the package name from the value\n+     * e.g. org.apache.felix.karaf;version=\"1.x\" -> org.apache.felix.karaf\n+     */\n+    private static String extractPackageName(String value) {\n+        if (value.contains(\";\")) {\n+            return value.split(\";\")[0];\n+        } else {\n+            return value;\n+        }\n+    }\n+\n+    /*\n+     * Counts the number of quotes in a String value\n+     */\n+    private static int quotes(String value) {\n+        return value.replaceAll(\"[^\\\"]\", \"\").length();\n+    }\n+\n+    /*\n+     * Split the OSGi headers on the , symbol\n+     */\n+    private static List<String> split(String value) {\n+        List<String> result = new LinkedList<String>();\n+        String[] elements = value.split(\",\");\n+        for (int i = 0; i < elements.length ; i++) {\n+            if (quotes(elements[i]) % 2 == 1) {\n+                // we probably split a version range, so joining it again with the next element\n+                result.add(elements[i] + \",\" + elements[++i]);\n+            } else {\n+                result.add(elements[i]);\n+            }\n+        }\n+        return result;\n+    }\n }",
                "raw_url": "https://github.com/apache/felix/raw/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Import.java",
                "sha": "321570773787d56e6cdc918b4b7993696fd407aa",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/felix/blob/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Node.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/karaf/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Node.java?ref=eb493a3ca0de272bd71d1bc066911b2b74642e67",
                "deletions": 0,
                "filename": "karaf/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Node.java",
                "patch": "@@ -93,6 +93,20 @@ public Node addChild(T value) {\n         return result;\n     }\n \n+    /**\n+     * Check if the node has an ancestor that represents the given value\n+     *\n+     * @param value the node value\n+     * @return <code>true</code> it there's an ancestor that represents the value\n+     */\n+    public boolean hasAncestor(T value) {\n+        if (parent == null) {\n+            return false;\n+        } else {\n+            return value.equals(parent.value) || parent.hasAncestor(value);\n+        }\n+    }\n+\n     /*\n      * Write this node to the PrintWriter.  It should be indented one step\n      * further for every element in the indents array.  If an element in the",
                "raw_url": "https://github.com/apache/felix/raw/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Node.java",
                "sha": "b266fe4cab76df6335706672e0310c71a435f531",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/felix/blob/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/ImportTest.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/karaf/shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/ImportTest.java?ref=eb493a3ca0de272bd71d1bc066911b2b74642e67",
                "deletions": 2,
                "filename": "karaf/shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/ImportTest.java",
                "patch": "@@ -20,8 +20,9 @@\n \n import static junit.framework.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n+\n+import org.apache.felix.karaf.commons.osgi.VersionRange;\n import org.junit.Test;\n-import org.osgi.framework.Version;\n \n /**\n  * Test cases for {@link org.apache.felix.karaf.shell.dev.util.Import}\n@@ -38,7 +39,7 @@ public void createWithPackageName() {\n     public void createWithPackageNameAndVersion() {\n         Import i = new Import(\"org.wip.bar;version=\\\"2.0.0\\\"\");\n         assertEquals(\"org.wip.bar\", i.getPackage());\n-        assertEquals(new Version(\"2.0.0\"), i.getVersion());\n+        assertEquals(VersionRange.parse(\"2.0.0\"), i.getVersion());\n     }\n \n     @Test\n@@ -49,4 +50,22 @@ public void createListOfImports() {\n         assertEquals(\"org.wip.bar\", imports.get(0).getPackage());\n         assertEquals(\"org.wip.foo\", imports.get(1).getPackage());\n     }\n+\n+    @Test\n+    public void createListOfImportsWithVersionRanges() {\n+        List<Import> imports =\n+                Import.parse(\"javax.activation;version=\\\"[0.0,2)\\\",javax.annotation;version=\\\"[0.0,2)\\\"\");\n+        assertNotNull(imports);\n+        assertEquals(2, imports.size());\n+        assertEquals(\"javax.activation\", imports.get(0).getPackage());\n+        assertEquals(\"javax.annotation\", imports.get(1).getPackage());\n+    }\n+\n+    @Test\n+    public void createListOfImportsWithExports() {\n+        List<Import> imports = Import.parse(\"org.wip.bar;version=\\\"2.0.0\\\",org.wip.foo\", \"org.wip.bar;version=\\\"2.0.0\\\"\");\n+        assertNotNull(imports);\n+        assertEquals(1, imports.size());\n+        assertEquals(\"org.wip.foo\", imports.get(0).getPackage());\n+    }\n }",
                "raw_url": "https://github.com/apache/felix/raw/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/ImportTest.java",
                "sha": "8a2aa14234f8d2d6c4a3555786462c574a0dc83f",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/felix/blob/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/TreeTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/karaf/shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/TreeTest.java?ref=eb493a3ca0de272bd71d1bc066911b2b74642e67",
                "deletions": 0,
                "filename": "karaf/shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/TreeTest.java",
                "patch": "@@ -24,6 +24,7 @@\n import java.util.Set;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n import org.junit.Test;\n@@ -108,6 +109,19 @@ public void flattenTree() throws IOException {\n         assertTrue(elements.contains(\"grandchild\"));\n     }\n \n+    @Test\n+    public void hasAncestor() throws IOException {\n+        Tree<String> tree = new Tree<String>(\"root\");\n+        Node<String> child1 = tree.addChild(\"child1\");\n+        child1.addChild(\"grandchild\");\n+        Node child2 = tree.addChild(\"child2\");\n+        Node node = child2.addChild(\"grandchild2\");\n+\n+        assertTrue(node.hasAncestor(\"child2\"));\n+        assertTrue(node.hasAncestor(\"root\"));\n+        assertFalse(node.hasAncestor(\"child1\"));\n+    }\n+\n     private BufferedReader read(Tree<String> tree) {\n         StringWriter writer = new StringWriter();\n         tree.write(new PrintWriter(writer));",
                "raw_url": "https://github.com/apache/felix/raw/eb493a3ca0de272bd71d1bc066911b2b74642e67/karaf/shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/TreeTest.java",
                "sha": "c11e2c36c84b6d57225720552221ec8112bc54ff",
                "status": "modified"
            }
        ],
        "message": "FELIX-2169: Improve dev:show-tree performance and avoid NPE when no matching export is found\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@918963 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/fd89b4deb7018a0fe2a1fb0f126d733175736092",
        "patched_files": [
            "Tree.java",
            "unix-bin.java",
            "ShowBundleTree.java",
            "Node.java",
            "VersionRange.java",
            "Import.java",
            "pom.java",
            "FeaturesServiceImpl.java",
            "windows-bin.java",
            "startup.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "FeaturesServiceImplTest.java",
            "ImportTest.java",
            "TreeTest.java"
        ]
    },
    "felix_f1370a9": {
        "bug_id": "felix_f1370a9",
        "commit": "https://github.com/apache/felix/commit/f1370a9005c2af59c14f8131e772244fa03ec426",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/felix/blob/f1370a9005c2af59c14f8131e772244fa03ec426/osgi-r7/configurator/src/main/java/org/apache/felix/configurator/impl/Configurator.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/osgi-r7/configurator/src/main/java/org/apache/felix/configurator/impl/Configurator.java?ref=f1370a9005c2af59c14f8131e772244fa03ec426",
                "deletions": 1,
                "filename": "osgi-r7/configurator/src/main/java/org/apache/felix/configurator/impl/Configurator.java",
                "patch": "@@ -35,6 +35,7 @@\n \n import org.apache.felix.configurator.impl.json.BinUtil;\n import org.apache.felix.configurator.impl.json.JSONUtil;\n+import org.apache.felix.configurator.impl.json.TypeConverter;\n import org.apache.felix.configurator.impl.logger.SystemLogger;\n import org.apache.felix.configurator.impl.model.BundleState;\n import org.apache.felix.configurator.impl.model.Config;\n@@ -253,10 +254,11 @@ public void start() {\n                 if ( state.getInitialHashes() != null ) {\n                     processRemoveBundle(-1);\n                 }\n+                final TypeConverter converter = new TypeConverter(null);\n                 final JSONUtil.Report report = new JSONUtil.Report();\n                 final List<ConfigurationFile> allFiles = new ArrayList<>();\n                 for(final Map.Entry<String, String> entry : files.entrySet()) {\n-                    final ConfigurationFile file = org.apache.felix.configurator.impl.json.JSONUtil.readJSON(null, entry.getKey(), null, -1, entry.getValue(), report);\n+                    final ConfigurationFile file = org.apache.felix.configurator.impl.json.JSONUtil.readJSON(converter, entry.getKey(), null, -1, entry.getValue(), report);\n                     if ( file != null ) {\n                         allFiles.add(file);\n                     }",
                "raw_url": "https://github.com/apache/felix/raw/f1370a9005c2af59c14f8131e772244fa03ec426/osgi-r7/configurator/src/main/java/org/apache/felix/configurator/impl/Configurator.java",
                "sha": "c7bdc5afb97f33791b4c1cfe2ee48109ef47e6d5",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/felix/blob/f1370a9005c2af59c14f8131e772244fa03ec426/osgi-r7/configurator/src/main/java/org/apache/felix/configurator/impl/json/JSONUtil.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/osgi-r7/configurator/src/main/java/org/apache/felix/configurator/impl/json/JSONUtil.java?ref=f1370a9005c2af59c14f8131e772244fa03ec426",
                "deletions": 1,
                "filename": "osgi-r7/configurator/src/main/java/org/apache/felix/configurator/impl/json/JSONUtil.java",
                "patch": "@@ -190,7 +190,9 @@ public static ConfigurationFile readJSON(\n         final List<Config> configurations = new ArrayList<>();\n         for(final Map.Entry<String, ?> entry : configs.entrySet()) {\n             if ( ! (entry.getValue() instanceof Map) ) {\n-                report.errors.add(\"Ignoring configuration in '\" + identifier + \"' (not a configuration) : \" + entry.getKey());\n+            \t    if ( !entry.getKey().startsWith(INTERNAL_PREFIX) ) {\n+            \t    \t    report.errors.add(\"Ignoring configuration in '\" + identifier + \"' (not a configuration) : \" + entry.getKey());\n+            \t    }\n             } else {\n                 @SuppressWarnings(\"unchecked\")\n                 final Map<String, ?> mainMap = (Map<String, ?>)entry.getValue();",
                "raw_url": "https://github.com/apache/felix/raw/f1370a9005c2af59c14f8131e772244fa03ec426/osgi-r7/configurator/src/main/java/org/apache/felix/configurator/impl/json/JSONUtil.java",
                "sha": "f765bea5e0aeb1fe1c3ea417a6761e89bf926994",
                "status": "modified"
            }
        ],
        "message": "Fix NPE for initial configurations and ignore internal properties\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1821609 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/e7cc642a22ad498e336e654951cac2d67e28b493",
        "patched_files": [
            "Configurator.java",
            "JSONUtil.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ConfiguratorTest.java",
            "JSONUtilTest.java"
        ]
    },
    "felix_f3a147e": {
        "bug_id": "felix_f3a147e",
        "commit": "https://github.com/apache/felix/commit/f3a147ec0f2af3430db259073b74d2a6fd48330d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/felix/blob/f3a147ec0f2af3430db259073b74d2a6fd48330d/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java?ref=f3a147ec0f2af3430db259073b74d2a6fd48330d",
                "deletions": 1,
                "filename": "fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java",
                "patch": "@@ -183,7 +183,7 @@ public void doConfigurationEvent(ConfigurationEvent configurationEvent)\n                         configurationEvent.getPid(),\n                         \"?\");\n                 Dictionary dict = config.getProperties();\n-                String fileName = (String) dict.get(DirectoryWatcher.FILENAME);\n+                String fileName = dict != null ? (String) dict.get(DirectoryWatcher.FILENAME) : null;\n                 File file = fileName != null ? fromConfigKey(fileName) : null;\n                 if (file != null && file.isFile()) {\n                     if (!file.delete()) {",
                "raw_url": "https://github.com/apache/felix/raw/f3a147ec0f2af3430db259073b74d2a6fd48330d/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java",
                "sha": "1a4f12a4a24e72304f0a9d77550f2191d56d60a3",
                "status": "modified"
            }
        ],
        "message": "[FELIX-5686] NPE in ConfigInstaller on ConfigDelete\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1812602 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/9cc019ff39290732201c3a09b5dd125f8b689552",
        "patched_files": [
            "ConfigInstaller.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ConfigInstallerTest.java"
        ]
    },
    "felix_f853a90": {
        "bug_id": "felix_f853a90",
        "commit": "https://github.com/apache/felix/commit/f853a9004a167391a967f8821c9484ee5d91f794",
        "file": [
            {
                "additions": 82,
                "blob_url": "https://github.com/apache/felix/blob/f853a9004a167391a967f8821c9484ee5d91f794/configadmin/src/test/java/org/apache/felix/cm/integration/FELIX2813_ConfigurationAdminStartupTest.java",
                "changes": 82,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/configadmin/src/test/java/org/apache/felix/cm/integration/FELIX2813_ConfigurationAdminStartupTest.java?ref=f853a9004a167391a967f8821c9484ee5d91f794",
                "deletions": 0,
                "filename": "configadmin/src/test/java/org/apache/felix/cm/integration/FELIX2813_ConfigurationAdminStartupTest.java",
                "patch": "@@ -0,0 +1,82 @@\n+package org.apache.felix.cm.integration;\n+\n+import static org.ops4j.pax.exam.CoreOptions.mavenBundle;\n+import static org.ops4j.pax.exam.CoreOptions.options;\n+import static org.ops4j.pax.exam.CoreOptions.provision;\n+\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.ops4j.pax.exam.Option;\n+import org.ops4j.pax.exam.junit.Configuration;\n+import org.ops4j.pax.exam.junit.JUnit4TestRunner;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.BundleException;\n+import org.osgi.framework.Constants;\n+import org.osgi.framework.InvalidSyntaxException;\n+import org.osgi.framework.ServiceEvent;\n+import org.osgi.framework.ServiceListener;\n+import org.osgi.framework.ServiceReference;\n+import org.osgi.service.cm.ConfigurationAdmin;\n+import org.osgi.service.cm.ConfigurationEvent;\n+import org.osgi.service.cm.ConfigurationListener;\n+\n+@RunWith(JUnit4TestRunner.class)\n+public class FELIX2813_ConfigurationAdminStartupTest implements ServiceListener, ConfigurationListener {\n+    private volatile BundleContext m_context;\n+\n+    @Configuration\n+    public static Option[] configuration() {\n+        return options(\n+            provision(\n+                mavenBundle().groupId(\"org.apache.felix\").artifactId(\"org.apache.felix.configadmin\").version(\"1.2.8\").noStart()\n+            )\n+        );\n+    }    \n+\n+    @Test\n+    public void testAddConfigurationWhenConfigurationAdminStarts(BundleContext context) throws InvalidSyntaxException, BundleException {\n+        m_context = context;\n+        m_context.registerService(ConfigurationListener.class.getName(), this, null);\n+        m_context.addServiceListener(this, \"(\" + Constants.OBJECTCLASS + \"=\" + ConfigurationAdmin.class.getName() + \")\");\n+        Bundle[] bundles = m_context.getBundles();\n+        for (Bundle b : bundles) {\n+            if (b.getSymbolicName().equals(\"org.apache.felix.configadmin\")) {\n+                b.start();\n+            }\n+        }\n+        \n+        /*\n+         * Look at the console output for the following exception:\n+         * \n+         * *ERROR* Unexpected problem executing task\n+         * java.lang.NullPointerException: reference and pid must not be null\n+         *     at org.osgi.service.cm.ConfigurationEvent.<init>(ConfigurationEvent.java:120)\n+         *     at org.apache.felix.cm.impl.ConfigurationManager$FireConfigurationEvent.run(ConfigurationManager.java:1818)\n+         *     at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:104)\n+         *     at java.lang.Thread.run(Thread.java:680)\n+         *     \n+         * It is in fact the service reference that is still null, because the service registration\n+         * has not been 'set' yet.\n+         */\n+    }\n+\n+    public void serviceChanged(ServiceEvent event) {\n+        if (event.getType() == ServiceEvent.REGISTERED) {\n+            ServiceReference ref = event.getServiceReference();\n+            ConfigurationAdmin ca = (ConfigurationAdmin) m_context.getService(ref);\n+            try {\n+                org.osgi.service.cm.Configuration config = ca.getConfiguration(\"test\");\n+                config.update(new Properties() {{ put(\"abc\", \"123\"); }});\n+            }\n+            catch (IOException e) {\n+            }\n+        }\n+    }\n+\n+    public void configurationEvent(ConfigurationEvent event) {\n+    }\n+}",
                "raw_url": "https://github.com/apache/felix/raw/f853a9004a167391a967f8821c9484ee5d91f794/configadmin/src/test/java/org/apache/felix/cm/integration/FELIX2813_ConfigurationAdminStartupTest.java",
                "sha": "0efb84f0a76b25ece28fb11a62ff9a5c358d07b3",
                "status": "added"
            }
        ],
        "message": "FELIX-2813 This test shows the issue, even though it does not fail. If somebody knows how to make a test fail if another thread throws a NPE, feel free to jump in.\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1065734 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/b4f66972919d8b175a8c932403448344238ff6c3",
        "patched_files": [],
        "repo": "felix",
        "unit_tests": [
            "FELIX2813_ConfigurationAdminStartupTest.java"
        ]
    },
    "felix_fca44c7": {
        "bug_id": "felix_fca44c7",
        "commit": "https://github.com/apache/felix/commit/fca44c7ef5adc6b3afe46f7282d999ce8602a761",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/felix/blob/fca44c7ef5adc6b3afe46f7282d999ce8602a761/webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/ConfigurationSupport.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/ConfigurationSupport.java?ref=fca44c7ef5adc6b3afe46f7282d999ce8602a761",
                "deletions": 4,
                "filename": "webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/ConfigurationSupport.java",
                "patch": "@@ -19,7 +19,6 @@\n package org.apache.felix.webconsole.internal.servlet;\n \n \n-import java.security.AccessControlContext;\n import java.security.AccessController;\n import java.security.PrivilegedActionException;\n import java.security.PrivilegedExceptionAction;\n@@ -104,9 +103,11 @@ void updated0( Dictionary config ) throws ConfigurationException\n                         Dictionary newConfig = cfg.getProperties();\n                         if ( newConfig != null )\n                         {\n-                            // assumption: config is not null and as a non-null password String property\n-                            final String pwd = ( String ) config.get( OsgiManager.PROP_PASSWORD );\n-                            final String hashedPassword = Password.hashPassword( pwd );\n+                            String pwd = ( String ) config.get( OsgiManager.PROP_PASSWORD );\n+                            // password can be null, see FELIX-4995\n+                            final String hashedPassword = null == pwd \n+                                ? OsgiManager.DEFAULT_PASSWORD\n+                                : Password.hashPassword( pwd );\n                             newConfig.put( OsgiManager.PROP_PASSWORD, hashedPassword );\n                             cfg.update( newConfig );\n                         }",
                "raw_url": "https://github.com/apache/felix/raw/fca44c7ef5adc6b3afe46f7282d999ce8602a761/webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/ConfigurationSupport.java",
                "sha": "444eeb6591c2f69711a916af5b7f79f578c97b48",
                "status": "modified"
            }
        ],
        "message": "Fixed FELIX-4995 : NPE when updating Apache Felix OSGi Management Console configuration without a password\nhttps://issues.apache.org/jira/browse/FELIX-4995\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1694628 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/f42ee6716db6b8d34eea35bb938c71fbb2919690",
        "patched_files": [
            "ConfigurationSupport.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ConfigurationSupportTest.java"
        ]
    },
    "felix_fe3f30e": {
        "bug_id": "felix_fe3f30e",
        "commit": "https://github.com/apache/felix/commit/fe3f30e76182e5c3127a974f72a04fab5c3ee5d9",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/felix/blob/fe3f30e76182e5c3127a974f72a04fab5c3ee5d9/scr/src/main/java/org/apache/felix/scr/impl/config/ConfiguredComponentHolder.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/config/ConfiguredComponentHolder.java?ref=fe3f30e76182e5c3127a974f72a04fab5c3ee5d9",
                "deletions": 4,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/config/ConfiguredComponentHolder.java",
                "patch": "@@ -64,13 +64,16 @@\n \n     /**\n      * The special component used if there is no configuration or a singleton\n-     * configuration. This field is always non-<code>null</code> and is first\n-     * created in the constructor. As factory configurations are provided this\n-     * instance may be configured or \"deconfigured\".\n+     * configuration. This field is only <code>null</code> once all components\n+     * held by this holder have been disposed off by\n+     * {@link #disposeComponents(int)} and is first created in the constructor.\n+     * As factory configurations are provided this instance may be configured\n+     * or \"deconfigured\".\n      * <p>\n      * Expected invariants:\n      * <ul>\n-     * <li>This field is never <code>null</code></li>\n+     * <li>This field is only <code>null</code> after disposal of all held\n+     * components</li>\n      * <li>The {@link #m_components} map is empty or the component pointed to\n      * by this field is also contained in the map</li>\n      * <ul>\n@@ -119,6 +122,11 @@\n      */\n     public void configurationDeleted( final String pid )\n     {\n+        // FELIX-2231: nothing to do any more, all components have been disposed off\n+        if (m_singleComponent == null) {\n+            return;\n+        }\n+\n         if ( pid.equals( getComponentName() ) )\n         {\n             // singleton configuration deleted\n@@ -181,6 +189,11 @@ public void configurationDeleted( final String pid )\n      */\n     public void configurationUpdated( final String pid, final Dictionary props )\n     {\n+        // FELIX-2231: nothing to do any more, all components have been disposed off\n+        if (m_singleComponent == null) {\n+            return;\n+        }\n+\n         if ( pid.equals( getComponentName() ) )\n         {\n             // singleton configuration has pid equal to component name",
                "raw_url": "https://github.com/apache/felix/raw/fe3f30e76182e5c3127a974f72a04fab5c3ee5d9/scr/src/main/java/org/apache/felix/scr/impl/config/ConfiguredComponentHolder.java",
                "sha": "a4e0bf710200026bae4a3419262fa1f5267a0e07",
                "status": "modified"
            }
        ],
        "message": "FELIX-2231 Prevent NullPointerException if configuration is updated/deleted after the held components have already been disposed off\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@926989 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/d42e2813e91b5fcb28ab138110224d7f3278d8e0",
        "patched_files": [
            "ConfiguredComponentHolder.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ConfiguredComponentHolderTest.java"
        ]
    },
    "felix_ff08e5c": {
        "bug_id": "felix_ff08e5c",
        "commit": "https://github.com/apache/felix/commit/ff08e5caf75b5b78454d699c3bff45af1b809539",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/felix/blob/ff08e5caf75b5b78454d699c3bff45af1b809539/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java?ref=ff08e5caf75b5b78454d699c3bff45af1b809539",
                "deletions": 2,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "patch": "@@ -157,7 +157,9 @@ private ComponentConfigurationDTO managerToConfiguration(ComponentManager<?> man\n                 int j = 0;\n                 for (ServiceReference<?> serviceRef : serviceRefs)\n                 {\n-                    srDTOs[j++] = serviceReferenceToDTO(serviceRef);\n+                    ServiceReferenceDTO srefDTO = serviceReferenceToDTO(serviceRef);\n+                    if (srefDTO != null)\n+                        srDTOs[j++] = srefDTO;\n                 }\n                 dto.boundServices = srDTOs;\n                 dtos.add(dto);\n@@ -181,7 +183,9 @@ private ComponentConfigurationDTO managerToConfiguration(ComponentManager<?> man\n                 int j = 0;\n                 for (ServiceReference<?> serviceRef : serviceRefs)\n                 {\n-                    srDTOs[j++] = serviceReferenceToDTO(serviceRef);\n+                    ServiceReferenceDTO srefDTO = serviceReferenceToDTO(serviceRef);\n+                    if (srefDTO != null)\n+                        srDTOs[j++] = srefDTO;\n                 }\n                 dto.targetServices = srDTOs;\n                 dtos.add(dto);",
                "raw_url": "https://github.com/apache/felix/raw/ff08e5caf75b5b78454d699c3bff45af1b809539/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "sha": "4dd05c40680b8fccde1f71d9eda451f111fe3736",
                "status": "modified"
            }
        ],
        "message": "FELIX-4883 Fix NPE when creating ServiceReferenceDTO - callsite\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1681097 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/ce6a80c41ce2473de68074618a86faaf10b7fc0c",
        "patched_files": [
            "ServiceComponentRuntimeImpl.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "ServiceComponentRuntimeImplTest.java"
        ]
    },
    "felix_ffcef32": {
        "bug_id": "felix_ffcef32",
        "commit": "https://github.com/apache/felix/commit/ffcef3290a905d0eaab868277817122b93084edf",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/felix/blob/ffcef3290a905d0eaab868277817122b93084edf/scr/pom.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/pom.xml?ref=ffcef3290a905d0eaab868277817122b93084edf",
                "deletions": 1,
                "filename": "scr/pom.xml",
                "patch": "@@ -205,7 +205,7 @@\n \t\t<dependency>\n \t\t\t<groupId>org.codehaus.mojo</groupId>\n \t\t\t<artifactId>animal-sniffer-annotations</artifactId>\n-\t\t\t<version>1.10-SNAPSHOT</version>\n+\t\t\t<version>1.9</version>\n \t\t\t<scope>compile</scope>\n \t\t</dependency>\n     </dependencies>",
                "raw_url": "https://github.com/apache/felix/raw/ffcef3290a905d0eaab868277817122b93084edf/scr/pom.xml",
                "sha": "d971a7bc9c78a24bcba1f55228b152d94b7262d1",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/felix/blob/ffcef3290a905d0eaab868277817122b93084edf/scr/src/main/java/org/apache/felix/scr/impl/config/ScrConfiguration.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/config/ScrConfiguration.java?ref=ffcef3290a905d0eaab868277817122b93084edf",
                "deletions": 4,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/config/ScrConfiguration.java",
                "patch": "@@ -66,6 +66,8 @@\n     \n     public static final String PROP_LOCK_TIMEOUT = \"ds.lock.timeout.milliseconds\";\n     \n+    public static final long DEFAULT_LOCK_TIMEOUT_MILLISECONDS = 5000;\n+    \n     public static final String PROP_LOGLEVEL = \"ds.loglevel\";\n \n     private static final String LOG_LEVEL_DEBUG = \"debug\";\n@@ -88,7 +90,7 @@\n     \n     private boolean infoAsService;\n     \n-    private long lockTimeout = 5000;//milliseconds\n+    private long lockTimeout = DEFAULT_LOCK_TIMEOUT_MILLISECONDS;\n \n     private BundleContext bundleContext;\n \n@@ -143,7 +145,7 @@ void configure( Dictionary config )\n                 factoryEnabled = false;\n                 keepInstances = false;\n                 infoAsService = false;\n-                lockTimeout = 5000;\n+                lockTimeout = DEFAULT_LOCK_TIMEOUT_MILLISECONDS;\n             }\n             else\n             {\n@@ -161,7 +163,7 @@ void configure( Dictionary config )\n             keepInstances = VALUE_TRUE.equalsIgnoreCase( String.valueOf( config.get( PROP_DELAYED_KEEP_INSTANCES ) ) );\n             infoAsService = VALUE_TRUE.equalsIgnoreCase( String.valueOf( config.get( PROP_INFO_SERVICE) ) );\n             Long timeout = ( Long ) config.get( PROP_LOCK_TIMEOUT );\n-            lockTimeout = timeout == null? 5000: timeout;\n+            lockTimeout = timeout == null? DEFAULT_LOCK_TIMEOUT_MILLISECONDS: timeout;\n         }\n         if ( scrCommand != null )\n         {\n@@ -227,7 +229,7 @@ private long getDefaultLockTimeout()\n         String val = bundleContext.getProperty( PROP_LOCK_TIMEOUT);\n         if ( val == null)\n         {\n-            return 5000;\n+            return DEFAULT_LOCK_TIMEOUT_MILLISECONDS;\n         }\n         return Long.parseLong( val );\n     }",
                "raw_url": "https://github.com/apache/felix/raw/ffcef3290a905d0eaab868277817122b93084edf/scr/src/main/java/org/apache/felix/scr/impl/config/ScrConfiguration.java",
                "sha": "3318c46c4718bd9f82635a9599b4f25a2acaa5d6",
                "status": "modified"
            },
            {
                "additions": 47,
                "blob_url": "https://github.com/apache/felix/blob/ffcef3290a905d0eaab868277817122b93084edf/scr/src/main/java/org/apache/felix/scr/impl/manager/AbstractComponentManager.java",
                "changes": 63,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/manager/AbstractComponentManager.java?ref=ffcef3290a905d0eaab868277817122b93084edf",
                "deletions": 16,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/manager/AbstractComponentManager.java",
                "patch": "@@ -41,6 +41,7 @@\n import org.apache.felix.scr.Component;\n import org.apache.felix.scr.Reference;\n import org.apache.felix.scr.impl.BundleComponentActivator;\n+import org.apache.felix.scr.impl.config.ScrConfiguration;\n import org.apache.felix.scr.impl.helper.ComponentMethods;\n import org.apache.felix.scr.impl.helper.MethodResult;\n import org.apache.felix.scr.impl.helper.SimpleLogger;\n@@ -192,7 +193,12 @@ final void obtainWriteLock( String source )\n \n     private long getLockTimeout()\n     {\n-        return getActivator().getConfiguration().lockTimeout();\n+        BundleComponentActivator activator = getActivator();\n+        if ( activator != null )\n+        {\n+            return activator.getConfiguration().lockTimeout();\n+        }\n+        return ScrConfiguration.DEFAULT_LOCK_TIMEOUT_MILLISECONDS;\n     }\n \n     final void releaseWriteLock( String source )\n@@ -490,6 +496,15 @@ public void dispose( int reason )\n         disposed = true;\n         disposeInternal( reason );\n     }\n+    \n+    <T> void registerMissingDependency( DependencyManager<S, T> dm, ServiceReference<T> ref, int trackingCount)\n+    {\n+        BundleComponentActivator activator = getActivator();\n+        if ( activator != null )\n+        {\n+            activator.registerMissingDependency( dm, ref, trackingCount );\n+        }\n+    }\n \n     //---------- Component interface ------------------------------------------\n \n@@ -509,26 +524,31 @@ public String getName() {\n      */\n     public Bundle getBundle()\n     {\n-        final BundleComponentActivator activator = getActivator();\n-        if ( activator != null )\n+        final BundleContext context = getBundleContext();\n+        if ( context != null )\n         {\n-            final BundleContext context = activator.getBundleContext();\n-            if ( context != null )\n+            try\n             {\n-                try\n-                {\n-                    return context.getBundle();\n-                }\n-                catch ( IllegalStateException ise )\n-                {\n-                    // if the bundle context is not valid any more\n-                }\n+                return context.getBundle();\n+            }\n+            catch ( IllegalStateException ise )\n+            {\n+                // if the bundle context is not valid any more\n             }\n         }\n-\n         // already disposed off component or bundle context is invalid\n         return null;\n     }\n+    \n+    BundleContext getBundleContext()\n+    {\n+        final BundleComponentActivator activator = getActivator();\n+        if ( activator != null )\n+        {\n+            return activator.getBundleContext();\n+        }\n+        return null;        \n+    }\n \n \n     public String getClassName()\n@@ -728,8 +748,13 @@ ComponentMethods getComponentMethods()\n         @Override\n         ServiceRegistration<S> register(String[] services)\n         {\n+            BundleContext bundleContext = getBundleContext();\n+            if (bundleContext == null) \n+            {\n+                return null;\n+            }\n             final Dictionary<String, Object> serviceProperties = getServiceProperties();\n-            ServiceRegistration<S> serviceRegistration = ( ServiceRegistration<S> ) getActivator().getBundleContext()\n+            ServiceRegistration<S> serviceRegistration = ( ServiceRegistration<S> ) bundleContext\n                     .registerService( services, getService(), serviceProperties );\n             return serviceRegistration;\n         }\n@@ -792,10 +817,16 @@ boolean initDependencyManagers()\n         {\n             return true;\n         }\n+        final Bundle bundle = getBundle();\n+        if (bundle == null)\n+        {\n+            log( LogService.LOG_ERROR, \"bundle shut down while trying to load implementation object class\", null );\n+            return false;\n+        }\n         Class<?> implementationObjectClass;\n         try\n         {\n-            implementationObjectClass = getActivator().getBundleContext().getBundle().loadClass(\n+            implementationObjectClass = bundle.loadClass(\n                     getComponentMetadata().getImplementationClassName() );\n         }\n         catch ( ClassNotFoundException e )",
                "raw_url": "https://github.com/apache/felix/raw/ffcef3290a905d0eaab868277817122b93084edf/scr/src/main/java/org/apache/felix/scr/impl/manager/AbstractComponentManager.java",
                "sha": "519023f9e741367b5737c8824079e4ee40071883",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/felix/blob/ffcef3290a905d0eaab868277817122b93084edf/scr/src/main/java/org/apache/felix/scr/impl/manager/ComponentContextImpl.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/manager/ComponentContextImpl.java?ref=ffcef3290a905d0eaab868277817122b93084edf",
                "deletions": 3,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/manager/ComponentContextImpl.java",
                "patch": "@@ -23,6 +23,7 @@\n import java.util.Dictionary;\n \n import org.apache.felix.scr.component.ExtComponentContext;\n+import org.apache.felix.scr.impl.BundleComponentActivator;\n import org.apache.felix.scr.impl.helper.ReadOnlyDictionary;\n import org.osgi.framework.Bundle;\n import org.osgi.framework.BundleContext;\n@@ -112,7 +113,7 @@ public Object locateService( String name, ServiceReference ref )\n \n     public BundleContext getBundleContext()\n     {\n-        return m_componentManager.getActivator().getBundleContext();\n+        return m_componentManager.getBundleContext();\n     }\n \n \n@@ -130,13 +131,21 @@ public ComponentInstance getComponentInstance()\n \n     public void enableComponent( String name )\n     {\n-        m_componentManager.getActivator().enableComponent( name );\n+        BundleComponentActivator activator = m_componentManager.getActivator();\n+        if ( activator != null )\n+        {\n+            activator.enableComponent( name );\n+        }\n     }\n \n \n     public void disableComponent( String name )\n     {\n-        m_componentManager.getActivator().disableComponent( name );\n+        BundleComponentActivator activator = m_componentManager.getActivator();\n+        if ( activator != null )\n+        {\n+            activator.disableComponent( name );\n+        }\n     }\n \n ",
                "raw_url": "https://github.com/apache/felix/raw/ffcef3290a905d0eaab868277817122b93084edf/scr/src/main/java/org/apache/felix/scr/impl/manager/ComponentContextImpl.java",
                "sha": "58dd8062894b88f98f0c7e4b57c5b61b1e7aa88a",
                "status": "modified"
            },
            {
                "additions": 61,
                "blob_url": "https://github.com/apache/felix/blob/ffcef3290a905d0eaab868277817122b93084edf/scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java",
                "changes": 85,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java?ref=ffcef3290a905d0eaab868277817122b93084edf",
                "deletions": 24,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java",
                "patch": "@@ -38,6 +38,7 @@\n import org.apache.felix.scr.Component;\n import org.apache.felix.scr.Reference;\n import org.apache.felix.scr.impl.BundleComponentActivator;\n+import org.apache.felix.scr.impl.helper.BindMethod;\n import org.apache.felix.scr.impl.helper.BindMethods;\n import org.apache.felix.scr.impl.helper.MethodResult;\n import org.apache.felix.scr.impl.metadata.ReferenceMetadata;\n@@ -214,7 +215,11 @@ protected void ungetService( RefPair<T> ref )\n                 if ( ref.getServiceObject() != null )\n                 {\n                     ref.setServiceObject( null );\n-                    m_componentManager.getActivator().getBundleContext().ungetService( ref.getRef() );\n+                    BundleContext bundleContext = m_componentManager.getBundleContext();\n+                    if ( bundleContext != null )\n+                    {\n+                        bundleContext.ungetService( ref.getRef() );\n+                    }\n                 }\n             }\n         }\n@@ -291,7 +296,7 @@ public void close()\n             }\n             if (isActive())\n             {\n-                 m_bindMethods.getBind().getServiceObject( refPair, m_componentManager.getActivator().getBundleContext(), m_componentManager );\n+                 getServiceObject( m_bindMethods.getBind(), refPair );\n             }\n             return refPair;\n         }\n@@ -309,7 +314,7 @@ public void addedService( ServiceReference<T> serviceReference, RefPair<T> refPa\n                         m_componentManager.invokeBindMethod( DependencyManager.this, refPair, trackingCount );\n                     }\n                     else {\n-                        m_componentManager.getActivator().registerMissingDependency( DependencyManager.this, serviceReference, trackingCount );\n+                        m_componentManager.registerMissingDependency( DependencyManager.this, serviceReference, trackingCount );\n                     }\n                 }\n                 else if ( isTrackerOpened() && !isOptional() )\n@@ -376,13 +381,13 @@ public boolean open()\n             {\n                 synchronized (refPair)\n                 {\n-                    if (m_bindMethods.getBind().getServiceObject( refPair, m_componentManager.getActivator().getBundleContext(), m_componentManager ))\n+                    if (getServiceObject( m_bindMethods.getBind(), refPair ))\n                     {\n                          success = true;\n                     }\n                     else\n                     {\n-                         m_componentManager.getActivator().registerMissingDependency( DependencyManager.this, refPair.getRef(), trackingCount.get() );\n+                         m_componentManager.registerMissingDependency( DependencyManager.this, refPair.getRef(), trackingCount.get() );\n                     }\n                 }\n             }\n@@ -427,7 +432,7 @@ public void close()\n             RefPair<T> refPair = new RefPair<T>( serviceReference  );\n             if (isActive())\n             {\n-                 m_bindMethods.getBind().getServiceObject( refPair, m_componentManager.getActivator().getBundleContext(), m_componentManager );\n+                 getServiceObject( m_bindMethods.getBind(), refPair );\n             }\n             return refPair;\n         }\n@@ -491,7 +496,7 @@ public boolean open()\n             {\n                 synchronized (refPair)\n                 {\n-                    success |= m_bindMethods.getBind().getServiceObject( refPair, m_componentManager.getActivator().getBundleContext(), m_componentManager );\n+                    success |= getServiceObject( m_bindMethods.getBind(), refPair );\n                 }\n             }\n             return success;\n@@ -584,7 +589,7 @@ public boolean open()\n                 {\n                     synchronized (refPair)\n                     {\n-                        success |= m_bindMethods.getBind().getServiceObject( refPair, m_componentManager.getActivator().getBundleContext(), m_componentManager );\n+                        success |= getServiceObject( m_bindMethods.getBind(), refPair );\n                     }\n                 }\n                 return success;\n@@ -596,7 +601,7 @@ public boolean open()\n             {\n                 synchronized (refPair)\n                 {\n-                    success |= m_bindMethods.getBind().getServiceObject( refPair, m_componentManager.getActivator().getBundleContext(), m_componentManager );\n+                    success |= getServiceObject( m_bindMethods.getBind(), refPair );\n                 }\n                 refs.add(refPair) ;\n             }\n@@ -665,7 +670,7 @@ public void addedService( ServiceReference<T> serviceReference, RefPair<T> refPa\n                     {\n                         synchronized ( refPair )\n                         {\n-                            m_bindMethods.getBind().getServiceObject( refPair, m_componentManager.getActivator().getBundleContext(), m_componentManager );\n+                            getServiceObject( m_bindMethods.getBind(), refPair );\n                         }\n                         if ( !refPair.isFailed() )\n                         {\n@@ -678,7 +683,7 @@ public void addedService( ServiceReference<T> serviceReference, RefPair<T> refPa\n                         }\n                         else\n                         {\n-                            m_componentManager.getActivator().registerMissingDependency( DependencyManager.this, serviceReference, trackingCount );\n+                            m_componentManager.registerMissingDependency( DependencyManager.this, serviceReference, trackingCount );\n                         }\n                         this.refPair = refPair;\n                     }\n@@ -725,7 +730,7 @@ public void removedService( ServiceReference<T> serviceReference, RefPair<T> ref\n                         nextRefPair = tracked.values().iterator().next();\n                         synchronized ( nextRefPair )\n                         {\n-                            if (!m_bindMethods.getBind().getServiceObject( nextRefPair, m_componentManager.getActivator().getBundleContext(), m_componentManager ))\n+                            if (!getServiceObject( m_bindMethods.getBind(), nextRefPair ))\n                             {\n                                 //TODO error???\n                             }\n@@ -780,11 +785,11 @@ public boolean open()\n                     RefPair<T> refPair = tracked.values().iterator().next();\n                     synchronized ( refPair )\n                     {\n-                        success |= m_bindMethods.getBind().getServiceObject( refPair, m_componentManager.getActivator().getBundleContext(), m_componentManager );\n+                        success |= getServiceObject( m_bindMethods.getBind(), refPair );\n                     }\n                     if (refPair.isFailed())\n                     {\n-                        m_componentManager.getActivator().registerMissingDependency( DependencyManager.this, refPair.getRef(), trackingCount.get() );\n+                        m_componentManager.registerMissingDependency( DependencyManager.this, refPair.getRef(), trackingCount.get() );\n                     }\n                     this.refPair = refPair;\n                 }\n@@ -891,7 +896,7 @@ public boolean open()\n                     RefPair<T> refPair = tracked.values().iterator().next();\n                     synchronized ( refPair )\n                     {\n-                        success |= m_bindMethods.getBind().getServiceObject( refPair, m_componentManager.getActivator().getBundleContext(), m_componentManager );\n+                        success |= getServiceObject( m_bindMethods.getBind(), refPair );\n                     }\n                     this.refPair = refPair;\n                 }\n@@ -1225,9 +1230,17 @@ private T getService( RefPair<T> refPair )\n         }\n         T serviceObject;\n         // otherwise acquire the service\n+        final BundleContext bundleContext = m_componentManager.getBundleContext();\n+        if (bundleContext == null)\n+        {\n+            m_componentManager.log( LogService.LOG_ERROR, \"Bundle shut down while getting service {0} ({1}/{2,number,#})\", new Object[]\n+                    { getName(), m_dependencyMetadata.getInterface(),\n+                        refPair.getRef().getProperty( Constants.SERVICE_ID ) }, null );\n+                return null;\n+        }\n         try\n         {\n-            serviceObject = m_componentManager.getActivator().getBundleContext().getService( refPair.getRef() );\n+            serviceObject = bundleContext.getService( refPair.getRef() );\n         }\n         catch ( Exception e )\n         {\n@@ -1427,7 +1440,7 @@ public void invokeBindMethodLate( final ServiceReference<T> ref, int trackingCou\n                 //something else got the reference and may be binding it.\n                 return;\n             }\n-            m_bindMethods.getBind().getServiceObject( refPair, m_componentManager.getActivator().getBundleContext(), m_componentManager );\n+            getServiceObject( m_bindMethods.getBind(), refPair );\n         }\n         m_componentManager.invokeBindMethod( this, refPair, trackingCount );\n     }\n@@ -1526,7 +1539,7 @@ void invokeUpdatedMethod( S componentInstance, final RefPair<T> refPair, int tra\n                     return;\n                 }\n             }\n-            if ( !m_bindMethods.getUpdated().getServiceObject( refPair, m_componentManager.getActivator().getBundleContext(), m_componentManager ))\n+            if ( !getServiceObject( m_bindMethods.getUpdated(), refPair ))\n             {\n                 m_componentManager.log( LogService.LOG_WARNING,\n                         \"DependencyManager : invokeUpdatedMethod : Service not available from service registry for ServiceReference {0} for reference {1}\",\n@@ -1598,7 +1611,7 @@ void invokeUnbindMethod( S componentInstance, final RefPair<T> refPair, int trac\n                         \"DependencyManager : invokeUnbindMethod : Component set, but reference not present\", null );\n                 return;\n             }\n-            if ( !m_bindMethods.getUnbind().getServiceObject( refPair, m_componentManager.getActivator().getBundleContext(), m_componentManager ))\n+            if ( !getServiceObject( m_bindMethods.getUnbind(), refPair ))\n             {\n                 m_componentManager.log( LogService.LOG_WARNING,\n                         \"DependencyManager : invokeUnbindMethod : Service not available from service registry for ServiceReference {0} for reference {1}\",\n@@ -1764,29 +1777,39 @@ private void setTargetFilter( String target) throws InvalidSyntaxException\n         }\n         m_componentManager.log( LogService.LOG_DEBUG, \"Setting target property for dependency {0} to {1}\", new Object[]\n                 {getName(), target}, null );\n+        BundleContext bundleContext = m_componentManager.getBundleContext();\n+        if ( bundleContext != null )\n+        {\n         try\n         {\n-            m_targetFilter = m_componentManager.getActivator().getBundleContext().createFilter( filterString );\n+                m_targetFilter = bundleContext.createFilter( filterString );\n         }\n         catch ( InvalidSyntaxException ise )\n         {\n             m_componentManager.log( LogService.LOG_ERROR, \"Invalid syntax in target property for dependency {0} to {1}\", new Object[]\n                     {getName(), target}, null );\n             // TODO this is an error, how do we recover?\n-            m_targetFilter = null;\n+            return; //avoid an NPE\n+        }\n+        }\n+        else\n+        {\n+            m_componentManager.log( LogService.LOG_ERROR, \"Bundle is shut down for dependency {0} to {1}\", new Object[]\n+                    {getName(), target}, null );\n+            return;                \n         }\n \n-        registerServiceListener( refMap );\n+        registerServiceListener( bundleContext, refMap );\n     }\n \n-    private void registerServiceListener( SortedMap<ServiceReference<T>, RefPair<T>> refMap ) throws InvalidSyntaxException\n+    private void registerServiceListener( BundleContext bundleContext, SortedMap<ServiceReference<T>, RefPair<T>> refMap ) throws InvalidSyntaxException\n     {\n         final ServiceTracker<T, RefPair<T>> oldTracker = trackerRef.get();\n         customizer.setPreviousRefMap( refMap );\n         boolean initialActive = oldTracker != null && oldTracker.isActive();\n         m_componentManager.log( LogService.LOG_INFO, \"New service tracker for {0}, initial active: {1}\", new Object[]\n                 {getName(), initialActive}, null );\n-        ServiceTracker<T, RefPair<T>> tracker = new ServiceTracker<T, RefPair<T>>( m_componentManager.getActivator().getBundleContext(), m_targetFilter, customizer, initialActive );\n+        ServiceTracker<T, RefPair<T>> tracker = new ServiceTracker<T, RefPair<T>>( bundleContext, m_targetFilter, customizer, initialActive );\n         customizer.setTracker( tracker );\n         registered = true;\n         tracker.open( m_componentManager.getTrackingCount() );\n@@ -1882,4 +1905,18 @@ public String toString()\n     {\n         return \"DependencyManager: Component [\" + m_componentManager + \"] reference [\" + getName() + \"]\";\n     }\n+\n+    boolean getServiceObject(BindMethod bindMethod, RefPair<T> refPair)\n+    {\n+        BundleContext bundleContext = m_componentManager.getBundleContext();\n+        if ( bundleContext != null )\n+        {\n+            return bindMethod.getServiceObject( refPair, bundleContext, m_componentManager );\n+        }\n+        else \n+        {\n+            refPair.setFailed();\n+            return false;\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/felix/raw/ffcef3290a905d0eaab868277817122b93084edf/scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java",
                "sha": "92398a7dfdc23b4c649bbd2a7ef354aebd1a959d",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/felix/blob/ffcef3290a905d0eaab868277817122b93084edf/scr/src/main/java/org/apache/felix/scr/impl/manager/ImmediateComponentManager.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/manager/ImmediateComponentManager.java?ref=ffcef3290a905d0eaab868277817122b93084edf",
                "deletions": 3,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/manager/ImmediateComponentManager.java",
                "patch": "@@ -136,7 +136,11 @@ public void resetImplementationObject( S implementationObject )\n             log( LogService.LOG_DEBUG, \"Set implementation object for component {0}\", new Object[] { getName() },  null );\n \n             //notify that component was successfully created so any optional circular dependencies can be retried\n-            getActivator().missingServicePresent( getServiceReference() );\n+            BundleComponentActivator activator = getActivator();\n+            if ( activator != null )\n+            {\n+                activator.missingServicePresent( getServiceReference() );\n+            }\n         }\n         return true;\n     }\n@@ -216,10 +220,16 @@ protected S createImplementationObject( Bundle usingBundle, SetImplementationObj\n         // 1. Load the component implementation class\n         // 2. Create the component instance and component context\n         // If the component is not immediate, this is not done at this moment\n+        Bundle bundle = getBundle();\n+        if (bundle == null)\n+        {\n+            log( LogService.LOG_WARNING, \"Bundle shut down during instantiation of the implementation object\", null);\n+            return null;\n+        }\n         try\n         {\n             // 112.4.4 The class is retrieved with the loadClass method of the component's bundle\n-            implementationObjectClass = (Class<S>) getActivator().getBundleContext().getBundle().loadClass(\n+            implementationObjectClass = (Class<S>) bundle.loadClass(\n                     getComponentMetadata().getImplementationClassName() )  ;\n \n             // 112.4.4 The class must be public and have a public constructor without arguments so component instances\n@@ -754,7 +764,7 @@ public void ungetService( Bundle bundle, ServiceRegistration<S> serviceRegistrat\n             // unget the service instance if no bundle is using it\n             // any longer unless delayed component instances have to\n             // be kept (FELIX-3039)\n-            if ( useCount == 0 && !isImmediate() && !getActivator().getConfiguration().keepInstances() )\n+            if ( useCount == 0 && !isImmediate() && !keepInstances() )\n             {\n                 obtainWriteLock( \"ImmediateComponentManager.ungetService.1\" );\n                 try\n@@ -773,6 +783,11 @@ public void ungetService( Bundle bundle, ServiceRegistration<S> serviceRegistrat\n         }\n     }\n \n+    private boolean keepInstances()\n+    {\n+        return getActivator() != null && getActivator().getConfiguration().keepInstances();\n+    }\n+\n     public long getChangeCount()\n     {\n         return m_changeCount;",
                "raw_url": "https://github.com/apache/felix/raw/ffcef3290a905d0eaab868277817122b93084edf/scr/src/main/java/org/apache/felix/scr/impl/manager/ImmediateComponentManager.java",
                "sha": "0c17fd5e3f2a1406faa06ffe62713faf575560d8",
                "status": "modified"
            }
        ],
        "message": "FELIX-4011 fix a lot of potential NPEs during bundle shutdown when BundleComponentActivator and BundleContext may not be available\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1465203 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/8eb4ed9260a809ad1294396b2e604fe211965332",
        "patched_files": [
            "AbstractComponentManager.java"
        ],
        "repo": "felix",
        "unit_tests": [
            "AbstractComponentManagerTest.java"
        ]
    }
}