{
    "commons-dbcp_3df2257": {
        "repo": "commons-dbcp",
        "message": "Simplify implementation without using the catch NPE hack.",
        "commit": "https://github.com/apache/commons-dbcp/commit/3df225721c22a5eb7b7b74e774ffe5a0705965d6",
        "parent": "https://github.com/apache/commons-dbcp/commit/9eb1e02873e9b56c55ac6b0bd253d5193de15b9c",
        "bug_id": "commons-dbcp_3df2257",
        "file": [
            {
                "sha": "2423d19fd858b8efdaf7b4af4e62607b3b73375b",
                "filename": "src/main/java/org/apache/commons/dbcp2/PoolingDriver.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/3df225721c22a5eb7b7b74e774ffe5a0705965d6/src/main/java/org/apache/commons/dbcp2/PoolingDriver.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/3df225721c22a5eb7b7b74e774ffe5a0705965d6/src/main/java/org/apache/commons/dbcp2/PoolingDriver.java",
                "status": "modified",
                "changes": 6,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/PoolingDriver.java?ref=3df225721c22a5eb7b7b74e774ffe5a0705965d6",
                "patch": "@@ -145,11 +145,7 @@ public synchronized void closePool(final String name) throws SQLException {\n \n     @Override\n     public boolean acceptsURL(final String url) throws SQLException {\n-        try {\n-            return url.startsWith(URL_PREFIX);\n-        } catch(final NullPointerException e) {\n-            return false;\n-        }\n+        return url == null ? false : url.startsWith(URL_PREFIX);\n     }\n \n     @Override",
                "deletions": 5
            }
        ],
        "patched_files": [
            "PoolingDriver.java"
        ],
        "unit_tests": [
            "TestPoolingDriver.java"
        ]
    },
    "commons-dbcp_b72cc6f": {
        "repo": "commons-dbcp",
        "message": "Updated to reflect pool2 API change (and avoid NPE).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/trunk@1136171 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-dbcp/commit/b72cc6fc7397985eeb3cc864b28ec3a293376150",
        "parent": "https://github.com/apache/commons-dbcp/commit/02cc4afa833881373c0b8a296eed74fd73c86288",
        "bug_id": "commons-dbcp_b72cc6f",
        "file": [
            {
                "sha": "2017dd0a8521e308c785132c5ccef1b9a5ebe6d0",
                "filename": "src/java/org/apache/commons/dbcp2/datasources/PerUserPoolDataSource.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/b72cc6fc7397985eeb3cc864b28ec3a293376150/src/java/org/apache/commons/dbcp2/datasources/PerUserPoolDataSource.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/b72cc6fc7397985eeb3cc864b28ec3a293376150/src/java/org/apache/commons/dbcp2/datasources/PerUserPoolDataSource.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/java/org/apache/commons/dbcp2/datasources/PerUserPoolDataSource.java?ref=b72cc6fc7397985eeb3cc864b28ec3a293376150",
                "patch": "@@ -507,7 +507,7 @@ private synchronized void registerPool(\n             getDefaultMaxWait() : userMax.intValue();\n \n         // Create an object pool to contain our PooledConnections\n-        GenericObjectPool pool = new GenericObjectPool(null);\n+        GenericObjectPool pool = new GenericObjectPool();\n         pool.setMaxTotal(maxTotal);\n         pool.setMaxIdle(maxIdle);\n         pool.setMaxWait(maxWait);",
                "deletions": 1
            }
        ],
        "patched_files": [
            "PerUserPoolDataSource.java"
        ],
        "unit_tests": [
            "TestPerUserPoolDataSource.java"
        ]
    },
    "commons-dbcp_8a8b7a0": {
        "repo": "commons-dbcp",
        "message": "Avoid possible NPE on toString().\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/trunk@831707 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-dbcp/commit/8a8b7a0e899aa8a2c87939d80a5e5693821e0797",
        "parent": "https://github.com/apache/commons-dbcp/commit/757f0ba7a5da3df5fb6c93befbd114bdbd0454ba",
        "bug_id": "commons-dbcp_8a8b7a0",
        "file": [
            {
                "sha": "060792572434d23a017c948df6a1763017e83e71",
                "filename": "src/java/org/apache/commons/dbcp/PoolingDataSource.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/8a8b7a0e899aa8a2c87939d80a5e5693821e0797/src/java/org/apache/commons/dbcp/PoolingDataSource.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/8a8b7a0e899aa8a2c87939d80a5e5693821e0797/src/java/org/apache/commons/dbcp/PoolingDataSource.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/java/org/apache/commons/dbcp/PoolingDataSource.java?ref=8a8b7a0e899aa8a2c87939d80a5e5693821e0797",
                "patch": "@@ -350,7 +350,7 @@ public void setTypeMap(Map map) throws SQLException {\n \n         public String toString() {\n             if (delegate == null){\n-                return null;\n+                return \"NULL\";\n             }\n             return delegate.toString();\n         }",
                "deletions": 1
            }
        ],
        "patched_files": [
            "PoolingDataSource.java"
        ],
        "unit_tests": [
            "TestPoolingDataSource.java"
        ]
    },
    "commons-dbcp_006d056": {
        "repo": "commons-dbcp",
        "message": "DBCP-403 DelegatingStatement.close() fails with NPE if statement is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/trunk@1537577 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-dbcp/commit/006d0566af0726b8ca5bdb07e28c4065b95238b6",
        "parent": "https://github.com/apache/commons-dbcp/commit/615abdb3e4f570275d1839d7649dcfd94e7d11ed",
        "bug_id": "commons-dbcp_006d056",
        "file": [
            {
                "sha": "0a9ae99d6533f53982009c21c8c26e67b3aa2a3e",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/006d0566af0726b8ca5bdb07e28c4065b95238b6/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/006d0566af0726b8ca5bdb07e28c4065b95238b6/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/changes/changes.xml?ref=006d0566af0726b8ca5bdb07e28c4065b95238b6",
                "patch": "@@ -46,6 +46,9 @@ The <action> type attribute can be add,update,fix,remove.\n       <action issue=\"DBCP-154\" dev=\"markt\" type=\"fix\">\n         Log validation failures of poolable connections.\n       </action>\n+      <action issue=\"DBCP-403\" dev=\"sebb\" type=\"fix\">\n+        DelegatingStatement.close() fails with NPE if statement is null\n+      </action>\n       <action issue=\"DBCP-322\" dev=\"sebb\" type=\"fix\">\n         CPDSConnectionFactory.validateObject(Object) ignores Throwable.\n       </action>",
                "deletions": 0
            },
            {
                "sha": "540766fb1a7dfe345c234918514e025309ce84da",
                "filename": "src/java/org/apache/commons/dbcp2/DelegatingStatement.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/006d0566af0726b8ca5bdb07e28c4065b95238b6/src/java/org/apache/commons/dbcp2/DelegatingStatement.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/006d0566af0726b8ca5bdb07e28c4065b95238b6/src/java/org/apache/commons/dbcp2/DelegatingStatement.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/java/org/apache/commons/dbcp2/DelegatingStatement.java?ref=006d0566af0726b8ca5bdb07e28c4065b95238b6",
                "patch": "@@ -175,7 +175,9 @@ public void close() throws SQLException {\n                     clearTrace();\n                 }\n         \n-                _stmt.close();\n+                if (_stmt != null) {\n+                \t_stmt.close();\n+                }\n             }\n             catch (SQLException e) {\n                 handleException(e);",
                "deletions": 1
            }
        ],
        "patched_files": [
            "DelegatingStatement.java"
        ],
        "unit_tests": [
            "TestDelegatingStatement.java"
        ]
    },
    "commons-dbcp_f675cbc": {
        "repo": "commons-dbcp",
        "message": "[DBCP-486] DriverAdapterCPDS.setUser(), setPassword(), and\ngetPooledConnection() with null arguments throw NullPointerExceptions\nwhen connection properties are set",
        "commit": "https://github.com/apache/commons-dbcp/commit/f675cbc93ee4bf7395befd90303cfdc79265cee2",
        "parent": "https://github.com/apache/commons-dbcp/commit/cf032314f935892a8cc5ca7a43bcf1c9011f3242",
        "bug_id": "commons-dbcp_f675cbc",
        "file": [
            {
                "sha": "7abec82a861daea01357b4a9cc6d265c77eeb203",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/f675cbc93ee4bf7395befd90303cfdc79265cee2/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/f675cbc93ee4bf7395befd90303cfdc79265cee2/src/changes/changes.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/changes/changes.xml?ref=f675cbc93ee4bf7395befd90303cfdc79265cee2",
                "patch": "@@ -68,7 +68,7 @@ The <action> type attribute can be add,update,fix,remove.\n         Make constant public: org.apache.commons.dbcp2.PoolingDriver.URL_PREFIX.\n       </action>\n       <action dev=\"ggregory\" type=\"update\" issue=\"DBCP-486\" due-to=\"Gary Gregory\">\n-        DriverAdapterCPDS.setUser(null) and setPassword(null) throw NullPointerExceptions when connection properties are set.\n+        DriverAdapterCPDS.setUser(), setPassword(), and getPooledConnection() with null arguments throw NullPointerExceptions when connection properties are set.\n       </action>\n     </release>\n     <release version=\"2.2.0\" date=\"2017-12-DD\" description=\"This is a minor release, including bug fixes and enhancements.\">",
                "deletions": 1
            },
            {
                "sha": "748dec7e0f4d812b1e70e3bafefafbcd6103d775",
                "filename": "src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/f675cbc93ee4bf7395befd90303cfdc79265cee2/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/f675cbc93ee4bf7395befd90303cfdc79265cee2/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "status": "modified",
                "changes": 30,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java?ref=f675cbc93ee4bf7395befd90303cfdc79265cee2",
                "patch": "@@ -177,8 +177,8 @@ public PooledConnection getPooledConnection(final String username, final String\n         // exception upon first invocation.\n         try {\n             if (connectionProperties != null) {\n-                connectionProperties.put(KEY_USER, username);\n-                connectionProperties.put(KEY_PASSWORD, pass);\n+                update(connectionProperties, KEY_USER, username);\n+                update(connectionProperties, KEY_PASSWORD, pass);\n                 pci = new PooledConnectionImpl(DriverManager.getConnection(\n                         getUrl(), connectionProperties));\n             } else {\n@@ -442,13 +442,7 @@ public String getPassword() {\n     public void setPassword(final String v) {\n         assertInitializationAllowed();\n         this.password = v;\n-        if (connectionProperties != null) {\n-            if (v == null) {\n-                connectionProperties.remove(KEY_PASSWORD);\n-            } else {\n-                connectionProperties.setProperty(KEY_PASSWORD, v);\n-            }\n-        }\n+        update(connectionProperties, KEY_PASSWORD, v);\n     }\n \n     /**\n@@ -485,13 +479,7 @@ public String getUser() {\n     public void setUser(final String v) {\n         assertInitializationAllowed();\n         this.user = v;\n-        if (connectionProperties != null) {\n-            if (v == null) {\n-                connectionProperties.remove(KEY_USER);\n-            } else {\n-                connectionProperties.setProperty(KEY_USER, v);\n-            }\n-        }\n+        update(connectionProperties, KEY_USER, v);\n     }\n \n     /**\n@@ -716,4 +704,14 @@ public void setMaxPreparedStatements(final int maxPreparedStatements)\n     {\n         _maxPreparedStatements = maxPreparedStatements;\n     }\n+    \n+    private void update(final Properties properties, final String key, final String value) {\n+        if (properties != null) {\n+            if (value == null) {\n+                properties.remove(key);\n+            } else {\n+                properties.setProperty(key, value);\n+            }\n+        }        \n+    }\n }",
                "deletions": 16
            }
        ],
        "patched_files": [
            "DriverAdapterCPDS.java"
        ],
        "unit_tests": [
            "TestDriverAdapterCPDS.java"
        ]
    },
    "commons-dbcp_47c723b": {
        "repo": "commons-dbcp",
        "message": "Avoid NPE in getProperty() call\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/trunk@1028593 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-dbcp/commit/47c723b88e7240529a7eda5ee97884c83a5ef927",
        "parent": "https://github.com/apache/commons-dbcp/commit/fe2a8ec94d50395f69a3fd51dccfaf30216884af",
        "bug_id": "commons-dbcp_47c723b",
        "file": [
            {
                "sha": "cdf7b6b51ce70fb5995d63d7582c2ae8123452a9",
                "filename": "src/test/org/apache/commons/dbcp/TesterDriver.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/47c723b88e7240529a7eda5ee97884c83a5ef927/src/test/org/apache/commons/dbcp/TesterDriver.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/47c723b88e7240529a7eda5ee97884c83a5ef927/src/test/org/apache/commons/dbcp/TesterDriver.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/test/org/apache/commons/dbcp/TesterDriver.java?ref=47c723b88e7240529a7eda5ee97884c83a5ef927",
                "patch": "@@ -69,6 +69,9 @@ public boolean acceptsURL(String url) throws SQLException {\n \n     private void assertValidUserPassword(String user, String password) \n         throws SQLException {\n+        if (user == null){\n+            throw new SQLException(\"username cannot be null.\");            \n+        }\n         synchronized (validUserPasswords) {\n             String realPassword = validUserPasswords.getProperty(user);\n             if (realPassword == null) {",
                "deletions": 0
            }
        ],
        "patched_files": [],
        "unit_tests": [
            "TesterDriver.java"
        ]
    },
    "commons-dbcp_cf03231": {
        "repo": "commons-dbcp",
        "message": "Revert \"[DBCP-486] DriverAdapterCPDS.setUser(), setPassword(), and getPooledConnection() with null arguments throw NullPointerExceptions when connection properties are set\"\n\nThis reverts commit a6feb941e5ff8fde22865f981d912c6d5f48546e.",
        "commit": "https://github.com/apache/commons-dbcp/commit/cf032314f935892a8cc5ca7a43bcf1c9011f3242",
        "parent": "https://github.com/apache/commons-dbcp/commit/a6feb941e5ff8fde22865f981d912c6d5f48546e",
        "bug_id": "commons-dbcp_cf03231",
        "file": [
            {
                "sha": "8f69ffbed1f2ef07a1c81a2c6adbe8a322cf5e94",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/cf032314f935892a8cc5ca7a43bcf1c9011f3242/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/cf032314f935892a8cc5ca7a43bcf1c9011f3242/src/changes/changes.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/changes/changes.xml?ref=cf032314f935892a8cc5ca7a43bcf1c9011f3242",
                "patch": "@@ -68,7 +68,7 @@ The <action> type attribute can be add,update,fix,remove.\n         Make constant public: org.apache.commons.dbcp2.PoolingDriver.URL_PREFIX.\n       </action>\n       <action dev=\"ggregory\" type=\"update\" issue=\"DBCP-486\" due-to=\"Gary Gregory\">\n-        DriverAdapterCPDS.setUser(), setPassword(), and getPooledConnection() with null arguments throw NullPointerExceptions when connection properties are set.\n+        DriverAdapterCPDS.setUser(null) and setPassword(null) throw NullPointerExceptions when connection properties are set.\n       </action>\n     </release>\n     <release version=\"2.2.0\" date=\"2017-12-DD\" description=\"This is a minor release, including bug fixes and enhancements.\">",
                "deletions": 1
            },
            {
                "sha": "bf7d960147381885a69572beaa401dc3c625e043",
                "filename": "src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/cf032314f935892a8cc5ca7a43bcf1c9011f3242/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/cf032314f935892a8cc5ca7a43bcf1c9011f3242/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "status": "modified",
                "changes": 30,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java?ref=cf032314f935892a8cc5ca7a43bcf1c9011f3242",
                "patch": "@@ -177,8 +177,8 @@ public PooledConnection getPooledConnection(final String username, final String\n         // exception upon first invocation.\n         try {\n             if (connectionProperties != null) {\n-                update(connectionProperties, KEY_USER, username);\n-                update(connectionProperties, KEY_PASSWORD, pass);\n+                connectionProperties.put(KEY_USER, username);\n+                connectionProperties.put(KEY_PASSWORD, pass);\n                 pci = new PooledConnectionImpl(DriverManager.getConnection(\n                         getUrl(), connectionProperties));\n             } else {\n@@ -442,7 +442,13 @@ public String getPassword() {\n     public void setPassword(final String v) {\n         assertInitializationAllowed();\n         this.password = v;\n-        update(connectionProperties, KEY_PASSWORD, v);\n+        if (connectionProperties != null) {\n+            if (v == null) {\n+                connectionProperties.remove(KEY_PASSWORD);\n+            } else {\n+                connectionProperties.setProperty(KEY_PASSWORD, v);\n+            }\n+        }\n     }\n \n     /**\n@@ -479,7 +485,13 @@ public String getUser() {\n     public void setUser(final String v) {\n         assertInitializationAllowed();\n         this.user = v;\n-        update(connectionProperties, KEY_USER, v);\n+        if (connectionProperties != null) {\n+            if (v == null) {\n+                connectionProperties.remove(KEY_USER);\n+            } else {\n+                connectionProperties.setProperty(KEY_USER, v);\n+            }\n+        }\n     }\n \n     /**\n@@ -704,14 +716,4 @@ public void setMaxPreparedStatements(final int maxPreparedStatements)\n     {\n         _maxPreparedStatements = maxPreparedStatements;\n     }\n-    \n-    private void update(final Properties properties, final String key, final String value) {\n-        if (properties != null) {\n-            if (value == null) {\n-                properties.remove(key);\n-            } else {\n-                properties.setProperty(key, value);\n-            }\n-        }        \n-    }\n }",
                "deletions": 14
            },
            {
                "sha": "a66a7a80f1c6e00cad2d2ca3ad0514c2f8bc4f61",
                "filename": "src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/cf032314f935892a8cc5ca7a43bcf1c9011f3242/src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/cf032314f935892a8cc5ca7a43bcf1c9011f3242/src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java",
                "status": "modified",
                "changes": 20,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java?ref=cf032314f935892a8cc5ca7a43bcf1c9011f3242",
                "patch": "@@ -159,16 +159,14 @@ private void updateTransactionStatus() throws SQLException {\n     @Override\n     public void close() throws SQLException {\n         if (!isClosedInternal()) {\n-            synchronized (this) {\n-                try {\n-                    // Don't actually close the connection if in a transaction. The\n-                    // connection will be closed by the transactionComplete method.\n-                    if (transactionContext == null) {\n-                        super.close();\n-                    }\n-                } finally {\n-                    setClosedInternal(true);\n+            try {\n+                // Don't actually close the connection if in a transaction. The\n+                // connection will be closed by the transactionComplete method.\n+                if (transactionContext == null) {\n+                    super.close();\n                 }\n+            } finally {\n+                setClosedInternal(true);\n             }\n         }\n     }\n@@ -188,9 +186,7 @@ public void afterCompletion(final TransactionContext completedContext, final boo\n     }\n \n     protected void transactionComplete() {\n-        synchronized (this) {\n-            transactionContext = null;\n-        }\n+        transactionContext = null;\n \n         // If we were using a shared connection, clear the reference now that\n         // the transaction has completed",
                "deletions": 12
            }
        ],
        "patched_files": [
            "ManagedConnection.java",
            "DriverAdapterCPDS.java"
        ],
        "unit_tests": [
            "TestManagedConnection.java",
            "TestDriverAdapterCPDS.java"
        ]
    },
    "commons-dbcp_a6feb94": {
        "repo": "commons-dbcp",
        "message": "[DBCP-486] DriverAdapterCPDS.setUser(), setPassword(), and\ngetPooledConnection() with null arguments throw NullPointerExceptions\nwhen connection properties are set",
        "commit": "https://github.com/apache/commons-dbcp/commit/a6feb941e5ff8fde22865f981d912c6d5f48546e",
        "parent": "https://github.com/apache/commons-dbcp/commit/323d3fbaec7f2620aa29678b10aac05a5ad6b388",
        "bug_id": "commons-dbcp_a6feb94",
        "file": [
            {
                "sha": "7abec82a861daea01357b4a9cc6d265c77eeb203",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/a6feb941e5ff8fde22865f981d912c6d5f48546e/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/a6feb941e5ff8fde22865f981d912c6d5f48546e/src/changes/changes.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/changes/changes.xml?ref=a6feb941e5ff8fde22865f981d912c6d5f48546e",
                "patch": "@@ -68,7 +68,7 @@ The <action> type attribute can be add,update,fix,remove.\n         Make constant public: org.apache.commons.dbcp2.PoolingDriver.URL_PREFIX.\n       </action>\n       <action dev=\"ggregory\" type=\"update\" issue=\"DBCP-486\" due-to=\"Gary Gregory\">\n-        DriverAdapterCPDS.setUser(null) and setPassword(null) throw NullPointerExceptions when connection properties are set.\n+        DriverAdapterCPDS.setUser(), setPassword(), and getPooledConnection() with null arguments throw NullPointerExceptions when connection properties are set.\n       </action>\n     </release>\n     <release version=\"2.2.0\" date=\"2017-12-DD\" description=\"This is a minor release, including bug fixes and enhancements.\">",
                "deletions": 1
            },
            {
                "sha": "748dec7e0f4d812b1e70e3bafefafbcd6103d775",
                "filename": "src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/a6feb941e5ff8fde22865f981d912c6d5f48546e/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/a6feb941e5ff8fde22865f981d912c6d5f48546e/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "status": "modified",
                "changes": 30,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java?ref=a6feb941e5ff8fde22865f981d912c6d5f48546e",
                "patch": "@@ -177,8 +177,8 @@ public PooledConnection getPooledConnection(final String username, final String\n         // exception upon first invocation.\n         try {\n             if (connectionProperties != null) {\n-                connectionProperties.put(KEY_USER, username);\n-                connectionProperties.put(KEY_PASSWORD, pass);\n+                update(connectionProperties, KEY_USER, username);\n+                update(connectionProperties, KEY_PASSWORD, pass);\n                 pci = new PooledConnectionImpl(DriverManager.getConnection(\n                         getUrl(), connectionProperties));\n             } else {\n@@ -442,13 +442,7 @@ public String getPassword() {\n     public void setPassword(final String v) {\n         assertInitializationAllowed();\n         this.password = v;\n-        if (connectionProperties != null) {\n-            if (v == null) {\n-                connectionProperties.remove(KEY_PASSWORD);\n-            } else {\n-                connectionProperties.setProperty(KEY_PASSWORD, v);\n-            }\n-        }\n+        update(connectionProperties, KEY_PASSWORD, v);\n     }\n \n     /**\n@@ -485,13 +479,7 @@ public String getUser() {\n     public void setUser(final String v) {\n         assertInitializationAllowed();\n         this.user = v;\n-        if (connectionProperties != null) {\n-            if (v == null) {\n-                connectionProperties.remove(KEY_USER);\n-            } else {\n-                connectionProperties.setProperty(KEY_USER, v);\n-            }\n-        }\n+        update(connectionProperties, KEY_USER, v);\n     }\n \n     /**\n@@ -716,4 +704,14 @@ public void setMaxPreparedStatements(final int maxPreparedStatements)\n     {\n         _maxPreparedStatements = maxPreparedStatements;\n     }\n+    \n+    private void update(final Properties properties, final String key, final String value) {\n+        if (properties != null) {\n+            if (value == null) {\n+                properties.remove(key);\n+            } else {\n+                properties.setProperty(key, value);\n+            }\n+        }        \n+    }\n }",
                "deletions": 16
            },
            {
                "sha": "d05144bc22aff63ad1e9fa19c38c7a5492b40fb8",
                "filename": "src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/a6feb941e5ff8fde22865f981d912c6d5f48546e/src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/a6feb941e5ff8fde22865f981d912c6d5f48546e/src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java",
                "status": "modified",
                "changes": 20,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java?ref=a6feb941e5ff8fde22865f981d912c6d5f48546e",
                "patch": "@@ -159,14 +159,16 @@ private void updateTransactionStatus() throws SQLException {\n     @Override\n     public void close() throws SQLException {\n         if (!isClosedInternal()) {\n-            try {\n-                // Don't actually close the connection if in a transaction. The\n-                // connection will be closed by the transactionComplete method.\n-                if (transactionContext == null) {\n-                    super.close();\n+            synchronized (this) {\n+                try {\n+                    // Don't actually close the connection if in a transaction. The\n+                    // connection will be closed by the transactionComplete method.\n+                    if (transactionContext == null) {\n+                        super.close();\n+                    }\n+                } finally {\n+                    setClosedInternal(true);\n                 }\n-            } finally {\n-                setClosedInternal(true);\n             }\n         }\n     }\n@@ -186,7 +188,9 @@ public void afterCompletion(final TransactionContext completedContext, final boo\n     }\n \n     protected void transactionComplete() {\n-        transactionContext = null;\n+        synchronized (this) {\n+            transactionContext = null;\n+        }\n \n         // If we were using a shared connection, clear the reference now that\n         // the transaction has completed",
                "deletions": 8
            }
        ],
        "patched_files": [
            "ManagedConnection.java",
            "DriverAdapterCPDS.java"
        ],
        "unit_tests": [
            "TestManagedConnection.java",
            "TestDriverAdapterCPDS.java"
        ]
    },
    "commons-dbcp_b137fda": {
        "repo": "commons-dbcp",
        "message": "Avoid NPE when calling DriverAdapterCPDS.toString() (#31)\n\n* Add test for DriverAdapterCPDS.toString()\r\n\r\nIt currently fails when connectionProperties are null\r\n\r\n* Do not access connectionProperties when it's null",
        "commit": "https://github.com/apache/commons-dbcp/commit/b137fda65be70c4431a7a09ca379e40a300760e1",
        "parent": "https://github.com/apache/commons-dbcp/commit/2ee3c53e75e9ad899ed2aa06bfd882ebeea7b4a2",
        "bug_id": "commons-dbcp_b137fda",
        "file": [
            {
                "sha": "e80d69c4e8f36b411516e63ab09921c913c4cb08",
                "filename": "src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/b137fda65be70c4431a7a09ca379e40a300760e1/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/b137fda65be70c4431a7a09ca379e40a300760e1/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java?ref=b137fda65be70c4431a7a09ca379e40a300760e1",
                "patch": "@@ -765,7 +765,7 @@ public synchronized String toString() {\n         builder.append(\", connectionProperties=\");\n         Properties tmpProps = connectionProperties;\n         final String pwdKey = \"password\";\n-        if (connectionProperties.contains(pwdKey)) {\n+        if (connectionProperties != null && connectionProperties.contains(pwdKey)) {\n             tmpProps = (Properties) connectionProperties.clone();\n             tmpProps.remove(pwdKey);\n         }",
                "deletions": 1
            },
            {
                "sha": "ab0a4dd8dc5de2d57aab23c50311f377b6588d6b",
                "filename": "src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/b137fda65be70c4431a7a09ca379e40a300760e1/src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/b137fda65be70c4431a7a09ca379e40a300760e1/src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java?ref=b137fda65be70c4431a7a09ca379e40a300760e1",
                "patch": "@@ -367,4 +367,16 @@ public void testGetObjectInstanceChangeDescription() throws Exception {\n         final Object o = pcds.getObjectInstance(ref, null, null, null);\n         assertEquals(pcds.getDescription(), ((DriverAdapterCPDS) o).getDescription());\n     }\n+    \n+    @Test\n+    public void testToStringWithoutConnectionProperties() throws ClassNotFoundException\n+    {\n+        final DriverAdapterCPDS cleanCpds = new DriverAdapterCPDS();\n+        cleanCpds.setDriver( \"org.apache.commons.dbcp2.TesterDriver\" );\n+        cleanCpds.setUrl( \"jdbc:apache:commons:testdriver\" );\n+        cleanCpds.setUser( \"foo\" );\n+        cleanCpds.setPassword( \"bar\" );\n+\n+        cleanCpds.toString();\n+    }\n }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "DriverAdapterCPDS.java"
        ],
        "unit_tests": [
            "TestDriverAdapterCPDS.java"
        ]
    },
    "commons-dbcp_6bcbadc": {
        "repo": "commons-dbcp",
        "message": "[DBCP-446] NullPointerException thrown when calling ManagedConnection.isClosed().\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/trunk@1753636 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-dbcp/commit/6bcbadcc35c5f78cc04d6916beab6c5e10a1a016",
        "parent": "https://github.com/apache/commons-dbcp/commit/0f656aa336092cfb1662560da39c07bf575b2ebe",
        "bug_id": "commons-dbcp_6bcbadc",
        "file": [
            {
                "sha": "13f9f5c157e69a7e3b011c0fcf1bfe62cd4b0602",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/6bcbadcc35c5f78cc04d6916beab6c5e10a1a016/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/6bcbadcc35c5f78cc04d6916beab6c5e10a1a016/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/changes/changes.xml?ref=6bcbadcc35c5f78cc04d6916beab6c5e10a1a016",
                "patch": "@@ -67,6 +67,9 @@ The <action> type attribute can be add,update,fix,remove.\n         enables container-managed pools created from JNDI Resource\n         definitions to enable JMX by supplying a valid root JMX name.  \n       </action>\n+      <action dev=\"ggregory\" type=\"fix\" issue=\"DBCP-446\" due-to=\"Gary Gregory, feng yang, Euclides M, Phil Steitz\">\n+        NullPointerException thrown when calling ManagedConnection.isClosed().\n+      </action>\n       <action dev=\"psteitz\" type=\"fix\" issue=\"DBCP-444\">\n         InvalidateConnection can result in closed connection returned by getConnection.\n       </action>",
                "deletions": 0
            },
            {
                "sha": "ac8320ed009cf304b37d3803cfd56f916bb49d9a",
                "filename": "src/main/java/org/apache/commons/dbcp2/DelegatingConnection.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/6bcbadcc35c5f78cc04d6916beab6c5e10a1a016/src/main/java/org/apache/commons/dbcp2/DelegatingConnection.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/6bcbadcc35c5f78cc04d6916beab6c5e10a1a016/src/main/java/org/apache/commons/dbcp2/DelegatingConnection.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/DelegatingConnection.java?ref=6bcbadcc35c5f78cc04d6916beab6c5e10a1a016",
                "patch": "@@ -591,10 +591,9 @@ public void setTypeMap(final Map<String,Class<?>> map) throws SQLException {\n         }\n     }\n \n-\n     @Override\n     public boolean isClosed() throws SQLException {\n-        return _closed || _conn.isClosed();\n+        return _closed || _conn == null || _conn.isClosed();\n     }\n \n     protected void checkOpen() throws SQLException {",
                "deletions": 2
            },
            {
                "sha": "610daf468d400c9d63cdf2b73d7da58b7b9f9730",
                "filename": "src/test/java/org/apache/commons/dbcp2/TestDelegatingConnection.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/6bcbadcc35c5f78cc04d6916beab6c5e10a1a016/src/test/java/org/apache/commons/dbcp2/TestDelegatingConnection.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/6bcbadcc35c5f78cc04d6916beab6c5e10a1a016/src/test/java/org/apache/commons/dbcp2/TestDelegatingConnection.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/test/java/org/apache/commons/dbcp2/TestDelegatingConnection.java?ref=6bcbadcc35c5f78cc04d6916beab6c5e10a1a016",
                "patch": "@@ -139,4 +139,12 @@ public void testIsClosed() throws Exception {\n         assertTrue(conn.isClosed());\n     }\n \n+    @Test\n+    public void testIsClosedNullDelegate() throws Exception {\n+        conn.checkOpen();\n+        assertFalse(conn.isClosed());\n+        conn.setDelegate(null);\n+        assertTrue(conn.isClosed());\n+    }\n+\n }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "DelegatingConnection.java"
        ],
        "unit_tests": [
            "TestDelegatingConnection.java"
        ]
    },
    "commons-dbcp_71841bc": {
        "repo": "commons-dbcp",
        "message": "[DBCP-488] NPE for\norg.apache.commons.dbcp2.cpdsadapter.DriverAdapterCPDS.setConnectionProperties(null).",
        "commit": "https://github.com/apache/commons-dbcp/commit/71841bce6f67b8e58b26caaa49b5c0b1f7269534",
        "parent": "https://github.com/apache/commons-dbcp/commit/5226462744f1e3c11fe5477b543a60b18a80e548",
        "bug_id": "commons-dbcp_71841bc",
        "file": [
            {
                "sha": "67db1d51dbd176d6865e97720c31065ec2c55f7d",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/71841bce6f67b8e58b26caaa49b5c0b1f7269534/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/71841bce6f67b8e58b26caaa49b5c0b1f7269534/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/changes/changes.xml?ref=71841bce6f67b8e58b26caaa49b5c0b1f7269534",
                "patch": "@@ -73,6 +73,9 @@ The <action> type attribute can be add,update,fix,remove.\n       <action dev=\"ggregory\" type=\"update\" issue=\"DBCP-487\" due-to=\"Gary Gregory\">\n         Add API org.apache.commons.dbcp2.datasources.PerUserPoolDataSource.clear().\n       </action>\n+      <action dev=\"ggregory\" type=\"update\" issue=\"DBCP-488\" due-to=\"Gary Gregory\">\n+        NPE for org.apache.commons.dbcp2.cpdsadapter.DriverAdapterCPDS.setConnectionProperties(null).      \n+      </action>\n     </release>\n     <release version=\"2.2.0\" date=\"2017-12-DD\" description=\"This is a minor release, including bug fixes and enhancements.\">\n       <action dev=\"ggregory\" type=\"fix\" issue=\"DBCP-481\" due-to=\"Gary Gregory\">",
                "deletions": 0
            },
            {
                "sha": "f42c1dbd4bf119ae7c42777dc5cccc8980939e93",
                "filename": "src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/71841bce6f67b8e58b26caaa49b5c0b1f7269534/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/71841bce6f67b8e58b26caaa49b5c0b1f7269534/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "status": "modified",
                "changes": 12,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java?ref=71841bce6f67b8e58b26caaa49b5c0b1f7269534",
                "patch": "@@ -395,11 +395,13 @@ public Properties getConnectionProperties() {\n     public void setConnectionProperties(final Properties props) {\n         assertInitializationAllowed();\n         connectionProperties = props;\n-        if (connectionProperties.containsKey(KEY_USER)) {\n-            setUser(connectionProperties.getProperty(KEY_USER));\n-        }\n-        if (connectionProperties.containsKey(KEY_PASSWORD)) {\n-            setPassword(connectionProperties.getProperty(KEY_PASSWORD));\n+        if (connectionProperties != null) {\n+            if (connectionProperties.containsKey(KEY_USER)) {\n+                setUser(connectionProperties.getProperty(KEY_USER));\n+            }\n+            if (connectionProperties.containsKey(KEY_PASSWORD)) {\n+                setPassword(connectionProperties.getProperty(KEY_PASSWORD));\n+            }\n         }\n     }\n ",
                "deletions": 5
            },
            {
                "sha": "7820796d7170365642f97833ae38d0fcfd0a3f3c",
                "filename": "src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/71841bce6f67b8e58b26caaa49b5c0b1f7269534/src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/71841bce6f67b8e58b26caaa49b5c0b1f7269534/src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java?ref=71841bce6f67b8e58b26caaa49b5c0b1f7269534",
                "patch": "@@ -142,7 +142,7 @@ public void testClosingWithUserName()\n     }\n \n     @Test\n-    public void testSetProperties() throws Exception {\n+    public void testSetConnectionProperties() throws Exception {\n         // Set user property to bad value\n         pcds.setUser(\"bad\");\n         // Supply correct value in connection properties\n@@ -162,6 +162,11 @@ public void testSetProperties() throws Exception {\n         assertEquals(\"bar\", pcds.getConnectionProperties().getProperty(\"password\"));\n     }\n     \n+    @Test\n+    public void testSetConnectionPropertiesNull() throws Exception {\n+        pcds.setConnectionProperties(null);\n+    }\n+    \n     @Test\n     public void testSetUserNull() throws Exception {\n         pcds.setUser(\"Alice\");",
                "deletions": 1
            }
        ],
        "patched_files": [
            "DriverAdapterCPDS.java"
        ],
        "unit_tests": [
            "TestDriverAdapterCPDS.java"
        ]
    },
    "commons-dbcp_0f30edc": {
        "repo": "commons-dbcp",
        "message": "[DBCP-555] NPE when creating a SQLExceptionList with a null list.",
        "commit": "https://github.com/apache/commons-dbcp/commit/0f30edc467a2ba03e7f2786e1088df624e0c3cf0",
        "parent": "https://github.com/apache/commons-dbcp/commit/459b4b84b92cb20499b091a6dd70e795c66eb674",
        "bug_id": "commons-dbcp_0f30edc",
        "file": [
            {
                "sha": "276ce01cb80535af7196b8089a35009c79b14146",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/0f30edc467a2ba03e7f2786e1088df624e0c3cf0/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/0f30edc467a2ba03e7f2786e1088df624e0c3cf0/src/changes/changes.xml",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/changes/changes.xml?ref=0f30edc467a2ba03e7f2786e1088df624e0c3cf0",
                "patch": "@@ -60,6 +60,12 @@ The <action> type attribute can be add,update,fix,remove.\n      -->\n \n   <body>\n+    <release version=\"2.7.1\" date=\"2019-MM-DD\" description=\"This is a minor release, including bug fixes and enhancements.\">\n+      <!-- fix -->\n+      <action dev=\"ggregory\" type=\"fix\" issue=\"DBCP-555\" due-to=\"Gary Gregory\">\n+        NPE when creating a SQLExceptionList with a null list.\n+      </action>\n+    </release>\n     <release version=\"2.7.0\" date=\"2019-07-31\" description=\"This is a minor release, including bug fixes and enhancements.\">\n       <!-- add -->\n       <action dev=\"jleroux\" type=\"add\" issue=\"DBCP-539\" due-to=\"Jacques Le Roux\">",
                "deletions": 0
            },
            {
                "sha": "e90360847df119aefc84b5ab222985cccb1ad9cf",
                "filename": "src/main/java/org/apache/commons/dbcp2/SQLExceptionList.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/0f30edc467a2ba03e7f2786e1088df624e0c3cf0/src/main/java/org/apache/commons/dbcp2/SQLExceptionList.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/0f30edc467a2ba03e7f2786e1088df624e0c3cf0/src/main/java/org/apache/commons/dbcp2/SQLExceptionList.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/SQLExceptionList.java?ref=0f30edc467a2ba03e7f2786e1088df624e0c3cf0",
                "patch": "@@ -40,13 +40,14 @@\n      * @param causeList a list of cause exceptions.\n      */\n     public SQLExceptionList(List<? extends Throwable> causeList) {\n-        super(String.format(\"%,d exceptions: %s\", causeList.size(), causeList), causeList.get(0));\n+        super(String.format(\"%,d exceptions: %s\", causeList == null ? 0 : causeList.size(), causeList),\n+                causeList == null ? null : causeList.get(0));\n         this.causeList = causeList;\n     }\n \n     /**\n      * Gets the cause list.\n-     * \n+     *\n      * @return The list of causes.\n      */\n     public List<? extends Throwable> getCauseList() {",
                "deletions": 2
            },
            {
                "sha": "9a5607b83ba7c6f69a9e66f73d4aee4a9d675625",
                "filename": "src/test/java/org/apache/commons/dbcp2/TestSQLExceptionList.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/0f30edc467a2ba03e7f2786e1088df624e0c3cf0/src/test/java/org/apache/commons/dbcp2/TestSQLExceptionList.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/0f30edc467a2ba03e7f2786e1088df624e0c3cf0/src/test/java/org/apache/commons/dbcp2/TestSQLExceptionList.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/test/java/org/apache/commons/dbcp2/TestSQLExceptionList.java?ref=0f30edc467a2ba03e7f2786e1088df624e0c3cf0",
                "patch": "@@ -35,4 +35,11 @@ public void testCause() {\n         Assertions.assertEquals(list, sqlExceptionList.getCauseList());\n         sqlExceptionList.printStackTrace();\n     }\n+\n+    @Test\n+    public void testNullCause() {\n+        final SQLExceptionList sqlExceptionList = new SQLExceptionList(null);\n+        Assertions.assertNull(sqlExceptionList.getCause());\n+        Assertions.assertNull(sqlExceptionList.getCauseList());\n+    }\n }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "SQLExceptionList.java"
        ],
        "unit_tests": [
            "TestSQLExceptionList.java"
        ]
    },
    "commons-dbcp_624cdb1": {
        "repo": "commons-dbcp",
        "message": "[DBCP-486] DriverAdapterCPDS.setUser(null) and setPassword(null) throw\nNullPointerExceptions when connection properties are set.",
        "commit": "https://github.com/apache/commons-dbcp/commit/624cdb14f819ec4ce5a5c02df0293f317cf9737a",
        "parent": "https://github.com/apache/commons-dbcp/commit/b0bb65029d1e3dcf57d8a0a56e4ca7cccbd18db4",
        "bug_id": "commons-dbcp_624cdb1",
        "file": [
            {
                "sha": "8f69ffbed1f2ef07a1c81a2c6adbe8a322cf5e94",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/624cdb14f819ec4ce5a5c02df0293f317cf9737a/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/624cdb14f819ec4ce5a5c02df0293f317cf9737a/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/changes/changes.xml?ref=624cdb14f819ec4ce5a5c02df0293f317cf9737a",
                "patch": "@@ -67,6 +67,9 @@ The <action> type attribute can be add,update,fix,remove.\n       <action dev=\"ggregory\" type=\"update\" issue=\"DBCP-483\">\n         Make constant public: org.apache.commons.dbcp2.PoolingDriver.URL_PREFIX.\n       </action>\n+      <action dev=\"ggregory\" type=\"update\" issue=\"DBCP-486\" due-to=\"Gary Gregory\">\n+        DriverAdapterCPDS.setUser(null) and setPassword(null) throw NullPointerExceptions when connection properties are set.\n+      </action>\n     </release>\n     <release version=\"2.2.0\" date=\"2017-12-DD\" description=\"This is a minor release, including bug fixes and enhancements.\">\n       <action dev=\"ggregory\" type=\"fix\" issue=\"DBCP-481\" due-to=\"Gary Gregory\">",
                "deletions": 0
            },
            {
                "sha": "bf7d960147381885a69572beaa401dc3c625e043",
                "filename": "src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/624cdb14f819ec4ce5a5c02df0293f317cf9737a/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/624cdb14f819ec4ce5a5c02df0293f317cf9737a/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "status": "modified",
                "changes": 38,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java?ref=624cdb14f819ec4ce5a5c02df0293f317cf9737a",
                "patch": "@@ -94,6 +94,12 @@\n     implements ConnectionPoolDataSource, Referenceable, Serializable,\n                ObjectFactory {\n \n+    private static final String KEY_USER = \"user\";\n+\n+\n+    private static final String KEY_PASSWORD = \"password\";\n+\n+\n     private static final long serialVersionUID = -4820523787212147844L;\n \n \n@@ -171,8 +177,8 @@ public PooledConnection getPooledConnection(final String username, final String\n         // exception upon first invocation.\n         try {\n             if (connectionProperties != null) {\n-                connectionProperties.put(\"user\", username);\n-                connectionProperties.put(\"password\", pass);\n+                connectionProperties.put(KEY_USER, username);\n+                connectionProperties.put(KEY_PASSWORD, pass);\n                 pci = new PooledConnectionImpl(DriverManager.getConnection(\n                         getUrl(), connectionProperties));\n             } else {\n@@ -245,8 +251,8 @@ public Reference getReference() throws NamingException {\n         ref.add(new StringRefAddr(\"driver\", getDriver()));\n         ref.add(new StringRefAddr(\"loginTimeout\",\n                                   String.valueOf(getLoginTimeout())));\n-        ref.add(new StringRefAddr(\"password\", getPassword()));\n-        ref.add(new StringRefAddr(\"user\", getUser()));\n+        ref.add(new StringRefAddr(KEY_PASSWORD, getPassword()));\n+        ref.add(new StringRefAddr(KEY_USER, getUser()));\n         ref.add(new StringRefAddr(\"url\", getUrl()));\n \n         ref.add(new StringRefAddr(\"poolPreparedStatements\",\n@@ -295,11 +301,11 @@ public Object getObjectInstance(final Object refObj, final Name name,\n                 if (ra != null && ra.getContent() != null) {\n                     setUrl(ra.getContent().toString());\n                 }\n-                ra = ref.get(\"user\");\n+                ra = ref.get(KEY_USER);\n                 if (ra != null && ra.getContent() != null) {\n                     setUser(ra.getContent().toString());\n                 }\n-                ra = ref.get(\"password\");\n+                ra = ref.get(KEY_PASSWORD);\n                 if (ra != null && ra.getContent() != null) {\n                     setPassword(ra.getContent().toString());\n                 }\n@@ -389,11 +395,11 @@ public Properties getConnectionProperties() {\n     public void setConnectionProperties(final Properties props) {\n         assertInitializationAllowed();\n         connectionProperties = props;\n-        if (connectionProperties.containsKey(\"user\")) {\n-            setUser(connectionProperties.getProperty(\"user\"));\n+        if (connectionProperties.containsKey(KEY_USER)) {\n+            setUser(connectionProperties.getProperty(KEY_USER));\n         }\n-        if (connectionProperties.containsKey(\"password\")) {\n-            setPassword(connectionProperties.getProperty(\"password\"));\n+        if (connectionProperties.containsKey(KEY_PASSWORD)) {\n+            setPassword(connectionProperties.getProperty(KEY_PASSWORD));\n         }\n     }\n \n@@ -437,7 +443,11 @@ public void setPassword(final String v) {\n         assertInitializationAllowed();\n         this.password = v;\n         if (connectionProperties != null) {\n-            connectionProperties.setProperty(\"password\", v);\n+            if (v == null) {\n+                connectionProperties.remove(KEY_PASSWORD);\n+            } else {\n+                connectionProperties.setProperty(KEY_PASSWORD, v);\n+            }\n         }\n     }\n \n@@ -476,7 +486,11 @@ public void setUser(final String v) {\n         assertInitializationAllowed();\n         this.user = v;\n         if (connectionProperties != null) {\n-            connectionProperties.setProperty(\"user\", v);\n+            if (v == null) {\n+                connectionProperties.remove(KEY_USER);\n+            } else {\n+                connectionProperties.setProperty(KEY_USER, v);\n+            }\n         }\n     }\n ",
                "deletions": 12
            },
            {
                "sha": "52e6729637848655d107f2063b87d4d057bfe742",
                "filename": "src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/624cdb14f819ec4ce5a5c02df0293f317cf9737a/src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/624cdb14f819ec4ce5a5c02df0293f317cf9737a/src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java?ref=624cdb14f819ec4ce5a5c02df0293f317cf9737a",
                "patch": "@@ -170,6 +170,15 @@ public void testSetUserNull() throws Exception {\n         assertEquals(null, pcds.getUser());\n     }\n     \n+    @Test\n+    public void testSetUserNullWithConnectionProperties() throws Exception {\n+        pcds.setConnectionProperties(new Properties());\n+        pcds.setUser(\"Alice\");\n+        assertEquals(\"Alice\", pcds.getUser());\n+        pcds.setUser(null);\n+        assertEquals(null, pcds.getUser());\n+    }\n+    \n     @Test\n     public void testSetPasswordNull() throws Exception {\n         pcds.setPassword(\"Secret\");\n@@ -178,6 +187,15 @@ public void testSetPasswordNull() throws Exception {\n         assertEquals(null, pcds.getPassword());\n     }\n     \n+    @Test\n+    public void testSetPasswordNullWithConnectionProperties() throws Exception {\n+        pcds.setConnectionProperties(new Properties());\n+        pcds.setPassword(\"Secret\");\n+        assertEquals(\"Secret\", pcds.getPassword());\n+        pcds.setPassword(null);\n+        assertEquals(null, pcds.getPassword());\n+    }\n+    \n     /**\n      * JIRA: DBCP-442\n      */",
                "deletions": 0
            }
        ],
        "patched_files": [
            "DriverAdapterCPDS.java"
        ],
        "unit_tests": [
            "TestDriverAdapterCPDS.java"
        ]
    },
    "commons-dbcp_9ae844d": {
        "repo": "commons-dbcp",
        "message": "Added null check to DelegatingConnection#closeInternal. Prior to this change, NPEs were being generated by ManagedConnection#close.\n\nJIRA: DBCP-438\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/trunk@1691861 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-dbcp/commit/9ae844dbf476eba54ac52d9842cba0505c4c6666",
        "parent": "https://github.com/apache/commons-dbcp/commit/e1f732a6dc9ad194ca6c89bab45ad2d54c963a1b",
        "bug_id": "commons-dbcp_9ae844d",
        "file": [
            {
                "sha": "67e81f03f0d67eb42edfaf7414e50cd8e663079e",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/9ae844dbf476eba54ac52d9842cba0505c4c6666/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/9ae844dbf476eba54ac52d9842cba0505c4c6666/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/changes/changes.xml?ref=9ae844dbf476eba54ac52d9842cba0505c4c6666",
                "patch": "@@ -61,6 +61,9 @@ The <action> type attribute can be add,update,fix,remove.\n \n   <body>\n     <release version=\"2.1.1\" date=\"TBD\" description=\"Bug fixes.\">\n+      <action issue=\"DBCP-438\" dev=\"psteitz\" type=\"fix\" due-to=\"Raihan Kibria\">\n+        Nested connections in a transaction (local) throws null pointer. \n+      </action>\n       <action issue=\"DBCP-437\" dev=\"psteitz\" type=\"fix\">\n         BasicDataSource does not set disconnectionSql properties on its PoolableConnectionFactory.\n       </action>",
                "deletions": 0
            },
            {
                "sha": "00657379b6293dc164901414eadba4a752052b75",
                "filename": "src/main/java/org/apache/commons/dbcp2/DelegatingConnection.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/9ae844dbf476eba54ac52d9842cba0505c4c6666/src/main/java/org/apache/commons/dbcp2/DelegatingConnection.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/9ae844dbf476eba54ac52d9842cba0505c4c6666/src/main/java/org/apache/commons/dbcp2/DelegatingConnection.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/DelegatingConnection.java?ref=9ae844dbf476eba54ac52d9842cba0505c4c6666",
                "patch": "@@ -231,9 +231,13 @@ protected final void closeInternal() throws SQLException {\n         try {\n             passivate();\n         } finally {\n-            try {\n-                _conn.close();\n-            } finally {\n+            if (_conn != null) {\n+                try {\n+                    _conn.close();\n+                } finally {\n+                    _closed = true;\n+                }\n+            } else {\n                 _closed = true;\n             }\n         }",
                "deletions": 3
            },
            {
                "sha": "acae0bf51553598cddd8bfa1822406eb207e52c1",
                "filename": "src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSource.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/9ae844dbf476eba54ac52d9842cba0505c4c6666/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSource.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/9ae844dbf476eba54ac52d9842cba0505c4c6666/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSource.java",
                "status": "modified",
                "changes": 16,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSource.java?ref=9ae844dbf476eba54ac52d9842cba0505c4c6666",
                "patch": "@@ -242,4 +242,20 @@ public void testManagedConnectionEqualInnermost() throws Exception {\n         assertTrue(con2.innermostDelegateEquals(inner));\n         assertFalse(con.equals(con2));\n     }\n+    \n+    @Test\n+    public void testNestedConnections() throws Exception {\n+        transactionManager.begin();\n+        \n+        Connection c1 = null;\n+        Connection c2 = null;\n+        \n+        c1 = newConnection();\n+        c2 = newConnection();\n+        \n+        transactionManager.commit();\n+        \n+        c1.close();\n+        c2.close();\n+    }   \n }",
                "deletions": 0
            },
            {
                "sha": "d6726014a8277f358d1669e25647edeb1dc711f6",
                "filename": "src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/9ae844dbf476eba54ac52d9842cba0505c4c6666/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/9ae844dbf476eba54ac52d9842cba0505c4c6666/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java?ref=9ae844dbf476eba54ac52d9842cba0505c4c6666",
                "patch": "@@ -70,6 +70,12 @@ public void testManagedConnectionEqualsFail() throws Exception {\n         // two connections to the same datasource are supposed to share\n         // a single connection\n     }\n+    \n+    @Override\n+    @Test\n+    public void testNestedConnections() {\n+        // Not supported\n+    }\n \n     @Override\n     @Test",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ManagedDataSource.java",
            "DelegatingConnection.java"
        ],
        "unit_tests": [
            "TestDelegatingConnection.java",
            "TestManagedDataSourceInTx.java",
            "TestManagedDataSource.java"
        ]
    },
    "commons-dbcp_8644dba": {
        "repo": "commons-dbcp",
        "message": "Eliminated potential sources of NullPointerExceptions in PoolingConnection.\nJIRA: DBCP-241\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/trunk@578597 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-dbcp/commit/8644dbaa9e1203bd9eb6e167cf7aea96667f694c",
        "parent": "https://github.com/apache/commons-dbcp/commit/9cc00458fa13b6b7c998dca14048e99c41f79e8e",
        "bug_id": "commons-dbcp_8644dba",
        "file": [
            {
                "sha": "d7df32cb4a58f58eedb6a28792e3d34dd8103e43",
                "filename": "pom.xml",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/8644dbaa9e1203bd9eb6e167cf7aea96667f694c/pom.xml",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/8644dbaa9e1203bd9eb6e167cf7aea96667f694c/pom.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/pom.xml?ref=8644dbaa9e1203bd9eb6e167cf7aea96667f694c",
                "patch": "@@ -241,6 +241,7 @@\n                 <include>org/apache/commons/dbcp/TestBasicDataSourceFactory.java</include>\n                 <include>org/apache/commons/dbcp/TestBasicDataSource.java</include>\n                 <include>org/apache/commons/dbcp/TestAbandonedBasicDataSource.java</include>\n+                <include>org/apache/commons/dbcp/TestPStmtPooling.java</include>\n                 <include>org/apache/commons/dbcp/TestPStmtPoolingBasicDataSource.java</include>\n                 <include>org/apache/commons/dbcp/TestPoolingDataSource.java</include>\n                 <include>org/apache/commons/dbcp/TestJndi.java</include>",
                "deletions": 0
            },
            {
                "sha": "3d183c213a02dabe30e4b11b5b9d81d8322735b4",
                "filename": "src/java/org/apache/commons/dbcp/DelegatingConnection.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/8644dbaa9e1203bd9eb6e167cf7aea96667f694c/src/java/org/apache/commons/dbcp/DelegatingConnection.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/8644dbaa9e1203bd9eb6e167cf7aea96667f694c/src/java/org/apache/commons/dbcp/DelegatingConnection.java",
                "status": "modified",
                "changes": 9,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/java/org/apache/commons/dbcp/DelegatingConnection.java?ref=8644dbaa9e1203bd9eb6e167cf7aea96667f694c",
                "patch": "@@ -358,8 +358,13 @@ public boolean isClosed() throws SQLException {\n \n     protected void checkOpen() throws SQLException {\n         if(_closed) {\n-            throw new SQLException\n-                (\"Connection \" + _conn + \" is closed.\");\n+            if (null != _conn) {\n+                throw new SQLException\n+                    (\"Connection \" + _conn + \" is closed.\");\n+            } else {\n+                throw new SQLException\n+                    (\"Connection is null.\");\n+            }      \n         }\n     }\n ",
                "deletions": 2
            },
            {
                "sha": "15ee2ce703310fb6382d41079b267484655e663d",
                "filename": "src/java/org/apache/commons/dbcp/PoolingConnection.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/8644dbaa9e1203bd9eb6e167cf7aea96667f694c/src/java/org/apache/commons/dbcp/PoolingConnection.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/8644dbaa9e1203bd9eb6e167cf7aea96667f694c/src/java/org/apache/commons/dbcp/PoolingConnection.java",
                "status": "modified",
                "changes": 14,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/java/org/apache/commons/dbcp/PoolingConnection.java?ref=8644dbaa9e1203bd9eb6e167cf7aea96667f694c",
                "patch": "@@ -88,6 +88,10 @@ public synchronized void close() throws SQLException {\n      * @return a {@link PoolablePreparedStatement}\n      */\n     public PreparedStatement prepareStatement(String sql) throws SQLException {\n+        if (null == _pstmtPool) {\n+            throw new SQLException(\n+                    \"Statement pool is null - closed or invalid PoolingConnection.\");\n+        }\n         try {\n             return(PreparedStatement)(_pstmtPool.borrowObject(createKey(sql)));\n         } catch(NoSuchElementException e) {\n@@ -104,6 +108,10 @@ public PreparedStatement prepareStatement(String sql) throws SQLException {\n      * @return a {@link PoolablePreparedStatement}\n      */\n     public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {\n+        if (null == _pstmtPool) {\n+            throw new SQLException(\n+                    \"Statement pool is null - closed or invalid PoolingConnection.\");\n+        }\n         try {\n             return(PreparedStatement)(_pstmtPool.borrowObject(createKey(sql,resultSetType,resultSetConcurrency)));\n         } catch(NoSuchElementException e) {\n@@ -245,7 +253,11 @@ public void passivateObject(Object key, Object obj) throws Exception {\n     }\n \n     public String toString() {\n-        return \"PoolingConnection: \" + _pstmtPool.toString();\n+        if (_pstmtPool != null ) {\n+            return \"PoolingConnection: \" + _pstmtPool.toString();\n+        } else {\n+            return \"PoolingConnection: null\";\n+        }\n     }\n \n     /**",
                "deletions": 1
            },
            {
                "sha": "2ba7ed1c1c82409bb75d72136dd15167e4b04f32",
                "filename": "src/test/org/apache/commons/dbcp/TestDelegatingConnection.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/8644dbaa9e1203bd9eb6e167cf7aea96667f694c/src/test/org/apache/commons/dbcp/TestDelegatingConnection.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/8644dbaa9e1203bd9eb6e167cf7aea96667f694c/src/test/org/apache/commons/dbcp/TestDelegatingConnection.java",
                "status": "modified",
                "changes": 36,
                "additions": 36,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/test/org/apache/commons/dbcp/TestDelegatingConnection.java?ref=8644dbaa9e1203bd9eb6e167cf7aea96667f694c",
                "patch": "@@ -24,6 +24,8 @@\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.pool.impl.GenericKeyedObjectPool;\n+\n /**\n  * @author Dirk Verbeeck\n  * @version $Revision$ $Date$\n@@ -91,4 +93,38 @@ public void testCheckOpen() throws Exception {\n             // expected\n         }      \n     }\n+    \n+    /**\n+     * Verify fix for DBCP-241\n+     */\n+    public void testCheckOpenNull() throws Exception {\n+        try {\n+            conn.close();\n+            conn.checkOpen();\n+            fail(\"Expecting SQLException\");\n+        } catch (SQLException ex) {\n+            assertTrue(ex.getMessage().endsWith(\"is closed.\"));\n+        }\n+\n+        try {\n+            conn = new DelegatingConnection(null);\n+            conn._closed = true;  \n+            conn.checkOpen();\n+            fail(\"Expecting SQLException\");\n+        } catch (SQLException ex) {\n+            assertTrue(ex.getMessage().endsWith(\"is null.\"));\n+        }\n+\n+        try {\n+            PoolingConnection pc = new PoolingConnection\n+                (delegateConn2, new GenericKeyedObjectPool());\n+            conn = new DelegatingConnection(pc);\n+            pc.close();\n+            conn.close();\n+            conn.prepareStatement(\"\");\n+            fail(\"Expecting SQLException\");\n+        } catch (SQLException ex) {\n+            assertTrue(ex.getMessage().endsWith(\"invalid PoolingConnection.\"));\n+        }   \n+    }\n }",
                "deletions": 0
            },
            {
                "sha": "c80f88ffa9a8b84fcfcaf300f31b6d34f03a755e",
                "filename": "src/test/org/apache/commons/dbcp/TestPStmtPooling.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/8644dbaa9e1203bd9eb6e167cf7aea96667f694c/src/test/org/apache/commons/dbcp/TestPStmtPooling.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/8644dbaa9e1203bd9eb6e167cf7aea96667f694c/src/test/org/apache/commons/dbcp/TestPStmtPooling.java",
                "status": "modified",
                "changes": 31,
                "additions": 31,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/test/org/apache/commons/dbcp/TestPStmtPooling.java?ref=8644dbaa9e1203bd9eb6e167cf7aea96667f694c",
                "patch": "@@ -19,6 +19,7 @@\n \n import java.sql.Connection;\n import java.sql.Statement;\n+import java.sql.SQLException;\n \n import javax.sql.DataSource;\n \n@@ -69,4 +70,34 @@ public void testStmtPool() throws Exception {\n         stmt2.close();\n         assertSame(ustmt1, ustmt2);\n     }\n+    \n+    public void testClosePool() throws Exception {\n+        new TesterDriver();\n+        ConnectionFactory connFactory = new DriverManagerConnectionFactory(\n+                \"jdbc:apache:commons:testdriver\",\"u1\",\"p1\");\n+\n+        ObjectPool connPool = new GenericObjectPool();\n+        KeyedObjectPoolFactory stmtPoolFactory = new GenericKeyedObjectPoolFactory(null);\n+\n+        PoolableConnectionFactory x = new PoolableConnectionFactory(\n+                connFactory, connPool, stmtPoolFactory,\n+                null, false, true);\n+\n+        DataSource ds = new PoolingDataSource(connPool);\n+        ((PoolingDataSource) ds).setAccessToUnderlyingConnectionAllowed(true);\n+\n+        Connection conn = ds.getConnection();\n+        Statement stmt = conn.prepareStatement(\"select 1 from dual\");\n+        \n+        Connection poolableConnection = ((DelegatingConnection) conn).getDelegate();\n+        Connection poolingConnection = \n+            ((DelegatingConnection) poolableConnection).getDelegate();\n+        poolingConnection.close();\n+        try {\n+            stmt = conn.prepareStatement(\"select 1 from dual\");\n+            fail(\"Expecting SQLException\");\n+        } catch (SQLException ex) {\n+            assertTrue(ex.getMessage().endsWith(\"invalid PoolingConnection.\"));\n+        }     \n+    }\n }",
                "deletions": 0
            },
            {
                "sha": "7ca1114e538b34892c3c2c9a04f502d83da61082",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/8644dbaa9e1203bd9eb6e167cf7aea96667f694c/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/8644dbaa9e1203bd9eb6e167cf7aea96667f694c/xdocs/changes.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/xdocs/changes.xml?ref=8644dbaa9e1203bd9eb6e167cf7aea96667f694c",
                "patch": "@@ -88,6 +88,10 @@ The <action> type attribute can be add,update,fix,remove.\n         idle connections are destroyed and the method returns.  As the remaining\n         active connections are closed, they are destroyed.\n       </action>\n+      <action dev=\"psteitz\" type=\"fix\" issue=\"DBCP-241\">\n+        Eliminated potential sources of NullPointerExceptions in \n+        PoolingConnection.\n+      </action>\n     </release>\n     <release version=\"1.2.2\" date=\"2007-04-04\"\n       description=\"This is a maintenance release containing bug fixes",
                "deletions": 0
            }
        ],
        "patched_files": [
            "DelegatingConnection.java",
            "PoolingConnection.java"
        ],
        "unit_tests": [
            "TestDelegatingConnection.java",
            "TestPStmtPooling.java"
        ]
    },
    "commons-dbcp_9c9d749": {
        "repo": "commons-dbcp",
        "message": "assertTrue(var != null) => assertNotNull(var)\n- simplifies code\n- avoids later warnings of possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/trunk@830135 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-dbcp/commit/9c9d749df253d230ce69eb8df31ff9133c81cff1",
        "parent": "https://github.com/apache/commons-dbcp/commit/f09d4029e091ab30a4136a85e0e256d4cc208aef",
        "bug_id": "commons-dbcp_9c9d749",
        "file": [
            {
                "sha": "32d23aac9585182f23ecc50d770f2b4eca325acf",
                "filename": "src/test/org/apache/commons/dbcp/TestBasicDataSource.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/9c9d749df253d230ce69eb8df31ff9133c81cff1/src/test/org/apache/commons/dbcp/TestBasicDataSource.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/9c9d749df253d230ce69eb8df31ff9133c81cff1/src/test/org/apache/commons/dbcp/TestBasicDataSource.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/test/org/apache/commons/dbcp/TestBasicDataSource.java?ref=9c9d749df253d230ce69eb8df31ff9133c81cff1",
                "patch": "@@ -164,7 +164,7 @@ public void testSetProperties() throws Exception {\n     \n     public void testTransactionIsolationBehavior() throws Exception {\n         Connection conn = getConnection();\n-        assertTrue(conn != null);\n+        assertNotNull(conn);\n         assertEquals(Connection.TRANSACTION_READ_COMMITTED, conn.getTransactionIsolation());\n         conn.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);\n         conn.close();",
                "deletions": 1
            },
            {
                "sha": "04d1d679487690126926128f2859ef4b41e98a74",
                "filename": "src/test/org/apache/commons/dbcp/TestConnectionPool.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/9c9d749df253d230ce69eb8df31ff9133c81cff1/src/test/org/apache/commons/dbcp/TestConnectionPool.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/9c9d749df253d230ce69eb8df31ff9133c81cff1/src/test/org/apache/commons/dbcp/TestConnectionPool.java",
                "status": "modified",
                "changes": 56,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/test/org/apache/commons/dbcp/TestConnectionPool.java?ref=9c9d749df253d230ce69eb8df31ff9133c81cff1",
                "patch": "@@ -134,12 +134,12 @@ public void testClearWarnings() throws Exception {\n     public void testIsClosed() throws Exception {\n         for(int i=0;i<getMaxActive();i++) {\n             Connection conn = newConnection();\n-            assertTrue(null != conn);\n+            assertNotNull(conn);\n             assertTrue(!conn.isClosed());\n             PreparedStatement stmt = conn.prepareStatement(\"select * from dual\");\n-            assertTrue(null != stmt);\n+            assertNotNull(stmt);\n             ResultSet rset = stmt.executeQuery();\n-            assertTrue(null != rset);\n+            assertNotNull(rset);\n             assertTrue(rset.next());\n             rset.close();\n             stmt.close();\n@@ -155,7 +155,7 @@ public void testIsClosed() throws Exception {\n     public void testCanCloseConnectionTwice() throws Exception {\n         for (int i = 0; i < getMaxActive(); i++) { // loop to show we *can* close again once we've borrowed it from the pool again\n             Connection conn = newConnection();\n-            assertTrue(null != conn);\n+            assertNotNull(conn);\n             assertTrue(!conn.isClosed());\n             conn.close();\n             assertTrue(conn.isClosed());\n@@ -166,7 +166,7 @@ public void testCanCloseConnectionTwice() throws Exception {\n \n     public void testCanCloseStatementTwice() throws Exception {\n         Connection conn = newConnection();\n-        assertTrue(null != conn);\n+        assertNotNull(conn);\n         assertTrue(!conn.isClosed());\n         for(int i=0;i<2;i++) { // loop to show we *can* close again once we've borrowed it from the pool again\n             Statement stmt = conn.createStatement();\n@@ -184,7 +184,7 @@ public void testCanCloseStatementTwice() throws Exception {\n \n     public void testCanClosePreparedStatementTwice() throws Exception {\n         Connection conn = newConnection();\n-        assertTrue(null != conn);\n+        assertNotNull(conn);\n         assertTrue(!conn.isClosed());\n         for(int i=0;i<2;i++) { // loop to show we *can* close again once we've borrowed it from the pool again\n             PreparedStatement stmt = conn.prepareStatement(\"select * from dual\");\n@@ -202,7 +202,7 @@ public void testCanClosePreparedStatementTwice() throws Exception {\n \n     public void testCanCloseCallableStatementTwice() throws Exception {\n         Connection conn = newConnection();\n-        assertTrue(null != conn);\n+        assertNotNull(conn);\n         assertTrue(!conn.isClosed());\n         for(int i=0;i<2;i++) { // loop to show we *can* close again once we've borrowed it from the pool again\n             PreparedStatement stmt = conn.prepareCall(\"select * from dual\");\n@@ -220,7 +220,7 @@ public void testCanCloseCallableStatementTwice() throws Exception {\n \n     public void testCanCloseResultSetTwice() throws Exception {\n         Connection conn = newConnection();\n-        assertTrue(null != conn);\n+        assertNotNull(conn);\n         assertTrue(!conn.isClosed());\n         for(int i=0;i<2;i++) { // loop to show we *can* close again once we've borrowed it from the pool again\n             PreparedStatement stmt = conn.prepareStatement(\"select * from dual\");\n@@ -315,11 +315,11 @@ protected void assertBackPointers(Connection conn, Statement statement) throws S\n \n     public void testSimple() throws Exception {\n         Connection conn = newConnection();\n-        assertTrue(null != conn);\n+        assertNotNull(conn);\n         PreparedStatement stmt = conn.prepareStatement(\"select * from dual\");\n-        assertTrue(null != stmt);\n+        assertNotNull(stmt);\n         ResultSet rset = stmt.executeQuery();\n-        assertTrue(null != rset);\n+        assertNotNull(rset);\n         assertTrue(rset.next());\n         rset.close();\n         stmt.close();\n@@ -329,11 +329,11 @@ public void testSimple() throws Exception {\n     public void testRepeatedBorrowAndReturn() throws Exception {\n         for(int i=0;i<100;i++) {\n             Connection conn = newConnection();\n-            assertTrue(null != conn);\n+            assertNotNull(conn);\n             PreparedStatement stmt = conn.prepareStatement(\"select * from dual\");\n-            assertTrue(null != stmt);\n+            assertNotNull(stmt);\n             ResultSet rset = stmt.executeQuery();\n-            assertTrue(null != rset);\n+            assertNotNull(rset);\n             assertTrue(rset.next());\n             rset.close();\n             stmt.close();\n@@ -343,21 +343,21 @@ public void testRepeatedBorrowAndReturn() throws Exception {\n \n     public void testSimple2() throws Exception {\n         Connection conn = newConnection();\n-        assertTrue(null != conn);\n+        assertNotNull(conn);\n         {\n             PreparedStatement stmt = conn.prepareStatement(\"select * from dual\");\n-            assertTrue(null != stmt);\n+            assertNotNull(stmt);\n             ResultSet rset = stmt.executeQuery();\n-            assertTrue(null != rset);\n+            assertNotNull(rset);\n             assertTrue(rset.next());\n             rset.close();\n             stmt.close();\n         }\n         {\n             PreparedStatement stmt = conn.prepareStatement(\"select * from dual\");\n-            assertTrue(null != stmt);\n+            assertNotNull(stmt);\n             ResultSet rset = stmt.executeQuery();\n-            assertTrue(null != rset);\n+            assertNotNull(rset);\n             assertTrue(rset.next());\n             rset.close();\n             stmt.close();\n@@ -371,21 +371,21 @@ public void testSimple2() throws Exception {\n         }\n \n         conn = newConnection();\n-        assertTrue(null != conn);\n+        assertNotNull(conn);\n         {\n             PreparedStatement stmt = conn.prepareStatement(\"select * from dual\");\n-            assertTrue(null != stmt);\n+            assertNotNull(stmt);\n             ResultSet rset = stmt.executeQuery();\n-            assertTrue(null != rset);\n+            assertNotNull(rset);\n             assertTrue(rset.next());\n             rset.close();\n             stmt.close();\n         }\n         {\n             PreparedStatement stmt = conn.prepareStatement(\"select * from dual\");\n-            assertTrue(null != stmt);\n+            assertNotNull(stmt);\n             ResultSet rset = stmt.executeQuery();\n-            assertTrue(null != rset);\n+            assertNotNull(rset);\n             assertTrue(rset.next());\n             rset.close();\n             stmt.close();\n@@ -431,7 +431,7 @@ public void testPooling() throws Exception {\n     \n     public void testAutoCommitBehavior() throws Exception {\n         Connection conn = newConnection();\n-        assertTrue(conn != null);\n+        assertNotNull(conn);\n         assertTrue(conn.getAutoCommit());\n         conn.setAutoCommit(false);\n         conn.close();\n@@ -621,12 +621,12 @@ public void run() {\n     public void testPrepareStatementOptions() throws Exception \n     {\n         Connection conn = newConnection();\n-        assertTrue(null != conn);\n+        assertNotNull(conn);\n         PreparedStatement stmt = conn.prepareStatement(\"select * from dual\", \n             ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n-        assertTrue(null != stmt);\n+        assertNotNull(stmt);\n         ResultSet rset = stmt.executeQuery();\n-        assertTrue(null != rset);\n+        assertNotNull(rset);\n         assertTrue(rset.next());\n         \n         assertEquals(ResultSet.TYPE_SCROLL_SENSITIVE, rset.getType());",
                "deletions": 28
            },
            {
                "sha": "bc6aad0d84f185fc9ac24c32236a6f9b303241e6",
                "filename": "src/test/org/apache/commons/dbcp/TestPoolableConnection.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/9c9d749df253d230ce69eb8df31ff9133c81cff1/src/test/org/apache/commons/dbcp/TestPoolableConnection.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/9c9d749df253d230ce69eb8df31ff9133c81cff1/src/test/org/apache/commons/dbcp/TestPoolableConnection.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/test/org/apache/commons/dbcp/TestPoolableConnection.java?ref=9c9d749df253d230ce69eb8df31ff9133c81cff1",
                "patch": "@@ -60,7 +60,7 @@ public void testConnectionPool() {\n             fail(\"Could not fetch Connection from pool: \" + e.getMessage());\n         }\n \n-        assertTrue(\"Connection should be created and should not be null\", c != null);\n+        assertNotNull(\"Connection should be created and should not be null\", c);\n         assertEquals(\"There should be exactly one active object in the pool\", 1, pool.getNumActive());\n \n         // Now return the connection by closing it",
                "deletions": 1
            },
            {
                "sha": "52c7063fa0486e9fd4fa0713fd0c19fc6983c373",
                "filename": "src/test/org/apache/commons/dbcp/cpdsadapter/TestDriverAdapterCPDS.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/9c9d749df253d230ce69eb8df31ff9133c81cff1/src/test/org/apache/commons/dbcp/cpdsadapter/TestDriverAdapterCPDS.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/9c9d749df253d230ce69eb8df31ff9133c81cff1/src/test/org/apache/commons/dbcp/cpdsadapter/TestDriverAdapterCPDS.java",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/test/org/apache/commons/dbcp/cpdsadapter/TestDriverAdapterCPDS.java?ref=9c9d749df253d230ce69eb8df31ff9133c81cff1",
                "patch": "@@ -88,11 +88,11 @@ public void testIncorrectPassword() throws Exception\n \n     public void testSimple() throws Exception {\n         Connection conn = pcds.getPooledConnection().getConnection();\n-        assertTrue(null != conn);\n+        assertNotNull(conn);\n         PreparedStatement stmt = conn.prepareStatement(\"select * from dual\");\n-        assertTrue(null != stmt);\n+        assertNotNull(stmt);\n         ResultSet rset = stmt.executeQuery();\n-        assertTrue(null != rset);\n+        assertNotNull(rset);\n         assertTrue(rset.next());\n         rset.close();\n         stmt.close();\n@@ -101,11 +101,11 @@ public void testSimple() throws Exception {\n \n     public void testSimpleWithUsername() throws Exception {\n         Connection conn = pcds.getPooledConnection(\"u1\", \"p1\").getConnection();\n-        assertTrue(null != conn);\n+        assertNotNull(conn);\n         PreparedStatement stmt = conn.prepareStatement(\"select * from dual\");\n-        assertTrue(null != stmt);\n+        assertNotNull(stmt);\n         ResultSet rset = stmt.executeQuery();\n-        assertTrue(null != rset);\n+        assertNotNull(rset);\n         assertTrue(rset.next());\n         rset.close();\n         stmt.close();",
                "deletions": 6
            },
            {
                "sha": "15ad6a405516bf26acb4332cb1bd7e30bd4e7ea9",
                "filename": "src/test/org/apache/commons/dbcp/datasources/TestPerUserPoolDataSource.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/9c9d749df253d230ce69eb8df31ff9133c81cff1/src/test/org/apache/commons/dbcp/datasources/TestPerUserPoolDataSource.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/9c9d749df253d230ce69eb8df31ff9133c81cff1/src/test/org/apache/commons/dbcp/datasources/TestPerUserPoolDataSource.java",
                "status": "modified",
                "changes": 40,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/test/org/apache/commons/dbcp/datasources/TestPerUserPoolDataSource.java?ref=9c9d749df253d230ce69eb8df31ff9133c81cff1",
                "patch": "@@ -119,11 +119,11 @@ public void testIncorrectPassword() throws Exception\n     public void testSimple() throws Exception \n     {\n         Connection conn = ds.getConnection();\n-        assertTrue(null != conn);\n+        assertNotNull(conn);\n         PreparedStatement stmt = conn.prepareStatement(\"select * from dual\");\n-        assertTrue(null != stmt);\n+        assertNotNull(stmt);\n         ResultSet rset = stmt.executeQuery();\n-        assertTrue(null != rset);\n+        assertNotNull(rset);\n         assertTrue(rset.next());\n         rset.close();\n         stmt.close();\n@@ -133,11 +133,11 @@ public void testSimple() throws Exception\n     public void testSimpleWithUsername() throws Exception \n     {\n         Connection conn = ds.getConnection(\"u1\", \"p1\");\n-        assertTrue(null != conn);\n+        assertNotNull(conn);\n         PreparedStatement stmt = conn.prepareStatement(\"select * from dual\");\n-        assertTrue(null != stmt);\n+        assertNotNull(stmt);\n         ResultSet rset = stmt.executeQuery();\n-        assertTrue(null != rset);\n+        assertNotNull(rset);\n         assertTrue(rset.next());\n         rset.close();\n         stmt.close();\n@@ -180,21 +180,21 @@ public void testSimple2()\n         throws Exception \n     {\n         Connection conn = ds.getConnection();\n-        assertTrue(null != conn);\n+        assertNotNull(conn);\n \n         PreparedStatement stmt = \n             conn.prepareStatement(\"select * from dual\");\n-        assertTrue(null != stmt);\n+        assertNotNull(stmt);\n         ResultSet rset = stmt.executeQuery();\n-        assertTrue(null != rset);\n+        assertNotNull(rset);\n         assertTrue(rset.next());\n         rset.close();\n         stmt.close();\n         \n         stmt = conn.prepareStatement(\"select * from dual\");\n-        assertTrue(null != stmt);\n+        assertNotNull(stmt);\n         rset = stmt.executeQuery();\n-        assertTrue(null != rset);\n+        assertNotNull(rset);\n         assertTrue(rset.next());\n         rset.close();\n         stmt.close();\n@@ -211,20 +211,20 @@ public void testSimple2()\n         }\n \n         conn = ds.getConnection();\n-        assertTrue(null != conn);\n+        assertNotNull(conn);\n \n         stmt = conn.prepareStatement(\"select * from dual\");\n-        assertTrue(null != stmt);\n+        assertNotNull(stmt);\n         rset = stmt.executeQuery();\n-        assertTrue(null != rset);\n+        assertNotNull(rset);\n         assertTrue(rset.next());\n         rset.close();\n         stmt.close();\n \n         stmt = conn.prepareStatement(\"select * from dual\");\n-        assertTrue(null != stmt);\n+        assertNotNull(stmt);\n         rset = stmt.executeQuery();\n-        assertTrue(null != rset);\n+        assertNotNull(rset);\n         assertTrue(rset.next());\n         rset.close();\n         stmt.close();\n@@ -441,12 +441,12 @@ public void run() {\n                     state = \"Getting Connection\";\n                     conn = getConnection();\n                     state = \"Using Connection\";\n-                    assertTrue(null != conn);\n+                    assertNotNull(conn);\n                     PreparedStatement stmt =\n                         conn.prepareStatement(\"select * from dual\");\n-                    assertTrue(null != stmt);\n+                    assertNotNull(stmt);\n                     ResultSet rset = stmt.executeQuery();\n-                    assertTrue(null != rset);\n+                    assertNotNull(rset);\n                     assertTrue(rset.next());\n                     state = \"Holding Connection\";\n                     Thread.sleep(connHoldTime);\n@@ -473,7 +473,7 @@ public String reportState() {\n \n     public void testTransactionIsolationBehavior() throws Exception {\n         Connection conn = getConnection();\n-        assertTrue(conn != null);\n+        assertNotNull(conn);\n         assertEquals(Connection.TRANSACTION_READ_COMMITTED, \n                      conn.getTransactionIsolation());\n         conn.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);",
                "deletions": 20
            },
            {
                "sha": "caaf6ad5b387c6836ed0a205049bfa3c74676c50",
                "filename": "src/test/org/apache/commons/dbcp/datasources/TestSharedPoolDataSource.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/9c9d749df253d230ce69eb8df31ff9133c81cff1/src/test/org/apache/commons/dbcp/datasources/TestSharedPoolDataSource.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/9c9d749df253d230ce69eb8df31ff9133c81cff1/src/test/org/apache/commons/dbcp/datasources/TestSharedPoolDataSource.java",
                "status": "modified",
                "changes": 64,
                "additions": 32,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/test/org/apache/commons/dbcp/datasources/TestSharedPoolDataSource.java?ref=9c9d749df253d230ce69eb8df31ff9133c81cff1",
                "patch": "@@ -122,11 +122,11 @@ public void testIncorrectPassword() throws Exception\n     public void testSimple() throws Exception \n     {\n         Connection conn = ds.getConnection();\n-        assertTrue(null != conn);\n+        assertNotNull(conn);\n         PreparedStatement stmt = conn.prepareStatement(\"select * from dual\");\n-        assertTrue(null != stmt);\n+        assertNotNull(stmt);\n         ResultSet rset = stmt.executeQuery();\n-        assertTrue(null != rset);\n+        assertNotNull(rset);\n         assertTrue(rset.next());\n         rset.close();\n         stmt.close();\n@@ -136,11 +136,11 @@ public void testSimple() throws Exception\n     public void testSimpleWithUsername() throws Exception \n     {\n         Connection conn = ds.getConnection(\"u1\", \"p1\");\n-        assertTrue(null != conn);\n+        assertNotNull(conn);\n         PreparedStatement stmt = conn.prepareStatement(\"select * from dual\");\n-        assertTrue(null != stmt);\n+        assertNotNull(stmt);\n         ResultSet rset = stmt.executeQuery();\n-        assertTrue(null != rset);\n+        assertNotNull(rset);\n         assertTrue(rset.next());\n         rset.close();\n         stmt.close();\n@@ -183,21 +183,21 @@ public void testSimple2()\n         throws Exception \n     {\n         Connection conn = ds.getConnection();\n-        assertTrue(null != conn);\n+        assertNotNull(conn);\n \n         PreparedStatement stmt = \n             conn.prepareStatement(\"select * from dual\");\n-        assertTrue(null != stmt);\n+        assertNotNull(stmt);\n         ResultSet rset = stmt.executeQuery();\n-        assertTrue(null != rset);\n+        assertNotNull(rset);\n         assertTrue(rset.next());\n         rset.close();\n         stmt.close();\n         \n         stmt = conn.prepareStatement(\"select * from dual\");\n-        assertTrue(null != stmt);\n+        assertNotNull(stmt);\n         rset = stmt.executeQuery();\n-        assertTrue(null != rset);\n+        assertNotNull(rset);\n         assertTrue(rset.next());\n         rset.close();\n         stmt.close();\n@@ -214,20 +214,20 @@ public void testSimple2()\n         }\n \n         conn = ds.getConnection();\n-        assertTrue(null != conn);\n+        assertNotNull(conn);\n \n         stmt = conn.prepareStatement(\"select * from dual\");\n-        assertTrue(null != stmt);\n+        assertNotNull(stmt);\n         rset = stmt.executeQuery();\n-        assertTrue(null != rset);\n+        assertNotNull(rset);\n         assertTrue(rset.next());\n         rset.close();\n         stmt.close();\n \n         stmt = conn.prepareStatement(\"select * from dual\");\n-        assertTrue(null != stmt);\n+        assertNotNull(stmt);\n         rset = stmt.executeQuery();\n-        assertTrue(null != rset);\n+        assertNotNull(rset);\n         assertTrue(rset.next());\n         rset.close();\n         stmt.close();\n@@ -444,12 +444,12 @@ public void run() {\n                     state = \"Getting Connection\";\n                     conn = getConnection();\n                     state = \"Using Connection\";\n-                    assertTrue(null != conn);\n+                    assertNotNull(conn);\n                     PreparedStatement stmt =\n                         conn.prepareStatement(\"select * from dual\");\n-                    assertTrue(null != stmt);\n+                    assertNotNull(stmt);\n                     ResultSet rset = stmt.executeQuery();\n-                    assertTrue(null != rset);\n+                    assertNotNull(rset);\n                     assertTrue(rset.next());\n                     state = \"Holding Connection\";\n                     Thread.sleep(connHoldTime);\n@@ -486,7 +486,7 @@ public String reportState() {\n \n     public void testTransactionIsolationBehavior() throws Exception {\n         Connection conn = getConnection();\n-        assertTrue(conn != null);\n+        assertNotNull(conn);\n         assertEquals(Connection.TRANSACTION_READ_COMMITTED, \n                      conn.getTransactionIsolation());\n         conn.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);\n@@ -510,11 +510,11 @@ public void testPoolPrepareStatement() throws Exception\n         pcds.setPoolPreparedStatements(true);\n \n         Connection conn = ds.getConnection();\n-        assertTrue(null != conn);\n+        assertNotNull(conn);\n         PreparedStatement stmt = conn.prepareStatement(\"select * from dual\");\n-        assertTrue(null != stmt);\n+        assertNotNull(stmt);\n         ResultSet rset = stmt.executeQuery();\n-        assertTrue(null != rset);\n+        assertNotNull(rset);\n         assertTrue(rset.next());\n         rset.close();\n         stmt.close();\n@@ -585,22 +585,22 @@ private void doTestPoolPreparedStatements(PrepareStatementCallback callBack)\n         PreparedStatement stmt = null;\n         ResultSet rset = null;\n \n-        assertTrue(null != conn);\n+        assertNotNull(conn);\n \n         stmt = callBack.getPreparedStatement();\n-        assertTrue(null != stmt);\n+        assertNotNull(stmt);\n         long l1HashCode = stmt.hashCode();\n         rset = stmt.executeQuery();\n-        assertTrue(null != rset);\n+        assertNotNull(rset);\n         assertTrue(rset.next());\n         rset.close();\n         stmt.close();\n \n         stmt = callBack.getPreparedStatement();\n-        assertTrue(null != stmt);\n+        assertNotNull(stmt);\n         long l2HashCode = stmt.hashCode();\n         rset = stmt.executeQuery();\n-        assertTrue(null != rset);\n+        assertNotNull(rset);\n         assertTrue(rset.next());\n         rset.close();\n         stmt.close();\n@@ -614,19 +614,19 @@ private void doTestPoolPreparedStatements(PrepareStatementCallback callBack)\n         callBack.setConnection(conn);\n \n         stmt = callBack.getPreparedStatement();\n-        assertTrue(null != stmt);\n+        assertNotNull(stmt);\n         long l3HashCode = stmt.hashCode();\n         rset = stmt.executeQuery();\n-        assertTrue(null != rset);\n+        assertNotNull(rset);\n         assertTrue(rset.next());\n         rset.close();\n         stmt.close();\n \n         stmt = callBack.getPreparedStatement();\n-        assertTrue(null != stmt);\n+        assertNotNull(stmt);\n         long l4HashCode = stmt.hashCode();\n         rset = stmt.executeQuery();\n-        assertTrue(null != rset);\n+        assertNotNull(rset);\n         assertTrue(rset.next());\n         rset.close();\n         stmt.close();",
                "deletions": 32
            },
            {
                "sha": "3a9b4c38a4e6fcc0b3747345f88ad9960fa03082",
                "filename": "src/test/org/apache/commons/dbcp/managed/TestManagedDataSourceInTx.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/9c9d749df253d230ce69eb8df31ff9133c81cff1/src/test/org/apache/commons/dbcp/managed/TestManagedDataSourceInTx.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/9c9d749df253d230ce69eb8df31ff9133c81cff1/src/test/org/apache/commons/dbcp/managed/TestManagedDataSourceInTx.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/test/org/apache/commons/dbcp/managed/TestManagedDataSourceInTx.java?ref=9c9d749df253d230ce69eb8df31ff9133c81cff1",
                "patch": "@@ -127,7 +127,7 @@ public void testMaxActive() throws Exception {\n     public void testClearWarnings() throws Exception {\n         // open a connection\n         Connection connection = newConnection();\n-        assertTrue(connection != null);\n+        assertNotNull(connection);\n \n         // generate SQLWarning on connection\n         connection.prepareCall(\"warning\");",
                "deletions": 1
            }
        ],
        "patched_files": [
            "PoolableConnection.java",
            "PerUserPoolDataSource.java",
            "DriverAdapterCPDS.java",
            "SharedPoolDataSource.java",
            "BasicDataSource.java"
        ],
        "unit_tests": [
            "TestPoolableConnection.java",
            "TestSharedPoolDataSource.java",
            "TestBasicDataSource.java",
            "TestConnectionPool.java",
            "TestDriverAdapterCPDS.java",
            "TestPerUserPoolDataSource.java",
            "TestManagedDataSourceInTx.java"
        ]
    },
    "commons-dbcp_982141d": {
        "repo": "commons-dbcp",
        "message": "Replace null checks and throws of NullPointerException with Java's\njava.util.Objects.requireNonNull(T, String).",
        "commit": "https://github.com/apache/commons-dbcp/commit/982141d68997d48524ac4f0b9616f06ff5cfbebb",
        "parent": "https://github.com/apache/commons-dbcp/commit/efedfb04fc0756603de3763b10110beebed8b9ba",
        "bug_id": "commons-dbcp_982141d",
        "file": [
            {
                "sha": "563cd7ae2f5e8e9efc3415e27da96ce850aab98a",
                "filename": "src/main/java/org/apache/commons/dbcp2/BasicDataSource.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/982141d68997d48524ac4f0b9616f06ff5cfbebb/src/main/java/org/apache/commons/dbcp2/BasicDataSource.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/982141d68997d48524ac4f0b9616f06ff5cfbebb/src/main/java/org/apache/commons/dbcp2/BasicDataSource.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/BasicDataSource.java?ref=982141d68997d48524ac4f0b9616f06ff5cfbebb",
                "patch": "@@ -32,6 +32,7 @@\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Properties;\n import java.util.Set;\n import java.util.logging.Logger;\n@@ -1917,10 +1918,7 @@ public void removeConnectionProperty(final String name) {\n      *            the connection properties used to create new connections\n      */\n     public void setConnectionProperties(final String connectionProperties) {\n-        if (connectionProperties == null) {\n-            throw new NullPointerException(\"connectionProperties is null\");\n-        }\n-\n+        Objects.requireNonNull(connectionProperties, \"connectionProperties is null\");\n         final String[] entries = connectionProperties.split(\";\");\n         final Properties properties = new Properties();\n         for (final String entry : entries) {",
                "deletions": 4
            },
            {
                "sha": "9c527ec8c2361cb021f918a00804f27ace479f3e",
                "filename": "src/main/java/org/apache/commons/dbcp2/PoolableConnectionFactory.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/982141d68997d48524ac4f0b9616f06ff5cfbebb/src/main/java/org/apache/commons/dbcp2/PoolableConnectionFactory.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/982141d68997d48524ac4f0b9616f06ff5cfbebb/src/main/java/org/apache/commons/dbcp2/PoolableConnectionFactory.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/PoolableConnectionFactory.java?ref=982141d68997d48524ac4f0b9616f06ff5cfbebb",
                "patch": "@@ -21,6 +21,7 @@\n import java.sql.SQLException;\n import java.sql.Statement;\n import java.util.Collection;\n+import java.util.Objects;\n import java.util.concurrent.atomic.AtomicLong;\n \n import javax.management.ObjectName;\n@@ -323,10 +324,7 @@ protected void initializeConnection(final Connection conn) throws SQLException {\n         if(null != sqls) {\n             try (Statement stmt = conn.createStatement()) {\n                 for (final String sql : sqls) {\n-                    if (sql == null) {\n-                        throw new NullPointerException(\n-                                \"null connectionInitSqls element\");\n-                    }\n+                    Objects.requireNonNull(sql, \"null connectionInitSqls element\");\n                     stmt.execute(sql);\n                 }\n             }",
                "deletions": 4
            },
            {
                "sha": "06434fb94a6603196eb11b59f9bf4368b80b19b5",
                "filename": "src/main/java/org/apache/commons/dbcp2/PoolingDataSource.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/982141d68997d48524ac4f0b9616f06ff5cfbebb/src/main/java/org/apache/commons/dbcp2/PoolingDataSource.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/982141d68997d48524ac4f0b9616f06ff5cfbebb/src/main/java/org/apache/commons/dbcp2/PoolingDataSource.java",
                "status": "modified",
                "changes": 9,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/PoolingDataSource.java?ref=982141d68997d48524ac4f0b9616f06ff5cfbebb",
                "patch": "@@ -21,6 +21,7 @@\n import java.sql.SQLException;\n import java.sql.SQLFeatureNotSupportedException;\n import java.util.NoSuchElementException;\n+import java.util.Objects;\n import java.util.logging.Logger;\n \n import javax.sql.DataSource;\n@@ -50,16 +51,12 @@\n     private boolean accessToUnderlyingConnectionAllowed;\n \n     public PoolingDataSource(final ObjectPool<C> pool) {\n-        if (null == pool) {\n-            throw new NullPointerException(\"Pool must not be null.\");\n-        }\n+        Objects.requireNonNull(pool, \"Pool must not be null.\");\n         this.pool = pool;\n         // Verify that _pool's factory refers back to it.  If not, log a warning and try to fix.\n         if (this.pool instanceof GenericObjectPool<?>) {\n             final PoolableConnectionFactory pcf = (PoolableConnectionFactory) ((GenericObjectPool<?>) this.pool).getFactory();\n-            if (pcf == null) {\n-                throw new NullPointerException(\"PoolableConnectionFactory must not be null.\");\n-            }\n+            Objects.requireNonNull(pcf, \"PoolableConnectionFactory must not be null.\");\n             if (pcf.getPool() != this.pool) {\n                 log.warn(Utils.getMessage(\"poolingDataSource.factoryConfig\"));\n                 @SuppressWarnings(\"unchecked\") // PCF must have a pool of PCs",
                "deletions": 6
            },
            {
                "sha": "83f340f1e2cd55a27eaac2c7ad0b3f06d186b657",
                "filename": "src/main/java/org/apache/commons/dbcp2/managed/DataSourceXAConnectionFactory.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/982141d68997d48524ac4f0b9616f06ff5cfbebb/src/main/java/org/apache/commons/dbcp2/managed/DataSourceXAConnectionFactory.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/982141d68997d48524ac4f0b9616f06ff5cfbebb/src/main/java/org/apache/commons/dbcp2/managed/DataSourceXAConnectionFactory.java",
                "status": "modified",
                "changes": 10,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/managed/DataSourceXAConnectionFactory.java?ref=982141d68997d48524ac4f0b9616f06ff5cfbebb",
                "patch": "@@ -29,6 +29,7 @@\n \n import java.sql.Connection;\n import java.sql.SQLException;\n+import java.util.Objects;\n \n /**\n  * An implementation of XAConnectionFactory which uses a real XADataSource to obtain connections and XAResources.\n@@ -64,13 +65,8 @@ public DataSourceXAConnectionFactory(final TransactionManager transactionManager\n      */\n     public DataSourceXAConnectionFactory(final TransactionManager transactionManager, final XADataSource xaDataSource,\n             final String userName, final char[] userPassword) {\n-        if (transactionManager == null) {\n-            throw new NullPointerException(\"transactionManager is null\");\n-        }\n-        if (xaDataSource == null) {\n-            throw new NullPointerException(\"xaDataSource is null\");\n-        }\n-\n+        Objects.requireNonNull(transactionManager, \"transactionManager is null\");\n+        Objects.requireNonNull(xaDataSource, \"xaDataSource is null\");\n         this.transactionRegistry = new TransactionRegistry(transactionManager);\n         this.xaDataSource = xaDataSource;\n         this.userName = userName;",
                "deletions": 7
            },
            {
                "sha": "b69bca5f9388f5a563850f94f2fd524c2344075c",
                "filename": "src/main/java/org/apache/commons/dbcp2/managed/LocalXAConnectionFactory.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/982141d68997d48524ac4f0b9616f06ff5cfbebb/src/main/java/org/apache/commons/dbcp2/managed/LocalXAConnectionFactory.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/982141d68997d48524ac4f0b9616f06ff5cfbebb/src/main/java/org/apache/commons/dbcp2/managed/LocalXAConnectionFactory.java",
                "status": "modified",
                "changes": 23,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/managed/LocalXAConnectionFactory.java?ref=982141d68997d48524ac4f0b9616f06ff5cfbebb",
                "patch": "@@ -25,6 +25,7 @@\n import javax.transaction.xa.Xid;\n import java.sql.Connection;\n import java.sql.SQLException;\n+import java.util.Objects;\n \n /**\n  * An implementation of XAConnectionFactory which manages non-XA connections in XA transactions.  A non-XA connection\n@@ -46,13 +47,8 @@\n      * @param connectionFactory  the connection factory from which connections will be retrieved\n      */\n     public LocalXAConnectionFactory(final TransactionManager transactionManager, final ConnectionFactory connectionFactory) {\n-        if (transactionManager == null) {\n-            throw new NullPointerException(\"transactionManager is null\");\n-        }\n-        if (connectionFactory == null) {\n-            throw new NullPointerException(\"connectionFactory is null\");\n-        }\n-\n+        Objects.requireNonNull(transactionManager, \"transactionManager is null\");\n+        Objects.requireNonNull(connectionFactory, \"connectionFactory is null\");\n         this.transactionRegistry = new TransactionRegistry(transactionManager);\n         this.connectionFactory = connectionFactory;\n     }\n@@ -161,9 +157,7 @@ public synchronized void start(final Xid xid, final int flag) throws XAException\n          */\n         @Override\n         public synchronized void end(final Xid xid, final int flag) throws XAException {\n-            if (xid == null) {\n-                throw new NullPointerException(\"xid is null\");\n-            }\n+            Objects.requireNonNull(xid, \"xid is null\");\n             if (!this.currentXid.equals(xid)) {\n                 throw new XAException(\"Invalid Xid: expected \" + this.currentXid + \", but was \" + xid);\n             }\n@@ -212,9 +206,7 @@ public synchronized int prepare(final Xid xid) {\n          */\n         @Override\n         public synchronized void commit(final Xid xid, final boolean flag) throws XAException {\n-            if (xid == null) {\n-                throw new NullPointerException(\"xid is null\");\n-            }\n+            Objects.requireNonNull(xid, \"xid is null\");\n             if (this.currentXid == null) {\n                 throw new XAException(\"There is no current transaction\");\n             }\n@@ -239,6 +231,7 @@ public synchronized void commit(final Xid xid, final boolean flag) throws XAExce\n                 try {\n                     connection.setAutoCommit(originalAutoCommit);\n                 } catch (final SQLException e) {\n+                    // ignore\n                 }\n                 this.currentXid = null;\n             }\n@@ -252,9 +245,7 @@ public synchronized void commit(final Xid xid, final boolean flag) throws XAExce\n          */\n         @Override\n         public synchronized void rollback(final Xid xid) throws XAException {\n-            if (xid == null) {\n-                throw new NullPointerException(\"xid is null\");\n-            }\n+            Objects.requireNonNull(xid, \"xid is null\");\n             if (!this.currentXid.equals(xid)) {\n                 throw new XAException(\"Invalid Xid: expected \" + this.currentXid + \", but was \" + xid);\n             }",
                "deletions": 16
            },
            {
                "sha": "02d89bc9c7a6e76b46fea9ed35c0e9a1fb0145dd",
                "filename": "src/main/java/org/apache/commons/dbcp2/managed/ManagedDataSource.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/982141d68997d48524ac4f0b9616f06ff5cfbebb/src/main/java/org/apache/commons/dbcp2/managed/ManagedDataSource.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/982141d68997d48524ac4f0b9616f06ff5cfbebb/src/main/java/org/apache/commons/dbcp2/managed/ManagedDataSource.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/managed/ManagedDataSource.java?ref=982141d68997d48524ac4f0b9616f06ff5cfbebb",
                "patch": "@@ -22,6 +22,7 @@\n \n import java.sql.Connection;\n import java.sql.SQLException;\n+import java.util.Objects;\n \n /**\n  * The ManagedDataSource is a PoolingDataSource that creates ManagedConnections.\n@@ -62,9 +63,7 @@ public void setTransactionRegistry(final TransactionRegistry transactionRegistry\n         if(this.transactionRegistry != null) {\n             throw new IllegalStateException(\"TransactionRegistry already set\");\n         }\n-        if(transactionRegistry == null) {\n-            throw new NullPointerException(\"TransactionRegistry is null\");\n-        }\n+        Objects.requireNonNull(transactionRegistry, \"transactionRegistry is null\");\n \n         this.transactionRegistry = transactionRegistry;\n     }",
                "deletions": 3
            },
            {
                "sha": "279e10711191b4e34d042f721c1e213d31ed5693",
                "filename": "src/main/java/org/apache/commons/dbcp2/managed/TransactionContext.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/982141d68997d48524ac4f0b9616f06ff5cfbebb/src/main/java/org/apache/commons/dbcp2/managed/TransactionContext.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/982141d68997d48524ac4f0b9616f06ff5cfbebb/src/main/java/org/apache/commons/dbcp2/managed/TransactionContext.java",
                "status": "modified",
                "changes": 9,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/managed/TransactionContext.java?ref=982141d68997d48524ac4f0b9616f06ff5cfbebb",
                "patch": "@@ -25,6 +25,7 @@\n import javax.transaction.xa.XAResource;\n import java.sql.Connection;\n import java.sql.SQLException;\n+import java.util.Objects;\n import java.lang.ref.WeakReference;\n \n /**\n@@ -52,12 +53,8 @@\n      * @param transaction the transaction\n      */\n     public TransactionContext(final TransactionRegistry transactionRegistry, final Transaction transaction) {\n-        if (transactionRegistry == null) {\n-            throw new NullPointerException(\"transactionRegistry is null\");\n-        }\n-        if (transaction == null) {\n-            throw new NullPointerException(\"transaction is null\");\n-        }\n+        Objects.requireNonNull(transactionRegistry, \"transactionRegistry is null\");\n+        Objects.requireNonNull(transaction, \"transaction is null\");\n         this.transactionRegistry = transactionRegistry;\n         this.transactionRef = new WeakReference<>(transaction);\n         this.transactionComplete = false;",
                "deletions": 6
            },
            {
                "sha": "cb3b88ce122274024ce311f8e4347bbd15f495b6",
                "filename": "src/main/java/org/apache/commons/dbcp2/managed/TransactionRegistry.java",
                "blob_url": "https://github.com/apache/commons-dbcp/blob/982141d68997d48524ac4f0b9616f06ff5cfbebb/src/main/java/org/apache/commons/dbcp2/managed/TransactionRegistry.java",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/982141d68997d48524ac4f0b9616f06ff5cfbebb/src/main/java/org/apache/commons/dbcp2/managed/TransactionRegistry.java",
                "status": "modified",
                "changes": 13,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/managed/TransactionRegistry.java?ref=982141d68997d48524ac4f0b9616f06ff5cfbebb",
                "patch": "@@ -20,6 +20,7 @@\n import java.sql.Connection;\n import java.sql.SQLException;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.WeakHashMap;\n \n import javax.transaction.SystemException;\n@@ -62,12 +63,8 @@ public TransactionRegistry(final TransactionManager transactionManager) {\n      * @param xaResource the XAResource which managed the connection within a transaction\n      */\n     public synchronized void registerConnection(final Connection connection, final XAResource xaResource) {\n-        if (connection == null) {\n-            throw new NullPointerException(\"connection is null\");\n-        }\n-        if (xaResource == null) {\n-            throw new NullPointerException(\"xaResource is null\");\n-        }\n+        Objects.requireNonNull(connection, \"connection is null\");\n+        Objects.requireNonNull(xaResource, \"xaResource is null\");\n         xaResources.put(connection, xaResource);\n     }\n \n@@ -78,9 +75,7 @@ public synchronized void registerConnection(final Connection connection, final X\n      * @throws SQLException if the connection does not have a registered XAResource\n      */\n     public synchronized XAResource getXAResource(final Connection connection) throws SQLException {\n-        if (connection == null) {\n-            throw new NullPointerException(\"connection is null\");\n-        }\n+        Objects.requireNonNull(connection, \"connection is null\");\n         final Connection key = getConnectionKey(connection);\n         final XAResource xaResource = xaResources.get(key);\n         if (xaResource == null) {",
                "deletions": 9
            }
        ],
        "patched_files": [
            "ManagedDataSource.java",
            "TransactionContext.java",
            "BasicDataSource.java",
            "PoolingDataSource.java",
            "DataSourceXAConnectionFactory.java"
        ],
        "unit_tests": [
            "TestPoolingDataSource.java",
            "TestManagedDataSource.java",
            "TestBasicDataSource.java",
            "TestTransactionContext.java",
            "TestDataSourceXAConnectionFactory.java"
        ]
    }
}