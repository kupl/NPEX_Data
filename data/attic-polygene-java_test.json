{
    "attic-polygene-java_063b1ca": {
        "bug_id": "attic-polygene-java_063b1ca",
        "commit": "https://github.com/apache/attic-polygene-java/commit/063b1ca6b31aff04a405e753f66bf9d889b105d2",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/063b1ca6b31aff04a405e753f66bf9d889b105d2/indexing-rdf/src/test/java/org/qi4j/index/rdf/Network.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/indexing-rdf/src/test/java/org/qi4j/index/rdf/Network.java?ref=063b1ca6b31aff04a405e753f66bf9d889b105d2",
                "deletions": 1,
                "filename": "indexing-rdf/src/test/java/org/qi4j/index/rdf/Network.java",
                "patch": "@@ -223,7 +223,7 @@ static void populate( SingletonAssembler assembler )\n \n             URL url = urlBuilder.prototype();\n             url.protocol().set( protocolBuilder.newInstance() );\n-            url.queryParams().set( queryParams );\n+            //url.queryParams().set( queryParams );\n \n             jackDoe.personalWebsite().set( urlBuilder.newInstance() );\n ",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/063b1ca6b31aff04a405e753f66bf9d889b105d2/indexing-rdf/src/test/java/org/qi4j/index/rdf/Network.java",
                "sha": "ce1dde336f4b41c53e3e05481d5ba0f640d7a3f5",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/063b1ca6b31aff04a405e753f66bf9d889b105d2/indexing-rdf/src/test/java/org/qi4j/index/rdf/RdfQueryTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/indexing-rdf/src/test/java/org/qi4j/index/rdf/RdfQueryTest.java?ref=063b1ca6b31aff04a405e753f66bf9d889b105d2",
                "deletions": 1,
                "filename": "indexing-rdf/src/test/java/org/qi4j/index/rdf/RdfQueryTest.java",
                "patch": "@@ -126,7 +126,10 @@ public void assemble( ModuleAssembly module ) throws AssemblyException\n     @After\r\n     public void tearDown()\r\n     {\r\n-        unitOfWork.discard();\r\n+        if( unitOfWork != null )\r\n+        {\r\n+            unitOfWork.discard();\r\n+        }\r\n     }\r\n \r\n     @Test\r",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/063b1ca6b31aff04a405e753f66bf9d889b105d2/indexing-rdf/src/test/java/org/qi4j/index/rdf/RdfQueryTest.java",
                "sha": "28b648177a7a4240e460a07bd50495f325ce9707",
                "status": "modified"
            }
        ],
        "message": "Do not initialize Property<Collection<X>> as il looks like is not yet working.\nResolve NPE in teatrDown() if exception in setup().\n\ngit-svn-id: https://scm.ops4j.org/repos/ops4j/projects/qi4j/extensions@14194 9b982a3c-3ae5-0310-a4bc-d9a3335569bd",
        "parent": "https://github.com/apache/attic-polygene-java/commit/35156ba17c006629378f744848b9e425af28de78",
        "patched_files": [
            "Network.java"
        ],
        "repo": "attic-polygene-java",
        "unit_tests": [
            "RdfQueryTest.java"
        ]
    },
    "attic-polygene-java_1a02f17": {
        "bug_id": "attic-polygene-java_1a02f17",
        "commit": "https://github.com/apache/attic-polygene-java/commit/1a02f1746a96c67b28c8ab14a1fe47ad6ddd8cc7",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/1a02f1746a96c67b28c8ab14a1fe47ad6ddd8cc7/runtime/src/main/java/org/qi4j/runtime/composite/EntityCompositeInstance.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/runtime/src/main/java/org/qi4j/runtime/composite/EntityCompositeInstance.java?ref=1a02f1746a96c67b28c8ab14a1fe47ad6ddd8cc7",
                "deletions": 1,
                "filename": "runtime/src/main/java/org/qi4j/runtime/composite/EntityCompositeInstance.java",
                "patch": "@@ -256,7 +256,7 @@ protected Object onHashCode( Object proxy )\n     protected Object onEquals( Object proxy, Object[] args )\n     {\n         Identity other = ( (Identity) args[ 0 ] );\n-        return identity.equals( other.identity().get() );\n+        return other != null && identity.equals( other.identity().get() );\n     }\n \n     protected Object onToString( Object proxy )",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/1a02f1746a96c67b28c8ab14a1fe47ad6ddd8cc7/runtime/src/main/java/org/qi4j/runtime/composite/EntityCompositeInstance.java",
                "sha": "4a36dba9e59165ba947cd5cb20e6d0b77cad6733",
                "status": "modified"
            },
            {
                "additions": 62,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/1a02f1746a96c67b28c8ab14a1fe47ad6ddd8cc7/tests/src/test/java/org/qi4j/composite/EntityCompositeEqualityTest.java",
                "changes": 62,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/tests/src/test/java/org/qi4j/composite/EntityCompositeEqualityTest.java?ref=1a02f1746a96c67b28c8ab14a1fe47ad6ddd8cc7",
                "deletions": 0,
                "filename": "tests/src/test/java/org/qi4j/composite/EntityCompositeEqualityTest.java",
                "patch": "@@ -0,0 +1,62 @@\n+package org.qi4j.composite;\n+\n+import static org.hamcrest.CoreMatchers.*;\n+import org.junit.After;\n+import static org.junit.Assert.*;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.qi4j.bootstrap.AssemblyException;\n+import org.qi4j.bootstrap.ModuleAssembly;\n+import org.qi4j.entity.EntityComposite;\n+import org.qi4j.entity.UnitOfWork;\n+import org.qi4j.entity.UnitOfWorkCompletionException;\n+import org.qi4j.entity.memory.MemoryEntityStoreService;\n+import org.qi4j.property.Property;\n+import org.qi4j.spi.entity.UuidIdentityGeneratorService;\n+import org.qi4j.structure.Visibility;\n+import org.qi4j.test.AbstractQi4jTest;\n+\n+public class EntityCompositeEqualityTest extends AbstractQi4jTest\n+{\n+    private UnitOfWork unitOfWork;\n+    private CompositeBuilder<MyComposite> myCompositeBuilder;\n+\n+    @Before @Override public void setUp() throws Exception\n+    {\n+        super.setUp();\n+        unitOfWork = this.unitOfWorkFactory.newUnitOfWork();\n+        myCompositeBuilder = unitOfWork.newEntityBuilder( MyComposite.class );\n+    }\n+\n+    @After public void completeUnitOfWork() throws Exception\n+    {\n+        unitOfWork.complete();\n+        super.tearDown();\n+    }\n+\n+    @Test\n+    public void shouldNotBeEqualToNull() throws UnitOfWorkCompletionException\n+    {\n+        MyComposite simpleComposite = myCompositeBuilder.newInstance();\n+        assertThat( \"simpleComposite is not equal to null\", simpleComposite.equals( null ), equalTo( false ) );\n+    }\n+\n+    @Test\n+    public void shouldBeEqualToItself()\n+    {\n+        MyComposite simpleComposite = myCompositeBuilder.newInstance();\n+        assertThat( \"simple composite is equal to itself\", simpleComposite.equals( simpleComposite ), equalTo( true ) );\n+    }\n+\n+    public void assemble( ModuleAssembly module ) throws AssemblyException\n+    {\n+        module.addServices( UuidIdentityGeneratorService.class, MemoryEntityStoreService.class ).visibleIn( Visibility.layer );\n+        module.addObjects( EntityCompositeEqualityTest.class );\n+        module.addComposites( MyComposite.class );\n+    }\n+\n+    private static interface MyComposite extends EntityComposite\n+    {\n+        Property<String> name();\n+    }\n+}",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/1a02f1746a96c67b28c8ab14a1fe47ad6ddd8cc7/tests/src/test/java/org/qi4j/composite/EntityCompositeEqualityTest.java",
                "sha": "476c55a836efd0180992ca2e460165cd8addc1f3",
                "status": "added"
            }
        ],
        "message": "Applied patch for QI-41 (NPE in EntityCompositeInstance)\n\ngit-svn-id: https://scm.ops4j.org/repos/ops4j/projects/qi4j/core@11565 9b982a3c-3ae5-0310-a4bc-d9a3335569bd",
        "parent": "https://github.com/apache/attic-polygene-java/commit/406859ff99fe1621a73c6f0e22ba8440cba4cc37",
        "patched_files": [
            "EntityCompositeInstance.java"
        ],
        "repo": "attic-polygene-java",
        "unit_tests": [
            "EntityCompositeEqualityTest.java"
        ]
    },
    "attic-polygene-java_24a8930": {
        "bug_id": "attic-polygene-java_24a8930",
        "commit": "https://github.com/apache/attic-polygene-java/commit/24a8930a173dc9cbcb4b228513726e968a3fec13",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/24a8930a173dc9cbcb4b228513726e968a3fec13/runtime/src/main/java/org/qi4j/runtime/structure/ModuleInstance.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/runtime/src/main/java/org/qi4j/runtime/structure/ModuleInstance.java?ref=24a8930a173dc9cbcb4b228513726e968a3fec13",
                "deletions": 1,
                "filename": "runtime/src/main/java/org/qi4j/runtime/structure/ModuleInstance.java",
                "patch": "@@ -213,7 +213,12 @@ public ValueDescriptor valueDescriptor( String name )\n         try\n         {\n             Class<?> type = classLoader().loadClass( name );\n-            return findValueModels( type ).model();\n+            ModelModule<ValueModel> valueModel = findValueModels( type );\n+            if( valueModel == null )\n+            {\n+                return null;\n+            }\n+            return valueModel.model();\n         } catch( ClassNotFoundException e )\n         {\n             return null;",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/24a8930a173dc9cbcb4b228513726e968a3fec13/runtime/src/main/java/org/qi4j/runtime/structure/ModuleInstance.java",
                "sha": "104e4590ad1996c3d3a07a01b9619ff1a738ee0c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/24a8930a173dc9cbcb4b228513726e968a3fec13/runtime/src/test/java/org/qi4j/test/composite/CleanStackTraceTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/runtime/src/test/java/org/qi4j/test/composite/CleanStackTraceTest.java?ref=24a8930a173dc9cbcb4b228513726e968a3fec13",
                "deletions": 2,
                "filename": "runtime/src/test/java/org/qi4j/test/composite/CleanStackTraceTest.java",
                "patch": "@@ -67,9 +67,9 @@ public void cleanStackTraceOnApplicationException()\n \n             String separator = System.getProperty( \"line.separator\" );\n             String correctTrace = \"java.lang.RuntimeException\" + separator +\n-                                  \"\\tat org.qi4j.test.composite.CleanStackTraceTest$DoStuffMixin.doStuff(CleanStackTraceTest.java:91)\" + separator +\n+                                  \"\\tat org.qi4j.test.composite.CleanStackTraceTest$DoStuffMixin.doStuff(CleanStackTraceTest.java:92)\" + separator +\n                                   \"\\tat org.qi4j.test.composite.CleanStackTraceTest$TestComposite.doStuff(Unknown Source)\" + separator +\n-                                  \"\\tat org.qi4j.test.composite.CleanStackTraceTest.cleanStackTraceOnApplicationException(CleanStackTraceTest.java:60)\";\n+                                  \"\\tat org.qi4j.test.composite.CleanStackTraceTest.cleanStackTraceOnApplicationException(CleanStackTraceTest.java:61)\";\n             String actual = actualTrace.toString();\n             actual = actual.substring( 0, correctTrace.length() );\n             assertEquals( correctTrace, actual );",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/24a8930a173dc9cbcb4b228513726e968a3fec13/runtime/src/test/java/org/qi4j/test/composite/CleanStackTraceTest.java",
                "sha": "359ac92a50390fe76b6ee4e7699d3fb675bbbfee",
                "status": "modified"
            }
        ],
        "message": "Fixed CleanStackTraceTest and a NPE in ModuleInstance",
        "parent": "https://github.com/apache/attic-polygene-java/commit/6439b583df67828ac2d12868de109de445d4cad4",
        "patched_files": [
            "ModuleInstance.java"
        ],
        "repo": "attic-polygene-java",
        "unit_tests": [
            "CleanStackTraceTest.java"
        ]
    },
    "attic-polygene-java_7cb20c8": {
        "bug_id": "attic-polygene-java_7cb20c8",
        "commit": "https://github.com/apache/attic-polygene-java/commit/7cb20c8a043fd376e5cd912269897509272fd4a2",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/7cb20c8a043fd376e5cd912269897509272fd4a2/runtime/src/main/java/org/qi4j/runtime/structure/ModuleInstance.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/runtime/src/main/java/org/qi4j/runtime/structure/ModuleInstance.java?ref=7cb20c8a043fd376e5cd912269897509272fd4a2",
                "deletions": 1,
                "filename": "runtime/src/main/java/org/qi4j/runtime/structure/ModuleInstance.java",
                "patch": "@@ -213,7 +213,12 @@ public ValueDescriptor valueDescriptor( String name )\n         try\n         {\n             Class<?> type = classLoader().loadClass( name );\n-            return findValueModels( type ).model();\n+            ModelModule<ValueModel> valueModel = findValueModels( type );\n+            if( valueModel == null )\n+            {\n+                return null;\n+            }\n+            return valueModel.model();\n         } catch( ClassNotFoundException e )\n         {\n             return null;",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/7cb20c8a043fd376e5cd912269897509272fd4a2/runtime/src/main/java/org/qi4j/runtime/structure/ModuleInstance.java",
                "sha": "104e4590ad1996c3d3a07a01b9619ff1a738ee0c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/7cb20c8a043fd376e5cd912269897509272fd4a2/runtime/src/test/java/org/qi4j/test/composite/CleanStackTraceTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/runtime/src/test/java/org/qi4j/test/composite/CleanStackTraceTest.java?ref=7cb20c8a043fd376e5cd912269897509272fd4a2",
                "deletions": 2,
                "filename": "runtime/src/test/java/org/qi4j/test/composite/CleanStackTraceTest.java",
                "patch": "@@ -67,9 +67,9 @@ public void cleanStackTraceOnApplicationException()\n \n             String separator = System.getProperty( \"line.separator\" );\n             String correctTrace = \"java.lang.RuntimeException\" + separator +\n-                                  \"\\tat org.qi4j.test.composite.CleanStackTraceTest$DoStuffMixin.doStuff(CleanStackTraceTest.java:91)\" + separator +\n+                                  \"\\tat org.qi4j.test.composite.CleanStackTraceTest$DoStuffMixin.doStuff(CleanStackTraceTest.java:92)\" + separator +\n                                   \"\\tat org.qi4j.test.composite.CleanStackTraceTest$TestComposite.doStuff(Unknown Source)\" + separator +\n-                                  \"\\tat org.qi4j.test.composite.CleanStackTraceTest.cleanStackTraceOnApplicationException(CleanStackTraceTest.java:60)\";\n+                                  \"\\tat org.qi4j.test.composite.CleanStackTraceTest.cleanStackTraceOnApplicationException(CleanStackTraceTest.java:61)\";\n             String actual = actualTrace.toString();\n             actual = actual.substring( 0, correctTrace.length() );\n             assertEquals( correctTrace, actual );",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/7cb20c8a043fd376e5cd912269897509272fd4a2/runtime/src/test/java/org/qi4j/test/composite/CleanStackTraceTest.java",
                "sha": "359ac92a50390fe76b6ee4e7699d3fb675bbbfee",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #3 from eskatos/Applying_1.4_to_develop\n\nFixed CleanStackTraceTest and a NPE in ModuleInstance",
        "parent": "https://github.com/apache/attic-polygene-java/commit/6439b583df67828ac2d12868de109de445d4cad4",
        "patched_files": [
            "ModuleInstance.java"
        ],
        "repo": "attic-polygene-java",
        "unit_tests": [
            "CleanStackTraceTest.java"
        ]
    },
    "attic-polygene-java_808461d": {
        "bug_id": "attic-polygene-java_808461d",
        "commit": "https://github.com/apache/attic-polygene-java/commit/808461d559fe43a6754b0483567d159113ba69c3",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/808461d559fe43a6754b0483567d159113ba69c3/indexing-rdf/pom.xml",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/indexing-rdf/pom.xml?ref=808461d559fe43a6754b0483567d159113ba69c3",
                "deletions": 1,
                "filename": "indexing-rdf/pom.xml",
                "patch": "@@ -1,4 +1,5 @@\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n \n   <modelVersion>4.0.0</modelVersion>\n \n@@ -35,6 +36,11 @@\n       <version>2.0.1</version>\n       <type>pom</type>\n     </dependency>\n+    <dependency>\n+      <groupId>org.openrdf</groupId>\n+      <artifactId>openrdf-sail-http</artifactId>\n+      <version>2.0-alpha4</version>\n+    </dependency>\n     <dependency>\n       <groupId>org.openrdf</groupId>\n       <artifactId>openrdf-rio-rdfxml</artifactId>",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/808461d559fe43a6754b0483567d159113ba69c3/indexing-rdf/pom.xml",
                "sha": "f66cfff6c8c060067eb8cc0979d8061a2629c0aa",
                "status": "modified"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/808461d559fe43a6754b0483567d159113ba69c3/indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/assembly/RdfMemoryStoreAssembler.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/assembly/RdfMemoryStoreAssembler.java?ref=808461d559fe43a6754b0483567d159113ba69c3",
                "deletions": 0,
                "filename": "indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/assembly/RdfMemoryStoreAssembler.java",
                "patch": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright (c) 2008, Niclas Hedhman. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.qi4j.entity.index.rdf.assembly;\n+\n+import org.qi4j.bootstrap.Assembler;\n+import org.qi4j.bootstrap.ModuleAssembly;\n+import org.qi4j.bootstrap.AssemblyException;\n+import org.qi4j.entity.index.rdf.RdfQueryService;\n+import org.qi4j.entity.index.rdf.memory.MemoryRepositoryService;\n+\n+public class RdfMemoryStoreAssembler\n+    implements Assembler\n+{\n+    public void assemble( ModuleAssembly module )\n+        throws AssemblyException\n+    {\n+        module.addServices( RdfQueryService.class ).instantiateOnStartup();\n+        module.addServices( MemoryRepositoryService.class ).instantiateOnStartup().identifiedBy( \"rdf-indexing\" );\n+    }\n+}",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/808461d559fe43a6754b0483567d159113ba69c3/indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/assembly/RdfMemoryStoreAssembler.java",
                "sha": "9246e34f7e5c82cd7ed4ba1c4cc011faae7013b9",
                "status": "added"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/808461d559fe43a6754b0483567d159113ba69c3/indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/assembly/RdfNativeSesameStoreAssembler.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/assembly/RdfNativeSesameStoreAssembler.java?ref=808461d559fe43a6754b0483567d159113ba69c3",
                "deletions": 0,
                "filename": "indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/assembly/RdfNativeSesameStoreAssembler.java",
                "patch": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright (c) 2008, Niclas Hedhman. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.qi4j.entity.index.rdf.assembly;\n+\n+import org.qi4j.bootstrap.Assembler;\n+import org.qi4j.bootstrap.ModuleAssembly;\n+import org.qi4j.bootstrap.AssemblyException;\n+import org.qi4j.entity.index.rdf.RdfQueryService;\n+import org.qi4j.entity.index.rdf.natiive.NativeRdfRepositoryService;\n+import org.qi4j.entity.index.rdf.natiive.NativeRdfConfiguration;\n+\n+public class RdfNativeSesameStoreAssembler\n+    implements Assembler\n+{\n+\n+    public void assemble( ModuleAssembly module ) throws AssemblyException\n+    {\n+        module.addComposites( NativeRdfConfiguration.class );\n+        module.addServices( NativeRdfRepositoryService.class ).instantiateOnStartup().identifiedBy( \"rdf-indexing\" );\n+        module.addServices( RdfQueryService.class ).instantiateOnStartup();\n+    }\n+}",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/808461d559fe43a6754b0483567d159113ba69c3/indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/assembly/RdfNativeSesameStoreAssembler.java",
                "sha": "999dc5bd8f8ca8af94668f31eb6370d471cb78f6",
                "status": "added"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/808461d559fe43a6754b0483567d159113ba69c3/indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/memory/MemoryRepositoryMixin.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/memory/MemoryRepositoryMixin.java?ref=808461d559fe43a6754b0483567d159113ba69c3",
                "deletions": 0,
                "filename": "indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/memory/MemoryRepositoryMixin.java",
                "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright (c) 2008, Niclas Hedhman. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.qi4j.entity.index.rdf.memory;\n+\n+import org.openrdf.repository.Repository;\n+import org.openrdf.repository.sail.SailRepository;\n+import org.openrdf.sail.memory.MemoryStore;\n+import org.openrdf.sail.inferencer.fc.ForwardChainingRDFSInferencer;\n+import org.qi4j.service.Activatable;\n+\n+public class MemoryRepositoryMixin extends SailRepository\n+    implements Repository, Activatable\n+{\n+    public MemoryRepositoryMixin()\n+    {\n+        super( new ForwardChainingRDFSInferencer(new MemoryStore()) );\n+    }\n+\n+    public void activate() throws Exception\n+    {\n+        getSail().initialize();\n+    }\n+\n+    public void passivate() throws Exception\n+    {\n+        getSail().shutDown();\n+    }\n+}",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/808461d559fe43a6754b0483567d159113ba69c3/indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/memory/MemoryRepositoryMixin.java",
                "sha": "093d896d2e83f66c9ade61901a6388f86b7186ee",
                "status": "added"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/808461d559fe43a6754b0483567d159113ba69c3/indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/memory/MemoryRepositoryService.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/memory/MemoryRepositoryService.java?ref=808461d559fe43a6754b0483567d159113ba69c3",
                "deletions": 0,
                "filename": "indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/memory/MemoryRepositoryService.java",
                "patch": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright (c) 2008, Niclas Hedhman. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.qi4j.entity.index.rdf.memory;\n+\n+import org.openrdf.repository.Repository;\n+import org.qi4j.composite.Mixins;\n+import org.qi4j.service.ServiceComposite;\n+import org.qi4j.service.Activatable;\n+\n+@Mixins( MemoryRepositoryMixin.class )\n+public interface MemoryRepositoryService extends Repository, ServiceComposite, Activatable\n+{\n+}",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/808461d559fe43a6754b0483567d159113ba69c3/indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/memory/MemoryRepositoryService.java",
                "sha": "6935529589acd278af924771202b16daa0420d9b",
                "status": "added"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/808461d559fe43a6754b0483567d159113ba69c3/indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/natiive/NativeRdfConfiguration.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/natiive/NativeRdfConfiguration.java?ref=808461d559fe43a6754b0483567d159113ba69c3",
                "deletions": 0,
                "filename": "indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/natiive/NativeRdfConfiguration.java",
                "patch": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright (c) 2008, Niclas Hedhman. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.qi4j.entity.index.rdf.natiive;\n+\n+import org.qi4j.entity.EntityComposite;\n+import org.qi4j.property.Property;\n+\n+public interface NativeRdfConfiguration extends EntityComposite\n+{\n+    Property<String> tripleIndexes();\n+    Property<String> dataDirectory();\n+    Property<Boolean> forceSync();\n+}",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/808461d559fe43a6754b0483567d159113ba69c3/indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/natiive/NativeRdfConfiguration.java",
                "sha": "8f4ddb6efa3fd56a676007b1590beac59b0f7b22",
                "status": "added"
            },
            {
                "additions": 78,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/808461d559fe43a6754b0483567d159113ba69c3/indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/natiive/NativeRdfRepositoryMixin.java",
                "changes": 78,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/natiive/NativeRdfRepositoryMixin.java?ref=808461d559fe43a6754b0483567d159113ba69c3",
                "deletions": 0,
                "filename": "indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/natiive/NativeRdfRepositoryMixin.java",
                "patch": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright (c) 2008, Niclas Hedhman. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.qi4j.entity.index.rdf.natiive;\n+\n+import java.io.File;\n+import org.openrdf.repository.Repository;\n+import org.openrdf.repository.sail.SailRepository;\n+import org.openrdf.sail.inferencer.fc.ForwardChainingRDFSInferencer;\n+import org.openrdf.sail.nativerdf.NativeStore;\n+import org.openrdf.sail.Sail;\n+import org.qi4j.composite.scope.This;\n+import org.qi4j.service.Activatable;\n+\n+public class NativeRdfRepositoryMixin extends SailRepository\n+    implements Repository, Activatable\n+{\n+    @This private NativeRdfConfiguration configuration;\n+\n+    public NativeRdfRepositoryMixin()\n+    {\n+        super( new ForwardChainingRDFSInferencer( new NativeStore() ) );\n+    }\n+\n+    public void activate() throws Exception\n+    {\n+        ForwardChainingRDFSInferencer store = (ForwardChainingRDFSInferencer) getSail();\n+        NativeStore store2 = (NativeStore) store.getBaseSail();\n+        String dataDir = configuration.dataDirectory().get();\n+        if( dataDir == null || \"\".equals( dataDir ) )\n+        {\n+            String id = configuration.identity().get();\n+            if( id == null || \"\".equals( id ) )\n+            {\n+                dataDir = \"./rdf-store\";\n+            }\n+            else\n+            {\n+                dataDir = \"./rdf-stores/\" + id;\n+            }\n+            configuration.dataDirectory().set( dataDir );\n+        }\n+        store2.setDataDir( new File( dataDir ) );\n+        String tripleIndexes = configuration.tripleIndexes().get();\n+        if( tripleIndexes == null )\n+        {\n+            tripleIndexes = \"\";\n+            configuration.tripleIndexes().set( tripleIndexes );\n+        }\n+        store2.setTripleIndexes( tripleIndexes );\n+        Boolean forceSync = configuration.forceSync().get();\n+        if( forceSync == null )\n+        {\n+            configuration.forceSync().set( false );\n+            forceSync = false;\n+        }\n+        store2.setForceSync( forceSync );\n+        long t0 = System.currentTimeMillis();\n+        initialize();\n+        System.out.println( \"Initialization Time: \" + (System.currentTimeMillis() - t0 ) );\n+    }\n+\n+    public void passivate()\n+        throws Exception\n+    {\n+        shutDown();\n+    }\n+}",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/808461d559fe43a6754b0483567d159113ba69c3/indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/natiive/NativeRdfRepositoryMixin.java",
                "sha": "70e444cbd82d490fc84c2ab3cc27deee1e47d83d",
                "status": "added"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/808461d559fe43a6754b0483567d159113ba69c3/indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/natiive/NativeRdfRepositoryService.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/natiive/NativeRdfRepositoryService.java?ref=808461d559fe43a6754b0483567d159113ba69c3",
                "deletions": 0,
                "filename": "indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/natiive/NativeRdfRepositoryService.java",
                "patch": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright (c) 2008, Niclas Hedhman. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.qi4j.entity.index.rdf.natiive;\n+\n+import org.openrdf.repository.Repository;\n+import org.qi4j.service.ServiceComposite;\n+import org.qi4j.service.Activatable;\n+import org.qi4j.composite.Mixins;\n+\n+@Mixins( { NativeRdfRepositoryMixin.class} )\n+public interface NativeRdfRepositoryService extends Repository, ServiceComposite, Activatable\n+{\n+}",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/808461d559fe43a6754b0483567d159113ba69c3/indexing-rdf/src/main/java/org/qi4j/entity/index/rdf/natiive/NativeRdfRepositoryService.java",
                "sha": "cf08a2f280ee3a4b0895509df4b6ae988c025925",
                "status": "added"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/808461d559fe43a6754b0483567d159113ba69c3/indexing-rdf/src/test/java/org/qi4j/entity/index/rdf/RDFEntityFinderTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/indexing-rdf/src/test/java/org/qi4j/entity/index/rdf/RDFEntityFinderTest.java?ref=808461d559fe43a6754b0483567d159113ba69c3",
                "deletions": 5,
                "filename": "indexing-rdf/src/test/java/org/qi4j/entity/index/rdf/RDFEntityFinderTest.java",
                "patch": "@@ -23,6 +23,9 @@\n import org.qi4j.bootstrap.ModuleAssembly;\n import org.qi4j.bootstrap.SingletonAssembler;\n import org.qi4j.entity.UnitOfWorkCompletionException;\n+import org.qi4j.entity.index.rdf.natiive.NativeRdfRepositoryService;\n+import org.qi4j.entity.index.rdf.natiive.NativeRdfConfiguration;\n+import org.qi4j.entity.index.rdf.memory.MemoryRepositoryService;\n import org.qi4j.entity.memory.IndexedMemoryEntityStoreService;\n import static org.qi4j.query.QueryExpressions.*;\n import org.qi4j.query.grammar.BooleanExpression;\n@@ -33,7 +36,6 @@\n \n public class RDFEntityFinderTest\n {\n-\n     private static final BooleanExpression ALL = null;\n     private static final OrderBy[] NO_SORTING = null;\n     private static final Integer NO_FIRST_RESULT = null;\n@@ -59,18 +61,21 @@ public void assemble( ModuleAssembly module ) throws AssemblyException\n                 module.addServices(\n                     IndexedMemoryEntityStoreService.class,\n                     UuidIdentityGeneratorService.class,\n-                    RDFIndexerExporterComposite.class\n-                );\n+                    RdfIndexerExporterComposite.class\n+                    );\n+                module.addServices( MemoryRepositoryService.class ).identifiedBy( \"rdf-indexing\" );\n+//                module.addServices( NativeRdfRepositoryService.class ).identifiedBy( \"rdf-indexing\" );\n+//                module.addComposites( NativeRdfConfiguration.class );\n             }\n         };\n         Network.populate( assembler.getUnitOfWorkFactory().newUnitOfWork() );\n-        entityFinder = assembler.getServiceLocator().lookupService( RDFQueryService.class ).get();\n+        entityFinder = assembler.getServiceLocator().lookupService( RdfQueryService.class ).get();\n     }\n \n     @Test\n     public void showNetwork()\n     {\n-        assembler.getServiceLocator().lookupService( RDFIndexerExporterComposite.class ).get().toRDF( System.out );\n+        assembler.getServiceLocator().lookupService( RdfIndexerExporterComposite.class ).get().toRDF( System.out );\n     }\n \n     @Test",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/808461d559fe43a6754b0483567d159113ba69c3/indexing-rdf/src/test/java/org/qi4j/entity/index/rdf/RDFEntityFinderTest.java",
                "sha": "0e9e2d7ed42618c6cfd170ade4c2346d04658b85",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/808461d559fe43a6754b0483567d159113ba69c3/indexing-rdf/src/test/java/org/qi4j/entity/index/rdf/RDFEntityIndexerTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/indexing-rdf/src/test/java/org/qi4j/entity/index/rdf/RDFEntityIndexerTest.java?ref=808461d559fe43a6754b0483567d159113ba69c3",
                "deletions": 2,
                "filename": "indexing-rdf/src/test/java/org/qi4j/entity/index/rdf/RDFEntityIndexerTest.java",
                "patch": "@@ -22,6 +22,7 @@\n import org.qi4j.bootstrap.ModuleAssembly;\n import org.qi4j.bootstrap.SingletonAssembler;\n import org.qi4j.entity.UnitOfWorkCompletionException;\n+import org.qi4j.entity.index.rdf.memory.MemoryRepositoryService;\n import org.qi4j.entity.memory.IndexedMemoryEntityStoreService;\n import org.qi4j.spi.entity.UuidIdentityGeneratorService;\n \n@@ -44,12 +45,13 @@ public void assemble( ModuleAssembly module ) throws AssemblyException\n                 module.addServices(\n                     IndexedMemoryEntityStoreService.class,\n                     UuidIdentityGeneratorService.class,\n-                    RDFIndexerExporterComposite.class\n+                    RdfIndexerExporterComposite.class,\n+                    MemoryRepositoryService.class\n                 );\n             }\n         };\n         Network.populate( assembler.getUnitOfWorkFactory().newUnitOfWork() );\n-        assembler.getServiceLocator().lookupService( RDFIndexerExporterComposite.class ).get().toRDF( System.out );\n+        assembler.getServiceLocator().lookupService( RdfIndexerExporterComposite.class ).get().toRDF( System.out );\n     }\n \n ",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/808461d559fe43a6754b0483567d159113ba69c3/indexing-rdf/src/test/java/org/qi4j/entity/index/rdf/RDFEntityIndexerTest.java",
                "sha": "10992ca630c55be7b30ef30967a92f9144b31afb",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/808461d559fe43a6754b0483567d159113ba69c3/indexing-rdf/src/test/java/org/qi4j/entity/index/rdf/RDFQueryTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/indexing-rdf/src/test/java/org/qi4j/entity/index/rdf/RDFQueryTest.java?ref=808461d559fe43a6754b0483567d159113ba69c3",
                "deletions": 2,
                "filename": "indexing-rdf/src/test/java/org/qi4j/entity/index/rdf/RDFQueryTest.java",
                "patch": "@@ -23,6 +23,7 @@\n import org.qi4j.bootstrap.ModuleAssembly;\n import org.qi4j.bootstrap.SingletonAssembler;\n import org.qi4j.entity.UnitOfWorkCompletionException;\n+import org.qi4j.entity.index.rdf.memory.MemoryRepositoryService;\n import org.qi4j.entity.memory.IndexedMemoryEntityStoreService;\n import org.qi4j.query.Query;\n import org.qi4j.query.QueryBuilder;\n@@ -55,7 +56,8 @@ public void assemble( ModuleAssembly module ) throws AssemblyException\n                 module.addServices(\n                     IndexedMemoryEntityStoreService.class,\n                     UuidIdentityGeneratorService.class,\n-                    RDFIndexerExporterComposite.class\n+                    RdfIndexerExporterComposite.class,\n+                    MemoryRepositoryService.class\n                 );\n             }\n         };\n@@ -66,7 +68,7 @@ public void assemble( ModuleAssembly module ) throws AssemblyException\n     @Test\n     public void showNetwork()\n     {\n-        assembler.getServiceLocator().lookupService( RDFIndexerExporterComposite.class ).get().toRDF( System.out );\n+        assembler.getServiceLocator().lookupService( RdfIndexerExporterComposite.class ).get().toRDF( System.out );\n     }\n \n     @Test",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/808461d559fe43a6754b0483567d159113ba69c3/indexing-rdf/src/test/java/org/qi4j/entity/index/rdf/RDFQueryTest.java",
                "sha": "e803f1221e256b7bf212773dbd8f47f9d55d58fd",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/808461d559fe43a6754b0483567d159113ba69c3/quikit/src/main/java/org/qi4j/quikit/QueryMetaDataProvider.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/quikit/src/main/java/org/qi4j/quikit/QueryMetaDataProvider.java?ref=808461d559fe43a6754b0483567d159113ba69c3",
                "deletions": 5,
                "filename": "quikit/src/main/java/org/qi4j/quikit/QueryMetaDataProvider.java",
                "patch": "@@ -13,19 +13,18 @@\n  */\n package org.qi4j.quikit;\n \n+import java.util.ArrayList;\n+import java.util.Iterator;\n import org.apache.wicket.markup.repeater.data.IDataProvider;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n-import org.qi4j.entity.EntityComposite;\n-import org.qi4j.query.Query;\n import org.qi4j.composite.scope.Structure;\n import org.qi4j.composite.scope.Uses;\n+import org.qi4j.entity.EntityComposite;\n import org.qi4j.spi.Qi4jSPI;\n-import org.qi4j.spi.property.PropertyBinding;\n import org.qi4j.spi.composite.CompositeBinding;\n+import org.qi4j.spi.property.PropertyBinding;\n import org.qi4j.structure.Module;\n-import java.util.Iterator;\n-import java.util.ArrayList;\n \n public class QueryMetaDataProvider\n     implements IDataProvider",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/808461d559fe43a6754b0483567d159113ba69c3/quikit/src/main/java/org/qi4j/quikit/QueryMetaDataProvider.java",
                "sha": "fb0ad78326fbd6845671f81e5b13e79d816aa0e3",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/808461d559fe43a6754b0483567d159113ba69c3/rest/src/test/java/org/qi4j/rest/RestTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/rest/src/test/java/org/qi4j/rest/RestTest.java?ref=808461d559fe43a6754b0483567d159113ba69c3",
                "deletions": 2,
                "filename": "rest/src/test/java/org/qi4j/rest/RestTest.java",
                "patch": "@@ -40,7 +40,7 @@\n import org.qi4j.entity.EntityCompositeNotFoundException;\n import org.qi4j.entity.UnitOfWork;\n import org.qi4j.entity.association.Association;\n-import org.qi4j.entity.index.rdf.RDFQueryService;\n+import org.qi4j.entity.index.rdf.RdfQueryService;\n import org.qi4j.entity.memory.IndexedMemoryEntityStoreService;\n import org.qi4j.property.Property;\n import org.qi4j.rest.assembly.RestAssembler;\n@@ -74,7 +74,7 @@ public void assemble( ModuleAssembly module )\n         module.addObjects( RestTester.class );\n         module.addComposites( PersonEntity.class );\n         module.addServices( IndexedMemoryEntityStoreService.class ).identifiedBy( \"store\" );\n-        module.addServices( RDFQueryService.class );\n+        module.addServices( RdfQueryService.class );\n         module.addServices( UuidIdentityGeneratorService.class );\n     }\n ",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/808461d559fe43a6754b0483567d159113ba69c3/rest/src/test/java/org/qi4j/rest/RestTest.java",
                "sha": "3bd0e60076e9e5b623cc156f456ea9cd5c2ee1c6",
                "status": "modified"
            }
        ],
        "message": "o Modularizing the RDF Indexer so we can have persisted and remote repositories.\no Added some more descriptive Exceptions for non-registered Composites/Entities/Services. Also, found one case where the UOW would throw a NPE instead of reporting a missing registration.\n\n\ngit-svn-id: https://scm.ops4j.org/repos/ops4j/projects/qi4j/extensions@11648 9b982a3c-3ae5-0310-a4bc-d9a3335569bd",
        "parent": "https://github.com/apache/attic-polygene-java/commit/b159e0a6458f82d3db2fb98b3bcc4520593afd8f",
        "patched_files": [
            "pom.xml",
            "NativeRdfRepositoryMixin.java",
            "RdfNativeSesameStoreAssembler.java",
            "NativeRdfConfiguration.java",
            "MemoryRepositoryService.java",
            "QueryMetaDataProvider.java",
            "MemoryRepositoryMixin.java",
            "RdfMemoryStoreAssembler.java",
            "NativeRdfRepositoryService.java"
        ],
        "repo": "attic-polygene-java",
        "unit_tests": [
            "RDFEntityIndexerTest.java",
            "RDFEntityFinderTest.java",
            "RDFQueryTest.java",
            "RestTest.java"
        ]
    },
    "attic-polygene-java_b9eac15": {
        "bug_id": "attic-polygene-java_b9eac15",
        "commit": "https://github.com/apache/attic-polygene-java/commit/b9eac152212dabd571ac9569e2180c005026129b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/b9eac152212dabd571ac9569e2180c005026129b/scripting/jruby/src/main/java/org/qi4j/scripting/jruby/JRubyMixin.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/scripting/jruby/src/main/java/org/qi4j/scripting/jruby/JRubyMixin.java?ref=b9eac152212dabd571ac9569e2180c005026129b",
                "deletions": 1,
                "filename": "scripting/jruby/src/main/java/org/qi4j/scripting/jruby/JRubyMixin.java",
                "patch": "@@ -56,7 +56,7 @@\n public class JRubyMixin\n     implements InvocationHandler, ScriptReloadable\n {\n-    @This Composite me;\n+    @This private Composite me;\n \n     private Ruby runtime;\n ",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/b9eac152212dabd571ac9569e2180c005026129b/scripting/jruby/src/main/java/org/qi4j/scripting/jruby/JRubyMixin.java",
                "sha": "b186559686eaddc24ca8edabc912d53bff48fbaf",
                "status": "modified"
            }
        ],
        "message": "o Modularizing the RDF Indexer so we can have persisted and remote repositories.\no Added some more descriptive Exceptions for non-registered Composites/Entities/Services. Also, found one case where the UOW would throw a NPE instead of reporting a missing registration.\n\n\ngit-svn-id: https://scm.ops4j.org/repos/ops4j/projects/qi4j/libraries@11648 9b982a3c-3ae5-0310-a4bc-d9a3335569bd",
        "parent": "https://github.com/apache/attic-polygene-java/commit/04b3780f705625ec107567a08a58f11f4200f1d6",
        "patched_files": [
            "JRubyMixin.java"
        ],
        "repo": "attic-polygene-java",
        "unit_tests": [
            "JRubyMixinTest.java"
        ]
    },
    "attic-polygene-java_c04646f": {
        "bug_id": "attic-polygene-java_c04646f",
        "commit": "https://github.com/apache/attic-polygene-java/commit/c04646f517b908e8e25f56dc155aa2dfd8bf3471",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/c04646f517b908e8e25f56dc155aa2dfd8bf3471/bootstrap/pom.xml",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/bootstrap/pom.xml?ref=c04646f517b908e8e25f56dc155aa2dfd8bf3471",
                "deletions": 3,
                "filename": "bootstrap/pom.xml",
                "patch": "@@ -12,7 +12,6 @@\n   ~ limitations under the License.\n   ~\n   -->\n-\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n@@ -21,11 +20,15 @@\n     <artifactId>master</artifactId>\n     <version>0.1.0-SNAPSHOT</version>\n   </parent>\n+\n   <modelVersion>4.0.0</modelVersion>\n+\n   <groupId>org.qi4j.core</groupId>\n   <artifactId>qi4j-bootstrap</artifactId>\n-  <name>Qi4J Core - Bootstrap</name>\n   <version>0.1.0-SNAPSHOT</version>\n+  \n+  <name>Qi4J Core - Bootstrap</name>\n+\n   <dependencies>\n     <dependency>\n       <groupId>junit</groupId>\n@@ -47,4 +50,4 @@\n       <version>0.1.0-SNAPSHOT</version>\n     </dependency>\n   </dependencies>\n-</project>\n\\ No newline at end of file\n+</project>",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/c04646f517b908e8e25f56dc155aa2dfd8bf3471/bootstrap/pom.xml",
                "sha": "85480b648fcb218f225e09f4943e1c6f8c6c6291",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/c04646f517b908e8e25f56dc155aa2dfd8bf3471/pom.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/pom.xml?ref=c04646f517b908e8e25f56dc155aa2dfd8bf3471",
                "deletions": 0,
                "filename": "pom.xml",
                "patch": "@@ -16,6 +16,7 @@\n   <!-- This POM is ONLY to initiate the modules to be built. -->\n   <modules>\n     <module>api</module>\n+    <module>bootstrap</module>\n     <module>cache</module>\n     <module>runtime</module>\n     <module>spi</module>",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/c04646f517b908e8e25f56dc155aa2dfd8bf3471/pom.xml",
                "sha": "57a65ef2fb4fc2aa26d43d5e65484212e35bab0d",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/c04646f517b908e8e25f56dc155aa2dfd8bf3471/runtime/pom.xml",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/runtime/pom.xml?ref=c04646f517b908e8e25f56dc155aa2dfd8bf3471",
                "deletions": 4,
                "filename": "runtime/pom.xml",
                "patch": "@@ -1,17 +1,21 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n   <parent>\n     <groupId>org.qi4j</groupId>\n     <artifactId>master</artifactId>\n     <version>0.1.0-SNAPSHOT</version>\n   </parent>\n+\n   <modelVersion>4.0.0</modelVersion>\n+\n   <groupId>org.qi4j.core</groupId>\n   <artifactId>qi4j-runtime</artifactId>\n-  <name>Qi4J Core - Runtime</name>\n   <version>0.1.0-SNAPSHOT</version>\n+\n+  <name>Qi4J Core - Runtime</name>\n+\n   <dependencies>\n     <dependency>\n       <groupId>org.qi4j.core</groupId>\n@@ -38,4 +42,4 @@\n       <version>2.1_3</version>\n     </dependency>\n   </dependencies>\n-</project>\n\\ No newline at end of file\n+</project>",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/c04646f517b908e8e25f56dc155aa2dfd8bf3471/runtime/pom.xml",
                "sha": "d5272d93311d4e6bc5b38b09158e3a0595063be1",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/c04646f517b908e8e25f56dc155aa2dfd8bf3471/runtime/src/main/java/org/qi4j/runtime/InstanceFactoryImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/runtime/src/main/java/org/qi4j/runtime/InstanceFactoryImpl.java?ref=c04646f517b908e8e25f56dc155aa2dfd8bf3471",
                "deletions": 0,
                "filename": "runtime/src/main/java/org/qi4j/runtime/InstanceFactoryImpl.java",
                "patch": "@@ -53,6 +53,9 @@ public Object newInstance( ObjectBinding objectBinding, InjectionContext context\n                 i++;\n             }\n \n+            // EFY: This is required to be able to instantiate package protected class\n+            constructor.setAccessible( true );\n+\n             // Invoke constructor\n             instance = constructor.newInstance( parameters );\n         }",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/c04646f517b908e8e25f56dc155aa2dfd8bf3471/runtime/src/main/java/org/qi4j/runtime/InstanceFactoryImpl.java",
                "sha": "5ff92cbb5f8147f50cde6d60143d2417e1ee50ae",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/c04646f517b908e8e25f56dc155aa2dfd8bf3471/runtime/src/main/java/org/qi4j/runtime/ObjectBuilderImpl.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/runtime/src/main/java/org/qi4j/runtime/ObjectBuilderImpl.java?ref=c04646f517b908e8e25f56dc155aa2dfd8bf3471",
                "deletions": 16,
                "filename": "runtime/src/main/java/org/qi4j/runtime/ObjectBuilderImpl.java",
                "patch": "@@ -1,4 +1,4 @@\n-/*  Copyright 2007 Rickard \ufffdberg.\r\n+/*  Copyright 2007 Rickard \ufffdberg.\r\n  *\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n@@ -16,11 +16,14 @@\n  */\r\n package org.qi4j.runtime;\r\n \r\n-import java.util.Collections;\r\n+import static java.util.Collections.emptySet;\r\n import java.util.Iterator;\r\n import java.util.LinkedHashSet;\r\n import java.util.Set;\r\n+import org.qi4j.CompositeBuilderFactory;\r\n import org.qi4j.ObjectBuilder;\r\n+import org.qi4j.ObjectBuilderFactory;\r\n+import static org.qi4j.composite.NullArgumentException.validateNotNull;\r\n import org.qi4j.runtime.structure.ModuleContext;\r\n import org.qi4j.spi.composite.ObjectBinding;\r\n import org.qi4j.spi.dependency.InjectionContext;\r\n@@ -39,31 +42,41 @@\n     private Set adaptContext;\r\n     private Object decoratedObject;\r\n \r\n-\r\n-    ObjectBuilderImpl( ObjectBinding objectBinding, ModuleContext moduleContext, InstanceFactory instanceFactory )\r\n+    ObjectBuilderImpl( ObjectBinding anObjectBinding, ModuleContext aModuleContext, InstanceFactory anInstanceFactory )\r\n+        throws IllegalArgumentException\r\n     {\r\n-        this.objectBinding = objectBinding;\r\n-        this.moduleContext = moduleContext;\r\n-        this.instanceFactory = instanceFactory;\r\n+        validateNotNull( \"anObjectBinding\", anObjectBinding );\r\n+        validateNotNull( \"aModuleContext\", aModuleContext );\r\n+        validateNotNull( \"anInstanceFactory\", anInstanceFactory );\r\n+\r\n+        objectBinding = anObjectBinding;\r\n+        moduleContext = aModuleContext;\r\n+        instanceFactory = anInstanceFactory;\r\n+\r\n+        adaptContext = emptySet();\r\n     }\r\n \r\n-    public void adapt( Object adaptedObject )\r\n+    @SuppressWarnings( \"unchecked\" )\r\n+    public void adapt( Object anAdaptedObject )\r\n     {\r\n-        getAdaptContext().add( adaptedObject );\r\n+        Set context = getAdaptContext();\r\n+        context.add( anAdaptedObject );\r\n     }\r\n \r\n-    public void decorate( Object decoratedObject )\r\n+    public void decorate( Object aDecoratedObject )\r\n     {\r\n-        this.decoratedObject = decoratedObject;\r\n+        decoratedObject = aDecoratedObject;\r\n     }\r\n \r\n+    @SuppressWarnings( \"unchecked\" )\r\n     public T newInstance()\r\n     {\r\n         // Instantiate object\r\n-        Set adapt = adaptContext == null ? Collections.EMPTY_SET : adaptContext;\r\n+        CompositeBuilderFactory compBuilderFactory = moduleContext.getCompositeBuilderFactory();\r\n+        ObjectBuilderFactory objBuilderFactory = moduleContext.getObjectBuilderFactory();\r\n \r\n-        // TODO Fix refs to app and module!!\r\n-        InjectionContext context = new ObjectInjectionContext( null, null, moduleContext.getModuleBinding(), adapt, decoratedObject );\r\n+        InjectionContext context = new ObjectInjectionContext(\r\n+            compBuilderFactory, objBuilderFactory, moduleContext.getModuleBinding(), adaptContext, decoratedObject );\r\n         T instance = (T) instanceFactory.newInstance( objectBinding, context );\r\n         return instance;\r\n     }\r\n@@ -93,7 +106,7 @@ public void remove()\n     public void inject( T instance )\r\n     {\r\n         // Inject existing object\r\n-        Set adapt = adaptContext == null ? Collections.EMPTY_SET : adaptContext;\r\n+        Set adapt = adaptContext == null ? emptySet() : adaptContext;\r\n \r\n         InjectionContext context = new ObjectInjectionContext( null, null, moduleContext.getModuleBinding(), adapt, decoratedObject );\r\n         instanceFactory.inject( instance, objectBinding, context );\r\n@@ -102,10 +115,11 @@ public void inject( T instance )\n     // Private ------------------------------------------------------\r\n     private Set getAdaptContext()\r\n     {\r\n-        if( adaptContext == null )\r\n+        if( adaptContext == emptySet() )\r\n         {\r\n             adaptContext = new LinkedHashSet();\r\n         }\r\n+\r\n         return adaptContext;\r\n     }\r\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/c04646f517b908e8e25f56dc155aa2dfd8bf3471/runtime/src/main/java/org/qi4j/runtime/ObjectBuilderImpl.java",
                "sha": "305a439804ff0843d315466e6a7e3273c38e9ca9",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/c04646f517b908e8e25f56dc155aa2dfd8bf3471/runtime/src/main/java/org/qi4j/runtime/composite/CompositeMethodContext.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/runtime/src/main/java/org/qi4j/runtime/composite/CompositeMethodContext.java?ref=c04646f517b908e8e25f56dc155aa2dfd8bf3471",
                "deletions": 11,
                "filename": "runtime/src/main/java/org/qi4j/runtime/composite/CompositeMethodContext.java",
                "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, Rickard \ufffdberg. All Rights Reserved.\n+ * Copyright (c) 2007, Rickard \ufffdberg. All Rights Reserved.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -35,6 +35,8 @@\n import org.qi4j.spi.composite.CompositeMethodBinding;\n import org.qi4j.spi.composite.ConcernBinding;\n import org.qi4j.spi.composite.ConstraintBinding;\n+import org.qi4j.spi.composite.ConstraintModel;\n+import org.qi4j.spi.composite.ConstraintResolution;\n import org.qi4j.spi.composite.ModifierModel;\n import org.qi4j.spi.composite.ParameterBinding;\n import org.qi4j.spi.composite.ParameterConstraintsBinding;\n@@ -84,15 +86,16 @@ CompositeMethodInstance newCompositeMethodInstance( ModuleContext moduleContext,\n \n                 Object modifies = getModifies( method, classloader, previousConcern, concernBinding.getConcernResolution().getConcernModel() );\n \n-                ModifierInjectionContext modifierContext = new ModifierInjectionContext( moduleContext.getCompositeBuilderFactory(),\n-                                                                                         moduleContext.getObjectBuilderFactory(),\n-                                                                                         moduleContext.getModuleBinding(),\n-                                                                                         compositeBinding,\n-                                                                                         proxyHandler,\n-                                                                                         modifies,\n-                                                                                         compositeMethodBinding.getCompositeMethodResolution().getCompositeMethodModel().getMethod(),\n-                                                                                         compositeMethodBinding.getMixinBinding(),\n-                                                                                         proxyHandler );\n+                ModifierInjectionContext modifierContext = new ModifierInjectionContext(\n+                    moduleContext.getCompositeBuilderFactory(),\n+                    moduleContext.getObjectBuilderFactory(),\n+                    moduleContext.getModuleBinding(),\n+                    compositeBinding,\n+                    proxyHandler,\n+                    modifies,\n+                    compositeMethodBinding.getCompositeMethodResolution().getCompositeMethodModel().getMethod(),\n+                    compositeMethodBinding.getMixinBinding(),\n+                    proxyHandler );\n                 previousConcern = runtime.getInstanceFactory().newInstance( concernBinding, modifierContext );\n             }\n         }\n@@ -105,10 +108,19 @@ CompositeMethodInstance newCompositeMethodInstance( ModuleContext moduleContext,\n         {\n             List<ConstraintInstance> constraintInstances = new ArrayList<ConstraintInstance>();\n             ParameterConstraintsBinding parameterConstraintsBinding = parameterBinding.getParameterConstraintsBinding();\n+\n+            if( parameterConstraintsBinding == null )\n+            {\n+                continue;\n+            }\n+\n             Map<Annotation, ConstraintBinding> constraintBindings = parameterConstraintsBinding.getConstraintBindings();\n             for( Map.Entry<Annotation, ConstraintBinding> entry : constraintBindings.entrySet() )\n             {\n-                Class<? extends ParameterConstraint> constraintType = entry.getValue().getConstraintResolution().getConstraintModel().getConstraintType();\n+                ConstraintBinding constraintBinding = entry.getValue();\n+                ConstraintResolution constraintResolution = constraintBinding.getConstraintResolution();\n+                ConstraintModel constraintModel = constraintResolution.getConstraintModel();\n+                Class<? extends ParameterConstraint> constraintType = constraintModel.getConstraintType();\n                 try\n                 {\n                     ParameterConstraint constraintInstance = constraintType.newInstance();",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/c04646f517b908e8e25f56dc155aa2dfd8bf3471/runtime/src/main/java/org/qi4j/runtime/composite/CompositeMethodContext.java",
                "sha": "39af3990a6370331c4c967822e320a15a3ffbcce",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/c04646f517b908e8e25f56dc155aa2dfd8bf3471/spi/pom.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/spi/pom.xml?ref=c04646f517b908e8e25f56dc155aa2dfd8bf3471",
                "deletions": 3,
                "filename": "spi/pom.xml",
                "patch": "@@ -1,7 +1,7 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n   <parent>\r\n     <groupId>org.qi4j</groupId>\r\n     <artifactId>master</artifactId>\r\n@@ -19,4 +19,4 @@\n       <version>0.1.0-SNAPSHOT</version>\r\n     </dependency>\r\n   </dependencies>\r\n-</project>\n\\ No newline at end of file\n+</project>\r",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/c04646f517b908e8e25f56dc155aa2dfd8bf3471/spi/pom.xml",
                "sha": "0edf449089a05eb11d464902a85c009a77105ef6",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/c04646f517b908e8e25f56dc155aa2dfd8bf3471/spi/src/main/java/org/qi4j/spi/serialization/CompositeOutputStream.java",
                "changes": 73,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/spi/src/main/java/org/qi4j/spi/serialization/CompositeOutputStream.java?ref=c04646f517b908e8e25f56dc155aa2dfd8bf3471",
                "deletions": 40,
                "filename": "spi/src/main/java/org/qi4j/spi/serialization/CompositeOutputStream.java",
                "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, Rickard \ufffdberg. All Rights Reserved.\n+ * Copyright (c) 2007, Rickard \ufffdberg. All Rights Reserved.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,15 +17,6 @@\n import java.io.IOException;\n import java.io.ObjectOutputStream;\n import java.io.OutputStream;\n-import java.io.Serializable;\n-import java.lang.reflect.Proxy;\n-import java.util.HashMap;\n-import java.util.Map;\n-import org.qi4j.Composite;\n-import org.qi4j.entity.EntityComposite;\n-import org.qi4j.runtime.composite.CompositeInstance;\n-import org.qi4j.spi.composite.CompositeModel;\n-import org.qi4j.spi.composite.CompositeState;\n \n /**\n  * TODO\n@@ -39,35 +30,37 @@ public CompositeOutputStream( OutputStream out )\n         enableReplaceObject( true );\n     }\n \n-    protected Object replaceObject( Object obj ) throws IOException\n-    {\n-        if( obj instanceof Composite )\n-        {\n-            Composite composite = (Composite) obj;\n-            CompositeInstance compositeInstance = CompositeInstance.getCompositeInstance( obj );\n-            CompositeModel compositeObject = compositeInstance.getContext().getCompositeModel();\n-            Class compositeInterface = compositeObject.getCompositeClass();\n-            if( obj instanceof EntityComposite )\n-            {\n-                String id = ( (EntityComposite) composite ).getIdentity();\n-                return new SerializedEntity( id, compositeInterface );\n-            }\n-            else\n-            {\n-                Map<Class, Object> mixinsToSave = new HashMap<Class, Object>();\n-                CompositeState mixinsHolder = (CompositeState) Proxy.getInvocationHandler( obj );\n-                Object[] existingMixins = mixinsHolder.getMixins();\n-                for( Object existingMixin : existingMixins )\n-                {\n-                    if( existingMixin instanceof Serializable )\n-                    {\n-                        mixinsToSave.put( existingMixin.getClass(), existingMixin );\n-                    }\n-                }\n-                return new SerializedComposite( mixinsToSave, compositeInterface );\n-            }\n-        }\n-        return obj;\n-    }\n+    // TODO: EFY: Commented out, as this introduce cyclic dependencies between core-spi and core-runtime\n+    // TODO: EFY: and nobody use this method.\n+//    protected Object replaceObject( Object obj ) throws IOException\n+//    {\n+//        if( obj instanceof Composite )\n+//        {\n+//            Composite composite = (Composite) obj;\n+//            CompositeInstance compositeInstance = CompositeInstance.getCompositeInstance( obj );\n+//            CompositeModel compositeObject = compositeInstance.getContext().getCompositeModel();\n+//            Class compositeInterface = compositeObject.getCompositeClass();\n+//            if( obj instanceof EntityComposite )\n+//            {\n+//                String id = ( (EntityComposite) composite ).getIdentity();\n+//                return new SerializedEntity( id, compositeInterface );\n+//            }\n+//            else\n+//            {\n+//                Map<Class, Object> mixinsToSave = new HashMap<Class, Object>();\n+//                CompositeState mixinsHolder = (CompositeState) Proxy.getInvocationHandler( obj );\n+//                Object[] existingMixins = mixinsHolder.getMixins();\n+//                for( Object existingMixin : existingMixins )\n+//                {\n+//                    if( existingMixin instanceof Serializable )\n+//                    {\n+//                        mixinsToSave.put( existingMixin.getClass(), existingMixin );\n+//                    }\n+//                }\n+//                return new SerializedComposite( mixinsToSave, compositeInterface );\n+//            }\n+//        }\n+//        return obj;\n+//    }\n \n }",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/c04646f517b908e8e25f56dc155aa2dfd8bf3471/spi/src/main/java/org/qi4j/spi/serialization/CompositeOutputStream.java",
                "sha": "77c7016bddee9ff1496a7b321fd20e0b5454608b",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/c04646f517b908e8e25f56dc155aa2dfd8bf3471/tests/src/test/java/org/qi4j/test/model1/CompositeFactoryImplTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/tests/src/test/java/org/qi4j/test/model1/CompositeFactoryImplTest.java?ref=c04646f517b908e8e25f56dc155aa2dfd8bf3471",
                "deletions": 5,
                "filename": "tests/src/test/java/org/qi4j/test/model1/CompositeFactoryImplTest.java",
                "patch": "@@ -12,25 +12,29 @@\n  */\r\n package org.qi4j.test.model1;\r\n \r\n+import org.qi4j.CompositeBuilder;\r\n+import org.qi4j.bootstrap.ModuleAssembly;\r\n import org.qi4j.spi.composite.InvalidCompositeException;\r\n import org.qi4j.test.AbstractQi4jTest;\r\n \r\n public class CompositeFactoryImplTest extends AbstractQi4jTest\r\n {\r\n-    protected void setUp()\r\n-        throws Exception\r\n+    public void configure( ModuleAssembly module )\r\n     {\r\n-        super.setUp();\r\n+        // This is required to instantiate [Composition9] composite in [testNewComposition9]\r\n+        module.addComposite( Composition9.class, false );\r\n     }\r\n \r\n+    @SuppressWarnings( \"unchecked\" )\r\n     public void testNewInstanceNotExtendingComposite()\r\n         throws Exception\r\n     {\r\n \r\n         try\r\n         {\r\n             Class aClass = Composition8.class;\r\n-            Composition8 composition8 = (Composition8) compositeBuilderFactory.newCompositeBuilder( aClass ).newInstance();\r\n+            CompositeBuilder builder = compositeBuilderFactory.newCompositeBuilder( aClass );\r\n+            builder.newInstance();\r\n             fail( \"CompositeBuilderFactory.newInstance() should return CompositeInstantiationException when creating a new instance for \" + aClass.getName() );\r\n         }\r\n         catch( InvalidCompositeException e )\r\n@@ -44,7 +48,8 @@ public void testNewComposition9()\n     {\r\n         try\r\n         {\r\n-            Composition9 composition9 = compositeBuilderFactory.newCompositeBuilder( Composition9.class ).newInstance();\r\n+            CompositeBuilder<Composition9> builder = compositeBuilderFactory.newCompositeBuilder( Composition9.class );\r\n+            Composition9 composition9 = builder.newInstance();\r\n             composition9.setValue( \"test value\" );\r\n         }\r\n         catch( Exception e )\r",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/c04646f517b908e8e25f56dc155aa2dfd8bf3471/tests/src/test/java/org/qi4j/test/model1/CompositeFactoryImplTest.java",
                "sha": "5c5c982f43400d3c2be42b77956a431d9071d748",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/c04646f517b908e8e25f56dc155aa2dfd8bf3471/testsupport/pom.xml",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/testsupport/pom.xml?ref=c04646f517b908e8e25f56dc155aa2dfd8bf3471",
                "deletions": 3,
                "filename": "testsupport/pom.xml",
                "patch": "@@ -1,7 +1,7 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n   <parent>\r\n     <groupId>org.qi4j</groupId>\r\n     <artifactId>master</artifactId>\r\n@@ -18,6 +18,11 @@\n       <artifactId>qi4j-api</artifactId>\r\n       <version>0.1.0-SNAPSHOT</version>\r\n     </dependency>\r\n+    <dependency>\r\n+      <groupId>org.qi4j.core</groupId>\r\n+      <artifactId>qi4j-bootstrap</artifactId>\r\n+      <version>0.1.0-SNAPSHOT</version>\r\n+    </dependency>\r\n     <dependency>\r\n       <groupId>org.qi4j.core</groupId>\r\n       <artifactId>qi4j-runtime</artifactId>\r\n@@ -28,5 +33,10 @@\n       <artifactId>junit</artifactId>\r\n       <scope>compile</scope>\r\n     </dependency>\r\n+    <dependency>\r\n+      <groupId>junit</groupId>\r\n+      <artifactId>junit</artifactId>\r\n+      <scope>compile</scope>\r\n+    </dependency>\r\n   </dependencies>\r\n-</project>\n\\ No newline at end of file\n+</project>\r",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/c04646f517b908e8e25f56dc155aa2dfd8bf3471/testsupport/pom.xml",
                "sha": "7e984e4da197bd3d9f0c31ed6d3d50021065846b",
                "status": "modified"
            }
        ],
        "message": "o Fix test cases.\n  o core-tests\n    o Fix [NullPointerException] bug at [org.qi4j.runtime.composite.CompositeModelContext]:\n      o This exception is thrown when there is no constraint declaration in the \"method to invoke\"s parameters.\no Fix [TODO] at [org.qi4j.runtime.ObjectBuilderImpl#newInstance]\no First attempt to refactor [Chronos] application.\n  o The [web.xml] to instantiate the [ChronosWebAppFactory] is currently commented out.\n\n\ngit-svn-id: https://scm.ops4j.org/repos/ops4j/projects/qi4j/core@9481 9b982a3c-3ae5-0310-a4bc-d9a3335569bd",
        "parent": "https://github.com/apache/attic-polygene-java/commit/fb0da03ec41908bcd809b7d91aed3adcb77f8ac0",
        "patched_files": [
            "pom.xml",
            "InstanceFactoryImpl.java",
            "CompositeOutputStream.java",
            "ObjectBuilderImpl.java",
            "CompositeMethodContext.java"
        ],
        "repo": "attic-polygene-java",
        "unit_tests": [
            "CompositeFactoryImplTest.java"
        ]
    },
    "attic-polygene-java_d930661": {
        "bug_id": "attic-polygene-java_d930661",
        "commit": "https://github.com/apache/attic-polygene-java/commit/d93066101075e3533567d4b63d21173d2de74fce",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/d93066101075e3533567d4b63d21173d2de74fce/api/src/main/java/org/qi4j/composite/AmbiguousMixinTypeException.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/api/src/main/java/org/qi4j/composite/AmbiguousMixinTypeException.java?ref=d93066101075e3533567d4b63d21173d2de74fce",
                "deletions": 1,
                "filename": "api/src/main/java/org/qi4j/composite/AmbiguousMixinTypeException.java",
                "patch": "@@ -17,7 +17,8 @@\n  */\n package org.qi4j.composite;\n \n-/** This Exception is thrown when more than one Composite implements a MixinType that one tries\n+/**\n+ * This Exception is thrown when more than one Composite implements a MixinType that one tries\n  * to use to create a Composite instance from.\n  * <p>\n  * For instance;",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/d93066101075e3533567d4b63d21173d2de74fce/api/src/main/java/org/qi4j/composite/AmbiguousMixinTypeException.java",
                "sha": "4233240625cef864f287ccb9aa439c4762d88977",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/d93066101075e3533567d4b63d21173d2de74fce/api/src/main/java/org/qi4j/composite/Composite.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/api/src/main/java/org/qi4j/composite/Composite.java?ref=d93066101075e3533567d4b63d21173d2de74fce",
                "deletions": 1,
                "filename": "api/src/main/java/org/qi4j/composite/Composite.java",
                "patch": "@@ -14,8 +14,8 @@\n  */\n package org.qi4j.composite;\n \n-import org.qi4j.property.PropertyMixin;\n import java.io.Serializable;\n+import org.qi4j.property.PropertyMixin;\n \n /**\n  * All Composite objects must implement this interface. Let the",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/d93066101075e3533567d4b63d21173d2de74fce/api/src/main/java/org/qi4j/composite/Composite.java",
                "sha": "ec5428d7034f695829a1d90eee8dd390c700bc37",
                "status": "modified"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/d93066101075e3533567d4b63d21173d2de74fce/api/src/main/java/org/qi4j/composite/CompositeNotRegisteredException.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/api/src/main/java/org/qi4j/composite/CompositeNotRegisteredException.java?ref=d93066101075e3533567d4b63d21173d2de74fce",
                "deletions": 0,
                "filename": "api/src/main/java/org/qi4j/composite/CompositeNotRegisteredException.java",
                "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2008, Niclas Hedhman. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.qi4j.composite;\n+\n+import org.qi4j.structure.Module;\n+\n+public class CompositeNotRegisteredException extends InvalidApplicationException\n+{\n+    private Class<? extends Composite> compositeType;\n+    private Module module;\n+\n+    public CompositeNotRegisteredException( Class<? extends Composite> compositeType, Module module )\n+    {\n+        super( \"Trying to find unregistered composite of type [\" + compositeType.getName() + \"] in module [\" +\n+               module.name().get() + \"].\" );\n+        this.compositeType = compositeType;\n+        this.module = module;\n+    }\n+\n+    public Class<? extends Composite> compositeType()\n+    {\n+        return compositeType;\n+    }\n+\n+    public Module module()\n+    {\n+        return module;\n+    }\n+}",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/d93066101075e3533567d4b63d21173d2de74fce/api/src/main/java/org/qi4j/composite/CompositeNotRegisteredException.java",
                "sha": "2c5616731cfd9e53dd5a0a0d35d7d344ae90ef15",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/d93066101075e3533567d4b63d21173d2de74fce/api/src/main/java/org/qi4j/composite/InvalidApplicationException.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/api/src/main/java/org/qi4j/composite/InvalidApplicationException.java?ref=d93066101075e3533567d4b63d21173d2de74fce",
                "deletions": 1,
                "filename": "api/src/main/java/org/qi4j/composite/InvalidApplicationException.java",
                "patch": "@@ -19,7 +19,7 @@\n  * This happens primarily when client code tries to instantiate Composites\n  * and objects which have not been registered in the ModuleAssembly.\n  */\n-public class InvalidApplicationException\n+public abstract class InvalidApplicationException\n     extends RuntimeException\n {\n     public InvalidApplicationException( String string )",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/d93066101075e3533567d4b63d21173d2de74fce/api/src/main/java/org/qi4j/composite/InvalidApplicationException.java",
                "sha": "03c0318e5ba4d157877faa481c1a7128930f1f5b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/d93066101075e3533567d4b63d21173d2de74fce/api/src/main/java/org/qi4j/composite/MixinMappingException.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/api/src/main/java/org/qi4j/composite/MixinMappingException.java?ref=d93066101075e3533567d4b63d21173d2de74fce",
                "deletions": 1,
                "filename": "api/src/main/java/org/qi4j/composite/MixinMappingException.java",
                "patch": "@@ -17,7 +17,8 @@\n  */\n package org.qi4j.composite;\n \n-/** This Exception is thrown when it is not possible to map the MixinType to a valid\n+/**\n+ * This Exception is thrown when it is not possible to map the MixinType to a valid\n  * CompositeType.\n  */\n public class MixinMappingException extends RuntimeException",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/d93066101075e3533567d4b63d21173d2de74fce/api/src/main/java/org/qi4j/composite/MixinMappingException.java",
                "sha": "9e25ba70c8e807a6957b478a018cf4e466036d3b",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/d93066101075e3533567d4b63d21173d2de74fce/api/src/main/java/org/qi4j/composite/ObjectBuilder.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/api/src/main/java/org/qi4j/composite/ObjectBuilder.java?ref=d93066101075e3533567d4b63d21173d2de74fce",
                "deletions": 2,
                "filename": "api/src/main/java/org/qi4j/composite/ObjectBuilder.java",
                "patch": "@@ -38,10 +38,11 @@\n      */\r\n     ObjectBuilder<T> use( Object... objects );\r\n \r\n-    /** Creates a new instance from this ObjectBuilder.\r\n+    /**\r\n+     * Creates a new instance from this ObjectBuilder.\r\n      *\r\n      * @return An object of type <code><i>T</i></code>.\r\n-     * @throws InstantiationException If the object class is not compatible with the  \r\n+     * @throws InstantiationException If the object class is not compatible with the\r\n      */\r\n     T newInstance()\r\n         throws InstantiationException;\r",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/d93066101075e3533567d4b63d21173d2de74fce/api/src/main/java/org/qi4j/composite/ObjectBuilder.java",
                "sha": "22ca82420262aab1ab055d996c707e5a2b421b96",
                "status": "modified"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/d93066101075e3533567d4b63d21173d2de74fce/api/src/main/java/org/qi4j/composite/ObjectNotRegisteredException.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/api/src/main/java/org/qi4j/composite/ObjectNotRegisteredException.java?ref=d93066101075e3533567d4b63d21173d2de74fce",
                "deletions": 0,
                "filename": "api/src/main/java/org/qi4j/composite/ObjectNotRegisteredException.java",
                "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2008, Niclas Hedhman. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.qi4j.composite;\n+\n+import org.qi4j.structure.Module;\n+\n+public class ObjectNotRegisteredException extends InvalidApplicationException\n+{\n+    private Class<?> objectType;\n+    private Module module;\n+\n+    public ObjectNotRegisteredException( Class<?> type, Module module )\n+    {\n+        super( \"Trying to find unregistered object of type [\" + type.getName() + \"] in module [\" +\n+               module.name().get() + \"].\" );\n+        this.objectType = type;\n+        this.module = module;\n+    }\n+\n+    public Class<?> objectType()\n+    {\n+        return objectType;\n+    }\n+\n+    public Module module()\n+    {\n+        return module;\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/d93066101075e3533567d4b63d21173d2de74fce/api/src/main/java/org/qi4j/composite/ObjectNotRegisteredException.java",
                "sha": "a2da3c0bc80d28bbd734cce2d73cfbacdfe3d76e",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/d93066101075e3533567d4b63d21173d2de74fce/api/src/main/java/org/qi4j/composite/internal/package.html",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/api/src/main/java/org/qi4j/composite/internal/package.html?ref=d93066101075e3533567d4b63d21173d2de74fce",
                "deletions": 1,
                "filename": "api/src/main/java/org/qi4j/composite/internal/package.html",
                "patch": "@@ -1,7 +1,8 @@\n <html>\n <body>\n <h1>Internal/Private package for the API</h1>\n+\n <p>This is an internal package, and no classes in this package is part of the API and compatibility\n-with these classes will not be attempted.</p>\n+    with these classes will not be attempted.</p>\n </body>\n </html>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/d93066101075e3533567d4b63d21173d2de74fce/api/src/main/java/org/qi4j/composite/internal/package.html",
                "sha": "985a2adf16ffd5e1f4315078de7e419425406c73",
                "status": "modified"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/d93066101075e3533567d4b63d21173d2de74fce/api/src/main/java/org/qi4j/entity/EntityNotRegisteredException.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/api/src/main/java/org/qi4j/entity/EntityNotRegisteredException.java?ref=d93066101075e3533567d4b63d21173d2de74fce",
                "deletions": 0,
                "filename": "api/src/main/java/org/qi4j/entity/EntityNotRegisteredException.java",
                "patch": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright (c) 2008, Niclas Hedhman. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.qi4j.entity;\n+\n+import org.qi4j.composite.InvalidApplicationException;\n+import org.qi4j.composite.Composite;\n+import org.qi4j.structure.Module;\n+\n+public class EntityNotRegisteredException extends InvalidApplicationException\n+{\n+    private Class<? extends EntityComposite> entityType;\n+    private Module module;\n+\n+    public EntityNotRegisteredException( Class<? extends EntityComposite> entityType, Module module )\n+    {\n+        super( \"Trying to find unregistered composite of type [\" + entityType.getName() + \"] in module [\" +\n+                        module.name().get() + \"].\" );\n+        this.entityType = entityType;\n+        this.module = module;\n+    }\n+\n+    public Class<? extends EntityComposite> compositeType()\n+    {\n+        return entityType;\n+    }\n+\n+    public Module module()\n+    {\n+        return this.module;\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/d93066101075e3533567d4b63d21173d2de74fce/api/src/main/java/org/qi4j/entity/EntityNotRegisteredException.java",
                "sha": "d3dccefd893bfab0fbbfb6da450c1f8ea096b56c",
                "status": "added"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/d93066101075e3533567d4b63d21173d2de74fce/api/src/main/java/org/qi4j/service/ServiceNotRegisteredException.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/api/src/main/java/org/qi4j/service/ServiceNotRegisteredException.java?ref=d93066101075e3533567d4b63d21173d2de74fce",
                "deletions": 0,
                "filename": "api/src/main/java/org/qi4j/service/ServiceNotRegisteredException.java",
                "patch": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright (c) 2008, Niclas Hedhman. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.qi4j.service;\n+\n+import org.qi4j.composite.InvalidApplicationException;\n+import org.qi4j.composite.Composite;\n+\n+public class ServiceNotRegisteredException extends InvalidApplicationException\n+{\n+    private Class<? extends ServiceComposite> serviceType;\n+\n+    public ServiceNotRegisteredException( Class<? extends ServiceComposite> serviceType, String message )\n+    {\n+        super( message );\n+        this.serviceType = serviceType;\n+    }\n+\n+    public Class<? extends ServiceComposite> serviceType()\n+    {\n+        return serviceType;\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/d93066101075e3533567d4b63d21173d2de74fce/api/src/main/java/org/qi4j/service/ServiceNotRegisteredException.java",
                "sha": "55686104f50b4762d1b9b0d03af4d46d42d58a64",
                "status": "added"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/d93066101075e3533567d4b63d21173d2de74fce/runtime/src/main/java/org/qi4j/runtime/entity/InvalidAssociationAccessException.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/runtime/src/main/java/org/qi4j/runtime/entity/InvalidAssociationAccessException.java?ref=d93066101075e3533567d4b63d21173d2de74fce",
                "deletions": 0,
                "filename": "runtime/src/main/java/org/qi4j/runtime/entity/InvalidAssociationAccessException.java",
                "patch": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright (c) 2008, Niclas Hedhman. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.qi4j.runtime.entity;\n+\n+import org.qi4j.composite.InvalidApplicationException;\n+import java.lang.reflect.Method;\n+\n+public class InvalidAssociationAccessException extends InvalidApplicationException\n+{\n+    private Method accessor;\n+\n+    public InvalidAssociationAccessException( Method accessor )\n+    {\n+        super( \"May not use Associations in Composites that are not accessed through a UnitOfWork: \" + accessor.getName() );\n+        this.accessor = accessor;\n+    }\n+\n+    public Method associationAccessor()\n+    {\n+        return accessor;\n+    }\n+}",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/d93066101075e3533567d4b63d21173d2de74fce/runtime/src/main/java/org/qi4j/runtime/entity/InvalidAssociationAccessException.java",
                "sha": "56daedfdd712dba7cf333c3c567e3debef2dfedb",
                "status": "added"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/d93066101075e3533567d4b63d21173d2de74fce/runtime/src/main/java/org/qi4j/runtime/entity/ObjectAccessException.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/runtime/src/main/java/org/qi4j/runtime/entity/ObjectAccessException.java?ref=d93066101075e3533567d4b63d21173d2de74fce",
                "deletions": 0,
                "filename": "runtime/src/main/java/org/qi4j/runtime/entity/ObjectAccessException.java",
                "patch": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright (c) 2008, Niclas Hedhman. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.qi4j.runtime.entity;\n+\n+import org.qi4j.composite.InvalidApplicationException;\n+\n+public class ObjectAccessException extends InvalidApplicationException\n+{\n+    public ObjectAccessException( String message )\n+    {\n+        super( message );\n+    }\n+}",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/d93066101075e3533567d4b63d21173d2de74fce/runtime/src/main/java/org/qi4j/runtime/entity/ObjectAccessException.java",
                "sha": "f88f6c8f8f8c20213367d23f19980eaabdfc2e62",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/d93066101075e3533567d4b63d21173d2de74fce/runtime/src/main/java/org/qi4j/runtime/entity/UnitOfWorkCompositeBuilder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/runtime/src/main/java/org/qi4j/runtime/entity/UnitOfWorkCompositeBuilder.java?ref=d93066101075e3533567d4b63d21173d2de74fce",
                "deletions": 1,
                "filename": "runtime/src/main/java/org/qi4j/runtime/entity/UnitOfWorkCompositeBuilder.java",
                "patch": "@@ -80,7 +80,7 @@ public UnitOfWorkCompositeBuilder( ModuleInstance moduleInstance, CompositeConte\n \n     public CompositeBuilder<T> use( Object... usedObjects )\n     {\n-        throw new InvalidApplicationException( \"Entities may not use other objects\" );\n+        throw new ObjectAccessException( \"Entities may not use other objects\" );\n     }\n \n     public T newInstance()",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/d93066101075e3533567d4b63d21173d2de74fce/runtime/src/main/java/org/qi4j/runtime/entity/UnitOfWorkCompositeBuilder.java",
                "sha": "a73da22234dd3a8008882cc14cc1b5579e54fa68",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/d93066101075e3533567d4b63d21173d2de74fce/runtime/src/main/java/org/qi4j/runtime/entity/UnitOfWorkInstance.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/runtime/src/main/java/org/qi4j/runtime/entity/UnitOfWorkInstance.java?ref=d93066101075e3533567d4b63d21173d2de74fce",
                "deletions": 10,
                "filename": "runtime/src/main/java/org/qi4j/runtime/entity/UnitOfWorkInstance.java",
                "patch": "@@ -33,6 +33,7 @@\n import org.qi4j.entity.UnitOfWork;\n import org.qi4j.entity.UnitOfWorkCompletionException;\n import org.qi4j.entity.UnitOfWorkException;\n+import org.qi4j.entity.EntityNotRegisteredException;\n import org.qi4j.query.Query;\n import org.qi4j.query.QueryBuilderFactory;\n import org.qi4j.runtime.composite.CompositeContext;\n@@ -48,6 +49,7 @@\n import org.qi4j.spi.entity.QualifiedIdentity;\n import org.qi4j.spi.entity.StateCommitter;\n import org.qi4j.spi.structure.CompositeDescriptor;\n+import org.qi4j.spi.composite.CompositeResolution;\n import org.qi4j.structure.Module;\n \n public final class UnitOfWorkInstance\n@@ -166,18 +168,22 @@ public void remove( Object entity )\n \n                 if( module == null )\n                 {\n-                    throw new InvalidApplicationException(\n-                        \"Trying to find unregistered composite of type [\" + compositeType.getName() + \"] in module [\" +\n-                        moduleInstance.getModule().name().get() + \"].\"\n-                    );\n+                    throw new EntityNotRegisteredException( compositeType, moduleInstance.getModule() );\n                 }\n \n                 CompositeContext compositeContext = module.getModuleInstance().getModuleContext().getCompositeContext( compositeType );\n+                if( compositeContext == null )\n+                {\n+                    throw new EntityNotRegisteredException( compositeType, moduleInstance.getModule() );\n+                }\n \n-                EntityState state = null;\n+                EntityState state;\n                 try\n                 {\n-                    state = store.getEntityState( compositeContext.getCompositeResolution().getCompositeDescriptor(), new QualifiedIdentity( identity, compositeType.getName() ) );\n+                    CompositeResolution compositeResolution = compositeContext.getCompositeResolution();\n+                    CompositeDescriptor descriptor = compositeResolution.getCompositeDescriptor();\n+                    QualifiedIdentity qualifiedIdentity = new QualifiedIdentity( identity, compositeType.getName() );\n+                    state = store.getEntityState( descriptor, qualifiedIdentity );\n                 }\n                 catch( EntityNotFoundException e )\n                 {\n@@ -237,10 +243,7 @@ public void remove( Object entity )\n \n             if( module == null )\n             {\n-                throw new InvalidApplicationException(\n-                    \"Trying to get reference unregistered composite of type [\" + compositeType.getName() + \"] in module [\" +\n-                    moduleInstance.getModule().name().get() + \"].\"\n-                );\n+                throw new EntityNotRegisteredException( compositeType, moduleInstance.getModule() );\n             }\n \n             CompositeContext compositeContext = module.getModuleInstance().getModuleContext().getCompositeContext( compositeType );",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/d93066101075e3533567d4b63d21173d2de74fce/runtime/src/main/java/org/qi4j/runtime/entity/UnitOfWorkInstance.java",
                "sha": "172a16141e41efd59c73cbd9a58fe160c408afe4",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/d93066101075e3533567d4b63d21173d2de74fce/runtime/src/main/java/org/qi4j/runtime/structure/CompositeBuilderImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/runtime/src/main/java/org/qi4j/runtime/structure/CompositeBuilderImpl.java?ref=d93066101075e3533567d4b63d21173d2de74fce",
                "deletions": 1,
                "filename": "runtime/src/main/java/org/qi4j/runtime/structure/CompositeBuilderImpl.java",
                "patch": "@@ -33,6 +33,7 @@\n import org.qi4j.runtime.composite.CompositeContext;\r\n import org.qi4j.runtime.composite.CompositeInstance;\r\n import org.qi4j.runtime.property.PropertyContext;\r\n+import org.qi4j.runtime.entity.InvalidAssociationAccessException;\r\n import org.qi4j.spi.composite.PropertyResolution;\r\n import org.qi4j.spi.property.ImmutablePropertyInstance;\r\n import org.qi4j.spi.property.PropertyBinding;\r\n@@ -230,7 +231,7 @@ public Property getProperty( Method method )\n \r\n         public AbstractAssociation getAssociation( Method qualifiedName )\r\n         {\r\n-            throw new InvalidApplicationException( \"May not use Associations in Composites that are not accessed through a UnitOfWork\" );\r\n+            throw new InvalidAssociationAccessException( qualifiedName );\r\n         }\r\n     }\r\n }\r",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/d93066101075e3533567d4b63d21173d2de74fce/runtime/src/main/java/org/qi4j/runtime/structure/CompositeBuilderImpl.java",
                "sha": "9c9fa03ac8abde5508de90426b7f9d065dce072f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/d93066101075e3533567d4b63d21173d2de74fce/runtime/src/main/java/org/qi4j/runtime/structure/ModuleCompositeBuilderFactory.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/runtime/src/main/java/org/qi4j/runtime/structure/ModuleCompositeBuilderFactory.java?ref=d93066101075e3533567d4b63d21173d2de74fce",
                "deletions": 12,
                "filename": "runtime/src/main/java/org/qi4j/runtime/structure/ModuleCompositeBuilderFactory.java",
                "patch": "@@ -18,6 +18,7 @@\n import org.qi4j.composite.CompositeBuilder;\n import org.qi4j.composite.CompositeBuilderFactory;\n import org.qi4j.composite.InvalidApplicationException;\n+import org.qi4j.composite.CompositeNotRegisteredException;\n import static org.qi4j.composite.NullArgumentException.*;\n import org.qi4j.runtime.composite.CompositeContext;\n import org.qi4j.spi.structure.ModuleBinding;\n@@ -50,18 +51,7 @@ public ModuleCompositeBuilderFactory( ModuleInstance moduleInstance )\n \n         if( compositeContext == null )\n         {\n-            String compositeTypeName = compositeType.getName();\n-\n-            ModuleContext moduleContext = moduleInstance.getModuleContext();\n-            ModuleBinding moduleBinding = moduleContext.getModuleBinding();\n-            ModuleResolution moduleResolution = moduleBinding.getModuleResolution();\n-            ModuleModel moduleModel = moduleResolution.getModuleModel();\n-            String moduleModelName = moduleModel.getName();\n-\n-            throw new InvalidApplicationException(\n-                \"Trying to create unregistered composite of type [\" + compositeTypeName + \"] in module [\" +\n-                moduleModelName + \"].\"\n-            );\n+            throw new CompositeNotRegisteredException(compositeType, compositeModuleInstance.getModule() );\n         }\n \n         return createBuilder( compositeModuleInstance, compositeContext );",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/d93066101075e3533567d4b63d21173d2de74fce/runtime/src/main/java/org/qi4j/runtime/structure/ModuleCompositeBuilderFactory.java",
                "sha": "1f1d087998efa735853704bcbfe6b81ea9f4673b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/d93066101075e3533567d4b63d21173d2de74fce/runtime/src/main/java/org/qi4j/runtime/structure/ModuleObjectBuilderFactory.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/runtime/src/main/java/org/qi4j/runtime/structure/ModuleObjectBuilderFactory.java?ref=d93066101075e3533567d4b63d21173d2de74fce",
                "deletions": 1,
                "filename": "runtime/src/main/java/org/qi4j/runtime/structure/ModuleObjectBuilderFactory.java",
                "patch": "@@ -17,6 +17,7 @@\n import org.qi4j.composite.InvalidApplicationException;\n import org.qi4j.composite.ObjectBuilder;\n import org.qi4j.composite.ObjectBuilderFactory;\n+import org.qi4j.composite.ObjectNotRegisteredException;\n import org.qi4j.runtime.composite.ObjectContext;\n \n /**\n@@ -49,7 +50,7 @@ public ModuleObjectBuilderFactory( ModuleInstance moduleInstance )\n         // Check if this Composite has been registered properly\n         if( objectContext == null )\n         {\n-            throw new InvalidApplicationException( \"Trying to create unregistered object of type \" + objectType.getName() + \" in module \" + moduleInstance.getModuleContext().getModuleBinding().getModuleResolution().getModuleModel().getName() );\n+            throw new ObjectNotRegisteredException( objectType, moduleInstance.getModule() );\n         }\n \n         // Create a builder",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/d93066101075e3533567d4b63d21173d2de74fce/runtime/src/main/java/org/qi4j/runtime/structure/ModuleObjectBuilderFactory.java",
                "sha": "80e2b88da5a13c0f8b477b3c417edc0f47b100c2",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/d93066101075e3533567d4b63d21173d2de74fce/spi/src/main/java/org/qi4j/spi/query/IndexingMeta.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/spi/src/main/java/org/qi4j/spi/query/IndexingMeta.java?ref=d93066101075e3533567d4b63d21173d2de74fce",
                "deletions": 0,
                "filename": "spi/src/main/java/org/qi4j/spi/query/IndexingMeta.java",
                "patch": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright (c) 2008, Niclas Hedhman. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.qi4j.spi.query;\n+\n+import java.io.Serializable;\n+\n+public class IndexingMeta\n+    implements Serializable\n+{\n+    private boolean ignore;\n+\n+    public IndexingMeta( boolean ignore )\n+    {\n+        this.ignore = ignore;\n+    }\n+\n+    public boolean ignore()\n+    {\n+        return ignore;\n+    }\n+}",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/d93066101075e3533567d4b63d21173d2de74fce/spi/src/main/java/org/qi4j/spi/query/IndexingMeta.java",
                "sha": "f6b1e93a6e911f86d9b9eb50c00c586da19a2730",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/d93066101075e3533567d4b63d21173d2de74fce/spi/src/main/java/org/qi4j/spi/query/IndexingSideEffect.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/spi/src/main/java/org/qi4j/spi/query/IndexingSideEffect.java?ref=d93066101075e3533567d4b63d21173d2de74fce",
                "deletions": 4,
                "filename": "spi/src/main/java/org/qi4j/spi/query/IndexingSideEffect.java",
                "patch": "@@ -33,19 +33,17 @@\n  * @author Alin Dreghiciu\n  * @since March 18, 2008\n  */\n-public abstract class IndexingSideEffect\n-    extends SideEffectOf<EntityStore>\n+public abstract class IndexingSideEffect extends SideEffectOf<EntityStore>\n     implements EntityStore\n {\n-    @Service EntityIndexer indexer;\n+    @Service private EntityIndexer indexer;\n \n     public StateCommitter prepare( Iterable<EntityState> newStates,\n                                    Iterable<EntityState> loadedStates,\n                                    Iterable<QualifiedIdentity> removedStates,\n                                    Module module )\n         throws EntityStoreException\n     {\n-\n         indexer.index( newStates, loadedStates, removedStates, module );\n         return null;\n     }",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/d93066101075e3533567d4b63d21173d2de74fce/spi/src/main/java/org/qi4j/spi/query/IndexingSideEffect.java",
                "sha": "e435b660c8822b74e9025bd8f1c18c5ce6c84913",
                "status": "modified"
            }
        ],
        "message": "o Modularizing the RDF Indexer so we can have persisted and remote repositories.\no Added some more descriptive Exceptions for non-registered Composites/Entities/Services. Also, found one case where the UOW would throw a NPE instead of reporting a missing registration.\n\n\ngit-svn-id: https://scm.ops4j.org/repos/ops4j/projects/qi4j/core@11648 9b982a3c-3ae5-0310-a4bc-d9a3335569bd",
        "parent": "https://github.com/apache/attic-polygene-java/commit/37c1e28de7c14ad822a220e0ae36a9ce0d53ccf9",
        "patched_files": [
            "Composite.java",
            "package.html"
        ],
        "repo": "attic-polygene-java",
        "unit_tests": [
            "TestComposite.java"
        ]
    },
    "attic-polygene-java_e430d01": {
        "bug_id": "attic-polygene-java_e430d01",
        "commit": "https://github.com/apache/attic-polygene-java/commit/e430d01105155b5bda6bd4ac02a61a974da44e54",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/e430d01105155b5bda6bd4ac02a61a974da44e54/buildSrc/src/main/groovy/org/apache/polygene/gradle/structure/distributions/DistributionsPlugin.groovy",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/buildSrc/src/main/groovy/org/apache/polygene/gradle/structure/distributions/DistributionsPlugin.groovy?ref=e430d01105155b5bda6bd4ac02a61a974da44e54",
                "deletions": 1,
                "filename": "buildSrc/src/main/groovy/org/apache/polygene/gradle/structure/distributions/DistributionsPlugin.groovy",
                "patch": "@@ -444,7 +444,6 @@ class DistributionsPlugin implements Plugin<Project>\n         '.gradle/**',\n         'docs/**',\n         'etc/templates/**',\n-        'etc/codestyle-idea.jar',\n         'libs/**'\n       ]\n     } as Action<RatTask> )",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/e430d01105155b5bda6bd4ac02a61a974da44e54/buildSrc/src/main/groovy/org/apache/polygene/gradle/structure/distributions/DistributionsPlugin.groovy",
                "sha": "f6eee1fdff3e36462a0317f0be18998430ccb85a",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/e430d01105155b5bda6bd4ac02a61a974da44e54/core/api/src/main/java/org/apache/polygene/api/configuration/Configuration.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/core/api/src/main/java/org/apache/polygene/api/configuration/Configuration.java?ref=e430d01105155b5bda6bd4ac02a61a974da44e54",
                "deletions": 0,
                "filename": "core/api/src/main/java/org/apache/polygene/api/configuration/Configuration.java",
                "patch": "@@ -252,6 +252,10 @@ public void save()\n             catch( NoSuchEntityException | NoSuchEntityTypeException e )\n             {\n                 EntityDescriptor entityDescriptor = module.typeLookup().lookupEntityModel( configurationType );\n+                if( entityDescriptor == null )\n+                {\n+                    throw new NoSuchConfigurationTypeException( configurationType, module.descriptor() );\n+                }\n                 return (V) initializeConfigurationInstance( entityDescriptor, uow, serviceModel, serviceIdentity );\n             }\n             return configuration;",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/e430d01105155b5bda6bd4ac02a61a974da44e54/core/api/src/main/java/org/apache/polygene/api/configuration/Configuration.java",
                "sha": "a47719fb6de6fef4bb6b0be021fc1e1ed224b54f",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/e430d01105155b5bda6bd4ac02a61a974da44e54/core/api/src/main/java/org/apache/polygene/api/configuration/NoSuchConfigurationTypeException.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/core/api/src/main/java/org/apache/polygene/api/configuration/NoSuchConfigurationTypeException.java?ref=e430d01105155b5bda6bd4ac02a61a974da44e54",
                "deletions": 0,
                "filename": "core/api/src/main/java/org/apache/polygene/api/configuration/NoSuchConfigurationTypeException.java",
                "patch": "@@ -0,0 +1,36 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *\n+ */\n+\n+package org.apache.polygene.api.configuration;\n+\n+import org.apache.polygene.api.structure.ModuleDescriptor;\n+\n+public class NoSuchConfigurationTypeException extends RuntimeException\n+{\n+    private final Class<?> configType;\n+\n+    public NoSuchConfigurationTypeException( Class<?> configType,\n+                                             ModuleDescriptor module\n+                                           )\n+    {\n+        super( \"No configuration type \" + configType.getName() + \" has been registered, or is not visible from \" + module.name() );\n+        this.configType = configType;\n+    }\n+}",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/e430d01105155b5bda6bd4ac02a61a974da44e54/core/api/src/main/java/org/apache/polygene/api/configuration/NoSuchConfigurationTypeException.java",
                "sha": "bce3b06809eeaea8c2cd4c833cd5f5a3d00ea442",
                "status": "added"
            },
            {
                "additions": 124,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/e430d01105155b5bda6bd4ac02a61a974da44e54/core/runtime/src/test/java/org/apache/polygene/runtime/service/ConfigurationConstraintTest.java",
                "changes": 124,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/core/runtime/src/test/java/org/apache/polygene/runtime/service/ConfigurationConstraintTest.java?ref=e430d01105155b5bda6bd4ac02a61a974da44e54",
                "deletions": 0,
                "filename": "core/runtime/src/test/java/org/apache/polygene/runtime/service/ConfigurationConstraintTest.java",
                "patch": "@@ -0,0 +1,124 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *\n+ */\n+package org.apache.polygene.runtime.service;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import org.apache.polygene.api.configuration.Configuration;\n+import org.apache.polygene.api.configuration.ConfigurationComposite;\n+import org.apache.polygene.api.constraint.Constraint;\n+import org.apache.polygene.api.constraint.ConstraintDeclaration;\n+import org.apache.polygene.api.constraint.ConstraintViolationException;\n+import org.apache.polygene.api.constraint.Constraints;\n+import org.apache.polygene.api.injection.scope.This;\n+import org.apache.polygene.api.mixin.Mixins;\n+import org.apache.polygene.api.property.Property;\n+import org.apache.polygene.api.service.ServiceReference;\n+import org.apache.polygene.bootstrap.SingletonAssembler;\n+import org.apache.polygene.entitystore.memory.MemoryEntityStoreService;\n+import org.junit.Test;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Test of configuration for services that Constraints are respected.\n+ */\n+public class ConfigurationConstraintTest\n+{\n+    @Test\n+    public void givenConstrainedConfigurationWhenCorrectValueExpectNoFailure()\n+        throws Exception\n+    {\n+        SingletonAssembler underTest = new SingletonAssembler(\n+            module ->\n+            {\n+                module.defaultServices();\n+                module.services( MemoryEntityStoreService.class );\n+                module.services( TestService.class ).identifiedBy( \"TestService1\" );\n+                module.configurations( TestConfiguration.class );\n+            }\n+        );\n+        ServiceReference<TestService> service = underTest.module().findService( TestService.class );\n+        service.get().test();\n+    }\n+\n+    @Test( expected = ConstraintViolationException.class )\n+    public void givenConstrainedConfigurationWhenIncorrectValueExpectConstraintViolationFailure()\n+        throws Exception\n+    {\n+        SingletonAssembler underTest = new SingletonAssembler(\n+            module ->\n+            {\n+                module.defaultServices();\n+                module.services( MemoryEntityStoreService.class );\n+                module.services( TestService.class ).identifiedBy( \"TestService2\" );\n+                module.configurations( TestConfiguration.class );\n+            }\n+        );\n+        ServiceReference<TestService> service = underTest.module().findService( TestService.class );\n+        service.get().test();\n+        fail( \"Expected failure from constraint violation.\" );\n+    }\n+\n+    @Mixins( TestMixin.class )\n+    public interface TestService\n+    {\n+        void test();\n+    }\n+\n+    public interface TestConfiguration\n+        extends ConfigurationComposite\n+    {\n+        @Constrained\n+        Property<String> constrained();\n+    }\n+\n+    public static class TestMixin\n+        implements TestService\n+    {\n+        @This\n+        Configuration<TestConfiguration> config;\n+\n+        @Override\n+        public void test()\n+        {\n+            assertThat( config.get().constrained().get(), equalTo( \"constrained\" ) );\n+        }\n+    }\n+\n+    @ConstraintDeclaration\n+    @Retention( RetentionPolicy.RUNTIME )\n+    @Constraints( ConstrainedConstraint.class )\n+    public @interface Constrained\n+    {\n+    }\n+\n+    public static class ConstrainedConstraint\n+        implements Constraint<Constrained, String>\n+    {\n+        @Override\n+        public boolean isValid( Constrained annotation, String value )\n+        {\n+            return value.equals( \"constrained\" );\n+        }\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/e430d01105155b5bda6bd4ac02a61a974da44e54/core/runtime/src/test/java/org/apache/polygene/runtime/service/ConfigurationConstraintTest.java",
                "sha": "9c4d7cecbf5656633675eb8628b5260f491173ca",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/e430d01105155b5bda6bd4ac02a61a974da44e54/core/runtime/src/test/resources/org/apache/polygene/runtime/service/HelloWorldService.properties",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/core/runtime/src/test/resources/org/apache/polygene/runtime/service/HelloWorldService.properties?ref=e430d01105155b5bda6bd4ac02a61a974da44e54",
                "deletions": 1,
                "filename": "core/runtime/src/test/resources/org/apache/polygene/runtime/service/HelloWorldService.properties",
                "patch": "@@ -19,4 +19,4 @@\n #\n \n phrase=Hello\n-name=World\n+name=World\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/e430d01105155b5bda6bd4ac02a61a974da44e54/core/runtime/src/test/resources/org/apache/polygene/runtime/service/HelloWorldService.properties",
                "sha": "c01767484ef462e839c5de888aba23be23bfee33",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/e430d01105155b5bda6bd4ac02a61a974da44e54/core/runtime/src/test/resources/org/apache/polygene/runtime/service/TestService1.properties",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/core/runtime/src/test/resources/org/apache/polygene/runtime/service/TestService1.properties?ref=e430d01105155b5bda6bd4ac02a61a974da44e54",
                "deletions": 0,
                "filename": "core/runtime/src/test/resources/org/apache/polygene/runtime/service/TestService1.properties",
                "patch": "@@ -0,0 +1,20 @@\n+#\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+#  limitations under the License.\n+#\n+#\n+#\n+constrained=constrained\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/e430d01105155b5bda6bd4ac02a61a974da44e54/core/runtime/src/test/resources/org/apache/polygene/runtime/service/TestService1.properties",
                "sha": "b284cf8da50356aecc66a7b480f5cc95db53a619",
                "status": "added"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/e430d01105155b5bda6bd4ac02a61a974da44e54/core/runtime/src/test/resources/org/apache/polygene/runtime/service/TestService2.properties",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/core/runtime/src/test/resources/org/apache/polygene/runtime/service/TestService2.properties?ref=e430d01105155b5bda6bd4ac02a61a974da44e54",
                "deletions": 0,
                "filename": "core/runtime/src/test/resources/org/apache/polygene/runtime/service/TestService2.properties",
                "patch": "@@ -0,0 +1,20 @@\n+#\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+#  limitations under the License.\n+#\n+#\n+#\n+constrained=free\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/e430d01105155b5bda6bd4ac02a61a974da44e54/core/runtime/src/test/resources/org/apache/polygene/runtime/service/TestService2.properties",
                "sha": "acbfb4c0caad71eb60c11c4a72ddcaead9aa78f4",
                "status": "added"
            }
        ],
        "message": "Replace a NullPointerException with one explaining that the ServiceComposite type has not been declared.\nAdding more tests around Configuration constraint validation.\n\nSigned-off-by: niclas <niclas@hedhman.org>",
        "parent": "https://github.com/apache/attic-polygene-java/commit/80f85ffc87fd9db5c513eb5e3dcd464f39d8619f",
        "patched_files": [
            "TestService2.properties",
            "NoSuchConfigurationTypeException.java",
            "HelloWorldService.properties",
            "DistributionsPlugin.groovy",
            "TestService1.properties",
            "Configuration.java"
        ],
        "repo": "attic-polygene-java",
        "unit_tests": [
            "ConfigurationTest.java",
            "ConfigurationConstraintTest.java"
        ]
    },
    "attic-polygene-java_fec7338": {
        "bug_id": "attic-polygene-java_fec7338",
        "commit": "https://github.com/apache/attic-polygene-java/commit/fec7338d9b1f83ddc86c0dc5405717759e1dae08",
        "file": [
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/fec7338d9b1f83ddc86c0dc5405717759e1dae08/framework/src/main/java/org/qi4j/library/framework/properties/PropertiesMixin.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/framework/src/main/java/org/qi4j/library/framework/properties/PropertiesMixin.java?ref=fec7338d9b1f83ddc86c0dc5405717759e1dae08",
                "deletions": 4,
                "filename": "framework/src/main/java/org/qi4j/library/framework/properties/PropertiesMixin.java",
                "patch": "@@ -1,6 +1,7 @@\n /*\r\n  * Copyright 2007 Rickard \u00d6berg. All Rights Reserved.\r\n  * Copyright 2007 Alin Dreghiciu. All Rights Reserved.\r\n+ * Copyright 2007 Edward Yakop. All Rights Reserved.\r\n  *\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); \r\n  * you may not use this file except in compliance with the License. \r\n@@ -37,19 +38,42 @@\n public class PropertiesMixin\r\n     implements InvocationHandler\r\n {\r\n+    private static final String PROPERTY_VALUE_PROPERTIES = \"properties\";\r\n+\r\n     // Attributes ----------------------------------------------------\r\n-    Map<String, Object> properties = new HashMap<String, Object>();\r\n+    Map<String, Object> properties;\r\n \r\n+    /**\r\n+     * Construct and empty properties mixins.\r\n+     *\r\n+     * @since 0.1.0\r\n+     */\r\n+    public PropertiesMixin()\r\n+    {\r\n+        properties = new HashMap<String, Object>();\r\n+    }\r\n \r\n-    public PropertiesMixin( @PropertyParameter( \"properties\" )Iterable<PropertyValue> props )\r\n+    /**\r\n+     * Construct an instance of {@code PropertiesMixins} with initial values.\r\n+     *\r\n+     * @param props The initial values. This argument must not be {@code null}.\r\n+     * @since 0.1.0\r\n+     */\r\n+    public PropertiesMixin( @PropertyParameter( PROPERTY_VALUE_PROPERTIES )Iterable<PropertyValue> props )\r\n     {\r\n+        this();\r\n+\r\n         for( PropertyValue propertyValue : props )\r\n         {\r\n-            properties.put( \"v:\" + propertyValue.getName(), propertyValue.getValue() );\r\n+            String name = propertyValue.getName();\r\n+            Object value = propertyValue.getValue();\r\n+\r\n+            properties.put( \"v:\" + name, value );\r\n         }\r\n     }\r\n \r\n     // InvocationHandler implementation ------------------------------\r\n+    @SuppressWarnings( \"unchecked\" )\r\n     public Object invoke( Object proxy, Method method, Object[] args ) throws Throwable\r\n     {\r\n         String methodName = method.getName();\r\n@@ -111,5 +135,4 @@ else if( methodName.endsWith( \"Iterator\" ) || \"iterator\".equals( methodName ) )\n         }\r\n         return null;\r\n     }\r\n-\r\n }\r",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/fec7338d9b1f83ddc86c0dc5405717759e1dae08/framework/src/main/java/org/qi4j/library/framework/properties/PropertiesMixin.java",
                "sha": "48ac8f456da5ea01225ca8464d05c51155c9a9bf",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/attic-polygene-java/blob/fec7338d9b1f83ddc86c0dc5405717759e1dae08/general/src/main/java/org/qi4j/library/general/model/Person.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/attic-polygene-java/contents/general/src/main/java/org/qi4j/library/general/model/Person.java?ref=fec7338d9b1f83ddc86c0dc5405717759e1dae08",
                "deletions": 1,
                "filename": "general/src/main/java/org/qi4j/library/general/model/Person.java",
                "patch": "@@ -12,9 +12,11 @@\n  */\r\n package org.qi4j.library.general.model;\r\n \r\n+import org.qi4j.entity.EntityComposite;\r\n+\r\n /**\r\n  * Generic interface of a person that consists of a name and a gender\r\n  */\r\n-public interface Person extends PersonName, Gender\r\n+public interface Person extends EntityComposite, PersonName, Gender\r\n {\r\n }\r",
                "raw_url": "https://github.com/apache/attic-polygene-java/raw/fec7338d9b1f83ddc86c0dc5405717759e1dae08/general/src/main/java/org/qi4j/library/general/model/Person.java",
                "sha": "2c2ce78e914d1251a42a566c34b60172ecfee482",
                "status": "modified"
            }
        ],
        "message": "o Fix test cases.\n  o core-tests\n    o Fix [NullPointerException] bug at [org.qi4j.runtime.composite.CompositeModelContext]:\n      o This exception is thrown when there is no constraint declaration in the \"method to invoke\"s parameters.\no Fix [TODO] at [org.qi4j.runtime.ObjectBuilderImpl#newInstance]\no First attempt to refactor [Chronos] application.\n  o The [web.xml] to instantiate the [ChronosWebAppFactory] is currently commented out.\n\n\ngit-svn-id: https://scm.ops4j.org/repos/ops4j/projects/qi4j/libraries@9481 9b982a3c-3ae5-0310-a4bc-d9a3335569bd",
        "parent": "https://github.com/apache/attic-polygene-java/commit/bc287d80d11e6f8a185aaf58d97856e1d644b4da",
        "patched_files": [
            "PropertiesMixin.java"
        ],
        "repo": "attic-polygene-java",
        "unit_tests": [
            "PropertiesMixinTest.java"
        ]
    }
}