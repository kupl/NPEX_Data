[
    {
        "repo": "commons-collections",
        "commit": "https://github.com/apache/commons-collections/commit/a270ff62852e62b5ac0f943a7e57292a72b77271",
        "bug_id": "commons-collections_a270ff6",
        "message": "[COLLECTIONS-586] PatriciaTrie prefixMap clear throws NullPointerException. Applied patch and added an extra test.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@1755219 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-collections/commit/796114ea4a9cc57ab17170536e1caa5933520c47",
        "patched_files": [
            "changes.xml",
            "AbstractPatriciaTrie.java",
            "PatriciaTrie.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/commons-collections/raw/a270ff62852e62b5ac0f943a7e57292a72b77271/src/changes/changes.xml",
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/changes/changes.xml?ref=a270ff62852e62b5ac0f943a7e57292a72b77271",
                "filename": "src/changes/changes.xml",
                "deletions": 0,
                "sha": "3997c3c7fd0bba3fbfcdc86f84cd2f78069ee5b3",
                "blob_url": "https://github.com/apache/commons-collections/blob/a270ff62852e62b5ac0f943a7e57292a72b77271/src/changes/changes.xml",
                "patch": "@@ -24,6 +24,9 @@\n     <action issue=\"COLLECTIONS-589\" dev=\"ggregory\" type=\"add\" due-to=\"Gary Gregory\">\n       Add null-safe MapUtils.size(Map&lt;?, ?>) method. \n     </action>\n+    <action issue=\"COLLECTIONS-586\" dev=\"ggregory\" type=\"add\" due-to=\"Shailender Bathula, Gary Gregory\">\n+      PatriciaTrie prefixMap clear throws NullPointerException. \n+    </action>\n   </release>\n   <release version=\"4.1\" date=\"2015-11-28\" description=\"This is a security and minor release.\">\n     <action issue=\"COLLECTIONS-508\" dev=\"tn\" type=\"add\">",
                "changes": 3
            },
            {
                "status": "modified",
                "additions": 11,
                "raw_url": "https://github.com/apache/commons-collections/raw/a270ff62852e62b5ac0f943a7e57292a72b77271/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java",
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java?ref=a270ff62852e62b5ac0f943a7e57292a72b77271",
                "filename": "src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java",
                "deletions": 0,
                "sha": "bd11f75b7fac9115f646ca6aa5ff85717e753d1f",
                "blob_url": "https://github.com/apache/commons-collections/blob/a270ff62852e62b5ac0f943a7e57292a72b77271/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java",
                "patch": "@@ -2258,6 +2258,17 @@ public boolean isToInclusive() {\n                                                  final K toKey, final boolean toInclusive) {\n             return new RangeEntryMap(fromKey, fromInclusive, toKey, toInclusive);\n         }\n+\n+        @Override\n+        public void clear() {\n+            Iterator<Map.Entry<K, V>> it = AbstractPatriciaTrie.this.entrySet().iterator();\n+            Set<K> currentKeys = keySet();\n+            while (it.hasNext()) {\n+                if (currentKeys.contains(it.next().getKey())) {\n+                    it.remove();\n+                }\n+            }\n+        }\n     }\n \n     /**",
                "changes": 11
            },
            {
                "status": "modified",
                "additions": 63,
                "raw_url": "https://github.com/apache/commons-collections/raw/a270ff62852e62b5ac0f943a7e57292a72b77271/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java",
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java?ref=a270ff62852e62b5ac0f943a7e57292a72b77271",
                "filename": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java",
                "deletions": 0,
                "sha": "92559fb7f930802e3781f51b5d136a6f3ed00823",
                "blob_url": "https://github.com/apache/commons-collections/blob/a270ff62852e62b5ac0f943a7e57292a72b77271/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java",
                "patch": "@@ -16,15 +16,20 @@\n  */\n package org.apache.commons.collections4.trie;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.ConcurrentModificationException;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Map;\n import java.util.NoSuchElementException;\n+import java.util.Set;\n import java.util.SortedMap;\n \n import junit.framework.Test;\n \n import org.apache.commons.collections4.BulkTest;\n+import org.apache.commons.collections4.Trie;\n import org.apache.commons.collections4.map.AbstractSortedMapTest;\n import org.junit.Assert;\n \n@@ -365,6 +370,64 @@ public void testPrefixMapSizes2() {\n         assertTrue(trie.prefixMap(prefixString).containsKey(longerString));\n     }\n \n+    public void testPrefixMapClear() {\n+        Trie<String, Integer> trie = new PatriciaTrie<Integer>();\n+        trie.put(\"Anna\", 1);\n+        trie.put(\"Anael\", 2);\n+        trie.put(\"Analu\", 3);\n+        trie.put(\"Andreas\", 4);\n+        trie.put(\"Andrea\", 5);\n+        trie.put(\"Andres\", 6);\n+        trie.put(\"Anatole\", 7);\n+        SortedMap<String, Integer> prefixMap = trie.prefixMap(\"And\");\n+        assertEquals(new HashSet<String>(Arrays.asList(\"Andrea\", \"Andreas\", \"Andres\")), prefixMap.keySet());\n+        assertEquals(Arrays.asList(5, 4, 6), new ArrayList<Integer>(prefixMap.values()));\n+\n+        prefixMap.clear();\n+        assertTrue(prefixMap.isEmpty());\n+        assertTrue(prefixMap.keySet().isEmpty());\n+        assertTrue(prefixMap.values().isEmpty());\n+        assertEquals(new HashSet<String>(Arrays.asList(\"Anael\", \"Analu\", \"Anatole\", \"Anna\")), trie.keySet());\n+        assertEquals(Arrays.asList(2, 3, 7, 1), new ArrayList<Integer>(trie.values()));\n+    }\n+\n+    public void testPrefixMapClearNothing() {\n+        Trie<String, Integer> trie = new PatriciaTrie<Integer>();\n+        SortedMap<String, Integer> prefixMap = trie.prefixMap(\"And\");\n+        assertEquals(new HashSet<String>(), prefixMap.keySet());\n+        assertEquals(new ArrayList<Integer>(0), new ArrayList<Integer>(prefixMap.values()));\n+\n+        prefixMap.clear();\n+        assertTrue(prefixMap.isEmpty());\n+        assertTrue(prefixMap.keySet().isEmpty());\n+        assertTrue(prefixMap.values().isEmpty());\n+        assertEquals(new HashSet<String>(), trie.keySet());\n+        assertEquals(new ArrayList<Integer>(0), new ArrayList<Integer>(trie.values()));\n+    }\n+\n+    public void testPrefixMapClearUsingRemove() {\n+        Trie<String, Integer> trie = new PatriciaTrie<Integer>();\n+        trie.put(\"Anna\", 1);\n+        trie.put(\"Anael\", 2);\n+        trie.put(\"Analu\", 3);\n+        trie.put(\"Andreas\", 4);\n+        trie.put(\"Andrea\", 5);\n+        trie.put(\"Andres\", 6);\n+        trie.put(\"Anatole\", 7);\n+        SortedMap<String, Integer> prefixMap = trie.prefixMap(\"And\");\n+        assertEquals(new HashSet<String>(Arrays.asList(\"Andrea\", \"Andreas\", \"Andres\")), prefixMap.keySet());\n+        assertEquals(Arrays.asList(5, 4, 6), new ArrayList<Integer>(prefixMap.values()));\n+\n+        Set<String> keys = new HashSet<String>(prefixMap.keySet());\n+        for (final String key : keys) {\n+            prefixMap.remove(key);\n+        }\n+        assertTrue(prefixMap.keySet().isEmpty());\n+        assertTrue(prefixMap.values().isEmpty());\n+        assertEquals(new HashSet<String>(Arrays.asList(\"Anael\", \"Analu\", \"Anatole\", \"Anna\")), trie.keySet());\n+        assertEquals(Arrays.asList(2, 3, 7, 1), new ArrayList<Integer>(trie.values()));\n+    }\n+\n     //-----------------------------------------------------------------------\n \n     @Override",
                "changes": 63
            }
        ],
        "unit_tests": [
            "PatriciaTrieTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java",
        "buggy_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java",
            "src/main/java/org/apache/commons/collections4/trie/PatriciaTrie.java"
        ],
        "fixed": true
    }
]