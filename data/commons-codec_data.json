[
    {
        "repo": "commons-codec",
        "message": "<action dev=\"ggregory\" type=\"add\" issue=\"CODEC-184\" due-to=\"Cyrille Artho\">NullPointerException in DoubleMetaPhone.isDoubleMetaphoneEqual when using empty strings</action>\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@1586304 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-codec/commit/443795f294dfafe40ff159fc651c3dbac6f8d310",
        "parent": "https://github.com/apache/commons-codec/commit/37ba197e62d6b60037d18afc33801e6221f1b8c6",
        "bug_id": "commons-codec_1",
        "file": [
            {
                "sha": "b0272221e67a92d024dcc2b3ac9a547abbde25dc",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-codec/blob/443795f294dfafe40ff159fc651c3dbac6f8d310/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-codec/raw/443795f294dfafe40ff159fc651c3dbac6f8d310/src/changes/changes.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-codec/contents/src/changes/changes.xml?ref=443795f294dfafe40ff159fc651c3dbac6f8d310",
                "patch": "@@ -43,7 +43,7 @@ The <action> type attribute can be add,update,fix,remove.\n   </properties>\n   <body>\n     <release version=\"1.10\" date=\"DD Mmmm 2014\" description=\"Feature and fix release.\"> \n-      <action dev=\"ggregory\" type=\"add\" issue=\"CODEC-184\" due-to=\"Cyrille Artho\">NullPointerException in DoubleMetaPhone.isDoubleMetaphoneEqual when using empty strings</action>   \n+      <action dev=\"ggregory\" type=\"fix\" issue=\"CODEC-184\" due-to=\"Cyrille Artho\">NullPointerException in DoubleMetaPhone.isDoubleMetaphoneEqual when using empty strings</action>   \n       <action dev=\"ggregory\" type=\"add\" issue=\"CODEC-181\" due-to=\"Ivan Martinez-Ortiz\">Make possible to provide padding byte to BaseNCodec in constructor</action>   \n       <action dev=\"ggregory\" type=\"fix\" issue=\"CODEC-180\" due-to=\"Ville Skytt\u00e4\">Fix Javadoc 1.8.0 errors</action>   \n       <action dev=\"ggregory\" type=\"update\" issue=\"CODEC-178\">Deprecate Charsets Charset constants in favor of Java 7's java.nio.charset.StandardCharsets</action>   ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "commons-codec",
        "message": "<action dev=\"ggregory\" type=\"add\" issue=\"CODEC-184\" due-to=\"Cyrille Artho\">NullPointerException in DoubleMetaPhone.isDoubleMetaphoneEqual when using empty strings</action>\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@1586300 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-codec/commit/37ba197e62d6b60037d18afc33801e6221f1b8c6",
        "parent": "https://github.com/apache/commons-codec/commit/8c145775da55fb33104751199a28809acb657c1f",
        "bug_id": "commons-codec_2",
        "file": [
            {
                "sha": "bb9c812a2f635ddec013735106bcc84cc35e6b87",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-codec/blob/37ba197e62d6b60037d18afc33801e6221f1b8c6/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-codec/raw/37ba197e62d6b60037d18afc33801e6221f1b8c6/src/changes/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-codec/contents/src/changes/changes.xml?ref=37ba197e62d6b60037d18afc33801e6221f1b8c6",
                "patch": "@@ -43,6 +43,7 @@ The <action> type attribute can be add,update,fix,remove.\n   </properties>\n   <body>\n     <release version=\"1.10\" date=\"DD Mmmm 2014\" description=\"Feature and fix release.\"> \n+      <action dev=\"ggregory\" type=\"add\" issue=\"CODEC-184\" due-to=\"Cyrille Artho\">NullPointerException in DoubleMetaPhone.isDoubleMetaphoneEqual when using empty strings</action>   \n       <action dev=\"ggregory\" type=\"add\" issue=\"CODEC-181\" due-to=\"Ivan Martinez-Ortiz\">Make possible to provide padding byte to BaseNCodec in constructor</action>   \n       <action dev=\"ggregory\" type=\"fix\" issue=\"CODEC-180\" due-to=\"Ville Skytt\u00e4\">Fix Javadoc 1.8.0 errors</action>   \n       <action dev=\"ggregory\" type=\"update\" issue=\"CODEC-178\">Deprecate Charsets Charset constants in favor of Java 7's java.nio.charset.StandardCharsets</action>   ",
                "deletions": 0
            },
            {
                "sha": "fe20eb02feda053b7ceacba85dc4361d1e89cfb2",
                "filename": "src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java",
                "blob_url": "https://github.com/apache/commons-codec/blob/37ba197e62d6b60037d18afc33801e6221f1b8c6/src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java",
                "raw_url": "https://github.com/apache/commons-codec/raw/37ba197e62d6b60037d18afc33801e6221f1b8c6/src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java",
                "status": "added",
                "changes": 63,
                "additions": 63,
                "contents_url": "https://api.github.com/repos/apache/commons-codec/contents/src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java?ref=37ba197e62d6b60037d18afc33801e6221f1b8c6",
                "patch": "@@ -0,0 +1,63 @@\n+package org.apache.commons.codec.binary;\n+\n+/**\n+ * <p>\n+ * Operations on {@link CharSequence} that are {@code null} safe.\n+ * </p>\n+ * <p>\n+ * Copied from Apache Commons Lang r1586295 on April 10, 2014 (day of 3.3.2 release).\n+ * </p>\n+ * \n+ * @see CharSequence\n+ * @since 1.10\n+ */\n+public class CharSequenceUtils {\n+\n+    /**\n+     * Green implementation of regionMatches.\n+     * \n+     * @param cs\n+     *            the {@code CharSequence} to be processed\n+     * @param ignoreCase\n+     *            whether or not to be case insensitive\n+     * @param thisStart\n+     *            the index to start on the {@code cs} CharSequence\n+     * @param substring\n+     *            the {@code CharSequence} to be looked for\n+     * @param start\n+     *            the index to start on the {@code substring} CharSequence\n+     * @param length\n+     *            character length of the region\n+     * @return whether the region matched\n+     */\n+    static boolean regionMatches(final CharSequence cs, final boolean ignoreCase, final int thisStart,\n+            final CharSequence substring, final int start, final int length) {\n+        if (cs instanceof String && substring instanceof String) {\n+            return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length);\n+        }\n+        int index1 = thisStart;\n+        int index2 = start;\n+        int tmpLen = length;\n+\n+        while (tmpLen-- > 0) {\n+            char c1 = cs.charAt(index1++);\n+            char c2 = substring.charAt(index2++);\n+\n+            if (c1 == c2) {\n+                continue;\n+            }\n+\n+            if (!ignoreCase) {\n+                return false;\n+            }\n+\n+            // The same check as in String.regionMatches():\n+            if (Character.toUpperCase(c1) != Character.toUpperCase(c2)\n+                    && Character.toLowerCase(c1) != Character.toLowerCase(c2)) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "8f1f57fa6bd14868ae7fa77203ff7ede3dc71f0f",
                "filename": "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                "blob_url": "https://github.com/apache/commons-codec/blob/37ba197e62d6b60037d18afc33801e6221f1b8c6/src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                "raw_url": "https://github.com/apache/commons-codec/raw/37ba197e62d6b60037d18afc33801e6221f1b8c6/src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                "status": "modified",
                "changes": 43,
                "additions": 43,
                "contents_url": "https://api.github.com/repos/apache/commons-codec/contents/src/main/java/org/apache/commons/codec/binary/StringUtils.java?ref=37ba197e62d6b60037d18afc33801e6221f1b8c6",
                "patch": "@@ -37,6 +37,49 @@\n  */\n public class StringUtils {\n \n+    /**\n+     * <p>\n+     * Compares two CharSequences, returning {@code true} if they represent equal sequences of characters.\n+     * </p>\n+     * \n+     * <p>\n+     * {@code null}s are handled without exceptions. Two {@code null} references are considered to be equal. The\n+     * comparison is case sensitive.\n+     * </p>\n+     * \n+     * <pre>\n+     * StringUtils.equals(null, null)   = true\n+     * StringUtils.equals(null, \"abc\")  = false\n+     * StringUtils.equals(\"abc\", null)  = false\n+     * StringUtils.equals(\"abc\", \"abc\") = true\n+     * StringUtils.equals(\"abc\", \"ABC\") = false\n+     * </pre>\n+     * \n+     * <p>\n+     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n+     * </p>\n+     * \n+     * @see Object#equals(Object)\n+     * @param cs1\n+     *            the first CharSequence, may be {@code null}\n+     * @param cs2\n+     *            the second CharSequence, may be {@code null}\n+     * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}\n+     * @since 1.10\n+     */\n+    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n+        if (cs1 == cs2) {\n+            return true;\n+        }\n+        if (cs1 == null || cs2 == null) {\n+            return false;\n+        }\n+        if (cs1 instanceof String && cs2 instanceof String) {\n+            return cs1.equals(cs2);\n+        }\n+        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n+    }\n+\n     /**\n      * Calls {@link String#getBytes(Charset)}\n      *",
                "deletions": 0
            },
            {
                "sha": "6ccd3f27d0c8b8c1a24cf6528ab45e60ceddd7a4",
                "filename": "src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                "blob_url": "https://github.com/apache/commons-codec/blob/37ba197e62d6b60037d18afc33801e6221f1b8c6/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                "raw_url": "https://github.com/apache/commons-codec/raw/37ba197e62d6b60037d18afc33801e6221f1b8c6/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-codec/contents/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java?ref=37ba197e62d6b60037d18afc33801e6221f1b8c6",
                "patch": "@@ -19,6 +19,7 @@\n \n import org.apache.commons.codec.EncoderException;\n import org.apache.commons.codec.StringEncoder;\n+import org.apache.commons.codec.binary.StringUtils;\n \n /**\n  * Encodes a string into a double metaphone value. This Implementation is based on the algorithm by <CITE>Lawrence\n@@ -241,7 +242,7 @@ public boolean isDoubleMetaphoneEqual(final String value1, final String value2)\n      *          {@code false} otherwise.\n      */\n     public boolean isDoubleMetaphoneEqual(final String value1, final String value2, final boolean alternate) {\n-        return doubleMetaphone(value1, alternate).equals(doubleMetaphone(value2, alternate));\n+        return StringUtils.equals(doubleMetaphone(value1, alternate), doubleMetaphone(value2, alternate));\n     }\n \n     /**",
                "deletions": 1
            },
            {
                "sha": "5503d34b72ca040002c6af401bbe436333e89d11",
                "filename": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                "blob_url": "https://github.com/apache/commons-codec/blob/37ba197e62d6b60037d18afc33801e6221f1b8c6/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                "raw_url": "https://github.com/apache/commons-codec/raw/37ba197e62d6b60037d18afc33801e6221f1b8c6/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                "status": "modified",
                "changes": 14,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/commons-codec/contents/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java?ref=37ba197e62d6b60037d18afc33801e6221f1b8c6",
                "patch": "@@ -1060,6 +1060,16 @@ public void testCCedilla() {\n         assertTrue(this.getStringEncoder().isDoubleMetaphoneEqual(\"\\u00e7\", \"S\")); // c-cedilla\n     }\n \n+    @Test\n+    public void testCodec184() throws Throwable {\n+        assertTrue(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"\", false));\n+        assertTrue(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"\", true));\n+        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"aa\", \"\", false));\n+        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"aa\", \"\", true));\n+        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"aa\", false));\n+        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"aa\", true));\n+      }\n+\n     @Test\n     public void testDoubleMetaphone() {\n         assertDoubleMetaphone(\"TSTN\", \"testing\");\n@@ -1111,7 +1121,9 @@ public void testEmpty() {\n \n     @Test\n     public void testIsDoubleMetaphoneEqualBasic() {\n-        final String[][] testFixture = new String[][] { { \"Case\", \"case\" }, {\n+        final String[][] testFixture = new String[][] { { \n+                \"\", \"\" }, {\n+                \"Case\", \"case\" }, {\n                 \"CASE\", \"Case\" }, {\n                 \"caSe\", \"cAsE\" }, {\n                 \"cookie\", \"quick\" }, {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "commons-codec",
        "message": "CODEC-229 StringUtils.newStringxxx(null) should return null, not NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@1788755 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-codec/commit/d2f27093d7d95a07da901902f894d88b4ecc3e95",
        "parent": "https://github.com/apache/commons-codec/commit/1a4d9cc2572d220664f1b7c377cd318cd253052e",
        "bug_id": "commons-codec_3",
        "file": [
            {
                "sha": "13a91d51a5005d83b666d9aaff5590548a415acd",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-codec/blob/d2f27093d7d95a07da901902f894d88b4ecc3e95/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-codec/raw/d2f27093d7d95a07da901902f894d88b4ecc3e95/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-codec/contents/src/changes/changes.xml?ref=d2f27093d7d95a07da901902f894d88b4ecc3e95",
                "patch": "@@ -42,9 +42,10 @@ The <action> type attribute can be add,update,fix,remove.\n     <author>Apache Commons Developers</author>\n   </properties>\n   <body>\n-    <release version=\"1.11\" date=\"2016-MM-DD\" description=\"Feature and fix release.\">\n+    <release version=\"1.11\" date=\"2017-MM-DD\" description=\"Feature and fix release.\">\n       <!-- The first attribute below should be the issue id; makes it easier to navigate in the IDE outline -->\n \n+      <action issue=\"CODEC-229\" dev=\"sebb\" type=\"fix\">StringUtils.newStringxxx(null) should return null, not NPE</action>\n       <action issue=\"CODEC-220\" dev=\"sebb\" type=\"add\">Fluent interface for DigestUtils</action>\n       <action issue=\"CODEC-222\" dev=\"sebb\" type=\"add\">Fluent interface for HmacUtils</action>\n       <action issue=\"CODEC-225\" dev=\"jochen\" type=\"fix\" due-to=\"Svetlin Zarev\">Fix minor resource leaks</action>",
                "deletions": 1
            },
            {
                "sha": "7bb15e33276ae65bb7c41085ea2938536eff421d",
                "filename": "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                "blob_url": "https://github.com/apache/commons-codec/blob/d2f27093d7d95a07da901902f894d88b4ecc3e95/src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                "raw_url": "https://github.com/apache/commons-codec/raw/d2f27093d7d95a07da901902f894d88b4ecc3e95/src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-codec/contents/src/main/java/org/apache/commons/codec/binary/StringUtils.java?ref=d2f27093d7d95a07da901902f894d88b4ecc3e95",
                "patch": "@@ -336,7 +336,7 @@ public static String newString(final byte[] bytes, final String charsetName) {\n      * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      */\n     public static String newStringIso8859_1(final byte[] bytes) {\n-        return new String(bytes, Charsets.ISO_8859_1);\n+        return newString(bytes, Charsets.ISO_8859_1);\n     }\n \n     /**\n@@ -352,7 +352,7 @@ public static String newStringIso8859_1(final byte[] bytes) {\n      * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      */\n     public static String newStringUsAscii(final byte[] bytes) {\n-        return new String(bytes, Charsets.US_ASCII);\n+        return newString(bytes, Charsets.US_ASCII);\n     }\n \n     /**\n@@ -368,7 +368,7 @@ public static String newStringUsAscii(final byte[] bytes) {\n      * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      */\n     public static String newStringUtf16(final byte[] bytes) {\n-        return new String(bytes, Charsets.UTF_16);\n+        return newString(bytes, Charsets.UTF_16);\n     }\n \n     /**\n@@ -384,7 +384,7 @@ public static String newStringUtf16(final byte[] bytes) {\n      * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      */\n     public static String newStringUtf16Be(final byte[] bytes) {\n-        return new String(bytes, Charsets.UTF_16BE);\n+        return newString(bytes, Charsets.UTF_16BE);\n     }\n \n     /**\n@@ -400,7 +400,7 @@ public static String newStringUtf16Be(final byte[] bytes) {\n      * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      */\n     public static String newStringUtf16Le(final byte[] bytes) {\n-        return new String(bytes, Charsets.UTF_16LE);\n+        return newString(bytes, Charsets.UTF_16LE);\n     }\n \n     /**",
                "deletions": 5
            },
            {
                "sha": "8a6e219315f8a9f49561350ba62dde1e096d2d45",
                "filename": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                "blob_url": "https://github.com/apache/commons-codec/blob/d2f27093d7d95a07da901902f894d88b4ecc3e95/src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                "raw_url": "https://github.com/apache/commons-codec/raw/d2f27093d7d95a07da901902f894d88b4ecc3e95/src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/commons-codec/contents/src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java?ref=d2f27093d7d95a07da901902f894d88b4ecc3e95",
                "patch": "@@ -145,6 +145,16 @@ public void testNewStringNullInput() {\n         Assert.assertNull(StringUtils.newString(null, \"UNKNOWN\"));\n     }\n \n+    @Test\n+    public void testNewStringNullInput_CODEC229() {\n+        Assert.assertNull(StringUtils.newStringUtf8(null));\n+        Assert.assertNull(StringUtils.newStringIso8859_1(null));\n+        Assert.assertNull(StringUtils.newStringUsAscii(null));\n+        Assert.assertNull(StringUtils.newStringUtf16(null));\n+        Assert.assertNull(StringUtils.newStringUtf16Be(null));\n+        Assert.assertNull(StringUtils.newStringUtf16Le(null));\n+    }\n+\n     @Test\n     public void testNewStringIso8859_1() throws UnsupportedEncodingException {\n         final String charsetName = \"ISO-8859-1\";",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "commons-codec",
        "message": "CODEC-98 - Base64InputStream causes NullPointerException on some input - https://issues.apache.org/jira/browse/CODEC-98 \n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@950267 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-codec/commit/800f0531068ebaf2f2d257bb1bd805781ddd4760",
        "parent": "https://github.com/apache/commons-codec/commit/4c6eea410d34d7ff4aa5c30fb7a2fa7c349dae18",
        "bug_id": "commons-codec_4",
        "file": [
            {
                "sha": "19a695947ecbca4596130f087615429f5405abb7",
                "filename": "src/java/org/apache/commons/codec/binary/Base64.java",
                "blob_url": "https://github.com/apache/commons-codec/blob/800f0531068ebaf2f2d257bb1bd805781ddd4760/src/java/org/apache/commons/codec/binary/Base64.java",
                "raw_url": "https://github.com/apache/commons-codec/raw/800f0531068ebaf2f2d257bb1bd805781ddd4760/src/java/org/apache/commons/codec/binary/Base64.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-codec/contents/src/java/org/apache/commons/codec/binary/Base64.java?ref=800f0531068ebaf2f2d257bb1bd805781ddd4760",
                "patch": "@@ -583,6 +583,10 @@ void decode(byte[] in, int inPos, int inAvail) {\n         // EOF (-1) and first time '=' character is encountered in stream.\n         // This approach makes the '=' padding characters completely optional.\n         if (eof && modulus != 0) {\n+            if (buffer == null || buffer.length - pos < decodeSize) {\n+                resizeBuffer();\n+            }\n+            \n             x = x << 6;\n             switch (modulus) {\n                 case 2 :",
                "deletions": 0
            },
            {
                "sha": "fd1fc1f7658a95525bc7f68d80b2a00dc2d0b8ef",
                "filename": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                "blob_url": "https://github.com/apache/commons-codec/blob/800f0531068ebaf2f2d257bb1bd805781ddd4760/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                "raw_url": "https://github.com/apache/commons-codec/raw/800f0531068ebaf2f2d257bb1bd805781ddd4760/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                "status": "modified",
                "changes": 20,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/commons-codec/contents/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java?ref=800f0531068ebaf2f2d257bb1bd805781ddd4760",
                "patch": "@@ -46,6 +46,26 @@ public Base64InputStreamTest(String name) {\n         super(name);\n     }\n \n+    /**\n+     * Test the Base64InputStream implementation against the special NPE inducing input\n+     * identified in the CODEC-98 bug.\n+     *\n+     * @throws Exception for some failure scenarios.\n+     */\n+    public void testCodec98NPE() throws Exception {\n+        byte[] codec98 = StringUtils.getBytesUtf8(Base64TestData.CODEC_98_NPE);\n+        ByteArrayInputStream data = new ByteArrayInputStream(codec98);\n+        Base64InputStream stream = new Base64InputStream(data);\n+\n+        // This line causes an NPE in commons-codec-1.4.jar:\n+        byte[] decodedBytes = Base64TestData.streamToBytes(stream, new byte[1024]);\n+\n+        String decoded = StringUtils.newStringUtf8(decodedBytes);\n+        assertEquals(\n+            \"codec-98 NPE Base64InputStream\", Base64TestData.CODEC_98_NPE_DECODED, decoded\n+        );\n+    }\n+\n     /**\n      * Tests the Base64InputStream implementation against empty input.\n      * ",
                "deletions": 0
            },
            {
                "sha": "fd64ce66f49c2a2e1b660046cce0de70d1f28b7f",
                "filename": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                "blob_url": "https://github.com/apache/commons-codec/blob/800f0531068ebaf2f2d257bb1bd805781ddd4760/src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                "raw_url": "https://github.com/apache/commons-codec/raw/800f0531068ebaf2f2d257bb1bd805781ddd4760/src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                "status": "modified",
                "changes": 23,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/commons-codec/contents/src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java?ref=800f0531068ebaf2f2d257bb1bd805781ddd4760",
                "patch": "@@ -46,6 +46,29 @@ public Base64OutputStreamTest(String name) {\n         super(name);\n     }\n \n+    /**\n+     * Test the Base64OutputStream implementation against the special NPE inducing input\n+     * identified in the CODEC-98 bug.\n+     *\n+     * @throws Exception for some failure scenarios.\n+     */\n+    public void testCodec98NPE() throws Exception {\n+        byte[] codec98 = StringUtils.getBytesUtf8(Base64TestData.CODEC_98_NPE);\n+        byte[] codec98_1024 = new byte[1024];\n+        System.arraycopy(codec98, 0, codec98_1024, 0, codec98.length);\n+        ByteArrayOutputStream data = new ByteArrayOutputStream(1024);\n+        Base64OutputStream stream = new Base64OutputStream(data, false);\n+        stream.write(codec98_1024, 0, 1024);\n+        stream.close();\n+\n+        byte[] decodedBytes = data.toByteArray();\n+        String decoded = StringUtils.newStringUtf8(decodedBytes);\n+        assertEquals(\n+            \"codec-98 NPE Base64OutputStream\", Base64TestData.CODEC_98_NPE_DECODED, decoded\n+        );\n+    }\n+    \n+\n     /**\n      * Test the Base64OutputStream implementation against empty input.\n      * ",
                "deletions": 0
            },
            {
                "sha": "84bb5bf7e33693306fe0db85ede4f1f619405099",
                "filename": "src/test/org/apache/commons/codec/binary/Base64TestData.java",
                "blob_url": "https://github.com/apache/commons-codec/blob/800f0531068ebaf2f2d257bb1bd805781ddd4760/src/test/org/apache/commons/codec/binary/Base64TestData.java",
                "raw_url": "https://github.com/apache/commons-codec/raw/800f0531068ebaf2f2d257bb1bd805781ddd4760/src/test/org/apache/commons/codec/binary/Base64TestData.java",
                "status": "modified",
                "changes": 12,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/commons-codec/contents/src/test/org/apache/commons/codec/binary/Base64TestData.java?ref=800f0531068ebaf2f2d257bb1bd805781ddd4760",
                "patch": "@@ -32,6 +32,13 @@\n  */\n public class Base64TestData {\n \n+    public static final String CODEC_98_NPE\n+        = \"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM\";\n+\n+    public static final String CODEC_98_NPE_DECODED\n+        = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123\";\n+\n+\n     // OpenSSL doesn't include the final \\n, but it would be annoying beyond belief\n     // to further parameterize commons-codec to support this pointless variation.\n     final static String ENCODED_64_CHARS_PER_LINE\n@@ -133,7 +140,10 @@\n \n     static byte[] streamToBytes(final InputStream in) throws IOException {\n         // new byte[7] is obviously quite slow, but helps exercise the code.\n-        byte[] buf = new byte[7];\n+        return streamToBytes(in, new byte[7]);\n+    }\n+\n+    static byte[] streamToBytes(final InputStream in, byte[] buf) throws IOException {\n         try {\n             int[] status = fill(buf, 0, in);\n             int size = status[SIZE_KEY];",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "commons-codec",
        "message": "Avoid java.lang.NullPointerException: null\nat org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(SystemUtils.java:1413)\nat org.apache.commons.codec.digest.DigestUtilsTest.testSha224(DigestUtilsTest.java:276)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@1683559 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-codec/commit/00613d73f7a427f4dbc40924b534b8e28a8fc1fc",
        "parent": "https://github.com/apache/commons-codec/commit/2ae03e1633ec0a79761b215e8eae2574106bec99",
        "bug_id": "commons-codec_5",
        "file": [
            {
                "sha": "27b4b998b259818527e1a342bbe041bab09109e0",
                "filename": "pom.xml",
                "blob_url": "https://github.com/apache/commons-codec/blob/00613d73f7a427f4dbc40924b534b8e28a8fc1fc/pom.xml",
                "raw_url": "https://github.com/apache/commons-codec/raw/00613d73f7a427f4dbc40924b534b8e28a8fc1fc/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-codec/contents/pom.xml?ref=00613d73f7a427f4dbc40924b534b8e28a8fc1fc",
                "patch": "@@ -217,7 +217,7 @@ limitations under the License.\n     <dependency>\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-lang3</artifactId>\n-      <version>3.3.2</version>\n+      <version>3.4</version>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "commons-codec",
        "message": "stringEncoder variable is now final to tighten it up, the empty constructor is deprecated as it will only lead to a broken NPE producing comparator and I've removed the unnecessary casting\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@582444 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-codec/commit/71e7260746a902d1070a190fd78bd560464860b9",
        "parent": "https://github.com/apache/commons-codec/commit/c0467593241c6dcd72da142ab8d292df86a949c5",
        "bug_id": "commons-codec_6",
        "file": [
            {
                "sha": "49d0f8457b43112939dfdee577b2456eb7217c45",
                "filename": "src/java/org/apache/commons/codec/StringEncoderComparator.java",
                "blob_url": "https://github.com/apache/commons-codec/blob/71e7260746a902d1070a190fd78bd560464860b9/src/java/org/apache/commons/codec/StringEncoderComparator.java",
                "raw_url": "https://github.com/apache/commons-codec/raw/71e7260746a902d1070a190fd78bd560464860b9/src/java/org/apache/commons/codec/StringEncoderComparator.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-codec/contents/src/java/org/apache/commons/codec/StringEncoderComparator.java?ref=71e7260746a902d1070a190fd78bd560464860b9",
                "patch": "@@ -36,13 +36,15 @@\n     /**\n      * Internal encoder instance.\n      */\n-    private StringEncoder stringEncoder;\n+    private final StringEncoder stringEncoder;\n \n     /**\n      * Constructs a new instance.\n+     * @deprecated as creating without a StringEncoder will lead to a \n+     *             broken NullPointerException creating comparator.\n      */\n     public StringEncoderComparator() {\n-        // no init.\n+        stringEncoder = null;   // Trying to use this will cause things to break\n     }\n \n     /**\n@@ -71,8 +73,8 @@ public int compare(Object o1, Object o2) {\n         int compareCode = 0;\n \n         try {\n-            Comparable s1 = (Comparable) ((Encoder) this.stringEncoder).encode(o1);\n-            Comparable s2 = (Comparable) ((Encoder) this.stringEncoder).encode(o2);\n+            Comparable s1 = (Comparable) this.stringEncoder.encode(o1);\n+            Comparable s2 = (Comparable) this.stringEncoder.encode(o2);\n             compareCode = s1.compareTo(s2);\n         } \n         catch (EncoderException ee) {",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "commons-codec",
        "message": "Addresses issue 37894.  Order of static initialization causes\nan NPE when trying to use static US_ENGLISH in Soundex.\nIssue was found by Reggie Riser.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/codec/trunk@366897 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-codec/commit/5d856dd285cad2a89b6e33f9e93092eab45872c2",
        "parent": "https://github.com/apache/commons-codec/commit/252f8e7a4258a07675087299ebb0cb6f4211569d",
        "bug_id": "commons-codec_7",
        "file": [
            {
                "sha": "63665dc332ade5d5a2d97f3755dad898789175cc",
                "filename": "RELEASE-NOTES.txt",
                "blob_url": "https://github.com/apache/commons-codec/blob/5d856dd285cad2a89b6e33f9e93092eab45872c2/RELEASE-NOTES.txt",
                "raw_url": "https://github.com/apache/commons-codec/raw/5d856dd285cad2a89b6e33f9e93092eab45872c2/RELEASE-NOTES.txt",
                "status": "modified",
                "changes": 38,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-codec/contents/RELEASE-NOTES.txt?ref=5d856dd285cad2a89b6e33f9e93092eab45872c2",
                "patch": "@@ -1,4 +1,4 @@\n-The commons-codec team is pleased to announce the Codec 1.3 release! \n+The commons-codec team is pleased to announce the Codec 1.3.1 release! \n \n http://jakarta.apache.org/commons/codec/\n \n@@ -11,42 +11,16 @@ Changes in this version include:\n \n   New Features:\n \n-o BinaryCodec: Encodes and decodes binary to and from Strings of 0s and 1s. \n-  Issue: 27813. Thanks to Alex Karasulu. \n-o QuotedPrintableCodec: Codec for RFC 1521 MIME (Multipurpose Internet Mail \n-  Extensions) Part One. Rules #3, #4, and #5 of the quoted-printable spec are \n-  not implemented yet. See also issue 27789. Issue: 26617. Thanks to Oleg \n-  Kalnichevski. \n-o BCodec: Identical to the Base64 encoding defined by RFC 1521 and allows a \n-  character set to be specified. Issue: 26617. Thanks to Oleg Kalnichevski. \n-o QCodec: Similar to the Quoted-Printable content-transfer-encoding defined \n-  in RFC 1521 and designed to allow text containing mostly ASCII characters \n-  to be decipherable on an ASCII terminal without decoding. Issue: 26617. \n-  Thanks to Oleg Kalnichevski. \n-o Soundex: Implemented the DIFFERENCE algorithm. Issue: 25243. Thanks to \n-  Matthew Inger. \n-o RefinedSoundex: Implemented the DIFFERENCE algorithm. Issue: 25243. Thanks \n-  to Matthew Inger. \n-\n+o \n   Fixed bugs:\n \n-o The default URL encoding logic was broken. Issue: 25995. Thanks to Oleg \n-  Kalnichevski. \n-o Base64 chunked encoding not compliant with RFC 2045 section 2.1 CRLF. \n-  Issue: 27781. Thanks to Gary D. Gregory. \n-o Hex converts illegal characters to 255. Issue: 28455. \n-o Metaphone now correctly handles a silent B in a word that ends in MB. \n-  \"COMB\" is encoded as \"KM\", before this fix \"COMB\" was encoded as \"KMB\". \n-  Issue: 28457. \n-o Added missing tags in Javadoc comments. \n-o General Javadoc improvements. \n+o Using US_ENGLISH in Soundex causes an NPE.  Issue addressed and\n+  test case added to SoundexTest.\n+  Issue: 37894. Thanks to Reggie Riser. \n \n   Changes:\n \n-o This version is relesed under the Apache License 2.0 , please see \n-  LICENSE.txt. Previous versions were released under the Apache License 1.1. \n-o The Board recommendation to remove Javadoc author tags has been \n-  implemented. All author tags are now \"Apache Software Foundation\".  \n+o \n \n Have fun!\n -The commons-codec team",
                "deletions": 32
            },
            {
                "sha": "8abd22b876ae02d8a75a503d100da668979ed1f7",
                "filename": "src/java/org/apache/commons/codec/language/Soundex.java",
                "blob_url": "https://github.com/apache/commons-codec/blob/5d856dd285cad2a89b6e33f9e93092eab45872c2/src/java/org/apache/commons/codec/language/Soundex.java",
                "raw_url": "https://github.com/apache/commons-codec/raw/5d856dd285cad2a89b6e33f9e93092eab45872c2/src/java/org/apache/commons/codec/language/Soundex.java",
                "status": "modified",
                "changes": 15,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/commons-codec/contents/src/java/org/apache/commons/codec/language/Soundex.java?ref=5d856dd285cad2a89b6e33f9e93092eab45872c2",
                "patch": "@@ -28,13 +28,6 @@\n  */\n public class Soundex implements StringEncoder {\n \n-    /**\n-     * An instance of Soundex using the US_ENGLISH_MAPPING mapping.\n-     * \n-     * @see #US_ENGLISH_MAPPING\n-     */\n-    public static final Soundex US_ENGLISH = new Soundex();\n-\n     /**\n      * This is a default mapping of the 26 letters used in US English. A value of <code>0</code> for a letter position\n      * means do not encode.\n@@ -55,6 +48,14 @@\n      */\n     public static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();\n \n+    /**\n+     * An instance of Soundex using the US_ENGLISH_MAPPING mapping.\n+     * \n+     * @see #US_ENGLISH_MAPPING\n+     */\n+    public static final Soundex US_ENGLISH = new Soundex();\n+\n+\n     /**\n      * Encodes the Strings and returns the number of characters in the two encoded Strings that are the same. This\n      * return value ranges from 0 through 4: 0 indicates little or no similarity, and 4 indicates strong similarity or",
                "deletions": 7
            },
            {
                "sha": "6b115bb8ed5563677124b67136aab3c80205237b",
                "filename": "src/test/org/apache/commons/codec/language/SoundexTest.java",
                "blob_url": "https://github.com/apache/commons-codec/blob/5d856dd285cad2a89b6e33f9e93092eab45872c2/src/test/org/apache/commons/codec/language/SoundexTest.java",
                "raw_url": "https://github.com/apache/commons-codec/raw/5d856dd285cad2a89b6e33f9e93092eab45872c2/src/test/org/apache/commons/codec/language/SoundexTest.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-codec/contents/src/test/org/apache/commons/codec/language/SoundexTest.java?ref=5d856dd285cad2a89b6e33f9e93092eab45872c2",
                "patch": "@@ -367,4 +367,16 @@ public void testUsMappingEWithAcute() {\n             // expected\n         }\n     }\n+    \n+    // This test fails.\n+    public void testUsEnglishStatic()\n+    {\n+        assertEquals( Soundex.US_ENGLISH.soundex( \"Williams\" ), \"W452\" );\n+    }\n+\n+    // This test succeeds.\n+    public void testNewInstance()\n+    {\n+        assertEquals( new Soundex().soundex( \"Williams\" ), \"W452\" );\n+    }\n }",
                "deletions": 0
            }
        ]
    }
]