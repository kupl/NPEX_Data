[{"commit": "https://github.com/apache/karaf/commit/f734dfc42fb705d91a3df0a2e1f3ee2a5047c856", "parent": "https://github.com/apache/karaf/commit/c5cd8e5522b5f64c267fe8d10b4e0c1a181b6c64", "message": "[KARAF-6329] Prevent NPE on shutdown in features service", "bug_id": "karaf_1", "file": [{"additions": 6, "raw_url": "https://github.com/apache/karaf/raw/f734dfc42fb705d91a3df0a2e1f3ee2a5047c856/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java", "blob_url": "https://github.com/apache/karaf/blob/f734dfc42fb705d91a3df0a2e1f3ee2a5047c856/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java", "sha": "28226e6d359257472af188d24f562a4408c58c67", "changes": 8, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java?ref=f734dfc42fb705d91a3df0a2e1f3ee2a5047c856", "patch": "@@ -303,8 +303,12 @@ public void modifiedService(ServiceReference<FeaturesListener> reference, Featur\n     \n                     @Override\n                     public void removedService(ServiceReference<FeaturesListener> reference, FeaturesListener service) {\n-                        featuresService.unregisterListener(service);\n-                        bundleContext.ungetService(reference);\n+                        if (featuresService != null && service != null) {\n+                            featuresService.unregisterListener(service);\n+                        }\n+                        if (bundleContext != null && reference != null) {\n+                            bundleContext.ungetService(reference);\n+                        }\n                     }\n                 }\n         );", "filename": "features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/5ab0681619c287688885ed7bb06ba78690cc981a", "parent": "https://github.com/apache/karaf/commit/a0629fac921754e0254eee3305bd85a6fa7d2925", "message": "Merge pull request #877 from jbonofre/KARAF-6329\n\n[KARAF-6329] Prevent NPE on shutdown in features service", "bug_id": "karaf_2", "file": [{"additions": 6, "raw_url": "https://github.com/apache/karaf/raw/5ab0681619c287688885ed7bb06ba78690cc981a/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java", "blob_url": "https://github.com/apache/karaf/blob/5ab0681619c287688885ed7bb06ba78690cc981a/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java", "sha": "28226e6d359257472af188d24f562a4408c58c67", "changes": 8, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java?ref=5ab0681619c287688885ed7bb06ba78690cc981a", "patch": "@@ -303,8 +303,12 @@ public void modifiedService(ServiceReference<FeaturesListener> reference, Featur\n     \n                     @Override\n                     public void removedService(ServiceReference<FeaturesListener> reference, FeaturesListener service) {\n-                        featuresService.unregisterListener(service);\n-                        bundleContext.ungetService(reference);\n+                        if (featuresService != null && service != null) {\n+                            featuresService.unregisterListener(service);\n+                        }\n+                        if (bundleContext != null && reference != null) {\n+                            bundleContext.ungetService(reference);\n+                        }\n                     }\n                 }\n         );", "filename": "features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/e192fffc3f8a0ae894e78cd37b0a1387075756e5", "parent": "https://github.com/apache/karaf/commit/386940d9f3ae59d153c9d4b4875fe52b0eb98212", "message": "[KARAF-6160] Avoid NPE when configCfgStore=false in etc/org.apache.karaf.features.cfg", "bug_id": "karaf_3", "file": [{"additions": 1, "raw_url": "https://github.com/apache/karaf/raw/e192fffc3f8a0ae894e78cd37b0a1387075756e5/features/core/src/main/java/org/apache/karaf/features/internal/service/FeatureConfigInstaller.java", "blob_url": "https://github.com/apache/karaf/blob/e192fffc3f8a0ae894e78cd37b0a1387075756e5/features/core/src/main/java/org/apache/karaf/features/internal/service/FeatureConfigInstaller.java", "sha": "66ec66dc951529800f05812b0c6b59394290bae8", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/service/FeatureConfigInstaller.java?ref=e192fffc3f8a0ae894e78cd37b0a1387075756e5", "patch": "@@ -112,7 +112,7 @@ public void installFeatureConfigs(Feature feature) throws IOException, InvalidSy\n             if (cfg == null) {\n             \t\n             \tFile cfgFile = null;\n-            \t if (storage != null && configCfgStore) {\n+            \t if (storage != null) {\n             \t\t cfgFile = new File(storage, cid.fullPid + \".cfg\");\n             \t }\n             \t if (!cfgFile.exists()) {", "filename": "features/core/src/main/java/org/apache/karaf/features/internal/service/FeatureConfigInstaller.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/ab4c9e857c5b5a0938622efc6a457b145644bfe8", "parent": "https://github.com/apache/karaf/commit/cc06aeb296a1866727692280a6907ef563ce8e42", "message": "add NPE guard for proxyService", "bug_id": "karaf_4", "file": [{"additions": 3, "raw_url": "https://github.com/apache/karaf/raw/ab4c9e857c5b5a0938622efc6a457b145644bfe8/http/src/main/java/org/apache/karaf/http/core/internal/osgi/Activator.java", "blob_url": "https://github.com/apache/karaf/blob/ab4c9e857c5b5a0938622efc6a457b145644bfe8/http/src/main/java/org/apache/karaf/http/core/internal/osgi/Activator.java", "sha": "6be368ba05ff7e27488d72bfefcc3c26d6599f48", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/http/src/main/java/org/apache/karaf/http/core/internal/osgi/Activator.java?ref=ab4c9e857c5b5a0938622efc6a457b145644bfe8", "patch": "@@ -98,6 +98,8 @@ protected void doStop() {\n \n     @Override\n     public void updated(Dictionary<String, ?> properties) {\n-        proxyService.initProxies();\n+        if (proxyService != null) {\n+            proxyService.initProxies();\n+        }\n     }\n }", "filename": "http/src/main/java/org/apache/karaf/http/core/internal/osgi/Activator.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/dd24defbc09771373596398dc13cf409177ef2c9", "parent": "https://github.com/apache/karaf/commit/30f5982b731fd92d00389840f2ac22c21e9e6a4b", "message": "[KARAF-5887] Fix NPE when starting karaf using bin/shell", "bug_id": "karaf_5", "file": [{"additions": 7, "raw_url": "https://github.com/apache/karaf/raw/dd24defbc09771373596398dc13cf409177ef2c9/shell/core/src/main/java/org/apache/karaf/shell/impl/console/ConsoleSessionImpl.java", "blob_url": "https://github.com/apache/karaf/blob/dd24defbc09771373596398dc13cf409177ef2c9/shell/core/src/main/java/org/apache/karaf/shell/impl/console/ConsoleSessionImpl.java", "sha": "ca379f4efff020fdb7b9a9273c840e35f9f15eaa", "changes": 8, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/core/src/main/java/org/apache/karaf/shell/impl/console/ConsoleSessionImpl.java?ref=dd24defbc09771373596398dc13cf409177ef2c9", "patch": "@@ -154,7 +154,13 @@ public ConsoleSessionImpl(SessionFactory factory,\n         brandingProps = Branding.loadBrandingProperties(terminal.getClass().getName().endsWith(\"SshTerminal\"));\n \n         // Create session\n-        session = processor.createSession(in, out, err);\n+        if (in == null || out == null || err == null) {\n+            session = processor.createSession(((org.jline.terminal.Terminal) terminal).input(),\n+                    ((org.jline.terminal.Terminal) terminal).output(),\n+                    ((org.jline.terminal.Terminal) terminal).output());\n+        } else {\n+            session = processor.createSession(in, out, err);\n+        }\n \n         // Completers\n         Completer builtinCompleter = createBuiltinCompleter();", "filename": "shell/core/src/main/java/org/apache/karaf/shell/impl/console/ConsoleSessionImpl.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/88a3519d5125ac43cd930132292a3660878bf676", "parent": "https://github.com/apache/karaf/commit/30f5982b731fd92d00389840f2ac22c21e9e6a4b", "message": "Merge pull request #609 from jbonofre/KARAF-5887\n\n[KARAF-5887] Fix NPE when starting karaf using bin/shell", "bug_id": "karaf_6", "file": [{"additions": 7, "raw_url": "https://github.com/apache/karaf/raw/88a3519d5125ac43cd930132292a3660878bf676/shell/core/src/main/java/org/apache/karaf/shell/impl/console/ConsoleSessionImpl.java", "blob_url": "https://github.com/apache/karaf/blob/88a3519d5125ac43cd930132292a3660878bf676/shell/core/src/main/java/org/apache/karaf/shell/impl/console/ConsoleSessionImpl.java", "sha": "ca379f4efff020fdb7b9a9273c840e35f9f15eaa", "changes": 8, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/core/src/main/java/org/apache/karaf/shell/impl/console/ConsoleSessionImpl.java?ref=88a3519d5125ac43cd930132292a3660878bf676", "patch": "@@ -154,7 +154,13 @@ public ConsoleSessionImpl(SessionFactory factory,\n         brandingProps = Branding.loadBrandingProperties(terminal.getClass().getName().endsWith(\"SshTerminal\"));\n \n         // Create session\n-        session = processor.createSession(in, out, err);\n+        if (in == null || out == null || err == null) {\n+            session = processor.createSession(((org.jline.terminal.Terminal) terminal).input(),\n+                    ((org.jline.terminal.Terminal) terminal).output(),\n+                    ((org.jline.terminal.Terminal) terminal).output());\n+        } else {\n+            session = processor.createSession(in, out, err);\n+        }\n \n         // Completers\n         Completer builtinCompleter = createBuiltinCompleter();", "filename": "shell/core/src/main/java/org/apache/karaf/shell/impl/console/ConsoleSessionImpl.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/0b6a6736cb461f098e9d59f1986e25e2a480c460", "parent": "https://github.com/apache/karaf/commit/c1af4ffcd53cda555056df792aedeccc5de1b880", "message": "[KARAF-5778] NPE in the ssh client if TERM is null", "bug_id": "karaf_7", "file": [{"additions": 8, "raw_url": "https://github.com/apache/karaf/raw/0b6a6736cb461f098e9d59f1986e25e2a480c460/client/src/main/java/org/apache/karaf/client/Main.java", "blob_url": "https://github.com/apache/karaf/blob/0b6a6736cb461f098e9d59f1986e25e2a480c460/client/src/main/java/org/apache/karaf/client/Main.java", "sha": "3e90b1a9f678e1e4b2168d557955aba822ac684b", "changes": 10, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/karaf/contents/client/src/main/java/org/apache/karaf/client/Main.java?ref=0b6a6736cb461f098e9d59f1986e25e2a480c460", "patch": "@@ -51,8 +51,6 @@\n import org.apache.sshd.client.channel.PtyCapableChannelSession;\n import org.apache.sshd.client.future.ConnectFuture;\n import org.apache.sshd.client.session.ClientSession;\n-import org.apache.sshd.common.FactoryManager;\n-import org.apache.sshd.common.PropertyResolverUtils;\n import org.apache.sshd.common.RuntimeSshException;\n import org.apache.sshd.common.channel.PtyMode;\n import org.apache.sshd.common.config.keys.FilePasswordProvider;\n@@ -178,8 +176,16 @@ else if (console != null) {\n             session.auth().verify();\n \n             int exitStatus = 0;\n+            String type = System.getProperty(TerminalBuilder.PROP_TYPE);\n+            if (type == null) {\n+                type = System.getenv(\"TERM\");\n+            }\n+            if (type == null) {\n+                type = Terminal.TYPE_DUMB;\n+            }\n             try (Terminal terminal = TerminalBuilder.builder()\n                         .nativeSignals(true)\n+                        .type(type)\n                         .signalHandler(Terminal.SignalHandler.SIG_IGN)\n                         .build()) {\n                 if (config.getCommand().length() > 0) {", "filename": "client/src/main/java/org/apache/karaf/client/Main.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/3f023c8698f5c1eba41dca99d2569236dcefe332", "parent": "https://github.com/apache/karaf/commit/6d012bd42e341887e593771797c7a3b05564d92f", "message": "[KARAF-5677] Avoid NPE when artifactLocations is not provided to karaf-maven-plugin:deploy", "bug_id": "karaf_8", "file": [{"additions": 3, "raw_url": "https://github.com/apache/karaf/raw/3f023c8698f5c1eba41dca99d2569236dcefe332/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/client/DeployMojo.java", "blob_url": "https://github.com/apache/karaf/blob/3f023c8698f5c1eba41dca99d2569236dcefe332/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/client/DeployMojo.java", "sha": "cc49834a7612111d719459e0c172776791b95737", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/client/DeployMojo.java?ref=3f023c8698f5c1eba41dca99d2569236dcefe332", "patch": "@@ -109,7 +109,9 @@ public void execute() throws MojoExecutionException {\n             Artifact projectArtifact = project.getArtifact();\n             artifacts.add(\"mvn:\" + projectArtifact.getGroupId() + \"/\" + projectArtifact.getArtifactId() + \"/\" + projectArtifact.getVersion());\n         }\n-        artifacts.addAll(artifactLocations);\n+        if (artifactLocations != null) {\n+            artifacts.addAll(artifactLocations);\n+        }\n         if (useSsh)\n             deployWithSsh(artifactLocations);\n         else deployWithJmx(artifactLocations);", "filename": "tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/client/DeployMojo.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/2e5ba176e38581342d45a44dfdcc261dbc9d09e1", "parent": "https://github.com/apache/karaf/commit/b2d5c5b818746b07afca44ff4b778007562fd994", "message": "Avoid possible NPE", "bug_id": "karaf_9", "file": [{"additions": 8, "raw_url": "https://github.com/apache/karaf/raw/2e5ba176e38581342d45a44dfdcc261dbc9d09e1/shell/core/src/main/java/org/apache/karaf/shell/impl/action/command/DefaultActionPreparator.java", "blob_url": "https://github.com/apache/karaf/blob/2e5ba176e38581342d45a44dfdcc261dbc9d09e1/shell/core/src/main/java/org/apache/karaf/shell/impl/action/command/DefaultActionPreparator.java", "sha": "313e2a228cc3190c809b4b42be3f9ea10f6206f7", "changes": 13, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/core/src/main/java/org/apache/karaf/shell/impl/action/command/DefaultActionPreparator.java?ref=2e5ba176e38581342d45a44dfdcc261dbc9d09e1", "patch": "@@ -399,12 +399,15 @@ public void printUsage(Action action, Map<Option, Field> options, Map<Argument,\n     }\n \n     public Object getDefaultValue(Action action, Field field) {\n-        try {\n-            field.setAccessible(true);\n-            return field.get(action);\n-        } catch (Exception e) {\n-            return null;\n+        if (field != null) {\n+            try {\n+                field.setAccessible(true);\n+                return field.get(action);\n+            } catch (Exception e) {\n+                return null;\n+            }\n         }\n+        return null;\n     }\n \n     private String loadDescription(Class<?> clazz, String desc) {", "filename": "shell/core/src/main/java/org/apache/karaf/shell/impl/action/command/DefaultActionPreparator.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/915894b5d10f2cd3ca14d537291dc9365003d6a1", "parent": "https://github.com/apache/karaf/commit/75f345cbf990134f9dad551591380e76d887bb36", "message": "KARAF-5496 - NPEs in SyncopeLoginModule if \"version\" is not specified", "bug_id": "karaf_10", "file": [{"additions": 5, "raw_url": "https://github.com/apache/karaf/raw/915894b5d10f2cd3ca14d537291dc9365003d6a1/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java", "blob_url": "https://github.com/apache/karaf/blob/915894b5d10f2cd3ca14d537291dc9365003d6a1/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java", "sha": "0e4ae973333ee90acda938f5c6b33faf69fd1d28", "changes": 8, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/karaf/contents/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java?ref=915894b5d10f2cd3ca14d537291dc9365003d6a1", "patch": "@@ -84,7 +84,9 @@ public boolean login() throws LoginException {\n         Credentials creds = new UsernamePasswordCredentials(user, password);\n         client.getCredentialsProvider().setCredentials(AuthScope.ANY, creds);\n         HttpGet get = new HttpGet(address + \"/users/self\");\n-        if (version.equals(\"2.x\") || version.equals(\"2\")) {\n+\n+        boolean version2 = version != null && (version.equals(\"2.x\") || version.equals(\"2\"));\n+        if (version2) {\n             get.setHeader(\"Content-Type\", \"application/json\");\n         } else {\n             get.setHeader(\"Content-Type\", \"application/xml\");\n@@ -102,7 +104,7 @@ public boolean login() throws LoginException {\n             principals.add(new UserPrincipal(user));\n             LOGGER.debug(\"Retrieving user {} roles\", user);\n             String responseSt = EntityUtils.toString(response.getEntity());\n-            if (version.equals(\"2.x\") || version.equals(\"2\")) {\n+            if (version2) {\n                 roles = extractingRolesSyncope2(responseSt);\n             } else {\n                 roles = extractingRolesSyncope1(responseSt);\n@@ -136,7 +138,7 @@ public boolean login() throws LoginException {\n                 response = response.substring(index + \"<memberships>\".length());\n                 index = response.indexOf(\"</memberships>\");\n                 response = response.substring(0, index);\n-    \n+\n                 // looking for the roleName elements\n                 index = response.indexOf(\"<roleName>\");\n                 while (index != -1) {", "filename": "jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/81f69e2cb95a8e4bbfa7a634f0ea52ec98449d82", "parent": "https://github.com/apache/karaf/commit/260498b717483df8c88bc365a58a3a20cb413014", "message": "Upgrade unit tests to use a more recent felix framework version, avoiding an NPE in the console", "bug_id": "karaf_11", "file": [{"additions": 1, "raw_url": "https://github.com/apache/karaf/raw/81f69e2cb95a8e4bbfa7a634f0ea52ec98449d82/main/src/test/resources/test-karaf-home/etc/config.properties", "blob_url": "https://github.com/apache/karaf/blob/81f69e2cb95a8e4bbfa7a634f0ea52ec98449d82/main/src/test/resources/test-karaf-home/etc/config.properties", "sha": "c30059b17fd48e54567096e9c585c0253b46e2ee", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/test/resources/test-karaf-home/etc/config.properties?ref=81f69e2cb95a8e4bbfa7a634f0ea52ec98449d82", "patch": "@@ -31,7 +31,7 @@ karaf.framework=felix\n #\n # Location of the OSGi frameworks\n #\n-karaf.framework.felix=mvn:org.apache.felix/org.apache.felix.framework/4.0.2\n+karaf.framework.felix=mvn:org.apache.felix/org.apache.felix.framework/5.6.10\n \n karaf.shutdown.port.file=${karaf.data}/port\n karaf.pid.file=${karaf.base}/karaf.pid", "filename": "main/src/test/resources/test-karaf-home/etc/config.properties"}, {"additions": 0, "raw_url": "https://github.com/apache/karaf/raw/260498b717483df8c88bc365a58a3a20cb413014/main/src/test/resources/test-karaf-home/system/org/apache/felix/org.apache.felix.framework/4.0.2/org.apache.felix.framework-4.0.2.jar", "blob_url": "https://github.com/apache/karaf/blob/260498b717483df8c88bc365a58a3a20cb413014/main/src/test/resources/test-karaf-home/system/org/apache/felix/org.apache.felix.framework/4.0.2/org.apache.felix.framework-4.0.2.jar", "sha": "79bb774d6efa057ca0dd7b29411e33fdc177f086", "changes": 0, "status": "removed", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/test/resources/test-karaf-home/system/org/apache/felix/org.apache.felix.framework/4.0.2/org.apache.felix.framework-4.0.2.jar?ref=260498b717483df8c88bc365a58a3a20cb413014", "filename": "main/src/test/resources/test-karaf-home/system/org/apache/felix/org.apache.felix.framework/4.0.2/org.apache.felix.framework-4.0.2.jar"}, {"additions": 0, "raw_url": "https://github.com/apache/karaf/raw/81f69e2cb95a8e4bbfa7a634f0ea52ec98449d82/main/src/test/resources/test-karaf-home/system/org/apache/felix/org.apache.felix.framework/5.6.10/org.apache.felix.framework-5.6.10.jar", "blob_url": "https://github.com/apache/karaf/blob/81f69e2cb95a8e4bbfa7a634f0ea52ec98449d82/main/src/test/resources/test-karaf-home/system/org/apache/felix/org.apache.felix.framework/5.6.10/org.apache.felix.framework-5.6.10.jar", "sha": "71dbbefb80c410fd0e9f25ad9e4745f1fab8c07f", "changes": 0, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/test/resources/test-karaf-home/system/org/apache/felix/org.apache.felix.framework/5.6.10/org.apache.felix.framework-5.6.10.jar?ref=81f69e2cb95a8e4bbfa7a634f0ea52ec98449d82", "filename": "main/src/test/resources/test-karaf-home/system/org/apache/felix/org.apache.felix.framework/5.6.10/org.apache.felix.framework-5.6.10.jar"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/404f4149aff043347b0753443eb3d2ad72d4f519", "parent": "https://github.com/apache/karaf/commit/52da062c5e9f4c7f91393d5c69580dd8eb3e4de4", "message": "[KARAF-5181] Prevent NPE in threads command", "bug_id": "karaf_12", "file": [{"additions": 12, "raw_url": "https://github.com/apache/karaf/raw/404f4149aff043347b0753443eb3d2ad72d4f519/shell/commands/src/main/java/org/apache/karaf/shell/commands/impl/ThreadsAction.java", "blob_url": "https://github.com/apache/karaf/blob/404f4149aff043347b0753443eb3d2ad72d4f519/shell/commands/src/main/java/org/apache/karaf/shell/commands/impl/ThreadsAction.java", "sha": "02ca1d0fc0769bb42aab1687ad2bf880a2002722", "changes": 22, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/commands/src/main/java/org/apache/karaf/shell/commands/impl/ThreadsAction.java?ref=404f4149aff043347b0753443eb3d2ad72d4f519", "patch": "@@ -239,17 +239,19 @@ public void printDump(String indent) {\n \n         public boolean isInteresting() {\n             int nb = 0;\n-            StackTraceElement[] stacktrace = info.getStackTrace();\n-            for (StackTraceElement ste : stacktrace) {\n-                boolean interestingLine = true;\n-                for (String pkg : packages) {\n-                    if (ste.getClassName().startsWith(pkg)) {\n-                        interestingLine = false;\n-                        break;\n+            if (info != null && info.getStackTrace() != null) {\n+                StackTraceElement[] stacktrace = info.getStackTrace();\n+                for (StackTraceElement ste : stacktrace) {\n+                    boolean interestingLine = true;\n+                    for (String pkg : packages) {\n+                        if (ste.getClassName().startsWith(pkg)) {\n+                            interestingLine = false;\n+                            break;\n+                        }\n+                    }\n+                    if (interestingLine) {\n+                        nb++;\n                     }\n-                }\n-                if (interestingLine) {\n-                    nb++;\n                 }\n             }\n             return nb >= threshold;", "filename": "shell/commands/src/main/java/org/apache/karaf/shell/commands/impl/ThreadsAction.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/5dcbf1779c7060cbd75b69289a79260fe09503eb", "parent": "https://github.com/apache/karaf/commit/a23ee51742dbefab22810d0803ffd1aeff2b8df8", "message": "Merge pull request #398 from coheigea/KARAF-5496\n\nKARAF-5496 - NPEs in SyncopeLoginModule if \"version\" is not specified", "bug_id": "karaf_13", "file": [{"additions": 5, "raw_url": "https://github.com/apache/karaf/raw/5dcbf1779c7060cbd75b69289a79260fe09503eb/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java", "blob_url": "https://github.com/apache/karaf/blob/5dcbf1779c7060cbd75b69289a79260fe09503eb/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java", "sha": "0e4ae973333ee90acda938f5c6b33faf69fd1d28", "changes": 8, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/karaf/contents/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java?ref=5dcbf1779c7060cbd75b69289a79260fe09503eb", "patch": "@@ -84,7 +84,9 @@ public boolean login() throws LoginException {\n         Credentials creds = new UsernamePasswordCredentials(user, password);\n         client.getCredentialsProvider().setCredentials(AuthScope.ANY, creds);\n         HttpGet get = new HttpGet(address + \"/users/self\");\n-        if (version.equals(\"2.x\") || version.equals(\"2\")) {\n+\n+        boolean version2 = version != null && (version.equals(\"2.x\") || version.equals(\"2\"));\n+        if (version2) {\n             get.setHeader(\"Content-Type\", \"application/json\");\n         } else {\n             get.setHeader(\"Content-Type\", \"application/xml\");\n@@ -102,7 +104,7 @@ public boolean login() throws LoginException {\n             principals.add(new UserPrincipal(user));\n             LOGGER.debug(\"Retrieving user {} roles\", user);\n             String responseSt = EntityUtils.toString(response.getEntity());\n-            if (version.equals(\"2.x\") || version.equals(\"2\")) {\n+            if (version2) {\n                 roles = extractingRolesSyncope2(responseSt);\n             } else {\n                 roles = extractingRolesSyncope1(responseSt);\n@@ -136,7 +138,7 @@ public boolean login() throws LoginException {\n                 response = response.substring(index + \"<memberships>\".length());\n                 index = response.indexOf(\"</memberships>\");\n                 response = response.substring(0, index);\n-    \n+\n                 // looking for the roleName elements\n                 index = response.indexOf(\"<roleName>\");\n                 while (index != -1) {", "filename": "jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/689616a7680a0746ce0cbd8a28ff7661ba3ed0de", "parent": "https://github.com/apache/karaf/commit/4f18c5b96c8e561e2a4eb7500917884a7d352864", "message": "[KARAF-5016] Fix another possible NPE", "bug_id": "karaf_14", "file": [{"additions": 2, "raw_url": "https://github.com/apache/karaf/raw/689616a7680a0746ce0cbd8a28ff7661ba3ed0de/log/src/main/java/org/apache/karaf/log/core/internal/layout/PatternParser.java", "blob_url": "https://github.com/apache/karaf/blob/689616a7680a0746ce0cbd8a28ff7661ba3ed0de/log/src/main/java/org/apache/karaf/log/core/internal/layout/PatternParser.java", "sha": "5e26d13cdbf914963965a2dcbd77c9910dee2898", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/log/src/main/java/org/apache/karaf/log/core/internal/layout/PatternParser.java?ref=689616a7680a0746ce0cbd8a28ff7661ba3ed0de", "patch": "@@ -480,6 +480,8 @@ String convert(PaxLoggingEvent event) {\n     public\n     String convert(PaxLoggingEvent event) {\n       String n = getFullyQualifiedName(event);\n+      if (n == null)\n+\t    return null;\n       if(precision <= 0)\n \treturn n;\n       else {", "filename": "log/src/main/java/org/apache/karaf/log/core/internal/layout/PatternParser.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/6d5355e488e9e5a593fa5a8904a805745c04958a", "parent": "https://github.com/apache/karaf/commit/7f6a3859d7beff00a87a089388779476d91b0724", "message": "[KARAF-5311] NPE in karaf-maven-plugin when specifying descriptor by file url", "bug_id": "karaf_15", "file": [{"additions": 4, "raw_url": "https://github.com/apache/karaf/raw/6d5355e488e9e5a593fa5a8904a805745c04958a/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AbstractFeatureMojo.java", "blob_url": "https://github.com/apache/karaf/blob/6d5355e488e9e5a593fa5a8904a805745c04958a/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AbstractFeatureMojo.java", "sha": "7c29fe35ac245236c7c7f64d4c1f63e29c0fcade", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AbstractFeatureMojo.java?ref=6d5355e488e9e5a593fa5a8904a805745c04958a", "patch": "@@ -122,7 +122,10 @@ protected void retrieveDescriptorsRecursively(String uri, Set<String> bundles, M\n         if (includeMvnBasedDescriptors) {\n             bundles.add(uri);\n         }\n-        Features repo = JaxbUtil.unmarshal(descriptor.getFile().toURI().toString(), true);\n+        String uriToUse = descriptor != null\n+                ? descriptor.getFile().toURI().toString()\n+                : translateFromMaven(uri);\n+        Features repo = JaxbUtil.unmarshal(uriToUse, true);\n         for (Feature f : repo.getFeature()) {\n             featuresMap.put(f.getId(), f);\n         }", "filename": "tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AbstractFeatureMojo.java"}, {"additions": 7, "raw_url": "https://github.com/apache/karaf/raw/6d5355e488e9e5a593fa5a8904a805745c04958a/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/utils/MojoSupport.java", "blob_url": "https://github.com/apache/karaf/blob/6d5355e488e9e5a593fa5a8904a805745c04958a/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/utils/MojoSupport.java", "sha": "3f0e06c2d3ea886bcaf57be518ac78c75fdcc02b", "changes": 14, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/karaf/contents/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/utils/MojoSupport.java?ref=6d5355e488e9e5a593fa5a8904a805745c04958a", "patch": "@@ -188,13 +188,13 @@ protected String translateFromMaven(String uri) {\n \n             return getLocalRepoUrl() + \"/\" + dir + name;\n         }\n-        if (System.getProperty(\"os.name\").startsWith(\"Windows\") && uri.startsWith(\"file:\")) {\n-                String baseDir = uri.substring(5).replace('\\\\', '/').replaceAll(\" \", \"%20\");\n-                String result = baseDir;\n-                if (baseDir.indexOf(\":\") > 0) {\n-                        result = \"file:///\" + baseDir;\n-                }\n-                return result;\n+        uri = uri.replaceAll(\" \", \"%20\");\n+        if (uri.startsWith(\"file:\") && File.separatorChar != '/') {\n+            String baseDir = uri.substring(5).replace(File.separatorChar, '/');\n+            if (baseDir.indexOf(':') >= 0) {\n+                baseDir = \"///\" + baseDir;\n+            }\n+            return \"file:\" + baseDir;\n         }\n         return uri;\n     }", "filename": "tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/utils/MojoSupport.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/f75ade9f2be418a7191df7ca1c4ab32c12b5a279", "parent": "https://github.com/apache/karaf/commit/a4d9968156355d07ec55a21476aa5c95c7dbd839", "message": "[KARAF-5051] Prevent NPE if the console is executed via the shell script", "bug_id": "karaf_16", "file": [{"additions": 1, "raw_url": "https://github.com/apache/karaf/raw/f75ade9f2be418a7191df7ca1c4ab32c12b5a279/shell/core/src/main/java/org/apache/karaf/shell/impl/console/ConsoleSessionImpl.java", "blob_url": "https://github.com/apache/karaf/blob/f75ade9f2be418a7191df7ca1c4ab32c12b5a279/shell/core/src/main/java/org/apache/karaf/shell/impl/console/ConsoleSessionImpl.java", "sha": "0f30c3fc8839a67d4c9a3d6147b6af35c646c91f", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/core/src/main/java/org/apache/karaf/shell/impl/console/ConsoleSessionImpl.java?ref=f75ade9f2be418a7191df7ca1c4ab32c12b5a279", "patch": "@@ -290,7 +290,7 @@ public void close() {\n             }\n \n             running = false;\n-            if (thread != Thread.currentThread()) {\n+            if (thread != Thread.currentThread() && thread != null) {\n                 thread.interrupt();\n             }\n             if (closeCallback != null) {", "filename": "shell/core/src/main/java/org/apache/karaf/shell/impl/console/ConsoleSessionImpl.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/f5b7cce2d5a28dc77db6f7cf0a42511089669de4", "parent": "https://github.com/apache/karaf/commit/17a2b19dc28ad5bf192c03cb9211fa2374c971e6", "message": "[KARAF-4174] Prevent NPE in obr:info command if resource is not complete", "bug_id": "karaf_17", "file": [{"additions": 29, "raw_url": "https://github.com/apache/karaf/raw/f5b7cce2d5a28dc77db6f7cf0a42511089669de4/obr/src/main/java/org/apache/karaf/obr/command/InfoCommand.java", "blob_url": "https://github.com/apache/karaf/blob/f5b7cce2d5a28dc77db6f7cf0a42511089669de4/obr/src/main/java/org/apache/karaf/obr/command/InfoCommand.java", "sha": "443fca0bb2fec7b5acbcc71a99160a694dd19436", "changes": 59, "status": "modified", "deletions": 30, "contents_url": "https://api.github.com/repos/apache/karaf/contents/obr/src/main/java/org/apache/karaf/obr/command/InfoCommand.java?ref=f5b7cce2d5a28dc77db6f7cf0a42511089669de4", "patch": "@@ -59,43 +59,42 @@ protected void doExecute(RepositoryAdmin admin) throws Exception {\n         }\n     }\n \n-    private void printResource(PrintStream out, Resource resource)\n-    {\n-        // OBR R5 per Spec has no presentation name\n-        String resourceId = getResourceId(resource);\n+    private void printResource(PrintStream out, Resource resource) {\n+        if (out != null && resource != null) {\n+            // OBR R5 per Spec has no presentation name\n+            String resourceId = getResourceId(resource);\n \n-        printUnderline(out, resourceId.length());\n-        out.println(resourceId);\n-        printUnderline(out, resourceId.length());\n+            printUnderline(out, resourceId.length());\n+            out.println(resourceId);\n+            printUnderline(out, resourceId.length());\n \n-        Map map = resource.getProperties();\n-        for (Object o : map.entrySet()) {\n-            Map.Entry entry = (Map.Entry) o;\n-            if (entry.getValue().getClass().isArray()) {\n-                out.println(entry.getKey() + \":\");\n-                for (int j = 0; j < Array.getLength(entry.getValue()); j++) {\n-                    out.println(\"   \" + Array.get(entry.getValue(), j));\n+            Map map = resource.getProperties();\n+            for (Object o : map.entrySet()) {\n+                Map.Entry entry = (Map.Entry) o;\n+                if (entry.getValue().getClass().isArray()) {\n+                    out.println(entry.getKey() + \":\");\n+                    for (int j = 0; j < Array.getLength(entry.getValue()); j++) {\n+                        out.println(\"   \" + Array.get(entry.getValue(), j));\n+                    }\n+                } else {\n+                    out.println(entry.getKey() + \": \" + entry.getValue());\n                 }\n-            } else {\n-                out.println(entry.getKey() + \": \" + entry.getValue());\n             }\n-        }\n \n-        Requirement[] reqs = resource.getRequirements();\n-        if ((reqs != null) && (reqs.length > 0))\n-        {\n-            out.println(\"Requires:\");\n-            for (Requirement req : reqs) {\n-                out.println(\"   \" + req.getName() + \":\" + req.getFilter());\n+            Requirement[] reqs = resource.getRequirements();\n+            if ((reqs != null) && (reqs.length > 0)) {\n+                out.println(\"Requires:\");\n+                for (Requirement req : reqs) {\n+                    out.println(\"   \" + req.getName() + \":\" + req.getFilter());\n+                }\n             }\n-        }\n \n-        Capability[] caps = resource.getCapabilities();\n-        if ((caps != null) && (caps.length > 0))\n-        {\n-            out.println(\"Capabilities:\");\n-            for (Capability cap : caps) {\n-                out.println(\"   \" + cap.getName() + \":\" + cap.getPropertiesAsMap());\n+            Capability[] caps = resource.getCapabilities();\n+            if ((caps != null) && (caps.length > 0)) {\n+                out.println(\"Capabilities:\");\n+                for (Capability cap : caps) {\n+                    out.println(\"   \" + cap.getName() + \":\" + cap.getPropertiesAsMap());\n+                }\n             }\n         }\n     }", "filename": "obr/src/main/java/org/apache/karaf/obr/command/InfoCommand.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/85111bea15554f795a08773f3184aabc8733e54c", "parent": "https://github.com/apache/karaf/commit/bf2a9e90b6204a5917b26e66b722e91603daff69", "message": "[KARAF-5211] Prevent NPE in StoredWiringResolver when trying to delete bundle wiring", "bug_id": "karaf_18", "file": [{"additions": 3, "raw_url": "https://github.com/apache/karaf/raw/85111bea15554f795a08773f3184aabc8733e54c/features/extension/src/main/java/org/apache/karaf/features/extension/StoredWiringResolver.java", "blob_url": "https://github.com/apache/karaf/blob/85111bea15554f795a08773f3184aabc8733e54c/features/extension/src/main/java/org/apache/karaf/features/extension/StoredWiringResolver.java", "sha": "0d7de172ca005697d8ed0b8d279b4e1e6a00b4bf", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/extension/src/main/java/org/apache/karaf/features/extension/StoredWiringResolver.java?ref=85111bea15554f795a08773f3184aabc8733e54c", "patch": "@@ -108,6 +108,8 @@ synchronized void update(Bundle bundle) {\n     }\n \n     synchronized void delete(Bundle bundle) {\n-        wiring.get(bundle.getBundleId()).delete(path);\n+        if (wiring.get(bundle.getBundleId()) != null) {\n+            wiring.get(bundle.getBundleId()).delete(path);\n+        }\n     }\n }", "filename": "features/extension/src/main/java/org/apache/karaf/features/extension/StoredWiringResolver.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/ee9612a0cbfcac05eaa149a0c3c6c46968ce2695", "parent": "https://github.com/apache/karaf/commit/d8be33762939e8b8194adfe9d37eca4eb02f1e85", "message": "[KARAF-4275] StaticConfigurationAdmin and NPE with spring dm", "bug_id": "karaf_19", "file": [{"additions": 4, "raw_url": "https://github.com/apache/karaf/raw/ee9612a0cbfcac05eaa149a0c3c6c46968ce2695/services/staticcm/src/main/java/org/apache/karaf/services/staticcm/StaticConfigAdminImpl.java", "blob_url": "https://github.com/apache/karaf/blob/ee9612a0cbfcac05eaa149a0c3c6c46968ce2695/services/staticcm/src/main/java/org/apache/karaf/services/staticcm/StaticConfigAdminImpl.java", "sha": "0d353fa61540caa3a001693e7a8a1cf16f6a188a", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/services/staticcm/src/main/java/org/apache/karaf/services/staticcm/StaticConfigAdminImpl.java?ref=ee9612a0cbfcac05eaa149a0c3c6c46968ce2695", "patch": "@@ -20,6 +20,7 @@\n \n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Hashtable;\n import java.util.List;\n import java.util.Objects;\n \n@@ -134,7 +135,9 @@ public Configuration getConfiguration(String pid) throws IOException {\n                 return config;\n             }\n         }\n-        return null;\n+        Hashtable<String, Object> cfg = new Hashtable<>();\n+        cfg.put(Constants.SERVICE_PID, pid);\n+        return new StaticConfigurationImpl(pid, null, cfg);\n     }\n \n     @Override", "filename": "services/staticcm/src/main/java/org/apache/karaf/services/staticcm/StaticConfigAdminImpl.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/3454b033e20672b6db4a68827e74cf45d22da6af", "parent": "https://github.com/apache/karaf/commit/6a012b05352e8f630c9bf5d2457583a17e080243", "message": "[KARAF-4687] Fix NPE with IBM Java", "bug_id": "karaf_20", "file": [{"additions": 13, "raw_url": "https://github.com/apache/karaf/raw/3454b033e20672b6db4a68827e74cf45d22da6af/exception/src/main/java/java/lang/Exception.java", "blob_url": "https://github.com/apache/karaf/blob/3454b033e20672b6db4a68827e74cf45d22da6af/exception/src/main/java/java/lang/Exception.java", "sha": "940658b459de36b039565fc10e3814c648020b6f", "changes": 21, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/karaf/contents/exception/src/main/java/java/lang/Exception.java?ref=3454b033e20672b6db4a68827e74cf45d22da6af", "patch": "@@ -36,7 +36,7 @@\n public class Exception extends Throwable {\n     private static final long serialVersionUID = -3387516993124229948L;\n \n-    private transient Reference<Class<?>>[] classContext;\n+    private transient Reference<Class<?>>[] classContext = null;\n \n     /**\n      * Constructs a new {@code Exception} that includes the current stack trace.\n@@ -127,20 +127,25 @@ protected Exception(String message, Throwable cause, boolean enableSuppression,\n     @XmlTransient\n     @Deprecated\n     public Class[] getClassContext() {\n-        Class<?>[] context = new Class<?>[classContext.length];\n-        for (int i = 0; i < classContext.length; i++) {\n-            Class<?> c = classContext[i].get();\n-            context[i] = c == null ? Object.class : c;\n+        Class<?>[] context = null;\n+        if (classContext != null) {\n+            context = new Class<?>[classContext.length];\n+            for (int i = 0; i < classContext.length; i++) {\n+                Class<?> c = classContext[i].get();\n+                context[i] = c == null ? Object.class : c;\n+            }\n         }\n         return context;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     private void initClassContext() {\n         Class[] context = SecurityManagerEx.getInstance().getThrowableContext(this);\n-        classContext = new Reference[context.length];\n-        for (int i = 0; i < context.length; i++) {\n-            classContext[i] = new WeakReference<Class<?>>(context[i]);\n+        if (context != null) {\n+            classContext = new Reference[context.length];\n+            for (int i = 0; i < context.length; i++) {\n+                classContext[i] = new WeakReference<Class<?>>(context[i]);\n+            }\n         }\n     }\n     ", "filename": "exception/src/main/java/java/lang/Exception.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/eeb09556eb6b59599ee4a8b57fbee34ea75599e4", "parent": "https://github.com/apache/karaf/commit/c10cdcde9fdbaa158a57349edd01f765b0a6b13f", "message": "[KARAF-5016] Possible NPE while running \"log:tail\" in Karaf console", "bug_id": "karaf_21", "file": [{"additions": 6, "raw_url": "https://github.com/apache/karaf/raw/eeb09556eb6b59599ee4a8b57fbee34ea75599e4/log/src/main/java/org/apache/karaf/log/core/internal/layout/PatternParser.java", "blob_url": "https://github.com/apache/karaf/blob/eeb09556eb6b59599ee4a8b57fbee34ea75599e4/log/src/main/java/org/apache/karaf/log/core/internal/layout/PatternParser.java", "sha": "a3abad8b830ce76ef7f1ddfa1e2effd8dfa0640a", "changes": 9, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/karaf/contents/log/src/main/java/org/apache/karaf/log/core/internal/layout/PatternParser.java?ref=eeb09556eb6b59599ee4a8b57fbee34ea75599e4", "patch": "@@ -531,9 +531,12 @@ String getFullyQualifiedName(PaxLoggingEvent event) {\n \n     public\n     String convert(PaxLoggingEvent event) {\n-        if (key == null) {\n+        Map properties = event.getProperties();\n+        if (properties == null) {\n+          return null;\n+        }\n+        else if (key == null) {\n             StringBuffer buf = new StringBuffer(\"{\");\n-            Map properties = event.getProperties();\n             if (properties.size() > 0) {\n               Object[] keys = properties.keySet().toArray();\n               Arrays.sort(keys);\n@@ -548,7 +551,7 @@ String convert(PaxLoggingEvent event) {\n             buf.append('}');\n             return buf.toString();\n         } else {\n-          Object val = event.getProperties().get(key);\n+          Object val = properties.get(key);\n           if(val == null) {\n               return null;\n           } else {", "filename": "log/src/main/java/org/apache/karaf/log/core/internal/layout/PatternParser.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/4eed5140dd6af7f4ab857a8aa54339e9621a4d9f", "parent": "https://github.com/apache/karaf/commit/01ffa23d4ea446e5985bb4287eb87af3785146ef", "message": "Fix possible NPE", "bug_id": "karaf_22", "file": [{"additions": 1, "raw_url": "https://github.com/apache/karaf/raw/4eed5140dd6af7f4ab857a8aa54339e9621a4d9f/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java", "blob_url": "https://github.com/apache/karaf/blob/4eed5140dd6af7f4ab857a8aa54339e9621a4d9f/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java", "sha": "b7b7af6b27b8b819e63e99a3b8c6caaef7eedf3e", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java?ref=4eed5140dd6af7f4ab857a8aa54339e9621a4d9f", "patch": "@@ -961,7 +961,7 @@ private void computeBundlesToRefresh(Map<Bundle, String> toRefresh, Collection<B\n                     continue;\n                 }\n                 // Ignore bundles that won't be wired\n-                List<Wire> newWires = resolution.get(resource);\n+                List<Wire> newWires = resolution != null ? resolution.get(resource) : null;\n                 if (newWires == null) {\n                     continue;\n                 }", "filename": "features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/9ebb25a9d7578d7ee278f26c4fddd851c669a651", "parent": "https://github.com/apache/karaf/commit/210af29312197178a44c03ea1b439ce63a1c83fa", "message": "Avoid NPE", "bug_id": "karaf_23", "file": [{"additions": 2, "raw_url": "https://github.com/apache/karaf/raw/9ebb25a9d7578d7ee278f26c4fddd851c669a651/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java", "blob_url": "https://github.com/apache/karaf/blob/9ebb25a9d7578d7ee278f26c4fddd851c669a651/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java", "sha": "aded8af4acb0ccd59b90b9649bbbd64ac68e6989", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java?ref=9ebb25a9d7578d7ee278f26c4fddd851c669a651", "patch": "@@ -727,8 +727,8 @@ public void deploy(DeploymentState dstate, DeploymentRequest request) throws Exc\n                             && isUpdateable(resource) && !deployment.bundleChecksums.containsKey(bundle.getBundleId())) {\n                         deployment.bundleChecksums.put(bundle.getBundleId(), crc);\n                     }\n-                    int startLevel = startLevels.get(resource);\n-                    if (startLevel != dstate.initialBundleStartLevel) {\n+                    Integer startLevel = startLevels.get(resource);\n+                    if (startLevel != null && startLevel != dstate.initialBundleStartLevel) {\n                         callback.setBundleStartLevel(bundle, startLevel);\n                     }\n                     FeatureState reqState = states.get(resource);", "filename": "features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/04cefb6ce06a8809977b1fb62405be5b20dc8a43", "parent": "https://github.com/apache/karaf/commit/254f01a46aeccc2b81fa6b8942a181899d62a9b8", "message": "Avoid NPE", "bug_id": "karaf_24", "file": [{"additions": 5, "raw_url": "https://github.com/apache/karaf/raw/04cefb6ce06a8809977b1fb62405be5b20dc8a43/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ExportFeatureMetaDataMojo.java", "blob_url": "https://github.com/apache/karaf/blob/04cefb6ce06a8809977b1fb62405be5b20dc8a43/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ExportFeatureMetaDataMojo.java", "sha": "032a2f782a82c819bfd75eb901368a2ecdf10de0", "changes": 8, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/karaf/contents/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ExportFeatureMetaDataMojo.java?ref=04cefb6ce06a8809977b1fb62405be5b20dc8a43", "patch": "@@ -19,7 +19,6 @@\n \n import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.OutputStream;\n@@ -144,8 +143,11 @@ private Attributes getManifest(Bundle bundle) throws MojoExecutionException {\n                 resolveArtifact(artifact, remoteRepos);\n             }\n             try (JarInputStream jis = new JarInputStream(new FileInputStream(artifact.getFile()))) {\n-                attributes = jis.getManifest().getMainAttributes();\n-                manifests.put(bundle.getLocation(), attributes);\n+                Manifest manifest = jis.getManifest();\n+                if (manifest != null) {\n+                    attributes = manifest.getMainAttributes();\n+                    manifests.put(bundle.getLocation(), attributes);\n+                }\n             } catch (IOException e) {\n                 throw new MojoExecutionException(\"Error reading bundle manifest from \" + bundle.getLocation(), e);\n             }", "filename": "tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ExportFeatureMetaDataMojo.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/8570683db82d3f58836b2283228124d2e6c2abc7", "parent": "https://github.com/apache/karaf/commit/a2735d5a567f789261032dbc47a589b782ca8439", "message": "KARAF-4335 - Avoid NPE in ClientMojo", "bug_id": "karaf_25", "file": [{"additions": 13, "raw_url": "https://github.com/apache/karaf/raw/8570683db82d3f58836b2283228124d2e6c2abc7/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/client/ClientMojo.java", "blob_url": "https://github.com/apache/karaf/blob/8570683db82d3f58836b2283228124d2e6c2abc7/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/client/ClientMojo.java", "sha": "930be6c52f4383a25f6d7b41bb6f4384dbad6535", "changes": 25, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/karaf/contents/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/client/ClientMojo.java?ref=8570683db82d3f58836b2283228124d2e6c2abc7", "patch": "@@ -92,23 +92,24 @@\n \n     public void execute() throws MojoExecutionException {\n         // Add commands from scripts to already declared commands\n-        for (File script : scripts) {\n-            try (BufferedReader br = new BufferedReader(new FileReader(script))) {\n-                String line;\n-                while ((line = br.readLine()) != null) {\n-                    line = line.trim();\n-                    if (line.isEmpty()) {\n-                        continue;\n+        if (scripts != null) {\n+            for (File script : scripts) {\n+                try (BufferedReader br = new BufferedReader(new FileReader(script))) {\n+                    String line;\n+                    while ((line = br.readLine()) != null) {\n+                        line = line.trim();\n+                        if (line.isEmpty()) {\n+                            continue;\n+                        }\n+                        commands.add(line);\n                     }\n-                    commands.add(line);\n+                } catch (Exception e) {\n+                    throw new MojoExecutionException(e, e.getMessage(), e.toString());\n                 }\n             }\n-            catch (Exception e) {\n-                throw new MojoExecutionException(e, e.getMessage(), e.toString());\n-            }\n         }\n \n-        if (commands.isEmpty()) {\n+        if (commands == null || commands.isEmpty()) {\n             getLog().warn(\"No OSGi command was specified\");\n             return;\n         }", "filename": "tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/client/ClientMojo.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/dbee7768c34a2e12791d67e9d84411bb531cac22", "parent": "https://github.com/apache/karaf/commit/205618be71b7571e353e18809e70f8e6d3e55e09", "message": "[KARAF-3638] Avoid NPE", "bug_id": "karaf_26", "file": [{"additions": 1, "raw_url": "https://github.com/apache/karaf/raw/dbee7768c34a2e12791d67e9d84411bb531cac22/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AbstractFeatureMojo.java", "blob_url": "https://github.com/apache/karaf/blob/dbee7768c34a2e12791d67e9d84411bb531cac22/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AbstractFeatureMojo.java", "sha": "659d38b7691772722a9d1acbb33e90ed1e163b2e", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AbstractFeatureMojo.java?ref=dbee7768c34a2e12791d67e9d84411bb531cac22", "patch": "@@ -232,7 +232,7 @@ private Feature getMatchingFeature(Map<String, Feature> featuresMap, String feat\n             \n             addFeatures(features, featuresSet, featuresMap, addTransitiveFeatures);\n     \n-            getLog().info(\"Base repo: \" + localRepo.getUrl());\n+            getLog().info(\"Using local repository at: \" + localRepo.getUrl());\n             for (Feature feature : featuresSet) {\n                 try {\n                     for (Bundle bundle : feature.getBundle()) {", "filename": "tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AbstractFeatureMojo.java"}, {"additions": 8, "raw_url": "https://github.com/apache/karaf/raw/dbee7768c34a2e12791d67e9d84411bb531cac22/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AddToRepositoryMojo.java", "blob_url": "https://github.com/apache/karaf/blob/dbee7768c34a2e12791d67e9d84411bb531cac22/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AddToRepositoryMojo.java", "sha": "cf59ce0d1d30b90bbde367d6ccb991ccee113d08", "changes": 9, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AddToRepositoryMojo.java?ref=dbee7768c34a2e12791d67e9d84411bb531cac22", "patch": "@@ -60,7 +60,7 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n         }\n \n         for (Feature feature : featuresSet) {\n-        \tcopyBundlesToDestRepository(feature.getBundle());\n+            copyBundlesToDestRepository(feature.getBundle());\n             copyConfigFilesToDestRepository(feature.getConfigfile());\n         }\n         \n@@ -71,6 +71,8 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n     private void copyBundlesToDestRepository(List<? extends Bundle> artifactRefs) throws MojoExecutionException {\n         for (Bundle artifactRef : artifactRefs) {\n             Artifact artifact = resourceToArtifact(artifactRef.getLocation(), skipNonMavenProtocols);\n+            // Avoid getting NPE on artifact.getFile in some cases \n+            resolveArtifact(artifact, remoteRepos);\n             if (artifact != null) {\n                 copy(artifact, repository);\n             }\n@@ -80,6 +82,8 @@ private void copyBundlesToDestRepository(List<? extends Bundle> artifactRefs) th\n     private void copyConfigFilesToDestRepository(List<? extends ConfigFile> artifactRefs) throws MojoExecutionException {\n         for (ConfigFile artifactRef : artifactRefs) {\n             Artifact artifact = resourceToArtifact(artifactRef.getLocation(), skipNonMavenProtocols);\n+            // Avoid getting NPE on artifact.getFile in some cases\n+            resolveArtifact(artifact, remoteRepos);\n             if (artifact != null) {\n                 copy(artifact, repository);\n             }\n@@ -90,6 +94,9 @@ protected void copy(Artifact artifact, File destRepository) {\n         try {\n             getLog().info(\"Copying artifact: \" + artifact);\n             File destFile = new File(destRepository, getRelativePath(artifact));\n+            if (artifact.getFile() == null) {\n+                throw new IllegalStateException(\"Artifact is not present in local repo.\"); \n+            }\n             copy(artifact.getFile(), destFile);\n         } catch (Exception e) {\n             getLog().warn(\"Error copying artifact \" + artifact, e);", "filename": "tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AddToRepositoryMojo.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/eac82a86a47ae552b0d61dbc018272ab2fffa0ed", "parent": "https://github.com/apache/karaf/commit/a3b89741ed718a8fd61428f93bd3c877944aea37", "message": "[KARAF-4796] Possible NPE while installing features when using framework extensions", "bug_id": "karaf_27", "file": [{"additions": 1, "raw_url": "https://github.com/apache/karaf/raw/eac82a86a47ae552b0d61dbc018272ab2fffa0ed/features/core/src/main/java/org/apache/karaf/features/internal/region/SubsystemResolver.java", "blob_url": "https://github.com/apache/karaf/blob/eac82a86a47ae552b0d61dbc018272ab2fffa0ed/features/core/src/main/java/org/apache/karaf/features/internal/region/SubsystemResolver.java", "sha": "870236dda0b3221ceffa4f697b51f567f7f9a772", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/region/SubsystemResolver.java?ref=eac82a86a47ae552b0d61dbc018272ab2fffa0ed", "patch": "@@ -411,7 +411,7 @@ private void associateFragments() {\n         for (Map.Entry<Resource, List<Wire>> entry : wiring.entrySet()) {\n             final Resource resource = entry.getKey();\n             final Requirement requirement = getSubsystemRequirement(resource);\n-            if (ResolverUtil.isFragment(resource)) {\n+            if (ResolverUtil.isFragment(resource) && requirement != null) {\n                 List<Wire> wires = entry.getValue();\n                 final Resource host = wires.get(0).getProvider();\n                 final Wire wire = findMatchingWire(sf, wiring.get(host));", "filename": "features/core/src/main/java/org/apache/karaf/features/internal/region/SubsystemResolver.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/a2630e694e8281f475d6ea01701e73334f456e89", "parent": "https://github.com/apache/karaf/commit/04cefb6ce06a8809977b1fb62405be5b20dc8a43", "message": "[KARAF-4086] Avoid NPE in ExportFeatureMetaDataMojo.getBundleSymbolicName", "bug_id": "karaf_28", "file": [{"additions": 3, "raw_url": "https://github.com/apache/karaf/raw/a2630e694e8281f475d6ea01701e73334f456e89/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ExportFeatureMetaDataMojo.java", "blob_url": "https://github.com/apache/karaf/blob/a2630e694e8281f475d6ea01701e73334f456e89/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ExportFeatureMetaDataMojo.java", "sha": "b18001f6b444e0044be5bb1336f0808b2c18b703", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ExportFeatureMetaDataMojo.java?ref=a2630e694e8281f475d6ea01701e73334f456e89", "patch": "@@ -146,8 +146,10 @@ private Attributes getManifest(Bundle bundle) throws MojoExecutionException {\n                 Manifest manifest = jis.getManifest();\n                 if (manifest != null) {\n                     attributes = manifest.getMainAttributes();\n-                    manifests.put(bundle.getLocation(), attributes);\n+                } else {\n+                    attributes = new Attributes();\n                 }\n+                manifests.put(bundle.getLocation(), attributes);\n             } catch (IOException e) {\n                 throw new MojoExecutionException(\"Error reading bundle manifest from \" + bundle.getLocation(), e);\n             }", "filename": "tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ExportFeatureMetaDataMojo.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/dee71a697036dfedcac7f3617f373ff06f7d5fbb", "parent": "https://github.com/apache/karaf/commit/0f3b48bba87cc5293f634df6b1dfc5fe3f161e96", "message": "[KARAF-4597] Avoid npe and exception logging in main module tests", "bug_id": "karaf_29", "file": [{"additions": 3, "raw_url": "https://github.com/apache/karaf/raw/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/main/java/org/apache/karaf/main/InstanceHelper.java", "blob_url": "https://github.com/apache/karaf/blob/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/main/java/org/apache/karaf/main/InstanceHelper.java", "sha": "8b9ebaa028bdab71779bc1e3307c8f71f07ddeb1", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/main/java/org/apache/karaf/main/InstanceHelper.java?ref=dee71a697036dfedcac7f3617f373ff06f7d5fbb", "patch": "@@ -152,7 +152,9 @@ static void setupShutdown(ConfigProperties config, Framework framework) {\n                     port = shutdownSocket.getLocalPort();\r\n                 }\r\n                 if (portFile != null) {\r\n-                    Writer w = new OutputStreamWriter(new FileOutputStream(portFile));\r\n+                    File portF = new File(portFile);\r\n+                    portF.getParentFile().mkdirs();\r\n+                    Writer w = new OutputStreamWriter(new FileOutputStream(portF));\r\n                     w.write(Integer.toString(port));\r\n                     w.close();\r\n                 }\r", "filename": "main/src/main/java/org/apache/karaf/main/InstanceHelper.java"}, {"additions": 19, "raw_url": "https://github.com/apache/karaf/raw/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/main/java/org/apache/karaf/main/lock/DefaultJDBCLock.java", "blob_url": "https://github.com/apache/karaf/blob/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/main/java/org/apache/karaf/main/lock/DefaultJDBCLock.java", "sha": "1fe4fe95df2fda2c98326a064aceb60a500806c8", "changes": 41, "status": "modified", "deletions": 22, "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/main/java/org/apache/karaf/main/lock/DefaultJDBCLock.java?ref=dee71a697036dfedcac7f3617f373ff06f7d5fbb", "patch": "@@ -152,30 +152,20 @@ boolean schemaExists() {\n      * @return true, if the table exists else false\n      */\n     boolean schemaExist(String tableName) {\n-        ResultSet rs = null;\n-        boolean schemaExists = false;\n         try {\n             DatabaseMetaData metadata = getConnection().getMetaData();\n-            rs = metadata.getTables(null, null, tableName, new String[] {\"TABLE\"});\n-            schemaExists = rs.next();\n-            if (schemaExists == false) {\n-                // try table name in lower case\n-                rs = metadata.getTables(null, null, tableName.toLowerCase(), new String[] {\"TABLE\"});\n-                schemaExists = rs.next();\n-            }\n-            /*\n-            if (schemaExists == false) {\n-                // try table name in upper case\n-                rs = getConnection().getMetaData().getTables(null, null, tableName.toUpperCase(), new String[] {\"TABLE\"});\n-                schemaExists = rs.next();\n-            }\n-            */\n+            return metadata != null && (checkTableExists(tableName.toLowerCase(), metadata) //\n+                || checkTableExists(tableName.toLowerCase(), metadata));\n         } catch (Exception ignore) {\n-            LOG.log(Level.SEVERE, \"Error testing for db table\", ignore);\n-        } finally {\n-            closeSafely(rs);\n+            return false;\n+            //throw new RuntimeException(\"Error testing for db table\", ignore);\n+        }\n+    }\n+\n+    private boolean checkTableExists(String tableName, DatabaseMetaData metadata) throws SQLException {\n+        try (ResultSet rs = metadata.getTables(null, null, tableName, new String[] {\"TABLE\"})) {\n+            return rs.next();\n         }\n-        return schemaExists;\n     }\n \n     /*\n@@ -203,7 +193,7 @@ boolean aquireLock() {\n             lockAquired = preparedStatement.execute();\n         } catch (Exception e) {\n             // Do we want to display this message everytime???\n-            LOG.log(Level.WARNING, \"Failed to acquire database lock\", e);\n+            log(Level.WARNING, \"Failed to acquire database lock\", e);\n         } finally {\n             closeSafely(preparedStatement);\n         }\n@@ -222,13 +212,20 @@ boolean updateLock() {\n             int rows = preparedStatement.executeUpdate();\n             lockUpdated = (rows == 1);\n         } catch (Exception e) {\n-            LOG.log(Level.WARNING, \"Failed to update database lock\", e);\n+            log(Level.WARNING, \"Failed to update database lock\", e);\n         } finally {\n             closeSafely(preparedStatement);\n         }\n         \n         return lockUpdated;\n     }\n+    \n+    /**\n+     * Can be overridden to suppress logs in tests\n+     */\n+    public void log(Level level, String msg, Exception e) {\n+        LOG.log(level, msg, e);\n+    }\n \n     /*\n      * (non-Javadoc)", "filename": "main/src/main/java/org/apache/karaf/main/lock/DefaultJDBCLock.java"}, {"additions": 0, "raw_url": "https://github.com/apache/karaf/raw/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/MainLockingTest.java", "blob_url": "https://github.com/apache/karaf/blob/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/MainLockingTest.java", "sha": "78d5a328b479da9c43516c5b58044370aa7d4ad2", "changes": 2, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/test/java/org/apache/karaf/main/MainLockingTest.java?ref=dee71a697036dfedcac7f3617f373ff06f7d5fbb", "patch": "@@ -63,8 +63,6 @@ public void testLostMasterLock() throws Exception {\n         \n         bundle.start();       \n         \n-        Thread.sleep(2000);\n-        \n         FrameworkStartLevel sl = framework.adapt(FrameworkStartLevel.class);\n         \n         MockLock lock = (MockLock) main.getLock();", "filename": "main/src/test/java/org/apache/karaf/main/MainLockingTest.java"}, {"additions": 1, "raw_url": "https://github.com/apache/karaf/raw/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/TimeoutShutdownActivator.java", "blob_url": "https://github.com/apache/karaf/blob/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/TimeoutShutdownActivator.java", "sha": "cd063dcb0d9a8acc3270937e71678d74d7938b99", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/test/java/org/apache/karaf/main/TimeoutShutdownActivator.java?ref=dee71a697036dfedcac7f3617f373ff06f7d5fbb", "patch": "@@ -23,7 +23,7 @@\n \n public class TimeoutShutdownActivator implements BundleActivator {\n \n-    public static int TIMEOUT = 10000;\n+    public static int TIMEOUT = 1000;\n \n     public void start(BundleContext context) throws Exception {\n         System.err.println(\"Starting timeout activator\");", "filename": "main/src/test/java/org/apache/karaf/main/TimeoutShutdownActivator.java"}, {"additions": 4, "raw_url": "https://github.com/apache/karaf/raw/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/BaseJDBCLockTest.java", "blob_url": "https://github.com/apache/karaf/blob/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/BaseJDBCLockTest.java", "sha": "d4d697e4e75002dd9518f14a61c0db5ed8431c8c", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/test/java/org/apache/karaf/main/lock/BaseJDBCLockTest.java?ref=dee71a697036dfedcac7f3617f373ff06f7d5fbb", "patch": "@@ -68,7 +68,7 @@ public static void setUpTestSuite() {\n     \n     @Before\n     public void setUp() throws Exception {\n-        connection = EasyMock.createMock(Connection.class);\n+        connection = EasyMock.createNiceMock(Connection.class);\n         metaData = EasyMock.createMock(DatabaseMetaData.class);\n         resultSet = EasyMock.createMock(ResultSet.class);\n         preparedStatement = EasyMock.createMock(PreparedStatement.class);\n@@ -88,12 +88,13 @@ public void setUp() throws Exception {\n     public void initShouldCreateTheSchemaIfItNotExists() throws Exception {\n         expect(connection.isClosed()).andReturn(false);\n         connection.setAutoCommit(false);\n-        expect(connection.getMetaData()).andReturn(metaData);\n+        expect(connection.getMetaData()).andReturn(metaData).anyTimes();\n         expect(metaData.getTables((String) isNull(), (String) isNull(), anyString(), aryEq(new String[]{\"TABLE\"}))).andReturn(resultSet);\n         expect(metaData.getTables((String) isNull(), (String) isNull(), anyString(), aryEq(new String[]{\"TABLE\"}))).andReturn(resultSet);\n         expect(resultSet.next()).andReturn(false);\n         expect(resultSet.next()).andReturn(false);\n         resultSet.close();\n+        expectLastCall().atLeastOnce();\n         expect(connection.isClosed()).andReturn(false);\n         expect(connection.createStatement()).andReturn(statement);\n         expect(statement.execute(\"CREATE TABLE \" + tableName + \" (MOMENT \" + momentDatatype + \", NODE \" + nodeDatatype + \")\" + createTableStmtSuffix)).andReturn(false);\n@@ -115,7 +116,7 @@ public void initShouldNotCreateTheSchemaIfItAlreadyExists() throws Exception {\n         expect(metaData.getTables((String) isNull(), (String) isNull(), anyString(), aryEq(new String[]{\"TABLE\"}))).andReturn(resultSet);\n         expect(resultSet.next()).andReturn(true);\n         resultSet.close();\n-        \n+        expectLastCall().atLeastOnce();\n         replay(connection, metaData, statement, preparedStatement, resultSet);\n         \n         lock = createLock(props);", "filename": "main/src/test/java/org/apache/karaf/main/lock/BaseJDBCLockTest.java"}, {"additions": 14, "raw_url": "https://github.com/apache/karaf/raw/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/DefaultJDBCLockTest.java", "blob_url": "https://github.com/apache/karaf/blob/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/DefaultJDBCLockTest.java", "sha": "951c45825048f30938e4c811aea2040b4423c2b3", "changes": 15, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/test/java/org/apache/karaf/main/lock/DefaultJDBCLockTest.java?ref=dee71a697036dfedcac7f3617f373ff06f7d5fbb", "patch": "@@ -21,6 +21,9 @@\n import static org.junit.Assert.assertEquals;\n \n import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+\n import org.apache.felix.utils.properties.Properties;\n \n import org.junit.Before;\n@@ -54,14 +57,24 @@ Connection doCreateConnection(String driver, String url, String username, String\n             long getCurrentTimeMillis() {\n                 return 1;\n             }\n+            \n+            @Override\n+            public void log(Level level, String msg, Exception e) {\n+                // Suppress log\n+            }\n         };\n     }\n     \n     @Test\n-    public void createConnectionShouldConcatinateOptionsCorrect() {\n+    public void createConnectionShouldConcatinateOptionsCorrect() throws SQLException {\n         props.put(\"karaf.lock.jdbc.url\", this.url + \";dataEncryption=false\");\n         \n         lock = new DefaultJDBCLock(props) {\n+            @Override\n+            boolean schemaExists() {\n+                return true;\n+            }\n+\n             @Override\n             Connection doCreateConnection(String driver, String url, String username, String password) {\n                 assertEquals(this.driver, driver);", "filename": "main/src/test/java/org/apache/karaf/main/lock/DefaultJDBCLockTest.java"}, {"additions": 12, "raw_url": "https://github.com/apache/karaf/raw/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/DerbyJDBCLockTest.java", "blob_url": "https://github.com/apache/karaf/blob/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/DerbyJDBCLockTest.java", "sha": "fd96dcce26657a8e45185f81441a032d5c64db87", "changes": 12, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/test/java/org/apache/karaf/main/lock/DerbyJDBCLockTest.java?ref=dee71a697036dfedcac7f3617f373ff06f7d5fbb", "patch": "@@ -21,6 +21,8 @@\n import static org.junit.Assert.assertEquals;\n \n import java.sql.Connection;\n+import java.util.logging.Level;\n+\n import org.apache.felix.utils.properties.Properties;\n \n import org.junit.Before;\n@@ -54,6 +56,11 @@ Connection doCreateConnection(String driver, String url, String username, String\n             long getCurrentTimeMillis() {\n                 return 1;\n             }\n+            \n+            @Override\n+            public void log(Level level, String msg, Exception e) {\n+                // Suppress log\n+            }\n         };\n     }\n     \n@@ -62,6 +69,11 @@ public void createConnectionShouldConcatinateOptionsCorrect() {\n         props.put(\"karaf.lock.jdbc.url\", this.url + \";dataEncryption=false\");\n         \n         lock = new DerbyJDBCLock(props) {\n+            @Override\n+            boolean schemaExists() {\n+                return true;\n+            }\n+            \n             @Override\n             Connection doCreateConnection(String driver, String url, String username, String password) {\n                 assertEquals(this.driver, driver);", "filename": "main/src/test/java/org/apache/karaf/main/lock/DerbyJDBCLockTest.java"}, {"additions": 12, "raw_url": "https://github.com/apache/karaf/raw/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/MySQLJDBCLockTest.java", "blob_url": "https://github.com/apache/karaf/blob/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/MySQLJDBCLockTest.java", "sha": "f9daad1a8830000a55bec4d20df5bf1a3395a7c0", "changes": 12, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/test/java/org/apache/karaf/main/lock/MySQLJDBCLockTest.java?ref=dee71a697036dfedcac7f3617f373ff06f7d5fbb", "patch": "@@ -21,6 +21,8 @@\n import static org.junit.Assert.assertEquals;\n \n import java.sql.Connection;\n+import java.util.logging.Level;\n+\n import org.apache.felix.utils.properties.Properties;\n \n import org.junit.Before;\n@@ -54,6 +56,11 @@ Connection doCreateConnection(String driver, String url, String username, String\n             long getCurrentTimeMillis() {\n                 return 1;\n             }\n+            \n+            @Override\n+            public void log(Level level, String msg, Exception e) {\n+                // Suppress log\n+            }\n         };\n     }\n     \n@@ -62,6 +69,11 @@ public void createConnectionShouldConcatinateOptionsCorrect() {\n         props.put(\"karaf.lock.jdbc.url\", this.url + \"?connectTimeout=10000\");\n         \n         lock = new MySQLJDBCLock(props) {\n+            @Override\n+            boolean schemaExists() {\n+                return true;\n+            }\n+            \n             @Override\n             Connection doCreateConnection(String driver, String url, String username, String password) {\n                 assertEquals(this.driver, driver);", "filename": "main/src/test/java/org/apache/karaf/main/lock/MySQLJDBCLockTest.java"}, {"additions": 7, "raw_url": "https://github.com/apache/karaf/raw/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/OracleJDBCLockTest.java", "blob_url": "https://github.com/apache/karaf/blob/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/OracleJDBCLockTest.java", "sha": "120946456c892ae53b788aaffd5c932a0ff40713", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/test/java/org/apache/karaf/main/lock/OracleJDBCLockTest.java?ref=dee71a697036dfedcac7f3617f373ff06f7d5fbb", "patch": "@@ -26,6 +26,8 @@\n \n import java.sql.Connection;\n import java.sql.SQLException;\n+import java.util.logging.Level;\n+\n import org.apache.felix.utils.properties.Properties;\n \n import org.junit.Before;\n@@ -60,6 +62,11 @@ Connection doCreateConnection(String driver, String url, String username, String\n             long getCurrentTimeMillis() {\n                 return 1;\n             }\n+            \n+            @Override\n+            public void log(Level level, String msg, Exception e) {\n+                // Suppress log\n+            }\n         };\n     }\n     ", "filename": "main/src/test/java/org/apache/karaf/main/lock/OracleJDBCLockTest.java"}, {"additions": 12, "raw_url": "https://github.com/apache/karaf/raw/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/PostgreSQLJDBCLockTest.java", "blob_url": "https://github.com/apache/karaf/blob/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/PostgreSQLJDBCLockTest.java", "sha": "079c7f13d69289dd1870667c87913d33b8775d14", "changes": 12, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/test/java/org/apache/karaf/main/lock/PostgreSQLJDBCLockTest.java?ref=dee71a697036dfedcac7f3617f373ff06f7d5fbb", "patch": "@@ -23,6 +23,8 @@\n \n import java.sql.Connection;\n import java.sql.SQLException;\n+import java.util.logging.Level;\n+\n import org.apache.felix.utils.properties.Properties;\n \n import static org.easymock.EasyMock.*;\n@@ -58,6 +60,11 @@ Connection doCreateConnection(String driver, String url, String username, String\n             long getCurrentTimeMillis() {\n                 return 1;\n             }\n+            \n+            @Override\n+            public void log(Level level, String msg, Exception e) {\n+                // Suppress log\n+            }\n         };\n     }\n     \n@@ -66,6 +73,11 @@ public void createConnectionShouldConcatinateOptionsCorrect() {\n         props.put(\"karaf.lock.jdbc.url\", this.url + \";dataEncryption=false\");\n         \n         lock = new PostgreSQLJDBCLock(props) {\n+            @Override\n+            boolean schemaExists() {\n+                return true;\n+            }\n+            \n             @Override\n             Connection doCreateConnection(String driver, String url, String username, String password) {\n                 assertEquals(this.driver, driver);", "filename": "main/src/test/java/org/apache/karaf/main/lock/PostgreSQLJDBCLockTest.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/5a00ab7ee204c05df06925f38d196840bf7f0302", "parent": "https://github.com/apache/karaf/commit/3cb0a002fffcf2d90e8732922813dd4ebc15fb84", "message": "KARAF-4270: Don't NPE for commands without descriptions.", "bug_id": "karaf_30", "file": [{"additions": 6, "raw_url": "https://github.com/apache/karaf/raw/5a00ab7ee204c05df06925f38d196840bf7f0302/shell/console/src/main/java/org/apache/karaf/shell/compat/CommandTracker.java", "blob_url": "https://github.com/apache/karaf/blob/5a00ab7ee204c05df06925f38d196840bf7f0302/shell/console/src/main/java/org/apache/karaf/shell/compat/CommandTracker.java", "sha": "0e5c2e6625042845deb36e3b24ff0d62428e8fcf", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/console/src/main/java/org/apache/karaf/shell/compat/CommandTracker.java?ref=5a00ab7ee204c05df06925f38d196840bf7f0302", "patch": "@@ -186,7 +186,12 @@ public String getName() {\n \n                         @Override\n                         public String getDescription() {\n-                            return reference.getProperty(\"osgi.command.description\").toString();\n+                            Object property = reference.getProperty(\"osgi.command.description\");\n+                            if (property != null) {\n+                                return property.toString();\n+                            } else {\n+                                return null;\n+                            }\n                         }\n \n                         @Override", "filename": "shell/console/src/main/java/org/apache/karaf/shell/compat/CommandTracker.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/9b181c8250602f65bcd7929711ae327c5aae35fc", "parent": "https://github.com/apache/karaf/commit/18ccadd45687e8a66378543a369db324436ed8aa", "message": "Fix bundle comparator to prevent NPE", "bug_id": "karaf_31", "file": [{"additions": 3, "raw_url": "https://github.com/apache/karaf/raw/9b181c8250602f65bcd7929711ae327c5aae35fc/features/core/src/main/java/org/apache/karaf/features/internal/service/BundleComparator.java", "blob_url": "https://github.com/apache/karaf/blob/9b181c8250602f65bcd7929711ae327c5aae35fc/features/core/src/main/java/org/apache/karaf/features/internal/service/BundleComparator.java", "sha": "916dfef00f8411988821b9765d7ece0214a1dfc1", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/service/BundleComparator.java?ref=9b181c8250602f65bcd7929711ae327c5aae35fc", "patch": "@@ -25,6 +25,9 @@\n \n     @Override\n     public int compare(Bundle o1, Bundle o2) {\n+        if ((o1 == null) || (o2 == null)) {\n+            return -1;\n+        }\n         String bsn1 = o1.getSymbolicName();\n         String bsn2 = o2.getSymbolicName();\n         int c = bsn1.compareTo(bsn2);", "filename": "features/core/src/main/java/org/apache/karaf/features/internal/service/BundleComparator.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/1996fca4587053dc4ef7b135e64ae3c62559aa6b", "parent": "https://github.com/apache/karaf/commit/2831b0f873aeefa6444a791b1b832a4130bff090", "message": "KARAF-4254 - Prevent NPE in deployer and subsystem resolver", "bug_id": "karaf_32", "file": [{"additions": 53, "raw_url": "https://github.com/apache/karaf/raw/1996fca4587053dc4ef7b135e64ae3c62559aa6b/features/core/src/main/java/org/apache/karaf/features/internal/region/SubsystemResolver.java", "blob_url": "https://github.com/apache/karaf/blob/1996fca4587053dc4ef7b135e64ae3c62559aa6b/features/core/src/main/java/org/apache/karaf/features/internal/region/SubsystemResolver.java", "sha": "d162e9e43a92aaf4a79ee1172001e5a4684c9cf0", "changes": 100, "status": "modified", "deletions": 47, "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/region/SubsystemResolver.java?ref=1996fca4587053dc4ef7b135e64ae3c62559aa6b", "patch": "@@ -21,14 +21,7 @@\n import java.nio.file.Files;\n import java.nio.file.Paths;\n import java.nio.file.StandardOpenOption;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n \n import org.apache.felix.utils.collections.DictionaryAsMap;\n import org.apache.karaf.features.BundleInfo;\n@@ -172,7 +165,10 @@ public void prepare(\n     }\n \n     public Set<String> collectPrerequisites() throws Exception {\n-        return root.collectPrerequisites();\n+        if (root != null) {\n+            return root.collectPrerequisites();\n+        }\n+        return new HashSet<String>();\n     }\n \n     public Map<Resource, List<Wire>> resolve(\n@@ -279,15 +275,17 @@ private Object toJson(Resource resource) {\n     }\n \n     private void addBundleInfos(Subsystem subsystem) {\n-        String region = getFlatSubsystemsMap().get(subsystem.getName());\n-        Map<String, BundleInfo> bis = bundleInfos.get(region);\n-        if (bis == null) {\n-            bis = new HashMap<>();\n-            bundleInfos.put(region, bis);\n-        }\n-        bis.putAll(subsystem.getBundleInfos());\n-        for (Subsystem child : subsystem.getChildren()) {\n-            addBundleInfos(child);\n+        if (subsystem != null) {\n+            String region = getFlatSubsystemsMap().get(subsystem.getName());\n+            Map<String, BundleInfo> bis = bundleInfos.get(region);\n+            if (bis == null) {\n+                bis = new HashMap<>();\n+                bundleInfos.put(region, bis);\n+            }\n+            bis.putAll(subsystem.getBundleInfos());\n+            for (Subsystem child : subsystem.getChildren()) {\n+                addBundleInfos(child);\n+            }\n         }\n     }\n \n@@ -303,28 +301,30 @@ public RegionDigraph getFlatDigraph() throws BundleException, InvalidSyntaxExcep\n         if (flatDigraph == null) {\n             flatDigraph = new StandardRegionDigraph(null, null);\n             Map<String, String> flats = getFlatSubsystemsMap();\n-            for (Region r : digraph.getRegions()) {\n-                if (r.getName().equals(flats.get(r.getName()))) {\n-                    flatDigraph.createRegion(r.getName());\n+            if (digraph != null) {\n+                for (Region r : digraph.getRegions()) {\n+                    if (r.getName().equals(flats.get(r.getName()))) {\n+                        flatDigraph.createRegion(r.getName());\n+                    }\n                 }\n-            }\n-            for (Region r : digraph.getRegions()) {\n-                for (RegionDigraph.FilteredRegion fr : digraph.getEdges(r)) {\n-                    String rt = flats.get(r.getName());\n-                    String rh = flats.get(fr.getRegion().getName());\n-                    if (!rh.equals(rt)) {\n-                        Region tail = flatDigraph.getRegion(rt);\n-                        Region head = flatDigraph.getRegion(rh);\n-                        RegionFilterBuilder rfb = flatDigraph.createRegionFilterBuilder();\n-                        for (Map.Entry<String, Collection<String>> entry : fr.getFilter().getSharingPolicy().entrySet()) {\n-                            // Discard osgi.identity namespace\n-                            if (!IDENTITY_NAMESPACE.equals(entry.getKey())) {\n-                                for (String f : entry.getValue()) {\n-                                    rfb.allow(entry.getKey(), f);\n+                for (Region r : digraph.getRegions()) {\n+                    for (RegionDigraph.FilteredRegion fr : digraph.getEdges(r)) {\n+                        String rt = flats.get(r.getName());\n+                        String rh = flats.get(fr.getRegion().getName());\n+                        if (!rh.equals(rt)) {\n+                            Region tail = flatDigraph.getRegion(rt);\n+                            Region head = flatDigraph.getRegion(rh);\n+                            RegionFilterBuilder rfb = flatDigraph.createRegionFilterBuilder();\n+                            for (Map.Entry<String, Collection<String>> entry : fr.getFilter().getSharingPolicy().entrySet()) {\n+                                // Discard osgi.identity namespace\n+                                if (!IDENTITY_NAMESPACE.equals(entry.getKey())) {\n+                                    for (String f : entry.getValue()) {\n+                                        rfb.allow(entry.getKey(), f);\n+                                    }\n                                 }\n                             }\n+                            flatDigraph.connect(tail, rfb.build(), head);\n                         }\n-                        flatDigraph.connect(tail, rfb.build(), head);\n                     }\n                 }\n             }\n@@ -390,14 +390,16 @@ public RegionDigraph getFlatDigraph() throws BundleException, InvalidSyntaxExcep\n         Map<Resource, String> resources = new HashMap<>();\n         SimpleFilter sf = createFilter(IDENTITY_NAMESPACE, \"*\",\n                 CAPABILITY_TYPE_ATTRIBUTE, TYPE_SUBSYSTEM);\n-        for (Resource resource : wiring.keySet()) {\n-            if (findMatchingCapability(resourceFilter, resource.getCapabilities(null)) != null) {\n-                // Find the subsystem where this feature is installed\n-                Wire wire = findMatchingWire(sf, wiring.get(resource));\n-                if (wire != null) {\n-                    String region = (String) wire.getCapability().getAttributes().get(IDENTITY_NAMESPACE);\n-                    region = flats.get(region);\n-                    resources.put(resource, region);\n+        if (wiring != null) {\n+            for (Resource resource : wiring.keySet()) {\n+                if (findMatchingCapability(resourceFilter, resource.getCapabilities(null)) != null) {\n+                    // Find the subsystem where this feature is installed\n+                    Wire wire = findMatchingWire(sf, wiring.get(resource));\n+                    if (wire != null) {\n+                        String region = (String) wire.getCapability().getAttributes().get(IDENTITY_NAMESPACE);\n+                        region = flats.get(region);\n+                        resources.put(resource, region);\n+                    }\n                 }\n             }\n         }\n@@ -483,13 +485,17 @@ private void findSubsystemsToFlatten(Subsystem subsystem, Map<String, String> to\n         while (isFlat(nonFlat)) {\n             nonFlat = nonFlat.getParent();\n         }\n-        toFlatten.put(subsystem.getName(), nonFlat.getName());\n-        for (Subsystem child : subsystem.getChildren()) {\n-            findSubsystemsToFlatten(child, toFlatten);\n+        if (subsystem != null) {\n+            toFlatten.put(subsystem.getName(), nonFlat.getName());\n+            for (Subsystem child : subsystem.getChildren()) {\n+                findSubsystemsToFlatten(child, toFlatten);\n+            }\n         }\n     }\n \n     private boolean isFlat(Subsystem subsystem) {\n+        if (subsystem == null || subsystem.getFeature() == null)\n+            return false;\n         return subsystem.getFeature() != null && subsystem.getFeature().getScoping() == null;\n     }\n ", "filename": "features/core/src/main/java/org/apache/karaf/features/internal/region/SubsystemResolver.java"}, {"additions": 22, "raw_url": "https://github.com/apache/karaf/raw/1996fca4587053dc4ef7b135e64ae3c62559aa6b/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java", "blob_url": "https://github.com/apache/karaf/blob/1996fca4587053dc4ef7b135e64ae3c62559aa6b/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java", "sha": "1414b70630a6682c930fc920c9a5841d7d6f1c85", "changes": 38, "status": "modified", "deletions": 16, "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java?ref=1996fca4587053dc4ef7b135e64ae3c62559aa6b", "patch": "@@ -345,20 +345,24 @@ public void deploy(DeploymentState dstate, DeploymentRequest request) throws Exc\n             Set<? extends Resource> unmanaged = apply(flatten(unmanagedBundles), adapt(BundleRevision.class));\n             Set<Resource> requested = new HashSet<>();\n             // Gather bundles required by a feature\n-            for (List<Wire> wires : resolver.getWiring().values()) {\n-                for (Wire wire : wires) {\n-                    if (features.contains(wire.getRequirer()) && unmanaged.contains(wire.getProvider())) {\n-                        requested.add(wire.getProvider());\n+            if (resolver != null && resolver.getWiring() != null) {\n+                for (List<Wire> wires : resolver.getWiring().values()) {\n+                    for (Wire wire : wires) {\n+                        if (features.contains(wire.getRequirer()) && unmanaged.contains(wire.getProvider())) {\n+                            requested.add(wire.getProvider());\n+                        }\n                     }\n                 }\n             }\n             // Now, we know which bundles are completely unmanaged\n             unmanaged.removeAll(requested);\n             // Check if bundles have wires from really unmanaged bundles\n-            for (List<Wire> wires : resolver.getWiring().values()) {\n-                for (Wire wire : wires) {\n-                    if (requested.contains(wire.getProvider()) && unmanaged.contains(wire.getRequirer())) {\n-                        requested.remove(wire.getProvider());\n+            if (resolver != null && resolver.getWiring() != null) {\n+                for (List<Wire> wires : resolver.getWiring().values()) {\n+                    for (Wire wire : wires) {\n+                        if (requested.contains(wire.getProvider()) && unmanaged.contains(wire.getRequirer())) {\n+                            requested.remove(wire.getProvider());\n+                        }\n                     }\n                 }\n             }\n@@ -919,14 +923,16 @@ private void computeBundlesToRefresh(Map<Bundle, String> toRefresh, Collection<B\n         for (Bundle bundle : bundles) {\n             newFragments.put(bundle, new HashSet<Resource>());\n         }\n-        for (Resource res : resolution.keySet()) {\n-            for (Wire wire : resolution.get(res)) {\n-                if (HOST_NAMESPACE.equals(wire.getCapability().getNamespace())) {\n-                    Bundle bundle = resources.get(wire.getProvider());\n-                    if (bundle != null) {\n-                        Bundle b = resources.get(wire.getRequirer());\n-                        Resource r = b != null ? b.adapt(BundleRevision.class) : wire.getRequirer();\n-                        newFragments.get(bundle).add(r);\n+        if (resolution != null) {\n+            for (Resource res : resolution.keySet()) {\n+                for (Wire wire : resolution.get(res)) {\n+                    if (HOST_NAMESPACE.equals(wire.getCapability().getNamespace())) {\n+                        Bundle bundle = resources.get(wire.getProvider());\n+                        if (bundle != null) {\n+                            Bundle b = resources.get(wire.getRequirer());\n+                            Resource r = b != null ? b.adapt(BundleRevision.class) : wire.getRequirer();\n+                            newFragments.get(bundle).add(r);\n+                        }\n                     }\n                 }\n             }", "filename": "features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/0c1218406bf44d8501aaba531cb4437d474dc843", "parent": "https://github.com/apache/karaf/commit/db1143e8966acd535d039cd2b2dbd61ffe9e2092", "message": "[KARAF-3404] Fix possible NPE", "bug_id": "karaf_33", "file": [{"additions": 2, "raw_url": "https://github.com/apache/karaf/raw/0c1218406bf44d8501aaba531cb4437d474dc843/profile/src/main/java/org/apache/karaf/profile/impl/Profiles.java", "blob_url": "https://github.com/apache/karaf/blob/0c1218406bf44d8501aaba531cb4437d474dc843/profile/src/main/java/org/apache/karaf/profile/impl/Profiles.java", "sha": "7f8d483cb1fe9f626678b0ba58438a6009bd604d", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/profile/src/main/java/org/apache/karaf/profile/impl/Profiles.java?ref=0c1218406bf44d8501aaba531cb4437d474dc843", "patch": "@@ -52,7 +52,8 @@\n                 ProfileBuilder builder;\n                 @Override\n                 public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n-                    if (dir.getFileName().toString().endsWith(PROFILE_FOLDER_SUFFIX)) {\n+                    Path fileName = dir.getFileName();\n+                    if (fileName != null && fileName.toString().endsWith(PROFILE_FOLDER_SUFFIX)) {\n                         String profileId = root.relativize(dir).toString();\n                         profileId = profileId.replaceAll(root.getFileSystem().getSeparator(), \"-\");\n                         profileId = profileId.substring(0, profileId.length() - PROFILE_FOLDER_SUFFIX.length());", "filename": "profile/src/main/java/org/apache/karaf/profile/impl/Profiles.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/9b4a050ec78869f4e690c81d06a4b129ce3defca", "parent": "https://github.com/apache/karaf/commit/981239128f69f31dbd89cb6ddabf8a416d1606e1", "message": "Fix possible NPE", "bug_id": "karaf_34", "file": [{"additions": 4, "raw_url": "https://github.com/apache/karaf/raw/9b4a050ec78869f4e690c81d06a4b129ce3defca/service/core/src/main/java/org/apache/karaf/service/command/ListServices.java", "blob_url": "https://github.com/apache/karaf/blob/9b4a050ec78869f4e690c81d06a4b129ce3defca/service/core/src/main/java/org/apache/karaf/service/command/ListServices.java", "sha": "aed352ef1ef5be9d666da6ed34d160471856ce53", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/karaf/contents/service/core/src/main/java/org/apache/karaf/service/command/ListServices.java?ref=9b4a050ec78869f4e690c81d06a4b129ce3defca", "patch": "@@ -122,9 +122,10 @@ private void printServiceRef(ServiceReference<?> serviceRef) {\n         String bundleName = ShellUtil.getBundleName(serviceRef.getBundle());\n         System.out.println(\"Provided by : \");\n         System.out.println(\" \" + bundleName);\n-        if (serviceRef.getUsingBundles() != null) {\n-        System.out.println(\"Used by: \");\n-            for (Bundle bundle : serviceRef.getUsingBundles()) {\n+        Bundle[] usingBundles = serviceRef.getUsingBundles();\n+        if (usingBundles != null) {\n+            System.out.println(\"Used by: \");\n+            for (Bundle bundle : usingBundles) {\n                 System.out.println(\" \" + ShellUtil.getBundleName(bundle));\n             }\n         }", "filename": "service/core/src/main/java/org/apache/karaf/service/command/ListServices.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/da4aa4c59698c39929d565ae83cf0696311ab671", "parent": "https://github.com/apache/karaf/commit/687ba286974f1edd15c5bae0330864d3502b8339", "message": "Fix possible NPE", "bug_id": "karaf_35", "file": [{"additions": 5, "raw_url": "https://github.com/apache/karaf/raw/da4aa4c59698c39929d565ae83cf0696311ab671/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/impl/KarafRealm.java", "blob_url": "https://github.com/apache/karaf/blob/da4aa4c59698c39929d565ae83cf0696311ab671/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/impl/KarafRealm.java", "sha": "a04d5ac8277fa31b043d8867dd6f036812e35ef2", "changes": 8, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/karaf/contents/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/impl/KarafRealm.java?ref=da4aa4c59698c39929d565ae83cf0696311ab671", "patch": "@@ -67,9 +67,11 @@ private void populateDefault(Map<String, Object> props) {\n     public void updated(Dictionary<String, ?> properties) throws ConfigurationException {\n         Map<String, Object> props = new HashMap<String, Object>();\n         populateDefault(props);\n-        for (Enumeration<String> keyEnum = properties.keys(); keyEnum.hasMoreElements(); ) {\n-            String key = keyEnum.nextElement();\n-            props.put(key, properties.get(key));\n+        if (properties != null) {\n+            for (Enumeration<String> keyEnum = properties.keys(); keyEnum.hasMoreElements(); ) {\n+                String key = keyEnum.nextElement();\n+                props.put(key, properties.get(key));\n+            }\n         }\n         this.properties = props;\n     }", "filename": "jaas/modules/src/main/java/org/apache/karaf/jaas/modules/impl/KarafRealm.java"}, {"additions": 4, "raw_url": "https://github.com/apache/karaf/raw/da4aa4c59698c39929d565ae83cf0696311ab671/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/Activator.java", "blob_url": "https://github.com/apache/karaf/blob/da4aa4c59698c39929d565ae83cf0696311ab671/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/Activator.java", "sha": "9c328d4e05cd354c1dc73324badbff2ace645012", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/Activator.java?ref=da4aa4c59698c39929d565ae83cf0696311ab671", "patch": "@@ -80,11 +80,13 @@ public void start(BundleContext context) throws Exception {\n     @Override\n     public void stop(BundleContext context) throws Exception {\n         sessionFactoryRegistration.unregister();\n-        localConsoleManager.stop();\n+        if (localConsoleManager != null) {\n+            localConsoleManager.stop();\n+            terminalFactory.destroy();\n+        }\n         sessionFactory.stop();\n         actionExtender.stop(context);\n         threadIO.stop();\n-        terminalFactory.destroy();\n         if (eventAdminListener != null) {\n             eventAdminListener.close();\n         }", "filename": "shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/Activator.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/b220722c3652bf02ca00150d0decb2509b83adc0", "parent": "https://github.com/apache/karaf/commit/f74a1dcdcf28f0615ab28519716b844c20b84edc", "message": "add a NPE checker", "bug_id": "karaf_36", "file": [{"additions": 3, "raw_url": "https://github.com/apache/karaf/raw/b220722c3652bf02ca00150d0decb2509b83adc0/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/properties/PropertiesLoginModule.java", "blob_url": "https://github.com/apache/karaf/blob/b220722c3652bf02ca00150d0decb2509b83adc0/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/properties/PropertiesLoginModule.java", "sha": "c11d54a473f211ce8fc6b8de7f7feb5bf4c44e37", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/karaf/contents/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/properties/PropertiesLoginModule.java?ref=b220722c3652bf02ca00150d0decb2509b83adc0", "patch": "@@ -59,9 +59,10 @@ public void initialize(Subject sub, CallbackHandler handler, Map sharedState, Ma\n             LOGGER.debug(\"Initialized debug={} usersFile={}\", debug, usersFile);\n         }\n        \n-        if (propertiesInstaller == null || !usersFile.equals(propertiesInstaller.getUsersFileName()) ) {\n+        if (propertiesInstaller == null \n+            || (usersFile != null && !usersFile.equals(propertiesInstaller.getUsersFileName())) ) {\n        \n-            LOG.debug(\"Register PropertiesInstaller service\");\n+            LOGGER.debug(\"Register PropertiesInstaller service\");\n             \n             propertiesInstaller = new PropertiesInstaller(this, usersFile);\n             if (this.bundleContext != null) {", "filename": "jaas/modules/src/main/java/org/apache/karaf/jaas/modules/properties/PropertiesLoginModule.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/d81ae57596648ef7786177d98df4a772f7cc9f35", "parent": "https://github.com/apache/karaf/commit/2de25877954025952f16463dde3465e93d1679a7", "message": "Protect against NPE", "bug_id": "karaf_37", "file": [{"additions": 6, "raw_url": "https://github.com/apache/karaf/raw/d81ae57596648ef7786177d98df4a772f7cc9f35/itests/src/test/java/org/apache/karaf/itests/KarafTestSupport.java", "blob_url": "https://github.com/apache/karaf/blob/d81ae57596648ef7786177d98df4a772f7cc9f35/itests/src/test/java/org/apache/karaf/itests/KarafTestSupport.java", "sha": "ccde9751378d120ae97e5327a94ccc32901fa0c4", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/itests/src/test/java/org/apache/karaf/itests/KarafTestSupport.java?ref=d81ae57596648ef7786177d98df4a772f7cc9f35", "patch": "@@ -26,6 +26,7 @@\n import java.io.File;\n import java.io.IOException;\n import java.io.PrintStream;\n+import java.net.URL;\n import java.security.Principal;\n import java.security.PrivilegedExceptionAction;\n import java.util.Arrays;\n@@ -108,7 +109,11 @@ public TestProbeBuilder probeConfiguration(TestProbeBuilder probe) {\n     }\n \n     public File getConfigFile(String path) {\n-    \treturn new File(this.getClass().getResource(path).getFile());\n+        URL res = this.getClass().getResource(path);\n+        if (res == null) {\n+            throw new RuntimeException(\"Config resource \" + path + \" not found\");\n+        }\n+    \treturn new File(res.getFile());\n     }\n \n     @Configuration", "filename": "itests/src/test/java/org/apache/karaf/itests/KarafTestSupport.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/6af8d60e58f38a55f337d880d953f4e15c47674d", "parent": "https://github.com/apache/karaf/commit/870a0ceb09165028ef21da59d9efbd0ad03c02c9", "message": "[KARAF-3460] Prevent NPE in AutoEncryptionSupport threading", "bug_id": "karaf_38", "file": [{"additions": 4, "raw_url": "https://github.com/apache/karaf/raw/6af8d60e58f38a55f337d880d953f4e15c47674d/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/properties/AutoEncryptionSupport.java", "blob_url": "https://github.com/apache/karaf/blob/6af8d60e58f38a55f337d880d953f4e15c47674d/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/properties/AutoEncryptionSupport.java", "sha": "06714afa452c16cc0ef1cb5f58e2e160d6cdf4e8", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/properties/AutoEncryptionSupport.java?ref=6af8d60e58f38a55f337d880d953f4e15c47674d", "patch": "@@ -76,6 +76,10 @@ public void updated(Map<String, Object> properties) {\n     public void run() {\n         try {\n             Path dir = Paths.get(System.getProperty(\"karaf.etc\"));\n+            if (watchService == null) {\n+                // just to prevent NPE (KARAF-3460)\n+                watchService = FileSystems.getDefault().newWatchService();\n+            }\n             dir.register(watchService, ENTRY_MODIFY);\n \n             Path file = dir.resolve(\"users.properties\");", "filename": "jaas/modules/src/main/java/org/apache/karaf/jaas/modules/properties/AutoEncryptionSupport.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/0f0bd21e9ea160196aa4af9197c15ff285829083", "parent": "https://github.com/apache/karaf/commit/49cc30549c55d0e67aee1c19985b8094cf4adcb1", "message": "[KARAF-3783] Fix NPE in karaf-maven-plugin", "bug_id": "karaf_39", "file": [{"additions": 4, "raw_url": "https://github.com/apache/karaf/raw/0f0bd21e9ea160196aa4af9197c15ff285829083/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ExportFeatureMetaDataMojo.java", "blob_url": "https://github.com/apache/karaf/blob/0f0bd21e9ea160196aa4af9197c15ff285829083/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ExportFeatureMetaDataMojo.java", "sha": "7c00462463a8043d5b1e3aa2578f0c229f238f10", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ExportFeatureMetaDataMojo.java?ref=0f0bd21e9ea160196aa4af9197c15ff285829083", "patch": "@@ -96,7 +96,7 @@ private Feature mergeFeature(Set<Feature> featuresSet) throws MojoExecutionExcep\n                 String bundleId = getBundleSymbolicName(bundle) + \":\" + getBundleVersion(bundle);\n                 if (!bundleIds.contains(bundleId)) {\n                     bundleIds.add(bundleId);\n-                    merged.getBundles().add(bundle);\n+                    merged.getBundle().add(bundle);\n                 }\n             }\n         }\n@@ -140,6 +140,9 @@ private Attributes getManifest(Bundle bundle) throws MojoExecutionException {\n         Attributes attributes = manifests.get(bundle.getLocation());\n         if (attributes == null) {\n             Artifact artifact = resourceToArtifact(bundle.getLocation(), skipNonMavenProtocols);\n+            if (artifact.getFile() == null) {\n+                resolveArtifact(artifact, remoteRepos);\n+            }\n             try (JarInputStream jis = new JarInputStream(new FileInputStream(artifact.getFile()))) {\n                 attributes = jis.getManifest().getMainAttributes();\n                 manifests.put(bundle.getLocation(), attributes);", "filename": "tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ExportFeatureMetaDataMojo.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/43beebcb7d7495f58e1b3e165eb99da8155a6f81", "parent": "https://github.com/apache/karaf/commit/a93becede6b370f87ef57ab09a590c4d833de74e", "message": "[KARAF-3783] Fix NPE in karaf-maven-plugin", "bug_id": "karaf_40", "file": [{"additions": 4, "raw_url": "https://github.com/apache/karaf/raw/43beebcb7d7495f58e1b3e165eb99da8155a6f81/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ExportFeatureMetaDataMojo.java", "blob_url": "https://github.com/apache/karaf/blob/43beebcb7d7495f58e1b3e165eb99da8155a6f81/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ExportFeatureMetaDataMojo.java", "sha": "7c00462463a8043d5b1e3aa2578f0c229f238f10", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ExportFeatureMetaDataMojo.java?ref=43beebcb7d7495f58e1b3e165eb99da8155a6f81", "patch": "@@ -96,7 +96,7 @@ private Feature mergeFeature(Set<Feature> featuresSet) throws MojoExecutionExcep\n                 String bundleId = getBundleSymbolicName(bundle) + \":\" + getBundleVersion(bundle);\n                 if (!bundleIds.contains(bundleId)) {\n                     bundleIds.add(bundleId);\n-                    merged.getBundles().add(bundle);\n+                    merged.getBundle().add(bundle);\n                 }\n             }\n         }\n@@ -140,6 +140,9 @@ private Attributes getManifest(Bundle bundle) throws MojoExecutionException {\n         Attributes attributes = manifests.get(bundle.getLocation());\n         if (attributes == null) {\n             Artifact artifact = resourceToArtifact(bundle.getLocation(), skipNonMavenProtocols);\n+            if (artifact.getFile() == null) {\n+                resolveArtifact(artifact, remoteRepos);\n+            }\n             try (JarInputStream jis = new JarInputStream(new FileInputStream(artifact.getFile()))) {\n                 attributes = jis.getManifest().getMainAttributes();\n                 manifests.put(bundle.getLocation(), attributes);", "filename": "tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ExportFeatureMetaDataMojo.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/5013fd5f4546fa715a8996d4e16d8ab0631b313d", "parent": "https://github.com/apache/karaf/commit/ac0587641793b69007d08e7c89417d5cc2ba5bce", "message": "[KARAF-3783] Fix NPE in karaf-maven-plugin", "bug_id": "karaf_41", "file": [{"additions": 4, "raw_url": "https://github.com/apache/karaf/raw/5013fd5f4546fa715a8996d4e16d8ab0631b313d/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ExportFeatureMetaDataMojo.java", "blob_url": "https://github.com/apache/karaf/blob/5013fd5f4546fa715a8996d4e16d8ab0631b313d/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ExportFeatureMetaDataMojo.java", "sha": "7c00462463a8043d5b1e3aa2578f0c229f238f10", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ExportFeatureMetaDataMojo.java?ref=5013fd5f4546fa715a8996d4e16d8ab0631b313d", "patch": "@@ -96,7 +96,7 @@ private Feature mergeFeature(Set<Feature> featuresSet) throws MojoExecutionExcep\n                 String bundleId = getBundleSymbolicName(bundle) + \":\" + getBundleVersion(bundle);\n                 if (!bundleIds.contains(bundleId)) {\n                     bundleIds.add(bundleId);\n-                    merged.getBundles().add(bundle);\n+                    merged.getBundle().add(bundle);\n                 }\n             }\n         }\n@@ -140,6 +140,9 @@ private Attributes getManifest(Bundle bundle) throws MojoExecutionException {\n         Attributes attributes = manifests.get(bundle.getLocation());\n         if (attributes == null) {\n             Artifact artifact = resourceToArtifact(bundle.getLocation(), skipNonMavenProtocols);\n+            if (artifact.getFile() == null) {\n+                resolveArtifact(artifact, remoteRepos);\n+            }\n             try (JarInputStream jis = new JarInputStream(new FileInputStream(artifact.getFile()))) {\n                 attributes = jis.getManifest().getMainAttributes();\n                 manifests.put(bundle.getLocation(), attributes);", "filename": "tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ExportFeatureMetaDataMojo.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/4b6b7afb16aa4699e75bd6b739838c55ac20c20e", "parent": "https://github.com/apache/karaf/commit/48ef3aa0146bf891fbefa70172ed5377fb6d4fd9", "message": "KARAF-2899 - NPE when running features:listUrl", "bug_id": "karaf_42", "file": [{"additions": 3, "raw_url": "https://github.com/apache/karaf/raw/4b6b7afb16aa4699e75bd6b739838c55ac20c20e/features/src/main/java/org/apache/karaf/features/command/RepoListCommand.java", "blob_url": "https://github.com/apache/karaf/blob/4b6b7afb16aa4699e75bd6b739838c55ac20c20e/features/src/main/java/org/apache/karaf/features/command/RepoListCommand.java", "sha": "55acf79c3be99483135d1c647cb613739aecf6a6", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/src/main/java/org/apache/karaf/features/command/RepoListCommand.java?ref=4b6b7afb16aa4699e75bd6b739838c55ac20c20e", "patch": "@@ -49,7 +49,9 @@ protected void doExecute(FeaturesService featuresService) throws Exception {\n \n         Repository[] repos = featuresService.listRepositories();\n      \tfor (Repository repo : repos) {\n-     \t    table.addRow().addContent(repo.getName(), repo.getURI().toString()); \n+            if (repo != null) {\n+     \t        table.addRow().addContent(repo.getName(), repo.getURI().toString()); \n+            }\n      \t}\n      \ttable.print(System.out, !noFormat);\n     }", "filename": "features/src/main/java/org/apache/karaf/features/command/RepoListCommand.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/a815e48784eba95b20104758e66410ea59cde65c", "parent": "https://github.com/apache/karaf/commit/d5431e846ea73a3d381073335e5fc2cf1699cd16", "message": "[KARAF-2694]NPE when use osgi:uninstall", "bug_id": "karaf_43", "file": [{"additions": 3, "raw_url": "https://github.com/apache/karaf/raw/a815e48784eba95b20104758e66410ea59cde65c/bundle/core/src/main/java/org/apache/karaf/bundle/core/internal/BundleSelectorImpl.java", "blob_url": "https://github.com/apache/karaf/blob/a815e48784eba95b20104758e66410ea59cde65c/bundle/core/src/main/java/org/apache/karaf/bundle/core/internal/BundleSelectorImpl.java", "sha": "406a8976e3a35d5148add44d0f9a1d3b73ba735e", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/bundle/core/src/main/java/org/apache/karaf/bundle/core/internal/BundleSelectorImpl.java?ref=a815e48784eba95b20104758e66410ea59cde65c", "patch": "@@ -38,6 +38,9 @@ public BundleSelectorImpl(BundleContext bundleContext) {\n         List<Bundle> bundles = new ArrayList<Bundle>();\r\n         if (ids != null && !ids.isEmpty()) {\r\n             for (String id : ids) {\r\n+                if (id == null) {\r\n+                    continue;\r\n+                }\r\n                 addMatchingBundles(id, bundles);\r\n             }\r\n         } else {\r", "filename": "bundle/core/src/main/java/org/apache/karaf/bundle/core/internal/BundleSelectorImpl.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/b867058ed1b875778382b4fb241a24efb5158bd5", "parent": "https://github.com/apache/karaf/commit/afbd611de8a9d728f50c67bd8c627ce47c0a8f50", "message": "[KARAF-3487] Fix NPE on config:edit command", "bug_id": "karaf_44", "file": [{"additions": 3, "raw_url": "https://github.com/apache/karaf/raw/b867058ed1b875778382b4fb241a24efb5158bd5/config/src/main/java/org/apache/karaf/config/command/EditCommand.java", "blob_url": "https://github.com/apache/karaf/blob/b867058ed1b875778382b4fb241a24efb5158bd5/config/src/main/java/org/apache/karaf/config/command/EditCommand.java", "sha": "3fcd82063133c0d865a16bc517d88e6473129f1d", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/config/src/main/java/org/apache/karaf/config/command/EditCommand.java?ref=b867058ed1b875778382b4fb241a24efb5158bd5", "patch": "@@ -50,6 +50,9 @@ protected Object doExecute() throws Exception {\n         \n         if (pid.startsWith(\"(\")) {\n         \tConfiguration[] configs = this.configRepository.getConfigAdmin().listConfigurations(pid);\n+            if (configs == null) {\n+                throw new RuntimeException(\"No config found\");\n+            }\n         \tif (configs.length == 0) {\n         \t\tthrow new RuntimeException(\"Filter matches no config\");\n         \t}", "filename": "config/src/main/java/org/apache/karaf/config/command/EditCommand.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/e6a21e20e85f6dfe0561816af1398c3f2dc20334", "parent": "https://github.com/apache/karaf/commit/d413eef2e3799b90a23b482e1e4f8f4866ca7251", "message": "Merge branch 'karaf-4270-npe-help' of https://github.com/bimargulies/karaf", "bug_id": "karaf_45", "file": [{"additions": 6, "raw_url": "https://github.com/apache/karaf/raw/e6a21e20e85f6dfe0561816af1398c3f2dc20334/shell/console/src/main/java/org/apache/karaf/shell/compat/CommandTracker.java", "blob_url": "https://github.com/apache/karaf/blob/e6a21e20e85f6dfe0561816af1398c3f2dc20334/shell/console/src/main/java/org/apache/karaf/shell/compat/CommandTracker.java", "sha": "0e5c2e6625042845deb36e3b24ff0d62428e8fcf", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/console/src/main/java/org/apache/karaf/shell/compat/CommandTracker.java?ref=e6a21e20e85f6dfe0561816af1398c3f2dc20334", "patch": "@@ -186,7 +186,12 @@ public String getName() {\n \n                         @Override\n                         public String getDescription() {\n-                            return reference.getProperty(\"osgi.command.description\").toString();\n+                            Object property = reference.getProperty(\"osgi.command.description\");\n+                            if (property != null) {\n+                                return property.toString();\n+                            } else {\n+                                return null;\n+                            }\n                         }\n \n                         @Override", "filename": "shell/console/src/main/java/org/apache/karaf/shell/compat/CommandTracker.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/b53608ba1055f56131d8980ceac6a5cc7bf5eca0", "parent": "https://github.com/apache/karaf/commit/cc33770e5a778685c79b79a4568d49364dc1340c", "message": "[KARAF-3500]NPE throws when executing \"bin/client shutdown\"", "bug_id": "karaf_46", "file": [{"additions": 9, "raw_url": "https://github.com/apache/karaf/raw/b53608ba1055f56131d8980ceac6a5cc7bf5eca0/system/src/main/java/org/apache/karaf/system/commands/Shutdown.java", "blob_url": "https://github.com/apache/karaf/blob/b53608ba1055f56131d8980ceac6a5cc7bf5eca0/system/src/main/java/org/apache/karaf/system/commands/Shutdown.java", "sha": "8f4b806e90246dff22dc904d564512c4adaf0379", "changes": 10, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/system/src/main/java/org/apache/karaf/system/commands/Shutdown.java?ref=b53608ba1055f56131d8980ceac6a5cc7bf5eca0", "patch": "@@ -79,7 +79,15 @@ public Object execute() throws Exception {\n             } else {\n                 msg = String.format(\"Confirm: halt instance %s (yes/no): \", karafName);\n             }\n-            String str = session.readLine(msg, null);\n+            String str = null;\n+            try {\n+                str = session.readLine(msg, null);\n+            } catch (UnsupportedOperationException e) {\n+                //this is a remote client with shutdown argument so here isn't a interactive way\n+                // so return a prompt message instead of NPE\n+                System.out.println(\"please use \\\"shutdown -f\\\" or \\\"shutdown --force\\\" to shutdown instance: \" + karafName );\n+                return null;\n+            }\n             if (str.equalsIgnoreCase(\"yes\")) {\n                 if (reboot) {\n                     systemService.reboot(time, determineSwipeType());", "filename": "system/src/main/java/org/apache/karaf/system/commands/Shutdown.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/c773bbf7828e24e7ad965a8fc6a9ec428b6d0e12", "parent": "https://github.com/apache/karaf/commit/738281eb23df2585aa29b65f06198e9e5858e42b", "message": "[KARAF-4011]karaf-maven-plugin:features-add-to-repository NPE with blueprint:file: URL", "bug_id": "karaf_47", "file": [{"additions": 3, "raw_url": "https://github.com/apache/karaf/raw/c773bbf7828e24e7ad965a8fc6a9ec428b6d0e12/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AbstractFeatureMojo.java", "blob_url": "https://github.com/apache/karaf/blob/c773bbf7828e24e7ad965a8fc6a9ec428b6d0e12/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AbstractFeatureMojo.java", "sha": "d80fd1d55e2841e5d666eaede4bce47a50c99e45", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AbstractFeatureMojo.java?ref=c773bbf7828e24e7ad965a8fc6a9ec428b6d0e12", "patch": "@@ -135,6 +135,9 @@ protected void retrieveDescriptorsRecursively(String uri, Set<String> bundles, M\n     @SuppressWarnings(\"deprecation\")\n     protected void resolveArtifact(Artifact artifact, List<ArtifactRepository> remoteRepos) {\n         try {\n+            if (artifact == null) {\n+                return;\n+            }\n             List<ArtifactRepository> usedRemoteRepos = artifact.getRepository() != null ? \n                     Collections.singletonList(artifact.getRepository())\n                     : remoteRepos;", "filename": "tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AbstractFeatureMojo.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/162f583d210a52d1521313411cd6d7810193221f", "parent": "https://github.com/apache/karaf/commit/4df3c711414175ad77991f093e9fbff8fc9fdf0e", "message": "[KARAF-3906] - Resetting full when clear is called to avoid NPE later", "bug_id": "karaf_48", "file": [{"additions": 1, "raw_url": "https://github.com/apache/karaf/raw/162f583d210a52d1521313411cd6d7810193221f/log/src/main/java/org/apache/karaf/log/core/internal/LruList.java", "blob_url": "https://github.com/apache/karaf/blob/162f583d210a52d1521313411cd6d7810193221f/log/src/main/java/org/apache/karaf/log/core/internal/LruList.java", "sha": "0423f7ffc9ee525a94a6a097e555f0db357c4393", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/log/src/main/java/org/apache/karaf/log/core/internal/LruList.java?ref=162f583d210a52d1521313411cd6d7810193221f", "patch": "@@ -61,6 +61,7 @@ public synchronized int size() {\n     public synchronized void clear() {\n         start = 0;\n         end = 0;\n+        full = false;\n         elements = new PaxLoggingEvent[maxElements];\n     }\n ", "filename": "log/src/main/java/org/apache/karaf/log/core/internal/LruList.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/2fff9f7cb389b58a565e8ae91fb0ebe138dbf7c4", "parent": "https://github.com/apache/karaf/commit/39a207507b43e0ebba505457aa6e806aa0f398bb", "message": "Fix potential NPE on condition check in the install-kar goal", "bug_id": "karaf_49", "file": [{"additions": 1, "raw_url": "https://github.com/apache/karaf/raw/2fff9f7cb389b58a565e8ae91fb0ebe138dbf7c4/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/InstallKarsMojo.java", "blob_url": "https://github.com/apache/karaf/blob/2fff9f7cb389b58a565e8ae91fb0ebe138dbf7c4/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/InstallKarsMojo.java", "sha": "55e991495964d8bd325f0d19ed09643e9b0c70eb", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/InstallKarsMojo.java?ref=2fff9f7cb389b58a565e8ae91fb0ebe138dbf7c4", "patch": "@@ -398,7 +398,7 @@ private void resolveFeature(Feature feature, Map<Feature, Boolean> features) thr\n             boolean found = true;\n             for (String condition : conditional.getCondition()) {\n                 if (!condition.startsWith(\"req:\")) {\n-                    if (!installedFeatures.contains(condition) && !bootFeatures.contains(condition)) {\n+                    if ((installedFeatures != null && !installedFeatures.contains(condition)) && (bootFeatures != null && !bootFeatures.contains(condition))) {\n                         found = false;\n                         break;\n                     }", "filename": "tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/InstallKarsMojo.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/e390a81eaf89c408a2ba8c5c3671b82d99ae5fac", "parent": "https://github.com/apache/karaf/commit/762bae6e85932bfc059a32bbb4aa98894cb3f366", "message": "[kARAF-3651] The karaf client can cause a NPE in org.apache.sshd.common.util.Buffer.putString(Buffer.java:434)", "bug_id": "karaf_50", "file": [{"additions": 18, "raw_url": "https://github.com/apache/karaf/raw/e390a81eaf89c408a2ba8c5c3671b82d99ae5fac/client/src/main/java/org/apache/karaf/client/Main.java", "blob_url": "https://github.com/apache/karaf/blob/e390a81eaf89c408a2ba8c5c3671b82d99ae5fac/client/src/main/java/org/apache/karaf/client/Main.java", "sha": "65bcedf83ae6cd5bf9fe4fe01ed16aa96f549899", "changes": 32, "status": "modified", "deletions": 14, "contents_url": "https://api.github.com/repos/apache/karaf/contents/client/src/main/java/org/apache/karaf/client/Main.java?ref=e390a81eaf89c408a2ba8c5c3671b82d99ae5fac", "patch": "@@ -77,31 +77,35 @@ public static void main(String[] args) throws Exception {\n         Terminal terminal = null;\n         int exitStatus = 0;\n         try {\n-            final Console console = System.console();\n             client = SshClient.setUpDefaultClient();\n             setupAgent(config.getUser(), config.getKeyFile(), client);\n-            client.setUserInteraction(new UserInteraction() {\n-                public void welcome(String banner) {\n-                    System.out.println(banner);\n-                }\n+            final Console console = System.console();\n+            if (console != null) {\n+                client.setUserInteraction(new UserInteraction() {\n+                    public void welcome(String banner) {\n+                        System.out.println(banner);\n+                    }\n \n-                public String[] interactive(String destination, String name, String instruction, String[] prompt, boolean[] echo) {\n-                    String[] answers = new String[prompt.length];\n-                    try {\n-                        for (int i = 0; i < prompt.length; i++) {\n-                            if (console != null) {\n+                    public String[] interactive(String destination, String name, String instruction, String[] prompt, boolean[] echo) {\n+                        String[] answers = new String[prompt.length];\n+                        try {\n+                            for (int i = 0; i < prompt.length; i++) {\n                                 if (echo[i]) {\n                                     answers[i] = console.readLine(prompt[i] + \" \");\n                                 } else {\n                                     answers[i] = new String(console.readPassword(prompt[i] + \" \"));\n                                 }\n+                                if (answers[i] == null) {\n+                                    return null;\n+                                }\n                             }\n+                            return answers;\n+                        } catch (IOError e) {\n+                            return null;\n                         }\n-                    } catch (IOError e) {\n                     }\n-                    return answers;\n-                }\n-            });\n+                });\n+            }\n             client.start();\n             if (console != null) {\n                 console.printf(\"Logging in as %s\\n\", config.getUser());", "filename": "client/src/main/java/org/apache/karaf/client/Main.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/2d04de2a7b06d6f39ecb670f217ad0606f884139", "parent": "https://github.com/apache/karaf/commit/f680f9c720892f26e2308d197fe6efeec24e5063", "message": "Prevent NPE in Guard ACLConfigurationParser when an argument is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1546593 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_51", "file": [{"additions": 4, "raw_url": "https://github.com/apache/karaf/raw/2d04de2a7b06d6f39ecb670f217ad0606f884139/service/guard/src/main/java/org/apache/karaf/service/guard/tools/ACLConfigurationParser.java", "blob_url": "https://github.com/apache/karaf/blob/2d04de2a7b06d6f39ecb670f217ad0606f884139/service/guard/src/main/java/org/apache/karaf/service/guard/tools/ACLConfigurationParser.java", "sha": "5a5af3eb0595d17b8b0290cca2671d4fe8b47d13", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/service/guard/src/main/java/org/apache/karaf/service/guard/tools/ACLConfigurationParser.java?ref=2d04de2a7b06d6f39ecb670f217ad0606f884139", "patch": "@@ -202,7 +202,8 @@ private static Object getExactArgSignature(String methodName, String[] signature\n             else\n                 sb.append(',');\n             sb.append('\"');\n-            sb.append(param.toString().trim());\n+            if (param != null)\n+                sb.append(param.toString().trim());\n             sb.append('\"');\n         }\n         sb.append(']');\n@@ -295,6 +296,8 @@ private static boolean allParamsMatch(List<String> regexArgs, Object[] params) {\n             return false;\n \n         for (int i = 0; i < regexArgs.size(); i++) {\n+            if (params[i] == null)\n+                return false;\n             if (!params[i].toString().trim().matches(regexArgs.get(i))) {\n                 return false;\n             }", "filename": "service/guard/src/main/java/org/apache/karaf/service/guard/tools/ACLConfigurationParser.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/8d361f916cb9c9309c12d8c92d9cdc749ddd00eb", "parent": "https://github.com/apache/karaf/commit/430873be3928ff981359bc0d748a0f3c8b022436", "message": "Prevent NPE in SSH Karaf agent factory\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1545327 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_52", "file": [{"additions": 1, "raw_url": "https://github.com/apache/karaf/raw/8d361f916cb9c9309c12d8c92d9cdc749ddd00eb/shell/ssh/src/main/java/org/apache/karaf/shell/ssh/KarafAgentFactory.java", "blob_url": "https://github.com/apache/karaf/blob/8d361f916cb9c9309c12d8c92d9cdc749ddd00eb/shell/ssh/src/main/java/org/apache/karaf/shell/ssh/KarafAgentFactory.java", "sha": "45d1f36157fec3ecd8819c4c8eddbf67bbf73e6b", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/ssh/src/main/java/org/apache/karaf/shell/ssh/KarafAgentFactory.java?ref=8d361f916cb9c9309c12d8c92d9cdc749ddd00eb", "patch": "@@ -116,7 +116,7 @@ public void registerCommandSession(CommandSession session) {\n \n     public void unregisterCommandSession(CommandSession session) {\n         try {\n-            if (session.get(SshAgent.SSH_AUTHSOCKET_ENV_NAME) != null) {\n+            if (session != null && session.get(SshAgent.SSH_AUTHSOCKET_ENV_NAME) != null) {\n                 String agentId = (String) session.get(SshAgent.SSH_AUTHSOCKET_ENV_NAME);\n                 session.put(SshAgent.SSH_AUTHSOCKET_ENV_NAME, null);\n                 if (agentId != null) {", "filename": "shell/ssh/src/main/java/org/apache/karaf/shell/ssh/KarafAgentFactory.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/94f0c5203ec60cc863d4ce62e6d7f408327cb0af", "parent": "https://github.com/apache/karaf/commit/a328e29a2ab414b9addfab64b98aa4c51b410d33", "message": "Fix for NPE if repo name is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1542218 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_53", "file": [{"additions": 1, "raw_url": "https://github.com/apache/karaf/raw/94f0c5203ec60cc863d4ce62e6d7f408327cb0af/features/command/src/main/java/org/apache/karaf/features/command/RepoRemoveCommand.java", "blob_url": "https://github.com/apache/karaf/blob/94f0c5203ec60cc863d4ce62e6d7f408327cb0af/features/command/src/main/java/org/apache/karaf/features/command/RepoRemoveCommand.java", "sha": "6801d16c2e64452202ce246b06edb778383479dd", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/command/src/main/java/org/apache/karaf/features/command/RepoRemoveCommand.java?ref=94f0c5203ec60cc863d4ce62e6d7f408327cb0af", "patch": "@@ -36,7 +36,7 @@\n     protected void doExecute(FeaturesService featuresService) throws Exception {\n     \tURI uri = null;\n     \tfor (Repository r : featuresService.listRepositories()) {\n-    \t\tif (r.getName().equals(repository)) {\n+    \t\tif (r.getName() != null && r.getName().equals(repository)) {\n     \t\t\turi = r.getURI();\n     \t\t\tbreak;\n     \t\t}", "filename": "features/command/src/main/java/org/apache/karaf/features/command/RepoRemoveCommand.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/e41417de27b41666cb41b24127843f429273b928", "parent": "https://github.com/apache/karaf/commit/21f5c284a5c6f514e57f938071b52b478d8e5670", "message": "[KARAF-2577] Prevent NPE when no CommandSession exists\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1541216 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_54", "file": [{"additions": 6, "raw_url": "https://github.com/apache/karaf/raw/e41417de27b41666cb41b24127843f429273b928/shell/console/src/main/java/org/apache/karaf/shell/console/NameScoping.java", "blob_url": "https://github.com/apache/karaf/blob/e41417de27b41666cb41b24127843f429273b928/shell/console/src/main/java/org/apache/karaf/shell/console/NameScoping.java", "sha": "e50866f491ed1871ec7d251527697d88dad20faf", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/console/src/main/java/org/apache/karaf/shell/console/NameScoping.java?ref=e41417de27b41666cb41b24127843f429273b928", "patch": "@@ -50,6 +50,9 @@ public static String getCommandNameWithoutGlobalPrefix(CommandSession session, S\n      * Returns true if the given scope is the global scope so that it can be hidden from help messages\n      */\n     public static boolean isGlobalScope(CommandSession session, String scope) {\n+        if (session == null)\n+            return false;\n+\n         if (!isMultiScopeMode(session)) {\n             String globalScope = (String) session.get(\"APPLICATION\");\n             if (globalScope != null) {\n@@ -64,6 +67,9 @@ public static boolean isGlobalScope(CommandSession session, String scope) {\n      * avoid prefixing commands with their scope\n      */\n     public static boolean isMultiScopeMode(CommandSession session) {\n+        if (session == null)\n+            return false;\n+\n         Object value = session.get(MULTI_SCOPE_MODE_KEY);\n         if (value != null && value.equals(\"false\")) {\n             return false;", "filename": "shell/console/src/main/java/org/apache/karaf/shell/console/NameScoping.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/e7d37764d29220031d3eaea5c27e25eda84b1d7e", "parent": "https://github.com/apache/karaf/commit/8a6b12b242119b9efd9ff70f644b8eed5a6e44eb", "message": "[KARAF-2520] Fix NPE in bundle:dynamic-import command\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1538596 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_55", "file": [{"additions": 0, "raw_url": "https://github.com/apache/karaf/raw/e7d37764d29220031d3eaea5c27e25eda84b1d7e/bundle/command/src/main/java/org/apache/karaf/bundle/command/DynamicImport.java", "blob_url": "https://github.com/apache/karaf/blob/e7d37764d29220031d3eaea5c27e25eda84b1d7e/bundle/command/src/main/java/org/apache/karaf/bundle/command/DynamicImport.java", "sha": "eb5d27c8bf92ae2d3765d83c26619edd2d79bdff", "changes": 6, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/karaf/contents/bundle/command/src/main/java/org/apache/karaf/bundle/command/DynamicImport.java?ref=e7d37764d29220031d3eaea5c27e25eda84b1d7e", "patch": "@@ -27,16 +27,10 @@\n @Command(scope = \"bundle\", name = \"dynamic-import\", description = \"Enables/disables dynamic-import for a given bundle.\")\n public class DynamicImport extends BundleCommand {\n \n-    BundleService bundleService;\n-\n     public DynamicImport() {\n         super(true);\n     }\n \n-    public void setBundleService(BundleService bundleService) {\n-        this.bundleService = bundleService;\n-    }\n-\n     @Override\n     protected void doExecute(Bundle bundle) throws Exception {\n         if (bundleService.isDynamicImport(bundle)) {", "filename": "bundle/command/src/main/java/org/apache/karaf/bundle/command/DynamicImport.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/d37c2d55801d4aa0fb5545fb0c82654cfe95eb30", "parent": "https://github.com/apache/karaf/commit/b95b7cc6599f08d542b9e449aee8067996a7376f", "message": "KARAF-2531 - NPE in log:tail after a log:clear\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1536422 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_56", "file": [{"additions": 3, "raw_url": "https://github.com/apache/karaf/raw/d37c2d55801d4aa0fb5545fb0c82654cfe95eb30/log/command/src/main/java/org/apache/karaf/log/command/LogTail.java", "blob_url": "https://github.com/apache/karaf/blob/d37c2d55801d4aa0fb5545fb0c82654cfe95eb30/log/command/src/main/java/org/apache/karaf/log/command/LogTail.java", "sha": "52855378b85de851e1688f777ef39a08ce36ddaf", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/log/command/src/main/java/org/apache/karaf/log/command/LogTail.java?ref=d37c2d55801d4aa0fb5545fb0c82654cfe95eb30", "patch": "@@ -70,7 +70,9 @@ public void run() {\n         public void run() {\n             Iterable<PaxLoggingEvent> le = logService.getEvents(entries == 0 ? Integer.MAX_VALUE : entries);\n             for (PaxLoggingEvent event : le) {\n-                printEvent(out, event);\n+                if (event != null) {\n+                    printEvent(out, event);\n+                }\n             }\n             // Tail\n             final BlockingQueue<PaxLoggingEvent> queue = new LinkedBlockingQueue<PaxLoggingEvent>();", "filename": "log/command/src/main/java/org/apache/karaf/log/command/LogTail.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/87bf2cefb6d2567a91f6fb58525b7cea5cb2c934", "parent": "https://github.com/apache/karaf/commit/c18098461ecf5dcd6b8c34c9842cf9068c584af2", "message": "[KARAF-2438] Fix a potential NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1517118 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_57", "file": [{"additions": 4, "raw_url": "https://github.com/apache/karaf/raw/87bf2cefb6d2567a91f6fb58525b7cea5cb2c934/scr/management/src/main/java/org/apache/karaf/scr/management/codec/JmxReference.java", "blob_url": "https://github.com/apache/karaf/blob/87bf2cefb6d2567a91f6fb58525b7cea5cb2c934/scr/management/src/main/java/org/apache/karaf/scr/management/codec/JmxReference.java", "sha": "27e619d0e547e6c1003fed10cefc493d544e3d97", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/karaf/contents/scr/management/src/main/java/org/apache/karaf/scr/management/codec/JmxReference.java?ref=87bf2cefb6d2567a91f6fb58525b7cea5cb2c934", "patch": "@@ -68,8 +68,10 @@ public CompositeData asCompositeData() {\n \n     public static TabularData tableFrom(Reference... references) {\n         TabularDataSupport table = new TabularDataSupport(REFERENCE_TABLE);\n-        for (Reference reference : references) {\n-            table.put(new JmxReference(reference).asCompositeData());\n+        if (references != null) {\n+            for (Reference reference : references) {\n+                table.put(new JmxReference(reference).asCompositeData());\n+            }\n         }\n         return table;\n     }", "filename": "scr/management/src/main/java/org/apache/karaf/scr/management/codec/JmxReference.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/735580d25a83e350bd40de63f00d567c9b40a298", "parent": "https://github.com/apache/karaf/commit/595de92418350e3a2e6cc1e5ede8cb7c682c3759", "message": "test fixes: checked for NPE ... \n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1496022 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_58", "file": [{"additions": 6, "raw_url": "https://github.com/apache/karaf/raw/735580d25a83e350bd40de63f00d567c9b40a298/features/core/src/main/java/org/apache/karaf/features/internal/FeaturesServiceImpl.java", "blob_url": "https://github.com/apache/karaf/blob/735580d25a83e350bd40de63f00d567c9b40a298/features/core/src/main/java/org/apache/karaf/features/internal/FeaturesServiceImpl.java", "sha": "1412e4b4c370fa9d3e54070b11fc0b6274b84103", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/FeaturesServiceImpl.java?ref=735580d25a83e350bd40de63f00d567c9b40a298", "patch": "@@ -650,7 +650,12 @@ public void uninstallFeature(String name, String version) throws Exception {\n \n         //Also remove bundles installed as conditionals\n         for (Conditional conditional : feature.getConditional()) {\n-            bundles.addAll(installed.remove(conditional.asFeature(feature.getName(),feature.getVersion())));\n+            Feature conditionalFeature = conditional.asFeature(feature.getName(),feature.getVersion());\n+            if (installed.containsKey(conditionalFeature)) {\n+            \tbundles.addAll(installed.remove(conditionalFeature));\n+            } else {\n+            \tLOGGER.info(\"Conditional feature {}, hasn't been installed!\");\n+            }\n         }\n \n         for (Set<Long> b : installed.values()) {", "filename": "features/core/src/main/java/org/apache/karaf/features/internal/FeaturesServiceImpl.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/bf9f5d3275565d637a81d9a576948c5831ff28e7", "parent": "https://github.com/apache/karaf/commit/159186a26a75a4bc457f1de4d8d426e060945ab3", "message": "[KARAF-2058]add NPE guard\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1421685 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_59", "file": [{"additions": 1, "raw_url": "https://github.com/apache/karaf/raw/bf9f5d3275565d637a81d9a576948c5831ff28e7/main/src/main/java/org/apache/karaf/main/InstanceHelper.java", "blob_url": "https://github.com/apache/karaf/blob/bf9f5d3275565d637a81d9a576948c5831ff28e7/main/src/main/java/org/apache/karaf/main/InstanceHelper.java", "sha": "e8aca8fdd869d3636c540339b27bd2a6a37d0250", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/main/java/org/apache/karaf/main/InstanceHelper.java?ref=bf9f5d3275565d637a81d9a576948c5831ff28e7", "patch": "@@ -65,7 +65,7 @@ static void updateInstancePid(File karafHome, File karafBase) {\n                             //looking for root instance entry\r\n                             String name = props.getProperty(\"item.\" + i + \".name\");\r\n                             boolean root = Boolean.parseBoolean(props.getProperty(\"item.\" + i + \".root\", \"false\"));\r\n-                            if (root && !name.equals(instanceName)) {\r\n+                            if (name != null && root && !name.equals(instanceName)) {\r\n                                 props.setProperty(\"item.\" + i + \".name\", instanceName);\r\n                             }\r\n                         }\r", "filename": "main/src/main/java/org/apache/karaf/main/InstanceHelper.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/9a96480e59ae0def6c4a1f642709a58f754ab6ac", "parent": "https://github.com/apache/karaf/commit/978f15c68bc50671521992e249127d413d8413b4", "message": "[KARAF-1835] Fix npe in jaas:realm-manage command.\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1385294 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_60", "file": [{"additions": 1, "raw_url": "https://github.com/apache/karaf/raw/9a96480e59ae0def6c4a1f642709a58f754ab6ac/jaas/command/src/main/java/org/apache/karaf/jaas/command/JaasCommandSupport.java", "blob_url": "https://github.com/apache/karaf/blob/9a96480e59ae0def6c4a1f642709a58f754ab6ac/jaas/command/src/main/java/org/apache/karaf/jaas/command/JaasCommandSupport.java", "sha": "a1b79326cf0d4497a51c6378089312abfee6b119", "changes": 3, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/karaf/contents/jaas/command/src/main/java/org/apache/karaf/jaas/command/JaasCommandSupport.java?ref=9a96480e59ae0def6c4a1f642709a58f754ab6ac", "patch": "@@ -88,7 +88,6 @@ public AppConfigurationEntry findLoginModule(JaasRealm realm, String moduleName)\n \n         AppConfigurationEntry appConfigurationEntry = null;\n         if (realm != null) {\n-\n             AppConfigurationEntry[] entries = realm.getEntries();\n \n             // if no moduleName provided and a there is a single module in the realm.\n@@ -98,7 +97,7 @@ public AppConfigurationEntry findLoginModule(JaasRealm realm, String moduleName)\n \n             for (AppConfigurationEntry entry : entries) {\n                 String moduleClass = (String) entry.getOptions().get(ProxyLoginModule.PROPERTY_MODULE);\n-                if (moduleName.equals(entry.getLoginModuleName()) || moduleName.equals(moduleClass)) {\n+                if (moduleName != null && (moduleName.equals(entry.getLoginModuleName()) || moduleName.equals(moduleClass))) {\n                     return entry;\n                 }\n             }", "filename": "jaas/command/src/main/java/org/apache/karaf/jaas/command/JaasCommandSupport.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/5d15cee4a7dc5baff8475156197580b1940bbdad", "parent": "https://github.com/apache/karaf/commit/b48acb97bc2528dcaca3376f39a10e1bfed8c01f", "message": "[KARAF-1797] Fix NPE thrown from OsgiConfiguration.unregister\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1381990 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_61", "file": [{"additions": 6, "raw_url": "https://github.com/apache/karaf/raw/5d15cee4a7dc5baff8475156197580b1940bbdad/jaas/config/src/main/java/org/apache/karaf/jaas/config/impl/OsgiConfiguration.java", "blob_url": "https://github.com/apache/karaf/blob/5d15cee4a7dc5baff8475156197580b1940bbdad/jaas/config/src/main/java/org/apache/karaf/jaas/config/impl/OsgiConfiguration.java", "sha": "b8c0bbf3106e38731687e39d11e3e175066e00fb", "changes": 11, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/karaf/contents/jaas/config/src/main/java/org/apache/karaf/jaas/config/impl/OsgiConfiguration.java?ref=5d15cee4a7dc5baff8475156197580b1940bbdad", "patch": "@@ -16,12 +16,9 @@\n  */\n package org.apache.karaf.jaas.config.impl;\n \n-import java.util.ArrayList;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.CopyOnWriteArrayList;\n-\n import javax.security.auth.login.AppConfigurationEntry;\n import javax.security.auth.login.Configuration;\n \n@@ -41,11 +38,15 @@ public void close() {\n     }\n \n     public void register(JaasRealm realm, Map<String,?> properties) {\n-        realms.add(realm);\n+        if (realm != null) {\n+            realms.add(realm);\n+        }\n     }\n \n     public void unregister(JaasRealm realm, Map<String,?> properties) {\n-        realms.remove(realm);\n+        if (realm != null) {\n+            realms.remove(realm);\n+        }\n     }\n \n     public AppConfigurationEntry[] getAppConfigurationEntry(String name) {", "filename": "jaas/config/src/main/java/org/apache/karaf/jaas/config/impl/OsgiConfiguration.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/4a87724b97de731b0ccfd141fc42a30b45385464", "parent": "https://github.com/apache/karaf/commit/b29a7ad8cbfce9d72eb47a0951d1b754f4532d84", "message": "[KARAF-1541] Avoid a NPE selecting a realm\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1349772 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_62", "file": [{"additions": 2, "raw_url": "https://github.com/apache/karaf/raw/4a87724b97de731b0ccfd141fc42a30b45385464/jaas/command/src/main/java/org/apache/karaf/jaas/command/JaasCommandSupport.java", "blob_url": "https://github.com/apache/karaf/blob/4a87724b97de731b0ccfd141fc42a30b45385464/jaas/command/src/main/java/org/apache/karaf/jaas/command/JaasCommandSupport.java", "sha": "80e5b0a4cb926d010324bf865c35567319942076", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/jaas/command/src/main/java/org/apache/karaf/jaas/command/JaasCommandSupport.java?ref=4a87724b97de731b0ccfd141fc42a30b45385464", "patch": "@@ -82,6 +82,8 @@ public JaasRealm findRealmByNameOrIndex(String realmName, int index) {\n      * @return\n      */\n     public AppConfigurationEntry findEntryByRealmAndName(JaasRealm realm, String moduleName) {\n+        if (realm == null || moduleName == null)\n+            return null;\n         AppConfigurationEntry appConfigurationEntry = null;\n         if (realm != null) {\n ", "filename": "jaas/command/src/main/java/org/apache/karaf/jaas/command/JaasCommandSupport.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/723ca55f3d49935507136660ff067d23e5d50d09", "parent": "https://github.com/apache/karaf/commit/ae635420976fc23e5544bae4af28786a19b41310", "message": "KARAF-1511 Fixing NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1344235 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_63", "file": [{"additions": 6, "raw_url": "https://github.com/apache/karaf/raw/723ca55f3d49935507136660ff067d23e5d50d09/shell/help/src/main/java/org/apache/karaf/shell/help/impl/SubShellHelpProvider.java", "blob_url": "https://github.com/apache/karaf/blob/723ca55f3d49935507136660ff067d23e5d50d09/shell/help/src/main/java/org/apache/karaf/shell/help/impl/SubShellHelpProvider.java", "sha": "44fd722d308cca87a457e79a0171d6c2bde10612", "changes": 8, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/help/src/main/java/org/apache/karaf/shell/help/impl/SubShellHelpProvider.java?ref=723ca55f3d49935507136660ff067d23e5d50d09", "patch": "@@ -29,7 +29,6 @@\n import jline.Terminal;\n \n import org.apache.felix.service.command.CommandSession;\n-import org.apache.karaf.shell.commands.basic.DefaultActionPreparator;\n import org.apache.karaf.shell.console.HelpProvider;\n import org.apache.karaf.shell.console.SubShell;\n import org.apache.karaf.shell.util.IndentFormatter;\n@@ -65,7 +64,12 @@ public String getHelp(CommandSession session, String path) {\n                 return null;\n             }\n         }\n-        for (ServiceReference<?> ref : tracker.getServiceReferences()) {\n+        @SuppressWarnings(\"rawtypes\")\n+        ServiceReference[] refs = tracker.getServiceReferences();\n+        if (refs == null) {\n+            return null;\n+        }\n+        for (ServiceReference<?> ref : refs) {\n             if (path.equals(ref.getProperty(\"name\"))) {\n                 ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                 printSubShellHelp(session, ref.getBundle(), (SubShell) tracker.getService(ref), new PrintStream(baos, true));", "filename": "shell/help/src/main/java/org/apache/karaf/shell/help/impl/SubShellHelpProvider.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/58f6fb73dd261e2fe1e4880ceb7fd571673ac1fb", "parent": "https://github.com/apache/karaf/commit/74b9fddfbbf7bc17240ace93c902089dd3885428", "message": "Fixing NPE in build as is may have been null below\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1341020 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_64", "file": [{"additions": 1, "raw_url": "https://github.com/apache/karaf/raw/58f6fb73dd261e2fe1e4880ceb7fd571673ac1fb/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java", "blob_url": "https://github.com/apache/karaf/blob/58f6fb73dd261e2fe1e4880ceb7fd571673ac1fb/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java", "sha": "2aa483bf0bf0bd02d373b592088a88cd6a04efcb", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java?ref=58f6fb73dd261e2fe1e4880ceb7fd571673ac1fb", "patch": "@@ -386,6 +386,7 @@ private Manifest getManifest(File file) throws IOException {\n             is = new BufferedInputStream(new FileInputStream(file));\n         } catch (Exception e) {\n             getLogger().warn(\"Error while opening artifact\", e);\n+            return null;\n         }\n \n         try {", "filename": "tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/3c4ad74076a98191cca7b3b58eececd3f58e1ea0", "parent": "https://github.com/apache/karaf/commit/bf09e61c0a40a7e6537203f38ef834d8fb354dbb", "message": "[KARAF-1029] Added a check to avoid possible NPEs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1205972 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_65", "file": [{"additions": 8, "raw_url": "https://github.com/apache/karaf/raw/3c4ad74076a98191cca7b3b58eececd3f58e1ea0/shell/console/src/main/java/org/apache/karaf/shell/console/completer/ArgumentCompleter.java", "blob_url": "https://github.com/apache/karaf/blob/3c4ad74076a98191cca7b3b58eececd3f58e1ea0/shell/console/src/main/java/org/apache/karaf/shell/console/completer/ArgumentCompleter.java", "sha": "32a077b4c52fc0349bac4926b0a9ecdca82d293f", "changes": 15, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/console/src/main/java/org/apache/karaf/shell/console/completer/ArgumentCompleter.java?ref=3c4ad74076a98191cca7b3b58eececd3f58e1ea0", "patch": "@@ -253,16 +253,17 @@ public int complete(final String buffer, final int cursor,\n                     if (option != null) {\n                         Completer optionValueCompleter = null;\n                         String name = option.name();\n-                        optionValueCompleter = optionalCompleters.get(name);\n-                        if(optionValueCompleter == null) {\n-                            String[] aliases = option.aliases();\n-                            if(aliases.length > 0 ) {\n-                                for(int i=0; i < aliases.length && optionValueCompleter == null; i++) {\n-                                    optionValueCompleter = optionalCompleters.get(option.aliases()[i]);\n+                        if (optionalCompleters != null && name != null) {\n+                            optionValueCompleter = optionalCompleters.get(name);\n+                            if (optionValueCompleter == null) {\n+                                String[] aliases = option.aliases();\n+                                if (aliases.length > 0) {\n+                                    for (int i = 0; i < aliases.length && optionValueCompleter == null; i++) {\n+                                        optionValueCompleter = optionalCompleters.get(option.aliases()[i]);\n+                                    }\n                                 }\n                             }\n                         }\n-\n                         if(optionValueCompleter != null) {\n                             comp = optionValueCompleter;\n                         }", "filename": "shell/console/src/main/java/org/apache/karaf/shell/console/completer/ArgumentCompleter.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/bb6b2744d51da2834eea9da3718aff19bb526481", "parent": "https://github.com/apache/karaf/commit/45891db199958664a3e224ac786899842a694d87", "message": "[KARAF-932] Initialize the config properties if null to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1182538 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_66", "file": [{"additions": 8, "raw_url": "https://github.com/apache/karaf/raw/bb6b2744d51da2834eea9da3718aff19bb526481/management/mbeans/config/src/main/java/org/apache/karaf/management/mbeans/config/internal/ConfigMBeanImpl.java", "blob_url": "https://github.com/apache/karaf/blob/bb6b2744d51da2834eea9da3718aff19bb526481/management/mbeans/config/src/main/java/org/apache/karaf/management/mbeans/config/internal/ConfigMBeanImpl.java", "sha": "7d7de01f47503ca4462b1cc01b294b0979c7cca7", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/management/mbeans/config/src/main/java/org/apache/karaf/management/mbeans/config/internal/ConfigMBeanImpl.java?ref=bb6b2744d51da2834eea9da3718aff19bb526481", "patch": "@@ -85,6 +85,8 @@ public void delete(String pid) throws Exception {\n             throw new IllegalArgumentException(\"Configuration PID \" + pid + \" doesn't exist\");\n         }\n         Dictionary dictionary = configuration.getProperties();\n+        if (dictionary == null)\n+            dictionary = new java.util.Properties();\n         Map<String, String> propertiesMap = new HashMap<String, String>();\n         for (Enumeration e = dictionary.keys(); e.hasMoreElements(); ) {\n             Object key = e.nextElement();\n@@ -100,6 +102,8 @@ public void propdel(String pid, String key) throws Exception {\n             throw new IllegalArgumentException(\"Configuration PID \" + pid + \" doesn't exist\");\n         }\n         Dictionary dictionary = configuration.getProperties();\n+        if (dictionary == null)\n+            dictionary = new java.util.Properties();\n         dictionary.remove(key);\n         store(pid, dictionary, false);\n     }\n@@ -110,6 +114,8 @@ public void propappend(String pid, String key, String value) throws Exception {\n             throw new IllegalArgumentException(\"Configuration PID \" + pid + \" doesn't exist\");\n         }\n         Dictionary dictionary = configuration.getProperties();\n+        if (dictionary == null)\n+            dictionary = new java.util.Properties();\n         Object currentValue = dictionary.get(key);\n         if (currentValue == null) {\n             dictionary.put(key, value);\n@@ -127,6 +133,8 @@ public void propset(String pid, String key, String value) throws Exception {\n             throw new IllegalArgumentException(\"Configuration PID \" + pid + \" doesn't exist\");\n         }\n         Dictionary dictionary = configuration.getProperties();\n+        if (dictionary == null)\n+            dictionary = new java.util.Properties();\n         dictionary.put(key, value);\n         store(pid, dictionary, false);\n     }", "filename": "management/mbeans/config/src/main/java/org/apache/karaf/management/mbeans/config/internal/ConfigMBeanImpl.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/ab583cbdb32b741ada95e9448e0be62bb180c57e", "parent": "https://github.com/apache/karaf/commit/20d35260715706bdd089409508c27370fab0ad87", "message": "[KARAF-786] Fix NPE on the Services MBean\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1175766 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_67", "file": [{"additions": 12, "raw_url": "https://github.com/apache/karaf/raw/ab583cbdb32b741ada95e9448e0be62bb180c57e/management/mbeans/services/src/main/java/org/apache/karaf/management/mbeans/services/internal/ServicesMBeanImpl.java", "blob_url": "https://github.com/apache/karaf/blob/ab583cbdb32b741ada95e9448e0be62bb180c57e/management/mbeans/services/src/main/java/org/apache/karaf/management/mbeans/services/internal/ServicesMBeanImpl.java", "sha": "228fc21b943d3da659baf886ba126f7b7d3c2f44", "changes": 24, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/karaf/contents/management/mbeans/services/src/main/java/org/apache/karaf/management/mbeans/services/internal/ServicesMBeanImpl.java?ref=ab583cbdb32b741ada95e9448e0be62bb180c57e", "patch": "@@ -60,30 +60,30 @@ public TabularData list(long bundleId, boolean inUse) throws Exception {\n         TabularData table = new TabularDataSupport(tableType);\n \n         Bundle[] bundles;\n-        if (bundleId > 0) {\n+        if (bundleId >= 0) {\n             bundles = new Bundle[]{ bundleContext.getBundle(bundleId) };\n         } else {\n             bundles = bundleContext.getBundles();\n         }\n-        for (int i = 0; i < bundles.length; i++) {\n-            Bundle bundle = bundles[i];\n+        for (Bundle bundle : bundles) {;\n             ServiceReference[] serviceReferences;\n             if (inUse) {\n                 serviceReferences = bundle.getServicesInUse();\n             } else {\n                 serviceReferences = bundle.getRegisteredServices();\n             }\n-            for (int j = 0; j < serviceReferences.length; j++) {\n-                ServiceReference reference = serviceReferences[j];\n-                String[] interfaces = (String[]) reference.getProperty(\"objectClass\");\n-                List<String> properties = new ArrayList<String>();\n-                for (int k = 0; j < reference.getPropertyKeys().length; k++) {\n-                    properties.add(reference.getPropertyKeys()[k] + \" = \" + reference.getProperty(reference.getPropertyKeys()[k]));\n-                }\n-                CompositeData data = new CompositeDataSupport(serviceType,\n+            if (serviceReferences != null) {\n+                for (ServiceReference reference : serviceReferences) {\n+                    String[] interfaces = (String[]) reference.getProperty(\"objectClass\");\n+                    List<String> properties = new ArrayList<String>();\n+                    for (String key : reference.getPropertyKeys()) {\n+                        properties.add(key + \" = \" + reference.getProperty(key));\n+                    }\n+                    CompositeData data = new CompositeDataSupport(serviceType,\n                         new String[]{ \"Interfaces\", \"Properties\" },\n                         new Object[]{ interfaces, properties.toArray(new String[0]) });\n-                table.put(data);\n+                    table.put(data);\n+                }\n             }\n         }\n         return table;", "filename": "management/mbeans/services/src/main/java/org/apache/karaf/management/mbeans/services/internal/ServicesMBeanImpl.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/63bce35cda6bf662e779db63fe8e418ee527a037", "parent": "https://github.com/apache/karaf/commit/397a0c3557041da41af358d3a33c9e582d24ac44", "message": "try to avoid an npe for early start failures\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1173914 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_68", "file": [{"additions": 4, "raw_url": "https://github.com/apache/karaf/raw/63bce35cda6bf662e779db63fe8e418ee527a037/main/src/main/java/org/apache/karaf/main/Main.java", "blob_url": "https://github.com/apache/karaf/blob/63bce35cda6bf662e779db63fe8e418ee527a037/main/src/main/java/org/apache/karaf/main/Main.java", "sha": "1f227adbfa50160e630c0a39b8ddfb5a53307ced", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/main/java/org/apache/karaf/main/Main.java?ref=63bce35cda6bf662e779db63fe8e418ee527a037", "patch": "@@ -469,8 +469,10 @@ public static void main(String[] args) throws Exception {\n \t\t\ttry {\n \t\t\t\tmanager = main.launch();\n \t\t\t} catch (Throwable ex) {\n-\t\t\t\tmain.lifecycleManager.destroyKaraf();\n-\t\t\t\texitCode = -1;\n+                if (main.lifecycleManager != null) {\n+                    main.lifecycleManager.destroyKaraf();\n+                }\n+                exitCode = -1;\n \t\t\t\tSystem.err.println(\"Could not create framework: \" + ex);\n \t\t\t\tex.printStackTrace();\n \t\t\t}", "filename": "main/src/main/java/org/apache/karaf/main/Main.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/d9ecb3dc1861d21871a6472afbf600ea8e83e505", "parent": "https://github.com/apache/karaf/commit/70b367dae9229d51c7848aa481affd752f9bce28", "message": "[KARAF-546] Added NPE check inside DisplaLog.\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1086979 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_69", "file": [{"additions": 3, "raw_url": "https://github.com/apache/karaf/raw/d9ecb3dc1861d21871a6472afbf600ea8e83e505/shell/log/src/main/java/org/apache/karaf/shell/log/DisplayLog.java", "blob_url": "https://github.com/apache/karaf/blob/d9ecb3dc1861d21871a6472afbf600ea8e83e505/shell/log/src/main/java/org/apache/karaf/shell/log/DisplayLog.java", "sha": "d2d6b99ea26240547b83c0bb9313c96587eef04c", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/log/src/main/java/org/apache/karaf/shell/log/DisplayLog.java?ref=d9ecb3dc1861d21871a6472afbf600ea8e83e505", "patch": "@@ -131,7 +131,9 @@ protected Object doExecute() throws Exception {\n \n         Iterable<PaxLoggingEvent> le = events.getElements(entries == 0 ? Integer.MAX_VALUE : entries);\n         for (PaxLoggingEvent event : le) {\n-            display(cnv, event, out);\n+            if (event != null) {\n+                display(cnv, event, out);\n+            }\n         }\n         out.println();\n         return null;", "filename": "shell/log/src/main/java/org/apache/karaf/shell/log/DisplayLog.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/cf7f967daa97b186f75d00cf7df6e94989f5c0c2", "parent": "https://github.com/apache/karaf/commit/d864837505bf166247914d4e023fa5e7894b0b5c", "message": "KARAF-440: features-maven-plugin:validate throws NPE in Maven 3\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1068925 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_70", "file": [{"additions": 11, "raw_url": "https://github.com/apache/karaf/raw/cf7f967daa97b186f75d00cf7df6e94989f5c0c2/tooling/features-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ValidateFeaturesMojo.java", "blob_url": "https://github.com/apache/karaf/blob/cf7f967daa97b186f75d00cf7df6e94989f5c0c2/tooling/features-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ValidateFeaturesMojo.java", "sha": "63a4f6ba2735815a12544e8e69ea7bac74052b7f", "changes": 12, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/tooling/features-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ValidateFeaturesMojo.java?ref=cf7f967daa97b186f75d00cf7df6e94989f5c0c2", "patch": "@@ -40,6 +40,7 @@\n import org.apache.maven.artifact.repository.ArtifactRepository;\n import org.apache.maven.artifact.repository.DefaultArtifactRepository;\n import org.apache.maven.artifact.repository.layout.DefaultRepositoryLayout;\n+import org.apache.maven.artifact.resolver.ArtifactCollector;\n import org.apache.maven.artifact.resolver.ArtifactNotFoundException;\n import org.apache.maven.artifact.resolver.ArtifactResolutionException;\n import org.apache.maven.artifact.resolver.DefaultArtifactCollector;\n@@ -76,6 +77,15 @@\n      */\n     private DependencyTreeBuilder dependencyTreeBuilder;\n \n+    /**\n+     * The ArtifactCollector provided by Maven at runtime\n+     *\n+     * @component\n+     * @required\n+     * @readonly\n+     */\n+    private ArtifactCollector collector;\n+\n     /**\n      * The file to generate\n      * \n@@ -241,7 +251,7 @@ public boolean include(Artifact artifact) {\n                 return true;\n             }\n \n-        }, new DefaultArtifactCollector());\n+        }, collector);\n         tree.accept(new DependencyNodeVisitor() {\n             public boolean endVisit(DependencyNode node) {\n                 // we want the next sibling too", "filename": "tooling/features-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ValidateFeaturesMojo.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/f1c17118548c62c9f6b99555ba54abf1fd1d0dd9", "parent": "https://github.com/apache/karaf/commit/cc9e07d28f6d2af79a1ba5176fdc53de311db413", "message": "KARAF-65: NPE in StandardEmitterMBean on JDK 6\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@958959 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_71", "file": [{"additions": 4, "raw_url": "https://github.com/apache/karaf/raw/f1c17118548c62c9f6b99555ba54abf1fd1d0dd9/features/management/src/main/java/org/apache/karaf/features/management/internal/FeaturesServiceMBeanImpl.java", "blob_url": "https://github.com/apache/karaf/blob/f1c17118548c62c9f6b99555ba54abf1fd1d0dd9/features/management/src/main/java/org/apache/karaf/features/management/internal/FeaturesServiceMBeanImpl.java", "sha": "487b4b09f44a37959e38d293501fed037d09f56d", "changes": 10, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/management/src/main/java/org/apache/karaf/features/management/internal/FeaturesServiceMBeanImpl.java?ref=f1c17118548c62c9f6b99555ba54abf1fd1d0dd9", "patch": "@@ -61,12 +61,7 @@\n     private FeaturesService featuresService;\n \n     public FeaturesServiceMBeanImpl() throws NotCompliantMBeanException {\n-        super(FeaturesServiceMBean.class, new NotificationBroadcasterSupport() {\n-            @Override\n-            public MBeanNotificationInfo[] getNotificationInfo() {\n-                return getBroadcastInfo();\n-            }\n-        });\n+        super(FeaturesServiceMBean.class);\n     }\n \n     public ObjectName preRegister(MBeanServer server, ObjectName name) throws Exception {\n@@ -175,6 +170,9 @@ public void repositoryEvent(RepositoryEvent event) {\n         };\n     }\n \n+    public MBeanNotificationInfo[] getNotificationInfo() {\n+        return getBroadcastInfo();\n+    }\n \n     private static MBeanNotificationInfo[] getBroadcastInfo() {\n         String type = Notification.class.getCanonicalName();", "filename": "features/management/src/main/java/org/apache/karaf/features/management/internal/FeaturesServiceMBeanImpl.java"}, {"additions": 9, "raw_url": "https://github.com/apache/karaf/raw/f1c17118548c62c9f6b99555ba54abf1fd1d0dd9/features/management/src/main/java/org/apache/karaf/features/management/internal/StandardEmitterMBean.java", "blob_url": "https://github.com/apache/karaf/blob/f1c17118548c62c9f6b99555ba54abf1fd1d0dd9/features/management/src/main/java/org/apache/karaf/features/management/internal/StandardEmitterMBean.java", "sha": "58f587c6f4d5ddbc90603492d1365c4beaea85e1", "changes": 13, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/management/src/main/java/org/apache/karaf/features/management/internal/StandardEmitterMBean.java?ref=f1c17118548c62c9f6b99555ba54abf1fd1d0dd9", "patch": "@@ -17,11 +17,16 @@\n \n public class StandardEmitterMBean extends StandardMBean implements NotificationEmitter {\n \n-    private NotificationBroadcasterSupport emitter;\n+    private final NotificationBroadcasterSupport emitter;\n \n-    public StandardEmitterMBean(Class mbeanInterface, NotificationBroadcasterSupport emitter) throws NotCompliantMBeanException {\n+    public StandardEmitterMBean(Class mbeanInterface) throws NotCompliantMBeanException {\n         super(mbeanInterface);\n-        this.emitter = emitter;\n+        this.emitter = new NotificationBroadcasterSupport() {\n+            @Override\n+            public MBeanNotificationInfo[] getNotificationInfo() {\n+                return StandardEmitterMBean.this.getNotificationInfo();\n+            }\n+        };\n     }\n \n     public void sendNotification(Notification notification) {\n@@ -42,7 +47,7 @@ public void removeNotificationListener(NotificationListener listener) throws Lis\n     }\n \n     public MBeanNotificationInfo[] getNotificationInfo() {\n-        return emitter.getNotificationInfo();\n+        return new MBeanNotificationInfo[0];\n     }\n \n     @Override", "filename": "features/management/src/main/java/org/apache/karaf/features/management/internal/StandardEmitterMBean.java"}, {"additions": 24, "raw_url": "https://github.com/apache/karaf/raw/f1c17118548c62c9f6b99555ba54abf1fd1d0dd9/features/management/src/test/java/org/apache/karaf/features/management/internal/FeaturesServiceMBeanImplTest.java", "blob_url": "https://github.com/apache/karaf/blob/f1c17118548c62c9f6b99555ba54abf1fd1d0dd9/features/management/src/test/java/org/apache/karaf/features/management/internal/FeaturesServiceMBeanImplTest.java", "sha": "0a8a00e992544108fc2f9c43755e2a9225d9e355", "changes": 24, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/management/src/test/java/org/apache/karaf/features/management/internal/FeaturesServiceMBeanImplTest.java?ref=f1c17118548c62c9f6b99555ba54abf1fd1d0dd9", "patch": "@@ -0,0 +1,24 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.karaf.features.management.internal;\n+\n+import org.junit.Test;\n+\n+public class FeaturesServiceMBeanImplTest {\n+\n+    @Test\n+    public void testInstantiation() throws Exception {\n+        new FeaturesServiceMBeanImpl();\n+    }\n+}", "filename": "features/management/src/test/java/org/apache/karaf/features/management/internal/FeaturesServiceMBeanImplTest.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/d3f2703602bf4af92949ac72d73bcc0650e9b0fa", "parent": "https://github.com/apache/karaf/commit/bf8d80cbfb4a25f38717312759974ea8cfbf2fc5", "message": "[FELIX-2354]NPE when using Felix features maven validate plugin\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk/karaf@947635 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_72", "file": [{"additions": 8, "raw_url": "https://github.com/apache/karaf/raw/d3f2703602bf4af92949ac72d73bcc0650e9b0fa/tooling/features-maven-plugin/src/main/java/org/apache/felix/karaf/tooling/features/ValidateFeaturesMojo.java", "blob_url": "https://github.com/apache/karaf/blob/d3f2703602bf4af92949ac72d73bcc0650e9b0fa/tooling/features-maven-plugin/src/main/java/org/apache/felix/karaf/tooling/features/ValidateFeaturesMojo.java", "sha": "dc1fde0cff999b9100fe9913bcc3db810a74d7ed", "changes": 14, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/karaf/contents/tooling/features-maven-plugin/src/main/java/org/apache/felix/karaf/tooling/features/ValidateFeaturesMojo.java?ref=d3f2703602bf4af92949ac72d73bcc0650e9b0fa", "patch": "@@ -160,12 +160,14 @@ private void analyze(Repository repository) throws Exception {\n         features.add(repository.getFeatures());\n         \n         // add the repositories from the plugin configuration\n-\tfor (String uri : repositories) {\n-\t    getLog().info(String.format(\" - adding repository from %s\", uri));\n-            Repository dependency = new RepositoryImpl(URI.create(translateFromMaven(uri)));\n-            features.add(dependency.getFeatures());\n-            validateBundlesAvailable(dependency);\n-            analyzeExports(dependency);\n+        if (repositories != null) {\n+        \tfor (String uri : repositories) {\n+        \t\tgetLog().info(String.format(\" - adding repository from %s\", uri));\n+        \t\tRepository dependency = new RepositoryImpl(URI.create(translateFromMaven(uri)));\n+        \t\tfeatures.add(dependency.getFeatures());\n+        \t\tvalidateBundlesAvailable(dependency);\n+        \t\tanalyzeExports(dependency);\n+        \t}\n         }\n \n         for (URI uri : repository.getRepositories()) {", "filename": "tooling/features-maven-plugin/src/main/java/org/apache/felix/karaf/tooling/features/ValidateFeaturesMojo.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/71dec8c8f8c942850b5a3e72464043a57dfa5969", "parent": "https://github.com/apache/karaf/commit/f67c3b070d105210bf0f51b1742a279fe23afe4c", "message": "[karaf] Fix NPE in the OBR refreshUrl command\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk/karaf@911484 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_73", "file": [{"additions": 1, "raw_url": "https://github.com/apache/karaf/raw/71dec8c8f8c942850b5a3e72464043a57dfa5969/shell/obr/src/main/java/org/apache/felix/karaf/shell/obr/RefreshUrlCommand.java", "blob_url": "https://github.com/apache/karaf/blob/71dec8c8f8c942850b5a3e72464043a57dfa5969/shell/obr/src/main/java/org/apache/felix/karaf/shell/obr/RefreshUrlCommand.java", "sha": "888d6f8578fa8d718fbc2d90c79592fa9e2d91ea", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/obr/src/main/java/org/apache/felix/karaf/shell/obr/RefreshUrlCommand.java?ref=71dec8c8f8c942850b5a3e72464043a57dfa5969", "patch": "@@ -31,7 +31,7 @@\n     List<String> urls;\n \n     protected void doExecute(RepositoryAdmin admin) throws Exception {\n-\t\tif (urls != null || urls.isEmpty()) {\n+\t\tif (urls != null && !urls.isEmpty()) {\n \t\t\tfor (String url : urls) {\n \t\t\t\tadmin.removeRepository(new URL(url));\n \t\t\t\tadmin.addRepository(new URL(url));", "filename": "shell/obr/src/main/java/org/apache/felix/karaf/shell/obr/RefreshUrlCommand.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/c7860d7d36b46f890c8e24b7ac058891b7bb9aa1", "parent": "https://github.com/apache/karaf/commit/789dcc99f087965aef0e816e364495c18784bea6", "message": "FELIX-1566: Possible NPE when uninstalling a feature\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk/karaf@812386 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_74", "file": [{"additions": 4, "raw_url": "https://github.com/apache/karaf/raw/c7860d7d36b46f890c8e24b7ac058891b7bb9aa1/features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java", "blob_url": "https://github.com/apache/karaf/blob/c7860d7d36b46f890c8e24b7ac058891b7bb9aa1/features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java", "sha": "421de12863716757b6f8c661543a3a20bf60f590", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java?ref=c7860d7d36b46f890c8e24b7ac058891b7bb9aa1", "patch": "@@ -301,7 +301,10 @@ public void uninstallFeature(String name, String version) throws Exception {\n             bundles.removeAll(b);\n         }\n         for (long bundleId : bundles) {\n-            getBundleContext().getBundle(bundleId).uninstall();\n+            Bundle b = getBundleContext().getBundle(bundleId);\n+            if (b != null) {\n+                b.uninstall();\n+            }\n         }\n         callListeners(new FeatureEvent(feature, FeatureEvent.EventType.FeatureInstalled, false));\n         saveState();", "filename": "features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/a6a710f8e7beeb3e5c3e8f996ce78cfe94adf01d", "parent": "https://github.com/apache/karaf/commit/a23d5077a130836f38ff705fe5dd6d52fd66431d", "message": "Avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk/karaf@803523 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_75", "file": [{"additions": 3, "raw_url": "https://github.com/apache/karaf/raw/a6a710f8e7beeb3e5c3e8f996ce78cfe94adf01d/gshell/gshell-config/src/main/java/org/apache/felix/karaf/gshell/config/completers/ConfigurationCompleter.java", "blob_url": "https://github.com/apache/karaf/blob/a6a710f8e7beeb3e5c3e8f996ce78cfe94adf01d/gshell/gshell-config/src/main/java/org/apache/felix/karaf/gshell/config/completers/ConfigurationCompleter.java", "sha": "8ee9ca8373c4e18cfe582ae0f247b5fe533deb14", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/gshell/gshell-config/src/main/java/org/apache/felix/karaf/gshell/config/completers/ConfigurationCompleter.java?ref=a6a710f8e7beeb3e5c3e8f996ce78cfe94adf01d", "patch": "@@ -50,6 +50,9 @@ public void init() {\n         Configuration[] configs;\n         try {\n             configs = admin.listConfigurations(null);\n+            if (configs == null) {\n+                return;\n+            }\n         } catch (Exception e) {\n             return;\n         }", "filename": "gshell/gshell-config/src/main/java/org/apache/felix/karaf/gshell/config/completers/ConfigurationCompleter.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/f6f8ffb24d5794be53e946e23782da193411232b", "parent": "https://github.com/apache/karaf/commit/a848712505f5caf23292e6cdf07e2cd452bb6bd7", "message": "[SMX4KNL-204]OsgiConfiguration.unregister() throw NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/servicemix/smx4/kernel/trunk@745781 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_76", "file": [{"additions": 3, "raw_url": "https://github.com/apache/karaf/raw/f6f8ffb24d5794be53e946e23782da193411232b/jaas/jaas-config/src/main/java/org/apache/servicemix/kernel/jaas/config/impl/OsgiConfiguration.java", "blob_url": "https://github.com/apache/karaf/blob/f6f8ffb24d5794be53e946e23782da193411232b/jaas/jaas-config/src/main/java/org/apache/servicemix/kernel/jaas/config/impl/OsgiConfiguration.java", "sha": "c89db11b68e9d22e25b853f9029d3ee91225731c", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/jaas/jaas-config/src/main/java/org/apache/servicemix/kernel/jaas/config/impl/OsgiConfiguration.java?ref=f6f8ffb24d5794be53e946e23782da193411232b", "patch": "@@ -46,7 +46,9 @@ public void register(JaasRealm realm, Map<String,?> properties) {\n     }\n \n     public void unregister(JaasRealm realm, Map<String,?> properties) {\n-        realms.remove(realm);\n+        if (realms != null) {\n+            realms.remove(realm);\n+        }\n     }\n \n     public AppConfigurationEntry[] getAppConfigurationEntry(String name) {", "filename": "jaas/jaas-config/src/main/java/org/apache/servicemix/kernel/jaas/config/impl/OsgiConfiguration.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/05fbd3907eb580fdab1cc8e2738a421f59ab53e9", "parent": "https://github.com/apache/karaf/commit/ed06101aa6f2e0e394bbabc260f24c45dd7c2963", "message": "SMX4-72: NPE when doing 'features install'\n\ngit-svn-id: https://svn.apache.org/repos/asf/servicemix/smx4/kernel/trunk@679694 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_77", "file": [{"additions": 1, "raw_url": "https://github.com/apache/karaf/raw/05fbd3907eb580fdab1cc8e2738a421f59ab53e9/gshell/gshell-features/src/main/java/org/apache/servicemix/gshell/features/internal/FeaturesServiceImpl.java", "blob_url": "https://github.com/apache/karaf/blob/05fbd3907eb580fdab1cc8e2738a421f59ab53e9/gshell/gshell-features/src/main/java/org/apache/servicemix/gshell/features/internal/FeaturesServiceImpl.java", "sha": "3fad0ac98c43f5ff776035450b5c3b331aa936e3", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/gshell/gshell-features/src/main/java/org/apache/servicemix/gshell/features/internal/FeaturesServiceImpl.java?ref=05fbd3907eb580fdab1cc8e2738a421f59ab53e9", "patch": "@@ -173,7 +173,7 @@ protected Bundle installBundleIfNeeded(String bundleLocation) throws IOException\n             Version v = vStr == null ? Version.emptyVersion : Version.parseVersion(vStr);\n             boolean install = true;\n             for (Bundle b : bundleContext.getBundles()) {\n-                if (b.getSymbolicName().equals(sn)) {\n+                if (b.getSymbolicName() != null && b.getSymbolicName().equals(sn)) {\n                     vStr = (String) b.getHeaders().get(Constants.BUNDLE_VERSION);\n                     Version bv = vStr == null ? Version.emptyVersion : Version.parseVersion(vStr);\n                     if (v.equals(bv)) {", "filename": "gshell/gshell-features/src/main/java/org/apache/servicemix/gshell/features/internal/FeaturesServiceImpl.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/430873be3928ff981359bc0d748a0f3c8b022436", "parent": "https://github.com/apache/karaf/commit/01c280386508b33fe0243507ce3541a28a352709", "message": "Prevent NPE when unregistering command session in the SSH Karaf agent factory.\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1545310 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_78", "file": [{"additions": 7, "raw_url": "https://github.com/apache/karaf/raw/430873be3928ff981359bc0d748a0f3c8b022436/shell/ssh/src/main/java/org/apache/karaf/shell/ssh/KarafAgentFactory.java", "blob_url": "https://github.com/apache/karaf/blob/430873be3928ff981359bc0d748a0f3c8b022436/shell/ssh/src/main/java/org/apache/karaf/shell/ssh/KarafAgentFactory.java", "sha": "da78575a0338a024579706a279467720bd54feca", "changes": 11, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/ssh/src/main/java/org/apache/karaf/shell/ssh/KarafAgentFactory.java?ref=430873be3928ff981359bc0d748a0f3c8b022436", "patch": "@@ -89,6 +89,7 @@ public SshAgentServer createServer(Session session) throws IOException {\n             public String getId() {\n                 return proxy.getId();\n             }\n+\n             public void close() {\n                 proxies.remove(proxy.getId());\n                 proxy.close();\n@@ -115,10 +116,12 @@ public void registerCommandSession(CommandSession session) {\n \n     public void unregisterCommandSession(CommandSession session) {\n         try {\n-            String agentId = (String) session.get(SshAgent.SSH_AUTHSOCKET_ENV_NAME);\n-            session.put(SshAgent.SSH_AUTHSOCKET_ENV_NAME, null);\n-            if (agentId != null) {\n-                locals.remove(agentId);\n+            if (session.get(SshAgent.SSH_AUTHSOCKET_ENV_NAME) != null) {\n+                String agentId = (String) session.get(SshAgent.SSH_AUTHSOCKET_ENV_NAME);\n+                session.put(SshAgent.SSH_AUTHSOCKET_ENV_NAME, null);\n+                if (agentId != null) {\n+                    locals.remove(agentId);\n+                }\n             }\n         } catch (Throwable e) {\n             LOGGER.warn(\"Error stopping ssh agent for local console\", e);", "filename": "shell/ssh/src/main/java/org/apache/karaf/shell/ssh/KarafAgentFactory.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/ea78c61ef44d60f2f7234157b11cce9e2ea9cdc6", "parent": "https://github.com/apache/karaf/commit/ca2286f899e1847672b61463882ffa6cce6fe89c", "message": "KARAF-1296 Bugfix. Avoid NPE when there is an exception in launch and lockManager is not yet initialized\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1334999 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_79", "file": [{"additions": 7, "raw_url": "https://github.com/apache/karaf/raw/ea78c61ef44d60f2f7234157b11cce9e2ea9cdc6/main/src/main/java/org/apache/karaf/main/Main.java", "blob_url": "https://github.com/apache/karaf/blob/ea78c61ef44d60f2f7234157b11cce9e2ea9cdc6/main/src/main/java/org/apache/karaf/main/Main.java", "sha": "bea1e37e667d378eebfa80a5311cc29ed46315d0", "changes": 12, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/main/java/org/apache/karaf/main/Main.java?ref=ea78c61ef44d60f2f7234157b11cce9e2ea9cdc6", "patch": "@@ -32,6 +32,7 @@\n import java.util.List;\n import java.util.Properties;\n import java.util.StringTokenizer;\n+import java.util.logging.Level;\n import java.util.logging.Logger;\n \n import org.apache.karaf.info.ServerInfo;\n@@ -167,10 +168,9 @@ public static void main(String[] args) throws Exception {\n             try {\n                 main.launch();\n             } catch (Throwable ex) {\n+                main.LOG.log(Level.SEVERE, \"Could not launch framework\", ex);\n                 main.destroy();\n                 main.setExitCode(-1);\n-                System.err.println(\"Could not create framework: \" + ex);\n-                ex.printStackTrace();\n             }\n             try {\n                 main.awaitShutdown();\n@@ -206,6 +206,8 @@ public void setShutdownCallback(ShutdownCallback shutdownCallback) {\n \n     public void launch() throws Exception {\n         config = new ConfigProperties();\n+        Lock lock = createLock();\n+        lockManager = new LockManager(lock, new KarafLockCallback(), config.lockDelay);\n         InstanceHelper.updateInstancePid(config.karafHome, config.karafBase);\n         BootstrapLogManager.setProperties(config.props);\n         LOG.addHandler(BootstrapLogManager.getDefaultHandler());\n@@ -235,8 +237,6 @@ public void launch() throws Exception {\n         activatorManager = new KarafActivatorManager(classLoader, framework);\n         activatorManager.startKarafActivators();\n         \n-        Lock lock = createLock();\n-        lockManager = new LockManager(lock, new KarafLockCallback(), config.lockDelay);\n         setStartLevel(config.lockStartLevel);\n         lockManager.startLockMonitor();\n     }\n@@ -441,7 +441,9 @@ public void run() {\n             }\n             return false;\n         } finally {\n-            lockManager.stopLockMonitor();\n+            if (lockManager != null) {\n+                lockManager.stopLockMonitor();\n+            }\n         }\n     }\n     ", "filename": "main/src/main/java/org/apache/karaf/main/Main.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/164313034411873bfc653fa5c211cbbece6dbb18", "parent": "https://github.com/apache/karaf/commit/046b4faa5e0aa71924fcf26bdd180df5bebca82b", "message": "[KARAF-913] Test if the Command is not null (so correctly annotated) to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1299680 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_80", "file": [{"additions": 271, "raw_url": "https://github.com/apache/karaf/raw/164313034411873bfc653fa5c211cbbece6dbb18/shell/console/src/main/java/org/apache/karaf/shell/commands/basic/DefaultActionPreparator.java", "blob_url": "https://github.com/apache/karaf/blob/164313034411873bfc653fa5c211cbbece6dbb18/shell/console/src/main/java/org/apache/karaf/shell/commands/basic/DefaultActionPreparator.java", "sha": "152172081db97b7adde68bb9d3fd3cccc8c97245", "changes": 525, "status": "modified", "deletions": 254, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/console/src/main/java/org/apache/karaf/shell/commands/basic/DefaultActionPreparator.java?ref=164313034411873bfc653fa5c211cbbece6dbb18", "patch": "@@ -46,44 +46,36 @@\n public class DefaultActionPreparator implements ActionPreparator {\n \n     public static final Option HELP = new Option() {\n-        public String name()\n-        {\n+        public String name() {\n             return \"--help\";\n         }\n \n-        public String[] aliases()\n-        {\n-            return new String[] { };\n+        public String[] aliases() {\n+            return new String[]{};\n         }\n \n-        public String description()\n-        {\n+        public String description() {\n             return \"Display this help message\";\n         }\n \n-        public boolean required()\n-        {\n+        public boolean required() {\n             return false;\n         }\n \n-        public boolean multiValued()\n-        {\n+        public boolean multiValued() {\n             return false;\n         }\n \n-        public String valueToShowInHelp()\n-        {\n+        public String valueToShowInHelp() {\n             return Option.DEFAULT_STRING;\n         }\n \n-        public Class<? extends Annotation> annotationType()\n-        {\n+        public Class<? extends Annotation> annotationType() {\n             return Option.class;\n         }\n     };\n \n-    public boolean prepare(Action action, CommandSession session, List<Object> params) throws Exception\n-    {\n+    public boolean prepare(Action action, CommandSession session, List<Object> params) throws Exception {\n         Map<Option, Field> options = new HashMap<Option, Field>();\n         Map<Argument, Field> arguments = new HashMap<Argument, Field>();\n         List<Argument> orderedArguments = new ArrayList<Argument>();\n@@ -103,21 +95,27 @@ public boolean prepare(Action action, CommandSession session, List<Object> param\n                             public String name() {\n                                 return name;\n                             }\n+\n                             public String description() {\n                                 return delegate.description();\n                             }\n+\n                             public boolean required() {\n                                 return delegate.required();\n                             }\n+\n                             public int index() {\n                                 return delegate.index();\n                             }\n+\n                             public boolean multiValued() {\n                                 return delegate.multiValued();\n                             }\n+\n                             public String valueToShowInHelp() {\n                                 return delegate.valueToShowInHelp();\n                             }\n+\n                             public Class<? extends Annotation> annotationType() {\n                                 return delegate.annotationType();\n                             }\n@@ -146,7 +144,7 @@ public String valueToShowInHelp() {\n         Map<Argument, Object> argumentValues = new HashMap<Argument, Object>();\n         boolean processOptions = true;\n         int argIndex = 0;\n-        for (Iterator<Object> it = params.iterator(); it.hasNext();) {\n+        for (Iterator<Object> it = params.iterator(); it.hasNext(); ) {\n             Object param = it.next();\n             // Check for help\n             if (HELP.name().equals(param) || Arrays.asList(HELP.aliases()).contains(param)) {\n@@ -172,25 +170,29 @@ public String valueToShowInHelp() {\n                 }\n                 if (option == null) {\n                     Command command = action.getClass().getAnnotation(Command.class);\n-                    throw new CommandException(\n-                            Ansi.ansi()\n-                                    .fg(Ansi.Color.RED)\n-                                    .a(\"Error executing command \")\n-                                    .a(command.scope())\n-                                    .a(\":\")\n-                                    .a(Ansi.Attribute.INTENSITY_BOLD)\n-                                    .a(command.name())\n-                                    .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n-                                    .a(\" undefined option \")\n-                                    .a(Ansi.Attribute.INTENSITY_BOLD)\n-                                    .a(param)\n-                                    .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n-                                    .fg(Ansi.Color.DEFAULT)\n-                                    .newline()\n-                                    .a(\"Try '\" + command.scope() + \":\" + command.name() + \" --help' for more information.\")\n-                                    .toString(),\n-                            \"Undefined option: \" + param\n-                    );\n+                    if (command != null) {\n+                        throw new CommandException(\n+                                Ansi.ansi()\n+                                        .fg(Ansi.Color.RED)\n+                                        .a(\"Error executing command \")\n+                                        .a(command.scope())\n+                                        .a(\":\")\n+                                        .a(Ansi.Attribute.INTENSITY_BOLD)\n+                                        .a(command.name())\n+                                        .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n+                                        .a(\" undefined option \")\n+                                        .a(Ansi.Attribute.INTENSITY_BOLD)\n+                                        .a(param)\n+                                        .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n+                                        .fg(Ansi.Color.DEFAULT)\n+                                        .newline()\n+                                        .a(\"Try '\" + command.scope() + \":\" + command.name() + \" --help' for more information.\")\n+                                        .toString(),\n+                                \"Undefined option: \" + param\n+                        );\n+                    } else {\n+                        throw new CommandException(\"Undefined option: \" + param);\n+                    }\n                 }\n                 Field field = options.get(option);\n                 if (value == null && (field.getType() == boolean.class || field.getType() == Boolean.class)) {\n@@ -201,29 +203,33 @@ public String valueToShowInHelp() {\n                 }\n                 if (value == null) {\n                     Command command = action.getClass().getAnnotation(Command.class);\n-                    throw new CommandException(\n-                            Ansi.ansi()\n-                                    .fg(Ansi.Color.RED)\n-                                    .a(\"Error executing command \")\n-                                    .a(command.scope())\n-                                    .a(\":\")\n-                                    .a(Ansi.Attribute.INTENSITY_BOLD)\n-                                    .a(command.name())\n-                                    .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n-                                    .a(\" missing value for option \")\n-                                    .a(Ansi.Attribute.INTENSITY_BOLD)\n-                                    .a(param)\n-                                    .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n-                                    .fg(Ansi.Color.DEFAULT)\n-                                    .toString(),\n-                            \"Missing value for option: \" + param\n-                    );\n+                    if (command != null) {\n+                        throw new CommandException(\n+                                Ansi.ansi()\n+                                        .fg(Ansi.Color.RED)\n+                                        .a(\"Error executing command \")\n+                                        .a(command.scope())\n+                                        .a(\":\")\n+                                        .a(Ansi.Attribute.INTENSITY_BOLD)\n+                                        .a(command.name())\n+                                        .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n+                                        .a(\" missing value for option \")\n+                                        .a(Ansi.Attribute.INTENSITY_BOLD)\n+                                        .a(param)\n+                                        .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n+                                        .fg(Ansi.Color.DEFAULT)\n+                                        .toString(),\n+                                \"Missing value for option: \" + param\n+                        );\n+                    } else {\n+                        throw new CommandException(\"Missing value for option: \" + param);\n+                    }\n                 }\n                 if (option.multiValued()) {\n                     List<Object> l = (List<Object>) optionValues.get(option);\n                     if (l == null) {\n                         l = new ArrayList<Object>();\n-                        optionValues.put(option,  l);\n+                        optionValues.put(option, l);\n                     }\n                     l.add(value);\n                 } else {\n@@ -233,20 +239,24 @@ public String valueToShowInHelp() {\n                 processOptions = false;\n                 if (argIndex >= orderedArguments.size()) {\n                     Command command = action.getClass().getAnnotation(Command.class);\n-                    throw new CommandException(\n-                            Ansi.ansi()\n-                                    .fg(Ansi.Color.RED)\n-                                    .a(\"Error executing command \")\n-                                    .a(command.scope())\n-                                    .a(\":\")\n-                                    .a(Ansi.Attribute.INTENSITY_BOLD)\n-                                    .a(command.name())\n-                                    .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n-                                    .a(\": too many arguments specified\")\n-                                    .fg(Ansi.Color.DEFAULT)\n-                                    .toString(),\n-                            \"Too many arguments specified\"\n-                    );\n+                    if (command != null) {\n+                        throw new CommandException(\n+                                Ansi.ansi()\n+                                        .fg(Ansi.Color.RED)\n+                                        .a(\"Error executing command \")\n+                                        .a(command.scope())\n+                                        .a(\":\")\n+                                        .a(Ansi.Attribute.INTENSITY_BOLD)\n+                                        .a(command.name())\n+                                        .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n+                                        .a(\": too many arguments specified\")\n+                                        .fg(Ansi.Color.DEFAULT)\n+                                        .toString(),\n+                                \"Too many arguments specified\"\n+                        );\n+                    } else {\n+                        throw new CommandException(\"Too many arguments specified\");\n+                    }\n                 }\n                 Argument argument = orderedArguments.get(argIndex);\n                 if (!argument.multiValued()) {\n@@ -268,47 +278,55 @@ public String valueToShowInHelp() {\n         for (Option option : options.keySet()) {\n             if (option.required() && optionValues.get(option) == null) {\n                 Command command = action.getClass().getAnnotation(Command.class);\n-                throw new CommandException(\n-                        Ansi.ansi()\n-                                .fg(Ansi.Color.RED)\n-                                .a(\"Error executing command \")\n-                                .a(command.scope())\n-                                .a(\":\")\n-                                .a(Ansi.Attribute.INTENSITY_BOLD)\n-                                .a(command.name())\n-                                .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n-                                .a(\": option \")\n-                                .a(Ansi.Attribute.INTENSITY_BOLD)\n-                                .a(option.name())\n-                                .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n-                                .a(\" is required\")\n-                                .fg(Ansi.Color.DEFAULT)\n-                                .toString(),\n-                        \"Option \" + option.name() + \" is required\"\n-                );\n+                if (command != null) {\n+                    throw new CommandException(\n+                            Ansi.ansi()\n+                                    .fg(Ansi.Color.RED)\n+                                    .a(\"Error executing command \")\n+                                    .a(command.scope())\n+                                    .a(\":\")\n+                                    .a(Ansi.Attribute.INTENSITY_BOLD)\n+                                    .a(command.name())\n+                                    .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n+                                    .a(\": option \")\n+                                    .a(Ansi.Attribute.INTENSITY_BOLD)\n+                                    .a(option.name())\n+                                    .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n+                                    .a(\" is required\")\n+                                    .fg(Ansi.Color.DEFAULT)\n+                                    .toString(),\n+                            \"Option \" + option.name() + \" is required\"\n+                    );\n+                } else {\n+                    throw new CommandException(\"Option \" + option.name() + \" is required\");\n+                }\n             }\n         }\n         for (Argument argument : arguments.keySet()) {\n             if (argument.required() && argumentValues.get(argument) == null) {\n                 Command command = action.getClass().getAnnotation(Command.class);\n-                throw new CommandException(\n-                        Ansi.ansi()\n-                                .fg(Ansi.Color.RED)\n-                                .a(\"Error executing command \")\n-                                .a(command.scope())\n-                                .a(\":\")\n-                                .a(Ansi.Attribute.INTENSITY_BOLD)\n-                                .a(command.name())\n-                                .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n-                                .a(\": argument \")\n-                                .a(Ansi.Attribute.INTENSITY_BOLD)\n-                                .a(argument.name())\n-                                .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n-                                .a(\" is required\")\n-                                .fg(Ansi.Color.DEFAULT)\n-                                .toString(),\n-                        \"Argument \" + argument.name() + \" is required\"\n-                );\n+                if (command != null) {\n+                    throw new CommandException(\n+                            Ansi.ansi()\n+                                    .fg(Ansi.Color.RED)\n+                                    .a(\"Error executing command \")\n+                                    .a(command.scope())\n+                                    .a(\":\")\n+                                    .a(Ansi.Attribute.INTENSITY_BOLD)\n+                                    .a(command.name())\n+                                    .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n+                                    .a(\": argument \")\n+                                    .a(Ansi.Attribute.INTENSITY_BOLD)\n+                                    .a(argument.name())\n+                                    .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n+                                    .a(\" is required\")\n+                                    .fg(Ansi.Color.DEFAULT)\n+                                    .toString(),\n+                            \"Argument \" + argument.name() + \" is required\"\n+                    );\n+                } else {\n+                    throw new CommandException(\"Argument \" + argument.name() + \" is required\");\n+                }\n             }\n         }\n         // Convert and inject values\n@@ -319,29 +337,35 @@ public String valueToShowInHelp() {\n                 value = convert(action, session, entry.getValue(), field.getGenericType());\n             } catch (Exception e) {\n                 Command command = action.getClass().getAnnotation(Command.class);\n-                throw new CommandException(\n-                        Ansi.ansi()\n-                                .fg(Ansi.Color.RED)\n-                                .a(\"Error executing command \")\n-                                .a(command.scope())\n-                                .a(\":\")\n-                                .a(Ansi.Attribute.INTENSITY_BOLD)\n-                                .a(command.name())\n-                                .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n-                                .a(\": unable to convert option \")\n-                                .a(Ansi.Attribute.INTENSITY_BOLD)\n-                                .a(entry.getKey().name())\n-                                .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n-                                .a(\" with value '\")\n-                                .a(entry.getValue())\n-                                .a(\"' to type \")\n-                                .a(new GenericType(field.getGenericType()).toString())\n-                                .fg(Ansi.Color.DEFAULT)\n-                                .toString(),\n-                        \"Unable to convert option \" + entry.getKey().name() + \" with value '\"\n-                                + entry.getValue() + \"' to type \" + new GenericType(field.getGenericType()).toString(),\n-                        e\n-                );\n+                if (command != null) {\n+                    throw new CommandException(\n+                            Ansi.ansi()\n+                                    .fg(Ansi.Color.RED)\n+                                    .a(\"Error executing command \")\n+                                    .a(command.scope())\n+                                    .a(\":\")\n+                                    .a(Ansi.Attribute.INTENSITY_BOLD)\n+                                    .a(command.name())\n+                                    .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n+                                    .a(\": unable to convert option \")\n+                                    .a(Ansi.Attribute.INTENSITY_BOLD)\n+                                    .a(entry.getKey().name())\n+                                    .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n+                                    .a(\" with value '\")\n+                                    .a(entry.getValue())\n+                                    .a(\"' to type \")\n+                                    .a(new GenericType(field.getGenericType()).toString())\n+                                    .fg(Ansi.Color.DEFAULT)\n+                                    .toString(),\n+                            \"Unable to convert option \" + entry.getKey().name() + \" with value '\"\n+                                    + entry.getValue() + \"' to type \" + new GenericType(field.getGenericType()).toString(),\n+                            e\n+                    );\n+                } else {\n+                    throw new CommandException(\"Unable to convert option \" + entry.getKey().name() + \" with value '\"\n+                            + entry.getValue() + \"' to type \" + new GenericType(field.getGenericType()).toString(),\n+                            e);\n+                }\n             }\n             field.setAccessible(true);\n             field.set(action, value);\n@@ -353,157 +377,151 @@ public String valueToShowInHelp() {\n                 value = convert(action, session, entry.getValue(), field.getGenericType());\n             } catch (Exception e) {\n                 Command command = action.getClass().getAnnotation(Command.class);\n-                throw new CommandException(\n-                        Ansi.ansi()\n-                                .fg(Ansi.Color.RED)\n-                                .a(\"Error executing command \")\n-                                .a(command.scope())\n-                                .a(\":\")\n-                                .a(Ansi.Attribute.INTENSITY_BOLD)\n-                                .a(command.name())\n-                                .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n-                                .a(\": unable to convert argument \")\n-                                .a(Ansi.Attribute.INTENSITY_BOLD)\n-                                .a(entry.getKey().name())\n-                                .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n-                                .a(\" with value '\")\n-                                .a(entry.getValue())\n-                                .a(\"' to type \")\n-                                .a(new GenericType(field.getGenericType()).toString())\n-                                .fg(Ansi.Color.DEFAULT)\n-                                .toString(),\n-                        \"Unable to convert argument \" + entry.getKey().name() + \" with value '\" \n-                                + entry.getValue() + \"' to type \" + new GenericType(field.getGenericType()).toString(),\n-                        e\n-                );\n+                if (command != null) {\n+                    throw new CommandException(\n+                            Ansi.ansi()\n+                                    .fg(Ansi.Color.RED)\n+                                    .a(\"Error executing command \")\n+                                    .a(command.scope())\n+                                    .a(\":\")\n+                                    .a(Ansi.Attribute.INTENSITY_BOLD)\n+                                    .a(command.name())\n+                                    .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n+                                    .a(\": unable to convert argument \")\n+                                    .a(Ansi.Attribute.INTENSITY_BOLD)\n+                                    .a(entry.getKey().name())\n+                                    .a(Ansi.Attribute.INTENSITY_BOLD_OFF)\n+                                    .a(\" with value '\")\n+                                    .a(entry.getValue())\n+                                    .a(\"' to type \")\n+                                    .a(new GenericType(field.getGenericType()).toString())\n+                                    .fg(Ansi.Color.DEFAULT)\n+                                    .toString(),\n+                            \"Unable to convert argument \" + entry.getKey().name() + \" with value '\"\n+                                    + entry.getValue() + \"' to type \" + new GenericType(field.getGenericType()).toString(),\n+                            e\n+                    );\n+                } else {\n+                    throw new CommandException(\"Unable to convert argument \" + entry.getKey().name() + \" with value '\"\n+                            + entry.getValue() + \"' to type \" + new GenericType(field.getGenericType()).toString(),\n+                            e);\n+                }\n             }\n             field.setAccessible(true);\n             field.set(action, value);\n         }\n         return true;\n     }\n \n-    protected void printUsage(CommandSession session, Action action, Map<Option,Field> optionsMap, Map<Argument,Field> argsMap, PrintStream out)\n-    {\n+    protected void printUsage(CommandSession session, Action action, Map<Option, Field> optionsMap, Map<Argument, Field> argsMap, PrintStream out) {\n         Command command = action.getClass().getAnnotation(Command.class);\n-        Terminal term = session != null ? (Terminal) session.get(\".jline.terminal\") : null;\n-        List<Argument> arguments = new ArrayList<Argument>(argsMap.keySet());\n-        Collections.sort(arguments, new Comparator<Argument>() {\n-            public int compare(Argument o1, Argument o2) {\n-                return Integer.valueOf(o1.index()).compareTo(Integer.valueOf(o2.index()));\n+        if (command != null) {\n+            Terminal term = session != null ? (Terminal) session.get(\".jline.terminal\") : null;\n+            List<Argument> arguments = new ArrayList<Argument>(argsMap.keySet());\n+            Collections.sort(arguments, new Comparator<Argument>() {\n+                public int compare(Argument o1, Argument o2) {\n+                    return Integer.valueOf(o1.index()).compareTo(Integer.valueOf(o2.index()));\n+                }\n+            });\n+            Set<Option> options = new HashSet<Option>(optionsMap.keySet());\n+            options.add(HELP);\n+            boolean globalScope = NameScoping.isGlobalScope(session, command.scope());\n+            if (command != null && (command.description() != null || command.name() != null)) {\n+                out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(\"DESCRIPTION\").a(Ansi.Attribute.RESET));\n+                out.print(\"        \");\n+                if (command.name() != null) {\n+                    if (globalScope) {\n+                        out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(command.name()).a(Ansi.Attribute.RESET));\n+                    } else {\n+                        out.println(Ansi.ansi().a(command.scope()).a(\":\").a(Ansi.Attribute.INTENSITY_BOLD).a(command.name()).a(Ansi.Attribute.RESET));\n+                    }\n+                    out.println();\n+                }\n+                out.print(\"\\t\");\n+                out.println(command.description());\n+                out.println();\n             }\n-        });\n-        Set<Option> options = new HashSet<Option>(optionsMap.keySet());\n-        options.add(HELP);\n-        boolean globalScope = NameScoping.isGlobalScope(session, command.scope());\n-        if (command != null && (command.description() != null || command.name() != null))\n-        {\n-            out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(\"DESCRIPTION\").a(Ansi.Attribute.RESET));\n-            out.print(\"        \");\n-            if (command.name() != null) {\n+            StringBuffer syntax = new StringBuffer();\n+            if (command != null) {\n                 if (globalScope) {\n-                    out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(command.name()).a(Ansi.Attribute.RESET));\n+                    syntax.append(command.name());\n                 } else {\n-                    out.println(Ansi.ansi().a(command.scope()).a(\":\").a(Ansi.Attribute.INTENSITY_BOLD).a(command.name()).a(Ansi.Attribute.RESET));\n+                    syntax.append(String.format(\"%s:%s\", command.scope(), command.name()));\n                 }\n-                out.println();\n             }\n-            out.print(\"\\t\");\n-            out.println(command.description());\n-            out.println();\n-        }\n-        StringBuffer syntax = new StringBuffer();\n-        if (command != null)\n-        {\n-            if (globalScope) {\n-                syntax.append(command.name());\n-            } else {\n-                syntax.append(String.format(\"%s:%s\", command.scope(), command.name()));\n+            if (options.size() > 0) {\n+                syntax.append(\" [options]\");\n             }\n-        }\n-        if (options.size() > 0)\n-        {\n-            syntax.append(\" [options]\");\n-        }\n-        if (arguments.size() > 0)\n-        {\n-            syntax.append(' ');\n-            for (Argument argument : arguments)\n-            {\n-                if (!argument.required())\n-                {\n-                    syntax.append(String.format(\"[%s] \", argument.name()));\n-                }\n-                else\n-                {\n-                    syntax.append(String.format(\"%s \", argument.name()));\n+            if (arguments.size() > 0) {\n+                syntax.append(' ');\n+                for (Argument argument : arguments) {\n+                    if (!argument.required()) {\n+                        syntax.append(String.format(\"[%s] \", argument.name()));\n+                    } else {\n+                        syntax.append(String.format(\"%s \", argument.name()));\n+                    }\n                 }\n             }\n-        }\n \n-        out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(\"SYNTAX\").a(Ansi.Attribute.RESET));\n-        out.print(\"        \");\n-        out.println(syntax.toString());\n-        out.println();\n-        if (arguments.size() > 0)\n-        {\n-            out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(\"ARGUMENTS\").a(Ansi.Attribute.RESET));\n-            for (Argument argument : arguments)\n-            {\n-                out.print(\"        \");\n-                out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(argument.name()).a(Ansi.Attribute.RESET));\n-                printFormatted(\"                \", argument.description(), term != null ? term.getWidth() : 80, out);\n-                if (!argument.required()) {\n-                    if (argument.valueToShowInHelp() != null && argument.valueToShowInHelp().length() != 0) {\n-                         try {\n-                            if (Argument.DEFAULT_STRING.equals(argument.valueToShowInHelp())) {\n-                                argsMap.get(argument).setAccessible(true);\n-                                Object o = argsMap.get(argument).get(action);\n+            out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(\"SYNTAX\").a(Ansi.Attribute.RESET));\n+            out.print(\"        \");\n+            out.println(syntax.toString());\n+            out.println();\n+            if (arguments.size() > 0) {\n+                out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(\"ARGUMENTS\").a(Ansi.Attribute.RESET));\n+                for (Argument argument : arguments) {\n+                    out.print(\"        \");\n+                    out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(argument.name()).a(Ansi.Attribute.RESET));\n+                    printFormatted(\"                \", argument.description(), term != null ? term.getWidth() : 80, out);\n+                    if (!argument.required()) {\n+                        if (argument.valueToShowInHelp() != null && argument.valueToShowInHelp().length() != 0) {\n+                            try {\n+                                if (Argument.DEFAULT_STRING.equals(argument.valueToShowInHelp())) {\n+                                    argsMap.get(argument).setAccessible(true);\n+                                    Object o = argsMap.get(argument).get(action);\n+                                    printObjectDefaultsTo(out, o);\n+                                } else {\n+                                    printDefaultsTo(out, argument.valueToShowInHelp());\n+                                }\n+                            } catch (Throwable t) {\n+                                // Ignore\n+                            }\n+                        }\n+                    }\n+                }\n+                out.println();\n+            }\n+            if (options.size() > 0) {\n+                out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(\"OPTIONS\").a(Ansi.Attribute.RESET));\n+                for (Option option : options) {\n+                    String opt = option.name();\n+                    for (String alias : option.aliases()) {\n+                        opt += \", \" + alias;\n+                    }\n+                    out.print(\"        \");\n+                    out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(opt).a(Ansi.Attribute.RESET));\n+                    printFormatted(\"                \", option.description(), term != null ? term.getWidth() : 80, out);\n+                    if (option.valueToShowInHelp() != null && option.valueToShowInHelp().length() != 0) {\n+                        try {\n+                            if (Option.DEFAULT_STRING.equals(option.valueToShowInHelp())) {\n+                                optionsMap.get(option).setAccessible(true);\n+                                Object o = optionsMap.get(option).get(action);\n                                 printObjectDefaultsTo(out, o);\n                             } else {\n-                                printDefaultsTo(out, argument.valueToShowInHelp());\n+                                printDefaultsTo(out, option.valueToShowInHelp());\n                             }\n                         } catch (Throwable t) {\n                             // Ignore\n                         }\n                     }\n                 }\n+                out.println();\n             }\n-            out.println();\n-        }\n-        if (options.size() > 0)\n-        {\n-            out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(\"OPTIONS\").a(Ansi.Attribute.RESET));\n-            for (Option option : options)\n-            {\n-                String opt = option.name();\n-                for (String alias : option.aliases())\n-                {\n-                    opt += \", \" + alias;\n-                }\n-                out.print(\"        \");\n-                out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(opt).a(Ansi.Attribute.RESET));\n-                printFormatted(\"                \", option.description(), term != null ? term.getWidth() : 80, out);\n-                if (option.valueToShowInHelp() != null && option.valueToShowInHelp().length() != 0) {\n-                    try {\n-                        if(Option.DEFAULT_STRING.equals(option.valueToShowInHelp())) {\n-                            optionsMap.get(option).setAccessible(true);\n-                            Object o = optionsMap.get(option).get(action);\n-                            printObjectDefaultsTo(out, o);\n-                        } else {\n-                            printDefaultsTo(out, option.valueToShowInHelp());\n-                        }\n-                    } catch (Throwable t) {\n-                        // Ignore\n-                    }\n-                }\n+            if (command.detailedDescription().length() > 0) {\n+                out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(\"DETAILS\").a(Ansi.Attribute.RESET));\n+                String desc = loadDescription(action.getClass(), command.detailedDescription());\n+                printFormatted(\"        \", desc, term != null ? term.getWidth() : 80, out);\n             }\n-            out.println();\n-        }\n-        if (command.detailedDescription().length() > 0) {\n-            out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(\"DETAILS\").a(Ansi.Attribute.RESET));\n-            String desc = loadDescription(action.getClass(), command.detailedDescription());\n-            printFormatted(\"        \", desc, term != null ? term.getWidth() : 80, out);\n         }\n     }\n \n@@ -568,8 +586,7 @@ public static int length(String str) {\n         return str.length();\n     }\n \n-    protected Object convert(Action action, CommandSession session, Object value, Type toType) throws Exception\n-    {\n+    protected Object convert(Action action, CommandSession session, Object value, Type toType) throws Exception {\n         if (toType == String.class) {\n             return value != null ? value.toString() : null;\n         }", "filename": "shell/console/src/main/java/org/apache/karaf/shell/commands/basic/DefaultActionPreparator.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/a7f882fadebe21ee0ba3b41a2f41249c565085bf", "parent": "https://github.com/apache/karaf/commit/b9cba38c656a67d96a75460c2a39643ce1bfdf63", "message": "[KARAF-1212] Fix NPE on the FeatureFinder when Properties are not yet there\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1292183 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_81", "file": [{"additions": 10, "raw_url": "https://github.com/apache/karaf/raw/a7f882fadebe21ee0ba3b41a2f41249c565085bf/features/command/src/main/java/org/apache/karaf/features/command/FeatureFinder.java", "blob_url": "https://github.com/apache/karaf/blob/a7f882fadebe21ee0ba3b41a2f41249c565085bf/features/command/src/main/java/org/apache/karaf/features/command/FeatureFinder.java", "sha": "c9f042fa1b7c07f1a99538e1baac98996c942049", "changes": 16, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/command/src/main/java/org/apache/karaf/features/command/FeatureFinder.java?ref=a7f882fadebe21ee0ba3b41a2f41249c565085bf", "patch": "@@ -26,7 +26,9 @@\n import org.osgi.service.cm.ManagedService;\n \n public class FeatureFinder implements ManagedService {\n+\n     Map<String, String> nameToArtifactMap = new HashMap<String, String>();\n+\n     public String[] getNames() {\n         return nameToArtifactMap.keySet().toArray(new String[] {});\n     }\n@@ -42,12 +44,14 @@ public URI getUriFor(String name, String version) {\n \n     @SuppressWarnings(\"rawtypes\")\n     public void updated(Dictionary properties) throws ConfigurationException {\n-        nameToArtifactMap.clear();\n-        Enumeration keys = properties.keys();\n-        while (keys.hasMoreElements()) {\n-            String key = (String)keys.nextElement();\n-            if (!\"felix.fileinstall.filename\".equals(key) && !\"service.pid\".equals(key)) {\n-                nameToArtifactMap.put(key, (String)properties.get(key));\n+        if (properties != null) {\n+            nameToArtifactMap.clear();\n+            Enumeration keys = properties.keys();\n+            while (keys.hasMoreElements()) {\n+                String key = (String)keys.nextElement();\n+                if (!\"felix.fileinstall.filename\".equals(key) && !\"service.pid\".equals(key)) {\n+                    nameToArtifactMap.put(key, (String)properties.get(key));\n+                }\n             }\n         }\n     }", "filename": "features/command/src/main/java/org/apache/karaf/features/command/FeatureFinder.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/8fea45a7c1cacf17a5dfda272a11d7367e82638f", "parent": "https://github.com/apache/karaf/commit/e690f7b373a3356a23a4ccbfc48ed2b3f4de717f", "message": "[KARAF-1126] Fix NPE in features-validate-descriptor goal due to bad package name definition\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1225012 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_82", "file": [{"additions": 1, "raw_url": "https://github.com/apache/karaf/raw/8fea45a7c1cacf17a5dfda272a11d7367e82638f/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ValidateDescriptorMojo.java", "blob_url": "https://github.com/apache/karaf/blob/8fea45a7c1cacf17a5dfda272a11d7367e82638f/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ValidateDescriptorMojo.java", "sha": "3b383e474f7a29168ff4d9e43e595fe74ee6d41f", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ValidateDescriptorMojo.java?ref=8fea45a7c1cacf17a5dfda272a11d7367e82638f", "patch": "@@ -215,7 +215,7 @@ private void appendKarafCoreFeaturesDescriptors() {\n             repositories = new ArrayList<String>();\n         }\n         if (karafVersion == null) {\n-            Package p = Package.getPackage(\"org.apache.karaf.tooling\");\n+            Package p = Package.getPackage(\"org.apache.karaf.tooling.features\");\n             karafVersion = p.getImplementationVersion();\n         }\n         String karafCoreStandardFeaturesUrl = String.format(KARAF_CORE_STANDARD_FEATURE_URL, karafVersion);", "filename": "tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/ValidateDescriptorMojo.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/2b501cf411006983759fcc392f965fd719c3d8c3", "parent": "https://github.com/apache/karaf/commit/dd7879adaa30b2f3797e579911e50ebc84f5afbc", "message": "[KARAF-625] Missing property log4j.appender.out.file in the file etc/org.ops4j.pax.logging.cfg cause a NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1101562 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_83", "file": [{"additions": 6, "raw_url": "https://github.com/apache/karaf/raw/2b501cf411006983759fcc392f965fd719c3d8c3/main/src/main/java/org/apache/karaf/main/BootstrapLogManager.java", "blob_url": "https://github.com/apache/karaf/blob/2b501cf411006983759fcc392f965fd719c3d8c3/main/src/main/java/org/apache/karaf/main/BootstrapLogManager.java", "sha": "964bdaad08c61721a1a40c8b58a356f0c714373f", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/main/java/org/apache/karaf/main/BootstrapLogManager.java?ref=2b501cf411006983759fcc392f965fd719c3d8c3", "patch": "@@ -65,6 +65,12 @@ public static Handler getDefaultHandler () {\n                     }\n                 }\n             }\n+\n+            if (props.getProperty(\"log4j.appender.out.file\") == null) {\n+                // manage if the log4j.appender.out.file property is not present in\n+                // the etc/org.ops4j.pax.logging.cfg file\n+                props.setProperty(\"log4j.appender.out.file\", \"${karaf.data}/log/karaf.log\");\n+            }\n             filename = Main.substVars(props.getProperty(\"log4j.appender.out.file\"),\"log4j.appender.out.file\", null, null);\n             log = new File(filename);\n         }", "filename": "main/src/main/java/org/apache/karaf/main/BootstrapLogManager.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/77889016e633d70036fb1f1262009215122e7117", "parent": "https://github.com/apache/karaf/commit/919d6379c3e1e36945746d406e3c293339128050", "message": "KARAF-424 eliminate some NPEs, use less unix-centric file path handling, and provide more boot and install choices for listed features\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1094111 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_84", "file": [{"additions": 2, "raw_url": "https://github.com/apache/karaf/raw/77889016e633d70036fb1f1262009215122e7117/assemblies/apache-karaf-full/pom.xml", "blob_url": "https://github.com/apache/karaf/blob/77889016e633d70036fb1f1262009215122e7117/assemblies/apache-karaf-full/pom.xml", "sha": "d795cd4dd36b927271254287d8839e6e1bd54e01", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/karaf/contents/assemblies/apache-karaf-full/pom.xml?ref=77889016e633d70036fb1f1262009215122e7117", "patch": "@@ -84,11 +84,11 @@\n                     </execution>\n                 </executions>\n                 <configuration>\n-                    <features>\n+                    <startupFeatures>\n                         <feature>ssh</feature>\n                         <feature>config</feature>\n                         <feature>management</feature>\n-                    </features>\n+                    </startupFeatures>\n                 </configuration>\n             </plugin>\n ", "filename": "assemblies/apache-karaf-full/pom.xml"}, {"additions": 2, "raw_url": "https://github.com/apache/karaf/raw/77889016e633d70036fb1f1262009215122e7117/assemblies/apache-karaf-minimal/pom.xml", "blob_url": "https://github.com/apache/karaf/blob/77889016e633d70036fb1f1262009215122e7117/assemblies/apache-karaf-minimal/pom.xml", "sha": "fe18e953cd5ff50a6829bb3121437096df1738ff", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/karaf/contents/assemblies/apache-karaf-minimal/pom.xml?ref=77889016e633d70036fb1f1262009215122e7117", "patch": "@@ -66,9 +66,9 @@\n                     </execution>\n                 </executions>\n                 <configuration>\n-                    <features>\n+                    <startupFeatures>\n                         <feature>management</feature>\n-                    </features>\n+                    </startupFeatures>\n                 </configuration>\n             </plugin>\n ", "filename": "assemblies/apache-karaf-minimal/pom.xml"}, {"additions": 84, "raw_url": "https://github.com/apache/karaf/raw/77889016e633d70036fb1f1262009215122e7117/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/InstallKarsMojo.java", "blob_url": "https://github.com/apache/karaf/blob/77889016e633d70036fb1f1262009215122e7117/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/InstallKarsMojo.java", "sha": "5c6876039ea70d54b4a88239949170e664fbce89", "changes": 118, "status": "modified", "deletions": 34, "contents_url": "https://api.github.com/repos/apache/karaf/contents/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/InstallKarsMojo.java?ref=77889016e633d70036fb1f1262009215122e7117", "patch": "@@ -29,6 +29,7 @@\n import java.io.OutputStream;\n import java.lang.reflect.Field;\n import java.net.URI;\n+import java.net.URISyntaxException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -49,7 +50,6 @@\n import org.apache.karaf.features.internal.model.Features;\n import org.apache.karaf.features.internal.model.Feature;\n import org.apache.karaf.features.internal.model.JaxbUtil;\n-import org.apache.maven.RepositoryUtils;\n import org.apache.maven.artifact.Artifact;\n import org.apache.maven.artifact.repository.layout.DefaultRepositoryLayout;\n import org.apache.maven.plugin.MojoExecutionException;\n@@ -119,22 +119,36 @@\n      * @parameter expression=\"${project.build.directory}/assembly/local-repo\"\n      * @required\n      */\n-    protected String localRepoDirectory;\n+    protected File localRepoDirectory;\n \n     /**\n      * Directory that resources are copied to during the build.\n      *\n      * @parameter expression=\"${project.build.directory}/assembly/system\"\n      * @required\n      */\n-    protected String systemDirectory;\n+    protected File systemDirectory;\n \n     /**\n-     * List of features from runtime-scope features xml and kars to be installed.\n+     * List of features from runtime-scope features xml and kars to be installed into system and listed in startup.properties.\n      *\n      * @parameter\n      */\n-    private List<String> features;\n+    private List<String> startupFeatures;\n+\n+    /**\n+     * List of features from runtime-scope features xml and kars to be installed into local-repo and listed in features service boot features.\n+     *\n+     * @parameter\n+     */\n+    private List<String> bootFeatures;\n+\n+    /**\n+     * List of features from runtime-scope features xml and kars to be installed into local-repo and not mentioned elsewhere.\n+     *\n+     * @parameter\n+     */\n+    private List<String> installedFeatures;\n \n     //Aether support\n     /**\n@@ -160,10 +174,21 @@\n      */\n     private List<RemoteRepository> remoteRepos;\n \n-    private String repoPath;\n+    private URI localRepo;\n+    private URI system;\n+    private URI repoPath;\n     private CommentProperties startupProperties = new CommentProperties();\n \n+    /**\n+     * list of features to  install into local repo.\n+     */\n+    private List<Feature> localRepoFeatures = new ArrayList<Feature>();\n+\n     public void execute() throws MojoExecutionException, MojoFailureException {\n+        localRepoDirectory.mkdirs();\n+        localRepo = localRepoDirectory.toURI();\n+        systemDirectory.mkdirs();\n+        system = systemDirectory.toURI();\n         if (startupPropertiesFile.exists()) {\n             try {\n                 InputStream in = new FileInputStream(startupPropertiesFile);\n@@ -191,8 +216,8 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n         byte[] buffer = new byte[4096];\n         for (Artifact artifact: dependencies) {\n             unpackToLocalRepo = \"runtime\".equals(artifact.getScope());\n-            repoPath = unpackToLocalRepo ? localRepoDirectory : systemDirectory;\n-            installer.setLocalRepoPath(repoPath);\n+            repoPath = unpackToLocalRepo ? localRepo : system;\n+            installer.setLocalRepoPath(repoPath.getPath());\n             if (\"kar\".equals(artifact.getType()) && acceptScope(artifact)) {\n                 File file = artifact.getFile();\n                 try {\n@@ -210,7 +235,7 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n \n                 //remove timestamp version\n                 artifact = factory.createArtifactWithClassifier(artifact.getGroupId(), artifact.getArtifactId(), artifact.getBaseVersion(), artifact.getType(), artifact.getClassifier());\n-                File target = new File(repoPath + \"/\" + layout.pathOf(artifact));\n+                File target = new File(repoPath.resolve(layout.pathOf(artifact)));\n                 if (!target.exists()) {\n                     target.getParentFile().mkdirs();\n                     try {\n@@ -239,23 +264,26 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n         //install bundles listed in startup properties that weren't in kars into the system dir\n         for (String key: startupProperties.keySet()) {\n             String path = MvnUrlUtil.pathFromMaven(key);\n-            File target = new File(systemDirectory + \"/\" + path);\n+            File target = new File(system.resolve(path));\n             if (!target.exists()) {\n-                File source = resolve(key);\n-                target.getParentFile().mkdirs();\n-                try {\n-                    InputStream is = new FileInputStream(source);\n-                    BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(target));\n-                    int count = 0;\n-                    while ((count = is.read(buffer)) > 0)\n-                    {\n-                        bos.write(buffer, 0, count);\n+                install(buffer, key, target);\n+            }\n+        }\n+\n+        //install bundles listed in install features not in system into local-repo\n+        for (Feature feature: localRepoFeatures) {\n+            for (Bundle bundle: feature.getBundle()) {\n+                if (!bundle.isDependency()) {\n+                    String key = bundle.getLocation();\n+                    String path = MvnUrlUtil.pathFromMaven(key);\n+                    File test = new File(system.resolve(path));\n+                    if (!test.exists()) {\n+                        File target = new File(localRepo.resolve(path));\n+                        if (!target.exists()) {\n+                            install(buffer, key, target);\n+                        }\n                     }\n-                    bos.close();\n-                } catch (IOException e) {\n-                    getLog().error(\"Could not copy bundle \" + key, e);\n                 }\n-\n             }\n         }\n \n@@ -274,6 +302,23 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n         }\n     }\n \n+    private void install(byte[] buffer, String key, File target) {\n+        File source = resolve(key);\n+        target.getParentFile().mkdirs();\n+        try {\n+            InputStream is = new FileInputStream(source);\n+            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(target));\n+            int count = 0;\n+            while ((count = is.read(buffer)) > 0)\n+            {\n+                bos.write(buffer, 0, count);\n+            }\n+            bos.close();\n+        } catch (IOException e) {\n+            getLog().error(\"Could not copy bundle \" + key, e);\n+        }\n+    }\n+\n     private boolean acceptScope(Artifact artifact) {\n         return \"compile\".equals(artifact.getScope()) || \"runtime\".equals(artifact.getScope());\n     }\n@@ -304,6 +349,7 @@ public File resolve(String id) {\n \n     private class OfflineFeaturesService implements FeaturesService {\n         private static final String FEATURES_REPOSITORIES = \"featuresRepositories\";\n+        private static final String FEATURES_BOOT = \"featuresBoot\";\n \n         public void validateRepository(URI uri) throws Exception {\n         }\n@@ -322,35 +368,39 @@ public void addRepository(URI uri) throws Exception {\n                     String existingFeatureRepos = properties.containsKey(FEATURES_REPOSITORIES)? properties.get(FEATURES_REPOSITORIES) + \",\": \"\";\n                     existingFeatureRepos = existingFeatureRepos + uri.toString();\n                     properties.put(FEATURES_REPOSITORIES, existingFeatureRepos);\n+                    Features repo = readFeatures(uri);\n+                    for (Feature feature: repo.getFeature()) {\n+                        if (startupFeatures != null && startupFeatures.contains(feature.getName())) {\n+                            installFeature(feature, null);\n+                        } else if (bootFeatures != null && bootFeatures.contains(feature.getName())) {\n+                            localRepoFeatures.add(feature);\n+                            String existingBootFeatures = properties.containsKey(FEATURES_BOOT)? properties.get(FEATURES_BOOT) + \",\": \"\";\n+                            existingBootFeatures = existingBootFeatures + feature.getName();\n+                            properties.put(FEATURES_BOOT, existingBootFeatures);\n+                        }  else if (installedFeatures != null && installedFeatures.contains(featuresCfgFile.getName())) {\n+                            localRepoFeatures.add(feature);\n+                        }\n+                    }\n                     FileOutputStream out = new FileOutputStream(featuresCfgFile);\n                     try {\n                         properties.save(out);\n                     } finally {\n                         out.close();\n                     }\n-                    Features repo = readFeatures(uri);\n-                    for (Feature feature: repo.getFeature()) {\n-                        if (features.contains(feature.getName())) {\n-                            installFeature(feature, null);\n-                        }\n-                    }\n                 }\n             } else {\n-                getLog().info(\"Installing feature to system and startup.properties\");\n-                File repoFile;\n+                getLog().info(\"Installing feature \" + uri + \" to system and startup.properties\");\n                 Features features = readFeatures(uri);\n                 for (Feature feature: features.getFeature()) {\n                     installFeature(feature, null);\n                 }\n-\n-\n             }\n         }\n \n         private Features readFeatures(URI uri) throws XMLStreamException, JAXBException, IOException {\n             File repoFile;\n             if (uri.toString().startsWith(\"mvn:\")) {\n-                String featuresPath = repoPath + \"/\" + MvnUrlUtil.pathFromMaven(uri.toString());\n+                URI featuresPath = repoPath.resolve(MvnUrlUtil.pathFromMaven(uri.toString()));\n                 repoFile = new File(featuresPath);\n             } else {\n                 repoFile = new File(uri);", "filename": "tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/InstallKarsMojo.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a", "parent": "https://github.com/apache/karaf/commit/9ff7825e3dde646a6f602b9fbc0d09bedcde112d", "message": "KARAF-452: Add bundle range support to headers, ls, info, refresh, resolve commands. Also, fix some additional NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1091989 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_85", "file": [{"additions": 178, "raw_url": "https://github.com/apache/karaf/raw/59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/BundleSelector.java", "blob_url": "https://github.com/apache/karaf/blob/59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/BundleSelector.java", "sha": "afb04e08d6829e0b6fee9bf0f90d206d895b8bf7", "changes": 178, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/BundleSelector.java?ref=59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a", "patch": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.karaf.shell.osgi;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.apache.felix.service.command.CommandSession;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.Constants;\n+\n+public class BundleSelector {\n+\n+    private final CommandSession session;\n+    private final BundleContext bundleContext;\n+    \n+    public BundleSelector(BundleContext bundleContext, CommandSession session) {\n+        this.bundleContext = bundleContext;\n+        this.session = session;\n+    }\n+    \n+    public List<Bundle> selectBundles(List<String> ids, boolean force) throws Exception {\n+        List<Bundle> bundles = new ArrayList<Bundle>();\n+        if (ids != null && !ids.isEmpty()) {\n+            for (String id : ids) {\n+\n+                // id is a number\n+                Pattern pattern = Pattern.compile(\"^\\\\d+$\");\n+                Matcher matcher = pattern.matcher(id);\n+                if (matcher.find()) {\n+                    Bundle bundle = this.getBundleById(id);\n+                    addBundle(bundle, id, force, bundles);\n+                    continue;\n+                }\n+\n+                // id as a number range\n+                pattern = Pattern.compile(\"^(\\\\d+)-(\\\\d+)$\");\n+                matcher = pattern.matcher(id);\n+                if (matcher.find()) {\n+                    int index = id.indexOf('-');\n+                    long startId = Long.parseLong(id.substring(0, index));\n+                    long endId = Long.parseLong(id.substring(index + 1));\n+                    if (startId < endId) {\n+                        for (long i = startId; i <= endId; i++) {\n+                            Bundle bundle = bundleContext.getBundle(i);\n+                            addBundle(bundle, String.valueOf(i), force, bundles);\n+                        }\n+                    }\n+                    continue;\n+                }\n+\n+                int index = id.indexOf('/');\n+                List<Bundle> bundlesByName = null;\n+                if (index != -1) {\n+                    // user has provided name and version\n+                    bundlesByName = getBundleByNameAndVersion(id.substring(0, index), id.substring(index + 1));\n+                } else {\n+                    // user has provided only the name\n+                    bundlesByName = getBundleByName(id);\n+                }\n+                for (Bundle bundleByName : bundlesByName) {\n+                    addBundle(bundleByName, id, force, bundles);\n+                }\n+            }\n+\n+        }\n+\n+        return bundles;\n+    }\n+\n+    private void addBundle(Bundle bundle, String id, boolean force, List<Bundle> bundles) throws Exception {\n+        if (bundle == null) {\n+            // if the bundle is null here, it's because we didn't find it\n+            System.err.println(\"Bundle \" + id + \" is invalid\");\n+        } else {\n+            if (force || !Util.isASystemBundle(bundleContext, bundle) || Util.accessToSystemBundleIsAllowed(bundle.getBundleId(), session)) {\n+                bundles.add(bundle);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get a bundle identified by an id number.\n+     *\n+     * @param id the id number.\n+     * @return the bundle or null if not found.\n+     */\n+    private Bundle getBundleById(String id) {\n+        Bundle bundle = null;\n+        try {\n+            long idNumber = Long.parseLong(id);\n+            bundle = bundleContext.getBundle(idNumber);\n+        } catch (NumberFormatException nfe) {\n+            // ignore\n+        }\n+        return bundle;\n+    }\n+\n+    /**\n+     * Get a bundles list with the name or symbolic name matching the pattern.\n+     *\n+     * @param name the bundle name or symbolic name pattern to match.\n+     * @return the bundles list.\n+     */\n+    private List<Bundle> getBundleByName(String name) {\n+        return getBundleByNameAndVersion(name, null);\n+    }\n+\n+    /**\n+     * Get a bundles list with the name or symbolic name matching the name pattern and version matching the version pattern.\n+     *\n+     * @param name    the bundle name or symbolic name regex to match.\n+     * @param version the bundle version regex to match.\n+     * @return the bundles list.\n+     */\n+    private List<Bundle> getBundleByNameAndVersion(String name, String version) {\n+        Bundle[] bundles = bundleContext.getBundles();\n+\n+        ArrayList<Bundle> result = new ArrayList<Bundle>();\n+\n+        Pattern namePattern = Pattern.compile(name);\n+\n+        for (int i = 0; i < bundles.length; i++) {\n+\n+            String bundleSymbolicName = bundles[i].getSymbolicName();\n+            // skip bundles without Bundle-SymbolicName header\n+            if (bundleSymbolicName == null) {\n+                continue;\n+            }\n+            \n+            Matcher symbolicNameMatcher = namePattern.matcher(bundleSymbolicName);\n+            \n+            Matcher nameMatcher = null;\n+            String bundleName = (String) bundles[i].getHeaders().get(Constants.BUNDLE_NAME);\n+            if (bundleName != null) {\n+                nameMatcher = namePattern.matcher(bundleName);\n+            }\n+\n+            if (version != null) {\n+                String bundleVersion = (String) bundles[i].getHeaders().get(Constants.BUNDLE_VERSION);\n+                if (bundleVersion != null) {\n+                    boolean nameMatch = (nameMatcher != null && nameMatcher.find()) || symbolicNameMatcher.find();\n+                    if (nameMatch) {\n+                        Pattern versionPattern = Pattern.compile(version);\n+                        Matcher versionMatcher = versionPattern.matcher(bundleVersion);                    \n+                        if (versionMatcher.find()) {\n+                            result.add(bundles[i]);\n+                        }\n+                    }\n+                }\n+            } else {\n+                boolean nameMatch = (nameMatcher != null && nameMatcher.find()) || symbolicNameMatcher.find();\n+                if (nameMatch) {\n+                    result.add(bundles[i]);\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+}", "filename": "shell/osgi/src/main/java/org/apache/karaf/shell/osgi/BundleSelector.java"}, {"additions": 4, "raw_url": "https://github.com/apache/karaf/raw/59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/BundlesCommand.java", "blob_url": "https://github.com/apache/karaf/blob/59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/BundlesCommand.java", "sha": "a08048b25e78acada4ff93520fdd8ed1a70718f5", "changes": 136, "status": "modified", "deletions": 132, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/BundlesCommand.java?ref=59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a", "patch": "@@ -16,17 +16,12 @@\n  */\n package org.apache.karaf.shell.osgi;\n \n-import java.util.ArrayList;\n import java.util.List;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n \n-import org.apache.karaf.shell.console.OsgiCommandSupport;\n import org.apache.felix.gogo.commands.Argument;\n import org.apache.felix.gogo.commands.Option;\n+import org.apache.karaf.shell.console.OsgiCommandSupport;\n import org.osgi.framework.Bundle;\n-import org.osgi.framework.BundleContext;\n-import org.osgi.framework.Constants;\n \n public abstract class BundlesCommand extends OsgiCommandSupport {\n \n@@ -37,134 +32,11 @@\n     boolean force;\n \n     protected Object doExecute() throws Exception {\n-        List<Bundle> bundles = new ArrayList<Bundle>();\n-        if (ids != null && !ids.isEmpty()) {\n-            for (String id : ids) {\n-\n-                // id is a number\n-                Pattern pattern = Pattern.compile(\"^\\\\d+$\");\n-                Matcher matcher = pattern.matcher(id);\n-                if (matcher.find()) {\n-                    Bundle bundle = this.getBundleById(id);\n-                    this.addBundle(bundle, id, force, bundles);\n-                    continue;\n-                }\n-\n-                // id as a number range\n-                pattern = Pattern.compile(\"^(\\\\d+)-(\\\\d+)$\");\n-                matcher = pattern.matcher(id);\n-                if (matcher.find()) {\n-                    int index = id.indexOf('-');\n-                    Long startId = Long.valueOf(id.substring(0, index));\n-                    Long endId = Long.valueOf(id.substring(index + 1));\n-                    if (startId < endId) {\n-                        for (long i = startId; i <= endId; i++) {\n-                            Bundle bundle = getBundleContext().getBundle(i);\n-                            this.addBundle(bundle, id, force, bundles);\n-                        }\n-                    }\n-                    continue;\n-                }\n-\n-                Bundle bundle = null;\n-                int index = id.indexOf('/');\n-                List<Bundle> bundlesByName = null;\n-                if (index != -1) {\n-                    // user has provided name and version\n-                    bundlesByName = this.getBundleByNameAndVersion(id.substring(0, index), id.substring(index + 1));\n-                } else {\n-                    // user has provided only the name\n-                    bundlesByName = this.getBundleByName(id);\n-                }\n-                for (Bundle bundleByName : bundlesByName) {\n-                    this.addBundle(bundleByName, id, force, bundles);\n-                }\n-            }\n-\n-        }\n+        BundleSelector selector = new BundleSelector(getBundleContext(), session);      \n+        List<Bundle> bundles = selector.selectBundles(ids, force);\n         doExecute(bundles);\n         return null;\n     }\n-\n-    private void addBundle(Bundle bundle, String id, boolean force, List bundles) throws Exception {\n-        if (bundle == null) {\n-            // if the bundle is null here, it's because we didn't find it\n-            System.err.println(\"Bundle \" + id + \" is invalid\");\n-        } else {\n-            if (force || !Util.isASystemBundle(getBundleContext(), bundle) || Util.accessToSystemBundleIsAllowed(bundle.getBundleId(), session)) {\n-                bundles.add(bundle);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Get a bundle identified by an id number.\n-     *\n-     * @param id the id number.\n-     * @return the bundle or null if not found.\n-     */\n-    private Bundle getBundleById(String id) {\n-        Bundle bundle = null;\n-        try {\n-            long idNumber = Long.valueOf(id);\n-            bundle = getBundleContext().getBundle(idNumber);\n-        } catch (NumberFormatException nfe) {\n-            // ignore\n-        }\n-        return bundle;\n-    }\n-\n-    /**\n-     * Get a bundles list with the name or symbolic name matching the pattern.\n-     *\n-     * @param name the bundle name or symbolic name pattern to match.\n-     * @return the bundles list.\n-     */\n-    private List<Bundle> getBundleByName(String name) {\n-        return this.getBundleByNameAndVersion(name, null);\n-    }\n-\n-    /**\n-     * Get a bundles list with the name or symbolic name matching the name pattern and version matching the version pattern.\n-     *\n-     * @param name    the bundle name or symbolic name regex to match.\n-     * @param version the bundle version regex to match.\n-     * @return the bundles list.\n-     */\n-    private List<Bundle> getBundleByNameAndVersion(String name, String version) {\n-        Bundle[] bundles = getBundleContext().getBundles();\n-\n-        ArrayList<Bundle> result = new ArrayList<Bundle>();\n-\n-        Pattern namePattern = Pattern.compile(name);\n-\n-        for (int i = 0; i < bundles.length; i++) {\n-\n-            String bundleName = (String) bundles[i].getHeaders().get(Constants.BUNDLE_NAME);\n-            String bundleSymbolicName = bundles[i].getSymbolicName();\n-\n-            Matcher nameMatcher = namePattern.matcher(bundleName);\n-            Matcher symbolicNameMatcher = namePattern.matcher(bundleSymbolicName);\n-\n-            if (version != null) {\n-\n-                Pattern versionPattern = Pattern.compile(version);\n-\n-                String bundleVersion = (String) bundles[i].getHeaders().get(Constants.BUNDLE_VERSION);\n-                Matcher versionMatcher = versionPattern.matcher(bundleVersion);\n-\n-                if ((nameMatcher.find() || symbolicNameMatcher.find()) && versionMatcher.find()) {\n-                    result.add(bundles[i]);\n-                }\n-\n-            } else {\n-                if (nameMatcher.find() || symbolicNameMatcher.find()) {\n-                    result.add(bundles[i]);\n-                }\n-            }\n-        }\n-        return result;\n-    }\n-\n+      \n     protected abstract void doExecute(List<Bundle> bundles) throws Exception;\n }", "filename": "shell/osgi/src/main/java/org/apache/karaf/shell/osgi/BundlesCommand.java"}, {"additions": 11, "raw_url": "https://github.com/apache/karaf/raw/59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/BundlesCommandOptional.java", "blob_url": "https://github.com/apache/karaf/blob/59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/BundlesCommandOptional.java", "sha": "85ba12e4d7a6f3a33edf4463ec896cb9f919f823", "changes": 26, "status": "modified", "deletions": 15, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/BundlesCommandOptional.java?ref=59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a", "patch": "@@ -16,7 +16,6 @@\n  */\n package org.apache.karaf.shell.osgi;\n \n-import java.util.ArrayList;\n import java.util.List;\n \n import org.apache.felix.gogo.commands.Argument;\n@@ -25,30 +24,27 @@\n import org.osgi.framework.Bundle;\n \n public abstract class BundlesCommandOptional extends OsgiCommandSupport {\n-\n-    @Argument(index = 0, name = \"ids\", description = \"The list of bundle IDs separated by whitespaces\", required = false, multiValued = true)\n-    List<Long> ids;\n+    \n+    @Argument(index = 0, name = \"ids\", description = \"The list of bundle (identified by IDs or name or name/version) separated by whitespaces\", required = false, multiValued = true)\n+    List<String> ids;\n \n     @Option(name = \"--force\", aliases = {}, description = \"Forces the command to execute\", required = false, multiValued = false)\n     boolean force;\n \n     protected Object doExecute() throws Exception {\n-        List<Bundle> bundles = new ArrayList<Bundle>();\n+        List<Bundle> bundles = null;\n         if (ids != null && !ids.isEmpty()) {\n-            for (long id : ids) {\n-                Bundle bundle = getBundleContext().getBundle(id);\n-                if (bundle == null) {\n-                    System.err.println(\"Bundle ID\" + id + \" is invalid\");\n-                } else {\n-                    if (force || !Util.isASystemBundle(getBundleContext(), bundle) || Util.accessToSystemBundleIsAllowed(bundle.getBundleId(), session)) {\n-                        bundles.add(bundle);\n-                    }\n-                }\n-            }\n+            BundleSelector selector = new BundleSelector(getBundleContext(), session);      \n+            bundles = selector.selectBundles(ids, force);\n         }\n         doExecute(bundles);\n         return null;\n     }\n \n+    /**\n+     * \n+     * @param bundles null if no bundle ids or names were specified.\n+     * @throws Exception\n+     */\n     protected abstract void doExecute(List<Bundle> bundles) throws Exception;\n }", "filename": "shell/osgi/src/main/java/org/apache/karaf/shell/osgi/BundlesCommandOptional.java"}, {"additions": 10, "raw_url": "https://github.com/apache/karaf/raw/59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/Headers.java", "blob_url": "https://github.com/apache/karaf/blob/59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/Headers.java", "sha": "c3ccd5a5ec20899d043a339b091a76df4592eca6", "changes": 32, "status": "modified", "deletions": 22, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/Headers.java?ref=59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a", "patch": "@@ -26,23 +26,21 @@\n import java.util.Map;\n \n import jline.Terminal;\n-import org.apache.felix.gogo.commands.Argument;\n import org.apache.felix.gogo.commands.Command;\n import org.apache.felix.gogo.commands.Option;\n import org.apache.felix.utils.manifest.Attribute;\n import org.apache.felix.utils.manifest.Clause;\n import org.apache.felix.utils.manifest.Directive;\n import org.apache.felix.utils.manifest.Parser;\n import org.apache.felix.utils.version.VersionRange;\n-import org.apache.karaf.shell.console.OsgiCommandSupport;\n import org.fusesource.jansi.Ansi;\n import org.osgi.framework.Bundle;\n import org.osgi.framework.ServiceReference;\n import org.osgi.service.packageadmin.ExportedPackage;\n import org.osgi.service.packageadmin.PackageAdmin;\n \n @Command(scope = \"osgi\", name = \"headers\", description = \"Displays OSGi headers of a given bundle.\")\n-public class Headers extends OsgiCommandSupport {\n+public class Headers extends BundlesCommandOptional {\n \n     protected final static String BUNDLE_PREFIX = \"Bundle-\";\n     protected final static String PACKAGE_SUFFFIX = \"-Package\";\n@@ -56,44 +54,34 @@\n     @Option(name = \"--indent\", description = \"Indentation method\")\n     int indent = -1;\n \n-    @Argument(index = 0, name = \"ids\", description = \"A list of bundle IDs separated by whitespaces\", required = false, multiValued = true)\n-    List<Long> ids;\n-\n-    protected Object doExecute() throws Exception {\n+    protected void doExecute(List<Bundle> bundles) throws Exception {\n         // Get package admin service.\n         ref = getBundleContext().getServiceReference(PackageAdmin.class.getName());\n         if (ref == null) {\n             System.out.println(\"PackageAdmin service is unavailable.\");\n-            return null;\n+            return;\n         }\n \n         try {\n             admin = (PackageAdmin) getBundleContext().getService(ref);\n             if (admin == null) {\n                 System.out.println(\"PackageAdmin service is unavailable.\");\n-                return null;\n+                return;\n             }\n \n-            if (ids != null && !ids.isEmpty()) {\n-                for (long id : ids) {\n-                    Bundle bundle = getBundleContext().getBundle(id);\n-                    if (bundle != null) {\n-                        printHeaders(bundle);\n-                    } else {\n-                        System.err.println(\"Bundle ID \" + id + \" is invalid.\");\n-                    }\n+            if (bundles == null) {\n+                Bundle[] allBundles = getBundleContext().getBundles();\n+                for (int i = 0; i < allBundles.length; i++) {\n+                    printHeaders(allBundles[i]);\n                 }\n             } else {\n-                Bundle[] bundles = getBundleContext().getBundles();\n-                for (int i = 0; i < bundles.length; i++) {\n-                    printHeaders(bundles[i]);\n+                for (Bundle bundle : bundles) {\n+                    printHeaders(bundle);\n                 }\n             }\n         } finally {\n             getBundleContext().ungetService(ref);\n         }\n-\n-        return null;\n     }\n \n     protected void printHeaders(Bundle bundle) throws Exception {", "filename": "shell/osgi/src/main/java/org/apache/karaf/shell/osgi/Headers.java"}, {"additions": 10, "raw_url": "https://github.com/apache/karaf/raw/59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/Info.java", "blob_url": "https://github.com/apache/karaf/blob/59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/Info.java", "sha": "d101c2d1279466bed7f6c9150bc8b1c529a5a14b", "changes": 31, "status": "modified", "deletions": 21, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/Info.java?ref=59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a", "patch": "@@ -16,40 +16,29 @@\n  */\n package org.apache.karaf.shell.osgi;\n \n-import org.apache.felix.gogo.commands.Argument;\n-import org.apache.felix.gogo.commands.Command;\n-import org.apache.karaf.shell.console.OsgiCommandSupport;\n-import org.apache.karaf.util.StringEscapeUtils;\n-import org.osgi.framework.Bundle;\n-\n import java.io.BufferedReader;\n import java.io.InputStreamReader;\n import java.net.URL;\n import java.util.List;\n \n-@Command(scope = \"osgi\", name = \"info\", description = \"Displays detailed information of a given bundle.\")\n-public class Info extends OsgiCommandSupport {\n+import org.apache.felix.gogo.commands.Command;\n+import org.apache.karaf.util.StringEscapeUtils;\n+import org.osgi.framework.Bundle;\n \n-    @Argument(index = 0, name = \"ids\", description = \"A list of bundle IDs separated by whitespaces\", required = false, multiValued = true)\n-    List<Long> ids;\n+@Command(scope = \"osgi\", name = \"info\", description = \"Displays detailed information of a given bundle.\")\n+public class Info extends BundlesCommandOptional {\n \n-    protected Object doExecute() throws Exception {\n-        if (ids != null && !ids.isEmpty()) {\n-            for (long id : ids) {\n-                Bundle bundle = getBundleContext().getBundle(id);\n-                if (bundle != null) {\n-                    printInfo(bundle);\n-                } else {\n-                    System.err.println(\"Bundle ID \" + id + \" is invalid.\");\n-                }\n+    protected void doExecute(List<Bundle> bundles) throws Exception {\n+        if (bundles == null) {\n+            Bundle[] allBundles = getBundleContext().getBundles();\n+            for (int i = 0; i < allBundles.length; i++) {\n+                printInfo(allBundles[i]);\n             }\n         } else {\n-            Bundle[] bundles = getBundleContext().getBundles();\n             for (Bundle bundle : bundles) {\n                 printInfo(bundle);\n             }\n         }\n-        return null;\n     }\n \n     /**", "filename": "shell/osgi/src/main/java/org/apache/karaf/shell/osgi/Info.java"}, {"additions": 98, "raw_url": "https://github.com/apache/karaf/raw/59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/ListServices.java", "blob_url": "https://github.com/apache/karaf/blob/59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/ListServices.java", "sha": "591ae9846770a49e1cda96959f1cb2d14c8009c4", "changes": 232, "status": "modified", "deletions": 134, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/ListServices.java?ref=59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a", "patch": "@@ -18,159 +18,123 @@\n \n import java.util.List;\n \n-import org.apache.felix.service.command.Function;\n-import org.apache.karaf.shell.console.OsgiCommandSupport;\n-import org.apache.felix.gogo.commands.Argument;\n-import org.apache.felix.gogo.commands.Option;\n import org.apache.felix.gogo.commands.Command;\n+import org.apache.felix.gogo.commands.Option;\n+import org.apache.felix.service.command.Function;\n import org.osgi.framework.Bundle;\n import org.osgi.framework.ServiceReference;\n \n @Command(scope = \"osgi\", name = \"ls\", description = \"Lists OSGi services.\")\n-public class ListServices extends OsgiCommandSupport {\n+public class ListServices extends BundlesCommandOptional {\n \n     @Option(name = \"-a\", aliases = {}, description = \"Shows all services\", required = false, multiValued = false)\n     boolean showAll;\n \n     @Option(name = \"-u\", aliases = {}, description = \"Shows services which are in use\", required = false, multiValued = false)\n     boolean inUse;\n \n-    @Argument(index = 0, name = \"ids\", description = \"Show only services for the given bundle ids\", required = false, multiValued = true)\n-    List<Long> ids;\n-\n-    protected Object doExecute() throws Exception {\n-        if (ids != null && !ids.isEmpty()) {\n-            for (long id : ids) {\n-                Bundle bundle = getBundleContext().getBundle(id);\n-                if (bundle != null) {\n-                    boolean headerPrinted = false;\n-                    boolean needSeparator = false;\n-                    ServiceReference[] refs = null;\n-\n-                    // Get registered or in-use services.\n-                    if (inUse) {\n-                        refs = bundle.getServicesInUse();\n-                    } else {\n-                        refs = bundle.getRegisteredServices();\n-                    }\n-\n-                    // Print properties for each service.\n-                    for (int refIdx = 0;\n-                         (refs != null) && (refIdx < refs.length);\n-                         refIdx++) {\n-                        String[] objectClass = (String[])\n-                                refs[refIdx].getProperty(\"objectClass\");\n-\n-                        // Determine if we need to print the service, depending\n-                        // on whether it is a command service or not.\n-                        boolean print = true;\n-                        for (int ocIdx = 0;\n-                             !showAll && (ocIdx < objectClass.length);\n-                             ocIdx++) {\n-                            if (objectClass[ocIdx].equals(Function.class.getName())) {\n-                                print = false;\n-                            }\n-                        }\n-\n-                        // Print header if we have not already done so.\n-                        if (!headerPrinted) {\n-                            headerPrinted = true;\n-                            String title = Util.getBundleName(bundle);\n-                            title = (inUse)\n-                                    ? title + \" uses:\"\n-                                    : title + \" provides:\";\n-                            System.out.println(\"\");\n-                            System.out.println(title);\n-                            System.out.println(Util.getUnderlineString(title));\n-                        }\n-\n-                        if (showAll || print) {\n-                            // Print service separator if necessary.\n-                            if (needSeparator) {\n-                                System.out.println(\"----\");\n-                            }\n-\n-                            // Print service properties.\n-                            String[] keys = refs[refIdx].getPropertyKeys();\n-                            for (int keyIdx = 0;\n-                                 (keys != null) && (keyIdx < keys.length);\n-                                 keyIdx++) {\n-                                Object v = refs[refIdx].getProperty(keys[keyIdx]);\n-                                System.out.println(\n-                                        keys[keyIdx] + \" = \" + Util.getValueString(v));\n-                            }\n-\n-                            needSeparator = true;\n-                        }\n-                    }\n-                } else {\n-                    System.err.println(\"Bundle ID \" + id + \" is invalid.\");\n+    protected void doExecute(List<Bundle> bundles) throws Exception {\n+        if (bundles == null) {\n+            Bundle[] allBundles = getBundleContext().getBundles();\n+            for (int i = 0; i < allBundles.length; i++) {\n+                printServicesShort(allBundles[i]);\n+            }\n+        } else {\n+            for (Bundle bundle : bundles) {\n+                printServices(bundle);\n+            }\n+        }\n+    }\n+\n+    private void printServices(Bundle bundle) {\n+        boolean headerPrinted = false;\n+        boolean needSeparator = false;\n+        ServiceReference[] refs = null;\n+\n+        // Get registered or in-use services.\n+        if (inUse) {\n+            refs = bundle.getServicesInUse();\n+        } else {\n+            refs = bundle.getRegisteredServices();\n+        }\n+\n+        // Print properties for each service.\n+        for (int refIdx = 0; (refs != null) && (refIdx < refs.length); refIdx++) {\n+            String[] objectClass = (String[]) refs[refIdx].getProperty(\"objectClass\");\n+\n+            // Determine if we need to print the service, depending\n+            // on whether it is a command service or not.\n+            boolean print = true;\n+            for (int ocIdx = 0; !showAll && (ocIdx < objectClass.length); ocIdx++) {\n+                if (objectClass[ocIdx].equals(Function.class.getName())) {\n+                    print = false;\n+                }\n+            }\n+\n+            // Print header if we have not already done so.\n+            if (!headerPrinted) {\n+                headerPrinted = true;\n+                String title = Util.getBundleName(bundle);\n+                title = (inUse) ? title + \" uses:\" : title + \" provides:\";\n+                System.out.println(\"\");\n+                System.out.println(title);\n+                System.out.println(Util.getUnderlineString(title));\n+            }\n+\n+            if (showAll || print) {\n+                // Print service separator if necessary.\n+                if (needSeparator) {\n+                    System.out.println(\"----\");\n+                }\n+\n+                // Print service properties.\n+                String[] keys = refs[refIdx].getPropertyKeys();\n+                for (int keyIdx = 0; (keys != null) && (keyIdx < keys.length); keyIdx++) {\n+                    Object v = refs[refIdx].getProperty(keys[keyIdx]);\n+                    System.out.println(keys[keyIdx] + \" = \" + Util.getValueString(v));\n                 }\n+\n+                needSeparator = true;\n             }\n         }\n-        else\n-        {\n-            Bundle[] bundles = getBundleContext().getBundles();\n-            if (bundles != null)\n-            {\n-                // TODO: Sort list.\n-                for (int bundleIdx = 0; bundleIdx < bundles.length; bundleIdx++)\n-                {\n-                    boolean headerPrinted = false;\n-                    ServiceReference[] refs = null;\n-\n-                    // Get registered or in-use services.\n-                    if (inUse)\n-                    {\n-                        refs = bundles[bundleIdx].getServicesInUse();\n-                    }\n-                    else\n-                    {\n-                        refs = bundles[bundleIdx].getRegisteredServices();\n-                    }\n-\n-                    for (int refIdx = 0; (refs != null) && (refIdx < refs.length); refIdx++)\n-                    {\n-                        String[] objectClass = (String[])\n-                            refs[refIdx].getProperty(\"objectClass\");\n-\n-                        // Determine if we need to print the service, depending\n-                        // on whether it is a command service or not.\n-                        boolean print = true;\n-                        for (int ocIdx = 0;\n-                            !showAll && (ocIdx < objectClass.length);\n-                            ocIdx++)\n-                        {\n-                            if (objectClass[ocIdx].equals(Function.class.getName()))\n-                            {\n-                                print = false;\n-                            }\n-                        }\n-\n-                        // Print the service if necessary.\n-                        if (showAll || print)\n-                        {\n-                            if (!headerPrinted)\n-                            {\n-                                headerPrinted = true;\n-                                String title = Util.getBundleName(bundles[bundleIdx]);\n-                                title = (inUse)\n-                                    ? title + \" uses:\"\n-                                    : title + \" provides:\";\n-                                System.out.println(\"\\n\" + title);\n-                                System.out.println(Util.getUnderlineString(title));\n-                            }\n-                            System.out.println(Util.getValueString(objectClass));\n-                        }\n-                    }\n+    }\n+\n+    private void printServicesShort(Bundle bundle) {\n+        boolean headerPrinted = false;\n+        ServiceReference[] refs = null;\n+\n+        // Get registered or in-use services.\n+        if (inUse) {\n+            refs = bundle.getServicesInUse();\n+        } else {\n+            refs = bundle.getRegisteredServices();\n+        }\n+\n+        for (int refIdx = 0; (refs != null) && (refIdx < refs.length); refIdx++) {\n+            String[] objectClass = (String[]) refs[refIdx].getProperty(\"objectClass\");\n+\n+            // Determine if we need to print the service, depending\n+            // on whether it is a command service or not.\n+            boolean print = true;\n+            for (int ocIdx = 0; !showAll && (ocIdx < objectClass.length); ocIdx++) {\n+                if (objectClass[ocIdx].equals(Function.class.getName())) {\n+                    print = false;\n                 }\n             }\n-            else\n-            {\n-                System.out.println(\"There are no registered services.\");\n+\n+            // Print the service if necessary.\n+            if (showAll || print) {\n+                if (!headerPrinted) {\n+                    headerPrinted = true;\n+                    String title = Util.getBundleName(bundle);\n+                    title = (inUse) ? title + \" uses:\" : title + \" provides:\";\n+                    System.out.println(\"\\n\" + title);\n+                    System.out.println(Util.getUnderlineString(title));\n+                }\n+                System.out.println(Util.getValueString(objectClass));\n             }\n         }\n-        return null;\n+\n     }\n \n }", "filename": "shell/osgi/src/main/java/org/apache/karaf/shell/osgi/ListServices.java"}, {"additions": 2, "raw_url": "https://github.com/apache/karaf/raw/59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/RefreshBundle.java", "blob_url": "https://github.com/apache/karaf/blob/59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/RefreshBundle.java", "sha": "5c784e10a14cfa5ece055f7e74456fef90289477", "changes": 7, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/RefreshBundle.java?ref=59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a", "patch": "@@ -18,8 +18,6 @@\n \n import java.util.List;\n \n-import org.apache.karaf.shell.console.OsgiCommandSupport;\n-import org.apache.felix.gogo.commands.Argument;\n import org.apache.felix.gogo.commands.Command;\n import org.osgi.framework.Bundle;\n import org.osgi.framework.ServiceReference;\n@@ -41,10 +39,9 @@ protected void doExecute(List<Bundle> bundles) throws Exception {\n                 System.out.println(\"PackageAdmin service is unavailable.\");\n                 return;\n             }\n-            if (bundles.isEmpty()) {\n+            if (bundles == null) {\n                 pa.refreshPackages(null);\n-            }\n-            else {\n+            } else {\n                 pa.refreshPackages(bundles.toArray(new Bundle[bundles.size()]));\n             }\n         }", "filename": "shell/osgi/src/main/java/org/apache/karaf/shell/osgi/RefreshBundle.java"}, {"additions": 1, "raw_url": "https://github.com/apache/karaf/raw/59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/ResolveBundle.java", "blob_url": "https://github.com/apache/karaf/blob/59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/ResolveBundle.java", "sha": "45853e3d488511c409c39bfff74821daa742f90f", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/osgi/src/main/java/org/apache/karaf/shell/osgi/ResolveBundle.java?ref=59a8a8b1c1dd6ad53fd96644f4d020250e3cc48a", "patch": "@@ -39,7 +39,7 @@ protected void doExecute(List<Bundle> bundles) throws Exception {\n                 System.out.println(\"PackageAdmin service is unavailable.\");\n                 return;\n             }\n-            if (bundles.isEmpty()) {\n+            if (bundles == null) {\n                 pa.resolveBundles(null);\n             } else {\n                 pa.resolveBundles(bundles.toArray(new Bundle[bundles.size()]));", "filename": "shell/osgi/src/main/java/org/apache/karaf/shell/osgi/ResolveBundle.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/ecb31a0cb33f46e57542222ad13e34eaf1ce27ac", "parent": "https://github.com/apache/karaf/commit/2b1a607e1954e14463cc197ce14c281d801ecb06", "message": "[KARAF-391] Revert the commited patch as we can have NPE during features-to-repo goal. We need to review the patch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1059848 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_86", "file": [{"additions": 35, "raw_url": "https://github.com/apache/karaf/raw/ecb31a0cb33f46e57542222ad13e34eaf1ce27ac/tooling/features-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AddFeaturesToRepoMojo.java", "blob_url": "https://github.com/apache/karaf/blob/ecb31a0cb33f46e57542222ad13e34eaf1ce27ac/tooling/features-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AddFeaturesToRepoMojo.java", "sha": "5d160146b3b9b963f887dbf7956aae8d408ac25a", "changes": 107, "status": "modified", "deletions": 72, "contents_url": "https://api.github.com/repos/apache/karaf/contents/tooling/features-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AddFeaturesToRepoMojo.java?ref=ecb31a0cb33f46e57542222ad13e34eaf1ce27ac", "patch": "@@ -26,7 +26,6 @@\n import java.io.InputStream;\n import java.net.URI;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Hashtable;\n@@ -39,9 +38,6 @@\n import javax.xml.parsers.ParserConfigurationException;\n \n import org.apache.maven.artifact.Artifact;\n-import org.apache.maven.artifact.repository.ArtifactRepository;\n-import org.apache.maven.artifact.repository.DefaultArtifactRepository;\n-import org.apache.maven.artifact.repository.layout.DefaultRepositoryLayout;\n import org.apache.maven.artifact.resolver.ArtifactNotFoundException;\n import org.apache.maven.artifact.resolver.ArtifactResolutionException;\n import org.apache.maven.plugin.MojoExecutionException;\n@@ -140,9 +136,6 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n                     bundles.addAll(featuresMap.get(feature).getConfigFiles());\n                 }\n             }\n-            \n-            // bundles with explicitely specified remote repos. key -> bundle, value -> remote repo\n-            Map<String, ArtifactRepository> explicitRepoBundles = new HashMap<String, ArtifactRepository>();\n \n             getLog().info(\"Base repo: \" + localRepo.getUrl());\n             for (String bundle : bundles) {\n@@ -178,30 +171,42 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n                 if (index3 > 0) {\n                 \tbundle = bundle.substring(0, index3);\n                 }\n-                if (index1 > 0 || index2 > 0 || endIndex > 0 || index3 > 0)\n-                \tgetLog().debug(\"Bundle URL truncated: \"+bundle);\n-\n-                String bundleDescriptor = bundle.substring(\"mvn:\".length());\n-                //check if the bundle descriptor contains also remote repository information.\n-                if(bundleDescriptor.startsWith(\"http://\")) {\n-                \tfinal int repoDelimIntex = bundleDescriptor.indexOf('!');\n-                \tString repoUrl = bundleDescriptor.substring(0, repoDelimIntex);\n-\n-                \tArtifactRepository repo = new DefaultArtifactRepository(\n-                \t\t\trepoUrl,\n-                \t\t\trepoUrl,\n-                \t\t\tnew DefaultRepositoryLayout());\n-                \tbundleDescriptor = bundleDescriptor.substring(repoDelimIntex + 1);\n-\n-                \texplicitRepoBundles.put(bundleDescriptor, repo);\n-                \tcontinue;\n+\n+                String[] parts = bundle.substring(\"mvn:\".length()).split(\"/\");\n+                String groupId = parts[0];\n+                String artifactId = parts[1];\n+                String version = null;\n+                String classifier = null;\n+                String type = \"jar\";\n+                if (parts.length > 2) {\n+                    version = parts[2];\n+                    if (parts.length > 3) {\n+                        type = parts[3];\n+                        if (parts.length > 4) {\n+                            classifier = parts[4];\n+                        }\n+                    }\n+                }\n+                String dir = groupId.replace('.', '/') + \"/\" + artifactId + \"/\" + version + \"/\";\n+                String name = artifactId + \"-\" + version + (classifier != null ? \"-\" + classifier : \"\") + \".\" + type;\n+\n+                Artifact artifact;\n+                try {\n+                    artifact = factory.createArtifactWithClassifier(groupId, artifactId, version, type, classifier);\n+                    getLog().info(\"Copying bundle: \" + bundle);\n+                    resolver.resolve(artifact, remoteRepos, localRepo);\n+                    copy(new FileInputStream(artifact.getFile()), repository, name, dir, new byte[8192]);\n+                } catch (ArtifactResolutionException e) {\n+                    if (failOnArtifactResolutionError) {\n+                        throw new MojoFailureException(\"Can't resolve bundle \" + bundle, e);\n+                    }\n+                    getLog().error(\"Can't resolve bundle \" + bundle, e);\n+                } catch (ArtifactNotFoundException e) {\n+                    if (failOnArtifactResolutionError) {\n+                        throw new MojoFailureException(\"Can't resolve bundle \" + bundle, e);\n+                    }\n+                    getLog().error(\"Can't resolve bundle \" + bundle, e);\n                 }\n-                //bundle URL without repository information are resolved now\n-                resolveBundle(bundle, remoteRepos);\n-            }\n-            // resolving all bundles with explicitly specified remote repository\n-            for(Map.Entry<String, ArtifactRepository> explicitBundle : explicitRepoBundles.entrySet()) {\n-                resolveBundle(explicitBundle.getKey(), Collections.singletonList(explicitBundle.getValue()));\n             }\n             if (copyFileBasedDescriptors != null) {\n                 for (CopyFileBasedDescriptor fileBasedDescritpor : copyFileBasedDescriptors) {\n@@ -220,48 +225,6 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n             throw new MojoExecutionException(\"Error populating repository\", e);\n         }\n     }\n-    \n-    // resolves the bundle in question \n-    private void resolveBundle(String bundle, List<ArtifactRepository> remoteRepos) throws IOException, MojoFailureException {\n-    \tString[] parts = bundle.split(\"/\");\n-    \tString groupId = parts[0];\n-    \tString artifactId = parts[1];\n-    \tString version = null;\n-    \tString classifier = null;\n-    \tString type = \"jar\";\n-    \tif (parts.length > 2) {\n-    \t\tversion = parts[2];\n-    \t\tif (parts.length > 3) {\n-    \t\t\ttype = parts[3];\n-    \t\t\tif (parts.length > 4) {\n-    \t\t\t\tclassifier = parts[4];\n-    \t\t\t}\n-    \t\t}\n-    \t}\n-    \tString dir = groupId.replace('.', '/') + \"/\" + artifactId + \"/\" + version + \"/\";\n-    \tString name = artifactId + \"-\" + version + (classifier != null ? \"-\" + classifier : \"\") + \".\" + type;\n-\n-    \tArtifact artifact = factory.createArtifactWithClassifier(groupId, artifactId, version, type, classifier);\n-    \ttry {\n-    \t\tgetLog().info(\"Copying bundle: \" + bundle);\n-    \t\tresolver.resolve(artifact, remoteRepos, localRepo);\n-    \t\tcopy(new FileInputStream(artifact.getFile()),\n-    \t\t\t\trepository,\n-    \t\t\t\tname,\n-    \t\t\t\tdir,\n-    \t\t\t\tnew byte[8192]);\n-    \t} catch (ArtifactResolutionException e) {\n-    \t\tif (failOnArtifactResolutionError) {\n-    \t\t\tthrow new MojoFailureException(\"Can't resolve bundle \" + bundle, e);\n-    \t\t}\n-    \t\tgetLog().error(\"Can't resolve bundle \" + bundle, e);\n-    \t} catch (ArtifactNotFoundException e) {\n-    \t\tif (failOnArtifactResolutionError) {\n-    \t\t\tthrow new MojoFailureException(\"Can't resolve bundle \" + bundle, e);\n-    \t\t}\n-    \t\tgetLog().error(\"Can't resolve bundle \" + bundle, e);\n-    \t}\n-    }\n \n     private void addFeatures(List<String> features, Set<String> featuresBundles, Set<String> transitiveFeatures, Map<String, Feature> featuresMap) {\n         for (String feature : features) {", "filename": "tooling/features-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AddFeaturesToRepoMojo.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/8263abe51985988e9eaf259500b936103048b857", "parent": "https://github.com/apache/karaf/commit/5a2fd3b1e9501106347dc62748987b9a648850e4", "message": "FELIX-2169: Improve dev:show-tree performance and avoid NPE when no matching export is found\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk/karaf@918963 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_87", "file": [{"additions": 9, "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/assembly/src/main/descriptors/unix-bin.xml", "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/assembly/src/main/descriptors/unix-bin.xml", "sha": "d148c4803ed48977ed06e9273ed84adacd51c664", "changes": 9, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/assembly/src/main/descriptors/unix-bin.xml?ref=8263abe51985988e9eaf259500b936103048b857", "patch": "@@ -170,6 +170,15 @@\n                 <include>org.ops4j.pax.url:pax-url-wrap</include>\n             </includes>\n         </dependencySet>\n+       <dependencySet>\n+            <outputDirectory>/system</outputDirectory>\n+            <unpack>false</unpack>\n+            <useProjectArtifact>false</useProjectArtifact>\n+            <outputFileNameMapping>org/apache/felix/karaf/${artifact.artifactId}/${artifact.baseVersion}/${artifact.artifactId}-${artifact.baseVersion}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>\n+            <includes>\n+                <include>org.apache.felix.karaf:org.apache.felix.karaf.commons</include>\n+            </includes>\n+        </dependencySet>\n         <dependencySet>\n             <outputDirectory>/system</outputDirectory>\n             <unpack>false</unpack>", "filename": "assembly/src/main/descriptors/unix-bin.xml"}, {"additions": 9, "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/assembly/src/main/descriptors/windows-bin.xml", "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/assembly/src/main/descriptors/windows-bin.xml", "sha": "995eed193ac1f1de3781a198b35d2e452e3cb2ed", "changes": 9, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/assembly/src/main/descriptors/windows-bin.xml?ref=8263abe51985988e9eaf259500b936103048b857", "patch": "@@ -162,6 +162,15 @@\n                 <include>org.ops4j.pax.url:pax-url-wrap</include>\n             </includes>\n         </dependencySet>\n+        <dependencySet>\n+            <outputDirectory>/system</outputDirectory>\n+            <unpack>false</unpack>\n+            <useProjectArtifact>false</useProjectArtifact>\n+            <outputFileNameMapping>org/apache/felix/karaf/${artifact.artifactId}/${artifact.baseVersion}/${artifact.artifactId}-${artifact.baseVersion}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>\n+            <includes>\n+                <include>org.apache.felix.karaf:org.apache.felix.karaf.commons</include>\n+            </includes>\n+        </dependencySet>\n         <dependencySet>\n             <outputDirectory>/system</outputDirectory>\n             <unpack>false</unpack>", "filename": "assembly/src/main/descriptors/windows-bin.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/assembly/src/main/filtered-resources/etc/startup.properties", "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/assembly/src/main/filtered-resources/etc/startup.properties", "sha": "63c3cd0ada9fbdd813a46ca3073eb7674d6f6c35", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/assembly/src/main/filtered-resources/etc/startup.properties?ref=8263abe51985988e9eaf259500b936103048b857", "patch": "@@ -36,6 +36,7 @@ org/apache/felix/org.apache.felix.fileinstall/${felix.fileinstall.version}/org.a\n #\n org/apache/aries/blueprint/org.apache.aries.blueprint/${aries.blueprint.version}/org.apache.aries.blueprint-${aries.blueprint.version}.jar=20\n \n+org/apache/felix/karaf/org.apache.felix.karaf.commons/${pom.version}/org.apache.felix.karaf.commons-${pom.version}.jar=30\n org/apache/felix/gogo/org.apache.felix.gogo.runtime/${felix.gogo.version}/org.apache.felix.gogo.runtime-${felix.gogo.version}.jar=30\n org/apache/felix/karaf/shell/org.apache.felix.karaf.shell.console/${pom.version}/org.apache.felix.karaf.shell.console-${pom.version}.jar=30\n org/apache/felix/karaf/deployer/org.apache.felix.karaf.deployer.spring/${pom.version}/org.apache.felix.karaf.deployer.spring-${pom.version}.jar=30", "filename": "assembly/src/main/filtered-resources/etc/startup.properties"}, {"additions": 70, "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/commons/pom.xml", "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/commons/pom.xml", "sha": "f491e69987d42efbf384deaf9c91e7c00cf25048", "changes": 70, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/commons/pom.xml?ref=8263abe51985988e9eaf259500b936103048b857", "patch": "@@ -0,0 +1,70 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <!--\n+\n+      Licensed to the Apache Software Foundation (ASF) under one or more\n+      contributor license agreements.  See the NOTICE file distributed with\n+      this work for additional information regarding copyright ownership.\n+      The ASF licenses this file to You under the Apache License, Version 2.0\n+      (the \"License\"); you may not use this file except in compliance with\n+      the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+      Unless required by applicable law or agreed to in writing, software\n+      distributed under the License is distributed on an \"AS IS\" BASIS,\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+      See the License for the specific language governing permissions and\n+      limitations under the License.\n+  -->\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <artifactId>karaf</artifactId>\n+    <groupId>org.apache.felix.karaf</groupId>\n+    <version>1.5.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <groupId>org.apache.felix.karaf</groupId>\n+  <artifactId>org.apache.felix.karaf.commons</artifactId>\n+  <version>1.5.0-SNAPSHOT</version>\n+  <packaging>bundle</packaging>\n+  <name>Apache Felix Karaf :: Commons</name>\n+\n+  <properties>\n+    <appendedResourcesDirectory>${basedir}/../etc/appended-resources</appendedResourcesDirectory>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.felix</groupId>\n+      <artifactId>org.osgi.core</artifactId>\n+      <scope>provided</scope>\n+    </dependency>    \n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.felix</groupId>\n+        <artifactId>maven-bundle-plugin</artifactId>\n+        <configuration>\n+          <instructions>\n+            <Bundle-SymbolicName>${pom.artifactId}</Bundle-SymbolicName>\n+            <Export-Package>${pom.artifactId}*;version=${project.version}</Export-Package>\n+            <Import-Package>\n+                !${pom.artifactId}*,\n+                *\n+            </Import-Package>\n+            <_versionpolicy>${bnd.version.policy}</_versionpolicy>\n+          </instructions>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+\n+</project>\n\\ No newline at end of file", "filename": "commons/pom.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/commons/src/main/java/org/apache/felix/karaf/commons/osgi/VersionRange.java", "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/commons/src/main/java/org/apache/felix/karaf/commons/osgi/VersionRange.java", "previous_filename": "features/core/src/main/java/org/apache/felix/karaf/features/internal/VersionRange.java", "sha": "47045deefc36bc8e74695906c9d4c1ed449d59e6", "changes": 2, "status": "renamed", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/commons/src/main/java/org/apache/felix/karaf/commons/osgi/VersionRange.java?ref=8263abe51985988e9eaf259500b936103048b857", "patch": "@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.felix.karaf.features.internal;\n+package org.apache.felix.karaf.commons.osgi;\n \n import org.osgi.framework.Version;\n ", "filename": "commons/src/main/java/org/apache/felix/karaf/commons/osgi/VersionRange.java"}, {"additions": 5, "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/features/core/pom.xml", "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/features/core/pom.xml", "sha": "58c19ea8d6d1a27ea7583e686f44345523574d90", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/pom.xml?ref=8263abe51985988e9eaf259500b936103048b857", "patch": "@@ -54,6 +54,11 @@\n             <artifactId>org.apache.felix.bundlerepository</artifactId>\n         </dependency>\n \n+        <dependency>\n+            <groupId>org.apache.felix.karaf</groupId>\n+            <artifactId>org.apache.felix.karaf.commons</artifactId>\n+        </dependency>\n+\n         <dependency>\n             <groupId>org.apache.felix.karaf.shell</groupId>\n             <artifactId>org.apache.felix.karaf.shell.console</artifactId>", "filename": "features/core/pom.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java", "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java", "sha": "5bbf00067fdb2e6fd50fbf9612df1f1f2e4c0abc", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java?ref=8263abe51985988e9eaf259500b936103048b857", "patch": "@@ -40,6 +40,7 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import org.apache.felix.karaf.commons.osgi.VersionRange;\n import org.apache.felix.karaf.features.FeaturesService;\n import org.apache.felix.karaf.features.Feature;\n import org.apache.felix.karaf.features.Repository;", "filename": "features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java"}, {"additions": 6, "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/pom.xml", "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/pom.xml", "sha": "88eeb5cd6b2c98fd5ec18dcd938a887f9218067e", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/pom.xml?ref=8263abe51985988e9eaf259500b936103048b857", "patch": "@@ -35,6 +35,7 @@\n \n     <modules>\n         <module>main</module>\n+        <module>commons</module>\n         <module>features</module>\n         <module>admin</module>\n         <module>deployer</module>\n@@ -170,6 +171,11 @@\n                 <artifactId>org.apache.felix.karaf.client</artifactId>\n                 <version>${pom.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>org.apache.felix.karaf</groupId>\n+                <artifactId>org.apache.felix.karaf.commons</artifactId>\n+                <version>${pom.version}</version>\n+            </dependency>\n             <dependency>\n                 <groupId>org.apache.felix.karaf.deployer</groupId>\n                 <artifactId>org.apache.felix.karaf.deployer.spring</artifactId>", "filename": "pom.xml"}, {"additions": 5, "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/shell/dev/pom.xml", "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/shell/dev/pom.xml", "sha": "406df26f0c3b83d47c8713cead0a2d20e5a2b693", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/dev/pom.xml?ref=8263abe51985988e9eaf259500b936103048b857", "patch": "@@ -36,6 +36,11 @@\n         <artifactId>org.apache.felix.karaf.shell.console</artifactId>\n     </dependency>\n \n+    <dependency>\n+        <groupId>org.apache.felix.karaf</groupId>\n+        <artifactId>org.apache.felix.karaf.commons</artifactId>\n+    </dependency>\n+\n     <dependency>\n         <groupId>org.ops4j.pax.url</groupId>\n         <artifactId>pax-url-wrap</artifactId>", "filename": "shell/dev/pom.xml"}, {"additions": 51, "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/ShowBundleTree.java", "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/ShowBundleTree.java", "sha": "c46127489156039713eb3df35b37155dedf70c47", "changes": 74, "status": "modified", "deletions": 23, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/ShowBundleTree.java?ref=8263abe51985988e9eaf259500b936103048b857", "patch": "@@ -48,16 +48,19 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(ShowBundleTree.class);\n \n-    // a cache of all exported packages\n-    private ExportedPackage[] allExportedPackages;\n+    private Tree<Bundle> tree;\n \n     @Override\n     protected void doExecute(Bundle bundle) throws Exception {\n+        long start = System.currentTimeMillis();\n         // let's do the real work here\n         printHeader(bundle);\n-        Tree<Bundle> tree = createTree(bundle);\n+        tree = new Tree<Bundle>(bundle);\n+        createTree(bundle);\n         printTree(tree);\n         printDuplicatePackages(tree);\n+        LOGGER.debug(format(\"Dependency tree calculated in %d ms\",\n+                            System.currentTimeMillis() - start));\n     }\n \n     /*\n@@ -119,44 +122,69 @@ private void printDuplicatePackages(Tree<Bundle> tree) {\n     /*\n      * Creates the bundle tree\n      */\n-    protected Tree<Bundle> createTree(Bundle bundle) {\n-        Tree<Bundle> tree = new Tree<Bundle>(bundle);\n-        Set<Bundle> trail = new HashSet<Bundle>();\n+    protected void createTree(Bundle bundle) {\n         if (bundle.getState() >= Bundle.RESOLVED) {\n-            createNode(tree, trail);\n+            createNode(tree);\n         } else {\n-            for (Import i : Import.parse(String.valueOf(bundle.getHeaders().get(\"Import-Package\")))) {\n-                for (ExportedPackage ep : getPackageAdmin().getExportedPackages(i.getPackage())) {\n-                    if (ep.getVersion().compareTo(i.getVersion()) >= 0) {\n-                        if (!bundle.equals(ep.getExportingBundle())) {\n-                            Node child = tree.addChild(ep.getExportingBundle());\n-                            System.out.printf(\"- using %s to resolve import %s%n\", ep.getExportingBundle(), i);\n-                            createNode(child, trail);\n-                        }\n+            createNodesForImports(tree, bundle);\n+        }\n+    }\n+\n+    /*\n+     * Creates nodes for the imports of the bundle (instead of reporting wiring information\n+     */\n+    private void createNodesForImports(Node node, Bundle bundle) {\n+        for (Import i : Import.parse(String.valueOf(bundle.getHeaders().get(\"Import-Package\")),\n+                                     String.valueOf(bundle.getHeaders().get(\"Export-Package\")))) {\n+            createNodeForImport(node, bundle, i);\n+        }\n+    }\n+\n+    /*\n+     * Create a child node for a given import (by finding a matching export in the currently installed bundles)\n+     */\n+    private void createNodeForImport(Node node, Bundle bundle, Import i) {\n+        ExportedPackage[] exporters = getPackageAdmin().getExportedPackages(i.getPackage());\n+        boolean foundMatch = false;\n+        if (exporters != null) {\n+            for (ExportedPackage ep : exporters) {\n+                if (i.getVersion().isInRange(ep.getVersion())) {\n+                    if (bundle.equals(ep.getExportingBundle())) {\n+                        foundMatch = true;\n+                    } else {\n+                        Node child = node.addChild(ep.getExportingBundle());\n+                        System.out.printf(\"- import %s: resolved using %s%n\", i, ep.getExportingBundle());\n+                        foundMatch = true;\n+                        createNode(child);\n                     }\n                 }\n             }\n         }\n-        return tree;\n+        if (!foundMatch) {\n+            System.out.printf(\"- import %s: WARNING - unable to find matching export%n\", i);            \n+        }\n     }\n \n     /*\n      * Creates a node in the bundle tree\n      */\n-    private void createNode(Node<Bundle> node, Set<Bundle> trail) {\n+    private void createNode(Node<Bundle> node) {\n         Bundle bundle = node.getValue();\n         Collection<Bundle> exporters = new HashSet<Bundle>();\n         exporters.addAll(getWiredBundles(bundle).values());\n \n         for (Bundle exporter : exporters) {\n-            if (trail.contains(exporter)) {\n-                LOGGER.debug(format(\"Skipping %s because it already exists in the current tree branch\", exporter));\n+            if (node.hasAncestor(exporter)) {                \n+                LOGGER.debug(format(\"Skipping %s (already exists in the current branch)\", exporter));\n             } else {\n-                trail.add(exporter);\n-                Node child = node.addChild(exporter);\n+                boolean existing = tree.flatten().contains(exporter);\n                 LOGGER.debug(format(\"Adding %s as a dependency for %s\", exporter, bundle));\n-                createNode(child, trail);\n-                trail.remove(exporter);\n+                Node child = node.addChild(exporter);\n+                if (existing) {\n+                    LOGGER.debug(format(\"Skipping children of %s (already exists in another branch)\", exporter));\n+                } else {\n+                    createNode(child);\n+                }\n             }\n         }\n     }", "filename": "shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/ShowBundleTree.java"}, {"additions": 67, "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Import.java", "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Import.java", "sha": "321570773787d56e6cdc918b4b7993696fd407aa", "changes": 80, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Import.java?ref=8263abe51985988e9eaf259500b936103048b857", "patch": "@@ -19,15 +19,15 @@\n import java.util.LinkedList;\n import java.util.List;\n \n-import org.osgi.framework.Version;\n+import org.apache.felix.karaf.commons.osgi.VersionRange;\n \n /**\n  * Simple class to model an OSGi Import-Package\n  */\n public class Import {\n \n     private final String packageName;\n-    private final Version version;\n+    private final VersionRange version;\n     private final String value;\n \n     /**\n@@ -38,28 +38,24 @@\n     protected Import(String value) {\n         super();\n         this.value = value;\n-        if (value.contains(\";\")) {\n-            this.packageName = value.split(\";\")[0];\n-        } else {\n-            this.packageName = value;\n-        }\n+        this.packageName = extractPackageName(value);\n         if (value.contains(\"version=\")) {\n             this.version = extractVersion(value);\n         } else {\n-            this.version = Version.emptyVersion;\n+            this.version = VersionRange.infiniteRange;\n         }\n     }\n \n     /*\n      * Extract the version from the string\n      */\n-    private Version extractVersion(String value) {\n+    private VersionRange extractVersion(String value) {\n         int begin = value.indexOf(\"version=\") + 8;\n         int end = value.indexOf(\";\", begin);\n         if (end < 0) {\n-            return Version.parseVersion(unquote(value.substring(begin)));\n+            return VersionRange.parse(unquote(value.substring(begin)));\n         } else {\n-            return Version.parseVersion(unquote(value.substring(begin, end)));\n+            return VersionRange.parse(unquote(value.substring(begin, end)));\n         }\n     }\n \n@@ -74,7 +70,7 @@ public String getPackage() {\n         return packageName;  \n     }\n \n-    public Version getVersion() {\n+    public VersionRange getVersion() {\n         return version;\n     }\n \n@@ -89,9 +85,67 @@ public String toString() {\n      */\n     public static List<Import> parse(String value) {\n         LinkedList<Import> imports = new LinkedList<Import>();\n-        for (String imp : value.split(\",\")) {\n+        for (String imp : split(value)) {\n             imports.add(new Import(imp));\n         }\n         return imports;\n     }\n+\n+    /**\n+     * Parse the value of an Import-Package META-INF header and return\n+     * a list of Import instances, filtering out packages that are in the\n+     * Export-Package META-INF header\n+     *\n+     * @param importValue the value of the Import-Package header\n+     * @param exportValue the value of the Export-Package header\n+     */\n+    public static List<Import> parse(String importValue, String exportValue) {\n+        LinkedList<String> exports = new LinkedList<String>();\n+        for (String exp : split(exportValue)) {\n+            exports.add(extractPackageName(exp));\n+        }\n+        LinkedList<Import> imports = new LinkedList<Import>();\n+        for (Import imp : parse(importValue)) {\n+            if (!exports.contains(imp.getPackage())) {\n+                imports.add(imp);\n+            }\n+        }\n+        return imports;\n+    }\n+\n+    /*\n+     * Extract the package name from the value\n+     * e.g. org.apache.felix.karaf;version=\"1.x\" -> org.apache.felix.karaf\n+     */\n+    private static String extractPackageName(String value) {\n+        if (value.contains(\";\")) {\n+            return value.split(\";\")[0];\n+        } else {\n+            return value;\n+        }\n+    }\n+\n+    /*\n+     * Counts the number of quotes in a String value\n+     */\n+    private static int quotes(String value) {\n+        return value.replaceAll(\"[^\\\"]\", \"\").length();\n+    }\n+\n+    /*\n+     * Split the OSGi headers on the , symbol\n+     */\n+    private static List<String> split(String value) {\n+        List<String> result = new LinkedList<String>();\n+        String[] elements = value.split(\",\");\n+        for (int i = 0; i < elements.length ; i++) {\n+            if (quotes(elements[i]) % 2 == 1) {\n+                // we probably split a version range, so joining it again with the next element\n+                result.add(elements[i] + \",\" + elements[++i]);\n+            } else {\n+                result.add(elements[i]);\n+            }\n+        }\n+        return result;\n+    }\n }", "filename": "shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Import.java"}, {"additions": 14, "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Node.java", "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Node.java", "sha": "b266fe4cab76df6335706672e0310c71a435f531", "changes": 14, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Node.java?ref=8263abe51985988e9eaf259500b936103048b857", "patch": "@@ -93,6 +93,20 @@ public Node addChild(T value) {\n         return result;\n     }\n \n+    /**\n+     * Check if the node has an ancestor that represents the given value\n+     *\n+     * @param value the node value\n+     * @return <code>true</code> it there's an ancestor that represents the value\n+     */\n+    public boolean hasAncestor(T value) {\n+        if (parent == null) {\n+            return false;\n+        } else {\n+            return value.equals(parent.value) || parent.hasAncestor(value);\n+        }\n+    }\n+\n     /*\n      * Write this node to the PrintWriter.  It should be indented one step\n      * further for every element in the indents array.  If an element in the", "filename": "shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Node.java"}, {"additions": 21, "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/ImportTest.java", "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/ImportTest.java", "sha": "8a2aa14234f8d2d6c4a3555786462c574a0dc83f", "changes": 23, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/ImportTest.java?ref=8263abe51985988e9eaf259500b936103048b857", "patch": "@@ -20,8 +20,9 @@\n \n import static junit.framework.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n+\n+import org.apache.felix.karaf.commons.osgi.VersionRange;\n import org.junit.Test;\n-import org.osgi.framework.Version;\n \n /**\n  * Test cases for {@link org.apache.felix.karaf.shell.dev.util.Import}\n@@ -38,7 +39,7 @@ public void createWithPackageName() {\n     public void createWithPackageNameAndVersion() {\n         Import i = new Import(\"org.wip.bar;version=\\\"2.0.0\\\"\");\n         assertEquals(\"org.wip.bar\", i.getPackage());\n-        assertEquals(new Version(\"2.0.0\"), i.getVersion());\n+        assertEquals(VersionRange.parse(\"2.0.0\"), i.getVersion());\n     }\n \n     @Test\n@@ -49,4 +50,22 @@ public void createListOfImports() {\n         assertEquals(\"org.wip.bar\", imports.get(0).getPackage());\n         assertEquals(\"org.wip.foo\", imports.get(1).getPackage());\n     }\n+\n+    @Test\n+    public void createListOfImportsWithVersionRanges() {\n+        List<Import> imports =\n+                Import.parse(\"javax.activation;version=\\\"[0.0,2)\\\",javax.annotation;version=\\\"[0.0,2)\\\"\");\n+        assertNotNull(imports);\n+        assertEquals(2, imports.size());\n+        assertEquals(\"javax.activation\", imports.get(0).getPackage());\n+        assertEquals(\"javax.annotation\", imports.get(1).getPackage());\n+    }\n+\n+    @Test\n+    public void createListOfImportsWithExports() {\n+        List<Import> imports = Import.parse(\"org.wip.bar;version=\\\"2.0.0\\\",org.wip.foo\", \"org.wip.bar;version=\\\"2.0.0\\\"\");\n+        assertNotNull(imports);\n+        assertEquals(1, imports.size());\n+        assertEquals(\"org.wip.foo\", imports.get(0).getPackage());\n+    }\n }", "filename": "shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/ImportTest.java"}, {"additions": 14, "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/TreeTest.java", "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/TreeTest.java", "sha": "c11e2c36c84b6d57225720552221ec8112bc54ff", "changes": 14, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/TreeTest.java?ref=8263abe51985988e9eaf259500b936103048b857", "patch": "@@ -24,6 +24,7 @@\n import java.util.Set;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n import org.junit.Test;\n@@ -108,6 +109,19 @@ public void flattenTree() throws IOException {\n         assertTrue(elements.contains(\"grandchild\"));\n     }\n \n+    @Test\n+    public void hasAncestor() throws IOException {\n+        Tree<String> tree = new Tree<String>(\"root\");\n+        Node<String> child1 = tree.addChild(\"child1\");\n+        child1.addChild(\"grandchild\");\n+        Node child2 = tree.addChild(\"child2\");\n+        Node node = child2.addChild(\"grandchild2\");\n+\n+        assertTrue(node.hasAncestor(\"child2\"));\n+        assertTrue(node.hasAncestor(\"root\"));\n+        assertFalse(node.hasAncestor(\"child1\"));\n+    }\n+\n     private BufferedReader read(Tree<String> tree) {\n         StringWriter writer = new StringWriter();\n         tree.write(new PrintWriter(writer));", "filename": "shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/TreeTest.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/a2789e10b9204cbd269de4e1ec1965ddffa3750d", "parent": "https://github.com/apache/karaf/commit/c8ed4402cfa36c0e30790b9db5ea68dea9fcba7f", "message": "FELIX-1932: Ensure that a missing reference in an itest gets logged without throwing NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk/karaf@888961 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_88", "file": [{"additions": 38, "raw_url": "https://github.com/apache/karaf/raw/a2789e10b9204cbd269de4e1ec1965ddffa3750d/itests/src/test/java/org/apache/felix/karaf/shell/itests/AbstractIntegrationTest.java", "blob_url": "https://github.com/apache/karaf/blob/a2789e10b9204cbd269de4e1ec1965ddffa3750d/itests/src/test/java/org/apache/felix/karaf/shell/itests/AbstractIntegrationTest.java", "sha": "950a6609d5518a13431a2a305d91d7d3c4f9760b", "changes": 44, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/karaf/contents/itests/src/test/java/org/apache/felix/karaf/shell/itests/AbstractIntegrationTest.java?ref=a2789e10b9204cbd269de4e1ec1965ddffa3750d", "patch": "@@ -16,7 +16,11 @@\n  */\n package org.apache.felix.karaf.shell.itests;\n \n+import java.util.Collection;\n import java.util.Dictionary;\n+import java.util.Enumeration;\n+import java.util.LinkedList;\n+import java.util.List;\n \n import org.ops4j.pax.exam.CoreOptions;\n import org.ops4j.pax.exam.Inject;\n@@ -65,15 +69,14 @@\n             // This is buggy, as the service reference may change i think\n             Object svc = type.cast(tracker.waitForService(timeout));\n             if (svc == null) {\n-\n                 Dictionary dic = bundleContext.getBundle().getHeaders();\n-                System.err.println(\"Test bundle headers: \" + dic);\n-                ServiceReference[] refs = bundleContext.getAllServiceReferences(null, null);\n-                for (ServiceReference ref : refs) {\n+                System.err.println(\"Test bundle headers: \" + explode(dic));\n+\n+                for (ServiceReference ref : asCollection(bundleContext.getAllServiceReferences(null, null))) {\n                     System.err.println(\"ServiceReference: \" + ref);\n                 }\n-                refs = bundleContext.getAllServiceReferences(null, flt);\n-                for (ServiceReference ref : refs) {\n+\n+                for (ServiceReference ref : asCollection(bundleContext.getAllServiceReferences(null, flt))) {\n                     System.err.println(\"Filtered ServiceReference: \" + ref);\n                 }\n \n@@ -105,4 +108,33 @@ public static MavenArtifactProvisionOption mavenBundle(String groupId, String ar\n         return CoreOptions.mavenBundle().groupId(groupId).artifactId(artifactId).versionAsInProject();\n     }\n \n+    /*\n+     * Explode the dictionary into a ,-delimited list of key=value pairs\n+     */\n+    private static String explode(Dictionary dictionary) {\n+        Enumeration keys = dictionary.keys();\n+        StringBuffer result = new StringBuffer();\n+        while (keys.hasMoreElements()) {\n+            Object key = keys.nextElement();\n+            result.append(String.format(\"%s=%s\", key, dictionary.get(key)));\n+            if (keys.hasMoreElements()) {\n+                result.append(\", \");\n+            }\n+        }\n+        return result.toString();\n+    }\n+\n+    /*\n+     * Provides an iterable collection of references, even if the original array is null\n+     */\n+    private static final Collection<ServiceReference> asCollection(ServiceReference[] references) {\n+        List<ServiceReference> result = new LinkedList<ServiceReference>();\n+        if (references != null) {\n+            for (ServiceReference reference : references) {\n+                result.add(reference);\n+            }\n+        }\n+        return result;\n+    }\n+\n }", "filename": "itests/src/test/java/org/apache/felix/karaf/shell/itests/AbstractIntegrationTest.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/e1689c08414e44a6f2c8a16d7ba90c63ca402cb7", "parent": "https://github.com/apache/karaf/commit/1ef3e8e2768a4ec66d17a21e75c63054645154d3", "message": "SMX4KNL-181: osgi/install -s throws a NPE if the bundle can not be resolved\n\ngit-svn-id: https://svn.apache.org/repos/asf/servicemix/smx4/kernel/trunk@743268 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_89", "file": [{"additions": 1, "raw_url": "https://github.com/apache/karaf/raw/e1689c08414e44a6f2c8a16d7ba90c63ca402cb7/gshell/gshell-osgi/src/main/java/org/apache/servicemix/kernel/gshell/osgi/InstallBundle.java", "blob_url": "https://github.com/apache/karaf/blob/e1689c08414e44a6f2c8a16d7ba90c63ca402cb7/gshell/gshell-osgi/src/main/java/org/apache/servicemix/kernel/gshell/osgi/InstallBundle.java", "sha": "ad8d526280449929c62569b4721678a5ec0da4fd", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/gshell/gshell-osgi/src/main/java/org/apache/servicemix/kernel/gshell/osgi/InstallBundle.java?ref=e1689c08414e44a6f2c8a16d7ba90c63ca402cb7", "patch": "@@ -39,8 +39,8 @@ protected Object doExecute() throws Exception {\n         StringBuffer sb = new StringBuffer();\n         for (String url : urls) {\n             Bundle bundle = install(url, io.out, io.err);\n-            bundles.add(bundle);\n             if (bundle != null) {\n+                bundles.add(bundle);\n                 if (sb.length() > 0) {\n                     sb.append(\", \");\n                 }", "filename": "gshell/gshell-osgi/src/main/java/org/apache/servicemix/kernel/gshell/osgi/InstallBundle.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/1f25e3e35bd516be4a51ab04e2c30b5d3480027b", "parent": "https://github.com/apache/karaf/commit/1619bac73a4e44d8d1c68043675a22cd4b19c384", "message": "Rename logger to LOGGER, avoid possible NPE when closing the jar and add an exception log\n\ngit-svn-id: https://svn.apache.org/repos/asf/servicemix/smx4/kernel/trunk@631303 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_90", "file": [{"additions": 24, "raw_url": "https://github.com/apache/karaf/raw/1f25e3e35bd516be4a51ab04e2c30b5d3480027b/filemonitor/src/main/java/org/apache/servicemix/kernel/filemonitor/FileMonitor.java", "blob_url": "https://github.com/apache/karaf/blob/1f25e3e35bd516be4a51ab04e2c30b5d3480027b/filemonitor/src/main/java/org/apache/servicemix/kernel/filemonitor/FileMonitor.java", "sha": "3f5568941282b32f7f1f100d15d9c9fb1a739f76", "changes": 43, "status": "modified", "deletions": 19, "contents_url": "https://api.github.com/repos/apache/karaf/contents/filemonitor/src/main/java/org/apache/servicemix/kernel/filemonitor/FileMonitor.java?ref=1f25e3e35bd516be4a51ab04e2c30b5d3480027b", "patch": "@@ -67,8 +67,11 @@\n     public final static String DEPLOY_DIR = \"org.apache.servicemix.filemonitor.monitorDir\";\n     public final static String GENERATED_JAR_DIR = \"org.apache.servicemix.filemonitor.generatedJarDir\";\n     public final static String SCAN_INTERVAL = \"org.apache.servicemix.filemonitor.scanInterval\";\n+\n     protected static final String ALIAS_KEY = \"_alias_factory_pid\";\n-    private static Log logger = LogFactory.getLog(FileMonitor.class);\n+\n+    private static final Log LOGGER = LogFactory.getLog(FileMonitor.class);\n+\n     private FileMonitorActivator activator;\n     private File configDir = new File(\"./etc\");\n     private File deployDir = new File(\"./deploy\");\n@@ -130,11 +133,11 @@ public void filesChanged(List<String> filenames) throws Exception {\n             }\n         });\n \n-        logger.info(\"Starting to monitor the deploy directory: \" + deployDir + \" every \" + scanInterval + \" millis\");\n+        LOGGER.info(\"Starting to monitor the deploy directory: \" + deployDir + \" every \" + scanInterval + \" millis\");\n         if (configDir != null) {\n-            logger.info(\"Config directory is at: \" + configDir);\n+            LOGGER.info(\"Config directory is at: \" + configDir);\n         }\n-        logger.info(\"Will generate bundles from expanded source directories to: \" + generateDir);\n+        LOGGER.info(\"Will generate bundles from expanded source directories to: \" + generateDir);\n \n         scanner.start();\n     }\n@@ -212,7 +215,7 @@ protected synchronized void onFilesChanged(Collection<String> filenames) {\n \n             File file = new File(name);\n             try {\n-                logger.debug(\"File changed: \" + filename + \" with type: \" + filename.getClass().getName());\n+                LOGGER.debug(\"File changed: \" + filename + \" with type: \" + filename.getClass().getName());\n \n                 // Handle config files\n                 if (isValidConfigFile(file)) {\n@@ -251,7 +254,7 @@ protected synchronized void onFilesChanged(Collection<String> filenames) {\n                 if (file.exists()) {\n                     File f = transformArtifact(file);\n                     if (f == null) {\n-                        logger.warn(\"Unsupported deployment: \" + name);\n+                        LOGGER.warn(\"Unsupported deployment: \" + name);\n                         reschedule(file);\n                         continue;\n                     }\n@@ -277,7 +280,7 @@ protected synchronized void onFilesChanged(Collection<String> filenames) {\n                 }\n             }\n             catch (Exception e) {\n-                logger.warn(\"Failed to process: \" + file + \". Reason: \" + e, e);\n+                LOGGER.warn(\"Failed to process: \" + file + \". Reason: \" + e, e);\n             }\n         }\n         refreshPackagesAndStartOrUpdateBundles();\n@@ -333,15 +336,17 @@ private File transformArtifact(File file) throws Exception {\n                 return file;\n             }\n         } catch (Exception e) {\n-            // Ignore\n+            LOGGER.debug(\"Error transforming artifact\", e);\n         } finally {\n-            jar.close();\n+            if (jar != null) {\n+                jar.close();\n+            }\n         }\n         return null;\n \t}\n \n     protected void deployBundle(File file) throws IOException, BundleException {\n-        logger.info(\"Deloying: \" + file.getCanonicalPath());\n+        LOGGER.info(\"Deloying: \" + file.getCanonicalPath());\n \n         InputStream in = new FileInputStream(file);\n \n@@ -364,11 +369,11 @@ protected void deployBundle(File file) throws IOException, BundleException {\n     }\n \n     protected void undeployBundle(File file) throws BundleException, IOException {\n-        logger.info(\"Undeploying: \" + file.getCanonicalPath());\n+        LOGGER.info(\"Undeploying: \" + file.getCanonicalPath());\n         Bundle bundle = getBundleForJarFile(file);\n \n         if (bundle == null) {\n-            logger.warn(\"Could not find Bundle for file: \" + file.getCanonicalPath());\n+            LOGGER.warn(\"Could not find Bundle for file: \" + file.getCanonicalPath());\n         }\n         else {\n             changedBundles.add(bundle);\n@@ -394,7 +399,7 @@ protected void updateConfiguration(File file) throws IOException, InvalidSyntaxE\n         ConfigurationAdmin configurationAdmin = activator.getConfigurationAdmin();\n         if (configurationAdmin == null) {\n             if (!loggedConfigAdminWarning) {\n-                logger.warn(\"No ConfigurationAdmin so cannot deploy configurations\");\n+                LOGGER.warn(\"No ConfigurationAdmin so cannot deploy configurations\");\n                 loggedConfigAdminWarning = true;\n             }\n         }\n@@ -492,20 +497,20 @@ protected void refreshPackagesAndStartOrUpdateBundles() {\n         for (Bundle bundle : bundlesToUpdate) {\n             try {\n                 bundle.update();\n-                logger.info(\"Updated: \" + bundle);\n+                LOGGER.info(\"Updated: \" + bundle);\n \n             }\n             catch (BundleException e) {\n-                logger.warn(\"Failed to update bundle: \" + bundle + \". Reason: \" + e, e);\n+                LOGGER.warn(\"Failed to update bundle: \" + bundle + \". Reason: \" + e, e);\n             }\n         }\n         for (Bundle bundle : bundlesToStart) {\n             try {\n                 bundle.start();\n-                logger.info(\"Started: \" + bundle);\n+                LOGGER.info(\"Started: \" + bundle);\n             }\n             catch (BundleException e) {\n-                logger.warn(\"Failed to start bundle: \" + bundle + \". Reason: \" + e, e);\n+                LOGGER.warn(\"Failed to start bundle: \" + bundle + \". Reason: \" + e, e);\n             }\n         }\n     }\n@@ -518,7 +523,7 @@ protected File createBundleJar(File dir) throws BundleException, IOException {\n             undeployBundle(destFile);\n             destFile.delete();\n         }\n-        logger.info(\"Creating jar:  \" + destFile + \" from dir: \" + dir);\n+        LOGGER.info(\"Creating jar:  \" + destFile + \" from dir: \" + dir);\n         jar.setDestFile(destFile);\n         jar.setManifest(new File(new File(dir, \"META-INF\"), \"MANIFEST.MF\"));\n         jar.setBasedir(dir);\n@@ -631,7 +636,7 @@ protected void closeQuietly(Closeable in) {\n             in.close();\n         }\n         catch (IOException e) {\n-            logger.warn(\"Failed to close stream. \" + e, e);\n+            LOGGER.warn(\"Failed to close stream. \" + e, e);\n         }\n     }\n ", "filename": "filemonitor/src/main/java/org/apache/servicemix/kernel/filemonitor/FileMonitor.java"}, {"additions": 1, "raw_url": "https://github.com/apache/karaf/raw/1f25e3e35bd516be4a51ab04e2c30b5d3480027b/pom.xml", "blob_url": "https://github.com/apache/karaf/blob/1f25e3e35bd516be4a51ab04e2c30b5d3480027b/pom.xml", "sha": "52b664d4d6cc557573ea0baf01670a2a9f0e943e", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/karaf/contents/pom.xml?ref=1f25e3e35bd516be4a51ab04e2c30b5d3480027b", "patch": "@@ -69,7 +69,7 @@\n       <felix.configadmin.version>0.9.0-r605854</felix.configadmin.version>\n       <felix.main.version>1.1.0-r605854</felix.main.version>\n       <felix.plugin.version>1.2.0</felix.plugin.version>\n-      <felix.framework.version>1.1.0-r605854-patched</felix.framework.version>\n+      <felix.framework.version>1.1.0-SNAPSHOT</felix.framework.version>\n       <felix.osgi.version>1.0.0</felix.osgi.version>\n       <felix.compendium.version>1.0.0</felix.compendium.version>\n       <felix.bundlerepository.version>1.1.0-r605854</felix.bundlerepository.version>", "filename": "pom.xml"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/0a245d9842bae5d480b7bb818e6b4df3c67b2a3e", "parent": "https://github.com/apache/karaf/commit/562786895e3a740022e1920cf90f077db7396779", "message": "[KARAF-391] [KARAF-393] - Ability to use features-maven-plugin:add-features-to-repo with explicitly specified remote maven repositories, patch provided by Sergey Zhemzhitsky. \nSecond try without NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1060580 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_91", "file": [{"additions": 72, "raw_url": "https://github.com/apache/karaf/raw/0a245d9842bae5d480b7bb818e6b4df3c67b2a3e/tooling/features-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AddFeaturesToRepoMojo.java", "blob_url": "https://github.com/apache/karaf/blob/0a245d9842bae5d480b7bb818e6b4df3c67b2a3e/tooling/features-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AddFeaturesToRepoMojo.java", "sha": "d14aa3d9e94e26296b55206477a5960c2162c162", "changes": 107, "status": "modified", "deletions": 35, "contents_url": "https://api.github.com/repos/apache/karaf/contents/tooling/features-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AddFeaturesToRepoMojo.java?ref=0a245d9842bae5d480b7bb818e6b4df3c67b2a3e", "patch": "@@ -26,6 +26,7 @@\n import java.io.InputStream;\n import java.net.URI;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Hashtable;\n@@ -38,6 +39,9 @@\n import javax.xml.parsers.ParserConfigurationException;\n \n import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.DefaultArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.DefaultRepositoryLayout;\n import org.apache.maven.artifact.resolver.ArtifactNotFoundException;\n import org.apache.maven.artifact.resolver.ArtifactResolutionException;\n import org.apache.maven.plugin.MojoExecutionException;\n@@ -136,6 +140,9 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n                     bundles.addAll(featuresMap.get(feature).getConfigFiles());\n                 }\n             }\n+            \n+            // bundles with explicitely specified remote repos. key -> bundle, value -> remote repo\n+            Map<String, ArtifactRepository> explicitRepoBundles = new HashMap<String, ArtifactRepository>();\n \n             getLog().info(\"Base repo: \" + localRepo.getUrl());\n             for (String bundle : bundles) {\n@@ -171,42 +178,30 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n                 if (index3 > 0) {\n                 \tbundle = bundle.substring(0, index3);\n                 }\n-\n-                String[] parts = bundle.substring(\"mvn:\".length()).split(\"/\");\n-                String groupId = parts[0];\n-                String artifactId = parts[1];\n-                String version = null;\n-                String classifier = null;\n-                String type = \"jar\";\n-                if (parts.length > 2) {\n-                    version = parts[2];\n-                    if (parts.length > 3) {\n-                        type = parts[3];\n-                        if (parts.length > 4) {\n-                            classifier = parts[4];\n-                        }\n-                    }\n-                }\n-                String dir = groupId.replace('.', '/') + \"/\" + artifactId + \"/\" + version + \"/\";\n-                String name = artifactId + \"-\" + version + (classifier != null ? \"-\" + classifier : \"\") + \".\" + type;\n-\n-                Artifact artifact;\n-                try {\n-                    artifact = factory.createArtifactWithClassifier(groupId, artifactId, version, type, classifier);\n-                    getLog().info(\"Copying bundle: \" + bundle);\n-                    resolver.resolve(artifact, remoteRepos, localRepo);\n-                    copy(new FileInputStream(artifact.getFile()), repository, name, dir, new byte[8192]);\n-                } catch (ArtifactResolutionException e) {\n-                    if (failOnArtifactResolutionError) {\n-                        throw new MojoFailureException(\"Can't resolve bundle \" + bundle, e);\n-                    }\n-                    getLog().error(\"Can't resolve bundle \" + bundle, e);\n-                } catch (ArtifactNotFoundException e) {\n-                    if (failOnArtifactResolutionError) {\n-                        throw new MojoFailureException(\"Can't resolve bundle \" + bundle, e);\n-                    }\n-                    getLog().error(\"Can't resolve bundle \" + bundle, e);\n+                if (index1 > 0 || index2 > 0 || endIndex > 0 || index3 > 0)\n+                \tgetLog().debug(\"Bundle URL truncated: \"+bundle);\n+\n+                String bundleDescriptor = bundle.substring(\"mvn:\".length());\n+                //check if the bundle descriptor contains also remote repository information.\n+                if(bundleDescriptor.startsWith(\"http://\")) {\n+                \tfinal int repoDelimIntex = bundleDescriptor.indexOf('!');\n+                \tString repoUrl = bundleDescriptor.substring(0, repoDelimIntex);\n+\n+                \tArtifactRepository repo = new DefaultArtifactRepository(\n+                \t\t\trepoUrl,\n+                \t\t\trepoUrl,\n+                \t\t\tnew DefaultRepositoryLayout());\n+                \tbundleDescriptor = bundleDescriptor.substring(repoDelimIntex + 1);\n+\n+                \texplicitRepoBundles.put(bundleDescriptor, repo);\n+                \tcontinue;\n                 }\n+                //bundle URL without repository information are resolved now\n+                resolveBundle(bundleDescriptor, remoteRepos);\n+            }\n+            // resolving all bundles with explicitly specified remote repository\n+            for(Map.Entry<String, ArtifactRepository> explicitBundle : explicitRepoBundles.entrySet()) {\n+                resolveBundle(explicitBundle.getKey(), Collections.singletonList(explicitBundle.getValue()));\n             }\n             if (copyFileBasedDescriptors != null) {\n                 for (CopyFileBasedDescriptor fileBasedDescritpor : copyFileBasedDescriptors) {\n@@ -225,6 +220,48 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n             throw new MojoExecutionException(\"Error populating repository\", e);\n         }\n     }\n+    \n+    // resolves the bundle in question \n+    private void resolveBundle(String bundle, List<ArtifactRepository> remoteRepos) throws IOException, MojoFailureException {\n+    \tString[] parts = bundle.split(\"/\");\n+    \tString groupId = parts[0];\n+    \tString artifactId = parts[1];\n+    \tString version = null;\n+    \tString classifier = null;\n+    \tString type = \"jar\";\n+    \tif (parts.length > 2) {\n+    \t\tversion = parts[2];\n+    \t\tif (parts.length > 3) {\n+    \t\t\ttype = parts[3];\n+    \t\t\tif (parts.length > 4) {\n+    \t\t\t\tclassifier = parts[4];\n+    \t\t\t}\n+    \t\t}\n+    \t}\n+    \tString dir = groupId.replace('.', '/') + \"/\" + artifactId + \"/\" + version + \"/\";\n+    \tString name = artifactId + \"-\" + version + (classifier != null ? \"-\" + classifier : \"\") + \".\" + type;\n+\n+    \tArtifact artifact = factory.createArtifactWithClassifier(groupId, artifactId, version, type, classifier);\n+    \ttry {\n+    \t\tgetLog().info(\"Copying bundle: \" + bundle);\n+    \t\tresolver.resolve(artifact, remoteRepos, localRepo);\n+    \t\tcopy(new FileInputStream(artifact.getFile()),\n+    \t\t\t\trepository,\n+    \t\t\t\tname,\n+    \t\t\t\tdir,\n+    \t\t\t\tnew byte[8192]);\n+    \t} catch (ArtifactResolutionException e) {\n+    \t\tif (failOnArtifactResolutionError) {\n+    \t\t\tthrow new MojoFailureException(\"Can't resolve bundle \" + bundle, e);\n+    \t\t}\n+    \t\tgetLog().error(\"Can't resolve bundle \" + bundle, e);\n+    \t} catch (ArtifactNotFoundException e) {\n+    \t\tif (failOnArtifactResolutionError) {\n+    \t\t\tthrow new MojoFailureException(\"Can't resolve bundle \" + bundle, e);\n+    \t\t}\n+    \t\tgetLog().error(\"Can't resolve bundle \" + bundle, e);\n+    \t}\n+    }\n \n     private void addFeatures(List<String> features, Set<String> featuresBundles, Set<String> transitiveFeatures, Map<String, Feature> featuresMap) {\n         for (String feature : features) {", "filename": "tooling/features-maven-plugin/src/main/java/org/apache/karaf/tooling/features/AddFeaturesToRepoMojo.java"}], "repo": "karaf"}, {"commit": "https://github.com/apache/karaf/commit/a8562f09711da32f0094d4edaf77377c16277118", "parent": "https://github.com/apache/karaf/commit/0605a289bc98a0d1dbde2b9b98052c4c23a4d3bc", "message": "KARAF-133: NPE when installing a bundle with a MANIFEST.MF not in the first entry of the zip\nPatch provided by Ioannis Canellos\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@985818 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "karaf_92", "file": [{"additions": 3, "raw_url": "https://github.com/apache/karaf/raw/a8562f09711da32f0094d4edaf77377c16277118/features/core/src/main/java/org/apache/karaf/features/internal/FeaturesServiceImpl.java", "blob_url": "https://github.com/apache/karaf/blob/a8562f09711da32f0094d4edaf77377c16277118/features/core/src/main/java/org/apache/karaf/features/internal/FeaturesServiceImpl.java", "sha": "8e971a894b421d1f7f1385408310d4a562d42b6e", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/FeaturesServiceImpl.java?ref=a8562f09711da32f0094d4edaf77377c16277118", "patch": "@@ -557,6 +557,9 @@ protected Bundle installBundleIfNeeded(InstallationState state, BundleInfo bundl\n             is.mark(256 * 1024);\n             JarInputStream jar = new JarInputStream(is);\n             Manifest m = jar.getManifest();\n+            if(m == null) {\n+                throw new BundleException(\"Manifest not present in the first entry of the zip\");\n+            }\n             String sn = m.getMainAttributes().getValue(Constants.BUNDLE_SYMBOLICNAME);\n             String vStr = m.getMainAttributes().getValue(Constants.BUNDLE_VERSION);\n             Version v = vStr == null ? Version.emptyVersion : Version.parseVersion(vStr);", "filename": "features/core/src/main/java/org/apache/karaf/features/internal/FeaturesServiceImpl.java"}], "repo": "karaf"}]
