[
    {
        "commit": "https://github.com/apache/bookkeeper/commit/5902ee27be2fb7eeade53f5e8e4afd3fe573ad5c",
        "file": [
            {
                "patch": "@@ -21,6 +21,7 @@\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.Lists;\n+import io.netty.util.ReferenceCountUtil;\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Enumeration;\n@@ -800,7 +801,7 @@ private void readEntriesFromReadAheadCache(PendingReadRequest nextRequest) {\n                         return;\n                     }\n                 } finally {\n-                    removedEntry.release();\n+                    ReferenceCountUtil.safeRelease(removedEntry);\n                 }\n             } else if (skipBrokenEntries && BKException.Code.DigestMatchException == entry.getRc()) {\n                 // skip this entry and move forward",
                "additions": 2,
                "raw_url": "https://github.com/apache/bookkeeper/raw/5902ee27be2fb7eeade53f5e8e4afd3fe573ad5c/stream/distributedlog/core/src/main/java/org/apache/distributedlog/impl/logsegment/BKLogSegmentEntryReader.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "f414bf4555521862126e49d8ba83ec33db90ff1a",
                "blob_url": "https://github.com/apache/bookkeeper/blob/5902ee27be2fb7eeade53f5e8e4afd3fe573ad5c/stream/distributedlog/core/src/main/java/org/apache/distributedlog/impl/logsegment/BKLogSegmentEntryReader.java",
                "filename": "stream/distributedlog/core/src/main/java/org/apache/distributedlog/impl/logsegment/BKLogSegmentEntryReader.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/stream/distributedlog/core/src/main/java/org/apache/distributedlog/impl/logsegment/BKLogSegmentEntryReader.java?ref=5902ee27be2fb7eeade53f5e8e4afd3fe573ad5c"
            }
        ],
        "bug_id": "bookkeeper_1",
        "parent": "https://github.com/apache/bookkeeper/commit/6aa73ce050feb247f491a489a42f6e3db09961cf",
        "message": "fix potential NPE when releasing entry that is null\n\nDescriptions of the changes in this PR:\r\n\r\n### Motivation\r\nA interrupt exception can occur during the poll operation of the blocking and cause a NPE to be thrown\r\n\r\n### Changes\r\nCheck if entry is null before trying to release it\r\n\n\nReviewers: Ivan Kelly <ivank@apache.org>, Sijie Guo <sijie@apache.org>, Matteo Merli <mmerli@apache.org>\n\nThis closes #1998 from jerrypeng/fix_NPE",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/70d7153a3cbe1aaa03c3f2a2f3946ee1964b9f47",
        "file": [
            {
                "patch": "@@ -130,7 +130,8 @@ private static boolean shouldRetryOnException(Throwable cause) {\n       () -> fromListenableFuture(\n         locationService.getStorageContainerEndpoint(request),\n         GetStorageContainerEndpointsFunction),\n-      scheduler);\n+      scheduler,\n+      request);\n   }\n \n   @Override",
                "additions": 2,
                "raw_url": "https://github.com/apache/bookkeeper/raw/70d7153a3cbe1aaa03c3f2a2f3946ee1964b9f47/clients/java/base/src/main/java/org/apache/distributedlog/clients/impl/internal/LocationClientImpl.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "e745cfbc1a8f54f0f23b97229d03dbbe5e0114c8",
                "blob_url": "https://github.com/apache/bookkeeper/blob/70d7153a3cbe1aaa03c3f2a2f3946ee1964b9f47/clients/java/base/src/main/java/org/apache/distributedlog/clients/impl/internal/LocationClientImpl.java",
                "filename": "clients/java/base/src/main/java/org/apache/distributedlog/clients/impl/internal/LocationClientImpl.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/clients/java/base/src/main/java/org/apache/distributedlog/clients/impl/internal/LocationClientImpl.java?ref=70d7153a3cbe1aaa03c3f2a2f3946ee1964b9f47"
            }
        ],
        "bug_id": "bookkeeper_2",
        "parent": "https://github.com/apache/bookkeeper/commit/039084947d1af19d4d1e01e8ac94bf10ba007ace",
        "message": "Fix NPE on LocalClientImpl",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/f0757e9ac643d6f36a11be4065d163437180cb7e",
        "file": [
            {
                "patch": "@@ -876,17 +876,18 @@ private void writeAndFlush(final Channel channel,\n         try {\n             final long startTime = MathUtils.nowInNano();\n             ChannelFuture future = channel.writeAndFlush(request);\n-            future.addListener(new ChannelFutureListener() {\n-                @Override\n-                public void operationComplete(ChannelFuture future) throws Exception {\n-                    if (future.isSuccess()) {\n-                        nettyOpLogger.registerSuccessfulEvent(MathUtils.elapsedNanos(startTime),\n-                                TimeUnit.NANOSECONDS);\n-                        completionObjects.get(key).setOutstanding();\n-                    } else {\n-                        nettyOpLogger.registerFailedEvent(MathUtils.elapsedNanos(startTime),\n-                                TimeUnit.NANOSECONDS);\n+            future.addListener(future1 -> {\n+                if (future1.isSuccess()) {\n+                    nettyOpLogger.registerSuccessfulEvent(MathUtils.elapsedNanos(startTime),\n+                            TimeUnit.NANOSECONDS);\n+                    CompletionValue completion = completionObjects.get(key);\n+                    if (completion != null) {\n+                        completion.setOutstanding();\n                     }\n+\n+                } else {\n+                    nettyOpLogger.registerFailedEvent(MathUtils.elapsedNanos(startTime),\n+                            TimeUnit.NANOSECONDS);\n                 }\n             });\n         } catch (Throwable e) {",
                "additions": 11,
                "raw_url": "https://github.com/apache/bookkeeper/raw/f0757e9ac643d6f36a11be4065d163437180cb7e/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "status": "modified",
                "changes": 21,
                "deletions": 10,
                "sha": "440239f1913dcf63affecaea80779f6c403b72df",
                "blob_url": "https://github.com/apache/bookkeeper/blob/f0757e9ac643d6f36a11be4065d163437180cb7e/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=f0757e9ac643d6f36a11be4065d163437180cb7e"
            }
        ],
        "bug_id": "bookkeeper_3",
        "parent": "https://github.com/apache/bookkeeper/commit/e3d47ae14a0140b10a6303ecfddbcba66ce90933",
        "message": "Issue #1241: Fixed NPE in PerChannelBookieClient\n\nThe `CompletionValue` object from the map can be null in some cases and we need to protect for it.\n\nFixes #1241\n\nAuthor: Matteo Merli <mmerli@apache.org>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nThis closes #1242 from merlimat/fix-npe, closes #1241",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/1d4cc71fd77ab803a3ebec5a8e7f1b8f51de92c9",
        "file": [
            {
                "patch": "@@ -85,6 +85,7 @@\n import org.apache.bookkeeper.tools.cli.commands.bookie.LedgerCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.ListFilesOnDiscCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.ListLedgersCommand;\n+import org.apache.bookkeeper.tools.cli.commands.bookie.LocalConsistencyCheckCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.ReadJournalCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.ReadLedgerCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.ReadLogCommand;\n@@ -961,21 +962,9 @@ Options getOptions() {\n \n         @Override\n         public int runCmd(CommandLine cmdLine) throws Exception {\n-            LOG.info(\"=== Performing local consistency check ===\");\n-            ServerConfiguration conf = new ServerConfiguration(bkConf);\n-            LedgerStorage ledgerStorage = Bookie.mountLedgerStorageOffline(conf, null);\n-            List <LedgerStorage.DetectedInconsistency> errors = ledgerStorage.localConsistencyCheck(\n-                    java.util.Optional.empty());\n-            if (errors.size() > 0) {\n-                LOG.info(\"=== Check returned errors: ===\");\n-                for (LedgerStorage.DetectedInconsistency error : errors) {\n-                    LOG.error(\"Ledger {}, entry {}: \", error.getLedgerId(), error.getEntryId(), error.getException());\n-                }\n-                return 1;\n-            } else {\n-                LOG.info(\"=== Check passed ===\");\n-                return 0;\n-            }\n+            LocalConsistencyCheckCommand cmd = new LocalConsistencyCheckCommand();\n+            boolean result = cmd.apply(bkConf, new CliFlags());\n+            return (result) ? 0 : 1;\n         }\n \n         @Override",
                "additions": 4,
                "raw_url": "https://github.com/apache/bookkeeper/raw/1d4cc71fd77ab803a3ebec5a8e7f1b8f51de92c9/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java",
                "status": "modified",
                "changes": 19,
                "deletions": 15,
                "sha": "9d2bba6f59189bae00ea8835722df06fe1956f46",
                "blob_url": "https://github.com/apache/bookkeeper/blob/1d4cc71fd77ab803a3ebec5a8e7f1b8f51de92c9/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java?ref=1d4cc71fd77ab803a3ebec5a8e7f1b8f51de92c9"
            },
            {
                "patch": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.bookkeeper.tools.cli.commands.bookie;\n+\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.bookkeeper.bookie.Bookie;\n+import org.apache.bookkeeper.bookie.LedgerStorage;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.tools.cli.helpers.BookieCommand;\n+import org.apache.bookkeeper.tools.framework.CliFlags;\n+import org.apache.bookkeeper.tools.framework.CliSpec;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Command to check local storage for inconsistencies.\n+ */\n+public class LocalConsistencyCheckCommand extends BookieCommand<CliFlags> {\n+\n+    static final Logger LOG = LoggerFactory.getLogger(LocalConsistencyCheckCommand.class);\n+\n+    private static final String NAME = \"localconsistencycheck\";\n+    private static final String DESC = \"Validate Ledger Storage internal metadata\";\n+\n+    public LocalConsistencyCheckCommand() {\n+        super(CliSpec.newBuilder()\n+                     .withName(NAME)\n+                     .withDescription(DESC)\n+                     .withFlags(new CliFlags())\n+                     .build());\n+    }\n+\n+    @Override\n+    public boolean apply(ServerConfiguration conf, CliFlags cmdFlags) {\n+        try {\n+            return check(conf);\n+        } catch (IOException e) {\n+            throw new UncheckedExecutionException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private boolean check(ServerConfiguration conf) throws IOException {\n+        LOG.info(\"=== Performing local consistency check ===\");\n+        ServerConfiguration serverConfiguration = new ServerConfiguration(conf);\n+        LedgerStorage ledgerStorage = Bookie.mountLedgerStorageOffline(serverConfiguration, null);\n+        List<LedgerStorage.DetectedInconsistency> errors = ledgerStorage.localConsistencyCheck(\n+            java.util.Optional.empty());\n+        if (errors.size() > 0) {\n+            LOG.info(\"=== Check returned errors: ===\");\n+            for (LedgerStorage.DetectedInconsistency error : errors) {\n+                LOG.error(\"Ledger {}, entry {}: \", error.getLedgerId(), error.getEntryId(), error.getException());\n+            }\n+            return false;\n+        } else {\n+            LOG.info(\"=== Check passed ===\");\n+            return true;\n+        }\n+    }\n+}",
                "additions": 77,
                "raw_url": "https://github.com/apache/bookkeeper/raw/1d4cc71fd77ab803a3ebec5a8e7f1b8f51de92c9/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/cli/commands/bookie/LocalConsistencyCheckCommand.java",
                "status": "added",
                "changes": 77,
                "deletions": 0,
                "sha": "60a94bcf03bc763fd0cfbdfe4585002bcbca3e03",
                "blob_url": "https://github.com/apache/bookkeeper/blob/1d4cc71fd77ab803a3ebec5a8e7f1b8f51de92c9/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/cli/commands/bookie/LocalConsistencyCheckCommand.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/cli/commands/bookie/LocalConsistencyCheckCommand.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/cli/commands/bookie/LocalConsistencyCheckCommand.java?ref=1d4cc71fd77ab803a3ebec5a8e7f1b8f51de92c9"
            },
            {
                "patch": "@@ -29,6 +29,7 @@\n import org.apache.bookkeeper.tools.cli.commands.bookie.LedgerCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.ListFilesOnDiscCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.ListLedgersCommand;\n+import org.apache.bookkeeper.tools.cli.commands.bookie.LocalConsistencyCheckCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.ReadJournalCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.ReadLedgerCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.ReadLogCommand;\n@@ -64,6 +65,7 @@\n         .addCommand(new ReadLedgerCommand())\n         .addCommand(new ReadLogCommand())\n         .addCommand(new ReadLogMetadataCommand())\n+        .addCommand(new LocalConsistencyCheckCommand())\n         .build();\n \n     public BookieCommandGroup() {",
                "additions": 2,
                "raw_url": "https://github.com/apache/bookkeeper/raw/1d4cc71fd77ab803a3ebec5a8e7f1b8f51de92c9/tools/ledger/src/main/java/org/apache/bookkeeper/tools/cli/commands/BookieCommandGroup.java",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "95cd459af11a8f612e0ef981ebb963995d1e504b",
                "blob_url": "https://github.com/apache/bookkeeper/blob/1d4cc71fd77ab803a3ebec5a8e7f1b8f51de92c9/tools/ledger/src/main/java/org/apache/bookkeeper/tools/cli/commands/BookieCommandGroup.java",
                "filename": "tools/ledger/src/main/java/org/apache/bookkeeper/tools/cli/commands/BookieCommandGroup.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/tools/ledger/src/main/java/org/apache/bookkeeper/tools/cli/commands/BookieCommandGroup.java?ref=1d4cc71fd77ab803a3ebec5a8e7f1b8f51de92c9"
            },
            {
                "patch": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.bookkeeper.tools.cli.commands.bookie;\n+\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.powermock.api.mockito.PowerMockito.verifyNew;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.bookkeeper.bookie.Bookie;\n+import org.apache.bookkeeper.bookie.LedgerStorage;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.tools.cli.helpers.BookieCommandTestBase;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+/**\n+ * Unit test for {@link LocalConsistencyCheckCommand}.\n+ */\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({ LocalConsistencyCheckCommand.class, Bookie.class })\n+public class LocalConsistencyCheckCommandTest extends BookieCommandTestBase {\n+\n+    @Mock\n+    private ServerConfiguration serverConfiguration;\n+\n+    @Mock\n+    private LedgerStorage ledgerStorage;\n+\n+    public LocalConsistencyCheckCommandTest() {\n+        super(3, 0);\n+    }\n+\n+    @Override\n+    public void setup() throws Exception {\n+        super.setup();\n+\n+        PowerMockito.whenNew(ServerConfiguration.class).withNoArguments().thenReturn(conf);\n+        PowerMockito.whenNew(ServerConfiguration.class).withArguments(eq(conf)).thenReturn(serverConfiguration);\n+        PowerMockito.mockStatic(Bookie.class);\n+        PowerMockito.when(Bookie.mountLedgerStorageOffline(eq(serverConfiguration), eq(null)))\n+                    .thenReturn(ledgerStorage);\n+        List<LedgerStorage.DetectedInconsistency> errors = new ArrayList<>();\n+        PowerMockito.when(ledgerStorage.localConsistencyCheck(eq(java.util.Optional.empty()))).thenReturn(errors);\n+    }\n+\n+    @Test\n+    public void testCommand() throws Exception {\n+        LocalConsistencyCheckCommand cmd = new LocalConsistencyCheckCommand();\n+        Assert.assertTrue(cmd.apply(bkFlags, new String[] {}));\n+        verifyNew(ServerConfiguration.class, times(1)).withArguments(eq(conf));\n+        verify(ledgerStorage, times(1)).localConsistencyCheck(eq(java.util.Optional.empty()));\n+    }\n+}",
                "additions": 77,
                "raw_url": "https://github.com/apache/bookkeeper/raw/1d4cc71fd77ab803a3ebec5a8e7f1b8f51de92c9/tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/bookie/LocalConsistencyCheckCommandTest.java",
                "status": "added",
                "changes": 77,
                "deletions": 0,
                "sha": "3d32f9b017e788cd5ad93ab90674bb4f808d2592",
                "blob_url": "https://github.com/apache/bookkeeper/blob/1d4cc71fd77ab803a3ebec5a8e7f1b8f51de92c9/tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/bookie/LocalConsistencyCheckCommandTest.java",
                "filename": "tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/bookie/LocalConsistencyCheckCommandTest.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/bookie/LocalConsistencyCheckCommandTest.java?ref=1d4cc71fd77ab803a3ebec5a8e7f1b8f51de92c9"
            }
        ],
        "bug_id": "bookkeeper_4",
        "parent": "https://github.com/apache/bookkeeper/commit/67f83620eb8ed93bf73322293deb1a1bde8d09c7",
        "message": "Migrate command `localconsistencycheck`\n\nDescriptions of the changes in this PR:\r\n\r\n#2042 \r\n\r\nUsing bkctl run command localconsistencycheck\r\n\r\n```\r\nValidate Ledger Storage internal metadata\r\nUsage:  bkctl bookie localconsistencycheck [flags]\r\nFlags:\r\n\r\n    -h, --help\r\n        Display help information\r\n```\n\nReviewers: Jia Zhai <zhaijia@apache.org>, Sijie Guo <sijie@apache.org>\n\nThis closes #2043 from zymap/command-localconsistencycheck and squashes the following commits:\n\nc31f07a00 [Sijie Guo] Merge branch 'master' into command-localconsistencycheck\nc391fe58d [Yong Zhang] Migrate command `readlogmetadata`\n120d67737 [Yong Zhang] Migrate command `lostbookierecoverydelay`\nbf66235e5 [Yong Zhang] Migrate command `deleteledger`\nc9bb4a42c [Yong Zhang] Migrate command `localconsistencycheck`\n751e55fa4 [Arvin] ISSUE #2020: close db properly to avoid open RocksDB failure at the second time\n138a7ae85 [Yong Zhang] Migrate command `metadataformat`\nb043d1694 [Yong Zhang] Migrate command `listledgers`\n4573285db [Ivan Kelly] Docker autobuild hook\ne3d807a32 [Like] Fix IDE complain as there are multi choices for error code\n9524a9f4a [Yong Zhang] Migrate command `readjournal`\n6c3f33f55 [Yong Zhang] Fix when met unexpect entry id crashed\ne35a108c7 [Like] Fix error message for unrecognized number-of-bookies\n5902ee27b [Boyang Jerry Peng] fix potential NPE when releasing entry that is null\n6aa73ce05 [Ivan Kelly] [RELEASE] Update website to include documentation for 4.8.2\n1448d12aa [Yong Zhang] Migrate command `listfilesondisk`\n4de598379 [Yong Zhang] Issue #1987: Migrate command `convert-to-interleaved-storage`\n468743e7e [Matteo Merli] In DbLedgerStorage use default values when config key is present but empty\nf26a4cae0 [Ivan Kelly] Release notes for v4.8.2\nec2636cd2 [Yong Zhang] Issue #1985: Migrate command `convert-to-db-storage`\n8cc7239ac [Yong Zhang] Issue #1982: Migrate command `bookiesanity`\nfa90f0185 [Yong Zhang] Issue #1980: Migrate command `ledger` from shell to bkctl",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/335c2aba9bfd24eff224f1afae393026c17a2d5a",
        "file": [
            {
                "patch": "@@ -133,8 +133,17 @@ public static void asyncDeleteFullPathOptimistic(final ZooKeeper zk, final Strin\n             public void processResult(int rc, String path, Object ctx) {\n                 if (rc == Code.OK.intValue()) {\n                     String parent = new File(originalPath).getParent().replace(\"\\\\\", \"/\");\n-                    asyncDeleteFullPathOptimistic(zk, parent, -1, callback, leafNodePath);\n+                    zk.getData(parent, false, (dRc, dPath, dCtx, data, stat) -> {\n+                        if (Code.OK.intValue() == dRc && (stat != null && stat.getNumChildren() == 0)) {\n+                            asyncDeleteFullPathOptimistic(zk, parent, -1, callback, leafNodePath);\n+                        } else {\n+                            // parent node is not empty so, complete the\n+                            // callback\n+                            callback.processResult(Code.OK.intValue(), path, leafNodePath);\n+                        }\n+                    }, null);\n                 } else {\n+                    // parent node deletion fails.. so, complete the callback\n                     if (path.equals(leafNodePath)) {\n                         callback.processResult(rc, path, leafNodePath);\n                     } else {",
                "additions": 10,
                "raw_url": "https://github.com/apache/bookkeeper/raw/335c2aba9bfd24eff224f1afae393026c17a2d5a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java",
                "status": "modified",
                "changes": 11,
                "deletions": 1,
                "sha": "9d6ba1ab9b06d0ac865e1778da5af4e74215db97",
                "blob_url": "https://github.com/apache/bookkeeper/blob/335c2aba9bfd24eff224f1afae393026c17a2d5a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java?ref=335c2aba9bfd24eff224f1afae393026c17a2d5a"
            }
        ],
        "bug_id": "bookkeeper_5",
        "parent": "https://github.com/apache/bookkeeper/commit/2ff26d69e400d16f533f424c6e95f2f30189e183",
        "message": "[BK-CLIENT] Check empty ledger-parent node while deleting ledger\n\n### Motivation\r\n\r\nAs discussed at [#4276](https://github.com/apache/pulsar/issues/4276), while deleting ledger, bk-client should check parent node is empty before issuing delete request for parent znode.\r\n\r\n\n\nReviewers: Enrico Olivelli <eolivelli@gmail.com>, Charan Reddy Guttapalem <reddycharan18@gmail.com>, Matteo Merli <mmerli@apache.org>\n\nThis closes #2097 from rdhabalia/led_del and squashes the following commits:\n\nf5c0ca36c [rdhabalia] return callback with ok\nede5e9403 [rdhabalia] [Bk-Client] Check empty ledger-parent node while deleting ledger\nd35aa22ad [Charan Reddy Guttapalem] Move common placementpolicy components to TopologyAwareEnsemblePlacementPolicy.\nb4ca4537b [Charan Reddy Guttapalem] Move common placementpolicy components to TopologyAwareEnsemblePlacementPolicy.\naa84c7fdd [Charan Reddy Guttapalem] GetListOfEntriesOfLedger implementation\n10859afb7 [Matteo Merli] Added HTTP handler to expose bookie state\n707ae5c85 [karanmehta93] ISSUE #2075: Bookieshell lastmark command isn't functional, always returning 0-0\n41b39c6ef [Charan Reddy Guttapalem] ISSUE #1967: make ledger creation and removal robust to zk connectionloss\n973d2ab0d [Matteo Merli] Use pure python implementation of MurmurHash\n9bb7e4b82 [Venkateswararao Jujjuri (JV)] Explicit error message if extent is not present on ZK (#2066)\nbd699e61d [mtang01] ISSUE #2067: reduce byte[] allocation in add entry\n7c62e1232 [karanmehta93] ISSUE #2073: ReadOnlyBookieTest#testBookieContinueWritingIfMulti\u2026\n42e77802c [Ivan Kelly] DLog Namespace#openLog should declare LogNotFoundException\n86bce12b5 [Yong Zhang] Migrate command `ledgermetadata`\n407cb35e5 [Charan Reddy Guttapalem] ISSUE #1967: make ledger creation and removal robust to zk connectionloss\neaa601404 [Like] Support asynchronous fence request for V2 ReadEntryProcessor\nd23b45ec8 [Ivan Kelly] Fix typo in overview page for 4.8.2\n44ee320b6 [Ivan Kelly] k\n316b71923 [Ivan Kelly] Wait for LAC update even if ledger fenced\n066621507 [Yong Zhang] Migrate command `updatecookie`\n6f3396801 [Yong Zhang] Migrate command `triggeraudit`\n60d993edf [Yong Zhang] Migrate command `autorecovery`\ned008f278 [Yong Zhang] Migrate command `whoisauditor`\n5b8e0971a [Yong Zhang] Migrate command `Whatisinstanceid`\n90c79444d [Yong Zhang] Migrate command `rebuild-db-ledger-locations-index`\n848f8527f [Nicolas Michael] ISSUE #2053: Bugfix for Percentile Calculation in FastCodahale Timer Implementation\n06f2b6f50 [Yong Zhang] Migrate command `updateledgers`\n7ad5849b1 [Yong Zhang] Migrate command `regenerate-interleaved-storage-index-file`\nd4dbb6bfb [Dongfa,Huang] Avoid useless verify if LedgerEntryRequest completed\n5c150f283 [Enrico Olivelli] Release notes for 4.9.1\n1246826ba [Yong Zhang] Migrate command `recover`\n1d4cc71fd [Yong Zhang] Migrate command `localconsistencycheck`\n67f83620e [Yong Zhang] Migrate command `readledger`\nbfbd6b023 [Yong Zhang] Migrate command `decommission`\nd40b8b69f [Yong Zhang] Migrate command `readlog`\n95d145a15 [Yong Zhang] Migrate command `nukeexistingcluster`\ne2b1dc7f3 [Yong Zhang] Migrate command `listunderreplicated`\n0988e12c7 [bd2019us] ISSUE #2023: change cached thread pool to fixed thread pool\n6a6d7bbd9 [Yong Zhang] Migrate command `initnewcluster`\nc391fe58d [Yong Zhang] Migrate command `readlogmetadata`\n120d67737 [Yong Zhang] Migrate command `lostbookierecoverydelay`\nbf66235e5 [Yong Zhang] Migrate command `deleteledger`\n751e55fa4 [Arvin] ISSUE #2020: close db properly to avoid open RocksDB failure at the second time\n138a7ae85 [Yong Zhang] Migrate command `metadataformat`\nb043d1694 [Yong Zhang] Migrate command `listledgers`\n4573285db [Ivan Kelly] Docker autobuild hook\ne3d807a32 [Like] Fix IDE complain as there are multi choices for error code\n9524a9f4a [Yong Zhang] Migrate command `readjournal`\n6c3f33f55 [Yong Zhang] Fix when met unexpect entry id crashed\ne35a108c7 [Like] Fix error message for unrecognized number-of-bookies\n5902ee27b [Boyang Jerry Peng] fix potential NPE when releasing entry that is null\n6aa73ce05 [Ivan Kelly] [RELEASE] Update website to include documentation for 4.8.2\n1448d12aa [Yong Zhang] Migrate command `listfilesondisk`\n4de598379 [Yong Zhang] Issue #1987: Migrate command `convert-to-interleaved-storage`\n468743e7e [Matteo Merli] In DbLedgerStorage use default values when config key is present but empty\nf26a4cae0 [Ivan Kelly] Release notes for v4.8.2\nec2636cd2 [Yong Zhang] Issue #1985: Migrate command `convert-to-db-storage`\n8cc7239ac [Yong Zhang] Issue #1982: Migrate command `bookiesanity`\nfa90f0185 [Yong Zhang] Issue #1980: Migrate command `ledger` from shell to bkctl",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/01430750ce5a2f7c46cce942a7aa6116e41b9508",
        "file": [
            {
                "patch": "@@ -192,7 +192,8 @@ public void reloadCachedMappings() {\n     protected Cache<BookieSocketAddress, Long> slowBookies;\n     protected BookieNode localNode;\n     protected final ReentrantReadWriteLock rwLock;\n-    protected ImmutableSet<BookieSocketAddress> readOnlyBookies = null;\n+    // Initialize to empty set\n+    protected ImmutableSet<BookieSocketAddress> readOnlyBookies = ImmutableSet.of();\n     protected boolean reorderReadsRandom = false;\n     protected boolean enforceDurability = false;\n     protected int stabilizePeriodSeconds = 0;",
                "additions": 2,
                "raw_url": "https://github.com/apache/bookkeeper/raw/01430750ce5a2f7c46cce942a7aa6116e41b9508/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicyImpl.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "7dcd728773cea2d725ec426ea2eba8472d945207",
                "blob_url": "https://github.com/apache/bookkeeper/blob/01430750ce5a2f7c46cce942a7aa6116e41b9508/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicyImpl.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicyImpl.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicyImpl.java?ref=01430750ce5a2f7c46cce942a7aa6116e41b9508"
            }
        ],
        "bug_id": "bookkeeper_6",
        "parent": "https://github.com/apache/bookkeeper/commit/43a896a08dae2a3a273d02e4c1ed81516ab00c85",
        "message": "[MERGE YAHOO REPO] Fixed NPE when accessing readonly bookie list\n\nDescriptions of the changes in this PR:\nThis is cherry-pick from yahoo repo of branch yahoo-4.3.\n\noriginal commit is:\nhttps://github.com/yahoo/bookkeeper/commit/270b69e4\nFixed NPE when accessing readonly bookie list\n\nAuthor: Matteo Merli <mmerli@yahoo-inc.com>\n\nReviewers: Ivan Kelly <ivank@apache.org>, Sijie Guo <sijie@apache.org>\n\nThis closes #1058 from jiazhai/cherry_picks/i_165",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/6f33968019c3452cefc2d78e0258bb3206d78e8a",
        "file": [
            {
                "patch": "@@ -47,18 +47,17 @@\n import java.util.stream.Collectors;\n import org.apache.bookkeeper.bookie.BookieException.CookieNotFoundException;\n import org.apache.bookkeeper.bookie.BookieException.InvalidCookieException;\n-import org.apache.bookkeeper.client.BookKeeperAdmin;\n import org.apache.bookkeeper.client.LedgerEntry;\n import org.apache.bookkeeper.client.api.LedgerMetadata;\n import org.apache.bookkeeper.common.annotation.InterfaceAudience.Private;\n-import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.meta.LedgerMetadataSerDe;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.tools.cli.commands.autorecovery.ListUnderReplicatedCommand;\n import org.apache.bookkeeper.tools.cli.commands.autorecovery.LostBookieRecoveryDelayCommand;\n import org.apache.bookkeeper.tools.cli.commands.autorecovery.ToggleCommand;\n+import org.apache.bookkeeper.tools.cli.commands.autorecovery.TriggerAuditCommand;\n import org.apache.bookkeeper.tools.cli.commands.autorecovery.WhoIsAuditorCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.ConvertToDBStorageCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.ConvertToInterleavedStorageCommand;\n@@ -1861,15 +1860,8 @@ Options getOptions() {\n \n         @Override\n         public int runCmd(CommandLine cmdLine) throws Exception {\n-            ClientConfiguration adminConf = new ClientConfiguration(bkConf);\n-            BookKeeperAdmin admin = new BookKeeperAdmin(adminConf);\n-            try {\n-                admin.triggerAudit();\n-            } finally {\n-                if (admin != null) {\n-                    admin.close();\n-                }\n-            }\n+            TriggerAuditCommand cmd = new TriggerAuditCommand();\n+            cmd.apply(bkConf, new CliFlags());\n             return 0;\n         }\n     }",
                "additions": 3,
                "raw_url": "https://github.com/apache/bookkeeper/raw/6f33968019c3452cefc2d78e0258bb3206d78e8a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java",
                "status": "modified",
                "changes": 14,
                "deletions": 11,
                "sha": "700ce114ea51696ff621ae13c6099261b6bbac3f",
                "blob_url": "https://github.com/apache/bookkeeper/blob/6f33968019c3452cefc2d78e0258bb3206d78e8a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java?ref=6f33968019c3452cefc2d78e0258bb3206d78e8a"
            },
            {
                "patch": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.bookkeeper.tools.cli.commands.autorecovery;\n+\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n+import org.apache.bookkeeper.client.BookKeeperAdmin;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.tools.cli.helpers.BookieCommand;\n+import org.apache.bookkeeper.tools.framework.CliFlags;\n+import org.apache.bookkeeper.tools.framework.CliSpec;\n+\n+/**\n+ * Command to trigger AuditTask by resetting lostBookieRecoveryDelay to its current value.\n+ */\n+public class TriggerAuditCommand extends BookieCommand<CliFlags> {\n+\n+    private static final String NAME = \"triggeraudit\";\n+    private static final String DESC = \"Force trigger the Audit by resetting the lostBookieRecoveryDelay.\";\n+\n+    public TriggerAuditCommand() {\n+        super(CliSpec.newBuilder()\n+                     .withName(NAME)\n+                     .withDescription(DESC)\n+                     .withFlags(new CliFlags())\n+                     .build());\n+    }\n+\n+    @Override\n+    public boolean apply(ServerConfiguration conf, CliFlags cmdFlags) {\n+        try {\n+            return handler(conf);\n+        } catch (Exception e) {\n+            throw new UncheckedExecutionException(e.getMessage(), e);\n+        }\n+    }\n+\n+    public boolean handler(ServerConfiguration configuration) throws Exception {\n+        ClientConfiguration adminConf = new ClientConfiguration(configuration);\n+        BookKeeperAdmin admin = new BookKeeperAdmin(adminConf);\n+\n+        try {\n+            admin.triggerAudit();\n+        } finally {\n+            if (admin != null) {\n+                admin.close();\n+            }\n+        }\n+\n+        return true;\n+    }\n+}",
                "additions": 68,
                "raw_url": "https://github.com/apache/bookkeeper/raw/6f33968019c3452cefc2d78e0258bb3206d78e8a/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/cli/commands/autorecovery/TriggerAuditCommand.java",
                "status": "added",
                "changes": 68,
                "deletions": 0,
                "sha": "c645a5c99720b817752c35b15d72f144980ada45",
                "blob_url": "https://github.com/apache/bookkeeper/blob/6f33968019c3452cefc2d78e0258bb3206d78e8a/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/cli/commands/autorecovery/TriggerAuditCommand.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/cli/commands/autorecovery/TriggerAuditCommand.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/cli/commands/autorecovery/TriggerAuditCommand.java?ref=6f33968019c3452cefc2d78e0258bb3206d78e8a"
            },
            {
                "patch": "@@ -1,4 +1,4 @@\n-/*\n+/**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n@@ -7,17 +7,12 @@\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n  *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-/**\n- * This package provides all autorecovery commands.\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n package org.apache.bookkeeper.tools.cli.commands.autorecovery;\n\\ No newline at end of file",
                "additions": 7,
                "raw_url": "https://github.com/apache/bookkeeper/raw/6f33968019c3452cefc2d78e0258bb3206d78e8a/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/cli/commands/autorecovery/package-info.java",
                "status": "modified",
                "changes": 19,
                "deletions": 12,
                "sha": "acfe982e304f8fc082610a09360b1a841d9a8aea",
                "blob_url": "https://github.com/apache/bookkeeper/blob/6f33968019c3452cefc2d78e0258bb3206d78e8a/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/cli/commands/autorecovery/package-info.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/cli/commands/autorecovery/package-info.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/cli/commands/autorecovery/package-info.java?ref=6f33968019c3452cefc2d78e0258bb3206d78e8a"
            },
            {
                "patch": "@@ -20,7 +20,10 @@\n \n import static org.apache.bookkeeper.tools.common.BKCommandCategories.CATEGORY_INFRA_SERVICE;\n \n+import org.apache.bookkeeper.tools.cli.commands.autorecovery.ListUnderReplicatedCommand;\n+import org.apache.bookkeeper.tools.cli.commands.autorecovery.LostBookieRecoveryDelayCommand;\n import org.apache.bookkeeper.tools.cli.commands.autorecovery.ToggleCommand;\n+import org.apache.bookkeeper.tools.cli.commands.autorecovery.TriggerAuditCommand;\n import org.apache.bookkeeper.tools.cli.commands.autorecovery.WhoIsAuditorCommand;\n import org.apache.bookkeeper.tools.common.BKFlags;\n import org.apache.bookkeeper.tools.framework.CliCommandGroup;\n@@ -39,7 +42,11 @@\n         .withDescription(DESC)\n         .withCategory(CATEGORY_INFRA_SERVICE)\n         .addCommand(new WhoIsAuditorCommand())\n+        .addCommand(new TriggerAuditCommand())\n         .addCommand(new ToggleCommand())\n+        .addCommand(new TriggerAuditCommand())\n+        .addCommand(new ListUnderReplicatedCommand())\n+        .addCommand(new LostBookieRecoveryDelayCommand())\n         .build();\n \n     public AutoRecoveryCommandGroup() {",
                "additions": 7,
                "raw_url": "https://github.com/apache/bookkeeper/raw/6f33968019c3452cefc2d78e0258bb3206d78e8a/tools/ledger/src/main/java/org/apache/bookkeeper/tools/cli/commands/AutoRecoveryCommandGroup.java",
                "status": "modified",
                "changes": 7,
                "deletions": 0,
                "sha": "7cc88ea7dfda273bd92f0fd2435ece7f0fb9c775",
                "blob_url": "https://github.com/apache/bookkeeper/blob/6f33968019c3452cefc2d78e0258bb3206d78e8a/tools/ledger/src/main/java/org/apache/bookkeeper/tools/cli/commands/AutoRecoveryCommandGroup.java",
                "filename": "tools/ledger/src/main/java/org/apache/bookkeeper/tools/cli/commands/AutoRecoveryCommandGroup.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/tools/ledger/src/main/java/org/apache/bookkeeper/tools/cli/commands/AutoRecoveryCommandGroup.java?ref=6f33968019c3452cefc2d78e0258bb3206d78e8a"
            },
            {
                "patch": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.bookkeeper.tools.cli.commands.autorecovery;\n+\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.powermock.api.mockito.PowerMockito.doNothing;\n+import static org.powermock.api.mockito.PowerMockito.mock;\n+import static org.powermock.api.mockito.PowerMockito.verifyNew;\n+\n+import org.apache.bookkeeper.client.BookKeeperAdmin;\n+import org.apache.bookkeeper.conf.AbstractConfiguration;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.tools.cli.helpers.BookieCommandTestBase;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+/**\n+ * Unit test for {@link TriggerAuditCommand}.\n+ */\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({TriggerAuditCommand.class})\n+public class TriggerAuditCommandTest extends BookieCommandTestBase {\n+\n+    private ClientConfiguration clientConfiguration;\n+    private BookKeeperAdmin admin;\n+\n+    public TriggerAuditCommandTest() {\n+        super(3, 0);\n+    }\n+\n+    @Override\n+    public void setup() throws Exception {\n+        super.setup();\n+\n+        PowerMockito.whenNew(ServerConfiguration.class).withNoArguments().thenReturn(conf);\n+\n+        clientConfiguration = mock(ClientConfiguration.class);\n+        PowerMockito.whenNew(ClientConfiguration.class).withParameterTypes(AbstractConfiguration.class)\n+                    .withArguments(eq(conf)).thenReturn(clientConfiguration);\n+\n+        admin = mock(BookKeeperAdmin.class);\n+        PowerMockito.whenNew(BookKeeperAdmin.class).withParameterTypes(ClientConfiguration.class)\n+                    .withArguments(eq(clientConfiguration)).thenReturn(admin);\n+\n+        doNothing().when(admin).triggerAudit();\n+    }\n+\n+    @Test\n+    public void testCommand() throws Exception {\n+        TriggerAuditCommand cmd = new TriggerAuditCommand();\n+        Assert.assertTrue(cmd.apply(bkFlags, new String[] { \"\" }));\n+\n+        verifyNew(ClientConfiguration.class, times(1)).withArguments(conf);\n+        verifyNew(BookKeeperAdmin.class, times(1)).withArguments(clientConfiguration);\n+\n+        verify(admin, times(1)).triggerAudit();\n+    }\n+}",
                "additions": 81,
                "raw_url": "https://github.com/apache/bookkeeper/raw/6f33968019c3452cefc2d78e0258bb3206d78e8a/tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/autorecovery/TriggerAuditCommandTest.java",
                "status": "added",
                "changes": 81,
                "deletions": 0,
                "sha": "b60eaf67ffc39f018375e511845ba372f20f6cac",
                "blob_url": "https://github.com/apache/bookkeeper/blob/6f33968019c3452cefc2d78e0258bb3206d78e8a/tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/autorecovery/TriggerAuditCommandTest.java",
                "filename": "tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/autorecovery/TriggerAuditCommandTest.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/autorecovery/TriggerAuditCommandTest.java?ref=6f33968019c3452cefc2d78e0258bb3206d78e8a"
            }
        ],
        "bug_id": "bookkeeper_7",
        "parent": "https://github.com/apache/bookkeeper/commit/60d993edf50417ace9777d2f40cc2bbc97510125",
        "message": "Migrate command `triggeraudit`\n\nDescriptions of the changes in this PR:\r\n\r\n- Using `bkctl` run command `triggeraudit`\r\n\r\n### Motivation\r\n\r\n#2011 \n\nReviewers: Sijie Guo <sijie@apache.org>, Jia Zhai <zhaijia@apache.org>\n\nThis closes #2012 from zymap/command-triggeraudit and squashes the following commits:\n\n5a4b496ec [Yong Zhang] Fix conflict ---\n236b7d6e5 [Yong Zhang] Fix validation\nb039b637e [Yong Zhang] Rename file\n8bea52522 [Yong Zhang] Remove unused imports\nd39d1e886 [Yong Zhang] Migrate command `triggeraudit`\n60d993edf [Yong Zhang] Migrate command `autorecovery`\ned008f278 [Yong Zhang] Migrate command `whoisauditor`\n5b8e0971a [Yong Zhang] Migrate command `Whatisinstanceid`\n90c79444d [Yong Zhang] Migrate command `rebuild-db-ledger-locations-index`\n848f8527f [Nicolas Michael] ISSUE #2053: Bugfix for Percentile Calculation in FastCodahale Timer Implementation\n06f2b6f50 [Yong Zhang] Migrate command `updateledgers`\n7ad5849b1 [Yong Zhang] Migrate command `regenerate-interleaved-storage-index-file`\nd4dbb6bfb [Dongfa,Huang] Avoid useless verify if LedgerEntryRequest completed\n5c150f283 [Enrico Olivelli] Release notes for 4.9.1\n1246826ba [Yong Zhang] Migrate command `recover`\n1d4cc71fd [Yong Zhang] Migrate command `localconsistencycheck`\n67f83620e [Yong Zhang] Migrate command `readledger`\nbfbd6b023 [Yong Zhang] Migrate command `decommission`\nd40b8b69f [Yong Zhang] Migrate command `readlog`\n95d145a15 [Yong Zhang] Migrate command `nukeexistingcluster`\ne2b1dc7f3 [Yong Zhang] Migrate command `listunderreplicated`\n0988e12c7 [bd2019us] ISSUE #2023: change cached thread pool to fixed thread pool\n6a6d7bbd9 [Yong Zhang] Migrate command `initnewcluster`\nc391fe58d [Yong Zhang] Migrate command `readlogmetadata`\n120d67737 [Yong Zhang] Migrate command `lostbookierecoverydelay`\nbf66235e5 [Yong Zhang] Migrate command `deleteledger`\n751e55fa4 [Arvin] ISSUE #2020: close db properly to avoid open RocksDB failure at the second time\n138a7ae85 [Yong Zhang] Migrate command `metadataformat`\nb043d1694 [Yong Zhang] Migrate command `listledgers`\n4573285db [Ivan Kelly] Docker autobuild hook\ne3d807a32 [Like] Fix IDE complain as there are multi choices for error code\n9524a9f4a [Yong Zhang] Migrate command `readjournal`\n6c3f33f55 [Yong Zhang] Fix when met unexpect entry id crashed\ne35a108c7 [Like] Fix error message for unrecognized number-of-bookies\n5902ee27b [Boyang Jerry Peng] fix potential NPE when releasing entry that is null\n6aa73ce05 [Ivan Kelly] [RELEASE] Update website to include documentation for 4.8.2\n1448d12aa [Yong Zhang] Migrate command `listfilesondisk`\n4de598379 [Yong Zhang] Issue #1987: Migrate command `convert-to-interleaved-storage`\n468743e7e [Matteo Merli] In DbLedgerStorage use default values when config key is present but empty\nf26a4cae0 [Ivan Kelly] Release notes for v4.8.2\nec2636cd2 [Yong Zhang] Issue #1985: Migrate command `convert-to-db-storage`\n8cc7239ac [Yong Zhang] Issue #1982: Migrate command `bookiesanity`\nfa90f0185 [Yong Zhang] Issue #1980: Migrate command `ledger` from shell to bkctl",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/60d993edf50417ace9777d2f40cc2bbc97510125",
        "file": [
            {
                "patch": "@@ -55,11 +55,10 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.meta.LedgerMetadataSerDe;\n-import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n-import org.apache.bookkeeper.replication.ReplicationException;\n import org.apache.bookkeeper.tools.cli.commands.autorecovery.ListUnderReplicatedCommand;\n import org.apache.bookkeeper.tools.cli.commands.autorecovery.LostBookieRecoveryDelayCommand;\n+import org.apache.bookkeeper.tools.cli.commands.autorecovery.ToggleCommand;\n import org.apache.bookkeeper.tools.cli.commands.autorecovery.WhoIsAuditorCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.ConvertToDBStorageCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.ConvertToInterleavedStorageCommand;\n@@ -114,7 +113,6 @@\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.lang.StringUtils;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.zookeeper.KeeperException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -1290,43 +1288,10 @@ int runCmd(CommandLine cmdLine) throws Exception {\n             boolean disable = cmdLine.hasOption(\"d\");\n             boolean enable = cmdLine.hasOption(\"e\");\n \n-            if (enable && disable) {\n-                LOG.error(\"Only one of -enable and -disable can be specified\");\n-                printUsage();\n-                return 1;\n-            }\n-\n-            runFunctionWithLedgerManagerFactory(bkConf, mFactory -> {\n-                try {\n-                    try (LedgerUnderreplicationManager underreplicationManager =\n-                             mFactory.newLedgerUnderreplicationManager()) {\n-                        if (!enable && !disable) {\n-                            boolean enabled = underreplicationManager.isLedgerReplicationEnabled();\n-                            System.out.println(\"Autorecovery is \" + (enabled ? \"enabled.\" : \"disabled.\"));\n-                        } else if (enable) {\n-                            if (underreplicationManager.isLedgerReplicationEnabled()) {\n-                                LOG.warn(\"Autorecovery already enabled. Doing nothing\");\n-                            } else {\n-                                LOG.info(\"Enabling autorecovery\");\n-                                underreplicationManager.enableLedgerReplication();\n-                            }\n-                        } else {\n-                            if (!underreplicationManager.isLedgerReplicationEnabled()) {\n-                                LOG.warn(\"Autorecovery already disabled. Doing nothing\");\n-                            } else {\n-                                LOG.info(\"Disabling autorecovery\");\n-                                underreplicationManager.disableLedgerReplication();\n-                            }\n-                        }\n-                    }\n-                } catch (InterruptedException e) {\n-                    Thread.currentThread().interrupt();\n-                    throw new UncheckedExecutionException(e);\n-                } catch (KeeperException | ReplicationException e) {\n-                    throw new UncheckedExecutionException(e);\n-                }\n-                return null;\n-            });\n+            ToggleCommand.AutoRecoveryFlags flags = new ToggleCommand.AutoRecoveryFlags()\n+                .enable(enable).status(!disable && !enable);\n+            ToggleCommand cmd = new ToggleCommand();\n+            cmd.apply(bkConf, flags);\n \n             return 0;\n         }",
                "additions": 5,
                "raw_url": "https://github.com/apache/bookkeeper/raw/60d993edf50417ace9777d2f40cc2bbc97510125/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java",
                "status": "modified",
                "changes": 45,
                "deletions": 40,
                "sha": "eff70edd3ee12f259531ce5c799d0672bbd8c613",
                "blob_url": "https://github.com/apache/bookkeeper/blob/60d993edf50417ace9777d2f40cc2bbc97510125/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java?ref=60d993edf50417ace9777d2f40cc2bbc97510125"
            },
            {
                "patch": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.bookkeeper.tools.cli.commands.autorecovery;\n+\n+import com.beust.jcommander.Parameter;\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.Setter;\n+import lombok.experimental.Accessors;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n+import org.apache.bookkeeper.meta.MetadataDrivers;\n+import org.apache.bookkeeper.meta.exceptions.MetadataException;\n+import org.apache.bookkeeper.replication.ReplicationException;\n+import org.apache.bookkeeper.tools.cli.helpers.BookieCommand;\n+import org.apache.bookkeeper.tools.framework.CliFlags;\n+import org.apache.bookkeeper.tools.framework.CliSpec;\n+import org.apache.zookeeper.KeeperException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Command to enable or disable auto recovery in the cluster.\n+ */\n+public class ToggleCommand extends BookieCommand<ToggleCommand.AutoRecoveryFlags> {\n+\n+    static final Logger LOG = LoggerFactory.getLogger(ToggleCommand.class);\n+\n+    private static final String NAME = \"toggle\";\n+    private static final String DESC = \"Enable or disable auto recovery in the cluster. Default is disable.\";\n+\n+    public ToggleCommand() {\n+        this(new AutoRecoveryFlags());\n+    }\n+\n+    private ToggleCommand(AutoRecoveryFlags flags) {\n+        super(CliSpec.<ToggleCommand.AutoRecoveryFlags>newBuilder()\n+            .withName(NAME).withDescription(DESC)\n+            .withFlags(flags).build());\n+    }\n+\n+    /**\n+     * Flags for auto recovery command.\n+     */\n+    @Accessors(fluent = true)\n+    @Setter\n+    public static class AutoRecoveryFlags extends CliFlags {\n+\n+        @Parameter(names = { \"-e\", \"--enable\" }, description = \"Enable or disable auto recovery of under replicated \"\n+                                                               + \"ledgers.\")\n+        private boolean enable;\n+\n+        @Parameter(names = {\"-s\", \"--status\"}, description = \"Check the auto recovery status.\")\n+        private boolean status;\n+\n+    }\n+\n+    @Override\n+    public boolean apply(ServerConfiguration conf, AutoRecoveryFlags cmdFlags) {\n+        try {\n+            return handler(conf, cmdFlags);\n+        } catch (MetadataException | ExecutionException e) {\n+            throw new UncheckedExecutionException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private boolean handler(ServerConfiguration conf, AutoRecoveryFlags flags)\n+        throws MetadataException, ExecutionException {\n+        MetadataDrivers.runFunctionWithLedgerManagerFactory(conf, mFactory -> {\n+            try {\n+                try (LedgerUnderreplicationManager underreplicationManager = mFactory\n+                         .newLedgerUnderreplicationManager()) {\n+                    if (flags.status) {\n+                        System.out.println(\"Autorecovery is \" + (underreplicationManager.isLedgerReplicationEnabled()\n+                                                                     ? \"enabled.\" : \"disabled.\"));\n+                        return null;\n+                    }\n+                    if (flags.enable) {\n+                        if (underreplicationManager.isLedgerReplicationEnabled()) {\n+                            LOG.warn(\"Autorecovery already enabled. Doing nothing\");\n+                        } else {\n+                            LOG.info(\"Enabling autorecovery\");\n+                            underreplicationManager.enableLedgerReplication();\n+                        }\n+                    } else {\n+                        if (!underreplicationManager.isLedgerReplicationEnabled()) {\n+                            LOG.warn(\"Autorecovery already disabled. Doing nothing\");\n+                        } else {\n+                            LOG.info(\"Disabling autorecovery\");\n+                            underreplicationManager.disableLedgerReplication();\n+                        }\n+                    }\n+                }\n+            } catch (InterruptedException e) {\n+                Thread.currentThread().interrupt();\n+                throw new UncheckedExecutionException(e);\n+            } catch (KeeperException | ReplicationException e) {\n+                throw new UncheckedExecutionException(e);\n+            }\n+            return null;\n+        });\n+        return true;\n+    }\n+}",
                "additions": 121,
                "raw_url": "https://github.com/apache/bookkeeper/raw/60d993edf50417ace9777d2f40cc2bbc97510125/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/cli/commands/autorecovery/ToggleCommand.java",
                "status": "added",
                "changes": 121,
                "deletions": 0,
                "sha": "c1457153c71389d6eac3be5beb9d85eaa6cfc6de",
                "blob_url": "https://github.com/apache/bookkeeper/blob/60d993edf50417ace9777d2f40cc2bbc97510125/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/cli/commands/autorecovery/ToggleCommand.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/cli/commands/autorecovery/ToggleCommand.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/cli/commands/autorecovery/ToggleCommand.java?ref=60d993edf50417ace9777d2f40cc2bbc97510125"
            },
            {
                "patch": "@@ -20,6 +20,7 @@\n \n import static org.apache.bookkeeper.tools.common.BKCommandCategories.CATEGORY_INFRA_SERVICE;\n \n+import org.apache.bookkeeper.tools.cli.commands.autorecovery.ToggleCommand;\n import org.apache.bookkeeper.tools.cli.commands.autorecovery.WhoIsAuditorCommand;\n import org.apache.bookkeeper.tools.common.BKFlags;\n import org.apache.bookkeeper.tools.framework.CliCommandGroup;\n@@ -38,6 +39,7 @@\n         .withDescription(DESC)\n         .withCategory(CATEGORY_INFRA_SERVICE)\n         .addCommand(new WhoIsAuditorCommand())\n+        .addCommand(new ToggleCommand())\n         .build();\n \n     public AutoRecoveryCommandGroup() {",
                "additions": 2,
                "raw_url": "https://github.com/apache/bookkeeper/raw/60d993edf50417ace9777d2f40cc2bbc97510125/tools/ledger/src/main/java/org/apache/bookkeeper/tools/cli/commands/AutoRecoveryCommandGroup.java",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "aa4d7f4a8a5c060118d74c5ef0e825f3ba75d238",
                "blob_url": "https://github.com/apache/bookkeeper/blob/60d993edf50417ace9777d2f40cc2bbc97510125/tools/ledger/src/main/java/org/apache/bookkeeper/tools/cli/commands/AutoRecoveryCommandGroup.java",
                "filename": "tools/ledger/src/main/java/org/apache/bookkeeper/tools/cli/commands/AutoRecoveryCommandGroup.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/tools/ledger/src/main/java/org/apache/bookkeeper/tools/cli/commands/AutoRecoveryCommandGroup.java?ref=60d993edf50417ace9777d2f40cc2bbc97510125"
            },
            {
                "patch": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.bookkeeper.tools.cli.commands.autorecovery;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.powermock.api.mockito.PowerMockito.mock;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+\n+import java.util.function.Function;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.meta.LedgerManagerFactory;\n+import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n+import org.apache.bookkeeper.meta.MetadataDrivers;\n+import org.apache.bookkeeper.replication.ReplicationException;\n+import org.apache.bookkeeper.tools.cli.helpers.BookieCommandTestBase;\n+import org.apache.zookeeper.KeeperException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+\n+/**\n+ * Unit test for {@link ToggleCommand}.\n+ */\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({ ToggleCommand.class, MetadataDrivers.class })\n+public class AutoRecoveryCommandTest extends BookieCommandTestBase {\n+\n+    private LedgerManagerFactory ledgerManagerFactory;\n+    private LedgerUnderreplicationManager ledgerUnderreplicationManager;\n+\n+    public AutoRecoveryCommandTest() {\n+        super(3, 0);\n+    }\n+\n+    @Override\n+    public void setup() throws Exception {\n+        super.setup();\n+\n+        PowerMockito.whenNew(ServerConfiguration.class).withNoArguments().thenReturn(conf);\n+\n+        ledgerManagerFactory = mock(LedgerManagerFactory.class);\n+\n+        PowerMockito.mockStatic(MetadataDrivers.class);\n+        PowerMockito.doAnswer(invocationOnMock -> {\n+            Function<LedgerManagerFactory, ?> function = invocationOnMock.getArgument(1);\n+            function.apply(ledgerManagerFactory);\n+            return true;\n+        }).when(MetadataDrivers.class, \"runFunctionWithLedgerManagerFactory\", any(ServerConfiguration.class),\n+                any(Function.class));\n+\n+        ledgerUnderreplicationManager = mock(LedgerUnderreplicationManager.class);\n+        when(ledgerManagerFactory.newLedgerUnderreplicationManager()).thenReturn(ledgerUnderreplicationManager);\n+    }\n+\n+    @Test\n+    public void testWithEnable()\n+        throws InterruptedException, ReplicationException.CompatibilityException, KeeperException,\n+               ReplicationException.UnavailableException {\n+        testCommand(\"-e\");\n+        verify(ledgerManagerFactory, times(1)).newLedgerUnderreplicationManager();\n+        verify(ledgerUnderreplicationManager, times(1)).isLedgerReplicationEnabled();\n+    }\n+\n+    @Test\n+    public void testWithEnableLongArgs() throws ReplicationException.UnavailableException {\n+        when(ledgerUnderreplicationManager.isLedgerReplicationEnabled()).thenReturn(false);\n+        testCommand(\"--enable\");\n+        verify(ledgerUnderreplicationManager, times(1)).enableLedgerReplication();\n+    }\n+\n+    @Test\n+    public void testWithLook()\n+        throws InterruptedException, ReplicationException.CompatibilityException, KeeperException,\n+               ReplicationException.UnavailableException {\n+        testCommand(\"s\");\n+        verify(ledgerManagerFactory, times(1)).newLedgerUnderreplicationManager();\n+        verify(ledgerUnderreplicationManager, times(1)).isLedgerReplicationEnabled();\n+    }\n+\n+    @Test\n+    public void testWithNoArgs()\n+        throws InterruptedException, ReplicationException.CompatibilityException, KeeperException,\n+               ReplicationException.UnavailableException {\n+        testCommand(\"\");\n+        verify(ledgerManagerFactory, times(1)).newLedgerUnderreplicationManager();\n+        verify(ledgerUnderreplicationManager, times(1)).isLedgerReplicationEnabled();\n+    }\n+\n+    @Test\n+    public void testWithNoArgsDisable() throws ReplicationException.UnavailableException {\n+        when(ledgerUnderreplicationManager.isLedgerReplicationEnabled()).thenReturn(true);\n+        testCommand(\"\");\n+        verify(ledgerUnderreplicationManager, times(1)).isLedgerReplicationEnabled();\n+        verify(ledgerUnderreplicationManager, times(1)).disableLedgerReplication();\n+    }\n+\n+    private void testCommand(String... args) {\n+        ToggleCommand cmd = new ToggleCommand();\n+        Assert.assertTrue(cmd.apply(bkFlags, args));\n+    }\n+}",
                "additions": 123,
                "raw_url": "https://github.com/apache/bookkeeper/raw/60d993edf50417ace9777d2f40cc2bbc97510125/tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/autorecovery/AutoRecoveryCommandTest.java",
                "status": "added",
                "changes": 123,
                "deletions": 0,
                "sha": "50c68d7e78d44bafeb17422c13ad38fed6ab0867",
                "blob_url": "https://github.com/apache/bookkeeper/blob/60d993edf50417ace9777d2f40cc2bbc97510125/tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/autorecovery/AutoRecoveryCommandTest.java",
                "filename": "tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/autorecovery/AutoRecoveryCommandTest.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/autorecovery/AutoRecoveryCommandTest.java?ref=60d993edf50417ace9777d2f40cc2bbc97510125"
            }
        ],
        "bug_id": "bookkeeper_8",
        "parent": "https://github.com/apache/bookkeeper/commit/ed008f27807a75ba384246fc7fae6ca3a5a6971f",
        "message": "Migrate command `autorecovery`\n\nDescriptions of the changes in this PR:\r\n\r\n- Using `bkctl` run command `autorecovery`\r\n\r\n### Motivation\r\n\r\n#2009 \n\nReviewers: Jia Zhai <zhaijia@apache.org>, Sijie Guo <sijie@apache.org>\n\nThis closes #2010 from zymap/command-autorecovery and squashes the following commits:\n\n6fcd96904 [Yong Zhang] Fix validation\ncd383f372 [Yong Zhang] Rename package\nefb573221 [Yong Zhang] Rename command\n89da2852e [Yong Zhang] Fix error in bookieshell\na037501ee [Yong Zhang] Rename args\n4bb36b0b3 [Yong Zhang] Fix imports postion\ne41a742d3 [Yong Zhang] Add unit test for command `autorecovery`\nb0c91f704 [Yong Zhang] Rename file\ncb06f66de [Yong Zhang] Migrate command `autorecovery`\ned008f278 [Yong Zhang] Migrate command `whoisauditor`\n5b8e0971a [Yong Zhang] Migrate command `Whatisinstanceid`\n90c79444d [Yong Zhang] Migrate command `rebuild-db-ledger-locations-index`\n848f8527f [Nicolas Michael] ISSUE #2053: Bugfix for Percentile Calculation in FastCodahale Timer Implementation\n06f2b6f50 [Yong Zhang] Migrate command `updateledgers`\n7ad5849b1 [Yong Zhang] Migrate command `regenerate-interleaved-storage-index-file`\nd4dbb6bfb [Dongfa,Huang] Avoid useless verify if LedgerEntryRequest completed\n5c150f283 [Enrico Olivelli] Release notes for 4.9.1\n1246826ba [Yong Zhang] Migrate command `recover`\n1d4cc71fd [Yong Zhang] Migrate command `localconsistencycheck`\n67f83620e [Yong Zhang] Migrate command `readledger`\nbfbd6b023 [Yong Zhang] Migrate command `decommission`\nd40b8b69f [Yong Zhang] Migrate command `readlog`\n95d145a15 [Yong Zhang] Migrate command `nukeexistingcluster`\ne2b1dc7f3 [Yong Zhang] Migrate command `listunderreplicated`\n0988e12c7 [bd2019us] ISSUE #2023: change cached thread pool to fixed thread pool\n6a6d7bbd9 [Yong Zhang] Migrate command `initnewcluster`\nc391fe58d [Yong Zhang] Migrate command `readlogmetadata`\n120d67737 [Yong Zhang] Migrate command `lostbookierecoverydelay`\nbf66235e5 [Yong Zhang] Migrate command `deleteledger`\n751e55fa4 [Arvin] ISSUE #2020: close db properly to avoid open RocksDB failure at the second time\n138a7ae85 [Yong Zhang] Migrate command `metadataformat`\nb043d1694 [Yong Zhang] Migrate command `listledgers`\n4573285db [Ivan Kelly] Docker autobuild hook\ne3d807a32 [Like] Fix IDE complain as there are multi choices for error code\n9524a9f4a [Yong Zhang] Migrate command `readjournal`\n6c3f33f55 [Yong Zhang] Fix when met unexpect entry id crashed\ne35a108c7 [Like] Fix error message for unrecognized number-of-bookies\n5902ee27b [Boyang Jerry Peng] fix potential NPE when releasing entry that is null\n6aa73ce05 [Ivan Kelly] [RELEASE] Update website to include documentation for 4.8.2\n1448d12aa [Yong Zhang] Migrate command `listfilesondisk`\n4de598379 [Yong Zhang] Issue #1987: Migrate command `convert-to-interleaved-storage`\n468743e7e [Matteo Merli] In DbLedgerStorage use default values when config key is present but empty\nf26a4cae0 [Ivan Kelly] Release notes for v4.8.2\nec2636cd2 [Yong Zhang] Issue #1985: Migrate command `convert-to-db-storage`\n8cc7239ac [Yong Zhang] Issue #1982: Migrate command `bookiesanity`\nfa90f0185 [Yong Zhang] Issue #1980: Migrate command `ledger` from shell to bkctl",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/67f83620eb8ed93bf73322293deb1a1bde8d09c7",
        "file": [
            {
                "patch": "@@ -27,11 +27,6 @@\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.Lists;\n import com.google.common.util.concurrent.UncheckedExecutionException;\n-import io.netty.buffer.ByteBufUtil;\n-import io.netty.buffer.UnpooledByteBufAllocator;\n-import io.netty.channel.EventLoopGroup;\n-import io.netty.channel.nio.NioEventLoopGroup;\n-import io.netty.util.concurrent.DefaultThreadFactory;\n import java.io.File;\n import java.io.IOException;\n import java.io.Serializable;\n@@ -50,21 +45,15 @@\n import java.util.Comparator;\n import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n import java.util.SortedMap;\n import java.util.TreeMap;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n-import java.util.stream.LongStream;\n-\n import org.apache.bookkeeper.bookie.BookieException.CookieNotFoundException;\n import org.apache.bookkeeper.bookie.BookieException.InvalidCookieException;\n import org.apache.bookkeeper.bookie.storage.ldb.LocationsIndexRebuildOp;\n@@ -73,11 +62,9 @@\n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.client.BookKeeperAdmin;\n import org.apache.bookkeeper.client.LedgerEntry;\n-import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.UpdateLedgerOp;\n import org.apache.bookkeeper.client.api.LedgerMetadata;\n import org.apache.bookkeeper.common.annotation.InterfaceAudience.Private;\n-import org.apache.bookkeeper.common.util.OrderedExecutor;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.discover.RegistrationManager;\n@@ -86,12 +73,8 @@\n import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n import org.apache.bookkeeper.meta.zk.ZKMetadataDriverBase;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n-import org.apache.bookkeeper.proto.BookieClient;\n-import org.apache.bookkeeper.proto.BookieClientImpl;\n-import org.apache.bookkeeper.proto.BookieProtocol;\n import org.apache.bookkeeper.replication.AuditorElector;\n import org.apache.bookkeeper.replication.ReplicationException;\n-import org.apache.bookkeeper.stats.NullStatsLogger;\n import org.apache.bookkeeper.tools.cli.commands.autorecovery.ListUnderReplicatedCommand;\n import org.apache.bookkeeper.tools.cli.commands.autorecovery.LostBookieRecoveryDelayCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.ConvertToDBStorageCommand;\n@@ -103,6 +86,7 @@\n import org.apache.bookkeeper.tools.cli.commands.bookie.ListFilesOnDiscCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.ListLedgersCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.ReadJournalCommand;\n+import org.apache.bookkeeper.tools.cli.commands.bookie.ReadLedgerCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.ReadLogCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.ReadLogMetadataCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.SanityTestCommand;\n@@ -772,91 +756,29 @@ String getUsage() {\n         @Override\n         int runCmd(CommandLine cmdLine) throws Exception {\n             final long ledgerId = getOptionLedgerIdValue(cmdLine, \"ledgerid\", -1);\n-            if (ledgerId == -1) {\n-                System.err.println(\"Must specify a ledger id\");\n-                return -1;\n-            }\n-\n             final long firstEntry = getOptionLongValue(cmdLine, \"firstentryid\", 0);\n             long lastEntry = getOptionLongValue(cmdLine, \"lastentryid\", -1);\n \n             boolean printMsg = cmdLine.hasOption(\"m\");\n             boolean forceRecovery = cmdLine.hasOption(\"r\");\n             final BookieSocketAddress bookie;\n+            String bookieAddress;\n             if (cmdLine.hasOption(\"b\")) {\n                 // A particular bookie was specified\n-                bookie = new BookieSocketAddress(cmdLine.getOptionValue(\"b\"));\n+                bookieAddress = cmdLine.getOptionValue(\"b\");\n             } else {\n-                bookie = null;\n-            }\n-\n-            ClientConfiguration conf = new ClientConfiguration();\n-            conf.addConfiguration(bkConf);\n-\n-            try (BookKeeperAdmin bk = new BookKeeperAdmin(conf)) {\n-                if (forceRecovery) {\n-                    // Force the opening of the ledger to trigger recovery\n-                    try (LedgerHandle lh = bk.openLedger(ledgerId)) {\n-                        if (lastEntry == -1 || lastEntry > lh.getLastAddConfirmed()) {\n-                            lastEntry = lh.getLastAddConfirmed();\n-                        }\n-                    }\n-                }\n-\n-                if (bookie == null) {\n-                    // No bookie was specified, use normal bk client\n-                    Iterator<LedgerEntry> entries = bk.readEntries(ledgerId, firstEntry, lastEntry).iterator();\n-                    while (entries.hasNext()) {\n-                        LedgerEntry entry = entries.next();\n-                        formatEntry(entry, printMsg);\n-                    }\n-                } else {\n-                    // Use BookieClient to target a specific bookie\n-                    EventLoopGroup eventLoopGroup = new NioEventLoopGroup();\n-                    OrderedExecutor executor = OrderedExecutor.newBuilder()\n-                        .numThreads(1)\n-                        .name(\"BookieClientScheduler\")\n-                        .build();\n-\n-                    ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor(\n-                        new DefaultThreadFactory(\"BookKeeperClientSchedulerPool\"));\n-\n-                    BookieClient bookieClient = new BookieClientImpl(conf, eventLoopGroup,\n-                            UnpooledByteBufAllocator.DEFAULT, executor, scheduler, NullStatsLogger.INSTANCE);\n-\n-                    LongStream.range(firstEntry, lastEntry).forEach(entryId -> {\n-                        CompletableFuture<Void> future = new CompletableFuture<>();\n-\n-                        bookieClient.readEntry(bookie, ledgerId, entryId,\n-                            (rc, ledgerId1, entryId1, buffer, ctx) -> {\n-                                if (rc != BKException.Code.OK) {\n-                                    LOG.error(\"Failed to read entry {} -- {}\", entryId1, BKException.getMessage(rc));\n-                                    future.completeExceptionally(BKException.create(rc));\n-                                    return;\n-                                }\n-\n-                                System.out.println(\"--------- Lid=\" + ledgerIdFormatter.formatLedgerId(ledgerId)\n-                                    + \", Eid=\" + entryId + \" ---------\");\n-                                if (printMsg) {\n-                                    System.out.println(\"Data: \" + ByteBufUtil.prettyHexDump(buffer));\n-                                }\n-\n-                                future.complete(null);\n-                                }, null, BookieProtocol.FLAG_NONE);\n-\n-                        try {\n-                            future.get();\n-                        } catch (Exception e) {\n-                            LOG.error(\"Error future.get while reading entries from ledger {}\", ledgerId, e);\n-                        }\n-                    });\n-\n-                    eventLoopGroup.shutdownGracefully();\n-                    executor.shutdown();\n-                    bookieClient.close();\n-                }\n+                bookieAddress = null;\n             }\n \n+            ReadLedgerCommand cmd = new ReadLedgerCommand(entryFormatter, ledgerIdFormatter);\n+            ReadLedgerCommand.ReadLedgerFlags flags = new ReadLedgerCommand.ReadLedgerFlags();\n+            flags.bookieAddresss(bookieAddress);\n+            flags.firstEntryId(firstEntry);\n+            flags.forceRecovery(forceRecovery);\n+            flags.lastEntryId(lastEntry);\n+            flags.ledgerId(ledgerId);\n+            flags.msg(printMsg);\n+            cmd.apply(bkConf, flags);\n             return 0;\n         }\n ",
                "additions": 13,
                "raw_url": "https://github.com/apache/bookkeeper/raw/67f83620eb8ed93bf73322293deb1a1bde8d09c7/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java",
                "status": "modified",
                "changes": 104,
                "deletions": 91,
                "sha": "98f276c75dcce61ebdd1f4acfa9ba3e1199adf57",
                "blob_url": "https://github.com/apache/bookkeeper/blob/67f83620eb8ed93bf73322293deb1a1bde8d09c7/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java?ref=67f83620eb8ed93bf73322293deb1a1bde8d09c7"
            },
            {
                "patch": "@@ -0,0 +1,244 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.bookkeeper.tools.cli.commands.bookie;\n+\n+import com.beust.jcommander.Parameter;\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.UnpooledByteBufAllocator;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.util.concurrent.DefaultThreadFactory;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.stream.LongStream;\n+import lombok.Setter;\n+import lombok.experimental.Accessors;\n+import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.client.BookKeeperAdmin;\n+import org.apache.bookkeeper.client.LedgerEntry;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.common.util.OrderedExecutor;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n+import org.apache.bookkeeper.proto.BookieClient;\n+import org.apache.bookkeeper.proto.BookieClientImpl;\n+import org.apache.bookkeeper.proto.BookieProtocol;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.tools.cli.helpers.BookieCommand;\n+import org.apache.bookkeeper.tools.framework.CliFlags;\n+import org.apache.bookkeeper.tools.framework.CliSpec;\n+import org.apache.bookkeeper.util.EntryFormatter;\n+import org.apache.bookkeeper.util.LedgerIdFormatter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Command to read ledger entries.\n+ */\n+public class ReadLedgerCommand extends BookieCommand<ReadLedgerCommand.ReadLedgerFlags> {\n+\n+    static final Logger LOG = LoggerFactory.getLogger(ReadLedgerCommand.class);\n+\n+    private static final String NAME = \"readledger\";\n+    private static final String DESC = \"Read a range of entries from a ledger.\";\n+\n+    EntryFormatter entryFormatter;\n+    LedgerIdFormatter ledgerIdFormatter;\n+\n+    public ReadLedgerCommand() {\n+        this(new ReadLedgerFlags());\n+    }\n+\n+    public ReadLedgerCommand(EntryFormatter entryFormatter, LedgerIdFormatter ledgerIdFormatter) {\n+        this(new ReadLedgerFlags());\n+        this.ledgerIdFormatter = ledgerIdFormatter;\n+        this.entryFormatter = entryFormatter;\n+    }\n+\n+    private ReadLedgerCommand(ReadLedgerFlags flags) {\n+        super(CliSpec.<ReadLedgerFlags>newBuilder()\n+                  .withName(NAME)\n+                  .withDescription(DESC)\n+                  .withFlags(flags)\n+                  .build());\n+    }\n+\n+    /**\n+     * Flags for read ledger command.\n+     */\n+    @Accessors(fluent = true)\n+    @Setter\n+    public static class ReadLedgerFlags extends CliFlags {\n+\n+        @Parameter(names = { \"-m\", \"--msg\" }, description = \"Print message body\")\n+        private boolean msg;\n+\n+        @Parameter(names = { \"-l\", \"--ledgerid\" }, description = \"Ledger ID\")\n+        private long ledgerId = -1;\n+\n+        @Parameter(names = { \"-fe\", \"--firstentryid\" }, description = \"First Entry ID\")\n+        private long firstEntryId = -1;\n+\n+        @Parameter(names = { \"-le\", \"--lastentryid\" }, description = \"Last Entry ID\")\n+        private long lastEntryId = -1;\n+\n+        @Parameter(names = { \"-r\", \"--force-recovery\" },\n+            description = \"Ensure the ledger is properly closed before reading\")\n+        private boolean forceRecovery;\n+\n+        @Parameter(names = { \"-b\", \"--bookie\" }, description = \"Only read from a specific bookie\")\n+        private String bookieAddresss;\n+\n+        @Parameter(names = { \"-lf\", \"--ledgeridformatter\" }, description = \"Set ledger id formatter\")\n+        private String ledgerIdFormatter;\n+\n+        @Parameter(names = { \"-ef\", \"--entryformatter\" }, description = \"Set entry formatter\")\n+        private String entryFormatter;\n+    }\n+\n+    @Override\n+    public boolean apply(ServerConfiguration conf, ReadLedgerFlags cmdFlags) {\n+        if (cmdFlags.ledgerIdFormatter != null && ledgerIdFormatter == null) {\n+            this.ledgerIdFormatter = LedgerIdFormatter.newLedgerIdFormatter(cmdFlags.ledgerIdFormatter, conf);\n+        } else if (ledgerIdFormatter == null) {\n+            this.ledgerIdFormatter = LedgerIdFormatter.newLedgerIdFormatter(conf);\n+        }\n+\n+        if (cmdFlags.entryFormatter != null && entryFormatter == null) {\n+            this.entryFormatter = EntryFormatter.newEntryFormatter(cmdFlags.entryFormatter, conf);\n+        } else if (entryFormatter == null) {\n+            this.entryFormatter = EntryFormatter.newEntryFormatter(conf);\n+        }\n+\n+        try {\n+            return readledger(conf, cmdFlags);\n+        } catch (Exception e) {\n+            throw new UncheckedExecutionException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private boolean readledger(ServerConfiguration serverConf, ReadLedgerFlags flags)\n+        throws InterruptedException, BKException, IOException {\n+\n+        long lastEntry = flags.lastEntryId;\n+\n+        final BookieSocketAddress bookie;\n+        if (flags.bookieAddresss != null) {\n+            // A particular bookie was specified\n+            bookie = new BookieSocketAddress(flags.bookieAddresss);\n+        } else {\n+            bookie = null;\n+        }\n+\n+        ClientConfiguration conf = new ClientConfiguration();\n+        conf.addConfiguration(serverConf);\n+\n+        try (BookKeeperAdmin bk = new BookKeeperAdmin(conf)) {\n+            if (flags.forceRecovery) {\n+                // Force the opening of the ledger to trigger recovery\n+                try (LedgerHandle lh = bk.openLedger(flags.ledgerId)) {\n+                    if (lastEntry == -1 || lastEntry > lh.getLastAddConfirmed()) {\n+                        lastEntry = lh.getLastAddConfirmed();\n+                    }\n+                }\n+            }\n+\n+            if (bookie == null) {\n+                // No bookie was specified, use normal bk client\n+                Iterator<LedgerEntry> entries = bk.readEntries(flags.ledgerId, flags.firstEntryId, lastEntry)\n+                                                  .iterator();\n+                while (entries.hasNext()) {\n+                    LedgerEntry entry = entries.next();\n+                    formatEntry(entry, flags.msg);\n+                }\n+            } else {\n+                // Use BookieClient to target a specific bookie\n+                EventLoopGroup eventLoopGroup = new NioEventLoopGroup();\n+                OrderedExecutor executor = OrderedExecutor.newBuilder()\n+                                                          .numThreads(1)\n+                                                          .name(\"BookieClientScheduler\")\n+                                                          .build();\n+\n+                ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor(\n+                    new DefaultThreadFactory(\"BookKeeperClientSchedulerPool\"));\n+\n+                BookieClient bookieClient = new BookieClientImpl(conf, eventLoopGroup, UnpooledByteBufAllocator.DEFAULT,\n+                                                                 executor, scheduler, NullStatsLogger.INSTANCE);\n+\n+                LongStream.range(flags.firstEntryId, lastEntry).forEach(entryId -> {\n+                    CompletableFuture<Void> future = new CompletableFuture<>();\n+\n+                    bookieClient.readEntry(bookie, flags.ledgerId, entryId,\n+                                           (rc, ledgerId1, entryId1, buffer, ctx) -> {\n+                                               if (rc != BKException.Code.OK) {\n+                                                   LOG.error(\"Failed to read entry {} -- {}\", entryId1,\n+                                                             BKException.getMessage(rc));\n+                                                   future.completeExceptionally(BKException.create(rc));\n+                                                   return;\n+                                               }\n+\n+                                               System.out.println(\n+                                                   \"--------- Lid=\" + ledgerIdFormatter.formatLedgerId(flags.ledgerId)\n+                                                   + \", Eid=\" + entryId + \" ---------\");\n+                                               if (flags.msg) {\n+                                                   System.out.println(\"Data: \" + ByteBufUtil.prettyHexDump(buffer));\n+                                               }\n+\n+                                               future.complete(null);\n+                                           }, null, BookieProtocol.FLAG_NONE);\n+\n+                    try {\n+                        future.get();\n+                    } catch (Exception e) {\n+                        LOG.error(\"Error future.get while reading entries from ledger {}\", flags.ledgerId, e);\n+                    }\n+                });\n+\n+                eventLoopGroup.shutdownGracefully();\n+                executor.shutdown();\n+                bookieClient.close();\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Format the entry into a readable format.\n+     *\n+     * @param entry\n+     *          ledgerentry to print\n+     * @param printMsg\n+     *          Whether printing the message body\n+     */\n+    private void formatEntry(LedgerEntry entry, boolean printMsg) {\n+        long ledgerId = entry.getLedgerId();\n+        long entryId = entry.getEntryId();\n+        long entrySize = entry.getLength();\n+        System.out.println(\"--------- Lid=\" + ledgerIdFormatter.formatLedgerId(ledgerId) + \", Eid=\" + entryId\n+                           + \", EntrySize=\" + entrySize + \" ---------\");\n+        if (printMsg) {\n+            entryFormatter.formatEntry(entry.getEntry());\n+        }\n+    }\n+}",
                "additions": 244,
                "raw_url": "https://github.com/apache/bookkeeper/raw/67f83620eb8ed93bf73322293deb1a1bde8d09c7/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/cli/commands/bookie/ReadLedgerCommand.java",
                "status": "added",
                "changes": 244,
                "deletions": 0,
                "sha": "98c1b11cf111bb5223ed22648f77c5aad7cf8e22",
                "blob_url": "https://github.com/apache/bookkeeper/blob/67f83620eb8ed93bf73322293deb1a1bde8d09c7/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/cli/commands/bookie/ReadLedgerCommand.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/cli/commands/bookie/ReadLedgerCommand.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/cli/commands/bookie/ReadLedgerCommand.java?ref=67f83620eb8ed93bf73322293deb1a1bde8d09c7"
            },
            {
                "patch": "@@ -30,6 +30,7 @@\n import org.apache.bookkeeper.tools.cli.commands.bookie.ListFilesOnDiscCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.ListLedgersCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.ReadJournalCommand;\n+import org.apache.bookkeeper.tools.cli.commands.bookie.ReadLedgerCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.ReadLogCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.ReadLogMetadataCommand;\n import org.apache.bookkeeper.tools.cli.commands.bookie.SanityTestCommand;\n@@ -60,6 +61,7 @@\n         .addCommand(new ListLedgersCommand())\n         .addCommand(new ConvertToInterleavedStorageCommand())\n         .addCommand(new ReadJournalCommand())\n+        .addCommand(new ReadLedgerCommand())\n         .addCommand(new ReadLogCommand())\n         .addCommand(new ReadLogMetadataCommand())\n         .build();",
                "additions": 2,
                "raw_url": "https://github.com/apache/bookkeeper/raw/67f83620eb8ed93bf73322293deb1a1bde8d09c7/tools/ledger/src/main/java/org/apache/bookkeeper/tools/cli/commands/BookieCommandGroup.java",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "51e579f027c71c09dd6a3e0217738fd94ebbc4a7",
                "blob_url": "https://github.com/apache/bookkeeper/blob/67f83620eb8ed93bf73322293deb1a1bde8d09c7/tools/ledger/src/main/java/org/apache/bookkeeper/tools/cli/commands/BookieCommandGroup.java",
                "filename": "tools/ledger/src/main/java/org/apache/bookkeeper/tools/cli/commands/BookieCommandGroup.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/tools/ledger/src/main/java/org/apache/bookkeeper/tools/cli/commands/BookieCommandGroup.java?ref=67f83620eb8ed93bf73322293deb1a1bde8d09c7"
            },
            {
                "patch": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.bookkeeper.tools.cli.commands.bookie;\n+\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.powermock.api.mockito.PowerMockito.mock;\n+import static org.powermock.api.mockito.PowerMockito.verifyNew;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+\n+import io.netty.buffer.UnpooledByteBufAllocator;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.util.concurrent.DefaultThreadFactory;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import org.apache.bookkeeper.client.BookKeeperAdmin;\n+import org.apache.bookkeeper.client.LedgerEntry;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.common.util.OrderedExecutor;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n+import org.apache.bookkeeper.proto.BookieClientImpl;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.tools.cli.helpers.BookieCommandTestBase;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+/**\n+ * Unit test for {@link ReadLedgerCommand}.\n+ */\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({ ReadLedgerCommand.class, BookKeeperAdmin.class, BookieSocketAddress.class, ClientConfiguration.class,\n+    LedgerHandle.class, LedgerEntry.class, OrderedExecutor.class })\n+public class ReadLedgerCommandTest extends BookieCommandTestBase {\n+\n+    @Mock\n+    private BookieSocketAddress bookieSocketAddress;\n+\n+    @Mock\n+    private ClientConfiguration clientConfiguration;\n+\n+    @Mock\n+    private BookKeeperAdmin bookKeeperAdmin;\n+\n+    @Mock\n+    private LedgerHandle ledgerHandle;\n+\n+    @Mock\n+    private LedgerEntry entry;\n+\n+    @Mock\n+    private NioEventLoopGroup nioEventLoopGroup;\n+\n+    @Mock\n+    private OrderedExecutor orderedExecutor;\n+\n+    @Mock\n+    private ScheduledExecutorService scheduledExecutorService;\n+\n+    @Mock\n+    private DefaultThreadFactory defaultThreadFactory;\n+\n+    @Mock\n+    private BookieClientImpl bookieClient;\n+\n+    public ReadLedgerCommandTest() {\n+        super(3, 0);\n+    }\n+\n+    @Override\n+    public void setup() throws Exception {\n+        super.setup();\n+\n+        PowerMockito.whenNew(ServerConfiguration.class).withNoArguments().thenReturn(conf);\n+        PowerMockito.whenNew(BookieSocketAddress.class).withArguments(anyString()).thenReturn(bookieSocketAddress);\n+        PowerMockito.whenNew(ClientConfiguration.class).withNoArguments().thenReturn(clientConfiguration);\n+        PowerMockito.whenNew(BookKeeperAdmin.class).withParameterTypes(ClientConfiguration.class)\n+                    .withArguments(eq(clientConfiguration)).thenReturn(bookKeeperAdmin);\n+\n+        when(bookKeeperAdmin.openLedger(anyLong())).thenReturn(ledgerHandle);\n+        when(ledgerHandle.getLastAddConfirmed()).thenReturn(1L);\n+\n+        List<LedgerEntry> entries = new LinkedList<>();\n+        entries.add(entry);\n+        when(entry.getLedgerId()).thenReturn(1L);\n+        when(entry.getEntryId()).thenReturn(1L);\n+        when(entry.getLength()).thenReturn(1L);\n+\n+        when(bookKeeperAdmin.readEntries(anyLong(), anyLong(), anyLong())).thenReturn(entries);\n+\n+        PowerMockito.whenNew(NioEventLoopGroup.class).withNoArguments().thenReturn(nioEventLoopGroup);\n+\n+        PowerMockito.mockStatic(OrderedExecutor.class);\n+        OrderedExecutor.Builder builder = mock(OrderedExecutor.Builder.class);\n+        when(OrderedExecutor.newBuilder()).thenReturn(builder);\n+        when(builder.numThreads(anyInt())).thenCallRealMethod();\n+        when(builder.name(anyString())).thenCallRealMethod();\n+        when(builder.build()).thenReturn(orderedExecutor);\n+\n+        PowerMockito.mockStatic(Executors.class);\n+        PowerMockito.whenNew(DefaultThreadFactory.class).withArguments(anyString()).thenReturn(defaultThreadFactory);\n+        when(Executors.newSingleThreadScheduledExecutor(eq(defaultThreadFactory))).thenReturn(scheduledExecutorService);\n+\n+        PowerMockito.whenNew(BookieClientImpl.class)\n+                    .withArguments(eq(clientConfiguration), eq(nioEventLoopGroup), eq(UnpooledByteBufAllocator.DEFAULT),\n+                                   eq(orderedExecutor), eq(scheduledExecutorService), eq(NullStatsLogger.INSTANCE))\n+                    .thenReturn(bookieClient);\n+\n+\n+    }\n+\n+    @Test\n+    public void testWithoutBookieAddress() throws Exception {\n+        ReadLedgerCommand cmd = new ReadLedgerCommand();\n+        Assert.assertTrue(cmd.apply(bkFlags, new String[] { \"-r\" }));\n+        verifyNew(ClientConfiguration.class, times(1)).withNoArguments();\n+        verify(clientConfiguration, times(1)).addConfiguration(eq(conf));\n+        verifyNew(BookKeeperAdmin.class, times(1)).withArguments(eq(clientConfiguration));\n+        verify(bookKeeperAdmin, times(1)).openLedger(anyLong());\n+        verify(ledgerHandle, times(1)).getLastAddConfirmed();\n+        verify(bookKeeperAdmin, times(1)).readEntries(anyLong(), anyLong(), anyLong());\n+        verify(entry, times(1)).getLedgerId();\n+        verify(entry, times(1)).getEntryId();\n+        verify(entry, times(1)).getLength();\n+    }\n+\n+    @Test\n+    public void testWithBookieAddress() throws Exception {\n+        ReadLedgerCommand cmd = new ReadLedgerCommand();\n+        Assert.assertTrue(cmd.apply(bkFlags, new String[] { \"-b\", \"localhost:9000\" }));\n+        verifyNew(NioEventLoopGroup.class, times(1)).withNoArguments();\n+        verifyNew(DefaultThreadFactory.class, times(1)).withArguments(anyString());\n+        verifyNew(BookieClientImpl.class, times(1))\n+            .withArguments(eq(clientConfiguration), eq(nioEventLoopGroup), eq(UnpooledByteBufAllocator.DEFAULT),\n+                           eq(orderedExecutor), eq(scheduledExecutorService), eq(NullStatsLogger.INSTANCE));\n+        verify(nioEventLoopGroup, times(1)).shutdownGracefully();\n+        verify(orderedExecutor, times(1)).shutdown();\n+        verify(bookieClient, times(1)).close();\n+    }\n+\n+}",
                "additions": 169,
                "raw_url": "https://github.com/apache/bookkeeper/raw/67f83620eb8ed93bf73322293deb1a1bde8d09c7/tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/bookie/ReadLedgerCommandTest.java",
                "status": "added",
                "changes": 169,
                "deletions": 0,
                "sha": "7eb651d0472095ea23d4938b3f7ffb98cf4e940b",
                "blob_url": "https://github.com/apache/bookkeeper/blob/67f83620eb8ed93bf73322293deb1a1bde8d09c7/tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/bookie/ReadLedgerCommandTest.java",
                "filename": "tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/bookie/ReadLedgerCommandTest.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/bookie/ReadLedgerCommandTest.java?ref=67f83620eb8ed93bf73322293deb1a1bde8d09c7"
            }
        ],
        "bug_id": "bookkeeper_9",
        "parent": "https://github.com/apache/bookkeeper/commit/bfbd6b023b68ca0c23bf976274279ac8338181f5",
        "message": "Migrate command `readledger`\n\nDescriptions of the changes in this PR:\r\n\r\n#2040 \r\n\r\n- Using `bkctl` run `readledger`\r\n\r\n```\r\nRead a range of entries from a ledger.\r\n\r\nUsage:  bkctl bookie readledger [flags]\r\n\r\nFlags:\r\n\r\n    -b, --bookie\r\n        Only read from a specific bookie\r\n\r\n    -ef, --entryformatter\r\n        Set entry formatter\r\n\r\n    -fe, --firstentryid\r\n        First Entry ID\r\n\r\n    -r, --force-recovery\r\n        Ensure the ledger is properly closed before reading\r\n\r\n    -le, --lastentryid\r\n        Last Entry ID\r\n\r\n    -l, --ledgerid\r\n        Ledger ID\r\n\r\n    -lf, --ledgeridformatter\r\n        Set ledger id formatter\r\n\r\n    -m, --msg\r\n        Print message body\r\n\r\n\r\n    -h, --help\r\n        Display help information\r\n```\r\n\n\nReviewers: Jia Zhai <zhaijia@apache.org>, Sijie Guo <sijie@apache.org>\n\nThis closes #2041 from zymap/command-readledger and squashes the following commits:\n\n56b0a4581 [Yong Zhang] Remove unused import\n30dafa85f [Yong Zhang] Merge branch 'master' into command-readledger\nbfbd6b023 [Yong Zhang] Migrate command `decommission`\nd40b8b69f [Yong Zhang] Migrate command `readlog`\n95d145a15 [Yong Zhang] Migrate command `nukeexistingcluster`\ne2b1dc7f3 [Yong Zhang] Migrate command `listunderreplicated`\nc465c4761 [Yong Zhang] Remove unused import\n0988e12c7 [bd2019us] ISSUE #2023: change cached thread pool to fixed thread pool\n6a6d7bbd9 [Yong Zhang] Migrate command `initnewcluster`\n931df8c2c [Sijie Guo] Merge branch 'master' into command-readledger\nc391fe58d [Yong Zhang] Migrate command `readlogmetadata`\n120d67737 [Yong Zhang] Migrate command `lostbookierecoverydelay`\nbf66235e5 [Yong Zhang] Migrate command `deleteledger`\n87e6644f2 [Yong Zhang] Fix some conflict\n5ae05f0d2 [Yong Zhang] Migrate command `readledger`\n751e55fa4 [Arvin] ISSUE #2020: close db properly to avoid open RocksDB failure at the second time\n138a7ae85 [Yong Zhang] Migrate command `metadataformat`\nb043d1694 [Yong Zhang] Migrate command `listledgers`\n4573285db [Ivan Kelly] Docker autobuild hook\ne3d807a32 [Like] Fix IDE complain as there are multi choices for error code\n9524a9f4a [Yong Zhang] Migrate command `readjournal`\n6c3f33f55 [Yong Zhang] Fix when met unexpect entry id crashed\ne35a108c7 [Like] Fix error message for unrecognized number-of-bookies\n5902ee27b [Boyang Jerry Peng] fix potential NPE when releasing entry that is null\n6aa73ce05 [Ivan Kelly] [RELEASE] Update website to include documentation for 4.8.2\n1448d12aa [Yong Zhang] Migrate command `listfilesondisk`\n4de598379 [Yong Zhang] Issue #1987: Migrate command `convert-to-interleaved-storage`\n468743e7e [Matteo Merli] In DbLedgerStorage use default values when config key is present but empty\nf26a4cae0 [Ivan Kelly] Release notes for v4.8.2\nec2636cd2 [Yong Zhang] Issue #1985: Migrate command `convert-to-db-storage`\n8cc7239ac [Yong Zhang] Issue #1982: Migrate command `bookiesanity`\nfa90f0185 [Yong Zhang] Issue #1980: Migrate command `ledger` from shell to bkctl",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/fbc06ef3139ca857c60a2edbc209c8b088e979df",
        "file": [
            {
                "patch": "@@ -573,6 +573,10 @@ public BookKeeper(ClientConfiguration conf, ZooKeeper zk, EventLoopGroup eventLo\n         addEntryQuorumTimeoutNanos = 0;\n     }\n \n+    long getAddEntryQuorumTimeoutNanos() {\n+        return addEntryQuorumTimeoutNanos;\n+    }\n+\n \n     public int getExplicitLacInterval() {\n         return explicitLacInterval;",
                "additions": 4,
                "raw_url": "https://github.com/apache/bookkeeper/raw/fbc06ef3139ca857c60a2edbc209c8b088e979df/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java",
                "status": "modified",
                "changes": 4,
                "deletions": 0,
                "sha": "b65714763ebe62465d0fcbddec5ab258c9811c27",
                "blob_url": "https://github.com/apache/bookkeeper/blob/fbc06ef3139ca857c60a2edbc209c8b088e979df/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java?ref=fbc06ef3139ca857c60a2edbc209c8b088e979df"
            },
            {
                "patch": "@@ -223,6 +223,10 @@ public void safeRun() {\n         }\n     }\n \n+    BookKeeper getBk() {\n+        return bk;\n+    }\n+\n     protected void initializeExplicitLacFlushPolicy() {\n         if (!metadata.isClosed() && !(this instanceof ReadOnlyLedgerHandle) && bk.getExplicitLacInterval() > 0) {\n             explicitLacFlushPolicy = new ExplicitLacFlushPolicy.ExplicitLacFlushPolicyImpl(this);",
                "additions": 4,
                "raw_url": "https://github.com/apache/bookkeeper/raw/fbc06ef3139ca857c60a2edbc209c8b088e979df/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java",
                "status": "modified",
                "changes": 4,
                "deletions": 0,
                "sha": "eebe43ce9c840106f015fa9597a71be67ab8ed43",
                "blob_url": "https://github.com/apache/bookkeeper/blob/fbc06ef3139ca857c60a2edbc209c8b088e979df/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=fbc06ef3139ca857c60a2edbc209c8b088e979df"
            },
            {
                "patch": "@@ -92,10 +92,10 @@ static PendingAddOp create(LedgerHandle lh, ByteBuf payload, AddCallbackWithLate\n         op.entryLength = payload.readableBytes();\n \n         op.completed = false;\n-        op.ackSet = lh.distributionSchedule.getAckSet();\n-        op.addOpLogger = lh.bk.getAddOpLogger();\n-        op.addOpUrCounter = lh.bk.getAddOpUrCounter();\n-        op.timeoutNanos = lh.bk.addEntryQuorumTimeoutNanos;\n+        op.ackSet = lh.getDistributionSchedule().getAckSet();\n+        op.addOpLogger = lh.getBk().getAddOpLogger();\n+        op.addOpUrCounter = lh.getBk().getAddOpUrCounter();\n+        op.timeoutNanos = lh.getBk().getAddEntryQuorumTimeoutNanos();\n         op.pendingWriteRequests = 0;\n         op.callbackTriggered = false;\n         op.hasRun = false;\n@@ -422,7 +422,8 @@ private void maybeRecycle() {\n             ReferenceCountUtil.release(toSend);\n             toSend = null;\n         }\n-        if (toSend == null && pendingWriteRequests == 0) {\n+        // only recycle a pending add op after it has been run.\n+        if (hasRun && toSend == null && pendingWriteRequests == 0) {\n             recyclePendAddOpObject();\n         }\n     }",
                "additions": 6,
                "raw_url": "https://github.com/apache/bookkeeper/raw/fbc06ef3139ca857c60a2edbc209c8b088e979df/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java",
                "status": "modified",
                "changes": 11,
                "deletions": 5,
                "sha": "dd5058ef091ef6a287103f9d7be9a13f84bdecf7",
                "blob_url": "https://github.com/apache/bookkeeper/blob/fbc06ef3139ca857c60a2edbc209c8b088e979df/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java?ref=fbc06ef3139ca857c60a2edbc209c8b088e979df"
            },
            {
                "patch": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.bookkeeper.client;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.apache.bookkeeper.client.BKException.Code;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Unit test of {@link PendingAddOp}.\n+ */\n+public class PendingAddOpTest {\n+\n+    private BookKeeper bk;\n+    private LedgerHandle lh;\n+    private ByteBuf payload;\n+\n+    @Before\n+    public void setup() {\n+        bk = mock(BookKeeper.class);\n+        when(bk.getAddEntryQuorumTimeoutNanos()).thenReturn(1000L);\n+        when(bk.getAddOpLogger()).thenReturn(NullStatsLogger.INSTANCE.getOpStatsLogger(\"test\"));\n+        when(bk.getAddOpUrCounter()).thenReturn(NullStatsLogger.INSTANCE.getCounter(\"test\"));\n+        lh = mock(LedgerHandle.class);\n+        when(lh.getBk()).thenReturn(bk);\n+        when(lh.getDistributionSchedule())\n+            .thenReturn(new RoundRobinDistributionSchedule(3, 3, 2));\n+        byte[] data = \"test-pending-add-op\".getBytes(UTF_8);\n+        payload = Unpooled.wrappedBuffer(data);\n+        payload.writerIndex(data.length);\n+    }\n+\n+    @Test\n+    public void testExecuteAfterCancelled() {\n+        AtomicInteger rcHolder = new AtomicInteger(-0xdead);\n+        PendingAddOp op = PendingAddOp.create(\n+            lh, payload, (rc, handle, entryId, qwcLatency, ctx) -> {\n+                rcHolder.set(rc);\n+            }, null);\n+        assertSame(lh, op.lh);\n+\n+        // cancel the op.\n+        op.submitCallback(Code.NotEnoughBookiesException);\n+        // if a op is cancelled, it is not recycled until it has been run.\n+        assertSame(lh, op.lh);\n+        assertEquals(Code.NotEnoughBookiesException, rcHolder.get());\n+\n+        op.run();\n+        // after the op is run, the object is recycled.\n+        assertNull(op.lh);\n+    }\n+\n+}",
                "additions": 80,
                "raw_url": "https://github.com/apache/bookkeeper/raw/fbc06ef3139ca857c60a2edbc209c8b088e979df/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/PendingAddOpTest.java",
                "status": "added",
                "changes": 80,
                "deletions": 0,
                "sha": "e9af76ee5311ea51e6af639fb8bbfa7a14ae4883",
                "blob_url": "https://github.com/apache/bookkeeper/blob/fbc06ef3139ca857c60a2edbc209c8b088e979df/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/PendingAddOpTest.java",
                "filename": "bookkeeper-server/src/test/java/org/apache/bookkeeper/client/PendingAddOpTest.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/PendingAddOpTest.java?ref=fbc06ef3139ca857c60a2edbc209c8b088e979df"
            }
        ],
        "bug_id": "bookkeeper_10",
        "parent": "https://github.com/apache/bookkeeper/commit/3e51b8116c363604f93bdd0c6b6b71ef3387c8a8",
        "message": "ISSUE #1229: PendingAddOp can get recycled before it gets executed\n\nDescriptions of the changes in this PR:\n*Problem*\n\nThe PendingAddOp can be recycled when it is cancelled before it is executed. so it will hit NPE when it is actually executed. This is a bug introduced by #1091\n\n*Solution*\n\nOnly recycle PendingAddOp after it has been run.\n\nMaster Issue: #1229\n\nAuthor: Sijie Guo <sijie@apache.org>\n\nReviewers: Andrey Yegorov <None>, Matteo Merli <mmerli@apache.org>, Venkateswararao Jujjuri (JV) <None>\n\nThis closes #1230 from sijie/fix_npe, closes #1229",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/52cefcfae654e317f341a58da0d0a07e902eefa3",
        "file": [
            {
                "patch": "@@ -28,6 +28,7 @@\n import java.util.Vector;\n \n import javax.naming.NamingException;\n+import javax.naming.directory.Attribute;\n import javax.naming.directory.Attributes;\n import javax.naming.directory.DirContext;\n import javax.naming.directory.InitialDirContext;\n@@ -87,7 +88,20 @@ public static String reverseDns(InetAddress hostIp, String ns)\n             ictx.close();\n         }\n \n-        return attribute.get(\"PTR\").get().toString();\n+        if (null == attribute) {\n+            throw new NamingException(\"No attribute is found\");\n+        }\n+\n+        Attribute ptrAttr = attribute.get(\"PTR\");\n+        if (null == ptrAttr) {\n+            throw new NamingException(\"No PTR attribute is found\");\n+        }\n+\n+        if (null == ptrAttr.get()) {\n+            throw new NamingException(\"PTR attribute value is null\");\n+        }\n+\n+        return ptrAttr.get().toString();\n     }\n \n     /**",
                "additions": 15,
                "raw_url": "https://github.com/apache/bookkeeper/raw/52cefcfae654e317f341a58da0d0a07e902eefa3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/DNS.java",
                "status": "modified",
                "changes": 16,
                "deletions": 1,
                "sha": "308728e7beb41feedc714859a8e3bc05f6a8d3f7",
                "blob_url": "https://github.com/apache/bookkeeper/blob/52cefcfae654e317f341a58da0d0a07e902eefa3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/DNS.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/net/DNS.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/DNS.java?ref=52cefcfae654e317f341a58da0d0a07e902eefa3"
            }
        ],
        "bug_id": "bookkeeper_11",
        "parent": "https://github.com/apache/bookkeeper/commit/a36f1ab88034d6b1bdfe75e725886c2e8cca1e85",
        "message": "Issue #1287: NPE at DNS.reverse\n\nDescriptions of the changes in this PR:\n\n*Problem*\n\nNull value can be returned on retrieving attributes.\n\n*Solution*\n\nIf null value is returned, throw NamingException so cached localhost name is used.\n\nMaster Issue: #1287\n\nAuthor: Sijie Guo <sijie@apache.org>\n\nReviewers: Enrico Olivelli <eolivelli@gmail.com>\n\nThis closes #1295 from sijie/fix_dns_reverse, closes #1287",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/9bade929dd87829a8903e402f6c3e3be366a854a",
        "file": [
            {
                "patch": "@@ -2301,7 +2301,7 @@ public void process(int journalVersion, long offset, ByteBuffer entry) throws IO\n      * Print last log mark\n      */\n     protected void printLastLogMark() throws IOException {\n-        for (Journal journal : journals) {\n+        for (Journal journal : getJournals()) {\n             LogMark lastLogMark = journal.getLastLogMark().getCurMark();\n             System.out.println(\"LastLogMark: Journal Id - \" + lastLogMark.getLogFileId() + \"(\"\n                     + Long.toHexString(lastLogMark.getLogFileId()) + \".txn), Pos - \"",
                "additions": 1,
                "raw_url": "https://github.com/apache/bookkeeper/raw/9bade929dd87829a8903e402f6c3e3be366a854a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "8f9e63fedbdbf0217741e4567e9da8ee77b30912",
                "blob_url": "https://github.com/apache/bookkeeper/blob/9bade929dd87829a8903e402f6c3e3be366a854a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java?ref=9bade929dd87829a8903e402f6c3e3be366a854a"
            }
        ],
        "bug_id": "bookkeeper_12",
        "parent": "https://github.com/apache/bookkeeper/commit/fd3331a2769a29c379ed63e21ed2dc3c0f85ba25",
        "message": "BOOKKEEPER-1079: shell lastMark throws NPE\n\nAuthor: Enrico Olivelli <eolivelli@apache.org>\n\nReviewers: Sijie Guo\n\nCloses #167 from eolivelli/BOOKKEEPER-1079",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/1387b2be44686abfe78bf4efee4ad52d2d699e12",
        "file": [
            {
                "patch": "@@ -38,6 +38,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-846: TestLedgerChecker times out (rakeshr via sijie)\n \n+      BOOKKEEPER-854: NPE on InterleavedLedgerStorage.onRotateEntryLog (sijie)\n+\n     IMPROVEMENTS:\n \n       BOOKKEEPER-800: Expose whether a ledger is closed or not (ivank)",
                "additions": 2,
                "raw_url": "https://github.com/apache/bookkeeper/raw/1387b2be44686abfe78bf4efee4ad52d2d699e12/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "4415a2e112e26df1980df535ae24c9077ad2fbb8",
                "blob_url": "https://github.com/apache/bookkeeper/blob/1387b2be44686abfe78bf4efee4ad52d2d699e12/CHANGES.txt",
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=1387b2be44686abfe78bf4efee4ad52d2d699e12"
            },
            {
                "patch": "@@ -46,7 +46,7 @@ public SortedLedgerStorage(ServerConfiguration conf, LedgerManager ledgerManager\n                                LedgerDirsManager ledgerDirsManager, LedgerDirsManager indexDirsManager,\n                                final CheckpointSource checkpointSource, StatsLogger statsLogger)\n                                        throws IOException {\n-        super(conf, ledgerManager, ledgerDirsManager, indexDirsManager, null, statsLogger);\n+        super(conf, ledgerManager, ledgerDirsManager, indexDirsManager, checkpointSource, statsLogger);\n         this.memTable = new EntryMemTable(conf, checkpointSource, statsLogger);\n         this.scheduler = Executors.newSingleThreadScheduledExecutor(\n                 new ThreadFactoryBuilder()",
                "additions": 1,
                "raw_url": "https://github.com/apache/bookkeeper/raw/1387b2be44686abfe78bf4efee4ad52d2d699e12/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SortedLedgerStorage.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "da14885820987121e7293d5dd41a6569d2af5063",
                "blob_url": "https://github.com/apache/bookkeeper/blob/1387b2be44686abfe78bf4efee4ad52d2d699e12/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SortedLedgerStorage.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SortedLedgerStorage.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SortedLedgerStorage.java?ref=1387b2be44686abfe78bf4efee4ad52d2d699e12"
            }
        ],
        "bug_id": "bookkeeper_13",
        "parent": "https://github.com/apache/bookkeeper/commit/5bd2edbf82bd0c8bd9ea9e507b07d23cb856f934",
        "message": "BOOKKEEPER-854: NPE on InterleavedLedgerStorage.onRotateEntryLog (sijie)",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/c3e96a76be35a0adb6f700491dd0a8786d5b2957",
        "file": [
            {
                "patch": "@@ -64,19 +64,21 @@ public static String getZKServersFromServiceUri(URI uri) {\n         return uri.getAuthority().replace(\";\", \",\");\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public static String resolveZkServers(AbstractConfiguration<?> conf) {\n         String metadataServiceUriStr = conf.getMetadataServiceUriUnchecked();\n         if (null == metadataServiceUriStr) {\n-            return null;\n+            return conf.getZkServers();\n         }\n         URI metadataServiceUri = URI.create(metadataServiceUriStr);\n         return getZKServersFromServiceUri(metadataServiceUri);\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public static String resolveZkLedgersRootPath(AbstractConfiguration<?> conf) {\n         String metadataServiceUriStr = conf.getMetadataServiceUriUnchecked();\n         if (null == metadataServiceUriStr) {\n-            return null;\n+            return conf.getZkLedgersRootPath();\n         }\n         URI metadataServiceUri = URI.create(metadataServiceUriStr);\n         return metadataServiceUri.getPath();",
                "additions": 4,
                "raw_url": "https://github.com/apache/bookkeeper/raw/c3e96a76be35a0adb6f700491dd0a8786d5b2957/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/zk/ZKMetadataDriverBase.java",
                "status": "modified",
                "changes": 6,
                "deletions": 2,
                "sha": "a9e1a13966de1ccd78ac249d336b29846b3b8a84",
                "blob_url": "https://github.com/apache/bookkeeper/blob/c3e96a76be35a0adb6f700491dd0a8786d5b2957/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/zk/ZKMetadataDriverBase.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/zk/ZKMetadataDriverBase.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/zk/ZKMetadataDriverBase.java?ref=c3e96a76be35a0adb6f700491dd0a8786d5b2957"
            },
            {
                "patch": "@@ -110,3 +110,4 @@\n     </profile>\n   </profiles>\n </project>\n+",
                "additions": 1,
                "raw_url": "https://github.com/apache/bookkeeper/raw/c3e96a76be35a0adb6f700491dd0a8786d5b2957/stream/distributedlog/pom.xml",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "44a245f8b713a53f8f318188742bbcf6ef6cb216",
                "blob_url": "https://github.com/apache/bookkeeper/blob/c3e96a76be35a0adb6f700491dd0a8786d5b2957/stream/distributedlog/pom.xml",
                "filename": "stream/distributedlog/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/stream/distributedlog/pom.xml?ref=c3e96a76be35a0adb6f700491dd0a8786d5b2957"
            },
            {
                "patch": "@@ -89,3 +89,4 @@\n   </profiles>\n \n </project>\n+",
                "additions": 1,
                "raw_url": "https://github.com/apache/bookkeeper/raw/c3e96a76be35a0adb6f700491dd0a8786d5b2957/stream/pom.xml",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "208e6d0a1cce39d24bb14413fa2866c63f422423",
                "blob_url": "https://github.com/apache/bookkeeper/blob/c3e96a76be35a0adb6f700491dd0a8786d5b2957/stream/pom.xml",
                "filename": "stream/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/stream/pom.xml?ref=c3e96a76be35a0adb6f700491dd0a8786d5b2957"
            }
        ],
        "bug_id": "bookkeeper_14",
        "parent": "https://github.com/apache/bookkeeper/commit/3d39435d316bc05e64c4247aeb8455bcd2a96989",
        "message": "Fallback to use `getZkServers` and `getZkLedgersPath` when resolving from metadata service uri\n\nDescriptions of the changes in this PR:\n\n*Problme*\n\nDlog tests are failing because dlog is using an external zookeeper client, where both `zkServers` and `metadataServiceUri`\nare not set on client configuration. It will throw NPE when trying to resolve `zkServers` and `zkLedgersRootPath` from metadata service uri.\n\n*Solution*\n\nFallback to use deprecated `getZkServers` and `getZkLedgersPath` when metadata service uri is null\n\nRelated Issues: #1336\n\nAuthor: Sijie Guo <sijie@apache.org>\n\nReviewers: Enrico Olivelli <eolivelli@gmail.com>, Jia Zhai <None>\n\nThis closes #1338 from sijie/fix_dlog_tests",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/3ec8231c58a2ebe50c0c6a082e2feab231540116",
        "file": [
            {
                "patch": "@@ -21,8 +21,6 @@\n import static org.apache.bookkeeper.client.LedgerHandle.INVALID_ENTRY_ID;\n \n import com.google.common.base.Joiner;\n-import com.google.common.collect.LinkedListMultimap;\n-import com.google.common.collect.ListMultimap;\n import com.google.common.collect.Sets;\n import com.google.protobuf.ByteString;\n import com.google.protobuf.ExtensionRegistry;\n@@ -71,8 +69,8 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.EnumSet;\n-import java.util.Iterator;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Queue;\n import java.util.Set;\n import java.util.concurrent.TimeUnit;\n@@ -131,6 +129,7 @@\n import org.apache.bookkeeper.util.SafeRunnable;\n import org.apache.bookkeeper.util.StringUtils;\n import org.apache.bookkeeper.util.collections.ConcurrentOpenHashMap;\n+import org.apache.bookkeeper.util.collections.SynchronizedHashMultiMap;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -169,8 +168,8 @@\n \n     // Map that hold duplicated read requests. The idea is to only use this map (synchronized) when there is a duplicate\n     // read request for the same ledgerId/entryId\n-    private final ListMultimap<CompletionKey, CompletionValue> completionObjectsV2Conflicts =\n-        LinkedListMultimap.create();\n+    private final SynchronizedHashMultiMap<CompletionKey, CompletionValue> completionObjectsV2Conflicts =\n+        new SynchronizedHashMultiMap<>();\n \n     private final StatsLogger statsLogger;\n     private final OpStatsLogger readEntryOpLogger;\n@@ -867,16 +866,7 @@ public void getBookieInfo(final long requested, GetBookieInfoCallback cb, Object\n     public void checkTimeoutOnPendingOperations() {\n         int timedOutOperations = completionObjects.removeIf(timeoutCheck);\n \n-        synchronized (this) {\n-            Iterator<CompletionValue> iterator = completionObjectsV2Conflicts.values().iterator();\n-            while (iterator.hasNext()) {\n-                CompletionValue value = iterator.next();\n-                if (value.maybeTimeout()) {\n-                    ++timedOutOperations;\n-                    iterator.remove();\n-                }\n-            }\n-        }\n+        timedOutOperations += completionObjectsV2Conflicts.removeIf(timeoutCheck);\n \n         if (timedOutOperations > 0) {\n             LOG.info(\"Timed-out {} operations to channel {} for {}\",\n@@ -1020,6 +1010,9 @@ void errorOut(final CompletionKey key) {\n         CompletionValue completion = completionObjects.remove(key);\n         if (completion != null) {\n             completion.errorOut();\n+        } else {\n+            // If there's no completion object here, try in the multimap\n+            completionObjectsV2Conflicts.removeAny(key).ifPresent(c -> c.errorOut());\n         }\n     }\n \n@@ -1032,14 +1025,7 @@ void errorOut(final CompletionKey key, final int rc) {\n             completion.errorOut(rc);\n         } else {\n             // If there's no completion object here, try in the multimap\n-            synchronized (completionObjectsV2Conflicts) {\n-                if (completionObjectsV2Conflicts.containsKey(key)) {\n-                    completion = completionObjectsV2Conflicts.get(key).get(0);\n-                    completionObjectsV2Conflicts.remove(key, completion);\n-\n-                    completion.errorOut(rc);\n-                }\n-            }\n+            completionObjectsV2Conflicts.removeAny(key).ifPresent(c -> c.errorOut(rc));\n         }\n     }\n \n@@ -1068,16 +1054,10 @@ void errorOutPendingOps(int rc) {\n      */\n \n     void errorOutOutstandingEntries(int rc) {\n-        // DO NOT rewrite these using Map.Entry iterations. We want to iterate\n-        // on keys and see if we are successfully able to remove the key from\n-        // the map. Because the add and the read methods also do the same thing\n-        // in case they get a write failure on the socket. The one who\n-        // successfully removes the key from the map is the one responsible for\n-        // calling the application callback.\n-        for (CompletionKey key : completionObjectsV2Conflicts.keySet()) {\n-            while (completionObjectsV2Conflicts.get(key).size() > 0) {\n-                errorOut(key, rc);\n-            }\n+        Optional<CompletionKey> multikey = completionObjectsV2Conflicts.getAnyKey();\n+        while (multikey.isPresent()) {\n+            multikey.ifPresent(k -> errorOut(k, rc));\n+            multikey = completionObjectsV2Conflicts.getAnyKey();\n         }\n         for (CompletionKey key : completionObjects.keys()) {\n             errorOut(key, rc);\n@@ -2074,22 +2054,15 @@ private void putCompletionKeyValue(CompletionKey key, CompletionValue value) {\n         CompletionValue existingValue = completionObjects.putIfAbsent(key, value);\n         if (existingValue != null) { // will only happen for V2 keys, as V3 have unique txnid\n             // There's a pending read request on same ledger/entry. Use the multimap to track all of them\n-            synchronized (completionObjectsV2Conflicts) {\n-                completionObjectsV2Conflicts.put(key, value);\n-            }\n+            completionObjectsV2Conflicts.put(key, value);\n         }\n     }\n \n     private CompletionValue getCompletionValue(CompletionKey key) {\n         CompletionValue completionValue = completionObjects.remove(key);\n         if (completionValue == null) {\n             // If there's no completion object here, try in the multimap\n-            synchronized (this) {\n-                if (completionObjectsV2Conflicts.containsKey(key)) {\n-                    completionValue = completionObjectsV2Conflicts.get(key).get(0);\n-                    completionObjectsV2Conflicts.remove(key, completionValue);\n-                }\n-            }\n+            completionValue = completionObjectsV2Conflicts.removeAny(key).orElse(null);\n         }\n         return completionValue;\n     }",
                "additions": 15,
                "raw_url": "https://github.com/apache/bookkeeper/raw/3ec8231c58a2ebe50c0c6a082e2feab231540116/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "status": "modified",
                "changes": 57,
                "deletions": 42,
                "sha": "860079737fd36ef33143766bc751d23b564cf1bf",
                "blob_url": "https://github.com/apache/bookkeeper/blob/3ec8231c58a2ebe50c0c6a082e2feab231540116/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=3ec8231c58a2ebe50c0c6a082e2feab231540116"
            },
            {
                "patch": "@@ -0,0 +1,83 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.util.collections;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.BiPredicate;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+/**\n+ * Simple multimap implementation that only stores key reference once.\n+ *\n+ * <p>Implementation is aimed at storing PerChannelBookieClient completions when there\n+ * are duplicates. If the key is a pooled object, it must not exist once the value\n+ * has been removed from the map, which can happen with guava multimap implemenations.\n+ *\n+ * <p>With this map is implemented with pretty heavy locking, but this shouldn't be an\n+ * issue as the multimap only needs to be used in rare cases, i.e. when a user tries\n+ * to read or the same entry twice at the same time. This class should *NOT*  be used\n+ * in critical path code.\n+ *\n+ * <p>A unique key-value pair will only be stored once.\n+ */\n+public class SynchronizedHashMultiMap<K, V> {\n+\n+    HashMap<Integer, Set<Pair<K, V>>> map = new HashMap<>();\n+\n+    public synchronized void put(K k, V v) {\n+        map.computeIfAbsent(k.hashCode(), (ignore) -> new HashSet<>()).add(Pair.of(k, v));\n+    }\n+\n+    public synchronized Optional<K> getAnyKey() {\n+        return map.values().stream().findAny().flatMap(pairs -> pairs.stream().findAny().map(p -> p.getLeft()));\n+    }\n+\n+    public synchronized Optional<V> removeAny(K k) {\n+        Set<Pair<K, V>> set = map.getOrDefault(k.hashCode(), Collections.emptySet());\n+        Optional<Pair<K, V>> pair = set.stream().filter(p -> p.getLeft().equals(k)).findAny();\n+        pair.ifPresent(p -> set.remove(p));\n+        return pair.map(p -> p.getRight());\n+    }\n+\n+    public synchronized int removeIf(BiPredicate<K, V> predicate) {\n+        int removedSum = map.values().stream().mapToInt(\n+                pairs -> {\n+                    int removed = 0;\n+                    // Can't use removeIf because we need the count\n+                    Iterator<Pair<K, V>> iter = pairs.iterator();\n+                    while (iter.hasNext()) {\n+                        Pair<K, V> kv = iter.next();\n+                        if (predicate.test(kv.getLeft(), kv.getRight())) {\n+                            iter.remove();\n+                            removed++;\n+                        }\n+                    }\n+                    return removed;\n+                }).sum();\n+        map.values().removeIf((s) -> s.isEmpty());\n+        return removedSum;\n+    }\n+}",
                "additions": 83,
                "raw_url": "https://github.com/apache/bookkeeper/raw/3ec8231c58a2ebe50c0c6a082e2feab231540116/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/collections/SynchronizedHashMultiMap.java",
                "status": "added",
                "changes": 83,
                "deletions": 0,
                "sha": "6e6e3c189a6148903d15ec380e3a47893b25cd81",
                "blob_url": "https://github.com/apache/bookkeeper/blob/3ec8231c58a2ebe50c0c6a082e2feab231540116/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/collections/SynchronizedHashMultiMap.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/util/collections/SynchronizedHashMultiMap.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/collections/SynchronizedHashMultiMap.java?ref=3ec8231c58a2ebe50c0c6a082e2feab231540116"
            },
            {
                "patch": "@@ -0,0 +1,99 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.util.collections;\n+\n+import java.util.Optional;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test for SynchronizedHashMultiMap.\n+ */\n+public class SynchronizedHashMultiMapTest {\n+    @Test\n+    public void testGetAnyKey() {\n+        SynchronizedHashMultiMap<Integer, Integer> map = new SynchronizedHashMultiMap<>();\n+        Assert.assertFalse(map.getAnyKey().isPresent());\n+\n+        map.put(1, 2);\n+        Assert.assertEquals(map.getAnyKey().get(), Integer.valueOf(1));\n+\n+        map.put(1, 3);\n+        Assert.assertEquals(map.getAnyKey().get(), Integer.valueOf(1));\n+\n+        map.put(2, 4);\n+        int res = map.getAnyKey().get();\n+        Assert.assertTrue(res == 1 || res == 2);\n+\n+        map.removeIf((k, v) -> k == 1);\n+        Assert.assertEquals(map.getAnyKey().get(), Integer.valueOf(2));\n+    }\n+\n+    @Test\n+    public void testRemoveAny() {\n+        SynchronizedHashMultiMap<Integer, Integer> map = new SynchronizedHashMultiMap<>();\n+        Assert.assertFalse(map.removeAny(1).isPresent());\n+\n+        map.put(1, 2);\n+        map.put(1, 3);\n+        map.put(2, 4);\n+        map.put(2, 4);\n+\n+        Optional<Integer> v = map.removeAny(1);\n+        int firstVal = v.get();\n+        Assert.assertTrue(firstVal == 2 || firstVal == 3);\n+\n+        v = map.removeAny(1);\n+        int secondVal = v.get();\n+        Assert.assertTrue(secondVal == 2 || secondVal == 3);\n+        Assert.assertNotEquals(secondVal, firstVal);\n+\n+        v = map.removeAny(2);\n+        Assert.assertTrue(v.isPresent());\n+        Assert.assertEquals(v.get(), Integer.valueOf(4));\n+\n+        Assert.assertFalse(map.removeAny(1).isPresent());\n+        Assert.assertFalse(map.removeAny(2).isPresent());\n+        Assert.assertFalse(map.removeAny(3).isPresent());\n+    }\n+\n+    @Test\n+    public void testRemoveIf() {\n+        SynchronizedHashMultiMap<Integer, Integer> map = new SynchronizedHashMultiMap<>();\n+        Assert.assertEquals(map.removeIf((k, v) -> true), 0);\n+\n+        map.put(1, 2);\n+        map.put(1, 3);\n+        map.put(2, 4);\n+        map.put(2, 4);\n+\n+        Assert.assertEquals(map.removeIf((k, v) -> v == 4), 1);\n+        Assert.assertEquals(map.removeIf((k, v) -> k == 1), 2);\n+\n+        map.put(1, 2);\n+        map.put(1, 3);\n+        map.put(2, 4);\n+\n+        Assert.assertEquals(map.removeIf((k, v) -> false), 0);\n+        Assert.assertEquals(map.removeIf((k, v) -> true), 3);\n+    }\n+}",
                "additions": 99,
                "raw_url": "https://github.com/apache/bookkeeper/raw/3ec8231c58a2ebe50c0c6a082e2feab231540116/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/collections/SynchronizedHashMultiMapTest.java",
                "status": "added",
                "changes": 99,
                "deletions": 0,
                "sha": "f9ab747ee6048c69d2dfec01b6a740817f1d43ea",
                "blob_url": "https://github.com/apache/bookkeeper/blob/3ec8231c58a2ebe50c0c6a082e2feab231540116/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/collections/SynchronizedHashMultiMapTest.java",
                "filename": "bookkeeper-server/src/test/java/org/apache/bookkeeper/util/collections/SynchronizedHashMultiMapTest.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/collections/SynchronizedHashMultiMapTest.java?ref=3ec8231c58a2ebe50c0c6a082e2feab231540116"
            }
        ],
        "bug_id": "bookkeeper_15",
        "parent": "https://github.com/apache/bookkeeper/commit/16553057b0ddba53ac169c4fef81336e2bd26116",
        "message": "Replace guava multimap in PCBC with custom impl\n\nFor a long time PerChannelBookieClient has used guava\nLinkedListMultiMap to store conflicting V2 completion keys and\nvalues. This is problematic though. Completion keys are pooled\nobjects. When a key-value pair is stored in a LinkedListMultiMap, if\nit is the first value for that key, a collection is created for the\nvalues, and added to a top-level map using the key, and then the key\nand the value are added to the collection. When a second value is\nadded for the same key, the key and value are simply added to the\ncollection. The problem occurs when the first key is removed. PBCB\nwill recycle the key object, but this object is still being used in\nthe multimap in the top-level map. This causes all sorts of fun like\nNullPointerException and IllegalStateException.\n\nBecause of this, this patch introduces a very simple multimap\nimplementation that only stores the key one time (in the collection)\nand uses the hashCode of the key to separate the collections into\nbuckets. It's pretty inefficient, but this code it only hit in the\nrare case where a client is trying to read or write the same entry\nfrom the same ledger more than once at the same time.\n\nAuthor: Ivan Kelly <ivan@ivankelly.net>\n\nReviewers: Enrico Olivelli <eolivelli@gmail.com>\n\nThis closes #1569 from ivankelly/conc-test-flake",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/1d6b5506599accca30129348d52048b25766d1fa",
        "file": [
            {
                "patch": "@@ -129,6 +129,10 @@ protected void processPacket() {\n         } catch (BookieException e) {\n             LOG.error(\"Unauthorized access to ledger \" + read.getLedgerId(), e);\n             errorCode = BookieProtocol.EUA;\n+        } catch (Throwable t) {\n+            LOG.error(\"Unexpected exception reading at {}:{} : {}\", read.getLedgerId(), read.getEntryId(),\n+                    t.getMessage(), t);\n+            errorCode = BookieProtocol.EBADREQ;\n         }\n \n         if (LOG.isTraceEnabled()) {",
                "additions": 4,
                "raw_url": "https://github.com/apache/bookkeeper/raw/1d6b5506599accca30129348d52048b25766d1fa/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessor.java",
                "status": "modified",
                "changes": 4,
                "deletions": 0,
                "sha": "7849ca81afe25befb478cc5f2c5351b589fccc90",
                "blob_url": "https://github.com/apache/bookkeeper/blob/1d6b5506599accca30129348d52048b25766d1fa/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessor.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessor.java?ref=1d6b5506599accca30129348d52048b25766d1fa"
            },
            {
                "patch": "@@ -87,6 +87,10 @@ protected void processPacket() {\n         } catch (BookieException e) {\n             LOG.error(\"Unauthorized access to ledger \" + add.getLedgerId(), e);\n             rc = BookieProtocol.EUA;\n+        } catch (Throwable t) {\n+            LOG.error(\"Unexpected exception while writing {}@{} : {}\", add.ledgerId, add.entryId, t.getMessage(), t);\n+            // some bad request which cause unexpected exception\n+            rc = BookieProtocol.EBADREQ;\n         } finally {\n             addData.release();\n         }",
                "additions": 4,
                "raw_url": "https://github.com/apache/bookkeeper/raw/1d6b5506599accca30129348d52048b25766d1fa/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessor.java",
                "status": "modified",
                "changes": 4,
                "deletions": 0,
                "sha": "87df2d2ff9063c8da8ae31229fd192d2bff6e965",
                "blob_url": "https://github.com/apache/bookkeeper/blob/1d6b5506599accca30129348d52048b25766d1fa/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessor.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessor.java?ref=1d6b5506599accca30129348d52048b25766d1fa"
            }
        ],
        "bug_id": "bookkeeper_16",
        "parent": "https://github.com/apache/bookkeeper/commit/b8dee21a253f4d6f449e53afa5596cc6c54b189c",
        "message": "Handle unexpected throwable in Bookie V2 request processors\n\nMerging from https://github.com/yahoo/bookkeeper/commit/c54eafbe\n\nWhen getting any exception, the request processor for V2 protocol must make sure to get some response back to client. In the specific case, it was some NPE that was thrown and not handled properly.\n\nAuthor: Matteo Merli <mmerli@apache.org>\n\nReviewers: Ivan Kelly <ivank@apache.org>, Enrico Olivelli <eolivelli@gmail.com>, Sijie Guo <sijie@apache.org>\n\nThis closes #813 from merlimat/handle-throwable",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/96d82102bef3152934f564db16373b12b1689ead",
        "file": [
            {
                "patch": "@@ -720,8 +720,7 @@ public void asyncAddEntry(final byte[] data, final AddCallback cb,\n      * @param ctx\n      *            some control object\n      */\n-    public void asyncAddEntry(final long entryId, final byte[] data, final AddCallback cb, final Object ctx)\n-            throws BKException {\n+    public void asyncAddEntry(final long entryId, final byte[] data, final AddCallback cb, final Object ctx) {\n         LOG.error(\"To use this feature Ledger must be created with createLedgerAdv() interface.\");\n         cb.addComplete(BKException.Code.IllegalOpException, LedgerHandle.this, entryId, ctx);\n     }",
                "additions": 1,
                "raw_url": "https://github.com/apache/bookkeeper/raw/96d82102bef3152934f564db16373b12b1689ead/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java",
                "status": "modified",
                "changes": 3,
                "deletions": 2,
                "sha": "e77342b5b359bb57cb8d4e98126be2fa978ef1ff",
                "blob_url": "https://github.com/apache/bookkeeper/blob/96d82102bef3152934f564db16373b12b1689ead/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=96d82102bef3152934f564db16373b12b1689ead"
            },
            {
                "patch": "@@ -121,7 +121,7 @@ public long addEntry(final long entryId, byte[] data, int offset, int length) th\n      *            some control object\n      */\n     @Override\n-    public void asyncAddEntry(long entryId, byte[] data, AddCallback cb, Object ctx) throws BKException {\n+    public void asyncAddEntry(long entryId, byte[] data, AddCallback cb, Object ctx) {\n         asyncAddEntry(entryId, data, 0, data.length, cb, ctx);\n     }\n \n@@ -225,4 +225,21 @@ public void safeRun() {\n         }\n     }\n \n+    /**\n+     * LedgerHandleAdv will not allow addEntry without providing an entryId\n+     */\n+    @Override\n+    public void asyncAddEntry(ByteBuf data, AddCallback cb, Object ctx) {\n+        cb.addComplete(BKException.Code.IllegalOpException, this, LedgerHandle.INVALID_ENTRY_ID, ctx);\n+    }\n+\n+    /**\n+     * LedgerHandleAdv will not allow addEntry without providing an entryId\n+     */\n+    @Override\n+    public void asyncAddEntry(final byte[] data, final int offset, final int length,\n+                              final AddCallback cb, final Object ctx) {\n+        cb.addComplete(BKException.Code.IllegalOpException, this, LedgerHandle.INVALID_ENTRY_ID, ctx);\n+    }\n+\n }",
                "additions": 18,
                "raw_url": "https://github.com/apache/bookkeeper/raw/96d82102bef3152934f564db16373b12b1689ead/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandleAdv.java",
                "status": "modified",
                "changes": 19,
                "deletions": 1,
                "sha": "527d084dc2d8abc0892d0663bb76b981ca598d21",
                "blob_url": "https://github.com/apache/bookkeeper/blob/96d82102bef3152934f564db16373b12b1689ead/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandleAdv.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandleAdv.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandleAdv.java?ref=96d82102bef3152934f564db16373b12b1689ead"
            },
            {
                "patch": "@@ -20,6 +20,7 @@\n  */\n package org.apache.bookkeeper.client;\n \n+import io.netty.buffer.Unpooled;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n@@ -31,6 +32,8 @@\n import java.util.Map;\n import java.util.UUID;\n import java.util.HashMap;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n \n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n@@ -178,6 +181,76 @@ public void testLedgerCreateAdv() throws Exception {\n         lh.close();\n     }\n \n+    /**\n+     * Verify that LedgerHandleAdv cannnot handle addEntry without the entryId\n+     *\n+     * @throws Exception\n+     */\n+    @Test(timeout = 60000)\n+    public void testNoAddEntryLedgerCreateAdv() throws Exception {\n+\n+        ByteBuffer entry = ByteBuffer.allocate(4);\n+        entry.putInt(rng.nextInt(maxInt));\n+        entry.position(0);\n+\n+        lh = bkc.createLedgerAdv(5, 3, 2, digestType, ledgerPassword);\n+        assertTrue(lh instanceof LedgerHandleAdv);\n+\n+        try {\n+            lh.addEntry(entry.array());\n+            fail(\"using LedgerHandleAdv addEntry without entryId is forbidden\");\n+        } catch (BKException e) {\n+            assertEquals(e.getCode(), BKException.Code.IllegalOpException);\n+        }\n+\n+        try {\n+            lh.addEntry(entry.array(), 0, 4);\n+            fail(\"using LedgerHandleAdv addEntry without entryId is forbidden\");\n+        } catch (BKException e) {\n+            assertEquals(e.getCode(), BKException.Code.IllegalOpException);\n+        }\n+\n+        try {\n+            CompletableFuture<Object> done = new CompletableFuture<>();\n+            lh.asyncAddEntry(Unpooled.wrappedBuffer(entry.array()),\n+                (int rc, LedgerHandle lh1, long entryId, Object ctx) -> {\n+                SynchCallbackUtils.finish(rc, null, done);\n+            }, null);\n+            done.get();\n+        } catch (ExecutionException ee) {\n+            assertTrue(ee.getCause() instanceof BKException);\n+            BKException e = (BKException) ee.getCause();\n+            assertEquals(e.getCode(), BKException.Code.IllegalOpException);\n+        }\n+\n+        try {\n+            CompletableFuture<Object> done = new CompletableFuture<>();\n+            lh.asyncAddEntry(entry.array(),\n+                (int rc, LedgerHandle lh1, long entryId, Object ctx) -> {\n+                SynchCallbackUtils.finish(rc, null, done);\n+            }, null);\n+            done.get();\n+        } catch (ExecutionException ee) {\n+            assertTrue(ee.getCause() instanceof BKException);\n+            BKException e = (BKException) ee.getCause();\n+            assertEquals(e.getCode(), BKException.Code.IllegalOpException);\n+        }\n+\n+        try {\n+            CompletableFuture<Object> done = new CompletableFuture<>();\n+            lh.asyncAddEntry(entry.array(),0, 4,\n+                (int rc, LedgerHandle lh1, long entryId, Object ctx) -> {\n+                SynchCallbackUtils.finish(rc, null, done);\n+            }, null);\n+            done.get();\n+        } catch (ExecutionException ee) {\n+            assertTrue(ee.getCause() instanceof BKException);\n+            BKException e = (BKException) ee.getCause();\n+            assertEquals(e.getCode(), BKException.Code.IllegalOpException);\n+        }\n+        lh.close();\n+    }\n+\n     /**\n      * Verify the functionality of Advanced Ledger which accepts ledgerId as input and returns\n      * LedgerHandleAdv. LedgerHandleAdv takes entryId for addEntry, and let",
                "additions": 73,
                "raw_url": "https://github.com/apache/bookkeeper/raw/96d82102bef3152934f564db16373b12b1689ead/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java",
                "status": "modified",
                "changes": 73,
                "deletions": 0,
                "sha": "e226bb04bca50d6d4f26981c1a302f70bd6b98be",
                "blob_url": "https://github.com/apache/bookkeeper/blob/96d82102bef3152934f564db16373b12b1689ead/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java",
                "filename": "bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java?ref=96d82102bef3152934f564db16373b12b1689ead"
            }
        ],
        "bug_id": "bookkeeper_17",
        "parent": "https://github.com/apache/bookkeeper/commit/626ce687e2342b8a75005cf018540fda76ee15d8",
        "message": "Issue#243 - asyncAddEntry fails with NPE with LedgerHandlerAdv\n\nFix asyncAddEntry on LedgerHandleAdv and clean up the asyncAddEntry API, drops BKException which is never thrown in asynch functions\n\nAuthor: Enrico Olivelli <eolivelli@apache.org>\n\nReviewers: Sijie Guo\n\nThis closes #244 from eolivelli/asyncadd-adv, closes #243",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/6bb5bd09ab75b66c71827d07eb94c47ab8867c0f",
        "file": [
            {
                "patch": "@@ -1288,10 +1288,15 @@ public ServerConfiguration setNumLongPollWorkerThreads(int numThreads) {\n \n     /**\n      * Get the number of threads that should handle long poll requests.\n-     * @return\n+     *\n+     * <p>If the number of threads is zero or negative, bookie will fallback to\n+     * use read threads. If there is no read threads used, it will create a thread pool\n+     * with {@link Runtime#availableProcessors()} threads.\n+     *\n+     * @return the number of threads that should handle long poll requests, default value is 0.\n      */\n     public int getNumLongPollWorkerThreads() {\n-        return getInt(NUM_LONG_POLL_WORKER_THREADS, 10);\n+        return getInt(NUM_LONG_POLL_WORKER_THREADS, 0);\n     }\n \n     /**",
                "additions": 7,
                "raw_url": "https://github.com/apache/bookkeeper/raw/6bb5bd09ab75b66c71827d07eb94c47ab8867c0f/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java",
                "status": "modified",
                "changes": 9,
                "deletions": 2,
                "sha": "e9950fd1c9cd3257d00bedceb7677b3eeb9c4176",
                "blob_url": "https://github.com/apache/bookkeeper/blob/6bb5bd09ab75b66c71827d07eb94c47ab8867c0f/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java?ref=6bb5bd09ab75b66c71827d07eb94c47ab8867c0f"
            },
            {
                "patch": "@@ -25,7 +25,7 @@\n /**\n  * A request processor that is used for processing requests at bookie side.\n  */\n-public interface RequestProcessor {\n+public interface RequestProcessor extends AutoCloseable {\n \n     /**\n      * Close the request processor.",
                "additions": 1,
                "raw_url": "https://github.com/apache/bookkeeper/raw/6bb5bd09ab75b66c71827d07eb94c47ab8867c0f/bookkeeper-server/src/main/java/org/apache/bookkeeper/processor/RequestProcessor.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "2c8cf7af36d362e4ad2f86524d78faafa48e9d8a",
                "blob_url": "https://github.com/apache/bookkeeper/blob/6bb5bd09ab75b66c71827d07eb94c47ab8867c0f/bookkeeper-server/src/main/java/org/apache/bookkeeper/processor/RequestProcessor.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/processor/RequestProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/processor/RequestProcessor.java?ref=6bb5bd09ab75b66c71827d07eb94c47ab8867c0f"
            },
            {
                "patch": "@@ -56,6 +56,8 @@\n import java.util.concurrent.RejectedExecutionException;\n import java.util.concurrent.TimeUnit;\n \n+import lombok.AccessLevel;\n+import lombok.Getter;\n import org.apache.bookkeeper.auth.AuthProviderFactoryFactory;\n import org.apache.bookkeeper.auth.AuthToken;\n import org.apache.bookkeeper.bookie.Bookie;\n@@ -92,6 +94,7 @@\n     /**\n      * The threadpool used to execute all read entry requests issued to this server.\n      */\n+    @Getter(AccessLevel.PACKAGE)\n     private final OrderedExecutor readThreadPool;\n \n     /**\n@@ -108,6 +111,7 @@\n      * The threadpool used to execute all long poll requests issued to this server\n      * after they are done waiting.\n      */\n+    @Getter(AccessLevel.PACKAGE)\n     private final OrderedExecutor longPollThreadPool;\n \n     /**\n@@ -158,10 +162,18 @@ public BookieRequestProcessor(ServerConfiguration serverCfg, Bookie bookie,\n                 \"BookieWriteThreadPool\",\n                 serverCfg.getMaxPendingAddRequestPerThread(),\n                 statsLogger);\n-        this.longPollThreadPool = createExecutor(\n-                this.serverCfg.getNumLongPollWorkerThreads(),\n+        if (serverCfg.getNumLongPollWorkerThreads() <= 0 && readThreadPool != null) {\n+            this.longPollThreadPool = this.readThreadPool;\n+        } else {\n+            int numThreads = this.serverCfg.getNumLongPollWorkerThreads();\n+            if (numThreads <= 0) {\n+                numThreads = Runtime.getRuntime().availableProcessors();\n+            }\n+            this.longPollThreadPool = createExecutor(\n+                numThreads,\n                 \"BookieLongPollThread-\" + serverCfg.getBookiePort(),\n                 OrderedExecutor.NO_TASK_LIMIT, statsLogger);\n+        }\n         this.highPriorityThreadPool = createExecutor(\n                 this.serverCfg.getNumHighPriorityWorkerThreads(),\n                 \"BookieHighPriorityThread-\" + serverCfg.getBookiePort(),\n@@ -203,7 +215,9 @@ public BookieRequestProcessor(ServerConfiguration serverCfg, Bookie bookie,\n     public void close() {\n         shutdownExecutor(writeThreadPool);\n         shutdownExecutor(readThreadPool);\n-        shutdownExecutor(longPollThreadPool);\n+        if (serverCfg.getNumLongPollWorkerThreads() > 0 || readThreadPool == null) {\n+            shutdownExecutor(longPollThreadPool);\n+        }\n         shutdownExecutor(highPriorityThreadPool);\n     }\n \n@@ -362,7 +376,7 @@ private void processReadRequestV3(final BookkeeperProtocol.Request r, final Chan\n         final ReadEntryProcessorV3 read;\n         final OrderedExecutor threadPool;\n         if (RequestUtils.isLongPollReadRequest(r.getReadRequest())) {\n-            ExecutorService lpThread = null == longPollThreadPool ? null : longPollThreadPool.chooseThread(c);\n+            ExecutorService lpThread = longPollThreadPool.chooseThread(c);\n \n             read = new LongPollReadEntryProcessorV3(r, c, this, fenceThread,\n                                                     lpThread, requestTimer);",
                "additions": 18,
                "raw_url": "https://github.com/apache/bookkeeper/raw/6bb5bd09ab75b66c71827d07eb94c47ab8867c0f/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestProcessor.java",
                "status": "modified",
                "changes": 22,
                "deletions": 4,
                "sha": "4102e75c80c7a60ed998b8ec36fb01a90fc5744b",
                "blob_url": "https://github.com/apache/bookkeeper/blob/6bb5bd09ab75b66c71827d07eb94c47ab8867c0f/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestProcessor.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestProcessor.java?ref=6bb5bd09ab75b66c71827d07eb94c47ab8867c0f"
            },
            {
                "patch": "@@ -21,17 +21,56 @@\n package org.apache.bookkeeper.proto;\n \n import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n \n import com.google.protobuf.ByteString;\n+import org.apache.bookkeeper.bookie.Bookie;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperProtocol.AddRequest;\n import org.apache.bookkeeper.proto.BookkeeperProtocol.ReadRequest;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n import org.junit.Test;\n \n /**\n  * Test utility methods from bookie request processor.\n  */\n public class TestBookieRequestProcessor {\n+\n+    @Test\n+    public void testConstructLongPollThreads() throws Exception {\n+        // long poll threads == read threads\n+        ServerConfiguration conf = new ServerConfiguration();\n+        try (BookieRequestProcessor processor = new BookieRequestProcessor(\n+            conf, mock(Bookie.class), NullStatsLogger.INSTANCE, null)) {\n+            assertSame(processor.getReadThreadPool(), processor.getLongPollThreadPool());\n+        }\n+\n+        // force create long poll threads if there is no read threads\n+        conf = new ServerConfiguration();\n+        conf.setNumReadWorkerThreads(0);\n+        try (BookieRequestProcessor processor = new BookieRequestProcessor(\n+            conf, mock(Bookie.class), NullStatsLogger.INSTANCE, null)) {\n+            assertNull(processor.getReadThreadPool());\n+            assertNotNull(processor.getLongPollThreadPool());\n+        }\n+\n+        // long poll threads and no read threads\n+        conf = new ServerConfiguration();\n+        conf.setNumReadWorkerThreads(2);\n+        conf.setNumLongPollWorkerThreads(2);\n+        try (BookieRequestProcessor processor = new BookieRequestProcessor(\n+            conf, mock(Bookie.class), NullStatsLogger.INSTANCE, null)) {\n+            assertNotNull(processor.getReadThreadPool());\n+            assertNotNull(processor.getLongPollThreadPool());\n+            assertNotSame(processor.getReadThreadPool(), processor.getLongPollThreadPool());\n+        }\n+    }\n+\n     @Test\n     public void testFlagsV3() {\n         ReadRequest read = ReadRequest.newBuilder()",
                "additions": 39,
                "raw_url": "https://github.com/apache/bookkeeper/raw/6bb5bd09ab75b66c71827d07eb94c47ab8867c0f/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBookieRequestProcessor.java",
                "status": "modified",
                "changes": 39,
                "deletions": 0,
                "sha": "b212e49e45bbaaefb5ecab85bd3f9abc8ea3033b",
                "blob_url": "https://github.com/apache/bookkeeper/blob/6bb5bd09ab75b66c71827d07eb94c47ab8867c0f/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBookieRequestProcessor.java",
                "filename": "bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBookieRequestProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBookieRequestProcessor.java?ref=6bb5bd09ab75b66c71827d07eb94c47ab8867c0f"
            },
            {
                "patch": "@@ -107,7 +107,7 @@ bookiePort=3181\n # numReadWorkerThreads=8\n \n # The number of threads that should handle long poll requests.\n-# numLongPollWorkerThreads=10\n+# numLongPollWorkerThreads=0\n \n # The number of threads used for handling journal callback. If a zero or negative number is provided,\n # the callbacks are executed directly at force write threads.",
                "additions": 1,
                "raw_url": "https://github.com/apache/bookkeeper/raw/6bb5bd09ab75b66c71827d07eb94c47ab8867c0f/conf/bk_server.conf",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "8016a7867f2906e131db97971e525e9a4b4cbe2b",
                "blob_url": "https://github.com/apache/bookkeeper/blob/6bb5bd09ab75b66c71827d07eb94c47ab8867c0f/conf/bk_server.conf",
                "filename": "conf/bk_server.conf",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/conf/bk_server.conf?ref=6bb5bd09ab75b66c71827d07eb94c47ab8867c0f"
            },
            {
                "patch": "@@ -55,7 +55,7 @@ groups:\n     default: 8\n   - param: numLongPollWorkerThreads\n     description: The number of threads that handle long poll requests. If zero, long poll requests are handled by [Netty threads](//netty.io/wiki/thread-model.html) directly.\n-    default: 10\n+    default: 0\n   - param: numJournalCallbackThreads\n     description: The number of threads that handle journal callbacks. If zero, journal callbacks are executed directly on force write threads.\n     default: 1",
                "additions": 1,
                "raw_url": "https://github.com/apache/bookkeeper/raw/6bb5bd09ab75b66c71827d07eb94c47ab8867c0f/site/_data/config/bk_server.yaml",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "ce45f202803237568e9b342ac1346072968054d7",
                "blob_url": "https://github.com/apache/bookkeeper/blob/6bb5bd09ab75b66c71827d07eb94c47ab8867c0f/site/_data/config/bk_server.yaml",
                "filename": "site/_data/config/bk_server.yaml",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/site/_data/config/bk_server.yaml?ref=6bb5bd09ab75b66c71827d07eb94c47ab8867c0f"
            }
        ],
        "bug_id": "bookkeeper_18",
        "parent": "https://github.com/apache/bookkeeper/commit/15d583cb6162cf6beb10591ad3d0b6f436c81ea0",
        "message": "longPollThreadPool can not be null\n\nDescriptions of the changes in this PR:\n\n*Problem*\n\nThe long polling logic is built with the assumption that there is a thread pool for scheduling deferred reads.\nSo if people happens to set `numLongPollWorkerThreads` to zero or negative, a null value is passed into long poll requests which causes NPE.\n\n*Solution*\n\nIf `numLongPollWorkerThreads` is set to zero or negative, fall back to use read thread pool. If there is no read thread pool, create a thread pool\naligned with num processors.\n\nWith this change, turn the default value of `long poll threads` to zero. so no additional threads are needed if long poll feature is not used (e.g. at pulsar).\n\nAuthor: Sijie Guo <sijie@apache.org>\n\nReviewers: Enrico Olivelli <eolivelli@gmail.com>, Yiming Zang <yzang2016@gmail.com>, Matteo Merli <mmerli@apache.org>\n\nThis closes #1308 from sijie/validate_number_long_poll_threads",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/cefdeb6e3c6f4231ca8d09e93cc7f3dedd3a058f",
        "file": [
            {
                "patch": "@@ -45,13 +45,23 @@\n \n     private final Handle<RecyclableArrayList<T>> handle;\n \n+    /**\n+     * Default non-pooled instance.\n+     */\n+    public RecyclableArrayList() {\n+        super();\n+        this.handle = null;\n+    }\n+\n     private RecyclableArrayList(Handle<RecyclableArrayList<T>> handle, int initialCapacity) {\n         super(initialCapacity);\n         this.handle = handle;\n     }\n \n     public void recycle() {\n         clear();\n-        handle.recycle(this);\n+        if (handle != null) {\n+            handle.recycle(this);\n+        }\n     }\n }",
                "additions": 11,
                "raw_url": "https://github.com/apache/bookkeeper/raw/cefdeb6e3c6f4231ca8d09e93cc7f3dedd3a058f/bookkeeper-common/src/main/java/org/apache/bookkeeper/common/collections/RecyclableArrayList.java",
                "status": "modified",
                "changes": 12,
                "deletions": 1,
                "sha": "4915d7749acf27a073d39df332924bece3819ec1",
                "blob_url": "https://github.com/apache/bookkeeper/blob/cefdeb6e3c6f4231ca8d09e93cc7f3dedd3a058f/bookkeeper-common/src/main/java/org/apache/bookkeeper/common/collections/RecyclableArrayList.java",
                "filename": "bookkeeper-common/src/main/java/org/apache/bookkeeper/common/collections/RecyclableArrayList.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-common/src/main/java/org/apache/bookkeeper/common/collections/RecyclableArrayList.java?ref=cefdeb6e3c6f4231ca8d09e93cc7f3dedd3a058f"
            },
            {
                "patch": "@@ -66,7 +66,7 @@\n \n     private static final RecyclableArrayList.Recycler<QueueEntry> entryListRecycler =\n         new RecyclableArrayList.Recycler<QueueEntry>();\n-    private static final RecyclableArrayList<QueueEntry> EMPTY_ARRAY_LIST = entryListRecycler.newInstance();\n+    private static final RecyclableArrayList<QueueEntry> EMPTY_ARRAY_LIST = new RecyclableArrayList<>();\n \n     /**\n      * Filter to pickup journals.",
                "additions": 1,
                "raw_url": "https://github.com/apache/bookkeeper/raw/cefdeb6e3c6f4231ca8d09e93cc7f3dedd3a058f/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "e21f4d133694a63e1af7f9f933edc674c1d9edb1",
                "blob_url": "https://github.com/apache/bookkeeper/blob/cefdeb6e3c6f4231ca8d09e93cc7f3dedd3a058f/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java?ref=cefdeb6e3c6f4231ca8d09e93cc7f3dedd3a058f"
            }
        ],
        "bug_id": "bookkeeper_19",
        "parent": "https://github.com/apache/bookkeeper/commit/59e48a390c1caa12adb7cc89afd2f9d48790a674",
        "message": "Fixed Journal static empty array list recycling\n\nWhen `journalSyncData=false`, we passing `EMPTY_ARRAY_LIST` to the `ForceWriteThread` when the journal is rolled over.\n\nI have seen this exception:\n\n```\n18:39:52.285 [ForceWriteThread] ERROR org.apache.bookkeeper.bookie.BookieCriticalThread - Uncaught exception in thread ForceWriteThread and is exiting!\njava.lang.NullPointerException: null\n\tat io.netty.util.Recycler$DefaultHandle.recycle(Recycler.java:219) ~[io.netty-netty-all-4.1.21.Final.jar:4.1.21.Final]\n\tat org.apache.bookkeeper.common.collections.RecyclableArrayList.recycle(RecyclableArrayList.java:55) ~[org.apache.bookkeeper-bookkeeper-server-shaded-4.7.0-SNAPSHOT.jar:4.7.0-SNAPSHOT]\n\tat org.apache.bookkeeper.bookie.Journal$ForceWriteRequest.recycle(Journal.java:402) ~[org.apache.bookkeeper-bookkeeper-server-shaded-4.7.0-SNAPSHOT.jar:4.7.0-SNAPSHOT]\n\tat org.apache.bookkeeper.bookie.Journal$ForceWriteRequest.access$1(Journal.java:399) ~[org.apache.bookkeeper-bookkeeper-server-shaded-4.7.0-SNAPSHOT.jar:4.7.0-SNAPSHOT]\n\tat org.apache.bookkeeper.bookie.Journal$ForceWriteThread.run(Journal.java:506) ~[org.apache.bookkeeper-bookkeeper-server-shaded-4.7.0-SNAPSHOT.jar:4.7.0-SNAPSHOT]\n```\n\nThis is due to calling `recycle()` twice on the same `EMPTY_ARRAY_LIST`  instance. The solution is that `EMPTY_ARRAY_LIST` should not be a pooled instance and we should check that before recycling.\n\nAuthor: Matteo Merli <mmerli@apache.org>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nThis closes #1249 from merlimat/fix-journal-list-recycle",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/24dc8ac30c97620cf4dbef48deff2bb957932eb8",
        "file": [
            {
                "patch": "@@ -112,6 +112,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-673: Ledger length can be inaccurate in failure case (sijie via ivank)\n \n+        BOOKKEEPER-688: NPE exception in PerChannelBookieClient (ivank via sijie)\n+\n       hedwig-server:\n \n         BOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj)",
                "additions": 2,
                "raw_url": "https://github.com/apache/bookkeeper/raw/24dc8ac30c97620cf4dbef48deff2bb957932eb8/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "bc3f0f0908bfa78dd6be5a286617f9eee6226e9e",
                "blob_url": "https://github.com/apache/bookkeeper/blob/24dc8ac30c97620cf4dbef48deff2bb957932eb8/CHANGES.txt",
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=24dc8ac30c97620cf4dbef48deff2bb957932eb8"
            },
            {
                "patch": "@@ -238,15 +238,20 @@ void addEntry(final long ledgerId, byte[] masterKey, final long entryId, Channel\n         final int entrySize = toSend.readableBytes();\n         final CompletionKey completionKey = new CompletionKey(ledgerId, entryId);\n         addCompletions.put(completionKey, new AddCompletion(cb, entrySize, ctx));\n+        final Channel c = channel;\n+        if (c == null) {\n+            errorOutAddKey(completionKey);\n+            return;\n+        }\n         try {\n-            ChannelFuture future = channel.write(r);\n+            ChannelFuture future = c.write(r);\n             future.addListener(new ChannelFutureListener() {\n                 @Override\n                 public void operationComplete(ChannelFuture future) throws Exception {\n                     if (future.isSuccess()) {\n                         if (LOG.isDebugEnabled()) {\n                             LOG.debug(\"Successfully wrote request for adding entry: \" + entryId + \" ledger-id: \" + ledgerId\n-                                                            + \" bookie: \" + channel.getRemoteAddress() + \" entry length: \" + entrySize);\n+                                                            + \" bookie: \" + c.getRemoteAddress() + \" entry length: \" + entrySize);\n                         }\n                         // totalBytesOutstanding.addAndGet(entrySize);\n                     } else {\n@@ -270,15 +275,21 @@ public void readEntryAndFenceLedger(final long ledgerId, byte[] masterKey,\n                 BookieProtocol.CURRENT_PROTOCOL_VERSION, ledgerId, entryId,\n                 BookieProtocol.FLAG_DO_FENCING, masterKey);\n \n+        final Channel c = channel;\n+        if (c == null) {\n+            errorOutReadKey(key);\n+            return;\n+        }\n+\n         try {\n-            ChannelFuture future = channel.write(r);\n+            ChannelFuture future = c.write(r);\n             future.addListener(new ChannelFutureListener() {\n                     @Override\n                     public void operationComplete(ChannelFuture future) throws Exception {\n                         if (future.isSuccess()) {\n                             if (LOG.isDebugEnabled()) {\n                                 LOG.debug(\"Successfully wrote request {} to {}\",\n-                                          r, channel.getRemoteAddress());\n+                                          r, c.getRemoteAddress());\n                             }\n                         } else {\n                             errorOutReadKey(key);\n@@ -299,15 +310,21 @@ public void readEntry(final long ledgerId, final long entryId, ReadEntryCallback\n                 BookieProtocol.CURRENT_PROTOCOL_VERSION, ledgerId, entryId,\n                 BookieProtocol.FLAG_NONE);\n \n+        final Channel c = channel;\n+        if (c == null) {\n+            errorOutReadKey(key);\n+            return;\n+        }\n+\n         try{\n-            ChannelFuture future = channel.write(r);\n+            ChannelFuture future = c.write(r);\n             future.addListener(new ChannelFutureListener() {\n                 @Override\n                 public void operationComplete(ChannelFuture future) throws Exception {\n                     if (future.isSuccess()) {\n                         if (LOG.isDebugEnabled()) {\n                             LOG.debug(\"Successfully wrote request {} to {}\",\n-                                      r, channel.getRemoteAddress());\n+                                      r, c.getRemoteAddress());\n                         }\n                     } else {\n                         errorOutReadKey(key);",
                "additions": 23,
                "raw_url": "https://github.com/apache/bookkeeper/raw/24dc8ac30c97620cf4dbef48deff2bb957932eb8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "status": "modified",
                "changes": 29,
                "deletions": 6,
                "sha": "eb7d3b394117f74f2202c4821ace636a313f9aec",
                "blob_url": "https://github.com/apache/bookkeeper/blob/24dc8ac30c97620cf4dbef48deff2bb957932eb8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=24dc8ac30c97620cf4dbef48deff2bb957932eb8"
            }
        ],
        "bug_id": "bookkeeper_20",
        "parent": "https://github.com/apache/bookkeeper/commit/33ea58027b0a3ba160f7ac19d20568709f453f4d",
        "message": "BOOKKEEPER-688: NPE exception in PerChannelBookieClient (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1534498 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/cdf138e24b76f934721eb1e82a226d0be296b838",
        "file": [
            {
                "patch": "@@ -42,6 +42,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-559: Fix occasional failure in AuditorBookieTest (ivank via umamahesh)\n \n+        BOOKKEEPER-599: NPE in PerChannelBookieClient (jiannan via sijie)\n+\n     IMPROVEMENTS:\n \n       BOOKKEEPER-555: Make BookieServer use Netty rather than a custom IO server (ivank)",
                "additions": 2,
                "raw_url": "https://github.com/apache/bookkeeper/raw/cdf138e24b76f934721eb1e82a226d0be296b838/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "14c1136ba1fc6ec22f6bd3ad563fcdd74f40da70",
                "blob_url": "https://github.com/apache/bookkeeper/blob/cdf138e24b76f934721eb1e82a226d0be296b838/CHANGES.txt",
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=cdf138e24b76f934721eb1e82a226d0be296b838"
            },
            {
                "patch": "@@ -569,8 +569,8 @@ void handleAddResponse(BookieProtocol.AddResponse a) {\n \n     void handleReadResponse(BookieProtocol.ReadResponse rr) {\n         if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Got response for read request {} entry length: {}\",\n-                      rr, rr.getData().readableBytes());\n+            LOG.debug(\"Got response for read request {} entry length: {}\", rr,\n+                    rr.getData() != null ? rr.getData().readableBytes() : -1);\n         }\n \n         // convert to BKException code because thats what the uppper",
                "additions": 2,
                "raw_url": "https://github.com/apache/bookkeeper/raw/cdf138e24b76f934721eb1e82a226d0be296b838/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "4c348b074e68a3cda48f38446c431ac05aae663f",
                "blob_url": "https://github.com/apache/bookkeeper/blob/cdf138e24b76f934721eb1e82a226d0be296b838/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=cdf138e24b76f934721eb1e82a226d0be296b838"
            }
        ],
        "bug_id": "bookkeeper_21",
        "parent": "https://github.com/apache/bookkeeper/commit/b118823702e946ccdeb14843e2691fdd760a59e4",
        "message": "BOOKKEEPER-599: NPE in PerChannelBookieClient (jiannan via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1465437 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/5b7b6835c74a11162164e90e66bb05a84411a8c2",
        "file": [
            {
                "patch": "@@ -14,6 +14,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-554: fd leaking when move ledger index file (sijie, ivank via sijie)\n \n+      BOOKKEEPER-568: NPE during GC with HierarchicalLedgerManager (Matteo via sijie)\n+\n     IMPROVEMENTS:\n \n       BOOKKEEPER-555: Make BookieServer use Netty rather than a custom IO server (ivank)",
                "additions": 2,
                "raw_url": "https://github.com/apache/bookkeeper/raw/5b7b6835c74a11162164e90e66bb05a84411a8c2/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "ff9ff0f9fbd5a69fa26291290debf9d23c517be6",
                "blob_url": "https://github.com/apache/bookkeeper/blob/5b7b6835c74a11162164e90e66bb05a84411a8c2/CHANGES.txt",
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=5b7b6835c74a11162164e90e66bb05a84411a8c2"
            },
            {
                "patch": "@@ -416,7 +416,7 @@ public boolean hasNext() throws IOException {\n                 if (l1NodesIter == null) {\n                     l1NodesIter = zk.getChildren(ledgerRootPath, null).iterator();\n                     hasMoreElement = nextL1Node();\n-                } else if (!l2NodesIter.hasNext()) {\n+                } else if (l2NodesIter == null || !l2NodesIter.hasNext()) {\n                     hasMoreElement = nextL1Node();\n                 }\n             } catch (Exception e) {",
                "additions": 1,
                "raw_url": "https://github.com/apache/bookkeeper/raw/5b7b6835c74a11162164e90e66bb05a84411a8c2/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "bb6c184c5902019732b7d23775012904b3c3dbb0",
                "blob_url": "https://github.com/apache/bookkeeper/blob/5b7b6835c74a11162164e90e66bb05a84411a8c2/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java?ref=5b7b6835c74a11162164e90e66bb05a84411a8c2"
            },
            {
                "patch": "@@ -0,0 +1,43 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.meta;\n+\n+import org.apache.bookkeeper.meta.LedgerManager.LedgerRangeIterator;\n+import org.junit.Test;\n+\n+public class LedgerManagerIteratorTest extends LedgerManagerTestCase {\n+    public LedgerManagerIteratorTest(Class<? extends LedgerManagerFactory> lmFactoryCls) {\n+        super(lmFactoryCls);\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testIterateNoLedgers() throws Exception {\n+        LedgerManager lm = getLedgerManager();\n+        LedgerRangeIterator lri = lm.getLedgerRanges();\n+        assertNotNull(lri);\n+        if (lri.hasNext())\n+            lri.next();\n+\n+        assertEquals(false, lri.hasNext());\n+        assertEquals(false, lri.hasNext());\n+    }\n+}",
                "additions": 43,
                "raw_url": "https://github.com/apache/bookkeeper/raw/5b7b6835c74a11162164e90e66bb05a84411a8c2/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerIteratorTest.java",
                "status": "added",
                "changes": 43,
                "deletions": 0,
                "sha": "a65b11d77b53de4c6c2ac9f6049e05478f419498",
                "blob_url": "https://github.com/apache/bookkeeper/blob/5b7b6835c74a11162164e90e66bb05a84411a8c2/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerIteratorTest.java",
                "filename": "bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerIteratorTest.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerIteratorTest.java?ref=5b7b6835c74a11162164e90e66bb05a84411a8c2"
            }
        ],
        "bug_id": "bookkeeper_22",
        "parent": "https://github.com/apache/bookkeeper/commit/26731c770bf8e3cb54ec0466c027b6e313983bba",
        "message": "BOOKKEEPER-568: NPE during GC with HierarchicalLedgerManager (Matteo via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1446444 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/77efd1c00100b533d67e716579b439e94d4050e3",
        "file": [
            {
                "patch": "@@ -130,6 +130,8 @@ Trunk (unreleased changes)\n \n \tBOOKKEEPER-465: CreateNewLog may overwrite lastLogId with smaller value (yixue, fpj via fpj)\n \n+\tBOOKKEEPER-498: BookieRecoveryTest.tearDown NPE (fpj)\n+\n       hedwig-protocol:\n \n         BOOKKEEPER-394: CompositeException message is not useful (Stu Hood via sijie)",
                "additions": 2,
                "raw_url": "https://github.com/apache/bookkeeper/raw/77efd1c00100b533d67e716579b439e94d4050e3/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "a5d25eba21219f0552e1479fc8b22a30c19de3c3",
                "blob_url": "https://github.com/apache/bookkeeper/blob/77efd1c00100b533d67e716579b439e94d4050e3/CHANGES.txt",
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=77efd1c00100b533d67e716579b439e94d4050e3"
            },
            {
                "patch": "@@ -118,7 +118,9 @@ public void setUp() throws Exception {\n     @Override\n     public void tearDown() throws Exception {\n         // Release any resources used by the BookKeeperTools instance.\n-        bkAdmin.close();\n+        if(bkAdmin != null){\n+            bkAdmin.close();\n+        }\n         super.tearDown();\n     }\n ",
                "additions": 3,
                "raw_url": "https://github.com/apache/bookkeeper/raw/77efd1c00100b533d67e716579b439e94d4050e3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "30bbdb50e0db6a1cb292a2ce38ecbd5a368a802c",
                "blob_url": "https://github.com/apache/bookkeeper/blob/77efd1c00100b533d67e716579b439e94d4050e3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java",
                "filename": "bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java?ref=77efd1c00100b533d67e716579b439e94d4050e3"
            }
        ],
        "bug_id": "bookkeeper_23",
        "parent": "https://github.com/apache/bookkeeper/commit/7d3dde696ae859297ece4e2c9a047afde4fa5865",
        "message": "BOOKKEEPER-498: BookieRecoveryTest.tearDown NPE (fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1419496 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/6f364a214d2b65f5823af2e5699bbc59dc08a4c9",
        "file": [
            {
                "patch": "@@ -80,6 +80,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-387: BookKeeper Upgrade is not working. (surendra via sijie)\n \n+        BOOKKEEPER-383: NPE in BookieJournalTest  (sijie via ivank)\n+\n       hedwig-protocol:\n \n         BOOKKEEPER-394: CompositeException message is not useful (Stu Hood via sijie)",
                "additions": 2,
                "raw_url": "https://github.com/apache/bookkeeper/raw/6f364a214d2b65f5823af2e5699bbc59dc08a4c9/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "f16b5529c50821fefd50de3040059dfead76052a",
                "blob_url": "https://github.com/apache/bookkeeper/blob/6f364a214d2b65f5823af2e5699bbc59dc08a4c9/CHANGES.txt",
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=6f364a214d2b65f5823af2e5699bbc59dc08a4c9"
            },
            {
                "patch": "@@ -138,6 +138,10 @@ public void asyncProcessLedgers(final Processor<Long> processor,\n \n     @Override\n     public void garbageCollectLedgers(GarbageCollector gc) {\n+        if (null == zk) {\n+            LOG.warn(\"Skip garbage collecting ledgers because there is no ZooKeeper handle.\");\n+            return;\n+        }\n         try {\n             // create a snapshot first\n             Map<Long, Boolean> bkActiveLedgers = activeLedgers.snapshot();",
                "additions": 4,
                "raw_url": "https://github.com/apache/bookkeeper/raw/6f364a214d2b65f5823af2e5699bbc59dc08a4c9/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java",
                "status": "modified",
                "changes": 4,
                "deletions": 0,
                "sha": "cbd4e9345d1889731536af2b05f259bdd878b6f6",
                "blob_url": "https://github.com/apache/bookkeeper/blob/6f364a214d2b65f5823af2e5699bbc59dc08a4c9/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java?ref=6f364a214d2b65f5823af2e5699bbc59dc08a4c9"
            },
            {
                "patch": "@@ -337,6 +337,10 @@ public void processResult(int rc, String path, Object ctx,\n \n     @Override\n     public void garbageCollectLedgers(GarbageCollector gc) {\n+        if (null == zk) {\n+            LOG.warn(\"Skip garbage collecting ledgers because there is no ZooKeeper handle.\");\n+            return;\n+        }\n         // create a snapshot before garbage collection\n         NavigableMap<Long, Boolean> snapshot = activeLedgers.snapshot();\n         try {",
                "additions": 4,
                "raw_url": "https://github.com/apache/bookkeeper/raw/6f364a214d2b65f5823af2e5699bbc59dc08a4c9/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java",
                "status": "modified",
                "changes": 4,
                "deletions": 0,
                "sha": "a6cbaa67538b84d9d95bff8c5ebab43c238501fb",
                "blob_url": "https://github.com/apache/bookkeeper/blob/6f364a214d2b65f5823af2e5699bbc59dc08a4c9/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java?ref=6f364a214d2b65f5823af2e5699bbc59dc08a4c9"
            },
            {
                "patch": "@@ -221,7 +221,7 @@ public void testPreV2Journal() throws Exception {\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });\n \n         Bookie b = new Bookie(conf);\n-        b.start();\n+        b.readJournal();\n \n         b.readEntry(1, 100);\n         try {",
                "additions": 1,
                "raw_url": "https://github.com/apache/bookkeeper/raw/6f364a214d2b65f5823af2e5699bbc59dc08a4c9/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "3bf51e4ec56c551e8b6adcb940445a62f2d0458a",
                "blob_url": "https://github.com/apache/bookkeeper/blob/6f364a214d2b65f5823af2e5699bbc59dc08a4c9/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java",
                "filename": "bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java?ref=6f364a214d2b65f5823af2e5699bbc59dc08a4c9"
            }
        ],
        "bug_id": "bookkeeper_24",
        "parent": "https://github.com/apache/bookkeeper/commit/06b50969499330d4a5421b48a042fdee63857d23",
        "message": "BOOKKEEPER-383: NPE in BookieJournalTest  (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1382016 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/9366322bfe3461a44a8b0444e66cd774ea1ac7d8",
        "file": [
            {
                "patch": "@@ -46,6 +46,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-177: Index file is lost or some index pages aren't flushed. (sijie via ivank)\n \n+        BOOKKEEPER-113: NPE In BookKeeper test (fpj via ivank)\n+\n       hedwig-server/\n       \n         BOOKKEEPER-140: Hub server doesn't subscribe remote region correctly when a region is down. (Sijie Gou via ivank)",
                "additions": 2,
                "raw_url": "https://github.com/apache/bookkeeper/raw/9366322bfe3461a44a8b0444e66cd774ea1ac7d8/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "ce6184a3cf16fc29e5be1b1ae59878306b3ff375",
                "blob_url": "https://github.com/apache/bookkeeper/blob/9366322bfe3461a44a8b0444e66cd774ea1ac7d8/CHANGES.txt",
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=9366322bfe3461a44a8b0444e66cd774ea1ac7d8"
            },
            {
                "patch": "@@ -225,11 +225,6 @@ void addEntry(final long ledgerId, byte[] masterKey, final long entryId, Channel\n                   Object ctx, final int options) {\n         final int entrySize = toSend.readableBytes();\n \n-        // if (totalBytesOutstanding.get() > maxMemory) {\n-        // // TODO: how to throttle, throw an exception, or call the callback?\n-        // // Maybe this should be done at the layer above?\n-        // }\n-\n         final CompletionKey completionKey = new CompletionKey(ledgerId, entryId);\n \n         addCompletions.put(completionKey, new AddCompletion(cb, entrySize, ctx));\n@@ -238,30 +233,35 @@ void addEntry(final long ledgerId, byte[] masterKey, final long entryId, Channel\n                               + 4 // for the type of request\n                               + masterKey.length; // for the master key\n \n-        ChannelBuffer header = channel.getConfig().getBufferFactory().getBuffer(totalHeaderSize);\n-        header.writeInt(totalHeaderSize - 4 + entrySize);\n-        header.writeInt(new PacketHeader(BookieProtocol.CURRENT_PROTOCOL_VERSION, \n-                                         BookieProtocol.ADDENTRY, (short)options).toInt());\n-        header.writeBytes(masterKey);\n+        try{\n+            ChannelBuffer header = channel.getConfig().getBufferFactory().getBuffer(totalHeaderSize);\n \n-        ChannelBuffer wrappedBuffer = ChannelBuffers.wrappedBuffer(header, toSend);\n+            header.writeInt(totalHeaderSize - 4 + entrySize);\n+            header.writeInt(new PacketHeader(BookieProtocol.CURRENT_PROTOCOL_VERSION,\n+                                             BookieProtocol.ADDENTRY, (short)options).toInt());\n+            header.writeBytes(masterKey);\n \n-        ChannelFuture future = channel.write(wrappedBuffer);\n-        future.addListener(new ChannelFutureListener() {\n-            @Override\n-            public void operationComplete(ChannelFuture future) throws Exception {\n-                if (future.isSuccess()) {\n-                    if (LOG.isDebugEnabled()) {\n-                        LOG.debug(\"Successfully wrote request for adding entry: \" + entryId + \" ledger-id: \" + ledgerId\n-                                  + \" bookie: \" + channel.getRemoteAddress() + \" entry length: \" + entrySize);\n+            ChannelBuffer wrappedBuffer = ChannelBuffers.wrappedBuffer(header, toSend);\n+\n+            ChannelFuture future = channel.write(wrappedBuffer);\n+            future.addListener(new ChannelFutureListener() {\n+                @Override\n+                public void operationComplete(ChannelFuture future) throws Exception {\n+                    if (future.isSuccess()) {\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"Successfully wrote request for adding entry: \" + entryId + \" ledger-id: \" + ledgerId\n+                                                            + \" bookie: \" + channel.getRemoteAddress() + \" entry length: \" + entrySize);\n+                        }\n+                        // totalBytesOutstanding.addAndGet(entrySize);\n+                    } else {\n+                        errorOutAddKey(completionKey);\n                     }\n-                    // totalBytesOutstanding.addAndGet(entrySize);\n-                } else {\n-                    errorOutAddKey(completionKey);\n                 }\n-            }\n-        });\n-\n+            });\n+        } catch (Throwable e) {\n+            LOG.warn(\"Read entry operation failed\", e);\n+            errorOutReadKey(completionKey);\n+        }\n     }\n \n     public void readEntry(final long ledgerId, final long entryId, ReadEntryCallback cb, Object ctx, final int options) {\n@@ -273,29 +273,33 @@ public void readEntry(final long ledgerId, final long entryId, ReadEntryCallback\n                               + 8 // for ledgerId\n                               + 8; // for entryId\n \n-        ChannelBuffer tmpEntry = channel.getConfig().getBufferFactory().getBuffer(totalHeaderSize);\n-        tmpEntry.writeInt(totalHeaderSize - 4);\n+        try{\n+            ChannelBuffer tmpEntry = channel.getConfig().getBufferFactory().getBuffer(totalHeaderSize);\n+            tmpEntry.writeInt(totalHeaderSize - 4);\n \n-        tmpEntry.writeInt(new PacketHeader(BookieProtocol.CURRENT_PROTOCOL_VERSION, \n-                                           BookieProtocol.READENTRY, (short)options).toInt());\n-        tmpEntry.writeLong(ledgerId);\n-        tmpEntry.writeLong(entryId);\n+            tmpEntry.writeInt(new PacketHeader(BookieProtocol.CURRENT_PROTOCOL_VERSION,\n+                                               BookieProtocol.READENTRY, (short)options).toInt());\n+            tmpEntry.writeLong(ledgerId);\n+            tmpEntry.writeLong(entryId);\n \n-        ChannelFuture future = channel.write(tmpEntry);\n-        future.addListener(new ChannelFutureListener() {\n-            @Override\n-            public void operationComplete(ChannelFuture future) throws Exception {\n-                if (future.isSuccess()) {\n-                    if (LOG.isDebugEnabled()) {\n-                        LOG.debug(\"Successfully wrote request for reading entry: \" + entryId + \" ledger-id: \"\n-                                  + ledgerId + \" bookie: \" + channel.getRemoteAddress());\n+            ChannelFuture future = channel.write(tmpEntry);\n+            future.addListener(new ChannelFutureListener() {\n+                @Override\n+                public void operationComplete(ChannelFuture future) throws Exception {\n+                    if (future.isSuccess()) {\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"Successfully wrote request for reading entry: \" + entryId + \" ledger-id: \"\n+                                                            + ledgerId + \" bookie: \" + channel.getRemoteAddress());\n+                        }\n+                    } else {\n+                        errorOutReadKey(key);\n                     }\n-                } else {\n-                    errorOutReadKey(key);\n                 }\n-            }\n-        });\n-\n+            });\n+        } catch(Throwable e) {\n+            LOG.warn(\"Read entry operation failed\", e);\n+            errorOutReadKey(key);\n+        }\n     }\n \n     public void close() {",
                "additions": 48,
                "raw_url": "https://github.com/apache/bookkeeper/raw/9366322bfe3461a44a8b0444e66cd774ea1ac7d8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "status": "modified",
                "changes": 92,
                "deletions": 44,
                "sha": "75a8e8cdbba384a84a4549daa53270f0fd8bf840",
                "blob_url": "https://github.com/apache/bookkeeper/blob/9366322bfe3461a44a8b0444e66cd774ea1ac7d8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=9366322bfe3461a44a8b0444e66cd774ea1ac7d8"
            }
        ],
        "bug_id": "bookkeeper_25",
        "parent": "https://github.com/apache/bookkeeper/commit/2ec70d4dbf2266b17bdb99975f974f30afa65593",
        "message": "BOOKKEEPER-113: NPE In BookKeeper test (fpj via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1293383 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/fbfd10fa94d909144c369e1514db31669a16872b",
        "file": [
            {
                "patch": "@@ -70,6 +70,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-376: LedgerManagers should consider 'underreplication' node as a special Znode (Uma via sijie)\n \n+        BOOKKEEPER-371: NPE in hedwig hub client causes hedwig hub to shut down. (Aniruddha via sijie)\n+\n       hedwig-client:\n \n         BOOKKEEPER-274: Hedwig cpp client library should not link to cppunit which is just used for test. (sijie via ivank)",
                "additions": 2,
                "raw_url": "https://github.com/apache/bookkeeper/raw/fbfd10fa94d909144c369e1514db31669a16872b/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "7c4b621f001f38a0f9fbc84a48f477cf9fe87644",
                "blob_url": "https://github.com/apache/bookkeeper/blob/fbfd10fa94d909144c369e1514db31669a16872b/CHANGES.txt",
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=fbfd10fa94d909144c369e1514db31669a16872b"
            },
            {
                "patch": "@@ -0,0 +1,34 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hedwig.client.exceptions;\n+\n+/**\n+ * This is a Hedwig client side exception thrown when it can't get the response\n+ * handler from the channel pipeline responsible for a PubSubRequest.\n+ */\n+public class NoResponseHandlerException extends Exception {\n+    private static final long serialVersionUID = 1L;\n+\n+    public NoResponseHandlerException(String message) {\n+        super(message);\n+    }\n+\n+    public NoResponseHandlerException(String message, Throwable t) {\n+        super(message, t);\n+    }\n+}",
                "additions": 34,
                "raw_url": "https://github.com/apache/bookkeeper/raw/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/NoResponseHandlerException.java",
                "status": "added",
                "changes": 34,
                "deletions": 0,
                "sha": "22b44b16f649b0efd93b9530164ae9aad9b962e5",
                "blob_url": "https://github.com/apache/bookkeeper/blob/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/NoResponseHandlerException.java",
                "filename": "hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/NoResponseHandlerException.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/NoResponseHandlerException.java?ref=fbfd10fa94d909144c369e1514db31669a16872b"
            },
            {
                "patch": "@@ -19,6 +19,8 @@\n \n import java.util.TimerTask;\n \n+import org.apache.hedwig.client.exceptions.NoResponseHandlerException;\n+import org.apache.hedwig.client.netty.ResponseHandler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.Channel;\n@@ -61,8 +63,21 @@ public MessageConsumeRetryTask(MessageConsumeData messageConsumeData, TopicSubsc\n         public void run() {\n             // Try to consume the message again\n             Channel topicSubscriberChannel = client.getSubscriber().getChannelForTopic(topicSubscriber);\n-            HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel).getSubscribeResponseHandler()\n-            .asyncMessageConsume(messageConsumeData.msg);\n+            ResponseHandler handler = null;\n+            try {\n+                handler = HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel);\n+            } catch (NoResponseHandlerException e) {\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"No response handler found while invoking asyncMessageConsumed in the Message\" +\n+                    \" consume retry task .\" , e);\n+                }\n+                // Explicitly close the channel\n+                if (null != topicSubscriberChannel) {\n+                    topicSubscriberChannel.close();\n+                }\n+                return;\n+            }\n+            handler.getSubscribeResponseHandler().asyncMessageConsume(messageConsumeData.msg);\n         }\n     }\n \n@@ -72,8 +87,20 @@ public void operationFinished(Object ctx, Void resultOfOperation) {\n         // Message has been successfully consumed by the client app so callback\n         // to the ResponseHandler indicating that the message is consumed.\n         Channel topicSubscriberChannel = client.getSubscriber().getChannelForTopic(topicSubscriber);\n-        HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel).getSubscribeResponseHandler()\n-        .messageConsumed(messageConsumeData.msg);\n+        ResponseHandler handler = null;\n+        try {\n+            handler = HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel);\n+        } catch (NoResponseHandlerException e) {\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"No response handler found while invoking messageConsumed.\" , e);\n+            }\n+            // Explicitly close the channel\n+            if (null != topicSubscriberChannel) {\n+                topicSubscriberChannel.close();\n+            }\n+            return;\n+        }\n+        handler.getSubscribeResponseHandler().messageConsumed(messageConsumeData.msg);\n     }\n \n     public void operationFailed(Object ctx, PubSubException exception) {",
                "additions": 31,
                "raw_url": "https://github.com/apache/bookkeeper/raw/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java",
                "status": "modified",
                "changes": 35,
                "deletions": 4,
                "sha": "d0424ad440841c0bf10af038d7d893b017aeba61",
                "blob_url": "https://github.com/apache/bookkeeper/blob/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java",
                "filename": "hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java?ref=fbfd10fa94d909144c369e1514db31669a16872b"
            },
            {
                "patch": "@@ -23,7 +23,7 @@\n import java.util.Queue;\n import java.util.Set;\n \n-import org.jboss.netty.channel.ChannelFuture;\n+import org.apache.hedwig.client.exceptions.NoResponseHandlerException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.Channel;\n@@ -90,7 +90,14 @@ public void handleSubscribeResponse(PubSubResponse response, PubSubData pubSubDa\n         // If this was not a successful response to the Subscribe request, we\n         // won't be using the Netty Channel created so just close it.\n         if (!response.getStatusCode().equals(StatusCode.SUCCESS)) {\n-            HedwigClientImpl.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n+            try {\n+                HedwigClientImpl.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n+            } catch (NoResponseHandlerException e) {\n+                // Log an error. But should we also return and not process anything further?\n+                logger.error(\"No response handler found while trying to close channel explicitly while handling a \" +\n+                        \"failed subscription response.\", e);\n+                // Continue closing the channel because this is an unexpected event and state should be reset.\n+            }\n             channel.close();\n         }\n ",
                "additions": 9,
                "raw_url": "https://github.com/apache/bookkeeper/raw/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java",
                "status": "modified",
                "changes": 11,
                "deletions": 2,
                "sha": "241a5e11c355d0a4cd89cf1b95e3c79f27bc2421",
                "blob_url": "https://github.com/apache/bookkeeper/blob/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java",
                "filename": "hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java?ref=fbfd10fa94d909144c369e1514db31669a16872b"
            },
            {
                "patch": "@@ -27,6 +27,7 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.atomic.AtomicLong;\n \n+import org.apache.hedwig.client.exceptions.NoResponseHandlerException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.jboss.netty.bootstrap.ClientBootstrap;\n@@ -177,7 +178,13 @@ public void run() {\n             // channels in HedwigPublisher.host2Channel. This stores the\n             // channels used for Publish and Unsubscribe requests.\n             for (Channel channel : pub.host2Channel.values()) {\n-                ResponseHandler responseHandler = getResponseHandlerFromChannel(channel);\n+                ResponseHandler responseHandler = null;\n+                try {\n+                    responseHandler = getResponseHandlerFromChannel(channel);\n+                } catch (NoResponseHandlerException e) {\n+                    logger.warn(\"No response handler found for channel\" + channel + \" in the retry timeout task.\", e);\n+                    continue;\n+                }\n                 for (PubSubData pubSubData : responseHandler.txn2PubSubData.values()) {\n                     checkPubSubDataToTimeOut(pubSubData, responseHandler, curTime, timeoutInterval);\n                 }\n@@ -186,7 +193,13 @@ public void run() {\n             // HedwigSubscriber.topicSubscriber2Channel. This stores the\n             // channels used exclusively for Subscribe requests.\n             for (Channel channel : sub.topicSubscriber2Channel.values()) {\n-                ResponseHandler responseHandler = getResponseHandlerFromChannel(channel);\n+                ResponseHandler responseHandler = null;\n+                try {\n+                    responseHandler = getResponseHandlerFromChannel(channel);\n+                } catch (NoResponseHandlerException e) {\n+                    logger.warn(\"No response handler found for channel\" + channel + \" in the retry timeout task.\", e);\n+                    continue;\n+                }\n                 for (PubSubData pubSubData : responseHandler.txn2PubSubData.values()) {\n                     checkPubSubDataToTimeOut(pubSubData, responseHandler, curTime, timeoutInterval);\n                 }\n@@ -320,9 +333,17 @@ public static InetSocketAddress getHostFromChannel(Channel channel) {\n      * @param channel\n      *            Channel we are retrieving the ResponseHandler instance for\n      * @return ResponseHandler Instance tied to the Channel's Pipeline\n+     * @throws NoResponseHandlerException if the response handler found for the channel is null.\n      */\n-    public static ResponseHandler getResponseHandlerFromChannel(Channel channel) {\n-        return (ResponseHandler) channel.getPipeline().getLast();\n+    public static ResponseHandler getResponseHandlerFromChannel(Channel channel) throws NoResponseHandlerException {\n+        if (null == channel) {\n+            throw new NoResponseHandlerException(\"Received a null value for the channel. Cannot retrieve the response handler\");\n+        }\n+        ResponseHandler handler = (ResponseHandler) channel.getPipeline().getLast();\n+        if (null == handler) {\n+            throw new NoResponseHandlerException(\"Could not retrieve the response handler from the channel's pipeline.\");\n+        }\n+        return handler;\n     }\n \n     // Public getter for entries in the topic2Host Map.",
                "additions": 25,
                "raw_url": "https://github.com/apache/bookkeeper/raw/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java",
                "status": "modified",
                "changes": 29,
                "deletions": 4,
                "sha": "2ce5e2616e498ad422feba7c02ad1ca410f0e84d",
                "blob_url": "https://github.com/apache/bookkeeper/blob/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java",
                "filename": "hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java?ref=fbfd10fa94d909144c369e1514db31669a16872b"
            },
            {
                "patch": "@@ -21,6 +21,7 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n+import org.apache.hedwig.client.exceptions.NoResponseHandlerException;\n import org.apache.hedwig.protocol.PubSubProtocol;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -202,7 +203,15 @@ protected void doPublish(PubSubData pubSubData, Channel channel) {\n         // Before we do the write, store this information into the\n         // ResponseHandler so when the server responds, we know what\n         // appropriate Callback Data to invoke for the given txn ID.\n-        HedwigClientImpl.getResponseHandlerFromChannel(channel).txn2PubSubData.put(txnId, pubSubData);\n+        try {\n+            HedwigClientImpl.getResponseHandlerFromChannel(channel).txn2PubSubData.put(txnId, pubSubData);\n+        } catch (NoResponseHandlerException e) {\n+            logger.error(\"No response handler found while storing the publish callback.\");\n+            // Callback on pubsubdata indicating failure.\n+            pubSubData.getCallback().operationFailed(pubSubData.context, new CouldNotConnectException(\"No response \" +\n+                    \"handler found while attempting to publish. So could not connect.\"));\n+            return;\n+        }\n \n         // Finally, write the Publish request through the Channel.\n         if (logger.isDebugEnabled())\n@@ -239,7 +248,11 @@ protected synchronized void storeHost2ChannelMapping(Channel channel) {\n             // topic. Close these redundant channels as they won't be used.\n             if (logger.isDebugEnabled())\n                 logger.debug(\"Channel mapping to host: \" + host + \" already exists so no need to store it.\");\n-            HedwigClientImpl.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n+            try {\n+                HedwigClientImpl.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n+            } catch (NoResponseHandlerException e) {\n+                logger.error(\"Could not get response handler while closing channel.\");\n+            }\n             channel.close();\n         }\n     }\n@@ -256,7 +269,11 @@ void close() {\n             closed = true;\n         }\n         for (Channel channel : host2Channel.values()) {\n-            client.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n+            try {\n+                client.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n+            } catch (NoResponseHandlerException e) {\n+                logger.error(\"No response handler while trying explicitly close Publisher channel \" + channel);\n+            }\n             channel.close().awaitUninterruptibly();\n         }\n         host2Channel.clear();",
                "additions": 20,
                "raw_url": "https://github.com/apache/bookkeeper/raw/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java",
                "status": "modified",
                "changes": 23,
                "deletions": 3,
                "sha": "b90865f7c358eccbd5d1da3b1aab5b9464c80e6c",
                "blob_url": "https://github.com/apache/bookkeeper/blob/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java",
                "filename": "hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java?ref=fbfd10fa94d909144c369e1514db31669a16872b"
            },
            {
                "patch": "@@ -22,6 +22,7 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n+import org.apache.hedwig.client.exceptions.NoResponseHandlerException;\n import org.apache.hedwig.protocol.PubSubProtocol;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -446,7 +447,15 @@ protected void doSubUnsub(PubSubData pubSubData, Channel channel) {\n         // Before we do the write, store this information into the\n         // ResponseHandler so when the server responds, we know what\n         // appropriate Callback Data to invoke for the given txn ID.\n-        HedwigClientImpl.getResponseHandlerFromChannel(channel).txn2PubSubData.put(txnId, pubSubData);\n+        try {\n+            HedwigClientImpl.getResponseHandlerFromChannel(channel).txn2PubSubData.put(txnId, pubSubData);\n+        } catch (Exception e) {\n+            logger.error(\"No response handler found while storing the subscribe callback.\");\n+            // Call operationFailed on the pubsubdata callback to indicate failure\n+            pubSubData.getCallback().operationFailed(pubSubData.context, new CouldNotConnectException(\"No response \" +\n+                    \"handler found while attempting to subscribe.\"));\n+            return;\n+        }\n \n         // Finally, write the Subscribe request through the Channel.\n         if (logger.isDebugEnabled())\n@@ -579,8 +588,30 @@ private void startDelivery(final ByteString topic, final ByteString subscriberId\n                 }\n             }\n         }\n-        HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel).getSubscribeResponseHandler()\n-        .setMessageHandler(messageHandler);\n+        try {\n+            HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel).getSubscribeResponseHandler()\n+            .setMessageHandler(messageHandler);\n+        } catch (NoResponseHandlerException e) {\n+            // We did not find a response handler. So remove this subscription handler and throw an exception.\n+            topicSubscriber2MessageHandler.remove(topicSubscriber);\n+            asyncCloseSubscription(topic, subscriberId, new Callback<Void>() {\n+                @Override\n+                public void operationFinished(Object ctx, Void resultOfOperation) {\n+                    logger.warn(\"Closed subscription for topic \" + topic.toStringUtf8() + \" and subscriber \" +\n+                    subscriberId.toStringUtf8());\n+                }\n+\n+                @Override\n+                public void operationFailed(Object ctx, PubSubException exception) {\n+                    logger.warn(\"Error while closing subscription for topic \" + topic.toStringUtf8() + \" and subscriber \" +\n+                            subscriberId.toStringUtf8());\n+                }\n+            }, null);\n+\n+            // We should tell the client to resubscribe.\n+            throw new ClientNotSubscribedException(\"Closed subscription for topic \" + topic.toStringUtf8() + \" and\" +\n+                    \"subscriber Id \"  + subscriberId.toStringUtf8());\n+        }\n         // Now make the TopicSubscriber Channel readable (it is set to not be\n         // readable when the initial subscription is done). Note that this is an\n         // asynchronous call. If this fails (not likely), the futureListener\n@@ -616,8 +647,13 @@ public void stopDelivery(final ByteString topic, final ByteString subscriberId)\n         // Unregister the MessageHandler for the subscribe Channel's\n         // Response Handler.\n         Channel topicSubscriberChannel = topicSubscriber2Channel.get(topicSubscriber);\n-        HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel).getSubscribeResponseHandler()\n-        .setMessageHandler(null);\n+        try {\n+            HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel).getSubscribeResponseHandler()\n+                .setMessageHandler(null);\n+        } catch (NoResponseHandlerException e) {\n+            // Here it's okay if we can't set the response handler's message handler to null. We should just remove it.\n+            logger.warn(\"Could not set message handler to null for subscription channel \" + topicSubscriberChannel + \", ignoring.\");\n+        }\n         this.topicSubscriber2MessageHandler.remove(topicSubscriber);\n         // Now make the TopicSubscriber channel not-readable. This will buffer\n         // up messages if any are sent from the server. Note that this is an\n@@ -671,7 +707,13 @@ private void doAsyncCloseSubscription(final ByteString topic, final ByteString s\n             Channel channel = topicSubscriber2Channel.get(topicSubscriber);\n             topicSubscriber2Channel.remove(topicSubscriber);\n             // Close the subscribe channel asynchronously.\n-            HedwigClientImpl.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n+            try {\n+                HedwigClientImpl.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n+            } catch (NoResponseHandlerException e) {\n+                // Don't close the channel if you can't find the handler.\n+                logger.warn(\"No response handler found, so could not close subscription channel \" + channel);\n+            }\n+            // We still close the channel as this is an unexpected event and should be handled as one.\n             ChannelFuture future = channel.close();\n             future.addListener(new ChannelFutureListener() {\n                 @Override\n@@ -725,7 +767,11 @@ void close() {\n \n         // Close all of the open Channels.\n         for (Channel channel : topicSubscriber2Channel.values()) {\n-            client.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n+            try {\n+                client.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n+            } catch (NoResponseHandlerException e) {\n+                logger.error(\"No response handler found while trying to close subscription channel.\");\n+            }\n             channel.close().awaitUninterruptibly();\n         }\n         topicSubscriber2Channel.clear();",
                "additions": 53,
                "raw_url": "https://github.com/apache/bookkeeper/raw/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java",
                "status": "modified",
                "changes": 60,
                "deletions": 7,
                "sha": "fb872cfe0abc933836f6263c0840ceb92f6eb8b7",
                "blob_url": "https://github.com/apache/bookkeeper/blob/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java",
                "filename": "hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java?ref=fbfd10fa94d909144c369e1514db31669a16872b"
            },
            {
                "patch": "@@ -20,6 +20,7 @@\n import java.net.InetSocketAddress;\n import java.util.LinkedList;\n \n+import org.apache.hedwig.client.exceptions.NoResponseHandlerException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.ChannelFuture;\n@@ -65,7 +66,12 @@ public void operationComplete(ChannelFuture future) throws Exception {\n             // the saved txnId to PubSubData in the ResponseHandler. These\n             // requests will not receive an ack response from the server\n             // so there is no point storing that information there anymore.\n-            HedwigClientImpl.getResponseHandlerFromChannel(future.getChannel()).txn2PubSubData.remove(pubSubData.txnId);\n+            try {\n+                HedwigClientImpl.getResponseHandlerFromChannel(future.getChannel()).txn2PubSubData.remove(pubSubData.txnId);\n+            } catch (NoResponseHandlerException e) {\n+                // We just couldn't remove the transaction ID's mapping. The handler was null, so this has been reset anyway.\n+                logger.warn(\"Could not find response handler to remove txnId mapping to pubsub data. Ignoring.\");\n+            }\n \n             future.getChannel().close();\n ",
                "additions": 7,
                "raw_url": "https://github.com/apache/bookkeeper/raw/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java",
                "status": "modified",
                "changes": 8,
                "deletions": 1,
                "sha": "3f47c956e94a82fcebe3fe41f5fb09a7acea4a97",
                "blob_url": "https://github.com/apache/bookkeeper/blob/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java",
                "filename": "hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java?ref=fbfd10fa94d909144c369e1514db31669a16872b"
            }
        ],
        "bug_id": "bookkeeper_26",
        "parent": "https://github.com/apache/bookkeeper/commit/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89",
        "message": "BOOKKEEPER-371: NPE in hedwig hub client causes hedwig hub to shut down. (Aniruddha via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1378112 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/27b6dd6a40f3e4721a29ea2030d96994869a8260",
        "file": [
            {
                "patch": "@@ -164,6 +164,8 @@ Release 4.1.0 - 2012-05-31\n \n         BOOKKEEPER-146: TestConcurrentTopicAcquisition sometimes hangs (ivank)\n \n+        BOOKKEEPER-285: TestZkSubscriptionManager quits due to NPE, so other tests are not run in hedwig server. (sijie)\n+\n       bookkeeper-benchmark/\n \t\n \tBOOKKEEPER-207: BenchBookie doesn't run correctly (ivank via fpj)",
                "additions": 2,
                "raw_url": "https://github.com/apache/bookkeeper/raw/27b6dd6a40f3e4721a29ea2030d96994869a8260/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "12a549995c69b3282889ce0aebea74a7e7341186",
                "blob_url": "https://github.com/apache/bookkeeper/blob/27b6dd6a40f3e4721a29ea2030d96994869a8260/CHANGES.txt",
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=27b6dd6a40f3e4721a29ea2030d96994869a8260"
            },
            {
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.server.topics.TrivialOwnAllTopicManager;\n+import org.apache.hedwig.server.persistence.LocalDBPersistenceManager;\n import org.apache.hedwig.util.ConcurrencyUtils;\n import org.apache.hedwig.util.Either;\n import org.apache.hedwig.util.Callback;\n@@ -50,7 +51,8 @@ public void setUp() throws Exception {\n         super.setUp();\n         cfg = new ServerConfiguration();\n         final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n-        sm = new ZkSubscriptionManager(zk, new TrivialOwnAllTopicManager(cfg, scheduler), null, cfg, scheduler);\n+        sm = new ZkSubscriptionManager(zk, new TrivialOwnAllTopicManager(cfg, scheduler),\n+                                       LocalDBPersistenceManager.instance(), cfg, scheduler);\n         msgIdCallback = new Callback<MessageSeqId>() {\n             @Override\n             public void operationFailed(Object ctx, final PubSubException exception) {",
                "additions": 3,
                "raw_url": "https://github.com/apache/bookkeeper/raw/27b6dd6a40f3e4721a29ea2030d96994869a8260/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestZkSubscriptionManager.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "9558acf7b50ee5ca05984d2f25e0e57a8dcbe74f",
                "blob_url": "https://github.com/apache/bookkeeper/blob/27b6dd6a40f3e4721a29ea2030d96994869a8260/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestZkSubscriptionManager.java",
                "filename": "hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestZkSubscriptionManager.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestZkSubscriptionManager.java?ref=27b6dd6a40f3e4721a29ea2030d96994869a8260"
            }
        ],
        "bug_id": "bookkeeper_27",
        "parent": "https://github.com/apache/bookkeeper/commit/a788614f5c73b0ab2c18f73d9eff7a858229a94e",
        "message": "BOOKKEEPER-285: TestZkSubscriptionManager quits due to NPE, so other tests are not run in hedwig server. (sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1346321 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/47ee081e6796ec84c774167dca67c3fd3ceda170",
        "file": [
            {
                "patch": "@@ -98,6 +98,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-242: Bookkeeper not able to connect other zookeeper when shutdown the zookeeper server where the BK has connected. (sijie & rakeshr via ivank)\n \n+        BOOKKEEPER-234: EntryLogger will throw NPE, if any dir does not exist or IO Errors. (umamaheswararao via ivank)\n+\n       hedwig-client/\n \n         BOOKKEEPER-217: NPE in hedwig client when enable DEBUG (sijie via ivank)",
                "additions": 2,
                "raw_url": "https://github.com/apache/bookkeeper/raw/47ee081e6796ec84c774167dca67c3fd3ceda170/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "08045a1def22727d50bef666763ae72a17b2dbb1",
                "blob_url": "https://github.com/apache/bookkeeper/blob/47ee081e6796ec84c774167dca67c3fd3ceda170/CHANGES.txt",
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=47ee081e6796ec84c774167dca67c3fd3ceda170"
            },
            {
                "patch": "@@ -115,8 +115,12 @@ public EntryLogger(ServerConfiguration conf) throws IOException {\n         LOGFILE_HEADER.put(\"BKLO\".getBytes());\n         // Find the largest logId\n         logId = -1;\n-        for(File f: dirs) {\n-            long lastLogId = getLastLogId(f);\n+        for(File dir: dirs) {\n+            if (!dir.exists()) {\n+                throw new FileNotFoundException(\n+                        \"Entry log directory does not exist\");\n+            }\n+            long lastLogId = getLastLogId(dir);\n             if (lastLogId > logId) {\n                 logId = lastLogId;\n             }",
                "additions": 6,
                "raw_url": "https://github.com/apache/bookkeeper/raw/47ee081e6796ec84c774167dca67c3fd3ceda170/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java",
                "status": "modified",
                "changes": 8,
                "deletions": 2,
                "sha": "7673035ba71b1255db4f24bdab84623404f9f5e4",
                "blob_url": "https://github.com/apache/bookkeeper/blob/47ee081e6796ec84c774167dca67c3fd3ceda170/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java",
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java?ref=47ee081e6796ec84c774167dca67c3fd3ceda170"
            },
            {
                "patch": "@@ -21,11 +21,10 @@\n package org.apache.bookkeeper.bookie;\n \n import java.io.File;\n+import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.RandomAccessFile;\n import java.nio.ByteBuffer;\n-import java.util.Map;\n-import java.util.HashMap;\n \n import junit.framework.TestCase;\n \n@@ -155,7 +154,28 @@ public void testMissingLogId() throws Exception {\n         }\n     }\n \n-    \n+    @Test\n+    /** Test that EntryLogger Should fail with FNFE, if entry logger directories does not exist*/\n+    public void testEntryLoggerShouldThrowFNFEIfDirectoriesDoesNotExist()\n+            throws Exception {\n+        File tmpDir = File.createTempFile(\"bkTest\", \".dir\");\n+        tmpDir.delete();\n+        ServerConfiguration conf = new ServerConfiguration();\n+        conf.setLedgerDirNames(new String[] { tmpDir.toString() });\n+        EntryLogger entryLogger = null;\n+        try {\n+            entryLogger = new EntryLogger(conf);\n+            fail(\"Expecting FileNotFoundException\");\n+        } catch (FileNotFoundException e) {\n+            assertEquals(\"Entry log directory does not exist\", e\n+                    .getLocalizedMessage());\n+        } finally {\n+            if (entryLogger != null) {\n+                entryLogger.shutdown();\n+            }\n+        }\n+    }\n+\n     @After\n     public void tearDown() throws Exception {\n     }",
                "additions": 23,
                "raw_url": "https://github.com/apache/bookkeeper/raw/47ee081e6796ec84c774167dca67c3fd3ceda170/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java",
                "status": "modified",
                "changes": 26,
                "deletions": 3,
                "sha": "3d598573189d6d384d9d733231085a77d05dd60d",
                "blob_url": "https://github.com/apache/bookkeeper/blob/47ee081e6796ec84c774167dca67c3fd3ceda170/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java",
                "filename": "bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java?ref=47ee081e6796ec84c774167dca67c3fd3ceda170"
            }
        ],
        "bug_id": "bookkeeper_28",
        "parent": "https://github.com/apache/bookkeeper/commit/9efe73998fe1ee72ffae95f3e1b1e65884019710",
        "message": "BOOKKEEPER-234: EntryLogger will throw NPE, if any dir does not exist or IO Errors. (umamaheswararao via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1335996 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "bookkeeper"
    },
    {
        "commit": "https://github.com/apache/bookkeeper/commit/7f9005baadbbf312db857be6c3d3c095fe800c54",
        "file": [
            {
                "patch": "@@ -90,6 +90,10 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-213: PerChannelBookieClient calls the wrong errorOut function when encountering an exception (Aniruddha via sijie)\n \n+      hedwig-client/\n+\n+        BOOKKEEPER-217: NPE in hedwig client when enable DEBUG (sijie via ivank)\n+\n       hedwig-server/\n       \n         BOOKKEEPER-140: Hub server doesn't subscribe remote region correctly when a region is down. (Sijie Gou via ivank)",
                "additions": 4,
                "raw_url": "https://github.com/apache/bookkeeper/raw/7f9005baadbbf312db857be6c3d3c095fe800c54/CHANGES.txt",
                "status": "modified",
                "changes": 4,
                "deletions": 0,
                "sha": "d74c544664b4eebf02e88047531a8ede25186cbb",
                "blob_url": "https://github.com/apache/bookkeeper/blob/7f9005baadbbf312db857be6c3d3c095fe800c54/CHANGES.txt",
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=7f9005baadbbf312db857be6c3d3c095fe800c54"
            },
            {
                "patch": "@@ -90,10 +90,17 @@ private void subUnsub(ByteString topic, ByteString subscriberId, OperationType o\n                           SubscriptionOptions options)\n             throws CouldNotConnectException, ClientAlreadySubscribedException,\n         ClientNotSubscribedException, ServiceDownException {\n-        if (logger.isDebugEnabled())\n-            logger.debug(\"Calling a sync subUnsub request for topic: \" + topic.toStringUtf8() + \", subscriberId: \"\n-                         + subscriberId.toStringUtf8() + \", operationType: \" + operationType + \", createOrAttach: \"\n-                         + options.getCreateOrAttach() + \", messageBound: \" + options.getMessageBound());\n+        if (logger.isDebugEnabled()) {\n+            StringBuilder debugMsg = new StringBuilder().append(\"Calling a sync subUnsub request for topic: \")\n+                                     .append(topic.toStringUtf8()).append(\", subscriberId: \")\n+                                     .append(subscriberId.toStringUtf8()).append(\", operationType: \")\n+                                     .append(operationType);\n+            if (null != options) {\n+                debugMsg.append(\", createOrAttach: \").append(options.getCreateOrAttach())\n+                        .append(\", messageBound: \").append(options.getMessageBound());\n+            }\n+            logger.debug(debugMsg.toString());\n+        }\n         PubSubData pubSubData = new PubSubData(topic, null, subscriberId, operationType, options, null, null);\n         synchronized (pubSubData) {\n             PubSubCallback pubSubCallback = new PubSubCallback(pubSubData);\n@@ -142,10 +149,17 @@ else if (failureException instanceof ServiceDownException)\n     // either SUBSCRIBE or UNSUBSCRIBE.\n     private void asyncSubUnsub(ByteString topic, ByteString subscriberId, Callback<Void> callback, Object context,\n                                OperationType operationType, SubscriptionOptions options) {\n-        if (logger.isDebugEnabled())\n-            logger.debug(\"Calling an async subUnsub request for topic: \" + topic.toStringUtf8() + \", subscriberId: \"\n-                         + subscriberId.toStringUtf8() + \", operationType: \" + operationType + \", createOrAttach: \"\n-                         + options.getCreateOrAttach() + \", messageBound: \" + options.getMessageBound());\n+        if (logger.isDebugEnabled()) {\n+            StringBuilder debugMsg = new StringBuilder().append(\"Calling a async subUnsub request for topic: \")\n+                                     .append(topic.toStringUtf8()).append(\", subscriberId: \")\n+                                     .append(subscriberId.toStringUtf8()).append(\", operationType: \")\n+                                     .append(operationType);\n+            if (null != options) {\n+                debugMsg.append(\", createOrAttach: \").append(options.getCreateOrAttach())\n+                        .append(\", messageBound: \").append(options.getMessageBound());\n+            }\n+            logger.debug(debugMsg.toString());\n+        }\n         // Check if we know which server host is the master for the topic we are\n         // subscribing to.\n         PubSubData pubSubData = new PubSubData(topic, null, subscriberId, operationType, options, callback,",
                "additions": 22,
                "raw_url": "https://github.com/apache/bookkeeper/raw/7f9005baadbbf312db857be6c3d3c095fe800c54/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java",
                "status": "modified",
                "changes": 30,
                "deletions": 8,
                "sha": "0c8634c2d6f2dd1f8f2d7cdbdb3836b46fc623e5",
                "blob_url": "https://github.com/apache/bookkeeper/blob/7f9005baadbbf312db857be6c3d3c095fe800c54/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java",
                "filename": "hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java",
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java?ref=7f9005baadbbf312db857be6c3d3c095fe800c54"
            }
        ],
        "bug_id": "bookkeeper_29",
        "parent": "https://github.com/apache/bookkeeper/commit/4e9ee8d75582a66f3e11d78dea280afbb864db7e",
        "message": "BOOKKEEPER-217: NPE in hedwig client when enable DEBUG (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1329886 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "bookkeeper"
    }
]