{
    "pivot_3f2a9a2": {
        "bug_id": "pivot_3f2a9a2",
        "commit": "https://github.com/apache/pivot/commit/3f2a9a23cea5ef524286c5748d42a7c3a79f7d0e",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/pivot/blob/3f2a9a23cea5ef524286c5748d42a7c3a79f7d0e/build.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pivot/contents/build.xml?ref=3f2a9a23cea5ef524286c5748d42a7c3a79f7d0e",
                "deletions": 2,
                "filename": "build.xml",
                "patch": "@@ -36,12 +36,12 @@ limitations under the License.\n     <property name=\"keystore.passwd\" value=\"apache\"/>\n \n     <!-- Compiler properties -->\n-    <property name=\"compiler.deprecation\" value=\"true\"/>\n+    <property name=\"compiler.deprecation\" value=\"false\"/>\n     <property name=\"compiler.debug\" value=\"false\"/>\n     <property name=\"compiler.target\" value=\"1.6\"/>\n     <property name=\"compiler.encoding\" value=\"UTF-8\"/>\n     <property name=\"compiler.indexJars\" value=\"true\"/>\n-    <property name=\"compiler.arg\" value=\"-Xlint\"/>\n+    <property name=\"compiler.arg\" value=\"-Xlint:-deprecation\"/>\n \n     <!-- Test properties -->\n     <property name=\"test.verbose\" value=\"false\"/>",
                "raw_url": "https://github.com/apache/pivot/raw/3f2a9a23cea5ef524286c5748d42a7c3a79f7d0e/build.xml",
                "sha": "58829fe6830b2f5510ce6bd0e6877b1b158af2d9",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/pivot/blob/3f2a9a23cea5ef524286c5748d42a7c3a79f7d0e/core/src/org/apache/pivot/serialization/JSONSerializer.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/pivot/contents/core/src/org/apache/pivot/serialization/JSONSerializer.java?ref=3f2a9a23cea5ef524286c5748d42a7c3a79f7d0e",
                "deletions": 5,
                "filename": "core/src/org/apache/pivot/serialization/JSONSerializer.java",
                "patch": "@@ -772,7 +772,8 @@ public static Number getNumber(Object root, String path) {\n      * @see #get(Object, String)\n      */\n     public static Short getShort(Object root, String path) {\n-        return getNumber(root, path).shortValue();\n+        Number number = getNumber(root, path);\n+        return (number == null) ? null : number.shortValue();\n     }\n \n     /**\n@@ -784,7 +785,8 @@ public static Short getShort(Object root, String path) {\n      * @see #get(Object, String)\n      */\n     public static Integer getInteger(Object root, String path) {\n-        return getNumber(root, path).intValue();\n+        Number number = getNumber(root, path);\n+        return (number == null) ? null : number.intValue();\n     }\n \n     /**\n@@ -796,7 +798,8 @@ public static Integer getInteger(Object root, String path) {\n      * @see #get(Object, String)\n      */\n     public static Long getLong(Object root, String path) {\n-        return getNumber(root, path).longValue();\n+        Number number = getNumber(root, path);\n+        return (number == null) ? null : number.longValue();\n     }\n \n     /**\n@@ -808,7 +811,8 @@ public static Long getLong(Object root, String path) {\n      * @see #get(Object, String)\n      */\n     public static Float getFloat(Object root, String path) {\n-        return getNumber(root, path).floatValue();\n+        Number number = getNumber(root, path);\n+        return (number == null) ? null : number.floatValue();\n     }\n \n     /**\n@@ -820,7 +824,8 @@ public static Float getFloat(Object root, String path) {\n      * @see #get(Object, String)\n      */\n     public static Double getDouble(Object root, String path) {\n-        return getNumber(root, path).doubleValue();\n+        Number number = getNumber(root, path);\n+        return (number == null) ? null : number.doubleValue();\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/pivot/raw/3f2a9a23cea5ef524286c5748d42a7c3a79f7d0e/core/src/org/apache/pivot/serialization/JSONSerializer.java",
                "sha": "1c74f54873393082c43537e738b50873fb664473",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPEs in JSONSerializer; temporarily disable deprecation warnings in build.xml.\n\ngit-svn-id: https://svn.apache.org/repos/asf/pivot/trunk@918160 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pivot/commit/cf5f62a024ca7da2674d3f2442988dfe05668f82",
        "repo": "pivot",
        "unit_tests": [
            "JSONSerializerTest.java"
        ]
    },
    "pivot_557e08f": {
        "bug_id": "pivot_557e08f",
        "commit": "https://github.com/apache/pivot/commit/557e08f43dafaa10a20df21ef247dcc1ed5915d5",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/pivot/blob/557e08f43dafaa10a20df21ef247dcc1ed5915d5/wtk/src/org/apache/pivot/wtk/ButtonGroup.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/pivot/contents/wtk/src/org/apache/pivot/wtk/ButtonGroup.java?ref=557e08f43dafaa10a20df21ef247dcc1ed5915d5",
                "deletions": 2,
                "filename": "wtk/src/org/apache/pivot/wtk/ButtonGroup.java",
                "patch": "@@ -112,14 +112,18 @@ public Button getSelection() {\n     }\n \n     public void setSelection(Button selection) {\n-        if (!contains(selection)) {\n+        if (selection != null\n+            && !contains(selection)) {\n             throw new IllegalArgumentException();\n         }\n \n         Button previousSelection = this.selection;\n         if (previousSelection != selection) {\n             this.selection = selection;\n-            selection.setSelected(true);\n+\n+            if (selection != null) {\n+                selection.setSelected(true);\n+            }\n \n             buttonGroupListeners.selectionChanged(this, previousSelection);\n         }",
                "raw_url": "https://github.com/apache/pivot/raw/557e08f43dafaa10a20df21ef247dcc1ed5915d5/wtk/src/org/apache/pivot/wtk/ButtonGroup.java",
                "sha": "9299c2fc1ce97867f59898a913d813cc5632c1c4",
                "status": "modified"
            },
            {
                "additions": 68,
                "blob_url": "https://github.com/apache/pivot/blob/557e08f43dafaa10a20df21ef247dcc1ed5915d5/wtk/src/org/apache/pivot/wtkx/WTKXSerializer.java",
                "changes": 157,
                "contents_url": "https://api.github.com/repos/apache/pivot/contents/wtk/src/org/apache/pivot/wtkx/WTKXSerializer.java?ref=557e08f43dafaa10a20df21ef247dcc1ed5915d5",
                "deletions": 89,
                "filename": "wtk/src/org/apache/pivot/wtkx/WTKXSerializer.java",
                "patch": "@@ -163,16 +163,18 @@ public int size() {\n \n         public final Element parent;\n         public final Type type;\n+        public final String id;\n         public final String tagName;\n         public final int lineNumber;\n         public final List<Attribute> attributes;\n \n         public Object value;\n \n-        public Element(Element parent, Type type, String tagName, int lineNumber,\n+        public Element(Element parent, Type type, String id, String tagName, int lineNumber,\n             List<Attribute> attributes, Object value) {\n             this.parent = parent;\n             this.type = type;\n+            this.id = id;\n             this.tagName = tagName;\n             this.lineNumber = lineNumber;\n             this.attributes = attributes;\n@@ -182,23 +184,25 @@ public Element(Element parent, Type type, String tagName, int lineNumber,\n \n     private static class Attribute {\n         public final String namespaceURI;\n-        public final String prefix;\n         public final String localName;\n         public final String value;\n \n-        public Attribute(String namespaceURI, String prefix, String localName, String value) {\n+        public Attribute(String namespaceURI, String localName, String value) {\n             this.namespaceURI = namespaceURI;\n-            this.prefix = prefix;\n             this.localName = localName;\n             this.value = value;\n         }\n     }\n \n-    private class ElementInvocationHandler implements InvocationHandler {\n+    private class AttributeInvocationHandler implements InvocationHandler {\n         private ScriptEngine scriptEngine;\n+        private String event;\n+        private String script;\n \n-        public ElementInvocationHandler(ScriptEngine scriptEngine) {\n+        public AttributeInvocationHandler(ScriptEngine scriptEngine, String event, String script) {\n             this.scriptEngine = scriptEngine;\n+            this.event = event;\n+            this.script = script;\n         }\n \n         @Override\n@@ -207,16 +211,13 @@ public Object invoke(Object proxy, Method method, Object[] args)\n             Object result = null;\n \n             String methodName = method.getName();\n-            Bindings bindings = scriptEngine.getBindings(ScriptContext.ENGINE_SCOPE);\n-            if (bindings.containsKey(methodName)) {\n-                Invocable invocable;\n+            if (methodName.equals(event)) {\n                 try {\n-                    invocable = (Invocable)scriptEngine;\n-                } catch (ClassCastException exception) {\n-                    throw new SerializationException(exception);\n+                    scriptEngine.eval(script);\n+                } catch (ScriptException exception) {\n+                    System.err.println(exception);\n+                    System.err.println(script);\n                 }\n-\n-                result = invocable.invokeFunction(methodName, args);\n             }\n \n             // If the function didn't return a value, return the default\n@@ -231,17 +232,13 @@ public Object invoke(Object proxy, Method method, Object[] args)\n \n             return result;\n         }\n-    };\n+    }\n \n-    private class AttributeInvocationHandler implements InvocationHandler {\n+    private class ElementInvocationHandler implements InvocationHandler {\n         private ScriptEngine scriptEngine;\n-        private String event;\n-        private String script;\n \n-        public AttributeInvocationHandler(ScriptEngine scriptEngine, String event, String script) {\n+        public ElementInvocationHandler(ScriptEngine scriptEngine) {\n             this.scriptEngine = scriptEngine;\n-            this.event = event;\n-            this.script = script;\n         }\n \n         @Override\n@@ -250,13 +247,16 @@ public Object invoke(Object proxy, Method method, Object[] args)\n             Object result = null;\n \n             String methodName = method.getName();\n-            if (methodName.equals(event)) {\n+            Bindings bindings = scriptEngine.getBindings(ScriptContext.ENGINE_SCOPE);\n+            if (bindings.containsKey(methodName)) {\n+                Invocable invocable;\n                 try {\n-                    scriptEngine.eval(script);\n-                } catch (ScriptException exception) {\n-                    System.err.println(exception);\n-                    System.err.println(script);\n+                    invocable = (Invocable)scriptEngine;\n+                } catch (ClassCastException exception) {\n+                    throw new SerializationException(exception);\n                 }\n+\n+                result = invocable.invokeFunction(methodName, args);\n             }\n \n             // If the function didn't return a value, return the default\n@@ -271,7 +271,7 @@ public Object invoke(Object proxy, Method method, Object[] args)\n \n             return result;\n         }\n-    }\n+    };\n \n     private URL location = null;\n     private Resources resources = null;\n@@ -510,20 +510,31 @@ private void processStartElement(XMLStreamReader reader) throws SerializationExc\n         String localName = reader.getLocalName();\n \n         // Build attribute list; these will be processed in the close tag\n+        String id = null;\n         ArrayList<Attribute> attributes = new ArrayList<Attribute>();\n \n         for (int i = 0, n = reader.getAttributeCount(); i < n; i++) {\n-            String attributeNamespaceURI = reader.getAttributeNamespace(i);\n-            if (attributeNamespaceURI == null) {\n-                attributeNamespaceURI = reader.getNamespaceURI(\"\");\n-            }\n-\n             String attributePrefix = reader.getAttributePrefix(i);\n             String attributeLocalName = reader.getAttributeLocalName(i);\n             String attributeValue = reader.getAttributeValue(i);\n \n-            attributes.add(new Attribute(attributeNamespaceURI,\n-                attributePrefix, attributeLocalName, attributeValue));\n+            if (attributePrefix != null\n+                && attributePrefix.equals(WTKX_PREFIX)) {\n+                if (attributeLocalName.equals(ID_ATTRIBUTE)) {\n+                    id = attributeValue;\n+                } else {\n+                    throw new SerializationException(attributePrefix + \":\" + attributeLocalName\n+                        + \" is not a valid attribute.\");\n+                }\n+            } else {\n+                String attributeNamespaceURI = reader.getAttributeNamespace(i);\n+                if (attributeNamespaceURI == null) {\n+                    attributeNamespaceURI = reader.getNamespaceURI(\"\");\n+                }\n+\n+                attributes.add(new Attribute(attributeNamespaceURI, attributeLocalName,\n+                    attributeValue));\n+            }\n         }\n \n         // Determine the type and value of this element\n@@ -567,6 +578,12 @@ private void processStartElement(XMLStreamReader reader) throws SerializationExc\n                     Class<?> type = Class.forName(className);\n                     elementType = Element.Type.INSTANCE;\n                     value = type.newInstance();\n+\n+                    // Add the value to the named objects map here so it is available to\n+                    // sub-elements (rather than waiting until the close tag)\n+                    if (id != null) {\n+                        namedObjects.put(id, value);\n+                    }\n                 } catch (Exception exception) {\n                     throw new SerializationException(exception);\n                 }\n@@ -611,7 +628,7 @@ private void processStartElement(XMLStreamReader reader) throws SerializationExc\n         }\n \n         Location xmlStreamLocation = reader.getLocation();\n-        element = new Element(element, elementType, tagName, xmlStreamLocation.getLineNumber(),\n+        element = new Element(element, elementType, id, tagName, xmlStreamLocation.getLineNumber(),\n             attributes, value);\n \n         // If this is the root, set it\n@@ -628,7 +645,6 @@ private void processEndElement(XMLStreamReader reader)\n         switch (element.type) {\n             case INSTANCE:\n             case INCLUDE: {\n-                String id = null;\n                 ArrayList<Attribute> instancePropertyAttributes = new ArrayList<Attribute>();\n                 ArrayList<Attribute> staticPropertyAttributes = new ArrayList<Attribute>();\n \n@@ -639,28 +655,18 @@ private void processEndElement(XMLStreamReader reader)\n                     Resources resources = this.resources;\n \n                     for (Attribute attribute : element.attributes) {\n-                        if (attribute.prefix != null\n-                            && attribute.prefix.equals(WTKX_PREFIX)) {\n-                            if (attribute.localName.equals(ID_ATTRIBUTE)) {\n-                                id = attribute.value;\n-                            } else {\n-                                throw new SerializationException(WTKX_PREFIX + \":\" + attribute.localName\n-                                    + \" is not a valid attribute.\");\n-                            }\n+                        if (attribute.localName.equals(INCLUDE_SRC_ATTRIBUTE)) {\n+                            src = attribute.value;\n+                        } else if (attribute.localName.equals(INCLUDE_RESOURCES_ATTRIBUTE)) {\n+                            resources = new Resources(resources, attribute.value);\n                         } else {\n-                            if (attribute.localName.equals(INCLUDE_SRC_ATTRIBUTE)) {\n-                                src = attribute.value;\n-                            } else if (attribute.localName.equals(INCLUDE_RESOURCES_ATTRIBUTE)) {\n-                                resources = new Resources(resources, attribute.value);\n-                            } else {\n-                                if (!Character.isUpperCase(attribute.localName.charAt(0))) {\n-                                    throw new SerializationException(\"Instance property setters are not\"\n-                                        + \" supported for \" + WTKX_PREFIX + \":\" + INCLUDE_TAG\n-                                        + \" \" + \" tag.\");\n-                                }\n-\n-                                staticPropertyAttributes.add(attribute);\n+                            if (!Character.isUpperCase(attribute.localName.charAt(0))) {\n+                                throw new SerializationException(\"Instance property setters are not\"\n+                                    + \" supported for \" + WTKX_PREFIX + \":\" + INCLUDE_TAG\n+                                    + \" \" + \" tag.\");\n                             }\n+\n+                            staticPropertyAttributes.add(attribute);\n                         }\n                     }\n \n@@ -672,8 +678,8 @@ private void processEndElement(XMLStreamReader reader)\n \n                     // Read the object\n                     WTKXSerializer serializer = new WTKXSerializer(resources);\n-                    if (id != null) {\n-                        includeSerializers.put(id, serializer);\n+                    if (element.id != null) {\n+                        includeSerializers.put(element.id, serializer);\n                     }\n \n                     if (src.charAt(0) == '/') {\n@@ -682,42 +688,22 @@ private void processEndElement(XMLStreamReader reader)\n                         element.value = serializer.readObject(new URL(location, src));\n                     }\n \n-                    if (id == null\n+                    if (element.id == null\n                         && !serializer.isEmpty()\n                         && serializer.scriptEngineManager == null) {\n                         System.err.println(\"Include \\\"\" + src + \"\\\" defines unreachable objects.\");\n                     }\n                 } else {\n                     // Process attributes looking for wtkx:id and all property setters\n                     for (Attribute attribute : element.attributes) {\n-                        if (attribute.prefix != null\n-                            && attribute.prefix.equals(WTKX_PREFIX)) {\n-                            if (attribute.localName.equals(ID_ATTRIBUTE)) {\n-                                id = attribute.value;\n-                            } else {\n-                                throw new SerializationException(WTKX_PREFIX + \":\" + attribute.localName\n-                                    + \" is not a valid attribute.\");\n-                            }\n+                        if (Character.isUpperCase(attribute.localName.charAt(0))) {\n+                            staticPropertyAttributes.add(attribute);\n                         } else {\n-                            if (Character.isUpperCase(attribute.localName.charAt(0))) {\n-                                staticPropertyAttributes.add(attribute);\n-                            } else {\n-                                instancePropertyAttributes.add(attribute);\n-                            }\n+                            instancePropertyAttributes.add(attribute);\n                         }\n                     }\n                 }\n \n-                // If an ID was specified, add the value to the named object map\n-                if (id != null) {\n-                    if (id.length() == 0) {\n-                        throw new IllegalArgumentException(WTKX_PREFIX + \":\" + ID_ATTRIBUTE\n-                            + \" must not be null.\");\n-                    }\n-\n-                    namedObjects.put(id, element.value);\n-                }\n-\n                 // Apply instance attributes\n                 Dictionary<String, Object> dictionary;\n                 if (element.value instanceof Dictionary<?, ?>) {\n@@ -899,13 +885,6 @@ private void processEndElement(XMLStreamReader reader)\n                 String src = null;\n                 String language = this.language;\n                 for (Attribute attribute : element.attributes) {\n-                    if (attribute.prefix != null\n-                        && attribute.prefix.length() > 0) {\n-                        throw new SerializationException(attribute.prefix + \":\" +\n-                            attribute.localName + \" is not a valid\" + \" attribute for the \"\n-                            + WTKX_PREFIX + \":\" + SCRIPT_TAG + \" tag.\");\n-                    }\n-\n                     if (attribute.localName.equals(SCRIPT_SRC_ATTRIBUTE)) {\n                         src = attribute.value;\n                     } else if (attribute.localName.equals(SCRIPT_LANGUAGE_ATTRIBUTE)) {",
                "raw_url": "https://github.com/apache/pivot/raw/557e08f43dafaa10a20df21ef247dcc1ed5915d5/wtk/src/org/apache/pivot/wtkx/WTKXSerializer.java",
                "sha": "3041b0c628c4cf4e91c58ad12e9aeb85fe763626",
                "status": "modified"
            }
        ],
        "message": "Process wtkx:id as soon as the associated instance is available (don't wait until closing tag for instance elements); fix NPE in ButtonGroup.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/pivot/trunk@819508 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pivot/commit/1ad73f36e980780412d6e3874dc98e2faabce82c",
        "repo": "pivot",
        "unit_tests": [
            "ButtonGroupTest.java"
        ]
    },
    "pivot_c32c0d3": {
        "bug_id": "pivot_c32c0d3",
        "commit": "https://github.com/apache/pivot/commit/c32c0d3e5a7d49b813845a10eb69fe74b6f1a2ca",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/pivot/blob/c32c0d3e5a7d49b813845a10eb69fe74b6f1a2ca/core/src/org/apache/pivot/serialization/CSVSerializer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pivot/contents/core/src/org/apache/pivot/serialization/CSVSerializer.java?ref=c32c0d3e5a7d49b813845a10eb69fe74b6f1a2ca",
                "deletions": 1,
                "filename": "core/src/org/apache/pivot/serialization/CSVSerializer.java",
                "patch": "@@ -397,7 +397,9 @@ private String readValue(Reader reader)\n         }\n \n         // Trim the value\n-        value = value.trim();\n+        if (value != null) {\n+            value = value.trim();\n+        }\n \n         return value;\n     }",
                "raw_url": "https://github.com/apache/pivot/raw/c32c0d3e5a7d49b813845a10eb69fe74b6f1a2ca/core/src/org/apache/pivot/serialization/CSVSerializer.java",
                "sha": "5af9b8856b80ec3ce22bfbf3d7016dd7efb6f24f",
                "status": "modified"
            }
        ],
        "message": "fix potential NPE, value can be null in readValue()\n\ngit-svn-id: https://svn.apache.org/repos/asf/pivot/trunk@957451 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pivot/commit/a7af7295c46fbd8c3772e183ce3e96a8345c1a2f",
        "repo": "pivot",
        "unit_tests": [
            "CSVSerializerTest.java"
        ]
    }
}