[
    {
        "repo": "hive",
        "commit": "https://github.com/apache/hive/commit/afd7b5b38556f638782606edbe6850ef70e1c8bb",
        "bug_id": "hive_afd7b5b",
        "message": "HIVE-21507: Hive swallows NPE if no delegation token found (Denes Bodo, reviewed by Zoltan Haindrich, Daniel Dai)\n\nSigned-off-by: Zoltan Haindrich <kirk@rxd.hu>, Daniel Dai <daijyc@gmail.com>",
        "parent": "https://github.com/apache/hive/commit/6d74222521d2a1333990b9b3577ec9a7f7e619b8",
        "patched_files": [
            "HiveConnection.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 41,
                "raw_url": "https://github.com/apache/hive/raw/afd7b5b38556f638782606edbe6850ef70e1c8bb/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java",
                "contents_url": "https://api.github.com/repos/apache/hive/contents/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java?ref=afd7b5b38556f638782606edbe6850ef70e1c8bb",
                "filename": "jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java",
                "deletions": 21,
                "sha": "4c7119f112844ffcc01e7c3dcd628fa2d83684a1",
                "blob_url": "https://github.com/apache/hive/blob/afd7b5b38556f638782606edbe6850ef70e1c8bb/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java",
                "patch": "@@ -760,36 +760,56 @@ SSLConnectionSocketFactory getTwoWaySSLSocketFactory() throws SQLException {\n   }\n \n   // Lookup the delegation token. First in the connection URL, then Configuration\n-  private String getClientDelegationToken(Map<String, String> jdbcConnConf)\n-      throws SQLException {\n+  private String getClientDelegationToken(Map<String, String> jdbcConnConf) throws SQLException {\n     String tokenStr = null;\n-    if (JdbcConnectionParams.AUTH_TOKEN.equalsIgnoreCase(jdbcConnConf.get(JdbcConnectionParams.AUTH_TYPE))) {\n-      // check delegation token in job conf if any\n+    if (!JdbcConnectionParams.AUTH_TOKEN.equalsIgnoreCase(jdbcConnConf.get(JdbcConnectionParams.AUTH_TYPE))) {\n+      return null;\n+    }\n+    DelegationTokenFetcher fetcher = new DelegationTokenFetcher();\n+    try {\n+      tokenStr = fetcher.getTokenStringFromFile();\n+    } catch (IOException e) {\n+      LOG.warn(\"Cannot get token from environment variable $HADOOP_TOKEN_FILE_LOCATION=\" +\n+              System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION));\n+    }\n+    if (tokenStr == null) {\n       try {\n-        if (System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION) != null) {\n-          try {\n-            Credentials cred = new Credentials();\n-            DataInputStream dis = new DataInputStream(new FileInputStream(System.getenv(UserGroupInformation\n-                    .HADOOP_TOKEN_FILE_LOCATION)));\n-            cred.readTokenStorageStream(dis);\n-            dis.close();\n-            Token<? extends TokenIdentifier> token = cred.getToken(new Text(\"hive\"));\n-            tokenStr = token.encodeToUrlString();\n-          } catch (IOException e) {\n-            LOG.warn(\"Cannot get token from environment variable $HADOOP_TOKEN_FILE_LOCATION=\" +\n-                    System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION));\n-          }\n-        }\n-        if (tokenStr == null) {\n-          tokenStr = SessionUtils.getTokenStrForm(HiveAuthConstants.HS2_CLIENT_TOKEN);\n-        }\n+        return fetcher.getTokenFromSession();\n       } catch (IOException e) {\n         throw new SQLException(\"Error reading token \", e);\n       }\n     }\n     return tokenStr;\n   }\n \n+  static class DelegationTokenFetcher {\n+    String getTokenStringFromFile() throws IOException {\n+      if (System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION) == null) {\n+        return null;\n+      }\n+      Credentials cred = new Credentials();\n+      try (DataInputStream dis = new DataInputStream(new FileInputStream(System.getenv(UserGroupInformation\n+              .HADOOP_TOKEN_FILE_LOCATION)))) {\n+        cred.readTokenStorageStream(dis);\n+      }\n+      return getTokenFromCredential(cred, \"hive\");\n+    }\n+\n+    String getTokenFromCredential(Credentials cred, String key) throws IOException {\n+      Token<? extends TokenIdentifier> token = cred.getToken(new Text(key));\n+      if (token == null) {\n+        LOG.warn(\"Delegation token with key: [hive] cannot be found.\");\n+        return null;\n+      }\n+      return token.encodeToUrlString();\n+    }\n+\n+    String getTokenFromSession() throws IOException {\n+      LOG.debug(\"Fetching delegation token from session.\");\n+      return SessionUtils.getTokenStrForm(HiveAuthConstants.HS2_CLIENT_TOKEN);\n+    }\n+  }\n+\n   private void openSession() throws SQLException {\n     TOpenSessionReq openReq = new TOpenSessionReq();\n ",
                "changes": 62
            },
            {
                "status": "added",
                "additions": 60,
                "raw_url": "https://github.com/apache/hive/raw/afd7b5b38556f638782606edbe6850ef70e1c8bb/jdbc/src/test/org/apache/hive/jdbc/TestHiveConnection.java",
                "contents_url": "https://api.github.com/repos/apache/hive/contents/jdbc/src/test/org/apache/hive/jdbc/TestHiveConnection.java?ref=afd7b5b38556f638782606edbe6850ef70e1c8bb",
                "filename": "jdbc/src/test/org/apache/hive/jdbc/TestHiveConnection.java",
                "deletions": 0,
                "sha": "bcd2608e1ba0101d94574cf3692a3cab66859a01",
                "blob_url": "https://github.com/apache/hive/blob/afd7b5b38556f638782606edbe6850ef70e1c8bb/jdbc/src/test/org/apache/hive/jdbc/TestHiveConnection.java",
                "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hive.jdbc;\n+\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.security.Credentials;\n+import org.apache.hadoop.security.token.Token;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+public class TestHiveConnection {\n+\n+  private static final String EXISTING_TOKEN = \"ExistingToken\";\n+  public static final String EXPECTED_TOKEN_STRING_FORM = \"AAAAAA\";\n+  private static HiveConnection.DelegationTokenFetcher fetcher;\n+\n+  @BeforeClass\n+  public static void init() {\n+    fetcher = new HiveConnection.DelegationTokenFetcher();\n+  }\n+\n+  @Test\n+  public void testIfNPEThrownWhileGettingDelegationToken() throws IOException {\n+    try {\n+      String tokenStr = fetcher.getTokenFromCredential(new Credentials(), \"hive\");\n+      Assert.assertEquals(\"Token with id: hive shall not be found.\", null, tokenStr);\n+    } catch (NullPointerException e) {\n+      Assert.fail(\"This NPE is not handled in the code elsewhere so user is not notified about it!\");\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  @Test\n+  public void testIfGettingDelegationTokenFromCredentialWorks() throws IOException {\n+    Credentials creds = new Credentials();\n+    creds.addToken(new Text(EXISTING_TOKEN), new Token<>());\n+\n+    String tokenStr = fetcher.getTokenFromCredential(creds, EXISTING_TOKEN);\n+    Assert.assertEquals(\"Token string form is not as expected.\", EXPECTED_TOKEN_STRING_FORM, tokenStr);\n+  }\n+}",
                "changes": 60
            }
        ],
        "unit_tests": [
            "TestHiveConnection.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "jdbc/src/test/org/apache/hive/jdbc/TestHiveConnection.java",
        "buggy_files": [
            "jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java"
        ],
        "fixed": true
    }
]