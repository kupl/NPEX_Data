{
    "commons-configuration_1c53281": {
        "repo": "commons-configuration",
        "message": "CONFIGURATION-282: Initialize default expression engine for HierarchicalConfiguration lazily if it is null. This should avoid NPEs after redeployment.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/configuration/trunk@554746 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-configuration/commit/1c53281831611837de4358b6e75de594867f46b0",
        "parent": "https://github.com/apache/commons-configuration/commit/497bf061d76b0235738ad939d3196004036b207c",
        "bug_id": "commons-configuration_1c53281",
        "file": [
            {
                "sha": "ad839b9440c0f8bb5660fe53c69f89156401c164",
                "filename": "src/java/org/apache/commons/configuration/HierarchicalConfiguration.java",
                "blob_url": "https://github.com/apache/commons-configuration/blob/1c53281831611837de4358b6e75de594867f46b0/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java",
                "raw_url": "https://github.com/apache/commons-configuration/raw/1c53281831611837de4358b6e75de594867f46b0/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java?ref=1c53281831611837de4358b6e75de594867f46b0",
                "patch": "@@ -151,7 +151,7 @@\n     private static final long serialVersionUID = 3373812230395363192L;\n \n     /** Stores the default expression engine to be used for new objects.*/\n-    private static ExpressionEngine defaultExpressionEngine = new DefaultExpressionEngine();\n+    private static ExpressionEngine defaultExpressionEngine;\n \n     /** Stores the root node of this configuration. This field is required for\n      * backwards compatibility only.\n@@ -258,8 +258,12 @@ public void setRootNode(ConfigurationNode rootNode)\n      * @return the default expression engine\n      * @since 1.3\n      */\n-    public static ExpressionEngine getDefaultExpressionEngine()\n+    public static synchronized ExpressionEngine getDefaultExpressionEngine()\n     {\n+        if (defaultExpressionEngine == null)\n+        {\n+            defaultExpressionEngine = new DefaultExpressionEngine();\n+        }\n         return defaultExpressionEngine;\n     }\n \n@@ -272,7 +276,7 @@ public static ExpressionEngine getDefaultExpressionEngine()\n      * @param engine the new default expression engine\n      * @since 1.3\n      */\n-    public static void setDefaultExpressionEngine(ExpressionEngine engine)\n+    public static synchronized void setDefaultExpressionEngine(ExpressionEngine engine)\n     {\n         if (engine == null)\n         {",
                "deletions": 3
            },
            {
                "sha": "85b0ec1bb2152df35de1b6f475bcb2d99eb586e6",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/commons-configuration/blob/1c53281831611837de4358b6e75de594867f46b0/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/commons-configuration/raw/1c53281831611837de4358b6e75de594867f46b0/xdocs/changes.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/xdocs/changes.xml?ref=1c53281831611837de4358b6e75de594867f46b0",
                "patch": "@@ -23,6 +23,11 @@\n \n   <body>\n     <release version=\"1.5-SNAPSHOT\" date=\"in SVN\" description=\"\">\n+      <action dev=\"oheger\" type=\"fix\" issue=\"CONFIGURATION-282\">\n+        The default expression engine used by HierarchicalConfiguration\n+        instances is now lazily initialized. This avoids NullPointerExceptions\n+        in certain server environments after a redeploy.\n+      </action>\n       <action dev=\"oheger\" type=\"fix\" issue=\"CONFIGURATION-281\">\n         Cycles in the JNDI tree no longer cause a stack overflow in\n         JNDIConfiguration.",
                "deletions": 0
            }
        ],
        "patched_files": [
            "HierarchicalConfiguration.java"
        ],
        "unit_tests": [
            "TestHierarchicalConfiguration.java"
        ]
    },
    "commons-configuration_4975496": {
        "repo": "commons-configuration",
        "message": "Fixed another IntelliJ warning related to a potential NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@1674558 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-configuration/commit/4975496a3ec2c152fb48a7b681000447c784d336",
        "parent": "https://github.com/apache/commons-configuration/commit/55f62e3f0a761ba60300f70285d10b038092c36f",
        "bug_id": "commons-configuration_4975496",
        "file": [
            {
                "sha": "0a3a3dd8d6343ef98885953f8486631a1c3e9bc8",
                "filename": "src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java",
                "blob_url": "https://github.com/apache/commons-configuration/blob/4975496a3ec2c152fb48a7b681000447c784d336/src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java",
                "raw_url": "https://github.com/apache/commons-configuration/raw/4975496a3ec2c152fb48a7b681000447c784d336/src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java?ref=4975496a3ec2c152fb48a7b681000447c784d336",
                "patch": "@@ -574,6 +574,7 @@ else if (\"dict\".equals(qName))\n             {\n                 // remove the root of the XMLPropertyListConfiguration previously pushed on the stack\n                 PListNodeBuilder builder = pop();\n+                assert builder != null : \"Stack was empty!\";\n                 if (peek() instanceof ArrayNodeBuilder)\n                 {\n                     // create the configuration",
                "deletions": 0
            }
        ],
        "patched_files": [
            "XMLPropertyListConfiguration.java"
        ],
        "unit_tests": [
            "TestXMLPropertyListConfiguration.java"
        ]
    },
    "commons-configuration_3af8e6e": {
        "repo": "commons-configuration",
        "message": "Fixed IntelliJ warnings related to potential NPEs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@1674555 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-configuration/commit/3af8e6e23b211cd7d564b4d32cd214987131183d",
        "parent": "https://github.com/apache/commons-configuration/commit/997f50595fd7b2df1730c7d4f9a0332ae9aad9f6",
        "bug_id": "commons-configuration_3af8e6e",
        "file": [
            {
                "sha": "4951804b8c0ca9343af354db9b2c9534d300cc6e",
                "filename": "src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java",
                "blob_url": "https://github.com/apache/commons-configuration/blob/3af8e6e23b211cd7d564b4d32cd214987131183d/src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java",
                "raw_url": "https://github.com/apache/commons-configuration/raw/3af8e6e23b211cd7d564b4d32cd214987131183d/src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java",
                "status": "modified",
                "changes": 40,
                "additions": 29,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java?ref=3af8e6e23b211cd7d564b4d32cd214987131183d",
                "patch": "@@ -47,6 +47,7 @@\n import org.apache.commons.configuration2.HierarchicalConfiguration;\n import org.apache.commons.configuration2.MapConfiguration;\n import org.apache.commons.configuration2.ex.ConfigurationException;\n+import org.apache.commons.configuration2.ex.ConfigurationRuntimeException;\n import org.apache.commons.configuration2.io.FileLocator;\n import org.apache.commons.configuration2.io.FileLocatorAware;\n import org.apache.commons.configuration2.tree.ImmutableNode;\n@@ -413,7 +414,7 @@ else if (value instanceof Map)\n         }\n         else if (value instanceof byte[])\n         {\n-            String base64 = null;\n+            String base64;\n             try\n             {\n                 base64 = new String(Base64.encodeBase64((byte[]) value), DATA_ENCODING);\n@@ -501,6 +502,23 @@ private PListNodeBuilder peek()\n             }\n         }\n \n+        /**\n+         * Returns the node on top of the non-empty stack. Throws an exception if the\n+         * stack is empty.\n+         *\n+         * @return the top node of the stack\n+         * @throws ConfigurationRuntimeException if the stack is empty\n+         */\n+        private PListNodeBuilder peekNE()\n+        {\n+            PListNodeBuilder result = peek();\n+            if (result == null)\n+            {\n+                throw new ConfigurationRuntimeException(\"Access to empty stack!\");\n+            }\n+            return result;\n+        }\n+\n         /**\n          * Remove and return the node on the top of the stack.\n          */\n@@ -549,7 +567,7 @@ public void endElement(String uri, String localName, String qName) throws SAXExc\n                 // create a new node, link it to its parent and push it on the stack\n                 PListNodeBuilder node = new PListNodeBuilder();\n                 node.setName(buffer.toString());\n-                peek().addChild(node);\n+                peekNE().addChild(node);\n                 push(node);\n             }\n             else if (\"dict\".equals(qName))\n@@ -562,41 +580,41 @@ else if (\"dict\".equals(qName))\n                     XMLPropertyListConfiguration config = new XMLPropertyListConfiguration(builder.createNode());\n \n                     // add it to the ArrayNodeBuilder\n-                    ArrayNodeBuilder node = (ArrayNodeBuilder) peek();\n+                    ArrayNodeBuilder node = (ArrayNodeBuilder) peekNE();\n                     node.addValue(config);\n                 }\n             }\n             else\n             {\n                 if (\"string\".equals(qName))\n                 {\n-                    peek().addValue(buffer.toString());\n+                    peekNE().addValue(buffer.toString());\n                 }\n                 else if (\"integer\".equals(qName))\n                 {\n-                    peek().addIntegerValue(buffer.toString());\n+                    peekNE().addIntegerValue(buffer.toString());\n                 }\n                 else if (\"real\".equals(qName))\n                 {\n-                    peek().addRealValue(buffer.toString());\n+                    peekNE().addRealValue(buffer.toString());\n                 }\n                 else if (\"true\".equals(qName))\n                 {\n-                    peek().addTrueValue();\n+                    peekNE().addTrueValue();\n                 }\n                 else if (\"false\".equals(qName))\n                 {\n-                    peek().addFalseValue();\n+                    peekNE().addFalseValue();\n                 }\n                 else if (\"data\".equals(qName))\n                 {\n-                    peek().addDataValue(buffer.toString());\n+                    peekNE().addDataValue(buffer.toString());\n                 }\n                 else if (\"date\".equals(qName))\n                 {\n                     try\n                     {\n-                        peek().addDateValue(buffer.toString());\n+                        peekNE().addDateValue(buffer.toString());\n                     }\n                     catch (IllegalArgumentException iex)\n                     {\n@@ -607,7 +625,7 @@ else if (\"date\".equals(qName))\n                 else if (\"array\".equals(qName))\n                 {\n                     ArrayNodeBuilder array = (ArrayNodeBuilder) pop();\n-                    peek().addList(array);\n+                    peekNE().addList(array);\n                 }\n \n                 // remove the plist node on the stack once the value has been parsed,",
                "deletions": 11
            }
        ],
        "patched_files": [
            "XMLPropertyListConfiguration.java"
        ],
        "unit_tests": [
            "TestXMLPropertyListConfiguration.java"
        ]
    },
    "commons-configuration_4c9402e": {
        "repo": "commons-configuration",
        "message": "[CONFIGURATION-767] NullPointerException in\nXMLConfiguration#createTransformer() when no FileLocator is set.\n\nFormat tweak.",
        "commit": "https://github.com/apache/commons-configuration/commit/4c9402eca4322e092ff59f855867eedbe4640462",
        "parent": "https://github.com/apache/commons-configuration/commit/746821e2568246d8d7b09403f68930ab000a9592",
        "bug_id": "commons-configuration_4c9402e",
        "file": [
            {
                "sha": "a180a302493f94b36c861170268cc8270601e8d4",
                "filename": "src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java",
                "blob_url": "https://github.com/apache/commons-configuration/blob/4c9402eca4322e092ff59f855867eedbe4640462/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java",
                "raw_url": "https://github.com/apache/commons-configuration/raw/4c9402eca4322e092ff59f855867eedbe4640462/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java?ref=4c9402eca4322e092ff59f855867eedbe4640462",
                "patch": "@@ -1784,6 +1784,7 @@ public void testWrite() throws Exception\n         // Check that we can parse the XML.\n         Assert.assertNotNull(parseXml(sw.toString()));\n     }\n+\n     /**\n      * Tests accessing properties when the XPATH expression engine is set.\n      */",
                "deletions": 0
            }
        ],
        "patched_files": [
            "XMLConfiguration.java"
        ],
        "unit_tests": [
            "TestXMLConfiguration.java"
        ]
    },
    "commons-configuration_be80820": {
        "repo": "commons-configuration",
        "message": "Fix NPE when no ReloadingStrategy and enable detection of newly created files.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@764689 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-configuration/commit/be80820a0104abf78bf1d8dac736c638a07b6702",
        "parent": "https://github.com/apache/commons-configuration/commit/ef4f8d1c935572c1112330df6b760aa396bbf5a9",
        "bug_id": "commons-configuration_be80820",
        "file": [
            {
                "sha": "f37aeb5fbe656e75543a7f15b4f7c3cce9310a28",
                "filename": "src/java/org/apache/commons/configuration/MultiFileHierarchicalConfiguration.java",
                "blob_url": "https://github.com/apache/commons-configuration/blob/be80820a0104abf78bf1d8dac736c638a07b6702/src/java/org/apache/commons/configuration/MultiFileHierarchicalConfiguration.java",
                "raw_url": "https://github.com/apache/commons-configuration/raw/be80820a0104abf78bf1d8dac736c638a07b6702/src/java/org/apache/commons/configuration/MultiFileHierarchicalConfiguration.java",
                "status": "modified",
                "changes": 76,
                "additions": 48,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/java/org/apache/commons/configuration/MultiFileHierarchicalConfiguration.java?ref=be80820a0104abf78bf1d8dac736c638a07b6702",
                "patch": "@@ -92,6 +92,9 @@ protected synchronized Object initialValue()\n     /** The Logger name to use */\n     private String loggerName = \"\";\n \n+    /** The Reloading strategy to use on created configurations */\n+    private ReloadingStrategy fileStrategy;\n+\n     /**\n      * Default Constructor.\n      */\n@@ -156,6 +159,16 @@ public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)\n         this.attributeSplittingDisabled = attributeSplittingDisabled;\n     }\n \n+    public ReloadingStrategy getReloadingStrategy()\n+    {\n+        return fileStrategy;\n+    }\n+\n+    public void setReloadingStrategy(ReloadingStrategy strategy)\n+    {\n+        this.fileStrategy = strategy;\n+    }\n+\n     /**\n      * Set to true if an empty Configuration should be returned when loading fails. If\n      * false an exception will be thrown.\n@@ -669,36 +682,35 @@ public void save() throws ConfigurationException\n         }\n \n         XMLConfiguration configuration = new XMLConfiguration();\n-        try\n+\n+        if (loggerName != null)\n         {\n-            if (loggerName != null)\n+            Log log = LogFactory.getLog(loggerName);\n+            if (log != null)\n             {\n-                Log log = LogFactory.getLog(loggerName);\n-                if (log != null)\n-                {\n-                    configuration.setLogger(log);\n-                }\n+                configuration.setLogger(log);\n             }\n-            configuration.setBasePath(getBasePath());\n-            configuration.setFileName(path);\n-            configuration.setFileSystem(getFileSystem());\n-            configuration.setExpressionEngine(getExpressionEngine());\n-            configuration.setReloadingStrategy(createReloadingStrategy());\n-            configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());\n-            configuration.setValidating(validating);\n-            configuration.setSchemaValidation(schemaValidation);\n-            configuration.setAttributeSplittingDisabled(attributeSplittingDisabled);\n-            configuration.setListDelimiter(getListDelimiter());\n-            configuration.addConfigurationListener(this);\n-            configuration.addErrorListener(this);\n+        }\n+        configuration.setBasePath(getBasePath());\n+        configuration.setFileName(path);\n+        configuration.setFileSystem(getFileSystem());\n+        configuration.setExpressionEngine(getExpressionEngine());\n+        ReloadingStrategy strategy = createReloadingStrategy();\n+        if (strategy != null)\n+        {\n+            configuration.setReloadingStrategy(strategy);\n+        }\n+        configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());\n+        configuration.setValidating(validating);\n+        configuration.setSchemaValidation(schemaValidation);\n+        configuration.setAttributeSplittingDisabled(attributeSplittingDisabled);\n+        configuration.setListDelimiter(getListDelimiter());\n+        configuration.addConfigurationListener(this);\n+        configuration.addErrorListener(this);\n+\n+        try\n+        {\n             configuration.load();\n-            synchronized (configurationsMap)\n-            {\n-                if (!configurationsMap.containsKey(path))\n-                {\n-                    configurationsMap.put(path, configuration);\n-                }\n-            }\n         }\n         catch (ConfigurationException ce)\n         {\n@@ -707,6 +719,13 @@ public void save() throws ConfigurationException\n                 throw new ConfigurationRuntimeException(ce);\n             }\n         }\n+        synchronized (configurationsMap)\n+        {\n+            if (!configurationsMap.containsKey(path))\n+            {\n+                configurationsMap.put(path, configuration);\n+            }\n+        }\n \n         return configuration;\n     }\n@@ -717,13 +736,13 @@ public void save() throws ConfigurationException\n      */\n     private ReloadingStrategy createReloadingStrategy()\n     {\n-        if (getReloadingStrategy() == null)\n+        if (fileStrategy == null)\n         {\n             return null;\n         }\n         try\n         {\n-            ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(getReloadingStrategy());\n+            ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);\n             strategy.setConfiguration(null);\n             return strategy;\n         }\n@@ -733,4 +752,5 @@ private ReloadingStrategy createReloadingStrategy()\n         }\n \n     }\n+\n }",
                "deletions": 28
            },
            {
                "sha": "0783952b46ed8b324a3e4ff699dd6bd09909f02c",
                "filename": "src/test/org/apache/commons/configuration/TestVFSConfigurationBuilder.java",
                "blob_url": "https://github.com/apache/commons-configuration/blob/be80820a0104abf78bf1d8dac736c638a07b6702/src/test/org/apache/commons/configuration/TestVFSConfigurationBuilder.java",
                "raw_url": "https://github.com/apache/commons-configuration/raw/be80820a0104abf78bf1d8dac736c638a07b6702/src/test/org/apache/commons/configuration/TestVFSConfigurationBuilder.java",
                "status": "modified",
                "changes": 35,
                "additions": 32,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/test/org/apache/commons/configuration/TestVFSConfigurationBuilder.java?ref=be80820a0104abf78bf1d8dac736c638a07b6702",
                "patch": "@@ -929,7 +929,7 @@ else if (conf instanceof CombinedConfiguration)\n                     if (conf instanceof FileSystemBased)\n                     {\n                         assertTrue(\"Incorrect file system for Configuration \" + conf,\n-                            ((FileSystemBased)conf).getFileSystem() == fs); \n+                            ((FileSystemBased)conf).getFileSystem() == fs);\n                     }\n                 }\n             }\n@@ -973,12 +973,12 @@ else if (conf instanceof CombinedConfiguration)\n         }\n     }\n \n-    public void testFileMonitor() throws Exception\n+    public void testFileMonitor1() throws Exception\n     {\n-\n         // create a new configuration\n         File input = new File(\"target/test-classes/testMultiConfiguration_1001.xml\");\n         File output = new File(\"target/test-classes/testwrite/testMultiConfiguration_1001.xml\");\n+        output.delete();\n         output.getParentFile().mkdir();\n         copyFile(input, output);\n \n@@ -998,8 +998,37 @@ public void testFileMonitor() throws Exception\n         // Let FileMonitor detect the change.\n         Thread.sleep(2000);\n         verify(\"1001\", config, 50);\n+        output.delete();\n     }\n \n+    public void testFileMonitor2() throws Exception\n+    {\n+        // create a new configuration\n+        File input = new File(\"target/test-classes/testMultiConfiguration_1002.xml\");\n+        File output = new File(\"target/test-classes/testwrite/testMultiConfiguration_1002.xml\");\n+        output.delete();\n+\n+        factory.setFile(FILEMONITOR_FILE);\n+        FileSystem.resetDefaultFileSystem();\n+        System.getProperties().remove(\"Id\");\n+\n+        CombinedConfiguration config = factory.getConfiguration(true);\n+        assertNotNull(config);\n+\n+        verify(\"1002\", config, 50);\n+        Thread.sleep(1000);\n+\n+        output.getParentFile().mkdir();\n+        copyFile(input, output);\n+\n+        // Allow time for the monitor to notice the change.\n+        Thread.sleep(2000);\n+        verify(\"1002\", config, 25);\n+        output.delete();\n+    }\n+\n+\n+\n     private void copyFile(File input, File output) throws IOException\n     {\n         Reader reader = new FileReader(input);",
                "deletions": 3
            }
        ],
        "patched_files": [
            "MultiFileHierarchicalConfiguration.java"
        ],
        "unit_tests": [
            "TestMultiFileHierarchicalConfiguration.java",
            "TestVFSConfigurationBuilder.java"
        ]
    },
    "commons-configuration_cfd2560": {
        "repo": "commons-configuration",
        "message": "CONFIGURATION-301: Fix for NPE when saving an XMLConfiguration constructed from a HierarchicalConfiguration\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@603841 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-configuration/commit/cfd2560843033325d5ed7001f363e93fd5294000",
        "parent": "https://github.com/apache/commons-configuration/commit/7a5182133f90f7d5d9981c5f0be59c315e0828ec",
        "bug_id": "commons-configuration_cfd2560",
        "file": [
            {
                "sha": "041fb2f7e9386b2d55ba6a104c37cb2c7a69031a",
                "filename": "src/java/org/apache/commons/configuration/XMLConfiguration.java",
                "blob_url": "https://github.com/apache/commons-configuration/blob/cfd2560843033325d5ed7001f363e93fd5294000/src/java/org/apache/commons/configuration/XMLConfiguration.java",
                "raw_url": "https://github.com/apache/commons-configuration/raw/cfd2560843033325d5ed7001f363e93fd5294000/src/java/org/apache/commons/configuration/XMLConfiguration.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/java/org/apache/commons/configuration/XMLConfiguration.java?ref=cfd2560843033325d5ed7001f363e93fd5294000",
                "patch": "@@ -200,6 +200,7 @@ public XMLConfiguration(HierarchicalConfiguration c)\n     {\n         super(c);\n         clearReferences(getRootNode());\n+        setRootElementName(getRootNode().getName());\n     }\n \n     /**\n@@ -1266,8 +1267,10 @@ static void updateAttribute(Node node, String name, char listDelimiter)\n          */\n         private Element getElement(Node node)\n         {\n-            // special treatement for root node of the hierarchy\n-            return (node.getName() != null) ? (Element) node.getReference() : document.getDocumentElement();\n+            // special treatment for root node of the hierarchy\n+            return (node.getName() != null && node.getReference() != null) ? (Element) node\n+                    .getReference()\n+                    : document.getDocumentElement();\n         }\n     }\n ",
                "deletions": 2
            },
            {
                "sha": "ac379d31c7d6b7c2dcce37c83384b2e5f2401606",
                "filename": "src/test/org/apache/commons/configuration/TestXMLConfiguration.java",
                "blob_url": "https://github.com/apache/commons-configuration/blob/cfd2560843033325d5ed7001f363e93fd5294000/src/test/org/apache/commons/configuration/TestXMLConfiguration.java",
                "raw_url": "https://github.com/apache/commons-configuration/raw/cfd2560843033325d5ed7001f363e93fd5294000/src/test/org/apache/commons/configuration/TestXMLConfiguration.java",
                "status": "modified",
                "changes": 17,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/test/org/apache/commons/configuration/TestXMLConfiguration.java?ref=cfd2560843033325d5ed7001f363e93fd5294000",
                "patch": "@@ -1278,6 +1278,23 @@ public void testRegisterEntityIdNull() throws IOException\n         }\n     }\n \n+    /**\n+     * Tests saving a configuration that was created from a hierarchical\n+     * configuration. This test exposes bug CONFIGURATION-301.\n+     */\n+    public void testSaveAfterCreateWithCopyConstructor()\n+            throws ConfigurationException\n+    {\n+        HierarchicalConfiguration hc = conf.configurationAt(\"element2\");\n+        conf = new XMLConfiguration(hc);\n+        conf.save(testSaveConf);\n+        XMLConfiguration checkConfig = new XMLConfiguration();\n+        checkConfig.setFile(testSaveConf);\n+        checkSavedConfig(checkConfig);\n+        assertEquals(\"Wrong name of root element\", \"element2\", checkConfig\n+                .getRootElementName());\n+    }\n+\n     /**\n      * Prepares a configuration object for testing a reload operation.\n      *",
                "deletions": 0
            },
            {
                "sha": "a4616673ec529ae41c6acadd2ab846abdbeca978",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/commons-configuration/blob/cfd2560843033325d5ed7001f363e93fd5294000/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/commons-configuration/raw/cfd2560843033325d5ed7001f363e93fd5294000/xdocs/changes.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/xdocs/changes.xml?ref=cfd2560843033325d5ed7001f363e93fd5294000",
                "patch": "@@ -23,6 +23,11 @@\n \n   <body>\n     <release version=\"1.6\" date=\"in SVN\" description=\"\">\n+      <action dev=\"oheger\" type=\"fix\" issue=\"CONFIGURATION-301\">\n+        Fixed a NullPointerException that could be thrown under certain\n+        circumstances when saving an XMLConfiguration that was created using\n+        the constructor that takes a HierarchicalConfiguration.\n+      </action>\n     </release>\n \n     <release version=\"1.5\" date=\"2007-11-24\" description=\"Many smaller bugfixes\">",
                "deletions": 0
            }
        ],
        "patched_files": [
            "XMLConfiguration.java"
        ],
        "unit_tests": [
            "TestXMLConfiguration.java"
        ]
    },
    "commons-configuration_514cdf8": {
        "repo": "commons-configuration",
        "message": "Fixed a potential NPE in DefaultReloadingDetectorFactory.\n\nThe refreshDelay property of the parameters object can now be null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@1463687 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-configuration/commit/514cdf8f1ae0ebff29e600e4888928bb28b18345",
        "parent": "https://github.com/apache/commons-configuration/commit/369a9ebc8de0d3324485c95576d8c984078109e0",
        "bug_id": "commons-configuration_514cdf8",
        "file": [
            {
                "sha": "1b2a35fbcc061c031168b4c9f91ad52a0ec07622",
                "filename": "src/main/java/org/apache/commons/configuration/builder/DefaultReloadingDetectorFactory.java",
                "blob_url": "https://github.com/apache/commons-configuration/blob/514cdf8f1ae0ebff29e600e4888928bb28b18345/src/main/java/org/apache/commons/configuration/builder/DefaultReloadingDetectorFactory.java",
                "raw_url": "https://github.com/apache/commons-configuration/raw/514cdf8f1ae0ebff29e600e4888928bb28b18345/src/main/java/org/apache/commons/configuration/builder/DefaultReloadingDetectorFactory.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/main/java/org/apache/commons/configuration/builder/DefaultReloadingDetectorFactory.java?ref=514cdf8f1ae0ebff29e600e4888928bb28b18345",
                "patch": "@@ -40,7 +40,9 @@ public ReloadingDetector createReloadingDetector(FileHandler handler,\n             FileBasedBuilderParametersImpl params)\n             throws ConfigurationException\n     {\n-        return new FileHandlerReloadingDetector(handler,\n-                params.getReloadingRefreshDelay());\n+        Long refreshDelay = params.getReloadingRefreshDelay();\n+        return (refreshDelay != null) ? new FileHandlerReloadingDetector(\n+                handler, refreshDelay) : new FileHandlerReloadingDetector(\n+                handler);\n     }\n }",
                "deletions": 2
            },
            {
                "sha": "ec9ce39e3b16b24a8f813443c9252a170ebad96e",
                "filename": "src/test/java/org/apache/commons/configuration/builder/TestDefaultReloadingDetectorFactory.java",
                "blob_url": "https://github.com/apache/commons-configuration/blob/514cdf8f1ae0ebff29e600e4888928bb28b18345/src/test/java/org/apache/commons/configuration/builder/TestDefaultReloadingDetectorFactory.java",
                "raw_url": "https://github.com/apache/commons-configuration/raw/514cdf8f1ae0ebff29e600e4888928bb28b18345/src/test/java/org/apache/commons/configuration/builder/TestDefaultReloadingDetectorFactory.java",
                "status": "modified",
                "changes": 21,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/test/java/org/apache/commons/configuration/builder/TestDefaultReloadingDetectorFactory.java?ref=514cdf8f1ae0ebff29e600e4888928bb28b18345",
                "patch": "@@ -18,6 +18,7 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n \n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.commons.configuration.io.FileHandler;\n@@ -50,13 +51,29 @@ public void testCreateReloadingDetector() throws ConfigurationException\n         FileHandler handler = new FileHandler();\n         FileBasedBuilderParametersImpl params =\n                 new FileBasedBuilderParametersImpl();\n-        final long refreshDelay = 10000L;\n+        final Long refreshDelay = 10000L;\n         params.setReloadingRefreshDelay(refreshDelay);\n         FileHandlerReloadingDetector detector =\n                 (FileHandlerReloadingDetector) factory.createReloadingDetector(\n                         handler, params);\n         assertSame(\"Wrong file handler\", handler, detector.getFileHandler());\n-        assertEquals(\"Wrong refresh delay\", refreshDelay,\n+        assertEquals(\"Wrong refresh delay\", refreshDelay.longValue(),\n                 detector.getRefreshDelay());\n     }\n+\n+    /**\n+     * Tests whether an undefined refresh delay is handled correctly.\n+     */\n+    @Test\n+    public void testCreateReloadingDetectorDefaultRefreshDelay()\n+            throws ConfigurationException\n+    {\n+        FileHandler handler = new FileHandler();\n+        FileBasedBuilderParametersImpl params =\n+                new FileBasedBuilderParametersImpl();\n+        FileHandlerReloadingDetector detector =\n+                (FileHandlerReloadingDetector) factory.createReloadingDetector(\n+                        handler, params);\n+        assertTrue(\"No default refresh delay\", detector.getRefreshDelay() != 0);\n+    }\n }",
                "deletions": 2
            }
        ],
        "patched_files": [
            "DefaultReloadingDetectorFactory.java"
        ],
        "unit_tests": [
            "TestDefaultReloadingDetectorFactory.java"
        ]
    },
    "commons-configuration_4930140": {
        "repo": "commons-configuration",
        "message": "[CONFIGURATION-671] Fixed handling of empty sections in INIConfiguration.\n\nSaving of an INIConfiguration with an empty section caused a NPE. The\ncause was that nodes without children were not detected as section\nnodes. Now a different criterion is used.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@1806819 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-configuration/commit/4930140ec6fdceb7e15d31afa45243dee7d1e217",
        "parent": "https://github.com/apache/commons-configuration/commit/e9dcc716af5014485846d28e174164c2a3720c15",
        "bug_id": "commons-configuration_4930140",
        "file": [
            {
                "sha": "c9f516ab96610c24cf9ea3e15590c98880472cb1",
                "filename": "src/main/java/org/apache/commons/configuration2/INIConfiguration.java",
                "blob_url": "https://github.com/apache/commons-configuration/blob/4930140ec6fdceb7e15d31afa45243dee7d1e217/src/main/java/org/apache/commons/configuration2/INIConfiguration.java",
                "raw_url": "https://github.com/apache/commons-configuration/raw/4930140ec6fdceb7e15d31afa45243dee7d1e217/src/main/java/org/apache/commons/configuration2/INIConfiguration.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/main/java/org/apache/commons/configuration2/INIConfiguration.java?ref=4930140ec6fdceb7e15d31afa45243dee7d1e217",
                "patch": "@@ -212,6 +212,10 @@\n  * <a href=\"http://commons.apache.org/proper/commons-configuration/userguide/howto_basicfeatures.html\">\n  * Basic features and AbstractConfiguration</a> of the user's guide.\n  * </p>\n+ * <p>\n+ * Note that this configuration does not support properties with null values.\n+ * Such properties are considered to be section nodes.\n+ * </p>\n  *\n  * @author <a\n  *         href=\"http://commons.apache.org/configuration/team-list.html\">Commons\n@@ -942,7 +946,7 @@ private SubnodeConfiguration getGlobalSection()\n      */\n     private static boolean isSectionNode(ImmutableNode node)\n     {\n-        return !node.getChildren().isEmpty();\n+        return node.getValue() == null;\n     }\n \n     /**",
                "deletions": 1
            },
            {
                "sha": "30b8722610f11fd041252ceeadf01259a7ca0fcb",
                "filename": "src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java",
                "blob_url": "https://github.com/apache/commons-configuration/blob/4930140ec6fdceb7e15d31afa45243dee7d1e217/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java",
                "raw_url": "https://github.com/apache/commons-configuration/raw/4930140ec6fdceb7e15d31afa45243dee7d1e217/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java",
                "status": "modified",
                "changes": 21,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java?ref=4930140ec6fdceb7e15d31afa45243dee7d1e217",
                "patch": "@@ -1223,6 +1223,27 @@ public void testExpressionEngineIgnoringCase()\n                 config.getString(\"SECTION1.VAR1\"));\n     }\n \n+    /**\n+     * Tests whether an empty section can be saved. This is related to\n+     * CONFIGURATION-671.\n+     */\n+    @Test\n+    public void testWriteEmptySection()\n+            throws ConfigurationException, IOException\n+    {\n+        final String section = \"[EmptySection]\";\n+        INIConfiguration config = setUpConfig(section);\n+        assertEquals(\"Wrong number of sections\", 1,\n+                config.getSections().size());\n+        assertTrue(\"Section not found\",\n+                config.getSections().contains(\"EmptySection\"));\n+\n+        StringWriter writer = new StringWriter();\n+        config.write(writer);\n+        assertEquals(\"Wrong saved configuration\",\n+                section + LINE_SEPARATOR + LINE_SEPARATOR, writer.toString());\n+    }\n+\n     /**\n      * A thread class for testing concurrent access to the global section.\n      */",
                "deletions": 0
            }
        ],
        "patched_files": [
            "INIConfiguration.java"
        ],
        "unit_tests": [
            "TestINIConfiguration.java"
        ]
    },
    "commons-configuration_746821e": {
        "repo": "commons-configuration",
        "message": "[CONFIGURATION-767] NullPointerException in\nXMLConfiguration#createTransformer() when no FileLocator is set.",
        "commit": "https://github.com/apache/commons-configuration/commit/746821e2568246d8d7b09403f68930ab000a9592",
        "parent": "https://github.com/apache/commons-configuration/commit/a76a3a65c4d2e3530c69c1fecc6e4fe6f2f221ed",
        "bug_id": "commons-configuration_746821e",
        "file": [
            {
                "sha": "ad5d6da91862deba0b1ee8077cfe4a63adb2a88c",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-configuration/blob/746821e2568246d8d7b09403f68930ab000a9592/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-configuration/raw/746821e2568246d8d7b09403f68930ab000a9592/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/changes/changes.xml?ref=746821e2568246d8d7b09403f68930ab000a9592",
                "patch": "@@ -41,6 +41,9 @@\n       <action dev=\"ggregory\" type=\"add\" issue=\"CONFIGURATION-765\" due-to=\"Gary Gregory\">\r\n         Refactor XMLConfiguration.write(Writer) to add XMLConfiguration.write(Writer, Transformer).\r\n       </action>\r\n+      <action dev=\"ggregory\" type=\"fix\" issue=\"CONFIGURATION-767\" due-to=\"Gary Gregory\">\r\n+        NullPointerException in XMLConfiguration#createTransformer() when no FileLocator is set.\r\n+      </action>\r\n     </release>\r\n     <release version=\"2.6\" date=\"2019-09-13\"\r\n              description=\"Minor release with new features and updated dependencies.\">\r",
                "deletions": 0
            },
            {
                "sha": "469b22690327aaa9f81dcc669b4dafb2634364f8",
                "filename": "src/main/java/org/apache/commons/configuration2/XMLConfiguration.java",
                "blob_url": "https://github.com/apache/commons-configuration/blob/746821e2568246d8d7b09403f68930ab000a9592/src/main/java/org/apache/commons/configuration2/XMLConfiguration.java",
                "raw_url": "https://github.com/apache/commons-configuration/raw/746821e2568246d8d7b09403f68930ab000a9592/src/main/java/org/apache/commons/configuration2/XMLConfiguration.java",
                "status": "modified",
                "changes": 8,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/main/java/org/apache/commons/configuration2/XMLConfiguration.java?ref=746821e2568246d8d7b09403f68930ab000a9592",
                "patch": "@@ -881,19 +881,17 @@ protected Transformer createTransformer() throws ConfigurationException\n         final Transformer transformer = XMLDocumentHelper.createTransformer();\n \n         transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n-        if (locator.getEncoding() != null)\n+        if (locator != null && locator.getEncoding() != null)\n         {\n             transformer.setOutputProperty(OutputKeys.ENCODING, locator.getEncoding());\n         }\n         if (publicID != null)\n         {\n-            transformer.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC,\n-                    publicID);\n+            transformer.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC, publicID);\n         }\n         if (systemID != null)\n         {\n-            transformer.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM,\n-                    systemID);\n+            transformer.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM, systemID);\n         }\n \n         return transformer;",
                "deletions": 5
            },
            {
                "sha": "840bc964ac0aefd298ca47b88400305b5d309125",
                "filename": "src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java",
                "blob_url": "https://github.com/apache/commons-configuration/blob/746821e2568246d8d7b09403f68930ab000a9592/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java",
                "raw_url": "https://github.com/apache/commons-configuration/raw/746821e2568246d8d7b09403f68930ab000a9592/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java",
                "status": "modified",
                "changes": 33,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java?ref=746821e2568246d8d7b09403f68930ab000a9592",
                "patch": "@@ -26,21 +26,23 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n-import javax.xml.parsers.DocumentBuilder;\n-import javax.xml.parsers.DocumentBuilderFactory;\n-import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.transform.TransformerFactoryConfigurationError;\n import java.io.ByteArrayInputStream;\n import java.io.File;\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.StringReader;\n import java.io.StringWriter;\n+import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n \n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.TransformerFactoryConfigurationError;\n+\n import org.apache.commons.configuration2.SynchronizerTestImpl.Methods;\n import org.apache.commons.configuration2.builder.FileBasedBuilderParametersImpl;\n import org.apache.commons.configuration2.builder.FileBasedConfigurationBuilder;\n@@ -52,10 +54,12 @@\n import org.apache.commons.configuration2.tree.ImmutableNode;\n import org.apache.commons.configuration2.tree.NodeStructureHelper;\n import org.apache.commons.configuration2.tree.xpath.XPathExpressionEngine;\n+import org.junit.Assert;\n import org.junit.Before;\n-import org.junit.Test;\n import org.junit.Rule;\n+import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n+import org.w3c.dom.Document;\n import org.xml.sax.SAXException;\n import org.xml.sax.SAXParseException;\n import org.xml.sax.helpers.DefaultHandler;\n@@ -230,6 +234,11 @@ public void error(final SAXParseException ex) throws SAXException\n         return builder;\n     }\n \n+    private Document parseXml(final String xml) throws SAXException, IOException, ParserConfigurationException {\n+        return DocumentBuilderFactory.newInstance().newDocumentBuilder()\n+                .parse(new ByteArrayInputStream(xml.getBytes(StandardCharsets.UTF_8)));\n+    }\n+\n     /**\n      * Removes the test output file if it exists.\n      */\n@@ -965,13 +974,13 @@ public void testgetProperty() {\n         assertEquals(\"three\", list.get(1));\n     }\n \n+\n     @Test\n     public void testGetProperty()\n     {\n         assertEquals(\"value\", conf.getProperty(\"element\"));\n     }\n \n-\n     @Test\n     public void testGetPropertyWithXMLEntity()\n     {\n@@ -1764,7 +1773,17 @@ public void testValidatingInvalidFile() throws ConfigurationException\n         conf.setValidating(true);\n         load(conf, \"testValidateInvalid.xml\");\n     }\n-\n+    \n+    @Test\n+    public void testWrite() throws Exception\n+    {\n+        XMLConfiguration xmlConfig = new XMLConfiguration();\n+        xmlConfig.setRootElementName(\"IAmRoot\");\n+        StringWriter sw = new StringWriter();\n+        xmlConfig.write(sw);\n+        // Check that we can parse the XML.\n+        Assert.assertNotNull(parseXml(sw.toString()));\n+    }\n     /**\n      * Tests accessing properties when the XPATH expression engine is set.\n      */",
                "deletions": 7
            }
        ],
        "patched_files": [
            "XMLConfiguration.java"
        ],
        "unit_tests": [
            "TestXMLConfiguration.java"
        ]
    }
}