{
    "tomcat_3d73dfc": {
        "bug_id": "tomcat_3d73dfc",
        "commit": "https://github.com/apache/tomcat/commit/3d73dfc42e13a5d0eeb4c0e50009cdb67e1ab7dd",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/3d73dfc42e13a5d0eeb4c0e50009cdb67e1ab7dd/java/org/apache/coyote/http11/Http11Processor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11Processor.java?ref=3d73dfc42e13a5d0eeb4c0e50009cdb67e1ab7dd",
                "deletions": 1,
                "filename": "java/org/apache/coyote/http11/Http11Processor.java",
                "patch": "@@ -995,7 +995,10 @@ private static boolean isConnectionToken(MimeHeaders headers, String token) thro\n         Enumeration<String> values = headers.values(Constants.CONNECTION);\n         Set<String> result = new HashSet<>();\n         while (values.hasMoreElements()) {\n-            TokenList.parseTokenList(new StringReader(values.nextElement()), result);\n+            String nextHeaderValue = values.nextElement();\n+            if (nextHeaderValue != null) {\n+                TokenList.parseTokenList(new StringReader(nextHeaderValue), result);\n+            }\n         }\n \n         return result.contains(token);",
                "raw_url": "https://github.com/apache/tomcat/raw/3d73dfc42e13a5d0eeb4c0e50009cdb67e1ab7dd/java/org/apache/coyote/http11/Http11Processor.java",
                "sha": "24fd9e97e88a133936f3493d4800b2f6bcd59baa",
                "status": "modified"
            }
        ],
        "message": "Fix possible NPE with excessive header size",
        "parent": "https://github.com/apache/tomcat/commit/c298138dc774ec1844c929413f11e08855e17c87",
        "repo": "tomcat",
        "unit_tests": [
            "TestHttp11Processor.java"
        ]
    },
    "tomcat_ae08feb": {
        "bug_id": "tomcat_ae08feb",
        "commit": "https://github.com/apache/tomcat/commit/ae08febd4d053d38df876b039d4b632a79465510",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/ae08febd4d053d38df876b039d4b632a79465510/java/javax/el/StaticFieldELResolver.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/javax/el/StaticFieldELResolver.java?ref=ae08febd4d053d38df876b039d4b632a79465510",
                "deletions": 4,
                "filename": "java/javax/el/StaticFieldELResolver.java",
                "patch": "@@ -113,11 +113,13 @@ public Object invoke(ELContext context, Object base, Object method,\n                 return result;\n \n             } else {\n-                Method match =\n-                        Util.findMethod(clazz, base, methodName, paramTypes, params);\n+                // Static method so base should be null\n+                Method match = Util.findMethod(clazz, null, methodName, paramTypes, params);\n \n-                int modifiers = match.getModifiers();\n-                if (!Modifier.isStatic(modifiers)) {\n+                // Note: On Java 9 and above, the isStatic check becomes\n+                // unnecessary because the canAccess() call in Util.findMethod()\n+                // effectively performs the same check\n+                if (match == null || !Modifier.isStatic(match.getModifiers())) {\n                     throw new MethodNotFoundException(Util.message(context,\n                             \"staticFieldELResolver.methodNotFound\", methodName,\n                             clazz.getName()));",
                "raw_url": "https://github.com/apache/tomcat/raw/ae08febd4d053d38df876b039d4b632a79465510/java/javax/el/StaticFieldELResolver.java",
                "sha": "d6a902770e139489b401abaf65096b5946684978",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/ae08febd4d053d38df876b039d4b632a79465510/java/javax/el/Util.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/javax/el/Util.java?ref=ae08febd4d053d38df876b039d4b632a79465510",
                "deletions": 1,
                "filename": "java/javax/el/Util.java",
                "patch": "@@ -541,7 +541,11 @@ private static boolean isCoercibleFrom(Object src, Class<?> target) {\n      */\n     static Method getMethod(Class<?> type, Object base, Method m) {\n         JreCompat jreCompat = JreCompat.getInstance();\n-        if (m == null || (Modifier.isPublic(type.getModifiers()) && jreCompat.canAcccess(base, m))) {\n+        // If base is null, method MUST be static\n+        // If base is non-null, method may be static or non-static\n+        if (m == null ||\n+                (Modifier.isPublic(type.getModifiers()) &&\n+                        (jreCompat.canAcccess(base, m) || base != null && jreCompat.canAcccess(null, m)))) {\n             return m;\n         }\n         Class<?>[] inf = type.getInterfaces();",
                "raw_url": "https://github.com/apache/tomcat/raw/ae08febd4d053d38df876b039d4b632a79465510/java/javax/el/Util.java",
                "sha": "2e06837233b0efd09bb25f33cccc769e96df6092",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/ae08febd4d053d38df876b039d4b632a79465510/java/org/apache/el/util/ReflectionUtil.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/el/util/ReflectionUtil.java?ref=ae08febd4d053d38df876b039d4b632a79465510",
                "deletions": 1,
                "filename": "java/org/apache/el/util/ReflectionUtil.java",
                "patch": "@@ -424,7 +424,11 @@ private static boolean isCoercibleFrom(EvaluationContext ctx, Object src, Class<\n      */\n     private static Method getMethod(Class<?> type, Object base, Method m) {\n         JreCompat jreCompat = JreCompat.getInstance();\n-        if (m == null || (Modifier.isPublic(type.getModifiers()) && jreCompat.canAcccess(base, m))) {\n+        // If base is null, method MUST be static\n+        // If base is non-null, method may be static or non-static\n+        if (m == null ||\n+                (Modifier.isPublic(type.getModifiers()) &&\n+                        (jreCompat.canAcccess(base, m) || base != null && jreCompat.canAcccess(null, m)))) {\n             return m;\n         }\n         Class<?>[] inf = type.getInterfaces();",
                "raw_url": "https://github.com/apache/tomcat/raw/ae08febd4d053d38df876b039d4b632a79465510/java/org/apache/el/util/ReflectionUtil.java",
                "sha": "c9f1f2e285eef363bbd159f4513f3bb809e4a767",
                "status": "modified"
            }
        ],
        "message": "Fix NPEs when looking for static methods",
        "parent": "https://github.com/apache/tomcat/commit/2fb245b844fc9fefaa5e0c8002a481a72c502963",
        "repo": "tomcat",
        "unit_tests": [
            "TestReflectionUtil.java"
        ]
    }
}