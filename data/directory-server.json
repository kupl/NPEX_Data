{
    "directory-server_1f40e0d": {
        "bug_id": "directory-server_1f40e0d",
        "commit": "https://github.com/apache/directory-server/commit/1f40e0de2356e937c20b5e3b5dba19b6595fe3d7",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/directory-server/blob/1f40e0de2356e937c20b5e3b5dba19b6595fe3d7/service-builder/src/main/java/org/apache/directory/server/config/ServiceBuilder.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/service-builder/src/main/java/org/apache/directory/server/config/ServiceBuilder.java?ref=1f40e0de2356e937c20b5e3b5dba19b6595fe3d7",
                "deletions": 0,
                "filename": "service-builder/src/main/java/org/apache/directory/server/config/ServiceBuilder.java",
                "patch": "@@ -74,6 +74,7 @@\n import org.apache.directory.server.core.partition.Partition;\n import org.apache.directory.server.core.partition.impl.btree.jdbm.JdbmIndex;\n import org.apache.directory.server.core.partition.impl.btree.jdbm.JdbmPartition;\n+import org.apache.directory.server.core.schema.SchemaPartition;\n import org.apache.directory.server.integration.http.HttpServer;\n import org.apache.directory.server.integration.http.WebApp;\n import org.apache.directory.server.kerberos.kdc.KdcServer;\n@@ -1259,6 +1260,10 @@ public static DirectoryService createDirectoryService( DirectoryServiceBean dire\n         // The schemaManager\n         directoryService.setSchemaManager( schemaManager );\n \n+        // The schema partition\n+        SchemaPartition schemaPartition = new SchemaPartition( schemaManager );\n+        directoryService.setSchemaPartition( schemaPartition );\n+\n         // MUST attributes\n         // DirectoryService ID\n         directoryService.setInstanceId( directoryServiceBean.getDirectoryServiceId() );",
                "raw_url": "https://github.com/apache/directory-server/raw/1f40e0de2356e937c20b5e3b5dba19b6595fe3d7/service-builder/src/main/java/org/apache/directory/server/config/ServiceBuilder.java",
                "sha": "6751cda5f6990e98fd731a278c90a1a18ae6ab3e",
                "status": "modified"
            }
        ],
        "message": "Fix NPE when starting up the ApacheDsService\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@1150216 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/6e17e2b9426c76ae8eb3b3287c6aab090a73d660",
        "repo": "directory-server",
        "unit_tests": [
            "ServiceBuilderTest.java"
        ]
    },
    "directory-server_35eba60": {
        "bug_id": "directory-server_35eba60",
        "commit": "https://github.com/apache/directory-server/commit/35eba60a9c2d4895584b825fccab5a745c4a9198",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/directory-server/blob/35eba60a9c2d4895584b825fccab5a745c4a9198/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmIndex.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmIndex.java?ref=35eba60a9c2d4895584b825fccab5a745c4a9198",
                "deletions": 9,
                "filename": "jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmIndex.java",
                "patch": "@@ -31,7 +31,10 @@\n import org.apache.directory.server.xdbm.Tuple;\n import org.apache.directory.server.xdbm.IndexCursor;\n import org.apache.directory.shared.ldap.schema.AttributeType;\n+import org.apache.directory.shared.ldap.schema.MatchingRule;\n import org.apache.directory.shared.ldap.util.SynchronizedLRUMap;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import javax.naming.NamingException;\n import java.io.File;\n@@ -48,53 +51,66 @@\n  */\n public class JdbmIndex<K,O> implements Index<K,O>\n {\n+    /** A logger for this class */\n+    private static final Logger LOG = LoggerFactory.getLogger( JdbmIndex.class.getSimpleName() );\n+\n     /**\n      * default duplicate limit before duplicate keys switch to using a btree for values\n      */\n     public static final int DEFAULT_DUPLICATE_LIMIT = 512;\n \n     /**  the key used for the forward btree name */\n     public static final String FORWARD_BTREE = \"_forward\";\n+    \n     /**  the key used for the reverse btree name */\n     public static final String REVERSE_BTREE = \"_reverse\";\n \n     /** the attribute type resolved for this JdbmIndex */\n     private AttributeType attribute;\n+\n     /**\n      * the forward btree where the btree key is the value of the indexed attribute and\n      * the value of the btree is the entry id of the entry containing an attribute with\n      * that value\n      */\n     protected JdbmTable<K, Long> forward;\n+    \n     /**\n      * the reverse btree where the btree key is the entry id of the entry containing a\n      * value for the indexed attribute, and the btree value is the value of the indexed\n      * attribute\n      */\n     protected JdbmTable<Long,K> reverse;\n+    \n     /**\n      * the JDBM record manager for the file containing this index\n      */\n     protected RecordManager recMan;\n+    \n     /**\n      * the normalized value cache for this index\n      * @todo I don't think the keyCache is required anymore since the normalizer\n      * will cache values for us.\n      */\n     protected SynchronizedLRUMap keyCache;\n+    \n     /** the size (number of index entries) for the cache */\n     protected int cacheSize = DEFAULT_INDEX_CACHE_SIZE;\n+    \n     /**\n      * duplicate limit before duplicate keys switch to using a btree for values\n      */\n     protected int numDupLimit = DEFAULT_DUPLICATE_LIMIT;\n+    \n     /**\n      * the attribute identifier set at configuration time for this index which may not\n      * be the OID but an alias name for the attributeType associated with this Index\n      */\n     private String attributeId;\n+    \n     /** whether or not this index has been initialized */\n     protected boolean initialized;\n+    \n     /** a customm working directory path when specified in configuration */\n     protected File wkDirPath;\n \n@@ -136,8 +152,10 @@ public JdbmIndex( String attributeId )\n \n     public void init( AttributeType attributeType, File wkDirPath ) throws IOException\n     {\n-        this.keyCache = new SynchronizedLRUMap( cacheSize );\n-        this.attribute = attributeType;\n+        LOG.debug( \"Initializing an Index for attribute '{}'\", attributeType.getName() );\n+        \n+        keyCache = new SynchronizedLRUMap( cacheSize );\n+        attribute = attributeType;\n \n         if ( attributeId == null )\n         {\n@@ -182,7 +200,9 @@ private void initTables() throws IOException\n \n         try\n         {\n-            comp = new SerializableComparator<K>( attribute.getEquality().getOid() );\n+            MatchingRule mr = attribute.getEquality();\n+            \n+            comp = new SerializableComparator<K>( mr.getOid() );\n         }\n         catch ( NamingException e )\n         {\n@@ -469,8 +489,6 @@ public void drop( Long id ) throws Exception\n     // ------------------------------------------------------------------------\n     // Index Cursor Operations\n     // ------------------------------------------------------------------------\n-\n-\n     @SuppressWarnings(\"unchecked\")\n     public IndexCursor<K, O> reverseCursor() throws Exception\n     {\n@@ -514,8 +532,6 @@ public void drop( Long id ) throws Exception\n     // ------------------------------------------------------------------------\n     // Value Assertion (a.k.a Index Lookup) Methods //\n     // ------------------------------------------------------------------------\n-\n-    \n     /**\n      * @see Index#forward(Object)\n      */\n@@ -626,8 +642,6 @@ public boolean reverseLessOrEq( Long id, K attrVal ) throws Exception\n     // ------------------------------------------------------------------------\n     // Maintenance Methods \n     // ------------------------------------------------------------------------\n-\n-\n     /**\n      * @see org.apache.directory.server.xdbm.Index#close()\n      */",
                "raw_url": "https://github.com/apache/directory-server/raw/35eba60a9c2d4895584b825fccab5a745c4a9198/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmIndex.java",
                "sha": "deab7d701c881456fe68c89f45dac32d50cfd3b3",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/directory-server/blob/35eba60a9c2d4895584b825fccab5a745c4a9198/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmStore.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmStore.java?ref=35eba60a9c2d4895584b825fccab5a745c4a9198",
                "deletions": 2,
                "filename": "jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmStore.java",
                "patch": "@@ -64,6 +64,7 @@\n import org.apache.directory.shared.ldap.name.LdapDN;\n import org.apache.directory.shared.ldap.name.Rdn;\n import org.apache.directory.shared.ldap.schema.AttributeType;\n+import org.apache.directory.shared.ldap.schema.MatchingRule;\n import org.apache.directory.shared.ldap.util.NamespaceTools;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -372,9 +373,23 @@ private void setupUserIndices() throws Exception\n             for ( Index<?,E> index : userIndices.values() )\n             {\n                 String oid = oidRegistry.getOid( index.getAttributeId() );\n-                tmp.put( oid, index );\n-                ( ( JdbmIndex ) index ).init( attributeTypeRegistry.lookup( oid ), workingDirectory );\n+                AttributeType attributeType = attributeTypeRegistry.lookup( oid );\n+                \n+                // Check that the attributeType has an EQUALITY matchingRule\n+                MatchingRule mr = attributeType.getEquality();\n+                \n+                if ( mr != null )\n+                {\n+                    ( ( JdbmIndex ) index ).init( attributeTypeRegistry.lookup( oid ), workingDirectory );\n+                    tmp.put( oid, index );\n+                }\n+                else\n+                {\n+                    LOG.error( \"Cannot build an index for attribute '{}', no EQUALITY MatchingRule defined\",\n+                        attributeType.getName() );\n+                }\n             }\n+            \n             userIndices = tmp;\n         }\n         else",
                "raw_url": "https://github.com/apache/directory-server/raw/35eba60a9c2d4895584b825fccab5a745c4a9198/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmStore.java",
                "sha": "a1001c2ccf53a6b879de7a2e7aaa04336048e3b9",
                "status": "modified"
            }
        ],
        "message": "Fix a NPE when we try to create an index on an attributeType which has no EQUALITY matching rule\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@751899 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/cc4e1268083a3ecd8f604f8cc29df55281aa1aba",
        "repo": "directory-server",
        "unit_tests": [
            "JdbmStoreTest.java"
        ]
    },
    "directory-server_3ecd4e9": {
        "bug_id": "directory-server_3ecd4e9",
        "commit": "https://github.com/apache/directory-server/commit/3ecd4e9cd91dbd1ece86bdd2006edcbf3edcc9f2",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/directory-server/blob/3ecd4e9cd91dbd1ece86bdd2006edcbf3edcc9f2/service-builder/src/main/java/org/apache/directory/server/config/ServiceBuilder.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/service-builder/src/main/java/org/apache/directory/server/config/ServiceBuilder.java?ref=3ecd4e9cd91dbd1ece86bdd2006edcbf3edcc9f2",
                "deletions": 4,
                "filename": "service-builder/src/main/java/org/apache/directory/server/config/ServiceBuilder.java",
                "patch": "@@ -533,18 +533,17 @@ else if ( transportBean instanceof UdpTransportBean )\n      */\n     public static Transport[] createTransports( TransportBean[] transportBeans )\n     {\n-        Transport[] transports = new Transport[ transportBeans.length ];\n-        int i = 0;\n+        List<Transport> transports = new ArrayList<Transport>();\n         \n         for ( TransportBean transportBean : transportBeans )\n         {\n             if ( transportBean.isEnabled() )\n             {\n-                transports[i++] = createTransport( transportBean );\n+                transports.add( createTransport( transportBean ) );\n             }\n         }\n         \n-        return transports;\n+        return transports.toArray( new Transport[transports.size()] );\n     }\n     /**\n      * Helper method to create an Array of EncryptionTypes from an array of Strings",
                "raw_url": "https://github.com/apache/directory-server/raw/3ecd4e9cd91dbd1ece86bdd2006edcbf3edcc9f2/service-builder/src/main/java/org/apache/directory/server/config/ServiceBuilder.java",
                "sha": "946f18f95c8a0aba19e617d984b037b9e0803d7c",
                "status": "modified"
            }
        ],
        "message": "Fix NPE: if one transport is disabled the Transport array contains a null element.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@1150229 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/1f40e0de2356e937c20b5e3b5dba19b6595fe3d7",
        "repo": "directory-server",
        "unit_tests": [
            "ServiceBuilderTest.java"
        ]
    },
    "directory-server_471f1b0": {
        "bug_id": "directory-server_471f1b0",
        "commit": "https://github.com/apache/directory-server/commit/471f1b02146ef9cff141703b2f7f0160d7d11555",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/directory-server/blob/471f1b02146ef9cff141703b2f7f0160d7d11555/jdbm-partition/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmStore.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/jdbm-partition/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmStore.java?ref=471f1b02146ef9cff141703b2f7f0160d7d11555",
                "deletions": 1,
                "filename": "jdbm-partition/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmStore.java",
                "patch": "@@ -302,7 +302,11 @@ public synchronized void sync() throws Exception\n         else if ( index instanceof JdbmIndex<?, ?> )\n         {\n             jdbmIndex = ( JdbmIndex<?, E> ) index;\n-            jdbmIndex.setWkDirPath( partitionDir );\n+            \n+            if ( jdbmIndex.getWkDirPath() == null )\n+            {\n+                jdbmIndex.setWkDirPath( partitionDir );\n+            }\n         }\n         else\n         {",
                "raw_url": "https://github.com/apache/directory-server/raw/471f1b02146ef9cff141703b2f7f0160d7d11555/jdbm-partition/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmStore.java",
                "sha": "e514cac5c0d4262703d45d7df491c5a8f13e5478",
                "status": "modified"
            }
        ],
        "message": "Fixed a NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/branches/apacheds-config@1028919 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/168f46bf91677fd58ba78707fe2bdbad711852a6",
        "repo": "directory-server",
        "unit_tests": [
            "JdbmStoreTest.java"
        ]
    },
    "directory-server_6bc7fc3": {
        "bug_id": "directory-server_6bc7fc3",
        "commit": "https://github.com/apache/directory-server/commit/6bc7fc3a60b587521bfebfe6fc4d399a4991ba79",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/6bc7fc3a60b587521bfebfe6fc4d399a4991ba79/core/src/main/java/org/apache/directory/server/core/changelog/MemoryChangeLogStore.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/changelog/MemoryChangeLogStore.java?ref=6bc7fc3a60b587521bfebfe6fc4d399a4991ba79",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/directory/server/core/changelog/MemoryChangeLogStore.java",
                "patch": "@@ -121,10 +121,10 @@ public Tag tag( String description ) throws Exception\n     public void init( DirectoryService service ) throws Exception\n     {\n         workingDirectory = service.getInstanceLayout().getLogDirectory();\n+        this.directoryService = service;\n         loadRevision();\n         loadTags();\n         loadChangeLog();\n-        this.directoryService = service;\n     }\n \n ",
                "raw_url": "https://github.com/apache/directory-server/raw/6bc7fc3a60b587521bfebfe6fc4d399a4991ba79/core/src/main/java/org/apache/directory/server/core/changelog/MemoryChangeLogStore.java",
                "sha": "b787c6388bac61e2eb6cb69d4052e6800d0a413e",
                "status": "modified"
            }
        ],
        "message": "Initilize the DS instance before calling the loadChangeLog method to avoid a NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@1157269 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/fe567d53189df34eb320ebf70835d488cf6f91c6",
        "repo": "directory-server",
        "unit_tests": [
            "MemoryChangeLogStoreTest.java"
        ]
    },
    "directory-server_76545dd": {
        "bug_id": "directory-server_76545dd",
        "commit": "https://github.com/apache/directory-server/commit/76545ddad23e78326a5f64a1f8aec73fdd7f30c4",
        "file": [
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/directory-server/blob/76545ddad23e78326a5f64a1f8aec73fdd7f30c4/service-builder/src/main/java/org/apache/directory/server/config/builder/ServiceBuilder.java",
                "changes": 51,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/service-builder/src/main/java/org/apache/directory/server/config/builder/ServiceBuilder.java?ref=76545ddad23e78326a5f64a1f8aec73fdd7f30c4",
                "deletions": 23,
                "filename": "service-builder/src/main/java/org/apache/directory/server/config/builder/ServiceBuilder.java",
                "patch": "@@ -540,7 +540,10 @@ else if ( transportBean instanceof UdpTransportBean )\n \n         for ( AuthenticatorBean authenticatorBean : list )\n         {\n-            authenticators[i++] = createAuthenticator( authenticatorBean );\n+            if ( authenticatorBean.isEnabled() )\n+            {\n+                authenticators[i++] = createAuthenticator( authenticatorBean );\n+            }\n         }\n \n         return authenticators;\n@@ -584,7 +587,7 @@ else if ( transportBean instanceof UdpTransportBean )\n         for ( String encryptionType : encryptionTypes )\n         {\n             EncryptionType et = EncryptionType.getByName( encryptionType );\n-            if( et == EncryptionType.UNKNOWN )\n+            if ( et == EncryptionType.UNKNOWN )\n             {\n                 LOG.warn( \"Unknown encryption type {}\", encryptionType );\n             }\n@@ -594,7 +597,7 @@ else if ( transportBean instanceof UdpTransportBean )\n             }\n         }\n \n-        return types.toArray(new EncryptionType[0]);\n+        return types.toArray( new EncryptionType[0] );\n     }\n \n \n@@ -662,61 +665,63 @@ public static DhcpServer createDhcpServer( DhcpServerBean dhcpServerBean, Direct\n      * @return Instance of KdcServer\n      * @throws org.apache.directory.api.ldap.model.exception.LdapException\n      */\n-    public static KdcServer createKdcServer( DirectoryServiceBean directoryServiceBean, DirectoryService directoryService ) throws LdapException\n+    public static KdcServer createKdcServer( DirectoryServiceBean directoryServiceBean,\n+        DirectoryService directoryService ) throws LdapException\n     {\n         KdcServerBean kdcServerBean = directoryServiceBean.getKdcServerBean();\n-        \n+\n         // Fist, do nothing if the KdcServer is disabled\n         if ( ( kdcServerBean == null ) || kdcServerBean.isDisabled() )\n         {\n             return null;\n         }\n \n         KerberosConfig kdcConfig = new KerberosConfig();\n-        \n+\n         // AllowableClockSkew\n         kdcConfig.setAllowableClockSkew( kdcServerBean.getKrbAllowableClockSkew() );\n-        \n+\n         // BodyChecksumVerified\n         kdcConfig.setBodyChecksumVerified( kdcServerBean.isKrbBodyChecksumVerified() );\n-        \n+\n         // EmptyAddressesAllowed\n         kdcConfig.setEmptyAddressesAllowed( kdcServerBean.isKrbEmptyAddressesAllowed() );\n-        \n+\n         // EncryptionType\n         EncryptionType[] encryptionTypes = createEncryptionTypes( kdcServerBean.getKrbEncryptionTypes() );\n         kdcConfig.setEncryptionTypes( encryptionTypes );\n-        \n+\n         // ForwardableAllowed\n         kdcConfig.setForwardableAllowed( kdcServerBean.isKrbForwardableAllowed() );\n-        \n+\n         // KdcPrincipal\n-        kdcConfig.setServicePrincipal( \"krbtgt/\" + kdcServerBean.getKrbPrimaryRealm() + \"@\" + kdcServerBean.getKrbPrimaryRealm() );\n-        \n+        kdcConfig.setServicePrincipal( \"krbtgt/\" + kdcServerBean.getKrbPrimaryRealm() + \"@\"\n+            + kdcServerBean.getKrbPrimaryRealm() );\n+\n         // MaximumRenewableLifetime\n         kdcConfig.setMaximumRenewableLifetime( kdcServerBean.getKrbMaximumRenewableLifetime() );\n-        \n+\n         // MaximumTicketLifetime\n         kdcConfig.setMaximumTicketLifetime( kdcServerBean.getKrbMaximumTicketLifetime() );\n-        \n+\n         // PaEncTimestampRequired\n         kdcConfig.setPaEncTimestampRequired( kdcServerBean.isKrbPaEncTimestampRequired() );\n-        \n+\n         // PostdatedAllowed\n         kdcConfig.setPostdatedAllowed( kdcServerBean.isKrbPostdatedAllowed() );\n-        \n+\n         // PrimaryRealm\n         kdcConfig.setPrimaryRealm( kdcServerBean.getKrbPrimaryRealm() );\n-        \n+\n         // ProxiableAllowed\n         kdcConfig.setProxiableAllowed( kdcServerBean.isKrbProxiableAllowed() );\n \n         // RenewableAllowed\n         kdcConfig.setRenewableAllowed( kdcServerBean.isKrbRenewableAllowed() );\n-        \n+\n         // searchBaseDn\n         kdcConfig.setSearchBaseDn( kdcServerBean.getSearchBaseDn().getName() );\n-        \n+\n         KdcServer kdcServer = new KdcServer( kdcConfig );\n \n         kdcServer.setDirectoryService( directoryService );\n@@ -730,18 +735,18 @@ public static KdcServer createKdcServer( DirectoryServiceBean directoryServiceBe\n         kdcServer.setTransports( transports );\n \n         ChangePasswordServerBean changePasswordServerBean = directoryServiceBean.getChangePasswordServerBean();\n-        \n+\n         // Fist, do nothing if the ChangePasswordServer is disabled\n         if ( ( changePasswordServerBean != null ) && !changePasswordServerBean.isDisabled() )\n         {\n             ChangePasswordServer changePasswordServer = new ChangePasswordServer( new ChangePasswordConfig( kdcConfig ) );\n             changePasswordServer.setEnabled( true );\n             changePasswordServer.setDirectoryService( directoryService );\n-            \n+\n             // Transports\n             Transport[] chngPwdTransports = createTransports( changePasswordServerBean.getTransports() );\n             changePasswordServer.setTransports( chngPwdTransports );\n-            \n+\n             kdcServer.setChangePwdServer( changePasswordServer );\n         }\n ",
                "raw_url": "https://github.com/apache/directory-server/raw/76545ddad23e78326a5f64a1f8aec73fdd7f30c4/service-builder/src/main/java/org/apache/directory/server/config/builder/ServiceBuilder.java",
                "sha": "406b143520f8e6337b62e30100aaf0db41532a01",
                "status": "modified"
            }
        ],
        "message": "Don't add the authenticator if it's disabled, otherwise we get a NPE later.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@1446107 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/fc5b1d691b4dc36166eaa2819728dce5a6d4e957",
        "repo": "directory-server",
        "unit_tests": [
            "ServiceBuilderTest.java"
        ]
    },
    "directory-server_7df31ad": {
        "bug_id": "directory-server_7df31ad",
        "commit": "https://github.com/apache/directory-server/commit/7df31adba307611218e0a8cab604f5b68696a4b9",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/directory-server/blob/7df31adba307611218e0a8cab604f5b68696a4b9/core/src/main/java/org/apache/directory/server/core/schema/SchemaService.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/schema/SchemaService.java?ref=7df31adba307611218e0a8cab604f5b68696a4b9",
                "deletions": 2,
                "filename": "core/src/main/java/org/apache/directory/server/core/schema/SchemaService.java",
                "patch": "@@ -128,7 +128,7 @@\n      */\n     private Registries registries;\n \n-    private Set binaries;\n+    private Set<String> binaries;\n \n     /**\n      * subschemaSubentry attribute's value from Root DSE\n@@ -179,7 +179,14 @@ public void init( DirectoryServiceConfiguration factoryCfg, InterceptorConfigura\n         topFilter = new TopFilter();\n         filters.add( binaryAttributeFilter );\n         filters.add( topFilter );\n-        binaries = ( Set ) factoryCfg.getEnvironment().get( BINARY_KEY );\n+        binaries = ( Set<String> ) factoryCfg.getEnvironment().get( BINARY_KEY );\n+        \n+        if ( binaries == null )\n+        {\n+            binaries = new HashSet<String>();\n+        }\n+            \n+            \n \n         schemaBaseDN = new LdapDN( \"ou=schema\" );\n         schemaBaseDN.normalize( registries.getAttributeTypeRegistry().getNormalizerMapping() );\n@@ -1722,6 +1729,7 @@ private void filterBinaryAttributes( Attributes entry ) throws NamingException\n             }\n \n             asBinary = !type.getSyntax().isHumanReadible();\n+            asBinary = asBinary || ( ( binaries != null ) && ( binaries.contains( type ) ) );\n             asBinary = asBinary || binaries.contains( type );\n \n             if ( asBinary )",
                "raw_url": "https://github.com/apache/directory-server/raw/7df31adba307611218e0a8cab604f5b68696a4b9/core/src/main/java/org/apache/directory/server/core/schema/SchemaService.java",
                "sha": "106ed48f204cfd3967a02b596b1436792ce2670c",
                "status": "modified"
            }
        ],
        "message": "Fixed a potential NPE in the code (defensive code added)\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@523661 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/2735bb2dc1da99aa07283fdde71d2cede24708c1",
        "repo": "directory-server",
        "unit_tests": [
            "SchemaServiceTest.java"
        ]
    },
    "directory-server_88befe0": {
        "bug_id": "directory-server_88befe0",
        "commit": "https://github.com/apache/directory-server/commit/88befe07f88af8d2e65c5d7bb887859b6bfe10b2",
        "file": [
            {
                "additions": 163,
                "blob_url": "https://github.com/apache/directory-server/blob/88befe07f88af8d2e65c5d7bb887859b6bfe10b2/core-api/src/main/java/org/apache/directory/server/core/LdapCoreSessionConnection.java",
                "changes": 173,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-api/src/main/java/org/apache/directory/server/core/LdapCoreSessionConnection.java?ref=88befe07f88af8d2e65c5d7bb887859b6bfe10b2",
                "deletions": 10,
                "filename": "core-api/src/main/java/org/apache/directory/server/core/LdapCoreSessionConnection.java",
                "patch": "@@ -93,6 +93,8 @@\n  */\n public class LdapCoreSessionConnection implements LdapConnection\n {\n+    /** The logger for this class */\n+    private static final Logger LOG = LoggerFactory.getLogger( LdapCoreSessionConnection.class );\n \n     /** the CoreSession object */\n     private CoreSession session;\n@@ -103,10 +105,9 @@\n     /** the session's DirectoryService */\n     private DirectoryService directoryService;\n \n+    /** The MessageId counter */\n     private AtomicInteger messageId = new AtomicInteger( 0 );\n \n-    private static final Logger LOG = LoggerFactory.getLogger( LdapCoreSessionConnection.class );\n-\n \n     public LdapCoreSessionConnection()\n     {\n@@ -161,6 +162,20 @@ public boolean connect() throws LdapException, IOException\n      */\n     public AddResponse add( AddRequest addRequest ) throws LdapException\n     {\n+        if ( addRequest == null )\n+        {\n+            String msg = \"Cannot process a null addRequest\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n+        if ( addRequest.getEntry() == null )\n+        {\n+            String msg = \"Cannot add a null entry\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         int newId = messageId.incrementAndGet();\n \n         addRequest.setMessageId( newId );\n@@ -190,6 +205,13 @@ public AddResponse add( AddRequest addRequest ) throws LdapException\n      */\n     public AddResponse add( Entry entry ) throws LdapException\n     {\n+        if ( entry == null )\n+        {\n+            String msg = \"Cannot add an empty entry\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         AddRequest addRequest = new AddRequestImpl();\n         addRequest.setEntry( entry );\n \n@@ -202,6 +224,13 @@ public AddResponse add( Entry entry ) throws LdapException\n      */\n     public CompareResponse compare( CompareRequest compareRequest ) throws LdapException\n     {\n+        if ( compareRequest == null )\n+        {\n+            String msg = \"Cannot process a null compareRequest\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         int newId = messageId.incrementAndGet();\n \n         CompareResponse resp = new CompareResponseImpl( newId );\n@@ -302,6 +331,13 @@ public CompareResponse compare( String dn, String attributeName, Value<?> value\n      */\n     public DeleteResponse delete( DeleteRequest deleteRequest ) throws LdapException\n     {\n+        if ( deleteRequest == null )\n+        {\n+            String msg = \"Cannot process a null deleteRequest\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         int newId = messageId.incrementAndGet();\n \n         DeleteResponse resp = new DeleteResponseImpl( newId );\n@@ -349,7 +385,7 @@ public DeleteResponse delete( String dn ) throws LdapException\n     /**\n      * {@inheritDoc}\n      */\n-    public boolean doesFutureExistFor( Integer messageId )\n+    public boolean doesFutureExistFor( int messageId )\n     {\n         return false;\n     }\n@@ -480,6 +516,19 @@ public Entry lookup( String dn ) throws LdapException\n      */\n     public ModifyResponse modify( DN dn, Modification... modifications ) throws LdapException\n     {\n+        if ( dn == null )\n+        {\n+            LOG.debug( \"received a null dn for modification\" );\n+            throw new IllegalArgumentException( \"The DN to be modified cannot be null\" );\n+        }\n+\n+        if ( ( modifications == null ) || ( modifications.length == 0 ) )\n+        {\n+            String msg = \"Cannot process a ModifyRequest without any modification\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         int newId = messageId.incrementAndGet();\n \n         ModifyResponse resp = new ModifyResponseImpl( newId );\n@@ -525,6 +574,12 @@ public ModifyResponse modify( String dn, Modification... modifications ) throws\n      */\n     public ModifyResponse modify( Entry entry, ModificationOperation modOp ) throws LdapException\n     {\n+        if ( entry == null )\n+        {\n+            LOG.debug( \"received a null entry for modification\" );\n+            throw new IllegalArgumentException( \"Entry to be modified cannot be null\" );\n+        }\n+\n         int newId = messageId.incrementAndGet();\n         ModifyResponse resp = new ModifyResponseImpl( newId );\n         resp.getLdapResult().setResultCode( ResultCodeEnum.SUCCESS );\n@@ -561,6 +616,13 @@ public ModifyResponse modify( Entry entry, ModificationOperation modOp ) throws\n      */\n     public ModifyResponse modify( ModifyRequest modRequest ) throws LdapException\n     {\n+        if ( modRequest == null )\n+        {\n+            String msg = \"Cannot process a null modifyRequest\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         int newId = messageId.incrementAndGet();\n \n         modRequest.setMessageId( newId );\n@@ -589,6 +651,13 @@ public ModifyResponse modify( ModifyRequest modRequest ) throws LdapException\n      */\n     public ModifyDnResponse modifyDn( ModifyDnRequest modDnRequest ) throws LdapException\n     {\n+        if ( modDnRequest == null )\n+        {\n+            String msg = \"Cannot process a null modDnRequest\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         int newId = messageId.incrementAndGet();\n \n         ModifyDnResponse resp = new ModifyDnResponseImpl( newId );\n@@ -607,16 +676,16 @@ public ModifyDnResponse modifyDn( ModifyDnRequest modDnRequest ) throws LdapExce\n         try\n         {\n             DN newRdn = null;\n-            if( modDnRequest.getNewRdn() != null )\n+            if ( modDnRequest.getNewRdn() != null )\n             {\n                 newRdn = new DN( modDnRequest.getNewRdn().getName(), schemaManager );\n             }\n-            \n+\n             DN oldRdn = new DN( modDnRequest.getName().getRdn().getName(), schemaManager );\n-            \n-            boolean rdnChanged = modDnRequest.getNewRdn() != null && \n-                ! newRdn.getNormName().equals( oldRdn.getNormName() );\n-            \n+\n+            boolean rdnChanged = modDnRequest.getNewRdn() != null\n+                && !newRdn.getNormName().equals( oldRdn.getNormName() );\n+\n             if ( rdnChanged )\n             {\n                 if ( modDnRequest.getNewSuperior() != null )\n@@ -659,6 +728,20 @@ else if ( modDnRequest.getNewSuperior() != null )\n      */\n     public ModifyDnResponse move( DN entryDn, DN newSuperiorDn ) throws LdapException\n     {\n+        if ( entryDn == null )\n+        {\n+            String msg = \"Cannot process a move of a null DN\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n+        if ( newSuperiorDn == null )\n+        {\n+            String msg = \"Cannot process a move to a null DN\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         ModifyDnRequest iModDnReq = new ModifyDnRequestImpl();\n         iModDnReq.setName( entryDn );\n         iModDnReq.setNewSuperior( newSuperiorDn );\n@@ -672,6 +755,20 @@ public ModifyDnResponse move( DN entryDn, DN newSuperiorDn ) throws LdapExceptio\n      */\n     public ModifyDnResponse move( String entryDn, String newSuperiorDn ) throws LdapException\n     {\n+        if ( entryDn == null )\n+        {\n+            String msg = \"Cannot process a move of a null DN\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n+        if ( newSuperiorDn == null )\n+        {\n+            String msg = \"Cannot process a move to a null DN\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         return move( new DN( entryDn ), new DN( newSuperiorDn ) );\n     }\n \n@@ -681,6 +778,20 @@ public ModifyDnResponse move( String entryDn, String newSuperiorDn ) throws Ldap\n      */\n     public ModifyDnResponse rename( DN entryDn, RDN newRdn, boolean deleteOldRdn ) throws LdapException\n     {\n+        if ( entryDn == null )\n+        {\n+            String msg = \"Cannot process a rename of a null DN\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n+        if ( newRdn == null )\n+        {\n+            String msg = \"Cannot process a rename with a null RDN\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         ModifyDnRequest iModDnReq = new ModifyDnRequestImpl();\n         iModDnReq.setName( entryDn );\n         iModDnReq.setNewRdn( newRdn );\n@@ -713,6 +824,20 @@ public ModifyDnResponse rename( String entryDn, String newRdn, boolean deleteOld\n      */\n     public ModifyDnResponse rename( String entryDn, String newRdn ) throws LdapException\n     {\n+        if ( entryDn == null )\n+        {\n+            String msg = \"Cannot process a rename of a null DN\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n+        if ( newRdn == null )\n+        {\n+            String msg = \"Cannot process a rename with a null RDN\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         return rename( new DN( entryDn ), new RDN( newRdn ) );\n     }\n \n@@ -800,6 +925,13 @@ public ModifyDnResponse moveAndRename( String entryDn, String newDn, boolean del\n      */\n     public Cursor<Response> search( SearchRequest searchRequest ) throws LdapException\n     {\n+        if ( searchRequest == null )\n+        {\n+            String msg = \"Cannot process a null searchRequest\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         try\n         {\n             int newId = messageId.incrementAndGet();\n@@ -827,6 +959,12 @@ public ModifyDnResponse moveAndRename( String entryDn, String newDn, boolean del\n     public Cursor<Response> search( DN baseDn, String filter, SearchScope scope, String... attributes )\n         throws LdapException\n     {\n+        if ( baseDn == null )\n+        {\n+            LOG.debug( \"received a null dn for a search\" );\n+            throw new IllegalArgumentException( \"The base DN cannot be null\" );\n+        }\n+\n         // generate some random operation number\n         SearchRequest searchRequest = new SearchRequestImpl();\n \n@@ -853,9 +991,10 @@ public ModifyDnResponse moveAndRename( String entryDn, String newDn, boolean del\n     /**\n      * {@inheritDoc}\n      */\n-    public void unBind() throws Exception\n+    public void unBind() throws LdapException\n     {\n         messageId.set( 0 );\n+\n         if ( session != null )\n         {\n             session.unbind();\n@@ -879,6 +1018,13 @@ public ExtendedResponse extended( String oid ) throws LdapException\n      */\n     public ExtendedResponse extended( ExtendedRequest extendedRequest ) throws LdapException\n     {\n+        if ( extendedRequest == null )\n+        {\n+            String msg = \"Cannot process a null extendedRequest\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         return extended( ( String ) null );\n \n     }\n@@ -956,6 +1102,13 @@ public BindResponse bind() throws LdapException, IOException\n      */\n     public BindResponse bind( BindRequest bindRequest ) throws LdapException, IOException\n     {\n+        if ( bindRequest == null )\n+        {\n+            String msg = \"Cannot process a null bindRequest\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         int newId = messageId.incrementAndGet();\n \n         BindOperationContext bindContext = new BindOperationContext( null );",
                "raw_url": "https://github.com/apache/directory-server/raw/88befe07f88af8d2e65c5d7bb887859b6bfe10b2/core-api/src/main/java/org/apache/directory/server/core/LdapCoreSessionConnection.java",
                "sha": "5507282cea3950e2665f13715ca57ad1b5f301cf",
                "status": "modified"
            }
        ],
        "message": "Added parameters checks to avoid NPE (DIRAPI-18)\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@993075 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/b9b2b64095978835c97938b4dd52e86cf92c4729",
        "repo": "directory-server",
        "unit_tests": [
            "LdapCoreSessionConnectionTest.java"
        ]
    },
    "directory-server_91e7746": {
        "bug_id": "directory-server_91e7746",
        "commit": "https://github.com/apache/directory-server/commit/91e774615af5089b6aa2a530e94a83eb67f14db4",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/directory-server/blob/91e774615af5089b6aa2a530e94a83eb67f14db4/core/src/main/java/org/apache/directory/server/core/schema/SchemaService.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/schema/SchemaService.java?ref=91e774615af5089b6aa2a530e94a83eb67f14db4",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/directory/server/core/schema/SchemaService.java",
                "patch": "@@ -1687,6 +1687,15 @@ private void check( LdapDN dn, Attributes entry ) throws NamingException\n         // 3-2) or if the AttributeType is COLLECTIVE\n         // 4) We also check that for H-R attributes, we have a valid String in the values\n         Attribute objectClassAttr = entry.get( SchemaConstants.OBJECT_CLASS_AT );\n+        \n+        // Protect the server against a null objectClassAttr\n+        // It can be the case if the user forgot to add it to the entry ...\n+        // In this case, we create an new one, empty\n+        if ( objectClassAttr == null )\n+        {\n+            objectClassAttr = new AttributeImpl( SchemaConstants.OBJECT_CLASS_AT );\n+        }\n+        \n         List<ObjectClass> ocs = new ArrayList<ObjectClass>();\n \n         alterObjectClasses( objectClassAttr );",
                "raw_url": "https://github.com/apache/directory-server/raw/91e774615af5089b6aa2a530e94a83eb67f14db4/core/src/main/java/org/apache/directory/server/core/schema/SchemaService.java",
                "sha": "f6c6d77b81ed3e4da9c4195bf6fe7d2e967d60c7",
                "status": "modified"
            }
        ],
        "message": "Fixed a NPE when the user send an Attributes without any \"ObjecClass\" attribute\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@546021 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/42ece7b02d9b79bbba8a4a86eed996ca7557f22a",
        "repo": "directory-server",
        "unit_tests": [
            "SchemaServiceTest.java"
        ]
    },
    "directory-server_b279f05": {
        "bug_id": "directory-server_b279f05",
        "commit": "https://github.com/apache/directory-server/commit/b279f058c96ee0d1567b64d181752fd9e60dbd4f",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/directory-server/blob/b279f058c96ee0d1567b64d181752fd9e60dbd4f/core-api/src/main/java/org/apache/directory/server/core/entry/ClonedServerEntry.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-api/src/main/java/org/apache/directory/server/core/entry/ClonedServerEntry.java?ref=b279f058c96ee0d1567b64d181752fd9e60dbd4f",
                "deletions": 2,
                "filename": "core-api/src/main/java/org/apache/directory/server/core/entry/ClonedServerEntry.java",
                "patch": "@@ -476,8 +476,14 @@ else if ( obj instanceof Entry )\n         {\n             return false;\n         }\n-\n-        return clonedEntry.equals( other );\n+        if ( clonedEntry == null)\n+        {\n+            return other == null;\n+        }\n+        else\n+        {\n+            return clonedEntry.equals( other );\n+        }\n     }\n     \n     ",
                "raw_url": "https://github.com/apache/directory-server/raw/b279f058c96ee0d1567b64d181752fd9e60dbd4f/core-api/src/main/java/org/apache/directory/server/core/entry/ClonedServerEntry.java",
                "sha": "6ab0c5f59709425c59932158c9fd243a28144dcf",
                "status": "modified"
            }
        ],
        "message": "Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@947080 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/1c5233eff8bd6ee92636f324062a35076603750b",
        "repo": "directory-server",
        "unit_tests": [
            "ClonedServerEntryTest.java"
        ]
    },
    "directory-server_bfce278": {
        "bug_id": "directory-server_bfce278",
        "commit": "https://github.com/apache/directory-server/commit/bfce2783f401bb348ca4c601a6d304fd9f965306",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/bfce2783f401bb348ca4c601a6d304fd9f965306/xdbm-base/src/main/java/org/apache/directory/server/xdbm/AbstractIndexCursor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/xdbm-base/src/main/java/org/apache/directory/server/xdbm/AbstractIndexCursor.java?ref=bfce2783f401bb348ca4c601a6d304fd9f965306",
                "deletions": 1,
                "filename": "xdbm-base/src/main/java/org/apache/directory/server/xdbm/AbstractIndexCursor.java",
                "patch": "@@ -42,7 +42,7 @@ public final void setClosureMonitor( ClosureMonitor monitor )\n     {\n         if ( monitor == null )\n         {\n-            throw new NullPointerException( \"monitor\" );\n+            throw new IllegalArgumentException( \"monitor\" );\n         }\n \n         this.monitor = monitor;",
                "raw_url": "https://github.com/apache/directory-server/raw/bfce2783f401bb348ca4c601a6d304fd9f965306/xdbm-base/src/main/java/org/apache/directory/server/xdbm/AbstractIndexCursor.java",
                "sha": "668e6a28fd467a7042aae7202dfdd7f32f10af49",
                "status": "modified"
            }
        ],
        "message": "Throw IllegalArgumentException instead of NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@944689 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/38f5dfacc8cadedede85b29cb3cad1cd6693673b",
        "repo": "directory-server",
        "unit_tests": [
            "AbstractIndexCursorTest.java"
        ]
    },
    "directory-server_c0187e6": {
        "bug_id": "directory-server_c0187e6",
        "commit": "https://github.com/apache/directory-server/commit/c0187e62926aa58970170a59bb6ba6a3e96d7a9a",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/directory-server/blob/c0187e62926aa58970170a59bb6ba6a3e96d7a9a/service-builder/src/main/java/org/apache/directory/server/config/builder/ServiceBuilder.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/service-builder/src/main/java/org/apache/directory/server/config/builder/ServiceBuilder.java?ref=c0187e62926aa58970170a59bb6ba6a3e96d7a9a",
                "deletions": 3,
                "filename": "service-builder/src/main/java/org/apache/directory/server/config/builder/ServiceBuilder.java",
                "patch": "@@ -535,18 +535,19 @@ else if ( transportBean instanceof UdpTransportBean )\n      */\n     public static Authenticator[] createAuthenticators( List<AuthenticatorBean> list ) throws ConfigurationException\n     {\n-        Authenticator[] authenticators = new Authenticator[list.size()];\n+        Set<Authenticator> authenticators = new HashSet<Authenticator>( list.size() );\n         int i = 0;\n \n         for ( AuthenticatorBean authenticatorBean : list )\n         {\n             if ( authenticatorBean.isEnabled() )\n             {\n-                authenticators[i++] = createAuthenticator( authenticatorBean );\n+                authenticators.add( createAuthenticator( authenticatorBean ) );\n             }\n         }\n \n-        return authenticators;\n+        return authenticators.toArray( new Authenticator[]\n+            {} );\n     }\n \n ",
                "raw_url": "https://github.com/apache/directory-server/raw/c0187e62926aa58970170a59bb6ba6a3e96d7a9a/service-builder/src/main/java/org/apache/directory/server/config/builder/ServiceBuilder.java",
                "sha": "523a4e5ca1f48b52c3a992248111efbdbed10a72",
                "status": "modified"
            }
        ],
        "message": "Another fix for DIRSERVER-1802 : we were creating an array which is too big when we remove a disabled Authenticator, so we end with a null value in the array, which produces a NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@1446146 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/f3b89a0752761865516adea7fae2db4c32bd680a",
        "repo": "directory-server",
        "unit_tests": [
            "ServiceBuilderTest.java"
        ]
    },
    "directory-server_cd91e1c": {
        "bug_id": "directory-server_cd91e1c",
        "commit": "https://github.com/apache/directory-server/commit/cd91e1c00ccb9d5c09a63496625eab262c8cfc73",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/cd91e1c00ccb9d5c09a63496625eab262c8cfc73/server-jndi/src/main/java/org/apache/directory/server/configuration/ApacheDS.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/server-jndi/src/main/java/org/apache/directory/server/configuration/ApacheDS.java?ref=cd91e1c00ccb9d5c09a63496625eab262c8cfc73",
                "deletions": 1,
                "filename": "server-jndi/src/main/java/org/apache/directory/server/configuration/ApacheDS.java",
                "patch": "@@ -353,7 +353,7 @@ private void loadLdif( File ldifFile ) throws Exception\n         \r\n         if ( fileEntry != null )\r\n         {\r\n-            String time = fileEntry.get( SchemaConstants.CREATE_TIMESTAMP_AT ).getString();\r\n+            String time = ((ClonedServerEntry)fileEntry).getOriginalEntry().get( SchemaConstants.CREATE_TIMESTAMP_AT ).getString();\r\n             LOG.info( \"Load of LDIF file '\" + getCanonical( ldifFile )\r\n                     + \"' skipped.  It has already been loaded on \" + time + \".\" );\r\n         }\r",
                "raw_url": "https://github.com/apache/directory-server/raw/cd91e1c00ccb9d5c09a63496625eab262c8cfc73/server-jndi/src/main/java/org/apache/directory/server/configuration/ApacheDS.java",
                "sha": "f88aacb326319dd33dd8f5ee7b0e6db5ffef2961",
                "status": "modified"
            }
        ],
        "message": "Fixed a NPE when trying to read an operational attribute, as we were using the clonedServerEntry, not the original entry.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@691317 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/fbb8eae5913dfcdb7229f2b797cd9a6c9f260f2a",
        "repo": "directory-server",
        "unit_tests": [
            "ApacheDSTest.java"
        ]
    }
}