{
    "skywalking_5eea1ae": {
        "bug_id": "skywalking_5eea1ae",
        "commit": "https://github.com/apache/skywalking/commit/5eea1ae7670b58acaa7278ee3b3e730235d17bc7",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/skywalking/blob/5eea1ae7670b58acaa7278ee3b3e730235d17bc7/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java?ref=5eea1ae7670b58acaa7278ee3b3e730235d17bc7",
                "deletions": 13,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java",
                "patch": "@@ -15,17 +15,15 @@\n  * limitations under the License.\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.patch;\n \n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n-\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n \n /**\n  * {@link AopExpressionMatchInterceptor} check if the method is match the enhanced method\n@@ -42,30 +40,33 @@ public AopExpressionMatchInterceptor() {\n     }\n \n     @Override\n-    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, MethodInterceptResult result) {\n+    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        MethodInterceptResult result) {\n \n     }\n \n     @Override\n-    public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Object ret) {\n-        Method targetAopMethod = (Method) allArguments[1];\n-        Class<?> targetAopClass = (Class<?>) allArguments[2];\n-        if (EnhancedInstance.class.isAssignableFrom(targetAopClass) && isEnhancedMethod(targetAopMethod)) {\n+    public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        Object ret) {\n+        Method targetAopMethod = (Method)allArguments[1];\n+        Class<?> targetAopClass = (Class<?>)allArguments[2];\n+        if (targetAopClass != null && EnhancedInstance.class.isAssignableFrom(targetAopClass) && isEnhancedMethod(targetAopMethod)) {\n             return false;\n         }\n         return ret;\n     }\n \n     @Override\n-    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Throwable t) {\n+    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        Throwable t) {\n \n     }\n \n     private boolean isEnhancedMethod(Method targetMethod) {\n         for (Method method : methods) {\n             if (method.getName().equals(targetMethod.getName())\n-                    && method.getReturnType().equals(targetMethod.getReturnType())\n-                    && equalParamTypes(method.getParameterTypes(), targetMethod.getParameterTypes())) {\n+                && method.getReturnType().equals(targetMethod.getReturnType())\n+                && equalParamTypes(method.getParameterTypes(), targetMethod.getParameterTypes())) {\n                 return true;\n             }\n         }",
                "raw_url": "https://github.com/apache/skywalking/raw/5eea1ae7670b58acaa7278ee3b3e730235d17bc7/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java",
                "sha": "5c99a886904ef3eae8d455c155c42390186dc71a",
                "status": "modified"
            }
        ],
        "message": "Fix #1488: Fix NPE when the targetAop class is null (#1507)",
        "parent": "https://github.com/apache/skywalking/commit/6295af53fbd32559dbcaf8d2cb4d59dd6a32c7e7",
        "repo": "skywalking",
        "unit_tests": [
            "AopExpressionMatchInterceptorTest.java"
        ]
    },
    "skywalking_630e623": {
        "bug_id": "skywalking_630e623",
        "commit": "https://github.com/apache/skywalking/commit/630e62312ce1dc37d60780351d15f68ff47dd5f0",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/skywalking/blob/630e62312ce1dc37d60780351d15f68ff47dd5f0/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java?ref=630e62312ce1dc37d60780351d15f68ff47dd5f0",
                "deletions": 1,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java",
                "patch": "@@ -44,7 +44,8 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA\n         Object ret) throws Throwable {\n         AdvisedSupport advisedSupport = (AdvisedSupport)allArguments[0];\n \n-        if (EnhancedInstance.class.isAssignableFrom(advisedSupport.getTargetClass())) {\n+        Class targetClass = advisedSupport.getTargetClass();\n+        if (targetClass != null && EnhancedInstance.class.isAssignableFrom(targetClass)) {\n             return true;\n         }\n         return ret;",
                "raw_url": "https://github.com/apache/skywalking/raw/630e62312ce1dc37d60780351d15f68ff47dd5f0/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java",
                "sha": "a7300e4190d3a68a7e0dacc729031f171e309752",
                "status": "modified"
            }
        ],
        "message": "Fix #1454: fix NPE issue about spring apo interceptor (#1467)",
        "parent": "https://github.com/apache/skywalking/commit/7744911c32e7179ffdf6b9cbaed19ae019338fc6",
        "repo": "skywalking",
        "unit_tests": [
            "CreateAopProxyInterceptorTest.java"
        ]
    },
    "skywalking_6b99abf": {
        "bug_id": "skywalking_6b99abf",
        "commit": "https://github.com/apache/skywalking/commit/6b99abffff801cc7bfd6ce32919329b1acb0bd8a",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/skywalking/blob/6b99abffff801cc7bfd6ce32919329b1acb0bd8a/apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java?ref=6b99abffff801cc7bfd6ce32919329b1acb0bd8a",
                "deletions": 23,
                "filename": "apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java",
                "patch": "@@ -18,23 +18,14 @@\n \n package org.apache.skywalking.apm.plugin.httpClient.v4;\n \n-import org.apache.http.HttpHost;\n-import org.apache.http.HttpRequest;\n-import org.apache.http.HttpResponse;\n-import org.apache.http.StatusLine;\n-import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n-import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n-import org.apache.skywalking.apm.agent.core.context.ContextManager;\n-import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n-import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n-import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n-import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n-\n import java.lang.reflect.Method;\n import java.net.URL;\n+import org.apache.http.*;\n+import org.apache.skywalking.apm.agent.core.context.*;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.*;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.*;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n \n public class HttpClientExecuteInterceptor implements InstanceMethodsAroundInterceptor {\n \n@@ -73,16 +64,19 @@\n             return ret;\n         }\n \n-        HttpResponse response = (HttpResponse)ret;\n-        StatusLine responseStatusLine = response.getStatusLine();\n-        if (responseStatusLine != null) {\n-            int statusCode = responseStatusLine.getStatusCode();\n-            AbstractSpan span = ContextManager.activeSpan();\n-            if (statusCode >= 400) {\n-                span.errorOccurred();\n-                Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+        if (ret != null) {\n+            HttpResponse response = (HttpResponse)ret;\n+            StatusLine responseStatusLine = response.getStatusLine();\n+            if (responseStatusLine != null) {\n+                int statusCode = responseStatusLine.getStatusCode();\n+                AbstractSpan span = ContextManager.activeSpan();\n+                if (statusCode >= 400) {\n+                    span.errorOccurred();\n+                    Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+                }\n             }\n         }\n+        \n         ContextManager.stopSpan();\n         return ret;\n     }",
                "raw_url": "https://github.com/apache/skywalking/raw/6b99abffff801cc7bfd6ce32919329b1acb0bd8a/apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java",
                "sha": "5d2cf2908385e48480b964e87fc337008267d810",
                "status": "modified"
            }
        ],
        "message": "[Agent] Apache http client plugin bug (#1448) (#1452)\n\n* #1447\r\n\r\nFixed the after method interceptor for the apache http client NPE error when the response is null cause by the doExecute method throw a exception.",
        "parent": "https://github.com/apache/skywalking/commit/86bb1c05e420b8e11ab137775fc0a0f0790cb28e",
        "repo": "skywalking",
        "unit_tests": [
            "HttpClientExecuteInterceptorTest.java"
        ]
    },
    "skywalking_7c2aa4c": {
        "bug_id": "skywalking_7c2aa4c",
        "commit": "https://github.com/apache/skywalking/commit/7c2aa4c43a01964dd4d15a55c281ce720e0e4af0",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/skywalking/blob/7c2aa4c43a01964dd4d15a55c281ce720e0e4af0/apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java?ref=7c2aa4c43a01964dd4d15a55c281ce720e0e4af0",
                "deletions": 1,
                "filename": "apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java",
                "patch": "@@ -37,7 +37,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         if (ContextManager.isActive()) {\n             AbstractSpan abstractTracingSpan = ContextManager.activeSpan();\n             Map<String, String> eventMap = new HashMap<String, String>();\n-            eventMap.put(\"forward-url\", (String)objInst.getSkyWalkingDynamicField());\n+            eventMap.put(\"forward-url\", objInst.getSkyWalkingDynamicField() == null ? \"\" : String.valueOf(objInst.getSkyWalkingDynamicField()));\n             abstractTracingSpan.log(System.currentTimeMillis(), eventMap);\n             ContextManager.getRuntimeContext().put(Constants.FORWARD_REQUEST_FLAG, true);\n         }",
                "raw_url": "https://github.com/apache/skywalking/raw/7c2aa4c43a01964dd4d15a55c281ce720e0e4af0/apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java",
                "sha": "68416c7ed6734fe6e043c098f205dadf306571d5",
                "status": "modified"
            }
        ],
        "message": "FIX NPE in tomcat plugin ForwardInterceptor (#1562)",
        "parent": "https://github.com/apache/skywalking/commit/03af5f1806d6a9d7052a8836d07b2135277bc2d5",
        "repo": "skywalking",
        "unit_tests": [
            "ForwardInterceptorTest.java"
        ]
    },
    "skywalking_a5d2610": {
        "bug_id": "skywalking_a5d2610",
        "commit": "https://github.com/apache/skywalking/commit/a5d261039278019b6d288d72a760ba3beda7444a",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/skywalking/blob/a5d261039278019b6d288d72a760ba3beda7444a/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java?ref=a5d261039278019b6d288d72a760ba3beda7444a",
                "deletions": 13,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java",
                "patch": "@@ -15,17 +15,15 @@\n  * limitations under the License.\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.patch;\n \n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n-\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n \n /**\n  * {@link AopExpressionMatchInterceptor} check if the method is match the enhanced method\n@@ -42,30 +40,33 @@ public AopExpressionMatchInterceptor() {\n     }\n \n     @Override\n-    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, MethodInterceptResult result) {\n+    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        MethodInterceptResult result) {\n \n     }\n \n     @Override\n-    public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Object ret) {\n-        Method targetAopMethod = (Method) allArguments[1];\n-        Class<?> targetAopClass = (Class<?>) allArguments[2];\n-        if (EnhancedInstance.class.isAssignableFrom(targetAopClass) && isEnhancedMethod(targetAopMethod)) {\n+    public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        Object ret) {\n+        Method targetAopMethod = (Method)allArguments[1];\n+        Class<?> targetAopClass = (Class<?>)allArguments[2];\n+        if (targetAopClass != null && EnhancedInstance.class.isAssignableFrom(targetAopClass) && isEnhancedMethod(targetAopMethod)) {\n             return false;\n         }\n         return ret;\n     }\n \n     @Override\n-    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Throwable t) {\n+    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        Throwable t) {\n \n     }\n \n     private boolean isEnhancedMethod(Method targetMethod) {\n         for (Method method : methods) {\n             if (method.getName().equals(targetMethod.getName())\n-                    && method.getReturnType().equals(targetMethod.getReturnType())\n-                    && equalParamTypes(method.getParameterTypes(), targetMethod.getParameterTypes())) {\n+                && method.getReturnType().equals(targetMethod.getReturnType())\n+                && equalParamTypes(method.getParameterTypes(), targetMethod.getParameterTypes())) {\n                 return true;\n             }\n         }",
                "raw_url": "https://github.com/apache/skywalking/raw/a5d261039278019b6d288d72a760ba3beda7444a/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java",
                "sha": "5c99a886904ef3eae8d455c155c42390186dc71a",
                "status": "modified"
            }
        ],
        "message": "Fix #1488: Fix NPE when the targetAop class is null (#1507)",
        "parent": "https://github.com/apache/skywalking/commit/eed6fa18c88ad14277d17149fea92946e9cb1b40",
        "repo": "skywalking",
        "unit_tests": [
            "AopExpressionMatchInterceptorTest.java"
        ]
    },
    "skywalking_b8206b8": {
        "bug_id": "skywalking_b8206b8",
        "commit": "https://github.com/apache/skywalking/commit/b8206b8cecd787891f1ace550ecd9550d7bec1bf",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/skywalking/blob/b8206b8cecd787891f1ace550ecd9550d7bec1bf/apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java?ref=b8206b8cecd787891f1ace550ecd9550d7bec1bf",
                "deletions": 23,
                "filename": "apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java",
                "patch": "@@ -18,23 +18,14 @@\n \n package org.apache.skywalking.apm.plugin.httpClient.v4;\n \n-import org.apache.http.HttpHost;\n-import org.apache.http.HttpRequest;\n-import org.apache.http.HttpResponse;\n-import org.apache.http.StatusLine;\n-import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n-import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n-import org.apache.skywalking.apm.agent.core.context.ContextManager;\n-import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n-import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n-import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n-import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n-\n import java.lang.reflect.Method;\n import java.net.URL;\n+import org.apache.http.*;\n+import org.apache.skywalking.apm.agent.core.context.*;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.*;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.*;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n \n public class HttpClientExecuteInterceptor implements InstanceMethodsAroundInterceptor {\n \n@@ -73,16 +64,19 @@\n             return ret;\n         }\n \n-        HttpResponse response = (HttpResponse)ret;\n-        StatusLine responseStatusLine = response.getStatusLine();\n-        if (responseStatusLine != null) {\n-            int statusCode = responseStatusLine.getStatusCode();\n-            AbstractSpan span = ContextManager.activeSpan();\n-            if (statusCode >= 400) {\n-                span.errorOccurred();\n-                Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+        if (ret != null) {\n+            HttpResponse response = (HttpResponse)ret;\n+            StatusLine responseStatusLine = response.getStatusLine();\n+            if (responseStatusLine != null) {\n+                int statusCode = responseStatusLine.getStatusCode();\n+                AbstractSpan span = ContextManager.activeSpan();\n+                if (statusCode >= 400) {\n+                    span.errorOccurred();\n+                    Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+                }\n             }\n         }\n+        \n         ContextManager.stopSpan();\n         return ret;\n     }",
                "raw_url": "https://github.com/apache/skywalking/raw/b8206b8cecd787891f1ace550ecd9550d7bec1bf/apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java",
                "sha": "5d2cf2908385e48480b964e87fc337008267d810",
                "status": "modified"
            }
        ],
        "message": "[Agent] Apache http client plugin bug (#1448)\n\n* #1447\r\n\r\nFixed the after method interceptor for the apache http client NPE error when the response is null cause by the doExecute method throw a exception.",
        "parent": "https://github.com/apache/skywalking/commit/5299a68e7c7e469b3cfe4d440228d351f12c3860",
        "repo": "skywalking",
        "unit_tests": [
            "HttpClientExecuteInterceptorTest.java"
        ]
    },
    "skywalking_d38b208": {
        "bug_id": "skywalking_d38b208",
        "commit": "https://github.com/apache/skywalking/commit/d38b208c9e8dfa6aa872ea51fe0de340d6d493af",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/skywalking/blob/d38b208c9e8dfa6aa872ea51fe0de340d6d493af/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java?ref=d38b208c9e8dfa6aa872ea51fe0de340d6d493af",
                "deletions": 1,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java",
                "patch": "@@ -44,7 +44,8 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA\n         Object ret) throws Throwable {\n         AdvisedSupport advisedSupport = (AdvisedSupport)allArguments[0];\n \n-        if (EnhancedInstance.class.isAssignableFrom(advisedSupport.getTargetClass())) {\n+        Class targetClass = advisedSupport.getTargetClass();\n+        if (targetClass != null && EnhancedInstance.class.isAssignableFrom(targetClass)) {\n             return true;\n         }\n         return ret;",
                "raw_url": "https://github.com/apache/skywalking/raw/d38b208c9e8dfa6aa872ea51fe0de340d6d493af/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java",
                "sha": "a7300e4190d3a68a7e0dacc729031f171e309752",
                "status": "modified"
            }
        ],
        "message": "Fix #1454: fix NPE issue about spring apo interceptor (#1467)",
        "parent": "https://github.com/apache/skywalking/commit/48348efe74112c7daeb36984b4954de93e6f5e1e",
        "repo": "skywalking",
        "unit_tests": [
            "CreateAopProxyInterceptorTest.java"
        ]
    },
    "skywalking_d556404": {
        "bug_id": "skywalking_d556404",
        "commit": "https://github.com/apache/skywalking/commit/d55640454ee63b151272f043697f8779bb6cdd50",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/skywalking/blob/d55640454ee63b151272f043697f8779bb6cdd50/apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/okhttp/v3/RealCallInterceptor.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/okhttp/v3/RealCallInterceptor.java?ref=d55640454ee63b151272f043697f8779bb6cdd50",
                "deletions": 6,
                "filename": "apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/okhttp/v3/RealCallInterceptor.java",
                "patch": "@@ -100,12 +100,13 @@ public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments,\n         Class<?>[] argumentsTypes, Object ret) throws Throwable {\n         Response response = (Response)ret;\n-        int statusCode = response.code();\n-\n-        AbstractSpan span = ContextManager.activeSpan();\n-        if (statusCode >= 400) {\n-            span.errorOccurred();\n-            Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+        if (response != null) {\n+            int statusCode = response.code();\n+            AbstractSpan span = ContextManager.activeSpan();\n+            if (statusCode >= 400) {\n+                span.errorOccurred();\n+                Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+            }\n         }\n \n         ContextManager.stopSpan();",
                "raw_url": "https://github.com/apache/skywalking/raw/d55640454ee63b151272f043697f8779bb6cdd50/apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/okhttp/v3/RealCallInterceptor.java",
                "sha": "d9a9ae7abf8867788b105bbe7431a40b6e76648b",
                "status": "modified"
            }
        ],
        "message": "fix NPE when has connection exception (#1253)",
        "parent": "https://github.com/apache/skywalking/commit/e249e0607d461b609eb76be48c046d114b34bfd5",
        "repo": "skywalking",
        "unit_tests": [
            "RealCallInterceptorTest.java"
        ]
    },
    "skywalking_dd942d1": {
        "bug_id": "skywalking_dd942d1",
        "commit": "https://github.com/apache/skywalking/commit/dd942d15a30958483ccc939bf66b0121859cc243",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/skywalking/blob/dd942d15a30958483ccc939bf66b0121859cc243/apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java?ref=dd942d15a30958483ccc939bf66b0121859cc243",
                "deletions": 1,
                "filename": "apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java",
                "patch": "@@ -37,7 +37,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         if (ContextManager.isActive()) {\n             AbstractSpan abstractTracingSpan = ContextManager.activeSpan();\n             Map<String, String> eventMap = new HashMap<String, String>();\n-            eventMap.put(\"forward-url\", (String)objInst.getSkyWalkingDynamicField());\n+            eventMap.put(\"forward-url\", objInst.getSkyWalkingDynamicField() == null ? \"\" : String.valueOf(objInst.getSkyWalkingDynamicField()));\n             abstractTracingSpan.log(System.currentTimeMillis(), eventMap);\n             ContextManager.getRuntimeContext().put(Constants.FORWARD_REQUEST_FLAG, true);\n         }",
                "raw_url": "https://github.com/apache/skywalking/raw/dd942d15a30958483ccc939bf66b0121859cc243/apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java",
                "sha": "68416c7ed6734fe6e043c098f205dadf306571d5",
                "status": "modified"
            }
        ],
        "message": "FIX NPE in tomcat plugin ForwardInterceptor (#1562)",
        "parent": "https://github.com/apache/skywalking/commit/a29a8d7c09641b7c4e722d03c9816d15d68855c4",
        "repo": "skywalking",
        "unit_tests": [
            "ForwardInterceptorTest.java"
        ]
    },
    "skywalking_ea566b1": {
        "bug_id": "skywalking_ea566b1",
        "commit": "https://github.com/apache/skywalking/commit/ea566b19a501b44c29ca4083c28c560160ad86cf",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/skywalking/blob/ea566b19a501b44c29ca4083c28c560160ad86cf/apm-sniffer/apm-sdk-plugin/rabbitmq-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rabbitmq/RabbitMQConsumerInterceptor.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/rabbitmq-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rabbitmq/RabbitMQConsumerInterceptor.java?ref=ea566b19a501b44c29ca4083c28c560160ad86cf",
                "deletions": 1,
                "filename": "apm-sniffer/apm-sdk-plugin/rabbitmq-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rabbitmq/RabbitMQConsumerInterceptor.java",
                "patch": "@@ -51,7 +51,11 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         CarrierItem next = contextCarrier.items();\n         while (next.hasNext()) {\n             next = next.next();\n-            next.setHeadValue(properties.getHeaders().get(next.getHeadKey()).toString());\n+            if (properties.getHeaders() != null && properties.getHeaders().get(next.getHeadKey()) != null) {\n+                next.setHeadValue(properties.getHeaders().get(next.getHeadKey()).toString());\n+            } else {\n+                next.setHeadValue(\"\");\n+            }\n         }\n         ContextManager.extract(contextCarrier);\n ",
                "raw_url": "https://github.com/apache/skywalking/raw/ea566b19a501b44c29ca4083c28c560160ad86cf/apm-sniffer/apm-sdk-plugin/rabbitmq-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rabbitmq/RabbitMQConsumerInterceptor.java",
                "sha": "91be8bb7f08852b8ee636c739773db0ae01b72a6",
                "status": "modified"
            }
        ],
        "message": "Fix RabbitMq NPE case (#2450)\n\n* Fix npe",
        "parent": "https://github.com/apache/skywalking/commit/128a119077d74ad4481a942e3e3705d6043a429b",
        "repo": "skywalking",
        "unit_tests": [
            "RabbitMQConsumerInterceptorTest.java"
        ]
    }
}