{
    "skywalking_5eea1ae": {
        "bug_id": "skywalking_5eea1ae",
        "commit": "https://github.com/apache/skywalking/commit/5eea1ae7670b58acaa7278ee3b3e730235d17bc7",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/skywalking/blob/5eea1ae7670b58acaa7278ee3b3e730235d17bc7/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java?ref=5eea1ae7670b58acaa7278ee3b3e730235d17bc7",
                "deletions": 13,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java",
                "patch": "@@ -15,17 +15,15 @@\n  * limitations under the License.\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.patch;\n \n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n-\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n \n /**\n  * {@link AopExpressionMatchInterceptor} check if the method is match the enhanced method\n@@ -42,30 +40,33 @@ public AopExpressionMatchInterceptor() {\n     }\n \n     @Override\n-    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, MethodInterceptResult result) {\n+    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        MethodInterceptResult result) {\n \n     }\n \n     @Override\n-    public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Object ret) {\n-        Method targetAopMethod = (Method) allArguments[1];\n-        Class<?> targetAopClass = (Class<?>) allArguments[2];\n-        if (EnhancedInstance.class.isAssignableFrom(targetAopClass) && isEnhancedMethod(targetAopMethod)) {\n+    public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        Object ret) {\n+        Method targetAopMethod = (Method)allArguments[1];\n+        Class<?> targetAopClass = (Class<?>)allArguments[2];\n+        if (targetAopClass != null && EnhancedInstance.class.isAssignableFrom(targetAopClass) && isEnhancedMethod(targetAopMethod)) {\n             return false;\n         }\n         return ret;\n     }\n \n     @Override\n-    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Throwable t) {\n+    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        Throwable t) {\n \n     }\n \n     private boolean isEnhancedMethod(Method targetMethod) {\n         for (Method method : methods) {\n             if (method.getName().equals(targetMethod.getName())\n-                    && method.getReturnType().equals(targetMethod.getReturnType())\n-                    && equalParamTypes(method.getParameterTypes(), targetMethod.getParameterTypes())) {\n+                && method.getReturnType().equals(targetMethod.getReturnType())\n+                && equalParamTypes(method.getParameterTypes(), targetMethod.getParameterTypes())) {\n                 return true;\n             }\n         }",
                "raw_url": "https://github.com/apache/skywalking/raw/5eea1ae7670b58acaa7278ee3b3e730235d17bc7/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java",
                "sha": "5c99a886904ef3eae8d455c155c42390186dc71a",
                "status": "modified"
            }
        ],
        "message": "Fix #1488: Fix NPE when the targetAop class is null (#1507)",
        "parent": "https://github.com/apache/skywalking/commit/6295af53fbd32559dbcaf8d2cb4d59dd6a32c7e7",
        "repo": "skywalking",
        "unit_tests": [
            "AopExpressionMatchInterceptorTest.java"
        ]
    },
    "skywalking_630e623": {
        "bug_id": "skywalking_630e623",
        "commit": "https://github.com/apache/skywalking/commit/630e62312ce1dc37d60780351d15f68ff47dd5f0",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/skywalking/blob/630e62312ce1dc37d60780351d15f68ff47dd5f0/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java?ref=630e62312ce1dc37d60780351d15f68ff47dd5f0",
                "deletions": 1,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java",
                "patch": "@@ -44,7 +44,8 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA\n         Object ret) throws Throwable {\n         AdvisedSupport advisedSupport = (AdvisedSupport)allArguments[0];\n \n-        if (EnhancedInstance.class.isAssignableFrom(advisedSupport.getTargetClass())) {\n+        Class targetClass = advisedSupport.getTargetClass();\n+        if (targetClass != null && EnhancedInstance.class.isAssignableFrom(targetClass)) {\n             return true;\n         }\n         return ret;",
                "raw_url": "https://github.com/apache/skywalking/raw/630e62312ce1dc37d60780351d15f68ff47dd5f0/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java",
                "sha": "a7300e4190d3a68a7e0dacc729031f171e309752",
                "status": "modified"
            }
        ],
        "message": "Fix #1454: fix NPE issue about spring apo interceptor (#1467)",
        "parent": "https://github.com/apache/skywalking/commit/7744911c32e7179ffdf6b9cbaed19ae019338fc6",
        "repo": "skywalking",
        "unit_tests": [
            "CreateAopProxyInterceptorTest.java"
        ]
    },
    "skywalking_6ae5174": {
        "bug_id": "skywalking_6ae5174",
        "commit": "https://github.com/apache/skywalking/commit/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "deletions": 0,
                "filename": "apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java",
                "patch": "@@ -122,6 +122,8 @@\n \n     public static final OfficialComponent RESTEASY =  new OfficialComponent(62, \"RESTEasy\");\n \n+    public static final OfficialComponent SOLRJ =  new OfficialComponent(63, \"solrj\");\n+\n     private static ComponentsDefine INSTANCE = new ComponentsDefine();\n \n     private String[] components;\n@@ -179,6 +181,7 @@ public ComponentsDefine() {\n         addComponent(VERTX);\n         addComponent(SPRING_CLOUD_GATEWAY);\n         addComponent(RESTEASY);\n+        addComponent(SOLRJ);\n     }\n \n     private void addComponent(OfficialComponent component) {",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java",
                "sha": "c8dec42ee00f7c61cc0de856ed2c8f02dda527f4",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "deletions": 0,
                "filename": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java",
                "patch": "@@ -193,5 +193,17 @@\n              */\n             public static boolean USE_QUALIFIED_NAME_AS_OPERATION_NAME = false;\n         }\n+\n+        public static class SolrJ {\n+            /**\n+             * If true, trace all the query parameters(include deleteByIds and deleteByQuery) in Solr query request, default is false.\n+             */\n+            public static boolean TRACE_STATEMENT = false;\n+\n+            /**\n+             * If true, trace all the operation parameters in Solr request, default is false.\n+             */\n+            public static boolean TRACE_OPS_PARAMS = false;\n+        }\n     }\n }",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java",
                "sha": "a1e4f81dccc3ec9178d4e2e452a62991badad780",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/pom.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/pom.xml?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "deletions": 1,
                "filename": "apm-sniffer/apm-sdk-plugin/pom.xml",
                "patch": "@@ -73,6 +73,7 @@\n         <module>dubbo-2.7.x-conflict-patch</module>\n         <module>vertx-plugins</module>\n         <module>resteasy-plugin</module>\n+        <module>solrj-7.x-plugin</module>\n     </modules>\n     <packaging>pom</packaging>\n \n@@ -182,4 +183,4 @@\n             </plugin>\n         </plugins>\n     </build>\n-</project>\n+</project>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/pom.xml",
                "sha": "71725d366f314ffc1015f47212baa80a2c1ccd9d",
                "status": "modified"
            },
            {
                "additions": 47,
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/pom.xml",
                "changes": 47,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/pom.xml?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "deletions": 0,
                "filename": "apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/pom.xml",
                "patch": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one or more\n+  ~ contributor license agreements.  See the NOTICE file distributed with\n+  ~ this work for additional information regarding copyright ownership.\n+  ~ The ASF licenses this file to You under the Apache License, Version 2.0\n+  ~ (the \"License\"); you may not use this file except in compliance with\n+  ~ the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  ~\n+  -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>apm-sdk-plugin</artifactId>\n+        <groupId>org.apache.skywalking</groupId>\n+        <version>6.2.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>apm-solrj-7.x-plugin</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>solrj-7.x-plugin</name>\n+    <url>http://maven.apache.org</url>\n+\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <solr-solrj.version>7.7.1</solr-solrj.version>\n+\t</properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.solr</groupId>\n+            <artifactId>solr-solrj</artifactId>\n+            <version>${solr-solrj.version}</version>\n+            <scope>provided</scope>\n+        </dependency>\n+    </dependencies>\n+\n+</project>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/pom.xml",
                "sha": "31b931ade3bb9b44caa9282831c2cbc036103e4d",
                "status": "added"
            },
            {
                "additions": 229,
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/SolrClientInterceptor.java",
                "changes": 229,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/SolrClientInterceptor.java?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "deletions": 0,
                "filename": "apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/SolrClientInterceptor.java",
                "patch": "@@ -0,0 +1,229 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.plugin.solrj;\n+\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.solrj.commons.SolrjInstance;\n+import org.apache.skywalking.apm.plugin.solrj.commons.SolrjTags;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.HttpSolrClient;\n+import org.apache.solr.client.solrj.request.AbstractUpdateRequest;\n+import org.apache.solr.client.solrj.request.QueryRequest;\n+import org.apache.solr.client.solrj.request.UpdateRequest;\n+import org.apache.solr.common.SolrDocumentList;\n+import org.apache.solr.common.SolrException;\n+import org.apache.solr.common.SolrInputDocument;\n+import org.apache.solr.common.params.CommonParams;\n+import org.apache.solr.common.params.ModifiableSolrParams;\n+import org.apache.solr.common.params.SolrParams;\n+import org.apache.solr.common.params.UpdateParams;\n+import org.apache.solr.common.util.NamedList;\n+\n+import java.lang.reflect.Method;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class SolrClientInterceptor implements InstanceMethodsAroundInterceptor, InstanceConstructorInterceptor {\n+    private static final String DB_TYPE = \"Solr\";\n+\n+    @Override\n+    public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n+        SolrjInstance instance = new SolrjInstance();\n+        HttpSolrClient client = (HttpSolrClient) objInst;\n+\n+        try {\n+            URL url = new URL(client.getBaseURL());\n+            instance.setRemotePeer(url.getHost() + \":\" + url.getPort());\n+\n+            String path = url.getPath();\n+            int idx = path.lastIndexOf('/');\n+            if (idx > 0) {\n+                instance.setCollection(path.substring(idx + 1));\n+            }\n+        } catch (MalformedURLException ignore) {\n+        }\n+        objInst.setSkyWalkingDynamicField(instance);\n+    }\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        SolrRequest<?> request = (SolrRequest<?>) allArguments[0];\n+        SolrjInstance instance = (SolrjInstance) objInst.getSkyWalkingDynamicField();\n+\n+        SolrParams params = getParams(request.getParams());\n+        String collection = getCollection(instance, allArguments[2]);\n+\n+        if (\"/update\".equals(request.getPath())) {\n+            AbstractUpdateRequest update = (AbstractUpdateRequest) request;\n+\n+            AbstractUpdateRequest.ACTION action = update.getAction();\n+            if (action == null) {\n+                if (update instanceof UpdateRequest) {\n+                    AbstractSpan span = null;\n+\n+                    UpdateRequest ur = (UpdateRequest) update;\n+                    List<SolrInputDocument> documents = ur.getDocuments();\n+                    if (documents == null) {\n+                        String actionName = \"DELETE_BY_IDS\";\n+\n+                        List<String> deleteBy = ur.getDeleteById();\n+                        if (deleteBy == null) {\n+                            actionName = \"DELETE_BY_QUERY\";\n+                            deleteBy = ur.getDeleteQuery();\n+                        }\n+                        if (deleteBy == null) {\n+                            deleteBy = new ArrayList<String>();\n+                        }\n+                        String operator = getOperatorNameWithAction(collection, request.getPath(), actionName);\n+                        span = getSpan(operator, instance.getRemotePeer());\n+                        if (Config.Plugin.SolrJ.TRACE_STATEMENT) {\n+                            span.tag(Tags.DB_STATEMENT, deleteBy.toString());\n+                        }\n+                    } else {\n+                        String operator = getOperatorNameWithAction(collection, request.getPath(), \"ADD\");\n+                        span = getSpan(operator, instance.getRemotePeer());\n+                        if (Config.Plugin.SolrJ.TRACE_STATEMENT) {\n+                            span.tag(SolrjTags.TAG_DOCS_SIZE, String.valueOf(documents.size()));\n+                        }\n+                    }\n+                    if (Config.Plugin.SolrJ.TRACE_OPS_PARAMS) {\n+                        span.tag(SolrjTags.TAG_COMMIT_WITHIN, String.valueOf(ur.getCommitWithin()));\n+                    }\n+                } else {\n+                    getSpan(getOperatorName(collection, request.getPath()), instance.getRemotePeer());\n+                }\n+            } else {\n+                String operator = getOperatorNameWithAction(collection, request.getPath(), action.name());\n+                AbstractSpan span = getSpan(operator, instance.getRemotePeer());\n+\n+                if (Config.Plugin.SolrJ.TRACE_OPS_PARAMS) {\n+                    if (action == AbstractUpdateRequest.ACTION.COMMIT) {\n+                        span.tag(SolrjTags.TAG_SOFT_COMMIT, params.get(UpdateParams.SOFT_COMMIT, \"\"));\n+                    } else {\n+                        span.tag(SolrjTags.TAG_MAX_OPTIMIZE_SEGMENTS, params.get(UpdateParams.MAX_OPTIMIZE_SEGMENTS, \"1\"));\n+                    }\n+                }\n+            }\n+        } else if (request instanceof QueryRequest) {\n+            AbstractSpan span = getSpan(getOperatorName(collection, request.getPath()), instance.getRemotePeer());\n+\n+            span.tag(SolrjTags.TAG_START, params.get(CommonParams.START, \"0\"));\n+            span.tag(SolrjTags.TAG_QT, params.get(CommonParams.QT, request.getPath()));\n+\n+            if (Config.Plugin.SolrJ.TRACE_STATEMENT) {\n+                span.tag(Tags.DB_STATEMENT, toQueryString(params));\n+            }\n+        } else {\n+            getSpan(getOperatorName(collection, request.getPath()), instance.getRemotePeer());\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                              Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        if (!ContextManager.isActive()) {\n+            return ret;\n+        }\n+\n+        AbstractSpan span = ContextManager.activeSpan();\n+        if (ret != null) {\n+            NamedList<Object> result = (NamedList<Object>) ret;\n+            NamedList<Object> header = (NamedList<Object>) result.get(\"responseHeader\");\n+\n+            if (header != null) {\n+                span.tag(SolrjTags.TAG_Q_TIME, String.valueOf(header.get(\"QTime\")));\n+            }\n+            SolrDocumentList list = (SolrDocumentList) result.get(\"response\");\n+            if (list != null) {\n+                span.tag(SolrjTags.TAG_NUM_FOUND, String.valueOf(list.getNumFound()));\n+            }\n+        }\n+\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        if (ContextManager.isActive()) {\n+            AbstractSpan span = ContextManager.activeSpan();\n+            int code = 500;\n+            if (t instanceof SolrException) {\n+                code = ((SolrException) t).code();\n+            }\n+            span.tag(SolrjTags.TAG_STATUS, String.valueOf(code));\n+            span.errorOccurred().log(t);\n+        }\n+    }\n+\n+    private static final AbstractSpan getSpan(String operatorName, String remotePeer) {\n+        return ContextManager.createExitSpan(operatorName, remotePeer)\n+                .setComponent(ComponentsDefine.SOLRJ)\n+                .setLayer(SpanLayer.DB)\n+                .tag(Tags.DB_TYPE, DB_TYPE);\n+    }\n+\n+    private static final String getOperatorNameWithAction(String collection, String path, String action) {\n+        return String.format(\"solrJ/%s%s/%s\", collection, path, action);\n+    }\n+\n+    private static final String getOperatorName(String collection, String path) {\n+        return String.format(\"solrJ/%s%s\", collection, path);\n+    }\n+\n+    private static final String getCollection(SolrjInstance instance, Object argument) {\n+        if (null == argument) {\n+            return instance.getCollection();\n+        }\n+        return String.valueOf(argument);\n+    }\n+\n+    private static final SolrParams getParams(SolrParams params) {\n+        if (params == null) {\n+            return new ModifiableSolrParams();\n+        }\n+        return params;\n+    }\n+\n+    private static final String toQueryString(SolrParams params) {\n+        final StringBuilder sb = new StringBuilder(128);\n+        boolean first = true;\n+        for (final Iterator<String> it = params.getParameterNamesIterator(); it.hasNext();) {\n+            final String name = it.next();\n+            for (String val : params.getParams(name)) {\n+                sb.append(first ? '?' : '&').append(name).append('=').append(val);\n+                first = false;\n+            }\n+        }\n+        return sb.toString();\n+    }\n+}",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/SolrClientInterceptor.java",
                "sha": "5c4d69a22bfb76f6959c32b835cb196aec69a605",
                "status": "added"
            },
            {
                "additions": 59,
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/SolrConnectorInterceptor.java",
                "changes": 59,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/SolrConnectorInterceptor.java?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "deletions": 0,
                "filename": "apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/SolrConnectorInterceptor.java",
                "patch": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.plugin.solrj;\n+\n+import org.apache.http.client.methods.HttpUriRequest;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+public class SolrConnectorInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        HttpUriRequest request = (HttpUriRequest) allArguments[0];\n+\n+        ContextCarrier carrier = new ContextCarrier();\n+        ContextManager.inject(carrier);\n+\n+        CarrierItem items = carrier.items();\n+        while (items.hasNext()) {\n+            items = items.next();\n+            request.setHeader(items.getHeadKey(), items.getHeadValue());\n+        }\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                              Object ret) throws Throwable {\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        if (ContextManager.isActive()) {\n+            ContextManager.activeSpan().errorOccurred().log(t);\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/SolrConnectorInterceptor.java",
                "sha": "d6c00b5662656fb4ae5fc6a987828569fa638f7e",
                "status": "added"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/commons/SolrjInstance.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/commons/SolrjInstance.java?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "deletions": 0,
                "filename": "apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/commons/SolrjInstance.java",
                "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.plugin.solrj.commons;\n+\n+public class SolrjInstance {\n+    private String collection = \"Unknown\";\n+    private String remotePeer = \"Unknown\";\n+\n+    public String getCollection() {\n+        return collection;\n+    }\n+\n+    public void setCollection(String collection) {\n+        this.collection = collection;\n+    }\n+\n+    public String getRemotePeer() {\n+        return remotePeer;\n+    }\n+\n+    public void setRemotePeer(String remotePeer) {\n+        this.remotePeer = remotePeer;\n+    }\n+}",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/commons/SolrjInstance.java",
                "sha": "91e4cfb362f065c5bf644cd7dd44f9bffa8c2571",
                "status": "added"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/commons/SolrjTags.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/commons/SolrjTags.java?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "deletions": 0,
                "filename": "apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/commons/SolrjTags.java",
                "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.plugin.solrj.commons;\n+\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+\n+public class SolrjTags {\n+    public static StringTag TAG_QT = new StringTag(\"qt\");\n+    public static StringTag TAG_COLLECTION = new StringTag(\"collection\");\n+\n+    public static StringTag TAG_Q_TIME = new StringTag(\"QTime\");\n+    public static StringTag TAG_STATUS = new StringTag(\"status\");\n+\n+    public static StringTag TAG_START = new StringTag(\"start\");\n+    public static StringTag TAG_SORT_BY = new StringTag(\"sort\");\n+    public static StringTag TAG_NUM_FOUND = new StringTag(\"numFound\");\n+\n+    public static StringTag TAG_SOFT_COMMIT = new StringTag(\"softCommit\");\n+    public static StringTag TAG_COMMIT_WITHIN = new StringTag(\"commitWithin\");\n+    public static StringTag TAG_MAX_OPTIMIZE_SEGMENTS = new StringTag(\"maxOptimizeSegs\");\n+\n+    public static StringTag TAG_DOCS_SIZE = new StringTag(\"docsSize\");\n+    public static StringTag TAG_DELETE_VALUE = new StringTag(\"delete.by\");\n+}",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/commons/SolrjTags.java",
                "sha": "3040b850b5291ec1384c65711c2fa3a20aceaa0b",
                "status": "added"
            },
            {
                "additions": 64,
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/define/HttpClientInstrumentation.java",
                "changes": 64,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/define/HttpClientInstrumentation.java?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "deletions": 0,
                "filename": "apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/define/HttpClientInstrumentation.java",
                "patch": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.plugin.solrj.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.http.client.methods.HttpUriRequest;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;\n+\n+public class HttpClientInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+    private static String ENHANCE_CLASS = \"org.apache.http.impl.client.CloseableHttpClient\";\n+\n+    @Override\n+    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[]{};\n+    }\n+\n+    @Override\n+    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n+        return new InstanceMethodsInterceptPoint[]{\n+            new InstanceMethodsInterceptPoint() {\n+                @Override\n+                public boolean isOverrideArgs() {\n+                    return false;\n+                }\n+\n+                @Override\n+                public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return ElementMatchers.named(\"execute\").and(ElementMatchers.takesArgument(0, HttpUriRequest.class));\n+                }\n+\n+                @Override\n+                public String getMethodsInterceptor() {\n+                    return \"org.apache.skywalking.apm.plugin.solrj.SolrConnectorInterceptor\";\n+                }\n+            }\n+        };\n+    }\n+\n+    @Override\n+    protected ClassMatch enhanceClass() {\n+        return NameMatch.byName(ENHANCE_CLASS);\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/define/HttpClientInstrumentation.java",
                "sha": "56e752b07282d5bedee2f6cdfc3707961f37c3f7",
                "status": "added"
            },
            {
                "additions": 75,
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/define/SolrClientInstrumentation.java",
                "changes": 75,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/define/SolrClientInstrumentation.java?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "deletions": 0,
                "filename": "apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/define/SolrClientInstrumentation.java",
                "patch": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.plugin.solrj.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;\n+\n+public class SolrClientInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+\n+    @Override\n+    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[]{\n+            new ConstructorInterceptPoint() {\n+\n+                @Override\n+                public String getConstructorInterceptor() {\n+                    return \"org.apache.skywalking.apm.plugin.solrj.SolrClientInterceptor\";\n+                }\n+\n+                @Override\n+                public ElementMatcher<MethodDescription> getConstructorMatcher() {\n+                    return ElementMatchers.any();\n+                }\n+            }\n+        };\n+    }\n+\n+    @Override\n+    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n+        return new InstanceMethodsInterceptPoint[]{\n+            new InstanceMethodsInterceptPoint() {\n+                @Override\n+                public boolean isOverrideArgs() {\n+                    return false;\n+                }\n+\n+                @Override\n+                public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return ElementMatchers.named(\"request\").and(ElementMatchers.takesArguments(3));\n+                }\n+\n+                @Override\n+                public String getMethodsInterceptor() {\n+                    return \"org.apache.skywalking.apm.plugin.solrj.SolrClientInterceptor\";\n+                }\n+            }\n+        };\n+    }\n+\n+    @Override\n+    protected ClassMatch enhanceClass() {\n+        return NameMatch.byName(\"org.apache.solr.client.solrj.impl.HttpSolrClient\");\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/define/SolrClientInstrumentation.java",
                "sha": "75f3a2e27b83c72e301c29dae91ddf8e5717527c",
                "status": "added"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/resources/skywalking-plugin.def",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/resources/skywalking-plugin.def?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "deletions": 0,
                "filename": "apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/resources/skywalking-plugin.def",
                "patch": "@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+solrj-7.x=org.apache.skywalking.apm.plugin.solrj.define.SolrClientInstrumentation\n+solrj-7.x=org.apache.skywalking.apm.plugin.solrj.define.HttpClientInstrumentation\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/resources/skywalking-plugin.def",
                "sha": "fd2fd6cd0b67f5f4a98a1bde79440ecd817569f3",
                "status": "added"
            },
            {
                "additions": 428,
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/solrj/SolrClientInterceptorTest.java",
                "changes": 428,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/solrj/SolrClientInterceptorTest.java?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "deletions": 0,
                "filename": "apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/solrj/SolrClientInterceptorTest.java",
                "patch": "@@ -0,0 +1,428 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.solrj;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.test.helper.SegmentHelper;\n+import org.apache.skywalking.apm.agent.test.tools.*;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.solrj.commons.SolrjInstance;\n+import org.apache.solr.client.solrj.ResponseParser;\n+import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.client.solrj.impl.HttpSolrClient;\n+import org.apache.solr.client.solrj.request.AbstractUpdateRequest;\n+import org.apache.solr.client.solrj.request.QueryRequest;\n+import org.apache.solr.client.solrj.request.UpdateRequest;\n+import org.apache.solr.common.*;\n+import org.apache.solr.common.params.ModifiableSolrParams;\n+import org.apache.solr.common.util.NamedList;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.modules.junit4.PowerMockRunnerDelegate;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(PowerMockRunner.class)\n+@PowerMockRunnerDelegate(TracingSegmentRunner.class)\n+public class SolrClientInterceptorTest {\n+    SolrClientInterceptor interceptor = new SolrClientInterceptor();\n+\n+    @SegmentStoragePoint\n+    private SegmentStorage segmentStorage;\n+\n+    @Rule\n+    public AgentServiceRule serviceRule = new AgentServiceRule();\n+\n+    @Mock\n+    private HttpSolrClient client;\n+\n+    @Mock\n+    private Method method;\n+\n+    @Mock\n+    private EnhancedInstance enhancedInstance;\n+\n+    private Object[] arguments = null;\n+    private Class[] argumentType = new Class[] {\n+        SolrRequest.class,\n+        ResponseParser.class,\n+        String.class\n+    };\n+    private String collection = null;\n+    private HttpSolrClient.Builder builder;\n+\n+    @Mock\n+    private SolrjInstance instance;\n+    private NamedList<Object> header;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        builder = new HttpSolrClient.Builder().withBaseSolrUrl(\"http://solr-server:8983/solr/collection\");\n+        enhancedInstance = new EnhanceHttpSolrClient(builder);\n+\n+        when(instance.getCollection()).thenReturn(\"collection\");\n+        when(instance.getRemotePeer()).thenReturn(\"solr-server:8983\");\n+        enhancedInstance.setSkyWalkingDynamicField(instance);\n+\n+        header = new NamedList<Object>();\n+        header.add(\"status\", 0);\n+        header.add(\"QTime\", 5);\n+\n+//        Config.Plugin.SolrJ.TRACE_STATEMENT = true;\n+//        Config.Plugin.SolrJ.TRACE_OPS_PARAMS = true;\n+    }\n+\n+\n+    @Test\n+    public void testConstructor() throws Throwable {\n+        arguments = new Object[] {builder};\n+        interceptor.onConstruct(enhancedInstance, arguments);\n+        SolrjInstance instance = (SolrjInstance) enhancedInstance.getSkyWalkingDynamicField();\n+        Assert.assertEquals(instance.getRemotePeer(), \"solr-server:8983\");\n+        Assert.assertEquals(instance.getCollection(), \"collection\");\n+    }\n+\n+\n+    @Test\n+    public void testUpdateWithAdd() throws Throwable {\n+        UpdateRequest request = new UpdateRequest();\n+        List<SolrInputDocument> docs = Lists.newArrayList();\n+        for (int start = 0; start < 100; start++) {\n+            SolrInputDocument doc = new SolrInputDocument();\n+            doc.addField(\"id\", start);\n+            docs.add(doc);\n+        }\n+        arguments = new Object[] {\n+            request.add(docs),\n+            null,\n+            collection\n+        };\n+        interceptor.beforeMethod(enhancedInstance, method, arguments, argumentType, null);\n+        interceptor.afterMethod(enhancedInstance, method, arguments, argumentType, getResponse());\n+\n+        List<TraceSegment> segments = segmentStorage.getTraceSegments();\n+        Assert.assertEquals(segments.size(), 1);\n+\n+        List<AbstractTracingSpan> spans = SegmentHelper.getSpans(segments.get(0));\n+        Assert.assertEquals(spans.size(), 1);\n+\n+        AbstractTracingSpan span = spans.get(0);\n+        int pox = 0;\n+        if (Config.Plugin.SolrJ.TRACE_STATEMENT) {\n+            SpanAssert.assertTag(span, ++pox, \"100\");\n+        }\n+        if (Config.Plugin.SolrJ.TRACE_OPS_PARAMS) {\n+            SpanAssert.assertTag(span, ++pox, \"-1\");\n+        }\n+        spanCommonAssert(span, pox,\"solrJ/collection/update/ADD\");\n+    }\n+\n+    @Test\n+    public void testUpdateWithCommit() throws Throwable {\n+        final boolean softCommit = false;\n+        AbstractUpdateRequest request = (new UpdateRequest()).setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true, false);\n+        arguments = new Object[]{\n+            request,\n+            null,\n+            collection\n+        };\n+        interceptor.beforeMethod(enhancedInstance, method, arguments, argumentType, null);\n+        interceptor.afterMethod(enhancedInstance, method, arguments, argumentType, getResponse());\n+\n+        List<TraceSegment> segments = segmentStorage.getTraceSegments();\n+        Assert.assertEquals(segments.size(), 1);\n+\n+        List<AbstractTracingSpan> spans = SegmentHelper.getSpans(segments.get(0));\n+        Assert.assertEquals(spans.size(), 1);\n+\n+        int start = 0;\n+        AbstractTracingSpan span = spans.get(0);\n+        if (Config.Plugin.SolrJ.TRACE_OPS_PARAMS) {\n+            SpanAssert.assertTag(span, ++start, String.valueOf(softCommit));\n+        }\n+        spanCommonAssert(span, start, \"solrJ/collection/update/COMMIT\");\n+    }\n+\n+    @Test\n+    public void testUpdateWithOptimize() throws Throwable {\n+        final int maxSegments = 1;\n+        AbstractUpdateRequest request = (new UpdateRequest()).setAction(AbstractUpdateRequest.ACTION.OPTIMIZE, false, true, maxSegments);\n+        arguments = new Object[]{\n+            request,\n+            null,\n+            collection\n+        };\n+        interceptor.beforeMethod(enhancedInstance, method, arguments, argumentType, null);\n+        interceptor.afterMethod(enhancedInstance, method, arguments, argumentType, getResponse());\n+\n+        List<TraceSegment> segments = segmentStorage.getTraceSegments();\n+        List<AbstractTracingSpan> spans = SegmentHelper.getSpans(segments.get(0));\n+\n+        Assert.assertEquals(segments.size(), 1);\n+        Assert.assertEquals(spans.size(), 1);\n+\n+        AbstractTracingSpan span = spans.get(0);\n+        int start = 0;\n+        if (Config.Plugin.SolrJ.TRACE_OPS_PARAMS) {\n+            SpanAssert.assertTag(span, ++start, String.valueOf(maxSegments));\n+        }\n+        spanCommonAssert(span, start, \"solrJ/collection/update/OPTIMIZE\");\n+    }\n+\n+    @Test\n+    public void testQuery() throws Throwable {\n+        QueryRequest request = new QueryRequest();\n+        arguments = new Object[] {\n+            request,\n+            null,\n+            collection\n+        };\n+\n+        interceptor.beforeMethod(enhancedInstance, method, arguments, argumentType, null);\n+        interceptor.afterMethod(enhancedInstance, method, arguments, argumentType, getQueryResponse());\n+\n+        List<TraceSegment> segments = segmentStorage.getTraceSegments();\n+        List<AbstractTracingSpan> spans = SegmentHelper.getSpans(segments.get(0));\n+\n+        Assert.assertEquals(segments.size(), 1);\n+        Assert.assertEquals(spans.size(), 1);\n+\n+        AbstractTracingSpan span = spans.get(0);\n+        querySpanAssert(span, \"/select\", 100, \"solrJ/collection/select\");\n+    }\n+\n+    @Test\n+    public void testGet() throws Throwable {\n+        ModifiableSolrParams reqParams = new ModifiableSolrParams();\n+        if (StringUtils.isEmpty(reqParams.get(\"qt\"))) {\n+            reqParams.set(\"qt\", new String[]{\"/get\"});\n+        }\n+        reqParams.set(\"ids\", new String[] {\"99\", \"98\"});\n+        QueryRequest request = new QueryRequest(reqParams);\n+\n+        arguments = new Object[] {\n+            request,\n+            null,\n+            collection\n+        };\n+        interceptor.beforeMethod(enhancedInstance, method, arguments, argumentType, null);\n+        interceptor.afterMethod(enhancedInstance, method, arguments, argumentType, getGetResponse());\n+\n+        List<TraceSegment> segments = segmentStorage.getTraceSegments();\n+        List<AbstractTracingSpan> spans = SegmentHelper.getSpans(segments.get(0));\n+        Assert.assertEquals(segments.size(), 1);\n+        Assert.assertEquals(spans.size(), 1);\n+\n+        AbstractTracingSpan span = spans.get(0);\n+        querySpanAssert(span, \"/get\", 1, \"solrJ/collection/get\");\n+    }\n+\n+    @Test\n+    public void testDeleteById() throws Throwable {\n+        UpdateRequest request = new UpdateRequest();\n+        arguments = new Object[] {\n+            request.deleteById(\"12\"),\n+            null,\n+            collection\n+        };\n+        interceptor.beforeMethod(enhancedInstance, method, arguments, argumentType, null);\n+        interceptor.afterMethod(enhancedInstance, method, arguments, argumentType, getResponse());\n+\n+        List<TraceSegment> segments = segmentStorage.getTraceSegments();\n+        List<AbstractTracingSpan> spans = SegmentHelper.getSpans(segments.get(0));\n+\n+        Assert.assertEquals(segments.size(), 1);\n+        Assert.assertEquals(spans.size(), 1);\n+\n+        AbstractTracingSpan span = spans.get(0);\n+        spanDeleteAssert(span, \"solrJ/collection/update/DELETE_BY_IDS\", \"[12]\");\n+    }\n+\n+    @Test\n+    public void testDeleteByQuery() throws Throwable {\n+        UpdateRequest request = new UpdateRequest();\n+        arguments = new Object[] {\n+            request.deleteByQuery(\"id:[2 TO 5]\"),\n+            null,\n+            collection\n+        };\n+        interceptor.beforeMethod(enhancedInstance, method, arguments, argumentType, null);\n+        interceptor.afterMethod(enhancedInstance, method, arguments, argumentType, getResponse());\n+\n+        List<TraceSegment> segments = segmentStorage.getTraceSegments();\n+        List<AbstractTracingSpan> spans = SegmentHelper.getSpans(segments.get(0));\n+\n+        Assert.assertEquals(segments.size(), 1);\n+        Assert.assertEquals(spans.size(), 1);\n+\n+        AbstractTracingSpan span = spans.get(0);\n+        spanDeleteAssert(span, \"solrJ/collection/update/DELETE_BY_QUERY\", \"[id:[2 TO 5]]\");\n+    }\n+\n+    @Test\n+    public void testException() throws Throwable {\n+        QueryRequest request = new QueryRequest();\n+        arguments = new Object[] {\n+            request,\n+            null,\n+            collection\n+        };\n+        NamedList<Object> response = new NamedList<Object>();\n+        NamedList<Object> header = new NamedList<Object>();\n+        header.add(\"status\", 500);\n+        header.add(\"QTime\", 5);\n+        response.add(\"responseHeader\", header);\n+\n+        interceptor.beforeMethod(enhancedInstance, method, arguments, argumentType, null);\n+        interceptor.handleMethodException(enhancedInstance, method, arguments, argumentType,\n+                new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"for test\",  new Exception()));\n+        interceptor.afterMethod(enhancedInstance, method, arguments, argumentType, response);\n+\n+        List<TraceSegment> segments = segmentStorage.getTraceSegments();\n+        List<AbstractTracingSpan> spans = SegmentHelper.getSpans(segments.get(0));\n+\n+        Assert.assertEquals(segments.size(), 1);\n+        Assert.assertEquals(spans.size(), 1);\n+\n+        AbstractTracingSpan span = spans.get(0);\n+        SpanAssert.assertOccurException(span, true);\n+    }\n+\n+\n+\n+    private void querySpanAssert(AbstractSpan span, String qt, int numFound, String operationName) {\n+        Assert.assertEquals(span.getOperationName(), operationName);\n+        SpanAssert.assertTag(span, 0, \"Solr\");\n+        SpanAssert.assertTag(span, 1, \"0\");\n+        SpanAssert.assertTag(span, 2, qt);\n+\n+        int start = 3;\n+        if (Config.Plugin.SolrJ.TRACE_STATEMENT) {\n+            start++;\n+        }\n+        SpanAssert.assertTag(span, start++, \"5\");\n+        SpanAssert.assertTag(span, start++, String.valueOf(numFound));\n+    }\n+\n+    private void spanCommonAssert(AbstractSpan span, int start, String operationName) {\n+        SpanAssert.assertComponent(span, ComponentsDefine.SOLRJ);\n+        SpanAssert.assertOccurException(span, false);\n+        SpanAssert.assertLogSize(span, 0);\n+        SpanAssert.assertLayer(span, SpanLayer.DB);\n+\n+        SpanAssert.assertTag(span, 0, \"Solr\");\n+        SpanAssert.assertTag(span, start + 1, \"5\");\n+\n+        Assert.assertEquals(span.getOperationName(), operationName);\n+    }\n+\n+    private void spanDeleteAssert(AbstractSpan span, String operationName, String statement) {\n+        Assert.assertEquals(span.getOperationName(), operationName);\n+        SpanAssert.assertComponent(span, ComponentsDefine.SOLRJ);\n+        SpanAssert.assertOccurException(span, false);\n+        SpanAssert.assertLogSize(span, 0);\n+        SpanAssert.assertLayer(span, SpanLayer.DB);\n+\n+        SpanAssert.assertTag(span, 0, \"Solr\");\n+\n+        int start = 0;\n+        if (Config.Plugin.SolrJ.TRACE_STATEMENT) {\n+            SpanAssert.assertTag(span, ++start, statement);\n+        }\n+        if (Config.Plugin.SolrJ.TRACE_OPS_PARAMS) {\n+            SpanAssert.assertTag(span, ++start, \"-1\");\n+        }\n+\n+        SpanAssert.assertTag(span, start + 1, \"5\");\n+    }\n+\n+    private NamedList<Object> getResponse() {\n+        NamedList<Object> response = new NamedList<Object>();\n+        response.add(\"responseHeader\", header);\n+        return response;\n+    }\n+\n+    private NamedList<Object> getQueryResponse() {\n+        NamedList<Object> response = new NamedList<Object>();\n+        response.add(\"responseHeader\", header);\n+        SolrDocumentList list = new SolrDocumentList();\n+        list.setStart(0);\n+        list.setNumFound(100);\n+        list.setMaxScore(.0f);\n+\n+        for (int start = 0; start < 10; start++) {\n+            SolrDocument doc = new SolrDocument();\n+            doc.addField(\"id\", start);\n+            doc.addField(\"_version\", 1634676349644832768L);\n+            list.add(doc);\n+        }\n+        response.add(\"response\", list);\n+        return response;\n+    }\n+\n+    private NamedList<Object> getGetResponse() {\n+        NamedList<Object> response = new NamedList<Object>();\n+        response.add(\"responseHeader\", header);\n+        SolrDocumentList list = new SolrDocumentList();\n+        list.setStart(0);\n+        list.setNumFound(1);\n+        list.setMaxScore(.0f);\n+\n+        SolrDocument doc = new SolrDocument();\n+        doc.addField(\"id\", 1);\n+        doc.addField(\"_version\", 1634676349644832768L);\n+        list.add(doc);\n+\n+        response.add(\"response\", list);\n+        return response;\n+    }\n+\n+    class EnhanceHttpSolrClient extends HttpSolrClient implements EnhancedInstance {\n+        Object value = null;\n+\n+        protected EnhanceHttpSolrClient(Builder builder) {\n+            super(builder);\n+        }\n+\n+        @Override\n+        public Object getSkyWalkingDynamicField() {\n+            return value;\n+        }\n+\n+        @Override\n+        public void setSkyWalkingDynamicField(Object value) {\n+            this.value = value;\n+        }\n+    }\n+\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/solrj/SolrClientInterceptorTest.java",
                "sha": "c7311a8c6b884617add3cca28f1aac104c4df0c6",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/docs/en/setup/service-agent/java-agent/README.md",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/docs/en/setup/service-agent/java-agent/README.md?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "deletions": 0,
                "filename": "docs/en/setup/service-agent/java-agent/README.md",
                "patch": "@@ -82,6 +82,8 @@ property key | Description | Default |\n `plugin.elasticsearch.trace_dsl`|If true, trace all the DSL(Domain Specific Language) in ElasticSearch access, default is false.|`false`|\n `plugin.springmvc.use_qualified_name_as_endpoint_name`|If true, the fully qualified method name will be used as the endpoint name instead of the request URL, default is false.|`false`|\n `plugin.toolit.use_qualified_name_as_operation_name`|If true, the fully qualified method name will be used as the operation name instead of the given operation name, default is false.|`false`|\n+`plugin.solrj.trace_statement`|If true, trace all the query parameters(include deleteByIds and deleteByQuery) in Solr query request, default is false.|`false`|\n+`plugin.solrj.trace_ops_params`|If true, trace all the operation parameters in Solr request, default is false.|`false`|\n \n ## Optional Plugins\n Java agent plugins are all pluggable. Optional plugins could be provided in `optional-plugins` folder under agent or 3rd party repositores.",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/docs/en/setup/service-agent/java-agent/README.md",
                "sha": "9b727d5d2a2492be7b2aef047c2280c40f9b2d76",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/docs/en/setup/service-agent/java-agent/Supported-list.md",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/docs/en/setup/service-agent/java-agent/Supported-list.md?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "deletions": 0,
                "filename": "docs/en/setup/service-agent/java-agent/Supported-list.md",
                "patch": "@@ -53,6 +53,7 @@\n     * [Xmemcached](https://github.com/killme2008/xmemcached) 2.x\n   * [Elasticsearch](https://github.com/elastic/elasticsearch)\n     * [transport-client](https://github.com/elastic/elasticsearch/tree/master/client/transport) 5.2.x-5.6.x\n+  * [SolrJ](https://lucene.apache.org/solr) 7.0.0-7.7.1\n * Service Discovery\n   * [Netflix Eureka](https://github.com/Netflix/eureka)\n * Distributed Coordination",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/docs/en/setup/service-agent/java-agent/Supported-list.md",
                "sha": "dcfda3d8ca733087b8130aa1da3e844249107483",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/oap-server/server-core/src/test/resources/component-libraries.yml",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-core/src/test/resources/component-libraries.yml?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "deletions": 0,
                "filename": "oap-server/server-core/src/test/resources/component-libraries.yml",
                "patch": "@@ -198,6 +198,12 @@ spring-cloud-gateway:\n RESTEasy:\n   id: 62\n   languages: Java\n+SolrJ:\n+  id: 63\n+  languages: Java\n+Solr:\n+  id: 64\n+  languages: Java\n \n # .NET/.NET Core components\n # [3000, 4000) for C#/.NET only\n@@ -295,3 +301,4 @@ Component-Server-Mappings:\n   Pomelo.EntityFrameworkCore.MySql: Mysql\n   Npgsql.EntityFrameworkCore.PostgreSQL: PostgreSQL\n   transport-client: Elasticsearch\n+  SolrJ: Solr",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/oap-server/server-core/src/test/resources/component-libraries.yml",
                "sha": "86d29e5206138a66ebb5f043bc7f194cb58e4b9a",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/skywalking/blob/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/oap-server/server-starter/src/main/resources/component-libraries.yml",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server/server-starter/src/main/resources/component-libraries.yml?ref=6ae517423ce4ea3bbd523f80f56c685b9f8fc60e",
                "deletions": 0,
                "filename": "oap-server/server-starter/src/main/resources/component-libraries.yml",
                "patch": "@@ -216,6 +216,12 @@ spring-cloud-gateway:\n RESTEasy:\n   id: 62\n   languages: Java\n+SolrJ:\n+  id: 63\n+  languages: Java\n+Solr:\n+  id: 64\n+  languages: Java\n \n # .NET/.NET Core components\n # [3000, 4000) for C#/.NET only\n@@ -315,3 +321,4 @@ Component-Server-Mappings:\n   Pomelo.EntityFrameworkCore.MySql: Mysql\n   Npgsql.EntityFrameworkCore.PostgreSQL: PostgreSQL\n   transport-client: Elasticsearch\n+  SolrJ: Solr",
                "raw_url": "https://github.com/apache/skywalking/raw/6ae517423ce4ea3bbd523f80f56c685b9f8fc60e/oap-server/server-starter/src/main/resources/component-libraries.yml",
                "sha": "87e213f1ad7e3894ff977d85a338c37d4132a91e",
                "status": "modified"
            }
        ],
        "message": "Provide plugin for Solr-7.x(client) (#2730)\n\n* new branch for solrj-plugin\r\n\r\n* rollback and add module solrj-plugin\r\n\r\n* preparing to pr\r\n\r\n* to resolve reviewers' suggestions\r\n\r\n* remove unused code\r\n\r\n* remove unused code\r\n\r\n* remove unused comments\r\n\r\n* To avoid NPE\r\n\r\n* fix typo\r\n\r\n* Change to JRE6\r\n\r\n* fix pom.xml merge incorrectly. and java.net.URL instead of Regex\r\n\r\n* Using RuntimeContext instead of ThreadLocal\r\n\r\n* To reduce unnecessary tags\r\n\r\n* add test cases\r\n\r\n* fix validation fail\r\n\r\n* add solrj-plugin into component-libraries & Supported-list\r\n\r\n* to trace all patch to avoid recheck status of span\r\n\r\n* remove unnecessary properites\r\n\r\n* remove unnecessary tags\r\n\r\n* Add the config to document of setup",
        "parent": "https://github.com/apache/skywalking/commit/3217ff1444a922a9f57fde64e5d73bbd8fcefe5c",
        "repo": "skywalking",
        "unit_tests": [
            "SolrClientInterceptorTest.java"
        ]
    },
    "skywalking_6b99abf": {
        "bug_id": "skywalking_6b99abf",
        "commit": "https://github.com/apache/skywalking/commit/6b99abffff801cc7bfd6ce32919329b1acb0bd8a",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/skywalking/blob/6b99abffff801cc7bfd6ce32919329b1acb0bd8a/apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java?ref=6b99abffff801cc7bfd6ce32919329b1acb0bd8a",
                "deletions": 23,
                "filename": "apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java",
                "patch": "@@ -18,23 +18,14 @@\n \n package org.apache.skywalking.apm.plugin.httpClient.v4;\n \n-import org.apache.http.HttpHost;\n-import org.apache.http.HttpRequest;\n-import org.apache.http.HttpResponse;\n-import org.apache.http.StatusLine;\n-import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n-import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n-import org.apache.skywalking.apm.agent.core.context.ContextManager;\n-import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n-import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n-import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n-import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n-\n import java.lang.reflect.Method;\n import java.net.URL;\n+import org.apache.http.*;\n+import org.apache.skywalking.apm.agent.core.context.*;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.*;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.*;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n \n public class HttpClientExecuteInterceptor implements InstanceMethodsAroundInterceptor {\n \n@@ -73,16 +64,19 @@\n             return ret;\n         }\n \n-        HttpResponse response = (HttpResponse)ret;\n-        StatusLine responseStatusLine = response.getStatusLine();\n-        if (responseStatusLine != null) {\n-            int statusCode = responseStatusLine.getStatusCode();\n-            AbstractSpan span = ContextManager.activeSpan();\n-            if (statusCode >= 400) {\n-                span.errorOccurred();\n-                Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+        if (ret != null) {\n+            HttpResponse response = (HttpResponse)ret;\n+            StatusLine responseStatusLine = response.getStatusLine();\n+            if (responseStatusLine != null) {\n+                int statusCode = responseStatusLine.getStatusCode();\n+                AbstractSpan span = ContextManager.activeSpan();\n+                if (statusCode >= 400) {\n+                    span.errorOccurred();\n+                    Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+                }\n             }\n         }\n+        \n         ContextManager.stopSpan();\n         return ret;\n     }",
                "raw_url": "https://github.com/apache/skywalking/raw/6b99abffff801cc7bfd6ce32919329b1acb0bd8a/apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java",
                "sha": "5d2cf2908385e48480b964e87fc337008267d810",
                "status": "modified"
            }
        ],
        "message": "[Agent] Apache http client plugin bug (#1448) (#1452)\n\n* #1447\r\n\r\nFixed the after method interceptor for the apache http client NPE error when the response is null cause by the doExecute method throw a exception.",
        "parent": "https://github.com/apache/skywalking/commit/86bb1c05e420b8e11ab137775fc0a0f0790cb28e",
        "repo": "skywalking",
        "unit_tests": [
            "HttpClientExecuteInterceptorTest.java"
        ]
    },
    "skywalking_7c2aa4c": {
        "bug_id": "skywalking_7c2aa4c",
        "commit": "https://github.com/apache/skywalking/commit/7c2aa4c43a01964dd4d15a55c281ce720e0e4af0",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/skywalking/blob/7c2aa4c43a01964dd4d15a55c281ce720e0e4af0/apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java?ref=7c2aa4c43a01964dd4d15a55c281ce720e0e4af0",
                "deletions": 1,
                "filename": "apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java",
                "patch": "@@ -37,7 +37,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         if (ContextManager.isActive()) {\n             AbstractSpan abstractTracingSpan = ContextManager.activeSpan();\n             Map<String, String> eventMap = new HashMap<String, String>();\n-            eventMap.put(\"forward-url\", (String)objInst.getSkyWalkingDynamicField());\n+            eventMap.put(\"forward-url\", objInst.getSkyWalkingDynamicField() == null ? \"\" : String.valueOf(objInst.getSkyWalkingDynamicField()));\n             abstractTracingSpan.log(System.currentTimeMillis(), eventMap);\n             ContextManager.getRuntimeContext().put(Constants.FORWARD_REQUEST_FLAG, true);\n         }",
                "raw_url": "https://github.com/apache/skywalking/raw/7c2aa4c43a01964dd4d15a55c281ce720e0e4af0/apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java",
                "sha": "68416c7ed6734fe6e043c098f205dadf306571d5",
                "status": "modified"
            }
        ],
        "message": "FIX NPE in tomcat plugin ForwardInterceptor (#1562)",
        "parent": "https://github.com/apache/skywalking/commit/03af5f1806d6a9d7052a8836d07b2135277bc2d5",
        "repo": "skywalking",
        "unit_tests": [
            "ForwardInterceptorTest.java"
        ]
    },
    "skywalking_a5d2610": {
        "bug_id": "skywalking_a5d2610",
        "commit": "https://github.com/apache/skywalking/commit/a5d261039278019b6d288d72a760ba3beda7444a",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/skywalking/blob/a5d261039278019b6d288d72a760ba3beda7444a/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java?ref=a5d261039278019b6d288d72a760ba3beda7444a",
                "deletions": 13,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java",
                "patch": "@@ -15,17 +15,15 @@\n  * limitations under the License.\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.patch;\n \n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n-\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n \n /**\n  * {@link AopExpressionMatchInterceptor} check if the method is match the enhanced method\n@@ -42,30 +40,33 @@ public AopExpressionMatchInterceptor() {\n     }\n \n     @Override\n-    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, MethodInterceptResult result) {\n+    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        MethodInterceptResult result) {\n \n     }\n \n     @Override\n-    public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Object ret) {\n-        Method targetAopMethod = (Method) allArguments[1];\n-        Class<?> targetAopClass = (Class<?>) allArguments[2];\n-        if (EnhancedInstance.class.isAssignableFrom(targetAopClass) && isEnhancedMethod(targetAopMethod)) {\n+    public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        Object ret) {\n+        Method targetAopMethod = (Method)allArguments[1];\n+        Class<?> targetAopClass = (Class<?>)allArguments[2];\n+        if (targetAopClass != null && EnhancedInstance.class.isAssignableFrom(targetAopClass) && isEnhancedMethod(targetAopMethod)) {\n             return false;\n         }\n         return ret;\n     }\n \n     @Override\n-    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Throwable t) {\n+    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        Throwable t) {\n \n     }\n \n     private boolean isEnhancedMethod(Method targetMethod) {\n         for (Method method : methods) {\n             if (method.getName().equals(targetMethod.getName())\n-                    && method.getReturnType().equals(targetMethod.getReturnType())\n-                    && equalParamTypes(method.getParameterTypes(), targetMethod.getParameterTypes())) {\n+                && method.getReturnType().equals(targetMethod.getReturnType())\n+                && equalParamTypes(method.getParameterTypes(), targetMethod.getParameterTypes())) {\n                 return true;\n             }\n         }",
                "raw_url": "https://github.com/apache/skywalking/raw/a5d261039278019b6d288d72a760ba3beda7444a/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java",
                "sha": "5c99a886904ef3eae8d455c155c42390186dc71a",
                "status": "modified"
            }
        ],
        "message": "Fix #1488: Fix NPE when the targetAop class is null (#1507)",
        "parent": "https://github.com/apache/skywalking/commit/eed6fa18c88ad14277d17149fea92946e9cb1b40",
        "repo": "skywalking",
        "unit_tests": [
            "AopExpressionMatchInterceptorTest.java"
        ]
    },
    "skywalking_a835fe4": {
        "bug_id": "skywalking_a835fe4",
        "commit": "https://github.com/apache/skywalking/commit/a835fe4ec5d41266e90ff6159d48da8d84715773",
        "file": [
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/Constants.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/Constants.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "deletions": 0,
                "filename": "apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/Constants.java",
                "patch": "@@ -0,0 +1,24 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.hystrix.v1;\n+\n+public class Constants {\n+\n+    public static final String ISOLATE_STRATEGY_KEY_IN_RUNNING_CONTEXT = \"ISOLATE_STRATEGY\";\n+}",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/Constants.java",
                "sha": "97c204c92b87a113a29f5717891483cd7f8de850",
                "status": "added"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/HystrixCommandRunInterceptor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/HystrixCommandRunInterceptor.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "deletions": 0,
                "filename": "apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/HystrixCommandRunInterceptor.java",
                "patch": "@@ -18,6 +18,7 @@\n \n package org.apache.skywalking.apm.plugin.hystrix.v1;\n \n+import com.netflix.hystrix.HystrixCommand;\n import java.lang.reflect.Method;\n import org.apache.skywalking.apm.agent.core.context.ContextManager;\n import org.apache.skywalking.apm.agent.core.context.ContextSnapshot;\n@@ -27,6 +28,8 @@\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n \n+import static org.apache.skywalking.apm.plugin.hystrix.v1.Constants.ISOLATE_STRATEGY_KEY_IN_RUNNING_CONTEXT;\n+\n public class HystrixCommandRunInterceptor implements InstanceMethodsAroundInterceptor {\n     @Override\n     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n@@ -41,6 +44,8 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         ContextManager.continued(snapshot);\n         // Because of `fall back` method running in other thread. so we need capture concurrent span for tracing.\n         enhanceRequireObjectCache.setContextSnapshot(ContextManager.capture());\n+\n+        ContextManager.getRuntimeContext().put(ISOLATE_STRATEGY_KEY_IN_RUNNING_CONTEXT, ((HystrixCommand)objInst).getProperties().executionIsolationStrategy().get().name().toUpperCase());\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/HystrixCommandRunInterceptor.java",
                "sha": "c6f1bcc97e713fe33cc35cadc61b645436424435",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/HandlerMethodInvokerInterceptor.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/HandlerMethodInvokerInterceptor.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "deletions": 3,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/HandlerMethodInvokerInterceptor.java",
                "patch": "@@ -16,16 +16,17 @@\n  *\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.mvc.v3;\n \n import java.lang.reflect.Method;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n-import org.apache.skywalking.apm.plugin.spring.mvc.commons.EnhanceRequireObjectCache;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n import org.springframework.web.context.request.NativeWebRequest;\n \n+import static org.apache.skywalking.apm.plugin.spring.mvc.commons.Constants.RESPONSE_KEY_IN_RUNTIME_CONTEXT;\n+\n /**\n  * {@link HandlerMethodInvokerInterceptor} pass the {@link NativeWebRequest} object into the {@link\n  * org.springframework.stereotype.Controller} object.\n@@ -38,7 +39,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         MethodInterceptResult result) throws Throwable {\n         Object handler = allArguments[1];\n         if (handler instanceof EnhancedInstance) {\n-            ((EnhanceRequireObjectCache)((EnhancedInstance)handler).getSkyWalkingDynamicField()).setNativeWebRequest((NativeWebRequest)allArguments[2]);\n+            ContextManager.getRuntimeContext().put(RESPONSE_KEY_IN_RUNTIME_CONTEXT, ((NativeWebRequest)allArguments[2]).getNativeResponse());\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/HandlerMethodInvokerInterceptor.java",
                "sha": "19f2f6e784a79d127a17c5c99d79540c98f6626d",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/AbstractSpring3Instrumentation.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/AbstractSpring3Instrumentation.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "deletions": 1,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/AbstractSpring3Instrumentation.java",
                "patch": "@@ -16,7 +16,6 @@\n  *\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.mvc.v3.define;\n \n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/AbstractSpring3Instrumentation.java",
                "sha": "e534a6e0ef4ee5d2562ad7bc93584949d0212dbc",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/ControllerInstrumentation.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/ControllerInstrumentation.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "deletions": 1,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/ControllerInstrumentation.java",
                "patch": "@@ -21,9 +21,9 @@\n \n import net.bytebuddy.description.method.MethodDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n import org.apache.skywalking.apm.agent.core.plugin.match.ClassAnnotationMatch;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n \n import static net.bytebuddy.matcher.ElementMatchers.any;",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/ControllerInstrumentation.java",
                "sha": "dd24d03e6a9ac771c58e5364be25434a21a3bf6d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/InvocableHandlerInstrumentation.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/InvocableHandlerInstrumentation.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "deletions": 2,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/InvocableHandlerInstrumentation.java",
                "patch": "@@ -16,13 +16,12 @@\n  *\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.mvc.v3.define;\n \n import net.bytebuddy.description.method.MethodDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n \n import static net.bytebuddy.matcher.ElementMatchers.named;",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/InvocableHandlerInstrumentation.java",
                "sha": "88f7cc6fad0a26123b97f5984d11c49596f3837e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/GetBeanInterceptorTest.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/GetBeanInterceptorTest.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "deletions": 10,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/GetBeanInterceptorTest.java",
                "patch": "@@ -16,18 +16,17 @@\n  *\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.mvc.v3;\n \n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n import org.apache.skywalking.apm.plugin.spring.mvc.commons.EnhanceRequireObjectCache;\n+import org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.GetBeanInterceptor;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.Matchers;\n import org.mockito.Mock;\n import org.mockito.runners.MockitoJUnitRunner;\n-import org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.GetBeanInterceptor;\n import org.springframework.web.context.request.NativeWebRequest;\n \n import static org.mockito.Mockito.times;\n@@ -62,12 +61,4 @@ public void testResultIsNotEnhanceInstance() throws Throwable {\n \n         verify(enhanceRet, times(0)).setSkyWalkingDynamicField(Matchers.any());\n     }\n-\n-    @Test\n-    public void testResultIsEnhanceInstance() throws Throwable {\n-        interceptor.afterMethod(enhancedInstance, null, null, null, enhanceRet);\n-\n-        verify(enhanceRet, times(0)).setSkyWalkingDynamicField(Matchers.any());\n-    }\n-\n }",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/GetBeanInterceptorTest.java",
                "sha": "b4ec3f59284ed9822590b8de07d76604add78d6f",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/skywalking/blob/29f6f6e50ecc01b4f04241742c1961e8527badf2/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/InvokeForRequestInterceptorTest.java",
                "changes": 59,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/InvokeForRequestInterceptorTest.java?ref=29f6f6e50ecc01b4f04241742c1961e8527badf2",
                "deletions": 59,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/InvokeForRequestInterceptorTest.java",
                "patch": "@@ -1,59 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-\n-package org.apache.skywalking.apm.plugin.spring.mvc.v3;\n-\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n-import org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.InvokeForRequestInterceptor;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Matchers;\n-import org.mockito.Mock;\n-import org.mockito.runners.MockitoJUnitRunner;\n-import org.springframework.web.context.request.NativeWebRequest;\n-\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-\n-@RunWith(MockitoJUnitRunner.class)\n-public class InvokeForRequestInterceptorTest {\n-    private InvokeForRequestInterceptor interceptor;\n-\n-    @Mock\n-    private EnhancedInstance enhancedInstance;\n-\n-    @Mock\n-    private NativeWebRequest nativeWebRequest;\n-\n-    private Object argument[];\n-\n-    @Before\n-    public void setUp() {\n-        interceptor = new InvokeForRequestInterceptor();\n-        argument = new Object[] {nativeWebRequest};\n-    }\n-\n-    @Test\n-    public void testPassNativeWebRequest() throws Throwable {\n-        interceptor.beforeMethod(enhancedInstance, null, argument, new Class[] {NativeWebRequest.class}, null);\n-\n-        verify(enhancedInstance, times(1)).setSkyWalkingDynamicField(Matchers.any());\n-    }\n-}",
                "raw_url": "https://github.com/apache/skywalking/raw/29f6f6e50ecc01b4f04241742c1961e8527badf2/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/InvokeForRequestInterceptorTest.java",
                "sha": "3760e1dca5a19a21c4fa36f5192a0badd4178179",
                "status": "removed"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/define/AbstractControllerInstrumentation.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/define/AbstractControllerInstrumentation.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "deletions": 2,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/define/AbstractControllerInstrumentation.java",
                "patch": "@@ -16,16 +16,15 @@\n  *\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.mvc.v4.define;\n \n import net.bytebuddy.description.method.MethodDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n import org.apache.skywalking.apm.agent.core.plugin.match.ClassAnnotationMatch;\n import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n import org.apache.skywalking.apm.plugin.spring.mvc.commons.Constants;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n \n import static net.bytebuddy.matcher.ElementMatchers.any;\n import static net.bytebuddy.matcher.ElementMatchers.isAnnotatedWith;",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/define/AbstractControllerInstrumentation.java",
                "sha": "225b657bbf256c55bf7616d9a690e2a408c24c34",
                "status": "modified"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RequestMappingMethodInterceptorTest.java",
                "changes": 67,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RequestMappingMethodInterceptorTest.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "deletions": 30,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RequestMappingMethodInterceptorTest.java",
                "patch": "@@ -16,48 +16,47 @@\n  *\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.mvc.v4;\n \n import java.lang.reflect.Method;\n import java.util.List;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.LogDataEntity;\n import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;\n+import org.apache.skywalking.apm.agent.core.context.trace.TraceSegmentRef;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n import org.apache.skywalking.apm.agent.test.helper.SegmentHelper;\n+import org.apache.skywalking.apm.agent.test.helper.SegmentRefHelper;\n import org.apache.skywalking.apm.agent.test.helper.SpanHelper;\n+import org.apache.skywalking.apm.agent.test.tools.AgentServiceRule;\n import org.apache.skywalking.apm.agent.test.tools.SegmentStorage;\n import org.apache.skywalking.apm.agent.test.tools.SegmentStoragePoint;\n import org.apache.skywalking.apm.agent.test.tools.SpanAssert;\n+import org.apache.skywalking.apm.agent.test.tools.TracingSegmentRunner;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n import org.apache.skywalking.apm.plugin.spring.mvc.commons.EnhanceRequireObjectCache;\n import org.apache.skywalking.apm.plugin.spring.mvc.commons.PathMappingCache;\n+import org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.RequestMappingMethodInterceptor;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.Mock;\n import org.powermock.modules.junit4.PowerMockRunner;\n import org.powermock.modules.junit4.PowerMockRunnerDelegate;\n-import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n-import org.apache.skywalking.apm.agent.core.context.trace.LogDataEntity;\n-import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;\n-import org.apache.skywalking.apm.agent.core.context.trace.TraceSegmentRef;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n-import org.apache.skywalking.apm.agent.test.helper.SegmentRefHelper;\n-import org.apache.skywalking.apm.agent.test.tools.AgentServiceRule;\n-import org.apache.skywalking.apm.agent.test.tools.TracingSegmentRunner;\n-import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n-import org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.RequestMappingMethodInterceptor;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.context.request.NativeWebRequest;\n import org.springframework.web.context.request.RequestContextHolder;\n import org.springframework.web.context.request.ServletRequestAttributes;\n \n+import static org.apache.skywalking.apm.agent.test.tools.SpanAssert.assertComponent;\n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.mockito.Mockito.when;\n-import static org.apache.skywalking.apm.agent.test.tools.SpanAssert.assertComponent;\n \n @RunWith(PowerMockRunner.class)\n @PowerMockRunnerDelegate(TracingSegmentRunner.class)\n@@ -103,7 +102,6 @@ public void setUp() throws Exception {\n         when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n         when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/testRequestURL\"));\n         when(response.getStatus()).thenReturn(200);\n-        when(nativeWebRequest.getNativeResponse()).thenReturn(response);\n \n         arguments = new Object[] {request, response};\n         argumentType = new Class[] {request.getClass(), response.getClass()};\n@@ -112,31 +110,39 @@ public void setUp() throws Exception {\n \n     @Test\n     public void testWithoutSerializedContextData() throws Throwable {\n-        controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n-        RequestMappingClass1 mappingClass1 = new RequestMappingClass1();\n-        Method m = mappingClass1.getClass().getMethod(\"testRequestURL\");\n-        RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n-\n-        interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n-        interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+        SpringTestCaseHelper.createCaseHandler(request, response, new SpringTestCaseHelper.CaseHandler() {\n+            @Override\n+            public void handleCase() throws Throwable {\n+                controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n+                RequestMappingClass1 mappingClass1 = new RequestMappingClass1();\n+                Method m = mappingClass1.getClass().getMethod(\"testRequestURL\");\n+                RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n+\n+                interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n+                interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+            }\n+        });\n \n         assertThat(segmentStorage.getTraceSegments().size(), is(1));\n         TraceSegment traceSegment = segmentStorage.getTraceSegments().get(0);\n         List<AbstractTracingSpan> spans = SegmentHelper.getSpans(traceSegment);\n-\n         assertHttpSpan(spans.get(0));\n     }\n \n     @Test\n     public void testWithOccurException() throws Throwable {\n-        controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n-        RequestMappingClass1 mappingClass1 = new RequestMappingClass1();\n-        Method m = mappingClass1.getClass().getMethod(\"testRequestURL\");\n-        RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n-\n-        interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n-        interceptor.handleMethodException(enhancedInstance, m, arguments, argumentType, new RuntimeException());\n-        interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+        SpringTestCaseHelper.createCaseHandler(request, response, new SpringTestCaseHelper.CaseHandler() {\n+            @Override public void handleCase() throws Throwable {\n+                controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n+                RequestMappingClass1 mappingClass1 = new RequestMappingClass1();\n+                Method m = mappingClass1.getClass().getMethod(\"testRequestURL\");\n+                RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n+\n+                interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n+                interceptor.handleMethodException(enhancedInstance, m, arguments, argumentType, new RuntimeException());\n+                interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+            }\n+        });\n \n         assertThat(segmentStorage.getTraceSegments().size(), is(1));\n         TraceSegment traceSegment = segmentStorage.getTraceSegments().get(0);\n@@ -168,8 +174,9 @@ private void assertHttpSpan(AbstractTracingSpan span) {\n \n         @Override\n         public Object getSkyWalkingDynamicField() {\n+\n             value.setPathMappingCache(new PathMappingCache(\"/test\"));\n-            value.setNativeWebRequest(nativeWebRequest);\n+\n             return value;\n         }\n ",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RequestMappingMethodInterceptorTest.java",
                "sha": "bedbae744ac7b28bf39041c5c8843421760cb4cc",
                "status": "modified"
            },
            {
                "additions": 103,
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RestMappingMethodInterceptorTest.java",
                "changes": 176,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RestMappingMethodInterceptorTest.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "deletions": 73,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RestMappingMethodInterceptorTest.java",
                "patch": "@@ -16,7 +16,6 @@\n  *\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.mvc.v4;\n \n import java.lang.reflect.Method;\n@@ -112,16 +111,20 @@ public void setUp() throws Exception {\n \n     @Test\n     public void testGetMapping() throws Throwable {\n-        controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n-        RestMappingClass1 mappingClass1 = new RestMappingClass1();\n-        Method m = mappingClass1.getClass().getMethod(\"getRequestURL\");\n-        when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n-        when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/getRequestURL\"));\n-        ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n-        RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n-\n-        interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n-        interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+        SpringTestCaseHelper.createCaseHandler(request, response, new SpringTestCaseHelper.CaseHandler() {\n+            @Override public void handleCase() throws Throwable {\n+                controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n+                RestMappingClass1 mappingClass1 = new RestMappingClass1();\n+                Method m = mappingClass1.getClass().getMethod(\"getRequestURL\");\n+                when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n+                when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/getRequestURL\"));\n+                ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n+                RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n+\n+                interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n+                interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+            }\n+        });\n \n         assertThat(segmentStorage.getTraceSegments().size(), is(1));\n         TraceSegment traceSegment = segmentStorage.getTraceSegments().get(0);\n@@ -132,16 +135,21 @@ public void testGetMapping() throws Throwable {\n \n     @Test\n     public void testPostMapping() throws Throwable {\n-        controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n-        RestMappingClass1 mappingClass1 = new RestMappingClass1();\n-        Method m = mappingClass1.getClass().getMethod(\"postRequestURL\");\n-        when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n-        when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/postRequestURL\"));\n-        ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n-        RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n-\n-        interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n-        interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+        SpringTestCaseHelper.createCaseHandler(request, response, new SpringTestCaseHelper.CaseHandler() {\n+            @Override public void handleCase() throws Throwable {\n+                controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n+                RestMappingClass1 mappingClass1 = new RestMappingClass1();\n+                Method m = mappingClass1.getClass().getMethod(\"postRequestURL\");\n+                when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n+                when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/postRequestURL\"));\n+                ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n+                RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n+\n+                interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n+                interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+\n+            }\n+        });\n \n         assertThat(segmentStorage.getTraceSegments().size(), is(1));\n         TraceSegment traceSegment = segmentStorage.getTraceSegments().get(0);\n@@ -152,16 +160,21 @@ public void testPostMapping() throws Throwable {\n \n     @Test\n     public void testPutMapping() throws Throwable {\n-        controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n-        RestMappingClass1 mappingClass1 = new RestMappingClass1();\n-        Method m = mappingClass1.getClass().getMethod(\"putRequestURL\");\n-        when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n-        when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/putRequestURL\"));\n-        ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n-        RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n-\n-        interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n-        interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+        SpringTestCaseHelper.createCaseHandler(request, response, new SpringTestCaseHelper.CaseHandler() {\n+            @Override public void handleCase() throws Throwable {\n+                controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n+                RestMappingClass1 mappingClass1 = new RestMappingClass1();\n+                Method m = mappingClass1.getClass().getMethod(\"putRequestURL\");\n+                when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n+                when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/putRequestURL\"));\n+                ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n+                RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n+\n+                interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n+                interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+\n+            }\n+        });\n \n         assertThat(segmentStorage.getTraceSegments().size(), is(1));\n         TraceSegment traceSegment = segmentStorage.getTraceSegments().get(0);\n@@ -172,16 +185,21 @@ public void testPutMapping() throws Throwable {\n \n     @Test\n     public void testDeleteMapping() throws Throwable {\n-        controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n-        RestMappingClass1 mappingClass1 = new RestMappingClass1();\n-        Method m = mappingClass1.getClass().getMethod(\"deleteRequestURL\");\n-        when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n-        when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/deleteRequestURL\"));\n-        ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n-        RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n-\n-        interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n-        interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+        SpringTestCaseHelper.createCaseHandler(request, response, new SpringTestCaseHelper.CaseHandler() {\n+            @Override public void handleCase() throws Throwable {\n+                controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n+                RestMappingClass1 mappingClass1 = new RestMappingClass1();\n+                Method m = mappingClass1.getClass().getMethod(\"deleteRequestURL\");\n+                when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n+                when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/deleteRequestURL\"));\n+                ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n+                RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n+\n+                interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n+                interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+\n+            }\n+        });\n \n         assertThat(segmentStorage.getTraceSegments().size(), is(1));\n         TraceSegment traceSegment = segmentStorage.getTraceSegments().get(0);\n@@ -192,16 +210,20 @@ public void testDeleteMapping() throws Throwable {\n \n     @Test\n     public void testPatchMapping() throws Throwable {\n-        controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n-        RestMappingClass1 mappingClass1 = new RestMappingClass1();\n-        Method m = mappingClass1.getClass().getMethod(\"patchRequestURL\");\n-        when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n-        when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/patchRequestURL\"));\n-        ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n-        RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n-\n-        interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n-        interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+        SpringTestCaseHelper.createCaseHandler(request, response, new SpringTestCaseHelper.CaseHandler() {\n+            @Override public void handleCase() throws Throwable {\n+                controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n+                RestMappingClass1 mappingClass1 = new RestMappingClass1();\n+                Method m = mappingClass1.getClass().getMethod(\"patchRequestURL\");\n+                when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n+                when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/patchRequestURL\"));\n+                ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n+                RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n+\n+                interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n+                interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+            }\n+        });\n \n         assertThat(segmentStorage.getTraceSegments().size(), is(1));\n         TraceSegment traceSegment = segmentStorage.getTraceSegments().get(0);\n@@ -212,16 +234,21 @@ public void testPatchMapping() throws Throwable {\n \n     @Test\n     public void testDummy() throws Throwable {\n-        controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n-        RestMappingClass1 mappingClass1 = new RestMappingClass1();\n-        Method m = mappingClass1.getClass().getMethod(\"dummy\");\n-        when(request.getRequestURI()).thenReturn(\"/test\");\n-        when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test\"));\n-        ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n-        RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n-\n-        interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n-        interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+        SpringTestCaseHelper.createCaseHandler(request, response, new SpringTestCaseHelper.CaseHandler() {\n+            @Override public void handleCase() throws Throwable {\n+                controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n+                RestMappingClass1 mappingClass1 = new RestMappingClass1();\n+                Method m = mappingClass1.getClass().getMethod(\"dummy\");\n+                when(request.getRequestURI()).thenReturn(\"/test\");\n+                when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test\"));\n+                ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n+                RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n+\n+                interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n+                interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+\n+            }\n+        });\n \n         assertThat(segmentStorage.getTraceSegments().size(), is(1));\n         TraceSegment traceSegment = segmentStorage.getTraceSegments().get(0);\n@@ -232,17 +259,21 @@ public void testDummy() throws Throwable {\n \n     @Test\n     public void testWithOccurException() throws Throwable {\n-        controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n-        RestMappingClass1 mappingClass1 = new RestMappingClass1();\n-        Method m = mappingClass1.getClass().getMethod(\"getRequestURL\");\n-        when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n-        when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/getRequestURL\"));\n-        ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n-        RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n-\n-        interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n-        interceptor.handleMethodException(enhancedInstance, m, arguments, argumentType, new RuntimeException());\n-        interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+        SpringTestCaseHelper.createCaseHandler(request, response, new SpringTestCaseHelper.CaseHandler() {\n+            @Override public void handleCase() throws Throwable {\n+                controllerConstructorInterceptor.onConstruct(enhancedInstance, null);\n+                RestMappingClass1 mappingClass1 = new RestMappingClass1();\n+                Method m = mappingClass1.getClass().getMethod(\"getRequestURL\");\n+                when(request.getRequestURI()).thenReturn(\"/test/testRequestURL\");\n+                when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://localhost:8080/test/getRequestURL\"));\n+                ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request, response);\n+                RequestContextHolder.setRequestAttributes(servletRequestAttributes);\n+\n+                interceptor.beforeMethod(enhancedInstance, m, arguments, argumentType, methodInterceptResult);\n+                interceptor.handleMethodException(enhancedInstance, m, arguments, argumentType, new RuntimeException());\n+                interceptor.afterMethod(enhancedInstance, m, arguments, argumentType, null);\n+            }\n+        });\n \n         assertThat(segmentStorage.getTraceSegments().size(), is(1));\n         TraceSegment traceSegment = segmentStorage.getTraceSegments().get(0);\n@@ -275,7 +306,6 @@ private void assertHttpSpan(AbstractTracingSpan span, String suffix) {\n         @Override\n         public Object getSkyWalkingDynamicField() {\n             value.setPathMappingCache(new PathMappingCache(\"/test\"));\n-            value.setNativeWebRequest(nativeWebRequest);\n             return value;\n         }\n ",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RestMappingMethodInterceptorTest.java",
                "sha": "ccff690c5aac442bb254f3af8a7c3ed89ef95df9",
                "status": "modified"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/SpringTestCaseHelper.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/SpringTestCaseHelper.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "deletions": 0,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/SpringTestCaseHelper.java",
                "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.spring.mvc.v4;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.plugin.spring.mvc.commons.Constants;\n+\n+public final class SpringTestCaseHelper {\n+\n+    public final static void createCaseHandler(HttpServletRequest request, HttpServletResponse response,\n+        CaseHandler a) throws Throwable {\n+        ContextManager.createLocalSpan(\"For-Test\");\n+        ContextManager.getRuntimeContext().put(Constants.REQUEST_KEY_IN_RUNTIME_CONTEXT, request);\n+        ContextManager.getRuntimeContext().put(Constants.RESPONSE_KEY_IN_RUNTIME_CONTEXT, response);\n+        a.handleCase();\n+        ContextManager.stopSpan();\n+    }\n+\n+    public interface CaseHandler {\n+        void handleCase() throws Throwable;\n+    }\n+}",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/SpringTestCaseHelper.java",
                "sha": "34b257aebae094eb394ca880debf30c8aad953bd",
                "status": "added"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/Constants.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/Constants.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "deletions": 1,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/Constants.java",
                "patch": "@@ -16,7 +16,6 @@\n  *\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.mvc.commons;\n \n /**\n@@ -32,4 +31,12 @@\n     public static final String REQUEST_MAPPING_METHOD_INTERCEPTOR = \"org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.RequestMappingMethodInterceptor\";\n \n     public static final String REST_MAPPING_METHOD_INTERCEPTOR = \"org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.RestMappingMethodInterceptor\";\n+\n+    public static final String HYSTRIX_COMMAND_ANNOTATION = \"com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand\";\n+\n+    public static final String REQUEST_KEY_IN_RUNTIME_CONTEXT = \"SW_REQUEST\";\n+\n+    public static final String RESPONSE_KEY_IN_RUNTIME_CONTEXT = \"SW_RESPONSE\";\n+\n+    public static final String ISOLATE_STRATEGY_KEY_IN_RUNNING_CONTEXT = \"ISOLATE_STRATEGY\";\n }",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/Constants.java",
                "sha": "ca42b3ee89898e948910f13e4ea3a48dd14b767d",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/EnhanceRequireObjectCache.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/EnhanceRequireObjectCache.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "deletions": 23,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/EnhanceRequireObjectCache.java",
                "patch": "@@ -18,28 +18,15 @@\n \n package org.apache.skywalking.apm.plugin.spring.mvc.commons;\n \n-import org.springframework.web.context.request.NativeWebRequest;\n-\n-import javax.servlet.http.HttpServletResponse;\n import java.lang.reflect.Method;\n \n public class EnhanceRequireObjectCache {\n     private PathMappingCache pathMappingCache;\n-    private ThreadLocal<NativeWebRequest> nativeWebRequest = new ThreadLocal<NativeWebRequest>();\n-    private ThreadLocal<HttpServletResponse> httpResponse = new ThreadLocal<HttpServletResponse>();\n \n     public void setPathMappingCache(PathMappingCache pathMappingCache) {\n         this.pathMappingCache = pathMappingCache;\n     }\n \n-    public HttpServletResponse getHttpServletResponse() {\n-        return httpResponse.get() == null ? (HttpServletResponse) nativeWebRequest.get().getNativeResponse() : httpResponse.get();\n-    }\n-\n-    public void setNativeWebRequest(NativeWebRequest nativeWebRequest) {\n-        this.nativeWebRequest.set(nativeWebRequest);\n-    }\n-\n     public String findPathMapping(Method method) {\n         return pathMappingCache.findPathMapping(method);\n     }\n@@ -51,14 +38,4 @@ public void addPathMapping(Method method, String url) {\n     public PathMappingCache getPathMappingCache() {\n         return pathMappingCache;\n     }\n-\n-    public void setHttpResponse(HttpServletResponse httpResponse) {\n-        this.httpResponse.set(httpResponse);\n-    }\n-\n-    public void clearRequestAndResponse() {\n-        setNativeWebRequest(null);\n-        setHttpResponse(null);\n-    }\n-\n }",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/EnhanceRequireObjectCache.java",
                "sha": "8337591fbdaf520f3e8c472b62ede4ca6cee8192",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "deletions": 23,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java",
                "patch": "@@ -16,9 +16,11 @@\n  *\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor;\n \n+import java.lang.reflect.Method;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n import org.apache.skywalking.apm.agent.core.context.ContextManager;\n@@ -30,12 +32,10 @@\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n import org.apache.skywalking.apm.plugin.spring.mvc.commons.EnhanceRequireObjectCache;\n-import org.springframework.web.context.request.RequestContextHolder;\n-import org.springframework.web.context.request.ServletRequestAttributes;\n \n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import java.lang.reflect.Method;\n+import static org.apache.skywalking.apm.plugin.spring.mvc.commons.Constants.ISOLATE_STRATEGY_KEY_IN_RUNNING_CONTEXT;\n+import static org.apache.skywalking.apm.plugin.spring.mvc.commons.Constants.REQUEST_KEY_IN_RUNTIME_CONTEXT;\n+import static org.apache.skywalking.apm.plugin.spring.mvc.commons.Constants.RESPONSE_KEY_IN_RUNTIME_CONTEXT;\n \n /**\n  * the abstract method inteceptor\n@@ -54,38 +54,45 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n             requestURL = pathMappingCache.findPathMapping(method);\n         }\n \n-        HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();\n+        String hystrixIsolateStrategy = (String)ContextManager.getRuntimeContext().get(ISOLATE_STRATEGY_KEY_IN_RUNNING_CONTEXT);\n+        HttpServletRequest request = (HttpServletRequest)ContextManager.getRuntimeContext().get(REQUEST_KEY_IN_RUNTIME_CONTEXT);\n \n-        ContextCarrier contextCarrier = new ContextCarrier();\n-        CarrierItem next = contextCarrier.items();\n-        while (next.hasNext()) {\n-            next = next.next();\n-            next.setHeadValue(request.getHeader(next.getHeadKey()));\n-        }\n+        if (hystrixIsolateStrategy != null) {\n+            ContextManager.createLocalSpan(requestURL);\n+        } else if (request != null) {\n+            ContextCarrier contextCarrier = new ContextCarrier();\n+            CarrierItem next = contextCarrier.items();\n+            while (next.hasNext()) {\n+                next = next.next();\n+                next.setHeadValue(request.getHeader(next.getHeadKey()));\n+            }\n \n-        AbstractSpan span = ContextManager.createEntrySpan(requestURL, contextCarrier);\n-        Tags.URL.set(span, request.getRequestURL().toString());\n-        Tags.HTTP.METHOD.set(span, request.getMethod());\n-        span.setComponent(ComponentsDefine.SPRING_MVC_ANNOTATION);\n-        SpanLayer.asHttp(span);\n+            AbstractSpan span = ContextManager.createEntrySpan(requestURL, contextCarrier);\n+            Tags.URL.set(span, request.getRequestURL().toString());\n+            Tags.HTTP.METHOD.set(span, request.getMethod());\n+            span.setComponent(ComponentsDefine.SPRING_MVC_ANNOTATION);\n+            SpanLayer.asHttp(span);\n+        }\n     }\n \n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n-        try {\n-            HttpServletResponse response = ((EnhanceRequireObjectCache) objInst.getSkyWalkingDynamicField()).getHttpServletResponse();\n+        String hystrixIsolateStrategy = (String)ContextManager.getRuntimeContext().get(ISOLATE_STRATEGY_KEY_IN_RUNNING_CONTEXT);\n+        HttpServletResponse response = (HttpServletResponse)ContextManager.getRuntimeContext().get(RESPONSE_KEY_IN_RUNTIME_CONTEXT);\n \n+        if (hystrixIsolateStrategy != null) {\n+            ContextManager.stopSpan();\n+        } else if (response != null) {\n             AbstractSpan span = ContextManager.activeSpan();\n             if (response.getStatus() >= 400) {\n                 span.errorOccurred();\n                 Tags.STATUS_CODE.set(span, Integer.toString(response.getStatus()));\n             }\n             ContextManager.stopSpan();\n-            return ret;\n-        } finally {\n-            ((EnhanceRequireObjectCache)objInst.getSkyWalkingDynamicField()).clearRequestAndResponse();\n         }\n+\n+        return ret;\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java",
                "sha": "ded96e74579f9cf74edc66e0e111ba02db866bdf",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/GetBeanInterceptor.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/GetBeanInterceptor.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "deletions": 3,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/GetBeanInterceptor.java",
                "patch": "@@ -16,15 +16,18 @@\n  *\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor;\n \n import java.lang.reflect.Method;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n-import org.apache.skywalking.apm.plugin.spring.mvc.commons.EnhanceRequireObjectCache;\n import org.springframework.web.context.request.NativeWebRequest;\n+import org.springframework.web.context.request.RequestContextHolder;\n+import org.springframework.web.context.request.ServletRequestAttributes;\n+\n+import static org.apache.skywalking.apm.plugin.spring.mvc.commons.Constants.REQUEST_KEY_IN_RUNTIME_CONTEXT;\n \n /**\n  * {@link GetBeanInterceptor} pass the {@link NativeWebRequest} object into the {@link\n@@ -42,7 +45,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n         if (ret instanceof EnhancedInstance) {\n-            ((EnhanceRequireObjectCache)((EnhancedInstance)ret).getSkyWalkingDynamicField()).setNativeWebRequest((NativeWebRequest)objInst.getSkyWalkingDynamicField());\n+            ContextManager.getRuntimeContext().put(REQUEST_KEY_IN_RUNTIME_CONTEXT, ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest());\n         }\n         return ret;\n     }",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/GetBeanInterceptor.java",
                "sha": "613481fcde3c4d835a6e2b133b10ccdd0e289ebd",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/InvokeForRequestInterceptor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/InvokeForRequestInterceptor.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "deletions": 1,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/InvokeForRequestInterceptor.java",
                "patch": "@@ -19,13 +19,16 @@\n \n package org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor;\n \n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n import org.springframework.web.context.request.NativeWebRequest;\n \n import java.lang.reflect.Method;\n \n+import static org.apache.skywalking.apm.plugin.spring.mvc.commons.Constants.RESPONSE_KEY_IN_RUNTIME_CONTEXT;\n+\n /**\n  * {@link InvokeForRequestInterceptor} pass the {@link NativeWebRequest} object into the {@link\n  * org.springframework.stereotype.Controller} object.\n@@ -36,7 +39,7 @@\n     @Override\n     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         MethodInterceptResult result) throws Throwable {\n-        objInst.setSkyWalkingDynamicField(allArguments[0]);\n+        ContextManager.getRuntimeContext().put(RESPONSE_KEY_IN_RUNTIME_CONTEXT, ((NativeWebRequest)allArguments[0]).getNativeResponse());\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/InvokeForRequestInterceptor.java",
                "sha": "f1762a93483a5fa32cf5f2c46b6040d960756dd4",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/skywalking/blob/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/InvokeHandlerMethodInterceptor.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/InvokeHandlerMethodInterceptor.java?ref=a835fe4ec5d41266e90ff6159d48da8d84715773",
                "deletions": 4,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/InvokeHandlerMethodInterceptor.java",
                "patch": "@@ -18,20 +18,22 @@\n \n package org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor;\n \n+import java.lang.reflect.Method;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n-import org.apache.skywalking.apm.plugin.spring.mvc.commons.EnhanceRequireObjectCache;\n \n-import javax.servlet.http.HttpServletResponse;\n-import java.lang.reflect.Method;\n+import static org.apache.skywalking.apm.plugin.spring.mvc.commons.Constants.REQUEST_KEY_IN_RUNTIME_CONTEXT;\n+import static org.apache.skywalking.apm.plugin.spring.mvc.commons.Constants.RESPONSE_KEY_IN_RUNTIME_CONTEXT;\n \n public class InvokeHandlerMethodInterceptor implements InstanceMethodsAroundInterceptor {\n     @Override\n     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         MethodInterceptResult result) throws Throwable {\n         if (allArguments[2] instanceof EnhancedInstance) {\n-            ((EnhanceRequireObjectCache)((EnhancedInstance)allArguments[2]).getSkyWalkingDynamicField()).setHttpResponse((HttpServletResponse)allArguments[1]);\n+            ContextManager.getRuntimeContext().put(RESPONSE_KEY_IN_RUNTIME_CONTEXT, allArguments[1]);\n+            ContextManager.getRuntimeContext().put(REQUEST_KEY_IN_RUNTIME_CONTEXT, allArguments[0]);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/skywalking/raw/a835fe4ec5d41266e90ff6159d48da8d84715773/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/InvokeHandlerMethodInterceptor.java",
                "sha": "33fbec273f0cfa520b2970c62ed872ceb8579358",
                "status": "modified"
            }
        ],
        "message": "Fix occure the NPE when SpringMVC and hystrix work together (#1256)",
        "parent": "https://github.com/apache/skywalking/commit/29f6f6e50ecc01b4f04241742c1961e8527badf2",
        "repo": "skywalking",
        "unit_tests": [
            "ControllerInstrumentationTest.java",
            "GetBeanInterceptorTest.java"
        ]
    },
    "skywalking_b8206b8": {
        "bug_id": "skywalking_b8206b8",
        "commit": "https://github.com/apache/skywalking/commit/b8206b8cecd787891f1ace550ecd9550d7bec1bf",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/skywalking/blob/b8206b8cecd787891f1ace550ecd9550d7bec1bf/apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java?ref=b8206b8cecd787891f1ace550ecd9550d7bec1bf",
                "deletions": 23,
                "filename": "apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java",
                "patch": "@@ -18,23 +18,14 @@\n \n package org.apache.skywalking.apm.plugin.httpClient.v4;\n \n-import org.apache.http.HttpHost;\n-import org.apache.http.HttpRequest;\n-import org.apache.http.HttpResponse;\n-import org.apache.http.StatusLine;\n-import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n-import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n-import org.apache.skywalking.apm.agent.core.context.ContextManager;\n-import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n-import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n-import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n-import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n-\n import java.lang.reflect.Method;\n import java.net.URL;\n+import org.apache.http.*;\n+import org.apache.skywalking.apm.agent.core.context.*;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.*;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.*;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n \n public class HttpClientExecuteInterceptor implements InstanceMethodsAroundInterceptor {\n \n@@ -73,16 +64,19 @@\n             return ret;\n         }\n \n-        HttpResponse response = (HttpResponse)ret;\n-        StatusLine responseStatusLine = response.getStatusLine();\n-        if (responseStatusLine != null) {\n-            int statusCode = responseStatusLine.getStatusCode();\n-            AbstractSpan span = ContextManager.activeSpan();\n-            if (statusCode >= 400) {\n-                span.errorOccurred();\n-                Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+        if (ret != null) {\n+            HttpResponse response = (HttpResponse)ret;\n+            StatusLine responseStatusLine = response.getStatusLine();\n+            if (responseStatusLine != null) {\n+                int statusCode = responseStatusLine.getStatusCode();\n+                AbstractSpan span = ContextManager.activeSpan();\n+                if (statusCode >= 400) {\n+                    span.errorOccurred();\n+                    Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+                }\n             }\n         }\n+        \n         ContextManager.stopSpan();\n         return ret;\n     }",
                "raw_url": "https://github.com/apache/skywalking/raw/b8206b8cecd787891f1ace550ecd9550d7bec1bf/apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java",
                "sha": "5d2cf2908385e48480b964e87fc337008267d810",
                "status": "modified"
            }
        ],
        "message": "[Agent] Apache http client plugin bug (#1448)\n\n* #1447\r\n\r\nFixed the after method interceptor for the apache http client NPE error when the response is null cause by the doExecute method throw a exception.",
        "parent": "https://github.com/apache/skywalking/commit/5299a68e7c7e469b3cfe4d440228d351f12c3860",
        "repo": "skywalking",
        "unit_tests": [
            "HttpClientExecuteInterceptorTest.java"
        ]
    },
    "skywalking_d38b208": {
        "bug_id": "skywalking_d38b208",
        "commit": "https://github.com/apache/skywalking/commit/d38b208c9e8dfa6aa872ea51fe0de340d6d493af",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/skywalking/blob/d38b208c9e8dfa6aa872ea51fe0de340d6d493af/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java?ref=d38b208c9e8dfa6aa872ea51fe0de340d6d493af",
                "deletions": 1,
                "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java",
                "patch": "@@ -44,7 +44,8 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA\n         Object ret) throws Throwable {\n         AdvisedSupport advisedSupport = (AdvisedSupport)allArguments[0];\n \n-        if (EnhancedInstance.class.isAssignableFrom(advisedSupport.getTargetClass())) {\n+        Class targetClass = advisedSupport.getTargetClass();\n+        if (targetClass != null && EnhancedInstance.class.isAssignableFrom(targetClass)) {\n             return true;\n         }\n         return ret;",
                "raw_url": "https://github.com/apache/skywalking/raw/d38b208c9e8dfa6aa872ea51fe0de340d6d493af/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java",
                "sha": "a7300e4190d3a68a7e0dacc729031f171e309752",
                "status": "modified"
            }
        ],
        "message": "Fix #1454: fix NPE issue about spring apo interceptor (#1467)",
        "parent": "https://github.com/apache/skywalking/commit/48348efe74112c7daeb36984b4954de93e6f5e1e",
        "repo": "skywalking",
        "unit_tests": [
            "CreateAopProxyInterceptorTest.java"
        ]
    },
    "skywalking_d556404": {
        "bug_id": "skywalking_d556404",
        "commit": "https://github.com/apache/skywalking/commit/d55640454ee63b151272f043697f8779bb6cdd50",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/skywalking/blob/d55640454ee63b151272f043697f8779bb6cdd50/apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/okhttp/v3/RealCallInterceptor.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/okhttp/v3/RealCallInterceptor.java?ref=d55640454ee63b151272f043697f8779bb6cdd50",
                "deletions": 6,
                "filename": "apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/okhttp/v3/RealCallInterceptor.java",
                "patch": "@@ -100,12 +100,13 @@ public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments,\n         Class<?>[] argumentsTypes, Object ret) throws Throwable {\n         Response response = (Response)ret;\n-        int statusCode = response.code();\n-\n-        AbstractSpan span = ContextManager.activeSpan();\n-        if (statusCode >= 400) {\n-            span.errorOccurred();\n-            Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+        if (response != null) {\n+            int statusCode = response.code();\n+            AbstractSpan span = ContextManager.activeSpan();\n+            if (statusCode >= 400) {\n+                span.errorOccurred();\n+                Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+            }\n         }\n \n         ContextManager.stopSpan();",
                "raw_url": "https://github.com/apache/skywalking/raw/d55640454ee63b151272f043697f8779bb6cdd50/apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/okhttp/v3/RealCallInterceptor.java",
                "sha": "d9a9ae7abf8867788b105bbe7431a40b6e76648b",
                "status": "modified"
            }
        ],
        "message": "fix NPE when has connection exception (#1253)",
        "parent": "https://github.com/apache/skywalking/commit/e249e0607d461b609eb76be48c046d114b34bfd5",
        "repo": "skywalking",
        "unit_tests": [
            "RealCallInterceptorTest.java"
        ]
    },
    "skywalking_dd942d1": {
        "bug_id": "skywalking_dd942d1",
        "commit": "https://github.com/apache/skywalking/commit/dd942d15a30958483ccc939bf66b0121859cc243",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/skywalking/blob/dd942d15a30958483ccc939bf66b0121859cc243/apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java?ref=dd942d15a30958483ccc939bf66b0121859cc243",
                "deletions": 1,
                "filename": "apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java",
                "patch": "@@ -37,7 +37,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         if (ContextManager.isActive()) {\n             AbstractSpan abstractTracingSpan = ContextManager.activeSpan();\n             Map<String, String> eventMap = new HashMap<String, String>();\n-            eventMap.put(\"forward-url\", (String)objInst.getSkyWalkingDynamicField());\n+            eventMap.put(\"forward-url\", objInst.getSkyWalkingDynamicField() == null ? \"\" : String.valueOf(objInst.getSkyWalkingDynamicField()));\n             abstractTracingSpan.log(System.currentTimeMillis(), eventMap);\n             ContextManager.getRuntimeContext().put(Constants.FORWARD_REQUEST_FLAG, true);\n         }",
                "raw_url": "https://github.com/apache/skywalking/raw/dd942d15a30958483ccc939bf66b0121859cc243/apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java",
                "sha": "68416c7ed6734fe6e043c098f205dadf306571d5",
                "status": "modified"
            }
        ],
        "message": "FIX NPE in tomcat plugin ForwardInterceptor (#1562)",
        "parent": "https://github.com/apache/skywalking/commit/a29a8d7c09641b7c4e722d03c9816d15d68855c4",
        "repo": "skywalking",
        "unit_tests": [
            "ForwardInterceptorTest.java"
        ]
    },
    "skywalking_ea566b1": {
        "bug_id": "skywalking_ea566b1",
        "commit": "https://github.com/apache/skywalking/commit/ea566b19a501b44c29ca4083c28c560160ad86cf",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/skywalking/blob/ea566b19a501b44c29ca4083c28c560160ad86cf/apm-sniffer/apm-sdk-plugin/rabbitmq-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rabbitmq/RabbitMQConsumerInterceptor.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer/apm-sdk-plugin/rabbitmq-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rabbitmq/RabbitMQConsumerInterceptor.java?ref=ea566b19a501b44c29ca4083c28c560160ad86cf",
                "deletions": 1,
                "filename": "apm-sniffer/apm-sdk-plugin/rabbitmq-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rabbitmq/RabbitMQConsumerInterceptor.java",
                "patch": "@@ -51,7 +51,11 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         CarrierItem next = contextCarrier.items();\n         while (next.hasNext()) {\n             next = next.next();\n-            next.setHeadValue(properties.getHeaders().get(next.getHeadKey()).toString());\n+            if (properties.getHeaders() != null && properties.getHeaders().get(next.getHeadKey()) != null) {\n+                next.setHeadValue(properties.getHeaders().get(next.getHeadKey()).toString());\n+            } else {\n+                next.setHeadValue(\"\");\n+            }\n         }\n         ContextManager.extract(contextCarrier);\n ",
                "raw_url": "https://github.com/apache/skywalking/raw/ea566b19a501b44c29ca4083c28c560160ad86cf/apm-sniffer/apm-sdk-plugin/rabbitmq-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rabbitmq/RabbitMQConsumerInterceptor.java",
                "sha": "91be8bb7f08852b8ee636c739773db0ae01b72a6",
                "status": "modified"
            }
        ],
        "message": "Fix RabbitMq NPE case (#2450)\n\n* Fix npe",
        "parent": "https://github.com/apache/skywalking/commit/128a119077d74ad4481a942e3e3705d6043a429b",
        "repo": "skywalking",
        "unit_tests": [
            "RabbitMQConsumerInterceptorTest.java"
        ]
    }
}