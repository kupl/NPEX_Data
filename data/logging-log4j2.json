{
    "logging-log4j2_040e29e": {
        "bug_id": "logging-log4j2_040e29e",
        "commit": "https://github.com/apache/logging-log4j2/commit/040e29e209133efef788eb4132de30262d954ee4",
        "file": [
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/040e29e209133efef788eb4132de30262d954ee4/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java?ref=040e29e209133efef788eb4132de30262d954ee4",
                "deletions": 18,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java",
                "patch": "@@ -22,7 +22,6 @@\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n-import org.apache.logging.log4j.Logger;\n import org.apache.logging.log4j.core.AbstractLifeCycle;\n import org.apache.logging.log4j.core.LogEvent;\n import org.apache.logging.log4j.core.config.Configuration;\n@@ -32,7 +31,6 @@\n import org.apache.logging.log4j.core.config.plugins.PluginAttribute;\n import org.apache.logging.log4j.core.config.plugins.PluginConfiguration;\n import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n-import org.apache.logging.log4j.status.StatusLogger;\n \n /**\n  * Policy is purging appenders that were not in use specified time in minutes\n@@ -41,15 +39,16 @@\n @Scheduled\n public class IdlePurgePolicy extends AbstractLifeCycle implements PurgePolicy, Runnable {\n \n-    private static final Logger LOGGER = StatusLogger.getLogger();\n     private final long timeToLive;\n+    private final long checkInterval;    \n     private final ConcurrentMap<String, Long> appendersUsage = new ConcurrentHashMap<>();\n     private RoutingAppender routingAppender;\n     private final ConfigurationScheduler scheduler;\n     private volatile ScheduledFuture<?> future = null;\n \n-    public IdlePurgePolicy(final long timeToLive, final ConfigurationScheduler scheduler) {\n+    public IdlePurgePolicy(long timeToLive, long checkInterval, final ConfigurationScheduler scheduler) {\n         this.timeToLive = timeToLive;\n+        this.checkInterval = checkInterval;\n         this.scheduler = scheduler;\n     }\n \n@@ -73,8 +72,9 @@ public void purge() {\n         for (final Entry<String, Long> entry : appendersUsage.entrySet()) {\n             if (entry.getValue() < createTime) {\n                 LOGGER.debug(\"Removing appender \" + entry.getKey());\n-                appendersUsage.remove(entry.getKey());\n-                routingAppender.deleteAppender(entry.getKey());\n+                if(appendersUsage.remove(entry.getKey(), entry.getValue())) {\n+                    routingAppender.deleteAppender(entry.getKey());\n+                }\n             }\n         }\n     }\n@@ -100,33 +100,39 @@ public void run() {\n     }\n \n     private void scheduleNext() {\n-        long createTime = Long.MAX_VALUE;\n+        long updateTime = Long.MAX_VALUE;\n         for (final Entry<String, Long> entry : appendersUsage.entrySet()) {\n-            if (entry.getValue() < createTime) {\n-                createTime = entry.getValue();\n+            if (entry.getValue() < updateTime) {\n+                updateTime = entry.getValue();\n             }\n         }\n-        if (createTime < Long.MAX_VALUE) {\n-            final long interval = timeToLive - (System.currentTimeMillis() - createTime);\n+\n+        if (updateTime < Long.MAX_VALUE) {\n+            long interval = timeToLive - (System.currentTimeMillis() - updateTime);\n             future = scheduler.schedule(this, interval, TimeUnit.MILLISECONDS);\n+        } else {\n+            // reset to initial state - in case of all appenders already purged\n+            future = scheduler.schedule(this, checkInterval, TimeUnit.MILLISECONDS);\n         }\n     }\n \n     /**\n      * Create the PurgePolicy\n      *\n-     * @param timeToLive the number of increments of timeUnit before the Appender should be purged.\n-     * @param timeUnit   the unit of time the timeToLive is expressed in.\n+     * @param timeToLive    the number of increments of timeUnit before the Appender should be purged.\n+     * @param checkInterval when all appenders purged, the number of increments of timeUnit to check if any appenders appeared  \n+     * @param timeUnit      the unit of time the timeToLive and the checkInterval is expressed in.\n      * @return The Routes container.\n      */\n     @PluginFactory\n     public static PurgePolicy createPurgePolicy(\n         @PluginAttribute(\"timeToLive\") final String timeToLive,\n+        @PluginAttribute(\"checkInterval\") final String checkInterval,\n         @PluginAttribute(\"timeUnit\") final String timeUnit,\n         @PluginConfiguration final Configuration configuration) {\n \n         if (timeToLive == null) {\n-            LOGGER.error(\"A timeToLive  value is required\");\n+            LOGGER.error(\"A timeToLive value is required\");\n             return null;\n         }\n         TimeUnit units;\n@@ -136,15 +142,29 @@ public static PurgePolicy createPurgePolicy(\n             try {\n                 units = TimeUnit.valueOf(timeUnit.toUpperCase());\n             } catch (final Exception ex) {\n-                LOGGER.error(\"Invalid time unit {}\", timeUnit);\n+                LOGGER.error(\"Invalid timeUnit value {}. timeUnit set to MINUTES\", timeUnit, ex);\n                 units = TimeUnit.MINUTES;\n             }\n         }\n \n-        final long ttl = units.toMillis(Long.parseLong(timeToLive));\n-\n+        long ttl = units.toMillis(Long.parseLong(timeToLive));\n+        if(ttl < 0) {\n+            LOGGER.error(\"timeToLive must be positive. timeToLive set to 0\");\n+            ttl = 0;\n+        }\n+        \n+        long ci;\n+        if(checkInterval == null) {\n+            ci = ttl;\n+        } else {\n+            ci = units.toMillis(Long.parseLong(checkInterval));\n+            if(ci < 0) {\n+                LOGGER.error(\"checkInterval must be positive. checkInterval set equal to timeToLive = {}\", ttl);\n+                ci = ttl;\n+            }\n+        }\n \n-        return new IdlePurgePolicy(ttl, configuration.getScheduler());\n+        return new IdlePurgePolicy(ttl, ci, configuration.getScheduler());\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/040e29e209133efef788eb4132de30262d954ee4/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java",
                "sha": "dacf993eb4d6f0c110c0323fd8663f4087ecd7f8",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/040e29e209133efef788eb4132de30262d954ee4/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java?ref=040e29e209133efef788eb4132de30262d954ee4",
                "deletions": 3,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java",
                "patch": "@@ -182,9 +182,17 @@ private Appender createAppender(final Route route, final LogEvent event) {\n      * @param key The appender's key\n      */\n     public void deleteAppender(final String key) {\n-    \tLOGGER.debug(\"Stopping route with key\" + key);\n-    \tfinal AppenderControl control = appenders.remove(key);\n-    \tcontrol.getAppender().stop();\n+        LOGGER.debug(\"Stopping route with key\" + key);\n+        AppenderControl control = appenders.remove(key);\n+        control.getAppender().stop();\n+        LOGGER.debug(\"Deleting route with \" + key + \" key \");\n+        AppenderControl control = appenders.remove(key);\n+        if(null != control) {\n+            LOGGER.debug(\"Stopping route with \" + key + \" key\");\n+            control.getAppender().stop();\n+        } else {\n+            LOGGER.debug(\"Route with \" + key + \" key already deleted\");\n+        }\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/040e29e209133efef788eb4132de30262d954ee4/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java",
                "sha": "059413dec87c5bdc2ec006dee4089a69bb68c5ff",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/040e29e209133efef788eb4132de30262d954ee4/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/routing/RoutingAppenderWithPurgingTest.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/routing/RoutingAppenderWithPurgingTest.java?ref=040e29e209133efef788eb4132de30262d954ee4",
                "deletions": 4,
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/appender/routing/RoutingAppenderWithPurgingTest.java",
                "patch": "@@ -105,11 +105,22 @@ public void routingTest() throws InterruptedException {\n \n         assertEquals(\"Incorrect number of appenders with IdlePurgePolicy.\", 1, routingAppenderIdle.getAppenders().size());\n         assertEquals(\"Incorrect number of appenders with manual purge.\", 0, routingAppenderManual.getAppenders().size());\n+\n+        msg = new StructuredDataMessage(\"5\", \"This is a test 5\", \"Service\");\n+        EventLogger.logEvent(msg);\n+\n+        assertEquals(\"Incorrect number of appenders with manual purge.\", 1, routingAppenderManual.getAppenders().size());\n+\n+        routingAppenderManual.deleteAppender(\"5\");\n+        routingAppenderManual.deleteAppender(\"5\");\n+\n+        assertEquals(\"Incorrect number of appenders with manual purge.\", 0, routingAppenderManual.getAppenders().size());\n     }\n \n-    private void assertFileExistance(final String... files) {\n-    \tfor (final String file : files) {\n-\t\t\tassertTrue(\"File should exist - \" + file + \" file \", new File(file).exists());\n-\t\t}\n+\n+    private void assertFileExistance(String... files) {\n+        for (String file : files) {\n+            assertTrue(\"File should exist - \" + file + \" file \", new File(file).exists());\n+        }\n     }\n }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/040e29e209133efef788eb4132de30262d954ee4/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/routing/RoutingAppenderWithPurgingTest.java",
                "sha": "9fc40052557011b17ad0a3bfc44c3b5538d24663",
                "status": "modified"
            }
        ],
        "message": "LOG4J2-1235 - org.apache.logging.log4j.core.appender.routing.IdlePurgePolicy not working correctly 1. Removed issue with NPE when tries to delete already deleted appender 2. Added parameter checkInterval for cases when all appenders already purged, so scheduler will keep working with this interval 3. Fixed an issue when appender purged even if received new event to it during purge procedure",
        "parent": "https://github.com/apache/logging-log4j2/commit/af7d1a0d7ea4fcc45a61433352b13982ff53ca7e",
        "repo": "logging-log4j2",
        "unit_tests": [
            "RoutingAppenderTest.java"
        ]
    },
    "logging-log4j2_065c3cd": {
        "bug_id": "logging-log4j2_065c3cd",
        "commit": "https://github.com/apache/logging-log4j2/commit/065c3cdab649a758d640493589a5568a08a391b2",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/065c3cdab649a758d640493589a5568a08a391b2/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java?ref=065c3cdab649a758d640493589a5568a08a391b2",
                "deletions": 13,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "patch": "@@ -196,20 +196,22 @@ private void addShutdownHook() {\n                 ShutdownRegistrationStrategy.SHUTDOWN_REGISTRATION_STRATEGY);\n             if (shutdownStrategyClassName != null) {\n                 try {\n-                    shutdownRegistrationStrategy =\n-                        Loader.newCheckedInstanceOf(shutdownStrategyClassName, ShutdownRegistrationStrategy.class);\n+                    shutdownRegistrationStrategy = Loader.newCheckedInstanceOf(shutdownStrategyClassName,\n+                            ShutdownRegistrationStrategy.class);\n                 } catch (final Exception e) {\n-                    LOGGER.error(SHUTDOWN_HOOK_MARKER, \"There was an error loading the ShutdownRegistrationStrategy [{}]. \" +\n-                        \"Falling back to DefaultShutdownRegistrationStrategy.\", shutdownStrategyClassName, e);\n+                    LOGGER.error(SHUTDOWN_HOOK_MARKER,\n+                            \"There was an error loading the ShutdownRegistrationStrategy [{}]. \"\n+                                    + \"Falling back to DefaultShutdownRegistrationStrategy.\",\n+                            shutdownStrategyClassName, e);\n                     shutdownRegistrationStrategy = new DefaultShutdownRegistrationStrategy();\n                 }\n-            }\n-            try {\n-                shutdownRegistrationStrategy.registerShutdownHook(hook);\n-            } catch (final IllegalStateException ise) {\n-                LOGGER.fatal(SHUTDOWN_HOOK_MARKER, \"Unable to register shutdown hook because JVM is shutting down.\");\n-            } catch (final SecurityException se) {\n-                LOGGER.error(SHUTDOWN_HOOK_MARKER, \"Unable to register shutdown hook due to security restrictions\");\n+                try {\n+                    shutdownRegistrationStrategy.registerShutdownHook(hook);\n+                } catch (final IllegalStateException ise) {\n+                    LOGGER.fatal(SHUTDOWN_HOOK_MARKER, \"Unable to register shutdown hook because JVM is shutting down.\");\n+                } catch (final SecurityException se) {\n+                    LOGGER.error(SHUTDOWN_HOOK_MARKER, \"Unable to register shutdown hook due to security restrictions\");\n+                }\n             }\n         }\n     }\n@@ -245,8 +247,9 @@ public void stop() {\n     }\n \n     private void tearDownShutdownHook() {\n-        if (shutdownThread != null && shutdownThread.get() != null) {\n-            shutdownRegistrationStrategy.unregisterShutdownHook(shutdownThread.get());\n+        Thread thread = shutdownThread.get();\n+        if (shutdownRegistrationStrategy != null && shutdownThread != null && thread != null) {\n+            shutdownRegistrationStrategy.unregisterShutdownHook(thread);\n             LOGGER.debug(SHUTDOWN_HOOK_MARKER, \"Enqueue shutdown hook for garbage collection.\");\n             shutdownThread.enqueue();\n         }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/065c3cdab649a758d640493589a5568a08a391b2/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "sha": "d13b6f56f29a86adbf476d7eda76043016be209e",
                "status": "modified"
            }
        ],
        "message": "Fix NPEs in new shutdown hook code. I'm not sure if this is the right fix, but it's a fix. It's not clear to me that the new shotdown hook code will be in 2.1 based on the back and forth in JIRA and ML.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1620464 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/053cc54193c754ffbbd83d752786439277c29848",
        "repo": "logging-log4j2",
        "unit_tests": [
            "LoggerContextTest.java",
            "TestLoggerContext.java"
        ]
    },
    "logging-log4j2_0f8acc5": {
        "bug_id": "logging-log4j2_0f8acc5",
        "commit": "https://github.com/apache/logging-log4j2/commit/0f8acc5de1d73eaf38ba67d93f28691fdc02aa86",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/0f8acc5de1d73eaf38ba67d93f28691fdc02aa86/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java?ref=0f8acc5de1d73eaf38ba67d93f28691fdc02aa86",
                "deletions": 2,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java",
                "patch": "@@ -119,10 +119,14 @@ protected void callAppenders(final LogEvent event) {\n     void asyncCallAppenders(final LogEvent event) {\n         super.callAppenders(event);\n     }\n+    \n+    private String displayName() {\n+        return LogManager.ROOT_LOGGER_NAME.equals(getName()) ? \"root\" : getName();\n+    }\n \n     @Override\n     public void start() {\n-        LOGGER.trace(\"AsyncLoggerConfig[{}] starting...\", getName());\n+        LOGGER.trace(\"AsyncLoggerConfig[{}] starting...\", displayName());\n         this.setStarting();\n         if (helper == null) {\n             helper = new AsyncLoggerConfigHelper(this);\n@@ -134,7 +138,7 @@ public void start() {\n \n     @Override\n     public void stop() {\n-        LOGGER.trace(\"AsyncLoggerConfig[{}] stopping...\", getName());\n+        LOGGER.trace(\"AsyncLoggerConfig[{}] stopping...\", displayName());\n         this.setStopping();\n         AsyncLoggerConfigHelper.release();\n         super.stop();",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/0f8acc5de1d73eaf38ba67d93f28691fdc02aa86/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java",
                "sha": "844c8c051f045b34b1739ad5de4ce0ab87fd25e3",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/0f8acc5de1d73eaf38ba67d93f28691fdc02aa86/log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java?ref=0f8acc5de1d73eaf38ba67d93f28691fdc02aa86",
                "deletions": 1,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java",
                "patch": "@@ -209,7 +209,7 @@ public void stop() {\n                 alreadyStopped.add(logger);\n             }\n         }\n-        if (root instanceof AsyncLoggerConfig) {\n+        if (root instanceof AsyncLoggerConfig & !alreadyStopped.contains(root)) { // LOG4J2-807\n             root.stop();\n             asyncLoggerConfigCount++;\n             alreadyStopped.add(root);",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/0f8acc5de1d73eaf38ba67d93f28691fdc02aa86/log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java",
                "sha": "8f906cdf39a51fb3611f985ed2cd17f095b9e49e",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/0f8acc5de1d73eaf38ba67d93f28691fdc02aa86/src/changes/changes.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=0f8acc5de1d73eaf38ba67d93f28691fdc02aa86",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -24,6 +24,9 @@\n   </properties>\n   <body>\n     <release version=\"2.1\" date=\"2014-??-??\" description=\"Bug fixes and enhancements\">\n+      <action issue=\"LOG4J2-807\" dev=\"rpopma\" type=\"fix\">\n+        Prevent NPE when configuration with AsyncLogger/AsyncRoot is reloaded.\n+      </action>\n       <action issue=\"LOG4J2-848\" dev=\"ggregory\" type=\"add\">\n         Add a Java lookup to provide nicely formatted runtime version information.\n       </action>",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/0f8acc5de1d73eaf38ba67d93f28691fdc02aa86/src/changes/changes.xml",
                "sha": "b7543929b42fc17c0c90afab3eb42af61b6c2350",
                "status": "modified"
            }
        ],
        "message": "LOG4J2-807 Prevent NPE when configuration with AsyncLogger/AsyncRoot is\nreloaded.",
        "parent": "https://github.com/apache/logging-log4j2/commit/98c5192376f7ab10a4045ec8b8a867259d161471",
        "repo": "logging-log4j2",
        "unit_tests": [
            "AsyncLoggerConfigTest.java"
        ]
    },
    "logging-log4j2_147f78c": {
        "bug_id": "logging-log4j2_147f78c",
        "commit": "https://github.com/apache/logging-log4j2/commit/147f78c45e181d78778a710d24510c9b03d97bc7",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/147f78c45e181d78778a710d24510c9b03d97bc7/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java?ref=147f78c45e181d78778a710d24510c9b03d97bc7",
                "deletions": 1,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "patch": "@@ -210,7 +210,9 @@ public Message getMessage() {\n      */\n     @Override\n     public String getFormattedMessage() {\n-        return messageText.toString();\n+        return messageText != null // LOG4J2-1527: may be null in web apps\n+                ? messageText.toString() // note: please keep below \"redundant\" braces for readability\n+                : (message == null ? null : message.getFormattedMessage());\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/147f78c45e181d78778a710d24510c9b03d97bc7/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "sha": "76b00a1db8ceb2d49a6848759b1f4cfb51a927aa",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/147f78c45e181d78778a710d24510c9b03d97bc7/log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java?ref=147f78c45e181d78778a710d24510c9b03d97bc7",
                "deletions": 4,
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java",
                "patch": "@@ -121,11 +121,11 @@ public void testSerializationDeserialization() throws IOException, ClassNotFound\n         final long nanoTime = 1;\n         evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,\n                 contextStack, -1, threadName, -1, location, currentTimeMillis, nanoTime);\n-        \n+\n         final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         final ObjectOutputStream out = new ObjectOutputStream(baos);\n         out.writeObject(evt);\n-        \n+\n         final ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()));\n         final RingBufferLogEvent other = (RingBufferLogEvent) in.readObject();\n         assertEquals(loggerName, other.getLoggerName());\n@@ -141,7 +141,7 @@ public void testSerializationDeserialization() throws IOException, ClassNotFound\n         assertEquals(location, other.getSource());\n         assertEquals(currentTimeMillis, other.getTimeMillis());\n     }\n-    \n+\n     @Test\n     public void testCreateMementoReturnsCopy() {\n         final RingBufferLogEvent evt = new RingBufferLogEvent();\n@@ -160,7 +160,7 @@ public void testCreateMementoReturnsCopy() {\n         final long nanoTime = 1;\n         evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,\n                 contextStack, -1, threadName, -1, location, currentTimeMillis, nanoTime);\n-        \n+\n         final LogEvent actual = evt.createMemento();\n         assertEquals(evt.getLoggerName(), actual.getLoggerName());\n         assertEquals(evt.getMarker(), actual.getMarker());\n@@ -175,4 +175,14 @@ public void testCreateMementoReturnsCopy() {\n         assertEquals(evt.getSource(), actual.getSource());\n         assertEquals(evt.getThrownProxy(), actual.getThrownProxy());\n     }\n+\n+    @Test\n+    public void testMessageTextNeverThrowsNpe() {\n+        final RingBufferLogEvent evt = new RingBufferLogEvent();\n+        try {\n+            evt.getFormattedMessage();\n+        } catch (NullPointerException e) {\n+            fail(\"the messageText field was not set\");\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/147f78c45e181d78778a710d24510c9b03d97bc7/log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java",
                "sha": "5c7f467e360ce12ef9708538127a72224fa346a9",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/147f78c45e181d78778a710d24510c9b03d97bc7/src/changes/changes.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=147f78c45e181d78778a710d24510c9b03d97bc7",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -24,6 +24,10 @@\n   </properties>\n   <body>\n     <release version=\"2.7\" date=\"2016-MM-DD\" description=\"GA Release 2.7\">\n+\n+      <action issue=\"LOG4J2-1527\" dev=\"rpopma\" type=\"fix\" due-to=\"Jose Leon\">\n+        Prevent NPE in RingBufferLogEvent.getFormattedMessage() when used in web applications.\n+      </action>\n       <action issue=\"LOG4J2-905\" dev=\"ggregory\" type=\"fix\" due-to=\"Gary Gregory, Moritz L\u00f6ser\">\n         Ability to disable (date) lookup completely, compatibility issues with other libraries like Camel.\n       </action>",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/147f78c45e181d78778a710d24510c9b03d97bc7/src/changes/changes.xml",
                "sha": "1ea373c3bd88d328eb135e906b2b77c1f00ed2ac",
                "status": "modified"
            }
        ],
        "message": "LOG4J2-1527 Prevent NPE in RingBufferLogEvent.getFormattedMessage() when used in web applications.\n\nThis closes #39 (https://github.com/apache/logging-log4j2/pull/39 )",
        "parent": "https://github.com/apache/logging-log4j2/commit/6a23301660830fcd4728b1b952b607a9e1e26f65",
        "repo": "logging-log4j2",
        "unit_tests": [
            "RingBufferLogEventTest.java"
        ]
    },
    "logging-log4j2_20be2b0": {
        "bug_id": "logging-log4j2_20be2b0",
        "commit": "https://github.com/apache/logging-log4j2/commit/20be2b03dd82875a225f1ecb607edf3ed1896587",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/20be2b03dd82875a225f1ecb607edf3ed1896587/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java?ref=20be2b03dd82875a225f1ecb607edf3ed1896587",
                "deletions": 1,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "patch": "@@ -163,7 +163,7 @@ private void setMessage(final Message msg) {\n             ((ReusableMessage) msg).formatTo(getMessageTextForWriting());\n         } else {\n             // if the Message instance is reused, there is no point in freezing its message here\n-            if (!Constants.FORMAT_MESSAGES_IN_BACKGROUND) { // LOG4J2-898: user may choose\n+            if (!Constants.FORMAT_MESSAGES_IN_BACKGROUND && msg != null) { // LOG4J2-898: user may choose\n                 msg.getFormattedMessage(); // LOG4J2-763: ask message to freeze parameters\n             }\n             this.message = msg;",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/20be2b03dd82875a225f1ecb607edf3ed1896587/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "sha": "a241f0ab93e1af9ac35389bf24fecb53188cd65d",
                "status": "modified"
            }
        ],
        "message": "FIX NPE in RingBufferLogEventTest",
        "parent": "https://github.com/apache/logging-log4j2/commit/a0a4e43e2224130c8b33130772c3b78cbc7deece",
        "repo": "logging-log4j2",
        "unit_tests": [
            "RingBufferLogEventTest.java"
        ]
    },
    "logging-log4j2_2d266d9": {
        "bug_id": "logging-log4j2_2d266d9",
        "commit": "https://github.com/apache/logging-log4j2/commit/2d266d98b8cb01885691b6c6b8f4018936644973",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2d266d98b8cb01885691b6c6b8f4018936644973/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java?ref=2d266d98b8cb01885691b6c6b8f4018936644973",
                "deletions": 0,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java",
                "patch": "@@ -76,6 +76,10 @@ public void initialize(final RollingFileManager aManager) {\n         if (!scheduler.isStarted()) {\n             scheduler.incrementScheduledItems();\n             scheduler.start();\n+        } else if (scheduler.isStarted()) {\n+            // make sure we have a thread pool\n+            scheduler.incrementScheduledItems();\n+            scheduler.initScheduledExecutorService();\n         }\n         future = scheduler.scheduleWithCron(cronExpression, new CronTrigger());\n     }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2d266d98b8cb01885691b6c6b8f4018936644973/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java",
                "sha": "e5a19a1b9738f05909014ff43421724dc6f845d1",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2d266d98b8cb01885691b6c6b8f4018936644973/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java?ref=2d266d98b8cb01885691b6c6b8f4018936644973",
                "deletions": 1,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java",
                "patch": "@@ -41,6 +41,10 @@\n     @Override\n     public void start() {\n         super.start();\n+        initScheduledExecutorService();\n+    }\n+\n+    public void initScheduledExecutorService() {\n         if (scheduledItems > 0) {\n             LOGGER.debug(\"{} starting {} threads\", SIMPLE_NAME, scheduledItems);\n             scheduledItems = Math.min(scheduledItems, MAX_SCHEDULED_ITEMS);\n@@ -66,7 +70,7 @@ public boolean stop(final long timeout, final TimeUnit timeUnit) {\n      * Increment the number of threads in the pool.\n      */\n     public void incrementScheduledItems() {\n-        if (!isStarted()) {\n+        if (executorService == null) {\n             ++scheduledItems;\n         } else {\n             LOGGER.error(\"{} attempted to increment scheduled items after start\", SIMPLE_NAME);",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2d266d98b8cb01885691b6c6b8f4018936644973/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java",
                "sha": "f847acec19d9f70653f39a8d614eee665c421ff2",
                "status": "modified"
            },
            {
                "additions": 140,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2d266d98b8cb01885691b6c6b8f4018936644973/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicyTest.java",
                "changes": 248,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicyTest.java?ref=2d266d98b8cb01885691b6c6b8f4018936644973",
                "deletions": 108,
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicyTest.java",
                "patch": "@@ -1,108 +1,140 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more\r\n- * contributor license agreements. See the NOTICE file distributed with\r\n- * this work for additional information regarding copyright ownership.\r\n- * The ASF licenses this file to You under the Apache license, Version 2.0\r\n- * (the \"License\"); you may not use this file except in compliance with\r\n- * the License. You may obtain a copy of the License at\r\n- *\r\n- *      http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the license for the specific language governing permissions and\r\n- * limitations under the license.\r\n- */\r\n-\r\n-package org.apache.logging.log4j.core.appender.rolling;\r\n-\r\n-import org.apache.logging.log4j.core.appender.RollingFileAppender;\r\n-import org.apache.logging.log4j.core.config.NullConfiguration;\r\n-import org.apache.logging.log4j.core.layout.PatternLayout;\r\n-import org.junit.Assert;\r\n-import org.junit.Before;\r\n-import org.junit.Test;\r\n-\r\n-public class CronTriggeringPolicyTest {\r\n-\r\n-    private static final String FILE_PATTERN = \"testcmd.log.%d{yyyy-MM-dd}\";\r\n-    private static final String FILE_NAME = \"testcmd.log\";\r\n-    private static final String CRON_EXPRESSION = \"0 0 0 * * ?\";\r\n-    \r\n-    private NullConfiguration configuration;\r\n-\r\n-    @Before\r\n-    public void before() {\r\n-        configuration = new NullConfiguration();\r\n-    }\r\n-\r\n-    private CronTriggeringPolicy createPolicy() {\r\n-        return CronTriggeringPolicy.createPolicy(configuration, Boolean.TRUE.toString(), CRON_EXPRESSION);\r\n-    }\r\n-\r\n-    private DefaultRolloverStrategy createStrategy() {\r\n-        return DefaultRolloverStrategy.createStrategy(\"7\", \"1\", \"max\", null, null, false, configuration);\r\n-    }\r\n-\r\n-    private void testBuilder() {\r\n-        // @formatter:off\r\n-        final RollingFileAppender raf = RollingFileAppender.newBuilder()\r\n-            .withName(\"test\")\r\n-            .withFileName(FILE_NAME)\r\n-            .withFilePattern(FILE_PATTERN)\r\n-            .withPolicy(createPolicy())\r\n-            .withStrategy(createStrategy())\r\n-            .setConfiguration(configuration)\r\n-            .build();\r\n-        // @formatter:on\r\n-        Assert.assertNotNull(raf);\r\n-    }\r\n-\r\n-    /**\r\n-     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\r\n-     * true.\r\n-     */\r\n-    @Test\r\n-    public void testBuilderOnce() {\r\n-        testBuilder();\r\n-    }\r\n-\r\n-    /**\r\n-     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\r\n-     * true.\r\n-     */\r\n-    @Test\r\n-    public void testBuilderSequence() {\r\n-        testBuilder();\r\n-        testBuilder();\r\n-    }\r\n-\r\n-    private void testFactoryMethod() {\r\n-        final CronTriggeringPolicy triggerPolicy = createPolicy();\r\n-        final DefaultRolloverStrategy rolloverStrategy = createStrategy();\r\n-\r\n-        try (RollingFileManager fileManager = RollingFileManager.getFileManager(FILE_NAME,\r\n-                FILE_PATTERN, true, true, triggerPolicy, rolloverStrategy, null,\r\n-                PatternLayout.createDefaultLayout(), 0, true, false, configuration)) {\r\n-            // trigger rollover\r\n-            fileManager.initialize();\r\n-            fileManager.rollover();\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\r\n-     * true.\r\n-     */\r\n-    @Test\r\n-    public void testFactoryMethodOnce() {\r\n-        testFactoryMethod();\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testFactoryMethodSequence() {\r\n-        testFactoryMethod();\r\n-        testFactoryMethod();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+\n+package org.apache.logging.log4j.core.appender.rolling;\n+\n+import org.apache.logging.log4j.core.appender.RollingFileAppender;\n+import org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender;\n+import org.apache.logging.log4j.core.config.Configurator;\n+import org.apache.logging.log4j.core.config.NullConfiguration;\n+import org.apache.logging.log4j.core.layout.PatternLayout;\n+import org.apache.logging.log4j.junit.CleanFiles;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class CronTriggeringPolicyTest {\n+\n+    private static final String CRON_EXPRESSION = \"0 0 0 * * ?\";\n+    \n+    private NullConfiguration configuration;\n+\n+//    @Rule\n+//    public CleanFiles files = new CleanFiles(\"testcmd1.log\");\n+\n+    @Before\n+    public void before() {\n+        configuration = new NullConfiguration();\n+    }\n+\n+    private CronTriggeringPolicy createPolicy() {\n+        return CronTriggeringPolicy.createPolicy(configuration, Boolean.TRUE.toString(), CRON_EXPRESSION);\n+    }\n+\n+    private DefaultRolloverStrategy createStrategy() {\n+        return DefaultRolloverStrategy.createStrategy(\"7\", \"1\", \"max\", null, null, false, configuration);\n+    }\n+\n+    private void testBuilder() {\n+        // @formatter:off\n+        final RollingFileAppender raf = RollingFileAppender.newBuilder()\n+            .withName(\"test1\")\n+            .withFileName(\"testcmd1.log\")\n+            .withFilePattern(\"testcmd1.log.%d{yyyy-MM-dd}\")\n+            .withPolicy(createPolicy())\n+            .withStrategy(createStrategy())\n+            .setConfiguration(configuration)\n+            .build();\n+        // @formatter:on\n+        Assert.assertNotNull(raf);\n+    }\n+\n+    /**\n+     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\n+     * true.\n+     */\n+    @Test\n+    public void testBuilderOnce() {\n+        testBuilder();\n+    }\n+\n+    /**\n+     * Tests LOG4J2-1740 Add CronTriggeringPolicy programmatically leads to NPE\n+     */\n+    @Test\n+    public void testLoggerContextAndBuilder() {\n+        Configurator.initialize(configuration);\n+        testBuilder();\n+    }\n+\n+    /**\n+     * Tests LOG4J2-1740 Add CronTriggeringPolicy programmatically leads to NPE\n+     */\n+    @Test\n+    public void testRollingRandomAccessFileAppender() {\n+        // @formatter:off\n+        RollingRandomAccessFileAppender.newBuilder()\n+            .withName(\"test2\")\n+            .withFileName(\"testcmd2.log\")\n+            .withFilePattern(\"testcmd2.log.%d{yyyy-MM-dd}\")\n+            .withPolicy(createPolicy())\n+            .withStrategy(createStrategy())\n+            .setConfiguration(configuration)\n+            .build();\n+        // @formatter:on\n+    }\n+\n+    \n+    /**\n+     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\n+     * true.\n+     */\n+    @Test\n+    public void testBuilderSequence() {\n+        testBuilder();\n+        testBuilder();\n+    }\n+\n+    private void testFactoryMethod() {\n+        final CronTriggeringPolicy triggerPolicy = createPolicy();\n+        final DefaultRolloverStrategy rolloverStrategy = createStrategy();\n+\n+        try (RollingFileManager fileManager = RollingFileManager.getFileManager(\"testcmd3.log\",\n+                \"testcmd3.log.%d{yyyy-MM-dd}\", true, true, triggerPolicy, rolloverStrategy, null,\n+                PatternLayout.createDefaultLayout(), 0, true, false, configuration)) {\n+            // trigger rollover\n+            fileManager.initialize();\n+            fileManager.rollover();\n+        }\n+    }\n+\n+    /**\n+     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\n+     * true.\n+     */\n+    @Test\n+    public void testFactoryMethodOnce() {\n+        testFactoryMethod();\n+    }\n+\n+    @Test\n+    public void testFactoryMethodSequence() {\n+        testFactoryMethod();\n+        testFactoryMethod();\n+    }\n+}",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2d266d98b8cb01885691b6c6b8f4018936644973/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicyTest.java",
                "sha": "ba20a02f6ba83d889242c871b4784a59db2172cf",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2d266d98b8cb01885691b6c6b8f4018936644973/src/changes/changes.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=2d266d98b8cb01885691b6c6b8f4018936644973",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -162,6 +162,9 @@\n       <action issue=\"LOG4J2-1736\" dev=\"ggregory\" type=\"fix\">\n         TcpSocketManagerFactory might leak Sockets when certain startup errors occur.\n       </action>\n+      <action issue=\"LOG4J2-1740\" dev=\"ggregory\" type=\"fix\">\n+        Add CronTriggeringPolicy programmatically leads to NPE.\n+      </action>     \n       <action issue=\"LOG4J2-1644\" dev=\"ggregory\" type=\"update\" due-to=\"Tim Gokcen, Pavel Sivolobtchik\">\n         Inefficient locking in AbstractLoggerAdapter.\n       </action>",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2d266d98b8cb01885691b6c6b8f4018936644973/src/changes/changes.xml",
                "sha": "d3e42a62f234f4cd22c53bf12156025d8be5359a",
                "status": "modified"
            }
        ],
        "message": "[LOG4J2-1740] Add CronTriggeringPolicy programmatically leads to NPE.",
        "parent": "https://github.com/apache/logging-log4j2/commit/7441d3c3cc57130a56535dbbd15a5d819f0a3834",
        "repo": "logging-log4j2",
        "unit_tests": [
            "CronTriggeringPolicyTest.java"
        ]
    },
    "logging-log4j2_2e100e0": {
        "bug_id": "logging-log4j2_2e100e0",
        "commit": "https://github.com/apache/logging-log4j2/commit/2e100e0a5e0212b706c81da3f5d410acdcd65049",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2e100e0a5e0212b706c81da3f5d410acdcd65049/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java?ref=2e100e0a5e0212b706c81da3f5d410acdcd65049",
                "deletions": 1,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "patch": "@@ -53,6 +53,7 @@\n \n     public static final String PROPERTY_CONFIG = \"config\";\n     private static final StatusLogger LOGGER = StatusLogger.getLogger();\n+    private static final Configuration NULL_CONFIGURATION = new NullConfiguration();\n \n     private final ConcurrentMap<String, Logger> loggers = new ConcurrentHashMap<String, Logger>();\n     private final CopyOnWriteArrayList<PropertyChangeListener> propertyChangeListeners = new CopyOnWriteArrayList<PropertyChangeListener>();\n@@ -208,7 +209,7 @@ public void stop() {\n                 shutdownThread = null;\n             }\n             final Configuration prev = config;\n-            config = new NullConfiguration();\n+            config = NULL_CONFIGURATION;\n             updateLoggers();\n             prev.stop();\n             externalContext = null;",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2e100e0a5e0212b706c81da3f5d410acdcd65049/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "sha": "0759bc4509643dd4e4b2ac3109b89d42662afd3b",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2e100e0a5e0212b706c81da3f5d410acdcd65049/src/changes/changes.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=2e100e0a5e0212b706c81da3f5d410acdcd65049",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -21,6 +21,9 @@\n   </properties>\n   <body>\n     <release version=\"2.0-RC1\" date=\"2013-MM-DD\" description=\"Bug fixes and enhancements\">\n+      <action issue=\"LOG4J2-377\" dev=\"rpopma\" type=\"fix\" due-to=\"Roland Weiglhofer, Matt Sicker\">\n+        (OSGi) Fix NPE during shutdown.\n+      </action>\n       <action issue=\"LOG4J2-463\" dev=\"rpopma\" type=\"fix\" due-to=\"Michael Diamond, Matt Sicker\">\n         Fixed documentation for MyApp example application in the Automatic Configuration section\n       </action>",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2e100e0a5e0212b706c81da3f5d410acdcd65049/src/changes/changes.xml",
                "sha": "96f1b5f3dcfec29b58076fd72a81c9d311b85a8d",
                "status": "modified"
            }
        ],
        "message": "LOG4J2-377 (OSGi) Fix NPE during shutdown.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1555633 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/b3e40205c2b229940752e0abec5973d20b001c8b",
        "repo": "logging-log4j2",
        "unit_tests": [
            "LoggerContextTest.java",
            "TestLoggerContext.java"
        ]
    },
    "logging-log4j2_2eb02c8": {
        "bug_id": "logging-log4j2_2eb02c8",
        "commit": "https://github.com/apache/logging-log4j2/commit/2eb02c8276ea774e669dc1bc732be690a10f3c85",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2eb02c8276ea774e669dc1bc732be690a10f3c85/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java?ref=2eb02c8276ea774e669dc1bc732be690a10f3c85",
                "deletions": 1,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "patch": "@@ -30,6 +30,7 @@\n \n import org.apache.logging.log4j.core.pattern.PlainTextRenderer;\n import org.apache.logging.log4j.core.pattern.TextRenderer;\n+import org.apache.logging.log4j.core.util.Loader;\n import org.apache.logging.log4j.status.StatusLogger;\n import org.apache.logging.log4j.util.LoaderUtil;\n import org.apache.logging.log4j.util.ReflectionUtil;\n@@ -556,7 +557,7 @@ private boolean ignoreElement(final StackTraceElement element, final List<String\n \n     private Class<?> loadClass(final String className) {\n         try {\n-            return this.getClass().getClassLoader().loadClass(className);\n+            return Loader.loadClass(className,this.getClass().getClassLoader());\n         } catch (final ClassNotFoundException | NoClassDefFoundError | SecurityException e) {\n             return null;\n         }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2eb02c8276ea774e669dc1bc732be690a10f3c85/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "sha": "4dd19682cc0106b8850b3521eb516bfe52ea7072",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2eb02c8276ea774e669dc1bc732be690a10f3c85/log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java?ref=2eb02c8276ea774e669dc1bc732be690a10f3c85",
                "deletions": 0,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java",
                "patch": "@@ -227,6 +227,19 @@ private static boolean isChild(final ClassLoader loader1, final ClassLoader load\n         return Class.forName(className, true, loader);\n     }\n \n+    /**\n+     * Loads a named Class using a given ClassLoader.\n+     *\n+     * @param className The class name.\n+     * @param loader The class loader.\n+     * @return The class, or null if loader is null.\n+     * @throws ClassNotFoundException if the class could not be found.\n+     */\n+    public static Class<?> loadClass(final String className, final ClassLoader loader)\n+            throws ClassNotFoundException {\n+        return loader != null ? loader.loadClass(className) : null;\n+    }    \n+    \n     /**\n      * Load a Class in the {@code java.*} namespace by name. Useful for peculiar scenarios typically involving\n      * Google App Engine.",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2eb02c8276ea774e669dc1bc732be690a10f3c85/log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java",
                "sha": "d1013f72952bcf902b816e1ac0ff1f250b68dedd",
                "status": "modified"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2eb02c8276ea774e669dc1bc732be690a10f3c85/log4j-core/src/test/java/org/apache/logging/log4j/core/util/LoaderTest.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/util/LoaderTest.java?ref=2eb02c8276ea774e669dc1bc732be690a10f3c85",
                "deletions": 0,
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/util/LoaderTest.java",
                "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+\n+package org.apache.logging.log4j.core.util;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Tests the Loader class.\n+ */\n+public class LoaderTest {\n+\n+    @Test\n+    public void testLoadClassWithNullClassloaderReturnNull() throws Exception {\n+        assertNull(\"Expect null return value for null ClassLoader.\",\n+                Loader.loadClass(Loader.class.getCanonicalName(), null));\n+    }\n+\n+    @Test\n+    public void testLoadClassReturnClassForExistingClass() throws Exception {\n+        assertEquals(\"Expect Class return value for null ClassLoader.\", Loader.class,\n+                Loader.loadClass(Loader.class.getCanonicalName(), Loader.getClassLoader()));\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2eb02c8276ea774e669dc1bc732be690a10f3c85/log4j-core/src/test/java/org/apache/logging/log4j/core/util/LoaderTest.java",
                "sha": "c97d3b6cb42da97de3250d1c2b6abda123c0d37c",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2eb02c8276ea774e669dc1bc732be690a10f3c85/src/changes/changes.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=2eb02c8276ea774e669dc1bc732be690a10f3c85",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -144,6 +144,9 @@\n       <action issue=\"LOG4J2-1664\" dev=\"ggregory\" type=\"fix\" due-to=\"Ludovic HOCHET\">\n         Improve OSGi unit tests.\n       </action>\n+      <action issue=\"LOG4J2-1687\" dev=\"ggregory\" type=\"fix\" due-to=\"Robert Christiansen\">\n+        NPE in ThrowableProxy when resolving stack in Java EE/OSGi environment.\n+      </action>\n       <action issue=\"LOG4J2-1644\" dev=\"ggregory\" type=\"update\" due-to=\"Tim Gokcen, Pavel Sivolobtchik\">\n         Inefficient locking in AbstractLoggerAdapter.\n       </action>",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2eb02c8276ea774e669dc1bc732be690a10f3c85/src/changes/changes.xml",
                "sha": "a6279b26c79ebca1841058cce7a7ee470e676c3e",
                "status": "modified"
            }
        ],
        "message": "[LOG4J2-1687] NPE in ThrowableProxy when resolving stack in Java EE/OSGi\nenvironment.",
        "parent": "https://github.com/apache/logging-log4j2/commit/18889185619b8fa634a67e1450c6ee6348e9d599",
        "repo": "logging-log4j2",
        "unit_tests": [
            "ThrowableProxyTest.java",
            "LoaderTest.java"
        ]
    },
    "logging-log4j2_3306186": {
        "bug_id": "logging-log4j2_3306186",
        "commit": "https://github.com/apache/logging-log4j2/commit/33061868f7692c4b58a2ec06fd1a794c79242ada",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/33061868f7692c4b58a2ec06fd1a794c79242ada/core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java?ref=33061868f7692c4b58a2ec06fd1a794c79242ada",
                "deletions": 16,
                "filename": "core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java",
                "patch": "@@ -51,22 +51,25 @@\n @ConverterKeys({ \"highlight\" })\n public final class HighlightConverter extends LogEventPatternConverter {\n \n-    private static final String[] DEFAULT_FATAL = new String[] { \"BLINK\", \"BRIGHT\", \"RED\" };\n-    private static final String[] DEFAULT_ERROR = new String[] { \"BRIGHT\", \"RED\" };\n-    private static final String[] DEFAULT_WARN = new String[] { \"RED\" };\n-    private static final String[] DEFAULT_INFO = new String[] { \"BLUE\" };\n-    private static final String[] DEFAULT_DEBUG = null;\n-    private static final String[] DEFAULT_TRACE = null;\n-    \n-    private static final EnumMap<Level, String> LEVEL_STYLES_DEFAULT = new EnumMap<Level, String>(Level.class);\n+    private static final EnumMap<Level, String> DEFAULT_STYLES = new EnumMap<Level, String>(Level.class);\n+\n+    private static final EnumMap<Level, String> LOGBACK_STYLES = new EnumMap<Level, String>(Level.class);\n \n     static {\n-        LEVEL_STYLES_DEFAULT.put(Level.FATAL, AnsiEscape.createSequence(DEFAULT_FATAL));\n-        LEVEL_STYLES_DEFAULT.put(Level.ERROR, AnsiEscape.createSequence(DEFAULT_ERROR));\n-        LEVEL_STYLES_DEFAULT.put(Level.WARN, AnsiEscape.createSequence(DEFAULT_WARN));\n-        LEVEL_STYLES_DEFAULT.put(Level.INFO, AnsiEscape.createSequence(DEFAULT_INFO));\n-        LEVEL_STYLES_DEFAULT.put(Level.DEBUG, AnsiEscape.createSequence(DEFAULT_DEBUG));\n-        LEVEL_STYLES_DEFAULT.put(Level.TRACE, AnsiEscape.createSequence(DEFAULT_TRACE));\n+        DEFAULT_STYLES.put(Level.FATAL, AnsiEscape.createSequence(new String[] { \"BRIGHT\", \"RED\" }));\n+        DEFAULT_STYLES.put(Level.ERROR, AnsiEscape.createSequence(new String[] { \"BRIGHT\", \"RED\" }));\n+        DEFAULT_STYLES.put(Level.WARN, AnsiEscape.createSequence(new String[] { \"YELLOW\" }));\n+        DEFAULT_STYLES.put(Level.INFO, AnsiEscape.createSequence(new String[] { \"GREEN\" }));\n+        DEFAULT_STYLES.put(Level.DEBUG, AnsiEscape.createSequence(new String[] { \"CYAN\" }));\n+        DEFAULT_STYLES.put(Level.TRACE, AnsiEscape.createSequence(new String[] { \"BLACK\" }));\n+        //\n+        LOGBACK_STYLES.put(Level.FATAL, AnsiEscape.createSequence(new String[] { \"BLINK\", \"BRIGHT\", \"RED\" }));\n+        LOGBACK_STYLES.put(Level.ERROR, AnsiEscape.createSequence(new String[] { \"BRIGHT\", \"RED\" }));\n+        LOGBACK_STYLES.put(Level.WARN, AnsiEscape.createSequence(new String[] { \"RED\" }));\n+        LOGBACK_STYLES.put(Level.INFO, AnsiEscape.createSequence(new String[] { \"BLUE\" }));\n+        LOGBACK_STYLES.put(Level.DEBUG, AnsiEscape.createSequence(null));\n+        LOGBACK_STYLES.put(Level.TRACE, AnsiEscape.createSequence(null));\n+\n     }\n \n     /**\n@@ -92,8 +95,11 @@\n      * @return a new map\n      */\n     private static EnumMap<Level, String> createLevelStyleMap(final String[] options) {\n-        Map<String, String> styles = options.length < 2 ? null : AnsiEscape.createMap(options[1]);\n-        EnumMap<Level, String> levelStyles = new EnumMap<Level, String>(LEVEL_STYLES_DEFAULT);\n+        if (options.length < 2) {\n+            return DEFAULT_STYLES;\n+        }\n+        Map<String, String> styles = AnsiEscape.createMap(options[1]);\n+        EnumMap<Level, String> levelStyles = new EnumMap<Level, String>(DEFAULT_STYLES);\n         for (Map.Entry<String, String> entry : styles.entrySet()) {\n             final Level key = Level.valueOf(entry.getKey());\n             if (key == null) {",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/33061868f7692c4b58a2ec06fd1a794c79242ada/core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java",
                "sha": "e5a8d0ca807cf0f38ab77ee3187b6526eeff6075",
                "status": "modified"
            }
        ],
        "message": "Allow custom ANSI mappings for Levels. Fix NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1404652 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/025127c808b1689711fd972ca63791d948424afb",
        "repo": "logging-log4j2",
        "unit_tests": [
            "HighlightConverterTest.java"
        ]
    },
    "logging-log4j2_3376588": {
        "bug_id": "logging-log4j2_3376588",
        "commit": "https://github.com/apache/logging-log4j2/commit/33765882bddfd34f8d2913612d3bc2bda9f35e40",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/33765882bddfd34f8d2913612d3bc2bda9f35e40/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java?ref=33765882bddfd34f8d2913612d3bc2bda9f35e40",
                "deletions": 0,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java",
                "patch": "@@ -63,15 +63,19 @@\n         public Appender build() {\n             if (name == null) {\n                 LOGGER.error(\"Name missing.\");\n+                return null;\n             }\n             if (script == null) {\n                 LOGGER.error(\"Script missing for ScriptAppenderSelector appender {}\", name);\n+                return null;\n             }\n             if (appenderSet == null) {\n                 LOGGER.error(\"AppenderSet missing for ScriptAppenderSelector appender {}\", name);\n+                return null;\n             }\n             if (configuration == null) {\n                 LOGGER.error(\"Configuration missing for ScriptAppenderSelector appender {}\", name);\n+                return null;\n             }\n             final ScriptManager scriptManager = configuration.getScriptManager();\n             scriptManager.addScript(script);",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/33765882bddfd34f8d2913612d3bc2bda9f35e40/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java",
                "sha": "7782b96e03ed5fd37485538210f85e9fd35c2511",
                "status": "modified"
            }
        ],
        "message": "[LOG4J2-1597] Fix NPEs.",
        "parent": "https://github.com/apache/logging-log4j2/commit/60bcf168d45eb930e84d3eee9d3ed11d2f2da2ef",
        "repo": "logging-log4j2",
        "unit_tests": [
            "ScriptAppenderSelectorTest.java"
        ]
    },
    "logging-log4j2_36ab290": {
        "bug_id": "logging-log4j2_36ab290",
        "commit": "https://github.com/apache/logging-log4j2/commit/36ab2901c005c4341e543cff2720a2b60949e773",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/36ab2901c005c4341e543cff2720a2b60949e773/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java?ref=36ab2901c005c4341e543cff2720a2b60949e773",
                "deletions": 1,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java",
                "patch": "@@ -196,7 +196,7 @@ private Rfc5424Layout(final Configuration config, final Facility facility, final\n \n     private Map<String, FieldFormatter> createFieldFormatters(final LoggerFields[] loggerFields,\n             final Configuration config) {\n-        final Map<String, FieldFormatter> sdIdMap = new HashMap<>(loggerFields.length);\n+        final Map<String, FieldFormatter> sdIdMap = new HashMap<>(loggerFields == null ? 0 : loggerFields.length);\n \n         if (loggerFields != null) {\n             for (final LoggerFields loggerField : loggerFields) {",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/36ab2901c005c4341e543cff2720a2b60949e773/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java",
                "sha": "e68c64c3255f1b40c139171beb416bab90679a15",
                "status": "modified"
            }
        ],
        "message": "Fix NPE from previous commit.",
        "parent": "https://github.com/apache/logging-log4j2/commit/68a82342c1631b1de3dc353ee5db96b4656ee770",
        "repo": "logging-log4j2",
        "unit_tests": [
            "Rfc5424LayoutTest.java"
        ]
    },
    "logging-log4j2_384ed1e": {
        "bug_id": "logging-log4j2_384ed1e",
        "commit": "https://github.com/apache/logging-log4j2/commit/384ed1e8eea7b0f043e977b8b991527ad721ae2f",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/384ed1e8eea7b0f043e977b8b991527ad721ae2f/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java?ref=384ed1e8eea7b0f043e977b8b991527ad721ae2f",
                "deletions": 1,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java",
                "patch": "@@ -332,10 +332,14 @@ public boolean callAppendersFromAnotherThread(final LogEvent event) {\n         }\n         // LOG4J2-639: catch NPE if disruptor field was set to null after our check above\n         try {\n+            LogEvent logEvent = event;\n+            if (event instanceof RingBufferLogEvent) {\n+                logEvent = ((RingBufferLogEvent) event).createMemento();\n+            }\n             // Note: do NOT use the temp variable above!\n             // That could result in adding a log event to the disruptor after it was shut down,\n             // which could cause the publishEvent method to hang and never return.\n-            disruptor.getRingBuffer().publishEvent(translator, event, asyncLoggerConfig);\n+            disruptor.getRingBuffer().publishEvent(translator, logEvent, asyncLoggerConfig);\n         } catch (NullPointerException npe) {\n             LOGGER.fatal(\"Ignoring log event after log4j was shut down.\");\n         }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/384ed1e8eea7b0f043e977b8b991527ad721ae2f/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java",
                "sha": "045c407afb7818abc12a22dede8fd637406ef20f",
                "status": "modified"
            },
            {
                "additions": 223,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/384ed1e8eea7b0f043e977b8b991527ad721ae2f/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "changes": 445,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java?ref=384ed1e8eea7b0f043e977b8b991527ad721ae2f",
                "deletions": 222,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "patch": "@@ -25,6 +25,7 @@\n import org.apache.logging.log4j.ThreadContext.ContextStack;\n import org.apache.logging.log4j.core.LogEvent;\n import org.apache.logging.log4j.core.config.Property;\n+import org.apache.logging.log4j.core.impl.Log4jLogEvent;\n import org.apache.logging.log4j.core.impl.ThrowableProxy;\n import org.apache.logging.log4j.core.lookup.StrSubstitutor;\n import org.apache.logging.log4j.message.Message;\n@@ -35,135 +36,128 @@\n import com.lmax.disruptor.EventFactory;\n \n /**\n- * When the Disruptor is started, the RingBuffer is populated with event\n- * objects. These objects are then re-used during the life of the RingBuffer.\n+ * When the Disruptor is started, the RingBuffer is populated with event objects. These objects are then re-used during\n+ * the life of the RingBuffer.\n  */\n public class RingBufferLogEvent implements LogEvent {\n-\tprivate static final long serialVersionUID = 8462119088943934758L;\n-\n-\t/**\n-\t * Creates the events that will be put in the RingBuffer.\n-\t */\n-\tprivate static class Factory implements EventFactory<RingBufferLogEvent> {\n-\n-\t\t@Override\n-\t\tpublic RingBufferLogEvent newInstance() {\n-\t\t\treturn new RingBufferLogEvent();\n-\t\t}\n-\t}\n-\n-\t/** The {@code EventFactory} for {@code RingBufferLogEvent}s. */\n-\tpublic static final Factory FACTORY = new Factory();\n-\n-\tprivate AsyncLogger asyncLogger;\n-\tprivate String loggerName;\n-\tprivate Marker marker;\n-\tprivate String fqcn;\n-\tprivate Level level;\n-\tprivate Message message;\n-\tprivate transient Throwable thrown;\n+    private static final long serialVersionUID = 8462119088943934758L;\n+\n+    /**\n+     * Creates the events that will be put in the RingBuffer.\n+     */\n+    private static class Factory implements EventFactory<RingBufferLogEvent> {\n+\n+        @Override\n+        public RingBufferLogEvent newInstance() {\n+            return new RingBufferLogEvent();\n+        }\n+    }\n+\n+    /** The {@code EventFactory} for {@code RingBufferLogEvent}s. */\n+    public static final Factory FACTORY = new Factory();\n+\n+    private AsyncLogger asyncLogger;\n+    private String loggerName;\n+    private Marker marker;\n+    private String fqcn;\n+    private Level level;\n+    private Message message;\n+    private transient Throwable thrown;\n     private ThrowableProxy thrownProxy;\n-\tprivate Map<String, String> contextMap;\n-\tprivate ContextStack contextStack;\n-\tprivate String threadName;\n-\tprivate StackTraceElement location;\n-\tprivate long currentTimeMillis;\n-\tprivate boolean endOfBatch;\n-\tprivate boolean includeLocation;\n-\n-\tpublic void setValues(final AsyncLogger asyncLogger,\n-\t\t\tfinal String loggerName, final Marker marker, final String fqcn,\n-\t\t\tfinal Level level, final Message data, final Throwable throwable,\n-\t\t\tfinal Map<String, String> map, final ContextStack contextStack,\n-\t\t\tfinal String threadName, final StackTraceElement location,\n-\t\t\tfinal long currentTimeMillis) {\n-\t\tthis.asyncLogger = asyncLogger;\n-\t\tthis.loggerName = loggerName;\n-\t\tthis.marker = marker;\n-\t\tthis.fqcn = fqcn;\n-\t\tthis.level = level;\n-\t\tthis.message = data;\n-\t\tthis.thrown = throwable;\n-\t\tthis.thrownProxy = null;\n-\t\tthis.contextMap = map;\n-\t\tthis.contextStack = contextStack;\n-\t\tthis.threadName = threadName;\n-\t\tthis.location = location;\n-\t\tthis.currentTimeMillis = currentTimeMillis;\n-\t}\n-\n-\t/**\n-\t * Event processor that reads the event from the ringbuffer can call this\n-\t * method.\n-\t * \n-\t * @param endOfBatch\n-\t *            flag to indicate if this is the last event in a batch from the\n-\t *            RingBuffer\n-\t */\n-\tpublic void execute(final boolean endOfBatch) {\n-\t\tthis.endOfBatch = endOfBatch;\n-\t\tasyncLogger.actualAsyncLog(this);\n-\t}\n-\n-\t/**\n-\t * Returns {@code true} if this event is the end of a batch, {@code false}\n-\t * otherwise.\n-\t * \n-\t * @return {@code true} if this event is the end of a batch, {@code false}\n-\t *         otherwise\n-\t */\n-\t@Override\n-\tpublic boolean isEndOfBatch() {\n-\t\treturn endOfBatch;\n-\t}\n-\n-\t@Override\n-\tpublic void setEndOfBatch(final boolean endOfBatch) {\n-\t\tthis.endOfBatch = endOfBatch;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isIncludeLocation() {\n-\t\treturn includeLocation;\n-\t}\n-\n-\t@Override\n-\tpublic void setIncludeLocation(final boolean includeLocation) {\n-\t\tthis.includeLocation = includeLocation;\n-\t}\n-\n-\t@Override\n-\tpublic String getLoggerName() {\n-\t\treturn loggerName;\n-\t}\n-\n-\t@Override\n-\tpublic Marker getMarker() {\n-\t\treturn marker;\n-\t}\n-\n-\t@Override\n-\tpublic String getLoggerFqcn() {\n-\t\treturn fqcn;\n-\t}\n-\n-\t@Override\n-\tpublic Level getLevel() {\n-\t\tif (level == null) {\n-\t\t\tlevel = Level.OFF; // LOG4J2-462, LOG4J2-465\n-\t\t}\n-\t\treturn level;\n-\t}\n-\n-\t@Override\n-\tpublic Message getMessage() {\n-\t\tif (message == null) {\n-\t\t\tmessage = new SimpleMessage(Strings.EMPTY);\n-\t\t}\n-\t\treturn message;\n-\t}\n-\n-\t@Override\n+    private Map<String, String> contextMap;\n+    private ContextStack contextStack;\n+    private String threadName;\n+    private StackTraceElement location;\n+    private long currentTimeMillis;\n+    private boolean endOfBatch;\n+    private boolean includeLocation;\n+\n+    public void setValues(final AsyncLogger asyncLogger, final String loggerName, final Marker marker,\n+            final String fqcn, final Level level, final Message data, final Throwable throwable,\n+            final Map<String, String> map, final ContextStack contextStack, final String threadName,\n+            final StackTraceElement location, final long currentTimeMillis) {\n+        this.asyncLogger = asyncLogger;\n+        this.loggerName = loggerName;\n+        this.marker = marker;\n+        this.fqcn = fqcn;\n+        this.level = level;\n+        this.message = data;\n+        this.thrown = throwable;\n+        this.thrownProxy = null;\n+        this.contextMap = map;\n+        this.contextStack = contextStack;\n+        this.threadName = threadName;\n+        this.location = location;\n+        this.currentTimeMillis = currentTimeMillis;\n+    }\n+\n+    /**\n+     * Event processor that reads the event from the ringbuffer can call this method.\n+     * \n+     * @param endOfBatch flag to indicate if this is the last event in a batch from the RingBuffer\n+     */\n+    public void execute(final boolean endOfBatch) {\n+        this.endOfBatch = endOfBatch;\n+        asyncLogger.actualAsyncLog(this);\n+    }\n+\n+    /**\n+     * Returns {@code true} if this event is the end of a batch, {@code false} otherwise.\n+     * \n+     * @return {@code true} if this event is the end of a batch, {@code false} otherwise\n+     */\n+    @Override\n+    public boolean isEndOfBatch() {\n+        return endOfBatch;\n+    }\n+\n+    @Override\n+    public void setEndOfBatch(final boolean endOfBatch) {\n+        this.endOfBatch = endOfBatch;\n+    }\n+\n+    @Override\n+    public boolean isIncludeLocation() {\n+        return includeLocation;\n+    }\n+\n+    @Override\n+    public void setIncludeLocation(final boolean includeLocation) {\n+        this.includeLocation = includeLocation;\n+    }\n+\n+    @Override\n+    public String getLoggerName() {\n+        return loggerName;\n+    }\n+\n+    @Override\n+    public Marker getMarker() {\n+        return marker;\n+    }\n+\n+    @Override\n+    public String getLoggerFqcn() {\n+        return fqcn;\n+    }\n+\n+    @Override\n+    public Level getLevel() {\n+        if (level == null) {\n+            level = Level.OFF; // LOG4J2-462, LOG4J2-465\n+        }\n+        return level;\n+    }\n+\n+    @Override\n+    public Message getMessage() {\n+        if (message == null) {\n+            message = new SimpleMessage(Strings.EMPTY);\n+        }\n+        return message;\n+    }\n+\n+    @Override\n     public Throwable getThrown() {\n         // after deserialization, thrown is null but thrownProxy may be non-null\n         if (thrown == null) {\n@@ -174,100 +168,107 @@ public Throwable getThrown() {\n         return thrown;\n     }\n \n-\t@Override\n-\tpublic ThrowableProxy getThrownProxy() {\n-\t    // lazily instantiate the (expensive) ThrowableProxy\n-\t    if (thrownProxy == null) {\n-\t        if (thrown != null) {\n-\t            thrownProxy = new ThrowableProxy(thrown);\n-\t        }\n-\t    }\n-\t\treturn this.thrownProxy;\n-\t}\n-\n-\t@Override\n-\tpublic Map<String, String> getContextMap() {\n-\t\treturn contextMap;\n-\t}\n-\n-\t@Override\n-\tpublic ContextStack getContextStack() {\n-\t\treturn contextStack;\n-\t}\n-\n-\t@Override\n-\tpublic String getThreadName() {\n-\t\treturn threadName;\n-\t}\n-\n-\t@Override\n-\tpublic StackTraceElement getSource() {\n-\t\treturn location;\n-\t}\n-\n-\t@Override\n-\tpublic long getTimeMillis() {\n-\t\tMessage msg = getMessage();\n-\t\tif (msg instanceof TimestampMessage) { // LOG4J2-455\n-\t\t\treturn ((TimestampMessage) msg).getTimestamp();\n-\t\t}\n-\t\treturn currentTimeMillis;\n-\t}\n-\n-\t/**\n-\t * Merges the contents of the specified map into the contextMap, after\n-\t * replacing any variables in the property values with the\n-\t * StrSubstitutor-supplied actual values.\n-\t * \n-\t * @param properties\n-\t *            configured properties\n-\t * @param strSubstitutor\n-\t *            used to lookup values of variables in properties\n-\t */\n-\tpublic void mergePropertiesIntoContextMap(\n-\t\t\tfinal Map<Property, Boolean> properties,\n-\t\t\tfinal StrSubstitutor strSubstitutor) {\n-\t\tif (properties == null) {\n-\t\t\treturn; // nothing to do\n-\t\t}\n-\n-\t\tfinal Map<String, String> map = contextMap == null ? new HashMap<String, String>()\n-\t\t\t\t: new HashMap<String, String>(contextMap);\n-\n-\t\tfor (final Map.Entry<Property, Boolean> entry : properties.entrySet()) {\n-\t\t\tfinal Property prop = entry.getKey();\n-\t\t\tif (map.containsKey(prop.getName())) {\n-\t\t\t\tcontinue; // contextMap overrides config properties\n-\t\t\t}\n-\t\t\tfinal String value = entry.getValue().booleanValue() ? strSubstitutor.replace(prop\n-\t\t\t\t\t.getValue()) : prop.getValue();\n-\t\t\tmap.put(prop.getName(), value);\n-\t\t}\n-\t\tcontextMap = map;\n-\t}\n-\n-\t/**\n-\t * Release references held by ring buffer to allow objects to be\n-\t * garbage-collected.\n-\t */\n-\tpublic void clear() {\n-\t\tsetValues(null, // asyncLogger\n-\t\t\t\tnull, // loggerName\n-\t\t\t\tnull, // marker\n-\t\t\t\tnull, // fqcn\n-\t\t\t\tnull, // level\n-\t\t\t\tnull, // data\n-\t\t\t\tnull, // t\n-\t\t\t\tnull, // map\n-\t\t\t\tnull, // contextStack\n-\t\t\t\tnull, // threadName\n-\t\t\t\tnull, // location\n-\t\t\t\t0 // currentTimeMillis\n-\t\t);\n-\t}\n-\t\n-\tprivate void writeObject(java.io.ObjectOutputStream out) throws IOException {\n-\t    getThrownProxy(); // initialize the ThrowableProxy before serializing\n-\t    out.defaultWriteObject();\n-\t}\n+    @Override\n+    public ThrowableProxy getThrownProxy() {\n+        // lazily instantiate the (expensive) ThrowableProxy\n+        if (thrownProxy == null) {\n+            if (thrown != null) {\n+                thrownProxy = new ThrowableProxy(thrown);\n+            }\n+        }\n+        return this.thrownProxy;\n+    }\n+\n+    @Override\n+    public Map<String, String> getContextMap() {\n+        return contextMap;\n+    }\n+\n+    @Override\n+    public ContextStack getContextStack() {\n+        return contextStack;\n+    }\n+\n+    @Override\n+    public String getThreadName() {\n+        return threadName;\n+    }\n+\n+    @Override\n+    public StackTraceElement getSource() {\n+        return location;\n+    }\n+\n+    @Override\n+    public long getTimeMillis() {\n+        Message msg = getMessage();\n+        if (msg instanceof TimestampMessage) { // LOG4J2-455\n+            return ((TimestampMessage) msg).getTimestamp();\n+        }\n+        return currentTimeMillis;\n+    }\n+\n+    /**\n+     * Merges the contents of the specified map into the contextMap, after replacing any variables in the property\n+     * values with the StrSubstitutor-supplied actual values.\n+     * \n+     * @param properties configured properties\n+     * @param strSubstitutor used to lookup values of variables in properties\n+     */\n+    public void mergePropertiesIntoContextMap(final Map<Property, Boolean> properties,\n+            final StrSubstitutor strSubstitutor) {\n+        if (properties == null) {\n+            return; // nothing to do\n+        }\n+\n+        final Map<String, String> map = contextMap == null ? new HashMap<String, String>()\n+                : new HashMap<String, String>(contextMap);\n+\n+        for (final Map.Entry<Property, Boolean> entry : properties.entrySet()) {\n+            final Property prop = entry.getKey();\n+            if (map.containsKey(prop.getName())) {\n+                continue; // contextMap overrides config properties\n+            }\n+            final String value = entry.getValue().booleanValue() ? strSubstitutor.replace(prop.getValue()) : prop\n+                    .getValue();\n+            map.put(prop.getName(), value);\n+        }\n+        contextMap = map;\n+    }\n+\n+    /**\n+     * Release references held by ring buffer to allow objects to be garbage-collected.\n+     */\n+    public void clear() {\n+        setValues(null, // asyncLogger\n+                null, // loggerName\n+                null, // marker\n+                null, // fqcn\n+                null, // level\n+                null, // data\n+                null, // t\n+                null, // map\n+                null, // contextStack\n+                null, // threadName\n+                null, // location\n+                0 // currentTimeMillis\n+        );\n+    }\n+\n+    private void writeObject(java.io.ObjectOutputStream out) throws IOException {\n+        getThrownProxy(); // initialize the ThrowableProxy before serializing\n+        out.defaultWriteObject();\n+    }\n+\n+    /**\n+     * Creates and returns a new immutable copy of this {@code RingBufferLogEvent}.\n+     * \n+     * @return a new immutable copy of the data in this {@code RingBufferLogEvent}\n+     */\n+    public LogEvent createMemento() {\n+        // Ideally, would like to use the LogEventFactory here but signature does not match:\n+        // results in factory re-creating the timestamp, context map and context stack, which we don't want.\n+        return new Log4jLogEvent(loggerName, marker, fqcn, level, message, thrown, contextMap, contextStack,\n+                threadName, location, currentTimeMillis);\n+    }\n }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/384ed1e8eea7b0f043e977b8b991527ad721ae2f/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "sha": "af2411cb6c9028065663c9acfa3324f1bd41200a",
                "status": "modified"
            },
            {
                "additions": 74,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/384ed1e8eea7b0f043e977b8b991527ad721ae2f/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggersWithAsyncLoggerConfigTest.java",
                "changes": 74,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggersWithAsyncLoggerConfigTest.java?ref=384ed1e8eea7b0f043e977b8b991527ad721ae2f",
                "deletions": 0,
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggersWithAsyncLoggerConfigTest.java",
                "patch": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.core.async;\n+\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.config.Configuration;\n+import org.apache.logging.log4j.core.config.ConfigurationFactory;\n+import org.apache.logging.log4j.core.util.Constants;\n+import org.apache.logging.log4j.status.StatusLogger;\n+import org.apache.logging.log4j.test.appender.ListAppender;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+public class AsyncLoggersWithAsyncLoggerConfigTest {\n+    private static Configuration config;\n+    private static ListAppender listAppender;\n+    private static LoggerContext ctx;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        System.setProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY,\n+                \"AsyncLoggersWithAsyncLoggerConfigTest.xml\");\n+        System.setProperty(Constants.LOG4J_CONTEXT_SELECTOR, AsyncLoggerContextSelector.class.getName());\n+        ctx = (LoggerContext) LogManager.getContext(false);\n+        config = ctx.getConfiguration();\n+        listAppender = (ListAppender) config.getAppender(\"List\");\n+    }\n+\n+    @AfterClass\n+    public static void cleanupClass() {\n+        System.clearProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY);\n+        System.clearProperty(Constants.LOG4J_CONTEXT_SELECTOR);\n+        ctx.reconfigure();\n+        StatusLogger.getLogger().reset();\n+    }\n+\n+    @Test\n+    public void testLoggingWorks() throws Exception {        \n+        final Logger logger = LogManager.getLogger();\n+        logger.error(\"This is a test\");\n+        logger.warn(\"Hello world!\");\n+        Thread.sleep(100);\n+        final List<String> list = listAppender.getMessages();\n+        assertNotNull(\"No events generated\", list);\n+        assertTrue(\"Incorrect number of events. Expected 2, got \" + list.size(), list.size() == 2);\n+        String msg = list.get(0);\n+        String expected = getClass().getName() + \" This is a test\";\n+        assertTrue(\"Expected \" + expected + \", Actual \" + msg, expected.equals(msg));\n+        msg = list.get(1);\n+        expected = getClass().getName() + \" Hello world!\";\n+        assertTrue(\"Expected \" + expected + \", Actual \" + msg, expected.equals(msg));\n+    }\n+}",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/384ed1e8eea7b0f043e977b8b991527ad721ae2f/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggersWithAsyncLoggerConfigTest.java",
                "sha": "23f5e9779c568e44b0c58381c6a3eae07d3f36d0",
                "status": "added"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/384ed1e8eea7b0f043e977b8b991527ad721ae2f/log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java?ref=384ed1e8eea7b0f043e977b8b991527ad721ae2f",
                "deletions": 0,
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java",
                "patch": "@@ -22,15 +22,20 @@\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n+import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.Map;\n \n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.Marker;\n+import org.apache.logging.log4j.MarkerManager;\n import org.apache.logging.log4j.ThreadContext.ContextStack;\n+import org.apache.logging.log4j.core.LogEvent;\n import org.apache.logging.log4j.core.impl.ThrowableProxy;\n import org.apache.logging.log4j.message.Message;\n import org.apache.logging.log4j.message.SimpleMessage;\n import org.apache.logging.log4j.message.TimestampMessage;\n+import org.apache.logging.log4j.spi.MutableThreadContextStack;\n import org.junit.Test;\n \n import static org.junit.Assert.*;\n@@ -188,4 +193,37 @@ public void testSerializationDeserialization() throws IOException, ClassNotFound\n         assertEquals(location, other.getSource());\n         assertEquals(currentTimeMillis, other.getTimeMillis());\n     }\n+    \n+    @Test\n+    public void testCreateMementoReturnsCopy() {\n+        RingBufferLogEvent evt = new RingBufferLogEvent();\n+        String loggerName = \"logger.name\";\n+        Marker marker = MarkerManager.getMarker(\"marked man\");\n+        String fqcn = \"f.q.c.n\";\n+        Level level = Level.TRACE;\n+        Message data = new SimpleMessage(\"message\");\n+        Throwable t = new InternalError(\"not a real error\");\n+        Map<String, String> map = new HashMap<String, String>();\n+        map.put(\"key\", \"value\");\n+        ContextStack contextStack = new MutableThreadContextStack(Arrays.asList(\"a\", \"b\"));\n+        String threadName = \"main\";\n+        StackTraceElement location = null;\n+        long currentTimeMillis = 12345;\n+        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,\n+                contextStack, threadName, location, currentTimeMillis);\n+        \n+        LogEvent actual = evt.createMemento();\n+        assertEquals(evt.getLoggerName(), actual.getLoggerName());\n+        assertEquals(evt.getMarker(), actual.getMarker());\n+        assertEquals(evt.getLoggerFqcn(), actual.getLoggerFqcn());\n+        assertEquals(evt.getLevel(), actual.getLevel());\n+        assertEquals(evt.getMessage(), actual.getMessage());\n+        assertEquals(evt.getThrown(), actual.getThrown());\n+        assertEquals(evt.getContextMap(), actual.getContextMap());\n+        assertEquals(evt.getContextStack(), actual.getContextStack());\n+        assertEquals(evt.getThreadName(), actual.getThreadName());\n+        assertEquals(evt.getTimeMillis(), actual.getTimeMillis());\n+        assertEquals(evt.getSource(), actual.getSource());\n+        assertEquals(evt.getThrownProxy(), actual.getThrownProxy());\n+    }\n }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/384ed1e8eea7b0f043e977b8b991527ad721ae2f/log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java",
                "sha": "3c3875b2fe5c9045ea9d51620c30d8ad23782af0",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/384ed1e8eea7b0f043e977b8b991527ad721ae2f/log4j-core/src/test/resources/AsyncLoggersWithAsyncLoggerConfigTest.xml",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/resources/AsyncLoggersWithAsyncLoggerConfigTest.xml?ref=384ed1e8eea7b0f043e977b8b991527ad721ae2f",
                "deletions": 0,
                "filename": "log4j-core/src/test/resources/AsyncLoggersWithAsyncLoggerConfigTest.xml",
                "patch": "@@ -0,0 +1,14 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<Configuration status=\"ERROR\">\n+  <Appenders>\n+    <List name=\"List\">\n+      <PatternLayout pattern=\"%c %m\"/>\n+    </List>\n+  </Appenders>\n+  \n+  <Loggers>\n+    <AsyncRoot level=\"trace\">\n+      <AppenderRef ref=\"List\"/>\n+    </AsyncRoot>\n+  </Loggers>\n+</Configuration>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/384ed1e8eea7b0f043e977b8b991527ad721ae2f/log4j-core/src/test/resources/AsyncLoggersWithAsyncLoggerConfigTest.xml",
                "sha": "131a22afd81dd7c394ce18933b15d572bd864f49",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/384ed1e8eea7b0f043e977b8b991527ad721ae2f/src/changes/changes.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=384ed1e8eea7b0f043e977b8b991527ad721ae2f",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -22,6 +22,9 @@\n   </properties>\n   <body>\n     <release version=\"2.0-rc2\" date=\"2014-MM-DD\" description=\"Bug fixes and enhancements\">\n+      <action issue=\"LOG4J2-669\" dev=\"rpopma\" type=\"fix\">\n+        Prevent NPE when combining AsyncLoggers with AsyncLoggerConfigs.\n+      </action>\n       <action issue=\"LOG4J2-42\" dev=\"rgoers\" type=\"add\">\n         Create an appender to route log events to the ServletContext log.\n       </action>",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/384ed1e8eea7b0f043e977b8b991527ad721ae2f/src/changes/changes.xml",
                "sha": "47922f7c8d59c58bc4ef65cef96d0122c9608f2f",
                "status": "modified"
            }
        ],
        "message": "LOG4J2-669: Prevent NPE when combining AsyncLoggers with AsyncLoggerConfigs\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1602578 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/83e5248d5295d4ed73eab6f7b292bd5bdaaa5145",
        "repo": "logging-log4j2",
        "unit_tests": [
            "RingBufferLogEventTest.java"
        ]
    },
    "logging-log4j2_3c524ea": {
        "bug_id": "logging-log4j2_3c524ea",
        "commit": "https://github.com/apache/logging-log4j2/commit/3c524ea93f69294d543f3b37d11d0b1afa936a21",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/pom.xml",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/pom.xml?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 4,
                "filename": "core/pom.xml",
                "patch": "@@ -105,8 +105,8 @@\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n-      <groupId>org.hibernate</groupId>\n-      <artifactId>hibernate-entitymanager</artifactId>\n+      <groupId>org.eclipse.persistence</groupId>\n+      <artifactId>org.eclipse.persistence.jpa</artifactId>\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n@@ -135,8 +135,8 @@\n       <optional>true</optional>\n     </dependency>\n     <dependency>\n-      <groupId>org.hibernate.javax.persistence</groupId>\n-      <artifactId>hibernate-jpa-2.1-api</artifactId>\n+      <groupId>org.eclipse.persistence</groupId>\n+      <artifactId>javax.persistence</artifactId>\n       <scope>compile</scope>\n       <optional>true</optional>\n     </dependency>",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/pom.xml",
                "sha": "01d5fcec8f8cc55d9fb496b2c2b1f5e7021f567b",
                "status": "modified"
            },
            {
                "additions": 85,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/AbstractLogEventWrapperEntity.java",
                "changes": 86,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/AbstractLogEventWrapperEntity.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/AbstractLogEventWrapperEntity.java",
                "patch": "@@ -17,6 +17,8 @@\n package org.apache.logging.log4j.core.appender.db.jpa;\n \n import java.util.Map;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n import javax.persistence.MappedSuperclass;\n import javax.persistence.Transient;\n \n@@ -55,6 +57,7 @@\n  * @see BasicLogEventEntity\n  */\n @MappedSuperclass\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n public abstract class AbstractLogEventWrapperEntity implements LogEvent {\n     private static final long serialVersionUID = 1L;\n \n@@ -67,7 +70,7 @@\n      */\n     @SuppressWarnings(\"unused\")\n     protected AbstractLogEventWrapperEntity() {\n-        this(null);\n+        this(new NullLogEvent());\n     }\n \n     /**\n@@ -77,6 +80,9 @@ protected AbstractLogEventWrapperEntity() {\n      * @param wrappedEvent The underlying event from which information is obtained.\n      */\n     protected AbstractLogEventWrapperEntity(final LogEvent wrappedEvent) {\n+        if (wrappedEvent == null) {\n+            throw new IllegalArgumentException(\"The wrapped event cannot be null.\");\n+        }\n         this.wrappedEvent = wrappedEvent;\n     }\n \n@@ -234,4 +240,82 @@ public final boolean isEndOfBatch() {\n     public final void setEndOfBatch(final boolean endOfBatch) {\n         this.getWrappedEvent().setEndOfBatch(endOfBatch);\n     }\n+\n+    private static class NullLogEvent implements LogEvent {\n+\n+        @Override\n+        public Level getLevel() {\n+            return null;\n+        }\n+\n+        @Override\n+        public String getLoggerName() {\n+            return null;\n+        }\n+\n+        @Override\n+        public StackTraceElement getSource() {\n+            return null;\n+        }\n+\n+        @Override\n+        public Message getMessage() {\n+            return null;\n+        }\n+\n+        @Override\n+        public Marker getMarker() {\n+            return null;\n+        }\n+\n+        @Override\n+        public String getThreadName() {\n+            return null;\n+        }\n+\n+        @Override\n+        public long getMillis() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public Throwable getThrown() {\n+            return null;\n+        }\n+\n+        @Override\n+        public Map<String, String> getContextMap() {\n+            return null;\n+        }\n+\n+        @Override\n+        public ThreadContext.ContextStack getContextStack() {\n+            return null;\n+        }\n+\n+        @Override\n+        public String getFQCN() {\n+            return null;\n+        }\n+\n+        @Override\n+        public boolean isIncludeLocation() {\n+            return false;\n+        }\n+\n+        @Override\n+        public void setIncludeLocation(boolean locationRequired) {\n+\n+        }\n+\n+        @Override\n+        public boolean isEndOfBatch() {\n+            return false;\n+        }\n+\n+        @Override\n+        public void setEndOfBatch(boolean endOfBatch) {\n+\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/AbstractLogEventWrapperEntity.java",
                "sha": "791e9227fe49ab93ea54dfedc74b4e3c89edfe9a",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/JPADatabaseManager.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/JPADatabaseManager.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 16,
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/JPADatabaseManager.java",
                "patch": "@@ -36,9 +36,7 @@\n     private final Constructor<? extends AbstractLogEventWrapperEntity> entityConstructor;\n     private final String persistenceUnitName;\n \n-    private EntityManager entityManager;\n     private EntityManagerFactory entityManagerFactory;\n-    private EntityTransaction transaction;\n \n     private JPADatabaseManager(final String name, final int bufferSize,\n                                final Class<? extends AbstractLogEventWrapperEntity> entityClass,\n@@ -53,27 +51,18 @@ private JPADatabaseManager(final String name, final int bufferSize,\n     @Override\n     protected void connectInternal() {\n         this.entityManagerFactory = Persistence.createEntityManagerFactory(this.persistenceUnitName);\n-        this.entityManager = this.entityManagerFactory.createEntityManager();\n-        this.transaction = this.entityManager.getTransaction();\n     }\n \n     @Override\n     protected void disconnectInternal() {\n-        this.transaction = null;\n-\n-        if (this.entityManager != null && this.entityManager.isOpen()) {\n-            this.entityManager.close();\n-        }\n-\n         if (this.entityManagerFactory != null && this.entityManagerFactory.isOpen()) {\n             this.entityManagerFactory.close();\n         }\n     }\n \n     @Override\n     protected void writeInternal(final LogEvent event) {\n-        if (!this.isConnected() || this.transaction == null || this.entityManager == null\n-                || this.entityManagerFactory == null) {\n+        if (!this.isConnected() || this.entityManagerFactory == null) {\n             LOGGER.error(\"Cannot write logging event; manager [{}] not connected to the database.\", this.getName());\n             return;\n         }\n@@ -86,13 +75,22 @@ protected void writeInternal(final LogEvent event) {\n             return;\n         }\n \n+        EntityManager entityManager = null;\n+        EntityTransaction transaction = null;\n         try {\n-            this.transaction.begin();\n-            this.entityManager.persist(entity);\n-            this.transaction.commit();\n+            entityManager = this.entityManagerFactory.createEntityManager();\n+            transaction = entityManager.getTransaction();\n+            transaction.begin();\n+            entityManager.persist(entity);\n+            transaction.commit();\n         } catch (final Exception e) {\n             LOGGER.error(\"Failed to persist log event entity.\", e);\n-            this.transaction.rollback();\n+            if (transaction != null && transaction.isActive())\n+                transaction.rollback();\n+        } finally {\n+            if (entityManager != null && entityManager.isOpen()) {\n+                entityManager.close();\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/JPADatabaseManager.java",
                "sha": "9839dd4f2c7f43e5cca09e710619e15cb4adc23e",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapAttributeConverter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapAttributeConverter.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapAttributeConverter.java",
                "patch": "@@ -31,6 +31,10 @@\n public class ContextMapAttributeConverter implements AttributeConverter<Map<String, String>, String> {\n     @Override\n     public String convertToDatabaseColumn(final Map<String, String> contextMap) {\n+        if (contextMap == null) {\n+            return null;\n+        }\n+\n         return contextMap.toString();\n     }\n ",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapAttributeConverter.java",
                "sha": "1dd20a46a129b8d7c66a857287e7a92d491cc58c",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapJsonAttributeConverter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapJsonAttributeConverter.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapJsonAttributeConverter.java",
                "patch": "@@ -37,6 +37,10 @@\n \n     @Override\n     public String convertToDatabaseColumn(final Map<String, String> contextMap) {\n+        if (contextMap == null) {\n+            return null;\n+        }\n+\n         try {\n             return OBJECT_MAPPER.writeValueAsString(contextMap);\n         } catch (IOException e) {",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapJsonAttributeConverter.java",
                "sha": "ab2ef74bd89031d05fa46288d917b71a3ddfa830",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackAttributeConverter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackAttributeConverter.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackAttributeConverter.java",
                "patch": "@@ -32,6 +32,10 @@\n public class ContextStackAttributeConverter implements AttributeConverter<ThreadContext.ContextStack, String> {\n     @Override\n     public String convertToDatabaseColumn(final ThreadContext.ContextStack contextStack) {\n+        if (contextStack == null) {\n+            return null;\n+        }\n+\n         StringBuilder builder = new StringBuilder();\n         for (String value : contextStack.asList()) {\n             if (builder.length() > 0) {",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackAttributeConverter.java",
                "sha": "67f2f25dcb78eb7e698502610675740365b94253",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackJsonAttributeConverter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackJsonAttributeConverter.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackJsonAttributeConverter.java",
                "patch": "@@ -38,6 +38,10 @@\n public class ContextStackJsonAttributeConverter implements AttributeConverter<ThreadContext.ContextStack, String> {\n     @Override\n     public String convertToDatabaseColumn(final ThreadContext.ContextStack contextStack) {\n+        if (contextStack == null) {\n+            return null;\n+        }\n+\n         try {\n             return ContextMapJsonAttributeConverter.OBJECT_MAPPER.writeValueAsString(contextStack.asList());\n         } catch (IOException e) {",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackJsonAttributeConverter.java",
                "sha": "aeec9b3dd6a45948357bdda1c6d098a1882fecc2",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MarkerAttributeConverter.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MarkerAttributeConverter.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MarkerAttributeConverter.java",
                "patch": "@@ -30,6 +30,10 @@\n public class MarkerAttributeConverter implements AttributeConverter<Marker, String> {\n     @Override\n     public String convertToDatabaseColumn(final Marker marker) {\n+        if (marker == null) {\n+            return null;\n+        }\n+\n         StringBuilder builder = new StringBuilder(marker.getName());\n         Marker parent = marker.getParent();\n         int levels = 0;\n@@ -51,6 +55,10 @@ public String convertToDatabaseColumn(final Marker marker) {\n \n     @Override\n     public Marker convertToEntityAttribute(final String s) {\n+        if (s == null || s.length() == 0) {\n+            return null;\n+        }\n+\n         int bracket = s.indexOf(\"[\");\n \n         return bracket < 1 ? MarkerManager.getMarker(s) : MarkerManager.getMarker(s.substring(0, bracket));",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MarkerAttributeConverter.java",
                "sha": "90fc41a922239e4a367bd420e41c0108a7e84aa2",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverter.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverter.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverter.java",
                "patch": "@@ -32,11 +32,19 @@\n \n     @Override\n     public String convertToDatabaseColumn(final Message message) {\n+        if (message == null) {\n+            return null;\n+        }\n+\n         return message.getFormattedMessage();\n     }\n \n     @Override\n     public Message convertToEntityAttribute(final String s) {\n+        if (s == null || s.length() == 0) {\n+            return null;\n+        }\n+\n         return log.getMessageFactory().newMessage(s);\n     }\n }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverter.java",
                "sha": "3dfd92d77d8dafba0e32d916cc9cfbd8b6d380e9",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/StackTraceElementAttributeConverter.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/StackTraceElementAttributeConverter.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/StackTraceElementAttributeConverter.java",
                "patch": "@@ -29,11 +29,19 @@\n \n     @Override\n     public String convertToDatabaseColumn(final StackTraceElement element) {\n+        if (element == null) {\n+            return null;\n+        }\n+\n         return element.toString();\n     }\n \n     @Override\n     public StackTraceElement convertToEntityAttribute(final String s) {\n+        if (s == null || s.length() == 0) {\n+            return null;\n+        }\n+\n         return StackTraceElementAttributeConverter.convertString(s);\n     }\n ",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/StackTraceElementAttributeConverter.java",
                "sha": "3892395a7caa2cdc47f5a32f92a7e9aba01d215c",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java",
                "patch": "@@ -50,6 +50,10 @@\n \n     @Override\n     public String convertToDatabaseColumn(final Throwable throwable) {\n+        if (throwable == null) {\n+            return null;\n+        }\n+\n         StringBuilder builder = new StringBuilder();\n         this.convertThrowable(builder, throwable);\n         return builder.toString();",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java",
                "sha": "81fcfde4111c551d02918646f301f8ad9315f070",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/JPAAppenderTest.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/JPAAppenderTest.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 12,
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/JPAAppenderTest.java",
                "patch": "@@ -33,7 +33,6 @@\n import org.apache.logging.log4j.core.config.ConfigurationFactory;\n import org.apache.logging.log4j.core.config.DefaultConfiguration;\n import org.apache.logging.log4j.status.StatusLogger;\n-import org.junit.Ignore;\n import org.junit.Test;\n \n import static org.junit.Assert.*;\n@@ -53,8 +52,10 @@ public void setUp(final String configFileName) throws SQLException {\n \n         statement = this.connection.createStatement();\n         statement.executeUpdate(\"CREATE TABLE jpaBasicLogEntry ( \" +\n-                    \"id INTEGER IDENTITY, millis BIGINT, level VARCHAR(10), logger VARCHAR(255), \" +\n-                    \"message VARCHAR(1024), thrown VARCHAR(1048576), contextMapJson VARCHAR(1048576)\" +\n+                    \"id INTEGER IDENTITY, millis BIGINT, level VARCHAR(10), loggerName VARCHAR(255), \" +\n+                    \"message VARCHAR(1024), thrown VARCHAR(1048576), contextMapJson VARCHAR(1048576),\" +\n+                    \"fqcn VARCHAR(1024), contextStack VARCHAR(1048576), marker VARCHAR(255), source VARCHAR(2048),\" +\n+                    \"threadName VARCHAR(255)\" +\n                 \" )\");\n         statement.close();\n \n@@ -89,7 +90,8 @@ public void tearDown() throws SQLException {\n                     if (statement != null) {\n                         statement.close();\n                     }\n-                } catch (final SQLException ignore) { /* */\n+                } catch (final SQLException ignore) {\n+                    /* */\n                 }\n             }\n \n@@ -145,7 +147,6 @@ public void testBadConstructorEntity02() {\n     }\n \n     @Test\n-    @Ignore(\"Until Hibernate fixes https://hibernate.atlassian.net/browse/HHH-8111\")\n     public void testBaseJpaEntityAppender() throws SQLException {\n         try {\n             this.setUp(\"log4j2-jpa-base.xml\");\n@@ -208,7 +209,6 @@ public void testBaseJpaEntityAppender() throws SQLException {\n     }\n \n     @Test\n-    @Ignore(\"Until Hibernate fixes https://hibernate.atlassian.net/browse/HHH-8111\")\n     public void testBasicJpaEntityAppender() throws SQLException {\n         try {\n             this.setUp(\"log4j2-jpa-basic.xml\");\n@@ -237,32 +237,32 @@ public void testBasicJpaEntityAppender() throws SQLException {\n             assertTrue(\"The date should be later than pre-logging (1).\", date >= millis);\n             assertTrue(\"The date should be earlier than now (1).\", date <= System.currentTimeMillis());\n             assertEquals(\"The level column is not correct (1).\", \"DEBUG\", resultSet.getString(\"level\"));\n-            assertEquals(\"The logger column is not correct (1).\", logger1.getName(), resultSet.getString(\"logger\"));\n+            assertEquals(\"The logger column is not correct (1).\", logger1.getName(), resultSet.getString(\"loggerName\"));\n             assertEquals(\"The message column is not correct (1).\", \"Test my debug 01.\",\n                     resultSet.getString(\"message\"));\n-            assertNull(\"The exception column is not correct (1).\", resultSet.getString(\"exception\"));\n+            assertNull(\"The exception column is not correct (1).\", resultSet.getString(\"thrown\"));\n \n             assertTrue(\"There should be at least two rows.\", resultSet.next());\n \n             date = resultSet.getLong(\"millis\");\n             assertTrue(\"The date should be later than pre-logging (2).\", date >= millis);\n             assertTrue(\"The date should be earlier than now (2).\", date <= System.currentTimeMillis());\n             assertEquals(\"The level column is not correct (2).\", \"WARN\", resultSet.getString(\"level\"));\n-            assertEquals(\"The logger column is not correct (2).\", logger1.getName(), resultSet.getString(\"logger\"));\n+            assertEquals(\"The logger column is not correct (2).\", logger1.getName(), resultSet.getString(\"loggerName\"));\n             assertEquals(\"The message column is not correct (2).\", \"This is another warning 02.\",\n                     resultSet.getString(\"message\"));\n-            assertEquals(\"The exception column is not correct (2).\", stackTrace, resultSet.getString(\"exception\"));\n+            assertEquals(\"The exception column is not correct (2).\", stackTrace, resultSet.getString(\"thrown\"));\n \n             assertTrue(\"There should be three rows.\", resultSet.next());\n \n             date = resultSet.getLong(\"millis\");\n             assertTrue(\"The date should be later than pre-logging (3).\", date >= millis);\n             assertTrue(\"The date should be earlier than now (3).\", date <= System.currentTimeMillis());\n             assertEquals(\"The level column is not correct (3).\", \"FATAL\", resultSet.getString(\"level\"));\n-            assertEquals(\"The logger column is not correct (3).\", logger2.getName(), resultSet.getString(\"logger\"));\n+            assertEquals(\"The logger column is not correct (3).\", logger2.getName(), resultSet.getString(\"loggerName\"));\n             assertEquals(\"The message column is not correct (3).\", \"A fatal warning has been issued.\",\n                     resultSet.getString(\"message\"));\n-            assertNull(\"The exception column is not correct (3).\", resultSet.getString(\"exception\"));\n+            assertNull(\"The exception column is not correct (3).\", resultSet.getString(\"thrown\"));\n \n             assertFalse(\"There should not be four rows.\", resultSet.next());\n         } finally {",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/JPAAppenderTest.java",
                "sha": "59c05dc729db101cf4303d679ec34196429a0a73",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/TestBaseEntity.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/TestBaseEntity.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 11,
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/TestBaseEntity.java",
                "patch": "@@ -81,68 +81,69 @@ public void setEventDate(final Date date) {\n     @Enumerated(EnumType.STRING)\n     @Column(name = \"level\")\n     public Level getLevel() {\n-        return getWrappedEvent().getLevel();\n+        return this.getWrappedEvent().getLevel();\n     }\n \n     @Override\n     @Basic\n     @Column(name = \"logger\")\n     public String getLoggerName() {\n-        return getWrappedEvent().getLoggerName();\n+        return this.getWrappedEvent().getLoggerName();\n     }\n \n     @Override\n     @Transient\n     public StackTraceElement getSource() {\n-        return getWrappedEvent().getSource();\n+        return this.getWrappedEvent().getSource();\n     }\n \n     @Override\n     @Convert(converter = MessageAttributeConverter.class)\n+    @Column(name = \"message\")\n     public Message getMessage() {\n-        return getWrappedEvent().getMessage();\n+        return this.getWrappedEvent().getMessage();\n     }\n \n     @Override\n     @Transient\n     public Marker getMarker() {\n-        return getWrappedEvent().getMarker();\n+        return this.getWrappedEvent().getMarker();\n     }\n \n     @Override\n     @Transient\n     public String getThreadName() {\n-        return getWrappedEvent().getThreadName();\n+        return this.getWrappedEvent().getThreadName();\n     }\n \n     @Override\n     @Transient\n     public long getMillis() {\n-        return getWrappedEvent().getMillis();\n+        return this.getWrappedEvent().getMillis();\n     }\n \n     @Override\n     @Convert(converter = ThrowableAttributeConverter.class)\n     @Column(name = \"exception\")\n     public Throwable getThrown() {\n-        return getWrappedEvent().getThrown();\n+        return this.getWrappedEvent().getThrown();\n     }\n \n     @Override\n     @Transient\n     public Map<String, String> getContextMap() {\n-        return getWrappedEvent().getContextMap();\n+        return this.getWrappedEvent().getContextMap();\n     }\n \n     @Override\n     @Transient\n     public ThreadContext.ContextStack getContextStack() {\n-        return getWrappedEvent().getContextStack();\n+        return this.getWrappedEvent().getContextStack();\n     }\n \n     @Override\n     @Transient\n     public String getFQCN() {\n-        return getWrappedEvent().getFQCN();\n+        return this.getWrappedEvent().getFQCN();\n     }\n }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/TestBaseEntity.java",
                "sha": "5175c46ad16e84a6a580c52320e63b63d96d2448",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/TestBasicEntity.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/TestBasicEntity.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 33,
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/TestBasicEntity.java",
                "patch": "@@ -24,10 +24,7 @@\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.Table;\n-import javax.persistence.Transient;\n \n-import org.apache.logging.log4j.Marker;\n-import org.apache.logging.log4j.ThreadContext;\n import org.apache.logging.log4j.core.LogEvent;\n import org.apache.logging.log4j.core.appender.db.jpa.converter.ContextMapJsonAttributeConverter;\n \n@@ -58,40 +55,10 @@ public void setId(final long id) {\n         this.id = id;\n     }\n \n-    @Override\n-    @Transient\n-    public StackTraceElement getSource() {\n-        return super.getSource();\n-    }\n-\n-    @Override\n-    @Transient\n-    public Marker getMarker() {\n-        return super.getMarker();\n-    }\n-\n-    @Override\n-    @Transient\n-    public String getThreadName() {\n-        return super.getThreadName();\n-    }\n-\n     @Override\n     @Convert(converter = ContextMapJsonAttributeConverter.class)\n     @Column(name = \"contextMapJson\")\n     public Map<String, String> getContextMap() {\n         return super.getContextMap();\n     }\n-\n-    @Override\n-    @Transient\n-    public ThreadContext.ContextStack getContextStack() {\n-        return super.getContextStack();\n-    }\n-\n-    @Override\n-    @Transient\n-    public String getFQCN() {\n-        return super.getFQCN();\n-    }\n }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/TestBasicEntity.java",
                "sha": "f3e0fa40527fbe26e75c0971022d48cd6faf4a6a",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapAttributeConverterTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapAttributeConverterTest.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 0,
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapAttributeConverterTest.java",
                "patch": "@@ -24,6 +24,7 @@\n import org.junit.Test;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n \n public class ContextMapAttributeConverterTest {\n     private ContextMapAttributeConverter converter;\n@@ -59,6 +60,11 @@ public void testConvertToDatabaseColumn02() {\n                 this.converter.convertToDatabaseColumn(map));\n     }\n \n+    @Test\n+    public void testConvertNullToDatabaseColumn() {\n+        assertNull(\"The converted value should be null.\", this.converter.convertToDatabaseColumn(null));\n+    }\n+\n     @Test(expected = UnsupportedOperationException.class)\n     public void testConvertToEntityAttribute() {\n         this.converter.convertToEntityAttribute(null);",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapAttributeConverterTest.java",
                "sha": "ef601b30912840e6879b5712e83bdf3a90471ecb",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapJsonAttributeConverterTest.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapJsonAttributeConverterTest.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 0,
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapJsonAttributeConverterTest.java",
                "patch": "@@ -70,4 +70,15 @@ public void testConvert02() {\n         assertNotNull(\"The reversed value should not be null.\", reversed);\n         assertEquals(\"The reversed value is not correct.\", map, reversed);\n     }\n+\n+    @Test\n+    public void testConvertNullToDatabaseColumn() {\n+        assertNull(\"The converted value should be null.\", this.converter.convertToDatabaseColumn(null));\n+    }\n+\n+    @Test\n+    public void testConvertNullOrBlankToEntityAttribute() {\n+        assertNull(\"The converted attribute should be null (1).\", this.converter.convertToEntityAttribute(null));\n+        assertNull(\"The converted attribute should be null (2).\", this.converter.convertToEntityAttribute(\"\"));\n+    }\n }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapJsonAttributeConverterTest.java",
                "sha": "a97886452b66c2ca2ee89fb6f6dd400f0799fa99",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackAttributeConverterTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackAttributeConverterTest.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 2,
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackAttributeConverterTest.java",
                "patch": "@@ -16,8 +16,6 @@\n  */\n package org.apache.logging.log4j.core.appender.db.jpa.converter;\n \n-import static org.junit.Assert.*;\n-\n import java.util.Arrays;\n \n import org.apache.logging.log4j.ThreadContext;\n@@ -26,6 +24,8 @@\n import org.junit.Before;\n import org.junit.Test;\n \n+import static org.junit.Assert.*;\n+\n public class ContextStackAttributeConverterTest {\n     private ContextStackAttributeConverter converter;\n \n@@ -58,6 +58,11 @@ public void testConvertToDatabaseColumn02() {\n                 this.converter.convertToDatabaseColumn(stack));\n     }\n \n+    @Test\n+    public void testConvertNullToDatabaseColumn() {\n+        assertNull(\"The converted value should be null.\", this.converter.convertToDatabaseColumn(null));\n+    }\n+\n     @Test(expected = UnsupportedOperationException.class)\n     public void testConvertToEntityAttribute() {\n         this.converter.convertToEntityAttribute(null);",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackAttributeConverterTest.java",
                "sha": "f700314c79813f73682ae2e515e3fbee4b1d699e",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackJsonAttributeConverterTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackJsonAttributeConverterTest.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 2,
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackJsonAttributeConverterTest.java",
                "patch": "@@ -16,8 +16,6 @@\n  */\n package org.apache.logging.log4j.core.appender.db.jpa.converter;\n \n-import static org.junit.Assert.*;\n-\n import java.util.Arrays;\n \n import org.apache.logging.log4j.ThreadContext;\n@@ -26,6 +24,8 @@\n import org.junit.Before;\n import org.junit.Test;\n \n+import static org.junit.Assert.*;\n+\n public class ContextStackJsonAttributeConverterTest {\n     private ContextStackJsonAttributeConverter converter;\n \n@@ -74,4 +74,15 @@ public void testConvert02() {\n         assertEquals(\"The reversed value is not correct.\", stack.asList(),\n                 reversed.asList());\n     }\n+\n+    @Test\n+    public void testConvertNullToDatabaseColumn() {\n+        assertNull(\"The converted value should be null.\", this.converter.convertToDatabaseColumn(null));\n+    }\n+\n+    @Test\n+    public void testConvertNullOrBlankToEntityAttribute() {\n+        assertNull(\"The converted attribute should be null (1).\", this.converter.convertToEntityAttribute(null));\n+        assertNull(\"The converted attribute should be null (2).\", this.converter.convertToEntityAttribute(\"\"));\n+    }\n }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackJsonAttributeConverterTest.java",
                "sha": "4da94a7f47295af28b35ac5b3d3b130d14ffe67c",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MarkerAttributeConverterTest.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MarkerAttributeConverterTest.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 0,
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MarkerAttributeConverterTest.java",
                "patch": "@@ -75,4 +75,15 @@ public void testConvert02() {\n         assertNotNull(\"The second parent should not be null.\", marker.getParent().getParent());\n         assertEquals(\"The second parent is not correct.\", \"finalConvert03\", marker.getParent().getParent().getName());\n     }\n+\n+    @Test\n+    public void testConvertNullToDatabaseColumn() {\n+        assertNull(\"The converted value should be null.\", this.converter.convertToDatabaseColumn(null));\n+    }\n+\n+    @Test\n+    public void testConvertNullOrBlankToEntityAttribute() {\n+        assertNull(\"The converted attribute should be null (1).\", this.converter.convertToEntityAttribute(null));\n+        assertNull(\"The converted attribute should be null (2).\", this.converter.convertToEntityAttribute(\"\"));\n+    }\n }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MarkerAttributeConverterTest.java",
                "sha": "5c9aae5a0564f08e164cf2c303d6467bbec9cd4d",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverterTest.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverterTest.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 0,
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverterTest.java",
                "patch": "@@ -53,4 +53,15 @@ public void testConvert01() {\n         assertNotNull(\"The reversed value should not be null.\", reversed);\n         assertEquals(\"The reversed value is not correct.\", \"Message #3 said [Hello].\", reversed.getFormattedMessage());\n     }\n+\n+    @Test\n+    public void testConvertNullToDatabaseColumn() {\n+        assertNull(\"The converted value should be null.\", this.converter.convertToDatabaseColumn(null));\n+    }\n+\n+    @Test\n+    public void testConvertNullOrBlankToEntityAttribute() {\n+        assertNull(\"The converted attribute should be null (1).\", this.converter.convertToEntityAttribute(null));\n+        assertNull(\"The converted attribute should be null (2).\", this.converter.convertToEntityAttribute(\"\"));\n+    }\n }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverterTest.java",
                "sha": "4108a9391e2a4d9073ea246b412426a665d5e07b",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/StackTraceElementAttributeConverterTest.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/StackTraceElementAttributeConverterTest.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 0,
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/StackTraceElementAttributeConverterTest.java",
                "patch": "@@ -121,4 +121,15 @@ public void testConvert04() {\n         assertEquals(\"The line number is not correct.\", -2, reversed.getLineNumber());\n         assertTrue(\"The native flag should be true.\", reversed.isNativeMethod());\n     }\n+\n+    @Test\n+    public void testConvertNullToDatabaseColumn() {\n+        assertNull(\"The converted value should be null.\", this.converter.convertToDatabaseColumn(null));\n+    }\n+\n+    @Test\n+    public void testConvertNullOrBlankToEntityAttribute() {\n+        assertNull(\"The converted attribute should be null (1).\", this.converter.convertToEntityAttribute(null));\n+        assertNull(\"The converted attribute should be null (2).\", this.converter.convertToEntityAttribute(\"\"));\n+    }\n }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/StackTraceElementAttributeConverterTest.java",
                "sha": "8c8742e7825e12692b669c33cae20a21268e57e8",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverterTest.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverterTest.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 0,
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverterTest.java",
                "patch": "@@ -73,6 +73,17 @@ public void testConvert02() {\n         assertEquals(\"The reversed value is not correct.\", stackTrace, getStackTrace(reversed));\n     }\n \n+    @Test\n+    public void testConvertNullToDatabaseColumn() {\n+        assertNull(\"The converted value should be null.\", this.converter.convertToDatabaseColumn(null));\n+    }\n+\n+    @Test\n+    public void testConvertNullOrBlankToEntityAttribute() {\n+        assertNull(\"The converted attribute should be null (1).\", this.converter.convertToEntityAttribute(null));\n+        assertNull(\"The converted attribute should be null (2).\", this.converter.convertToEntityAttribute(\"\"));\n+    }\n+\n     private static String getStackTrace(Throwable throwable) {\n         String returnValue = throwable.toString() + \"\\n\";\n ",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverterTest.java",
                "sha": "331cbfe589932b4de621155290f4418dc8ef8459",
                "status": "modified"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/resources/META-INF/orm.xml",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/resources/META-INF/orm.xml?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 0,
                "filename": "core/src/test/resources/META-INF/orm.xml",
                "patch": "@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one or more\n+ contributor license agreements.  See the NOTICE file distributed with\n+ this work for additional information regarding copyright ownership.\n+ The ASF licenses this file to You under the Apache License, Version 2.0\n+ (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+\n+-->\n+<entity-mappings xmlns=\"http://xmlns.jcp.org/xml/ns/persistence/orm\"\n+                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+                 xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence/orm\n+                                     http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd\"\n+                 version=\"2.1\">\n+  <!-- This is a workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=412454. This file can be deleted\n+   when that issue is fixed. -->\n+  <converter class=\"org.apache.logging.log4j.core.appender.db.jpa.converter.ContextMapAttributeConverter\" />\n+  <converter class=\"org.apache.logging.log4j.core.appender.db.jpa.converter.ContextMapJsonAttributeConverter\" />\n+  <converter class=\"org.apache.logging.log4j.core.appender.db.jpa.converter.ContextStackAttributeConverter\" />\n+  <converter class=\"org.apache.logging.log4j.core.appender.db.jpa.converter.ContextStackJsonAttributeConverter\" />\n+  <converter class=\"org.apache.logging.log4j.core.appender.db.jpa.converter.MarkerAttributeConverter\" />\n+  <converter class=\"org.apache.logging.log4j.core.appender.db.jpa.converter.MessageAttributeConverter\" />\n+  <converter class=\"org.apache.logging.log4j.core.appender.db.jpa.converter.StackTraceElementAttributeConverter\" />\n+  <converter class=\"org.apache.logging.log4j.core.appender.db.jpa.converter.ThrowableAttributeConverter\" />\n+</entity-mappings>",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/resources/META-INF/orm.xml",
                "sha": "ff7868816e02123c9a074707afebf9a170884514",
                "status": "added"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/resources/META-INF/persistence.xml",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/resources/META-INF/persistence.xml?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 14,
                "filename": "core/src/test/resources/META-INF/persistence.xml",
                "patch": "@@ -16,26 +16,26 @@\n  limitations under the License.\n \n -->\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+<persistence xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\"\n              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n-                                 http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\n-             version=\"1.0\">\n+             xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence\n+                                 http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\n+             version=\"2.1\">\n \n   <persistence-unit name=\"jpaAppenderTestUnit\">\n-    <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>\n+    <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>\n     <class>org.apache.logging.log4j.core.appender.db.jpa.TestBaseEntity</class>\n-    <!--<class>org.apache.logging.log4j.core.appender.db.jpa.TestBasicEntity</class>\n-      Until Hibernate fixes https://hibernate.atlassian.net/browse/HHH-8111-->\n+    <class>org.apache.logging.log4j.core.appender.db.jpa.TestBasicEntity</class>\n     <exclude-unlisted-classes>false</exclude-unlisted-classes>\n+    <shared-cache-mode>NONE</shared-cache-mode>\n     <properties>\n-      <property name=\"hibernate.connection.username\" value=\"sa\" />\n-      <property name=\"hibernate.connection.password\" value=\"\" />\n-      <property name=\"hibernate.connection.driver_class\" value=\"org.hsqldb.jdbcDriver\" />\n-      <property name=\"hibernate.connection.url\" value=\"jdbc:hsqldb:mem:Log4j;ifexists=true\" />\n-      <property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.HSQLDialect\" />\n-      <property name=\"hibernate.show_sql\" value=\"true\" />\n-      <property name=\"hibernate.format_sql\" value=\"true\" />\n+      <property name=\"javax.persistence.jdbc.driver\" value=\"org.hsqldb.jdbcDriver\"/>\n+      <property name=\"javax.persistence.jdbc.url\" value=\"jdbc:hsqldb:mem:Log4j;ifexists=true\"/>\n+      <property name=\"javax.persistence.jdbc.user\" value=\"sa\"/>\n+      <property name=\"javax.persistence.jdbc.password\" value=\"\"/>\n+      <property name=\"eclipselink.logging.level\" value=\"FINE\"/>\n+      <property name=\"eclipselink.logging.level.sql\" value=\"FINE\"/>\n+      <property name=\"eclipselink.logging.parameters\" value=\"true\"/>\n     </properties>\n   </persistence-unit>\n ",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/resources/META-INF/persistence.xml",
                "sha": "b5382ab705d1f056958f8159653b98fd65b1412d",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/pom.xml",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/pom.xml?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 6,
                "filename": "pom.xml",
                "patch": "@@ -423,14 +423,14 @@\n         <version>1.3.172</version>\n       </dependency>\n       <dependency>\n-        <groupId>org.hibernate</groupId>\n-        <artifactId>hibernate-entitymanager</artifactId>\n-        <version>4.3.0.Beta3</version>\n+        <groupId>org.eclipse.persistence</groupId>\n+        <artifactId>org.eclipse.persistence.jpa</artifactId>\n+        <version>2.5.0</version>\n       </dependency>\n       <dependency>\n-        <groupId>org.hibernate.javax.persistence</groupId>\n-        <artifactId>hibernate-jpa-2.1-api</artifactId>\n-        <version>1.0.0.Draft-16</version>\n+        <groupId>org.eclipse.persistence</groupId>\n+        <artifactId>javax.persistence</artifactId>\n+        <version>2.1.0</version>\n       </dependency>\n       <dependency>\n         <groupId>org.mongodb</groupId>",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/pom.xml",
                "sha": "21beca5a95c43e4a3e1203c84d7cf39706e4c03a",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/src/site/xdoc/manual/appenders.xml",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/site/xdoc/manual/appenders.xml?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "deletions": 17,
                "filename": "src/site/xdoc/manual/appenders.xml",
                "patch": "@@ -1217,7 +1217,7 @@\n <configuration status=\"error\">\n   <appenders>\n     <Jdbc name=\"databaseAppender\" tableName=\"dbo.application_log\">\n-      <DataSource jndiName=\"java:/comp/env/jdbc/ApplicationDataSource\" />\n+      <DataSource jndiName=\"java:/comp/env/jdbc/LoggingDataSource\" />\n       <Column name=\"eventDate\" isEventTimestamp=\"true\" />\n       <Column name=\"level\" pattern=\"%level\" />\n       <Column name=\"logger\" pattern=\"%logger\" />\n@@ -1472,9 +1472,13 @@\n         </subsection>\n         <a name=\"JPAAppender\"/>\n         <subsection name=\"JPAAppender\">\n-          <p>The JPAAppender writes log events to a relational database table using the Java Persistence API.\n+          <p>The JPAAppender writes log events to a relational database table using the Java Persistence API 2.1.\n             It requires the API and a provider implementation be on the classpath. It also requires a decorated entity\n-            configured to persist to the table desired.</p>\n+            configured to persist to the table desired. The entity should either extend\n+            org.apache.logging.log4j.core.appender.db.jpa.BasicLogEventEntity (if you mostly want to use the default\n+            mappings) or org.apache.logging.log4j.core.appender.db.jpa.AbstractLogEventWrapperEntity (if you want to\n+            significantly customize the mappings). See the Javadoc for these two classes for more information. You can\n+            also consult the source code of these two classes as an example of how to implement the entity.</p>\n           <table>\n             <tr>\n               <th>Parameter Name</th>\n@@ -1519,13 +1523,17 @@\n             <caption align=\"top\">JPAAppender Parameters</caption>\n           </table>\n           <p>\n-            Here is a sample configurations for the JPAAppender. The first XML sample is the Log4j configuration file,\n-            the second is the persistence.xml file. Hibernate ORM is assumed here, but any JPA provider will do:\n+            Here is a sample configuration for the JPAAppender. The first XML sample is the Log4j configuration file,\n+            the second is the persistence.xml file. EclipseLink is assumed here, but any JPA provider will do. You\n+            should <em>always</em> create a <em>separate</em> persistence unit for logging, for two reasons. First,\n+            &lt;shared-cache-mode&gt; <em>must</em> be set to \"NONE,\" which is usually not desired in normal JPA usage.\n+            Also, for performance reasons the logging entity should be isolated in its own persistence unit away from\n+            all other entities.\n \n             <pre class=\"prettyprint linenums lang-xml\"><![CDATA[<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <configuration status=\"error\">\n   <appenders>\n-    <Jpa name=\"databaseAppender\" persistenceUnitName=\"appPersistenceUnit\"\n+    <Jpa name=\"databaseAppender\" persistenceUnitName=\"loggingPersistenceUnit\"\n          entityClassName=\"com.example.logging.JpaLogEntity\" />\n   </appenders>\n   <loggers>\n@@ -1536,26 +1544,26 @@\n </configuration>]]></pre>\n \n             <pre class=\"prettyprint linenums lang-xml\"><![CDATA[<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+<persistence xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\"\n              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n-                                 http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\n-             version=\"1.0\">\n-  <persistence-unit name=\"appPersistenceUnit\">\n-    <provider>org.hibernate.ejb.HibernatePersistence</provider>\n-    <jpa-data-source>jdbc/ApplicationDataSource</jpa-data-source>\n+             xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence\n+                                 http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\n+             version=\"2.1\">\n+\n+  <persistence-unit name=\"loggingPersistenceUnit\">\n+    <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>\n+    <non-jta-data-source>jdbc/LoggingDataSource</non-jta-data-source>\n     <class>com.example.logging.JpaLogEntity</class>\n-    <properties>\n-      <property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.MySQL5Dialect\" />\n-    </properties>\n+    <shared-cache-mode>NONE</shared-cache-mode>\n   </persistence-unit>\n+\n </persistence>]]></pre>\n \n             <pre class=\"prettyprint linenums lang-java\"><![CDATA[package com.example.logging;\n ...\n @Entity\n @Table(name=\"application_log\", schema=\"dbo\")\n-public class JpaLogEntity extends LogEventWrapperEntity {\n+public class JpaLogEntity extends AbstractLogEventWrapperEntity {\n     private static final long serialVersionUID = 1L;\n     private long id = 0L;\n ",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/src/site/xdoc/manual/appenders.xml",
                "sha": "d278665b6e78753618c373b85f2fa0fcd0c05d40",
                "status": "modified"
            }
        ],
        "message": "- Updated the JPA 2.1 artifact to the final version\n- Switched from using incomplete JPA 2.1 implementation (Hibernate) to the complete, reference implementation (EclipseLink)\n- Now that the JPAAppender is finally testable, fixed lots of NPEs and other problems\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1500366 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/111fc7b82ff405d2cf58d3e4a89cdf782ca34483",
        "repo": "logging-log4j2",
        "unit_tests": [
            "ContextMapAttributeConverterTest.java",
            "ContextMapJsonAttributeConverterTest.java",
            "ContextStackAttributeConverterTest.java",
            "ContextStackJsonAttributeConverterTest.java",
            "MarkerAttributeConverterTest.java",
            "MessageAttributeConverterTest.java",
            "StackTraceElementAttributeConverterTest.java",
            "ThrowableAttributeConverterTest.java"
        ]
    },
    "logging-log4j2_4786a73": {
        "bug_id": "logging-log4j2_4786a73",
        "commit": "https://github.com/apache/logging-log4j2/commit/4786a7395121e0fd1b4e12d7e1b3c0eebd64d794",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/4786a7395121e0fd1b4e12d7e1b3c0eebd64d794/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java?ref=4786a7395121e0fd1b4e12d7e1b3c0eebd64d794",
                "deletions": 9,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "patch": "@@ -202,15 +202,15 @@ public boolean equals(final Object obj) {\n     }\n \n     @SuppressWarnings(\"ThrowableResultOfMethodCallIgnored\")\n-    private void formatCause(final StringBuilder sb, final ThrowableProxy cause, final List<String> ignorePackages) {\n-        if (cause == null) {\n-            return;\n-        }\n-        sb.append(\"Caused by: \").append(cause).append(EOL);\n-        this.formatElements(sb, cause.commonElementCount, cause.getThrowable().getStackTrace(),\n-                cause.extendedStackTrace, ignorePackages);\n-        this.formatCause(sb, cause.causeProxy, ignorePackages);\n-    }\n+\tprivate void formatCause(final StringBuilder sb, final ThrowableProxy cause, final List<String> ignorePackages) {\n+\t\tif (cause == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\tsb.append(\"Caused by: \").append(cause).append(EOL);\n+\t\tthis.formatElements(sb, cause.commonElementCount, cause.getStackTrace(), cause.extendedStackTrace,\n+\t\t\t\tignorePackages);\n+\t\tthis.formatCause(sb, cause.causeProxy, ignorePackages);\n+\t}\n \n     private void formatElements(final StringBuilder sb, final int commonCount, final StackTraceElement[] causedTrace,\n             final ExtendedStackTraceElement[] extStackTrace, final List<String> ignorePackages) {",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/4786a7395121e0fd1b4e12d7e1b3c0eebd64d794/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "sha": "d0800cc5a54b2e940ebc96d54d55e7cca9cf205a",
                "status": "modified"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/4786a7395121e0fd1b4e12d7e1b3c0eebd64d794/log4j-core/src/test/java/org/apache/logging/log4j/core/impl/ThrowableProxyTest.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/impl/ThrowableProxyTest.java?ref=4786a7395121e0fd1b4e12d7e1b3c0eebd64d794",
                "deletions": 1,
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/impl/ThrowableProxyTest.java",
                "patch": "@@ -35,7 +35,6 @@\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.logging.log4j.core.jackson.Log4jJsonObjectMapper;\n-import org.junit.Ignore;\n import org.junit.Test;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n@@ -146,6 +145,34 @@ public void testSerialization_getExtendedStackTraceAsString() throws Exception {\n \n         assertEquals(proxy.getExtendedStackTraceAsString(), proxy2.getExtendedStackTraceAsString());\n     }\n+    \n+    @Test\n+\tpublic void testSerialization_getExtendedStackTraceAsStringWithNestedThrowableDepth1() throws Exception {\n+\t\tfinal Throwable throwable = new RuntimeException(new IllegalArgumentException(\"This is a test\"));\n+\t\ttestSerialization_getExtendedStackTraceAsStringWithNestedThrowable(throwable);\n+\t}\n+\n+    @Test\n+\tpublic void testSerialization_getExtendedStackTraceAsStringWithNestedThrowableDepth2() throws Exception {\n+\t\tfinal Throwable throwable = new RuntimeException(\n+\t\t\t\tnew IllegalArgumentException(\"This is a test\", new IOException(\"level 2\")));\n+\t\ttestSerialization_getExtendedStackTraceAsStringWithNestedThrowable(throwable);\n+\t}\n+\n+    @Test\n+\tpublic void testSerialization_getExtendedStackTraceAsStringWithNestedThrowableDepth3() throws Exception {\n+\t\tfinal Throwable throwable = new RuntimeException(new IllegalArgumentException(\"level 1\",\n+\t\t\t\tnew IOException(\"level 2\", new IllegalStateException(\"level 3\"))));\n+\t\ttestSerialization_getExtendedStackTraceAsStringWithNestedThrowable(throwable);\n+\t}\n+\n+    private void testSerialization_getExtendedStackTraceAsStringWithNestedThrowable(Throwable throwable) throws Exception {\n+        final ThrowableProxy proxy = new ThrowableProxy(throwable);\n+        final byte[] binary = serialize(proxy);\n+        final ThrowableProxy proxy2 = deserialize(binary);\n+\n+        assertEquals(proxy.getExtendedStackTraceAsString(), proxy2.getExtendedStackTraceAsString());\n+    }\n \n     @Test\n     public void testSerializationWithUnknownThrowable() throws Exception {",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/4786a7395121e0fd1b4e12d7e1b3c0eebd64d794/log4j-core/src/test/java/org/apache/logging/log4j/core/impl/ThrowableProxyTest.java",
                "sha": "08d0a4b94b4424c7f75197f508082170e7bd5d10",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/4786a7395121e0fd1b4e12d7e1b3c0eebd64d794/src/changes/changes.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=4786a7395121e0fd1b4e12d7e1b3c0eebd64d794",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -48,6 +48,9 @@\n       <action issue=\"LOG4J2-1051\" dev=\"ggregory\" type=\"fix\" due-to=\"Lukasz Lenart\">\r\n         NoClassDefFoundError when starting app on Google App Engine.\r\n       </action>\r\n+      <action issue=\"LOG4J2-1067\" dev=\"ggregory\" type=\"fix\" due-to=\"Sam Braam\">\r\n+        ThrowableProxy getExtendedStackTraceAsString throws NPE on deserialized nested exceptions.\r\n+      </action>\r\n       <action issue=\"LOG4J2-1049\" dev=\"rpopma\" type=\"fix\" due-to=\"Robert Schaft\">\r\n         AsyncAppender now resets the thread interrupted flag after catching InterruptedException.\r\n       </action>\r",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/4786a7395121e0fd1b4e12d7e1b3c0eebd64d794/src/changes/changes.xml",
                "sha": "3451f8598f79bb06cb6409ebb8fe9193dc1a8854",
                "status": "modified"
            }
        ],
        "message": "[LOG4J2-1067] ThrowableProxy getExtendedStackTraceAsString throws NPE on\ndeserialized nested exceptions.",
        "parent": "https://github.com/apache/logging-log4j2/commit/7d732fa7a5df8a24c36c30f4d716b863d76e79bd",
        "repo": "logging-log4j2",
        "unit_tests": [
            "ThrowableProxyTest.java"
        ]
    },
    "logging-log4j2_4c791f8": {
        "bug_id": "logging-log4j2_4c791f8",
        "commit": "https://github.com/apache/logging-log4j2/commit/4c791f8e58ce0cfb86ed6b1f5449213dffac7316",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/4c791f8e58ce0cfb86ed6b1f5449213dffac7316/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java?ref=4c791f8e58ce0cfb86ed6b1f5449213dffac7316",
                "deletions": 1,
                "filename": "log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "patch": "@@ -74,7 +74,11 @@ public DefaultLevelConverter() {\n \n     }\n \n-    private Level addCustomJulLevel(java.util.logging.Level customJavaLevel) {\n+    private synchronized Level addCustomJulLevel(java.util.logging.Level customJavaLevel) {\n+        final Level level = julToLog4j.get(customJavaLevel);\n+        if (level != null) {\n+            return level;\n+        }\n         long prevDist = Long.MAX_VALUE;\n         java.util.logging.Level prevLevel = null;\n         for (java.util.logging.Level mappedJavaLevel : sortedJulLevels) {",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/4c791f8e58ce0cfb86ed6b1f5449213dffac7316/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "sha": "75ae919ae27e67960a3532a52f99b3031b7233a3",
                "status": "modified"
            }
        ],
        "message": "[LOG4J2-1025] Custom java.util.logging.Level gives null Log4j Level and\ncauses NPE. Do not allow concurrent init of custom levels.",
        "parent": "https://github.com/apache/logging-log4j2/commit/4da40ede9393569c78314ffdf7f17bff464f0788",
        "repo": "logging-log4j2",
        "unit_tests": [
            "DefaultLevelConverterTest.java"
        ]
    },
    "logging-log4j2_581b250": {
        "bug_id": "logging-log4j2_581b250",
        "commit": "https://github.com/apache/logging-log4j2/commit/581b2506a2a1743c7bb4707bde7d7bd6701555a4",
        "file": [
            {
                "additions": 173,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/581b2506a2a1743c7bb4707bde7d7bd6701555a4/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java",
                "changes": 341,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java?ref=581b2506a2a1743c7bb4707bde7d7bd6701555a4",
                "deletions": 168,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java",
                "patch": "@@ -1,168 +1,173 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache license, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the license for the specific language governing permissions and\n- * limitations under the license.\n- */\n-package org.apache.logging.log4j.core.appender;\n-\n-import java.io.OutputStream;\n-import java.io.Serializable;\n-\n-import org.apache.logging.log4j.core.Appender;\n-import org.apache.logging.log4j.core.Core;\n-import org.apache.logging.log4j.core.Filter;\n-import org.apache.logging.log4j.core.Layout;\n-import org.apache.logging.log4j.core.config.Property;\n-import org.apache.logging.log4j.plugins.Plugin;\n-import org.apache.logging.log4j.plugins.PluginBuilderFactory;\n-import org.apache.logging.log4j.plugins.PluginFactory;\n-import org.apache.logging.log4j.core.layout.PatternLayout;\n-import org.apache.logging.log4j.core.util.CloseShieldOutputStream;\n-\n-/**\n- * Appends log events to a given output stream using a layout.\n- * <p>\n- * Character encoding is handled within the Layout.\n- * </p>\n- */\n-@Plugin(name = \"OutputStream\", category = Core.CATEGORY_NAME, elementType = Appender.ELEMENT_TYPE, printObject = true)\n-public final class OutputStreamAppender extends AbstractOutputStreamAppender<OutputStreamManager> {\n-\n-    /**\n-     * Builds OutputStreamAppender instances.\n-     */\n-    public static class Builder<B extends Builder<B>> extends AbstractOutputStreamAppender.Builder<B>\n-            implements org.apache.logging.log4j.plugins.util.Builder<OutputStreamAppender> {\n-\n-        private boolean follow = false;\n-\n-        private Layout<? extends Serializable> layout = PatternLayout.createDefaultLayout();\n-\n-        private OutputStream target;\n-\n-        @Override\n-        public OutputStreamAppender build() {\n-            \n-            return new OutputStreamAppender(getName(), layout, getFilter(), getManager(target, follow, layout), isIgnoreExceptions(), getPropertyArray());\n-        }\n-\n-        public B setFollow(final boolean shouldFollow) {\n-            this.follow = shouldFollow;\n-            return asBuilder();\n-        }\n-\n-        public B setTarget(final OutputStream aTarget) {\n-            this.target = aTarget;\n-            return asBuilder();\n-        }\n-    }\n-    /**\n-     * Holds data to pass to factory method.\n-     */\n-    private static class FactoryData {\n-        private final Layout<? extends Serializable> layout;\n-        private final String name;\n-        private final OutputStream os;\n-\n-        /**\n-         * Builds instances.\n-         * \n-         * @param os\n-         *            The OutputStream.\n-         * @param type\n-         *            The name of the target.\n-         * @param layout\n-         *            A Serializable layout\n-         */\n-        public FactoryData(final OutputStream os, final String type, final Layout<? extends Serializable> layout) {\n-            this.os = os;\n-            this.name = type;\n-            this.layout = layout;\n-        }\n-    }\n-\n-    /**\n-     * Creates the manager.\n-     */\n-    private static class OutputStreamManagerFactory implements ManagerFactory<OutputStreamManager, FactoryData> {\n-\n-        /**\n-         * Creates an OutputStreamManager.\n-         * \n-         * @param name\n-         *            The name of the entity to manage.\n-         * @param data\n-         *            The data required to create the entity.\n-         * @return The OutputStreamManager\n-         */\n-        @Override\n-        public OutputStreamManager createManager(final String name, final FactoryData data) {\n-            return new OutputStreamManager(data.os, data.name, data.layout, true);\n-        }\n-    }\n-\n-    private static OutputStreamManagerFactory factory = new OutputStreamManagerFactory();\n-\n-    /**\n-     * Creates an OutputStream Appender.\n-     * \n-     * @param layout\n-     *            The layout to use or null to get the default layout.\n-     * @param filter\n-     *            The Filter or null.\n-     * @param target\n-     *            an output stream.\n-     * @param follow\n-     *            If true will follow changes to the underlying output stream.\n-     *            Use false as the default.\n-     * @param name\n-     *            The name of the Appender (required).\n-     * @param ignore\n-     *            If {@code \"true\"} (default) exceptions encountered when\n-     *            appending events are logged; otherwise they are propagated to\n-     *            the caller. Use true as the default.\n-     * @return The ConsoleAppender.\n-     */\n-    @PluginFactory\n-    public static OutputStreamAppender createAppender(Layout<? extends Serializable> layout, final Filter filter,\n-            final OutputStream target, final String name, final boolean follow, final boolean ignore) {\n-        if (name == null) {\n-            LOGGER.error(\"No name provided for OutputStreamAppender\");\n-            return null;\n-        }\n-        if (layout == null) {\n-            layout = PatternLayout.createDefaultLayout();\n-        }\n-        return new OutputStreamAppender(name, layout, filter, getManager(target, follow, layout), ignore, null);\n-    }\n-\n-    private static OutputStreamManager getManager(final OutputStream target, final boolean follow,\n-            final Layout<? extends Serializable> layout) {\n-        final OutputStream os = new CloseShieldOutputStream(target);\n-        final String managerName = target.getClass().getName() + \"@\" + Integer.toHexString(target.hashCode()) + '.'\n-                + follow;\n-        return OutputStreamManager.getManager(managerName, new FactoryData(os, managerName, layout), factory);\n-    }\n-\n-    @PluginBuilderFactory\n-    public static Builder newBuilder() {\n-        return new Builder();\n-    }\n-\n-    private OutputStreamAppender(final String name, final Layout<? extends Serializable> layout, final Filter filter,\n-            final OutputStreamManager manager, final boolean ignoreExceptions, Property[] properties) {\n-        super(name, layout, filter, ignoreExceptions, true, null, manager);\n-    }\n-\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements. See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License. You may obtain a copy of the License at\r\n+ *\r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the license for the specific language governing permissions and\r\n+ * limitations under the license.\r\n+ */\r\n+package org.apache.logging.log4j.core.appender;\r\n+\r\n+import java.io.OutputStream;\r\n+import java.io.Serializable;\r\n+\r\n+import org.apache.logging.log4j.core.Appender;\r\n+import org.apache.logging.log4j.core.Core;\r\n+import org.apache.logging.log4j.core.Filter;\r\n+import org.apache.logging.log4j.core.Layout;\r\n+import org.apache.logging.log4j.core.config.Property;\r\n+import org.apache.logging.log4j.core.layout.PatternLayout;\r\n+import org.apache.logging.log4j.core.util.CloseShieldOutputStream;\r\n+import org.apache.logging.log4j.core.util.NullOutputStream;\r\n+import org.apache.logging.log4j.plugins.Plugin;\r\n+import org.apache.logging.log4j.plugins.PluginBuilderFactory;\r\n+import org.apache.logging.log4j.plugins.PluginFactory;\r\n+\r\n+/**\r\n+ * Appends log events to a given output stream using a layout.\r\n+ * <p>\r\n+ * Character encoding is handled within the Layout.\r\n+ * </p>\r\n+ */\r\n+@Plugin(name = \"OutputStream\", category = Core.CATEGORY_NAME, elementType = Appender.ELEMENT_TYPE, printObject = true)\r\n+public final class OutputStreamAppender extends AbstractOutputStreamAppender<OutputStreamManager> {\r\n+\r\n+    /**\r\n+     * Builds OutputStreamAppender instances.\r\n+     *\r\n+     * @param <B>\r\n+     *            The type to build.\r\n+     */\r\n+    public static class Builder<B extends Builder<B>> extends AbstractOutputStreamAppender.Builder<B>\r\n+            implements org.apache.logging.log4j.plugins.util.Builder<OutputStreamAppender> {\r\n+\r\n+        private boolean follow = false;\r\n+\r\n+        private Layout<? extends Serializable> layout = PatternLayout.createDefaultLayout();\r\n+\r\n+        private OutputStream target;\r\n+\r\n+        @Override\r\n+        public OutputStreamAppender build() {\r\n+            \r\n+            return new OutputStreamAppender(getName(), layout, getFilter(), getManager(target, follow, layout), isIgnoreExceptions(), getPropertyArray());\r\n+        }\r\n+\r\n+        public B setFollow(final boolean shouldFollow) {\r\n+            this.follow = shouldFollow;\r\n+            return asBuilder();\r\n+        }\r\n+\r\n+        public B setTarget(final OutputStream aTarget) {\r\n+            this.target = aTarget;\r\n+            return asBuilder();\r\n+        }\r\n+    }\r\n+    /**\r\n+     * Holds data to pass to factory method.\r\n+     */\r\n+    private static class FactoryData {\r\n+        private final Layout<? extends Serializable> layout;\r\n+        private final String name;\r\n+        private final OutputStream os;\r\n+\r\n+        /**\r\n+         * Builds instances.\r\n+         * \r\n+         * @param os\r\n+         *            The OutputStream.\r\n+         * @param type\r\n+         *            The name of the target.\r\n+         * @param layout\r\n+         *            A Serializable layout\r\n+         */\r\n+        public FactoryData(final OutputStream os, final String type, final Layout<? extends Serializable> layout) {\r\n+            this.os = os;\r\n+            this.name = type;\r\n+            this.layout = layout;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Creates the manager.\r\n+     */\r\n+    private static class OutputStreamManagerFactory implements ManagerFactory<OutputStreamManager, FactoryData> {\r\n+\r\n+        /**\r\n+         * Creates an OutputStreamManager.\r\n+         * \r\n+         * @param name\r\n+         *            The name of the entity to manage.\r\n+         * @param data\r\n+         *            The data required to create the entity.\r\n+         * @return The OutputStreamManager\r\n+         */\r\n+        @Override\r\n+        public OutputStreamManager createManager(final String name, final FactoryData data) {\r\n+            return new OutputStreamManager(data.os, data.name, data.layout, true);\r\n+        }\r\n+    }\r\n+\r\n+    private static OutputStreamManagerFactory factory = new OutputStreamManagerFactory();\r\n+\r\n+    /**\r\n+     * Creates an OutputStream Appender.\r\n+     * \r\n+     * @param layout\r\n+     *            The layout to use or null to get the default layout.\r\n+     * @param filter\r\n+     *            The Filter or null.\r\n+     * @param target\r\n+     *            an output stream.\r\n+     * @param follow\r\n+     *            If true will follow changes to the underlying output stream.\r\n+     *            Use false as the default.\r\n+     * @param name\r\n+     *            The name of the Appender (required).\r\n+     * @param ignore\r\n+     *            If {@code \"true\"} (default) exceptions encountered when\r\n+     *            appending events are logged; otherwise they are propagated to\r\n+     *            the caller. Use true as the default.\r\n+     * @return The ConsoleAppender.\r\n+     */\r\n+    @PluginFactory\r\n+    public static OutputStreamAppender createAppender(Layout<? extends Serializable> layout, final Filter filter,\r\n+            final OutputStream target, final String name, final boolean follow, final boolean ignore) {\r\n+        if (name == null) {\r\n+            LOGGER.error(\"No name provided for OutputStreamAppender\");\r\n+            return null;\r\n+        }\r\n+        if (layout == null) {\r\n+            layout = PatternLayout.createDefaultLayout();\r\n+        }\r\n+        return new OutputStreamAppender(name, layout, filter, getManager(target, follow, layout), ignore, null);\r\n+    }\r\n+\r\n+    private static OutputStreamManager getManager(final OutputStream target, final boolean follow,\r\n+            final Layout<? extends Serializable> layout) {\r\n+        final OutputStream os = target == null ? NullOutputStream.getInstance() : new CloseShieldOutputStream(target);\r\n+        final OutputStream targetRef = target == null ? os : target;\r\n+        final String managerName = targetRef.getClass().getName() + \"@\" + Integer.toHexString(targetRef.hashCode())\r\n+                + '.' + follow;\r\n+        return OutputStreamManager.getManager(managerName, new FactoryData(os, managerName, layout), factory);\r\n+    }\r\n+\r\n+    @PluginBuilderFactory\r\n+    public static <B extends Builder<B>> B newBuilder() {\r\n+        return new Builder<B>().asBuilder();\r\n+    }\r\n+\r\n+    private OutputStreamAppender(final String name, final Layout<? extends Serializable> layout, final Filter filter,\r\n+            final OutputStreamManager manager, final boolean ignoreExceptions, Property[] properties) {\r\n+        super(name, layout, filter, ignoreExceptions, true, null, manager);\r\n+    }\r\n+\r\n+}\r",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/581b2506a2a1743c7bb4707bde7d7bd6701555a4/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java",
                "sha": "f8bf4d8a4deaae2b6e77ea73f0eb693e4cdafe78",
                "status": "modified"
            },
            {
                "additions": 123,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/581b2506a2a1743c7bb4707bde7d7bd6701555a4/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/OutputStreamAppenderTest.java",
                "changes": 232,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/OutputStreamAppenderTest.java?ref=581b2506a2a1743c7bb4707bde7d7bd6701555a4",
                "deletions": 109,
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/appender/OutputStreamAppenderTest.java",
                "patch": "@@ -1,109 +1,123 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache license, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the license for the specific language governing permissions and\n- * limitations under the license.\n- */\n-package org.apache.logging.log4j.core.appender;\n-\n-import java.io.BufferedOutputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.OutputStream;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.apache.logging.log4j.core.Appender;\n-import org.apache.logging.log4j.core.LoggerContext;\n-import org.apache.logging.log4j.core.config.Configuration;\n-import org.apache.logging.log4j.core.layout.PatternLayout;\n-import org.junit.Assert;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.TestName;\n-\n-/**\n- * Tests {@link OutputStreamAppender}.\n- */\n-public class OutputStreamAppenderTest {\n-\n-    private static final String TEST_MSG = \"FOO ERROR\";\n-\n-    @Rule\n-    public TestName testName = new TestName();\n-\n-    private String getName(final OutputStream out) {\n-        return out.getClass().getSimpleName() + \".\" + testName.getMethodName();\n-    }\n-\n-    /**\n-     * Tests that you can add an output stream appender dynamically.\n-     */\n-    private void addAppender(final OutputStream outputStream, final String outputStreamName) {\n-        final LoggerContext context = LoggerContext.getContext(false);\n-        final Configuration config = context.getConfiguration();\n-        final PatternLayout layout = PatternLayout.createDefaultLayout(config);\n-        final Appender appender = OutputStreamAppender.createAppender(layout, null, outputStream, outputStreamName, false, true);\n-        appender.start();\n-        config.addAppender(appender);\n-        ConfigurationTestUtils.updateLoggers(appender, config);\n-    }\n-\n-    @Test\n-    public void testOutputStreamAppenderToBufferedOutputStream() {\n-        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n-        final OutputStream os = new BufferedOutputStream(out);\n-        final String name = getName(out);\n-        final Logger logger = LogManager.getLogger(name);\n-        addAppender(os, name);\n-        logger.error(TEST_MSG);\n-        final String actual = out.toString();\n-        Assert.assertTrue(actual, actual.contains(TEST_MSG));\n-    }\n-\n-    @Test\n-    public void testOutputStreamAppenderToByteArrayOutputStream() {\n-        final OutputStream out = new ByteArrayOutputStream();\n-        final String name = getName(out);\n-        final Logger logger = LogManager.getLogger(name);\n-        addAppender(out, name);\n-        logger.error(TEST_MSG);\n-        final String actual = out.toString();\n-        Assert.assertTrue(actual, actual.contains(TEST_MSG));\n-    }\n-\n-    /**\n-     * Validates that the code pattern we use to add an appender on the fly\n-     * works with a basic appender that is not the new OutputStream appender or\n-     * new Writer appender.\n-     */\n-    @Test\n-    public void testUpdatePatternWithFileAppender() {\n-        final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n-        final Configuration config = ctx.getConfiguration();\n-        // @formatter:off\n-        final Appender appender = FileAppender.newBuilder()\n-            .setFileName(\"target/\" + getClass().getName() + \".log\")\n-            .setAppend(false)\n-            .setName(\"File\")\n-            .setIgnoreExceptions(false)\n-            .setBufferedIo(false)\n-            .setBufferSize(4000)\n-            .setConfiguration(config)\n-            .build();\n-        // @formatter:on\n-        appender.start();\n-        config.addAppender(appender);\n-        ConfigurationTestUtils.updateLoggers(appender, config);\n-        LogManager.getLogger().error(\"FOO MSG\");\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements. See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License. You may obtain a copy of the License at\r\n+ *\r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the license for the specific language governing permissions and\r\n+ * limitations under the license.\r\n+ */\r\n+package org.apache.logging.log4j.core.appender;\r\n+\r\n+import java.io.BufferedOutputStream;\r\n+import java.io.ByteArrayOutputStream;\r\n+import java.io.OutputStream;\r\n+\r\n+import org.apache.logging.log4j.LogManager;\r\n+import org.apache.logging.log4j.Logger;\r\n+import org.apache.logging.log4j.core.Appender;\r\n+import org.apache.logging.log4j.core.LoggerContext;\r\n+import org.apache.logging.log4j.core.config.Configuration;\r\n+import org.apache.logging.log4j.core.filter.NoMarkerFilter;\r\n+import org.apache.logging.log4j.core.layout.PatternLayout;\r\n+import org.junit.Assert;\r\n+import org.junit.Rule;\r\n+import org.junit.Test;\r\n+import org.junit.rules.TestName;\r\n+\r\n+/**\r\n+ * Tests {@link OutputStreamAppender}.\r\n+ */\r\n+public class OutputStreamAppenderTest {\r\n+\r\n+    private static final String TEST_MSG = \"FOO ERROR\";\r\n+\r\n+    @Rule\r\n+    public TestName testName = new TestName();\r\n+\r\n+    private String getName(final OutputStream out) {\r\n+        return out.getClass().getSimpleName() + \".\" + testName.getMethodName();\r\n+    }\r\n+\r\n+    /**\r\n+     * Tests that you can add an output stream appender dynamically.\r\n+     */\r\n+    private void addAppender(final OutputStream outputStream, final String outputStreamName) {\r\n+        final LoggerContext context = LoggerContext.getContext(false);\r\n+        final Configuration config = context.getConfiguration();\r\n+        final PatternLayout layout = PatternLayout.createDefaultLayout(config);\r\n+        final Appender appender = OutputStreamAppender.createAppender(layout, null, outputStream, outputStreamName, false, true);\r\n+        appender.start();\r\n+        config.addAppender(appender);\r\n+        ConfigurationTestUtils.updateLoggers(appender, config);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testBuildFilter() {\r\n+        final NoMarkerFilter filter = NoMarkerFilter.newBuilder().build();\r\n+        // @formatter:off\r\n+        final OutputStreamAppender.Builder builder = OutputStreamAppender.newBuilder()\r\n+                .setName(\"test\")\r\n+                .setFilter(filter);\r\n+        // @formatter:on\r\n+        Assert.assertEquals(filter, builder.getFilter());\r\n+        final OutputStreamAppender appender = builder.build();\r\n+        Assert.assertEquals(filter, appender.getFilter());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testOutputStreamAppenderToBufferedOutputStream() {\r\n+        final ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n+        final OutputStream os = new BufferedOutputStream(out);\r\n+        final String name = getName(out);\r\n+        final Logger logger = LogManager.getLogger(name);\r\n+        addAppender(os, name);\r\n+        logger.error(TEST_MSG);\r\n+        final String actual = out.toString();\r\n+        Assert.assertTrue(actual, actual.contains(TEST_MSG));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testOutputStreamAppenderToByteArrayOutputStream() {\r\n+        final OutputStream out = new ByteArrayOutputStream();\r\n+        final String name = getName(out);\r\n+        final Logger logger = LogManager.getLogger(name);\r\n+        addAppender(out, name);\r\n+        logger.error(TEST_MSG);\r\n+        final String actual = out.toString();\r\n+        Assert.assertTrue(actual, actual.contains(TEST_MSG));\r\n+    }\r\n+\r\n+    /**\r\n+     * Validates that the code pattern we use to add an appender on the fly\r\n+     * works with a basic appender that is not the new OutputStream appender or\r\n+     * new Writer appender.\r\n+     */\r\n+    @Test\r\n+    public void testUpdatePatternWithFileAppender() {\r\n+        final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\r\n+        final Configuration config = ctx.getConfiguration();\r\n+        // @formatter:off\r\n+        final Appender appender = FileAppender.newBuilder()\r\n+            .setFileName(\"target/\" + getClass().getName() + \".log\")\r\n+            .setAppend(false)\r\n+            .setName(\"File\")\r\n+            .setIgnoreExceptions(false)\r\n+            .setBufferedIo(false)\r\n+            .setBufferSize(4000)\r\n+            .setConfiguration(config)\r\n+            .build();\r\n+        // @formatter:on\r\n+        appender.start();\r\n+        config.addAppender(appender);\r\n+        ConfigurationTestUtils.updateLoggers(appender, config);\r\n+        LogManager.getLogger().error(\"FOO MSG\");\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/581b2506a2a1743c7bb4707bde7d7bd6701555a4/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/OutputStreamAppenderTest.java",
                "sha": "af194b8426f6ef58b9a4ef18dfb1efbd1586f525",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/581b2506a2a1743c7bb4707bde7d7bd6701555a4/src/changes/changes.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=581b2506a2a1743c7bb4707bde7d7bd6701555a4",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -145,6 +145,9 @@\n       <action issue=\"LOG4J2-2639\" dev=\"rgoers\" type=\"add\">\n         Add builder pattern to Logger interface.\n       </action>\n+      <action issue=\"LOG4J2-2673\" dev=\"ggregory\" type=\"fix\" due-to=\"Yuichi Sugimura, Gary Gregory\">\n+        OutputStreamAppender.Builder ignores setFilter().\n+      </action>\n     </release>\n     <release version=\"2.12.1\" date=\"2019-08-06\" description=\"GA Release 2.12.1\">\n       <action issue=\"LOG4J2-1946\" dev=\"rgoers\" type=\"fix\" due-to=\"Igor Perelyotov\">",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/581b2506a2a1743c7bb4707bde7d7bd6701555a4/src/changes/changes.xml",
                "sha": "876cf3db2411badb7d7d3aab872e03c7c6956165",
                "status": "modified"
            }
        ],
        "message": "[LOG4J2-2673] OutputStreamAppender.Builder ignores setFilter().\n\nAlso allow a null output stream for convenience instead of an NPE.",
        "parent": "https://github.com/apache/logging-log4j2/commit/377d177edb1bb599365eb339bc5e6c8108c64b88",
        "repo": "logging-log4j2",
        "unit_tests": [
            "OutputStreamAppenderTest.java"
        ]
    },
    "logging-log4j2_585d5ca": {
        "bug_id": "logging-log4j2_585d5ca",
        "commit": "https://github.com/apache/logging-log4j2/commit/585d5ca8d6b101603599385982609229ff8ee7bf",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/585d5ca8d6b101603599385982609229ff8ee7bf/log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/EnvironmentLookup.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/EnvironmentLookup.java?ref=585d5ca8d6b101603599385982609229ff8ee7bf",
                "deletions": 5,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/EnvironmentLookup.java",
                "patch": "@@ -26,13 +26,18 @@\n public class EnvironmentLookup extends AbstractLookup {\n \n     /**\n-     * Looks up the value of the environment variable.\n-     * @param event The current LogEvent (is ignored by this StrLookup).\n-     * @param key  the key to be looked up, may be null\n-     * @return The value of the environment variable.\n+     * Looks up the value of the given environment variable.\n+     * \n+     * @param event\n+     *            The current LogEvent (ignored by this StrLookup).\n+     * @param key\n+     *            the key to look up, may be null\n+     * @return the string value of the variable, or <code>null</code> if the variable is not defined in the system\n+     *         environment\n      */\n     @Override\n     public String lookup(final LogEvent event, final String key) {\n-        return System.getenv(key);\n+        // getenv throws NullPointerException if <code>name</code> is <code>null</code>\n+        return key != null ? System.getenv(key) : null;\n     }\n }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/585d5ca8d6b101603599385982609229ff8ee7bf/log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/EnvironmentLookup.java",
                "sha": "7f0d93558536b91cb39f351f2447ea001b284f70",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/585d5ca8d6b101603599385982609229ff8ee7bf/src/changes/changes.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=585d5ca8d6b101603599385982609229ff8ee7bf",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -55,6 +55,9 @@\n       <action issue=\"LOG4J2-2233\" dev=\"ggregory\" type=\"update\" due-to=\"Gary Gregory\">\n         Move JDBC code to a new module log4j-jdbc.\n       </action>\n+      <action issue=\"LOG4J2-2244\" dev=\"ggregory\" type=\"update\" due-to=\"Gary Gregory\">\n+        org.apache.logging.log4j.core.lookup.EnvironmentLookup may throw NPE.\n+      </action>      \n     </release>\n     <release version=\"2.11.0\" date=\"2018-xx-xx\" description=\"GA Release 2.11.0\">\n       <action issue=\"LOG4J2-2236\" dev=\"rpopma\" type=\"update\">",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/585d5ca8d6b101603599385982609229ff8ee7bf/src/changes/changes.xml",
                "sha": "ea96b881de09f9dc79fd8e5de40a20198c889279",
                "status": "modified"
            }
        ],
        "message": "[LOG4J2-2244] org.apache.logging.log4j.core.lookup.EnvironmentLookup may\nthrow NPE.",
        "parent": "https://github.com/apache/logging-log4j2/commit/ad5a3a8deed0f3066cf1d08235dc56c21fee511d",
        "repo": "logging-log4j2",
        "unit_tests": [
            "EnvironmentLookupTest.java"
        ]
    },
    "logging-log4j2_60489e4": {
        "bug_id": "logging-log4j2_60489e4",
        "commit": "https://github.com/apache/logging-log4j2/commit/60489e4e35f9bb55d7ab1d7204d616ba606f3365",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/60489e4e35f9bb55d7ab1d7204d616ba606f3365/log4j-api/src/main/java/org/apache/logging/log4j/Marker.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/Marker.java?ref=60489e4e35f9bb55d7ab1d7204d616ba606f3365",
                "deletions": 4,
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/Marker.java",
                "patch": "@@ -57,23 +57,23 @@\n      * Checks whether this Marker is an instance of the specified Marker.\n      * @param m The Marker to check.\n      * @return {@code true} if this Marker or one of its ancestors is the specified Marker, {@code false} otherwise.\n-     * @throws NullPointerException if the argument is {@code null}\n+     * @throws IllegalArgumentException if the argument is {@code null}\n      */\n     boolean isInstanceOf(Marker m);\n \n     /**\n      * Checks whether this Marker is an instance of the specified Marker.\n      * @param name The name of the Marker.\n      * @return {@code true} if this Marker or one of its ancestors matches the specified name, {@code false} otherwise.\n-     * @throws NullPointerException if the argument is {@code null}\n+     * @throws IllegalArgumentException if the argument is {@code null}\n      */\n     boolean isInstanceOf(String name);\n \n     /**\n      * Adds a Marker as a parent to this Marker.\n      * @param marker The parent marker to add.\n      * @return The current Marker object, thus allowing multiple adds to be concatenated.\n-     * @throws NullPointerException if the argument is {@code null}\n+     * @throws IllegalArgumentException if the argument is {@code null}\n      */\n     Marker add(Marker marker);\n \n@@ -88,7 +88,7 @@\n      * Removes the specified Marker as a parent of this Marker.\n      * @param marker The marker to remove.\n      * @return {@code true} if the marker was removed.\n-     * @throws NullPointerException if the argument is {@code null}\n+     * @throws IllegalArgumentException if the argument is {@code null}\n      */\n     boolean remove(Marker marker);\n }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/60489e4e35f9bb55d7ab1d7204d616ba606f3365/log4j-api/src/main/java/org/apache/logging/log4j/Marker.java",
                "sha": "8a4d8a5ec4d7f282c5cfed8b00a5ba4c105bc5f3",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/60489e4e35f9bb55d7ab1d7204d616ba606f3365/log4j-api/src/main/java/org/apache/logging/log4j/MarkerManager.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/MarkerManager.java?ref=60489e4e35f9bb55d7ab1d7204d616ba606f3365",
                "deletions": 10,
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/MarkerManager.java",
                "patch": "@@ -36,7 +36,7 @@ private MarkerManager() {\n      * Retrieve a Marker or create a Marker that has no parent.\n      * @param name The name of the Marker.\n      * @return The Marker with the specified name.\n-     * @throws NullPointerException if the argument is {@code null}\n+     * @throws IllegalArgumentException if the argument is {@code null}\n      */\n     public static Marker getMarker(final String name) {\n         markerMap.putIfAbsent(name, new Log4jMarker(name));\n@@ -49,7 +49,6 @@ public static Marker getMarker(final String name) {\n      * @param parent The name of the parent Marker.\n      * @return The Marker with the specified name.\n      * @throws IllegalArgumentException if the parent Marker does not exist.\n-     * @throws NullPointerException if the argument is {@code null}\n      * @deprecated Use the Marker add or set methods to add parent Markers. Will be removed by final GA release.\n      */\n     @Deprecated\n@@ -68,7 +67,7 @@ public static Marker getMarker(final String name, final String parent) {\n      * @param name The name of the Marker.\n      * @param parent The parent Marker.\n      * @return The Marker with the specified name.\n-     * @throws NullPointerException if the argument is {@code null}\n+     * @throws IllegalArgumentException if any argument is {@code null}\n      * @deprecated Use the Marker add or set methods to add parent Markers. Will be removed by final GA release.\n      */\n     @Deprecated\n@@ -89,13 +88,13 @@ public static Marker getMarker(final String name, final Marker parent) {\n         /**\n          * Constructs a new Marker.\n          * @param name the name of the Marker.\n-         * @throws NullPointerException if the argument is {@code null}\n+         * @throws IllegalArgumentException if the argument is {@code null}\n          */\n         public Log4jMarker(final String name) {\n             if (name == null) {\n                 // we can't store null references in a ConcurrentHashMap as it is, not to mention that a null Marker\n                 // name seems rather pointless. To get an \"anonymous\" Marker, just use an empty string.\n-                throw new NullPointerException(\"Marker name cannot be null.\");\n+                throw new IllegalArgumentException(\"Marker name cannot be null.\");\n             }\n             this.name = name;\n             this.parents = null;\n@@ -106,7 +105,7 @@ public Log4jMarker(final String name) {\n         @Override\n         public synchronized Marker add(final Marker parent) {\n             if (parent == null) {\n-                throw new NullPointerException(\"A parent marker must be specified\");\n+                throw new IllegalArgumentException(\"A parent marker must be specified\");\n             }\n             // It is not strictly necessary to copy the variable here but it should perform better than\n             // Accessing a volatile variable multiple times.\n@@ -132,7 +131,7 @@ public synchronized Marker add(final Marker parent) {\n         @Override\n         public synchronized boolean remove(final Marker parent) {\n             if (parent == null) {\n-                throw new NullPointerException(\"A parent marker must be specified\");\n+                throw new IllegalArgumentException(\"A parent marker must be specified\");\n             }\n             final Marker[] localParents = this.parents;\n             if (localParents == null) {\n@@ -153,9 +152,9 @@ public synchronized boolean remove(final Marker parent) {\n                 final Marker marker = localParents[i];\n                 if (!marker.equals(parent)) {\n                     if (index == localParentsLength - 1) {\n+                        // no need to swap array\n                         return false;\n                     }\n-                    // FIXME: buffer overflow\n                     markers[index++] = marker;\n                 }\n             }\n@@ -201,7 +200,7 @@ public boolean hasParents() {\n         @Override\n         public boolean isInstanceOf(final Marker marker) {\n             if (marker == null) {\n-                throw new NullPointerException(\"A marker parameter is required\");\n+                throw new IllegalArgumentException(\"A marker parameter is required\");\n             }\n             if (this == marker) {\n                 return true;\n@@ -230,7 +229,7 @@ public boolean isInstanceOf(final Marker marker) {\n         @Override\n         public boolean isInstanceOf(final String markerName) {\n             if (markerName == null) {\n-                throw new NullPointerException(\"A marker name is required\");\n+                throw new IllegalArgumentException(\"A marker name is required\");\n             }\n             if (markerName.equals(this.getName())) {\n                 return true;",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/60489e4e35f9bb55d7ab1d7204d616ba606f3365/log4j-api/src/main/java/org/apache/logging/log4j/MarkerManager.java",
                "sha": "1ee2c58a8875df072cc065b07f827362164e18b4",
                "status": "modified"
            }
        ],
        "message": "Switch NPE to IAE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1589555 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/e56a3d224051aa0e1ce951cecd570af34239d3f6",
        "repo": "logging-log4j2",
        "unit_tests": [
            "MarkerTest.java"
        ]
    },
    "logging-log4j2_60bcf16": {
        "bug_id": "logging-log4j2_60bcf16",
        "commit": "https://github.com/apache/logging-log4j2/commit/60bcf168d45eb930e84d3eee9d3ed11d2f2da2ef",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/60bcf168d45eb930e84d3eee9d3ed11d2f2da2ef/log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterFormatter.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterFormatter.java?ref=60bcf168d45eb930e84d3eee9d3ed11d2f2da2ef",
                "deletions": 1,
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterFormatter.java",
                "patch": "@@ -200,7 +200,10 @@ static void formatMessage2(final StringBuilder buffer, final String messagePatte\n      */\n     static void formatMessage3(final StringBuilder buffer, final char[] messagePattern, final int patternLength,\n             final Object[] arguments, final int argCount, final int[] indices) {\n-        if (messagePattern == null || arguments == null || argCount == 0) {\n+        if (messagePattern == null) {\n+            return;\n+        }\n+        if (arguments == null || argCount == 0) {\n             buffer.append(messagePattern);\n             return;\n         }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/60bcf168d45eb930e84d3eee9d3ed11d2f2da2ef/log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterFormatter.java",
                "sha": "79c447a89f34885f21de36581672dd0d9ced9381",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/60bcf168d45eb930e84d3eee9d3ed11d2f2da2ef/src/changes/changes.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=60bcf168d45eb930e84d3eee9d3ed11d2f2da2ef",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -156,6 +156,9 @@\n       <action issue=\"LOG4J2-1573\" dev=\"ggregory\" type=\"fix\" due-to=\"Steffen Offermann\">\n         Layout is no longer optional.\n       </action>\n+      <action issue=\"LOG4J2-1599\" dev=\"ggregory\" type=\"fix\">\n+        NPE in org.apache.logging.log4j.message.ParameterFormatter.formatMessage3(StringBuilder, char[], int, Object[], int, int[]).\n+      </action>\n       <action issue=\"LOG4J2-1578\" dev=\"ggregory\" type=\"add\">\n         RoutingAppender can be configured with scripts. Add Script in a Routes element.\n       </action>",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/60bcf168d45eb930e84d3eee9d3ed11d2f2da2ef/src/changes/changes.xml",
                "sha": "b2fcc30ee4dc20695721c29746a872f02714fe0b",
                "status": "modified"
            }
        ],
        "message": "[LOG4J2-1599]\n\nNPE in\norg.apache.logging.log4j.message.ParameterFormatter.formatMessage3(StringBuilder,\nchar[], int, Object[], int, int[]).",
        "parent": "https://github.com/apache/logging-log4j2/commit/2b1cf11e942f54757e96cdd9eb6b11bac797d691",
        "repo": "logging-log4j2",
        "unit_tests": [
            "ParameterFormatterTest.java"
        ]
    },
    "logging-log4j2_687b383": {
        "bug_id": "logging-log4j2_687b383",
        "commit": "https://github.com/apache/logging-log4j2/commit/687b383f3e9fc377ea99a247dd9bc6ed23b3eb78",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/687b383f3e9fc377ea99a247dd9bc6ed23b3eb78/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java?ref=687b383f3e9fc377ea99a247dd9bc6ed23b3eb78",
                "deletions": 5,
                "filename": "log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "patch": "@@ -96,11 +96,6 @@ private void mapLog4jToJul(Level level, java.util.logging.Level julLevel) {\n     }\n \n     private Level nearestLevel(java.util.logging.Level customJavaLevel) {\n-        final Level level = julToLog4j.get(customJavaLevel);\n-        if (level != null) {\n-            // don't search\n-            return level;\n-        }\n         long prevDist = Long.MAX_VALUE;\n         java.util.logging.Level prevLevel = null;\n         for (java.util.logging.Level mappedJavaLevel : sortedJulLevels) {",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/687b383f3e9fc377ea99a247dd9bc6ed23b3eb78/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "sha": "c5d7b085895fbe3eb0361485b5bd093822abafbe",
                "status": "modified"
            }
        ],
        "message": "[LOG4J2-1025] Custom java.util.logging.Level gives null Log4j Level and\ncauses NPE. Simplify.",
        "parent": "https://github.com/apache/logging-log4j2/commit/0234c71c8f29aa624778bb107b914c9c9557ddc7",
        "repo": "logging-log4j2",
        "unit_tests": [
            "DefaultLevelConverterTest.java"
        ]
    },
    "logging-log4j2_69d8d73": {
        "bug_id": "logging-log4j2_69d8d73",
        "commit": "https://github.com/apache/logging-log4j2/commit/69d8d73d6e6422d554a635dfa9f8beb690c56189",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/69d8d73d6e6422d554a635dfa9f8beb690c56189/log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java?ref=69d8d73d6e6422d554a635dfa9f8beb690c56189",
                "deletions": 14,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java",
                "patch": "@@ -20,6 +20,8 @@\n import java.io.InputStream;\n import java.lang.reflect.InvocationTargetException;\n import java.net.URL;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n \n import org.apache.logging.log4j.Logger;\n import org.apache.logging.log4j.status.StatusLogger;\n@@ -36,6 +38,9 @@\n \n     private static final String TSTR = \"Caught Exception while in Loader.getResource. This may be innocuous.\";\n \n+    private static final PrivilegedAction<ClassLoader> THREAD_CONTEXT_CLASS_LOADER_GETTER =\n+        new ThreadContextClassLoaderGetter();\n+\n     static {\n         final String ignoreTCLProp = PropertiesUtil.getProperties().getStringProperty(\"log4j.ignoreTCL\", null);\n         if (ignoreTCLProp != null) {\n@@ -202,21 +207,18 @@ public static InputStream getResourceAsStream(final String resource, final Class\n     }\n \n     private static ClassLoader getTcl() {\n-        ClassLoader cl;\n-        if (System.getSecurityManager() == null) {\n-            cl = Thread.currentThread().getContextClassLoader();\n-        } else {\n-            cl = java.security.AccessController.doPrivileged(\n-                new java.security.PrivilegedAction<ClassLoader>() {\n-                    @Override\n-                    public ClassLoader run() {\n-                        return Thread.currentThread().getContextClassLoader();\n-                    }\n-                }\n-            );\n-        }\n+        return System.getSecurityManager() == null\n+            ? THREAD_CONTEXT_CLASS_LOADER_GETTER.run()\n+            : AccessController.doPrivileged(THREAD_CONTEXT_CLASS_LOADER_GETTER);\n+    }\n \n-        return cl;\n+    private static class ThreadContextClassLoaderGetter implements PrivilegedAction<ClassLoader> {\n+        @Override\n+        public ClassLoader run() {\n+            final ClassLoader cl = Thread.currentThread().getContextClassLoader();\n+            // if the TCCL is null, that means we're using the system CL\n+            return cl == null ? ClassLoader.getSystemClassLoader() : cl;\n+        }\n     }\n \n     private static boolean isChild(final ClassLoader loader1, final ClassLoader loader2) {",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/69d8d73d6e6422d554a635dfa9f8beb690c56189/log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java",
                "sha": "13bbceab3144bfb78ee3d2a49a1ebe6b4e2f5f32",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/69d8d73d6e6422d554a635dfa9f8beb690c56189/src/changes/changes.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=69d8d73d6e6422d554a635dfa9f8beb690c56189",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -22,6 +22,9 @@\n   </properties>\n   <body>\n     <release version=\"2.0-rc2\" date=\"2014-MM-DD\" description=\"Bug fixes and enhancements\">\n+      <action issue=\"LOG4J2-640\" dev=\"mattsicker\" type=\"fix\">\n+        Fix NPE that can be caused by a null ThreadContextClassLoader.\n+      </action>\n       <action issue=\"LOG4J2-655\" dev=\"mattsicker\" type=\"add\">\n         Add Vagrantfile for testing in GNU+Linux.\n       </action>",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/69d8d73d6e6422d554a635dfa9f8beb690c56189/src/changes/changes.xml",
                "sha": "0b7bfea3f8fc9fff7b98e1f0628ce02f6a2f3590",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in Loader.getTCL() as reported in LOG4J2-640.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1601024 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/2fd0902266776e3ffa3713472e3ace75ea7b668f",
        "repo": "logging-log4j2",
        "unit_tests": [
            "LoaderTest.java"
        ]
    },
    "logging-log4j2_6bfc4c4": {
        "bug_id": "logging-log4j2_6bfc4c4",
        "commit": "https://github.com/apache/logging-log4j2/commit/6bfc4c4e14d8f3241065f593fda9ddca116724f2",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/6bfc4c4e14d8f3241065f593fda9ddca116724f2/log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java?ref=6bfc4c4e14d8f3241065f593fda9ddca116724f2",
                "deletions": 1,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java",
                "patch": "@@ -179,7 +179,8 @@ public void removeContext(final LoggerContext context) {\n     }\n \n     private LoggerContext locateContext(final ClassLoader loader, final URI configLocation) {\n-        final String name = loader.toString();\n+        // LOG4J2-477: class loader may be null\n+        final String name = loader != null ? loader.toString() : ClassLoader.getSystemClassLoader().toString();\n         AtomicReference<WeakReference<LoggerContext>> ref = CONTEXT_MAP.get(name);\n         if (ref == null) {\n             if (configLocation == null) {",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/6bfc4c4e14d8f3241065f593fda9ddca116724f2/log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java",
                "sha": "a0e56c6501ff595b5babb3f3840c5c0a841d7045",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/6bfc4c4e14d8f3241065f593fda9ddca116724f2/src/changes/changes.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=6bfc4c4e14d8f3241065f593fda9ddca116724f2",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -21,6 +21,9 @@\n   </properties>\n   <body>\n     <release version=\"2.0-RC1\" date=\"2013-MM-DD\" description=\"Bug fixes and enhancements\">\n+      <action issue=\"LOG4J2-477\" dev=\"rpopma\" type=\"fix\" due-to=\"Tal Liron\">\n+        NPE in ClassLoaderContextSelector.\n+      </action>\n       <action issue=\"LOG4J2-454\" dev=\"rpopma\" type=\"fix\" due-to=\"Robin Zhang Tao\">\n         TimeBasedTriggeringPolicy should use event time millis.\n       </action>",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/6bfc4c4e14d8f3241065f593fda9ddca116724f2/src/changes/changes.xml",
                "sha": "214da5b74a6932743da8e7da1b3538dc0a49eca0",
                "status": "modified"
            }
        ],
        "message": "Fix for LOG4J2-477: NPE in ClassLoaderContextSelector\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1552996 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/a4f100a8cf77a8956b314cebeb73408ea58dbfe7",
        "repo": "logging-log4j2",
        "unit_tests": [
            "ClassLoaderContextSelectorTest.java"
        ]
    },
    "logging-log4j2_742e510": {
        "bug_id": "logging-log4j2_742e510",
        "commit": "https://github.com/apache/logging-log4j2/commit/742e51052021e02add3f4e6c40b7258e7de67f16",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/742e51052021e02add3f4e6c40b7258e7de67f16/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java?ref=742e51052021e02add3f4e6c40b7258e7de67f16",
                "deletions": 2,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "patch": "@@ -247,8 +247,8 @@ public void stop() {\n     }\n \n     private void tearDownShutdownHook() {\n-        Thread thread = shutdownThread.get();\n-        if (shutdownRegistrationStrategy != null && shutdownThread != null && thread != null) {\n+        Thread thread = this.getShutdownThread();\n+        if (shutdownRegistrationStrategy != null && thread != null) {\n             shutdownRegistrationStrategy.unregisterShutdownHook(thread);\n             LOGGER.debug(SHUTDOWN_HOOK_MARKER, \"Enqueue shutdown hook for garbage collection.\");\n             shutdownThread.enqueue();",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/742e51052021e02add3f4e6c40b7258e7de67f16/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "sha": "142993ecb127523ec8a979231073e8867662ee06",
                "status": "modified"
            }
        ],
        "message": "Fix NPEs in new shutdown hook code. I'm not sure if this is the right fix, but it's a fix. It's not clear to me that the new shotdown hook code will be in 2.1 based on the back and forth in JIRA and ML.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1620467 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/065c3cdab649a758d640493589a5568a08a391b2",
        "repo": "logging-log4j2",
        "unit_tests": [
            "LoggerContextTest.java",
            "TestLoggerContext.java"
        ]
    },
    "logging-log4j2_793da5e": {
        "bug_id": "logging-log4j2_793da5e",
        "commit": "https://github.com/apache/logging-log4j2/commit/793da5e51d1fea9e024dc42357bea700c224fb3c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-api/src/main/java/org/apache/logging/log4j/Level.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/Level.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "deletions": 3,
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/Level.java",
                "patch": "@@ -19,6 +19,7 @@\n import java.io.Serializable;\n import java.util.Collection;\n import java.util.Locale;\n+import java.util.Objects;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n@@ -276,9 +277,7 @@ public static Level toLevel(final String name, final Level defaultLevel) {\n      * @throws java.lang.IllegalArgumentException if the Level name is not registered.\n      */\n     public static Level valueOf(final String name) {\n-        if (name == null) {\n-            throw new NullPointerException(\"No level name given.\");\n-        }\n+    \tObjects.requireNonNull(name, \"No level name given.\");\n         final String levelName = name.toUpperCase(Locale.ENGLISH);\n         if (levels.containsKey(levelName)) {\n             return levels.get(levelName);",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-api/src/main/java/org/apache/logging/log4j/Level.java",
                "sha": "b20a5ffa145b37ee82d5cbcacfdd46f72064c997",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RolloverDescriptionImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RolloverDescriptionImpl.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "deletions": 3,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RolloverDescriptionImpl.java",
                "patch": "@@ -16,6 +16,8 @@\n  */\n package org.apache.logging.log4j.core.appender.rolling;\n \n+import java.util.Objects;\n+\n import org.apache.logging.log4j.core.appender.rolling.action.Action;\n \n /**\n@@ -55,9 +57,7 @@\n      */\n     public RolloverDescriptionImpl(final String activeFileName, final boolean append, final Action synchronous,\n                                    final Action asynchronous) {\n-        if (activeFileName == null) {\n-            throw new NullPointerException(\"activeFileName\");\n-        }\n+        Objects.requireNonNull(activeFileName, \"activeFileName\");\n \n         this.append = append;\n         this.activeFileName = activeFileName;",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RolloverDescriptionImpl.java",
                "sha": "8b1c848ff61cf6b1801e398d8dc7e893e51853a7",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/Bzip2CompressAction.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/Bzip2CompressAction.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "deletions": 7,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/Bzip2CompressAction.java",
                "patch": "@@ -21,6 +21,7 @@\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.util.Objects;\n \n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;\n \n@@ -55,13 +56,8 @@\n      *            to be thrown or affect return value.\n      */\n     public Bzip2CompressAction(final File source, final File destination, final boolean deleteSource) {\n-        if (source == null) {\n-            throw new NullPointerException(\"source\");\n-        }\n-\n-        if (destination == null) {\n-            throw new NullPointerException(\"destination\");\n-        }\n+        Objects.requireNonNull(source, \"source\");\n+        Objects.requireNonNull(destination, \"destination\");\n \n         this.source = source;\n         this.destination = destination;",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/Bzip2CompressAction.java",
                "sha": "e3f2b27a0611dbdf58509c5b328282fa81830787",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/GzCompressAction.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/GzCompressAction.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "deletions": 7,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/GzCompressAction.java",
                "patch": "@@ -21,6 +21,7 @@\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.util.Objects;\n import java.util.zip.GZIPOutputStream;\n \n /**\n@@ -54,13 +55,8 @@\n      *                     does not cause an exception to be thrown or affect return value.\n      */\n     public GzCompressAction(final File source, final File destination, final boolean deleteSource) {\n-        if (source == null) {\n-            throw new NullPointerException(\"source\");\n-        }\n-\n-        if (destination == null) {\n-            throw new NullPointerException(\"destination\");\n-        }\n+        Objects.requireNonNull(source, \"source\");\n+        Objects.requireNonNull(destination, \"destination\");\n \n         this.source = source;\n         this.destination = destination;",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/GzCompressAction.java",
                "sha": "61fb9872f3d9dd213ea7c32b601cff27b482c8a1",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ZipCompressAction.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ZipCompressAction.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "deletions": 7,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ZipCompressAction.java",
                "patch": "@@ -20,6 +20,7 @@\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.util.Objects;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipOutputStream;\n \n@@ -61,13 +62,8 @@\n      * @param level TODO\n      */\n     public ZipCompressAction(final File source, final File destination, final boolean deleteSource, final int level) {\n-        if (source == null) {\n-            throw new NullPointerException(\"source\");\n-        }\n-\n-        if (destination == null) {\n-            throw new NullPointerException(\"destination\");\n-        }\n+        Objects.requireNonNull(source, \"source\");\n+        Objects.requireNonNull(destination, \"destination\");\n \n         this.source = source;\n         this.destination = destination;",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ZipCompressAction.java",
                "sha": "5a61270954bfa3f5de9f9eda4d4e1c8e58065d5b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "deletions": 3,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java",
                "patch": "@@ -39,6 +39,7 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n \n /**\n@@ -121,9 +122,7 @@ private PluginElementVisitor(final Elements elements) {\n \n         @Override\n         public PluginEntry visitType(final TypeElement e, final Plugin plugin) {\n-            if (plugin == null) {\n-                throw new NullPointerException(\"Plugin annotation is null.\");\n-            }\n+            Objects.requireNonNull(plugin, \"Plugin annotation is null.\");\n             final PluginEntry entry = new PluginEntry();\n             entry.setKey(plugin.name().toLowerCase());\n             entry.setClassName(elements.getBinaryName(e).toString());",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java",
                "sha": "ff4e25bb51970a9eb21c1b262c355fc0214d447b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "deletions": 3,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Objects;\n \n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.Marker;\n@@ -72,9 +73,7 @@ public static DynamicThresholdFilter createFilter(\n     private DynamicThresholdFilter(final String key, final Map<String, Level> pairs, final Level defaultLevel,\n                                    final Result onMatch, final Result onMismatch) {\n         super(onMatch, onMismatch);\n-        if (key == null) {\n-            throw new NullPointerException(\"key cannot be null\");\n-        }\n+        Objects.requireNonNull(key, \"key cannot be null\");\n         this.key = key;\n         this.levelMap = pairs;\n         this.defaultThreshold = defaultLevel;",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java",
                "sha": "03edbdc33938cae44e1333df2ca3751b9e7fd258",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/MapFilter.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/MapFilter.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "deletions": 3,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/filter/MapFilter.java",
                "patch": "@@ -20,6 +20,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n \n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.Marker;\n@@ -50,9 +51,7 @@\n     protected MapFilter(final Map<String, List<String>> map, final boolean oper, final Result onMatch,\n                         final Result onMismatch) {\n         super(onMatch, onMismatch);\n-        if (map == null) {\n-            throw new NullPointerException(\"key cannot be null\");\n-        }\n+        Objects.requireNonNull(map, \"map cannot be null\");\n         this.isAnd = oper;\n         this.map = map;\n     }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/MapFilter.java",
                "sha": "89ecfe614fa92e6c86972c55432cb3bcc11f1f58",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "deletions": 3,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java",
                "patch": "@@ -23,6 +23,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n \n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.Marker;\n@@ -435,9 +436,7 @@ public static boolean canDeserialize(final Serializable event) {\n     }\n \n     public static Log4jLogEvent deserialize(final Serializable event) {\n-        if (event == null) {\n-            throw new NullPointerException(\"Event cannot be null\");\n-        }\n+        Objects.requireNonNull(event, \"Event cannot be null\");\n         if (event instanceof LogEventProxy) {\n             final LogEventProxy proxy = (LogEventProxy) event;\n             final Log4jLogEvent result = new Log4jLogEvent(proxy.loggerName, proxy.marker,",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java",
                "sha": "e57aa2eb1fab394cd2bcced4bb4a779391e6a7d0",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "deletions": 3,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java",
                "patch": "@@ -30,6 +30,7 @@\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n \n /**\n  * Most of the work of the {@link org.apache.logging.log4j.core.layout.PatternLayout} class is delegated to the\n@@ -303,9 +304,7 @@ private static int extractOptions(final String pattern, final int start, final L\n     public void parse(final String pattern, final List<PatternConverter> patternConverters,\n             final List<FormattingInfo> formattingInfos, final boolean noConsoleNoAnsi,\n             final boolean convertBackslashes) {\n-        if (pattern == null) {\n-            throw new NullPointerException(\"pattern\");\n-        }\n+        Objects.requireNonNull(pattern, \"pattern\");\n \n         final StringBuilder currentLiteral = new StringBuilder(BUF_SIZE);\n ",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java",
                "sha": "28d4180502e7eed9cb9d4828fd45c91744144200",
                "status": "modified"
            }
        ],
        "message": "Replace if-null-test-then-throw-NPE pattern with Java 7's\nObjects.requireNonNull() API.",
        "parent": "https://github.com/apache/logging-log4j2/commit/0de636c139c367dedeccd8e7acf9a41511f22a04",
        "repo": "logging-log4j2",
        "unit_tests": [
            "LevelTest.java",
            "Bzip2CompressActionTest.java",
            "PluginProcessorTest.java",
            "DynamicThresholdFilterTest.java",
            "MapFilterTest.java",
            "Log4jLogEventTest.java",
            "PatternParserTest.java"
        ]
    },
    "logging-log4j2_79d9d92": {
        "bug_id": "logging-log4j2_79d9d92",
        "commit": "https://github.com/apache/logging-log4j2/commit/79d9d924b8e1960c0f4a7c2272dddf309bd13c5d",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/79d9d924b8e1960c0f4a7c2272dddf309bd13c5d/core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java?ref=79d9d924b8e1960c0f4a7c2272dddf309bd13c5d",
                "deletions": 2,
                "filename": "core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java",
                "patch": "@@ -24,8 +24,6 @@\n import org.apache.logging.log4j.Logger;\n import org.apache.logging.log4j.core.Filter;\n import org.apache.logging.log4j.core.LogEvent;\n-import org.apache.logging.log4j.core.LoggerContext;\n-import org.apache.logging.log4j.core.LoggerContext.Status;\n import org.apache.logging.log4j.core.config.AppenderRef;\n import org.apache.logging.log4j.core.config.Configuration;\n import org.apache.logging.log4j.core.config.LoggerConfig;",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/79d9d924b8e1960c0f4a7c2272dddf309bd13c5d/core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java",
                "sha": "a62d9fdc428d2b12e4cc927d2982c2ab0e066370",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/79d9d924b8e1960c0f4a7c2272dddf309bd13c5d/core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java?ref=79d9d924b8e1960c0f4a7c2272dddf309bd13c5d",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java",
                "patch": "@@ -220,6 +220,9 @@ public synchronized void shutdown() {\n             return;\n         }\n         Disruptor<Log4jEventWrapper> temp = disruptor;\n+        if (temp == null) {\n+            return; // disruptor was already shut down by another thread\n+        }\n \n         // Must guarantee that publishing to the RingBuffer has stopped\n         // before we call disruptor.shutdown()",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/79d9d924b8e1960c0f4a7c2272dddf309bd13c5d/core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java",
                "sha": "5aacdca8094ea1f099ea0d414e45574b6c2450e6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/79d9d924b8e1960c0f4a7c2272dddf309bd13c5d/src/changes/changes.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=79d9d924b8e1960c0f4a7c2272dddf309bd13c5d",
                "deletions": 1,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -23,7 +23,7 @@\n \n   <body>\n     <release version=\"2.0-beta6\" date=\"@TBD@\" description=\"Bug fixes and enhancements\">\n-      <action issue=\"LOG4J2-222\" dev=\"rgoers\" type=\"fix\">\n+      <action issue=\"LOG4J2-222\" dev=\"rgoers\" type=\"fix\" due-to=\"Steven Yang\">\n         Disruptor will now shutdown during Tomcat shutdown.\n       </action>\n       <action dev=\"rpopma\" type=\"update\">",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/79d9d924b8e1960c0f4a7c2272dddf309bd13c5d/src/changes/changes.xml",
                "sha": "2d9becee64254511753dbc3cdd91571fc7b66a31",
                "status": "modified"
            }
        ],
        "message": "prevent NPE in ShutdownHook thread if disruptor was already shut down; added credit to Steven Yang for pointing out the original issue\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1478040 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/461f0ed7f90d446803c5e0f7f45753a369a4b0dd",
        "repo": "logging-log4j2",
        "unit_tests": [
            "AsyncLoggerConfigTest.java"
        ]
    },
    "logging-log4j2_7e83dfb": {
        "bug_id": "logging-log4j2_7e83dfb",
        "commit": "https://github.com/apache/logging-log4j2/commit/7e83dfb0c26bcbb2dcd1677f90e36f6ecc4f8c0c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/7e83dfb0c26bcbb2dcd1677f90e36f6ecc4f8c0c/log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/EnvironmentPasswordProvider.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/EnvironmentPasswordProvider.java?ref=7e83dfb0c26bcbb2dcd1677f90e36f6ecc4f8c0c",
                "deletions": 1,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/EnvironmentPasswordProvider.java",
                "patch": "@@ -50,6 +50,6 @@ public EnvironmentPasswordProvider(final String passwordEnvironmentVariable) {\n     @Override\n     public char[] getPassword() {\n         String password = System.getenv(passwordEnvironmentVariable);\n-        return password.toCharArray();\n+        return password == null ? null : password.toCharArray();\n     }\n }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/7e83dfb0c26bcbb2dcd1677f90e36f6ecc4f8c0c/log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/EnvironmentPasswordProvider.java",
                "sha": "d60f82cf2c5fe60e340415fb87ef51a53b7a49c0",
                "status": "modified"
            }
        ],
        "message": "LOG4J2-2054 prevent NPE when environment variable is not defined, allowing for null passwords",
        "parent": "https://github.com/apache/logging-log4j2/commit/cbbc529cc95de81834ece0bbf22c4f9d976ce327",
        "repo": "logging-log4j2",
        "unit_tests": [
            "EnvironmentPasswordProviderTest.java"
        ]
    },
    "logging-log4j2_9b8a17f": {
        "bug_id": "logging-log4j2_9b8a17f",
        "commit": "https://github.com/apache/logging-log4j2/commit/9b8a17f4c4d9e2f157412fc2f2ea773064b77c8e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/9b8a17f4c4d9e2f157412fc2f2ea773064b77c8e/log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java?ref=9b8a17f4c4d9e2f157412fc2f2ea773064b77c8e",
                "deletions": 1,
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java",
                "patch": "@@ -434,7 +434,7 @@ static ResourceBundle getCharsetsResourceBundle() {\n      * @return true if system properties tell us we are running on Windows.\n      */\n     public boolean isOsWindows() {\n-        return getStringProperty(\"os.name\").startsWith(\"Windows\");\n+        return getStringProperty(\"os.name\", \"\").startsWith(\"Windows\");\n     }\n \n }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/9b8a17f4c4d9e2f157412fc2f2ea773064b77c8e/log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java",
                "sha": "f5e1ecb56100a3359690429b23ffa151e3792a8e",
                "status": "modified"
            }
        ],
        "message": "Prevent potential NPE when the os.name property cannot be accessed",
        "parent": "https://github.com/apache/logging-log4j2/commit/31f68af86c503862230514d67c18a7a6616312c7",
        "repo": "logging-log4j2",
        "unit_tests": [
            "PropertiesUtilTest.java"
        ]
    },
    "logging-log4j2_a05730d": {
        "bug_id": "logging-log4j2_a05730d",
        "commit": "https://github.com/apache/logging-log4j2/commit/a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-1.2-api/src/test/java/org/apache/log4j/CategoryTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-1.2-api/src/test/java/org/apache/log4j/CategoryTest.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "deletions": 1,
                "filename": "log4j-1.2-api/src/test/java/org/apache/log4j/CategoryTest.java",
                "patch": "@@ -161,7 +161,7 @@ public void testSetPriority() {\n     @Test\n     public void testClassName() {\n         final Category category = Category.getInstance(\"TestCategory\");\n-        final Layout<String> layout = PatternLayout.createCustomLayout(\"%d %p %C{1.} [%t] %m%n\");\n+        final Layout<String> layout = PatternLayout.custom().withPattern(\"%d %p %C{1.} [%t] %m%n\").build();\n         final ListAppender appender = new ListAppender(\"List2\", null, layout, false, false);\n         appender.start();\n         category.setAdditivity(false);",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-1.2-api/src/test/java/org/apache/log4j/CategoryTest.java",
                "sha": "83328cf4cc4804676276c0e21d36618a3144afc6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-1.2-api/src/test/java/org/apache/log4j/LoggerTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-1.2-api/src/test/java/org/apache/log4j/LoggerTest.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "deletions": 1,
                "filename": "log4j-1.2-api/src/test/java/org/apache/log4j/LoggerTest.java",
                "patch": "@@ -456,7 +456,7 @@ public void testIsTraceEnabled() {\n     @Test\n     @SuppressWarnings(\"deprecation\")\n     public void testLog() {\n-        final PatternLayout layout = PatternLayout.createCustomLayout(\"%d %C %L %m\");\n+        final PatternLayout layout = PatternLayout.custom().withPattern(\"%d %C %L %m\").build();\n         final ListAppender appender = new ListAppender(\"List\", null, layout, false, false);\n         appender.start();\n         final Logger root = Logger.getRootLogger();",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-1.2-api/src/test/java/org/apache/log4j/LoggerTest.java",
                "sha": "c61cef82525e2db830e7b435ed0f6e281d51e230",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/ColumnConfig.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/ColumnConfig.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "deletions": 4,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/ColumnConfig.java",
                "patch": "@@ -129,10 +129,13 @@ public static ColumnConfig createColumnConfig(\n             return new ColumnConfig(name, null, literalValue, false, false, false);\n         }\n         if (isPattern) {\n-            return new ColumnConfig(\n-                    name, PatternLayout.createLayout(pattern, config, null, null, false, false, null, null), null,\n-                    false, isUnicode, isClob\n-            );\n+            final PatternLayout layout =\n+                PatternLayout.custom()\n+                    .withPattern(pattern)\n+                    .withConfiguration(config)\n+                    .withAlwaysWriteExceptions(false)\n+                    .build();\n+            return new ColumnConfig(name, layout, null, false, isUnicode, isClob);\n         }\n \n         LOGGER.error(\"To configure a column you must specify a pattern or literal or set isEventDate to true.\");",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/ColumnConfig.java",
                "sha": "1f9454eb13e49610c914909947bba5401662929d",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "deletions": 3,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java",
                "patch": "@@ -166,7 +166,7 @@ public void start() {\n     public void stop() {\n         this.setStopping();\n         LOGGER.trace(\"AbstractConfiguration stopping...\");\n-        \n+\n         // LOG4J2-392 first stop AsyncLogger Disruptor thread\n         final LoggerContextFactory factory = LogManager.getFactory();\n         if (factory instanceof Log4jContextFactory) {\n@@ -376,9 +376,12 @@ protected void doConfigure() {\n     }\n \n     private void setToDefault() {\n+        // TODO: reduce duplication between this method and DefaultConfiguration constructor\n         setName(DefaultConfiguration.DEFAULT_NAME);\n-        final Layout<? extends Serializable> layout =\n-                PatternLayout.createCustomLayout(\"%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\");\n+        final Layout<? extends Serializable> layout = PatternLayout.custom()\n+            .withPattern(DefaultConfiguration.DEFAULT_PATTERN)\n+            .withConfiguration(this)\n+            .build();\n         final Appender appender = ConsoleAppender.createAppender(layout, null, \"SYSTEM_OUT\", \"Console\", \"false\",\n             \"true\");\n         appender.start();",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java",
                "sha": "790819cb9164011538ee73a0a92c9c90d93acd60",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultConfiguration.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultConfiguration.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "deletions": 2,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultConfiguration.java",
                "patch": "@@ -52,8 +52,10 @@\n     public DefaultConfiguration() {\n \n         setName(DEFAULT_NAME);\n-        final Layout<? extends Serializable> layout =\n-                PatternLayout.createCustomLayout(DEFAULT_PATTERN);\n+        final Layout<? extends Serializable> layout = PatternLayout.custom()\n+            .withPattern(DEFAULT_PATTERN)\n+            .withConfiguration(this)\n+            .build();\n         final Appender appender =\n                 ConsoleAppender.createAppender(layout, null, \"SYSTEM_OUT\", \"Console\", \"false\", \"true\");\n         appender.start();",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultConfiguration.java",
                "sha": "22bcb3a7671a2dd43c0d481a072bac39e6794093",
                "status": "modified"
            },
            {
                "additions": 93,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java",
                "changes": 112,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "deletions": 19,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java",
                "patch": "@@ -23,12 +23,15 @@\n \n import org.apache.logging.log4j.core.LogEvent;\n import org.apache.logging.log4j.core.config.Configuration;\n+import org.apache.logging.log4j.core.config.DefaultConfiguration;\n import org.apache.logging.log4j.core.config.plugins.Plugin;\n import org.apache.logging.log4j.core.config.plugins.PluginAttribute;\n+import org.apache.logging.log4j.core.config.plugins.PluginBuilderFactory;\n import org.apache.logging.log4j.core.config.plugins.PluginConfiguration;\n import org.apache.logging.log4j.core.config.plugins.PluginDefault;\n import org.apache.logging.log4j.core.config.plugins.PluginElement;\n import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n+import org.apache.logging.log4j.core.config.plugins.util.ConfigurablePluginBuilder;\n import org.apache.logging.log4j.core.pattern.LogEventPatternConverter;\n import org.apache.logging.log4j.core.pattern.PatternFormatter;\n import org.apache.logging.log4j.core.pattern.PatternParser;\n@@ -176,7 +179,7 @@ public void setConversionPattern(final String conversionPattern) {\n \n     /**\n      * Gets the conversion pattern.\n-     * \n+     *\n      * @return the conversion pattern.\n      */\n     public String getConversionPattern() {\n@@ -245,7 +248,7 @@ public String toString() {\n \n     /**\n      * Create a pattern layout.\n-     * \n+     *\n      * @param pattern\n      *        The pattern. If not specified, defaults to DEFAULT_CONVERSION_PATTERN.\n      * @param config\n@@ -286,30 +289,101 @@ public static PatternLayout createLayout(\n      * @see #DEFAULT_CONVERSION_PATTERN Default conversion pattern\n      */\n     public static PatternLayout createDefaultLayout() {\n-        return createCustomLayout(DEFAULT_CONVERSION_PATTERN);\n+        return custom().build();\n     }\n \n     /**\n-     * Creates a PatternLayout using a custom layout and the default options elsewhere.\n-     *\n-     * @param layout the conversion pattern layout to use.\n-     * @return the PatternLayout.\n+     * Creates a builder for a custom PatternLayout.\n+     * @return a PatternLayout builder.\n      */\n-    public static PatternLayout createCustomLayout(final String layout) {\n-        return createCustomLayout(layout, null);\n+    @PluginBuilderFactory\n+    public static Builder custom() {\n+        return new Builder();\n     }\n \n     /**\n-     * Creates a PatternLayout using a specific Configuration, custom pattern conversion layout, and default options\n-     * for everything else.\n-     *\n-     * @param layout the conversion pattern layout to use.\n-     * @param config The Configuration. Some Converters require access to the Interpolator.\n-     * @return the PatternLayout.\n+     * Custom PatternLayout builder. Use the {@link PatternLayout#custom() builder factory method} to create this.\n      */\n-    public static PatternLayout createCustomLayout(final String layout, final Configuration config) {\n-        return new PatternLayout(\n-            config, null, layout, Charsets.UTF_8, true, false, null, null\n-        );\n+    public static class Builder implements ConfigurablePluginBuilder<PatternLayout> {\n+\n+        @PluginAttribute(\"pattern\")\n+        private String pattern = PatternLayout.DEFAULT_CONVERSION_PATTERN;\n+\n+        @PluginConfiguration\n+        private Configuration configuration = null;\n+\n+        @PluginElement(\"Replace\")\n+        private RegexReplacement regexReplacement = null;\n+\n+        @PluginAttribute(\"charset\")\n+        private Charset charset = Charsets.UTF_8;\n+\n+        @PluginAttribute(\"alwaysWriteExceptions\")\n+        private boolean alwaysWriteExceptions = true;\n+\n+        @PluginAttribute(\"noConsoleNoAnsi\")\n+        private boolean noConsoleNoAnsi = false;\n+\n+        @PluginAttribute(\"header\")\n+        private String header = null;\n+\n+        @PluginAttribute(\"footer\")\n+        private String footer = null;\n+\n+        private Builder() {\n+        }\n+\n+        // TODO: move javadocs from PluginFactory to here\n+\n+        public Builder withPattern(final String pattern) {\n+            this.pattern = pattern;\n+            return this;\n+        }\n+\n+\n+        public Builder withConfiguration(final Configuration configuration) {\n+            this.configuration = configuration;\n+            return this;\n+        }\n+\n+        public Builder withRegexReplacement(final RegexReplacement regexReplacement) {\n+            this.regexReplacement = regexReplacement;\n+            return this;\n+        }\n+\n+        public Builder withCharset(final Charset charset) {\n+            this.charset = charset;\n+            return this;\n+        }\n+\n+        public Builder withAlwaysWriteExceptions(final boolean alwaysWriteExceptions) {\n+            this.alwaysWriteExceptions = alwaysWriteExceptions;\n+            return this;\n+        }\n+\n+        public Builder withNoConsoleNoAnsi(final boolean noConsoleNoAnsi) {\n+            this.noConsoleNoAnsi = noConsoleNoAnsi;\n+            return this;\n+        }\n+\n+        public Builder withHeader(final String header) {\n+            this.header = header;\n+            return this;\n+        }\n+\n+        public Builder withFooter(final String footer) {\n+            this.footer = footer;\n+            return this;\n+        }\n+\n+        @Override\n+        public PatternLayout build() {\n+            // fall back to DefaultConfiguration\n+            if (configuration == null) {\n+                configuration = new DefaultConfiguration();\n+            }\n+            return new PatternLayout(configuration, regexReplacement, pattern, charset, alwaysWriteExceptions,\n+                noConsoleNoAnsi, header, footer);\n+        }\n     }\n }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java",
                "sha": "f67d12307a9c4be5f0de128be0f7ac4574f888e9",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderTest.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "deletions": 2,
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderTest.java",
                "patch": "@@ -66,7 +66,7 @@ public void testAppender() throws Exception {\n \n     @Test\n     public void testSmallestBufferSize() throws Exception {\n-        final Layout<String> layout = PatternLayout.createCustomLayout(PatternLayout.SIMPLE_CONVERSION_PATTERN);\n+        final Layout<String> layout = PatternLayout.custom().withPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN).build();\n         final String bufferSizeStr = \"1\";\n         final FileAppender appender = FileAppender.createAppender(FILENAME, \"true\", \"false\", \"test\", \"false\", \"false\",\n                 \"false\", bufferSizeStr, layout, null, \"false\", null, null);\n@@ -160,7 +160,7 @@ public void testMultipleVMs() throws Exception {\n     }\n \n     private static void writer(final boolean lock, final int count, final String name) throws Exception {\n-        final Layout<String> layout = PatternLayout.createCustomLayout(PatternLayout.SIMPLE_CONVERSION_PATTERN);\n+        final Layout<String> layout = PatternLayout.custom().withPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN).build();\n         final FileAppender app = FileAppender.createAppender(FILENAME, \"true\", Boolean.toString(lock), \"test\", \"false\",\n                 \"false\", \"false\", null, layout, null, \"false\", null, null);\n         app.start();",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderTest.java",
                "sha": "dd64824a7953c15c594e3c107cd5dc2b0c5486fc",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/config/CustomConfigurationTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/config/CustomConfigurationTest.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "deletions": 2,
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/config/CustomConfigurationTest.java",
                "patch": "@@ -72,8 +72,10 @@ public void testConfig() {\n                 break;\n             }\n         }\n-        final Layout<? extends Serializable> layout =\n-            PatternLayout.createCustomLayout(PatternLayout.SIMPLE_CONVERSION_PATTERN, config);\n+        final Layout<? extends Serializable> layout = PatternLayout.custom()\n+            .withPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN)\n+            .withConfiguration(config)\n+            .build();\n         Appender appender = FileAppender.createAppender(LOG_FILE, \"false\", \"false\", \"File\", \"true\",\n             \"false\", \"false\", \"4000\", layout, null, \"false\", null, config);\n         appender.start();",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/config/CustomConfigurationTest.java",
                "sha": "b86331676d571f08800f811b4e26d3f775d6932e",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutTest.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutTest.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "deletions": 7,
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutTest.java",
                "patch": "@@ -84,7 +84,10 @@ public void mdcPattern() throws Exception {\n         }\n \n         // set up appender\n-        final PatternLayout layout = PatternLayout.createCustomLayout(msgPattern, ctx.getConfiguration());\n+        final PatternLayout layout = PatternLayout.custom()\n+            .withPattern(msgPattern)\n+            .withConfiguration(ctx.getConfiguration())\n+            .build();\n         // FileOutputStream fos = new FileOutputStream(OUTPUT_FILE + \"_mdc\");\n         final FileAppender appender = FileAppender.createAppender(OUTPUT_FILE + \"_mdc\", \"false\", \"false\", \"File\",\n                 \"false\", \"true\", \"false\", null, layout, null, \"false\", null, null);\n@@ -150,7 +153,10 @@ public void mdcPattern() throws Exception {\n     @Test\n     public void testRegex() throws Exception {\n         final LoggerContext ctx = (LoggerContext) LogManager.getContext();\n-        final PatternLayout layout = PatternLayout.createCustomLayout(regexPattern, ctx.getConfiguration());\n+        final PatternLayout layout = PatternLayout.custom()\n+            .withPattern(regexPattern)\n+            .withConfiguration(ctx.getConfiguration())\n+            .build();\n         final LogEvent event = new Log4jLogEvent(this.getClass().getName(), null,\n                 \"org.apache.logging.log4j.core.Logger\", Level.INFO, new SimpleMessage(\"Hello, world!\"), null);\n         final byte[] result = layout.toByteArray(event);\n@@ -159,7 +165,10 @@ public void testRegex() throws Exception {\n \n     private void testUnixTime(String pattern) throws Exception {\n         final LoggerContext ctx = (LoggerContext) LogManager.getContext();\n-        final PatternLayout layout = PatternLayout.createCustomLayout(pattern + \" %m\", ctx.getConfiguration());\n+        final PatternLayout layout = PatternLayout.custom()\n+            .withPattern(pattern + \" %m\")\n+            .withConfiguration(ctx.getConfiguration())\n+            .build();\n         final LogEvent event1 = new Log4jLogEvent(this.getClass().getName(), null,\n                 \"org.apache.logging.log4j.core.Logger\", Level.INFO, new SimpleMessage(\"Hello, world 1!\"), null);\n         final byte[] result1 = layout.toByteArray(event1);\n@@ -175,7 +184,10 @@ private void testUnixTime(String pattern) throws Exception {\n     @Test\n     public void testUnixTime() throws Exception {\n         final LoggerContext ctx = (LoggerContext) LogManager.getContext();\n-        final PatternLayout layout = PatternLayout.createCustomLayout(\"%d{UNIX} %m\", ctx.getConfiguration());\n+        final PatternLayout layout = PatternLayout.custom()\n+            .withPattern(\"%d{UNIX} %m\")\n+            .withConfiguration(ctx.getConfiguration())\n+            .build();\n         final LogEvent event1 = new Log4jLogEvent(this.getClass().getName(), null,\n                 \"org.apache.logging.log4j.core.Logger\", Level.INFO, new SimpleMessage(\"Hello, world 1!\"), null);\n         final byte[] result1 = layout.toByteArray(event1);\n@@ -191,7 +203,10 @@ public void testUnixTime() throws Exception {\n     @Test\n     public void testUnixTimeMillis() throws Exception {\n         final LoggerContext ctx = (LoggerContext) LogManager.getContext();\n-        final PatternLayout layout = PatternLayout.createCustomLayout(\"%d{UNIX_MILLIS} %m\", ctx.getConfiguration());\n+        final PatternLayout layout = PatternLayout.custom()\n+            .withPattern(\"%d{UNIX_MILLIS} %m\")\n+            .withConfiguration(ctx.getConfiguration())\n+            .build();\n         final LogEvent event1 = new Log4jLogEvent(this.getClass().getName(), null,\n                 \"org.apache.logging.log4j.core.Logger\", Level.INFO, new SimpleMessage(\"Hello, world 1!\"), null);\n         final byte[] result1 = layout.toByteArray(event1);\n@@ -207,8 +222,12 @@ public void testUnixTimeMillis() throws Exception {\n     @Test\n     public void testHeaderFooter() throws Exception {\n         final LoggerContext ctx = (LoggerContext) LogManager.getContext();\n-        final PatternLayout layout = PatternLayout\n-            .createLayout(\"%d{UNIX} %m\", ctx.getConfiguration(), null, null, true, false, \"${ctx:header}\", \"${ctx:footer}\");\n+        final PatternLayout layout = PatternLayout.custom()\n+            .withPattern(\"%d{UNIX} %m\")\n+            .withConfiguration(ctx.getConfiguration())\n+            .withHeader(\"${ctx:header}\")\n+            .withFooter(\"${ctx:footer}\")\n+            .build();\n         ThreadContext.put(\"header\", \"Hello world Header\");\n         ThreadContext.put(\"footer\", \"Hello world Footer\");\n         final LogEvent event1 = new Log4jLogEvent(this.getClass().getName(), null,",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutTest.java",
                "sha": "6a960939d50595079061b625487daf8f3b1b5d4e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsQueueTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsQueueTest.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "deletions": 1,
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsQueueTest.java",
                "patch": "@@ -100,7 +100,7 @@ public void testServer() throws Exception {\n         final CompositeFilter serverFilters = CompositeFilter.createFilters(new Filter[]{serverFilter});\n         final ListAppender listApp = new ListAppender(\"Events\", serverFilters, null, false, false);\n         listApp.start();\n-        final PatternLayout layout = PatternLayout.createCustomLayout(\"%m %ex%n\");\n+        final PatternLayout layout = PatternLayout.custom().withPattern(\"%m %ex%n\").build();\n         final ConsoleAppender console = ConsoleAppender.createAppender(layout, null, \"SYSTEM_OUT\", \"Console\", \"false\", \"true\");\n         console.start();\n         final Logger serverLogger = ctx.getLogger(JmsTopicReceiver.class.getName());",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsQueueTest.java",
                "sha": "d46a33e761165f7cda390a47b07caf0aa4d50f39",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsTopicTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsTopicTest.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "deletions": 1,
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsTopicTest.java",
                "patch": "@@ -100,7 +100,7 @@ public void testServer() throws Exception {\n         final CompositeFilter serverFilters = CompositeFilter.createFilters(new Filter[]{serverFilter});\n         final ListAppender listApp = new ListAppender(\"Events\", serverFilters, null, false, false);\n         listApp.start();\n-        final PatternLayout layout = PatternLayout.createCustomLayout(\"%m %ex%n\");\n+        final PatternLayout layout = PatternLayout.custom().withPattern(\"%m %ex%n\").build();\n         final ConsoleAppender console =\n                 ConsoleAppender.createAppender(layout, null, \"SYSTEM_OUT\", \"Console\", \"false\", \"true\");\n         console.start();",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsTopicTest.java",
                "sha": "a264a2dfdadbab2d7c76c7abbf557fb13f017a36",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/AbstractSocketServerTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/AbstractSocketServerTest.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "deletions": 1,
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/AbstractSocketServerTest.java",
                "patch": "@@ -173,7 +173,7 @@ protected void testServer(final String... messages) throws Exception {\n         socketAppender.start();\n         final ListAppender listAppender = new ListAppender(\"Events\", serverFilter, null, false, false);\n         listAppender.start();\n-        final PatternLayout layout = PatternLayout.createCustomLayout(\"%m %ex%n\");\n+        final PatternLayout layout = PatternLayout.custom().withPattern(\"%m %ex%n\").build();\n         final ConsoleAppender console = ConsoleAppender.createAppender(layout, null, \"SYSTEM_OUT\", \"Console\", \"false\",\n                 \"true\");\n         final Logger serverLogger = ctx.getLogger(this.getClass().getName());",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/AbstractSocketServerTest.java",
                "sha": "d839f82eeff99b286b9edd8935af31768d56347a",
                "status": "modified"
            }
        ],
        "message": "Migrate PatternLayout to use Builder class.\n\n  - Replaced usages of createCustomLayout() with custom()...build() \n  chains.\n  - Updated DefaultConfiguration to use the builder without causing \n  an infinite recursion loop.\n  - Fall back to a new DefaultConfiguration() in case no \n  Configuration is specified in builder (can help prevent NPEs where \n  config is assumed non-null).\n  - Noted where code is duplicated between DefaultConfiguration and \n  AbstractConfiguration.\n  - Deleted the createCustomLayout() methods from PatternLayout.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1597494 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/36264bd2864632168c1989f4eb89ed23753d8e70",
        "repo": "logging-log4j2",
        "unit_tests": [
            "ColumnConfigTest.java",
            "PatternLayoutTest.java"
        ]
    },
    "logging-log4j2_a4aab92": {
        "bug_id": "logging-log4j2_a4aab92",
        "commit": "https://github.com/apache/logging-log4j2/commit/a4aab92d9fc64eccfbcff8c69e4759976d57078d",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a4aab92d9fc64eccfbcff8c69e4759976d57078d/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java?ref=a4aab92d9fc64eccfbcff8c69e4759976d57078d",
                "deletions": 4,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "patch": "@@ -224,7 +224,7 @@ private void formatElements(final StringBuilder sb, final int commonCount, final\n             final ExtendedStackTraceElement[] extStackTrace, final List<String> ignorePackages) {\n         if (ignorePackages == null || ignorePackages.isEmpty()) {\n             for (int i = 0; i < extStackTrace.length; ++i) {\n-                this.formatEntry(causedTrace[i], extStackTrace[i], sb);\n+                this.formatEntry(extStackTrace[i], sb);\n             }\n         } else {\n             int count = 0;\n@@ -238,7 +238,7 @@ private void formatElements(final StringBuilder sb, final int commonCount, final\n                         }\n                         count = 0;\n                     }\n-                    this.formatEntry(causedTrace[i], extStackTrace[i], sb);\n+                    this.formatEntry(extStackTrace[i], sb);\n                 } else {\n                     ++count;\n                 }\n@@ -256,8 +256,7 @@ private void formatElements(final StringBuilder sb, final int commonCount, final\n         }\n     }\n \n-    private void formatEntry(final StackTraceElement element, final ExtendedStackTraceElement extStackTraceElement,\n-            final StringBuilder sb) {\n+    private void formatEntry(final ExtendedStackTraceElement extStackTraceElement, final StringBuilder sb) {\n         sb.append(\"\\tat \");\n         sb.append(extStackTraceElement);\n         sb.append('\\n');",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a4aab92d9fc64eccfbcff8c69e4759976d57078d/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "sha": "2320ad7dbcf6be9afeadb49964035d85d36bd77a",
                "status": "modified"
            }
        ],
        "message": "[LOG4J2-799] Log4j 2 throws ArrayIndexOutOfBoundsException. The private\nmethod ThrowableProxy.formatEntry(StackTraceElement,\nExtendedStackTraceElement, StringBuilder) is now\nformatEntry(ExtendedStackTraceElement, StringBuilder) because the\nStackTraceElement was not used. Also, it is possible that calling this\nmethod could cause an NPE while a call site tried to address a null\nStackTraceElement from\nThrowableProxy.getExtendedStackTrace(ThrowableProxy.java:232). This is\nwhat seems to happen in the stack strace for [LOG4J2-799] which matches\nup with 2.0-rc1.",
        "parent": "https://github.com/apache/logging-log4j2/commit/443779ad005c14f0fd5b9f2b47f318618bfe96fd",
        "repo": "logging-log4j2",
        "unit_tests": [
            "ThrowableProxyTest.java"
        ]
    },
    "logging-log4j2_a58e1d5": {
        "bug_id": "logging-log4j2_a58e1d5",
        "commit": "https://github.com/apache/logging-log4j2/commit/a58e1d5ccf856cb473b681a012b7d9d96f489916",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a58e1d5ccf856cb473b681a012b7d9d96f489916/log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java?ref=a58e1d5ccf856cb473b681a012b7d9d96f489916",
                "deletions": 1,
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java",
                "patch": "@@ -2181,7 +2181,8 @@ private void handleLogMessageException(final Exception exception, final String f\n             throw (LoggingException) exception;\n         }\n         final String format = msg.getFormat();\n-        final StringBuilder sb = new StringBuilder(format.length() + 100);\n+        final int formatLength = format == null ? 4 : format.length();\n+        final StringBuilder sb = new StringBuilder(formatLength + 100);\n         sb.append(fqcn);\n         sb.append(\" caught \");\n         sb.append(exception.getClass().getName());",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a58e1d5ccf856cb473b681a012b7d9d96f489916/log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java",
                "sha": "5b6ac1acf4a5545a805cc8b884a8cd96879a2b8c",
                "status": "modified"
            },
            {
                "additions": 81,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a58e1d5ccf856cb473b681a012b7d9d96f489916/log4j-api/src/test/java/org/apache/logging/log4j/AbstractLoggerTest.java",
                "changes": 81,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/test/java/org/apache/logging/log4j/AbstractLoggerTest.java?ref=a58e1d5ccf856cb473b681a012b7d9d96f489916",
                "deletions": 0,
                "filename": "log4j-api/src/test/java/org/apache/logging/log4j/AbstractLoggerTest.java",
                "patch": "@@ -16,23 +16,31 @@\n  */\n package org.apache.logging.log4j;\n \n+import static org.hamcrest.CoreMatchers.containsString;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import org.apache.logging.log4j.junit.StatusLoggerRule;\n import org.apache.logging.log4j.message.Message;\n import org.apache.logging.log4j.message.ObjectMessage;\n import org.apache.logging.log4j.message.ParameterizedMessage;\n import org.apache.logging.log4j.message.ParameterizedMessageFactory;\n import org.apache.logging.log4j.message.SimpleMessage;\n import org.apache.logging.log4j.spi.AbstractLogger;\n import org.apache.logging.log4j.spi.MessageFactory2Adapter;\n+import org.apache.logging.log4j.status.StatusData;\n+import org.apache.logging.log4j.status.StatusLogger;\n import org.apache.logging.log4j.util.MessageSupplier;\n import org.apache.logging.log4j.util.Supplier;\n+import org.junit.Rule;\n import org.junit.Test;\n \n+import java.util.List;\n+\n /**\n  *\n  */\n@@ -59,6 +67,9 @@\n     private static final Marker MARKER = MarkerManager.getMarker(\"TEST\");\n     private static final String MARKER_NAME = \"TEST\";\n \n+    @Rule\n+    public StatusLoggerRule status = new StatusLoggerRule(Level.WARN);\n+\n     private static final LogEvent[] EVENTS = new LogEvent[] {\n         new LogEvent(null, simple, null),\n         new LogEvent(MARKER_NAME, simple, null),\n@@ -902,6 +913,73 @@ public Message get() {\n         logger.log(Level.INFO, MARKER, supplier);\n     }\n \n+    @Test\n+    public void testMessageThrows() {\n+        final ThrowableExpectingLogger logger = new ThrowableExpectingLogger(false);\n+        logger.error(new TestMessage(new TestMessage.FormattedMessageSupplier() {\n+            @Override\n+            public String getFormattedMessage() {\n+                throw new IllegalStateException(\"Oops!\");\n+            }\n+        }, \"Message Format\"));\n+        List<StatusData> statusDatalist = StatusLogger.getLogger().getStatusData();\n+        StatusData mostRecent = statusDatalist.get(statusDatalist.size() - 1);\n+        assertEquals(Level.WARN, mostRecent.getLevel());\n+        assertThat(mostRecent.getFormattedStatus(), containsString(\n+                \"org.apache.logging.log4j.spi.AbstractLogger caught \" +\n+                        \"java.lang.IllegalStateException logging TestMessage: Message Format\"));\n+    }\n+\n+    @Test\n+    public void testMessageThrowsAndNullFormat() {\n+        final ThrowableExpectingLogger logger = new ThrowableExpectingLogger(false);\n+        logger.error(new TestMessage(new TestMessage.FormattedMessageSupplier() {\n+            @Override\n+            public String getFormattedMessage() {\n+                throw new IllegalStateException(\"Oops!\");\n+            }\n+        }, null /* format */));\n+        List<StatusData> statusDatalist = StatusLogger.getLogger().getStatusData();\n+        StatusData mostRecent = statusDatalist.get(statusDatalist.size() - 1);\n+        assertEquals(Level.WARN, mostRecent.getLevel());\n+        assertThat(mostRecent.getFormattedStatus(), containsString(\n+                \"org.apache.logging.log4j.spi.AbstractLogger caught \" +\n+                        \"java.lang.IllegalStateException logging TestMessage: \"));\n+    }\n+\n+    private static final class TestMessage implements Message {\n+        private final FormattedMessageSupplier formattedMessageSupplier;\n+        private final String format;\n+        TestMessage(FormattedMessageSupplier formattedMessageSupplier, String format) {\n+            this.formattedMessageSupplier = formattedMessageSupplier;\n+            this.format = format;\n+        }\n+\n+        @Override\n+        public String getFormattedMessage() {\n+            return formattedMessageSupplier.getFormattedMessage();\n+        }\n+\n+        @Override\n+        public String getFormat() {\n+            return format;\n+        }\n+\n+        @Override\n+        public Object[] getParameters() {\n+            return new Object[0];\n+        }\n+\n+        @Override\n+        public Throwable getThrowable() {\n+            return null;\n+        }\n+\n+        interface FormattedMessageSupplier {\n+            String getFormattedMessage();\n+        }\n+    }\n+\n     private static class CountingLogger extends AbstractLogger {\n         private static final long serialVersionUID = -3171452617952475480L;\n \n@@ -1229,6 +1307,9 @@ public void logMessage(final String fqcn, final Level level, final Marker marker\n             } else {\n                 assertNull(\"Expected null but received a Throwable! \"+t, t);\n             }\n+            if (message != null) {\n+                message.getFormattedMessage();\n+            }\n         }\n \n         @Override",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a58e1d5ccf856cb473b681a012b7d9d96f489916/log4j-api/src/test/java/org/apache/logging/log4j/AbstractLoggerTest.java",
                "sha": "a152aad4b26f8346866a5c5bd62eb1ef06c510c1",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a58e1d5ccf856cb473b681a012b7d9d96f489916/src/changes/changes.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=a58e1d5ccf856cb473b681a012b7d9d96f489916",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -142,6 +142,9 @@\n       <action issue=\"LOG4J2-2318\" dev=\"ckozak\" type=\"fix\">\n         Messages are no longer mutated when the asynchronous queue is full. A warning is logged to the status logger instead.\n       </action>\n+      <action issue=\"LOG4J2-2320\" dev=\"ckozak\" type=\"fix\">\n+        Fix NPE in AbstractLogger when another exception is thrown, masking the root cause.\n+      </action>\n     </release>\n     <release version=\"2.11.1\" date=\"2018-MM-DD\" description=\"GA Release 2.11.1\">\n       <action issue=\"LOG4J2-2268\" dev=\"rgoers\" type=\"fix\" due-to=\"Tilman Hausherr\">",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a58e1d5ccf856cb473b681a012b7d9d96f489916/src/changes/changes.xml",
                "sha": "c3e36b73f2e7ca63ae8b25da9d7aa426a5aff54f",
                "status": "modified"
            }
        ],
        "message": "[LOG4J2-2320] Fix NPE in AbstractLogger when another exception is thrown\n\nThis bug hides the original cause of the failure.",
        "parent": "https://github.com/apache/logging-log4j2/commit/e12defadf16b4d57bf856d0995c910ab0a851762",
        "repo": "logging-log4j2",
        "unit_tests": [
            "AbstractLoggerTest.java"
        ]
    },
    "logging-log4j2_a5a1f1a": {
        "bug_id": "logging-log4j2_a5a1f1a",
        "commit": "https://github.com/apache/logging-log4j2/commit/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java?ref=a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89",
                "deletions": 2,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java",
                "patch": "@@ -230,10 +230,16 @@ public void logMessage(final String fqcn, final Level level, final Marker marker\n             info = new Info(new RingBufferLogEventTranslator(), Thread.currentThread().getName(), false);\n             threadlocalInfo.set(info);\n         }\n+        \n+        Disruptor<RingBufferLogEvent> temp = disruptor;\n+        if (temp == null) { // LOG4J2-639\n+            LOGGER.fatal(\"Ignoring log event after log4j was shut down\");\n+            return;\n+        }\n \n         // LOG4J2-471: prevent deadlock when RingBuffer is full and object\n         // being logged calls Logger.log() from its toString() method\n-        if (info.isAppenderThread && disruptor.getRingBuffer().remainingCapacity() == 0) {\n+        if (info.isAppenderThread && temp.getRingBuffer().remainingCapacity() == 0) {\n             // bypass RingBuffer and invoke Appender directly\n             config.loggerConfig.log(getName(), fqcn, marker, level, message, thrown);\n             return;\n@@ -266,7 +272,15 @@ public void logMessage(final String fqcn, final Level level, final Marker marker\n                 // CachedClock: 10% faster than system clock, smaller gaps\n                 clock.currentTimeMillis());\n \n-        disruptor.publishEvent(info.translator);\n+        // LOG4J2-639: catch NPE if disruptor field was set to null after our check above\n+        try {\n+            // Note: do NOT use the temp variable above!\n+            // That could result in adding a log event to the disruptor after it was shut down,\n+            // which could cause the publishEvent method to hang and never return.\n+            disruptor.publishEvent(info.translator);\n+        } catch (NullPointerException npe) {\n+            LOGGER.fatal(\"Ignoring log event after log4j was shut down.\");\n+        }\n     }\n \n     private static StackTraceElement location(final String fqcnOfLogger) {",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java",
                "sha": "c8329732d3ae84797f68f98d27af2c69acff7f72",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java?ref=a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89",
                "deletions": 2,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java",
                "patch": "@@ -316,16 +316,29 @@ public void run() {\n      *          calling thread needs to process the event itself\n      */\n     public boolean callAppendersFromAnotherThread(final LogEvent event) {\n+        Disruptor<Log4jEventWrapper> temp = disruptor;\n+        if (temp == null) { // LOG4J2-639\n+            LOGGER.fatal(\"Ignoring log event after log4j was shut down\");\n+            return true;\n+        }\n \n         // LOG4J2-471: prevent deadlock when RingBuffer is full and object\n         // being logged calls Logger.log() from its toString() method\n         if (isAppenderThread.get() == Boolean.TRUE //\n-                && disruptor.getRingBuffer().remainingCapacity() == 0) {\n+                && temp.getRingBuffer().remainingCapacity() == 0) {\n \n             // bypass RingBuffer and invoke Appender directly\n             return false;\n         }\n-        disruptor.getRingBuffer().publishEvent(translator, event, asyncLoggerConfig);\n+        // LOG4J2-639: catch NPE if disruptor field was set to null after our check above\n+        try {\n+            // Note: do NOT use the temp variable above!\n+            // That could result in adding a log event to the disruptor after it was shut down,\n+            // which could cause the publishEvent method to hang and never return.\n+            disruptor.getRingBuffer().publishEvent(translator, event, asyncLoggerConfig);\n+        } catch (NullPointerException npe) {\n+            LOGGER.fatal(\"Ignoring log event after log4j was shut down.\");\n+        }\n         return true;\n     }\n ",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java",
                "sha": "2e8814c0656b074a0d54546a947687d18a0eee0f",
                "status": "modified"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigUseAfterShutdownTest.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigUseAfterShutdownTest.java?ref=a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89",
                "deletions": 0,
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigUseAfterShutdownTest.java",
                "patch": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.core.async;\n+\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.LifeCycle;\n+import org.apache.logging.log4j.core.config.ConfigurationFactory;\n+import org.apache.logging.log4j.message.SimpleMessage;\n+import org.apache.logging.log4j.spi.AbstractLoggerProvider;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class AsyncLoggerConfigUseAfterShutdownTest {\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        System.setProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY, \"AsyncLoggerConfigTest.xml\");\n+    }\n+\n+    @Test\n+    public void testNoErrorIfLogAfterShutdown() throws Exception {\n+        final Logger log = LogManager.getLogger(\"com.foo.Bar\");\n+        log.info(\"some message\");\n+        ((LifeCycle) LogManager.getContext()).stop(); // stop async thread\n+\n+        // call the #logMessage() method to bypass the isEnabled check: \n+        // before the LOG4J2-639 fix this would throw a NPE\n+        ((AbstractLoggerProvider) log).logMessage(\"com.foo.Bar\", Level.INFO, null, new SimpleMessage(\"msg\"), null);\n+   }\n+}",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigUseAfterShutdownTest.java",
                "sha": "af0bd78f2bdc21c1c18c5eb7ef2a7f33ca895f1e",
                "status": "added"
            },
            {
                "additions": 62,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerUseAfterShutdownTest.java",
                "changes": 62,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerUseAfterShutdownTest.java?ref=a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89",
                "deletions": 0,
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerUseAfterShutdownTest.java",
                "patch": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.core.async;\n+\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.LifeCycle;\n+import org.apache.logging.log4j.core.config.ConfigurationFactory;\n+import org.apache.logging.log4j.core.util.Constants;\n+import org.apache.logging.log4j.message.SimpleMessage;\n+import org.apache.logging.log4j.spi.AbstractLoggerProvider;\n+import org.apache.logging.log4j.util.Strings;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+/**\n+ * Test for https://issues.apache.org/jira/browse/LOG4J2-639\n+ */\n+public class AsyncLoggerUseAfterShutdownTest {\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        System.setProperty(Constants.LOG4J_CONTEXT_SELECTOR,\n+                AsyncLoggerContextSelector.class.getName());\n+        System.setProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY,\n+                \"AsyncLoggerTest.xml\");\n+    }\n+\n+    @AfterClass\n+    public static void afterClass() {\n+        System.setProperty(Constants.LOG4J_CONTEXT_SELECTOR, Strings.EMPTY);\n+    }\n+\n+    @Test\n+    public void testNoErrorIfLogAfterShutdown() throws Exception {\n+        final Logger log = LogManager.getLogger(\"com.foo.Bar\");\n+        final String msg = \"Async logger msg\";\n+        log.info(msg, new InternalError(\"this is not a real error\"));\n+        ((LifeCycle) LogManager.getContext()).stop(); // stop async thread\n+\n+        // call the #logMessage() method to bypass the isEnabled check: \n+        // before the LOG4J2-639 fix this would throw a NPE\n+        ((AbstractLoggerProvider) log).logMessage(\"com.foo.Bar\", Level.INFO, null, new SimpleMessage(\"msg\"), null);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerUseAfterShutdownTest.java",
                "sha": "8cf09f7f5186b54f07788218736975e24b0434b6",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/test/resources/AsyncLoggerConfigTest.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/resources/AsyncLoggerConfigTest.xml?ref=a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89",
                "deletions": 1,
                "filename": "log4j-core/src/test/resources/AsyncLoggerConfigTest.xml",
                "patch": "@@ -1,5 +1,5 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<Configuration status=\"OFF\">\n+<Configuration status=\"ERROR\">\n   <Appenders>\n     <File name=\"File\" \n           fileName=\"target/AsyncLoggerConfigTest.log\" ",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/test/resources/AsyncLoggerConfigTest.xml",
                "sha": "dace6b7a89564e26233da49601f7ae7b5fb1fff8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/test/resources/AsyncLoggerTest.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/resources/AsyncLoggerTest.xml?ref=a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89",
                "deletions": 1,
                "filename": "log4j-core/src/test/resources/AsyncLoggerTest.xml",
                "patch": "@@ -1,5 +1,5 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<Configuration status=\"OFF\">\n+<Configuration status=\"ERROR\">\n   <Appenders>\n     <RandomAccessFile name=\"RandomAccessFile\" fileName=\"target/AsyncLoggerTest.log\" \n \t    \t\timmediateFlush=\"false\" append=\"false\">",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/test/resources/AsyncLoggerTest.xml",
                "sha": "644dd9343bf27467d3f9597d9b1e1e53f6a4d95b",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/src/changes/changes.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -22,6 +22,9 @@\n   </properties>\n   <body>\n     <release version=\"2.0-rc2\" date=\"2014-MM-DD\" description=\"Bug fixes and enhancements\">\n+      <action issue=\"LOG4J2-639\" dev=\"rpopma\" type=\"fix\" due-to=\"Mck SembWever\">\n+        Prevent NPE in AsyncLogger and AsyncLoggerConfig if logger is used after log4j has been shut down.\n+      </action>\n       <action issue=\"LOG4J2-469\" dev=\"rgoers\" type=\"fix\">\n         FailoverAppender was not resetting its status after the primary appender recovered.\n       </action>",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/src/changes/changes.xml",
                "sha": "8d7ad6523a0769c2eeb0734c76477884c65f69df",
                "status": "modified"
            }
        ],
        "message": "LOG4J2-639: prevent NPE if AsyncLogger/AsyncLoggerConfig is used after log4j was shut down\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1595507 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/5c6a64444487e37d621a25aaff386abfd336c9ac",
        "repo": "logging-log4j2",
        "unit_tests": [
            "AsyncLoggerTest.java"
        ]
    },
    "logging-log4j2_a96b455": {
        "bug_id": "logging-log4j2_a96b455",
        "commit": "https://github.com/apache/logging-log4j2/commit/a96b455c4330dae86c1177ce526d09afa3892144",
        "file": [
            {
                "additions": 53,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a96b455c4330dae86c1177ce526d09afa3892144/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "changes": 63,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java?ref=a96b455c4330dae86c1177ce526d09afa3892144",
                "deletions": 10,
                "filename": "log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "patch": "@@ -17,34 +17,48 @@\n \n package org.apache.logging.log4j.jul;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n import java.util.IdentityHashMap;\n+import java.util.List;\n import java.util.Map;\n \n import org.apache.logging.log4j.Level;\n \n /**\n  * Default implementation of LevelConverter strategy.\n- *\n+ * <p>\n+ * Supports custom JUL levels by mapping them to their closest mapped neighbour. \n+ * </p>\n  * @since 2.1\n  */\n public class DefaultLevelConverter implements LevelConverter {\n \n+    static final class JulLevelComparator implements Comparator<java.util.logging.Level> {\n+        @Override\n+        public int compare(java.util.logging.Level level1, java.util.logging.Level level2) {\n+            return Integer.compare(level1.intValue(), level2.intValue());\n+        }\n+    }\n+\n     private final Map<java.util.logging.Level, Level> julToLog4j = new IdentityHashMap<>(9);\n     private final Map<Level, java.util.logging.Level> log4jToJul = new IdentityHashMap<>(10);\n+    private final List<java.util.logging.Level> sortedJulLevels = new ArrayList<>(9);\n \n     public DefaultLevelConverter() {\n         // Map JUL to Log4j\n-        mapJulToLog4j(java.util.logging.Level.OFF, Level.OFF);\n+        mapJulToLog4j(java.util.logging.Level.ALL, Level.ALL);\n         mapJulToLog4j(java.util.logging.Level.FINEST, LevelTranslator.FINEST);\n         mapJulToLog4j(java.util.logging.Level.FINER, Level.TRACE);\n         mapJulToLog4j(java.util.logging.Level.FINE, Level.DEBUG);\n         mapJulToLog4j(java.util.logging.Level.CONFIG, LevelTranslator.CONFIG);\n         mapJulToLog4j(java.util.logging.Level.INFO, Level.INFO);\n         mapJulToLog4j(java.util.logging.Level.WARNING, Level.WARN);\n         mapJulToLog4j(java.util.logging.Level.SEVERE, Level.ERROR);\n-        mapJulToLog4j(java.util.logging.Level.ALL, Level.ALL);\n+        mapJulToLog4j(java.util.logging.Level.OFF, Level.OFF);\n         // Map Log4j to JUL\n-        mapLog4jToJul(Level.OFF, java.util.logging.Level.OFF);\n+        mapLog4jToJul(Level.ALL, java.util.logging.Level.ALL);\n         mapLog4jToJul(LevelTranslator.FINEST, java.util.logging.Level.FINEST);\n         mapLog4jToJul(Level.TRACE, java.util.logging.Level.FINER);\n         mapLog4jToJul(Level.DEBUG, java.util.logging.Level.FINE);\n@@ -53,18 +67,46 @@ public DefaultLevelConverter() {\n         mapLog4jToJul(Level.WARN, java.util.logging.Level.WARNING);\n         mapLog4jToJul(Level.ERROR, java.util.logging.Level.SEVERE);\n         mapLog4jToJul(Level.FATAL, java.util.logging.Level.SEVERE);\n-        mapLog4jToJul(Level.ALL, java.util.logging.Level.ALL);\n+        mapLog4jToJul(Level.OFF, java.util.logging.Level.OFF);\n+        // Sorted Java levels\n+        sortedJulLevels.addAll(julToLog4j.keySet());\n+        Collections.sort(sortedJulLevels, new JulLevelComparator());\n+\n+    }\n+\n+    private Level addCustomJulLevel(java.util.logging.Level customJavaLevel) {\n+        long prevDist = Long.MAX_VALUE;\n+        java.util.logging.Level prevLevel = null;\n+        for (java.util.logging.Level mappedJavaLevel : sortedJulLevels) {\n+            long distance = distance(customJavaLevel, mappedJavaLevel);\n+            if (distance > prevDist) {\n+                return mapCustomJulLevel(customJavaLevel, prevLevel);\n+            }\n+            prevDist = distance;\n+            prevLevel = mappedJavaLevel;\n+        }\n+        return mapCustomJulLevel(customJavaLevel, prevLevel);\n+    }\n+\n+    private long distance(java.util.logging.Level javaLevel, java.util.logging.Level customJavaLevel) {\n+        return Math.abs((long) customJavaLevel.intValue() - (long) javaLevel.intValue());\n+    }\n+\n+    private Level mapCustomJulLevel(java.util.logging.Level customJavaLevel, java.util.logging.Level stdJavaLevel) {\n+        final Level level = julToLog4j.get(stdJavaLevel);\n+        julToLog4j.put(customJavaLevel, level);\n+        return level;\n     }\n-    \n+\n     /*\n-     * TODO consider making public.\n+     * TODO consider making public for advanced configuration.\n      */\n     private void mapJulToLog4j(java.util.logging.Level julLevel, Level level) {\n         julToLog4j.put(julLevel, level);\n     }\n-    \n+\n     /*\n-     * TODO consider making public.\n+     * TODO consider making public for advanced configuration.\n      */\n     private void mapLog4jToJul(Level level, java.util.logging.Level julLevel) {\n         log4jToJul.put(level, julLevel);\n@@ -77,6 +119,7 @@ private void mapLog4jToJul(Level level, java.util.logging.Level julLevel) {\n \n     @Override\n     public Level toLevel(final java.util.logging.Level javaLevel) {\n-        return julToLog4j.get(javaLevel);\n+        final Level level = julToLog4j.get(javaLevel);\n+        return level != null ? level : addCustomJulLevel(javaLevel);\n     }\n }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a96b455c4330dae86c1177ce526d09afa3892144/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "sha": "c2d8eb321341f885f3bae077f1644e4896219d76",
                "status": "modified"
            },
            {
                "additions": 145,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a96b455c4330dae86c1177ce526d09afa3892144/log4j-jul/src/test/java/org/apache/logging/log4j/jul/DefaultLevelConverterCustomJulLevelsTest.java",
                "changes": 145,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-jul/src/test/java/org/apache/logging/log4j/jul/DefaultLevelConverterCustomJulLevelsTest.java?ref=a96b455c4330dae86c1177ce526d09afa3892144",
                "deletions": 0,
                "filename": "log4j-jul/src/test/java/org/apache/logging/log4j/jul/DefaultLevelConverterCustomJulLevelsTest.java",
                "patch": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.jul;\n+\n+import org.apache.logging.log4j.Level;\n+import org.junit.Assert;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+/**\n+ * Tests {@link DefaultLevelConverter} for custom JUL levels.\n+ * \n+ * @since 2.4\n+ */\n+public class DefaultLevelConverterCustomJulLevelsTest {\n+\n+    static class CustomLevel extends java.util.logging.Level {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        static CustomLevel ALL_P_1 = new CustomLevel(\"ALL_P_1\", java.util.logging.Level.ALL.intValue() + 1);\n+\n+        static CustomLevel FINEST_P_1 = new CustomLevel(\"FINEST_P_1\", java.util.logging.Level.FINEST.intValue() + 1);\n+        static CustomLevel FINEST_M_1 = new CustomLevel(\"FINEST_M_1\", java.util.logging.Level.FINEST.intValue() - 1);\n+\n+        static CustomLevel FINER_P_1 = new CustomLevel(\"FINER_P_1\", java.util.logging.Level.FINER.intValue() + 1);\n+        static CustomLevel FINER_M_1 = new CustomLevel(\"FINER_M_1\", java.util.logging.Level.FINER.intValue() - 1);\n+\n+        static CustomLevel FINE_P_1 = new CustomLevel(\"FINE_P_1\", java.util.logging.Level.FINE.intValue() + 1);\n+        static CustomLevel FINE_M_1 = new CustomLevel(\"FINE_M_1\", java.util.logging.Level.FINE.intValue() - 1);\n+\n+        static CustomLevel CONFIG_P_1 = new CustomLevel(\"CONFIG_P_1\", java.util.logging.Level.CONFIG.intValue() + 1);\n+        static CustomLevel CONFIG_M_1 = new CustomLevel(\"CONFIG_M_1\", java.util.logging.Level.CONFIG.intValue() - 1);\n+\n+        static CustomLevel INFO_P_1 = new CustomLevel(\"INFO_P_1\", java.util.logging.Level.INFO.intValue() + 1);\n+        static CustomLevel INFO_M_1 = new CustomLevel(\"INFO_M_1\", java.util.logging.Level.INFO.intValue() - 1);\n+\n+        static CustomLevel WARNING_P_1 = new CustomLevel(\"WARNING_P_1\", java.util.logging.Level.WARNING.intValue() + 1);\n+        static CustomLevel WARNING_M_1 = new CustomLevel(\"WARNING_M_1\", java.util.logging.Level.WARNING.intValue() - 1);\n+\n+        static CustomLevel SEVERE_P_1 = new CustomLevel(\"SEVERE_P_1\", java.util.logging.Level.SEVERE.intValue() + 1);\n+        static CustomLevel SEVERE_M_1 = new CustomLevel(\"SEVERE_M_1\", java.util.logging.Level.SEVERE.intValue() - 1);\n+\n+        static CustomLevel OFF_M_1 = new CustomLevel(\"OFF_M_1\", java.util.logging.Level.OFF.intValue() - 1);\n+\n+        protected CustomLevel(String name, int value) {\n+            super(name, value);\n+        }\n+    }\n+\n+    private DefaultLevelConverter converter = new DefaultLevelConverter();\n+\n+    @Test\n+    public void testCustomJulLevelNearAll() {\n+        // Sanity check:\n+        Assert.assertEquals(Level.ALL, converter.toLevel(java.util.logging.Level.ALL));\n+        // Test:\n+        Assert.assertEquals(Level.ALL, converter.toLevel(CustomLevel.ALL_P_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearFinest() {\n+        // Sanity check:\n+        Assert.assertEquals(LevelTranslator.FINEST, converter.toLevel(java.util.logging.Level.FINEST));\n+        // Test:\n+        Assert.assertEquals(LevelTranslator.FINEST, converter.toLevel(CustomLevel.FINEST_P_1));\n+        Assert.assertEquals(LevelTranslator.FINEST, converter.toLevel(CustomLevel.FINEST_M_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearFiner() {\n+        // Sanity check:\n+        Assert.assertEquals(Level.TRACE, converter.toLevel(java.util.logging.Level.FINER));\n+        // Test:\n+        Assert.assertEquals(Level.TRACE, converter.toLevel(CustomLevel.FINER_P_1));\n+        Assert.assertEquals(Level.TRACE, converter.toLevel(CustomLevel.FINER_M_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearFine() {\n+        // Sanity check:\n+        Assert.assertEquals(Level.DEBUG, converter.toLevel(java.util.logging.Level.FINE));\n+        // Test:\n+        Assert.assertEquals(Level.DEBUG, converter.toLevel(CustomLevel.FINE_P_1));\n+        Assert.assertEquals(Level.DEBUG, converter.toLevel(CustomLevel.FINE_M_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearConfig() {\n+        // Sanity check:\n+        Assert.assertEquals(LevelTranslator.CONFIG, converter.toLevel(java.util.logging.Level.CONFIG));\n+        // Test:\n+        Assert.assertEquals(LevelTranslator.CONFIG, converter.toLevel(CustomLevel.CONFIG_P_1));\n+        Assert.assertEquals(LevelTranslator.CONFIG, converter.toLevel(CustomLevel.CONFIG_M_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearInfo() {\n+        // Sanity check:\n+        Assert.assertEquals(Level.INFO, converter.toLevel(java.util.logging.Level.INFO));\n+        // Test:\n+        Assert.assertEquals(Level.INFO, converter.toLevel(CustomLevel.INFO_P_1));\n+        Assert.assertEquals(Level.INFO, converter.toLevel(CustomLevel.INFO_M_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearWarning() {\n+        // Sanity check:\n+        Assert.assertEquals(Level.WARN, converter.toLevel(java.util.logging.Level.WARNING));\n+        // Test:\n+        Assert.assertEquals(Level.WARN, converter.toLevel(CustomLevel.WARNING_P_1));\n+        Assert.assertEquals(Level.WARN, converter.toLevel(CustomLevel.WARNING_M_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearSevere() {\n+        // Sanity check:\n+        Assert.assertEquals(Level.ERROR, converter.toLevel(java.util.logging.Level.SEVERE));\n+        // Test:\n+        Assert.assertEquals(Level.ERROR, converter.toLevel(CustomLevel.SEVERE_P_1));\n+        Assert.assertEquals(Level.ERROR, converter.toLevel(CustomLevel.SEVERE_M_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearOff() {\n+        // Sanity check:\n+        Assert.assertEquals(Level.OFF, converter.toLevel(java.util.logging.Level.OFF));\n+        // Test:\n+        Assert.assertEquals(Level.OFF, converter.toLevel(CustomLevel.OFF_M_1));\n+    }\n+}",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a96b455c4330dae86c1177ce526d09afa3892144/log4j-jul/src/test/java/org/apache/logging/log4j/jul/DefaultLevelConverterCustomJulLevelsTest.java",
                "sha": "6b8eef6787bd104ec1d97527ac0889df92e474d3",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a96b455c4330dae86c1177ce526d09afa3892144/src/changes/changes.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=a96b455c4330dae86c1177ce526d09afa3892144",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -33,6 +33,9 @@\n       <action issue=\"LOG4J2-1037\" dev=\"ggregory\" type=\"fix\" due-to=\"Marc Dergacz\">\n         Backward compatibility issue in log4j-1.2-api NDC pop() and peek().\n       </action>\n+      <action issue=\"LOG4J2-1025\" dev=\"ggregory\" type=\"fix\" due-to=\"Mikael St\u00e5ldal\">\n+        Custom java.util.logging.Level gives null Log4j Level and causes NPE.\n+      </action>\n       <action issue=\"LOG4J2-1033\" dev=\"ggregory\" type=\"fix\" due-to=\"Mikael St\u00e5ldal\">\n         SimpleLogger creates unnecessary Map objects by calling ThreadContext.getContext() instead of getImmutableContext().\n       </action>",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a96b455c4330dae86c1177ce526d09afa3892144/src/changes/changes.xml",
                "sha": "3020dabcb83f59fd7394f90914b0e006faa216e6",
                "status": "modified"
            }
        ],
        "message": "[LOG4J2-1025] Custom java.util.logging.Level gives null Log4j Level and\ncauses NPE.",
        "parent": "https://github.com/apache/logging-log4j2/commit/d865e43df0bc9558f01b494b970a82fb60178a95",
        "repo": "logging-log4j2",
        "unit_tests": [
            "DefaultLevelConverterTest.java"
        ]
    },
    "logging-log4j2_ad23fd9": {
        "bug_id": "logging-log4j2_ad23fd9",
        "commit": "https://github.com/apache/logging-log4j2/commit/ad23fd9b7b20d3da32fe24f59c58c59e827f153f",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/ad23fd9b7b20d3da32fe24f59c58c59e827f153f/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java?ref=ad23fd9b7b20d3da32fe24f59c58c59e827f153f",
                "deletions": 12,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java",
                "patch": "@@ -139,24 +139,22 @@ private PatternLayout(final Configuration config, final RegexReplacement replace\n         }\n     }\n \n-    @Override\n-    public byte[] getHeader() {\n-        byte [] myHeader = super.getHeader();\n-        if (myHeader != null) {\n+    private byte[] strSubstitutorReplace(final byte... b) {\n+        if (b != null && config != null) {\n             final Charset cs = getCharset();\n-            return config.getStrSubstitutor().replace(new String(myHeader, cs)).getBytes(cs);\n+            return config.getStrSubstitutor().replace(new String(b, cs)).getBytes(cs);\n         }\n-        return myHeader;\n+        return b;\n+    }\n+\n+    @Override\n+    public byte[] getHeader() {\n+        return strSubstitutorReplace(super.getHeader());\n     }\n \n     @Override\n     public byte[] getFooter() {\n-        byte [] myFooter = super.getFooter();\n-        if (myFooter != null) {\n-            final Charset cs = getCharset();\n-            return config.getStrSubstitutor().replace(new String(myFooter, cs)).getBytes(cs);\n-        }\n-        return myFooter;\n+        return strSubstitutorReplace(super.getFooter());\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/ad23fd9b7b20d3da32fe24f59c58c59e827f153f/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java",
                "sha": "cdd5fe2d81a00ccb158a4b3f1b42c77b5e7687a7",
                "status": "modified"
            }
        ],
        "message": "Prevent NPE where config may be null but header/footer are not.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1597669 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/e40bdc830177273f531e78dbf12637e6c5c7307f",
        "repo": "logging-log4j2",
        "unit_tests": [
            "PatternLayoutTest.java"
        ]
    },
    "logging-log4j2_c9286d7": {
        "bug_id": "logging-log4j2_c9286d7",
        "commit": "https://github.com/apache/logging-log4j2/commit/c9286d7118e4bd371fc5ee513fc869bd8fcf1f51",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/c9286d7118e4bd371fc5ee513fc869bd8fcf1f51/log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedMessage.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedMessage.java?ref=c9286d7118e4bd371fc5ee513fc869bd8fcf1f51",
                "deletions": 1,
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedMessage.java",
                "patch": "@@ -206,7 +206,8 @@ public void formatTo(final StringBuilder buffer) {\n         if (formattedMessage != null) {\n             buffer.append(formattedMessage);\n         } else {\n-            ParameterFormatter.formatMessage(buffer, messagePattern, argArray, argArray.length);\n+            ParameterFormatter.formatMessage(buffer, messagePattern, argArray,\n+                    argArray == null ? 0 : argArray.length);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/c9286d7118e4bd371fc5ee513fc869bd8fcf1f51/log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedMessage.java",
                "sha": "ab6a5bc46ee701fffaeb4b7f83c83233b3553dfa",
                "status": "modified"
            }
        ],
        "message": "fix potential NPE",
        "parent": "https://github.com/apache/logging-log4j2/commit/fbcf07a5b625ea63997ed96819019f45487cfc5a",
        "repo": "logging-log4j2",
        "unit_tests": [
            "ParameterizedMessageTest.java"
        ]
    },
    "logging-log4j2_cd4de56": {
        "bug_id": "logging-log4j2_cd4de56",
        "commit": "https://github.com/apache/logging-log4j2/commit/cd4de56867bf89c3e6273406dcc7a3bb3e3a54e8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/cd4de56867bf89c3e6273406dcc7a3bb3e3a54e8/log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java?ref=cd4de56867bf89c3e6273406dcc7a3bb3e3a54e8",
                "deletions": 1,
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java",
                "patch": "@@ -94,7 +94,7 @@\n                             factories.put(provider.getPriority(), factoryClass.newInstance());\n                         } catch (final Exception e) {\n                             LOGGER.error(\"Unable to create class {} specified in {}\", factoryClass.getName(), provider\n-                                    .getUrl().toString(), e);\n+                                    .getUrl(), e);\n                         }\n                     }\n                 }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/cd4de56867bf89c3e6273406dcc7a3bb3e3a54e8/log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java",
                "sha": "4e645f6f9e934e1791eb70034e13610eff55503a",
                "status": "modified"
            }
        ],
        "message": "Fix NPE: [INFO] Running org.apache.logging.log4j.core.Log4j1222Test\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed:\n0.002 s - in org.apache.logging.log4j.core.Log4j1222Test\nERROR StatusLogger Cannot start ShutdownCallbackRegistry, already\nshutting down.\nException in thread \"Thread-0\" java.lang.ExceptionInInitializerError\n        at\norg.apache.logging.log4j.core.Log4j1222Test$ShutdownHook$Holder.<clinit>(Log4j1222Test.java:42)\n        at\norg.apache.logging.log4j.core.Log4j1222Test$ShutdownHook.trigger(Log4j1222Test.java:53)\n        at\norg.apache.logging.log4j.core.Log4j1222Test$ShutdownHook.run(Log4j1222Test.java:49)\nCaused by: java.lang.NullPointerException\n        at\norg.apache.logging.log4j.LogManager.<clinit>(LogManager.java:97)\n        ... 3 more\n[INFO] Running org.apache.logging.log4j.core.LogEventFactoryTest",
        "parent": "https://github.com/apache/logging-log4j2/commit/b1356fa16e8ae19eba8bcd117212d489f041f5a7",
        "repo": "logging-log4j2",
        "unit_tests": [
            "LogManagerTest.java"
        ]
    },
    "logging-log4j2_cd881ce": {
        "bug_id": "logging-log4j2_cd881ce",
        "commit": "https://github.com/apache/logging-log4j2/commit/cd881cef0f658857a8d5004390cdb1a8bdac4a31",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/cd881cef0f658857a8d5004390cdb1a8bdac4a31/log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java?ref=cd881cef0f658857a8d5004390cdb1a8bdac4a31",
                "deletions": 8,
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java",
                "patch": "@@ -304,7 +304,7 @@ public void debug(final MessageSupplier msgSupplier, final Throwable t) {\n      */\n     protected void enter(final String fqcn, final String format, final Supplier<?>... paramSuppliers) {\n         if (isEnabled(Level.TRACE, ENTRY_MARKER, (Object) null, null)) {\n-            logMessage(fqcn, Level.TRACE, ENTRY_MARKER, entryMsg(format, paramSuppliers.length, paramSuppliers), null);\n+            logMessage(fqcn, Level.TRACE, ENTRY_MARKER, entryMsg(format, paramSuppliers), null);\n         }\n     }\n \n@@ -317,7 +317,7 @@ protected void enter(final String fqcn, final String format, final Supplier<?>..\n      */\n     protected void enter(final String fqcn, final String format, final Object... params) {\n         if (isEnabled(Level.TRACE, ENTRY_MARKER, (Object) null, null)) {\n-            logMessage(fqcn, Level.TRACE, ENTRY_MARKER, entryMsg(format, params.length, params), null);\n+            logMessage(fqcn, Level.TRACE, ENTRY_MARKER, entryMsg(format, params), null);\n         }\n     }\n \n@@ -352,14 +352,15 @@ public void entry(final Object... params) {\n     protected void entry(final String fqcn, final Object... params) {\n         if (isEnabled(Level.TRACE, ENTRY_MARKER, (Object) null, null)) {\n             if (params == null) {\n-                logMessage(fqcn, Level.TRACE, ENTRY_MARKER, entryMsg(null, 0, null), null);\n+                logMessage(fqcn, Level.TRACE, ENTRY_MARKER, entryMsg(null, (Supplier<?>[]) null), null);\n             } else {\n-                logMessage(fqcn, Level.TRACE, ENTRY_MARKER, entryMsg(null, params.length, params), null);\n+                logMessage(fqcn, Level.TRACE, ENTRY_MARKER, entryMsg(null, params), null);\n             }\n         }\n     }\n \n-    protected Message entryMsg(final String format, final int count, final Object... params) {\n+    protected Message entryMsg(final String format, final Object... params) {\n+        final int count = params == null ? 0 : params.length;\n         if (count == 0) {\n             if (Strings.isEmpty(format)) {\n                 return messageFactory.newMessage(\"entry\");\n@@ -372,7 +373,7 @@ protected Message entryMsg(final String format, final int count, final Object...\n             return messageFactory.newMessage(sb.toString(), params);\n         }\n         sb.append(\" params(\");\n-        for (int i = 0; i < params.length; i++) {\n+        for (int i = 0; i < count; i++) {\n             Object parm = params[i];\n             sb.append(parm != null ? parm.toString() : \"null\");\n             if (i + 1 < params.length) {\n@@ -383,12 +384,13 @@ protected Message entryMsg(final String format, final int count, final Object...\n         return messageFactory.newMessage(sb.toString());\n     }\n \n-    protected Message entryMsg(final String format, final int count, final Supplier<?>... paramSuppliers) {\n+    protected Message entryMsg(final String format, final Supplier<?>... paramSuppliers) {\n+        final int count = paramSuppliers == null ? 0 : paramSuppliers.length;\n         Object[] params = new Object[count];\n         for (int i = 0; i < count; i++) {\n             params[i] = paramSuppliers[i].get();\n         }\n-        return entryMsg(format, count, params);\n+        return entryMsg(format, params);\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/cd881cef0f658857a8d5004390cdb1a8bdac4a31/log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java",
                "sha": "df7a4b98d3c121f2971068a7dfe4dd618af83c41",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/cd881cef0f658857a8d5004390cdb1a8bdac4a31/log4j-api/src/test/java/org/apache/logging/log4j/LoggerTest.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/test/java/org/apache/logging/log4j/LoggerTest.java?ref=cd881cef0f658857a8d5004390cdb1a8bdac4a31",
                "deletions": 2,
                "filename": "log4j-api/src/test/java/org/apache/logging/log4j/LoggerTest.java",
                "patch": "@@ -55,8 +55,8 @@ public void basicFlow() {\n         logger.entry();\r\n         logger.exit();\r\n         assertEquals(2, results.size());\r\n-        assertThat(\"Incorrect Entry\", results.get(0), startsWith(\"ENTRY[ FLOW ] TRACE entry\"));\r\n-        assertThat(\"incorrect Exit\", results.get(1), startsWith(\"EXIT[ FLOW ] TRACE exit\"));\r\n+        assertThat(\"Incorrect Entry\", results.get(0), equalTo(\"ENTRY[ FLOW ] TRACE entry\"));\r\n+        assertThat(\"incorrect Exit\", results.get(1), equalTo(\"EXIT[ FLOW ] TRACE exit\"));\r\n \r\n     }\r\n \r\n@@ -92,6 +92,15 @@ public void flowTracingStringObjectArray() {\n         assertThat(\"Missing exit data\", results.get(1), containsString(\"doFoo(a=1, b=2): 3\"));\r\n     }\r\n \r\n+    @Test\r\n+    public void flowTracing() {\r\n+        logger.traceEntry();\r\n+        logger.traceExit();\r\n+        assertEquals(2, results.size());\r\n+        assertThat(\"Incorrect Entry\", results.get(0), startsWith(\"ENTRY[ FLOW ] TRACE entry\"));\r\n+        assertThat(\"Incorrect Exit\", results.get(1), startsWith(\"EXIT[ FLOW ] TRACE exit\"));\r\n+    }\r\n+\r\n     @Test\r\n     public void catching() {\r\n         try {\r",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/cd881cef0f658857a8d5004390cdb1a8bdac4a31/log4j-api/src/test/java/org/apache/logging/log4j/LoggerTest.java",
                "sha": "8e4d9154b4f77ad212bd69a7cdf70875dbc59e10",
                "status": "modified"
            }
        ],
        "message": "[LOG4J2-1255] Logger.entry and Logger.exit should support Messages. Fix\nNPEs.",
        "parent": "https://github.com/apache/logging-log4j2/commit/85661de7d6526b1aa234f45ab56eb092e4cbda39",
        "repo": "logging-log4j2",
        "unit_tests": [
            "AbstractLoggerTest.java"
        ]
    },
    "logging-log4j2_e08664e": {
        "bug_id": "logging-log4j2_e08664e",
        "commit": "https://github.com/apache/logging-log4j2/commit/e08664e77c5332fd1249ab8a5b4b297689138668",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/e08664e77c5332fd1249ab8a5b4b297689138668/log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java?ref=e08664e77c5332fd1249ab8a5b4b297689138668",
                "deletions": 1,
                "filename": "log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java",
                "patch": "@@ -29,6 +29,7 @@\n import org.apache.logging.log4j.core.config.plugins.PluginElement;\n import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n import org.apache.logging.log4j.core.layout.Rfc5424Layout;\n+import org.apache.logging.log4j.core.net.Facility;\n import org.apache.logging.log4j.core.util.Booleans;\n import org.apache.logging.log4j.core.util.Integers;\n \n@@ -220,7 +221,7 @@ public static FlumeAppender createAppender(@PluginElement(\"Agents\") Agent[] agen\n \n         if (layout == null) {\n             final int enterpriseNumber = Integer.parseInt(Rfc5424Layout.DEFAULT_ENTERPRISE_NUMBER);\n-            layout = Rfc5424Layout.createLayout(null, null, enterpriseNumber, true, Rfc5424Layout.DEFAULT_MDCID,\n+            layout = Rfc5424Layout.createLayout(Facility.LOCAL0, null, enterpriseNumber, true, Rfc5424Layout.DEFAULT_MDCID,\n                     mdcPrefix, eventPrefix, false, null, null, null, excludes, includes, required, null, false, null,\n                     null);\n         }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/e08664e77c5332fd1249ab8a5b4b297689138668/log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java",
                "sha": "d7fd784b7c2704a38f734eed987d159547ed38ed",
                "status": "modified"
            }
        ],
        "message": "Specify default Facility level in FlumeAppender.\n\n  - Due to my recent changes involving how plugins are constructed, \n  this value had to be manually specified. Without the value, it \n  would cause an NPE later on.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1597481 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/4d6bf6e3be504f2b8341b991f9484e29594ac2ac",
        "repo": "logging-log4j2",
        "unit_tests": [
            "FlumeAppenderTest.java"
        ]
    },
    "logging-log4j2_e6781f5": {
        "bug_id": "logging-log4j2_e6781f5",
        "commit": "https://github.com/apache/logging-log4j2/commit/e6781f5e5789fed20fc4b0cbc3edb6c30dc012c5",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/e6781f5e5789fed20fc4b0cbc3edb6c30dc012c5/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java?ref=e6781f5e5789fed20fc4b0cbc3edb6c30dc012c5",
                "deletions": 1,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java",
                "patch": "@@ -741,7 +741,7 @@ public String toString() {\n         final String n = loggerName.isEmpty() ? LoggerConfig.ROOT : loggerName;\n         sb.append(\"Logger=\").append(n);\n         sb.append(\" Level=\").append(level.name());\n-        sb.append(\" Message=\").append(message.getFormattedMessage());\n+        sb.append(\" Message=\").append(message == null ? null : message.getFormattedMessage());\n         return sb.toString();\n     }\n ",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/e6781f5e5789fed20fc4b0cbc3edb6c30dc012c5/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java",
                "sha": "475997637f4ffdd7cdf5fe5bb15c18d6385274f2",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/e6781f5e5789fed20fc4b0cbc3edb6c30dc012c5/src/changes/changes.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=e6781f5e5789fed20fc4b0cbc3edb6c30dc012c5",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -180,6 +180,9 @@\n       <action issue=\"LOG4J2-1610\" dev=\"ggregory\" type=\"fix\" due-to=\"Shubhankar\">\n         Add targetNamespace to log4j-config.xsd. GitHub #43.\n       </action>\n+      <action issue=\"LOG4J2-1619\" dev=\"ggregory\" type=\"fix\">\n+        new Log4jLogEvent().toString() throws an NPE.\n+      </action>\n       <action issue=\"LOG4J2-1578\" dev=\"ggregory\" type=\"add\">\n         RoutingAppender can be configured with scripts. Add Script in a Routes element.\n       </action>",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/e6781f5e5789fed20fc4b0cbc3edb6c30dc012c5/src/changes/changes.xml",
                "sha": "6c5d2cd29767e31f50774f188a0343e12fc8cddf",
                "status": "modified"
            }
        ],
        "message": "[LOG4J2-1619] new Log4jLogEvent().toString() throws an NPE.",
        "parent": "https://github.com/apache/logging-log4j2/commit/10a34436f4c455d08078e0e52392f92eb90c0b9b",
        "repo": "logging-log4j2",
        "unit_tests": [
            "Log4jLogEventTest.java"
        ]
    },
    "logging-log4j2_eb04615": {
        "bug_id": "logging-log4j2_eb04615",
        "commit": "https://github.com/apache/logging-log4j2/commit/eb046150bf6d0b87a195f7808aebca3627222be6",
        "file": [
            {
                "additions": 79,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/LogManager.java",
                "changes": 124,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/main/java/org/apache/logging/log4j/LogManager.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "deletions": 45,
                "filename": "api/src/main/java/org/apache/logging/log4j/LogManager.java",
                "patch": "@@ -16,16 +16,19 @@\n  */\n package org.apache.logging.log4j;\n \n+import org.apache.logging.log4j.simple.SimpleLoggerContextFactory;\n import org.apache.logging.log4j.status.StatusLogger;\n import org.apache.logging.log4j.spi.LoggerContext;\n import org.apache.logging.log4j.spi.LoggerContextFactory;\n+import org.apache.logging.log4j.util.PropsUtil;\n \n import java.io.IOException;\n import java.net.URL;\n-import java.util.ArrayList;\n import java.util.Enumeration;\n-import java.util.List;\n+import java.util.Map;\n import java.util.Properties;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n \n /**\n  * The anchor point for the logging system.\n@@ -39,10 +42,13 @@\n     private static final String LOGGER_RESOURCE = \"META-INF/log4j-provider.xml\";\n     private static final String LOGGER_CONTEXT_FACTORY = \"LoggerContextFactory\";\n     private static final String API_VERSION = \"Log4jAPIVersion\";\n+    private static final String FACTORY_PRIORITY = \"FactoryPriority\";\n     private static final String[] COMPATIBLE_API_VERSIONS = {\n-        \"1.99.0\"\n+        \"2.0.0\"\n     };\n \n+    private static final String FACTORY_PROPERTY_NAME = \"log4j2.loggerContextFactory\";\n+\n     private static LoggerContextFactory factory;\n \n     private static final Logger logger = StatusLogger.getLogger();\n@@ -58,54 +64,85 @@ protected LogManager() {\n      * be used but this could be extended to allow multiple implementations to be used.\n      */\n     static {\n+        PropsUtil managerProps = new PropsUtil(\"log4j2.LogManager.properties\");\n+        String factoryClass = managerProps.getStringProperty(FACTORY_PROPERTY_NAME);\n         ClassLoader cl = findClassLoader();\n-        List<LoggerContextFactory> factories = new ArrayList<LoggerContextFactory>();\n-\n-        Enumeration<URL> enumResources = null;\n-        try {\n-            enumResources = cl.getResources(LOGGER_RESOURCE);\n-        } catch (IOException e) {\n-            logger.fatal(\"Unable to locate \" + LOGGER_RESOURCE, e);\n+        if (factoryClass != null) {\n+            try {\n+                Class<?> clazz = cl.loadClass(factoryClass);\n+                if (LoggerContextFactory.class.isAssignableFrom(clazz)) {\n+                    factory = (LoggerContextFactory) clazz.newInstance();\n+                }\n+            } catch (ClassNotFoundException cnfe) {\n+                logger.error(\"Unable to locate configured LoggerContextFactory {}\", factoryClass);\n+            } catch (Exception ex) {\n+                logger.error(\"Unable to create configured LoggerContextFactory {}\", factoryClass, ex);\n+            }\n         }\n \n-        if (enumResources != null) {\n-            while (enumResources.hasMoreElements()) {\n-                Properties props = new Properties();\n-                URL url = enumResources.nextElement();\n-                try {\n-                    props.loadFromXML(url.openStream());\n-                } catch (IOException ioe) {\n-                    logger.error(\"Unable to read \" + url.toString(), ioe);\n-                }\n-                if (!validVersion(props.getProperty(API_VERSION))) {\n-                    continue;\n-                }\n-                String className = props.getProperty(LOGGER_CONTEXT_FACTORY);\n-                if (className != null) {\n+        if (factory == null) {\n+            SortedMap<Integer, LoggerContextFactory> factories = new TreeMap<Integer, LoggerContextFactory>();\n+\n+            Enumeration<URL> enumResources = null;\n+            try {\n+                enumResources = cl.getResources(LOGGER_RESOURCE);\n+            } catch (IOException e) {\n+                logger.fatal(\"Unable to locate \" + LOGGER_RESOURCE, e);\n+            }\n+\n+            if (enumResources != null) {\n+                while (enumResources.hasMoreElements()) {\n+                    Properties props = new Properties();\n+                    URL url = enumResources.nextElement();\n                     try {\n-                        Class<?> clazz = cl.loadClass(className);\n-                        if (LoggerContextFactory.class.isAssignableFrom(clazz)) {\n-                            factories.add((LoggerContextFactory) clazz.newInstance());\n-                        } else {\n-                            logger.error(className + \" does not implement \" + LoggerContextFactory.class.getName());\n+                        props.loadFromXML(url.openStream());\n+                    } catch (IOException ioe) {\n+                        logger.error(\"Unable to read \" + url.toString(), ioe);\n+                    }\n+                    if (!validVersion(props.getProperty(API_VERSION))) {\n+                        continue;\n+                    }\n+                    String weight = props.getProperty(FACTORY_PRIORITY);\n+                    Integer priority = weight == null ? -1 : Integer.valueOf(weight);\n+                    String className = props.getProperty(LOGGER_CONTEXT_FACTORY);\n+                    if (className != null) {\n+                        try {\n+                            Class<?> clazz = cl.loadClass(className);\n+                            if (LoggerContextFactory.class.isAssignableFrom(clazz)) {\n+                                factories.put(priority, (LoggerContextFactory) clazz.newInstance());\n+                            } else {\n+                                logger.error(className + \" does not implement \" + LoggerContextFactory.class.getName());\n+                            }\n+                        } catch (ClassNotFoundException cnfe) {\n+                            logger.error(\"Unable to locate class \" + className + \" specified in \" + url.toString(),\n+                                cnfe);\n+                        } catch (IllegalAccessException iae) {\n+                            logger.error(\"Unable to create class \" + className + \" specified in \" + url.toString(),\n+                                iae);\n+                        } catch (Exception e) {\n+                            logger.error(\"Unable to create class \" + className + \" specified in \" + url.toString(), e);\n+                            e.printStackTrace();\n                         }\n-                    } catch (ClassNotFoundException cnfe) {\n-                        logger.error(\"Unable to locate class \" + className + \" specified in \" + url.toString(), cnfe);\n-                    } catch (IllegalAccessException iae) {\n-                        logger.error(\"Unable to create class \" + className + \" specified in \" + url.toString(), iae);\n-                    } catch (Exception e) {\n-                        logger.error(\"Unable to create class \" + className + \" specified in \" + url.toString(), e);\n-                        e.printStackTrace();\n                     }\n                 }\n-            }\n-            if (factories.size() != 1) {\n-                logger.fatal(\"Unable to locate a logging implementation\");\n+                if (factories.size() == 0) {\n+                    logger.error(\"Unable to locate a logging implementation, using SimpleLogger\");\n+                    factory = new SimpleLoggerContextFactory();\n+                } else {\n+                    StringBuilder sb = new StringBuilder(\"Multiple logging implementations found: \\n\");\n+                    for (Map.Entry<Integer, LoggerContextFactory> entry : factories.entrySet()) {\n+                        sb.append(\"Factory: \").append(entry.getValue().getClass().getName());\n+                        sb.append(\", Weighting: \").append(entry.getKey()).append(\"\\n\");\n+                    }\n+                    factory = factories.get(factories.lastKey());\n+                    sb.append(\"Using factory: \").append(factory.getClass().getName());\n+                    logger.warn(sb.toString());\n+\n+                }\n             } else {\n-                factory = factories.get(0);\n+                logger.error(\"Unable to locate a logging implementation, using SimpleLogger\");\n+                factory = new SimpleLoggerContextFactory();\n             }\n-        } else {\n-            logger.fatal(\"Unable to locate a logging implementation\");\n         }\n     }\n \n@@ -237,9 +274,6 @@ public ClassLoader run() {\n                     }\n                 }\n             );\n-        }\n-        if (cl != null && cl.getParent() != null) {\n-\n         }\n         if (cl == null) {\n             cl = LogManager.class.getClassLoader();",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/LogManager.java",
                "sha": "8f050ee440f9944abf106c08ec2423945ed49530",
                "status": "modified"
            },
            {
                "additions": 168,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/simple/SimpleLogger.java",
                "changes": 168,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/main/java/org/apache/logging/log4j/simple/SimpleLogger.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "deletions": 0,
                "filename": "api/src/main/java/org/apache/logging/log4j/simple/SimpleLogger.java",
                "patch": "@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.simple;\n+\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.Marker;\n+import org.apache.logging.log4j.ThreadContext;\n+import org.apache.logging.log4j.message.Message;\n+import org.apache.logging.log4j.spi.AbstractLogger;\n+import org.apache.logging.log4j.util.PropsUtil;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Map;\n+\n+/**\n+ *  This is the default logger that is used when no suitable logging implementation is available.\n+ *\n+ */\n+public class SimpleLogger extends AbstractLogger {\n+\n+    /**\n+     * Used to format times.\n+     * <p>\n+     * Note that DateFormat is not Thread-safe.\n+     */\n+    private DateFormat dateFormatter = null;\n+\n+    private Level level;\n+\n+    private boolean showDateTime;\n+\n+    private boolean showContextMap;\n+\n+    private PrintStream stream;\n+\n+    private String logName;\n+\n+\n+    public SimpleLogger(String name, Level defaultLevel, boolean showLogName, boolean showShortLogName,\n+                        boolean showDateTime, boolean showContextMap, String dateTimeFormat,\n+                        PropsUtil props, PrintStream stream) {\n+        super(name);\n+        String lvl = props.getStringProperty(SimpleLoggerContext.SYSTEM_PREFIX + name + \".level\");\n+        this.level = Level.toLevel(lvl, defaultLevel);\n+        if (showShortLogName) {\n+            int index = name.lastIndexOf(\".\");\n+            if (index > 0 && index < name.length()) {\n+                this.logName = name.substring(index + 1);\n+            } else {\n+                this.logName = name;\n+            }\n+        } else if (showLogName) {\n+            this.logName = name;\n+        }\n+        this.showDateTime = showDateTime;\n+        this.showContextMap = showContextMap;\n+        this.stream = stream;\n+\n+        if (showDateTime) {\n+            try {\n+                this.dateFormatter = new SimpleDateFormat(dateTimeFormat);\n+            } catch(IllegalArgumentException e) {\n+                // If the format pattern is invalid - use the default format\n+                this.dateFormatter = new SimpleDateFormat(SimpleLoggerContext.DEFAULT_DATE_TIME_FORMAT);\n+            }\n+        }\n+    }\n+\n+    public void setStream(PrintStream stream) {\n+        this.stream = stream;\n+    }\n+\n+    public void setLevel(Level level) {\n+        if (level != null) {\n+            this.level = level;\n+        }\n+    }\n+\n+    @Override\n+    public void log(Marker marker, String fqcn, Level level, Message msg, Throwable throwable) {\n+        StringBuilder sb = new StringBuilder();\n+        // Append date-time if so configured\n+        if(showDateTime) {\n+            Date now = new Date();\n+            String dateText;\n+            synchronized(dateFormatter) {\n+                dateText = dateFormatter.format(now);\n+            }\n+            sb.append(dateText);\n+            sb.append(\" \");\n+        }\n+\n+        sb.append(level.toString());\n+        sb.append(\" \");\n+        if (logName != null && logName.length() > 0) {\n+            sb.append(logName);\n+            sb.append(\" \");\n+        }\n+        sb.append(msg.getFormattedMessage());\n+        if (showContextMap) {\n+            Map<String, String> mdc = ThreadContext.getContext();\n+            if (mdc.size() > 0) {\n+                sb.append(\" \");\n+                sb.append(mdc.toString());\n+                sb.append(\" \");\n+            }\n+        }\n+        Object[] params = msg.getParameters();\n+        Throwable t;\n+        if (throwable == null && params != null && params[params.length -1] instanceof Throwable ) {\n+            t = (Throwable) params[params.length - 1];\n+        } else {\n+            t = throwable;\n+        }\n+        if (t != null) {\n+            sb.append(\" \");\n+            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+            t.printStackTrace(new PrintStream(baos));\n+            sb.append(baos.toString());\n+        }\n+        stream.println(sb.toString());\n+    }\n+\n+    @Override\n+    protected boolean isEnabled(Level level, Marker marker, String msg) {\n+        return this.level.intLevel() >= level.intLevel();\n+    }\n+\n+\n+    @Override\n+    protected boolean isEnabled(Level level, Marker marker, String msg, Throwable t) {\n+        return this.level.intLevel() >= level.intLevel();\n+    }\n+\n+    @Override\n+    protected boolean isEnabled(Level level, Marker marker, String msg, Object... p1) {\n+        return this.level.intLevel() >= level.intLevel();\n+    }\n+\n+    @Override\n+    protected boolean isEnabled(Level level, Marker marker, Object msg, Throwable t) {\n+        return this.level.intLevel() >= level.intLevel();\n+    }\n+\n+    @Override\n+    protected boolean isEnabled(Level level, Marker marker, Message msg, Throwable t) {\n+        return this.level.intLevel() >= level.intLevel();\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/simple/SimpleLogger.java",
                "sha": "807f92c1c6afbb211bf0b665554d369aa0b1164c",
                "status": "added"
            },
            {
                "additions": 115,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java",
                "changes": 115,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "deletions": 0,
                "filename": "api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java",
                "patch": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.simple;\n+\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.spi.LoggerContext;\n+import org.apache.logging.log4j.util.PropsUtil;\n+\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.PrintStream;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+/**\n+ *\n+ */\n+public class SimpleLoggerContext implements LoggerContext {\n+\n+    /** The default format to use when formating dates */\n+    protected static final String DEFAULT_DATE_TIME_FORMAT = \"yyyy/MM/dd HH:mm:ss:SSS zzz\";\n+\n+    /** All system properties used by <code>SimpleLog</code> start with this */\n+    protected static final String SYSTEM_PREFIX = \"org.apache.logging.log4j.simplelog.\";\n+\n+    /** Properties loaded from simplelog.properties */\n+    private Properties simpleLogProps = new Properties();\n+\n+    private PropsUtil props;\n+\n+    /** Include the instance name in the log message? */\n+    private final boolean showLogName;\n+    /** Include the short name ( last component ) of the logger in the log\n+     *  message. Defaults to true - otherwise we'll be lost in a flood of\n+     *  messages without knowing who sends them.\n+     */\n+    private final boolean showShortName;\n+    /** Include the current time in the log message */\n+    private final boolean showDateTime;\n+    /** Include the ThreadContextMap in the log message */\n+    private final boolean showContextMap;\n+    /** The date and time format to use in the log message */\n+    private final String dateTimeFormat;\n+\n+    private final Level defaultLevel;\n+\n+    private final PrintStream stream;\n+\n+    public SimpleLoggerContext() {\n+        props = new PropsUtil(\"log4j2.simplelog.properties\");\n+\n+        showContextMap = props.getBooleanProperty(SYSTEM_PREFIX + \"showContextMap\", false);\n+        showLogName = props.getBooleanProperty(SYSTEM_PREFIX + \"showlogname\", false);\n+        showShortName = props.getBooleanProperty(SYSTEM_PREFIX + \"showShortLogname\", true);\n+        showDateTime = props.getBooleanProperty(SYSTEM_PREFIX + \"showdatetime\", false);\n+        String lvl = props.getStringProperty(SYSTEM_PREFIX + \"level\");\n+        defaultLevel = Level.toLevel(lvl, Level.ERROR);\n+\n+        dateTimeFormat = showDateTime ? props.getStringProperty(SimpleLoggerContext.SYSTEM_PREFIX + \"dateTimeFormat\",\n+            DEFAULT_DATE_TIME_FORMAT) : null;\n+\n+        String fileName = props.getStringProperty(SYSTEM_PREFIX + \"logFile\", \"system.err\");\n+        PrintStream ps;\n+        if (\"system.err\".equalsIgnoreCase(fileName)) {\n+            ps = System.err;\n+        } else if (\"system.out\".equalsIgnoreCase(fileName)) {\n+            ps = System.out;\n+        } else {\n+            try {\n+                FileOutputStream os = new FileOutputStream(fileName);\n+                ps = new PrintStream(os);\n+            } catch (FileNotFoundException fnfe) {\n+                ps = System.err;\n+            }\n+        }\n+        this.stream = ps;\n+    }\n+\n+    private ConcurrentMap<String, Logger> loggers = new ConcurrentHashMap<String, Logger>();\n+\n+    public Logger getLogger(String name) {\n+        if (loggers.containsKey(name)) {\n+            return loggers.get(name);\n+        }\n+\n+        loggers.putIfAbsent(name, new SimpleLogger(name, defaultLevel, showLogName, showShortName, showDateTime,\n+            showContextMap, dateTimeFormat, props, stream));\n+        return loggers.get(name);\n+    }\n+\n+    public boolean hasLogger(String name) {\n+        return false;\n+    }\n+\n+    public Object getExternalContext() {\n+        return null;\n+    }\n+}",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java",
                "sha": "5db90c3804bad52922f9b660eac739e82a4019e5",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContextFactory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContextFactory.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "deletions": 1,
                "filename": "api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContextFactory.java",
                "patch": "@@ -14,7 +14,7 @@\n  * See the license for the specific language governing permissions and\n  * limitations under the license.\n  */\n-package org.apache.logging.log4j;\n+package org.apache.logging.log4j.simple;\n \n import org.apache.logging.log4j.spi.LoggerContext;\n import org.apache.logging.log4j.spi.LoggerContextFactory;",
                "previous_filename": "api/src/test/java/org/apache/logging/log4j/SimpleLoggerContextFactory.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContextFactory.java",
                "sha": "43bc54f0cc68fe7a95fbbe8f887acb998a714a6f",
                "status": "renamed"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "deletions": 5,
                "filename": "api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java",
                "patch": "@@ -16,11 +16,13 @@\n  */\n package org.apache.logging.log4j.status;\n \n+import org.apache.logging.log4j.simple.SimpleLogger;\n+import org.apache.logging.log4j.simple.SimpleLoggerContextFactory;\n import org.apache.logging.log4j.spi.AbstractLogger;\n import org.apache.logging.log4j.Level;\n-import org.apache.logging.log4j.Logger;\n import org.apache.logging.log4j.Marker;\n import org.apache.logging.log4j.message.Message;\n+import org.apache.logging.log4j.util.PropsUtil;\n \n import java.util.ArrayList;\n import java.util.Iterator;\n@@ -50,7 +52,7 @@\n \n     private static final StatusLogger statusLogger = new StatusLogger();\n \n-    private Logger logger;\n+    private final SimpleLogger logger;\n \n     private final CopyOnWriteArrayList<StatusListener> listeners = new CopyOnWriteArrayList<StatusListener>();\n     private final ReentrantReadWriteLock listenersLock = new ReentrantReadWriteLock();\n@@ -59,6 +61,8 @@\n     private final ReentrantLock msgLock = new ReentrantLock();\n \n     private StatusLogger() {\n+        PropsUtil props = new PropsUtil(\"log4j2.StatusLogger.properties\");\n+        this.logger = new SimpleLogger(\"StatusLogger\", Level.ERROR, false, true, false, false, \"\", props, System.err);\n     }\n \n     /**\n@@ -69,6 +73,10 @@ public static StatusLogger getLogger() {\n         return statusLogger;\n     }\n \n+    public void setLevel(Level level) {\n+        logger.setLevel(level);\n+    }\n+\n     /**\n      * Register a new listener.\n      * @param listener The StatusListener to register.\n@@ -158,8 +166,12 @@ public void log(Marker marker, String fqcn, Level level, Message msg, Throwable\n         } finally {\n             msgLock.unlock();\n         }\n-        for (StatusListener listener : listeners) {\n-            listener.log(data);\n+        if (listeners.size() > 0) {\n+            for (StatusListener listener : listeners) {\n+                listener.log(data);\n+            }\n+        } else {\n+            logger.log(marker, fqcn, level, msg, t);\n         }\n     }\n \n@@ -208,7 +220,7 @@ protected boolean isEnabled(Level level, Marker marker, Message data, Throwable\n     }\n \n     protected boolean isEnabled(Level level, Marker marker) {\n-        if (logger == null) {\n+        if (listeners.size() > 0) {\n             return true;\n         }\n         switch (level) {",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java",
                "sha": "66e5c76127b4d35d63b01ae28d84d942e0404b81",
                "status": "modified"
            },
            {
                "additions": 86,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/util/PropsUtil.java",
                "changes": 86,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/main/java/org/apache/logging/log4j/util/PropsUtil.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "deletions": 0,
                "filename": "api/src/main/java/org/apache/logging/log4j/util/PropsUtil.java",
                "patch": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.util;\n+\n+import java.io.InputStream;\n+import java.util.Properties;\n+\n+/**\n+ * Utility class to help with accessing System Properties.\n+ */\n+public class PropsUtil {\n+\n+    private Properties props;\n+\n+    public PropsUtil(Properties props) {\n+        this.props = props;\n+    }\n+\n+    public PropsUtil(String propsLocn) {\n+        this.props = new Properties();\n+        ClassLoader loader = findClassLoader();\n+        InputStream in = loader.getResourceAsStream(propsLocn);\n+        if (null != in) {\n+            try {\n+                this.props.load(in);\n+                in.close();\n+            } catch(java.io.IOException e) {\n+                // ignored\n+            }\n+        }\n+    }\n+\n+    public String getStringProperty(String name) {\n+        String prop = null;\n+        try {\n+            prop = System.getProperty(name);\n+        } catch (SecurityException e) {\n+            // Ignore\n+        }\n+        return (prop == null) ? props.getProperty(name) : prop;\n+    }\n+\n+    public String getStringProperty(String name, String defaultValue) {\n+        String prop = getStringProperty(name);\n+        return (prop == null) ? defaultValue : prop;\n+    }\n+\n+    public boolean getBooleanProperty(String name, boolean defaultValue) {\n+        String prop = getStringProperty(name);\n+        return (prop == null) ? defaultValue : \"true\".equalsIgnoreCase(prop);\n+    }\n+\n+    private static ClassLoader findClassLoader() {\n+        ClassLoader cl;\n+        if (System.getSecurityManager() == null) {\n+            cl = Thread.currentThread().getContextClassLoader();\n+        } else {\n+            cl = java.security.AccessController.doPrivileged(\n+                new java.security.PrivilegedAction<ClassLoader>() {\n+                    public ClassLoader run() {\n+                        return Thread.currentThread().getContextClassLoader();\n+                    }\n+                }\n+            );\n+        }\n+        if (cl == null) {\n+            cl = PropsUtil.class.getClassLoader();\n+        }\n+\n+        return cl;\n+    }\n+}",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/util/PropsUtil.java",
                "sha": "25c80ff01e43475442a8154ae6252105d4e9da53",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/EventLoggerTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/test/java/org/apache/logging/log4j/EventLoggerTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "deletions": 1,
                "filename": "api/src/test/java/org/apache/logging/log4j/EventLoggerTest.java",
                "patch": "@@ -31,7 +31,7 @@\n  */\n public class EventLoggerTest {\n \n-    SimpleLogger logger = (SimpleLogger) LogManager.getLogger(\"EventLogger\");\n+    TestLogger logger = (TestLogger) LogManager.getLogger(\"EventLogger\");\n     List<String> results = logger.getEntries();\n \n     @Before",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/EventLoggerTest.java",
                "sha": "2f8310b1f90bc7660e0f6197548e9cabbad56c23",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/LoggerTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/test/java/org/apache/logging/log4j/LoggerTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "deletions": 1,
                "filename": "api/src/test/java/org/apache/logging/log4j/LoggerTest.java",
                "patch": "@@ -34,7 +34,7 @@\n  */\n public class LoggerTest {\n \n-    SimpleLogger logger = (SimpleLogger) LogManager.getLogger(\"LoggerTest\");\n+    TestLogger logger = (TestLogger) LogManager.getLogger(\"LoggerTest\");\n     List<String> results = logger.getEntries();\n \n     @Before",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/LoggerTest.java",
                "sha": "37b46558cad437f983eab773e3dd99dca3839810",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/TestLogger.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/test/java/org/apache/logging/log4j/TestLogger.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "deletions": 1,
                "filename": "api/src/test/java/org/apache/logging/log4j/TestLogger.java",
                "patch": "@@ -28,7 +28,7 @@\n /**\n  *\n  */\n-public class SimpleLogger extends AbstractLogger {\n+public class TestLogger extends AbstractLogger {\n     private List<String> array = new ArrayList<String>();\n \n     public List<String> getEntries() {",
                "previous_filename": "api/src/test/java/org/apache/logging/log4j/SimpleLogger.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/TestLogger.java",
                "sha": "41c93420adcf9e069361881f293bc3a44b812bdf",
                "status": "renamed"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/TestLoggerContext.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/test/java/org/apache/logging/log4j/TestLoggerContext.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "deletions": 2,
                "filename": "api/src/test/java/org/apache/logging/log4j/TestLoggerContext.java",
                "patch": "@@ -21,8 +21,8 @@\n /**\n  *\n  */\n-public class SimpleLoggerContext implements LoggerContext {\n-    private Logger logger = new SimpleLogger();\n+public class TestLoggerContext implements LoggerContext {\n+    private Logger logger = new TestLogger();\n \n     public Logger getLogger(String name) {\n         return logger;",
                "previous_filename": "api/src/test/java/org/apache/logging/log4j/SimpleLoggerContext.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/TestLoggerContext.java",
                "sha": "226502f93794bde28a64443d2c4741752d6346ee",
                "status": "renamed"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/TestLoggerContextFactory.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/test/java/org/apache/logging/log4j/TestLoggerContextFactory.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "deletions": 0,
                "filename": "api/src/test/java/org/apache/logging/log4j/TestLoggerContextFactory.java",
                "patch": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j;\n+\n+import org.apache.logging.log4j.spi.LoggerContext;\n+import org.apache.logging.log4j.spi.LoggerContextFactory;\n+\n+/**\n+ *\n+ */\n+public class TestLoggerContextFactory implements LoggerContextFactory {\n+\n+    private static LoggerContext ctx = new TestLoggerContext();\n+\n+    public LoggerContext getContext(String FQCN, ClassLoader loader, boolean currentContext) {\n+        return ctx;\n+    }\n+}",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/TestLoggerContextFactory.java",
                "sha": "1c589e163e5de5cfaeeacc26ec9be4de00b6bbbd",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/resources/META-INF/log4j-provider.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/test/resources/META-INF/log4j-provider.xml?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "deletions": 2,
                "filename": "api/src/test/resources/META-INF/log4j-provider.xml",
                "patch": "@@ -1,6 +1,7 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n <properties>\n-    <entry key=\"LoggerContextFactory\">org.apache.logging.log4j.SimpleLoggerContextFactory</entry>\n-    <entry key=\"Log4jAPIVersion\">1.99.0</entry>\n+    <entry key=\"LoggerContextFactory\">org.apache.logging.log4j.TestLoggerContextFactory</entry>\n+    <entry key=\"Log4jAPIVersion\">2.0.0</entry>\n+    <entry key=\"FactoryPriority\">0</entry>\n </properties>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/resources/META-INF/log4j-provider.xml",
                "sha": "51e6d1bb145ac9dc25625e4d98ddce215e84b8fd",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/main/resources/META-INF/log4j-provider.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/resources/META-INF/log4j-provider.xml?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "deletions": 1,
                "filename": "core/src/main/resources/META-INF/log4j-provider.xml",
                "patch": "@@ -19,5 +19,6 @@\n <!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n <properties>\n     <entry key=\"LoggerContextFactory\">org.apache.logging.log4j.core.impl.Log4jContextFactory</entry>\n-    <entry key=\"Log4jAPIVersion\">1.99.0</entry>\n+    <entry key=\"Log4jAPIVersion\">2.0.0</entry>\n+    <entry key=\"FactoryPriority\">10</entry>\n </properties>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/main/resources/META-INF/log4j-provider.xml",
                "sha": "c15c54804c05295dcb7135a11b621396d4519533",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/test/java/org/apache/logging/log4j/core/filter/RegexFilterTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/filter/RegexFilterTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "deletions": 0,
                "filename": "core/src/test/java/org/apache/logging/log4j/core/filter/RegexFilterTest.java",
                "patch": "@@ -21,6 +21,8 @@\n import org.apache.logging.log4j.core.impl.Log4jLogEvent;\n import org.apache.logging.log4j.core.LogEvent;\n import org.apache.logging.log4j.message.SimpleMessage;\n+import org.apache.logging.log4j.status.StatusLogger;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n \n import static org.junit.Assert.assertTrue;\n@@ -30,6 +32,10 @@\n  *\n  */\n public class RegexFilterTest {\n+    @BeforeClass\n+    public static void before() {\n+        StatusLogger.getLogger().setLevel(Level.OFF);\n+    }\n \n     @Test\n     public void testThresholds() {",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/test/java/org/apache/logging/log4j/core/filter/RegexFilterTest.java",
                "sha": "eb6f51dbc2d82a8e0a3be8fc2a7a09bfe16e5b7a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/test/java/org/apache/logging/log4j/core/layout/RFC5424LayoutTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/layout/RFC5424LayoutTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "deletions": 0,
                "filename": "core/src/test/java/org/apache/logging/log4j/core/layout/RFC5424LayoutTest.java",
                "patch": "@@ -23,6 +23,7 @@\n import org.apache.logging.log4j.core.BasicConfigurationFactory;\n import org.apache.logging.log4j.core.Logger;\n import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.status.StatusLogger;\n import org.apache.logging.log4j.test.appender.ListAppender;\n import org.apache.logging.log4j.core.config.ConfigurationFactory;\n import org.apache.logging.log4j.message.StructuredDataMessage;\n@@ -54,6 +55,7 @@\n \n     @BeforeClass\n     public static void setupClass() {\n+        StatusLogger.getLogger().setLevel(Level.OFF);\n         ConfigurationFactory.setConfigurationFactory(cf);\n         LoggerContext ctx = (LoggerContext) LogManager.getContext();\n         ctx.reconfigure();",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/test/java/org/apache/logging/log4j/core/layout/RFC5424LayoutTest.java",
                "sha": "c492c54d306872fb998aefde8e5b6e8e31191199",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/test/java/org/apache/logging/log4j/core/net/SocketServerTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/net/SocketServerTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "deletions": 1,
                "filename": "core/src/test/java/org/apache/logging/log4j/core/net/SocketServerTest.java",
                "patch": "@@ -96,7 +96,7 @@ public void testServer() throws Exception {\n             \"Test\", null, null, null, socketFilter);\n         appender.start();\n         ListAppender listApp = new ListAppender(\"Events\", serverFilter, null, false, false);\n-        appender.start();\n+        listApp.start();\n         PatternLayout layout = PatternLayout.createLayout(\"%m %ex%n\", null, null, null);\n         ConsoleAppender console = ConsoleAppender.createAppender(layout, null, \"SYSTEM_OUT\", \"Console\", \"true\");\n         Logger serverLogger = ctx.getLogger(SocketServer.class.getName());",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/test/java/org/apache/logging/log4j/core/net/SocketServerTest.java",
                "sha": "958d73ea3159bf34c0cbe49ef9fe76d2ef7c5fd1",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "deletions": 0,
                "filename": "flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java",
                "patch": "@@ -35,6 +35,7 @@\n import org.apache.logging.log4j.core.Appender;\n import org.apache.logging.log4j.core.Logger;\n import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.status.StatusLogger;\n import org.junit.After;\n import org.junit.AfterClass;\n import org.junit.Assert;\n@@ -68,6 +69,7 @@\n \n     @BeforeClass\n     public static void setupClass() {\n+        StatusLogger.getLogger().setLevel(Level.OFF);\n         ctx = (LoggerContext) LogManager.getContext();\n     }\n ",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java",
                "sha": "fc2a8f913b70794c09512e5ffc5b35f10f0159be",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/log4j12-api/src/test/java/org/apache/log4j/CategoryTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j12-api/src/test/java/org/apache/log4j/CategoryTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "deletions": 1,
                "filename": "log4j12-api/src/test/java/org/apache/log4j/CategoryTest.java",
                "patch": "@@ -25,7 +25,9 @@\n import org.apache.logging.log4j.test.appender.ListAppender;\n import org.apache.logging.log4j.core.config.ConfigurationFactory;\n import org.apache.logging.log4j.core.layout.PatternLayout;\n+import org.junit.After;\n import org.junit.AfterClass;\n+import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n@@ -48,10 +50,11 @@\n \n     private static final String LINE_SEP = System.getProperty(\"line.separator\");\n \n-    private ListAppender appender = new ListAppender(\"List\");\n+    private static ListAppender appender = new ListAppender(\"List\");\n \n     @BeforeClass\n     public static void setupClass() {\n+        appender.start();\n         ConfigurationFactory.setConfigurationFactory(cf);\n         LoggerContext ctx = (LoggerContext) org.apache.logging.log4j.LogManager.getContext();\n         ctx.reconfigure();\n@@ -60,6 +63,7 @@ public static void setupClass() {\n     @AfterClass\n     public static void cleanupClass() {\n         ConfigurationFactory.removeConfigurationFactory(cf);\n+        appender.stop();\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/log4j12-api/src/test/java/org/apache/log4j/CategoryTest.java",
                "sha": "f5fef96ab6fc4b8355ec248a84bbbdbea2b043f1",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/log4j12-api/src/test/java/org/apache/log4j/LoggerTest.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j12-api/src/test/java/org/apache/log4j/LoggerTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "deletions": 0,
                "filename": "log4j12-api/src/test/java/org/apache/log4j/LoggerTest.java",
                "patch": "@@ -127,6 +127,7 @@ public void testAdditivity1() {\n         Logger a = Logger.getLogger(\"a\");\n         Logger ab = Logger.getLogger(\"a.b\");\n         CountingAppender ca = new CountingAppender();\n+        ca.start();\n         a.getLogger().addAppender(ca);\n \n         assertEquals(ca.counter, 0);\n@@ -138,6 +139,8 @@ public void testAdditivity1() {\n         assertEquals(ca.counter, 3);\n         ab.error(MSG);\n         assertEquals(ca.counter, 4);\n+        ca.stop();\n+        a.getLogger().removeAppender(ca);\n     }\n \n     /**\n@@ -152,7 +155,9 @@ public void testAdditivity2() {\n         Logger x = Logger.getLogger(\"x\");\n \n         CountingAppender ca1 = new CountingAppender();\n+        ca1.start();\n         CountingAppender ca2 = new CountingAppender();\n+        ca2.start();\n \n         a.getLogger().addAppender(ca1);\n         abc.getLogger().addAppender(ca2);\n@@ -171,6 +176,10 @@ public void testAdditivity2() {\n         x.debug(MSG);\n         assertEquals(ca1.counter, 2);\n         assertEquals(ca2.counter, 1);\n+        ca1.stop();\n+        ca2.stop();\n+        a.getLogger().removeAppender(ca1);\n+        abc.getLogger().removeAppender(ca2);\n     }\n \n     /**\n@@ -186,8 +195,11 @@ public void testAdditivity3() {\n         Logger x = Logger.getLogger(\"x\");\n \n         CountingAppender caRoot = new CountingAppender();\n+        caRoot.start();\n         CountingAppender caA = new CountingAppender();\n+        caA.start();\n         CountingAppender caABC = new CountingAppender();\n+        caABC.start();\n \n         root.getLogger().addAppender(caRoot);\n         a.getLogger().addAppender(caA);\n@@ -214,6 +226,12 @@ public void testAdditivity3() {\n         assertEquals(caRoot.counter, 1);\n         assertEquals(caA.counter, 1);\n         assertEquals(caABC.counter, 1);\n+        caRoot.stop();\n+        caA.stop();\n+        caABC.stop();\n+        root.getLogger().removeAppender(caRoot);\n+        a.getLogger().removeAppender(caA);\n+        abc.getLogger().removeAppender(caABC);\n     }\n \n     /* Don't support getLoggerRepository\n@@ -391,6 +409,8 @@ public void testTrace() {\n         LogEvent event = (LogEvent) msgs.get(0);\n         assertEquals(org.apache.logging.log4j.Level.TRACE, event.getLevel());\n         assertEquals(\"Message 1\", event.getMessage().getFormat());\n+        appender.stop();\n+        root.getLogger().removeAppender(appender);\n     }\n \n     /**\n@@ -399,6 +419,7 @@ public void testTrace() {\n     @Test\n     public void testTraceWithException() {\n         ListAppender appender = new ListAppender(\"List\");\n+        appender.start();\n         Logger root = Logger.getRootLogger();\n         root.getLogger().addAppender(appender);\n         root.setLevel(Level.INFO);\n@@ -416,6 +437,8 @@ public void testTraceWithException() {\n         LogEvent event = msgs.get(0);\n         assertEquals(org.apache.logging.log4j.Level.TRACE, event.getLevel());\n         assertEquals(\"Message 1\", event.getMessage().getFormattedMessage());\n+        appender.stop();\n+        root.getLogger().removeAppender(appender);\n     }\n \n     /**\n@@ -424,6 +447,7 @@ public void testTraceWithException() {\n     @Test\n     public void testIsTraceEnabled() {\n         ListAppender appender = new ListAppender(\"List\");\n+        appender.start();\n         Logger root = Logger.getRootLogger();\n         root.getLogger().addAppender(appender);\n         root.setLevel(Level.INFO);\n@@ -433,12 +457,15 @@ public void testIsTraceEnabled() {\n \n         assertTrue(tracer.isTraceEnabled());\n         assertFalse(root.isTraceEnabled());\n+        appender.stop();\n+        root.getLogger().removeAppender(appender);\n     }\n \n     @Test\n     public void testLog() {\n         PatternLayout layout = PatternLayout.createLayout(\"%d %C %L %m\", null, null, null);\n         ListAppender appender = new ListAppender(\"List\", null, layout, false, false);\n+        appender.start();\n         Logger root = Logger.getRootLogger();\n         root.getLogger().addAppender(appender);\n         root.setLevel(Level.INFO);\n@@ -450,6 +477,8 @@ public void testLog() {\n         assertTrue(\"Incorrect number of messages\", msgs.size() == 3);\n         String msg = msgs.get(0);\n         assertTrue(\"Message contains incorrect class name: \" + msg, msg.contains(LoggerTest.class.getName()));\n+        appender.stop();\n+        root.getLogger().removeAppender(appender);\n     }\n \n     private static class MyLogger {",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/log4j12-api/src/test/java/org/apache/log4j/LoggerTest.java",
                "sha": "1e98c3afe1731a6f8a3a4c34f5b4b31e76b3f390",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/src/changes/changes.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -23,6 +23,10 @@\n \n   <body>\n     <release version=\"2.0-beta3\" date=\"TBD\" description= \"Bug fixes and enhancements\">\n+      <action dev=\"rgoers\" type=\"fix\">\n+        Avoid NPE when duplicate LoggerContextFactorys are present. Allow factories to specify a weight to allow\n+        real implementations to outrank test implementations. Provide a simple default LoggerContextFactory.\n+      </action>\n       <action issue=\"LOG4J2-97\" dev=\"rgoers\" type=\"fix\">\n         Added several missing classes and methods for Log4j 1.x compatibility.\n       </action>",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/src/changes/changes.xml",
                "sha": "9822ba1dddc08cfa93dd28313e7dff0de45567d4",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/src/site/xdoc/manual/extending.xml",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/site/xdoc/manual/extending.xml?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "deletions": 1,
                "filename": "src/site/xdoc/manual/extending.xml",
                "patch": "@@ -34,10 +34,25 @@\n               locates a LoggerContextFactory by locating all instances of META-INF/log4j-provider.xml, a\n               file that conforms to the java.util.Properties DTD, and then inspecting each to verify that it\n               specifies a value for the \"Log4jAPIVersion\" property that conforms to the version required by the\n-              LogManager. If more than one valid implementation is located an exception will be thrown.\n+              LogManager. If more than one valid implementation is located the value for \"FactoryPriority\" will\n+              be used to identify the factory with the highest priority.\n               Finally, the value of the \"LoggerContextFactory\" property will be used to locate the\n               LoggerContextFactory. In Log4j 2 this is provided by Log4jContextFactory.\n             </p>\n+            <p>\n+              Applications may change the LoggerContextFactory that will be used by\n+              <ol>\n+                <li>Implementing a new LoggerContextFactory and creating a log4j-provider.xml to reference it making\n+                  sure that it has the highest priority.</li>\n+                <li>Create a new log4j-provider.xml and configure it with the desired LoggerContextFactory making\n+                  sure that it has the highest priority.</li>\n+                <li>Setting the system property \"log4j2.LoggerContextFactory\" to the name of the LoggerContextFactory\n+                  class to use.</li>\n+                <li>Setting the property \"log4j2.LoggerContextFactory\" in a properties file named\n+                  \"log4j2.LogManager.properties\" to the name of the LoggerContextFactory class to use. The properties\n+                  file must be on the classpath.</li>\n+              </ol>\n+            </p>\n           </subsection>\n           <subsection name=\"ContextSelector\">\n             <p>",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/src/site/xdoc/manual/extending.xml",
                "sha": "df3ca467934e89aa318bafa14686bf9d8d039e49",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE when duplicate LoggerContextFactorys are present. Allow factories to specify a weight to allow real implementations to outrank test implementations. Provide a simple default LoggerContextFactory.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1399852 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/8bf770ea5fd0b4571c488cd68401479921c2ae41",
        "repo": "logging-log4j2",
        "unit_tests": [
            "LogManagerTest.java",
            "SimpleLoggerTest.java"
        ]
    },
    "logging-log4j2_ecc35f9": {
        "bug_id": "logging-log4j2_ecc35f9",
        "commit": "https://github.com/apache/logging-log4j2/commit/ecc35f922b0ce47ea3d914021be108cb17817b47",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/ecc35f922b0ce47ea3d914021be108cb17817b47/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java?ref=ecc35f922b0ce47ea3d914021be108cb17817b47",
                "deletions": 1,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java",
                "patch": "@@ -59,7 +59,7 @@\n \n     private static final ThreadLocal<StringBuilder> threadLocal = new ThreadLocal<>();\n \n-    private final TextEncoderHelper textEncoderHelper;\n+    private TextEncoderHelper textEncoderHelper;\n \n     /**\n      * Returns a {@code StringBuilder} that this Layout implementation can use to write the formatted log event to.\n@@ -148,6 +148,9 @@ protected AbstractStringLayout(final Configuration config, final Charset aCharse\n      * @return a {@code TextEncoderHelper}\n      */\n     protected TextEncoderHelper getCachedTextEncoderHelper() {\n+        if (textEncoderHelper == null) {\n+            textEncoderHelper = new TextEncoderHelper(getCharset());\n+        }\n         return textEncoderHelper;\n     }\n ",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/ecc35f922b0ce47ea3d914021be108cb17817b47/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java",
                "sha": "757e9daa4498eb7a020c3f538e250a54a2296709",
                "status": "modified"
            }
        ],
        "message": "LOG4J2-1291 fix NPE in TextEncoderHelper when system property \"log4j2.enable.direct.encoders\" is not set",
        "parent": "https://github.com/apache/logging-log4j2/commit/34809a2767474ef10ae55119608b60ae5b3ed552",
        "repo": "logging-log4j2",
        "unit_tests": [
            "AbstractStringLayoutTest.java"
        ]
    },
    "logging-log4j2_f23fd6e": {
        "bug_id": "logging-log4j2_f23fd6e",
        "commit": "https://github.com/apache/logging-log4j2/commit/f23fd6e4bf537fd6adec8ab3a62929cdb05ad389",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/f23fd6e4bf537fd6adec8ab3a62929cdb05ad389/log4j-api/src/main/java/org/apache/logging/log4j/util/SortedArrayStringMap.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/util/SortedArrayStringMap.java?ref=f23fd6e4bf537fd6adec8ab3a62929cdb05ad389",
                "deletions": 0,
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/util/SortedArrayStringMap.java",
                "patch": "@@ -498,6 +498,9 @@ private void writeObject(final java.io.ObjectOutputStream s) throws IOException\n     }\n \n     private static byte[] marshall(Object obj) throws IOException {\n+        if (obj == null) {\n+            return null;\n+        }\n         ByteArrayOutputStream bout = new ByteArrayOutputStream();\n         try (ObjectOutputStream oos = new ObjectOutputStream(bout)) {\n             oos.writeObject(obj);",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/f23fd6e4bf537fd6adec8ab3a62929cdb05ad389/log4j-api/src/main/java/org/apache/logging/log4j/util/SortedArrayStringMap.java",
                "sha": "ac72f39ea49a39671d82074098034dc0554ca374",
                "status": "modified"
            }
        ],
        "message": "LOG4J2-1926 prevent NPE when serializing null values",
        "parent": "https://github.com/apache/logging-log4j2/commit/194a398d8f70d6680f8154168011171f0a12113b",
        "repo": "logging-log4j2",
        "unit_tests": [
            "SortedArrayStringMapTest.java"
        ]
    },
    "logging-log4j2_f91ce93": {
        "bug_id": "logging-log4j2_f91ce93",
        "commit": "https://github.com/apache/logging-log4j2/commit/f91ce9347be991d052e76a4f620cc343322b4edb",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/f91ce9347be991d052e76a4f620cc343322b4edb/core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java?ref=f91ce9347be991d052e76a4f620cc343322b4edb",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java",
                "patch": "@@ -28,6 +28,7 @@\n     private OutputStream os;\n \n     private byte[] footer = null;\n+    private byte[] header = null;\n \n     protected OutputStreamManager(final OutputStream os, final String streamName) {\n         super(streamName);\n@@ -54,6 +55,7 @@ protected OutputStreamManager(final OutputStream os, final String streamName) {\n      */\n     public synchronized void setHeader(final byte[] header) {\n         if (header != null) {\n+            this.header = header;\n             try {\n                 this.os.write(header, 0, header.length);\n             } catch (final IOException ioe) {\n@@ -97,6 +99,13 @@ protected OutputStream getOutputStream() {\n \n     protected void setOutputStream(final OutputStream os) {\n         this.os = os;\n+        if (header != null) {\n+            try {\n+                this.os.write(header, 0, header.length);\n+            } catch (final IOException ioe) {\n+                LOGGER.error(\"Unable to write header\", ioe);\n+            }\n+        }\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/f91ce9347be991d052e76a4f620cc343322b4edb/core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java",
                "sha": "54fde20be26f975a205d128c412d4ed86994971a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/f91ce9347be991d052e76a4f620cc343322b4edb/core/src/main/java/org/apache/logging/log4j/core/net/DatagramOutputStream.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/net/DatagramOutputStream.java?ref=f91ce9347be991d052e76a4f620cc343322b4edb",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/logging/log4j/core/net/DatagramOutputStream.java",
                "patch": "@@ -89,7 +89,7 @@ public synchronized void write(final byte[] bytes) throws IOException {\n \n     @Override\n     public synchronized void flush() throws IOException {\n-        if (this.ds != null && this.address != null) {\n+        if (this.data != null && this.ds != null && this.address != null) {\n             final DatagramPacket packet = new DatagramPacket(data, data.length, address, port);\n             ds.send(packet);\n         }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/f91ce9347be991d052e76a4f620cc343322b4edb/core/src/main/java/org/apache/logging/log4j/core/net/DatagramOutputStream.java",
                "sha": "2fe3d9a1b747a09f1bb8b4d616a0a6af4579f40f",
                "status": "modified"
            },
            {
                "additions": 98,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/f91ce9347be991d052e76a4f620cc343322b4edb/core/src/test/java/org/apache/logging/log4j/core/net/SocketReconnectTest.java",
                "changes": 190,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/net/SocketReconnectTest.java?ref=f91ce9347be991d052e76a4f620cc343322b4edb",
                "deletions": 92,
                "filename": "core/src/test/java/org/apache/logging/log4j/core/net/SocketReconnectTest.java",
                "patch": "@@ -29,14 +29,15 @@\n import java.io.InputStreamReader;\n import java.net.ServerSocket;\n import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.concurrent.Callable;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import static org.junit.Assert.*;\n \n public class SocketReconnectTest {\n     private static final int SOCKET_PORT = 5514;\n@@ -50,120 +51,125 @@ public static void before() {\n \n     @Test\n     public void testReconnect() throws Exception {\n-        TestSocketServer testServer = null;\n-        ExecutorService executor = null;\n-        Future<InputStream> futureIn;\n-        final InputStream in;\n \n-        try {\n-            executor = Executors.newSingleThreadExecutor();\n-            System.err.println(\"Initializing server\");\n-            testServer = new TestSocketServer();\n-            futureIn = executor.submit(testServer);\n-            Thread.sleep(300);\n-\n-            //System.err.println(\"Initializing logger\");\n-            final Logger logger = LogManager.getLogger(SocketReconnectTest.class);\n-\n-            String message = \"Log #1\";\n-            logger.error(message);\n+        List<String> list = new ArrayList<String>();\n+        TestSocketServer server = new TestSocketServer(list);\n+        server.start();\n+        Thread.sleep(300);\n+\n+        //System.err.println(\"Initializing logger\");\n+        final Logger logger = LogManager.getLogger(SocketReconnectTest.class);\n+\n+        String message = \"Log #1\";\n+        logger.error(message);\n+        String expectedHeader = \"Header\";\n+\n+        String msg = null;\n+        String header = null;\n+        for (int i = 0; i < 5; ++i) {\n+            Thread.sleep(100);\n+            if (list.size() > 1) {\n+                header = list.get(0);\n+                msg = list.get(1);\n+                break;\n+            }\n+        }\n+        assertNotNull(\"No header\", header);\n+        assertEquals(expectedHeader, header);\n+        assertNotNull(\"No message\", msg);\n+        assertEquals(message, msg);\n \n-            BufferedReader reader = new BufferedReader(new InputStreamReader(futureIn.get()));\n-            assertEquals(message, reader.readLine());\n+        server.shutdown();\n+        server.join();\n \n-            closeQuietly(testServer);\n-            executor.shutdown();\n-            try {\n-                // Wait a while for existing tasks to terminate\n-                if (!executor.awaitTermination(100, TimeUnit.MILLISECONDS)) {\n-                    executor.shutdownNow();\n-                    if (!executor.awaitTermination(100, TimeUnit.MILLISECONDS)) {\n-                        System.err.println(\"Pool did not terminate\");\n-                    }\n-                }\n-            } catch (InterruptedException ie) {\n-                // (Re-)Cancel if current thread also interrupted\n-                executor.shutdownNow();\n-                // Preserve interrupt status\n-                Thread.currentThread().interrupt();\n-            }\n+        list.clear();\n \n-            message = \"Log #2\";\n-            logger.error(message);\n+        message = \"Log #2\";\n+        boolean exceptionCaught = false;\n \n-            message = \"Log #3\";\n+        for (int i = 0; i < 5; ++i) {\n             try {\n                 logger.error(message);\n             } catch (final AppenderRuntimeException e) {\n+                exceptionCaught = true;\n+                break;\n                 // System.err.println(\"Caught expected exception\");\n             }\n-\n-            //System.err.println(\"Re-initializing server\");\n-            executor = Executors.newSingleThreadExecutor();\n-            testServer = new TestSocketServer();\n-            futureIn = executor.submit(testServer);\n-            Thread.sleep(500);\n-\n-            try {\n-                logger.error(message);\n-                reader = new BufferedReader(new InputStreamReader(futureIn.get()));\n-                assertEquals(message, reader.readLine());\n-            } catch (final AppenderRuntimeException e) {\n-                e.printStackTrace();\n-                fail(\"Unexpected Exception\");\n+        }\n+        assertTrue(\"No Exception thrown\", exceptionCaught);\n+        message = \"Log #3\";\n+\n+\n+        server = new TestSocketServer(list);\n+        server.start();\n+        Thread.sleep(300);\n+\n+        msg = null;\n+        header = null;\n+        logger.error(message);\n+        for (int i = 0; i < 5; ++i) {\n+            Thread.sleep(100);\n+            if (list.size() > 1) {\n+                header = list.get(0);\n+                msg = list.get(1);\n+                break;\n             }\n-            //System.err.println(\"Sleeping to demonstrate repeated re-connections\");\n-            //Thread.sleep(5000);\n-        } finally {\n-            closeQuietly(testServer);\n-            closeQuietly(executor);\n         }\n+        assertNotNull(\"No header\", header);\n+        assertEquals(expectedHeader, header);\n+        assertNotNull(\"No message\", msg);\n+        assertEquals(message, msg);\n+        server.shutdown();\n+        server.join();\n     }\n \n \n-    private static class TestSocketServer implements Callable<InputStream> {\n-        private ServerSocket server;\n+    private static class TestSocketServer extends Thread {\n+        private volatile boolean shutdown = false;\n+        private List<String> list;\n         private Socket client;\n \n-        public InputStream call() throws Exception {\n-            server = new ServerSocket(SOCKET_PORT);\n-            client = server.accept();\n-            return client.getInputStream();\n+        public TestSocketServer(List<String> list) {\n+            this.list = list;\n         }\n \n-        public void close() {\n-            closeQuietly(client);\n-            closeQuietly(server);\n-        }\n-\n-        private void closeQuietly(final ServerSocket socket) {\n-            if (null != socket) {\n-                try {\n-                    socket.close();\n-                } catch (final IOException ignore) {\n+        public void run() {\n+            ServerSocket server = null;\n+            client = null;\n+            try {\n+                server = new ServerSocket(SOCKET_PORT);\n+                client = server.accept();\n+                while (!shutdown) {\n+                    BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()));\n+                    list.add(reader.readLine());\n                 }\n-            }\n-        }\n-\n-        private void closeQuietly(final Socket socket) {\n-            if (null != socket) {\n-                try {\n-                    socket.close();\n-                } catch (final IOException ignore) {\n+            } catch (Exception ex) {\n+                ex.printStackTrace();\n+            } finally {\n+                if (client != null) {\n+                    try {\n+                        client.close();\n+                    } catch (Exception ex) {\n+                        System.out.println(\"Unable to close socket \" + ex.getMessage());\n+                    }\n+                }\n+                if (server != null) {\n+                    try {\n+                        server.close();\n+                    } catch (Exception ex) {\n+                        System.out.println(\"Unable to close server socket \" + ex.getMessage());\n+                    }\n                 }\n             }\n         }\n-    }\n \n-    private static void closeQuietly(final ExecutorService executor) {\n-        if (null != executor) {\n-            executor.shutdownNow();\n-        }\n-    }\n-\n-    private static void closeQuietly(final TestSocketServer testServer) {\n-        if (null != testServer) {\n-            testServer.close();\n+        public void shutdown() {\n+            shutdown = true;\n+            try {\n+                client.shutdownInput();\n+            } catch (Exception ex) {\n+                ex.printStackTrace();\n+            }\n         }\n     }\n }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/f91ce9347be991d052e76a4f620cc343322b4edb/core/src/test/java/org/apache/logging/log4j/core/net/SocketReconnectTest.java",
                "sha": "ad976ea23e2df121a55799d2a20072813ccf0fed",
                "status": "modified"
            },
            {
                "additions": 61,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/f91ce9347be991d052e76a4f620cc343322b4edb/core/src/test/java/org/apache/logging/log4j/test/layout/BasicLayout.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/test/layout/BasicLayout.java?ref=f91ce9347be991d052e76a4f620cc343322b4edb",
                "deletions": 0,
                "filename": "core/src/test/java/org/apache/logging/log4j/test/layout/BasicLayout.java",
                "patch": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.test.layout;\n+\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n+import org.apache.logging.log4j.core.helpers.Charsets;\n+import org.apache.logging.log4j.core.helpers.Constants;\n+import org.apache.logging.log4j.core.layout.AbstractStringLayout;\n+\n+import java.nio.charset.Charset;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ *\n+ */\n+@Plugin(name = \"BasicLayout\", type = \"Core\", elementType = \"layout\", printObject = true)\n+public class BasicLayout extends AbstractStringLayout {\n+\n+    private static final String HEADER = \"Header\" + Constants.LINE_SEP;\n+\n+    public byte[] getHeader() {\n+        return HEADER.getBytes(getCharset());\n+    }\n+\n+    public BasicLayout(final Charset charset) {\n+        super(charset);\n+    }\n+\n+    public String toSerializable(LogEvent event) {\n+        return event.getMessage().getFormattedMessage() + Constants.LINE_SEP;\n+    }\n+\n+    public Map<String, String> getContentFormat() {\n+        return new HashMap<String, String>();\n+    }\n+\n+    /**\n+     */\n+    @PluginFactory\n+    public static BasicLayout createLayout() {\n+        final Charset charset = Charsets.getSupportedCharset(\"UTF-8\");\n+        return new BasicLayout(charset);\n+    }\n+}",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/f91ce9347be991d052e76a4f620cc343322b4edb/core/src/test/java/org/apache/logging/log4j/test/layout/BasicLayout.java",
                "sha": "b2ec1eae466cbabdc1e54c3f330ca34b61edcf08",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/f91ce9347be991d052e76a4f620cc343322b4edb/core/src/test/resources/log4j-socket.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/resources/log4j-socket.xml?ref=f91ce9347be991d052e76a4f620cc343322b4edb",
                "deletions": 3,
                "filename": "core/src/test/resources/log4j-socket.xml",
                "patch": "@@ -1,9 +1,9 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<configuration status=\"debug\" name=\"MyApp\">\n+<configuration status=\"warn\" name=\"MyApp\" packages=\"org.apache.logging.log4j.test\">\n \t<appenders>\n \t\t<Socket name=\"socket\" host=\"localhost\" port=\"5514\" protocol=\"TCP\" suppressExceptions=\"false\"\n-\t\t\t\treconnectionDelay=\"250\">\n-\t\t\t<PatternLayout pattern=\"%msg%n\"/>\n+\t\t\t\treconnectionDelay=\"100\">\n+\t\t\t<BasicLayout />\n \t\t</Socket>\n \t</appenders>\n \t<loggers>",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/f91ce9347be991d052e76a4f620cc343322b4edb/core/src/test/resources/log4j-socket.xml",
                "sha": "168b2c4d34a7f9ca4afec3c601b0230ed2c86118",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/f91ce9347be991d052e76a4f620cc343322b4edb/src/changes/changes.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=f91ce9347be991d052e76a4f620cc343322b4edb",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -23,6 +23,12 @@\n \n   <body>\n     <release version=\"2.0-beta5\" date=\"@TBD@\" description=\"Bug fixes and enhancements\">\n+      <action issue=\"LOG4J2-181\" dev=\"rgoers\" type=\"fix\">\n+        OutputStreamManager now adds the layout header whenever the OutputStream is set.\n+      </action>\n+      <action issue=\"LOG4J2-177\" dev=\"rgoers\" type=\"fix\" due-to=\"Remko Popma\">\n+        Fix NullPointerException in DatagramOutputStream when flush is called from multiple threads.\n+      </action>\n       <action dev=\"rgoers\" type=\"add\">\n         Added FlumePersistentManager which writes to BerkeleyDB and then writes to Flume asynchronously.\n       </action>",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/f91ce9347be991d052e76a4f620cc343322b4edb/src/changes/changes.xml",
                "sha": "3990032fab4bea2ad61ded4e3af57fc6011980ee",
                "status": "modified"
            }
        ],
        "message": "LOG4J2-177, LOG4J2-181 - Fix NPE in DatagramSocketManager and write header whenever the OutputStream is set in OutputStreamManager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1460497 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/c48f1f5a4b9a36915806a0b3338468d83712457a",
        "repo": "logging-log4j2",
        "unit_tests": [
            "OutputStreamManagerTest.java"
        ]
    },
    "logging-log4j2_fa4a8be": {
        "bug_id": "logging-log4j2_fa4a8be",
        "commit": "https://github.com/apache/logging-log4j2/commit/fa4a8be9719c5d08a6b026b3f0f68b8502853810",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/fa4a8be9719c5d08a6b026b3f0f68b8502853810/core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java?ref=fa4a8be9719c5d08a6b026b3f0f68b8502853810",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java",
                "patch": "@@ -99,7 +99,9 @@ public LoggerContext getContext(String fqcn, ClassLoader loader, boolean current\n \n             if (securityManager != null) {\n                 Class clazz = securityManager.getCaller(fqcn);\n-                return locateContext(clazz.getClassLoader(), null);\n+                if (clazz != null) {\n+                    return locateContext(clazz.getClassLoader(), null);\n+                }\n             }\n \n             Throwable t = new Throwable();",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/fa4a8be9719c5d08a6b026b3f0f68b8502853810/core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java",
                "sha": "08d33bc9944e345828a3fa3a61e87375162abccc",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/fa4a8be9719c5d08a6b026b3f0f68b8502853810/src/changes/changes.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=fa4a8be9719c5d08a6b026b3f0f68b8502853810",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -23,6 +23,10 @@\n \n   <body>\n     <release version=\"2.0-beta3\" date=\"TBD\" description= \"Bug fixes and enhancements\">\n+      <action issue=\"LOG4J2-108\" dev=\"rgoers\" type=\"fix\">\n+        Fix NullPointerException in ClassLoaderContextSelector when no class is returned from\n+        the SecurityManager.\n+      </action>\n       <action issue=\"LOG4J2-105\" dev=\"rgoers\" type=\"update\">\n         Add ability to customize the names of the Levels in the LevelPatternConverter.\n       </action>",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/fa4a8be9719c5d08a6b026b3f0f68b8502853810/src/changes/changes.xml",
                "sha": "8b82be0667a378fa4119471f14cde9cbb0f802d0",
                "status": "modified"
            }
        ],
        "message": "LOG4J2-108 - Protect against NPE in ClassLoaderContextSelector if the SecurityManager can't locate the classw\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1405687 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/5633605dffc2179f9f4c3542344d9c5059f91501",
        "repo": "logging-log4j2",
        "unit_tests": [
            "ClassLoaderContextSelectorTest.java"
        ]
    },
    "logging-log4j2_ff18a2b": {
        "bug_id": "logging-log4j2_ff18a2b",
        "commit": "https://github.com/apache/logging-log4j2/commit/ff18a2b768d0782d05e0a197e2d918216e636aa3",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/ff18a2b768d0782d05e0a197e2d918216e636aa3/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java?ref=ff18a2b768d0782d05e0a197e2d918216e636aa3",
                "deletions": 0,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "patch": "@@ -143,6 +143,9 @@ public String getFQCN() {\n \n     @Override\n     public Level getLevel() {\n+        if (level == null) {\n+            level = Level.OFF; // LOG4J2-462, LOG4J2-465\n+        }\n         return level;\n     }\n ",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/ff18a2b768d0782d05e0a197e2d918216e636aa3/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "sha": "22ab2e51cec9f01318fd18882560aacc99cbd569",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/ff18a2b768d0782d05e0a197e2d918216e636aa3/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java?ref=ff18a2b768d0782d05e0a197e2d918216e636aa3",
                "deletions": 1,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java",
                "patch": "@@ -158,7 +158,7 @@ private Log4jLogEvent(final String loggerName, final Marker marker, final String\n         name = loggerName;\n         this.marker = marker;\n         this.fqcnOfLogger = fqcn;\n-        this.level = level;\n+        this.level = (level == null) ? Level.OFF : level; // LOG4J2-462, LOG4J2-465\n         this.message = message;\n         this.throwable = t;\n         this.mdc = mdc;",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/ff18a2b768d0782d05e0a197e2d918216e636aa3/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java",
                "sha": "046655f1ca728cdea30b0e84d356bb31a46db294",
                "status": "modified"
            },
            {
                "additions": 148,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/ff18a2b768d0782d05e0a197e2d918216e636aa3/log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java",
                "changes": 148,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java?ref=ff18a2b768d0782d05e0a197e2d918216e636aa3",
                "deletions": 0,
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java",
                "patch": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+\n+package org.apache.logging.log4j.core.async;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.Marker;\n+import org.apache.logging.log4j.ThreadContext.ContextStack;\n+import org.apache.logging.log4j.message.Message;\n+import org.apache.logging.log4j.message.TimestampMessage;\n+import org.junit.Test;\n+\n+/**\n+ * Tests the RingBufferLogEvent class.\n+ */\n+public class RingBufferLogEventTest {\n+\n+    @Test\n+    public void testGetLevelReturnsOffIfNullLevelSet() {\n+        RingBufferLogEvent evt = new RingBufferLogEvent();\n+        String loggerName = null;\n+        Marker marker = null;\n+        String fqcn = null;\n+        Level level = null;\n+        Message data = null;\n+        Throwable t = null;\n+        Map<String, String> map = null;\n+        ContextStack contextStack = null;\n+        String threadName = null;\n+        StackTraceElement location = null;\n+        long currentTimeMillis = 0;\n+        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,\n+                contextStack, threadName, location, currentTimeMillis);\n+        assertEquals(Level.OFF, evt.getLevel());\n+    }\n+\n+    @Test\n+    public void testGetMessageReturnsNonNullMessage() {\n+        RingBufferLogEvent evt = new RingBufferLogEvent();\n+        String loggerName = null;\n+        Marker marker = null;\n+        String fqcn = null;\n+        Level level = null;\n+        Message data = null;\n+        Throwable t = null;\n+        Map<String, String> map = null;\n+        ContextStack contextStack = null;\n+        String threadName = null;\n+        StackTraceElement location = null;\n+        long currentTimeMillis = 0;\n+        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,\n+                contextStack, threadName, location, currentTimeMillis);\n+        assertNotNull(evt.getMessage());\n+    }\n+\n+    @Test\n+    public void testGetMillisReturnsConstructorMillisForNormalMessage() {\n+        RingBufferLogEvent evt = new RingBufferLogEvent();\n+        String loggerName = null;\n+        Marker marker = null;\n+        String fqcn = null;\n+        Level level = null;\n+        Message data = null;\n+        Throwable t = null;\n+        Map<String, String> map = null;\n+        ContextStack contextStack = null;\n+        String threadName = null;\n+        StackTraceElement location = null;\n+        long currentTimeMillis = 123;\n+        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,\n+                contextStack, threadName, location, currentTimeMillis);\n+        assertEquals(123, evt.getMillis());\n+    }\n+\n+    static class TimeMsg implements Message, TimestampMessage {\n+        private static final long serialVersionUID = -2038413535672337079L;\n+        private final String msg;\n+        private final long timestamp;\n+\n+        public TimeMsg(String msg, long timestamp) {\n+            this.msg = msg;\n+            this.timestamp = timestamp;\n+        }\n+\n+        @Override\n+        public long getTimestamp() {\n+            return timestamp;\n+        }\n+\n+        @Override\n+        public String getFormattedMessage() {\n+            return msg;\n+        }\n+\n+        @Override\n+        public String getFormat() {\n+            return null;\n+        }\n+\n+        @Override\n+        public Object[] getParameters() {\n+            return null;\n+        }\n+\n+        @Override\n+        public Throwable getThrowable() {\n+            return null;\n+        }\n+    }\n+\n+    @Test\n+    public void testGetMillisReturnsMsgTimestampForTimestampMessage() {\n+        RingBufferLogEvent evt = new RingBufferLogEvent();\n+        String loggerName = null;\n+        Marker marker = null;\n+        String fqcn = null;\n+        Level level = null;\n+        Message data = new TimeMsg(\"\", 567);\n+        Throwable t = null;\n+        Map<String, String> map = null;\n+        ContextStack contextStack = null;\n+        String threadName = null;\n+        StackTraceElement location = null;\n+        long currentTimeMillis = 123;\n+        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,\n+                contextStack, threadName, location, currentTimeMillis);\n+        assertEquals(567, evt.getMillis());\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/ff18a2b768d0782d05e0a197e2d918216e636aa3/log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java",
                "sha": "7d3bb6d4b91d6a78cca75e4e6cda8f2867be47cc",
                "status": "added"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/ff18a2b768d0782d05e0a197e2d918216e636aa3/log4j-core/src/test/java/org/apache/logging/log4j/core/impl/Log4jLogEventTest.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/impl/Log4jLogEventTest.java?ref=ff18a2b768d0782d05e0a197e2d918216e636aa3",
                "deletions": 0,
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/impl/Log4jLogEventTest.java",
                "patch": "@@ -24,10 +24,21 @@\n import java.io.ObjectOutputStream;\n \n import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.Marker;\n import org.apache.logging.log4j.message.SimpleMessage;\n import org.junit.Test;\n \n public class Log4jLogEventTest {\n+    \n+    @Test\n+    public void testNullLevelReplacedWithOFF() throws Exception {\n+        final Marker marker = null;\n+        final Throwable t = null;\n+        final Level NULL_LEVEL = null;\n+        final Log4jLogEvent evt = new Log4jLogEvent(\"some.test\", marker, \"\",\n+                NULL_LEVEL, new SimpleMessage(\"abc\"), t);\n+        assertEquals(Level.OFF, evt.getLevel());\n+    }\n \n     @Test\n     public void testJavaIoSerializable() throws Exception {",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/ff18a2b768d0782d05e0a197e2d918216e636aa3/log4j-core/src/test/java/org/apache/logging/log4j/core/impl/Log4jLogEventTest.java",
                "sha": "28a1c9e2b093befa27a02df7f7273576cb703532",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/ff18a2b768d0782d05e0a197e2d918216e636aa3/src/changes/changes.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=ff18a2b768d0782d05e0a197e2d918216e636aa3",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -21,6 +21,12 @@\n   </properties>\n   <body>\n     <release version=\"2.0-RC1\" date=\"2013-MM-DD\" description=\"Bug fixes and enhancements\">\n+      <action issue=\"LOG4J2-462\" dev=\"rpopma\" type=\"fix\" due-to=\"Daisuke Baba\">\n+        Fix LogEvent to never return null Level, fixes LevelPatternConverter.format may throw NPE.\n+      </action>\n+      <action issue=\"LOG4J2-465\" dev=\"rpopma\" type=\"fix\" due-to=\"Daisuke Baba\">\n+        Fix LogEvent to never return null Level, fixes ThresholdFilter throws NPE.\n+      </action>\n       <action issue=\"LOG4J2-471\" dev=\"rpopma\" type=\"fix\" due-to=\"Anthony Baldocchi\">\n         Fixed issue where toString methods that perform logging could deadlock AsyncLogger.\n       </action>",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/ff18a2b768d0782d05e0a197e2d918216e636aa3/src/changes/changes.xml",
                "sha": "aa50a52c2a871abe1506cee0117ec38cf93ee974",
                "status": "modified"
            }
        ],
        "message": "LOG4J-462, LOG4J-465 Log4jLogEvent constructor and RingBufferLogEvent#getLevel convert null Level to Level.OFF to prevent NPEs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1555339 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/682403c5067c0a2ef21e528f308edadef0a992e1",
        "repo": "logging-log4j2",
        "unit_tests": [
            "RingBufferLogEventTest.java",
            "Log4jLogEventTest.java"
        ]
    }
}