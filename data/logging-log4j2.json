{
    "logging-log4j2_065c3cd": {
        "bug_id": "logging-log4j2_065c3cd",
        "commit": "https://github.com/apache/logging-log4j2/commit/065c3cdab649a758d640493589a5568a08a391b2",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/065c3cdab649a758d640493589a5568a08a391b2/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java?ref=065c3cdab649a758d640493589a5568a08a391b2",
                "deletions": 13,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "patch": "@@ -196,20 +196,22 @@ private void addShutdownHook() {\n                 ShutdownRegistrationStrategy.SHUTDOWN_REGISTRATION_STRATEGY);\n             if (shutdownStrategyClassName != null) {\n                 try {\n-                    shutdownRegistrationStrategy =\n-                        Loader.newCheckedInstanceOf(shutdownStrategyClassName, ShutdownRegistrationStrategy.class);\n+                    shutdownRegistrationStrategy = Loader.newCheckedInstanceOf(shutdownStrategyClassName,\n+                            ShutdownRegistrationStrategy.class);\n                 } catch (final Exception e) {\n-                    LOGGER.error(SHUTDOWN_HOOK_MARKER, \"There was an error loading the ShutdownRegistrationStrategy [{}]. \" +\n-                        \"Falling back to DefaultShutdownRegistrationStrategy.\", shutdownStrategyClassName, e);\n+                    LOGGER.error(SHUTDOWN_HOOK_MARKER,\n+                            \"There was an error loading the ShutdownRegistrationStrategy [{}]. \"\n+                                    + \"Falling back to DefaultShutdownRegistrationStrategy.\",\n+                            shutdownStrategyClassName, e);\n                     shutdownRegistrationStrategy = new DefaultShutdownRegistrationStrategy();\n                 }\n-            }\n-            try {\n-                shutdownRegistrationStrategy.registerShutdownHook(hook);\n-            } catch (final IllegalStateException ise) {\n-                LOGGER.fatal(SHUTDOWN_HOOK_MARKER, \"Unable to register shutdown hook because JVM is shutting down.\");\n-            } catch (final SecurityException se) {\n-                LOGGER.error(SHUTDOWN_HOOK_MARKER, \"Unable to register shutdown hook due to security restrictions\");\n+                try {\n+                    shutdownRegistrationStrategy.registerShutdownHook(hook);\n+                } catch (final IllegalStateException ise) {\n+                    LOGGER.fatal(SHUTDOWN_HOOK_MARKER, \"Unable to register shutdown hook because JVM is shutting down.\");\n+                } catch (final SecurityException se) {\n+                    LOGGER.error(SHUTDOWN_HOOK_MARKER, \"Unable to register shutdown hook due to security restrictions\");\n+                }\n             }\n         }\n     }\n@@ -245,8 +247,9 @@ public void stop() {\n     }\n \n     private void tearDownShutdownHook() {\n-        if (shutdownThread != null && shutdownThread.get() != null) {\n-            shutdownRegistrationStrategy.unregisterShutdownHook(shutdownThread.get());\n+        Thread thread = shutdownThread.get();\n+        if (shutdownRegistrationStrategy != null && shutdownThread != null && thread != null) {\n+            shutdownRegistrationStrategy.unregisterShutdownHook(thread);\n             LOGGER.debug(SHUTDOWN_HOOK_MARKER, \"Enqueue shutdown hook for garbage collection.\");\n             shutdownThread.enqueue();\n         }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/065c3cdab649a758d640493589a5568a08a391b2/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "sha": "d13b6f56f29a86adbf476d7eda76043016be209e",
                "status": "modified"
            }
        ],
        "message": "Fix NPEs in new shutdown hook code. I'm not sure if this is the right fix, but it's a fix. It's not clear to me that the new shotdown hook code will be in 2.1 based on the back and forth in JIRA and ML.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1620464 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/053cc54193c754ffbbd83d752786439277c29848",
        "repo": "logging-log4j2",
        "unit_tests": [
            "LoggerContextTest.java",
            "TestLoggerContext.java"
        ]
    },
    "logging-log4j2_20be2b0": {
        "bug_id": "logging-log4j2_20be2b0",
        "commit": "https://github.com/apache/logging-log4j2/commit/20be2b03dd82875a225f1ecb607edf3ed1896587",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/20be2b03dd82875a225f1ecb607edf3ed1896587/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java?ref=20be2b03dd82875a225f1ecb607edf3ed1896587",
                "deletions": 1,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "patch": "@@ -163,7 +163,7 @@ private void setMessage(final Message msg) {\n             ((ReusableMessage) msg).formatTo(getMessageTextForWriting());\n         } else {\n             // if the Message instance is reused, there is no point in freezing its message here\n-            if (!Constants.FORMAT_MESSAGES_IN_BACKGROUND) { // LOG4J2-898: user may choose\n+            if (!Constants.FORMAT_MESSAGES_IN_BACKGROUND && msg != null) { // LOG4J2-898: user may choose\n                 msg.getFormattedMessage(); // LOG4J2-763: ask message to freeze parameters\n             }\n             this.message = msg;",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/20be2b03dd82875a225f1ecb607edf3ed1896587/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "sha": "a241f0ab93e1af9ac35389bf24fecb53188cd65d",
                "status": "modified"
            }
        ],
        "message": "FIX NPE in RingBufferLogEventTest",
        "parent": "https://github.com/apache/logging-log4j2/commit/a0a4e43e2224130c8b33130772c3b78cbc7deece",
        "repo": "logging-log4j2",
        "unit_tests": [
            "RingBufferLogEventTest.java"
        ]
    },
    "logging-log4j2_3306186": {
        "bug_id": "logging-log4j2_3306186",
        "commit": "https://github.com/apache/logging-log4j2/commit/33061868f7692c4b58a2ec06fd1a794c79242ada",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/33061868f7692c4b58a2ec06fd1a794c79242ada/core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java?ref=33061868f7692c4b58a2ec06fd1a794c79242ada",
                "deletions": 16,
                "filename": "core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java",
                "patch": "@@ -51,22 +51,25 @@\n @ConverterKeys({ \"highlight\" })\n public final class HighlightConverter extends LogEventPatternConverter {\n \n-    private static final String[] DEFAULT_FATAL = new String[] { \"BLINK\", \"BRIGHT\", \"RED\" };\n-    private static final String[] DEFAULT_ERROR = new String[] { \"BRIGHT\", \"RED\" };\n-    private static final String[] DEFAULT_WARN = new String[] { \"RED\" };\n-    private static final String[] DEFAULT_INFO = new String[] { \"BLUE\" };\n-    private static final String[] DEFAULT_DEBUG = null;\n-    private static final String[] DEFAULT_TRACE = null;\n-    \n-    private static final EnumMap<Level, String> LEVEL_STYLES_DEFAULT = new EnumMap<Level, String>(Level.class);\n+    private static final EnumMap<Level, String> DEFAULT_STYLES = new EnumMap<Level, String>(Level.class);\n+\n+    private static final EnumMap<Level, String> LOGBACK_STYLES = new EnumMap<Level, String>(Level.class);\n \n     static {\n-        LEVEL_STYLES_DEFAULT.put(Level.FATAL, AnsiEscape.createSequence(DEFAULT_FATAL));\n-        LEVEL_STYLES_DEFAULT.put(Level.ERROR, AnsiEscape.createSequence(DEFAULT_ERROR));\n-        LEVEL_STYLES_DEFAULT.put(Level.WARN, AnsiEscape.createSequence(DEFAULT_WARN));\n-        LEVEL_STYLES_DEFAULT.put(Level.INFO, AnsiEscape.createSequence(DEFAULT_INFO));\n-        LEVEL_STYLES_DEFAULT.put(Level.DEBUG, AnsiEscape.createSequence(DEFAULT_DEBUG));\n-        LEVEL_STYLES_DEFAULT.put(Level.TRACE, AnsiEscape.createSequence(DEFAULT_TRACE));\n+        DEFAULT_STYLES.put(Level.FATAL, AnsiEscape.createSequence(new String[] { \"BRIGHT\", \"RED\" }));\n+        DEFAULT_STYLES.put(Level.ERROR, AnsiEscape.createSequence(new String[] { \"BRIGHT\", \"RED\" }));\n+        DEFAULT_STYLES.put(Level.WARN, AnsiEscape.createSequence(new String[] { \"YELLOW\" }));\n+        DEFAULT_STYLES.put(Level.INFO, AnsiEscape.createSequence(new String[] { \"GREEN\" }));\n+        DEFAULT_STYLES.put(Level.DEBUG, AnsiEscape.createSequence(new String[] { \"CYAN\" }));\n+        DEFAULT_STYLES.put(Level.TRACE, AnsiEscape.createSequence(new String[] { \"BLACK\" }));\n+        //\n+        LOGBACK_STYLES.put(Level.FATAL, AnsiEscape.createSequence(new String[] { \"BLINK\", \"BRIGHT\", \"RED\" }));\n+        LOGBACK_STYLES.put(Level.ERROR, AnsiEscape.createSequence(new String[] { \"BRIGHT\", \"RED\" }));\n+        LOGBACK_STYLES.put(Level.WARN, AnsiEscape.createSequence(new String[] { \"RED\" }));\n+        LOGBACK_STYLES.put(Level.INFO, AnsiEscape.createSequence(new String[] { \"BLUE\" }));\n+        LOGBACK_STYLES.put(Level.DEBUG, AnsiEscape.createSequence(null));\n+        LOGBACK_STYLES.put(Level.TRACE, AnsiEscape.createSequence(null));\n+\n     }\n \n     /**\n@@ -92,8 +95,11 @@\n      * @return a new map\n      */\n     private static EnumMap<Level, String> createLevelStyleMap(final String[] options) {\n-        Map<String, String> styles = options.length < 2 ? null : AnsiEscape.createMap(options[1]);\n-        EnumMap<Level, String> levelStyles = new EnumMap<Level, String>(LEVEL_STYLES_DEFAULT);\n+        if (options.length < 2) {\n+            return DEFAULT_STYLES;\n+        }\n+        Map<String, String> styles = AnsiEscape.createMap(options[1]);\n+        EnumMap<Level, String> levelStyles = new EnumMap<Level, String>(DEFAULT_STYLES);\n         for (Map.Entry<String, String> entry : styles.entrySet()) {\n             final Level key = Level.valueOf(entry.getKey());\n             if (key == null) {",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/33061868f7692c4b58a2ec06fd1a794c79242ada/core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java",
                "sha": "e5a8d0ca807cf0f38ab77ee3187b6526eeff6075",
                "status": "modified"
            }
        ],
        "message": "Allow custom ANSI mappings for Levels. Fix NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1404652 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/025127c808b1689711fd972ca63791d948424afb",
        "repo": "logging-log4j2",
        "unit_tests": [
            "HighlightConverterTest.java"
        ]
    },
    "logging-log4j2_3376588": {
        "bug_id": "logging-log4j2_3376588",
        "commit": "https://github.com/apache/logging-log4j2/commit/33765882bddfd34f8d2913612d3bc2bda9f35e40",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/33765882bddfd34f8d2913612d3bc2bda9f35e40/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java?ref=33765882bddfd34f8d2913612d3bc2bda9f35e40",
                "deletions": 0,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java",
                "patch": "@@ -63,15 +63,19 @@\n         public Appender build() {\n             if (name == null) {\n                 LOGGER.error(\"Name missing.\");\n+                return null;\n             }\n             if (script == null) {\n                 LOGGER.error(\"Script missing for ScriptAppenderSelector appender {}\", name);\n+                return null;\n             }\n             if (appenderSet == null) {\n                 LOGGER.error(\"AppenderSet missing for ScriptAppenderSelector appender {}\", name);\n+                return null;\n             }\n             if (configuration == null) {\n                 LOGGER.error(\"Configuration missing for ScriptAppenderSelector appender {}\", name);\n+                return null;\n             }\n             final ScriptManager scriptManager = configuration.getScriptManager();\n             scriptManager.addScript(script);",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/33765882bddfd34f8d2913612d3bc2bda9f35e40/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java",
                "sha": "7782b96e03ed5fd37485538210f85e9fd35c2511",
                "status": "modified"
            }
        ],
        "message": "[LOG4J2-1597] Fix NPEs.",
        "parent": "https://github.com/apache/logging-log4j2/commit/60bcf168d45eb930e84d3eee9d3ed11d2f2da2ef",
        "repo": "logging-log4j2",
        "unit_tests": [
            "ScriptAppenderSelectorTest.java"
        ]
    },
    "logging-log4j2_36ab290": {
        "bug_id": "logging-log4j2_36ab290",
        "commit": "https://github.com/apache/logging-log4j2/commit/36ab2901c005c4341e543cff2720a2b60949e773",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/36ab2901c005c4341e543cff2720a2b60949e773/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java?ref=36ab2901c005c4341e543cff2720a2b60949e773",
                "deletions": 1,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java",
                "patch": "@@ -196,7 +196,7 @@ private Rfc5424Layout(final Configuration config, final Facility facility, final\n \n     private Map<String, FieldFormatter> createFieldFormatters(final LoggerFields[] loggerFields,\n             final Configuration config) {\n-        final Map<String, FieldFormatter> sdIdMap = new HashMap<>(loggerFields.length);\n+        final Map<String, FieldFormatter> sdIdMap = new HashMap<>(loggerFields == null ? 0 : loggerFields.length);\n \n         if (loggerFields != null) {\n             for (final LoggerFields loggerField : loggerFields) {",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/36ab2901c005c4341e543cff2720a2b60949e773/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java",
                "sha": "e68c64c3255f1b40c139171beb416bab90679a15",
                "status": "modified"
            }
        ],
        "message": "Fix NPE from previous commit.",
        "parent": "https://github.com/apache/logging-log4j2/commit/68a82342c1631b1de3dc353ee5db96b4656ee770",
        "repo": "logging-log4j2",
        "unit_tests": [
            "Rfc5424LayoutTest.java"
        ]
    },
    "logging-log4j2_4c791f8": {
        "bug_id": "logging-log4j2_4c791f8",
        "commit": "https://github.com/apache/logging-log4j2/commit/4c791f8e58ce0cfb86ed6b1f5449213dffac7316",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/4c791f8e58ce0cfb86ed6b1f5449213dffac7316/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java?ref=4c791f8e58ce0cfb86ed6b1f5449213dffac7316",
                "deletions": 1,
                "filename": "log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "patch": "@@ -74,7 +74,11 @@ public DefaultLevelConverter() {\n \n     }\n \n-    private Level addCustomJulLevel(java.util.logging.Level customJavaLevel) {\n+    private synchronized Level addCustomJulLevel(java.util.logging.Level customJavaLevel) {\n+        final Level level = julToLog4j.get(customJavaLevel);\n+        if (level != null) {\n+            return level;\n+        }\n         long prevDist = Long.MAX_VALUE;\n         java.util.logging.Level prevLevel = null;\n         for (java.util.logging.Level mappedJavaLevel : sortedJulLevels) {",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/4c791f8e58ce0cfb86ed6b1f5449213dffac7316/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "sha": "75ae919ae27e67960a3532a52f99b3031b7233a3",
                "status": "modified"
            }
        ],
        "message": "[LOG4J2-1025] Custom java.util.logging.Level gives null Log4j Level and\ncauses NPE. Do not allow concurrent init of custom levels.",
        "parent": "https://github.com/apache/logging-log4j2/commit/4da40ede9393569c78314ffdf7f17bff464f0788",
        "repo": "logging-log4j2",
        "unit_tests": [
            "DefaultLevelConverterTest.java"
        ]
    },
    "logging-log4j2_687b383": {
        "bug_id": "logging-log4j2_687b383",
        "commit": "https://github.com/apache/logging-log4j2/commit/687b383f3e9fc377ea99a247dd9bc6ed23b3eb78",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/687b383f3e9fc377ea99a247dd9bc6ed23b3eb78/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java?ref=687b383f3e9fc377ea99a247dd9bc6ed23b3eb78",
                "deletions": 5,
                "filename": "log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "patch": "@@ -96,11 +96,6 @@ private void mapLog4jToJul(Level level, java.util.logging.Level julLevel) {\n     }\n \n     private Level nearestLevel(java.util.logging.Level customJavaLevel) {\n-        final Level level = julToLog4j.get(customJavaLevel);\n-        if (level != null) {\n-            // don't search\n-            return level;\n-        }\n         long prevDist = Long.MAX_VALUE;\n         java.util.logging.Level prevLevel = null;\n         for (java.util.logging.Level mappedJavaLevel : sortedJulLevels) {",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/687b383f3e9fc377ea99a247dd9bc6ed23b3eb78/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "sha": "c5d7b085895fbe3eb0361485b5bd093822abafbe",
                "status": "modified"
            }
        ],
        "message": "[LOG4J2-1025] Custom java.util.logging.Level gives null Log4j Level and\ncauses NPE. Simplify.",
        "parent": "https://github.com/apache/logging-log4j2/commit/0234c71c8f29aa624778bb107b914c9c9557ddc7",
        "repo": "logging-log4j2",
        "unit_tests": [
            "DefaultLevelConverterTest.java"
        ]
    },
    "logging-log4j2_742e510": {
        "bug_id": "logging-log4j2_742e510",
        "commit": "https://github.com/apache/logging-log4j2/commit/742e51052021e02add3f4e6c40b7258e7de67f16",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/742e51052021e02add3f4e6c40b7258e7de67f16/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java?ref=742e51052021e02add3f4e6c40b7258e7de67f16",
                "deletions": 2,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "patch": "@@ -247,8 +247,8 @@ public void stop() {\n     }\n \n     private void tearDownShutdownHook() {\n-        Thread thread = shutdownThread.get();\n-        if (shutdownRegistrationStrategy != null && shutdownThread != null && thread != null) {\n+        Thread thread = this.getShutdownThread();\n+        if (shutdownRegistrationStrategy != null && thread != null) {\n             shutdownRegistrationStrategy.unregisterShutdownHook(thread);\n             LOGGER.debug(SHUTDOWN_HOOK_MARKER, \"Enqueue shutdown hook for garbage collection.\");\n             shutdownThread.enqueue();",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/742e51052021e02add3f4e6c40b7258e7de67f16/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "sha": "142993ecb127523ec8a979231073e8867662ee06",
                "status": "modified"
            }
        ],
        "message": "Fix NPEs in new shutdown hook code. I'm not sure if this is the right fix, but it's a fix. It's not clear to me that the new shotdown hook code will be in 2.1 based on the back and forth in JIRA and ML.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1620467 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/065c3cdab649a758d640493589a5568a08a391b2",
        "repo": "logging-log4j2",
        "unit_tests": [
            "LoggerContextTest.java",
            "TestLoggerContext.java"
        ]
    },
    "logging-log4j2_793da5e": {
        "bug_id": "logging-log4j2_793da5e",
        "commit": "https://github.com/apache/logging-log4j2/commit/793da5e51d1fea9e024dc42357bea700c224fb3c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-api/src/main/java/org/apache/logging/log4j/Level.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/Level.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "deletions": 3,
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/Level.java",
                "patch": "@@ -19,6 +19,7 @@\n import java.io.Serializable;\n import java.util.Collection;\n import java.util.Locale;\n+import java.util.Objects;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n@@ -276,9 +277,7 @@ public static Level toLevel(final String name, final Level defaultLevel) {\n      * @throws java.lang.IllegalArgumentException if the Level name is not registered.\n      */\n     public static Level valueOf(final String name) {\n-        if (name == null) {\n-            throw new NullPointerException(\"No level name given.\");\n-        }\n+    \tObjects.requireNonNull(name, \"No level name given.\");\n         final String levelName = name.toUpperCase(Locale.ENGLISH);\n         if (levels.containsKey(levelName)) {\n             return levels.get(levelName);",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-api/src/main/java/org/apache/logging/log4j/Level.java",
                "sha": "b20a5ffa145b37ee82d5cbcacfdd46f72064c997",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RolloverDescriptionImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RolloverDescriptionImpl.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "deletions": 3,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RolloverDescriptionImpl.java",
                "patch": "@@ -16,6 +16,8 @@\n  */\n package org.apache.logging.log4j.core.appender.rolling;\n \n+import java.util.Objects;\n+\n import org.apache.logging.log4j.core.appender.rolling.action.Action;\n \n /**\n@@ -55,9 +57,7 @@\n      */\n     public RolloverDescriptionImpl(final String activeFileName, final boolean append, final Action synchronous,\n                                    final Action asynchronous) {\n-        if (activeFileName == null) {\n-            throw new NullPointerException(\"activeFileName\");\n-        }\n+        Objects.requireNonNull(activeFileName, \"activeFileName\");\n \n         this.append = append;\n         this.activeFileName = activeFileName;",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RolloverDescriptionImpl.java",
                "sha": "8b1c848ff61cf6b1801e398d8dc7e893e51853a7",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/Bzip2CompressAction.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/Bzip2CompressAction.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "deletions": 7,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/Bzip2CompressAction.java",
                "patch": "@@ -21,6 +21,7 @@\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.util.Objects;\n \n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;\n \n@@ -55,13 +56,8 @@\n      *            to be thrown or affect return value.\n      */\n     public Bzip2CompressAction(final File source, final File destination, final boolean deleteSource) {\n-        if (source == null) {\n-            throw new NullPointerException(\"source\");\n-        }\n-\n-        if (destination == null) {\n-            throw new NullPointerException(\"destination\");\n-        }\n+        Objects.requireNonNull(source, \"source\");\n+        Objects.requireNonNull(destination, \"destination\");\n \n         this.source = source;\n         this.destination = destination;",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/Bzip2CompressAction.java",
                "sha": "e3f2b27a0611dbdf58509c5b328282fa81830787",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/GzCompressAction.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/GzCompressAction.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "deletions": 7,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/GzCompressAction.java",
                "patch": "@@ -21,6 +21,7 @@\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.util.Objects;\n import java.util.zip.GZIPOutputStream;\n \n /**\n@@ -54,13 +55,8 @@\n      *                     does not cause an exception to be thrown or affect return value.\n      */\n     public GzCompressAction(final File source, final File destination, final boolean deleteSource) {\n-        if (source == null) {\n-            throw new NullPointerException(\"source\");\n-        }\n-\n-        if (destination == null) {\n-            throw new NullPointerException(\"destination\");\n-        }\n+        Objects.requireNonNull(source, \"source\");\n+        Objects.requireNonNull(destination, \"destination\");\n \n         this.source = source;\n         this.destination = destination;",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/GzCompressAction.java",
                "sha": "61fb9872f3d9dd213ea7c32b601cff27b482c8a1",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ZipCompressAction.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ZipCompressAction.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "deletions": 7,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ZipCompressAction.java",
                "patch": "@@ -20,6 +20,7 @@\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.util.Objects;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipOutputStream;\n \n@@ -61,13 +62,8 @@\n      * @param level TODO\n      */\n     public ZipCompressAction(final File source, final File destination, final boolean deleteSource, final int level) {\n-        if (source == null) {\n-            throw new NullPointerException(\"source\");\n-        }\n-\n-        if (destination == null) {\n-            throw new NullPointerException(\"destination\");\n-        }\n+        Objects.requireNonNull(source, \"source\");\n+        Objects.requireNonNull(destination, \"destination\");\n \n         this.source = source;\n         this.destination = destination;",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ZipCompressAction.java",
                "sha": "5a61270954bfa3f5de9f9eda4d4e1c8e58065d5b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "deletions": 3,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java",
                "patch": "@@ -39,6 +39,7 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n \n /**\n@@ -121,9 +122,7 @@ private PluginElementVisitor(final Elements elements) {\n \n         @Override\n         public PluginEntry visitType(final TypeElement e, final Plugin plugin) {\n-            if (plugin == null) {\n-                throw new NullPointerException(\"Plugin annotation is null.\");\n-            }\n+            Objects.requireNonNull(plugin, \"Plugin annotation is null.\");\n             final PluginEntry entry = new PluginEntry();\n             entry.setKey(plugin.name().toLowerCase());\n             entry.setClassName(elements.getBinaryName(e).toString());",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java",
                "sha": "ff4e25bb51970a9eb21c1b262c355fc0214d447b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "deletions": 3,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Objects;\n \n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.Marker;\n@@ -72,9 +73,7 @@ public static DynamicThresholdFilter createFilter(\n     private DynamicThresholdFilter(final String key, final Map<String, Level> pairs, final Level defaultLevel,\n                                    final Result onMatch, final Result onMismatch) {\n         super(onMatch, onMismatch);\n-        if (key == null) {\n-            throw new NullPointerException(\"key cannot be null\");\n-        }\n+        Objects.requireNonNull(key, \"key cannot be null\");\n         this.key = key;\n         this.levelMap = pairs;\n         this.defaultThreshold = defaultLevel;",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java",
                "sha": "03edbdc33938cae44e1333df2ca3751b9e7fd258",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/MapFilter.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/MapFilter.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "deletions": 3,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/filter/MapFilter.java",
                "patch": "@@ -20,6 +20,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n \n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.Marker;\n@@ -50,9 +51,7 @@\n     protected MapFilter(final Map<String, List<String>> map, final boolean oper, final Result onMatch,\n                         final Result onMismatch) {\n         super(onMatch, onMismatch);\n-        if (map == null) {\n-            throw new NullPointerException(\"key cannot be null\");\n-        }\n+        Objects.requireNonNull(map, \"map cannot be null\");\n         this.isAnd = oper;\n         this.map = map;\n     }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/MapFilter.java",
                "sha": "89ecfe614fa92e6c86972c55432cb3bcc11f1f58",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "deletions": 3,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java",
                "patch": "@@ -23,6 +23,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n \n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.Marker;\n@@ -435,9 +436,7 @@ public static boolean canDeserialize(final Serializable event) {\n     }\n \n     public static Log4jLogEvent deserialize(final Serializable event) {\n-        if (event == null) {\n-            throw new NullPointerException(\"Event cannot be null\");\n-        }\n+        Objects.requireNonNull(event, \"Event cannot be null\");\n         if (event instanceof LogEventProxy) {\n             final LogEventProxy proxy = (LogEventProxy) event;\n             final Log4jLogEvent result = new Log4jLogEvent(proxy.loggerName, proxy.marker,",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java",
                "sha": "e57aa2eb1fab394cd2bcced4bb4a779391e6a7d0",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "deletions": 3,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java",
                "patch": "@@ -30,6 +30,7 @@\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n \n /**\n  * Most of the work of the {@link org.apache.logging.log4j.core.layout.PatternLayout} class is delegated to the\n@@ -303,9 +304,7 @@ private static int extractOptions(final String pattern, final int start, final L\n     public void parse(final String pattern, final List<PatternConverter> patternConverters,\n             final List<FormattingInfo> formattingInfos, final boolean noConsoleNoAnsi,\n             final boolean convertBackslashes) {\n-        if (pattern == null) {\n-            throw new NullPointerException(\"pattern\");\n-        }\n+        Objects.requireNonNull(pattern, \"pattern\");\n \n         final StringBuilder currentLiteral = new StringBuilder(BUF_SIZE);\n ",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java",
                "sha": "28d4180502e7eed9cb9d4828fd45c91744144200",
                "status": "modified"
            }
        ],
        "message": "Replace if-null-test-then-throw-NPE pattern with Java 7's\nObjects.requireNonNull() API.",
        "parent": "https://github.com/apache/logging-log4j2/commit/0de636c139c367dedeccd8e7acf9a41511f22a04",
        "repo": "logging-log4j2",
        "unit_tests": [
            "PatternParserTest.java"
        ]
    },
    "logging-log4j2_7e83dfb": {
        "bug_id": "logging-log4j2_7e83dfb",
        "commit": "https://github.com/apache/logging-log4j2/commit/7e83dfb0c26bcbb2dcd1677f90e36f6ecc4f8c0c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/7e83dfb0c26bcbb2dcd1677f90e36f6ecc4f8c0c/log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/EnvironmentPasswordProvider.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/EnvironmentPasswordProvider.java?ref=7e83dfb0c26bcbb2dcd1677f90e36f6ecc4f8c0c",
                "deletions": 1,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/EnvironmentPasswordProvider.java",
                "patch": "@@ -50,6 +50,6 @@ public EnvironmentPasswordProvider(final String passwordEnvironmentVariable) {\n     @Override\n     public char[] getPassword() {\n         String password = System.getenv(passwordEnvironmentVariable);\n-        return password.toCharArray();\n+        return password == null ? null : password.toCharArray();\n     }\n }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/7e83dfb0c26bcbb2dcd1677f90e36f6ecc4f8c0c/log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/EnvironmentPasswordProvider.java",
                "sha": "d60f82cf2c5fe60e340415fb87ef51a53b7a49c0",
                "status": "modified"
            }
        ],
        "message": "LOG4J2-2054 prevent NPE when environment variable is not defined, allowing for null passwords",
        "parent": "https://github.com/apache/logging-log4j2/commit/cbbc529cc95de81834ece0bbf22c4f9d976ce327",
        "repo": "logging-log4j2",
        "unit_tests": [
            "EnvironmentPasswordProviderTest.java"
        ]
    },
    "logging-log4j2_9b8a17f": {
        "bug_id": "logging-log4j2_9b8a17f",
        "commit": "https://github.com/apache/logging-log4j2/commit/9b8a17f4c4d9e2f157412fc2f2ea773064b77c8e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/9b8a17f4c4d9e2f157412fc2f2ea773064b77c8e/log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java?ref=9b8a17f4c4d9e2f157412fc2f2ea773064b77c8e",
                "deletions": 1,
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java",
                "patch": "@@ -434,7 +434,7 @@ static ResourceBundle getCharsetsResourceBundle() {\n      * @return true if system properties tell us we are running on Windows.\n      */\n     public boolean isOsWindows() {\n-        return getStringProperty(\"os.name\").startsWith(\"Windows\");\n+        return getStringProperty(\"os.name\", \"\").startsWith(\"Windows\");\n     }\n \n }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/9b8a17f4c4d9e2f157412fc2f2ea773064b77c8e/log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java",
                "sha": "f5e1ecb56100a3359690429b23ffa151e3792a8e",
                "status": "modified"
            }
        ],
        "message": "Prevent potential NPE when the os.name property cannot be accessed",
        "parent": "https://github.com/apache/logging-log4j2/commit/31f68af86c503862230514d67c18a7a6616312c7",
        "repo": "logging-log4j2",
        "unit_tests": [
            "PropertiesUtilTest.java"
        ]
    },
    "logging-log4j2_a4aab92": {
        "bug_id": "logging-log4j2_a4aab92",
        "commit": "https://github.com/apache/logging-log4j2/commit/a4aab92d9fc64eccfbcff8c69e4759976d57078d",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a4aab92d9fc64eccfbcff8c69e4759976d57078d/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java?ref=a4aab92d9fc64eccfbcff8c69e4759976d57078d",
                "deletions": 4,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "patch": "@@ -224,7 +224,7 @@ private void formatElements(final StringBuilder sb, final int commonCount, final\n             final ExtendedStackTraceElement[] extStackTrace, final List<String> ignorePackages) {\n         if (ignorePackages == null || ignorePackages.isEmpty()) {\n             for (int i = 0; i < extStackTrace.length; ++i) {\n-                this.formatEntry(causedTrace[i], extStackTrace[i], sb);\n+                this.formatEntry(extStackTrace[i], sb);\n             }\n         } else {\n             int count = 0;\n@@ -238,7 +238,7 @@ private void formatElements(final StringBuilder sb, final int commonCount, final\n                         }\n                         count = 0;\n                     }\n-                    this.formatEntry(causedTrace[i], extStackTrace[i], sb);\n+                    this.formatEntry(extStackTrace[i], sb);\n                 } else {\n                     ++count;\n                 }\n@@ -256,8 +256,7 @@ private void formatElements(final StringBuilder sb, final int commonCount, final\n         }\n     }\n \n-    private void formatEntry(final StackTraceElement element, final ExtendedStackTraceElement extStackTraceElement,\n-            final StringBuilder sb) {\n+    private void formatEntry(final ExtendedStackTraceElement extStackTraceElement, final StringBuilder sb) {\n         sb.append(\"\\tat \");\n         sb.append(extStackTraceElement);\n         sb.append('\\n');",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a4aab92d9fc64eccfbcff8c69e4759976d57078d/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "sha": "2320ad7dbcf6be9afeadb49964035d85d36bd77a",
                "status": "modified"
            }
        ],
        "message": "[LOG4J2-799] Log4j 2 throws ArrayIndexOutOfBoundsException. The private\nmethod ThrowableProxy.formatEntry(StackTraceElement,\nExtendedStackTraceElement, StringBuilder) is now\nformatEntry(ExtendedStackTraceElement, StringBuilder) because the\nStackTraceElement was not used. Also, it is possible that calling this\nmethod could cause an NPE while a call site tried to address a null\nStackTraceElement from\nThrowableProxy.getExtendedStackTrace(ThrowableProxy.java:232). This is\nwhat seems to happen in the stack strace for [LOG4J2-799] which matches\nup with 2.0-rc1.",
        "parent": "https://github.com/apache/logging-log4j2/commit/443779ad005c14f0fd5b9f2b47f318618bfe96fd",
        "repo": "logging-log4j2",
        "unit_tests": [
            "ThrowableProxyTest.java"
        ]
    },
    "logging-log4j2_ad23fd9": {
        "bug_id": "logging-log4j2_ad23fd9",
        "commit": "https://github.com/apache/logging-log4j2/commit/ad23fd9b7b20d3da32fe24f59c58c59e827f153f",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/ad23fd9b7b20d3da32fe24f59c58c59e827f153f/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java?ref=ad23fd9b7b20d3da32fe24f59c58c59e827f153f",
                "deletions": 12,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java",
                "patch": "@@ -139,24 +139,22 @@ private PatternLayout(final Configuration config, final RegexReplacement replace\n         }\n     }\n \n-    @Override\n-    public byte[] getHeader() {\n-        byte [] myHeader = super.getHeader();\n-        if (myHeader != null) {\n+    private byte[] strSubstitutorReplace(final byte... b) {\n+        if (b != null && config != null) {\n             final Charset cs = getCharset();\n-            return config.getStrSubstitutor().replace(new String(myHeader, cs)).getBytes(cs);\n+            return config.getStrSubstitutor().replace(new String(b, cs)).getBytes(cs);\n         }\n-        return myHeader;\n+        return b;\n+    }\n+\n+    @Override\n+    public byte[] getHeader() {\n+        return strSubstitutorReplace(super.getHeader());\n     }\n \n     @Override\n     public byte[] getFooter() {\n-        byte [] myFooter = super.getFooter();\n-        if (myFooter != null) {\n-            final Charset cs = getCharset();\n-            return config.getStrSubstitutor().replace(new String(myFooter, cs)).getBytes(cs);\n-        }\n-        return myFooter;\n+        return strSubstitutorReplace(super.getFooter());\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/ad23fd9b7b20d3da32fe24f59c58c59e827f153f/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java",
                "sha": "cdd5fe2d81a00ccb158a4b3f1b42c77b5e7687a7",
                "status": "modified"
            }
        ],
        "message": "Prevent NPE where config may be null but header/footer are not.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1597669 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/e40bdc830177273f531e78dbf12637e6c5c7307f",
        "repo": "logging-log4j2",
        "unit_tests": [
            "PatternLayoutTest.java"
        ]
    },
    "logging-log4j2_c9286d7": {
        "bug_id": "logging-log4j2_c9286d7",
        "commit": "https://github.com/apache/logging-log4j2/commit/c9286d7118e4bd371fc5ee513fc869bd8fcf1f51",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/c9286d7118e4bd371fc5ee513fc869bd8fcf1f51/log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedMessage.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedMessage.java?ref=c9286d7118e4bd371fc5ee513fc869bd8fcf1f51",
                "deletions": 1,
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedMessage.java",
                "patch": "@@ -206,7 +206,8 @@ public void formatTo(final StringBuilder buffer) {\n         if (formattedMessage != null) {\n             buffer.append(formattedMessage);\n         } else {\n-            ParameterFormatter.formatMessage(buffer, messagePattern, argArray, argArray.length);\n+            ParameterFormatter.formatMessage(buffer, messagePattern, argArray,\n+                    argArray == null ? 0 : argArray.length);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/c9286d7118e4bd371fc5ee513fc869bd8fcf1f51/log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedMessage.java",
                "sha": "ab6a5bc46ee701fffaeb4b7f83c83233b3553dfa",
                "status": "modified"
            }
        ],
        "message": "fix potential NPE",
        "parent": "https://github.com/apache/logging-log4j2/commit/fbcf07a5b625ea63997ed96819019f45487cfc5a",
        "repo": "logging-log4j2",
        "unit_tests": [
            "ParameterizedMessageTest.java"
        ]
    },
    "logging-log4j2_cd4de56": {
        "bug_id": "logging-log4j2_cd4de56",
        "commit": "https://github.com/apache/logging-log4j2/commit/cd4de56867bf89c3e6273406dcc7a3bb3e3a54e8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/cd4de56867bf89c3e6273406dcc7a3bb3e3a54e8/log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java?ref=cd4de56867bf89c3e6273406dcc7a3bb3e3a54e8",
                "deletions": 1,
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java",
                "patch": "@@ -94,7 +94,7 @@\n                             factories.put(provider.getPriority(), factoryClass.newInstance());\n                         } catch (final Exception e) {\n                             LOGGER.error(\"Unable to create class {} specified in {}\", factoryClass.getName(), provider\n-                                    .getUrl().toString(), e);\n+                                    .getUrl(), e);\n                         }\n                     }\n                 }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/cd4de56867bf89c3e6273406dcc7a3bb3e3a54e8/log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java",
                "sha": "4e645f6f9e934e1791eb70034e13610eff55503a",
                "status": "modified"
            }
        ],
        "message": "Fix NPE: [INFO] Running org.apache.logging.log4j.core.Log4j1222Test\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed:\n0.002 s - in org.apache.logging.log4j.core.Log4j1222Test\nERROR StatusLogger Cannot start ShutdownCallbackRegistry, already\nshutting down.\nException in thread \"Thread-0\" java.lang.ExceptionInInitializerError\n        at\norg.apache.logging.log4j.core.Log4j1222Test$ShutdownHook$Holder.<clinit>(Log4j1222Test.java:42)\n        at\norg.apache.logging.log4j.core.Log4j1222Test$ShutdownHook.trigger(Log4j1222Test.java:53)\n        at\norg.apache.logging.log4j.core.Log4j1222Test$ShutdownHook.run(Log4j1222Test.java:49)\nCaused by: java.lang.NullPointerException\n        at\norg.apache.logging.log4j.LogManager.<clinit>(LogManager.java:97)\n        ... 3 more\n[INFO] Running org.apache.logging.log4j.core.LogEventFactoryTest",
        "parent": "https://github.com/apache/logging-log4j2/commit/b1356fa16e8ae19eba8bcd117212d489f041f5a7",
        "repo": "logging-log4j2",
        "unit_tests": [
            "LogManagerTest.java"
        ]
    },
    "logging-log4j2_e08664e": {
        "bug_id": "logging-log4j2_e08664e",
        "commit": "https://github.com/apache/logging-log4j2/commit/e08664e77c5332fd1249ab8a5b4b297689138668",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/e08664e77c5332fd1249ab8a5b4b297689138668/log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java?ref=e08664e77c5332fd1249ab8a5b4b297689138668",
                "deletions": 1,
                "filename": "log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java",
                "patch": "@@ -29,6 +29,7 @@\n import org.apache.logging.log4j.core.config.plugins.PluginElement;\n import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n import org.apache.logging.log4j.core.layout.Rfc5424Layout;\n+import org.apache.logging.log4j.core.net.Facility;\n import org.apache.logging.log4j.core.util.Booleans;\n import org.apache.logging.log4j.core.util.Integers;\n \n@@ -220,7 +221,7 @@ public static FlumeAppender createAppender(@PluginElement(\"Agents\") Agent[] agen\n \n         if (layout == null) {\n             final int enterpriseNumber = Integer.parseInt(Rfc5424Layout.DEFAULT_ENTERPRISE_NUMBER);\n-            layout = Rfc5424Layout.createLayout(null, null, enterpriseNumber, true, Rfc5424Layout.DEFAULT_MDCID,\n+            layout = Rfc5424Layout.createLayout(Facility.LOCAL0, null, enterpriseNumber, true, Rfc5424Layout.DEFAULT_MDCID,\n                     mdcPrefix, eventPrefix, false, null, null, null, excludes, includes, required, null, false, null,\n                     null);\n         }",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/e08664e77c5332fd1249ab8a5b4b297689138668/log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java",
                "sha": "d7fd784b7c2704a38f734eed987d159547ed38ed",
                "status": "modified"
            }
        ],
        "message": "Specify default Facility level in FlumeAppender.\n\n  - Due to my recent changes involving how plugins are constructed, \n  this value had to be manually specified. Without the value, it \n  would cause an NPE later on.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1597481 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/4d6bf6e3be504f2b8341b991f9484e29594ac2ac",
        "repo": "logging-log4j2",
        "unit_tests": [
            "FlumeAppenderTest.java"
        ]
    },
    "logging-log4j2_ecc35f9": {
        "bug_id": "logging-log4j2_ecc35f9",
        "commit": "https://github.com/apache/logging-log4j2/commit/ecc35f922b0ce47ea3d914021be108cb17817b47",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/ecc35f922b0ce47ea3d914021be108cb17817b47/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java?ref=ecc35f922b0ce47ea3d914021be108cb17817b47",
                "deletions": 1,
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java",
                "patch": "@@ -59,7 +59,7 @@\n \n     private static final ThreadLocal<StringBuilder> threadLocal = new ThreadLocal<>();\n \n-    private final TextEncoderHelper textEncoderHelper;\n+    private TextEncoderHelper textEncoderHelper;\n \n     /**\n      * Returns a {@code StringBuilder} that this Layout implementation can use to write the formatted log event to.\n@@ -148,6 +148,9 @@ protected AbstractStringLayout(final Configuration config, final Charset aCharse\n      * @return a {@code TextEncoderHelper}\n      */\n     protected TextEncoderHelper getCachedTextEncoderHelper() {\n+        if (textEncoderHelper == null) {\n+            textEncoderHelper = new TextEncoderHelper(getCharset());\n+        }\n         return textEncoderHelper;\n     }\n ",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/ecc35f922b0ce47ea3d914021be108cb17817b47/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java",
                "sha": "757e9daa4498eb7a020c3f538e250a54a2296709",
                "status": "modified"
            }
        ],
        "message": "LOG4J2-1291 fix NPE in TextEncoderHelper when system property \"log4j2.enable.direct.encoders\" is not set",
        "parent": "https://github.com/apache/logging-log4j2/commit/34809a2767474ef10ae55119608b60ae5b3ed552",
        "repo": "logging-log4j2",
        "unit_tests": [
            "AbstractStringLayoutTest.java"
        ]
    },
    "logging-log4j2_f23fd6e": {
        "bug_id": "logging-log4j2_f23fd6e",
        "commit": "https://github.com/apache/logging-log4j2/commit/f23fd6e4bf537fd6adec8ab3a62929cdb05ad389",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/logging-log4j2/blob/f23fd6e4bf537fd6adec8ab3a62929cdb05ad389/log4j-api/src/main/java/org/apache/logging/log4j/util/SortedArrayStringMap.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/util/SortedArrayStringMap.java?ref=f23fd6e4bf537fd6adec8ab3a62929cdb05ad389",
                "deletions": 0,
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/util/SortedArrayStringMap.java",
                "patch": "@@ -498,6 +498,9 @@ private void writeObject(final java.io.ObjectOutputStream s) throws IOException\n     }\n \n     private static byte[] marshall(Object obj) throws IOException {\n+        if (obj == null) {\n+            return null;\n+        }\n         ByteArrayOutputStream bout = new ByteArrayOutputStream();\n         try (ObjectOutputStream oos = new ObjectOutputStream(bout)) {\n             oos.writeObject(obj);",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/f23fd6e4bf537fd6adec8ab3a62929cdb05ad389/log4j-api/src/main/java/org/apache/logging/log4j/util/SortedArrayStringMap.java",
                "sha": "ac72f39ea49a39671d82074098034dc0554ca374",
                "status": "modified"
            }
        ],
        "message": "LOG4J2-1926 prevent NPE when serializing null values",
        "parent": "https://github.com/apache/logging-log4j2/commit/194a398d8f70d6680f8154168011171f0a12113b",
        "repo": "logging-log4j2",
        "unit_tests": [
            "SortedArrayStringMapTest.java"
        ]
    }
}