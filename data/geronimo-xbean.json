{
    "geronimo-xbean_5a7ee53": {
        "bug_id": "geronimo-xbean_5a7ee53",
        "commit": "https://github.com/apache/geronimo-xbean/commit/5a7ee535445d001d4b72778e37314d46cba6bf6e",
        "file": [
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/geronimo-xbean/blob/5a7ee535445d001d4b72778e37314d46cba6bf6e/xbean-finder/src/main/java/org/apache/xbean/finder/ClassFinder.java",
                "changes": 69,
                "contents_url": "https://api.github.com/repos/apache/geronimo-xbean/contents/xbean-finder/src/main/java/org/apache/xbean/finder/ClassFinder.java?ref=5a7ee535445d001d4b72778e37314d46cba6bf6e",
                "deletions": 33,
                "filename": "xbean-finder/src/main/java/org/apache/xbean/finder/ClassFinder.java",
                "patch": "@@ -59,11 +59,11 @@\n  * @version $Rev$ $Date$\n  */\n public class ClassFinder {\n-    private final Map<String, List<Info>> annotated = new HashMap();\n-    private final List<ClassInfo> classInfos = new ArrayList();\n+    private final Map<String, List<Info>> annotated = new HashMap<String, List<Info>>();\n+    private final List<ClassInfo> classInfos = new ArrayList<ClassInfo>();\n \n     private final ClassLoader classLoader;\n-    private final List<String> classesNotLoaded = new ArrayList();\n+    private final List<String> classesNotLoaded = new ArrayList<String>();\n \n     /**\n      * Creates a ClassFinder that will search the urls in the specified classloader\n@@ -77,8 +77,8 @@\n      *\n      *    new ClassFinder(classLoader, classLoader.getParent().getParent());\n      *\n-     * @param classLoader\n-     * @throws Exception\n+     * @param classLoader source of classes to scan\n+     * @throws Exception if something goes wrong\n      */\n     public ClassFinder(ClassLoader classLoader) throws Exception {\n         this(classLoader, true);\n@@ -87,9 +87,9 @@ public ClassFinder(ClassLoader classLoader) throws Exception {\n     /**\n      * Creates a ClassFinder that will search the urls in the specified classloader.\n      *\n-     * @param classLoader\n-     * @param excludeParent\n-     * @throws Exception\n+     * @param classLoader source of classes to scan\n+     * @param excludeParent Allegedly excludes classes from parent classloader, whatever that might mean\n+     * @throws Exception if something goes wrong.\n      */\n     public ClassFinder(ClassLoader classLoader, boolean excludeParent) throws Exception {\n         this(classLoader, getUrls(classLoader, excludeParent));\n@@ -99,22 +99,22 @@ public ClassFinder(ClassLoader classLoader, boolean excludeParent) throws Except\n      * Creates a ClassFinder that will search the urls in the specified classloader excluding\n      * the urls in the 'exclude' classloader.\n      *\n-     * @param classLoader\n-     * @param exclude\n-     * @throws Exception\n+     * @param classLoader source of classes to scan\n+     * @param exclude source of classes to exclude from scanning\n+     * @throws Exception if something goes wrong\n      */\n     public ClassFinder(ClassLoader classLoader, ClassLoader exclude) throws Exception {\n         this(classLoader, getUrls(classLoader, exclude));\n     }\n \n     public ClassFinder(ClassLoader classLoader, URL url) {\n-        this(classLoader, Arrays.asList(new URL[]{url}));\n+        this(classLoader, Arrays.asList(url));\n     }\n \n     public ClassFinder(ClassLoader classLoader, Collection<URL> urls) {\n         this.classLoader = classLoader;\n \n-        List<String> classNames = new ArrayList();\n+        List<String> classNames = new ArrayList<String>();\n         for (URL location : urls) {\n             try {\n                 if (location.getProtocol().equals(\"jar\")) {\n@@ -146,8 +146,8 @@ public ClassFinder(Class... classes){\n \n     public ClassFinder(List<Class> classes){\n         this.classLoader = null;\n-        List<Info> infos = new ArrayList();\n-        List<Package> packages = new ArrayList();\n+        List<Info> infos = new ArrayList<Info>();\n+        List<Package> packages = new ArrayList<Package>();\n         for (Class clazz : classes) {\n \n             Package aPackage = clazz.getPackage();\n@@ -191,10 +191,11 @@ public boolean isAnnotationPresent(Class<? extends Annotation> annotation) {\n      * The list will only contain entries of classes whose byte code matched the requirements\n      * of last invoked find* method, but were unable to be loaded and included in the results.\n      * <p/>\n-     * The list returned is unmodifiable and the results of this method will change\n-     * after each invocation of a findAnnotated* method.\n+     * The list returned is unmodifiable.  Once obtained, the returned list will be a live view of the\n+     * results from the last findAnnotated* method call.\n      * <p/>\n      * This method is not thread safe.\n+     * @return an unmodifiable live view of classes that could not be loaded in previous findAnnotated* call.\n      */\n     public List<String> getClassesNotLoaded() {\n         return Collections.unmodifiableList(classesNotLoaded);\n@@ -331,7 +332,7 @@ public boolean isAnnotationPresent(Class<? extends Annotation> annotation) {\n \n     public List<Class> findClassesInPackage(String packageName, boolean recursive) {\n         classesNotLoaded.clear();\n-        List<Class> classes = new ArrayList();\n+        List<Class> classes = new ArrayList<Class>();\n         for (ClassInfo classInfo : classInfos) {\n             try {\n                 if (recursive && classInfo.getPackageName().startsWith(packageName)){\n@@ -364,7 +365,7 @@ public boolean isAnnotationPresent(Class<? extends Annotation> annotation) {\n     }\n \n     private static Map<String, URL> toMap(Enumeration<URL> enumeration) {\n-        Map<String, URL> urls = new HashMap();\n+        Map<String, URL> urls = new HashMap<String, URL>();\n         while (enumeration.hasMoreElements()) {\n             URL url = enumeration.nextElement();\n             urls.put(url.toExternalForm(), url);\n@@ -373,7 +374,7 @@ public boolean isAnnotationPresent(Class<? extends Annotation> annotation) {\n     }\n \n     private List<String> file(URL location) {\n-        List<String> classNames = new ArrayList();\n+        List<String> classNames = new ArrayList<String>();\n         File dir = new File(location.getPath());\n         if (dir.getName().equals(\"META-INF\")) {\n             dir = dir.getParentFile(); // Scrape \"META-INF\" off\n@@ -413,7 +414,7 @@ private void scanDir(File dir, List<String> classNames, String packageName) {\n     }\n \n     private List<String> jar(JarInputStream jarStream) throws IOException {\n-        List<String> classNames = new ArrayList();\n+        List<String> classNames = new ArrayList<String>();\n \n         JarEntry entry;\n         while ((entry = jarStream.getNextJarEntry()) != null) {\n@@ -430,7 +431,7 @@ private void scanDir(File dir, List<String> classNames, String packageName) {\n     }\n \n     public class Annotatable {\n-        private final List<AnnotationInfo> annotations = new ArrayList();\n+        private final List<AnnotationInfo> annotations = new ArrayList<AnnotationInfo>();\n \n         public Annotatable(AnnotatedElement element) {\n             for (Annotation annotation : element.getAnnotations()) {\n@@ -482,11 +483,11 @@ public Package get() throws ClassNotFoundException {\n \n     public class ClassInfo extends Annotatable implements Info {\n         private final String name;\n-        private final List<MethodInfo> methods = new ArrayList();\n-        private final List<MethodInfo> constructors = new ArrayList();\n+        private final List<MethodInfo> methods = new ArrayList<MethodInfo>();\n+        private final List<MethodInfo> constructors = new ArrayList<MethodInfo>();\n         private final String superType;\n-        private final List<String> interfaces = new ArrayList();\n-        private final List<FieldInfo> fields = new ArrayList();\n+        private final List<String> interfaces = new ArrayList<String>();\n+        private final List<FieldInfo> fields = new ArrayList<FieldInfo>();\n         private Class<?> clazz;\n         private ClassNotFoundException notFound;\n \n@@ -553,7 +554,7 @@ public String toString() {\n         private final ClassInfo declaringClass;\n         private final String returnType;\n         private final String name;\n-        private final List<List<AnnotationInfo>> parameterAnnotations = new ArrayList();\n+        private final List<List<AnnotationInfo>> parameterAnnotations = new ArrayList<List<AnnotationInfo>>();\n \n         public MethodInfo(ClassInfo info, Constructor constructor){\n             super(constructor);\n@@ -663,14 +664,14 @@ public String getName() {\n         }\n \n         public String toString() {\n-            return name.toString();\n+            return name;\n         }\n     }\n \n     private List<Info> getAnnotationInfos(String name) {\n         List<Info> infos = annotated.get(name);\n         if (infos == null) {\n-            infos = new ArrayList();\n+            infos = new ArrayList<Info>();\n             annotated.put(name, infos);\n         }\n         return infos;\n@@ -680,16 +681,18 @@ private void readClassDef(String className) {\n         if (!className.endsWith(\".class\")) {\n             className = className.replace('.', '/') + \".class\";\n         }\n-        ClassReader classReader = null;\n         try {\n             URL resource = classLoader.getResource(className);\n-            classReader = new ClassReader(resource.openStream());\n+            if (resource != null) {\n+                ClassReader classReader = new ClassReader(resource.openStream());\n+                classReader.accept(new InfoBuildingVisitor(), true);\n+            } else {\n+                new Exception(\"Could not load \" + className).printStackTrace();\n+            }\n         } catch (IOException e) {\n             e.printStackTrace();\n         }\n \n-//        classReader.accept(new ASMifierClassVisitor(new PrintWriter(System.out)), true);\n-        classReader.accept(new InfoBuildingVisitor(), true);\n     }\n \n     public class InfoBuildingVisitor extends EmptyVisitor {",
                "raw_url": "https://github.com/apache/geronimo-xbean/raw/5a7ee535445d001d4b72778e37314d46cba6bf6e/xbean-finder/src/main/java/org/apache/xbean/finder/ClassFinder.java",
                "sha": "5e123695ef6189a480b9328aeb6d1ec1b996abc0",
                "status": "modified"
            }
        ],
        "message": "XBEAN-76 fix NPE, eliminate intellij warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/xbean/trunk@511967 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo-xbean/commit/236c6e7b88f4b5b337d63e7114815c42d40ab6fe",
        "repo": "geronimo-xbean",
        "unit_tests": [
            "ClassFinderTest.java"
        ]
    }
}