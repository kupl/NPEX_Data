[
    {
        "commit": "https://github.com/apache/creadur-rat/commit/0e3200d9fd011f78e73a17e7635ede8c141e93c4",
        "file": [
            {
                "patch": "@@ -52,8 +52,10 @@\n import java.io.PrintWriter;\n import java.io.StringWriter;\n import java.io.Writer;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n import java.util.ResourceBundle;\n@@ -111,7 +113,15 @@ private File getSkinArtifactFile() throws MojoFailureException, MojoExecutionExc\n                 factory.createDependencyArtifact( skin.getGroupId(), skin.getArtifactId(), versionSpec, \"jar\", null,\n                                                   null );\n \n-            resolver.resolve( artifact, getProject().getRemoteArtifactRepositories(), localRepository );\n+            // FIXME Try to avoid NPE / found during 0.11-build checks\n+            // API is so old/without type information\n+\t\t\t@SuppressWarnings(\"unchecked\")\n+\t\t\tList<ArtifactRepository> remoteArtifactRepositories = getProject().getRemoteArtifactRepositories();\n+            if(remoteArtifactRepositories == null) {\n+            \tremoteArtifactRepositories = Collections.emptyList();\n+            }\n+            \n+\t\t\tresolver.resolve( artifact, remoteArtifactRepositories, localRepository );\n         }\n         catch ( InvalidVersionSpecificationException e )\n         {",
                "additions": 11,
                "raw_url": "https://github.com/apache/creadur-rat/raw/0e3200d9fd011f78e73a17e7635ede8c141e93c4/apache-rat-plugin/src/main/java/org/apache/rat/mp/RatReportMojo.java",
                "status": "modified",
                "changes": 12,
                "deletions": 1,
                "sha": "d41d5a92574f20a16d7ce49e27bd1c7230dc1d53",
                "blob_url": "https://github.com/apache/creadur-rat/blob/0e3200d9fd011f78e73a17e7635ede8c141e93c4/apache-rat-plugin/src/main/java/org/apache/rat/mp/RatReportMojo.java",
                "filename": "apache-rat-plugin/src/main/java/org/apache/rat/mp/RatReportMojo.java",
                "contents_url": "https://api.github.com/repos/apache/creadur-rat/contents/apache-rat-plugin/src/main/java/org/apache/rat/mp/RatReportMojo.java?ref=0e3200d9fd011f78e73a17e7635ede8c141e93c4"
            }
        ],
        "bug_id": "creadur-rat_1",
        "parent": "https://github.com/apache/creadur-rat/commit/041d00bc1b1c22177b1c24a8c4282488585b3158",
        "message": "0.11: NPE-fix\n\nAlways ensuring that a list of repositories is existing in case its null.\nPossibly this is a change in the API induced by dependency updates.\n\nStacktrace was:\nCaused by: java.lang.NullPointerException\n    at org.apache.rat.mp.RatReportMojo.getSkinArtifactFile(RatReportMojo.java:114)\n    at org.apache.rat.mp.RatReportMojo.execute(RatReportMojo.java:204)\n    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/creadur/rat/trunk@1617162 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "creadur-rat"
    },
    {
        "commit": "https://github.com/apache/creadur-rat/commit/3fb58c3bdc63ef99f4f9a2b2e4bf4cc2de82b8c7",
        "file": [
            {
                "patch": "@@ -457,7 +457,7 @@ agnostic home for software distribution comprehension and audit tools.\n           <dependency>\n             <groupId>org.codehaus.mojo</groupId>\n             <artifactId>extra-enforcer-rules</artifactId>\n-            <version>1.0-beta-2</version>\n+            <version>1.0-beta-5</version>\n           </dependency>\n         </dependencies>\n       </plugin>",
                "additions": 1,
                "raw_url": "https://github.com/apache/creadur-rat/raw/3fb58c3bdc63ef99f4f9a2b2e4bf4cc2de82b8c7/pom.xml",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "4b237bcafa2e58bdf8d2a5e0640349a9a42b802e",
                "blob_url": "https://github.com/apache/creadur-rat/blob/3fb58c3bdc63ef99f4f9a2b2e4bf4cc2de82b8c7/pom.xml",
                "filename": "pom.xml",
                "contents_url": "https://api.github.com/repos/apache/creadur-rat/contents/pom.xml?ref=3fb58c3bdc63ef99f4f9a2b2e4bf4cc2de82b8c7"
            }
        ],
        "bug_id": "creadur-rat_2",
        "parent": "https://github.com/apache/creadur-rat/commit/d393860a815d967e76dff540790807a6546c8426",
        "message": "RAT-216: Upgrading maven-enforcer-rules\n\n* Fixes strange NPE when using latest ASF parent pom 18\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/creadur/rat/trunk@1757755 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "creadur-rat"
    },
    {
        "commit": "https://github.com/apache/creadur-rat/commit/d9185ed58370b409bd296bd499d9e321adee593b",
        "file": [
            {
                "patch": "@@ -199,7 +199,7 @@\n     /**\n     * Holds the maven-internal project to allow resolution of artifact properties during mojo runs.\n     */\n-    @Parameter(defaultValue = \"${project}\", required = true, readonly = true)\n+    @Parameter(property = \"project\", required = true, readonly = true)\n     private MavenProject project;\n \n     /**",
                "additions": 1,
                "raw_url": "https://github.com/apache/creadur-rat/raw/d9185ed58370b409bd296bd499d9e321adee593b/apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "a77774bcee6cb320b38f18d75d88a3a613494c60",
                "blob_url": "https://github.com/apache/creadur-rat/blob/d9185ed58370b409bd296bd499d9e321adee593b/apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java",
                "filename": "apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java",
                "contents_url": "https://api.github.com/repos/apache/creadur-rat/contents/apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java?ref=d9185ed58370b409bd296bd499d9e321adee593b"
            }
        ],
        "bug_id": "creadur-rat_3",
        "parent": "https://github.com/apache/creadur-rat/commit/16906525aabd5d4fac11e14491f651887ab4d962",
        "message": "RAT-168:\n\nReverting patch since there is a NPE during rat:rat on 0.11-RC2.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/creadur/rat/trunk@1618753 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "creadur-rat"
    },
    {
        "commit": "https://github.com/apache/creadur-rat/commit/6c9cfabf23e4fda9fd69079adc5eacfe3b25362e",
        "file": [
            {
                "patch": "@@ -34,6 +34,7 @@\n import org.apache.maven.plugin.AbstractMojo;\n import org.apache.maven.plugin.MojoExecutionException;\n import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n import org.apache.maven.plugins.annotations.Parameter;\n import org.apache.maven.project.MavenProject;\n import org.apache.rat.Defaults;\n@@ -199,7 +200,8 @@\n \t/**\n      * \n      */\n-\t@Parameter(name = \"project\", readonly = true)\n+\t//@Parameter(name = \"project\", readonly = true)\n+\t@Component\n \tprivate MavenProject project;\n \n \t/**",
                "additions": 3,
                "raw_url": "https://github.com/apache/creadur-rat/raw/6c9cfabf23e4fda9fd69079adc5eacfe3b25362e/apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "956dae65f614458298c36ce3cd6997bfb0952cd6",
                "blob_url": "https://github.com/apache/creadur-rat/blob/6c9cfabf23e4fda9fd69079adc5eacfe3b25362e/apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java",
                "filename": "apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java",
                "contents_url": "https://api.github.com/repos/apache/creadur-rat/contents/apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java?ref=6c9cfabf23e4fda9fd69079adc5eacfe3b25362e"
            },
            {
                "patch": "@@ -113,15 +113,7 @@ private File getSkinArtifactFile() throws MojoFailureException, MojoExecutionExc\n                 factory.createDependencyArtifact( skin.getGroupId(), skin.getArtifactId(), versionSpec, \"jar\", null,\n                                                   null );\n \n-            // FIXME Try to avoid NPE / found during 0.11-build checks\n-            // API is so old/without type information\n-\t\t\t@SuppressWarnings(\"unchecked\")\n-\t\t\tList<ArtifactRepository> remoteArtifactRepositories = getProject().getRemoteArtifactRepositories();\n-            if(remoteArtifactRepositories == null) {\n-            \tremoteArtifactRepositories = Collections.emptyList();\n-            }\n-            \n-\t\t\tresolver.resolve( artifact, remoteArtifactRepositories, localRepository );\n+\t\t\tresolver.resolve( artifact, getProject().getRemoteArtifactRepositories(), localRepository );\n         }\n         catch ( InvalidVersionSpecificationException e )\n         {",
                "additions": 1,
                "raw_url": "https://github.com/apache/creadur-rat/raw/6c9cfabf23e4fda9fd69079adc5eacfe3b25362e/apache-rat-plugin/src/main/java/org/apache/rat/mp/RatReportMojo.java",
                "status": "modified",
                "changes": 10,
                "deletions": 9,
                "sha": "a5b3fba545c01e5223b3d18c74db38b388e74658",
                "blob_url": "https://github.com/apache/creadur-rat/blob/6c9cfabf23e4fda9fd69079adc5eacfe3b25362e/apache-rat-plugin/src/main/java/org/apache/rat/mp/RatReportMojo.java",
                "filename": "apache-rat-plugin/src/main/java/org/apache/rat/mp/RatReportMojo.java",
                "contents_url": "https://api.github.com/repos/apache/creadur-rat/contents/apache-rat-plugin/src/main/java/org/apache/rat/mp/RatReportMojo.java?ref=6c9cfabf23e4fda9fd69079adc5eacfe3b25362e"
            }
        ],
        "bug_id": "creadur-rat_4",
        "parent": "https://github.com/apache/creadur-rat/commit/0e3200d9fd011f78e73a17e7635ede8c141e93c4",
        "message": "https://issues.apache.org/jira/browse/RAT-168 \nRAT-168 Check CLI usage\n\nTrying to get rid of the NPE by upgrading the way project is injected into our mojos.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/creadur/rat/trunk@1617203 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "creadur-rat"
    },
    {
        "commit": "https://github.com/apache/creadur-rat/commit/224b344768fe1be1e983abd2a67931ef64c15163",
        "file": [
            {
                "patch": "@@ -91,6 +91,7 @@\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-invoker-plugin</artifactId>\n+        <version>${mavenInvokerPluginVersion}</version>\n         <configuration>\n           <projectsDirectory>src/test/invoker</projectsDirectory>\n           <cloneProjectsTo>${project.build.directory}/invoker</cloneProjectsTo>",
                "additions": 1,
                "raw_url": "https://github.com/apache/creadur-rat/raw/224b344768fe1be1e983abd2a67931ef64c15163/apache-rat-plugin/pom.xml",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "caf96fdbb934056125e768ee6b831992f24d03a7",
                "blob_url": "https://github.com/apache/creadur-rat/blob/224b344768fe1be1e983abd2a67931ef64c15163/apache-rat-plugin/pom.xml",
                "filename": "apache-rat-plugin/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/creadur-rat/contents/apache-rat-plugin/pom.xml?ref=224b344768fe1be1e983abd2a67931ef64c15163"
            },
            {
                "patch": "@@ -198,9 +198,9 @@\n \tprivate boolean excludeSubProjects;\n \n \t/**\n-        * Holds the maven-internal project to allow resolution of artifact properties during mojo runs. \n-        */\n-\t@Component\n+    * Holds the maven-internal project to allow resolution of artifact properties during mojo runs. \n+    */\n+\t@Parameter(property = \"project\", required = true, readonly = true)\n \tprivate MavenProject project;\n \n \t/**",
                "additions": 3,
                "raw_url": "https://github.com/apache/creadur-rat/raw/224b344768fe1be1e983abd2a67931ef64c15163/apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "d8eeb4f27f8000d577c8627750f0be73435b5bc6",
                "blob_url": "https://github.com/apache/creadur-rat/blob/224b344768fe1be1e983abd2a67931ef64c15163/apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java",
                "filename": "apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java",
                "contents_url": "https://api.github.com/repos/apache/creadur-rat/contents/apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java?ref=224b344768fe1be1e983abd2a67931ef64c15163"
            },
            {
                "patch": "@@ -17,386 +17,187 @@\n  * limitations under the License.\n  */\n \n+import static org.apache.rat.mp.RatTestHelpers.ensureRatReportIsCorrect;\n+import static org.apache.rat.mp.RatTestHelpers.getSourceDirectory;\n+import static org.apache.rat.mp.RatTestHelpers.newArtifactFactory;\n+import static org.apache.rat.mp.RatTestHelpers.newArtifactRepository;\n+import static org.apache.rat.mp.RatTestHelpers.newArtifactResolver;\n+import static org.apache.rat.mp.RatTestHelpers.newSiteRenderer;\n+\n import java.io.BufferedReader;\n import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n-import java.io.FileReader;\n import java.io.IOException;\n import java.io.InputStreamReader;\n-import java.lang.reflect.InvocationHandler;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Proxy;\n \n-import org.apache.maven.artifact.factory.ArtifactFactory;\n-import org.apache.maven.artifact.factory.DefaultArtifactFactory;\n-import org.apache.maven.artifact.repository.ArtifactRepository;\n-import org.apache.maven.artifact.repository.DefaultArtifactRepository;\n-import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n-import org.apache.maven.artifact.resolver.ArtifactResolver;\n-import org.apache.maven.artifact.resolver.DefaultArtifactResolver;\n-import org.apache.maven.doxia.siterenderer.Renderer;\n import org.apache.maven.model.Build;\n import org.apache.maven.plugin.testing.AbstractMojoTestCase;\n import org.apache.maven.plugin.testing.stubs.MavenProjectStub;\n-import org.apache.maven.settings.Settings;\n-import org.apache.maven.settings.io.xpp3.SettingsXpp3Reader;\n-import org.apache.rat.mp.AbstractRatMojo;\n-import org.apache.rat.mp.RatCheckException;\n-import org.apache.rat.mp.RatCheckMojo;\n-import org.apache.rat.mp.RatReportMojo;\n-import org.codehaus.plexus.util.DirectoryScanner;\n-\n \n /**\n- * Test case for the {@link RatCheckMojo}.\n+ * Test case for the {@link RatCheckMojo} and {@link RatReportMojo}.\n  */\n-public class RatCheckMojoTest extends AbstractMojoTestCase\n-{\n-    /**\n-     * Creates a new instance of {@link Renderer}.\n-     * @return A configured instance of {@link DefaultRenderer}.\n-     * @throws Exception Creating the object failed.\n-     */\n-    private Renderer newSiteRenderer()\n-            throws Exception\n-    {\n-        return (Renderer) container.lookup( Renderer.ROLE, \"default\" );\n-    }\n-\n-    /**\n-     * Creates a new instance of {@link ArtifactFactory}.\n-     * @return A configured instance of {@link DefaultArtifactFactory}.\n-     * @throws Exception Creating the object failed.\n-     */\n-    private ArtifactFactory newArtifactFactory()\n-            throws Exception\n-    {\n-        final InvocationHandler handler = new InvocationHandler(){\n-            public Object invoke( Object pProxy, Method pMethod, Object[] pArgs )\n-                throws Throwable\n-            {\n-                System.out.println(\"Invoking method \" + pMethod);\n-                throw new IllegalStateException( \"Not implemented\" );\n-            }\n-        };\n-        return (ArtifactFactory)\n-            Proxy.newProxyInstance( Thread.currentThread().getContextClassLoader(),\n-                                    new Class[]{ ArtifactFactory.class },\n-                                    handler );\n-    }\n-\n-    /**\n-     * Creates a new instance of {@link ArtifactResolver}.\n-     * @return A configured instance of {@link DefaultArtifactResolver}.\n-     * @throws Exception Creating the object failed.\n-     */\n-    private ArtifactResolver newArtifactResolver()\n-            throws Exception\n-    {\n-        final InvocationHandler handler = new InvocationHandler(){\n-            public Object invoke( Object pProxy, Method pMethod, Object[] pArgs )\n-                throws Throwable\n-            {\n-                System.out.println(\"Invoking method \" + pMethod);\n-                throw new IllegalStateException( \"Not implemented\" );\n-            }\n-        };\n-        return (ArtifactResolver)\n-            Proxy.newProxyInstance( Thread.currentThread().getContextClassLoader(),\n-                                    new Class[]{ ArtifactResolver.class },\n-                                    handler );\n-    }\n-\n-    /**\n-     * Creates an instance of {@link ArtifactRepository}.\n-     * @return A configured instance of {@link DefaultArtifactRepository}.\n-     * @throws Exception Creating the object failed.\n-     */\n-    private ArtifactRepository newArtifactRepository()\n-            throws Exception\n-    {\n-        File m2Dir = new File( System.getProperty( \"user.home\" ), \".m2\" );\n-        File settingsFile = new File( m2Dir, \"settings.xml\" );\n-        String localRepo = null;\n-        if ( settingsFile.exists() )\n-        {\n-            Settings settings = new SettingsXpp3Reader().read( new FileReader( settingsFile ) );\n-            localRepo = settings.getLocalRepository();\n-        }\n-        if ( localRepo == null )\n-        {\n-            localRepo = System.getProperty( \"user.home\" ) + \"/.m2/repository\";\n-        }\n-        ArtifactRepositoryLayout repositoryLayout =\n-            (ArtifactRepositoryLayout) container.lookup(ArtifactRepositoryLayout.ROLE, \"default\" );\n-        return new DefaultArtifactRepository( \"local\", \"file://\" + localRepo, repositoryLayout );\n-    }\n-\n-    /**\n-     * Creates a new instance of {@link RatCheckMojo}.\n-     * @param pDir The directory, where to look for a pom.xml file.\n-     * @return The configured Mojo.\n-     * @throws Exception An error occurred while creating the Mojo.\n-     */\n-    private RatCheckMojo newRatCheckMojo( String pDir )\n-            throws Exception\n-    {\n-        return (RatCheckMojo) newRatMojo( pDir, \"check\", false );\n-    }\n-\n-    /**\n-     * Creates a new instance of {@link AbstractRatMojo}.\n-     * @param pDir The directory, where to look for a pom.xml file.\n-     * @param pGoal The goal, which the Mojo must implement.\n-     * @return The configured Mojo.\n-     * @throws Exception An error occurred while creating the Mojo.\n-     */\n-    private AbstractRatMojo newRatMojo( String pDir, String pGoal, boolean pCreateCopy )\n-            throws Exception\n-    {\n-        final File baseDir = new File( getBasedir() );\n-        final File testBaseDir = getSourceDirectory(pDir, pCreateCopy, baseDir);\n-        File testPom = new File( testBaseDir, \"pom.xml\" );\n-        AbstractRatMojo mojo = (AbstractRatMojo) lookupMojo( pGoal, testPom );\n-        assertNotNull( mojo );\n-        final File buildDirectory = new File( new File( baseDir, \"target/test\" ), pDir );\n-        setVariableValueToObject( mojo, \"basedir\", testBaseDir );\n-        setVariableValueToObject( mojo, \"addDefaultLicenseMatchers\", Boolean.TRUE );\n-        setVariableValueToObject( mojo, \"useDefaultExcludes\", Boolean.TRUE );\n-        setVariableValueToObject( mojo, \"useMavenDefaultExcludes\", Boolean.TRUE );\n-        setVariableValueToObject( mojo, \"useEclipseDefaultExcludes\", Boolean.TRUE );\n-        setVariableValueToObject( mojo, \"addLicenseHeaders\", \"false\" );\n-        final Build build = new Build();\n-        build.setDirectory( buildDirectory.getPath() );\n-        final MavenProjectStub project = new MavenProjectStub(){\n-            @Override\n-            public Build getBuild()\n-            {\n-                return build;\n-            }\n-        };\n-        setVariableValueToObject( mojo, \"project\", project );\n-        assertNotNull(\"Problem in test setup - you are missing a project in your mojo.\", project);\n-        assertNotNull(\"The mojo is missing its MavenProject, which will result in an NPE during rat runs.\", mojo.getProject());\n-        assertNotNull(\"No artifactRepos found, which will result in an NPE during rat runs.\", project.getRemoteArtifactRepositories());\n-        if (mojo instanceof RatReportMojo)\n-        {\n-            setVariableValueToObject( mojo, \"localRepository\", newArtifactRepository() );\n-            setVariableValueToObject( mojo, \"resolver\", newArtifactResolver() );\n-            setVariableValueToObject( mojo, \"factory\", newArtifactFactory() );\n-            setVariableValueToObject( mojo, \"siteRenderer\", newSiteRenderer() );\n-        }\n-        else if ( mojo instanceof RatCheckMojo )\n-        {\n-            final File ratTxtFile = new File( buildDirectory, \"rat.txt\" );\n-            setVariableValueToObject( mojo, \"reportFile\", ratTxtFile );\n-        }\n-        return mojo;\n-    }\n-\n-    private File getSourceDirectory(String pDir, boolean pCreateCopy,\n-            final File baseDir) throws IOException {\n-        return makeSourceDirectory( new File( new File( baseDir, \"src/test\" ), pDir ), pDir, pCreateCopy );\n-    }\n-\n-    private void remove( File pDir ) throws IOException {\n-        if ( pDir.isFile() )\n-        {\n-            if ( ! pDir.delete() )\n-            {\n-                throw new IOException( \"Unable to delete file: \" + pDir );\n-            }\n-        }\n-        else if ( pDir.isDirectory() )\n-        {\n-            final File[] files = pDir.listFiles();\n-            for (File file : files) {\n-                remove(file);\n-            }\n-            if ( ! pDir.delete() )\n-            {\n-                throw new IOException( \"Unable to delete directory: \" + pDir );\n-            }\n-        }\n-        else if ( pDir.exists() )\n-        {\n-            throw new IOException( \"Unable to delete unknown object \" + pDir );\n-        }\n-    }\n-\n-    private void copy( File pSource, File pTarget ) throws IOException\n-    {\n-        if ( pSource.isDirectory() )\n-        {\n-            if ( !pTarget.isDirectory()  &&  !pTarget.mkdirs() ) {\n-                throw new IOException(\"Unable to create directory: \" + pTarget);\n-            }\n-            final DirectoryScanner scanner = new DirectoryScanner();\n-            scanner.setBasedir(pSource);\n-            scanner.addDefaultExcludes();\n-            scanner.setIncludes(new String[]{\"*\"});\n-            scanner.scan();\n-            final String[] dirs = scanner.getIncludedDirectories();\n-\n-            for (final String dir : dirs) {\n-                if (!\"\".equals(dir)) {\n-                    copy(new File(pSource, dir), new File(pTarget, dir));\n-                }\n-            }\n-            final String[] files = scanner.getIncludedFiles();\n-            for (String file : files) {\n-                copy(new File(pSource, file), new File(pTarget, file));\n-            }\n-        }\n-        else if ( pSource.isFile() )\n-        {\n-            final FileInputStream fis = new FileInputStream( pSource );\n-            final FileOutputStream fos = new FileOutputStream( pTarget );\n-            final byte[] buffer = new byte[8192];\n-            for ( ;; )\n-            {\n-                int res = fis.read(buffer);\n-                if (res == -1) {\n-                    break;\n-                }\n-                if (res > 0) {\n-                    fos.write(buffer, 0, res);\n-                }\n-            }\n-            fos.close();\n-            fis.close();\n-        }\n-        else\n-        {\n-            throw new IOException( \"Unable to copy unknown object \" + pSource );\n-        }\n-    }\n-    \n-    private File makeSourceDirectory(File pFile, String pDir, boolean pCreateCopy) throws IOException {\n-        if ( ! pCreateCopy )\n-        {\n-            return pFile;\n-        }\n-\n-        final File baseDir = new File( getBasedir() );\n-        final File targetDir = new File( new File( baseDir, \"target/it-source\" ), pDir );\n-        remove( targetDir );\n-        copy( pFile, targetDir );\n-        return targetDir;\n-    }\n-\n-    /**\n-     * Reads the location of the rat text file from the Mojo.\n-     * @param pMojo The configured Mojo.\n-     * @return Value of the \"reportFile\" property.\n-     * @throws Exception An error occurred while reading the property.\n-     */\n-    private File getRatTxtFile( RatCheckMojo pMojo )\n-            throws Exception\n-    {\n-        return (File) getVariableValueFromObject( pMojo, \"reportFile\" );\n-    }\n-\n-    /**\n-     * Runs a check, which should expose no problems.\n-     * @throws Exception The test failed.\n-     */\n-    public void testIt1() throws Exception {\n-        final RatCheckMojo mojo = newRatCheckMojo( \"it1\" );\n-        final File ratTxtFile = getRatTxtFile(mojo);\n-        mojo.execute();\n-        checkResult( ratTxtFile, 1, 0 );\n-    }\n-\n-    /**\n-     * Reads the created report file and verifies, whether the detected numbers\n-     * are matching.\n-     * @param pRatTxtFile The file to read.\n-     * @param pNumALFiles The number of files with AL.\n-     * @param pNumNoLicenseFiles The number of files without license.\n-     * @throws IOException An error occurred while reading the file.\n-     */\n-    private void checkResult( File pRatTxtFile, int pNumALFiles, int pNumNoLicenseFiles )\n-            throws IOException\n-    {\n-        assertTrue( pRatTxtFile.exists() );\n-        BufferedReader reader = new BufferedReader( new FileReader( pRatTxtFile ) );\n-        Integer numALFiles = null;\n-        Integer numNoLicenseFiles = null;\n-        for (;;)\n-        {\n-            String line = reader.readLine();\n-            if ( line == null )\n-            {\n-                break;\n-            }\n-            int offset = line.indexOf( \"Apache Licensed: \" );\n-            if ( offset >= 0 )\n-            {\n-                numALFiles = new Integer( line.substring( offset + \"Apache Licensed: \".length() ).trim() );\n-            }\n-            offset = line.indexOf( \"Unknown Licenses\" );\n-            if ( offset >= 0 )\n-            {\n-                numNoLicenseFiles = new Integer( line.substring( 0, offset ).trim() );\n-            }\n-        }\n-        reader.close();\n-        assertEquals( new Integer( pNumALFiles), numALFiles );\n-        assertEquals( new Integer( pNumNoLicenseFiles ), numNoLicenseFiles );\n-    }\n-\n-    /**\n-     * Runs a check, which should detect a problem.\n-     * @throws Exception The test failed.\n-     */\n-    public void testIt2() throws Exception {\n-        final RatCheckMojo mojo = newRatCheckMojo( \"it2\" );\n-        final File ratTxtFile = getRatTxtFile(mojo);\n-        try\n-        {\n-            mojo.execute();\n-            fail( \"Expected RatCheckException\" );\n-        }\n-        catch ( RatCheckException e )\n-        {\n-            final String msg = e.getMessage();\n-            final String REPORTFILE = \"rat.txt\"; // Default: defaultValue = \"${project.build.directory}/rat.txt\"\n-            assertTrue(\"report filename was not contained in '\" + msg +\"'\", msg.contains(REPORTFILE));\n-            assertFalse(\"no null allowed in '\" + msg +\"'\", (msg.toUpperCase().indexOf(\"NULL\") > -1));\n-        }\n-        checkResult( ratTxtFile, 1, 1 );\n-    }\n-\n-    private String getFirstLine(File pFile) throws IOException {\n-        final FileInputStream fis = new FileInputStream(pFile);\n-        final InputStreamReader reader = new InputStreamReader(fis, \"UTF8\");\n-        final BufferedReader breader = new BufferedReader(reader);\n-        final String result = breader.readLine();\n-        breader.close();\n-        return result;\n-    }\n-    \n-    /**\n-     * Tests adding license headers.\n-     */\n-    public void testIt3() throws Exception {\n-        final RatCheckMojo mojo = (RatCheckMojo) newRatMojo( \"it3\", \"check\", true );\n-        setVariableValueToObject( mojo, \"addLicenseHeaders\", \"true\" );\n-        setVariableValueToObject( mojo, \"numUnapprovedLicenses\", Integer.valueOf(1));\n-        mojo.execute();\n-        final File ratTxtFile = getRatTxtFile( mojo );\n-        checkResult( ratTxtFile, 1, 1 );\n-\n-        final File baseDir = new File( getBasedir() );\n-        final File sourcesDir = new File( new File( baseDir, \"target/it-source\" ), \"it3\" );\n-        final String firstLineOrig = getFirstLine(new File(sourcesDir, \"src.apt\"));\n-        assertTrue(firstLineOrig.indexOf(\"--\") != -1);\n-        assertTrue(firstLineOrig.indexOf(\"~~\") == -1);\n-        final String firstLineModified = getFirstLine(new File(sourcesDir, \"src.apt.new\"));\n-        assertTrue(firstLineModified.indexOf(\"--\") == -1);\n-        assertTrue(firstLineModified.indexOf(\"~~\") != -1);\n-    }\n+public class RatCheckMojoTest extends AbstractMojoTestCase {\n+\n+\t/**\n+\t * Creates a new instance of {@link RatCheckMojo}.\n+\t * \n+\t * @param pDir\n+\t *            The directory, where to look for a pom.xml file.\n+\t * @return The configured Mojo.\n+\t * @throws Exception\n+\t *             An error occurred while creating the Mojo.\n+\t */\n+\tprivate RatCheckMojo newRatCheckMojo(String pDir) throws Exception {\n+\t\treturn (RatCheckMojo) newRatMojo(pDir, \"check\", false);\n+\t}\n+\n+\t/**\n+\t * Creates a new instance of {@link AbstractRatMojo}.\n+\t * \n+\t * @param pDir\n+\t *            The directory, where to look for a pom.xml file.\n+\t * @param pGoal\n+\t *            The goal, which the Mojo must implement.\n+\t * @return The configured Mojo.\n+\t * @throws Exception\n+\t *             An error occurred while creating the Mojo.\n+\t */\n+\tprivate AbstractRatMojo newRatMojo(String pDir, String pGoal,\n+\t\t\tboolean pCreateCopy) throws Exception {\n+\t\tfinal File baseDir = new File(getBasedir());\n+\t\tfinal File testBaseDir = getSourceDirectory(getBasedir(), pDir,\n+\t\t\t\tpCreateCopy, baseDir);\n+\t\tFile testPom = new File(testBaseDir, \"pom.xml\");\n+\t\tAbstractRatMojo mojo = (AbstractRatMojo) lookupMojo(pGoal, testPom);\n+\t\tassertNotNull(mojo);\n+\t\tfinal File buildDirectory = new File(new File(baseDir, \"target/test\"),\n+\t\t\t\tpDir);\n+\t\tsetVariableValueToObject(mojo, \"basedir\", testBaseDir);\n+\t\tsetVariableValueToObject(mojo, \"addDefaultLicenseMatchers\",\n+\t\t\t\tBoolean.TRUE);\n+\t\tsetVariableValueToObject(mojo, \"useDefaultExcludes\", Boolean.TRUE);\n+\t\tsetVariableValueToObject(mojo, \"useMavenDefaultExcludes\", Boolean.TRUE);\n+\t\tsetVariableValueToObject(mojo, \"useEclipseDefaultExcludes\",\n+\t\t\t\tBoolean.TRUE);\n+\t\tsetVariableValueToObject(mojo, \"addLicenseHeaders\", \"false\");\n+\t\tfinal Build build = new Build();\n+\t\tbuild.setDirectory(buildDirectory.getPath());\n+\t\tfinal MavenProjectStub project = new MavenProjectStub() {\n+\t\t\t@Override\n+\t\t\tpublic Build getBuild() {\n+\t\t\t\treturn build;\n+\t\t\t}\n+\t\t};\n+\t\tsetVariableValueToObject(mojo, \"project\", project);\n+\t\tassertNotNull(\n+\t\t\t\t\"Problem in test setup - you are missing a project in your mojo.\",\n+\t\t\t\tproject);\n+\t\tassertNotNull(\n+\t\t\t\t\"The mojo is missing its MavenProject, which will result in an NPE during rat runs.\",\n+\t\t\t\tmojo.getProject());\n+\t\tassertNotNull(\n+\t\t\t\t\"No artifactRepos found, which will result in an NPE during rat runs.\",\n+\t\t\t\tproject.getRemoteArtifactRepositories());\n+\t\t\n+\t\tif (mojo instanceof RatReportMojo) {\n+\t\t\tsetVariableValueToObject(mojo, \"localRepository\",\n+\t\t\t\t\tnewArtifactRepository(container));\n+\t\t\tsetVariableValueToObject(mojo, \"resolver\", newArtifactResolver());\n+\t\t\tsetVariableValueToObject(mojo, \"factory\", newArtifactFactory());\n+\t\t\tsetVariableValueToObject(mojo, \"siteRenderer\",\n+\t\t\t\t\tnewSiteRenderer(container));\n+\t\t} else if (mojo instanceof RatCheckMojo) {\n+\t\t\tfinal File ratTxtFile = new File(buildDirectory, \"rat.txt\");\n+\t\t\tsetVariableValueToObject(mojo, \"reportFile\", ratTxtFile);\n+\t\t}\n+\t\treturn mojo;\n+\t}\n+\t\n+\t/**\n+\t * Reads the location of the rat text file from the Mojo.\n+\t * \n+\t * @param pMojo\n+\t *            The configured Mojo.\n+\t * @return Value of the \"reportFile\" property.\n+\t * @throws Exception\n+\t *             An error occurred while reading the property.\n+\t */\n+\tprivate File getRatTxtFile(RatCheckMojo pMojo) throws Exception {\n+\t\treturn (File) getVariableValueFromObject(pMojo, \"reportFile\");\n+\t}\n+\n+\t/**\n+\t * Runs a check, which should expose no problems.\n+\t * \n+\t * @throws Exception\n+\t *             The test failed.\n+\t */\n+\tpublic void testIt1() throws Exception {\n+\t\tfinal RatCheckMojo mojo = newRatCheckMojo(\"it1\");\n+\t\tfinal File ratTxtFile = getRatTxtFile(mojo);\n+\t\tmojo.execute();\n+\t\tensureRatReportIsCorrect(ratTxtFile, 1, 0);\n+\t}\n+\n+\t/**\n+\t * Runs a check, which should detect a problem.\n+\t * \n+\t * @throws Exception\n+\t *             The test failed.\n+\t */\n+\tpublic void testIt2() throws Exception {\n+\t\tfinal RatCheckMojo mojo = newRatCheckMojo(\"it2\");\n+\t\tfinal File ratTxtFile = getRatTxtFile(mojo);\n+\t\ttry {\n+\t\t\tmojo.execute();\n+\t\t\tfail(\"Expected RatCheckException\");\n+\t\t} catch (RatCheckException e) {\n+\t\t\tfinal String msg = e.getMessage();\n+\t\t\t// default value is \"${project.build.directory}/rat.txt\"\n+\t\t\tfinal String REPORTFILE = \"rat.txt\";\n+\t\t\t\n+\t\t\tassertTrue(\"report filename was not contained in '\" + msg + \"'\",\n+\t\t\t\t\tmsg.contains(REPORTFILE));\n+\t\t\tassertFalse(\"no null allowed in '\" + msg + \"'\", (msg.toUpperCase()\n+\t\t\t\t\t.indexOf(\"NULL\") > -1));\n+\t\t}\n+\t\tensureRatReportIsCorrect(ratTxtFile, 1, 1);\n+\t}\n+\n+\tprivate String getFirstLine(File pFile) throws IOException {\n+\t\tfinal FileInputStream fis = new FileInputStream(pFile);\n+\t\tfinal InputStreamReader reader = new InputStreamReader(fis, \"UTF8\");\n+\t\tfinal BufferedReader breader = new BufferedReader(reader);\n+\t\tfinal String result = breader.readLine();\n+\t\tbreader.close();\n+\t\treturn result;\n+\t}\n+\n+\t/**\n+\t * Tests adding license headers.\n+\t */\n+\tpublic void testIt3() throws Exception {\n+\t\tfinal RatCheckMojo mojo = (RatCheckMojo) newRatMojo(\"it3\", \"check\",\n+\t\t\t\ttrue);\n+\t\tsetVariableValueToObject(mojo, \"addLicenseHeaders\", \"true\");\n+\t\tsetVariableValueToObject(mojo, \"numUnapprovedLicenses\",\n+\t\t\t\tInteger.valueOf(1));\n+\t\tmojo.execute();\n+\t\tfinal File ratTxtFile = getRatTxtFile(mojo);\n+\t\tensureRatReportIsCorrect(ratTxtFile, 1, 1);\n+\n+\t\tfinal File baseDir = new File(getBasedir());\n+\t\tfinal File sourcesDir = new File(new File(baseDir, \"target/it-source\"),\n+\t\t\t\t\"it3\");\n+\t\tfinal String firstLineOrig = getFirstLine(new File(sourcesDir,\n+\t\t\t\t\"src.apt\"));\n+\t\tassertTrue(firstLineOrig.indexOf(\"--\") != -1);\n+\t\tassertTrue(firstLineOrig.indexOf(\"~~\") == -1);\n+\t\tfinal String firstLineModified = getFirstLine(new File(sourcesDir,\n+\t\t\t\t\"src.apt.new\"));\n+\t\tassertTrue(firstLineModified.indexOf(\"--\") == -1);\n+\t\tassertTrue(firstLineModified.indexOf(\"~~\") != -1);\n+\t}\n \n }",
                "additions": 170,
                "raw_url": "https://github.com/apache/creadur-rat/raw/224b344768fe1be1e983abd2a67931ef64c15163/apache-rat-plugin/src/test/java/org/apache/rat/mp/RatCheckMojoTest.java",
                "status": "modified",
                "changes": 539,
                "deletions": 369,
                "sha": "d547e768200222276d76acd55c769b634ac59fa5",
                "blob_url": "https://github.com/apache/creadur-rat/blob/224b344768fe1be1e983abd2a67931ef64c15163/apache-rat-plugin/src/test/java/org/apache/rat/mp/RatCheckMojoTest.java",
                "filename": "apache-rat-plugin/src/test/java/org/apache/rat/mp/RatCheckMojoTest.java",
                "contents_url": "https://api.github.com/repos/apache/creadur-rat/contents/apache-rat-plugin/src/test/java/org/apache/rat/mp/RatCheckMojoTest.java?ref=224b344768fe1be1e983abd2a67931ef64c15163"
            },
            {
                "patch": "@@ -0,0 +1,282 @@\n+package org.apache.rat.mp;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+import org.apache.maven.artifact.factory.ArtifactFactory;\n+import org.apache.maven.artifact.factory.DefaultArtifactFactory;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.DefaultArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.artifact.resolver.ArtifactResolver;\n+import org.apache.maven.artifact.resolver.DefaultArtifactResolver;\n+import org.apache.maven.doxia.siterenderer.Renderer;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.settings.io.xpp3.SettingsXpp3Reader;\n+import org.codehaus.plexus.PlexusContainer;\n+import org.codehaus.plexus.util.DirectoryScanner;\n+\n+/**\n+ * Test helpers used when verifying mojo interaction in RAT integration tests.\n+ */\n+public final class RatTestHelpers {\n+\n+\t/**\n+\t * @param pDir\n+\t *            Removes the given directory recursively.\n+\t * @throws IOException\n+\t *             in case of errors.\n+\t */\n+\tpublic static void remove(File pDir) throws IOException {\n+\t\tif (pDir.isFile()) {\n+\t\t\tif (!pDir.delete()) {\n+\t\t\t\tthrow new IOException(\"Unable to delete file: \" + pDir);\n+\t\t\t}\n+\t\t} else if (pDir.isDirectory()) {\n+\t\t\tfinal File[] files = pDir.listFiles();\n+\t\t\tfor (File file : files) {\n+\t\t\t\tremove(file);\n+\t\t\t}\n+\t\t\tif (!pDir.delete()) {\n+\t\t\t\tthrow new IOException(\"Unable to delete directory: \" + pDir);\n+\t\t\t}\n+\t\t} else if (pDir.exists()) {\n+\t\t\tthrow new IOException(\"Unable to delete unknown object \" + pDir);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Copies the given files recursively in order to get all integration test\n+\t * files into a target director.\n+\t * \n+\t * @param pSource\n+\t *            source files.\n+\t * @param pTarget\n+\t *            target directory\n+\t * @throws IOException\n+\t *             in case of errors.\n+\t */\n+\tpublic static void copy(File pSource, File pTarget) throws IOException {\n+\t\tif (pSource.isDirectory()) {\n+\t\t\tif (!pTarget.isDirectory() && !pTarget.mkdirs()) {\n+\t\t\t\tthrow new IOException(\"Unable to create directory: \" + pTarget);\n+\t\t\t}\n+\t\t\tfinal DirectoryScanner scanner = new DirectoryScanner();\n+\t\t\tscanner.setBasedir(pSource);\n+\t\t\tscanner.addDefaultExcludes();\n+\t\t\tscanner.setIncludes(new String[] { \"*\" });\n+\t\t\tscanner.scan();\n+\t\t\tfinal String[] dirs = scanner.getIncludedDirectories();\n+\n+\t\t\tfor (final String dir : dirs) {\n+\t\t\t\tif (!\"\".equals(dir)) {\n+\t\t\t\t\tcopy(new File(pSource, dir), new File(pTarget, dir));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfinal String[] files = scanner.getIncludedFiles();\n+\t\t\tfor (String file : files) {\n+\t\t\t\tcopy(new File(pSource, file), new File(pTarget, file));\n+\t\t\t}\n+\t\t} else if (pSource.isFile()) {\n+\t\t\tfinal FileInputStream fis = new FileInputStream(pSource);\n+\t\t\tfinal FileOutputStream fos = new FileOutputStream(pTarget);\n+\t\t\tfinal byte[] buffer = new byte[8192];\n+\t\t\tfor (;;) {\n+\t\t\t\tint res = fis.read(buffer);\n+\t\t\t\tif (res == -1) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tif (res > 0) {\n+\t\t\t\t\tfos.write(buffer, 0, res);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfos.close();\n+\t\t\tfis.close();\n+\t\t} else {\n+\t\t\tthrow new IOException(\"Unable to copy unknown object \" + pSource);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Creates a new instance of {@link Renderer}.\n+\t * \n+\t * @param container\n+\t *            current plexus container.\n+\t * @return A configured instance of {@link DefaultRenderer}.\n+\t * @throws Exception\n+\t *             Creating the object failed.\n+\t */\n+\tpublic static Renderer newSiteRenderer(PlexusContainer container)\n+\t\t\tthrows Exception {\n+\t\treturn (Renderer) container.lookup(Renderer.ROLE, \"default\");\n+\t}\n+\n+\t/**\n+\t * Creates a new instance of {@link ArtifactFactory}.\n+\t * \n+\t * @return A configured instance of {@link DefaultArtifactFactory}.\n+\t * @throws Exception\n+\t *             Creating the object failed.\n+\t */\n+\tpublic static ArtifactFactory newArtifactFactory() throws Exception {\n+\t\tfinal InvocationHandler handler = new InvocationHandler() {\n+\t\t\tpublic Object invoke(Object pProxy, Method pMethod, Object[] pArgs)\n+\t\t\t\t\tthrows Throwable {\n+\t\t\t\tSystem.out.println(\"Invoking method \" + pMethod);\n+\t\t\t\tthrow new IllegalStateException(\"Not implemented\");\n+\t\t\t}\n+\t\t};\n+\t\treturn (ArtifactFactory) Proxy.newProxyInstance(Thread.currentThread()\n+\t\t\t\t.getContextClassLoader(),\n+\t\t\t\tnew Class[] { ArtifactFactory.class }, handler);\n+\t}\n+\n+\t/**\n+\t * Creates a new instance of {@link ArtifactResolver}.\n+\t * \n+\t * @return A configured instance of {@link DefaultArtifactResolver}.\n+\t * @throws Exception\n+\t *             Creating the object failed.\n+\t */\n+\tpublic static ArtifactResolver newArtifactResolver() throws Exception {\n+\t\tfinal InvocationHandler handler = new InvocationHandler() {\n+\t\t\tpublic Object invoke(Object pProxy, Method pMethod, Object[] pArgs)\n+\t\t\t\t\tthrows Throwable {\n+\t\t\t\tSystem.out.println(\"Invoking method \" + pMethod);\n+\t\t\t\tthrow new IllegalStateException(\"Not implemented\");\n+\t\t\t}\n+\t\t};\n+\t\treturn (ArtifactResolver) Proxy.newProxyInstance(Thread.currentThread()\n+\t\t\t\t.getContextClassLoader(),\n+\t\t\t\tnew Class[] { ArtifactResolver.class }, handler);\n+\t}\n+\n+\t/**\n+\t * Creates an instance of {@link ArtifactRepository}.\n+\t * \n+\t * @param container\n+\t *            current plexus container.\n+\t * @return A configured instance of {@link DefaultArtifactRepository}.\n+\t * @throws Exception\n+\t *             Creating the object failed.\n+\t */\n+\tpublic static ArtifactRepository newArtifactRepository(\n+\t\t\tPlexusContainer container) throws Exception {\n+\t\tFile m2Dir = new File(System.getProperty(\"user.home\"), \".m2\");\n+\t\tFile settingsFile = new File(m2Dir, \"settings.xml\");\n+\t\tString localRepo = null;\n+\t\tif (settingsFile.exists()) {\n+\t\t\tSettings settings = new SettingsXpp3Reader().read(new FileReader(\n+\t\t\t\t\tsettingsFile));\n+\t\t\tlocalRepo = settings.getLocalRepository();\n+\t\t}\n+\t\tif (localRepo == null) {\n+\t\t\tlocalRepo = System.getProperty(\"user.home\") + \"/.m2/repository\";\n+\t\t}\n+\t\tArtifactRepositoryLayout repositoryLayout = (ArtifactRepositoryLayout) container\n+\t\t\t\t.lookup(ArtifactRepositoryLayout.ROLE, \"default\");\n+\t\treturn new DefaultArtifactRepository(\"local\", \"file://\" + localRepo,\n+\t\t\t\trepositoryLayout);\n+\t}\n+\n+\tpublic static File makeSourceDirectory(String mvnBaseDir, File pFile,\n+\t\t\tString pDir, boolean pCreateCopy) throws IOException {\n+\t\tif (!pCreateCopy) {\n+\t\t\treturn pFile;\n+\t\t}\n+\n+\t\tfinal File targetDir = new File(new File(new File(mvnBaseDir),\n+\t\t\t\t\"target/it-source\"), pDir);\n+\t\tremove(targetDir);\n+\t\tcopy(pFile, targetDir);\n+\t\treturn targetDir;\n+\t}\n+\n+\tpublic static File getSourceDirectory(String mvnBaseDir, String pDir,\n+\t\t\tboolean pCreateCopy, final File baseDir) throws IOException {\n+\t\treturn makeSourceDirectory(mvnBaseDir, new File(new File(baseDir,\n+\t\t\t\t\"src/test\"), pDir), pDir, pCreateCopy);\n+\t}\n+\n+\t/**\n+\t * Reads the created report file and verifies, whether the detected numbers\n+\t * are matching.\n+\t * \n+\t * @param pRatTxtFile\n+\t *            The file to read.\n+\t * @param pNumALFiles\n+\t *            The number of files with AL.\n+\t * @param pNumNoLicenseFiles\n+\t *            The number of files without license.\n+\t * @throws IOException\n+\t *             An error occurred while reading the file or the file does not\n+\t *             exist at all.\n+\t * @throws IllegalArgumentException\n+\t *             In case of mismatches in file numbers passed in as parameter.\n+\t */\n+\tpublic static void ensureRatReportIsCorrect(File pRatTxtFile,\n+\t\t\tint pNumALFiles, int pNumNoLicenseFiles) throws IOException {\n+\t\tif (!pRatTxtFile.exists()) {\n+\t\t\tthrow new FileNotFoundException(\"Could not find \" + pRatTxtFile);\n+\t\t}\n+\n+\t\tBufferedReader reader = new BufferedReader(new FileReader(pRatTxtFile));\n+\t\tInteger numALFiles = null;\n+\t\tInteger numNoLicenseFiles = null;\n+\t\tfor (;;) {\n+\t\t\tString line = reader.readLine();\n+\t\t\tif (line == null) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tint offset = line.indexOf(\"Apache Licensed: \");\n+\t\t\tif (offset >= 0) {\n+\t\t\t\tnumALFiles = new Integer(line.substring(\n+\t\t\t\t\t\toffset + \"Apache Licensed: \".length()).trim());\n+\t\t\t}\n+\t\t\toffset = line.indexOf(\"Unknown Licenses\");\n+\t\t\tif (offset >= 0) {\n+\t\t\t\tnumNoLicenseFiles = new Integer(line.substring(0, offset)\n+\t\t\t\t\t\t.trim());\n+\t\t\t}\n+\t\t}\n+\t\treader.close();\n+\n+\t\tif (!new Integer(pNumALFiles).equals(numALFiles)) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Amount of licensed files does not match. Expected \"\n+\t\t\t\t\t\t\t+ pNumALFiles + \", got \" + numALFiles);\n+\t\t}\n+\n+\t\tif (!new Integer(pNumNoLicenseFiles).equals(numNoLicenseFiles)) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Amount of licensed files does not match. Expected \"\n+\t\t\t\t\t\t\t+ pNumALFiles + \", got \" + numALFiles);\n+\t\t}\n+\n+\t}\n+\n+}",
                "additions": 282,
                "raw_url": "https://github.com/apache/creadur-rat/raw/224b344768fe1be1e983abd2a67931ef64c15163/apache-rat-plugin/src/test/java/org/apache/rat/mp/RatTestHelpers.java",
                "status": "added",
                "changes": 282,
                "deletions": 0,
                "sha": "e2c2ddf1d23fa08d4cc76df3ce2990796f90bef0",
                "blob_url": "https://github.com/apache/creadur-rat/blob/224b344768fe1be1e983abd2a67931ef64c15163/apache-rat-plugin/src/test/java/org/apache/rat/mp/RatTestHelpers.java",
                "filename": "apache-rat-plugin/src/test/java/org/apache/rat/mp/RatTestHelpers.java",
                "contents_url": "https://api.github.com/repos/apache/creadur-rat/contents/apache-rat-plugin/src/test/java/org/apache/rat/mp/RatTestHelpers.java?ref=224b344768fe1be1e983abd2a67931ef64c15163"
            },
            {
                "patch": "@@ -77,6 +77,7 @@ agnostic home for software distribution comprehension and audit tools.\n     <rat.site.id>org.apache.rat.site</rat.site.id>\n \n     <!-- maven plugin versions -->\n+    <mavenInvokerPluginVersion>1.9</mavenInvokerPluginVersion>\n     <mavenPluginPluginVersion>3.3</mavenPluginPluginVersion>\n     <surefire.version>2.17</surefire.version>\n   </properties>",
                "additions": 1,
                "raw_url": "https://github.com/apache/creadur-rat/raw/224b344768fe1be1e983abd2a67931ef64c15163/pom.xml",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "9797c77218b777472b9e7cafa2e1027ed5f6a7e2",
                "blob_url": "https://github.com/apache/creadur-rat/blob/224b344768fe1be1e983abd2a67931ef64c15163/pom.xml",
                "filename": "pom.xml",
                "contents_url": "https://api.github.com/repos/apache/creadur-rat/contents/pom.xml?ref=224b344768fe1be1e983abd2a67931ef64c15163"
            }
        ],
        "bug_id": "creadur-rat_5",
        "parent": "https://github.com/apache/creadur-rat/commit/f2776b7a39095066bf83c61dae22af8e6aef7370",
        "message": "Refactoring mojo tests.\n\n-Replaced the way the MavenProject injected to a non-deprecated way (to get rid of the warning during the build).\n-Updated mavenInvokerPluginVersion and extracted it as a pom-property.\n-Extracted some RAT mojo integration test methods into a separate RatTestHelpers in order to find integration tests more easily after RAT-168 and the NPE when trying to forge 0.11.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/creadur/rat/trunk@1617370 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "creadur-rat"
    },
    {
        "commit": "https://github.com/apache/creadur-rat/commit/7aa2c7c94f4b5462c9ba83a245b56081bba39c59",
        "file": [
            {
                "patch": "@@ -199,7 +199,7 @@\n     /**\n     * Holds the maven-internal project to allow resolution of artifact properties during mojo runs.\n     */\n-    @Parameter(property = \"project\", required = true, readonly = true)\n+    @Parameter(defaultValue = \"${project}\", required = true, readonly = true)\n     private MavenProject project;\n \n     /**",
                "additions": 1,
                "raw_url": "https://github.com/apache/creadur-rat/raw/7aa2c7c94f4b5462c9ba83a245b56081bba39c59/apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "ea70ebafd5de96c1053869cabad3a430cbbd6b2f",
                "blob_url": "https://github.com/apache/creadur-rat/blob/7aa2c7c94f4b5462c9ba83a245b56081bba39c59/apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java",
                "filename": "apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java",
                "contents_url": "https://api.github.com/repos/apache/creadur-rat/contents/apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java?ref=7aa2c7c94f4b5462c9ba83a245b56081bba39c59"
            }
        ],
        "bug_id": "creadur-rat_6",
        "parent": "https://github.com/apache/creadur-rat/commit/ee4be4461b3e7e8f14c5351055ab3ce78f6cbaaa",
        "message": "[RAT-168] Add integration test for apache-rat:rat to catch NPE\nUse the correct annotation for this kind of @Parameter. The \"property\" option is used for parameters that can be set from the command line as a system property using -D, but this parameter is read only so we should not use that. Instead we want the parameter to have a default value injected with the current project. The IT (it4_RAT-168) that was added for this issue still passes with this change.\n\ngit-svn-id: https://svn.apache.org/repos/asf/creadur/rat/trunk@1618026 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "creadur-rat"
    }
]