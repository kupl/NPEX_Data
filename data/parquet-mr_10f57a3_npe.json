[
    {
        "repo": "parquet-mr",
        "commit": "https://github.com/apache/parquet-mr/commit/10f57a3779264ba222288defd1472d66ac2ae135",
        "bug_id": "parquet-mr_10f57a3",
        "message": "PARQUET-1596: PARQUET-1375 broke parquet-cli's to-avro command (#648)\n\n* PARQUET-1596: PARQUET-1375 broke parquet-cli's to-avro command\r\n\r\nThe expected NPE:\r\n\r\ncat /Users/fokkodriesprong/Desktop/parquet-mr/parquet-cli/target/surefire-reports/org.apache.parquet.cli.commands.ToAvroCommandTest.txt\r\n-------------------------------------------------------------------------------\r\nTest set: org.apache.parquet.cli.commands.ToAvroCommandTest\r\n-------------------------------------------------------------------------------\r\nTests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.154 sec <<< FAILURE!\r\ntestToAvroCommandFromJson(org.apache.parquet.cli.commands.ToAvroCommandTest)  Time elapsed: 0.052 sec  <<< ERROR!\r\njava.lang.NullPointerException\r\n\tat org.apache.hadoop.fs.FileSystem.getDefaultUri(FileSystem.java:180)\r\n\tat org.apache.hadoop.fs.FileSystem.get(FileSystem.java:361)\r\n\tat org.apache.hadoop.fs.FileSystem.getLocal(FileSystem.java:344)\r\n\tat org.apache.parquet.cli.BaseCommand.defaultFS(BaseCommand.java:81)\r\n\tat org.apache.parquet.cli.BaseCommand.qualifiedPath(BaseCommand.java:164)\r\n\tat org.apache.parquet.cli.BaseCommand.openSeekable(BaseCommand.java:215)\r\n\tat org.apache.parquet.cli.BaseCommand.getAvroSchema(BaseCommand.java:375)\r\n\tat org.apache.parquet.cli.commands.ToAvroCommand.run(ToAvroCommand.java:93)\r\n\tat org.apache.parquet.cli.commands.ToAvroCommandTest.testToAvroCommandFromJson(ToAvroCommandTest.java:72)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\r\n\tat org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48)\r\n\tat org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48)\r\n\tat org.junit.rules.RunRules.evaluate(RunRules.java:20)\r\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53)\r\n\tat org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:123)\r\n\tat org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:104)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)\r\n\tat org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)\r\n\tat org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)\r\n\tat org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)",
        "parent": "https://github.com/apache/parquet-mr/commit/59ae0346cdda2c2fa00698276d9cba82a73c6856",
        "patched_files": [
            "pom.xml",
            "BaseCommand.java",
            "AvroJson.java",
            "ToAvroCommand.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/parquet-mr/raw/10f57a3779264ba222288defd1472d66ac2ae135/parquet-cli/src/main/java/org/apache/parquet/cli/BaseCommand.java",
                "contents_url": "https://api.github.com/repos/apache/parquet-mr/contents/parquet-cli/src/main/java/org/apache/parquet/cli/BaseCommand.java?ref=10f57a3779264ba222288defd1472d66ac2ae135",
                "filename": "parquet-cli/src/main/java/org/apache/parquet/cli/BaseCommand.java",
                "deletions": 1,
                "sha": "cdef53d52ca3242e73cccdce560649ab8e797828",
                "blob_url": "https://github.com/apache/parquet-mr/blob/10f57a3779264ba222288defd1472d66ac2ae135/parquet-cli/src/main/java/org/apache/parquet/cli/BaseCommand.java",
                "patch": "@@ -226,7 +226,9 @@ public void setConf(Configuration conf) {\n \n   @Override\n   public Configuration getConf() {\n-    return conf;\n+    // In case conf is null, we'll return an empty configuration\n+    // this can be on a local development machine\n+    return null != conf ? conf : new Configuration();\n   }\n \n   /**",
                "changes": 4
            },
            {
                "status": "modified",
                "additions": 11,
                "raw_url": "https://github.com/apache/parquet-mr/raw/10f57a3779264ba222288defd1472d66ac2ae135/parquet-cli/src/main/java/org/apache/parquet/cli/commands/ToAvroCommand.java",
                "contents_url": "https://api.github.com/repos/apache/parquet-mr/contents/parquet-cli/src/main/java/org/apache/parquet/cli/commands/ToAvroCommand.java?ref=10f57a3779264ba222288defd1472d66ac2ae135",
                "filename": "parquet-cli/src/main/java/org/apache/parquet/cli/commands/ToAvroCommand.java",
                "deletions": 11,
                "sha": "d659109f97deb29ef2ae9e8da368ba6973da783d",
                "blob_url": "https://github.com/apache/parquet-mr/blob/10f57a3779264ba222288defd1472d66ac2ae135/parquet-cli/src/main/java/org/apache/parquet/cli/commands/ToAvroCommand.java",
                "patch": "@@ -86,30 +86,30 @@ public int run() throws IOException {\n \n     CodecFactory codecFactory = Codecs.avroCodec(compressionCodecName);\n \n-    Schema schema;\n+    final Schema schema;\n     if (avroSchemaFile != null) {\n       schema = Schemas.fromAvsc(open(avroSchemaFile));\n     } else {\n       schema = getAvroSchema(source);\n     }\n-    Schema projection = filterSchema(schema, columns);\n+    final Schema projection = filterSchema(schema, columns);\n \n     Path outPath = qualifiedPath(outputPath);\n-    FileSystem outFS = outPath.getFileSystem(getConf());\n-    if (overwrite && outFS.exists(outPath)) {\n-      console.debug(\"Deleting output file {} (already exists)\", outPath);\n-      outFS.delete(outPath);\n+    try (FileSystem outFS = outPath.getFileSystem(getConf())) {\n+      if (overwrite && outFS.exists(outPath)) {\n+        console.debug(\"Deleting output file {} (already exists)\", outPath);\n+        outFS.delete(outPath);\n+      }\n     }\n \n     Iterable<Record> reader = openDataFile(source, projection);\n     boolean threw = true;\n     long count = 0;\n-    try {\n-      DatumWriter<Record> datumWriter = new GenericDatumWriter<>(schema);\n-      DataFileWriter<Record> w = new DataFileWriter<>(datumWriter);\n-      w.setCodec(codecFactory);\n \n-      try (DataFileWriter<Record> writer = w.create(projection, create(outputPath))) {\n+    DatumWriter<Record> datumWriter = new GenericDatumWriter<>(schema);\n+    try (DataFileWriter<Record> fileWriter = new DataFileWriter<>(datumWriter)) {\n+      fileWriter.setCodec(codecFactory);\n+      try (DataFileWriter<Record> writer=fileWriter.create(projection, create(outputPath))) {\n         for (Record record : reader) {\n           writer.append(record);\n           count += 1;",
                "changes": 22
            },
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/parquet-mr/raw/10f57a3779264ba222288defd1472d66ac2ae135/parquet-cli/src/main/java/org/apache/parquet/cli/json/AvroJson.java",
                "contents_url": "https://api.github.com/repos/apache/parquet-mr/contents/parquet-cli/src/main/java/org/apache/parquet/cli/json/AvroJson.java?ref=10f57a3779264ba222288defd1472d66ac2ae135",
                "filename": "parquet-cli/src/main/java/org/apache/parquet/cli/json/AvroJson.java",
                "deletions": 1,
                "sha": "f67b99f323048ca3d24f9f2c230e21cfe4cd2b2a",
                "blob_url": "https://github.com/apache/parquet-mr/blob/10f57a3779264ba222288defd1472d66ac2ae135/parquet-cli/src/main/java/org/apache/parquet/cli/json/AvroJson.java",
                "patch": "@@ -64,7 +64,9 @@\n   private static final JsonFactory FACTORY = new JsonFactory(MAPPER);\n \n   public static Iterator<JsonNode> parser(final InputStream stream) {\n-    try(JsonParser parser = FACTORY.createParser(stream)) {\n+    try {\n+      // Don't close the parser until the iterator has been consumed\n+      JsonParser parser = FACTORY.createParser(stream);\n       return parser.readValuesAs(JsonNode.class);\n     } catch (IOException e) {\n       throw new RuntimeIOException(\"Cannot read from stream\", e);",
                "changes": 4
            },
            {
                "status": "modified",
                "additions": 39,
                "raw_url": "https://github.com/apache/parquet-mr/raw/10f57a3779264ba222288defd1472d66ac2ae135/parquet-cli/src/test/java/org/apache/parquet/cli/commands/ToAvroCommandTest.java",
                "contents_url": "https://api.github.com/repos/apache/parquet-mr/contents/parquet-cli/src/test/java/org/apache/parquet/cli/commands/ToAvroCommandTest.java?ref=10f57a3779264ba222288defd1472d66ac2ae135",
                "filename": "parquet-cli/src/test/java/org/apache/parquet/cli/commands/ToAvroCommandTest.java",
                "deletions": 1,
                "sha": "9344a785dafa3f718047d1f2bb2529e8da48dd83",
                "blob_url": "https://github.com/apache/parquet-mr/blob/10f57a3779264ba222288defd1472d66ac2ae135/parquet-cli/src/test/java/org/apache/parquet/cli/commands/ToAvroCommandTest.java",
                "patch": "@@ -16,22 +16,60 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.parquet.cli.commands;\n \n+import com.beust.jcommander.JCommander;\n import org.junit.Assert;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+import java.io.BufferedWriter;\n import java.io.File;\n+import java.io.FileWriter;\n import java.io.IOException;\n \n public class ToAvroCommandTest extends AvroFileTest {\n+  @Rule\n+  public TemporaryFolder folder = new TemporaryFolder();\n+\n   @Test\n-  public void testToAvroCommand() throws IOException {\n+  public void testToAvroCommandFromParquet() throws IOException {\n     File avroFile = toAvro(parquetFile());\n     Assert.assertTrue(avroFile.exists());\n   }\n \n   @Test\n+  public void testToAvroCommandFromJson() throws IOException {\n+    final File jsonInputFile = folder.newFile(\"sample.json\");\n+    final File avroOutputFile = folder.newFile(\"sample.avro\");\n+\n+    // Write the json to the file, so we can read it again.\n+    final String inputJson = \"{\\\"id\\\": 1, \\\"name\\\": \\\"Alice\\\"}\\n\" +\n+      \"{\\\"id\\\": 2, \\\"name\\\": \\\"Bob\\\"}\\n\" +\n+      \"{\\\"id\\\": 3, \\\"name\\\": \\\"Carol\\\"}\\n\" +\n+      \"{\\\"id\\\": 4, \\\"name\\\": \\\"Dave\\\"}\";\n+\n+    try (BufferedWriter writer = new BufferedWriter(new FileWriter(jsonInputFile))) {\n+      writer.write(inputJson);\n+    }\n+\n+    ToAvroCommand cmd = new ToAvroCommand(null);\n+\n+    JCommander\n+      .newBuilder()\n+      .addObject(cmd)\n+      .build()\n+      .parse(\n+        jsonInputFile.getAbsolutePath(),\n+        \"--output\",\n+        avroOutputFile.getAbsolutePath()\n+      );\n+\n+    assert (cmd.run() == 0);\n+  }\n+\n   public void testToAvroCommandWithGzipCompression() throws IOException {\n     File avroFile = toAvro(parquetFile(), \"GZIP\");\n     Assert.assertTrue(avroFile.exists());",
                "changes": 40
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/parquet-mr/raw/10f57a3779264ba222288defd1472d66ac2ae135/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/parquet-mr/contents/pom.xml?ref=10f57a3779264ba222288defd1472d66ac2ae135",
                "filename": "pom.xml",
                "deletions": 1,
                "sha": "daea6197e63ed49533050f1fc2bfb3852a491813",
                "blob_url": "https://github.com/apache/parquet-mr/blob/10f57a3779264ba222288defd1472d66ac2ae135/pom.xml",
                "patch": "@@ -105,7 +105,7 @@\n \n     <!-- parquet-cli dependencies -->\n     <opencsv.version>2.3</opencsv.version>\n-    <jcommander.version>1.35</jcommander.version>\n+    <jcommander.version>1.72</jcommander.version>\n     <zstd-jni.version>1.4.0-1</zstd-jni.version>\n   </properties>\n ",
                "changes": 2
            }
        ],
        "unit_tests": [
            "ToAvroCommandTest.java",
            "BaseCommandTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "parquet-cli/src/test/java/org/apache/parquet/cli/commands/ToAvroCommandTest.java",
        "buggy_files": [
            "pom.xml",
            "parquet-hadoop-bundle/pom.xml",
            "parquet-pig/pom.xml",
            "parquet-cascading/pom.xml",
            "parquet-encoding/pom.xml",
            "parquet-thrift/pom.xml",
            "parquet-generator/pom.xml",
            "parquet-jackson/pom.xml",
            "parquet-arrow/pom.xml",
            "parquet-cli/pom.xml",
            "parquet-common/pom.xml",
            "parquet-avro/pom.xml",
            "parquet-scala/pom.xml",
            "parquet-tools/pom.xml",
            "parquet-column/pom.xml",
            "parquet-protobuf/pom.xml",
            "parquet-benchmarks/pom.xml",
            "parquet-hive/pom.xml",
            "parquet-hive/parquet-hive-binding/pom.xml",
            "parquet-hive/parquet-hive-binding/parquet-hive-binding-bundle/pom.xml",
            "parquet-hive/parquet-hive-binding/parquet-hive-0.10-binding/pom.xml",
            "parquet-hive/parquet-hive-binding/parquet-hive-0.12-binding/pom.xml",
            "parquet-hive/parquet-hive-binding/parquet-hive-binding-factory/pom.xml",
            "parquet-hive/parquet-hive-binding/parquet-hive-binding-interface/pom.xml",
            "parquet-hive/parquet-hive-storage-handler/pom.xml",
            "parquet-hadoop/pom.xml",
            "parquet-cascading3/pom.xml",
            "parquet-pig-bundle/pom.xml",
            "parquet-scrooge/pom.xml",
            "parquet-format-structures/pom.xml",
            "parquet-hive-bundle/pom.xml",
            "parquet-cli/src/main/java/org/apache/parquet/cli/BaseCommand.java",
            "parquet-cli/src/main/java/org/apache/parquet/cli/json/AvroJson.java",
            "parquet-cli/src/main/java/org/apache/parquet/cli/commands/ToAvroCommand.java"
        ],
        "fixed": true
    }
]