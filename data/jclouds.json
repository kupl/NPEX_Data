{
    "jclouds_0676300": {
        "bug_id": "jclouds_0676300",
        "commit": "https://github.com/apache/jclouds/commit/0676300841773f9ca763be52714061268ce0f3f8",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/jclouds/blob/0676300841773f9ca763be52714061268ce0f3f8/compute/src/main/java/org/jclouds/compute/domain/internal/TemplateBuilderImpl.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/main/java/org/jclouds/compute/domain/internal/TemplateBuilderImpl.java?ref=0676300841773f9ca763be52714061268ce0f3f8",
                "deletions": 7,
                "filename": "compute/src/main/java/org/jclouds/compute/domain/internal/TemplateBuilderImpl.java",
                "patch": "@@ -139,17 +139,20 @@ protected TemplateBuilderImpl(@Memoized Supplier<Set<? extends Location>> locati\n     * \n     * If the input location is null, then the data isn't location sensitive\n     * \n-    * If the input location is a parent of the specified location, then we are ok.\n+    * If the input location is a child (descendent, recursively) of the specified location, then we are ok.\n     */\n    final Predicate<ComputeMetadata> locationPredicate = new Predicate<ComputeMetadata>() {\n       @Override\n       public boolean apply(ComputeMetadata input) {\n-         boolean returnVal = true;\n-         if (location != null && input.getLocation() != null)\n-            returnVal = location.equals(input.getLocation()) || location.getParent() != null\n-                  && location.getParent().equals(input.getLocation()) || location.getParent().getParent() != null\n-                  && location.getParent().getParent().equals(input.getLocation());\n-         return returnVal;\n+         if (location == null) return true;\n+         Location inputLocation = input.getLocation();\n+         if (inputLocation == null) return true;\n+         while (inputLocation!=null) {\n+            if (location.equals(inputLocation))\n+               return true;\n+            inputLocation = inputLocation.getParent();\n+         }\n+         return false;\n       }\n \n       @Override",
                "raw_url": "https://github.com/apache/jclouds/raw/0676300841773f9ca763be52714061268ce0f3f8/compute/src/main/java/org/jclouds/compute/domain/internal/TemplateBuilderImpl.java",
                "sha": "ae483158dd234bac84578a78541c5184727b253c",
                "status": "modified"
            }
        ],
        "message": "fixes in location containment predicate.\nthe grouping of and's and or's was wrong, causing an NPE in cloudstack tests when investigating parents;\nthe direction of containment (input should be descendent of location) was wrong also, i think,\nto judge by the description \"locationEqualsOrChildOf\";\ncode is now a loop rather than fixed investigation of 3 levels",
        "parent": "https://github.com/apache/jclouds/commit/2523d74ad1e98a1bb24839668d8d325e1516e726",
        "repo": "jclouds",
        "unit_tests": [
            "TemplateBuilderImplTest.java"
        ]
    },
    "jclouds_14ad171": {
        "bug_id": "jclouds_14ad171",
        "commit": "https://github.com/apache/jclouds/commit/14ad17108faab23a3792e372005c60e6ada293cd",
        "file": [
            {
                "additions": 133,
                "blob_url": "https://github.com/apache/jclouds/blob/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/domain/IpPermission.java",
                "changes": 141,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/main/java/org/jclouds/ec2/domain/IpPermission.java?ref=14ad17108faab23a3792e372005c60e6ada293cd",
                "deletions": 8,
                "filename": "apis/ec2/src/main/java/org/jclouds/ec2/domain/IpPermission.java",
                "patch": "@@ -18,49 +18,174 @@\n  */\n package org.jclouds.ec2.domain;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n import java.util.Set;\n \n+import com.google.common.base.Objects;\n+import com.google.common.collect.ImmutableMultimap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.LinkedHashMultimap;\n import com.google.common.collect.Multimap;\n+import com.google.common.collect.Sets;\n \n /**\n- * \n+ *\n  * @see <a href=\n  *      \"http://docs.amazonwebservices.com/AWSEC2/latest/APIReference/ApiReference-ItemType-IpPermissionType.html\"\n  *      />\n  * @author Adrian Cole\n  */\n-public interface IpPermission extends Comparable<IpPermission> {\n+public class IpPermission {\n+   public static Builder builder() {\n+      return new Builder();\n+   }\n+\n+   public static class Builder {\n+      private int fromPort;\n+      private int toPort;\n+      private IpProtocol ipProtocol;\n+      private Multimap<String, String> userIdGroupPairs = LinkedHashMultimap.create();\n+      private Set<String> groupIds = Sets.newLinkedHashSet();\n+      private Set<String> ipRanges = Sets.newLinkedHashSet();\n+\n+      public Builder fromPort(int fromPort) {\n+         this.fromPort = fromPort;\n+         return this;\n+      }\n+\n+      public Builder toPort(int toPort) {\n+         this.toPort = toPort;\n+         return this;\n+      }\n+\n+      public Builder ipProtocol(IpProtocol ipProtocol) {\n+         this.ipProtocol = checkNotNull(ipProtocol, \"ipProtocol\");\n+         return this;\n+      }\n+\n+      public Builder userIdGroupPair(String userId, String groupNameOrId) {\n+         this.userIdGroupPairs.put(checkNotNull(userId, \"userId\"), checkNotNull(groupNameOrId, \"groupNameOrId of %s\", userId));\n+         return this;\n+      }\n+\n+      public Builder userIdGroupPairs(Multimap<String, String> userIdGroupPairs) {\n+         this.userIdGroupPairs.putAll(checkNotNull(userIdGroupPairs, \"userIdGroupPairs\"));\n+         return this;\n+      }\n+\n+      public Builder ipRange(String ipRange) {\n+         this.ipRanges.add(ipRange);\n+         return this;\n+      }\n+\n+      public Builder ipRanges(Iterable<String> ipRanges) {\n+         Iterables.addAll(this.ipRanges, checkNotNull(ipRanges, \"ipRanges\"));\n+         return this;\n+      }\n+\n+      public Builder groupId(String groupId) {\n+         this.groupIds.add(checkNotNull(groupId, \"groupId\"));\n+         return this;\n+      }\n+\n+      public Builder groupIds(Iterable<String> groupIds) {\n+         Iterables.addAll(this.groupIds, checkNotNull(groupIds, \"groupIds\"));\n+         return this;\n+      }\n+\n+      public IpPermission build() {\n+         return new IpPermission(ipProtocol, fromPort, toPort, userIdGroupPairs, groupIds, ipRanges);\n+      }\n+   }\n+\n+   private final int fromPort;\n+   private final int toPort;\n+   private final Multimap<String, String> userIdGroupPairs;\n+   private final Set<String> groupIds;\n+   private final IpProtocol ipProtocol;\n+   private final Set<String> ipRanges;\n+\n+   public IpPermission(IpProtocol ipProtocol, int fromPort, int toPort, Multimap<String, String> userIdGroupPairs,\n+         Iterable<String> groupIds, Iterable<String> ipRanges) {\n+      this.fromPort = fromPort;\n+      this.toPort = toPort;\n+      this.userIdGroupPairs = ImmutableMultimap.copyOf(checkNotNull(userIdGroupPairs, \"userIdGroupPairs\"));\n+      this.ipProtocol = checkNotNull(ipProtocol, \"ipProtocol\");\n+      this.groupIds = ImmutableSet.copyOf(checkNotNull(groupIds, \"groupIds\"));\n+      this.ipRanges = ImmutableSet.copyOf(checkNotNull(ipRanges, \"ipRanges\"));\n+   }\n \n    /**\n     * Start of port range for the TCP and UDP protocols, or an ICMP type number.\n     * An ICMP type number of -1 indicates a wildcard (i.e., any ICMP type\n     * number).\n     */\n-   int getFromPort();\n+   public int getFromPort() {\n+      return fromPort;\n+   }\n \n    /**\n     * End of port range for the TCP and UDP protocols, or an ICMP code. An ICMP\n     * code of -1 indicates a wildcard (i.e., any ICMP code).\n     */\n-   int getToPort();\n+   public int getToPort() {\n+      return toPort;\n+   }\n \n    /**\n     * List of security group and user ID pairs.\n     */\n-   Multimap<String, String> getUserIdGroupPairs();\n+   public Multimap<String, String> getUserIdGroupPairs() {\n+      return userIdGroupPairs;\n+   }\n \n    /**\n     * List of security group Ids\n     */\n-   Set<String> getGroupIds();\n+   public Set<String> getGroupIds() {\n+      return groupIds;\n+   }\n \n    /**\n     * IP protocol\n     */\n-   IpProtocol getIpProtocol();\n+   public IpProtocol getIpProtocol() {\n+      return ipProtocol;\n+   }\n \n    /**\n     * IP ranges.\n     */\n-   Set<String> getIpRanges();\n+   public Set<String> getIpRanges() {\n+      return ipRanges;\n+   }\n+\n+   @Override\n+   public int hashCode() {\n+      return Objects.hashCode(fromPort, toPort, groupIds, ipProtocol, ipRanges, userIdGroupPairs);\n+   }\n+\n+   @Override\n+   public boolean equals(Object obj) {\n+      if (this == obj)\n+         return true;\n+      if (obj == null || getClass() != obj.getClass())\n+         return false;\n+      IpPermission that = IpPermission.class.cast(obj);\n+      return Objects.equal(this.fromPort, that.fromPort) && Objects.equal(this.toPort, that.toPort)\n+            && Objects.equal(this.groupIds, that.groupIds) && Objects.equal(this.ipProtocol, that.ipProtocol)\n+            && Objects.equal(this.ipRanges, that.ipRanges)\n+            && Objects.equal(this.userIdGroupPairs, that.userIdGroupPairs);\n+   }\n+\n+   @Override\n+   public String toString() {\n+      return Objects.toStringHelper(this).omitNullValues().add(\"fromPort\", fromPort == -1 ? null : fromPort)\n+            .add(\"toPort\", toPort == -1 ? null : toPort).add(\"groupIds\", groupIds.size() == 0 ? null : groupIds)\n+            .add(\"ipProtocol\", ipProtocol).add(\"ipRanges\", ipRanges.size() == 0 ? null : ipRanges)\n+            .add(\"userIdGroupPairs\", userIdGroupPairs.size() == 0 ? null : userIdGroupPairs).toString();\n+   }\n+\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/jclouds/raw/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/domain/IpPermission.java",
                "sha": "69bb6a7ad3e5c3d48a0e1ba089ef2ab58620f1a7",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/jclouds/blob/363d996f19a6eda233e6ed004f7192e2902ccf73/apis/ec2/src/main/java/org/jclouds/ec2/domain/IpPermissionImpl.java",
                "changes": 226,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/main/java/org/jclouds/ec2/domain/IpPermissionImpl.java?ref=363d996f19a6eda233e6ed004f7192e2902ccf73",
                "deletions": 226,
                "filename": "apis/ec2/src/main/java/org/jclouds/ec2/domain/IpPermissionImpl.java",
                "patch": "@@ -1,226 +0,0 @@\n-/**\n- * Licensed to jclouds, Inc. (jclouds) under one or more\n- * contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  jclouds licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.jclouds.ec2.domain;\n-\n-import static com.google.common.base.Preconditions.checkNotNull;\n-\n-import java.util.Set;\n-\n-import com.google.common.collect.ImmutableMultimap;\n-import com.google.common.collect.ImmutableSet;\n-import com.google.common.collect.Iterables;\n-import com.google.common.collect.LinkedHashMultimap;\n-import com.google.common.collect.Multimap;\n-import com.google.common.collect.Sets;\n-\n-/**\n- * \n- * @see <a href=\n- *      \"http://docs.amazonwebservices.com/AWSEC2/latest/APIReference/ApiReference-ItemType-IpPermissionType.html\"\n- *      />\n- * @author Adrian Cole\n- */\n-public class IpPermissionImpl implements IpPermission {\n-   public static Builder builder() {\n-      return new Builder();\n-   }\n-\n-   public static class Builder {\n-      private int fromPort;\n-      private int toPort;\n-      private IpProtocol ipProtocol;\n-      private Multimap<String, String> userIdGroupPairs = LinkedHashMultimap.create();\n-      private Set<String> groupIds = Sets.newLinkedHashSet();\n-      private Set<String> ipRanges = Sets.newLinkedHashSet();\n-\n-      public Builder fromPort(int fromPort) {\n-         this.fromPort = fromPort;\n-         return this;\n-      }\n-\n-      public Builder toPort(int toPort) {\n-         this.fromPort = toPort;\n-         return this;\n-      }\n-\n-      public Builder ipProtocol(IpProtocol ipProtocol) {\n-         this.ipProtocol = ipProtocol;\n-         return this;\n-      }\n-\n-      public Builder userIdGroupPair(String userId, String groupNameOrId) {\n-         this.userIdGroupPairs.put(userId, groupNameOrId);\n-         return this;\n-      }\n-\n-      public Builder userIdGroupPairs(Multimap<String, String> userIdGroupPairs) {\n-         this.userIdGroupPairs.putAll(userIdGroupPairs);\n-         return this;\n-      }\n-\n-      public Builder ipRange(String ipRange) {\n-         this.ipRanges.add(ipRange);\n-         return this;\n-      }\n-\n-      public Builder ipRanges(Iterable<String> ipRanges) {\n-         Iterables.addAll(this.ipRanges, ipRanges);\n-         return this;\n-      }\n-\n-      public Builder groupId(String groupId) {\n-         this.groupIds.add(groupId);\n-         return this;\n-      }\n-\n-      public Builder groupIds(Iterable<String> groupIds) {\n-         Iterables.addAll(this.groupIds, groupIds);\n-         return this;\n-      }\n-\n-      public IpPermission build() {\n-         return new IpPermissionImpl(ipProtocol, fromPort, toPort, userIdGroupPairs, groupIds, ipRanges);\n-      }\n-   }\n-\n-   private final int fromPort;\n-   private final int toPort;\n-   private final Multimap<String, String> userIdGroupPairs;\n-   private final Set<String> groupIds;\n-   private final IpProtocol ipProtocol;\n-   private final Set<String> ipRanges;\n-\n-   public IpPermissionImpl(IpProtocol ipProtocol, int fromPort, int toPort,\n-         Multimap<String, String> userIdGroupPairs, Iterable<String> groupIds, Iterable<String> ipRanges) {\n-      this.fromPort = fromPort;\n-      this.toPort = toPort;\n-      this.userIdGroupPairs = ImmutableMultimap.copyOf(checkNotNull(userIdGroupPairs, \"userIdGroupPairs\"));\n-      this.ipProtocol = checkNotNull(ipProtocol, \"ipProtocol\");\n-      this.groupIds = ImmutableSet.copyOf(checkNotNull(groupIds, \"groupIds\"));\n-      this.ipRanges = ImmutableSet.copyOf(checkNotNull(ipRanges, \"ipRanges\"));\n-   }\n-\n-   /**\n-    * {@inheritDoc}\n-    */\n-   public int compareTo(IpPermission o) {\n-      return (this == o) ? 0 : getIpProtocol().compareTo(o.getIpProtocol());\n-   }\n-\n-   /**\n-    * {@inheritDoc}\n-    */\n-   @Override\n-   public int getFromPort() {\n-      return fromPort;\n-   }\n-\n-   /**\n-    * {@inheritDoc}\n-    */\n-   @Override\n-   public int getToPort() {\n-      return toPort;\n-   }\n-\n-   /**\n-    * {@inheritDoc}\n-    */\n-   @Override\n-   public Multimap<String, String> getUserIdGroupPairs() {\n-      return userIdGroupPairs;\n-   }\n-\n-   /**\n-    * {@inheritDoc}\n-    */\n-   @Override\n-   public Set<String> getGroupIds() {\n-      return groupIds;\n-   }\n-\n-   /**\n-    * {@inheritDoc}\n-    */\n-   @Override\n-   public IpProtocol getIpProtocol() {\n-      return ipProtocol;\n-   }\n-\n-   /**\n-    * {@inheritDoc}\n-    */\n-   @Override\n-   public Set<String> getIpRanges() {\n-      return ipRanges;\n-   }\n-\n-   @Override\n-   public int hashCode() {\n-      final int prime = 31;\n-      int result = 1;\n-      result = prime * result + fromPort;\n-      result = prime * result + ((groupIds == null) ? 0 : groupIds.hashCode());\n-      result = prime * result + ((ipProtocol == null) ? 0 : ipProtocol.hashCode());\n-      result = prime * result + ((ipRanges == null) ? 0 : ipRanges.hashCode());\n-      result = prime * result + toPort;\n-      result = prime * result + ((userIdGroupPairs == null) ? 0 : userIdGroupPairs.hashCode());\n-      return result;\n-   }\n-\n-   @Override\n-   public boolean equals(Object obj) {\n-      if (this == obj)\n-         return true;\n-      if (obj == null)\n-         return false;\n-      if (getClass() != obj.getClass())\n-         return false;\n-      IpPermissionImpl other = (IpPermissionImpl) obj;\n-      if (fromPort != other.fromPort)\n-         return false;\n-      if (groupIds == null) {\n-         if (other.groupIds != null)\n-            return false;\n-      } else if (!groupIds.equals(other.groupIds))\n-         return false;\n-      if (ipProtocol != other.ipProtocol)\n-         return false;\n-      if (ipRanges == null) {\n-         if (other.ipRanges != null)\n-            return false;\n-      } else if (!ipRanges.equals(other.ipRanges))\n-         return false;\n-      if (toPort != other.toPort)\n-         return false;\n-      if (userIdGroupPairs == null) {\n-         if (other.userIdGroupPairs != null)\n-            return false;\n-      } else if (!userIdGroupPairs.equals(other.userIdGroupPairs))\n-         return false;\n-      return true;\n-   }\n-\n-   @Override\n-   public String toString() {\n-      return \"[fromPort=\" + fromPort + \", toPort=\" + toPort + \", userIdGroupPairs=\" + userIdGroupPairs + \", groupIds=\"\n-            + groupIds + \", ipProtocol=\" + ipProtocol + \", ipRanges=\" + ipRanges + \"]\";\n-   }\n-\n-}",
                "raw_url": "https://github.com/apache/jclouds/raw/363d996f19a6eda233e6ed004f7192e2902ccf73/apis/ec2/src/main/java/org/jclouds/ec2/domain/IpPermissionImpl.java",
                "sha": "fe801981ee8b6672279544a1c38f65a025654858",
                "status": "removed"
            },
            {
                "additions": 137,
                "blob_url": "https://github.com/apache/jclouds/blob/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/domain/SecurityGroup.java",
                "changes": 194,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/main/java/org/jclouds/ec2/domain/SecurityGroup.java?ref=14ad17108faab23a3792e372005c60e6ada293cd",
                "deletions": 57,
                "filename": "apis/ec2/src/main/java/org/jclouds/ec2/domain/SecurityGroup.java",
                "patch": "@@ -24,37 +24,141 @@\n \n import org.jclouds.javax.annotation.Nullable;\n \n+import com.google.common.base.Objects;\n+import com.google.common.base.Objects.ToStringHelper;\n+import com.google.common.collect.ForwardingSet;\n+import com.google.common.collect.ImmutableSet;\n+\n /**\n- * \n+ *\n  * @see <a href=\n  *      \"http://docs.amazonwebservices.com/AWSEC2/latest/APIReference/ApiReference-ItemType-SecurityGroupItemType.html\"\n  *      />\n  * @author Adrian Cole\n  */\n-public class SecurityGroup {\n+public class SecurityGroup extends ForwardingSet<IpPermission> {\n+\n+   public static Builder<?> builder() {\n+      return new ConcreteBuilder();\n+   }\n+\n+   public Builder<?> toBuilder() {\n+      return new ConcreteBuilder().fromSecurityGroup(this);\n+   }\n+\n+   public static abstract class Builder<T extends Builder<T>> {\n+      protected abstract T self();\n+\n+      protected String region;\n+      protected String id;\n+      protected String name;\n+      protected String ownerId;\n+      protected String description;\n+      protected ImmutableSet.Builder<IpPermission> ipPermissions = ImmutableSet.<IpPermission> builder();\n+\n+      /**\n+       * @see SecurityGroup#getRegion()\n+       */\n+      public T region(String region) {\n+         this.region = region;\n+         return self();\n+      }\n+\n+      /**\n+       * @see SecurityGroup#getId()\n+       */\n+      public T id(String id) {\n+         this.id = id;\n+         return self();\n+      }\n+\n+      /**\n+       * @see SecurityGroup#getName()\n+       */\n+      public T name(String name) {\n+         this.name = name;\n+         return self();\n+      }\n+\n+      /**\n+       * @see SecurityGroup#getOwnerId()\n+       */\n+      public T ownerId(String ownerId) {\n+         this.ownerId = ownerId;\n+         return self();\n+      }\n+\n+      /**\n+       * @see SecurityGroup#getDescription()\n+       */\n+      public T description(String description) {\n+         this.description = description;\n+         return self();\n+      }\n+\n+      /**\n+       * @see SecurityGroup#delegate()\n+       */\n+      public T role(IpPermission role) {\n+         this.ipPermissions.add(role);\n+         return self();\n+      }\n+\n+      /**\n+       * @see SecurityGroup#delegate()\n+       */\n+      public T ipPermissions(Iterable<IpPermission> ipPermissions) {\n+         this.ipPermissions.addAll(checkNotNull(ipPermissions, \"ipPermissions\"));\n+         return self();\n+      }\n+\n+      /**\n+       * @see SecurityGroup#delegate()\n+       */\n+      public T ipPermission(IpPermission ipPermission) {\n+         this.ipPermissions.add(checkNotNull(ipPermission, \"ipPermission\"));\n+         return self();\n+      }\n+\n+      public SecurityGroup build() {\n+         return new SecurityGroup(region, id, name, ownerId, description, ipPermissions.build());\n+      }\n+\n+      public T fromSecurityGroup(SecurityGroup in) {\n+         return region(in.region).id(in.id).name(in.name).ownerId(in.ownerId).description(in.description)\n+               .ipPermissions(in);\n+      }\n+   }\n+\n+   private static class ConcreteBuilder extends Builder<ConcreteBuilder> {\n+      @Override\n+      protected ConcreteBuilder self() {\n+         return this;\n+      }\n+   }\n \n    private final String region;\n    private final String id;\n    private final String name;\n    private final String ownerId;\n    private final String description;\n-   private final Set<IpPermissionImpl> ipPermissions;\n+   private final Set<IpPermission> ipPermissions;\n \n    public SecurityGroup(String region, String id, String name, String ownerId, String description,\n-         Set<IpPermissionImpl> ipPermissions) {\n+         Iterable<IpPermission> ipPermissions) {\n       this.region = checkNotNull(region, \"region\");\n       this.id = id;\n       this.name = name;\n       this.ownerId = ownerId;\n       this.description = description;\n-      this.ipPermissions = ipPermissions;\n+      this.ipPermissions = ImmutableSet.copyOf(checkNotNull(ipPermissions, \"ipPermissions\"));\n    }\n-   \n+\n    /**\n     * To be removed in jclouds 1.6 <h4>Warning</h4>\n-    * \n-    * Especially on EC2 clones that may not support regions, this value is fragile. Consider\n-    * alternate means to determine context.\n+    *\n+    * Especially on EC2 clones that may not support regions, this value is\n+    * fragile. Consider alternate means to determine context.\n     */\n    @Deprecated\n    public String getRegion() {\n@@ -91,70 +195,46 @@ public String getDescription() {\n    }\n \n    /**\n-    * Set of IP permissions associated with the security group.\n+    * Please use this class as a collection\n     */\n-   public Set<IpPermissionImpl> getIpPermissions() {\n+   @Deprecated\n+   public Set<IpPermission> getIpPermissions() {\n       return ipPermissions;\n    }\n \n    @Override\n    public int hashCode() {\n-      final int prime = 31;\n-      int result = 1;\n-      result = prime * result + ((description == null) ? 0 : description.hashCode());\n-      result = prime * result + ((id == null) ? 0 : id.hashCode());\n-      result = prime * result + ((ipPermissions == null) ? 0 : ipPermissions.hashCode());\n-      result = prime * result + ((name == null) ? 0 : name.hashCode());\n-      result = prime * result + ((ownerId == null) ? 0 : ownerId.hashCode());\n-      result = prime * result + ((region == null) ? 0 : region.hashCode());\n-      return result;\n+      return Objects.hashCode(region, id, name, ownerId, description, ipPermissions);\n    }\n \n    @Override\n    public boolean equals(Object obj) {\n       if (this == obj)\n          return true;\n-      if (obj == null)\n-         return false;\n-      if (getClass() != obj.getClass())\n-         return false;\n-      SecurityGroup other = (SecurityGroup) obj;\n-      if (description == null) {\n-         if (other.description != null)\n-            return false;\n-      } else if (!description.equals(other.description))\n-         return false;\n-      if (id == null) {\n-         if (other.id != null)\n-            return false;\n-      } else if (!id.equals(other.id))\n-         return false;\n-      if (ipPermissions == null) {\n-         if (other.ipPermissions != null)\n-            return false;\n-      } else if (!ipPermissions.equals(other.ipPermissions))\n+      if (obj == null || getClass() != obj.getClass())\n          return false;\n-      if (name == null) {\n-         if (other.name != null)\n-            return false;\n-      } else if (!name.equals(other.name))\n-         return false;\n-      if (ownerId == null) {\n-         if (other.ownerId != null)\n-            return false;\n-      } else if (!ownerId.equals(other.ownerId))\n-         return false;\n-      if (region == null) {\n-         if (other.region != null)\n-            return false;\n-      } else if (!region.equals(other.region))\n-         return false;\n-      return true;\n+      SecurityGroup that = SecurityGroup.class.cast(obj);\n+      return Objects.equal(this.region, that.region)\n+            && Objects.equal(this.id, that.id)\n+            && Objects.equal(this.name, that.name)\n+            && Objects.equal(this.ownerId, that.ownerId)\n+            && Objects.equal(this.description, that.description)\n+            && Objects.equal(this.ipPermissions, that.ipPermissions);\n+   }\n+\n+   protected ToStringHelper string() {\n+      return Objects.toStringHelper(this).omitNullValues().add(\"region\", region).add(\"id\", id).add(\"name\", name)\n+            .add(\"ownerId\", ownerId).add(\"description\", description)\n+            .add(\"ipPermissions\", ipPermissions.size() == 0 ? null : ipPermissions);\n    }\n \n    @Override\n    public String toString() {\n-      return \"[region=\" + region + \", id=\" + id + \", name=\" + name + \", ownerId=\" + ownerId + \", description=\"\n-            + description + \", ipPermissions=\" + ipPermissions + \"]\";\n+      return string().toString();\n+   }\n+\n+   @Override\n+   protected Set<IpPermission> delegate() {\n+      return ipPermissions;\n    }\n }",
                "raw_url": "https://github.com/apache/jclouds/raw/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/domain/SecurityGroup.java",
                "sha": "f13d1e583ae550994328db5d4fd15d8d5f4e959d",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jclouds/blob/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/util/IpPermissions.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/main/java/org/jclouds/ec2/util/IpPermissions.java?ref=14ad17108faab23a3792e372005c60e6ada293cd",
                "deletions": 5,
                "filename": "apis/ec2/src/main/java/org/jclouds/ec2/util/IpPermissions.java",
                "patch": "@@ -24,7 +24,6 @@\n import java.util.Map.Entry;\n \n import org.jclouds.ec2.domain.IpPermission;\n-import org.jclouds.ec2.domain.IpPermissionImpl;\n import org.jclouds.ec2.domain.IpProtocol;\n import org.jclouds.util.Maps2;\n \n@@ -37,12 +36,12 @@\n import com.google.common.collect.Multimaps;\n \n /**\n- * \n+ *\n  * Shortcut to create ingress rules\n- * \n+ *\n  * @author Adrian Cole\n  */\n-public class IpPermissions extends IpPermissionImpl {\n+public class IpPermissions extends IpPermission {\n \n    protected IpPermissions(IpProtocol ipProtocol, int fromPort, int toPort,\n          Multimap<String, String> userIdGroupPairs, Iterable<String> groupIds, Iterable<String> ipRanges) {\n@@ -139,7 +138,7 @@ public ToSourceSelection andCode(int code) {\n       public ToPortSelection fromPort(int port) {\n          return new ToPortSelection(getIpProtocol(), port);\n       }\n-      \n+\n       public ToSourceSelection port(int port) {\n          return new ToSourceSelection(getIpProtocol(), port, port);\n       }",
                "raw_url": "https://github.com/apache/jclouds/raw/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/util/IpPermissions.java",
                "sha": "1dad22db5fb2474a369be101382be6af3d21ec11",
                "status": "modified"
            },
            {
                "additions": 71,
                "blob_url": "https://github.com/apache/jclouds/blob/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/xml/DescribeSecurityGroupsResponseHandler.java",
                "changes": 170,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/main/java/org/jclouds/ec2/xml/DescribeSecurityGroupsResponseHandler.java?ref=14ad17108faab23a3792e372005c60e6ada293cd",
                "deletions": 99,
                "filename": "apis/ec2/src/main/java/org/jclouds/ec2/xml/DescribeSecurityGroupsResponseHandler.java",
                "patch": "@@ -18,139 +18,111 @@\n  */\n package org.jclouds.ec2.xml;\n \n-import static org.jclouds.util.SaxUtils.currentOrNegative;\n-import static org.jclouds.util.SaxUtils.currentOrNull;\n import static org.jclouds.util.SaxUtils.equalsOrSuffix;\n \n import java.util.Set;\n \n import javax.inject.Inject;\n \n-import org.jclouds.aws.util.AWSUtils;\n-import org.jclouds.ec2.domain.IpPermissionImpl;\n-import org.jclouds.ec2.domain.IpProtocol;\n import org.jclouds.ec2.domain.SecurityGroup;\n+import org.jclouds.http.HttpRequest;\n import org.jclouds.http.functions.ParseSax;\n-import org.jclouds.location.Region;\n+import org.jclouds.http.functions.ParseSax.HandlerForGeneratedRequestWithResult;\n import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n \n-import com.google.common.base.Supplier;\n import com.google.common.collect.ImmutableSet;\n-import com.google.common.collect.LinkedHashMultimap;\n-import com.google.common.collect.Multimap;\n-import com.google.common.collect.Sets;\n+import com.google.common.collect.ImmutableSet.Builder;\n \n /**\n  * Parses: DescribeSecurityGroupsResponse\n  * xmlns=\"http://ec2.amazonaws.com/doc/2010-06-15/\"\n- * \n+ *\n  * @see <a href=\n- *      \"http://docs.amazonwebservices.com/AWSEC2/latest/APIReference/index.html?ApiReference-query-DescribeSecurityGroups.html\"\n+ *      \"http://docs.amazonwebservices.com/AWSEC2/latest/APIReference/index.html?ApiReference-query-DescribesecurityGroupInfo.html\"\n  *      />\n  * @author Adrian Cole\n  */\n public class DescribeSecurityGroupsResponseHandler extends\n       ParseSax.HandlerForGeneratedRequestWithResult<Set<SecurityGroup>> {\n-   @Inject\n-   @Region\n-   Supplier<String> defaultRegion;\n+\n+   private final SecurityGroupHandler securityGroupHandler;\n \n    private StringBuilder currentText = new StringBuilder();\n-   private Set<SecurityGroup> securtyGroups = Sets.newLinkedHashSet();\n-   private String groupId;\n-   private String groupName;\n-   private String ownerId;\n-   private String groupDescription;\n-   private Set<IpPermissionImpl> ipPermissions = Sets.newLinkedHashSet();\n-   private int fromPort;\n-   private int toPort;\n-   private Multimap<String, String> groups = LinkedHashMultimap.create();\n-   private String userId;\n-   private String userIdGroupName;\n-   private IpProtocol ipProtocol;\n-   private Set<String> ipRanges = Sets.newLinkedHashSet();\n-\n-   private boolean inIpPermissions;\n-   private boolean inIpRanges;\n-   private boolean inGroups;\n+   private Builder<SecurityGroup> securityGroups = ImmutableSet.<SecurityGroup> builder();\n+   private boolean inSecurityGroupInfo;\n+\n+   protected int itemDepth;\n+\n+   @Inject\n+   public DescribeSecurityGroupsResponseHandler(SecurityGroupHandler securityGroupHandler) {\n+      this.securityGroupHandler = securityGroupHandler;\n+   }\n+\n+   @Override\n+   public HandlerForGeneratedRequestWithResult<Set<SecurityGroup>> setContext(HttpRequest request) {\n+      securityGroupHandler.setContext(request);\n+      return super.setContext(request);\n+   }\n \n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n    public Set<SecurityGroup> getResult() {\n-      return securtyGroups;\n+      return securityGroups.build();\n    }\n \n-   public void startElement(String uri, String name, String qName, Attributes attrs) {\n-      if (equalsOrSuffix(qName, \"ipPermissions\")) {\n-         inIpPermissions = true;\n-      } else if (equalsOrSuffix(qName, \"ipRanges\")) {\n-         inIpRanges = true;\n-      } else if (equalsOrSuffix(qName, \"groups\")) {\n-         inGroups = true;\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public void startElement(String url, String name, String qName, Attributes attributes) throws SAXException {\n+      if (equalsOrSuffix(qName, \"item\")) {\n+         itemDepth++;\n+      } else if (equalsOrSuffix(qName, \"securityGroupInfo\")) {\n+         inSecurityGroupInfo = true;\n+      }\n+      if (inSecurityGroupInfo) {\n+         securityGroupHandler.startElement(url, name, qName, attributes);\n       }\n    }\n \n-   public void endElement(String uri, String name, String qName) {\n-      if (equalsOrSuffix(qName, \"groupName\")) {\n-         if (!inGroups)\n-            this.groupName = currentOrNull(currentText);\n-         else\n-            this.userIdGroupName = currentOrNull(currentText);\n-      } else if (equalsOrSuffix(qName, \"groupId\")) {\n-         this.groupId = currentOrNull(currentText);\n-      } else if (equalsOrSuffix(qName, \"ownerId\")) {\n-         this.ownerId = currentOrNull(currentText);\n-      } else if (equalsOrSuffix(qName, \"userId\")) {\n-         this.userId = currentOrNull(currentText);\n-      } else if (equalsOrSuffix(qName, \"groupDescription\")) {\n-         this.groupDescription = currentOrNull(currentText);\n-      } else if (equalsOrSuffix(qName, \"ipProtocol\")) {\n-         // Algorete: ipProtocol can be an empty tag on EC2 clone (e.g. OpenStack EC2)\n-         this.ipProtocol = IpProtocol.fromValue(currentOrNegative(currentText));\n-      } else if (equalsOrSuffix(qName, \"fromPort\")) {\n-         // Algorete: fromPort can be an empty tag on EC2 clone (e.g. OpenStack EC2)\n-         this.fromPort = Integer.parseInt(currentOrNegative(currentText));\n-      } else if (equalsOrSuffix(qName, \"toPort\")) {\n-         // Algorete: toPort can be an empty tag on EC2 clone (e.g. OpenStack EC2)\n-         this.toPort = Integer.parseInt(currentOrNegative(currentText));\n-      } else if (equalsOrSuffix(qName, \"cidrIp\")) {\n-         this.ipRanges.add(currentOrNull(currentText));\n-      } else if (equalsOrSuffix(qName, \"ipPermissions\")) {\n-         inIpPermissions = false;\n-      } else if (equalsOrSuffix(qName, \"ipRanges\")) {\n-         inIpRanges = false;\n-      } else if (equalsOrSuffix(qName, \"groups\")) {\n-         inGroups = false;\n-      } else if (equalsOrSuffix(qName, \"item\")) {\n-         if (inIpPermissions && !inIpRanges && !inGroups) {\n-            // TODO groups? we need an example of VPC stuff\n-            ipPermissions.add(new IpPermissionImpl(ipProtocol, fromPort, toPort, groups, ImmutableSet.<String> of(),\n-                  ipRanges));\n-            this.fromPort = -1;\n-            this.toPort = -1;\n-            this.groups = LinkedHashMultimap.create();\n-            this.ipProtocol = null;\n-            this.ipRanges = Sets.newLinkedHashSet();\n-         } else if (inIpPermissions && !inIpRanges && inGroups) {\n-            if (userId != null && userIdGroupName != null)\n-               this.groups.put(userId, userIdGroupName);\n-            this.userId = null;\n-            this.userIdGroupName = null;\n-         } else if (!inIpPermissions && !inIpRanges && !inGroups) {\n-            String region = AWSUtils.findRegionInArgsOrNull(getRequest());\n-            if (region == null)\n-               region = defaultRegion.get();\n-            securtyGroups.add(new SecurityGroup(region, groupId, groupName, ownerId, groupDescription, ipPermissions));\n-            this.groupName = null;\n-            this.groupId = null;\n-            this.ownerId = null;\n-            this.groupDescription = null;\n-            this.ipPermissions = Sets.newLinkedHashSet();\n-         }\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public void endElement(String uri, String name, String qName) throws SAXException {\n+      if (equalsOrSuffix(qName, \"item\")) {\n+         endItem(uri, name, qName);\n+         itemDepth--;\n+      } else if (equalsOrSuffix(qName, \"securityGroupInfo\")) {\n+         inSecurityGroupInfo = false;\n+      } else if (inSecurityGroupInfo) {\n+         securityGroupHandler.endElement(uri, name, qName);\n       }\n-\n       currentText = new StringBuilder();\n    }\n \n+   protected void endItem(String uri, String name, String qName) throws SAXException {\n+      if (inSecurityGroupInfo) {\n+         if (itemDepth == 1)\n+            securityGroups.add(securityGroupHandler.getResult());\n+         else\n+            securityGroupHandler.endElement(uri, name, qName);\n+      }\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n    public void characters(char ch[], int start, int length) {\n-      currentText.append(ch, start, length);\n+      if (inSecurityGroupInfo) {\n+         securityGroupHandler.characters(ch, start, length);\n+      } else {\n+         currentText.append(ch, start, length);\n+      }\n    }\n+\n }",
                "raw_url": "https://github.com/apache/jclouds/raw/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/xml/DescribeSecurityGroupsResponseHandler.java",
                "sha": "3db80b94712e5c80d809da33ae70de1c14048c70",
                "status": "modified"
            },
            {
                "additions": 75,
                "blob_url": "https://github.com/apache/jclouds/blob/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/xml/IpPermissionHandler.java",
                "changes": 75,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/main/java/org/jclouds/ec2/xml/IpPermissionHandler.java?ref=14ad17108faab23a3792e372005c60e6ada293cd",
                "deletions": 0,
                "filename": "apis/ec2/src/main/java/org/jclouds/ec2/xml/IpPermissionHandler.java",
                "patch": "@@ -0,0 +1,75 @@\n+package org.jclouds.ec2.xml;\n+\n+import static org.jclouds.util.SaxUtils.currentOrNegative;\n+import static org.jclouds.util.SaxUtils.currentOrNull;\n+import static org.jclouds.util.SaxUtils.equalsOrSuffix;\n+\n+import org.jclouds.ec2.domain.IpPermission;\n+import org.jclouds.ec2.domain.IpProtocol;\n+import org.jclouds.http.functions.ParseSax;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ *\n+ * @author Adrian Cole\n+ */\n+public class IpPermissionHandler extends ParseSax.HandlerForGeneratedRequestWithResult<IpPermission> {\n+\n+   private StringBuilder currentText = new StringBuilder();\n+   private IpPermission.Builder builder = IpPermission.builder();\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public IpPermission getResult() {\n+      try {\n+         return builder.build();\n+      } finally {\n+         builder = IpPermission.builder();\n+      }\n+   }\n+\n+   private String userId;\n+   private String groupId;\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public void endElement(String uri, String name, String qName) throws SAXException {\n+      if (equalsOrSuffix(qName, \"ipProtocol\")) {\n+         // Algorete: ipProtocol can be an empty tag on EC2 clone (e.g.\n+         // OpenStack EC2)\n+         builder.ipProtocol(IpProtocol.fromValue(currentOrNegative(currentText)));\n+      } else if (equalsOrSuffix(qName, \"fromPort\")) {\n+         // Algorete: fromPort can be an empty tag on EC2 clone (e.g. OpenStack\n+         // EC2)\n+         builder.fromPort(Integer.parseInt(currentOrNegative(currentText)));\n+      } else if (equalsOrSuffix(qName, \"toPort\")) {\n+         // Algorete: toPort can be an empty tag on EC2 clone (e.g. OpenStack\n+         // EC2)\n+         builder.toPort(Integer.parseInt(currentOrNegative(currentText)));\n+      } else if (equalsOrSuffix(qName, \"cidrIp\")) {\n+         builder.ipRange(currentOrNull(currentText));\n+      } else if (equalsOrSuffix(qName, \"userId\")) {\n+         this.userId = currentOrNull(currentText);\n+      } else if (equalsOrSuffix(qName, \"groupName\") || equalsOrSuffix(qName, \"groupId\")) {\n+         this.groupId = currentOrNull(currentText);\n+      } else if (equalsOrSuffix(qName, \"item\")) {\n+         if (userId != null && groupId != null)\n+            builder.userIdGroupPair(userId, groupId);\n+         userId = groupId = null;\n+      }\n+      currentText = new StringBuilder();\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public void characters(char ch[], int start, int length) {\n+      currentText.append(ch, start, length);\n+   }\n+\n+}",
                "raw_url": "https://github.com/apache/jclouds/raw/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/xml/IpPermissionHandler.java",
                "sha": "8045feee4067619cb4974ee27b1c17a9ef0eeb5e",
                "status": "added"
            },
            {
                "additions": 145,
                "blob_url": "https://github.com/apache/jclouds/blob/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/xml/SecurityGroupHandler.java",
                "changes": 145,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/main/java/org/jclouds/ec2/xml/SecurityGroupHandler.java?ref=14ad17108faab23a3792e372005c60e6ada293cd",
                "deletions": 0,
                "filename": "apis/ec2/src/main/java/org/jclouds/ec2/xml/SecurityGroupHandler.java",
                "patch": "@@ -0,0 +1,145 @@\n+/**\n+ * Licensed to jclouds, Inc. (jclouds) under one or more\n+ * contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  jclouds licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.jclouds.ec2.xml;\n+\n+import static org.jclouds.util.SaxUtils.currentOrNull;\n+import static org.jclouds.util.SaxUtils.equalsOrSuffix;\n+\n+import org.jclouds.aws.util.AWSUtils;\n+import org.jclouds.ec2.domain.SecurityGroup;\n+import org.jclouds.http.HttpRequest;\n+import org.jclouds.http.functions.ParseSax;\n+import org.jclouds.http.functions.ParseSax.HandlerForGeneratedRequestWithResult;\n+import org.jclouds.location.Region;\n+import org.jclouds.rest.internal.GeneratedHttpRequest;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+\n+import com.google.common.base.Supplier;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Adrian Cole\n+ */\n+public class SecurityGroupHandler extends ParseSax.HandlerForGeneratedRequestWithResult<SecurityGroup> {\n+\n+   protected final IpPermissionHandler ipPermissionHandler;\n+   protected final Supplier<String> defaultRegion;\n+\n+   protected StringBuilder currentText = new StringBuilder();\n+   protected SecurityGroup.Builder<?> builder;\n+   protected boolean inIpPermissions;\n+\n+   protected int itemDepth;\n+\n+   protected String region;\n+\n+   @Inject\n+   public SecurityGroupHandler(IpPermissionHandler ipPermissionHandler, @Region Supplier<String> defaultRegion) {\n+      this.ipPermissionHandler = ipPermissionHandler;\n+      this.defaultRegion = defaultRegion;\n+   }\n+\n+   protected SecurityGroup.Builder<?> builder() {\n+      return SecurityGroup.builder().region(region);\n+   }\n+\n+   @Override\n+   public HandlerForGeneratedRequestWithResult<SecurityGroup> setContext(HttpRequest request) {\n+      region = AWSUtils.findRegionInArgsOrNull(GeneratedHttpRequest.class.cast(request));\n+      if (region == null)\n+         region = defaultRegion.get();\n+      builder = builder();\n+      return super.setContext(request);\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public SecurityGroup getResult() {\n+      try {\n+         return builder.build();\n+      } finally {\n+         builder = builder();\n+      }\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public void startElement(String url, String name, String qName, Attributes attributes) throws SAXException {\n+      if (equalsOrSuffix(qName, \"item\")) {\n+         itemDepth++;\n+      } else if (equalsOrSuffix(qName, \"ipPermissions\")) {\n+         inIpPermissions = true;\n+      }\n+      if (inIpPermissions) {\n+         ipPermissionHandler.startElement(url, name, qName, attributes);\n+      }\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public void endElement(String uri, String name, String qName) throws SAXException {\n+      if (equalsOrSuffix(qName, \"item\")) {\n+         endItem(uri, name, qName);\n+         itemDepth--;\n+      } else if (equalsOrSuffix(qName, \"ipPermissions\")) {\n+         inIpPermissions = false;\n+         itemDepth = 0;\n+      } else if (inIpPermissions) {\n+         ipPermissionHandler.endElement(uri, name, qName);\n+      } else if (equalsOrSuffix(qName, \"groupName\")) {\n+         builder.name(currentOrNull(currentText));\n+      } else if (equalsOrSuffix(qName, \"groupId\")) {\n+         builder.id(currentOrNull(currentText));\n+      } else if (equalsOrSuffix(qName, \"ownerId\")) {\n+         builder.ownerId(currentOrNull(currentText));\n+      } else if (equalsOrSuffix(qName, \"groupDescription\")) {\n+         builder.description(currentOrNull(currentText));\n+      }\n+      currentText = new StringBuilder();\n+   }\n+\n+   protected void endItem(String uri, String name, String qName) throws SAXException {\n+      if (inIpPermissions) {\n+         if (itemDepth == 2)\n+            builder.ipPermission(ipPermissionHandler.getResult());\n+         else\n+            ipPermissionHandler.endElement(uri, name, qName);\n+      }\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public void characters(char ch[], int start, int length) {\n+      if (inIpPermissions) {\n+         ipPermissionHandler.characters(ch, start, length);\n+      } else {\n+         currentText.append(ch, start, length);\n+      }\n+   }\n+\n+}",
                "raw_url": "https://github.com/apache/jclouds/raw/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/xml/SecurityGroupHandler.java",
                "sha": "aeb7dbdec02b8de88e4f71cc2aa6581ab4d078dd",
                "status": "added"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/jclouds/blob/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/test/java/org/jclouds/ec2/xml/DescribeSecurityGroupsResponseHandlerTest.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/test/java/org/jclouds/ec2/xml/DescribeSecurityGroupsResponseHandlerTest.java?ref=14ad17108faab23a3792e372005c60e6ada293cd",
                "deletions": 10,
                "filename": "apis/ec2/src/test/java/org/jclouds/ec2/xml/DescribeSecurityGroupsResponseHandlerTest.java",
                "patch": "@@ -26,7 +26,7 @@\n import java.io.InputStream;\n import java.util.Set;\n \n-import org.jclouds.ec2.domain.IpPermissionImpl;\n+import org.jclouds.ec2.domain.IpPermission;\n import org.jclouds.ec2.domain.IpProtocol;\n import org.jclouds.ec2.domain.SecurityGroup;\n import org.jclouds.http.functions.ParseSax;\n@@ -41,7 +41,7 @@\n \n /**\n  * Tests behavior of {@code DescribeSecurityGroupsResponseHandler}\n- * \n+ *\n  * @author Adrian Cole\n  */\n // NOTE:without testName, this will not call @Before* and fail w/NPE during\n@@ -54,40 +54,40 @@ public void testApplyInputStream() {\n \n       Set<SecurityGroup> expected = ImmutableSet.of(\n             new SecurityGroup(defaultRegion, null, \"WebServers\", \"UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM\", \"Web Servers\",\n-                  ImmutableSet.of(new IpPermissionImpl(IpProtocol.TCP, 80, 80, ImmutableMultimap.<String, String> of(),\n+                  ImmutableSet.of(new IpPermission(IpProtocol.TCP, 80, 80, ImmutableMultimap.<String, String> of(),\n                         ImmutableSet.<String> of(), ImmutableSet.of(\"0.0.0.0/0\")))),\n             new SecurityGroup(defaultRegion, null, \"RangedPortsBySource\", \"UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM\", \"Group A\",\n-                  ImmutableSet.of(new IpPermissionImpl(IpProtocol.TCP, 6000, 7000, ImmutableMultimap\n+                  ImmutableSet.of(new IpPermission(IpProtocol.TCP, 6000, 7000, ImmutableMultimap\n                         .<String, String> of(), ImmutableSet.<String> of(), ImmutableSet.<String> of()))));\n \n       DescribeSecurityGroupsResponseHandler handler = injector.getInstance(DescribeSecurityGroupsResponseHandler.class);\n       addDefaultRegionToHandler(handler);\n       Set<SecurityGroup> result = factory.create(handler).parse(is);\n \n-      assertEquals(result, expected);\n+      assertEquals(result.toString(), expected.toString());\n    }\n \n    // Response from OpenStack 1.1 EC2 API\n    public void testApplyInputStreamWithEmptyFields() {\n \n       InputStream is = getClass().getResourceAsStream(\"/describe_securitygroups_empty.xml\");\n-      \n+\n       Multimap<String, String> userIdGroupPairs = LinkedHashMultimap.create();\n       userIdGroupPairs.put(\"UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM\", \"jclouds#cluster#world\");\n-      \n+\n       Set<SecurityGroup> expected = ImmutableSet.of(\n             new SecurityGroup(defaultRegion, null, \"jclouds#cluster#world\", \"UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM\", \"Cluster\",\n                   ImmutableSet.of(\n-                        new IpPermissionImpl(IpProtocol.TCP, 22, 22, ImmutableMultimap.<String, String> of(),\n+                        new IpPermission(IpProtocol.TCP, 22, 22, ImmutableMultimap.<String, String> of(),\n                               ImmutableSet.<String> of(), ImmutableSet.of(\"0.0.0.0/0\")),\n-                        new IpPermissionImpl(IpProtocol.ALL, -1, -1, userIdGroupPairs,\n+                        new IpPermission(IpProtocol.ALL, -1, -1, userIdGroupPairs,\n                               ImmutableSet.<String> of(), ImmutableSet.<String> of()))));\n \n       DescribeSecurityGroupsResponseHandler handler = injector.getInstance(DescribeSecurityGroupsResponseHandler.class);\n       addDefaultRegionToHandler(handler);\n       Set<SecurityGroup> result = factory.create(handler).parse(is);\n \n-      assertEquals(result, expected);\n+      assertEquals(result.toString(), expected.toString());\n    }\n \n    private void addDefaultRegionToHandler(ParseSax.HandlerWithResult<?> handler) {",
                "raw_url": "https://github.com/apache/jclouds/raw/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/test/java/org/jclouds/ec2/xml/DescribeSecurityGroupsResponseHandlerTest.java",
                "sha": "b7bd44f62c417cff2456d35a948394a334f8f671",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/jclouds/blob/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/test/resources/describe_securitygroups.xml",
                "changes": 71,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/test/resources/describe_securitygroups.xml?ref=14ad17108faab23a3792e372005c60e6ada293cd",
                "deletions": 35,
                "filename": "apis/ec2/src/test/resources/describe_securitygroups.xml",
                "patch": "@@ -1,36 +1,37 @@\n-<DescribeSecurityGroupsResponse xmlns=\"http://ec2.amazonaws.com/doc/2009-11-30/\">\n-  <securityGroupInfo>\n-    <item>\n-      <ownerId>UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM</ownerId>\n-      <groupName>WebServers</groupName>\n-      <groupDescription>Web Servers</groupDescription>\n-      <ipPermissions>\n-        <item>\n-      <ipProtocol>tcp</ipProtocol>\n-      <fromPort>80</fromPort>\n-      <toPort>80</toPort>\n-      <groups/>\n-      <ipRanges>\n-        <item>\n-          <cidrIp>0.0.0.0/0</cidrIp>\n-        </item>\n-      </ipRanges>\n-         </item>\n-      </ipPermissions>\n-    </item>\n-    <item>\n-      <ownerId>UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM</ownerId>\n-      <groupName>RangedPortsBySource</groupName>\n-      <groupDescription>Group A</groupDescription>\n-      <ipPermissions>\n-    <item>\n-      <ipProtocol>tcp</ipProtocol>\n-      <fromPort>6000</fromPort>\n-      <toPort>7000</toPort>\n-      <groups/>\n-      <ipRanges/>\n-    </item>\n-      </ipPermissions>\n-    </item>\n-  </securityGroupInfo>\n+<DescribeSecurityGroupsResponse\n+\txmlns=\"http://ec2.amazonaws.com/doc/2009-11-30/\">\n+\t<securityGroupInfo>\n+\t\t<item>\n+\t\t\t<ownerId>UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM</ownerId>\n+\t\t\t<groupName>WebServers</groupName>\n+\t\t\t<groupDescription>Web Servers</groupDescription>\n+\t\t\t<ipPermissions>\n+\t\t\t\t<item>\n+\t\t\t\t\t<ipProtocol>tcp</ipProtocol>\n+\t\t\t\t\t<fromPort>80</fromPort>\n+\t\t\t\t\t<toPort>80</toPort>\n+\t\t\t\t\t<groups />\n+\t\t\t\t\t<ipRanges>\n+\t\t\t\t\t\t<item>\n+\t\t\t\t\t\t\t<cidrIp>0.0.0.0/0</cidrIp>\n+\t\t\t\t\t\t</item>\n+\t\t\t\t\t</ipRanges>\n+\t\t\t\t</item>\n+\t\t\t</ipPermissions>\n+\t\t</item>\n+\t\t<item>\n+\t\t\t<ownerId>UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM</ownerId>\n+\t\t\t<groupName>RangedPortsBySource</groupName>\n+\t\t\t<groupDescription>Group A</groupDescription>\n+\t\t\t<ipPermissions>\n+\t\t\t\t<item>\n+\t\t\t\t\t<ipProtocol>tcp</ipProtocol>\n+\t\t\t\t\t<fromPort>6000</fromPort>\n+\t\t\t\t\t<toPort>7000</toPort>\n+\t\t\t\t\t<groups />\n+\t\t\t\t\t<ipRanges />\n+\t\t\t\t</item>\n+\t\t\t</ipPermissions>\n+\t\t</item>\n+\t</securityGroupInfo>\n </DescribeSecurityGroupsResponse>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/jclouds/raw/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/test/resources/describe_securitygroups.xml",
                "sha": "3a6c9b86d3f34bba00f61dc8cb862c62ed4c9d26",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/jclouds/blob/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/test/resources/describe_securitygroups_empty.xml",
                "changes": 70,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/test/resources/describe_securitygroups_empty.xml?ref=14ad17108faab23a3792e372005c60e6ada293cd",
                "deletions": 35,
                "filename": "apis/ec2/src/test/resources/describe_securitygroups_empty.xml",
                "patch": "@@ -1,39 +1,39 @@\n <?xml version=\"1.0\" ?>\n-<DescribeSecurityGroupsResponse xmlns=\"http://ec2.amazonaws.com/doc/2010-06-15/\">\n-  <requestId>L6EFIZVPJS76T3K5-0UV</requestId>\n-  <securityGroupInfo>\n+<DescribeSecurityGroupsResponse\n+\txmlns=\"http://ec2.amazonaws.com/doc/2010-06-15/\">\n+\t<requestId>L6EFIZVPJS76T3K5-0UV</requestId>\n+\t<securityGroupInfo>\n+\t\t<item>\n+\t\t\t<ipPermissions>\n+\t\t\t\t<item>\n+\t\t\t\t\t<toPort>22</toPort>\n+\t\t\t\t\t<ipProtocol>tcp</ipProtocol>\n+\t\t\t\t\t<ipRanges>\n+\t\t\t\t\t\t<item>\n+\t\t\t\t\t\t\t<cidrIp>0.0.0.0/0</cidrIp>\n+\t\t\t\t\t\t</item>\n+\t\t\t\t\t</ipRanges>\n+\t\t\t\t\t<groups />\n+\t\t\t\t\t<fromPort>22</fromPort>\n+\t\t\t\t</item>\n \n-    <item>\n-      <ipPermissions>\n-        <item>\n-          <toPort>22</toPort>\n-          <ipProtocol>tcp</ipProtocol>\n-          <ipRanges>\n-            <item>\n-              <cidrIp>0.0.0.0/0</cidrIp>\n-            </item>\n-          </ipRanges>\n-          <groups/>\n-          <fromPort>22</fromPort>\n-        </item>\n+\t\t\t\t<item>\n+\t\t\t\t\t<toPort />\n+\t\t\t\t\t<ipProtocol />\n+\t\t\t\t\t<ipRanges />\n+\t\t\t\t\t<groups>\n+\t\t\t\t\t\t<item>\n+\t\t\t\t\t\t\t<groupName>jclouds#cluster#world</groupName>\n+\t\t\t\t\t\t\t<userId>UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM</userId>\n+\t\t\t\t\t\t</item>\n+\t\t\t\t\t</groups>\n+\t\t\t\t\t<fromPort />\n+\t\t\t\t</item>\n+\t\t\t</ipPermissions>\n+\t\t\t<groupName>jclouds#cluster#world</groupName>\n+\t\t\t<groupDescription>Cluster</groupDescription>\n+\t\t\t<ownerId>UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM</ownerId>\n+\t\t</item>\n \n-        <item>\n-          <toPort/>\n-          <ipProtocol/>\n-          <ipRanges/>\n-          <groups>\n-            <item>\n-              <groupName>jclouds#cluster#world</groupName>\n-              <userId>UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM</userId>\n-            </item>\n-          </groups>\n-          <fromPort/>\n-        </item>\n-      </ipPermissions>\n-      <groupName>jclouds#cluster#world</groupName>\n-      <groupDescription>Cluster</groupDescription>\n-      <ownerId>UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM</ownerId>\n-    </item>\n-\n-  </securityGroupInfo>\n+\t</securityGroupInfo>\n </DescribeSecurityGroupsResponse>",
                "raw_url": "https://github.com/apache/jclouds/raw/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/test/resources/describe_securitygroups_empty.xml",
                "sha": "0079ee6abd2a4483411ab2ec65dbbd97769bfc1a",
                "status": "modified"
            },
            {
                "additions": 87,
                "blob_url": "https://github.com/apache/jclouds/blob/14ad17108faab23a3792e372005c60e6ada293cd/providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/parse/DescribeSecurityGroupsResponseTest.java",
                "changes": 87,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/parse/DescribeSecurityGroupsResponseTest.java?ref=14ad17108faab23a3792e372005c60e6ada293cd",
                "deletions": 0,
                "filename": "providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/parse/DescribeSecurityGroupsResponseTest.java",
                "patch": "@@ -0,0 +1,87 @@\n+/**\n+ * Licensed to jclouds, Inc. (jclouds) under one or more\n+ * contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  jclouds licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.jclouds.aws.ec2.parse;\n+\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.testng.Assert.assertEquals;\n+\n+import java.io.InputStream;\n+import java.util.Set;\n+\n+import org.jclouds.ec2.domain.IpPermission;\n+import org.jclouds.ec2.domain.IpProtocol;\n+import org.jclouds.ec2.domain.SecurityGroup;\n+import org.jclouds.ec2.xml.BaseEC2HandlerTest;\n+import org.jclouds.ec2.xml.DescribeSecurityGroupsResponseHandler;\n+import org.jclouds.http.functions.ParseSax;\n+import org.jclouds.rest.internal.GeneratedHttpRequest;\n+import org.testng.annotations.Test;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+ *\n+ * @author Adrian Cole\n+ */\n+// NOTE:without testName, this will not call @Before* and fail w/NPE during\n+// surefire\n+@Test(groups = \"unit\", testName = \"DescribeSecurityGroupsResponseTest\")\n+public class DescribeSecurityGroupsResponseTest extends BaseEC2HandlerTest {\n+\n+   public void test() {\n+      InputStream is = getClass().getResourceAsStream(\"/describe_security_groups_vpc.xml\");\n+\n+      Set<SecurityGroup> expected = expected();\n+\n+      DescribeSecurityGroupsResponseHandler handler = injector.getInstance(DescribeSecurityGroupsResponseHandler.class);\n+      addDefaultRegionToHandler(handler);\n+      Set<SecurityGroup> result = factory.create(handler).parse(is);\n+\n+      assertEquals(result.toString(), expected.toString());\n+   }\n+\n+   public Set<SecurityGroup> expected() {\n+      return ImmutableSet.of(SecurityGroup.builder()\n+                                          .region(defaultRegion)\n+                                          .ownerId(\"123123123123\")\n+                                          .id(\"sg-11111111\")\n+                                          .name(\"default\")\n+                                          .description(\"default VPC security group\")\n+//                                          .vpcId(\"vpc-99999999\")\n+                                          .ipPermission(IpPermission.builder()\n+                                                                    .ipProtocol(IpProtocol.ALL)\n+                                                                    .userIdGroupPair(\"123123123123\",\"sg-11111111\").build())\n+//                                          .ipPermissionEgress(IpPermission.builder()\n+//                                                                    .ipProtocol(IpProtocol.ALL)\n+//                                                                    .ipRange(\"0.0.0.0/0\").build())\n+                                          .build());\n+\n+   }\n+\n+   private void addDefaultRegionToHandler(ParseSax.HandlerWithResult<?> handler) {\n+      GeneratedHttpRequest request = createMock(GeneratedHttpRequest.class);\n+      expect(request.getArgs()).andReturn(ImmutableList.<Object> of()).atLeastOnce();\n+      replay(request);\n+      handler.setContext(request);\n+   }\n+\n+}",
                "raw_url": "https://github.com/apache/jclouds/raw/14ad17108faab23a3792e372005c60e6ada293cd/providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/parse/DescribeSecurityGroupsResponseTest.java",
                "sha": "0394d2baaea95d94e4a974c773d019dc018a5999",
                "status": "added"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/jclouds/blob/14ad17108faab23a3792e372005c60e6ada293cd/providers/aws-ec2/src/test/resources/describe_security_groups_vpc.xml",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/aws-ec2/src/test/resources/describe_security_groups_vpc.xml?ref=14ad17108faab23a3792e372005c60e6ada293cd",
                "deletions": 0,
                "filename": "providers/aws-ec2/src/test/resources/describe_security_groups_vpc.xml",
                "patch": "@@ -0,0 +1,35 @@\n+<DescribeSecurityGroupsResponse xmlns=\"http://ec2.amazonaws.com/doc/2011-05-15/\">\n+        <requestId>xxxxxxxxxxxxxxxx</requestId>\n+        <securityGroupInfo>\n+            <item>\n+                <ownerId>123123123123</ownerId>\n+                <groupId>sg-11111111</groupId>\n+                <groupName>default</groupName>\n+                <groupDescription>default VPC security group</groupDescription>\n+                <vpcId>vpc-99999999</vpcId>\n+                <ipPermissions>\n+                    <item>\n+                        <ipProtocol>-1</ipProtocol>\n+                        <groups>\n+                            <item>\n+                                <userId>123123123123</userId>\n+                                <groupId>sg-11111111</groupId>\n+                            </item>\n+                        </groups>\n+                        <ipRanges/>\n+                    </item>\n+                </ipPermissions>\n+                <ipPermissionsEgress>\n+                    <item>\n+                        <ipProtocol>-1</ipProtocol>\n+                        <groups/>\n+                        <ipRanges>\n+                            <item>\n+                                <cidrIp>0.0.0.0/0</cidrIp>\n+                            </item>\n+                        </ipRanges>\n+                    </item>\n+                </ipPermissionsEgress>\n+            </item>\n+    </securityGroupInfo>\n+</DescribeSecurityGroupsResponse>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/jclouds/raw/14ad17108faab23a3792e372005c60e6ada293cd/providers/aws-ec2/src/test/resources/describe_security_groups_vpc.xml",
                "sha": "cd635b4e7179fb5c5ffcfde86ff810734043f586",
                "status": "added"
            }
        ],
        "message": "Issue 671: NPE on aws-ec2 w/vpc security groups",
        "parent": "https://github.com/apache/jclouds/commit/363d996f19a6eda233e6ed004f7192e2902ccf73",
        "repo": "jclouds",
        "unit_tests": [
            "IpPermissionTest.java",
            "IpPermissionsTest.java",
            "DescribeSecurityGroupsResponseHandlerTest.java"
        ]
    },
    "jclouds_1c6e2c6": {
        "bug_id": "jclouds_1c6e2c6",
        "commit": "https://github.com/apache/jclouds/commit/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/jclouds/blob/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/CatalogHandler.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/CatalogHandler.java?ref=1c6e2c64d3a594bc7b47f2ba714a80c7790a20db",
                "deletions": 7,
                "filename": "apis/vcloud/src/main/java/org/jclouds/vcloud/xml/CatalogHandler.java",
                "patch": "@@ -70,13 +70,13 @@ public Catalog getResult() {\n    @Override\n    public void startElement(String uri, String localName, String qName, Attributes attrs) throws SAXException {\n       Map<String, String> attributes = SaxUtils.cleanseAttributes(attrs);\n-      if (qName.equals(\"Catalog\")) {\n+      if (SaxUtils.equalsOrSuffix(qName, \"Catalog\")) {\n          catalog = newReferenceType(attributes, VCloudMediaType.CATALOG_XML);\n-      } else if (qName.equals(\"CatalogItem\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"CatalogItem\")) {\n          putReferenceType(contents, attributes);\n-      } else if (qName.equals(\"Link\") && \"up\".equals(attributes.get(\"rel\"))) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Link\") && \"up\".equals(attributes.get(\"rel\"))) {\n          org = newReferenceType(attributes);\n-      } else if (qName.equals(\"Link\") && \"add\".equals(attributes.get(\"rel\"))) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Link\") && \"add\".equals(attributes.get(\"rel\"))) {\n          readOnly = false;\n       } else {\n          taskHandler.startElement(uri, localName, qName, attrs);\n@@ -85,11 +85,11 @@ public void startElement(String uri, String localName, String qName, Attributes\n \n    public void endElement(String uri, String name, String qName) {\n       taskHandler.endElement(uri, name, qName);\n-      if (qName.equals(\"Task\")) {\n+      if (SaxUtils.equalsOrSuffix(qName, \"Task\")) {\n          this.tasks.add(taskHandler.getResult());\n-      } else if (qName.equals(\"Description\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Description\")) {\n          description = currentOrNull();\n-      } else if (qName.equals(\"IsPublished\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"IsPublished\")) {\n          published = Boolean.parseBoolean(currentOrNull());\n       }\n       currentText = new StringBuilder();",
                "raw_url": "https://github.com/apache/jclouds/raw/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/CatalogHandler.java",
                "sha": "b3e5d350838959775391d1fcc61a5af1235e2e85",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jclouds/blob/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/CatalogItemHandler.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/CatalogItemHandler.java?ref=1c6e2c64d3a594bc7b47f2ba714a80c7790a20db",
                "deletions": 5,
                "filename": "apis/vcloud/src/main/java/org/jclouds/vcloud/xml/CatalogItemHandler.java",
                "patch": "@@ -53,19 +53,19 @@ public CatalogItem getResult() {\n    @Override\n    public void startElement(String uri, String localName, String qName, Attributes attrs) throws SAXException {\n       Map<String, String> attributes = SaxUtils.cleanseAttributes(attrs);\n-      if (qName.equals(\"CatalogItem\")) {\n+      if (SaxUtils.equalsOrSuffix(qName, \"CatalogItem\")) {\n          catalogItem = newReferenceType(attributes);\n-      } else if (qName.equals(\"Entity\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, (\"Entity\"))) {\n          entity = newReferenceType(attributes);\n-      } else if (qName.equals(\"Property\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, (\"Property\"))) {\n          key = attributes.get(\"key\");\n       }\n    }\n \n    public void endElement(String uri, String name, String qName) {\n-      if (qName.equals(\"Description\")) {\n+      if (SaxUtils.equalsOrSuffix(qName, (\"Description\"))) {\n          description = currentOrNull();\n-      } else if (qName.equals(\"Property\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, (\"Property\"))) {\n          properties.put(key, currentOrNull());\n          key = null;\n       }",
                "raw_url": "https://github.com/apache/jclouds/raw/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/CatalogItemHandler.java",
                "sha": "ee4c6067c9cf694c1d99e3adbc4b090d56f557cb",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jclouds/blob/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/ErrorHandler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/ErrorHandler.java?ref=1c6e2c64d3a594bc7b47f2ba714a80c7790a20db",
                "deletions": 1,
                "filename": "apis/vcloud/src/main/java/org/jclouds/vcloud/xml/ErrorHandler.java",
                "patch": "@@ -40,7 +40,7 @@ public VCloudError getResult() {\n    @Override\n    public void startElement(String uri, String localName, String qName, Attributes attrs) throws SAXException {\n       Map<String, String> attributes = SaxUtils.cleanseAttributes(attrs);\n-      if (qName.equals(\"Error\")) {\n+      if (SaxUtils.equalsOrSuffix(qName, \"Error\")) {\n          error = Utils.newError(attributes);\n       }\n    }",
                "raw_url": "https://github.com/apache/jclouds/raw/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/ErrorHandler.java",
                "sha": "2ad6a9bbe30a3254e726e13831c4ec27c1a1b257",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/jclouds/blob/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/OrgNetworkHandler.java",
                "changes": 76,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/OrgNetworkHandler.java?ref=1c6e2c64d3a594bc7b47f2ba714a80c7790a20db",
                "deletions": 38,
                "filename": "apis/vcloud/src/main/java/org/jclouds/vcloud/xml/OrgNetworkHandler.java",
                "patch": "@@ -145,13 +145,13 @@ public OrgNetwork getResult() {\n    @Override\n    public void startElement(String uri, String localName, String qName, Attributes attrs) throws SAXException {\n       Map<String, String> attributes = SaxUtils.cleanseAttributes(attrs);\n-      if (qName.equals(\"OrgNetwork\")) {\n+      if (SaxUtils.equalsOrSuffix(qName, \"OrgNetwork\")) {\n          network = newReferenceType(attributes);\n-      } else if (qName.equals(\"FirewallRule\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"FirewallRule\")) {\n          this.inFirewallRule = true;\n-      } else if (qName.equals(\"ParentNetwork\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"ParentNetwork\")) {\n          parentNetwork = newReferenceType(attributes);\n-      } else if (qName.equals(\"Link\") && \"up\".equals(attributes.get(\"rel\"))) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Link\") && \"up\".equals(attributes.get(\"rel\"))) {\n          org = newReferenceType(attributes);\n       } else {\n          taskHandler.startElement(uri, localName, qName, attrs);\n@@ -166,38 +166,38 @@ public void startElement(String uri, String localName, String qName, Attributes\n \n    public void endElement(String uri, String name, String qName) {\n       taskHandler.endElement(uri, name, qName);\n-      if (qName.equals(\"Task\")) {\n+      if (SaxUtils.equalsOrSuffix(qName, \"Task\")) {\n          this.tasks.add(taskHandler.getResult());\n-      } else if (qName.equals(\"Description\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Description\")) {\n          if (inFirewallRule)\n             firewallRuleDescription = currentOrNull();\n          else\n             orgDescription = currentOrNull();\n-      } else if (qName.equals(\"FenceMode\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"FenceMode\")) {\n          fenceMode = FenceMode.fromValue(currentOrNull());\n-      } else if (qName.equals(\"StartAddress\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"StartAddress\")) {\n          startAddress = currentOrNull();\n-      } else if (qName.equals(\"EndAddress\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"EndAddress\")) {\n          endAddress = currentOrNull();\n-      } else if (qName.equals(\"AllocatedIpAddress\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"AllocatedIpAddress\")) {\n          allocatedIpAddresses.add(currentOrNull());\n-      } else if (qName.equals(\"IpRange\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"IpRange\")) {\n          ipRanges.add(new IpRange(startAddress, endAddress));\n          this.startAddress = null;\n          this.endAddress = null;\n-      } else if (qName.equals(\"IsInherited\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"IsInherited\")) {\n          inherited = Boolean.parseBoolean(currentOrNull());\n-      } else if (qName.equals(\"Gateway\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Gateway\")) {\n          gateway = currentOrNull();\n-      } else if (qName.equals(\"Netmask\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Netmask\")) {\n          netmask = currentOrNull();\n-      } else if (qName.equals(\"Dns1\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Dns1\")) {\n          dns1 = currentOrNull();\n-      } else if (qName.equals(\"Dns2\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Dns2\")) {\n          dns2 = currentOrNull();\n-      } else if (qName.equals(\"DnsSuffix\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"DnsSuffix\")) {\n          dnsSuffix = currentOrNull();\n-      } else if (qName.equals(\"IpScope\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"IpScope\")) {\n          ipScope = new IpScope(inherited, gateway, netmask, dns1, dns2, dnsSuffix, ipRanges, allocatedIpAddresses);\n          this.inherited = false;\n          this.gateway = null;\n@@ -207,38 +207,38 @@ public void endElement(String uri, String name, String qName) {\n          this.dnsSuffix = null;\n          this.ipRanges = Sets.newLinkedHashSet();\n          this.allocatedIpAddresses = Sets.newLinkedHashSet();\n-      } else if (qName.equals(\"IsEnabled\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"IsEnabled\")) {\n          if (inFirewallRule)\n             firewallRuleEnabled = Boolean.parseBoolean(currentOrNull());\n          else\n             serviceEnabled = Boolean.parseBoolean(currentOrNull());\n-      } else if (qName.equals(\"DefaultLeaseTime\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"DefaultLeaseTime\")) {\n          defaultLeaseTime = Integer.parseInt(currentOrNull());\n-      } else if (qName.equals(\"MaxLeaseTime\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"MaxLeaseTime\")) {\n          maxLeaseTime = Integer.parseInt(currentOrNull());\n-      } else if (qName.equals(\"DhcpService\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"DhcpService\")) {\n          this.dhcpService = new DhcpService(serviceEnabled, defaultLeaseTime, maxLeaseTime, Iterables\n                   .getOnlyElement(ipRanges));\n          this.serviceEnabled = false;\n          this.defaultLeaseTime = null;\n          this.maxLeaseTime = null;\n          this.ipRanges = Sets.newLinkedHashSet();\n-      } else if (qName.equals(\"Policy\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Policy\")) {\n          if (inFirewallRule)\n             firewallPolicy = FirewallPolicy.fromValue(currentOrNull());\n          else\n             natPolicy = NatPolicy.fromValue(currentOrNull());\n-      } else if (qName.equals(\"Tcp\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Tcp\")) {\n          tcp = Boolean.parseBoolean(currentOrNull());\n-      } else if (qName.equals(\"Udp\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Udp\")) {\n          udp = Boolean.parseBoolean(currentOrNull());\n-      } else if (qName.equals(\"Protocols\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Protocols\")) {\n          this.protocols = new FirewallProtocols(tcp, udp);\n          this.tcp = false;\n          this.udp = false;\n-      } else if (qName.equals(\"DestinationIp\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"DestinationIp\")) {\n          this.destinationIp = currentOrNull();\n-      } else if (qName.equals(\"FirewallRule\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"FirewallRule\")) {\n          this.inFirewallRule = false;\n          this.firewallRules.add(new FirewallRule(firewallRuleEnabled, firewallRuleDescription, firewallPolicy,\n                   protocols, port, destinationIp));\n@@ -248,13 +248,13 @@ public void endElement(String uri, String name, String qName) {\n          this.protocols = null;\n          this.port = -1;\n          this.destinationIp = null;\n-      } else if (qName.equals(\"FirewallService\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"FirewallService\")) {\n          firewallService = new FirewallService(serviceEnabled, firewallRules);\n          this.serviceEnabled = false;\n          this.firewallRules = Lists.newArrayList();\n-      } else if (qName.equals(\"NatType\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"NatType\")) {\n          natType = NatType.fromValue(currentOrNull());\n-      } else if (qName.equals(\"MappingMode\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"MappingMode\")) {\n          mappingMode = MappingMode.fromValue(currentOrNull());\n       } else if (qName.equalsIgnoreCase(\"ExternalIP\")) {\n          externalIP = currentOrNull();\n@@ -264,7 +264,7 @@ public void endElement(String uri, String name, String qName) {\n          vAppScopedLocalId = currentOrNull();\n       } else if (qName.equalsIgnoreCase(\"vmNicId\")) {\n          vmNicId = Integer.parseInt(currentOrNull());\n-      } else if (qName.equals(\"OneToOneVmRule\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"OneToOneVmRule\")) {\n          natRules.add(new OneToOneVmRule(mappingMode, externalIP, vAppScopedVmId, vmNicId));\n          this.mappingMode = null;\n          this.externalIP = null;\n@@ -278,39 +278,39 @@ public void endElement(String uri, String name, String qName) {\n          internalPort = Integer.parseInt(currentOrNull());\n       } else if (equalsOrSuffix(qName, \"Protocol\")) {\n          natProtocol = NatProtocol.valueOf(currentOrNull());\n-      } else if (qName.equals(\"PortForwardingRule\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"PortForwardingRule\")) {\n          natRules.add(new PortForwardingRule(externalIP, externalPort, internalIP, internalPort, natProtocol));\n          this.externalIP = null;\n          this.externalPort = -1;\n          this.internalIP = null;\n          this.internalPort = -1;\n          this.natProtocol = null;\n-      } else if (qName.equals(\"VmRule\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"VmRule\")) {\n          natRules.add(new VmRule(externalIP, externalPort, vAppScopedLocalId, vmNicId, internalPort, natProtocol));\n          this.externalIP = null;\n          this.externalPort = -1;\n          this.vAppScopedLocalId = null;\n          this.vmNicId = -1;\n          this.internalPort = -1;\n          this.natProtocol = null;\n-      } else if (qName.equals(\"NatService\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"NatService\")) {\n          this.natService = new NatService(serviceEnabled, natType, natPolicy, natRules);\n          this.serviceEnabled = false;\n          this.natType = null;\n          this.natPolicy = null;\n          this.natRules = Lists.newArrayList();\n-      } else if (qName.equals(\"Features\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Features\")) {\n          this.features = new Features(dhcpService, firewallService, natService);\n          this.dhcpService = null;\n          this.firewallService = null;\n          this.natService = null;\n-      } else if (qName.equals(\"Configuration\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Configuration\")) {\n          configuration = new OrgNetworkImpl.ConfigurationImpl(ipScope, parentNetwork, fenceMode, features);\n          this.ipScope = null;\n          this.parentNetwork = null;\n          this.fenceMode = null;\n          this.features = null;\n-      } else if (qName.equals(\"AllowedExternalIpAddress\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"AllowedExternalIpAddress\")) {\n          allowedExternalIpAddresses.add(currentOrNull());\n       }\n       currentText = new StringBuilder();",
                "raw_url": "https://github.com/apache/jclouds/raw/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/OrgNetworkHandler.java",
                "sha": "3cf072302d23ebc690b7fcf5521947d5628868a0",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jclouds/blob/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/SupportedVersionsHandler.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/SupportedVersionsHandler.java?ref=1c6e2c64d3a594bc7b47f2ba714a80c7790a20db",
                "deletions": 3,
                "filename": "apis/vcloud/src/main/java/org/jclouds/vcloud/xml/SupportedVersionsHandler.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.util.SortedMap;\n \n import org.jclouds.http.functions.ParseSax;\n+import org.jclouds.util.SaxUtils;\n \n import com.google.common.collect.Maps;\n \n@@ -40,11 +41,11 @@\n    }\n \n    public void endElement(String uri, String name, String qName) {\n-      if (qName.equals(\"Version\")) {\n+      if (SaxUtils.equalsOrSuffix(qName, \"Version\")) {\n          version = currentOrNull();\n-      } else if (qName.equals(\"LoginUrl\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"LoginUrl\")) {\n          location = URI.create(currentOrNull());\n-      } else if (qName.equals(\"VersionInfo\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"VersionInfo\")) {\n          contents.put(version, location);\n       }\n       currentText = new StringBuilder();",
                "raw_url": "https://github.com/apache/jclouds/raw/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/SupportedVersionsHandler.java",
                "sha": "8a9ef79be47e40949803d36f8b901de62ad7a06d",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jclouds/blob/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/TasksListHandler.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/TasksListHandler.java?ref=1c6e2c64d3a594bc7b47f2ba714a80c7790a20db",
                "deletions": 3,
                "filename": "apis/vcloud/src/main/java/org/jclouds/vcloud/xml/TasksListHandler.java",
                "patch": "@@ -56,9 +56,9 @@ public TasksList getResult() {\n    @Override\n    public void startElement(String uri, String localName, String qName, Attributes attrs) throws SAXException {\n       Map<String, String> attributes = SaxUtils.cleanseAttributes(attrs);\n-      if (qName.equals(\"TasksList\")) {\n+      if (SaxUtils.equalsOrSuffix(qName, \"TasksList\")) {\n          resource = Utils.newReferenceType(attributes);\n-      } else if (qName.equals(\"Link\") && \"self\".equals(attributes.get(\"rel\"))) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Link\") && \"self\".equals(attributes.get(\"rel\"))) {\n          resource = Utils.newReferenceType(attributes);\n       } else {\n          taskHandler.startElement(uri, localName, qName, attrs);\n@@ -68,7 +68,7 @@ public void startElement(String uri, String localName, String qName, Attributes\n    @Override\n    public void endElement(String uri, String localName, String qName) throws SAXException {\n       taskHandler.endElement(uri, localName, qName);\n-      if (qName.equals(\"Task\")) {\n+      if (SaxUtils.equalsOrSuffix(qName, \"Task\")) {\n          this.tasks.add(taskHandler.getResult());\n       }\n    }",
                "raw_url": "https://github.com/apache/jclouds/raw/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/TasksListHandler.java",
                "sha": "3a314b02ea4e012c8c297f68fa86c4a427adee76",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jclouds/blob/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/VmHandler.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/VmHandler.java?ref=1c6e2c64d3a594bc7b47f2ba714a80c7790a20db",
                "deletions": 4,
                "filename": "apis/vcloud/src/main/java/org/jclouds/vcloud/xml/VmHandler.java",
                "patch": "@@ -113,12 +113,12 @@ public void startElement(String uri, String localName, String qName, Attributes\n          guestCustomizationHandler.startElement(uri, localName, qName, attrs);\n       } else if (inTasks) {\n          taskHandler.startElement(uri, localName, qName, attrs);\n-      } else if (qName.equals(\"Vm\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Vm\")) {\n          vm = newReferenceType(attributes);\n          String status = attributes.get(\"status\");\n          if (status != null)\n             this.status = Status.fromValue(Integer.parseInt(status));\n-      } else if (qName.equals(\"Link\") && \"up\".equals(attributes.get(\"rel\"))) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Link\") && \"up\".equals(attributes.get(\"rel\"))) {\n          vdc = newReferenceType(attributes);\n       }\n    }\n@@ -150,9 +150,9 @@ public void endElement(String uri, String name, String qName) {\n          networkConnectionSectionHandler.endElement(uri, name, qName);\n       } else if (inTasks) {\n          taskHandler.endElement(uri, name, qName);\n-      } else if (qName.equals(\"Description\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Description\")) {\n          description = currentOrNull();\n-      } else if (qName.equals(\"VAppScopedLocalId\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"VAppScopedLocalId\")) {\n          vAppScopedLocalId = currentOrNull();\n       }\n       currentText = new StringBuilder();",
                "raw_url": "https://github.com/apache/jclouds/raw/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/VmHandler.java",
                "sha": "dcf12367afd6415e2afe4d8edf277e1be43019ce",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/jclouds/blob/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/test/java/org/jclouds/vcloud/xml/CatalogItemHandlerTest.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/test/java/org/jclouds/vcloud/xml/CatalogItemHandlerTest.java?ref=1c6e2c64d3a594bc7b47f2ba714a80c7790a20db",
                "deletions": 0,
                "filename": "apis/vcloud/src/test/java/org/jclouds/vcloud/xml/CatalogItemHandlerTest.java",
                "patch": "@@ -59,4 +59,30 @@ public void testApplyInputStream() {\n                )));\n \n    }\n+   \n+   public void testApplyInputStreamWithNamespaceUsingVcloud() {\n+      InputStream is = getClass().getResourceAsStream(\"/catalogItem-carrenza-with-vcloud-namespace.xml\");\n+      Injector injector = Guice.createInjector(new SaxParserModule());\n+      Factory factory = injector.getInstance(ParseSax.Factory.class);\n+      CatalogItem result = factory.create(injector.getInstance(CatalogItemHandler.class)).parse(is);\n+\n+      assertEquals(result, new CatalogItemImpl(\"ubuntu10.10x64\", \n+               URI.create(\"https://myvdc.carrenza.net/api/v1.0/catalogItem/ecd4d3a0-0d12-4195-a6d2-14cdf9f925a3\"), \n+               null, new ReferenceTypeImpl(\"ubuntu10.10x64\", \"application/vnd.vmware.vcloud.vAppTemplate+xml\", \n+                        URI.create(\"https://myvdc.carrenza.net/api/v1.0/vAppTemplate/vappTemplate-123766ea-2b55-482c-8adf-735ab1952834\")),\n+               ImmutableSortedMap.<String,String>of()));\n+   }\n+   \n+   public void testApplyInputStreamWithNamespaceUsingDefault() {\n+      InputStream is = getClass().getResourceAsStream(\"/catalogItem-carrenza-with-default-namespace.xml\");\n+      Injector injector = Guice.createInjector(new SaxParserModule());\n+      Factory factory = injector.getInstance(ParseSax.Factory.class);\n+      CatalogItem result = factory.create(injector.getInstance(CatalogItemHandler.class)).parse(is);\n+\n+      assertEquals(result, new CatalogItemImpl(\"ubuntu10.10x64\", \n+               URI.create(\"https://myvdc.carrenza.net/api/v1.0/catalogItem/ecd4d3a0-0d12-4195-a6d2-14cdf9f925a3\"), \n+               null, new ReferenceTypeImpl(\"ubuntu10.10x64\", \"application/vnd.vmware.vcloud.vAppTemplate+xml\", \n+                        URI.create(\"https://myvdc.carrenza.net/api/v1.0/vAppTemplate/vappTemplate-123766ea-2b55-482c-8adf-735ab1952834\")),\n+               ImmutableSortedMap.<String,String>of()));\n+   }\n }",
                "raw_url": "https://github.com/apache/jclouds/raw/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/test/java/org/jclouds/vcloud/xml/CatalogItemHandlerTest.java",
                "sha": "b5050e5945130499c07ce052f0c1c5b0d0fd90fd",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/jclouds/blob/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/test/resources/catalogItem-carrenza-with-default-namespace.xml",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/test/resources/catalogItem-carrenza-with-default-namespace.xml?ref=1c6e2c64d3a594bc7b47f2ba714a80c7790a20db",
                "deletions": 0,
                "filename": "apis/vcloud/src/test/resources/catalogItem-carrenza-with-default-namespace.xml",
                "patch": "@@ -0,0 +1,8 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<CatalogItem xmlns=\"http://www.vmware.com/vcloud/v1\" name=\"ubuntu10.10x64\" type=\"application/vnd.vmware.vcloud.catalogItem+xml\" href=\"https://myvdc.carrenza.net/api/v1.0/catalogItem/ecd4d3a0-0d12-4195-a6d2-14cdf9f925a3\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.vmware.com/vcloud/v1 http://myvdc.carrenza.net/api/v1.0/schema/master.xsd\">\n+    <Link rel=\"up\" type=\"application/vnd.vmware.vcloud.catalog+xml\" href=\"https://myvdc.carrenza.net/api/v1.0/catalog/5d2c147a-d26d-487a-9a05-577ee175186b\"/>\n+    <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.catalogItem+xml\" href=\"https://myvdc.carrenza.net/api/v1.0/catalogItem/ecd4d3a0-0d12-4195-a6d2-14cdf9f925a3\"/>\n+    <Link rel=\"remove\" href=\"https://myvdc.carrenza.net/api/v1.0/catalogItem/ecd4d3a0-0d12-4195-a6d2-14cdf9f925a3\"/>\n+    <Description> </Description>\n+    <Entity type=\"application/vnd.vmware.vcloud.vAppTemplate+xml\" name=\"ubuntu10.10x64\" href=\"https://myvdc.carrenza.net/api/v1.0/vAppTemplate/vappTemplate-123766ea-2b55-482c-8adf-735ab1952834\"/>\n+</CatalogItem>",
                "raw_url": "https://github.com/apache/jclouds/raw/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/test/resources/catalogItem-carrenza-with-default-namespace.xml",
                "sha": "88fec20ef4460db07cb0ac44a47aa5c505930772",
                "status": "added"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/jclouds/blob/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/test/resources/catalogItem-carrenza-with-vcloud-namespace.xml",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/test/resources/catalogItem-carrenza-with-vcloud-namespace.xml?ref=1c6e2c64d3a594bc7b47f2ba714a80c7790a20db",
                "deletions": 0,
                "filename": "apis/vcloud/src/test/resources/catalogItem-carrenza-with-vcloud-namespace.xml",
                "patch": "@@ -0,0 +1,8 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<vcloud:CatalogItem xmlns:vcloud=\"http://www.vmware.com/vcloud/v1\" name=\"ubuntu10.10x64\" type=\"application/vnd.vmware.vcloud.catalogItem+xml\" href=\"https://myvdc.carrenza.net/api/v1.0/catalogItem/ecd4d3a0-0d12-4195-a6d2-14cdf9f925a3\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.vmware.com/vcloud/v1 http://myvdc.carrenza.net/api/v1.0/schema/master.xsd\">\n+    <vcloud:Link rel=\"up\" type=\"application/vnd.vmware.vcloud.catalog+xml\" href=\"https://myvdc.carrenza.net/api/v1.0/catalog/5d2c147a-d26d-487a-9a05-577ee175186b\"/>\n+    <vcloud:Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.catalogItem+xml\" href=\"https://myvdc.carrenza.net/api/v1.0/catalogItem/ecd4d3a0-0d12-4195-a6d2-14cdf9f925a3\"/>\n+    <vcloud:Link rel=\"remove\" href=\"https://myvdc.carrenza.net/api/v1.0/catalogItem/ecd4d3a0-0d12-4195-a6d2-14cdf9f925a3\"/>\n+    <vcloud:Description> </vcloud:Description>\n+    <vcloud:Entity type=\"application/vnd.vmware.vcloud.vAppTemplate+xml\" name=\"ubuntu10.10x64\" href=\"https://myvdc.carrenza.net/api/v1.0/vAppTemplate/vappTemplate-123766ea-2b55-482c-8adf-735ab1952834\"/>\n+</vcloud:CatalogItem>",
                "raw_url": "https://github.com/apache/jclouds/raw/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/test/resources/catalogItem-carrenza-with-vcloud-namespace.xml",
                "sha": "917c143b95a39f66fa743777afde7f5a756f1cd7",
                "status": "added"
            }
        ],
        "message": "Merge pull request #682 from aledsage/issue-994-vcloud-npe-parsing-image\n\nIssue 994: fix vcloud sax parsing of namespaces",
        "parent": "https://github.com/apache/jclouds/commit/f3510dc6c576c981fc712471908e590c4c34a828",
        "repo": "jclouds",
        "unit_tests": [
            "ErrorHandlerTest.java"
        ]
    },
    "jclouds_1fb2868": {
        "bug_id": "jclouds_1fb2868",
        "commit": "https://github.com/apache/jclouds/commit/1fb286809e14e77e051ec22d91afe32bd1ecdebd",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/compute/CloudStackComputeServiceAdapterExpectTest.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/test/java/org/jclouds/cloudstack/compute/CloudStackComputeServiceAdapterExpectTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 6,
                "filename": "apis/cloudstack/src/test/java/org/jclouds/cloudstack/compute/CloudStackComputeServiceAdapterExpectTest.java",
                "patch": "@@ -18,6 +18,7 @@\n \n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n \n import java.io.IOException;\n import java.util.Map;\n@@ -179,7 +180,7 @@ public void testCreateNodeWithGroupEncodedIntoNameWithKeyPair() throws IOExcepti\n       NodeAndInitialCredentials<VirtualMachine> server = adapter.createNodeWithGroupEncodedIntoName(\"test\", \"test-e92\",\n             template);\n       assertNotNull(server);\n-      assertEquals(server.getCredentials().getPrivateKey(), privKey);\n+      assertEquals(server.getCredentials().getOptionalPrivateKey().get(), privKey);\n    }\n \n    public void testCreateNodeWithGroupEncodedIntoNameWithGenerateKeyPair() throws IOException {\n@@ -226,7 +227,7 @@ public void testCreateNodeWithGroupEncodedIntoNameWithGenerateKeyPair() throws I\n       NodeAndInitialCredentials<VirtualMachine> server = adapter.createNodeWithGroupEncodedIntoName(\"test\", \"test-e92\",\n             template);\n       assertNotNull(server);\n-      assertNotNull(server.getCredentials().getPrivateKey());\n+      assertTrue(server.getCredentials().getOptionalPrivateKey().isPresent());\n    }\n    \n    public void testCreateNodeWithGroupEncodedIntoNameWithKeyPairDefaultSecurityGroup() throws IOException {\n@@ -277,7 +278,7 @@ public void testCreateNodeWithGroupEncodedIntoNameWithKeyPairDefaultSecurityGrou\n       NodeAndInitialCredentials<VirtualMachine> server = adapter.createNodeWithGroupEncodedIntoName(\"test\", \"test-e92\",\n             template);\n       assertNotNull(server);\n-      assertEquals(server.getCredentials().getPrivateKey(), privKey);\n+      assertEquals(server.getCredentials().getOptionalPrivateKey().get(), privKey);\n    }\n \n    public void testCreateNodeWithGroupEncodedIntoNameWithKeyPairDefaultSecurityGroupAndDisk() throws IOException {\n@@ -333,7 +334,7 @@ public void testCreateNodeWithGroupEncodedIntoNameWithKeyPairDefaultSecurityGrou\n       NodeAndInitialCredentials<VirtualMachine> server = adapter.createNodeWithGroupEncodedIntoName(\"test\", \"test-e92\",\n               template);\n       assertNotNull(server);\n-      assertEquals(server.getCredentials().getPrivateKey(), privKey);\n+      assertEquals(server.getCredentials().getOptionalPrivateKey().get(), privKey);\n    }\n \n    public void testCreateNodeWithGroupEncodedIntoNameWithKeyPairGenerateSecurityGroup() throws IOException {\n@@ -391,7 +392,7 @@ public void testCreateNodeWithGroupEncodedIntoNameWithKeyPairGenerateSecurityGro\n       NodeAndInitialCredentials<VirtualMachine> server = adapter.createNodeWithGroupEncodedIntoName(\"test\", \"test-e92\",\n             template);\n       assertNotNull(server);\n-      assertEquals(server.getCredentials().getPrivateKey(), privKey);\n+      assertEquals(server.getCredentials().getOptionalPrivateKey().get(), privKey);\n    }\n \n    public void testCreateNodeWithGroupEncodedIntoNameWithKeyPairAssignedToAccountAndDomain() throws IOException {\n@@ -444,7 +445,7 @@ public void testCreateNodeWithGroupEncodedIntoNameWithKeyPairAssignedToAccountAn\n       NodeAndInitialCredentials<VirtualMachine> server = adapter.createNodeWithGroupEncodedIntoName(\"test\", \"test-e92\",\n             template);\n       assertNotNull(server);\n-      assertEquals(server.getCredentials().getPrivateKey(), privKey);\n+      assertEquals(server.getCredentials().getOptionalPrivateKey().get(), privKey);\n    }   \n    \n    @Override",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/compute/CloudStackComputeServiceAdapterExpectTest.java",
                "sha": "877b0fefb9b61cf228666d7d98bba34b96e5c68c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/FirewallApiLiveTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/FirewallApiLiveTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 1,
                "filename": "apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/FirewallApiLiveTest.java",
                "patch": "@@ -77,7 +77,7 @@ public boolean apply(Network network) {\n             defaultTemplateOrPreferredInZone(defaultTemplate, client, network.getZoneId()),\n             client, jobComplete, virtualMachineRunning);\n \n-         if (vm.getPassword() != null && loginCredentials.getOptionalPassword() == null)\n+         if (vm.getPassword() != null && !loginCredentials.getOptionalPassword().isPresent())\n             loginCredentials = loginCredentials.toBuilder().password(vm.getPassword()).build();\n \n       } catch (NoSuchElementException e) {",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/FirewallApiLiveTest.java",
                "sha": "edce6009737da407fa4d484f4bf84cd25cc321ef",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/LoadBalancerApiLiveTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/LoadBalancerApiLiveTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 1,
                "filename": "apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/LoadBalancerApiLiveTest.java",
                "patch": "@@ -89,7 +89,7 @@ public void testCreateVm() {\n       vm = VirtualMachineApiLiveTest.createVirtualMachineInNetwork(network,\n             defaultTemplateOrPreferredInZone(defaultTemplate, client, network.getZoneId()),\n             client, jobComplete, virtualMachineRunning);\n-      if (vm.getPassword() != null && loginCredentials.getOptionalPassword() == null)\n+      if (vm.getPassword() != null && !loginCredentials.getOptionalPassword().isPresent())\n          loginCredentials = loginCredentials.toBuilder().password(vm.getPassword()).build();\n    }\n ",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/LoadBalancerApiLiveTest.java",
                "sha": "82d3a6268322b3424ee8cb1c0965ca6d9d3a71dd",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/SecurityGroupApiLiveTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/SecurityGroupApiLiveTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 1,
                "filename": "apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/SecurityGroupApiLiveTest.java",
                "patch": "@@ -177,7 +177,7 @@ public void testCreateVMInSecurityGroup() throws Exception {\n       vm = VirtualMachineApiLiveTest.createVirtualMachineWithSecurityGroupInZone(zone.getId(),\n             defaultTemplateOrPreferredInZone(defaultTemplate, client, zone.getId()), group.getId(), client,\n             jobComplete, virtualMachineRunning);\n-      if (vm.getPassword() != null && loginCredentials.getOptionalPassword() == null)\n+      if (vm.getPassword() != null && !loginCredentials.getOptionalPassword().isPresent())\n          loginCredentials = loginCredentials.toBuilder().password(vm.getPassword()).build();\n       // ingress port 22\n       checkSSH(HostAndPort.fromParts(vm.getIPAddress(), 22));",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/SecurityGroupApiLiveTest.java",
                "sha": "a4bb788e23d721a6d097cf7b184e6c9e72dc84db",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/VirtualMachineApiExpectTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/VirtualMachineApiExpectTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 1,
                "filename": "apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/VirtualMachineApiExpectTest.java",
                "patch": "@@ -74,7 +74,7 @@ public void testGetPasswordForVirtualMachineWhenResponseIs2xx() throws NoSuchAlg\n       WindowsLoginCredentialsFromEncryptedData passwordDecrypt = new WindowsLoginCredentialsFromEncryptedData(new JCECrypto());\n \n       assertEquals(passwordDecrypt.apply(\n-         EncryptedPasswordAndPrivateKey.builder().encryptedPassword(actual).privateKey(privateKey).build()).getPassword(), \"bX7vvptvw\");\n+         EncryptedPasswordAndPrivateKey.builder().encryptedPassword(actual).privateKey(privateKey).build()).getOptionalPassword().get(), \"bX7vvptvw\");\n    }\n    \n    HttpRequest deployVirtualMachineInZone =  HttpRequest.builder().method(\"GET\")",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/VirtualMachineApiExpectTest.java",
                "sha": "3b8b043a3e9106792a513210cac76cced1dc8aa3",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/VirtualMachineApiLiveTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/VirtualMachineApiLiveTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 1,
                "filename": "apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/VirtualMachineApiLiveTest.java",
                "patch": "@@ -279,7 +279,7 @@ private void destroyMachine(VirtualMachine virtualMachine) {\n    }\n \n    private void conditionallyCheckSSH() {\n-      if (vm.getPassword() != null && loginCredentials.getOptionalPassword() == null)\n+      if (vm.getPassword() != null && !loginCredentials.getOptionalPassword().isPresent())\n          loginCredentials = loginCredentials.toBuilder().password(vm.getPassword()).build();\n       assert HostSpecifier.isValid(vm.getIPAddress());\n       if (!InetAddresses2.isPrivateIPAddress(vm.getIPAddress())) {",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/VirtualMachineApiLiveTest.java",
                "sha": "a0dc15352aa451001fee9f41db4a81620fc42704",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/functions/StaticNATVirtualMachineInNetworkLiveTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/test/java/org/jclouds/cloudstack/functions/StaticNATVirtualMachineInNetworkLiveTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 1,
                "filename": "apis/cloudstack/src/test/java/org/jclouds/cloudstack/functions/StaticNATVirtualMachineInNetworkLiveTest.java",
                "patch": "@@ -62,7 +62,7 @@ public void setupClient() {\n          vm = VirtualMachineApiLiveTest.createVirtualMachineInNetwork(network,\n                defaultTemplateOrPreferredInZone(defaultTemplate, client, network.getZoneId()), client, jobComplete,\n                virtualMachineRunning);\n-         if (vm.getPassword() != null && loginCredentials.getOptionalPassword() == null)\n+         if (vm.getPassword() != null && !loginCredentials.getOptionalPassword().isPresent())\n             loginCredentials = loginCredentials.toBuilder().password(vm.getPassword()).build();\n       } catch (NoSuchElementException e) {\n          networksDisabled = true;",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/functions/StaticNATVirtualMachineInNetworkLiveTest.java",
                "sha": "75bfd18e8d5ec49b62952c192380e109dbd592e2",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/functions/WindowsLoginCredentialsFromEncryptedDataTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/test/java/org/jclouds/cloudstack/functions/WindowsLoginCredentialsFromEncryptedDataTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 1,
                "filename": "apis/cloudstack/src/test/java/org/jclouds/cloudstack/functions/WindowsLoginCredentialsFromEncryptedDataTest.java",
                "patch": "@@ -62,7 +62,7 @@ public void testApply() throws Exception {\n       LoginCredentials credentials = f.apply(new EncryptedPasswordAndPrivateKey(ENCRYPTED_PASSWORD, PRIVATE_KEY));\n \n       assertEquals(credentials.getUser(), \"Administrator\");\n-      assertEquals(credentials.getPassword(), \"u4.y9mb;nR.\");\n+      assertEquals(credentials.getOptionalPassword().get(), \"u4.y9mb;nR.\");\n       assertFalse(credentials.getOptionalPrivateKey().isPresent());\n    }\n }",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/functions/WindowsLoginCredentialsFromEncryptedDataTest.java",
                "sha": "a59ecadc31db8e0c890efb68ec2e534520e10628",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/ec2/src/test/java/org/jclouds/ec2/compute/EC2ComputeServiceExpectTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/test/java/org/jclouds/ec2/compute/EC2ComputeServiceExpectTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 2,
                "filename": "apis/ec2/src/test/java/org/jclouds/ec2/compute/EC2ComputeServiceExpectTest.java",
                "patch": "@@ -20,6 +20,7 @@\n import static org.jclouds.ec2.compute.options.EC2TemplateOptions.Builder.maxCount;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n \n import javax.ws.rs.core.MediaType;\n import java.util.Set;\n@@ -132,7 +133,7 @@ public void testCreateNodeWithGeneratedKeyPairAndOverriddenLoginUser() throws Ex\n               blockUntilRunning(false).overrideLoginUser(\"ec2-user\")));\n       assertEquals(node.getCredentials().getUser(), \"ec2-user\");\n       System.out.println(node.getImageId());\n-      assertNotNull(node.getCredentials().getPrivateKey());\n+      assertTrue(node.getCredentials().getOptionalPrivateKey().isPresent());\n    }\n \n    public void testCreateThreeNodesWithMaxCountThree() throws Exception {\n@@ -312,7 +313,7 @@ public void testCreateNodeWithGeneratedKeyPairAndOverriddenLoginUserWithTemplate\n             apiThatCreatesNode.createNodesInGroup(\"test\", 1,\n             apiThatCreatesNode.templateBuilder().from(\"osDescriptionMatches=.*fedora.*,loginUser=ec2-user\").build()));\n       assertEquals(node.getCredentials().getUser(), \"ec2-user\");\n-      assertNotNull(node.getCredentials().getPrivateKey());\n+      assertTrue(node.getCredentials().getOptionalPrivateKey().isPresent());\n    }\n \n }",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/ec2/src/test/java/org/jclouds/ec2/compute/EC2ComputeServiceExpectTest.java",
                "sha": "4ffad1f1b1d46a70f0dfdb4efe13e1fdef8a00da",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/ec2/src/test/java/org/jclouds/ec2/compute/functions/WindowsLoginCredentialsFromEncryptedDataTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/test/java/org/jclouds/ec2/compute/functions/WindowsLoginCredentialsFromEncryptedDataTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 1,
                "filename": "apis/ec2/src/test/java/org/jclouds/ec2/compute/functions/WindowsLoginCredentialsFromEncryptedDataTest.java",
                "patch": "@@ -68,7 +68,7 @@ public void testApply() throws Exception {\n       LoginCredentials credentials = f.apply(new PasswordDataAndPrivateKey(passwordData, PRIVATE_KEY));\n \n       assertEquals(credentials.getUser(), \"Administrator\");\n-      assertEquals(credentials.getPassword(), \"u4.y9mb;nR.\");\n+      assertEquals(credentials.getOptionalPassword().get(), \"u4.y9mb;nR.\");\n       assertFalse(credentials.getOptionalPrivateKey().isPresent());\n    }\n }",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/ec2/src/test/java/org/jclouds/ec2/compute/functions/WindowsLoginCredentialsFromEncryptedDataTest.java",
                "sha": "3859f531e360014c51618af6157de6bd88c11de6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/ec2/src/test/java/org/jclouds/ec2/compute/strategy/CreateKeyPairAndSecurityGroupsAsNeededAndReturnRunOptionsTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/test/java/org/jclouds/ec2/compute/strategy/CreateKeyPairAndSecurityGroupsAsNeededAndReturnRunOptionsTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 1,
                "filename": "apis/ec2/src/test/java/org/jclouds/ec2/compute/strategy/CreateKeyPairAndSecurityGroupsAsNeededAndReturnRunOptionsTest.java",
                "patch": "@@ -317,7 +317,7 @@ public void testCreateNewKeyPairUnlessUserSpecifiedOtherwise_reusesKeyWhenToldTo\n \n       // setup expectations\n       expect(options.getKeyPair()).andReturn(userSuppliedKeyPair);\n-      expect(options.getLoginPrivateKey()).andReturn(CREDENTIALS.getPrivateKey()).atLeastOnce();\n+      expect(options.getLoginPrivateKey()).andReturn(CREDENTIALS.getOptionalPrivateKey().get()).atLeastOnce();\n \n       // Notice that the fingerprint and sha1 generated\n       expect(strategy.credentialsMap.put(new RegionAndName(region, userSuppliedKeyPair), KEYPAIR)).andReturn(null);",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/ec2/src/test/java/org/jclouds/ec2/compute/strategy/CreateKeyPairAndSecurityGroupsAsNeededAndReturnRunOptionsTest.java",
                "sha": "527123a9270b25b1d1a714f6d4ec77a2178fc449",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/NovaComputeServiceExpectTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/NovaComputeServiceExpectTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 3,
                "filename": "apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/NovaComputeServiceExpectTest.java",
                "patch": "@@ -20,6 +20,7 @@\n import static org.jclouds.openstack.nova.v2_0.compute.options.NovaTemplateOptions.Builder.blockUntilRunning;\n import static org.jclouds.openstack.nova.v2_0.compute.options.NovaTemplateOptions.Builder.keyPairName;\n import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n import static org.testng.Assert.assertNotNull;\n import static org.testng.Assert.assertTrue;\n \n@@ -267,7 +268,7 @@ public String get() {\n \n       NodeMetadata node = Iterables.getOnlyElement(apiThatCreatesNode.createNodesInGroup(\"test\", 1,\n             blockUntilRunning(false).generateKeyPair(true)));\n-      assertNotNull(node.getCredentials().getPrivateKey());\n+      assertTrue(node.getCredentials().getOptionalPrivateKey().isPresent());\n    }\n \n    @Test\n@@ -323,7 +324,7 @@ public String get() {\n       NodeMetadata node = Iterables.getOnlyElement(apiThatCreatesNode.createNodesInGroup(\"test\", 1,\n             keyPairName(\"fooPair\").blockUntilRunning(false)));\n       // we don't have access to this private key\n-      assertEquals(node.getCredentials().getPrivateKey(), null);\n+      assertFalse(node.getCredentials().getOptionalPrivateKey().isPresent());\n    }\n \n \n@@ -374,7 +375,7 @@ public String get() {\n       NodeMetadata node = Iterables.getOnlyElement(apiThatCreatesNode.createNodesInGroup(\"test\", 1,\n             keyPairName(\"fooPair\").securityGroupNames(\"mygroup\").blockUntilRunning(false)));\n       // we don't have access to this private key\n-      assertEquals(node.getCredentials().getPrivateKey(), null);\n+      assertFalse(node.getCredentials().getOptionalPrivateKey().isPresent());\n    }\n \n }",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/NovaComputeServiceExpectTest.java",
                "sha": "f87f66e4a1e01e2d1a74d5503dc3c3d888ce74cb",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/compute/src/main/java/org/jclouds/compute/callables/RunScriptOnNodeUsingSsh.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/main/java/org/jclouds/compute/callables/RunScriptOnNodeUsingSsh.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 3,
                "filename": "compute/src/main/java/org/jclouds/compute/callables/RunScriptOnNodeUsingSsh.java",
                "patch": "@@ -102,8 +102,8 @@ public RunScriptOnNode init() {\n \n    protected ExecResponse runCommand(String command) {\n       ExecResponse returnVal;\n-      logger.debug(\">> running [%s] as %s@%s\", command.replace(node.getCredentials().getPassword() != null ? node\n-            .getCredentials().getPassword() : \"XXXXX\", \"XXXXX\"), ssh.getUsername(), ssh.getHostAddress());\n+      logger.debug(\">> running [%s] as %s@%s\", command.replace(node.getCredentials().getOptionalPassword().isPresent() ? node\n+            .getCredentials().getOptionalPassword().get() : \"XXXXX\", \"XXXXX\"), ssh.getUsername(), ssh.getHostAddress());\n       returnVal = ssh.exec(command);\n       return returnVal;\n    }\n@@ -112,7 +112,7 @@ protected ExecResponse runCommand(String command) {\n    public String execAsRoot(String command) {\n       if (node.getCredentials().identity.equals(\"root\")) {\n       } else if (node.getCredentials().shouldAuthenticateSudo()) {\n-         command = String.format(\"sudo -S sh <<'%s'\\n%s\\n%s%s\\n\", MARKER, node.getCredentials().getPassword(), command, MARKER);\n+         command = String.format(\"sudo -S sh <<'%s'\\n%s\\n%s%s\\n\", MARKER, node.getCredentials().getOptionalPassword().get(), command, MARKER);\n       } else {\n          command = String.format(\"sudo sh <<'%s'\\n%s%s\\n\", MARKER, command, MARKER);\n       }",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/compute/src/main/java/org/jclouds/compute/callables/RunScriptOnNodeUsingSsh.java",
                "sha": "419109d17ca6c99c6eb0ec43481a293ae09cf6d8",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/compute/src/main/java/org/jclouds/compute/callables/SudoAwareInitManager.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/main/java/org/jclouds/compute/callables/SudoAwareInitManager.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 2,
                "filename": "compute/src/main/java/org/jclouds/compute/callables/SudoAwareInitManager.java",
                "patch": "@@ -95,7 +95,7 @@ else if (computeLogger.isTraceEnabled())\n \n    ExecResponse runCommand(String command) {\n       String statement = String.format(\"[%s] as %s@%s\", command.replace(\n-            node.getCredentials().getPassword() != null ? node.getCredentials().getPassword() : \"XXXXX\", \"XXXXX\"), ssh\n+            node.getCredentials().getOptionalPassword().isPresent() ? node.getCredentials().getOptionalPassword().get() : \"XXXXX\", \"XXXXX\"), ssh\n             .getUsername(), ssh.getHostAddress());\n       if (command.endsWith(\"status\") || command.endsWith(\"stdout\") || command.endsWith(\"stderr\"))\n          logger.trace(\">> running %s\", statement);\n@@ -113,7 +113,7 @@ String execScriptAsRoot(String action) {\n       if (node.getCredentials().identity.equals(\"root\")) {\n          command = initFile + \" \" + action;\n       } else if (node.getCredentials().shouldAuthenticateSudo()) {\n-         command = String.format(\"echo '%s'|sudo -S %s %s\", node.getCredentials().getPassword(),\n+         command = String.format(\"echo '%s'|sudo -S %s %s\", node.getCredentials().getOptionalPassword().get(),\n                initFile, action);\n       } else {\n          command = \"sudo \" + initFile + \" \" + action;",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/compute/src/main/java/org/jclouds/compute/callables/SudoAwareInitManager.java",
                "sha": "cef80566fa93ada1d2a788a9a9421206b4959d07",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/compute/src/main/java/org/jclouds/compute/strategy/PrioritizeCredentialsFromTemplate.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/main/java/org/jclouds/compute/strategy/PrioritizeCredentialsFromTemplate.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 4,
                "filename": "compute/src/main/java/org/jclouds/compute/strategy/PrioritizeCredentialsFromTemplate.java",
                "patch": "@@ -44,10 +44,10 @@ public LoginCredentials apply(Template template, LoginCredentials fromNode) {\n          Builder builder = LoginCredentials.builder(creds);\n          if (credsFromParameters.getUser() != null)\n             builder.user(credsFromParameters.getUser());\n-         if (credsFromParameters.getPassword() != null)\n-            builder.password(credsFromParameters.getPassword());\n-         if (credsFromParameters.getPrivateKey() != null)\n-            builder.privateKey(credsFromParameters.getPrivateKey());\n+         if (credsFromParameters.getOptionalPassword().isPresent())\n+            builder.password(credsFromParameters.getOptionalPassword().get());\n+         if (credsFromParameters.getOptionalPrivateKey().isPresent())\n+            builder.privateKey(credsFromParameters.getOptionalPrivateKey().get());\n          if (credsFromParameters.shouldAuthenticateSudo())\n             builder.authenticateSudo(true);\n          creds = builder.build();",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/compute/src/main/java/org/jclouds/compute/strategy/PrioritizeCredentialsFromTemplate.java",
                "sha": "26251fb26e4437efbbc64a283845eb09e0b1a5c0",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/core/src/main/java/org/jclouds/domain/LoginCredentials.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/domain/LoginCredentials.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 21,
                "filename": "core/src/main/java/org/jclouds/domain/LoginCredentials.java",
                "patch": "@@ -16,6 +16,7 @@\n  */\n package org.jclouds.domain;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n import static org.jclouds.crypto.Pems.PRIVATE_PKCS1_MARKER;\n import static org.jclouds.crypto.Pems.PRIVATE_PKCS8_MARKER;\n \n@@ -54,8 +55,8 @@ public static Builder builder() {\n    \n    public static class Builder extends Credentials.Builder<LoginCredentials> {\n       private boolean authenticateSudo;\n-      private Optional<String> password;\n-      private Optional<String> privateKey;\n+      private Optional<String> password = Optional.absent();\n+      private Optional<String> privateKey = Optional.absent();\n \n       public Builder identity(String identity) {\n          return Builder.class.cast(super.identity(identity));\n@@ -67,8 +68,6 @@ public Builder user(String user) {\n \n       public Builder password(String password) {\n          this.password = Optional.fromNullable(password);\n-         if (privateKey == null)\n-            noPrivateKey();\n          return this;\n       }\n \n@@ -79,8 +78,6 @@ public Builder noPassword() {\n \n       public Builder privateKey(String privateKey) {\n          this.privateKey = Optional.fromNullable(privateKey);\n-         if (password == null)\n-            noPassword();\n          return this;\n       }\n \n@@ -103,7 +100,7 @@ public Builder authenticateSudo(boolean authenticateSudo) {\n       }\n \n       public LoginCredentials build() {\n-         if (identity == null && password == null && privateKey == null && !authenticateSudo)\n+         if (identity == null && !password.isPresent() && !privateKey.isPresent() && !authenticateSudo)\n             return null;\n          return new LoginCredentials(identity, password, privateKey, authenticateSudo);\n       }\n@@ -113,13 +110,13 @@ public LoginCredentials build() {\n    private final Optional<String> password;\n    private final Optional<String> privateKey;\n \n-   private LoginCredentials(String username, @Nullable Optional<String> password, @Nullable Optional<String> privateKey, boolean authenticateSudo) {\n-      super(username, privateKey != null && privateKey.isPresent() && isPrivateKeyCredential(privateKey.get())\n+   private LoginCredentials(String username, Optional<String> password, Optional<String> privateKey, boolean authenticateSudo) {\n+      super(username, privateKey.isPresent() && isPrivateKeyCredential(privateKey.get())\n                     ? privateKey.get()\n-                    : (password != null && password.isPresent() ? password.get() : null));\n+                    : password.orNull());\n       this.authenticateSudo = authenticateSudo;\n-      this.password = password;\n-      this.privateKey = privateKey;\n+      this.password = checkNotNull(password, \"password\");\n+      this.privateKey = checkNotNull(privateKey, \"privateKey\");\n    }\n \n    /**\n@@ -131,41 +128,45 @@ public String getUser() {\n \n    /**\n     * @return the password of the login user or null\n+    * \n+    * @deprecated since 1.8; instead use {@link #getOptionalPassword()}\n     */\n    @Nullable\n+   @Deprecated\n    public String getPassword() {\n-      return (password != null) ? password.orNull() : null;\n+      return password.orNull();\n    }\n \n    /**\n-    * @return the optional password of the user or null\n+    * @return the optional password of the user (Optional.absent if none supplied).\n     */\n-   @Nullable\n    public Optional<String> getOptionalPassword() {\n       return password;\n    }\n \n    /**\n     * @return the private ssh key of the user or null\n+    * \n+    * @deprecated since 1.8; instead use {@link #getOptionalPrivateKey()}\n     */\n    @Nullable\n+   @Deprecated\n    public String getPrivateKey() {\n-      return (privateKey != null) ? privateKey.orNull() : null;\n+      return privateKey.orNull();\n    }\n \n    /**\n     * @return true if there is a private key attached that is not encrypted\n     */\n    public boolean hasUnencryptedPrivateKey() {\n-      return getPrivateKey() != null\n-         && !getPrivateKey().isEmpty()\n-         && !getPrivateKey().contains(Pems.PROC_TYPE_ENCRYPTED);\n+      return getOptionalPrivateKey().isPresent()\n+         && !getOptionalPrivateKey().get().isEmpty()\n+         && !getOptionalPrivateKey().get().contains(Pems.PROC_TYPE_ENCRYPTED);\n    }\n \n    /**\n-    * @return the optional private ssh key of the user or null\n+    * @return the optional private ssh key of the user (Optional.absent if none supplied).\n     */\n-   @Nullable\n    public Optional<String> getOptionalPrivateKey() {\n       return privateKey;\n    }",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/core/src/main/java/org/jclouds/domain/LoginCredentials.java",
                "sha": "d115f73f76598ea8604cadee401c97affe293602",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/core/src/main/java/org/jclouds/rest/config/CredentialStoreModule.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/rest/config/CredentialStoreModule.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 2,
                "filename": "core/src/main/java/org/jclouds/rest/config/CredentialStoreModule.java",
                "patch": "@@ -85,8 +85,8 @@ public ByteSource apply(Credentials from) {\n             LoginCredentials login = LoginCredentials.class.cast(from);\n             JsonLoginCredentials val = new JsonLoginCredentials();\n             val.user = login.getUser();\n-            val.password = login.getPassword();\n-            val.privateKey = login.getPrivateKey();\n+            val.password = login.getOptionalPassword().orNull();\n+            val.privateKey = login.getOptionalPrivateKey().orNull();\n             if (login.shouldAuthenticateSudo())\n                val.authenticateSudo = login.shouldAuthenticateSudo();\n             return ByteSource.wrap(json.toJson(val).getBytes(Charsets.UTF_8));",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/core/src/main/java/org/jclouds/rest/config/CredentialStoreModule.java",
                "sha": "8e7e5087a09266aa72731e902a16146f653cdcb4",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/core/src/test/java/org/jclouds/domain/LoginCredentialsTest.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/test/java/org/jclouds/domain/LoginCredentialsTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 0,
                "filename": "core/src/test/java/org/jclouds/domain/LoginCredentialsTest.java",
                "patch": "@@ -17,6 +17,7 @@\n package org.jclouds.domain;\n \n import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n \n import org.testng.annotations.Test;\n \n@@ -48,4 +49,15 @@ public void testPrivateKeyLeavesPasswordAloneWhenSet() {\n       assertEquals(toTest.getOptionalPassword(), Optional.of(\"password\"));\n       assertEquals(toTest.getOptionalPrivateKey(), Optional.of(\"key\"));\n    }\n+   \n+   \n+   public void testToStringWhenNullPasswordAndKey() {\n+      LoginCredentials toTest = LoginCredentials.builder().user(\"myuser\").build();\n+      assertNotNull(toTest.toString());\n+   }\n+   \n+   public void testToString() {\n+      LoginCredentials toTest = LoginCredentials.builder().user(\"myuser\").password(\"password\").privateKey(\"key\").build();\n+      assertNotNull(toTest.toString());\n+   }\n }",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/core/src/test/java/org/jclouds/domain/LoginCredentialsTest.java",
                "sha": "608f5e31857131afc87d5e7bc333a67d8d5dee42",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/core/src/test/java/org/jclouds/rest/CredentialStoreModuleTest.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/test/java/org/jclouds/rest/CredentialStoreModuleTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 0,
                "filename": "core/src/test/java/org/jclouds/rest/CredentialStoreModuleTest.java",
                "patch": "@@ -34,6 +34,7 @@\n import org.testng.annotations.Test;\n \n import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n import com.google.common.io.ByteSource;\n import com.google.inject.Guice;\n import com.google.inject.Injector;\n@@ -124,6 +125,25 @@ public void testLoginConsistentAcrossMultipleInjectorsAndLooksNiceWithSudo() thr\n       remove(map, getStore(createInjector()), \"test\");\n    }\n \n+   public void testCredentialsToByteSourceConversion() throws Exception {\n+      Function<Credentials, ByteSource> toBytesFunc = getCredentialsToByteStoreFunction(createInjector());\n+      Function<ByteSource, Credentials> fromBytesFunc = getByteStoreToCredentialsFunction(createInjector());\n+      \n+      LoginCredentials creds = LoginCredentials.builder().user(\"myuser\").password(\"mypass\").authenticateSudo(true).build();\n+      ByteSource bytes = toBytesFunc.apply(creds);\n+      LoginCredentials deserializedCreds = (LoginCredentials) fromBytesFunc.apply(bytes);\n+      \n+      String json = bytes.asCharSource(Charsets.UTF_8).read();\n+      assertEquals(json, \"{\\\"user\\\":\\\"myuser\\\",\\\"password\\\":\\\"mypass\\\",\\\"authenticateSudo\\\":true}\");\n+      \n+      assertEquals(deserializedCreds.identity, creds.identity);\n+      assertEquals(deserializedCreds.credential, creds.credential);\n+      assertEquals(deserializedCreds.getUser(), creds.getUser());\n+      assertEquals(deserializedCreds.getOptionalPassword(), creds.getOptionalPassword());\n+      assertEquals(deserializedCreds.getOptionalPrivateKey(), creds.getOptionalPrivateKey());\n+      assertEquals(deserializedCreds.shouldAuthenticateSudo(), creds.shouldAuthenticateSudo());\n+   }\n+   \n    protected Map<String, Credentials> getStore(Injector injector) {\n       return injector.getInstance(Key.get(new TypeLiteral<Map<String, Credentials>>() {\n       }));\n@@ -134,6 +154,16 @@ public void testLoginConsistentAcrossMultipleInjectorsAndLooksNiceWithSudo() thr\n       }));\n    }\n \n+   protected Function<ByteSource, Credentials> getByteStoreToCredentialsFunction(Injector injector) {\n+      return injector.getInstance(Key.get(new TypeLiteral<Function<ByteSource, Credentials>>() {\n+      }));\n+   }\n+\n+   protected Function<Credentials, ByteSource> getCredentialsToByteStoreFunction(Injector injector) {\n+      return injector.getInstance(Key.get(new TypeLiteral<Function<Credentials, ByteSource>>() {\n+      }));\n+   }\n+   \n    protected Injector createInjectorWithProvidedMap(Map<String, ByteSource> map) {\n       return Guice.createInjector(new CredentialStoreModule(map), new GsonModule());\n    }",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/core/src/test/java/org/jclouds/rest/CredentialStoreModuleTest.java",
                "sha": "9e4635b711f16a7393da56f113e884178e1e4ba6",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/drivers/jsch/src/main/java/org/jclouds/ssh/jsch/JschSshClient.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/drivers/jsch/src/main/java/org/jclouds/ssh/jsch/JschSshClient.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 5,
                "filename": "drivers/jsch/src/main/java/org/jclouds/ssh/jsch/JschSshClient.java",
                "patch": "@@ -128,16 +128,16 @@ public JschSshClient(ProxyConfig proxyConfig, BackoffLimitedRetryHandler backoff\n       this.user = checkNotNull(loginCredentials, \"loginCredentials\").getUser();\n       this.host = checkNotNull(socket, \"socket\").getHostText();\n       checkArgument(socket.getPort() > 0, \"ssh port must be greater then zero\" + socket.getPort());\n-      checkArgument(loginCredentials.getPassword() != null || loginCredentials.hasUnencryptedPrivateKey() || agentConnector.isPresent(),\n+      checkArgument(loginCredentials.getOptionalPassword().isPresent() || loginCredentials.hasUnencryptedPrivateKey() || agentConnector.isPresent(),\n                \"you must specify a password, a key or an SSH agent needs to be available\");\n       this.backoffLimitedRetryHandler = checkNotNull(backoffLimitedRetryHandler, \"backoffLimitedRetryHandler\");\n-      if (loginCredentials.getPassword() != null) {\n+      if (loginCredentials.getOptionalPassword().isPresent()) {\n          this.toString = String.format(\"%s:pw[%s]@%s:%d\", loginCredentials.getUser(),\n-               base16().lowerCase().encode(md5().hashString(loginCredentials.getPassword(), UTF_8).asBytes()), host,\n+               base16().lowerCase().encode(md5().hashString(loginCredentials.getOptionalPassword().get(), UTF_8).asBytes()), host,\n                socket.getPort());\n       } else if (loginCredentials.hasUnencryptedPrivateKey()) {\n-         String fingerPrint = fingerprintPrivateKey(loginCredentials.getPrivateKey());\n-         String sha1 = sha1PrivateKey(loginCredentials.getPrivateKey());\n+         String fingerPrint = fingerprintPrivateKey(loginCredentials.getOptionalPrivateKey().get());\n+         String sha1 = sha1PrivateKey(loginCredentials.getOptionalPrivateKey().get());\n          this.toString = String.format(\"%s:rsa[fingerprint(%s),sha1(%s)]@%s:%d\", loginCredentials.getUser(),\n                  fingerPrint, sha1, host, socket.getPort());\n       } else {",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/drivers/jsch/src/main/java/org/jclouds/ssh/jsch/JschSshClient.java",
                "sha": "2413b9fde9b8fe9f9661f78d2392d3892ec2017b",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/drivers/jsch/src/main/java/org/jclouds/ssh/jsch/SessionConnection.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/drivers/jsch/src/main/java/org/jclouds/ssh/jsch/SessionConnection.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 3,
                "filename": "drivers/jsch/src/main/java/org/jclouds/ssh/jsch/SessionConnection.java",
                "patch": "@@ -169,10 +169,10 @@ public Session create() throws Exception {\n             .getSession(loginCredentials.getUser(), hostAndPort.getHostText(), hostAndPort.getPortOrDefault(22));\n       if (sessionTimeout != 0)\n          session.setTimeout(sessionTimeout);\n-      if (loginCredentials.getPrivateKey() == null) {\n-         session.setPassword(loginCredentials.getPassword());\n+      if (!loginCredentials.getOptionalPrivateKey().isPresent()) {\n+         session.setPassword(loginCredentials.getOptionalPassword().orNull());\n       } else if (loginCredentials.hasUnencryptedPrivateKey()) {\n-         byte[] privateKey = loginCredentials.getPrivateKey().getBytes();\n+         byte[] privateKey = loginCredentials.getOptionalPrivateKey().get().getBytes();\n          jsch.addIdentity(loginCredentials.getUser(), privateKey, null, emptyPassPhrase);\n       } else if (agentConnector.isPresent()) {\n          JSch.setConfig(\"PreferredAuthentications\", \"publickey\");",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/drivers/jsch/src/main/java/org/jclouds/ssh/jsch/SessionConnection.java",
                "sha": "987d8b91d3ed5b2d5ea501c47235910b95f1d55c",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/drivers/sshj/src/main/java/org/jclouds/sshj/SSHClientConnection.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/drivers/sshj/src/main/java/org/jclouds/sshj/SSHClientConnection.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 3,
                "filename": "drivers/sshj/src/main/java/org/jclouds/sshj/SSHClientConnection.java",
                "patch": "@@ -157,11 +157,11 @@ public SSHClient create() throws Exception {\n          ssh.setTimeout(sessionTimeout);\n       }\n       ssh.connect(hostAndPort.getHostText(), hostAndPort.getPortOrDefault(22));\n-      if (loginCredentials.getPassword() != null) {\n-         ssh.authPassword(loginCredentials.getUser(), loginCredentials.getPassword());\n+      if (loginCredentials.getOptionalPassword().isPresent()) {\n+         ssh.authPassword(loginCredentials.getUser(), loginCredentials.getOptionalPassword().get());\n       } else if (loginCredentials.hasUnencryptedPrivateKey()) {\n          OpenSSHKeyFile key = new OpenSSHKeyFile();\n-         key.init(loginCredentials.getPrivateKey(), null);\n+         key.init(loginCredentials.getOptionalPrivateKey().get(), null);\n          ssh.authPublickey(loginCredentials.getUser(), key);\n       } else if (agentConnector.isPresent()) {\n          AgentProxy proxy = new AgentProxy(agentConnector.get());",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/drivers/sshj/src/main/java/org/jclouds/sshj/SSHClientConnection.java",
                "sha": "68754e9c4f6c968d12521922622e8cfe03612101",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/drivers/sshj/src/main/java/org/jclouds/sshj/SshjSshClient.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/drivers/sshj/src/main/java/org/jclouds/sshj/SshjSshClient.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 5,
                "filename": "drivers/sshj/src/main/java/org/jclouds/sshj/SshjSshClient.java",
                "patch": "@@ -145,16 +145,16 @@ public SshjSshClient(BackoffLimitedRetryHandler backoffLimitedRetryHandler, Host\n       this.user = checkNotNull(loginCredentials, \"loginCredentials\").getUser();\n       this.host = checkNotNull(socket, \"socket\").getHostText();\n       checkArgument(socket.getPort() > 0, \"ssh port must be greater then zero\" + socket.getPort());\n-      checkArgument(loginCredentials.getPassword() != null || loginCredentials.hasUnencryptedPrivateKey() || agentConnector.isPresent(),\n+      checkArgument(loginCredentials.getOptionalPassword().isPresent() || loginCredentials.hasUnencryptedPrivateKey() || agentConnector.isPresent(),\n               \"you must specify a password, a key or an SSH agent needs to be available\");\n       this.backoffLimitedRetryHandler = checkNotNull(backoffLimitedRetryHandler, \"backoffLimitedRetryHandler\");\n-      if (loginCredentials.getPassword() != null) {\n+      if (loginCredentials.getOptionalPassword().isPresent()) {\n          this.toString = String.format(\"%s:pw[%s]@%s:%d\", loginCredentials.getUser(),\n-               base16().lowerCase().encode(md5().hashString(loginCredentials.getPassword(), UTF_8).asBytes()), host,\n+               base16().lowerCase().encode(md5().hashString(loginCredentials.getOptionalPassword().get(), UTF_8).asBytes()), host,\n                socket.getPort());\n       } else if (loginCredentials.hasUnencryptedPrivateKey()) {\n-         String fingerPrint = fingerprintPrivateKey(loginCredentials.getPrivateKey());\n-         String sha1 = sha1PrivateKey(loginCredentials.getPrivateKey());\n+         String fingerPrint = fingerprintPrivateKey(loginCredentials.getOptionalPrivateKey().get());\n+         String sha1 = sha1PrivateKey(loginCredentials.getOptionalPrivateKey().get());\n          this.toString = String.format(\"%s:rsa[fingerprint(%s),sha1(%s)]@%s:%d\", loginCredentials.getUser(),\n                   fingerPrint, sha1, host, socket.getPort());\n       } else {",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/drivers/sshj/src/main/java/org/jclouds/sshj/SshjSshClient.java",
                "sha": "b1f60b5e781939101b1341b18b180ce4a044c9f5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/compute/strategy/AWSEC2ImageParserTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/compute/strategy/AWSEC2ImageParserTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 2,
                "filename": "providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/compute/strategy/AWSEC2ImageParserTest.java",
                "patch": "@@ -170,11 +170,11 @@ public void testParseRightScaleImage() {\n \n       assertEquals(\n             new Gson().toJson(Iterables.get(result, 1)),\n-            \"{\\\"operatingSystem\\\":{\\\"family\\\":\\\"UBUNTU\\\",\\\"arch\\\":\\\"paravirtual\\\",\\\"version\\\":\\\"9.10\\\",\\\"description\\\":\\\"411009282317/RightImage_Ubuntu_9.10_x64_v4.5.3_EBS_Alpha\\\",\\\"is64Bit\\\":true},\\\"status\\\":\\\"AVAILABLE\\\",\\\"backendStatus\\\":\\\"available\\\",\\\"version\\\":\\\"4.5.3_EBS_Alpha\\\",\\\"description\\\":\\\"RightImage_Ubuntu_9.10_x64_v4.5.3_EBS_Alpha\\\",\\\"defaultCredentials\\\":{\\\"authenticateSudo\\\":false,\\\"identity\\\":\\\"root\\\"},\\\"id\\\":\\\"us-east-1/ami-c19db6b5\\\",\\\"type\\\":\\\"IMAGE\\\",\\\"tags\\\":[],\\\"providerId\\\":\\\"ami-c19db6b5\\\",\\\"name\\\":\\\"RightImage_Ubuntu_9.10_x64_v4.5.3_EBS_Alpha\\\",\\\"location\\\":{\\\"scope\\\":\\\"REGION\\\",\\\"id\\\":\\\"us-east-1\\\",\\\"description\\\":\\\"us-east-1\\\",\\\"iso3166Codes\\\":[],\\\"metadata\\\":{}},\\\"userMetadata\\\":{\\\"owner\\\":\\\"411009282317\\\",\\\"rootDeviceType\\\":\\\"ebs\\\",\\\"virtualizationType\\\":\\\"paravirtual\\\",\\\"hypervisor\\\":\\\"xen\\\"}}\");\n+            \"{\\\"operatingSystem\\\":{\\\"family\\\":\\\"UBUNTU\\\",\\\"arch\\\":\\\"paravirtual\\\",\\\"version\\\":\\\"9.10\\\",\\\"description\\\":\\\"411009282317/RightImage_Ubuntu_9.10_x64_v4.5.3_EBS_Alpha\\\",\\\"is64Bit\\\":true},\\\"status\\\":\\\"AVAILABLE\\\",\\\"backendStatus\\\":\\\"available\\\",\\\"version\\\":\\\"4.5.3_EBS_Alpha\\\",\\\"description\\\":\\\"RightImage_Ubuntu_9.10_x64_v4.5.3_EBS_Alpha\\\",\\\"defaultCredentials\\\":{\\\"authenticateSudo\\\":false,\\\"password\\\":{},\\\"privateKey\\\":{},\\\"identity\\\":\\\"root\\\"},\\\"id\\\":\\\"us-east-1/ami-c19db6b5\\\",\\\"type\\\":\\\"IMAGE\\\",\\\"tags\\\":[],\\\"providerId\\\":\\\"ami-c19db6b5\\\",\\\"name\\\":\\\"RightImage_Ubuntu_9.10_x64_v4.5.3_EBS_Alpha\\\",\\\"location\\\":{\\\"scope\\\":\\\"REGION\\\",\\\"id\\\":\\\"us-east-1\\\",\\\"description\\\":\\\"us-east-1\\\",\\\"iso3166Codes\\\":[],\\\"metadata\\\":{}},\\\"userMetadata\\\":{\\\"owner\\\":\\\"411009282317\\\",\\\"rootDeviceType\\\":\\\"ebs\\\",\\\"virtualizationType\\\":\\\"paravirtual\\\",\\\"hypervisor\\\":\\\"xen\\\"}}\");\n \n       assertEquals(\n             new Gson().toJson(Iterables.get(result, 2)),\n-            \"{\\\"operatingSystem\\\":{\\\"family\\\":\\\"WINDOWS\\\",\\\"arch\\\":\\\"hvm\\\",\\\"version\\\":\\\"2003\\\",\\\"description\\\":\\\"411009282317/RightImage Windows_2003_i386_v5.4.3\\\",\\\"is64Bit\\\":false},\\\"status\\\":\\\"AVAILABLE\\\",\\\"backendStatus\\\":\\\"available\\\",\\\"version\\\":\\\"5.4.3\\\",\\\"description\\\":\\\"Built by RightScale\\\",\\\"defaultCredentials\\\":{\\\"authenticateSudo\\\":false,\\\"identity\\\":\\\"root\\\"},\\\"id\\\":\\\"us-east-1/ami-710c2605\\\",\\\"type\\\":\\\"IMAGE\\\",\\\"tags\\\":[],\\\"providerId\\\":\\\"ami-710c2605\\\",\\\"name\\\":\\\"RightImage Windows_2003_i386_v5.4.3\\\",\\\"location\\\":{\\\"scope\\\":\\\"REGION\\\",\\\"id\\\":\\\"us-east-1\\\",\\\"description\\\":\\\"us-east-1\\\",\\\"iso3166Codes\\\":[],\\\"metadata\\\":{}},\\\"userMetadata\\\":{\\\"owner\\\":\\\"411009282317\\\",\\\"rootDeviceType\\\":\\\"ebs\\\",\\\"virtualizationType\\\":\\\"hvm\\\",\\\"hypervisor\\\":\\\"xen\\\"}}\");\n+            \"{\\\"operatingSystem\\\":{\\\"family\\\":\\\"WINDOWS\\\",\\\"arch\\\":\\\"hvm\\\",\\\"version\\\":\\\"2003\\\",\\\"description\\\":\\\"411009282317/RightImage Windows_2003_i386_v5.4.3\\\",\\\"is64Bit\\\":false},\\\"status\\\":\\\"AVAILABLE\\\",\\\"backendStatus\\\":\\\"available\\\",\\\"version\\\":\\\"5.4.3\\\",\\\"description\\\":\\\"Built by RightScale\\\",\\\"defaultCredentials\\\":{\\\"authenticateSudo\\\":false,\\\"password\\\":{},\\\"privateKey\\\":{},\\\"identity\\\":\\\"root\\\"},\\\"id\\\":\\\"us-east-1/ami-710c2605\\\",\\\"type\\\":\\\"IMAGE\\\",\\\"tags\\\":[],\\\"providerId\\\":\\\"ami-710c2605\\\",\\\"name\\\":\\\"RightImage Windows_2003_i386_v5.4.3\\\",\\\"location\\\":{\\\"scope\\\":\\\"REGION\\\",\\\"id\\\":\\\"us-east-1\\\",\\\"description\\\":\\\"us-east-1\\\",\\\"iso3166Codes\\\":[],\\\"metadata\\\":{}},\\\"userMetadata\\\":{\\\"owner\\\":\\\"411009282317\\\",\\\"rootDeviceType\\\":\\\"ebs\\\",\\\"virtualizationType\\\":\\\"hvm\\\",\\\"hypervisor\\\":\\\"xen\\\"}}\");\n    }\n \n    public void testParseAmznImage() {",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/compute/strategy/AWSEC2ImageParserTest.java",
                "sha": "bee444961e386bea3ae6e917922e1f047a4d5f02",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/compute/strategy/CreateKeyPairPlacementAndSecurityGroupsAsNeededAndReturnRunOptionsTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/compute/strategy/CreateKeyPairPlacementAndSecurityGroupsAsNeededAndReturnRunOptionsTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "deletions": 1,
                "filename": "providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/compute/strategy/CreateKeyPairPlacementAndSecurityGroupsAsNeededAndReturnRunOptionsTest.java",
                "patch": "@@ -463,7 +463,7 @@ public void testCreateNewKeyPairUnlessUserSpecifiedOtherwise_ImportPublicKeyWhen\n \n       // we specify we have a public key we want to use for authentication\n       expect(options.getPublicKey()).andReturn(\"ssh-rsa\").times(2);\n-      expect(options.getLoginPrivateKey()).andReturn(CREDENTIALS.getPrivateKey()).atLeastOnce();\n+      expect(options.getLoginPrivateKey()).andReturn(CREDENTIALS.getOptionalPrivateKey().get()).atLeastOnce();\n \n       // Here, we import the keypair and place it into the cache\n       expect(strategy.importExistingKeyPair.apply(new RegionNameAndPublicKeyMaterial(region, group, \"ssh-rsa\")))",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/compute/strategy/CreateKeyPairPlacementAndSecurityGroupsAsNeededAndReturnRunOptionsTest.java",
                "sha": "feeaa6684ff3b5e9feb38af250dc56fa7d05bd63",
                "status": "modified"
            }
        ],
        "message": "JCLOUDS-549: Fix NPE in LoginCredentials.toString\n\n- also deprecates LoginCredentails.get(Password|PrivateKey)\n- use getOptionalPassword and getOptionalPrivateKey instead",
        "parent": "https://github.com/apache/jclouds/commit/fb60d76704745317186ad700e9b7ce5a569a614d",
        "repo": "jclouds",
        "unit_tests": [
            "RunScriptOnNodeUsingSshTest.java",
            "PrioritizeCredentialsFromTemplateTest.java",
            "LoginCredentialsTest.java",
            "CredentialStoreModuleTest.java",
            "JschSshClientTest.java",
            "SshjSshClientTest.java"
        ]
    },
    "jclouds_2b85580": {
        "bug_id": "jclouds_2b85580",
        "commit": "https://github.com/apache/jclouds/commit/2b855809a4ef1b87fb17e541442b97a02396fffd",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/jclouds/blob/2b855809a4ef1b87fb17e541442b97a02396fffd/apis/chef/src/main/java/org/jclouds/chef/functions/GroupToBootScript.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/chef/src/main/java/org/jclouds/chef/functions/GroupToBootScript.java?ref=2b855809a4ef1b87fb17e541442b97a02396fffd",
                "deletions": 5,
                "filename": "apis/chef/src/main/java/org/jclouds/chef/functions/GroupToBootScript.java",
                "patch": "@@ -121,19 +121,24 @@ private Statement createClientRbFile(String clientRbFile, String group, String n\n    }\n \n    private Statement createAttributesFile(String chefBootFile, BootstrapConfig config) {\n-      String attributes = config.getAttributes().toString();\n       String runlist = Joiner.on(',').join(transform(config.getRunList(), new Function<String, String>() {\n          @Override\n          public String apply(String input) {\n             return \"\\\"\" + input + \"\\\"\";\n          }\n       }));\n \n-      // Append the runlist to the json attributes\n       StringBuilder sb = new StringBuilder();\n-      // Strip the json ending character\n-      sb.append(attributes.trim().substring(0, attributes.length() - 1));\n-      sb.append(\",\\\"run_list\\\":[\").append(runlist).append(\"]\");\n+      sb.append(\"{\");\n+\n+      if (config.getAttributes() != null) {\n+         String attributes = config.getAttributes().toString();\n+         // Omit the opening and closing json characters\n+         sb.append(attributes.trim().substring(1, attributes.length() - 1));\n+         sb.append(\",\");\n+      }\n+\n+      sb.append(\"\\\"run_list\\\":[\").append(runlist).append(\"]\");\n       sb.append(\"}\");\n \n       return createOrOverwriteFile(chefBootFile, Collections.singleton(sb.toString()));",
                "raw_url": "https://github.com/apache/jclouds/raw/2b855809a4ef1b87fb17e541442b97a02396fffd/apis/chef/src/main/java/org/jclouds/chef/functions/GroupToBootScript.java",
                "sha": "9920de5e6e7b7cbf18a6ab822ba863b3ebe36cc9",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/jclouds/blob/2b855809a4ef1b87fb17e541442b97a02396fffd/apis/chef/src/test/java/org/jclouds/chef/functions/GroupToBootScriptTest.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/chef/src/test/java/org/jclouds/chef/functions/GroupToBootScriptTest.java?ref=2b855809a4ef1b87fb17e541442b97a02396fffd",
                "deletions": 0,
                "filename": "apis/chef/src/test/java/org/jclouds/chef/functions/GroupToBootScriptTest.java",
                "patch": "@@ -204,6 +204,24 @@ public void testOneRecipeAndEnvironmentOmnibus() throws IOException {\n       verify(validatorKey);\n    }\n \n+   public void testNoAttribtues() throws IOException {\n+      Optional<PrivateKey> validatorCredential = Optional.of(createMock(PrivateKey.class));\n+      BootstrapConfig config = BootstrapConfig.builder()\n+            .environment(\"env\").runList(new RunListBuilder().addRecipe(\"apache2\").addRole(\"webserver\").build()).build();\n+\n+      GroupToBootScript fn = groupToBootScriptFor(config, validatorCredential, true);\n+\n+      PrivateKey validatorKey = validatorCredential.get();\n+      expect(validatorKey.getEncoded()).andReturn(PemsTest.PRIVATE_KEY.getBytes());\n+      replay(validatorKey);\n+\n+      assertEquals(fn.apply(\"foo\", null).render(OsFamily.UNIX),\n+            \"setupPublicCurl || exit 1\\ncurl -q -s -S -L --connect-timeout 10 --max-time 600 --retry 20 \"\n+                  + \"-X GET  https://www.opscode.com/chef/install.sh |(bash)\\n\" + readContent(\"bootstrap-env-noattrs.sh\"));\n+\n+      verify(validatorKey);\n+   }\n+\n    public void testCustomNodeName() throws IOException {\n       Optional<PrivateKey> validatorCredential = Optional.of(createMock(PrivateKey.class));\n       BootstrapConfig config = BootstrapConfig.builder().attributes(new JsonBall(\"{\\\"tomcat6\\\":{\\\"ssl_port\\\":8433}}\"))",
                "raw_url": "https://github.com/apache/jclouds/raw/2b855809a4ef1b87fb17e541442b97a02396fffd/apis/chef/src/test/java/org/jclouds/chef/functions/GroupToBootScriptTest.java",
                "sha": "dd4302440d3bb63c46fb42cc2f884889c87b7a4d",
                "status": "modified"
            },
            {
                "additions": 57,
                "blob_url": "https://github.com/apache/jclouds/blob/2b855809a4ef1b87fb17e541442b97a02396fffd/apis/chef/src/test/resources/bootstrap-env-noattrs.sh",
                "changes": 57,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/chef/src/test/resources/bootstrap-env-noattrs.sh?ref=2b855809a4ef1b87fb17e541442b97a02396fffd",
                "deletions": 0,
                "filename": "apis/chef/src/test/resources/bootstrap-env-noattrs.sh",
                "patch": "@@ -0,0 +1,57 @@\n+mkdir -p /etc/chef\n+cat > /etc/chef/client.rb <<-'END_OF_JCLOUDS_FILE'\n+\trequire 'rubygems'\n+\trequire 'ohai'\n+\to = Ohai::System.new\n+\to.all_plugins\n+\tnode_name \"foo-\" + o[:ipaddress]\n+\tlog_level :info\n+\tlog_location STDOUT\n+\tvalidation_client_name \"chef-validator\"\n+\tchef_server_url \"http://localhost:4000\"\n+\tenvironment \"env\"\n+END_OF_JCLOUDS_FILE\n+cat > /etc/chef/validation.pem <<-'END_OF_JCLOUDS_FILE'\n+\t-----BEGIN PRIVATE KEY-----\n+\tLS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVB\n+\teWIyWkpKcUdtMEtLUis4bmZRSk5zU2QrRjl0WE5NVjdDZk9jVzZqc3FzOEVaZ2lW\n+\tClIwOWhEMUlZT2o0WXFNMHFKT05sZ3lnNHhSV2V3ZFNHN1FUUGoxbEpwVkFpZGE5\n+\tc1h5MitrenlhZ1pBMUFtME8KWmNicWI1aG9lSURnY1grZURhNzlzMHUwRG9tamNm\n+\tTzlFS2h2SExCeit6TSszUXFQUmtQVjhuWVRiZnMrSGpWegp6T1U2RDFCMFhSMytJ\n+\tUFpabDJBbldzMmQwcWhuU3RIY0RVdm5SVlEwUDQ4Mll3TjlWZ2NlT1p0cFB6MERD\n+\tS0VKCjVUeDVTVHViOGswL3p0L1ZBTUhRYWZMU3VRTUxkMnM0Wkx1T1pwdE4vL3VB\n+\tc1RteGlyZXFkMzd6KzhaVGRCYkoKOExFcEoraUNYdVNmbTVhVWg3aXc2b3h2VG9Z\n+\tMkFMNTMraksyVVFJREFRQUJBb0lCQVFEQTg4QjNpL3hXbjB2WApCVnhGYW1DWW9l\n+\tY3VOakd3WFhrU3laZXc2MTZBK0VPQ3U0N2JoNGFUdXJkRmJZTDBZRmFBdGFXdnps\n+\tYU4yZUhnCkRiK0hEdVRlZkUyOStXa2NHazZTc2hQbWl6NVQwWE9DQUlDV3c2d1NW\n+\tRGtIbUd3UzRqWnZiQUZtN1c4bndHazkKWWh4Z3hGaVJuZ3N3SlpGb3BPTG9GNVdY\n+\tczJ0ZDhndUlZTnNsTXBvN3R1NTBpRm5CSHdLTzJac1BBazh0OW5uUwp4bERhdkty\n+\tdXltRW1xSENyMytkdGlvNWVhZW5KY3AzZmpvWEJRT0tVazNpcElJMjlYUkI4TnFl\n+\tQ1ZWLzdLeHdxCmNrcU9CRWJSd0JjbGNreUliRCtSaUFnS3ZPZWxPUmpFaUU5UjQy\n+\tdnVxdnhSQTZrOWtkOW83dXRsWDBBVXRwRW4KM2daYzZMZXBBb0dCQVA5YWVsNVk3\n+\tNStzSzJKSlVOT09oTzhhZTQ1Y2RzaWxwMnlJMFgrVUJhU3VRczIrZHlQcAprcEVI\n+\tQXhkNHBtbVN2bi84YzlUbEVaaHIrcVliQUJYVlBsRG5jeHBJdXcyQWpiazdzL1M0\n+\tWGFTS3NScXBYTDU3CnpqL1FPcUxrUms4K09WVjlxNmxNZVFOcUx0RWoxdTZKUHZp\n+\tWDcwUm8rRlF0UnR0Tk9ZYmZkUC9mQW9HQkFNcEEKWGpSNXdvVjVzVWIrUkVnOXZF\n+\tdVlvOFJTeU9hcnhxS0ZDSVhWVU5zTE94KzIyK0FLNCtDUXBidWVXTjdqb3RybApZ\n+\tRDZ1VDZzdldpM0FBQzdraVkwVUkvZmpWUFJDVWk4dFZvUVVFMFRhVTVWTElUYVlP\n+\tQitXL2JCYURFNE05NTYwCjFOdURXTzkwYmFBNWRmVTQ0aXV6dmEwMnJHSlhLOStu\n+\tUzNvOG5rL1BBb0dCQUxPTDZkam5EZTRtd0FhRzZKY28KY2Q0eHI4amt5UHpDUlp1\n+\teUJDU0Jid3BoSVVYTGM3aERwclBreTA2NG5jSkQxVURtd0lka1hkL2ZwTWtnMlFt\n+\tQQovQ1VrNkxFRmpNaXNxSG9qT2FDTDlnUVpKUGhMTjVRVU4yeDFQSldHanMxdlFo\n+\tOFRreDBpVVVDT2E4YlFQWE5SCiszNE9Uc1c2VFVuYTRDU1pBeWNMZmhmZkFvR0JB\n+\tSWdnVnNlZkJDdnVRa0YwTmVVaG1EQ1JaZmhuZDh5NTVSSFIKMUhDdnFLSWxwdity\n+\taGNYL3pteUJMdXRlb3BZeVJKUnNPaUUyRlcwMGk4K3JJUFJ1NFozUTVueWJ4N3cz\n+\tUHpWOQpvSE41UjViYUU5T3lJNEtwWld6dHBZWWl0WkY2N05jbkF2VlVMSEhPdlZK\n+\tUUduS1lmTEhKWW1ySkY3R0Exb2pNCkF1TWRGYmpGQW9HQVB4VWh4d0Z5OGdhcUJh\n+\taEtVRVpuNEY4MUhGUDVpaEdoa1Q0UUw2QUZQTzJlK0poSUdqdVIKMjcrODVoY0Zx\n+\tUStISFZ0RnNtODFiL2ErUjdQNFV1Q1JnYzhlQ2p4UU1vSjFYbDRuN1ZialBiSE1u\n+\tSU4wUnl2ZApPNFpwV0RXWW5DTzAyMUpUT1VVT0o0Si95MDQxNkJ2a3cwejU5eTdz\n+\tTlg3d0RCQkhIYksvWENjPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\n+\t-----END PRIVATE KEY-----\n+\t\n+END_OF_JCLOUDS_FILE\n+cat > /etc/chef/first-boot.json <<-'END_OF_JCLOUDS_FILE'\n+\t{\"run_list\":[\"recipe[apache2]\",\"role[webserver]\"]}\n+END_OF_JCLOUDS_FILE\n+chef-client -j /etc/chef/first-boot.json",
                "raw_url": "https://github.com/apache/jclouds/raw/2b855809a4ef1b87fb17e541442b97a02396fffd/apis/chef/src/test/resources/bootstrap-env-noattrs.sh",
                "sha": "fe0de79068610dd3e8d3cfaa5303115ffd25eb1e",
                "status": "added"
            }
        ],
        "message": "JCLOUDS-890: Prevent NPE when generating the Chef attributes file",
        "parent": "https://github.com/apache/jclouds/commit/efd4aa8bcfa3202dfadba8faebad928c7ec3940c",
        "repo": "jclouds",
        "unit_tests": [
            "GroupToBootScriptTest.java"
        ]
    },
    "jclouds_2c82ab2": {
        "bug_id": "jclouds_2c82ab2",
        "commit": "https://github.com/apache/jclouds/commit/2c82ab283207776c1127a78f7f6eb392a50f832f",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jclouds/blob/2c82ab283207776c1127a78f7f6eb392a50f832f/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java?ref=2c82ab283207776c1127a78f7f6eb392a50f832f",
                "deletions": 5,
                "filename": "apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java",
                "patch": "@@ -133,9 +133,10 @@ public int hashCode() {\n    }\n \n    protected ToStringHelper string() {\n-      return toStringHelper(\"\").add(\"keyName\", \"keyName\").add(\"securityGroupNames\", securityGroupNames)\n+      return toStringHelper(\"\").add(\"keyName\", keyName).add(\"securityGroupNames\", securityGroupNames)\n               .add(\"metadata\", metadata).add(\"personality\", personality)\n-              .add(\"adminPassPresent\", adminPass != null).add(\"userData\", new String(userData));\n+              .add(\"adminPassPresent\", adminPass != null)\n+              .add(\"userData\", userData == null ? null : new String(userData));\n    }\n \n    @Override\n@@ -258,9 +259,6 @@ public CreateServerOptions userData(byte[] userData) {\n    /**\n     * A keypair name can be defined when creating a server. This key will be\n     * linked to the server and used to SSH connect to the machine\n-    * \n-    * @param keyName\n-    * @return\n     */\n    public String getKeyPairName() {\n       return keyName;",
                "raw_url": "https://github.com/apache/jclouds/raw/2c82ab283207776c1127a78f7f6eb392a50f832f/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java",
                "sha": "ae36ea1455d5684904d2b3cb7ab5b1983a573cd8",
                "status": "modified"
            }
        ],
        "message": "openstack-nova: fixing NPE in toString()",
        "parent": "https://github.com/apache/jclouds/commit/404dc9314012425f0b04569d14b50c43e37a9e85",
        "repo": "jclouds",
        "unit_tests": [
            "CreateServerOptionsTest.java"
        ]
    },
    "jclouds_3659a5f": {
        "bug_id": "jclouds_3659a5f",
        "commit": "https://github.com/apache/jclouds/commit/3659a5f583d38a925476287d47b34b4afa7bdb43",
        "file": [
            {
                "additions": 67,
                "blob_url": "https://github.com/apache/jclouds/blob/3659a5f583d38a925476287d47b34b4afa7bdb43/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/functions/AllocateAndAddFloatingIpToNode.java",
                "changes": 93,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/functions/AllocateAndAddFloatingIpToNode.java?ref=3659a5f583d38a925476287d47b34b4afa7bdb43",
                "deletions": 26,
                "filename": "apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/functions/AllocateAndAddFloatingIpToNode.java",
                "patch": "@@ -19,8 +19,9 @@\n import static com.google.common.base.Preconditions.checkState;\n import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_RUNNING;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n import java.util.concurrent.atomic.AtomicReference;\n \n import javax.annotation.Resource;\n@@ -32,13 +33,15 @@\n import org.jclouds.compute.reference.ComputeServiceConstants;\n import org.jclouds.logging.Logger;\n import org.jclouds.openstack.nova.v2_0.NovaApi;\n+import org.jclouds.openstack.nova.v2_0.compute.options.NodeAndNovaTemplateOptions;\n import org.jclouds.openstack.nova.v2_0.domain.FloatingIP;\n import org.jclouds.openstack.nova.v2_0.domain.zonescoped.ZoneAndId;\n import org.jclouds.openstack.nova.v2_0.extensions.FloatingIPApi;\n import org.jclouds.rest.InsufficientResourcesException;\n \n import com.google.common.base.Function;\n import com.google.common.base.Objects;\n+import com.google.common.base.Optional;\n import com.google.common.base.Predicate;\n import com.google.common.cache.LoadingCache;\n import com.google.common.collect.ImmutableSet;\n@@ -49,7 +52,7 @@\n  * A function for adding and allocating an ip to a node\n  */\n public class AllocateAndAddFloatingIpToNode implements\n-         Function<AtomicReference<NodeMetadata>, AtomicReference<NodeMetadata>> {\n+         Function<AtomicReference<NodeAndNovaTemplateOptions>, AtomicReference<NodeMetadata>> {\n \n    @Resource\n    @Named(ComputeServiceConstants.COMPUTE_LOGGER)\n@@ -68,39 +71,77 @@ public AllocateAndAddFloatingIpToNode(@Named(TIMEOUT_NODE_RUNNING) Predicate<Ato\n    }\n \n    @Override\n-   public AtomicReference<NodeMetadata> apply(AtomicReference<NodeMetadata> input) {\n-      checkState(nodeRunning.apply(input), \"node never achieved state running %s\", input.get());\n-      NodeMetadata node = input.get();\n+   public AtomicReference<NodeMetadata> apply(AtomicReference<NodeAndNovaTemplateOptions> input) {\n+      checkState(nodeRunning.apply(input.get().getNodeMetadata()), \"node never achieved state running %s\", input.get().getNodeMetadata());\n+      NodeMetadata node = input.get().getNodeMetadata().get();\n       // node's location is a host\n       String zoneId = node.getLocation().getParent().getId();\n       FloatingIPApi floatingIpApi = novaApi.getFloatingIPExtensionForZone(zoneId).get();\n+      Optional<Set<String>> poolNames = input.get().getNovaTemplateOptions().get().getFloatingIpPoolNames();\n+\n+      Optional<FloatingIP> ip = allocateFloatingIPForNode(floatingIpApi, poolNames, node.getId());\n+      if (!ip.isPresent()) {\n+         throw new InsufficientResourcesException(\"Failed to allocate a FloatingIP for node(\" + node.getId() + \")\");\n+      }\n+      logger.debug(\">> adding floatingIp(%s) to node(%s)\", ip.get().getIp(), node.getId());\n+\n+      floatingIpApi.addToServer(ip.get().getIp(), node.getProviderId());\n+      input.get().getNodeMetadata().set(NodeMetadataBuilder.fromNodeMetadata(node).publicAddresses(ImmutableSet.of(ip.get().getIp())).build());\n+      floatingIpCache.invalidate(ZoneAndId.fromSlashEncoded(node.getId()));\n+      return input.get().getNodeMetadata();\n+   }\n+\n+   /**\n+    * Allocates a FloatingIP for a given Node\n+    *\n+    * @param floatingIpApi FloatingIPApi to create or query for a valid FloatingIP\n+    * @param poolNames optional set of pool names from which we will attempt to allocate an IP from. Most cases this is null\n+    * @param nodeID optional id of the Node we are trying to allocate a FloatingIP for. Used here only for logging purposes\n+    * @return Optional<FloatingIP>\n+    */\n+   private Optional<FloatingIP> allocateFloatingIPForNode(FloatingIPApi floatingIpApi, Optional<Set<String>> poolNames, String nodeID) {\n \n       FloatingIP ip = null;\n+\n+      // 1.) Attempt to allocate from optionally passed poolNames\n+      if (poolNames.isPresent()) {\n+         for (String poolName : poolNames.get()) {\n+            try {\n+               logger.debug(\">> allocating floating IP from pool %s for node(%s)\", poolName, nodeID);\n+               ip = floatingIpApi.allocateFromPool(poolName);\n+               if (ip != null)\n+                  return Optional.of(ip);\n+            } catch (InsufficientResourcesException ire){\n+               logger.trace(\"<< [%s] failed to allocate floating IP from pool %s for node(%s)\", ire.getMessage(), poolName, nodeID);\n+            }\n+         }\n+      }\n+\n+      // 2.) Attempt to allocate, if necessary, via 'create()' call\n       try {\n-         logger.debug(\">> allocating or reassigning floating ip for node(%s)\", node.getId());\n+         logger.debug(\">> creating floating IP for node(%s)\", nodeID);\n          ip = floatingIpApi.create();\n-      } catch (InsufficientResourcesException e) {\n-         logger.trace(\"<< [%s] allocating a new floating ip for node(%s)\", e.getMessage(), node.getId());\n-         logger.trace(\">> searching for existing, unassigned floating ip for node(%s)\", node.getId());\n-         ArrayList<FloatingIP> unassignedIps = Lists.newArrayList(Iterables.filter(floatingIpApi.list(),\n-                  new Predicate<FloatingIP>() {\n-\n-                     @Override\n-                     public boolean apply(FloatingIP arg0) {\n-                        return arg0.getFixedIp() == null;\n-                     }\n-\n-                  }));\n-         // try to prevent multiple parallel launches from choosing the same ip.\n-         Collections.shuffle(unassignedIps);\n-         ip = Iterables.getLast(unassignedIps);\n+         if (ip != null)\n+            return Optional.of(ip);\n+      } catch (InsufficientResourcesException ire) {\n+         logger.trace(\"<< [%s] failed to create floating IP for node(%s)\", ire.getMessage(), nodeID);\n       }\n-      logger.debug(\">> adding floatingIp(%s) to node(%s)\", ip.getIp(), node.getId());\n \n-      floatingIpApi.addToServer(ip.getIp(), node.getProviderId());\n-      input.set(NodeMetadataBuilder.fromNodeMetadata(node).publicAddresses(ImmutableSet.of(ip.getIp())).build());\n-      floatingIpCache.invalidate(ZoneAndId.fromSlashEncoded(node.getId()));\n-      return input;\n+      // 3.) If no IP was found make final attempt by searching through list of available IP's\n+      logger.trace(\">> searching for existing, unassigned floating IP for node(%s)\", nodeID);\n+      List<FloatingIP> unassignedIps = Lists.newArrayList(Iterables.filter(floatingIpApi.list(),\n+            new Predicate<FloatingIP>() {\n+\n+               @Override\n+               public boolean apply(FloatingIP arg0) {\n+                  return arg0.getFixedIp() == null;\n+               }\n+\n+      }));\n+      // try to prevent multiple parallel launches from choosing the same ip.\n+      Collections.shuffle(unassignedIps);\n+      ip = Iterables.getLast(unassignedIps);\n+      return Optional.fromNullable(ip);\n    }\n \n    @Override",
                "raw_url": "https://github.com/apache/jclouds/raw/3659a5f583d38a925476287d47b34b4afa7bdb43/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/functions/AllocateAndAddFloatingIpToNode.java",
                "sha": "347510c62c889494589784c36cc1796488d33fe6",
                "status": "modified"
            },
            {
                "additions": 54,
                "blob_url": "https://github.com/apache/jclouds/blob/3659a5f583d38a925476287d47b34b4afa7bdb43/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/options/NodeAndNovaTemplateOptions.java",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/options/NodeAndNovaTemplateOptions.java?ref=3659a5f583d38a925476287d47b34b4afa7bdb43",
                "deletions": 0,
                "filename": "apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/options/NodeAndNovaTemplateOptions.java",
                "patch": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jclouds.openstack.nova.v2_0.compute.options;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.jclouds.compute.domain.NodeMetadata;\n+\n+import com.google.common.util.concurrent.Atomics;\n+\n+/**\n+ * Simple data-structure for holding a NodeMetadata object along with a\n+ * corresponding NovaTemplateOptions object.\n+ */\n+public class NodeAndNovaTemplateOptions {\n+\n+   private final AtomicReference<NodeMetadata> nodeMetadata;\n+   private final AtomicReference<NovaTemplateOptions> novaTemplateOptions;\n+\n+   protected NodeAndNovaTemplateOptions(AtomicReference<NodeMetadata> nodeMetadata, AtomicReference<NovaTemplateOptions> novaTemplateOptions) {\n+      this.nodeMetadata = nodeMetadata;\n+      this.novaTemplateOptions = novaTemplateOptions;\n+   }\n+\n+   public AtomicReference<NodeMetadata> getNodeMetadata() {\n+      return nodeMetadata;\n+   }\n+\n+   public AtomicReference<NovaTemplateOptions> getNovaTemplateOptions() {\n+      return novaTemplateOptions;\n+   }\n+\n+   public static NodeAndNovaTemplateOptions newReference(AtomicReference<NodeMetadata> node, AtomicReference<NovaTemplateOptions> options) {\n+      return new NodeAndNovaTemplateOptions(node, options);\n+   }\n+\n+   public static AtomicReference<NodeAndNovaTemplateOptions> newAtomicReference(AtomicReference<NodeMetadata> node, AtomicReference<NovaTemplateOptions> options) {\n+      return Atomics.newReference(NodeAndNovaTemplateOptions.newReference(node, options));\n+   }\n+}",
                "raw_url": "https://github.com/apache/jclouds/raw/3659a5f583d38a925476287d47b34b4afa7bdb43/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/options/NodeAndNovaTemplateOptions.java",
                "sha": "b971cfc616f9a4e6db8a1b382f7396ce8985f415",
                "status": "added"
            },
            {
                "additions": 53,
                "blob_url": "https://github.com/apache/jclouds/blob/3659a5f583d38a925476287d47b34b4afa7bdb43/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/options/NovaTemplateOptions.java",
                "changes": 55,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/options/NovaTemplateOptions.java?ref=3659a5f583d38a925476287d47b34b4afa7bdb43",
                "deletions": 2,
                "filename": "apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/options/NovaTemplateOptions.java",
                "patch": "@@ -63,6 +63,8 @@ public void copyTo(TemplateOptions to) {\n       if (to instanceof NovaTemplateOptions) {\n          NovaTemplateOptions eTo = NovaTemplateOptions.class.cast(to);\n          eTo.autoAssignFloatingIp(shouldAutoAssignFloatingIp());\n+         if (getFloatingIpPoolNames().isPresent())\n+            eTo.floatingIpPoolNames(getFloatingIpPoolNames().get());\n          if (getSecurityGroupNames().isPresent())\n             eTo.securityGroupNames(getSecurityGroupNames().get());\n          eTo.generateKeyPair(shouldGenerateKeyPair());\n@@ -80,6 +82,7 @@ public void copyTo(TemplateOptions to) {\n    }\n \n    protected boolean autoAssignFloatingIp = false;\n+   protected Optional<Set<String>> floatingIpPoolNames = Optional.absent();\n    protected Optional<Set<String>> securityGroupNames = Optional.absent();\n    protected boolean generateKeyPair = false;\n    protected String keyPairName;\n@@ -96,6 +99,7 @@ public boolean equals(Object o) {\n          return false;\n       NovaTemplateOptions that = NovaTemplateOptions.class.cast(o);\n       return super.equals(that) && equal(this.autoAssignFloatingIp, that.autoAssignFloatingIp)\n+            && equal(this.floatingIpPoolNames, that.floatingIpPoolNames)\n             && equal(this.securityGroupNames, that.securityGroupNames)\n             && equal(this.generateKeyPair, that.generateKeyPair)\n             && equal(this.keyPairName, that.keyPairName)\n@@ -107,14 +111,16 @@ public boolean equals(Object o) {\n \n    @Override\n    public int hashCode() {\n-      return Objects.hashCode(super.hashCode(), autoAssignFloatingIp, securityGroupNames, generateKeyPair, keyPairName, userData, diskConfig, configDrive, novaNetworks);\n+      return Objects.hashCode(super.hashCode(), autoAssignFloatingIp, floatingIpPoolNames, securityGroupNames, generateKeyPair, keyPairName, userData, diskConfig, configDrive, novaNetworks);\n    }\n \n    @Override\n    public ToStringHelper string() {\n       ToStringHelper toString = super.string();\n       if (!autoAssignFloatingIp)\n          toString.add(\"autoAssignFloatingIp\", autoAssignFloatingIp);\n+      if (floatingIpPoolNames.isPresent())\n+         toString.add(\"floatingIpPoolNames\", floatingIpPoolNames.get());\n       if (securityGroupNames.isPresent())\n          toString.add(\"securityGroupNames\", securityGroupNames.get());\n       if (generateKeyPair)\n@@ -130,13 +136,30 @@ public ToStringHelper string() {\n    public static final NovaTemplateOptions NONE = new NovaTemplateOptions();\n \n    /**\n-    * @see #shouldAutoAssignFloatingIp()\n+    * @see #getFloatingIpPoolNames()\n     */\n    public NovaTemplateOptions autoAssignFloatingIp(boolean enable) {\n       this.autoAssignFloatingIp = enable;\n       return this;\n    }\n \n+   /**\n+    * @see #getFloatingIpPoolNames()\n+    */\n+   public NovaTemplateOptions floatingIpPoolNames(String... floatingIpPoolNames) {\n+      return floatingIpPoolNames(ImmutableSet.copyOf(checkNotNull(floatingIpPoolNames, \"floatingIpPoolNames\")));\n+   }\n+\n+   /**\n+    * @see #getFloatingIpPoolNames()\n+    */\n+   public NovaTemplateOptions floatingIpPoolNames(Iterable<String> floatingIpPoolNames) {\n+      for (String groupName : checkNotNull(floatingIpPoolNames, \"floatingIpPoolNames\"))\n+        checkNotNull(emptyToNull(groupName), \"all floating-ip-pool-names must be non-empty\");\n+      this.floatingIpPoolNames = Optional.<Set<String>> of(ImmutableSet.copyOf(floatingIpPoolNames));\n+      return this;\n+   }\n+\n    /**\n     * @see #shouldGenerateKeyPair()\n     */\n@@ -183,6 +206,18 @@ public boolean shouldAutoAssignFloatingIp() {\n       return autoAssignFloatingIp;\n    }\n \n+   /**\n+    * The floating IP pool name(s) to use when allocating a FloatingIP. Applicable\n+    * only if #shouldAutoAssignFloatingIp() returns true. If not set will attempt to\n+    * use whatever FloatingIP(s) can be found regardless of which pool they originated\n+    * from\n+    *\n+    * @return floating-ip-pool names to use\n+    */\n+   public Optional<Set<String>> getFloatingIpPoolNames() {\n+      return floatingIpPoolNames;\n+   }\n+\n    /**\n     * Specifies the keypair used to run instances with\n     * @return the keypair to be used\n@@ -247,6 +282,22 @@ public static NovaTemplateOptions autoAssignFloatingIp(boolean enable) {\n          return new NovaTemplateOptions().autoAssignFloatingIp(enable);\n       }\n \n+      /**\n+       * @see #getFloatingIpPoolNames()\n+       */\n+      public NovaTemplateOptions floatingIpPoolNames(String... floatingIpPoolNames) {\n+         NovaTemplateOptions options = new NovaTemplateOptions();\n+         return NovaTemplateOptions.class.cast(options.floatingIpPoolNames(floatingIpPoolNames));\n+      }\n+\n+      /**\n+       * @see #getFloatingIpPoolNames()\n+       */\n+      public NovaTemplateOptions floatingIpPoolNames(Iterable<String> floatingIpPoolNames) {\n+         NovaTemplateOptions options = new NovaTemplateOptions();\n+         return NovaTemplateOptions.class.cast(options.floatingIpPoolNames(floatingIpPoolNames));\n+      }\n+\n       /**\n        * @see NovaTemplateOptions#shouldGenerateKeyPair() \n        */",
                "raw_url": "https://github.com/apache/jclouds/raw/3659a5f583d38a925476287d47b34b4afa7bdb43/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/options/NovaTemplateOptions.java",
                "sha": "750b7c0a1a0e1437f182b94d416c2679d3dd98f8",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/jclouds/blob/3659a5f583d38a925476287d47b34b4afa7bdb43/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/strategy/ApplyNovaTemplateOptionsCreateNodesWithGroupEncodedIntoNameThenAddToSet.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/strategy/ApplyNovaTemplateOptionsCreateNodesWithGroupEncodedIntoNameThenAddToSet.java?ref=3659a5f583d38a925476287d47b34b4afa7bdb43",
                "deletions": 4,
                "filename": "apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/strategy/ApplyNovaTemplateOptionsCreateNodesWithGroupEncodedIntoNameThenAddToSet.java",
                "patch": "@@ -42,16 +42,19 @@\n import org.jclouds.compute.strategy.impl.CreateNodesWithGroupEncodedIntoNameThenAddToSet;\n import org.jclouds.openstack.nova.v2_0.NovaApi;\n import org.jclouds.openstack.nova.v2_0.compute.functions.AllocateAndAddFloatingIpToNode;\n+import org.jclouds.openstack.nova.v2_0.compute.options.NodeAndNovaTemplateOptions;\n import org.jclouds.openstack.nova.v2_0.compute.options.NovaTemplateOptions;\n import org.jclouds.openstack.nova.v2_0.domain.KeyPair;\n import org.jclouds.openstack.nova.v2_0.domain.zonescoped.SecurityGroupInZone;\n import org.jclouds.openstack.nova.v2_0.domain.zonescoped.ZoneAndName;\n import org.jclouds.openstack.nova.v2_0.domain.zonescoped.ZoneSecurityGroupNameAndPorts;\n \n+import com.google.common.base.Function;\n import com.google.common.base.Throwables;\n import com.google.common.cache.LoadingCache;\n import com.google.common.collect.Multimap;\n import com.google.common.primitives.Ints;\n+import com.google.common.util.concurrent.Atomics;\n import com.google.common.util.concurrent.Futures;\n import com.google.common.util.concurrent.ListenableFuture;\n import com.google.common.util.concurrent.ListeningExecutorService;\n@@ -149,13 +152,21 @@ protected ApplyNovaTemplateOptionsCreateNodesWithGroupEncodedIntoNameThenAddToSe\n             final String name, Template template) {\n \n       ListenableFuture<AtomicReference<NodeMetadata>> future = super.createNodeInGroupWithNameAndTemplate(group, name, template);\n-      NovaTemplateOptions templateOptions = NovaTemplateOptions.class.cast(template.getOptions());\n-\n+      final NovaTemplateOptions templateOptions = NovaTemplateOptions.class.cast(template.getOptions());\n       if (templateOptions.shouldAutoAssignFloatingIp()) {\n-         return Futures.transform(future, createAndAddFloatingIpToNode, userExecutor);\n+\n+         ListenableFuture<AtomicReference<NodeAndNovaTemplateOptions>> nodeAndNovaTemplateOptions = Futures.transform(future,\n+               new Function<AtomicReference<NodeMetadata>, AtomicReference<NodeAndNovaTemplateOptions>>() {\n+\n+                  @Override\n+                  public AtomicReference<NodeAndNovaTemplateOptions> apply(AtomicReference<NodeMetadata> input) {\n+                     return NodeAndNovaTemplateOptions.newAtomicReference(input, Atomics.newReference(templateOptions));\n+                  }\n+               }\n+         );\n+         return Futures.transform(nodeAndNovaTemplateOptions, createAndAddFloatingIpToNode, userExecutor);\n       } else {\n          return future;\n       }\n    }\n-\n }",
                "raw_url": "https://github.com/apache/jclouds/raw/3659a5f583d38a925476287d47b34b4afa7bdb43/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/strategy/ApplyNovaTemplateOptionsCreateNodesWithGroupEncodedIntoNameThenAddToSet.java",
                "sha": "58f7af55b3bf9c99e51560adebe6dccb193274ca",
                "status": "modified"
            },
            {
                "additions": 51,
                "blob_url": "https://github.com/apache/jclouds/blob/3659a5f583d38a925476287d47b34b4afa7bdb43/apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/functions/AllocateAndAddFloatingIpToNodeExpectTest.java",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/functions/AllocateAndAddFloatingIpToNodeExpectTest.java?ref=3659a5f583d38a925476287d47b34b4afa7bdb43",
                "deletions": 3,
                "filename": "apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/functions/AllocateAndAddFloatingIpToNodeExpectTest.java",
                "patch": "@@ -31,6 +31,8 @@\n import org.jclouds.domain.LoginCredentials;\n import org.jclouds.http.HttpRequest;\n import org.jclouds.http.HttpResponse;\n+import org.jclouds.openstack.nova.v2_0.compute.options.NodeAndNovaTemplateOptions;\n+import org.jclouds.openstack.nova.v2_0.compute.options.NovaTemplateOptions;\n import org.jclouds.openstack.nova.v2_0.internal.BaseNovaComputeServiceExpectTest;\n import org.testng.annotations.Test;\n \n@@ -53,6 +55,7 @@\n    final NodeMetadata node = new NodeMetadataBuilder().id(\"az-1.region-a.geo-1/71592\").providerId(\"71592\").location(\n             host).name(\"Server 71592\").status(Status.RUNNING).privateAddresses(ImmutableSet.of(\"10.4.27.237\"))\n             .credentials(LoginCredentials.builder().password(\"foo\").build()).build();\n+   final NovaTemplateOptions options = NovaTemplateOptions.Builder.autoAssignFloatingIp(false);\n \n    HttpRequest createFloatingIP = HttpRequest.builder().method(\"POST\").endpoint(\n             URI.create(\"https://az-1.region-a.geo-1.compute.hpcloudsvc.com/v1.1/3456/os-floating-ips\")).headers(\n@@ -75,9 +78,13 @@ public void testAllocateWhenAllocationReturnsIpIsAddedToServerAndUpdatesNodeMeta\n                .getInstance(AllocateAndAddFloatingIpToNode.class);\n \n       AtomicReference<NodeMetadata> nodeRef = Atomics.newReference(node);\n-      fn.apply(nodeRef);\n+      AtomicReference<NovaTemplateOptions> optionsRef = Atomics.newReference(options);\n+      AtomicReference<NodeAndNovaTemplateOptions> nodeNovaRef = NodeAndNovaTemplateOptions.newAtomicReference(nodeRef, optionsRef);\n+\n+      fn.apply(nodeNovaRef);\n       NodeMetadata node1 = nodeRef.get();\n       assertNotNull(node1);\n+      assertNotNull(optionsRef.get());\n       assertEquals(node1.getPublicAddresses(), ImmutableSet.of(\"10.0.0.3\"));\n       assertEquals(node1.getCredentials(), node.getCredentials());\n \n@@ -94,7 +101,7 @@ private HttpRequest addFloatingIPForAddress(String address) {\n       return addFloatingIPRequest;\n    }\n \n-   public void testAllocateWhenAllocationFailsLookupUnusedIpAddToServerAndUpdatesNodeMetadata() throws Exception {\n+   public void testAllocateWhenAllocationFailsOn400LookupUnusedIpAddToServerAndUpdatesNodeMetadata() throws Exception {\n       HttpResponse createFloatingIPResponse = HttpResponse\n                .builder()\n                .statusCode(400)\n@@ -122,10 +129,51 @@ public void testAllocateWhenAllocationFailsLookupUnusedIpAddToServerAndUpdatesNo\n                .getInstance(AllocateAndAddFloatingIpToNode.class);\n \n       AtomicReference<NodeMetadata> nodeRef = Atomics.newReference(node);\n-      fn.apply(nodeRef);\n+      AtomicReference<NovaTemplateOptions> optionsRef = Atomics.newReference(options);\n+      AtomicReference<NodeAndNovaTemplateOptions> nodeNovaRef = NodeAndNovaTemplateOptions.newAtomicReference(nodeRef, optionsRef);\n+\n+      fn.apply(nodeNovaRef);\n       NodeMetadata node1 = nodeRef.get();\n       assertNotNull(node1);\n+      assertNotNull(optionsRef.get());\n       assertEquals(node1.getPublicAddresses(), ImmutableSet.of(\"10.0.0.5\"));\n+   }\n+\n+   public void testAllocateWhenAllocationFailsOn404LookupUnusedIpAddToServerAndUpdatesNodeMetadata() throws Exception {\n+      HttpResponse createFloatingIPResponse = HttpResponse\n+               .builder()\n+               .statusCode(404)\n+               .payload(\n+                        payloadFromStringWithContentType(\n+                                 \"{\\\"badRequest\\\": {\\\"message\\\": \\\"AddressLimitExceeded: Address quota exceeded. You cannot create any more addresses\\\", \\\"code\\\": 404}}\",\n+                                 \"application/json\")).build();\n+\n+      HttpRequest list = HttpRequest.builder().method(\"GET\").endpoint(\n+               URI.create(\"https://az-1.region-a.geo-1.compute.hpcloudsvc.com/v1.1/3456/os-floating-ips\")).headers(\n+               ImmutableMultimap.<String, String> builder().put(\"Accept\", \"application/json\").put(\"X-Auth-Token\",\n+                        authToken).build()).build();\n+\n+      HttpResponse listResponseForUnassigned = HttpResponse.builder().statusCode(200).payload(\n+               payloadFromResource(\"/floatingip_list.json\")).build();\n+\n+      HttpRequest addFloatingIPRequest = addFloatingIPForAddress(\"10.0.0.5\");\n+\n+      AllocateAndAddFloatingIpToNode fn = requestsSendResponses(\n+               ImmutableMap.<HttpRequest, HttpResponse> builder().put(keystoneAuthWithUsernameAndPasswordAndTenantName,\n+                        responseWithKeystoneAccess).put(extensionsOfNovaRequest, extensionsOfNovaResponse).put(\n+                        createFloatingIP, createFloatingIPResponse)\n+                        .put(addFloatingIPRequest, addFloatingIPResponse).put(list,\n+                                 listResponseForUnassigned).build()).getContext().utils().injector()\n+               .getInstance(AllocateAndAddFloatingIpToNode.class);\n+\n+      AtomicReference<NodeMetadata> nodeRef = Atomics.newReference(node);\n+      AtomicReference<NovaTemplateOptions> optionsRef = Atomics.newReference(options);\n+      AtomicReference<NodeAndNovaTemplateOptions> nodeNovaRef = NodeAndNovaTemplateOptions.newAtomicReference(nodeRef, optionsRef);\n \n+      fn.apply(nodeNovaRef);\n+      NodeMetadata node1 = nodeRef.get();\n+      assertNotNull(node1);\n+      assertNotNull(optionsRef.get());\n+      assertEquals(node1.getPublicAddresses(), ImmutableSet.of(\"10.0.0.5\"));\n    }\n }",
                "raw_url": "https://github.com/apache/jclouds/raw/3659a5f583d38a925476287d47b34b4afa7bdb43/apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/functions/AllocateAndAddFloatingIpToNodeExpectTest.java",
                "sha": "c8fa869bb688d2593013284a7be738d8372247ae",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jclouds/blob/3659a5f583d38a925476287d47b34b4afa7bdb43/core/src/main/java/org/jclouds/rest/InsufficientResourcesException.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/rest/InsufficientResourcesException.java?ref=3659a5f583d38a925476287d47b34b4afa7bdb43",
                "deletions": 0,
                "filename": "core/src/main/java/org/jclouds/rest/InsufficientResourcesException.java",
                "patch": "@@ -27,6 +27,10 @@ public InsufficientResourcesException() {\n       super();\n    }\n \n+   public InsufficientResourcesException(String arg0) {\n+      super(arg0);\n+   }\n+\n    public InsufficientResourcesException(String arg0, Throwable arg1) {\n       super(arg0, arg1);\n    }",
                "raw_url": "https://github.com/apache/jclouds/raw/3659a5f583d38a925476287d47b34b4afa7bdb43/core/src/main/java/org/jclouds/rest/InsufficientResourcesException.java",
                "sha": "935adbe828cd613c892aaa28fad6bf1b45f25f98",
                "status": "modified"
            }
        ],
        "message": "JCLOUDS-607: ComputeService.createNodesInGroup throws NPE on FloatingIPApi.create()",
        "parent": "https://github.com/apache/jclouds/commit/4cf6efe39a4c36d01207a191df2f8618442b8178",
        "repo": "jclouds",
        "unit_tests": [
            "NovaTemplateOptionsTest.java"
        ]
    },
    "jclouds_39bf8f9": {
        "bug_id": "jclouds_39bf8f9",
        "commit": "https://github.com/apache/jclouds/commit/39bf8f98971d2b28c04b022a9b75eae51d4bfbab",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jclouds/blob/39bf8f98971d2b28c04b022a9b75eae51d4bfbab/apis/cloudstack/src/main/java/org/jclouds/cloudstack/compute/strategy/CloudStackComputeServiceAdapter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/main/java/org/jclouds/cloudstack/compute/strategy/CloudStackComputeServiceAdapter.java?ref=39bf8f98971d2b28c04b022a9b75eae51d4bfbab",
                "deletions": 1,
                "filename": "apis/cloudstack/src/main/java/org/jclouds/cloudstack/compute/strategy/CloudStackComputeServiceAdapter.java",
                "patch": "@@ -175,7 +175,7 @@ public CloudStackComputeServiceAdapter(CloudStackClient client, Predicate<String\n       String templateId = template.getImage().getId();\n       String serviceOfferingId = template.getHardware().getId();\n \n-      logger.info(\"serviceOfferingId %s, templateId %s, zoneId %s, options %s%n\", serviceOfferingId, templateId,\n+      logger.debug(\"serviceOfferingId %s, templateId %s, zoneId %s, options %s%n\", serviceOfferingId, templateId,\n          zoneId, options);\n       AsyncCreateResponse job = client.getVirtualMachineClient().deployVirtualMachineInZone(zoneId, serviceOfferingId,\n          templateId, options);",
                "raw_url": "https://github.com/apache/jclouds/raw/39bf8f98971d2b28c04b022a9b75eae51d4bfbab/apis/cloudstack/src/main/java/org/jclouds/cloudstack/compute/strategy/CloudStackComputeServiceAdapter.java",
                "sha": "0dab654e2cb119b6ee9dea9145c7a59a3ee387b7",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jclouds/blob/39bf8f98971d2b28c04b022a9b75eae51d4bfbab/apis/cloudstack/src/main/java/org/jclouds/cloudstack/predicates/PublicIPAddressPredicates.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/main/java/org/jclouds/cloudstack/predicates/PublicIPAddressPredicates.java?ref=39bf8f98971d2b28c04b022a9b75eae51d4bfbab",
                "deletions": 2,
                "filename": "apis/cloudstack/src/main/java/org/jclouds/cloudstack/predicates/PublicIPAddressPredicates.java",
                "patch": "@@ -35,12 +35,12 @@\n       private final String networkId;\n \n       public AssociatedWithNetwork(String networkId) {\n-         this.networkId = networkId;\n+         this.networkId = checkNotNull(networkId, \"networkId\");\n       }\n \n       @Override\n       public boolean apply(PublicIPAddress input) {\n-         return checkNotNull(input, \"ipaddress\").getAssociatedNetworkId().equals(networkId);\n+         return networkId.equals(checkNotNull(input, \"ipaddress\").getAssociatedNetworkId());\n       }\n \n       @Override",
                "raw_url": "https://github.com/apache/jclouds/raw/39bf8f98971d2b28c04b022a9b75eae51d4bfbab/apis/cloudstack/src/main/java/org/jclouds/cloudstack/predicates/PublicIPAddressPredicates.java",
                "sha": "462061811cd0500194e88a7f47d749a01e3803a1",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/jclouds/blob/39bf8f98971d2b28c04b022a9b75eae51d4bfbab/apis/cloudstack/src/main/java/org/jclouds/cloudstack/suppliers/GetCurrentUser.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/main/java/org/jclouds/cloudstack/suppliers/GetCurrentUser.java?ref=39bf8f98971d2b28c04b022a9b75eae51d4bfbab",
                "deletions": 4,
                "filename": "apis/cloudstack/src/main/java/org/jclouds/cloudstack/suppliers/GetCurrentUser.java",
                "patch": "@@ -26,7 +26,6 @@\n import javax.inject.Inject;\n \n import org.jclouds.cloudstack.CloudStackClient;\n-import org.jclouds.cloudstack.domain.Account;\n import org.jclouds.cloudstack.domain.User;\n import org.jclouds.cloudstack.predicates.UserPredicates;\n import org.jclouds.logging.Logger;\n@@ -66,9 +65,6 @@ public User get() {\n                users));\n       }\n \n-      if (currentUser.getAccountType() != Account.Type.USER) {\n-         logger.warn(\"Expecting an user account: %s\", currentUser);\n-      }\n       return currentUser;\n    }\n }",
                "raw_url": "https://github.com/apache/jclouds/raw/39bf8f98971d2b28c04b022a9b75eae51d4bfbab/apis/cloudstack/src/main/java/org/jclouds/cloudstack/suppliers/GetCurrentUser.java",
                "sha": "7c0ef86c229071cd3fd316331f1f87c7bf62ee9e",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #1014 from ahgittin/fix/cloudstack-niggles\n\nfix cloudstack network NPE, and 2 logging cleanups",
        "parent": "https://github.com/apache/jclouds/commit/74c77cacc60600596a67a45a5edea8fe5cc00852",
        "repo": "jclouds",
        "unit_tests": [
            "PublicIPAddressPredicatesTest.java"
        ]
    },
    "jclouds_43f12fa": {
        "bug_id": "jclouds_43f12fa",
        "commit": "https://github.com/apache/jclouds/commit/43f12fa6277db8c18fee65b70289ec63bef6ce62",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jclouds/blob/43f12fa6277db8c18fee65b70289ec63bef6ce62/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java?ref=43f12fa6277db8c18fee65b70289ec63bef6ce62",
                "deletions": 3,
                "filename": "core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "patch": "@@ -1294,14 +1294,16 @@ else if (args[i] instanceof PayloadEnclosing)\n          for (Annotation key : entry.getValue()) {\n             Set<Annotation> extractors = indexToParamExtractor.get(entry.getKey());\n             String paramKey = ((QueryParam) key).value();\n-            String paramValue;\n+            Object paramValue;\n             if (extractors != null && extractors.size() > 0) {\n                ParamParser extractor = (ParamParser) extractors.iterator().next();\n                paramValue = injector.getInstance(extractor.value()).apply(args[entry.getKey()]);\n             } else {\n-               paramValue = args[entry.getKey()].toString();\n+               paramValue = args[entry.getKey()];\n+            }\n+            if (paramValue != null) {\n+                queryParamValues.put(paramKey, paramValue.toString());\n             }\n-            queryParamValues.put(paramKey, paramValue);\n          }\n       }\n ",
                "raw_url": "https://github.com/apache/jclouds/raw/43f12fa6277db8c18fee65b70289ec63bef6ce62/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "sha": "e29dede0ebb0f0ee12a6194a26a040a67cf2e0ea",
                "status": "modified"
            }
        ],
        "message": "prevent NPE when null is passed to @QueryParam annotated argument",
        "parent": "https://github.com/apache/jclouds/commit/90df3a1e51c0e4b40740c8dc4f94ef5491644932",
        "repo": "jclouds",
        "unit_tests": [
            "RestAnnotationProcessorTest.java"
        ]
    },
    "jclouds_6bd8f15": {
        "bug_id": "jclouds_6bd8f15",
        "commit": "https://github.com/apache/jclouds/commit/6bd8f154fc2ffed7cb73de93666a21e6362347d5",
        "file": [
            {
                "additions": 102,
                "blob_url": "https://github.com/apache/jclouds/blob/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/ComputePoolReference.java",
                "changes": 102,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/ComputePoolReference.java?ref=6bd8f154fc2ffed7cb73de93666a21e6362347d5",
                "deletions": 0,
                "filename": "common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/ComputePoolReference.java",
                "patch": "@@ -0,0 +1,102 @@\n+/**\n+ * Licensed to jclouds, Inc. (jclouds) under one or more\n+ * contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  jclouds licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.jclouds.trmk.vcloud_0_8.domain;\n+\n+import static com.google.common.base.Objects.equal;\n+\n+import java.net.URI;\n+\n+import com.google.common.base.Objects;\n+\n+/**\n+ * @author Adrian Cole\n+ */\n+public class ComputePoolReference implements Comparable<ComputePoolReference> {\n+   public static Builder builder() {\n+      return new Builder();\n+   }\n+\n+   public Builder toBuilder() {\n+      return builder().fromComputePoolReference(this);\n+   }\n+\n+   public static class Builder {\n+      private URI href;\n+      private String name;\n+\n+      public Builder href(URI href) {\n+         this.href = href;\n+         return this;\n+      }\n+\n+      public Builder name(String name) {\n+         this.name = name;\n+         return this;\n+      }\n+\n+      public ComputePoolReference build() {\n+         return new ComputePoolReference(href, name);\n+      }\n+\n+      public Builder fromComputePoolReference(ComputePoolReference in) {\n+         return href(in.getHref()).name(in.getName());\n+      }\n+\n+   }\n+\n+   private final URI href;\n+   private final String name;\n+\n+   public ComputePoolReference(URI href, String name) {\n+      this.href = href;\n+      this.name = name;\n+   }\n+\n+   public int compareTo(ComputePoolReference that) {\n+      return (this == that) ? 0 : getHref().compareTo(that.getHref());\n+   }\n+\n+   public URI getHref() {\n+      return href;\n+   }\n+\n+   public String getName() {\n+      return name;\n+   }\n+\n+   @Override\n+   public boolean equals(Object o) {\n+      if (this == o)\n+         return true;\n+      if (o == null || getClass() != o.getClass())\n+         return false;\n+      ComputePoolReference that = ComputePoolReference.class.cast(o);\n+      return equal(this.href, that.href) && equal(this.name, that.name);\n+   }\n+\n+   @Override\n+   public int hashCode() {\n+      return Objects.hashCode(href, name);\n+   }\n+\n+   @Override\n+   public String toString() {\n+      return Objects.toStringHelper(\"\").add(\"href\", href).add(\"name\", name).toString();\n+   }\n+}",
                "raw_url": "https://github.com/apache/jclouds/raw/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/ComputePoolReference.java",
                "sha": "72211f62fa6af9bb4c47488f66ab1ef908afb292",
                "status": "added"
            },
            {
                "additions": 53,
                "blob_url": "https://github.com/apache/jclouds/blob/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/NetworkAdapter.java",
                "changes": 85,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/NetworkAdapter.java?ref=6bd8f154fc2ffed7cb73de93666a21e6362347d5",
                "deletions": 32,
                "filename": "common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/NetworkAdapter.java",
                "patch": "@@ -18,10 +18,52 @@\n  */\n package org.jclouds.trmk.vcloud_0_8.domain;\n \n+import static com.google.common.base.Objects.equal;\n+\n+import com.google.common.base.Objects;\n+\n /**\n  * @author Seshu Pasam\n  */\n public class NetworkAdapter implements Comparable<NetworkAdapter> {\n+   public static Builder builder() {\n+      return new Builder();\n+   }\n+\n+   public Builder toBuilder() {\n+      return builder().fromNetworkAdapter(this);\n+   }\n+\n+   public static class Builder {\n+      private String macAddress;\n+      private String name;\n+      private Subnet subnet;\n+\n+      public Builder macAddress(String macAddress) {\n+         this.macAddress = macAddress;\n+         return this;\n+      }\n+\n+      public Builder name(String name) {\n+         this.name = name;\n+         return this;\n+      }\n+\n+      public Builder subnet(Subnet subnet) {\n+         this.subnet = subnet;\n+         return this;\n+      }\n+\n+      public NetworkAdapter build() {\n+         return new NetworkAdapter(macAddress, name, subnet);\n+      }\n+\n+      public Builder fromNetworkAdapter(NetworkAdapter in) {\n+         return macAddress(in.getMacAddress()).name(in.getName()).subnet(in.getSubnet());\n+      }\n+\n+   }\n+\n    private final String macAddress;\n    private final String name;\n    private final Subnet subnet;\n@@ -49,44 +91,23 @@ public Subnet getSubnet() {\n    }\n \n    @Override\n-   public int hashCode() {\n-      final int prime = 31;\n-      int result = 1;\n-      result = prime * result + ((macAddress== null) ? 0 : macAddress.hashCode());\n-      result = prime * result + ((name == null) ? 0 : name.hashCode());\n-      result = prime * result + ((subnet == null) ? 0 : subnet.hashCode());\n-      return result;\n+   public boolean equals(Object o) {\n+      if (this == o)\n+         return true;\n+      if (o == null || getClass() != o.getClass())\n+         return false;\n+      NetworkAdapter that = NetworkAdapter.class.cast(o);\n+      return equal(this.macAddress, that.macAddress) && equal(this.name, that.name) && equal(this.subnet, that.subnet);\n    }\n \n    @Override\n-   public boolean equals(Object obj) {\n-      if (this == obj)\n-         return true;\n-      if (obj == null)\n-         return false;\n-      if (getClass() != obj.getClass())\n-         return false;\n-      NetworkAdapter other = (NetworkAdapter) obj;\n-      if (macAddress == null) {\n-         if (other.macAddress != null)\n-            return false;\n-      } else if (!macAddress.equals(other.macAddress))\n-         return false;\n-      if (name == null) {\n-         if (other.name != null)\n-            return false;\n-      } else if (!name.equals(other.name))\n-         return false;\n-      if (subnet == null) {\n-         if (other.subnet != null)\n-            return false;\n-      } else if (!subnet.equals(other.subnet))\n-         return false;\n-      return true;\n+   public int hashCode() {\n+      return Objects.hashCode(macAddress, name, subnet);\n    }\n \n    @Override\n    public String toString() {\n-      return \"[MAC address=\" + macAddress + \", name=\" + name + \", subnet=\" + subnet + \"]\";\n+      return Objects.toStringHelper(\"\").add(\"macAddress\", macAddress).add(\"name\", name).add(\"subnet\", subnet)\n+               .toString();\n    }\n }",
                "raw_url": "https://github.com/apache/jclouds/raw/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/NetworkAdapter.java",
                "sha": "1508fb9c09d96c27033735d28a2b440e55363e73",
                "status": "modified"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/jclouds/blob/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/Subnet.java",
                "changes": 72,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/Subnet.java?ref=6bd8f154fc2ffed7cb73de93666a21e6362347d5",
                "deletions": 26,
                "filename": "common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/Subnet.java",
                "patch": "@@ -18,12 +18,48 @@\n  */\n package org.jclouds.trmk.vcloud_0_8.domain;\n \n+import static com.google.common.base.Objects.equal;\n+\n import java.net.URI;\n \n+import com.google.common.base.Objects;\n+\n /**\n  * @author Seshu Pasam\n  */\n public class Subnet implements Comparable<Subnet> {\n+   public static Builder builder() {\n+      return new Builder();\n+   }\n+\n+   public Builder toBuilder() {\n+      return builder().fromSubnet(this);\n+   }\n+\n+   public static class Builder {\n+      private URI href;\n+      private String name;\n+\n+      public Builder href(URI href) {\n+         this.href = href;\n+         return this;\n+      }\n+\n+      public Builder name(String name) {\n+         this.name = name;\n+         return this;\n+      }\n+\n+      public Subnet build() {\n+         return new Subnet(href, name);\n+      }\n+\n+      public Builder fromSubnet(Subnet in) {\n+         return href(in.getHref()).name(in.getName());\n+      }\n+\n+   }\n+\n    private final URI href;\n    private final String name;\n \n@@ -45,38 +81,22 @@ public String getName() {\n    }\n \n    @Override\n-   public int hashCode() {\n-      final int prime = 31;\n-      int result = 1;\n-      result = prime * result + ((href == null) ? 0 : href.hashCode());\n-      result = prime * result + ((name == null) ? 0 : name.hashCode());\n-      return result;\n+   public boolean equals(Object o) {\n+      if (this == o)\n+         return true;\n+      if (o == null || getClass() != o.getClass())\n+         return false;\n+      Subnet that = Subnet.class.cast(o);\n+      return equal(this.href, that.href) && equal(this.name, that.name);\n    }\n \n    @Override\n-   public boolean equals(Object obj) {\n-      if (this == obj)\n-         return true;\n-      if (obj == null)\n-         return false;\n-      if (getClass() != obj.getClass())\n-         return false;\n-      Subnet other = (Subnet) obj;\n-      if (href == null) {\n-         if (other.href != null)\n-            return false;\n-      } else if (!href.equals(other.href))\n-         return false;\n-      if (name == null) {\n-         if (other.name != null)\n-            return false;\n-      } else if (!name.equals(other.name))\n-         return false;\n-      return true;\n+   public int hashCode() {\n+      return Objects.hashCode(href, name);\n    }\n \n    @Override\n    public String toString() {\n-      return \"[href=\" + href + \", name=\" + name + \"]\";\n+      return Objects.toStringHelper(\"\").add(\"href\", href).add(\"name\", name).toString();\n    }\n }",
                "raw_url": "https://github.com/apache/jclouds/raw/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/Subnet.java",
                "sha": "8bb466c26e3b147c8082967e099b32f8cc7451d9",
                "status": "modified"
            },
            {
                "additions": 101,
                "blob_url": "https://github.com/apache/jclouds/blob/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/VAppExtendedInfo.java",
                "changes": 154,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/VAppExtendedInfo.java?ref=6bd8f154fc2ffed7cb73de93666a21e6362347d5",
                "deletions": 53,
                "filename": "common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/VAppExtendedInfo.java",
                "patch": "@@ -2,7 +2,7 @@\n  * Licensed to jclouds, Inc. (jclouds) under one or more\n  * contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n- * regarding copyright ownership.  jclouds licenses this file\n+ * regarding copyright ownershhref.  jclouds licenses this file\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n@@ -18,28 +18,103 @@\n  */\n package org.jclouds.trmk.vcloud_0_8.domain;\n \n+import static com.google.common.base.Objects.equal;\n+\n import java.net.URI;\n import java.util.List;\n \n+import com.google.common.base.Objects;\n+import com.google.common.collect.Lists;\n+\n /**\n- * @author Seshu Pasam\n+ * @author Seshu Pasam, Adrian Cole\n  */\n public class VAppExtendedInfo implements Comparable<VAppExtendedInfo> {\n+   public static Builder builder() {\n+      return new Builder();\n+   }\n+\n+   public Builder toBuilder() {\n+      return builder().fromVAppExtendedInfo(this);\n+   }\n+\n+   public static class Builder {\n+      private String id;\n+      private URI href;\n+      private String name;\n+      private String longName;\n+      private List<String> tags = Lists.newArrayList();\n+      private List<NetworkAdapter> networkAdapters = Lists.newArrayList();\n+      private ComputePoolReference computePoolReference;\n+\n+      public Builder id(String id) {\n+         this.id = id;\n+         return this;\n+      }\n+\n+      public Builder href(URI href) {\n+         this.href = href;\n+         return this;\n+      }\n+\n+      public Builder name(String name) {\n+         this.name = name;\n+         return this;\n+      }\n+\n+      public Builder longName(String longName) {\n+         this.longName = longName;\n+         return this;\n+      }\n+\n+      public Builder tags(List<String> tags) {\n+         this.tags = tags;\n+         return this;\n+      }\n+\n+      public Builder networkAdapters(List<NetworkAdapter> networkAdapters) {\n+         this.networkAdapters = networkAdapters;\n+         return this;\n+      }\n+\n+      public Builder networkAdapter(NetworkAdapter networkAdapter) {\n+         this.networkAdapters.add(networkAdapter);\n+         return this;\n+      }\n+\n+      public Builder computePoolReference(ComputePoolReference computePoolReference) {\n+         this.computePoolReference = computePoolReference;\n+         return this;\n+      }\n+\n+      public VAppExtendedInfo build() {\n+         return new VAppExtendedInfo(id, href, name, tags, longName, networkAdapters, computePoolReference);\n+      }\n+\n+      public Builder fromVAppExtendedInfo(VAppExtendedInfo in) {\n+         return id(in.getId()).href(in.getHref()).name(in.getName()).longName(in.getLongName()).tags(in.getTags())\n+                  .networkAdapters(in.getNetworkAdapters()).computePoolReference(in.getComputePoolReference());\n+      }\n+\n+   }\n+\n    private final String id;\n    private final URI href;\n    private final String name;\n-   private final List<String> tags;\n    private final String longName;\n+   private final List<String> tags;\n    private final List<NetworkAdapter> networkAdapters;\n+   private final ComputePoolReference computePoolReference;\n \n    public VAppExtendedInfo(String id, URI href, String name, List<String> tags, String longName,\n-           List<NetworkAdapter> networkAdapters) {\n+            List<NetworkAdapter> networkAdapters, ComputePoolReference computePoolReference) {\n       this.id = id;\n       this.href = href;\n       this.name = name;\n       this.tags = tags;\n       this.longName = longName;\n       this.networkAdapters = networkAdapters;\n+      this.computePoolReference = computePoolReference;\n    }\n \n    public int compareTo(VAppExtendedInfo that) {\n@@ -58,71 +133,44 @@ public String getName() {\n       return name;\n    }\n \n-   public List<String> getTags() {\n-      return tags;\n-   }\n-\n    public String getLongName() {\n       return longName;\n    }\n \n+   public List<String> getTags() {\n+      return tags;\n+   }\n+\n    public List<NetworkAdapter> getNetworkAdapters() {\n       return networkAdapters;\n    }\n \n-   @Override\n-   public int hashCode() {\n-      final int prime = 31;\n-      int result = 1;\n-      result = prime * result + ((href == null) ? 0 : href.hashCode());\n-      result = prime * result + ((id == null) ? 0 : id.hashCode());\n-      result = prime * result + ((name == null) ? 0 : name.hashCode());\n-      result = prime * result + ((longName == null) ? 0 : longName.hashCode());\n-      result = prime * result + ((tags == null) ? 0 : tags.hashCode());\n-      result = prime * result + ((networkAdapters == null) ? 0 : networkAdapters.hashCode());\n-      return result;\n+   public ComputePoolReference getComputePoolReference() {\n+      return computePoolReference;\n    }\n \n    @Override\n-   public boolean equals(Object obj) {\n-      if (this == obj)\n+   public boolean equals(Object o) {\n+      if (this == o)\n          return true;\n-      if (obj == null)\n+      if (o == null || getClass() != o.getClass())\n          return false;\n-      if (getClass() != obj.getClass())\n-         return false;\n-      VAppExtendedInfo other = (VAppExtendedInfo) obj;\n-      if (href == null) {\n-         if (other.href != null)\n-            return false;\n-      } else if (!href.equals(other.href))\n-         return false;\n-      if (id == null) {\n-         if (other.id != null)\n-            return false;\n-      } else if (!id.equals(other.id))\n-         return false;\n-      if (name == null) {\n-         if (other.name != null)\n-            return false;\n-      } else if (!name.equals(other.name))\n-         return false;\n-      if (tags == null) {\n-         if (other.tags != null)\n-            return false;\n-      } else if (!tags.equals(other.tags))\n-         return false;\n-      if (networkAdapters == null) {\n-         if (other.networkAdapters != null)\n-            return false;\n-      } else if (!networkAdapters.equals(other.networkAdapters))\n-         return false;\n-      return true;\n+      VAppExtendedInfo that = VAppExtendedInfo.class.cast(o);\n+      return equal(this.id, that.id) && equal(this.href, that.href) && equal(this.name, that.name)\n+               && equal(this.longName, that.longName) && equal(this.tags, that.tags)\n+               && equal(this.networkAdapters, that.networkAdapters)\n+               && equal(this.computePoolReference, that.computePoolReference);\n+   }\n+\n+   @Override\n+   public int hashCode() {\n+      return Objects.hashCode(id, href, name, longName, tags, networkAdapters, computePoolReference);\n    }\n \n    @Override\n    public String toString() {\n-      return \"[href=\" + href + \", id=\" + id + \", name=\" + name + \", long name=\" + longName\n-          + \", tags=\" + tags.toString() + \", network adapters=\" + networkAdapters.toString() + \"]\";\n+      return Objects.toStringHelper(\"\").add(\"id\", id).add(\"href\", href).add(\"name\", name).add(\"longName\", longName)\n+               .add(\"tags\", tags).add(\"networkAdapters\", networkAdapters).add(\"computePoolReference\",\n+                        computePoolReference).toString();\n    }\n }",
                "raw_url": "https://github.com/apache/jclouds/raw/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/VAppExtendedInfo.java",
                "sha": "8e03862359b59d2d5b4460a848ba7b45d5e70521",
                "status": "modified"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/jclouds/blob/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/xml/VAppExtendedInfoHandler.java",
                "changes": 90,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/xml/VAppExtendedInfoHandler.java?ref=6bd8f154fc2ffed7cb73de93666a21e6362347d5",
                "deletions": 48,
                "filename": "common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/xml/VAppExtendedInfoHandler.java",
                "patch": "@@ -18,53 +18,39 @@\n  */\n package org.jclouds.trmk.vcloud_0_8.xml;\n \n-import java.net.URI;\n-import java.util.Arrays;\n-import java.util.List;\n+import static org.jclouds.util.SaxUtils.currentOrNull;\n \n-import javax.annotation.Resource;\n+import java.net.URI;\n \n import org.jclouds.http.functions.ParseSax.HandlerWithResult;\n-import org.jclouds.logging.Logger;\n+import org.jclouds.trmk.vcloud_0_8.domain.ComputePoolReference;\n import org.jclouds.trmk.vcloud_0_8.domain.NetworkAdapter;\n import org.jclouds.trmk.vcloud_0_8.domain.Subnet;\n import org.jclouds.trmk.vcloud_0_8.domain.VAppExtendedInfo;\n import org.xml.sax.Attributes;\n import org.xml.sax.SAXException;\n \n-import com.google.common.collect.Lists;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n \n /**\n- * @author Seshu Pasam\n+ * @author Seshu Pasam, Adrian Cole\n  */\n public class VAppExtendedInfoHandler extends HandlerWithResult<VAppExtendedInfo> {\n \n-   @Resource\n-   protected Logger logger = Logger.NULL;\n    private StringBuilder currentText = new StringBuilder();\n \n-   private String id;\n-   private URI href;\n-   private String name;\n-   private String longName;\n-   private List<String> tags;\n-   private List<NetworkAdapter> networkAdapters = Lists.newArrayList();\n+   private VAppExtendedInfo.Builder builder = VAppExtendedInfo.builder();\n+   private NetworkAdapter.Builder adapterBuilder = NetworkAdapter.builder();\n+   private Subnet.Builder subnetBuilder = Subnet.builder();\n+   private ComputePoolReference.Builder poolBuilder = ComputePoolReference.builder();\n    private boolean inAdapters;\n-   private String macAddress;\n-   private String adapterName;\n    private boolean inSubnet;\n-   private Subnet subnet;\n-   private URI subnetLocation;\n-   private String subnetName;\n-\n-   protected String currentOrNull() {\n-      String returnVal = currentText.toString().trim();\n-      return returnVal.equals(\"\") ? null : returnVal;\n-   }\n+   private boolean inComputePool;\n \n    @Override\n    public VAppExtendedInfo getResult() {\n-      return new VAppExtendedInfo(id, href, name, tags, longName, networkAdapters);\n+      return builder.build();\n    }\n \n    @Override\n@@ -73,47 +59,55 @@ public void startElement(String uri, String localName, String qName, Attributes\n          inAdapters = true;\n       } else if (qName.equals(\"Subnet\")) {\n          inSubnet = true;\n+      } else if (qName.equals(\"ComputePoolReference\")) {\n+         inComputePool = true;\n       }\n    }\n \n    public void endElement(String uri, String name, String qName) {\n-      String current = currentOrNull();\n+      String current = currentOrNull(currentText);\n       if (current != null) {\n          if (qName.equals(\"Id\")) {\n-            this.id = current;\n+            builder.id(current);\n          } else if (qName.equals(\"Tags\")) {\n-            this.tags = Arrays.asList(current.split(\",\"));\n+            builder.tags(ImmutableList.copyOf(Splitter.on(',').split(current)));\n          } else if (qName.equals(\"LongName\")) {\n-            this.longName = current;\n+            builder.longName(current);\n          } else if (qName.equals(\"Href\")) {\n+            URI href = URI.create(current);\n             if (inSubnet) {\n-               this.subnetLocation = URI.create(current);\n+               subnetBuilder.href(href);\n+            } else if (inComputePool) {\n+               poolBuilder.href(href);\n             } else {\n-               this.href = URI.create(current);\n+               builder.href(href);\n             }\n          } else if (qName.equals(\"Name\")) {\n             if (inSubnet) {\n-               this.subnetName = current;\n+               subnetBuilder.name(current);\n             } else if (inAdapters) {\n-               this.adapterName = current;\n+               adapterBuilder.name(current);\n+            } else if (inComputePool) {\n+               poolBuilder.name(current);\n             } else {\n-               this.name = current;\n+               builder.name(current);\n             }\n-         } else if (qName.equals(\"NetworkAdapters\")) {\n-             inAdapters = false;\n-         } else if (qName.equals(\"NetworkAdapter\")) {\n-             networkAdapters.add(new NetworkAdapter(macAddress, adapterName, subnet));\n-             macAddress = null;\n-             adapterName = null;\n-             subnet = null;\n          } else if (qName.equals(\"MacAddress\")) {\n-             macAddress = current;\n-         } else if (qName.equals(\"Subnet\")) {\n-             subnet = new Subnet(subnetLocation, subnetName);\n-             subnetLocation = null;\n-             subnetName = null;\n-             inSubnet = false;\n+            adapterBuilder.macAddress(current);\n          }\n+      } else if (qName.equals(\"NetworkAdapters\")) {\n+         inAdapters = false;\n+      } else if (qName.equals(\"NetworkAdapter\")) {\n+         builder.networkAdapter(adapterBuilder.build());\n+         adapterBuilder = NetworkAdapter.builder();\n+      } else if (qName.equals(\"Subnet\")) {\n+         adapterBuilder.subnet(subnetBuilder.build());\n+         subnetBuilder = Subnet.builder();\n+         inSubnet = false;\n+      } else if (qName.equals(\"ComputePoolReference\")) {\n+         builder.computePoolReference(poolBuilder.build());\n+         poolBuilder = ComputePoolReference.builder();\n+         inComputePool = false;\n       }\n       currentText = new StringBuilder();\n    }",
                "raw_url": "https://github.com/apache/jclouds/raw/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/xml/VAppExtendedInfoHandler.java",
                "sha": "fad34bb6b550413085dfee82038f43b01e174461",
                "status": "modified"
            },
            {
                "additions": 78,
                "blob_url": "https://github.com/apache/jclouds/blob/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/test/java/org/jclouds/trmk/vcloud_0_8/xml/VAppExtendedInfoHandlerTest.java",
                "changes": 78,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/common/trmk/src/test/java/org/jclouds/trmk/vcloud_0_8/xml/VAppExtendedInfoHandlerTest.java?ref=6bd8f154fc2ffed7cb73de93666a21e6362347d5",
                "deletions": 0,
                "filename": "common/trmk/src/test/java/org/jclouds/trmk/vcloud_0_8/xml/VAppExtendedInfoHandlerTest.java",
                "patch": "@@ -0,0 +1,78 @@\n+/**\n+ * Licensed to jclouds, Inc. (jclouds) under one or more\n+ * contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  jclouds licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.jclouds.trmk.vcloud_0_8.xml;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import java.io.InputStream;\n+import java.net.URI;\n+\n+import org.jclouds.http.functions.BaseHandlerTest;\n+import org.jclouds.trmk.vcloud_0_8.domain.ComputePoolReference;\n+import org.jclouds.trmk.vcloud_0_8.domain.NetworkAdapter;\n+import org.jclouds.trmk.vcloud_0_8.domain.Subnet;\n+import org.jclouds.trmk.vcloud_0_8.domain.VAppExtendedInfo;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Tests behavior of {@code VAppExtendedInfoHandler}\n+ * \n+ * @author Adrian Cole\n+ */\n+// NOTE:without testName, this will not call @Before* and fail w/NPE during surefire\n+@Test(groups = \"unit\", testName = \"VAppExtendedInfoHandlerTest\")\n+public class VAppExtendedInfoHandlerTest extends BaseHandlerTest {\n+\n+   public void test() {\n+      InputStream is = getClass().getResourceAsStream(\"/vapp-ext.xml\");\n+\n+      VAppExtendedInfo result = factory.create(injector.getInstance(VAppExtendedInfoHandler.class)).parse(is);\n+      assertEquals(\n+               result,\n+               VAppExtendedInfo\n+                        .builder()\n+                        .id(\"392992\")\n+                        .href(\n+                                 URI\n+                                          .create(\"https://services.enterprisecloud.terremark.com/api/v0.8b-ext2.8/extensions/vapp/392992\"))\n+                        .name(\"instance01\")\n+                        .networkAdapter(\n+                                 NetworkAdapter\n+                                          .builder()\n+                                          .macAddress(\"00:50:56:95:12:96\")\n+                                          .name(\"Network adapter 1\")\n+                                          .subnet(\n+                                                   Subnet\n+                                                            .builder()\n+                                                            .href(\n+                                                                     URI\n+                                                                              .create(\"https://services.enterprisecloud.terremark.com/api/v0.8b-ext2.8/extensions/network/43781\"))\n+                                                            .name(\"10.122.213.192/27\").build()).build())\n+                        .computePoolReference(\n+                                 ComputePoolReference\n+                                          .builder()\n+                                          .href(\n+                                                   URI\n+                                                            .create(\"https://services.enterprisecloud.terremark.com/api/v0.8b-ext2.8/extensions/computePool/692\"))\n+                                          .name(\n+\n+                                          \"Resource Pool 692\").build()).build());\n+\n+   }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/jclouds/raw/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/test/java/org/jclouds/trmk/vcloud_0_8/xml/VAppExtendedInfoHandlerTest.java",
                "sha": "51b099028a94997b80d600ba1ee3f94859c26bae",
                "status": "added"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/jclouds/blob/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/test/resources/vapp-ext.xml",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/common/trmk/src/test/resources/vapp-ext.xml?ref=6bd8f154fc2ffed7cb73de93666a21e6362347d5",
                "deletions": 0,
                "filename": "common/trmk/src/test/resources/vapp-ext.xml",
                "patch": "@@ -0,0 +1,21 @@\n+<VApp xmlns=\"urn:tmrk:eCloudExtensions-2.8\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">\n+    <Id>392992</Id>\n+    <Href>https://services.enterprisecloud.terremark.com/api/v0.8b-ext2.8/extensions/vapp/392992</Href>\n+    <Name>instance01</Name>\n+    <Tags></Tags>\n+    <LongName></LongName>\n+    <NetworkAdapters>\n+        <NetworkAdapter>\n+            <MacAddress>00:50:56:95:12:96</MacAddress>\n+            <Name>Network adapter 1</Name>\n+            <Subnet>\n+                <Href>https://services.enterprisecloud.terremark.com/api/v0.8b-ext2.8/extensions/network/43781</Href>\n+                <Name>10.122.213.192/27</Name>\n+            </Subnet>\n+        </NetworkAdapter>\n+    </NetworkAdapters>\n+    <ComputePoolReference>\n+        <Href>https://services.enterprisecloud.terremark.com/api/v0.8b-ext2.8/extensions/computePool/692</Href>\n+        <Name>Resource Pool 692</Name>\n+    </ComputePoolReference>\n+</VApp>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/jclouds/raw/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/test/resources/vapp-ext.xml",
                "sha": "6739670e1ca2744cb25fe9f9eb87a9529626a10e",
                "status": "added"
            }
        ],
        "message": "Issue 942: NPE + Missing data when calling getVAppExtendedInfo on Terremark eCloud",
        "parent": "https://github.com/apache/jclouds/commit/c50edefef6409e00156e9a90e177fc1e65937dce",
        "repo": "jclouds",
        "unit_tests": [
            "SubnetTest.java"
        ]
    },
    "jclouds_6cdad28": {
        "bug_id": "jclouds_6cdad28",
        "commit": "https://github.com/apache/jclouds/commit/6cdad28359d9ccc32c83de12f00f309b92e39489",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jclouds/blob/6cdad28359d9ccc32c83de12f00f309b92e39489/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java?ref=6cdad28359d9ccc32c83de12f00f309b92e39489",
                "deletions": 3,
                "filename": "core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "patch": "@@ -1294,14 +1294,16 @@ else if (args[i] instanceof PayloadEnclosing)\n          for (Annotation key : entry.getValue()) {\n             Set<Annotation> extractors = indexToParamExtractor.get(entry.getKey());\n             String paramKey = ((QueryParam) key).value();\n-            String paramValue;\n+            Object paramValue;\n             if (extractors != null && extractors.size() > 0) {\n                ParamParser extractor = (ParamParser) extractors.iterator().next();\n                paramValue = injector.getInstance(extractor.value()).apply(args[entry.getKey()]);\n             } else {\n-               paramValue = args[entry.getKey()].toString();\n+               paramValue = args[entry.getKey()];\n+            }\n+            if (paramValue != null) {\n+                queryParamValues.put(paramKey, paramValue.toString());\n             }\n-            queryParamValues.put(paramKey, paramValue);\n          }\n       }\n ",
                "raw_url": "https://github.com/apache/jclouds/raw/6cdad28359d9ccc32c83de12f00f309b92e39489/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "sha": "e29dede0ebb0f0ee12a6194a26a040a67cf2e0ea",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #704 from dkoper/master\n\ntested NPE goes away with FGCP expect test",
        "parent": "https://github.com/apache/jclouds/commit/c47950c9abb6c8e60d22f61ad371cfa24a1a4b79",
        "repo": "jclouds",
        "unit_tests": [
            "RestAnnotationProcessorTest.java"
        ]
    },
    "jclouds_7aed4bc": {
        "bug_id": "jclouds_7aed4bc",
        "commit": "https://github.com/apache/jclouds/commit/7aed4bc88ccd4748c46bb0fa144ff9185a559e94",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jclouds/blob/7aed4bc88ccd4748c46bb0fa144ff9185a559e94/providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/loaders/DiskURIToImage.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/loaders/DiskURIToImage.java?ref=7aed4bc88ccd4748c46bb0fa144ff9185a559e94",
                "deletions": 2,
                "filename": "providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/loaders/DiskURIToImage.java",
                "patch": "@@ -45,9 +45,11 @@\n    @Override\n    public Optional<Image> load(URI key) throws ExecutionException {\n       try {\n+         Image image = null;\n          Disk disk = resources.disk(key);\n-         URI sourceImage = disk.sourceImage();\n-         Image image = sourceImage != null ? resources.image(sourceImage) : null;\n+         if (disk != null && disk.sourceImage() != null) {\n+            image = resources.image(disk.sourceImage());\n+         }\n          return Optional.fromNullable(image);\n       } catch (Exception e) {\n          throw new ExecutionException(message(key, e), e);",
                "raw_url": "https://github.com/apache/jclouds/raw/7aed4bc88ccd4748c46bb0fa144ff9185a559e94/providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/loaders/DiskURIToImage.java",
                "sha": "470cd9eb7ccb5c61f633b07fb5c6a2a2a5eb09ca",
                "status": "modified"
            }
        ],
        "message": "JCLOUDS-1381: Fix NPE in GCE DiskURIToImage",
        "parent": "https://github.com/apache/jclouds/commit/50ae6828f52cebe4dffab518c4d5053d93b2a494",
        "repo": "jclouds",
        "unit_tests": [
            "DiskURIToImageTest.java"
        ]
    },
    "jclouds_8508c37": {
        "bug_id": "jclouds_8508c37",
        "commit": "https://github.com/apache/jclouds/commit/8508c37a3b59d38cdcc44eb1c117f830895ab03c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jclouds/blob/8508c37a3b59d38cdcc44eb1c117f830895ab03c/core/src/main/java/org/jclouds/http/commands/callables/xml/ParseSax.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/http/commands/callables/xml/ParseSax.java?ref=8508c37a3b59d38cdcc44eb1c117f830895ab03c",
                "deletions": 1,
                "filename": "core/src/main/java/org/jclouds/http/commands/callables/xml/ParseSax.java",
                "patch": "@@ -100,7 +100,8 @@ private void parseAndCloseStream(InputStream xml, ContentHandler handler) throws\n             message.append(\"\\n\").append(response);\n          }\n          logger.error(e, message.toString());\n-         Utils.<HttpException> rethrowIfRuntimeOrSameType(e);\n+         if (!(e instanceof NullPointerException))\n+            Utils.<HttpException> rethrowIfRuntimeOrSameType(e);\n          throw new HttpException(message.toString(), e);\n       } finally {\n          IOUtils.closeQuietly(xml);",
                "raw_url": "https://github.com/apache/jclouds/raw/8508c37a3b59d38cdcc44eb1c117f830895ab03c/core/src/main/java/org/jclouds/http/commands/callables/xml/ParseSax.java",
                "sha": "8e70f69b9f4bb5cceb8eb33fcfefe4b797adebd2",
                "status": "modified"
            }
        ],
        "message": "instrumented so that NPE contain the XML content it arised from\n\ngit-svn-id: http://jclouds.googlecode.com/svn/trunk@1474 3d8758e0-26b5-11de-8745-db77d3ebf521",
        "parent": "https://github.com/apache/jclouds/commit/fd08265c67a6a38d02fd54289973e19f163e31a2",
        "repo": "jclouds",
        "unit_tests": [
            "ParseSaxTest.java"
        ]
    },
    "jclouds_85b5006": {
        "bug_id": "jclouds_85b5006",
        "commit": "https://github.com/apache/jclouds/commit/85b5006084adeb8bb72ee1be3218a72497418129",
        "file": [
            {
                "additions": 44,
                "blob_url": "https://github.com/apache/jclouds/blob/85b5006084adeb8bb72ee1be3218a72497418129/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "changes": 91,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java?ref=85b5006084adeb8bb72ee1be3218a72497418129",
                "deletions": 47,
                "filename": "core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "patch": "@@ -140,6 +140,7 @@\n import com.google.common.base.Function;\n import com.google.common.base.Functions;\n import com.google.common.base.Objects;\n+import com.google.common.base.Optional;\n import com.google.common.base.Preconditions;\n import com.google.common.base.Predicate;\n import com.google.common.base.Predicates;\n@@ -1014,7 +1015,7 @@ public GeneratedHttpRequest decorateRequest(GeneratedHttpRequest request) throws\n \n             Annotation[] annotations = request.getJavaMethod().getParameterAnnotations()[entry.getKey()];\n             for (Annotation a : annotations) {\n-               if (Nullable.class.isAssignableFrom(a.annotationType()))\n+               if (NULLABLE.apply(a))\n                   continue OUTER;\n             }\n             Preconditions.checkNotNull(null, request.getJavaMethod().getName() + \" parameter \" + (entry.getKey() + 1));\n@@ -1188,17 +1189,11 @@ else if (args[i] instanceof PayloadEnclosing)\n          for (Annotation key : entry.getValue()) {\n             Set<Annotation> extractors = indexToParamExtractor.get(entry.getKey());\n             String paramKey = ((PathParam) key).value();\n-            String paramValue;\n-            if (extractors != null && extractors.size() > 0) {\n-               ParamParser extractor = (ParamParser) extractors.iterator().next();\n-               paramValue = injector.getInstance(extractor.value()).apply(args[entry.getKey()]);\n-            } else {\n-               paramValue = args[entry.getKey()].toString();\n-            }\n-            pathParamValues.put(paramKey, paramValue);\n+            Optional<?> paramValue = getParamValue(method, args, extractors, entry, paramKey);\n+            if (paramValue.isPresent())\n+               pathParamValues.put(paramKey, paramValue.get().toString());\n          }\n       }\n-\n       if (method.isAnnotationPresent(PathParam.class) && method.isAnnotationPresent(ParamParser.class)) {\n          String paramKey = method.getAnnotation(PathParam.class).value();\n          String paramValue = injector.getInstance(method.getAnnotation(ParamParser.class).value()).apply(args);\n@@ -1208,6 +1203,33 @@ else if (args[i] instanceof PayloadEnclosing)\n       return pathParamValues;\n    }\n \n+   protected Optional<?> getParamValue(Method method, Object[] args, Set<Annotation> extractors,\n+            Entry<Integer, Set<Annotation>> entry, String paramKey) {\n+      Object arg = args[entry.getKey()];\n+      if (arg == null && containsNullable(method.getParameterAnnotations()[entry.getKey()]))\n+         return Optional.absent();\n+\n+      checkNotNull(arg, \"param{%s} for method %s.%s\", paramKey, method.getDeclaringClass().getSimpleName(),\n+               method.getName());\n+      if (extractors != null && extractors.size() > 0) {\n+         ParamParser extractor = (ParamParser) extractors.iterator().next();\n+         return Optional.of(injector.getInstance(extractor.value()).apply(arg));\n+      }\n+      return Optional.of(arg);\n+   }\n+\n+   private static final Predicate<Annotation> NULLABLE = new Predicate<Annotation>() {\n+\n+      @Override\n+      public boolean apply(Annotation in) {\n+         return Nullable.class.isAssignableFrom(in.annotationType());\n+      }\n+   };\n+\n+   private static boolean containsNullable(Annotation[] annotations) {\n+      return Iterables.any(ImmutableSet.copyOf(annotations), NULLABLE);\n+   }\n+\n    private Multimap<String, String> encodeValues(Multimap<String, String> unencoded, char... skips) {\n       Multimap<String, String> encoded = LinkedHashMultimap.create();\n       for (Entry<String, String> entry : unencoded.entries()) {\n@@ -1226,14 +1248,9 @@ else if (args[i] instanceof PayloadEnclosing)\n          for (Annotation key : entry.getValue()) {\n             Set<Annotation> extractors = indexToParamExtractor.get(entry.getKey());\n             String paramKey = ((MatrixParam) key).value();\n-            String paramValue;\n-            if (extractors != null && extractors.size() > 0) {\n-               ParamParser extractor = (ParamParser) extractors.iterator().next();\n-               paramValue = injector.getInstance(extractor.value()).apply(args[entry.getKey()]);\n-            } else {\n-               paramValue = args[entry.getKey()].toString();\n-            }\n-            matrixParamValues.put(paramKey, paramValue);\n+            Optional<?> paramValue = getParamValue(method, args, extractors, entry, paramKey);\n+            if (paramValue.isPresent())\n+               matrixParamValues.put(paramKey, paramValue.get().toString());\n          }\n       }\n \n@@ -1257,16 +1274,9 @@ else if (args[i] instanceof PayloadEnclosing)\n          for (Annotation key : entry.getValue()) {\n             Set<Annotation> extractors = indexToParamExtractor.get(entry.getKey());\n             String paramKey = ((FormParam) key).value();\n-            String paramValue;\n-            if (extractors != null && extractors.size() > 0) {\n-               ParamParser extractor = (ParamParser) extractors.iterator().next();\n-               paramValue = injector.getInstance(extractor.value()).apply(args[entry.getKey()]);\n-            } else {\n-               Object pvo = args[entry.getKey()];\n-               Preconditions.checkNotNull(pvo, paramKey);\n-               paramValue = pvo.toString();\n-            }\n-            formParamValues.put(paramKey, paramValue);\n+            Optional<?> paramValue = getParamValue(method, args, extractors, entry, paramKey);\n+            if (paramValue.isPresent())\n+               formParamValues.put(paramKey, paramValue.get().toString());\n          }\n       }\n \n@@ -1289,16 +1299,9 @@ else if (args[i] instanceof PayloadEnclosing)\n          for (Annotation key : entry.getValue()) {\n             Set<Annotation> extractors = indexToParamExtractor.get(entry.getKey());\n             String paramKey = ((QueryParam) key).value();\n-            Object paramValue;\n-            if (extractors != null && extractors.size() > 0) {\n-               ParamParser extractor = (ParamParser) extractors.iterator().next();\n-               paramValue = injector.getInstance(extractor.value()).apply(args[entry.getKey()]);\n-            } else {\n-               paramValue = args[entry.getKey()];\n-            }\n-            if (paramValue != null) {\n-                queryParamValues.put(paramKey, paramValue.toString());\n-            }\n+            Optional<?> paramValue = getParamValue(method, args, extractors, entry, paramKey);\n+            if (paramValue.isPresent())\n+               queryParamValues.put(paramKey, paramValue.get().toString());\n          }\n       }\n \n@@ -1321,15 +1324,9 @@ else if (args[i] instanceof PayloadEnclosing)\n          for (Annotation key : entry.getValue()) {\n             Set<Annotation> extractors = indexToParamExtractor.get(entry.getKey());\n             String paramKey = ((PayloadParam) key).value();\n-            Object paramValue;\n-            if (extractors != null && extractors.size() > 0) {\n-               ParamParser extractor = (ParamParser) extractors.iterator().next();\n-               paramValue = injector.getInstance(extractor.value()).apply(args[entry.getKey()]);\n-            } else {\n-               paramValue = args[entry.getKey()] != null ? args[entry.getKey()] : null;\n-            }\n-            postParams.put(paramKey, paramValue);\n-\n+            Optional<?> paramValue = getParamValue(method, args, extractors, entry, paramKey);\n+            if (paramValue.isPresent())\n+               postParams.put(paramKey, paramValue.get());\n          }\n       }\n       return postParams;",
                "raw_url": "https://github.com/apache/jclouds/raw/85b5006084adeb8bb72ee1be3218a72497418129/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "sha": "ba42417faf86d1cb69af263036d3cfc5a3c21acb",
                "status": "modified"
            },
            {
                "additions": 64,
                "blob_url": "https://github.com/apache/jclouds/blob/85b5006084adeb8bb72ee1be3218a72497418129/core/src/test/java/org/jclouds/rest/internal/RestAnnotationProcessorTest.java",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/test/java/org/jclouds/rest/internal/RestAnnotationProcessorTest.java?ref=85b5006084adeb8bb72ee1be3218a72497418129",
                "deletions": 4,
                "filename": "core/src/test/java/org/jclouds/rest/internal/RestAnnotationProcessorTest.java",
                "patch": "@@ -499,6 +499,12 @@ public void foo2() {\n       @QueryParams(keys = { \"foo\", \"fooble\" }, values = { \"bar\", \"baz\" })\n       public void foo3(@QueryParam(\"robbie\") String robbie) {\n       }\n+      \n+      @FOO\n+      @Path(\"/\")\n+      @QueryParams(keys = { \"foo\", \"fooble\" }, values = { \"bar\", \"baz\" })\n+      public void foo3Nullable(@Nullable @QueryParam(\"robbie\") String robbie) {\n+      }\n    }\n \n    public void testUnEncodeQuery() {\n@@ -537,6 +543,25 @@ public void testQuery3() throws SecurityException, NoSuchMethodException {\n       assertEquals(request.getEndpoint().getQuery(), \"x-ms-version=2009-07-17&foo=bar&fooble=baz&robbie=wonder\");\n       assertEquals(request.getMethod(), \"FOO\");\n    }\n+   \n+   @Test\n+   public void testNiceNPEQueryParam() throws SecurityException, NoSuchMethodException, IOException {\n+      Method method = TestQuery.class.getMethod(\"foo3\", String.class);\n+      try {\n+         factory(TestPath.class).createRequest(method, (String) null);\n+      } catch (NullPointerException e) {\n+         assertEquals(e.getMessage(), \"param{robbie} for method TestQuery.foo3\");\n+      }\n+   }\n+\n+   public void testNoNPEOnQueryParamWithNullable() throws SecurityException, NoSuchMethodException {\n+      Method method = TestQuery.class.getMethod(\"foo3Nullable\", String.class);\n+      HttpRequest request = factory(TestPath.class).createRequest(method, (String) null);\n+      assertEquals(request.getEndpoint().getHost(), \"localhost\");\n+      assertEquals(request.getEndpoint().getPath(), \"/\");\n+      assertEquals(request.getEndpoint().getQuery(), \"foo=bar&fooble=baz\");\n+      assertEquals(request.getMethod(), \"FOO\");\n+   }\n \n    public interface TestPayloadParamVarargs {\n       @POST\n@@ -578,7 +603,7 @@ public void testHttpRequestOptionsPayloadParam() throws SecurityException, NoSuc\n       assertNonPayloadHeadersEqual(request, \"\");\n       assertPayloadEquals(request, \"foo\", \"application/octet-stream\", false);\n    }\n-\n+   \n    public void testHttpRequestWithOnlyContentType() throws SecurityException, NoSuchMethodException, IOException {\n       Method method = TestPayloadParamVarargs.class.getMethod(\"post\", HttpRequestOptions.class);\n       HttpRequest request = factory(TestPayloadParamVarargs.class).createRequest(method, new TestHttpRequestOptions().payload(\"fooya\"));\n@@ -1397,6 +1422,11 @@ public void testConstantPathParam() throws SecurityException, NoSuchMethodExcept\n       @Path(\"/{path}\")\n       public void onePath(@PathParam(\"path\") String path) {\n       }\n+      \n+      @GET\n+      @Path(\"/{path}\")\n+      public void onePathNullable(@Nullable @PathParam(\"path\") String path) {\n+      }\n \n       @GET\n       @Path(\"/{path1}/{path2}\")\n@@ -1435,7 +1465,17 @@ public void oneMatrixParamExtractor(@MatrixParam(\"one\") @ParamParser(FirstCharac\n       public void onePathParamExtractorMethod(String path) {\n       }\n    }\n-\n+   \n+   @Test\n+   public void testNiceNPEPathParam() throws SecurityException, NoSuchMethodException, IOException {\n+      Method method = TestPath.class.getMethod(\"onePath\", String.class);\n+      try {\n+         factory(TestPath.class).createRequest(method, (String) null);\n+      } catch (NullPointerException e) {\n+         assertEquals(e.getMessage(), \"param{path} for method TestPath.onePath\");\n+      }\n+   }\n+   \n    @Test\n    public void testPathParamExtractor() throws SecurityException, NoSuchMethodException, IOException {\n       Method method = TestPath.class.getMethod(\"onePathParamExtractor\", String.class);\n@@ -1462,7 +1502,17 @@ public void testMatrixParamExtractor() throws SecurityException, NoSuchMethodExc\n       assertNonPayloadHeadersEqual(request, \"\");\n       assertPayloadEquals(request, null, null, false);\n    }\n-\n+   \n+   @Test\n+   public void testNiceNPEMatrixParam() throws SecurityException, NoSuchMethodException, IOException {\n+      Method method = TestPath.class.getMethod(\"oneMatrixParamExtractor\", String.class);\n+      try {\n+         factory(TestPath.class).createRequest(method, (String) null);\n+      } catch (NullPointerException e) {\n+         assertEquals(e.getMessage(), \"param{one} for method TestPath.oneMatrixParamExtractor\");\n+      }\n+   }\n+   \n    @Test\n    public void testFormParamExtractor() throws SecurityException, NoSuchMethodException, IOException {\n       Method method = TestPath.class.getMethod(\"oneFormParamExtractor\", String.class);\n@@ -1471,7 +1521,17 @@ public void testFormParamExtractor() throws SecurityException, NoSuchMethodExcep\n       assertNonPayloadHeadersEqual(request, \"\");\n       assertPayloadEquals(request, \"one=l\", \"application/x-www-form-urlencoded\", false);\n    }\n-\n+   \n+   @Test\n+   public void testNiceNPEFormParam() throws SecurityException, NoSuchMethodException, IOException {\n+      Method method = TestPath.class.getMethod(\"oneFormParamExtractor\", String.class);\n+      try {\n+         factory(TestPath.class).createRequest(method, (String) null);\n+      } catch (NullPointerException e) {\n+         assertEquals(e.getMessage(), \"param{one} for method TestPath.oneFormParamExtractor\");\n+      }\n+   }\n+   \n    @Test\n    public void testParamExtractorMethod() throws SecurityException, NoSuchMethodException {\n       Method method = TestPath.class.getMethod(\"onePathParamExtractorMethod\", String.class);",
                "raw_url": "https://github.com/apache/jclouds/raw/85b5006084adeb8bb72ee1be3218a72497418129/core/src/test/java/org/jclouds/rest/internal/RestAnnotationProcessorTest.java",
                "sha": "0bce56fcd54eb525332bd70bcf6d8d8f48fdeb44",
                "status": "modified"
            }
        ],
        "message": "nicer NPE when null args are specified to ReST methods",
        "parent": "https://github.com/apache/jclouds/commit/085bc43d4883e359a0966a0b2e7a3a9f617c705a",
        "repo": "jclouds",
        "unit_tests": [
            "RestAnnotationProcessorTest.java"
        ]
    },
    "jclouds_8b3010b": {
        "bug_id": "jclouds_8b3010b",
        "commit": "https://github.com/apache/jclouds/commit/8b3010b5879b4e49a2ac2df5544579f8b5fff724",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/jclouds/blob/8b3010b5879b4e49a2ac2df5544579f8b5fff724/core/src/main/java/org/jclouds/http/functions/ParseFirstJsonValueNamed.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/http/functions/ParseFirstJsonValueNamed.java?ref=8b3010b5879b4e49a2ac2df5544579f8b5fff724",
                "deletions": 2,
                "filename": "core/src/main/java/org/jclouds/http/functions/ParseFirstJsonValueNamed.java",
                "patch": "@@ -27,8 +27,11 @@\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import javax.annotation.Resource;\n+\n import org.jclouds.http.HttpResponse;\n import org.jclouds.json.internal.GsonWrapper;\n+import org.jclouds.logging.Logger;\n \n import com.google.common.base.Function;\n import com.google.common.collect.ImmutableList;\n@@ -44,6 +47,9 @@\n  */\n public class ParseFirstJsonValueNamed<T> implements Function<HttpResponse, T> {\n \n+   @Resource\n+   protected Logger logger = Logger.NULL;\n+\n    private final GsonWrapper json;\n    private final TypeLiteral<T> type;\n    private final String name;\n@@ -68,8 +74,11 @@ public T apply(HttpResponse arg0) {\n          for (; token != JsonToken.END_DOCUMENT && nnn(this.name, reader, token, name); token = skipAndPeek(token,\n                reader))\n             ;\n-         if (name.get().equals(this.name)) {\n-            return json.delegate().<T>fromJson(reader, type.getType());\n+         if (name.get() == null) {\n+            logger.trace(\"did not object named %s in json from response %s\", this.name, arg0);\n+            return nothing();\n+         } else if (name.get().equals(this.name)) {\n+            return json.delegate().<T> fromJson(reader, type.getType());\n          } else {\n             return nothing();\n          }",
                "raw_url": "https://github.com/apache/jclouds/raw/8b3010b5879b4e49a2ac2df5544579f8b5fff724/core/src/main/java/org/jclouds/http/functions/ParseFirstJsonValueNamed.java",
                "sha": "52d98885a15b93c6ea6240865e129a6e323f6210",
                "status": "modified"
            },
            {
                "additions": 138,
                "blob_url": "https://github.com/apache/jclouds/blob/8b3010b5879b4e49a2ac2df5544579f8b5fff724/core/src/test/java/org/jclouds/http/functions/ParseFirstJsonValueNamedTest.java",
                "changes": 138,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/test/java/org/jclouds/http/functions/ParseFirstJsonValueNamedTest.java?ref=8b3010b5879b4e49a2ac2df5544579f8b5fff724",
                "deletions": 0,
                "filename": "core/src/test/java/org/jclouds/http/functions/ParseFirstJsonValueNamedTest.java",
                "patch": "@@ -0,0 +1,138 @@\n+/**\n+ * Licensed to jclouds, Inc. (jclouds) under one or more\n+ * contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  jclouds licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.jclouds.http.functions;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.jclouds.http.HttpResponse;\n+import org.jclouds.io.Payloads;\n+import org.jclouds.json.config.GsonModule;\n+import org.jclouds.json.internal.GsonWrapper;\n+import org.testng.annotations.Test;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.inject.Guice;\n+import com.google.inject.TypeLiteral;\n+\n+/**\n+ * \n+ * @author Adrian Cole\n+ */\n+@Test(testName = \"ParseFirstJsonValueNamedTest\")\n+public class ParseFirstJsonValueNamedTest {\n+\n+   GsonWrapper json = Guice.createInjector(new GsonModule()).getInstance(GsonWrapper.class);\n+\n+   static class Event {\n+      private String name;\n+      private String source;\n+\n+      private Event(String name, String source) {\n+         this.name = name;\n+         this.source = source;\n+      }\n+\n+      @Override\n+      public String toString() {\n+         return String.format(\"(name=%s, source=%s)\", name, source);\n+      }\n+   }\n+\n+   public void testParseNestedElements() throws IOException {\n+      String nested = \"{ \\\"count\\\":1 ,\\\"event\\\" : [  {name:'GREETINGS',source:'guest'} ] }\";\n+      HttpResponse response = HttpResponse.builder().statusCode(200).message(\"goodie\")\n+            .payload(Payloads.newPayload(nested)).build();\n+\n+      List<Event> val = new ParseFirstJsonValueNamed<List<Event>>(json, new TypeLiteral<List<Event>>() {\n+      }, \"event\").apply(response);\n+      assertEquals(val.toString(), \"[(name=GREETINGS, source=guest)]\");\n+   }\n+\n+   public void testParseNestedElementsWhenNotFoundIsEmpty() throws IOException {\n+      String nested = \"{ \\\"count\\\":1 ,\\\"evant\\\" : [  {name:'GREETINGS',source:'guest'} ] }\";\n+      HttpResponse response = HttpResponse.builder().statusCode(200).message(\"goodie\")\n+            .payload(Payloads.newPayload(nested)).build();\n+\n+      List<Event> val = new ParseFirstJsonValueNamed<List<Event>>(json, new TypeLiteral<List<Event>>() {\n+      }, \"event\").apply(response);\n+      assertEquals(val.toString(), \"[]\");\n+   }\n+\n+   public void testParseNestedElementsButNothing() throws IOException {\n+      String nested = \"{ \\\"count\\\":1 ,\\\"event\\\" : [  ] }\";\n+      HttpResponse response = HttpResponse.builder().statusCode(200).message(\"goodie\")\n+            .payload(Payloads.newPayload(nested)).build();\n+\n+      List<Event> val = new ParseFirstJsonValueNamed<List<Event>>(json, new TypeLiteral<List<Event>>() {\n+      }, \"event\").apply(response);\n+      assertEquals(val.toString(), \"[]\");\n+   }\n+\n+   public void testParseNestedFurtherElements() throws IOException {\n+      String nestedFurther = \"{ \\\"listaccountsresponse\\\" : { \\\"count\\\":1 ,\\\"event\\\" : [  {name:'GREETINGS',source:'guest'} ] } }\";\n+      HttpResponse response = HttpResponse.builder().statusCode(200).message(\"goodie\")\n+            .payload(Payloads.newPayload(nestedFurther)).build();\n+\n+      List<Event> val = new ParseFirstJsonValueNamed<List<Event>>(json, new TypeLiteral<List<Event>>() {\n+      }, \"event\").apply(response);\n+      assertEquals(val.toString(), \"[(name=GREETINGS, source=guest)]\");\n+   }\n+\n+   public void testParseNestedFurtherElementsButNothing() throws IOException {\n+      String nestedFurther = \"{ \\\"listaccountsresponse\\\" : { \\\"count\\\":1 ,\\\"event\\\" : [ ] } }\";\n+      HttpResponse response = HttpResponse.builder().statusCode(200).message(\"goodie\")\n+            .payload(Payloads.newPayload(nestedFurther)).build();\n+\n+      List<Event> val = new ParseFirstJsonValueNamed<List<Event>>(json, new TypeLiteral<List<Event>>() {\n+      }, \"event\").apply(response);\n+      assertEquals(val.toString(), \"[]\");\n+   }\n+\n+   public void testParseNoPayloadEmptyList() throws IOException {\n+      HttpResponse response = HttpResponse.builder().statusCode(200).message(\"goodie\").build();\n+\n+      List<Event> val = new ParseFirstJsonValueNamed<List<Event>>(json, new TypeLiteral<List<Event>>() {\n+      }, \"event\").apply(response);\n+      assertEquals(val, ImmutableList.<Event> of());\n+   }\n+\n+   public void testParseNoPayloadEmptyMap() throws IOException {\n+      HttpResponse response = HttpResponse.builder().statusCode(200).message(\"goodie\").build();\n+\n+      Map<String, String> val = new ParseFirstJsonValueNamed<Map<String, String>>(json,\n+            new TypeLiteral<Map<String, String>>() {\n+            }, \"event\").apply(response);\n+      assertEquals(val, ImmutableMap.<String, String> of());\n+   }\n+\n+   public void testParseNoPayloadEmptySet() throws IOException {\n+      HttpResponse response = HttpResponse.builder().statusCode(200).message(\"goodie\").build();\n+\n+      Set<Event> val = new ParseFirstJsonValueNamed<Set<Event>>(json, new TypeLiteral<Set<Event>>() {\n+      }, \"event\").apply(response);\n+      assertEquals(val, ImmutableSet.<Event> of());\n+   }\n+}",
                "raw_url": "https://github.com/apache/jclouds/raw/8b3010b5879b4e49a2ac2df5544579f8b5fff724/core/src/test/java/org/jclouds/http/functions/ParseFirstJsonValueNamedTest.java",
                "sha": "0f043bc8b9b19aa71289cdacf8c0495edc324ef6",
                "status": "added"
            }
        ],
        "message": "fixed NPE and backfilled test",
        "parent": "https://github.com/apache/jclouds/commit/ab882bf0352d8c2ff1f8707b249d8d5e0d5bc6e7",
        "repo": "jclouds",
        "unit_tests": [
            "ParseFirstJsonValueNamedTest.java"
        ]
    },
    "jclouds_95b220f": {
        "bug_id": "jclouds_95b220f",
        "commit": "https://github.com/apache/jclouds/commit/95b220f26f1658b23aeecd771a0826821b4966c4",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jclouds/blob/95b220f26f1658b23aeecd771a0826821b4966c4/apis/cloudstack/src/main/java/org/jclouds/cloudstack/predicates/PublicIPAddressPredicates.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/main/java/org/jclouds/cloudstack/predicates/PublicIPAddressPredicates.java?ref=95b220f26f1658b23aeecd771a0826821b4966c4",
                "deletions": 2,
                "filename": "apis/cloudstack/src/main/java/org/jclouds/cloudstack/predicates/PublicIPAddressPredicates.java",
                "patch": "@@ -35,12 +35,12 @@\n       private final String networkId;\n \n       public AssociatedWithNetwork(String networkId) {\n-         this.networkId = networkId;\n+         this.networkId = checkNotNull(networkId, \"networkId\");\n       }\n \n       @Override\n       public boolean apply(PublicIPAddress input) {\n-         return checkNotNull(input, \"ipaddress\").getAssociatedNetworkId().equals(networkId);\n+         return networkId.equals(checkNotNull(input, \"ipaddress\").getAssociatedNetworkId());\n       }\n \n       @Override",
                "raw_url": "https://github.com/apache/jclouds/raw/95b220f26f1658b23aeecd771a0826821b4966c4/apis/cloudstack/src/main/java/org/jclouds/cloudstack/predicates/PublicIPAddressPredicates.java",
                "sha": "462061811cd0500194e88a7f47d749a01e3803a1",
                "status": "modified"
            }
        ],
        "message": "the associatedNetwork is @Nullable so guard against (a fatal) NPE",
        "parent": "https://github.com/apache/jclouds/commit/ed471a2eba9f5fe4277bda1b0caf39b1822d8f9b",
        "repo": "jclouds",
        "unit_tests": [
            "PublicIPAddressPredicatesTest.java"
        ]
    },
    "jclouds_9a4e5fd": {
        "bug_id": "jclouds_9a4e5fd",
        "commit": "https://github.com/apache/jclouds/commit/9a4e5fd7d8f1b26cd8024fd9534e4f16c7feff3d",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jclouds/blob/9a4e5fd7d8f1b26cd8024fd9534e4f16c7feff3d/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java?ref=9a4e5fd7d8f1b26cd8024fd9534e4f16c7feff3d",
                "deletions": 5,
                "filename": "apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java",
                "patch": "@@ -133,9 +133,10 @@ public int hashCode() {\n    }\n \n    protected ToStringHelper string() {\n-      return toStringHelper(\"\").add(\"keyName\", \"keyName\").add(\"securityGroupNames\", securityGroupNames)\n+      return toStringHelper(\"\").add(\"keyName\", keyName).add(\"securityGroupNames\", securityGroupNames)\n               .add(\"metadata\", metadata).add(\"personality\", personality)\n-              .add(\"adminPassPresent\", adminPass != null).add(\"userData\", new String(userData));\n+              .add(\"adminPassPresent\", adminPass != null)\n+              .add(\"userData\", userData == null ? null : new String(userData));\n    }\n \n    @Override\n@@ -258,9 +259,6 @@ public CreateServerOptions userData(byte[] userData) {\n    /**\n     * A keypair name can be defined when creating a server. This key will be\n     * linked to the server and used to SSH connect to the machine\n-    * \n-    * @param keyName\n-    * @return\n     */\n    public String getKeyPairName() {\n       return keyName;",
                "raw_url": "https://github.com/apache/jclouds/raw/9a4e5fd7d8f1b26cd8024fd9534e4f16c7feff3d/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java",
                "sha": "ae36ea1455d5684904d2b3cb7ab5b1983a573cd8",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #619 from aplowe/openstack-nova\n\nopenstack-nova: fixing NPE in CreateServerOptions.string()",
        "parent": "https://github.com/apache/jclouds/commit/81f46b49a7c38cc422953060626b69628365cfb0",
        "repo": "jclouds",
        "unit_tests": [
            "CreateServerOptionsTest.java"
        ]
    },
    "jclouds_b76a594": {
        "bug_id": "jclouds_b76a594",
        "commit": "https://github.com/apache/jclouds/commit/b76a594e816b0c04a8382b1876e160ae4581ae09",
        "file": [
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/apis/cloudstack/src/main/java/org/jclouds/cloudstack/compute/CloudStackComputeService.java",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/main/java/org/jclouds/cloudstack/compute/CloudStackComputeService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "deletions": 35,
                "filename": "apis/cloudstack/src/main/java/org/jclouds/cloudstack/compute/CloudStackComputeService.java",
                "patch": "@@ -17,11 +17,11 @@\n package org.jclouds.cloudstack.compute;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n+import static org.jclouds.cloudstack.predicates.SshKeyPairPredicates.nameMatches;\n+import static org.jclouds.cloudstack.predicates.ZonePredicates.supportsSecurityGroups;\n import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_RUNNING;\n import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_SUSPENDED;\n import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_TERMINATED;\n-import static org.jclouds.cloudstack.predicates.SshKeyPairPredicates.nameMatches;\n-import static org.jclouds.cloudstack.predicates.ZonePredicates.supportsSecurityGroups;\n \n import java.util.Map;\n import java.util.Set;\n@@ -33,6 +33,13 @@\n import javax.inject.Singleton;\n \n import org.jclouds.Constants;\n+import org.jclouds.cloudstack.CloudStackApi;\n+import org.jclouds.cloudstack.compute.options.CloudStackTemplateOptions;\n+import org.jclouds.cloudstack.domain.SecurityGroup;\n+import org.jclouds.cloudstack.domain.SshKeyPair;\n+import org.jclouds.cloudstack.domain.Zone;\n+import org.jclouds.cloudstack.domain.ZoneAndName;\n+import org.jclouds.cloudstack.predicates.SecurityGroupPredicates;\n import org.jclouds.collect.Memoized;\n import org.jclouds.compute.ComputeServiceContext;\n import org.jclouds.compute.callables.RunScriptOnNode;\n@@ -42,11 +49,11 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.functions.GroupNamingConvention;\n import org.jclouds.compute.internal.BaseComputeService;\n import org.jclouds.compute.internal.PersistNodeCredentials;\n import org.jclouds.compute.options.TemplateOptions;\n-import org.jclouds.compute.reference.ComputeServiceConstants.Timeouts;\n import org.jclouds.compute.strategy.CreateNodesInGroupThenAddToSet;\n import org.jclouds.compute.strategy.DestroyNodeStrategy;\n import org.jclouds.compute.strategy.GetImageStrategy;\n@@ -58,13 +65,6 @@\n import org.jclouds.compute.strategy.SuspendNodeStrategy;\n import org.jclouds.domain.Credentials;\n import org.jclouds.domain.Location;\n-import org.jclouds.cloudstack.CloudStackApi;\n-import org.jclouds.cloudstack.compute.options.CloudStackTemplateOptions;\n-import org.jclouds.cloudstack.domain.SecurityGroup;\n-import org.jclouds.cloudstack.domain.SshKeyPair;\n-import org.jclouds.cloudstack.domain.Zone;\n-import org.jclouds.cloudstack.domain.ZoneAndName;\n-import org.jclouds.cloudstack.predicates.SecurityGroupPredicates;\n import org.jclouds.scriptbuilder.functions.InitAdminAccess;\n \n import com.google.common.base.Function;\n@@ -88,32 +88,30 @@\n \n    @Inject\n    protected CloudStackComputeService(ComputeServiceContext context, Map<String, Credentials> credentialStore,\n-            @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> sizes,\n-            @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n-            GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n-            CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n-            DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy startNodeStrategy,\n-            SuspendNodeStrategy stopNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n-            @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n-            @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n-            @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n-            @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n-            InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n-            RunScriptOnNode.Factory runScriptOnNodeFactory, InitAdminAccess initAdminAccess,\n-            PersistNodeCredentials persistNodeCredentials, Timeouts timeouts,\n-            @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor, CloudStackApi client,\n-            LoadingCache<ZoneAndName, SecurityGroup> securityGroupMap,\n-            LoadingCache<String, SshKeyPair> keyPairCache,\n-            Function<Set<? extends NodeMetadata>, Multimap<String, String>> orphanedGroupsByZoneId,\n-            GroupNamingConvention.Factory namingConvention,\n-            Supplier<LoadingCache<String, Zone>> zoneIdToZone,\n-            Optional<ImageExtension> imageExtension,\n-            Optional<SecurityGroupExtension> securityGroupExtension) {\n+         @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> sizes,\n+         @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n+         GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n+         CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n+         DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy startNodeStrategy,\n+         SuspendNodeStrategy stopNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n+         @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n+         @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n+         @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n+         @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n+         InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n+         RunScriptOnNode.Factory runScriptOnNodeFactory, InitAdminAccess initAdminAccess,\n+         PersistNodeCredentials persistNodeCredentials,\n+         @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor, CloudStackApi client,\n+         LoadingCache<ZoneAndName, SecurityGroup> securityGroupMap, LoadingCache<String, SshKeyPair> keyPairCache,\n+         Function<Set<? extends NodeMetadata>, Multimap<String, String>> orphanedGroupsByZoneId,\n+         GroupNamingConvention.Factory namingConvention, Supplier<LoadingCache<String, Zone>> zoneIdToZone,\n+         Optional<ImageExtension> imageExtension, Optional<SecurityGroupExtension> securityGroupExtension,\n+         DelegatingImageExtension.Factory delegatingImageExtension) {\n       super(context, credentialStore, images, sizes, locations, listNodesStrategy, getImageStrategy,\n-               getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n-               startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n-               nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n-               persistNodeCredentials, timeouts, userExecutor, imageExtension, securityGroupExtension);\n+            getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n+            startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n+            nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n+            persistNodeCredentials, userExecutor, imageExtension, securityGroupExtension, delegatingImageExtension);\n       this.zoneIdToZone = checkNotNull(zoneIdToZone, \"zoneIdToZone\");\n       this.client = checkNotNull(client, \"client\");\n       this.securityGroupMap = checkNotNull(securityGroupMap, \"securityGroupMap\");",
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/apis/cloudstack/src/main/java/org/jclouds/cloudstack/compute/CloudStackComputeService.java",
                "sha": "70227bd46828f57a6bfe0fa2d6f66cf6c566cb52",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/apis/ec2/src/main/java/org/jclouds/ec2/compute/EC2ComputeService.java",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/main/java/org/jclouds/ec2/compute/EC2ComputeService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "deletions": 23,
                "filename": "apis/ec2/src/main/java/org/jclouds/ec2/compute/EC2ComputeService.java",
                "patch": "@@ -57,6 +57,7 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.functions.GroupNamingConvention;\n import org.jclouds.compute.functions.GroupNamingConvention.Factory;\n import org.jclouds.compute.internal.BaseComputeService;\n@@ -113,30 +114,31 @@\n \n    @Inject\n    protected EC2ComputeService(ComputeServiceContext context, Map<String, Credentials> credentialStore,\n-            @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> sizes,\n-            @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n-            GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n-            CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n-            DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy startNodeStrategy,\n-            SuspendNodeStrategy stopNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n-            @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n-            @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n-            @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n-            @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n-            InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n-            RunScriptOnNode.Factory runScriptOnNodeFactory, InitAdminAccess initAdminAccess,\n-            PersistNodeCredentials persistNodeCredentials, Timeouts timeouts,\n-            @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor, EC2Api client,\n-            ConcurrentMap<RegionAndName, KeyPair> credentialsMap,\n-            @Named(\"SECURITY\") LoadingCache<RegionAndName, String> securityGroupMap,\n-            Optional<ImageExtension> imageExtension, GroupNamingConvention.Factory namingConvention,\n-            @Named(PROPERTY_EC2_GENERATE_INSTANCE_NAMES) boolean generateInstanceNames,\n-            Optional<SecurityGroupExtension> securityGroupExtension) {\n+         @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> sizes,\n+         @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n+         GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n+         CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n+         DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy startNodeStrategy,\n+         SuspendNodeStrategy stopNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n+         @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n+         @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n+         @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n+         @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n+         InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n+         RunScriptOnNode.Factory runScriptOnNodeFactory, InitAdminAccess initAdminAccess,\n+         PersistNodeCredentials persistNodeCredentials, Timeouts timeouts,\n+         @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor, EC2Api client,\n+         ConcurrentMap<RegionAndName, KeyPair> credentialsMap,\n+         @Named(\"SECURITY\") LoadingCache<RegionAndName, String> securityGroupMap,\n+         Optional<ImageExtension> imageExtension, GroupNamingConvention.Factory namingConvention,\n+         @Named(PROPERTY_EC2_GENERATE_INSTANCE_NAMES) boolean generateInstanceNames,\n+         Optional<SecurityGroupExtension> securityGroupExtension,\n+         DelegatingImageExtension.Factory delegatingImageExtension) {\n       super(context, credentialStore, images, sizes, locations, listNodesStrategy, getImageStrategy,\n-               getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n-               startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n-               nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n-               persistNodeCredentials, timeouts, userExecutor, imageExtension, securityGroupExtension);\n+            getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n+            startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n+            nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n+            persistNodeCredentials, userExecutor, imageExtension, securityGroupExtension, delegatingImageExtension);\n       this.client = client;\n       this.credentialsMap = credentialsMap;\n       this.securityGroupMap = securityGroupMap;",
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/apis/ec2/src/main/java/org/jclouds/ec2/compute/EC2ComputeService.java",
                "sha": "fea023c109df06027206b553e44f158bd974513c",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/NovaComputeService.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/NovaComputeService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "deletions": 22,
                "filename": "apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/NovaComputeService.java",
                "patch": "@@ -20,6 +20,7 @@\n import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_RUNNING;\n import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_SUSPENDED;\n import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_TERMINATED;\n+\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicReference;\n@@ -39,10 +40,10 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.internal.BaseComputeService;\n import org.jclouds.compute.internal.PersistNodeCredentials;\n import org.jclouds.compute.options.TemplateOptions;\n-import org.jclouds.compute.reference.ComputeServiceConstants.Timeouts;\n import org.jclouds.compute.strategy.CreateNodesInGroupThenAddToSet;\n import org.jclouds.compute.strategy.DestroyNodeStrategy;\n import org.jclouds.compute.strategy.GetImageStrategy;\n@@ -69,28 +70,28 @@\n \n    @Inject\n    protected NovaComputeService(ComputeServiceContext context, Map<String, Credentials> credentialStore,\n-            @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> sizes,\n-            @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n-            GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n-            CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n-            DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy startNodeStrategy,\n-            SuspendNodeStrategy stopNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n-            @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n-            @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n-            @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n-            @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n-            InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n-            RunScriptOnNode.Factory runScriptOnNodeFactory, InitAdminAccess initAdminAccess,\n-            PersistNodeCredentials persistNodeCredentials, Timeouts timeouts,\n-            @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n-            CleanupResources cleanupResources,\n-            Optional<ImageExtension> imageExtension,\n-            Optional<SecurityGroupExtension> securityGroupExtension) {\n+         @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> sizes,\n+         @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n+         GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n+         CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n+         DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy startNodeStrategy,\n+         SuspendNodeStrategy stopNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n+         @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n+         @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n+         @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n+         @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n+         InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n+         RunScriptOnNode.Factory runScriptOnNodeFactory, InitAdminAccess initAdminAccess,\n+         PersistNodeCredentials persistNodeCredentials,\n+         @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n+         CleanupResources cleanupResources, Optional<ImageExtension> imageExtension,\n+         Optional<SecurityGroupExtension> securityGroupExtension,\n+         DelegatingImageExtension.Factory delegatingImageExtension) {\n       super(context, credentialStore, images, sizes, locations, listNodesStrategy, getImageStrategy,\n-               getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n-               startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n-               nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n-               persistNodeCredentials, timeouts, userExecutor, imageExtension, securityGroupExtension);\n+            getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n+            startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n+            nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n+            persistNodeCredentials, userExecutor, imageExtension, securityGroupExtension, delegatingImageExtension);\n       this.cleanupResources = checkNotNull(cleanupResources, \"cleanupResources\");\n \n    }",
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/NovaComputeService.java",
                "sha": "c28319cb1d2b9a1aaadf7715734ca750a190847e",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/main/java/org/jclouds/compute/config/BaseComputeServiceContextModule.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/main/java/org/jclouds/compute/config/BaseComputeServiceContextModule.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "deletions": 0,
                "filename": "compute/src/main/java/org/jclouds/compute/config/BaseComputeServiceContextModule.java",
                "patch": "@@ -45,6 +45,7 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.functions.CreateSshClientOncePortIsListeningOnNode;\n import org.jclouds.compute.functions.DefaultCredentialsFromImageOrOverridingCredentials;\n import org.jclouds.compute.options.RunScriptOptions;\n@@ -112,6 +113,8 @@ protected void configure() {\n       }, InitializeRunScriptOnNodeOrPlaceInBadMap.class).build(InitializeRunScriptOnNodeOrPlaceInBadMap.Factory.class));\n \n       install(new FactoryModuleBuilder().build(BlockUntilInitScriptStatusIsZeroThenReturnOutput.Factory.class));\n+      \n+      install(new FactoryModuleBuilder().build(DelegatingImageExtension.Factory.class));\n    }\n \n    protected void bindCredentialsOverriderFunction() {",
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/main/java/org/jclouds/compute/config/BaseComputeServiceContextModule.java",
                "sha": "39265b9ff94a4bd1e58b8b49684d6d23a9e7b6ef",
                "status": "modified"
            },
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/main/java/org/jclouds/compute/extensions/internal/DelegatingImageExtension.java",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/main/java/org/jclouds/compute/extensions/internal/DelegatingImageExtension.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "deletions": 5,
                "filename": "compute/src/main/java/org/jclouds/compute/extensions/internal/DelegatingImageExtension.java",
                "patch": "@@ -16,17 +16,30 @@\n  */\n package org.jclouds.compute.extensions.internal;\n \n-import static com.google.common.base.Preconditions.checkNotNull;\n+import java.util.Map;\n \n+import javax.annotation.Resource;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.jclouds.compute.config.ComputeServiceAdapterContextModule.AddDefaultCredentialsToImage;\n+import org.jclouds.compute.domain.CloneImageTemplate;\n import org.jclouds.compute.domain.Image;\n+import org.jclouds.compute.domain.ImageBuilder;\n import org.jclouds.compute.domain.ImageTemplate;\n import org.jclouds.compute.extensions.ImageExtension;\n+import org.jclouds.compute.reference.ComputeServiceConstants;\n import org.jclouds.compute.suppliers.ImageCacheSupplier;\n+import org.jclouds.domain.Credentials;\n+import org.jclouds.domain.LoginCredentials;\n+import org.jclouds.logging.Logger;\n \n import com.google.common.annotations.Beta;\n+import com.google.common.base.Function;\n import com.google.common.util.concurrent.FutureCallback;\n import com.google.common.util.concurrent.Futures;\n import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.inject.assistedinject.Assisted;\n \n /**\n  * Delegates to the provider specific {@link ImageExtension} and takes care of\n@@ -35,20 +48,65 @@\n @Beta\n public class DelegatingImageExtension implements ImageExtension {\n \n+   public interface Factory {\n+      DelegatingImageExtension create(ImageCacheSupplier imageCache, ImageExtension delegate);\n+   }\n+\n+   @Resource\n+   @Named(ComputeServiceConstants.COMPUTE_LOGGER)\n+   protected Logger logger = Logger.NULL;\n+\n    private final ImageCacheSupplier imageCache;\n    private final ImageExtension delegate;\n+   private final AddDefaultCredentialsToImage addDefaultCredentialsToImage;\n+   private final Map<String, Credentials> credentialStore;\n \n-   public DelegatingImageExtension(ImageCacheSupplier imageCache, ImageExtension delegate) {\n-      this.imageCache = checkNotNull(imageCache, \"imageCache\");\n-      this.delegate = checkNotNull(delegate, \"delegate\");\n+   @Inject\n+   DelegatingImageExtension(@Assisted ImageCacheSupplier imageCache, @Assisted ImageExtension delegate,\n+         AddDefaultCredentialsToImage addDefaultCredentialsToImage, Map<String, Credentials> credentialStore) {\n+      this.imageCache = imageCache;\n+      this.delegate = delegate;\n+      this.addDefaultCredentialsToImage = addDefaultCredentialsToImage;\n+      this.credentialStore = credentialStore;\n    }\n \n    public ImageTemplate buildImageTemplateFromNode(String name, String id) {\n       return delegate.buildImageTemplateFromNode(name, id);\n    }\n \n-   public ListenableFuture<Image> createImage(ImageTemplate template) {\n+   public ListenableFuture<Image> createImage(final ImageTemplate template) {\n       ListenableFuture<Image> future = delegate.createImage(template);\n+\n+      // Populate the default image credentials, if missing\n+      future = Futures.transform(future, new Function<Image, Image>() {\n+         @Override\n+         public Image apply(Image input) {\n+            if (input.getDefaultCredentials() != null) {\n+               return input;\n+            }\n+\n+            // If the image has been created by cloning a node, then try to\n+            // populate the known node credentials as the default image\n+            // credentials\n+            if (template instanceof CloneImageTemplate) {\n+               final CloneImageTemplate cloneImageTemplate = (CloneImageTemplate) template;\n+\n+               Credentials nodeCredentials = credentialStore.get(\"node#\" + cloneImageTemplate.getSourceNodeId());\n+               if (nodeCredentials != null) {\n+                  logger.info(\">> Adding node(%s) credentials to image(%s)...\", cloneImageTemplate.getSourceNodeId(),\n+                        cloneImageTemplate.getName());\n+                  return ImageBuilder.fromImage(input)\n+                        .defaultCredentials(LoginCredentials.fromCredentials(nodeCredentials)).build();\n+               }\n+            }\n+\n+            // If no credentials are known for the node, populate the default\n+            // credentials using the defined strategy\n+            logger.info(\">> Adding default image credentials to image(%s)...\", template.getName());\n+            return addDefaultCredentialsToImage.apply(input);\n+         }\n+      });\n+\n       Futures.addCallback(future, new FutureCallback<Image>() {\n          @Override\n          public void onSuccess(Image result) {",
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/main/java/org/jclouds/compute/extensions/internal/DelegatingImageExtension.java",
                "sha": "7fd7544ac730377f161c2d43182ca2d1ac3ac93e",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/main/java/org/jclouds/compute/internal/BaseComputeService.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/main/java/org/jclouds/compute/internal/BaseComputeService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "deletions": 7,
                "filename": "compute/src/main/java/org/jclouds/compute/internal/BaseComputeService.java",
                "patch": "@@ -68,7 +68,6 @@\n import org.jclouds.compute.options.RunScriptOptions;\n import org.jclouds.compute.options.TemplateOptions;\n import org.jclouds.compute.reference.ComputeServiceConstants;\n-import org.jclouds.compute.reference.ComputeServiceConstants.Timeouts;\n import org.jclouds.compute.strategy.CreateNodesInGroupThenAddToSet;\n import org.jclouds.compute.strategy.DestroyNodeStrategy;\n import org.jclouds.compute.strategy.GetImageStrategy;\n@@ -131,7 +130,6 @@\n    private final Predicate<AtomicReference<NodeMetadata>> nodeTerminated;\n    private final Predicate<AtomicReference<NodeMetadata>> nodeSuspended;\n    private final InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory;\n-   private final Timeouts timeouts;\n    private final InitAdminAccess initAdminAccess;\n    private final PersistNodeCredentials persistNodeCredentials;\n    private final RunScriptOnNode.Factory runScriptOnNodeFactory;\n@@ -154,8 +152,9 @@ protected BaseComputeService(ComputeServiceContext context, Map<String, Credenti\n             @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n             InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory, InitAdminAccess initAdminAccess,\n             RunScriptOnNode.Factory runScriptOnNodeFactory, PersistNodeCredentials persistNodeCredentials,\n-            Timeouts timeouts, @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n-            Optional<ImageExtension> imageExtension, Optional<SecurityGroupExtension> securityGroupExtension) {\n+            @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n+            Optional<ImageExtension> imageExtension, Optional<SecurityGroupExtension> securityGroupExtension,\n+            DelegatingImageExtension.Factory delegatingImageExtension) {\n       this.context = checkNotNull(context, \"context\");\n       this.credentialStore = checkNotNull(credentialStore, \"credentialStore\");\n       this.images = checkNotNull(images, \"images\");\n@@ -175,15 +174,14 @@ protected BaseComputeService(ComputeServiceContext context, Map<String, Credenti\n       this.nodeTerminated = checkNotNull(nodeTerminated, \"nodeTerminated\");\n       this.nodeSuspended = checkNotNull(nodeSuspended, \"nodeSuspended\");\n       this.initScriptRunnerFactory = checkNotNull(initScriptRunnerFactory, \"initScriptRunnerFactory\");\n-      this.timeouts = checkNotNull(timeouts, \"timeouts\");\n       this.initAdminAccess = checkNotNull(initAdminAccess, \"initAdminAccess\");\n       this.runScriptOnNodeFactory = checkNotNull(runScriptOnNodeFactory, \"runScriptOnNodeFactory\");\n       this.persistNodeCredentials = checkNotNull(persistNodeCredentials, \"persistNodeCredentials\");\n       this.userExecutor = checkNotNull(userExecutor, \"userExecutor\");\n       this.securityGroupExtension = checkNotNull(securityGroupExtension, \"securityGroupExtension\");\n       if (imageExtension.isPresent() && images instanceof ImageCacheSupplier) {\n-         this.imageExtension = Optional.<ImageExtension> of(new DelegatingImageExtension(ImageCacheSupplier.class\n-               .cast(images), imageExtension.get()));\n+         this.imageExtension = Optional.<ImageExtension> of(delegatingImageExtension.create(\n+               ImageCacheSupplier.class.cast(images), imageExtension.get()));\n       } else {\n          this.imageExtension = checkNotNull(imageExtension, \"imageExtension\");\n       }",
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/main/java/org/jclouds/compute/internal/BaseComputeService.java",
                "sha": "c8c4c1f704e24d1e3927b07eb848a9dc4c941b74",
                "status": "modified"
            },
            {
                "additions": 214,
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/test/java/org/jclouds/compute/extensions/internal/DelegatingImageExtensionTest.java",
                "changes": 214,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/test/java/org/jclouds/compute/extensions/internal/DelegatingImageExtensionTest.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "deletions": 0,
                "filename": "compute/src/test/java/org/jclouds/compute/extensions/internal/DelegatingImageExtensionTest.java",
                "patch": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jclouds.compute.extensions.internal;\n+\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.expectLastCall;\n+import static org.easymock.EasyMock.replay;\n+import static org.easymock.EasyMock.verify;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+\n+import org.jclouds.compute.config.ComputeServiceAdapterContextModule.AddDefaultCredentialsToImage;\n+import org.jclouds.compute.domain.Image;\n+import org.jclouds.compute.domain.Image.Status;\n+import org.jclouds.compute.domain.ImageBuilder;\n+import org.jclouds.compute.domain.ImageTemplate;\n+import org.jclouds.compute.domain.ImageTemplateBuilder.CloneImageTemplateBuilder;\n+import org.jclouds.compute.domain.OperatingSystem;\n+import org.jclouds.compute.domain.internal.ImageTemplateImpl;\n+import org.jclouds.compute.extensions.ImageExtension;\n+import org.jclouds.compute.suppliers.ImageCacheSupplier;\n+import org.jclouds.domain.Credentials;\n+import org.jclouds.domain.LoginCredentials;\n+import org.testng.annotations.Test;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.util.concurrent.Futures;\n+\n+@Test(groups = \"unit\", testName = \"DelegatingImageExtensionTest\")\n+public class DelegatingImageExtensionTest {\n+\n+   @Test\n+   public void createImageRegistersInCacheAndAddsCredentials()  {\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+      AddDefaultCredentialsToImage credsToImage = createMock(AddDefaultCredentialsToImage.class);\n+\n+      ImageTemplate template = new ImageTemplateImpl(\"test\") {\n+      };\n+      Image result = new ImageBuilder().id(\"test\")\n+            .operatingSystem(OperatingSystem.builder().description(\"test\").build()).status(Status.AVAILABLE).build();\n+\n+      LoginCredentials credentials = LoginCredentials.builder().user(\"jclouds\").password(\"pass\").build();\n+      Image withCredentials = ImageBuilder.fromImage(result).defaultCredentials(credentials).build();\n+\n+      expect(delegate.createImage(template)).andReturn(immediateFuture(result));\n+      expect(credsToImage.apply(result)).andReturn(withCredentials);\n+      imageCache.registerImage(withCredentials);\n+      expectLastCall();\n+      replay(delegate, imageCache, credsToImage);\n+\n+      new DelegatingImageExtension(imageCache, delegate, credsToImage, null).createImage(template);\n+\n+      verify(delegate, imageCache, credsToImage);\n+   }\n+\n+   @Test\n+   public void createImageDoesNotRegisterInCacheWhenFailed() {\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+      AddDefaultCredentialsToImage credsToImage = createMock(AddDefaultCredentialsToImage.class);\n+\n+      ImageTemplate template = new ImageTemplateImpl(\"test\") {\n+      };\n+\n+      expect(delegate.createImage(template)).andReturn(Futures.<Image> immediateFailedFuture(new RuntimeException()));\n+      replay(delegate, imageCache, credsToImage);\n+\n+      new DelegatingImageExtension(imageCache, delegate, credsToImage, null).createImage(template);\n+\n+      verify(delegate, imageCache, credsToImage);\n+   }\n+\n+   @Test\n+   public void createImageDoesNotRegisterInCacheWhenCancelled() {\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+      AddDefaultCredentialsToImage credsToImage = createMock(AddDefaultCredentialsToImage.class);\n+\n+      ImageTemplate template = new ImageTemplateImpl(\"test\") {\n+      };\n+\n+      expect(delegate.createImage(template)).andReturn(Futures.<Image> immediateCancelledFuture());\n+      replay(delegate, imageCache, credsToImage);\n+\n+      new DelegatingImageExtension(imageCache, delegate, credsToImage, null).createImage(template);\n+\n+      verify(delegate, imageCache, credsToImage);\n+   }\n+\n+   @Test\n+   public void deleteUnregistersImageFromCache() {\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+\n+      expect(delegate.deleteImage(\"test\")).andReturn(true);\n+      imageCache.removeImage(\"test\");\n+      expectLastCall();\n+      replay(delegate, imageCache);\n+\n+      new DelegatingImageExtension(imageCache, delegate, null, null).deleteImage(\"test\");\n+\n+      verify(delegate, imageCache);\n+   }\n+\n+   @Test\n+   public void deleteDoesNotUnregisterImageFromCacheWhenFailed() {\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+\n+      expect(delegate.deleteImage(\"test\")).andReturn(false);\n+      replay(delegate, imageCache);\n+\n+      new DelegatingImageExtension(imageCache, delegate, null, null).deleteImage(\"test\");\n+\n+      verify(delegate, imageCache);\n+   }\n+\n+   @Test\n+   public void createByCloningDoesNothingIfImageHasCredentials() throws InterruptedException, ExecutionException {\n+      LoginCredentials credentials = LoginCredentials.builder().user(\"jclouds\").password(\"pass\").build();\n+\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+      AddDefaultCredentialsToImage credsToImage = createMock(AddDefaultCredentialsToImage.class);\n+\n+      ImageTemplate template = new CloneImageTemplateBuilder().name(\"test\").nodeId(\"node1\").build();\n+      Image result = new ImageBuilder().id(\"test\")\n+            .operatingSystem(OperatingSystem.builder().description(\"test\").build()).status(Status.AVAILABLE)\n+            .defaultCredentials(credentials).build();\n+\n+      expect(delegate.createImage(template)).andReturn(immediateFuture(result));\n+      replay(delegate, credsToImage);\n+\n+      Future<Image> image = new DelegatingImageExtension(imageCache, delegate, credsToImage, null)\n+            .createImage(template);\n+\n+      // Verify that the exact same instance is returned unmodified\n+      assertTrue(image.get() == result);\n+\n+      verify(delegate, credsToImage);\n+   }\n+\n+   @Test\n+   public void createByCloningAddsNodeCredentials() throws InterruptedException, ExecutionException {\n+      Credentials credentials = LoginCredentials.builder().user(\"jclouds\").password(\"pass\").build();\n+\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+      AddDefaultCredentialsToImage credsToImage = createMock(AddDefaultCredentialsToImage.class);\n+      Map<String, Credentials> credentialStore = ImmutableMap.of(\"node#node1\", credentials);\n+\n+      ImageTemplate template = new CloneImageTemplateBuilder().name(\"test\").nodeId(\"node1\").build();\n+      Image result = new ImageBuilder().id(\"test\")\n+            .operatingSystem(OperatingSystem.builder().description(\"test\").build()).status(Status.AVAILABLE).build();\n+\n+      expect(delegate.createImage(template)).andReturn(immediateFuture(result));\n+      replay(delegate, credsToImage);\n+\n+      Future<Image> image = new DelegatingImageExtension(imageCache, delegate, credsToImage, credentialStore)\n+            .createImage(template);\n+\n+      assertEquals(image.get().getDefaultCredentials(), credentials);\n+\n+      verify(delegate, credsToImage);\n+   }\n+\n+   @Test\n+   public void createByCloningAddsDefaultImageCredentials() throws InterruptedException, ExecutionException {\n+      LoginCredentials credentials = LoginCredentials.builder().user(\"jclouds\").password(\"pass\").build();\n+\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+      AddDefaultCredentialsToImage credsToImage = createMock(AddDefaultCredentialsToImage.class);\n+      Map<String, Credentials> credentialStore = Collections.emptyMap();\n+\n+      ImageTemplate template = new CloneImageTemplateBuilder().name(\"test\").nodeId(\"node1\").build();\n+      Image result = new ImageBuilder().id(\"test\")\n+            .operatingSystem(OperatingSystem.builder().description(\"test\").build()).status(Status.AVAILABLE).build();\n+\n+      expect(delegate.createImage(template)).andReturn(immediateFuture(result));\n+      expect(credsToImage.apply(result)).andReturn(\n+            ImageBuilder.fromImage(result).defaultCredentials(credentials).build());\n+      replay(delegate, credsToImage);\n+\n+      Future<Image> image = new DelegatingImageExtension(imageCache, delegate, credsToImage, credentialStore)\n+            .createImage(template);\n+\n+      assertEquals(image.get().getDefaultCredentials(), credentials);\n+\n+      verify(delegate, credsToImage);\n+   }\n+}",
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/test/java/org/jclouds/compute/extensions/internal/DelegatingImageExtensionTest.java",
                "sha": "4eb6a39240c2a484c3bb7b2489eb374ba0a7c570",
                "status": "added"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/aws-ec2/src/main/java/org/jclouds/aws/ec2/compute/AWSEC2ComputeService.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/aws-ec2/src/main/java/org/jclouds/aws/ec2/compute/AWSEC2ComputeService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "deletions": 2,
                "filename": "providers/aws-ec2/src/main/java/org/jclouds/aws/ec2/compute/AWSEC2ComputeService.java",
                "patch": "@@ -47,6 +47,7 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.functions.GroupNamingConvention;\n import org.jclouds.compute.internal.PersistNodeCredentials;\n import org.jclouds.compute.options.TemplateOptions;\n@@ -103,13 +104,14 @@ protected AWSEC2ComputeService(ComputeServiceContext context, Map<String, Creden\n          @Named(\"DELETED\") Predicate<PlacementGroup> placementGroupDeleted, Optional<ImageExtension> imageExtension,\n          GroupNamingConvention.Factory namingConvention,\n          @Named(PROPERTY_EC2_GENERATE_INSTANCE_NAMES) boolean generateInstanceNames,\n-         Optional<SecurityGroupExtension> securityGroupExtension) {\n+         Optional<SecurityGroupExtension> securityGroupExtension,\n+         DelegatingImageExtension.Factory delegatingImageExtension) {\n       super(context, credentialStore, images, sizes, locations, listNodesStrategy, getImageStrategy,\n             getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n             startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n             nodeTerminated, nodeSuspended, initScriptRunnerFactory, runScriptOnNodeFactory, initAdminAccess,\n             persistNodeCredentials, timeouts, userExecutor, client, credentialsMap, securityGroupMap, imageExtension,\n-            namingConvention, generateInstanceNames, securityGroupExtension);\n+            namingConvention, generateInstanceNames, securityGroupExtension, delegatingImageExtension);\n       this.client = client;\n       this.placementGroupMap = placementGroupMap;\n       this.placementGroupDeleted = placementGroupDeleted;",
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/aws-ec2/src/main/java/org/jclouds/aws/ec2/compute/AWSEC2ComputeService.java",
                "sha": "cc2f13abc8b5ade33013f8a276e40d0e59f425b4",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/AzureComputeService.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/AzureComputeService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "deletions": 8,
                "filename": "providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/AzureComputeService.java",
                "patch": "@@ -16,6 +16,10 @@\n  */\n package org.jclouds.azurecompute.arm.compute;\n \n+import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_RUNNING;\n+import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_SUSPENDED;\n+import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_TERMINATED;\n+\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.Set;\n@@ -38,10 +42,10 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.internal.BaseComputeService;\n import org.jclouds.compute.internal.PersistNodeCredentials;\n import org.jclouds.compute.options.TemplateOptions;\n-import org.jclouds.compute.reference.ComputeServiceConstants.Timeouts;\n import org.jclouds.compute.strategy.CreateNodesInGroupThenAddToSet;\n import org.jclouds.compute.strategy.DestroyNodeStrategy;\n import org.jclouds.compute.strategy.GetImageStrategy;\n@@ -62,10 +66,6 @@\n import com.google.common.collect.ImmutableSet;\n import com.google.common.util.concurrent.ListeningExecutorService;\n \n-import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_RUNNING;\n-import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_SUSPENDED;\n-import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_TERMINATED;\n-\n @Singleton\n public class AzureComputeService extends BaseComputeService {\n    private final CleanupResources cleanupResources;\n@@ -84,15 +84,16 @@ protected AzureComputeService(ComputeServiceContext context, Map<String, Credent\n          @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n          InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n          RunScriptOnNode.Factory runScriptOnNodeFactory, InitAdminAccess initAdminAccess,\n-         PersistNodeCredentials persistNodeCredentials, Timeouts timeouts,\n+         PersistNodeCredentials persistNodeCredentials,\n          @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n          CleanupResources cleanupResources, Optional<ImageExtension> imageExtension,\n-         Optional<SecurityGroupExtension> securityGroupExtension) {\n+         Optional<SecurityGroupExtension> securityGroupExtension,\n+         DelegatingImageExtension.Factory delegatingImageExtension) {\n       super(context, credentialStore, images, sizes, locations, listNodesStrategy, getImageStrategy,\n             getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n             startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n             nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n-            persistNodeCredentials, timeouts, userExecutor, imageExtension, securityGroupExtension);\n+            persistNodeCredentials, userExecutor, imageExtension, securityGroupExtension, delegatingImageExtension);\n       this.cleanupResources = cleanupResources;\n    }\n ",
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/AzureComputeService.java",
                "sha": "9a85abe940dacf26c8e592824a48196bd8d7a224",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/gogrid/src/main/java/org/jclouds/gogrid/compute/GoGridComputeService.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/gogrid/src/main/java/org/jclouds/gogrid/compute/GoGridComputeService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "deletions": 20,
                "filename": "providers/gogrid/src/main/java/org/jclouds/gogrid/compute/GoGridComputeService.java",
                "patch": "@@ -38,10 +38,10 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.internal.BaseComputeService;\n import org.jclouds.compute.internal.PersistNodeCredentials;\n import org.jclouds.compute.options.TemplateOptions;\n-import org.jclouds.compute.reference.ComputeServiceConstants.Timeouts;\n import org.jclouds.compute.strategy.CreateNodesInGroupThenAddToSet;\n import org.jclouds.compute.strategy.DestroyNodeStrategy;\n import org.jclouds.compute.strategy.GetImageStrategy;\n@@ -65,26 +65,26 @@\n public class GoGridComputeService extends BaseComputeService {\n    @Inject\n    protected GoGridComputeService(ComputeServiceContext context, Map<String, Credentials> credentialStore,\n-            @Memoized Supplier<Set<? extends Image>> images,\n-            @Memoized Supplier<Set<? extends Hardware>> hardwareProfiles,\n-            @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n-            GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n-            CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n-            DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy resumeNodeStrategy,\n-            SuspendNodeStrategy suspendNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n-            @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n-            @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n-            @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n-            @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n-            InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory, InitAdminAccess initAdminAccess,\n-            RunScriptOnNode.Factory runScriptOnNodeFactory, PersistNodeCredentials persistNodeCredentials,\n-            Timeouts timeouts, @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n-            Optional<ImageExtension> imageExtension, Optional<SecurityGroupExtension> securityGroupExtension) {\n+         @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> hardwareProfiles,\n+         @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n+         GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n+         CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n+         DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy resumeNodeStrategy,\n+         SuspendNodeStrategy suspendNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n+         @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n+         @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n+         @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n+         @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n+         InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory, InitAdminAccess initAdminAccess,\n+         RunScriptOnNode.Factory runScriptOnNodeFactory, PersistNodeCredentials persistNodeCredentials,\n+         @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n+         Optional<ImageExtension> imageExtension, Optional<SecurityGroupExtension> securityGroupExtension,\n+         DelegatingImageExtension.Factory delegatingImageExtension) {\n       super(context, credentialStore, images, hardwareProfiles, locations, listNodesStrategy, getImageStrategy,\n-               getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n-               resumeNodeStrategy, suspendNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n-               nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n-               persistNodeCredentials, timeouts, userExecutor, imageExtension, securityGroupExtension);\n+            getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n+            resumeNodeStrategy, suspendNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n+            nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n+            persistNodeCredentials, userExecutor, imageExtension, securityGroupExtension, delegatingImageExtension);\n    }\n \n    /**",
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/gogrid/src/main/java/org/jclouds/gogrid/compute/GoGridComputeService.java",
                "sha": "96ac4d7d42766f476e4f9be7b0e7693df4cf3e61",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/GoogleComputeEngineService.java",
                "changes": 62,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/GoogleComputeEngineService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "deletions": 38,
                "filename": "providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/GoogleComputeEngineService.java",
                "patch": "@@ -39,11 +39,11 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.functions.GroupNamingConvention;\n import org.jclouds.compute.internal.BaseComputeService;\n import org.jclouds.compute.internal.PersistNodeCredentials;\n import org.jclouds.compute.options.TemplateOptions;\n-import org.jclouds.compute.reference.ComputeServiceConstants;\n import org.jclouds.compute.strategy.CreateNodesInGroupThenAddToSet;\n import org.jclouds.compute.strategy.DestroyNodeStrategy;\n import org.jclouds.compute.strategy.GetImageStrategy;\n@@ -76,44 +76,30 @@\n    private final GoogleComputeEngineApi api;\n    private final Predicate<AtomicReference<Operation>> operationDone;\n \n-   @Inject GoogleComputeEngineService(ComputeServiceContext context,\n-                                        Map<String, Credentials> credentialStore,\n-                                        @Memoized Supplier<Set<? extends Image>> images,\n-                                        @Memoized Supplier<Set<? extends Hardware>> hardwareProfiles,\n-                                        @Memoized Supplier<Set<? extends Location>> locations,\n-                                        ListNodesStrategy listNodesStrategy,\n-                                        GetImageStrategy getImageStrategy,\n-                                        GetNodeMetadataStrategy getNodeMetadataStrategy,\n-                                        CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy,\n-                                        RebootNodeStrategy rebootNodeStrategy,\n-                                        DestroyNodeStrategy destroyNodeStrategy,\n-                                        ResumeNodeStrategy resumeNodeStrategy,\n-                                        SuspendNodeStrategy suspendNodeStrategy,\n-                                        Provider<TemplateBuilder> templateBuilderProvider,\n-                                        @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n-                                        @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>>\n-                                                nodeRunning,\n-                                        @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>>\n-                                                nodeTerminated,\n-                                        @Named(TIMEOUT_NODE_SUSPENDED)\n-                                        Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n-                                        InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n-                                        InitAdminAccess initAdminAccess,\n-                                        RunScriptOnNode.Factory runScriptOnNodeFactory,\n-                                        PersistNodeCredentials persistNodeCredentials,\n-                                        ComputeServiceConstants.Timeouts timeouts,\n-                                        @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n-                                        Optional<ImageExtension> imageExtension,\n-                                        Optional<SecurityGroupExtension> securityGroupExtension,\n-                                        Function<Set<? extends NodeMetadata>, Set<String>> findOrphanedGroups,\n-                                        GroupNamingConvention.Factory namingConvention,\n-                                        GoogleComputeEngineApi api,\n-                                        Predicate<AtomicReference<Operation>> operationDone) {\n+   @Inject\n+   GoogleComputeEngineService(ComputeServiceContext context, Map<String, Credentials> credentialStore,\n+         @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> hardwareProfiles,\n+         @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n+         GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n+         CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n+         DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy resumeNodeStrategy,\n+         SuspendNodeStrategy suspendNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n+         @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n+         @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n+         @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n+         @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n+         InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory, InitAdminAccess initAdminAccess,\n+         RunScriptOnNode.Factory runScriptOnNodeFactory, PersistNodeCredentials persistNodeCredentials,\n+         @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n+         Optional<ImageExtension> imageExtension, Optional<SecurityGroupExtension> securityGroupExtension,\n+         Function<Set<? extends NodeMetadata>, Set<String>> findOrphanedGroups,\n+         GroupNamingConvention.Factory namingConvention, GoogleComputeEngineApi api,\n+         Predicate<AtomicReference<Operation>> operationDone, DelegatingImageExtension.Factory delegatingImageExtension) {\n       super(context, credentialStore, images, hardwareProfiles, locations, listNodesStrategy, getImageStrategy,\n-              getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n-              resumeNodeStrategy, suspendNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n-              nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n-              persistNodeCredentials, timeouts, userExecutor, imageExtension, securityGroupExtension);\n+            getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n+            resumeNodeStrategy, suspendNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n+            nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n+            persistNodeCredentials, userExecutor, imageExtension, securityGroupExtension, delegatingImageExtension);\n       this.findOrphanedGroups = findOrphanedGroups;\n       this.namingConvention = namingConvention;\n       this.api = api;",
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/GoogleComputeEngineService.java",
                "sha": "1142b06a3c8cc0bfbf5268fd5a69134cedeee7f5",
                "status": "modified"
            }
        ],
        "message": "JCLOUDS-1421: Add default credentials to images created by the ImageExtension\n\nBy default, when listing images the ComputeServiceAdapter adds the\ndefault credentials for each image. This is not done when images are\ncreated by the image extension, and NPEs can appear in code that assumes\nthe default credentials are there, as the field is not nullable.\n\nThis change tries to populate the known node credentials for images\ncreated form nodes, and falls back to the default strategy to add the\ndefault credentials to an image if there are not known credentials.",
        "parent": "https://github.com/apache/jclouds/commit/29655f3149f151a834ed5a724e91e32994b28d89",
        "repo": "jclouds",
        "unit_tests": [
            "DelegatingImageExtensionTest.java"
        ]
    },
    "jclouds_d884978": {
        "bug_id": "jclouds_d884978",
        "commit": "https://github.com/apache/jclouds/commit/d884978a98262de0d52e92322611bdd2f7e2fe28",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/jclouds/blob/d884978a98262de0d52e92322611bdd2f7e2fe28/aws/core/src/main/java/org/jclouds/aws/s3/functions/ReturnTrueOn404OrNotFoundFalseIfNotEmpty.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/aws/core/src/main/java/org/jclouds/aws/s3/functions/ReturnTrueOn404OrNotFoundFalseIfNotEmpty.java?ref=d884978a98262de0d52e92322611bdd2f7e2fe28",
                "deletions": 20,
                "filename": "aws/core/src/main/java/org/jclouds/aws/s3/functions/ReturnTrueOn404OrNotFoundFalseIfNotEmpty.java",
                "patch": "@@ -18,6 +18,12 @@\n  */\n package org.jclouds.aws.s3.functions;\n \n+import static com.google.common.base.Predicates.equalTo;\n+import static com.google.common.base.Throwables.getCausalChain;\n+import static com.google.common.collect.Iterables.filter;\n+import static com.google.common.collect.Iterables.get;\n+import static com.google.common.collect.Iterables.size;\n+import static org.jclouds.http.HttpUtils.returnValueOnCodeOrNull;\n import static org.jclouds.util.Utils.propagateOrNull;\n \n import java.util.List;\n@@ -26,11 +32,8 @@\n \n import org.jclouds.aws.AWSResponseException;\n import org.jclouds.blobstore.ContainerNotFoundException;\n-import org.jclouds.http.HttpResponseException;\n \n import com.google.common.base.Function;\n-import com.google.common.base.Throwables;\n-import com.google.common.collect.Iterables;\n \n /**\n  * \n@@ -40,28 +43,21 @@\n public class ReturnTrueOn404OrNotFoundFalseIfNotEmpty implements Function<Exception, Boolean> {\n \n    public Boolean apply(Exception from) {\n-      List<Throwable> throwables = Throwables.getCausalChain(from);\n+      List<Throwable> throwables = getCausalChain(from);\n \n-      Iterable<AWSResponseException> matchingAWSResponseException = Iterables.filter(throwables,\n-               AWSResponseException.class);\n-      if (Iterables.size(matchingAWSResponseException) >= 1) {\n-         if (Iterables.get(matchingAWSResponseException, 0).getError().getCode().equals(\n-                  \"BucketNotEmpty\"))\n+      Iterable<AWSResponseException> matchingAWSResponseException = filter(throwables, AWSResponseException.class);\n+      if (size(matchingAWSResponseException) >= 1 && get(matchingAWSResponseException, 0).getError() != null) {\n+         if (get(matchingAWSResponseException, 0).getError().getCode().equals(\"BucketNotEmpty\"))\n             return false;\n       }\n-      \n-      Iterable<ContainerNotFoundException> matchingContainerNotFoundException = Iterables.filter(\n-               throwables, ContainerNotFoundException.class);\n-      if (Iterables.size(matchingContainerNotFoundException) >= 1) {\n-         return true;\n-      }\n \n-      Iterable<HttpResponseException> matchingHttpResponseException = Iterables.filter(throwables,\n-               HttpResponseException.class);\n-      if (Iterables.size(matchingHttpResponseException) >= 1) {\n-         if (Iterables.get(matchingHttpResponseException, 0).getResponse().getStatusCode() == 404)\n-            return true;\n+      Iterable<ContainerNotFoundException> matchingContainerNotFoundException = filter(throwables,\n+            ContainerNotFoundException.class);\n+      if (size(matchingContainerNotFoundException) >= 1) {\n+         return true;\n       }\n+      if (returnValueOnCodeOrNull(from, true, equalTo(404)) != null)\n+         return true;\n \n       return Boolean.class.cast(propagateOrNull(from));\n    }",
                "raw_url": "https://github.com/apache/jclouds/raw/d884978a98262de0d52e92322611bdd2f7e2fe28/aws/core/src/main/java/org/jclouds/aws/s3/functions/ReturnTrueOn404OrNotFoundFalseIfNotEmpty.java",
                "sha": "3a8ab0d400c22e93102d2dbc8cbfe02a1078a1a5",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/jclouds/blob/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/main/java/org/jclouds/http/HttpUtils.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/http/HttpUtils.java?ref=d884978a98262de0d52e92322611bdd2f7e2fe28",
                "deletions": 0,
                "filename": "core/src/main/java/org/jclouds/http/HttpUtils.java",
                "patch": "@@ -20,8 +20,12 @@\n \n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Throwables.getCausalChain;\n import static com.google.common.base.Throwables.propagate;\n import static com.google.common.collect.Iterables.any;\n+import static com.google.common.collect.Iterables.filter;\n+import static com.google.common.collect.Iterables.get;\n+import static com.google.common.collect.Iterables.size;\n import static com.google.common.collect.Lists.newArrayList;\n import static com.google.common.collect.Sets.newTreeSet;\n import static com.google.common.io.ByteStreams.toByteArray;\n@@ -562,4 +566,13 @@ public static void wirePayloadIfEnabled(Wire wire, HttpRequest request) {\n                \"After wiring, the request has neither chunked encoding nor content length: \" + request);\n       }\n    }\n+\n+   public static <T> T returnValueOnCodeOrNull(Exception from, T value, Predicate<Integer> codePredicate) {\n+      Iterable<HttpResponseException> throwables = filter(getCausalChain(from), HttpResponseException.class);\n+      if (size(throwables) >= 1 && get(throwables, 0).getResponse() != null\n+            && codePredicate.apply(get(throwables, 0).getResponse().getStatusCode())) {\n+         return value;\n+      }\n+      return null;\n+   }\n }",
                "raw_url": "https://github.com/apache/jclouds/raw/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/main/java/org/jclouds/http/HttpUtils.java",
                "sha": "11b1e376cb80babfed48061bf990f23492dac44f",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jclouds/blob/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/main/java/org/jclouds/http/functions/ReturnFalseOn404.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/http/functions/ReturnFalseOn404.java?ref=d884978a98262de0d52e92322611bdd2f7e2fe28",
                "deletions": 9,
                "filename": "core/src/main/java/org/jclouds/http/functions/ReturnFalseOn404.java",
                "patch": "@@ -18,12 +18,12 @@\n  */\n package org.jclouds.http.functions;\n \n+import static com.google.common.base.Predicates.equalTo;\n+import static org.jclouds.http.HttpUtils.returnValueOnCodeOrNull;\n import static org.jclouds.util.Utils.propagateOrNull;\n \n import javax.inject.Singleton;\n \n-import org.jclouds.http.HttpResponseException;\n-\n import com.google.common.base.Function;\n \n /**\n@@ -34,13 +34,8 @@\n public class ReturnFalseOn404 implements Function<Exception, Boolean> {\n \n    public Boolean apply(Exception from) {\n-      if (from instanceof HttpResponseException) {\n-         HttpResponseException responseException = (HttpResponseException) from;\n-         if (responseException.getResponse().getStatusCode() == 404) {\n-            return false;\n-         }\n-      }\n-      return Boolean.class.cast(propagateOrNull(from));\n+      Boolean returnVal = returnValueOnCodeOrNull(from, false, equalTo(404));\n+      return returnVal != null ? returnVal : Boolean.class.cast(propagateOrNull(from));\n    }\n \n }",
                "raw_url": "https://github.com/apache/jclouds/raw/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/main/java/org/jclouds/http/functions/ReturnFalseOn404.java",
                "sha": "dcc8e1a854ff593a6ddb702cb3bd1f8e40f80081",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jclouds/blob/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/main/java/org/jclouds/http/functions/ReturnTrueOn404.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/http/functions/ReturnTrueOn404.java?ref=d884978a98262de0d52e92322611bdd2f7e2fe28",
                "deletions": 11,
                "filename": "core/src/main/java/org/jclouds/http/functions/ReturnTrueOn404.java",
                "patch": "@@ -18,27 +18,20 @@\n  */\n package org.jclouds.http.functions;\n \n+import static com.google.common.base.Predicates.equalTo;\n+import static org.jclouds.http.HttpUtils.returnValueOnCodeOrNull;\n import static org.jclouds.util.Utils.propagateOrNull;\n \n import javax.inject.Singleton;\n \n-import org.jclouds.http.HttpResponseException;\n-\n import com.google.common.base.Function;\n-import com.google.common.base.Throwables;\n-import com.google.common.collect.Iterables;\n \n @Singleton\n public class ReturnTrueOn404 implements Function<Exception, Boolean> {\n \n    public Boolean apply(Exception from) {\n-      Iterable<HttpResponseException> throwables = Iterables.filter(\n-               Throwables.getCausalChain(from), HttpResponseException.class);\n-      if (Iterables.size(throwables) >= 1\n-               && Iterables.get(throwables, 0).getResponse().getStatusCode() == 404) {\n-         return true;\n-      }\n-      return Boolean.class.cast(propagateOrNull(from));\n+      Boolean returnVal = returnValueOnCodeOrNull(from, true, equalTo(404));\n+      return returnVal != null ? returnVal : Boolean.class.cast(propagateOrNull(from));\n    }\n \n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/jclouds/raw/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/main/java/org/jclouds/http/functions/ReturnTrueOn404.java",
                "sha": "7a38204612ac74ed9af5a66fdc1f191930e00636",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/jclouds/blob/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/main/java/org/jclouds/rest/RestContextBuilder.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/rest/RestContextBuilder.java?ref=d884978a98262de0d52e92322611bdd2f7e2fe28",
                "deletions": 24,
                "filename": "core/src/main/java/org/jclouds/rest/RestContextBuilder.java",
                "patch": "@@ -67,14 +67,17 @@\n import com.google.inject.util.Types;\n \n /**\n- * Creates {@link RestContext} or {@link Injector} instances based on the most commonly requested\n- * arguments.\n+ * Creates {@link RestContext} or {@link Injector} instances based on the most\n+ * commonly requested arguments.\n  * <p/>\n- * Note that Threadsafe objects will be bound as singletons to the Injector or Context provided.\n+ * Note that Threadsafe objects will be bound as singletons to the Injector or\n+ * Context provided.\n  * <p/>\n  * <p/>\n- * If no <code>Module</code>s are specified, the default {@link JDKLoggingModule logging} and\n- * {@link JavaUrlHttpCommandExecutorServiceModule http transports} will be installed.\n+ * If no <code>Module</code>s are specified, the default\n+ * {@link JDKLoggingModule logging} and\n+ * {@link JavaUrlHttpCommandExecutorServiceModule http transports} will be\n+ * installed.\n  * \n  * @author Adrian Cole, Andrew Newdigate\n  * @see RestContext\n@@ -95,22 +98,18 @@ protected void configure() {\n          toBind.putAll(System.getProperties());\n          Names.bindProperties(binder(), toBind);\n          bind(String.class).annotatedWith(Provider.class).toInstance(\n-                  checkNotNull(toBind.getProperty(PROPERTY_PROVIDER), PROPERTY_PROVIDER));\n+               checkNotNull(toBind.getProperty(PROPERTY_PROVIDER), PROPERTY_PROVIDER));\n          bind(URI.class).annotatedWith(Provider.class).toInstance(\n-                  URI.create(checkNotNull(toBind.getProperty(PROPERTY_ENDPOINT),\n-                           PROPERTY_ENDPOINT)));\n+               URI.create(checkNotNull(toBind.getProperty(PROPERTY_ENDPOINT), PROPERTY_ENDPOINT)));\n          if (toBind.containsKey(PROPERTY_API))\n-            bind(String.class).annotatedWith(Api.class).toInstance(\n-                     toBind.getProperty(PROPERTY_API));\n+            bind(String.class).annotatedWith(Api.class).toInstance(toBind.getProperty(PROPERTY_API));\n          if (toBind.containsKey(PROPERTY_API_VERSION))\n-            bind(String.class).annotatedWith(ApiVersion.class).toInstance(\n-                     toBind.getProperty(PROPERTY_API_VERSION));\n+            bind(String.class).annotatedWith(ApiVersion.class).toInstance(toBind.getProperty(PROPERTY_API_VERSION));\n          if (toBind.containsKey(PROPERTY_IDENTITY))\n             bind(String.class).annotatedWith(Identity.class).toInstance(\n-                     checkNotNull(toBind.getProperty(PROPERTY_IDENTITY), PROPERTY_IDENTITY));\n+                  checkNotNull(toBind.getProperty(PROPERTY_IDENTITY), PROPERTY_IDENTITY));\n          if (toBind.containsKey(PROPERTY_CREDENTIAL))\n-            bind(String.class).annotatedWith(Credential.class).toInstance(\n-                     toBind.getProperty(PROPERTY_CREDENTIAL));\n+            bind(String.class).annotatedWith(Credential.class).toInstance(toBind.getProperty(PROPERTY_CREDENTIAL));\n       }\n    }\n \n@@ -120,8 +119,7 @@ protected void configure() {\n    protected Class<S> syncClientType;\n \n    @Inject\n-   public RestContextBuilder(Class<S> syncClientClass, Class<A> asyncClientClass,\n-            Properties properties) {\n+   public RestContextBuilder(Class<S> syncClientClass, Class<A> asyncClientClass, Properties properties) {\n       this.asyncClientType = checkNotNull(asyncClientClass, \"asyncClientType\");\n       this.syncClientType = checkNotNull(syncClientClass, \"syncClientType\");\n       this.properties = checkNotNull(properties, \"properties\");\n@@ -184,10 +182,10 @@ protected void addContextModule(List<Module> modules) {\n          @Override\n          protected void configure() {\n             bind(\n-                     (TypeLiteral) TypeLiteral.get(Types.newParameterizedType(RestContext.class,\n-                              syncClientType, asyncClientType))).to(\n-                     TypeLiteral.get(Types.newParameterizedType(RestContextImpl.class,\n-                              syncClientType, asyncClientType))).in(Scopes.SINGLETON);\n+                  (TypeLiteral) TypeLiteral.get(Types.newParameterizedType(RestContext.class, syncClientType,\n+                        asyncClientType))).to(\n+                  TypeLiteral.get(Types.newParameterizedType(RestContextImpl.class, syncClientType, asyncClientType)))\n+                  .in(Scopes.SINGLETON);\n \n          }\n \n@@ -260,9 +258,9 @@ public Properties getProperties() {\n    }\n \n    @SuppressWarnings(\"unchecked\")\n-   public RestContext<S, A> buildContext() {\n+   public <T extends RestContext<S, A>> T buildContext() {\n       Injector injector = buildInjector();\n-      return (RestContext<S, A>) injector.getInstance(Key.get(Types.newParameterizedType(\n-               RestContext.class, syncClientType, asyncClientType)));\n+      return (T) injector.getInstance(Key.get(Types.newParameterizedType(RestContext.class, syncClientType,\n+            asyncClientType)));\n    }\n }",
                "raw_url": "https://github.com/apache/jclouds/raw/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/main/java/org/jclouds/rest/RestContextBuilder.java",
                "sha": "d90806b7ef601b7aaa15522a5620ad7d221bae35",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jclouds/blob/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/main/java/org/jclouds/rest/internal/RestContextImpl.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/rest/internal/RestContextImpl.java?ref=d884978a98262de0d52e92322611bdd2f7e2fe28",
                "deletions": 6,
                "filename": "core/src/main/java/org/jclouds/rest/internal/RestContextImpl.java",
                "patch": "@@ -27,10 +27,10 @@\n import org.jclouds.lifecycle.Closer;\n import org.jclouds.logging.Logger;\n import org.jclouds.rest.RestContext;\n+import org.jclouds.rest.Utils;\n import org.jclouds.rest.annotations.ApiVersion;\n import org.jclouds.rest.annotations.Identity;\n import org.jclouds.rest.annotations.Provider;\n-import org.jclouds.rest.Utils;\n \n import com.google.inject.Injector;\n import com.google.inject.Key;\n@@ -55,9 +55,9 @@\n    private final Utils utils;\n \n    @Inject\n-   RestContextImpl(Closer closer, Utils utils, Injector injector, TypeLiteral<S> syncApi,\n-            TypeLiteral<A> asyncApi, @Provider URI endpoint, @Provider String provider,\n-            @Identity String identity, @ApiVersion String apiVersion) {\n+   protected RestContextImpl(Closer closer, Utils utils, Injector injector, TypeLiteral<S> syncApi,\n+         TypeLiteral<A> asyncApi, @Provider URI endpoint, @Provider String provider, @Identity String identity,\n+         @ApiVersion String apiVersion) {\n       this.utils = utils;\n       this.asyncApi = injector.getInstance(Key.get(asyncApi));\n       this.syncApi = injector.getInstance(Key.get(syncApi));\n@@ -168,7 +168,7 @@ public boolean equals(Object obj) {\n \n    @Override\n    public String toString() {\n-      return \"RestContextImpl [provider=\" + provider + \", endpoint=\" + endpoint + \", apiVersion=\"\n-               + apiVersion + \", identity=\" + identity + \"]\";\n+      return \"RestContextImpl [provider=\" + provider + \", endpoint=\" + endpoint + \", apiVersion=\" + apiVersion\n+            + \", identity=\" + identity + \"]\";\n    }\n }",
                "raw_url": "https://github.com/apache/jclouds/raw/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/main/java/org/jclouds/rest/internal/RestContextImpl.java",
                "sha": "89dbd58da30f0652a90c10d6102832fed3b17db5",
                "status": "modified"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/jclouds/blob/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/test/java/org/jclouds/util/HttpUtilsTest.java",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/test/java/org/jclouds/util/HttpUtilsTest.java?ref=d884978a98262de0d52e92322611bdd2f7e2fe28",
                "deletions": 26,
                "filename": "core/src/test/java/org/jclouds/util/HttpUtilsTest.java",
                "patch": "@@ -18,11 +18,13 @@\n  */\n package org.jclouds.util;\n \n+import static com.google.common.base.Predicates.equalTo;\n import static org.easymock.EasyMock.expect;\n import static org.easymock.classextension.EasyMock.createMock;\n import static org.easymock.classextension.EasyMock.replay;\n import static org.jclouds.http.HttpUtils.changeSchemeHostAndPortTo;\n import static org.jclouds.http.HttpUtils.parseQueryToMap;\n+import static org.jclouds.http.HttpUtils.returnValueOnCodeOrNull;\n import static org.testng.Assert.assertEquals;\n \n import java.net.URI;\n@@ -35,6 +37,8 @@\n import org.jboss.resteasy.specimpl.UriBuilderImpl;\n import org.jclouds.PerformanceTest;\n import org.jclouds.http.HttpRequest;\n+import org.jclouds.http.HttpResponse;\n+import org.jclouds.http.HttpResponseException;\n import org.jclouds.http.HttpUtils;\n import org.testng.annotations.Test;\n \n@@ -67,8 +71,8 @@ public void testParseBase64InForm() {\n       expects.put(\"Value\", \"dGVzdA==\");\n       expects.put(\"InstanceId\", \"1\");\n       assertEquals(\n-               expects,\n-               parseQueryToMap(\"Version=2010-06-15&Action=ModifyInstanceAttribute&Attribute=userData&Value=dGVzdA%3D%3D&InstanceId=1\"));\n+            expects,\n+            parseQueryToMap(\"Version=2010-06-15&Action=ModifyInstanceAttribute&Attribute=userData&Value=dGVzdA%3D%3D&InstanceId=1\"));\n    }\n \n    @Test\n@@ -77,24 +81,21 @@ public void testParseQueryToMapSingleParam() {\n       assert parsedMap.keySet().size() == 1 : \"Expected 1 key, found: \" + parsedMap.keySet().size();\n       assert parsedMap.keySet().contains(\"v\") : \"Expected v to be a part of the keys\";\n       String valueForV = Iterables.getOnlyElement(parsedMap.get(\"v\"));\n-      assert valueForV.equals(\"1.3\") : \"Expected the value for 'v' to be '1.3', found: \"\n-               + valueForV;\n+      assert valueForV.equals(\"1.3\") : \"Expected the value for 'v' to be '1.3', found: \" + valueForV;\n    }\n \n    @Test\n    public void testParseQueryToMapMultiParam() {\n       Multimap<String, String> parsedMap = parseQueryToMap(\"v=1.3&sig=123\");\n-      assert parsedMap.keySet().size() == 2 : \"Expected 2 keys, found: \"\n-               + parsedMap.keySet().size();\n+      assert parsedMap.keySet().size() == 2 : \"Expected 2 keys, found: \" + parsedMap.keySet().size();\n       assert parsedMap.keySet().contains(\"v\") : \"Expected v to be a part of the keys\";\n       assert parsedMap.keySet().contains(\"sig\") : \"Expected sig to be a part of the keys\";\n       String valueForV = Iterables.getOnlyElement(parsedMap.get(\"v\"));\n-      assert valueForV.equals(\"1.3\") : \"Expected the value for 'v' to be '1.3', found: \"\n-               + valueForV;\n+      assert valueForV.equals(\"1.3\") : \"Expected the value for 'v' to be '1.3', found: \" + valueForV;\n       String valueForSig = Iterables.getOnlyElement(parsedMap.get(\"sig\"));\n-      assert valueForSig.equals(\"123\") : \"Expected the value for 'v' to be '123', found: \"\n-               + valueForSig;\n+      assert valueForSig.equals(\"123\") : \"Expected the value for 'v' to be '123', found: \" + valueForSig;\n    }\n+\n    @Test\n    public void testChangeSchemeHostAndPortTo() {\n       HttpRequest request = createMock(HttpRequest.class);\n@@ -114,28 +115,24 @@ public void testIsEncoded() {\n \n    public void testNoDoubleEncode() {\n       assertEquals(HttpUtils.urlEncode(\"/read-tests/%73%6f%6d%65%20%66%69%6c%65\", '/'),\n-               \"/read-tests/%73%6f%6d%65%20%66%69%6c%65\");\n+            \"/read-tests/%73%6f%6d%65%20%66%69%6c%65\");\n       assertEquals(HttpUtils.urlEncode(\"/read-tests/ tep\", '/'), \"/read-tests/%20tep\");\n    }\n \n    public void testIBM() {\n       URI ibm = HttpUtils\n-               .createUri(\"https://www-180.ibm.com/cloud/enterprise/beta/ram/assetDetail/generalDetails.faces?guid={A31FF849-0E97-431A-0324-097385A46298}&v=1.2\");\n+            .createUri(\"https://www-180.ibm.com/cloud/enterprise/beta/ram/assetDetail/generalDetails.faces?guid={A31FF849-0E97-431A-0324-097385A46298}&v=1.2\");\n       assertEquals(ibm.getQuery(), \"guid={A31FF849-0E97-431A-0324-097385A46298}&v=1.2\");\n    }\n \n    public void testAtmos() {\n-      URI creds = HttpUtils\n-               .createUri(\"compute://domain/user:Base64==@azureblob/container-hyphen/prefix\");\n-      assertEquals(creds, URI\n-               .create(\"compute://domain%2Fuser:Base64%3D%3D@azureblob/container-hyphen/prefix\"));\n+      URI creds = HttpUtils.createUri(\"compute://domain/user:Base64==@azureblob/container-hyphen/prefix\");\n+      assertEquals(creds, URI.create(\"compute://domain%2Fuser:Base64%3D%3D@azureblob/container-hyphen/prefix\"));\n    }\n \n    public void testAzure() {\n-      URI creds = HttpUtils\n-               .createUri(\"compute://identity:Base64==@azureblob/container-hyphen/prefix\");\n-      assertEquals(creds, URI\n-               .create(\"compute://identity:Base64==@azureblob/container-hyphen/prefix\"));\n+      URI creds = HttpUtils.createUri(\"compute://identity:Base64==@azureblob/container-hyphen/prefix\");\n+      assertEquals(creds, URI.create(\"compute://identity:Base64==@azureblob/container-hyphen/prefix\"));\n    }\n \n    public void testHosting() {\n@@ -181,13 +178,18 @@ public void testS3Space() {\n    }\n \n    public void testPercent() {\n-      URI creds = HttpUtils\n-               .createUri(\"https://jclouds.blob.core.windows.net/jclouds-getpath/write-tests/file1%.txt\");\n+      URI creds = HttpUtils.createUri(\"https://jclouds.blob.core.windows.net/jclouds-getpath/write-tests/file1%.txt\");\n \n-      assertEquals(\n-               creds,\n-               URI\n-                        .create(\"https://jclouds.blob.core.windows.net/jclouds-getpath/write-tests/file1%25.txt\"));\n+      assertEquals(creds, URI.create(\"https://jclouds.blob.core.windows.net/jclouds-getpath/write-tests/file1%25.txt\"));\n \n    }\n+\n+   public void test404() {\n+      Exception from = new HttpResponseException(\"message\", null, new HttpResponse(404, \"not found\", null));\n+      assertEquals(returnValueOnCodeOrNull(from, true, equalTo(404)), Boolean.TRUE);\n+   }\n+   public void testNullResponse() {\n+      Exception from = new HttpResponseException(\"message\", null, null);\n+      assertEquals(returnValueOnCodeOrNull(from, true, equalTo(404)), null);\n+   }\n }",
                "raw_url": "https://github.com/apache/jclouds/raw/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/test/java/org/jclouds/util/HttpUtilsTest.java",
                "sha": "0d6225f9b8faddef992520c5733457a1af9232ba",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/jclouds/blob/d884978a98262de0d52e92322611bdd2f7e2fe28/rackspace/src/main/java/org/jclouds/rackspace/cloudfiles/functions/ReturnTrueOn404FalseOn409.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/rackspace/src/main/java/org/jclouds/rackspace/cloudfiles/functions/ReturnTrueOn404FalseOn409.java?ref=d884978a98262de0d52e92322611bdd2f7e2fe28",
                "deletions": 10,
                "filename": "rackspace/src/main/java/org/jclouds/rackspace/cloudfiles/functions/ReturnTrueOn404FalseOn409.java",
                "patch": "@@ -18,23 +18,20 @@\n  */\n package org.jclouds.rackspace.cloudfiles.functions;\n \n+import static com.google.common.base.Predicates.in;\n+import static com.google.common.collect.ImmutableSet.of;\n+import static org.jclouds.http.HttpUtils.returnValueOnCodeOrNull;\n import static org.jclouds.util.Utils.propagateOrNull;\n \n-import org.jclouds.http.HttpResponseException;\n+import javax.inject.Singleton;\n \n import com.google.common.base.Function;\n \n+@Singleton\n public class ReturnTrueOn404FalseOn409 implements Function<Exception, Boolean> {\n \n    public Boolean apply(Exception from) {\n-      if (from instanceof HttpResponseException) {\n-         HttpResponseException responseException = (HttpResponseException) from;\n-         if (responseException.getResponse().getStatusCode() == 404) {\n-            return true;\n-         } else if (responseException.getResponse().getStatusCode() == 409) {\n-            return false;\n-         }\n-      }\n-      return Boolean.class.cast(propagateOrNull(from));\n+      Boolean returnVal = returnValueOnCodeOrNull(from, true, in(of(404, 409)));\n+      return returnVal != null ? returnVal : Boolean.class.cast(propagateOrNull(from));\n    }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/jclouds/raw/d884978a98262de0d52e92322611bdd2f7e2fe28/rackspace/src/main/java/org/jclouds/rackspace/cloudfiles/functions/ReturnTrueOn404FalseOn409.java",
                "sha": "9a354638672712d3875c93f92cf316477c74c5e0",
                "status": "modified"
            }
        ],
        "message": "fixed NPE when httpresponseexception is caused by an io exception",
        "parent": "https://github.com/apache/jclouds/commit/a168683851f57d2c47667038ea8b1d5021839738",
        "repo": "jclouds",
        "unit_tests": [
            "HttpUtilsTest.java"
        ]
    },
    "jclouds_efb3dd5": {
        "bug_id": "jclouds_efb3dd5",
        "commit": "https://github.com/apache/jclouds/commit/efb3dd53d0487dd10c7ebfb9ba451c8fb4c6a64a",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jclouds/blob/efb3dd53d0487dd10c7ebfb9ba451c8fb4c6a64a/providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/functions/VirtualMachineToNodeMetadata.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/functions/VirtualMachineToNodeMetadata.java?ref=efb3dd53d0487dd10c7ebfb9ba451c8fb4c6a64a",
                "deletions": 2,
                "filename": "providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/functions/VirtualMachineToNodeMetadata.java",
                "patch": "@@ -41,6 +41,7 @@\n import org.jclouds.azurecompute.arm.domain.IdReference;\n import org.jclouds.azurecompute.arm.domain.IpConfiguration;\n import org.jclouds.azurecompute.arm.domain.NetworkInterfaceCard;\n+import org.jclouds.azurecompute.arm.domain.PublicIPAddress;\n import org.jclouds.azurecompute.arm.domain.RegionAndId;\n import org.jclouds.azurecompute.arm.domain.ResourceGroup;\n import org.jclouds.azurecompute.arm.domain.StorageProfile;\n@@ -247,8 +248,10 @@ private NetworkInterfaceCard getNetworkInterfaceCard(IdReference networkInterfac\n             for (IpConfiguration ipConfiguration : networkInterfaceCard.properties().ipConfigurations()) {\n                if (ipConfiguration.properties().publicIPAddress() != null) {\n                   String publicIpId = ipConfiguration.properties().publicIPAddress().id();\n-                  publicIpAddresses.add(api.getPublicIPAddressApi(resourceGroup)\n-                        .get(Iterables.getLast(Splitter.on(\"/\").split(publicIpId))).properties().ipAddress());\n+                  PublicIPAddress publicIp = api.getPublicIPAddressApi(resourceGroup).get(Iterables.getLast(Splitter.on(\"/\").split(publicIpId)));\n+                  if (publicIp != null && publicIp.properties().ipAddress() != null) {\n+                     publicIpAddresses.add(publicIp.properties().ipAddress());\n+                  }\n                }\n             }\n          }",
                "raw_url": "https://github.com/apache/jclouds/raw/efb3dd53d0487dd10c7ebfb9ba451c8fb4c6a64a/providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/functions/VirtualMachineToNodeMetadata.java",
                "sha": "6b7ef3008c891b611454985a51cc8cca21d9e8aa",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in ARM VirtualMachineToNodeMetadata",
        "parent": "https://github.com/apache/jclouds/commit/dd9bbff45200dd6f030c336e0e439754305cea41",
        "repo": "jclouds",
        "unit_tests": [
            "VirtualMachineToNodeMetadataTest.java"
        ]
    }
}