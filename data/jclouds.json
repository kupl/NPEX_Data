{
    "jclouds_0676300": {
        "bug_id": "jclouds_0676300",
        "commit": "https://github.com/apache/jclouds/commit/0676300841773f9ca763be52714061268ce0f3f8",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/jclouds/blob/0676300841773f9ca763be52714061268ce0f3f8/compute/src/main/java/org/jclouds/compute/domain/internal/TemplateBuilderImpl.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/main/java/org/jclouds/compute/domain/internal/TemplateBuilderImpl.java?ref=0676300841773f9ca763be52714061268ce0f3f8",
                "deletions": 7,
                "filename": "compute/src/main/java/org/jclouds/compute/domain/internal/TemplateBuilderImpl.java",
                "patch": "@@ -139,17 +139,20 @@ protected TemplateBuilderImpl(@Memoized Supplier<Set<? extends Location>> locati\n     * \n     * If the input location is null, then the data isn't location sensitive\n     * \n-    * If the input location is a parent of the specified location, then we are ok.\n+    * If the input location is a child (descendent, recursively) of the specified location, then we are ok.\n     */\n    final Predicate<ComputeMetadata> locationPredicate = new Predicate<ComputeMetadata>() {\n       @Override\n       public boolean apply(ComputeMetadata input) {\n-         boolean returnVal = true;\n-         if (location != null && input.getLocation() != null)\n-            returnVal = location.equals(input.getLocation()) || location.getParent() != null\n-                  && location.getParent().equals(input.getLocation()) || location.getParent().getParent() != null\n-                  && location.getParent().getParent().equals(input.getLocation());\n-         return returnVal;\n+         if (location == null) return true;\n+         Location inputLocation = input.getLocation();\n+         if (inputLocation == null) return true;\n+         while (inputLocation!=null) {\n+            if (location.equals(inputLocation))\n+               return true;\n+            inputLocation = inputLocation.getParent();\n+         }\n+         return false;\n       }\n \n       @Override",
                "raw_url": "https://github.com/apache/jclouds/raw/0676300841773f9ca763be52714061268ce0f3f8/compute/src/main/java/org/jclouds/compute/domain/internal/TemplateBuilderImpl.java",
                "sha": "ae483158dd234bac84578a78541c5184727b253c",
                "status": "modified"
            }
        ],
        "message": "fixes in location containment predicate.\nthe grouping of and's and or's was wrong, causing an NPE in cloudstack tests when investigating parents;\nthe direction of containment (input should be descendent of location) was wrong also, i think,\nto judge by the description \"locationEqualsOrChildOf\";\ncode is now a loop rather than fixed investigation of 3 levels",
        "parent": "https://github.com/apache/jclouds/commit/2523d74ad1e98a1bb24839668d8d325e1516e726",
        "repo": "jclouds",
        "unit_tests": [
            "TemplateBuilderImplTest.java"
        ]
    },
    "jclouds_2c82ab2": {
        "bug_id": "jclouds_2c82ab2",
        "commit": "https://github.com/apache/jclouds/commit/2c82ab283207776c1127a78f7f6eb392a50f832f",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jclouds/blob/2c82ab283207776c1127a78f7f6eb392a50f832f/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java?ref=2c82ab283207776c1127a78f7f6eb392a50f832f",
                "deletions": 5,
                "filename": "apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java",
                "patch": "@@ -133,9 +133,10 @@ public int hashCode() {\n    }\n \n    protected ToStringHelper string() {\n-      return toStringHelper(\"\").add(\"keyName\", \"keyName\").add(\"securityGroupNames\", securityGroupNames)\n+      return toStringHelper(\"\").add(\"keyName\", keyName).add(\"securityGroupNames\", securityGroupNames)\n               .add(\"metadata\", metadata).add(\"personality\", personality)\n-              .add(\"adminPassPresent\", adminPass != null).add(\"userData\", new String(userData));\n+              .add(\"adminPassPresent\", adminPass != null)\n+              .add(\"userData\", userData == null ? null : new String(userData));\n    }\n \n    @Override\n@@ -258,9 +259,6 @@ public CreateServerOptions userData(byte[] userData) {\n    /**\n     * A keypair name can be defined when creating a server. This key will be\n     * linked to the server and used to SSH connect to the machine\n-    * \n-    * @param keyName\n-    * @return\n     */\n    public String getKeyPairName() {\n       return keyName;",
                "raw_url": "https://github.com/apache/jclouds/raw/2c82ab283207776c1127a78f7f6eb392a50f832f/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java",
                "sha": "ae36ea1455d5684904d2b3cb7ab5b1983a573cd8",
                "status": "modified"
            }
        ],
        "message": "openstack-nova: fixing NPE in toString()",
        "parent": "https://github.com/apache/jclouds/commit/404dc9314012425f0b04569d14b50c43e37a9e85",
        "repo": "jclouds",
        "unit_tests": [
            "CreateServerOptionsTest.java"
        ]
    },
    "jclouds_43f12fa": {
        "bug_id": "jclouds_43f12fa",
        "commit": "https://github.com/apache/jclouds/commit/43f12fa6277db8c18fee65b70289ec63bef6ce62",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jclouds/blob/43f12fa6277db8c18fee65b70289ec63bef6ce62/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java?ref=43f12fa6277db8c18fee65b70289ec63bef6ce62",
                "deletions": 3,
                "filename": "core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "patch": "@@ -1294,14 +1294,16 @@ else if (args[i] instanceof PayloadEnclosing)\n          for (Annotation key : entry.getValue()) {\n             Set<Annotation> extractors = indexToParamExtractor.get(entry.getKey());\n             String paramKey = ((QueryParam) key).value();\n-            String paramValue;\n+            Object paramValue;\n             if (extractors != null && extractors.size() > 0) {\n                ParamParser extractor = (ParamParser) extractors.iterator().next();\n                paramValue = injector.getInstance(extractor.value()).apply(args[entry.getKey()]);\n             } else {\n-               paramValue = args[entry.getKey()].toString();\n+               paramValue = args[entry.getKey()];\n+            }\n+            if (paramValue != null) {\n+                queryParamValues.put(paramKey, paramValue.toString());\n             }\n-            queryParamValues.put(paramKey, paramValue);\n          }\n       }\n ",
                "raw_url": "https://github.com/apache/jclouds/raw/43f12fa6277db8c18fee65b70289ec63bef6ce62/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "sha": "e29dede0ebb0f0ee12a6194a26a040a67cf2e0ea",
                "status": "modified"
            }
        ],
        "message": "prevent NPE when null is passed to @QueryParam annotated argument",
        "parent": "https://github.com/apache/jclouds/commit/90df3a1e51c0e4b40740c8dc4f94ef5491644932",
        "repo": "jclouds",
        "unit_tests": [
            "RestAnnotationProcessorTest.java"
        ]
    },
    "jclouds_6cdad28": {
        "bug_id": "jclouds_6cdad28",
        "commit": "https://github.com/apache/jclouds/commit/6cdad28359d9ccc32c83de12f00f309b92e39489",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jclouds/blob/6cdad28359d9ccc32c83de12f00f309b92e39489/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java?ref=6cdad28359d9ccc32c83de12f00f309b92e39489",
                "deletions": 3,
                "filename": "core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "patch": "@@ -1294,14 +1294,16 @@ else if (args[i] instanceof PayloadEnclosing)\n          for (Annotation key : entry.getValue()) {\n             Set<Annotation> extractors = indexToParamExtractor.get(entry.getKey());\n             String paramKey = ((QueryParam) key).value();\n-            String paramValue;\n+            Object paramValue;\n             if (extractors != null && extractors.size() > 0) {\n                ParamParser extractor = (ParamParser) extractors.iterator().next();\n                paramValue = injector.getInstance(extractor.value()).apply(args[entry.getKey()]);\n             } else {\n-               paramValue = args[entry.getKey()].toString();\n+               paramValue = args[entry.getKey()];\n+            }\n+            if (paramValue != null) {\n+                queryParamValues.put(paramKey, paramValue.toString());\n             }\n-            queryParamValues.put(paramKey, paramValue);\n          }\n       }\n ",
                "raw_url": "https://github.com/apache/jclouds/raw/6cdad28359d9ccc32c83de12f00f309b92e39489/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "sha": "e29dede0ebb0f0ee12a6194a26a040a67cf2e0ea",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #704 from dkoper/master\n\ntested NPE goes away with FGCP expect test",
        "parent": "https://github.com/apache/jclouds/commit/c47950c9abb6c8e60d22f61ad371cfa24a1a4b79",
        "repo": "jclouds",
        "unit_tests": [
            "RestAnnotationProcessorTest.java"
        ]
    },
    "jclouds_7aed4bc": {
        "bug_id": "jclouds_7aed4bc",
        "commit": "https://github.com/apache/jclouds/commit/7aed4bc88ccd4748c46bb0fa144ff9185a559e94",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jclouds/blob/7aed4bc88ccd4748c46bb0fa144ff9185a559e94/providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/loaders/DiskURIToImage.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/loaders/DiskURIToImage.java?ref=7aed4bc88ccd4748c46bb0fa144ff9185a559e94",
                "deletions": 2,
                "filename": "providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/loaders/DiskURIToImage.java",
                "patch": "@@ -45,9 +45,11 @@\n    @Override\n    public Optional<Image> load(URI key) throws ExecutionException {\n       try {\n+         Image image = null;\n          Disk disk = resources.disk(key);\n-         URI sourceImage = disk.sourceImage();\n-         Image image = sourceImage != null ? resources.image(sourceImage) : null;\n+         if (disk != null && disk.sourceImage() != null) {\n+            image = resources.image(disk.sourceImage());\n+         }\n          return Optional.fromNullable(image);\n       } catch (Exception e) {\n          throw new ExecutionException(message(key, e), e);",
                "raw_url": "https://github.com/apache/jclouds/raw/7aed4bc88ccd4748c46bb0fa144ff9185a559e94/providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/loaders/DiskURIToImage.java",
                "sha": "470cd9eb7ccb5c61f633b07fb5c6a2a2a5eb09ca",
                "status": "modified"
            }
        ],
        "message": "JCLOUDS-1381: Fix NPE in GCE DiskURIToImage",
        "parent": "https://github.com/apache/jclouds/commit/50ae6828f52cebe4dffab518c4d5053d93b2a494",
        "repo": "jclouds",
        "unit_tests": [
            "DiskURIToImageTest.java"
        ]
    },
    "jclouds_8508c37": {
        "bug_id": "jclouds_8508c37",
        "commit": "https://github.com/apache/jclouds/commit/8508c37a3b59d38cdcc44eb1c117f830895ab03c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jclouds/blob/8508c37a3b59d38cdcc44eb1c117f830895ab03c/core/src/main/java/org/jclouds/http/commands/callables/xml/ParseSax.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/http/commands/callables/xml/ParseSax.java?ref=8508c37a3b59d38cdcc44eb1c117f830895ab03c",
                "deletions": 1,
                "filename": "core/src/main/java/org/jclouds/http/commands/callables/xml/ParseSax.java",
                "patch": "@@ -100,7 +100,8 @@ private void parseAndCloseStream(InputStream xml, ContentHandler handler) throws\n             message.append(\"\\n\").append(response);\n          }\n          logger.error(e, message.toString());\n-         Utils.<HttpException> rethrowIfRuntimeOrSameType(e);\n+         if (!(e instanceof NullPointerException))\n+            Utils.<HttpException> rethrowIfRuntimeOrSameType(e);\n          throw new HttpException(message.toString(), e);\n       } finally {\n          IOUtils.closeQuietly(xml);",
                "raw_url": "https://github.com/apache/jclouds/raw/8508c37a3b59d38cdcc44eb1c117f830895ab03c/core/src/main/java/org/jclouds/http/commands/callables/xml/ParseSax.java",
                "sha": "8e70f69b9f4bb5cceb8eb33fcfefe4b797adebd2",
                "status": "modified"
            }
        ],
        "message": "instrumented so that NPE contain the XML content it arised from\n\ngit-svn-id: http://jclouds.googlecode.com/svn/trunk@1474 3d8758e0-26b5-11de-8745-db77d3ebf521",
        "parent": "https://github.com/apache/jclouds/commit/fd08265c67a6a38d02fd54289973e19f163e31a2",
        "repo": "jclouds",
        "unit_tests": [
            "ParseSaxTest.java"
        ]
    },
    "jclouds_95b220f": {
        "bug_id": "jclouds_95b220f",
        "commit": "https://github.com/apache/jclouds/commit/95b220f26f1658b23aeecd771a0826821b4966c4",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jclouds/blob/95b220f26f1658b23aeecd771a0826821b4966c4/apis/cloudstack/src/main/java/org/jclouds/cloudstack/predicates/PublicIPAddressPredicates.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/main/java/org/jclouds/cloudstack/predicates/PublicIPAddressPredicates.java?ref=95b220f26f1658b23aeecd771a0826821b4966c4",
                "deletions": 2,
                "filename": "apis/cloudstack/src/main/java/org/jclouds/cloudstack/predicates/PublicIPAddressPredicates.java",
                "patch": "@@ -35,12 +35,12 @@\n       private final String networkId;\n \n       public AssociatedWithNetwork(String networkId) {\n-         this.networkId = networkId;\n+         this.networkId = checkNotNull(networkId, \"networkId\");\n       }\n \n       @Override\n       public boolean apply(PublicIPAddress input) {\n-         return checkNotNull(input, \"ipaddress\").getAssociatedNetworkId().equals(networkId);\n+         return networkId.equals(checkNotNull(input, \"ipaddress\").getAssociatedNetworkId());\n       }\n \n       @Override",
                "raw_url": "https://github.com/apache/jclouds/raw/95b220f26f1658b23aeecd771a0826821b4966c4/apis/cloudstack/src/main/java/org/jclouds/cloudstack/predicates/PublicIPAddressPredicates.java",
                "sha": "462061811cd0500194e88a7f47d749a01e3803a1",
                "status": "modified"
            }
        ],
        "message": "the associatedNetwork is @Nullable so guard against (a fatal) NPE",
        "parent": "https://github.com/apache/jclouds/commit/ed471a2eba9f5fe4277bda1b0caf39b1822d8f9b",
        "repo": "jclouds",
        "unit_tests": [
            "PublicIPAddressPredicatesTest.java"
        ]
    },
    "jclouds_9a4e5fd": {
        "bug_id": "jclouds_9a4e5fd",
        "commit": "https://github.com/apache/jclouds/commit/9a4e5fd7d8f1b26cd8024fd9534e4f16c7feff3d",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jclouds/blob/9a4e5fd7d8f1b26cd8024fd9534e4f16c7feff3d/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java?ref=9a4e5fd7d8f1b26cd8024fd9534e4f16c7feff3d",
                "deletions": 5,
                "filename": "apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java",
                "patch": "@@ -133,9 +133,10 @@ public int hashCode() {\n    }\n \n    protected ToStringHelper string() {\n-      return toStringHelper(\"\").add(\"keyName\", \"keyName\").add(\"securityGroupNames\", securityGroupNames)\n+      return toStringHelper(\"\").add(\"keyName\", keyName).add(\"securityGroupNames\", securityGroupNames)\n               .add(\"metadata\", metadata).add(\"personality\", personality)\n-              .add(\"adminPassPresent\", adminPass != null).add(\"userData\", new String(userData));\n+              .add(\"adminPassPresent\", adminPass != null)\n+              .add(\"userData\", userData == null ? null : new String(userData));\n    }\n \n    @Override\n@@ -258,9 +259,6 @@ public CreateServerOptions userData(byte[] userData) {\n    /**\n     * A keypair name can be defined when creating a server. This key will be\n     * linked to the server and used to SSH connect to the machine\n-    * \n-    * @param keyName\n-    * @return\n     */\n    public String getKeyPairName() {\n       return keyName;",
                "raw_url": "https://github.com/apache/jclouds/raw/9a4e5fd7d8f1b26cd8024fd9534e4f16c7feff3d/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java",
                "sha": "ae36ea1455d5684904d2b3cb7ab5b1983a573cd8",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #619 from aplowe/openstack-nova\n\nopenstack-nova: fixing NPE in CreateServerOptions.string()",
        "parent": "https://github.com/apache/jclouds/commit/81f46b49a7c38cc422953060626b69628365cfb0",
        "repo": "jclouds",
        "unit_tests": [
            "CreateServerOptionsTest.java"
        ]
    },
    "jclouds_efb3dd5": {
        "bug_id": "jclouds_efb3dd5",
        "commit": "https://github.com/apache/jclouds/commit/efb3dd53d0487dd10c7ebfb9ba451c8fb4c6a64a",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jclouds/blob/efb3dd53d0487dd10c7ebfb9ba451c8fb4c6a64a/providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/functions/VirtualMachineToNodeMetadata.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/functions/VirtualMachineToNodeMetadata.java?ref=efb3dd53d0487dd10c7ebfb9ba451c8fb4c6a64a",
                "deletions": 2,
                "filename": "providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/functions/VirtualMachineToNodeMetadata.java",
                "patch": "@@ -41,6 +41,7 @@\n import org.jclouds.azurecompute.arm.domain.IdReference;\n import org.jclouds.azurecompute.arm.domain.IpConfiguration;\n import org.jclouds.azurecompute.arm.domain.NetworkInterfaceCard;\n+import org.jclouds.azurecompute.arm.domain.PublicIPAddress;\n import org.jclouds.azurecompute.arm.domain.RegionAndId;\n import org.jclouds.azurecompute.arm.domain.ResourceGroup;\n import org.jclouds.azurecompute.arm.domain.StorageProfile;\n@@ -247,8 +248,10 @@ private NetworkInterfaceCard getNetworkInterfaceCard(IdReference networkInterfac\n             for (IpConfiguration ipConfiguration : networkInterfaceCard.properties().ipConfigurations()) {\n                if (ipConfiguration.properties().publicIPAddress() != null) {\n                   String publicIpId = ipConfiguration.properties().publicIPAddress().id();\n-                  publicIpAddresses.add(api.getPublicIPAddressApi(resourceGroup)\n-                        .get(Iterables.getLast(Splitter.on(\"/\").split(publicIpId))).properties().ipAddress());\n+                  PublicIPAddress publicIp = api.getPublicIPAddressApi(resourceGroup).get(Iterables.getLast(Splitter.on(\"/\").split(publicIpId)));\n+                  if (publicIp != null && publicIp.properties().ipAddress() != null) {\n+                     publicIpAddresses.add(publicIp.properties().ipAddress());\n+                  }\n                }\n             }\n          }",
                "raw_url": "https://github.com/apache/jclouds/raw/efb3dd53d0487dd10c7ebfb9ba451c8fb4c6a64a/providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/functions/VirtualMachineToNodeMetadata.java",
                "sha": "6b7ef3008c891b611454985a51cc8cca21d9e8aa",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in ARM VirtualMachineToNodeMetadata",
        "parent": "https://github.com/apache/jclouds/commit/dd9bbff45200dd6f030c336e0e439754305cea41",
        "repo": "jclouds",
        "unit_tests": [
            "VirtualMachineToNodeMetadataTest.java"
        ]
    }
}