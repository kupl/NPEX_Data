{
    "directory-ldap-api_03b6903": {
        "bug_id": "directory-ldap-api_03b6903",
        "commit": "https://github.com/apache/directory-ldap-api/commit/03b6903e48d1700a7de44ca8cd90da624df84895",
        "file": [
            {
                "additions": 84,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/03b6903e48d1700a7de44ca8cd90da624df84895/ldap/src/main/java/org/apache/directory/shared/ldap/ldif/LdifReader.java",
                "changes": 129,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/ldif/LdifReader.java?ref=03b6903e48d1700a7de44ca8cd90da624df84895",
                "deletions": 45,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/ldif/LdifReader.java",
                "patch": "@@ -19,6 +19,7 @@\n  */\n package org.apache.directory.shared.ldap.ldif;\n \n+\n import java.io.BufferedReader;\n import java.io.Closeable;\n import java.io.DataInputStream;\n@@ -59,6 +60,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+\n /**\n  * <pre>\n  *  &lt;ldif-file&gt; ::= &quot;version:&quot; &lt;fill&gt; &lt;number&gt; &lt;seps&gt; &lt;dn-spec&gt; &lt;sep&gt; \n@@ -181,6 +183,7 @@\n         /** The current position */\n         private int pos;\n \n+\n         /**\n          * Creates a new instance of Position.\n          */\n@@ -189,6 +192,7 @@ public Position()\n             pos = 0;\n         }\n \n+\n         /**\n          * Increment the current position by one\n          *\n@@ -198,6 +202,7 @@ public void inc()\n             pos++;\n         }\n \n+\n         /**\n          * Increment the current position by the given value\n          *\n@@ -259,6 +264,7 @@ public void inc( int val )\n      */\n     protected Exception error;\n \n+\n     /**\n      * Constructors\n      */\n@@ -268,7 +274,7 @@ public LdifReader()\n         position = new Position();\n         version = DEFAULT_VERSION;\n     }\n-    \n+\n \n     private void init( BufferedReader reader ) throws NamingException\n     {\n@@ -284,6 +290,7 @@ private void init( BufferedReader reader ) throws NamingException\n         prefetched = parseEntry();\n     }\n \n+\n     /**\n      * A constructor which takes a file name\n      * \n@@ -311,14 +318,14 @@ public LdifReader( String ldifFileName ) throws NamingException\n         {\n             init( new BufferedReader( new FileReader( file ) ) );\n         }\n-        catch (FileNotFoundException fnfe)\n+        catch ( FileNotFoundException fnfe )\n         {\n             LOG.error( \"File {} cannot be found\", file.getAbsoluteFile() );\n             throw new NamingException( \"Cannot find file \" + file.getAbsoluteFile() );\n         }\n     }\n \n-    \n+\n     /**\n      * A constructor which takes a Reader\n      * \n@@ -332,6 +339,7 @@ public LdifReader( Reader in ) throws NamingException\n         init( new BufferedReader( in ) );\n     }\n \n+\n     /**\n      * A constructor which takes an InputStream\n      * \n@@ -345,6 +353,7 @@ public LdifReader( InputStream in ) throws NamingException\n         init( new BufferedReader( new InputStreamReader( in ) ) );\n     }\n \n+\n     /**\n      * A constructor which takes a File\n      * \n@@ -371,13 +380,14 @@ public LdifReader( File file ) throws NamingException\n         {\n             init( new BufferedReader( new FileReader( file ) ) );\n         }\n-        catch (FileNotFoundException fnfe)\n+        catch ( FileNotFoundException fnfe )\n         {\n             LOG.error( \"File {} cannot be found\", file.getAbsoluteFile() );\n             throw new NamingException( \"Cannot find file \" + file.getAbsoluteFile() );\n         }\n     }\n \n+\n     /**\n      * @return The ldif file version\n      */\n@@ -386,6 +396,7 @@ public int getVersion()\n         return version;\n     }\n \n+\n     /**\n      * @return The maximum size of a file which is used into an attribute value.\n      */\n@@ -394,6 +405,7 @@ public long getSizeLimit()\n         return sizeLimit;\n     }\n \n+\n     /**\n      * Set the maximum file size that can be accepted for an attribute value\n      * \n@@ -405,6 +417,7 @@ public void setSizeLimit( long sizeLimit )\n         this.sizeLimit = sizeLimit;\n     }\n \n+\n     // <fill> ::= ' ' <fill> | \ufffd\n     private static void parseFill( char[] document, Position position )\n     {\n@@ -415,6 +428,7 @@ private static void parseFill( char[] document, Position position )\n         }\n     }\n \n+\n     /**\n      * Parse a number following the rules :\n      * \n@@ -453,6 +467,7 @@ private static String parseNumber( char[] document, Position position )\n         }\n     }\n \n+\n     /**\n      * Parse the changeType\n      * \n@@ -490,6 +505,7 @@ else if ( \"modrdn\".equalsIgnoreCase( modOp ) )\n         return operation;\n     }\n \n+\n     /**\n      * Parse the DN of an entry\n      * \n@@ -527,7 +543,7 @@ else if ( line.charAt( 3 ) == ':' )\n                     {\n                         dn = new String( Base64.decode( trimmedLine.toCharArray() ), \"UTF-8\" );\n                     }\n-                    catch (UnsupportedEncodingException uee)\n+                    catch ( UnsupportedEncodingException uee )\n                     {\n                         // The DN is not base 64 encoded\n                         LOG.error( \"The ldif entry is supposed to have a base 64 encoded DN\" );\n@@ -557,7 +573,7 @@ else if ( line.charAt( 3 ) == ':' )\n         {\n             LdapDnParser.parseInternal( dn, new ArrayList<Rdn>() );\n         }\n-        catch (InvalidNameException ine)\n+        catch ( InvalidNameException ine )\n         {\n             LOG.error( \"The DN {} is not valid\" );\n             throw ine;\n@@ -566,6 +582,7 @@ else if ( line.charAt( 3 ) == ':' )\n         return dn;\n     }\n \n+\n     /**\n      * Parse the value part.\n      * \n@@ -598,6 +615,7 @@ protected static Object parseSimpleValue( String line, int pos )\n         }\n     }\n \n+\n     /**\n      * Parse the value part.\n      * \n@@ -651,7 +669,7 @@ else if ( c == '<' )\n                             }\n                             else\n                             {\n-                                byte[] data = new byte[(int) length];\n+                                byte[] data = new byte[( int ) length];\n                                 DataInputStream inf = null;\n \n                                 try\n@@ -661,15 +679,15 @@ else if ( c == '<' )\n \n                                     return data;\n                                 }\n-                                catch (FileNotFoundException fnfe)\n+                                catch ( FileNotFoundException fnfe )\n                                 {\n                                     // We can't reach this point, the file\n                                     // existence has already been\n                                     // checked\n                                     LOG.error( \"File {} not found\", fileName );\n                                     throw new NamingException( \"Bad URL, file not found\" );\n                                 }\n-                                catch (IOException ioe)\n+                                catch ( IOException ioe )\n                                 {\n                                     LOG.error( \"File {} error reading\", fileName );\n                                     throw new NamingException( \"Bad URL, file can't be read\" );\n@@ -695,7 +713,7 @@ else if ( c == '<' )\n                         throw new NamingException( \"Unsupported URL protocol\" );\n                     }\n                 }\n-                catch (MalformedURLException mue)\n+                catch ( MalformedURLException mue )\n                 {\n                     LOG.error( \"Bad URL {}\", urlName );\n                     throw new NamingException( \"Bad URL\" );\n@@ -712,6 +730,7 @@ else if ( c == '<' )\n         }\n     }\n \n+\n     /**\n      * Parse a control. The grammar is : &lt;control&gt; ::= \"control:\" &lt;fill&gt;\n      * &lt;ldap-oid&gt; &lt;critical-e&gt; &lt;value-spec-e&gt; &lt;sep&gt; &lt;critical-e&gt; ::= &lt;spaces&gt;\n@@ -766,7 +785,7 @@ private Control parseControl( String line ) throws NamingException\n         {\n             oid = new OID( oidString );\n         }\n-        catch (DecoderException de)\n+        catch ( DecoderException de )\n         {\n             LOG.error( \"The OID {} is not valid\", oidString );\n             throw new NamingException( \"Bad control oid\" );\n@@ -832,7 +851,7 @@ else if ( StringTools.isCharASCII( controlValue, criticalPos + 1, '<' ) )\n \n                 for ( int i = 0; i < length - criticalPos - 1; i++ )\n                 {\n-                    value[i] = (byte) controlValue[i + criticalPos + 1];\n+                    value[i] = ( byte ) controlValue[i + criticalPos + 1];\n                 }\n \n                 control.setValue( value );\n@@ -842,6 +861,7 @@ else if ( StringTools.isCharASCII( controlValue, criticalPos + 1, '<' ) )\n         return control;\n     }\n \n+\n     /**\n      * Parse an AttributeType/AttributeValue\n      * \n@@ -866,6 +886,7 @@ public static Attribute parseAttributeValue( String line )\n         }\n     }\n \n+\n     /**\n      * Parse an AttributeType/AttributeValue\n      * \n@@ -893,6 +914,7 @@ public void parseAttributeValue( LdifEntry entry, String line, String lowerLine\n         entry.addAttribute( attributeType, attributeValue );\n     }\n \n+\n     /**\n      * Parse a ModRDN operation\n      * \n@@ -916,8 +938,8 @@ private void parseModRdn( LdifEntry entry, Iterator<String> iter ) throws Naming\n             {\n                 int colonIndex = line.indexOf( ':' );\n                 Object attributeValue = parseValue( line, colonIndex );\n-                entry.setNewRdn( attributeValue instanceof String ? (String) attributeValue : StringTools\n-                        .utf8ToString( (byte[]) attributeValue ) );\n+                entry.setNewRdn( attributeValue instanceof String ? ( String ) attributeValue : StringTools\n+                    .utf8ToString( ( byte[] ) attributeValue ) );\n             }\n             else\n             {\n@@ -958,6 +980,7 @@ private void parseModRdn( LdifEntry entry, Iterator<String> iter ) throws Naming\n         return;\n     }\n \n+\n     /**\n      * Parse a modify change type.\n      * \n@@ -1085,20 +1108,21 @@ else if ( lowerLine.startsWith( \"replace:\" ) )\n \n                 if ( attributeValue instanceof String )\n                 {\n-                    attribute.add( (String)attributeValue );\n+                    attribute.add( ( String ) attributeValue );\n                 }\n                 else\n                 {\n-                    attribute.add( (byte[])attributeValue );\n+                    attribute.add( ( byte[] ) attributeValue );\n                 }\n-                \n+\n                 isEmptyValue = false;\n \n                 state = ATTRVAL_SPEC_OR_SEP;\n             }\n         }\n     }\n \n+\n     /**\n      * Parse a change operation. We have to handle different cases depending on\n      * the operation. 1) Delete : there should *not* be any line after the\n@@ -1167,8 +1191,8 @@ private void parseChange( LdifEntry entry, Iterator<String> iter, ChangeType ope\n                     {\n                         int colonIndex = line.indexOf( ':' );\n                         Object attributeValue = parseValue( line, colonIndex );\n-                        entry.setNewSuperior( attributeValue instanceof String ? (String) attributeValue : StringTools\n-                                .utf8ToString( (byte[]) attributeValue ) );\n+                        entry.setNewSuperior( attributeValue instanceof String ? ( String ) attributeValue\n+                            : StringTools.utf8ToString( ( byte[] ) attributeValue ) );\n                     }\n                     else\n                     {\n@@ -1197,6 +1221,7 @@ private void parseChange( LdifEntry entry, Iterator<String> iter, ChangeType ope\n         }\n     }\n \n+\n     /**\n      * Parse a ldif file. The following rules are processed :\n      * \n@@ -1222,7 +1247,7 @@ private LdifEntry parseEntry() throws NamingException\n         String line = lines.get( 0 );\n \n         String name = parseDn( line );\n-        \n+\n         LdapDN dn = new LdapDN( name );\n \n         // Ok, we have found a DN\n@@ -1352,6 +1377,7 @@ else if ( type == CHANGE )\n         return entry;\n     }\n \n+\n     /**\n      * Parse the version from the ldif input.\n      * \n@@ -1400,7 +1426,7 @@ private int parseVersion() throws NamingException\n             {\n                 ver = Integer.parseInt( versionNumber );\n             }\n-            catch (NumberFormatException nfe)\n+            catch ( NumberFormatException nfe )\n             {\n                 LOG.error( \"The version is not a number\" );\n                 throw new NamingException( \"Ldif parsing error\" );\n@@ -1410,7 +1436,7 @@ private int parseVersion() throws NamingException\n \n             // We have found the version, just discard the line from the list\n             lines.remove( 0 );\n-            \n+\n             // and read the next lines if the current buffer is empty\n             if ( lines.size() == 0 )\n             {\n@@ -1425,6 +1451,7 @@ private int parseVersion() throws NamingException\n         return ver;\n     }\n \n+\n     /**\n      * Reads an entry in a ldif buffer, and returns the resulting lines, without\n      * comments, and unfolded.\n@@ -1444,7 +1471,7 @@ protected void readLines() throws NamingException\n \n         try\n         {\n-            while ( ( line = ( (BufferedReader) reader ).readLine() ) != null )\n+            while ( ( line = ( ( BufferedReader ) reader ).readLine() ) != null )\n             {\n                 if ( line.length() == 0 )\n                 {\n@@ -1503,7 +1530,7 @@ else if ( sb.length() == 0 )\n                 }\n             }\n         }\n-        catch (IOException ioe)\n+        catch ( IOException ioe )\n         {\n             throw new NamingException( \"Error while reading ldif lines\" );\n         }\n@@ -1517,6 +1544,7 @@ else if ( sb.length() == 0 )\n         return;\n     }\n \n+\n     /**\n      * Parse a ldif file (using the default encoding).\n      * \n@@ -1531,6 +1559,7 @@ else if ( sb.length() == 0 )\n         return parseLdifFile( fileName, Charset.forName( StringTools.getDefaultCharsetName() ).toString() );\n     }\n \n+\n     /**\n      * Parse a ldif file, decoding it using the given charset encoding\n      * \n@@ -1557,18 +1586,18 @@ else if ( sb.length() == 0 )\n             LOG.error( \"Cannot parse the file {}, it does not exist\", fileName );\n             throw new NamingException( \"Filename \" + fileName + \" not found.\" );\n         }\n-        \n+\n         BufferedReader reader = null;\n \n         // Open the file and then get a channel from the stream\n         try\n         {\n-            reader = new BufferedReader( new InputStreamReader( new FileInputStream( file ), \n-                Charset.forName( encoding ) ) );\n+            reader = new BufferedReader(\n+                new InputStreamReader( new FileInputStream( file ), Charset.forName( encoding ) ) );\n \n             return parseLdif( reader );\n         }\n-        catch (FileNotFoundException fnfe)\n+        catch ( FileNotFoundException fnfe )\n         {\n             LOG.error( \"Cannot find file {}\", fileName );\n             throw new NamingException( \"Filename \" + fileName + \" not found.\" );\n@@ -1578,7 +1607,7 @@ else if ( sb.length() == 0 )\n             // close the reader\n             try\n             {\n-                reader.close();\n+                close();\n             }\n             catch ( IOException ioe )\n             {\n@@ -1587,6 +1616,7 @@ else if ( sb.length() == 0 )\n         }\n     }\n \n+\n     /**\n      * A method which parses a ldif string and returns a list of entries.\n      * \n@@ -1614,12 +1644,13 @@ else if ( sb.length() == 0 )\n \n             if ( LOG.isDebugEnabled() )\n             {\n-                LOG.debug( \"Parsed {} entries.\", ( entries == null ? Integer.valueOf( 0 ) : Integer.valueOf( entries.size() ) ) );\n+                LOG.debug( \"Parsed {} entries.\", ( entries == null ? Integer.valueOf( 0 ) : Integer.valueOf( entries\n+                    .size() ) ) );\n             }\n \n             return entries;\n         }\n-        catch (NamingException ne)\n+        catch ( NamingException ne )\n         {\n             LOG.error( \"Cannot parse the ldif buffer : {}\", ne.getMessage() );\n             throw new NamingException( \"Error while parsing the ldif buffer\" );\n@@ -1629,16 +1660,17 @@ else if ( sb.length() == 0 )\n             // Close the reader\n             try\n             {\n-                reader.close();\n+                close();\n             }\n             catch ( IOException ioe )\n             {\n                 // Nothing to do\n             }\n-            \n+\n         }\n     }\n \n+\n     // ------------------------------------------------------------------------\n     // Iterator Methods\n     // ------------------------------------------------------------------------\n@@ -1662,7 +1694,7 @@ private LdifEntry nextInternal()\n             {\n                 prefetched = parseEntry();\n             }\n-            catch (NamingException ne)\n+            catch ( NamingException ne )\n             {\n                 error = ne;\n                 throw new NoSuchElementException( ne.getMessage() );\n@@ -1672,15 +1704,15 @@ private LdifEntry nextInternal()\n \n             return entry;\n         }\n-        catch (NamingException ne)\n+        catch ( NamingException ne )\n         {\n             LOG.error( \"Premature termination of LDIF iterator\" );\n             error = ne;\n             return null;\n         }\n     }\n \n-    \n+\n     /**\n      * Gets the next LDIF on the channel.\n      * \n@@ -1703,7 +1735,7 @@ private boolean hasNextInternal()\n         return null != prefetched;\n     }\n \n-    \n+\n     /**\n      * Tests to see if another LDIF is on the input channel.\n      * \n@@ -1727,7 +1759,7 @@ private void removeInternal()\n         throw new UnsupportedOperationException();\n     }\n \n-    \n+\n     /**\n      * Always throws UnsupportedOperationException!\n      * \n@@ -1738,30 +1770,34 @@ public void remove()\n         removeInternal();\n     }\n \n+\n     /**\n      * @return An iterator on the file\n      */\n     public Iterator<LdifEntry> iterator()\n     {\n-        return new Iterator<LdifEntry>() \n+        return new Iterator<LdifEntry>()\n         {\n-            public boolean hasNext() \n+            public boolean hasNext()\n             {\n                 return hasNextInternal();\n             }\n-          \n-            public LdifEntry next() \n+\n+\n+            public LdifEntry next()\n             {\n                 return nextInternal();\n             }\n-          \n-            public void remove() \n+\n+\n+            public void remove()\n             {\n                 throw new UnsupportedOperationException();\n             }\n         };\n     }\n \n+\n     /**\n      * @return True if an error occured during parsing\n      */\n@@ -1770,6 +1806,7 @@ public boolean hasError()\n         return error != null;\n     }\n \n+\n     /**\n      * @return The exception that occurs during an entry parsing\n      */\n@@ -1778,6 +1815,7 @@ public Exception getError()\n         return error;\n     }\n \n+\n     /**\n      * The main entry point of the LdifParser. It reads a buffer and returns a\n      * List of entries.\n@@ -1802,7 +1840,7 @@ public Exception getError()\n         // When done, get the entries one by one.\n         try\n         {\n-            for ( LdifEntry entry:this )\n+            for ( LdifEntry entry : this )\n             {\n                 if ( entry != null )\n                 {\n@@ -1818,6 +1856,7 @@ public Exception getError()\n         return entries;\n     }\n \n+\n     /**\n      * @return True if the ldif file contains entries, fals if it contains\n      *         changes",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/03b6903e48d1700a7de44ca8cd90da624df84895/ldap/src/main/java/org/apache/directory/shared/ldap/ldif/LdifReader.java",
                "sha": "74e4acde6a8cb76996de40c4ae3b71bce0934ad2",
                "status": "modified"
            }
        ],
        "message": "Fixed a potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/shared-schema@890287 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/8c92c7d98875be8fa083105a3ae0477ea6adac5f",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "LdifReaderTest.java"
        ]
    },
    "directory-ldap-api_0a25d99": {
        "bug_id": "directory-ldap-api_0a25d99",
        "commit": "https://github.com/apache/directory-ldap-api/commit/0a25d994af6ddb7d12979e0c11f3f9901435bf40",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/0a25d994af6ddb7d12979e0c11f3f9901435bf40/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/TelephoneNumberSyntaxChecker.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/TelephoneNumberSyntaxChecker.java?ref=0a25d994af6ddb7d12979e0c11f3f9901435bf40",
                "deletions": 1,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/TelephoneNumberSyntaxChecker.java",
                "patch": "@@ -52,7 +52,7 @@\n     /** The Syntax OID, according to RFC 4517, par. 3.3.31 */\n     public static final String OID = \"1.3.6.1.4.1.1466.115.121.1.50\";\n     \n-    /** Other regexp to extend the initial one */\n+    /** Other regexps to extend the initial one */\n     private List<String> regexps;\n     \n     /** Other regexp to extend the initial one, compiled */\n@@ -187,6 +187,11 @@ else if ( value instanceof byte[] )\n             }\n             else\n             {\n+                if ( compiledREs == null )\n+                {\n+                    return false;\n+                }\n+                \n                 // The default is not enough, let's try\n                 // the other regexps\n                 for ( Pattern pattern:compiledREs )",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/0a25d994af6ddb7d12979e0c11f3f9901435bf40/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/TelephoneNumberSyntaxChecker.java",
                "sha": "b31658f9d09104124d3200ed1ed4983c27663a4d",
                "status": "modified"
            }
        ],
        "message": "fixed a NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/trunks/shared@487495 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/460e53ac90fc38143226b8cfa77ecf8e9330eece",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "TelephoneNumberSyntaxCheckerTest.java"
        ]
    },
    "directory-ldap-api_0e5e10f": {
        "bug_id": "directory-ldap-api_0e5e10f",
        "commit": "https://github.com/apache/directory-ldap-api/commit/0e5e10f65ee0761d1516cf0676fe78fdb7e0ad28",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/0e5e10f65ee0761d1516cf0676fe78fdb7e0ad28/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapResult.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapResult.java?ref=0e5e10f65ee0761d1516cf0676fe78fdb7e0ad28",
                "deletions": 1,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapResult.java",
                "patch": "@@ -605,7 +605,8 @@ public String toString()\n         sb.append( \"            Matched DN : '\" ).append( matchedDN == null ? \"\": matchedDN.toString() ).append( \"'\\n\" );\n         sb.append( \"            Error message : '\" ).append( errorMessage == null ? \"\" : errorMessage.toString() ).append( \"'\\n\" );\n \n-        if ( referrals.size() != 0 )\n+        \n+        if ( ( referrals != null ) && ( referrals.size() != 0 ) )\n         {\n             sb.append( \"            Referrals :\\n\" );\n ",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/0e5e10f65ee0761d1516cf0676fe78fdb7e0ad28/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapResult.java",
                "sha": "5d2a993c01c8f4a3767390ca039e409fb330eb3d",
                "status": "modified"
            }
        ],
        "message": "Added a test in toString() method to avoid a NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/trunks/shared@463686 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/3fc4419e5bd71e74e49bd2e7822d0e136fd3b1e1",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "LdapResultTest.java"
        ]
    },
    "directory-ldap-api_29ef7ab": {
        "bug_id": "directory-ldap-api_29ef7ab",
        "commit": "https://github.com/apache/directory-ldap-api/commit/29ef7ab4108cbb6f8dc4a8a30e21860af1ce7756",
        "file": [
            {
                "additions": 44,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/29ef7ab4108cbb6f8dc4a8a30e21860af1ce7756/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java?ref=29ef7ab4108cbb6f8dc4a8a30e21860af1ce7756",
                "deletions": 2,
                "filename": "ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "patch": "@@ -1549,6 +1549,13 @@ public SearchFuture searchAsync( SearchRequest searchRequest ) throws LdapExcept\n             throw new IllegalArgumentException( msg );\n         }\n \n+        if ( searchRequest.getBase() == null )\n+        {\n+            String msg = \"Cannot process a searchRequest which base DN is null\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         // If the session has not been establish, or is closed, we get out immediately\n         checkSession();\n \n@@ -2217,6 +2224,13 @@ public ModifyFuture modifyAsync( ModifyRequest modRequest ) throws LdapException\n             throw new IllegalArgumentException( msg );\n         }\n \n+        if ( modRequest.getName() == null )\n+        {\n+            String msg = \"Cannot process a modifyRequest which DN is null\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         checkSession();\n \n         int newId = messageId.incrementAndGet();\n@@ -2326,7 +2340,7 @@ public void move( String entryDn, String newSuperiorDn ) throws LdapException\n \n         if ( newSuperiorDn == null )\n         {\n-            String msg = \"Cannot process a move to a null Dn\";\n+            String msg = \"Cannot process a move to a null newSuperior\";\n             LOG.debug( msg );\n             throw new IllegalArgumentException( msg );\n         }\n@@ -2357,7 +2371,7 @@ public void move( Dn entryDn, Dn newSuperiorDn ) throws LdapException\n \n         if ( newSuperiorDn == null )\n         {\n-            String msg = \"Cannot process a move to a null Dn\";\n+            String msg = \"Cannot process a move to a null newSuperior\";\n             LOG.debug( msg );\n             throw new IllegalArgumentException( msg );\n         }\n@@ -2522,6 +2536,20 @@ public ModifyDnFuture modifyDnAsync( ModifyDnRequest modDnRequest ) throws LdapE\n             throw new IllegalArgumentException( msg );\n         }\n \n+        if ( modDnRequest.getName() == null )\n+        {\n+            String msg = \"Cannot process a modifyRequest which DN is null\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n+        if ( ( modDnRequest.getNewSuperior() == null ) && ( modDnRequest.getNewRdn() == null ) )\n+        {\n+            String msg = \"Cannot process a modifyRequest which new superior and new Rdn are null\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         checkSession();\n \n         int newId = messageId.incrementAndGet();\n@@ -2711,6 +2739,13 @@ public DeleteFuture deleteAsync( DeleteRequest deleteRequest ) throws LdapExcept\n             throw new IllegalArgumentException( msg );\n         }\n \n+        if ( deleteRequest.getName() == null )\n+        {\n+            String msg = \"Cannot process a deleteRequest which DN is null\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         checkSession();\n \n         int newId = messageId.incrementAndGet();\n@@ -2892,6 +2927,13 @@ public CompareFuture compareAsync( CompareRequest compareRequest ) throws LdapEx\n             throw new IllegalArgumentException( msg );\n         }\n \n+        if ( compareRequest.getName() == null )\n+        {\n+            String msg = \"Cannot process a compareRequest which DN is null\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         checkSession();\n \n         int newId = messageId.incrementAndGet();",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/29ef7ab4108cbb6f8dc4a8a30e21860af1ce7756/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "sha": "4478bc3418d7239f0e7e80ff920d9323e1524ddb",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/29ef7ab4108cbb6f8dc4a8a30e21860af1ce7756/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/ModifyRequestImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/ModifyRequestImpl.java?ref=29ef7ab4108cbb6f8dc4a8a30e21860af1ce7756",
                "deletions": 2,
                "filename": "ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/ModifyRequestImpl.java",
                "patch": "@@ -48,7 +48,7 @@\n     /** Dn of the entry to modify or PDU's <b>object</b> field */\n     private Dn name;\n \n-    /** Sequence of modifications or PDU's <b>modification</b> seqence field */\n+    /** Sequence of modifications or PDU's <b>modification</b> sequence field */\n     private List<Modification> mods = new ArrayList<Modification>();\n \n     /** The associated response */\n@@ -406,7 +406,7 @@ public boolean equals( Object obj )\n             }\n             else\n \n-            if ( !item.equals( ( DefaultModification ) mods.get( i ) ) )\n+            if ( !item.equals( mods.get( i ) ) )\n             {\n                 return false;\n             }",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/29ef7ab4108cbb6f8dc4a8a30e21860af1ce7756/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/ModifyRequestImpl.java",
                "sha": "9dd81c9fb39992e1eb690ce7cdd9ccf8107cf871",
                "status": "modified"
            }
        ],
        "message": "o Added some checks in the LdapNetworkConnection API for async operations so that we don't get NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1442292 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/59dfc975067645ef37e59d7ef9ded6e8475e39ce",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "ModifyRequestImplTest.java"
        ]
    },
    "directory-ldap-api_29f5524": {
        "bug_id": "directory-ldap-api_29f5524",
        "commit": "https://github.com/apache/directory-ldap-api/commit/29f5524c632ddf43e7d03411c30f376cb105a630",
        "file": [
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapConnection.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapConnection.java?ref=29f5524c632ddf43e7d03411c30f376cb105a630",
                "deletions": 1,
                "filename": "ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapConnection.java",
                "patch": "@@ -31,7 +31,24 @@\n import org.apache.directory.shared.ldap.model.entry.ModificationOperation;\n import org.apache.directory.shared.ldap.model.entry.Value;\n import org.apache.directory.shared.ldap.model.exception.LdapException;\n-import org.apache.directory.shared.ldap.model.message.*;\n+import org.apache.directory.shared.ldap.model.message.AbandonRequest;\n+import org.apache.directory.shared.ldap.model.message.AddRequest;\n+import org.apache.directory.shared.ldap.model.message.AddResponse;\n+import org.apache.directory.shared.ldap.model.message.BindRequest;\n+import org.apache.directory.shared.ldap.model.message.BindResponse;\n+import org.apache.directory.shared.ldap.model.message.CompareRequest;\n+import org.apache.directory.shared.ldap.model.message.CompareResponse;\n+import org.apache.directory.shared.ldap.model.message.Control;\n+import org.apache.directory.shared.ldap.model.message.DeleteRequest;\n+import org.apache.directory.shared.ldap.model.message.DeleteResponse;\n+import org.apache.directory.shared.ldap.model.message.ExtendedRequest;\n+import org.apache.directory.shared.ldap.model.message.ExtendedResponse;\n+import org.apache.directory.shared.ldap.model.message.ModifyDnRequest;\n+import org.apache.directory.shared.ldap.model.message.ModifyDnResponse;\n+import org.apache.directory.shared.ldap.model.message.ModifyRequest;\n+import org.apache.directory.shared.ldap.model.message.ModifyResponse;\n+import org.apache.directory.shared.ldap.model.message.SearchRequest;\n+import org.apache.directory.shared.ldap.model.message.SearchScope;\n import org.apache.directory.shared.ldap.model.name.Dn;\n import org.apache.directory.shared.ldap.model.name.Rdn;\n import org.apache.directory.shared.ldap.model.schema.SchemaManager;\n@@ -134,6 +151,18 @@\n     BindResponse bind() throws LdapException, IOException;\n \n \n+    /**\n+     * Unauthenticated authentication bind\n+     *\n+     * @param name The name we use to authenticate the user. It must be a\n+     * valid Dn\n+     * @return The BindResponse LdapResponse\n+     * @throws LdapException if some error occurred\n+     * @throws IOException if an I/O exception occurred\n+     */\n+    BindResponse bind( String name ) throws LdapException, IOException;\n+\n+\n     /**\n      * Simple Bind on a server.\n      *\n@@ -147,6 +176,18 @@\n     BindResponse bind( String name, String credentials ) throws LdapException, IOException;\n \n \n+    /**\n+     * Unauthenticated authentication Bind on a server.\n+     *\n+     * @param name The name we use to authenticate the user. It must be a\n+     * valid Dn\n+     * @return The BindResponse LdapResponse\n+     * @throws LdapException if some error occurred\n+     * @throws IOException if an I/O exception occurred\n+     */\n+    BindResponse bind( Dn name ) throws LdapException, IOException;\n+\n+\n     /**\n      * Simple Bind on a server.\n      *",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapConnection.java",
                "sha": "a0e4db3bb18de984906f7165de2dbe4eabec7a1b",
                "status": "modified"
            },
            {
                "additions": 97,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "changes": 97,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java?ref=29f5524c632ddf43e7d03411c30f376cb105a630",
                "deletions": 0,
                "filename": "ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "patch": "@@ -74,6 +74,7 @@\n import org.apache.directory.shared.ldap.model.entry.Modification;\n import org.apache.directory.shared.ldap.model.entry.ModificationOperation;\n import org.apache.directory.shared.ldap.model.entry.Value;\n+import org.apache.directory.shared.ldap.model.exception.LdapAuthenticationException;\n import org.apache.directory.shared.ldap.model.exception.LdapException;\n import org.apache.directory.shared.ldap.model.exception.LdapInvalidDnException;\n import org.apache.directory.shared.ldap.model.exception.LdapNoPermissionException;\n@@ -912,55 +913,151 @@ public BindFuture bindAsync() throws LdapException, IOException\n     }\n \n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    public BindResponse bind( String name ) throws LdapException, IOException\n+    {\n+        LOG.debug( \"Bind request : {}\", name );\n+\n+        // Create the BindRequest\n+        BindRequest bindRequest = createBindRequest( name, StringConstants.EMPTY_BYTES );\n+\n+        return bind( bindRequest );\n+    }\n+\n+\n     /**\n      * {@inheritDoc}\n      */\n     public BindResponse bind( String name, String credentials ) throws LdapException, IOException\n     {\n         LOG.debug( \"Bind request : {}\", name );\n \n+        // The password must not be empty or null\n+        if ( Strings.isEmpty( credentials ) && Strings.isNotEmpty( name ) )\n+        {\n+            LOG.debug( \"The password is missing\" );\n+            throw new LdapAuthenticationException( \"The password is missing\" );\n+        }\n+        \n         // Create the BindRequest\n         BindRequest bindRequest = createBindRequest( name, Strings.getBytesUtf8( credentials ) );\n \n         return bind( bindRequest );\n     }\n \n \n+    /**\n+     * Asynchronous unauthenticated authentication bind\n+     *\n+     * @param name The name we use to authenticate the user. It must be a\n+     * valid Dn\n+     * @return The BindResponse LdapResponse\n+     * @throws LdapException if some error occurred\n+     * @throws IOException if an I/O exception occurred\n+     */\n+    public BindFuture bindAsync( String name ) throws LdapException, IOException\n+    {\n+        LOG.debug( \"Bind request : {}\", name );\n+\n+        // Create the BindRequest\n+        BindRequest bindRequest = createBindRequest( name, StringConstants.EMPTY_BYTES );\n+\n+        return bindAsync( bindRequest );\n+    }\n+\n+\n     /**\n      * {@inheritDoc}\n      */\n     public BindFuture bindAsync( String name, String credentials ) throws LdapException, IOException\n     {\n         LOG.debug( \"Bind request : {}\", name );\n \n+        // The password must not be empty or null\n+        if ( Strings.isEmpty( credentials ) && Strings.isNotEmpty( name ) )\n+        {\n+            LOG.debug( \"The password is missing\" );\n+            throw new LdapAuthenticationException( \"The password is missing\" );\n+        }\n+\n         // Create the BindRequest\n         BindRequest bindRequest = createBindRequest( name, Strings.getBytesUtf8( credentials ) );\n \n         return bindAsync( bindRequest );\n     }\n \n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    public BindResponse bind( Dn name ) throws LdapException, IOException\n+    {\n+        LOG.debug( \"Unauthenticated authentication Bind request : {}\", name );\n+\n+        // Create the BindRequest\n+        BindRequest bindRequest = createBindRequest( name, StringConstants.EMPTY_BYTES, null );\n+\n+        return bind( bindRequest );\n+    }\n+\n+\n     /**\n      * {@inheritDoc}\n      */\n     public BindResponse bind( Dn name, String credentials ) throws LdapException, IOException\n     {\n         LOG.debug( \"Bind request : {}\", name );\n \n+        // The password must not be empty or null\n+        if ( Strings.isEmpty( credentials ) && ( !Dn.EMPTY_DN.equals( name ) ) )\n+        {\n+            LOG.debug( \"The password is missing\" );\n+            throw new LdapAuthenticationException( \"The password is missing\" );\n+        }\n+\n         // Create the BindRequest\n         BindRequest bindRequest = createBindRequest( name, Strings.getBytesUtf8( credentials ), null );\n \n         return bind( bindRequest );\n     }\n \n \n+    /**\n+     * Asynchronous unauthenticated authentication Bind on a server.\n+     *\n+     * @param name The name we use to authenticate the user. It must be a\n+     * valid Dn\n+     * @return The BindResponse LdapResponse\n+     * @throws LdapException if some error occurred\n+     * @throws IOException if an I/O exception occurred\n+     */\n+    public BindFuture bindAsync( Dn name ) throws LdapException, IOException\n+    {\n+        LOG.debug( \"Bind request : {}\", name );\n+\n+        // Create the BindRequest\n+        BindRequest bindRequest = createBindRequest( name, StringConstants.EMPTY_BYTES );\n+\n+        return bindAsync( bindRequest );\n+    }\n+\n+\n     /**\n      * {@inheritDoc}\n      */\n     public BindFuture bindAsync( Dn name, String credentials ) throws LdapException, IOException\n     {\n         LOG.debug( \"Bind request : {}\", name );\n \n+        // The password must not be empty or null\n+        if ( Strings.isEmpty( credentials ) && (! Dn.EMPTY_DN.equals( name ) ) )\n+        {\n+            LOG.debug( \"The password is missing\" );\n+            throw new LdapAuthenticationException( \"The password is missing\" );\n+        }\n+\n         // Create the BindRequest\n         BindRequest bindRequest = createBindRequest( name, Strings.getBytesUtf8( credentials ) );\n ",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "sha": "8754ffde32261bd962c40066cdabfbfa9521606d",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/codec/core/src/main/java/org/apache/directory/shared/ldap/codec/decorators/BindRequestDecorator.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/codec/core/src/main/java/org/apache/directory/shared/ldap/codec/decorators/BindRequestDecorator.java?ref=29f5524c632ddf43e7d03411c30f376cb105a630",
                "deletions": 4,
                "filename": "ldap/codec/core/src/main/java/org/apache/directory/shared/ldap/codec/decorators/BindRequestDecorator.java",
                "patch": "@@ -266,10 +266,17 @@ public void setSaslMechanism( String saslMechanism )\n     public int computeLength()\n     {\n         int bindRequestLength = 1 + 1 + 1; // Initialized with version\n-\n+        \n+        Dn name = getName();\n+        \n         // The name\n-        bindRequestLength += 1 + TLV.getNbBytes( Dn.getNbBytes( getName() ) )\n-            + Dn.getNbBytes( getName() );\n+        if ( name == null )\n+        { \n+            name = Dn.EMPTY_DN;\n+        }\n+\n+        bindRequestLength += 1 + TLV.getNbBytes( Dn.getNbBytes( name ) )\n+            + Dn.getNbBytes( name );\n \n         byte[] credentials = getCredentials();\n \n@@ -347,7 +354,15 @@ public ByteBuffer encode( ByteBuffer buffer ) throws EncoderException\n         Value.encode( buffer, 3 );\n \n         // The name\n-        Value.encode( buffer, Dn.getBytes( getName() ) );\n+        Dn name = getName();\n+        \n+        // The name\n+        if ( name == null )\n+        { \n+            name = Dn.EMPTY_DN;\n+        }\n+\n+        Value.encode( buffer, Dn.getBytes( name ) );\n \n         byte[] credentials = getCredentials();\n ",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/codec/core/src/main/java/org/apache/directory/shared/ldap/codec/decorators/BindRequestDecorator.java",
                "sha": "5b8794ce98e763bf83617fc729bd89d75731001e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/codec/standalone/src/test/java/org/apache/directory/shared/ldap/codec/LdapDecoderTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/codec/standalone/src/test/java/org/apache/directory/shared/ldap/codec/LdapDecoderTest.java?ref=29f5524c632ddf43e7d03411c30f376cb105a630",
                "deletions": 1,
                "filename": "ldap/codec/standalone/src/test/java/org/apache/directory/shared/ldap/codec/LdapDecoderTest.java",
                "patch": "@@ -33,8 +33,8 @@\n import org.apache.directory.shared.asn1.ber.Asn1Decoder;\n import org.apache.directory.shared.asn1.ber.tlv.TLVStateEnum;\n import org.apache.directory.shared.ldap.codec.api.LdapDecoder;\n-import org.apache.directory.shared.ldap.codec.api.MessageDecorator;\n import org.apache.directory.shared.ldap.codec.api.LdapMessageContainer;\n+import org.apache.directory.shared.ldap.codec.api.MessageDecorator;\n import org.apache.directory.shared.ldap.codec.decorators.BindRequestDecorator;\n import org.apache.directory.shared.ldap.codec.osgi.AbstractCodecServiceTest;\n import org.apache.directory.shared.ldap.model.message.BindRequest;",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/codec/standalone/src/test/java/org/apache/directory/shared/ldap/codec/LdapDecoderTest.java",
                "sha": "d612d5ed0966c193b8b08c50173867193447ed08",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/AddRequestImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/AddRequestImpl.java?ref=29f5524c632ddf43e7d03411c30f376cb105a630",
                "deletions": 1,
                "filename": "ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/AddRequestImpl.java",
                "patch": "@@ -272,7 +272,7 @@ public String toString()\n     {\n         StringBuilder sb = new StringBuilder();\n \n-        sb.append( \"    Add Request[\" ).append( getMessageId() ).append( \"] :\\n\" );\n+        sb.append( \"    Add Request :\\n\" );\n \n         if ( entry == null )\n         {",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/AddRequestImpl.java",
                "sha": "abb8bfd4851b8095d6ea17b4a4faf3f49bc69a80",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/BindRequest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/BindRequest.java?ref=29f5524c632ddf43e7d03411c30f376cb105a630",
                "deletions": 16,
                "filename": "ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/BindRequest.java",
                "patch": "@@ -60,8 +60,7 @@\n      * Sets the authentication mechanism to simple or to SASL based\n      * authentication.\n      * \n-     * @param isSimple\n-     *            true if authentication is simple, false otherwise.\n+     * @param isSimple true if authentication is simple, false otherwise.\n      */\n     void setSimple( boolean isSimple );\n \n@@ -70,25 +69,25 @@\n      * Gets the simple credentials associated with a simple authentication\n      * attempt or null if this request uses SASL authentication mechanisms.\n      * \n-     * @return null if the mechanism is SASL or the credentials if it is simple.\n+     * @return null if the mechanism is SASL, or the credentials if it is simple.\n      */\n     byte[] getCredentials();\n \n \n     /**\n      * Sets the simple credentials associated with a simple authentication\n-     * attempt ignored if this request uses SASL authentication mechanisms.\n+     * attempt. Ignored if this request uses SASL authentication mechanisms.\n      * \n-     * @param credentials the credentials if authentication is simple, null otherwise\n+     * @param credentials the credentials if authentication is simple\n      */\n     void setCredentials( String credentials );\n \n \n     /**\n      * Sets the simple credentials associated with a simple authentication\n-     * attempt ignored if this request uses SASL authentication mechanisms.\n+     * attempt. Ignored if this request uses SASL authentication mechanisms.\n      * \n-     * @param credentials the credentials if authentication is simple, null otherwise\n+     * @param credentials the credentials if authentication is simple\n      */\n     void setCredentials( byte[] credentials );\n \n@@ -112,9 +111,7 @@\n      * performed at a lower layer, or when using SASL credentials with a\n      * mechanism that includes the Dn in the credentials.\n      * \n-     * @param name\n-     *            the Dn of the authenticating user - leave null for annonymous\n-     *            user.\n+     * @param name the Dn of the authenticating user - leave null for annonymous user.\n      */\n     void setName( Dn name );\n \n@@ -156,9 +153,8 @@\n      * an type-safe enumeration type for a binary value. If an LDAPv4 comes out\n      * then we shall convert the return type to a type safe enumeration.\n      * \n-     * @param isVersion3\n-     *            if true the client will be exhibiting version 3 bind behavoir,\n-     *            if false is used version 2 behavoir will be exhibited.\n+     * @param isVersion3 if true the client will be exhibiting version 3 bind behavior,\n+     *  If false is used version 2 behavior will be exhibited.\n      */\n     void setVersion3( boolean isVersion3 );\n \n@@ -167,7 +163,7 @@\n      * Gets the SASL mechanism String associated with this BindRequest if the\n      * bind operation is using SASL.\n      * \n-     * @return the SASL mechanism or null if the bind op is simple\n+     * @return the SASL mechanism or null if the bind operation is simple\n      */\n     String getSaslMechanism();\n \n@@ -176,8 +172,7 @@\n      * Sets the SASL mechanism String associated with this BindRequest if the\n      * bind operation is using SASL.\n      * \n-     * @param saslMechanism\n-     *            the SASL mechanism\n+     * @param saslMechanism the SASL mechanism\n      */\n     void setSaslMechanism( String saslMechanism );\n }",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/BindRequest.java",
                "sha": "4dc9c243be5487f3e0106f9385687f1bb10a46fb",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/BindRequestImpl.java",
                "changes": 92,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/BindRequestImpl.java?ref=29f5524c632ddf43e7d03411c30f376cb105a630",
                "deletions": 76,
                "filename": "ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/BindRequestImpl.java",
                "patch": "@@ -35,8 +35,6 @@\n  */\n public class BindRequestImpl extends AbstractAbandonableRequest implements BindRequest\n {\n-    static final long serialVersionUID = 7945504184130380071L;\n-\n     /**\n      * Distinguished name identifying the name of the authenticating subject -\n      * defaults to the empty string\n@@ -80,10 +78,7 @@ public BindRequestImpl()\n     // -----------------------------------------------------------------------\n \n     /**\n-     * Checks to see if the authentication mechanism is simple and not SASL\n-     * based.\n-     * \n-     * @return true if the mechanism is simple false if it is SASL based.\n+     * {@inheritDoc}\n      */\n     public boolean isSimple()\n     {\n@@ -92,10 +87,7 @@ public boolean isSimple()\n \n \n     /**\n-     * Checks to see if the authentication mechanism is simple and not SASL\n-     * based.\n-     * \n-     * @return true if the mechanism is simple false if it is SASL based.\n+     * {@inheritDoc}\n      */\n     public boolean getSimple()\n     {\n@@ -104,11 +96,7 @@ public boolean getSimple()\n \n \n     /**\n-     * Sets the authentication mechanism to simple or to SASL based\n-     * authentication.\n-     * \n-     * @param simple\n-     *            true if authentication is simple, false otherwise.\n+     * {@inheritDoc}\n      */\n     public void setSimple( boolean simple )\n     {\n@@ -117,10 +105,7 @@ public void setSimple( boolean simple )\n \n \n     /**\n-     * Gets the simple credentials associated with a simple authentication\n-     * attempt or null if this request uses SASL authentication mechanisms.\n-     * \n-     * @return null if the mechanism is SASL or the credentials if it is simple.\n+     * {@inheritDoc}\n      */\n     public byte[] getCredentials()\n     {\n@@ -170,9 +155,7 @@ public void setCredentials( byte[] credentials )\n \n \n     /**\n-     * Gets the mechanism if this request uses SASL authentication mechanisms.\n-     * \n-     * @return The mechanism if SASL.\n+     * {@inheritDoc}\n      */\n     public String getSaslMechanism()\n     {\n@@ -181,25 +164,17 @@ public String getSaslMechanism()\n \n \n     /**\n-     * Sets the mechanism associated with a SASL authentication\n-     * \n-     * @param saslMechanism\n-     *            the SASL mechanism\n+     * {@inheritDoc}\n      */\n     public void setSaslMechanism( String saslMechanism )\n     {\n+        this.isSimple = false;\n         this.mechanism = saslMechanism;\n     }\n \n \n     /**\n-     * Gets the distinguished name of the subject in this authentication\n-     * request. This field may take on a null value (a zero length string) for\n-     * the purposes of anonymous binds, when authentication has been performed\n-     * at a lower layer, or when using SASL credentials with a mechanism that\n-     * includes the Dn in the credentials.\n-     * \n-     * @return the Dn of the authenticating user.\n+     * {@inheritDoc}\n      */\n     public Dn getName()\n     {\n@@ -208,15 +183,7 @@ public Dn getName()\n \n \n     /**\n-     * Sets the distinguished name of the subject in this authentication\n-     * request. This field may take on a null value (or a zero length string)\n-     * for the purposes of anonymous binds, when authentication has been\n-     * performed at a lower layer, or when using SASL credentials with a\n-     * mechanism that includes the Dn in the credentials.\n-     * \n-     * @param name\n-     *            the Dn of the authenticating user - leave null for annonymous\n-     *            user.\n+     * {@inheritDoc}\n      */\n     public void setName( Dn name )\n     {\n@@ -225,15 +192,7 @@ public void setName( Dn name )\n \n \n     /**\n-     * Checks to see if the Ldap v3 protocol is used. Normally this would\n-     * extract a version number from the bind request sent by the client\n-     * indicating the version of the protocol to be used in this protocol\n-     * session. The integer is either a 2 or a 3 at the moment. We thought it\n-     * was better to just check if the protocol used is 3 or not rather than use\n-     * an type-safe enumeration type for a binary value. If an LDAPv4 comes out\n-     * then we shall convert the return type to a type safe enumeration.\n-     * \n-     * @return true if client using version 3 false if it is version 2.\n+     * {@inheritDoc}\n      */\n     public boolean isVersion3()\n     {\n@@ -242,15 +201,7 @@ public boolean isVersion3()\n \n \n     /**\n-     * Gets whether or not the Ldap v3 protocol is used. Normally this would\n-     * extract a version number from the bind request sent by the client\n-     * indicating the version of the protocol to be used in this protocol\n-     * session. The integer is either a 2 or a 3 at the moment. We thought it\n-     * was better to just check if the protocol used is 3 or not rather than use\n-     * an type-safe enumeration type for a binary value. If an LDAPv4 comes out\n-     * then we shall convert the return type to a type safe enumeration.\n-     * \n-     * @return true if client using version 3 false if it is version 2.\n+     * {@inheritDoc}\n      */\n     public boolean getVersion3()\n     {\n@@ -259,17 +210,7 @@ public boolean getVersion3()\n \n \n     /**\n-     * Sets whether or not the LDAP v3 or v2 protocol is used. Normally this\n-     * would extract a version number from the bind request sent by the client\n-     * indicating the version of the protocol to be used in this protocol\n-     * session. The integer is either a 2 or a 3 at the moment. We thought it\n-     * was better to just check if the protocol used is 3 or not rather than use\n-     * an type-safe enumeration type for a binary value. If an LDAPv4 comes out\n-     * then we shall convert the return type to a type safe enumeration.\n-     * \n-     * @param version3\n-     *            if true the client will be exhibiting version 3 bind behavoir,\n-     *            if false is used version 2 behavoir will be exhibited.\n+     * {@inheritDoc}\n      */\n     public void setVersion3( boolean version3 )\n     {\n@@ -354,24 +295,23 @@ public boolean equals( Object obj )\n         Dn dn1 = req.getName();\n         Dn dn2 = getName();\n \n-        if ( dn1 == null )\n+        if ( Dn.isNullOrEmpty( dn1) )\n         {\n-            if ( dn2 != null )\n+            if ( !Dn.isNullOrEmpty( dn2 ) )\n             {\n                 return false;\n             }\n         }\n         else\n         {\n-            if ( dn2 == null )\n+            if ( Dn.isNullOrEmpty( dn2 ) )\n             {\n                 return false;\n             }\n             else if ( !dn1.equals( dn2 ) )\n             {\n                 return false;\n             }\n-\n         }\n \n         return Arrays.equals( req.getCredentials(), getCredentials() );\n@@ -409,7 +349,7 @@ public String toString()\n         sb.append( \"    BindRequest\\n\" );\n         sb.append( \"        Version : '\" ).append( isVersion3 ? \"3\" : \"2\" ).append( \"'\\n\" );\n \n-        if ( Strings.isEmpty(name.getNormName()) && isSimple )\n+        if ( ( (name == null ) || Strings.isEmpty(name.getNormName() ) ) && isSimple )\n         {\n             sb.append( \"        Name : anonymous\\n\" );\n         }",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/BindRequestImpl.java",
                "sha": "df04906cf21efe2be7830cbf7f1b0fd0a7e35abe",
                "status": "modified"
            }
        ],
        "message": "o Added the bind( Dn ) and bind( String ) method in the LdapConnection interface\no Ignored the SASL PLAIN bind test, it's not working in the LdapNeworkConnection\no The testAnonymousBindReques is not anymore ignored, the NPE ha sbeen fixed\no Added a check in the LdapNetworkConnection.bind( username, password ) methods to forbid a call when the password is null but the username is not\no Fixed a NPE in the BindRequestDecorator class\no Updated the BindRequest Javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1092743 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/803d13eed97bd56fad042efa635cf655632f70d5",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "BindRequestImplTest.java"
        ]
    },
    "directory-ldap-api_3419be0": {
        "bug_id": "directory-ldap-api_3419be0",
        "commit": "https://github.com/apache/directory-ldap-api/commit/3419be03990bc8eee4a9be70fa06db1a50070dfb",
        "file": [
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/3419be03990bc8eee4a9be70fa06db1a50070dfb/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/Registries.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/Registries.java?ref=3419be03990bc8eee4a9be70fa06db1a50070dfb",
                "deletions": 9,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/Registries.java",
                "patch": "@@ -288,7 +288,10 @@ public String getOid( String name )\n         {\n             AttributeType attributeType = attributeTypeRegistry.lookup( name );\n             \n-            return attributeType.getOid();\n+            if ( attributeType != null )\n+            {\n+                return attributeType.getOid();\n+            }\n         }\n         catch ( NamingException ne )\n         {\n@@ -300,7 +303,10 @@ public String getOid( String name )\n         {\n             ObjectClass objectClass = objectClassRegistry.lookup( name );\n             \n-            return objectClass.getOid();\n+            if ( objectClass != null )\n+            {\n+                return objectClass.getOid();\n+            }\n         }\n         catch ( NamingException ne )\n         {\n@@ -312,7 +318,10 @@ public String getOid( String name )\n         {\n             LdapSyntax ldapSyntax = ldapSyntaxRegistry.lookup( name );\n             \n-            return ldapSyntax.getOid();\n+            if ( ldapSyntax != null )\n+            {\n+                return ldapSyntax.getOid();\n+            }\n         }\n         catch ( NamingException ne )\n         {\n@@ -324,7 +333,10 @@ public String getOid( String name )\n         {\n             MatchingRule matchingRule = matchingRuleRegistry.lookup( name );\n             \n-            return matchingRule.getOid();\n+            if ( matchingRule != null )\n+            {\n+                return matchingRule.getOid();\n+            }\n         }\n         catch ( NamingException ne )\n         {\n@@ -336,7 +348,10 @@ public String getOid( String name )\n         {\n             MatchingRuleUse matchingRuleUse = matchingRuleUseRegistry.lookup( name );\n             \n-            return matchingRuleUse.getOid();\n+            if ( matchingRuleUse != null )\n+            {\n+                return matchingRuleUse.getOid();\n+            }\n         }\n         catch ( NamingException ne )\n         {\n@@ -348,7 +363,10 @@ public String getOid( String name )\n         {\n             NameForm nameForm = nameFormRegistry.lookup( name );\n             \n-            return nameForm.getOid();\n+            if ( nameForm != null )\n+            {\n+                return nameForm.getOid();\n+            }\n         }\n         catch ( NamingException ne )\n         {\n@@ -360,7 +378,10 @@ public String getOid( String name )\n         {\n             DITContentRule ditContentRule = ditContentRuleRegistry.lookup( name );\n             \n-            return ditContentRule.getOid();\n+            if ( ditContentRule != null )\n+            {\n+                return ditContentRule.getOid();\n+            }\n         }\n         catch ( NamingException ne )\n         {\n@@ -372,13 +393,17 @@ public String getOid( String name )\n         {\n             DITStructureRule ditStructureRule = ditStructureRuleRegistry.lookup( name );\n             \n-            return ditStructureRule.getOid();\n+            if ( ditStructureRule != null )\n+            {\n+                return ditStructureRule.getOid();\n+            }\n         }\n         catch ( NamingException ne )\n         {\n             // No more registries to look at...\n-            return null;\n         }\n+        \n+        return null;\n     }\n \n ",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/3419be03990bc8eee4a9be70fa06db1a50070dfb/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/Registries.java",
                "sha": "e57d42062a79e1868cbc3ec88e86322a6e5116f6",
                "status": "modified"
            }
        ],
        "message": "fixed some potential NPE in the getOid() method\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/shared-schema@883616 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/44598c6e3fc43b4069d9fb85eecd1394513d5907",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "RegistriesTest.java"
        ]
    },
    "directory-ldap-api_3dda17a": {
        "bug_id": "directory-ldap-api_3dda17a",
        "commit": "https://github.com/apache/directory-ldap-api/commit/3dda17a38172466756cfcd032c1032d8e5f8ed35",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/3dda17a38172466756cfcd032c1032d8e5f8ed35/dsml-parser/src/main/java/org/apache/directory/shared/dsmlv2/ParserUtils.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/dsml-parser/src/main/java/org/apache/directory/shared/dsmlv2/ParserUtils.java?ref=3dda17a38172466756cfcd032c1032d8e5f8ed35",
                "deletions": 3,
                "filename": "dsml-parser/src/main/java/org/apache/directory/shared/dsmlv2/ParserUtils.java",
                "patch": "@@ -269,7 +269,7 @@ public static boolean isRequestIdNeeded( Dsmlv2Container container ) throws XmlP\n \n \n     /**\n-     * XML Pretty Printer XSLT Tranformation\n+     * XML Pretty Printer XSLT Transformation\n      * \n      * @param document\n      *      the Dom4j Document\n@@ -288,8 +288,9 @@ public static Document styleDocument( Document document )\n         }\n         catch ( TransformerConfigurationException e1 )\n         {\n-            // TODO Auto-generated catch block\n             e1.printStackTrace();\n+            // return original document\n+            return document;\n         }\n \n         // now lets style the given document\n@@ -301,8 +302,9 @@ public static Document styleDocument( Document document )\n         }\n         catch ( TransformerException e )\n         {\n-            // TODO Auto-generated catch block\n             e.printStackTrace();\n+            // return original document\n+            return document;\n         }\n \n         // return the transformed document",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/3dda17a38172466756cfcd032c1032d8e5f8ed35/dsml-parser/src/main/java/org/apache/directory/shared/dsmlv2/ParserUtils.java",
                "sha": "bc7471961e41672b7a131ac06e3448d73e086235",
                "status": "modified"
            }
        ],
        "message": "If for whatever reason the pretty print transformation fails return the original document and avoid NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@945221 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/2662e1394ef4896de70c0c0aa4fbb5ee631b737f",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "ParserUtilsTest.java"
        ]
    },
    "directory-ldap-api_47fc5b7": {
        "bug_id": "directory-ldap-api_47fc5b7",
        "commit": "https://github.com/apache/directory-ldap-api/commit/47fc5b70c14caec98bf60821fa876cc83924d85a",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/47fc5b70c14caec98bf60821fa876cc83924d85a/ldap/src/main/java/org/apache/directory/shared/ldap/message/ModifyDnRequestImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/message/ModifyDnRequestImpl.java?ref=47fc5b70c14caec98bf60821fa876cc83924d85a",
                "deletions": 1,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/message/ModifyDnRequestImpl.java",
                "patch": "@@ -328,7 +328,10 @@ public String toString()\n \n         sb.append( \"    ModifyDN Response\\n\" );\n         sb.append( \"        Entry : '\" ).append( name ).append( \"'\\n\" );\n-        sb.append( \"        New RDN : '\" ).append( newRdn.toString() ).append( \"'\\n\" );\n+        if( newRdn != null )\n+        {\n+            sb.append( \"        New RDN : '\" ).append( newRdn.toString() ).append( \"'\\n\" );\n+        }\n         sb.append( \"        Delete old RDN : \" ).append( deleteOldRdn ).append( \"\\n\" );\n \n         if ( newSuperior != null )",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/47fc5b70c14caec98bf60821fa876cc83924d85a/ldap/src/main/java/org/apache/directory/shared/ldap/message/ModifyDnRequestImpl.java",
                "sha": "30af7372ae9f9a1a82718f4fc388d99706b28341",
                "status": "modified"
            }
        ],
        "message": "fixed a NPE in toString() method\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@917172 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/cde147bedf627cca64d716b27133e69595aa2fd1",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "ModifyDnRequestImplTest.java"
        ]
    },
    "directory-ldap-api_4e7f537": {
        "bug_id": "directory-ldap-api_4e7f537",
        "commit": "https://github.com/apache/directory-ldap-api/commit/4e7f53723123ce03095495a53a5da70b9d5f0c23",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/4e7f53723123ce03095495a53a5da70b9d5f0c23/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/DefaultSchemaManager.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/DefaultSchemaManager.java?ref=4e7f53723123ce03095495a53a5da70b9d5f0c23",
                "deletions": 0,
                "filename": "ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/DefaultSchemaManager.java",
                "patch": "@@ -822,6 +822,12 @@ public boolean loadWithDeps( String... schemas ) throws Exception\n      */\n     private final void loadDepsFirst( Registries registries, Schema schema ) throws Exception\n     {\n+        if ( schema == null )\n+        {\n+            LOG.info( \"The schema is null\" );\n+            return;\n+        }\n+\n         if ( schema.isDisabled() && !registries.isDisabledAccepted() )\n         {\n             LOG.info( \"The schema is disabled and the registries does not accepted disabled schema\" );",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/4e7f53723123ce03095495a53a5da70b9d5f0c23/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/DefaultSchemaManager.java",
                "sha": "0caf209a742daa2ab88159c8fe4fe0416b0b52bf",
                "status": "modified"
            }
        ],
        "message": "Fixed a NPE when trying to load a bad schema (schema that does not exist)\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/shared-schema@887297 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/e4394eebaa1a56baee28cef53329b100bb442db0",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "DefaultSchemaManagerTest.java"
        ]
    },
    "directory-ldap-api_5435249": {
        "bug_id": "directory-ldap-api_5435249",
        "commit": "https://github.com/apache/directory-ldap-api/commit/543524998213e6c1f3e71481b6ffffac0142b0f7",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/543524998213e6c1f3e71481b6ffffac0142b0f7/ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java?ref=543524998213e6c1f3e71481b6ffffac0142b0f7",
                "deletions": 1,
                "filename": "ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "patch": "@@ -620,7 +620,7 @@ public boolean close() throws IOException\n         }\n \n         // And close the connector if it has been created locally\n-        if ( localConnector )\n+        if ( localConnector && ( connector != null ) )\n         {\n             // Release the connector\n             connector.dispose();",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/543524998213e6c1f3e71481b6ffffac0142b0f7/ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "sha": "6eda8d70f1aa87976574a6acf69f6aa902540839",
                "status": "modified"
            }
        ],
        "message": "Fixed a potential NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1028388 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/5eb2e14597f6534440a8f4d499c29d65d66d717e",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "LdapNetworkConnectionTest.java"
        ]
    },
    "directory-ldap-api_63f0085": {
        "bug_id": "directory-ldap-api_63f0085",
        "commit": "https://github.com/apache/directory-ldap-api/commit/63f008531c7da773c66aa8b6d478a3084e9bcc01",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/63f008531c7da773c66aa8b6d478a3084e9bcc01/ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java?ref=63f008531c7da773c66aa8b6d478a3084e9bcc01",
                "deletions": 1,
                "filename": "ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "patch": "@@ -936,7 +936,7 @@ public BindResponse bind( DN name, String credentials ) throws LdapException, IO\n \n         // Create the BindRequest\n         BindRequest bindRequest = createBindRequest( name, StringTools.getBytesUtf8( credentials ), null,\n-            ( Control ) null );\n+            new Control[0] );\n \n         return bind( bindRequest );\n     }",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/63f008531c7da773c66aa8b6d478a3084e9bcc01/ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "sha": "8cc8b1a929ccf73885a9d5aaa2bb8209262e5343",
                "status": "modified"
            }
        ],
        "message": "Fixed an NPE occurring in AbstractMessage.\nSending null in a variable length argument list (Type arg...) creates an array filled with a null value ([null]) and not an empty array ([]).\nThis caused a NPE later in the AbstractMessage class.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1022853 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/34e0aff621b8363ded926d95385fbcec57c91bb0",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "LdapNetworkConnectionTest.java"
        ]
    },
    "directory-ldap-api_660bc19": {
        "bug_id": "directory-ldap-api_660bc19",
        "commit": "https://github.com/apache/directory-ldap-api/commit/660bc1952d2be58639a5c3403458f633c8698ead",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/660bc1952d2be58639a5c3403458f633c8698ead/ldap/src/main/java/org/apache/directory/shared/ldap/schema/LdapSyntax.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/LdapSyntax.java?ref=660bc1952d2be58639a5c3403458f633c8698ead",
                "deletions": 7,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/LdapSyntax.java",
                "patch": "@@ -145,7 +145,7 @@ public void setHumanReadable( boolean humanReadable )\n         {\n             throw new UnsupportedOperationException( I18n.err( I18n.ERR_04441, getName() ) );\n         }\n-        \n+\n         if ( !isReadOnly )\n         {\n             this.isHumanReadable = humanReadable;\n@@ -176,7 +176,7 @@ public void setSyntaxChecker( SyntaxChecker syntaxChecker )\n         {\n             throw new UnsupportedOperationException( I18n.err( I18n.ERR_04441, getName() ) );\n         }\n-        \n+\n         if ( !isReadOnly )\n         {\n             this.syntaxChecker = syntaxChecker;\n@@ -195,7 +195,7 @@ public void updateSyntaxChecker( SyntaxChecker newSyntaxChecker )\n         {\n             throw new UnsupportedOperationException( I18n.err( I18n.ERR_04441, getName() ) );\n         }\n-        \n+\n         this.syntaxChecker = newSyntaxChecker;\n     }\n \n@@ -236,12 +236,13 @@ public void addToRegistries( List<Throwable> errors, Registries registries ) thr\n             }\n         }\n     }\n-    \n-    \n+\n+\n     /**\n      * {@inheritDoc}\n      */\n-    @SuppressWarnings(\"PMD.CollapsibleIfStatements\") // Used because of comments\n+    @SuppressWarnings(\"PMD.CollapsibleIfStatements\")\n+    // Used because of comments\n     public void removeFromRegistries( List<Throwable> errors, Registries registries ) throws LdapException\n     {\n         if ( registries != null )\n@@ -303,7 +304,19 @@ public boolean equals( Object o )\n         }\n \n         // Check the SyntaxChecker (not a equals)\n-        return syntaxChecker.getOid().equals( that.syntaxChecker.getOid() );\n+        if ( syntaxChecker != null )\n+        {\n+            if ( that.syntaxChecker == null )\n+            {\n+                return false;\n+            }\n+\n+            return syntaxChecker.getOid().equals( that.syntaxChecker.getOid() );\n+        }\n+        else\n+        {\n+            return that.syntaxChecker == null;\n+        }\n     }\n \n ",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/660bc1952d2be58639a5c3403458f633c8698ead/ldap/src/main/java/org/apache/directory/shared/ldap/schema/LdapSyntax.java",
                "sha": "66e39473d15e5ec6cdb31d1419c07e32aef9ffaa",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/660bc1952d2be58639a5c3403458f633c8698ead/ldap/src/main/java/org/apache/directory/shared/ldap/schema/MatchingRule.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/MatchingRule.java?ref=660bc1952d2be58639a5c3403458f633c8698ead",
                "deletions": 9,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/MatchingRule.java",
                "patch": "@@ -252,7 +252,7 @@ public void setSyntaxOid( String oid )\n         {\n             throw new UnsupportedOperationException( I18n.err( I18n.ERR_04441, getName() ) );\n         }\n-        \n+\n         if ( !isReadOnly )\n         {\n             this.ldapSyntaxOid = oid;\n@@ -271,7 +271,7 @@ public void setSyntax( LdapSyntax ldapSyntax )\n         {\n             throw new UnsupportedOperationException( I18n.err( I18n.ERR_04441, getName() ) );\n         }\n-        \n+\n         if ( !isReadOnly )\n         {\n             this.ldapSyntax = ldapSyntax;\n@@ -291,7 +291,7 @@ public void updateSyntax( LdapSyntax ldapSyntax )\n         {\n             throw new UnsupportedOperationException( I18n.err( I18n.ERR_04441, getName() ) );\n         }\n-        \n+\n         this.ldapSyntax = ldapSyntax;\n         this.ldapSyntaxOid = ldapSyntax.getOid();\n     }\n@@ -321,7 +321,7 @@ public void setLdapComparator( LdapComparator<?> ldapComparator )\n         {\n             throw new UnsupportedOperationException( I18n.err( I18n.ERR_04441, getName() ) );\n         }\n-        \n+\n         if ( !isReadOnly )\n         {\n             this.ldapComparator = ( LdapComparator<? super Object> ) ldapComparator;\n@@ -340,7 +340,7 @@ public void updateLdapComparator( LdapComparator<?> ldapComparator )\n         {\n             throw new UnsupportedOperationException( I18n.err( I18n.ERR_04441, getName() ) );\n         }\n-        \n+\n         this.ldapComparator = ( LdapComparator<? super Object> ) ldapComparator;\n     }\n \n@@ -369,7 +369,7 @@ public void setNormalizer( Normalizer normalizer )\n         {\n             throw new UnsupportedOperationException( I18n.err( I18n.ERR_04441, getName() ) );\n         }\n-        \n+\n         if ( !isReadOnly )\n         {\n             this.normalizer = normalizer;\n@@ -388,7 +388,7 @@ public void updateNormalizer( Normalizer normalizer )\n         {\n             throw new UnsupportedOperationException( I18n.err( I18n.ERR_04441, getName() ) );\n         }\n-        \n+\n         this.normalizer = normalizer;\n     }\n \n@@ -474,13 +474,29 @@ public boolean equals( Object o )\n             }\n         }\n \n-        // Check the Syntax\n+        // Check the Syntax OID\n         if ( !compareOid( ldapSyntaxOid, that.ldapSyntaxOid ) )\n         {\n             return false;\n         }\n \n-        return ldapSyntax.equals( that.ldapSyntax );\n+        // Check the Syntax\n+        if ( ldapSyntax != null )\n+        {\n+            if ( !ldapSyntax.equals( that.ldapSyntax ) )\n+            {\n+                return false;\n+            }\n+        }\n+        else\n+        {\n+            if ( that.ldapSyntax != null )\n+            {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n     }\n \n ",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/660bc1952d2be58639a5c3403458f633c8698ead/ldap/src/main/java/org/apache/directory/shared/ldap/schema/MatchingRule.java",
                "sha": "5b05b4a37b3e913a6064e24b32819641e72b8033",
                "status": "modified"
            }
        ],
        "message": "Fixed a few NPEs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1005803 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/f2c8f68172ad679562aff8401e863f5ad09d09b2",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "MatchingRuleTest.java"
        ]
    },
    "directory-ldap-api_6b30ea2": {
        "bug_id": "directory-ldap-api_6b30ea2",
        "commit": "https://github.com/apache/directory-ldap-api/commit/6b30ea237e73f3e92939dd5ab8f3130d95c1c3fe",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/6b30ea237e73f3e92939dd5ab8f3130d95c1c3fe/ldap/src/main/java/org/apache/directory/shared/ldap/schema/UsageEnum.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/UsageEnum.java?ref=6b30ea237e73f3e92939dd5ab8f3130d95c1c3fe",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/UsageEnum.java",
                "patch": "@@ -117,6 +117,11 @@ else if ( \"userApplications\".equals( usage ) )\n      */\n     public static String render( UsageEnum usage )\n     {\n+        if ( usage == null)\n+        {\n+            return \"\";\n+        }\n+        \n         switch ( usage )\n         {\n             case DIRECTORY_OPERATION    : return \"directoryOperation\";",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/6b30ea237e73f3e92939dd5ab8f3130d95c1c3fe/ldap/src/main/java/org/apache/directory/shared/ldap/schema/UsageEnum.java",
                "sha": "c0d9976a8135df938cd9fda27119524a4bd75fe5",
                "status": "modified"
            }
        ],
        "message": "Added a defensive test against NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/trunks/shared@485958 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/1dce3b8b6cf4f76704a0b9dd7e8daa15f812419e",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "UsageEnumTest.java"
        ]
    },
    "directory-ldap-api_7d0fa50": {
        "bug_id": "directory-ldap-api_7d0fa50",
        "commit": "https://github.com/apache/directory-ldap-api/commit/7d0fa503a8681ed3bb7e0d7ae57b953f848c0bf8",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/7d0fa503a8681ed3bb7e0d7ae57b953f848c0bf8/cursor/src/main/java/org/apache/directory/shared/ldap/cursor/ListCursor.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/cursor/src/main/java/org/apache/directory/shared/ldap/cursor/ListCursor.java?ref=7d0fa503a8681ed3bb7e0d7ae57b953f848c0bf8",
                "deletions": 10,
                "filename": "cursor/src/main/java/org/apache/directory/shared/ldap/cursor/ListCursor.java",
                "patch": "@@ -67,6 +67,10 @@\n      */\n     public ListCursor( Comparator<E> comparator, int start, List<E> list, int end )\n     {\n+    \tif ( list == null )\n+    \t{\n+    \t\tlist = Collections.emptyList();\n+    \t}\n         if ( ( start < 0  )|| ( start > list.size() ) )\n         {\n             throw new IllegalArgumentException( I18n.err( I18n.ERR_02005, start ) );\n@@ -85,16 +89,7 @@ public ListCursor( Comparator<E> comparator, int start, List<E> list, int end )\n         }\n \n         this.comparator = comparator;\n-\n-        if ( list != null )\n-        {\n-            this.list = list;\n-        }\n-        else\n-        {\n-            this.list = Collections.emptyList();\n-        }\n-\n+        this.list = list;\n         this.start = start;\n         this.end = end;\n     }",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/7d0fa503a8681ed3bb7e0d7ae57b953f848c0bf8/cursor/src/main/java/org/apache/directory/shared/ldap/cursor/ListCursor.java",
                "sha": "6f7452c1ea4d249f509c07e0b9564ab83a75e4d0",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE\n\nFrom FireBug report\nRCN: Nullcheck of value previously dereferenced (RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE)\nA value is checked here to see whether it is null, but this value can't be null because it was previously dereferenced and if it were null a null pointer exception would have occurred at the earlier dereference. Essentially, this code and the previous dereference disagree as to whether this value is allowed to be null. Either the check is redundant or the previous dereference is erroneous.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@944577 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/a6368dbb8e7d52446f8aa674824601c3888880d7",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "ListCursorTest.java"
        ]
    },
    "directory-ldap-api_7f0a024": {
        "bug_id": "directory-ldap-api_7f0a024",
        "commit": "https://github.com/apache/directory-ldap-api/commit/7f0a024a88d4c26040c40944cd3e86056e4b29fc",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/7f0a024a88d4c26040c40944cd3e86056e4b29fc/integ/src/test/java/org/apache/directory/shared/ldap/model/name/DnTest.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/integ/src/test/java/org/apache/directory/shared/ldap/model/name/DnTest.java?ref=7f0a024a88d4c26040c40944cd3e86056e4b29fc",
                "deletions": 19,
                "filename": "integ/src/test/java/org/apache/directory/shared/ldap/model/name/DnTest.java",
                "patch": "@@ -221,7 +221,7 @@ public void testAddAllWithMultivaluedAttribute() throws LdapException\n         Dn target = new Dn();\n \n         assertTrue( Dn.isValid( \"cn=Kate Bush+sn=Bush,ou=system\" ) );\n-        target = target.addAll( dn );\n+        target = target.add( dn );\n         assertEquals( \"cn=Kate Bush+sn=Bush,ou=system\", target.toString() );\n         assertEquals( \"cn=Kate Bush+sn=Bush,ou=system\", target.getName() );\n     }\n@@ -733,7 +733,7 @@ public void testDnAddAll() throws LdapException\n     {\n         Dn dn = new Dn( \"a = b\" );\n         Dn dn2 = new Dn( \"c = d\" );\n-        dn = dn.addAll( dn2 );\n+        dn = dn.add( dn2 );\n         assertEquals( \"c = d,a = b\", dn.getName() );\n     }\n \n@@ -748,7 +748,7 @@ public void testDnAddAllAddedNameEmpty() throws LdapException\n     {\n         Dn dn = new Dn( \"a = b\" );\n         Dn dn2 = new Dn();\n-        dn = dn.addAll( dn2 );\n+        dn = dn.add( dn2 );\n         assertEquals( \"a=b\", dn.getNormName() );\n         assertEquals( \"a = b\", dn.getName() );\n     }\n@@ -764,7 +764,7 @@ public void testDnAddAllNameEmpty() throws LdapException\n     {\n         Dn dn = new Dn();\n         Dn dn2 = new Dn( \"a = b\" );\n-        dn = dn.addAll( dn2 );\n+        dn = dn.add( dn2 );\n         assertEquals( \"a = b\", dn.getName() );\n     }\n \n@@ -779,7 +779,7 @@ public void testDnAt0AddAll() throws LdapException\n     {\n         Dn dn = new Dn( \"a = b\" );\n         Dn dn2 = new Dn( \"c = d\" );\n-        dn = dn2.addAll( dn );\n+        dn = dn2.add( dn );\n         assertEquals( \"a = b,c = d\", dn.getName() );\n     }\n \n@@ -794,7 +794,7 @@ public void testDnAt1AddAll() throws LdapException\n     {\n         Dn dn = new Dn( \"a = b\" );\n         Dn dn2 = new Dn( \"c = d\" );\n-        dn = dn.addAll( dn2 );\n+        dn = dn.add( dn2 );\n         assertEquals( \"c = d,a = b\", dn.getName() );\n     }\n \n@@ -809,7 +809,7 @@ public void testDnAddAllAt0AddedNameEmpty() throws LdapException\n     {\n         Dn dn = new Dn( \"a = b\" );\n         Dn dn2 = new Dn();\n-        dn = dn.addAll( dn2 );\n+        dn = dn.add( dn2 );\n         assertEquals( \"a=b\", dn.getNormName() );\n         assertEquals( \"a = b\", dn.getName() );\n     }\n@@ -825,7 +825,7 @@ public void testDnAddAllAt0NameEmpty() throws LdapException\n     {\n         Dn dn = new Dn();\n         Dn dn2 = new Dn( \"a = b\" );\n-        dn = dn.addAll( dn2 );\n+        dn = dn.add( dn2 );\n         assertEquals( \"a = b\", dn.getName() );\n     }\n \n@@ -1677,7 +1677,7 @@ public void testAddAllName0() throws Exception\n     {\n         Dn name = new Dn();\n         Dn name0 = new Dn( \"cn=HomeDir,cn=John,ou=Marketing,ou=East\" );\n-        assertTrue( name0.equals( name.addAll( name0 ) ) );\n+        assertTrue( name0.equals( name.add( name0 ) ) );\n     }\n \n \n@@ -1693,7 +1693,7 @@ public void testAddAllNameExisting0() throws Exception\n         Dn name1 = new Dn( \"ou=Marketing,ou=East\" );\n         Dn name2 = new Dn( \"cn=HomeDir,cn=John\" );\n         Dn nameAdded = new Dn( \"cn=HomeDir,cn=John, ou=Marketing,ou=East\" );\n-        assertTrue( nameAdded.equals( name1.addAll( name2 ) ) );\n+        assertTrue( nameAdded.equals( name1.add( name2 ) ) );\n     }\n \n \n@@ -1711,9 +1711,9 @@ public void testAddAllName1() throws Exception\n         Dn name1 = new Dn( \"cn=HomeDir,cn=John\" );\n         Dn name2 = new Dn( \"cn=HomeDir,cn=John,ou=Marketing,ou=East\" );\n \n-        name = name.addAll( name0 );\n+        name = name.add( name0 );\n         assertTrue( name0.equals( name ) );\n-        assertTrue( name2.equals( name.addAll( name1 ) ) );\n+        assertTrue( name2.equals( name.add( name1 ) ) );\n     }\n \n \n@@ -1731,9 +1731,9 @@ public void testAddAllintName0() throws Exception\n         Dn name1 = new Dn( \"cn=HomeDir,cn=John\" );\n         Dn name2 = new Dn( \"cn=HomeDir,cn=John,ou=Marketing,ou=East\" );\n \n-        name = name.addAll( name0 );\n+        name = name.add( name0 );\n         assertTrue( name0.equals( name ) );\n-        assertTrue( name2.equals( name.addAll( name1 ) ) );\n+        assertTrue( name2.equals( name.add( name1 ) ) );\n     }\n \n \n@@ -2113,7 +2113,7 @@ public void testAddAllName() throws LdapException, InvalidNameException\n         Dn aName = new Dn( \"cn=four,cn=three,cn=two,cn=one\" );\n \n         assertSame( jName, jName.addAll( new LdapName( \"cn=seven,cn=six\" ) ) );\n-        assertNotSame( aName, aName.addAll( new Dn( \"cn=seven,cn=six\" ) ) );\n+        assertNotSame( aName, aName.add( new Dn( \"cn=seven,cn=six\" ) ) );\n         assertNotSame( jName.toString(), aName.toString() );\n     }\n \n@@ -2128,15 +2128,15 @@ public void testAddAllIntName() throws LdapException, InvalidNameException\n         Dn aName = new Dn( \"cn=four,cn=three,cn=two,cn=one\" );\n \n         assertSame( jName, jName.addAll( 0, new LdapName( \"cn=zero,cn=zero.5\" ) ) );\n-        assertNotSame( aName, aName.addAll( new Dn( \"cn=zero,cn=zero.5\" ) ) );\n+        assertNotSame( aName, aName.add( new Dn( \"cn=zero,cn=zero.5\" ) ) );\n         assertNotSame( jName.toString(), aName.toString() );\n \n         assertSame( jName, jName.addAll( 2, new LdapName( \"cn=zero,cn=zero.5\" ) ) );\n-        assertNotSame( aName, aName.addAll( new Dn( \"cn=zero,cn=zero.5\" ) ) );\n+        assertNotSame( aName, aName.add( new Dn( \"cn=zero,cn=zero.5\" ) ) );\n         assertNotSame( jName.toString(), aName.toString() );\n \n         assertSame( jName, jName.addAll( jName.size(), new LdapName( \"cn=zero,cn=zero.5\" ) ) );\n-        assertNotSame( aName, aName.addAll( new Dn( \"cn=zero,cn=zero.5\" ) ) );\n+        assertNotSame( aName, aName.add( new Dn( \"cn=zero,cn=zero.5\" ) ) );\n         assertNotSame( jName.toString(), aName.toString() );\n     }\n \n@@ -2918,7 +2918,7 @@ public void testNormalize() throws Exception\n \n         Dn anotherDn = new Dn( \"ou=x,ou=users\" );\n \n-        dn = dn.addAll( anotherDn );\n+        dn = dn.add( anotherDn );\n         assertTrue( dn.isSchemaAware() );\n \n         dn.applySchemaManager( schemaManager );",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/7f0a024a88d4c26040c40944cd3e86056e4b29fc/integ/src/test/java/org/apache/directory/shared/ldap/model/name/DnTest.java",
                "sha": "7c3e91431cf2d723c444771e41595681b56e04e3",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/7f0a024a88d4c26040c40944cd3e86056e4b29fc/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/name/Dn.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/name/Dn.java?ref=7f0a024a88d4c26040c40944cd3e86056e4b29fc",
                "deletions": 20,
                "filename": "ldap/model/src/main/java/org/apache/directory/shared/ldap/model/name/Dn.java",
                "patch": "@@ -701,14 +701,12 @@ public Rdn getRdn( int posn )\n      */\n     public Rdn getRdn()\n     {\n-        if ( rdns.size() == 0 )\n-        {\n-            return null;\n-        }\n-        else\n+        if ( isNullOrEmpty( this ) )\n         {\n-            return rdns.get( 0 ).clone();\n+            return Rdn.EMPTY_RDN;\n         }\n+        \n+        return rdns.get( 0 ).clone();\n     }\n \n \n@@ -891,7 +889,7 @@ public Dn getAncestorOf( Dn descendant ) throws LdapInvalidDnException\n     /**\n      * {@inheritDoc}\n      */\n-    public Dn addAll( Dn suffix ) throws LdapInvalidDnException\n+    public Dn add( Dn suffix ) throws LdapInvalidDnException\n     {\n         if ( ( suffix == null ) || ( suffix.size() == 0 ) )\n         {\n@@ -979,14 +977,9 @@ public Dn add( Rdn newRdn )  throws LdapInvalidDnException\n      */\n     public Dn getParent()\n     {\n-        if ( isEmpty() )\n+        if ( isNullOrEmpty( this ) )\n         {\n-            return null;\n-        }\n-\n-        if ( rdns.size() == 0 )\n-        {\n-            return EMPTY_DN;\n+            return this;\n         }\n         \n         int posn = rdns.size() - 1;\n@@ -1299,12 +1292,7 @@ public boolean isSchemaAware()\n      */\n     public static boolean isNullOrEmpty( Dn dn )\n     {\n-        if ( dn != null )\n-        {\n-            return dn.isEmpty();\n-        }\n-\n-        return true;\n+        return ( dn == null ) || dn.isEmpty();\n     }\n     \n     ",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/7f0a024a88d4c26040c40944cd3e86056e4b29fc/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/name/Dn.java",
                "sha": "a5676c3fb64c3d8a409174974f8d0bce68cfb048",
                "status": "modified"
            }
        ],
        "message": "o Renamed the addAll( Dn ) method to add( Dn )\no Fixed some potential NPE\no Minor other refactorings\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1085318 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/4aa638b7bd2e7b25751caf7a368b5214ac7e75a1",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "DnTest.java"
        ]
    },
    "directory-ldap-api_a3a63d8": {
        "bug_id": "directory-ldap-api_a3a63d8",
        "commit": "https://github.com/apache/directory-ldap-api/commit/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AcceptAllSyntaxChecker.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AcceptAllSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 3,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AcceptAllSyntaxChecker.java",
                "patch": "@@ -31,8 +31,7 @@\n     /**\n      * Creates a SyntaxChecker which accepts all values.\n      * \n-     * @param oid\n-     *            the oid of the Syntax this checker is associated with\n+     * @param oid the oid of the Syntax this checker is associated with\n      */\n     public AcceptAllSyntaxChecker(String oid)\n     {\n@@ -45,7 +44,7 @@ public AcceptAllSyntaxChecker(String oid)\n      * \n      * @see SyntaxChecker#isValidSyntax(Object)\n      */\n-    public boolean isValidSyntax( Object a_value )\n+    public boolean isValidSyntax( Object value )\n     {\n         return true;\n     }",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AcceptAllSyntaxChecker.java",
                "sha": "2e3af113dcc7edb0db11c4f243ad0bf33fe109b6",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AttributeTypeDescriptionSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AttributeTypeDescriptionSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AttributeTypeDescriptionSyntaxChecker.java",
                "patch": "@@ -86,6 +86,18 @@ public AttributeTypeDescriptionSyntaxChecker()\n     {\n         super( SC_OID );\n     }\n+    \n+    /**\n+     * \n+     * Creates a new instance of AttributeTypeDescriptionSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected AttributeTypeDescriptionSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AttributeTypeDescriptionSyntaxChecker.java",
                "sha": "320b96f4eb9d03bec334ac9b42017195f7807c09",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AttributeTypeUsageSyntaxChecker.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AttributeTypeUsageSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 1,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AttributeTypeUsageSyntaxChecker.java",
                "patch": "@@ -38,11 +38,28 @@\n {\n     /** The Apache OID for meta syntax checker */\n     private static final String SC_OID = \"1.3.6.1.4.1.18060.0.4.0.0.3\";\n-    \n+\n+    /**\n+     * \n+     * Creates a new instance of AttributeTypeUsageSyntaxChecker.\n+     *\n+     */\n     public AttributeTypeUsageSyntaxChecker()\n     {\n         super( SC_OID );\n     }\n+\n+    /**\n+     * \n+     * Creates a new instance of AttributeTypeUsageSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected AttributeTypeUsageSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n     \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AttributeTypeUsageSyntaxChecker.java",
                "sha": "3348ccd25e637c21ecdcf2786e837817ffdf0bb0",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BinarySyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BinarySyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BinarySyntaxChecker.java",
                "patch": "@@ -40,6 +40,18 @@ public BinarySyntaxChecker()\n         super( SC_OID );\n     }\n \n+    /**\n+     * \n+     * Creates a new instance of BinarySyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected BinarySyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /**\n      * @see org.apache.directory.shared.ldap.schema.syntax.SyntaxChecker#isValidSyntax(Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BinarySyntaxChecker.java",
                "sha": "6187a16e4a4057c22bc4de1c36e187f6b19c110b",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BitStringSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BitStringSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BitStringSyntaxChecker.java",
                "patch": "@@ -51,6 +51,18 @@ public BitStringSyntaxChecker()\n         super( SC_OID );\n     }\n     \n+    /**\n+     * \n+     * Creates a new instance of BitStringSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected BitStringSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /**\n      * A shared and static method used to check that the string is a BitString.\n      * A BitString is a string of bits, between quots and followed by a 'B' :",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BitStringSyntaxChecker.java",
                "sha": "042ba5bec24749f0be5da2c8ff487cc419c242e7",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BooleanSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BooleanSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BooleanSyntaxChecker.java",
                "patch": "@@ -49,6 +49,18 @@ public BooleanSyntaxChecker()\n         super( SC_OID );\n     }\n     \n+    /**\n+     * \n+     * Creates a new instance of BooleanSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected BooleanSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BooleanSyntaxChecker.java",
                "sha": "93ddd27f8a9ae727c0c403feb95df60ee17617bb",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/CountrySyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/CountrySyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/CountrySyntaxChecker.java",
                "patch": "@@ -96,6 +96,18 @@ public CountrySyntaxChecker()\n     }\n     \n     \n+    /**\n+     * \n+     * Creates a new instance of CountrySyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected CountrySyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/CountrySyntaxChecker.java",
                "sha": "b28419663e647147a495b74a48d6d4b5ad0bc30d",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DITContentRuleDescriptionSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DITContentRuleDescriptionSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DITContentRuleDescriptionSyntaxChecker.java",
                "patch": "@@ -67,6 +67,18 @@ public DITContentRuleDescriptionSyntaxChecker()\n     }\n \n \n+    /**\n+     * \n+     * Creates a new instance of DITContentRuleDescriptionSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected DITContentRuleDescriptionSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DITContentRuleDescriptionSyntaxChecker.java",
                "sha": "9f89d760bd42cf768a99e16ea4b5b791b9257709",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DITStructureRuleDescriptionSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DITStructureRuleDescriptionSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DITStructureRuleDescriptionSyntaxChecker.java",
                "patch": "@@ -68,6 +68,18 @@ public DITStructureRuleDescriptionSyntaxChecker()\n         super( SC_OID );\n     }\n \n+    /**\n+     * \n+     * Creates a new instance of DITStructureRuleDescriptionSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected DITStructureRuleDescriptionSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DITStructureRuleDescriptionSyntaxChecker.java",
                "sha": "a1a6799ddc46ef5a5b14360603cdb9970ea312a9",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DNSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DNSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DNSyntaxChecker.java",
                "patch": "@@ -46,6 +46,18 @@ public DNSyntaxChecker()\n         super( SC_OID );\n     }\n \n+    /**\n+     * \n+     * Creates a new instance of DNSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected DNSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DNSyntaxChecker.java",
                "sha": "7437b884c4f3c102c7225507cdd2d968f215c4ca",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DeliveryMethodSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DeliveryMethodSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DeliveryMethodSyntaxChecker.java",
                "patch": "@@ -79,6 +79,18 @@ public DeliveryMethodSyntaxChecker()\n         super( SC_OID );\n     }\n     \n+    /**\n+     * \n+     * Creates a new instance of DeliveryMethodSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected DeliveryMethodSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /**\n      * \n      * Check if the string contains a delivery method which has ",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DeliveryMethodSyntaxChecker.java",
                "sha": "85b74e5da371538893f811228dfe23a09e2e531b",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DirectoryStringSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DirectoryStringSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DirectoryStringSyntaxChecker.java",
                "patch": "@@ -49,6 +49,18 @@ public DirectoryStringSyntaxChecker()\n     }\n     \n     \n+    /**\n+     * \n+     * Creates a new instance of DirectoryStringSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected DirectoryStringSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DirectoryStringSyntaxChecker.java",
                "sha": "21411284a957a1a4bfbaa2ebabaf07e23c84067e",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/FacsimileTelephoneNumberSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/FacsimileTelephoneNumberSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/FacsimileTelephoneNumberSyntaxChecker.java",
                "patch": "@@ -86,6 +86,18 @@ public FacsimileTelephoneNumberSyntaxChecker()\n     }\n \n \n+    /**\n+     * \n+     * Creates a new instance of FacsimileTelephoneNumberSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected FacsimileTelephoneNumberSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/FacsimileTelephoneNumberSyntaxChecker.java",
                "sha": "5e7764f5fc9670a369c6a1f0c18de4e3b827c5df",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/GeneralizedTimeSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/GeneralizedTimeSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/GeneralizedTimeSyntaxChecker.java",
                "patch": "@@ -95,6 +95,18 @@ public GeneralizedTimeSyntaxChecker()\n         super( SC_OID );\n     }\n     \n+    /**\n+     * \n+     * Creates a new instance of GeneralizedTimeSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected GeneralizedTimeSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/GeneralizedTimeSyntaxChecker.java",
                "sha": "1f13c4ed82766245464c2fd94fad0c53c1834598",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/Ia5StringSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/Ia5StringSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/Ia5StringSyntaxChecker.java",
                "patch": "@@ -48,6 +48,18 @@ public Ia5StringSyntaxChecker()\n         super( SC_OID );\n     }\n     \n+    /**\n+     * \n+     * Creates a new instance of Ia5StringSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected Ia5StringSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/Ia5StringSyntaxChecker.java",
                "sha": "0962d262f36c210642eb60cad5c4d0fe449db84c",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/IntegerSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/IntegerSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/IntegerSyntaxChecker.java",
                "patch": "@@ -56,6 +56,18 @@ public IntegerSyntaxChecker()\n     }\n     \n     \n+    /**\n+     * \n+     * Creates a new instance of IntegerSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected IntegerSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/IntegerSyntaxChecker.java",
                "sha": "aeb78e08046f6b72b7a9b62ded1dc5bcb93786fa",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/JpegSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/JpegSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/JpegSyntaxChecker.java",
                "patch": "@@ -52,6 +52,18 @@ public JpegSyntaxChecker()\n     }\n     \n     \n+    /**\n+     * \n+     * Creates a new instance of JpegSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected JpegSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/JpegSyntaxChecker.java",
                "sha": "e84b65a4db0633d5b54f18f6b6a79e4b27ca1bed",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/LdapSyntaxDescriptionSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/LdapSyntaxDescriptionSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/LdapSyntaxDescriptionSyntaxChecker.java",
                "patch": "@@ -60,6 +60,18 @@ public LdapSyntaxDescriptionSyntaxChecker()\n         super( SC_OID );\n     }\n \n+    /**\n+     * \n+     * Creates a new instance of LdapSyntaxDescriptionSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected LdapSyntaxDescriptionSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/LdapSyntaxDescriptionSyntaxChecker.java",
                "sha": "a1108142c9dbbf1996feabfd010add7efb8b7fa9",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/MatchingRuleDescriptionSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/MatchingRuleDescriptionSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/MatchingRuleDescriptionSyntaxChecker.java",
                "patch": "@@ -68,6 +68,18 @@ public MatchingRuleDescriptionSyntaxChecker()\n     }\n \n \n+    /**\n+     * \n+     * Creates a new instance of MatchingRuleDescriptionSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected MatchingRuleDescriptionSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/MatchingRuleDescriptionSyntaxChecker.java",
                "sha": "3f4f4dea6e1c40341d9ba2156daf1df779503ae4",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/MatchingRuleUseDescriptionSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/MatchingRuleUseDescriptionSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/MatchingRuleUseDescriptionSyntaxChecker.java",
                "patch": "@@ -65,6 +65,18 @@ public MatchingRuleUseDescriptionSyntaxChecker()\n     }\n \n \n+    /**\n+     * \n+     * Creates a new instance of MatchingRuleUseDescriptionSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected MatchingRuleUseDescriptionSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/MatchingRuleUseDescriptionSyntaxChecker.java",
                "sha": "ff1c99fb274f5f76d922d45a31d3b29d602e19af",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NameAndOptionalUIDSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NameAndOptionalUIDSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NameAndOptionalUIDSyntaxChecker.java",
                "patch": "@@ -55,6 +55,18 @@ public NameAndOptionalUIDSyntaxChecker()\n     }\n     \n     \n+    /**\n+     * \n+     * Creates a new instance of NameAndOptionalUIDSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected NameAndOptionalUIDSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NameAndOptionalUIDSyntaxChecker.java",
                "sha": "77892cc0da1ecd9c45227dcb0e565e19cd8d9c99",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NameFormDescriptionSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NameFormDescriptionSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NameFormDescriptionSyntaxChecker.java",
                "patch": "@@ -66,6 +66,18 @@ public NameFormDescriptionSyntaxChecker()\n     }\n \n \n+    /**\n+     * \n+     * Creates a new instance of NameFormDescriptionSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected NameFormDescriptionSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NameFormDescriptionSyntaxChecker.java",
                "sha": "fd972c5beb4ce22aa5d68dd368d85a32d76a7458",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumberSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumberSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumberSyntaxChecker.java",
                "patch": "@@ -51,6 +51,18 @@ public NumberSyntaxChecker()\n     }\n     \n     \n+    /**\n+     * \n+     * Creates a new instance of NumberSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected NumberSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumberSyntaxChecker.java",
                "sha": "b00be917666fa4e6cc480b8c708230ad1fe22aa4",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumericOidSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumericOidSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumericOidSyntaxChecker.java",
                "patch": "@@ -57,6 +57,18 @@ public NumericOidSyntaxChecker()\n     }\n     \n     \n+    /**\n+     * \n+     * Creates a new instance of NumericOidSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected NumericOidSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumericOidSyntaxChecker.java",
                "sha": "aa655216424131f09928294dad755353b36339a9",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumericStringSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumericStringSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumericStringSyntaxChecker.java",
                "patch": "@@ -55,6 +55,18 @@ public NumericStringSyntaxChecker()\n     }\n     \n     \n+    /**\n+     * \n+     * Creates a new instance of NumericStringSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected NumericStringSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumericStringSyntaxChecker.java",
                "sha": "f2a339e16abd7594fbab431136cacc8fd104224b",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/ObjectClassDescriptionSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/ObjectClassDescriptionSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/ObjectClassDescriptionSyntaxChecker.java",
                "patch": "@@ -72,6 +72,18 @@ public ObjectClassDescriptionSyntaxChecker()\n     }\n \n \n+    /**\n+     * \n+     * Creates a new instance of ObjectClassDescriptionSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected ObjectClassDescriptionSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/ObjectClassDescriptionSyntaxChecker.java",
                "sha": "ffe087b821a8753c234fb98e4a16ab5c21cde8b4",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/ObjectClassTypeSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/ObjectClassTypeSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/ObjectClassTypeSyntaxChecker.java",
                "patch": "@@ -46,6 +46,18 @@ public ObjectClassTypeSyntaxChecker()\n     }\n \n     \n+    /**\n+     * \n+     * Creates a new instance of ObjectClassTypeSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected ObjectClassTypeSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/ObjectClassTypeSyntaxChecker.java",
                "sha": "3e2e56b8aa0c95784d8cf6fc1730d84a732cbd15",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OctetStringSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OctetStringSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OctetStringSyntaxChecker.java",
                "patch": "@@ -48,6 +48,18 @@ public OctetStringSyntaxChecker()\n         super( SC_OID );\n     }\n     \n+    /**\n+     * \n+     * Creates a new instance of OctetStringSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected OctetStringSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OctetStringSyntaxChecker.java",
                "sha": "7b8b4e8dee7d83226d503875e143e4ad70a70100",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OidLenSyntaxChecker.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OidLenSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OidLenSyntaxChecker.java",
                "patch": "@@ -49,11 +49,28 @@\n     /** The Syntax OID */\n     private static final String SC_OID = \"1.3.6.1.4.1.18060.0.4.0.0.5\";\n     \n+    /**\n+     * \n+     * Creates a new instance of OidLenSyntaxChecker.\n+     *\n+     */\n     public OidLenSyntaxChecker()\n     {\n         super( SC_OID );\n     }\n     \n+    /**\n+     * \n+     * Creates a new instance of OidLenSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected OidLenSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OidLenSyntaxChecker.java",
                "sha": "2981531344a4772cd226e560e4b1c3defd389fdb",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OidSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OidSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OidSyntaxChecker.java",
                "patch": "@@ -62,6 +62,18 @@ public OidSyntaxChecker()\n     }\n     \n     \n+    /**\n+     * \n+     * Creates a new instance of OidSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected OidSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OidSyntaxChecker.java",
                "sha": "7c23f545e4457d0210c9150f780e0f8ee400ede0",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/PrintableStringSyntaxChecker.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/PrintableStringSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 0,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/PrintableStringSyntaxChecker.java",
                "patch": "@@ -91,6 +91,18 @@ public PrintableStringSyntaxChecker()\n     }\n     \n     \n+    /**\n+     * \n+     * Creates a new instance of PrintableStringSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected PrintableStringSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/PrintableStringSyntaxChecker.java",
                "sha": "188ccf80da5010496ad55b332e0b9f3acd154eb4",
                "status": "modified"
            },
            {
                "additions": 57,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/RegexSyntaxChecker.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/RegexSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 4,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/RegexSyntaxChecker.java",
                "patch": "@@ -19,6 +19,9 @@\n  */\n package org.apache.directory.shared.ldap.schema.syntax;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n \n /**\n  * A SyntaxChecker implemented using Perl5 regular expressions to constrain\n@@ -30,7 +33,7 @@\n public class RegexSyntaxChecker extends AbstractSyntaxChecker\n {\n     /** the set of regular expressions */\n-    private final String[] expressions;\n+    private List<String> expressions;\n \n \n     /**\n@@ -45,10 +48,36 @@\n     public RegexSyntaxChecker( String oid, String[] matchExprArray )\n     {\n         super( oid );\n-        expressions = matchExprArray;\n+        \n+        if ( ( matchExprArray != null ) && ( matchExprArray.length != 0 ) )\n+        {\n+            expressions = new ArrayList<String>( matchExprArray.length );\n+            \n+            for ( String regexp:matchExprArray )\n+            {\n+                expressions.add( regexp );\n+            }\n+        }\n+        else\n+        {\n+            expressions = new ArrayList<String>();\n+        }\n     }\n \n \n+    /**\n+     * \n+     * Creates a new instance of RegexSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected RegexSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+        expressions = new ArrayList<String>();\n+    }\n+    \n     /**\n      * @see org.apache.directory.shared.ldap.schema.syntax.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */\n@@ -61,9 +90,9 @@ public boolean isValidSyntax( Object value )\n         {\n             str = ( String ) value;\n \n-            for ( int i = 0; i < expressions.length; i++ )\n+            for ( String regexp:expressions )\n             {\n-                match = match && str.matches( expressions[i] );\n+                match = match && str.matches( regexp );\n \n                 if ( !match )\n                 {\n@@ -74,4 +103,28 @@ public boolean isValidSyntax( Object value )\n \n         return match;\n     }\n+\n+    /**\n+     * Get the list of regexp stored into this SyntaxChecker\n+     * \n+     * @return AN array containing all the stored regexp\n+     */\n+    public String[] getExpressions()\n+    {\n+        return (String[])expressions.toArray();\n+    }\n+\n+    /**\n+     * Add a list of regexp to be applied by this SyntaxChecker\n+     * \n+     * @param expressions The regexp list to add\n+     */\n+    public void setExpressions( String[] expressions )\n+    {\n+        for ( String regexp:expressions )\n+        {\n+            this.expressions.add( regexp );\n+        }\n+\n+    }\n }",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/RegexSyntaxChecker.java",
                "sha": "124ad41b957fd60267fefeb7a6206afdc0b820b2",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/SyntaxChecker.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/SyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 1,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/SyntaxChecker.java",
                "patch": "@@ -37,7 +37,7 @@\n      * \n      * @return the object identifier of the Syntax this SyntaxChecker validates\n      */\n-    abstract String getSyntaxOid();\n+    String getSyntaxOid();\n \n \n     /**",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/SyntaxChecker.java",
                "sha": "cdac1d38eeee89f08fbbe1291a40a691970d8d11",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/TelephoneNumberSyntaxChecker.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/TelephoneNumberSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 2,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/TelephoneNumberSyntaxChecker.java",
                "patch": "@@ -45,7 +45,7 @@\n public class TelephoneNumberSyntaxChecker extends AbstractSyntaxChecker\n {\n     /** The Syntax OID, according to RFC 4517, par. 3.3.31 */\n-    private static final String OID = \"1.3.6.1.4.1.1466.115.121.1.50\";\n+    private static final String SC_OID = \"1.3.6.1.4.1.1466.115.121.1.50\";\n     \n     /** Other regexps to extend the initial one */\n     private List<String> regexps;\n@@ -67,11 +67,13 @@\n      */\n     public TelephoneNumberSyntaxChecker()\n     {\n-        super( OID );\n+        super( SC_OID );\n     }\n \n     /**\n      * Creates a new instance of TelephoneNumberSyntaxChecker.\n+     * \n+     * @param The OID to associate with this SyntaxChecker\n      */\n     protected TelephoneNumberSyntaxChecker( String oid )\n     {",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/TelephoneNumberSyntaxChecker.java",
                "sha": "b871076af23ec20b6977b1aa3e92d1239f734bec",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/UtcTimeSyntaxChecker.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/UtcTimeSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
                "deletions": 25,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/UtcTimeSyntaxChecker.java",
                "patch": "@@ -22,11 +22,6 @@\n \n import java.util.regex.Pattern;\n \n-import javax.naming.NamingException;\n-\n-\n-import org.apache.directory.shared.ldap.exception.LdapInvalidAttributeValueException;\n-import org.apache.directory.shared.ldap.message.ResultCodeEnum;\n import org.apache.directory.shared.ldap.util.StringTools;\n \n \n@@ -63,10 +58,10 @@\n  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n  * @version $Rev$\n  */\n-public class UtcTimeSyntaxChecker implements SyntaxChecker\n+public class UtcTimeSyntaxChecker extends AbstractSyntaxChecker\n {\n     /** The Syntax OID, according to RFC 4517, par. 3.3.34 */\n-    public static final String OID = \"1.3.6.1.4.1.1466.115.121.1.53\";\n+    private static final String SC_OID = \"1.3.6.1.4.1.1466.115.121.1.53\";\n     \n     /** The GeneralizedDate pattern matching */\n     private static final String UTC_TIME_PATTERN = \n@@ -90,30 +85,22 @@\n      */\n     public UtcTimeSyntaxChecker()\n     {\n+        super( SC_OID );\n     }\n     \n     \n-    /* (non-Javadoc)\n-     * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#assertSyntax(java.lang.Object)\n-     */\n-    public void assertSyntax( Object value ) throws NamingException\n-    {\n-        if ( ! isValidSyntax( value ) )\n-        {\n-            throw new LdapInvalidAttributeValueException( ResultCodeEnum.INVALID_ATTRIBUTE_SYNTAX );\n-        }\n-    }\n-\n-\n-    /* (non-Javadoc)\n-     * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#getSyntaxOid()\n+    /**\n+     * \n+     * Creates a new instance of UtcTimeSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n      */\n-    public String getSyntaxOid()\n+    protected UtcTimeSyntaxChecker( String oid )\n     {\n-        return OID;\n+        super( oid );\n     }\n-\n-\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/UtcTimeSyntaxChecker.java",
                "sha": "162ba53727255a9e994718c1b95707e4702d36ff",
                "status": "modified"
            }
        ],
        "message": "- Added a protected constructor which takes a String (oid) parameter. This is needed if one want to \ncreate a subclass of a SyntaxChecker\n- Added some protection againsta potential NPE in RegexpSC\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/trunks/shared@488616 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/92e86250cf4efb90441a41c1ade7cbcadcd32466",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "UtcTimeSyntaxCheckerTest.java"
        ]
    },
    "directory-ldap-api_aa91a90": {
        "bug_id": "directory-ldap-api_aa91a90",
        "commit": "https://github.com/apache/directory-ldap-api/commit/aa91a9034314b4b54919a3bb1942ff7600e46377",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/aa91a9034314b4b54919a3bb1942ff7600e46377/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java?ref=aa91a9034314b4b54919a3bb1942ff7600e46377",
                "deletions": 2,
                "filename": "ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "patch": "@@ -1994,9 +1994,9 @@ private boolean isNoticeOfDisconnect( Message message )\n     {\n         if ( message instanceof ExtendedResponse )\n         {\n-            ExtendedResponse response = ( ExtendedResponse ) message;\n+            String responseName = ( ( ExtendedResponse ) message ).getResponseName();\n \n-            if ( response.getResponseName().equals( NoticeOfDisconnect.EXTENSION_OID ) )\n+            if ( NoticeOfDisconnect.EXTENSION_OID.equals( responseName ) )\n             {\n                 return true;\n             }",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/aa91a9034314b4b54919a3bb1942ff7600e46377/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "sha": "ee765c72ca7dcac3acc4cbf4b909085e84155c48",
                "status": "modified"
            }
        ],
        "message": "Fixed a potential NPE (DIRAPI-268)\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/shared-value@1796564 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/01ab748e62534821c2bd842aae907a576a15b2a9",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "LdapNetworkConnectionTest.java"
        ]
    },
    "directory-ldap-api_bc38342": {
        "bug_id": "directory-ldap-api_bc38342",
        "commit": "https://github.com/apache/directory-ldap-api/commit/bc38342b9897770229c1e9a3a8c78ade59373d4f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bc38342b9897770229c1e9a3a8c78ade59373d4f/ldap/model/src/main/java/org/apache/directory/api/ldap/model/filter/UndefinedNode.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/api/ldap/model/filter/UndefinedNode.java?ref=bc38342b9897770229c1e9a3a8c78ade59373d4f",
                "deletions": 1,
                "filename": "ldap/model/src/main/java/org/apache/directory/api/ldap/model/filter/UndefinedNode.java",
                "patch": "@@ -29,7 +29,7 @@\n public final class UndefinedNode extends AbstractExprNode\n {\n     /** A static instance of this node */\n-    public static final ExprNode UNDEFINED_NODE = new UndefinedNode();\n+    public static final UndefinedNode UNDEFINED_NODE = new UndefinedNode();\n \n \n     /**",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bc38342b9897770229c1e9a3a8c78ade59373d4f/ldap/model/src/main/java/org/apache/directory/api/ldap/model/filter/UndefinedNode.java",
                "sha": "487f280458f6a63fc35d1b03139af7ff824e6f4e",
                "status": "modified"
            }
        ],
        "message": "o fixed a NPE when an expression node contains zero count (DIRSERVER-1922)\no added a test to verify the fix\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1546397 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/48c34b6c1d0baae0917644b3e0d5775197aaafa3",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "UndefinedNodeTest.java"
        ]
    },
    "directory-ldap-api_c26c197": {
        "bug_id": "directory-ldap-api_c26c197",
        "commit": "https://github.com/apache/directory-ldap-api/commit/c26c197059527fcbce14941c160df6ed3b78f7b1",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c26c197059527fcbce14941c160df6ed3b78f7b1/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/DefaultAttribute.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/DefaultAttribute.java?ref=c26c197059527fcbce14941c160df6ed3b78f7b1",
                "deletions": 2,
                "filename": "ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/DefaultAttribute.java",
                "patch": "@@ -495,7 +495,7 @@ private Value createBinaryValue( AttributeType attributeType, byte[] value )\n     {\n         Value value = get();\n \n-        if ( !isHR && ( value != null ) )\n+        if ( !isHumanReadable() && ( value != null ) )\n         {\n             return value.getBytes();\n         }\n@@ -514,7 +514,7 @@ public String getString() throws LdapInvalidAttributeValueException\n     {\n         Value value = get();\n \n-        if ( isHR && ( value != null ) )\n+        if ( isHumanReadable() && ( value != null ) )\n         {\n             return value.getValue();\n         }",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c26c197059527fcbce14941c160df6ed3b78f7b1/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/DefaultAttribute.java",
                "sha": "b1b0557f6f68eb6b07b4961439e2f39444773db7",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c26c197059527fcbce14941c160df6ed3b78f7b1/ldap/model/src/main/java/org/apache/directory/api/ldap/model/name/Dn.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/api/ldap/model/name/Dn.java?ref=c26c197059527fcbce14941c160df6ed3b78f7b1",
                "deletions": 0,
                "filename": "ldap/model/src/main/java/org/apache/directory/api/ldap/model/name/Dn.java",
                "patch": "@@ -1082,6 +1082,11 @@ else if ( obj instanceof Dn )\n         // Shortcut if the Dn is normalized\n         if ( isSchemaAware() )\n         {\n+            if ( normName == null )\n+            {\n+                // equals() should never NPE\n+                return other.normName == null;\n+            }\n             return normName.equals( other.normName );\n         }\n         ",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c26c197059527fcbce14941c160df6ed3b78f7b1/ldap/model/src/main/java/org/apache/directory/api/ldap/model/name/Dn.java",
                "sha": "c5a0f8a551be872348a27bd2731f053510c1cde8",
                "status": "modified"
            }
        ],
        "message": "A couple of NPE fixes",
        "parent": "https://github.com/apache/directory-ldap-api/commit/73d8c2dc10240f7035fc20ba7d99508990b78c8f",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "DnTest.java"
        ]
    },
    "directory-ldap-api_c40d9f0": {
        "bug_id": "directory-ldap-api_c40d9f0",
        "commit": "https://github.com/apache/directory-ldap-api/commit/c40d9f0d00134bd4613c64d57f18a904f8c5937b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c40d9f0d00134bd4613c64d57f18a904f8c5937b/ldap-ldif/src/main/java/org/apache/directory/shared/ldap/ldif/LdifEntry.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-ldif/src/main/java/org/apache/directory/shared/ldap/ldif/LdifEntry.java?ref=c40d9f0d00134bd4613c64d57f18a904f8c5937b",
                "deletions": 1,
                "filename": "ldap-ldif/src/main/java/org/apache/directory/shared/ldap/ldif/LdifEntry.java",
                "patch": "@@ -582,7 +582,7 @@ public int hashCode()\n     {\n         int result = 37;\n \n-        if ( entry.getDn() != null )\n+        if ( entry != null && entry.getDn() != null )\n         {\n             result = result*17 + entry.getDn().hashCode();\n         }",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c40d9f0d00134bd4613c64d57f18a904f8c5937b/ldap-ldif/src/main/java/org/apache/directory/shared/ldap/ldif/LdifEntry.java",
                "sha": "e804b1ca615d02d683b609a5d39b23ddba45c499",
                "status": "modified"
            }
        ],
        "message": "Avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@951312 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/9ee3f49e4c7fd16cad2d719c21b0bdb88163590b",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "LdifEntryTest.java"
        ]
    },
    "directory-ldap-api_c5c4388": {
        "bug_id": "directory-ldap-api_c5c4388",
        "commit": "https://github.com/apache/directory-ldap-api/commit/c5c4388990395d6eeff361eb42764f51e17d26c3",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c5c4388990395d6eeff361eb42764f51e17d26c3/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java?ref=c5c4388990395d6eeff361eb42764f51e17d26c3",
                "deletions": 2,
                "filename": "ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java",
                "patch": "@@ -35,6 +35,7 @@\n import org.apache.directory.api.ldap.model.schema.MatchingRule;\n import org.apache.directory.api.ldap.model.schema.Normalizer;\n import org.apache.directory.api.ldap.model.schema.SyntaxChecker;\n+import org.apache.directory.api.ldap.model.schema.comparators.StringComparator;\n import org.apache.directory.api.ldap.model.schema.normalizers.NoOpNormalizer;\n import org.apache.directory.api.util.Serialize;\n import org.apache.directory.api.util.Strings;\n@@ -94,6 +95,9 @@\n     /** Two flags used to tell if the value is HR or not in serialization */\n     private boolean isHR = true;\n     \n+    /** A default comparator if we don't have an EQUALITY MR */\n+    private static StringComparator stringComparator = new StringComparator( null );\n+    \n     // -----------------------------------------------------------------------\n     // Constructors\n     // -----------------------------------------------------------------------\n@@ -167,7 +171,7 @@ public Value( AttributeType attributeType, byte[] upValue ) throws LdapInvalidAt\n \n         this.attributeType = attributeType;\n         \n-        if ( !attributeType.isRelaxed() )\n+        if ( ( attributeType != null ) && !attributeType.isRelaxed() )\n         {\n             // Check the value\n             SyntaxChecker syntaxChecker = attributeType.getSyntax().getSyntaxChecker();\n@@ -1335,7 +1339,8 @@ else if ( other.bytes.length == 0 )\n                     \n                     if ( other.attributeType.getEquality() == null )\n                     {\n-                        return false;\n+                        // No equality ? Default to comparing using a String comparator\n+                        return stringComparator.compare( normValue, other.normValue ) == 0;\n                     }\n                     \n                     Normalizer normalizer = other.attributeType.getEquality().getNormalizer();",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c5c4388990395d6eeff361eb42764f51e17d26c3/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java",
                "sha": "38fc7f095722261597b32485709d6675ab1860dd",
                "status": "modified"
            }
        ],
        "message": "o Added a default Comparator for when we don't have an Equality MathcingRule\no Added a test for a potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/shared-value@1745846 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/994075b13579e0c83047f9cf006ce8f518cec5b7",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "ValueTest.java"
        ]
    },
    "directory-ldap-api_cc0deec": {
        "bug_id": "directory-ldap-api_cc0deec",
        "commit": "https://github.com/apache/directory-ldap-api/commit/cc0deec033261285738bf67dd8a27261c6ce7d05",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/cc0deec033261285738bf67dd8a27261c6ce7d05/ldap/schema/data/src/main/java/org/apache/directory/shared/ldap/schemamanager/impl/DefaultSchemaManager.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/schema/data/src/main/java/org/apache/directory/shared/ldap/schemamanager/impl/DefaultSchemaManager.java?ref=cc0deec033261285738bf67dd8a27261c6ce7d05",
                "deletions": 7,
                "filename": "ldap/schema/data/src/main/java/org/apache/directory/shared/ldap/schemamanager/impl/DefaultSchemaManager.java",
                "patch": "@@ -282,15 +282,18 @@ private void deleteSchemaObjects( Schema schema, Registries registries ) throws\n \n         List<SchemaObject> toBeDeleted = new ArrayList<SchemaObject>();\n \n-        // Buid an intermediate list to avoid concurrent modifications\n-        for ( SchemaObjectWrapper schemaObjectWrapper : content )\n+        if ( content != null )\n         {\n-            toBeDeleted.add( schemaObjectWrapper.get() );\n-        }\n+            // Build an intermediate list to avoid concurrent modifications\n+            for ( SchemaObjectWrapper schemaObjectWrapper : content )\n+            {\n+                toBeDeleted.add( schemaObjectWrapper.get() );\n+            }\n \n-        for ( SchemaObject schemaObject : toBeDeleted )\n-        {\n-            registries.delete( errors, schemaObject );\n+            for ( SchemaObject schemaObject : toBeDeleted )\n+            {\n+                registries.delete( errors, schemaObject );\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/cc0deec033261285738bf67dd8a27261c6ce7d05/ldap/schema/data/src/main/java/org/apache/directory/shared/ldap/schemamanager/impl/DefaultSchemaManager.java",
                "sha": "84e179a80c982ce89ef23f666d948c14f90a015b",
                "status": "modified"
            }
        ],
        "message": "Fixed a NPE : the deletion of a schema was failing if this schema contained no element (DIRSERVER-1718)\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1392051 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/9a8a7646c95161587bb2dd193897ebdeaa4328ee",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "DefaultSchemaManagerTest.java"
        ]
    },
    "directory-ldap-api_cc9992a": {
        "bug_id": "directory-ldap-api_cc9992a",
        "commit": "https://github.com/apache/directory-ldap-api/commit/cc9992a5e9fc25d913c26e6ff9a3abe7bdf94ea4",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/cc9992a5e9fc25d913c26e6ff9a3abe7bdf94ea4/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/Registries.java",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/Registries.java?ref=cc9992a5e9fc25d913c26e6ff9a3abe7bdf94ea4",
                "deletions": 19,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/Registries.java",
                "patch": "@@ -1821,28 +1821,31 @@ public void dissociateFromSchema( SchemaObject schemaObject ) throws NamingExcep\n         // And unregister the schemaObject within its schema\n         Set<SchemaObjectWrapper> content = schemaObjects.get( StringTools.toLowerCase( schemaObject.getSchemaName() ) );\n \n-        SchemaObjectWrapper schemaObjectWrapper = new SchemaObjectWrapper( schemaObject );\n-\n-        if ( content.contains( schemaObjectWrapper ) )\n+        if ( content != null )\n         {\n-            // remove the schemaObject\n-            content.remove( schemaObjectWrapper );\n-\n-            // Update the global OidRegistry if the SchemaObject is not\n-            // an instance of LoadableSchemaObject\n-            if ( !( schemaObject instanceof LoadableSchemaObject ) )\n+            SchemaObjectWrapper schemaObjectWrapper = new SchemaObjectWrapper( schemaObject );\n+    \n+            if ( content.contains( schemaObjectWrapper ) )\n+            {\n+                // remove the schemaObject\n+                content.remove( schemaObjectWrapper );\n+    \n+                // Update the global OidRegistry if the SchemaObject is not\n+                // an instance of LoadableSchemaObject\n+                if ( !( schemaObject instanceof LoadableSchemaObject ) )\n+                {\n+                    globalOidRegistry.unregister( schemaObject.getOid() );\n+                }\n+    \n+                LOG.debug( \"Unregistered {}:{}\", schemaObject.getObjectType(), schemaObject.getOid() );\n+            }\n+            else\n             {\n-                globalOidRegistry.unregister( schemaObject.getOid() );\n+                // Not present !!\n+                // What should we do ?\n+                LOG.debug( \"Unregistering of {}:{} failed, not found in Registries\", schemaObject.getObjectType(),\n+                    schemaObject.getOid() );\n             }\n-\n-            LOG.debug( \"Unregistered {}:{}\", schemaObject.getObjectType(), schemaObject.getOid() );\n-        }\n-        else\n-        {\n-            // Not present !!\n-            // What should we do ?\n-            LOG.debug( \"Unregistering of {}:{} failed, not found in Registries\", schemaObject.getObjectType(),\n-                schemaObject.getOid() );\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/cc9992a5e9fc25d913c26e6ff9a3abe7bdf94ea4/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/Registries.java",
                "sha": "74ae2c235407c7b2de5a662e47acbd27bd5bd993",
                "status": "modified"
            }
        ],
        "message": "When the schema is disabled, the Registries.SchemaObjects foes not contain a reference to thi schema. Fixed that to avoid a NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/shared-schema@891372 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/5b117e8b1cd7aa14d0ac2774284b792c6ec8f2a5",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "RegistriesTest.java"
        ]
    },
    "directory-ldap-api_d2f58fb": {
        "bug_id": "directory-ldap-api_d2f58fb",
        "commit": "https://github.com/apache/directory-ldap-api/commit/d2f58fb1c6a75a2543729e6591e8fcb9a7c444d2",
        "file": [
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/d2f58fb1c6a75a2543729e6591e8fcb9a7c444d2/ldap/src/main/java/org/apache/directory/shared/ldap/schema/PrepareString.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/PrepareString.java?ref=d2f58fb1c6a75a2543729e6591e8fcb9a7c444d2",
                "deletions": 6,
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/PrepareString.java",
                "patch": "@@ -22,6 +22,7 @@\n \n import java.io.IOException;\n \n+import org.apache.directory.shared.ldap.util.StringTools;\n import org.apache.directory.shared.ldap.util.unicode.InvalidCharacterException;\n // import org.apache.directory.shared.ldap.util.unicode.Normalizer;\n \n@@ -87,15 +88,29 @@ private static boolean isCombiningMark( char c )\n     \n     /**\n      * \n-     * TODO normalize.\n+     * We have to go through 6 steps :\n+     * \n+     * 1) Transcode\n+     * 2) Map\n+     * 3) Normalize\n+     * 4) Prohibit\n+     * 5) Bidi\n+     * 6) Insignifiant Character Handling\n+     * \n+     * The first step is already done, the step (3) is not done.\n      *\n      * @param str\n      * @return\n      * @throws IOException\n      */\n-    public static StringBuilder normalize( String str ) throws IOException\n+    public static String normalize( String str ) throws IOException\n     {\n-        return null; //Normalizer.normalize( str, Normalizer.Form.KC );\n+        String res = map( str );\n+        prohibit( res );\n+        res = bidi( res );\n+        res = insignifiantSpacesString( res );\n+        \n+        return res;\n     }\n     \n     /**\n@@ -3928,7 +3943,10 @@ public static StringBuilder map( char[] array )\n      */\n     public static void prohibit( String str ) throws InvalidCharacterException\n     {\n-        prohibit( str.toCharArray() );\n+        if ( !StringTools.isEmpty( str ) )\n+        {\n+            prohibit( str.toCharArray() );\n+        }\n     }\n     \n     /**\n@@ -3953,6 +3971,12 @@ public static void prohibit( char[] array ) throws InvalidCharacterException\n \n         for ( char c:array )\n         {\n+            // Shortcut ASCII chars\n+            if ( c < 0x0221 )\n+            {\n+                continue;\n+            }\n+            \n             // RFC 3454, Table A.1\n             switch ( c )\n             {\n@@ -4477,7 +4501,7 @@ public static void prohibit( char[] array ) throws InvalidCharacterException\n                 throw new InvalidCharacterException( c );\n             }\n \n-            if ( ( c == 0xFFFE ) || ( c <= 0xFFFF ) )\n+            if ( ( c == 0xFFFE ) || ( c == 0xFFFF ) )\n             {\n                 throw new InvalidCharacterException( c );\n             }\n@@ -4525,7 +4549,7 @@ public static void prohibit( char[] array ) throws InvalidCharacterException\n      */\n     public static String bidi( String str )\n     {\n-        return bidi( str.toCharArray() ).toString();\n+        return ( str == null ? str : bidi( str.toCharArray() ).toString() );\n     }\n     \n     /**",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/d2f58fb1c6a75a2543729e6591e8fcb9a7c444d2/ldap/src/main/java/org/apache/directory/shared/ldap/schema/PrepareString.java",
                "sha": "a42093db1e82351707279425f4815f268536d031",
                "status": "modified"
            }
        ],
        "message": "Added a normalize method, and fixed some possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/trunks/shared@490956 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/57531b0e682c1a5702d44a9a297cb92310369f2e",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "PrepareStringTest.java"
        ]
    },
    "directory-ldap-api_e31736b": {
        "bug_id": "directory-ldap-api_e31736b",
        "commit": "https://github.com/apache/directory-ldap-api/commit/e31736bcf0215f82b1bea32014e99837400d5d79",
        "file": [
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/e31736bcf0215f82b1bea32014e99837400d5d79/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/BinaryValue.java",
                "changes": 63,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/BinaryValue.java?ref=e31736bcf0215f82b1bea32014e99837400d5d79",
                "deletions": 17,
                "filename": "ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/BinaryValue.java",
                "patch": "@@ -236,7 +236,7 @@ public boolean equals( Object obj )\n         }\n \n         BinaryValue other = ( BinaryValue ) obj;\n-        \n+\n         // First check if we have an attrbuteType.\n         if ( attributeType != null )\n         {\n@@ -260,11 +260,11 @@ public boolean equals( Object obj )\n                     {\n                         return true;\n                     }\n-                    \n+\n                     // We have an AttributeType, we use the associated comparator\n                     try\n                     {\n-                        Comparator<byte[]> comparator = ( Comparator<byte[]> ) getLdapComparator();\n+                        Comparator<byte[]> comparator = getLdapComparator();\n \n                         // Compare normalized values\n                         if ( comparator == null )\n@@ -300,22 +300,22 @@ public boolean equals( Object obj )\n                 // We have an AttributeType on the base value, we need to use its comparator\n                 try\n                 {\n-                    Comparator<byte[]> comparator = ( Comparator<byte[]> ) getLdapComparator();\n+                    Comparator<byte[]> comparator = getLdapComparator();\n \n                     // Compare normalized values. We have to normalized the other value,\n                     // as it has no AT\n                     MatchingRule equality = getAttributeType().getEquality();\n-                    \n+\n                     if ( equality == null )\n                     {\n                         // No matching rule : compare the raw values\n                         return Arrays.equals( getNormReference(), other.getNormReference() );\n                     }\n-                    \n+\n                     Normalizer normalizer = equality.getNormalizer();\n-                    \n-                    BinaryValue otherValue = (BinaryValue)normalizer.normalize( other );\n-                    \n+\n+                    BinaryValue otherValue = ( BinaryValue ) normalizer.normalize( other );\n+\n                     if ( comparator == null )\n                     {\n                         return Arrays.equals( getNormReference(), otherValue.getNormReference() );\n@@ -343,25 +343,25 @@ public boolean equals( Object obj )\n                 {\n                     return other.isNull();\n                 }\n-                \n+\n                 try\n                 {\n-                    Comparator<byte[]> comparator = ( Comparator<byte[]> ) other.getLdapComparator();\n+                    Comparator<byte[]> comparator = other.getLdapComparator();\n \n                     // Compare normalized values. We have to normalized the other value,\n                     // as it has no AT\n                     MatchingRule equality = other.getAttributeType().getEquality();\n-                    \n+\n                     if ( equality == null )\n                     {\n                         // No matching rule : compare the raw values\n                         return Arrays.equals( getNormReference(), other.getNormReference() );\n                     }\n-                    \n+\n                     Normalizer normalizer = equality.getNormalizer();\n-                    \n-                    BinaryValue thisValue = (BinaryValue)normalizer.normalize( this );\n-                    \n+\n+                    BinaryValue thisValue = ( BinaryValue ) normalizer.normalize( this );\n+\n                     if ( comparator == null )\n                     {\n                         return Arrays.equals( thisValue.getNormReference(), other.getNormReference() );\n@@ -383,7 +383,7 @@ public boolean equals( Object obj )\n                 {\n                     return other.isNull();\n                 }\n-                \n+\n                 // Now check the normalized values\n                 return Arrays.equals( getNormReference(), other.getNormReference() );\n             }\n@@ -558,6 +558,35 @@ public void readExternal( ObjectInput in ) throws IOException, ClassNotFoundExce\n                 try\n                 {\n                     normalizedValue = attributeType.getEquality().getNormalizer().normalize( this ).getBytes();\n+                    MatchingRule equality = attributeType.getEquality();\n+\n+                    if ( equality == null )\n+                    {\n+                        if ( wrappedLength >= 0 )\n+                        {\n+                            normalizedValue = new byte[wrappedLength];\n+\n+                            System.arraycopy( wrappedValue, 0, normalizedValue, 0, wrappedLength );\n+                        }\n+                    }\n+                    else\n+                    {\n+                        Normalizer normalizer = equality.getNormalizer();\n+\n+                        if ( normalizer != null )\n+                        {\n+                            normalizedValue = normalizer.normalize( this ).getBytes();\n+                        }\n+                        else\n+                        {\n+                            if ( wrappedLength >= 0 )\n+                            {\n+                                normalizedValue = new byte[wrappedLength];\n+\n+                                System.arraycopy( wrappedValue, 0, normalizedValue, 0, wrappedLength );\n+                            }\n+                        }\n+                    }\n                 }\n                 catch ( LdapException le )\n                 {",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/e31736bcf0215f82b1bea32014e99837400d5d79/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/BinaryValue.java",
                "sha": "eb9c1b0979495a6f8dddd0295b8ef01ce3b75b8b",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/e31736bcf0215f82b1bea32014e99837400d5d79/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/StringValue.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/StringValue.java?ref=e31736bcf0215f82b1bea32014e99837400d5d79",
                "deletions": 1,
                "filename": "ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/StringValue.java",
                "patch": "@@ -535,7 +535,25 @@ public void readExternal( ObjectInput in ) throws IOException, ClassNotFoundExce\n             {\n                 try\n                 {\n-                    normalizedValue = attributeType.getEquality().getNormalizer().normalize( wrappedValue );\n+                    MatchingRule equality = attributeType.getEquality();\n+\n+                    if ( equality == null )\n+                    {\n+                        normalizedValue = wrappedValue;\n+                    }\n+                    else\n+                    {\n+                        Normalizer normalizer = equality.getNormalizer();\n+\n+                        if ( normalizer != null )\n+                        {\n+                            normalizedValue = normalizer.normalize( wrappedValue );\n+                        }\n+                        else\n+                        {\n+                            normalizedValue = wrappedValue;\n+                        }\n+                    }\n                 }\n                 catch ( LdapException le )\n                 {",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/e31736bcf0215f82b1bea32014e99837400d5d79/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/StringValue.java",
                "sha": "04a3ed86a291d2864b4ce1d31eb2a52be8db0cd6",
                "status": "modified"
            }
        ],
        "message": "Fixed the readExternal method : if the value has an AttributeType with no Equality atchingRule, we were having NPE because we weren't testing this case.\nThis will fix DIRSERVER-1834\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1471294 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/ad378e468f3301ae97289f76ea68e7f1ab2f0914",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "StringValueTest.java"
        ]
    },
    "directory-ldap-api_e9debf9": {
        "bug_id": "directory-ldap-api_e9debf9",
        "commit": "https://github.com/apache/directory-ldap-api/commit/e9debf9ed42e3b9a1e603e3b73dd439602001062",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/e9debf9ed42e3b9a1e603e3b73dd439602001062/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java?ref=e9debf9ed42e3b9a1e603e3b73dd439602001062",
                "deletions": 2,
                "filename": "ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "patch": "@@ -1998,9 +1998,9 @@ private boolean isNoticeOfDisconnect( Message message )\n     {\n         if ( message instanceof ExtendedResponse )\n         {\n-            ExtendedResponse response = ( ExtendedResponse ) message;\n+            String responseName = ( ( ExtendedResponse ) message ).getResponseName();\n \n-            if ( response.getResponseName().equals( NoticeOfDisconnect.EXTENSION_OID ) )\n+            if ( NoticeOfDisconnect.EXTENSION_OID.equals( responseName ) )\n             {\n                 return true;\n             }",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/e9debf9ed42e3b9a1e603e3b73dd439602001062/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "sha": "d12f44b50da98d619766987ccf42702267c1a8f1",
                "status": "modified"
            }
        ],
        "message": "Fixed a potential NPE (DIRAPI-268)\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1796563 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/234829a227364252a9319e24998e1998992fc1c9",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "LdapNetworkConnectionTest.java"
        ]
    },
    "directory-ldap-api_ea3b238": {
        "bug_id": "directory-ldap-api_ea3b238",
        "commit": "https://github.com/apache/directory-ldap-api/commit/ea3b238406a8a85257ecb200c7e8bce4ef9e6adc",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/ea3b238406a8a85257ecb200c7e8bce4ef9e6adc/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java?ref=ea3b238406a8a85257ecb200c7e8bce4ef9e6adc",
                "deletions": 11,
                "filename": "ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "patch": "@@ -41,6 +41,7 @@\n import java.util.concurrent.TimeoutException;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantLock;\n \n import javax.net.ssl.SSLContext;\n import javax.security.auth.Subject;\n@@ -186,8 +187,8 @@\n     /** The connector open with the remote server */\n     private IoConnector connector;\n \n-    /** A flag set to true when we used a local connector */\n-    private boolean localConnector;\n+    /** A mutex used to avoid a double close of the connector */\n+    private ReentrantLock connectorMutex = new ReentrantLock(); \n \n     /**\n      * The created session, created when we open a connection with\n@@ -494,7 +495,6 @@ public boolean connect() throws LdapException, IOException\n         if ( connector == null )\n         {\n             connector = new NioSocketConnector();\n-            localConnector = true;\n \n             // Add the codec to the chain\n             connector.getFilterChain().addLast( \"ldapCodec\", ldapProtocolFilter );\n@@ -657,12 +657,14 @@ public boolean close() throws IOException\n         }\n \n         // And close the connector if it has been created locally\n-        if ( localConnector && ( connector != null ) )\n+        // Release the connector\n+        connectorMutex.lock();\n+        if ( connector != null )\n         {\n-            // Release the connector\n             connector.dispose();\n             connector = null;\n         }\n+        connectorMutex.unlock();\n \n         // Reset the messageId\n         messageId.set( 0 );\n@@ -1766,7 +1768,7 @@ public void unBind() throws LdapException\n         clearMaps();\n \n         //  We now have to close the session\n-        if ( ( ldapSession != null ) && connected.get() )\n+        if ( ldapSession != null )\n         {\n             CloseFuture closeFuture = ldapSession.close( true );\n \n@@ -3696,17 +3698,20 @@ public void sessionClosed( IoSession session ) throws Exception\n         // Reset the messageId\n         messageId.set( 0 );\n \n-        // DO NOT call connector.dispose(), it is hanging when there is no network connection\n-        // set localConnector flag to false to avoid NPE when close() is called after this sessionClosed() method\n-        // gets called\n-        localConnector = false;\n-        connector = null;\n+        if ( connector != null )\n+        {\n+            connectorMutex.lock();\n+            connector.dispose();\n+            connector = null;\n+            connectorMutex.unlock();\n+        }\n \n         clearMaps();\n \n         if ( conCloseListeners != null )\n         {\n             LOG.debug( \"notifying the registered ConnectionClosedEventListeners..\" );\n+            \n             for ( ConnectionClosedEventListener listener : conCloseListeners )\n             {\n                 listener.connectionClosed();",
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/ea3b238406a8a85257ecb200c7e8bce4ef9e6adc/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "sha": "d6adbd342959544e7cc5b32084e8f4ef2d7edfa6",
                "status": "modified"
            }
        ],
        "message": "Fix for DIRAPI-52 : the connector was never closed. We also protected the code against some NPE by using a mutex.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1151527 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/159ec99b032545f944222b14ef15b366874839c5",
        "repo": "directory-ldap-api",
        "unit_tests": [
            "LdapNetworkConnectionTest.java"
        ]
    }
}