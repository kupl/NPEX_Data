[
    {
        "repo": "activemq",
        "commit": "https://github.com/apache/activemq/commit/2731f04f1ca81312d08ffc21c0ceb09513165b7c",
        "bug_id": "activemq_2731f04",
        "message": "AMQ-6642: Fix potential NPE on updateMessage\n\nFixing potential NPE when calling updateMessage on a Queue store in\nKahaDB if subscription statistics are enabled.  Also reduced the\nvisibily from public to protected to subscription statistic related\nmethods that shouldn't be public and added null pointer checks there as\nwell.\n\nhttps://issues.apache.org/jira/browse/AMQ-6642",
        "parent": "https://github.com/apache/activemq/commit/4ef1fc74cf8068b5c41cc1f4d1c97967658a465b",
        "patched_files": [
            "MessageDatabase.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 27,
                "raw_url": "https://github.com/apache/activemq/raw/2731f04f1ca81312d08ffc21c0ceb09513165b7c/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java?ref=2731f04f1ca81312d08ffc21c0ceb09513165b7c",
                "filename": "activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "deletions": 22,
                "sha": "0611be77c13c46f945489c353fae430a5ee9a132",
                "blob_url": "https://github.com/apache/activemq/blob/2731f04f1ca81312d08ffc21c0ceb09513165b7c/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "patch": "@@ -1524,7 +1524,7 @@ void updateIndex(Transaction tx, KahaUpdateMessageCommand updateMessageCommand,\n                 decrementAndSubSizeToStoreStat(command.getDestination(), previousKeys.location.getSize());\n \n                 //update all the subscription metrics\n-                if (enableSubscriptionStatistics && location.getSize() != previousKeys.location.getSize()) {\n+                if (enableSubscriptionStatistics && sd.ackPositions != null && location.getSize() != previousKeys.location.getSize()) {\n                     Iterator<Entry<String, SequenceSet>> iter = sd.ackPositions.iterator(tx);\n                     while (iter.hasNext()) {\n                         Entry<String, SequenceSet> e = iter.next();\n@@ -2970,33 +2970,38 @@ public LastAck getLastAck(Transaction tx, StoredDestination sd, String subscript\n         return sd.subscriptionAcks.get(tx, subscriptionKey);\n     }\n \n-    public long getStoredMessageCount(Transaction tx, StoredDestination sd, String subscriptionKey) throws IOException {\n-        SequenceSet messageSequences = sd.ackPositions.get(tx, subscriptionKey);\n-        if (messageSequences != null) {\n-            long result = messageSequences.rangeSize();\n-            // if there's anything in the range the last value is always the nextMessage marker, so remove 1.\n-            return result > 0 ? result - 1 : 0;\n+    protected long getStoredMessageCount(Transaction tx, StoredDestination sd, String subscriptionKey) throws IOException {\n+        if (sd.ackPositions != null) {\n+            SequenceSet messageSequences = sd.ackPositions.get(tx, subscriptionKey);\n+            if (messageSequences != null) {\n+                long result = messageSequences.rangeSize();\n+                // if there's anything in the range the last value is always the nextMessage marker, so remove 1.\n+                return result > 0 ? result - 1 : 0;\n+            }\n         }\n \n         return 0;\n     }\n \n-    public long getStoredMessageSize(Transaction tx, StoredDestination sd, String subscriptionKey) throws IOException {\n-        //grab the messages attached to this subscription\n-        SequenceSet messageSequences = sd.ackPositions.get(tx, subscriptionKey);\n-\n+    protected long getStoredMessageSize(Transaction tx, StoredDestination sd, String subscriptionKey) throws IOException {\n         long locationSize = 0;\n-        if (messageSequences != null) {\n-            Sequence head = messageSequences.getHead();\n-            if (head != null) {\n-                //get an iterator over the order index starting at the first unacked message\n-                //and go over each message to add up the size\n-                Iterator<Entry<Long, MessageKeys>> iterator = sd.orderIndex.iterator(tx,\n-                        new MessageOrderCursor(head.getFirst()));\n-\n-                while (iterator.hasNext()) {\n-                    Entry<Long, MessageKeys> entry = iterator.next();\n-                    locationSize += entry.getValue().location.getSize();\n+\n+        if (sd.ackPositions != null) {\n+            //grab the messages attached to this subscription\n+            SequenceSet messageSequences = sd.ackPositions.get(tx, subscriptionKey);\n+\n+            if (messageSequences != null) {\n+                Sequence head = messageSequences.getHead();\n+                if (head != null) {\n+                    //get an iterator over the order index starting at the first unacked message\n+                    //and go over each message to add up the size\n+                    Iterator<Entry<Long, MessageKeys>> iterator = sd.orderIndex.iterator(tx,\n+                            new MessageOrderCursor(head.getFirst()));\n+\n+                    while (iterator.hasNext()) {\n+                        Entry<Long, MessageKeys> entry = iterator.next();\n+                        locationSize += entry.getValue().location.getSize();\n+                    }\n                 }\n             }\n         }",
                "changes": 49
            },
            {
                "status": "modified",
                "additions": 41,
                "raw_url": "https://github.com/apache/activemq/raw/2731f04f1ca81312d08ffc21c0ceb09513165b7c/activemq-kahadb-store/src/test/java/org/apache/activemq/store/kahadb/MessageDatabaseSizeTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-kahadb-store/src/test/java/org/apache/activemq/store/kahadb/MessageDatabaseSizeTest.java?ref=2731f04f1ca81312d08ffc21c0ceb09513165b7c",
                "filename": "activemq-kahadb-store/src/test/java/org/apache/activemq/store/kahadb/MessageDatabaseSizeTest.java",
                "deletions": 0,
                "sha": "4deb1e07b950f06102685451c611d428e531767b",
                "blob_url": "https://github.com/apache/activemq/blob/2731f04f1ca81312d08ffc21c0ceb09513165b7c/activemq-kahadb-store/src/test/java/org/apache/activemq/store/kahadb/MessageDatabaseSizeTest.java",
                "patch": "@@ -17,9 +17,12 @@\n package org.apache.activemq.store.kahadb;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n \n import java.io.File;\n import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n \n import org.apache.activemq.broker.BrokerService;\n import org.apache.activemq.command.ActiveMQQueue;\n@@ -36,20 +39,41 @@\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+@RunWith(Parameterized.class)\n public class MessageDatabaseSizeTest {\n \n     private static final Logger LOG = LoggerFactory.getLogger(MessageDatabaseSizeTest.class);\n \n+    @Parameters(name = \"subStatsEnabled={0}\")\n+    public static Collection<Object[]> data() {\n+        return Arrays.asList(new Object[][] {\n+                // Subscription stats on\n+                {true},\n+                // Subscription stats off\n+                {false}\n+        });\n+    }\n+\n     @Rule\n     public TemporaryFolder dataDir = new TemporaryFolder(new File(\"target\"));\n     private final String payload = new String(new byte[1024]);\n \n     private BrokerService broker = null;\n     private final ActiveMQQueue destination = new ActiveMQQueue(\"Test\");\n     private KahaDBPersistenceAdapter adapter;\n+    private boolean subStatsEnabled;\n+\n+    public MessageDatabaseSizeTest(boolean subStatsEnabled) {\n+        super();\n+        this.subStatsEnabled = subStatsEnabled;\n+    }\n+\n \n     protected void startBroker() throws Exception {\n         broker = new BrokerService();\n@@ -58,6 +82,7 @@ protected void startBroker() throws Exception {\n         broker.setUseJmx(true);\n         broker.setDataDirectory(dataDir.getRoot().getAbsolutePath());\n         adapter = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();\n+        adapter.setEnableSubscriptionStatistics(subStatsEnabled);\n         broker.start();\n         LOG.info(\"Starting broker..\");\n     }\n@@ -101,6 +126,22 @@ public void testUpdateMessageSameLocation() throws Exception {\n         assertEquals(existingSize, messageStore.getMessageSize());\n     }\n \n+    @Test\n+    public void testUpdateMessageSameLocationDifferentSize() throws Exception {\n+        final KahaDBStore store = adapter.getStore();\n+        MessageId messageId = new MessageId(\"111:222:333\");\n+        ActiveMQTextMessage textMessage = getMessage(new MessageId(\"111:222:333\"));\n+\n+        //Add a single message and update once so we can compare the size consistently\n+        MessageStore messageStore = store.createQueueMessageStore(destination);\n+        messageStore.addMessage(broker.getAdminConnectionContext(), textMessage);\n+        textMessage.setText(\"new size of message\");\n+        messageStore.updateMessage(textMessage);\n+\n+        assertNotNull(findMessageLocation(messageId.toString(), store.convert(destination)));\n+\n+    }\n+\n     /**\n      * Test that when updating an existing message to a different location in the\n      * journal that the index size doesn't change",
                "changes": 41
            }
        ],
        "unit_tests": [
            "MessageDatabaseSizeTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "activemq-kahadb-store/src/test/java/org/apache/activemq/store/kahadb/MessageDatabaseSizeTest.java",
        "buggy_files": [
            "activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java"
        ],
        "fixed": true
    }
]