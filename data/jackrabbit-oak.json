{
    "jackrabbit-oak_01ee66a": {
        "bug_id": "jackrabbit-oak_01ee66a",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/01ee66aef3ff08ddf94b357eb0773a338d4b8374",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/01ee66aef3ff08ddf94b357eb0773a338d4b8374/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java?ref=01ee66aef3ff08ddf94b357eb0773a338d4b8374",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java",
                "patch": "@@ -269,7 +269,7 @@ public NodeBuilder setChildNode(String name, NodeState state) {\n \n     @Override\n     public boolean remove() {\n-        if (exists()) {\n+        if (!isRoot() && exists()) {\n             head().getMutableNodeState();  // Make sure the removed node is connected\n             parent.head().getMutableNodeState().removeChildNode(name);\n             return true;",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/01ee66aef3ff08ddf94b357eb0773a338d4b8374/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java",
                "sha": "07decb1eaa5a750e8eda5aa525edd4e4d51dc638",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/01ee66aef3ff08ddf94b357eb0773a338d4b8374/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilderTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilderTest.java?ref=01ee66aef3ff08ddf94b357eb0773a338d4b8374",
                "deletions": 0,
                "filename": "oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilderTest.java",
                "patch": "@@ -447,6 +447,11 @@ public void navigateNonExistingNode() {\n         assertTrue(c.hasProperty(\"c2\"));\n     }\n \n+    @Test\n+    public void removeRoot() {\n+        assertFalse(base.builder().remove());\n+    }\n+\n     private static NodeState createBC(final boolean exists) {\n         final NodeState C = new MemoryNodeBuilder(EmptyNodeState.EMPTY_NODE)\n             .setProperty(\"c\", \"cValue\")",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/01ee66aef3ff08ddf94b357eb0773a338d4b8374/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilderTest.java",
                "sha": "22f309bf882b8e17c3c87e52e1b3a7e9d1292ba6",
                "status": "modified"
            }
        ],
        "message": "OAK-781: Clarify / fix effects of MISSING_NODE as base state of NodeBuilder\nDisallow removing root node. Avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1493222 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/4b0b2d010afc72d98e7d29074e3b96e4062bd2df",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "MemoryNodeBuilderTest.java"
        ]
    },
    "jackrabbit-oak_053f110": {
        "bug_id": "jackrabbit-oak_053f110",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/053f110542ffb177894d8662ca1e6e58ad469734",
        "file": [
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/053f110542ffb177894d8662ca1e6e58ad469734/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/identifier/IdentifierManager.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/identifier/IdentifierManager.java?ref=053f110542ffb177894d8662ca1e6e58ad469734",
                "deletions": 9,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/identifier/IdentifierManager.java",
                "patch": "@@ -16,19 +16,11 @@\n  */\n package org.apache.jackrabbit.oak.plugins.identifier;\n \n-import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Predicates.notNull;\n-import static com.google.common.collect.Iterators.emptyIterator;\n-import static com.google.common.collect.Iterators.filter;\n-import static com.google.common.collect.Iterators.singletonIterator;\n-import static com.google.common.collect.Iterators.transform;\n-\n import java.text.ParseException;\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.Map;\n import java.util.UUID;\n-\n import javax.annotation.CheckForNull;\n import javax.annotation.Nonnull;\n import javax.jcr.PropertyType;\n@@ -54,6 +46,13 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Predicates.notNull;\n+import static com.google.common.collect.Iterators.emptyIterator;\n+import static com.google.common.collect.Iterators.filter;\n+import static com.google.common.collect.Iterators.singletonIterator;\n+import static com.google.common.collect.Iterators.transform;\n+\n /**\n  * TODO document\n  */\n@@ -171,6 +170,24 @@ public String getPath(PropertyState referenceValue) {\n         }\n     }\n \n+    /**\n+     * Returns the path of the tree references by the specified (weak)\n+     * reference {@code PropertyState}.\n+     *\n+     * @param referenceValue A (weak) reference value.\n+     * @return The tree with the given {@code identifier} or {@code null} if no\n+     *         such tree exists or isn't accessible to the content session.\n+     */\n+    @CheckForNull\n+    public String getPath(PropertyValue referenceValue) {\n+        int type = referenceValue.getType().tag();\n+        if (type == PropertyType.REFERENCE || type == PropertyType.WEAKREFERENCE) {\n+            return resolveUUID(referenceValue);\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid value type\");\n+        }\n+    }\n+\n     /**\n      * Searches all reference properties to the specified {@code tree} that match\n      * the given name and node type constraints.\n@@ -274,8 +291,12 @@ public String resolveUUID(String uuid) {\n     }\n \n     private String resolveUUID(PropertyState uuid) {\n+        return resolveUUID(PropertyValues.create(uuid));\n+    }\n+\n+    private String resolveUUID(PropertyValue uuid) {\n         try {\n-            Map<String, PropertyValue> bindings = Collections.singletonMap(\"id\", PropertyValues.create(uuid));\n+            Map<String, PropertyValue> bindings = Collections.singletonMap(\"id\", uuid);\n             Result result = root.getQueryEngine().executeQuery(\n                     \"SELECT * FROM [nt:base] WHERE [jcr:uuid] = $id\", Query.JCR_SQL2,\n                     Long.MAX_VALUE, 0, bindings, new NamePathMapper.Default());",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/053f110542ffb177894d8662ca1e6e58ad469734/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/identifier/IdentifierManager.java",
                "sha": "31ed6d346e1046cb7fa7b3ab7591f8249529a934",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/053f110542ffb177894d8662ca1e6e58ad469734/oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/GroupImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/GroupImpl.java?ref=053f110542ffb177894d8662ca1e6e58ad469734",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/GroupImpl.java",
                "patch": "@@ -191,7 +191,7 @@ public boolean apply(@Nullable Authorizable authorizable) {\n                     }\n             );\n         } else {\n-            Iterator oakPaths = getMembershipProvider().getMembers(getTree(), AuthorizableType.AUTHORIZABLE, includeInherited);\n+            Iterator<String> oakPaths = getMembershipProvider().getMembers(getTree(), AuthorizableType.AUTHORIZABLE, includeInherited);\n             if (oakPaths.hasNext()) {\n                 AuthorizableIterator iterator = AuthorizableIterator.create(oakPaths, userMgr, AuthorizableType.AUTHORIZABLE);\n                 return new RangeIteratorAdapter(iterator, iterator.getSize());",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/053f110542ffb177894d8662ca1e6e58ad469734/oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/GroupImpl.java",
                "sha": "4c774742dfca406477c2c3454bcbdd2466c94124",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/053f110542ffb177894d8662ca1e6e58ad469734/oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/MembershipProvider.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/MembershipProvider.java?ref=053f110542ffb177894d8662ca1e6e58ad469734",
                "deletions": 3,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/MembershipProvider.java",
                "patch": "@@ -28,7 +28,7 @@\n import org.apache.jackrabbit.oak.api.Root;\n import org.apache.jackrabbit.oak.api.Tree;\n import org.apache.jackrabbit.oak.api.Type;\n-import org.apache.jackrabbit.oak.plugins.memory.PropertyStates;\n+import org.apache.jackrabbit.oak.spi.query.PropertyValues;\n import org.apache.jackrabbit.oak.spi.security.ConfigurationParameters;\n import org.apache.jackrabbit.oak.spi.security.user.AuthorizableType;\n import org.apache.jackrabbit.oak.spi.security.user.util.UserUtil;\n@@ -263,10 +263,10 @@ protected String getNext() {\n                         break;\n                     } else {\n                         String value = references.next();\n-                        next = identifierManager.getPath(PropertyStates.createProperty(\"\", value, Type.WEAKREFERENCE));\n+                        next = identifierManager.getPath(PropertyValues.newWeakReference(value));\n \n                         // filter by authorizable type, and/or get inherited members\n-                        if (includeInherited || authorizableType != AuthorizableType.AUTHORIZABLE) {\n+                        if (next != null && (includeInherited || authorizableType != AuthorizableType.AUTHORIZABLE)) {\n                             Tree auth = getByPath(next);\n                             AuthorizableType type = UserUtil.getType(auth);\n ",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/053f110542ffb177894d8662ca1e6e58ad469734/oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/MembershipProvider.java",
                "sha": "45e111411dfe43d9585e8eca2a4afd848fb5c02f",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/053f110542ffb177894d8662ca1e6e58ad469734/oak-jcr/pom.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-jcr/pom.xml?ref=053f110542ffb177894d8662ca1e6e58ad469734",
                "deletions": 2,
                "filename": "oak-jcr/pom.xml",
                "patch": "@@ -170,8 +170,6 @@\n \n       <!-- Node Types -->\n       org.apache.jackrabbit.oak.jcr.nodetype.MixinTest#testRemoveAddMixVersionable1                  <!-- OAK-1118 -->\n-\n-      org.apache.jackrabbit.oak.jcr.security.principal.PrincipalManagerTest#testMembers              <!-- OAK-1218 -->\n     </known.issues>\n   </properties>\n ",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/053f110542ffb177894d8662ca1e6e58ad469734/oak-jcr/pom.xml",
                "sha": "a306f868516b7236051f74e01616fe5caacd08bb",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/053f110542ffb177894d8662ca1e6e58ad469734/oak-jcr/src/test/java/org/apache/jackrabbit/oak/jcr/security/principal/PrincipalManagerTest.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-jcr/src/test/java/org/apache/jackrabbit/oak/jcr/security/principal/PrincipalManagerTest.java?ref=053f110542ffb177894d8662ca1e6e58ad469734",
                "deletions": 1,
                "filename": "oak-jcr/src/test/java/org/apache/jackrabbit/oak/jcr/security/principal/PrincipalManagerTest.java",
                "patch": "@@ -28,6 +28,7 @@\n import org.apache.jackrabbit.api.JackrabbitSession;\n import org.apache.jackrabbit.api.security.principal.PrincipalIterator;\n import org.apache.jackrabbit.api.security.principal.PrincipalManager;\n+import org.apache.jackrabbit.api.security.user.Authorizable;\n import org.apache.jackrabbit.oak.spi.security.principal.EveryonePrincipal;\n import org.apache.jackrabbit.test.AbstractJCRTest;\n import org.apache.jackrabbit.test.NotExecutableException;\n@@ -175,7 +176,6 @@ public void testGetAllPrincipals() {\n     }\n \n     @Test\n-    // FIXME See OAK-1218\n     public void testMembers() {\n         PrincipalIterator it = principalMgr.getPrincipals(PrincipalManager.SEARCH_TYPE_ALL);\n         while (it.hasNext()) {\n@@ -193,6 +193,34 @@ public void testMembers() {\n         }\n     }\n \n+    @Test\n+    public void testMembers2() throws Exception {\n+        Authorizable gr = null;\n+        try {\n+            gr = ((JackrabbitSession) superuser).getUserManager().createGroup(getClass().getName());\n+            superuser.save();\n+            PrincipalIterator it = principalMgr.getPrincipals(PrincipalManager.SEARCH_TYPE_ALL);\n+            while (it.hasNext()) {\n+                Principal p = it.nextPrincipal();\n+                if (p.equals(principalMgr.getEveryone())) {\n+                    continue;\n+                }\n+                if (isGroup(p)) {\n+                    Enumeration<? extends Principal> en = ((java.security.acl.Group) p).members();\n+                    while (en.hasMoreElements()) {\n+                        Principal memb = en.nextElement();\n+                        assertTrue(principalMgr.hasPrincipal(memb.getName()));\n+                    }\n+                }\n+            }\n+        } finally {\n+            if (gr != null) {\n+                gr.remove();\n+                superuser.save();\n+            }\n+        }\n+    }\n+\n     @Test\n     public void testGroupMembership() {\n         testMembership(PrincipalManager.SEARCH_TYPE_NOT_GROUP);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/053f110542ffb177894d8662ca1e6e58ad469734/oak-jcr/src/test/java/org/apache/jackrabbit/oak/jcr/security/principal/PrincipalManagerTest.java",
                "sha": "8154409f4ad5a6c092471adab7874e3dfa14f77d",
                "status": "modified"
            }
        ],
        "message": "OAK-1218 : NPE in PrincipalManagerTest#testMembers\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1545217 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/1a2a484a41e592d7df42c4ab58dcc540e0cc141b",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "IdentifierManagerTest.java",
            "GroupImplTest.java",
            "MembershipProviderTest.java"
        ]
    },
    "jackrabbit-oak_0ca2725": {
        "bug_id": "jackrabbit-oak_0ca2725",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/0ca272564f169715049fc2a7f3b49a3079a95eb0",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/0ca272564f169715049fc2a7f3b49a3079a95eb0/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java?ref=0ca272564f169715049fc2a7f3b49a3079a95eb0",
                "deletions": 1,
                "filename": "oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "patch": "@@ -833,7 +833,7 @@ public void dispose() {\n \n     private <T extends Document> T getIfCached(Collection<T> collection, String id, long modCount) {\n         T doc = getIfCached(collection, id);\n-        if (doc != null && doc.getModCount() == modCount) {\n+        if (doc != null && doc.getModCount() != null && doc.getModCount() == modCount) {\n             return doc;\n         } else {\n             return null;",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/0ca272564f169715049fc2a7f3b49a3079a95eb0/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "sha": "d7cd619d2dc27561f28b8617ff51ef04856ad8b0",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/0ca272564f169715049fc2a7f3b49a3079a95eb0/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java?ref=0ca272564f169715049fc2a7f3b49a3079a95eb0",
                "deletions": 3,
                "filename": "oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java",
                "patch": "@@ -62,6 +62,7 @@\n import org.slf4j.LoggerFactory;\n \n import com.google.common.base.Function;\n+import com.google.common.base.Strings;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.Lists;\n \n@@ -84,6 +85,8 @@\n     private final RDBDocumentSerializer ser;\n     private final int queryHitsLimit, queryTimeLimit;\n \n+    private static final Long INITIALMODCOUNT = Long.valueOf(1);\n+    \n     public RDBDocumentStoreJDBC(RDBDocumentStoreDB dbInfo, RDBDocumentSerializer ser, int queryHitsLimit, int queryTimeLimit) {\n         this.dbInfo = dbInfo;\n         this.ser = ser;\n@@ -343,7 +346,7 @@ public long determineServerTimeDifferenceMillis(Connection connection) {\n             boolean batchIsEmpty = true;\n             for (T document : sortDocuments(documents)) {\n                 Long modcount = (Long) document.get(MODCOUNT);\n-                if (modcount == 1) {\n+                if (INITIALMODCOUNT.equals(modcount)) {\n                     continue; // This is a new document. We'll deal with the inserts later.\n                 }\n \n@@ -414,7 +417,7 @@ public long determineServerTimeDifferenceMillis(Connection connection) {\n         if (upsert) {\n             List<T> toBeInserted = new ArrayList<T>(documents.size());\n             for (T doc : documents) {\n-                if ((Long) doc.get(MODCOUNT) == 1) {\n+                if (INITIALMODCOUNT.equals(doc.get(MODCOUNT))) {\n                     toBeInserted.add(doc);\n                 }\n             }\n@@ -1111,7 +1114,7 @@ private static Integer hasBinaryAsNullOrInteger(Number n) {\n         Collections.sort(result, new Comparator<T>() {\n             @Override\n             public int compare(T o1, T o2) {\n-                return o1.getId().compareTo(o2.getId());\n+                return Strings.nullToEmpty(o1.getId()).compareTo(Strings.nullToEmpty(o2.getId()));\n             }\n         });\n         return result;",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/0ca272564f169715049fc2a7f3b49a3079a95eb0/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java",
                "sha": "eb038b66fa28840181ca26b9f32d406603bc2724",
                "status": "modified"
            }
        ],
        "message": "OAK-8346: RDBDocumentStore*: fix several potential but improbable NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1859881 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/7cbf317f8e540adabd017ec11c0ee3714a27f830",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "RDBDocumentStoreTest.java",
            "RDBDocumentStoreJDBCTest.java"
        ]
    },
    "jackrabbit-oak_0d18e30": {
        "bug_id": "jackrabbit-oak_0d18e30",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/0d18e3020b00cf265bd712da0b086297426376ca",
        "file": [
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/0d18e3020b00cf265bd712da0b086297426376ca/oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/jmx/SyncMBeanImpl.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/jmx/SyncMBeanImpl.java?ref=0d18e3020b00cf265bd712da0b086297426376ca",
                "deletions": 21,
                "filename": "oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/jmx/SyncMBeanImpl.java",
                "patch": "@@ -159,9 +159,7 @@ private void close() {\n                     SyncResult r = context.sync(userId);\n                     systemSession.save();\n                     result.add(getJSONString(r));\n-                } catch (SyncException e) {\n-                    log.warn(\"Error while syncing user {}\", userId, e);\n-                } catch (RepositoryException e) {\n+                } catch (Exception e) {\n                     log.warn(\"Error while syncing user {}\", userId, e);\n                 }\n             }\n@@ -186,9 +184,8 @@ private void close() {\n                             SyncResult r = context.sync(id.getId());\n                             systemSession.save();\n                             list.add(getJSONString(r));\n-                        } catch (SyncException e) {\n-                            list.add(getJSONString(id, e));\n-                        } catch (RepositoryException e) {\n+                        } catch (Exception e) {\n+                            log.error(\"Error while syncing user {}\", id, e);\n                             list.add(getJSONString(id, e));\n                         }\n                     }\n@@ -224,9 +221,8 @@ private void close() {\n                 } catch (ExternalIdentityException e) {\n                     log.warn(\"error while fetching the external identity {}\", externalId, e);\n                     list.add(getJSONString(ref, e));\n-                } catch (SyncException e) {\n-                    list.add(getJSONString(ref, e));\n-                } catch (RepositoryException e) {\n+                } catch (Exception e) {\n+                    log.error(\"Error while syncing user {}\", ref, e);\n                     list.add(getJSONString(ref, e));\n                 }\n             }\n@@ -247,10 +243,18 @@ private void close() {\n                     try {\n                         SyncResult r = context.sync(user);\n                         systemSession.save();\n+                        if (r.getIdentity() == null) {\n+                            r = new DefaultSyncResultImpl(\n+                                    new DefaultSyncedIdentity(user.getId(), user.getExternalId(), false, -1),\n+                                    SyncResult.Status.NO_SUCH_IDENTITY\n+                            );\n+                            log.warn(\"sync failed. {}\", r.getIdentity());\n+                        } else {\n+                            log.info(\"synced {}\", r.getIdentity());\n+                        }\n                         list.add(getJSONString(r));\n-                    } catch (SyncException e) {\n-                        list.add(getJSONString(user.getExternalId(), e));\n-                    } catch (RepositoryException e) {\n+                    } catch (Exception e) {\n+                        log.error(\"Error while syncing user {}\", user, e);\n                         list.add(getJSONString(user.getExternalId(), e));\n                     }\n                 }\n@@ -271,17 +275,19 @@ private void close() {\n                 while (iter.hasNext()) {\n                     SyncedIdentity id = iter.next();\n                     if (isMyIDP(id)) {\n-                        ExternalIdentityRef exIdRef = id.getExternalIdRef();\n-                        ExternalIdentity extId = (exIdRef == null) ? null : idp.getIdentity(exIdRef);\n-                        if (extId == null) {\n-                            list.add(id.getId());\n+                        try {\n+                            ExternalIdentityRef ref = id.getExternalIdRef();\n+                            ExternalIdentity extId = ref == null ? null : idp.getIdentity(ref);\n+                            if (extId == null) {\n+                                list.add(id.getId());\n+                            }\n+                        } catch (Exception e) {\n+                            log.error(\"Error while fetching external identity {}\", id, e);\n                         }\n                     }\n                 }\n             } catch (RepositoryException e) {\n                 log.error(\"Error while listing orphaned users\", e);\n-            } catch (ExternalIdentityException e) {\n-                log.error(\"Error while fetching external identity\", e);\n             }\n             return list.toArray(new String[list.size()]);\n         }\n@@ -298,9 +304,7 @@ private void close() {\n                     SyncResult r = context.sync(userId);\n                     systemSession.save();\n                     result.add(getJSONString(r));\n-                } catch (SyncException e) {\n-                    log.warn(\"Error while syncing user {}\", userId, e);\n-                } catch (RepositoryException e) {\n+                } catch (Exception e) {\n                     log.warn(\"Error while syncing user {}\", userId, e);\n                 }\n             }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/0d18e3020b00cf265bd712da0b086297426376ca/oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/jmx/SyncMBeanImpl.java",
                "sha": "d7a847da63233d405b58536ea80cbcfe5c40ab77",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/0d18e3020b00cf265bd712da0b086297426376ca/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/ExternalLoginModuleTestBase.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/ExternalLoginModuleTestBase.java?ref=0d18e3020b00cf265bd712da0b086297426376ca",
                "deletions": 2,
                "filename": "oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/ExternalLoginModuleTestBase.java",
                "patch": "@@ -36,6 +36,7 @@\n import org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalIDPManagerImpl;\n import org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModule;\n import org.apache.jackrabbit.oak.spi.security.authentication.external.impl.SyncManagerImpl;\n+import org.apache.jackrabbit.oak.spi.security.authentication.external.impl.jmx.SynchronizationMBean;\n import org.apache.jackrabbit.oak.spi.whiteboard.Registration;\n import org.apache.jackrabbit.oak.spi.whiteboard.Whiteboard;\n import org.junit.After;\n@@ -58,6 +59,10 @@\n \n     protected ExternalIdentityProvider idp;\n \n+    protected SyncManager syncManager;\n+\n+    protected ExternalIdentityProviderManager idpManager;\n+\n     protected DefaultSyncConfig syncConfig;\n \n     @Before\n@@ -123,8 +128,10 @@ protected Oak withEditors(Oak oak) {\n \n         // register non-OSGi managers\n         whiteboard = oak.getWhiteboard();\n-        whiteboard.register(SyncManager.class, new SyncManagerImpl(whiteboard), Collections.emptyMap());\n-        whiteboard.register(ExternalIdentityProviderManager.class, new ExternalIDPManagerImpl(whiteboard), Collections.emptyMap());\n+        syncManager = new SyncManagerImpl(whiteboard);\n+        whiteboard.register(SyncManager.class, syncManager, Collections.emptyMap());\n+        idpManager = new ExternalIDPManagerImpl(whiteboard);\n+        whiteboard.register(ExternalIdentityProviderManager.class, idpManager, Collections.emptyMap());\n \n         return oak;\n     }\n@@ -133,6 +140,14 @@ protected Oak withEditors(Oak oak) {\n \n     protected abstract void destroyIDP(ExternalIdentityProvider idp);\n \n+    protected SynchronizationMBean createMBean() {\n+        // todo: how to retrieve JCR repository here? maybe we should base the sync mbean on oak directly.\n+        // JackrabbitRepository repository =  null;\n+        // return new SyncMBeanImpl(repository, syncManager, \"default\", idpManager, idp.getName());\n+\n+        throw new UnsupportedOperationException(\"creating the mbean is not supported yet.\");\n+    }\n+\n     protected void setSyncConfig(DefaultSyncConfig cfg) {\n         if (syncHandlerReg != null) {\n             syncHandlerReg.unregister();",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/0d18e3020b00cf265bd712da0b086297426376ca/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/ExternalLoginModuleTestBase.java",
                "sha": "f6faee5cbccb89034551c8ff34e9466edd7b9108",
                "status": "modified"
            }
        ],
        "message": "OAK-3311 Potential NPE in syncAllExternalUsers() aborts the process\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1706459 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/4f560d19e9ff1e0133d8cfbc710eaecb9037a1d0",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "SyncMBeanImplTest.java"
        ]
    },
    "jackrabbit-oak_10be946": {
        "bug_id": "jackrabbit-oak_10be946",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/10be946c533730a583434791c64f836861ac6ea6",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/10be946c533730a583434791c64f836861ac6ea6/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/util/TimingDocumentStoreWrapper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/util/TimingDocumentStoreWrapper.java?ref=10be946c533730a583434791c64f836861ac6ea6",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/util/TimingDocumentStoreWrapper.java",
                "patch": "@@ -433,7 +433,7 @@ private void log(String message) {\n     private static <T extends Document> int size(List<T> list) {\n         int result = 0;\n         for (T doc : list) {\n-            result += doc.getMemory();\n+            result += size(doc);\n         }\n         return result;\n     }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/10be946c533730a583434791c64f836861ac6ea6/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/util/TimingDocumentStoreWrapper.java",
                "sha": "414f04a64710f533f11eee031c18f832186e780d",
                "status": "modified"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/10be946c533730a583434791c64f836861ac6ea6/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/document/util/TimingDocumentStoreWrapperTest.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/document/util/TimingDocumentStoreWrapperTest.java?ref=10be946c533730a583434791c64f836861ac6ea6",
                "deletions": 0,
                "filename": "oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/document/util/TimingDocumentStoreWrapperTest.java",
                "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.oak.plugins.document.util;\n+\n+import java.util.Collections;\n+\n+import org.apache.jackrabbit.oak.plugins.document.Collection;\n+import org.apache.jackrabbit.oak.plugins.document.Document;\n+import org.apache.jackrabbit.oak.plugins.document.DocumentStore;\n+import org.apache.jackrabbit.oak.plugins.document.UpdateOp;\n+import org.apache.jackrabbit.oak.plugins.document.memory.MemoryDocumentStore;\n+import org.junit.Test;\n+\n+public class TimingDocumentStoreWrapperTest {\n+\n+    @Test\n+    public void createOrUpdate() {\n+        DocumentStore store = new TimingDocumentStoreWrapper(new MemoryDocumentStore());\n+        UpdateOp op = new UpdateOp(\"foo\", true);\n+        op.set(Document.ID, \"foo\");\n+        store.createOrUpdate(Collection.NODES, Collections.singletonList(op));\n+    }\n+}",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/10be946c533730a583434791c64f836861ac6ea6/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/document/util/TimingDocumentStoreWrapperTest.java",
                "sha": "898f98dec0e9c40ce3b6cb92774ed2ec8a1f3ea4",
                "status": "added"
            }
        ],
        "message": "OAK-3951: TimingDocumentStoreWrapper throws NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1727429 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/0aabaec2eafcb61109307b4721210f2b646f5aa2",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "TimingDocumentStoreWrapperTest.java"
        ]
    },
    "jackrabbit-oak_1381db4": {
        "bug_id": "jackrabbit-oak_1381db4",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/1381db46096850ef4a975445dac682ca57c944e6",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/1381db46096850ef4a975445dac682ca57c944e6/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java?ref=1381db46096850ef4a975445dac682ca57c944e6",
                "deletions": 2,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "patch": "@@ -656,7 +656,9 @@ private static String asString(@Nonnull Document doc) {\n             return success;\n         } catch (SQLException ex) {\n             try {\n-                connection.rollback();\n+                if (connection != null) {\n+                    connection.rollback();\n+                }\n             } catch (SQLException e) {\n                 // TODO\n             }\n@@ -681,7 +683,9 @@ private static String asString(@Nonnull Document doc) {\n         } catch (SQLException ex) {\n             LOG.debug(\"insert of \" + document.getId() + \" failed\", ex);\n             try {\n-                connection.rollback();\n+                if (connection != null) {\n+                    connection.rollback();\n+                }\n             } catch (SQLException e) {\n                 // TODO\n             }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/1381db46096850ef4a975445dac682ca57c944e6/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "sha": "7e41705dcf52085791e44f0d261e49a757319900",
                "status": "modified"
            }
        ],
        "message": "OAK-1853: Potential NPE in RDBDocumentStore\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1596875 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/175f8a7ccbbc4c94478bc8bd7495d598a315232d",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "RDBDocumentStoreTest.java"
        ]
    },
    "jackrabbit-oak_157bf55": {
        "bug_id": "jackrabbit-oak_157bf55",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/157bf5548ac23a22822ad38fff87a969114f7b43",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/157bf5548ac23a22822ad38fff87a969114f7b43/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/Commit.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/Commit.java?ref=157bf5548ac23a22822ad38fff87a969114f7b43",
                "deletions": 3,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/Commit.java",
                "patch": "@@ -179,9 +179,12 @@ void apply() throws DocumentStoreException {\n                 success = true;\n             } finally {\n                 if (!success) {\n-                    b.removeCommit(rev.asBranchRevision());\n-                    if (!b.hasCommits()) {\n-                        nodeStore.getBranches().remove(b);\n+                    Branch branch = getBranch();\n+                    if (branch != null) {\n+                        branch.removeCommit(rev.asBranchRevision());\n+                        if (!branch.hasCommits()) {\n+                            nodeStore.getBranches().remove(branch);\n+                        }\n                     }\n                 }\n             }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/157bf5548ac23a22822ad38fff87a969114f7b43/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/Commit.java",
                "sha": "97ed2c6cd6895ceee8f907be7c7ca28d9cd69c03",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/157bf5548ac23a22822ad38fff87a969114f7b43/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/document/CommitTest.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/document/CommitTest.java?ref=157bf5548ac23a22822ad38fff87a969114f7b43",
                "deletions": 0,
                "filename": "oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/document/CommitTest.java",
                "patch": "@@ -25,6 +25,7 @@\n import org.junit.Rule;\n import org.junit.Test;\n \n+import static org.apache.jackrabbit.oak.plugins.memory.EmptyNodeState.EMPTY_NODE;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n@@ -109,4 +110,27 @@ public void mergeExceptionMessage() throws Exception {\n             ns.canceled(c);\n         }\n     }\n+\n+    // OAK-4894\n+    @Test\n+    public void branchCommitFails() throws Exception {\n+        // prepare node store\n+        DocumentNodeStore ns = builderProvider.newBuilder().getNodeStore();\n+\n+        // this branch commit must fail with a DocumentStoreException\n+        Commit c = ns.newCommit(ns.getHeadRevision().asBranchRevision(ns.getClusterId()), null);\n+        try {\n+            c.removeNode(\"/foo\", EMPTY_NODE);\n+            try {\n+                c.apply();\n+                fail(\"commit must fail\");\n+            } catch (DocumentStoreException e) {\n+                // expected\n+                assertTrue(\"Unexpected exception message: \" + e.getMessage(),\n+                        e.getMessage().contains(\"does not exist\"));\n+            }\n+        } finally {\n+            ns.canceled(c);\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/157bf5548ac23a22822ad38fff87a969114f7b43/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/document/CommitTest.java",
                "sha": "4250ba299a0677319a21bdfd4878476679941749",
                "status": "modified"
            }
        ],
        "message": "OAK-4894: Potential NPE in Commit.apply()\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1763465 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/dcdae91c976a111315ee0e9a373c4e6556e49065",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "CommitTest.java"
        ]
    },
    "jackrabbit-oak_1d42f6d": {
        "bug_id": "jackrabbit-oak_1d42f6d",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/1d42f6d206286e51fc0396c932d29a9b4726fdc3",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/1d42f6d206286e51fc0396c932d29a9b4726fdc3/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/commit/BackgroundObserver.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/commit/BackgroundObserver.java?ref=1d42f6d206286e51fc0396c932d29a9b4726fdc3",
                "deletions": 2,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/spi/commit/BackgroundObserver.java",
                "patch": "@@ -227,7 +227,7 @@ public int getMaxQueueSize() {\n             public int getLocalEventCount() {\n                 return size(filter(queue, new Predicate<ContentChange>() {\n                     @Override\n-                    public boolean apply(@Nullable ContentChange input) {\n+                    public boolean apply(ContentChange input) {\n                         return input.info != null;\n                     }\n                 }));\n@@ -237,7 +237,7 @@ public boolean apply(@Nullable ContentChange input) {\n             public int getExternalEventCount() {\n                 return size(filter(queue, new Predicate<ContentChange>() {\n                     @Override\n-                    public boolean apply(@Nullable ContentChange input) {\n+                    public boolean apply(ContentChange input) {\n                         return input.info == null;\n                     }\n                 }));",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/1d42f6d206286e51fc0396c932d29a9b4726fdc3/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/commit/BackgroundObserver.java",
                "sha": "3e15297b76359fef8ed21286a414076259dc2465",
                "status": "modified"
            }
        ],
        "message": "OAK-2784 - Potential NPEs in BackgroundObserverMBean\n\nApply patch from Marcel. Remove Nullable annotation to indicate that parameter cannot be null\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1675074 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/65e7265b5f890d946c8438b3c63693cf7e147127",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "BackgroundObserverTest.java"
        ]
    },
    "jackrabbit-oak_1d6dfdf": {
        "bug_id": "jackrabbit-oak_1d6dfdf",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/1d6dfdf596072ebc761081576469bcc943a49804",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/1d6dfdf596072ebc761081576469bcc943a49804/oak-search/src/main/java/org/apache/jackrabbit/oak/plugins/index/search/ExtractedTextCache.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-search/src/main/java/org/apache/jackrabbit/oak/plugins/index/search/ExtractedTextCache.java?ref=1d6dfdf596072ebc761081576469bcc943a49804",
                "deletions": 2,
                "filename": "oak-search/src/main/java/org/apache/jackrabbit/oak/plugins/index/search/ExtractedTextCache.java",
                "patch": "@@ -158,9 +158,12 @@ public void putTimeout(@Nonnull Blob blob, @Nonnull ExtractedText extractedText)\n         if (EXTRACT_FORGET_TIMEOUT) {\n             return;\n         }\n+\n         String id = blob.getContentIdentity();\n-        timeoutMap.put(id, getText(extractedText));\n-        storeTimeoutMap();\n+        if (id != null) {\n+            timeoutMap.put(id, getText(extractedText));\n+            storeTimeoutMap();\n+        }\n     }\n \n     private static String getText(ExtractedText text) {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/1d6dfdf596072ebc761081576469bcc943a49804/oak-search/src/main/java/org/apache/jackrabbit/oak/plugins/index/search/ExtractedTextCache.java",
                "sha": "98a8c0b5b84437796f5429ef5def72e9ddbebcc2",
                "status": "modified"
            }
        ],
        "message": "OAK-7508: Text extraction timeout can lead to NPE\n\nAlso fix in oak-seach module (test to be committed under OAK-7410)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1832377 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/b997936d972e9b26f6ff276262428a9ddc5bd5ad",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "ExtractedTextCacheTest.java"
        ]
    },
    "jackrabbit-oak_20fc4ec": {
        "bug_id": "jackrabbit-oak_20fc4ec",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/20fc4ecc0b0dfbfe8e9876833526025ab1002d62",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/20fc4ecc0b0dfbfe8e9876833526025ab1002d62/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java?ref=20fc4ecc0b0dfbfe8e9876833526025ab1002d62",
                "deletions": 6,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java",
                "patch": "@@ -19,11 +19,6 @@\n import static com.google.common.base.Objects.toStringHelper;\n import static com.google.common.base.Preconditions.checkNotNull;\n import static com.google.common.base.Preconditions.checkState;\n-import static java.util.Collections.emptyList;\n-import static org.apache.jackrabbit.oak.api.Type.BOOLEAN;\n-import static org.apache.jackrabbit.oak.api.Type.NAME;\n-import static org.apache.jackrabbit.oak.api.Type.NAMES;\n-import static org.apache.jackrabbit.oak.api.Type.STRING;\n import static org.apache.jackrabbit.oak.plugins.memory.EmptyNodeState.EMPTY_NODE;\n \n import java.io.IOException;\n@@ -128,8 +123,8 @@ protected MemoryNodeBuilder(MemoryNodeBuilder parent, String name) {\n         this.parent = parent;\n         this.name = name;\n         this.rootBuilder = parent.rootBuilder;\n+        this.base = parent.base().getChildNode(name);\n         this.baseRevision = parent.baseRevision;\n-        this.base = parent.base.getChildNode(name);\n         this.head = new UnconnectedHead();\n     }\n ",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/20fc4ecc0b0dfbfe8e9876833526025ab1002d62/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java",
                "sha": "75d6c457d34ce8034be0a173375cc33238c8c93c",
                "status": "modified"
            }
        ],
        "message": "OAK-1288: NPE when running SmallFileReadTest on mongo\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1551591 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/937bc27af3354e958ba9b93779d2a8db7b826998",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "MemoryNodeBuilderTest.java"
        ]
    },
    "jackrabbit-oak_286a898": {
        "bug_id": "jackrabbit-oak_286a898",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/286a898a9680f1ea097d9fb2486e9193dde83dc5",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/286a898a9680f1ea097d9fb2486e9193dde83dc5/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/IndexDefinitionBuilder.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/IndexDefinitionBuilder.java?ref=286a898a9680f1ea097d9fb2486e9193dde83dc5",
                "deletions": 1,
                "filename": "oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/IndexDefinitionBuilder.java",
                "patch": "@@ -312,7 +312,13 @@ private void loadExisting() {\n \n         private Tree findExisting(String name) {\n             for (Tree tree : getPropsTree().getChildren()){\n-                if (name.equals(tree.getProperty(FulltextIndexConstants.PROP_NAME).getValue(Type.STRING))){\n+                String treeName = tree.getName();\n+                PropertyState ps = tree.getProperty(FulltextIndexConstants.PROP_NAME);\n+                if(ps != null) {\n+                    treeName = ps.getValue(Type.STRING);\n+                }\n+\n+                if (name.equals(treeName)) {\n                     return tree;\n                 }\n             }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/286a898a9680f1ea097d9fb2486e9193dde83dc5/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/IndexDefinitionBuilder.java",
                "sha": "72147939cc7d891669fc1f6b9be4e0255edfbfb1",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/286a898a9680f1ea097d9fb2486e9193dde83dc5/oak-lucene/src/test/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/IndexDefinitionBuilderTest.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-lucene/src/test/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/IndexDefinitionBuilderTest.java?ref=286a898a9680f1ea097d9fb2486e9193dde83dc5",
                "deletions": 0,
                "filename": "oak-lucene/src/test/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/IndexDefinitionBuilderTest.java",
                "patch": "@@ -973,4 +973,20 @@ public void tags() {\n         assertThat(state.getProperty(INDEX_TAGS).getValue(Type.STRINGS),\n                 Matchers.containsInAnyOrder(\"foo5\"));\n     }\n+\n+    @Test\n+    public void unnamedPropertyRuleInExistingIndex() {\n+        // create an initial index with property rule for \"foo\"\n+        builder\n+                .indexRule(\"nt:base\")\n+                .property(\"foo\")\n+                //  remove \"name\" property explicitly\n+                .getBuilderTree().removeProperty(\"name\");\n+        NodeState initialIndexState = builder.build();\n+\n+        // Use initial index def to add some other property rule - this should work\n+        new IndexDefinitionBuilder(initialIndexState.builder())\n+                .indexRule(\"nt:base\")\n+                .property(\"bar\");\n+    }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/286a898a9680f1ea097d9fb2486e9193dde83dc5/oak-lucene/src/test/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/IndexDefinitionBuilderTest.java",
                "sha": "1fecbe6c0a3a1b8db0fca7329d8ebd59e249dbae",
                "status": "modified"
            }
        ],
        "message": "OAK-8589: NPE in IndexDefintionBuilder with existing property rule without \"name\" property\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1866456 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/96d4dfe757fad11f18fd0d29b89f39308c906e4c",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "IndexDefinitionBuilderTest.java"
        ]
    },
    "jackrabbit-oak_2dc3516": {
        "bug_id": "jackrabbit-oak_2dc3516",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/2dc351603dfef3d214b562b821dcfec45f22de13",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/2dc351603dfef3d214b562b821dcfec45f22de13/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/LastRevRecoveryAgent.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/LastRevRecoveryAgent.java?ref=2dc351603dfef3d214b562b821dcfec45f22de13",
                "deletions": 3,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/LastRevRecoveryAgent.java",
                "patch": "@@ -78,11 +78,11 @@ public int recover(int clusterId) {\n         final long asyncDelay = nodeStore.getAsyncDelay();\n \n         if (nodeInfo != null) {\n-            long leaseEnd = nodeInfo.getLeaseEndTime();\n-\n             // Check if _lastRev recovery needed for this cluster node\n             // state is Active && recoveryLock not held by someone\n-            if (isRecoveryNeeded(nodeInfo)) {            \n+            if (isRecoveryNeeded(nodeInfo)) {\n+                long leaseEnd = nodeInfo.getLeaseEndTime();\n+\n                 // retrieve the root document's _lastRev\n                 NodeDocument root = missingLastRevUtil.getRoot();\n                 Revision lastRev = root.getLastRev().get(clusterId);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/2dc351603dfef3d214b562b821dcfec45f22de13/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/LastRevRecoveryAgent.java",
                "sha": "810fbede3177deefb3c935c8cb47bdaf35086557",
                "status": "modified"
            }
        ],
        "message": "OAK-1953: Oak console on MongoMK fails with NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1608463 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/4af966397dcbf4a0c54a28ddd1034cb556bc315d",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "LastRevRecoveryAgentTest.java"
        ]
    },
    "jackrabbit-oak_313c667": {
        "bug_id": "jackrabbit-oak_313c667",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/313c667f08a84644d67df6f995aa5d03129ba1d9",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/313c667f08a84644d67df6f995aa5d03129ba1d9/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java?ref=313c667f08a84644d67df6f995aa5d03129ba1d9",
                "deletions": 5,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java",
                "patch": "@@ -196,22 +196,24 @@ public TreePermission getTreePermission(@Nonnull ImmutableTree tree, @Nonnull Tr\n                 } else {\n                     TreeLocation tl = getLocation(tree, null);\n                     if (tl == null) {\n+                        log.warn(\"Cannot retrieve versionable node for \" + tree.getPath());\n                         return TreePermission.EMPTY;\n                     } else {\n                         // TODO: may return wrong results in case of restrictions\n                         // TODO that would match the path of the versionable node\n                         // TODO (or item in the subtree) but that item no longer exists\n                         // TODO -> evaluation by path would be more accurate (-> see #isGranted)\n-                        while (!tl.exists()) {\n+                        while (!tl.exists() || tl.getProperty() != null) {\n                             tl = tl.getParent();\n                         }\n                         Tree versionableTree = tl.getTree();\n                         if (versionableTree == null) {\n-                            // for PropertyLocations\n-                            versionableTree = tl.getParent().getTree();\n+                            log.warn(\"Cannot retrieve versionable tree for {0}; versionable location {1} does not resolve to an existing tree.\", tree.getPath(), tl.getPath());\n+                            return TreePermission.EMPTY;\n+                        } else {\n+                            TreePermission pp = getParentPermission(versionableTree, TreeTypeProvider.TYPE_VERSION);\n+                            return new TreePermissionImpl(versionableTree, TreeTypeProvider.TYPE_VERSION, pp);\n                         }\n-                        TreePermission pp = getParentPermission(versionableTree, TreeTypeProvider.TYPE_VERSION);\n-                        return new TreePermissionImpl(versionableTree, TreeTypeProvider.TYPE_VERSION, pp);\n                     }\n                 }\n             case TreeTypeProvider.TYPE_PERMISSION_STORE:",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/313c667f08a84644d67df6f995aa5d03129ba1d9/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java",
                "sha": "c633c4a659aa18491727173ede552b6e32b7733e",
                "status": "modified"
            }
        ],
        "message": "OAK-1135 : NPE in CompiledPermissionImpl.getTreePermission() \n\n- slight modification, add log output if versionable node/path cannot be resolved\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1537474 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/b977c6f989d4d922faa00e3a767d475f8a4ca1ec",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "CompiledPermissionImplTest.java"
        ]
    },
    "jackrabbit-oak_3668247": {
        "bug_id": "jackrabbit-oak_3668247",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/36682476226d2f7e2318e6b3f794cc1f2dee491e",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/36682476226d2f7e2318e6b3f794cc1f2dee491e/oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/UserImporter.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/UserImporter.java?ref=36682476226d2f7e2318e6b3f794cc1f2dee491e",
                "deletions": 0,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/UserImporter.java",
                "patch": "@@ -240,6 +240,12 @@ public boolean handlePropInfo(@Nonnull Tree parent, @Nonnull PropInfo propInfo,\n                 }\n                 String id = propInfo.getTextValue().getString();\n                 Authorizable existing = userManager.getAuthorizable(id);\n+                if (existing == null) {\n+                    String msg = \"Cannot handle protected PropInfo \" + propInfo + \". Invalid rep:authorizableId.\";\n+                    log.warn(msg);\n+                    throw new ConstraintViolationException(msg);\n+                }\n+\n                 if (a.getPath().equals(existing.getPath())) {\n                     parent.setProperty(REP_AUTHORIZABLE_ID, id);\n                 } else {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/36682476226d2f7e2318e6b3f794cc1f2dee491e/oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/UserImporter.java",
                "sha": "aa4b989f04d37f225c9ec9c7322a9015177a5471",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/36682476226d2f7e2318e6b3f794cc1f2dee491e/oak-jcr/src/test/java/org/apache/jackrabbit/oak/jcr/security/user/UserImportTest.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-jcr/src/test/java/org/apache/jackrabbit/oak/jcr/security/user/UserImportTest.java?ref=36682476226d2f7e2318e6b3f794cc1f2dee491e",
                "deletions": 0,
                "filename": "oak-jcr/src/test/java/org/apache/jackrabbit/oak/jcr/security/user/UserImportTest.java",
                "patch": "@@ -419,6 +419,38 @@ public void testImportUuidCollisionRemoveExisting() throws Exception {\n         getImportSession().save();\n     }\n \n+    @Test\n+    public void testImportUuidCollisionRemoveExistingWithInvalidUUID() throws Exception {\n+        String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<sv:node sv:name=\\\"r\\\" xmlns:mix=\\\"http://www.jcp.org/jcr/mix/1.0\\\" xmlns:nt=\\\"http://www.jcp.org/jcr/nt/1.0\\\" xmlns:fn_old=\\\"http://www.w3.org/2004/10/xpath-functions\\\" xmlns:fn=\\\"http://www.w3.org/2005/xpath-functions\\\" xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:sv=\\\"http://www.jcp.org/jcr/sv/1.0\\\" xmlns:rep=\\\"internal\\\" xmlns:jcr=\\\"http://www.jcp.org/jcr/1.0\\\">\" +\n+                \"   <sv:property sv:name=\\\"jcr:primaryType\\\" sv:type=\\\"Name\\\"><sv:value>rep:User</sv:value></sv:property>\" +\n+                \"   <sv:property sv:name=\\\"jcr:uuid\\\" sv:type=\\\"String\\\"><sv:value>4b43b0ae-e356-34cd-95b9-10189b3dc231</sv:value></sv:property>\" +\n+                \"   <sv:property sv:name=\\\"rep:password\\\" sv:type=\\\"String\\\"><sv:value>{sha1}8efd86fb78a56a5145ed7739dcb00c78581c5375</sv:value></sv:property>\" +\n+                \"   <sv:property sv:name=\\\"rep:authorizableId\\\" sv:type=\\\"String\\\"><sv:value>r</sv:value></sv:property>\" +\n+                \"   <sv:property sv:name=\\\"rep:principalName\\\" sv:type=\\\"String\\\"><sv:value>t</sv:value></sv:property>\" +\n+                \"</sv:node>\";\n+\n+        doImport(getTargetPath(), xml);\n+\n+        xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<sv:node sv:name=\\\"r\\\" xmlns:mix=\\\"http://www.jcp.org/jcr/mix/1.0\\\" xmlns:nt=\\\"http://www.jcp.org/jcr/nt/1.0\\\" xmlns:fn_old=\\\"http://www.w3.org/2004/10/xpath-functions\\\" xmlns:fn=\\\"http://www.w3.org/2005/xpath-functions\\\" xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:sv=\\\"http://www.jcp.org/jcr/sv/1.0\\\" xmlns:rep=\\\"internal\\\" xmlns:jcr=\\\"http://www.jcp.org/jcr/1.0\\\">\" +\n+                \"   <sv:property sv:name=\\\"jcr:primaryType\\\" sv:type=\\\"Name\\\"><sv:value>rep:User</sv:value></sv:property>\" +\n+                \"   <sv:property sv:name=\\\"jcr:uuid\\\" sv:type=\\\"String\\\"><sv:value>4b43b0ae-e356-34cd-95b9-10189b3dc231</sv:value></sv:property>\" +\n+                \"   <sv:property sv:name=\\\"rep:password\\\" sv:type=\\\"String\\\"><sv:value>{sha1}8efd86fb78a56a5145ed7739dcb00c78581c5375</sv:value></sv:property>\" +\n+                \"   <sv:property sv:name=\\\"rep:authorizableId\\\" sv:type=\\\"String\\\"><sv:value>ANOTHER_ID</sv:value></sv:property>\" +\n+                \"   <sv:property sv:name=\\\"rep:principalName\\\" sv:type=\\\"String\\\"><sv:value>t</sv:value></sv:property>\" +\n+                \"</sv:node>\";\n+\n+        try {\n+            doImport(getTargetPath(), xml, ImportUUIDBehavior.IMPORT_UUID_COLLISION_REMOVE_EXISTING);\n+            fail(\"Xml with illegal authorizable id must fail.\");\n+        } catch (ConstraintViolationException e) {\n+            // success\n+        } finally {\n+            getImportSession().refresh(false);\n+        }\n+    }\n+\n     /**\n      * Same as {@link #testImportUuidCollisionRemoveExisting} with the single\n      * difference that the initial import is saved before being overwritten.",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/36682476226d2f7e2318e6b3f794cc1f2dee491e/oak-jcr/src/test/java/org/apache/jackrabbit/oak/jcr/security/user/UserImportTest.java",
                "sha": "175a7148ae1a7baf5ffe657ad66385635bd588b6",
                "status": "modified"
            }
        ],
        "message": "OAK-2956 : NPE in UserImporter when importing group with modified authorizable id\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1689869 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/4a71b875c0a392468b8c4a36ed6499937262badb",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "UserImporterTest.java"
        ]
    },
    "jackrabbit-oak_3b2a979": {
        "bug_id": "jackrabbit-oak_3b2a979",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/3b2a979e5eef29cdcf35c20b7be1975d45ff8b16",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/3b2a979e5eef29cdcf35c20b7be1975d45ff8b16/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/identifier/ClusterRepositoryInfo.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/identifier/ClusterRepositoryInfo.java?ref=3b2a979e5eef29cdcf35c20b7be1975d45ff8b16",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/identifier/ClusterRepositoryInfo.java",
                "patch": "@@ -23,8 +23,11 @@\n import org.apache.jackrabbit.oak.spi.commit.CommitInfo;\n import org.apache.jackrabbit.oak.spi.commit.EmptyHook;\n import org.apache.jackrabbit.oak.spi.state.NodeBuilder;\n+import org.apache.jackrabbit.oak.spi.state.NodeState;\n import org.apache.jackrabbit.oak.spi.state.NodeStore;\n \n+import javax.annotation.CheckForNull;\n+\n /**\n  * Utility class to manage a unique cluster/repository id for the cluster.\n  */\n@@ -57,8 +60,13 @@ public static String createId(NodeStore store) throws CommitFailedException {\n      * @param store the NodeStore instance\n      * @return the repository id\n      */\n+    @CheckForNull\n     public static String getId(NodeStore store) {\n-        return store.getRoot().getChildNode(CLUSTER_CONFIG_NODE).getProperty(CLUSTER_ID_PROP).getValue(Type.STRING);\n+        NodeState state = store.getRoot().getChildNode(CLUSTER_CONFIG_NODE);\n+        if (state.hasProperty(CLUSTER_ID_PROP)) {\n+            return state.getProperty(CLUSTER_ID_PROP).getValue(Type.STRING);\n+        }\n+        return null;\n     }\n }\n ",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/3b2a979e5eef29cdcf35c20b7be1975d45ff8b16/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/identifier/ClusterRepositoryInfo.java",
                "sha": "d2755eb3359864572846b7bb310012dd2fc81e76",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/3b2a979e5eef29cdcf35c20b7be1975d45ff8b16/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/blob/ClusterRepositoryInfoTest.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/blob/ClusterRepositoryInfoTest.java?ref=3b2a979e5eef29cdcf35c20b7be1975d45ff8b16",
                "deletions": 0,
                "filename": "oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/blob/ClusterRepositoryInfoTest.java",
                "patch": "@@ -93,6 +93,19 @@ public void sameCluster() throws Exception {\n         Assert.assertEquals(repoId1, repoId2);\n     }\n \n+    @Test\n+    public void checkGetIdWhenNotRegistered() {\n+        MemoryDocumentStore store = new MemoryDocumentStore();\n+        DocumentNodeStore ds1 = new DocumentMK.Builder()\n+            .setAsyncDelay(0)\n+            .setDocumentStore(store)\n+            .setClusterId(1)\n+            .getNodeStore();\n+        // Should be null and no NPE\n+        String id = ClusterRepositoryInfo.getId(ds1);\n+        Assert.assertNull(id);\n+    }\n+\n     @After\n     public void close() throws IOException {\n         FileUtils.cleanDirectory(new File(DataStoreUtils.getHomeDir()));",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/3b2a979e5eef29cdcf35c20b7be1975d45ff8b16/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/blob/ClusterRepositoryInfoTest.java",
                "sha": "eb27670bcecdf33bd66e64772bfe2b1e2189de8d",
                "status": "modified"
            }
        ],
        "message": "OAK-2691: Blob GC throws NPE\n\nChecking existence of :clusterId property before retrieving\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1669992 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/64c57bd4a8a86e5f257422eaae38834397ba8aae",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "ClusterRepositoryInfoTest.java"
        ]
    },
    "jackrabbit-oak_443b0bb": {
        "bug_id": "jackrabbit-oak_443b0bb",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/443b0bb82aba1829d443e38306ea2a4754b3982b",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/443b0bb82aba1829d443e38306ea2a4754b3982b/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CommitHookEnhancer.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CommitHookEnhancer.java?ref=443b0bb82aba1829d443e38306ea2a4754b3982b",
                "deletions": 5,
                "filename": "oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CommitHookEnhancer.java",
                "patch": "@@ -50,19 +50,24 @@\n     public NodeState processCommit(NodeState before, NodeState after, CommitInfo info) throws CommitFailedException {\n         Map<MountedNodeStore, NodeState> beforeStates = newHashMap();\n         Map<MountedNodeStore, NodeState> afterStates = newHashMap();\n-        for (Map.Entry<MountedNodeStore, NodeBuilder> e : builders.entrySet()) {\n-            afterStates.put(e.getKey(), e.getKey().getNodeStore().rebase(e.getValue()));\n-            beforeStates.put(e.getKey(), e.getValue().getBaseState());\n+        for (MountedNodeStore mns : ctx.getNonDefaultStores()) {\n+            afterStates.put(mns, mns.getNodeStore().rebase(builders.get(mns)));\n+            beforeStates.put(mns, builders.get(mns).getBaseState());\n         }\n-        beforeStates.put(ctx.getGlobalStore(), before);\n         afterStates.put(ctx.getGlobalStore(), after);\n+        beforeStates.put(ctx.getGlobalStore(), before);\n \n         CompositeNodeState compositeBefore = ctx.createRootNodeState(beforeStates);\n         CompositeNodeState compositeAfter = ctx.createRootNodeState(afterStates);\n \n         NodeState result = hook.processCommit(compositeBefore, compositeAfter, info);\n         updatedBuilder = Optional.of(toComposite(result, compositeBefore));\n-        return updatedBuilder.get().getNodeState().getNodeState(ctx.getGlobalStore());\n+\n+        if (result instanceof CompositeNodeState) {\n+            return ((CompositeNodeState) result).getNodeState(ctx.getGlobalStore());\n+        } else {\n+            throw new IllegalStateException(\"The commit hook result should be a composite node state\");\n+        }\n     }\n \n     Optional<CompositeNodeBuilder> getUpdatedBuilder() {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/443b0bb82aba1829d443e38306ea2a4754b3982b/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CommitHookEnhancer.java",
                "sha": "04267508c10092f024b3956040b855e3f3c2b577",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/443b0bb82aba1829d443e38306ea2a4754b3982b/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeState.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeState.java?ref=443b0bb82aba1829d443e38306ea2a4754b3982b",
                "deletions": 8,
                "filename": "oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeState.java",
                "patch": "@@ -19,9 +19,6 @@\n package org.apache.jackrabbit.oak.composite;\n \n import com.google.common.base.Function;\n-import com.google.common.collect.ImmutableSet;\n-import com.google.common.collect.Maps;\n-import com.google.common.collect.Sets;\n import org.apache.jackrabbit.oak.api.PropertyState;\n import org.apache.jackrabbit.oak.commons.PathUtils;\n import org.apache.jackrabbit.oak.plugins.memory.MemoryChildNodeEntry;\n@@ -33,7 +30,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import javax.annotation.Nullable;\n import java.util.List;\n import java.util.Map;\n \n@@ -44,7 +40,6 @@\n import static com.google.common.collect.Iterables.transform;\n import static com.google.common.collect.Maps.asMap;\n import static com.google.common.collect.Maps.transformValues;\n-import static com.google.common.collect.Sets.newHashSet;\n import static java.lang.Long.MAX_VALUE;\n import static java.util.Collections.singleton;\n import static org.apache.jackrabbit.oak.composite.CompositeNodeBuilder.simpleConcat;\n@@ -92,9 +87,8 @@ NodeState getNodeState(MountedNodeStore mns) {\n         }\n \n         // this shouldn't happen, so we need to log some more debug info\n-        String mountName = mns.getMount().isDefault() ? \"[default]\" : mns.getMount().getName();\n-        LOG.warn(\"Can't find node state for path {} and mount {}. The node state map: {}\", path, mountName, nodeStates);\n-        throw new IllegalStateException(\"Can't find the node state for mount \" + mountName);\n+        LOG.warn(\"Can't find node state for path {} and mount {}. The node state map: {}\", path, mns, nodeStates);\n+        throw new IllegalStateException(\"Can't find the node state for mount \" + mns);\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/443b0bb82aba1829d443e38306ea2a4754b3982b/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeState.java",
                "sha": "a6375c7743c1636b252e0453e4d55c5216093d23",
                "status": "modified"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/443b0bb82aba1829d443e38306ea2a4754b3982b/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeStore.java",
                "changes": 49,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeStore.java?ref=443b0bb82aba1829d443e38306ea2a4754b3982b",
                "deletions": 21,
                "filename": "oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeStore.java",
                "patch": "@@ -144,22 +144,25 @@ public NodeState merge(NodeBuilder builder, CommitHook commitHook, CommitInfo in\n             CommitHookEnhancer hookEnhancer = new CommitHookEnhancer(commitHook, ctx, nodeBuilder.getBuilders());\n             NodeState globalResult = globalStore.getNodeStore().merge(nodeBuilder.getBuilders().get(globalStore), hookEnhancer, info);\n             resultStates.put(globalStore, globalResult);\n-            CompositeNodeBuilder updatedBuilder = hookEnhancer.getUpdatedBuilder().orElse(nodeBuilder);\n+\n+            if (!hookEnhancer.getUpdatedBuilder().isPresent()) {\n+                // it means that the commit hook wasn't invoked, because there were\n+                // no changes on the global store. we should invoke it anyway.\n+                hookEnhancer.processCommit(globalResult, globalResult, info);\n+            }\n+            CompositeNodeBuilder updatedBuilder = hookEnhancer.getUpdatedBuilder().get();\n \n             // merge the partial builders\n             for (MountedNodeStore mns : ctx.getNonDefaultStores()) {\n                 NodeBuilder partialBuilder = updatedBuilder.getBuilders().get(mns);\n \n                 if (mns.getMount().isReadOnly()) {\n-                    if (!partialBuilder.getNodeState().equals(partialBuilder.getBaseState())) {\n-                        throw new CommitFailedException(\"CompositeStore\", 31, \"Unable to perform changes on read-only mount \" + mns.getMount().getName());\n-                    }\n-                    resultStates.put(mns, partialBuilder.getBaseState());\n-                    continue;\n+                    assertNoChange(mns, partialBuilder);\n+                    resultStates.put(mns, mns.getNodeStore().getRoot());\n+                } else {\n+                    NodeState partialState = mns.getNodeStore().merge(partialBuilder, EmptyHook.INSTANCE, info);\n+                    resultStates.put(mns, partialState);\n                 }\n-\n-                NodeState partialState = mns.getNodeStore().merge(partialBuilder, EmptyHook.INSTANCE, info);\n-                resultStates.put(mns, partialState);\n             }\n \n             CompositeNodeState newRoot = ctx.createRootNodeState(resultStates);\n@@ -178,18 +181,22 @@ private void assertNoChangesOnReadOnlyMounts(CompositeNodeBuilder nodeBuilder) t\n                 continue;\n             }\n             NodeBuilder partialBuilder = nodeBuilder.getBuilders().get(mountedNodeStore);\n-            NodeState baseState = partialBuilder.getBaseState();\n-            NodeState nodeState = partialBuilder.getNodeState();\n-            if (!nodeState.equals(baseState)) {\n-                Set<String> changedPaths = getModifiedPaths(baseState, nodeState);\n-                Set<String> ignoredChangedPaths = getIgnoredPaths(changedPaths);\n-                if (!ignoredChangedPaths.isEmpty()) {\n-                    LOG.debug(\"Can't merge following read-only paths (they are configured to be ignored): {}.\", ignoredChangedPaths);\n-                }\n-                Set<String> failingChangedPaths = difference(changedPaths, ignoredChangedPaths);\n-                if (!failingChangedPaths.isEmpty()) {\n-                    throw new CommitFailedException(\"CompositeStore\", 31, \"Unable to perform changes on read-only mount \" + mountedNodeStore.getMount().getName() + \". Failing paths: \" + failingChangedPaths.toString());\n-                }\n+            assertNoChange(mountedNodeStore, partialBuilder);\n+        }\n+    }\n+\n+    private void assertNoChange(MountedNodeStore mountedNodeStore, NodeBuilder partialBuilder) throws CommitFailedException {\n+        NodeState baseState = partialBuilder.getBaseState();\n+        NodeState nodeState = partialBuilder.getNodeState();\n+        if (!nodeState.equals(baseState)) {\n+            Set<String> changedPaths = getModifiedPaths(baseState, nodeState);\n+            Set<String> ignoredChangedPaths = getIgnoredPaths(changedPaths);\n+            if (!ignoredChangedPaths.isEmpty()) {\n+                LOG.debug(\"Can't merge following read-only paths (they are configured to be ignored): {}.\", ignoredChangedPaths);\n+            }\n+            Set<String> failingChangedPaths = difference(changedPaths, ignoredChangedPaths);\n+            if (!failingChangedPaths.isEmpty()) {\n+                throw new CommitFailedException(\"CompositeStore\", 31, \"Unable to perform changes on read-only mount \" + mountedNodeStore.getMount().getName() + \". Failing paths: \" + failingChangedPaths.toString());\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/443b0bb82aba1829d443e38306ea2a4754b3982b/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeStore.java",
                "sha": "72ca9b3aa273f1f97d64f1d9105bf46ff0122082",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/443b0bb82aba1829d443e38306ea2a4754b3982b/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/MountedNodeStore.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/MountedNodeStore.java?ref=443b0bb82aba1829d443e38306ea2a4754b3982b",
                "deletions": 0,
                "filename": "oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/MountedNodeStore.java",
                "patch": "@@ -39,4 +39,17 @@ public Mount getMount() {\n     public NodeStore getNodeStore() {\n         return nodeStore;\n     }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder result = new StringBuilder(super.toString());\n+        result.append('[');\n+        if (mount.isDefault()) {\n+            result.append(\"default\");\n+        } else {\n+            result.append(mount.getName());\n+        }\n+        result.append(']');\n+        return result.toString();\n+    }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/443b0bb82aba1829d443e38306ea2a4754b3982b/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/MountedNodeStore.java",
                "sha": "a1cce9d1ca45a260df30789e816461eab4dfbed2",
                "status": "modified"
            }
        ],
        "message": "OAK-6486: NPE in CompositeNodeStore\n\n-implemented MountedNodeStore#toString()\n-treat the NodeState returned from the commit hook as a composite one in the CommitHookEnhancer\n-throw an exception if the commit hooks were not invoked by the global store\n-return the root node state as a partial state in the merge() method for read-only stores\n-run the commit hooks and rebase the partial builders even if there are no changes on the global builder\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1803002 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/641ee6bdf1e9a0d6f7709765d47b0c5fa9ae1c80",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "CompositeNodeStoreTest.java"
        ]
    },
    "jackrabbit-oak_4779cb2": {
        "bug_id": "jackrabbit-oak_4779cb2",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/4779cb2531e02230636c81630b93e07dc60ea38c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/4779cb2531e02230636c81630b93e07dc60ea38c/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java?ref=4779cb2531e02230636c81630b93e07dc60ea38c",
                "deletions": 1,
                "filename": "oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java",
                "patch": "@@ -478,7 +478,7 @@ public long determineServerTimeDifferenceMillis(Connection connection) {\n                 byte[] bdata = rs.getBytes(field++);\n                 result.add(new RDBRow(id, hasBinary, deletedOnce, modified, modcount, cmodcount, schemaVersion, sdType,\n                         sdMaxRevTime, data, bdata));\n-                dataTotal += data.length();\n+                dataTotal += data == null ? 0 : data.length();\n                 bdataTotal += bdata == null ? 0 : bdata.length;\n                 PERFLOG.end(pstart, 10, \"queried: table={} -> id={}, modcount={}, modified={}, data={}, bdata={}\", tmd.getName(), id,\n                         modcount, modified, (data == null ? 0 : data.length()), (bdata == null ? 0 : bdata.length));",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/4779cb2531e02230636c81630b93e07dc60ea38c/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java",
                "sha": "7fa2be4f34aab525e515e1ec51f183401fd5e83f",
                "status": "modified"
            }
        ],
        "message": "OAK-8338: RDBDocumentStoreJDBC: fix theoretically possible NPE in perflogging code\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1859716 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/2b2f3043e08b92d00f6abcfcad97437a1b76c3d6",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "RDBDocumentStoreJDBCTest.java"
        ]
    },
    "jackrabbit-oak_47c4aef": {
        "bug_id": "jackrabbit-oak_47c4aef",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/47c4aef10ce3427b420b2ee7cc076c9683a6e268",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/47c4aef10ce3427b420b2ee7cc076c9683a6e268/oak-core/src/main/java/org/apache/jackrabbit/oak/api/Tree.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/api/Tree.java?ref=47c4aef10ce3427b420b2ee7cc076c9683a6e268",
                "deletions": 2,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/api/Tree.java",
                "patch": "@@ -179,7 +179,7 @@\n      *         child exists or the child is not accessible.\n      */\n     @CheckForNull\n-    Tree getChild(String name);\n+    Tree getChild(@Nonnull String name);\n \n     /**\n      * Determine if a child of this {@code Tree} instance exists. If no child\n@@ -189,7 +189,7 @@\n      * @return {@code true} if and only if a child with the given {@code name}\n      *         exists and is accessible for the current content session.\n      */\n-    boolean hasChild(String name);\n+    boolean hasChild(@Nonnull String name);\n \n     /**\n      * Determine the number of children of this {@code Tree} instance taking",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/47c4aef10ce3427b420b2ee7cc076c9683a6e268/oak-core/src/main/java/org/apache/jackrabbit/oak/api/Tree.java",
                "sha": "d74f2f45063c22e7fef729c701a6d451deea825e",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/47c4aef10ce3427b420b2ee7cc076c9683a6e268/oak-core/src/main/java/org/apache/jackrabbit/oak/core/ReadOnlyTree.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/core/ReadOnlyTree.java?ref=47c4aef10ce3427b420b2ee7cc076c9683a6e268",
                "deletions": 3,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/core/ReadOnlyTree.java",
                "patch": "@@ -136,7 +136,7 @@ public long getPropertyCount() {\n     }\n \n     @Override\n-    public ReadOnlyTree getChild(String name) {\n+    public ReadOnlyTree getChild(@Nonnull String name) {\n         NodeState child = state.getChildNode(name);\n         if (child != null) {\n             return new ReadOnlyTree(this, name, child);\n@@ -156,8 +156,8 @@ public TreeLocation getLocation() {\n     }\n \n     @Override\n-    public boolean hasChild(String name) {\n-        return state.getChildNode(name) != null;\n+    public boolean hasChild(@Nonnull String name) {\n+        return state.hasChildNode(name);\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/47c4aef10ce3427b420b2ee7cc076c9683a6e268/oak-core/src/main/java/org/apache/jackrabbit/oak/core/ReadOnlyTree.java",
                "sha": "fc0e72fa844e0189fe4a9f268636ca83bf0fa8cb",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/47c4aef10ce3427b420b2ee7cc076c9683a6e268/oak-core/src/main/java/org/apache/jackrabbit/oak/core/TreeImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/core/TreeImpl.java?ref=47c4aef10ce3427b420b2ee7cc076c9683a6e268",
                "deletions": 3,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/core/TreeImpl.java",
                "patch": "@@ -198,7 +198,8 @@ public boolean apply(PropertyState propertyState) {\n     }\n \n     @Override\n-    public TreeImpl getChild(String name) {\n+    public TreeImpl getChild(@Nonnull String name) {\n+        checkNotNull(name);\n         root.checkLive();\n         TreeImpl child = internalGetChild(name);\n         if (child != null && canRead(child)) {\n@@ -239,8 +240,7 @@ public Status getStatus() {\n     }\n \n     @Override\n-    public boolean hasChild(String name) {\n-        root.checkLive();\n+    public boolean hasChild(@Nonnull String name) {\n         return getChild(name) != null;\n     }\n ",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/47c4aef10ce3427b420b2ee7cc076c9683a6e268/oak-core/src/main/java/org/apache/jackrabbit/oak/core/TreeImpl.java",
                "sha": "687956d36b6debde73c231579652b3275bf27105",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/47c4aef10ce3427b420b2ee7cc076c9683a6e268/oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelNodeState.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelNodeState.java?ref=47c4aef10ce3427b420b2ee7cc076c9683a6e268",
                "deletions": 0,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelNodeState.java",
                "patch": "@@ -205,6 +205,7 @@ public long getChildNodeCount() {\n \n     @Override\n     public NodeState getChildNode(String name) {\n+        checkNotNull(name);\n         init();\n         String childPath = childPaths.get(name);\n         if (childPath == null && childNodeCount > MAX_CHILD_NODE_NAMES) {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/47c4aef10ce3427b420b2ee7cc076c9683a6e268/oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelNodeState.java",
                "sha": "e9bda16c39707829c1becaa4d0f163cd85cc5117",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/47c4aef10ce3427b420b2ee7cc076c9683a6e268/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java?ref=47c4aef10ce3427b420b2ee7cc076c9683a6e268",
                "deletions": 0,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java",
                "patch": "@@ -577,11 +577,13 @@ public long getChildNodeCount() {\n \n         @Override\n         public boolean hasChildNode(String name) {\n+            checkNotNull(name);\n             return withNodes(base, nodes).hasChildNode(name);\n         }\n \n         @Override\n         public NodeState getChildNode(String name) {\n+            checkNotNull(name);\n             return withNodes(base, nodes).getChildNode(name); // mutable\n         }\n ",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/47c4aef10ce3427b420b2ee7cc076c9683a6e268/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java",
                "sha": "86cc383a794fd337b0beffa2ad86471f611b3ad6",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/47c4aef10ce3427b420b2ee7cc076c9683a6e268/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeState.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeState.java?ref=47c4aef10ce3427b420b2ee7cc076c9683a6e268",
                "deletions": 0,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeState.java",
                "patch": "@@ -16,6 +16,8 @@\n  */\n package org.apache.jackrabbit.oak.plugins.memory;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n import org.apache.jackrabbit.oak.api.PropertyState;\n import org.apache.jackrabbit.oak.spi.state.AbstractNodeState;\n import org.apache.jackrabbit.oak.spi.state.ChildNodeEntry;\n@@ -78,11 +80,13 @@ public long getPropertyCount() {\n \n     @Override\n     public boolean hasChildNode(String name) {\n+        checkNotNull(name);\n         return nodes.containsKey(name);\n     }\n \n     @Override\n     public NodeState getChildNode(String name) {\n+        checkNotNull(name);\n         return nodes.get(name);\n     }\n ",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/47c4aef10ce3427b420b2ee7cc076c9683a6e268/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeState.java",
                "sha": "0abd1ea74d071d4f6722bf2e2d2b16c85cb432de",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/47c4aef10ce3427b420b2ee7cc076c9683a6e268/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/ModifiedNodeState.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/ModifiedNodeState.java?ref=47c4aef10ce3427b420b2ee7cc076c9683a6e268",
                "deletions": 0,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/ModifiedNodeState.java",
                "patch": "@@ -204,6 +204,7 @@ public long getChildNodeCount() {\n \n     @Override\n     public boolean hasChildNode(String name) {\n+        checkNotNull(name);\n         NodeState child = nodes.get(name);\n         if (child != null) {\n             return true;\n@@ -216,6 +217,7 @@ public boolean hasChildNode(String name) {\n \n     @Override\n     public NodeState getChildNode(String name) {\n+        checkNotNull(name);\n         NodeState child = nodes.get(name);\n         if (child != null) {\n             return child;",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/47c4aef10ce3427b420b2ee7cc076c9683a6e268/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/ModifiedNodeState.java",
                "sha": "7c8ae464c65ead9614313290504a1f85afc7d76a",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/47c4aef10ce3427b420b2ee7cc076c9683a6e268/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/state/AbstractNodeState.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/state/AbstractNodeState.java?ref=47c4aef10ce3427b420b2ee7cc076c9683a6e268",
                "deletions": 0,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/spi/state/AbstractNodeState.java",
                "patch": "@@ -16,6 +16,8 @@\n  */\n package org.apache.jackrabbit.oak.spi.state;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n import org.apache.jackrabbit.oak.api.PropertyState;\n \n import com.google.common.base.Function;\n@@ -65,6 +67,7 @@ public boolean hasChildNode(String name) {\n \n     @Override\n     public NodeState getChildNode(String name) {\n+        checkNotNull(name);\n         for (ChildNodeEntry entry : getChildNodeEntries()) {\n             if (name.equals(entry.getName())) {\n                 return entry.getNodeState();",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/47c4aef10ce3427b420b2ee7cc076c9683a6e268/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/state/AbstractNodeState.java",
                "sha": "ecc89f3cd148dd36cbbd766efda40e627c80b5fc",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/47c4aef10ce3427b420b2ee7cc076c9683a6e268/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/state/NodeBuilder.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/state/NodeBuilder.java?ref=47c4aef10ce3427b420b2ee7cc076c9683a6e268",
                "deletions": 2,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/spi/state/NodeBuilder.java",
                "patch": "@@ -97,7 +97,7 @@ void reset(@Nonnull NodeState state)\n      * @return {@code true} if the named child node exists,\n      *         {@code false} otherwise\n      */\n-    boolean hasChildNode(String name);\n+    boolean hasChildNode(@Nonnull String name);\n \n     /**\n      * Returns the names of current child nodes.\n@@ -213,6 +213,6 @@ void reset(@Nonnull NodeState state)\n      * @return child builder\n      */\n     @Nonnull\n-    NodeBuilder child(String name);\n+    NodeBuilder child(@Nonnull String name);\n \n }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/47c4aef10ce3427b420b2ee7cc076c9683a6e268/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/state/NodeBuilder.java",
                "sha": "e2d19b9a38224c8f5c5c7263a922fe6dc1ddae2c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/47c4aef10ce3427b420b2ee7cc076c9683a6e268/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/state/NodeState.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/state/NodeState.java?ref=47c4aef10ce3427b420b2ee7cc076c9683a6e268",
                "deletions": 2,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/spi/state/NodeState.java",
                "patch": "@@ -134,7 +134,7 @@\n      * @return {@code true} if the named child node exists,\n      *         {@code false} otherwise\n      */\n-    boolean hasChildNode(String name);\n+    boolean hasChildNode(@Nonnull String name);\n \n     /**\n      * Returns the named child node. The name is an opaque string and\n@@ -149,7 +149,7 @@\n      * @return named child node, or {@code null} if not found\n      */\n     @CheckForNull\n-    NodeState getChildNode(String name);\n+    NodeState getChildNode(@Nonnull String name);\n \n     /**\n      * Returns the number of child nodes of this node.",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/47c4aef10ce3427b420b2ee7cc076c9683a6e268/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/state/NodeState.java",
                "sha": "375ac003f87e5e22e868ebed77a37f7e12d9d8de",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/47c4aef10ce3427b420b2ee7cc076c9683a6e268/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/AccessControlManagerImplTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/AccessControlManagerImplTest.java?ref=47c4aef10ce3427b420b2ee7cc076c9683a6e268",
                "deletions": 1,
                "filename": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/AccessControlManagerImplTest.java",
                "patch": "@@ -557,6 +557,7 @@ public void testGetEffectivePolicies() throws Exception {\n         // TODO\n     }\n \n+    @Ignore(\"OAK-644\")\n     @Test\n     public void testSetPolicy() throws Exception {\n         ACL acl = getApplicablePolicy(testPath);\n@@ -575,6 +576,7 @@ public void testSetPolicy() throws Exception {\n         assertArrayEquals(acl.getAccessControlEntries(), acl2.getAccessControlEntries());\n     }\n \n+    @Ignore(\"OAK-644\")\n     @Test\n     public void testSetPolicyWritesAcContent() throws Exception {\n         ACL acl = getApplicablePolicy(testPath);\n@@ -695,4 +697,4 @@ public void testRemovePolicyOnAclNode() throws Exception {\n     public void testRemoveRepoPolicy() throws Exception {\n         // TODO\n     }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/47c4aef10ce3427b420b2ee7cc076c9683a6e268/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/AccessControlManagerImplTest.java",
                "sha": "9234fd187f1e29eb84016d7c8c912de2d1c743c8",
                "status": "modified"
            }
        ],
        "message": "OAK-635 SegmentMK NPE in SegmentNodeState#getChildNode\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1447780 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/0989e5157186aa7dc17b428625bb70aa573757a0",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "TreeTest.java",
            "MemoryNodeBuilderTest.java",
            "NodeBuilderTest.java",
            "NodeStateTest.java"
        ]
    },
    "jackrabbit-oak_48efca8": {
        "bug_id": "jackrabbit-oak_48efca8",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/48efca81de62165637b4ce11cb226d44957e7c31",
        "file": [
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/48efca81de62165637b4ce11cb226d44957e7c31/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java",
                "changes": 47,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java?ref=48efca81de62165637b4ce11cb226d44957e7c31",
                "deletions": 15,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java",
                "patch": "@@ -18,6 +18,7 @@\n \n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.collect.Iterables.filter;\n import static com.google.common.collect.Iterables.toArray;\n import static com.google.common.collect.Iterables.transform;\n import static org.apache.jackrabbit.oak.api.CommitFailedException.MERGE;\n@@ -27,6 +28,7 @@\n import static org.apache.jackrabbit.oak.plugins.document.DocumentMK.MANY_CHILDREN_THRESHOLD;\n import static org.apache.jackrabbit.oak.plugins.document.UpdateOp.Key;\n import static org.apache.jackrabbit.oak.plugins.document.UpdateOp.Operation;\n+import static org.apache.jackrabbit.oak.plugins.document.util.Utils.getIdFromPath;\n import static org.apache.jackrabbit.oak.plugins.document.util.Utils.unshareString;\n \n import java.io.Closeable;\n@@ -60,6 +62,7 @@\n import javax.management.NotCompliantMBeanException;\n \n import com.google.common.base.Function;\n+import com.google.common.base.Predicates;\n import com.google.common.cache.Cache;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.Lists;\n@@ -866,11 +869,11 @@ public DocumentNodeState call() throws Exception {\n      * @return the child documents.\n      */\n     @Nonnull\n-    Iterable<NodeDocument> readChildDocs(@Nonnull final String path,\n-                                         @Nullable String name,\n-                                         int limit) {\n-        String to = Utils.getKeyUpperLimit(checkNotNull(path));\n-        String from;\n+    private Iterable<NodeDocument> readChildDocs(@Nonnull final String path,\n+                                                 @Nullable String name,\n+                                                 final int limit) {\n+        final String to = Utils.getKeyUpperLimit(checkNotNull(path));\n+        final String from;\n         if (name != null) {\n             from = Utils.getIdFromPath(concat(path, name));\n         } else {\n@@ -881,7 +884,7 @@ public DocumentNodeState call() throws Exception {\n             // or more than 16k child docs are requested\n             return store.query(Collection.NODES, from, to, limit);\n         }\n-        StringValue key = new StringValue(path);\n+        final StringValue key = new StringValue(path);\n         // check cache\n         NodeDocument.Children c = docChildrenCache.getIfPresent(key);\n         if (c == null) {\n@@ -898,10 +901,10 @@ public DocumentNodeState call() throws Exception {\n             // fetch more and update cache\n             String lastName = c.childNames.get(c.childNames.size() - 1);\n             String lastPath = concat(path, lastName);\n-            from = Utils.getIdFromPath(lastPath);\n+            String low = Utils.getIdFromPath(lastPath);\n             int remainingLimit = limit - c.childNames.size();\n             List<NodeDocument> docs = store.query(Collection.NODES,\n-                    from, to, remainingLimit);\n+                    low, to, remainingLimit);\n             NodeDocument.Children clone = c.clone();\n             for (NodeDocument doc : docs) {\n                 String p = doc.getPath();\n@@ -911,22 +914,36 @@ public DocumentNodeState call() throws Exception {\n             docChildrenCache.put(key, clone);\n             c = clone;\n         }\n-        Iterable<NodeDocument> it = transform(c.childNames, new Function<String, NodeDocument>() {\n+        Iterable<NodeDocument> head = filter(transform(c.childNames,\n+                new Function<String, NodeDocument>() {\n             @Override\n             public NodeDocument apply(String name) {\n                 String p = concat(path, name);\n                 NodeDocument doc = store.find(Collection.NODES, Utils.getIdFromPath(p));\n                 if (doc == null) {\n-                    docChildrenCache.invalidateAll();\n-                    throw new NullPointerException(\"Document \" + p + \" not found\");\n+                    docChildrenCache.invalidate(key);\n                 }\n                 return doc;\n             }\n-        });\n-        if (c.childNames.size() > limit * 2) {\n-            it = Iterables.limit(it, limit * 2);\n+        }), Predicates.notNull());\n+        Iterable<NodeDocument> it;\n+        if (c.isComplete) {\n+            it = head;\n+        } else {\n+            // OAK-2420: 'head' may have null documents when documents are\n+            // concurrently removed from the store. concat 'tail' to fetch\n+            // more documents if necessary\n+            final String last = getIdFromPath(concat(\n+                    path, c.childNames.get(c.childNames.size() - 1)));\n+            Iterable<NodeDocument> tail = new Iterable<NodeDocument>() {\n+                @Override\n+                public Iterator<NodeDocument> iterator() {\n+                    return store.query(NODES, last, to, limit).iterator();\n+                }\n+            };\n+            it = Iterables.concat(head, tail);\n         }\n-        return it;\n+        return Iterables.limit(it, limit);\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/48efca81de62165637b4ce11cb226d44957e7c31/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java",
                "sha": "fe60e13b92b9afac7bdea538d154bb3f3114a81a",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/48efca81de62165637b4ce11cb226d44957e7c31/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/document/VersionGCDeletionTest.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/document/VersionGCDeletionTest.java?ref=48efca81de62165637b4ce11cb226d44957e7c31",
                "deletions": 10,
                "filename": "oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/document/VersionGCDeletionTest.java",
                "patch": "@@ -30,6 +30,8 @@\n \n import javax.annotation.Nonnull;\n \n+import com.google.common.collect.Lists;\n+\n import org.apache.jackrabbit.oak.api.CommitFailedException;\n import org.apache.jackrabbit.oak.plugins.document.VersionGarbageCollector.VersionGCStats;\n import org.apache.jackrabbit.oak.plugins.document.memory.MemoryDocumentStore;\n@@ -41,7 +43,6 @@\n import org.apache.jackrabbit.oak.stats.Clock;\n import org.junit.After;\n import org.junit.Before;\n-import org.junit.Ignore;\n import org.junit.Test;\n \n import static java.util.concurrent.Executors.newSingleThreadExecutor;\n@@ -164,7 +165,6 @@ public void deleteLargeNumber() throws Exception{\n     }\n \n     // OAK-2420\n-    @Ignore\n     @Test\n     public void queryWhileDocsAreRemoved() throws Exception {\n         //Baseline the clock\n@@ -190,7 +190,7 @@ public void queryWhileDocsAreRemoved() throws Exception {\n         // create nodes\n         NodeBuilder builder = store.getRoot().builder();\n         NodeBuilder node = builder.child(\"node\");\n-        for (int i = 0; i < 100; i++) {\n+        for (int i = 0; i < 200; i++) {\n             node.child(\"c-\" + i);\n         }\n         merge(store, builder);\n@@ -209,23 +209,27 @@ public void queryWhileDocsAreRemoved() throws Exception {\n \n         clock.waitUntil(clock.getTime() + HOURS.toMillis(1));\n \n+        List<String> expected = Lists.newArrayList();\n         // fill caches\n         NodeState n = store.getRoot().getChildNode(\"node\");\n         for (ChildNodeEntry entry : n.getChildNodeEntries()) {\n-            entry.getName();\n+            expected.add(entry.getName());\n         }\n+        assertEquals(110, expected.size());\n \n         // invalidate the nodeChildren cache only\n         store.invalidateNodeChildrenCache();\n \n-        Future f = newSingleThreadExecutor().submit(new Callable<Object>() {\n+        Future<List<String>> f = newSingleThreadExecutor().submit(\n+                new Callable<List<String>>() {\n             @Override\n-            public Object call() throws Exception {\n+            public List<String> call() throws Exception {\n+                List<String> names = Lists.newArrayList();\n                 NodeState n = store.getRoot().getChildNode(\"node\");\n                 for (ChildNodeEntry entry : n.getChildNodeEntries()) {\n-                    entry.getName();\n+                    names.add(entry.getName());\n                 }\n-                return null;\n+                return names;\n             }\n         });\n \n@@ -235,9 +239,10 @@ public Object call() throws Exception {\n         VersionGCStats stats = gc.gc(30, MINUTES);\n         assertEquals(90, stats.deletedDocGCCount);\n \n-        queries.release(100);\n+        queries.release(200);\n \n-        f.get();\n+        List<String> names = f.get();\n+        assertEquals(expected, names);\n     }\n \n     private void merge(DocumentNodeStore store, NodeBuilder builder)",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/48efca81de62165637b4ce11cb226d44957e7c31/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/document/VersionGCDeletionTest.java",
                "sha": "5523258c4889be1b2a2b10e20402f5a593718455",
                "status": "modified"
            }
        ],
        "message": "OAK-2420: DocumentNodeStore revision GC may lead to NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1667782 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/3074f54f9771bafa6fe69f13f231d670eafd79a1",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "DocumentNodeStoreTest.java"
        ]
    },
    "jackrabbit-oak_4b7906b": {
        "bug_id": "jackrabbit-oak_4b7906b",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/4b7906bedbf9924b911a0b6a497d43d4f9e9bddb",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/4b7906bedbf9924b911a0b6a497d43d4f9e9bddb/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/util/TimingDocumentStoreWrapper.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/util/TimingDocumentStoreWrapper.java?ref=4b7906bedbf9924b911a0b6a497d43d4f9e9bddb",
                "deletions": 5,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/util/TimingDocumentStoreWrapper.java",
                "patch": "@@ -24,6 +24,7 @@\n \n import javax.annotation.CheckForNull;\n import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n \n import org.apache.jackrabbit.mk.api.MicroKernelException;\n import org.apache.jackrabbit.oak.plugins.mongomk.Collection;\n@@ -80,7 +81,7 @@ public TimingDocumentStoreWrapper(DocumentStore base) {\n         try {\n             long start = now();\n             T result = base.find(collection, key);\n-            updateAndLogTimes(\"find\", start, 0, result.getMemory());\n+            updateAndLogTimes(\"find\", start, 0, size(result));\n             return result;\n         } catch (Exception e) {\n             throw convert(e);\n@@ -93,7 +94,7 @@ public TimingDocumentStoreWrapper(DocumentStore base) {\n         try {\n             long start = now();\n             T result = base.find(collection, key, maxCacheAge);\n-            updateAndLogTimes(\"find2\", start, 0, result.getMemory());\n+            updateAndLogTimes(\"find2\", start, 0, size(result));\n             return result;\n         } catch (Exception e) {\n             throw convert(e);\n@@ -158,13 +159,13 @@ public TimingDocumentStoreWrapper(DocumentStore base) {\n     }\n \n     @Override\n-    @Nonnull\n+    @CheckForNull\n     public <T extends Document> T createOrUpdate(Collection<T> collection, UpdateOp update)\n             throws MicroKernelException {\n         try {\n             long start = now();\n             T result = base.createOrUpdate(collection, update);\n-            updateAndLogTimes(\"createOrUpdate\", start, 0, result.getMemory());\n+            updateAndLogTimes(\"createOrUpdate\", start, 0, size(result));\n             return result;\n         } catch (Exception e) {\n             throw convert(e);\n@@ -178,7 +179,7 @@ public TimingDocumentStoreWrapper(DocumentStore base) {\n         try {\n             long start = now();\n             T result = base.findAndUpdate(collection, update);\n-            updateAndLogTimes(\"findAndUpdate\", start, 0, result.getMemory());\n+            updateAndLogTimes(\"findAndUpdate\", start, 0, size(result));\n             return result;\n         } catch (Exception e) {\n             throw convert(e);\n@@ -250,6 +251,14 @@ private void log(String message) {\n         }\n         return result;\n     }\n+\n+    private static int size(@Nullable Document document) {\n+        if (document == null) {\n+            return 0;\n+        } else {\n+            return document.getMemory();\n+        }\n+    }\n     \n     private static long now() {\n         return System.currentTimeMillis();",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/4b7906bedbf9924b911a0b6a497d43d4f9e9bddb/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/util/TimingDocumentStoreWrapper.java",
                "sha": "707484172571ca527c91254a7a803395c7af0234",
                "status": "modified"
            }
        ],
        "message": "OAK-1047: TimingDocumentStoreWrapper throws NPE when result is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1526511 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/f9aa361cc989ca7a289f6a8dfb36e3b455257e0f",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "TimingDocumentStoreWrapperTest.java"
        ]
    },
    "jackrabbit-oak_500b703": {
        "bug_id": "jackrabbit-oak_500b703",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/500b7032c86ba479a71937cb008226b360972266",
        "file": [
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/500b7032c86ba479a71937cb008226b360972266/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlValidator.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlValidator.java?ref=500b7032c86ba479a71937cb008226b360972266",
                "deletions": 12,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlValidator.java",
                "patch": "@@ -23,14 +23,14 @@\n import javax.jcr.security.AccessControlException;\n import javax.jcr.security.Privilege;\n \n+import com.google.common.base.Strings;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.Sets;\n import org.apache.jackrabbit.JcrConstants;\n import org.apache.jackrabbit.api.security.authorization.PrivilegeManager;\n import org.apache.jackrabbit.oak.api.CommitFailedException;\n import org.apache.jackrabbit.oak.api.PropertyState;\n import org.apache.jackrabbit.oak.api.Tree;\n-import org.apache.jackrabbit.oak.api.Type;\n import org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate;\n import org.apache.jackrabbit.oak.plugins.tree.TreeConstants;\n import org.apache.jackrabbit.oak.plugins.tree.TreeProvider;\n@@ -236,20 +236,19 @@ private void checkValidAccessControlEntry(@NotNull Tree aceNode) throws CommitFa\n         checkValidRestrictions(aceNode);\n     }\n \n-    private void checkValidPrincipal(@NotNull Tree aceNode) throws CommitFailedException {\n+    @NotNull\n+    private String checkValidPrincipal(@NotNull Tree aceNode) throws CommitFailedException {\n         String principalName = TreeUtil.getString(aceNode, REP_PRINCIPAL_NAME);\n-        if (principalName == null || principalName.isEmpty()) {\n+        if (Strings.isNullOrEmpty(principalName)) {\n             throw accessViolation(8, \"Missing principal name at \" + aceNode.getPath());\n         }\n         // validity of principal is only a JCR specific contract and will not be\n         // enforced on the oak level.\n+        return principalName;\n     }\n \n     private void checkValidPrivileges(@NotNull Tree aceNode) throws CommitFailedException {\n-        Iterable<String> privilegeNames = TreeUtil.getStrings(aceNode, REP_PRIVILEGES);\n-        if (privilegeNames == null || Iterables.isEmpty(privilegeNames)) {\n-            throw accessViolation(9, \"Missing privileges at \" + aceNode.getPath());\n-        }\n+        Iterable<String> privilegeNames = getPrivilegeNames(aceNode);\n         for (String privilegeName : privilegeNames) {\n             try {\n                 Privilege privilege = privilegeManager.getPrivilege(privilegeName);\n@@ -264,6 +263,15 @@ private void checkValidPrivileges(@NotNull Tree aceNode) throws CommitFailedExce\n         }\n     }\n \n+    @NotNull\n+    private Iterable<String> getPrivilegeNames(@NotNull Tree aceNode) throws CommitFailedException {\n+        Iterable<String> privilegeNames = TreeUtil.getNames(aceNode, REP_PRIVILEGES);\n+        if (Iterables.isEmpty(privilegeNames)) {\n+            throw accessViolation(9, \"Missing privileges at \" + aceNode.getPath());\n+        }\n+        return privilegeNames;\n+    }\n+\n     private void checkValidRestrictions(@NotNull Tree aceTree) throws CommitFailedException {\n         String path;\n         Tree aclTree = checkNotNull(aceTree.getParent());\n@@ -290,20 +298,21 @@ private static void checkMixinTypes(Tree parentTree) throws CommitFailedExceptio\n         }\n     }\n \n-    private static void checkValidRepoAccessControlled(Tree accessControlledTree) throws CommitFailedException {\n+    private static void checkValidRepoAccessControlled(@NotNull Tree accessControlledTree) throws CommitFailedException {\n         if (!accessControlledTree.isRoot()) {\n             throw accessViolation(12, \"Only root can store repository level policies (\" + accessControlledTree.getPath() + ')');\n         }\n     }\n \n+    @NotNull\n     private static CommitFailedException accessViolation(int code, String message) {\n         return new CommitFailedException(ACCESS_CONTROL, code, message);\n     }\n \n-    private ValidationEntry createAceEntry(@Nullable String path, @NotNull Tree aceTree) {\n-        String principalName = aceTree.getProperty(REP_PRINCIPAL_NAME).getValue(Type.STRING);\n-        PrivilegeBits privilegeBits = privilegeBitsProvider.getBits(aceTree.getProperty(REP_PRIVILEGES).getValue(Type.NAMES));\n-\n+     @NotNull\n+     private ValidationEntry createAceEntry(@Nullable String path, @NotNull Tree aceTree) throws CommitFailedException {\n+        String principalName = checkValidPrincipal(aceTree);\n+        PrivilegeBits privilegeBits = privilegeBitsProvider.getBits(getPrivilegeNames(aceTree));\n         boolean isAllow = NT_REP_GRANT_ACE.equals(TreeUtil.getPrimaryTypeName(aceTree));\n         Set<Restriction> restrictions = restrictionProvider.readRestrictions(path, aceTree);\n         return new ValidationEntry(principalName, privilegeBits, isAllow, restrictions);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/500b7032c86ba479a71937cb008226b360972266/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlValidator.java",
                "sha": "1ef42ac4740451b2654f3b08580d60968fdd40d8",
                "status": "modified"
            },
            {
                "additions": 100,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/500b7032c86ba479a71937cb008226b360972266/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlValidatorTest.java",
                "changes": 100,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlValidatorTest.java?ref=500b7032c86ba479a71937cb008226b360972266",
                "deletions": 0,
                "filename": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlValidatorTest.java",
                "patch": "@@ -16,6 +16,7 @@\n  */\n package org.apache.jackrabbit.oak.security.authorization.accesscontrol;\n \n+import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n import org.apache.jackrabbit.JcrConstants;\n@@ -25,6 +26,7 @@\n import org.apache.jackrabbit.oak.AbstractSecurityTest;\n import org.apache.jackrabbit.oak.api.CommitFailedException;\n import org.apache.jackrabbit.oak.api.Tree;\n+import org.apache.jackrabbit.oak.api.Type;\n import org.apache.jackrabbit.oak.commons.PathUtils;\n import org.apache.jackrabbit.oak.plugins.memory.MemoryNodeStore;\n import org.apache.jackrabbit.oak.plugins.tree.TreeUtil;\n@@ -57,6 +59,8 @@\n import javax.jcr.security.AccessControlManager;\n import java.security.Principal;\n \n+import static org.apache.jackrabbit.JcrConstants.JCR_MIXINTYPES;\n+import static org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeConstants.JCR_READ;\n import static org.hamcrest.CoreMatchers.containsString;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n@@ -90,6 +94,7 @@ public void before() throws Exception {\n     @After\n     public void after() throws Exception {\n         try {\n+            root.refresh();\n             Tree testRoot = root.getTree(testPath);\n             if (testRoot.exists()) {\n                 testRoot.remove();\n@@ -109,6 +114,25 @@ private AccessControlValidatorProvider createValidatorProvider() {\n         return new AccessControlValidatorProvider((AuthorizationConfigurationImpl) cac.getDefaultConfig());\n     }\n \n+    @NotNull\n+    private Validator createRootValidator(@NotNull Tree rootTree) {\n+        NodeState ns = getTreeProvider().asNodeState(rootTree);\n+        return createValidatorProvider().getRootValidator(ns, ns, new CommitInfo(\"sid\", null));\n+    }\n+\n+    @NotNull\n+    private Tree createPolicy(@NotNull Tree tree, boolean createRestrictionNode) throws AccessDeniedException {\n+        tree.setProperty(JCR_MIXINTYPES, ImmutableList.of(MIX_REP_ACCESS_CONTROLLABLE), Type.NAMES);\n+\n+        Tree acl = TreeUtil.addChild(tree, REP_POLICY, NT_REP_ACL);\n+        acl.setOrderableChildren(true);\n+        Tree ace = createACE(acl, aceName, NT_REP_GRANT_ACE, testPrincipal.getName(), JCR_READ);\n+        if (createRestrictionNode) {\n+            TreeUtil.addChild(ace, REP_RESTRICTIONS, NT_REP_RESTRICTIONS);\n+        }\n+        return acl;\n+    }\n+\n     private NodeUtil createAcl() throws AccessDeniedException {\n         NodeUtil testRoot = getTestRoot();\n         testRoot.setNames(JcrConstants.JCR_MIXINTYPES, MIX_REP_ACCESS_CONTROLLABLE);\n@@ -126,6 +150,20 @@ private static NodeUtil createACE(NodeUtil acl, String aceName, String ntName, S\n         return ace;\n     }\n \n+    @NotNull\n+    private static Tree createACE(@NotNull Tree acl, @NotNull String aceName, @NotNull String ntName, @NotNull String principalName, @NotNull String... privilegeNames) throws AccessDeniedException {\n+        Tree ace = TreeUtil.addChild(acl, aceName, ntName);\n+        ace.setProperty(REP_PRINCIPAL_NAME, principalName);\n+        ace.setProperty(REP_PRIVILEGES, ImmutableList.copyOf(privilegeNames), Type.NAMES);\n+        return ace;\n+    }\n+\n+    private static CommitFailedException assertCommitFailedException(@NotNull CommitFailedException e, @NotNull String type, int expectedCode) {\n+        assertTrue(e.isOfType(type));\n+        assertEquals(expectedCode, e.getCode());\n+        return e;\n+    }\n+\n     @Test\n     public void testPolicyWithOutChildOrder() throws AccessDeniedException {\n         NodeUtil testRoot = getTestRoot();\n@@ -550,4 +588,66 @@ public void testRestrictionsUsedByOtherModule2() throws Exception {\n             root.refresh();\n         }\n     }\n+\n+\n+\n+    @Test(expected = CommitFailedException.class)\n+    public void testAddEntyWithEmptyPrivileges() throws Exception {\n+        Tree rootTree = root.getTree(PathUtils.ROOT_PATH);\n+        Tree policy = createPolicy(rootTree, false);\n+        Tree entry = policy.getChild(aceName);\n+        entry.setProperty(REP_PRIVILEGES, ImmutableList.of(), Type.NAMES);\n+\n+        Validator v = createRootValidator(rootTree);\n+        try {\n+            v.childNodeAdded(policy.getName(), getTreeProvider().asNodeState(policy)).childNodeAdded(entry.getName(), getTreeProvider().asNodeState(entry));\n+        } catch (CommitFailedException e) {\n+            throw assertCommitFailedException(e, CommitFailedException.ACCESS_CONTROL, 9);\n+        }\n+    }\n+\n+    @Test(expected = CommitFailedException.class)\n+    public void testAddEntyWithNullrivileges() throws Exception {\n+        Tree rootTree = root.getTree(PathUtils.ROOT_PATH);\n+        Tree policy = createPolicy(rootTree, false);\n+        Tree entry = policy.getChild(aceName);\n+        entry.removeProperty(REP_PRIVILEGES);\n+\n+        Validator v = createRootValidator(rootTree);\n+        try {\n+            v.childNodeAdded(policy.getName(), getTreeProvider().asNodeState(policy)).childNodeAdded(entry.getName(), getTreeProvider().asNodeState(entry));\n+        } catch (CommitFailedException e) {\n+            throw assertCommitFailedException(e, CommitFailedException.ACCESS_CONTROL, 9);\n+        }\n+    }\n+\n+    @Test(expected = CommitFailedException.class)\n+    public void testAddEntyWithEmptyPrincipalName() throws Exception {\n+        Tree rootTree = root.getTree(PathUtils.ROOT_PATH);\n+        Tree policy = createPolicy(rootTree, false);\n+        Tree entry = policy.getChild(aceName);\n+        entry.setProperty(REP_PRINCIPAL_NAME, \"\");\n+\n+        Validator v = createRootValidator(rootTree);\n+        try {\n+            v.childNodeAdded(policy.getName(), getTreeProvider().asNodeState(policy)).childNodeAdded(entry.getName(), getTreeProvider().asNodeState(entry));\n+        } catch (CommitFailedException e) {\n+            throw assertCommitFailedException(e, CommitFailedException.ACCESS_CONTROL, 8);\n+        }\n+    }\n+\n+    @Test(expected = CommitFailedException.class)\n+    public void testAddEntyWithNullPrincipalName() throws Exception {\n+        Tree rootTree = root.getTree(PathUtils.ROOT_PATH);\n+        Tree policy = createPolicy(rootTree, false);\n+        Tree entry = policy.getChild(aceName);\n+        entry.removeProperty(REP_PRINCIPAL_NAME);\n+\n+        Validator v = createRootValidator(rootTree);\n+        try {\n+            v.childNodeAdded(policy.getName(), getTreeProvider().asNodeState(policy)).childNodeAdded(entry.getName(), getTreeProvider().asNodeState(entry));\n+        } catch (CommitFailedException e) {\n+            throw assertCommitFailedException(e, CommitFailedException.ACCESS_CONTROL, 8);\n+        }\n+    }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/500b7032c86ba479a71937cb008226b360972266/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlValidatorTest.java",
                "sha": "9c889e87bf9b0ca71d8fb26b944054f7ad1b9c63",
                "status": "modified"
            }
        ],
        "message": "OAK-8389 : AccessControlValidator prone to NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1860716 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/21cc8ffd973a925ebae94aa19647e160ae49d0b9",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "AccessControlValidatorTest.java"
        ]
    },
    "jackrabbit-oak_53bf04a": {
        "bug_id": "jackrabbit-oak_53bf04a",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/53bf04acfe787b9c25885cdf43df9a243d78ffda",
        "file": [
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/53bf04acfe787b9c25885cdf43df9a243d78ffda/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/property/strategy/ContentMirrorStoreStrategy.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/property/strategy/ContentMirrorStoreStrategy.java?ref=53bf04acfe787b9c25885cdf43df9a243d78ffda",
                "deletions": 18,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/property/strategy/ContentMirrorStoreStrategy.java",
                "patch": "@@ -200,6 +200,9 @@ void enqueue(Iterator<? extends ChildNodeEntry> it) {\n         }\n         \n         void setPathContainsValue(boolean pathContainsValue) {\n+            if (init) {\n+                throw new IllegalStateException(\"This iterator is already initialized\");\n+            }\n             this.pathContainsValue = pathContainsValue;\n         }\n \n@@ -211,8 +214,28 @@ public boolean hasNext() {\n             }\n             return !closed;\n         }\n-        \n+\n         private void fetchNext() {\n+            while (true) {\n+                fetchNextPossiblyDuplicate();\n+                if (closed) {\n+                    return;\n+                }\n+                if (pathContainsValue) {\n+                    String value = PathUtils.elements(currentPath).iterator().next();\n+                    currentPath = PathUtils.relativize(value, currentPath);\n+                    // don't return duplicate paths:\n+                    // Set.add returns true if the entry was new,\n+                    // so if it returns false, it was already known\n+                    if (!knownPaths.add(currentPath)) {\n+                        continue;\n+                    }\n+                }\n+                break;\n+            }\n+        }\n+        \n+        private void fetchNextPossiblyDuplicate() {\n             while (!nodeIterators.isEmpty()) {\n                 Iterator<? extends ChildNodeEntry> iterator = nodeIterators.getLast();\n                 if (iterator.hasNext()) {\n@@ -247,7 +270,6 @@ private void fetchNext() {\n             closed = true;\n         }\n \n-\n         @Override\n         public String next() {\n             if (closed) {\n@@ -257,23 +279,11 @@ public String next() {\n                 fetchNext();\n                 init = true;\n             }\n-            while (true) {\n-                String result = currentPath;\n-                fetchNext();\n-                if (pathContainsValue) {\n-                    String value = PathUtils.elements(result).iterator().next();\n-                    result = PathUtils.relativize(value, result);\n-                    // don't return duplicate paths:\n-                    // Set.add returns true if the entry was new,\n-                    // so if it returns false, it was already known\n-                    if (!knownPaths.add(result)) {\n-                        continue;\n-                    }\n-                }\n-                return result;\n-            }\n+            String result = currentPath;\n+            fetchNext();\n+            return result;\n         }\n-\n+        \n         @Override\n         public void remove() {\n             throw new UnsupportedOperationException();",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/53bf04acfe787b9c25885cdf43df9a243d78ffda/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/property/strategy/ContentMirrorStoreStrategy.java",
                "sha": "f096a63930d7bc130008253918e9f81f1af2216d",
                "status": "modified"
            }
        ],
        "message": "OAK-883 Possible NPE in ContentMirrorStoreStrategy.PathIterator\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1497366 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/f93ea42ccd1630b1cf605906b2a4121176a64580",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "ContentMirrorStoreStrategyTest.java"
        ]
    },
    "jackrabbit-oak_5c71283": {
        "bug_id": "jackrabbit-oak_5c71283",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/5c712835c0e09f06ba2b19b38e574d5ee99c59eb",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/5c712835c0e09f06ba2b19b38e574d5ee99c59eb/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeStoreService.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeStoreService.java?ref=5c712835c0e09f06ba2b19b38e574d5ee99c59eb",
                "deletions": 5,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeStoreService.java",
                "patch": "@@ -439,12 +439,17 @@ private static String lookup(ComponentContext context, String property) {\n     public synchronized void deactivate() {\n         unregisterNodeStore();\n \n-        observerTracker.stop();\n-        gcMonitor.stop();\n+        if (observerTracker != null) {\n+            observerTracker.stop();\n+        }\n+        if (gcMonitor != null) {\n+            gcMonitor.stop();\n+        }\n         delegate = null;\n-\n-        store.close();\n-        store = null;\n+        if (store != null) {\n+            store.close();\n+            store = null;\n+        }\n     }\n \n     protected void bindBlobStore(BlobStore blobStore) throws IOException {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/5c712835c0e09f06ba2b19b38e574d5ee99c59eb/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeStoreService.java",
                "sha": "0925ce9a4d9e19b47c23f33b1a8f2fad6fe54af0",
                "status": "modified"
            }
        ],
        "message": "OAK-2811 Oak + data store: NPE in SegmentNodeStoreService.deactivate() leads to data store not shutting down properly\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1676237 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/d590db7196e812c9e0a9a411bb1db0b44c39f5a6",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "SegmentNodeStoreServiceTest.java"
        ]
    },
    "jackrabbit-oak_5cc0e30": {
        "bug_id": "jackrabbit-oak_5cc0e30",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/5cc0e30fad5b798514e98dce1727672aa74dacb0",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/5cc0e30fad5b798514e98dce1727672aa74dacb0/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentSerializer.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentSerializer.java?ref=5cc0e30fad5b798514e98dce1727672aa74dacb0",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentSerializer.java",
                "patch": "@@ -16,6 +16,7 @@\n  */\n package org.apache.jackrabbit.oak.plugins.document.rdb;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n import static org.apache.jackrabbit.oak.plugins.document.rdb.RDBJSONSupport.appendJsonMember;\n import static org.apache.jackrabbit.oak.plugins.document.rdb.RDBJSONSupport.appendJsonString;\n import static org.apache.jackrabbit.oak.plugins.document.rdb.RDBJSONSupport.appendJsonValue;\n@@ -144,6 +145,10 @@ public String asString(UpdateOp update) {\n      */\n     @Nonnull\n     public <T extends Document> T fromRow(@Nonnull Collection<T> collection, @Nonnull RDBRow row) throws DocumentStoreException {\n+\n+        final String charData = row.getData();\n+        checkNotNull(charData, \"RDBRow.getData() is null for collection \" + collection + \", id: \" + row.getId());\n+\n         T doc = collection.newDocument(store);\n         doc.put(ID, row.getId());\n         if (row.getModified() != RDBRow.LONG_UNSET) {\n@@ -181,7 +186,6 @@ public String asString(UpdateOp update) {\n             throw new DocumentStoreException(ex);\n         }\n \n-        String charData = row.getData();\n         json = new JsopTokenizer(charData);\n \n         // start processing the VARCHAR data",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/5cc0e30fad5b798514e98dce1727672aa74dacb0/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentSerializer.java",
                "sha": "c5b584e573ed67a25a57a4d814796468caf8216e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/5cc0e30fad5b798514e98dce1727672aa74dacb0/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java?ref=5cc0e30fad5b798514e98dce1727672aa74dacb0",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java",
                "patch": "@@ -631,7 +631,7 @@ public long determineServerTimeDifferenceMillis(Connection connection) {\n     @CheckForNull\n     public RDBRow read(Connection connection, RDBTableMetaData tmd, String id, long lastmodcount, long lastmodified) throws SQLException {\n \n-        boolean useCaseStatement = lastmodcount != -1 && this.dbInfo.allowsCaseInSelect();\n+        boolean useCaseStatement = lastmodcount != -1 && lastmodified >= 1 && this.dbInfo.allowsCaseInSelect();\n         StringBuffer sql = new StringBuffer();\n         sql.append(\"select MODIFIED, MODCOUNT, CMODCOUNT, HASBINARY, DELETEDONCE, \");\n         if (useCaseStatement) {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/5cc0e30fad5b798514e98dce1727672aa74dacb0/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java",
                "sha": "51e1342fc765c5e577e4b276280d48577a635396",
                "status": "modified"
            }
        ],
        "message": "OAK-4986: RDBDocumentStore: potential NPE in document read\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1766554 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/00ab785367a8b9c191165811cb1371d8491a4bd0",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "RDBDocumentSerializerTest.java",
            "RDBDocumentStoreJDBCTest.java"
        ]
    },
    "jackrabbit-oak_5e6906a": {
        "bug_id": "jackrabbit-oak_5e6906a",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/5e6906ad61e8c2b1486712588563a596180ca215",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/5e6906ad61e8c2b1486712588563a596180ca215/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeState.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeState.java?ref=5e6906ad61e8c2b1486712588563a596180ca215",
                "deletions": 4,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeState.java",
                "patch": "@@ -219,10 +219,12 @@ private String getValueAsString(String name, Type<?> type) {\n         Template template = getTemplate();\n         if (JCR_PRIMARYTYPE.equals(name)) {\n             PropertyState primary = template.getPrimaryType();\n-            if (type == NAME) {\n-                return primary.getValue(NAME);\n-            } else if (primary != null) {\n-                return null;\n+            if (primary != null) {\n+                if (type == NAME) {\n+                    return primary.getValue(NAME);\n+                } else {\n+                    return null;\n+                }\n             }\n         } else if (JCR_MIXINTYPES.equals(name)\n                 && template.getMixinTypes() != null) {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/5e6906ad61e8c2b1486712588563a596180ca215/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeState.java",
                "sha": "eefc447458bab744712c4d48d7530428402fca3a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/5e6906ad61e8c2b1486712588563a596180ca215/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/PermissionHook.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/PermissionHook.java?ref=5e6906ad61e8c2b1486712588563a596180ca215",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/PermissionHook.java",
                "patch": "@@ -92,7 +92,7 @@ public NodeState processCommit(\n         NodeBuilder rootAfter = after.builder();\n \n         permissionRoot = getPermissionRoot(rootAfter);\n-        bitsProvider = new PrivilegeBitsProvider(new ImmutableRoot(before));\n+        bitsProvider = new PrivilegeBitsProvider(new ImmutableRoot(after));\n \n         isACL = new TypePredicate(after, NT_REP_ACL);\n         isACE = new TypePredicate(after, NT_REP_ACE);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/5e6906ad61e8c2b1486712588563a596180ca215/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/PermissionHook.java",
                "sha": "57618dc17d3ecd7c244e5bed7329223febfe512b",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/5e6906ad61e8c2b1486712588563a596180ca215/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositoryUpgrade.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositoryUpgrade.java?ref=5e6906ad61e8c2b1486712588563a596180ca215",
                "deletions": 12,
                "filename": "oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositoryUpgrade.java",
                "patch": "@@ -55,6 +55,7 @@\n import org.apache.jackrabbit.oak.spi.commit.CompositeEditorProvider;\n import org.apache.jackrabbit.oak.spi.commit.CompositeHook;\n import org.apache.jackrabbit.oak.spi.commit.EditorHook;\n+import org.apache.jackrabbit.oak.spi.lifecycle.RepositoryInitializer;\n import org.apache.jackrabbit.oak.spi.security.ConfigurationParameters;\n import org.apache.jackrabbit.oak.spi.security.SecurityConfiguration;\n import org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits;\n@@ -65,6 +66,7 @@\n import org.apache.jackrabbit.oak.spi.state.NodeState;\n import org.apache.jackrabbit.oak.spi.state.NodeStore;\n import org.apache.jackrabbit.oak.upgrade.security.GroupEditorProvider;\n+import org.apache.jackrabbit.oak.upgrade.security.RestrictionEditorProvider;\n import org.apache.jackrabbit.spi.Name;\n import org.apache.jackrabbit.spi.QItemDefinition;\n import org.apache.jackrabbit.spi.QNodeDefinition;\n@@ -173,7 +175,7 @@ public static void copy(RepositoryConfig source, NodeStore target)\n             throws RepositoryException {\n         RepositoryContext context = RepositoryContext.create(source);\n         try {\n-            new RepositoryUpgrade(context, target).copy();\n+            new RepositoryUpgrade(context, target).copy(null);\n         } finally {\n             context.getRepository().shutdown();\n         }\n@@ -206,15 +208,14 @@ public void setCopyBinariesByReference(boolean copyBinariesByReference) {\n      * The source repository <strong>must not be modified</strong> while\n      * the copy operation is running to avoid an inconsistent copy.\n      * <p>\n-     * This method leaves the search indexes of the target repository in\n-     * an \n      * Note that both the source and the target repository must be closed\n      * during the copy operation as this method requires exclusive access\n      * to the repositories.\n      *\n+     * @param initializer optional extra repository initializer to use\n      * @throws RepositoryException if the copy operation fails\n      */\n-    public void copy() throws RepositoryException {\n+    public void copy(RepositoryInitializer initializer) throws RepositoryException {\n         RepositoryConfig config = source.getRepositoryConfig();\n         logger.info(\n                 \"Copying repository content from {} to Oak\", config.getHomeDir());\n@@ -228,6 +229,9 @@ public void copy() throws RepositoryException {\n \n             // init target repository first\n             new InitialContent().initialize(builder);\n+            if (initializer != null) {\n+                initializer.initialize(builder);\n+            }\n             for (SecurityConfiguration sc : security.getConfigurations()) {\n                 sc.getWorkspaceInitializer().initialize(builder, workspace);\n             }\n@@ -251,25 +255,31 @@ public void copy() throws RepositoryException {\n             String groupsPath = userConf.getParameters().getConfigValue(\n                     UserConstants.PARAM_GROUP_PATH,\n                     UserConstants.DEFAULT_GROUP_PATH);\n-            hooks.add(new EditorHook(new GroupEditorProvider(groupsPath)));\n+\n+            // hooks specific to the upgrade, need to run first\n             hooks.add(new EditorHook(new CompositeEditorProvider(\n-                            new GroupEditorProvider(groupsPath),\n-                            new TypeEditorProvider(false),\n-                            new IndexUpdateProvider(new CompositeIndexEditorProvider(\n-                                    new ReferenceEditorProvider(),\n-                                    new PropertyIndexEditorProvider())))));\n+                    new RestrictionEditorProvider(),\n+                    new GroupEditorProvider(groupsPath))));\n \n+            // security-related hooks\n             for (SecurityConfiguration sc : security.getConfigurations()) {\n                 hooks.addAll(sc.getCommitHooks(workspace));\n             }\n \n+            // type validation, reference and indexing hooks\n+            hooks.add(new EditorHook(new CompositeEditorProvider(\n+                            new TypeEditorProvider(false),\n+                            new IndexUpdateProvider(new CompositeIndexEditorProvider(\n+                                    new ReferenceEditorProvider(),\n+                                    new PropertyIndexEditorProvider())))));\n+\n             target.merge(builder, CompositeHook.compose(hooks), CommitInfo.EMPTY);\n         } catch (Exception e) {\n             throw new RepositoryException(\"Failed to copy content\", e);\n         }\n     }\n \n-    private ConfigurationParameters mapSecurityConfig(SecurityConfig config) {\n+    protected ConfigurationParameters mapSecurityConfig(SecurityConfig config) {\n         ConfigurationParameters loginConfig = mapConfigurationParameters(\n                 config.getLoginModuleConfig(),\n                 LoginModuleConfig.PARAM_ADMIN_ID, UserConstants.PARAM_ADMIN_ID,\n@@ -286,7 +296,7 @@ private ConfigurationParameters mapSecurityConfig(SecurityConfig config) {\n                 ConfigurationParameters.of(loginConfig, userConfig)));\n     }\n \n-    private ConfigurationParameters mapConfigurationParameters(\n+    protected ConfigurationParameters mapConfigurationParameters(\n             BeanConfig config, String... mapping) {\n         Map<String, String> map = newHashMap();\n         if (config != null) {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/5e6906ad61e8c2b1486712588563a596180ca215/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositoryUpgrade.java",
                "sha": "72899ea61e82385ff4546a11a8a998a17bff5820",
                "status": "modified"
            },
            {
                "additions": 87,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/5e6906ad61e8c2b1486712588563a596180ca215/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/security/RestrictionEditor.java",
                "changes": 87,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/security/RestrictionEditor.java?ref=5e6906ad61e8c2b1486712588563a596180ca215",
                "deletions": 0,
                "filename": "oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/security/RestrictionEditor.java",
                "patch": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.oak.upgrade.security;\n+\n+import static org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE;\n+import static org.apache.jackrabbit.oak.api.Type.NAME;\n+import static org.apache.jackrabbit.oak.spi.security.authorization.accesscontrol.AccessControlConstants.NT_REP_RESTRICTIONS;\n+import static org.apache.jackrabbit.oak.spi.security.authorization.accesscontrol.AccessControlConstants.REP_GLOB;\n+import static org.apache.jackrabbit.oak.spi.security.authorization.accesscontrol.AccessControlConstants.REP_RESTRICTIONS;\n+\n+import org.apache.jackrabbit.oak.api.PropertyState;\n+import org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate;\n+import org.apache.jackrabbit.oak.spi.commit.DefaultEditor;\n+import org.apache.jackrabbit.oak.spi.commit.Editor;\n+import org.apache.jackrabbit.oak.spi.state.NodeBuilder;\n+import org.apache.jackrabbit.oak.spi.state.NodeState;\n+\n+public class RestrictionEditor extends DefaultEditor {\n+\n+    private final NodeBuilder builder;\n+\n+    private final TypePredicate isACE;\n+\n+    private PropertyState glob = null;\n+\n+    public RestrictionEditor(NodeBuilder builder, TypePredicate isACE) {\n+        this.builder = builder;\n+        this.isACE = isACE;\n+    }\n+\n+    private RestrictionEditor(RestrictionEditor parent, String name) {\n+        this.builder = parent.builder.getChildNode(name);\n+        this.isACE = parent.isACE;\n+    }\n+\n+    @Override\n+    public void leave(NodeState before, NodeState after) {\n+        if (glob != null\n+                && isACE.apply(after)\n+                && !builder.hasChildNode(REP_RESTRICTIONS)) {\n+            NodeBuilder restrictions = builder.setChildNode(REP_RESTRICTIONS);\n+            restrictions.setProperty(JCR_PRIMARYTYPE, NT_REP_RESTRICTIONS, NAME);\n+            restrictions.setProperty(glob);\n+            builder.removeProperty(REP_GLOB);\n+        }\n+    }\n+\n+    @Override\n+    public void propertyAdded(PropertyState after) {\n+        if (REP_GLOB.equals(after.getName())) {\n+            glob = after;\n+        }\n+    }\n+\n+    @Override\n+    public void propertyChanged(PropertyState before, PropertyState after) {\n+        if (REP_GLOB.equals(after.getName())) {\n+            glob = after;\n+        }\n+    }\n+\n+    @Override\n+    public Editor childNodeAdded(String name, NodeState after) {\n+        return new RestrictionEditor(this, name);\n+    }\n+\n+    @Override\n+    public Editor childNodeChanged(\n+            String name, NodeState before, NodeState after) {\n+        return new RestrictionEditor(this, name);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/5e6906ad61e8c2b1486712588563a596180ca215/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/security/RestrictionEditor.java",
                "sha": "a81dfe60d56bfa508d871873c05c9be8de8acec1",
                "status": "added"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/5e6906ad61e8c2b1486712588563a596180ca215/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/security/RestrictionEditorProvider.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/security/RestrictionEditorProvider.java?ref=5e6906ad61e8c2b1486712588563a596180ca215",
                "deletions": 0,
                "filename": "oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/security/RestrictionEditorProvider.java",
                "patch": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.oak.upgrade.security;\n+\n+import static org.apache.jackrabbit.oak.spi.security.authorization.accesscontrol.AccessControlConstants.NT_REP_ACE;\n+\n+import org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate;\n+import org.apache.jackrabbit.oak.spi.commit.CommitInfo;\n+import org.apache.jackrabbit.oak.spi.commit.Editor;\n+import org.apache.jackrabbit.oak.spi.commit.EditorProvider;\n+import org.apache.jackrabbit.oak.spi.state.NodeBuilder;\n+import org.apache.jackrabbit.oak.spi.state.NodeState;\n+\n+/**\n+ * Editor provider for upgrading ACL restrictions (rep:glob) from\n+ * Jackrabbit Classic to Oak.\n+ */\n+public class RestrictionEditorProvider implements EditorProvider {\n+\n+    @Override\n+    public Editor getRootEditor(\n+            NodeState before, NodeState after,\n+            NodeBuilder builder, CommitInfo info) {\n+        TypePredicate isACE = new TypePredicate(after, NT_REP_ACE);\n+        return new RestrictionEditor(builder, isACE);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/5e6906ad61e8c2b1486712588563a596180ca215/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/security/RestrictionEditorProvider.java",
                "sha": "13c4989fde60dad3157b0d0e3ea4ea6c94b37697",
                "status": "added"
            }
        ],
        "message": "OAK-1719: Missing commit hooks in upgrade\n\nAdd an editor for upgrading rep:glob entries in existing Jackrabbit Classic ACEs to the rep:restrictions structure used in Oak\nMake the RepositoryUpgrade class easier to extend and customize.\nUse the after instead of the before state to get privilege bits in PermissionHook, as otherwise newly added privileges won't be reflected in the permission store.\nAlso: Avoid NPE in SegmentNodeState.getStringValue(\"jcr:primaryType\") in the unexpected case when a primary type is not set.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1587399 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/4af5ecb70ea65998974635de8749873794947e9b",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "PermissionHookTest.java",
            "RepositoryUpgradeTest.java"
        ]
    },
    "jackrabbit-oak_5ec570c": {
        "bug_id": "jackrabbit-oak_5ec570c",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/5ec570cfbd4cd8ee377c8877558cf91bbe74cf15",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/5ec570cfbd4cd8ee377c8877558cf91bbe74cf15/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/ACL.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/ACL.java?ref=5ec570cfbd4cd8ee377c8877558cf91bbe74cf15",
                "deletions": 6,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/ACL.java",
                "patch": "@@ -120,15 +120,15 @@ public boolean addEntry(Principal principal, Privilege[] privileges,\n         } else {\n             rs = new HashSet<>();\n             if (restrictions != null) {\n-                for (String jcrName : restrictions.keySet()) {\n-                    String oakName = getNamePathMapper().getOakName(jcrName);\n-                    rs.add(getRestrictionProvider().createRestriction(getOakPath(), oakName, restrictions.get(oakName)));\n+                for (Map.Entry<String, Value> restrEntry : restrictions.entrySet()) {\n+                    String oakName = getNamePathMapper().getOakName(restrEntry.getKey());\n+                    rs.add(getRestrictionProvider().createRestriction(getOakPath(), oakName, restrEntry.getValue()));\n                 }\n             }\n             if (mvRestrictions != null) {\n-                for (String jcrName : mvRestrictions.keySet()) {\n-                    String oakName = getNamePathMapper().getOakName(jcrName);\n-                    rs.add(getRestrictionProvider().createRestriction(getOakPath(), oakName, mvRestrictions.get(oakName)));\n+                for (Map.Entry<String, Value[]> restrEntry : mvRestrictions.entrySet()) {\n+                    String oakName = getNamePathMapper().getOakName(restrEntry.getKey());\n+                    rs.add(getRestrictionProvider().createRestriction(getOakPath(), oakName, restrEntry.getValue()));\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/5ec570cfbd4cd8ee377c8877558cf91bbe74cf15/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/ACL.java",
                "sha": "060fd71e080f825e9b12f9b8f29671dbcfaff159",
                "status": "modified"
            },
            {
                "additions": 99,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/5ec570cfbd4cd8ee377c8877558cf91bbe74cf15/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/RemappedRestrictionNamesTest.java",
                "changes": 99,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/RemappedRestrictionNamesTest.java?ref=5ec570cfbd4cd8ee377c8877558cf91bbe74cf15",
                "deletions": 0,
                "filename": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/RemappedRestrictionNamesTest.java",
                "patch": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.oak.security.authorization.accesscontrol;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import org.apache.jackrabbit.oak.namepath.NamePathMapper;\n+import org.apache.jackrabbit.oak.namepath.impl.LocalNameMapper;\n+import org.apache.jackrabbit.oak.namepath.impl.NamePathMapperImpl;\n+import org.apache.jackrabbit.oak.spi.security.authorization.accesscontrol.ACE;\n+import org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeConstants;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.Test;\n+\n+import javax.jcr.PropertyType;\n+import javax.jcr.RepositoryException;\n+import javax.jcr.Value;\n+import javax.jcr.security.Privilege;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.apache.jackrabbit.oak.spi.security.authorization.accesscontrol.AccessControlConstants.REP_GLOB;\n+import static org.apache.jackrabbit.oak.spi.security.authorization.accesscontrol.AccessControlConstants.REP_ITEM_NAMES;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class RemappedRestrictionNamesTest extends AbstractAccessControlTest {\n+\n+    private static final Map<String, String> LOCAL_NAME_MAPPINGS = ImmutableMap.of(\n+            \"a\",\"internal\",\n+            \"b\",\"http://www.jcp.org/jcr/1.0\",\n+            \"c\",\"http://jackrabbit.apache.org/oak/ns/1.0\"\n+    );\n+\n+    private NamePathMapperImpl remapped;\n+\n+    private Privilege[] privs;\n+\n+    @Override\n+    public void before() throws Exception {\n+        super.before();\n+\n+        privs = privilegesFromNames(PrivilegeConstants.JCR_READ);\n+    }\n+\n+    @Override\n+    protected NamePathMapper getNamePathMapper() {\n+        if (remapped == null) {\n+            remapped = new NamePathMapperImpl(new LocalNameMapper(root, LOCAL_NAME_MAPPINGS));\n+        }\n+        return remapped;\n+    }\n+\n+    protected Privilege[] privilegesFromNames(@NotNull String... privilegeNames) throws RepositoryException {\n+        Iterable<String> jcrNames = Iterables.transform(Arrays.asList(privilegeNames), s -> getNamePathMapper().getJcrName(s));\n+        return super.privilegesFromNames(jcrNames);\n+    }\n+\n+    @Test\n+    public void testAddEntryWithSingleValueRestriction() throws Exception {\n+        String jcrGlobName = getNamePathMapper().getJcrName(REP_GLOB);\n+        Map<String, Value> rest = ImmutableMap.of(jcrGlobName, getValueFactory(root).createValue(\"*\"));\n+        assertTrue(acl.addEntry(testPrincipal, privs, false, rest));\n+\n+        List<ACE> entries = acl.getEntries();\n+        assertEquals(1, entries.size());\n+        assertArrayEquals(new String[] {jcrGlobName}, entries.get(0).getRestrictionNames());\n+        assertEquals(rest.get(jcrGlobName), entries.get(0).getRestriction(jcrGlobName));\n+    }\n+\n+    @Test\n+    public void testAddEntryWithMVRestriction() throws Exception {\n+        String jcrItemNames = getNamePathMapper().getJcrName(REP_ITEM_NAMES);\n+        Value[] valArray = new Value[] {getValueFactory(root).createValue(\"myItemName\", PropertyType.NAME)};\n+        Map<String, Value[]> rest = ImmutableMap.of(jcrItemNames, valArray);\n+        assertTrue(acl.addEntry(testPrincipal, privs, false, null, rest));\n+\n+        List<ACE> entries = acl.getEntries();\n+        assertEquals(1, entries.size());\n+        assertArrayEquals(new String[] {jcrItemNames}, entries.get(0).getRestrictionNames());\n+        assertArrayEquals(valArray, entries.get(0).getRestrictions(jcrItemNames));\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/5ec570cfbd4cd8ee377c8877558cf91bbe74cf15/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/RemappedRestrictionNamesTest.java",
                "sha": "68e505e81dba672945be11befbb09beb096afa54",
                "status": "added"
            }
        ],
        "message": "OAK-8117 : NPE when adding ACE with restrictions and remapped namespaces\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1855402 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/47952742585e8d91d95f424e7ae3074f057f3dfe",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "ACLTest.java",
            "TestACL.java"
        ]
    },
    "jackrabbit-oak_5f36b76": {
        "bug_id": "jackrabbit-oak_5f36b76",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/5f36b76a6174d3163fdc4b23e667a2cb68896923",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/5f36b76a6174d3163fdc4b23e667a2cb68896923/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/observation/filter/ChangeSetFilterImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/observation/filter/ChangeSetFilterImpl.java?ref=5f36b76a6174d3163fdc4b23e667a2cb68896923",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/observation/filter/ChangeSetFilterImpl.java",
                "patch": "@@ -87,7 +87,8 @@ private Pattern asPattern(String patternWithGlobs) {\n \n     @Override\n     public boolean excludes(ChangeSet changeSet) {\n-        final Set<String> parentPaths = new HashSet<String>(changeSet.getParentPaths());\n+        final Set<String> cpp = changeSet.getParentPaths();\n+        final Set<String> parentPaths = cpp != null ? new HashSet<String>(cpp) : new HashSet<String>();\n \n         // first go through excludes to remove those that are explicitly\n         // excluded",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/5f36b76a6174d3163fdc4b23e667a2cb68896923/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/observation/filter/ChangeSetFilterImpl.java",
                "sha": "d93b6e9d4d5492b80ae0d241cedcfb99dfbb81a0",
                "status": "modified"
            }
        ],
        "message": "OAK-5107 : avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1769682 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/404602df60b3c38b0d0ff1ccdeb5830c7865b76d",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "ChangeSetFilterImplTest.java"
        ]
    },
    "jackrabbit-oak_609bf1e": {
        "bug_id": "jackrabbit-oak_609bf1e",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/609bf1e8b6e9d0edaee161a66cd492f2c36fb8eb",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/609bf1e8b6e9d0edaee161a66cd492f2c36fb8eb/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeBuilder.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeBuilder.java?ref=609bf1e8b6e9d0edaee161a66cd492f2c36fb8eb",
                "deletions": 3,
                "filename": "oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeBuilder.java",
                "patch": "@@ -84,7 +84,7 @@ private CompositeNodeBuilder(String path, Map<MountedNodeStore, NodeBuilder> nod\n \n     @Override\n     public CompositeNodeState getNodeState() {\n-        return new CompositeNodeState(path, new IdentityHashMap<>(buildersToNodeStates(nodeBuilders)), ctx);\n+        return new CompositeNodeState(path, buildersToNodeStates(nodeBuilders), ctx);\n     }\n \n     @Override\n@@ -93,7 +93,7 @@ public CompositeNodeState getBaseState() {\n     }\n \n     private static Map<MountedNodeStore, NodeState> buildersToNodeStates(Map<MountedNodeStore, NodeBuilder> builders) {\n-        return transformValues(builders, new Function<NodeBuilder, NodeState>() {\n+        return new IdentityHashMap<>(transformValues(builders, new Function<NodeBuilder, NodeState>() {\n             @Override\n             public NodeState apply(NodeBuilder input) {\n                 if (input.exists()) {\n@@ -102,7 +102,7 @@ public NodeState apply(NodeBuilder input) {\n                     return MISSING_NODE;\n                 }\n             }\n-        });\n+        }));\n     }\n \n     private static Map<MountedNodeStore, NodeState> buildersToBaseStates(Map<MountedNodeStore, NodeBuilder> builders) {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/609bf1e8b6e9d0edaee161a66cd492f2c36fb8eb/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeBuilder.java",
                "sha": "4f66417530a626a9b236a2b821008897a4a7fedd",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/609bf1e8b6e9d0edaee161a66cd492f2c36fb8eb/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeStore.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeStore.java?ref=609bf1e8b6e9d0edaee161a66cd492f2c36fb8eb",
                "deletions": 1,
                "filename": "oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeStore.java",
                "patch": "@@ -324,7 +324,7 @@ public NodeState retrieve(String checkpoint) {\n             LOG.warn(\"Checkpoint {} doesn't exist. Debug info:\\n{}\", checkpoint, checkpointDebugInfo());\n             return null;\n         }\n-        return new CompositeNodeState(\"/\", nodeStates, ctx);\n+        return ctx.createRootNodeState(nodeStates);\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/609bf1e8b6e9d0edaee161a66cd492f2c36fb8eb/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeStore.java",
                "sha": "cbbb348ae84af52539f12fc6de311db5d1393974",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/609bf1e8b6e9d0edaee161a66cd492f2c36fb8eb/oak-store-composite/src/test/java/org/apache/jackrabbit/oak/composite/CompositeChildrenCountTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-composite/src/test/java/org/apache/jackrabbit/oak/composite/CompositeChildrenCountTest.java?ref=609bf1e8b6e9d0edaee161a66cd492f2c36fb8eb",
                "deletions": 1,
                "filename": "oak-store-composite/src/test/java/org/apache/jackrabbit/oak/composite/CompositeChildrenCountTest.java",
                "patch": "@@ -169,7 +169,7 @@ public TestingNodeState configureMount(String mountPath, String... children) {\n         }\n \n         public CompositeNodeState getNodeState() {\n-            return new CompositeNodeState(\"/\", rootStates, ctx);\n+            return ctx.createRootNodeState(rootStates);\n         }\n \n         public CompositeNodeStoreBuilder clear() {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/609bf1e8b6e9d0edaee161a66cd492f2c36fb8eb/oak-store-composite/src/test/java/org/apache/jackrabbit/oak/composite/CompositeChildrenCountTest.java",
                "sha": "48ade28651a67f98ee1da953175b6dcea4c26ebc",
                "status": "modified"
            }
        ],
        "message": "OAK-6486: NPE in CompositeNodeStore\n\nDon't use lazy loading for the CompositeNodeBuilder#getBaseState()\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1802912 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/dd00cdfd720893ec08f67d108bc5787bf3cf5008",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "CompositeNodeStoreTest.java"
        ]
    },
    "jackrabbit-oak_61e0362": {
        "bug_id": "jackrabbit-oak_61e0362",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/61e036252f696b699e2581db862e2bb0ffe6468e",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/61e036252f696b699e2581db862e2bb0ffe6468e/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/security/ConfigurationParameters.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/security/ConfigurationParameters.java?ref=61e036252f696b699e2581db862e2bb0ffe6468e",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/spi/security/ConfigurationParameters.java",
                "patch": "@@ -83,7 +83,9 @@ private ConfigurationParameters(@Nonnull Map<String, ?> options) {\n     public static ConfigurationParameters of(@Nonnull ConfigurationParameters... params) {\n         Map<String, Object> m = new HashMap<String, Object>();\n         for (ConfigurationParameters cp : params) {\n-            m.putAll(cp.options);\n+            if (cp != null) {\n+                m.putAll(cp.options);\n+            }\n         }\n         return m.isEmpty() ? EMPTY : new ConfigurationParameters(m);\n     }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/61e036252f696b699e2581db862e2bb0ffe6468e/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/security/ConfigurationParameters.java",
                "sha": "08de2e8c57b5eaff3321b68b9b96299585f87a3a",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/61e036252f696b699e2581db862e2bb0ffe6468e/oak-core/src/test/java/org/apache/jackrabbit/oak/spi/security/ConfigurationParametersTest.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/test/java/org/apache/jackrabbit/oak/spi/security/ConfigurationParametersTest.java?ref=61e036252f696b699e2581db862e2bb0ffe6468e",
                "deletions": 2,
                "filename": "oak-core/src/test/java/org/apache/jackrabbit/oak/spi/security/ConfigurationParametersTest.java",
                "patch": "@@ -14,14 +14,13 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.jackrabbit.oak.security;\n+package org.apache.jackrabbit.oak.spi.security;\n \n import java.util.Calendar;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n \n-import org.apache.jackrabbit.oak.spi.security.ConfigurationParameters;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -33,6 +32,7 @@\n import static junit.framework.Assert.assertTrue;\n import static junit.framework.Assert.fail;\n import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertSame;\n \n public class ConfigurationParametersTest {\n \n@@ -42,6 +42,24 @@ public void setup() {}\n     @After\n     public void tearDown() {}\n \n+    @Test\n+    public void testCreation() {\n+        ConfigurationParameters params = ConfigurationParameters.of(\n+                ConfigurationParameters.EMPTY,\n+                null,\n+                ConfigurationParameters.of(Collections.singletonMap(\"a\", \"a\")));\n+        assertFalse(params.isEmpty());\n+        assertEquals(1, params.size());\n+        assertTrue(params.contains(\"a\"));\n+    }\n+\n+    @Test\n+    public void testCreationFromNull() {\n+        ConfigurationParameters cp = null;\n+        ConfigurationParameters params = ConfigurationParameters.of(new ConfigurationParameters[] {cp});\n+        assertSame(ConfigurationParameters.EMPTY, params);\n+    }\n+\n     @Test\n     public void testContains() {\n         ConfigurationParameters params = ConfigurationParameters.EMPTY;",
                "previous_filename": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/ConfigurationParametersTest.java",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/61e036252f696b699e2581db862e2bb0ffe6468e/oak-core/src/test/java/org/apache/jackrabbit/oak/spi/security/ConfigurationParametersTest.java",
                "sha": "8fc6c0279cac506af32de49669867f6816459d8e",
                "status": "renamed"
            }
        ],
        "message": "OAK-1593 : Guard against NPE in ConfigurationParameters.of(ConfigurationParameters...)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1580003 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/eadb0078a0201ee542c84fde24f362a7e698632b",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "ConfigurationParametersTest.java"
        ]
    },
    "jackrabbit-oak_6440348": {
        "bug_id": "jackrabbit-oak_6440348",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/6440348b3a9bbe94098b59c541b80f1b7f05d216",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/6440348b3a9bbe94098b59c541b80f1b7f05d216/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/CommitBuilder.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/CommitBuilder.java?ref=6440348b3a9bbe94098b59c541b80f1b7f05d216",
                "deletions": 0,
                "filename": "oak-mk/src/main/java/org/apache/jackrabbit/mk/model/CommitBuilder.java",
                "patch": "@@ -141,6 +141,13 @@ public void copyNode(String srcPath, String destPath) throws NotFoundException,\n         MutableNode destParent = getOrCreateStagedNode(destParentPath);\n         destParent.add(new ChildNode(destNodeName, srcCNE.getId()));\n \n+        if (srcCNE.getId() == null) {\n+            // a 'new' node is being copied\n+\n+            // update staging area\n+            copyStagedNodes(srcPath, destPath);\n+        }\n+\n         // update change log\n         changeLog.add(new CopyNode(srcPath, destPath));\n     }\n@@ -269,6 +276,17 @@ void moveStagedNodes(String srcPath, String destPath) throws Exception {\n         }\n     }\n \n+    void copyStagedNodes(String srcPath, String destPath) throws Exception {\n+        MutableNode node = staged.get(srcPath);\n+        if (node != null) {\n+            staged.put(destPath, new MutableNode(node, store, destPath));\n+            for (Iterator<String> it = node.getChildNodeNames(0, -1); it.hasNext(); ) {\n+                String childName = it.next();\n+                copyStagedNodes(PathUtils.concat(srcPath, childName), PathUtils.concat(destPath, childName));\n+            }\n+        }\n+    }\n+\n     void removeStagedNodes(String nodePath) throws Exception {\n         MutableNode node = staged.get(nodePath);\n         if (node != null) {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/6440348b3a9bbe94098b59c541b80f1b7f05d216/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/CommitBuilder.java",
                "sha": "645851b8adff1e71bccb8531891a0e63ea77808d",
                "status": "modified"
            }
        ],
        "message": "OAK-47: NPE with nested add&copy operation\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1310044 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/cf381a66ab5d9fab1711881455496efac528fb9d",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "CommitBuilderTest.java"
        ]
    },
    "jackrabbit-oak_64ccc4f": {
        "bug_id": "jackrabbit-oak_64ccc4f",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/64ccc4fd29c03d6597fbe4170dc20f306dbfeb1f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/64ccc4fd29c03d6597fbe4170dc20f306dbfeb1f/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/Commit.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/Commit.java?ref=64ccc4fd29c03d6597fbe4170dc20f306dbfeb1f",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/Commit.java",
                "patch": "@@ -326,7 +326,7 @@ void concurrentModification(Revision other) {\n             }\n             if (conflictMessage != null) {\n                 conflictMessage += \", before\\n\" + revision + \n-                        \"; document:\\n\" + doc.format() +\n+                        \"; document:\\n\" + (doc == null ? \"\" : doc.format()) +\n                         \",\\nrevision order:\\n\" + mk.getRevisionComparator();\n                 throw new MicroKernelException(conflictMessage);\n             }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/64ccc4fd29c03d6597fbe4170dc20f306dbfeb1f/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/Commit.java",
                "sha": "b684e89d74c0843dcb401933220f6c7d802f9a16",
                "status": "modified"
            }
        ],
        "message": "OAK-926 MongoMK: split documents (avoid NPE when constructing the error message)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1531843 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/2dad579272d6461c5fb1f86ad2375e1f2cdbb790",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "CommitTest.java"
        ]
    },
    "jackrabbit-oak_69aa46f": {
        "bug_id": "jackrabbit-oak_69aa46f",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/69aa46fbe70842a15e6325ba61ba0c36c66ff67a",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/69aa46fbe70842a15e6325ba61ba0c36c66ff67a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java?ref=69aa46fbe70842a15e6325ba61ba0c36c66ff67a",
                "deletions": 0,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java",
                "patch": "@@ -206,6 +206,10 @@ public TreePermission getTreePermission(@Nonnull ImmutableTree tree, @Nonnull Tr\n                             tl = tl.getParent();\n                         }\n                         Tree versionableTree = tl.getTree();\n+                        if (versionableTree == null) {\n+                            // for PropertyLocations\n+                            versionableTree = tl.getParent().getTree();\n+                        }\n                         TreePermission pp = getParentPermission(versionableTree, TreeTypeProvider.TYPE_VERSION);\n                         return new TreePermissionImpl(versionableTree, TreeTypeProvider.TYPE_VERSION, pp);\n                     }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/69aa46fbe70842a15e6325ba61ba0c36c66ff67a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java",
                "sha": "145a1628e2d6385dbbb93e3ec29bb799759c24db",
                "status": "modified"
            }
        ],
        "message": "OAK-1135 NPE in CompiledPermissionImpl.getTreePermission()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1537376 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/2c4f23a0d8a5deb83c647cce7c6fb1f70d59da78",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "CompiledPermissionImplTest.java"
        ]
    },
    "jackrabbit-oak_6f3c58a": {
        "bug_id": "jackrabbit-oak_6f3c58a",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/6f3c58af575d0bf1c3e9e30da27b40830dbf3d30",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/6f3c58af575d0bf1c3e9e30da27b40830dbf3d30/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndex.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndex.java?ref=6f3c58af575d0bf1c3e9e30da27b40830dbf3d30",
                "deletions": 0,
                "filename": "oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndex.java",
                "patch": "@@ -896,6 +896,12 @@ static Query tokenToQuery(String text, String fieldName, Analyzer analyzer, Inde\n             List<Term> terms = new ArrayList<Term>();\n             Term onTerm = newFulltextTerm(token, fieldName);\n             Terms t = MultiFields.getTerms(reader, onTerm.field());\n+\n+            //No existing field with given name indexed so no possible term values\n+            if (t == null){\n+                return new Term[0];\n+            }\n+\n             Automaton a = WildcardQuery.toAutomaton(onTerm);\n             CompiledAutomaton ca = new CompiledAutomaton(a);\n             TermsEnum te = ca.getTermsEnum(t);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/6f3c58af575d0bf1c3e9e30da27b40830dbf3d30/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndex.java",
                "sha": "c8bdb76471b8d57ac9b33a42cc60b8938b43e18a",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/6f3c58af575d0bf1c3e9e30da27b40830dbf3d30/oak-lucene/src/test/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndexTest.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-lucene/src/test/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndexTest.java?ref=6f3c58af575d0bf1c3e9e30da27b40830dbf3d30",
                "deletions": 0,
                "filename": "oak-lucene/src/test/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndexTest.java",
                "patch": "@@ -73,6 +73,7 @@\n import org.apache.jackrabbit.oak.query.QueryEngineSettings;\n import org.apache.jackrabbit.oak.query.ast.Operator;\n import org.apache.jackrabbit.oak.query.ast.SelectorImpl;\n+import org.apache.jackrabbit.oak.query.fulltext.FullTextParser;\n import org.apache.jackrabbit.oak.query.fulltext.FullTextTerm;\n import org.apache.jackrabbit.oak.query.index.FilterImpl;\n import org.apache.jackrabbit.oak.spi.commit.CommitInfo;\n@@ -112,6 +113,40 @@\n \n     private Set<File> dirs = newHashSet();\n \n+    @Test\n+    public void testLuceneV1NonExistentProperty() throws Exception {\n+        NodeBuilder index = builder.child(INDEX_DEFINITIONS_NAME);\n+        newLuceneIndexDefinition(index, \"lucene\", ImmutableSet.of(\"String\"));\n+\n+        NodeState before = builder.getNodeState();\n+        builder.setProperty(\"foo\", \"value-with-dash\");\n+        NodeState after = builder.getNodeState();\n+\n+        NodeState indexed = HOOK.processCommit(before, after, CommitInfo.EMPTY);\n+\n+        IndexTracker tracker = new IndexTracker();\n+        tracker.update(indexed);\n+        AdvancedQueryIndex queryIndex = new LuceneIndex(tracker, null);\n+\n+        FilterImpl filter = createFilter(NT_BASE);\n+        filter.restrictPath(\"/\", Filter.PathRestriction.EXACT);\n+        filter.setFullTextConstraint(FullTextParser.parse(\"foo\", \"value-with*\"));\n+        List<IndexPlan> plans = queryIndex.getPlans(filter, null, builder.getNodeState());\n+        Cursor cursor = queryIndex.query(plans.get(0), indexed);\n+        assertTrue(cursor.hasNext());\n+        assertEquals(\"/\", cursor.next().getPath());\n+        assertFalse(cursor.hasNext());\n+\n+        //Now perform a query against a field which does not exist\n+        FilterImpl filter2 = createFilter(NT_BASE);\n+        filter2.restrictPath(\"/\", Filter.PathRestriction.EXACT);\n+        filter2.setFullTextConstraint(FullTextParser.parse(\"baz\", \"value-with*\"));\n+        List<IndexPlan> plans2 = queryIndex.getPlans(filter2, null, builder.getNodeState());\n+        Cursor cursor2 = queryIndex.query(plans2.get(0), indexed);\n+        assertFalse(cursor2.hasNext());\n+    }\n+\n+\n     @Test\n     public void testLucene() throws Exception {\n         NodeBuilder index = builder.child(INDEX_DEFINITIONS_NAME);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/6f3c58af575d0bf1c3e9e30da27b40830dbf3d30/oak-lucene/src/test/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndexTest.java",
                "sha": "c0a46177e6573a9511cfcc195cbe2df2040e5a8b",
                "status": "modified"
            }
        ],
        "message": "OAK-2732 - NPE in lucene search\n\nHandle the case where a field with given name is not indexed and hence term would be null\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1673695 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/ecf654528f15017fd3268433e22d4507d2ebbdbb",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "LuceneIndexTest.java"
        ]
    },
    "jackrabbit-oak_72223c2": {
        "bug_id": "jackrabbit-oak_72223c2",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/72223c27b998e7a579cc41986f3315e3f493f521",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/72223c27b998e7a579cc41986f3315e3f493f521/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/backup/FileStoreBackup.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/backup/FileStoreBackup.java?ref=72223c27b998e7a579cc41986f3315e3f493f521",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/backup/FileStoreBackup.java",
                "patch": "@@ -87,6 +87,6 @@ public static void backup(NodeStore store, File destination)\n             backup.close();\n         }\n \n-        log.debug(\"Backup done in {} ms.\", System.currentTimeMillis() - s);\n+        log.debug(\"Backup finished in {} ms.\", System.currentTimeMillis() - s);\n     }\n }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/72223c27b998e7a579cc41986f3315e3f493f521/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/backup/FileStoreBackup.java",
                "sha": "935734ff0c3fafd3047f76882a5e60860fa3854d",
                "status": "modified"
            }
        ],
        "message": "OAK-1464 FileStoreBackup NPE in retrieving old state\n - re-wording debug logs\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1571251 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/d4ef60c19484d4295593a6e03b9c08975295160f",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "FileStoreBackupTest.java"
        ]
    },
    "jackrabbit-oak_777f624": {
        "bug_id": "jackrabbit-oak_777f624",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/777f624de75943f8de0e9c3f8690715f9e407aef",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/777f624de75943f8de0e9c3f8690715f9e407aef/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/SessionStats.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/SessionStats.java?ref=777f624de75943f8de0e9c3f8690715f9e407aef",
                "deletions": 1,
                "filename": "oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/SessionStats.java",
                "patch": "@@ -222,7 +222,7 @@ public double getSaveRate() {\n         String[] atts = new String[attributes.size()];\n         int k = 0;\n         for (Entry<String, Object> attribute : attributes.entrySet()) {\n-            atts[k] = attribute.getKey() + '=' + attribute.getValue();\n+            atts[k++] = attribute.getKey() + '=' + attribute.getValue();\n         }\n         return atts;\n     }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/777f624de75943f8de0e9c3f8690715f9e407aef/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/SessionStats.java",
                "sha": "550b3141c33f72068532d66480ee4386c4b04a5b",
                "status": "modified"
            }
        ],
        "message": "OAK-2027 - SessionMBean fails to render due to NPE in getSessionAttributes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1617451 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/57682ce3b88d3de666514cba807393e45de578b1",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "SessionStatsTest.java"
        ]
    },
    "jackrabbit-oak_83dcea5": {
        "bug_id": "jackrabbit-oak_83dcea5",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/83dcea53271e4d34e2de60152ca935b637eb70fb",
        "file": [
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/83dcea53271e4d34e2de60152ca935b637eb70fb/oak-run/pom.xml",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-run/pom.xml?ref=83dcea53271e4d34e2de60152ca935b637eb70fb",
                "deletions": 1,
                "filename": "oak-run/pom.xml",
                "patch": "@@ -319,7 +319,27 @@\n       <artifactId>junit</artifactId>\n       <scope>test</scope>\n     </dependency>\n-\n+    <dependency>\n+      <groupId>org.apache.jackrabbit</groupId>\n+      <artifactId>oak-blob-plugins</artifactId>\n+      <version>${project.version}</version>\n+      <type>test-jar</type>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.jackrabbit</groupId>\n+      <artifactId>oak-blob-cloud</artifactId>\n+      <version>${project.version}</version>\n+      <type>test-jar</type>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.jackrabbit</groupId>\n+      <artifactId>oak-blob-cloud-azure</artifactId>\n+      <version>${project.version}</version>\n+      <type>test-jar</type>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n \n   <profiles>",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/83dcea53271e4d34e2de60152ca935b637eb70fb/oak-run/pom.xml",
                "sha": "7d41b5a258a10f6aa75837c12941852aefa30841",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/83dcea53271e4d34e2de60152ca935b637eb70fb/oak-run/src/main/java/org/apache/jackrabbit/oak/run/DataStoreCheckCommand.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-run/src/main/java/org/apache/jackrabbit/oak/run/DataStoreCheckCommand.java?ref=83dcea53271e4d34e2de60152ca935b637eb70fb",
                "deletions": 1,
                "filename": "oak-run/src/main/java/org/apache/jackrabbit/oak/run/DataStoreCheckCommand.java",
                "patch": "@@ -305,4 +305,4 @@ private static void retrieveBlobIds(GarbageCollectableBlobStore blobStore, File\n         System.out.println(count + \" blob ids found\");\n         System.out.println(\"Finished in \" + watch.elapsed(TimeUnit.SECONDS) + \" seconds\");\n     }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/83dcea53271e4d34e2de60152ca935b637eb70fb/oak-run/src/main/java/org/apache/jackrabbit/oak/run/DataStoreCheckCommand.java",
                "sha": "4c7b3b606bcf94d6861a7cdde15dc9846bb3fe63",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/83dcea53271e4d34e2de60152ca935b637eb70fb/oak-run/src/main/java/org/apache/jackrabbit/oak/run/Utils.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-run/src/main/java/org/apache/jackrabbit/oak/run/Utils.java?ref=83dcea53271e4d34e2de60152ca935b637eb70fb",
                "deletions": 2,
                "filename": "oak-run/src/main/java/org/apache/jackrabbit/oak/run/Utils.java",
                "patch": "@@ -233,7 +233,9 @@ public static GarbageCollectableBlobStore bootstrapDataStore(String[] args, Clos\n             String cfgPath = s3dsConfig.value(options);\n             Properties props = loadAndTransformProps(cfgPath);\n             s3ds.setProperties(props);\n-            s3ds.init(null);\n+            File homeDir =  Files.createTempDir();\n+            closer.register(asCloseable(homeDir));\n+            s3ds.init(homeDir.getAbsolutePath());\n             delegate = s3ds;\n         } else if (options.has(azureBlobDSConfig)) {\n             AzureDataStore azureds = new AzureDataStore();\n@@ -312,4 +314,4 @@ private static Properties loadAndTransformProps(String cfgPath) throws IOExcepti\n         }\n         return props;\n     }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/83dcea53271e4d34e2de60152ca935b637eb70fb/oak-run/src/main/java/org/apache/jackrabbit/oak/run/Utils.java",
                "sha": "3dc5f56ad794264daacb92d04e9ccd9a1e36a109",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/83dcea53271e4d34e2de60152ca935b637eb70fb/oak-run/src/main/java/org/apache/jackrabbit/oak/run/cli/BlobStoreFixtureProvider.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-run/src/main/java/org/apache/jackrabbit/oak/run/cli/BlobStoreFixtureProvider.java?ref=83dcea53271e4d34e2de60152ca935b637eb70fb",
                "deletions": 1,
                "filename": "oak-run/src/main/java/org/apache/jackrabbit/oak/run/cli/BlobStoreFixtureProvider.java",
                "patch": "@@ -68,7 +68,9 @@ public static BlobStoreFixture create(Options options) throws Exception{\n             SharedS3DataStore s3ds = new SharedS3DataStore();\n             Properties props = loadAndTransformProps(bsopts.getS3ConfigPath());\n             s3ds.setProperties(props);\n-            s3ds.init(null);\n+            File homeDir =  Files.createTempDir();\n+            closer.register(asCloseable(homeDir));\n+            s3ds.init(homeDir.getAbsolutePath());\n             delegate = s3ds;\n         } else if(bsType == Type.AZURE){\n             AzureDataStore azureds = new AzureDataStore();",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/83dcea53271e4d34e2de60152ca935b637eb70fb/oak-run/src/main/java/org/apache/jackrabbit/oak/run/cli/BlobStoreFixtureProvider.java",
                "sha": "0716bfa11fc6e9448e93d0c289ffa04ff5699cb8",
                "status": "modified"
            },
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/83dcea53271e4d34e2de60152ca935b637eb70fb/oak-run/src/test/java/org/apache/jackrabbit/oak/run/DataStoreCheckTest.java",
                "changes": 89,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-run/src/test/java/org/apache/jackrabbit/oak/run/DataStoreCheckTest.java?ref=83dcea53271e4d34e2de60152ca935b637eb70fb",
                "deletions": 29,
                "filename": "oak-run/src/test/java/org/apache/jackrabbit/oak/run/DataStoreCheckTest.java",
                "patch": "@@ -21,7 +21,6 @@\n import static com.google.common.base.Charsets.UTF_8;\n import static org.junit.Assert.assertEquals;\n \n-import java.io.BufferedWriter;\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.File;\n@@ -34,16 +33,20 @@\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Properties;\n import java.util.Random;\n import java.util.Set;\n \n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Sets;\n-import com.google.common.io.Files;\n+import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.filefilter.FileFilterUtils;\n-import org.apache.commons.lang3.StringEscapeUtils;\n+import org.apache.felix.cm.file.ConfigurationHandler;\n+import org.apache.jackrabbit.core.data.DataStore;\n+import org.apache.jackrabbit.oak.blob.cloud.azure.blobstorage.AzureDataStoreUtils;\n+import org.apache.jackrabbit.oak.blob.cloud.s3.S3DataStoreUtils;\n import org.apache.jackrabbit.oak.commons.FileIOUtils;\n import org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore;\n import org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore;\n@@ -81,18 +84,48 @@\n \n     private String dsPath;\n \n+    private DataStoreBlobStore setupDataStore;\n+\n+    private String dsOption;\n+\n     @Before\n     public void setup() throws Exception {\n-        OakFileDataStore delegate = new OakFileDataStore();\n-        dsPath = temporaryFolder.newFolder().getAbsolutePath();\n-        delegate.setPath(dsPath);\n-        delegate.init(null);\n-        DataStoreBlobStore blobStore = new DataStoreBlobStore(delegate);\n+        if (S3DataStoreUtils.isS3Configured()) {\n+            Properties props = S3DataStoreUtils.getS3Config();\n+            props.setProperty(\"cacheSize\", \"0\");\n+            DataStore ds = S3DataStoreUtils.getS3DataStore(S3DataStoreUtils.getFixtures().get(0),\n+                props,\n+                temporaryFolder.newFolder().getAbsolutePath());\n+            setupDataStore = new DataStoreBlobStore(ds);\n+            cfgFilePath = createTempConfig(temporaryFolder.newFile(), props);\n+            dsOption = \"s3ds\";\n+        } else if (AzureDataStoreUtils.isAzureConfigured()) {\n+            Properties props = AzureDataStoreUtils.getAzureConfig();\n+            props.setProperty(\"cacheSize\", \"0\");\n+            DataStore ds = AzureDataStoreUtils.getAzureDataStore(props,\n+                temporaryFolder.newFolder().getAbsolutePath());\n+            setupDataStore = new DataStoreBlobStore(ds);\n+            cfgFilePath = createTempConfig(temporaryFolder.newFile(), props);\n+            dsOption = \"azureblobds\";\n+        }\n+        else {\n+            OakFileDataStore delegate = new OakFileDataStore();\n+            dsPath = temporaryFolder.newFolder().getAbsolutePath();\n+            delegate.setPath(dsPath);\n+            delegate.init(null);\n+            setupDataStore = new DataStoreBlobStore(delegate);\n+\n+            File cfgFile = temporaryFolder.newFile();\n+            Properties props = new Properties();\n+            props.put(\"path\", dsPath);\n+            cfgFilePath = createTempConfig(cfgFile, props);\n+            dsOption = \"fds\";\n+        }\n \n         File storeFile = temporaryFolder.newFolder();\n         storePath = storeFile.getAbsolutePath();\n         FileStore fileStore = FileStoreBuilder.fileStoreBuilder(storeFile)\n-                .withBlobStore(blobStore)\n+                .withBlobStore(setupDataStore)\n                 .withMaxFileSize(256)\n                 .withSegmentCacheSize(64)\n                 .build();\n@@ -104,7 +137,7 @@ public void setup() throws Exception {\n         blobsAdded = Sets.newHashSet();\n         for (int i = 0; i < numBlobs; i++) {\n             SegmentBlob b = (SegmentBlob) store.createBlob(randomStream(i, 18342));\n-            Iterator<String> idIter = blobStore.resolveChunks(b.getBlobId());\n+            Iterator<String> idIter = setupDataStore.resolveChunks(b.getBlobId());\n             while (idIter.hasNext()) {\n                 String chunk = idIter.next();\n                 blobsAdded.add(chunk);\n@@ -115,14 +148,7 @@ public void setup() throws Exception {\n         store.merge(a, EmptyHook.INSTANCE, CommitInfo.EMPTY);\n         log.info(\"Created blobs : {}\", blobsAdded);\n \n-        File cfgFile = temporaryFolder.newFile();\n-        BufferedWriter writer = Files.newWriter(cfgFile, UTF_8);\n-        FileIOUtils.writeAsLine(writer, \"path=\\\"\" + StringEscapeUtils.escapeJava(dsPath) + \"\\\"\",false);\n-        writer.close();\n-        cfgFilePath = cfgFile.getAbsolutePath();\n-\n         fileStore.close();\n-        blobStore.close();\n     }\n \n     @After\n@@ -133,24 +159,20 @@ public void tearDown() {\n     @Test\n     public void testCorrect() throws Exception {\n         File dump = temporaryFolder.newFolder();\n+        setupDataStore.close();\n         testAllParams(dump);\n     }\n \n     @Test\n     public void testConsistency() throws Exception {\n         File dump = temporaryFolder.newFolder();\n \n-        // Delete a random blob from datastore\n-        OakFileDataStore delegate = new OakFileDataStore();\n-        delegate.setPath(dsPath);\n-        delegate.init(null);\n-        DataStoreBlobStore blobStore = new DataStoreBlobStore(delegate);\n-\n         Random rand = new Random();\n         String deletedBlobId = Iterables.get(blobsAdded, rand.nextInt(blobsAdded.size()));\n         blobsAdded.remove(deletedBlobId);\n-        long count = blobStore.countDeleteChunks(ImmutableList.of(deletedBlobId), 0);\n+        long count = setupDataStore.countDeleteChunks(ImmutableList.of(deletedBlobId), 0);\n         assertEquals(1, count);\n+        setupDataStore.close();\n \n         testAllParams(dump);\n \n@@ -159,27 +181,29 @@ public void testConsistency() throws Exception {\n         assertFileEquals(dump, \"[consistency]\", Sets.newHashSet(deletedBlobId));\n     }\n \n-    public void testAllParams(File dump) throws Exception {\n+    private void testAllParams(File dump) throws Exception {\n         DataStoreCheckCommand checkCommand = new DataStoreCheckCommand();\n         List<String> argsList = Lists\n-            .newArrayList(\"--id\", \"--ref\", \"--consistency\", \"--fds\", cfgFilePath, \"--store\", storePath,\n+            .newArrayList(\"--id\", \"--ref\", \"--consistency\", \"--\" + dsOption, cfgFilePath, \"--store\", storePath,\n                 \"--dump\", dump.getAbsolutePath());\n \n         checkCommand.execute(argsList.toArray(new String[0]));\n     }\n \n     @Test\n     public void testMissingOpParams() throws Exception {\n+        setupDataStore.close();\n         File dump = temporaryFolder.newFolder();\n         List<String> argsList = Lists\n-            .newArrayList(\"--fds\", cfgFilePath, \"--store\", storePath,\n+            .newArrayList(\"--\" + dsOption, cfgFilePath, \"--store\", storePath,\n                 \"--dump\", dump.getAbsolutePath());\n         log.info(\"Running testMissinOpParams: {}\", argsList);\n         testIncorrectParams(argsList, Lists.newArrayList(\"Missing required option(s)\", \"'id'\", \"'ref'\", \"'consistency'\"));\n     }\n \n     @Test\n     public void testTarNoDS() throws Exception {\n+        setupDataStore.close();\n         File dump = temporaryFolder.newFolder();\n         List<String> argsList = Lists\n             .newArrayList(\"--id\", \"--ref\", \"--consistency\", \"--store\", storePath,\n@@ -190,14 +214,15 @@ public void testTarNoDS() throws Exception {\n \n     @Test\n     public void testOpNoStore() throws Exception {\n+        setupDataStore.close();\n         File dump = temporaryFolder.newFolder();\n         List<String> argsList = Lists\n-            .newArrayList(\"--consistency\", \"--fds\", cfgFilePath,\n+            .newArrayList(\"--consistency\", \"--\" + dsOption, cfgFilePath,\n                 \"--dump\", dump.getAbsolutePath());\n         testIncorrectParams(argsList, Lists.newArrayList(\"Missing required option(s) ['store']\"));\n \n         argsList = Lists\n-            .newArrayList(\"--ref\", \"--fds\", cfgFilePath,\n+            .newArrayList(\"--ref\", \"--\" + dsOption, cfgFilePath,\n                 \"--dump\", dump.getAbsolutePath());\n         testIncorrectParams(argsList, Lists.newArrayList(\"Missing required option(s) ['store']\"));\n     }\n@@ -236,4 +261,10 @@ static InputStream randomStream(int seed, int size) {\n         r.nextBytes(data);\n         return new ByteArrayInputStream(data);\n     }\n+\n+    private static String createTempConfig(File cfgFile, Properties props) throws IOException {\n+        FileOutputStream fos = FileUtils.openOutputStream(cfgFile);\n+        ConfigurationHandler.write(fos, props);\n+        return cfgFile.getAbsolutePath();\n+    }\n }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/83dcea53271e4d34e2de60152ca935b637eb70fb/oak-run/src/test/java/org/apache/jackrabbit/oak/run/DataStoreCheckTest.java",
                "sha": "3706ff740868d81006892e2b2787c34e3d020226",
                "status": "modified"
            }
        ],
        "message": "OAK-6229: NPE when running datastorecheck command with S3\n\n- Initializing the S3DataStore with a temp directory\n- Changed setup to also enable testing for S3 & Azure and test dependencies to s3, azure modules\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1795475 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/39cc2d5741d2eba1f0e2eb4eefb5d8b7774315b1",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "UtilsTest.java",
            "TestUtils.java",
            "BlobStoreFixtureProviderTest.java"
        ]
    },
    "jackrabbit-oak_8489fc4": {
        "bug_id": "jackrabbit-oak_8489fc4",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/8489fc4bd3591a7664b39627e689d162313a1c40",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/8489fc4bd3591a7664b39627e689d162313a1c40/oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/configuration/nodestate/NodeStateSolrServersObserver.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/configuration/nodestate/NodeStateSolrServersObserver.java?ref=8489fc4bd3591a7664b39627e689d162313a1c40",
                "deletions": 1,
                "filename": "oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/configuration/nodestate/NodeStateSolrServersObserver.java",
                "patch": "@@ -117,7 +117,6 @@ public boolean childNodeDeleted(String name, NodeState before) {\n         }\n \n         private boolean isSolrServerNode(String name, NodeState nodeState) {\n-            log.info(\"checking {} in {}\", name, nodeState);\n             return \"server\".equals(name) && nodeState.hasProperty(\"solrServerType\");\n         }\n ",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/8489fc4bd3591a7664b39627e689d162313a1c40/oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/configuration/nodestate/NodeStateSolrServersObserver.java",
                "sha": "8b8a0ee6884fd3cc8caa72d3f3d8a9314c49400a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/8489fc4bd3591a7664b39627e689d162313a1c40/oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/query/FilterQueryParser.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/query/FilterQueryParser.java?ref=8489fc4bd3591a7664b39627e689d162313a1c40",
                "deletions": 2,
                "filename": "oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/query/FilterQueryParser.java",
                "patch": "@@ -65,8 +65,8 @@ static SolrQuery getQuery(Filter filter, QueryIndex.IndexPlan plan, OakSolrConfi\n             }\n         }\n \n-        List<QueryIndex.OrderEntry> sortOrder = plan.getSortOrder();\n-        if (sortOrder != null) {\n+        if (plan != null && plan.getSortOrder() != null) {\n+            List<QueryIndex.OrderEntry> sortOrder = plan.getSortOrder();\n             for (QueryIndex.OrderEntry orderEntry : sortOrder) {\n                 SolrQuery.ORDER order;\n                 if (QueryIndex.OrderEntry.Order.ASCENDING.equals(orderEntry.getOrder())) {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/8489fc4bd3591a7664b39627e689d162313a1c40/oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/query/FilterQueryParser.java",
                "sha": "625bb86a8a6737c0060f5fdbef8d4600e29a2c55",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/8489fc4bd3591a7664b39627e689d162313a1c40/oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/query/SolrQueryIndex.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/query/SolrQueryIndex.java?ref=8489fc4bd3591a7664b39627e689d162313a1c40",
                "deletions": 8,
                "filename": "oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/query/SolrQueryIndex.java",
                "patch": "@@ -152,7 +152,7 @@ int getMatchingFilterRestrictions(Filter filter, OakSolrConfiguration configurat\n                 match++;\n             }\n         }\n-\n+        log.debug(\"{}\u00a0matched restrictions for filter {} and configuration {}\", match, filter, configuration);\n \n         return match;\n     }\n@@ -587,12 +587,14 @@ private OakSolrConfiguration getConfiguration(String path, NodeState rootState)\n     private IndexPlan getIndexPlan(Filter filter, OakSolrConfiguration configuration, LMSEstimator estimator,\n                                    List<OrderEntry> sortOrder, String path) {\n         if (getMatchingFilterRestrictions(filter, configuration) > 0) {\n-            return planBuilder(filter)\n-                    .setEstimatedEntryCount(estimator.estimate(filter))\n-                    .setSortOrder(sortOrder)\n-                    .setPlanName(path)\n-                    .setPathPrefix(getPathPrefix(path))\n-                    .build();\n+            IndexPlan indexPlan = planBuilder(filter)\n+                .setEstimatedEntryCount(estimator.estimate(filter))\n+                .setSortOrder(sortOrder)\n+                .setPlanName(path)\n+                .setPathPrefix(getPathPrefix(path))\n+                .build();\n+            log.debug(\"index plan {}\", indexPlan);\n+            return indexPlan;\n         } else {\n             return null;\n         }\n@@ -792,7 +794,7 @@ public long getSize(SizePrecision precision, long max) {\n             switch (precision) {\n                 case EXACT:\n                     // query solr\n-                    SolrQuery countQuery = FilterQueryParser.getQuery(plan.getFilter(), null, this.configuration);\n+                    SolrQuery countQuery = FilterQueryParser.getQuery(plan.getFilter(), plan, this.configuration);\n                     countQuery.setRows(0);\n                     try {\n                         estimate = this.solrServer.query(countQuery).getResults().getNumFound();",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/8489fc4bd3591a7664b39627e689d162313a1c40/oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/query/SolrQueryIndex.java",
                "sha": "99c0d4a54d58f28b169df55e9c25e1626c3d5a93",
                "status": "modified"
            }
        ],
        "message": "OAK-7513 - avoid NPE in exact size calculation, adjusted some log statements\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1832379 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/99bcde9a7a9192ac8ff93473bf8d0c1086627045",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "FilterQueryParserTest.java",
            "SolrQueryIndexTest.java"
        ]
    },
    "jackrabbit-oak_8580c23": {
        "bug_id": "jackrabbit-oak_8580c23",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/8580c2389d46c7fbc13ee78fd5053a958f8ec6f7",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/8580c2389d46c7fbc13ee78fd5053a958f8ec6f7/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/TrackingCorruptIndexHandler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/TrackingCorruptIndexHandler.java?ref=8580c2389d46c7fbc13ee78fd5053a958f8ec6f7",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/TrackingCorruptIndexHandler.java",
                "patch": "@@ -88,7 +88,7 @@ public void markWorkingIndexes(Set<String> updatedIndexPaths) {\n             CorruptIndexInfo info = indexes.remove(indexPath);\n             if (info != null){\n                 log.info(\"Index at [{}] which was so far failing {} is now working again.\", info.path, info.getStats());\n-            } else {\n+            } else if (meter != null) {\n                 meter.mark();\n             }\n         }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/8580c2389d46c7fbc13ee78fd5053a958f8ec6f7/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/TrackingCorruptIndexHandler.java",
                "sha": "422e4cacdfac974f38b337eabf915b2717896fdf",
                "status": "modified"
            }
        ],
        "message": "OAK-7839 - minor fix to prevent NPEs in case MeterStat is not registered\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1844321 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/eb55ba5aaf9a7d432d37e982566ab7c6910aa870",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "TrackingCorruptIndexHandlerTest.java"
        ]
    },
    "jackrabbit-oak_958223c": {
        "bug_id": "jackrabbit-oak_958223c",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/958223cabe378fac83a77fca359748ec3bd9dc3a",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/958223cabe378fac83a77fca359748ec3bd9dc3a/oak-it/src/test/java/org/apache/jackrabbit/oak/composite/CompositeNodeStoreTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-it/src/test/java/org/apache/jackrabbit/oak/composite/CompositeNodeStoreTest.java?ref=958223cabe378fac83a77fca359748ec3bd9dc3a",
                "deletions": 1,
                "filename": "oak-it/src/test/java/org/apache/jackrabbit/oak/composite/CompositeNodeStoreTest.java",
                "patch": "@@ -82,7 +82,6 @@\n import org.apache.jackrabbit.oak.spi.state.NodeStore;\n import org.junit.After;\n import org.junit.Before;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/958223cabe378fac83a77fca359748ec3bd9dc3a/oak-it/src/test/java/org/apache/jackrabbit/oak/composite/CompositeNodeStoreTest.java",
                "sha": "136bec295b80a2cec3bcf59c1c77210487944b76",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/958223cabe378fac83a77fca359748ec3bd9dc3a/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CommitHookEnhancer.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CommitHookEnhancer.java?ref=958223cabe378fac83a77fca359748ec3bd9dc3a",
                "deletions": 6,
                "filename": "oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CommitHookEnhancer.java",
                "patch": "@@ -20,7 +20,6 @@\n import org.apache.jackrabbit.oak.spi.commit.CommitHook;\n import org.apache.jackrabbit.oak.spi.commit.CommitInfo;\n import org.apache.jackrabbit.oak.spi.state.ApplyDiff;\n-import org.apache.jackrabbit.oak.spi.state.NodeBuilder;\n import org.apache.jackrabbit.oak.spi.state.NodeState;\n \n import javax.annotation.Nonnull;\n@@ -33,15 +32,15 @@\n \n     private final CompositionContext ctx;\n \n-    private final Map<MountedNodeStore, NodeBuilder> builders;\n+    private final CompositeNodeBuilder builder;\n \n     private final CommitHook hook;\n \n     private Optional<CompositeNodeBuilder> updatedBuilder = Optional.empty();\n \n-    CommitHookEnhancer(CommitHook hook, CompositionContext ctx, Map<MountedNodeStore, NodeBuilder> builders) {\n+    CommitHookEnhancer(CommitHook hook, CompositionContext ctx, CompositeNodeBuilder builder) {\n         this.ctx = ctx;\n-        this.builders = builders;\n+        this.builder = builder;\n         this.hook = hook;\n     }\n \n@@ -51,8 +50,8 @@ public NodeState processCommit(NodeState before, NodeState after, CommitInfo inf\n         Map<MountedNodeStore, NodeState> beforeStates = newHashMap();\n         Map<MountedNodeStore, NodeState> afterStates = newHashMap();\n         for (MountedNodeStore mns : ctx.getNonDefaultStores()) {\n-            afterStates.put(mns, mns.getNodeStore().rebase(builders.get(mns)));\n-            beforeStates.put(mns, builders.get(mns).getBaseState());\n+            afterStates.put(mns, mns.getNodeStore().rebase(builder.getNodeBuilder(mns)));\n+            beforeStates.put(mns, builder.getNodeBuilder(mns).getBaseState());\n         }\n         afterStates.put(ctx.getGlobalStore(), after);\n         beforeStates.put(ctx.getGlobalStore(), before);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/958223cabe378fac83a77fca359748ec3bd9dc3a/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CommitHookEnhancer.java",
                "sha": "25e28da4a28cfc154efc1088a62ced139602eb70",
                "status": "modified"
            },
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/958223cabe378fac83a77fca359748ec3bd9dc3a/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeBuilder.java",
                "changes": 140,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeBuilder.java?ref=958223cabe378fac83a77fca359748ec3bd9dc3a",
                "deletions": 84,
                "filename": "oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeBuilder.java",
                "patch": "@@ -16,59 +16,62 @@\n  */\n package org.apache.jackrabbit.oak.composite;\n \n-import com.google.common.base.Function;\n import com.google.common.base.Objects;\n-import com.google.common.collect.Maps;\n+import com.google.common.collect.FluentIterable;\n import org.apache.jackrabbit.oak.api.Blob;\n import org.apache.jackrabbit.oak.api.PropertyState;\n import org.apache.jackrabbit.oak.api.Type;\n import org.apache.jackrabbit.oak.commons.PathUtils;\n+import org.apache.jackrabbit.oak.composite.util.Memoizer;\n import org.apache.jackrabbit.oak.plugins.memory.EmptyNodeState;\n import org.apache.jackrabbit.oak.spi.state.MoveDetector;\n import org.apache.jackrabbit.oak.spi.state.NodeBuilder;\n import org.apache.jackrabbit.oak.spi.state.NodeState;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.io.IOException;\n import java.io.InputStream;\n-import java.util.IdentityHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n \n-import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Preconditions.checkNotNull;\n import static com.google.common.base.Preconditions.checkState;\n-import static com.google.common.collect.Iterables.concat;\n-import static com.google.common.collect.Iterables.filter;\n-import static com.google.common.collect.Iterables.transform;\n-import static com.google.common.collect.Maps.transformValues;\n+import static com.google.common.collect.Maps.newHashMap;\n import static java.lang.Long.MAX_VALUE;\n import static java.util.Collections.singleton;\n+import static org.apache.jackrabbit.oak.composite.CompositeNodeState.STOP_COUNTING_CHILDREN;\n+import static org.apache.jackrabbit.oak.composite.CompositeNodeState.accumulateChildSizes;\n+import static org.apache.jackrabbit.oak.composite.CompositeNodeState.wrapWithNullCheck;\n import static org.apache.jackrabbit.oak.plugins.memory.EmptyNodeState.MISSING_NODE;\n import static org.apache.jackrabbit.oak.spi.state.AbstractNodeState.checkValidName;\n \n class CompositeNodeBuilder implements NodeBuilder {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(CompositeNodeBuilder.class);\n+\n     private final String path;\n \n     private final CompositionContext ctx;\n \n-    private Map<MountedNodeStore, NodeBuilder> nodeBuilders;\n+    private Function<MountedNodeStore, NodeBuilder> nodeBuilders;\n \n     private final MountedNodeStore owningStore;\n \n     private final CompositeNodeBuilder parent;\n \n     private final CompositeNodeBuilder rootBuilder;\n \n-    CompositeNodeBuilder(String path, Map<MountedNodeStore, NodeBuilder> nodeBuilders, CompositionContext ctx) {\n+    CompositeNodeBuilder(String path, Function<MountedNodeStore, NodeBuilder> nodeBuilders, CompositionContext ctx) {\n         this(path, nodeBuilders, ctx, null);\n     }\n \n-    private CompositeNodeBuilder(String path, Map<MountedNodeStore, NodeBuilder> nodeBuilders, CompositionContext ctx, CompositeNodeBuilder parent) {\n-        checkArgument(nodeBuilders.size() == ctx.getStoresCount(), \"Got %s builders but the context manages %s stores\", nodeBuilders.size(), ctx.getStoresCount());\n+    private CompositeNodeBuilder(String path, Function<MountedNodeStore, NodeBuilder> nodeBuilders, CompositionContext ctx, CompositeNodeBuilder parent) {\n         this.path = path;\n         this.ctx = ctx;\n-        this.nodeBuilders = new CopyOnReadIdentityMap<>(nodeBuilders);\n+        this.nodeBuilders = wrapWithNullCheck(Memoizer.memoize(nodeBuilders), LOG, path);\n         this.owningStore = ctx.getOwningStore(path);\n         this.parent = parent;\n         if (parent == null) {\n@@ -78,40 +81,24 @@ private CompositeNodeBuilder(String path, Map<MountedNodeStore, NodeBuilder> nod\n         }\n     }\n \n-    Map<MountedNodeStore, NodeBuilder> getBuilders() {\n-        return nodeBuilders;\n+    NodeBuilder getNodeBuilder(MountedNodeStore mns) {\n+        return nodeBuilders.apply(mns);\n     }\n \n     @Override\n     public CompositeNodeState getNodeState() {\n-        return new CompositeNodeState(path, buildersToNodeStates(nodeBuilders), ctx);\n+        Map<MountedNodeStore, NodeState> states = ctx.getAllMountedNodeStores().stream().collect(Collectors.toMap(Function.identity(),\n+                nodeBuilders\n+                        .andThen(n -> n.exists() ? n.getNodeState() : MISSING_NODE)));\n+        return new CompositeNodeState(path, states, ctx);\n     }\n \n     @Override\n     public CompositeNodeState getBaseState() {\n-        return new CompositeNodeState(path, buildersToBaseStates(nodeBuilders), ctx);\n-    }\n-\n-    private static Map<MountedNodeStore, NodeState> buildersToNodeStates(Map<MountedNodeStore, NodeBuilder> builders) {\n-        return new IdentityHashMap<>(transformValues(builders, new Function<NodeBuilder, NodeState>() {\n-            @Override\n-            public NodeState apply(NodeBuilder input) {\n-                if (input.exists()) {\n-                    return input.getNodeState();\n-                } else {\n-                    return MISSING_NODE;\n-                }\n-            }\n-        }));\n-    }\n-\n-    private static Map<MountedNodeStore, NodeState> buildersToBaseStates(Map<MountedNodeStore, NodeBuilder> builders) {\n-        return new IdentityHashMap<>(transformValues(builders, new Function<NodeBuilder, NodeState>() {\n-            @Override\n-            public NodeState apply(NodeBuilder input) {\n-                return input.getBaseState();\n-            }\n-        }));\n+        Map<MountedNodeStore, NodeState> states = ctx.getAllMountedNodeStores().stream().collect(Collectors.toMap(Function.identity(),\n+                nodeBuilders\n+                        .andThen(NodeBuilder::getBaseState)));\n+        return new CompositeNodeState(path, states, ctx);\n     }\n \n     // node or property-related methods ; directly delegate to wrapped builder\n@@ -219,35 +206,31 @@ public long getChildNodeCount(final long max) {\n             return getWrappedNodeBuilder().getChildNodeCount(max);\n         } else {\n             // Count the children in each contributing store.\n-            return CompositeNodeState.accumulateChildSizes(concat(transform(contributingStores, new Function<MountedNodeStore, Iterable<String>>() {\n-                @Override\n-                public Iterable<String> apply(MountedNodeStore input) {\n-                    NodeBuilder contributing = nodeBuilders.get(input);\n-                    if (contributing.getChildNodeCount(max) == MAX_VALUE) {\n-                        return singleton(CompositeNodeState.STOP_COUNTING_CHILDREN);\n-                    } else {\n-                        return filter(contributing.getChildNodeNames(), ctx.belongsToStore(input, path));\n-                    }\n-                }\n-            })), max);\n+            return accumulateChildSizes(FluentIterable.from(contributingStores)\n+                    .transformAndConcat(mns -> {\n+                        NodeBuilder node = nodeBuilders.apply(mns);\n+                        if (node.getChildNodeCount(max) == MAX_VALUE) {\n+                            return singleton(STOP_COUNTING_CHILDREN);\n+                        } else {\n+                            return FluentIterable.from(node.getChildNodeNames()).filter(e -> belongsToStore(mns, e));\n+                        }\n+                    }), max);\n         }\n     }\n \n     @Override\n     public Iterable<String> getChildNodeNames() {\n-        return concat(transform(ctx.getContributingStoresForBuilders(path, nodeBuilders), new Function<MountedNodeStore, Iterable<String>>() {\n-            @Override\n-            public Iterable<String> apply(final MountedNodeStore mountedNodeStore) {\n-                return filter(nodeBuilders.get(mountedNodeStore).getChildNodeNames(), ctx.belongsToStore(mountedNodeStore, path));\n-            }\n-        }));\n+        return FluentIterable.from(ctx.getContributingStoresForBuilders(path, nodeBuilders))\n+                .transformAndConcat(mns -> FluentIterable\n+                        .from(nodeBuilders.apply(mns).getChildNodeNames())\n+                        .filter(e -> belongsToStore(mns, e)));\n     }\n \n     @Override\n     public boolean hasChildNode(String name) {\n         String childPath = simpleConcat(path, name);\n         MountedNodeStore mountedStore = ctx.getOwningStore(childPath);\n-        return nodeBuilders.get(mountedStore).hasChildNode(name);\n+        return nodeBuilders.apply(mountedStore).hasChildNode(name);\n     }\n \n     @Override\n@@ -260,29 +243,24 @@ public NodeBuilder child(String name) {\n     }\n \n     private void createAncestors(MountedNodeStore mountedNodeStore) {\n-        NodeBuilder builder = rootBuilder.nodeBuilders.get(mountedNodeStore);\n+        NodeBuilder builder = rootBuilder.nodeBuilders.apply(mountedNodeStore);\n         for (String element : PathUtils.elements(path)) {\n             builder = builder.child(element);\n         }\n-        if (nodeBuilders instanceof CopyOnReadIdentityMap) {\n-            nodeBuilders = new IdentityHashMap<>(nodeBuilders);\n-        }\n-        nodeBuilders.put(mountedNodeStore, builder);\n+\n+        // the nodeBuilders function should be updated, to return the new node builder\n+        Map<MountedNodeStore, NodeBuilder> map = newHashMap(ctx.getAllMountedNodeStores().stream().collect(Collectors.toMap(Function.identity(), nodeBuilders)));\n+        map.put(mountedNodeStore, builder);\n+        nodeBuilders = wrapWithNullCheck(m -> map.get(m), LOG, path);\n     }\n \n     @Override\n     public NodeBuilder getChildNode(final String name) {\n         String childPath = simpleConcat(path, name);\n         if (!ctx.shouldBeComposite(childPath)) {\n-            return nodeBuilders.get(ctx.getOwningStore(childPath)).getChildNode(name);\n+            return nodeBuilders.apply(ctx.getOwningStore(childPath)).getChildNode(name);\n         }\n-        Map<MountedNodeStore, NodeBuilder> newNodeBuilders = transformValues(nodeBuilders, new Function<NodeBuilder, NodeBuilder>() {\n-            @Override\n-            public NodeBuilder apply(NodeBuilder input) {\n-                return input.getChildNode(name);\n-            }\n-        });\n-        return new CompositeNodeBuilder(childPath, newNodeBuilders, ctx, this);\n+        return new CompositeNodeBuilder(childPath, nodeBuilders.andThen(b -> b.getChildNode(name)), ctx, this);\n     }\n \n     @Override\n@@ -295,25 +273,15 @@ public NodeBuilder setChildNode(final String name, NodeState nodeState) {\n         checkState(exists(), \"This builder does not exist: \" + PathUtils.getName(path));\n         String childPath = simpleConcat(path, name);\n         final MountedNodeStore childStore = ctx.getOwningStore(childPath);\n-        if (childStore != owningStore && !nodeBuilders.get(childStore).exists()) {\n+        if (childStore != owningStore && !nodeBuilders.apply(childStore).exists()) {\n             createAncestors(childStore);\n         }\n-        final NodeBuilder childBuilder = nodeBuilders.get(childStore).setChildNode(name, nodeState);\n+        final NodeBuilder childBuilder = nodeBuilders.apply(childStore).setChildNode(name, nodeState);\n         if (!ctx.shouldBeComposite(childPath)) {\n             return childBuilder;\n         }\n \n-        Map<MountedNodeStore, NodeBuilder> newNodeBuilders = Maps.transformEntries(nodeBuilders, new Maps.EntryTransformer<MountedNodeStore, NodeBuilder, NodeBuilder>() {\n-            @Override\n-            public NodeBuilder transformEntry(MountedNodeStore key, NodeBuilder value) {\n-                if (key == childStore) {\n-                    return childBuilder;\n-                } else {\n-                    return value.getChildNode(name);\n-                }\n-            }\n-        });\n-        return new CompositeNodeBuilder(childPath, newNodeBuilders, ctx, this);\n+        return new CompositeNodeBuilder(childPath, m -> m == childStore ? childBuilder : nodeBuilders.apply(m).getChildNode(name), ctx, this);\n     }\n \n     @Override\n@@ -346,7 +314,7 @@ public Blob createBlob(InputStream stream) throws IOException {\n     }\n \n     private NodeBuilder getWrappedNodeBuilder() {\n-        return nodeBuilders.get(owningStore);\n+        return nodeBuilders.apply (owningStore);\n     }\n \n     private void annotateSourcePath() {\n@@ -403,6 +371,10 @@ String getPath() {\n         return path;\n     }\n \n+    private boolean belongsToStore(MountedNodeStore mns, String childName) {\n+        return ctx.belongsToStore(mns, path, childName);\n+    }\n+\n     /**\n      * This simplified version of {@link PathUtils#concat(String, String)} method\n      * assumes that the parentPath is valid and not null, while the second argument",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/958223cabe378fac83a77fca359748ec3bd9dc3a/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeBuilder.java",
                "sha": "866c37eaf998c9ae698daced9cae144f7daff0a3",
                "status": "modified"
            },
            {
                "additions": 50,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/958223cabe378fac83a77fca359748ec3bd9dc3a/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeState.java",
                "changes": 117,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeState.java?ref=958223cabe378fac83a77fca359748ec3bd9dc3a",
                "deletions": 67,
                "filename": "oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeState.java",
                "patch": "@@ -18,32 +18,26 @@\n  */\n package org.apache.jackrabbit.oak.composite;\n \n-import com.google.common.base.Function;\n+import com.google.common.collect.FluentIterable;\n import org.apache.jackrabbit.oak.api.PropertyState;\n import org.apache.jackrabbit.oak.commons.PathUtils;\n+import org.apache.jackrabbit.oak.composite.util.Memoizer;\n import org.apache.jackrabbit.oak.plugins.memory.MemoryChildNodeEntry;\n import org.apache.jackrabbit.oak.spi.state.AbstractNodeState;\n import org.apache.jackrabbit.oak.spi.state.ChildNodeEntry;\n-import org.apache.jackrabbit.oak.spi.state.NodeBuilder;\n import org.apache.jackrabbit.oak.spi.state.NodeState;\n import org.apache.jackrabbit.oak.spi.state.NodeStateDiff;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.util.List;\n import java.util.Map;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n \n-import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Predicates.compose;\n-import static com.google.common.collect.Iterables.concat;\n-import static com.google.common.collect.Iterables.filter;\n-import static com.google.common.collect.Iterables.transform;\n-import static com.google.common.collect.Maps.asMap;\n-import static com.google.common.collect.Maps.transformValues;\n import static java.lang.Long.MAX_VALUE;\n import static java.util.Collections.singleton;\n import static org.apache.jackrabbit.oak.composite.CompositeNodeBuilder.simpleConcat;\n-import static org.apache.jackrabbit.oak.spi.state.ChildNodeEntry.GET_NAME;\n \n class CompositeNodeState extends AbstractNodeState {\n \n@@ -70,25 +64,36 @@\n \n     private final MountedNodeStore owningStore;\n \n-    private final Map<MountedNodeStore, NodeState> nodeStates;\n+    private final Function<MountedNodeStore, NodeState> nodeStates;\n \n     CompositeNodeState(String path, Map<MountedNodeStore, NodeState> nodeStates, CompositionContext ctx) {\n-        checkArgument(nodeStates.size() == ctx.getStoresCount(), \"Got %s node states but the context manages %s stores\", nodeStates.size(), ctx.getStoresCount());\n         this.path = path;\n         this.ctx = ctx;\n-        this.nodeStates = new CopyOnReadIdentityMap<>(nodeStates);\n+        this.nodeStates = wrapWithNullCheck(mns -> nodeStates.get(mns), LOG, path);\n         this.owningStore = ctx.getOwningStore(path);\n     }\n \n-    NodeState getNodeState(MountedNodeStore mns) {\n-        NodeState nodeState = nodeStates.get(mns);\n-        if (nodeState != null) {\n+    CompositeNodeState(String path, Function<MountedNodeStore, NodeState> nodeStates, CompositionContext ctx) {\n+        this.path = path;\n+        this.ctx = ctx;\n+        this.nodeStates = wrapWithNullCheck(Memoizer.memoize(nodeStates), LOG, path);\n+        this.owningStore = ctx.getOwningStore(path);\n+    }\n+\n+    static <N> Function<MountedNodeStore, N> wrapWithNullCheck(Function<MountedNodeStore, N> f, Logger log, String path) {\n+        return mns -> {\n+            N nodeState = f.apply(mns);\n+            if (nodeState == null) {\n+                // this shouldn't happen, so we need to log some more debug info\n+                log.warn(\"Can't find node state for path {} and mount {}.\", path, mns);\n+                throw new IllegalStateException(\"Can't find the node state for mount \" + mns);\n+            }\n             return nodeState;\n-        }\n+        };\n+    }\n \n-        // this shouldn't happen, so we need to log some more debug info\n-        LOG.warn(\"Can't find node state for path {} and mount {}. The node state map: {}\", path, mns, nodeStates);\n-        throw new IllegalStateException(\"Can't find the node state for mount \" + mns);\n+    NodeState getNodeState(MountedNodeStore mns) {\n+        return nodeStates.apply(mns);\n     }\n \n     @Override\n@@ -122,44 +127,37 @@ public long getPropertyCount() {\n     public boolean hasChildNode(String name) {\n         String childPath = simpleConcat(path, name);\n         MountedNodeStore mountedStore = ctx.getOwningStore(childPath);\n-        return getNodeState(mountedStore).hasChildNode(name);\n+        return nodeStates.apply(mountedStore).hasChildNode(name);\n     }\n \n     @Override\n     public NodeState getChildNode(final String name) {\n         String childPath = simpleConcat(path, name);\n         if (!ctx.shouldBeComposite(childPath)) {\n-            return getNodeState(ctx.getOwningStore(childPath)).getChildNode(name);\n+            return nodeStates.apply(ctx.getOwningStore(childPath)).getChildNode(name);\n         }\n-        Map<MountedNodeStore, NodeState> newNodeStates = transformValues(safeGetMap(), new Function<NodeState, NodeState>() {\n-            @Override\n-            public NodeState apply(NodeState input) {\n-                return input.getChildNode(name);\n-            }\n-        });\n+        Function<MountedNodeStore, NodeState> newNodeStates = nodeStates.andThen(n -> n.getChildNode(name));\n         return new CompositeNodeState(childPath, newNodeStates, ctx);\n     }\n \n     @Override\n     public long getChildNodeCount(final long max) {\n-        List<MountedNodeStore> contributingStores = ctx.getContributingStoresForNodes(path, safeGetMap());\n+        List<MountedNodeStore> contributingStores = ctx.getContributingStoresForNodes(path, nodeStates);\n         if (contributingStores.isEmpty()) {\n             return 0; // this shouldn't happen\n         } else if (contributingStores.size() == 1) {\n             return getWrappedNodeState().getChildNodeCount(max);\n         } else {\n             // Count the children in each contributing store.\n-            return accumulateChildSizes(concat(transform(contributingStores, new Function<MountedNodeStore, Iterable<String>>() {\n-                @Override\n-                public Iterable<String> apply(MountedNodeStore mns) {\n-                    NodeState contributing = getNodeState(mns);\n-                    if (contributing.getChildNodeCount(max) == MAX_VALUE) {\n-                        return singleton(STOP_COUNTING_CHILDREN);\n-                    } else {\n-                        return filter(contributing.getChildNodeNames(), ctx.belongsToStore(mns, path));\n-                    }\n-                }\n-            })), max);\n+            return accumulateChildSizes(FluentIterable.from(contributingStores)\n+                    .transformAndConcat(mns -> {\n+                        NodeState node = nodeStates.apply(mns);\n+                        if (node.getChildNodeCount(max) == MAX_VALUE) {\n+                            return singleton(STOP_COUNTING_CHILDREN);\n+                        } else {\n+                            return FluentIterable.from(node.getChildNodeNames()).filter(e -> belongsToStore(mns, e));\n+                        }\n+                    }), max);\n         }\n     }\n \n@@ -176,19 +174,11 @@ static long accumulateChildSizes(Iterable<String> nodeNames, long max) {\n \n     @Override\n     public Iterable<? extends ChildNodeEntry> getChildNodeEntries() {\n-        Iterable<? extends ChildNodeEntry> nativeChildren = concat(transform(ctx.getContributingStoresForNodes(path, safeGetMap()), new Function<MountedNodeStore, Iterable<? extends ChildNodeEntry>>() {\n-            @Override\n-            public Iterable<? extends ChildNodeEntry> apply(final MountedNodeStore mountedNodeStore) {\n-                return filter(getNodeState(mountedNodeStore).getChildNodeEntries(), compose(ctx.belongsToStore(mountedNodeStore, path), GET_NAME));\n-            }\n-        }));\n-        return transform(nativeChildren, new Function<ChildNodeEntry, ChildNodeEntry>() {\n-            @Override\n-            public ChildNodeEntry apply(ChildNodeEntry input) {\n-                NodeState wrapped = getChildNode(input.getName());\n-                return new MemoryChildNodeEntry(input.getName(), wrapped);\n-            }\n-        });\n+        return FluentIterable.from(ctx.getContributingStoresForNodes(path, nodeStates))\n+                .transformAndConcat(mns -> FluentIterable\n+                        .from(nodeStates.apply(mns).getChildNodeNames())\n+                        .filter(n -> belongsToStore(mns, n)))\n+                .transform(n -> new MemoryChildNodeEntry(n, getChildNode(n)));\n     }\n \n     @Override\n@@ -197,13 +187,13 @@ public boolean compareAgainstBaseState(NodeState base, NodeStateDiff diff) {\n             CompositeNodeState multiBase = (CompositeNodeState) base;\n             NodeStateDiff wrappingDiff = new WrappingDiff(diff, multiBase);\n             boolean full = getWrappedNodeState().compareAgainstBaseState(multiBase.getWrappedNodeState(), new ChildrenDiffFilter(wrappingDiff, owningStore, true));\n-            for (MountedNodeStore mns : ctx.getContributingStoresForNodes(path, safeGetMap())) {\n+            for (MountedNodeStore mns : ctx.getContributingStoresForNodes(path, nodeStates)) {\n                 if (owningStore == mns) {\n                     continue;\n                 }\n                 NodeStateDiff childrenDiffFilter = new ChildrenDiffFilter(wrappingDiff, mns, false);\n-                NodeState contributing = getNodeState(mns);\n-                NodeState contributingBase = multiBase.getNodeState(mns);\n+                NodeState contributing = nodeStates.apply(mns);\n+                NodeState contributingBase = multiBase.nodeStates.apply(mns);\n                 full = full && contributing.compareAgainstBaseState(contributingBase, childrenDiffFilter);\n             }\n             return full;\n@@ -215,21 +205,15 @@ public boolean compareAgainstBaseState(NodeState base, NodeStateDiff diff) {\n     // write operations\n     @Override\n     public CompositeNodeBuilder builder() {\n-        Map<MountedNodeStore, NodeBuilder> nodeBuilders = transformValues(safeGetMap(), new Function<NodeState, NodeBuilder>() {\n-            @Override\n-            public NodeBuilder apply(NodeState input) {\n-                return input.builder();\n-            }\n-        });\n-        return new CompositeNodeBuilder(path, nodeBuilders, ctx);\n+        return new CompositeNodeBuilder(path, nodeStates.andThen(NodeState::builder), ctx);\n     }\n \n     private NodeState getWrappedNodeState() {\n-        return getNodeState(owningStore);\n+        return nodeStates.apply(owningStore);\n     }\n \n-    private Map<MountedNodeStore, NodeState> safeGetMap() {\n-        return asMap(ctx.getAllMountedNodeStores(), this::getNodeState);\n+    private boolean belongsToStore(MountedNodeStore mns, String childName) {\n+        return ctx.belongsToStore(mns, path, childName);\n     }\n \n     private class ChildrenDiffFilter implements NodeStateDiff {\n@@ -354,5 +338,4 @@ private NodeState wrapAfter(String name) {\n             return CompositeNodeState.this.getChildNode(name);\n         }\n     }\n-\n }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/958223cabe378fac83a77fca359748ec3bd9dc3a/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeState.java",
                "sha": "8bbc3d54de34e0549c3d9c8d27ffcaf263d9046c",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/958223cabe378fac83a77fca359748ec3bd9dc3a/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeStore.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeStore.java?ref=958223cabe378fac83a77fca359748ec3bd9dc3a",
                "deletions": 6,
                "filename": "oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeStore.java",
                "patch": "@@ -141,8 +141,8 @@ public NodeState merge(NodeBuilder builder, CommitHook commitHook, CommitInfo in\n             // merge the global builder and apply the commit hooks within\n             Map<MountedNodeStore, NodeState> resultStates = newHashMap();\n             MountedNodeStore globalStore = ctx.getGlobalStore();\n-            CommitHookEnhancer hookEnhancer = new CommitHookEnhancer(commitHook, ctx, nodeBuilder.getBuilders());\n-            NodeState globalResult = globalStore.getNodeStore().merge(nodeBuilder.getBuilders().get(globalStore), hookEnhancer, info);\n+            CommitHookEnhancer hookEnhancer = new CommitHookEnhancer(commitHook, ctx, nodeBuilder);\n+            NodeState globalResult = globalStore.getNodeStore().merge(nodeBuilder.getNodeBuilder(globalStore), hookEnhancer, info);\n             resultStates.put(globalStore, globalResult);\n \n             if (!hookEnhancer.getUpdatedBuilder().isPresent()) {\n@@ -154,7 +154,7 @@ public NodeState merge(NodeBuilder builder, CommitHook commitHook, CommitInfo in\n \n             // merge the partial builders\n             for (MountedNodeStore mns : ctx.getNonDefaultStores()) {\n-                NodeBuilder partialBuilder = updatedBuilder.getBuilders().get(mns);\n+                NodeBuilder partialBuilder = updatedBuilder.getNodeBuilder(mns);\n \n                 if (mns.getMount().isReadOnly()) {\n                     assertNoChange(mns, partialBuilder);\n@@ -180,7 +180,7 @@ private void assertNoChangesOnReadOnlyMounts(CompositeNodeBuilder nodeBuilder) t\n             if (!mountedNodeStore.getMount().isReadOnly()) {\n                 continue;\n             }\n-            NodeBuilder partialBuilder = nodeBuilder.getBuilders().get(mountedNodeStore);\n+            NodeBuilder partialBuilder = nodeBuilder.getNodeBuilder(mountedNodeStore);\n             assertNoChange(mountedNodeStore, partialBuilder);\n         }\n     }\n@@ -209,7 +209,7 @@ public NodeState rebase(NodeBuilder builder) {\n         Map<MountedNodeStore, NodeState> resultStates = newHashMap();\n         for (MountedNodeStore mountedNodeStore : ctx.getAllMountedNodeStores()) {\n             NodeStore nodeStore = mountedNodeStore.getNodeStore();\n-            NodeBuilder partialBuilder = nodeBuilder.getBuilders().get(mountedNodeStore);\n+            NodeBuilder partialBuilder = nodeBuilder.getNodeBuilder(mountedNodeStore);\n             NodeState result = nodeStore.rebase(partialBuilder);\n             resultStates.put(mountedNodeStore, result);\n         }\n@@ -224,7 +224,7 @@ public NodeState reset(NodeBuilder builder) {\n         Map<MountedNodeStore, NodeState> resultStates = newHashMap();\n         for (MountedNodeStore mountedNodeStore : ctx.getAllMountedNodeStores()) {\n             NodeStore nodeStore = mountedNodeStore.getNodeStore();\n-            NodeBuilder partialBuilder = nodeBuilder.getBuilders().get(mountedNodeStore);\n+            NodeBuilder partialBuilder = nodeBuilder.getNodeBuilder(mountedNodeStore);\n             NodeState result = nodeStore.reset(partialBuilder);\n             resultStates.put(mountedNodeStore, result);\n         }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/958223cabe378fac83a77fca359748ec3bd9dc3a/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeStore.java",
                "sha": "e8d2b2c3c0b8d7124c81fc0052fb3da45553862e",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/958223cabe378fac83a77fca359748ec3bd9dc3a/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositionContext.java",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositionContext.java?ref=958223cabe378fac83a77fca359748ec3bd9dc3a",
                "deletions": 52,
                "filename": "oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositionContext.java",
                "patch": "@@ -16,11 +16,7 @@\n  */\n package org.apache.jackrabbit.oak.composite;\n \n-import com.google.common.base.Function;\n-import com.google.common.base.Predicate;\n-import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n-import com.google.common.collect.Iterables;\n import org.apache.jackrabbit.oak.api.Blob;\n import org.apache.jackrabbit.oak.commons.PathUtils;\n import org.apache.jackrabbit.oak.spi.mount.Mount;\n@@ -35,13 +31,11 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n \n-import static com.google.common.collect.ImmutableMap.copyOf;\n-import static com.google.common.collect.Iterables.concat;\n-import static com.google.common.collect.Iterables.tryFind;\n import static com.google.common.collect.Lists.newArrayList;\n-import static com.google.common.collect.Maps.uniqueIndex;\n-import static java.util.Collections.singleton;\n import static java.util.Collections.singletonList;\n \n class CompositionContext {\n@@ -66,12 +60,7 @@\n         b.addAll(this.nonDefaultStores);\n         allStores = b.build();\n \n-        this.nodeStoresByMount = copyOf(uniqueIndex(allStores, new Function<MountedNodeStore, Mount>() {\n-            @Override\n-            public Mount apply(MountedNodeStore input) {\n-                return input.getMount();\n-            }\n-        }));\n+        this.nodeStoresByMount = allStores.stream().collect(Collectors.toMap(MountedNodeStore::getMount, Function.identity()));\n \n     }\n \n@@ -92,31 +81,18 @@ MountedNodeStore getOwningStore(String path) {\n         }\n     }\n \n-    List<MountedNodeStore> getContributingStoresForNodes(String path, final Map<MountedNodeStore, NodeState> nodeStates) {\n-        return getContributingStores(path, new Function<MountedNodeStore, Iterable<String>>() {\n-            @Override\n-            public Iterable<String> apply(MountedNodeStore input) {\n-                return nodeStates.get(input).getChildNodeNames();\n-            }\n-        });\n+    List<MountedNodeStore> getContributingStoresForNodes(String path, final Function<MountedNodeStore, NodeState> nodeStates) {\n+        return getContributingStores(path, mns -> nodeStates.apply(mns).getChildNodeNames());\n     }\n \n-    List<MountedNodeStore> getContributingStoresForBuilders(String path, final Map<MountedNodeStore, NodeBuilder> nodeBuilders) {\n-        return getContributingStores(path, new Function<MountedNodeStore, Iterable<String>>() {\n-            @Override\n-            public Iterable<String> apply(MountedNodeStore input) {\n-                return nodeBuilders.get(input).getChildNodeNames();\n-            }\n-        });\n+    List<MountedNodeStore> getContributingStoresForBuilders(String path, final Function<MountedNodeStore, NodeBuilder> nodeBuilders) {\n+        return getContributingStores(path, mns -> nodeBuilders.apply(mns).getChildNodeNames());\n     }\n \n     boolean shouldBeComposite(final String path) {\n-        if (Iterables.tryFind(nonDefaultStores, new Predicate<MountedNodeStore>() {\n-            @Override\n-            public boolean apply(MountedNodeStore input) {\n-                return input.getMount().isSupportFragment(path);\n-            }\n-        }).isPresent()) {\n+        if (nonDefaultStores.stream()\n+                .map(MountedNodeStore::getMount)\n+                .anyMatch(m -> m.isSupportFragment(path))) {\n             return true;\n         }\n         return !mip.getMountsPlacedUnder(path).isEmpty();\n@@ -156,12 +132,9 @@ private boolean hasChildrenContainingPathFragmentName(MountedNodeStore mns, Stri\n         if (!mount.isSupportFragment(parentPath)) {\n             return false;\n         }\n-        return tryFind(childrenProvider.apply(mns), new Predicate<String>() {\n-            @Override\n-            public boolean apply(String input) {\n-                return input.contains(mount.getPathFragmentName());\n-            }\n-        }).isPresent();\n+\n+        return StreamSupport.stream(childrenProvider.apply(mns).spliterator(), false)\n+                .anyMatch(i -> i.contains(mount.getPathFragmentName()));\n     }\n \n     Set<MountedNodeStore> getAllMountedNodeStores() {\n@@ -172,17 +145,8 @@ Blob createBlob(InputStream inputStream) throws IOException {\n         return globalStore.getNodeStore().createBlob(inputStream);\n     }\n \n-    int getStoresCount() {\n-        return nonDefaultStores.size() + 1;\n-    }\n-\n-    Predicate<String> belongsToStore(final MountedNodeStore mountedNodeStore, final String parentPath) {\n-        return new Predicate<String>() {\n-            @Override\n-            public boolean apply(String childName) {\n-                return getOwningStore(PathUtils.concat(parentPath, childName)) == mountedNodeStore;\n-            }\n-        };\n+    boolean belongsToStore(final MountedNodeStore mountedNodeStore, final String parentPath, final String childName) {\n+        return getOwningStore(PathUtils.concat(parentPath, childName)) == mountedNodeStore;\n     }\n \n     CompositeNodeState createRootNodeState(Map<MountedNodeStore, NodeState> rootStates) {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/958223cabe378fac83a77fca359748ec3bd9dc3a/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositionContext.java",
                "sha": "46ee4c268b39c51853de7aaea2c8bde195c55234",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/79a66bca4c6ca6afc91c03b6b690f7ca454b5004/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CopyOnReadIdentityMap.java",
                "changes": 191,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CopyOnReadIdentityMap.java?ref=79a66bca4c6ca6afc91c03b6b690f7ca454b5004",
                "deletions": 191,
                "filename": "oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CopyOnReadIdentityMap.java",
                "patch": "@@ -1,191 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.jackrabbit.oak.composite;\n-\n-import com.google.common.base.Function;\n-\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.IdentityHashMap;\n-import java.util.Map;\n-import java.util.Set;\n-\n-/**\n- * This map wraps around the passed argument and caches all the returned values.\n- * It is meant to be wrapped around the result of\n- * {@link com.google.common.collect.Maps#transformValues(Map, Function)} method\n- * or its variant. This allows to preserve the laziness of map transformation and\n- * at the same time to avoid re-calculating the same values.\n- * <br>\n- * It's immutable and used IdentityHashMap for caching values.\n- *\n- * @param <K> - the type of keys maintained by this map\n- * @param <V> - the type of mapped values\n- */\n-class CopyOnReadIdentityMap<K, V> implements Map<K, V> {\n-\n-    private final Map<K, V> map;\n-\n-    private Integer cachedSize;\n-\n-    private Boolean cachedIsEmpty;\n-\n-    private Map<K, V> cachedValues;\n-\n-    private boolean allValuesCached;\n-\n-    public CopyOnReadIdentityMap(Map<K, V> wrappedMap) {\n-        this.map = wrappedMap;\n-    }\n-\n-    @Override\n-    public int size() {\n-        if (allValuesCached) {\n-            return cachedValues.size();\n-        }\n-        if (cachedSize == null) {\n-            cachedSize = map.size();\n-        }\n-        return cachedSize;\n-    }\n-\n-    @Override\n-    public boolean isEmpty() {\n-        if (allValuesCached) {\n-            return cachedValues.isEmpty();\n-        }\n-        if (cachedIsEmpty == null) {\n-            if (cachedSize == null) {\n-                cachedIsEmpty = map.isEmpty();\n-            } else {\n-                cachedIsEmpty = cachedSize > 0;\n-            }\n-        }\n-        return cachedIsEmpty;\n-    }\n-\n-    @Override\n-    public boolean containsKey(Object key) {\n-        if (allValuesCached) {\n-            return cachedValues.containsKey(key);\n-        }\n-        if (cachedValues != null && cachedValues.containsKey(key)) {\n-            return true;\n-        } else {\n-            return map.containsKey(key);\n-        }\n-    }\n-\n-    @Override\n-    public boolean containsValue(Object value) {\n-        if (allValuesCached) {\n-            return cachedValues.containsValue(value);\n-        }\n-        for (K k : keySet()) {\n-            V v = get(k);\n-            if (value == null && v == null) {\n-                return true;\n-            } else if (value != null && value.equals(v)) {\n-                return true;\n-            }\n-        }\n-        if (cachedValues == null) {\n-            cachedValues = Collections.emptyMap();\n-        }\n-        allValuesCached = true;\n-        return false;\n-    }\n-\n-    @Override\n-    public V get(Object key) {\n-        if (allValuesCached) {\n-            return cachedValues.get(key);\n-        }\n-        if (cachedValues != null && cachedValues.containsKey(key)) {\n-            return cachedValues.get(key);\n-        } else if (map.containsKey(key)) {\n-            initCachedValues();\n-            V v = map.get(key);\n-            cachedValues.put((K) key, v);\n-            return v;\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    @Override\n-    public V put(K key, V value) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public V remove(Object key) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public void putAll(Map<? extends K, ? extends V> m) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public void clear() {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public Set<K> keySet() {\n-        return map.keySet();\n-    }\n-\n-    @Override\n-    public Collection<V> values() {\n-        readAll();\n-        return cachedValues.values();\n-    }\n-\n-    @Override\n-    public Set<Entry<K, V>> entrySet() {\n-        readAll();\n-        return cachedValues.entrySet();\n-    }\n-\n-    private void readAll() {\n-        if (allValuesCached) {\n-            return;\n-        }\n-        initCachedValues();\n-        for (Entry<K, V> e : map.entrySet()) {\n-            if (!cachedValues.containsKey(e.getKey())) {\n-                cachedValues.put(e.getKey(), e.getValue());\n-            }\n-        }\n-        allValuesCached = true;\n-    }\n-\n-    private void initCachedValues() {\n-        if (cachedValues == null) {\n-            cachedValues = new IdentityHashMap<>(map.size());\n-        }\n-    }\n-\n-    @Override\n-    public String toString() {\n-        readAll();\n-        return cachedValues.toString();\n-    }\n-}",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/79a66bca4c6ca6afc91c03b6b690f7ca454b5004/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CopyOnReadIdentityMap.java",
                "sha": "fdf7ff5f7d916e4e94d2650bd48e524fcc745ed2",
                "status": "removed"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/958223cabe378fac83a77fca359748ec3bd9dc3a/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/util/Memoizer.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/util/Memoizer.java?ref=958223cabe378fac83a77fca359748ec3bd9dc3a",
                "deletions": 0,
                "filename": "oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/util/Memoizer.java",
                "patch": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.oak.composite.util;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Function;\n+\n+public final class Memoizer {\n+\n+    private Memoizer() {\n+\n+    }\n+\n+    public static <I, O> Function<I, O> memoize(Function<I, O> f) {\n+        ConcurrentMap<I, O> lookup = new ConcurrentHashMap<>();\n+        return input -> lookup.computeIfAbsent(input, f);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/958223cabe378fac83a77fca359748ec3bd9dc3a/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/util/Memoizer.java",
                "sha": "5cc902692fcfd4eb48fb6813f60b7e420cc59e11",
                "status": "added"
            }
        ],
        "message": "OAK-6486: NPE in CompositeNodeStore\n\nReplaced the CopyOnReadIdentityMap with a Function<MountedNodeStore, NodeState>\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1803029 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/79a66bca4c6ca6afc91c03b6b690f7ca454b5004",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "CompositeNodeStoreTest.java",
            "CompositionContextTest.java"
        ]
    },
    "jackrabbit-oak_a077b2e": {
        "bug_id": "jackrabbit-oak_a077b2e",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/a077b2e1d2ed47122b41791460866d1e9605827b",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/a077b2e1d2ed47122b41791460866d1e9605827b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/user/LoginModuleImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/user/LoginModuleImpl.java?ref=a077b2e1d2ed47122b41791460866d1e9605827b",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/user/LoginModuleImpl.java",
                "patch": "@@ -167,7 +167,9 @@ public boolean commit() {\n                 } else if (userId != null) {\n                     principals.addAll(getPrincipals(userId));\n                 }\n-                subject.getPublicCredentials().add(credentials);\n+                if (credentials != null) {\n+                    subject.getPublicCredentials().add(credentials);\n+                }\n                 setAuthInfo(createAuthInfo(principals), subject);\n             } else {\n                 log.debug(\"Could not add information to read only subject {}\", subject);\n@@ -229,6 +231,7 @@ private String getLoginId(@Nullable PreAuthenticatedLogin preAuthenticatedLogin)\n         return uid;\n     }\n \n+    @Nullable\n     private String getAnonymousId() {\n         SecurityProvider sp = getSecurityProvider();\n         if (sp == null) {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/a077b2e1d2ed47122b41791460866d1e9605827b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/user/LoginModuleImpl.java",
                "sha": "73d25074538fc9a078b69f8a0a48021fa22e14bd",
                "status": "modified"
            },
            {
                "additions": 270,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/a077b2e1d2ed47122b41791460866d1e9605827b/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authentication/user/LoginModuleImplTest.java",
                "changes": 457,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authentication/user/LoginModuleImplTest.java?ref=a077b2e1d2ed47122b41791460866d1e9605827b",
                "deletions": 187,
                "filename": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authentication/user/LoginModuleImplTest.java",
                "patch": "@@ -16,20 +16,6 @@\n  */\n package org.apache.jackrabbit.oak.security.authentication.user;\n \n-import java.io.IOException;\n-import java.security.Principal;\n-import java.util.Arrays;\n-import javax.jcr.Credentials;\n-import javax.jcr.GuestCredentials;\n-import javax.jcr.RepositoryException;\n-import javax.jcr.SimpleCredentials;\n-import javax.security.auth.Subject;\n-import javax.security.auth.callback.Callback;\n-import javax.security.auth.callback.CallbackHandler;\n-import javax.security.auth.callback.UnsupportedCallbackException;\n-import javax.security.auth.login.Configuration;\n-import javax.security.auth.login.LoginException;\n-\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n@@ -44,9 +30,11 @@\n import org.apache.jackrabbit.oak.security.internal.SecurityProviderBuilder;\n import org.apache.jackrabbit.oak.spi.security.ConfigurationParameters;\n import org.apache.jackrabbit.oak.spi.security.SecurityProvider;\n+import org.apache.jackrabbit.oak.spi.security.authentication.AuthInfoImpl;\n import org.apache.jackrabbit.oak.spi.security.authentication.Authentication;\n import org.apache.jackrabbit.oak.spi.security.authentication.ConfigurationUtil;\n import org.apache.jackrabbit.oak.spi.security.authentication.ImpersonationCredentials;\n+import org.apache.jackrabbit.oak.spi.security.authentication.PreAuthenticatedLogin;\n import org.apache.jackrabbit.oak.spi.security.authentication.callback.RepositoryCallback;\n import org.apache.jackrabbit.oak.spi.security.user.UserAuthenticationFactory;\n import org.apache.jackrabbit.oak.spi.security.user.UserConfiguration;\n@@ -55,13 +43,33 @@\n import org.jetbrains.annotations.NotNull;\n import org.jetbrains.annotations.Nullable;\n import org.junit.Test;\n-import org.mockito.Mockito;\n \n+import javax.jcr.Credentials;\n+import javax.jcr.GuestCredentials;\n+import javax.jcr.RepositoryException;\n+import javax.jcr.SimpleCredentials;\n+import javax.security.auth.Subject;\n+import javax.security.auth.callback.Callback;\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.auth.callback.UnsupportedCallbackException;\n+import javax.security.auth.login.Configuration;\n+import javax.security.auth.login.LoginException;\n+import java.security.Principal;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.apache.jackrabbit.oak.spi.security.authentication.AbstractLoginModule.SHARED_KEY_PRE_AUTH_LOGIN;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n public class LoginModuleImplTest extends AbstractSecurityTest {\n \n@@ -83,27 +91,18 @@ protected Configuration getConfiguration() {\n         return ConfigurationUtil.getDefaultConfiguration(ConfigurationParameters.EMPTY);\n     }\n \n-    private User createTestUser() throws RepositoryException, CommitFailedException {\n+    private void createTestUser() throws RepositoryException, CommitFailedException {\n         if (user == null) {\n             UserManager userManager = getUserManager(root);\n             user = userManager.createUser(USER_ID, USER_PW);\n             root.commit();\n         }\n-        return user;\n     }\n \n-    @Test\n+    @Test(expected = LoginException.class)\n     public void testNullLogin() throws Exception {\n-        ContentSession cs = null;\n-        try {\n-            cs = login(null);\n+        try (ContentSession cs = login(null)) {\n             fail(\"Null login should fail\");\n-        } catch (LoginException e) {\n-            // success\n-        } finally {\n-            if (cs != null) {\n-                cs.close();\n-            }\n         }\n     }\n \n@@ -116,7 +115,7 @@ public void testGuestLogin() throws Exception {\n         }\n     }\n \n-    @Test\n+    @Test(expected = LoginException.class)\n     public void testAnonymousLogin() throws Exception {\n         String anonymousID = UserUtil.getAnonymousId(getUserConfiguration().getParameters());\n \n@@ -127,268 +126,353 @@ public void testAnonymousLogin() throws Exception {\n         assertNotNull(anonymous);\n         assertFalse(root.getTree(anonymous.getPath()).hasProperty(UserConstants.REP_PASSWORD));\n \n-        ContentSession cs = null;\n-        try {\n-            cs = login(new SimpleCredentials(anonymousID, new char[0]));\n+        try (ContentSession cs = login(new SimpleCredentials(anonymousID, new char[0]))) {\n             fail(\"Login with anonymousID should fail since the initial setup doesn't provide a password.\");\n-        } catch (LoginException e) {\n-            // success\n-        } finally {\n-            if (cs != null) {\n-                cs.close();\n-            }\n         }\n     }\n \n     @Test\n     public void testUserLogin() throws Exception {\n-        ContentSession cs = null;\n-        try {\n-            createTestUser();\n-\n-            cs = login(new SimpleCredentials(USER_ID, USER_PW.toCharArray()));\n+        createTestUser();\n+        try (ContentSession cs = login(new SimpleCredentials(USER_ID, USER_PW.toCharArray()))) {\n             AuthInfo authInfo = cs.getAuthInfo();\n             assertEquals(USER_ID, authInfo.getUserID());\n-        } finally {\n-            if (cs != null) {\n-                cs.close();\n-            }\n         }\n     }\n \n     @Test\n     public void testAuthInfoContainsUserId() throws Exception {\n-        ContentSession cs = null;\n-        try {\n-            createTestUser();\n-\n-            cs = login(new SimpleCredentials(USER_ID_CASED, USER_PW.toCharArray()));\n+        createTestUser();\n+        try (ContentSession cs = login(new SimpleCredentials(USER_ID_CASED, USER_PW.toCharArray()))) {\n             AuthInfo authInfo = cs.getAuthInfo();\n             assertEquals(user.getID(), authInfo.getUserID());\n-        } finally {\n-            if (cs != null) {\n-                cs.close();\n-            }\n         }\n     }\n \n     @Test\n     public void testUserLoginIsCaseInsensitive() throws Exception {\n-        ContentSession cs = null;\n-        try {\n-            createTestUser();\n-\n-            cs = login(new SimpleCredentials(USER_ID_CASED, USER_PW.toCharArray()));\n+        createTestUser();\n+        try (ContentSession cs = login(new SimpleCredentials(USER_ID_CASED, USER_PW.toCharArray()))) {\n             AuthInfo authInfo = cs.getAuthInfo();\n             UserManager userMgr = getUserManager(root);\n             Authorizable auth = userMgr.getAuthorizable(authInfo.getUserID());\n             assertNotNull(auth);\n             assertTrue(auth.getID().equalsIgnoreCase(USER_ID_CASED));\n-        } finally {\n-            if (cs != null) {\n-                cs.close();\n-            }\n         }\n     }\n \n     @Test\n     public void testUserLoginIsCaseInsensitive2() throws Exception {\n-        ContentSession cs = null;\n-        try {\n-            createTestUser();\n-            cs = login(new SimpleCredentials(USER_ID_CASED, USER_PW.toCharArray()));\n+        createTestUser();\n+        try (ContentSession cs = login(new SimpleCredentials(USER_ID_CASED, USER_PW.toCharArray()))) {\n             AuthInfo authInfo = cs.getAuthInfo();\n             assertEquals(user.getID(), authInfo.getUserID());\n             assertTrue(USER_ID_CASED.equalsIgnoreCase(authInfo.getUserID()));\n-        } finally {\n-            if (cs != null) {\n-                cs.close();\n-            }\n         }\n     }\n \n-    @Test\n+    @Test(expected = LoginException.class)\n     public void testUnknownUserLogin() throws Exception {\n-        ContentSession cs = null;\n-        try {\n-            cs = login(new SimpleCredentials(\"unknown\", \"\".toCharArray()));\n+        try (ContentSession cs = login(new SimpleCredentials(\"unknown\", \"\".toCharArray()))) {\n             fail(\"Unknown user must not be able to login\");\n-        } catch (LoginException e) {\n-            // success\n-        } finally {\n-            if (cs != null) {\n-                cs.close();\n-            }\n         }\n     }\n \n     @Test\n     public void testSelfImpersonation() throws Exception {\n-        ContentSession cs = null;\n-        try {\n-            createTestUser();\n-\n-            SimpleCredentials sc = new SimpleCredentials(USER_ID, USER_PW.toCharArray());\n-            cs = login(sc);\n-\n-            AuthInfo authInfo = cs.getAuthInfo();\n+        createTestUser();\n+        AuthInfo authInfo;\n+        try (ContentSession cs = login(new SimpleCredentials(USER_ID, USER_PW.toCharArray()))) {\n+            authInfo = cs.getAuthInfo();\n             assertEquals(USER_ID, authInfo.getUserID());\n+        }\n \n-            cs.close();\n-\n-            sc = new SimpleCredentials(USER_ID, new char[0]);\n-            ImpersonationCredentials ic = new ImpersonationCredentials(sc, authInfo);\n-            cs = login(ic);\n-\n+        SimpleCredentials sc = new SimpleCredentials(USER_ID, new char[0]);\n+        ImpersonationCredentials ic = new ImpersonationCredentials(sc, authInfo);\n+        try (ContentSession cs = login(ic)) {\n             authInfo = cs.getAuthInfo();\n             assertEquals(USER_ID, authInfo.getUserID());\n-        } finally {\n-            if (cs != null) {\n-                cs.close();\n-            }\n         }\n     }\n \n-    @Test\n+    @Test(expected = LoginException.class)\n     public void testInvalidImpersonation() throws Exception {\n-        ContentSession cs = null;\n-        try {\n-            createTestUser();\n+        createTestUser();\n+        AuthInfo authInfo;\n+        try (ContentSession cs = login(new SimpleCredentials(USER_ID, USER_PW.toCharArray()))) {\n+            authInfo = cs.getAuthInfo();\n+            assertEquals(USER_ID, authInfo.getUserID());\n+        }\n \n-            SimpleCredentials sc = new SimpleCredentials(USER_ID, USER_PW.toCharArray());\n-            cs = login(sc);\n+        ConfigurationParameters config = securityProvider.getConfiguration(UserConfiguration.class).getParameters();\n+        String adminId = UserUtil.getAdminId(config);\n+        SimpleCredentials sc = new SimpleCredentials(adminId, new char[0]);\n+        ImpersonationCredentials ic = new ImpersonationCredentials(sc, authInfo);\n+        // test-user should not be allowed to impersonate admin -> exception expected\n+        try (ContentSession cs = login(ic)) {\n+            fail(\"User 'test' should not be allowed to impersonate \" + adminId);\n+        }\n+    }\n \n+    @Test\n+    public void testLoginWithAttributes( ) throws Exception {\n+        createTestUser();\n+        SimpleCredentials sc = new SimpleCredentials(USER_ID, USER_PW.toCharArray());\n+        sc.setAttribute(\"attr\", \"value\");\n+        try (ContentSession cs = login(sc)){\n             AuthInfo authInfo = cs.getAuthInfo();\n-            assertEquals(USER_ID, authInfo.getUserID());\n+            assertTrue(Arrays.asList(authInfo.getAttributeNames()).contains(\"attr\"));\n+            assertEquals(\"value\", authInfo.getAttribute(\"attr\"));\n+        }\n+    }\n \n-            cs.close();\n-            cs = null;\n+    @Test\n+    public void testImpersonationWithAttributes() throws Exception {\n+        createTestUser();\n+        AuthInfo authInfo;\n+        try (ContentSession cs = login(new SimpleCredentials(USER_ID, USER_PW.toCharArray()))) {\n+            authInfo = cs.getAuthInfo();\n+        }\n \n-            ConfigurationParameters config = securityProvider.getConfiguration(UserConfiguration.class).getParameters();\n-            String adminId = UserUtil.getAdminId(config);\n-            sc = new SimpleCredentials(adminId, new char[0]);\n-            ImpersonationCredentials ic = new ImpersonationCredentials(sc, authInfo);\n+        SimpleCredentials sc = new SimpleCredentials(USER_ID, new char[0]);\n+        sc.setAttribute(\"attr\", \"value\");\n+        ImpersonationCredentials ic = new ImpersonationCredentials(sc, authInfo);\n+        try (ContentSession cs = login(ic)) {\n+            authInfo = cs.getAuthInfo();\n+            assertTrue(Arrays.asList(authInfo.getAttributeNames()).contains(\"attr\"));\n+            assertEquals(\"value\", authInfo.getAttribute(\"attr\"));\n+        }\n+    }\n \n-            try {\n-                cs = login(ic);\n-                fail(\"User 'test' should not be allowed to impersonate \" + adminId);\n-            } catch (LoginException e) {\n-                // success\n-            }\n-        } finally {\n-            if (cs != null) {\n-                cs.close();\n-            }\n+    @Test(expected = LoginException.class)\n+    public void testImpersonationWithUnsupportedBaseCredentials() throws Exception {\n+        Credentials baseCredentials = mock(Credentials.class);\n+        ImpersonationCredentials ic = new ImpersonationCredentials(baseCredentials, new AuthInfoImpl(USER_ID, null, null));\n+        try (ContentSession cs = login(ic)) {\n+            fail(\"Base credentials of ImpersonationCredentials can only be SimpleCredentials.\");\n         }\n     }\n \n     @Test\n-    public void testLoginWithAttributes( ) throws Exception {\n-        ContentSession cs = null;\n-        try {\n-            createTestUser();\n+    public void testLoginPreAuthenticated() throws Exception {\n+        Authentication authentication = mock(Authentication.class);\n+        when(authentication.authenticate(any(Credentials.class))).thenReturn(true).getMock();\n+        when(authentication.getUserId()).thenReturn(\"uid\"); // but getUserPrincipal returns null\n+\n+        UserAuthenticationFactory uaf = when(mock(UserAuthenticationFactory.class).getAuthentication(any(UserConfiguration.class), any(Root.class), anyString())).thenReturn(authentication).getMock();\n+        Map<String, Object> sharedState = Maps.newHashMap();\n+        sharedState.put(SHARED_KEY_PRE_AUTH_LOGIN, new PreAuthenticatedLogin(\"uid\"));\n+\n+        Subject subject = new Subject();\n+        LoginModuleImpl lm = new LoginModuleImpl();\n+        lm.initialize(subject, new TestCallbackHandler(uaf), sharedState, Maps.newHashMap());\n+        assertTrue(lm.login());\n+        assertTrue(lm.commit());\n+\n+        assertTrue(subject.getPrincipals().isEmpty());\n+        // no other public credentials than the AuthInfo\n+        assertEquals(1, subject.getPublicCredentials().size());\n+        // verify AuthInfo\n+        Set<AuthInfo> authInfos = subject.getPublicCredentials(AuthInfo.class);\n+        assertFalse(authInfos.isEmpty());\n+        assertEquals(\"uid\", authInfos.iterator().next().getUserID());\n+    }\n \n-            SimpleCredentials sc = new SimpleCredentials(USER_ID, USER_PW.toCharArray());\n-            sc.setAttribute(\"attr\", \"value\");\n+    @Test\n+    public void testLoginPreAuthenticatedWithReadOnlySubject() throws Exception {\n+        Authentication authentication = when(mock(Authentication.class).authenticate(any(Credentials.class))).thenReturn(true).getMock();\n+        UserAuthenticationFactory uaf = when(mock(UserAuthenticationFactory.class).getAuthentication(any(UserConfiguration.class), any(Root.class), anyString())).thenReturn(authentication).getMock();\n+\n+        Map<String, Object> sharedState = Maps.newHashMap();\n+        sharedState.put(SHARED_KEY_PRE_AUTH_LOGIN, new PreAuthenticatedLogin(\"uid\"));\n+\n+        Subject subject = new Subject();\n+        subject.setReadOnly();\n+        LoginModuleImpl lm = new LoginModuleImpl();\n+        lm.initialize(subject, new TestCallbackHandler(uaf), sharedState, Maps.newHashMap());\n+        assertTrue(lm.login());\n+        assertTrue(lm.commit());\n+\n+        assertTrue(subject.getPrincipals().isEmpty());\n+        assertTrue(subject.getPublicCredentials().isEmpty());\n+    }\n \n-            cs = login(sc);\n+    @Test\n+    public void testNullUserAuthentication() throws Exception {\n+        LoginModuleImpl loginModule = new LoginModuleImpl();\n+        CallbackHandler cbh = new TestCallbackHandler(mock(UserAuthenticationFactory.class));\n+        loginModule.initialize(new Subject(), cbh, Maps.newHashMap(), Maps.newHashMap());\n \n-            AuthInfo authInfo = cs.getAuthInfo();\n-            assertTrue(Arrays.asList(authInfo.getAttributeNames()).contains(\"attr\"));\n-            assertEquals(\"value\", authInfo.getAttribute(\"attr\"));\n+        assertFalse(loginModule.login());\n+        assertFalse(loginModule.commit());\n+    }\n \n-            cs.close();\n-        } finally {\n-            if (cs != null) {\n-                cs.close();\n+    @Test\n+    public void testMissingUserAuthenticationFactory() throws Exception {\n+        CallbackHandler cbh = callbacks -> {\n+            for (Callback callback : callbacks) {\n+                if (callback instanceof RepositoryCallback) {\n+                    UserConfiguration uc = when(mock(UserConfiguration.class).getParameters()).thenReturn(ConfigurationParameters.EMPTY).getMock();\n+                    SecurityProvider sp = when(mock(SecurityProvider.class).getConfiguration(UserConfiguration.class)).thenReturn(uc).getMock();\n+                    ((RepositoryCallback) callback).setSecurityProvider(sp);\n+                    ((RepositoryCallback) callback).setContentRepository(getContentRepository());\n+                } else {\n+                    throw new UnsupportedCallbackException(callback);\n+                }\n             }\n-        }\n+        };\n+\n+        LoginModuleImpl loginModule = new LoginModuleImpl();\n+        loginModule.initialize(new Subject(), cbh, Maps.newHashMap(), Maps.newHashMap());\n+\n+        assertFalse(loginModule.login());\n+        assertFalse(loginModule.commit());\n     }\n \n     @Test\n-    public void testImpersonationWithAttributes() throws Exception {\n-        ContentSession cs = null;\n-        try {\n-            createTestUser();\n+    public void testMissingSecurityProviderGuestLogin() throws Exception {\n+        CallbackHandler cbh = callbacks -> {\n+            for (Callback callback : callbacks) {\n+                if (callback instanceof RepositoryCallback) {\n+                    ((RepositoryCallback) callback).setSecurityProvider(null);\n+                    ((RepositoryCallback) callback).setContentRepository(getContentRepository());\n+                } else {\n+                    throw new UnsupportedCallbackException(callback);\n+                }\n+            }\n+        };\n \n-            SimpleCredentials sc = new SimpleCredentials(USER_ID, USER_PW.toCharArray());\n-            cs = login(sc);\n-            AuthInfo authInfo = cs.getAuthInfo();\n-            cs.close();\n-            cs = null;\n+        LoginModuleImpl loginModule = new LoginModuleImpl();\n+        loginModule.initialize(new Subject(false, ImmutableSet.of(), ImmutableSet.of(new GuestCredentials()), ImmutableSet.of()), cbh, Maps.newHashMap(), Maps.newHashMap());\n \n-            sc = new SimpleCredentials(USER_ID, new char[0]);\n-            sc.setAttribute(\"attr\", \"value\");\n-            ImpersonationCredentials ic = new ImpersonationCredentials(sc, authInfo);\n-            cs = login(ic);\n+        assertFalse(loginModule.login());\n+        assertFalse(loginModule.commit());\n+    }\n \n-            authInfo = cs.getAuthInfo();\n-            assertTrue(Arrays.asList(authInfo.getAttributeNames()).contains(\"attr\"));\n-            assertEquals(\"value\", authInfo.getAttribute(\"attr\"));\n-        } finally {\n-            if (cs != null) {\n-                cs.close();\n+    @Test\n+    public void testMissingSecurityProvider() throws Exception {\n+        CallbackHandler cbh = callbacks -> {\n+            for (Callback callback : callbacks) {\n+                if (callback instanceof RepositoryCallback) {\n+                    ((RepositoryCallback) callback).setSecurityProvider(null);\n+                    ((RepositoryCallback) callback).setContentRepository(getContentRepository());\n+                } else {\n+                    throw new UnsupportedCallbackException(callback);\n+                }\n             }\n-        }\n+        };\n+\n+        LoginModuleImpl loginModule = new LoginModuleImpl();\n+        loginModule.initialize(new Subject(), cbh, Maps.newHashMap(), Maps.newHashMap());\n+\n+        assertFalse(loginModule.login());\n+        assertFalse(loginModule.commit());\n     }\n \n     @Test\n-    public void testGetNullUserAuthentication() throws Exception {\n+    public void testMissingRoot() throws Exception {\n+        CallbackHandler cbh = callbacks -> {\n+            for (Callback callback : callbacks) {\n+                if (callback instanceof RepositoryCallback) {\n+                    ((RepositoryCallback) callback).setSecurityProvider(getSecurityProvider());\n+                    ((RepositoryCallback) callback).setContentRepository(null);\n+                } else {\n+                    throw new UnsupportedCallbackException(callback);\n+                }\n+            }\n+        };\n+\n         LoginModuleImpl loginModule = new LoginModuleImpl();\n-        CallbackHandler cbh = new TestCallbackHandler(Mockito.mock(UserAuthenticationFactory.class));\n-        loginModule.initialize(new Subject(), cbh, Maps.<String, Object>newHashMap(), Maps.<String, Object>newHashMap());\n+        loginModule.initialize(new Subject(), cbh, Maps.newHashMap(), Maps.newHashMap());\n \n         assertFalse(loginModule.login());\n         assertFalse(loginModule.commit());\n     }\n \n     @Test\n-    public void testCustomUserAuthentication() throws Exception {\n+    public void testMissingCallbackHandler() throws Exception {\n         LoginModuleImpl loginModule = new LoginModuleImpl();\n+        loginModule.initialize(new Subject(), null, Maps.newHashMap(), Maps.newHashMap());\n+\n+        assertFalse(loginModule.login());\n+        assertFalse(loginModule.commit());\n+    }\n+\n+    @Test\n+    public void testLoginCustomUserAuthenticationFactory() throws Exception {\n+        UserAuthenticationFactory factory = (configuration, root, userId) -> new Authentication() {\n+            @Override\n+            public boolean authenticate(@Nullable Credentials credentials) {\n+                return true;\n+            }\n \n-        UserAuthenticationFactory factory = new UserAuthenticationFactory() {\n             @Nullable\n             @Override\n-            public Authentication getAuthentication(@NotNull UserConfiguration configuration, @NotNull Root root, @Nullable String userId) {\n-                return new Authentication() {\n-                    @Override\n-                    public boolean authenticate(@Nullable Credentials credentials) throws LoginException {\n-                        return true;\n-                    }\n-\n-                    @Nullable\n-                    @Override\n-                    public String getUserId() {\n-                        return null;\n-                    }\n-\n-                    @Nullable\n-                    @Override\n-                    public Principal getUserPrincipal() {\n-                        return null;\n-                    }\n-                };\n+            public String getUserId() {\n+                return null;\n+            }\n+\n+            @Nullable\n+            @Override\n+            public Principal getUserPrincipal() {\n+                return null;\n             }\n         };\n \n         CallbackHandler cbh = new TestCallbackHandler(factory);\n         SimpleCredentials creds = new SimpleCredentials(\"loginId\", new char[0]);\n-        Subject subject = new Subject(false, Sets.<Principal>newHashSet(), ImmutableSet.of(creds), Sets.newHashSet());\n+        Subject subject = new Subject(false, Sets.newHashSet(), ImmutableSet.of(creds), Sets.newHashSet());\n \n-        loginModule.initialize(subject, cbh, Maps.<String, Object>newHashMap(), Maps.<String, Object>newHashMap());\n+        LoginModuleImpl loginModule = new LoginModuleImpl();\n+        loginModule.initialize(subject, cbh, Maps.newHashMap(), Maps.newHashMap());\n         assertTrue(loginModule.login());\n         assertTrue(loginModule.commit());\n \n+        // authinfo falls back to loginId because Authentication.getUserId returned null\n         AuthInfo authInfo = subject.getPublicCredentials(AuthInfo.class).iterator().next();\n         assertEquals(\"loginId\", authInfo.getUserID());\n     }\n \n+    @Test\n+    public void testMissingUserId() throws Exception {\n+        UserAuthenticationFactory factory = (configuration, root, userId) -> new Authentication() {\n+            @Override\n+            public boolean authenticate(@Nullable Credentials credentials) {\n+                return true;\n+            }\n+\n+            @Nullable\n+            @Override\n+            public String getUserId() {\n+                return null;\n+            }\n+\n+            @Nullable\n+            @Override\n+            public Principal getUserPrincipal() {\n+                return null;\n+            }\n+        };\n+\n+        CallbackHandler cbh = new TestCallbackHandler(factory);\n+        Subject subject = new Subject(false, Sets.newHashSet(), ImmutableSet.of(), Sets.newHashSet());\n+\n+        LoginModuleImpl loginModule = new LoginModuleImpl();\n+        loginModule.initialize(subject, cbh, Maps.newHashMap(), Maps.newHashMap());\n+        assertTrue(loginModule.login());\n+        assertTrue(loginModule.commit());\n+\n+        AuthInfo authInfo = subject.getPublicCredentials(AuthInfo.class).iterator().next();\n+        assertNull(authInfo.getUserID());\n+        assertTrue(subject.getPrincipals().isEmpty());\n+    }\n+\n \n     private class TestCallbackHandler implements CallbackHandler {\n \n         private final SecurityProvider sp;\n \n-        private TestCallbackHandler(@Nullable UserAuthenticationFactory authenticationFactory) {\n+        private TestCallbackHandler(@NotNull UserAuthenticationFactory authenticationFactory) {\n             ConfigurationParameters params = ConfigurationParameters.of(\n                     UserConfiguration.NAME,\n                     ConfigurationParameters.of(\n@@ -397,7 +481,7 @@ private TestCallbackHandler(@Nullable UserAuthenticationFactory authenticationFa\n         }\n \n         @Override\n-        public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n+        public void handle(Callback[] callbacks) throws UnsupportedCallbackException {\n             for (Callback callback : callbacks) {\n                 if (callback instanceof RepositoryCallback) {\n                     ((RepositoryCallback) callback).setSecurityProvider(sp);\n@@ -408,5 +492,4 @@ public void handle(Callback[] callbacks) throws IOException, UnsupportedCallback\n             }\n         }\n     }\n-\n }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/a077b2e1d2ed47122b41791460866d1e9605827b/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authentication/user/LoginModuleImplTest.java",
                "sha": "3d316245fed627c1e3515b1f7fb9c16aca04f6dc",
                "status": "modified"
            }
        ],
        "message": "OAK-8229 : LoginModuleImpl.commit will end in NPE if credentials are null\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1857352 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/81fb633f4230495a862429f3636c01a8a0d420f7",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "LoginModuleImplTest.java"
        ]
    },
    "jackrabbit-oak_aadf67e": {
        "bug_id": "jackrabbit-oak_aadf67e",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/aadf67ebdcd35dbe55d20af84d6050c18ad391b7",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/aadf67ebdcd35dbe55d20af84d6050c18ad391b7/oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/DefaultSyncConfig.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/DefaultSyncConfig.java?ref=aadf67ebdcd35dbe55d20af84d6050c18ad391b7",
                "deletions": 2,
                "filename": "oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/DefaultSyncConfig.java",
                "patch": "@@ -118,7 +118,9 @@ public Authorizable setExpirationTime(long expirationTime) {\n         }\n \n         /**\n-         * Sets the auto membership\n+         * Sets the auto membership. Note that the passed group names will be trimmed\n+         * and empty string values will be ignored (along with {@code null} values).\n+         *\n          * @param autoMembership the membership\n          * @return {@code this}\n          * @see #getAutoMembership()\n@@ -127,7 +129,7 @@ public Authorizable setExpirationTime(long expirationTime) {\n         public Authorizable setAutoMembership(@Nonnull String ... autoMembership) {\n             this.autoMembership = new HashSet<String>();\n             for (String groupName: autoMembership) {\n-                if (!groupName.trim().isEmpty()) {\n+                if (groupName != null && !groupName.trim().isEmpty()) {\n                     this.autoMembership.add(groupName.trim());\n                 }\n             }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/aadf67ebdcd35dbe55d20af84d6050c18ad391b7/oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/DefaultSyncConfig.java",
                "sha": "ef81e68afb5948ae543f5a51363f53035010c717",
                "status": "modified"
            },
            {
                "additions": 130,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/aadf67ebdcd35dbe55d20af84d6050c18ad391b7/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/AbstractExternalAuthTest.java",
                "changes": 130,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/AbstractExternalAuthTest.java?ref=aadf67ebdcd35dbe55d20af84d6050c18ad391b7",
                "deletions": 0,
                "filename": "oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/AbstractExternalAuthTest.java",
                "patch": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.oak.spi.security.authentication.external;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import javax.jcr.RepositoryException;\n+\n+import com.google.common.base.Function;\n+import com.google.common.base.Predicates;\n+import com.google.common.collect.Iterators;\n+import com.google.common.collect.Sets;\n+import org.apache.jackrabbit.api.security.user.Authorizable;\n+import org.apache.jackrabbit.api.security.user.UserManager;\n+import org.apache.jackrabbit.oak.AbstractSecurityTest;\n+import org.apache.jackrabbit.oak.spi.security.authentication.external.basic.DefaultSyncConfig;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+/**\n+ * Abstract base test for external-authentication tests.\n+ */\n+public abstract class AbstractExternalAuthTest extends AbstractSecurityTest {\n+\n+    protected static final String USER_ID = TestIdentityProvider.ID_TEST_USER;\n+    protected static final String TEST_CONSTANT_PROPERTY_NAME = \"profile/constantProperty\";\n+    protected static final String TEST_CONSTANT_PROPERTY_VALUE = \"constant-value\";\n+\n+    protected ExternalIdentityProvider idp;\n+\n+    protected DefaultSyncConfig syncConfig;\n+\n+    private Set<String> ids;\n+\n+    @Before\n+    public void before() throws Exception {\n+        super.before();\n+\n+        getTestUser();\n+        ids = Sets.newHashSet(getAllAuthorizableIds(getUserManager(root)));\n+\n+        idp = createIDP();\n+        syncConfig = createSyncConfig();\n+    }\n+\n+    @After\n+    public void after() throws Exception {\n+        try {\n+            destroyIDP();\n+            idp = null;\n+\n+            // discard any pending changes\n+            root.refresh();\n+\n+            UserManager userManager = getUserManager(root);\n+            Iterator<String> iter = getAllAuthorizableIds(userManager);\n+            while (iter.hasNext()) {\n+                String id = iter.next();\n+                if (!ids.remove(id)) {\n+                    Authorizable a = userManager.getAuthorizable(id);\n+                    if (a != null) {\n+                        a.remove();\n+                    }\n+                }\n+            }\n+            root.commit();\n+        } finally {\n+            root.refresh();\n+            super.after();\n+        }\n+    }\n+\n+    private static Iterator<String> getAllAuthorizableIds(@Nonnull UserManager userManager) throws Exception {\n+        Iterator<Authorizable> iter = userManager.findAuthorizables(\"jcr:primaryType\", null);\n+        return Iterators.filter(Iterators.transform(iter, new Function<Authorizable, String>() {\n+            @Nullable\n+            @Override\n+            public String apply(Authorizable input) {\n+                try {\n+                    if (input != null) {\n+                        return input.getID();\n+                    }\n+                } catch (RepositoryException e) {\n+                    // failed to retrieve ID\n+                }\n+                return null;\n+            }\n+        }), Predicates.notNull());\n+    }\n+\n+\n+    protected ExternalIdentityProvider createIDP() {\n+        return new TestIdentityProvider();\n+    }\n+\n+    protected void destroyIDP() {\n+        // nothing to do\n+    }\n+\n+    protected DefaultSyncConfig createSyncConfig() {\n+        DefaultSyncConfig syncConfig = new DefaultSyncConfig();\n+        Map<String, String> mapping = new HashMap<String, String>();\n+        mapping.put(\"name\", \"name\");\n+        mapping.put(\"email\", \"email\");\n+        mapping.put(\"profile/name\", \"profile/name\");\n+        mapping.put(\"profile/age\", \"profile/age\");\n+        mapping.put(TEST_CONSTANT_PROPERTY_NAME, \"\\\"\" + TEST_CONSTANT_PROPERTY_VALUE + \"\\\"\");\n+        syncConfig.user().setPropertyMapping(mapping);\n+        syncConfig.user().setMembershipNestingDepth(1);\n+        return syncConfig;\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/aadf67ebdcd35dbe55d20af84d6050c18ad391b7/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/AbstractExternalAuthTest.java",
                "sha": "76fe3f9f6e7f47d4c961cf9de91e8cf201d300c0",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/aadf67ebdcd35dbe55d20af84d6050c18ad391b7/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/ExternalLoginModuleTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/ExternalLoginModuleTest.java?ref=aadf67ebdcd35dbe55d20af84d6050c18ad391b7",
                "deletions": 9,
                "filename": "oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/ExternalLoginModuleTest.java",
                "patch": "@@ -53,15 +53,6 @@ public void after() throws Exception {\n         super.after();\n     }\n \n-    protected ExternalIdentityProvider createIDP() {\n-        return new TestIdentityProvider();\n-    }\n-\n-    @Override\n-    protected void destroyIDP(ExternalIdentityProvider idp) {\n-    // ignore\n-    }\n-\n     @Test\n     public void testLoginFailed() throws Exception {\n         UserManager userManager = getUserManager(root);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/aadf67ebdcd35dbe55d20af84d6050c18ad391b7/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/ExternalLoginModuleTest.java",
                "sha": "93d3cf8af4e49f3c3401e8a3608ffa40ffcb496f",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/aadf67ebdcd35dbe55d20af84d6050c18ad391b7/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/ExternalLoginModuleTestBase.java",
                "changes": 91,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/ExternalLoginModuleTestBase.java?ref=aadf67ebdcd35dbe55d20af84d6050c18ad391b7",
                "deletions": 84,
                "filename": "oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/ExternalLoginModuleTestBase.java",
                "patch": "@@ -19,23 +19,9 @@\n \n import java.util.Collections;\n import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import javax.annotation.Nonnull;\n-import javax.annotation.Nullable;\n-import javax.jcr.RepositoryException;\n import javax.security.auth.login.AppConfigurationEntry;\n import javax.security.auth.login.Configuration;\n \n-import com.google.common.base.Function;\n-import com.google.common.base.Predicates;\n-import com.google.common.collect.Iterators;\n-import com.google.common.collect.Sets;\n-import org.apache.jackrabbit.api.security.user.Authorizable;\n-import org.apache.jackrabbit.api.security.user.UserManager;\n-import org.apache.jackrabbit.oak.AbstractSecurityTest;\n import org.apache.jackrabbit.oak.Oak;\n import org.apache.jackrabbit.oak.spi.security.authentication.external.basic.DefaultSyncConfig;\n import org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler;\n@@ -49,106 +35,47 @@\n import org.junit.Before;\n \n /**\n- * Abstract base test for external-authentication tests.\n+ * Abstract base test for external-authentication including proper OSGi service\n+ * registrations required for repository login respecting the {@link ExternalLoginModule}.\n  */\n-public abstract class ExternalLoginModuleTestBase extends AbstractSecurityTest {\n-\n-    protected static final String USER_ID = TestIdentityProvider.ID_TEST_USER;\n-    protected static final String TEST_CONSTANT_PROPERTY_NAME = \"profile/constantProperty\";\n-    protected static final String TEST_CONSTANT_PROPERTY_VALUE = \"constant-value\";\n-\n-    private Set<String> ids;\n+public abstract class ExternalLoginModuleTestBase extends AbstractExternalAuthTest {\n \n     private Registration testIdpReg;\n-\n     private Registration syncHandlerReg;\n \n     protected final HashMap<String, Object> options = new HashMap<String, Object>();\n \n     protected Whiteboard whiteboard;\n \n-    protected ExternalIdentityProvider idp;\n-\n     protected SyncManager syncManager;\n \n     protected ExternalIdentityProviderManager idpManager;\n \n-    protected DefaultSyncConfig syncConfig;\n-\n     @Before\n     public void before() throws Exception {\n         super.before();\n-        ids = Sets.newHashSet(getAllAuthorizableIds(getUserManager(root)));\n-        idp = createIDP();\n \n         testIdpReg = whiteboard.register(ExternalIdentityProvider.class, idp, Collections.<String, Object>emptyMap());\n \n         options.put(ExternalLoginModule.PARAM_SYNC_HANDLER_NAME, \"default\");\n         options.put(ExternalLoginModule.PARAM_IDP_NAME, idp.getName());\n \n-        // set default sync config\n-        syncConfig = new DefaultSyncConfig();\n-        Map<String, String> mapping = new HashMap<String, String>();\n-        mapping.put(\"name\", \"name\");\n-        mapping.put(\"email\", \"email\");\n-        mapping.put(\"profile/name\", \"profile/name\");\n-        mapping.put(\"profile/age\", \"profile/age\");\n-        mapping.put(TEST_CONSTANT_PROPERTY_NAME, \"\\\"\" + TEST_CONSTANT_PROPERTY_VALUE + \"\\\"\");\n-        syncConfig.user().setPropertyMapping(mapping);\n-        syncConfig.user().setMembershipNestingDepth(1);\n         setSyncConfig(syncConfig);\n     }\n \n     @After\n     public void after() throws Exception {\n-        if (testIdpReg != null) {\n-            testIdpReg.unregister();\n-            testIdpReg = null;\n-        }\n-        destroyIDP(idp);\n-        idp = null;\n-        setSyncConfig(null);\n-\n         try {\n-            // discard any pending changes\n-            root.refresh();\n-\n-            UserManager userManager = getUserManager(root);\n-            Iterator<String> iter = getAllAuthorizableIds(userManager);\n-            while (iter.hasNext()) {\n-                String id = iter.next();\n-                if (!ids.remove(id)) {\n-                    Authorizable a = userManager.getAuthorizable(id);\n-                    if (a != null) {\n-                        a.remove();\n-                    }\n-                }\n+            if (testIdpReg != null) {\n+                testIdpReg.unregister();\n+                testIdpReg = null;\n             }\n-            root.commit();\n+            setSyncConfig(null);\n         } finally {\n-            root.refresh();\n             super.after();\n         }\n     }\n \n-    private static Iterator<String> getAllAuthorizableIds(@Nonnull UserManager userManager) throws Exception {\n-        Iterator<Authorizable> iter = userManager.findAuthorizables(\"jcr:primaryType\", null);\n-        return Iterators.filter(Iterators.transform(iter, new Function<Authorizable, String>() {\n-            @Nullable\n-            @Override\n-            public String apply(Authorizable input) {\n-                try {\n-                    if (input != null) {\n-                        return input.getID();\n-                    }\n-                } catch (RepositoryException e) {\n-                    // failed to retrieve ID\n-                }\n-                return null;\n-            }\n-        }), Predicates.notNull());\n-    }\n-\n     @Override\n     protected Oak withEditors(Oak oak) {\n         super.withEditors(oak);\n@@ -163,10 +90,6 @@ protected Oak withEditors(Oak oak) {\n         return oak;\n     }\n \n-    protected abstract ExternalIdentityProvider createIDP();\n-\n-    protected abstract void destroyIDP(ExternalIdentityProvider idp);\n-\n     protected SynchronizationMBean createMBean() {\n         // todo: how to retrieve JCR repository here? maybe we should base the sync mbean on oak directly (=> OAK-4218).\n         // JackrabbitRepository repository =  null;",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/aadf67ebdcd35dbe55d20af84d6050c18ad391b7/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/ExternalLoginModuleTestBase.java",
                "sha": "5ae2c088088af5d086e55a02c2c75ab480f3a690",
                "status": "modified"
            },
            {
                "additions": 101,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/aadf67ebdcd35dbe55d20af84d6050c18ad391b7/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/DefaultSyncConfigTest.java",
                "changes": 101,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/DefaultSyncConfigTest.java?ref=aadf67ebdcd35dbe55d20af84d6050c18ad391b7",
                "deletions": 0,
                "filename": "oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/DefaultSyncConfigTest.java",
                "patch": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.oak.spi.security.authentication.external.basic;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import javax.annotation.Nonnull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+\n+public class DefaultSyncConfigTest {\n+\n+    private DefaultSyncConfig config = new DefaultSyncConfig();\n+\n+    private static void assertAuthorizableConfig(@Nonnull DefaultSyncConfig.Authorizable authorizableConfig) {\n+        assertEquals(\"\", authorizableConfig.getPathPrefix());\n+        assertSame(authorizableConfig, authorizableConfig.setPathPrefix(null));\n+        assertEquals(\"\", authorizableConfig.getPathPrefix());\n+        assertEquals(\"hu/hu\", authorizableConfig.setPathPrefix(\"hu/hu\").getPathPrefix());\n+\n+        Set<String> autoMembership = authorizableConfig.getAutoMembership();\n+        assertNotNull(autoMembership);\n+        assertTrue(autoMembership.isEmpty());\n+\n+        assertSame(authorizableConfig, authorizableConfig.setAutoMembership());\n+        assertTrue(authorizableConfig.getAutoMembership().isEmpty());\n+\n+        assertEquals(ImmutableSet.of(\"gr1\", \"gr2\"), authorizableConfig.setAutoMembership(\"gr1\", \"gr2\").getAutoMembership());\n+        assertEquals(ImmutableSet.of(\"gr\"), authorizableConfig.setAutoMembership(\"\", \" gr \", null, \"\").getAutoMembership());\n+\n+        Map<String, String> mapping = authorizableConfig.getPropertyMapping();\n+        assertNotNull(mapping);\n+        assertTrue(mapping.isEmpty());\n+\n+        assertSame(authorizableConfig, authorizableConfig.setPropertyMapping(ImmutableMap.of(\"a\", \"b\")));\n+        assertEquals(ImmutableMap.of(\"a\", \"b\"), authorizableConfig.getPropertyMapping());\n+        assertEquals(ImmutableMap.of(), authorizableConfig.setPropertyMapping(null).getPropertyMapping());\n+\n+        assertEquals(0, authorizableConfig.getExpirationTime());\n+        assertSame(authorizableConfig, authorizableConfig.setExpirationTime(Long.MAX_VALUE));\n+        assertEquals(Long.MAX_VALUE, authorizableConfig.getExpirationTime());\n+    }\n+\n+\n+    @Test\n+    public void testName() {\n+        assertEquals(\"default\", config.getName());\n+\n+        assertSame(config, config.setName(\"name\"));\n+        assertEquals(\"name\", config.getName());\n+    }\n+\n+    @Test\n+    public void testUserConfig() {\n+        DefaultSyncConfig.User userConfig = config.user();\n+\n+        assertNotNull(userConfig);\n+        assertAuthorizableConfig(userConfig);\n+\n+        assertEquals(0, userConfig.getMembershipExpirationTime());\n+\n+        assertSame(userConfig, userConfig.setMembershipExpirationTime(1));\n+        assertEquals(1, userConfig.getMembershipExpirationTime());\n+        assertEquals(Long.MIN_VALUE, userConfig.setMembershipExpirationTime(Long.MIN_VALUE).getMembershipExpirationTime());\n+\n+        assertEquals(0, userConfig.getMembershipNestingDepth());\n+\n+        assertSame(userConfig, userConfig.setMembershipNestingDepth(5));\n+        assertEquals(5, userConfig.getMembershipNestingDepth());\n+        assertEquals(0, userConfig.setMembershipExpirationTime(0).getMembershipExpirationTime());\n+    }\n+\n+    @Test\n+    public void testGroupConfig() {\n+        DefaultSyncConfig.Group groupConfig = config.group();\n+\n+        assertNotNull(groupConfig);\n+        assertAuthorizableConfig(groupConfig);\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/aadf67ebdcd35dbe55d20af84d6050c18ad391b7/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/DefaultSyncConfigTest.java",
                "sha": "1fa86248883d47fab9fe9539a75c9a85b2ecb62d",
                "status": "added"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/aadf67ebdcd35dbe55d20af84d6050c18ad391b7/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/DefaultSyncContextTest.java",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/DefaultSyncContextTest.java?ref=aadf67ebdcd35dbe55d20af84d6050c18ad391b7",
                "deletions": 29,
                "filename": "oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/DefaultSyncContextTest.java",
                "patch": "@@ -24,7 +24,6 @@\n import java.util.Collection;\n import java.util.Date;\n import java.util.HashMap;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.UUID;\n@@ -40,13 +39,12 @@\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Iterables;\n-import com.google.common.collect.Iterators;\n import com.google.common.collect.Lists;\n import org.apache.jackrabbit.api.security.user.Authorizable;\n import org.apache.jackrabbit.api.security.user.Group;\n import org.apache.jackrabbit.api.security.user.User;\n import org.apache.jackrabbit.api.security.user.UserManager;\n-import org.apache.jackrabbit.oak.AbstractSecurityTest;\n+import org.apache.jackrabbit.oak.spi.security.authentication.external.AbstractExternalAuthTest;\n import org.apache.jackrabbit.oak.spi.security.authentication.external.ExternalGroup;\n import org.apache.jackrabbit.oak.spi.security.authentication.external.ExternalIdentity;\n import org.apache.jackrabbit.oak.spi.security.authentication.external.ExternalIdentityException;\n@@ -69,10 +67,9 @@\n import static org.junit.Assert.assertSame;\n import static org.junit.Assert.assertTrue;\n \n-public class DefaultSyncContextTest extends AbstractSecurityTest {\n+public class DefaultSyncContextTest extends AbstractExternalAuthTest {\n \n     private TestIdentityProvider idp = new TestIdentityProvider();\n-    private DefaultSyncConfig config = new DefaultSyncConfig();\n \n     private DefaultSyncContext syncCtx;\n \n@@ -81,7 +78,7 @@\n     @Before\n     public void before() throws Exception {\n         super.before();\n-        syncCtx = new DefaultSyncContext(config, idp, getUserManager(root), getValueFactory());\n+        syncCtx = new DefaultSyncContext(syncConfig, idp, getUserManager(root), getValueFactory());\n     }\n \n     @After\n@@ -90,13 +87,6 @@ public void after() throws Exception {\n             syncCtx.close();\n             root.refresh();\n             UserManager umgr = getUserManager(root);\n-            Iterator<ExternalIdentity> ids = Iterators.concat(idp.listGroups(), idp.listUsers());\n-            while (ids.hasNext()) {\n-                Authorizable a = umgr.getAuthorizable(ids.next().getId());\n-                if (a != null) {\n-                    a.remove();\n-                }\n-            }\n             for (String id : authorizableIds) {\n                 Authorizable a = umgr.getAuthorizable(id);\n                 if (a != null) {\n@@ -109,6 +99,11 @@ public void after() throws Exception {\n         }\n     }\n \n+    @Override\n+    protected DefaultSyncConfig createSyncConfig() {\n+        return new DefaultSyncConfig();\n+    }\n+\n     private Group createTestGroup() throws Exception {\n         Group gr = getUserManager(root).createGroup(\"group\" + UUID.randomUUID());\n         authorizableIds.add(gr.getID());\n@@ -459,7 +454,7 @@ public void testSyncByIdUsingExceptionId() throws Exception {\n     public void testSyncAutoMembership() throws Exception {\n         Group gr = createTestGroup();\n \n-        config.user().setAutoMembership(gr.getID());\n+        syncConfig.user().setAutoMembership(gr.getID());\n \n         SyncResult result = syncCtx.sync(idp.listUsers().next());\n         assertEquals(SyncResult.Status.ADD, result.getStatus());\n@@ -470,7 +465,7 @@ public void testSyncAutoMembership() throws Exception {\n \n     @Test\n     public void testSyncAutoMembershipListsNonExistingGroup() throws Exception {\n-        config.user().setAutoMembership(\"nonExistingGroup\");\n+        syncConfig.user().setAutoMembership(\"nonExistingGroup\");\n \n         SyncResult result = syncCtx.sync(idp.listUsers().next());\n         assertEquals(SyncResult.Status.ADD, result.getStatus());\n@@ -479,7 +474,7 @@ public void testSyncAutoMembershipListsNonExistingGroup() throws Exception {\n     @Test\n     public void testSyncAutoMembershipListsUser() throws Exception {\n         // set auto-membership config to point to a user instead a group\n-        config.user().setAutoMembership(getTestUser().getID());\n+        syncConfig.user().setAutoMembership(getTestUser().getID());\n         syncCtx.sync(idp.listUsers().next());\n     }\n \n@@ -500,15 +495,15 @@ public void testLostMembership() throws Exception {\n \n         // enforce synchronization of the user and it's group membership\n         syncCtx.setForceUserSync(true);\n-        config.user().setMembershipExpirationTime(-1);\n+        syncConfig.user().setMembershipExpirationTime(-1);\n \n         // 1. membership nesting is < 0 => membership not synchronized\n-        config.user().setMembershipNestingDepth(-1);\n+        syncConfig.user().setMembershipNestingDepth(-1);\n         syncCtx.sync(user.getID()).getStatus();\n         assertTrue(gr.isDeclaredMember(user));\n \n         // 2. membership nesting is > 0 => membership gets synchronized\n-        config.user().setMembershipNestingDepth(1);\n+        syncConfig.user().setMembershipNestingDepth(1);\n         assertEquals(SyncResult.Status.UPDATE, syncCtx.sync(user.getID()).getStatus());\n \n         assertFalse(gr.isDeclaredMember(user));\n@@ -530,8 +525,8 @@ public void testLostMembershipDifferentIDP() throws Exception {\n \n         // enforce synchronization of the user and it's group membership\n         syncCtx.setForceUserSync(true);\n-        config.user().setMembershipExpirationTime(-1);\n-        config.user().setMembershipNestingDepth(1);\n+        syncConfig.user().setMembershipExpirationTime(-1);\n+        syncConfig.user().setMembershipNestingDepth(1);\n \n         assertEquals(SyncResult.Status.UPDATE, syncCtx.sync(user.getID()).getStatus());\n \n@@ -891,15 +886,15 @@ public void testSyncPropertiesRemapped() throws Exception {\n     @Test\n     public void testIsExpiredLocalGroup() throws Exception {\n         Group gr = createTestGroup();\n-        assertTrue(syncCtx.isExpired(gr, config.group().getExpirationTime(), \"any\"));\n+        assertTrue(syncCtx.isExpired(gr, syncConfig.group().getExpirationTime(), \"any\"));\n     }\n \n     @Test\n     public void testIsExpiredEmptyLastSyncedProperty() throws Exception {\n         Group gr = createTestGroup();\n         gr.setProperty(DefaultSyncContext.REP_LAST_SYNCED, new Value[0]);\n \n-        assertTrue(syncCtx.isExpired(gr, config.group().getExpirationTime(), \"any\"));\n+        assertTrue(syncCtx.isExpired(gr, syncConfig.group().getExpirationTime(), \"any\"));\n     }\n \n     @Test\n@@ -908,16 +903,16 @@ public void testIsExpiredSyncedUser() throws Exception {\n         sync(externalUser);\n \n         Authorizable a = getUserManager(root).getAuthorizable(externalUser.getId());\n-        assertFalse(syncCtx.isExpired(a, config.user().getExpirationTime(), \"any\"));\n+        assertFalse(syncCtx.isExpired(a, syncConfig.user().getExpirationTime(), \"any\"));\n         assertTrue(syncCtx.isExpired(a, -1, \"any\"));\n \n         // create a ctx with a newer 'now'\n-        DefaultSyncContext ctx = new DefaultSyncContext(config, idp, getUserManager(root), getValueFactory());\n+        DefaultSyncContext ctx = new DefaultSyncContext(syncConfig, idp, getUserManager(root), getValueFactory());\n         assertTrue(ctx.isExpired(a, 1, \"any\"));\n \n         // remove last-sync property\n         a.removeProperty(DefaultSyncContext.REP_LAST_SYNCED);\n-        assertTrue(syncCtx.isExpired(a, config.user().getExpirationTime(), \"any\"));\n+        assertTrue(syncCtx.isExpired(a, syncConfig.user().getExpirationTime(), \"any\"));\n     }\n \n     @Test\n@@ -926,16 +921,16 @@ public void testIsExpiredSyncedGroup() throws Exception {\n         sync(externalGroup);\n \n         Authorizable a = getUserManager(root).getAuthorizable(externalGroup.getId());\n-        assertFalse(syncCtx.isExpired(a, config.group().getExpirationTime(), \"any\"));\n+        assertFalse(syncCtx.isExpired(a, syncConfig.group().getExpirationTime(), \"any\"));\n         assertTrue(syncCtx.isExpired(a, -1, \"any\"));\n \n         // create a ctx with a newer 'now'\n-        DefaultSyncContext ctx = new DefaultSyncContext(config, idp, getUserManager(root), getValueFactory());\n+        DefaultSyncContext ctx = new DefaultSyncContext(syncConfig, idp, getUserManager(root), getValueFactory());\n         assertTrue(ctx.isExpired(a, 1, \"any\"));\n \n         // remove last-sync property\n         a.removeProperty(DefaultSyncContext.REP_LAST_SYNCED);\n-        assertTrue(syncCtx.isExpired(a, config.group().getExpirationTime(), \"any\"));\n+        assertTrue(syncCtx.isExpired(a, syncConfig.group().getExpirationTime(), \"any\"));\n     }\n \n     @Test",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/aadf67ebdcd35dbe55d20af84d6050c18ad391b7/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/DefaultSyncContextTest.java",
                "sha": "f71842378b05033497c9a74fea0d529ccfdf0116",
                "status": "modified"
            },
            {
                "additions": 64,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/aadf67ebdcd35dbe55d20af84d6050c18ad391b7/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/DefaultSyncResultImplTest.java",
                "changes": 64,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/DefaultSyncResultImplTest.java?ref=aadf67ebdcd35dbe55d20af84d6050c18ad391b7",
                "deletions": 0,
                "filename": "oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/DefaultSyncResultImplTest.java",
                "patch": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.oak.spi.security.authentication.external.basic;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.jackrabbit.oak.spi.security.authentication.external.ExternalIdentityRef;\n+import org.apache.jackrabbit.oak.spi.security.authentication.external.SyncResult;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+\n+public class DefaultSyncResultImplTest {\n+\n+    @Test\n+    public void testGetIdentityFromNull() {\n+        SyncResult res = new DefaultSyncResultImpl(null, SyncResult.Status.NOP);\n+        assertNull(res.getIdentity());\n+    }\n+\n+    @Test\n+    public void testGetIdentity() {\n+        List<DefaultSyncedIdentity> l = new ArrayList();\n+        l.add(new DefaultSyncedIdentity(\"id\", null, true, -1));\n+        l.add(new DefaultSyncedIdentity(\"id\", new ExternalIdentityRef(\"id\", \"idp\"), false, 500));\n+\n+        for (DefaultSyncedIdentity si : l) {\n+            assertEquals(si, new DefaultSyncResultImpl(si, SyncResult.Status.NOP).getIdentity());\n+        }\n+    }\n+\n+    @Test\n+    public void testGetStatus() {\n+        for (SyncResult.Status s : SyncResult.Status.values()) {\n+            assertSame(s, new DefaultSyncResultImpl(null, s).getStatus());\n+        }\n+    }\n+\n+    @Test\n+    public void testSetStatus() {\n+        DefaultSyncResultImpl res = new DefaultSyncResultImpl(null, SyncResult.Status.NOP);\n+        for (SyncResult.Status s : SyncResult.Status.values()) {\n+            res.setStatus(s);\n+            assertSame(s, res.getStatus());\n+        }\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/aadf67ebdcd35dbe55d20af84d6050c18ad391b7/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/DefaultSyncResultImplTest.java",
                "sha": "77d56bbdb04cfeee523478fbbe9e208aae4e3d78",
                "status": "added"
            },
            {
                "additions": 85,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/aadf67ebdcd35dbe55d20af84d6050c18ad391b7/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/DefaultSyncedIdentityTest.java",
                "changes": 85,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/DefaultSyncedIdentityTest.java?ref=aadf67ebdcd35dbe55d20af84d6050c18ad391b7",
                "deletions": 0,
                "filename": "oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/DefaultSyncedIdentityTest.java",
                "patch": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.oak.spi.security.authentication.external.basic;\n+\n+import org.apache.jackrabbit.oak.spi.security.authentication.external.ExternalGroup;\n+import org.apache.jackrabbit.oak.spi.security.authentication.external.ExternalIdentityProvider;\n+import org.apache.jackrabbit.oak.spi.security.authentication.external.ExternalUser;\n+import org.apache.jackrabbit.oak.spi.security.authentication.external.SyncedIdentity;\n+import org.apache.jackrabbit.oak.spi.security.authentication.external.TestIdentityProvider;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class DefaultSyncedIdentityTest {\n+\n+    private final ExternalIdentityProvider idp = new TestIdentityProvider();\n+\n+    private ExternalUser externalUser;\n+    private ExternalGroup externalGroup;\n+\n+    private SyncedIdentity si;\n+    private SyncedIdentity siGroup;\n+\n+    @Before\n+    public void before() throws Exception {\n+        externalUser = idp.getUser(TestIdentityProvider.ID_TEST_USER);\n+        assertNotNull(externalUser);\n+        si = new DefaultSyncedIdentity(externalUser.getId(), externalUser.getExternalId(), false, 234);\n+\n+        externalGroup = idp.listGroups().next();\n+        siGroup = new DefaultSyncedIdentity(externalGroup.getId(), externalGroup.getExternalId(), true, 234);\n+    }\n+\n+    @Test\n+    public void testGetId() {\n+        assertEquals(externalUser.getId(), si.getId());\n+        assertEquals(externalGroup.getId(), siGroup.getId());\n+\n+        SyncedIdentity siOtherId = new DefaultSyncedIdentity(\"otherId\", externalUser.getExternalId(), false, -1);\n+        assertEquals(\"otherId\", siOtherId.getId());\n+    }\n+\n+    @Test\n+    public void testGetExternalIdRef() {\n+        assertEquals(externalUser.getExternalId(), si.getExternalIdRef());\n+        assertEquals(externalGroup.getExternalId(), siGroup.getExternalIdRef());\n+\n+        SyncedIdentity siNullExtRef = new DefaultSyncedIdentity(TestIdentityProvider.ID_TEST_USER, null, false, 234);\n+        assertNull(siNullExtRef.getExternalIdRef());\n+    }\n+\n+    @Test\n+    public void testIsGroup() {\n+        assertFalse(si.isGroup());\n+        assertTrue(siGroup.isGroup());\n+    }\n+\n+    @Test\n+    public void testLastSynced() {\n+        assertEquals(234, si.lastSynced());\n+        assertEquals(234, siGroup.lastSynced());\n+\n+        SyncedIdentity siNeverSynced = new DefaultSyncedIdentity(TestIdentityProvider.ID_TEST_USER, externalUser.getExternalId(), false, -1);\n+        assertEquals(-1, siNeverSynced.lastSynced());\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/aadf67ebdcd35dbe55d20af84d6050c18ad391b7/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/DefaultSyncedIdentityTest.java",
                "sha": "1c9ef1a7e23cda2a9e13867037017da517fb7882",
                "status": "added"
            },
            {
                "additions": 90,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/aadf67ebdcd35dbe55d20af84d6050c18ad391b7/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/RepExternalIdTest.java",
                "changes": 90,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/RepExternalIdTest.java?ref=aadf67ebdcd35dbe55d20af84d6050c18ad391b7",
                "deletions": 0,
                "filename": "oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/RepExternalIdTest.java",
                "patch": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.oak.spi.security.authentication.external.basic;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.apache.jackrabbit.api.security.user.Authorizable;\n+import org.apache.jackrabbit.oak.api.PropertyState;\n+import org.apache.jackrabbit.oak.api.Tree;\n+import org.apache.jackrabbit.oak.api.Type;\n+import org.apache.jackrabbit.oak.spi.security.authentication.external.AbstractExternalAuthTest;\n+import org.apache.jackrabbit.oak.spi.security.authentication.external.ExternalIdentityRef;\n+import org.apache.jackrabbit.oak.spi.security.authentication.external.SyncResult;\n+import org.apache.jackrabbit.oak.spi.security.authentication.external.SyncedIdentity;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+\n+public class RepExternalIdTest extends AbstractExternalAuthTest {\n+\n+    private DefaultSyncContext syncCtx;\n+\n+    @Before\n+    public void before() throws Exception {\n+        super.before();\n+\n+        syncCtx = new DefaultSyncContext(syncConfig, idp, getUserManager(root), getValueFactory());\n+    }\n+\n+    @Override\n+    public void after() throws Exception {\n+        try {\n+            syncCtx.close();\n+        } finally {\n+            super.after();\n+        }\n+    }\n+\n+    private void assertRepExternalId(@Nonnull SyncResult result) throws Exception {\n+        assertSame(SyncResult.Status.ADD, result.getStatus());\n+        SyncedIdentity si = result.getIdentity();\n+        assertNotNull(si);\n+\n+\n+        Authorizable authorizable = getUserManager(root).getAuthorizable(si.getId());\n+        assertNotNull(authorizable);\n+\n+        Tree userTree = root.getTree(authorizable.getPath());\n+        assertTrue(userTree.hasProperty(DefaultSyncContext.REP_EXTERNAL_ID));\n+\n+        PropertyState ps = userTree.getProperty(DefaultSyncContext.REP_EXTERNAL_ID);\n+        assertNotNull(ps);\n+        assertFalse(ps.isArray());\n+        assertSame(Type.STRING, ps.getType());\n+        assertEquals(si.getExternalIdRef(), ExternalIdentityRef.fromString(ps.getValue(Type.STRING)));\n+    }\n+\n+    @Test\n+    public void syncExternalUser() throws Exception {\n+        SyncResult res = syncCtx.sync(idp.getUser(USER_ID));\n+\n+        assertRepExternalId(res);\n+    }\n+\n+    @Test\n+    public void syncExternalGroup() throws Exception {\n+        SyncResult res = syncCtx.sync(idp.listGroups().next());\n+\n+        assertRepExternalId(res);\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/aadf67ebdcd35dbe55d20af84d6050c18ad391b7/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/RepExternalIdTest.java",
                "sha": "85c9dbac898206f9fad4af6868bde0ccd57c845b",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/aadf67ebdcd35dbe55d20af84d6050c18ad391b7/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/CustomCredentialsSupportTest.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/CustomCredentialsSupportTest.java?ref=aadf67ebdcd35dbe55d20af84d6050c18ad391b7",
                "deletions": 9,
                "filename": "oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/CustomCredentialsSupportTest.java",
                "patch": "@@ -52,8 +52,6 @@\n  */\n public class CustomCredentialsSupportTest extends ExternalLoginModuleTestBase {\n \n-    private final IDP idp = new IDP();\n-\n     private static void assertAttributes(@Nonnull Map<String, ?> expected, @Nonnull AuthInfo info) {\n         assertEquals(expected.size(), info.getAttributeNames().length);\n         for (String aName : info.getAttributeNames()) {\n@@ -69,7 +67,7 @@ public void testLogin() throws Exception {\n         try {\n             AuthInfo info = cs.getAuthInfo();\n             assertEquals(\"testUser\", info.getUserID());\n-            assertAttributes(idp.getAttributes(creds), info);\n+            assertAttributes(((IDP) idp).getAttributes(creds), info);\n         } finally {\n             cs.close();\n         }\n@@ -93,12 +91,7 @@ public void testLoginWithUnsupportedCredentials() throws Exception {\n \n     @Override\n     protected ExternalIdentityProvider createIDP() {\n-        return idp;\n-    }\n-\n-    @Override\n-    protected void destroyIDP(ExternalIdentityProvider idp) {\n-        // ignore\n+        return new IDP();\n     }\n \n     private static final class TestCredentials implements Credentials {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/aadf67ebdcd35dbe55d20af84d6050c18ad391b7/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/CustomCredentialsSupportTest.java",
                "sha": "6565da710405520c09f44a4261aa623ce326c1a1",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/aadf67ebdcd35dbe55d20af84d6050c18ad391b7/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/DefaultSyncHandlerTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/DefaultSyncHandlerTest.java?ref=aadf67ebdcd35dbe55d20af84d6050c18ad391b7",
                "deletions": 9,
                "filename": "oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/DefaultSyncHandlerTest.java",
                "patch": "@@ -75,15 +75,6 @@ public void after() throws Exception {\n         super.after();\n     }\n \n-    protected ExternalIdentityProvider createIDP() {\n-        return new TestIdentityProvider();\n-    }\n-\n-    @Override\n-    protected void destroyIDP(ExternalIdentityProvider idp) {\n-    // ignore\n-    }\n-\n     @Override\n     protected void setSyncConfig(DefaultSyncConfig cfg) {\n         if (cfg != null) {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/aadf67ebdcd35dbe55d20af84d6050c18ad391b7/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/DefaultSyncHandlerTest.java",
                "sha": "d73be2fa5ff6d548766da3913b7557dc3929d5cc",
                "status": "modified"
            }
        ],
        "message": "OAK-4248 More tests for the exposed 'basic' package \n OAK-4249 Extract abstract test-base without OSGi registrations\nOAK-4251 Guard against NPE in DefaultSyncConfig.Authorizable.setAutoMembership\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1740114 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/c9c8744830a72da9d3b0515606852869f869542b",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "DefaultSyncConfigTest.java"
        ]
    },
    "jackrabbit-oak_ac194bb": {
        "bug_id": "jackrabbit-oak_ac194bb",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/ac194bbd073bbfb9c85e00db75350fdba4e2a6a3",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/ac194bbd073bbfb9c85e00db75350fdba4e2a6a3/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndexProviderService.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndexProviderService.java?ref=ac194bbd073bbfb9c85e00db75350fdba4e2a6a3",
                "deletions": 2,
                "filename": "oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndexProviderService.java",
                "patch": "@@ -755,10 +755,11 @@ private void initializeActiveBlobCollector(Whiteboard whiteboard, Map<String, ?>\n                 PROP_DELETED_BLOB_COLLECTION_DEFAULT_ENABLED);\n         if (activeDeletionEnabled && blobStore!= null) {\n             File blobCollectorWorkingDir = new File(indexDir, \"deleted-blobs\");\n-            activeDeletedBlobCollector = ActiveDeletedBlobCollectorFactory.newInstance(blobCollectorWorkingDir, executorService);\n+            activeDeletedBlobCollector = ActiveDeletedBlobCollectorFactory.newInstance(blobCollectorWorkingDir,\n+                    getExecutorService());\n             ActiveDeletedBlobCollectorMBean bean =\n                     new ActiveDeletedBlobCollectorMBeanImpl(activeDeletedBlobCollector, whiteboard, nodeStore,\n-                            indexPathService, asyncIndexInfoService, blobStore, executorService);\n+                            indexPathService, asyncIndexInfoService, blobStore, getExecutorService());\n \n             oakRegs.add(registerMBean(whiteboard, ActiveDeletedBlobCollectorMBean.class, bean,\n                     ActiveDeletedBlobCollectorMBean.TYPE, \"Active lucene files collection\"));",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/ac194bbd073bbfb9c85e00db75350fdba4e2a6a3/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndexProviderService.java",
                "sha": "e5211ac65fa5254566f73abc85b11cd816f48a81",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/ac194bbd073bbfb9c85e00db75350fdba4e2a6a3/oak-lucene/src/test/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndexProviderServiceTest.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-lucene/src/test/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndexProviderServiceTest.java?ref=ac194bbd073bbfb9c85e00db75350fdba4e2a6a3",
                "deletions": 0,
                "filename": "oak-lucene/src/test/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndexProviderServiceTest.java",
                "patch": "@@ -182,6 +182,31 @@ public void enableCopyOnWrite() throws Exception{\n         MockOsgi.deactivate(service, context.bundleContext());\n     }\n \n+    // OAK-7357\n+    @Test\n+    public void disableCoRCoW() throws Exception {\n+        // inject ds as OAK-7357 revealed ABD bean had a bug - which comes into play only with blob stores\n+        CachingFileDataStore ds = DataStoreUtils\n+                .createCachingFDS(folder.newFolder().getAbsolutePath(),\n+                        folder.newFolder().getAbsolutePath());\n+\n+        context.registerService(GarbageCollectableBlobStore.class, new DataStoreBlobStore(ds));\n+\n+        // re-init service and inject references\n+        service = new LuceneIndexProviderService();\n+        MockOsgi.injectServices(service, context.bundleContext());\n+\n+        Map<String,Object> config = getDefaultConfig();\n+        config.put(\"enableCopyOnReadSupport\", false);\n+        config.put(\"enableCopyOnWriteSupport\", false);\n+\n+        // activation should work\n+        MockOsgi.activate(service, context.bundleContext(), config);\n+\n+        // de-activation should work\n+        MockOsgi.deactivate(service, context.bundleContext());\n+    }\n+\n     @Test\n     public void enablePrefetchIndexFiles() throws Exception{\n         Map<String,Object> config = getDefaultConfig();",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/ac194bbd073bbfb9c85e00db75350fdba4e2a6a3/oak-lucene/src/test/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndexProviderServiceTest.java",
                "sha": "8fb74078f0dc64fc20a9b079da4d81c77381a46b",
                "status": "modified"
            }
        ],
        "message": "OAK-7357: NPE on activation of LuceneIndexProviderService with disabled CoR and CoR\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1827257 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/f8d8f4e9e0519570e68f4aee390ba34fe7d73268",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "LuceneIndexProviderServiceTest.java"
        ]
    },
    "jackrabbit-oak_ad39877": {
        "bug_id": "jackrabbit-oak_ad39877",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/ad39877cbf8a55a93636f8c356ab29201290921c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/ad39877cbf8a55a93636f8c356ab29201290921c/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java?ref=ad39877cbf8a55a93636f8c356ab29201290921c",
                "deletions": 2,
                "filename": "oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "patch": "@@ -1949,7 +1949,7 @@ public void close() throws IOException {\n         } catch (SQLException ex) {\n             this.ch.rollbackConnection(connection);\n             String addDiags = \"\";\n-            if (RDBJDBCTools.matchesSQLState(ex, \"22\", \"72\")) {\n+            if (data != null && RDBJDBCTools.matchesSQLState(ex, \"22\", \"72\")) {\n                 byte[] bytes = asBytes(data);\n                 addDiags = String.format(\" (DATA size in Java characters: %d, in octets: %d, computed character limit: %d)\",\n                         data.length(), bytes.length, tmd.getDataLimitInOctets() / CHAR2OCTETRATIO);\n@@ -2058,7 +2058,7 @@ private static long getModifiedFromOperation(Operation op) {\n     private static final boolean BATCHUPDATES = Boolean.parseBoolean(System\n             .getProperty(\"org.apache.jackrabbit.oak.plugins.document.rdb.RDBDocumentStore.BATCHUPDATES\", \"true\"));\n \n-    public static byte[] asBytes(String data) {\n+    public static byte[] asBytes(@Nonnull String data) {\n         byte[] bytes;\n         try {\n             bytes = data.getBytes(\"UTF-8\");",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/ad39877cbf8a55a93636f8c356ab29201290921c/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "sha": "96d04b76d42b872e3b0017740d26d83786f2cfbf",
                "status": "modified"
            }
        ],
        "message": "OAK-7289: RDBDocumentStore: potential NPE in error handling code\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1825442 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/8a90e73d23ab1b4fe07fca92d64c395e95921969",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "RDBDocumentStoreTest.java"
        ]
    },
    "jackrabbit-oak_ad8fcef": {
        "bug_id": "jackrabbit-oak_ad8fcef",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/ad8fcefe1e19bf25c6d8930e8b91def7ac90d0b7",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/ad8fcefe1e19bf25c6d8930e8b91def7ac90d0b7/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/observation/filter/FilterBuilder.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/observation/filter/FilterBuilder.java?ref=ad8fcefe1e19bf25c6d8930e8b91def7ac90d0b7",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/observation/filter/FilterBuilder.java",
                "patch": "@@ -40,6 +40,7 @@\n import com.google.common.base.Predicate;\n import com.google.common.collect.ImmutableList;\n import org.apache.jackrabbit.oak.api.PropertyState;\n+import org.apache.jackrabbit.oak.core.ImmutableRoot;\n import org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate;\n import org.apache.jackrabbit.oak.plugins.observation.filter.UniversalFilter.Selector;\n import org.apache.jackrabbit.oak.spi.commit.CommitInfo;\n@@ -427,7 +428,8 @@ public ACCondition(PermissionProviderFactory permissionProviderFactory) {\n \n         @Override\n         public EventFilter createFilter(NodeState before, NodeState after) {\n-            return new ACFilter(before, after, permissionProviderFactory.create());\n+            return new ACFilter(before, after,\n+                    permissionProviderFactory.create(new ImmutableRoot(after)));\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/ad8fcefe1e19bf25c6d8930e8b91def7ac90d0b7/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/observation/filter/FilterBuilder.java",
                "sha": "a440f662f8d5a0f39d8ab611df9136e326b5eb5f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/ad8fcefe1e19bf25c6d8930e8b91def7ac90d0b7/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/observation/filter/PermissionProviderFactory.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/observation/filter/PermissionProviderFactory.java?ref=ad8fcefe1e19bf25c6d8930e8b91def7ac90d0b7",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/observation/filter/PermissionProviderFactory.java",
                "patch": "@@ -21,6 +21,7 @@\n \n import javax.annotation.Nonnull;\n \n+import org.apache.jackrabbit.oak.api.Root;\n import org.apache.jackrabbit.oak.spi.security.authorization.permission.PermissionProvider;\n \n /**\n@@ -33,5 +34,5 @@\n      * @return\n      */\n     @Nonnull\n-    PermissionProvider create();\n+    PermissionProvider create(Root root);\n }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/ad8fcefe1e19bf25c6d8930e8b91def7ac90d0b7/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/observation/filter/PermissionProviderFactory.java",
                "sha": "90fff96afeea2c96e0ea6b94b8e7235f85fb8279",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/ad8fcefe1e19bf25c6d8930e8b91def7ac90d0b7/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/observation/ObservationManagerImpl.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/observation/ObservationManagerImpl.java?ref=ad8fcefe1e19bf25c6d8930e8b91def7ac90d0b7",
                "deletions": 8,
                "filename": "oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/observation/ObservationManagerImpl.java",
                "patch": "@@ -50,7 +50,6 @@\n import org.apache.jackrabbit.oak.api.Root;\n import org.apache.jackrabbit.oak.jcr.delegate.SessionDelegate;\n import org.apache.jackrabbit.oak.jcr.session.SessionContext;\n-import org.apache.jackrabbit.oak.jcr.session.operation.SessionOperation;\n import org.apache.jackrabbit.oak.namepath.NamePathMapper;\n import org.apache.jackrabbit.oak.plugins.nodetype.ReadOnlyNodeTypeManager;\n import org.apache.jackrabbit.oak.plugins.observation.CommitRateLimiter;\n@@ -119,13 +118,7 @@ public ObservationManagerImpl(\n             Set<Principal> principals = sessionDelegate.getAuthInfo().getPrincipals();\n             @Nonnull\n             @Override\n-            public PermissionProvider create() {\n-                Root root = sessionDelegate.safePerform(new SessionOperation<Root>(\"refresh-root\") {\n-                    @Override\n-                    public Root perform() {\n-                        return sessionDelegate.getRoot();\n-                    }\n-                });\n+            public PermissionProvider create(Root root) {\n                 return authorizationConfig.getPermissionProvider(root,\n                         sessionDelegate.getWorkspaceName(), principals);\n             }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/ad8fcefe1e19bf25c6d8930e8b91def7ac90d0b7/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/observation/ObservationManagerImpl.java",
                "sha": "edcd4921c4d398b14aa957eb89aa8ceca5734624",
                "status": "modified"
            }
        ],
        "message": "OAK-2256: MemoryNodeBuilder NPE on base() following root refresh\nAvoid concurrent access to NodeBuilder.base()\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1637413 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/5d0ad3c91e7f2440e8eddf3edbd74604822dc47b",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "FilterBuilderTest.java"
        ]
    },
    "jackrabbit-oak_b997936": {
        "bug_id": "jackrabbit-oak_b997936",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/b997936d972e9b26f6ff276262428a9ddc5bd5ad",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/b997936d972e9b26f6ff276262428a9ddc5bd5ad/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/ExtractedTextCache.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/ExtractedTextCache.java?ref=b997936d972e9b26f6ff276262428a9ddc5bd5ad",
                "deletions": 2,
                "filename": "oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/ExtractedTextCache.java",
                "patch": "@@ -157,9 +157,12 @@ public void putTimeout(@Nonnull Blob blob, @Nonnull ExtractedText extractedText)\n         if (EXTRACT_FORGET_TIMEOUT) {\n             return;\n         }\n+\n         String id = blob.getContentIdentity();\n-        timeoutMap.put(id, getText(extractedText));\n-        storeTimeoutMap();\n+        if (id != null) {\n+            timeoutMap.put(id, getText(extractedText));\n+            storeTimeoutMap();\n+        }\n     }\n \n     private static String getText(ExtractedText text) {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/b997936d972e9b26f6ff276262428a9ddc5bd5ad/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/ExtractedTextCache.java",
                "sha": "c07f1a4709645b82b4ed3f20f519c3a4c9bdaa8c",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/b997936d972e9b26f6ff276262428a9ddc5bd5ad/oak-lucene/src/test/java/org/apache/jackrabbit/oak/plugins/index/lucene/ExtractedTextCacheTest.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-lucene/src/test/java/org/apache/jackrabbit/oak/plugins/index/lucene/ExtractedTextCacheTest.java?ref=b997936d972e9b26f6ff276262428a9ddc5bd5ad",
                "deletions": 0,
                "filename": "oak-lucene/src/test/java/org/apache/jackrabbit/oak/plugins/index/lucene/ExtractedTextCacheTest.java",
                "patch": "@@ -185,6 +185,17 @@ public Void call() throws Exception {\n         assertEquals(1, cache.getStatsMBean().getTimeoutCount());\n     }\n \n+    @Test\n+    public void nullContentIdentityBlob() throws Exception {\n+        ExtractedTextCache cache = new ExtractedTextCache(0, 0);\n+        Blob b = new IdBlob(\"hello\", null);\n+        cache.put(b, ExtractedText.ERROR);\n+        assertNull(cache.get(\"/a\", \"foo\", b, false));\n+        cache.putTimeout(b, ExtractedText.ERROR);\n+        assertNull(\"Cache returned non null text for blob with null content identity\",\n+                cache.get(\"/a\", \"foo\", b, false));\n+    }\n+\n     private static class IdBlob extends ArrayBasedBlob {\n         final String id;\n ",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/b997936d972e9b26f6ff276262428a9ddc5bd5ad/oak-lucene/src/test/java/org/apache/jackrabbit/oak/plugins/index/lucene/ExtractedTextCacheTest.java",
                "sha": "d6b06fb716801a44037a1f0da0bc5a1aa447a034",
                "status": "modified"
            }
        ],
        "message": "OAK-7508: Text extraction timeout can lead to NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1832376 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/dbc84d9b0751ec9e6dec8b0244497e0e36a41ccb",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "ExtractedTextCacheTest.java"
        ]
    },
    "jackrabbit-oak_c2211a7": {
        "bug_id": "jackrabbit-oak_c2211a7",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/c2211a799a0e62a21aa26b4886c8a06d053f1287",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/c2211a799a0e62a21aa26b4886c8a06d053f1287/oak-core/src/main/java/org/apache/jackrabbit/oak/osgi/OsgiWhiteboard.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/osgi/OsgiWhiteboard.java?ref=c2211a799a0e62a21aa26b4886c8a06d053f1287",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/osgi/OsgiWhiteboard.java",
                "patch": "@@ -20,6 +20,7 @@\n import static com.google.common.base.Preconditions.checkNotNull;\n import static java.util.Arrays.asList;\n \n+import java.util.Collections;\n import java.util.Dictionary;\n import java.util.Hashtable;\n import java.util.List;\n@@ -77,7 +78,8 @@ public void unregister() {\n         return new Tracker<T>() {\n             @Override @SuppressWarnings(\"unchecked\")\n             public List<T> getServices() {\n-                return (List<T>) asList(tracker.getServices());\n+                Object[] services = tracker.getServices();\n+                return (List<T>) (services != null ? asList(services) : Collections.emptyList());\n             }\n             @Override\n             public void stop() {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/c2211a799a0e62a21aa26b4886c8a06d053f1287/oak-core/src/main/java/org/apache/jackrabbit/oak/osgi/OsgiWhiteboard.java",
                "sha": "5f80ec103dcae406b034de4fb0c1a6be9f1588a7",
                "status": "modified"
            }
        ],
        "message": "OAK-1581: NPE in OsgiWhiteboard#track()\nNull guard\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1579605 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/1eb69d5b8c24acdfe9f2b0e4c4ff225ee50c58a7",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "OsgiWhiteboardTest.java"
        ]
    },
    "jackrabbit-oak_c8000c1": {
        "bug_id": "jackrabbit-oak_c8000c1",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/c8000c14cfaaecc183bfee8773552ef0837a52ef",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/c8000c14cfaaecc183bfee8773552ef0837a52ef/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java?ref=c8000c14cfaaecc183bfee8773552ef0837a52ef",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java",
                "patch": "@@ -157,7 +157,10 @@ public TreePermission getTreePermission(@Nonnull ImmutableTree tree, @Nonnull Tr\n                 // TODO: OAK-753 decide on where to filter out hidden items.\n                 return TreePermission.ALL;\n             case TreeTypeProvider.TYPE_VERSION:\n-                String ntName = checkNotNull(TreeUtil.getPrimaryTypeName(tree));\n+                String ntName = TreeUtil.getPrimaryTypeName(tree);\n+                if (ntName == null) {\n+                    return TreePermission.EMPTY;\n+                }\n                 if (VersionConstants.VERSION_STORE_NT_NAMES.contains(ntName) || VersionConstants.NT_ACTIVITY.equals(ntName)) {\n                     return new TreePermissionImpl(tree, TreeTypeProvider.TYPE_VERSION, parentPermission);\n                 } else {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/c8000c14cfaaecc183bfee8773552ef0837a52ef/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java",
                "sha": "c9d0fa0f2ba2827102371d98523457657859ce5c",
                "status": "modified"
            },
            {
                "additions": 148,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/c8000c14cfaaecc183bfee8773552ef0837a52ef/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/evaluation/VersionStorageTest.java",
                "changes": 148,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/evaluation/VersionStorageTest.java?ref=c8000c14cfaaecc183bfee8773552ef0837a52ef",
                "deletions": 0,
                "filename": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/evaluation/VersionStorageTest.java",
                "patch": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.oak.security.authorization.evaluation;\n+\n+import javax.annotation.Nonnull;\n+import javax.jcr.security.AccessControlEntry;\n+import javax.jcr.security.AccessControlManager;\n+\n+import org.apache.jackrabbit.JcrConstants;\n+import org.apache.jackrabbit.api.security.JackrabbitAccessControlList;\n+import org.apache.jackrabbit.commons.jackrabbit.authorization.AccessControlUtils;\n+import org.apache.jackrabbit.oak.Oak;\n+import org.apache.jackrabbit.oak.api.Root;\n+import org.apache.jackrabbit.oak.api.Tree;\n+import org.apache.jackrabbit.oak.plugins.nodetype.ReadOnlyNodeTypeManager;\n+import org.apache.jackrabbit.oak.plugins.version.ReadOnlyVersionManager;\n+import org.apache.jackrabbit.oak.plugins.version.VersionConstants;\n+import org.apache.jackrabbit.oak.plugins.version.VersionEditorProvider;\n+import org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeConstants;\n+import org.apache.jackrabbit.oak.util.TreeUtil;\n+import org.junit.Test;\n+\n+import static org.apache.jackrabbit.oak.plugins.nodetype.NodeTypeConstants.NODE_TYPES_PATH;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests related to permission evaluation within the version storage.\n+ */\n+public class VersionStorageTest extends AbstractOakCoreTest {\n+\n+    private String vhPath;\n+\n+    @Override\n+    public void before() throws Exception {\n+        super.before();\n+\n+        // make sure the version storage has been setup\n+        Tree a = root.getTree(\"/a\");\n+        TreeUtil.addMixin(a, JcrConstants.MIX_VERSIONABLE, root.getTree(NODE_TYPES_PATH), adminSession.getAuthInfo().getUserID());\n+        root.commit();\n+\n+        Tree vs = root.getTree(VersionConstants.VERSION_STORE_PATH);\n+        assertTrue(vs.exists());\n+        String vhUUID = TreeUtil.getString(a, VersionConstants.JCR_VERSIONHISTORY);\n+        assertNotNull(vhUUID);\n+\n+        String versionableUuid = TreeUtil.getString(a, JcrConstants.JCR_UUID);\n+        vhPath = getVersionHistoryPath(versionableUuid, vs);\n+    }\n+\n+    private String getVersionHistoryPath(String vUUID, final Tree vs) {\n+        ReadOnlyVersionManager vMgr = new ReadOnlyVersionManager() {\n+            @Nonnull\n+            @Override\n+            protected Tree getVersionStorage() {\n+                return vs;\n+            }\n+\n+            @Nonnull\n+            @Override\n+            protected Root getWorkspaceRoot() {\n+                return root;\n+            }\n+\n+            @Nonnull\n+            @Override\n+            protected ReadOnlyNodeTypeManager getNodeTypeManager() {\n+                throw new UnsupportedOperationException();\n+            }\n+        };\n+        return VersionConstants.VERSION_STORE_PATH + '/' + vMgr.getVersionHistoryPath(vUUID);\n+    }\n+\n+    @Override\n+    public void after() throws Exception {\n+        AccessControlManager acMgr = getAccessControlManager(root);\n+        JackrabbitAccessControlList acl = AccessControlUtils.getAccessControlList(acMgr, \"/\");\n+        for (AccessControlEntry ace : acl.getAccessControlEntries()) {\n+            if (testPrincipal.equals(ace.getPrincipal())) {\n+                acl.removeAccessControlEntry(ace);\n+            }\n+        }\n+        acMgr.setPolicy(\"/\", acl);\n+        root.commit();\n+    }\n+\n+    @Override\n+    protected Oak withEditors(Oak oak) {\n+        return oak.with(new VersionEditorProvider());\n+    }\n+\n+    @Test\n+    public void testGetVersionStorage() throws Exception {\n+        Tree vs = getTestRoot().getTree(VersionConstants.VERSION_STORE_PATH);\n+        assertFalse(vs.exists());\n+    }\n+\n+    @Test\n+    public void testGetVersionStorage2() throws Exception {\n+        setupPermission(\"/\", testPrincipal, true, PrivilegeConstants.JCR_READ);\n+\n+        Tree vs = getTestRoot().getTree(VersionConstants.VERSION_STORE_PATH);\n+        assertTrue(vs.exists());\n+    }\n+\n+    @Test\n+    public void testGetVersionHistory() throws Exception {\n+        Tree vs = getTestRoot().getTree(vhPath);\n+        assertFalse(vs.exists());\n+    }\n+\n+    @Test\n+    public void testGetVersionHistory2() throws Exception {\n+        setupPermission(\"/\", testPrincipal, true, PrivilegeConstants.JCR_READ);\n+\n+        Tree vs = getTestRoot().getTree(vhPath);\n+        assertTrue(vs.exists());\n+    }\n+\n+    @Test\n+    public void testGetChildrenCountOnVersionStorage() throws Exception {\n+        Tree vs = getTestRoot().getTree(VersionConstants.VERSION_STORE_PATH);\n+        vs.getChildrenCount(Long.MAX_VALUE);\n+    }\n+\n+    @Test\n+    public void testGetChildrenCountOnVersionStorage2() throws Exception {\n+        setupPermission(\"/\", testPrincipal, true, PrivilegeConstants.JCR_READ);\n+        Tree vs = getTestRoot().getTree(VersionConstants.VERSION_STORE_PATH);\n+        vs.getChildrenCount(Long.MAX_VALUE);\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/c8000c14cfaaecc183bfee8773552ef0837a52ef/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/evaluation/VersionStorageTest.java",
                "sha": "b5916a1bc15f1593df3e6126dedae3ff9178f6db",
                "status": "added"
            }
        ],
        "message": "OAK-1173 : NPE if TreePermissionImpl if tree does not have a primary type\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1541452 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/c9c85507704868cbb37287b26b4ebada1d938e34",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "CompiledPermissionImplTest.java"
        ]
    },
    "jackrabbit-oak_cb0764b": {
        "bug_id": "jackrabbit-oak_cb0764b",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/cb0764b6998be1059cdf4dce49a475d9b9dc6b01",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/cb0764b6998be1059cdf4dce49a475d9b9dc6b01/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositionContext.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositionContext.java?ref=cb0764b6998be1059cdf4dce49a475d9b9dc6b01",
                "deletions": 2,
                "filename": "oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositionContext.java",
                "patch": "@@ -174,10 +174,26 @@ public boolean apply(String childName) {\n     }\n \n     CompositeNodeState createRootNodeState(Map<MountedNodeStore, NodeState> rootStates) {\n-        for (NodeState s : rootStates.values()) {\n-            if (s instanceof CompositeNodeState) {\n+        for (Map.Entry<MountedNodeStore, NodeState> e : rootStates.entrySet()) {\n+            MountedNodeStore mns = e.getKey();\n+            NodeState nodeState = e.getValue();\n+            if (nodeState instanceof CompositeNodeState) {\n                 throw new IllegalArgumentException(\"Nesting composite node states is not supported\");\n             }\n+            if (nodeState == null) {\n+                throw new NullPointerException(\"Passed null as a nodestate for \" + mns.getMount().getName());\n+            }\n+        }\n+        for (MountedNodeStore mns : nonDefaultStores) {\n+            if (!rootStates.containsKey(mns)) {\n+                throw new IllegalArgumentException(\"Can't find node state for \" + mns.getMount().getName());\n+            }\n+        }\n+        if (!rootStates.containsKey(globalStore)) {\n+            throw new IllegalArgumentException(\"Can't find node state for the global store\");\n+        }\n+        if (rootStates.size() != nonDefaultStores.size() + 1) {\n+            throw new IllegalArgumentException(\"Too many root states passed: \" + rootStates.size());\n         }\n         return new CompositeNodeState(\"/\", rootStates, this);\n     }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/cb0764b6998be1059cdf4dce49a475d9b9dc6b01/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositionContext.java",
                "sha": "06c195c3105e86df903e92d2f757f5f6a5121600",
                "status": "modified"
            }
        ],
        "message": "OAK-6486: NPE in CompositeNodeStore\n\nCheck arguments carefully in the createRootNodeState() method.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1802871 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/66c11ac457ac9b00d6f2a7eb16417ae7dee5018c",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "CompositionContextTest.java"
        ]
    },
    "jackrabbit-oak_d074fc8": {
        "bug_id": "jackrabbit-oak_d074fc8",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/d074fc8e1a74dfa4c163dad625f224cd73bc92fb",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/d074fc8e1a74dfa4c163dad625f224cd73bc92fb/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/mongo/MongoDocumentStore.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/mongo/MongoDocumentStore.java?ref=d074fc8e1a74dfa4c163dad625f224cd73bc92fb",
                "deletions": 0,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/mongo/MongoDocumentStore.java",
                "patch": "@@ -1565,6 +1565,14 @@ public long determineServerTimeDifferenceMillis() {\n         // assumption here: server returns UTC - ie the returned\n         // date object is correctly taking care of time zones.\n         final Date serverLocalTime = db.command(\"serverStatus\").getDate(\"localTime\");\n+        if (serverLocalTime == null) {\n+        \t// OAK-4107 : looks like this can happen - at least\n+        \t// has been seen once on mongo 3.0.9\n+        \t// let's handle this gently and issue a log.warn\n+        \t// instead of throwing a NPE\n+        \tLOG.warn(\"determineServerTimeDifferenceMillis: db.serverStatus.localTime returned null - cannot determine time difference - assuming 0ms\");\n+        \treturn 0;\n+        }\n         final long end = System.currentTimeMillis();\n \n         final long midPoint = (start + end) / 2;",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/d074fc8e1a74dfa4c163dad625f224cd73bc92fb/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/mongo/MongoDocumentStore.java",
                "sha": "971954b5c3343d8f9ce89f825321c05849e03b85",
                "status": "modified"
            }
        ],
        "message": "OAK-4107 : avoid NPE when db.serverStatus.localTime returns null - even though that is unexpected - just issue a WARN then\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1740462 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/fc2da6a8eb7406d173ffab922742c77617c47795",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "MongoDocumentStoreTest.java"
        ]
    },
    "jackrabbit-oak_d3fea45": {
        "bug_id": "jackrabbit-oak_d3fea45",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/d3fea45b096fa2a6f66bb529ed145ae8c7bb01e7",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/d3fea45b096fa2a6f66bb529ed145ae8c7bb01e7/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java?ref=d3fea45b096fa2a6f66bb529ed145ae8c7bb01e7",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java",
                "patch": "@@ -39,6 +39,7 @@\n import java.util.Map;\n import java.util.NavigableSet;\n import java.util.Set;\n+import java.util.SortedMap;\n import java.util.TimeZone;\n import java.util.concurrent.Callable;\n import java.util.concurrent.ConcurrentHashMap;\n@@ -70,6 +71,7 @@\n import org.apache.jackrabbit.oak.commons.json.JsopTokenizer;\n import org.apache.jackrabbit.oak.plugins.blob.BlobStoreBlob;\n import org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector;\n+import org.apache.jackrabbit.oak.plugins.document.Checkpoints.Info;\n import org.apache.jackrabbit.oak.plugins.document.mongo.MongoBlobReferenceIterator;\n import org.apache.jackrabbit.oak.plugins.document.mongo.MongoDocumentStore;\n import org.apache.jackrabbit.oak.plugins.document.persistentCache.PersistentCache;\n@@ -1404,7 +1406,8 @@ public String checkpoint(long lifetime) {\n     @Override\n     public NodeState retrieve(@Nonnull String checkpoint) {\n         Revision r = Revision.fromString(checkpoint);\n-        if (checkpoints.getCheckpoints().containsKey(r)) {\n+        SortedMap<Revision, Info> checkpoints = this.checkpoints.getCheckpoints();\n+        if (checkpoints != null && checkpoints.containsKey(r)) {\n             return getRoot(r);\n         } else {\n             return null;",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/d3fea45b096fa2a6f66bb529ed145ae8c7bb01e7/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java",
                "sha": "5c519c2e693db549b494349202210e41511f0639",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/d3fea45b096fa2a6f66bb529ed145ae8c7bb01e7/oak-core/src/test/java/org/apache/jackrabbit/oak/kernel/CheckpointTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/test/java/org/apache/jackrabbit/oak/kernel/CheckpointTest.java?ref=d3fea45b096fa2a6f66bb529ed145ae8c7bb01e7",
                "deletions": 0,
                "filename": "oak-core/src/test/java/org/apache/jackrabbit/oak/kernel/CheckpointTest.java",
                "patch": "@@ -107,4 +107,9 @@ public void checkpointInfo() throws CommitFailedException {\n         assertEquals(props, store.checkpointInfo(cp));\n     }\n \n+    @Test\n+    public void retrieveAny() {\n+        assertTrue(store.retrieve(\"r42-0-0\") == null);\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/d3fea45b096fa2a6f66bb529ed145ae8c7bb01e7/oak-core/src/test/java/org/apache/jackrabbit/oak/kernel/CheckpointTest.java",
                "sha": "f9fc298470d5ad2e4162cfdd1c69031a66880856",
                "status": "modified"
            }
        ],
        "message": "OAK-2363: NPE in DocumentNodeStore#retrieve for non existing checkpoint\nAdd null check and test case\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1646236 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/66195240e9c895d3f0940e2754a7b505166c8156",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "DocumentNodeStoreTest.java"
        ]
    },
    "jackrabbit-oak_d4ef60c": {
        "bug_id": "jackrabbit-oak_d4ef60c",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/d4ef60c19484d4295593a6e03b9c08975295160f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/d4ef60c19484d4295593a6e03b9c08975295160f/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/backup/FileStoreBackup.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/backup/FileStoreBackup.java?ref=d4ef60c19484d4295593a6e03b9c08975295160f",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/backup/FileStoreBackup.java",
                "patch": "@@ -69,7 +69,7 @@ public static void backup(NodeStore store, File destination)\n             } else {\n                 // 3.2 try to retrieve the previously backed up checkpoint\n                 NodeState before = store.retrieve(beforeCheckpoint);\n-                if (before != null) {\n+                if (before == null) {\n                     // the previous checkpoint is no longer available,\n                     // so use the backed up state as the basis of the\n                     // incremental backup diff",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/d4ef60c19484d4295593a6e03b9c08975295160f/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/backup/FileStoreBackup.java",
                "sha": "4757b9bb009603191c0e453588d0c95de4c3e271",
                "status": "modified"
            }
        ],
        "message": "OAK-1464 FileStoreBackup NPE in retrieving old state\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1571250 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/a6ff1c86fa326ee277e87eda7946ab6e5b135a52",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "FileStoreBackupTest.java"
        ]
    },
    "jackrabbit-oak_d569277": {
        "bug_id": "jackrabbit-oak_d569277",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/d56927746d55232b673a90f79073809c6b674064",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/d56927746d55232b673a90f79073809c6b674064/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CommitHookEnhancer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CommitHookEnhancer.java?ref=d56927746d55232b673a90f79073809c6b674064",
                "deletions": 1,
                "filename": "oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CommitHookEnhancer.java",
                "patch": "@@ -62,7 +62,7 @@ public NodeState processCommit(NodeState before, NodeState after, CommitInfo inf\n \n         NodeState result = hook.processCommit(compositeBefore, compositeAfter, info);\n         updatedBuilder = Optional.of(toComposite(result, compositeBefore));\n-        return updatedBuilder.get().getNodeState().getNodeStates().get(ctx.getGlobalStore());\n+        return updatedBuilder.get().getNodeState().getNodeState(ctx.getGlobalStore());\n     }\n \n     Optional<CompositeNodeBuilder> getUpdatedBuilder() {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/d56927746d55232b673a90f79073809c6b674064/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CommitHookEnhancer.java",
                "sha": "ef96b71136835749bd6822c2e9266ea2f75213aa",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/d56927746d55232b673a90f79073809c6b674064/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeState.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeState.java?ref=d56927746d55232b673a90f79073809c6b674064",
                "deletions": 14,
                "filename": "oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeState.java",
                "patch": "@@ -19,6 +19,9 @@\n package org.apache.jackrabbit.oak.composite;\n \n import com.google.common.base.Function;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Sets;\n import org.apache.jackrabbit.oak.api.PropertyState;\n import org.apache.jackrabbit.oak.commons.PathUtils;\n import org.apache.jackrabbit.oak.plugins.memory.MemoryChildNodeEntry;\n@@ -27,7 +30,10 @@\n import org.apache.jackrabbit.oak.spi.state.NodeBuilder;\n import org.apache.jackrabbit.oak.spi.state.NodeState;\n import org.apache.jackrabbit.oak.spi.state.NodeStateDiff;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+import javax.annotation.Nullable;\n import java.util.List;\n import java.util.Map;\n \n@@ -36,14 +42,18 @@\n import static com.google.common.collect.Iterables.concat;\n import static com.google.common.collect.Iterables.filter;\n import static com.google.common.collect.Iterables.transform;\n+import static com.google.common.collect.Maps.asMap;\n import static com.google.common.collect.Maps.transformValues;\n+import static com.google.common.collect.Sets.newHashSet;\n import static java.lang.Long.MAX_VALUE;\n import static java.util.Collections.singleton;\n import static org.apache.jackrabbit.oak.composite.CompositeNodeBuilder.simpleConcat;\n import static org.apache.jackrabbit.oak.spi.state.ChildNodeEntry.GET_NAME;\n \n class CompositeNodeState extends AbstractNodeState {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(CompositeNodeState.class);\n+\n     // A note on content held by node stores which is outside the mount boundaries\n     //\n     // As a matter of design, mounted stores will definitely hold information _above_\n@@ -75,8 +85,16 @@\n         this.owningStore = ctx.getOwningStore(path);\n     }\n \n-    Map<MountedNodeStore, NodeState> getNodeStates() {\n-        return nodeStates;\n+    NodeState getNodeState(MountedNodeStore mns) {\n+        NodeState nodeState = nodeStates.get(mns);\n+        if (nodeState != null) {\n+            return nodeState;\n+        }\n+\n+        // this shouldn't happen, so we need to log some more debug info\n+        String mountName = mns.getMount().isDefault() ? \"[default]\" : mns.getMount().getName();\n+        LOG.warn(\"Can't find node state for path {} and mount {}. The node state map: {}\", path, mountName, nodeStates);\n+        throw new IllegalStateException(\"Can't find the node state for mount \" + mountName);\n     }\n \n     @Override\n@@ -110,16 +128,16 @@ public long getPropertyCount() {\n     public boolean hasChildNode(String name) {\n         String childPath = simpleConcat(path, name);\n         MountedNodeStore mountedStore = ctx.getOwningStore(childPath);\n-        return nodeStates.get(mountedStore).hasChildNode(name);\n+        return getNodeState(mountedStore).hasChildNode(name);\n     }\n \n     @Override\n     public NodeState getChildNode(final String name) {\n         String childPath = simpleConcat(path, name);\n         if (!ctx.shouldBeComposite(childPath)) {\n-            return nodeStates.get(ctx.getOwningStore(childPath)).getChildNode(name);\n+            return getNodeState(ctx.getOwningStore(childPath)).getChildNode(name);\n         }\n-        Map<MountedNodeStore, NodeState> newNodeStates = transformValues(nodeStates, new Function<NodeState, NodeState>() {\n+        Map<MountedNodeStore, NodeState> newNodeStates = transformValues(safeGetMap(), new Function<NodeState, NodeState>() {\n             @Override\n             public NodeState apply(NodeState input) {\n                 return input.getChildNode(name);\n@@ -130,7 +148,7 @@ public NodeState apply(NodeState input) {\n \n     @Override\n     public long getChildNodeCount(final long max) {\n-        List<MountedNodeStore> contributingStores = ctx.getContributingStoresForNodes(path, nodeStates);\n+        List<MountedNodeStore> contributingStores = ctx.getContributingStoresForNodes(path, safeGetMap());\n         if (contributingStores.isEmpty()) {\n             return 0; // this shouldn't happen\n         } else if (contributingStores.size() == 1) {\n@@ -140,7 +158,7 @@ public long getChildNodeCount(final long max) {\n             return accumulateChildSizes(concat(transform(contributingStores, new Function<MountedNodeStore, Iterable<String>>() {\n                 @Override\n                 public Iterable<String> apply(MountedNodeStore mns) {\n-                    NodeState contributing = nodeStates.get(mns);\n+                    NodeState contributing = getNodeState(mns);\n                     if (contributing.getChildNodeCount(max) == MAX_VALUE) {\n                         return singleton(STOP_COUNTING_CHILDREN);\n                     } else {\n@@ -164,10 +182,10 @@ static long accumulateChildSizes(Iterable<String> nodeNames, long max) {\n \n     @Override\n     public Iterable<? extends ChildNodeEntry> getChildNodeEntries() {\n-        Iterable<? extends ChildNodeEntry> nativeChildren = concat(transform(ctx.getContributingStoresForNodes(path, nodeStates), new Function<MountedNodeStore, Iterable<? extends ChildNodeEntry>>() {\n+        Iterable<? extends ChildNodeEntry> nativeChildren = concat(transform(ctx.getContributingStoresForNodes(path, safeGetMap()), new Function<MountedNodeStore, Iterable<? extends ChildNodeEntry>>() {\n             @Override\n             public Iterable<? extends ChildNodeEntry> apply(final MountedNodeStore mountedNodeStore) {\n-                return filter(nodeStates.get(mountedNodeStore).getChildNodeEntries(), compose(ctx.belongsToStore(mountedNodeStore, path), GET_NAME));\n+                return filter(getNodeState(mountedNodeStore).getChildNodeEntries(), compose(ctx.belongsToStore(mountedNodeStore, path), GET_NAME));\n             }\n         }));\n         return transform(nativeChildren, new Function<ChildNodeEntry, ChildNodeEntry>() {\n@@ -185,13 +203,13 @@ public boolean compareAgainstBaseState(NodeState base, NodeStateDiff diff) {\n             CompositeNodeState multiBase = (CompositeNodeState) base;\n             NodeStateDiff wrappingDiff = new WrappingDiff(diff, multiBase);\n             boolean full = getWrappedNodeState().compareAgainstBaseState(multiBase.getWrappedNodeState(), new ChildrenDiffFilter(wrappingDiff, owningStore, true));\n-            for (MountedNodeStore mns : ctx.getContributingStoresForNodes(path, nodeStates)) {\n+            for (MountedNodeStore mns : ctx.getContributingStoresForNodes(path, safeGetMap())) {\n                 if (owningStore == mns) {\n                     continue;\n                 }\n                 NodeStateDiff childrenDiffFilter = new ChildrenDiffFilter(wrappingDiff, mns, false);\n-                NodeState contributing = nodeStates.get(mns);\n-                NodeState contributingBase = multiBase.nodeStates.get(mns);\n+                NodeState contributing = getNodeState(mns);\n+                NodeState contributingBase = multiBase.getNodeState(mns);\n                 full = full && contributing.compareAgainstBaseState(contributingBase, childrenDiffFilter);\n             }\n             return full;\n@@ -203,7 +221,7 @@ public boolean compareAgainstBaseState(NodeState base, NodeStateDiff diff) {\n     // write operations\n     @Override\n     public CompositeNodeBuilder builder() {\n-        Map<MountedNodeStore, NodeBuilder> nodeBuilders = transformValues(nodeStates, new Function<NodeState, NodeBuilder>() {\n+        Map<MountedNodeStore, NodeBuilder> nodeBuilders = transformValues(safeGetMap(), new Function<NodeState, NodeBuilder>() {\n             @Override\n             public NodeBuilder apply(NodeState input) {\n                 return input.builder();\n@@ -213,7 +231,11 @@ public NodeBuilder apply(NodeState input) {\n     }\n \n     private NodeState getWrappedNodeState() {\n-        return nodeStates.get(owningStore);\n+        return getNodeState(owningStore);\n+    }\n+\n+    private Map<MountedNodeStore, NodeState> safeGetMap() {\n+        return asMap(ctx.getAllMountedNodeStores(), this::getNodeState);\n     }\n \n     private class ChildrenDiffFilter implements NodeStateDiff {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/d56927746d55232b673a90f79073809c6b674064/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeState.java",
                "sha": "e2c6f97782d37cbe43c63b8a1c34be3fd7584fa3",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/d56927746d55232b673a90f79073809c6b674064/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositionContext.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositionContext.java?ref=d56927746d55232b673a90f79073809c6b674064",
                "deletions": 3,
                "filename": "oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositionContext.java",
                "patch": "@@ -18,6 +18,8 @@\n \n import com.google.common.base.Function;\n import com.google.common.base.Predicate;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Iterables;\n import org.apache.jackrabbit.oak.api.Blob;\n import org.apache.jackrabbit.oak.commons.PathUtils;\n@@ -32,6 +34,7 @@\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n import static com.google.common.collect.ImmutableMap.copyOf;\n import static com.google.common.collect.Iterables.concat;\n@@ -51,16 +54,25 @@\n \n     private final Map<Mount, MountedNodeStore> nodeStoresByMount;\n \n+    private final Set<MountedNodeStore> allStores;\n+\n     CompositionContext(MountInfoProvider mip, NodeStore globalStore, List<MountedNodeStore> nonDefaultStores) {\n         this.mip = mip;\n         this.globalStore = new MountedNodeStore(mip.getDefaultMount(), globalStore);\n         this.nonDefaultStores = nonDefaultStores;\n-        this.nodeStoresByMount = copyOf(uniqueIndex(getAllMountedNodeStores(), new Function<MountedNodeStore, Mount>() {\n+\n+        ImmutableSet.Builder<MountedNodeStore> b = ImmutableSet.builder();\n+        b.add(this.globalStore);\n+        b.addAll(this.nonDefaultStores);\n+        allStores = b.build();\n+\n+        this.nodeStoresByMount = copyOf(uniqueIndex(allStores, new Function<MountedNodeStore, Mount>() {\n             @Override\n             public Mount apply(MountedNodeStore input) {\n                 return input.getMount();\n             }\n         }));\n+\n     }\n \n     MountedNodeStore getGlobalStore() {\n@@ -152,8 +164,8 @@ public boolean apply(String input) {\n         }).isPresent();\n     }\n \n-    Iterable<MountedNodeStore> getAllMountedNodeStores() {\n-        return concat(singleton(globalStore), nonDefaultStores);\n+    Set<MountedNodeStore> getAllMountedNodeStores() {\n+        return allStores;\n     }\n \n     Blob createBlob(InputStream inputStream) throws IOException {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/d56927746d55232b673a90f79073809c6b674064/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositionContext.java",
                "sha": "122dc992b5a26fc609fb3824cc53095bedde29e6",
                "status": "modified"
            }
        ],
        "message": "OAK-6486: NPE in CompositeNodeStore\n\nLog diagnostic info if there's no node state for given mounted node store.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1802932 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/2867d90ed56dc9bee3e4d08198746e6e03b04445",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "CompositionContextTest.java"
        ]
    },
    "jackrabbit-oak_d6a2d3d": {
        "bug_id": "jackrabbit-oak_d6a2d3d",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/d6a2d3ddcfbb56f5fc5e7e02e76a4c58bdbbeab4",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/d6a2d3ddcfbb56f5fc5e7e02e76a4c58bdbbeab4/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBBlobStore.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBBlobStore.java?ref=d6a2d3ddcfbb56f5fc5e7e02e76a4c58bdbbeab4",
                "deletions": 2,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBBlobStore.java",
                "patch": "@@ -100,12 +100,16 @@ public void close() {\n                 }\n             }\n         }\n-        this.ch = null;\n+        try {\n+            this.ch.close();\n+        } catch (IOException ex) {\n+            LOG.error(\"closing connection handler\", ex);\n+        }\n     }\n \n     @Override\n     protected void finalize() {\n-        if (this.ch != null && this.callStack != null) {\n+        if (!this.ch.isClosed() && this.callStack != null) {\n             LOG.debug(\"finalizing RDBDocumentStore that was not disposed\", this.callStack);\n         }\n     }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/d6a2d3ddcfbb56f5fc5e7e02e76a4c58bdbbeab4/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBBlobStore.java",
                "sha": "43ec7303b8cdacc642f677341e3653edbe5b4d57",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/d6a2d3ddcfbb56f5fc5e7e02e76a4c58bdbbeab4/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBConnectionHandler.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBConnectionHandler.java?ref=d6a2d3ddcfbb56f5fc5e7e02e76a4c58bdbbeab4",
                "deletions": 4,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBConnectionHandler.java",
                "patch": "@@ -16,6 +16,8 @@\n  */\n package org.apache.jackrabbit.oak.plugins.document.rdb;\n \n+import java.io.Closeable;\n+import java.io.IOException;\n import java.sql.Connection;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n@@ -32,9 +34,10 @@\n /**\n  * Utility functions for connection handling.\n  */\n-public class RDBConnectionHandler {\n+public class RDBConnectionHandler implements Closeable {\n \n-    private final DataSource ds;\n+    private DataSource ds;\n+    private long closedTime = 0L;\n \n     private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(RDBConnectionHandler.class);\n \n@@ -56,7 +59,7 @@ public RDBConnectionHandler(@Nonnull DataSource ds) {\n      * Obtain a {@link Connection} suitable for read-only operations.\n      */\n     public @Nonnull Connection getROConnection() throws SQLException {\n-        Connection c = this.ds.getConnection();\n+        Connection c = getDataSource().getConnection();\n         c.setAutoCommit(false);\n         setReadOnly(c, true);\n         return c;\n@@ -66,7 +69,7 @@ public RDBConnectionHandler(@Nonnull DataSource ds) {\n      * Obtain a {@link Connection} suitable for read-write operations.\n      */\n     public @Nonnull Connection getRWConnection() throws SQLException {\n-        Connection c = this.ds.getConnection();\n+        Connection c = getDataSource().getConnection();\n         c.setAutoCommit(false);\n         setReadOnly(c, false);\n         return c;\n@@ -139,6 +142,24 @@ public ResultSet closeResultSet(@CheckForNull ResultSet rs) {\n         return null;\n     }\n \n+    public boolean isClosed() {\n+        return this.ds == null;\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        this.ds = null;\n+        this.closedTime = System.currentTimeMillis();\n+    }\n+\n+    private DataSource getDataSource() throws IllegalStateException {\n+        DataSource result = this.ds;\n+        if (result == null) {\n+            throw new IllegalStateException(\"Connection handler is already closed (\"\n+                    + (System.currentTimeMillis() - this.closedTime) + \"ms ago)\");\n+        }\n+        return result;\n+    }\n \n     // workaround for broken connection wrappers\n     // see https://issues.apache.org/jira/browse/OAK-2918",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/d6a2d3ddcfbb56f5fc5e7e02e76a4c58bdbbeab4/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBConnectionHandler.java",
                "sha": "1a6b8a15f4fca3412ed63b538fc94c20d54b5fb8",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/d6a2d3ddcfbb56f5fc5e7e02e76a4c58bdbbeab4/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java?ref=d6a2d3ddcfbb56f5fc5e7e02e76a4c58bdbbeab4",
                "deletions": 2,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "patch": "@@ -347,7 +347,11 @@ public void dispose() {\n             }\n             this.droppedTables = dropped.trim();\n         }\n-        this.ch = null;\n+        try {\n+            this.ch.close();\n+        } catch (IOException ex) {\n+            LOG.error(\"closing connection handler\", ex);\n+        }\n     }\n \n     @Override\n@@ -911,7 +915,7 @@ private void createTableFor(Connection con, Collection<? extends Document> col,\n \n     @Override\n     protected void finalize() {\n-        if (this.ch != null && this.callStack != null) {\n+        if (!this.ch.isClosed() && this.callStack != null) {\n             LOG.debug(\"finalizing RDBDocumentStore that was not disposed\", this.callStack);\n         }\n     }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/d6a2d3ddcfbb56f5fc5e7e02e76a4c58bdbbeab4/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "sha": "1082f3885ee9cdb90792029da842b3b040f89e73",
                "status": "modified"
            }
        ],
        "message": "OAK-2930 - RDBBlob/DocumentStore: do not NPE calls after dispose()\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1682494 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/39e931e22fe8a579822f622bd6328116ab25c9d6",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "RDBBlobStoreTest.java",
            "RDBConnectionHandlerTest.java",
            "RDBDocumentStoreTest.java"
        ]
    },
    "jackrabbit-oak_d773cfd": {
        "bug_id": "jackrabbit-oak_d773cfd",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/d773cfd24500b88c87cd24c0d80098ffef2c287e",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/d773cfd24500b88c87cd24c0d80098ffef2c287e/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/lucene/LuceneIndex.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/lucene/LuceneIndex.java?ref=d773cfd24500b88c87cd24c0d80098ffef2c287e",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/lucene/LuceneIndex.java",
                "patch": "@@ -165,7 +165,8 @@ private static Query getQuery(Filter filter) {\n                 last = pr.last.getString();\n             }\n \n-            if (first.equals(last) && pr.firstIncluding && pr.lastIncluding) {\n+            if (first != null && first.equals(last) && pr.firstIncluding\n+                    && pr.lastIncluding) {\n                 qs.add(new TermQuery(new Term(name, first)));\n             } else {\n                 qs.add(TermRangeQuery.newStringRange(name, first, last,",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/d773cfd24500b88c87cd24c0d80098ffef2c287e/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/lucene/LuceneIndex.java",
                "sha": "2698c8c57185191f4e270539e9570ee3d378358f",
                "status": "modified"
            }
        ],
        "message": "OAK-286 Possible NPE in LuceneIndex\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1378643 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/85f4e08eefcc57c70e312ee7ae1069883a577ecd",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "LuceneIndexTest.java"
        ]
    },
    "jackrabbit-oak_db03994": {
        "bug_id": "jackrabbit-oak_db03994",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/db039944fd62e1c48e58cbaacecba8021d96bb0a",
        "file": [
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/db039944fd62e1c48e58cbaacecba8021d96bb0a/oak-mongomk/src/main/java/org/apache/jackrabbit/mongomk/prototype/Commit.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-mongomk/src/main/java/org/apache/jackrabbit/mongomk/prototype/Commit.java?ref=db039944fd62e1c48e58cbaacecba8021d96bb0a",
                "deletions": 5,
                "filename": "oak-mongomk/src/main/java/org/apache/jackrabbit/mongomk/prototype/Commit.java",
                "patch": "@@ -41,8 +41,10 @@\n      * The maximum size of a document. If it is larger, it is split.\n      */\n     // TODO check which value is the best one\n-    private static final int MAX_DOCUMENT_SIZE = 16 * 1024;\n-    \n+    //private static final int MAX_DOCUMENT_SIZE = 16 * 1024;\n+    // TODO disabled until document split is fully implemented\n+    private static final int MAX_DOCUMENT_SIZE = Integer.MAX_VALUE;\n+\n     /**\n      * Whether to purge old revisions if a node gets too large. If false, old\n      * revisions are stored in a separate document. If true, old revisions are\n@@ -115,12 +117,38 @@ void apply() {\n         }\n     }\n \n+    void prepare(Revision baseRevision) {\n+        if (!operations.isEmpty()) {\n+            applyToDocumentStore(baseRevision);\n+            applyToCache();\n+        }\n+    }\n+\n     /**\n      * Apply the changes to the document store (to update MongoDB).\n      */\n     void applyToDocumentStore() {\n+        applyToDocumentStore(null);\n+    }\n+\n+    /**\n+     * Apply the changes to the document store (to update MongoDB).\n+     *\n+     * @param baseRevision the base revision of this commit. Currently only\n+     *                     used for branch commits.\n+     */\n+    void applyToDocumentStore(Revision baseRevision) {\n+        // the value in _revisions.<revision> property of the commit root node\n+        // regular commits use \"true\", which makes the commit visible to\n+        // other readers. branch commits use the base revision to indicate\n+        // the visibility of the commit\n+        String commitValue = baseRevision != null ? baseRevision.toString() : \"true\";\n         DocumentStore store = mk.getDocumentStore();\n         String commitRootPath = null;\n+        if (baseRevision != null) {\n+            // branch commits always use root node as commit root\n+            commitRootPath = \"/\";\n+        }\n         ArrayList<UpdateOp> newNodes = new ArrayList<UpdateOp>();\n         ArrayList<UpdateOp> changedNodes = new ArrayList<UpdateOp>();\n         for (String p : operations.keySet()) {\n@@ -160,7 +188,7 @@ void applyToDocumentStore() {\n             // no updates and root of commit is also new. that is,\n             // it is the root of a subtree added in a commit.\n             // so we try to add the root like all other nodes\n-            commitRoot.addMapEntry(UpdateOp.REVISIONS + \".\" + revision.toString(), \"true\");\n+            commitRoot.addMapEntry(UpdateOp.REVISIONS + \".\" + revision.toString(), commitValue);\n             newNodes.add(commitRoot);\n         }\n         try {\n@@ -191,7 +219,7 @@ void applyToDocumentStore() {\n             // first to check if there was a conflict, and only then to commit\n             // the revision, with the revision property set)\n             if (changedNodes.size() > 0 || !commitRoot.isNew) {\n-                commitRoot.addMapEntry(UpdateOp.REVISIONS + \".\" + revision.toString(), \"true\");\n+                commitRoot.addMapEntry(UpdateOp.REVISIONS + \".\" + revision.toString(), commitValue);\n                 createOrUpdateNode(store, commitRoot);\n                 operations.put(commitRootPath, commitRoot);\n             }\n@@ -207,7 +235,7 @@ private void createOrUpdateNode(DocumentStore store, UpdateOp op) {\n         if (baseRevision != null) {\n             // TODO detect conflicts here\n             Revision newestRev = mk.getNewestRevision(map, revision, true);\n-            if (mk.isRevisionNewer(newestRev, baseRevision)) {\n+            if (newestRev != null && mk.isRevisionNewer(newestRev, baseRevision)) {\n                 // TODO transaction rollback\n                 throw new MicroKernelException(\"The node \" + \n                         op.path + \" was changed in revision \" + ",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/db039944fd62e1c48e58cbaacecba8021d96bb0a/oak-mongomk/src/main/java/org/apache/jackrabbit/mongomk/prototype/Commit.java",
                "sha": "0454555312c9cb505ccc2577562782f09771df61",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/db039944fd62e1c48e58cbaacecba8021d96bb0a/oak-mongomk/src/main/java/org/apache/jackrabbit/mongomk/prototype/DocumentStore.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-mongomk/src/main/java/org/apache/jackrabbit/mongomk/prototype/DocumentStore.java?ref=db039944fd62e1c48e58cbaacecba8021d96bb0a",
                "deletions": 3,
                "filename": "oak-mongomk/src/main/java/org/apache/jackrabbit/mongomk/prototype/DocumentStore.java",
                "patch": "@@ -19,6 +19,11 @@\n import java.util.List;\n import java.util.Map;\n \n+import javax.annotation.CheckForNull;\n+import javax.annotation.Nonnull;\n+\n+import org.apache.jackrabbit.mk.api.MicroKernelException;\n+\n /**\n  * The interface for the backend storage for documents.\n  */\n@@ -34,18 +39,20 @@\n      * can modify it without affecting the stored version).\n      *\n      * @param collection the collection\n-     * @param path the path\n+     * @param key the key\n      * @return the map, or null if not found\n      */\n+    @CheckForNull\n     Map<String, Object> find(Collection collection, String key);\n \n+    @Nonnull\n     List<Map<String, Object>> query(Collection collection, String fromKey, String toKey, int limit);\n     \n     /**\n      * Remove a document.\n      *\n      * @param collection the collection\n-     * @param path the path\n+     * @param key the key\n      */\n     void remove(Collection collection, String key);\n \n@@ -65,8 +72,11 @@\n      * @param collection the collection\n      * @param update the update operation\n      * @return the new document\n+     * @throws MicroKernelException if the operation failed.\n      */    \n-    Map<String, Object> createOrUpdate(Collection collection, UpdateOp update); \n+    @Nonnull\n+    Map<String, Object> createOrUpdate(Collection collection, UpdateOp update)\n+            throws MicroKernelException;\n     \n     void dispose();\n ",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/db039944fd62e1c48e58cbaacecba8021d96bb0a/oak-mongomk/src/main/java/org/apache/jackrabbit/mongomk/prototype/DocumentStore.java",
                "sha": "08c2553ea0b0d1f0aa70b729ca519d50bfcca087",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/db039944fd62e1c48e58cbaacecba8021d96bb0a/oak-mongomk/src/main/java/org/apache/jackrabbit/mongomk/prototype/MemoryDocumentStore.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-mongomk/src/main/java/org/apache/jackrabbit/mongomk/prototype/MemoryDocumentStore.java?ref=db039944fd62e1c48e58cbaacecba8021d96bb0a",
                "deletions": 0,
                "filename": "oak-mongomk/src/main/java/org/apache/jackrabbit/mongomk/prototype/MemoryDocumentStore.java",
                "patch": "@@ -23,6 +23,8 @@\n import java.util.concurrent.ConcurrentNavigableMap;\n import java.util.concurrent.ConcurrentSkipListMap;\n \n+import javax.annotation.Nonnull;\n+\n import org.apache.jackrabbit.mongomk.prototype.UpdateOp.Operation;\n \n /**\n@@ -58,6 +60,7 @@\n         return copy;\n     }\n     \n+    @Nonnull\n     public List<Map<String, Object>> query(Collection collection, String fromKey, String toKey, int limit) {\n         ConcurrentSkipListMap<String, Map<String, Object>> map = getMap(collection);\n         ConcurrentNavigableMap<String, Map<String, Object>> sub = map.subMap(fromKey, toKey);\n@@ -94,6 +97,7 @@ public void remove(Collection collection, String path) {\n         }\n     }\n \n+    @Nonnull\n     public Map<String, Object> createOrUpdate(Collection collection, UpdateOp update) {\n         ConcurrentSkipListMap<String, Map<String, Object>> map = getMap(collection);\n         Map<String, Object> n;",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/db039944fd62e1c48e58cbaacecba8021d96bb0a/oak-mongomk/src/main/java/org/apache/jackrabbit/mongomk/prototype/MemoryDocumentStore.java",
                "sha": "09af5068a9d54276faa8de0938476ef4e0b3c857",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/db039944fd62e1c48e58cbaacecba8021d96bb0a/oak-mongomk/src/main/java/org/apache/jackrabbit/mongomk/prototype/MongoDocumentStore.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-mongomk/src/main/java/org/apache/jackrabbit/mongomk/prototype/MongoDocumentStore.java?ref=db039944fd62e1c48e58cbaacecba8021d96bb0a",
                "deletions": 0,
                "filename": "oak-mongomk/src/main/java/org/apache/jackrabbit/mongomk/prototype/MongoDocumentStore.java",
                "patch": "@@ -25,6 +25,8 @@\n import java.util.concurrent.Callable;\n import java.util.concurrent.ExecutionException;\n \n+import javax.annotation.Nonnull;\n+\n import com.google.common.cache.Cache;\n import com.google.common.cache.CacheBuilder;\n import org.apache.jackrabbit.mk.api.MicroKernelException;\n@@ -130,6 +132,7 @@ public void finalize() throws Throwable {\n         }\n     }\n     \n+    @Nonnull\n     @Override\n     public List<Map<String, Object>> query(Collection collection,\n             String fromKey, String toKey, int limit) {\n@@ -172,6 +175,7 @@ public void remove(Collection collection, String path) {\n         }\n     }\n \n+    @Nonnull\n     @Override\n     public Map<String, Object> createOrUpdate(Collection collection, UpdateOp updateOp) {\n         log(\"createOrUpdate\", updateOp);        ",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/db039944fd62e1c48e58cbaacecba8021d96bb0a/oak-mongomk/src/main/java/org/apache/jackrabbit/mongomk/prototype/MongoDocumentStore.java",
                "sha": "6bdb9efa4d98d83011cb9785141f98a5016f3f42",
                "status": "modified"
            },
            {
                "additions": 100,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/db039944fd62e1c48e58cbaacecba8021d96bb0a/oak-mongomk/src/main/java/org/apache/jackrabbit/mongomk/prototype/MongoMK.java",
                "changes": 133,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-mongomk/src/main/java/org/apache/jackrabbit/mongomk/prototype/MongoMK.java?ref=db039944fd62e1c48e58cbaacecba8021d96bb0a",
                "deletions": 33,
                "filename": "oak-mongomk/src/main/java/org/apache/jackrabbit/mongomk/prototype/MongoMK.java",
                "patch": "@@ -29,6 +29,7 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n \n import com.google.common.cache.Cache;\n import com.google.common.cache.CacheBuilder;\n@@ -139,8 +140,8 @@\n     /**\n      * Maps branch commit revision to revision it is based on\n      */\n-    private final Map<String, String> branchCommits =\n-            Collections.synchronizedMap(new HashMap<String, String>());\n+    private final Map<Revision, Revision> branchCommits =\n+            Collections.synchronizedMap(new HashMap<Revision, Revision>());\n \n     /**\n      * Create a new in-memory MongoMK used for testing.\n@@ -265,6 +266,29 @@ private void checkRevisionAge(Revision r, String path) {\n     }\n     \n     private boolean includeRevision(Revision x, Revision requestRevision) {\n+        if (branchCommits.containsKey(x)) {\n+            // only include if requested revision is also a branch revision\n+            // with a history including x\n+            Revision rev = requestRevision;\n+            for (;;) {\n+                if (rev != null) {\n+                    if (rev.equals(x)) {\n+                        return true;\n+                    }\n+                } else {\n+                    // not part of branch identified by requestedRevision\n+                    return false;\n+                }\n+                rev = branchCommits.get(rev);\n+            }\n+        }\n+        // assert: x is not a branch commit\n+        while (branchCommits.containsKey(requestRevision)) {\n+            // reset requestRevision to branch base revision to make\n+            // sure we don't include revisions committed after branch\n+            // was created\n+            requestRevision = branchCommits.get(requestRevision);\n+        }\n         if (x.getClusterId() == this.clusterId && \n                 requestRevision.getClusterId() == this.clusterId) {\n             // both revisions were created by this cluster node: \n@@ -275,7 +299,7 @@ private boolean includeRevision(Revision x, Revision requestRevision) {\n         return requestRevision.compareRevisionTime(x) >= 0;\n     }\n     \n-    boolean isRevisionNewer(Revision x, Revision previous) {\n+    boolean isRevisionNewer(@Nonnull Revision x, @Nonnull Revision previous) {\n         // TODO currently we only compare the timestamps\n         return x.compareRevisionTime(previous) > 0;\n     }\n@@ -285,16 +309,23 @@ boolean isRevisionNewer(Revision x, Revision previous) {\n      * considered valid if the given node map is the root of the commit, or the\n      * commit root has the revision set. This method may read further nodes to\n      * perform this check.\n+     * This method also takes pending branches into consideration.\n+     * The <code>readRevision</code> identifies the read revision used by the\n+     * client, which may be a branch revision logged in {@link #branchCommits}.\n+     * The revision <code>rev</code> is valid if it is part of the branch\n+     * history of <code>readRevision</code>.\n      *\n      * @param rev     revision to check.\n+     * @param readRevision the read revision of the client.\n      * @param nodeMap the node to check.\n      * @return <code>true</code> if the revision is valid; <code>false</code>\n      *         otherwise.\n      */\n-    boolean isValidRevision(Revision rev, Map<String, Object> nodeMap) {\n-        @SuppressWarnings(\"unchecked\")\n-        Map<String, String> revisions = (Map<String, String>) nodeMap.get(UpdateOp.REVISIONS);\n-        if (revisions != null && revisions.containsKey(rev.toString())) {\n+    boolean isValidRevision(@Nonnull Revision rev,\n+                            @Nonnull Revision readRevision,\n+                            @Nonnull Map<String, Object> nodeMap) {\n+        //noinspection unchecked\n+        if (isCommitted(rev, readRevision, (Map<String, String>) nodeMap.get(UpdateOp.REVISIONS))) {\n             return true;\n         }\n         // check commit root\n@@ -325,8 +356,37 @@ boolean isValidRevision(Revision rev, Map<String, Object> nodeMap) {\n             return false;\n         }\n         //noinspection unchecked\n-        revisions = (Map<String, String>) nodeMap.get(UpdateOp.REVISIONS);\n-        return revisions != null && revisions.containsKey(rev.toString());\n+        return isCommitted(rev, readRevision, (Map<String, String>) nodeMap.get(UpdateOp.REVISIONS));\n+    }\n+\n+    /**\n+     * Returns <code>true</code> if the given revision is set to committed in\n+     * the revisions map. That is, the revision exists in the map and the string\n+     * value is <code>\"true\"</code> or equals the <code>readRevision</code>.\n+     *\n+     * @param revision  the revision to check.\n+     * @param readRevision the read revision.\n+     * @param revisions the revisions map, or <code>null</code> if none is set.\n+     * @return <code>true</code> if the revision is committed, otherwise\n+     *         <code>false</code>.\n+     */\n+    private boolean isCommitted(@Nonnull Revision revision,\n+                                @Nonnull Revision readRevision,\n+                                @Nullable Map<String, String> revisions) {\n+        if (revision.equals(readRevision)) {\n+            return true;\n+        }\n+        if (revisions == null) {\n+            return false;\n+        }\n+        String value = revisions.get(revision.toString());\n+        if (value == null) {\n+            return false;\n+        }\n+        if (!value.equals(\"true\")) {\n+            revision = Revision.fromString(value);\n+        }\n+        return includeRevision(revision, readRevision);\n     }\n \n     public Children getChildren(String path, Revision rev, int limit) {\n@@ -447,12 +507,8 @@ private String getLatestValue(Map<String, String> valueMap, Revision min, Revisi\n     }\n \n     @Override\n-    public synchronized String getHeadRevision() throws MicroKernelException {\n-        String head = headRevision.toString();\n-        while (branchCommits.containsKey(head)) {\n-            head = branchCommits.get(head);\n-        }\n-        return head;\n+    public String getHeadRevision() throws MicroKernelException {\n+        return headRevision.toString();\n     }\n \n     @Override\n@@ -647,10 +703,10 @@ public synchronized String commit(String rootPath, String json, String baseRevId\n                 String sourcePath = path;\n                 String targetPath = t.readString();\n                 if (!PathUtils.isAbsolute(targetPath)) {\n-                    targetPath = PathUtils.concat(path, targetPath);\n+                    targetPath = PathUtils.concat(rootPath, targetPath);\n                 }\n                 commit.moveNode(sourcePath, targetPath);\n-                moveNode(sourcePath, targetPath, Revision.fromString(stripBranchRevMarker(baseRevId)), commit);\n+                moveNode(sourcePath, targetPath, baseRev, commit);\n                 break;\n             }\n             case '*': {\n@@ -659,23 +715,22 @@ public synchronized String commit(String rootPath, String json, String baseRevId\n                 String sourcePath = path;\n                 String targetPath = t.readString();\n                 if (!PathUtils.isAbsolute(targetPath)) {\n-                    targetPath = PathUtils.concat(path, targetPath);\n+                    targetPath = PathUtils.concat(rootPath, targetPath);\n                 }\n                 commit.copyNode(sourcePath, targetPath);\n-                copyNode(sourcePath, targetPath, Revision.fromString(stripBranchRevMarker(baseRevId)), commit);\n+                copyNode(sourcePath, targetPath, baseRev, commit);\n                 break;\n             }\n             default:\n                 throw new MicroKernelException(\"token: \" + (char) t.getTokenType());\n             }\n         }\n         if (baseRevId.startsWith(\"b\")) {\n-            // just commit to head currently\n-            commit.apply();\n+            // prepare commit\n+            commit.prepare(baseRev);\n             // remember branch commit\n-            branchCommits.put(rev.toString(), baseRevId.substring(1));\n+            branchCommits.put(rev, baseRev);\n \n-            headRevision = commit.getRevision();\n             return \"b\" + rev.toString();\n \n             // String jsonBranch = branchCommits.remove(revisionId);\n@@ -777,7 +832,8 @@ private Revision getLiveRevision(Map<String, Object> nodeMap,\n         String value = null;\n         for (String r : valueMap.keySet()) {\n             Revision propRev = Revision.fromString(r);\n-            if (isRevisionNewer(propRev, maxRev)) {\n+            if (isRevisionNewer(propRev, maxRev)\n+                    || !isValidRevision(propRev, maxRev, nodeMap)) {\n                 continue;\n             }\n             if (firstRev == null || isRevisionNewer(propRev, firstRev)) {\n@@ -799,7 +855,7 @@ private Revision getLiveRevision(Map<String, Object> nodeMap,\n      * @param onlyCommitted whether only committed changes should be considered\n      * @return the revision, or null if deleted\n      */\n-    Revision getNewestRevision(Map<String, Object> nodeMap, Revision before, boolean onlyCommitted) {\n+    @Nullable Revision getNewestRevision(Map<String, Object> nodeMap, Revision before, boolean onlyCommitted) {\n         if (nodeMap == null) {\n             return null;\n         }\n@@ -848,11 +904,11 @@ public static void parseAddNode(Commit commit, JsopReader t, String path) {\n     }\n \n     @Override\n-    public String branch(String trunkRevisionId) throws MicroKernelException {\n-        // TODO improve implementation if needed\n-        String branchId = \"b\" + trunkRevisionId;\n-        // branchCommits.put(branchId, \"\");\n-        return branchId;\n+    public String branch(@Nullable String trunkRevisionId) throws MicroKernelException {\n+        // nothing is written when the branch is created, the returned\n+        // revision simply acts as a reference to the branch base revision\n+        String revisionId = trunkRevisionId != null ? trunkRevisionId : headRevision.toString();\n+        return \"b\" + revisionId;\n     }\n \n     @Override\n@@ -865,11 +921,22 @@ public String merge(String branchRevisionId, String message)\n \n         // reading from the branch is reading from the trunk currently\n         String revisionId = branchRevisionId.substring(1).replace('+', ' ').trim();\n-        String baseRevId = revisionId;\n+        // make branch commits visible\n+        List<Revision> branchRevisions = new ArrayList<Revision>();\n+        UpdateOp op = new UpdateOp(\"/\", Utils.getIdFromPath(\"/\"), false);\n+        Revision baseRevId = Revision.fromString(revisionId);\n         while (baseRevId != null) {\n-            baseRevId = branchCommits.remove(baseRevId);\n+            branchRevisions.add(baseRevId);\n+            op.set(UpdateOp.REVISIONS + \".\" + baseRevId, \"true\");\n+            baseRevId = branchCommits.get(baseRevId);\n         }\n-        return revisionId;\n+        store.createOrUpdate(DocumentStore.Collection.NODES, op);\n+        // remove from branchCommits map after successful update\n+        for (Revision r : branchRevisions) {\n+            branchCommits.remove(r);\n+        }\n+        headRevision = newRevision();\n+        return headRevision.toString();\n \n         // TODO improve implementation if needed\n         // if (!branchRevisionId.startsWith(\"b\")) {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/db039944fd62e1c48e58cbaacecba8021d96bb0a/oak-mongomk/src/main/java/org/apache/jackrabbit/mongomk/prototype/MongoMK.java",
                "sha": "19981392eaf355acb4868eb525254ecbbab0dc65",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/db039944fd62e1c48e58cbaacecba8021d96bb0a/oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/AbstractMongoConnectionTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/AbstractMongoConnectionTest.java?ref=db039944fd62e1c48e58cbaacecba8021d96bb0a",
                "deletions": 3,
                "filename": "oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/AbstractMongoConnectionTest.java",
                "patch": "@@ -41,31 +41,39 @@\n     protected static final String DB =\n             System.getProperty(\"mongo.db\", \"MongoMKDB\");\n \n-    protected static MongoConnection mongoConnection;\n+    protected static Boolean mongoAvailable;\n+\n+    protected MongoConnection mongoConnection;\n \n     private static Exception mongoException = null;\n \n     @BeforeClass\n     public static void setUpBeforeClass() throws Exception {\n-        if (mongoConnection == null) {\n-            mongoConnection = new MongoConnection(HOST, PORT, DB);\n+        if (mongoAvailable == null) {\n+            MongoConnection mongoConnection = new MongoConnection(HOST, PORT, DB);\n             try {\n                 mongoConnection.getDB().command(new BasicDBObject(\"ping\", 1));\n+                mongoAvailable = Boolean.TRUE;\n             } catch (Exception e) {\n+                mongoAvailable = Boolean.FALSE;\n                 mongoException = e;\n+            } finally {\n+                mongoConnection.close();\n             }\n         }\n         Assume.assumeNoException(mongoException);\n     }\n \n     @Before\n     public void setUpConnection() throws Exception {\n+        mongoConnection = new MongoConnection(HOST, PORT, DB);\n         dropCollections(mongoConnection.getDB());\n     }\n \n     @After\n     public void tearDownConnection() throws Exception {\n         dropCollections(mongoConnection.getDB());\n+        mongoConnection.close();\n     }\n \n     protected void dropCollections(DB db) throws Exception {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/db039944fd62e1c48e58cbaacecba8021d96bb0a/oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/AbstractMongoConnectionTest.java",
                "sha": "ec893c4722b4b101ddad4672f15bb3781d340658",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/db039944fd62e1c48e58cbaacecba8021d96bb0a/oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/BaseMongoMicroKernelTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/BaseMongoMicroKernelTest.java?ref=db039944fd62e1c48e58cbaacecba8021d96bb0a",
                "deletions": 4,
                "filename": "oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/BaseMongoMicroKernelTest.java",
                "patch": "@@ -39,7 +39,7 @@\n  */\n public class BaseMongoMicroKernelTest extends AbstractMongoConnectionTest {\n \n-    public static MicroKernel mk;\n+    public MicroKernel mk;\n \n     @Before\n     public void setUp() throws Exception {\n@@ -95,13 +95,13 @@ protected void assertNodesNotExist(String revision, String...paths) {\n     }\n \n     protected void assertPropExists(String rev, String path, String property) {\n-        String nodes = mk.getNodes(path, rev, -1 /*depth*/, 0 /*offset*/, -1 /*maxChildNodes*/, null /*filter*/);\n+        String nodes = mk.getNodes(path, rev, 0 /*depth*/, 0 /*offset*/, -1 /*maxChildNodes*/, null /*filter*/);\n         JSONObject obj = parseJSONObject(nodes);\n         assertPropertyExists(obj, property);\n     }\n \n     protected void assertPropNotExists(String rev, String path, String property) {\n-        String nodes = mk.getNodes(path, rev, -1 /*depth*/, 0 /*offset*/, -1 /*maxChildNodes*/, null /*filter*/);\n+        String nodes = mk.getNodes(path, rev, 0 /*depth*/, 0 /*offset*/, -1 /*maxChildNodes*/, null /*filter*/);\n         if (nodes == null) {\n             return;\n         }\n@@ -110,7 +110,7 @@ protected void assertPropNotExists(String rev, String path, String property) {\n     }\n \n     protected void assertPropValue(String rev, String path, String property, String value) {\n-        String nodes = mk.getNodes(path, rev, -1 /*depth*/, 0 /*offset*/, -1 /*maxChildNodes*/, null /*filter*/);\n+        String nodes = mk.getNodes(path, rev, 0 /*depth*/, 0 /*offset*/, -1 /*maxChildNodes*/, null /*filter*/);\n         JSONObject obj = parseJSONObject(nodes);\n         assertPropertyValue(obj, property, value);\n     }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/db039944fd62e1c48e58cbaacecba8021d96bb0a/oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/BaseMongoMicroKernelTest.java",
                "sha": "5667c1111e03c15c0a13eed4f422ca26096787c6",
                "status": "modified"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/db039944fd62e1c48e58cbaacecba8021d96bb0a/oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/prototype/BaseMongoMKTest.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/prototype/BaseMongoMKTest.java?ref=db039944fd62e1c48e58cbaacecba8021d96bb0a",
                "deletions": 0,
                "filename": "oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/prototype/BaseMongoMKTest.java",
                "patch": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.mongomk.prototype;\n+\n+import org.apache.jackrabbit.mongomk.BaseMongoMicroKernelTest;\n+import org.apache.jackrabbit.mongomk.prototype.MongoMK;\n+import org.junit.Before;\n+\n+import com.mongodb.DB;\n+\n+/**\n+ * <code>BaseMongoMKTest</code>...\n+ */\n+public class BaseMongoMKTest extends BaseMongoMicroKernelTest {\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        DB db = mongoConnection.getDB();\n+        mk = new MongoMK(db, 0);\n+    }\n+\n+    @Override\n+    public void tearDownConnection() throws Exception {\n+        super.tearDownConnection();\n+        ((MongoMK) mk).dispose();\n+    }\n+}",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/db039944fd62e1c48e58cbaacecba8021d96bb0a/oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/prototype/BaseMongoMKTest.java",
                "sha": "824fc8ccc51171d219bec41531775d0b65642f5d",
                "status": "added"
            },
            {
                "additions": 421,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/db039944fd62e1c48e58cbaacecba8021d96bb0a/oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/prototype/MongoMKBranchMergeTest.java",
                "changes": 421,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/prototype/MongoMKBranchMergeTest.java?ref=db039944fd62e1c48e58cbaacecba8021d96bb0a",
                "deletions": 0,
                "filename": "oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/prototype/MongoMKBranchMergeTest.java",
                "patch": "@@ -0,0 +1,421 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.mongomk.prototype;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.jackrabbit.mk.api.MicroKernelException;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for {@code MicroKernel#branch}\n+ */\n+public class MongoMKBranchMergeTest extends BaseMongoMKTest {\n+\n+    @Test\n+    public void oneBranchAddedChildren1() {\n+        addNodes(null, \"/trunk\", \"/trunk/child1\");\n+        assertNodesExist(null, \"/trunk\", \"/trunk/child1\");\n+\n+        String branchRev = mk.branch(null);\n+\n+        branchRev = addNodes(branchRev, \"/branch1\", \"/branch1/child1\");\n+        assertNodesExist(branchRev, \"/trunk\", \"/trunk/child1\");\n+        assertNodesExist(branchRev, \"/branch1\", \"/branch1/child1\");\n+        assertNodesNotExist(null, \"/branch1\", \"/branch1/child1\");\n+\n+        addNodes(null, \"/trunk/child2\");\n+        assertNodesExist(null, \"/trunk/child2\");\n+        assertNodesNotExist(branchRev, \"/trunk/child2\");\n+\n+        mk.merge(branchRev, \"\");\n+        assertNodesExist(null, \"/trunk\", \"/trunk/child1\", \"/trunk/child2\", \"/branch1\", \"/branch1/child1\");\n+    }\n+\n+    @Test\n+    public void oneBranchAddedChildren2() {\n+        addNodes(null, \"/trunk\", \"/trunk/child1\");\n+        assertNodesExist(null, \"/trunk\", \"/trunk/child1\");\n+\n+        String branchRev = mk.branch(null);\n+\n+        branchRev = addNodes(branchRev, \"/trunk/child1/child2\");\n+        assertNodesExist(branchRev, \"/trunk\", \"/trunk/child1\");\n+        assertNodesExist(branchRev, \"/trunk/child1/child2\");\n+        assertNodesNotExist(null, \"/trunk/child1/child2\");\n+\n+        addNodes(null, \"/trunk/child3\");\n+        assertNodesExist(null, \"/trunk/child3\");\n+        assertNodesNotExist(branchRev, \"/trunk/child3\");\n+\n+        mk.merge(branchRev, \"\");\n+        assertNodesExist(null, \"/trunk\", \"/trunk/child1\", \"/trunk/child1/child2\", \"/trunk/child3\");\n+    }\n+\n+    @Test\n+    public void oneBranchAddedChildren3() {\n+        addNodes(null, \"/root\", \"/root/child1\");\n+        assertNodesExist(null, \"/root\", \"/root/child1\");\n+\n+        String branchRev = mk.branch(null);\n+        System.out.println(\"branchRev: \" + branchRev);\n+\n+        addNodes(null, \"/root/child2\");\n+        assertNodesExist(null, \"/root\", \"/root/child1\", \"/root/child2\");\n+        assertNodesExist(branchRev, \"/root\", \"/root/child1\");\n+        assertNodesNotExist(branchRev, \"/root/child2\");\n+\n+        branchRev = addNodes(branchRev, \"/root/child1/child3\", \"/root/child4\");\n+        assertNodesExist(branchRev, \"/root\", \"/root/child1\", \"/root/child1/child3\", \"/root/child4\");\n+        assertNodesNotExist(branchRev, \"/root/child2\");\n+        assertNodesExist(null, \"/root\", \"/root/child1\", \"/root/child2\");\n+        assertNodesNotExist(null, \"/root/child1/child3\", \"/root/child4\");\n+\n+        mk.merge(branchRev, \"\");\n+        assertNodesExist(null, \"/root\", \"/root/child1\", \"/root/child2\",\n+                \"/root/child1/child3\", \"/root/child4\");\n+    }\n+\n+    @Test\n+    public void oneBranchRemovedChildren() {\n+        addNodes(null, \"/trunk\", \"/trunk/child1\");\n+        assertNodesExist(null, \"/trunk\", \"/trunk/child1\");\n+\n+        String branchRev = mk.branch(null);\n+\n+        branchRev = removeNodes(branchRev, \"/trunk/child1\");\n+        assertNodesExist(branchRev, \"/trunk\");\n+        assertNodesNotExist(branchRev, \"/trunk/child1\");\n+        assertNodesExist(null, \"/trunk\", \"/trunk/child1\");\n+\n+        mk.merge(branchRev, \"\");\n+        assertNodesExist(null, \"/trunk\");\n+        assertNodesNotExist(null, \"/trunk/child1\");\n+    }\n+\n+    @Test\n+    public void oneBranchRemovedRoot() {\n+        addNodes(null, \"/trunk\", \"/trunk/child1\");\n+        assertNodesExist(null, \"/trunk\", \"/trunk/child1\");\n+\n+        String branchRev = mk.branch(null);\n+\n+        branchRev = removeNodes(branchRev, \"/trunk\");\n+        assertNodesNotExist(branchRev, \"/trunk\", \"/trunk/child1\");\n+        assertNodesExist(null, \"/trunk\", \"/trunk/child1\");\n+\n+        mk.merge(branchRev, \"\");\n+        assertNodesNotExist(null, \"/trunk\", \"/trunk/child1\");\n+    }\n+\n+    /**\n+     * This is a test to make sure properties are properly escaped in merge.\n+     */\n+    @Test\n+    public void oneBranchAddPropertyRoot() {\n+        String branchRev = mk.branch(null);\n+\n+        branchRev = setProp(branchRev, \"/jcr:primaryType\", \"nam:rep:root\");\n+        assertPropExists(branchRev, \"/\", \"jcr:primaryType\");\n+\n+        branchRev = mk.merge(branchRev, \"\");\n+        assertPropExists(branchRev, \"/\", \"jcr:primaryType\");\n+\n+        String mergedNode = mk.getNodes(\"/\", branchRev, 0, 0, -1, null);\n+        String expectedNode = \"{\\\"jcr:primaryType\\\":\\\"nam:rep:root\\\",\\\":childNodeCount\\\":0}\";\n+        assertEquals(\"Wrong property value after merge\", expectedNode, mergedNode);\n+    }\n+\n+    @Test\n+    public void oneBranchChangedProperties() {\n+        addNodes(null, \"/trunk\", \"/trunk/child1\");\n+        setProp(null, \"/trunk/child1/prop1\", \"value1\");\n+        setProp(null, \"/trunk/child1/prop2\", \"value2\");\n+        assertNodesExist(null, \"/trunk\", \"/trunk/child1\");\n+        assertPropExists(null, \"/trunk/child1\", \"prop1\");\n+        assertPropExists(null, \"/trunk/child1\", \"prop2\");\n+\n+        String branchRev = mk.branch(null);\n+\n+        branchRev = setProp(branchRev, \"/trunk/child1/prop1\", \"value1a\");\n+        branchRev = setProp(branchRev, \"/trunk/child1/prop2\", null);\n+        branchRev = setProp(branchRev, \"/trunk/child1/prop3\", \"value3\");\n+        assertPropValue(branchRev, \"/trunk/child1\", \"prop1\", \"value1a\");\n+        assertPropNotExists(branchRev, \"/trunk/child1\", \"prop2\");\n+        assertPropValue(branchRev, \"/trunk/child1\", \"prop3\", \"value3\");\n+        assertPropValue(null, \"/trunk/child1\", \"prop1\", \"value1\");\n+        assertPropExists(null, \"/trunk/child1\", \"prop2\");\n+        assertPropNotExists(null, \"/trunk/child1\", \"prop3\");\n+\n+        mk.merge(branchRev, \"\");\n+        assertPropValue(null, \"/trunk/child1\", \"prop1\", \"value1a\");\n+        assertPropNotExists(null, \"/trunk/child1\", \"prop2\");\n+        assertPropValue(null, \"/trunk/child1\", \"prop3\", \"value3\");\n+    }\n+\n+    @Test\n+    public void oneBranchAddedSubChildren() {\n+        addNodes(null, \"/trunk\", \"/trunk/child1\", \"/trunk/child1/child2\", \"/trunk/child1/child2/child3\");\n+        assertNodesExist(null, \"/trunk\", \"/trunk/child1\", \"/trunk/child1/child2\", \"/trunk/child1/child2/child3\");\n+\n+        String branchRev = mk.branch(null);\n+\n+        branchRev = addNodes(branchRev, \"/branch1\", \"/branch1/child1\", \"/branch1/child1/child2\", \"/branch1/child1/child2/child3\");\n+        assertNodesExist(branchRev, \"/trunk\", \"/trunk/child1\", \"/trunk/child1/child2\", \"/trunk/child1/child2/child3\");\n+        assertNodesExist(branchRev, \"/branch1\", \"/branch1/child1\", \"/branch1/child1/child2\", \"/branch1/child1/child2/child3\");\n+        assertNodesNotExist(null, \"/branch1\", \"/branch1/child1\", \"/branch1/child1/child2\", \"/branch1/child1/child2/child3\");\n+\n+        addNodes(null, \"/trunk/child1/child2/child3/child4\", \"/trunk/child5\");\n+        assertNodesExist(null, \"/trunk/child1/child2/child3/child4\", \"/trunk/child5\");\n+        assertNodesNotExist(branchRev, \"/trunk/child1/child2/child3/child4\", \"/trunk/child5\");\n+\n+        mk.merge(branchRev, \"\");\n+        assertNodesExist(null, \"/trunk\", \"/trunk/child1\", \"/trunk/child1/child2\", \"/trunk/child1/child2/child3\", \"/trunk/child1/child2/child3/child4\");\n+        assertNodesExist(null, \"/branch1\", \"/branch1/child1\", \"/branch1/child1/child2\", \"/branch1/child1/child2/child3\");\n+    }\n+\n+    @Test\n+    public void oneBranchAddedChildrenAndAddedProperties() {\n+        addNodes(null, \"/trunk\", \"/trunk/child1\");\n+        setProp(null, \"/trunk/child1/prop1\", \"value1\");\n+        setProp(null, \"/trunk/child1/prop2\", \"value2\");\n+        assertNodesExist(null, \"/trunk\", \"/trunk/child1\");\n+        assertPropExists(null, \"/trunk/child1\", \"prop1\");\n+        assertPropExists(null, \"/trunk/child1\", \"prop2\");\n+\n+        String branchRev = mk.branch(null);\n+\n+        branchRev = addNodes(branchRev, \"/branch1\", \"/branch1/child1\");\n+        branchRev = setProp(branchRev, \"/branch1/child1/prop1\", \"value1\");\n+        branchRev = setProp(branchRev, \"/branch1/child1/prop2\", \"value2\");\n+        assertNodesExist(branchRev, \"/trunk\", \"/trunk/child1\");\n+        assertPropExists(branchRev, \"/trunk/child1\", \"prop1\");\n+        assertPropExists(branchRev, \"/trunk/child1\", \"prop2\");\n+        assertNodesExist(branchRev, \"/branch1\", \"/branch1/child1\");\n+        assertPropExists(branchRev, \"/branch1/child1\", \"prop1\");\n+        assertPropExists(branchRev, \"/branch1/child1\", \"prop2\");\n+        assertNodesNotExist(null, \"/branch1\", \"/branch1/child1\");\n+        assertPropNotExists(null, \"/branch1/child1\", \"prop1\");\n+        assertPropNotExists(null, \"/branch1/child1\", \"prop2\");\n+\n+        mk.merge(branchRev, \"\");\n+        assertNodesExist(null, \"/trunk\", \"/trunk/child1\");\n+        assertPropExists(null, \"/trunk/child1\", \"prop1\");\n+        assertPropExists(null, \"/trunk/child1\", \"prop2\");\n+        assertNodesExist(null, \"/branch1\", \"/branch1/child1\");\n+        assertPropExists(null, \"/branch1/child1\", \"prop1\");\n+        assertPropExists(null, \"/branch1/child1\", \"prop2\");\n+    }\n+\n+    @Test\n+    @Ignore\n+    public void twoBranchesAddedChildren1() {\n+        addNodes(null, \"/trunk\", \"/trunk/child1\");\n+        assertNodesExist(null, \"/trunk\", \"/trunk/child1\");\n+\n+        String branchRev1 = mk.branch(null);\n+        String branchRev2 = mk.branch(null);\n+\n+        branchRev1 = addNodes(branchRev1, \"/branch1\", \"/branch1/child1\");\n+        branchRev2 = addNodes(branchRev2, \"/branch2\", \"/branch2/child2\");\n+        assertNodesExist(branchRev1, \"/trunk\", \"/trunk/child1\");\n+        assertNodesExist(branchRev2, \"/trunk\", \"/trunk/child1\");\n+        assertNodesExist(branchRev1, \"/branch1/child1\");\n+        assertNodesNotExist(branchRev1, \"/branch2/child2\");\n+        assertNodesExist(branchRev2, \"/branch2/child2\");\n+        assertNodesNotExist(branchRev2, \"/branch1/child1\");\n+        assertNodesNotExist(null, \"/branch1/child1\", \"/branch2/child2\");\n+\n+        addNodes(null, \"/trunk/child2\");\n+        assertNodesExist(null, \"/trunk/child2\");\n+        assertNodesNotExist(branchRev1, \"/trunk/child2\");\n+        assertNodesNotExist(branchRev2, \"/trunk/child2\");\n+\n+        mk.merge(branchRev1, \"\");\n+        assertNodesExist(null, \"/trunk\", \"/branch1\", \"/branch1/child1\");\n+        assertNodesNotExist(null, \"/branch2\", \"/branch2/child2\");\n+\n+        mk.merge(branchRev2, \"\");\n+        assertNodesExist(null, \"/trunk\", \"/branch1\", \"/branch1/child1\", \"/branch2\", \"/branch2/child2\");\n+    }\n+\n+    @Test\n+    @Ignore\n+    public void oneBranchAddedChildrenWithConflict() {\n+        addNodes(null, \"/trunk\", \"/trunk/child1\");\n+        assertNodesExist(null, \"/trunk\", \"/trunk/child1\");\n+\n+        String branchRev = mk.branch(null);\n+\n+        branchRev = removeNodes(branchRev, \"/trunk/child1\");\n+        assertNodesExist(branchRev, \"/trunk\");\n+        assertNodesNotExist(branchRev, \"/trunk/child1\");\n+\n+        addNodes(null, \"/trunk/child1/child2\");\n+        assertNodesExist(null, \"/trunk\", \"/trunk/child1\", \"/trunk/child1/child2\");\n+\n+        mk.merge(branchRev, \"\");\n+        assertNodesExist(null, \"/trunk\");\n+        assertNodesNotExist(null, \"/trunk/child1\", \"/trunk/child1/child2\");\n+    }\n+\n+    @Test\n+    @Ignore\n+    public void oneBranchChangedPropertiesWithConflict() {\n+        addNodes(null, \"/trunk\");\n+        setProp(null, \"/trunk/prop1\", \"value1\");\n+        assertPropExists(null, \"/trunk\", \"prop1\");\n+\n+        String branchRev = mk.branch(null);\n+\n+        branchRev = setProp(branchRev, \"/trunk/prop1\", \"value1a\");\n+        assertPropValue(branchRev, \"/trunk\", \"prop1\", \"value1a\");\n+\n+        setProp(null, \"/trunk/prop1\", \"value1b\");\n+        try {\n+            mk.merge(branchRev, \"\");\n+            fail(\"Expected: Concurrent modification exception\");\n+        } catch (Exception expected){}\n+    }\n+\n+    @Test\n+    @Ignore\n+    public void addExistingRootInBranch() {\n+        addNodes(null, \"/root\");\n+        assertNodesExist(null, \"/root\");\n+\n+        String branchRev = mk.branch(null);\n+        try {\n+            branchRev = addNodes(branchRev, \"/root\");\n+            fail(\"Should not be able to add the same root node twice\");\n+        } catch (Exception expected) {}\n+    }\n+\n+    @Test\n+    @Ignore\n+    public void addExistingChildInBranch() {\n+        addNodes(null, \"/root\", \"/root/child1\");\n+        assertNodesExist(null, \"/root\", \"/root/child1\");\n+\n+        String branchRev = mk.branch(null);\n+        branchRev = addNodes(branchRev, \"/root/child2\");\n+        assertNodesExist(branchRev, \"/root/child1\", \"/root/child2\");\n+\n+        try {\n+            branchRev = addNodes(branchRev, \"/root/child1\");\n+            fail(\"Should not be able to add the same root node twice\");\n+        } catch (Exception expected) {}\n+    }\n+\n+    @Test\n+    @Ignore(\"Implementation specific behavior\")\n+    public void emptyMergeCausesNoChange() {\n+        String rev1 = mk.commit(\"\", \"+\\\"/child1\\\":{}\", null, \"\");\n+\n+        String branchRev = mk.branch(null);\n+        branchRev = mk.commit(\"\", \"+\\\"/child2\\\":{}\", branchRev, \"\");\n+        branchRev = mk.commit(\"\", \"-\\\"/child2\\\"\", branchRev, \"\");\n+\n+        String rev2 = mk.merge(branchRev, \"\");\n+\n+        assertTrue(mk.nodeExists(\"/child1\", null));\n+        assertFalse(mk.nodeExists(\"/child2\", null));\n+        assertEquals(rev1, rev2);\n+    }\n+\n+    @Test\n+    public void trunkMergeNotAllowed() {\n+        String rev = mk.commit(\"\", \"+\\\"/child1\\\":{}\", null, \"\");\n+        try {\n+            mk.merge(rev, \"\");\n+            fail(\"Exception expected\");\n+        } catch (Exception expected) {}\n+    }\n+\n+    @Test\n+    @Ignore\n+    public void movesInBranch() {\n+        String rev = mk.commit(\"/\", \"+\\\"a\\\":{\\\"b\\\":{}}\", null, null);\n+        String branchRev = mk.branch(rev);\n+        branchRev = mk.commit(\"/\", \">\\\"a\\\":\\\"x\\\"^\\\"x/b/p\\\":1>\\\"x\\\":\\\"a\\\"\", branchRev, null);\n+        rev = mk.merge(branchRev, null);\n+        assertNodesExist(rev, \"/a\", \"/a/b\");\n+        assertPropExists(rev, \"/a/b\", \"p\");\n+    }\n+\n+    @Test\n+    public void concurrentNonConflictingMerges() throws Exception {\n+        int numThreads = 10;\n+        mk.commit(\"/\", \"+\\\"test\\\":{}\", null, null);\n+        List<Thread> workers = new ArrayList<Thread>();\n+        final List<Exception> exceptions = Collections.synchronizedList(new ArrayList<Exception>());\n+        for (int i = 0; i < numThreads; i++) {\n+            final String path = \"/test/t\" + i;\n+            mk.commit(\"\", \"+\\\"\" + path + \"\\\":{}\", null, null);\n+            workers.add(new Thread(new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        for (int i = 0; i < 50; i++) {\n+                            String branchRev = mk.branch(null);\n+                            branchRev = mk.commit(path, \"+\\\"node\" + i + \"\\\":{}\", branchRev, null);\n+                            mk.merge(branchRev, null);\n+                        }\n+                    } catch (MicroKernelException e) {\n+                        exceptions.add(e);\n+                    }\n+                }\n+            }));\n+        }\n+        for (Thread t : workers) {\n+            t.start();\n+        }\n+        for (Thread t : workers) {\n+            t.join();\n+        }\n+        if (!exceptions.isEmpty()) {\n+            throw exceptions.get(0);\n+        }\n+    }\n+\n+    private String addNodes(String rev, String...nodes) {\n+        for (String node : nodes) {\n+            rev = mk.commit(\"\", \"+\\\"\" + node + \"\\\":{}\", rev, \"\");\n+        }\n+        return rev;\n+    }\n+\n+    private String removeNodes(String rev, String...nodes) {\n+        for (String node : nodes) {\n+            rev = mk.commit(\"\", \"-\\\"\" + node + \"\\\"\", rev, \"\");\n+        }\n+        return rev;\n+    }\n+\n+    private String setProp(String rev, String prop, Object value) {\n+        value = value == null? null : \"\\\"\" + value + \"\\\"\";\n+        return mk.commit(\"\", \"^\\\"\" + prop + \"\\\" : \" + value, rev, \"\");\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/db039944fd62e1c48e58cbaacecba8021d96bb0a/oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/prototype/MongoMKBranchMergeTest.java",
                "sha": "1fdb37127350e19f1b6a9b0bfc975180ab7b6dbe",
                "status": "added"
            },
            {
                "additions": 77,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/db039944fd62e1c48e58cbaacecba8021d96bb0a/oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/prototype/MongoMKBranchTest.java",
                "changes": 77,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/prototype/MongoMKBranchTest.java?ref=db039944fd62e1c48e58cbaacecba8021d96bb0a",
                "deletions": 0,
                "filename": "oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/prototype/MongoMKBranchTest.java",
                "patch": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.mongomk.prototype;\n+\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * <code>MongoMKBranchTest</code> performs a test to check if commits\n+ * to a branch are not visible to other branches.\n+ */\n+public class MongoMKBranchTest extends BaseMongoMKTest {\n+\n+    /**\n+     * Creates the following revision history:\n+     * <pre>\n+     *   + rev1 (first commit with /child1)\n+     *   |\\\n+     *   | + branchRev1 (branch from rev1)\n+     *   | + branchRev11 (branch commit /child1/foo:1)\n+     *   |\n+     *   + rev2 (second commit with /child2)\n+     *   |\\\n+     *   | + branchRev2 (brach from rev2)\n+     * </pre>\n+     * The test reads /child from <code>branchRev2</code> and expects\n+     * the version from the first commit.\n+     */\n+    @Test\n+    public void isolatedBranches() throws Exception {\n+        String rev1 = mk.commit(\"\", \"+\\\"/child1\\\":{}\", null, \"\");\n+\n+        String branchRev1 = mk.branch(rev1);\n+        mk.commit(\"/child1\", \"^\\\"foo\\\":1\", branchRev1, \"\");\n+\n+        String rev2 = mk.commit(\"\", \"+\\\"/child2\\\":{}\", null, \"\");\n+\n+        String branchRev2 = mk.branch(rev2);\n+        String json = mk.getNodes(\"/child1\", branchRev2, 0, 0, -1, null);\n+        JSONParser parser = new JSONParser();\n+        JSONObject obj = (JSONObject) parser.parse(json);\n+        assertFalse(obj.containsKey(\"foo\"));\n+    }\n+\n+    @Test\n+    public void movesInBranch() throws Exception {\n+        String branchRev = mk.branch(null);\n+        branchRev = mk.commit(\"/\", \"+\\\"a\\\":{}\", branchRev, null);\n+        branchRev = mk.commit(\"/a\", \"^\\\"foo\\\":1\", branchRev, null);\n+        branchRev = mk.commit(\"/\", \">\\\"a\\\" : \\\"b\\\"\", branchRev, null);\n+        branchRev = mk.commit(\"/\", \">\\\"b\\\" : \\\"a\\\"\", branchRev, null);\n+        mk.merge(branchRev, null);\n+\n+        String json = mk.getNodes(\"/a\", null, 0, 0, -1, null);\n+        JSONParser parser = new JSONParser();\n+        JSONObject obj = (JSONObject) parser.parse(json);\n+        assertTrue(obj.containsKey(\"foo\"));\n+    }\n+}",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/db039944fd62e1c48e58cbaacecba8021d96bb0a/oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/prototype/MongoMKBranchTest.java",
                "sha": "59ae766ba9e64a5deda0cb6db89c629f8ff165a9",
                "status": "added"
            },
            {
                "additions": 365,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/db039944fd62e1c48e58cbaacecba8021d96bb0a/oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/prototype/MongoMKCommitMoveTest.java",
                "changes": 365,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/prototype/MongoMKCommitMoveTest.java?ref=db039944fd62e1c48e58cbaacecba8021d96bb0a",
                "deletions": 0,
                "filename": "oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/prototype/MongoMKCommitMoveTest.java",
                "patch": "@@ -0,0 +1,365 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.mongomk.prototype;\n+\n+import org.apache.jackrabbit.mongomk.impl.MongoMicroKernel;\n+import org.json.simple.JSONObject;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for {@link MongoMicroKernel#commit(String, String, String, String)}\n+ * with emphasis on move operations.\n+ */\n+@Ignore\n+public class MongoMKCommitMoveTest extends BaseMongoMKTest {\n+\n+    @Test\n+    public void moveNode() throws Exception {\n+        mk.commit(\"/\", \"+\\\"a\\\" : {}\", null, null);\n+        assertTrue(mk.nodeExists(\"/a\", null));\n+\n+        mk.commit(\"/\", \">\\\"a\\\" : \\\"b\\\"\", null, null);\n+        assertFalse(mk.nodeExists(\"/a\", null));\n+        assertTrue(mk.nodeExists(\"/b\", null));\n+    }\n+\n+    @Test\n+    public void moveUnderSourcePath() throws Exception {\n+        mk.commit(\"/\", \"+\\\"a\\\" : { \\\"b\\\" : {} }\", null, null);\n+        assertTrue(mk.nodeExists(\"/a\", null));\n+        assertTrue(mk.nodeExists(\"/a/b\", null));\n+\n+        try {\n+            mk.commit(\"/\", \">\\\"b\\\" : \\\"a\\\"\", null, null);\n+            fail(\"Exception expected\");\n+        } catch (Exception expected) {}\n+    }\n+\n+    @Test\n+    public void moveNodeWithChild() throws Exception {\n+        mk.commit(\"/\", \"+\\\"a\\\" : { \\\"b\\\" : {} }\", null, null);\n+        assertTrue(mk.nodeExists(\"/a\", null));\n+        assertTrue(mk.nodeExists(\"/a/b\", null));\n+\n+        mk.commit(\"/\", \">\\\"a\\\" : \\\"c\\\"\", null, null);\n+        assertFalse(mk.nodeExists(\"/a\", null));\n+        assertFalse(mk.nodeExists(\"/a/b\", null));\n+        assertTrue(mk.nodeExists(\"/c\", null));\n+        assertTrue(mk.nodeExists(\"/c/b\", null));\n+    }\n+\n+    @Test\n+    public void moveNodeWithChildren() throws Exception {\n+        mk.commit(\"/\", \"+\\\"a\\\" : { \\\"b\\\" : {},  \\\"c\\\" : {}, \\\"d\\\" : {}}\", null, null);\n+        assertTrue(mk.nodeExists(\"/a\", null));\n+        assertTrue(mk.nodeExists(\"/a/b\", null));\n+        assertTrue(mk.nodeExists(\"/a/c\", null));\n+        assertTrue(mk.nodeExists(\"/a/d\", null));\n+\n+        mk.commit(\"/\", \">\\\"a\\\" : \\\"e\\\"\", null, null);\n+        assertFalse(mk.nodeExists(\"/a\", null));\n+        assertFalse(mk.nodeExists(\"/a/b\", null));\n+        assertFalse(mk.nodeExists(\"/a/c\", null));\n+        assertFalse(mk.nodeExists(\"/a/d\", null));\n+        assertTrue(mk.nodeExists(\"/e\", null));\n+        assertTrue(mk.nodeExists(\"/e/b\", null));\n+        assertTrue(mk.nodeExists(\"/e/c\", null));\n+        assertTrue(mk.nodeExists(\"/e/d\", null));\n+    }\n+\n+    @Test\n+    public void moveNodeWithNestedChildren() throws Exception {\n+        mk.commit(\"/\", \"+\\\"a\\\" : { \\\"b\\\" : { \\\"c\\\" : { \\\"d\\\" : {} } } }\", null, null);\n+        assertTrue(mk.nodeExists(\"/a\", null));\n+        assertTrue(mk.nodeExists(\"/a/b\", null));\n+        assertTrue(mk.nodeExists(\"/a/b/c\", null));\n+        assertTrue(mk.nodeExists(\"/a/b/c/d\", null));\n+\n+        mk.commit(\"/\", \">\\\"a\\\" : \\\"e\\\"\", null, null);\n+        assertFalse(mk.nodeExists(\"/a\", null));\n+        assertFalse(mk.nodeExists(\"/a/b\", null));\n+        assertFalse(mk.nodeExists(\"/a/b/c\", null));\n+        assertFalse(mk.nodeExists(\"/a/b/c/d\", null));\n+        assertTrue(mk.nodeExists(\"/e\", null));\n+        assertTrue(mk.nodeExists(\"/e/b\", null));\n+        assertTrue(mk.nodeExists(\"/e/b/c\", null));\n+        assertTrue(mk.nodeExists(\"/e/b/c/d\", null));\n+\n+        mk.commit(\"/\", \">\\\"e/b\\\" : \\\"f\\\"\", null, null);\n+        assertTrue(mk.nodeExists(\"/e\", null));\n+        assertFalse(mk.nodeExists(\"/e/b\", null));\n+        assertFalse(mk.nodeExists(\"/e/b/c\", null));\n+        assertFalse(mk.nodeExists(\"/e/b/c/d\", null));\n+        assertTrue(mk.nodeExists(\"/f\", null));\n+        assertTrue(mk.nodeExists(\"/f/c\", null));\n+        assertTrue(mk.nodeExists(\"/f/c/d\", null));\n+    }\n+\n+    @Test\n+    public void moveNodeWithProperties() throws Exception {\n+        mk.commit(\"/\", \"+\\\"a\\\" : { \\\"key1\\\" : \\\"value1\\\" }\", null, null);\n+        assertTrue(mk.nodeExists(\"/a\", null));\n+        String nodes = mk.getNodes(\"/a\", null, 0 /*depth*/, 0 /*offset*/, -1 /*maxChildNodes*/, null /*filter*/);\n+        JSONObject obj = parseJSONObject(nodes);\n+        assertPropertyValue(obj, \"key1\", \"value1\");\n+\n+        mk.commit(\"/\", \">\\\"a\\\" : \\\"c\\\"\", null, null);\n+        assertFalse(mk.nodeExists(\"/a\", null));\n+        assertTrue(mk.nodeExists(\"/c\", null));\n+        nodes = mk.getNodes(\"/c\", null, 0 /*depth*/, 0 /*offset*/, -1 /*maxChildNodes*/, null /*filter*/);\n+        obj = parseJSONObject(nodes);\n+        assertPropertyValue(obj, \"key1\", \"value1\");\n+    }\n+\n+    @Test\n+    public void moveFromNonExistentNode() throws Exception {\n+        try {\n+            mk.commit(\"/\", \">\\\"b\\\" : \\\"c\\\"\", null, null);\n+            fail(\"Exception expected\");\n+        } catch (Exception expected) {}\n+    }\n+\n+    @Test\n+    public void moveToAnExistentNode() throws Exception {\n+        mk.commit(\"/\", \"+\\\"a\\\" : { \\\"b\\\" : {} }\", null, null);\n+        mk.commit(\"/\", \"+\\\"c\\\" : {}\", null, null);\n+\n+        try {\n+            mk.commit(\"/\", \">\\\"c\\\" : \\\"a/b\\\"\", null, null);\n+            fail(\"Exception expected\");\n+        } catch (Exception expected) {}\n+    }\n+\n+    @Test\n+    public void addNodeAndMove() {\n+        mk.commit(\"/\", \"+\\\"a\\\":{}\", null, null);\n+        mk.commit(\"/\", \"+\\\"a/b\\\": {}\\n\"\n+                     + \">\\\"a/b\\\":\\\"c\\\"\", null, null);\n+\n+        assertFalse(mk.nodeExists(\"/a/b\", null));\n+        assertTrue(mk.nodeExists(\"/a\", null));\n+        assertTrue(mk.nodeExists(\"/c\", null));\n+    }\n+\n+    @Test\n+    public void addNodeAndMove2() {\n+        mk.commit(\"/\", \"+\\\"a\\\":{}\", null, null);\n+        mk.commit(\"/\", \"+\\\"a/b\\\": {}\\n\", null, null);\n+        mk.commit(\"/\", \">\\\"a/b\\\":\\\"c\\\"\", null, null);\n+\n+        assertFalse(mk.nodeExists(\"/a/b\", null));\n+        assertTrue(mk.nodeExists(\"/a\", null));\n+        assertTrue(mk.nodeExists(\"/c\", null));\n+    }\n+\n+    @Test\n+    public void addNodeWithChildrenAndMove() {\n+        mk.commit(\"/\", \"+\\\"a\\\":{}\", null, null);\n+        mk.commit(\"/\", \"+\\\"a/b\\\":{ \\\"c\\\" : {}, \\\"d\\\" : {} }\\n\"\n+                     + \">\\\"a/b\\\":\\\"e\\\"\", null, null);\n+\n+        assertTrue(mk.nodeExists(\"/a\", null));\n+        assertFalse(mk.nodeExists(\"/a/b\", null));\n+        assertFalse(mk.nodeExists(\"/a/b/c\", null));\n+        assertFalse(mk.nodeExists(\"/a/b/d\", null));\n+\n+        assertTrue(mk.nodeExists(\"/e\", null));\n+        assertTrue(mk.nodeExists(\"/e/c\", null));\n+        assertTrue(mk.nodeExists(\"/e/d\", null));\n+    }\n+\n+    @Test\n+    public void addNodeWithNestedChildrenAndMove() {\n+        mk.commit(\"/\", \"+\\\"a\\\":{ \\\"b\\\" : { \\\"c\\\" : { } } }\", null, null);\n+        mk.commit(\"/\", \"+\\\"a/b/c/d\\\":{}\\n\"\n+                     + \">\\\"a\\\":\\\"e\\\"\", null, null);\n+\n+        assertFalse(mk.nodeExists(\"/a/b/c/d\", null));\n+        assertTrue(mk.nodeExists(\"/e/b/c/d\", null));\n+    }\n+\n+    @Test\n+    public void addNodeAndMoveParent() {\n+        mk.commit(\"/\", \"+\\\"a\\\":{}\", null, null);\n+        mk.commit(\"/\", \"+\\\"a/b\\\":{}\\n\" +\n+                        \">\\\"a\\\":\\\"c\\\"\", null, null);\n+\n+        assertFalse(mk.nodeExists(\"/a\", null));\n+        assertFalse(mk.nodeExists(\"/a/b\", null));\n+        assertTrue(mk.nodeExists(\"/c\", null));\n+        assertTrue(mk.nodeExists(\"/c/b\", null));\n+    }\n+\n+    @Test\n+    public void removeNodeAndMove() {\n+        mk.commit(\"/\", \"+\\\"a\\\":{ \\\"b\\\" : {} }\", null, null);\n+\n+        try {\n+            mk.commit(\"/\", \"-\\\"a/b\\\"\\n\"\n+                         + \">\\\"a/b\\\":\\\"c\\\"\", null, null);\n+            fail(\"Expected expected\");\n+        } catch (Exception expected) {}\n+    }\n+\n+    @Test\n+    public void removeNodeWithNestedChildrenAndMove() {\n+        mk.commit(\"/\", \"+\\\"a\\\":{ \\\"b\\\" : { \\\"c\\\" : { \\\"d\\\" : {} } } }\", null, null);\n+        mk.commit(\"/\", \"-\\\"a/b/c/d\\\"\\n\"\n+                     + \">\\\"a\\\" : \\\"e\\\"\", null, null);\n+\n+        assertFalse(mk.nodeExists(\"/a\", null));\n+        assertTrue(mk.nodeExists(\"/e/b/c\", null));\n+        assertFalse(mk.nodeExists(\"/e/b/c/d\", null));\n+    }\n+\n+    @Test\n+    public void removeNodeAndMoveParent() {\n+        mk.commit(\"/\", \"+\\\"a\\\":{ \\\"b\\\" : {} }\", null, null);\n+        mk.commit(\"/\", \"-\\\"a/b\\\"\\n\"\n+                     + \">\\\"a\\\":\\\"c\\\"\", null, null);\n+\n+        assertFalse(mk.nodeExists(\"/a/b\", null));\n+        assertTrue(mk.nodeExists(\"/c\", null));\n+        assertFalse(mk.nodeExists(\"/c/b\", null));\n+    }\n+\n+    @Test\n+    public void setPropertyAndMove() {\n+        mk.commit(\"/\", \"+\\\"a\\\":{}\", null, null);\n+        mk.commit(\"/\", \"^\\\"a/key1\\\": \\\"value1\\\"\\n\" +\n+                        \">\\\"a\\\":\\\"c\\\"\", null, null);\n+\n+        assertFalse(mk.nodeExists(\"/a\", null));\n+        assertTrue(mk.nodeExists(\"/c\", null));\n+\n+        String nodes = mk.getNodes(\"/c\", null, 0 /*depth*/, 0 /*offset*/, -1 /*maxChildNodes*/, null /*filter*/);\n+        JSONObject obj = parseJSONObject(nodes);\n+        assertPropertyValue(obj, \"key1\", \"value1\");\n+    }\n+\n+    @Test\n+    public void setNestedPropertyAndMove() {\n+        mk.commit(\"/\", \"+\\\"a\\\":{ \\\"b\\\" : {} }\", null, null);\n+        mk.commit(\"/\", \"^\\\"a/b/key1\\\": \\\"value1\\\"\\n\" +\n+                        \">\\\"a\\\":\\\"c\\\"\", null, null);\n+\n+        assertFalse(mk.nodeExists(\"/a\", null));\n+        assertFalse(mk.nodeExists(\"/a/b\", null));\n+        assertTrue(mk.nodeExists(\"/c\", null));\n+        assertTrue(mk.nodeExists(\"/c/b\", null));\n+\n+        String nodes = mk.getNodes(\"/c/b\", null, 0 /*depth*/, 0 /*offset*/, -1 /*maxChildNodes*/, null /*filter*/);\n+        JSONObject obj = parseJSONObject(nodes);\n+        assertPropertyValue(obj, \"key1\", \"value1\");\n+    }\n+\n+    @Test\n+    public void modifyParentAddPropertyAndMove() {\n+        mk.commit(\"/\", \"+\\\"a\\\":{}\", null, null);\n+        mk.commit(\"/\", \"+\\\"b\\\" : {}\\n\"\n+                     + \"^\\\"a/key1\\\": \\\"value1\\\"\\n\"\n+                     + \">\\\"a\\\":\\\"c\\\"\", null, null);\n+\n+        assertFalse(mk.nodeExists(\"/a\", null));\n+        assertTrue(mk.nodeExists(\"/b\", null));\n+        assertTrue(mk.nodeExists(\"/c\", null));\n+\n+        String nodes = mk.getNodes(\"/c\", null, 0 /*depth*/, 0 /*offset*/, -1 /*maxChildNodes*/, null /*filter*/);\n+        JSONObject obj = parseJSONObject(nodes);\n+        assertPropertyValue(obj, \"key1\", \"value1\");\n+    }\n+\n+    @Test\n+    public void removePropertyAndMove() {\n+        mk.commit(\"/\", \"+\\\"a\\\":{ \\\"b\\\" : { \\\"key1\\\" : \\\"value1\\\" } }\", null, null);\n+        mk.commit(\"/\", \"^\\\"a/b/key1\\\": null\\n\"\n+                     + \">\\\"a\\\":\\\"c\\\"\", null, null);\n+\n+        assertFalse(mk.nodeExists(\"/a\", null));\n+        assertFalse(mk.nodeExists(\"/a/b\", null));\n+        assertTrue(mk.nodeExists(\"/c\", null));\n+        assertTrue(mk.nodeExists(\"/c/b\", null));\n+\n+        String nodes = mk.getNodes(\"/c/b\", null, 0 /*depth*/, 0 /*offset*/, -1 /*maxChildNodes*/, null /*filter*/);\n+        JSONObject obj = parseJSONObject(nodes);\n+        assertPropertyNotExists(obj, \"key1\");\n+    }\n+\n+    @Test\n+    public void removeNestedPropertyAndMove() {\n+        mk.commit(\"/\", \"+\\\"a\\\":{ \\\"key1\\\" : \\\"value1\\\"}\", null, null);\n+        mk.commit(\"/\", \"^\\\"a/key1\\\" : null\\n\"\n+                     + \">\\\"a\\\":\\\"c\\\"\", null, null);\n+\n+        assertFalse(mk.nodeExists(\"/a\", null));\n+        assertTrue(mk.nodeExists(\"/c\", null));\n+\n+        String nodes = mk.getNodes(\"/c\", null, 0 /*depth*/, 0 /*offset*/, -1 /*maxChildNodes*/, null /*filter*/);\n+        JSONObject obj = parseJSONObject(nodes);\n+        assertPropertyNotExists(obj, \"key1\");\n+    }\n+\n+    @Test\n+    public void modifyParentRemovePropertyAndMove() {\n+        mk.commit(\"/\", \"+\\\"a\\\":{ \\\"key1\\\" : \\\"value1\\\"}\", null, null);\n+        mk.commit(\"/\", \"+\\\"b\\\" : {}\\n\"\n+                     + \"^\\\"a/key1\\\" : null\\n\"\n+                     + \">\\\"a\\\":\\\"c\\\"\", null, null);\n+\n+        assertFalse(mk.nodeExists(\"/a\", null));\n+        assertTrue(mk.nodeExists(\"/b\", null));\n+        assertTrue(mk.nodeExists(\"/c\", null));\n+\n+        String nodes = mk.getNodes(\"/c\", null, 0 /*depth*/, 0 /*offset*/, -1 /*maxChildNodes*/, null /*filter*/);\n+        JSONObject obj = parseJSONObject(nodes);\n+        assertPropertyNotExists(obj, \"key1\");\n+    }\n+\n+    @Test\n+    public void moveAndMoveBack() {\n+        mk.commit(\"/\", \"+\\\"a\\\":{}\", null, null);\n+        mk.commit(\"/\", \">\\\"a\\\":\\\"x\\\">\\\"x\\\":\\\"a\\\"\", null, null);\n+        assertNodesExist(null, \"/a\");\n+    }\n+\n+    @Test\n+    public void moveAndMoveBackWithChildren() {\n+        mk.commit(\"/\", \"+\\\"a\\\":{\\\"b\\\":{}}\", null, null);\n+        mk.commit(\"/\", \">\\\"a\\\":\\\"x\\\">\\\"x\\\":\\\"a\\\"\", null, null);\n+        assertNodesExist(null, \"/a\", \"/a/b\");\n+    }\n+\n+    @Test\n+    public void moveAndMoveBackWithAddedChildren() {\n+        mk.commit(\"/\", \"+\\\"a\\\":{\\\"b\\\":{}}\", null, null);\n+        mk.commit(\"/\", \">\\\"a\\\":\\\"x\\\"+\\\"x/c\\\":{}>\\\"x\\\":\\\"a\\\"\", null, null);\n+        assertNodesExist(null, \"/a\", \"/a/b\", \"/a/c\");\n+    }\n+\n+    @Test\n+    public void moveAndMoveBackWithSetProperties() {\n+        mk.commit(\"/\", \"+\\\"a\\\":{\\\"b\\\":{}}\", null, null);\n+        mk.commit(\"/\", \">\\\"a\\\":\\\"x\\\"^\\\"x/p\\\":1>\\\"x\\\":\\\"a\\\"\", null, null);\n+        assertNodesExist(null, \"/a\", \"/a/b\");\n+        assertPropExists(null, \"/a\", \"p\");\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/db039944fd62e1c48e58cbaacecba8021d96bb0a/oak-mongomk/src/test/java/org/apache/jackrabbit/mongomk/prototype/MongoMKCommitMoveTest.java",
                "sha": "b69ccb20270f3e47ef995388999ea9a4d4146a4e",
                "status": "added"
            }
        ],
        "message": "OAK-619 Lock-free MongoMK implementation\n- Improve branch support\n- Copied over some tests from previous MongoDB based MicroKernel implementation. Some tests are still marked ignored.\n- Fixed NPE in Commit.createOrUpdateNode() (newestRev may be null)\n- Disabled document splitting until it is fully implemented -> max size set to Integer.MAX_VALUE\n- Fixed path issue with JSOP move and copy operation\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1461044 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/56112cb2ae3f679e480478f7b2433d476634a759",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "CommitTest.java",
            "MongoDocumentStoreTest.java"
        ]
    },
    "jackrabbit-oak_de6253b": {
        "bug_id": "jackrabbit-oak_de6253b",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/de6253b2590bced117e12eabadc26d0a97bff8ec",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/de6253b2590bced117e12eabadc26d0a97bff8ec/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/mongo/MongoDocumentStore.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/mongo/MongoDocumentStore.java?ref=de6253b2590bced117e12eabadc26d0a97bff8ec",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/mongo/MongoDocumentStore.java",
                "patch": "@@ -758,7 +758,8 @@ boolean canUseModifiedTimeIdx(long modifiedTimeInSecs) {\n                     for (Entry<String, NodeDocument> entry : cachedDocs.entrySet()) {\n                         TreeLock lock = acquire(entry.getKey());\n                         try {\n-                            if (entry.getValue() == null) {\n+                            if (entry.getValue() == null\n+                                    || entry.getValue() == NodeDocument.NULL) {\n                                 // make sure concurrently loaded document is invalidated\n                                 nodesCache.invalidate(new StringValue(entry.getKey()));\n                             } else {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/de6253b2590bced117e12eabadc26d0a97bff8ec/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/mongo/MongoDocumentStore.java",
                "sha": "df185cb83d6ae2b2dbb426e7e70d238209ad6070",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/de6253b2590bced117e12eabadc26d0a97bff8ec/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStoreIT.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStoreIT.java?ref=de6253b2590bced117e12eabadc26d0a97bff8ec",
                "deletions": 0,
                "filename": "oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStoreIT.java",
                "patch": "@@ -16,7 +16,10 @@\n  */\n package org.apache.jackrabbit.oak.plugins.document;\n \n+import java.util.Collections;\n+\n import org.apache.jackrabbit.oak.plugins.document.util.TimingDocumentStoreWrapper;\n+import org.apache.jackrabbit.oak.plugins.document.util.Utils;\n import org.apache.jackrabbit.oak.spi.commit.CommitInfo;\n import org.apache.jackrabbit.oak.spi.commit.EmptyHook;\n import org.apache.jackrabbit.oak.spi.state.NodeBuilder;\n@@ -25,6 +28,7 @@\n import org.junit.Test;\n \n import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.apache.jackrabbit.oak.plugins.document.Collection.NODES;\n import static org.apache.jackrabbit.oak.plugins.document.NodeDocument.MODIFIED_IN_SECS_RESOLUTION;\n import static org.apache.jackrabbit.oak.plugins.document.util.Utils.getIdFromPath;\n import static org.junit.Assert.assertEquals;\n@@ -113,4 +117,17 @@ public void dispose() {\n         ns1.dispose();\n         ns2.dispose();\n     }\n+\n+    // OAK-2297\n+    @Test\n+    public void updateAbsentDocument() throws Exception {\n+        String id = Utils.getIdFromPath(\"/test\");\n+        // trigger cache entry for /test\n+        ds.find(NODES, id);\n+\n+        UpdateOp updateOp = new UpdateOp(id, false);\n+        updateOp.setMapEntry(\"foo\", Revision.newRevision(1), \"bar\");\n+\n+        ds.update(NODES, Collections.singletonList(id), updateOp);\n+    }\n }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/de6253b2590bced117e12eabadc26d0a97bff8ec/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStoreIT.java",
                "sha": "a90288cc87879d83e4125a27dba71c63d925e3c7",
                "status": "modified"
            }
        ],
        "message": "OAK-2297: Update for absent document may throw NPE\n\nTest case and fix\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1641811 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/9dd8254dbe9986c72a63140775d46eb74215cf7b",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "MongoDocumentStoreTest.java"
        ]
    },
    "jackrabbit-oak_dec3772": {
        "bug_id": "jackrabbit-oak_dec3772",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/dec377243963969ba53f68715936b4f20ebca5e3",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/dec377243963969ba53f68715936b4f20ebca5e3/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/FileStore.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/FileStore.java?ref=dec377243963969ba53f68715936b4f20ebca5e3",
                "deletions": 2,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/FileStore.java",
                "patch": "@@ -234,8 +234,10 @@ public void flush() throws IOException {\n             }\n         }\n \n-        for (Segment segment : segments.asMap().values().toArray(new Segment[0])) {\n-            segment.dropOldCacheEntries();\n+        if (segments != null) {\n+            for (Segment segment : segments.asMap().values().toArray(new Segment[0])) {\n+                segment.dropOldCacheEntries();\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/dec377243963969ba53f68715936b4f20ebca5e3/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/FileStore.java",
                "sha": "25269bee378379d963ef7e2810c22eb7ccd8dfb4",
                "status": "modified"
            }
        ],
        "message": "OAK-1524: NPE in TarMK flush thread\n\nFixed as suggested by Chetan Mehrotra\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1576452 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/46b3bfd2c75f464c2059687004ad96974df562c9",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "FileStoreTest.java"
        ]
    },
    "jackrabbit-oak_e2945fb": {
        "bug_id": "jackrabbit-oak_e2945fb",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/e2945fb8f0cf6cffa3bc1f823ce8a088a120560a",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/e2945fb8f0cf6cffa3bc1f823ce8a088a120560a/oak-auth-external/pom.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-auth-external/pom.xml?ref=e2945fb8f0cf6cffa3bc1f823ce8a088a120560a",
                "deletions": 0,
                "filename": "oak-auth-external/pom.xml",
                "patch": "@@ -179,6 +179,11 @@\n             <artifactId>easymock</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.mockito</groupId>\n+            <artifactId>mockito-core</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n         <dependency>\n             <groupId>org.slf4j</groupId>\n             <artifactId>jul-to-slf4j</artifactId>",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/e2945fb8f0cf6cffa3bc1f823ce8a088a120560a/oak-auth-external/pom.xml",
                "sha": "336bdd0d94a43e1e647033beecc18740c0821a44",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/e2945fb8f0cf6cffa3bc1f823ce8a088a120560a/oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/principal/ExternalIdentityConflictHandler.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/principal/ExternalIdentityConflictHandler.java?ref=e2945fb8f0cf6cffa3bc1f823ce8a088a120560a",
                "deletions": 12,
                "filename": "oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/principal/ExternalIdentityConflictHandler.java",
                "patch": "@@ -40,36 +40,41 @@\n \n     @NotNull\n     @Override\n-    public Resolution addExistingProperty(NodeBuilder parent, PropertyState ours, PropertyState theirs) {\n+    public Resolution addExistingProperty(@NotNull NodeBuilder parent, @NotNull PropertyState ours, @NotNull PropertyState theirs) {\n         if (ExternalIdentityConstants.REP_LAST_SYNCED.equals(ours.getName())) {\n-            merge(parent, ours, theirs);\n-            return Resolution.MERGED;\n+            return merge(parent, ours, theirs);\n         }\n         return Resolution.IGNORED;\n     }\n \n     @NotNull\n     @Override\n-    public Resolution changeChangedProperty(NodeBuilder parent, PropertyState ours, PropertyState theirs,\n-            PropertyState base) {\n+    public Resolution changeChangedProperty(@NotNull NodeBuilder parent, @NotNull PropertyState ours, @NotNull PropertyState theirs,\n+                                            @NotNull PropertyState base) {\n         if (ExternalIdentityConstants.REP_LAST_SYNCED.equals(ours.getName())) {\n-            merge(parent, ours, theirs);\n-            return Resolution.MERGED;\n+            return merge(parent, ours, theirs);\n         }\n         return Resolution.IGNORED;\n     }\n \n-    private static void merge(NodeBuilder parent, PropertyState ours, PropertyState theirs) {\n+    private static Resolution merge(@NotNull NodeBuilder parent, @NotNull PropertyState ours, @NotNull PropertyState theirs) {\n         Calendar o = parse(ours.getValue(Type.DATE));\n         Calendar t = parse(theirs.getValue(Type.DATE));\n-        Calendar v = o.before(t) ? t : o;\n-        parent.setProperty(ours.getName(), v);\n+        if (o != null) {\n+            Calendar v = o.before(t) ? t : o;\n+            parent.setProperty(ours.getName(), v);\n+            return Resolution.MERGED;\n+        } else if (t != null) {\n+            parent.setProperty(ours.getName(), t);\n+            return Resolution.MERGED;\n+        } else {\n+            return Resolution.IGNORED;\n+        }\n     }\n \n     @Override\n     @NotNull\n-    public Resolution changeDeletedProperty(@NotNull NodeBuilder parent, @NotNull PropertyState ours,\n-            @NotNull PropertyState base) {\n+    public Resolution changeDeletedProperty(@NotNull NodeBuilder parent, @NotNull PropertyState ours, @NotNull PropertyState base) {\n         return Resolution.IGNORED;\n     }\n ",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/e2945fb8f0cf6cffa3bc1f823ce8a088a120560a/oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/principal/ExternalIdentityConflictHandler.java",
                "sha": "c70b1be4311e94af178377e5d728b99da0bf682f",
                "status": "modified"
            },
            {
                "additions": 151,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/e2945fb8f0cf6cffa3bc1f823ce8a088a120560a/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/principal/ExternalIdentityConflictHandlerTest.java",
                "changes": 151,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/principal/ExternalIdentityConflictHandlerTest.java?ref=e2945fb8f0cf6cffa3bc1f823ce8a088a120560a",
                "deletions": 0,
                "filename": "oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/principal/ExternalIdentityConflictHandlerTest.java",
                "patch": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal;\n+\n+import org.apache.jackrabbit.oak.api.PropertyState;\n+import org.apache.jackrabbit.oak.api.Type;\n+import org.apache.jackrabbit.oak.spi.commit.ThreeWayConflictHandler;\n+import org.apache.jackrabbit.oak.spi.state.NodeBuilder;\n+import org.apache.jackrabbit.oak.spi.state.NodeState;\n+import org.apache.jackrabbit.util.ISO8601;\n+import org.junit.Test;\n+\n+import java.util.Calendar;\n+\n+import static org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalIdentityConstants.REP_LAST_SYNCED;\n+import static org.junit.Assert.assertSame;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.verify;\n+\n+public class ExternalIdentityConflictHandlerTest {\n+\n+    private ExternalIdentityConflictHandler handler = new ExternalIdentityConflictHandler();\n+\n+    @Test\n+    public void testAddExistingProperty() {\n+        assertSame(ThreeWayConflictHandler.Resolution.IGNORED, handler.addExistingProperty(mock(NodeBuilder.class), mock(PropertyState.class), mock(PropertyState.class)));\n+    }\n+\n+    @Test\n+    public void testAddExistingPropertyRepLastSynced() {\n+        Calendar cal = Calendar.getInstance();\n+        String calStr = ISO8601.format(cal);\n+        cal.set(Calendar.YEAR, 2000);\n+        String calStr2 = ISO8601.format(cal);\n+\n+        PropertyState ours = when(mock(PropertyState.class).getName()).thenReturn(REP_LAST_SYNCED).getMock();\n+        when(ours.getValue(Type.DATE)).thenReturn(calStr);\n+        PropertyState theirs = when(mock(PropertyState.class).getValue(Type.DATE)).thenReturn(calStr2).getMock();\n+\n+        assertSame(ThreeWayConflictHandler.Resolution.MERGED, handler.addExistingProperty(mock(NodeBuilder.class), ours, theirs));\n+    }\n+\n+    @Test\n+    public void testChangeChangedProperty() {\n+        assertSame(ThreeWayConflictHandler.Resolution.IGNORED, handler.changeChangedProperty(mock(NodeBuilder.class), mock(PropertyState.class), mock(PropertyState.class), mock(PropertyState.class)));\n+    }\n+\n+    @Test\n+    public void testChangeChangedPropertyRepLastSynced() {\n+        Calendar cal = Calendar.getInstance();\n+        String calStr = ISO8601.format(cal);\n+        cal.set(Calendar.YEAR, 2000);\n+        String calStr2 = ISO8601.format(cal);\n+\n+        PropertyState ours = when(mock(PropertyState.class).getName()).thenReturn(REP_LAST_SYNCED).getMock();\n+        when(ours.getValue(Type.DATE)).thenReturn(calStr2);\n+        PropertyState theirs = when(mock(PropertyState.class).getValue(Type.DATE)).thenReturn(calStr).getMock();\n+\n+        assertSame(ThreeWayConflictHandler.Resolution.MERGED, handler.changeChangedProperty(mock(NodeBuilder.class), ours, theirs, mock(PropertyState.class)));\n+    }\n+\n+    @Test\n+    public void testChangeDeletedProperty() {\n+        assertSame(ThreeWayConflictHandler.Resolution.IGNORED, handler.changeDeletedProperty(mock(NodeBuilder.class), mock(PropertyState.class), mock(PropertyState.class)));\n+    }\n+\n+    @Test\n+    public void testDeleteDeletedProperty() {\n+        assertSame(ThreeWayConflictHandler.Resolution.IGNORED, handler.deleteDeletedProperty(mock(NodeBuilder.class), mock(PropertyState.class)));\n+    }\n+\n+    @Test\n+    public void testDeleteChangedProperty() {\n+        assertSame(ThreeWayConflictHandler.Resolution.IGNORED, handler.deleteChangedProperty(mock(NodeBuilder.class), mock(PropertyState.class), mock(PropertyState.class)));\n+    }\n+\n+    @Test\n+    public void testAddExistingNode() {\n+        assertSame(ThreeWayConflictHandler.Resolution.IGNORED, handler.addExistingNode(mock(NodeBuilder.class), \"name\", mock(NodeState.class), mock(NodeState.class)));\n+    }\n+\n+    @Test\n+    public void testChangeDeletedNode() {\n+        assertSame(ThreeWayConflictHandler.Resolution.IGNORED, handler.changeDeletedNode(mock(NodeBuilder.class), \"name\", mock(NodeState.class), mock(NodeState.class)));\n+    }\n+\n+    @Test\n+    public void testDeleteChangedNode() {\n+        assertSame(ThreeWayConflictHandler.Resolution.IGNORED, handler.deleteChangedNode(mock(NodeBuilder.class), \"name\", mock(NodeState.class), mock(NodeState.class)));\n+    }\n+\n+    @Test\n+    public void testDeleteDeletedNode() {\n+        assertSame(ThreeWayConflictHandler.Resolution.IGNORED, handler.deleteDeletedNode(mock(NodeBuilder.class), \"name\", mock(NodeState.class)));\n+    }\n+\n+    @Test\n+    public void testMergeOursCannotBeParsed() {\n+        Calendar cal = Calendar.getInstance();\n+        String calStr = ISO8601.format(cal);\n+\n+        PropertyState ours = when(mock(PropertyState.class).getName()).thenReturn(REP_LAST_SYNCED).getMock();\n+        when(ours.getValue(Type.DATE)).thenReturn(\"notParseable\");\n+        PropertyState theirs = when(mock(PropertyState.class).getValue(Type.DATE)).thenReturn(calStr).getMock();\n+\n+        NodeBuilder parent = mock(NodeBuilder.class);\n+        assertSame(ThreeWayConflictHandler.Resolution.MERGED, handler.changeChangedProperty(parent, ours, theirs, mock(PropertyState.class)));\n+        verify(parent, times(1)).setProperty(REP_LAST_SYNCED, ISO8601.parse(theirs.getValue(Type.DATE)));\n+    }\n+\n+    @Test\n+    public void testMergeTheirsCannotBeParsed() {\n+        Calendar cal = Calendar.getInstance();\n+        String calStr = ISO8601.format(cal);\n+\n+        PropertyState ours = when(mock(PropertyState.class).getName()).thenReturn(REP_LAST_SYNCED).getMock();\n+        when(ours.getValue(Type.DATE)).thenReturn(calStr);\n+        PropertyState theirs = when(mock(PropertyState.class).getValue(Type.DATE)).thenReturn(\"notParseable\").getMock();\n+\n+        NodeBuilder parent = mock(NodeBuilder.class);\n+        assertSame(ThreeWayConflictHandler.Resolution.MERGED, handler.changeChangedProperty(parent, ours, theirs, mock(PropertyState.class)));\n+        verify(parent, times(1)).setProperty(REP_LAST_SYNCED, ISO8601.parse(ours.getValue(Type.DATE)));\n+    }\n+\n+    @Test\n+    public void testMergeNoneCannotBeParsed() {\n+        PropertyState ours = when(mock(PropertyState.class).getName()).thenReturn(REP_LAST_SYNCED).getMock();\n+        when(ours.getValue(Type.DATE)).thenReturn(\"notParseable1\");\n+        PropertyState theirs = when(mock(PropertyState.class).getValue(Type.DATE)).thenReturn(\"notParseable2\").getMock();\n+\n+        NodeBuilder parent = mock(NodeBuilder.class);\n+        assertSame(ThreeWayConflictHandler.Resolution.IGNORED, handler.changeChangedProperty(parent, ours, theirs, mock(PropertyState.class)));\n+        assertSame(ThreeWayConflictHandler.Resolution.IGNORED, handler.addExistingProperty(parent, ours, theirs));\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/e2945fb8f0cf6cffa3bc1f823ce8a088a120560a/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/principal/ExternalIdentityConflictHandlerTest.java",
                "sha": "2ef23ffa720ce77b6d90a15eb45128fa53c18ff6",
                "status": "added"
            }
        ],
        "message": "OAK-8700 : ExternalIdentityConflictHandler prone to NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1869187 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/fc73eb4c80f1c30fa2256ab7c6b1e07a95e21ea9",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "ExternalIdentityConflictHandlerTest.java"
        ]
    },
    "jackrabbit-oak_ebea8a9": {
        "bug_id": "jackrabbit-oak_ebea8a9",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/ebea8a9817849c178510a3586136227fd1fc0445",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/ebea8a9817849c178510a3586136227fd1fc0445/oak-commons/src/main/java/org/apache/jackrabbit/oak/commons/StringUtils.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-commons/src/main/java/org/apache/jackrabbit/oak/commons/StringUtils.java?ref=ebea8a9817849c178510a3586136227fd1fc0445",
                "deletions": 5,
                "filename": "oak-commons/src/main/java/org/apache/jackrabbit/oak/commons/StringUtils.java",
                "patch": "@@ -16,6 +16,11 @@\n  */\n package org.apache.jackrabbit.oak.commons;\n \n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import javax.annotation.Nonnull;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -28,13 +33,17 @@\n \n     private static final char[] HEX = \"0123456789abcdef\".toCharArray();\n \n+    private StringUtils() {}\n+\n     /**\n      * Convert a byte array to a hex encoded string.\n      *\n      * @param value the byte array\n      * @return the hex encoded string\n      */\n-    public static String convertBytesToHex(byte[] value) {\n+    @Nonnull\n+    public static String convertBytesToHex(@Nonnull byte[] value) {\n+        checkNotNull(value);\n         int len = value.length;\n         char[] buff = new char[len + len];\n         char[] hex = HEX;\n@@ -52,11 +61,12 @@ public static String convertBytesToHex(byte[] value) {\n      * @param s the hex encoded string\n      * @return the byte array\n      */\n-    public static byte[] convertHexToBytes(String s) {\n+    @Nonnull\n+    public static byte[] convertHexToBytes(@Nonnull String s) {\n+        checkNotNull(s);\n         int len = s.length();\n-        if (len % 2 != 0) {\n-            throw new IllegalArgumentException(s);\n-        }\n+        checkArgument(len % 2 == 0);\n+\n         len /= 2;\n         byte[] buff = new byte[len];\n         for (int i = 0; i < len; i++) {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/ebea8a9817849c178510a3586136227fd1fc0445/oak-commons/src/main/java/org/apache/jackrabbit/oak/commons/StringUtils.java",
                "sha": "2c064017c889e92dd38d7f4abc433b2edef1205a",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/ebea8a9817849c178510a3586136227fd1fc0445/oak-commons/src/test/java/org/apache/jackrabbit/oak/commons/StringUtilsTest.java",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-commons/src/test/java/org/apache/jackrabbit/oak/commons/StringUtilsTest.java?ref=ebea8a9817849c178510a3586136227fd1fc0445",
                "deletions": 15,
                "filename": "oak-commons/src/test/java/org/apache/jackrabbit/oak/commons/StringUtilsTest.java",
                "patch": "@@ -16,34 +16,57 @@\n  */\n package org.apache.jackrabbit.oak.commons;\n \n-import com.google.common.collect.Maps;\n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n \n import java.util.Map;\n \n+import com.google.common.collect.Maps;\n+import org.junit.Test;\n+\n /**\n  * Test the string utilities.\n  */\n-public class StringUtilsTest extends TestCase {\n-\n-    public void testHex() {\n-        assertEquals(\"0123\", StringUtils.convertBytesToHex(new byte[]{(byte) 0x01, (byte) 0x23}));\n-        assertEquals(\"89bd\", StringUtils.convertBytesToHex(new byte[]{(byte) 0x89, (byte) 0xbd}));\n-        assertEquals(\"face\", StringUtils.convertBytesToHex(new byte[]{(byte) 0xfa, (byte) 0xce}));\n-        IOUtilsTest.assertEquals(new byte[]{(byte) 0xfa, (byte) 0xce}, StringUtils.convertHexToBytes(\"face\"));\n-        IOUtilsTest.assertEquals(new byte[]{(byte) 0xfa, (byte) 0xce}, StringUtils.convertHexToBytes(\"fAcE\"));\n-        IOUtilsTest.assertEquals(new byte[]{(byte) 0xfa, (byte) 0xce}, StringUtils.convertHexToBytes(\"FaCe\"));\n-        IOUtilsTest.assertEquals(new byte[]{(byte) 0x09, (byte) 0xaf}, StringUtils.convertHexToBytes(\"09af\"));\n+public class StringUtilsTest {\n+\n+    @Test\n+    public void testBytesToHex() {\n+        assertEquals(\"0123\", StringUtils.convertBytesToHex(new byte[] {(byte) 0x01, (byte) 0x23}));\n+        assertEquals(\"89bd\", StringUtils.convertBytesToHex(new byte[] {(byte) 0x89, (byte) 0xbd}));\n+        assertEquals(\"face\", StringUtils.convertBytesToHex(new byte[] {(byte) 0xfa, (byte) 0xce}));\n+        assertEquals(\"\", StringUtils.convertBytesToHex(new byte[] {}));\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testNullToHex() {\n+        StringUtils.convertBytesToHex(null);\n+    }\n+\n+    @Test\n+    public void testHexToBytes() {\n+        IOUtilsTest.assertEquals(new byte[] {(byte) 0xfa, (byte) 0xce}, StringUtils.convertHexToBytes(\"face\"));\n+        IOUtilsTest.assertEquals(new byte[] {(byte) 0xfa, (byte) 0xce}, StringUtils.convertHexToBytes(\"fAcE\"));\n+        IOUtilsTest.assertEquals(new byte[] {(byte) 0xfa, (byte) 0xce}, StringUtils.convertHexToBytes(\"FaCe\"));\n+        IOUtilsTest.assertEquals(new byte[] {(byte) 0x09, (byte) 0xaf}, StringUtils.convertHexToBytes(\"09af\"));\n+        IOUtilsTest.assertEquals(new byte[] {}, StringUtils.convertHexToBytes(\"\"));\n+    }\n+\n+    @Test\n+    public void testInvalidHexToBytes() {\n         for (String s : new String[]{\"120\", \"1/\", \"9:\", \"fast\", \"a`\", \"ag\", \"0@\", \"aG\"}) {\n             try {\n                 StringUtils.convertHexToBytes(s);\n                 fail();\n-            } catch (IllegalArgumentException e) {\n-                // expected\n-            }\n+            } catch (IllegalArgumentException expected) { }\n         }\n     }\n \n+    @Test(expected = NullPointerException.class)\n+    public void testNullToBytes() {\n+        StringUtils.convertHexToBytes(null);\n+    }\n+\n+    @Test\n     public void testEstimateMemoryUsage() {\n         final Map<String, Integer> testStrings = Maps.newHashMap();\n         testStrings.put(null, 0);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/ebea8a9817849c178510a3586136227fd1fc0445/oak-commons/src/test/java/org/apache/jackrabbit/oak/commons/StringUtilsTest.java",
                "sha": "059f229a1540fea86c3a78db1240d46d858743c9",
                "status": "modified"
            }
        ],
        "message": "OAK-5357: StringUtils conversion functions can throw NullPointerException\nMake the NPE explicit and add test coverage\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1784288 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/526e5e21c1f0b821b2513251d3855e5666a1ca91",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "StringUtilsTest.java"
        ]
    },
    "jackrabbit-oak_ef0855c": {
        "bug_id": "jackrabbit-oak_ef0855c",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/ef0855c515b0cb4d8124270fb85ab9a638c3c7b8",
        "file": [
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/ef0855c515b0cb4d8124270fb85ab9a638c3c7b8/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/Branch.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/Branch.java?ref=ef0855c515b0cb4d8124270fb85ab9a638c3c7b8",
                "deletions": 8,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/Branch.java",
                "patch": "@@ -41,20 +41,31 @@\n      */\n     private final Revision base;\n \n+    /**\n+     * Create a new branch instance with an initial set of commits and a given\n+     * base revision.\n+     *\n+     * @param commits the initial branch commits.\n+     * @param base the base commit.\n+     * @param comparator the revision comparator.\n+     * @throws IllegalArgumentException if base is a branch revision.\n+     */\n     Branch(@Nonnull SortedSet<Revision> commits,\n            @Nonnull Revision base,\n            @Nonnull Revision.RevisionComparator comparator) {\n-        this.base = checkNotNull(base);\n+        checkArgument(!checkNotNull(base).isBranch(), \"base is not a trunk revision: %s\", base);\n+        this.base = base;\n         this.commits = new TreeMap<Revision, BranchCommit>(\n                 checkNotNull(comparator));\n         for (Revision r : commits) {\n-            this.commits.put(r, new BranchCommit(base));\n+            this.commits.put(r.asBranchRevision(), new BranchCommit(base));\n         }\n     }\n \n     /**\n      * @return the initial base of this branch.\n      */\n+    @Nonnull\n     Revision getBase() {\n         return base;\n     }\n@@ -67,8 +78,9 @@ Revision getBase() {\n      * @throws IllegalArgumentException if <code>r</code> is not a commit of\n      *                                  this branch.\n      */\n-    synchronized Revision getBase(Revision r) {\n-        BranchCommit c = commits.get(r);\n+    @Nonnull\n+    synchronized Revision getBase(@Nonnull Revision r) {\n+        BranchCommit c = commits.get(checkNotNull(r).asBranchRevision());\n         if (c == null) {\n             throw new IllegalArgumentException(\n                     \"Revision \" + r + \" is not a commit in this branch\");\n@@ -81,8 +93,12 @@ synchronized Revision getBase(Revision r) {\n      *\n      * @param head the new head of the branch.\n      * @param base rebase to this revision.\n+     * @throws IllegalArgumentException if head is a trunk revision or base is a\n+     *                                  branch revision.\n      */\n-    synchronized void rebase(Revision head, Revision base) {\n+    synchronized void rebase(@Nonnull Revision head, @Nonnull Revision base) {\n+        checkArgument(checkNotNull(head).isBranch(), \"Not a branch revision: %s\", head);\n+        checkArgument(!checkNotNull(base).isBranch(), \"Not a trunk revision: %s\", base);\n         Revision last = commits.lastKey();\n         checkArgument(commits.comparator().compare(head, last) > 0);\n         commits.put(head, new BranchCommit(base));\n@@ -92,8 +108,10 @@ synchronized void rebase(Revision head, Revision base) {\n      * Adds a new commit with revision <code>r</code> to this branch.\n      *\n      * @param r the revision of the branch commit to add.\n+     * @throws IllegalArgumentException if r is not a branch revision.\n      */\n     synchronized void addCommit(@Nonnull Revision r) {\n+        checkArgument(checkNotNull(r).isBranch(), \"Not a branch revision: %s\", r);\n         Revision last = commits.lastKey();\n         checkArgument(commits.comparator().compare(r, last) > 0);\n         commits.put(r, new BranchCommit(commits.get(last).getBase()));\n@@ -124,16 +142,18 @@ synchronized boolean hasCommits() {\n      *         revision; <code>false</code> otherwise.\n      */\n     synchronized boolean containsCommit(@Nonnull Revision r) {\n-        return commits.containsKey(r);\n+        return commits.containsKey(checkNotNull(r).asBranchRevision());\n     }\n \n     /**\n      * Removes the commit with the given revision <code>r</code>. Does nothing\n      * if there is no such commit.\n      *\n      * @param r the revision of the commit to remove.\n+     * @throws IllegalArgumentException if r is not a branch revision.\n      */\n     public synchronized void removeCommit(@Nonnull Revision r) {\n+        checkArgument(checkNotNull(r).isBranch(), \"Not a branch revision: %s\", r);\n         commits.remove(r);\n     }\n \n@@ -142,11 +162,12 @@ public synchronized void removeCommit(@Nonnull Revision r) {\n      *\n      * @param r a branch commit revision.\n      * @return the unsaved modification for the given branch commit.\n-     * @throws IllegalArgumentException if there is no commit with the given\n-     *                                  revision.\n+     * @throws IllegalArgumentException r is not a branch revision or if there\n+     *                                  is no commit with the given revision.\n      */\n     @Nonnull\n     public synchronized UnsavedModifications getModifications(@Nonnull Revision r) {\n+        checkArgument(checkNotNull(r).isBranch(), \"Not a branch revision: %s\", r);\n         BranchCommit c = commits.get(r);\n         if (c == null) {\n             throw new IllegalArgumentException(\n@@ -182,6 +203,7 @@ public synchronized void applyTo(@Nonnull UnsavedModifications trunk,\n     @CheckForNull\n     public synchronized Revision getUnsavedLastRevision(String path,\n                                                         Revision readRevision) {\n+        readRevision = readRevision.asBranchRevision();\n         for (Revision r : commits.descendingKeySet()) {\n             if (readRevision.compareRevisionTime(r) < 0) {\n                 continue;",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/ef0855c515b0cb4d8124270fb85ab9a638c3c7b8/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/Branch.java",
                "sha": "6dd49a7d822cbb87fc2a729d9633225f0d3ea42e",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/ef0855c515b0cb4d8124270fb85ab9a638c3c7b8/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoMK.java",
                "changes": 51,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoMK.java?ref=ef0855c515b0cb4d8124270fb85ab9a638c3c7b8",
                "deletions": 28,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoMK.java",
                "patch": "@@ -658,8 +658,6 @@ synchronized String diffImpl(String fromRevisionId, String toRevisionId, String\n         if (path == null || path.equals(\"\")) {\n             path = \"/\";\n         }\n-        fromRevisionId = stripBranchRevMarker(fromRevisionId);\n-        toRevisionId = stripBranchRevMarker(toRevisionId);\n         Revision fromRev = Revision.fromString(fromRevisionId);\n         Revision toRev = Revision.fromString(toRevisionId);\n         Node from = getNode(path, fromRev);\n@@ -779,7 +777,7 @@ public boolean nodeExists(String path, String revisionId)\n             throw new MicroKernelException(\"Path is not absolute: \" + path);\n         }\n         revisionId = revisionId != null ? revisionId : headRevision.toString();\n-        Revision rev = Revision.fromString(stripBranchRevMarker(revisionId));\n+        Revision rev = Revision.fromString(revisionId);\n         Node n = getNode(path, rev);\n         return n != null;\n     }\n@@ -799,7 +797,6 @@ public synchronized String getNodes(String path, String revisionId, int depth,\n             throw new MicroKernelException(\"Only depth 0 is supported, depth is \" + depth);\n         }\n         revisionId = revisionId != null ? revisionId : headRevision.toString();\n-        revisionId = stripBranchRevMarker(revisionId);\n         Revision rev = Revision.fromString(revisionId);\n         Node n = getNode(path, rev);\n         if (n == null) {\n@@ -850,7 +847,7 @@ public synchronized String commit(String rootPath, String json, String baseRevId\n             baseRev = headRevision;\n             baseRevId = baseRev.toString();\n         } else {\n-            baseRev = Revision.fromString(stripBranchRevMarker(baseRevId));\n+            baseRev = Revision.fromString(baseRevId);\n         }\n         JsopReader t = new JsopTokenizer(json);\n         Revision rev = newRevision();\n@@ -923,11 +920,13 @@ public synchronized String commit(String rootPath, String json, String baseRevId\n                 throw new MicroKernelException(\"token: \" + (char) t.getTokenType());\n             }\n         }\n-        if (baseRevId.startsWith(\"b\")) {\n+        if (baseRev.isBranch()) {\n+            rev = rev.asBranchRevision();\n             // remember branch commit\n             Branch b = branches.getBranch(baseRev);\n             if (b == null) {\n-                b = branches.create(baseRev, rev);\n+                // baseRev is marker for new branch\n+                b = branches.create(baseRev.asTrunkRevision(), rev);\n             } else {\n                 b.addCommit(rev);\n             }\n@@ -945,11 +944,12 @@ public synchronized String commit(String rootPath, String json, String baseRevId\n                 }\n             }\n \n-            return \"b\" + rev.toString();\n+            return rev.toString();\n+        } else {\n+            commit.apply();\n+            headRevision = commit.getRevision();\n+            return rev.toString();\n         }\n-        commit.apply();\n-        headRevision = commit.getRevision();\n-        return rev.toString();\n     }\n \n     //------------------------< RevisionContext >-------------------------------\n@@ -1073,13 +1073,6 @@ private void markAsDeleted(String path, Commit commit, boolean subTreeAlso) {\n         nodeCache.invalidate(path + \"@\" + rev);\n     }\n \n-    private static String stripBranchRevMarker(String revisionId) {\n-        if (revisionId.startsWith(\"b\")) {\n-            return revisionId.substring(1);\n-        }\n-        return revisionId;\n-    }\n-    \n     public static void parseAddNode(Commit commit, JsopReader t, String path) {\n         Node n = new Node(path, commit.getRevision());\n         if (!t.matches('}')) {\n@@ -1104,27 +1097,28 @@ public static void parseAddNode(Commit commit, JsopReader t, String path) {\n     public String branch(@Nullable String trunkRevisionId) throws MicroKernelException {\n         // nothing is written when the branch is created, the returned\n         // revision simply acts as a reference to the branch base revision\n-        String revisionId = trunkRevisionId != null ? trunkRevisionId : headRevision.toString();\n-        return \"b\" + revisionId;\n+        Revision revision = trunkRevisionId != null\n+                ? Revision.fromString(trunkRevisionId) : headRevision;\n+        return revision.asBranchRevision().toString();\n     }\n \n     @Override\n     public synchronized String merge(String branchRevisionId, String message)\n             throws MicroKernelException {\n         // TODO improve implementation if needed\n-        if (!branchRevisionId.startsWith(\"b\")) {\n+        Revision revision = Revision.fromString(branchRevisionId);\n+        if (!revision.isBranch()) {\n             throw new MicroKernelException(\"Not a branch: \" + branchRevisionId);\n         }\n \n-        String revisionId = stripBranchRevMarker(branchRevisionId);\n         // make branch commits visible\n         UpdateOp op = new UpdateOp(Utils.getIdFromPath(\"/\"), false);\n-        Revision revision = Revision.fromString(revisionId);\n         Branch b = branches.getBranch(revision);\n         Revision mergeCommit = newRevision();\n         NodeDocument.setModified(op, mergeCommit);\n         if (b != null) {\n             for (Revision rev : b.getCommits()) {\n+                rev = rev.asTrunkRevision();\n                 NodeDocument.setRevision(op, rev, \"c-\" + mergeCommit.toString());\n                 op.containsMapEntry(NodeDocument.COLLISIONS, rev.toString(), false);\n             }\n@@ -1148,23 +1142,23 @@ public String rebase(@Nonnull String branchRevisionId,\n                          @Nullable String newBaseRevisionId)\n             throws MicroKernelException {\n         // TODO conflict handling\n-        Revision r = Revision.fromString(stripBranchRevMarker(branchRevisionId));\n+        Revision r = Revision.fromString(branchRevisionId);\n         Revision base = newBaseRevisionId != null ?\n                 Revision.fromString(newBaseRevisionId) :\n                 headRevision;\n         Branch b = branches.getBranch(r);\n         if (b == null) {\n             // empty branch\n-            return \"b\" + base.toString();\n+            return base.asBranchRevision().toString();\n         }\n         if (b.getBase().equals(base)) {\n             return branchRevisionId;\n         }\n         // add a pseudo commit to make sure current head of branch\n         // has a higher revision than base of branch\n-        Revision head = newRevision();\n+        Revision head = newRevision().asBranchRevision();\n         b.rebase(head, base);\n-        return \"b\" + head.toString();\n+        return head.toString();\n     }\n \n     @Override\n@@ -1226,7 +1220,8 @@ public void applyChanges(Revision rev, String path,\n             ArrayList<String> removed) {\n         UnsavedModifications unsaved = unsavedLastRevisions;\n         if (isBranchCommit) {\n-            unsaved = branches.getBranch(rev).getModifications(rev);\n+            Revision branchRev = rev.asBranchRevision();\n+            unsaved = branches.getBranch(branchRev).getModifications(branchRev);\n         }\n         // track unsaved modifications of nodes that were not\n         // written in the commit (implicitly modified parent)",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/ef0855c515b0cb4d8124270fb85ab9a638c3c7b8/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoMK.java",
                "sha": "f23e3d9cd11f55fbd9cd151816c5a14317caf069",
                "status": "modified"
            },
            {
                "additions": 73,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/ef0855c515b0cb4d8124270fb85ab9a638c3c7b8/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/NodeDocument.java",
                "changes": 122,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/NodeDocument.java?ref=ef0855c515b0cb4d8124270fb85ab9a638c3c7b8",
                "deletions": 49,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/NodeDocument.java",
                "patch": "@@ -338,37 +338,7 @@ boolean isValidRevision(@Nonnull RevisionContext context,\n         if (validRevisions.contains(rev)) {\n             return true;\n         }\n-        if (containsRevision(rev)) {\n-            if (isCommitted(context, rev, readRevision)) {\n-                validRevisions.add(rev);\n-                return true;\n-            } else {\n-                // rev is in revisions map of this node, but not committed\n-                // no need to check _commitRoot field\n-                return false;\n-            }\n-        }\n-        // check commit root\n-        @SuppressWarnings(\"unchecked\")\n-        Map<String, Integer> commitRoot = (Map<String, Integer>) get(COMMIT_ROOT);\n-        String commitRootPath = null;\n-        if (commitRoot != null) {\n-            Integer depth = commitRoot.get(rev.toString());\n-            if (depth != null) {\n-                String p = Utils.getPathFromId(getId());\n-                commitRootPath = PathUtils.getAncestorPath(p, PathUtils.getDepth(p) - depth);\n-            }\n-        }\n-        if (commitRootPath == null) {\n-            // shouldn't happen, either node is commit root for a revision\n-            // or has a reference to the commit root\n-            log.warn(\"Node {} does not have commit root reference for revision {}\",\n-                    getId(), rev);\n-            return false;\n-        }\n-        // get root of commit\n-        NodeDocument doc = store.find(Collection.NODES,\n-                Utils.getIdFromPath(commitRootPath));\n+        NodeDocument doc = getCommitRoot(rev);\n         if (doc == null) {\n             return false;\n         }\n@@ -760,6 +730,40 @@ public static void setDeleted(@Nonnull UpdateOp op,\n \n     //----------------------------< internal >----------------------------------\n \n+    /**\n+     * Returns the commit root document for the given revision. This may either\n+     * be this document or another one.\n+     *\n+     * @param rev a revision.\n+     * @return the commit root or <code>null</code> if there is none.\n+     */\n+    @CheckForNull\n+    private NodeDocument getCommitRoot(@Nonnull Revision rev) {\n+        if (containsRevision(rev)) {\n+            return this;\n+        }\n+        // check commit root\n+        @SuppressWarnings(\"unchecked\")\n+        Map<String, Integer> commitRoot = (Map<String, Integer>) get(COMMIT_ROOT);\n+        String commitRootPath = null;\n+        if (commitRoot != null) {\n+            Integer depth = commitRoot.get(rev.toString());\n+            if (depth != null) {\n+                String p = Utils.getPathFromId(getId());\n+                commitRootPath = PathUtils.getAncestorPath(p, PathUtils.getDepth(p) - depth);\n+            }\n+        }\n+        if (commitRootPath == null) {\n+            // shouldn't happen, either node is commit root for a revision\n+            // or has a reference to the commit root\n+            log.warn(\"Node {} does not have commit root reference for revision {}\",\n+                    getId(), rev);\n+            return null;\n+        }\n+        // get root of commit\n+        return store.find(Collection.NODES, Utils.getIdFromPath(commitRootPath));\n+    }\n+\n     /**\n      * Checks that revision x is newer than another revision.\n      *\n@@ -787,40 +791,59 @@ private static boolean isRevisionNewer(@Nonnull RevisionContext context,\n     private boolean isCommitted(@Nonnull RevisionContext context,\n                                 @Nonnull Revision revision,\n                                 @Nonnull Revision readRevision) {\n-        if (revision.equals(readRevision)) {\n+        if (revision.equalsIgnoreBranch(readRevision)) {\n             return true;\n         }\n-        String r = revision.toString();\n-        String value = getRevisionsMap().get(r);\n-        if (value == null) {\n-            // check previous\n-            for (NodeDocument prev : getPreviousDocs(revision)) {\n-                value = prev.getRevisionsMap().get(r);\n-                if (value != null) {\n-                    break;\n-                }\n-            }\n-        }\n+        String value = getCommitValue(revision);\n         if (value == null) {\n             return false;\n         }\n         if (Utils.isCommitted(value)) {\n-            // resolve commit revision\n-            revision = Utils.resolveCommitRevision(revision, value);\n-            if (context.getBranches().getBranch(readRevision) == null) {\n+            if (context.getBranches().getBranch(readRevision) == null\n+                    && !readRevision.isBranch()) {\n+                // resolve commit revision\n+                revision = Utils.resolveCommitRevision(revision, value);\n                 // readRevision is not from a branch\n                 // compare resolved revision as is\n                 return !isRevisionNewer(context, revision, readRevision);\n+            } else {\n+                // on same merged branch?\n+                if (value.equals(getCommitValue(readRevision.asTrunkRevision()))) {\n+                    // compare unresolved revision\n+                    return !isRevisionNewer(context, revision, readRevision);\n+                }\n             }\n         } else {\n-            // branch commit\n+            // branch commit (not merged)\n             if (Revision.fromString(value).getClusterId() != context.getClusterId()) {\n                 // this is an unmerged branch commit from another cluster node,\n                 // hence never visible to us\n                 return false;\n             }\n         }\n-        return includeRevision(context, revision, readRevision);\n+        return includeRevision(context, Utils.resolveCommitRevision(revision, value), readRevision);\n+    }\n+\n+    /**\n+     * Returns the commit value for the given <code>revision</code>.\n+     *\n+     * @param revision a revision.\n+     * @return the commit value or <code>null</code> if the revision is unknown.\n+     */\n+    @CheckForNull\n+    private String getCommitValue(Revision revision) {\n+        String r = revision.toString();\n+        String value = getRevisionsMap().get(r);\n+        if (value == null) {\n+            // check previous\n+            for (NodeDocument prev : getPreviousDocs(revision)) {\n+                value = prev.getRevisionsMap().get(r);\n+                if (value != null) {\n+                    break;\n+                }\n+            }\n+        }\n+        return value;\n     }\n \n     private static boolean includeRevision(RevisionContext context,\n@@ -833,7 +856,8 @@ private static boolean includeRevision(RevisionContext context,\n             if (b.containsCommit(requestRevision)) {\n                 // in same branch, include if the same revision or\n                 // requestRevision is newer\n-                return x.equals(requestRevision) || isRevisionNewer(context, requestRevision, x);\n+                return x.equalsIgnoreBranch(requestRevision)\n+                        || isRevisionNewer(context, requestRevision, x);\n             }\n             // not part of branch identified by requestedRevision\n             return false;",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/ef0855c515b0cb4d8124270fb85ab9a638c3c7b8/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/NodeDocument.java",
                "sha": "c815e5a951d24017d671c693a8bf1dc1466e6b97",
                "status": "modified"
            },
            {
                "additions": 69,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/ef0855c515b0cb4d8124270fb85ab9a638c3c7b8/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/Revision.java",
                "changes": 74,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/Revision.java?ref=ef0855c515b0cb4d8124270fb85ab9a638c3c7b8",
                "deletions": 5,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/Revision.java",
                "patch": "@@ -51,18 +51,28 @@\n      * The cluster id (the MongoDB machine id).\n      */\n     private int clusterId;\n+\n+    /**\n+     * Whether this is a branch revision.\n+     */\n+    private final boolean branch;\n     \n     /**\n      * The string representation.\n      */\n     private String string;\n     \n     public Revision(long timestamp, int counter, int clusterId) {\n+        this(timestamp, counter, clusterId, false);\n+    }\n+    \n+    public Revision(long timestamp, int counter, int clusterId, boolean branch) {\n         this.timestamp = timestamp;\n         this.counter = counter;\n         this.clusterId = clusterId;\n+        this.branch = branch;\n     }\n-    \n+\n     /**\n      * Compare the time part of two revisions. If they contain the same time,\n      * the counter is compared.\n@@ -128,6 +138,11 @@ public static long getTimestampDifference(long a, long b) {\n     }\n     \n     public static Revision fromString(String rev) {\n+        boolean isBranch = false;\n+        if (rev.startsWith(\"b\")) {\n+            isBranch = true;\n+            rev = rev.substring(1);\n+        }\n         if (!rev.startsWith(\"r\")) {\n             throw new IllegalArgumentException(rev);\n         }\n@@ -145,14 +160,15 @@ public static Revision fromString(String rev) {\n         int c = Integer.parseInt(t, 16);\n         t = rev.substring(idxClusterId + 1);\n         int clusterId = Integer.parseInt(t, 16);\n-        Revision r = new Revision(timestamp, c, clusterId);\n+        Revision r = new Revision(timestamp, c, clusterId, isBranch);\n         return r;\n     }\n     \n     @Override\n     public String toString() {\n         if (string == null) {\n-            string = new StringBuilder(\"r\").\n+            string = new StringBuilder(branch ? \"b\" : \"\").\n+                append('r').\n                 append(Long.toHexString(timestamp)).\n                 append('-').\n                 append(Integer.toHexString(counter)).\n@@ -175,7 +191,43 @@ public long getTimestamp() {\n     public int getCounter() {\n         return counter;\n     }\n-    \n+\n+    /**\n+     * @return <code>true</code> if this is a branch revision, otherwise\n+     *         <code>false</code>.\n+     */\n+    public boolean isBranch() {\n+        return branch;\n+    }\n+\n+    /**\n+     * Returns a revision with the same timestamp, counter and clusterId as this\n+     * revision and the branch flag set to <code>true</code>.\n+     *\n+     * @return branch revision with this timestamp, counter and clusterId.\n+     */\n+    public Revision asBranchRevision() {\n+        if (isBranch()) {\n+            return this;\n+        } else {\n+            return new Revision(timestamp, counter, clusterId, true);\n+        }\n+    }\n+\n+    /**\n+     * Returns a revision with the same timestamp, counter and clusterId as this\n+     * revision and the branch flag set to <code>false</code>.\n+     *\n+     * @return trunkrevision with this timestamp, counter and clusterId.\n+     */\n+    public Revision asTrunkRevision() {\n+        if (!isBranch()) {\n+            return this;\n+        } else {\n+            return new Revision(timestamp, counter, clusterId);\n+        }\n+    }\n+\n     @Override\n     public int hashCode() {\n         return (int) (timestamp >>> 32) ^ (int) timestamp ^ counter ^ clusterId;\n@@ -193,7 +245,19 @@ public boolean equals(Object other) {\n         Revision r = (Revision) other;\n         return r.timestamp == this.timestamp && \n                 r.counter == this.counter && \n-                r.clusterId == this.clusterId;\n+                r.clusterId == this.clusterId &&\n+                r.branch == this.branch;\n+    }\n+\n+    public boolean equalsIgnoreBranch(Revision other) {\n+        if (this == other) {\n+            return true;\n+        } else if (other == null) {\n+            return false;\n+        }\n+        return other.timestamp == this.timestamp &&\n+                other.counter == this.counter &&\n+                other.clusterId == this.clusterId;\n     }\n \n     public int getClusterId() {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/ef0855c515b0cb4d8124270fb85ab9a638c3c7b8/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/Revision.java",
                "sha": "69c05ad57c5edacd8b64f0982e5ed27c73967c80",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/ef0855c515b0cb4d8124270fb85ab9a638c3c7b8/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/UnmergedBranches.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/UnmergedBranches.java?ref=ef0855c515b0cb4d8124270fb85ab9a638c3c7b8",
                "deletions": 4,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/UnmergedBranches.java",
                "patch": "@@ -28,6 +28,7 @@\n \n import org.apache.jackrabbit.oak.plugins.mongomk.util.Utils;\n \n+import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Preconditions.checkNotNull;\n \n /**\n@@ -67,15 +68,18 @@ void init(DocumentStore store, RevisionContext context) {\n             throw new IllegalStateException(\"already initialized\");\n         }\n         NodeDocument doc = store.find(Collection.NODES, Utils.getIdFromPath(\"/\"));\n+        if (doc == null) {\n+            return;\n+        }\n         SortedMap<Revision, Revision> revisions = doc.getUncommittedRevisions(context);\n         while (!revisions.isEmpty()) {\n             SortedSet<Revision> commits = new TreeSet<Revision>(comparator);\n             Revision head = revisions.lastKey();\n             commits.add(head);\n-            Revision base = revisions.remove(head);\n+            Revision base = revisions.remove(head).asTrunkRevision();\n             while (revisions.containsKey(base)) {\n                 commits.add(base);\n-                base = revisions.remove(base);\n+                base = revisions.remove(base).asTrunkRevision();\n             }\n             branches.add(new Branch(commits, base, comparator));\n         }\n@@ -87,12 +91,17 @@ void init(DocumentStore store, RevisionContext context) {\n      * @param base the base revision of the branch.\n      * @param initial the initial commit to the branch.\n      * @return the branch.\n+     * @throws IllegalArgumentException if\n      */\n     @Nonnull\n     Branch create(@Nonnull Revision base, @Nonnull Revision initial) {\n+        checkArgument(!checkNotNull(base).isBranch(),\n+                \"base is not a trunk revision: %s\", base);\n+        checkArgument(checkNotNull(initial).isBranch(),\n+                \"initial is not a branch revision: %s\", initial);\n         SortedSet<Revision> commits = new TreeSet<Revision>(comparator);\n-        commits.add(checkNotNull(initial));\n-        Branch b = new Branch(commits, checkNotNull(base), comparator);\n+        commits.add(initial);\n+        Branch b = new Branch(commits, base, comparator);\n         synchronized (branches) {\n             branches.add(b);\n         }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/ef0855c515b0cb4d8124270fb85ab9a638c3c7b8/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/UnmergedBranches.java",
                "sha": "86522e01e8bee4bbb8b43f44048c764f18b1e038",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/ef0855c515b0cb4d8124270fb85ab9a638c3c7b8/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoMKBranchMergeTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoMKBranchMergeTest.java?ref=ef0855c515b0cb4d8124270fb85ab9a638c3c7b8",
                "deletions": 5,
                "filename": "oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoMKBranchMergeTest.java",
                "patch": "@@ -441,14 +441,18 @@ public void run() {\n         }\n     }\n \n-    @Ignore(\"OAK-992\")\n     @Test\n     public void branchReadAfterMerge() {\n         String branchRev = mk.branch(null);\n-        branchRev = mk.commit(\"/\", \"+\\\"foo\\\":{}\", branchRev, null);\n-        branchRev = mk.commit(\"/\", \"+\\\"bar\\\":{}\", branchRev, null);\n-        mk.merge(branchRev, null);\n-        assertNodesExist(branchRev, \"/foo\");\n+        String branchRev1 = mk.commit(\"/\", \"+\\\"foo\\\":{}\", branchRev, null);\n+        String branchRev2 = mk.commit(\"/\", \"+\\\"bar\\\":{}\", branchRev1, null);\n+        mk.merge(branchRev2, null);\n+\n+        assertNodesExist(branchRev2, \"/foo\");\n+        assertNodesExist(branchRev2, \"/bar\");\n+\n+        assertNodesExist(branchRev1, \"/foo\");\n+        assertNodesNotExist(branchRev1, \"/bar\");\n     }\n \n     //--------------------------< internal >------------------------------------",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/ef0855c515b0cb4d8124270fb85ab9a638c3c7b8/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoMKBranchMergeTest.java",
                "sha": "48e8e3a6c99c16b4d575557956e43f49ad95c715",
                "status": "modified"
            }
        ],
        "message": "OAK-992: NPE when running FlatTreeWithAceForSamePrincipalTest on MongoMK\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1522482 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/35c3ad072df911b14bffec7f9c827f38edd9b3fb",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "BranchTest.java",
            "NodeDocumentTest.java",
            "RevisionTest.java"
        ]
    },
    "jackrabbit-oak_f4b0563": {
        "bug_id": "jackrabbit-oak_f4b0563",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/f4b0563dc3e73bcd94c23b8d1032d45eaff1a397",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f4b0563dc3e73bcd94c23b8d1032d45eaff1a397/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/version/ReadOnlyVersionManager.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/version/ReadOnlyVersionManager.java?ref=f4b0563dc3e73bcd94c23b8d1032d45eaff1a397",
                "deletions": 6,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/version/ReadOnlyVersionManager.java",
                "patch": "@@ -47,7 +47,7 @@\n      *         {@code Root} returned by {@link #getWorkspaceRoot()}.\n      */\n     @Nonnull\n-    protected abstract Tree getVersionStorageTree();\n+    protected abstract TreeLocation getVersionStorageLocation();\n \n     /**\n      * @return the {@code Root} of the workspace.\n@@ -100,16 +100,14 @@ public Tree getVersionHistory(@Nonnull Tree versionable)\n             throws UnsupportedRepositoryOperationException,\n             RepositoryException {\n         checkVersionable(versionable);\n-        String uuid = versionable.getProperty(\n-                VersionConstants.JCR_UUID).getValue(Type.STRING);\n-        return getVersionStorageTree().getLocation().getChild(\n-                getVersionHistoryPath(uuid)).getTree();\n+        String uuid = versionable.getProperty(VersionConstants.JCR_UUID).getValue(Type.STRING);\n+        return getVersionStorageLocation().getChild(getVersionHistoryPath(uuid)).getTree();\n     }\n \n     /**\n      * Returns the path of the version history for the given {@code uuid}.\n      * The returned path is relative to the version storage tree as returned\n-     * by {@link #getVersionStorageTree()}.\n+     * by {@link #getVersionStorageLocation()}.\n      *\n      * @param uuid the uuid of the versionable node\n      * @return the relative path of the version history for the given uuid.",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f4b0563dc3e73bcd94c23b8d1032d45eaff1a397/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/version/ReadOnlyVersionManager.java",
                "sha": "7aa0640bb7a4cb9a292ca0e984afe36ee827ed44",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f4b0563dc3e73bcd94c23b8d1032d45eaff1a397/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/version/ReadWriteVersionManager.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/version/ReadWriteVersionManager.java?ref=f4b0563dc3e73bcd94c23b8d1032d45eaff1a397",
                "deletions": 3,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/version/ReadWriteVersionManager.java",
                "patch": "@@ -26,7 +26,7 @@\n \n import org.apache.jackrabbit.oak.api.PropertyState;\n import org.apache.jackrabbit.oak.api.Root;\n-import org.apache.jackrabbit.oak.api.Tree;\n+import org.apache.jackrabbit.oak.api.TreeLocation;\n import org.apache.jackrabbit.oak.api.Type;\n import org.apache.jackrabbit.oak.commons.PathUtils;\n import org.apache.jackrabbit.oak.core.ReadOnlyRoot;\n@@ -77,8 +77,8 @@\n \n     @Nonnull\n     @Override\n-    protected Tree getVersionStorageTree() {\n-        return new ReadOnlyTree(versionStorageNode.getNodeState());\n+    protected TreeLocation getVersionStorageLocation() {\n+        return new ReadOnlyTree(versionStorageNode.getNodeState()).getLocation();\n     }\n \n     @Nonnull",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f4b0563dc3e73bcd94c23b8d1032d45eaff1a397/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/version/ReadWriteVersionManager.java",
                "sha": "0fece38b5e261d1a2a82830117202e6f44e4a3f5",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f4b0563dc3e73bcd94c23b8d1032d45eaff1a397/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/version/ReadWriteVersionManager.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/version/ReadWriteVersionManager.java?ref=f4b0563dc3e73bcd94c23b8d1032d45eaff1a397",
                "deletions": 3,
                "filename": "oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/version/ReadWriteVersionManager.java",
                "patch": "@@ -34,7 +34,7 @@\n import static com.google.common.base.Preconditions.checkNotNull;\n \n /**\n- * <code>ReadWriteVersionManager</code>...\n+ * {@code ReadWriteVersionManager}...\n  */\n public class ReadWriteVersionManager extends ReadOnlyVersionManager {\n \n@@ -61,8 +61,8 @@ protected void refresh() throws RepositoryException {\n \n     @Override\n     @Nonnull\n-    protected Tree getVersionStorageTree() {\n-        return versionStorageLocation.getTree();\n+    protected TreeLocation getVersionStorageLocation() {\n+        return versionStorageLocation;\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f4b0563dc3e73bcd94c23b8d1032d45eaff1a397/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/version/ReadWriteVersionManager.java",
                "sha": "891fe1077e0980b49b18e61377d8a79e92e9e0c6",
                "status": "modified"
            }
        ],
        "message": "OAK-681: ReadOnlyVersionManager.getVersionHistory throws NPE if the versionstore is not accessible\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1453759 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/51d2704c3de23f02c4fd15d9fb302b6f29fb5516",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "ReadOnlyVersionManagerTest.java"
        ]
    },
    "jackrabbit-oak_f75b8e5": {
        "bug_id": "jackrabbit-oak_f75b8e5",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/f75b8e5e4058d8fcd3ac320aea4a4cebaa458c75",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f75b8e5e4058d8fcd3ac320aea4a4cebaa458c75/oak-it/mk/src/main/java/org/apache/jackrabbit/mk/test/MicroKernelIT.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-it/mk/src/main/java/org/apache/jackrabbit/mk/test/MicroKernelIT.java?ref=f75b8e5e4058d8fcd3ac320aea4a4cebaa458c75",
                "deletions": 0,
                "filename": "oak-it/mk/src/main/java/org/apache/jackrabbit/mk/test/MicroKernelIT.java",
                "patch": "@@ -263,6 +263,19 @@ public void copyToDescendant() {\n \n         assertTrue(mk.nodeExists(\"/test/child\", null));\n         assertTrue(mk.nodeExists(\"/test/copy/child\", null));\n+        JSONObject obj = parseJSONObject(mk.getNodes(\"/test\", null, 99, 0, -1, null));\n+        assertPropertyValue(obj, \":childNodeCount\", 2l);\n+        assertPropertyValue(obj, \"copy/:childNodeCount\", 1l);\n+        assertPropertyValue(obj, \"copy/child/:childNodeCount\", 0l);\n+\n+        mk.commit(\"\", \"+\\\"/root\\\":{} +\\\"/root/N4\\\":{} *\\\"/root/N4\\\":\\\"/root/N4/N5\\\"\", null, null);\n+        assertTrue(mk.nodeExists(\"/root\", null));\n+        assertTrue(mk.nodeExists(\"/root/N4\", null));\n+        assertTrue(mk.nodeExists(\"/root/N4/N5\", null));\n+        obj = parseJSONObject(mk.getNodes(\"/root\", null, 99, 0, -1, null));\n+        assertPropertyValue(obj, \":childNodeCount\", 1l);\n+        assertPropertyValue(obj, \"N4/:childNodeCount\", 1l);\n+        assertPropertyValue(obj, \"N4/N5/:childNodeCount\", 0l);\n     }\n \n     @Test",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f75b8e5e4058d8fcd3ac320aea4a4cebaa458c75/oak-it/mk/src/main/java/org/apache/jackrabbit/mk/test/MicroKernelIT.java",
                "sha": "7d2b13f43f0f9413783562d6a96d660de5ba185a",
                "status": "modified"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f75b8e5e4058d8fcd3ac320aea4a4cebaa458c75/oak-mk/src/main/java/org/apache/jackrabbit/mk/api/MicroKernel.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-mk/src/main/java/org/apache/jackrabbit/mk/api/MicroKernel.java?ref=f75b8e5e4058d8fcd3ac320aea4a4cebaa458c75",
                "deletions": 12,
                "filename": "oak-mk/src/main/java/org/apache/jackrabbit/mk/api/MicroKernel.java",
                "patch": "@@ -77,14 +77,20 @@\n      *   ...\n      * ]\n      * </pre>\n+     * The {@code path} parameter allows to filter the revisions by path, i.e.\n+     * only those revisions that affected the subtree rooted at {@code path}\n+     * will be included.\n      *\n      * @param since      timestamp (ms) of earliest revision to be returned\n      * @param maxEntries maximum #entries to be returned;\n      *                   if < 0, no limit will be applied.\n+     * @param path       optional path filter; if {@code null} or {@code \"\"} the\n+     *                   default ({@code\"/\"}) will be assumed, i.e. no filter\n+     *                   will be applied\n      * @return a list of revisions in chronological order in JSON format.\n      * @throws MicroKernelException if an error occurs\n      */\n-    String /* jsonArray */ getRevisionHistory(long since, int maxEntries)\n+    String /* jsonArray */ getRevisionHistory(long since, int maxEntries/*, String path*/)\n             throws MicroKernelException;\n \n     /**\n@@ -127,39 +133,47 @@ String waitForCommit(String oldHeadRevisionId, long timeout)\n      * If {@code fromRevisionId} and {@code toRevisionId} are not in chronological\n      * order the returned journal will be empty (i.e. {@code []})\n      * <p/>\n+     * The {@code path} parameter allows to filter the revisions by path, i.e.\n+     * only those revisions that affected the subtree rooted at {@code path}\n+     * will be included.\n+     * <p/>\n      * A {@code MicroKernelException} is thrown if either {@code fromRevisionId}\n      * or {@code toRevisionId}  doesn't exist, denotes a <i>private</i> branch\n      * revision or if another error occurs.\n      *\n      * @param fromRevisionId id of first revision to be returned in journal\n      * @param toRevisionId   id of last revision to be returned in journal,\n      *                       if {@code null} the current head revision is assumed\n-     * @param filter         (optional) filter criteria\n-     *                       (e.g. path, property names, etc);\n-     *                       TODO specify format and semantics\n+     * @param path           optional path filter; if {@code null} or {@code \"\"}\n+     *                       the default ({@code\"/\"}) will be assumed, i.e. no\n+     *                       filter will be applied\n      * @return a chronological list of revisions in JSON format\n      * @throws MicroKernelException if an error occurs\n      */\n     String /* jsonArray */ getJournal(String fromRevisionId, String toRevisionId,\n-                                      String filter)\n+                                      String path)\n             throws MicroKernelException;\n \n     /**\n      * Returns the JSON diff representation of the changes between the specified\n      * revisions. The changes will be consolidated if the specified range\n      * covers intermediary revisions. {@code fromRevisionId} and {@code toRevisionId}\n      * don't need not be in a specific chronological order.\n+     * <p/>\n+     * The {@code path} parameter allows to filter the revisions by path, i.e.\n+     * only those revisions that affected the subtree rooted at {@code path}\n+     * will be included.\n      *\n      * @param fromRevisionId a revision id, if {@code null} the current head revision is assumed\n      * @param toRevisionId   another revision id, if {@code null} the current head revision is assumed\n-     * @param filter         (optional) filter criteria\n-     *                       (e.g. path, property names, etc);\n-     *                       TODO specify format and semantics\n+     * @param path           optional path filter; if {@code null} or {@code \"\"}\n+     *                       the default ({@code\"/\"}) will be assumed, i.e. no\n+     *                       filter will be applied\n      * @return JSON diff representation of the changes\n      * @throws MicroKernelException if an error occurs\n      */\n     String /* JSON diff */ diff(String fromRevisionId, String toRevisionId,\n-                                String filter)\n+                                String path)\n             throws MicroKernelException;\n \n     //-------------------------------------------------------------< READ ops >\n@@ -250,18 +264,32 @@ String waitForCommit(String oldHeadRevisionId, long timeout)\n      * <p/>\n      * The {@code offset} and {@code count} parameters are only applied to the\n      * direct child nodes of the root of the returned node tree.\n+     * <p/>\n+     * The {@code filter} parameter allows to specify the names of properties\n+     * to be included or excluded.\n+     * <p/>\n+     * Format:\n+     * <pre>\n+     * {\n+     *   incl: [ \"foo\", \"foo1\" ],\n+     *   excl: [ \"bar\", \"tmp\" ]\n+     * }\n+     * </pre>\n+     * TODO clarify (globbing) syntax, semantics and implicit default filter (OAK-75)\n+     * <p/>\n+     * For more information see {@link #getNodes(String, String)}.\n      *\n      * @param path       path denoting root of node tree to be retrieved\n      * @param revisionId revision id, if {@code null} the current head revision is assumed\n      * @param depth      maximum depth of returned tree\n      * @param offset     start position in the iteration order of child nodes (0 to start at the\n      *                   beginning)\n      * @param count      maximum number of child nodes to retrieve (-1 for all)\n-     * @param filter     (optional) filter criteria\n-     *                   (e.g. names of properties to be included, etc);\n-     *                   TODO specify format and semantics\n+     * @param filter     optional filter on property names; if {@code null} or\n+     *                   {@code \"\"} the default filter will be assumed\n      * @return node tree in JSON format or {@code null} if the specified node does not exist\n      * @throws MicroKernelException if the specified revision does not exist or if another error occurs\n+     * @see #getNodes(String, String)\n      */\n     String /* jsonTree */ getNodes(String path, String revisionId, int depth,\n                                    long offset, int count, String filter)",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f75b8e5e4058d8fcd3ac320aea4a4cebaa458c75/oak-mk/src/main/java/org/apache/jackrabbit/mk/api/MicroKernel.java",
                "sha": "b18ff64b3ff3b7b2365841143d1f0636015f8658",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f75b8e5e4058d8fcd3ac320aea4a4cebaa458c75/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/CommitBuilder.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/CommitBuilder.java?ref=f75b8e5e4058d8fcd3ac320aea4a4cebaa458c75",
                "deletions": 3,
                "filename": "oak-mk/src/main/java/org/apache/jackrabbit/mk/model/CommitBuilder.java",
                "patch": "@@ -615,15 +615,16 @@ void apply() throws Exception {\n                 throw new NotFoundException(srcPath);\n             }\n \n-            MutableNode destParent = getOrCreateStagedNode(destParentPath);\n-            destParent.add(new ChildNode(destNodeName, srcCNE.getId()));\n-\n             if (staged.containsKey(srcPath)) {\n                 // the copied subtree is modified\n \n                 // update staging area\n                 copyStagedNodes(srcPath, destPath, destPath);\n             }\n+\n+            MutableNode destParent = getOrCreateStagedNode(destParentPath);\n+            destParent.add(new ChildNode(destNodeName, srcCNE.getId()));\n+\n         }\n \n         @Override",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f75b8e5e4058d8fcd3ac320aea4a4cebaa458c75/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/CommitBuilder.java",
                "sha": "ccc033cfbdc465bb03d5ffaa457d11070c692189",
                "status": "modified"
            }
        ],
        "message": "OAK-85: NPE and wrong result on copy operation\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1334040 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/bc20b6dc88f32deb3baa76bbbd6005b5cd2f4fd5",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "CommitBuilderTest.java"
        ]
    },
    "jackrabbit-oak_f878b38": {
        "bug_id": "jackrabbit-oak_f878b38",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/f878b3867093dbcc53760f2acadfa12dbf31801f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-authorization-cug/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugConfiguration.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-authorization-cug/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugConfiguration.java?ref=f878b3867093dbcc53760f2acadfa12dbf31801f",
                "deletions": 0,
                "filename": "oak-authorization-cug/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugConfiguration.java",
                "patch": "@@ -233,6 +233,7 @@ private CugExclude getExclude() {\n     static boolean registerCugNodeTypes(@NotNull final Root root) {\n         try {\n             ReadOnlyNodeTypeManager ntMgr = new ReadOnlyNodeTypeManager() {\n+                @NotNull\n                 @Override\n                 protected Tree getTypes() {\n                     return root.getTree(NodeTypeConstants.NODE_TYPES_PATH);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-authorization-cug/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugConfiguration.java",
                "sha": "5f80affba976045796a82fda4315856d40d699d0",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-authorization-cug/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugValidatorTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-authorization-cug/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugValidatorTest.java?ref=f878b3867093dbcc53760f2acadfa12dbf31801f",
                "deletions": 1,
                "filename": "oak-authorization-cug/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugValidatorTest.java",
                "patch": "@@ -153,7 +153,7 @@ protected Root getWriteRoot() {\n                 return root;\n             }\n \n-            @Nullable\n+            @NotNull\n             @Override\n             protected Tree getTypes() {\n                 return root.getTree(NODE_TYPES_PATH);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-authorization-cug/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugValidatorTest.java",
                "sha": "a35c1bbc58d3d6dc84b17c508cb3601c64f0ecfd",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/NodeTypeImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/NodeTypeImpl.java?ref=f878b3867093dbcc53760f2acadfa12dbf31801f",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/NodeTypeImpl.java",
                "patch": "@@ -485,7 +485,8 @@ private boolean internalCanRemoveItem(String itemName,\n     private ReadOnlyNodeTypeManager getManager() {\n         final Tree types = definition.getParent();\n         return new ReadOnlyNodeTypeManager() {\n-            @Override @Nullable\n+            @NotNull\n+            @Override\n             protected Tree getTypes() {\n                 return types;\n             }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/NodeTypeImpl.java",
                "sha": "c019c5f34445cb2ad64f75e1251d7c5e5106c575",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/ReadOnlyNodeTypeManager.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/ReadOnlyNodeTypeManager.java?ref=f878b3867093dbcc53760f2acadfa12dbf31801f",
                "deletions": 15,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/ReadOnlyNodeTypeManager.java",
                "patch": "@@ -82,10 +82,13 @@ protected final String getOakName(String jcrName) throws RepositoryException {\n     }\n \n     /**\n-     * @return  {@link org.apache.jackrabbit.oak.api.Tree} instance where the node types\n-     * are stored or {@code null} if none.\n+     * Returns the {@link Tree} instance where the node types are stored. This\n+     * method never returns {@code null} and may return a {@code Tree} that\n+     * does not exist (see {@link Tree#exists()} when there are no types stored.\n+     *\n+     * @return {@link Tree} instance where the node types are stored.\n      */\n-    @Nullable\n+    @NotNull\n     protected abstract Tree getTypes();\n \n     /**\n@@ -125,6 +128,7 @@ protected NamePathMapper getNamePathMapper() {\n     public static ReadOnlyNodeTypeManager getInstance(final Root root,\n                                                       final NamePathMapper namePathMapper) {\n         return new ReadOnlyNodeTypeManager() {\n+            @NotNull\n             @Override\n             protected Tree getTypes() {\n                 return root.getTree(NODE_TYPES_PATH);\n@@ -142,8 +146,7 @@ protected NamePathMapper getNamePathMapper() {\n \n     @Override\n     public boolean hasNodeType(String name) throws RepositoryException {\n-        Tree types = getTypes();\n-        return types != null && types.hasChild(getOakName(name));\n+        return getTypes().hasChild(getOakName(name));\n     }\n \n     @Override\n@@ -155,11 +158,9 @@ public NodeType getNodeType(String name) throws RepositoryException {\n     public NodeTypeIterator getAllNodeTypes() throws RepositoryException {\n         List<NodeType> list = Lists.newArrayList();\n         Tree types = getTypes();\n-        if (types != null) {\n-            NamePathMapper mapper = getNamePathMapper();\n-            for (Tree type : types.getChildren()) {\n-                list.add(new NodeTypeImpl(type, mapper));\n-            }\n+        NamePathMapper mapper = getNamePathMapper();\n+        for (Tree type : types.getChildren()) {\n+            list.add(new NodeTypeImpl(type, mapper));\n         }\n         return new NodeTypeIteratorAdapter(list);\n     }\n@@ -411,11 +412,9 @@ public PropertyDefinition getDefinition(@NotNull Tree parent, @NotNull PropertyS\n     @NotNull\n     NodeTypeImpl internalGetNodeType(@NotNull String oakName) throws NoSuchNodeTypeException {\n         Tree types = getTypes();\n-        if (types != null) {\n-            Tree type = types.getChild(oakName);\n-            if (type.exists()) {\n-                return new NodeTypeImpl(type, getNamePathMapper());\n-            }\n+        Tree type = types.getChild(oakName);\n+        if (type.exists()) {\n+            return new NodeTypeImpl(type, getNamePathMapper());\n         }\n         throw new NoSuchNodeTypeException(getNamePathMapper().getJcrName(oakName));\n     }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/ReadOnlyNodeTypeManager.java",
                "sha": "3fdd4802c26b6a8dce75c28a982b9ebcb140f337",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/write/NodeTypeRegistry.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/write/NodeTypeRegistry.java?ref=f878b3867093dbcc53760f2acadfa12dbf31801f",
                "deletions": 0,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/write/NodeTypeRegistry.java",
                "patch": "@@ -51,6 +51,7 @@\n \n     private NodeTypeRegistry(final Root root) {\n         this.ntMgr =  new ReadWriteNodeTypeManager() {\n+            @NotNull\n             @Override\n             protected Tree getTypes() {\n                 return root.getTree(NODE_TYPES_PATH);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/write/NodeTypeRegistry.java",
                "sha": "d7afc68120bdeb4813bc3f8136e4ee2c3083d918",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/nodetype/write/NodeTypeRegistryTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/nodetype/write/NodeTypeRegistryTest.java?ref=f878b3867093dbcc53760f2acadfa12dbf31801f",
                "deletions": 0,
                "filename": "oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/nodetype/write/NodeTypeRegistryTest.java",
                "patch": "@@ -182,12 +182,14 @@ public void registerNodeType() throws Exception {\n         registerNodeType(root, \"oak6440-1.cnd\");\n         NodeTypeManager readOnlyNtMgr = new ReadOnlyNodeTypeManager() {\n             private Root r = session.getLatestRoot();\n+            @NotNull\n             @Override\n             protected Tree getTypes() {\n                 return r.getTree(NODE_TYPES_PATH);\n             }\n         };\n         NodeTypeManager ntMgr = new ReadWriteNodeTypeManager() {\n+            @NotNull\n             @Override\n             protected Tree getTypes() {\n                 return root.getTree(NODE_TYPES_PATH);\n@@ -234,6 +236,7 @@ protected Root getWriteRoot() {\n     @Test\n     public void reRegisterNtResource() throws Exception {\n         NodeTypeManager ntMgr = new ReadWriteNodeTypeManager() {\n+            @NotNull\n             @Override\n             protected Tree getTypes() {\n                 return root.getTree(NODE_TYPES_PATH);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/nodetype/write/NodeTypeRegistryTest.java",
                "sha": "fff81a9d937bdb4bb3c40a44083ed00bca45234e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/evaluation/JcrUUIDTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/evaluation/JcrUUIDTest.java?ref=f878b3867093dbcc53760f2acadfa12dbf31801f",
                "deletions": 0,
                "filename": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/evaluation/JcrUUIDTest.java",
                "patch": "@@ -57,6 +57,7 @@ protected Root getWriteRoot() {\n                 return root;\n             }\n \n+            @NotNull\n             @Override\n             protected Tree getTypes() {\n                 return root.getTree(NODE_TYPES_PATH);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/evaluation/JcrUUIDTest.java",
                "sha": "830c07dd599ef4b0e157e966c03937d5422cd9b7",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/WorkspaceImpl.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/WorkspaceImpl.java?ref=f878b3867093dbcc53760f2acadfa12dbf31801f",
                "deletions": 0,
                "filename": "oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/WorkspaceImpl.java",
                "patch": "@@ -81,6 +81,7 @@ protected void refresh() throws RepositoryException {\n                 getSession().refresh(true);\n             }\n \n+            @NotNull\n             @Override\n             protected Tree getTypes() {\n                 return sessionDelegate.getRoot().getTree(NODE_TYPES_PATH);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/WorkspaceImpl.java",
                "sha": "e6b70950a16238306fdb88183cab8c106062c248",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-search/src/main/java/org/apache/jackrabbit/oak/plugins/index/search/IndexDefinition.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-search/src/main/java/org/apache/jackrabbit/oak/plugins/index/search/IndexDefinition.java?ref=f878b3867093dbcc53760f2acadfa12dbf31801f",
                "deletions": 4,
                "filename": "oak-search/src/main/java/org/apache/jackrabbit/oak/plugins/index/search/IndexDefinition.java",
                "patch": "@@ -42,6 +42,7 @@\n import com.google.common.primitives.Ints;\n import org.apache.jackrabbit.JcrConstants;\n import org.apache.jackrabbit.oak.api.PropertyState;\n+import org.apache.jackrabbit.oak.api.Root;\n import org.apache.jackrabbit.oak.api.Tree;\n import org.apache.jackrabbit.oak.api.Type;\n import org.apache.jackrabbit.oak.commons.PathUtils;\n@@ -51,7 +52,7 @@\n import org.apache.jackrabbit.oak.plugins.index.search.util.FunctionIndexProcessor;\n import org.apache.jackrabbit.oak.plugins.memory.PropertyStates;\n import org.apache.jackrabbit.oak.plugins.nodetype.ReadOnlyNodeTypeManager;\n-import org.apache.jackrabbit.oak.plugins.tree.TreeUtil;\n+import org.apache.jackrabbit.oak.plugins.tree.factories.RootFactory;\n import org.apache.jackrabbit.oak.plugins.tree.factories.TreeFactory;\n import org.apache.jackrabbit.oak.spi.filter.PathFilter;\n import org.apache.jackrabbit.oak.spi.query.QueryIndex.OrderEntry;\n@@ -774,7 +775,7 @@ public IndexingRule getApplicableIndexingRule(NodeState state) {\n         }\n \n         Map<String, List<IndexingRule>> nt2rules = newHashMap();\n-        ReadOnlyNodeTypeManager ntReg = createNodeTypeManager(TreeFactory.createReadOnlyTree(root));\n+        ReadOnlyNodeTypeManager ntReg = createNodeTypeManager(RootFactory.createReadOnlyRoot(root));\n \n         //Use Tree API to read ordered child nodes\n         Tree ruleTree = TreeFactory.createReadOnlyTree(indexRules);\n@@ -1593,11 +1594,12 @@ private NodeState getTikaConfigNode() {\n         }\n     }\n \n-    private static ReadOnlyNodeTypeManager createNodeTypeManager(final Tree root) {\n+    private static ReadOnlyNodeTypeManager createNodeTypeManager(final Root root) {\n         return new ReadOnlyNodeTypeManager() {\n+            @NotNull\n             @Override\n             protected Tree getTypes() {\n-                return TreeUtil.getTree(root,NODE_TYPES_PATH);\n+                return root.getTree(NODE_TYPES_PATH);\n             }\n \n             @NotNull",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-search/src/main/java/org/apache/jackrabbit/oak/plugins/index/search/IndexDefinition.java",
                "sha": "01d0430a6ba7da8ef9a8997d35a83dc1b81cb0cd",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositoryUpgrade.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositoryUpgrade.java?ref=f878b3867093dbcc53760f2acadfa12dbf31801f",
                "deletions": 0,
                "filename": "oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositoryUpgrade.java",
                "patch": "@@ -451,6 +451,7 @@ public void copy(RepositoryInitializer initializer) throws RepositoryException {\n             } else {\n                 logger.info(\"Copying registered node types\");\n                 NodeTypeManager ntMgr = new ReadWriteNodeTypeManager() {\n+                    @NotNull\n                     @Override\n                     protected Tree getTypes() {\n                         return upgradeRoot.getTree(NODE_TYPES_PATH);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositoryUpgrade.java",
                "sha": "34e2ca87f4b0c1f908b2e34fe167aaae9e609fe2",
                "status": "modified"
            }
        ],
        "message": "OAK-8218: ReadOnlyNodeTypeManager.isNodeType prone to NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1857304 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/11903eb48da994d1477df04eb4aa7e86750005bb",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "CugConfigurationTest.java",
            "NodeTypeRegistryTest.java",
            "IndexDefinitionTest.java",
            "RepositoryUpgradeTest.java"
        ]
    },
    "jackrabbit-oak_fb31aec": {
        "bug_id": "jackrabbit-oak_fb31aec",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/fb31aecc28238d02797722083e2f0e3cad532715",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/fb31aecc28238d02797722083e2f0e3cad532715/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/AsyncIndexUpdate.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/AsyncIndexUpdate.java?ref=fb31aecc28238d02797722083e2f0e3cad532715",
                "deletions": 3,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/AsyncIndexUpdate.java",
                "patch": "@@ -236,9 +236,12 @@ public synchronized void run() {\n                     name, checkpoint);\n             store.release(checkpoint);\n         } else {\n-            log.debug(\"The {} index update succeeded; releasing the previous checkpoint {}\",\n-                    name, refCheckpoint);\n-            store.release(refCheckpoint);\n+            if (refCheckpoint != null) {\n+                log.debug(\n+                        \"The {} index update succeeded; releasing the previous checkpoint {}\",\n+                        name, refCheckpoint);\n+                store.release(refCheckpoint);\n+            }\n         }\n \n         if (exception != null) {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/fb31aecc28238d02797722083e2f0e3cad532715/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/AsyncIndexUpdate.java",
                "sha": "d52c43090dfce297c6d957326d68ec6456d6b399",
                "status": "modified"
            }
        ],
        "message": "OAK-1877: Hourly async reindexing on an idle instance\n - added null check to comply with the #release apis, and prevent an eventual NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1602207 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/40b75b38b369f145ea018f258c114a95559acec9",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "AsyncIndexUpdateTest.java"
        ]
    }
}