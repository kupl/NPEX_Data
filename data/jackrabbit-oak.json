{
    "jackrabbit-oak_0ca2725": {
        "bug_id": "jackrabbit-oak_0ca2725",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/0ca272564f169715049fc2a7f3b49a3079a95eb0",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/0ca272564f169715049fc2a7f3b49a3079a95eb0/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java?ref=0ca272564f169715049fc2a7f3b49a3079a95eb0",
                "deletions": 1,
                "filename": "oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "patch": "@@ -833,7 +833,7 @@ public void dispose() {\n \n     private <T extends Document> T getIfCached(Collection<T> collection, String id, long modCount) {\n         T doc = getIfCached(collection, id);\n-        if (doc != null && doc.getModCount() == modCount) {\n+        if (doc != null && doc.getModCount() != null && doc.getModCount() == modCount) {\n             return doc;\n         } else {\n             return null;",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/0ca272564f169715049fc2a7f3b49a3079a95eb0/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "sha": "d7cd619d2dc27561f28b8617ff51ef04856ad8b0",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/0ca272564f169715049fc2a7f3b49a3079a95eb0/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java?ref=0ca272564f169715049fc2a7f3b49a3079a95eb0",
                "deletions": 3,
                "filename": "oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java",
                "patch": "@@ -62,6 +62,7 @@\n import org.slf4j.LoggerFactory;\n \n import com.google.common.base.Function;\n+import com.google.common.base.Strings;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.Lists;\n \n@@ -84,6 +85,8 @@\n     private final RDBDocumentSerializer ser;\n     private final int queryHitsLimit, queryTimeLimit;\n \n+    private static final Long INITIALMODCOUNT = Long.valueOf(1);\n+    \n     public RDBDocumentStoreJDBC(RDBDocumentStoreDB dbInfo, RDBDocumentSerializer ser, int queryHitsLimit, int queryTimeLimit) {\n         this.dbInfo = dbInfo;\n         this.ser = ser;\n@@ -343,7 +346,7 @@ public long determineServerTimeDifferenceMillis(Connection connection) {\n             boolean batchIsEmpty = true;\n             for (T document : sortDocuments(documents)) {\n                 Long modcount = (Long) document.get(MODCOUNT);\n-                if (modcount == 1) {\n+                if (INITIALMODCOUNT.equals(modcount)) {\n                     continue; // This is a new document. We'll deal with the inserts later.\n                 }\n \n@@ -414,7 +417,7 @@ public long determineServerTimeDifferenceMillis(Connection connection) {\n         if (upsert) {\n             List<T> toBeInserted = new ArrayList<T>(documents.size());\n             for (T doc : documents) {\n-                if ((Long) doc.get(MODCOUNT) == 1) {\n+                if (INITIALMODCOUNT.equals(doc.get(MODCOUNT))) {\n                     toBeInserted.add(doc);\n                 }\n             }\n@@ -1111,7 +1114,7 @@ private static Integer hasBinaryAsNullOrInteger(Number n) {\n         Collections.sort(result, new Comparator<T>() {\n             @Override\n             public int compare(T o1, T o2) {\n-                return o1.getId().compareTo(o2.getId());\n+                return Strings.nullToEmpty(o1.getId()).compareTo(Strings.nullToEmpty(o2.getId()));\n             }\n         });\n         return result;",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/0ca272564f169715049fc2a7f3b49a3079a95eb0/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java",
                "sha": "eb038b66fa28840181ca26b9f32d406603bc2724",
                "status": "modified"
            }
        ],
        "message": "OAK-8346: RDBDocumentStore*: fix several potential but improbable NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1859881 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/7cbf317f8e540adabd017ec11c0ee3714a27f830",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "RDBDocumentStoreJDBCTest.java"
        ]
    },
    "jackrabbit-oak_1381db4": {
        "bug_id": "jackrabbit-oak_1381db4",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/1381db46096850ef4a975445dac682ca57c944e6",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/1381db46096850ef4a975445dac682ca57c944e6/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java?ref=1381db46096850ef4a975445dac682ca57c944e6",
                "deletions": 2,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "patch": "@@ -656,7 +656,9 @@ private static String asString(@Nonnull Document doc) {\n             return success;\n         } catch (SQLException ex) {\n             try {\n-                connection.rollback();\n+                if (connection != null) {\n+                    connection.rollback();\n+                }\n             } catch (SQLException e) {\n                 // TODO\n             }\n@@ -681,7 +683,9 @@ private static String asString(@Nonnull Document doc) {\n         } catch (SQLException ex) {\n             LOG.debug(\"insert of \" + document.getId() + \" failed\", ex);\n             try {\n-                connection.rollback();\n+                if (connection != null) {\n+                    connection.rollback();\n+                }\n             } catch (SQLException e) {\n                 // TODO\n             }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/1381db46096850ef4a975445dac682ca57c944e6/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "sha": "7e41705dcf52085791e44f0d261e49a757319900",
                "status": "modified"
            }
        ],
        "message": "OAK-1853: Potential NPE in RDBDocumentStore\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1596875 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/175f8a7ccbbc4c94478bc8bd7495d598a315232d",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "RDBDocumentStoreTest.java"
        ]
    },
    "jackrabbit-oak_1d42f6d": {
        "bug_id": "jackrabbit-oak_1d42f6d",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/1d42f6d206286e51fc0396c932d29a9b4726fdc3",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/1d42f6d206286e51fc0396c932d29a9b4726fdc3/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/commit/BackgroundObserver.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/commit/BackgroundObserver.java?ref=1d42f6d206286e51fc0396c932d29a9b4726fdc3",
                "deletions": 2,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/spi/commit/BackgroundObserver.java",
                "patch": "@@ -227,7 +227,7 @@ public int getMaxQueueSize() {\n             public int getLocalEventCount() {\n                 return size(filter(queue, new Predicate<ContentChange>() {\n                     @Override\n-                    public boolean apply(@Nullable ContentChange input) {\n+                    public boolean apply(ContentChange input) {\n                         return input.info != null;\n                     }\n                 }));\n@@ -237,7 +237,7 @@ public boolean apply(@Nullable ContentChange input) {\n             public int getExternalEventCount() {\n                 return size(filter(queue, new Predicate<ContentChange>() {\n                     @Override\n-                    public boolean apply(@Nullable ContentChange input) {\n+                    public boolean apply(ContentChange input) {\n                         return input.info == null;\n                     }\n                 }));",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/1d42f6d206286e51fc0396c932d29a9b4726fdc3/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/commit/BackgroundObserver.java",
                "sha": "3e15297b76359fef8ed21286a414076259dc2465",
                "status": "modified"
            }
        ],
        "message": "OAK-2784 - Potential NPEs in BackgroundObserverMBean\n\nApply patch from Marcel. Remove Nullable annotation to indicate that parameter cannot be null\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1675074 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/65e7265b5f890d946c8438b3c63693cf7e147127",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "BackgroundObserverTest.java"
        ]
    },
    "jackrabbit-oak_1d6dfdf": {
        "bug_id": "jackrabbit-oak_1d6dfdf",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/1d6dfdf596072ebc761081576469bcc943a49804",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/1d6dfdf596072ebc761081576469bcc943a49804/oak-search/src/main/java/org/apache/jackrabbit/oak/plugins/index/search/ExtractedTextCache.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-search/src/main/java/org/apache/jackrabbit/oak/plugins/index/search/ExtractedTextCache.java?ref=1d6dfdf596072ebc761081576469bcc943a49804",
                "deletions": 2,
                "filename": "oak-search/src/main/java/org/apache/jackrabbit/oak/plugins/index/search/ExtractedTextCache.java",
                "patch": "@@ -158,9 +158,12 @@ public void putTimeout(@Nonnull Blob blob, @Nonnull ExtractedText extractedText)\n         if (EXTRACT_FORGET_TIMEOUT) {\n             return;\n         }\n+\n         String id = blob.getContentIdentity();\n-        timeoutMap.put(id, getText(extractedText));\n-        storeTimeoutMap();\n+        if (id != null) {\n+            timeoutMap.put(id, getText(extractedText));\n+            storeTimeoutMap();\n+        }\n     }\n \n     private static String getText(ExtractedText text) {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/1d6dfdf596072ebc761081576469bcc943a49804/oak-search/src/main/java/org/apache/jackrabbit/oak/plugins/index/search/ExtractedTextCache.java",
                "sha": "98a8c0b5b84437796f5429ef5def72e9ddbebcc2",
                "status": "modified"
            }
        ],
        "message": "OAK-7508: Text extraction timeout can lead to NPE\n\nAlso fix in oak-seach module (test to be committed under OAK-7410)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1832377 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/b997936d972e9b26f6ff276262428a9ddc5bd5ad",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "ExtractedTextCacheTest.java"
        ]
    },
    "jackrabbit-oak_20fc4ec": {
        "bug_id": "jackrabbit-oak_20fc4ec",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/20fc4ecc0b0dfbfe8e9876833526025ab1002d62",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/20fc4ecc0b0dfbfe8e9876833526025ab1002d62/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java?ref=20fc4ecc0b0dfbfe8e9876833526025ab1002d62",
                "deletions": 6,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java",
                "patch": "@@ -19,11 +19,6 @@\n import static com.google.common.base.Objects.toStringHelper;\n import static com.google.common.base.Preconditions.checkNotNull;\n import static com.google.common.base.Preconditions.checkState;\n-import static java.util.Collections.emptyList;\n-import static org.apache.jackrabbit.oak.api.Type.BOOLEAN;\n-import static org.apache.jackrabbit.oak.api.Type.NAME;\n-import static org.apache.jackrabbit.oak.api.Type.NAMES;\n-import static org.apache.jackrabbit.oak.api.Type.STRING;\n import static org.apache.jackrabbit.oak.plugins.memory.EmptyNodeState.EMPTY_NODE;\n \n import java.io.IOException;\n@@ -128,8 +123,8 @@ protected MemoryNodeBuilder(MemoryNodeBuilder parent, String name) {\n         this.parent = parent;\n         this.name = name;\n         this.rootBuilder = parent.rootBuilder;\n+        this.base = parent.base().getChildNode(name);\n         this.baseRevision = parent.baseRevision;\n-        this.base = parent.base.getChildNode(name);\n         this.head = new UnconnectedHead();\n     }\n ",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/20fc4ecc0b0dfbfe8e9876833526025ab1002d62/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java",
                "sha": "75d6c457d34ce8034be0a173375cc33238c8c93c",
                "status": "modified"
            }
        ],
        "message": "OAK-1288: NPE when running SmallFileReadTest on mongo\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1551591 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/937bc27af3354e958ba9b93779d2a8db7b826998",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "MemoryNodeBuilderTest.java"
        ]
    },
    "jackrabbit-oak_2dc3516": {
        "bug_id": "jackrabbit-oak_2dc3516",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/2dc351603dfef3d214b562b821dcfec45f22de13",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/2dc351603dfef3d214b562b821dcfec45f22de13/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/LastRevRecoveryAgent.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/LastRevRecoveryAgent.java?ref=2dc351603dfef3d214b562b821dcfec45f22de13",
                "deletions": 3,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/LastRevRecoveryAgent.java",
                "patch": "@@ -78,11 +78,11 @@ public int recover(int clusterId) {\n         final long asyncDelay = nodeStore.getAsyncDelay();\n \n         if (nodeInfo != null) {\n-            long leaseEnd = nodeInfo.getLeaseEndTime();\n-\n             // Check if _lastRev recovery needed for this cluster node\n             // state is Active && recoveryLock not held by someone\n-            if (isRecoveryNeeded(nodeInfo)) {            \n+            if (isRecoveryNeeded(nodeInfo)) {\n+                long leaseEnd = nodeInfo.getLeaseEndTime();\n+\n                 // retrieve the root document's _lastRev\n                 NodeDocument root = missingLastRevUtil.getRoot();\n                 Revision lastRev = root.getLastRev().get(clusterId);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/2dc351603dfef3d214b562b821dcfec45f22de13/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/LastRevRecoveryAgent.java",
                "sha": "810fbede3177deefb3c935c8cb47bdaf35086557",
                "status": "modified"
            }
        ],
        "message": "OAK-1953: Oak console on MongoMK fails with NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1608463 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/4af966397dcbf4a0c54a28ddd1034cb556bc315d",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "LastRevRecoveryAgentTest.java"
        ]
    },
    "jackrabbit-oak_313c667": {
        "bug_id": "jackrabbit-oak_313c667",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/313c667f08a84644d67df6f995aa5d03129ba1d9",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/313c667f08a84644d67df6f995aa5d03129ba1d9/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java?ref=313c667f08a84644d67df6f995aa5d03129ba1d9",
                "deletions": 5,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java",
                "patch": "@@ -196,22 +196,24 @@ public TreePermission getTreePermission(@Nonnull ImmutableTree tree, @Nonnull Tr\n                 } else {\n                     TreeLocation tl = getLocation(tree, null);\n                     if (tl == null) {\n+                        log.warn(\"Cannot retrieve versionable node for \" + tree.getPath());\n                         return TreePermission.EMPTY;\n                     } else {\n                         // TODO: may return wrong results in case of restrictions\n                         // TODO that would match the path of the versionable node\n                         // TODO (or item in the subtree) but that item no longer exists\n                         // TODO -> evaluation by path would be more accurate (-> see #isGranted)\n-                        while (!tl.exists()) {\n+                        while (!tl.exists() || tl.getProperty() != null) {\n                             tl = tl.getParent();\n                         }\n                         Tree versionableTree = tl.getTree();\n                         if (versionableTree == null) {\n-                            // for PropertyLocations\n-                            versionableTree = tl.getParent().getTree();\n+                            log.warn(\"Cannot retrieve versionable tree for {0}; versionable location {1} does not resolve to an existing tree.\", tree.getPath(), tl.getPath());\n+                            return TreePermission.EMPTY;\n+                        } else {\n+                            TreePermission pp = getParentPermission(versionableTree, TreeTypeProvider.TYPE_VERSION);\n+                            return new TreePermissionImpl(versionableTree, TreeTypeProvider.TYPE_VERSION, pp);\n                         }\n-                        TreePermission pp = getParentPermission(versionableTree, TreeTypeProvider.TYPE_VERSION);\n-                        return new TreePermissionImpl(versionableTree, TreeTypeProvider.TYPE_VERSION, pp);\n                     }\n                 }\n             case TreeTypeProvider.TYPE_PERMISSION_STORE:",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/313c667f08a84644d67df6f995aa5d03129ba1d9/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java",
                "sha": "c633c4a659aa18491727173ede552b6e32b7733e",
                "status": "modified"
            }
        ],
        "message": "OAK-1135 : NPE in CompiledPermissionImpl.getTreePermission() \n\n- slight modification, add log output if versionable node/path cannot be resolved\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1537474 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/b977c6f989d4d922faa00e3a767d475f8a4ca1ec",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "CompiledPermissionImplTest.java"
        ]
    },
    "jackrabbit-oak_4779cb2": {
        "bug_id": "jackrabbit-oak_4779cb2",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/4779cb2531e02230636c81630b93e07dc60ea38c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/4779cb2531e02230636c81630b93e07dc60ea38c/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java?ref=4779cb2531e02230636c81630b93e07dc60ea38c",
                "deletions": 1,
                "filename": "oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java",
                "patch": "@@ -478,7 +478,7 @@ public long determineServerTimeDifferenceMillis(Connection connection) {\n                 byte[] bdata = rs.getBytes(field++);\n                 result.add(new RDBRow(id, hasBinary, deletedOnce, modified, modcount, cmodcount, schemaVersion, sdType,\n                         sdMaxRevTime, data, bdata));\n-                dataTotal += data.length();\n+                dataTotal += data == null ? 0 : data.length();\n                 bdataTotal += bdata == null ? 0 : bdata.length;\n                 PERFLOG.end(pstart, 10, \"queried: table={} -> id={}, modcount={}, modified={}, data={}, bdata={}\", tmd.getName(), id,\n                         modcount, modified, (data == null ? 0 : data.length()), (bdata == null ? 0 : bdata.length));",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/4779cb2531e02230636c81630b93e07dc60ea38c/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java",
                "sha": "7fa2be4f34aab525e515e1ec51f183401fd5e83f",
                "status": "modified"
            }
        ],
        "message": "OAK-8338: RDBDocumentStoreJDBC: fix theoretically possible NPE in perflogging code\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1859716 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/2b2f3043e08b92d00f6abcfcad97437a1b76c3d6",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "RDBDocumentStoreJDBCTest.java"
        ]
    },
    "jackrabbit-oak_4b7906b": {
        "bug_id": "jackrabbit-oak_4b7906b",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/4b7906bedbf9924b911a0b6a497d43d4f9e9bddb",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/4b7906bedbf9924b911a0b6a497d43d4f9e9bddb/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/util/TimingDocumentStoreWrapper.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/util/TimingDocumentStoreWrapper.java?ref=4b7906bedbf9924b911a0b6a497d43d4f9e9bddb",
                "deletions": 5,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/util/TimingDocumentStoreWrapper.java",
                "patch": "@@ -24,6 +24,7 @@\n \n import javax.annotation.CheckForNull;\n import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n \n import org.apache.jackrabbit.mk.api.MicroKernelException;\n import org.apache.jackrabbit.oak.plugins.mongomk.Collection;\n@@ -80,7 +81,7 @@ public TimingDocumentStoreWrapper(DocumentStore base) {\n         try {\n             long start = now();\n             T result = base.find(collection, key);\n-            updateAndLogTimes(\"find\", start, 0, result.getMemory());\n+            updateAndLogTimes(\"find\", start, 0, size(result));\n             return result;\n         } catch (Exception e) {\n             throw convert(e);\n@@ -93,7 +94,7 @@ public TimingDocumentStoreWrapper(DocumentStore base) {\n         try {\n             long start = now();\n             T result = base.find(collection, key, maxCacheAge);\n-            updateAndLogTimes(\"find2\", start, 0, result.getMemory());\n+            updateAndLogTimes(\"find2\", start, 0, size(result));\n             return result;\n         } catch (Exception e) {\n             throw convert(e);\n@@ -158,13 +159,13 @@ public TimingDocumentStoreWrapper(DocumentStore base) {\n     }\n \n     @Override\n-    @Nonnull\n+    @CheckForNull\n     public <T extends Document> T createOrUpdate(Collection<T> collection, UpdateOp update)\n             throws MicroKernelException {\n         try {\n             long start = now();\n             T result = base.createOrUpdate(collection, update);\n-            updateAndLogTimes(\"createOrUpdate\", start, 0, result.getMemory());\n+            updateAndLogTimes(\"createOrUpdate\", start, 0, size(result));\n             return result;\n         } catch (Exception e) {\n             throw convert(e);\n@@ -178,7 +179,7 @@ public TimingDocumentStoreWrapper(DocumentStore base) {\n         try {\n             long start = now();\n             T result = base.findAndUpdate(collection, update);\n-            updateAndLogTimes(\"findAndUpdate\", start, 0, result.getMemory());\n+            updateAndLogTimes(\"findAndUpdate\", start, 0, size(result));\n             return result;\n         } catch (Exception e) {\n             throw convert(e);\n@@ -250,6 +251,14 @@ private void log(String message) {\n         }\n         return result;\n     }\n+\n+    private static int size(@Nullable Document document) {\n+        if (document == null) {\n+            return 0;\n+        } else {\n+            return document.getMemory();\n+        }\n+    }\n     \n     private static long now() {\n         return System.currentTimeMillis();",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/4b7906bedbf9924b911a0b6a497d43d4f9e9bddb/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/util/TimingDocumentStoreWrapper.java",
                "sha": "707484172571ca527c91254a7a803395c7af0234",
                "status": "modified"
            }
        ],
        "message": "OAK-1047: TimingDocumentStoreWrapper throws NPE when result is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1526511 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/f9aa361cc989ca7a289f6a8dfb36e3b455257e0f",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "TimingDocumentStoreWrapperTest.java"
        ]
    },
    "jackrabbit-oak_53bf04a": {
        "bug_id": "jackrabbit-oak_53bf04a",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/53bf04acfe787b9c25885cdf43df9a243d78ffda",
        "file": [
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/53bf04acfe787b9c25885cdf43df9a243d78ffda/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/property/strategy/ContentMirrorStoreStrategy.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/property/strategy/ContentMirrorStoreStrategy.java?ref=53bf04acfe787b9c25885cdf43df9a243d78ffda",
                "deletions": 18,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/property/strategy/ContentMirrorStoreStrategy.java",
                "patch": "@@ -200,6 +200,9 @@ void enqueue(Iterator<? extends ChildNodeEntry> it) {\n         }\n         \n         void setPathContainsValue(boolean pathContainsValue) {\n+            if (init) {\n+                throw new IllegalStateException(\"This iterator is already initialized\");\n+            }\n             this.pathContainsValue = pathContainsValue;\n         }\n \n@@ -211,8 +214,28 @@ public boolean hasNext() {\n             }\n             return !closed;\n         }\n-        \n+\n         private void fetchNext() {\n+            while (true) {\n+                fetchNextPossiblyDuplicate();\n+                if (closed) {\n+                    return;\n+                }\n+                if (pathContainsValue) {\n+                    String value = PathUtils.elements(currentPath).iterator().next();\n+                    currentPath = PathUtils.relativize(value, currentPath);\n+                    // don't return duplicate paths:\n+                    // Set.add returns true if the entry was new,\n+                    // so if it returns false, it was already known\n+                    if (!knownPaths.add(currentPath)) {\n+                        continue;\n+                    }\n+                }\n+                break;\n+            }\n+        }\n+        \n+        private void fetchNextPossiblyDuplicate() {\n             while (!nodeIterators.isEmpty()) {\n                 Iterator<? extends ChildNodeEntry> iterator = nodeIterators.getLast();\n                 if (iterator.hasNext()) {\n@@ -247,7 +270,6 @@ private void fetchNext() {\n             closed = true;\n         }\n \n-\n         @Override\n         public String next() {\n             if (closed) {\n@@ -257,23 +279,11 @@ public String next() {\n                 fetchNext();\n                 init = true;\n             }\n-            while (true) {\n-                String result = currentPath;\n-                fetchNext();\n-                if (pathContainsValue) {\n-                    String value = PathUtils.elements(result).iterator().next();\n-                    result = PathUtils.relativize(value, result);\n-                    // don't return duplicate paths:\n-                    // Set.add returns true if the entry was new,\n-                    // so if it returns false, it was already known\n-                    if (!knownPaths.add(result)) {\n-                        continue;\n-                    }\n-                }\n-                return result;\n-            }\n+            String result = currentPath;\n+            fetchNext();\n+            return result;\n         }\n-\n+        \n         @Override\n         public void remove() {\n             throw new UnsupportedOperationException();",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/53bf04acfe787b9c25885cdf43df9a243d78ffda/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/property/strategy/ContentMirrorStoreStrategy.java",
                "sha": "f096a63930d7bc130008253918e9f81f1af2216d",
                "status": "modified"
            }
        ],
        "message": "OAK-883 Possible NPE in ContentMirrorStoreStrategy.PathIterator\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1497366 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/f93ea42ccd1630b1cf605906b2a4121176a64580",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "ContentMirrorStoreStrategyTest.java"
        ]
    },
    "jackrabbit-oak_5c71283": {
        "bug_id": "jackrabbit-oak_5c71283",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/5c712835c0e09f06ba2b19b38e574d5ee99c59eb",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/5c712835c0e09f06ba2b19b38e574d5ee99c59eb/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeStoreService.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeStoreService.java?ref=5c712835c0e09f06ba2b19b38e574d5ee99c59eb",
                "deletions": 5,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeStoreService.java",
                "patch": "@@ -439,12 +439,17 @@ private static String lookup(ComponentContext context, String property) {\n     public synchronized void deactivate() {\n         unregisterNodeStore();\n \n-        observerTracker.stop();\n-        gcMonitor.stop();\n+        if (observerTracker != null) {\n+            observerTracker.stop();\n+        }\n+        if (gcMonitor != null) {\n+            gcMonitor.stop();\n+        }\n         delegate = null;\n-\n-        store.close();\n-        store = null;\n+        if (store != null) {\n+            store.close();\n+            store = null;\n+        }\n     }\n \n     protected void bindBlobStore(BlobStore blobStore) throws IOException {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/5c712835c0e09f06ba2b19b38e574d5ee99c59eb/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeStoreService.java",
                "sha": "0925ce9a4d9e19b47c23f33b1a8f2fad6fe54af0",
                "status": "modified"
            }
        ],
        "message": "OAK-2811 Oak + data store: NPE in SegmentNodeStoreService.deactivate() leads to data store not shutting down properly\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1676237 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/d590db7196e812c9e0a9a411bb1db0b44c39f5a6",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "SegmentNodeStoreServiceTest.java"
        ]
    },
    "jackrabbit-oak_5cc0e30": {
        "bug_id": "jackrabbit-oak_5cc0e30",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/5cc0e30fad5b798514e98dce1727672aa74dacb0",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/5cc0e30fad5b798514e98dce1727672aa74dacb0/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentSerializer.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentSerializer.java?ref=5cc0e30fad5b798514e98dce1727672aa74dacb0",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentSerializer.java",
                "patch": "@@ -16,6 +16,7 @@\n  */\n package org.apache.jackrabbit.oak.plugins.document.rdb;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n import static org.apache.jackrabbit.oak.plugins.document.rdb.RDBJSONSupport.appendJsonMember;\n import static org.apache.jackrabbit.oak.plugins.document.rdb.RDBJSONSupport.appendJsonString;\n import static org.apache.jackrabbit.oak.plugins.document.rdb.RDBJSONSupport.appendJsonValue;\n@@ -144,6 +145,10 @@ public String asString(UpdateOp update) {\n      */\n     @Nonnull\n     public <T extends Document> T fromRow(@Nonnull Collection<T> collection, @Nonnull RDBRow row) throws DocumentStoreException {\n+\n+        final String charData = row.getData();\n+        checkNotNull(charData, \"RDBRow.getData() is null for collection \" + collection + \", id: \" + row.getId());\n+\n         T doc = collection.newDocument(store);\n         doc.put(ID, row.getId());\n         if (row.getModified() != RDBRow.LONG_UNSET) {\n@@ -181,7 +186,6 @@ public String asString(UpdateOp update) {\n             throw new DocumentStoreException(ex);\n         }\n \n-        String charData = row.getData();\n         json = new JsopTokenizer(charData);\n \n         // start processing the VARCHAR data",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/5cc0e30fad5b798514e98dce1727672aa74dacb0/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentSerializer.java",
                "sha": "c5b584e573ed67a25a57a4d814796468caf8216e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/5cc0e30fad5b798514e98dce1727672aa74dacb0/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java?ref=5cc0e30fad5b798514e98dce1727672aa74dacb0",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java",
                "patch": "@@ -631,7 +631,7 @@ public long determineServerTimeDifferenceMillis(Connection connection) {\n     @CheckForNull\n     public RDBRow read(Connection connection, RDBTableMetaData tmd, String id, long lastmodcount, long lastmodified) throws SQLException {\n \n-        boolean useCaseStatement = lastmodcount != -1 && this.dbInfo.allowsCaseInSelect();\n+        boolean useCaseStatement = lastmodcount != -1 && lastmodified >= 1 && this.dbInfo.allowsCaseInSelect();\n         StringBuffer sql = new StringBuffer();\n         sql.append(\"select MODIFIED, MODCOUNT, CMODCOUNT, HASBINARY, DELETEDONCE, \");\n         if (useCaseStatement) {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/5cc0e30fad5b798514e98dce1727672aa74dacb0/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStoreJDBC.java",
                "sha": "51e1342fc765c5e577e4b276280d48577a635396",
                "status": "modified"
            }
        ],
        "message": "OAK-4986: RDBDocumentStore: potential NPE in document read\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1766554 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/00ab785367a8b9c191165811cb1371d8491a4bd0",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "RDBDocumentStoreJDBCTest.java"
        ]
    },
    "jackrabbit-oak_5f36b76": {
        "bug_id": "jackrabbit-oak_5f36b76",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/5f36b76a6174d3163fdc4b23e667a2cb68896923",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/5f36b76a6174d3163fdc4b23e667a2cb68896923/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/observation/filter/ChangeSetFilterImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/observation/filter/ChangeSetFilterImpl.java?ref=5f36b76a6174d3163fdc4b23e667a2cb68896923",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/observation/filter/ChangeSetFilterImpl.java",
                "patch": "@@ -87,7 +87,8 @@ private Pattern asPattern(String patternWithGlobs) {\n \n     @Override\n     public boolean excludes(ChangeSet changeSet) {\n-        final Set<String> parentPaths = new HashSet<String>(changeSet.getParentPaths());\n+        final Set<String> cpp = changeSet.getParentPaths();\n+        final Set<String> parentPaths = cpp != null ? new HashSet<String>(cpp) : new HashSet<String>();\n \n         // first go through excludes to remove those that are explicitly\n         // excluded",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/5f36b76a6174d3163fdc4b23e667a2cb68896923/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/observation/filter/ChangeSetFilterImpl.java",
                "sha": "d93b6e9d4d5492b80ae0d241cedcfb99dfbb81a0",
                "status": "modified"
            }
        ],
        "message": "OAK-5107 : avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1769682 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/404602df60b3c38b0d0ff1ccdeb5830c7865b76d",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "ChangeSetFilterImplTest.java"
        ]
    },
    "jackrabbit-oak_6440348": {
        "bug_id": "jackrabbit-oak_6440348",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/6440348b3a9bbe94098b59c541b80f1b7f05d216",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/6440348b3a9bbe94098b59c541b80f1b7f05d216/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/CommitBuilder.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/CommitBuilder.java?ref=6440348b3a9bbe94098b59c541b80f1b7f05d216",
                "deletions": 0,
                "filename": "oak-mk/src/main/java/org/apache/jackrabbit/mk/model/CommitBuilder.java",
                "patch": "@@ -141,6 +141,13 @@ public void copyNode(String srcPath, String destPath) throws NotFoundException,\n         MutableNode destParent = getOrCreateStagedNode(destParentPath);\n         destParent.add(new ChildNode(destNodeName, srcCNE.getId()));\n \n+        if (srcCNE.getId() == null) {\n+            // a 'new' node is being copied\n+\n+            // update staging area\n+            copyStagedNodes(srcPath, destPath);\n+        }\n+\n         // update change log\n         changeLog.add(new CopyNode(srcPath, destPath));\n     }\n@@ -269,6 +276,17 @@ void moveStagedNodes(String srcPath, String destPath) throws Exception {\n         }\n     }\n \n+    void copyStagedNodes(String srcPath, String destPath) throws Exception {\n+        MutableNode node = staged.get(srcPath);\n+        if (node != null) {\n+            staged.put(destPath, new MutableNode(node, store, destPath));\n+            for (Iterator<String> it = node.getChildNodeNames(0, -1); it.hasNext(); ) {\n+                String childName = it.next();\n+                copyStagedNodes(PathUtils.concat(srcPath, childName), PathUtils.concat(destPath, childName));\n+            }\n+        }\n+    }\n+\n     void removeStagedNodes(String nodePath) throws Exception {\n         MutableNode node = staged.get(nodePath);\n         if (node != null) {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/6440348b3a9bbe94098b59c541b80f1b7f05d216/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/CommitBuilder.java",
                "sha": "645851b8adff1e71bccb8531891a0e63ea77808d",
                "status": "modified"
            }
        ],
        "message": "OAK-47: NPE with nested add&copy operation\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1310044 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/cf381a66ab5d9fab1711881455496efac528fb9d",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "CommitBuilderTest.java"
        ]
    },
    "jackrabbit-oak_64ccc4f": {
        "bug_id": "jackrabbit-oak_64ccc4f",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/64ccc4fd29c03d6597fbe4170dc20f306dbfeb1f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/64ccc4fd29c03d6597fbe4170dc20f306dbfeb1f/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/Commit.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/Commit.java?ref=64ccc4fd29c03d6597fbe4170dc20f306dbfeb1f",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/Commit.java",
                "patch": "@@ -326,7 +326,7 @@ void concurrentModification(Revision other) {\n             }\n             if (conflictMessage != null) {\n                 conflictMessage += \", before\\n\" + revision + \n-                        \"; document:\\n\" + doc.format() +\n+                        \"; document:\\n\" + (doc == null ? \"\" : doc.format()) +\n                         \",\\nrevision order:\\n\" + mk.getRevisionComparator();\n                 throw new MicroKernelException(conflictMessage);\n             }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/64ccc4fd29c03d6597fbe4170dc20f306dbfeb1f/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/Commit.java",
                "sha": "b684e89d74c0843dcb401933220f6c7d802f9a16",
                "status": "modified"
            }
        ],
        "message": "OAK-926 MongoMK: split documents (avoid NPE when constructing the error message)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1531843 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/2dad579272d6461c5fb1f86ad2375e1f2cdbb790",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "CommitTest.java"
        ]
    },
    "jackrabbit-oak_69aa46f": {
        "bug_id": "jackrabbit-oak_69aa46f",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/69aa46fbe70842a15e6325ba61ba0c36c66ff67a",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/69aa46fbe70842a15e6325ba61ba0c36c66ff67a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java?ref=69aa46fbe70842a15e6325ba61ba0c36c66ff67a",
                "deletions": 0,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java",
                "patch": "@@ -206,6 +206,10 @@ public TreePermission getTreePermission(@Nonnull ImmutableTree tree, @Nonnull Tr\n                             tl = tl.getParent();\n                         }\n                         Tree versionableTree = tl.getTree();\n+                        if (versionableTree == null) {\n+                            // for PropertyLocations\n+                            versionableTree = tl.getParent().getTree();\n+                        }\n                         TreePermission pp = getParentPermission(versionableTree, TreeTypeProvider.TYPE_VERSION);\n                         return new TreePermissionImpl(versionableTree, TreeTypeProvider.TYPE_VERSION, pp);\n                     }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/69aa46fbe70842a15e6325ba61ba0c36c66ff67a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java",
                "sha": "145a1628e2d6385dbbb93e3ec29bb799759c24db",
                "status": "modified"
            }
        ],
        "message": "OAK-1135 NPE in CompiledPermissionImpl.getTreePermission()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1537376 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/2c4f23a0d8a5deb83c647cce7c6fb1f70d59da78",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "CompiledPermissionImplTest.java"
        ]
    },
    "jackrabbit-oak_72223c2": {
        "bug_id": "jackrabbit-oak_72223c2",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/72223c27b998e7a579cc41986f3315e3f493f521",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/72223c27b998e7a579cc41986f3315e3f493f521/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/backup/FileStoreBackup.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/backup/FileStoreBackup.java?ref=72223c27b998e7a579cc41986f3315e3f493f521",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/backup/FileStoreBackup.java",
                "patch": "@@ -87,6 +87,6 @@ public static void backup(NodeStore store, File destination)\n             backup.close();\n         }\n \n-        log.debug(\"Backup done in {} ms.\", System.currentTimeMillis() - s);\n+        log.debug(\"Backup finished in {} ms.\", System.currentTimeMillis() - s);\n     }\n }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/72223c27b998e7a579cc41986f3315e3f493f521/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/backup/FileStoreBackup.java",
                "sha": "935734ff0c3fafd3047f76882a5e60860fa3854d",
                "status": "modified"
            }
        ],
        "message": "OAK-1464 FileStoreBackup NPE in retrieving old state\n - re-wording debug logs\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1571251 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/d4ef60c19484d4295593a6e03b9c08975295160f",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "FileStoreBackupTest.java"
        ]
    },
    "jackrabbit-oak_777f624": {
        "bug_id": "jackrabbit-oak_777f624",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/777f624de75943f8de0e9c3f8690715f9e407aef",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/777f624de75943f8de0e9c3f8690715f9e407aef/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/SessionStats.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/SessionStats.java?ref=777f624de75943f8de0e9c3f8690715f9e407aef",
                "deletions": 1,
                "filename": "oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/SessionStats.java",
                "patch": "@@ -222,7 +222,7 @@ public double getSaveRate() {\n         String[] atts = new String[attributes.size()];\n         int k = 0;\n         for (Entry<String, Object> attribute : attributes.entrySet()) {\n-            atts[k] = attribute.getKey() + '=' + attribute.getValue();\n+            atts[k++] = attribute.getKey() + '=' + attribute.getValue();\n         }\n         return atts;\n     }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/777f624de75943f8de0e9c3f8690715f9e407aef/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/SessionStats.java",
                "sha": "550b3141c33f72068532d66480ee4386c4b04a5b",
                "status": "modified"
            }
        ],
        "message": "OAK-2027 - SessionMBean fails to render due to NPE in getSessionAttributes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1617451 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/57682ce3b88d3de666514cba807393e45de578b1",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "SessionStatsTest.java"
        ]
    },
    "jackrabbit-oak_8489fc4": {
        "bug_id": "jackrabbit-oak_8489fc4",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/8489fc4bd3591a7664b39627e689d162313a1c40",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/8489fc4bd3591a7664b39627e689d162313a1c40/oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/configuration/nodestate/NodeStateSolrServersObserver.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/configuration/nodestate/NodeStateSolrServersObserver.java?ref=8489fc4bd3591a7664b39627e689d162313a1c40",
                "deletions": 1,
                "filename": "oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/configuration/nodestate/NodeStateSolrServersObserver.java",
                "patch": "@@ -117,7 +117,6 @@ public boolean childNodeDeleted(String name, NodeState before) {\n         }\n \n         private boolean isSolrServerNode(String name, NodeState nodeState) {\n-            log.info(\"checking {} in {}\", name, nodeState);\n             return \"server\".equals(name) && nodeState.hasProperty(\"solrServerType\");\n         }\n ",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/8489fc4bd3591a7664b39627e689d162313a1c40/oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/configuration/nodestate/NodeStateSolrServersObserver.java",
                "sha": "8b8a0ee6884fd3cc8caa72d3f3d8a9314c49400a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/8489fc4bd3591a7664b39627e689d162313a1c40/oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/query/FilterQueryParser.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/query/FilterQueryParser.java?ref=8489fc4bd3591a7664b39627e689d162313a1c40",
                "deletions": 2,
                "filename": "oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/query/FilterQueryParser.java",
                "patch": "@@ -65,8 +65,8 @@ static SolrQuery getQuery(Filter filter, QueryIndex.IndexPlan plan, OakSolrConfi\n             }\n         }\n \n-        List<QueryIndex.OrderEntry> sortOrder = plan.getSortOrder();\n-        if (sortOrder != null) {\n+        if (plan != null && plan.getSortOrder() != null) {\n+            List<QueryIndex.OrderEntry> sortOrder = plan.getSortOrder();\n             for (QueryIndex.OrderEntry orderEntry : sortOrder) {\n                 SolrQuery.ORDER order;\n                 if (QueryIndex.OrderEntry.Order.ASCENDING.equals(orderEntry.getOrder())) {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/8489fc4bd3591a7664b39627e689d162313a1c40/oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/query/FilterQueryParser.java",
                "sha": "625bb86a8a6737c0060f5fdbef8d4600e29a2c55",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/8489fc4bd3591a7664b39627e689d162313a1c40/oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/query/SolrQueryIndex.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/query/SolrQueryIndex.java?ref=8489fc4bd3591a7664b39627e689d162313a1c40",
                "deletions": 8,
                "filename": "oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/query/SolrQueryIndex.java",
                "patch": "@@ -152,7 +152,7 @@ int getMatchingFilterRestrictions(Filter filter, OakSolrConfiguration configurat\n                 match++;\n             }\n         }\n-\n+        log.debug(\"{}\u00a0matched restrictions for filter {} and configuration {}\", match, filter, configuration);\n \n         return match;\n     }\n@@ -587,12 +587,14 @@ private OakSolrConfiguration getConfiguration(String path, NodeState rootState)\n     private IndexPlan getIndexPlan(Filter filter, OakSolrConfiguration configuration, LMSEstimator estimator,\n                                    List<OrderEntry> sortOrder, String path) {\n         if (getMatchingFilterRestrictions(filter, configuration) > 0) {\n-            return planBuilder(filter)\n-                    .setEstimatedEntryCount(estimator.estimate(filter))\n-                    .setSortOrder(sortOrder)\n-                    .setPlanName(path)\n-                    .setPathPrefix(getPathPrefix(path))\n-                    .build();\n+            IndexPlan indexPlan = planBuilder(filter)\n+                .setEstimatedEntryCount(estimator.estimate(filter))\n+                .setSortOrder(sortOrder)\n+                .setPlanName(path)\n+                .setPathPrefix(getPathPrefix(path))\n+                .build();\n+            log.debug(\"index plan {}\", indexPlan);\n+            return indexPlan;\n         } else {\n             return null;\n         }\n@@ -792,7 +794,7 @@ public long getSize(SizePrecision precision, long max) {\n             switch (precision) {\n                 case EXACT:\n                     // query solr\n-                    SolrQuery countQuery = FilterQueryParser.getQuery(plan.getFilter(), null, this.configuration);\n+                    SolrQuery countQuery = FilterQueryParser.getQuery(plan.getFilter(), plan, this.configuration);\n                     countQuery.setRows(0);\n                     try {\n                         estimate = this.solrServer.query(countQuery).getResults().getNumFound();",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/8489fc4bd3591a7664b39627e689d162313a1c40/oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/query/SolrQueryIndex.java",
                "sha": "99c0d4a54d58f28b169df55e9c25e1626c3d5a93",
                "status": "modified"
            }
        ],
        "message": "OAK-7513 - avoid NPE in exact size calculation, adjusted some log statements\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1832379 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/99bcde9a7a9192ac8ff93473bf8d0c1086627045",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "SolrQueryIndexTest.java"
        ]
    },
    "jackrabbit-oak_8580c23": {
        "bug_id": "jackrabbit-oak_8580c23",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/8580c2389d46c7fbc13ee78fd5053a958f8ec6f7",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/8580c2389d46c7fbc13ee78fd5053a958f8ec6f7/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/TrackingCorruptIndexHandler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/TrackingCorruptIndexHandler.java?ref=8580c2389d46c7fbc13ee78fd5053a958f8ec6f7",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/TrackingCorruptIndexHandler.java",
                "patch": "@@ -88,7 +88,7 @@ public void markWorkingIndexes(Set<String> updatedIndexPaths) {\n             CorruptIndexInfo info = indexes.remove(indexPath);\n             if (info != null){\n                 log.info(\"Index at [{}] which was so far failing {} is now working again.\", info.path, info.getStats());\n-            } else {\n+            } else if (meter != null) {\n                 meter.mark();\n             }\n         }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/8580c2389d46c7fbc13ee78fd5053a958f8ec6f7/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/TrackingCorruptIndexHandler.java",
                "sha": "422e4cacdfac974f38b337eabf915b2717896fdf",
                "status": "modified"
            }
        ],
        "message": "OAK-7839 - minor fix to prevent NPEs in case MeterStat is not registered\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1844321 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/eb55ba5aaf9a7d432d37e982566ab7c6910aa870",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "TrackingCorruptIndexHandlerTest.java"
        ]
    },
    "jackrabbit-oak_ad39877": {
        "bug_id": "jackrabbit-oak_ad39877",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/ad39877cbf8a55a93636f8c356ab29201290921c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/ad39877cbf8a55a93636f8c356ab29201290921c/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java?ref=ad39877cbf8a55a93636f8c356ab29201290921c",
                "deletions": 2,
                "filename": "oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "patch": "@@ -1949,7 +1949,7 @@ public void close() throws IOException {\n         } catch (SQLException ex) {\n             this.ch.rollbackConnection(connection);\n             String addDiags = \"\";\n-            if (RDBJDBCTools.matchesSQLState(ex, \"22\", \"72\")) {\n+            if (data != null && RDBJDBCTools.matchesSQLState(ex, \"22\", \"72\")) {\n                 byte[] bytes = asBytes(data);\n                 addDiags = String.format(\" (DATA size in Java characters: %d, in octets: %d, computed character limit: %d)\",\n                         data.length(), bytes.length, tmd.getDataLimitInOctets() / CHAR2OCTETRATIO);\n@@ -2058,7 +2058,7 @@ private static long getModifiedFromOperation(Operation op) {\n     private static final boolean BATCHUPDATES = Boolean.parseBoolean(System\n             .getProperty(\"org.apache.jackrabbit.oak.plugins.document.rdb.RDBDocumentStore.BATCHUPDATES\", \"true\"));\n \n-    public static byte[] asBytes(String data) {\n+    public static byte[] asBytes(@Nonnull String data) {\n         byte[] bytes;\n         try {\n             bytes = data.getBytes(\"UTF-8\");",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/ad39877cbf8a55a93636f8c356ab29201290921c/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "sha": "96d04b76d42b872e3b0017740d26d83786f2cfbf",
                "status": "modified"
            }
        ],
        "message": "OAK-7289: RDBDocumentStore: potential NPE in error handling code\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1825442 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/8a90e73d23ab1b4fe07fca92d64c395e95921969",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "RDBDocumentStoreTest.java"
        ]
    },
    "jackrabbit-oak_c2211a7": {
        "bug_id": "jackrabbit-oak_c2211a7",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/c2211a799a0e62a21aa26b4886c8a06d053f1287",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/c2211a799a0e62a21aa26b4886c8a06d053f1287/oak-core/src/main/java/org/apache/jackrabbit/oak/osgi/OsgiWhiteboard.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/osgi/OsgiWhiteboard.java?ref=c2211a799a0e62a21aa26b4886c8a06d053f1287",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/osgi/OsgiWhiteboard.java",
                "patch": "@@ -20,6 +20,7 @@\n import static com.google.common.base.Preconditions.checkNotNull;\n import static java.util.Arrays.asList;\n \n+import java.util.Collections;\n import java.util.Dictionary;\n import java.util.Hashtable;\n import java.util.List;\n@@ -77,7 +78,8 @@ public void unregister() {\n         return new Tracker<T>() {\n             @Override @SuppressWarnings(\"unchecked\")\n             public List<T> getServices() {\n-                return (List<T>) asList(tracker.getServices());\n+                Object[] services = tracker.getServices();\n+                return (List<T>) (services != null ? asList(services) : Collections.emptyList());\n             }\n             @Override\n             public void stop() {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/c2211a799a0e62a21aa26b4886c8a06d053f1287/oak-core/src/main/java/org/apache/jackrabbit/oak/osgi/OsgiWhiteboard.java",
                "sha": "5f80ec103dcae406b034de4fb0c1a6be9f1588a7",
                "status": "modified"
            }
        ],
        "message": "OAK-1581: NPE in OsgiWhiteboard#track()\nNull guard\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1579605 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/1eb69d5b8c24acdfe9f2b0e4c4ff225ee50c58a7",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "OsgiWhiteboardTest.java"
        ]
    },
    "jackrabbit-oak_cb0764b": {
        "bug_id": "jackrabbit-oak_cb0764b",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/cb0764b6998be1059cdf4dce49a475d9b9dc6b01",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/cb0764b6998be1059cdf4dce49a475d9b9dc6b01/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositionContext.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositionContext.java?ref=cb0764b6998be1059cdf4dce49a475d9b9dc6b01",
                "deletions": 2,
                "filename": "oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositionContext.java",
                "patch": "@@ -174,10 +174,26 @@ public boolean apply(String childName) {\n     }\n \n     CompositeNodeState createRootNodeState(Map<MountedNodeStore, NodeState> rootStates) {\n-        for (NodeState s : rootStates.values()) {\n-            if (s instanceof CompositeNodeState) {\n+        for (Map.Entry<MountedNodeStore, NodeState> e : rootStates.entrySet()) {\n+            MountedNodeStore mns = e.getKey();\n+            NodeState nodeState = e.getValue();\n+            if (nodeState instanceof CompositeNodeState) {\n                 throw new IllegalArgumentException(\"Nesting composite node states is not supported\");\n             }\n+            if (nodeState == null) {\n+                throw new NullPointerException(\"Passed null as a nodestate for \" + mns.getMount().getName());\n+            }\n+        }\n+        for (MountedNodeStore mns : nonDefaultStores) {\n+            if (!rootStates.containsKey(mns)) {\n+                throw new IllegalArgumentException(\"Can't find node state for \" + mns.getMount().getName());\n+            }\n+        }\n+        if (!rootStates.containsKey(globalStore)) {\n+            throw new IllegalArgumentException(\"Can't find node state for the global store\");\n+        }\n+        if (rootStates.size() != nonDefaultStores.size() + 1) {\n+            throw new IllegalArgumentException(\"Too many root states passed: \" + rootStates.size());\n         }\n         return new CompositeNodeState(\"/\", rootStates, this);\n     }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/cb0764b6998be1059cdf4dce49a475d9b9dc6b01/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositionContext.java",
                "sha": "06c195c3105e86df903e92d2f757f5f6a5121600",
                "status": "modified"
            }
        ],
        "message": "OAK-6486: NPE in CompositeNodeStore\n\nCheck arguments carefully in the createRootNodeState() method.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1802871 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/66c11ac457ac9b00d6f2a7eb16417ae7dee5018c",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "CompositionContextTest.java"
        ]
    },
    "jackrabbit-oak_d074fc8": {
        "bug_id": "jackrabbit-oak_d074fc8",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/d074fc8e1a74dfa4c163dad625f224cd73bc92fb",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/d074fc8e1a74dfa4c163dad625f224cd73bc92fb/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/mongo/MongoDocumentStore.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/mongo/MongoDocumentStore.java?ref=d074fc8e1a74dfa4c163dad625f224cd73bc92fb",
                "deletions": 0,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/mongo/MongoDocumentStore.java",
                "patch": "@@ -1565,6 +1565,14 @@ public long determineServerTimeDifferenceMillis() {\n         // assumption here: server returns UTC - ie the returned\n         // date object is correctly taking care of time zones.\n         final Date serverLocalTime = db.command(\"serverStatus\").getDate(\"localTime\");\n+        if (serverLocalTime == null) {\n+        \t// OAK-4107 : looks like this can happen - at least\n+        \t// has been seen once on mongo 3.0.9\n+        \t// let's handle this gently and issue a log.warn\n+        \t// instead of throwing a NPE\n+        \tLOG.warn(\"determineServerTimeDifferenceMillis: db.serverStatus.localTime returned null - cannot determine time difference - assuming 0ms\");\n+        \treturn 0;\n+        }\n         final long end = System.currentTimeMillis();\n \n         final long midPoint = (start + end) / 2;",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/d074fc8e1a74dfa4c163dad625f224cd73bc92fb/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/mongo/MongoDocumentStore.java",
                "sha": "971954b5c3343d8f9ce89f825321c05849e03b85",
                "status": "modified"
            }
        ],
        "message": "OAK-4107 : avoid NPE when db.serverStatus.localTime returns null - even though that is unexpected - just issue a WARN then\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1740462 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/fc2da6a8eb7406d173ffab922742c77617c47795",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "MongoDocumentStoreTest.java"
        ]
    },
    "jackrabbit-oak_d4ef60c": {
        "bug_id": "jackrabbit-oak_d4ef60c",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/d4ef60c19484d4295593a6e03b9c08975295160f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/d4ef60c19484d4295593a6e03b9c08975295160f/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/backup/FileStoreBackup.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/backup/FileStoreBackup.java?ref=d4ef60c19484d4295593a6e03b9c08975295160f",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/backup/FileStoreBackup.java",
                "patch": "@@ -69,7 +69,7 @@ public static void backup(NodeStore store, File destination)\n             } else {\n                 // 3.2 try to retrieve the previously backed up checkpoint\n                 NodeState before = store.retrieve(beforeCheckpoint);\n-                if (before != null) {\n+                if (before == null) {\n                     // the previous checkpoint is no longer available,\n                     // so use the backed up state as the basis of the\n                     // incremental backup diff",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/d4ef60c19484d4295593a6e03b9c08975295160f/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/backup/FileStoreBackup.java",
                "sha": "4757b9bb009603191c0e453588d0c95de4c3e271",
                "status": "modified"
            }
        ],
        "message": "OAK-1464 FileStoreBackup NPE in retrieving old state\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1571250 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/a6ff1c86fa326ee277e87eda7946ab6e5b135a52",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "FileStoreBackupTest.java"
        ]
    },
    "jackrabbit-oak_d569277": {
        "bug_id": "jackrabbit-oak_d569277",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/d56927746d55232b673a90f79073809c6b674064",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/d56927746d55232b673a90f79073809c6b674064/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CommitHookEnhancer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CommitHookEnhancer.java?ref=d56927746d55232b673a90f79073809c6b674064",
                "deletions": 1,
                "filename": "oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CommitHookEnhancer.java",
                "patch": "@@ -62,7 +62,7 @@ public NodeState processCommit(NodeState before, NodeState after, CommitInfo inf\n \n         NodeState result = hook.processCommit(compositeBefore, compositeAfter, info);\n         updatedBuilder = Optional.of(toComposite(result, compositeBefore));\n-        return updatedBuilder.get().getNodeState().getNodeStates().get(ctx.getGlobalStore());\n+        return updatedBuilder.get().getNodeState().getNodeState(ctx.getGlobalStore());\n     }\n \n     Optional<CompositeNodeBuilder> getUpdatedBuilder() {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/d56927746d55232b673a90f79073809c6b674064/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CommitHookEnhancer.java",
                "sha": "ef96b71136835749bd6822c2e9266ea2f75213aa",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/d56927746d55232b673a90f79073809c6b674064/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeState.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeState.java?ref=d56927746d55232b673a90f79073809c6b674064",
                "deletions": 14,
                "filename": "oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeState.java",
                "patch": "@@ -19,6 +19,9 @@\n package org.apache.jackrabbit.oak.composite;\n \n import com.google.common.base.Function;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Sets;\n import org.apache.jackrabbit.oak.api.PropertyState;\n import org.apache.jackrabbit.oak.commons.PathUtils;\n import org.apache.jackrabbit.oak.plugins.memory.MemoryChildNodeEntry;\n@@ -27,7 +30,10 @@\n import org.apache.jackrabbit.oak.spi.state.NodeBuilder;\n import org.apache.jackrabbit.oak.spi.state.NodeState;\n import org.apache.jackrabbit.oak.spi.state.NodeStateDiff;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+import javax.annotation.Nullable;\n import java.util.List;\n import java.util.Map;\n \n@@ -36,14 +42,18 @@\n import static com.google.common.collect.Iterables.concat;\n import static com.google.common.collect.Iterables.filter;\n import static com.google.common.collect.Iterables.transform;\n+import static com.google.common.collect.Maps.asMap;\n import static com.google.common.collect.Maps.transformValues;\n+import static com.google.common.collect.Sets.newHashSet;\n import static java.lang.Long.MAX_VALUE;\n import static java.util.Collections.singleton;\n import static org.apache.jackrabbit.oak.composite.CompositeNodeBuilder.simpleConcat;\n import static org.apache.jackrabbit.oak.spi.state.ChildNodeEntry.GET_NAME;\n \n class CompositeNodeState extends AbstractNodeState {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(CompositeNodeState.class);\n+\n     // A note on content held by node stores which is outside the mount boundaries\n     //\n     // As a matter of design, mounted stores will definitely hold information _above_\n@@ -75,8 +85,16 @@\n         this.owningStore = ctx.getOwningStore(path);\n     }\n \n-    Map<MountedNodeStore, NodeState> getNodeStates() {\n-        return nodeStates;\n+    NodeState getNodeState(MountedNodeStore mns) {\n+        NodeState nodeState = nodeStates.get(mns);\n+        if (nodeState != null) {\n+            return nodeState;\n+        }\n+\n+        // this shouldn't happen, so we need to log some more debug info\n+        String mountName = mns.getMount().isDefault() ? \"[default]\" : mns.getMount().getName();\n+        LOG.warn(\"Can't find node state for path {} and mount {}. The node state map: {}\", path, mountName, nodeStates);\n+        throw new IllegalStateException(\"Can't find the node state for mount \" + mountName);\n     }\n \n     @Override\n@@ -110,16 +128,16 @@ public long getPropertyCount() {\n     public boolean hasChildNode(String name) {\n         String childPath = simpleConcat(path, name);\n         MountedNodeStore mountedStore = ctx.getOwningStore(childPath);\n-        return nodeStates.get(mountedStore).hasChildNode(name);\n+        return getNodeState(mountedStore).hasChildNode(name);\n     }\n \n     @Override\n     public NodeState getChildNode(final String name) {\n         String childPath = simpleConcat(path, name);\n         if (!ctx.shouldBeComposite(childPath)) {\n-            return nodeStates.get(ctx.getOwningStore(childPath)).getChildNode(name);\n+            return getNodeState(ctx.getOwningStore(childPath)).getChildNode(name);\n         }\n-        Map<MountedNodeStore, NodeState> newNodeStates = transformValues(nodeStates, new Function<NodeState, NodeState>() {\n+        Map<MountedNodeStore, NodeState> newNodeStates = transformValues(safeGetMap(), new Function<NodeState, NodeState>() {\n             @Override\n             public NodeState apply(NodeState input) {\n                 return input.getChildNode(name);\n@@ -130,7 +148,7 @@ public NodeState apply(NodeState input) {\n \n     @Override\n     public long getChildNodeCount(final long max) {\n-        List<MountedNodeStore> contributingStores = ctx.getContributingStoresForNodes(path, nodeStates);\n+        List<MountedNodeStore> contributingStores = ctx.getContributingStoresForNodes(path, safeGetMap());\n         if (contributingStores.isEmpty()) {\n             return 0; // this shouldn't happen\n         } else if (contributingStores.size() == 1) {\n@@ -140,7 +158,7 @@ public long getChildNodeCount(final long max) {\n             return accumulateChildSizes(concat(transform(contributingStores, new Function<MountedNodeStore, Iterable<String>>() {\n                 @Override\n                 public Iterable<String> apply(MountedNodeStore mns) {\n-                    NodeState contributing = nodeStates.get(mns);\n+                    NodeState contributing = getNodeState(mns);\n                     if (contributing.getChildNodeCount(max) == MAX_VALUE) {\n                         return singleton(STOP_COUNTING_CHILDREN);\n                     } else {\n@@ -164,10 +182,10 @@ static long accumulateChildSizes(Iterable<String> nodeNames, long max) {\n \n     @Override\n     public Iterable<? extends ChildNodeEntry> getChildNodeEntries() {\n-        Iterable<? extends ChildNodeEntry> nativeChildren = concat(transform(ctx.getContributingStoresForNodes(path, nodeStates), new Function<MountedNodeStore, Iterable<? extends ChildNodeEntry>>() {\n+        Iterable<? extends ChildNodeEntry> nativeChildren = concat(transform(ctx.getContributingStoresForNodes(path, safeGetMap()), new Function<MountedNodeStore, Iterable<? extends ChildNodeEntry>>() {\n             @Override\n             public Iterable<? extends ChildNodeEntry> apply(final MountedNodeStore mountedNodeStore) {\n-                return filter(nodeStates.get(mountedNodeStore).getChildNodeEntries(), compose(ctx.belongsToStore(mountedNodeStore, path), GET_NAME));\n+                return filter(getNodeState(mountedNodeStore).getChildNodeEntries(), compose(ctx.belongsToStore(mountedNodeStore, path), GET_NAME));\n             }\n         }));\n         return transform(nativeChildren, new Function<ChildNodeEntry, ChildNodeEntry>() {\n@@ -185,13 +203,13 @@ public boolean compareAgainstBaseState(NodeState base, NodeStateDiff diff) {\n             CompositeNodeState multiBase = (CompositeNodeState) base;\n             NodeStateDiff wrappingDiff = new WrappingDiff(diff, multiBase);\n             boolean full = getWrappedNodeState().compareAgainstBaseState(multiBase.getWrappedNodeState(), new ChildrenDiffFilter(wrappingDiff, owningStore, true));\n-            for (MountedNodeStore mns : ctx.getContributingStoresForNodes(path, nodeStates)) {\n+            for (MountedNodeStore mns : ctx.getContributingStoresForNodes(path, safeGetMap())) {\n                 if (owningStore == mns) {\n                     continue;\n                 }\n                 NodeStateDiff childrenDiffFilter = new ChildrenDiffFilter(wrappingDiff, mns, false);\n-                NodeState contributing = nodeStates.get(mns);\n-                NodeState contributingBase = multiBase.nodeStates.get(mns);\n+                NodeState contributing = getNodeState(mns);\n+                NodeState contributingBase = multiBase.getNodeState(mns);\n                 full = full && contributing.compareAgainstBaseState(contributingBase, childrenDiffFilter);\n             }\n             return full;\n@@ -203,7 +221,7 @@ public boolean compareAgainstBaseState(NodeState base, NodeStateDiff diff) {\n     // write operations\n     @Override\n     public CompositeNodeBuilder builder() {\n-        Map<MountedNodeStore, NodeBuilder> nodeBuilders = transformValues(nodeStates, new Function<NodeState, NodeBuilder>() {\n+        Map<MountedNodeStore, NodeBuilder> nodeBuilders = transformValues(safeGetMap(), new Function<NodeState, NodeBuilder>() {\n             @Override\n             public NodeBuilder apply(NodeState input) {\n                 return input.builder();\n@@ -213,7 +231,11 @@ public NodeBuilder apply(NodeState input) {\n     }\n \n     private NodeState getWrappedNodeState() {\n-        return nodeStates.get(owningStore);\n+        return getNodeState(owningStore);\n+    }\n+\n+    private Map<MountedNodeStore, NodeState> safeGetMap() {\n+        return asMap(ctx.getAllMountedNodeStores(), this::getNodeState);\n     }\n \n     private class ChildrenDiffFilter implements NodeStateDiff {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/d56927746d55232b673a90f79073809c6b674064/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositeNodeState.java",
                "sha": "e2c6f97782d37cbe43c63b8a1c34be3fd7584fa3",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/d56927746d55232b673a90f79073809c6b674064/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositionContext.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositionContext.java?ref=d56927746d55232b673a90f79073809c6b674064",
                "deletions": 3,
                "filename": "oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositionContext.java",
                "patch": "@@ -18,6 +18,8 @@\n \n import com.google.common.base.Function;\n import com.google.common.base.Predicate;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Iterables;\n import org.apache.jackrabbit.oak.api.Blob;\n import org.apache.jackrabbit.oak.commons.PathUtils;\n@@ -32,6 +34,7 @@\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n import static com.google.common.collect.ImmutableMap.copyOf;\n import static com.google.common.collect.Iterables.concat;\n@@ -51,16 +54,25 @@\n \n     private final Map<Mount, MountedNodeStore> nodeStoresByMount;\n \n+    private final Set<MountedNodeStore> allStores;\n+\n     CompositionContext(MountInfoProvider mip, NodeStore globalStore, List<MountedNodeStore> nonDefaultStores) {\n         this.mip = mip;\n         this.globalStore = new MountedNodeStore(mip.getDefaultMount(), globalStore);\n         this.nonDefaultStores = nonDefaultStores;\n-        this.nodeStoresByMount = copyOf(uniqueIndex(getAllMountedNodeStores(), new Function<MountedNodeStore, Mount>() {\n+\n+        ImmutableSet.Builder<MountedNodeStore> b = ImmutableSet.builder();\n+        b.add(this.globalStore);\n+        b.addAll(this.nonDefaultStores);\n+        allStores = b.build();\n+\n+        this.nodeStoresByMount = copyOf(uniqueIndex(allStores, new Function<MountedNodeStore, Mount>() {\n             @Override\n             public Mount apply(MountedNodeStore input) {\n                 return input.getMount();\n             }\n         }));\n+\n     }\n \n     MountedNodeStore getGlobalStore() {\n@@ -152,8 +164,8 @@ public boolean apply(String input) {\n         }).isPresent();\n     }\n \n-    Iterable<MountedNodeStore> getAllMountedNodeStores() {\n-        return concat(singleton(globalStore), nonDefaultStores);\n+    Set<MountedNodeStore> getAllMountedNodeStores() {\n+        return allStores;\n     }\n \n     Blob createBlob(InputStream inputStream) throws IOException {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/d56927746d55232b673a90f79073809c6b674064/oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/CompositionContext.java",
                "sha": "122dc992b5a26fc609fb3824cc53095bedde29e6",
                "status": "modified"
            }
        ],
        "message": "OAK-6486: NPE in CompositeNodeStore\n\nLog diagnostic info if there's no node state for given mounted node store.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1802932 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/2867d90ed56dc9bee3e4d08198746e6e03b04445",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "CompositionContextTest.java"
        ]
    },
    "jackrabbit-oak_d6a2d3d": {
        "bug_id": "jackrabbit-oak_d6a2d3d",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/d6a2d3ddcfbb56f5fc5e7e02e76a4c58bdbbeab4",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/d6a2d3ddcfbb56f5fc5e7e02e76a4c58bdbbeab4/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBBlobStore.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBBlobStore.java?ref=d6a2d3ddcfbb56f5fc5e7e02e76a4c58bdbbeab4",
                "deletions": 2,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBBlobStore.java",
                "patch": "@@ -100,12 +100,16 @@ public void close() {\n                 }\n             }\n         }\n-        this.ch = null;\n+        try {\n+            this.ch.close();\n+        } catch (IOException ex) {\n+            LOG.error(\"closing connection handler\", ex);\n+        }\n     }\n \n     @Override\n     protected void finalize() {\n-        if (this.ch != null && this.callStack != null) {\n+        if (!this.ch.isClosed() && this.callStack != null) {\n             LOG.debug(\"finalizing RDBDocumentStore that was not disposed\", this.callStack);\n         }\n     }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/d6a2d3ddcfbb56f5fc5e7e02e76a4c58bdbbeab4/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBBlobStore.java",
                "sha": "43ec7303b8cdacc642f677341e3653edbe5b4d57",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/d6a2d3ddcfbb56f5fc5e7e02e76a4c58bdbbeab4/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBConnectionHandler.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBConnectionHandler.java?ref=d6a2d3ddcfbb56f5fc5e7e02e76a4c58bdbbeab4",
                "deletions": 4,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBConnectionHandler.java",
                "patch": "@@ -16,6 +16,8 @@\n  */\n package org.apache.jackrabbit.oak.plugins.document.rdb;\n \n+import java.io.Closeable;\n+import java.io.IOException;\n import java.sql.Connection;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n@@ -32,9 +34,10 @@\n /**\n  * Utility functions for connection handling.\n  */\n-public class RDBConnectionHandler {\n+public class RDBConnectionHandler implements Closeable {\n \n-    private final DataSource ds;\n+    private DataSource ds;\n+    private long closedTime = 0L;\n \n     private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(RDBConnectionHandler.class);\n \n@@ -56,7 +59,7 @@ public RDBConnectionHandler(@Nonnull DataSource ds) {\n      * Obtain a {@link Connection} suitable for read-only operations.\n      */\n     public @Nonnull Connection getROConnection() throws SQLException {\n-        Connection c = this.ds.getConnection();\n+        Connection c = getDataSource().getConnection();\n         c.setAutoCommit(false);\n         setReadOnly(c, true);\n         return c;\n@@ -66,7 +69,7 @@ public RDBConnectionHandler(@Nonnull DataSource ds) {\n      * Obtain a {@link Connection} suitable for read-write operations.\n      */\n     public @Nonnull Connection getRWConnection() throws SQLException {\n-        Connection c = this.ds.getConnection();\n+        Connection c = getDataSource().getConnection();\n         c.setAutoCommit(false);\n         setReadOnly(c, false);\n         return c;\n@@ -139,6 +142,24 @@ public ResultSet closeResultSet(@CheckForNull ResultSet rs) {\n         return null;\n     }\n \n+    public boolean isClosed() {\n+        return this.ds == null;\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        this.ds = null;\n+        this.closedTime = System.currentTimeMillis();\n+    }\n+\n+    private DataSource getDataSource() throws IllegalStateException {\n+        DataSource result = this.ds;\n+        if (result == null) {\n+            throw new IllegalStateException(\"Connection handler is already closed (\"\n+                    + (System.currentTimeMillis() - this.closedTime) + \"ms ago)\");\n+        }\n+        return result;\n+    }\n \n     // workaround for broken connection wrappers\n     // see https://issues.apache.org/jira/browse/OAK-2918",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/d6a2d3ddcfbb56f5fc5e7e02e76a4c58bdbbeab4/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBConnectionHandler.java",
                "sha": "1a6b8a15f4fca3412ed63b538fc94c20d54b5fb8",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/d6a2d3ddcfbb56f5fc5e7e02e76a4c58bdbbeab4/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java?ref=d6a2d3ddcfbb56f5fc5e7e02e76a4c58bdbbeab4",
                "deletions": 2,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "patch": "@@ -347,7 +347,11 @@ public void dispose() {\n             }\n             this.droppedTables = dropped.trim();\n         }\n-        this.ch = null;\n+        try {\n+            this.ch.close();\n+        } catch (IOException ex) {\n+            LOG.error(\"closing connection handler\", ex);\n+        }\n     }\n \n     @Override\n@@ -911,7 +915,7 @@ private void createTableFor(Connection con, Collection<? extends Document> col,\n \n     @Override\n     protected void finalize() {\n-        if (this.ch != null && this.callStack != null) {\n+        if (!this.ch.isClosed() && this.callStack != null) {\n             LOG.debug(\"finalizing RDBDocumentStore that was not disposed\", this.callStack);\n         }\n     }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/d6a2d3ddcfbb56f5fc5e7e02e76a4c58bdbbeab4/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentStore.java",
                "sha": "1082f3885ee9cdb90792029da842b3b040f89e73",
                "status": "modified"
            }
        ],
        "message": "OAK-2930 - RDBBlob/DocumentStore: do not NPE calls after dispose()\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1682494 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/39e931e22fe8a579822f622bd6328116ab25c9d6",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "RDBDocumentStoreTest.java"
        ]
    },
    "jackrabbit-oak_d773cfd": {
        "bug_id": "jackrabbit-oak_d773cfd",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/d773cfd24500b88c87cd24c0d80098ffef2c287e",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/d773cfd24500b88c87cd24c0d80098ffef2c287e/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/lucene/LuceneIndex.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/lucene/LuceneIndex.java?ref=d773cfd24500b88c87cd24c0d80098ffef2c287e",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/lucene/LuceneIndex.java",
                "patch": "@@ -165,7 +165,8 @@ private static Query getQuery(Filter filter) {\n                 last = pr.last.getString();\n             }\n \n-            if (first.equals(last) && pr.firstIncluding && pr.lastIncluding) {\n+            if (first != null && first.equals(last) && pr.firstIncluding\n+                    && pr.lastIncluding) {\n                 qs.add(new TermQuery(new Term(name, first)));\n             } else {\n                 qs.add(TermRangeQuery.newStringRange(name, first, last,",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/d773cfd24500b88c87cd24c0d80098ffef2c287e/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/lucene/LuceneIndex.java",
                "sha": "2698c8c57185191f4e270539e9570ee3d378358f",
                "status": "modified"
            }
        ],
        "message": "OAK-286 Possible NPE in LuceneIndex\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1378643 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/85f4e08eefcc57c70e312ee7ae1069883a577ecd",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "LuceneIndexTest.java"
        ]
    },
    "jackrabbit-oak_dec3772": {
        "bug_id": "jackrabbit-oak_dec3772",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/dec377243963969ba53f68715936b4f20ebca5e3",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/dec377243963969ba53f68715936b4f20ebca5e3/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/FileStore.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/FileStore.java?ref=dec377243963969ba53f68715936b4f20ebca5e3",
                "deletions": 2,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/FileStore.java",
                "patch": "@@ -234,8 +234,10 @@ public void flush() throws IOException {\n             }\n         }\n \n-        for (Segment segment : segments.asMap().values().toArray(new Segment[0])) {\n-            segment.dropOldCacheEntries();\n+        if (segments != null) {\n+            for (Segment segment : segments.asMap().values().toArray(new Segment[0])) {\n+                segment.dropOldCacheEntries();\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/dec377243963969ba53f68715936b4f20ebca5e3/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/FileStore.java",
                "sha": "25269bee378379d963ef7e2810c22eb7ccd8dfb4",
                "status": "modified"
            }
        ],
        "message": "OAK-1524: NPE in TarMK flush thread\n\nFixed as suggested by Chetan Mehrotra\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1576452 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/46b3bfd2c75f464c2059687004ad96974df562c9",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "FileStoreTest.java"
        ]
    },
    "jackrabbit-oak_f75b8e5": {
        "bug_id": "jackrabbit-oak_f75b8e5",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/f75b8e5e4058d8fcd3ac320aea4a4cebaa458c75",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f75b8e5e4058d8fcd3ac320aea4a4cebaa458c75/oak-it/mk/src/main/java/org/apache/jackrabbit/mk/test/MicroKernelIT.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-it/mk/src/main/java/org/apache/jackrabbit/mk/test/MicroKernelIT.java?ref=f75b8e5e4058d8fcd3ac320aea4a4cebaa458c75",
                "deletions": 0,
                "filename": "oak-it/mk/src/main/java/org/apache/jackrabbit/mk/test/MicroKernelIT.java",
                "patch": "@@ -263,6 +263,19 @@ public void copyToDescendant() {\n \n         assertTrue(mk.nodeExists(\"/test/child\", null));\n         assertTrue(mk.nodeExists(\"/test/copy/child\", null));\n+        JSONObject obj = parseJSONObject(mk.getNodes(\"/test\", null, 99, 0, -1, null));\n+        assertPropertyValue(obj, \":childNodeCount\", 2l);\n+        assertPropertyValue(obj, \"copy/:childNodeCount\", 1l);\n+        assertPropertyValue(obj, \"copy/child/:childNodeCount\", 0l);\n+\n+        mk.commit(\"\", \"+\\\"/root\\\":{} +\\\"/root/N4\\\":{} *\\\"/root/N4\\\":\\\"/root/N4/N5\\\"\", null, null);\n+        assertTrue(mk.nodeExists(\"/root\", null));\n+        assertTrue(mk.nodeExists(\"/root/N4\", null));\n+        assertTrue(mk.nodeExists(\"/root/N4/N5\", null));\n+        obj = parseJSONObject(mk.getNodes(\"/root\", null, 99, 0, -1, null));\n+        assertPropertyValue(obj, \":childNodeCount\", 1l);\n+        assertPropertyValue(obj, \"N4/:childNodeCount\", 1l);\n+        assertPropertyValue(obj, \"N4/N5/:childNodeCount\", 0l);\n     }\n \n     @Test",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f75b8e5e4058d8fcd3ac320aea4a4cebaa458c75/oak-it/mk/src/main/java/org/apache/jackrabbit/mk/test/MicroKernelIT.java",
                "sha": "7d2b13f43f0f9413783562d6a96d660de5ba185a",
                "status": "modified"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f75b8e5e4058d8fcd3ac320aea4a4cebaa458c75/oak-mk/src/main/java/org/apache/jackrabbit/mk/api/MicroKernel.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-mk/src/main/java/org/apache/jackrabbit/mk/api/MicroKernel.java?ref=f75b8e5e4058d8fcd3ac320aea4a4cebaa458c75",
                "deletions": 12,
                "filename": "oak-mk/src/main/java/org/apache/jackrabbit/mk/api/MicroKernel.java",
                "patch": "@@ -77,14 +77,20 @@\n      *   ...\n      * ]\n      * </pre>\n+     * The {@code path} parameter allows to filter the revisions by path, i.e.\n+     * only those revisions that affected the subtree rooted at {@code path}\n+     * will be included.\n      *\n      * @param since      timestamp (ms) of earliest revision to be returned\n      * @param maxEntries maximum #entries to be returned;\n      *                   if < 0, no limit will be applied.\n+     * @param path       optional path filter; if {@code null} or {@code \"\"} the\n+     *                   default ({@code\"/\"}) will be assumed, i.e. no filter\n+     *                   will be applied\n      * @return a list of revisions in chronological order in JSON format.\n      * @throws MicroKernelException if an error occurs\n      */\n-    String /* jsonArray */ getRevisionHistory(long since, int maxEntries)\n+    String /* jsonArray */ getRevisionHistory(long since, int maxEntries/*, String path*/)\n             throws MicroKernelException;\n \n     /**\n@@ -127,39 +133,47 @@ String waitForCommit(String oldHeadRevisionId, long timeout)\n      * If {@code fromRevisionId} and {@code toRevisionId} are not in chronological\n      * order the returned journal will be empty (i.e. {@code []})\n      * <p/>\n+     * The {@code path} parameter allows to filter the revisions by path, i.e.\n+     * only those revisions that affected the subtree rooted at {@code path}\n+     * will be included.\n+     * <p/>\n      * A {@code MicroKernelException} is thrown if either {@code fromRevisionId}\n      * or {@code toRevisionId}  doesn't exist, denotes a <i>private</i> branch\n      * revision or if another error occurs.\n      *\n      * @param fromRevisionId id of first revision to be returned in journal\n      * @param toRevisionId   id of last revision to be returned in journal,\n      *                       if {@code null} the current head revision is assumed\n-     * @param filter         (optional) filter criteria\n-     *                       (e.g. path, property names, etc);\n-     *                       TODO specify format and semantics\n+     * @param path           optional path filter; if {@code null} or {@code \"\"}\n+     *                       the default ({@code\"/\"}) will be assumed, i.e. no\n+     *                       filter will be applied\n      * @return a chronological list of revisions in JSON format\n      * @throws MicroKernelException if an error occurs\n      */\n     String /* jsonArray */ getJournal(String fromRevisionId, String toRevisionId,\n-                                      String filter)\n+                                      String path)\n             throws MicroKernelException;\n \n     /**\n      * Returns the JSON diff representation of the changes between the specified\n      * revisions. The changes will be consolidated if the specified range\n      * covers intermediary revisions. {@code fromRevisionId} and {@code toRevisionId}\n      * don't need not be in a specific chronological order.\n+     * <p/>\n+     * The {@code path} parameter allows to filter the revisions by path, i.e.\n+     * only those revisions that affected the subtree rooted at {@code path}\n+     * will be included.\n      *\n      * @param fromRevisionId a revision id, if {@code null} the current head revision is assumed\n      * @param toRevisionId   another revision id, if {@code null} the current head revision is assumed\n-     * @param filter         (optional) filter criteria\n-     *                       (e.g. path, property names, etc);\n-     *                       TODO specify format and semantics\n+     * @param path           optional path filter; if {@code null} or {@code \"\"}\n+     *                       the default ({@code\"/\"}) will be assumed, i.e. no\n+     *                       filter will be applied\n      * @return JSON diff representation of the changes\n      * @throws MicroKernelException if an error occurs\n      */\n     String /* JSON diff */ diff(String fromRevisionId, String toRevisionId,\n-                                String filter)\n+                                String path)\n             throws MicroKernelException;\n \n     //-------------------------------------------------------------< READ ops >\n@@ -250,18 +264,32 @@ String waitForCommit(String oldHeadRevisionId, long timeout)\n      * <p/>\n      * The {@code offset} and {@code count} parameters are only applied to the\n      * direct child nodes of the root of the returned node tree.\n+     * <p/>\n+     * The {@code filter} parameter allows to specify the names of properties\n+     * to be included or excluded.\n+     * <p/>\n+     * Format:\n+     * <pre>\n+     * {\n+     *   incl: [ \"foo\", \"foo1\" ],\n+     *   excl: [ \"bar\", \"tmp\" ]\n+     * }\n+     * </pre>\n+     * TODO clarify (globbing) syntax, semantics and implicit default filter (OAK-75)\n+     * <p/>\n+     * For more information see {@link #getNodes(String, String)}.\n      *\n      * @param path       path denoting root of node tree to be retrieved\n      * @param revisionId revision id, if {@code null} the current head revision is assumed\n      * @param depth      maximum depth of returned tree\n      * @param offset     start position in the iteration order of child nodes (0 to start at the\n      *                   beginning)\n      * @param count      maximum number of child nodes to retrieve (-1 for all)\n-     * @param filter     (optional) filter criteria\n-     *                   (e.g. names of properties to be included, etc);\n-     *                   TODO specify format and semantics\n+     * @param filter     optional filter on property names; if {@code null} or\n+     *                   {@code \"\"} the default filter will be assumed\n      * @return node tree in JSON format or {@code null} if the specified node does not exist\n      * @throws MicroKernelException if the specified revision does not exist or if another error occurs\n+     * @see #getNodes(String, String)\n      */\n     String /* jsonTree */ getNodes(String path, String revisionId, int depth,\n                                    long offset, int count, String filter)",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f75b8e5e4058d8fcd3ac320aea4a4cebaa458c75/oak-mk/src/main/java/org/apache/jackrabbit/mk/api/MicroKernel.java",
                "sha": "b18ff64b3ff3b7b2365841143d1f0636015f8658",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f75b8e5e4058d8fcd3ac320aea4a4cebaa458c75/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/CommitBuilder.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/CommitBuilder.java?ref=f75b8e5e4058d8fcd3ac320aea4a4cebaa458c75",
                "deletions": 3,
                "filename": "oak-mk/src/main/java/org/apache/jackrabbit/mk/model/CommitBuilder.java",
                "patch": "@@ -615,15 +615,16 @@ void apply() throws Exception {\n                 throw new NotFoundException(srcPath);\n             }\n \n-            MutableNode destParent = getOrCreateStagedNode(destParentPath);\n-            destParent.add(new ChildNode(destNodeName, srcCNE.getId()));\n-\n             if (staged.containsKey(srcPath)) {\n                 // the copied subtree is modified\n \n                 // update staging area\n                 copyStagedNodes(srcPath, destPath, destPath);\n             }\n+\n+            MutableNode destParent = getOrCreateStagedNode(destParentPath);\n+            destParent.add(new ChildNode(destNodeName, srcCNE.getId()));\n+\n         }\n \n         @Override",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f75b8e5e4058d8fcd3ac320aea4a4cebaa458c75/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/CommitBuilder.java",
                "sha": "ccc033cfbdc465bb03d5ffaa457d11070c692189",
                "status": "modified"
            }
        ],
        "message": "OAK-85: NPE and wrong result on copy operation\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1334040 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/bc20b6dc88f32deb3baa76bbbd6005b5cd2f4fd5",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "CommitBuilderTest.java"
        ]
    },
    "jackrabbit-oak_f878b38": {
        "bug_id": "jackrabbit-oak_f878b38",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/f878b3867093dbcc53760f2acadfa12dbf31801f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-authorization-cug/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugConfiguration.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-authorization-cug/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugConfiguration.java?ref=f878b3867093dbcc53760f2acadfa12dbf31801f",
                "deletions": 0,
                "filename": "oak-authorization-cug/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugConfiguration.java",
                "patch": "@@ -233,6 +233,7 @@ private CugExclude getExclude() {\n     static boolean registerCugNodeTypes(@NotNull final Root root) {\n         try {\n             ReadOnlyNodeTypeManager ntMgr = new ReadOnlyNodeTypeManager() {\n+                @NotNull\n                 @Override\n                 protected Tree getTypes() {\n                     return root.getTree(NodeTypeConstants.NODE_TYPES_PATH);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-authorization-cug/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugConfiguration.java",
                "sha": "5f80affba976045796a82fda4315856d40d699d0",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-authorization-cug/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugValidatorTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-authorization-cug/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugValidatorTest.java?ref=f878b3867093dbcc53760f2acadfa12dbf31801f",
                "deletions": 1,
                "filename": "oak-authorization-cug/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugValidatorTest.java",
                "patch": "@@ -153,7 +153,7 @@ protected Root getWriteRoot() {\n                 return root;\n             }\n \n-            @Nullable\n+            @NotNull\n             @Override\n             protected Tree getTypes() {\n                 return root.getTree(NODE_TYPES_PATH);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-authorization-cug/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugValidatorTest.java",
                "sha": "a35c1bbc58d3d6dc84b17c508cb3601c64f0ecfd",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/NodeTypeImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/NodeTypeImpl.java?ref=f878b3867093dbcc53760f2acadfa12dbf31801f",
                "deletions": 1,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/NodeTypeImpl.java",
                "patch": "@@ -485,7 +485,8 @@ private boolean internalCanRemoveItem(String itemName,\n     private ReadOnlyNodeTypeManager getManager() {\n         final Tree types = definition.getParent();\n         return new ReadOnlyNodeTypeManager() {\n-            @Override @Nullable\n+            @NotNull\n+            @Override\n             protected Tree getTypes() {\n                 return types;\n             }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/NodeTypeImpl.java",
                "sha": "c019c5f34445cb2ad64f75e1251d7c5e5106c575",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/ReadOnlyNodeTypeManager.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/ReadOnlyNodeTypeManager.java?ref=f878b3867093dbcc53760f2acadfa12dbf31801f",
                "deletions": 15,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/ReadOnlyNodeTypeManager.java",
                "patch": "@@ -82,10 +82,13 @@ protected final String getOakName(String jcrName) throws RepositoryException {\n     }\n \n     /**\n-     * @return  {@link org.apache.jackrabbit.oak.api.Tree} instance where the node types\n-     * are stored or {@code null} if none.\n+     * Returns the {@link Tree} instance where the node types are stored. This\n+     * method never returns {@code null} and may return a {@code Tree} that\n+     * does not exist (see {@link Tree#exists()} when there are no types stored.\n+     *\n+     * @return {@link Tree} instance where the node types are stored.\n      */\n-    @Nullable\n+    @NotNull\n     protected abstract Tree getTypes();\n \n     /**\n@@ -125,6 +128,7 @@ protected NamePathMapper getNamePathMapper() {\n     public static ReadOnlyNodeTypeManager getInstance(final Root root,\n                                                       final NamePathMapper namePathMapper) {\n         return new ReadOnlyNodeTypeManager() {\n+            @NotNull\n             @Override\n             protected Tree getTypes() {\n                 return root.getTree(NODE_TYPES_PATH);\n@@ -142,8 +146,7 @@ protected NamePathMapper getNamePathMapper() {\n \n     @Override\n     public boolean hasNodeType(String name) throws RepositoryException {\n-        Tree types = getTypes();\n-        return types != null && types.hasChild(getOakName(name));\n+        return getTypes().hasChild(getOakName(name));\n     }\n \n     @Override\n@@ -155,11 +158,9 @@ public NodeType getNodeType(String name) throws RepositoryException {\n     public NodeTypeIterator getAllNodeTypes() throws RepositoryException {\n         List<NodeType> list = Lists.newArrayList();\n         Tree types = getTypes();\n-        if (types != null) {\n-            NamePathMapper mapper = getNamePathMapper();\n-            for (Tree type : types.getChildren()) {\n-                list.add(new NodeTypeImpl(type, mapper));\n-            }\n+        NamePathMapper mapper = getNamePathMapper();\n+        for (Tree type : types.getChildren()) {\n+            list.add(new NodeTypeImpl(type, mapper));\n         }\n         return new NodeTypeIteratorAdapter(list);\n     }\n@@ -411,11 +412,9 @@ public PropertyDefinition getDefinition(@NotNull Tree parent, @NotNull PropertyS\n     @NotNull\n     NodeTypeImpl internalGetNodeType(@NotNull String oakName) throws NoSuchNodeTypeException {\n         Tree types = getTypes();\n-        if (types != null) {\n-            Tree type = types.getChild(oakName);\n-            if (type.exists()) {\n-                return new NodeTypeImpl(type, getNamePathMapper());\n-            }\n+        Tree type = types.getChild(oakName);\n+        if (type.exists()) {\n+            return new NodeTypeImpl(type, getNamePathMapper());\n         }\n         throw new NoSuchNodeTypeException(getNamePathMapper().getJcrName(oakName));\n     }",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/ReadOnlyNodeTypeManager.java",
                "sha": "3fdd4802c26b6a8dce75c28a982b9ebcb140f337",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/write/NodeTypeRegistry.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/write/NodeTypeRegistry.java?ref=f878b3867093dbcc53760f2acadfa12dbf31801f",
                "deletions": 0,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/write/NodeTypeRegistry.java",
                "patch": "@@ -51,6 +51,7 @@\n \n     private NodeTypeRegistry(final Root root) {\n         this.ntMgr =  new ReadWriteNodeTypeManager() {\n+            @NotNull\n             @Override\n             protected Tree getTypes() {\n                 return root.getTree(NODE_TYPES_PATH);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/write/NodeTypeRegistry.java",
                "sha": "d7afc68120bdeb4813bc3f8136e4ee2c3083d918",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/nodetype/write/NodeTypeRegistryTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/nodetype/write/NodeTypeRegistryTest.java?ref=f878b3867093dbcc53760f2acadfa12dbf31801f",
                "deletions": 0,
                "filename": "oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/nodetype/write/NodeTypeRegistryTest.java",
                "patch": "@@ -182,12 +182,14 @@ public void registerNodeType() throws Exception {\n         registerNodeType(root, \"oak6440-1.cnd\");\n         NodeTypeManager readOnlyNtMgr = new ReadOnlyNodeTypeManager() {\n             private Root r = session.getLatestRoot();\n+            @NotNull\n             @Override\n             protected Tree getTypes() {\n                 return r.getTree(NODE_TYPES_PATH);\n             }\n         };\n         NodeTypeManager ntMgr = new ReadWriteNodeTypeManager() {\n+            @NotNull\n             @Override\n             protected Tree getTypes() {\n                 return root.getTree(NODE_TYPES_PATH);\n@@ -234,6 +236,7 @@ protected Root getWriteRoot() {\n     @Test\n     public void reRegisterNtResource() throws Exception {\n         NodeTypeManager ntMgr = new ReadWriteNodeTypeManager() {\n+            @NotNull\n             @Override\n             protected Tree getTypes() {\n                 return root.getTree(NODE_TYPES_PATH);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/nodetype/write/NodeTypeRegistryTest.java",
                "sha": "fff81a9d937bdb4bb3c40a44083ed00bca45234e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/evaluation/JcrUUIDTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/evaluation/JcrUUIDTest.java?ref=f878b3867093dbcc53760f2acadfa12dbf31801f",
                "deletions": 0,
                "filename": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/evaluation/JcrUUIDTest.java",
                "patch": "@@ -57,6 +57,7 @@ protected Root getWriteRoot() {\n                 return root;\n             }\n \n+            @NotNull\n             @Override\n             protected Tree getTypes() {\n                 return root.getTree(NODE_TYPES_PATH);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/evaluation/JcrUUIDTest.java",
                "sha": "830c07dd599ef4b0e157e966c03937d5422cd9b7",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/WorkspaceImpl.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/WorkspaceImpl.java?ref=f878b3867093dbcc53760f2acadfa12dbf31801f",
                "deletions": 0,
                "filename": "oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/WorkspaceImpl.java",
                "patch": "@@ -81,6 +81,7 @@ protected void refresh() throws RepositoryException {\n                 getSession().refresh(true);\n             }\n \n+            @NotNull\n             @Override\n             protected Tree getTypes() {\n                 return sessionDelegate.getRoot().getTree(NODE_TYPES_PATH);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/WorkspaceImpl.java",
                "sha": "e6b70950a16238306fdb88183cab8c106062c248",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-search/src/main/java/org/apache/jackrabbit/oak/plugins/index/search/IndexDefinition.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-search/src/main/java/org/apache/jackrabbit/oak/plugins/index/search/IndexDefinition.java?ref=f878b3867093dbcc53760f2acadfa12dbf31801f",
                "deletions": 4,
                "filename": "oak-search/src/main/java/org/apache/jackrabbit/oak/plugins/index/search/IndexDefinition.java",
                "patch": "@@ -42,6 +42,7 @@\n import com.google.common.primitives.Ints;\n import org.apache.jackrabbit.JcrConstants;\n import org.apache.jackrabbit.oak.api.PropertyState;\n+import org.apache.jackrabbit.oak.api.Root;\n import org.apache.jackrabbit.oak.api.Tree;\n import org.apache.jackrabbit.oak.api.Type;\n import org.apache.jackrabbit.oak.commons.PathUtils;\n@@ -51,7 +52,7 @@\n import org.apache.jackrabbit.oak.plugins.index.search.util.FunctionIndexProcessor;\n import org.apache.jackrabbit.oak.plugins.memory.PropertyStates;\n import org.apache.jackrabbit.oak.plugins.nodetype.ReadOnlyNodeTypeManager;\n-import org.apache.jackrabbit.oak.plugins.tree.TreeUtil;\n+import org.apache.jackrabbit.oak.plugins.tree.factories.RootFactory;\n import org.apache.jackrabbit.oak.plugins.tree.factories.TreeFactory;\n import org.apache.jackrabbit.oak.spi.filter.PathFilter;\n import org.apache.jackrabbit.oak.spi.query.QueryIndex.OrderEntry;\n@@ -774,7 +775,7 @@ public IndexingRule getApplicableIndexingRule(NodeState state) {\n         }\n \n         Map<String, List<IndexingRule>> nt2rules = newHashMap();\n-        ReadOnlyNodeTypeManager ntReg = createNodeTypeManager(TreeFactory.createReadOnlyTree(root));\n+        ReadOnlyNodeTypeManager ntReg = createNodeTypeManager(RootFactory.createReadOnlyRoot(root));\n \n         //Use Tree API to read ordered child nodes\n         Tree ruleTree = TreeFactory.createReadOnlyTree(indexRules);\n@@ -1593,11 +1594,12 @@ private NodeState getTikaConfigNode() {\n         }\n     }\n \n-    private static ReadOnlyNodeTypeManager createNodeTypeManager(final Tree root) {\n+    private static ReadOnlyNodeTypeManager createNodeTypeManager(final Root root) {\n         return new ReadOnlyNodeTypeManager() {\n+            @NotNull\n             @Override\n             protected Tree getTypes() {\n-                return TreeUtil.getTree(root,NODE_TYPES_PATH);\n+                return root.getTree(NODE_TYPES_PATH);\n             }\n \n             @NotNull",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-search/src/main/java/org/apache/jackrabbit/oak/plugins/index/search/IndexDefinition.java",
                "sha": "01d0430a6ba7da8ef9a8997d35a83dc1b81cb0cd",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositoryUpgrade.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositoryUpgrade.java?ref=f878b3867093dbcc53760f2acadfa12dbf31801f",
                "deletions": 0,
                "filename": "oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositoryUpgrade.java",
                "patch": "@@ -451,6 +451,7 @@ public void copy(RepositoryInitializer initializer) throws RepositoryException {\n             } else {\n                 logger.info(\"Copying registered node types\");\n                 NodeTypeManager ntMgr = new ReadWriteNodeTypeManager() {\n+                    @NotNull\n                     @Override\n                     protected Tree getTypes() {\n                         return upgradeRoot.getTree(NODE_TYPES_PATH);",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/f878b3867093dbcc53760f2acadfa12dbf31801f/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositoryUpgrade.java",
                "sha": "34e2ca87f4b0c1f908b2e34fe167aaae9e609fe2",
                "status": "modified"
            }
        ],
        "message": "OAK-8218: ReadOnlyNodeTypeManager.isNodeType prone to NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1857304 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/11903eb48da994d1477df04eb4aa7e86750005bb",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "RepositoryUpgradeTest.java"
        ]
    },
    "jackrabbit-oak_fb31aec": {
        "bug_id": "jackrabbit-oak_fb31aec",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/fb31aecc28238d02797722083e2f0e3cad532715",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/fb31aecc28238d02797722083e2f0e3cad532715/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/AsyncIndexUpdate.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/AsyncIndexUpdate.java?ref=fb31aecc28238d02797722083e2f0e3cad532715",
                "deletions": 3,
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/AsyncIndexUpdate.java",
                "patch": "@@ -236,9 +236,12 @@ public synchronized void run() {\n                     name, checkpoint);\n             store.release(checkpoint);\n         } else {\n-            log.debug(\"The {} index update succeeded; releasing the previous checkpoint {}\",\n-                    name, refCheckpoint);\n-            store.release(refCheckpoint);\n+            if (refCheckpoint != null) {\n+                log.debug(\n+                        \"The {} index update succeeded; releasing the previous checkpoint {}\",\n+                        name, refCheckpoint);\n+                store.release(refCheckpoint);\n+            }\n         }\n \n         if (exception != null) {",
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/fb31aecc28238d02797722083e2f0e3cad532715/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/AsyncIndexUpdate.java",
                "sha": "d52c43090dfce297c6d957326d68ec6456d6b399",
                "status": "modified"
            }
        ],
        "message": "OAK-1877: Hourly async reindexing on an idle instance\n - added null check to comply with the #release apis, and prevent an eventual NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1602207 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/40b75b38b369f145ea018f258c114a95559acec9",
        "repo": "jackrabbit-oak",
        "unit_tests": [
            "AsyncIndexUpdateTest.java"
        ]
    }
}