{
    "metron_0670dad": {
        "repo": "metron",
        "message": "METRON-215: Fixing an NPE in the MessageParser.  This closes apache/incubator-metron#148",
        "commit": "https://github.com/apache/metron/commit/0670dad9f742c142341851ddf6cd8eb505e3fd40",
        "parent": "https://github.com/apache/metron/commit/7a45ff9c6f556f778a7dbd077b817ad6341cf567",
        "bug_id": "metron_0670dad",
        "file": [
            {
                "sha": "e3b903ee07d2abc5607819609336ada0d319436f",
                "filename": "metron-platform/metron-parsers/src/main/java/org/apache/metron/parsers/interfaces/MessageParser.java",
                "blob_url": "https://github.com/apache/metron/blob/0670dad9f742c142341851ddf6cd8eb505e3fd40/metron-platform/metron-parsers/src/main/java/org/apache/metron/parsers/interfaces/MessageParser.java",
                "raw_url": "https://github.com/apache/metron/raw/0670dad9f742c142341851ddf6cd8eb505e3fd40/metron-platform/metron-parsers/src/main/java/org/apache/metron/parsers/interfaces/MessageParser.java",
                "status": "modified",
                "changes": 25,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/metron/contents/metron-platform/metron-parsers/src/main/java/org/apache/metron/parsers/interfaces/MessageParser.java?ref=0670dad9f742c142341851ddf6cd8eb505e3fd40",
                "patch": "@@ -22,13 +22,34 @@\n import java.util.Map;\n import java.util.Optional;\n \n-public interface MessageParser<T> extends Configurable{\n+public interface MessageParser<T> extends Configurable {\n+  /**\n+   * Initialize the message parser.  This is done once.\n+   */\n   void init();\n+\n+  /**\n+   * Take raw data and convert it to a list of messages.\n+   *\n+   * @param rawMessage\n+   * @return If null is returned, this is treated as an empty list.\n+   */\n   List<T> parse(byte[] rawMessage);\n+\n+  /**\n+   * Take raw data and convert it to an optional list of messages.\n+   * @param parseMessage\n+   * @return If null is returned, this is treated as an empty list.\n+   */\n   default Optional<List<T>> parseOptional(byte[] parseMessage) {\n-    return Optional.of(parse(parseMessage));\n+    return Optional.ofNullable(parse(parseMessage));\n   }\n \n+  /**\n+   * Validate the message to ensure that it's correct.\n+   * @param message\n+   * @return true if the message is valid, false if not\n+   */\n   boolean validate(T message);\n \n }",
                "deletions": 2
            },
            {
                "sha": "1d2af786150b1132b4c97952f1294c6bc7452b4d",
                "filename": "metron-platform/metron-parsers/src/test/java/org/apache/metron/parsers/MessageParserTest.java",
                "blob_url": "https://github.com/apache/metron/blob/0670dad9f742c142341851ddf6cd8eb505e3fd40/metron-platform/metron-parsers/src/test/java/org/apache/metron/parsers/MessageParserTest.java",
                "raw_url": "https://github.com/apache/metron/raw/0670dad9f742c142341851ddf6cd8eb505e3fd40/metron-platform/metron-parsers/src/test/java/org/apache/metron/parsers/MessageParserTest.java",
                "status": "added",
                "changes": 86,
                "additions": 86,
                "contents_url": "https://api.github.com/repos/apache/metron/contents/metron-platform/metron-parsers/src/test/java/org/apache/metron/parsers/MessageParserTest.java?ref=0670dad9f742c142341851ddf6cd8eb505e3fd40",
                "patch": "@@ -0,0 +1,86 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.metron.parsers;\n+\n+import junit.framework.Assert;\n+import org.apache.metron.parsers.interfaces.MessageParser;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class MessageParserTest {\n+  @Test\n+  public void testNullable() throws Exception {\n+    MessageParser parser = new MessageParser() {\n+      @Override\n+      public void init() {\n+\n+      }\n+\n+      @Override\n+      public List parse(byte[] rawMessage) {\n+        return null;\n+      }\n+\n+      @Override\n+      public boolean validate(Object message) {\n+        return false;\n+      }\n+\n+      @Override\n+      public void configure(Map<String, Object> config) {\n+\n+      }\n+    };\n+    Assert.assertNotNull(parser.parseOptional(null));\n+    Assert.assertFalse(parser.parseOptional(null).isPresent());\n+  }\n+\n+  @Test\n+  public void testNotNullable() throws Exception {\n+    MessageParser parser = new MessageParser() {\n+      @Override\n+      public void init() {\n+\n+      }\n+\n+      @Override\n+      public List parse(byte[] rawMessage) {\n+        return new ArrayList<>();\n+      }\n+\n+      @Override\n+      public boolean validate(Object message) {\n+        return false;\n+      }\n+\n+      @Override\n+      public void configure(Map<String, Object> config) {\n+\n+      }\n+    };\n+    Assert.assertNotNull(parser.parseOptional(null));\n+    Optional<List> ret = parser.parseOptional(null);\n+    Assert.assertTrue(ret.isPresent());\n+    Assert.assertEquals(0, ret.get().size());\n+  }\n+}",
                "deletions": 0
            },
            {
                "sha": "71f8fcfc01c8eaa10e1bca0127a255adce6c41b1",
                "filename": "metron-platform/metron-parsers/src/test/java/org/apache/metron/parsers/bolt/ParserBoltTest.java",
                "blob_url": "https://github.com/apache/metron/blob/0670dad9f742c142341851ddf6cd8eb505e3fd40/metron-platform/metron-parsers/src/test/java/org/apache/metron/parsers/bolt/ParserBoltTest.java",
                "raw_url": "https://github.com/apache/metron/raw/0670dad9f742c142341851ddf6cd8eb505e3fd40/metron-platform/metron-parsers/src/test/java/org/apache/metron/parsers/bolt/ParserBoltTest.java",
                "status": "modified",
                "changes": 36,
                "additions": 36,
                "contents_url": "https://api.github.com/repos/apache/metron/contents/metron-platform/metron-parsers/src/test/java/org/apache/metron/parsers/bolt/ParserBoltTest.java?ref=0670dad9f742c142341851ddf6cd8eb505e3fd40",
                "patch": "@@ -81,6 +81,42 @@\n   @Mock\n   private Tuple t5;\n \n+  @Test\n+  public void testEmpty() throws Exception {\n+    String sensorType = \"yaf\";\n+    ParserBolt parserBolt = new ParserBolt(\"zookeeperUrl\", sensorType, parser, writer) {\n+      @Override\n+      protected ParserConfigurations defaultConfigurations() {\n+        return new ParserConfigurations() {\n+          @Override\n+          public SensorParserConfig getSensorParserConfig(String sensorType) {\n+            return new SensorParserConfig() {\n+              @Override\n+              public Map<String, Object> getParserConfig() {\n+                return new HashMap<String, Object>() {{\n+                }};\n+              }\n+            };\n+          }\n+        };\n+      }\n+\n+    };\n+    parserBolt.setCuratorFramework(client);\n+    parserBolt.setTreeCache(cache);\n+    parserBolt.prepare(new HashMap(), topologyContext, outputCollector);\n+    verify(parser, times(1)).init();\n+    verify(writer, times(1)).init();\n+    byte[] sampleBinary = \"some binary message\".getBytes();\n+\n+    when(tuple.getBinary(0)).thenReturn(sampleBinary);\n+    when(parser.parseOptional(sampleBinary)).thenReturn(null);\n+    parserBolt.execute(tuple);\n+    verify(parser, times(0)).validate(any());\n+    verify(writer, times(0)).write(eq(sensorType), any(ParserWriterConfiguration.class), eq(tuple), any());\n+    verify(outputCollector, times(1)).ack(tuple);\n+  }\n+\n   @Test\n   public void test() throws Exception {\n     String sensorType = \"yaf\";",
                "deletions": 0
            }
        ],
        "patched_files": [
            "MessageParser.java",
            "ParserBolt.java"
        ],
        "unit_tests": [
            "ParserBoltTest.java",
            "MessageParserTest.java"
        ]
    },
    "metron_cc30c0e": {
        "repo": "metron",
        "message": "METRON-1996 Solr search throws NPE for group search if the group parameter is null or empty (MohanDV via nickwallen) closes apache/metron#1333",
        "commit": "https://github.com/apache/metron/commit/cc30c0e21656fa95b488adb47a3c9fcec94af67a",
        "parent": "https://github.com/apache/metron/commit/792e7962f32b8154cd501edb65fa3fb5819758dc",
        "bug_id": "metron_cc30c0e",
        "file": [
            {
                "sha": "134d28c3c76b67614866d687e97fae49a8407187",
                "filename": "metron-platform/metron-solr/src/main/java/org/apache/metron/solr/dao/SolrSearchDao.java",
                "blob_url": "https://github.com/apache/metron/blob/cc30c0e21656fa95b488adb47a3c9fcec94af67a/metron-platform/metron-solr/src/main/java/org/apache/metron/solr/dao/SolrSearchDao.java",
                "raw_url": "https://github.com/apache/metron/raw/cc30c0e21656fa95b488adb47a3c9fcec94af67a/metron-platform/metron-solr/src/main/java/org/apache/metron/solr/dao/SolrSearchDao.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/metron/contents/metron-platform/metron-solr/src/main/java/org/apache/metron/solr/dao/SolrSearchDao.java?ref=cc30c0e21656fa95b488adb47a3c9fcec94af67a",
                "patch": "@@ -105,6 +105,9 @@ public SearchResponse search(SearchRequest searchRequest, String fieldList)\n   @Override\n   public GroupResponse group(GroupRequest groupRequest) throws InvalidSearchException {\n     try {\n+      if (groupRequest.getGroups() == null || groupRequest.getGroups().size() == 0) {\n+        throw new InvalidSearchException(\"At least 1 group must be provided.\");\n+      }\n       String groupNames = groupRequest.getGroups().stream().map(Group::getField).collect(\n           Collectors.joining(\",\"));\n       SolrQuery query = new SolrQuery()",
                "deletions": 0
            },
            {
                "sha": "bf9458f09d7def4a021759cc373d5ecace280858",
                "filename": "metron-platform/metron-solr/src/test/java/org/apache/metron/solr/dao/SolrSearchDaoTest.java",
                "blob_url": "https://github.com/apache/metron/blob/cc30c0e21656fa95b488adb47a3c9fcec94af67a/metron-platform/metron-solr/src/test/java/org/apache/metron/solr/dao/SolrSearchDaoTest.java",
                "raw_url": "https://github.com/apache/metron/raw/cc30c0e21656fa95b488adb47a3c9fcec94af67a/metron-platform/metron-solr/src/test/java/org/apache/metron/solr/dao/SolrSearchDaoTest.java",
                "status": "modified",
                "changes": 36,
                "additions": 36,
                "contents_url": "https://api.github.com/repos/apache/metron/contents/metron-platform/metron-solr/src/test/java/org/apache/metron/solr/dao/SolrSearchDaoTest.java?ref=cc30c0e21656fa95b488adb47a3c9fcec94af67a",
                "patch": "@@ -135,6 +135,42 @@ public void searchShouldThrowInvalidSearchExceptionOnEmptyClient() throws Except\n     new SolrSearchDao(null, accessConfig).search(searchRequest);\n   }\n \n+  @Test\n+  public void searchShouldThrowInvalidSearchExceptionOnNullGroup() throws Exception {\n+    exception.expect(InvalidSearchException.class);\n+    exception.expectMessage(\"At least 1 group must be provided.\");\n+\n+    GroupRequest groupRequest = mock(GroupRequest.class);\n+    GroupResponse groupResponse = mock(GroupResponse.class);\n+\n+    solrSearchDao = spy(new SolrSearchDao(client, accessConfig));\n+    when(groupRequest.getQuery()).thenReturn(\"query\");\n+    when(groupRequest.getGroups()).thenReturn(null);\n+    when(groupRequest.getScoreField()).thenReturn(Optional.of(\"scoreField\"));\n+    when(groupRequest.getIndices()).thenReturn(Arrays.asList(\"bro\", \"snort\"));\n+\n+    assertEquals(groupResponse, solrSearchDao.group(groupRequest));\n+    verifyNoMoreInteractions(client);\n+  }\n+\n+  @Test\n+  public void searchShouldThrowInvalidSearchExceptionOnEmptyGroup() throws Exception {\n+    exception.expect(InvalidSearchException.class);\n+    exception.expectMessage(\"At least 1 group must be provided.\");\n+\n+    GroupRequest groupRequest = mock(GroupRequest.class);\n+    GroupResponse groupResponse = mock(GroupResponse.class);\n+\n+    solrSearchDao = spy(new SolrSearchDao(client, accessConfig));\n+    when(groupRequest.getQuery()).thenReturn(\"query\");\n+    when(groupRequest.getGroups()).thenReturn(Collections.EMPTY_LIST);\n+    when(groupRequest.getScoreField()).thenReturn(Optional.of(\"scoreField\"));\n+    when(groupRequest.getIndices()).thenReturn(Arrays.asList(\"bro\", \"snort\"));\n+\n+    assertEquals(groupResponse, solrSearchDao.group(groupRequest));\n+    verifyNoMoreInteractions(client);\n+  }\n+\n   @Test\n   public void searchShouldThrowSearchResultSizeException() throws Exception {\n     exception.expect(InvalidSearchException.class);",
                "deletions": 0
            }
        ],
        "patched_files": [
            "SolrSearchDao.java"
        ],
        "unit_tests": [
            "SolrSearchDaoTest.java"
        ]
    },
    "metron_1686db7": {
        "repo": "metron",
        "message": "METRON-228: Fixing NPE when enrichment config does not exist. This closes apache/incubator-metron#152",
        "commit": "https://github.com/apache/metron/commit/1686db742f5e0601600fab2338cd391d8ba2c81f",
        "parent": "https://github.com/apache/metron/commit/5c11770c60d9f14ac2bc9ecbea4b95f5716142aa",
        "bug_id": "metron_1686db7",
        "file": [
            {
                "sha": "7d65eec2b7cb3cb28e57b7565146f5847d73b8b6",
                "filename": "metron-platform/metron-common/src/main/java/org/apache/metron/common/configuration/writer/EnrichmentWriterConfiguration.java",
                "blob_url": "https://github.com/apache/metron/blob/1686db742f5e0601600fab2338cd391d8ba2c81f/metron-platform/metron-common/src/main/java/org/apache/metron/common/configuration/writer/EnrichmentWriterConfiguration.java",
                "raw_url": "https://github.com/apache/metron/raw/1686db742f5e0601600fab2338cd391d8ba2c81f/metron-platform/metron-common/src/main/java/org/apache/metron/common/configuration/writer/EnrichmentWriterConfiguration.java",
                "status": "modified",
                "changes": 20,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/metron/contents/metron-platform/metron-common/src/main/java/org/apache/metron/common/configuration/writer/EnrichmentWriterConfiguration.java?ref=1686db742f5e0601600fab2338cd391d8ba2c81f",
                "patch": "@@ -31,20 +31,32 @@ public EnrichmentWriterConfiguration(EnrichmentConfigurations config) {\n \n   @Override\n   public int getBatchSize(String sensorName) {\n-    return config.getSensorEnrichmentConfig(sensorName).getBatchSize();\n+    if(config != null && config.getSensorEnrichmentConfig(sensorName) != null) {\n+      return config.getSensorEnrichmentConfig(sensorName).getBatchSize();\n+    }\n+    return 1;\n   }\n \n   @Override\n   public String getIndex(String sensorName) {\n-    return config.getSensorEnrichmentConfig(sensorName).getIndex();\n+    if(config != null && config.getSensorEnrichmentConfig(sensorName) != null) {\n+      return config.getSensorEnrichmentConfig(sensorName).getIndex();\n+    }\n+    return sensorName;\n   }\n \n   @Override\n   public Map<String, Object> getSensorConfig(String sensorName) {\n-    return config.getSensorEnrichmentConfig(sensorName).getConfiguration();\n+    if(config != null && config.getSensorEnrichmentConfig(sensorName) != null) {\n+      return config.getSensorEnrichmentConfig(sensorName).getConfiguration();\n+    }\n+    return null;\n   }\n   @Override\n   public Map<String, Object> getGlobalConfig() {\n-    return config.getGlobalConfig();\n+    if(config != null) {\n+      return config.getGlobalConfig();\n+    }\n+    return null;\n   }\n }",
                "deletions": 4
            },
            {
                "sha": "b998ac10b99e86dbef3c10fc37cb4969d439bd36",
                "filename": "metron-platform/metron-common/src/main/java/org/apache/metron/common/configuration/writer/ParserWriterConfiguration.java",
                "blob_url": "https://github.com/apache/metron/blob/1686db742f5e0601600fab2338cd391d8ba2c81f/metron-platform/metron-common/src/main/java/org/apache/metron/common/configuration/writer/ParserWriterConfiguration.java",
                "raw_url": "https://github.com/apache/metron/raw/1686db742f5e0601600fab2338cd391d8ba2c81f/metron-platform/metron-common/src/main/java/org/apache/metron/common/configuration/writer/ParserWriterConfiguration.java",
                "status": "modified",
                "changes": 22,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/metron/contents/metron-platform/metron-common/src/main/java/org/apache/metron/common/configuration/writer/ParserWriterConfiguration.java?ref=1686db742f5e0601600fab2338cd391d8ba2c81f",
                "patch": "@@ -32,14 +32,28 @@ public ParserWriterConfiguration(ParserConfigurations config) {\n   }\n   @Override\n   public int getBatchSize(String sensorName) {\n-    Object batchObj = config.getSensorParserConfig(sensorName).getParserConfig().get(BATCH_CONF);\n-    return batchObj == null?1:ConversionUtils.convert(batchObj, Integer.class);\n+    if(config != null\n+    && config.getSensorParserConfig(sensorName) != null\n+    && config.getSensorParserConfig(sensorName).getParserConfig() != null\n+      ) {\n+      Object batchObj = config.getSensorParserConfig(sensorName).getParserConfig().get(BATCH_CONF);\n+      return batchObj == null ? 1 : ConversionUtils.convert(batchObj, Integer.class);\n+    }\n+    return 1;\n   }\n \n   @Override\n   public String getIndex(String sensorName) {\n-    Object indexObj = config.getSensorParserConfig(sensorName).getParserConfig().get(INDEX_CONF);\n-    return indexObj.toString();\n+    if(config != null && config.getSensorParserConfig(sensorName) != null\n+    && config.getSensorParserConfig(sensorName).getParserConfig() != null\n+      ) {\n+      Object indexObj = config.getSensorParserConfig(sensorName).getParserConfig().get(INDEX_CONF);\n+      if(indexObj != null) {\n+        return indexObj.toString();\n+      }\n+      return null;\n+    }\n+    return sensorName;\n   }\n \n   @Override",
                "deletions": 4
            },
            {
                "sha": "a0a59c1f8f25c777fd27bf88f6b6b90fe270c18f",
                "filename": "metron-platform/metron-common/src/test/java/org/apache/metron/common/writer/EnrichmentWriterConfigurationTest.java",
                "blob_url": "https://github.com/apache/metron/blob/1686db742f5e0601600fab2338cd391d8ba2c81f/metron-platform/metron-common/src/test/java/org/apache/metron/common/writer/EnrichmentWriterConfigurationTest.java",
                "raw_url": "https://github.com/apache/metron/raw/1686db742f5e0601600fab2338cd391d8ba2c81f/metron-platform/metron-common/src/test/java/org/apache/metron/common/writer/EnrichmentWriterConfigurationTest.java",
                "status": "added",
                "changes": 41,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/metron/contents/metron-platform/metron-common/src/test/java/org/apache/metron/common/writer/EnrichmentWriterConfigurationTest.java?ref=1686db742f5e0601600fab2338cd391d8ba2c81f",
                "patch": "@@ -0,0 +1,41 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.metron.common.writer;\n+\n+import org.apache.metron.common.configuration.EnrichmentConfigurations;\n+import org.apache.metron.common.configuration.writer.EnrichmentWriterConfiguration;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class EnrichmentWriterConfigurationTest {\n+  @Test\n+  public void testDefaultBatchSize() {\n+    EnrichmentWriterConfiguration config = new EnrichmentWriterConfiguration(\n+           new EnrichmentConfigurations()\n+    );\n+    Assert.assertEquals(1, config.getBatchSize(\"foo\"));\n+  }\n+  @Test\n+  public void testDefaultIndex() {\n+    EnrichmentWriterConfiguration config = new EnrichmentWriterConfiguration(\n+           new EnrichmentConfigurations()\n+    );\n+    Assert.assertEquals(\"foo\", config.getIndex(\"foo\"));\n+  }\n+}",
                "deletions": 0
            },
            {
                "sha": "e960e47afe1b71acd10ab78c33b003c3557ff0af",
                "filename": "metron-platform/metron-common/src/test/java/org/apache/metron/common/writer/ParserWriterConfigurationTest.java",
                "blob_url": "https://github.com/apache/metron/blob/1686db742f5e0601600fab2338cd391d8ba2c81f/metron-platform/metron-common/src/test/java/org/apache/metron/common/writer/ParserWriterConfigurationTest.java",
                "raw_url": "https://github.com/apache/metron/raw/1686db742f5e0601600fab2338cd391d8ba2c81f/metron-platform/metron-common/src/test/java/org/apache/metron/common/writer/ParserWriterConfigurationTest.java",
                "status": "added",
                "changes": 38,
                "additions": 38,
                "contents_url": "https://api.github.com/repos/apache/metron/contents/metron-platform/metron-common/src/test/java/org/apache/metron/common/writer/ParserWriterConfigurationTest.java?ref=1686db742f5e0601600fab2338cd391d8ba2c81f",
                "patch": "@@ -0,0 +1,38 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.metron.common.writer;\n+\n+import org.apache.metron.common.configuration.ParserConfigurations;\n+import org.apache.metron.common.configuration.writer.ParserWriterConfiguration;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class ParserWriterConfigurationTest {\n+  @Test\n+  public void testDefaultBatchSize() {\n+    ParserWriterConfiguration config = new ParserWriterConfiguration( new ParserConfigurations() );\n+    Assert.assertEquals(1, config.getBatchSize(\"foo\"));\n+  }\n+\n+  @Test\n+  public void testDefaultIndex() {\n+    ParserWriterConfiguration config = new ParserWriterConfiguration( new ParserConfigurations() );\n+    Assert.assertEquals(\"foo\", config.getIndex(\"foo\"));\n+  }\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ParserWriterConfiguration.java",
            "EnrichmentWriterConfiguration.java"
        ],
        "unit_tests": [
            "ParserWriterConfigurationTest.java",
            "EnrichmentWriterConfigurationTest.java"
        ]
    },
    "metron_8a926dd": {
        "repo": "metron",
        "message": "METRON-1735 Empty print status option causes NPE (merrimanr) closes apache/metron#1160",
        "commit": "https://github.com/apache/metron/commit/8a926dd5a4501df8c7ef51b526ad5e4d752a5e19",
        "parent": "https://github.com/apache/metron/commit/bce9b903fbd3436ea0c41eb8d75da279e16ce922",
        "bug_id": "metron_8a926dd",
        "file": [
            {
                "sha": "b9a2a508e0cac3a1ae6d86da9f2bdc7d4c93b6fa",
                "filename": "metron-platform/metron-pcap-backend/src/main/java/org/apache/metron/pcap/query/CliParser.java",
                "blob_url": "https://github.com/apache/metron/blob/8a926dd5a4501df8c7ef51b526ad5e4d752a5e19/metron-platform/metron-pcap-backend/src/main/java/org/apache/metron/pcap/query/CliParser.java",
                "raw_url": "https://github.com/apache/metron/raw/8a926dd5a4501df8c7ef51b526ad5e4d752a5e19/metron-platform/metron-pcap-backend/src/main/java/org/apache/metron/pcap/query/CliParser.java",
                "status": "modified",
                "changes": 4,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/metron/contents/metron-platform/metron-pcap-backend/src/main/java/org/apache/metron/pcap/query/CliParser.java?ref=8a926dd5a4501df8c7ef51b526ad5e4d752a5e19",
                "patch": "@@ -55,7 +55,6 @@ public Options buildOptions() {\n     options.addOption(newOption(\"rpf\", \"records_per_file\", true, String.format(\"Number of records to include in each output pcap file (defaults to %s)\", NUM_RECORDS_PER_FILE_DEFAULT)));\n     options.addOption(newOption(\"et\", \"end_time\", true, \"Packet end time range. Default is current system time.\"));\n     options.addOption(newOption(\"df\", \"date_format\", true, \"Date format to use for parsing start_time and end_time. Default is to use time in millis since the epoch.\"));\n-    options.addOption(newOption(\"ps\", \"print_status\", false, \"Print the status of the job as it runs\"));\n     options.addOption(newOption(\"yq\", \"yarn_queue\", true, \"Yarn queue this job will be submitted to\"));\n     return options;\n   }\n@@ -127,9 +126,6 @@ public void parse(CommandLine commandLine, PcapConfig config) throws java.text.P\n         //no-op\n       }\n     }\n-    if (commandLine.hasOption(\"print_status\")) {\n-      config.setPrintJobStatus(true);\n-    }\n     if (commandLine.hasOption(\"yarn_queue\")) {\n       config.setYarnQueue(commandLine.getOptionValue(\"yarn_queue\"));\n     }",
                "deletions": 4
            },
            {
                "sha": "3e7aad23b3b253420755588ef452fb7885c509f7",
                "filename": "metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java",
                "blob_url": "https://github.com/apache/metron/blob/8a926dd5a4501df8c7ef51b526ad5e4d752a5e19/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java",
                "raw_url": "https://github.com/apache/metron/raw/8a926dd5a4501df8c7ef51b526ad5e4d752a5e19/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java",
                "status": "modified",
                "changes": 7,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/metron/contents/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java?ref=8a926dd5a4501df8c7ef51b526ad5e4d752a5e19",
                "patch": "@@ -172,8 +172,7 @@ public void runs_fixed_pcap_filter_job_with_full_argument_list_and_default_datef\n             \"-protocol\", \"6\",\n             \"-include_reverse\",\n             \"-num_reducers\", \"10\",\n-            \"-records_per_file\", \"1000\",\n-            \"-ps\"\n+            \"-records_per_file\", \"1000\"\n     };\n     Map<String, String> query = new HashMap<String, String>() {{\n       put(Constants.Fields.SRC_ADDR.getName(), \"192.168.1.1\");\n@@ -217,7 +216,6 @@ public void runs_fixed_pcap_filter_job_with_full_argument_list() throws Exceptio\n             \"-include_reverse\",\n             \"-num_reducers\", \"10\",\n             \"-records_per_file\", \"1000\",\n-            \"-ps\",\n             \"-yq\", \"pcap\"\n     };\n     Map<String, String> query = new HashMap<String, String>() {{\n@@ -295,8 +293,7 @@ public void runs_query_pcap_filter_job_with_full_argument_list() throws Exceptio\n             \"-base_path\", \"/base/path\",\n             \"-base_output_path\", \"/base/output/path\",\n             \"-query\", \"some query string\",\n-            \"-records_per_file\", \"1000\",\n-            \"-ps\"\n+            \"-records_per_file\", \"1000\"\n     };\n \n     String query = \"some query string\";",
                "deletions": 5
            },
            {
                "sha": "abf35d0d815371b776a06d8b24393ba2c666f317",
                "filename": "metron-platform/metron-pcap/src/main/java/org/apache/metron/pcap/config/PcapConfig.java",
                "blob_url": "https://github.com/apache/metron/blob/8a926dd5a4501df8c7ef51b526ad5e4d752a5e19/metron-platform/metron-pcap/src/main/java/org/apache/metron/pcap/config/PcapConfig.java",
                "raw_url": "https://github.com/apache/metron/raw/8a926dd5a4501df8c7ef51b526ad5e4d752a5e19/metron-platform/metron-pcap/src/main/java/org/apache/metron/pcap/config/PcapConfig.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/metron/contents/metron-platform/metron-pcap/src/main/java/org/apache/metron/pcap/config/PcapConfig.java?ref=8a926dd5a4501df8c7ef51b526ad5e4d752a5e19",
                "patch": "@@ -42,7 +42,7 @@ public PcapConfig() {\n   public PcapConfig(PrefixStrategy prefixStrategy) {\n     this();\n     setShowHelp(false);\n-    setPrintJobStatus(false);\n+    setPrintJobStatus(true);\n     setBasePath(\"\");\n     setBaseInterimResultPath(\"\");\n     setStartTimeMs(-1L);",
                "deletions": 1
            },
            {
                "sha": "bf780afbeb372402c50e8a4284e737ab2f854d6a",
                "filename": "metron-platform/metron-pcap/src/main/java/org/apache/metron/pcap/mr/PcapJob.java",
                "blob_url": "https://github.com/apache/metron/blob/8a926dd5a4501df8c7ef51b526ad5e4d752a5e19/metron-platform/metron-pcap/src/main/java/org/apache/metron/pcap/mr/PcapJob.java",
                "raw_url": "https://github.com/apache/metron/raw/8a926dd5a4501df8c7ef51b526ad5e4d752a5e19/metron-platform/metron-pcap/src/main/java/org/apache/metron/pcap/mr/PcapJob.java",
                "status": "modified",
                "changes": 18,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/metron/contents/metron-platform/metron-pcap/src/main/java/org/apache/metron/pcap/mr/PcapJob.java?ref=8a926dd5a4501df8c7ef51b526ad5e4d752a5e19",
                "patch": "@@ -463,12 +463,20 @@ public synchronized JobStatus getStatus() throws JobException {\n     return new JobStatus(jobStatus);\n   }\n \n+  protected void setJobStatus(JobStatus jobStatus) {\n+    this.jobStatus = jobStatus;\n+  }\n+\n+  protected void setMrJob(Job mrJob) {\n+    this.mrJob = mrJob;\n+  }\n+\n   /**\n    * Synchronous call blocks until completion.\n    */\n   @Override\n   public Pageable<Path> get() throws JobException, InterruptedException {\n-    if (PcapOptions.PRINT_JOB_STATUS.get(configuration, Boolean.class)) {\n+    if (PcapOptions.PRINT_JOB_STATUS.getOrDefault(configuration, Boolean.class, false) && mrJob != null) {\n       try {\n         mrJob.monitorAndPrintJob();\n       } catch (IOException e) {\n@@ -486,10 +494,6 @@ public synchronized JobStatus getStatus() throws JobException {\n     }\n   }\n \n-  public void monitorJob() throws IOException, InterruptedException {\n-    mrJob.monitorAndPrintJob();\n-  }\n-\n   private synchronized Pageable<Path> getFinalResults() {\n     return new PcapPages(finalResults);\n   }\n@@ -521,4 +525,8 @@ public boolean validate(Map<String, Object> configuration) {\n   public Map<String, Object> getConfiguration() {\n     return new HashMap<>(this.configuration);\n   }\n+\n+  protected void setConfiguration(Map<String, Object> configuration) {\n+    this.configuration = configuration;\n+  }\n }",
                "deletions": 5
            },
            {
                "sha": "d5ef2dc61ba177e4979a0906e36500b0cf88c374",
                "filename": "metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/mr/PcapJobTest.java",
                "blob_url": "https://github.com/apache/metron/blob/8a926dd5a4501df8c7ef51b526ad5e4d752a5e19/metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/mr/PcapJobTest.java",
                "raw_url": "https://github.com/apache/metron/raw/8a926dd5a4501df8c7ef51b526ad5e4d752a5e19/metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/mr/PcapJobTest.java",
                "status": "modified",
                "changes": 19,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/metron/contents/metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/mr/PcapJobTest.java?ref=8a926dd5a4501df8c7ef51b526ad5e4d752a5e19",
                "patch": "@@ -21,6 +21,9 @@\n import static java.lang.Long.toUnsignedString;\n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n import static org.mockito.Mockito.when;\n \n import java.io.IOException;\n@@ -287,4 +290,20 @@ public void handles_null_values_with_defaults() throws Exception {\n     Assert.assertThat(status.getJobId(), equalTo(jobIdVal));\n   }\n \n+  @Test\n+  public void get_should_print_status() throws Exception {\n+    Map<String, Object> configuration = new HashMap<>();\n+    testJob.setConfiguration(configuration);\n+    testJob.setMrJob(mrJob);\n+    testJob.setJobStatus(new JobStatus().withState(State.SUCCEEDED));\n+\n+    testJob.get();\n+    verify(mrJob, times(0)).monitorAndPrintJob();\n+\n+    PcapOptions.PRINT_JOB_STATUS.put(configuration, true);\n+    testJob.get();\n+    verify(mrJob, times(1)).monitorAndPrintJob();\n+    verifyNoMoreInteractions(mrJob);\n+  }\n+\n }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "PcapConfig.java",
            "PcapJob.java",
            "CliParser.java",
            "PcapCli.java"
        ],
        "unit_tests": [
            "PcapJobTest.java",
            "PcapCliTest.java"
        ]
    }
}