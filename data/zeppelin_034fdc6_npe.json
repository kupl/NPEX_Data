[
    {
        "repo": "zeppelin",
        "commit": "https://github.com/apache/zeppelin/commit/034fdc6735e075c89f727bb6bc6fddbc89b639c4",
        "bug_id": "zeppelin_034fdc6",
        "message": "[ZEPPELIN-1917] Improve python.conda interpreter\n\n### What is this PR for?\n\nAdd missing commands to the `python.conda` interpreter\n\n- `conda info`\n- `conda list`\n- `conda create`\n- `conda install`\n- `conda uninstall (alias of remove)`\n- `conda env *`\n\n#### Implementation Detail\n\nThe reason I modified `PythonProcess` is due to NPE\n\n```java\n// https://github.com/apache/zeppelin/blob/master/python/src/main/java/org/apache/zeppelin/python/PythonProcess.java#L107-L118\n\n  public String sendAndGetResult(String cmd) throws IOException {\n    writer.println(cmd);\n    writer.println();\n    writer.println(\"\\\"\" + STATEMENT_END + \"\\\"\");\n    StringBuilder output = new StringBuilder();\n    String line = null;\n\n    // NPE when line is null\n    while (!(line = reader.readLine()).contains(STATEMENT_END)) {\n      logger.debug(\"Read line from python shell : \" + line);\n      output.append(line + \"\\n\");\n    }\n    return output.toString();\n  }\n```\n\n```\njava.lang.NullPointerException\nat org.apache.zeppelin.python.PythonProcess.sendAndGetResult(PythonProcess.java:113)\nat org.apache.zeppelin.python.PythonInterpreter.sendCommandToPython(PythonInterpreter.java:250)\nat org.apache.zeppelin.python.PythonInterpreter.bootStrapInterpreter(PythonInterpreter.java:272)\nat org.apache.zeppelin.python.PythonInterpreter.open(PythonInterpreter.java:100)\nat org.apache.zeppelin.python.PythonCondaInterpreter.restartPythonProcess(PythonCondaInterpreter.java:139)\nat org.apache.zeppelin.python.PythonCondaInterpreter.interpret(PythonCondaInterpreter.java:88)\nat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:94)\nat org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:494)\nat org.apache.zeppelin.scheduler.Job.run(Job.java:175)\nat org.apache.zeppelin.scheduler.FIFOScheduler$1.run(FIFOScheduler.java:139)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\nat java.util.concurrent.FutureTask.run(FutureTask.java:262)\nat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)\nat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\nat java.lang.Thread.run(Thread.java:745)\n```\n\n### What type of PR is it?\n[Improvement | Refactoring]\n\n### Todos\n* [x] - info\n* [x] - list\n* [x] - create\n* [x] - install\n* [x] - uninstall (= remove)\n* [x] - env *\n\n### What is the Jira issue?\n\n[ZEPPELIN-1917](https://issues.apache.org/jira/browse/ZEPPELIN-1917)\n\n### How should this be tested?\n\n1. Install [miniconda](http://conda.pydata.org/miniconda.html)\n2. Make sure that your python interpreter can use `conda` (check the Interpreter Binding page)\n3. Remove `test` conda env since we will create in the following section\n\n```sh\n$ conda env remove --yes --name test\n```\n\n4. Run these commands with `%python.conda`\n\n```\n%python.conda info\n%python.conda env list\n%python.conda create --name test\n\n# you should be able to see `test` in the list\n%python.conda env list\n%python.conda activate pymysql\n%python.conda install pymysql\n\n# you should be able to import\n%python\nimport pymysql.cursors\n\n%python.conda uninstall pymysql\n%python.conda deactivate pymysql\n\n# you should be able to see `No module named pymysql.cursor` since we deactivated\n%python\nimport pymysql.cursors\n```\n\n### Screenshots (if appropriate)\n\n![conda-screenshot](https://cloud.githubusercontent.com/assets/4968473/21747565/98c0e366-d5ad-11e6-8000-e293996089fa.gif)\n\n### Questions:\n* Does the licenses files need update? - NO\n* Is there breaking changes for older versions? - NO\n* Does this needs documentation? - NO\n\nAuthor: 1ambda <1amb4a@gmail.com>\n\nCloses #1868 from 1ambda/ZEPPELIN-1917/improve-conda-interpreter and squashes the following commits:\n\n3ba171a [1ambda] fix: Wrap output style\n292ed6d [1ambda] refactor: Throw exception in runCommand\n2d4aa7d [1ambda] test: Add some tests\n49a4a11 [1ambda] feat: Supports other env commands\n6eb7e92 [1ambda] fix: NPE in PythonProcess\n9c5dd86 [1ambda] refactor: Activate, Deactivate\nf955889 [1ambda] fix: minor\n935cb89 [1ambda] refactor: Abstract commands\nb1c4c9f [1ambda] feat: Add conda remove (uninstall)\ne539c42 [1ambda] feat: Add conda install\n4f58fa2 [1ambda] feat: Add conda create\n7da132d [1ambda] docs: Add missing conda list description\n929ca8a [1ambda] feat: Make conda output beautiful\n0c6ebb4 [1ambda] feat: Add list conda command\n017c76f [1ambda] refactor: Import InterpreterResult.{Code, Type} to short codes\nb8a5154 [1ambda] refactor: Simplify exception flow so private funcs don't need care exceptions\n64d4bef [1ambda] style: Rename some funcs\nafc456d [1ambda] refactor: Add private to member vars\nf36fc74 [1ambda] feat: Add info command\n2eb9bf5 [1ambda] style: Remove useless newlines\nbd2564e [1ambda] refactor: PythonCondaInterpreter.interpret\nf0d69bc [1ambda] fix: Use specific command for env list in conda",
        "parent": "https://github.com/apache/zeppelin/commit/2b0e2a41cb7e0d7fc160d5c9193413ffe4d94f68",
        "patched_files": [
            "PythonCondaInterpreter.java",
            "conda_usage.html",
            "PythonProcess.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 238,
                "raw_url": "https://github.com/apache/zeppelin/raw/034fdc6735e075c89f727bb6bc6fddbc89b639c4/python/src/main/java/org/apache/zeppelin/python/PythonCondaInterpreter.java",
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/python/src/main/java/org/apache/zeppelin/python/PythonCondaInterpreter.java?ref=034fdc6735e075c89f727bb6bc6fddbc89b639c4",
                "filename": "python/src/main/java/org/apache/zeppelin/python/PythonCondaInterpreter.java",
                "deletions": 81,
                "sha": "455d786695742a242d36378441e6ee139c3f127b",
                "blob_url": "https://github.com/apache/zeppelin/blob/034fdc6735e075c89f727bb6bc6fddbc89b639c4/python/src/main/java/org/apache/zeppelin/python/PythonCondaInterpreter.java",
                "patch": "@@ -16,14 +16,16 @@\n */\n package org.apache.zeppelin.python;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.zeppelin.interpreter.*;\n+import org.apache.zeppelin.interpreter.InterpreterResult.Code;\n+import org.apache.zeppelin.interpreter.InterpreterResult.Type;\n import org.apache.zeppelin.scheduler.Scheduler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.io.*;\n-import java.util.HashMap;\n-import java.util.Properties;\n+import java.util.*;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n@@ -36,11 +38,17 @@\n   public static final String CONDA_PYTHON_PATH = \"/bin/python\";\n   public static final String DEFAULT_ZEPPELIN_PYTHON = \"python\";\n \n-  Pattern condaEnvListPattern = Pattern.compile(\"([^\\\\s]*)[\\\\s*]*\\\\s(.*)\");\n-  Pattern listPattern = Pattern.compile(\"env\\\\s*list\\\\s?\");\n-  Pattern activatePattern = Pattern.compile(\"activate\\\\s*(.*)\");\n-  Pattern deactivatePattern = Pattern.compile(\"deactivate\");\n-  Pattern helpPattern = Pattern.compile(\"help\");\n+  public static final Pattern PATTERN_OUTPUT_ENV_LIST = Pattern.compile(\"([^\\\\s]*)[\\\\s*]*\\\\s(.*)\");\n+  public static final Pattern PATTERN_COMMAND_ENV_LIST = Pattern.compile(\"env\\\\s*list\\\\s?\");\n+  public static final Pattern PATTERN_COMMAND_ENV = Pattern.compile(\"env\\\\s*(.*)\");\n+  public static final Pattern PATTERN_COMMAND_LIST = Pattern.compile(\"list\");\n+  public static final Pattern PATTERN_COMMAND_CREATE = Pattern.compile(\"create\\\\s*(.*)\");\n+  public static final Pattern PATTERN_COMMAND_ACTIVATE = Pattern.compile(\"activate\\\\s*(.*)\");\n+  public static final Pattern PATTERN_COMMAND_DEACTIVATE = Pattern.compile(\"deactivate\");\n+  public static final Pattern PATTERN_COMMAND_INSTALL = Pattern.compile(\"install\\\\s*(.*)\");\n+  public static final Pattern PATTERN_COMMAND_UNINSTALL = Pattern.compile(\"uninstall\\\\s*(.*)\");\n+  public static final Pattern PATTERN_COMMAND_HELP = Pattern.compile(\"help\");\n+  public static final Pattern PATTERN_COMMAND_INFO = Pattern.compile(\"info\");\n \n   public PythonCondaInterpreter(Properties property) {\n     super(property);\n@@ -59,33 +67,53 @@ public void close() {\n   @Override\n   public InterpreterResult interpret(String st, InterpreterContext context) {\n     InterpreterOutput out = context.out;\n+    Matcher activateMatcher = PATTERN_COMMAND_ACTIVATE.matcher(st);\n+    Matcher createMatcher = PATTERN_COMMAND_CREATE.matcher(st);\n+    Matcher installMatcher = PATTERN_COMMAND_INSTALL.matcher(st);\n+    Matcher uninstallMatcher = PATTERN_COMMAND_UNINSTALL.matcher(st);\n+    Matcher envMatcher = PATTERN_COMMAND_ENV.matcher(st);\n \n-    Matcher listMatcher = listPattern.matcher(st);\n-    Matcher activateMatcher = activatePattern.matcher(st);\n-    Matcher deactivateMatcher = deactivatePattern.matcher(st);\n-    Matcher helpMatcher = helpPattern.matcher(st);\n-\n-    if (st == null || st.isEmpty() || listMatcher.matches()) {\n-      listEnv(out, getCondaEnvs());\n-      return new InterpreterResult(InterpreterResult.Code.SUCCESS);\n-    } else if (activateMatcher.matches()) {\n-      String envName = activateMatcher.group(1);\n-      changePythonEnvironment(envName);\n-      restartPythonProcess();\n-      return new InterpreterResult(InterpreterResult.Code.SUCCESS, \"\\\"\" + envName + \"\\\" activated\");\n-    } else if (deactivateMatcher.matches()) {\n-      changePythonEnvironment(null);\n-      restartPythonProcess();\n-      return new InterpreterResult(InterpreterResult.Code.SUCCESS, \"Deactivated\");\n-    } else if (helpMatcher.matches()) {\n-      printUsage(out);\n-      return new InterpreterResult(InterpreterResult.Code.SUCCESS);\n-    } else {\n-      return new InterpreterResult(InterpreterResult.Code.ERROR, \"Not supported command: \" + st);\n+    try {\n+      if (PATTERN_COMMAND_ENV_LIST.matcher(st).matches()) {\n+        String result = runCondaEnvList();\n+        return new InterpreterResult(Code.SUCCESS, Type.HTML, result);\n+      } else if (envMatcher.matches()) {\n+        // `envMatcher` should be used after `listEnvMatcher`\n+        String result = runCondaEnv(getRestArgsFromMatcher(envMatcher));\n+        return new InterpreterResult(Code.SUCCESS, Type.HTML, result);\n+      } else if (PATTERN_COMMAND_LIST.matcher(st).matches()) {\n+        String result = runCondaList();\n+        return new InterpreterResult(Code.SUCCESS, Type.HTML, result);\n+      } else if (createMatcher.matches()) {\n+        String result = runCondaCreate(getRestArgsFromMatcher(createMatcher));\n+        return new InterpreterResult(Code.SUCCESS, Type.HTML, result);\n+      } else if (activateMatcher.matches()) {\n+        String envName = activateMatcher.group(1).trim();\n+        return runCondaActivate(envName);\n+      } else if (PATTERN_COMMAND_DEACTIVATE.matcher(st).matches()) {\n+        return runCondaDeactivate();\n+      } else if (installMatcher.matches()) {\n+        String result = runCondaInstall(getRestArgsFromMatcher(installMatcher));\n+        return new InterpreterResult(Code.SUCCESS, Type.HTML, result);\n+      } else if (uninstallMatcher.matches()) {\n+        String result = runCondaUninstall(getRestArgsFromMatcher(uninstallMatcher));\n+        return new InterpreterResult(Code.SUCCESS, Type.HTML, result);\n+      } else if (st == null || PATTERN_COMMAND_HELP.matcher(st).matches()) {\n+        runCondaHelp(out);\n+        return new InterpreterResult(Code.SUCCESS);\n+      } else if (PATTERN_COMMAND_INFO.matcher(st).matches()) {\n+        String result = runCondaInfo();\n+        return new InterpreterResult(Code.SUCCESS, Type.HTML, result);\n+      } else {\n+        return new InterpreterResult(Code.ERROR, \"Not supported command: \" + st);\n+      }\n+    } catch (RuntimeException | IOException | InterruptedException e) {\n+      throw new InterpreterException(e);\n     }\n   }\n \n-  private void changePythonEnvironment(String envName) {\n+  private void changePythonEnvironment(String envName)\n+      throws IOException, InterruptedException {\n     PythonInterpreter python = getPythonInterpreter();\n     String binPath = null;\n     if (envName == null) {\n@@ -94,7 +122,7 @@ private void changePythonEnvironment(String envName) {\n         binPath = DEFAULT_ZEPPELIN_PYTHON;\n       }\n     } else {\n-      HashMap<String, String> envList = getCondaEnvs();\n+      Map<String, String> envList = getCondaEnvs();\n       for (String name : envList.keySet()) {\n         if (envName.equals(name)) {\n           binPath = envList.get(name) + CONDA_PYTHON_PATH;\n@@ -114,7 +142,8 @@ private void restartPythonProcess() {\n   protected PythonInterpreter getPythonInterpreter() {\n     LazyOpenInterpreter lazy = null;\n     PythonInterpreter python = null;\n-    Interpreter p = getInterpreterInTheSameSessionByClassName(PythonInterpreter.class.getName());\n+    Interpreter p =\n+        getInterpreterInTheSameSessionByClassName(PythonInterpreter.class.getName());\n \n     while (p instanceof WrappedInterpreter) {\n       if (p instanceof LazyOpenInterpreter) {\n@@ -130,59 +159,75 @@ protected PythonInterpreter getPythonInterpreter() {\n     return python;\n   }\n \n-  private HashMap getCondaEnvs() {\n-    HashMap envList = null;\n+  public static String runCondaCommandForTextOutput(String title, List<String> commands)\n+      throws IOException, InterruptedException {\n \n-    StringBuilder sb = createStringBuilder();\n-    try {\n-      int exit = runCommand(sb, \"conda\", \"env\", \"list\");\n-      if (exit == 0) {\n-        envList = new HashMap();\n-        String[] lines = sb.toString().split(\"\\n\");\n-        for (String s : lines) {\n-          if (s == null || s.isEmpty() || s.startsWith(\"#\")) {\n-            continue;\n-          }\n-          Matcher match = condaEnvListPattern.matcher(s);\n-\n-          if (!match.matches()) {\n-            continue;\n-          }\n-          envList.put(match.group(1), match.group(2));\n-        }\n-      }\n-    } catch (IOException | InterruptedException e) {\n-      throw new InterpreterException(e);\n-    }\n+    String result = runCommand(commands);\n+    return wrapCondaBasicOutputStyle(title, result);\n+  }\n+\n+  private String runCondaCommandForTableOutput(String title, List<String> commands)\n+      throws IOException, InterruptedException {\n+\n+    StringBuilder sb = new StringBuilder();\n+    String result = runCommand(commands);\n+\n+    // use table output for pretty output\n+    Map<String, String> envPerName = parseCondaCommonStdout(result);\n+    return wrapCondaTableOutputStyle(title, envPerName);\n+  }\n+\n+  protected Map<String, String> getCondaEnvs()\n+      throws IOException, InterruptedException {\n+    String result = runCommand(\"conda\", \"env\", \"list\");\n+    Map<String, String> envList = parseCondaCommonStdout(result);\n     return envList;\n   }\n \n-  private void listEnv(InterpreterOutput out, HashMap<String, String> envList) {\n-    try {\n-      out.setType(InterpreterResult.Type.HTML);\n-      out.write(\"<h4>Conda environments</h4>\\n\");\n-      // start table\n-      out.write(\"<div style=\\\"display:table\\\">\\n\");\n+  private String runCondaEnvList() throws IOException, InterruptedException {\n+    return wrapCondaTableOutputStyle(\"Environment List\", getCondaEnvs());\n+  }\n \n-      for (String name : envList.keySet()) {\n-        String path = envList.get(name);\n+  private String runCondaEnv(List<String> restArgs)\n+      throws IOException, InterruptedException {\n \n-        out.write(String.format(\"<div style=\\\"display:table-row\\\">\" +\n-            \"<div style=\\\"display:table-cell;width:150px\\\">%s</div>\" +\n-            \"<div style=\\\"display:table-cell;\\\">%s</div>\" +\n-            \"</div>\\n\",\n-          name, path));\n-      }\n-      // end table\n-      out.write(\"</div><br />\\n\");\n-      out.write(\"<small><code>%python.conda help</code> for the usage</small>\\n\");\n-    } catch  (IOException e) {\n-      throw new InterpreterException(e);\n+    restArgs.add(0, \"conda\");\n+    restArgs.add(1, \"env\");\n+    restArgs.add(3, \"--yes\"); // --yes should be inserted after command\n+\n+    return runCondaCommandForTextOutput(null, restArgs);\n+  }\n+\n+  private InterpreterResult runCondaActivate(String envName)\n+      throws IOException, InterruptedException {\n+\n+    if (null == envName || envName.isEmpty()) {\n+      return new InterpreterResult(Code.ERROR, \"Env name should be specified\");\n     }\n+\n+    changePythonEnvironment(envName);\n+    restartPythonProcess();\n+\n+    return new InterpreterResult(Code.SUCCESS, \"'\" + envName + \"' is activated\");\n   }\n \n+  private InterpreterResult runCondaDeactivate()\n+      throws IOException, InterruptedException {\n \n-  private void printUsage(InterpreterOutput out) {\n+    changePythonEnvironment(null);\n+    restartPythonProcess();\n+    return new InterpreterResult(Code.SUCCESS, \"Deactivated\");\n+  }\n+\n+  private String runCondaList() throws IOException, InterruptedException {\n+    List<String> commands = new ArrayList<String>();\n+    commands.add(\"conda\");\n+    commands.add(\"list\");\n+\n+    return runCondaCommandForTableOutput(\"Installed Package List\", commands);\n+  }\n+\n+  private void runCondaHelp(InterpreterOutput out) {\n     try {\n       out.setType(InterpreterResult.Type.HTML);\n       out.writeResource(\"output_templates/conda_usage.html\");\n@@ -191,6 +236,98 @@ private void printUsage(InterpreterOutput out) {\n     }\n   }\n \n+  private String runCondaInfo() throws IOException, InterruptedException {\n+    List<String> commands = new ArrayList<String>();\n+    commands.add(\"conda\");\n+    commands.add(\"info\");\n+\n+    return runCondaCommandForTextOutput(\"Conda Information\", commands);\n+  }\n+\n+  private String runCondaCreate(List<String> restArgs)\n+      throws IOException, InterruptedException {\n+    restArgs.add(0, \"conda\");\n+    restArgs.add(1, \"create\");\n+    restArgs.add(2, \"--yes\");\n+\n+    return runCondaCommandForTextOutput(\"Environment Creation\", restArgs);\n+  }\n+\n+  private String runCondaInstall(List<String> restArgs)\n+      throws IOException, InterruptedException {\n+\n+    restArgs.add(0, \"conda\");\n+    restArgs.add(1, \"install\");\n+    restArgs.add(2, \"--yes\");\n+\n+    return runCondaCommandForTextOutput(\"Package Installation\", restArgs);\n+  }\n+\n+  private String runCondaUninstall(List<String> restArgs)\n+      throws IOException, InterruptedException {\n+\n+    restArgs.add(0, \"conda\");\n+    restArgs.add(1, \"uninstall\");\n+    restArgs.add(2, \"--yes\");\n+\n+    return runCondaCommandForTextOutput(\"Package Uninstallation\", restArgs);\n+  }\n+\n+  public static String wrapCondaBasicOutputStyle(String title, String content) {\n+    StringBuilder sb = new StringBuilder();\n+    if (null != title && !title.isEmpty()) {\n+      sb.append(\"<h4>\").append(title).append(\"</h4>\\n\")\n+          .append(\"</div><br />\\n\");\n+    }\n+    sb.append(\"<div style=\\\"white-space:pre-wrap;\\\">\\n\")\n+        .append(content)\n+        .append(\"</div>\");\n+\n+    return sb.toString();\n+  }\n+\n+  public static String wrapCondaTableOutputStyle(String title, Map<String, String> kv) {\n+    StringBuilder sb = new StringBuilder();\n+\n+    if (null != title && !title.isEmpty()) {\n+      sb.append(\"<h4>\").append(title).append(\"</h4>\\n\");\n+    }\n+\n+    sb.append(\"<div style=\\\"display:table;white-space:pre-wrap;\\\">\\n\");\n+    for (String name : kv.keySet()) {\n+      String path = kv.get(name);\n+\n+      sb.append(String.format(\"<div style=\\\"display:table-row\\\">\" +\n+              \"<div style=\\\"display:table-cell;width:150px\\\">%s</div>\" +\n+              \"<div style=\\\"display:table-cell;\\\">%s</div>\" +\n+              \"</div>\\n\",\n+          name, path));\n+    }\n+    sb.append(\"</div>\\n\");\n+\n+    return sb.toString();\n+  }\n+\n+  public static Map<String, String> parseCondaCommonStdout(String out)\n+      throws IOException, InterruptedException {\n+\n+    Map<String, String> kv = new LinkedHashMap<String, String>();\n+    String[] lines = out.split(\"\\n\");\n+    for (String s : lines) {\n+      if (s == null || s.isEmpty() || s.startsWith(\"#\")) {\n+        continue;\n+      }\n+      Matcher match = PATTERN_OUTPUT_ENV_LIST.matcher(s);\n+\n+      if (!match.matches()) {\n+        continue;\n+      }\n+      kv.put(match.group(1), match.group(2));\n+    }\n+\n+    return kv;\n+  }\n+\n   @Override\n   public void cancel(InterpreterContext context) {\n \n@@ -206,7 +343,6 @@ public int getProgress(InterpreterContext context) {\n     return 0;\n   }\n \n-\n   /**\n    * Use python interpreter's scheduler.\n    * To make sure %python.conda paragraph and %python paragraph runs sequentially\n@@ -221,9 +357,12 @@ public Scheduler getScheduler() {\n     }\n   }\n \n-  protected int runCommand(StringBuilder sb, String ... command)\n+  public static String runCommand(List<String> commands)\n       throws IOException, InterruptedException {\n-    ProcessBuilder builder = new ProcessBuilder(command);\n+\n+    StringBuilder sb = new StringBuilder();\n+\n+    ProcessBuilder builder = new ProcessBuilder(commands);\n     builder.redirectErrorStream(true);\n     Process process = builder.start();\n     InputStream stdout = process.getInputStream();\n@@ -234,10 +373,28 @@ protected int runCommand(StringBuilder sb, String ... command)\n       sb.append(\"\\n\");\n     }\n     int r = process.waitFor(); // Let the process finish.\n-    return r;\n+\n+    if (r != 0) {\n+      throw new RuntimeException(\"Failed to execute `\" +\n+          StringUtils.join(commands, \" \") + \"` exited with \" + r);\n+    }\n+\n+    return sb.toString();\n+  }\n+\n+  public static String runCommand(String ... command)\n+      throws IOException, InterruptedException {\n+\n+    List<String> list = new ArrayList<>(command.length);\n+    for (String arg : command) {\n+      list.add(arg);\n+    }\n+\n+    return runCommand(list);\n   }\n \n-  protected StringBuilder createStringBuilder() {\n-    return new StringBuilder();\n+  public static List<String> getRestArgsFromMatcher(Matcher m) {\n+    // Arrays.asList just returns fixed-size, so we should use ctor instead of\n+    return new ArrayList<>(Arrays.asList(m.group(1).split(\" \")));\n   }\n }",
                "changes": 319
            },
            {
                "status": "modified",
                "additions": 4,
                "raw_url": "https://github.com/apache/zeppelin/raw/034fdc6735e075c89f727bb6bc6fddbc89b639c4/python/src/main/java/org/apache/zeppelin/python/PythonProcess.java",
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/python/src/main/java/org/apache/zeppelin/python/PythonProcess.java?ref=034fdc6735e075c89f727bb6bc6fddbc89b639c4",
                "filename": "python/src/main/java/org/apache/zeppelin/python/PythonProcess.java",
                "deletions": 1,
                "sha": "578ffeb8f990c1f2c1aa2cf7f1976d5a9810f7d1",
                "blob_url": "https://github.com/apache/zeppelin/blob/034fdc6735e075c89f727bb6bc6fddbc89b639c4/python/src/main/java/org/apache/zeppelin/python/PythonProcess.java",
                "patch": "@@ -110,10 +110,13 @@ public String sendAndGetResult(String cmd) throws IOException {\n     writer.println(\"\\\"\" + STATEMENT_END + \"\\\"\");\n     StringBuilder output = new StringBuilder();\n     String line = null;\n-    while (!(line = reader.readLine()).contains(STATEMENT_END)) {\n+\n+    while ((line = reader.readLine()) != null &&\n+        !line.contains(STATEMENT_END)) {\n       logger.debug(\"Read line from python shell : \" + line);\n       output.append(line + \"\\n\");\n     }\n+\n     return output.toString();\n   }\n ",
                "changes": 5
            },
            {
                "status": "modified",
                "additions": 22,
                "raw_url": "https://github.com/apache/zeppelin/raw/034fdc6735e075c89f727bb6bc6fddbc89b639c4/python/src/main/resources/output_templates/conda_usage.html",
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/python/src/main/resources/output_templates/conda_usage.html?ref=034fdc6735e075c89f727bb6bc6fddbc89b639c4",
                "filename": "python/src/main/resources/output_templates/conda_usage.html",
                "deletions": 3,
                "sha": "e1146fcf396961d9033d67886f6abceecb0e0185",
                "blob_url": "https://github.com/apache/zeppelin/blob/034fdc6735e075c89f727bb6bc6fddbc89b639c4/python/src/main/resources/output_templates/conda_usage.html",
                "patch": "@@ -12,6 +12,18 @@\n limitations under the License.\n -->\n <h4>Usage</h4>\n+<div>\n+  Get the Conda Infomation\n+  <pre>%python.conda info</pre>\n+</div>\n+<div>\n+  List the Conda environments\n+  <pre>%python.conda env list</pre>\n+</div>\n+<div>\n+  Create a conda enviornment\n+  <pre>%python.conda create --name [ENV NAME]</pre>\n+</div>\n <div>\n   Activate an environment (python interpreter will be restarted)\n   <pre>%python.conda activate [ENV NAME]</pre>\n@@ -21,7 +33,14 @@ <h4>Usage</h4>\n   <pre>%python.conda deactivate</pre>\n </div>\n <div>\n-  List the Conda environments\n-  <pre>%python.conda</pre>\n+  Get installed package list inside the current environment\n+  <pre>%python.conda list</pre>\n+</div>\n+<div>\n+  Install Package\n+  <pre>%python.conda install [PACKAGE NAME]</pre>\n+</div>\n+<div>\n+  Uninstall Package\n+  <pre>%python.conda uninstall [PACKAGE NAME]</pre>\n </div>\n-",
                "changes": 25
            },
            {
                "status": "modified",
                "additions": 43,
                "raw_url": "https://github.com/apache/zeppelin/raw/034fdc6735e075c89f727bb6bc6fddbc89b639c4/python/src/test/java/org/apache/zeppelin/python/PythonCondaInterpreterTest.java",
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/python/src/test/java/org/apache/zeppelin/python/PythonCondaInterpreterTest.java?ref=034fdc6735e075c89f727bb6bc6fddbc89b639c4",
                "filename": "python/src/test/java/org/apache/zeppelin/python/PythonCondaInterpreterTest.java",
                "deletions": 20,
                "sha": "c6d2a84886b95a2aaa20a82fd371c9be126803d0",
                "blob_url": "https://github.com/apache/zeppelin/blob/034fdc6735e075c89f727bb6bc6fddbc89b639c4/python/src/test/java/org/apache/zeppelin/python/PythonCondaInterpreterTest.java",
                "patch": "@@ -23,13 +23,11 @@\n import org.junit.Test;\n \n import java.io.IOException;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.Properties;\n+import java.util.*;\n+import java.util.regex.Matcher;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n-import static org.mockito.Matchers.*;\n import static org.mockito.Mockito.*;\n \n public class PythonCondaInterpreterTest {\n@@ -49,35 +47,32 @@ public void setUp() {\n     doReturn(python).when(conda).getPythonInterpreter();\n   }\n \n-  private void setCondaEnvs() throws IOException, InterruptedException {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"#comment\\n\\nenv1   *  /path1\\nenv2\\t/path2\\n\");\n-\n-    doReturn(sb).when(conda).createStringBuilder();\n-    doReturn(0).when(conda)\n-      .runCommand(any(StringBuilder.class), anyString(), anyString(), anyString());\n+  private void setMockCondaEnvList() throws IOException, InterruptedException {\n+    Map<String, String> envList = new LinkedHashMap<String, String>();\n+    envList.put(\"env1\", \"/path1\");\n+    envList.put(\"env2\", \"/path2\");\n+    doReturn(envList).when(conda).getCondaEnvs();\n   }\n \n   @Test\n   public void testListEnv() throws IOException, InterruptedException {\n-    setCondaEnvs();\n+    setMockCondaEnvList();\n \n     // list available env\n     InterpreterContext context = getInterpreterContext();\n-    InterpreterResult result = conda.interpret(\"\", context);\n+    InterpreterResult result = conda.interpret(\"env list\", context);\n     assertEquals(InterpreterResult.Code.SUCCESS, result.code());\n \n-    context.out.flush();\n-    String out = new String(context.out.toByteArray());\n-    assertTrue(out.contains(\">env1<\"));\n-    assertTrue(out.contains(\">/path1<\"));\n-    assertTrue(out.contains(\">env2<\"));\n-    assertTrue(out.contains(\">/path2<\"));\n+    assertTrue(result.toString().contains(\">env1<\"));\n+    assertTrue(result.toString().contains(\"/path1<\"));\n+    assertTrue(result.toString().contains(\">env2<\"));\n+    assertTrue(result.toString().contains(\"/path2<\"));\n   }\n \n   @Test\n   public void testActivateEnv() throws IOException, InterruptedException {\n-    setCondaEnvs();\n+    setMockCondaEnvList();\n+\n     InterpreterContext context = getInterpreterContext();\n     conda.interpret(\"activate env1\", context);\n     verify(python, times(1)).open();\n@@ -94,6 +89,34 @@ public void testDeactivate() {\n     verify(python).setPythonCommand(\"python\");\n   }\n \n+  @Test\n+  public void testParseCondaCommonStdout()\n+      throws IOException, InterruptedException {\n+\n+    StringBuilder sb = new StringBuilder()\n+        .append(\"# comment1\\n\")\n+        .append(\"# comment2\\n\")\n+        .append(\"env1     /location1\\n\")\n+        .append(\"env2     /location2\\n\");\n+\n+    Map<String, String> locationPerEnv =\n+        PythonCondaInterpreter.parseCondaCommonStdout(sb.toString());\n+\n+    assertEquals(\"/location1\", locationPerEnv.get(\"env1\"));\n+    assertEquals(\"/location2\", locationPerEnv.get(\"env2\"));\n+  }\n+\n+  @Test\n+  public void testGetRestArgsFromMatcher() {\n+    Matcher m =\n+        PythonCondaInterpreter.PATTERN_COMMAND_ENV.matcher(\"env remove --name test --yes\");\n+    m.matches();\n+\n+    List<String> restArgs = PythonCondaInterpreter.getRestArgsFromMatcher(m);\n+    List<String> expected = Arrays.asList(new String[]{\"remove\", \"--name\", \"test\", \"--yes\"});\n+    assertEquals(expected, restArgs);\n+  }\n+\n   private InterpreterContext getInterpreterContext() {\n     return new InterpreterContext(\n         \"noteId\",",
                "changes": 63
            }
        ],
        "unit_tests": [
            "PythonCondaInterpreterTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "python/src/test/java/org/apache/zeppelin/python/PythonCondaInterpreterTest.java",
        "buggy_files": [
            "python/src/main/java/org/apache/zeppelin/python/PythonCondaInterpreter.java",
            "python/src/main/resources/output_templates/conda_usage.html",
            "python/src/main/java/org/apache/zeppelin/python/PythonProcess.java"
        ],
        "fixed": true
    }
]