[
    {
        "repo": "jackrabbit-oak",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/500b7032c86ba479a71937cb008226b360972266",
        "bug_id": "jackrabbit-oak_500b703",
        "message": "OAK-8389 : AccessControlValidator prone to NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1860716 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/21cc8ffd973a925ebae94aa19647e160ae49d0b9",
        "patched_files": [
            "AccessControlValidator.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 21,
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/500b7032c86ba479a71937cb008226b360972266/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlValidator.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlValidator.java?ref=500b7032c86ba479a71937cb008226b360972266",
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlValidator.java",
                "deletions": 12,
                "sha": "1ef42ac4740451b2654f3b08580d60968fdd40d8",
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/500b7032c86ba479a71937cb008226b360972266/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlValidator.java",
                "patch": "@@ -23,14 +23,14 @@\n import javax.jcr.security.AccessControlException;\n import javax.jcr.security.Privilege;\n \n+import com.google.common.base.Strings;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.Sets;\n import org.apache.jackrabbit.JcrConstants;\n import org.apache.jackrabbit.api.security.authorization.PrivilegeManager;\n import org.apache.jackrabbit.oak.api.CommitFailedException;\n import org.apache.jackrabbit.oak.api.PropertyState;\n import org.apache.jackrabbit.oak.api.Tree;\n-import org.apache.jackrabbit.oak.api.Type;\n import org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate;\n import org.apache.jackrabbit.oak.plugins.tree.TreeConstants;\n import org.apache.jackrabbit.oak.plugins.tree.TreeProvider;\n@@ -236,20 +236,19 @@ private void checkValidAccessControlEntry(@NotNull Tree aceNode) throws CommitFa\n         checkValidRestrictions(aceNode);\n     }\n \n-    private void checkValidPrincipal(@NotNull Tree aceNode) throws CommitFailedException {\n+    @NotNull\n+    private String checkValidPrincipal(@NotNull Tree aceNode) throws CommitFailedException {\n         String principalName = TreeUtil.getString(aceNode, REP_PRINCIPAL_NAME);\n-        if (principalName == null || principalName.isEmpty()) {\n+        if (Strings.isNullOrEmpty(principalName)) {\n             throw accessViolation(8, \"Missing principal name at \" + aceNode.getPath());\n         }\n         // validity of principal is only a JCR specific contract and will not be\n         // enforced on the oak level.\n+        return principalName;\n     }\n \n     private void checkValidPrivileges(@NotNull Tree aceNode) throws CommitFailedException {\n-        Iterable<String> privilegeNames = TreeUtil.getStrings(aceNode, REP_PRIVILEGES);\n-        if (privilegeNames == null || Iterables.isEmpty(privilegeNames)) {\n-            throw accessViolation(9, \"Missing privileges at \" + aceNode.getPath());\n-        }\n+        Iterable<String> privilegeNames = getPrivilegeNames(aceNode);\n         for (String privilegeName : privilegeNames) {\n             try {\n                 Privilege privilege = privilegeManager.getPrivilege(privilegeName);\n@@ -264,6 +263,15 @@ private void checkValidPrivileges(@NotNull Tree aceNode) throws CommitFailedExce\n         }\n     }\n \n+    @NotNull\n+    private Iterable<String> getPrivilegeNames(@NotNull Tree aceNode) throws CommitFailedException {\n+        Iterable<String> privilegeNames = TreeUtil.getNames(aceNode, REP_PRIVILEGES);\n+        if (Iterables.isEmpty(privilegeNames)) {\n+            throw accessViolation(9, \"Missing privileges at \" + aceNode.getPath());\n+        }\n+        return privilegeNames;\n+    }\n+\n     private void checkValidRestrictions(@NotNull Tree aceTree) throws CommitFailedException {\n         String path;\n         Tree aclTree = checkNotNull(aceTree.getParent());\n@@ -290,20 +298,21 @@ private static void checkMixinTypes(Tree parentTree) throws CommitFailedExceptio\n         }\n     }\n \n-    private static void checkValidRepoAccessControlled(Tree accessControlledTree) throws CommitFailedException {\n+    private static void checkValidRepoAccessControlled(@NotNull Tree accessControlledTree) throws CommitFailedException {\n         if (!accessControlledTree.isRoot()) {\n             throw accessViolation(12, \"Only root can store repository level policies (\" + accessControlledTree.getPath() + ')');\n         }\n     }\n \n+    @NotNull\n     private static CommitFailedException accessViolation(int code, String message) {\n         return new CommitFailedException(ACCESS_CONTROL, code, message);\n     }\n \n-    private ValidationEntry createAceEntry(@Nullable String path, @NotNull Tree aceTree) {\n-        String principalName = aceTree.getProperty(REP_PRINCIPAL_NAME).getValue(Type.STRING);\n-        PrivilegeBits privilegeBits = privilegeBitsProvider.getBits(aceTree.getProperty(REP_PRIVILEGES).getValue(Type.NAMES));\n-\n+     @NotNull\n+     private ValidationEntry createAceEntry(@Nullable String path, @NotNull Tree aceTree) throws CommitFailedException {\n+        String principalName = checkValidPrincipal(aceTree);\n+        PrivilegeBits privilegeBits = privilegeBitsProvider.getBits(getPrivilegeNames(aceTree));\n         boolean isAllow = NT_REP_GRANT_ACE.equals(TreeUtil.getPrimaryTypeName(aceTree));\n         Set<Restriction> restrictions = restrictionProvider.readRestrictions(path, aceTree);\n         return new ValidationEntry(principalName, privilegeBits, isAllow, restrictions);",
                "changes": 33
            },
            {
                "status": "modified",
                "additions": 100,
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/500b7032c86ba479a71937cb008226b360972266/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlValidatorTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlValidatorTest.java?ref=500b7032c86ba479a71937cb008226b360972266",
                "filename": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlValidatorTest.java",
                "deletions": 0,
                "sha": "9c889e87bf9b0ca71d8fb26b944054f7ad1b9c63",
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/500b7032c86ba479a71937cb008226b360972266/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlValidatorTest.java",
                "patch": "@@ -16,6 +16,7 @@\n  */\n package org.apache.jackrabbit.oak.security.authorization.accesscontrol;\n \n+import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n import org.apache.jackrabbit.JcrConstants;\n@@ -25,6 +26,7 @@\n import org.apache.jackrabbit.oak.AbstractSecurityTest;\n import org.apache.jackrabbit.oak.api.CommitFailedException;\n import org.apache.jackrabbit.oak.api.Tree;\n+import org.apache.jackrabbit.oak.api.Type;\n import org.apache.jackrabbit.oak.commons.PathUtils;\n import org.apache.jackrabbit.oak.plugins.memory.MemoryNodeStore;\n import org.apache.jackrabbit.oak.plugins.tree.TreeUtil;\n@@ -57,6 +59,8 @@\n import javax.jcr.security.AccessControlManager;\n import java.security.Principal;\n \n+import static org.apache.jackrabbit.JcrConstants.JCR_MIXINTYPES;\n+import static org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeConstants.JCR_READ;\n import static org.hamcrest.CoreMatchers.containsString;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n@@ -90,6 +94,7 @@ public void before() throws Exception {\n     @After\n     public void after() throws Exception {\n         try {\n+            root.refresh();\n             Tree testRoot = root.getTree(testPath);\n             if (testRoot.exists()) {\n                 testRoot.remove();\n@@ -109,6 +114,25 @@ private AccessControlValidatorProvider createValidatorProvider() {\n         return new AccessControlValidatorProvider((AuthorizationConfigurationImpl) cac.getDefaultConfig());\n     }\n \n+    @NotNull\n+    private Validator createRootValidator(@NotNull Tree rootTree) {\n+        NodeState ns = getTreeProvider().asNodeState(rootTree);\n+        return createValidatorProvider().getRootValidator(ns, ns, new CommitInfo(\"sid\", null));\n+    }\n+\n+    @NotNull\n+    private Tree createPolicy(@NotNull Tree tree, boolean createRestrictionNode) throws AccessDeniedException {\n+        tree.setProperty(JCR_MIXINTYPES, ImmutableList.of(MIX_REP_ACCESS_CONTROLLABLE), Type.NAMES);\n+\n+        Tree acl = TreeUtil.addChild(tree, REP_POLICY, NT_REP_ACL);\n+        acl.setOrderableChildren(true);\n+        Tree ace = createACE(acl, aceName, NT_REP_GRANT_ACE, testPrincipal.getName(), JCR_READ);\n+        if (createRestrictionNode) {\n+            TreeUtil.addChild(ace, REP_RESTRICTIONS, NT_REP_RESTRICTIONS);\n+        }\n+        return acl;\n+    }\n+\n     private NodeUtil createAcl() throws AccessDeniedException {\n         NodeUtil testRoot = getTestRoot();\n         testRoot.setNames(JcrConstants.JCR_MIXINTYPES, MIX_REP_ACCESS_CONTROLLABLE);\n@@ -126,6 +150,20 @@ private static NodeUtil createACE(NodeUtil acl, String aceName, String ntName, S\n         return ace;\n     }\n \n+    @NotNull\n+    private static Tree createACE(@NotNull Tree acl, @NotNull String aceName, @NotNull String ntName, @NotNull String principalName, @NotNull String... privilegeNames) throws AccessDeniedException {\n+        Tree ace = TreeUtil.addChild(acl, aceName, ntName);\n+        ace.setProperty(REP_PRINCIPAL_NAME, principalName);\n+        ace.setProperty(REP_PRIVILEGES, ImmutableList.copyOf(privilegeNames), Type.NAMES);\n+        return ace;\n+    }\n+\n+    private static CommitFailedException assertCommitFailedException(@NotNull CommitFailedException e, @NotNull String type, int expectedCode) {\n+        assertTrue(e.isOfType(type));\n+        assertEquals(expectedCode, e.getCode());\n+        return e;\n+    }\n+\n     @Test\n     public void testPolicyWithOutChildOrder() throws AccessDeniedException {\n         NodeUtil testRoot = getTestRoot();\n@@ -550,4 +588,66 @@ public void testRestrictionsUsedByOtherModule2() throws Exception {\n             root.refresh();\n         }\n     }\n+\n+\n+\n+    @Test(expected = CommitFailedException.class)\n+    public void testAddEntyWithEmptyPrivileges() throws Exception {\n+        Tree rootTree = root.getTree(PathUtils.ROOT_PATH);\n+        Tree policy = createPolicy(rootTree, false);\n+        Tree entry = policy.getChild(aceName);\n+        entry.setProperty(REP_PRIVILEGES, ImmutableList.of(), Type.NAMES);\n+\n+        Validator v = createRootValidator(rootTree);\n+        try {\n+            v.childNodeAdded(policy.getName(), getTreeProvider().asNodeState(policy)).childNodeAdded(entry.getName(), getTreeProvider().asNodeState(entry));\n+        } catch (CommitFailedException e) {\n+            throw assertCommitFailedException(e, CommitFailedException.ACCESS_CONTROL, 9);\n+        }\n+    }\n+\n+    @Test(expected = CommitFailedException.class)\n+    public void testAddEntyWithNullrivileges() throws Exception {\n+        Tree rootTree = root.getTree(PathUtils.ROOT_PATH);\n+        Tree policy = createPolicy(rootTree, false);\n+        Tree entry = policy.getChild(aceName);\n+        entry.removeProperty(REP_PRIVILEGES);\n+\n+        Validator v = createRootValidator(rootTree);\n+        try {\n+            v.childNodeAdded(policy.getName(), getTreeProvider().asNodeState(policy)).childNodeAdded(entry.getName(), getTreeProvider().asNodeState(entry));\n+        } catch (CommitFailedException e) {\n+            throw assertCommitFailedException(e, CommitFailedException.ACCESS_CONTROL, 9);\n+        }\n+    }\n+\n+    @Test(expected = CommitFailedException.class)\n+    public void testAddEntyWithEmptyPrincipalName() throws Exception {\n+        Tree rootTree = root.getTree(PathUtils.ROOT_PATH);\n+        Tree policy = createPolicy(rootTree, false);\n+        Tree entry = policy.getChild(aceName);\n+        entry.setProperty(REP_PRINCIPAL_NAME, \"\");\n+\n+        Validator v = createRootValidator(rootTree);\n+        try {\n+            v.childNodeAdded(policy.getName(), getTreeProvider().asNodeState(policy)).childNodeAdded(entry.getName(), getTreeProvider().asNodeState(entry));\n+        } catch (CommitFailedException e) {\n+            throw assertCommitFailedException(e, CommitFailedException.ACCESS_CONTROL, 8);\n+        }\n+    }\n+\n+    @Test(expected = CommitFailedException.class)\n+    public void testAddEntyWithNullPrincipalName() throws Exception {\n+        Tree rootTree = root.getTree(PathUtils.ROOT_PATH);\n+        Tree policy = createPolicy(rootTree, false);\n+        Tree entry = policy.getChild(aceName);\n+        entry.removeProperty(REP_PRINCIPAL_NAME);\n+\n+        Validator v = createRootValidator(rootTree);\n+        try {\n+            v.childNodeAdded(policy.getName(), getTreeProvider().asNodeState(policy)).childNodeAdded(entry.getName(), getTreeProvider().asNodeState(entry));\n+        } catch (CommitFailedException e) {\n+            throw assertCommitFailedException(e, CommitFailedException.ACCESS_CONTROL, 8);\n+        }\n+    }\n }\n\\ No newline at end of file",
                "changes": 100
            }
        ],
        "unit_tests": [
            "AccessControlValidatorTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlValidatorTest.java",
        "buggy_files": [
            "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlValidator.java"
        ],
        "fixed": true
    }
]