{
    "dubbo_068a7d9": {
        "bug_id": "dubbo_068a7d9",
        "commit": "https://github.com/apache/dubbo/commit/068a7d99e79b4ef3ff5d75342e2f847bd81f2c76",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/068a7d99e79b4ef3ff5d75342e2f847bd81f2c76/dubbo-rpc/src/main/java/com/alibaba/dubbo/rpc/filter/AccessLogFilter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/src/main/java/com/alibaba/dubbo/rpc/filter/AccessLogFilter.java?ref=068a7d99e79b4ef3ff5d75342e2f847bd81f2c76",
                "deletions": 1,
                "filename": "dubbo-rpc/src/main/java/com/alibaba/dubbo/rpc/filter/AccessLogFilter.java",
                "patch": "@@ -89,7 +89,7 @@ public void run() {\n                             Set<String> logSet = entry.getValue();\n                             File file = new File(accesslog);\n                             File dir = file.getParentFile();\n-                            if (! dir.exists()) {\n+                            if (null!=dir&&! dir.exists()) {\n                                 dir.mkdirs();\n                             }\n                             if (logger.isDebugEnabled()) {",
                "raw_url": "https://github.com/apache/dubbo/raw/068a7d99e79b4ef3ff5d75342e2f847bd81f2c76/dubbo-rpc/src/main/java/com/alibaba/dubbo/rpc/filter/AccessLogFilter.java",
                "sha": "a6ea17401b6ad835df3f7d987f55d51fefc09011",
                "status": "modified"
            }
        ],
        "message": "DUBBO-48 accesslogFilter NPE\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@234 1a56cb94-b969-4eaa-88fa-be21384802f2",
        "parent": "https://github.com/apache/dubbo/commit/bb3fe6d19bbc1703ab3b578da23da2d4d3790ac0",
        "repo": "dubbo",
        "unit_tests": [
            "AccessLogFilterTest.java"
        ]
    },
    "dubbo_1267383": {
        "bug_id": "dubbo_1267383",
        "commit": "https://github.com/apache/dubbo/commit/12673832b1bce1655e07e8dc97e10fa09f59f52c",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/dubbo/blob/12673832b1bce1655e07e8dc97e10fa09f59f52c/dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/filter/FutureFilter.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/filter/FutureFilter.java?ref=12673832b1bce1655e07e8dc97e10fa09f59f52c",
                "deletions": 2,
                "filename": "dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/filter/FutureFilter.java",
                "patch": "@@ -70,8 +70,17 @@ private void asyncCallback(final Invoker<?> invoker, final Invocation invocation\n         if (f instanceof FutureAdapter) {\r\n             ResponseFuture future = ((FutureAdapter<?>)f).getFuture();\r\n             future.setCallback(new ResponseCallback() {\r\n-                public void done(Object response) {\r\n-                    Result result = (Result) response;\r\n+                public void done(Object rpcResult) {\r\n+                    if (rpcResult == null){\r\n+                        logger.error(new IllegalStateException(\"invalid result value : null, expected \"+Result.class.getName()));\r\n+                        return;\r\n+                    }\r\n+                    ///must be rpcResult\r\n+                    if (! (rpcResult instanceof Result)){\r\n+                        logger.error(new IllegalStateException(\"invalid result type :\" + rpcResult.getClass() + \", expected \"+Result.class.getName()));\r\n+                        return;\r\n+                    }\r\n+                    Result result = (Result) rpcResult;\r\n                     if (result.hasException()) {\r\n                         fireThrowCallback(invoker, invocation, result.getException());\r\n                     } else {\r",
                "raw_url": "https://github.com/apache/dubbo/raw/12673832b1bce1655e07e8dc97e10fa09f59f52c/dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/filter/FutureFilter.java",
                "sha": "2530f8935f62e3f5015b0e858195af263253a5e0",
                "status": "modified"
            }
        ],
        "message": "DUBBO-11 NPE\u95ee\u9898\u89e3\u51b3.\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@109 1a56cb94-b969-4eaa-88fa-be21384802f2",
        "parent": "https://github.com/apache/dubbo/commit/1aa17bca4a4650fb2078bf8e090408ba182f5702",
        "repo": "dubbo",
        "unit_tests": [
            "FutureFilterTest.java"
        ]
    },
    "dubbo_1aa17bc": {
        "bug_id": "dubbo_1aa17bc",
        "commit": "https://github.com/apache/dubbo/commit/1aa17bca4a4650fb2078bf8e090408ba182f5702",
        "file": [
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/dubbo/blob/1aa17bca4a4650fb2078bf8e090408ba182f5702/dubbo-remoting/src/main/java/com/alibaba/dubbo/remoting/exchange/support/DefaultFuture.java",
                "changes": 98,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting/src/main/java/com/alibaba/dubbo/remoting/exchange/support/DefaultFuture.java?ref=1aa17bca4a4650fb2078bf8e090408ba182f5702",
                "deletions": 38,
                "filename": "dubbo-remoting/src/main/java/com/alibaba/dubbo/remoting/exchange/support/DefaultFuture.java",
                "patch": "@@ -15,25 +15,25 @@\n  */\r\n package com.alibaba.dubbo.remoting.exchange.support;\n \n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n-import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.locks.Condition;\n-import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n-\n-import com.alibaba.dubbo.common.Constants;\n-import com.alibaba.dubbo.common.logger.Logger;\n-import com.alibaba.dubbo.common.logger.LoggerFactory;\n-import com.alibaba.dubbo.remoting.Channel;\n-import com.alibaba.dubbo.remoting.RemotingException;\n-import com.alibaba.dubbo.remoting.TimeoutException;\n-import com.alibaba.dubbo.remoting.exchange.ResponseCallback;\n-import com.alibaba.dubbo.remoting.exchange.ResponseFuture;\n-import com.alibaba.dubbo.remoting.exchange.Request;\n-import com.alibaba.dubbo.remoting.exchange.Response;\n+import java.text.SimpleDateFormat;\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.locks.Condition;\r\n+import java.util.concurrent.locks.Lock;\r\n+import java.util.concurrent.locks.ReentrantLock;\r\n+\r\n+import com.alibaba.dubbo.common.Constants;\r\n+import com.alibaba.dubbo.common.logger.Logger;\r\n+import com.alibaba.dubbo.common.logger.LoggerFactory;\r\n+import com.alibaba.dubbo.remoting.Channel;\r\n+import com.alibaba.dubbo.remoting.RemotingException;\r\n+import com.alibaba.dubbo.remoting.TimeoutException;\r\n+import com.alibaba.dubbo.remoting.exchange.Request;\r\n+import com.alibaba.dubbo.remoting.exchange.Response;\r\n+import com.alibaba.dubbo.remoting.exchange.ResponseCallback;\r\n+import com.alibaba.dubbo.remoting.exchange.ResponseFuture;\r\n \n /**\n  * DefaultFuture.\n@@ -143,20 +143,53 @@ public void setCallback(ResponseCallback callback) {\n         }\n     }\r\n     private void invokeCallback(ResponseCallback c){\r\n-        if (c == null){\r\n+        ResponseCallback callbackCopy = c;\r\n+        if (callbackCopy == null){\r\n             throw new NullPointerException(\"callback cannot be null.\");\r\n         }\r\n-        ResponseCallback callbackCopy = c;\r\n         c = null;\r\n-        Object result = null;\r\n-        try {\r\n-            result = returnFromResponse();\r\n-        } catch (Throwable e) {\r\n-            callbackCopy.caught(e);\r\n+        Response res = response;\r\n+        if (res == null) {\r\n+            throw new IllegalStateException(\"response cannot be null. url:\"+channel.getUrl());\r\n+        }\r\n+        \r\n+        if (res.getStatus() == Response.OK) {\r\n+            try {\r\n+                callbackCopy.done(res.getResult());\r\n+            } catch (Exception e) {\r\n+                logger.error(\"callback invoke error .reasult:\" + res.getResult() + \",url:\" + channel.getUrl(), e);\r\n+            }\r\n+        } else if (res.getStatus() == Response.CLIENT_TIMEOUT || res.getStatus() == Response.SERVER_TIMEOUT) {\r\n+            try {\r\n+                TimeoutException te = new TimeoutException(res.getStatus() == Response.SERVER_TIMEOUT, channel, res.getErrorMessage());\r\n+                callbackCopy.caught(te);\r\n+            } catch (Exception e) {\r\n+                logger.error(\"callback invoke error ,url:\" + channel.getUrl(), e);\r\n+            }\r\n+        } else {\r\n+            try {\r\n+                RuntimeException re = new RuntimeException(res.getErrorMessage());\r\n+                callbackCopy.caught(re);\r\n+            } catch (Exception e) {\r\n+                logger.error(\"callback invoke error ,url:\" + channel.getUrl(), e);\r\n+            }\r\n         }\r\n-        callbackCopy.done(result);\r\n     }\n \n+    private Object returnFromResponse() throws RemotingException {\r\n+        Response res = response;\r\n+        if (res == null) {\r\n+            throw new IllegalStateException(\"response cannot be null\");\r\n+        }\r\n+        if (res.getStatus() == Response.OK) {\r\n+            return res.getResult();\r\n+        }\r\n+        if (res.getStatus() == Response.CLIENT_TIMEOUT || res.getStatus() == Response.SERVER_TIMEOUT) {\r\n+            throw new TimeoutException(res.getStatus() == Response.SERVER_TIMEOUT, channel, res.getErrorMessage());\r\n+        }\r\n+        throw new RemotingException(channel, res.getErrorMessage());\r\n+    }\r\n+\r\n     private long getId() {\n         return id;\n     }\n@@ -228,17 +261,6 @@ private void doReceived(Response res) {\n         }\n     }\n \n-    private Object returnFromResponse() throws RemotingException {\n-        Response res = response;\n-        if (res.getStatus() == Response.OK) {\n-            return response.getResult();\n-        }\n-        if (res.getStatus() == Response.CLIENT_TIMEOUT || res.getStatus() == Response.SERVER_TIMEOUT) {\n-            throw new TimeoutException(res.getStatus() == Response.SERVER_TIMEOUT, channel, res.getErrorMessage());\n-        }\n-        throw new RemotingException(channel, res.getErrorMessage());\n-    }\n-    \n     private String getTimeoutMessage(boolean scan) {\n         long nowTimestamp = System.currentTimeMillis();\n         return (sent > 0 ? \"Waiting server-side response timeout\" : \"Sending request timeout in client-side\")",
                "raw_url": "https://github.com/apache/dubbo/raw/1aa17bca4a4650fb2078bf8e090408ba182f5702/dubbo-remoting/src/main/java/com/alibaba/dubbo/remoting/exchange/support/DefaultFuture.java",
                "sha": "25e4e2d52e7d7bd437d3c337990cbb536bfec437",
                "status": "modified"
            }
        ],
        "message": "DUBBO-11 NPE\u95ee\u9898\u89e3\u51b3.\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@108 1a56cb94-b969-4eaa-88fa-be21384802f2",
        "parent": "https://github.com/apache/dubbo/commit/59b36ef7de9a4c7f5f3824fb6207a2bfde5d963b",
        "repo": "dubbo",
        "unit_tests": [
            "DefaultFutureTest.java"
        ]
    },
    "dubbo_455943f": {
        "bug_id": "dubbo_455943f",
        "commit": "https://github.com/apache/dubbo/commit/455943f4606caf88f6c1627e83c745d92f29813b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/455943f4606caf88f6c1627e83c745d92f29813b/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java?ref=455943f4606caf88f6c1627e83c745d92f29813b",
                "deletions": 1,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java",
                "patch": "@@ -151,6 +151,6 @@ public void notifyFullInvokers(List<Invoker<T>> invokers, URL url) {\n     }\n \n     public void setFullMethodInvokers(List<Invoker<T>> fullInvokers) {\n-        this.fullInvokers = fullInvokers;\n+        this.fullInvokers = (fullInvokers == null ? Collections.emptyList() : fullInvokers);\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/455943f4606caf88f6c1627e83c745d92f29813b/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java",
                "sha": "33374af445fbe49ed9c008b246de294d8cf07c52",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/455943f4606caf88f6c1627e83c745d92f29813b/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectory.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectory.java?ref=455943f4606caf88f6c1627e83c745d92f29813b",
                "deletions": 1,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectory.java",
                "patch": "@@ -24,6 +24,7 @@\n import org.apache.dubbo.rpc.RpcException;\r\n import org.apache.dubbo.rpc.cluster.RouterChain;\r\n \r\n+import java.util.Collections;\r\n import java.util.List;\r\n \r\n /**\r\n@@ -101,7 +102,7 @@ public void buildRouterChain(List<Invoker<T>> groupInvokers) {\n                 logger.error(\"Failed to execute router: \" + getUrl() + \", cause: \" + t.getMessage(), t);\r\n             }\r\n         }\r\n-        return finalInvokers;\r\n+        return finalInvokers == null ? Collections.emptyList() : finalInvokers;\r\n     }\r\n \r\n }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/455943f4606caf88f6c1627e83c745d92f29813b/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectory.java",
                "sha": "4794b12a29f58f7fa6e3c1657996533b408335a5",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/dubbo/blob/455943f4606caf88f6c1627e83c745d92f29813b/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mock/MockInvokersSelector.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mock/MockInvokersSelector.java?ref=455943f4606caf88f6c1627e83c745d92f29813b",
                "deletions": 0,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mock/MockInvokersSelector.java",
                "patch": "@@ -18,6 +18,7 @@\n \n import org.apache.dubbo.common.Constants;\n import org.apache.dubbo.common.URL;\n+import org.apache.dubbo.common.utils.CollectionUtils;\n import org.apache.dubbo.rpc.Invocation;\n import org.apache.dubbo.rpc.Invoker;\n import org.apache.dubbo.rpc.RpcException;\n@@ -39,6 +40,10 @@\n     @Override\n     public <T> List<Invoker<T>> route(final List<Invoker<T>> invokers,\n                                       URL url, final Invocation invocation) throws RpcException {\n+        if (CollectionUtils.isEmpty(invokers)) {\n+            return invokers;\n+        }\n+\n         if (invocation.getAttachments() == null) {\n             return getNormalInvokers(invokers);\n         } else {",
                "raw_url": "https://github.com/apache/dubbo/raw/455943f4606caf88f6c1627e83c745d92f29813b/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mock/MockInvokersSelector.java",
                "sha": "896638a2c04f09573a08efc5c186414cd83965aa",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/dubbo/blob/455943f4606caf88f6c1627e83c745d92f29813b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java?ref=455943f4606caf88f6c1627e83c745d92f29813b",
                "deletions": 5,
                "filename": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java",
                "patch": "@@ -112,7 +112,7 @@\n     private volatile Set<URL> cachedInvokerUrls; // The initial value is null and the midway may be assigned to null, please use the local variable reference\r\n \r\n     private static final ConsumerConfigurationListener consumerConfigurationListener = new ConsumerConfigurationListener();\r\n-    private ServiceConfigurationListener serviceConfigurationListener;\r\n+    private ReferenceConfigurationListener serviceConfigurationListener;\r\n \r\n \r\n     public RegistryDirectory(Class<T> serviceType, URL url) {\r\n@@ -156,7 +156,7 @@ public void setRegistry(Registry registry) {\n     public void subscribe(URL url) {\r\n         setConsumerUrl(url);\r\n         consumerConfigurationListener.addNotifyListener(this);\r\n-        serviceConfigurationListener = new ServiceConfigurationListener(url);\r\n+        serviceConfigurationListener = new ReferenceConfigurationListener(url);\r\n         registry.subscribe(url, this);\r\n     }\r\n \r\n@@ -222,8 +222,8 @@ private void refreshInvoker(List<URL> invokerUrls) {\n                 .getProtocol())) {\r\n             this.forbidden = true; // Forbid to access\r\n             this.invokers = null;\r\n-            destroyAllInvokers(); // Close all invokers\r\n             routerChain.notifyFullInvokers(this.invokers, getConsumerUrl());\r\n+            destroyAllInvokers(); // Close all invokers\r\n         } else {\r\n             this.forbidden = false; // Allow to access\r\n             Map<String, Invoker<T>> oldUrlInvokerMap = this.urlInvokerMap; // local reference\r\n@@ -744,10 +744,10 @@ public URL getProviderUrl() {\n         }\r\n     }\r\n \r\n-    private class ServiceConfigurationListener extends AbstractConfiguratorListener {\r\n+    private class ReferenceConfigurationListener extends AbstractConfiguratorListener {\r\n         private URL url;\r\n \r\n-        ServiceConfigurationListener(URL url) {\r\n+        ReferenceConfigurationListener(URL url) {\r\n             this.url = url;\r\n             this.init();\r\n         }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/455943f4606caf88f6c1627e83c745d92f29813b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java",
                "sha": "b3e70c60c0de9ea9f6d378335ce89be8db64bf7d",
                "status": "modified"
            }
        ],
        "message": "add fault tolerant code to avoid NPE",
        "parent": "https://github.com/apache/dubbo/commit/5b1b14de1ba3cd86f6494fb12d51085b264b3ec3",
        "repo": "dubbo",
        "unit_tests": [
            "RegistryDirectoryTest.java"
        ]
    },
    "dubbo_49fbd32": {
        "bug_id": "dubbo_49fbd32",
        "commit": "https://github.com/apache/dubbo/commit/49fbd32cd858759febfc166c20a2883a7d1b2df8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/49fbd32cd858759febfc166c20a2883a7d1b2df8/dubbo-registry/src/main/java/com/alibaba/dubbo/registry/support/RegistryDirectory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry/src/main/java/com/alibaba/dubbo/registry/support/RegistryDirectory.java?ref=49fbd32cd858759febfc166c20a2883a7d1b2df8",
                "deletions": 1,
                "filename": "dubbo-registry/src/main/java/com/alibaba/dubbo/registry/support/RegistryDirectory.java",
                "patch": "@@ -104,7 +104,7 @@ public RegistryDirectory(Class<T> serviceType, URL url) {\n         this.serviceKey = url.getServiceKey();\r\n         this.queryMap = StringUtils.parseQueryString(url.getParameterAndDecoded(RpcConstants.REFER_KEY));\r\n         this.directoryUrl = url.removeParameter(RpcConstants.REFER_KEY).addParameters(queryMap);\r\n-        String group = directoryUrl.getParameter( Constants.GROUP_KEY );\r\n+        String group = directoryUrl.getParameter( Constants.GROUP_KEY, \"\" );\r\n         this.multiGroup = \"*\".equals(group) || group.contains( \",\" );\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/49fbd32cd858759febfc166c20a2883a7d1b2df8/dubbo-registry/src/main/java/com/alibaba/dubbo/registry/support/RegistryDirectory.java",
                "sha": "65f243e7e15725ab80f83e827eb8906a8f72f893",
                "status": "modified"
            }
        ],
        "message": "DUBBO-54 fix NPE\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@982 1a56cb94-b969-4eaa-88fa-be21384802f2",
        "parent": "https://github.com/apache/dubbo/commit/70cad53ff7a956b59bdfc44f2a80aa7979ee9c6f",
        "repo": "dubbo",
        "unit_tests": [
            "RegistryDirectoryTest.java"
        ]
    },
    "dubbo_50afb87": {
        "bug_id": "dubbo_50afb87",
        "commit": "https://github.com/apache/dubbo/commit/50afb8775cb78acf1592516f31143afc2b6e7e38",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/50afb8775cb78acf1592516f31143afc2b6e7e38/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java?ref=50afb8775cb78acf1592516f31143afc2b6e7e38",
                "deletions": 4,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java",
                "patch": "@@ -67,10 +67,6 @@ public void initWithRouters(List<Router> builtinRouters) {\n         this.sort();\n     }\n \n-    public void addRouter(Router router) {\n-        this.routers.add(router);\n-    }\n-\n     /**\n      * If we use route:// protocol in version before 2.7.0, each URL will generate a Router instance, so we should\n      * keep the routers up to date, that is, each time router URLs changes, we should update the routers list, only",
                "raw_url": "https://github.com/apache/dubbo/raw/50afb8775cb78acf1592516f31143afc2b6e7e38/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java",
                "sha": "a690d73f1c9f88e178cdd83aebaff649511f54d6",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/50afb8775cb78acf1592516f31143afc2b6e7e38/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java?ref=50afb8775cb78acf1592516f31143afc2b6e7e38",
                "deletions": 3,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java",
                "patch": "@@ -28,7 +28,7 @@\n import org.apache.dubbo.rpc.cluster.Router;\n import org.apache.dubbo.rpc.cluster.RouterChain;\n \n-import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n \n@@ -96,8 +96,7 @@ public void setRouterChain(RouterChain<T> routerChain) {\n     }\n \n     protected void addRouters(List<Router> routers) {\n-        // copy list\n-        routers = routers == null ? new ArrayList<>() : new ArrayList<>(routers);\n+        routers = routers == null ? Collections.emptyList() : routers;\n         routerChain.addRouters(routers);\n     }\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/50afb8775cb78acf1592516f31143afc2b6e7e38/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java",
                "sha": "54ce8269afda990fd4693a0445e4eacbb17cd621",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/dubbo/blob/50afb8775cb78acf1592516f31143afc2b6e7e38/dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java?ref=50afb8775cb78acf1592516f31143afc2b6e7e38",
                "deletions": 5,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java",
                "patch": "@@ -27,6 +27,14 @@\n import java.util.function.Predicate;\r\n import java.util.stream.Collectors;\r\n \r\n+import static org.apache.dubbo.common.Constants.CATEGORY_KEY;\r\n+import static org.apache.dubbo.common.Constants.CONFIGURATORS_CATEGORY;\r\n+import static org.apache.dubbo.common.Constants.DEFAULT_CATEGORY;\r\n+import static org.apache.dubbo.common.Constants.OVERRIDE_PROTOCOL;\r\n+import static org.apache.dubbo.common.Constants.PROVIDERS_CATEGORY;\r\n+import static org.apache.dubbo.common.Constants.ROUTERS_CATEGORY;\r\n+import static org.apache.dubbo.common.Constants.ROUTE_PROTOCOL;\r\n+\r\n public class UrlUtils {\r\n \r\n     /**\r\n@@ -343,14 +351,14 @@ public static URL getEmptyUrl(String service, String category) {\n             service = service.substring(0, i);\r\n         }\r\n         return URL.valueOf(Constants.EMPTY_PROTOCOL + \"://0.0.0.0/\" + service + URL_PARAM_STARTING_SYMBOL\r\n-                + Constants.CATEGORY_KEY + \"=\" + category\r\n+                + CATEGORY_KEY + \"=\" + category\r\n                 + (group == null ? \"\" : \"&\" + Constants.GROUP_KEY + \"=\" + group)\r\n                 + (version == null ? \"\" : \"&\" + Constants.VERSION_KEY + \"=\" + version));\r\n     }\r\n \r\n     public static boolean isMatchCategory(String category, String categories) {\r\n         if (categories == null || categories.length() == 0) {\r\n-            return Constants.DEFAULT_CATEGORY.equals(category);\r\n+            return DEFAULT_CATEGORY.equals(category);\r\n         } else if (categories.contains(Constants.ANY_VALUE)) {\r\n             return true;\r\n         } else if (categories.contains(Constants.REMOVE_VALUE_PREFIX)) {\r\n@@ -370,8 +378,8 @@ public static boolean isMatch(URL consumerUrl, URL providerUrl) {\n             return false;\r\n         }\r\n \r\n-        if (!isMatchCategory(providerUrl.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY),\r\n-                consumerUrl.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY))) {\r\n+        if (!isMatchCategory(providerUrl.getParameter(CATEGORY_KEY, DEFAULT_CATEGORY),\r\n+                consumerUrl.getParameter(CATEGORY_KEY, DEFAULT_CATEGORY))) {\r\n             return false;\r\n         }\r\n         if (!providerUrl.getParameter(Constants.ENABLED_KEY, true)\r\n@@ -445,6 +453,22 @@ public static boolean isServiceKeyMatch(URL pattern, URL value) {\n         return urls.stream().filter(predicate).collect(Collectors.toList());\r\n     }\r\n \r\n+    public static boolean isConfigurator(URL url) {\r\n+        return OVERRIDE_PROTOCOL.equals(url.getProtocol()) ||\r\n+                CONFIGURATORS_CATEGORY.equals(url.getParameter(CATEGORY_KEY, DEFAULT_CATEGORY));\r\n+    }\r\n+\r\n+    public static boolean isRoute(URL url) {\r\n+        return ROUTE_PROTOCOL.equals(url.getProtocol()) ||\r\n+                ROUTERS_CATEGORY.equals(url.getParameter(CATEGORY_KEY, DEFAULT_CATEGORY));\r\n+    }\r\n+\r\n+    public static boolean isProvider(URL url) {\r\n+        return !OVERRIDE_PROTOCOL.equals(url.getProtocol()) &&\r\n+                !ROUTE_PROTOCOL.equals(url.getProtocol()) &&\r\n+                PROVIDERS_CATEGORY.equals(url.getParameter(CATEGORY_KEY, PROVIDERS_CATEGORY));\r\n+    }\r\n+\r\n     /**\r\n      * Check if the given value matches the given pattern. The pattern supports wildcard \"*\".\r\n      *\r\n@@ -459,4 +483,4 @@ static boolean isItemMatch(String pattern, String value) {\n             return \"*\".equals(pattern) || pattern.equals(value);\r\n         }\r\n     }\r\n-}\n\\ No newline at end of file\n+}\r",
                "raw_url": "https://github.com/apache/dubbo/raw/50afb8775cb78acf1592516f31143afc2b6e7e38/dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java",
                "sha": "f93bc5a5f349302d200b25bb576b6f521ab13a36",
                "status": "modified"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/dubbo/blob/50afb8775cb78acf1592516f31143afc2b6e7e38/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java",
                "changes": 161,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java?ref=50afb8775cb78acf1592516f31143afc2b6e7e38",
                "deletions": 115,
                "filename": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java",
                "patch": "@@ -25,6 +25,7 @@\n import org.apache.dubbo.common.utils.Assert;\r\n import org.apache.dubbo.common.utils.NetUtils;\r\n import org.apache.dubbo.common.utils.StringUtils;\r\n+import org.apache.dubbo.common.utils.UrlUtils;\r\n import org.apache.dubbo.configcenter.DynamicConfiguration;\r\n import org.apache.dubbo.registry.NotifyListener;\r\n import org.apache.dubbo.registry.Registry;\r\n@@ -34,7 +35,6 @@\n import org.apache.dubbo.rpc.RpcException;\r\n import org.apache.dubbo.rpc.cluster.Cluster;\r\n import org.apache.dubbo.rpc.cluster.Configurator;\r\n-import org.apache.dubbo.rpc.cluster.ConfiguratorFactory;\r\n import org.apache.dubbo.rpc.cluster.Router;\r\n import org.apache.dubbo.rpc.cluster.RouterChain;\r\n import org.apache.dubbo.rpc.cluster.RouterFactory;\r\n@@ -47,7 +47,6 @@\n import java.util.ArrayList;\r\n import java.util.Collection;\r\n import java.util.Collections;\r\n-import java.util.Comparator;\r\n import java.util.HashMap;\r\n import java.util.HashSet;\r\n import java.util.List;\r\n@@ -61,7 +60,6 @@\n import static org.apache.dubbo.common.Constants.CONFIGURATORS_CATEGORY;\r\n import static org.apache.dubbo.common.Constants.DEFAULT_CATEGORY;\r\n import static org.apache.dubbo.common.Constants.DYNAMIC_CONFIGURATORS_CATEGORY;\r\n-import static org.apache.dubbo.common.Constants.OVERRIDE_PROTOCOL;\r\n import static org.apache.dubbo.common.Constants.PROVIDERS_CATEGORY;\r\n import static org.apache.dubbo.common.Constants.ROUTERS_CATEGORY;\r\n import static org.apache.dubbo.common.Constants.ROUTE_PROTOCOL;\r\n@@ -80,13 +78,10 @@\n     private static final RouterFactory routerFactory = ExtensionLoader.getExtensionLoader(RouterFactory.class)\r\n             .getAdaptiveExtension();\r\n \r\n-    private static final ConfiguratorFactory configuratorFactory = ExtensionLoader.getExtensionLoader(ConfiguratorFactory.class)\r\n-            .getAdaptiveExtension();\r\n     private final String serviceKey; // Initialization at construction time, assertion not null\r\n     private final Class<T> serviceType; // Initialization at construction time, assertion not null\r\n     private final Map<String, String> queryMap; // Initialization at construction time, assertion not null\r\n     private final URL directoryUrl; // Initialization at construction time, assertion not null, and always assign non null value\r\n-    private final String[] serviceMethods;\r\n     private final boolean multiGroup;\r\n     private Protocol protocol; // Initialization at the time of injection, the assertion is not null\r\n     private Registry registry; // Initialization at the time of injection, the assertion is not null\r\n@@ -106,9 +101,6 @@\n     private volatile Map<String, Invoker<T>> urlInvokerMap; // The initial value is null and the midway may be assigned to null, please use the local variable reference\r\n     private volatile List<Invoker<T>> invokers;\r\n \r\n-    // Map<methodName, Invoker> cache service method to invokers mapping.\r\n-//    private volatile Map<String, List<Invoker<T>>> methodInvokerMap; // The initial value is null and the midway may be assigned to null, please use the local variable reference\r\n-\r\n     // Set<invokerUrls> cache invokeUrls to invokers mapping.\r\n     private volatile Set<URL> cachedInvokerUrls; // The initial value is null and the midway may be assigned to null, please use the local variable reference\r\n \r\n@@ -130,8 +122,6 @@ public RegistryDirectory(Class<T> serviceType, URL url) {\n         this.overrideDirectoryUrl = this.directoryUrl = turnRegistryUrlToConsumerUrl(url);\r\n         String group = directoryUrl.getParameter(Constants.GROUP_KEY, \"\");\r\n         this.multiGroup = group != null && (\"*\".equals(group) || group.contains(\",\"));\r\n-        String methods = queryMap.get(Constants.METHODS_KEY);\r\n-        this.serviceMethods = methods == null ? null : Constants.COMMA_SPLIT_PATTERN.split(methods);\r\n     }\r\n \r\n     private URL turnRegistryUrlToConsumerUrl(URL url) {\r\n@@ -187,37 +177,38 @@ public void destroy() {\n \r\n     @Override\r\n     public synchronized void notify(List<URL> urls) {\r\n-        List<URL> categoryUrls = urls.stream().filter(this::isValidCategory).filter(this::isNotCompatibleFor26x).collect(Collectors.toList());\r\n+        List<URL> categoryUrls = urls.stream()\r\n+                .filter(this::isValidCategory)\r\n+                .filter(this::isNotCompatibleFor26x)\r\n+                .collect(Collectors.toList());\r\n \r\n         /**\r\n          * TODO Try to refactor the processing of these three type of urls using Collectors.groupBy()?\r\n          */\r\n-        this.configurators = Configurator.toConfigurators(classifyUrls(categoryUrls, url -> (CONFIGURATORS_CATEGORY.equals(url.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY))\r\n-                 || OVERRIDE_PROTOCOL.equals(url.getProtocol())))).orElse(configurators);\r\n+        this.configurators = Configurator.toConfigurators(classifyUrls(categoryUrls, UrlUtils::isConfigurator))\r\n+                .orElse(configurators);\r\n \r\n-        toRouters(classifyUrls(categoryUrls, url -> {\r\n-            return ROUTE_PROTOCOL.equals(url.getProtocol())\r\n-                    || ROUTERS_CATEGORY.equals(url.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY));\r\n-        })).ifPresent(this::addRouters);\r\n+        toRouters(classifyUrls(categoryUrls, UrlUtils::isRoute)).ifPresent(this::addRouters);\r\n \r\n         // providers\r\n-        refreshOverrideAndInvoker(classifyUrls(categoryUrls, url -> PROVIDERS_CATEGORY.equals(url.getParameter(Constants.CATEGORY_KEY, PROVIDERS_CATEGORY))\r\n-                && !OVERRIDE_PROTOCOL.equals(url.getProtocol())\r\n-                && !ROUTE_PROTOCOL.equals(url.getProtocol()))\r\n-        );\r\n+        refreshOverrideAndInvoker(classifyUrls(categoryUrls, UrlUtils::isProvider));\r\n     }\r\n \r\n-    public void refreshOverrideAndInvoker(List<URL> urls) {\r\n+    private void refreshOverrideAndInvoker(List<URL> urls) {\r\n         // mock zookeeper://xxx?mock=return null\r\n         overrideDirectoryUrl();\r\n         refreshInvoker(urls);\r\n     }\r\n \r\n     /**\r\n      * Convert the invokerURL list to the Invoker Map. The rules of the conversion are as follows:\r\n-     * 1.If URL has been converted to invoker, it is no longer re-referenced and obtained directly from the cache, and notice that any parameter changes in the URL will be re-referenced.\r\n-     * 2.If the incoming invoker list is not empty, it means that it is the latest invoker list\r\n-     * 3.If the list of incoming invokerUrl is empty, It means that the rule is only a override rule or a route rule, which needs to be re-contrasted to decide whether to re-reference.\r\n+     * <ol>\r\n+     * <li> If URL has been converted to invoker, it is no longer re-referenced and obtained directly from the cache,\r\n+     * and notice that any parameter changes in the URL will be re-referenced.</li>\r\n+     * <li>If the incoming invoker list is not empty, it means that it is the latest invoker list.</li>\r\n+     * <li>If the list of incoming invokerUrl is empty, It means that the rule is only a override rule or a route\r\n+     * rule, which needs to be re-contrasted to decide whether to re-reference.</li>\r\n+     * </ol>\r\n      *\r\n      * @param invokerUrls this parameter can't be null\r\n      */\r\n@@ -248,7 +239,6 @@ private void refreshInvoker(List<URL> invokerUrls) {\n                 return;\r\n             }\r\n             Map<String, Invoker<T>> newUrlInvokerMap = toInvokers(invokerUrls);// Translate url list to Invoker map\r\n-//            Map<String, List<Invoker<T>>> newMethodInvokerMap = toMethodInvokers(newUrlInvokerMap); // Change method name to map Invoker Map\r\n \r\n             // state change\r\n             // If the calculation is wrong, it is not processed.\r\n@@ -262,7 +252,6 @@ private void refreshInvoker(List<URL> invokerUrls) {\n             // pre-route and build cache, notice that route cache should build on original Invoker list.\r\n             // toMergeMethodInvokerMap() will wrap some invokers having different groups, those wrapped invokers not should be routed.\r\n             routerChain.setInvokers(newInvokers);\r\n-//            this.methodInvokerMap = multiGroup ? toMergeMethodInvokerMap(newMethodInvokerMap) : newMethodInvokerMap;\r\n             this.invokers = multiGroup ? toMergeInvokerList(newInvokers) : newInvokers;\r\n             this.urlInvokerMap = newUrlInvokerMap;\r\n \r\n@@ -307,7 +296,7 @@ private void refreshInvoker(List<URL> invokerUrls) {\n             return Optional.empty();\r\n         }\r\n \r\n-        List<Router> routers = new ArrayList<Router>();\r\n+        List<Router> routers = new ArrayList<>();\r\n         for (URL url : urls) {\r\n             if (Constants.EMPTY_PROTOCOL.equals(url.getProtocol())) {\r\n                 continue;\r\n@@ -318,8 +307,9 @@ private void refreshInvoker(List<URL> invokerUrls) {\n             }\r\n             try {\r\n                 Router router = routerFactory.getRouter(url);\r\n-                routerChain.addRouter(router);\r\n-                if (!routers.contains(router)) routers.add(router);\r\n+                if (!routers.contains(router)) {\r\n+                    routers.add(router);\r\n+                }\r\n             } catch (Throwable t) {\r\n                 logger.error(\"convert router url to router error, url: \" + url, t);\r\n             }\r\n@@ -360,10 +350,10 @@ private void refreshInvoker(List<URL> invokerUrls) {\n                 continue;\r\n             }\r\n             if (!ExtensionLoader.getExtensionLoader(Protocol.class).hasExtension(providerUrl.getProtocol())) {\r\n-                logger.error(new IllegalStateException(\"Unsupported protocol \" + providerUrl.getProtocol() + \" in notified url: \" + providerUrl + \" from registry \" + getUrl()\r\n-                        .getAddress() + \" to consumer \" + NetUtils.getLocalHost() + \", supported protocol: \" + ExtensionLoader\r\n-                        .getExtensionLoader(Protocol.class)\r\n-                        .getSupportedExtensions()));\r\n+                logger.error(new IllegalStateException(\"Unsupported protocol \" + providerUrl.getProtocol() +\r\n+                        \" in notified url: \" + providerUrl + \" from registry \" + getUrl().getAddress() +\r\n+                        \" to consumer \" + NetUtils.getLocalHost() + \", supported protocol: \" +\r\n+                        ExtensionLoader.getExtensionLoader(Protocol.class).getSupportedExtensions()));\r\n                 continue;\r\n             }\r\n             URL url = mergeUrl(providerUrl);\r\n@@ -437,71 +427,27 @@ private URL mergeUrl(URL providerUrl) {\n     }\r\n \r\n     private URL overrideWithConfigurator(URL providerUrl) {\r\n-        List<Configurator> localConfigurators = this.configurators; // local reference\r\n-        if (localConfigurators != null && !localConfigurators.isEmpty()) {\r\n-            for (Configurator configurator : localConfigurators) {\r\n-                providerUrl = configurator.configure(providerUrl);\r\n-            }\r\n-        }\r\n+        // override url with configurator from \"override://\" URL for dubbo 2.6 and before\r\n+        providerUrl = overrideWithConfigurators(this.configurators, providerUrl);\r\n \r\n-        List<Configurator> localAppDynamicConfigurators = consumerConfigurationListener.getConfigurators(); // local reference\r\n-        if (localAppDynamicConfigurators != null && !localAppDynamicConfigurators.isEmpty()) {\r\n-            for (Configurator configurator : localAppDynamicConfigurators) {\r\n-                providerUrl = configurator.configure(providerUrl);\r\n-            }\r\n-        }\r\n+        // override url with configurator from configurator from \"app-name.configurators\"\r\n+        providerUrl = overrideWithConfigurators(consumerConfigurationListener.getConfigurators(), providerUrl);\r\n \r\n+        // override url with configurator from configurators from \"service-name.configurators\"\r\n         if (serviceConfigurationListener != null) {\r\n-            List<Configurator> localDynamicConfigurators = serviceConfigurationListener.getConfigurators(); // local reference\r\n-            if (localDynamicConfigurators != null && !localDynamicConfigurators.isEmpty()) {\r\n-                for (Configurator configurator : localDynamicConfigurators) {\r\n-                    providerUrl = configurator.configure(providerUrl);\r\n-                }\r\n-            }\r\n+            providerUrl = overrideWithConfigurators(serviceConfigurationListener.getConfigurators(), providerUrl);\r\n         }\r\n \r\n         return providerUrl;\r\n     }\r\n \r\n-    /**\r\n-     * Transform the invokers list into a mapping relationship with a method\r\n-     *\r\n-     * @param invokersMap Invoker Map\r\n-     * @return Mapping relation between Invoker and method\r\n-     */\r\n-    private Map<String, List<Invoker<T>>> toMethodInvokers(Map<String, Invoker<T>> invokersMap) {\r\n-        Map<String, List<Invoker<T>>> newMethodInvokerMap = new HashMap<String, List<Invoker<T>>>();\r\n-        // According to the methods classification declared by the provider URL, the methods is compatible with the registry to execute the filtered methods\r\n-        List<Invoker<T>> invokersList = new ArrayList<Invoker<T>>();\r\n-        if (invokersMap != null && invokersMap.size() > 0) {\r\n-            for (Invoker<T> invoker : invokersMap.values()) {\r\n-                String parameter = invoker.getUrl().getParameter(Constants.METHODS_KEY);\r\n-                if (parameter != null && parameter.length() > 0) {\r\n-                    String[] methods = Constants.COMMA_SPLIT_PATTERN.split(parameter);\r\n-                    if (methods != null && methods.length > 0) {\r\n-                        for (String method : methods) {\r\n-                            if (method != null && method.length() > 0 && !Constants.ANY_VALUE.equals(method)) {\r\n-                                List<Invoker<T>> methodInvokers = newMethodInvokerMap.get(method);\r\n-                                if (methodInvokers == null) {\r\n-                                    methodInvokers = new ArrayList<Invoker<T>>();\r\n-                                    newMethodInvokerMap.put(method, methodInvokers);\r\n-                                }\r\n-                                methodInvokers.add(invoker);\r\n-                            }\r\n-                        }\r\n-                    }\r\n-                }\r\n-                invokersList.add(invoker);\r\n+    private URL overrideWithConfigurators(List<Configurator> configurators, URL url) {\r\n+        if (configurators != null && !configurators.isEmpty()) {\r\n+            for (Configurator configurator : configurators) {\r\n+                url = configurator.configure(url);\r\n             }\r\n         }\r\n-        newMethodInvokerMap.put(Constants.ANY_VALUE, invokersList);\r\n-        // sort and unmodifiable\r\n-        for (String method : new HashSet<String>(newMethodInvokerMap.keySet())) {\r\n-            List<Invoker<T>> methodInvokers = newMethodInvokerMap.get(method);\r\n-            Collections.sort(methodInvokers, InvokerComparator.getComparator());\r\n-            newMethodInvokerMap.put(method, Collections.unmodifiableList(methodInvokers));\r\n-        }\r\n-        return Collections.unmodifiableMap(newMethodInvokerMap);\r\n+        return url;\r\n     }\r\n \r\n     /**\r\n@@ -571,8 +517,10 @@ private void destroyUnusedInvokers(Map<String, Invoker<T>> oldUrlInvokerMap, Map\n     public List<Invoker<T>> doList(Invocation invocation) {\r\n         if (forbidden) {\r\n             // 1. No service provider 2. Service providers are disabled\r\n-            throw new RpcException(RpcException.FORBIDDEN_EXCEPTION, \"No provider available from registry \" + getUrl().getAddress() + \" for service \" + getConsumerUrl()\r\n-                    .getServiceKey() + \" on consumer \" + NetUtils.getLocalHost() + \" use dubbo version \" + Version.getVersion() + \", please check status of providers(disabled, not registered or in blacklist).\");\r\n+            throw new RpcException(RpcException.FORBIDDEN_EXCEPTION, \"No provider available from registry \" +\r\n+                    getUrl().getAddress() + \" for service \" + getConsumerUrl().getServiceKey() + \" on consumer \" +\r\n+                    NetUtils.getLocalHost() + \" use dubbo version \" + Version.getVersion() +\r\n+                    \", please check status of providers(disabled, not registered or in blacklist).\");\r\n         }\r\n \r\n         if (multiGroup) {\r\n@@ -647,33 +595,16 @@ public void buildRouterChain(URL url) {\n         return invokers;\r\n     }\r\n \r\n-    private static class InvokerComparator implements Comparator<Invoker<?>> {\r\n-\r\n-        private static final InvokerComparator comparator = new InvokerComparator();\r\n-\r\n-        private InvokerComparator() {\r\n-        }\r\n-\r\n-        public static InvokerComparator getComparator() {\r\n-            return comparator;\r\n-        }\r\n-\r\n-        @Override\r\n-        public int compare(Invoker<?> o1, Invoker<?> o2) {\r\n-            return o1.getUrl().toString().compareTo(o2.getUrl().toString());\r\n-        }\r\n-\r\n-    }\r\n-\r\n     private boolean isValidCategory(URL url) {\r\n         String category = url.getParameter(CATEGORY_KEY, DEFAULT_CATEGORY);\r\n-        if ((ROUTERS_CATEGORY.equals(category) || ROUTE_PROTOCOL.equals(url.getProtocol())) || PROVIDERS_CATEGORY.equals(category) || CONFIGURATORS_CATEGORY\r\n-                .equals(category) || DYNAMIC_CONFIGURATORS_CATEGORY.equals(category) || APP_DYNAMIC_CONFIGURATORS_CATEGORY\r\n-                .equals(category)) {\r\n+        if ((ROUTERS_CATEGORY.equals(category) || ROUTE_PROTOCOL.equals(url.getProtocol())) ||\r\n+                PROVIDERS_CATEGORY.equals(category) ||\r\n+                CONFIGURATORS_CATEGORY.equals(category) || DYNAMIC_CONFIGURATORS_CATEGORY.equals(category) ||\r\n+                APP_DYNAMIC_CONFIGURATORS_CATEGORY.equals(category)) {\r\n             return true;\r\n         }\r\n-        logger.warn(\"Unsupported category \" + category + \" in notified url: \" + url + \" from registry \" + getUrl().getAddress() + \" to consumer \" + NetUtils\r\n-                .getLocalHost());\r\n+        logger.warn(\"Unsupported category \" + category + \" in notified url: \" + url + \" from registry \" +\r\n+                getUrl().getAddress() + \" to consumer \" + NetUtils.getLocalHost());\r\n         return false;\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/50afb8775cb78acf1592516f31143afc2b6e7e38/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java",
                "sha": "5ebace2a4b283364f8e217ed2e8e1f29951508e4",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #3083 beiwei30/incubator-dubbo,  more code review.\n\n* refactor ScriptRouter\r\n\r\n* refactor TagRouter\r\n\r\n* refactor AbstractConfiguratorListener\r\n\r\n* make sure parameter should not be null\r\n\r\n* correct comments\r\n\r\n* make ReferenceConfigurationListener private static\r\n\r\n* avoid dup code in init\r\n\r\n* add fixme for potential useless code\r\n\r\n* clean up useless variables\r\n\r\n* move methods into UrlUtils\r\n\r\n* make method private\r\n\r\n* reformat javadoc\r\n\r\n* avoid dup code\r\n\r\n* reformat log message\r\n\r\n* reformat log message\r\n\r\n* reformat the code\r\n\r\n* remove useless imports\r\n\r\n* remove useless code\r\n\r\n* refactor ScriptRouter\r\n\r\n* refactor TagRouter\r\n\r\n* refactor AbstractConfiguratorListener\r\n\r\n* Add comment\r\n\r\n* Fix UT\r\n\r\n* make sure parameter should not be null\r\n\r\n* correct comments\r\n\r\n* make ReferenceConfigurationListener private static\r\n\r\n* Revert demo changes\r\n\r\n* Revert code to avoid NPE in RPC wire after providers are cleared.\r\n\r\n* make ListenableRouter code thread safe\r\n\r\n* Fix UT\r\n\r\n* Remove assert check to continue with execute.\r\n\r\n* avoid dup code in init\r\n\r\n* solve compile error\r\n\r\n* add fixme for potential useless code\r\n\r\n* clean up useless variables\r\n\r\n* move methods into UrlUtils\r\n\r\n* make method private\r\n\r\n* reformat javadoc\r\n\r\n* avoid dup code\r\n\r\n* reformat log message\r\n\r\n* reformat log message\r\n\r\n* reformat the code\r\n\r\n* remove useless imports\r\n\r\n* remove useless code\r\n\r\n* code review comments from @khanimteyaz\r\n\r\n* code review from @khanimteyaz",
        "parent": "https://github.com/apache/dubbo/commit/5c54c6837876b7daf0c55d9f9cafde109baa1a5d",
        "repo": "dubbo",
        "unit_tests": [
            "RegistryDirectoryTest.java"
        ]
    },
    "dubbo_5434ab7": {
        "bug_id": "dubbo_5434ab7",
        "commit": "https://github.com/apache/dubbo/commit/5434ab74c724e4ed0f4b7dab11e6758a0a9c48d8",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/dubbo/blob/5434ab74c724e4ed0f4b7dab11e6758a0a9c48d8/dubbo-common/src/main/java/org/apache/dubbo/common/Version.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/Version.java?ref=5434ab74c724e4ed0f4b7dab11e6758a0a9c48d8",
                "deletions": 8,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/Version.java",
                "patch": "@@ -144,14 +144,18 @@ private static String getPrefixDigits(String v) {\n     public static String getVersion(Class<?> cls, String defaultVersion) {\n         try {\n             // find version info from MANIFEST.MF first\n-            String version = cls.getPackage().getImplementationVersion();\n-            if (!StringUtils.isEmpty(version)) {\n-                return version;\n-            }\n-            \n-            version = cls.getPackage().getSpecificationVersion();\n-            if (!StringUtils.isEmpty(version)) {\n-                return version;\n+            Package pkg = cls.getPackage();\n+            String version = null;\n+            if (pkg != null) {\n+                version = pkg.getImplementationVersion();\n+                if (!StringUtils.isEmpty(version)) {\n+                    return version;\n+                }\n+\n+                version = pkg.getSpecificationVersion();\n+                if (!StringUtils.isEmpty(version)) {\n+                    return version;\n+                }\n             }\n             \n             // guess version fro jar file name if nothing's found from MANIFEST.MF",
                "raw_url": "https://github.com/apache/dubbo/raw/5434ab74c724e4ed0f4b7dab11e6758a0a9c48d8/dubbo-common/src/main/java/org/apache/dubbo/common/Version.java",
                "sha": "0ab48a6c4fc971a448ee7fde019519f5aab8ea34",
                "status": "modified"
            }
        ],
        "message": "Fix npe when package is null. (#3557)",
        "parent": "https://github.com/apache/dubbo/commit/ade0cd70243416fadb0a4a52ad4e8df191738f92",
        "repo": "dubbo",
        "unit_tests": [
            "VersionTest.java"
        ]
    },
    "dubbo_a55c10d": {
        "bug_id": "dubbo_a55c10d",
        "commit": "https://github.com/apache/dubbo/commit/a55c10d7c5a819c80f4252299ea49dd20feeeb47",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/dubbo/blob/a55c10d7c5a819c80f4252299ea49dd20feeeb47/dubbo-common/src/main/java/com/alibaba/dubbo/common/Version.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/com/alibaba/dubbo/common/Version.java?ref=a55c10d7c5a819c80f4252299ea49dd20feeeb47",
                "deletions": 15,
                "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/Version.java",
                "patch": "@@ -16,6 +16,7 @@\n package com.alibaba.dubbo.common;\n \n import java.net.URL;\n+import java.security.CodeSource;\n import java.util.Enumeration;\n import java.util.HashSet;\n import java.util.Set;\n@@ -75,26 +76,32 @@ public static String getVersion(Class<?> cls, String defaultVersion) {\n             }\n             if (version == null || version.length() == 0) {\n                 // \u5982\u679c\u89c4\u8303\u4e2d\u6ca1\u6709\u7248\u672c\u53f7\uff0c\u57fa\u4e8ejar\u5305\u540d\u83b7\u53d6\u7248\u672c\u53f7\n-                String file = cls.getProtectionDomain().getCodeSource().getLocation().getFile();\n-                if (file != null && file.length() > 0 && file.endsWith(\".jar\")) {\n-                    file = file.substring(0, file.length() - 4);\n-                    int i = file.lastIndexOf('/');\n-                    if (i >= 0) {\n-                        file = file.substring(i + 1);\n-                    }\n-                    i = file.indexOf(\"-\");\n-                    if (i >= 0) {\n-                        file = file.substring(i + 1);\n-                    }\n-                    while (file.length() > 0 && ! Character.isDigit(file.charAt(0))) {\n+                CodeSource codeSource = cls.getProtectionDomain().getCodeSource();\n+                if(codeSource == null) {\n+                    logger.info(\"No codeSource for class \" + cls.getName() + \" when getVersion, use default version \" + defaultVersion);\n+                }\n+                else {\n+                    String file = codeSource.getLocation().getFile();\n+                    if (file != null && file.length() > 0 && file.endsWith(\".jar\")) {\n+                        file = file.substring(0, file.length() - 4);\n+                        int i = file.lastIndexOf('/');\n+                        if (i >= 0) {\n+                            file = file.substring(i + 1);\n+                        }\n                         i = file.indexOf(\"-\");\n                         if (i >= 0) {\n                             file = file.substring(i + 1);\n-                        } else {\n-                            break;\n                         }\n+                        while (file.length() > 0 && ! Character.isDigit(file.charAt(0))) {\n+                            i = file.indexOf(\"-\");\n+                            if (i >= 0) {\n+                                file = file.substring(i + 1);\n+                            } else {\n+                                break;\n+                            }\n+                        }\n+                        version = file;\n                     }\n-                    version = file;\n                 }\n             }\n             // \u8fd4\u56de\u7248\u672c\u53f7\uff0c\u5982\u679c\u4e3a\u7a7a\u8fd4\u56de\u7f3a\u7701\u7248\u672c\u53f7",
                "raw_url": "https://github.com/apache/dubbo/raw/a55c10d7c5a819c80f4252299ea49dd20feeeb47/dubbo-common/src/main/java/com/alibaba/dubbo/common/Version.java",
                "sha": "716426932e2b0c2a5b4a5721ec0157900ffc4756",
                "status": "modified"
            }
        ],
        "message": "DUBBO-573 Version.getVersion\u51faNPE",
        "parent": "https://github.com/apache/dubbo/commit/85310c7d674e0f0f0951c9a605e6dda37d7c262e",
        "repo": "dubbo",
        "unit_tests": [
            "VersionTest.java"
        ]
    },
    "dubbo_b013e7b": {
        "bug_id": "dubbo_b013e7b",
        "commit": "https://github.com/apache/dubbo/commit/b013e7bdf87bca5244b6602854ff7acf4820f4c4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/b013e7bdf87bca5244b6602854ff7acf4820f4c4/dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java?ref=b013e7bdf87bca5244b6602854ff7acf4820f4c4",
                "deletions": 1,
                "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java",
                "patch": "@@ -880,7 +880,7 @@ public String toParameterString(String... parameters) {\n \t}\r\n \t\r\n \tprivate void buildParameters(StringBuilder buf, boolean concat, String[] parameters) {\r\n-\t    if (getParameters().size() > 0) {\r\n+\t    if (getParameters() !=null && getParameters().size() > 0) {\r\n             List<String> includes = (parameters == null || parameters.length == 0 ? null : Arrays.asList(parameters));\r\n             boolean first = true;\r\n             for (Map.Entry<String, String> entry : new TreeMap<String, String>(getParameters()).entrySet()) {\r",
                "raw_url": "https://github.com/apache/dubbo/raw/b013e7bdf87bca5244b6602854ff7acf4820f4c4/dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java",
                "sha": "f48005f0720bba68a7ccbb3c0bc219ee187e47aa",
                "status": "modified"
            }
        ],
        "message": "\u6dfb\u52a0null\u5224\u65ad\uff0c\u907f\u514dNPE\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@260 1a56cb94-b969-4eaa-88fa-be21384802f2",
        "parent": "https://github.com/apache/dubbo/commit/6dbfb5c37e640a549e25a7b6fd2df9698bad5474",
        "repo": "dubbo",
        "unit_tests": [
            "URLTest.java"
        ]
    },
    "dubbo_bdfc500": {
        "bug_id": "dubbo_bdfc500",
        "commit": "https://github.com/apache/dubbo/commit/bdfc5007fa5cad80d22b5c0422e55c1fcb745dc4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/bdfc5007fa5cad80d22b5c0422e55c1fcb745dc4/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java?ref=bdfc5007fa5cad80d22b5c0422e55c1fcb745dc4",
                "deletions": 1,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java",
                "patch": "@@ -57,7 +57,7 @@\n     private TagRouterRule tagRouterRule;\n     private String application;\n \n-    private AtomicBoolean isInited;\n+    private AtomicBoolean isInited = new AtomicBoolean(false);\n \n     public TagRouter(URL url) {\n         this(ExtensionLoader.getExtensionLoader(DynamicConfigurationFactory.class).getAdaptiveExtension().getDynamicConfiguration(url), url);",
                "raw_url": "https://github.com/apache/dubbo/raw/bdfc5007fa5cad80d22b5c0422e55c1fcb745dc4/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java",
                "sha": "7f2ad735858ef88768b37807196ad96af97b69ee",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in TagRouter",
        "parent": "https://github.com/apache/dubbo/commit/b7e8b1e02a11c4743de5ddd43550bf117ad0d34d",
        "repo": "dubbo",
        "unit_tests": [
            "TagRouterTest.java"
        ]
    },
    "dubbo_c18b1cf": {
        "bug_id": "dubbo_c18b1cf",
        "commit": "https://github.com/apache/dubbo/commit/c18b1cfb465181b0a446eb37cb12e5a4eab1d617",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/dubbo/blob/c18b1cfb465181b0a446eb37cb12e5a4eab1d617/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java?ref=c18b1cfb465181b0a446eb37cb12e5a4eab1d617",
                "deletions": 6,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java",
                "patch": "@@ -18,6 +18,7 @@\n \n import org.apache.dubbo.common.URL;\n import org.apache.dubbo.common.extension.ExtensionLoader;\n+import org.apache.dubbo.common.utils.CollectionUtils;\n import org.apache.dubbo.rpc.Invocation;\n import org.apache.dubbo.rpc.Invoker;\n \n@@ -79,12 +80,11 @@ public void addRouter(Router router) {\n      * @param routers routers from 'router://' rules in 2.6.x or before.\n      */\n     public void addRouters(List<Router> routers) {\n-        // FIXME will sort cause concurrent problem? since it's kind of a write operation.\n         List<Router> newRouters = new CopyOnWriteArrayList<>();\n         newRouters.addAll(builtinRouters);\n         newRouters.addAll(routers);\n+        CollectionUtils.sort(routers);\n         this.routers = newRouters;\n-        this.sort();\n     }\n \n     private void sort() {\n@@ -110,9 +110,7 @@ private void sort() {\n      * Notify whenever addresses in registry change.\n      */\n     public void setInvokers(List<Invoker<T>> invokers) {\n-        if (invokers != null) {\n-            this.invokers = invokers;\n-            routers.forEach(router -> router.notify(invokers));\n-        }\n+        this.invokers = (invokers == null ? Collections.emptyList() : invokers);\n+        routers.forEach(router -> router.notify(this.invokers));\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/c18b1cfb465181b0a446eb37cb12e5a4eab1d617/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java",
                "sha": "ca6e98f359bc9b02130e3729d853a31fa1c3b1d8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/c18b1cfb465181b0a446eb37cb12e5a4eab1d617/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java?ref=c18b1cfb465181b0a446eb37cb12e5a4eab1d617",
                "deletions": 36,
                "filename": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java",
                "patch": "@@ -227,7 +227,7 @@ private void refreshInvoker(List<URL> invokerUrls) {\n                 .get(0)\r\n                 .getProtocol())) {\r\n             this.forbidden = true; // Forbid to access\r\n-            this.invokers = null;\r\n+            this.invokers = Collections.emptyList();\r\n             routerChain.setInvokers(this.invokers);\r\n             destroyAllInvokers(); // Close all invokers\r\n         } else {\r\n@@ -295,41 +295,6 @@ private void refreshInvoker(List<URL> invokerUrls) {\n         return mergedInvokers;\r\n     }\r\n \r\n-    /*private Map<String, List<Invoker<T>>> toMergeMethodInvokerMap(Map<String, List<Invoker<T>>> methodMap) {\r\n-        Map<String, List<Invoker<T>>> result = new HashMap<String, List<Invoker<T>>>();\r\n-        for (Map.Entry<String, List<Invoker<T>>> entry : methodMap.entrySet()) {\r\n-            String method = entry.getKey();\r\n-            List<Invoker<T>> invokers = entry.getValue();\r\n-            Map<String, List<Invoker<T>>> groupMap = new HashMap<String, List<Invoker<T>>>();\r\n-            for (Invoker<T> invoker : invokers) {\r\n-                String group = invoker.getUrl().getParameter(Constants.GROUP_KEY, \"\");\r\n-                List<Invoker<T>> groupInvokers = groupMap.get(group);\r\n-                if (groupInvokers == null) {\r\n-                    groupInvokers = new ArrayList<Invoker<T>>();\r\n-                    groupMap.put(group, groupInvokers);\r\n-                }\r\n-                groupInvokers.add(invoker);\r\n-            }\r\n-            if (groupMap.size() == 1) {\r\n-                result.put(method, groupMap.values().iterator().next());\r\n-            } else if (groupMap.size() > 1) {\r\n-                List<Invoker<T>> groupInvokers = new ArrayList<Invoker<T>>();\r\n-                for (List<Invoker<T>> groupList : groupMap.values()) {\r\n-                    StaticDirectory<T> staticDirectory = new StaticDirectory<>(groupList);\r\n-                    Map<String, List<Invoker<T>>> methodGroupInvokers = new HashMap<>();\r\n-                    methodGroupInvokers.put(method, groupList);\r\n-                    staticDirectory.buildRouterChain(methodGroupInvokers, dynamicConfiguration);\r\n-                    groupInvokers.add(cluster.join(staticDirectory));\r\n-                }\r\n-                result.put(method, groupInvokers);\r\n-            } else {\r\n-                result.put(method, invokers);\r\n-            }\r\n-        }\r\n-        return result;\r\n-    }\r\n-*/\r\n-\r\n     /**\r\n      * @param urls\r\n      * @return null : no routers ,do nothing\r",
                "raw_url": "https://github.com/apache/dubbo/raw/c18b1cfb465181b0a446eb37cb12e5a4eab1d617/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java",
                "sha": "e886d139274fe2ec0af68d7581d78e4d67adb422",
                "status": "modified"
            }
        ],
        "message": "Revert code to avoid NPE in RPC wire after providers are cleared.",
        "parent": "https://github.com/apache/dubbo/commit/0282a4203b3ad02923b1977e38b5f1d6bfb019c8",
        "repo": "dubbo",
        "unit_tests": [
            "RegistryDirectoryTest.java"
        ]
    },
    "dubbo_d962113": {
        "bug_id": "dubbo_d962113",
        "commit": "https://github.com/apache/dubbo/commit/d962113622f0a4db5d6a0fa06cfb3055ba92805d",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/d962113622f0a4db5d6a0fa06cfb3055ba92805d/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java?ref=d962113622f0a4db5d6a0fa06cfb3055ba92805d",
                "deletions": 2,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "patch": "@@ -364,14 +364,14 @@ private static String extractPropertyName(Class<?> clazz, Method setter) throws\n         Method getter = null;\r\n         try {\r\n             getter = clazz.getMethod(\"get\" + propertyName);\r\n-            propertyName = propertyName.substring(3, 4).toLowerCase() + propertyName.substring(4);\r\n         } catch (NoSuchMethodException e) {\r\n             getter = clazz.getMethod(\"is\" + propertyName);\r\n-            propertyName = propertyName.substring(2, 3).toLowerCase() + propertyName.substring(3);\r\n         }\r\n         Parameter parameter = getter.getAnnotation(Parameter.class);\r\n         if (parameter != null && StringUtils.isNotEmpty(parameter.key()) && parameter.useKeyAsProperty()) {\r\n             propertyName = parameter.key();\r\n+        } else {\r\n+            propertyName = propertyName.substring(0, 1).toLowerCase() + propertyName.substring(1);\r\n         }\r\n         return propertyName;\r\n     }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/d962113622f0a4db5d6a0fa06cfb3055ba92805d/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "sha": "f4abaf385bd22b0f0a88be7db46bdfe960b74d3c",
                "status": "modified"
            }
        ],
        "message": "fix NPE",
        "parent": "https://github.com/apache/dubbo/commit/fdc9202f9732292bd4661442df240f881118411d",
        "repo": "dubbo",
        "unit_tests": [
            "AbstractConfigTest.java"
        ]
    }
}