{
    "struts_09302fa": {
        "bug_id": "struts_09302fa",
        "commit": "https://github.com/apache/struts/commit/09302facdaea6eedd8835e961741732b860d26e1",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/struts/blob/09302facdaea6eedd8835e961741732b860d26e1/xwork-core/src/main/java/com/opensymphony/xwork2/conversion/annotations/TypeConversion.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/xwork-core/src/main/java/com/opensymphony/xwork2/conversion/annotations/TypeConversion.java?ref=09302facdaea6eedd8835e961741732b860d26e1",
                "deletions": 1,
                "filename": "xwork-core/src/main/java/com/opensymphony/xwork2/conversion/annotations/TypeConversion.java",
                "patch": "@@ -155,7 +155,7 @@\n \n     /**\n      * The ConversionRule can be a PROPERTY, KEY, KEY_PROPERTY, ELEMENT, COLLECTION (deprecated) or a MAP.\n-     * Note: Collection and Map vonversion rules can be determined via com.opensymphony.xwork2.util.DefaultObjectTypeDeterminer.\n+     * Note: Collection and Map conversion rules can be determined via com.opensymphony.xwork2.util.DefaultObjectTypeDeterminer.\n      *\n      * @see com.opensymphony.xwork2.conversion.impl.DefaultObjectTypeDeterminer\n      */",
                "raw_url": "https://github.com/apache/struts/raw/09302facdaea6eedd8835e961741732b860d26e1/xwork-core/src/main/java/com/opensymphony/xwork2/conversion/annotations/TypeConversion.java",
                "sha": "d54bd2f85aaee366d1f9db994e792ac68d99d9a0",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/struts/blob/09302facdaea6eedd8835e961741732b860d26e1/xwork-core/src/main/java/com/opensymphony/xwork2/conversion/impl/XWorkConverter.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/xwork-core/src/main/java/com/opensymphony/xwork2/conversion/impl/XWorkConverter.java?ref=09302facdaea6eedd8835e961741732b860d26e1",
                "deletions": 1,
                "filename": "xwork-core/src/main/java/com/opensymphony/xwork2/conversion/impl/XWorkConverter.java",
                "patch": "@@ -440,6 +440,9 @@ protected Object getConverter(Class clazz, String property) {\n                     }\n                     return converter;\n                 } catch (Throwable t) {\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"Got exception trying to resolve convert for class [#0] and property [#1]\", t, clazz.getName(), property);\n+                    }\n                     noMapping.add(clazz);\n                 }\n             }\n@@ -753,7 +756,7 @@ else if (tc.rule().toString().equals(ConversionRule.KEY.toString())) {\n \n         if (reloadingConfigs) {\n             URL fileUrl = ClassLoaderUtil.getResource(buildConverterFilename(clazz), clazz);\n-            if (fileManager.fileNeedsReloading(fileUrl.toString())) {\n+            if (fileManager.fileNeedsReloading(fileUrl)) {\n                 mapping = buildConverterMapping(clazz);\n             }\n         }",
                "raw_url": "https://github.com/apache/struts/raw/09302facdaea6eedd8835e961741732b860d26e1/xwork-core/src/main/java/com/opensymphony/xwork2/conversion/impl/XWorkConverter.java",
                "sha": "1fad29ed8d94e14405a4e3c32008c8e1fae83ed3",
                "status": "modified"
            }
        ],
        "message": "WW-3837 solves problem with NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@1433600 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/struts/commit/2db92f70406af8f0c15d3d7f5ff8822c10b72715",
        "repo": "struts",
        "unit_tests": [
            "XWorkConverterTest.java"
        ]
    },
    "struts_1189735": {
        "bug_id": "struts_1189735",
        "commit": "https://github.com/apache/struts/commit/1189735db76a6ecd869c82121a103282f53b7e45",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/struts/blob/1189735db76a6ecd869c82121a103282f53b7e45/archetypes/struts2-archetype-starter/src/main/resources/archetype-resources/src/main/resources/struts.properties",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/archetypes/struts2-archetype-starter/src/main/resources/archetype-resources/src/main/resources/struts.properties?ref=1189735db76a6ecd869c82121a103282f53b7e45",
                "deletions": 5,
                "filename": "archetypes/struts2-archetype-starter/src/main/resources/archetype-resources/src/main/resources/struts.properties",
                "patch": "@@ -4,11 +4,6 @@\n ###(can be overridden by a struts.properties file in the root of the classpath)\n ###\n \n-### Specifies the Configuration used to configure Struts 2.0\n-### one could extend org.apache.struts2.config.Configuration\n-### to build one's customize way of getting the configurations parameters into Struts 2.0\n-# struts.configuration=org.apache.struts2.config.DefaultConfiguration\n-\n ### This can be used to set your default locale and encoding scheme\n # struts.locale=en_US\n struts.i18n.encoding=UTF-8",
                "raw_url": "https://github.com/apache/struts/raw/1189735db76a6ecd869c82121a103282f53b7e45/archetypes/struts2-archetype-starter/src/main/resources/archetype-resources/src/main/resources/struts.properties",
                "sha": "11328c99893da0c8b753ce62e5706ed67e8679ea",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/struts/blob/1189735db76a6ecd869c82121a103282f53b7e45/core/src/main/java/org/apache/struts2/config/DefaultPropertiesProvider.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/config/DefaultPropertiesProvider.java?ref=1189735db76a6ecd869c82121a103282f53b7e45",
                "deletions": 8,
                "filename": "core/src/main/java/org/apache/struts2/config/DefaultPropertiesProvider.java",
                "patch": "@@ -29,25 +29,21 @@\n /**\n  * Loads the default properties, separate from the usual struts.properties loading\n  */\n-public class DefaultPropertiesProvider extends LegacyPropertiesConfigurationProvider {\n+public class DefaultPropertiesProvider extends PropertiesConfigurationProvider {\n \n     public void destroy() {\n     }\n \n     public void init(Configuration configuration) throws ConfigurationException {\n     }\n \n-    public void register(ContainerBuilder builder, LocatableProperties props)\n-            throws ConfigurationException {\n-        \n-        Settings defaultSettings = null;\n+    public void register(ContainerBuilder builder, LocatableProperties props) throws ConfigurationException {\n         try {\n-            defaultSettings = new PropertiesSettings(\"org/apache/struts2/default\");\n+            PropertiesSettings defaultSettings = new PropertiesSettings(\"org/apache/struts2/default\");\n+            loadSettings(props, defaultSettings);\n         } catch (Exception e) {\n             throw new ConfigurationException(\"Could not find or error in org/apache/struts2/default.properties\", e);\n         }\n-        \n-        loadSettings(props, defaultSettings);\n     }\n \n }",
                "raw_url": "https://github.com/apache/struts/raw/1189735db76a6ecd869c82121a103282f53b7e45/core/src/main/java/org/apache/struts2/config/DefaultPropertiesProvider.java",
                "sha": "72552512a39e11cac514d7c5c1ae11f386b06dcc",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/struts/blob/1189735db76a6ecd869c82121a103282f53b7e45/core/src/main/java/org/apache/struts2/config/DefaultSettings.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/config/DefaultSettings.java?ref=1189735db76a6ecd869c82121a103282f53b7e45",
                "deletions": 38,
                "filename": "core/src/main/java/org/apache/struts2/config/DefaultSettings.java",
                "patch": "@@ -21,15 +21,16 @@\n \n package org.apache.struts2.config;\n \n+import com.opensymphony.xwork2.util.location.Location;\n+import com.opensymphony.xwork2.util.logging.Logger;\n+import com.opensymphony.xwork2.util.logging.LoggerFactory;\n+import org.apache.struts2.StrutsConstants;\n+import org.apache.struts2.security.DefaultSecurityGate;\n+\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.StringTokenizer;\n \n-import org.apache.struts2.StrutsConstants;\n-\n-import com.opensymphony.xwork2.util.logging.Logger;\n-import com.opensymphony.xwork2.util.logging.LoggerFactory;\n-\n \n \n /**\n@@ -38,17 +39,14 @@\n  * This class creates and delegates to other settings by using an internal\n  * {@link DelegatingSettings} object.\n  */\n-public class DefaultSettings extends Settings {\n+public class DefaultSettings implements Settings {\n \n-    /**\n-     * The logging instance for this class.\n-     */\n-    protected Logger log = LoggerFactory.getLogger(this.getClass());\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultSecurityGate.class);\n \n     /**\n      * The Settings object that handles API calls.\n      */\n-    Settings delegate;\n+    private Settings delegate;\n \n     /**\n      * Constructs an instance by loading the standard property files, \n@@ -67,53 +65,39 @@ public DefaultSettings() {\n         try {\n             list.add(new PropertiesSettings(\"struts\"));\n         } catch (Exception e) {\n-            log.warn(\"DefaultSettings: Could not find or error in struts.properties\", e);\n+            LOG.warn(\"DefaultSettings: Could not find or error in struts.properties\", e);\n         }\n \n-        Settings[] settings = new Settings[list.size()];\n-        delegate = new DelegatingSettings(list.toArray(settings));\n+        delegate = new DelegatingSettings(list);\n \n         // struts.custom.properties\n-        try {\n-            StringTokenizer customProperties = new StringTokenizer(delegate.getImpl(StrutsConstants.STRUTS_CUSTOM_PROPERTIES), \",\");\n+        String files = delegate.get(StrutsConstants.STRUTS_CUSTOM_PROPERTIES);\n+        if (files != null) {\n+            StringTokenizer customProperties = new StringTokenizer(files, \",\");\n \n             while (customProperties.hasMoreTokens()) {\n                 String name = customProperties.nextToken();\n-\n                 try {\n                     list.add(new PropertiesSettings(name));\n                 } catch (Exception e) {\n-                    log.error(\"DefaultSettings: Could not find \" + name + \".properties. Skipping.\");\n+                    LOG.error(\"DefaultSettings: Could not find \" + name + \".properties. Skipping.\");\n                 }\n             }\n \n-            settings = new Settings[list.size()];\n-            delegate = new DelegatingSettings(list.toArray(settings));\n-        } catch (IllegalArgumentException e) {\n-            // Assume it's OK, since IllegalArgumentException is thrown  \n-            // when Settings is unable to find a certain setting,\n-            // like the struts.custom.properties, which is commented out\n+            delegate = new DelegatingSettings(list);\n         }\n-\n     }\n \n-    // See superclass for Javadoc\n-    public void setImpl(String name, String value) throws IllegalArgumentException, UnsupportedOperationException {\n-        delegate.setImpl(name, value);\n+    public Location getLocation(String name) {\n+        return delegate.getLocation(name);\n     }\n \n-    // See superclass for Javadoc\n-    public String getImpl(String aName) throws IllegalArgumentException {\n-        return delegate.getImpl(aName);\n+    public String get(String aName) throws IllegalArgumentException {\n+        return delegate.get(aName);\n     }\n \n-    // See superclass for Javadoc\n-    public boolean isSetImpl(String aName) {\n-        return delegate.isSetImpl(aName);\n+    public Iterator list() {\n+        return delegate.list();\n     }\n \n-    // See superclass for Javadoc\n-    public Iterator listImpl() {\n-        return delegate.listImpl();\n-    }\n }",
                "raw_url": "https://github.com/apache/struts/raw/1189735db76a6ecd869c82121a103282f53b7e45/core/src/main/java/org/apache/struts2/config/DefaultSettings.java",
                "sha": "2fb5f0e8fe0c46b792cefd817ec9a9939e5a8477",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/struts/blob/1189735db76a6ecd869c82121a103282f53b7e45/core/src/main/java/org/apache/struts2/config/DelegatingSettings.java",
                "changes": 71,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/config/DelegatingSettings.java?ref=1189735db76a6ecd869c82121a103282f53b7e45",
                "deletions": 48,
                "filename": "core/src/main/java/org/apache/struts2/config/DelegatingSettings.java",
                "patch": "@@ -21,8 +21,11 @@\n \n package org.apache.struts2.config;\n \n+import com.opensymphony.xwork2.util.location.Location;\n+\n import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Set;\n \n \n@@ -36,80 +39,42 @@\n  * withholding any exception until all delegates have been called.\n  *\n  */\n-class DelegatingSettings extends Settings {\n+class DelegatingSettings implements Settings {\n \n     /**\n      * The Settings objects.\n      */\n-    Settings[] delegates;\n+    List<Settings> delegates;\n \n     /**\n      * Creates a new DelegatingSettings object utilizing the list of {@link Settings} objects.\n      *\n      * @param delegates The Settings objects to use as delegates\n      */\n-    public DelegatingSettings(Settings[] delegates) {\n+    public DelegatingSettings(List<Settings> delegates) {\n         this.delegates = delegates;\n     }\n \n-    // See superclass for Javadoc\n-    public void setImpl(String name, String value) throws IllegalArgumentException, UnsupportedOperationException {\n-        IllegalArgumentException e = null;\n-\n+    public String get(String name) throws IllegalArgumentException {\n         for (Settings delegate : delegates) {\n-            try {\n-                delegate.getImpl(name); // Throws exception if not found\n-                delegate.setImpl(name, value); // Found it\n-                return; // Done\n-            } catch (IllegalArgumentException ex) {\n-                e = ex;\n-\n-                // Try next delegate\n+            String value = delegate.get(name);\n+            if (value != null) {\n+                return value;\n             }\n         }\n-\n-        throw e;\n+        return null;\n     }\n \n-    // See superclass for Javadoc\n-    public String getImpl(String name) throws IllegalArgumentException {\n-\n-        IllegalArgumentException e = null;\n \n-        for (Settings delegate : delegates) {\n-            try {\n-                return delegate.getImpl(name);  // Throws exception if not found\n-            } catch (IllegalArgumentException ex) {\n-                e = ex;\n-\n-                // Try next delegate\n-            }\n-        }\n-\n-        throw e;\n-    }\n-\n-    // See superclass for Javadoc\n-    public boolean isSetImpl(String aName) {\n-        for (Settings delegate : delegates) {\n-            if (delegate.isSetImpl(aName)) {\n-                return true;\n-            }\n-        }\n-\n-        return false;\n-    }\n-\n-    // See superclass for Javadoc\n-    public Iterator listImpl() {\n+    public Iterator list() {\n         boolean workedAtAll = false;\n \n         Set<Object> settingList = new HashSet<Object>();\n         UnsupportedOperationException e = null;\n \n         for (Settings delegate : delegates) {\n             try {\n-                Iterator list = delegate.listImpl();\n+                Iterator list = delegate.list();\n \n                 while (list.hasNext()) {\n                     settingList.add(list.next());\n@@ -129,4 +94,14 @@ public Iterator listImpl() {\n             return settingList.iterator();\n         }\n     }\n+\n+    public Location getLocation(String name) {\n+        for (Settings delegate : delegates) {\n+            Location loc = delegate.getLocation(name);\n+            if (loc != null) {\n+                return loc;\n+            }\n+        }\n+        return Location.UNKNOWN;\n+    }\n }",
                "raw_url": "https://github.com/apache/struts/raw/1189735db76a6ecd869c82121a103282f53b7e45/core/src/main/java/org/apache/struts2/config/DelegatingSettings.java",
                "sha": "132c24e63f8b4e58c9a6e597d8533bbf7c3e7961",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/struts/blob/f1b699876277c5ce1a31833beb2b1f2ca843a50c/core/src/main/java/org/apache/struts2/config/LegacyPropertiesConfigurationProvider.java",
                "changes": 113,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/config/LegacyPropertiesConfigurationProvider.java?ref=f1b699876277c5ce1a31833beb2b1f2ca843a50c",
                "deletions": 113,
                "filename": "core/src/main/java/org/apache/struts2/config/LegacyPropertiesConfigurationProvider.java",
                "patch": "@@ -1,113 +0,0 @@\n-/*\n- * $Id$\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *  http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.apache.struts2.config;\n-\n-import com.opensymphony.xwork2.config.Configuration;\n-import com.opensymphony.xwork2.config.ConfigurationException;\n-import com.opensymphony.xwork2.config.ConfigurationProvider;\n-import com.opensymphony.xwork2.inject.ContainerBuilder;\n-import com.opensymphony.xwork2.inject.Context;\n-import com.opensymphony.xwork2.inject.Factory;\n-import com.opensymphony.xwork2.util.location.LocatableProperties;\n-import com.opensymphony.xwork2.util.logging.Logger;\n-import com.opensymphony.xwork2.util.logging.LoggerFactory;\n-import org.apache.struts2.StrutsConstants;\n-\n-import java.util.Iterator;\n-import java.util.Locale;\n-import java.util.StringTokenizer;\n-\n-public class LegacyPropertiesConfigurationProvider implements ConfigurationProvider {\n-\n-    /**\n-     * The Logging instance for this class.\n-     */\n-    private static final Logger LOG = LoggerFactory.getLogger(LegacyPropertiesConfigurationProvider.class);\n-\n-    public void destroy() {\n-        Settings.reset();\n-    }\n-\n-    public void init(Configuration configuration)\n-        throws ConfigurationException {\n-        Settings.reset();\n-    }\n-    \n-    public void loadPackages()\n-            throws ConfigurationException {\n-    }\n-\n-    public boolean needsReload() {\n-        return false;\n-    }\n-\n-    public void register(ContainerBuilder builder, LocatableProperties props)\n-            throws ConfigurationException {\n-        \n-        final Settings settings = Settings.getInstance();\n-        \n-        loadSettings(props, settings);\n-        \n-        // Set default locale by lazily resolving the locale property as needed into a Locale object\n-        builder.factory(Locale.class,  new Factory<Locale>() {\n-            private Locale locale;\n-\n-            public synchronized Locale create(Context context) throws Exception {\n-                if (locale == null) {\n-                    String loc = context.getContainer().getInstance(String.class, StrutsConstants.STRUTS_LOCALE);\n-                    if (loc != null) {\n-                        StringTokenizer localeTokens = new StringTokenizer(loc, \"_\");\n-                        String lang = null;\n-                        String country = null;\n-\n-                        if (localeTokens.hasMoreTokens()) {\n-                            lang = localeTokens.nextToken();\n-                        }\n-\n-                        if (localeTokens.hasMoreTokens()) {\n-                            country = localeTokens.nextToken();\n-                        }\n-                        locale = new Locale(lang, country);\n-                    } else {\n-                        if (LOG.isInfoEnabled()) {\n-                            LOG.info(\"No locale define, substituting the default VM locale\");\n-                        }\n-                        locale = Locale.getDefault();\n-                    }\n-                }\n-                return locale;\n-            }\n-        });\n-    }\n-\n-    /**\n-     * @param props\n-     * @param settings\n-     */\n-    protected void loadSettings(LocatableProperties props, final Settings settings) {\n-        // We are calling the impl methods to get around the single instance of Settings that is expected\n-        for (Iterator i = settings.listImpl(); i.hasNext(); ) {\n-            String name = (String) i.next();\n-            props.setProperty(name, settings.getImpl(name), settings.getLocationImpl(name));\n-        }\n-    }\n-}",
                "raw_url": "https://github.com/apache/struts/raw/f1b699876277c5ce1a31833beb2b1f2ca843a50c/core/src/main/java/org/apache/struts2/config/LegacyPropertiesConfigurationProvider.java",
                "sha": "f82e36fe3fe43e4ddbf399ca4f1f6c8929391777",
                "status": "removed"
            },
            {
                "additions": 62,
                "blob_url": "https://github.com/apache/struts/blob/1189735db76a6ecd869c82121a103282f53b7e45/core/src/main/java/org/apache/struts2/config/PropertiesConfigurationProvider.java",
                "changes": 62,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/config/PropertiesConfigurationProvider.java?ref=1189735db76a6ecd869c82121a103282f53b7e45",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/struts2/config/PropertiesConfigurationProvider.java",
                "patch": "@@ -0,0 +1,62 @@\n+/*\n+ * $Id$\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.struts2.config;\n+\n+import com.opensymphony.xwork2.config.Configuration;\n+import com.opensymphony.xwork2.config.ConfigurationException;\n+import com.opensymphony.xwork2.config.ConfigurationProvider;\n+import com.opensymphony.xwork2.inject.ContainerBuilder;\n+import com.opensymphony.xwork2.util.location.LocatableProperties;\n+\n+import java.util.Iterator;\n+\n+public class PropertiesConfigurationProvider implements ConfigurationProvider {\n+\n+    public void destroy() {\n+    }\n+\n+    public void init(Configuration configuration) throws ConfigurationException {\n+    }\n+\n+    public void loadPackages() throws ConfigurationException {\n+    }\n+\n+    public boolean needsReload() {\n+        return false;\n+    }\n+\n+    public void register(ContainerBuilder builder, LocatableProperties props) throws ConfigurationException {\n+        final DefaultSettings settings = new DefaultSettings();\n+        loadSettings(props, settings);\n+    }\n+\n+    /**\n+     * @param props\n+     * @param settings\n+     */\n+    protected void loadSettings(LocatableProperties props, final Settings settings) {\n+        for (Iterator i = settings.list(); i.hasNext(); ) {\n+            String name = (String) i.next();\n+            props.setProperty(name, settings.get(name), settings.getLocation(name));\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/struts/raw/1189735db76a6ecd869c82121a103282f53b7e45/core/src/main/java/org/apache/struts2/config/PropertiesConfigurationProvider.java",
                "sha": "7a422328850a6aff6317983c713a198099f38a25",
                "status": "added"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/struts/blob/1189735db76a6ecd869c82121a103282f53b7e45/core/src/main/java/org/apache/struts2/config/PropertiesSettings.java",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/config/PropertiesSettings.java?ref=1189735db76a6ecd869c82121a103282f53b7e45",
                "deletions": 44,
                "filename": "core/src/main/java/org/apache/struts2/config/PropertiesSettings.java",
                "patch": "@@ -38,11 +38,11 @@\n /**\n  * A class to handle settings via a properties file.\n  */\n-class PropertiesSettings extends Settings {\n+class PropertiesSettings implements Settings {\n \n-    LocatableProperties settings;\n-    static Logger LOG = LoggerFactory.getLogger(PropertiesSettings.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(PropertiesSettings.class);\n \n+    private LocatableProperties settings;\n \n     /**\n      * Creates a new properties config given the name of a properties file. The name is expected to NOT have\n@@ -86,66 +86,31 @@ public PropertiesSettings(String name) {\n     }\n \n \n-    /**\n-     * Sets a property in the properties file.\n-     *\n-     * @see #set(String, String)\n-     */\n-    public void setImpl(String aName, String aValue) {\n-        settings.setProperty(aName, aValue);\n-    }\n-\n     /**\n      * Gets a property from the properties file.\n      *\n      * @see #get(String)\n      */\n-    public String getImpl(String aName) throws IllegalArgumentException {\n-        String setting = settings.getProperty(aName);\n-\n-        if (setting == null) {\n-            throw new IllegalArgumentException(\"No such setting:\" + aName);\n-        }\n-\n-        return setting;\n+    public String get(String aName) throws IllegalArgumentException {\n+        return settings.getProperty(aName);\n     }\n     \n     /**\n      * Gets the location of a property from the properties file.\n      *\n      * @see #getLocation(String)\n      */\n-    public Location getLocationImpl(String aName) throws IllegalArgumentException {\n-        Location loc = settings.getPropertyLocation(aName);\n-\n-        if (loc == null) {\n-            if (!settings.containsKey(aName)) {\n-                throw new IllegalArgumentException(\"No such setting:\" + aName);\n-            } \n-        }\n-\n-        return loc;\n-    }\n-\n-    /**\n-     * Tests to see if a property exists in the properties file.\n-     *\n-     * @see #isSet(String)\n-     */\n-    public boolean isSetImpl(String aName) {\n-        if (settings.get(aName) != null) {\n-            return true;\n-        } else {\n-            return false;\n-        }\n+    public Location getLocation(String aName) throws IllegalArgumentException {\n+        return settings.getPropertyLocation(aName);\n     }\n \n     /**\n      * Lists all keys in the properties file.\n      *\n      * @see #list()\n      */\n-    public Iterator listImpl() {\n+    public Iterator list() {\n         return settings.keySet().iterator();\n     }\n+\n }",
                "raw_url": "https://github.com/apache/struts/raw/1189735db76a6ecd869c82121a103282f53b7e45/core/src/main/java/org/apache/struts2/config/PropertiesSettings.java",
                "sha": "333608bbe19cab955e7a8b588f8188f3d97b5005",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/struts/blob/1189735db76a6ecd869c82121a103282f53b7e45/core/src/main/java/org/apache/struts2/config/Settings.java",
                "changes": 274,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/config/Settings.java?ref=1189735db76a6ecd869c82121a103282f53b7e45",
                "deletions": 264,
                "filename": "core/src/main/java/org/apache/struts2/config/Settings.java",
                "patch": "@@ -21,290 +21,36 @@\n \n package org.apache.struts2.config;\n \n-import com.opensymphony.xwork2.ObjectFactory;\n import com.opensymphony.xwork2.util.location.Location;\n-import com.opensymphony.xwork2.util.logging.Logger;\n-import com.opensymphony.xwork2.util.logging.LoggerFactory;\n-import org.apache.struts2.StrutsConstants;\n \n import java.util.Iterator;\n-import java.util.Locale;\n-\n \n /**\n  * Settings retrieves and exposes default values used by the framework.\n- * An application can override a factory default and provide its own value for a setting.\n- * <p>\n- * Implementation of the class is pluggable (the default implementation is {@link DefaultSettings}).\n- * Pluggability gives applications to ability to customize how settings are retrieved.\n- * As an example, an application may wish to check some custom property store\n- * before delegating to the usual configuration and property files.\n- * <p>\n- * Key methods:\n- * <ul>\n- * <li>{@link #getLocale()}</li>\n- * <li>{@link #get(String)}</li>\n- * <li>{@link #set(String, String)}</li>\n- * <li>{@link #list()}</li>\n- * </ul>\n- * <p>\n- * Key methods for subclasses (plugins):\n- * <ul>\n- * <li>{@link #getImpl(String)}</li>\n- * <li>{@link #setImpl(String, String)}</li>\n- * <li>{@link #listImpl()}</li>\n- * <li>{@link #isSetImpl(String)}</li>\n- * </ul>\n- * @deprecated Since Struts 2.1.2\n  */\n-class Settings {\n-\n-\n-    /**\n-     * A pluggable implementation of Settings,\n-     * provided through the {@link #setInstance} method.\n-     */\n-    static Settings settingsImpl;\n-\n-    /**\n-     * An instance of {@link DefaultSettings}\n-     * to use when another implementation is not provided (plugged in).\n-     */\n-    static Settings defaultImpl;\n-\n-    /**\n-     * Guard used to protect the defaultImpl initialisation.\n-     */\n-    private static final Object DEFAULT_LOCK = new Object();\n-\n-    /**\n-     * An instance of the default locale as specified by the <code>struts.locale</code>  setting.\n-     *\n-     * @see #getLocale\n-     */\n-    static Locale locale;\n-\n-    /**\n-     * The Logging instance for this class.\n-     */\n-    private static final Logger LOG = LoggerFactory.getLogger(Settings.class);\n-\n-    /**\n-     * Registers a custom Settings implementation (plugin),\n-     * and resets the cached locale.\n-     * <p>\n-     * This method can only be called once.\n-     *\n-     * @param config a Settings implementation\n-     * @throws IllegalStateException if an error occurs when setting the settings implementation.\n-     */\n-    public static void setInstance(Settings config) throws IllegalStateException {\n-        settingsImpl = config;\n-        locale = null;\n-    }\n-\n-    /**\n-     * Provides the Settings object.\n-     * <p>\n-     * This method will substitute the default instance if another instance is not registered.\n-     *\n-     * @return the Settings object.\n-     */\n-    public static Settings getInstance() {\n-        return (settingsImpl == null) ? getDefaultInstance() : settingsImpl;\n-    }\n-\n-    /**\n-     * Provides the Struts default locale.\n-     * <p>\n-     * This method utilizes the <code>struts.locale</code> setting, which should be given\n-     * as the Java {@link java.util.Locale#toString() toString()} representation of a Locale object\n-     * (\"en\", \"de_DE\", \"_GB\", \"en_US_WIN\", \"de__POSIX\", \"fr_MAC\", and so forth).\n-     * <p>\n-     * If a <code>struts.locale</code> setting is not registered,\n-     * then the default virtual machine locale is substituted and cached.\n-     *\n-     * @return the Struts default locale if specified or the VM default locale.\n-     * @see java.util.Locale#getDefault()\n-     */\n-    public static Locale getLocale() {\n-        // Locale processing has been moved to the LegacyPropertiesConfigurationProvider\n-\n-        return locale;\n-    }\n-\n-    /**\n-     * Determines whether or not a setting has a registered value.\n-     * <p>\n-     * This method is useful for testing for the existance of setting without\n-     * throwing an IllegalArgumentException.\n-     *\n-     * @param name the name of a setting to test.\n-     * @return <code>true</code> if the setting exists and has a value, <code>false</code> otherwise.\n-     */\n-    public static boolean isSet(String name) {\n-        return getInstance().isSetImpl(name);\n-    }\n+interface Settings {\n \n     /**\n-     * Provides a setting value as a String.\n-     * <p>\n-     * The method will throw an <code>IllegalArgumentException</code> if an error occurs\n-     * while retrieveing the property or if the property doesn't exist.\n+     * Retrieve value for provided name\n      *\n-     * @param name the name of the setting to retrieve.\n-     * @return the setting value as a String.\n-     * @throws IllegalArgumentException if an error occurs retrieving the property or the property does not exist.\n+     * @param name The name of the setting value to retrieve\n+     * @return The setting value as a String or null\n      */\n-    public static String get(String name) throws IllegalArgumentException {\n-        return getInstance().getImpl(name);\n-    }\n+    String get(String name);\n \n     /**\n-     * Provides the Location of a setting.\n-     * <p>\n-     * The Location is utilized as part of precise error reporting.\n-     * <p>\n-      * This method will throw an <code>IllegalArgumentException</code> if an error occurs\n-     * while retrieving the value or if the setting doesn't exist.\n-     *\n-     * @param name the name of the property to get.\n-     * @return the Location of a property.\n-     * @throws IllegalArgumentException if an error occurs retrieving the property or the property does not exist.\n-     */\n-    public static Location getLocation(String name) throws IllegalArgumentException {\n-        return getInstance().getLocationImpl(name);\n-    }\n-\n-    /**\n-     * Provides an Iterator of all properties names.\n-     *\n-     * @return an Iterator of all properties names.\n-     */\n-    public static Iterator list() {\n-        return getInstance().listImpl();\n-    }\n-\n-    /**\n-     * Implements the {@link #isSet(String)} method.\n-     *\n-     * @param name Identifier for the setting value to change\n-     * @return True if the setting exists and has a value, false otherwise.\n-     * @see #isSet(String)\n-     */\n-    public boolean isSetImpl(String name) {\n-        // this is dumb.. maybe it should just throw an unsupported op like the rest of the *Impl\n-        // methods in this class.\n-        return false;\n-    }\n-\n-    /**\n-     * Registers a value for a setting.\n-     * <p>\n-     * This method raises an exception if an error occurs when setting the value or if the\n-     * settings implementation does not support setting values.\n-     *\n-     * @param name  the name of the setting.\n-     * @param value the value to register for the setting.\n-     * @throws IllegalArgumentException      if an error occurs when setting the value.\n-     * @throws UnsupportedOperationException if the config implementation does not support setting values.\n-     */\n-    public static void set(String name, String value) throws IllegalArgumentException, UnsupportedOperationException {\n-        getInstance().setImpl(name, value);\n-    }\n-\n-    /**\n-     * Implements the {@link #set(String, String)} method.\n-     *\n-     * @param name Identifer for the setting to change.\n-     * @param value The new value for the setting.\n-     * @throws IllegalArgumentException      if an error occurs when setting the value.\n-     * @throws UnsupportedOperationException if the config implementation does not support setting values.\n-     * @see #set(String, String)\n-     */\n-    public void setImpl(String name, String value) throws IllegalArgumentException, UnsupportedOperationException {\n-        throw new UnsupportedOperationException(\"Settings: This implementation does not support setting a value.\");\n-    }\n-\n-    /**\n-     * Implements the {@link #get(String)} method.\n-     *\n-     * @param name The name of the setting value to retreive\n-     * @return The setting value as a String\n-     * @throws IllegalArgumentException if an error occurs when retrieving the value\n-     * @see #get(String)\n-     */\n-    public String getImpl(String name) throws IllegalArgumentException {\n-        return null;\n-    }\n-\n-    /**\n-     * Implements the {@link #getLocation(String)} method.\n+     * Returns {@link com.opensymphony.xwork2.util.location.Location} of given setting\n      *\n      * @param name Name of the setting to locate\n-     * @return The location  of the setting\n-     * @throws IllegalArgumentException if an error occurs when retrieving the value\n-     * @see #getLocation(String)\n+     * @return The location  of the setting or null\n      */\n-    public Location getLocationImpl(String name) throws IllegalArgumentException {\n-        return null;\n-    }\n+    Location getLocation(String name);\n \n     /**\n-     * Implements the {@link #list()} method.\n+     * Returns {@link java.util.Iterator} with all values\n      *\n-     * @see #list()\n      * @return A list of the settings as an iterator\n      */\n-    public Iterator listImpl() {\n-        throw new UnsupportedOperationException(\"Settings: This implementation does not support listing the registered settings\");\n-    }\n-\n-    /**\n-     * Creates a default Settings object.\n-     * <p>\n-     * A default implementation may be specified by the <code>struts.configuration</code> setting;\n-     * otherwise, this method instantiates {@link DefaultSettings} as the default implementation.\n-     *\n-     * @return A default Settings object.\n-     */\n-    private static Settings getDefaultInstance() {\n-        if (defaultImpl == null) {\n-            synchronized (DEFAULT_LOCK) {\n-                if (defaultImpl == null) {\n-                    // Create bootstrap implementation\n-                    defaultImpl = new DefaultSettings();\n-\n-                    // Create default implementation\n-                    try {\n-                        String className = get(StrutsConstants.STRUTS_CONFIGURATION);\n-\n-                        if (!className.equals(defaultImpl.getClass().getName())) {\n-                            try {\n-                                // singleton instances shouldn't be built accessing request or session-specific context data\n-                                defaultImpl = (Settings) ObjectFactory.getObjectFactory().buildBean(Thread.currentThread().getContextClassLoader().loadClass(className), null);\n-                            } catch (Exception e) {\n-                                LOG.error(\"Settings: Could not instantiate the struts.configuration object, substituting the default implementation.\", e);\n-                            }\n-                        }\n-                    } catch (IllegalArgumentException ex) {\n-                        // ignore\n-                    }\n-                }\n-            }\n-        }\n-\n-        return defaultImpl;\n-    }\n-\n-    /**\n-     * Resets the default and any plugin Setting instance to null.\n-     */\n-    public static void reset() {\n-        synchronized (DEFAULT_LOCK) {\n-            defaultImpl = null;\n-        }\n-        settingsImpl = null;\n-    }\n+    Iterator list();\n \n }",
                "raw_url": "https://github.com/apache/struts/raw/1189735db76a6ecd869c82121a103282f53b7e45/core/src/main/java/org/apache/struts2/config/Settings.java",
                "sha": "03d5764e18e0c074d719ddf364871fa13f435cdb",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/struts/blob/1189735db76a6ecd869c82121a103282f53b7e45/core/src/main/java/org/apache/struts2/dispatcher/Dispatcher.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/dispatcher/Dispatcher.java?ref=1189735db76a6ecd869c82121a103282f53b7e45",
                "deletions": 2,
                "filename": "core/src/main/java/org/apache/struts2/dispatcher/Dispatcher.java",
                "patch": "@@ -60,7 +60,7 @@\n import org.apache.struts2.StrutsStatics;\n import org.apache.struts2.config.BeanSelectionProvider;\n import org.apache.struts2.config.DefaultPropertiesProvider;\n-import org.apache.struts2.config.LegacyPropertiesConfigurationProvider;\n+import org.apache.struts2.config.PropertiesConfigurationProvider;\n import org.apache.struts2.config.StrutsXmlConfigurationProvider;\n import org.apache.struts2.dispatcher.mapper.ActionMapping;\n import org.apache.struts2.dispatcher.multipart.MultiPartRequest;\n@@ -374,7 +374,7 @@ private void init_DefaultProperties() {\n     }\n     \n     private void init_LegacyStrutsProperties() {\n-        configurationManager.addContainerProvider(new LegacyPropertiesConfigurationProvider());\n+        configurationManager.addContainerProvider(new PropertiesConfigurationProvider());\n     }\n \n     private void init_TraditionalXmlConfigurations() {",
                "raw_url": "https://github.com/apache/struts/raw/1189735db76a6ecd869c82121a103282f53b7e45/core/src/main/java/org/apache/struts2/dispatcher/Dispatcher.java",
                "sha": "520394b030ac4607f81c1162301ffac27a454f3b",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/struts/blob/1189735db76a6ecd869c82121a103282f53b7e45/core/src/test/java/org/apache/struts2/config/PropertiesConfigurationProviderTest.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/test/java/org/apache/struts2/config/PropertiesConfigurationProviderTest.java?ref=1189735db76a6ecd869c82121a103282f53b7e45",
                "deletions": 13,
                "filename": "core/src/test/java/org/apache/struts2/config/PropertiesConfigurationProviderTest.java",
                "patch": "@@ -21,37 +21,35 @@\n \n package org.apache.struts2.config;\n \n-import java.util.Iterator;\n-import java.util.Locale;\n-\n-import org.apache.struts2.StrutsConstants;\n-import org.apache.struts2.StrutsTestCase;\n-\n+import com.opensymphony.xwork2.inject.Container;\n+import com.opensymphony.xwork2.inject.ContainerBuilder;\n import com.opensymphony.xwork2.util.LocalizedTextUtil;\n import com.opensymphony.xwork2.util.location.LocatableProperties;\n-import com.opensymphony.xwork2.inject.ContainerBuilder;\n-import com.opensymphony.xwork2.inject.Container;\n import junit.framework.TestCase;\n+import org.apache.struts2.StrutsConstants;\n+\n+import java.util.Locale;\n \n \n /**\n  * Unit test for {@link SettingsTest}.\n  *\n  */\n-public class LegacyPropertiesConfigurationProviderTest extends TestCase {\n+public class PropertiesConfigurationProviderTest extends TestCase {\n \n     public void testRegister_DifferentLocale() {\n \n         ContainerBuilder builder = new ContainerBuilder();\n         builder.constant(\"foo\", \"bar\");\n         builder.constant(\"struts.locale\", \"DE_de\");\n \n-        LegacyPropertiesConfigurationProvider prov = new LegacyPropertiesConfigurationProvider();\n+        PropertiesConfigurationProvider prov = new PropertiesConfigurationProvider();\n         prov.register(builder, new LocatableProperties());\n \n         Container container = builder.create(true);\n \n-        Locale locale = container.getInstance(Locale.class);\n+        String localeStr = container.getInstance(String.class, StrutsConstants.STRUTS_LOCALE);\n+        Locale locale = LocalizedTextUtil.localeFromString(localeStr, Locale.FRANCE);\n \n         assertNotNull(locale);\n         assertEquals(\"DE\", locale.getCountry());\n@@ -64,16 +62,30 @@ public void testRegister_NoLocale() {\n         ContainerBuilder builder = new ContainerBuilder();\n         builder.constant(\"foo\", \"bar\");\n \n-        LegacyPropertiesConfigurationProvider prov = new LegacyPropertiesConfigurationProvider();\n+        PropertiesConfigurationProvider prov = new PropertiesConfigurationProvider();\n         prov.register(builder, new LocatableProperties());\n \n         Container container = builder.create(true);\n \n-        Locale locale = container.getInstance(Locale.class);\n+        String localeStr = container.getInstance(String.class, StrutsConstants.STRUTS_LOCALE);\n+        Locale locale = LocalizedTextUtil.localeFromString(localeStr, Locale.getDefault());\n \n         assertNotNull(locale);\n         Locale vmLocale = Locale.getDefault();\n         assertEquals(locale, vmLocale);\n     }\n \n+    public void testDefaultSettings() throws Exception {\n+        // given\n+        PropertiesConfigurationProvider prov = new PropertiesConfigurationProvider();\n+        LocatableProperties props = new LocatableProperties();\n+        prov.register(new ContainerBuilder(), props);\n+\n+        // when\n+        Object encoding = props.get(StrutsConstants.STRUTS_I18N_ENCODING);\n+\n+        // then\n+        assertEquals(\"ISO-8859-1\", encoding);\n+    }\n+\n }",
                "previous_filename": "core/src/test/java/org/apache/struts2/config/LegacyPropertiesConfigurationProviderTest.java",
                "raw_url": "https://github.com/apache/struts/raw/1189735db76a6ecd869c82121a103282f53b7e45/core/src/test/java/org/apache/struts2/config/PropertiesConfigurationProviderTest.java",
                "sha": "123f8eb655ed14fa7910484ae134a11f7a76243b",
                "status": "renamed"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/struts/blob/1189735db76a6ecd869c82121a103282f53b7e45/core/src/test/java/org/apache/struts2/config/SettingsTest.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/test/java/org/apache/struts2/config/SettingsTest.java?ref=1189735db76a6ecd869c82121a103282f53b7e45",
                "deletions": 16,
                "filename": "core/src/test/java/org/apache/struts2/config/SettingsTest.java",
                "patch": "@@ -21,13 +21,12 @@\n \n package org.apache.struts2.config;\n \n-import java.util.Iterator;\n-import java.util.Locale;\n-\n+import com.opensymphony.xwork2.util.LocalizedTextUtil;\n import org.apache.struts2.StrutsConstants;\n import org.apache.struts2.StrutsTestCase;\n \n-import com.opensymphony.xwork2.util.LocalizedTextUtil;\n+import java.util.Iterator;\n+import java.util.Locale;\n \n \n /**\n@@ -37,34 +36,38 @@\n public class SettingsTest extends StrutsTestCase {\n \n     public void testSettings() {\n-        assertEquals(\"12345\", Settings.get(StrutsConstants.STRUTS_MULTIPART_MAXSIZE));\n-        assertEquals(\"\\temp\", Settings.get(StrutsConstants.STRUTS_MULTIPART_SAVEDIR));\n+        Settings settings = new DefaultSettings();\n \n-        assertEquals(\"test,org/apache/struts2/othertest\", Settings.get( StrutsConstants.STRUTS_CUSTOM_PROPERTIES));\n-        assertEquals(\"testvalue\", Settings.get(\"testkey\"));\n-        assertEquals(\"othertestvalue\", Settings.get(\"othertestkey\"));\n+        assertEquals(\"12345\", settings.get(StrutsConstants.STRUTS_MULTIPART_MAXSIZE));\n+        assertEquals(\"\\temp\", settings.get(StrutsConstants.STRUTS_MULTIPART_SAVEDIR));\n \n-        int count = getKeyCount();\n+        assertEquals(\"test,org/apache/struts2/othertest\", settings.get( StrutsConstants.STRUTS_CUSTOM_PROPERTIES));\n+        assertEquals(\"testvalue\", settings.get(\"testkey\"));\n+        assertEquals(\"othertestvalue\", settings.get(\"othertestkey\"));\n+\n+        int count = getKeyCount(settings);\n         assertEquals(12, count);\n     }\n \n     public void testDefaultResourceBundlesLoaded() {\n-        assertEquals(\"testmessages,testmessages2\", Settings.get(StrutsConstants.STRUTS_CUSTOM_I18N_RESOURCES));\n+        Settings settings = new DefaultSettings();\n+\n+        assertEquals(\"testmessages,testmessages2\", settings.get(StrutsConstants.STRUTS_CUSTOM_I18N_RESOURCES));\n         assertEquals(\"This is a test message\", LocalizedTextUtil.findDefaultText(\"default.testmessage\", Locale.getDefault()));\n         assertEquals(\"This is another test message\", LocalizedTextUtil.findDefaultText(\"default.testmessage2\", Locale.getDefault()));\n     }\n \n     public void testSetSettings() {\n-        Settings.setInstance(new TestSettings());\n+        Settings settings = new TestSettings();\n \n         String keyName = \"a.long.property.key.name\";\n-        assertEquals(keyName, Settings.get(keyName));\n-        assertEquals(2, getKeyCount());\n+        assertEquals(keyName, settings.get(keyName));\n+        assertEquals(2, getKeyCount(settings));\n     }\n \n-    private int getKeyCount() {\n+    private int getKeyCount(Settings settings) {\n         int count = 0;\n-        Iterator keyNames = Settings.list();\n+        Iterator keyNames = settings.list();\n \n         while (keyNames.hasNext()) {\n             keyNames.next();",
                "raw_url": "https://github.com/apache/struts/raw/1189735db76a6ecd869c82121a103282f53b7e45/core/src/test/java/org/apache/struts2/config/SettingsTest.java",
                "sha": "46c55811e864432c5887070a26f3220aa70d4a01",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/struts/blob/1189735db76a6ecd869c82121a103282f53b7e45/core/src/test/java/org/apache/struts2/config/TestSettings.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/test/java/org/apache/struts2/config/TestSettings.java?ref=1189735db76a6ecd869c82121a103282f53b7e45",
                "deletions": 3,
                "filename": "core/src/test/java/org/apache/struts2/config/TestSettings.java",
                "patch": "@@ -21,6 +21,8 @@\n \n package org.apache.struts2.config;\n \n+import com.opensymphony.xwork2.util.location.Location;\n+\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n@@ -30,25 +32,29 @@\n  * TestSettings\n  *\n  */\n-public class TestSettings extends Settings {\n+public class TestSettings implements Settings {\n \n     /**\n      * Get a named setting.\n      *\n      * @throws IllegalArgumentException if there is no settings parameter with the given name.\n      */\n-    public String getImpl(String aName) throws IllegalArgumentException {\n+    public String get(String aName) throws IllegalArgumentException {\n         return aName;\n     }\n \n     /**\n      * List setting names\n      */\n-    public Iterator listImpl() {\n+    public Iterator list() {\n         List testList = new ArrayList();\n         testList.add(\"123\");\n         testList.add(\"testValue\");\n \n         return testList.iterator();\n     }\n+\n+    public Location getLocation(String name) {\n+        return null;\n+    }\n }",
                "raw_url": "https://github.com/apache/struts/raw/1189735db76a6ecd869c82121a103282f53b7e45/core/src/test/java/org/apache/struts2/config/TestSettings.java",
                "sha": "ec9a1aaedecb54b151dec5e7232df01d119638a5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/struts/blob/1189735db76a6ecd869c82121a103282f53b7e45/plugins/sitegraph/src/main/java/org/apache/struts2/sitegraph/StrutsConfigRetriever.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/sitegraph/src/main/java/org/apache/struts2/sitegraph/StrutsConfigRetriever.java?ref=1189735db76a6ecd869c82121a103282f53b7e45",
                "deletions": 2,
                "filename": "plugins/sitegraph/src/main/java/org/apache/struts2/sitegraph/StrutsConfigRetriever.java",
                "patch": "@@ -29,7 +29,7 @@\n import com.opensymphony.xwork2.util.logging.LoggerFactory;\n import org.apache.struts2.config.BeanSelectionProvider;\n import org.apache.struts2.config.DefaultPropertiesProvider;\n-import org.apache.struts2.config.LegacyPropertiesConfigurationProvider;\n+import org.apache.struts2.config.PropertiesConfigurationProvider;\n import org.apache.struts2.config.StrutsXmlConfigurationProvider;\n import org.apache.struts2.sitegraph.entities.FreeMarkerView;\n import org.apache.struts2.sitegraph.entities.JspView;\n@@ -75,7 +75,7 @@ private static void initXWork() {\n             cm.addContainerProvider(new DefaultPropertiesProvider());\n             cm.addContainerProvider(new StrutsXmlConfigurationProvider(\"struts-default.xml\", false, null));\n             cm.addContainerProvider(configProvider);\n-            cm.addContainerProvider(new LegacyPropertiesConfigurationProvider());\n+            cm.addContainerProvider(new PropertiesConfigurationProvider());\n             cm.addContainerProvider(new BeanSelectionProvider());\n             isXWorkStarted = true;\n         } catch (IOException e) {",
                "raw_url": "https://github.com/apache/struts/raw/1189735db76a6ecd869c82121a103282f53b7e45/plugins/sitegraph/src/main/java/org/apache/struts2/sitegraph/StrutsConfigRetriever.java",
                "sha": "549e7329c9159a707a232c4840e5bd09ce785cb9",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/struts/blob/1189735db76a6ecd869c82121a103282f53b7e45/xwork-core/src/main/java/com/opensymphony/xwork2/util/location/LocatableProperties.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/xwork-core/src/main/java/com/opensymphony/xwork2/util/location/LocatableProperties.java?ref=1189735db76a6ecd869c82121a103282f53b7e45",
                "deletions": 12,
                "filename": "xwork-core/src/main/java/com/opensymphony/xwork2/util/location/LocatableProperties.java",
                "patch": "@@ -19,18 +19,18 @@\n public class LocatableProperties extends Properties implements Locatable {\n \n     Location location;\n-    Map<String,Location> propLocations;\n-    \n+    Map<String, Location> propLocations;\n+\n     public LocatableProperties() {\n-        this(null);\n+        this(Location.UNKNOWN);\n     }\n-    \n+\n     public LocatableProperties(Location loc) {\n         super();\n         this.location = loc;\n-        this.propLocations = new HashMap<String,Location>();\n+        this.propLocations = new HashMap<String, Location>();\n     }\n-    \n+\n     @Override\n     public void load(InputStream in) throws IOException {\n         Reader reader = new InputStreamReader(in);\n@@ -40,12 +40,12 @@ public void load(InputStream in) throws IOException {\n             String val = pr.getPropertyValue();\n             int line = pr.getLineNumber();\n             String desc = convertCommentsToString(pr.getCommentLines());\n-            \n+\n             Location loc = new LocationImpl(desc, location.getURI(), line, 0);\n             setProperty(name, val, loc);\n         }\n     }\n-    \n+\n     String convertCommentsToString(List<String> lines) {\n         StringBuilder sb = new StringBuilder();\n         if (lines != null && lines.size() > 0) {\n@@ -55,7 +55,7 @@ String convertCommentsToString(List<String> lines) {\n         }\n         return sb.toString();\n     }\n-    \n+\n     public Object setProperty(String key, String value, Object locationObj) {\n         Object obj = super.setProperty(key, value);\n         if (location != null) {\n@@ -64,11 +64,16 @@ public Object setProperty(String key, String value, Object locationObj) {\n         }\n         return obj;\n     }\n-    \n+\n     public Location getPropertyLocation(String key) {\n-        return propLocations.get(key);\n+        Location loc = propLocations.get(key);\n+        if (loc != null) {\n+            return loc;\n+        } else {\n+            return Location.UNKNOWN;\n+        }\n     }\n-    \n+\n     public Location getLocation() {\n         return location;\n     }",
                "raw_url": "https://github.com/apache/struts/raw/1189735db76a6ecd869c82121a103282f53b7e45/xwork-core/src/main/java/com/opensymphony/xwork2/util/location/LocatableProperties.java",
                "sha": "9b41eb1a654879a334a32ae05034ebdc528278e6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/struts/blob/1189735db76a6ecd869c82121a103282f53b7e45/xwork-core/src/main/java/com/opensymphony/xwork2/util/location/LocationImpl.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/xwork-core/src/main/java/com/opensymphony/xwork2/util/location/LocationImpl.java?ref=1189735db76a6ecd869c82121a103282f53b7e45",
                "deletions": 0,
                "filename": "xwork-core/src/main/java/com/opensymphony/xwork2/util/location/LocationImpl.java",
                "patch": "@@ -27,6 +27,7 @@\n  * A simple immutable and serializable implementation of {@link Location}.\n  */\n public class LocationImpl implements Location, Serializable {\n+\n     private final String uri;\n     private final int line;\n     private final int column;",
                "raw_url": "https://github.com/apache/struts/raw/1189735db76a6ecd869c82121a103282f53b7e45/xwork-core/src/main/java/com/opensymphony/xwork2/util/location/LocationImpl.java",
                "sha": "3a1974f75f34a2ff442e857a275901e376f35fbf",
                "status": "modified"
            }
        ],
        "message": "WW-4152 Solves problem with NPE as a side effect of concurrency issue, removes old code, use simpler dependency graph\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@1534634 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/struts/commit/f1b699876277c5ce1a31833beb2b1f2ca843a50c",
        "repo": "struts",
        "unit_tests": [
            "PropertiesConfigurationProviderTest.java",
            "SettingsTest.java",
            "TestSettings.java",
            "DispatcherTest.java",
            "LocationImplTest.java"
        ]
    },
    "struts_137da15": {
        "bug_id": "struts_137da15",
        "commit": "https://github.com/apache/struts/commit/137da15d07cbaac9618f59af10fdf19819985ba8",
        "file": [
            {
                "additions": 124,
                "blob_url": "https://github.com/apache/struts/blob/137da15d07cbaac9618f59af10fdf19819985ba8/plugins/jfreechart/src/main/java/org/apache/struts2/dispatcher/ChartResult.java",
                "changes": 171,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/jfreechart/src/main/java/org/apache/struts2/dispatcher/ChartResult.java?ref=137da15d07cbaac9618f59af10fdf19819985ba8",
                "deletions": 47,
                "filename": "plugins/jfreechart/src/main/java/org/apache/struts2/dispatcher/ChartResult.java",
                "patch": "@@ -26,88 +26,165 @@\n import org.jfree.chart.ChartUtilities;\n import org.jfree.chart.JFreeChart;\n \n-import javax.servlet.http.HttpServletResponse;\n import java.io.OutputStream;\n \n-\n /**\n+ * <!-- START SNIPPET: description -->\n+ * <p/>\n  * A custom Result type for chart data. Built on top of\n  * <a href=\"http://www.jfree.org/jfreechart/\" target=\"_blank\">JFreeChart</a>. When executed\n- * this Result will write the given chart as a PNG to the servlet output stream.\n+ * this Result will write the given chart as a PNG or JPG to the servlet output stream.\n+ * <p/>\n+ * <!-- END SNIPPET: description -->\n+ * <p/>\n+ * <b>This result type takes the following parameters:</b>\n+ * <p/>\n+ * <!-- START SNIPPET: params -->\n+ * <p/>\n+ * <ul>\n+ * <p/>\n+ * <li><b>value</b> - the name of the JFreeChart object on the ValueStack, defaults to 'chart'.</li>\n+ * <p/>\n+ * <li><b>type</b> - the render type for this chart. Can be jpg (or jpeg) or png. Defaults to png.</li>\n+ * <p/>\n+ * <li><b>width (required)</b> - the width (in pixels) of the rendered chart.</li>\n+ * <p/>\n+ * <li><b>height (required)</b> - the height (in pixels) of the rendered chart.</li>\n+ * <p/>\n+ * </ul>\n+ * <!-- END SNIPPET: params -->\n+ * <p/>\n+ * <b>Example:</b>\n+ * <p/>\n+ * <pre><!-- START SNIPPET: example -->\n+ * public class ExampleChartAction extends ActionSupport {\n+ *\n+ *\t    private JFreeChart chart;\n+ *\n+ *\t    public String execute() throws Exception {\n+ *\t\t    // chart creation logic...\n+ *\t\t    XYSeries dataSeries = new XYSeries(new Integer(1)); // pass a key for this serie\n+ *\t\t    for (int i = 0; i <= 100; i++) {\n+ *\t\t\t    dataSeries.add(i, RandomUtils.nextInt());\n+ *\t\t    }\n+ *\t\t    XYSeriesCollection xyDataset = new XYSeriesCollection(dataSeries);\n+ *\n+ *\t\t    ValueAxis xAxis = new NumberAxis(\"Raw Marks\");\n+ *\t\t    ValueAxis yAxis = new NumberAxis(\"Moderated Marks\");\n+ *\n+ *\t\t    // set my chart variable\n+ *\t\t    chart =\n+ *\t\t\t    new JFreeChart( \"Moderation Function\", JFreeChart.DEFAULT_TITLE_FONT,\n+ *\t\t\t\t    new XYPlot( xyDataset, xAxis, yAxis, new StandardXYItemRenderer(StandardXYItemRenderer.LINES)),\n+ *\t\t\t\t    false);\n+ *\t\t    chart.setBackgroundPaint(java.awt.Color.white);\n  *\n+ *\t\t    return SUCCESS;\n+ *\t    }\n+ * \n+ *      // this method will get called if we specify &lt;param name=\"value\"&gt;chart&lt;/param&gt;\n+ *\t    public JFreeChart getChart() {\n+ *\t\t    return chart;\n+ *\t    }\n+ *  }\n+ *\n+ * &lt;result name=\"success\" type=\"chart\"&gt;\n+ *   &lt;param name=\"value\"&gt;chart&lt;/param&gt;\n+ *   &lt;param name=\"type\"&gt;png&lt;/param&gt;\n+ *   &lt;param name=\"width\"&gt;640&lt;/param&gt;\n+ *   &lt;param name=\"height\"&gt;480&lt;/param&gt;\n+ * &lt;/result&gt;\n+ * <!-- END SNIPPET: example --></pre>\n  */\n public class ChartResult implements Result {\n \n     private static final long serialVersionUID = -6484761870055986612L;\n+    private static final String DEFAULT_TYPE = \"png\";\n+    private static final String DEFAULT_VALUE = \"chart\";\n+\n+    private JFreeChart chart; // the JFreeChart to render\n+    Integer height, width;\n+    String type = DEFAULT_TYPE; // supported are jpg, jpeg or png, defaults to png\n+    String value = DEFAULT_VALUE; // defaults to 'chart'\n \n-    JFreeChart chart;\n-    boolean chartSet = false;\n-    private int height;\n-    private int width;\n+    // CONSTRUCTORS ----------------------------\n \n     public ChartResult() {\n         super();\n     }\n \n     public ChartResult(JFreeChart chart, int height, int width) {\n-        setChart(chart);\n+        this.chart = chart;\n         this.height = height;\n         this.width = width;\n     }\n \n-    /**\n-     * Sets the JFreeChart to use.\n-     *\n-     * @param chart a JFreeChart object.\n-     */\n-    public ChartResult setChart(JFreeChart chart) {\n-        this.chart = chart;\n-        chartSet = true;\n-        return this;\n+    // ACCESSORS ----------------------------\n+\n+    public Integer getHeight() {\n+        return height;\n     }\n \n-    /**\n-     * Sets the chart height.\n-     *\n-     * @param height the height of the chart in pixels.\n-     */\n-    public ChartResult setHeight(int height) {\n+    public void setHeight(Integer height) {\n         this.height = height;\n-        return this;\n     }\n \n-    /**\n-     * Sets the chart width.\n-     *\n-     * @param width the width of the chart in pixels.\n-     */\n-    public ChartResult setWidth(int width) {\n+    public Integer getWidth() {\n+        return width;\n+    }\n+\n+    public void setWidth(Integer width) {\n         this.width = width;\n-        return this;\n     }\n \n+    public String getType() {\n+        return type;\n+    }\n+\n+    public void setType(String type) {\n+        this.type = type;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(String value) {\n+        this.value = value;\n+    }\n+\n+    // OTHER METHODS -----------------------\n+\n+    // Required by com.opensymphony.xwork2.Result\n+\n     /**\n-     * Executes the result. Writes the given chart as a PNG to the servlet output stream.\n+     * Executes the result. Writes the given chart as a PNG or JPG to the servlet output stream.\n      *\n      * @param invocation an encapsulation of the action execution state.\n      * @throws Exception if an error occurs when creating or writing the chart to the servlet output stream.\n      */\n     public void execute(ActionInvocation invocation) throws Exception {\n-        JFreeChart chart = null;\n-\n-        if (chartSet) {\n-            chart = this.chart;\n-        } else {\n-            chart = (JFreeChart) invocation.getStack().findValue(\"chart\");\n-        }\n+        chart = (JFreeChart) invocation.getStack().findValue(value, JFreeChart.class);\n+        if (chart == null) // we need to have a chart object - if not, blow up\n+            throw new NullPointerException(\"No JFreeChart object found on the stack with name \" + value);\n+        // make sure we have some value for the width and height\n+        if (height == null)\n+            throw new NullPointerException(\"No height parameter was given.\");\n+        if (width == null)\n+            throw new NullPointerException(\"No width parameter was given.\");\n \n-        if (chart == null) {\n-            throw new NullPointerException(\"No chart found\");\n+        // get a reference to the servlet output stream to write our chart image to\n+        OutputStream os = ServletActionContext.getResponse().getOutputStream();\n+        try {\n+            // check the type to see what kind of output we have to produce\n+            if (\"png\".equalsIgnoreCase(type))\n+                ChartUtilities.writeChartAsPNG(os, chart, width, height);\n+            else if (\"jpg\".equalsIgnoreCase(type) || \"jpeg\".equalsIgnoreCase(type))\n+                ChartUtilities.writeChartAsJPEG(os, chart, width, height);\n+            else\n+                throw new IllegalArgumentException(type + \" is not a supported render type (only JPG and PNG are).\");\n+        } finally {\n+            if (os != null) os.flush();\n         }\n-\n-        HttpServletResponse response = ServletActionContext.getResponse();\n-        OutputStream os = response.getOutputStream();\n-        ChartUtilities.writeChartAsPNG(os, chart, width, height);\n-        os.flush();\n     }\n-}\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/struts/raw/137da15d07cbaac9618f59af10fdf19819985ba8/plugins/jfreechart/src/main/java/org/apache/struts2/dispatcher/ChartResult.java",
                "sha": "e273104ae24ddaee0cea43d13691638def4d918a",
                "status": "modified"
            }
        ],
        "message": "Made some minimal changes to improve the JFreeChart Result:\n- chart getter can be specified\n- type (png/jpg) can be specified\n- throws NPEs if required fields are missing\n- added example configuration and Action\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@573912 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/struts/commit/e2b0819538f4b81aae99cf310643fee2a7568e86",
        "repo": "struts",
        "unit_tests": [
            "ChartResultTest.java"
        ]
    },
    "struts_1b19830": {
        "bug_id": "struts_1b19830",
        "commit": "https://github.com/apache/struts/commit/1b19830293211a03e523c61c41176c506fabe4f9",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/struts/blob/1b19830293211a03e523c61c41176c506fabe4f9/core/src/main/java/org/apache/struts2/interceptor/TokenSessionStoreInterceptor.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/interceptor/TokenSessionStoreInterceptor.java?ref=1b19830293211a03e523c61c41176c506fabe4f9",
                "deletions": 4,
                "filename": "core/src/main/java/org/apache/struts2/interceptor/TokenSessionStoreInterceptor.java",
                "patch": "@@ -116,11 +116,11 @@ protected String handleInvalidToken(ActionInvocation invocation) throws Exceptio\n         String tokenName = TokenHelper.getTokenName();\n         String token = TokenHelper.getToken(tokenName);\n \n-        Map params = ac.getParameters();\n-        params.remove(tokenName);\n-        params.remove(TokenHelper.TOKEN_NAME_FIELD);\n-\n         if ((tokenName != null) && (token != null)) {\n+            Map params = ac.getParameters();\n+            params.remove(tokenName);\n+            params.remove(TokenHelper.TOKEN_NAME_FIELD);\n+\n             ActionInvocation savedInvocation = InvocationSessionStore.loadInvocation(tokenName, token);\n \n             if (savedInvocation != null) {",
                "raw_url": "https://github.com/apache/struts/raw/1b19830293211a03e523c61c41176c506fabe4f9/core/src/main/java/org/apache/struts2/interceptor/TokenSessionStoreInterceptor.java",
                "sha": "11926454a0b3c5ad5e3dd72e14dbe061f7d24070",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/struts/blob/1b19830293211a03e523c61c41176c506fabe4f9/core/src/test/java/org/apache/struts2/interceptor/TokenInterceptorTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/test/java/org/apache/struts2/interceptor/TokenInterceptorTest.java?ref=1b19830293211a03e523c61c41176c506fabe4f9",
                "deletions": 3,
                "filename": "core/src/test/java/org/apache/struts2/interceptor/TokenInterceptorTest.java",
                "patch": "@@ -23,6 +23,7 @@\n \n import java.util.HashMap;\n import java.util.Map;\n+import java.util.TreeMap;\n \n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpSession;\n@@ -110,9 +111,9 @@ protected void setToken(String token) {\n     protected void setUp() throws Exception {\n         loadConfigurationProviders(new TestConfigurationProvider());\n \n-        session = new HashMap();\n-        params = new HashMap();\n-        extraContext = new HashMap();\n+        session = new TreeMap();\n+        params = new TreeMap();\n+        extraContext = new TreeMap();\n         extraContext.put(ActionContext.SESSION, session);\n         extraContext.put(ActionContext.PARAMETERS, params);\n ",
                "raw_url": "https://github.com/apache/struts/raw/1b19830293211a03e523c61c41176c506fabe4f9/core/src/test/java/org/apache/struts2/interceptor/TokenInterceptorTest.java",
                "sha": "02cdc34ce51281fbded13f0c9c42a00e0f0ee3d3",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/struts/blob/1b19830293211a03e523c61c41176c506fabe4f9/core/src/test/java/org/apache/struts2/interceptor/TokenSessionStoreInterceptorTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/test/java/org/apache/struts2/interceptor/TokenSessionStoreInterceptorTest.java?ref=1b19830293211a03e523c61c41176c506fabe4f9",
                "deletions": 0,
                "filename": "core/src/test/java/org/apache/struts2/interceptor/TokenSessionStoreInterceptorTest.java",
                "patch": "@@ -44,6 +44,12 @@ public void testCAllExecute2Times() throws Exception {\n         assertEquals(Action.SUCCESS, proxy2.execute());\n     }\n \n+    public void testNullTokenName() throws Exception {\n+        ActionProxy proxy = buildProxy(getActionName());\n+        setToken((String)null);\n+        proxy.execute();\n+    }\n+\n     protected String getActionName() {\n         return TestConfigurationProvider.TOKEN_SESSION_ACTION_NAME;\n     }",
                "raw_url": "https://github.com/apache/struts/raw/1b19830293211a03e523c61c41176c506fabe4f9/core/src/test/java/org/apache/struts2/interceptor/TokenSessionStoreInterceptorTest.java",
                "sha": "535298f3ebca8252a25f5d0d6da4afcad35fc9cc",
                "status": "modified"
            }
        ],
        "message": "More NPE possible in TokenSessionStoreInterceptor, updated unit tests again WW-3150\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@781838 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/struts/commit/ee1b9aac9b0c0f9e5cf405bbd395cfdfb0f6a26c",
        "repo": "struts",
        "unit_tests": [
            "TokenSessionStoreInterceptorTest.java"
        ]
    },
    "struts_1b5a1e7": {
        "bug_id": "struts_1b5a1e7",
        "commit": "https://github.com/apache/struts/commit/1b5a1e7c307cf89d13add686f38881ce508ea377",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/struts/blob/1b5a1e7c307cf89d13add686f38881ce508ea377/xwork-core/src/main/java/com/opensymphony/xwork2/validator/DefaultActionValidatorManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/xwork-core/src/main/java/com/opensymphony/xwork2/validator/DefaultActionValidatorManager.java?ref=1b5a1e7c307cf89d13add686f38881ce508ea377",
                "deletions": 1,
                "filename": "xwork-core/src/main/java/com/opensymphony/xwork2/validator/DefaultActionValidatorManager.java",
                "patch": "@@ -328,7 +328,7 @@ protected static String buildValidatorKey(Class clazz, String context) {\n     private List<ValidatorConfig> loadFile(String fileName, Class clazz, boolean checkFile) {\n         List<ValidatorConfig> retList = Collections.emptyList();\n         URL fileUrl = ClassLoaderUtil.getResource(fileName, clazz);\n-        if ((checkFile && fileManager.fileNeedsReloading(fileUrl.toString())) || !validatorFileCache.containsKey(fileName)) {\n+        if ((checkFile && fileUrl != null && fileManager.fileNeedsReloading(fileUrl.toString())) || !validatorFileCache.containsKey(fileName)) {\n             InputStream is = null;\n \n             try {",
                "raw_url": "https://github.com/apache/struts/raw/1b5a1e7c307cf89d13add686f38881ce508ea377/xwork-core/src/main/java/com/opensymphony/xwork2/validator/DefaultActionValidatorManager.java",
                "sha": "c5293d797fdc81b71e79dfbe6da364990448c17a",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/struts/blob/1b5a1e7c307cf89d13add686f38881ce508ea377/xwork-core/src/test/java/com/opensymphony/xwork2/validator/DefaultActionValidatorManagerTest.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/xwork-core/src/test/java/com/opensymphony/xwork2/validator/DefaultActionValidatorManagerTest.java?ref=1b5a1e7c307cf89d13add686f38881ce508ea377",
                "deletions": 0,
                "filename": "xwork-core/src/test/java/com/opensymphony/xwork2/validator/DefaultActionValidatorManagerTest.java",
                "patch": "@@ -18,6 +18,7 @@\n import com.mockobjects.dynamic.C;\n import com.mockobjects.dynamic.Mock;\n import com.opensymphony.xwork2.ActionContext;\n+import com.opensymphony.xwork2.FileManagerFactory;\n import com.opensymphony.xwork2.SimpleAction;\n import com.opensymphony.xwork2.StubValueStack;\n import com.opensymphony.xwork2.TestBean;\n@@ -164,6 +165,25 @@ public void testSameAliasWithDifferentClass() {\n         mockValidatorFileParser.verify();\n     }\n \n+    /**\n+     * Test to verify WW-3850.\n+     *\n+     * @since 2.3.5\n+     */\n+    public void testBuildsValidatorsForClassError() {\n+        // for this test we need to have a file manager with reloadingConfigs to true\n+        container.getInstance(FileManagerFactory.class).getFileManager().setReloadingConfigs(\"true\");\n+        // no validator found, but no check on file since it is not in cache\n+        actionValidatorManager.getValidators(List.class, null);\n+        // this second call will try reload a not existing file\n+        // and causes a NPE (see WW-3850)\n+        try {\n+            actionValidatorManager.getValidators(List.class, null);\n+        } catch (Exception e) {\n+            fail(\"Exception occurred \" + e);\n+        }\n+    }\n+\n     /*\n     // TODO: this all need to be converted to real unit tests\n ",
                "raw_url": "https://github.com/apache/struts/raw/1b5a1e7c307cf89d13add686f38881ce508ea377/xwork-core/src/test/java/com/opensymphony/xwork2/validator/DefaultActionValidatorManagerTest.java",
                "sha": "7e8b2433d60145f1844326c0aa30ba0dfe6cf1bb",
                "status": "modified"
            }
        ],
        "message": "WW-3850 solves problem with NPE when ActionValidationManager is trying to load Object-validation.xml\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@1364079 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/struts/commit/660c8066e309560e846263d96369161c5939dd79",
        "repo": "struts",
        "unit_tests": [
            "DefaultActionValidatorManagerTest.java"
        ]
    },
    "struts_1ff8a88": {
        "bug_id": "struts_1ff8a88",
        "commit": "https://github.com/apache/struts/commit/1ff8a88a9df4b5cb9ffbdbb21028dc61d3236b01",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/struts/blob/1ff8a88a9df4b5cb9ffbdbb21028dc61d3236b01/core/src/main/java/org/apache/struts2/conversion/UploadedFileConverter.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/conversion/UploadedFileConverter.java?ref=1ff8a88a9df4b5cb9ffbdbb21028dc61d3236b01",
                "deletions": 8,
                "filename": "core/src/main/java/org/apache/struts2/conversion/UploadedFileConverter.java",
                "patch": "@@ -36,18 +36,22 @@\n     @Override\n     public Object convertValue(Map<String, Object> context, Object target, Member member, String propertyName, Object value, Class toType) {\n         if (File.class.equals(toType)) {\n-            LOG.warn(\"Converting {} into {}, consider switching to {} and do not access {} directly!\",\n+            LOG.debug(\"Converting {} into {}, consider switching to {} and do not access {} directly!\",\n                     File.class.getName(), UploadedFile.class.getName(), UploadedFile.class.getName(), File.class.getName());\n \n+            Object obj;\n             if (value.getClass().isArray() && Array.getLength(value) == 1) {\n-                Object obj = Array.get(value, 0);\n-                if (obj instanceof UploadedFile) {\n-                    UploadedFile file = (UploadedFile) obj;\n-                    if (file.getContent() instanceof File) {\n-                        return file.getContent();\n-                    }\n-                    return new File(file.getAbsolutePath());\n+                obj = Array.get(value, 0);\n+            } else {\n+                obj = value;\n+            }\n+\n+            if (obj instanceof UploadedFile) {\n+                UploadedFile file = (UploadedFile) obj;\n+                if (file.getContent() instanceof File) {\n+                    return file.getContent();\n                 }\n+                return new File(file.getAbsolutePath());\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/struts/raw/1ff8a88a9df4b5cb9ffbdbb21028dc61d3236b01/core/src/main/java/org/apache/struts2/conversion/UploadedFileConverter.java",
                "sha": "69d3c62cb80a290a5ae398cad1b79ab09f590306",
                "status": "modified"
            }
        ],
        "message": "Fixes issue with NPE",
        "parent": "https://github.com/apache/struts/commit/ae5605ff8872daa08f12c84fb7a2b30f5f57e8ea",
        "repo": "struts",
        "unit_tests": [
            "UploadedFileConverterTest.java"
        ]
    },
    "struts_2bea99e": {
        "bug_id": "struts_2bea99e",
        "commit": "https://github.com/apache/struts/commit/2bea99e96b448585caa0080ac1dc5faa1db85826",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/struts/blob/2bea99e96b448585caa0080ac1dc5faa1db85826/xwork-core/src/main/java/com/opensymphony/xwork2/interceptor/ParametersInterceptor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/xwork-core/src/main/java/com/opensymphony/xwork2/interceptor/ParametersInterceptor.java?ref=2bea99e96b448585caa0080ac1dc5faa1db85826",
                "deletions": 1,
                "filename": "xwork-core/src/main/java/com/opensymphony/xwork2/interceptor/ParametersInterceptor.java",
                "patch": "@@ -362,7 +362,7 @@ protected boolean isAcceptableValue(Object value) {\n         }\n         boolean result = true;\n         for (Object obj : values) {\n-            if (isExcluded(obj.toString())) {\n+            if (isExcluded(String.valueOf(obj))) {\n                 result = false;\n             }\n         }",
                "raw_url": "https://github.com/apache/struts/raw/2bea99e96b448585caa0080ac1dc5faa1db85826/xwork-core/src/main/java/com/opensymphony/xwork2/interceptor/ParametersInterceptor.java",
                "sha": "8317feb1a7aab7651f51df8bb60628d638bccab0",
                "status": "modified"
            }
        ],
        "message": "WW-4436 Fixes NPE and uses String.valueOf() instead of .toString()",
        "parent": "https://github.com/apache/struts/commit/29de8687ddea5bc777e9401ffd4887f93333dc6b",
        "repo": "struts",
        "unit_tests": [
            "ParametersInterceptorTest.java"
        ]
    },
    "struts_3bf9595": {
        "bug_id": "struts_3bf9595",
        "commit": "https://github.com/apache/struts/commit/3bf95951bc2023be25c14c449a9ea3c04565a2e9",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/struts/blob/3bf95951bc2023be25c14c449a9ea3c04565a2e9/xwork-core/src/main/java/com/opensymphony/xwork2/util/TextParseUtil.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/xwork-core/src/main/java/com/opensymphony/xwork2/util/TextParseUtil.java?ref=3bf95951bc2023be25c14c449a9ea3c04565a2e9",
                "deletions": 3,
                "filename": "xwork-core/src/main/java/com/opensymphony/xwork2/util/TextParseUtil.java",
                "patch": "@@ -153,18 +153,16 @@ public static Object translateVariables(char open, String expression, ValueStack\n      */\n     public static Object translateVariables(char[] openChars, String expression, final ValueStack stack, final Class asType, final ParsedValueEvaluator evaluator, int maxLoopCount) {\n \n-\n         ParsedValueEvaluator ognlEval = new ParsedValueEvaluator() {\n             public Object evaluate(String parsedValue) {\n                 Object o = stack.findValue(parsedValue, asType);\n-                if (evaluator != null) {\n+                if (evaluator != null && o != null) {\n                     o = evaluator.evaluate(o.toString());\n                 }\n                 return o;\n             }\n         };\n \n-\n         TextParser parser = ((Container)stack.getContext().get(ActionContext.CONTAINER)).getInstance(TextParser.class);\n \n         XWorkConverter conv = ((Container)stack.getContext().get(ActionContext.CONTAINER)).getInstance(XWorkConverter.class);",
                "raw_url": "https://github.com/apache/struts/raw/3bf95951bc2023be25c14c449a9ea3c04565a2e9/xwork-core/src/main/java/com/opensymphony/xwork2/util/TextParseUtil.java",
                "sha": "fb24eb10a377b46cb71fa396608cdd16b047d8f2",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/struts/blob/3bf95951bc2023be25c14c449a9ea3c04565a2e9/xwork-core/src/test/java/com/opensymphony/xwork2/util/TextParseUtilTest.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/xwork-core/src/test/java/com/opensymphony/xwork2/util/TextParseUtilTest.java?ref=3bf95951bc2023be25c14c449a9ea3c04565a2e9",
                "deletions": 0,
                "filename": "xwork-core/src/test/java/com/opensymphony/xwork2/util/TextParseUtilTest.java",
                "patch": "@@ -138,4 +138,22 @@ public void testTranslateVariablesRecursive() {\n         assertEquals(\"foo: 2\", s);\n     }\n \n+    public void testTranslateVariablesWithNull() {\n+        // given\n+        ValueStack stack = ActionContext.getContext().getValueStack();\n+        stack.push(new HashMap<String, Object>() {{ put(\"foo\", null); }});\n+\n+        TextParseUtil.ParsedValueEvaluator evaluator = new TextParseUtil.ParsedValueEvaluator() {\n+            public Object evaluate(String parsedValue) {\n+                return parsedValue;\n+            }\n+        };\n+\n+        // when\n+        Object s = TextParseUtil.translateVariables('$', \"foo: ${foo}\", stack, String.class, evaluator, 2);\n+\n+        // then\n+        assertEquals(\"foo: \", s);\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/struts/raw/3bf95951bc2023be25c14c449a9ea3c04565a2e9/xwork-core/src/test/java/com/opensymphony/xwork2/util/TextParseUtilTest.java",
                "sha": "e18fb0f77a2f83b06cc010c51c4d7acc63c6c629",
                "status": "modified"
            }
        ],
        "message": "WW-4025 Solves problem with NPE in TextParseUtil\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@1460985 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/struts/commit/3ae920e5a3edbb8943ab6914336ad38c726dc95a",
        "repo": "struts",
        "unit_tests": [
            "TextParseUtilTest.java"
        ]
    },
    "struts_46e0da8": {
        "bug_id": "struts_46e0da8",
        "commit": "https://github.com/apache/struts/commit/46e0da8058531aa06bd282b5457e2472bfa7bd61",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/struts/blob/46e0da8058531aa06bd282b5457e2472bfa7bd61/core/src/main/java/org/apache/struts2/config/LegacyPropertiesConfigurationProvider.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/config/LegacyPropertiesConfigurationProvider.java?ref=46e0da8058531aa06bd282b5457e2472bfa7bd61",
                "deletions": 7,
                "filename": "core/src/main/java/org/apache/struts2/config/LegacyPropertiesConfigurationProvider.java",
                "patch": "@@ -21,22 +21,21 @@\n \n package org.apache.struts2.config;\n \n-import java.util.Iterator;\n-import java.util.Locale;\n-import java.util.StringTokenizer;\n-\n import com.opensymphony.xwork2.config.Configuration;\n import com.opensymphony.xwork2.config.ConfigurationException;\n import com.opensymphony.xwork2.config.ConfigurationProvider;\n import com.opensymphony.xwork2.inject.ContainerBuilder;\n import com.opensymphony.xwork2.inject.Context;\n import com.opensymphony.xwork2.inject.Factory;\n-import com.opensymphony.xwork2.inject.Inject;\n import com.opensymphony.xwork2.util.location.LocatableProperties;\n import com.opensymphony.xwork2.util.logging.Logger;\n import com.opensymphony.xwork2.util.logging.LoggerFactory;\n import org.apache.struts2.StrutsConstants;\n \n+import java.util.Iterator;\n+import java.util.Locale;\n+import java.util.StringTokenizer;\n+\n public class LegacyPropertiesConfigurationProvider implements ConfigurationProvider {\n \n     /**\n@@ -69,10 +68,10 @@ public void register(ContainerBuilder builder, LocatableProperties props)\n         loadSettings(props, settings);\n         \n         // Set default locale by lazily resolving the locale property as needed into a Locale object\n-        builder.factory(Locale.class, new Factory() {\n+        builder.factory(Locale.class,  new Factory<Locale>() {\n             private Locale locale;\n \n-            public synchronized Object create(Context context) throws Exception {\n+            public synchronized Locale create(Context context) throws Exception {\n                 if (locale == null) {\n                     String loc = context.getContainer().getInstance(String.class, StrutsConstants.STRUTS_LOCALE);\n                     if (loc != null) {",
                "raw_url": "https://github.com/apache/struts/raw/46e0da8058531aa06bd282b5457e2472bfa7bd61/core/src/main/java/org/apache/struts2/config/LegacyPropertiesConfigurationProvider.java",
                "sha": "f82e36fe3fe43e4ddbf399ca4f1f6c8929391777",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/struts/blob/46e0da8058531aa06bd282b5457e2472bfa7bd61/core/src/main/java/org/apache/struts2/config/Settings.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/config/Settings.java?ref=46e0da8058531aa06bd282b5457e2472bfa7bd61",
                "deletions": 20,
                "filename": "core/src/main/java/org/apache/struts2/config/Settings.java",
                "patch": "@@ -21,16 +21,14 @@\n \n package org.apache.struts2.config;\n \n-import java.util.Iterator;\n-import java.util.Locale;\n-import java.util.StringTokenizer;\n-\n-import org.apache.struts2.StrutsConstants;\n-\n import com.opensymphony.xwork2.ObjectFactory;\n import com.opensymphony.xwork2.util.location.Location;\n import com.opensymphony.xwork2.util.logging.Logger;\n import com.opensymphony.xwork2.util.logging.LoggerFactory;\n+import org.apache.struts2.StrutsConstants;\n+\n+import java.util.Iterator;\n+import java.util.Locale;\n \n \n /**\n@@ -74,6 +72,11 @@\n      */\n     static Settings defaultImpl;\n \n+    /**\n+     * Guard used to protect the defaultImpl initialisation.\n+     */\n+    private static final Object DEFAULT_LOCK = new Object();\n+\n     /**\n      * An instance of the default locale as specified by the <code>struts.locale</code>  setting.\n      *\n@@ -267,23 +270,27 @@ public Iterator listImpl() {\n      */\n     private static Settings getDefaultInstance() {\n         if (defaultImpl == null) {\n-            // Create bootstrap implementation\n-            defaultImpl = new DefaultSettings();\n+            synchronized (DEFAULT_LOCK) {\n+                if (defaultImpl == null) {\n+                    // Create bootstrap implementation\n+                    defaultImpl = new DefaultSettings();\n \n-            // Create default implementation\n-            try {\n-                String className = get(StrutsConstants.STRUTS_CONFIGURATION);\n-\n-                if (!className.equals(defaultImpl.getClass().getName())) {\n+                    // Create default implementation\n                     try {\n-                        // singleton instances shouldn't be built accessing request or session-specific context data\n-                        defaultImpl = (Settings) ObjectFactory.getObjectFactory().buildBean(Thread.currentThread().getContextClassLoader().loadClass(className), null);\n-                    } catch (Exception e) {\n-                        LOG.error(\"Settings: Could not instantiate the struts.configuration object, substituting the default implementation.\", e);\n+                        String className = get(StrutsConstants.STRUTS_CONFIGURATION);\n+\n+                        if (!className.equals(defaultImpl.getClass().getName())) {\n+                            try {\n+                                // singleton instances shouldn't be built accessing request or session-specific context data\n+                                defaultImpl = (Settings) ObjectFactory.getObjectFactory().buildBean(Thread.currentThread().getContextClassLoader().loadClass(className), null);\n+                            } catch (Exception e) {\n+                                LOG.error(\"Settings: Could not instantiate the struts.configuration object, substituting the default implementation.\", e);\n+                            }\n+                        }\n+                    } catch (IllegalArgumentException ex) {\n+                        // ignore\n                     }\n                 }\n-            } catch (IllegalArgumentException ex) {\n-                // ignore\n             }\n         }\n \n@@ -294,7 +301,10 @@ private static Settings getDefaultInstance() {\n      * Resets the default and any plugin Setting instance to null.\n      */\n     public static void reset() {\n-        defaultImpl = null;\n+        synchronized (DEFAULT_LOCK) {\n+            defaultImpl = null;\n+        }\n         settingsImpl = null;\n     }\n+\n }",
                "raw_url": "https://github.com/apache/struts/raw/46e0da8058531aa06bd282b5457e2472bfa7bd61/core/src/main/java/org/apache/struts2/config/Settings.java",
                "sha": "a654bd1ce5c2d20dce15b30f8fa2f395f1366de9",
                "status": "modified"
            }
        ],
        "message": "WW-3689 Adds synchronized block with global lock to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@1485576 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/struts/commit/d72ae0cffaf82aaa00283063a96232c1110c4350",
        "repo": "struts",
        "unit_tests": [
            "SettingsTest.java",
            "TestSettings.java"
        ]
    },
    "struts_6862e2a": {
        "bug_id": "struts_6862e2a",
        "commit": "https://github.com/apache/struts/commit/6862e2a5c52a7254e6374da07bb2b72a86b51dc1",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/struts/blob/6862e2a5c52a7254e6374da07bb2b72a86b51dc1/core/src/main/java/org/apache/struts2/dispatcher/ServletRedirectResult.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/dispatcher/ServletRedirectResult.java?ref=6862e2a5c52a7254e6374da07bb2b72a86b51dc1",
                "deletions": 12,
                "filename": "core/src/main/java/org/apache/struts2/dispatcher/ServletRedirectResult.java",
                "patch": "@@ -167,17 +167,19 @@ protected void doExecute(String finalLocation, ActionInvocation invocation) thro\n             }\n \n             ResultConfig resultConfig = invocation.getProxy().getConfig().getResults().get(invocation.getResultCode());\n-            Map resultConfigParams = resultConfig.getParams();\n-            for (Iterator i = resultConfigParams.entrySet().iterator(); i.hasNext();) {\n-                Map.Entry e = (Map.Entry) i.next();\n-\n-                if (!getProhibitedResultParams().contains(e.getKey())) {\n-                    requestParameters.put(e.getKey().toString(),\n-                            e.getValue() == null ? \"\" :\n-                                    conditionalParse(e.getValue().toString(), invocation));\n-                    String potentialValue = e.getValue() == null ? \"\" : conditionalParse(e.getValue().toString(), invocation);\n-                    if (!supressEmptyParameters || ((potentialValue != null) && (potentialValue.length() > 0))) {\n-                        requestParameters.put(e.getKey().toString(), potentialValue);\n+            if (resultConfig != null ) {\n+                Map resultConfigParams = resultConfig.getParams();\n+                for (Iterator i = resultConfigParams.entrySet().iterator(); i.hasNext();) {\n+                    Map.Entry e = (Map.Entry) i.next();\n+\n+                    if (!getProhibitedResultParams().contains(e.getKey())) {\n+                        requestParameters.put(e.getKey().toString(),\n+                                e.getValue() == null ? \"\" :\n+                                        conditionalParse(e.getValue().toString(), invocation));\n+                        String potentialValue = e.getValue() == null ? \"\" : conditionalParse(e.getValue().toString(), invocation);\n+                        if (!supressEmptyParameters || ((potentialValue != null) && (potentialValue.length() > 0))) {\n+                            requestParameters.put(e.getKey().toString(), potentialValue);\n+                        }\n                     }\n                 }\n             }\n@@ -232,7 +234,7 @@ private static boolean isPathUrl(String url) {\n     /**\n      * Sets the supressEmptyParameters option\n      *\n-     * @param suppress The new value for this option\n+     * @param supressEmptyParameters The new value for this option\n      */\n     public void setSupressEmptyParameters(boolean supressEmptyParameters) {\n         this.supressEmptyParameters = supressEmptyParameters;",
                "raw_url": "https://github.com/apache/struts/raw/6862e2a5c52a7254e6374da07bb2b72a86b51dc1/core/src/main/java/org/apache/struts2/dispatcher/ServletRedirectResult.java",
                "sha": "b509cf1b81cf2c795b2857db2c7e8b7af87758fc",
                "status": "modified"
            }
        ],
        "message": "WW-3107, fixing NPE, good catch Andrey Vasenin\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@781086 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/struts/commit/4f91ad5ecb23bb54acce06439d80141ddfc3ff8d",
        "repo": "struts",
        "unit_tests": [
            "ServletRedirectResultTest.java"
        ]
    },
    "struts_6e691ff": {
        "bug_id": "struts_6e691ff",
        "commit": "https://github.com/apache/struts/commit/6e691ffdbf8f8c673d0d851482bf0a1ea1a4fc2d",
        "file": [
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/struts/blob/6e691ffdbf8f8c673d0d851482bf0a1ea1a4fc2d/plugins/jasperreports/pom.xml",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/jasperreports/pom.xml?ref=6e691ffdbf8f8c673d0d851482bf0a1ea1a4fc2d",
                "deletions": 0,
                "filename": "plugins/jasperreports/pom.xml",
                "patch": "@@ -49,6 +49,32 @@\n                 </exclusion>\n             </exclusions>\n         </dependency>\n+        <dependency>\n+            <groupId>org.apache.struts</groupId>\n+            <artifactId>struts2-junit-plugin</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>javax.servlet</groupId>\n+            <artifactId>jsp-api</artifactId>\n+            <scope>provided</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>javax.servlet</groupId>\n+            <artifactId>javax.servlet-api</artifactId>\n+            <version>3.1.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-web</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.easymock</groupId>\n+            <artifactId>easymock</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n     </dependencies>\n     <properties>\n     \t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>",
                "raw_url": "https://github.com/apache/struts/raw/6e691ffdbf8f8c673d0d851482bf0a1ea1a4fc2d/plugins/jasperreports/pom.xml",
                "sha": "00b651db1f19ff70596923496bf2f022ac7c0734",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/struts/blob/6e691ffdbf8f8c673d0d851482bf0a1ea1a4fc2d/plugins/jasperreports/src/main/java/org/apache/struts2/views/jasperreports/JasperReportsResult.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/jasperreports/src/main/java/org/apache/struts2/views/jasperreports/JasperReportsResult.java?ref=6e691ffdbf8f8c673d0d851482bf0a1ea1a4fc2d",
                "deletions": 1,
                "filename": "plugins/jasperreports/src/main/java/org/apache/struts2/views/jasperreports/JasperReportsResult.java",
                "patch": "@@ -384,7 +384,10 @@ protected void doExecute(String finalLocation, ActionInvocation invocation) thro\n             throw new ServletException(e.getMessage(), e);\n         } finally {\n             try {\n-                conn.close();\n+                if (conn != null) {\n+                    // avoid NPE if connection was not used for the report\n+                    conn.close();\n+                }\n             } catch (Exception e) {\n                 LOG.warn(\"Could not close db connection properly\", e);\n             }",
                "raw_url": "https://github.com/apache/struts/raw/6e691ffdbf8f8c673d0d851482bf0a1ea1a4fc2d/plugins/jasperreports/src/main/java/org/apache/struts2/views/jasperreports/JasperReportsResult.java",
                "sha": "c79e1b6c7761aa11d10b8e2ac09e6ff63d8c9f4e",
                "status": "modified"
            },
            {
                "additions": 89,
                "blob_url": "https://github.com/apache/struts/blob/6e691ffdbf8f8c673d0d851482bf0a1ea1a4fc2d/plugins/jasperreports/src/test/java/org/apache/struts2/views/jasperreports/JasperReportsResultTest.java",
                "changes": 89,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/jasperreports/src/test/java/org/apache/struts2/views/jasperreports/JasperReportsResultTest.java?ref=6e691ffdbf8f8c673d0d851482bf0a1ea1a4fc2d",
                "deletions": 0,
                "filename": "plugins/jasperreports/src/test/java/org/apache/struts2/views/jasperreports/JasperReportsResultTest.java",
                "patch": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.views.jasperreports;\n+\n+import com.opensymphony.xwork2.ActionContext;\n+import com.opensymphony.xwork2.mock.MockActionInvocation;\n+import com.opensymphony.xwork2.util.ClassLoaderUtil;\n+import com.opensymphony.xwork2.util.ValueStack;\n+import net.sf.jasperreports.engine.JasperCompileManager;\n+import org.apache.struts2.StrutsStatics;\n+import org.apache.struts2.StrutsTestCase;\n+import org.easymock.IAnswer;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import org.springframework.mock.web.MockServletContext;\n+\n+import java.net.URL;\n+import java.sql.Connection;\n+\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expectLastCall;\n+import static org.easymock.EasyMock.replay;\n+import static org.easymock.EasyMock.verify;\n+\n+public class JasperReportsResultTest extends StrutsTestCase {\n+    private MockActionInvocation invocation;\n+    private ValueStack stack;\n+\n+    public void testConnClose() throws Exception {\n+        JasperReportsResult result = new JasperReportsResult();\n+        URL url = ClassLoaderUtil.getResource(\"org/apache/struts2/views/jasperreports/empty.jrxml\", this.getClass());\n+        JasperCompileManager.compileReportToFile(url.getFile(), url.getFile() + \".jasper\");\n+        result.setLocation(\"org/apache/struts2/views/jasperreports/empty.jrxml.jasper\");\n+        result.setFormat(JasperReportConstants.FORMAT_XML);\n+\n+        Connection connection = createMock(Connection.class);\n+        final Boolean[] closed = {false};\n+        connection.close();\n+        expectLastCall().andAnswer(new IAnswer() {\n+            @Override\n+            public Object answer() throws Throwable {\n+                closed[0] = true;\n+                return null;\n+            }\n+        });\n+        replay(connection);\n+\n+        stack.push(connection);\n+        result.setConnection(\"top\");\n+\n+        assertFalse(closed[0]);\n+        result.execute(this.invocation);\n+        verify(connection);\n+        assertTrue(closed[0]);\n+    }\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        MockHttpServletResponse response = new MockHttpServletResponse();\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.setRequestURI(\"http://sumeruri\");\n+        ActionContext context = ActionContext.getContext();\n+        context.put(StrutsStatics.HTTP_RESPONSE, response);\n+        context.put(StrutsStatics.HTTP_REQUEST, request);\n+        this.stack = context.getValueStack();\n+        MockServletContext servletContext = new MockServletContext();\n+        context.put(StrutsStatics.SERVLET_CONTEXT, servletContext);\n+        this.invocation = new MockActionInvocation();\n+        this.invocation.setInvocationContext(context);\n+        this.invocation.setStack(this.stack);\n+    }\n+}",
                "raw_url": "https://github.com/apache/struts/raw/6e691ffdbf8f8c673d0d851482bf0a1ea1a4fc2d/plugins/jasperreports/src/test/java/org/apache/struts2/views/jasperreports/JasperReportsResultTest.java",
                "sha": "1bf55acf88b68b09edd2c08d73692a6610220101",
                "status": "added"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/struts/blob/6e691ffdbf8f8c673d0d851482bf0a1ea1a4fc2d/plugins/jasperreports/src/test/resources/org/apache/struts2/views/jasperreports/empty.jrxml",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/jasperreports/src/test/resources/org/apache/struts2/views/jasperreports/empty.jrxml?ref=6e691ffdbf8f8c673d0d851482bf0a1ea1a4fc2d",
                "deletions": 0,
                "filename": "plugins/jasperreports/src/test/resources/org/apache/struts2/views/jasperreports/empty.jrxml",
                "patch": "@@ -0,0 +1,23 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+-->\n+<jasperReport xmlns=\"http://jasperreports.sourceforge.net/jasperreports\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://jasperreports.sourceforge.net/jasperreports http://jasperreports.sourceforge.net/xsd/jasperreport.xsd\" name=\"test\" pageWidth=\"842\" pageHeight=\"595\" orientation=\"Landscape\" columnWidth=\"802\" leftMargin=\"20\" rightMargin=\"20\" topMargin=\"20\" bottomMargin=\"20\" uuid=\"e65f69ca-7c62-4b4b-abc6-2e1a8710f23e\">\n+</jasperReport>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/struts/raw/6e691ffdbf8f8c673d0d851482bf0a1ea1a4fc2d/plugins/jasperreports/src/test/resources/org/apache/struts2/views/jasperreports/empty.jrxml",
                "sha": "816d8609f49bee1bd5a82cdea4241e5894fcba9f",
                "status": "added"
            }
        ],
        "message": "Merge pull request #212 from zepernick/master\n\nWW-4923 Null check to avoid NPE when not passing a JDBC connection",
        "parent": "https://github.com/apache/struts/commit/a29292046298cd634dc52cec2ae9f0033a249336",
        "repo": "struts",
        "unit_tests": [
            "JasperReportsResultTest.java"
        ]
    },
    "struts_79fbee4": {
        "bug_id": "struts_79fbee4",
        "commit": "https://github.com/apache/struts/commit/79fbee4f2c788be976eee02baa55e727c20a47a1",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/struts/blob/79fbee4f2c788be976eee02baa55e727c20a47a1/core/src/main/java/org/apache/struts/action2/interceptor/ExecuteAndWaitInterceptor.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts/action2/interceptor/ExecuteAndWaitInterceptor.java?ref=79fbee4f2c788be976eee02baa55e727c20a47a1",
                "deletions": 6,
                "filename": "core/src/main/java/org/apache/struts/action2/interceptor/ExecuteAndWaitInterceptor.java",
                "patch": "@@ -22,6 +22,7 @@\n import com.opensymphony.xwork.ActionProxy;\n import com.opensymphony.xwork.config.entities.ResultConfig;\n import com.opensymphony.xwork.interceptor.Interceptor;\n+import com.opensymphony.xwork.interceptor.MethodFilterInterceptor;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n \n@@ -157,7 +158,7 @@\n  * <!-- END SNIPPET: example -->\n  *\n  */\n-public class ExecuteAndWaitInterceptor implements Interceptor {\n+public class ExecuteAndWaitInterceptor extends MethodFilterInterceptor {\n \t\n \tprivate static final long serialVersionUID = -2754639196749652512L;\n \n@@ -177,22 +178,31 @@ protected BackgroundProcess getNewBackgroundProcess(String name, ActionInvocatio\n         return new BackgroundProcess(name + \"BackgroundThread\", actionInvocation, threadPriority);\n     }\n \n-    public String intercept(ActionInvocation actionInvocation) throws Exception {\n+    protected String doIntercept(ActionInvocation actionInvocation) throws Exception {\n         ActionProxy proxy = actionInvocation.getProxy();\n         String name = proxy.getActionName();\n         ActionContext context = actionInvocation.getInvocationContext();\n         Map session = context.getSession();\n \n+        Boolean secondTime = (Boolean) context.get(KEY);\n+        if (secondTime == null) {\n+            context.put(KEY, true);\n+            secondTime = false;\n+        } else {\n+            secondTime = true;\n+        }\n+\n         synchronized (session) {\n             BackgroundProcess bp = (BackgroundProcess) session.get(KEY + name);\n \n-            if (bp == null) {\n+            if (secondTime && bp == null) {\n                 bp = getNewBackgroundProcess(name, actionInvocation, threadPriority);\n                 session.put(KEY + name, bp);\n                 performInitialDelay(bp); // first time let some time pass before showing wait page\n+                secondTime = false;\n             }\n \n-            if (!bp.isDone()) {\n+            if (!secondTime && bp != null && !bp.isDone()) {\n                 actionInvocation.getStack().push(bp.getAction());\n                 Map results = proxy.getConfig().getResults();\n                 if (!results.containsKey(WAIT)) {\n@@ -202,12 +212,12 @@ public String intercept(ActionInvocation actionInvocation) throws Exception {\n                             \"'! This requires FreeMarker support and won't work if you don't have it installed\");\n                     // no wait result? hmm -- let's try to do dynamically put it in for you!\n                     ResultConfig rc = new ResultConfig(WAIT, \"org.apache.struts.action2.views.freemarker.FreemarkerResult\",\n-                            Collections.singletonMap(\"location\", \"org/apache/struts/action2/interceptor/wait.ftl\"));\n+                            Collections.singletonMap(\"location\", \"/org/apache/struts/action2/interceptor/wait.ftl\"));\n                     results.put(WAIT, rc);\n                 }\n \n                 return WAIT;\n-            } else {\n+            } else if (!secondTime && bp != null && bp.isDone()) {\n                 session.remove(KEY + name);\n                 actionInvocation.getStack().push(bp.getAction());\n \n@@ -217,6 +227,12 @@ public String intercept(ActionInvocation actionInvocation) throws Exception {\n                 }\n \n                 return bp.getResult();\n+            } else {\n+                // this is the first instance of the interceptor and there is no existing action\n+                // already run in the background, so let's just let this pass through. We assume\n+                // the action invocation will be run in the background on the subsequent pass through\n+                // this interceptor\n+                return actionInvocation.invoke();\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/struts/raw/79fbee4f2c788be976eee02baa55e727c20a47a1/core/src/main/java/org/apache/struts/action2/interceptor/ExecuteAndWaitInterceptor.java",
                "sha": "494fd398c7ef19b2a71ec04dad612920a6a81dc9",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/struts/blob/79fbee4f2c788be976eee02baa55e727c20a47a1/core/src/main/java/org/apache/struts/action2/quickstart/MultiWebApplicationContext.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts/action2/quickstart/MultiWebApplicationContext.java?ref=79fbee4f2c788be976eee02baa55e727c20a47a1",
                "deletions": 2,
                "filename": "core/src/main/java/org/apache/struts/action2/quickstart/MultiWebApplicationContext.java",
                "patch": "@@ -87,8 +87,8 @@ public Resource getResource(String uriInContext) throws IOException {\n         // Alright, let's just hack this to work in IDEA\n         if (uriInContext.equals(\"/struts-action\")) {\n             // we do this check to support both \"quickstart:showcase\" and \"quickstart\" (using quickstart.xml)\n-            if (new File(\"../../action/src/main/resources/META-INF/taglib.tld\").exists()) {\n-                return FileResource.newResource(\"../../action/src/main/resources/META-INF/taglib.tld\");\n+            if (new File(\"../../core/src/main/resources/META-INF/taglib.tld\").exists()) {\n+                return FileResource.newResource(\"../../core/src/main/resources/META-INF/taglib.tld\");\n             } else {\n                 return FileResource.newResource(\"src/main/resources/META-INF/taglib.tld\");\n             }",
                "raw_url": "https://github.com/apache/struts/raw/79fbee4f2c788be976eee02baa55e727c20a47a1/core/src/main/java/org/apache/struts/action2/quickstart/MultiWebApplicationContext.java",
                "sha": "666db064c427a2feb659fe9cd92f89f2ab0b4864",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/struts/blob/79fbee4f2c788be976eee02baa55e727c20a47a1/core/src/main/java/org/apache/struts/action2/quickstart/QuickStart.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts/action2/quickstart/QuickStart.java?ref=79fbee4f2c788be976eee02baa55e727c20a47a1",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/struts/action2/quickstart/QuickStart.java",
                "patch": "@@ -174,7 +174,8 @@ public static void main(String[] args) throws FileNotFoundException, MalformedUR\n         System.out.println(\"\");\n         System.out.println(\"********************************************************\");\n         System.out.println(\"Quick-started at http://localhost:\" + c.getPort() + c.getContext());\n-        System.out.println(\"You may now edit your Java source files and web files.\");\n+        System.out.println(\"You may now edit your Java classes and web files without\");\n+        System.out.println(\" deploying or restarting.\");\n         System.out.println(\"********************************************************\");\n     }\n ",
                "raw_url": "https://github.com/apache/struts/raw/79fbee4f2c788be976eee02baa55e727c20a47a1/core/src/main/java/org/apache/struts/action2/quickstart/QuickStart.java",
                "sha": "6455beed7bb8b1d5d439bbd101e989ccdd8dd926",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/struts/blob/79fbee4f2c788be976eee02baa55e727c20a47a1/core/src/main/resources/org/apache/struts/action2/interceptor/debugging/console.ftl",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/resources/org/apache/struts/action2/interceptor/debugging/console.ftl?ref=79fbee4f2c788be976eee02baa55e727c20a47a1",
                "deletions": 1,
                "filename": "core/src/main/resources/org/apache/struts/action2/interceptor/debugging/console.ftl",
                "patch": "@@ -1,7 +1,7 @@\n <html>\n <head>\n     <script language=\"javascript\">\n-    var baseUrl = \"<@ww.url value=\"/struts\"/>\";\n+    var baseUrl = \"<@saf.url value=\"/struts\" includeParams=\"none\"/>\";\n     window.open(baseUrl+\"/webconsole.html\", 'OGNL Console','width=500,height=450,'+\n         'status=no,toolbar=no,menubar=no');\n     </script>    ",
                "raw_url": "https://github.com/apache/struts/raw/79fbee4f2c788be976eee02baa55e727c20a47a1/core/src/main/resources/org/apache/struts/action2/interceptor/debugging/console.ftl",
                "sha": "43968b077791d7a241b5bd4d4e3672fceb1f8823",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/struts/blob/79fbee4f2c788be976eee02baa55e727c20a47a1/core/src/main/resources/org/apache/struts/action2/interceptor/wait.ftl",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/resources/org/apache/struts/action2/interceptor/wait.ftl?ref=79fbee4f2c788be976eee02baa55e727c20a47a1",
                "deletions": 1,
                "filename": "core/src/main/resources/org/apache/struts/action2/interceptor/wait.ftl",
                "patch": "@@ -1,6 +1,6 @@\n <html>\n     <head>\n-        <meta http-equiv=\"refresh\" content=\"5;url=<@ww.url includeParams=\"all\"/>\"/>\n+        <meta http-equiv=\"refresh\" content=\"5;url=<@saf.url includeParams=\"none\"/>\"/>\n     </head>\n     <body>\n         Please wait while we process your request...",
                "raw_url": "https://github.com/apache/struts/raw/79fbee4f2c788be976eee02baa55e727c20a47a1/core/src/main/resources/org/apache/struts/action2/interceptor/wait.ftl",
                "sha": "b0f0003bc0ae3c48b9f0d665e849b120915222b5",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/struts/blob/79fbee4f2c788be976eee02baa55e727c20a47a1/core/src/main/resources/struts-default.xml",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/resources/struts-default.xml?ref=79fbee4f2c788be976eee02baa55e727c20a47a1",
                "deletions": 7,
                "filename": "core/src/main/resources/struts-default.xml",
                "patch": "@@ -94,13 +94,6 @@\n                 <interceptor-ref name=\"basicStack\"/>\n             </interceptor-stack>\n \n-            <!-- Sample execute and wait stack.\n-                 Note: execAndWait should always be the *last* interceptor. -->\n-            <interceptor-stack name=\"executeAndWaitStack\">\n-                <interceptor-ref name=\"basicStack\"/>\n-                <interceptor-ref name=\"execAndWait\"/>\n-            </interceptor-stack>\n-\n             <!-- An example of the params-prepare-params trick. This stack\n                  is exactly the same as the defaultStack, except that it\n                  includes one extra interceptor before the prepare interceptor:\n@@ -172,6 +165,18 @@\n             <interceptor-stack name=\"completeStack\">\n                 <interceptor-ref name=\"defaultStack\"/>\n             </interceptor-stack>\n+\n+            <!-- Sample execute and wait stack.\n+                 Note: execAndWait should always be the *last* interceptor. -->\n+            <interceptor-stack name=\"executeAndWaitStack\">\n+                <interceptor-ref name=\"execAndWait\">\n+                    <param name=\"excludeMethods\">input,back,cancel</param>\n+                </interceptor-ref>\n+                <interceptor-ref name=\"defaultStack\"/>\n+                <interceptor-ref name=\"execAndWait\">\n+                    <param name=\"excludeMethods\">input,back,cancel</param>\n+                </interceptor-ref>\n+            </interceptor-stack>\n         </interceptors>\n \n         <default-interceptor-ref name=\"defaultStack\"/>",
                "raw_url": "https://github.com/apache/struts/raw/79fbee4f2c788be976eee02baa55e727c20a47a1/core/src/main/resources/struts-default.xml",
                "sha": "609a9b3885a1630b0f38bf8780b8b86324e7740d",
                "status": "modified"
            }
        ],
        "message": "- avoid NPE in XworkException\n- executeAndWait interceptor is smarter now (works with validation). it's still ugly, but much better\n- console doesn't spit out the full URL w/ params\n- some fixes left over from refactoring in quickstart\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/action2/trunk@407897 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/struts/commit/6251303f170eb6fbbf98ae5b1b25b749f8bde0d4",
        "repo": "struts",
        "unit_tests": [
            "ExecuteAndWaitInterceptorTest.java"
        ]
    },
    "struts_7dbe3ea": {
        "bug_id": "struts_7dbe3ea",
        "commit": "https://github.com/apache/struts/commit/7dbe3ea8bb97cd004e77541c761bbe20e4373c3d",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/struts/blob/7dbe3ea8bb97cd004e77541c761bbe20e4373c3d/core/src/main/java/org/apache/struts2/util/ComponentUtils.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/util/ComponentUtils.java?ref=7dbe3ea8bb97cd004e77541c761bbe20e4373c3d",
                "deletions": 2,
                "filename": "core/src/main/java/org/apache/struts2/util/ComponentUtils.java",
                "patch": "@@ -44,11 +44,11 @@ public static boolean altSyntax(ValueStack stack) {\n      * @return true if it is an expression\r\n      */\r\n     public static boolean isExpression(String expr) {\r\n-        return expr.startsWith(\"%{\") && expr.endsWith(\"}\");\r\n+        return expr != null && expr.startsWith(\"%{\") && expr.endsWith(\"}\");\r\n     }\r\n \r\n     public static boolean containsExpression(String expr) {\r\n-        return expr.contains(\"%{\") && expr.contains(\"}\");\r\n+        return expr != null && expr.contains(\"%{\") && expr.contains(\"}\");\r\n     }\r\n \r\n }\r",
                "raw_url": "https://github.com/apache/struts/raw/7dbe3ea8bb97cd004e77541c761bbe20e4373c3d/core/src/main/java/org/apache/struts2/util/ComponentUtils.java",
                "sha": "054038f00e28e8fa80fb548ea4dca4f4b6618ee5",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/struts/blob/7dbe3ea8bb97cd004e77541c761bbe20e4373c3d/core/src/test/java/org/apache/struts2/util/ComponentUtilsTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/test/java/org/apache/struts2/util/ComponentUtilsTest.java?ref=7dbe3ea8bb97cd004e77541c761bbe20e4373c3d",
                "deletions": 0,
                "filename": "core/src/test/java/org/apache/struts2/util/ComponentUtilsTest.java",
                "patch": "@@ -93,6 +93,10 @@ public void testIsExpressionIsFalse() throws Exception {\n         assertFalse(actual);\r\n     }\r\n \r\n+    public void testIsExpressionIsFalseWhenNull() throws Exception {\r\n+        assertFalse(ComponentUtils.isExpression(null));\r\n+    }\r\n+\r\n     public void testContainsExpressionIsTrue() throws Exception {\r\n         // given\r\n         String anExpression = \"%{foo}\";\r\n@@ -125,6 +129,10 @@ public void testContainsExpressionIsFalse() throws Exception {\n         // then\r\n         assertFalse(actual);\r\n     }\r\n+\r\n+    public void testContainsExpressionIsFalseWhenNull() throws Exception {\r\n+        assertFalse(ComponentUtils.containsExpression(null));\r\n+    }\r\n }\r\n \r\n class MockConfigurationProvider implements ConfigurationProvider {\r",
                "raw_url": "https://github.com/apache/struts/raw/7dbe3ea8bb97cd004e77541c761bbe20e4373c3d/core/src/test/java/org/apache/struts2/util/ComponentUtilsTest.java",
                "sha": "1e05ebdfa31b0d0881fd02be00a1f594f65617d6",
                "status": "modified"
            }
        ],
        "message": "WW-4663 Checks if expression is null to avoid NPE",
        "parent": "https://github.com/apache/struts/commit/92c54de11030d6f6325386dd24ba92efb9f34a90",
        "repo": "struts",
        "unit_tests": [
            "ComponentUtilsTest.java"
        ]
    },
    "struts_81f8470": {
        "bug_id": "struts_81f8470",
        "commit": "https://github.com/apache/struts/commit/81f847022eaa6ca290a18a02de6cee18dbd35be4",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/struts/blob/81f847022eaa6ca290a18a02de6cee18dbd35be4/core/src/main/java/org/apache/struts2/views/util/DefaultUrlHelper.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/views/util/DefaultUrlHelper.java?ref=81f847022eaa6ca290a18a02de6cee18dbd35be4",
                "deletions": 2,
                "filename": "core/src/main/java/org/apache/struts2/views/util/DefaultUrlHelper.java",
                "patch": "@@ -214,7 +214,7 @@ public void buildParametersString(Map<String, Object> params, StringBuilder link\n                 if (value instanceof Iterable) {\n                     for (Iterator iterator = ((Iterable) value).iterator(); iterator.hasNext();) {\n                         Object paramValue = iterator.next();\n-                        link.append(buildParameterSubstring(name, paramValue.toString()));\n+                        link.append(buildParameterSubstring(name, paramValue != null ? paramValue.toString() : StringUtils.EMPTY));\n \n                         if (iterator.hasNext()) {\n                             link.append(paramSeparator);\n@@ -224,7 +224,7 @@ public void buildParametersString(Map<String, Object> params, StringBuilder link\n                     Object[] array = (Object[]) value;\n                     for (int i = 0; i < array.length; i++) {\n                         Object paramValue = array[i];\n-                        link.append(buildParameterSubstring(name, paramValue.toString()));\n+                        link.append(buildParameterSubstring(name, paramValue != null ? paramValue.toString() : StringUtils.EMPTY));\n \n                         if (i < array.length - 1) {\n                             link.append(paramSeparator);",
                "raw_url": "https://github.com/apache/struts/raw/81f847022eaa6ca290a18a02de6cee18dbd35be4/core/src/main/java/org/apache/struts2/views/util/DefaultUrlHelper.java",
                "sha": "460c13830913135707b999318b95c43283448939",
                "status": "modified"
            }
        ],
        "message": "WW-4182 Adds additional check to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@1533346 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/struts/commit/bae28278ae8299ff6fef552cc281e1e2707b0995",
        "repo": "struts",
        "unit_tests": [
            "DefaultUrlHelperTest.java"
        ]
    },
    "struts_872a7b0": {
        "bug_id": "struts_872a7b0",
        "commit": "https://github.com/apache/struts/commit/872a7b0b6d368494594ad535994809b3951c11e8",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/struts/blob/872a7b0b6d368494594ad535994809b3951c11e8/plugins/junit/pom.xml",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/junit/pom.xml?ref=872a7b0b6d368494594ad535994809b3951c11e8",
                "deletions": 1,
                "filename": "plugins/junit/pom.xml",
                "patch": "@@ -55,7 +55,6 @@\n         <dependency>\n             <groupId>org.apache.struts</groupId>\n             <artifactId>struts2-spring-plugin</artifactId>\n-            <version>${project.version}</version>\n             <optional>true</optional>\n         </dependency>\n         <dependency>\n@@ -67,5 +66,11 @@\n             <groupId>junit</groupId>\n             <artifactId>junit</artifactId>\n         </dependency>\n+        <!-- Portlet -->\n+        <dependency>\n+            <groupId>javax.portlet</groupId>\n+            <artifactId>portlet-api</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n     </dependencies>\n </project>",
                "raw_url": "https://github.com/apache/struts/raw/872a7b0b6d368494594ad535994809b3951c11e8/plugins/junit/pom.xml",
                "sha": "014084dd1b09b5c6248a64fac976eadabf1ce0e0",
                "status": "modified"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/struts/blob/872a7b0b6d368494594ad535994809b3951c11e8/plugins/junit/src/main/java/org/apache/struts2/StrutsTestCase.java",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/junit/src/main/java/org/apache/struts2/StrutsTestCase.java?ref=872a7b0b6d368494594ad535994809b3951c11e8",
                "deletions": 12,
                "filename": "plugins/junit/src/main/java/org/apache/struts2/StrutsTestCase.java",
                "patch": "@@ -37,6 +37,7 @@\n import org.springframework.mock.web.MockHttpServletResponse;\n import org.springframework.mock.web.MockPageContext;\n import org.springframework.mock.web.MockServletContext;\n+import org.springframework.mock.web.portlet.MockPortletContext;\n \n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n@@ -46,7 +47,11 @@\n import java.util.Date;\n import java.util.HashMap;\n import java.util.Map;\n-import java.util.logging.*;\n+import java.util.logging.ConsoleHandler;\n+import java.util.logging.Formatter;\n+import java.util.logging.Level;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n \n /**\n  * Base test case for JUnit testing Struts.\n@@ -57,7 +62,7 @@\n     protected MockPageContext pageContext;\n     protected MockServletContext servletContext;\n     protected Map<String, String> dispatcherInitParams;\n-    \n+\n     protected DefaultResourceLoader resourceLoader = new DefaultResourceLoader();\n \n     static {\n@@ -109,10 +114,9 @@ protected String executeAction(String uri) throws ServletException, UnsupportedE\n         assertNotNull(mapping);\n         Dispatcher.getInstance().serviceAction(request, response, servletContext, mapping);\n \n-        if (response.getStatus() != HttpServletResponse.SC_OK)\n-            throw new ServletException(\"Error code [\" + response.getStatus() + \"], Error: [\"\n-                    + response.getErrorMessage() + \"]\");\n-\n+        if (response.getStatus() != HttpServletResponse.SC_OK) {\n+            throw new ServletException(\"Error code [\" + response.getStatus() + \"], Error: [\" + response.getErrorMessage() + \"]\");\n+        }\n         return response.getContentAsString();\n     }\n \n@@ -131,12 +135,9 @@ protected ActionProxy getActionProxy(String uri) {\n         ActionProxy proxy = config.getContainer().getInstance(ActionProxyFactory.class).createActionProxy(\n                 namespace, name, method, new HashMap<String, Object>(), true, false);\n \n-        ActionContext invocationContext = proxy.getInvocation().getInvocationContext();\n-        invocationContext.setParameters(new HashMap(request.getParameterMap()));\n-        // set the action context to the one used by the proxy\n-        ActionContext.setContext(invocationContext);\n+        initActionContext(proxy.getInvocation().getInvocationContext());\n \n-        // this is normaly done in onSetUp(), but we are using Struts internal\n+        // this is normally done in onSetUp(), but we are using Struts internal\n         // objects (proxy and action invocation)\n         // so we have to hack around so it works\n         ServletActionContext.setServletContext(servletContext);\n@@ -146,6 +147,29 @@ protected ActionProxy getActionProxy(String uri) {\n         return proxy;\n     }\n \n+    private void initActionContext(ActionContext actionContext) {\n+        actionContext.setParameters(new HashMap(request.getParameterMap()));\n+\n+        initMockPortletContext(actionContext);\n+        applyAdditionalParams(actionContext);\n+\n+        // set the action context to the one used by the proxy\n+        ActionContext.setContext(actionContext);\n+    }\n+\n+    private void initMockPortletContext(ActionContext actionContext) {\n+        actionContext.put(StrutsStatics.STRUTS_PORTLET_CONTEXT, new MockPortletContext());\n+    }\n+\n+    /**\n+     * Can be overwritten in subclass to provide additional context's params and settings used during action invocation\n+     *\n+     * @param context current {@link ActionContext}\n+     */\n+    protected void applyAdditionalParams(ActionContext context) {\n+        // empty be default\n+    }\n+\n     /**\n      * Finds an ActionMapping for a given request\n      */\n@@ -179,10 +203,16 @@ protected void setUp() throws Exception {\n         super.setUp();\n         initServletMockObjects();\n         setupBeforeInitDispatcher();\n-        initDispatcher(dispatcherInitParams);\n+        Dispatcher dispatcher = initDispatcher(dispatcherInitParams);\n+        setupAfterInitDispatcher(dispatcher);\n     }\n \n     protected void setupBeforeInitDispatcher() throws Exception {\n+        // empty by default\n+    }\n+\n+    protected void setupAfterInitDispatcher(Dispatcher dispatcher) {\n+        // empty by default\n     }\n \n     protected void initServletMockObjects() {",
                "raw_url": "https://github.com/apache/struts/raw/872a7b0b6d368494594ad535994809b3951c11e8/plugins/junit/src/main/java/org/apache/struts2/StrutsTestCase.java",
                "sha": "fc31456bbbf0379e8518f5e9630b3c871b4b1c87",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/struts/blob/872a7b0b6d368494594ad535994809b3951c11e8/plugins/junit/src/test/java/org/apache/struts2/StrutsTestCaseTest.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/junit/src/test/java/org/apache/struts2/StrutsTestCaseTest.java?ref=872a7b0b6d368494594ad535994809b3951c11e8",
                "deletions": 0,
                "filename": "plugins/junit/src/test/java/org/apache/struts2/StrutsTestCaseTest.java",
                "patch": "@@ -21,13 +21,17 @@\n package org.apache.struts2;\r\n \r\n import com.opensymphony.xwork2.Action;\r\n+import com.opensymphony.xwork2.ActionContext;\r\n import com.opensymphony.xwork2.ActionProxy;\r\n import org.apache.struts2.dispatcher.mapper.ActionMapping;\r\n+import org.junit.Test;\r\n \r\n+import javax.portlet.PortletContext;\r\n import javax.servlet.ServletException;\r\n import java.io.UnsupportedEncodingException;\r\n \r\n public class StrutsTestCaseTest extends StrutsSpringTestCase {\r\n+\r\n     public void testGetActionMapping() {\r\n         ActionMapping mapping = getActionMapping(\"/test/testAction.action\");\r\n         assertNotNull(mapping);\r\n@@ -61,4 +65,38 @@ public void testGetValueFromStack() throws ServletException, UnsupportedEncoding\n         String name = (String) findValueAfterExecute(\"name\");\r\n         assertEquals(\"FD\", name);\r\n     }\r\n+\r\n+    @Test\r\n+    public void shouldPortletContextBeAvailable() throws Exception {\r\n+        // given\r\n+        assertNull(ActionContext.getContext().get(StrutsStatics.STRUTS_PORTLET_CONTEXT));\r\n+\r\n+        // when\r\n+        String output = executeAction(\"/test/testAction.action\");\r\n+        assertEquals(\"Hello\", output);\r\n+\r\n+        // then\r\n+        Object portletContext = ActionContext.getContext().get(StrutsStatics.STRUTS_PORTLET_CONTEXT);\r\n+        assertNotNull(portletContext);\r\n+        assertTrue(portletContext instanceof PortletContext);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void shouldAdditionalContextParamsBeAvailable() throws Exception {\r\n+        // given\r\n+        String key = \"my-param\";\r\n+        assertNull(ActionContext.getContext().get(key));\r\n+\r\n+        // when\r\n+        String output = executeAction(\"/test/testAction.action\");\r\n+        assertEquals(\"Hello\", output);\r\n+\r\n+        // then\r\n+        assertNotNull(ActionContext.getContext().get(key));\r\n+    }\r\n+\r\n+    @Override\r\n+    protected void applyAdditionalParams(ActionContext context) {\r\n+        context.put(\"my-param\", new Object());\r\n+    }\r\n }\r",
                "raw_url": "https://github.com/apache/struts/raw/872a7b0b6d368494594ad535994809b3951c11e8/plugins/junit/src/test/java/org/apache/struts2/StrutsTestCaseTest.java",
                "sha": "11373793cf938847dc45751cb9fad980915f7b9c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/struts/blob/872a7b0b6d368494594ad535994809b3951c11e8/plugins/portlet/pom.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/portlet/pom.xml?ref=872a7b0b6d368494594ad535994809b3951c11e8",
                "deletions": 2,
                "filename": "plugins/portlet/pom.xml",
                "patch": "@@ -18,9 +18,8 @@\n \n     <dependencies>\n         <dependency>\n-            <groupId>${project.groupId}</groupId>\n+            <groupId>org.apache.struts</groupId>\n             <artifactId>struts2-junit-plugin</artifactId>\n-            <version>${project.version}</version>\n             <scope>test</scope>\n         </dependency>\n ",
                "raw_url": "https://github.com/apache/struts/raw/872a7b0b6d368494594ad535994809b3951c11e8/plugins/portlet/pom.xml",
                "sha": "68f2f25a19693890704f42ee6aa1b9a3cfceb0cd",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/struts/blob/872a7b0b6d368494594ad535994809b3951c11e8/pom.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/pom.xml?ref=872a7b0b6d368494594ad535994809b3951c11e8",
                "deletions": 0,
                "filename": "pom.xml",
                "patch": "@@ -352,6 +352,11 @@\n                 <artifactId>struts2-dwr-plugin</artifactId>\n                 <version>${project.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>org.apache.struts</groupId>\n+                <artifactId>struts2-junit-plugin</artifactId>\n+                <version>${project.version}</version>\n+            </dependency>\n \n             <dependency>\n                 <groupId>org.freemarker</groupId>",
                "raw_url": "https://github.com/apache/struts/raw/872a7b0b6d368494594ad535994809b3951c11e8/pom.xml",
                "sha": "3b195c9ad9f13bbf83ceba30603698e19fc2af25",
                "status": "modified"
            }
        ],
        "message": "WW-3733 - adds missing PortletContext to ActionContext to avoid NPE during PortletResult initialisation\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@1226265 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/struts/commit/248d0f58796bdc1195440a4dee734e99643a566b",
        "repo": "struts",
        "unit_tests": [
            "StrutsTestCaseTest.java"
        ]
    },
    "struts_8bf6605": {
        "bug_id": "struts_8bf6605",
        "commit": "https://github.com/apache/struts/commit/8bf6605e6bc08cbc3e7bfd70d03ac5f988808405",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/struts/blob/8bf6605e6bc08cbc3e7bfd70d03ac5f988808405/plugins/jasperreports/src/main/java/org/apache/struts2/views/jasperreports/JasperReportsResult.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/jasperreports/src/main/java/org/apache/struts2/views/jasperreports/JasperReportsResult.java?ref=8bf6605e6bc08cbc3e7bfd70d03ac5f988808405",
                "deletions": 1,
                "filename": "plugins/jasperreports/src/main/java/org/apache/struts2/views/jasperreports/JasperReportsResult.java",
                "patch": "@@ -384,7 +384,10 @@ protected void doExecute(String finalLocation, ActionInvocation invocation) thro\n             throw new ServletException(e.getMessage(), e);\n         } finally {\n             try {\n-                conn.close();\n+                if(conn != null) {\n+                    // avoid NPE if connection was not used for the report\n+                    conn.close();\n+                }\n             } catch (Exception e) {\n                 LOG.warn(\"Could not close db connection properly\", e);\n             }",
                "raw_url": "https://github.com/apache/struts/raw/8bf6605e6bc08cbc3e7bfd70d03ac5f988808405/plugins/jasperreports/src/main/java/org/apache/struts2/views/jasperreports/JasperReportsResult.java",
                "sha": "bb089158db58f146a65c5ccdc25f4966286010d7",
                "status": "modified"
            }
        ],
        "message": "WW-4923 Null check to avoid NPE when not passing a JDBC connection to the jasper report",
        "parent": "https://github.com/apache/struts/commit/02c347afd4e83ea147be434739ceaeb83044393a",
        "repo": "struts",
        "unit_tests": [
            "JasperReportsResultTest.java"
        ]
    },
    "struts_8d4d131": {
        "bug_id": "struts_8d4d131",
        "commit": "https://github.com/apache/struts/commit/8d4d13147d673ce80059c4586d3e1817eb8e4264",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/struts/blob/8d4d13147d673ce80059c4586d3e1817eb8e4264/core/src/main/java/org/apache/struts2/components/OptGroup.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/components/OptGroup.java?ref=8d4d13147d673ce80059c4586d3e1817eb8e4264",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/struts2/components/OptGroup.java",
                "patch": "@@ -32,6 +32,8 @@\n import org.apache.struts2.views.annotations.StrutsTag;\n import org.apache.struts2.views.annotations.StrutsTagAttribute;\n \n+import com.opensymphony.xwork2.inject.Container;\n+import com.opensymphony.xwork2.inject.Inject;\n import com.opensymphony.xwork2.util.ValueStack;\n \n /**\n@@ -90,6 +92,11 @@ protected String getDefaultTemplate() {\n             }\n         };\n     }\n+    \n+    @Inject\n+    public void setContainer(Container container) {\n+        container.inject(internalUiBean);\n+    }\n \n     public boolean end(Writer writer, String body) {\n         Select select = (Select) findAncestor(Select.class);",
                "raw_url": "https://github.com/apache/struts/raw/8d4d13147d673ce80059c4586d3e1817eb8e4264/core/src/main/java/org/apache/struts2/components/OptGroup.java",
                "sha": "278017765d1b86d5452696cbc86c87758592583e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/struts/blob/8d4d13147d673ce80059c4586d3e1817eb8e4264/core/src/main/java/org/apache/struts2/dispatcher/ServletRedirectResult.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/dispatcher/ServletRedirectResult.java?ref=8d4d13147d673ce80059c4586d3e1817eb8e4264",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/struts2/dispatcher/ServletRedirectResult.java",
                "patch": "@@ -85,7 +85,7 @@\n \n     protected boolean prependServletContext = true;\n \n-    private ActionMapper actionMapper;\n+    protected ActionMapper actionMapper;\n \n     public ServletRedirectResult() {\n         super();",
                "raw_url": "https://github.com/apache/struts/raw/8d4d13147d673ce80059c4586d3e1817eb8e4264/core/src/main/java/org/apache/struts2/dispatcher/ServletRedirectResult.java",
                "sha": "e89affa6bd81ab78f1f91ec2412c5c8a93b5cfa5",
                "status": "modified"
            }
        ],
        "message": "Fixed optgroup throwing NPE, added file missing from commit fixing servlet action redirect\nWW-1670 WW-1662\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@501746 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/struts/commit/4a55d03e9a88ca0326a9308cfdf1b51b5a51d199",
        "repo": "struts",
        "unit_tests": [
            "OptGroupTest.java",
            "ServletRedirectResultTest.java"
        ]
    },
    "struts_9ed7fce": {
        "bug_id": "struts_9ed7fce",
        "commit": "https://github.com/apache/struts/commit/9ed7fce11aca24c1f951a49cec9599ba5de7bd91",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/struts/blob/9ed7fce11aca24c1f951a49cec9599ba5de7bd91/core/src/main/java/org/apache/struts2/dispatcher/ServletRedirectResult.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/dispatcher/ServletRedirectResult.java?ref=9ed7fce11aca24c1f951a49cec9599ba5de7bd91",
                "deletions": 2,
                "filename": "core/src/main/java/org/apache/struts2/dispatcher/ServletRedirectResult.java",
                "patch": "@@ -27,6 +27,7 @@\n import org.apache.commons.logging.LogFactory;\n import org.apache.struts2.ServletActionContext;\n import org.apache.struts2.dispatcher.mapper.ActionMapper;\n+import org.apache.struts2.dispatcher.mapper.ActionMapping;\n \n import com.opensymphony.xwork2.ActionContext;\n import com.opensymphony.xwork2.ActionInvocation;\n@@ -123,8 +124,12 @@ protected void doExecute(String finalLocation, ActionInvocation invocation) thro\n \n         if (isPathUrl(finalLocation)) {\n             if (!finalLocation.startsWith(\"/\")) {\n-                String namespace = actionMapper.getMapping(\n-                        request, Dispatcher.getInstance().getConfigurationManager()).getNamespace();\n+                ActionMapping mapping = actionMapper.getMapping(\n+                        request, Dispatcher.getInstance().getConfigurationManager()); \n+                String namespace = null;\n+                if (mapping != null) {\n+                    namespace = mapping.getNamespace();\n+                }\n \n                 if ((namespace != null) && (namespace.length() > 0) && (!\"/\".equals(namespace))) {\n                     finalLocation = namespace + \"/\" + finalLocation;",
                "raw_url": "https://github.com/apache/struts/raw/9ed7fce11aca24c1f951a49cec9599ba5de7bd91/core/src/main/java/org/apache/struts2/dispatcher/ServletRedirectResult.java",
                "sha": "cb8501ce919aff933e7bfdb3ddb1e0c37c09420a",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE when action mapper for current request is null\nWW-1662\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@498087 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/struts/commit/02424af910b1bfa291bf6b85deb6cfbac7ae4ae8",
        "repo": "struts",
        "unit_tests": [
            "ServletRedirectResultTest.java"
        ]
    },
    "struts_9f6c296": {
        "bug_id": "struts_9f6c296",
        "commit": "https://github.com/apache/struts/commit/9f6c296d4262796bac8be0013e09dfd4dfb501e9",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/struts/blob/9f6c296d4262796bac8be0013e09dfd4dfb501e9/core/src/main/java/org/apache/struts2/util/ContainUtil.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/util/ContainUtil.java?ref=9f6c296d4262796bac8be0013e09dfd4dfb501e9",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/struts2/util/ContainUtil.java",
                "patch": "@@ -93,7 +93,7 @@ public static boolean contains(Object obj1, Object obj2) {\n                 Object value = null;\n                 value = Array.get(obj1, i);\n \n-                if (value.equals(obj2)) {\n+                if (obj2.equals(value)) {\n                     //log.debug(\"obj1 is an array and contains obj2\");\n                     return true;\n                 }",
                "raw_url": "https://github.com/apache/struts/raw/9f6c296d4262796bac8be0013e09dfd4dfb501e9/core/src/main/java/org/apache/struts2/util/ContainUtil.java",
                "sha": "2952d8f4685bacec2ed0d00de2f9a0d2e506cc33",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/struts/blob/9f6c296d4262796bac8be0013e09dfd4dfb501e9/core/src/test/java/org/apache/struts2/util/ContainUtilTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/test/java/org/apache/struts2/util/ContainUtilTest.java?ref=9f6c296d4262796bac8be0013e09dfd4dfb501e9",
                "deletions": 0,
                "filename": "core/src/test/java/org/apache/struts2/util/ContainUtilTest.java",
                "patch": "@@ -42,6 +42,10 @@ public void testNull() throws Exception {\n         assertFalse(ContainUtil.contains(null, new Object()));\n     }\n \n+    public void testNullInAray()throws Exception {\n+        assertTrue(ContainUtil.contains(new String[] {\"a\", null, \"b\"}, \"b\"));\n+    }\n+\n     public void testSimpleList() throws Exception {\n         List<String> l = new ArrayList<String>();\n         l.add(\"one\");",
                "raw_url": "https://github.com/apache/struts/raw/9f6c296d4262796bac8be0013e09dfd4dfb501e9/core/src/test/java/org/apache/struts2/util/ContainUtilTest.java",
                "sha": "7e5d16208355193d547a7060dcd4df821637c934",
                "status": "modified"
            }
        ],
        "message": "WW-3166 Prevent NPE when there is a null element in an array\n\nthanks to Zoran Avtarovski for the patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@802937 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/struts/commit/353c2f203325c906d149799a11f36a82191c9e58",
        "repo": "struts",
        "unit_tests": [
            "ContainUtilTest.java"
        ]
    },
    "struts_a2a74f7": {
        "bug_id": "struts_a2a74f7",
        "commit": "https://github.com/apache/struts/commit/a2a74f7c9bb25ffcf0376b3bc92cadc95fa4346b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/struts/blob/a2a74f7c9bb25ffcf0376b3bc92cadc95fa4346b/core/src/main/java/org/apache/struts2/views/jsp/iterator/SubsetIteratorTag.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/views/jsp/iterator/SubsetIteratorTag.java?ref=a2a74f7c9bb25ffcf0376b3bc92cadc95fa4346b",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/struts2/views/jsp/iterator/SubsetIteratorTag.java",
                "patch": "@@ -194,7 +194,7 @@ public int doStartTag() throws JspException {\n \n         // source\n         Object source = null;\n-        if (sourceAttr == null && sourceAttr.length() <= 0) {\n+        if (sourceAttr == null || sourceAttr.length() == 0) {\n             source = findValue(\"top\");\n         } else {\n             source = findValue(sourceAttr);",
                "raw_url": "https://github.com/apache/struts/raw/a2a74f7c9bb25ffcf0376b3bc92cadc95fa4346b/core/src/main/java/org/apache/struts2/views/jsp/iterator/SubsetIteratorTag.java",
                "sha": "61f3942572655844d80f44833bb711054af45202",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE in subset iterator tag\nWW-1932\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@540570 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/struts/commit/537064df23d4cbfd8e77e9660c47b37d4bae48ce",
        "repo": "struts",
        "unit_tests": [
            "SubsetIteratorTagTest.java"
        ]
    },
    "struts_aaa27dc": {
        "bug_id": "struts_aaa27dc",
        "commit": "https://github.com/apache/struts/commit/aaa27dc380f1b846eddca8a6124240595dccec79",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/struts/blob/aaa27dc380f1b846eddca8a6124240595dccec79/core/src/main/java/org/apache/struts2/dispatcher/mapper/CompositeActionMapper.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/dispatcher/mapper/CompositeActionMapper.java?ref=aaa27dc380f1b846eddca8a6124240595dccec79",
                "deletions": 11,
                "filename": "core/src/main/java/org/apache/struts2/dispatcher/mapper/CompositeActionMapper.java",
                "patch": "@@ -21,18 +21,16 @@\n \n package org.apache.struts2.dispatcher.mapper;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.servlet.http.HttpServletRequest;\n-\n-import org.apache.struts2.StrutsConstants;\n-\n import com.opensymphony.xwork2.config.ConfigurationManager;\n import com.opensymphony.xwork2.inject.Container;\n import com.opensymphony.xwork2.inject.Inject;\n import com.opensymphony.xwork2.util.logging.Logger;\n import com.opensymphony.xwork2.util.logging.LoggerFactory;\n+import org.apache.struts2.StrutsConstants;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n \n /**\n  * <!-- START SNIPPET: description -->\n@@ -88,12 +86,11 @@\n     protected Container container;\n     \n     protected List<ActionMapper> actionMappers = new ArrayList<ActionMapper>();\n-    \n-    @Inject\n-    public void setContainer(Container container) {\n+\n+    public CompositeActionMapper(@Inject Container container) {\n         this.container = container;\n     }\n-    \n+\n     @Inject(StrutsConstants.STRUTS_MAPPER_COMPOSITE)\n     public void setActionMappers(String list) {\n         if (list != null) {",
                "raw_url": "https://github.com/apache/struts/raw/aaa27dc380f1b846eddca8a6124240595dccec79/core/src/main/java/org/apache/struts2/dispatcher/mapper/CompositeActionMapper.java",
                "sha": "ccfb6349aa54d451a7d8777b6897ca479f0b439e",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/struts/blob/aaa27dc380f1b846eddca8a6124240595dccec79/core/src/test/java/org/apache/struts2/dispatcher/mapper/CompositeActionMapperTest.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/test/java/org/apache/struts2/dispatcher/mapper/CompositeActionMapperTest.java?ref=aaa27dc380f1b846eddca8a6124240595dccec79",
                "deletions": 14,
                "filename": "core/src/test/java/org/apache/struts2/dispatcher/mapper/CompositeActionMapperTest.java",
                "patch": "@@ -21,23 +21,14 @@\n \n package org.apache.struts2.dispatcher.mapper;\n \n-import java.util.Iterator;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import javax.servlet.http.HttpServletRequest;\n-\n-import org.apache.struts2.StrutsConstants;\n-import org.springframework.mock.web.MockHttpServletRequest;\n-\n import com.mockobjects.dynamic.C;\n import com.mockobjects.dynamic.Mock;\n import com.opensymphony.xwork2.config.ConfigurationManager;\n import com.opensymphony.xwork2.inject.Container;\n-import com.opensymphony.xwork2.inject.Scope.Strategy;\n-\n import junit.framework.TestCase;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+\n+import javax.servlet.http.HttpServletRequest;\n \n /**\n  *\n@@ -49,9 +40,8 @@\n     Mock mockContainer;\n     \n     public void setUp() throws Exception {\n-        compositeActionMapper = new CompositeActionMapper();\n         mockContainer = new Mock(Container.class);\n-        compositeActionMapper.setContainer((Container)mockContainer.proxy());\n+        compositeActionMapper = new CompositeActionMapper((Container)mockContainer.proxy());\n     }\n     \n ",
                "raw_url": "https://github.com/apache/struts/raw/aaa27dc380f1b846eddca8a6124240595dccec79/core/src/test/java/org/apache/struts2/dispatcher/mapper/CompositeActionMapperTest.java",
                "sha": "e197550483f5b21c4f156fbdb6599e2301e3c11c",
                "status": "modified"
            }
        ],
        "message": "WW-3994 Uses constructor injections instead property injections to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@1458543 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/struts/commit/e091eb41f3da740a016bef74f65c3ed836e6b1ee",
        "repo": "struts",
        "unit_tests": [
            "CompositeActionMapperTest.java"
        ]
    },
    "struts_abbe9ac": {
        "bug_id": "struts_abbe9ac",
        "commit": "https://github.com/apache/struts/commit/abbe9ac9f03a98b1428a3b57a3e07777887f02af",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/struts/blob/abbe9ac9f03a98b1428a3b57a3e07777887f02af/apps/showcase/src/main/webapp/WEB-INF/decorators/main.jsp",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/apps/showcase/src/main/webapp/WEB-INF/decorators/main.jsp?ref=abbe9ac9f03a98b1428a3b57a3e07777887f02af",
                "deletions": 0,
                "filename": "apps/showcase/src/main/webapp/WEB-INF/decorators/main.jsp",
                "patch": "@@ -95,6 +95,7 @@\n \t</div>\n     <div id=\"footer\" class=\"clearfix\">\n         <p>Copyright &copy; 2003-<s:property value=\"#dateAction.now.year + 1900\" /> The Apache Software Foundation.</p>\n+        <s:hidden name=\"project-name\" value=\"Struts 2\" />\n     </div><!-- end footer -->\n     <p/>\n ",
                "raw_url": "https://github.com/apache/struts/raw/abbe9ac9f03a98b1428a3b57a3e07777887f02af/apps/showcase/src/main/webapp/WEB-INF/decorators/main.jsp",
                "sha": "bf2e12976e0929849be87492cb2cb8a8ca406642",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/struts/blob/abbe9ac9f03a98b1428a3b57a3e07777887f02af/core/src/main/java/org/apache/struts2/dispatcher/Dispatcher.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/dispatcher/Dispatcher.java?ref=abbe9ac9f03a98b1428a3b57a3e07777887f02af",
                "deletions": 2,
                "filename": "core/src/main/java/org/apache/struts2/dispatcher/Dispatcher.java",
                "patch": "@@ -436,7 +436,8 @@ public void serviceAction(HttpServletRequest request, HttpServletResponse respon\n \n         // If there was a previous value stack, then create a new copy and pass it in to be used by the new Action\n         ValueStack stack = (ValueStack) request.getAttribute(ServletActionContext.STRUTS_VALUESTACK_KEY);\n-        if (stack == null) {\n+        boolean nullStack = stack == null;\n+        if (nullStack) {\n             ActionContext ctx = ActionContext.getContext();\n             if (ctx != null) {\n                 stack = ctx.getValueStack();\n@@ -468,7 +469,7 @@ public void serviceAction(HttpServletRequest request, HttpServletResponse respon\n             }\n \n             // If there was a previous value stack then set it back onto the request\n-            if (stack != null) {\n+            if (!nullStack) {\n                 request.setAttribute(ServletActionContext.STRUTS_VALUESTACK_KEY, stack);\n             }\n         } catch (ConfigurationException e) {",
                "raw_url": "https://github.com/apache/struts/raw/abbe9ac9f03a98b1428a3b57a3e07777887f02af/core/src/main/java/org/apache/struts2/dispatcher/Dispatcher.java",
                "sha": "a26997fbda9f3323bc831d7c8b5810a7a6000b9e",
                "status": "modified"
            }
        ],
        "message": "WW-2937 Tags fail with NPE in sitemesh decorators, using legacy filters\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@729675 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/struts/commit/81f71427240cf61245498572cd115ead1d512905",
        "repo": "struts",
        "unit_tests": [
            "DispatcherTest.java"
        ]
    },
    "struts_b1546d7": {
        "bug_id": "struts_b1546d7",
        "commit": "https://github.com/apache/struts/commit/b1546d7382039d1b0bb46e5f023347a4fdc75e79",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/struts/blob/b1546d7382039d1b0bb46e5f023347a4fdc75e79/core/src/main/java/org/apache/struts2/interceptor/FileUploadInterceptor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/interceptor/FileUploadInterceptor.java?ref=b1546d7382039d1b0bb46e5f023347a4fdc75e79",
                "deletions": 2,
                "filename": "core/src/main/java/org/apache/struts2/interceptor/FileUploadInterceptor.java",
                "patch": "@@ -274,8 +274,9 @@ public String intercept(ActionInvocation invocation) throws Exception {\n             File[] file = multiWrapper.getFiles(inputValue);\n             for (int index = 0; index < file.length; index++) {\n                 File currentFile = file[index];\n-                LOG.info(getTextMessage(\"struts.messages.removing.file\", new Object[]{inputValue, currentFile}, ActionContext.getContext().getLocale()));\n-\n+                if(LOG.isInfoEnabled()) {\n+                \tLOG.info(getTextMessage(\"struts.messages.removing.file\", new Object[]{inputValue, currentFile}, ActionContext.getContext().getLocale()));\n+                }\n                 if ((currentFile != null) && currentFile.isFile()) {\n                     currentFile.delete();\n                 }",
                "raw_url": "https://github.com/apache/struts/raw/b1546d7382039d1b0bb46e5f023347a4fdc75e79/core/src/main/java/org/apache/struts2/interceptor/FileUploadInterceptor.java",
                "sha": "961720f6272b81991f7a651fb9bd0ffd7dc60b25",
                "status": "modified"
            }
        ],
        "message": "WW-2240 Temporary workaround for NPE problems when doing info logging. Patch by Benjamin McCann\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@615436 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/struts/commit/f5a88391e19eb3055ad650db72c7acac3615ef1b",
        "repo": "struts",
        "unit_tests": [
            "FileUploadInterceptorTest.java"
        ]
    },
    "struts_b86d3d1": {
        "bug_id": "struts_b86d3d1",
        "commit": "https://github.com/apache/struts/commit/b86d3d13fe7090b6c56f7ca45976e46079de4671",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/struts/blob/b86d3d13fe7090b6c56f7ca45976e46079de4671/core/src/main/java/org/apache/struts2/components/IteratorComponent.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/components/IteratorComponent.java?ref=b86d3d13fe7090b6c56f7ca45976e46079de4671",
                "deletions": 11,
                "filename": "core/src/main/java/org/apache/struts2/components/IteratorComponent.java",
                "patch": "@@ -21,19 +21,18 @@\n \n package org.apache.struts2.components;\n \n-import java.io.Writer;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Arrays;\n-\n+import com.opensymphony.xwork2.util.ValueStack;\n+import com.opensymphony.xwork2.util.logging.Logger;\n+import com.opensymphony.xwork2.util.logging.LoggerFactory;\n+import org.apache.struts2.util.MakeIterator;\n import org.apache.struts2.views.annotations.StrutsTag;\n import org.apache.struts2.views.annotations.StrutsTagAttribute;\n-import org.apache.struts2.util.MakeIterator;\n import org.apache.struts2.views.jsp.IteratorStatus;\n \n-import com.opensymphony.xwork2.util.ValueStack;\n-import com.opensymphony.xwork2.util.logging.Logger;\n-import com.opensymphony.xwork2.util.logging.LoggerFactory;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n \n /**\n  * <!-- START SNIPPET: javadoc -->\n@@ -357,7 +356,7 @@ public boolean end(Writer writer, String body) {\n         }\n     }\n \n-    class CounterIterator implements Iterator<Object> {\n+    static class CounterIterator implements Iterator<Object> {\n         private int step;\n         private int end;\n         private int currentIndex;\n@@ -380,7 +379,7 @@ public Object next() {\n             if (hasNext()) {\n                 int nextIndex = peekNextIndex();\n                 currentIndex += step;\n-                return value != null ? values.get(nextIndex) : nextIndex;\n+                return values != null ? values.get(nextIndex) : nextIndex;\n             } else {\n                 throw new IndexOutOfBoundsException(\"Index \" + ( currentIndex + step) + \" must be less than or equal to \" + end);\n             }",
                "raw_url": "https://github.com/apache/struts/raw/b86d3d13fe7090b6c56f7ca45976e46079de4671/core/src/main/java/org/apache/struts2/components/IteratorComponent.java",
                "sha": "e2acee821f903753876a1dd17bd148010a68fabf",
                "status": "modified"
            },
            {
                "additions": 91,
                "blob_url": "https://github.com/apache/struts/blob/b86d3d13fe7090b6c56f7ca45976e46079de4671/core/src/test/java/org/apache/struts2/components/IteratorComponentTest.java",
                "changes": 91,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/test/java/org/apache/struts2/components/IteratorComponentTest.java?ref=b86d3d13fe7090b6c56f7ca45976e46079de4671",
                "deletions": 0,
                "filename": "core/src/test/java/org/apache/struts2/components/IteratorComponentTest.java",
                "patch": "@@ -0,0 +1,91 @@\n+package org.apache.struts2.components;\n+\n+import com.opensymphony.xwork2.ActionContext;\n+import com.opensymphony.xwork2.util.ValueStack;\n+import org.apache.struts2.StrutsTestCase;\n+\n+import java.io.StringWriter;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class IteratorComponentTest extends StrutsTestCase {\n+\n+    public void testIterator() throws Exception {\n+        // given\n+        final ValueStack stack = ActionContext.getContext().getValueStack();\n+        stack.push(new FooAction());\n+\n+        StringWriter out = new StringWriter();\n+\n+        IteratorComponent ic = new IteratorComponent(stack);\n+        ic.setValue(\"items\");\n+        ic.setVar(\"val\");\n+\n+        Property prop = new Property(stack);\n+\n+        ic.getComponentStack().push(prop);\n+        ic.getComponentStack().push(prop);\n+        ic.getComponentStack().push(prop);\n+        ic.getComponentStack().push(prop);\n+\n+        String body = \" \";\n+\n+        // when\n+        assertTrue(ic.start(out));\n+\n+\n+        for (int i = 0; i < 4; i++) {\n+            prop.start(out);\n+            prop.end(out, body);\n+            ic.end(out, null);\n+        }\n+\n+        // then\n+        assertEquals(\"item1 item2 item3 item4 \", out.getBuffer().toString());\n+    }\n+\n+    public void testIteratorWithBegin() throws Exception {\n+        // given\n+        final ValueStack stack = ActionContext.getContext().getValueStack();\n+        stack.push(new FooAction());\n+\n+        StringWriter out = new StringWriter();\n+\n+        IteratorComponent ic = new IteratorComponent(stack);\n+        ic.setValue(\"items\");\n+        ic.setVar(\"val\");\n+        ic.setBegin(\"1\");\n+        Property prop = new Property(stack);\n+\n+        ic.getComponentStack().push(prop);\n+        ic.getComponentStack().push(prop);\n+        ic.getComponentStack().push(prop);\n+\n+        String body = \" \";\n+\n+        // when\n+        assertTrue(ic.start(out));\n+\n+        for (int i = 0; i < 3; i++) {\n+            prop.start(out);\n+            prop.end(out, body);\n+            ic.end(out, null);\n+        }\n+\n+        // then\n+        assertEquals(\"item2 item3 item4 \", out.getBuffer().toString());\n+    }\n+\n+    static class FooAction {\n+\n+        private List items;\n+\n+        public FooAction() {\n+            items = Arrays.asList(\"item1\", \"item2\", \"item3\", \"item4\");\n+        }\n+\n+        public List getItems() {\n+            return items;\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/struts/raw/b86d3d13fe7090b6c56f7ca45976e46079de4671/core/src/test/java/org/apache/struts2/components/IteratorComponentTest.java",
                "sha": "02ecb1ad138624ac73b8abb456cdb8f5ce049e6d",
                "status": "added"
            }
        ],
        "message": "WW-3942 solves NPE in iterator tag\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@1421210 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/struts/commit/0d93ceedf3d94ff855248d66ee394cbb53a280b6",
        "repo": "struts",
        "unit_tests": [
            "IteratorComponentTest.java"
        ]
    },
    "struts_b95f8df": {
        "bug_id": "struts_b95f8df",
        "commit": "https://github.com/apache/struts/commit/b95f8dfc5055e6a0db22af2c70b41f172c804c60",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/struts/blob/b95f8dfc5055e6a0db22af2c70b41f172c804c60/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/AbstractRemoteBean.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/AbstractRemoteBean.java?ref=b95f8dfc5055e6a0db22af2c70b41f172c804c60",
                "deletions": 1,
                "filename": "plugins/dojo/src/main/java/org/apache/struts2/dojo/components/AbstractRemoteBean.java",
                "patch": "@@ -110,8 +110,9 @@ public void evaluateExtraParams() {\n         else\n             addParameter(\"parseContent\", true);\n \n+        // generate a random ID if not explicitly set and not parsing the content\n         Boolean parseContent = (Boolean)stack.getContext().get(Head.PARSE_CONTENT);\n-        boolean generateId = (parseContent != null ? !parseContent : false);\n+        boolean generateId = (parseContent != null ? !parseContent : true);\n         \n         addParameter(\"pushId\", generateId);\n         if ((this.id == null || this.id.length() == 0) && generateId) {",
                "raw_url": "https://github.com/apache/struts/raw/b95f8dfc5055e6a0db22af2c70b41f172c804c60/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/AbstractRemoteBean.java",
                "sha": "9068a37537051ea11f678d7af2857fe5d64589e8",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/struts/blob/b95f8dfc5055e6a0db22af2c70b41f172c804c60/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/Autocompleter.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/Autocompleter.java?ref=b95f8dfc5055e6a0db22af2c70b41f172c804c60",
                "deletions": 1,
                "filename": "plugins/dojo/src/main/java/org/apache/struts2/dojo/components/Autocompleter.java",
                "patch": "@@ -324,7 +324,10 @@ public void evaluateExtraParams() {\n         if (resultsLimit != null)\n             addParameter(\"searchLimit\", findString(resultsLimit));\n         \n-        boolean generateId = !(Boolean)stack.getContext().get(Head.PARSE_CONTENT);\n+        // generate a random ID if not explicitly set and not parsing the content\n+        Boolean parseContent = (Boolean)stack.getContext().get(Head.PARSE_CONTENT);\n+        boolean generateId = (parseContent != null ? !parseContent : true);\n+        \n         addParameter(\"pushId\", generateId);\n         if ((this.id == null || this.id.length() == 0) && generateId) {\n             // resolves Math.abs(Integer.MIN_VALUE) issue reported by FindBugs ",
                "raw_url": "https://github.com/apache/struts/raw/b95f8dfc5055e6a0db22af2c70b41f172c804c60/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/Autocompleter.java",
                "sha": "9236f9cc9c60828fc19529d99652714be3470cfd",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/struts/blob/b95f8dfc5055e6a0db22af2c70b41f172c804c60/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/DateTimePicker.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/DateTimePicker.java?ref=b95f8dfc5055e6a0db22af2c70b41f172c804c60",
                "deletions": 1,
                "filename": "plugins/dojo/src/main/java/org/apache/struts2/dojo/components/DateTimePicker.java",
                "patch": "@@ -264,7 +264,10 @@ public void evaluateParams() {\n             }\n         }\n         \n-        boolean generateId = !(Boolean)stack.getContext().get(Head.PARSE_CONTENT);\n+        // generate a random ID if not explicitly set and not parsing the content\n+        Boolean parseContent = (Boolean)stack.getContext().get(Head.PARSE_CONTENT);\n+        boolean generateId = (parseContent != null ? !parseContent : true);\n+        \n         addParameter(\"pushId\", generateId);\n         if ((this.id == null || this.id.length() == 0) && generateId) {\n             // resolves Math.abs(Integer.MIN_VALUE) issue reported by FindBugs ",
                "raw_url": "https://github.com/apache/struts/raw/b95f8dfc5055e6a0db22af2c70b41f172c804c60/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/DateTimePicker.java",
                "sha": "2286f5b7a6d9dbd72a95fe7317cd61824a463713",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/struts/blob/b95f8dfc5055e6a0db22af2c70b41f172c804c60/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/Submit.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/Submit.java?ref=b95f8dfc5055e6a0db22af2c70b41f172c804c60",
                "deletions": 2,
                "filename": "plugins/dojo/src/main/java/org/apache/struts2/dojo/components/Submit.java",
                "patch": "@@ -236,8 +236,11 @@ public void evaluateExtraParams() {\n         \n         if (ajaxAfterValidation != null)\n             addParameter(\"ajaxAfterValidation\", findValue(ajaxAfterValidation, Boolean.class));\n-        \n-        boolean generateId = !(Boolean)stack.getContext().get(Head.PARSE_CONTENT);\n+\n+        // generate a random ID if not explicitly set and not parsing the content \n+        Boolean parseContent = (Boolean)stack.getContext().get(Head.PARSE_CONTENT);\n+        boolean generateId = (parseContent != null ? !parseContent : true);\n+\n         addParameter(\"pushId\", generateId);\n         if ((this.id == null || this.id.length() == 0) && generateId) {\n             // resolves Math.abs(Integer.MIN_VALUE) issue reported by FindBugs ",
                "raw_url": "https://github.com/apache/struts/raw/b95f8dfc5055e6a0db22af2c70b41f172c804c60/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/Submit.java",
                "sha": "8c260794726ca8ea140f3866c2ba1f3f5df64113",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/struts/blob/b95f8dfc5055e6a0db22af2c70b41f172c804c60/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/TabbedPanel.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/TabbedPanel.java?ref=b95f8dfc5055e6a0db22af2c70b41f172c804c60",
                "deletions": 1,
                "filename": "plugins/dojo/src/main/java/org/apache/struts2/dojo/components/TabbedPanel.java",
                "patch": "@@ -128,7 +128,10 @@ protected void evaluateExtraParams() {\n             addParameter(\"useSelectedTabCookie\", findString(useSelectedTabCookie));\n         }\n \n-        boolean generateId = !(Boolean)stack.getContext().get(Head.PARSE_CONTENT);\n+        // generate a random ID if not explicitly set and not parsing the content\n+        Boolean parseContent = (Boolean)stack.getContext().get(Head.PARSE_CONTENT);\n+        boolean generateId = (parseContent != null ? !parseContent : true);\n+        \n         addParameter(\"pushId\", generateId);\n         if ((this.id == null || this.id.length() == 0) && generateId) {\n             // resolves Math.abs(Integer.MIN_VALUE) issue reported by FindBugs ",
                "raw_url": "https://github.com/apache/struts/raw/b95f8dfc5055e6a0db22af2c70b41f172c804c60/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/TabbedPanel.java",
                "sha": "80a25c7b1b007651130384643a23913de158d639",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/struts/blob/b95f8dfc5055e6a0db22af2c70b41f172c804c60/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/TextArea.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/TextArea.java?ref=b95f8dfc5055e6a0db22af2c70b41f172c804c60",
                "deletions": 1,
                "filename": "plugins/dojo/src/main/java/org/apache/struts2/dojo/components/TextArea.java",
                "patch": "@@ -47,7 +47,10 @@ public TextArea(ValueStack stack, HttpServletRequest request,\n     public void evaluateExtraParams() {\n         super.evaluateExtraParams();\n \n-        boolean generateId = !(Boolean)stack.getContext().get(Head.PARSE_CONTENT);\n+        // generate a random ID if not explicitly set and not parsing the content\n+        Boolean parseContent = (Boolean)stack.getContext().get(Head.PARSE_CONTENT);\n+        boolean generateId = (parseContent != null ? !parseContent : true);\n+        \n         addParameter(\"pushId\", generateId);\n         if ((this.id == null || this.id.length() == 0) && generateId) {\n             // resolves Math.abs(Integer.MIN_VALUE) issue reported by FindBugs ",
                "raw_url": "https://github.com/apache/struts/raw/b95f8dfc5055e6a0db22af2c70b41f172c804c60/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/TextArea.java",
                "sha": "4b5b0db3880f5f3a48167c629df3add1f1e79fd0",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/struts/blob/b95f8dfc5055e6a0db22af2c70b41f172c804c60/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/Tree.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/Tree.java?ref=b95f8dfc5055e6a0db22af2c70b41f172c804c60",
                "deletions": 2,
                "filename": "plugins/dojo/src/main/java/org/apache/struts2/dojo/components/Tree.java",
                "patch": "@@ -253,8 +253,11 @@ protected void evaluateExtraParams() {\n             addParameter(\"href\", findString(href));\n         if (errorNotifyTopics != null)\n             addParameter(\"errorNotifyTopics\", findString(errorNotifyTopics));\n-        \n-        boolean generateId = !(Boolean)stack.getContext().get(Head.PARSE_CONTENT);\n+                \n+        // generate a random ID if not explicitly set and not parsing the content\n+        Boolean parseContent = (Boolean)stack.getContext().get(Head.PARSE_CONTENT);\n+        boolean generateId = (parseContent != null ? !parseContent : true);\n+\n         addParameter(\"pushId\", generateId);\n         if ((this.id == null || this.id.length() == 0) && generateId) {\n             // resolves Math.abs(Integer.MIN_VALUE) issue reported by FindBugs ",
                "raw_url": "https://github.com/apache/struts/raw/b95f8dfc5055e6a0db22af2c70b41f172c804c60/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/Tree.java",
                "sha": "1272b61614061385bdfb12d581515d957581ed52",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/struts/blob/b95f8dfc5055e6a0db22af2c70b41f172c804c60/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/TreeNode.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/TreeNode.java?ref=b95f8dfc5055e6a0db22af2c70b41f172c804c60",
                "deletions": 1,
                "filename": "plugins/dojo/src/main/java/org/apache/struts2/dojo/components/TreeNode.java",
                "patch": "@@ -115,7 +115,10 @@ protected String getDefaultTemplate() {\n     protected void evaluateExtraParams() {\n         super.evaluateExtraParams();\n         \n-        boolean generateId = !(Boolean)stack.getContext().get(Head.PARSE_CONTENT);\n+        // generate a random ID if not explicitly set and not parsing the content\n+        Boolean parseContent = (Boolean)stack.getContext().get(Head.PARSE_CONTENT);\n+        boolean generateId = (parseContent != null ? !parseContent : true);\n+\n         addParameter(\"pushId\", generateId);\n         if ((this.id == null || this.id.length() == 0) && generateId) {\n             // resolves Math.abs(Integer.MIN_VALUE) issue reported by FindBugs ",
                "raw_url": "https://github.com/apache/struts/raw/b95f8dfc5055e6a0db22af2c70b41f172c804c60/plugins/dojo/src/main/java/org/apache/struts2/dojo/components/TreeNode.java",
                "sha": "8a24ae946152c3d2891180e371ef47c8141e4346",
                "status": "modified"
            }
        ],
        "message": "WW-2498 Minor change to avoid NPE when parseContent attribute is missing on dojo tags or in the context. Defaults to false if null.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@629326 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/struts/commit/a0c5ea1944f745a01544d748ed911081f406d499",
        "repo": "struts",
        "unit_tests": [
            "SubmitTest.java",
            "TextAreaTest.java"
        ]
    },
    "struts_bc6d4bb": {
        "bug_id": "struts_bc6d4bb",
        "commit": "https://github.com/apache/struts/commit/bc6d4bb804dd4b14c9b5562feee4464e3d1b5bff",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/struts/blob/bc6d4bb804dd4b14c9b5562feee4464e3d1b5bff/core/src/main/java/org/apache/struts2/util/TokenHelper.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/util/TokenHelper.java?ref=bc6d4bb804dd4b14c9b5562feee4464e3d1b5bff",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/struts2/util/TokenHelper.java",
                "patch": "@@ -97,6 +97,9 @@ public static String getToken() {\n      * @return the token String or null, if the token could not be found\n      */\n     public static String getToken(String tokenName) {\n+        if (tokenName == null ) {\n+            return null;\n+        }\n         Map params = ActionContext.getContext().getParameters();\n         String[] tokens = (String[]) params.get(tokenName);\n         String token;",
                "raw_url": "https://github.com/apache/struts/raw/bc6d4bb804dd4b14c9b5562feee4464e3d1b5bff/core/src/main/java/org/apache/struts2/util/TokenHelper.java",
                "sha": "c103745091ecbfe81daee6186f9e9d27119de655",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/struts/blob/bc6d4bb804dd4b14c9b5562feee4464e3d1b5bff/core/src/test/java/org/apache/struts2/util/TokenHelperTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/test/java/org/apache/struts2/util/TokenHelperTest.java?ref=bc6d4bb804dd4b14c9b5562feee4464e3d1b5bff",
                "deletions": 0,
                "filename": "core/src/test/java/org/apache/struts2/util/TokenHelperTest.java",
                "patch": "@@ -58,6 +58,11 @@ public void testValidToken() {\n         assertTrue(TokenHelper.validToken());\n     }\n \n+    public void testGetTokenDoesNotNpe() {\n+        String token = TokenHelper.getToken(null);\n+        assertTrue(token == null);\n+    }\n+\n     protected void setUp() throws Exception {\n         session = new HashMap();\n         Map params = new HashMap();",
                "raw_url": "https://github.com/apache/struts/raw/bc6d4bb804dd4b14c9b5562feee4464e3d1b5bff/core/src/test/java/org/apache/struts2/util/TokenHelperTest.java",
                "sha": "e9c6e75b2bcc46f70c45c625533c3eaa3144bc4d",
                "status": "modified"
            }
        ],
        "message": "Fixing NPE in token processing WW-3150, thanks James Peltzer\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@781798 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/struts/commit/6deb1d5ea82dd0377453d9ceb64de521443b5751",
        "repo": "struts",
        "unit_tests": [
            "TokenHelperTest.java"
        ]
    },
    "struts_d3eb1fc": {
        "bug_id": "struts_d3eb1fc",
        "commit": "https://github.com/apache/struts/commit/d3eb1fc5955f793d18aea5c43d0ca077e0a8794b",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/struts/blob/d3eb1fc5955f793d18aea5c43d0ca077e0a8794b/apps/showcase/src/main/java/org/apache/struts2/showcase/fileupload/MultipleFileUploadUsingArrayAction.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/apps/showcase/src/main/java/org/apache/struts2/showcase/fileupload/MultipleFileUploadUsingArrayAction.java?ref=d3eb1fc5955f793d18aea5c43d0ca077e0a8794b",
                "deletions": 3,
                "filename": "apps/showcase/src/main/java/org/apache/struts2/showcase/fileupload/MultipleFileUploadUsingArrayAction.java",
                "patch": "@@ -32,9 +32,9 @@\n  */\n public class MultipleFileUploadUsingArrayAction extends ActionSupport {\n \n-\tprivate File[] uploads;\n-\tprivate String[] uploadFileNames;\n-\tprivate String[] uploadContentTypes;\n+\tprivate File[] uploads = new File[0];\n+\tprivate String[] uploadFileNames = new String[0];\n+\tprivate String[] uploadContentTypes = new String[0];\n \n \n \tpublic String upload() throws Exception {",
                "raw_url": "https://github.com/apache/struts/raw/d3eb1fc5955f793d18aea5c43d0ca077e0a8794b/apps/showcase/src/main/java/org/apache/struts2/showcase/fileupload/MultipleFileUploadUsingArrayAction.java",
                "sha": "dcf671e5e8a220925c3fafdfd6d82074c7c75b85",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/struts/blob/d3eb1fc5955f793d18aea5c43d0ca077e0a8794b/apps/showcase/src/main/resources/struts-fileupload.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/apps/showcase/src/main/resources/struts-fileupload.xml?ref=d3eb1fc5955f793d18aea5c43d0ca077e0a8794b",
                "deletions": 0,
                "filename": "apps/showcase/src/main/resources/struts-fileupload.xml",
                "patch": "@@ -40,6 +40,7 @@\n \t\t</action>\n \t\t\n \t\t<action name=\"doMultipleUploadUsingList\" class=\"org.apache.struts2.showcase.fileupload.MultipleFileUploadUsingListAction\" method=\"upload\">\n+                        <result name=\"input\">/WEB-INF/fileupload/multipleUploadUsingList.jsp</result>\n \t\t\t<result>/WEB-INF/fileupload/multiple-success.jsp</result>\n \t\t</action>\n \n@@ -49,6 +50,7 @@\n \t\t</action>\n \n \t\t<action name=\"doMultipleUploadUsingArray\" class=\"org.apache.struts2.showcase.fileupload.MultipleFileUploadUsingArrayAction\" method=\"upload\">\n+                        <result name=\"input\">/WEB-INF/fileupload/multipleUploadUsingArray.jsp</result>\n \t\t\t<result>/WEB-INF/fileupload/multiple-success.jsp</result>\n \t\t</action>\n ",
                "raw_url": "https://github.com/apache/struts/raw/d3eb1fc5955f793d18aea5c43d0ca077e0a8794b/apps/showcase/src/main/resources/struts-fileupload.xml",
                "sha": "33be370ba419425e09da00c88526402ddf1e8b5c",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/struts/blob/d3eb1fc5955f793d18aea5c43d0ca077e0a8794b/apps/showcase/src/main/webapp/WEB-INF/tags/non-ui/ifTag/testIf.jsp",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/apps/showcase/src/main/webapp/WEB-INF/tags/non-ui/ifTag/testIf.jsp?ref=d3eb1fc5955f793d18aea5c43d0ca077e0a8794b",
                "deletions": 0,
                "filename": "apps/showcase/src/main/webapp/WEB-INF/tags/non-ui/ifTag/testIf.jsp",
                "patch": "@@ -18,6 +18,7 @@\n * under the License.\n */\n -->\n+<%@page import=\"org.apache.struts2.showcase.hangman.HangmanConstants\" %>\n <%@taglib prefix=\"s\" uri=\"/struts-tags\" %>\n <html>\n <head>\n@@ -635,5 +636,18 @@\n \t\t</div>\n \t</div>\n </div>\n+<br>\n+<br>\n+    <p>\n+        A secondary test for this JSP visually verifies expression access to a public constant.\n+        A direct access to the same public constant via scriptlet provides secondary verification.\n+    </p>\n+<br>\n+<div>\n+    Test public static (constant) access (expression).  Value: <s:property default=\"unavailable\" value=\"@org.apache.struts2.showcase.hangman.HangmanConstants@HANGMAN_SESSION_KEY\" />\n+</div>\n+<div>\n+    Test public static (constant) access (scriptlet).  Value: <%=org.apache.struts2.showcase.hangman.HangmanConstants.HANGMAN_SESSION_KEY%>\n+</div>\n </body>\n </html>",
                "raw_url": "https://github.com/apache/struts/raw/d3eb1fc5955f793d18aea5c43d0ca077e0a8794b/apps/showcase/src/main/webapp/WEB-INF/tags/non-ui/ifTag/testIf.jsp",
                "sha": "a0d52a67772e5a5eea91902a14e1c4a438a37462",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/struts/blob/d3eb1fc5955f793d18aea5c43d0ca077e0a8794b/core/src/main/java/org/apache/struts2/config/entities/ConstantConfig.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/config/entities/ConstantConfig.java?ref=d3eb1fc5955f793d18aea5c43d0ca077e0a8794b",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/struts2/config/entities/ConstantConfig.java",
                "patch": "@@ -91,6 +91,7 @@\n     private BeanConfig localeProvider;\n     private BeanConfig localeProviderFactory;\n     private String mapperIdParameterName;\n+    private Boolean ognlAllowStaticFieldAccess;\n     private Boolean ognlAllowStaticMethodAccess;\n     private BeanConfig actionValidatorManager;\n     private BeanConfig valueStackFactory;\n@@ -219,6 +220,7 @@ private String classesToString(Set<Class<?>> classes) {\n         map.put(StrutsConstants.STRUTS_LOCALE_PROVIDER, beanConfToString(localeProvider));\n         map.put(StrutsConstants.STRUTS_LOCALE_PROVIDER_FACTORY, beanConfToString(localeProviderFactory));\n         map.put(StrutsConstants.STRUTS_ID_PARAMETER_NAME, mapperIdParameterName);\n+        map.put(StrutsConstants.STRUTS_ALLOW_STATIC_FIELD_ACCESS, Objects.toString(ognlAllowStaticFieldAccess, null));\n         map.put(StrutsConstants.STRUTS_ALLOW_STATIC_METHOD_ACCESS, Objects.toString(ognlAllowStaticMethodAccess, null));\n         map.put(StrutsConstants.STRUTS_ACTIONVALIDATORMANAGER, beanConfToString(actionValidatorManager));\n         map.put(StrutsConstants.STRUTS_VALUESTACKFACTORY, beanConfToString(valueStackFactory));\n@@ -824,6 +826,14 @@ public void setMapperIdParameterName(String mapperIdParameterName) {\n         this.mapperIdParameterName = mapperIdParameterName;\n     }\n \n+    public Boolean getOgnlAllowStaticFieldAccess() {\n+        return ognlAllowStaticFieldAccess;\n+    }\n+\n+    public void setOgnlAllowStaticFieldAccess(Boolean ognlAllowStaticFieldAccess) {\n+        this.ognlAllowStaticFieldAccess = ognlAllowStaticFieldAccess;\n+    }\n+\n     public Boolean getOgnlAllowStaticMethodAccess() {\n         return ognlAllowStaticMethodAccess;\n     }",
                "raw_url": "https://github.com/apache/struts/raw/d3eb1fc5955f793d18aea5c43d0ca077e0a8794b/core/src/main/java/org/apache/struts2/config/entities/ConstantConfig.java",
                "sha": "d92ce008a9f717e48462f9005619cc27c9e7dcc4",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/struts/blob/d3eb1fc5955f793d18aea5c43d0ca077e0a8794b/core/src/main/resources/org/apache/struts2/default.properties",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/resources/org/apache/struts2/default.properties?ref=d3eb1fc5955f793d18aea5c43d0ca077e0a8794b",
                "deletions": 0,
                "filename": "core/src/main/resources/org/apache/struts2/default.properties",
                "patch": "@@ -203,6 +203,9 @@ struts.xslt.nocache=false\n ### Whether to always select the namespace to be everything before the last slash or not\n struts.mapper.alwaysSelectFullNamespace=false\n \n+### Whether to allow static field access in OGNL expressions or not\n+struts.ognl.allowStaticFieldAccess=true\n+\n ### Whether to allow static method access in OGNL expressions or not\n struts.ognl.allowStaticMethodAccess=false\n ",
                "raw_url": "https://github.com/apache/struts/raw/d3eb1fc5955f793d18aea5c43d0ca077e0a8794b/core/src/main/resources/org/apache/struts2/default.properties",
                "sha": "a441e77ba4db83bdb440a1ba222c4ead35f0420c",
                "status": "modified"
            },
            {
                "additions": 289,
                "blob_url": "https://github.com/apache/struts/blob/d3eb1fc5955f793d18aea5c43d0ca077e0a8794b/core/src/test/java/com/opensymphony/xwork2/ognl/OgnlValueStackTest.java",
                "changes": 294,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/test/java/com/opensymphony/xwork2/ognl/OgnlValueStackTest.java?ref=d3eb1fc5955f793d18aea5c43d0ca077e0a8794b",
                "deletions": 5,
                "filename": "core/src/test/java/com/opensymphony/xwork2/ognl/OgnlValueStackTest.java",
                "patch": "@@ -19,15 +19,15 @@\n package com.opensymphony.xwork2.ognl;\n \n import com.opensymphony.xwork2.*;\n-import com.opensymphony.xwork2.config.ConfigurationManager;\n-import com.opensymphony.xwork2.config.ConfigurationProvider;\n-import com.opensymphony.xwork2.config.providers.XmlConfigurationProvider;\n+import com.opensymphony.xwork2.config.ConfigurationException;\n import com.opensymphony.xwork2.conversion.impl.XWorkConverter;\n-import com.opensymphony.xwork2.inject.Container;\n+import com.opensymphony.xwork2.inject.ContainerBuilder;\n import com.opensymphony.xwork2.ognl.accessor.CompoundRootAccessor;\n+import com.opensymphony.xwork2.test.StubConfigurationProvider;\n import com.opensymphony.xwork2.test.TestBean2;\n import com.opensymphony.xwork2.util.*;\n import com.opensymphony.xwork2.util.Foo;\n+import com.opensymphony.xwork2.util.location.LocatableProperties;\n import com.opensymphony.xwork2.util.reflection.ReflectionContextState;\n import ognl.PropertyAccessor;\n \n@@ -36,17 +36,33 @@\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.Map;\n+import org.apache.struts2.StrutsConstants;\n \n \n /**\n  * Unit test for OgnlValueStack.\n  */\n public class OgnlValueStackTest extends XWorkTestCase {\n \n+    // Fields for static field access test\n+    public static final String STATIC_FINAL_PUBLIC_ATTRIBUTE = \"Static_Final_Public_Attribute\";\n+    static final String STATIC_FINAL_PACKAGE_ATTRIBUTE = \"Static_Final_Package_Attribute\";\n+    protected static final String STATIC_FINAL_PROTECTED_ATTRIBUTE = \"Static_Final_Protected_Attribute\";\n+    private static final String STATIC_FINAL_PRIVATE_ATTRIBUTE = \"Static_Final_Private_Attribute\";\n+    public static String STATIC_PUBLIC_ATTRIBUTE = \"Static_Public_Attribute\";\n+    static String STATIC_PACKAGE_ATTRIBUTE = \"Static_Package_Attribute\";\n+    protected static String STATIC_PROTECTED_ATTRIBUTE = \"Static_Protected_Attribute\";\n+    private static String STATIC_PRIVATE_ATTRIBUTE = \"Static_Private_Attribute\";\n+\n+\n     public static Integer staticNullMethod() {\n         return null;\n     }\n \n+    public static Integer staticInteger100Method() {\n+        return 100;\n+    }\n+\n     private OgnlUtil ognlUtil;\n \n     @Override\n@@ -66,9 +82,38 @@ private OgnlValueStack createValueStack(boolean allowStaticMethodAccess, boolean\n                 container.getInstance(TextProvider.class, \"system\"), allowStaticMethodAccess, allowStaticFieldAccess);\n         container.inject(stack);\n         ognlUtil.setAllowStaticMethodAccess(Boolean.toString(allowStaticMethodAccess));\n+        ognlUtil.setAllowStaticFieldAccess(Boolean.toString(allowStaticFieldAccess));\n         return stack;\n     }\n \n+    /**\n+     * @return current OgnlValueStackFactory instance from current container\n+     */\n+    private OgnlValueStackFactory getValueStackFactory() {\n+        return (OgnlValueStackFactory) container.getInstance(ValueStackFactory.class);\n+    }\n+\n+    /**\n+     * Reloads container and gets a new OgnlValueStackFactory with specified new configuration.\n+     * Intended for testing OgnlValueStack instance(s) that are minimally configured.\n+     * This should help ensure no underlying configuration/injection side-effects are responsible\n+     * for the behaviour of fundamental access control flags).\n+     * \n+     * @param allowStaticMethod new allowStaticMethod configuration\n+     * @param allowStaticField new allowStaticField configuration\n+     * @return a new OgnlValueStackFactory with specified new configuration\n+     */\n+    private OgnlValueStackFactory reloadValueStackFactory(Boolean allowStaticMethod, Boolean allowStaticField) {\n+        try {\n+            reloadTestContainerConfiguration(allowStaticMethod, allowStaticField);\n+        }\n+        catch (Exception ex) {\n+            fail(\"Unable to reload container configuration and configure ognlValueStackFactory - exception: \" + ex);\n+        }\n+\n+        return getValueStackFactory();\n+    }\n+\n     public void testExpOverridesCanStackExpUp() throws Exception {\n         Map expr1 = new LinkedHashMap();\n         expr1.put(\"expr1\", \"'expr1value'\");\n@@ -580,7 +625,7 @@ public void testNullMethod() {\n         OgnlValueStack stack = createValueStack();\n         stack.push(dog);\n         assertNull(stack.findValue(\"nullMethod()\"));\n-        assertNull(stack.findValue(\"@com.opensymphony.xwork2.util.OgnlValueStackTest@staticNullMethod()\"));\n+        assertNull(stack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@staticNullMethod()\"));\n     }\n \n     public void testPetSoarBug() {\n@@ -980,6 +1025,245 @@ public void testWarnAboutInvalidProperties() {\n         assertEquals(null, stack.findValue(\"address.country.name\", String.class));\n     }\n \n+   /**\n+     * Test a default OgnlValueStackFactory and OgnlValueStack generated by it\n+     * when a default configuration is used.\n+     */\n+    public void testOgnlValueStackFromOgnlValueStackFactoryDefaultConfig() {\n+        OgnlValueStackFactory ognlValueStackFactory = getValueStackFactory();\n+        OgnlValueStack ognlValueStack = (OgnlValueStack) ognlValueStackFactory.createValueStack();\n+        Object accessedValue;\n+\n+        // An OgnlValueStackFactory using a container config with default (from XWorkConfigurationProvider)\n+        // static access flag values present should prevent staticMethodAccess but allow staticFieldAccess.\n+        assertFalse(\"OgnlValueStackFactory staticMethodAccess (default flags) not false?\", ognlValueStackFactory.containerAllowsStaticMethodAccess());\n+        assertTrue(\"OgnlValueStackFactory staticFieldAccess (default flags) not true?\", ognlValueStackFactory.containerAllowsStaticFieldAccess());\n+        // An OgnlValueStack created from the above OgnlValueStackFactory should allow public field access,\n+        // but prevent non-public field access.  It should also deny static method access.\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@staticInteger100Method()\");\n+        assertNull(\"able to access static method (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PUBLIC_ATTRIBUTE\");\n+        assertEquals(\"accessed static final public field value not equal to actual?\", accessedValue, STATIC_FINAL_PUBLIC_ATTRIBUTE);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PUBLIC_ATTRIBUTE\");\n+        assertEquals(\"accessed static public field value not equal to actual?\", accessedValue, STATIC_PUBLIC_ATTRIBUTE);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PACKAGE_ATTRIBUTE\");\n+        assertNull(\"accessed final package field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PACKAGE_ATTRIBUTE\");\n+        assertNull(\"accessed package field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PROTECTED_ATTRIBUTE\");\n+        assertNull(\"accessed final protected field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PROTECTED_ATTRIBUTE\");\n+        assertNull(\"accessed protected field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PRIVATE_ATTRIBUTE\");\n+        assertNull(\"accessed final private field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PRIVATE_ATTRIBUTE\");\n+        assertNull(\"accessed private field (result not null) ?\", accessedValue);\n+    }\n+\n+    /**\n+     * Test a raw OgnlValueStackFactory and OgnlValueStack generated by it\n+     * when no static access flags are set (not present in configuration).\n+     */\n+    public void testOgnlValueStackFromOgnlValueStackFactoryNoFlagsSet() {\n+        OgnlValueStackFactory ognlValueStackFactory = reloadValueStackFactory(null, null);\n+        OgnlValueStack ognlValueStack = (OgnlValueStack) ognlValueStackFactory.createValueStack();\n+        Object accessedValue;\n+\n+        // An OgnlValueStackFactory using a container config with no static access flag values present\n+        // (such as from a DefaultConfiguration vs. XWorkConfigurationProvider) should\n+        // prevent staticMethodAccess AND prevent staticFieldAccess.\n+        // Note: Under normal circumstances, explicit static access configuration flags should be present,\n+        // but this specific check verifies what happens if those configuration flags are not present.\n+        assertFalse(\"OgnlValueStackFactory staticMethodAccess (no flag present) not false?\", ognlValueStackFactory.containerAllowsStaticMethodAccess());\n+        assertFalse(\"OgnlValueStackFactory staticFieldAccess (no flag present) not false?\", ognlValueStackFactory.containerAllowsStaticFieldAccess());\n+        // An OgnlValueStack created from the above OgnlValueStackFactory should prevent public field access,\n+        // and prevent non-public field access.  It should also deny static method access.\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@staticInteger100Method()\");\n+        assertNull(\"able to access static method (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PUBLIC_ATTRIBUTE\");\n+        assertNull(\"able to access static final public field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PUBLIC_ATTRIBUTE\");\n+        assertNull(\"able to access static public field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PACKAGE_ATTRIBUTE\");\n+        assertNull(\"accessed final package field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PACKAGE_ATTRIBUTE\");\n+        assertNull(\"accessed package field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PROTECTED_ATTRIBUTE\");\n+        assertNull(\"accessed final protected field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PROTECTED_ATTRIBUTE\");\n+        assertNull(\"accessed protected field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PRIVATE_ATTRIBUTE\");\n+        assertNull(\"accessed final private field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PRIVATE_ATTRIBUTE\");\n+        assertNull(\"accessed private field (result not null) ?\", accessedValue);\n+    }\n+\n+    /**\n+     * Test a raw OgnlValueStackFactory and OgnlValueStack generated by it\n+     * when both static access flags are set to false.\n+     */\n+    public void testOgnlValueStackFromOgnlValueStackFactoryNoStaticAccess() {\n+        OgnlValueStackFactory ognlValueStackFactory = reloadValueStackFactory(false, false);\n+        OgnlValueStack ognlValueStack = (OgnlValueStack) ognlValueStackFactory.createValueStack();\n+        Object accessedValue;\n+\n+        // An OgnlValueStackFactory using a container config with both static access flags set false should\n+        // prevent staticMethodAccess AND prevent staticFieldAccess.\n+        assertFalse(\"OgnlValueStackFactory staticMethodAccess (set false) not false?\", ognlValueStackFactory.containerAllowsStaticMethodAccess());\n+        assertFalse(\"OgnlValueStackFactory staticFieldAccess (set false) not false?\", ognlValueStackFactory.containerAllowsStaticFieldAccess());\n+        // An OgnlValueStack created from the above OgnlValueStackFactory should prevent public field access,\n+        // and prevent non-public field access.  It should also deny static method access.\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@staticInteger100Method()\");\n+        assertNull(\"able to access static method (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PUBLIC_ATTRIBUTE\");\n+        assertNull(\"able to access static final public field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PUBLIC_ATTRIBUTE\");\n+        assertNull(\"able to access static public field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PACKAGE_ATTRIBUTE\");\n+        assertNull(\"accessed final package field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PACKAGE_ATTRIBUTE\");\n+        assertNull(\"accessed package field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PROTECTED_ATTRIBUTE\");\n+        assertNull(\"accessed final protected field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PROTECTED_ATTRIBUTE\");\n+        assertNull(\"accessed protected field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PRIVATE_ATTRIBUTE\");\n+        assertNull(\"accessed final private field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PRIVATE_ATTRIBUTE\");\n+        assertNull(\"accessed private field (result not null) ?\", accessedValue);\n+    }\n+\n+    /**\n+     * Test a raw OgnlValueStackFactory and OgnlValueStack generated by it\n+     * when both static access flags are set to true.\n+     */\n+    public void testOgnlValueStackFromOgnlValueStackFactoryAllStaticAccess() {\n+        OgnlValueStackFactory ognlValueStackFactory = reloadValueStackFactory(true, true);\n+        OgnlValueStack ognlValueStack = (OgnlValueStack) ognlValueStackFactory.createValueStack();\n+        Object accessedValue;\n+\n+        // An OgnlValueStackFactory using a container config with both static access flags set true should\n+        // allow both staticMethodAccess AND staticFieldAccess.\n+        assertTrue(\"OgnlValueStackFactory staticMethodAccess (set true) not true?\", ognlValueStackFactory.containerAllowsStaticMethodAccess());\n+        assertTrue(\"OgnlValueStackFactory staticFieldAccess (set true) not true?\", ognlValueStackFactory.containerAllowsStaticFieldAccess());\n+        // An OgnlValueStack created from the above OgnlValueStackFactory should allow public field access,\n+        // but prevent non-public field access.  It should also allow static method access.\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@staticInteger100Method()\");\n+        assertNotNull(\"unable to access static method (result null) ?\", accessedValue);\n+        assertEquals(\"accessed static method result not equal to expected?\", accessedValue, staticInteger100Method());\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PUBLIC_ATTRIBUTE\");\n+        assertEquals(\"accessed static final public field value not equal to actual?\", accessedValue, STATIC_FINAL_PUBLIC_ATTRIBUTE);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PUBLIC_ATTRIBUTE\");\n+        assertEquals(\"accessed static public field value not equal to actual?\", accessedValue, STATIC_PUBLIC_ATTRIBUTE);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PACKAGE_ATTRIBUTE\");\n+        assertNull(\"accessed final package field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PACKAGE_ATTRIBUTE\");\n+        assertNull(\"accessed package field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PROTECTED_ATTRIBUTE\");\n+        assertNull(\"accessed final protected field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PROTECTED_ATTRIBUTE\");\n+        assertNull(\"accessed protected field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PRIVATE_ATTRIBUTE\");\n+        assertNull(\"accessed final private field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PRIVATE_ATTRIBUTE\");\n+        assertNull(\"accessed private field (result not null) ?\", accessedValue);\n+    }\n+\n+    /**\n+     * Test a raw OgnlValueStackFactory and OgnlValueStack generated by it\n+     * when static method access flag is true, static field access flag is false.\n+     */\n+    public void testOgnlValueStackFromOgnlValueStackFactoryOnlyStaticMethodAccess() {\n+        OgnlValueStackFactory ognlValueStackFactory = reloadValueStackFactory(true, false);\n+        OgnlValueStack ognlValueStack = (OgnlValueStack) ognlValueStackFactory.createValueStack();\n+        Object accessedValue;\n+\n+        // An OgnlValueStackFactory using a container config with static method access flag true, static field access false should\n+        // allow staticMethodAccess but deny staticFieldAccess.\n+        assertTrue(\"OgnlValueStackFactory staticMethodAccess (set true) not true?\", ognlValueStackFactory.containerAllowsStaticMethodAccess());\n+        assertFalse(\"OgnlValueStackFactory staticFieldAccess (set false) not false?\", ognlValueStackFactory.containerAllowsStaticFieldAccess());\n+        // An OgnlValueStack created from the above OgnlValueStackFactory should deny public field access,\n+        // and also prevent non-public field access.  It should also allow static method access.\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@staticInteger100Method()\");\n+        assertNotNull(\"unable to access static method (result null) ?\", accessedValue);\n+        assertEquals(\"accessed static method result not equal to expected?\", accessedValue, staticInteger100Method());\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PUBLIC_ATTRIBUTE\");\n+        assertNull(\"able to access static final public field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PUBLIC_ATTRIBUTE\");\n+        assertNull(\"able to access static public field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PACKAGE_ATTRIBUTE\");\n+        assertNull(\"accessed final package field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PACKAGE_ATTRIBUTE\");\n+        assertNull(\"accessed package field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PROTECTED_ATTRIBUTE\");\n+        assertNull(\"accessed final protected field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PROTECTED_ATTRIBUTE\");\n+        assertNull(\"accessed protected field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PRIVATE_ATTRIBUTE\");\n+        assertNull(\"accessed final private field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PRIVATE_ATTRIBUTE\");\n+        assertNull(\"accessed private field (result not null) ?\", accessedValue);\n+    }\n+\n+    /**\n+     * Test a raw OgnlValueStackFactory and OgnlValueStack generated by it\n+     * when static method access flag is false, static field access flag is true.\n+     */\n+    public void testOgnlValueStackFromOgnlValueStackFactoryOnlyStaticFieldAccess() {\n+        OgnlValueStackFactory ognlValueStackFactory = reloadValueStackFactory(false, true);\n+        OgnlValueStack ognlValueStack = (OgnlValueStack) ognlValueStackFactory.createValueStack();\n+        Object accessedValue;\n+\n+        // An OgnlValueStackFactory using a container config with static method access flag false, static field access true should\n+        // deny staticMethodAccess but allow staticFieldAccess.\n+        assertFalse(\"OgnlValueStackFactory staticMethodAccess (set false) not false?\", ognlValueStackFactory.containerAllowsStaticMethodAccess());\n+        assertTrue(\"OgnlValueStackFactory staticFieldAccess (set true) not true?\", ognlValueStackFactory.containerAllowsStaticFieldAccess());\n+        // An OgnlValueStack created from the above OgnlValueStackFactory should allow public field access,\n+        // but prevent non-public field access.  It should also deny static method access.\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@staticInteger100Method()\");\n+        assertNull(\"able to access static method (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PUBLIC_ATTRIBUTE\");\n+        assertEquals(\"accessed static final public field value not equal to actual?\", accessedValue, STATIC_FINAL_PUBLIC_ATTRIBUTE);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PUBLIC_ATTRIBUTE\");\n+        assertEquals(\"accessed static public field value not equal to actual?\", accessedValue, STATIC_PUBLIC_ATTRIBUTE);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PACKAGE_ATTRIBUTE\");\n+        assertNull(\"accessed final package field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PACKAGE_ATTRIBUTE\");\n+        assertNull(\"accessed package field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PROTECTED_ATTRIBUTE\");\n+        assertNull(\"accessed final protected field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PROTECTED_ATTRIBUTE\");\n+        assertNull(\"accessed protected field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_FINAL_PRIVATE_ATTRIBUTE\");\n+        assertNull(\"accessed final private field (result not null) ?\", accessedValue);\n+        accessedValue = ognlValueStack.findValue(\"@com.opensymphony.xwork2.ognl.OgnlValueStackTest@STATIC_PRIVATE_ATTRIBUTE\");\n+        assertNull(\"accessed private field (result not null) ?\", accessedValue);\n+    }\n+\n+    private void reloadTestContainerConfiguration(Boolean allowStaticMethod, Boolean allowStaticField) throws Exception {\n+        loadConfigurationProviders(new StubConfigurationProvider() {\n+            @Override\n+            public void register(ContainerBuilder builder,\n+                                 LocatableProperties props) throws ConfigurationException {\n+                // null values simulate undefined (by removing).\n+                // undefined values then should be evaluated to false\n+                if (props.containsKey(StrutsConstants.STRUTS_ALLOW_STATIC_METHOD_ACCESS)) {\n+                    props.remove(StrutsConstants.STRUTS_ALLOW_STATIC_METHOD_ACCESS);\n+                }\n+                if (props.containsKey(StrutsConstants.STRUTS_ALLOW_STATIC_FIELD_ACCESS)) {\n+                    props.remove(StrutsConstants.STRUTS_ALLOW_STATIC_FIELD_ACCESS);\n+                }\n+                if (allowStaticMethod != null) {\n+                    props.setProperty(StrutsConstants.STRUTS_ALLOW_STATIC_METHOD_ACCESS, \"\" + allowStaticMethod);\n+                }\n+                if (allowStaticField != null) {\n+                    props.setProperty(StrutsConstants.STRUTS_ALLOW_STATIC_FIELD_ACCESS, \"\" + allowStaticField);\n+                }\n+            }\n+        });\n+        ognlUtil = container.getInstance(OgnlUtil.class);\n+    }\n+\n     class BadJavaBean {\n         private int count;\n         private int count2;",
                "raw_url": "https://github.com/apache/struts/raw/d3eb1fc5955f793d18aea5c43d0ca077e0a8794b/core/src/test/java/com/opensymphony/xwork2/ognl/OgnlValueStackTest.java",
                "sha": "b10cba7c61f9726330cfa94c98086a66ac12d331",
                "status": "modified"
            }
        ],
        "message": "Fix for default (un-configured) allowStaticFieldAccess state, Showcase Application in 2.6.x (#334)\n\n* Fix for default un-configured allowStaticFieldAccess state:\r\n1) Ensure OgnlValueStackFactory returns true for allowStaticFieldAccess when not configured (consistency - same as OgnlUtil does).\r\n2) Add test to OgnlValueStackTest for the no allowStaticXXX flags present.\r\n\r\nMinor config fixes for the Showcase Application in 2.6.x:\r\n1) File upload examples.  Multiple file upload missing result page (list and array), added missing JSP.  Added missing input results in configuration.\r\n2) File upload examples.  Fixed NPE for multiple file upload (array version) when no files selected.\r\n3) Add manual test for public constant access via expression (to If tag JSP).\r\n\r\n* Added missed logic elements from PR#320 (identified by Y. Zamani):\r\n1) Added ognlAllowStaticFieldAccess field and getter/setter to ConstantConfig.\r\n2) Added allowStaticFieldAccess (set to true) to default.properties.\r\n\r\n* Follow-up commit:\r\n- Fixed wrong package reference in testNullMethod(), as well as in new tets.\r\n- Added additional tests to cover the full set of static access flag combinations.\r\n\r\n* Follow-up commit:\r\n- Fixed createValueStack() not setting allowStaticFieldAccess parameter.\r\n- Removed 3 unused import statement.\r\n- Refactored OgnlValueStackFactory creation logic into two utility methods: getValueStackFactory(), reloadValueStackFactory()\r\n- Added one additional test with a raw OgnlValueStackFactory generated OgnlValueStack (staticMethodAccess false, staticFieldAccess true).\r\n  Test confirms same result as with a default OgnlValueStackFactory.",
        "parent": "https://github.com/apache/struts/commit/ce4f192676aeb433f8aa020977b62cda0fedf27b",
        "repo": "struts",
        "unit_tests": [
            "ConstantConfigTest.java"
        ]
    },
    "struts_eca561c": {
        "bug_id": "struts_eca561c",
        "commit": "https://github.com/apache/struts/commit/eca561c6747ab207f8b0c8cefb611590824511ac",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/struts/blob/eca561c6747ab207f8b0c8cefb611590824511ac/core/src/main/java/org/apache/struts2/components/UrlRenderer.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/org/apache/struts2/components/UrlRenderer.java?ref=eca561c6747ab207f8b0c8cefb611590824511ac",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/struts2/components/UrlRenderer.java",
                "patch": "@@ -21,6 +21,7 @@\n \n package org.apache.struts2.components;\n \n+import org.apache.struts2.dispatcher.mapper.ActionMapper;\n import java.io.Writer;\n \n /**\n@@ -49,4 +50,6 @@\n \t */\n \tvoid renderFormUrl(Form formComponent);\n \n+      void setActionMapper(ActionMapper actionMapper);\n+\n }",
                "raw_url": "https://github.com/apache/struts/raw/eca561c6747ab207f8b0c8cefb611590824511ac/core/src/main/java/org/apache/struts2/components/UrlRenderer.java",
                "sha": "faa71cc26f7d6826b0bd40fa654a8a61a6bf5872",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/struts/blob/eca561c6747ab207f8b0c8cefb611590824511ac/plugins/portlet/src/main/java/org/apache/struts2/components/PortletUrlRenderer.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/portlet/src/main/java/org/apache/struts2/components/PortletUrlRenderer.java?ref=eca561c6747ab207f8b0c8cefb611590824511ac",
                "deletions": 0,
                "filename": "plugins/portlet/src/main/java/org/apache/struts2/components/PortletUrlRenderer.java",
                "patch": "@@ -24,13 +24,15 @@\n import java.io.IOException;\n import java.io.Writer;\n \n+import org.apache.struts2.dispatcher.mapper.ActionMapper; \n import org.apache.struts2.StrutsException;\n import org.apache.struts2.portlet.context.PortletActionContext;\n import org.apache.struts2.portlet.util.PortletUrlHelper;\n import org.apache.commons.lang.xwork.StringUtils;\n \n import com.opensymphony.xwork2.ActionContext;\n import com.opensymphony.xwork2.ActionInvocation;\n+import com.opensymphony.xwork2.inject.Inject;\n \n /**\n  * Implementation of the {@link UrlRenderer} interface that renders URLs for portlet environments.\n@@ -48,6 +50,11 @@\n \tpublic PortletUrlRenderer() {\n \t\tthis.servletRenderer = new ServletUrlRenderer();\n \t}\n+\n+\t@Inject\n+\tpublic void setActionMapper(ActionMapper actionMapper) {\n+\t\tservletRenderer.setActionMapper(actionMapper);\n+\t}\n \t\n \t/**\n \t * {@inheritDoc}",
                "raw_url": "https://github.com/apache/struts/raw/eca561c6747ab207f8b0c8cefb611590824511ac/plugins/portlet/src/main/java/org/apache/struts2/components/PortletUrlRenderer.java",
                "sha": "ccc94801edb2bcf21b8cb555ce67f46e98c59c7a",
                "status": "modified"
            }
        ],
        "message": "WW-3164\n\nNeed to inject ActionMapper in PortletUrlRenderer to avoid NPE when passing through to ServletUrlRenderer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@788633 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/struts/commit/eae2fc668a26d374306ec7e074cb6db305ed26b1",
        "repo": "struts",
        "unit_tests": [
            "PortletUrlRendererTest.java"
        ]
    }
}