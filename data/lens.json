{
    "lens_0393d7b": {
        "bug_id": "lens_0393d7b",
        "commit": "https://github.com/apache/lens/commit/0393d7bef931462d1aeb4a4eb2f067c0e05843eb",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/lens/blob/0393d7bef931462d1aeb4a4eb2f067c0e05843eb/lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java?ref=0393d7bef931462d1aeb4a4eb2f067c0e05843eb",
                "deletions": 1,
                "filename": "lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java",
                "patch": "@@ -664,7 +664,7 @@ public void pruneAllPathsForCandidateDims(Map<Dimension, Set<CandidateDim>> cand\n           for (AbstractCubeTable refTable : jp.getAllTables()) {\n             List<String> cols = jp.getColumnsForTable(refTable);\n             if (refTable instanceof Dimension) {\n-              if (cols != null && !dimColumns.get(refTable).containsAll(cols)) {\n+              if (cols != null && (dimColumns.get(refTable) == null || !dimColumns.get(refTable).containsAll(cols))) {\n                 // This path requires some columns from the cube which are not present in any candidate dim\n                 // Remove this path\n                 LOG.info(\"Removing join path:\" + jp + \" as columns :\" + cols + \" dont exist\");",
                "raw_url": "https://github.com/apache/lens/raw/0393d7bef931462d1aeb4a4eb2f067c0e05843eb/lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java",
                "sha": "44c474a74de64d7c26f018087c8cc6c72657b048",
                "status": "modified"
            }
        ],
        "message": "LENS-382 : Fixes NPE in JoinResolver for wrong chains (Sushil Mohanty via amareshwari)",
        "parent": "https://github.com/apache/lens/commit/a70c8224a30aae5e0a08d71b2d04592df43d5c58",
        "repo": "lens",
        "unit_tests": [
            "TestJoinResolver.java"
        ]
    },
    "lens_24d4f15": {
        "bug_id": "lens_24d4f15",
        "commit": "https://github.com/apache/lens/commit/24d4f1531497e8b877fe185a0ef742b18acf125c",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/lens/blob/24d4f1531497e8b877fe185a0ef742b18acf125c/lens-cube/src/main/java/org/apache/lens/cube/parse/ExpressionResolver.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/parse/ExpressionResolver.java?ref=24d4f1531497e8b877fe185a0ef742b18acf125c",
                "deletions": 6,
                "filename": "lens-cube/src/main/java/org/apache/lens/cube/parse/ExpressionResolver.java",
                "patch": "@@ -317,12 +317,14 @@ boolean hasAggregates() {\n     }\n \n     ExpressionContext getExpressionContext(String expr, String alias) {\n-      for (ExpressionContext ec : allExprsQueried.get(expr)) {\n-        if (ec.getSrcAlias().equals(alias)) {\n-          return ec;\n+      if (allExprsQueried.get(expr) != null) {\n+        for (ExpressionContext ec : allExprsQueried.get(expr)) {\n+          if (ec.getSrcAlias().equals(alias)) {\n+            return ec;\n+          }\n         }\n       }\n-      throw new IllegalArgumentException(\"no expression available for \" + expr + \" alias:\" + alias);\n+      return null;\n     }\n \n     boolean hasMeasures(String expr, CubeInterface cube) {\n@@ -540,8 +542,11 @@ private ASTNode getExprAst(ExpressionContext expressionContext) {\n       expressionContexts.add(expressionContext);\n       for (StorageCandidate sc : scSet) {\n         storageTableNames.add(sc.getStorageTable());\n-        expressionContexts.add(sc.getCubeQueryContext().getExprCtx()\n-          .getExpressionContext(expressionContext.getExprCol().getName(), expressionContext.getSrcAlias()));\n+        ExpressionContext ex = sc.getCubeQueryContext().getExprCtx().getExpressionContext(expressionContext.\n+            getExprCol().getName(), expressionContext.getSrcAlias());\n+        if (ex != null) {\n+          expressionContexts.add(ex);\n+        }\n       }\n       for (ExpressionContext ec : expressionContexts) {\n         for (CandidateTable table : ec.evaluableExpressions.keySet()) {",
                "raw_url": "https://github.com/apache/lens/raw/24d4f1531497e8b877fe185a0ef742b18acf125c/lens-cube/src/main/java/org/apache/lens/cube/parse/ExpressionResolver.java",
                "sha": "553468fe9b11ff85209776a76948b78a595ce182",
                "status": "modified"
            }
        ],
        "message": "LENS-1474 : Fix NPE in ExpressionResolver for SegmentationCandidate",
        "parent": "https://github.com/apache/lens/commit/7c97071481e6efc0fcd22ee00887d5c365ef497c",
        "repo": "lens",
        "unit_tests": [
            "TestExpressionResolver.java"
        ]
    },
    "lens_8ef8cf4": {
        "bug_id": "lens_8ef8cf4",
        "commit": "https://github.com/apache/lens/commit/8ef8cf42bc9d2d31108929e628cf006e33cea3fb",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/lens/blob/8ef8cf42bc9d2d31108929e628cf006e33cea3fb/lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java?ref=8ef8cf42bc9d2d31108929e628cf006e33cea3fb",
                "deletions": 6,
                "filename": "lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java",
                "patch": "@@ -755,6 +755,8 @@ private void pruneAllPaths(final Map<Dimension, CandidateDim> dimsToQuery) {\n       }\n       // prune allPaths with qdims\n       LOG.info(\"pruning allPaths before generating all permutations.\");\n+      LOG.info(\"allPaths: \" + allPaths);\n+      LOG.info(\"qdims: \" + qdims);\n       pruneAllPathsWithQueriedDims(allPaths, qdims);\n \n       // Number of paths in each path set\n@@ -824,13 +826,11 @@ public void remove() {\n     private void pruneAllPathsWithQueriedDims\n       (Map<Aliased<Dimension>, List<SchemaGraph.JoinPath>> allPaths, Set<Dimension> qdims) {\n       Iterator<Map.Entry<Aliased<Dimension>, List<SchemaGraph.JoinPath>>> iter = allPaths.entrySet().iterator();\n-      while(iter.hasNext()) {\n+      while (iter.hasNext()) {\n         Map.Entry<Aliased<Dimension>, List<SchemaGraph.JoinPath>> cur = iter.next();\n-        if(cur.getKey().getAlias() == null) {\n-          if(!qdims.contains(cur.getKey().getObject())) {\n-            LOG.info(\"removing from allPaths: \" + cur);\n-            iter.remove();\n-          }\n+        if (!qdims.contains(cur.getKey().getObject())) {\n+          LOG.info(\"removing from allPaths: \" + cur);\n+          iter.remove();\n         }\n       }\n     }",
                "raw_url": "https://github.com/apache/lens/raw/8ef8cf42bc9d2d31108929e628cf006e33cea3fb/lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java",
                "sha": "7d8339bc36bc6ff9ad6c2ba9db045bdfb280e804",
                "status": "modified"
            }
        ],
        "message": "LENS-225 : Fix NPE in JoinResolver (Rajat Khandelwal via amareshwari)",
        "parent": "https://github.com/apache/lens/commit/ea2430e30d1f2564d6ecb34dba8a7ce1eae09f77",
        "repo": "lens",
        "unit_tests": [
            "TestJoinResolver.java"
        ]
    },
    "lens_ae6bda3": {
        "bug_id": "lens_ae6bda3",
        "commit": "https://github.com/apache/lens/commit/ae6bda33ed501e15dceeecea83c86adf189e4453",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/lens/blob/ae6bda33ed501e15dceeecea83c86adf189e4453/lens-cube/src/main/java/org/apache/lens/cube/parse/ExpressionResolver.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/parse/ExpressionResolver.java?ref=ae6bda33ed501e15dceeecea83c86adf189e4453",
                "deletions": 6,
                "filename": "lens-cube/src/main/java/org/apache/lens/cube/parse/ExpressionResolver.java",
                "patch": "@@ -314,12 +314,14 @@ boolean hasAggregates() {\n     }\n \n     ExpressionContext getExpressionContext(String expr, String alias) {\n-      for (ExpressionContext ec : allExprsQueried.get(expr)) {\n-        if (ec.getSrcAlias().equals(alias)) {\n-          return ec;\n+      if (allExprsQueried.get(expr) != null) {\n+        for (ExpressionContext ec : allExprsQueried.get(expr)) {\n+          if (ec.getSrcAlias().equals(alias)) {\n+            return ec;\n+          }\n         }\n       }\n-      throw new IllegalArgumentException(\"no expression available for \" + expr + \" alias:\" + alias);\n+      return null;\n     }\n \n     boolean hasMeasures(String expr, CubeInterface cube) {\n@@ -511,8 +513,11 @@ private ASTNode getExprAst(ExpressionContext expressionContext) {\n       expressionContexts.add(expressionContext);\n       for (StorageCandidate sc : scSet) {\n         storageTableNames.add(sc.getStorageTable());\n-        expressionContexts.add(sc.getCubeQueryContext().getExprCtx()\n-          .getExpressionContext(expressionContext.getExprCol().getName(), expressionContext.getSrcAlias()));\n+        ExpressionContext ex = sc.getCubeQueryContext().getExprCtx().getExpressionContext(expressionContext.\n+            getExprCol().getName(), expressionContext.getSrcAlias());\n+        if (ex != null) {\n+          expressionContexts.add(ex);\n+        }\n       }\n       for (ExpressionContext ec : expressionContexts) {\n         for (CandidateTable table : ec.evaluableExpressions.keySet()) {",
                "raw_url": "https://github.com/apache/lens/raw/ae6bda33ed501e15dceeecea83c86adf189e4453/lens-cube/src/main/java/org/apache/lens/cube/parse/ExpressionResolver.java",
                "sha": "822e25e75f9c8d2bf481a14cee132bb1c207143a",
                "status": "modified"
            }
        ],
        "message": "LENS-1474 : Fix NPE in ExpressionResolver for SegmentationCandidate",
        "parent": "https://github.com/apache/lens/commit/717214cf9f17337fa6769f03afb3391b39b014ee",
        "repo": "lens",
        "unit_tests": [
            "TestExpressionResolver.java"
        ]
    },
    "lens_c9edc68": {
        "bug_id": "lens_c9edc68",
        "commit": "https://github.com/apache/lens/commit/c9edc68d85b37a33467d0010ff68dcccc6a8b101",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/lens/blob/c9edc68d85b37a33467d0010ff68dcccc6a8b101/lens-query-lib/src/main/java/org/apache/lens/lib/query/CSVSerde.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-query-lib/src/main/java/org/apache/lens/lib/query/CSVSerde.java?ref=c9edc68d85b37a33467d0010ff68dcccc6a8b101",
                "deletions": 3,
                "filename": "lens-query-lib/src/main/java/org/apache/lens/lib/query/CSVSerde.java",
                "patch": "@@ -151,9 +151,12 @@\n   @Override\n   public void initialize(final Configuration conf, final Properties tbl) throws SerDeException {\n     List<String> columnNames = new ArrayList<String>();\n-    String[] names = tbl.getProperty(LIST_COLUMNS).split(\"(?!\\\"),(?!\\\")\");\n-    for (String name : names) {\n-      columnNames.add(StringEscapeUtils.unescapeCsv(name));\n+\n+    if (tbl.getProperty(LIST_COLUMNS) != null) {\n+      String[] names = tbl.getProperty(LIST_COLUMNS).split(\"(?!\\\"),(?!\\\")\");\n+      for (String name : names) {\n+        columnNames.add(StringEscapeUtils.unescapeCsv(name));\n+      }\n     }\n     String columnTypeProperty = tbl.getProperty(LIST_COLUMN_TYPES);\n     columnTypes = TypeInfoUtils.getTypeInfosFromTypeString(columnTypeProperty);\n@@ -472,6 +475,7 @@ public ObjectInspector getObjectInspector() throws SerDeException {\n     return Text.class;\n   }\n \n+  @Override\n   public SerDeStats getSerDeStats() {\n     return null;\n   }",
                "raw_url": "https://github.com/apache/lens/raw/c9edc68d85b37a33467d0010ff68dcccc6a8b101/lens-query-lib/src/main/java/org/apache/lens/lib/query/CSVSerde.java",
                "sha": "98314566d6f614dadeb33bb8cad284fe65889bad",
                "status": "modified"
            }
        ],
        "message": "LENS-427 : NPE in CSVSerde (Sushil Mohanty) via jdhok",
        "parent": "https://github.com/apache/lens/commit/954ee08c765e4648d3d81604bf307bb3117e8756",
        "repo": "lens",
        "unit_tests": [
            "TestCSVSerde.java"
        ]
    },
    "lens_e5a0ff1": {
        "bug_id": "lens_e5a0ff1",
        "commit": "https://github.com/apache/lens/commit/e5a0ff19aa179fbc858dbb3f70308186875ec728",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/lens/blob/e5a0ff19aa179fbc858dbb3f70308186875ec728/lens-server/src/main/java/org/apache/lens/server/util/ScannedPaths.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/util/ScannedPaths.java?ref=e5a0ff19aa179fbc858dbb3f70308186875ec728",
                "deletions": 14,
                "filename": "lens-server/src/main/java/org/apache/lens/server/util/ScannedPaths.java",
                "patch": "@@ -23,7 +23,6 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.net.URI;\n-import java.net.URISyntaxException;\n import java.nio.charset.Charset;\n import java.util.ArrayList;\n import java.util.Iterator;\n@@ -69,7 +68,8 @@ public ScannedPaths(String path, String type) {\n    */\n   private List<String> getMatchedPaths(String path, String type) {\n     List<String> finalPaths = new ArrayList<>();\n-    FileSystem fs;\n+    InputStream resourceOrderIStream = null;\n+    FileSystem fs = null;\n \n     try {\n       fs = FileSystem.get(new URI(path), new Configuration());\n@@ -85,7 +85,6 @@ public ScannedPaths(String path, String type) {\n          * CASE 2 : DIR provided in path\n          **/\n         Path resourceOrderFile = null;\n-        InputStream resourceOrderIStream = null;\n         FileStatus[] statuses;\n         List<String> newMatches;\n         List<String> resources;\n@@ -99,8 +98,10 @@ public ScannedPaths(String path, String type) {\n           if (!fs.exists(resourceOrderFile)) {\n             /** Get matched resources recursively for all files **/\n             statuses = fs.globStatus(new Path(pt, \"*\"));\n-            for (FileStatus st : statuses) {\n-              finalPaths.add(st.getPath().toUri().toString());\n+            if (statuses != null) {\n+              for (FileStatus st : statuses) {\n+                finalPaths.add(st.getPath().toUri().toString());\n+              }\n             }\n           } else {\n             resourceFileFound = true;\n@@ -135,22 +136,24 @@ public ScannedPaths(String path, String type) {\n          * CASE 3 : REGEX provided in path\n          * */\n         FileStatus[] statuses = fs.globStatus(pt);\n-        for (FileStatus st : statuses) {\n-          List<String> newMatches = getMatchedPaths(st.getPath().toString(), type);\n-          if (newMatches != null) {\n-            finalPaths.addAll(newMatches);\n+        if (statuses != null) {\n+          for (FileStatus st : statuses) {\n+            List<String> newMatches = getMatchedPaths(st.getPath().toString(), type);\n+            if (newMatches != null) {\n+              finalPaths.addAll(newMatches);\n+            }\n           }\n         }\n       }\n \n       filterDirsAndJarType(fs, finalPaths);\n \n     } catch (FileNotFoundException fex) {\n-      log.error(\"File not found while scanning path.\", fex);\n-    } catch (URISyntaxException | IOException ex) {\n-      log.error(\"Exception while initializing PathScanner.\", ex);\n+      log.error(\"File not found while scanning path. Path: {}, Type: {}\", path, type, fex);\n     } catch (Exception e) {\n-      log.error(\"Exception while initializing PathScanner.\", e);\n+      log.error(\"Exception while initializing PathScanner. Path: {}, Type: {}\", path, type, e);\n+    } finally {\n+      IOUtils.closeQuietly(resourceOrderIStream);\n     }\n \n     return finalPaths;\n@@ -174,7 +177,7 @@ private void filterDirsAndJarType(FileSystem fs, List<String> matches) {\n         }\n       }\n     } catch (IOException e) {\n-      log.error(\"Exception while initializing filtering dirs.\", e);\n+      log.error(\"Exception while initializing filtering dirs\", e);\n     }\n   }\n }",
                "raw_url": "https://github.com/apache/lens/raw/e5a0ff19aa179fbc858dbb3f70308186875ec728/lens-server/src/main/java/org/apache/lens/server/util/ScannedPaths.java",
                "sha": "4143525e4023176581153576c2b36c64f1e58980",
                "status": "modified"
            }
        ],
        "message": "LENS-712 : Fixes NPE while initializing ScannedPaths",
        "parent": "https://github.com/apache/lens/commit/e6f585b73733e67ed0fddaa1cb6586ba527bc515",
        "repo": "lens",
        "unit_tests": [
            "TestScannedPaths.java"
        ]
    }
}