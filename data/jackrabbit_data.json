[
    {
        "commit": "https://github.com/apache/jackrabbit/commit/442f485bfd1553bc4ceac49f38f3ae85e518f3f3",
        "file": [
            {
                "patch": "@@ -162,7 +162,9 @@ public void startDocument() throws SAXException {\n     @Override\n     public void endDocument() throws SAXException {\n         // delegate to target handler\n-        targetHandler.endDocument();\n+        if (targetHandler != null) {\n+            targetHandler.endDocument();\n+        }\n         // cleanup\n         nsContext.reset();\n     }",
                "additions": 3,
                "raw_url": "https://github.com/apache/jackrabbit/raw/442f485bfd1553bc4ceac49f38f3ae85e518f3f3/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/xml/ImportHandler.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "6f50df85847a650dda35054fe2106a271101a68b",
                "blob_url": "https://github.com/apache/jackrabbit/blob/442f485bfd1553bc4ceac49f38f3ae85e518f3f3/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/xml/ImportHandler.java",
                "filename": "jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/xml/ImportHandler.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/xml/ImportHandler.java?ref=442f485bfd1553bc4ceac49f38f3ae85e518f3f3"
            }
        ],
        "bug_id": "jackrabbit_1",
        "parent": "https://github.com/apache/jackrabbit/commit/5514bec790dbc45ad6f05c859afb6442b052a976",
        "message": "JCR-4483: jcr2spi: potential NPE in ImportHandler.endDocument\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1867130 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/7dba0a3c623be7a63d4dba6c138985a617c5b0f0",
        "file": [
            {
                "patch": "@@ -490,9 +490,18 @@ private void validateTransientItems(\n                  * its primary type has changed, check its node type against the\n                  * required node type in its definition\n                  */\n-                if (nodeState.getStatus() == ItemState.STATUS_NEW\n-                        || !nodeState.getNodeTypeName().equals(\n-                            ((NodeState) nodeState.getOverlayedState()).getNodeTypeName())) {\n+                boolean primaryTypeChanged =\n+                        nodeState.getStatus() == ItemState.STATUS_NEW;\n+                if (!primaryTypeChanged) {\n+                    NodeState overlaid =\n+                            (NodeState) nodeState.getOverlayedState();\n+                    if (overlaid != null) {\n+                        Name newName = nodeState.getNodeTypeName();\n+                        Name oldName = overlaid.getNodeTypeName();\n+                        primaryTypeChanged = !newName.equals(oldName);\n+                    }\n+                }\n+                if (primaryTypeChanged) {\n                     for (NodeType ntReq : nodeDef.getRequiredPrimaryTypes()) {\n                         Name ntName = ((NodeTypeImpl) ntReq).getQName();\n                         if (!(pnt.getQName().equals(ntName)",
                "additions": 12,
                "raw_url": "https://github.com/apache/jackrabbit/raw/7dba0a3c623be7a63d4dba6c138985a617c5b0f0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemSaveOperation.java",
                "status": "modified",
                "changes": 15,
                "deletions": 3,
                "sha": "49a17551ad994170abf62f071dd49b7cb9e3fc52",
                "blob_url": "https://github.com/apache/jackrabbit/blob/7dba0a3c623be7a63d4dba6c138985a617c5b0f0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemSaveOperation.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemSaveOperation.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemSaveOperation.java?ref=7dba0a3c623be7a63d4dba6c138985a617c5b0f0"
            },
            {
                "patch": "@@ -470,7 +470,9 @@ public NodeId getIdOfRootTransientNodeState() throws RepositoryException {\n         Collection<NodeId> candidateIds = new LinkedList<NodeId>();\n         try {\n             HierarchyManager hierMgr = getHierarchyMgr();\n-            for (ItemState state : transientStore.values()) {\n+            ItemState[] states =\n+                    transientStore.values().toArray(new ItemState[0]);\n+            for (ItemState state : states) {\n                 if (state.getStatus() == ItemState.STATUS_EXISTING_MODIFIED\n                         || state.getStatus() == ItemState.STATUS_STALE_DESTROYED) {\n                     NodeId nodeId;\n@@ -567,7 +569,6 @@ public boolean isItemStateInAttic(ItemId id) {\n      */\n     public NodeState createTransientNodeState(NodeId id, Name nodeTypeName, NodeId parentId, int initialStatus)\n             throws ItemStateException {\n-\n         // check map; synchronized to ensure an entry is not created twice.\n         synchronized (transientStore) {\n             if (transientStore.containsKey(id)) {",
                "additions": 3,
                "raw_url": "https://github.com/apache/jackrabbit/raw/7dba0a3c623be7a63d4dba6c138985a617c5b0f0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java",
                "status": "modified",
                "changes": 5,
                "deletions": 2,
                "sha": "9ff82d7485d2725cb56ea3d7c6beceb6468539b8",
                "blob_url": "https://github.com/apache/jackrabbit/blob/7dba0a3c623be7a63d4dba6c138985a617c5b0f0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java?ref=7dba0a3c623be7a63d4dba6c138985a617c5b0f0"
            }
        ],
        "bug_id": "jackrabbit_2",
        "parent": "https://github.com/apache/jackrabbit/commit/40b90eedff58a58c93427e25507bdc008c85c915",
        "message": "JCR-3063: NullPointerException in ItemManager\n\nAdd a few extra checks against NPEs and CMEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1176515 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/f95af78c5a567f14c3acfea0c6b7710ce0e25d9f",
        "file": [
            {
                "patch": "@@ -127,7 +127,7 @@ public Version getLinearSuccessor() throws RepositoryException {\n      */\n     public javax.jcr.version.Version getLinearPredecessor() throws RepositoryException {\n         InternalVersion pred = getInternalVersion().getLinearPredecessor();\n-        return (Version) sessionContext.getSessionImpl().getNodeById(pred.getId());\n+        return pred == null ? null : (Version) sessionContext.getSessionImpl().getNodeById(pred.getId());\n     }\n \n     /**",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/f95af78c5a567f14c3acfea0c6b7710ce0e25d9f/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "2070a6a74c67be28b81376210c11c4a9f1dc8c12",
                "blob_url": "https://github.com/apache/jackrabbit/blob/f95af78c5a567f14c3acfea0c6b7710ce0e25d9f/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionImpl.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionImpl.java?ref=f95af78c5a567f14c3acfea0c6b7710ce0e25d9f"
            },
            {
                "patch": "@@ -41,31 +41,34 @@ public void testGetPredecessors() throws RepositoryException {\n \n         assertTrue(\"Version should have at minimum one predecessor version.\", version.getPredecessors().length > 0);\n     }\n-    \n+\n     /**\n-     * Checks ontaining the linear predecessor.\n+     * Checks obtaining the linear predecessor.\n      * @since JCR 2.0\n      */\n     public void testGetLinearPredecessorSuccessor() throws RepositoryException {\n \n         String path = versionableNode.getPath();\n-        \n+\n         VersionManager vm = versionableNode.getSession().getWorkspace().getVersionManager();\n-        \n+\n         // get the previous version\n         Version pred = vm.getBaseVersion(path);\n \n+        // shouldn't have a predecessor\n+        assertNull(pred.getLinearPredecessor());\n+\n         // shouldn't have a successor yet\n         assertNull(pred.getLinearSuccessor());\n-        \n+\n         // check root version\n         Version root = vm.getVersionHistory(path).getRootVersion();\n         assertNull(root.getLinearSuccessor());\n-        \n+\n         // create a new version\n         vm.checkout(path);\n         Version version = vm.checkin(path);\n-        \n+\n         // refresh the predecessor\n         pred = (Version)versionableNode.getSession().getNode(pred.getPath());\n ",
                "additions": 10,
                "raw_url": "https://github.com/apache/jackrabbit/raw/f95af78c5a567f14c3acfea0c6b7710ce0e25d9f/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/GetPredecessorsTest.java",
                "status": "modified",
                "changes": 17,
                "deletions": 7,
                "sha": "00ab2a5575240cd5228cc3720ebced5ba274569d",
                "blob_url": "https://github.com/apache/jackrabbit/blob/f95af78c5a567f14c3acfea0c6b7710ce0e25d9f/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/GetPredecessorsTest.java",
                "filename": "jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/GetPredecessorsTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/GetPredecessorsTest.java?ref=f95af78c5a567f14c3acfea0c6b7710ce0e25d9f"
            }
        ],
        "bug_id": "jackrabbit_3",
        "parent": "https://github.com/apache/jackrabbit/commit/4e6739f9fc0759ab7ef1cc7a988e604f755c1d28",
        "message": "JCR-4324: NPE on Version.getLinearPredecessor() implementation\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1834424 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/40b90eedff58a58c93427e25507bdc008c85c915",
        "file": [
            {
                "patch": "@@ -159,7 +159,13 @@ NodeDefinitionImpl getDefinition(NodeState state)\n         if (parentId == null) {\n             // removed state has parentId set to null\n             // get from overlayed state\n-            parentId = state.getOverlayedState().getParentId();\n+            ItemState overlaid = state.getOverlayedState();\n+            if (overlaid != null) {\n+                parentId = overlaid.getParentId();\n+            } else {\n+                throw new InvalidItemStateException(\n+                        \"Could not find parent of node \" + state.getNodeId());\n+            }\n         }\n         NodeState parentState = null;\n         try {\n@@ -197,6 +203,12 @@ NodeDefinitionImpl getDefinition(NodeState state)\n \n         // get child node entry\n         ChildNodeEntry cne = parentState.getChildNodeEntry(state.getNodeId());\n+        if (cne == null) {\n+            throw new InvalidItemStateException(\n+                    \"Could not find child \" + state.getNodeId()\n+                    + \" of node \" + parentState.getNodeId());\n+        }\n+\n         NodeTypeRegistry ntReg = sessionContext.getNodeTypeRegistry();\n         try {\n             EffectiveNodeType ent = ntReg.getEffectiveNodeType(",
                "additions": 13,
                "raw_url": "https://github.com/apache/jackrabbit/raw/40b90eedff58a58c93427e25507bdc008c85c915/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
                "status": "modified",
                "changes": 14,
                "deletions": 1,
                "sha": "03055f8af8eaa7a788ac3e27526315a306b8358f",
                "blob_url": "https://github.com/apache/jackrabbit/blob/40b90eedff58a58c93427e25507bdc008c85c915/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java?ref=40b90eedff58a58c93427e25507bdc008c85c915"
            },
            {
                "patch": "@@ -65,13 +65,13 @@\n      * map of those states that have been removed transiently\n      */\n     private final Map<ItemId, ItemState> atticStore =\n-        new HashMap<ItemId, ItemState>();\n+            Collections.synchronizedMap(new HashMap<ItemId, ItemState>());\n \n     /**\n      * map of new or modified transient states\n      */\n     private final Map<ItemId, ItemState> transientStore =\n-        new HashMap<ItemId, ItemState>();\n+            Collections.synchronizedMap(new HashMap<ItemId, ItemState>());\n \n     /**\n      * ItemStateManager view of the states in the attic; lazily instantiated\n@@ -415,7 +415,8 @@ public boolean hasAnyTransientItemStates() {\n             // Group the descendants by reverse relative depth\n             SortedMap<Integer, Collection<ItemState>> statesByReverseDepth =\n                 new TreeMap<Integer, Collection<ItemState>>();\n-            for (ItemState state : store.values()) {\n+            ItemState[] states = store.values().toArray(new ItemState[0]);\n+            for (ItemState state : states) {\n                 // determine relative depth: > 0 means it's a descendant\n                 int depth = hierarchyManager.getShareRelativeDepth(\n                         (NodeId) id, state.getId());\n@@ -732,11 +733,12 @@ public void disposeTransientItemStateInAttic(ItemState state) {\n     public void disposeAllTransientItemStates() {\n         // dispose item states in transient map & attic\n         // (use temp collection to avoid ConcurrentModificationException)\n-        Collection<ItemState> tmp = new ArrayList<ItemState>(transientStore.values());\n+        ItemState[] tmp;\n+        tmp = transientStore.values().toArray(new ItemState[0]);\n         for (ItemState state : tmp) {\n             disposeTransientItemState(state);\n         }\n-        tmp = new ArrayList<ItemState>(atticStore.values());\n+        tmp = atticStore.values().toArray(new ItemState[0]);\n         for (ItemState state : tmp) {\n             disposeTransientItemStateInAttic(state);\n         }\n@@ -841,9 +843,8 @@ public void stateDestroyed(ItemState destroyed) {\n                 visibleState = transientState;\n             } else {\n                 // check attic\n-                transientState = atticStore.get(destroyed.getId());\n+                transientState = atticStore.remove(destroyed.getId());\n                 if (transientState != null) {\n-                    atticStore.remove(destroyed.getId());\n                     transientState.onDisposed();\n                 }\n             }",
                "additions": 8,
                "raw_url": "https://github.com/apache/jackrabbit/raw/40b90eedff58a58c93427e25507bdc008c85c915/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java",
                "status": "modified",
                "changes": 15,
                "deletions": 7,
                "sha": "ffbad9decd9dbc0bc31d91e611dd1e06dadbab06",
                "blob_url": "https://github.com/apache/jackrabbit/blob/40b90eedff58a58c93427e25507bdc008c85c915/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java?ref=40b90eedff58a58c93427e25507bdc008c85c915"
            },
            {
                "patch": "@@ -771,13 +771,14 @@ public void end() throws ItemStateException {\n \n             ISMLocking.ReadLock readLock = null;\n             try {\n-                // Let the shared item listeners know about the change\n-                shared.persisted();\n-\n                 // downgrade to read lock\n                 readLock = writeLock.downgrade();\n                 writeLock = null;\n \n+                // Let the shared item listeners know about the change\n+                // JCR-2171: This must happen after downgrading the lock!\n+                shared.persisted();\n+\n                 /* notify virtual providers about node references */\n                 for (int i = 0; i < virtualNodeReferences.length; i++) {\n                     ChangeLog virtualRefs = virtualNodeReferences[i];",
                "additions": 4,
                "raw_url": "https://github.com/apache/jackrabbit/raw/40b90eedff58a58c93427e25507bdc008c85c915/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
                "status": "modified",
                "changes": 7,
                "deletions": 3,
                "sha": "58f12b45791eb88269bbe88d8d64528abf5a9cd0",
                "blob_url": "https://github.com/apache/jackrabbit/blob/40b90eedff58a58c93427e25507bdc008c85c915/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java?ref=40b90eedff58a58c93427e25507bdc008c85c915"
            }
        ],
        "bug_id": "jackrabbit_4",
        "parent": "https://github.com/apache/jackrabbit/commit/54e23acfe15eb2c9604b31b06010fd0a189825c2",
        "message": "JCR-3063: NullPointerException in ItemManager\n\nRestore the JCR-2171 fix to avoid deadlocks.\n\nIntroduce extra synchronization and checks to prevent\nthe CMEs and replace the NPEs with InvalidItemStateExceptions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1176465 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/2c14f02f8911056a27b8d0505d261c78d57482e0",
        "file": [
            {
                "patch": "@@ -193,6 +193,7 @@ public void createEventStates(NodeId rootNodeId, ChangeLog changes, ItemStateMan\n                     NodeId newParentId = n.getParentId();\n                     if (newParentId != null && !oldParentId.equals(newParentId) &&\n                             !n.isShareable()) {\n+                        Path oldPath = getZombiePath(n.getNodeId(), hmgr);\n \n                         // node moved\n                         // generate node removed & node added event\n@@ -204,20 +205,29 @@ public void createEventStates(NodeId rootNodeId, ChangeLog changes, ItemStateMan\n                             // shared item state manager\n                             oldParent = (NodeState) stateMgr.getItemState(oldParentId);\n                         }\n-\n-                        NodeTypeImpl oldParentNodeType = getNodeType(oldParent, session);\n-                        Set<Name> mixins = oldParent.getMixinTypeNames();\n-                        Path newPath = getPath(n.getNodeId(), hmgr);\n-                        Path oldPath = getZombiePath(n.getNodeId(), hmgr);\n-                        events.add(EventState.childNodeRemoved(oldParentId,\n-                                getParent(oldPath), n.getNodeId(),\n-                                oldPath.getNameElement(),\n-                                oldParentNodeType.getQName(),\n-                                mixins, session));\n+                        if (oldParent != null) {\n+                            NodeTypeImpl oldParentNodeType = getNodeType(oldParent, session);\n+                            events.add(EventState.childNodeRemoved(oldParentId,\n+                                    getParent(oldPath), n.getNodeId(),\n+                                    oldPath.getNameElement(),\n+                                    oldParentNodeType.getQName(),\n+                                    oldParent.getMixinTypeNames(), session));\n+                        } else {\n+                            // JCR-2298: In some cases the old parent node\n+                            // state is no longer available anywhere. Log an\n+                            // error since in this case we can't generate the\n+                            // correct REMOVE event.\n+                            log.error(\n+                                    \"The old parent (node id \" + oldParentId\n+                                    + \") of a moved node (old path \"\n+                                    + oldPath + \") is no longer available.\"\n+                                    + \" No REMOVE event generated!\");\n+                        }\n \n                         NodeState newParent = (NodeState) changes.get(newParentId);\n                         NodeTypeImpl newParentNodeType = getNodeType(newParent, session);\n-                        mixins = newParent.getMixinTypeNames();\n+                        Set<Name> mixins = newParent.getMixinTypeNames();\n+                        Path newPath = getPath(n.getNodeId(), hmgr);\n                         events.add(EventState.childNodeAdded(newParentId,\n                                 getParent(newPath), n.getNodeId(),\n                                 newPath.getNameElement(),",
                "additions": 21,
                "raw_url": "https://github.com/apache/jackrabbit/raw/2c14f02f8911056a27b8d0505d261c78d57482e0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/EventStateCollection.java",
                "status": "modified",
                "changes": 32,
                "deletions": 11,
                "sha": "bb69561325cdb9f1970bd11fa7db285fbf3964a5",
                "blob_url": "https://github.com/apache/jackrabbit/blob/2c14f02f8911056a27b8d0505d261c78d57482e0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/EventStateCollection.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/EventStateCollection.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/EventStateCollection.java?ref=2c14f02f8911056a27b8d0505d261c78d57482e0"
            }
        ],
        "bug_id": "jackrabbit_5",
        "parent": "https://github.com/apache/jackrabbit/commit/2fb09c86c8620740e187d385b984a2b3ca5ea77a",
        "message": "JCR-2298: NPE in EventStateCollection\n\nLog an error and skip the REMOVE event when the old parent of a moved node is no longer available. This is not ideal, but definitely better than the current behaviour of throwing a NullPointerException.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@890401 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/c4e3a766830fd2849881db89011c1144f0eb21d4",
        "file": [
            {
                "patch": "@@ -158,7 +158,7 @@ public boolean equals(Object obj) {\n         if (obj instanceof GlobPattern) {\n             GlobPattern other = (GlobPattern) obj;\n             return nodePath.equals(other.nodePath) &&\n-                    (restriction == null) ? other.restriction == null : restriction.equals(other.restriction);\n+                    ((restriction == null) ? other.restriction == null : restriction.equals(other.restriction));\n         }\n         return false;\n     }",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/c4e3a766830fd2849881db89011c1144f0eb21d4/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/GlobPattern.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "b9eab6769292b68206e2e5a6a84b79c05ba3c84b",
                "blob_url": "https://github.com/apache/jackrabbit/blob/c4e3a766830fd2849881db89011c1144f0eb21d4/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/GlobPattern.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/GlobPattern.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/GlobPattern.java?ref=c4e3a766830fd2849881db89011c1144f0eb21d4"
            },
            {
                "patch": "@@ -351,4 +351,22 @@ public void testEmptyRestriction() {\n     public void testMatchesItem() {\n        // TODO\n     }\n+\n+     public void testEquals() {\n+         GlobPattern gp1 = GlobPattern.create(\"/a/b/c\");\n+         GlobPattern gp2 = GlobPattern.create(\"/a/b/c\");\n+         assertEquals(gp1, gp2);\n+\n+         gp1 = GlobPattern.create(\"/a/b/c\");\n+         gp2 = GlobPattern.create(\"/a/b/c/d\");\n+         assertFalse(gp1.equals(gp2));\n+\n+         gp1 = GlobPattern.create(\"/a/b/c\", null);\n+         gp2 = GlobPattern.create(\"/a/b/c\", \"\");\n+         assertFalse(gp1.equals(gp2));\n+\n+         gp1 = GlobPattern.create(\"/a/b/c\", \"\");\n+         gp2 = GlobPattern.create(\"/a/b/c\", \"\");\n+         assertEquals(gp1, gp2);\n+     }\n }",
                "additions": 18,
                "raw_url": "https://github.com/apache/jackrabbit/raw/c4e3a766830fd2849881db89011c1144f0eb21d4/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/GlobPatternTest.java",
                "status": "modified",
                "changes": 18,
                "deletions": 0,
                "sha": "d392f74abd2bf68312a35218e822cea2b200edcd",
                "blob_url": "https://github.com/apache/jackrabbit/blob/c4e3a766830fd2849881db89011c1144f0eb21d4/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/GlobPatternTest.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/GlobPatternTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/GlobPatternTest.java?ref=c4e3a766830fd2849881db89011c1144f0eb21d4"
            }
        ],
        "bug_id": "jackrabbit_6",
        "parent": "https://github.com/apache/jackrabbit/commit/d0538556898985b9eb77e48f445304dd721e81c5",
        "message": "JCR-3882: GlobalPattern's equals() implementation throws NullPointerException\n\nApply Woonsan Ko's pull request. Thanks Pedro Teixeira for reporting the issue.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1759440 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/dcbf17fe78596f45f50f82f124816766b4ace0c9",
        "file": [
            {
                "patch": "@@ -269,7 +269,9 @@ public void run() {\n                 }\n             });\n         } catch (Exception e) {\n-            callback.onAbort(new AsyncTouchResult(identifier));\n+            if (callback != null) {\n+                callback.onAbort(new AsyncTouchResult(identifier));\n+            }\n             throw new DataStoreException(\"Cannot touch the record \"\n                 + identifier.toString(), e);\n         }",
                "additions": 3,
                "raw_url": "https://github.com/apache/jackrabbit/raw/dcbf17fe78596f45f50f82f124816766b4ace0c9/jackrabbit-data/src/main/java/org/apache/jackrabbit/core/data/FSBackend.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "1437178d556a957c67e19804f92820df2d89b074",
                "blob_url": "https://github.com/apache/jackrabbit/blob/dcbf17fe78596f45f50f82f124816766b4ace0c9/jackrabbit-data/src/main/java/org/apache/jackrabbit/core/data/FSBackend.java",
                "filename": "jackrabbit-data/src/main/java/org/apache/jackrabbit/core/data/FSBackend.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-data/src/main/java/org/apache/jackrabbit/core/data/FSBackend.java?ref=dcbf17fe78596f45f50f82f124816766b4ace0c9"
            }
        ],
        "bug_id": "jackrabbit_7",
        "parent": "https://github.com/apache/jackrabbit/commit/3d1c8a6a0611c069839e76cdfc9a63d4d385aaff",
        "message": "JCR-4135: guard against NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1793639 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/cb3925cbb5fc46bee35c04639df52fd317869867",
        "file": [
            {
                "patch": "@@ -16,12 +16,8 @@\n  */\n package org.apache.jackrabbit.core.version;\n \n-import java.util.Arrays;\n-\n-import javax.transaction.xa.Xid;\n-\n-import org.apache.jackrabbit.core.TransactionContext;\n-\n+import static org.apache.jackrabbit.core.TransactionContext.getCurrentThreadId;\n+import static org.apache.jackrabbit.core.TransactionContext.isSameThreadId;\n import EDU.oswego.cs.dl.util.concurrent.ReadWriteLock;\n import EDU.oswego.cs.dl.util.concurrent.ReentrantWriterPreferenceReadWriteLock;\n import EDU.oswego.cs.dl.util.concurrent.Sync;\n@@ -36,30 +32,15 @@\n \n     /**\n      * The internal read-write lock.\n-     * Thread concerning ReentrantWriterPreferenceReadWriteLock\n-     */\n-    private final ReadWriteLock rwLock =\n-        new ReentrantWriterPreferenceReadWriteLock();\n-\n-    /**\n-     * The internal Xid aware read-write lock.\n      */\n-    private final ReadWriteLock xidRwLock = new XidRWLock();\n+    private final ReadWriteLock rwLock = new XAAwareRWLock();\n \n     public ReadLock acquireReadLock() throws InterruptedException {\n-        if (TransactionContext.getCurrentXid() == null) {\n-            return new ReadLock(rwLock.readLock());\n-        } else {\n-            return new ReadLock(xidRwLock.readLock());\n-        }\n+    \treturn new ReadLock(rwLock.readLock());\n     }\n \n     public WriteLock acquireWriteLock() throws InterruptedException {\n-        if (TransactionContext.getCurrentXid() == null) {\n-            return new WriteLock(rwLock);\n-        } else {\n-            return new WriteLock(xidRwLock);\n-        }\n+    \treturn new WriteLock(rwLock);\n     }\n \n     public static class WriteLock {\n@@ -100,64 +81,51 @@ public void release() {\n     }\n \n     /**\n-     * Xid concerning ReentrantWriterPreferenceReadWriteLock\n+     * XA concerning ReentrantWriterPreferenceReadWriteLock\n      */\n-    private static final class XidRWLock\n+    private static final class XAAwareRWLock\n             extends ReentrantWriterPreferenceReadWriteLock {\n \n-        private Xid activeXid;\n+    \tprivate Object activeWriter;\n \n         /**\n-         * Check if the given Xid comes from the same globalTX\n-         * @param otherXid\n-         * @return true if same globalTX otherwise false\n-         */\n-        boolean isSameGlobalTx(Xid otherXid) {\n-            return (activeXid == otherXid) || Arrays.equals(activeXid.getGlobalTransactionId(), otherXid.getGlobalTransactionId());\n-        }\n-\n-        /**\n-         * Allow reader when there is no active Xid, or current Xid owns\n-         * the write lock (reentrant).\n+         * {@inheritDoc}\n          */\n-        @Override\n         protected boolean allowReader() {\n-            Xid currentXid = TransactionContext.getCurrentXid();\n-            return (activeXid == null && waitingWriters_ == 0) || isSameGlobalTx(currentXid);\n+            Object currentId = getCurrentThreadId();\n+            return (activeWriter == null && waitingWriters_ == 0) || isSameThreadId(activeWriter, currentId);\n         }\n \n         /**\n          * {@inheritDoc}\n          */\n-        @Override\n         protected synchronized boolean startWrite() {\n-            Xid currentXid = TransactionContext.getCurrentXid();\n-            if (activeXid != null && isSameGlobalTx(currentXid)) { // already held; re-acquire\n-                ++writeHolds_;\n+        \tObject currentId = getCurrentThreadId();\n+            if (activeWriter != null && isSameThreadId(activeWriter, currentId)) { // already held; re-acquire\n+            \t++writeHolds_;\n                 return true;\n             } else if (writeHolds_ == 0) {\n-                if (activeReaders_ == 0 || (readers_.size() == 1 && readers_.get(currentXid) != null)) {\n-                    activeXid = currentXid;\n-                    writeHolds_ = 1;\n-                    return true;\n-                } else {\n-                    return false;\n-                }\n+            \tif (activeReaders_ == 0 || (readers_.size() == 1 && readers_.get(currentId) != null)) {\n+            \t\tactiveWriter = currentId;\n+            \t\twriteHolds_ = 1;\n+            \t\treturn true;\n+            \t} else {\n+            \t\treturn false;\n+            \t}\n             } else {\n-                return false;\n+            \treturn false;\n             }\n         }\n \n         /**\n          * {@inheritDoc}\n          */\n-        @Override\n         protected synchronized Signaller endWrite() {\n             --writeHolds_;\n             if (writeHolds_ > 0) {  // still being held\n-                return null;\n+            \treturn null;\n             } else {\n-                activeXid = null;\n+            \tactiveWriter = null;\n                 if (waitingReaders_ > 0 && allowReader()) {\n                     return readerLock_;\n                 } else if (waitingWriters_ > 0) {\n@@ -171,54 +139,50 @@ protected synchronized Signaller endWrite() {\n         /**\n          * {@inheritDoc}\n          */\n-        @Override\n-        @SuppressWarnings(\"unchecked\")\n-        protected synchronized boolean startRead() {\n-            Xid currentXid = TransactionContext.getCurrentXid();\n-            Object c = readers_.get(currentXid);\n-            if (c != null) { // already held -- just increment hold count\n-                readers_.put(currentXid, (Integer) (c) + 1);\n-                ++activeReaders_;\n-                return true;\n-            } else if (allowReader()) {\n-                readers_.put(currentXid, IONE);\n-                ++activeReaders_;\n-                return true;\n-            } else {\n-                return false;\n-            }\n-        }\n+    \t@SuppressWarnings(\"unchecked\")\n+    \tprotected synchronized boolean startRead() {\n+    \t\tObject currentId = getCurrentThreadId();\n+    \t    Object c = readers_.get(currentId);\n+    \t    if (c != null) { // already held -- just increment hold count\n+    \t    \treaders_.put(currentId, new Integer(((Integer)(c)).intValue()+1));\n+    \t    \t++activeReaders_;\n+    \t    \treturn true;\n+    \t    } else if (allowReader()) {\n+    \t    \treaders_.put(currentId, IONE);\n+    \t    \t++activeReaders_;\n+    \t    \treturn true;\n+    \t    } else {\n+    \t    \treturn false;\n+    \t    }\n+    \t}\n \n         /**\n          * {@inheritDoc}\n          */\n-        @Override\n-        @SuppressWarnings(\"unchecked\")\n-        protected synchronized Signaller endRead() {\n-            Xid currentXid = TransactionContext.getCurrentXid();\n-            Object c = readers_.get(currentXid);\n-            if (c == null) {\n-                throw new IllegalStateException();\n-            }\n-            --activeReaders_;\n-            if (c != IONE) { // more than one hold; decrement count\n-                int h = (Integer) (c) -1;\n-                Integer ih = (h == 1)? IONE : new Integer(h);\n-                readers_.put(currentXid, ih);\n-                return null;\n-            } else {\n-                readers_.remove(currentXid);\n-\n-                if (writeHolds_ > 0) { // a write lock is still held\n-                    return null;\n-                } else if (activeReaders_ == 0 && waitingWriters_ > 0) {\n-                    return writerLock_;\n-                } else  {\n-                    return null;\n-                }\n-            }\n-        }\n-\n+    \t@SuppressWarnings(\"unchecked\")\n+    \tprotected synchronized Signaller endRead() {\n+    \t\tObject currentId = getCurrentThreadId();\n+    \t    Object c = readers_.get(currentId);\n+    \t    if (c == null) {\n+    \t    \tthrow new IllegalStateException();\n+    \t    }\n+    \t    --activeReaders_;\n+    \t    if (c != IONE) { // more than one hold; decrement count\n+    \t    \tint h = ((Integer)(c)).intValue()-1;\n+    \t    \tInteger ih = (h == 1)? IONE : new Integer(h);\n+    \t    \treaders_.put(currentId, ih);\n+    \t    \treturn null;\n+    \t    } else {\n+    \t    \treaders_.remove(currentId);\n+    \t    \n+    \t    \tif (writeHolds_ > 0) { // a write lock is still held\n+    \t    \t\treturn null;\n+    \t    \t} else if (activeReaders_ == 0 && waitingWriters_ > 0) {\n+    \t    \t\treturn writerLock_;\n+    \t    \t} else  {\n+    \t    \t\treturn null;\n+    \t    \t}\n+    \t    }\n+    \t}\n     }\n-\n }\n\\ No newline at end of file",
                "additions": 65,
                "raw_url": "https://github.com/apache/jackrabbit/raw/cb3925cbb5fc46bee35c04639df52fd317869867/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersioningLock.java",
                "status": "modified",
                "changes": 166,
                "deletions": 101,
                "sha": "5c4060bb5f82ab32608e47d86f48e8a009551f4e",
                "blob_url": "https://github.com/apache/jackrabbit/blob/cb3925cbb5fc46bee35c04639df52fd317869867/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersioningLock.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersioningLock.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersioningLock.java?ref=cb3925cbb5fc46bee35c04639df52fd317869867"
            }
        ],
        "bug_id": "jackrabbit_8",
        "parent": "https://github.com/apache/jackrabbit/commit/cc6cb2e684fa83acafc2fbef76819d26e3087d0a",
        "message": "JCR-3379 XA concurrent transactions - NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1360013 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/22e5a5f8d58864cca7a2ddae0f432d4a920c3aac",
        "file": [
            {
                "patch": "@@ -207,7 +207,12 @@ public Path getPath() throws RepositoryException {\n      * @throws RepositoryException\n      */\n     public NodeState getParent() throws ItemNotFoundException, RepositoryException {\n-        return getHierarchyEntry().getParent().getNodeState();\n+        // safeguard against root node's null parent\n+        NodeEntry parent = getHierarchyEntry().getParent();\n+        if (parent != null) {\n+            return getHierarchyEntry().getParent().getNodeState();\n+        }\n+        return null;\n     }\n \n     /**",
                "additions": 6,
                "raw_url": "https://github.com/apache/jackrabbit/raw/22e5a5f8d58864cca7a2ddae0f432d4a920c3aac/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/state/ItemState.java",
                "status": "modified",
                "changes": 7,
                "deletions": 1,
                "sha": "6eb635b5ae67b1780361946d17ecf98e84a7e633",
                "blob_url": "https://github.com/apache/jackrabbit/blob/22e5a5f8d58864cca7a2ddae0f432d4a920c3aac/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/state/ItemState.java",
                "filename": "jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/state/ItemState.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/state/ItemState.java?ref=22e5a5f8d58864cca7a2ddae0f432d4a920c3aac"
            }
        ],
        "bug_id": "jackrabbit_9",
        "parent": "https://github.com/apache/jackrabbit/commit/565ed3b0485143ec91f96f29cb5f25d73f5f9682",
        "message": "JCR-3050 NullPointerException on removing a node acquired from search result\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1240198 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/e7094b41c645a957a2dc2057584d7f11b6243b70",
        "file": [
            {
                "patch": "@@ -1,3 +1,19 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package org.apache.jackrabbit.core;\n \n import java.util.ConcurrentModificationException;",
                "additions": 16,
                "raw_url": "https://github.com/apache/jackrabbit/raw/e7094b41c645a957a2dc2057584d7f11b6243b70/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/NPEandCMETest.java",
                "status": "modified",
                "changes": 16,
                "deletions": 0,
                "sha": "2a404ab4a6a86078e07c7e8811e4cc5bb3b20178",
                "blob_url": "https://github.com/apache/jackrabbit/blob/e7094b41c645a957a2dc2057584d7f11b6243b70/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/NPEandCMETest.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/NPEandCMETest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/NPEandCMETest.java?ref=e7094b41c645a957a2dc2057584d7f11b6243b70"
            }
        ],
        "bug_id": "jackrabbit_10",
        "parent": "https://github.com/apache/jackrabbit/commit/46fc0c5d78527b840955c2a432278979198d2342",
        "message": "JCR-3063: NullPointerException in ItemManager\n\nAdd missing license header\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1174887 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/46fc0c5d78527b840955c2a432278979198d2342",
        "file": [
            {
                "patch": "@@ -771,14 +771,13 @@ public void end() throws ItemStateException {\n \n             ISMLocking.ReadLock readLock = null;\n             try {\n+                // Let the shared item listeners know about the change\n+                shared.persisted();\n+\n                 // downgrade to read lock\n                 readLock = writeLock.downgrade();\n                 writeLock = null;\n \n-                // Let the shared item listeners know about the change\n-                // JCR-2171: This must happen after downgrading the lock!\n-                shared.persisted();\n-\n                 /* notify virtual providers about node references */\n                 for (int i = 0; i < virtualNodeReferences.length; i++) {\n                     ChangeLog virtualRefs = virtualNodeReferences[i];",
                "additions": 3,
                "raw_url": "https://github.com/apache/jackrabbit/raw/46fc0c5d78527b840955c2a432278979198d2342/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
                "status": "modified",
                "changes": 7,
                "deletions": 4,
                "sha": "5d966ebd19a23fde1dbd8e955a3dd6cc980e7dbe",
                "blob_url": "https://github.com/apache/jackrabbit/blob/46fc0c5d78527b840955c2a432278979198d2342/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java?ref=46fc0c5d78527b840955c2a432278979198d2342"
            },
            {
                "patch": "@@ -0,0 +1,131 @@\n+package org.apache.jackrabbit.core;\n+\n+import java.util.ConcurrentModificationException;\n+\n+import javax.jcr.InvalidItemStateException;\n+import javax.jcr.ItemNotFoundException;\n+import javax.jcr.Node;\n+import javax.jcr.NodeIterator;\n+import javax.jcr.RepositoryException;\n+import javax.jcr.Session;\n+\n+import org.apache.jackrabbit.core.state.NoSuchItemStateException;\n+import org.apache.jackrabbit.test.AbstractJCRTest;\n+\n+public class NPEandCMETest extends AbstractJCRTest {\n+\n+    private final static int NUM_THREADS = 10;\n+    private final static boolean SHOW_STACKTRACE = true;\n+    \n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        Session session = getHelper().getSuperuserSession();\n+        session.getRootNode().addNode(\"test\");\n+        session.save();\n+    }\n+    \n+    protected void tearDown() throws Exception {\n+        try {\n+            Session session = getHelper().getSuperuserSession();\n+            if (session.getRootNode().hasNode(\"test\")) {\n+                session.getRootNode().getNode(\"test\").remove();\n+                session.save();\n+            }\n+        } finally {\n+            super.tearDown();\n+        }\n+    }\n+    \n+    public void testDo() throws Exception {\n+        Thread[] threads = new Thread[NUM_THREADS];\n+        TestTask[] tasks = new TestTask[NUM_THREADS];\n+        for (int i = 0; i < NUM_THREADS; i++) {\n+            Session session = getHelper().getSuperuserSession();\n+            tasks[i] = new TestTask(i, session);\n+        }\n+        for (int i = 0; i < NUM_THREADS; i++) {\n+            threads[i] = new Thread(tasks[i]);\n+            threads[i].start();\n+        }\n+        for (int i = 0; i < NUM_THREADS; i++) {\n+            threads[i].join();\n+        }\n+        int npes = 0, cmes = 0;\n+        for(int i = 0; i < NUM_THREADS; i++) {\n+            npes += tasks[i].npes;\n+            cmes += tasks[i].cmes;\n+        }\n+        System.err.println(\"Total NPEs: \" + npes);\n+        System.err.println(\"Total CMEs: \" + cmes);\n+    }\n+    \n+    private static class TestTask implements Runnable {\n+\n+        private final Session session;\n+        private final int id;\n+        private final Node test;\n+        \n+        private int npes = 0;\n+        private int cmes = 0;\n+        \n+        private TestTask(int id, Session session) throws RepositoryException {\n+            this.id = id;\n+            this.session = session;\n+            test = this.session.getRootNode().getNode(\"test\");\n+        }\n+        \n+        public void run() {\n+            try {\n+                for (int i = 0; i < 500; i++) {\n+                    NodeIterator nodes = test.getNodes();\n+                    if (nodes.getSize() > 100) {\n+                        long count = nodes.getSize() - 100;\n+                        while (nodes.hasNext() && count-- > 0) {\n+                            Node node = nodes.nextNode();\n+                            if (node != null) {\n+                                try {\n+                                    node.remove();\n+                                }\n+                                catch (ItemNotFoundException e) {\n+                                    // item was already removed\n+                                }\n+                                catch (InvalidItemStateException e) {\n+                                    // ignorable\n+                                }\n+                            }\n+                        }\n+                        session.save();\n+                    }\n+                    test.addNode(\"test-\" + id + \"-\" + i);\n+                    session.save();\n+                }\n+                \n+            }\n+            catch (InvalidItemStateException e) {\n+                // ignorable\n+            }\n+            catch (RepositoryException e) {\n+                if (e.getCause() == null || !(e.getCause() instanceof NoSuchItemStateException)) {\n+                    System.err.println(\"thread\" + id + \":\" + e);\n+                    e.printStackTrace();\n+                }\n+                // else ignorable\n+            }\n+            catch (NullPointerException e) {\n+                System.err.println(\"====> \" + e);\n+                if (SHOW_STACKTRACE) {\n+                    e.printStackTrace();\n+                }\n+                npes++;\n+            }\n+            catch (ConcurrentModificationException e) {\n+                System.err.println(\"====> \" + e);\n+                if (SHOW_STACKTRACE) {\n+                    e.printStackTrace();\n+                }\n+                cmes++;\n+            }\n+        }\n+        \n+    }\n+}",
                "additions": 131,
                "raw_url": "https://github.com/apache/jackrabbit/raw/46fc0c5d78527b840955c2a432278979198d2342/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/NPEandCMETest.java",
                "status": "added",
                "changes": 131,
                "deletions": 0,
                "sha": "b97fdc26f576329b413a32de6bacb18789f1de0b",
                "blob_url": "https://github.com/apache/jackrabbit/blob/46fc0c5d78527b840955c2a432278979198d2342/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/NPEandCMETest.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/NPEandCMETest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/NPEandCMETest.java?ref=46fc0c5d78527b840955c2a432278979198d2342"
            },
            {
                "patch": "@@ -80,6 +80,8 @@ public static Test suite() {\n \n         suite.addTestSuite(OverlappingNodeAddTest.class);\n \n+        suite.addTestSuite(NPEandCMETest.class);\n+\n         return suite;\n     }\n }",
                "additions": 2,
                "raw_url": "https://github.com/apache/jackrabbit/raw/46fc0c5d78527b840955c2a432278979198d2342/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/TestAll.java",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "94e6e3205e124f4f3ce3891d57f763ee31f04677",
                "blob_url": "https://github.com/apache/jackrabbit/blob/46fc0c5d78527b840955c2a432278979198d2342/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/TestAll.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/TestAll.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/TestAll.java?ref=46fc0c5d78527b840955c2a432278979198d2342"
            }
        ],
        "bug_id": "jackrabbit_11",
        "parent": "https://github.com/apache/jackrabbit/commit/522cafdb29f9c848042c9d27202eff1c9682adf4",
        "message": "JCR-3063 NullPointerException in ItemManager\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1174822 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/e6560c8336190d62dd64b0b0798fd1f256261fc6",
        "file": [
            {
                "patch": "@@ -950,7 +950,7 @@ public Object next() {\n                 try {\n                     nodeStates = new Iterator() {\n \n-                        private NodeState next =\n+                        private NodeState next = context.getParentId() == null ? null :\n                                 (NodeState) ism.getItemState(context.getParentId());\n \n                         public void remove() {",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/e6560c8336190d62dd64b0b0798fd1f256261fc6/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/IndexingConfigurationImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "281bdd722f7014d50877ed36a40dac85d981c773",
                "blob_url": "https://github.com/apache/jackrabbit/blob/e6560c8336190d62dd64b0b0798fd1f256261fc6/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/IndexingConfigurationImpl.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/IndexingConfigurationImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/IndexingConfigurationImpl.java?ref=e6560c8336190d62dd64b0b0798fd1f256261fc6"
            },
            {
                "patch": "@@ -37,6 +37,11 @@\n         <property>text</property>\n     </index-rule>\n \n+    <index-rule nodeType=\"nt:unstructured\"\n+                condition=\"ancestor::*/@rule = 'ancestor-axis'\">\n+      <property>Text</property>\n+    </index-rule>\n+\n     <index-rule nodeType=\"nt:hierarchyNode\">\n         <!-- do not index any properties -->\n     </index-rule>",
                "additions": 5,
                "raw_url": "https://github.com/apache/jackrabbit/raw/e6560c8336190d62dd64b0b0798fd1f256261fc6/jackrabbit-core/src/test/repository/workspaces/indexing-test/indexing-configuration.xml",
                "status": "modified",
                "changes": 5,
                "deletions": 0,
                "sha": "dc0bf1d67c887108b4608df333cd390153f14b07",
                "blob_url": "https://github.com/apache/jackrabbit/blob/e6560c8336190d62dd64b0b0798fd1f256261fc6/jackrabbit-core/src/test/repository/workspaces/indexing-test/indexing-configuration.xml",
                "filename": "jackrabbit-core/src/test/repository/workspaces/indexing-test/indexing-configuration.xml",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/repository/workspaces/indexing-test/indexing-configuration.xml?ref=e6560c8336190d62dd64b0b0798fd1f256261fc6"
            }
        ],
        "bug_id": "jackrabbit_12",
        "parent": "https://github.com/apache/jackrabbit/commit/668d8073ec9ebe8fb472c82980aadb18dfce93f6",
        "message": "JCR-2580: NullPointerException when using ancestor axis in indexing configuration\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@926354 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/b2403100dd18fce848e05c988369faed551bcb2a",
        "file": [
            {
                "patch": "@@ -17,7 +17,6 @@\n package org.apache.jackrabbit.core.value;\n \n import java.io.InputStream;\n-import java.util.concurrent.atomic.AtomicInteger;\n \n import javax.jcr.RepositoryException;\n \n@@ -48,7 +47,7 @@\n     /**\n      * The current ref count. Initially set to one.\n      */\n-    private final AtomicInteger refCount = new AtomicInteger(1);\n+    private int refCount = 1;\n \n     /**\n      * Whether this instance has been discarded and cannot be used anymore.\n@@ -70,9 +69,9 @@ public RefCountingBLOBFileValue(BLOBFileValue value) {\n     /**\n      * Discards the underyling value if the reference count drops to zero.\n      */\n-    public void dispose() {\n-        if (refCount.get() > 0) {\n-            if (refCount.decrementAndGet() == 0) {\n+    public synchronized void dispose() {\n+        if (refCount > 0) {\n+            if (--refCount == 0) {\n                 log.debug(\"{}@refCount={}, discarding value...\",\n                         System.identityHashCode(this), refCount);\n                 value.dispose();\n@@ -101,12 +100,12 @@ void delete(boolean pruneEmptyParentDirs) {\n      * @throws RepositoryException if an error occurs while creating the copy or\n      *                             if this value has been disposed already.\n      */\n-    BLOBFileValue copy() throws RepositoryException {\n-        if (refCount.get() <= 0) {\n+    synchronized BLOBFileValue copy() throws RepositoryException {\n+        if (refCount <= 0) {\n             throw new RepositoryException(\"this BLOBFileValue has been disposed\");\n         }\n         BLOBFileValue bin = new RefCountBinary();\n-        refCount.incrementAndGet();\n+        refCount++;\n         log.debug(\"{}@refCount={}\", System.identityHashCode(this), refCount);\n         return bin;\n     }",
                "additions": 7,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b2403100dd18fce848e05c988369faed551bcb2a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/RefCountingBLOBFileValue.java",
                "status": "modified",
                "changes": 15,
                "deletions": 8,
                "sha": "88e2a86802a3a458e1cbcadd4ce27b1bea565d65",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b2403100dd18fce848e05c988369faed551bcb2a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/RefCountingBLOBFileValue.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/RefCountingBLOBFileValue.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/RefCountingBLOBFileValue.java?ref=b2403100dd18fce848e05c988369faed551bcb2a"
            }
        ],
        "bug_id": "jackrabbit_13",
        "parent": "https://github.com/apache/jackrabbit/commit/484182f9b440a0e97fea0cb5b467890c34abeb95",
        "message": "JCR-2238: Binary throws NullPointerException\n- use synchronized instead of AtomicInteger\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@802690 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/55700358113308bb81a09c0b3cea28df83a59ba9",
        "file": [
            {
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.jackrabbit.core;\n \n import java.io.InputStream;\n+import java.io.IOException;\n import java.math.BigDecimal;\n import java.util.ArrayList;\n import java.util.Calendar;\n@@ -49,6 +50,7 @@\n import org.apache.jackrabbit.spi.commons.name.NameConstants;\n import org.apache.jackrabbit.spi.commons.value.ValueFormat;\n import org.apache.jackrabbit.value.ValueHelper;\n+import org.apache.commons.io.input.AutoCloseInputStream;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -474,7 +476,14 @@ public String getString() throws RepositoryException {\n     }\n \n     public InputStream getStream() throws RepositoryException {\n-        return getValue().getBinary().getStream();\n+        final Binary bin = getValue().getBinary();\n+        // make sure binary is disposed after stream had been consumed\n+        return new AutoCloseInputStream(bin.getStream()) {\n+            public void close() throws IOException {\n+                super.close();\n+                bin.dispose();\n+            }\n+        };\n     }\n \n     public long getLong() throws RepositoryException {",
                "additions": 10,
                "raw_url": "https://github.com/apache/jackrabbit/raw/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/PropertyImpl.java",
                "status": "modified",
                "changes": 11,
                "deletions": 1,
                "sha": "706b2ec9437de4c2ffedeaf9890b143dd30678af",
                "blob_url": "https://github.com/apache/jackrabbit/blob/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/PropertyImpl.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/PropertyImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/PropertyImpl.java?ref=55700358113308bb81a09c0b3cea28df83a59ba9"
            },
            {
                "patch": "@@ -18,8 +18,6 @@\n \n import java.io.IOException;\n import java.io.InputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.UnsupportedEncodingException;\n \n import javax.jcr.RepositoryException;\n import javax.jcr.Binary;\n@@ -38,48 +36,6 @@\n  */\n abstract class BLOBFileValue implements Binary {\n \n-    /**\n-     * Returns a String representation of this value.\n-     *\n-     * @return String representation of this value.\n-     * @throws RepositoryException\n-     */\n-    String getString() throws RepositoryException {\n-        // TODO: review again. currently the getString method of the JCR Value is delegated to the QValue.\n-        InputStream stream = getStream();\n-        try {\n-            ByteArrayOutputStream out = new ByteArrayOutputStream();\n-            byte[] buffer = new byte[8192];\n-            int read;\n-            while ((read = stream.read(buffer)) > 0) {\n-                out.write(buffer, 0, read);\n-            }\n-            byte[] data = out.toByteArray();\n-            return new String(data, \"UTF-8\");\n-        } catch (UnsupportedEncodingException e) {\n-            throw new RepositoryException(\"UTF-8 not supported on this platform\", e);\n-        } catch (IOException e) {\n-            throw new RepositoryException(\"conversion from stream to string failed\", e);\n-        } finally {\n-            try {\n-                if (stream != null) {\n-                    stream.close();\n-                }\n-            } catch (IOException e) {\n-                // ignore\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Frees temporarily allocated resources such as temporary file, buffer, etc.\n-     * If this <code>BLOBFileValue</code> is backed by a persistent resource\n-     * calling this method will have no effect.\n-     *\n-     * @see #delete(boolean)\n-     */\n-    abstract void discard();\n-\n     /**\n      * Deletes the persistent resource backing this <code>BLOBFileValue</code>.\n      *\n@@ -89,12 +45,18 @@ String getString() throws RepositoryException {\n     abstract void delete(boolean pruneEmptyParentDirs);\n \n     /**\n-     * Checks if this object is immutable.\n-     * Immutable objects can not change and can safely copied.\n+     * Returns a copy of this BLOB file value. The returned copy may also be\n+     * this object. However an implementation must guarantee that the returned\n+     * value has state that is independent from this value. Immutable values\n+     * can savely return the same value (this object).\n+     * <p/>\n+     * Specifically, {@link #dispose()} on the returned value must not have an\n+     * effect on this value!\n      *\n-     * @return true if the object is immutable\n+     * @return a value that can be used independently from this value.\n+     * @throws RepositoryException if an error occur while copying this value.\n      */\n-    abstract boolean isImmutable();\n+    abstract BLOBFileValue copy() throws RepositoryException;\n \n     public abstract boolean equals(Object obj);\n \n@@ -112,9 +74,6 @@ DataIdentifier getDataIdentifier() {\n     }\n \n     //-----------------------------------------------------< javax.jcr.Binary >\n-    public abstract long getSize();\n-\n-    public abstract InputStream getStream() throws RepositoryException;\n \n     public int read(byte[] b, long position) throws IOException, RepositoryException {\n         InputStream in = getStream();\n@@ -125,9 +84,4 @@ public int read(byte[] b, long position) throws IOException, RepositoryException\n             in.close();\n         }\n     }\n-\n-    public void dispose() {\n-        discard();\n-    }\n-\n }",
                "additions": 10,
                "raw_url": "https://github.com/apache/jackrabbit/raw/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/BLOBFileValue.java",
                "status": "modified",
                "changes": 66,
                "deletions": 56,
                "sha": "b4e6e28123b943b72e2eec6e92fae850ea074ab9",
                "blob_url": "https://github.com/apache/jackrabbit/blob/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/BLOBFileValue.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/BLOBFileValue.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/BLOBFileValue.java?ref=55700358113308bb81a09c0b3cea28df83a59ba9"
            },
            {
                "patch": "@@ -57,16 +57,16 @@ void delete(boolean pruneEmptyParentDirs) {\n         // do nothing\n     }\n \n-    void discard() {\n+    public void dispose() {\n         // do nothing\n     }\n \n     DataIdentifier getDataIdentifier() {\n         return identifier;\n     }\n \n-    boolean isImmutable() {\n-        return true;\n+    BLOBFileValue copy() throws RepositoryException {\n+        return this;\n     }\n \n     public boolean equals(Object obj) {",
                "additions": 3,
                "raw_url": "https://github.com/apache/jackrabbit/raw/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/BLOBInDataStore.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "afa1123703ba30e8267f9e9572e242691f4e08d9",
                "blob_url": "https://github.com/apache/jackrabbit/blob/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/BLOBInDataStore.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/BLOBInDataStore.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/BLOBInDataStore.java?ref=55700358113308bb81a09c0b3cea28df83a59ba9"
            },
            {
                "patch": "@@ -22,7 +22,6 @@\n import javax.jcr.RepositoryException;\n import java.io.ByteArrayInputStream;\n import java.io.InputStream;\n-import java.io.UnsupportedEncodingException;\n import java.util.Arrays;\n \n /**\n@@ -122,14 +121,14 @@ void delete(boolean pruneEmptyParentDirs) {\n         // the data will be garbage collected\n     }\n \n-    void discard() {\n+    public void dispose() {\n         // do nothing\n         // this object could still be referenced\n         // the data will be garbage collected\n     }\n \n-    boolean isImmutable() {\n-        return true;\n+    BLOBFileValue copy() throws RepositoryException {\n+        return this;\n     }\n \n     public long getSize() {\n@@ -140,14 +139,6 @@ public InputStream getStream() {\n         return new ByteArrayInputStream(data);\n     }\n \n-    String getString() throws RepositoryException {\n-        try {\n-            return new String(data, \"UTF-8\");\n-        } catch (UnsupportedEncodingException e) {\n-            throw new RepositoryException(\"UTF-8 not supported on this platform\", e);\n-        }\n-    }\n-\n     public String toString() {\n         StringBuilder buff = new StringBuilder(PREFIX.length() + 2 * data.length);\n         buff.append(PREFIX);",
                "additions": 3,
                "raw_url": "https://github.com/apache/jackrabbit/raw/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/BLOBInMemory.java",
                "status": "modified",
                "changes": 15,
                "deletions": 12,
                "sha": "77afa162bf61cfae97b5e31429faf0a323045e18",
                "blob_url": "https://github.com/apache/jackrabbit/blob/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/BLOBInMemory.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/BLOBInMemory.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/BLOBInMemory.java?ref=55700358113308bb81a09c0b3cea28df83a59ba9"
            },
            {
                "patch": "@@ -92,13 +92,12 @@ void delete(boolean pruneEmptyParentDirs) {\n \n     }\n \n-    void discard() {\n+    public void dispose() {\n         // this instance is not backed by temporarily allocated resource/buffer\n     }\n \n-    boolean isImmutable() {\n-        // delete will modify the state.\n-        return false;\n+    BLOBFileValue copy() throws RepositoryException {\n+        return BLOBInTempFile.getInstance(getStream(), true);\n     }\n \n     public long getSize() {",
                "additions": 3,
                "raw_url": "https://github.com/apache/jackrabbit/raw/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/BLOBInResource.java",
                "status": "modified",
                "changes": 7,
                "deletions": 4,
                "sha": "bdd167cd0e6462e4b248199c8ba0ca037d39e8ca",
                "blob_url": "https://github.com/apache/jackrabbit/blob/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/BLOBInResource.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/BLOBInResource.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/BLOBInResource.java?ref=55700358113308bb81a09c0b3cea28df83a59ba9"
            },
            {
                "patch": "@@ -92,16 +92,20 @@ private BLOBInTempFile(File file, boolean temp) {\n      * @param in the stream\n      * @param temp\n      */\n-    static BLOBInTempFile getInstance(InputStream in, boolean temp) throws RepositoryException {\n-        return new BLOBInTempFile(in, temp);\n+    static BLOBFileValue getInstance(InputStream in, boolean temp) throws RepositoryException {\n+        if (temp) {\n+            return new RefCountingBLOBFileValue(new BLOBInTempFile(in, temp));\n+        } else {\n+            return new BLOBInTempFile(in, temp);\n+        }\n     }\n \n     /**\n      * Creates a new instance from a file.\n      *\n      * @param file the file\n      */\n-    static BLOBInTempFile getInstance(File file, boolean temp) throws IOException {\n+    static BLOBInTempFile getInstance(File file, boolean temp) {\n         return new BLOBInTempFile(file, temp);\n     }\n \n@@ -111,15 +115,18 @@ void delete(boolean pruneEmptyParentDirs) {\n         file = null;\n     }\n \n-    void discard() {\n+    public void dispose() {\n         if (temp) {\n             delete(true);\n         }\n     }\n \n-    boolean isImmutable() {\n-        // discard and delete can modify the state.\n-        return false;\n+    BLOBFileValue copy() throws RepositoryException {\n+        if (temp) {\n+            return BLOBInTempFile.getInstance(getStream(), temp);\n+        } else {\n+            return BLOBInTempFile.getInstance(file, temp);\n+        }\n     }\n \n     public long getSize() {",
                "additions": 14,
                "raw_url": "https://github.com/apache/jackrabbit/raw/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/BLOBInTempFile.java",
                "status": "modified",
                "changes": 21,
                "deletions": 7,
                "sha": "6ebf2293546f9584a2f593fe6bcf1ffaaffd55bc",
                "blob_url": "https://github.com/apache/jackrabbit/blob/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/BLOBInTempFile.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/BLOBInTempFile.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/BLOBInTempFile.java?ref=55700358113308bb81a09c0b3cea28df83a59ba9"
            },
            {
                "patch": "@@ -49,6 +49,7 @@\n import org.apache.jackrabbit.spi.commons.value.AbstractQValueFactory;\n import org.apache.jackrabbit.spi.commons.value.QValueValue;\n import org.apache.jackrabbit.util.ISO8601;\n+import org.apache.commons.io.IOUtils;\n \n /**\n  * <code>InternalValue</code> represents the internal format of a property value.\n@@ -115,7 +116,6 @@ public static InternalValue create(Value value, NamePathResolver resolver, DataS\n             throws ValueFormatException, RepositoryException {\n         switch (value.getType()) {\n             case PropertyType.BINARY:\n-                InternalValue result;\n                 BLOBFileValue blob = null;\n                 if (value instanceof BinaryValueImpl) {\n                     BinaryValueImpl bin = (BinaryValueImpl) value;\n@@ -131,10 +131,24 @@ public static InternalValue create(Value value, NamePathResolver resolver, DataS\n                     }\n                 }\n                 if (blob == null) {\n-                    blob = getBLOBFileValue(store, value.getBinary().getStream(), true);\n+                    Binary b = value.getBinary();\n+                    boolean dispose = false;\n+                    try {\n+                        if (b instanceof BLOBFileValue) {\n+                            // use as is\n+                            blob = (BLOBFileValue) b;\n+                        } else {\n+                            // create a copy from the stream\n+                            dispose = true;\n+                            blob = getBLOBFileValue(store, b.getStream(), true);\n+                        }\n+                    } finally {\n+                        if (dispose) {\n+                            b.dispose();\n+                        }\n+                    }\n                 }\n-                result = new InternalValue(blob);\n-                return result;\n+                return new InternalValue(blob);\n             case PropertyType.BOOLEAN:\n                 return create(value.getBoolean());\n             case PropertyType.DATE:\n@@ -334,7 +348,7 @@ public static InternalValue create(InputStream value, DataStore store) throws Re\n      * @throws RepositoryException\n      */\n     public static InternalValue create(InputStream value) throws RepositoryException {\n-        return new InternalValue(getBLOBFileValue(null, value, false));\n+        return create(value, null);\n     }\n \n     /**\n@@ -432,21 +446,8 @@ public InternalValue createCopy() throws RepositoryException {\n             // wrapped value is immutable (and therefore this instance as well)\n             return this;\n         }\n-        BLOBFileValue v = (BLOBFileValue) val;\n-        if (v.isImmutable()) {\n-            return this;\n-        }\n-        // return a copy since the wrapped BLOBFileValue instance is mutable\n-        InputStream stream = v.getStream();\n-        try {\n-            return createTemporary(stream);\n-        } finally {\n-            try {\n-                stream.close();\n-            } catch (IOException e) {\n-                // ignore\n-            }\n-        }\n+        // return a copy of the wrapped BLOBFileValue\n+        return new InternalValue(((BLOBFileValue) val).copy());\n     }\n \n     /**\n@@ -639,7 +640,7 @@ public void store(DataStore dataStore) throws RepositoryException {\n      */\n     public long getLength() throws RepositoryException {\n         if (PropertyType.BINARY == type) {\n-            return ((BLOBFileValue) val).getSize();\n+            return ((Binary) val).getSize();\n         } else {\n             return super.getLength();\n         }\n@@ -650,7 +651,14 @@ public long getLength() throws RepositoryException {\n      */\n     public String getString() throws RepositoryException {\n         if (type == PropertyType.BINARY) {\n-            return ((BLOBFileValue) val).getString();\n+            InputStream stream = getStream();\n+            try {\n+                return IOUtils.toString(stream, \"UTF-8\");\n+            } catch (IOException e) {\n+                throw new RepositoryException(\"conversion from stream to string failed\", e);\n+            } finally {\n+                IOUtils.closeQuietly(stream);\n+            }\n         } else if (type == PropertyType.DATE) {\n             return ISO8601.format(((Calendar) val));\n         } else {\n@@ -663,7 +671,7 @@ public String getString() throws RepositoryException {\n      */\n     public InputStream getStream() throws RepositoryException {\n         if (type == PropertyType.BINARY) {\n-            return ((BLOBFileValue) val).getStream();\n+            return ((Binary) val).getStream();\n         } else {\n             try {\n                 // convert via string\n@@ -679,7 +687,9 @@ public InputStream getStream() throws RepositoryException {\n      */\n     public Binary getBinary() throws RepositoryException {\n         if (type == PropertyType.BINARY) {\n-            return (BLOBFileValue) val;\n+            // return an independent copy that can be disposed without\n+            // affecting this value\n+            return ((BLOBFileValue) val).copy();\n         } else {\n             try {\n                 // convert via string\n@@ -697,7 +707,7 @@ public Binary getBinary() throws RepositoryException {\n     public void discard() {\n         if (type == PropertyType.BINARY) {\n             BLOBFileValue bfv = (BLOBFileValue) val;\n-            bfv.discard();\n+            bfv.dispose();\n         } else {\n             super.discard();\n         }",
                "additions": 35,
                "raw_url": "https://github.com/apache/jackrabbit/raw/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/InternalValue.java",
                "status": "modified",
                "changes": 60,
                "deletions": 25,
                "sha": "9f3b59c334fadaa35918089397c083d1bcaf5764",
                "blob_url": "https://github.com/apache/jackrabbit/blob/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/InternalValue.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/InternalValue.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/InternalValue.java?ref=55700358113308bb81a09c0b3cea28df83a59ba9"
            },
            {
                "patch": "@@ -150,7 +150,11 @@ public QValue create(byte[] value) throws RepositoryException {\n     }\n \n     public QValue create(InputStream value) throws RepositoryException, IOException {\n-        return InternalValue.create(value, store);\n+        if (store == null) {\n+            return InternalValue.createTemporary(value);\n+        } else {\n+            return InternalValue.create(value, store);\n+        }\n     }\n \n     public QValue create(File value) throws RepositoryException, IOException {",
                "additions": 5,
                "raw_url": "https://github.com/apache/jackrabbit/raw/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/InternalValueFactory.java",
                "status": "modified",
                "changes": 6,
                "deletions": 1,
                "sha": "8d8fc4ab775b668e291974476cf313c80f83dac8",
                "blob_url": "https://github.com/apache/jackrabbit/blob/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/InternalValueFactory.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/InternalValueFactory.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/InternalValueFactory.java?ref=55700358113308bb81a09c0b3cea28df83a59ba9"
            },
            {
                "patch": "@@ -0,0 +1,210 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.core.value;\n+\n+import java.io.InputStream;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.jcr.RepositoryException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * <code>RefCountingBLOBFileValue</code> implements a reference counting BLOB\n+ * file value on top of an existing {@link BLOBFileValue}. Whenever a\n+ * {@link #copy()} is created from this BLOB file value, a new light weight\n+ * {@link RefCountBinary} is created and the reference count {@link #refCount}\n+ * is incremented. The underlying value is discarded once this\n+ * {@link RefCountingBLOBFileValue} and all its light weight\n+ * {@link RefCountBinary} intances have been discarded.\n+ */\n+public class RefCountingBLOBFileValue extends BLOBFileValue {\n+\n+    /**\n+     * The logger instance for this class.\n+     */\n+    private static final Logger log = LoggerFactory.getLogger(RefCountingBLOBFileValue.class);\n+\n+    /**\n+     * The actual value.\n+     */\n+    private final BLOBFileValue value;\n+\n+    /**\n+     * The current ref count. Initially set to one.\n+     */\n+    private final AtomicInteger refCount = new AtomicInteger(1);\n+\n+    /**\n+     * Whether this instance has been discarded and cannot be used anymore.\n+     */\n+    private boolean disposed = false;\n+\n+    /**\n+     * Creates a new reference counting blob file value based on the given\n+     * <code>value</code>.\n+     *\n+     * @param value the underlying value.\n+     */\n+    public RefCountingBLOBFileValue(BLOBFileValue value) {\n+        this.value = value;\n+    }\n+\n+    //----------------------------< BLOBFileValue >-----------------------------\n+\n+    /**\n+     * Discards the underyling value if the reference count drops to zero.\n+     */\n+    public void dispose() {\n+        if (refCount.get() > 0) {\n+            if (refCount.decrementAndGet() == 0) {\n+                log.debug(\"{}@refCount={}, discarding value...\",\n+                        System.identityHashCode(this), refCount);\n+                value.dispose();\n+                disposed = true;\n+            } else {\n+                log.debug(\"{}@refCount={}\",\n+                        System.identityHashCode(this), refCount);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Forwards the call to the underlying value.\n+     *\n+     * @param pruneEmptyParentDirs if <code>true</code>, empty parent\n+     *                             directories will automatically be deleted\n+     */\n+    void delete(boolean pruneEmptyParentDirs) {\n+        value.delete(pruneEmptyParentDirs);\n+    }\n+\n+    /**\n+     * Returns a light weight copy of this BLOB file value.\n+     *\n+     * @return a copy of this value.\n+     * @throws RepositoryException if an error occurs while creating the copy or\n+     *                             if this value has been disposed already.\n+     */\n+    BLOBFileValue copy() throws RepositoryException {\n+        if (refCount.get() <= 0) {\n+            throw new RepositoryException(\"this BLOBFileValue has been disposed\");\n+        }\n+        BLOBFileValue bin = new RefCountBinary();\n+        refCount.incrementAndGet();\n+        log.debug(\"{}@refCount={}\", System.identityHashCode(this), refCount);\n+        return bin;\n+    }\n+\n+    public boolean equals(Object obj) {\n+        if (obj instanceof RefCountingBLOBFileValue) {\n+            RefCountingBLOBFileValue val = (RefCountingBLOBFileValue) obj;\n+            return value.equals(val.value);\n+        }\n+        return false;\n+    }\n+\n+    public String toString() {\n+        return value.toString();\n+    }\n+\n+    public int hashCode() {\n+        return 0;\n+    }\n+\n+    //-----------------------------------------------------< javax.jcr.Binary >\n+\n+    public long getSize() throws RepositoryException {\n+        return value.getSize();\n+    }\n+\n+    public InputStream getStream() throws RepositoryException {\n+        return value.getStream();\n+    }\n+\n+    protected void finalize() throws Throwable {\n+        if (!disposed) {\n+            dispose();\n+        }\n+        super.finalize();\n+    }\n+\n+    //------------------------< RefCountBinary >--------------------------------\n+\n+    private final class RefCountBinary extends BLOBFileValue {\n+\n+        private boolean disposed;\n+\n+        public InputStream getStream() throws RepositoryException {\n+            checkDisposed();\n+            return getInternalValue().getStream();\n+        }\n+\n+        public long getSize() throws RepositoryException {\n+            checkDisposed();\n+            return getInternalValue().getSize();\n+        }\n+\n+        public void dispose() {\n+            if (!disposed) {\n+                disposed = true;\n+                getInternalValue().dispose();\n+            }\n+        }\n+\n+        void delete(boolean pruneEmptyParentDirs) {\n+            getInternalValue().delete(pruneEmptyParentDirs);\n+        }\n+\n+        BLOBFileValue copy() throws RepositoryException {\n+            checkDisposed();\n+            return getInternalValue().copy();\n+        }\n+\n+        public boolean equals(Object obj) {\n+            if (obj instanceof RefCountBinary) {\n+                RefCountBinary other = (RefCountBinary) obj;\n+                return getInternalValue().equals(other.getInternalValue());\n+            }\n+            return false;\n+        }\n+\n+        public String toString() {\n+            return getInternalValue().toString();\n+        }\n+\n+        public int hashCode() {\n+            return 0;\n+        }\n+\n+        protected void finalize() throws Throwable {\n+            dispose();\n+            super.finalize();\n+        }\n+\n+        private BLOBFileValue getInternalValue() {\n+            return RefCountingBLOBFileValue.this;\n+        }\n+\n+        private void checkDisposed() throws RepositoryException {\n+            if (disposed) {\n+                throw new RepositoryException(\"this BLOBFileValue is disposed\");\n+            }\n+        }\n+    }\n+}",
                "additions": 210,
                "raw_url": "https://github.com/apache/jackrabbit/raw/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/RefCountingBLOBFileValue.java",
                "status": "added",
                "changes": 210,
                "deletions": 0,
                "sha": "5256ca542a7b3b1f4b6cb6e3651ecbd461dca738",
                "blob_url": "https://github.com/apache/jackrabbit/blob/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/RefCountingBLOBFileValue.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/RefCountingBLOBFileValue.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/RefCountingBLOBFileValue.java?ref=55700358113308bb81a09c0b3cea28df83a59ba9"
            },
            {
                "patch": "@@ -21,6 +21,7 @@\n import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;\n import org.apache.jackrabbit.spi.commons.value.ValueFactoryQImpl;\n import org.apache.jackrabbit.spi.QValue;\n+import org.apache.jackrabbit.value.BinaryImpl;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -59,7 +60,7 @@ public ValueFactoryImpl(NamePathResolver resolver, DataStore store) {\n     public Value createValue(QValue qvalue) {\n         if (qvalue instanceof InternalValue && PropertyType.BINARY == qvalue.getType()) {\n             try {\n-                return new BinaryValueImpl(((InternalValue) qvalue).getBLOBFileValue());\n+                return new BinaryValueImpl(((InternalValue) qvalue).getBLOBFileValue().copy());\n             } catch (RepositoryException e) {\n                 // should not get here\n                 log.error(e.getMessage(), e);\n@@ -68,6 +69,19 @@ public Value createValue(QValue qvalue) {\n         return super.createValue(qvalue);\n     }\n \n+    public Binary createBinary(InputStream stream) throws RepositoryException {\n+        try {\n+            QValue value = getQValueFactory().create(stream);\n+            if (value instanceof InternalValue) {\n+                return ((InternalValue) value).getBLOBFileValue();\n+            } else {\n+                return new BinaryImpl(stream);\n+            }\n+        } catch (IOException e) {\n+            throw new RepositoryException(e);\n+        }\n+    }\n+\n     public Value createValue(Binary binary) {\n         try {\n             if (binary instanceof BLOBInDataStore) {\n@@ -77,6 +91,8 @@ public Value createValue(Binary binary) {\n                     // if the value is already in this data store\n                     return new BinaryValueImpl(value.getBLOBFileValue());\n                 }\n+            } else if (binary instanceof BLOBFileValue) {\n+                return new BinaryValueImpl(((BLOBFileValue) binary).copy());\n             }\n             return createValue(binary.getStream());\n         } catch (RepositoryException e) {",
                "additions": 17,
                "raw_url": "https://github.com/apache/jackrabbit/raw/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/ValueFactoryImpl.java",
                "status": "modified",
                "changes": 18,
                "deletions": 1,
                "sha": "917b25c987412a2821abdc720376f2e3bb51a571",
                "blob_url": "https://github.com/apache/jackrabbit/blob/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/ValueFactoryImpl.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/ValueFactoryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/value/ValueFactoryImpl.java?ref=55700358113308bb81a09c0b3cea28df83a59ba9"
            },
            {
                "patch": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.core.value;\n+\n+import java.io.ByteArrayInputStream;\n+import java.util.Random;\n+\n+import javax.jcr.RepositoryException;\n+import javax.jcr.Property;\n+import javax.jcr.Binary;\n+import javax.jcr.Node;\n+\n+import org.apache.jackrabbit.test.AbstractJCRTest;\n+\n+/**\n+ * <code>BinaryValueTest</code> check if multiple executions of:\n+ * <ul>\n+ * <li>get Binary from property</li>\n+ * <li>read from Binary</li>\n+ * <li>dispose Binary</li>\n+ * </ul>\n+ * do not throw an exception.\n+ * <p/>\n+ * See also JCR-2238.\n+ */\n+public class BinaryValueTest extends AbstractJCRTest {\n+\n+    public void testDispose10() throws Exception {\n+        checkDispose(10, false);\n+    }\n+\n+    public void testDispose10k() throws Exception {\n+        checkDispose(10 * 1024, false);\n+    }\n+\n+    public void testDispose10Save() throws Exception {\n+        checkDispose(10, true);\n+    }\n+\n+    public void testDispose10kSave() throws Exception {\n+        checkDispose(10 * 1024, true);\n+    }\n+\n+    protected void checkDispose(int length, boolean save) throws Exception {\n+        Property prop = setProperty(testRootNode.addNode(nodeName1), length);\n+        if (save) {\n+            superuser.save();\n+        }\n+        checkProperty(prop);\n+    }\n+\n+    protected Property setProperty(Node node, int length) throws RepositoryException {\n+        Random rand = new Random();\n+        byte[] data = new byte[length];\n+        rand.nextBytes(data);\n+\n+        Binary b = vf.createBinary(new ByteArrayInputStream(data));\n+        //System.out.println(b.getClass() + \": \" + System.identityHashCode(b));\n+        try {\n+            return node.setProperty(propertyName1, b);\n+        } finally {\n+            b.dispose();\n+        }\n+    }\n+\n+    protected void checkProperty(Property prop) throws Exception {\n+        for (int i = 0; i < 3; i++) {\n+            Binary b = prop.getBinary();\n+            try {\n+                //System.out.println(b.getClass() + \": \" + System.identityHashCode(b));\n+                b.read(new byte[1], 0);\n+            } finally {\n+                b.dispose();\n+            }\n+        }\n+    }\n+}",
                "additions": 91,
                "raw_url": "https://github.com/apache/jackrabbit/raw/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/value/BinaryValueTest.java",
                "status": "added",
                "changes": 91,
                "deletions": 0,
                "sha": "9e0edd0f0cf445845b133ca4ec531800712ffcfb",
                "blob_url": "https://github.com/apache/jackrabbit/blob/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/value/BinaryValueTest.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/value/BinaryValueTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/value/BinaryValueTest.java?ref=55700358113308bb81a09c0b3cea28df83a59ba9"
            },
            {
                "patch": "@@ -32,6 +32,7 @@\n     public static Test suite() {\n         TestSuite suite = new TestSuite(\"org.apache.jackrabbit.core.value tests\");\n \n+        suite.addTestSuite(BinaryValueTest.class);\n         suite.addTestSuite(InternalValueFactoryTest.class);\n         suite.addTestSuite(InternalValueTest.class);\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/value/TestAll.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "9908963eb984b225eeb9b4e1983a87e60ae7c517",
                "blob_url": "https://github.com/apache/jackrabbit/blob/55700358113308bb81a09c0b3cea28df83a59ba9/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/value/TestAll.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/value/TestAll.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/value/TestAll.java?ref=55700358113308bb81a09c0b3cea28df83a59ba9"
            }
        ],
        "bug_id": "jackrabbit_14",
        "parent": "https://github.com/apache/jackrabbit/commit/bb679e0b074203f67d645ae81bf39ce3b8493d12",
        "message": "JCR-2238: Binary throws NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@802676 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/b352ea311e1c5082521fdcae7116fb5dabb1f2a0",
        "file": [
            {
                "patch": "@@ -114,7 +114,7 @@\n     /**\n      * Last used session for event sources.\n      */\n-    private Session lastSession;\n+    private ClusterSession lastSession;\n \n     /**\n      * Create a new instance of this class. Used when serializing.\n@@ -358,7 +358,7 @@ private EventState createEventState(int type, NodeId parentId, Path parentPath,\n      * @return session\n      */\n     private Session getOrCreateSession(String userId) {\n-        if (lastSession == null || !lastSession.getUserID().equals(userId)) {\n+        if (lastSession == null || !lastSession.isUserId(userId)) {\n             lastSession = new ClusterSession(userId);\n         }\n         return lastSession;",
                "additions": 2,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b352ea311e1c5082521fdcae7116fb5dabb1f2a0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cluster/ChangeLogRecord.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "2a8e8b48225e03007c5f0e8619955bf2a57bdc2e",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b352ea311e1c5082521fdcae7116fb5dabb1f2a0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cluster/ChangeLogRecord.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cluster/ChangeLogRecord.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cluster/ChangeLogRecord.java?ref=b352ea311e1c5082521fdcae7116fb5dabb1f2a0"
            },
            {
                "patch": "@@ -55,6 +55,22 @@ public ClusterSession(String userId) {\n         this.userId = userId;\n     }\n \n+    /**\n+     * Returns <code>true</code> if the given <code>userId</code> is the same as\n+     * the {@link #userId} of this session.\n+     *\n+     * @param userId the user id or <code>null</code>.\n+     * @return <code>true</code> if they are the same; <code>false</code>\n+     *         otherwise.\n+     */\n+    boolean isUserId(String userId) {\n+        if (userId == null) {\n+            return this.userId == null;\n+        } else {\n+            return userId.equals(this.userId);\n+        }\n+    }\n+\n     /**\n      * {@inheritDoc}\n      */\n@@ -284,7 +300,7 @@ public void removeLockToken(String s) {\n     public boolean equals(Object obj) {\n         if (obj instanceof ClusterSession) {\n             ClusterSession other = (ClusterSession) obj;\n-            return userId.equals(other.userId);\n+            return isUserId(other.userId);\n         }\n         return false;\n     }",
                "additions": 17,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b352ea311e1c5082521fdcae7116fb5dabb1f2a0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cluster/ClusterSession.java",
                "status": "modified",
                "changes": 18,
                "deletions": 1,
                "sha": "071e0f035dd9c972eba08a29bf6af14434684f87",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b352ea311e1c5082521fdcae7116fb5dabb1f2a0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cluster/ClusterSession.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cluster/ClusterSession.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cluster/ClusterSession.java?ref=b352ea311e1c5082521fdcae7116fb5dabb1f2a0"
            },
            {
                "patch": "@@ -116,6 +116,25 @@ public void testUpdateOperation() throws Exception {\n         assertEquals(listener.getClusterEvents().get(0), update);\n     }\n \n+    /**\n+     * Test producing and consuming an update with a null userId\n+     */\n+    public void testUpdateOperationWithNullUserId() throws Exception {\n+        UpdateEvent update = factory.createUpdateOperationWithNullUserId();\n+\n+        UpdateEventChannel channel = master.createUpdateChannel(DEFAULT_WORKSPACE);\n+        channel.updateCreated(update);\n+        channel.updatePrepared(update);\n+        channel.updateCommitted(update, null);\n+\n+        SimpleEventListener listener = new SimpleEventListener();\n+        slave.createUpdateChannel(DEFAULT_WORKSPACE).setListener(listener);\n+        slave.sync();\n+\n+        assertEquals(1, listener.getClusterEvents().size());\n+        assertEquals(listener.getClusterEvents().get(0), update);\n+    }\n+\n     /**\n      * Test producing and consuming a lock operation.\n      * @throws Exception",
                "additions": 19,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b352ea311e1c5082521fdcae7116fb5dabb1f2a0/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/cluster/ClusterRecordTest.java",
                "status": "modified",
                "changes": 19,
                "deletions": 0,
                "sha": "0ca7f5efc521734700743233808dbda96acd3319",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b352ea311e1c5082521fdcae7116fb5dabb1f2a0/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/cluster/ClusterRecordTest.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/cluster/ClusterRecordTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/cluster/ClusterRecordTest.java?ref=b352ea311e1c5082521fdcae7116fb5dabb1f2a0"
            },
            {
                "patch": "@@ -110,10 +110,39 @@ public UpdateEvent createUpdateOperation() {\n         changes.deleted(n3);\n \n         List events = new ArrayList();\n-        events.add(createEventState(n1, Event.NODE_ADDED, \"{}n1\"));\n-        events.add(createEventState(p1, n1, Event.PROPERTY_ADDED));\n-        events.add(createEventState(p2, n2, Event.PROPERTY_REMOVED));\n-        events.add(createEventState(n3, Event.NODE_REMOVED, \"{}n3\"));\n+        events.add(createEventState(n1, Event.NODE_ADDED, \"{}n1\", session));\n+        events.add(createEventState(p1, n1, Event.PROPERTY_ADDED, session));\n+        events.add(createEventState(p2, n2, Event.PROPERTY_REMOVED, session));\n+        events.add(createEventState(n3, Event.NODE_REMOVED, \"{}n3\", session));\n+\n+        return new UpdateEvent(changes, events, System.currentTimeMillis(), \"user-data\");\n+    }\n+\n+    /**\n+     * Create an update operation.\n+     *\n+     * @return update operation\n+     */\n+    public UpdateEvent createUpdateOperationWithNullUserId() {\n+        NodeState n1 = createNodeState();\n+        NodeState n2 = createNodeState();\n+        NodeState n3 = createNodeState();\n+        PropertyState p1 = createPropertyState(n1.getNodeId(), \"{}a\");\n+        PropertyState p2 = createPropertyState(n2.getNodeId(), \"{}b\");\n+\n+        ChangeLog changes = new ChangeLog();\n+        changes.added(n1);\n+        changes.added(p1);\n+        changes.deleted(p2);\n+        changes.modified(n2);\n+        changes.deleted(n3);\n+\n+        Session s = new ClusterSession(null);\n+        List events = new ArrayList();\n+        events.add(createEventState(n1, Event.NODE_ADDED, \"{}n1\", s));\n+        events.add(createEventState(p1, n1, Event.PROPERTY_ADDED, s));\n+        events.add(createEventState(p2, n2, Event.PROPERTY_REMOVED, s));\n+        events.add(createEventState(n3, Event.NODE_REMOVED, \"{}n3\", s));\n \n         return new UpdateEvent(changes, events, System.currentTimeMillis(), \"user-data\");\n     }\n@@ -153,9 +182,11 @@ protected PropertyState createPropertyState(NodeId parentId, String name) {\n      * @param n node state\n      * @param type <code>Event.NODE_ADDED</code> or <code>Event.NODE_REMOVED</code>\n      * @param name node name\n+     * @param session the session that produced the event.\n      * @return event state\n      */\n-    protected EventState createEventState(NodeState n, int type, String name) {\n+    protected EventState createEventState(NodeState n, int type, String name,\n+                                          Session session) {\n         Path.Element relPath = pathFactory.createElement(nameFactory.create(name));\n \n         switch (type) {\n@@ -179,9 +210,11 @@ protected EventState createEventState(NodeState n, int type, String name) {\n      * @param p property state\n      * @param parent parent node state\n      * @param type <code>Event.NODE_ADDED</code> or <code>Event.NODE_REMOVED</code>\n+     * @param session the session that produces the event.\n      * @return event state\n      */\n-    protected EventState createEventState(PropertyState p, NodeState parent, int type) {\n+    protected EventState createEventState(PropertyState p, NodeState parent, int type,\n+                                          Session session) {\n         Path.Element relPath = pathFactory.createElement(p.getName());\n \n         switch (type) {",
                "additions": 39,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b352ea311e1c5082521fdcae7116fb5dabb1f2a0/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/cluster/UpdateEventFactory.java",
                "status": "modified",
                "changes": 45,
                "deletions": 6,
                "sha": "29d76261a46c56d749a8961f48d33f1356e9a675",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b352ea311e1c5082521fdcae7116fb5dabb1f2a0/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/cluster/UpdateEventFactory.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/cluster/UpdateEventFactory.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/cluster/UpdateEventFactory.java?ref=b352ea311e1c5082521fdcae7116fb5dabb1f2a0"
            }
        ],
        "bug_id": "jackrabbit_15",
        "parent": "https://github.com/apache/jackrabbit/commit/6fb52bbcffe1efeeaf0f8c84c39649ff2c9f530e",
        "message": "JCR-2213: ChangeLogRecord throws NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@794253 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/b3f7fdd263335ed645b8dc5dd9ff98782a0d7f1b",
        "file": [
            {
                "patch": "@@ -378,7 +378,7 @@ private void initializeParents(IndexReader reader) throws IOException {\n             collectTermDocs(reader, new Term(FieldNames.UUID, \"\"), new TermDocsCollector() {\n                 public void collect(Term term, TermDocs tDocs) throws IOException {\n                     UUID uuid = UUID.fromString(term.text());\n-                    if (tDocs.next()) {\n+                    while (tDocs.next()) {\n                         NodeInfo info = new NodeInfo(tDocs.doc(), uuid);\n                         docs.put(new Integer(info.docId), info);\n                     }\n@@ -388,8 +388,8 @@ public void collect(Term term, TermDocs tDocs) throws IOException {\n             // read PARENTs\n             collectTermDocs(reader, new Term(FieldNames.PARENT, \"0\"), new TermDocsCollector() {\n                 public void collect(Term term, TermDocs tDocs) throws IOException {\n+                    UUID uuid = UUID.fromString(term.text());\n                     while (tDocs.next()) {\n-                        UUID uuid = UUID.fromString(term.text());\n                         Integer docId = new Integer(tDocs.doc());\n                         NodeInfo info = (NodeInfo) docs.get(docId);\n                         info.parent = uuid;",
                "additions": 2,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b3f7fdd263335ed645b8dc5dd9ff98782a0d7f1b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/CachingIndexReader.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "ab5a0e3ad6bba403072a9ad870fd1aaba8247121",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b3f7fdd263335ed645b8dc5dd9ff98782a0d7f1b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/CachingIndexReader.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/CachingIndexReader.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/CachingIndexReader.java?ref=b3f7fdd263335ed645b8dc5dd9ff98782a0d7f1b"
            }
        ],
        "bug_id": "jackrabbit_16",
        "parent": "https://github.com/apache/jackrabbit/commit/ed056236ddaea2435e082501313d7b44e14ef004",
        "message": "JCR-2015: CachingIndexReader: NullPointerException initializing parents cache\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@758667 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/54ac4bcd680a041703893c78f0cb48a6bde79e7a",
        "file": [
            {
                "patch": "@@ -38,7 +38,6 @@\n import org.apache.jackrabbit.api.jsr283.security.AccessControlManager;\n import org.apache.jackrabbit.api.jsr283.retention.RetentionManager;\n import org.apache.jackrabbit.core.security.authentication.AuthContext;\n-import org.apache.jackrabbit.core.state.ItemStateException;\n import org.apache.jackrabbit.core.state.LocalItemStateManager;\n import org.apache.jackrabbit.core.state.NodeState;\n import org.apache.jackrabbit.core.state.SessionItemStateManager;\n@@ -419,7 +418,7 @@ public Session createSession(String workspaceName)\n         if (workspaceName == null) {\n             workspaceName = rep.getConfig().getDefaultWorkspaceName();\n         }\n-        if (loginContext!=null) {\n+        if (loginContext != null) {\n             return rep.createSession(loginContext, workspaceName);\n         } else {\n             return rep.createSession(getSubject(), workspaceName);\n@@ -667,10 +666,9 @@ public void removeListener(SessionListener listener) {\n     /**\n      * Create a data store garbage collector for this repository.\n      *\n-     * @throws ItemStateException\n      * @throws RepositoryException\n      */\n-    public GarbageCollector createDataStoreGarbageCollector() throws RepositoryException, ItemStateException {\n+    public GarbageCollector createDataStoreGarbageCollector() throws RepositoryException {\n         ArrayList pmList = new ArrayList();\n         VersionManagerImpl vm = (VersionManagerImpl) rep.getVersionManager();\n         PersistenceManager pm = vm.getPersistenceManager();",
                "additions": 2,
                "raw_url": "https://github.com/apache/jackrabbit/raw/54ac4bcd680a041703893c78f0cb48a6bde79e7a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SessionImpl.java",
                "status": "modified",
                "changes": 6,
                "deletions": 4,
                "sha": "5eaf4475f57d7353306bf9bd88e0bd29e8153122",
                "blob_url": "https://github.com/apache/jackrabbit/blob/54ac4bcd680a041703893c78f0cb48a6bde79e7a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SessionImpl.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SessionImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SessionImpl.java?ref=54ac4bcd680a041703893c78f0cb48a6bde79e7a"
            },
            {
                "patch": "@@ -147,6 +147,9 @@ public void setScanEventListener(ScanEventListener callback) {\n      */\n     public void scan() throws RepositoryException,\n             IllegalStateException, IOException, ItemStateException {\n+        if (store == null) {\n+            throw new RepositoryException(\"No DataStore configured.\");\n+        }\n         long now = System.currentTimeMillis();\n         if (startScanTimestamp == 0) {\n             startScanTimestamp = now;",
                "additions": 3,
                "raw_url": "https://github.com/apache/jackrabbit/raw/54ac4bcd680a041703893c78f0cb48a6bde79e7a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/data/GarbageCollector.java",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "2f3bc06598068976af0bed46c20a7f33cfa8970c",
                "blob_url": "https://github.com/apache/jackrabbit/blob/54ac4bcd680a041703893c78f0cb48a6bde79e7a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/data/GarbageCollector.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/data/GarbageCollector.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/data/GarbageCollector.java?ref=54ac4bcd680a041703893c78f0cb48a6bde79e7a"
            }
        ],
        "bug_id": "jackrabbit_17",
        "parent": "https://github.com/apache/jackrabbit/commit/1bf25a0bc093f028a87e49ec0a023970815bc299",
        "message": "JCR-1985 NullPointerException in GarbageCollector.scan() if no DataStore configured\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@745534 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/5e84d803621b3460582e5090af8a0812fe9b6d77",
        "file": [
            {
                "patch": "@@ -137,13 +137,16 @@ private Node getNode(DavSession sessionImpl, DavResourceLocator locator)\n             throws RepositoryException {\n         Node node = null;\n         try {\n-            Item item = ((JcrDavSession)sessionImpl).getRepositorySession().getItem(locator.getRepositoryPath());\n-            if (item instanceof Node) {\n-                node = (Node)item;\n-            } // else: item is a property -> return null\n+            String repoPath = locator.getRepositoryPath();\n+            if (repoPath != null) {\n+                Session session = ((JcrDavSession)sessionImpl).getRepositorySession();\n+                Item item = session.getItem(repoPath);\n+                if (item instanceof Node) {\n+                    node = (Node)item;\n+                } // else: item is a property -> return null\n+            }\n         } catch (PathNotFoundException e) {\n-            // item does not exist (yet) -> create null-resource\n-            node = null;\n+            // item does not exist (yet). return null -> create null-resource\n         }\n         return node;\n     }\n@@ -153,7 +156,7 @@ private Node getNode(DavSession sessionImpl, DavResourceLocator locator)\n      *\n      * @param locator\n      * @param session\n-     * @param request\n+     * @param isCollection\n      * @return\n      * @throws DavException\n      */\n@@ -178,10 +181,11 @@ private DavResource createNullResource(DavResourceLocator locator,\n      * supports the versioning option different resources are created for\n      * version, versionhistory and common nodes.\n      *\n+     * @param node\n      * @param locator\n-     * @param sessionImpl\n-     * @return DavResource representing a repository item.\n-     * @throws RepositoryException if {@link javax.jcr.Session#getItem(String)} fails.\n+     * @param session\n+     * @return\n+     * @throws DavException\n      */\n     private DavResource createResource(Node node, DavResourceLocator locator,\n                                        DavSession session) throws DavException {",
                "additions": 14,
                "raw_url": "https://github.com/apache/jackrabbit/raw/5e84d803621b3460582e5090af8a0812fe9b6d77/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/simple/ResourceFactoryImpl.java",
                "status": "modified",
                "changes": 24,
                "deletions": 10,
                "sha": "cd0db7ef81066e8b74251cc655714eda3bfcf171",
                "blob_url": "https://github.com/apache/jackrabbit/blob/5e84d803621b3460582e5090af8a0812fe9b6d77/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/simple/ResourceFactoryImpl.java",
                "filename": "jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/simple/ResourceFactoryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/simple/ResourceFactoryImpl.java?ref=5e84d803621b3460582e5090af8a0812fe9b6d77"
            }
        ],
        "bug_id": "jackrabbit_18",
        "parent": "https://github.com/apache/jackrabbit/commit/3325b2859dee77d34424f2f3f205ca34e3cdfd9f",
        "message": "JCR-1319: NullPointerException when accessing the SimpleWebdavServlet at the prefix path\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@677939 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/69e80ad8fa1f9466c666933892e0810596058afe",
        "file": [
            {
                "patch": "@@ -45,6 +45,21 @@\n     <url>http://svn.apache.org/viewvc/jackrabbit/trunk/jackrabbit-jcr-server</url>\n   </scm>\n \n+  <build>\n+    <plugins>\n+      <plugin>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <configuration>\n+          <includes>\n+            <include>**/*Test.java</include>\n+          </includes>\n+          <forkMode>once</forkMode>\n+          <argLine>-Xmx128m -enableassertions</argLine>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+\n   <dependencies>\n     <dependency>\n       <groupId>javax.jcr</groupId>",
                "additions": 15,
                "raw_url": "https://github.com/apache/jackrabbit/raw/69e80ad8fa1f9466c666933892e0810596058afe/jackrabbit-jcr-server/pom.xml",
                "status": "modified",
                "changes": 15,
                "deletions": 0,
                "sha": "5f3053c21c6e2b8e70e657ff12249e2312c1c9a3",
                "blob_url": "https://github.com/apache/jackrabbit/blob/69e80ad8fa1f9466c666933892e0810596058afe/jackrabbit-jcr-server/pom.xml",
                "filename": "jackrabbit-jcr-server/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr-server/pom.xml?ref=69e80ad8fa1f9466c666933892e0810596058afe"
            },
            {
                "patch": "@@ -44,7 +44,10 @@\n import javax.jcr.nodetype.NoSuchNodeTypeException;\n import javax.jcr.query.InvalidQueryException;\n import javax.jcr.version.VersionException;\n-import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.LinkedHashMap;\n+\n \n /**\n  * <code>JcrDavException</code> extends the {@link DavException} in order to\n@@ -54,8 +57,8 @@\n \n     private static Logger log = LoggerFactory.getLogger(JcrDavException.class);\n \n-    // mapping of Jcr exceptions to error codes.\n-    private static HashMap codeMap = new HashMap();\n+    // ordered mapping of Jcr exceptions to error codes.\n+    private static Map codeMap = new LinkedHashMap(20);\n     static {\n         codeMap.put(AccessDeniedException.class, new Integer(DavServletResponse.SC_FORBIDDEN));\n         codeMap.put(ConstraintViolationException.class, new Integer(DavServletResponse.SC_CONFLICT));\n@@ -71,13 +74,30 @@\n         codeMap.put(NoSuchWorkspaceException.class, new Integer(DavServletResponse.SC_CONFLICT));\n         codeMap.put(PathNotFoundException.class, new Integer(DavServletResponse.SC_CONFLICT));\n         codeMap.put(ReferentialIntegrityException.class, new Integer(DavServletResponse.SC_CONFLICT));\n-        codeMap.put(RepositoryException.class, new Integer(DavServletResponse.SC_FORBIDDEN));\n         codeMap.put(LoginException.class, new Integer(DavServletResponse.SC_UNAUTHORIZED));\n         codeMap.put(UnsupportedRepositoryOperationException.class, new Integer(DavServletResponse.SC_NOT_IMPLEMENTED));\n         codeMap.put(ValueFormatException.class, new Integer(DavServletResponse.SC_CONFLICT));\n         codeMap.put(VersionException.class, new Integer(DavServletResponse.SC_CONFLICT));\n+        codeMap.put(RepositoryException.class, new Integer(DavServletResponse.SC_FORBIDDEN));\n     }\n \n+    private static int lookupErrorCode(Class exceptionClass) {\n+        Integer code = (Integer) codeMap.get(exceptionClass);\n+        if (code == null) {\n+            for (Iterator it = codeMap.keySet().iterator(); it.hasNext();) {\n+                Class jcrExceptionClass = (Class) it.next();\n+                if (jcrExceptionClass.isAssignableFrom(exceptionClass)) {\n+                    code = (Integer) codeMap.get(jcrExceptionClass);\n+                    break;\n+                }\n+            }\n+            if (code == null) {\n+                code = new Integer(DavServletResponse.SC_FORBIDDEN); // fallback\n+            }\n+        }\n+        return code.intValue();\n+    }\n+    \n     private Class exceptionClass;\n \n     /**\n@@ -108,7 +128,7 @@ public JcrDavException(Throwable cause, int errorCode) {\n      * @see JcrDavException#JcrDavException(Throwable, int)\n      */\n     public JcrDavException(RepositoryException cause) {\n-        this(cause, ((Integer)codeMap.get(cause.getClass())).intValue());\n+        this(cause, lookupErrorCode(cause.getClass()));\n     }\n \n     /**\n@@ -136,4 +156,4 @@ public Element toXml(Document document) {\n         error.appendChild(excep);\n         return error;\n     }\n-}\n\\ No newline at end of file\n+}",
                "additions": 26,
                "raw_url": "https://github.com/apache/jackrabbit/raw/69e80ad8fa1f9466c666933892e0810596058afe/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/JcrDavException.java",
                "status": "modified",
                "changes": 32,
                "deletions": 6,
                "sha": "ab67e696c835ed16c5e03bb4f9e02ba1506ed968",
                "blob_url": "https://github.com/apache/jackrabbit/blob/69e80ad8fa1f9466c666933892e0810596058afe/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/JcrDavException.java",
                "filename": "jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/JcrDavException.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/JcrDavException.java?ref=69e80ad8fa1f9466c666933892e0810596058afe"
            },
            {
                "patch": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.webdav.jcr;\n+\n+import junit.framework.TestCase;\n+\n+import javax.jcr.lock.LockException;\n+import javax.jcr.RepositoryException;\n+\n+/** <code>JcrDavExceptionTest</code>... */\n+public class JcrDavExceptionTest extends TestCase {\n+\n+    public void testDerivedException() {\n+        RepositoryException re = new DerievedRepositoryException();\n+\n+        // creating JcrDavException from the derived exception must not throw\n+        // NPE (see issue https://issues.apache.org/jira/browse/JCR-1678)\n+        JcrDavException jde = new JcrDavException(re);\n+\n+        // error code must be the same as for LockException\n+        assertEquals(new JcrDavException(new LockException()).getErrorCode(),\n+                     jde.getErrorCode());\n+    }\n+\n+    public void testNullException() {\n+        try {\n+            new JcrDavException(null);\n+            fail(\"Should throw NPE\");\n+        } catch (NullPointerException e) {\n+            // as documented in the javadoc\n+        }\n+    }\n+\n+    /**\n+     * Derived exception that does not extend from RepositoryException, which\n+     * returns the 'default' error code.\n+     */\n+    private static final class DerievedRepositoryException extends LockException {\n+    }\n+}\n\\ No newline at end of file",
                "additions": 54,
                "raw_url": "https://github.com/apache/jackrabbit/raw/69e80ad8fa1f9466c666933892e0810596058afe/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/webdav/jcr/JcrDavExceptionTest.java",
                "status": "added",
                "changes": 54,
                "deletions": 0,
                "sha": "fcf13989892aacb5945aa0ea0db373968a50f2b4",
                "blob_url": "https://github.com/apache/jackrabbit/blob/69e80ad8fa1f9466c666933892e0810596058afe/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/webdav/jcr/JcrDavExceptionTest.java",
                "filename": "jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/webdav/jcr/JcrDavExceptionTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/webdav/jcr/JcrDavExceptionTest.java?ref=69e80ad8fa1f9466c666933892e0810596058afe"
            },
            {
                "patch": "@@ -0,0 +1,34 @@\n+#  Licensed to the Apache Software Foundation (ASF) under one or more\n+#  contributor license agreements.  See the NOTICE file distributed with\n+#  this work for additional information regarding copyright ownership.\n+#  The ASF licenses this file to You under the Apache License, Version 2.0\n+#  (the \"License\"); you may not use this file except in compliance with\n+#  the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+#  limitations under the License.\n+\n+# Set root logger level to INFO and its only appender to file.\n+log4j.rootLogger=INFO, file\n+#log4j.rootLogger=DEBUG, stdout, file\n+#log4j.rootLogger=ERROR, stdout, file\n+\n+# 'stdout' is set to be a ConsoleAppender.\n+log4j.appender.stdout=org.apache.log4j.ConsoleAppender\n+\n+# 'stdout' uses PatternLayout\n+log4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n+log4j.appender.stdout.layout.ConversionPattern=%d{dd.MM.yyyy HH:mm:ss} *%-5p* [%t] %c{1}: %m (%F, line %L)\\n\n+\n+# 'file' is set to be a FileAppender.\n+log4j.appender.file=org.apache.log4j.FileAppender\n+log4j.appender.file.File=target/jcr.log\n+\n+# 'file' uses PatternLayout.\n+log4j.appender.file.layout=org.apache.log4j.PatternLayout\n+log4j.appender.file.layout.ConversionPattern=%d{dd.MM.yyyy HH:mm:ss} *%-5p* [%t] %c{1}: %m (%F, line %L)\\n",
                "additions": 34,
                "raw_url": "https://github.com/apache/jackrabbit/raw/69e80ad8fa1f9466c666933892e0810596058afe/jackrabbit-jcr-server/src/test/resources/log4j.properties",
                "status": "added",
                "changes": 34,
                "deletions": 0,
                "sha": "70eb1148e6dd7cc5604edf46135ea8b5aca9f3a4",
                "blob_url": "https://github.com/apache/jackrabbit/blob/69e80ad8fa1f9466c666933892e0810596058afe/jackrabbit-jcr-server/src/test/resources/log4j.properties",
                "filename": "jackrabbit-jcr-server/src/test/resources/log4j.properties",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr-server/src/test/resources/log4j.properties?ref=69e80ad8fa1f9466c666933892e0810596058afe"
            }
        ],
        "bug_id": "jackrabbit_19",
        "parent": "https://github.com/apache/jackrabbit/commit/afc54fccfbc74d9cd656dc0f41c48f1b1b18dc9a",
        "message": "JCR-1678: NullPointerException in constructor of JcrDavException\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@677893 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/7f4af60c8adacf2498c29b9e89eeb1b4d3cadbcb",
        "file": [
            {
                "patch": "@@ -40,6 +40,7 @@\n import org.slf4j.LoggerFactory;\n \n import javax.jcr.AccessDeniedException;\n+import javax.jcr.InvalidItemStateException;\n import javax.jcr.ItemNotFoundException;\n import javax.jcr.NamespaceException;\n import javax.jcr.NodeIterator;\n@@ -310,7 +311,12 @@ private ItemData getItemData(ItemId itemId, Path path, boolean permissionCheck)\n      * @throws RepositoryException\n      */\n     private boolean canRead(ItemData data, Path path) throws AccessDeniedException, RepositoryException {\n-        if (data.getState().getStatus() == ItemState.STATUS_NEW &&\n+        // JCR-1601: cached item may just have been invalidated\n+        ItemState state = data.getState();\n+        if (state == null) {\n+            throw new InvalidItemStateException(data.getId() + \": the item does not exist anymore\");\n+        }\n+        if (state.getStatus() == ItemState.STATUS_NEW &&\n                 !data.getDefinition().isProtected()) {\n             // NEW items can always be read as long they have been added\n             // through the API and NOT by the system (i.e. protected props).",
                "additions": 7,
                "raw_url": "https://github.com/apache/jackrabbit/raw/7f4af60c8adacf2498c29b9e89eeb1b4d3cadbcb/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
                "status": "modified",
                "changes": 8,
                "deletions": 1,
                "sha": "f6cba0e2ec26909774acee5f336d2f4c4dc6c7d5",
                "blob_url": "https://github.com/apache/jackrabbit/blob/7f4af60c8adacf2498c29b9e89eeb1b4d3cadbcb/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java?ref=7f4af60c8adacf2498c29b9e89eeb1b4d3cadbcb"
            }
        ],
        "bug_id": "jackrabbit_20",
        "parent": "https://github.com/apache/jackrabbit/commit/1e7d6db6131aeb7db2680a18231cb8f06259209d",
        "message": "JCR-1601 - Occasional NullPointerException in ItemManager\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@656282 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/1d8d3102dcf52a2cdfa56f6da52547984631d123",
        "file": [
            {
                "patch": "@@ -21,6 +21,7 @@\n import org.apache.jackrabbit.core.NodeId;\n import org.apache.jackrabbit.core.NodeImpl;\n import org.apache.jackrabbit.core.SessionImpl;\n+import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;\n import org.apache.jackrabbit.core.state.ItemStateException;\n import org.apache.jackrabbit.core.state.LocalItemStateManager;\n import org.apache.jackrabbit.core.state.NodeState;\n@@ -58,6 +59,11 @@\n      */\n     protected LocalItemStateManager stateMgr;\n \n+    /**\n+     * Node type registry.\n+     */\n+    protected final NodeTypeRegistry ntReg;\n+\n     /**\n      * Persistent root node of the version histories.\n      */\n@@ -78,6 +84,10 @@ protected boolean allowReader() {\n                 }\n             };\n \n+    public AbstractVersionManager(NodeTypeRegistry ntReg) {\n+        this.ntReg = ntReg;\n+    }\n+\n     //-------------------------------------------------------< VersionManager >\n \n     /**\n@@ -529,4 +539,42 @@ protected void versionDestroyed(InternalVersion version) {\n      */\n     protected void itemDiscarded(InternalVersionItem item) {\n     }\n+\n+    /**\n+     * Creates an {@link InternalVersionItem} based on the {@link NodeState}\n+     * identified by <code>id</code>.\n+     *\n+     * @param id    the node id of the version item.\n+     * @return the version item or <code>null</code> if there is no node state\n+     *         with the given <code>id</code>.\n+     * @throws RepositoryException if an error occurs while reading from the\n+     *                             version storage.\n+     */\n+    protected InternalVersionItem createInternalVersionItem(NodeId id)\n+            throws RepositoryException {\n+        try {\n+            if (stateMgr.hasItemState(id)) {\n+                NodeState state = (NodeState) stateMgr.getItemState(id);\n+                NodeStateEx pNode = new NodeStateEx(stateMgr, ntReg, state, null);\n+                NodeId parentId = pNode.getParentId();\n+                InternalVersionItem parent = getItem(parentId);\n+                Name ntName = state.getNodeTypeName();\n+                if (ntName.equals(NameConstants.NT_FROZENNODE)) {\n+                    return new InternalFrozenNodeImpl(this, pNode, parent);\n+                } else if (ntName.equals(NameConstants.NT_VERSIONEDCHILD)) {\n+                    return new InternalFrozenVHImpl(this, pNode, parent);\n+                } else if (ntName.equals(NameConstants.NT_VERSION)) {\n+                    return ((InternalVersionHistory) parent).getVersion(id);\n+                } else if (ntName.equals(NameConstants.NT_VERSIONHISTORY)) {\n+                    return new InternalVersionHistoryImpl(this, pNode);\n+                } else {\n+                    return null;\n+                }\n+            } else {\n+                return null;\n+            }\n+        } catch (ItemStateException e) {\n+            throw new RepositoryException(e);\n+        }\n+    }\n }",
                "additions": 48,
                "raw_url": "https://github.com/apache/jackrabbit/raw/1d8d3102dcf52a2cdfa56f6da52547984631d123/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/AbstractVersionManager.java",
                "status": "modified",
                "changes": 48,
                "deletions": 0,
                "sha": "1905cf3d0c01b66a3213b354940eb9ece6f4a42d",
                "blob_url": "https://github.com/apache/jackrabbit/blob/1d8d3102dcf52a2cdfa56f6da52547984631d123/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/AbstractVersionManager.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/AbstractVersionManager.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/AbstractVersionManager.java?ref=1d8d3102dcf52a2cdfa56f6da52547984631d123"
            },
            {
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.jackrabbit.core.version;\n \n import org.apache.jackrabbit.spi.Name;\n+import org.apache.jackrabbit.core.NodeId;\n \n import java.util.Calendar;\n \n@@ -40,6 +41,13 @@\n      */\n     InternalFrozenNode getFrozenNode();\n \n+    /**\n+     * Returns the node id of the frozen node.\n+     *\n+     * @return the node id of the frozen node;\n+     */\n+    NodeId getFrozenNodeId();\n+\n     /**\n      * Equivalent to {@link Version#getCreated()}\n      *",
                "additions": 8,
                "raw_url": "https://github.com/apache/jackrabbit/raw/1d8d3102dcf52a2cdfa56f6da52547984631d123/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersion.java",
                "status": "modified",
                "changes": 8,
                "deletions": 0,
                "sha": "a6b96f9275ebe85d03c3c6aff7ea324d0a1e1ff2",
                "blob_url": "https://github.com/apache/jackrabbit/blob/1d8d3102dcf52a2cdfa56f6da52547984631d123/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersion.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersion.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersion.java?ref=1d8d3102dcf52a2cdfa56f6da52547984631d123"
            },
            {
                "patch": "@@ -108,16 +108,23 @@ public Name getName() {\n     public InternalFrozenNode getFrozenNode() {\n         // get frozen node\n         try {\n-            NodeState.ChildNodeEntry entry = node.getState().getChildNodeEntry(NameConstants.JCR_FROZENNODE, 1);\n-            if (entry == null) {\n-                throw new InternalError(\"version has no frozen node: \" + getId());\n-            }\n-            return (InternalFrozenNode) vMgr.getItem(entry.getId());\n+            return (InternalFrozenNode) vMgr.getItem(getFrozenNodeId());\n         } catch (RepositoryException e) {\n             throw new IllegalStateException(\"unable to retrieve frozen node: \" + e);\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    public NodeId getFrozenNodeId() {\n+        NodeState.ChildNodeEntry entry = node.getState().getChildNodeEntry(NameConstants.JCR_FROZENNODE, 1);\n+        if (entry == null) {\n+            throw new InternalError(\"version has no frozen node: \" + getId());\n+        }\n+        return entry.getId();\n+    }\n+\n     /**\n      * {@inheritDoc}\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/jackrabbit/raw/1d8d3102dcf52a2cdfa56f6da52547984631d123/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionImpl.java",
                "status": "modified",
                "changes": 17,
                "deletions": 5,
                "sha": "384d86ceecda64c3a18cd6fda8c26a0af76447e4",
                "blob_url": "https://github.com/apache/jackrabbit/blob/1d8d3102dcf52a2cdfa56f6da52547984631d123/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionImpl.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionImpl.java?ref=1d8d3102dcf52a2cdfa56f6da52547984631d123"
            },
            {
                "patch": "@@ -111,11 +111,6 @@\n      */\n     private final VersionItemStateProvider versProvider;\n \n-    /**\n-     * the node type manager\n-     */\n-    private NodeTypeRegistry ntReg;\n-\n     /**\n      * the dynamic event state collection factory\n      */\n@@ -136,10 +131,10 @@ public VersionManagerImpl(PersistenceManager pMgr, FileSystem fs,\n                               NodeId rootParentId,\n                               ItemStateCacheFactory cacheFactory,\n                               ISMLocking ismLocking) throws RepositoryException {\n+        super(ntReg);\n         try {\n             this.pMgr = pMgr;\n             this.fs = fs;\n-            this.ntReg = ntReg;\n             this.escFactory = new DynamicESCFactory(obsMgr);\n \n             // need to store the version storage root directly into the persistence manager\n@@ -257,37 +252,20 @@ protected InternalVersionItem getItem(NodeId id)\n             synchronized (versionItems) {\n                 InternalVersionItem item = (InternalVersionItem) versionItems.get(id);\n                 if (item == null) {\n-                    if (stateMgr.hasItemState(id)) {\n-                        NodeState state = (NodeState) stateMgr.getItemState(id);\n-                        NodeStateEx pNode = new NodeStateEx(stateMgr, ntReg, state, null);\n-                        NodeId parentId = pNode.getParentId();\n-                        InternalVersionItem parent = getItem(parentId);\n-                        Name ntName = state.getNodeTypeName();\n-                        if (ntName.equals(NameConstants.NT_FROZENNODE)) {\n-                            item = new InternalFrozenNodeImpl(this, pNode, parent);\n-                        } else if (ntName.equals(NameConstants.NT_VERSIONEDCHILD)) {\n-                            item = new InternalFrozenVHImpl(this, pNode, parent);\n-                        } else if (ntName.equals(NameConstants.NT_VERSION)) {\n-                            item = ((InternalVersionHistory) parent).getVersion(id);\n-                        } else if (ntName.equals(NameConstants.NT_VERSIONHISTORY)) {\n-                            item = new InternalVersionHistoryImpl(this, pNode);\n-                        } else {\n-                            return null;\n-                        }\n+                    item = createInternalVersionItem(id);\n+                    if (item != null) {\n+                        versionItems.put(id, item);\n                     } else {\n                         return null;\n                     }\n-                    versionItems.put(id, item);\n                 }\n                 return item;\n             }\n-        } catch (ItemStateException e) {\n-            throw new RepositoryException(e);\n         } finally {\n             releaseReadLock();\n         }\n     }\n-\n+    \n     /**\n      * {@inheritDoc}\n      * <p/>",
                "additions": 5,
                "raw_url": "https://github.com/apache/jackrabbit/raw/1d8d3102dcf52a2cdfa56f6da52547984631d123/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionManagerImpl.java",
                "status": "modified",
                "changes": 32,
                "deletions": 27,
                "sha": "5e77b296bda118f4f07f23e87646dcaf4ad0ace4",
                "blob_url": "https://github.com/apache/jackrabbit/blob/1d8d3102dcf52a2cdfa56f6da52547984631d123/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionManagerImpl.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionManagerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionManagerImpl.java?ref=1d8d3102dcf52a2cdfa56f6da52547984631d123"
            },
            {
                "patch": "@@ -74,11 +74,6 @@\n      */\n     private final VersionManagerImpl vMgr;\n \n-    /**\n-     * Node type registry.\n-     */\n-    private NodeTypeRegistry ntReg;\n-\n     /**\n      * The session that uses this version manager.\n      */\n@@ -100,9 +95,8 @@\n     public XAVersionManager(VersionManagerImpl vMgr, NodeTypeRegistry ntReg,\n                             SessionImpl session, ItemStateCacheFactory cacheFactory)\n             throws RepositoryException {\n-\n+        super(ntReg);\n         this.vMgr = vMgr;\n-        this.ntReg = ntReg;\n         this.session = session;\n         this.stateMgr = new XAItemStateManager(vMgr.getSharedStateMgr(),\n                 this, CHANGE_LOG_ATTRIBUTE_NAME, cacheFactory);\n@@ -366,7 +360,13 @@ protected InternalVersion checkin(InternalVersionHistoryImpl history,\n             history = makeLocalCopy(history);\n             xaItems.put(history.getId(), history);\n         }\n-        return super.checkin(history, node);\n+        InternalVersion version = super.checkin(history, node);\n+        NodeId frozenNodeId = version.getFrozenNodeId();\n+        InternalVersionItem frozenNode = createInternalVersionItem(frozenNodeId);\n+        if (frozenNode != null) {\n+            xaItems.put(frozenNodeId, frozenNode);\n+        }\n+        return version;\n     }\n \n     /**",
                "additions": 8,
                "raw_url": "https://github.com/apache/jackrabbit/raw/1d8d3102dcf52a2cdfa56f6da52547984631d123/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/XAVersionManager.java",
                "status": "modified",
                "changes": 16,
                "deletions": 8,
                "sha": "2c9ad33959bd508caab6036988025da300f6fea0",
                "blob_url": "https://github.com/apache/jackrabbit/blob/1d8d3102dcf52a2cdfa56f6da52547984631d123/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/XAVersionManager.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/XAVersionManager.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/XAVersionManager.java?ref=1d8d3102dcf52a2cdfa56f6da52547984631d123"
            },
            {
                "patch": "@@ -34,7 +34,9 @@ public void testRestoreWithXA() throws Exception {\n         UserTransactionImpl tx = new UserTransactionImpl(superuser);\n         tx.begin();\n         Version v10 = n.checkin();\n+        String versionName = v10.getName();\n         n.restore(v10, true);\n+        assertEquals(\"Wrong version restored\", versionName, n.getBaseVersion().getName());\n         tx.commit();\n     }\n }",
                "additions": 2,
                "raw_url": "https://github.com/apache/jackrabbit/raw/1d8d3102dcf52a2cdfa56f6da52547984631d123/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/RestoreTest.java",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "8679ab2a9a567bc1ccbf3bf18955e2d6e70288a4",
                "blob_url": "https://github.com/apache/jackrabbit/blob/1d8d3102dcf52a2cdfa56f6da52547984631d123/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/RestoreTest.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/RestoreTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/RestoreTest.java?ref=1d8d3102dcf52a2cdfa56f6da52547984631d123"
            },
            {
                "patch": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.core.version;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test suite that includes all jackrabbit core version tests.\n+ */\n+public class TestAll extends TestCase {\n+\n+    /**\n+     * Returns a test suite that executes all tests inside this package.\n+     *\n+     * @return a test suite that executes all tests inside this package\n+     */\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(\"Version tests\");\n+        // disabled because JCR-1481 is not yet fixed\n+        //suite.addTestSuite(CheckinRemoveVersionTest.class);\n+        suite.addTestSuite(RemoveVersionLabelTest.class);\n+        suite.addTestSuite(RestoreTest.class);\n+        suite.addTestSuite(VersionIteratorImplTest.class);\n+        return suite;\n+    }\n+}",
                "additions": 42,
                "raw_url": "https://github.com/apache/jackrabbit/raw/1d8d3102dcf52a2cdfa56f6da52547984631d123/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/TestAll.java",
                "status": "added",
                "changes": 42,
                "deletions": 0,
                "sha": "d5df74b8f81297fc1361c0dbdbff3f77447a75c8",
                "blob_url": "https://github.com/apache/jackrabbit/blob/1d8d3102dcf52a2cdfa56f6da52547984631d123/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/TestAll.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/TestAll.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/TestAll.java?ref=1d8d3102dcf52a2cdfa56f6da52547984631d123"
            },
            {
                "patch": "@@ -48,6 +48,7 @@ public NodeId getId() {\n \n         public Calendar getCreated() {return null;}\n         public InternalFrozenNode getFrozenNode() {return null;}\n+        public NodeId getFrozenNodeId() {return null;}\n         public Name[] getLabels() {return null;}\n         public Name getName() {return null;}\n         public InternalVersion[] getPredecessors() {return null;}",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/1d8d3102dcf52a2cdfa56f6da52547984631d123/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/VersionIteratorImplTest.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "0550a3e4d777cc37e7bd4a120f03a11f74d80215",
                "blob_url": "https://github.com/apache/jackrabbit/blob/1d8d3102dcf52a2cdfa56f6da52547984631d123/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/VersionIteratorImplTest.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/VersionIteratorImplTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/VersionIteratorImplTest.java?ref=1d8d3102dcf52a2cdfa56f6da52547984631d123"
            }
        ],
        "bug_id": "jackrabbit_21",
        "parent": "https://github.com/apache/jackrabbit/commit/92c5b554a53eee3b03def467cbf54540fea094c5",
        "message": "JCR-1476: Restore to base version throws NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@638303 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/e33c5bbe93b3858802cf8b16c28ddd2cc73405bd",
        "file": [
            {
                "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.core.version;\n+\n+import org.apache.jackrabbit.test.AbstractJCRTest;\n+import org.apache.jackrabbit.core.UserTransactionImpl;\n+\n+import javax.jcr.Node;\n+import javax.jcr.version.Version;\n+\n+/**\n+ * Test case for JCR-1476.\n+ */\n+public class RestoreTest extends AbstractJCRTest {\n+\n+    public void testRestoreWithXA() throws Exception {\n+        Node n = testRootNode.addNode(nodeName1);\n+        n.addMixin(mixVersionable);\n+        testRootNode.save();\n+        UserTransactionImpl tx = new UserTransactionImpl(superuser);\n+        tx.begin();\n+        Version v10 = n.checkin();\n+        n.restore(v10, true);\n+        tx.commit();\n+    }\n+}",
                "additions": 40,
                "raw_url": "https://github.com/apache/jackrabbit/raw/e33c5bbe93b3858802cf8b16c28ddd2cc73405bd/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/RestoreTest.java",
                "status": "added",
                "changes": 40,
                "deletions": 0,
                "sha": "ce5af6f644f4281335b4ca1c4d8c2f674d636fb9",
                "blob_url": "https://github.com/apache/jackrabbit/blob/e33c5bbe93b3858802cf8b16c28ddd2cc73405bd/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/RestoreTest.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/RestoreTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/RestoreTest.java?ref=e33c5bbe93b3858802cf8b16c28ddd2cc73405bd"
            }
        ],
        "bug_id": "jackrabbit_22",
        "parent": "https://github.com/apache/jackrabbit/commit/7974dc328bb4a64753967ea9f6b0eeb71b6d48ef",
        "message": "JCR-1476: Restore to base version throws NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@637108 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/7134e3f76dfd3008c0e36fd8bf6ce2eb774ebeea",
        "file": [
            {
                "patch": "@@ -52,13 +52,30 @@\n      */\n     private final Map pendingDocuments = new HashMap();\n \n+    /**\n+     * Flag that indicates whether this indexing queue had been\n+     * {@link #initialize(MultiIndex) initialized}.\n+     */\n+    private volatile boolean initialized = false;\n+\n     /**\n      * Creates an indexing queue.\n      *\n      * @param queueStore the store where to read the pending extraction jobs.\n      */\n-    IndexingQueue(IndexingQueueStore queueStore, MultiIndex index) {\n+    IndexingQueue(IndexingQueueStore queueStore) {\n         this.queueStore = queueStore;\n+    }\n+\n+    /**\n+     * Initializes the indexing queue.\n+     *\n+     * @param index the multi index this indexing queue belongs to.\n+     */\n+    void initialize(MultiIndex index) {\n+        if (initialized) {\n+            throw new IllegalStateException(\"already initialized\");\n+        }\n         String[] uuids = queueStore.getPending();\n         for (int i = 0; i < uuids.length; i++) {\n             try {\n@@ -78,6 +95,7 @@\n                 }\n             }\n         }\n+        initialized = true;\n     }\n \n     /**\n@@ -86,6 +104,7 @@\n      * @return the {@link Document}s that are finished.\n      */\n     public Document[] getFinishedDocuments() {\n+        checkInitialized();\n         List finished = new ArrayList();\n         synchronized (this) {\n             finished.addAll(pendingDocuments.values());\n@@ -113,6 +132,7 @@\n      *                     queue.\n      */\n     public synchronized Document removeDocument(String uuid) throws IOException {\n+        checkInitialized();\n         Document doc = (Document) pendingDocuments.remove(uuid);\n         if (doc != null) {\n             queueStore.removeUUID(uuid);\n@@ -133,6 +153,7 @@ public synchronized Document removeDocument(String uuid) throws IOException {\n      *                     queue.\n      */\n     public synchronized Document addDocument(Document doc) throws IOException {\n+        checkInitialized();\n         String uuid = doc.get(FieldNames.UUID);\n         Document existing = (Document) pendingDocuments.put(uuid, doc);\n         log.debug(\"added node {}. New size of indexing queue: {}\",\n@@ -151,6 +172,7 @@ public synchronized Document addDocument(Document doc) throws IOException {\n      * @throws IOException if an error occurs while closing this queue.\n      */\n     public synchronized void close() throws IOException {\n+        checkInitialized();\n         // go through pending documents and close readers\n         Iterator it = pendingDocuments.values().iterator();\n         while (it.hasNext()) {\n@@ -168,6 +190,17 @@ public synchronized void close() throws IOException {\n      *                     disk.\n      */\n     public synchronized void commit() throws IOException {\n+        checkInitialized();\n         queueStore.commit();\n     }\n+\n+    /**\n+     * Checks if this indexing queue is initialized and otherwise throws a\n+     * {@link IllegalStateException}.\n+     */\n+    private void checkInitialized() {\n+        if (!initialized) {\n+            throw new IllegalStateException(\"not initialized\");\n+        }\n+    }\n }",
                "additions": 34,
                "raw_url": "https://github.com/apache/jackrabbit/raw/7134e3f76dfd3008c0e36fd8bf6ce2eb774ebeea/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/IndexingQueue.java",
                "status": "modified",
                "changes": 35,
                "deletions": 1,
                "sha": "c20c3d9cce97a373639259c4b92088eb330c35dc",
                "blob_url": "https://github.com/apache/jackrabbit/blob/7134e3f76dfd3008c0e36fd8bf6ce2eb774ebeea/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/IndexingQueue.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/IndexingQueue.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/IndexingQueue.java?ref=7134e3f76dfd3008c0e36fd8bf6ce2eb774ebeea"
            },
            {
                "patch": "@@ -261,7 +261,7 @@\n         }\n \n         // initialize indexing queue\n-        this.indexingQueue = new IndexingQueue(store, this);\n+        this.indexingQueue = new IndexingQueue(store);\n \n         // open persistent indexes\n         for (int i = 0; i < indexNames.size(); i++) {\n@@ -298,6 +298,8 @@\n             reader.close();\n         }\n \n+        indexingQueue.initialize(this);\n+\n         redoLogApplied = redoLog.hasEntries();\n \n         // run recovery",
                "additions": 3,
                "raw_url": "https://github.com/apache/jackrabbit/raw/7134e3f76dfd3008c0e36fd8bf6ce2eb774ebeea/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/MultiIndex.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "d0ecec3b7b8f2ec79c28eb381bbc2ae24b1a223c",
                "blob_url": "https://github.com/apache/jackrabbit/blob/7134e3f76dfd3008c0e36fd8bf6ce2eb774ebeea/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/MultiIndex.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/MultiIndex.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/MultiIndex.java?ref=7134e3f76dfd3008c0e36fd8bf6ce2eb774ebeea"
            }
        ],
        "bug_id": "jackrabbit_23",
        "parent": "https://github.com/apache/jackrabbit/commit/87ebddcf0ecdec7b8c7864c9bd1d4427f827b04c",
        "message": "JCR-1459: NullPointerException on startup if IndexingQueue has pending nodes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@634632 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/1d2a0a63f781368aefdc003197d95f4bebf8f353",
        "file": [
            {
                "patch": "@@ -23,6 +23,7 @@\n import javax.jcr.Node;\n import javax.jcr.RepositoryException;\n import javax.jcr.Session;\n+import javax.jcr.InvalidItemStateException;\n import javax.jcr.version.Version;\n import javax.transaction.UserTransaction;\n \n@@ -66,6 +67,8 @@ public void execute(Session session, Node test)\n                         n.addMixin(mixVersionable);\n                         session.save();\n                         utx.commit();\n+                    } catch (InvalidItemStateException e) {\n+                        // ignore\n                     } catch (Exception e) {\n                         final Throwable deepCause = getLevel2Cause(e);\n                         if (deepCause != null && deepCause instanceof StaleItemStateException) {",
                "additions": 3,
                "raw_url": "https://github.com/apache/jackrabbit/raw/1d2a0a63f781368aefdc003197d95f4bebf8f353/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ConcurrentVersioningWithTransactionsTest.java",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "ab73e9a51f1fa070abfc6e384145965dbee9473f",
                "blob_url": "https://github.com/apache/jackrabbit/blob/1d2a0a63f781368aefdc003197d95f4bebf8f353/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ConcurrentVersioningWithTransactionsTest.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ConcurrentVersioningWithTransactionsTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ConcurrentVersioningWithTransactionsTest.java?ref=1d2a0a63f781368aefdc003197d95f4bebf8f353"
            }
        ],
        "bug_id": "jackrabbit_24",
        "parent": "https://github.com/apache/jackrabbit/commit/f0cdc4af34f1515f96e98bfa297b15dfc2b14d58",
        "message": "JCR-1275: NullPointerException in AbstractVersionManager.createVersionHistory()\n- fix test case\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@633834 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/ee23159b21c37c68fd4092048f920504a7c894dd",
        "file": [
            {
                "patch": "@@ -36,6 +36,7 @@\n import javax.jcr.RepositoryException;\n import javax.jcr.Session;\n import javax.jcr.Value;\n+import javax.jcr.InvalidItemStateException;\n import javax.jcr.version.VersionException;\n import javax.jcr.version.VersionHistory;\n \n@@ -308,6 +309,9 @@ InternalVersionHistory createVersionHistory(NodeState node)\n                     root.store();\n                 }\n                 root = root.getNode(name, 1);\n+                if (root == null) {\n+                    throw new InvalidItemStateException();\n+                }\n             }\n             Name historyNodeName = NameFactoryImpl.getInstance().create(Name.NS_DEFAULT_URI, uuid);\n             if (root.hasNode(historyNodeName)) {",
                "additions": 4,
                "raw_url": "https://github.com/apache/jackrabbit/raw/ee23159b21c37c68fd4092048f920504a7c894dd/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/AbstractVersionManager.java",
                "status": "modified",
                "changes": 4,
                "deletions": 0,
                "sha": "0be945d69c089ea4b899f6d08e044fdb04065425",
                "blob_url": "https://github.com/apache/jackrabbit/blob/ee23159b21c37c68fd4092048f920504a7c894dd/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/AbstractVersionManager.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/AbstractVersionManager.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/AbstractVersionManager.java?ref=ee23159b21c37c68fd4092048f920504a7c894dd"
            }
        ],
        "bug_id": "jackrabbit_25",
        "parent": "https://github.com/apache/jackrabbit/commit/15a1d41be14973e59b0c252ba2fc6167b122e143",
        "message": "JCR-1275: NullPointerException in AbstractVersionManager.createVersionHistory()\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@633405 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/02b5bdb778a735dd0fa3fd7b2e502524a6dce837",
        "file": [
            {
                "patch": "@@ -18,9 +18,6 @@\n \n import org.apache.jackrabbit.core.ItemId;\n \n-import java.util.Set;\n-import java.util.Collection;\n-\n /**\n  * An <code>ItemStateCache</code> maintains a cache of <code>ItemState</code>\n  * instances.\n@@ -49,6 +46,13 @@\n      */\n     ItemState retrieve(ItemId id);\n \n+    /**\n+     * Returns all the cached item states.\n+     *\n+     * @return newly allocated item state array\n+     */\n+    ItemState[] retrieveAll();\n+\n     /**\n      * Stores the specified <code>ItemState</code> object in the map\n      * using its <code>ItemId</code> as the key.\n@@ -78,29 +82,6 @@\n      */\n     boolean isEmpty();\n \n-    /**\n-     * Returns the number of entries in this cache.\n-     *\n-     * @return number of entries in this cache.\n-     */\n-    int size();\n-\n-    /**\n-     * Returns an unmodifiable set view of the keys (i.e. <code>ItemId</code>\n-     * objects) of the cached entries.\n-     *\n-     * @return a set view of the keys of the cached entries.\n-     */\n-    Set keySet();\n-\n-    /**\n-     * Returns an unmodifiable collection view of the values (i.e.\n-     * <code>ItemState</code> objects) contained in this cache.\n-     *\n-     * @return a collection view of the values contained in this cache.\n-     */\n-    Collection values();\n-\n     /**\n      * Informs the cache that the item was modified and the cache might need to\n      * recalc the items caching weight.",
                "additions": 7,
                "raw_url": "https://github.com/apache/jackrabbit/raw/02b5bdb778a735dd0fa3fd7b2e502524a6dce837/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ItemStateCache.java",
                "status": "modified",
                "changes": 33,
                "deletions": 26,
                "sha": "08a091076c83cf848fd0c7f55452753c4b39541e",
                "blob_url": "https://github.com/apache/jackrabbit/blob/02b5bdb778a735dd0fa3fd7b2e502524a6dce837/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ItemStateCache.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ItemStateCache.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ItemStateCache.java?ref=02b5bdb778a735dd0fa3fd7b2e502524a6dce837"
            },
            {
                "patch": "@@ -21,9 +21,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.util.Set;\n-import java.util.Collections;\n-import java.util.Collection;\n import java.io.PrintStream;\n \n /**\n@@ -42,6 +39,7 @@\n  * collector if they are thus rendered weakly reachable.\n  * </li>\n  * </ul>\n+ * This implementation of ItemStateCache is thread-safe.\n  */\n public class ItemStateReferenceCache implements ItemStateCache, Dumpable {\n \n@@ -86,15 +84,15 @@ public ItemStateReferenceCache(ItemStateCache cache) {\n     /**\n      * {@inheritDoc}\n      */\n-    public boolean isCached(ItemId id) {\n+    public synchronized boolean isCached(ItemId id) {\n         // check primary cache\n         return refs.contains(id);\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n-    public ItemState retrieve(ItemId id) {\n+    public synchronized ItemState retrieve(ItemId id) {\n         // fake call to update stats of secondary cache\n         cache.retrieve(id);\n \n@@ -105,7 +103,15 @@ public ItemState retrieve(ItemId id) {\n     /**\n      * {@inheritDoc}\n      */\n-    public void cache(ItemState state) {\n+    public synchronized ItemState[] retrieveAll() {\n+        // values of primary cache\n+        return (ItemState[]) refs.values().toArray(new ItemState[refs.size()]);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public synchronized void cache(ItemState state) {\n         ItemId id = state.getId();\n         if (refs.contains(id)) {\n             log.warn(\"overwriting cached entry \" + id);\n@@ -120,7 +126,7 @@ public void cache(ItemState state) {\n     /**\n      * {@inheritDoc}\n      */\n-    public void evict(ItemId id) {\n+    public synchronized void evict(ItemId id) {\n         // fake call to update stats of secondary cache\n         cache.evict(id);\n         // remove from primary cache\n@@ -130,14 +136,14 @@ public void evict(ItemId id) {\n     /**\n      * {@inheritDoc}\n      */\n-    public void dispose() {\n+    public synchronized void dispose() {\n         cache.dispose();\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n-    public void evictAll() {\n+    public synchronized void evictAll() {\n         // fake call to update stats of secondary cache\n         cache.evictAll();\n         // remove all weak references from primary cache\n@@ -147,48 +153,24 @@ public void evictAll() {\n     /**\n      * {@inheritDoc}\n      */\n-    public void update(ItemId id) {\n+    public synchronized void update(ItemId id) {\n         // delegate\n         cache.update(id);\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n-    public boolean isEmpty() {\n+    public synchronized boolean isEmpty() {\n         // check primary cache\n         return refs.isEmpty();\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n-    public int size() {\n-        // size of primary cache\n-        return refs.size();\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    public Set keySet() {\n-        // keys of primary cache\n-        return Collections.unmodifiableSet(refs.keySet());\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    public Collection values() {\n-        // values of primary cache\n-        return Collections.unmodifiableCollection(refs.values());\n-    }\n-\n     //-------------------------------------------------------------< Dumpable >\n     /**\n      * {@inheritDoc}\n      */\n-    public void dump(PrintStream ps) {\n+    public synchronized void dump(PrintStream ps) {\n         ps.println(\"ItemStateReferenceCache (\" + this + \")\");\n         ps.println();\n         ps.print(\"[refs] \");",
                "additions": 18,
                "raw_url": "https://github.com/apache/jackrabbit/raw/02b5bdb778a735dd0fa3fd7b2e502524a6dce837/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ItemStateReferenceCache.java",
                "status": "modified",
                "changes": 54,
                "deletions": 36,
                "sha": "638f46f528daa5da262bdd0ad04a1374b6e28d6c",
                "blob_url": "https://github.com/apache/jackrabbit/blob/02b5bdb778a735dd0fa3fd7b2e502524a6dce837/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ItemStateReferenceCache.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ItemStateReferenceCache.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ItemStateReferenceCache.java?ref=02b5bdb778a735dd0fa3fd7b2e502524a6dce837"
            },
            {
                "patch": "@@ -35,7 +35,7 @@\n      * cache of weak references to ItemState objects issued by this\n      * ItemStateManager\n      */\n-    private final ItemStateReferenceCache cache;\n+    private final ItemStateCache cache;\n \n     /**\n      * Shared item state manager\n@@ -140,7 +140,7 @@ public ItemState getItemState(ItemId id)\n         }\n \n         // check cache. synchronized to ensure an entry is not created twice.\n-        synchronized (cache) {\n+        synchronized (this) {\n             state = cache.retrieve(id);\n             if (state == null) {\n                 // regular behaviour\n@@ -333,13 +333,9 @@ public void dispose() {\n \n         // this LocalItemStateManager instance is no longer needed;\n         // cached item states can now be safely discarded\n-\n-        // JCR-798: copy cached item states to array\n-        // to avoid ConcurrentModificationException\n-        ItemState[] isa = (ItemState[]) cache.values().toArray(\n-                new ItemState[cache.size()]);\n-        for (int i = 0; i < isa.length; i++) {\n-            ItemState state = isa[i];\n+        ItemState[] states = cache.retrieveAll();\n+        for (int i = 0; i < states.length; i++) {\n+            ItemState state = states[i];\n             if (state != null) {\n                 dispatcher.notifyStateDiscarded(state);\n                 // let the item state know that it has been disposed",
                "additions": 5,
                "raw_url": "https://github.com/apache/jackrabbit/raw/02b5bdb778a735dd0fa3fd7b2e502524a6dce837/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
                "status": "modified",
                "changes": 14,
                "deletions": 9,
                "sha": "4c99233d48c3ea2fede4e7d631b8dc62fa12cd73",
                "blob_url": "https://github.com/apache/jackrabbit/blob/02b5bdb778a735dd0fa3fd7b2e502524a6dce837/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java?ref=02b5bdb778a735dd0fa3fd7b2e502524a6dce837"
            },
            {
                "patch": "@@ -16,17 +16,13 @@\n  */\n package org.apache.jackrabbit.core.state;\n \n+import java.util.Iterator;\n+\n import org.apache.commons.collections.map.LinkedMap;\n import org.apache.jackrabbit.core.ItemId;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.util.Set;\n-import java.util.Collections;\n-import java.util.Collection;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-\n /**\n  * An <code>ItemStateCache</code> implementation that internally uses a\n  * {@link LinkedMap} to maintain a cache of <code>ItemState</code> objects. The\n@@ -109,6 +105,15 @@ public ItemState retrieve(ItemId id) {\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    public ItemState[] retrieveAll() {\n+        synchronized (cache) {\n+            return (ItemState[]) cache.values().toArray(new ItemState[cache.size()]);\n+        }\n+    }\n+\n     /**\n      * {@inheritDoc}\n      */\n@@ -188,39 +193,6 @@ public boolean isEmpty() {\n         }\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n-    public int size() {\n-        synchronized (cache) {\n-            return cache.size();\n-        }\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    public Set keySet() {\n-        synchronized (cache) {\n-            return Collections.unmodifiableSet(cache.keySet());\n-        }\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    public Collection values() {\n-        synchronized (cache) {\n-            ArrayList list = new ArrayList(cache.size());\n-            Iterator iter = cache.values().iterator();\n-            while (iter.hasNext()) {\n-                Entry entry = (Entry) iter.next();\n-                list.add(entry.state);\n-            }\n-            return list;\n-        }\n-    }\n-\n     private void touch() {\n         accessCount++;\n         if ((accessCount % CacheAccessListener.ACCESS_INTERVAL) == 0) {",
                "additions": 11,
                "raw_url": "https://github.com/apache/jackrabbit/raw/02b5bdb778a735dd0fa3fd7b2e502524a6dce837/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/MLRUItemStateCache.java",
                "status": "modified",
                "changes": 50,
                "deletions": 39,
                "sha": "3e3600ced37863bb98d903fd91828f837766490b",
                "blob_url": "https://github.com/apache/jackrabbit/blob/02b5bdb778a735dd0fa3fd7b2e502524a6dce837/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/MLRUItemStateCache.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/MLRUItemStateCache.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/MLRUItemStateCache.java?ref=02b5bdb778a735dd0fa3fd7b2e502524a6dce837"
            }
        ],
        "bug_id": "jackrabbit_26",
        "parent": "https://github.com/apache/jackrabbit/commit/5f705915b9c8562e1b57f475fcc1e469c2ec0321",
        "message": "JCR-1271: NullPointerException when iterating over properties\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@605510 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/5f705915b9c8562e1b57f475fcc1e469c2ec0321",
        "file": [
            {
                "patch": "@@ -150,26 +150,28 @@ protected ItemState(ItemState overlayedState, int initialStatus, boolean isTrans\n     /**\n      * Copy state information from another state into this state\n      * @param state source state information\n+     * @param syncModCount if the modCount should be synchronized.\n      */\n-    protected abstract void copy(ItemState state);\n+    protected abstract void copy(ItemState state, boolean syncModCount);\n \n     /**\n      * Pull state information from overlayed state.\n      */\n     void pull() {\n-        if (overlayedState != null) {\n-            copy(overlayedState);\n+        ItemState state = overlayedState;\n+        if (state != null) {\n             // sync modification count\n-            modCount = overlayedState.getModCount();\n+            copy(state, true);\n         }\n     }\n \n     /**\n      * Push state information into overlayed state.\n      */\n     void push() {\n-        if (overlayedState != null) {\n-            overlayedState.copy(this);\n+        ItemState state = overlayedState;\n+        if (state != null) {\n+            state.copy(this, false);\n         }\n     }\n ",
                "additions": 8,
                "raw_url": "https://github.com/apache/jackrabbit/raw/5f705915b9c8562e1b57f475fcc1e469c2ec0321/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ItemState.java",
                "status": "modified",
                "changes": 14,
                "deletions": 6,
                "sha": "3a0c20f72775a104763950ec8393a6a3ece3bf12",
                "blob_url": "https://github.com/apache/jackrabbit/blob/5f705915b9c8562e1b57f475fcc1e469c2ec0321/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ItemState.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ItemState.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ItemState.java?ref=5f705915b9c8562e1b57f475fcc1e469c2ec0321"
            },
            {
                "patch": "@@ -136,7 +136,7 @@ public NodeState(NodeId id, Name nodeTypeName, NodeId parentId,\n     /**\n      * {@inheritDoc}\n      */\n-    protected synchronized void copy(ItemState state) {\n+    protected synchronized void copy(ItemState state, boolean syncModCount) {\n         synchronized (state) {\n             NodeState nodeState = (NodeState) state;\n             id = nodeState.id;\n@@ -150,6 +150,9 @@ protected synchronized void copy(ItemState state) {\n             childNodeEntries = nodeState.childNodeEntries;\n             sharedChildNodeEntries = true;\n             nodeState.sharedChildNodeEntries = true;\n+            if (syncModCount) {\n+                setModCount(state.getModCount());\n+            }\n         }\n     }\n ",
                "additions": 4,
                "raw_url": "https://github.com/apache/jackrabbit/raw/5f705915b9c8562e1b57f475fcc1e469c2ec0321/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/NodeState.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "169e3fcec80303d4af3d059da80d79a191bd1e16",
                "blob_url": "https://github.com/apache/jackrabbit/blob/5f705915b9c8562e1b57f475fcc1e469c2ec0321/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/NodeState.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/NodeState.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/NodeState.java?ref=5f705915b9c8562e1b57f475fcc1e469c2ec0321"
            },
            {
                "patch": "@@ -103,14 +103,17 @@ public PropertyState(PropertyId id, int initialStatus, boolean isTransient) {\n     /**\n      * {@inheritDoc}\n      */\n-    protected synchronized void copy(ItemState state) {\n+    protected synchronized void copy(ItemState state, boolean syncModCount) {\n         synchronized (state) {\n             PropertyState propState = (PropertyState) state;\n             id = propState.id;\n             type = propState.type;\n             defId = propState.defId;\n             values = propState.values;\n             multiValued = propState.multiValued;\n+            if (syncModCount) {\n+                setModCount(state.getModCount());\n+            }\n         }\n     }\n ",
                "additions": 4,
                "raw_url": "https://github.com/apache/jackrabbit/raw/5f705915b9c8562e1b57f475fcc1e469c2ec0321/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/PropertyState.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "5cc5e281b10208c71b65f676c7a572513cfaefd4",
                "blob_url": "https://github.com/apache/jackrabbit/blob/5f705915b9c8562e1b57f475fcc1e469c2ec0321/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/PropertyState.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/PropertyState.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/PropertyState.java?ref=5f705915b9c8562e1b57f475fcc1e469c2ec0321"
            },
            {
                "patch": "@@ -754,15 +754,15 @@ public void cancel() {\n                 for (Iterator iter = shared.modifiedStates(); iter.hasNext();) {\n                     ItemState state = (ItemState) iter.next();\n                     try {\n-                        state.copy(loadItemState(state.getId()));\n+                        state.copy(loadItemState(state.getId()), false);\n                     } catch (ItemStateException e) {\n                         state.discard();\n                     }\n                 }\n                 for (Iterator iter = shared.deletedStates(); iter.hasNext();) {\n                     ItemState state = (ItemState) iter.next();\n                     try {\n-                        state.copy(loadItemState(state.getId()));\n+                        state.copy(loadItemState(state.getId()), false);\n                     } catch (ItemStateException e) {\n                         state.discard();\n                     }\n@@ -925,8 +925,7 @@ protected void doExternalUpdate(ChangeLog external) {\n             if (state != null) {\n                 try {\n                     ItemState currentState = loadItemState(state.getId());\n-                    state.copy(currentState);\n-                    state.setModCount(currentState.getModCount());\n+                    state.copy(currentState, true);\n                     shared.modified(state);\n                 } catch (NoSuchItemStateException e) {\n                     // This is likely to happen because a subsequent delete",
                "additions": 3,
                "raw_url": "https://github.com/apache/jackrabbit/raw/5f705915b9c8562e1b57f475fcc1e469c2ec0321/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
                "status": "modified",
                "changes": 7,
                "deletions": 4,
                "sha": "e33c71fa3355161e90c032211a0a6f81d1132589",
                "blob_url": "https://github.com/apache/jackrabbit/blob/5f705915b9c8562e1b57f475fcc1e469c2ec0321/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java?ref=5f705915b9c8562e1b57f475fcc1e469c2ec0321"
            }
        ],
        "bug_id": "jackrabbit_27",
        "parent": "https://github.com/apache/jackrabbit/commit/8f71e1f8b81bf1e85b8bd89a3c7d3f37875d152c",
        "message": "JCR-1148: NullPointerException in ItemState\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@605509 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/3db2894b81e773d34562c8c0284905db77644ecc",
        "file": [
            {
                "patch": "@@ -37,9 +37,9 @@\n  * @author <a href='mailto:the_mindstorm[at]evolva[dot]ro'>Alexandru Popescu</a>\n  */\n public class ClassDescriptor {\n-\t\n+\n \tprivate static final Log log = LogFactory.getLog(ClassDescriptor.class);\n-\t\n+\n     private static final String NODETYPE_PER_HIERARCHY = \"nodetypeperhierarchy\";\n     private static final String NODETYPE_PER_CONCRETECLASS = \"nodetypeperconcreteclass\";\n \n@@ -55,22 +55,22 @@\n     private FieldDescriptor pathFieldDescriptor;\n     private FieldDescriptor uuidFieldDescriptor;\n \n-    private Map fieldDescriptors = new HashMap();    \n-    private Map beanDescriptors = new HashMap();        \n+    private Map fieldDescriptors = new HashMap();\n+    private Map beanDescriptors = new HashMap();\n     private Map collectionDescriptors = new HashMap();\n-        \n+\n     private Map fieldNames = new HashMap();\n \n     private String superClassName;\n-    private String extendsStrategy;    \n-    private boolean isAbstract = false;    \n+    private String extendsStrategy;\n+    private boolean isAbstract = false;\n     private boolean hasDescendant = false;\n-    private boolean hasDiscriminator = true; \n-   \n-       \n+    private boolean hasDiscriminator = true;\n+\n+\n     private boolean isInterface=false;\n     private List interfaces = new ArrayList();\n-    \n+\n     public void setAbstract(boolean flag) {\n         this.isAbstract = flag;\n     }\n@@ -82,25 +82,25 @@ public boolean isAbstract() {\n     public void setInterface(boolean flag) {\n     \t   this.isInterface = flag;\n     }\n-       \n+\n     public boolean isInterface() {\n     \t    return isInterface;\n     }\n-    \n+\n     public boolean hasInterfaces()\n     {\n     \t   return this.interfaces.size() > 0;\n     }\n \n     public void setDiscriminator(boolean flag)\n     {\n-        this.hasDiscriminator = flag;\t\n+        this.hasDiscriminator = flag;\n     }\n-    \n-    public boolean hasDiscriminator() {        \n+\n+    public boolean hasDiscriminator() {\n  \t   return this.hasDiscriminator;\n- }    \n-    \n+ }\n+\n     public boolean usesNodeTypePerHierarchyStrategy() {\n         return NODETYPE_PER_HIERARCHY.equals(this.extendsStrategy);\n     }\n@@ -118,7 +118,7 @@ public String getClassName() {\n     /**\n      * @param className The className to set.\n      */\n-    public void setClassName(String className) {    \t   \n+    public void setClassName(String className) {\n         this.className = className;\n     }\n \n@@ -161,9 +161,9 @@ public void addFieldDescriptor(FieldDescriptor fieldDescriptor) {\n \n     public void addImplementDescriptor(ImplementDescriptor implementDescriptor)\n     {\n-        interfaces.add(implementDescriptor.getInterfaceName());\t\n+        interfaces.add(implementDescriptor.getInterfaceName());\n     }\n-    \n+\n     /**\n      * Get the FieldDescriptor to used for a specific java bean attribute\n      * @param fieldName The java bean attribute name\n@@ -273,13 +273,13 @@ public FieldDescriptor getUuidFieldDescriptor() {\n         }\n \n         return null;\n-    }    \n+    }\n \n     /**\n      * Check if this class has an ID\n      * @return true if the class has an ID\n      */\n-    public boolean hasIdField() {        \n+    public boolean hasIdField() {\n         return (this.idFieldDescriptor != null && ! this.idFieldDescriptor.equals(\"\"));\n     }\n \n@@ -292,12 +292,12 @@ public String getJcrName(String fieldName) {\n         String jcrName =  (String) this.fieldNames.get(fieldName);\n         if (this.isInterface && jcrName == null)\n         {\n-            return this.getJcrNameFromDescendants(this, fieldName);          \n+            return this.getJcrNameFromDescendants(this, fieldName);\n         }\n-        \n+\n         return jcrName;\n     }\n-    \n+\n     private String getJcrNameFromDescendants(ClassDescriptor classDescriptor, String fieldName )\n     {\n         Iterator  descendants = classDescriptor.getDescendantClassDescriptors().iterator();\n@@ -313,9 +313,9 @@ private String getJcrNameFromDescendants(ClassDescriptor classDescriptor, String\n         }\n         return null;\n \n-    \t\n+\n     }\n-    \n+\n     public Map getFieldNames() {\n         return this.fieldNames;\n     }\n@@ -338,7 +338,7 @@ public void setJcrSuperTypes(String superTypes) {\n     \t{\n     \t   this.jcrSuperTypes = superTypes;\n     \t}\n-    \t\n+\n     }\n \n     /**\n@@ -360,7 +360,7 @@ public void setJcrMixinTypes(String[] mixinTypes) {\n             jcrMixinTypes = mixinTypes[0].split(\" *, *\");\n         }\n     }\n-    public void setJcrMixinTypes(String mixinTypes) {                \n+    public void setJcrMixinTypes(String mixinTypes) {\n     \tif (mixinTypes != null && ! mixinTypes.equals(\"\"))\n     \t{\n     \t    jcrMixinTypes = mixinTypes.split(\" *, *\");\n@@ -384,7 +384,7 @@ public void setMappingDescriptor(MappingDescriptor mappingDescriptor) {\n      * Revisit information in this descriptor and fills in more.\n      */\n     public void afterPropertiesSet() {\n-        validateClassName();   \n+        validateClassName();\n         lookupSuperDescriptor();\n         lookupInheritanceSettings();\n \n@@ -393,23 +393,23 @@ public void afterPropertiesSet() {\n \tprivate void validateClassName() {\n \t\ttry {\n             ReflectionUtils.forName(this.className);\n-\t\t} catch (JcrMappingException e) {\t\t\t\n+\t\t} catch (JcrMappingException e) {\n \t\t\t throw new JcrMappingException(\"Class used in descriptor not found : \" + className);\n \t\t}\n \t}\n \n-\t\n+\n \tprivate void lookupSuperDescriptor() {\n         if (null != superClassDescriptor) {\n             this.hasDiscriminator = superClassDescriptor.hasDiscriminator();\n             if (! this.isInterface)\n             {\n                 this.fieldDescriptors = mergeFields(this.fieldDescriptors, this.superClassDescriptor.getFieldDescriptors());\n                 this.beanDescriptors = mergeBeans(this.beanDescriptors, this.superClassDescriptor.getBeanDescriptors());\n-                this.collectionDescriptors = mergeCollections(this.collectionDescriptors, this.superClassDescriptor.getCollectionDescriptors());            \n+                this.collectionDescriptors = mergeCollections(this.collectionDescriptors, this.superClassDescriptor.getCollectionDescriptors());\n                 this.fieldNames.putAll(this.superClassDescriptor.getFieldNames());\n             }\n-        \n+\n         }\n     }\n \n@@ -423,7 +423,7 @@ private void lookupInheritanceSettings() {\n             }\n         }\n     }\n-\t\n+\n \n     /**\n      * @return return the super class name if defined in mapping, or\n@@ -449,29 +449,29 @@ public void setExtend(String className) {\n     public ClassDescriptor getSuperClassDescriptor() {\n         return superClassDescriptor;\n     }\n-    \n+\n     public Collection getDescendantClassDescriptors() {\n     \t     return this.descendantClassDescriptors;\n     }\n-    \n+\n     /**\n      * If the node type per concrete class strategy is used, we need to find a descendant class descriptor assigned to a node type\n      * This method is not used in other situation.\n-     * \n+     *\n      * @param nodeType the node type for which the classdescriptor is required\n      * @return the classdescriptor found or null\n-     * \n-     * @todo : maybe we have to review this implementation to have better performance. \n+     *\n+     * @todo : maybe we have to review this implementation to have better performance.\n      */\n     public ClassDescriptor getDescendantClassDescriptor(String nodeType) {\n         Iterator iterator = this.descendantClassDescriptors.iterator();\n         while (iterator.hasNext()) {\n             ClassDescriptor descendantClassDescriptor = (ClassDescriptor) iterator.next();\n-  \n-            if (descendantClassDescriptor.getJcrType().equals(nodeType)) {\n+\n+            if (nodeType.equals(descendantClassDescriptor.getJcrType())) {\n                 return descendantClassDescriptor;\n             }\n-  \n+\n             if (descendantClassDescriptor.hasDescendants()) {\n                 ClassDescriptor classDescriptor = descendantClassDescriptor.getDescendantClassDescriptor(nodeType);\n                 if (classDescriptor != null) {\n@@ -481,12 +481,12 @@ public ClassDescriptor getDescendantClassDescriptor(String nodeType) {\n         }\n         return null;\n     }\n-    \n+\n     public void addDescendantClassDescriptor(ClassDescriptor classDescriptor) {\n     \t     this.descendantClassDescriptors.add(classDescriptor);\n     \t     this.hasDescendant = true;\n     }\n-    \n+\n     public boolean hasDescendants() {\n     \t    return this.hasDescendant;\n     }\n@@ -498,13 +498,13 @@ public void setSuperClassDescriptor(ClassDescriptor superClassDescriptor) {\n         this.superClassDescriptor= superClassDescriptor;\n         superClassDescriptor.addDescendantClassDescriptor(this);\n     }\n-   \n+\n \n     public Collection getImplements()\n     {\n     \t    return interfaces;\n     }\n-    \n+\n     private Map mergeFields(Map existing, Collection superSource) {\n         if (null == superSource) {\n             return existing;\n@@ -524,7 +524,7 @@ private Map mergeFields(Map existing, Collection superSource) {\n         return merged;\n     }\n \n-    \n+\n     private Map mergeBeans(Map existing, Collection superSource) {\n         if (null == superSource) {\n             return existing;\n@@ -543,7 +543,7 @@ private Map mergeBeans(Map existing, Collection superSource) {\n \n         return merged;\n     }\n-    \n+\n     private Map mergeCollections(Map existing, Collection superSource) {\n         if (null == superSource) {\n             return existing;\n@@ -558,10 +558,10 @@ private Map mergeCollections(Map existing, Collection superSource) {\n         }\n \n         return merged;\n-    }    \n-    \n-       \n-    \n+    }\n+\n+\n+\n \tpublic String toString() {\n \t\treturn \"Class Descriptor : \" +  this.getClassName();\n \t}",
                "additions": 54,
                "raw_url": "https://github.com/apache/jackrabbit/raw/3db2894b81e773d34562c8c0284905db77644ecc/contrib/jackrabbit-jcr-mapping/jcr-mapping/src/main/java/org/apache/jackrabbit/ocm/mapper/model/ClassDescriptor.java",
                "status": "modified",
                "changes": 108,
                "deletions": 54,
                "sha": "0bc319603dcc0e680086731f22d25c67c48cbb7c",
                "blob_url": "https://github.com/apache/jackrabbit/blob/3db2894b81e773d34562c8c0284905db77644ecc/contrib/jackrabbit-jcr-mapping/jcr-mapping/src/main/java/org/apache/jackrabbit/ocm/mapper/model/ClassDescriptor.java",
                "filename": "contrib/jackrabbit-jcr-mapping/jcr-mapping/src/main/java/org/apache/jackrabbit/ocm/mapper/model/ClassDescriptor.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/contrib/jackrabbit-jcr-mapping/jcr-mapping/src/main/java/org/apache/jackrabbit/ocm/mapper/model/ClassDescriptor.java?ref=3db2894b81e773d34562c8c0284905db77644ecc"
            }
        ],
        "bug_id": "jackrabbit_28",
        "parent": "https://github.com/apache/jackrabbit/commit/58f5f76d66cc2acd8dd7e56f197986e99ed30658",
        "message": "JCR-1143 NullPointerException in ClassDescriptor\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@579257 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/3ddabf943c6d1f4352878de17cf3a1bf6a56b795",
        "file": [
            {
                "patch": "@@ -437,7 +437,9 @@ public String getExtend() {\n      * @param className\n      */\n     public void setExtend(String className) {\n-        if (className.equals(\"\")) className = null;\n+        if (className != null && className.length() == 0) {\n+            className = null;\n+        }\n     \tthis.superClassName = className;\n     }\n ",
                "additions": 3,
                "raw_url": "https://github.com/apache/jackrabbit/raw/3ddabf943c6d1f4352878de17cf3a1bf6a56b795/contrib/jackrabbit-jcr-mapping/jcr-mapping/src/main/java/org/apache/jackrabbit/ocm/mapper/model/ClassDescriptor.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "86939ec851719d7213b44f730c4d1b11125dde3a",
                "blob_url": "https://github.com/apache/jackrabbit/blob/3ddabf943c6d1f4352878de17cf3a1bf6a56b795/contrib/jackrabbit-jcr-mapping/jcr-mapping/src/main/java/org/apache/jackrabbit/ocm/mapper/model/ClassDescriptor.java",
                "filename": "contrib/jackrabbit-jcr-mapping/jcr-mapping/src/main/java/org/apache/jackrabbit/ocm/mapper/model/ClassDescriptor.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/contrib/jackrabbit-jcr-mapping/jcr-mapping/src/main/java/org/apache/jackrabbit/ocm/mapper/model/ClassDescriptor.java?ref=3ddabf943c6d1f4352878de17cf3a1bf6a56b795"
            }
        ],
        "bug_id": "jackrabbit_29",
        "parent": "https://github.com/apache/jackrabbit/commit/4443aca0b7dc80849a35ff8aedece94e40a06ec8",
        "message": "Prevent NullPointerException in setExtend if className is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@575640 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/27142fa4eb98e19e7c386e412d5535c0977f3044",
        "file": [
            {
                "patch": "@@ -85,14 +85,14 @@ public static final SerialValueFactory getInstance() {\n     /**\n      * Utility method for decorating a value. Note that the contents of the\n      * original values will only be copied when the decorators are serialized.\n+     * Null referenced and already serializable values are passed as-is.\n      *\n-     * @param value the value to be decorated\n-     * @return the decorated value\n+     * @param value the value to be decorated, or <code>null</code>\n+     * @return the decorated value, or <code>null</code>\n      */\n     public static Value makeSerialValue(Value value) {\n-        // if the value is already serializable, just return it\n-        // - or should we test for SerialValue ??\n-        if (value instanceof SerialValue) {\n+        // if the value is null or already serializable, just return it\n+        if (value == null || value instanceof SerialValue) {\n             return value;\n         }\n \n@@ -224,7 +224,7 @@ protected NameValue createNameValue(String value)\n      * @throws ValueFormatException if the string is not a synthactically\n      *      correct JCR path.\n      */\n-    protected PathValue createPathValue(String value) \n+    protected PathValue createPathValue(String value)\n             throws ValueFormatException {\n         return new PathValue(value);\n     }\n@@ -241,7 +241,7 @@ protected PathValue createPathValue(String value)\n      * @throws ValueFormatException if the string is not a synthactically\n      *      correct JCR reference.\n      */\n-    protected ReferenceValue createReferenceValue(String value) \n+    protected ReferenceValue createReferenceValue(String value)\n             throws ValueFormatException {\n         return new ReferenceValue(value);\n     }",
                "additions": 7,
                "raw_url": "https://github.com/apache/jackrabbit/raw/27142fa4eb98e19e7c386e412d5535c0977f3044/jackrabbit-jcr-rmi/src/main/java/org/apache/jackrabbit/rmi/value/SerialValueFactory.java",
                "status": "modified",
                "changes": 14,
                "deletions": 7,
                "sha": "a416dbd0cb874cdf7fe45dc83f797161b878b6e9",
                "blob_url": "https://github.com/apache/jackrabbit/blob/27142fa4eb98e19e7c386e412d5535c0977f3044/jackrabbit-jcr-rmi/src/main/java/org/apache/jackrabbit/rmi/value/SerialValueFactory.java",
                "filename": "jackrabbit-jcr-rmi/src/main/java/org/apache/jackrabbit/rmi/value/SerialValueFactory.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr-rmi/src/main/java/org/apache/jackrabbit/rmi/value/SerialValueFactory.java?ref=27142fa4eb98e19e7c386e412d5535c0977f3044"
            }
        ],
        "bug_id": "jackrabbit_30",
        "parent": "https://github.com/apache/jackrabbit/commit/6002dd38ec496ee61c5376aedbe00b25e8bbfd40",
        "message": "JCR-681: Avoid NullPointerExceptions in makeSerialValue()\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@488157 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/c2c07e57d47ea0ae966fe14e04ef49d3418b502b",
        "file": [
            {
                "patch": "@@ -668,6 +668,9 @@ public void collectTransientStates(Set transientStates) {\n      */\n     public synchronized boolean hasPropertyName(QName propName) {\n         PropertyReference ref = (PropertyReference) properties.get(propName);\n+        if (ref == null) {\n+            return false;\n+        }\n         if (ref.isResolved()) {\n             try {\n                 return ref.getPropertyState().isValid();",
                "additions": 3,
                "raw_url": "https://github.com/apache/jackrabbit/raw/c2c07e57d47ea0ae966fe14e04ef49d3418b502b/contrib/spi/jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/state/NodeState.java",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "6653e22e079038691b0e80df8a478aa4807929d4",
                "blob_url": "https://github.com/apache/jackrabbit/blob/c2c07e57d47ea0ae966fe14e04ef49d3418b502b/contrib/spi/jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/state/NodeState.java",
                "filename": "contrib/spi/jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/state/NodeState.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/contrib/spi/jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/state/NodeState.java?ref=c2c07e57d47ea0ae966fe14e04ef49d3418b502b"
            }
        ],
        "bug_id": "jackrabbit_31",
        "parent": "https://github.com/apache/jackrabbit/commit/e797c2423cfb15484715daf3c7b86d35996c4b24",
        "message": "NodeState.hasPropertyName() throws NullPointerException if property does not exist.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@433623 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/415a22426d30498bdc860d7df55d295e8e34e505",
        "file": [
            {
                "patch": "@@ -47,6 +47,7 @@\n import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.io.FilterInputStream;\n+import java.io.ByteArrayInputStream;\n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.PreparedStatement;\n@@ -1035,6 +1036,10 @@ public InputStream get(String blobId) throws Exception {\n                         throw new Exception(\"no such BLOB: \" + blobId);\n                     }\n                     InputStream in = rs.getBinaryStream(1);\n+                    if (in == null) {\n+                        closeResultSet(rs);\n+                        return new ByteArrayInputStream(new byte[0]);\n+                    }\n \n                     /**\n                      * return an InputStream wrapper in order to",
                "additions": 5,
                "raw_url": "https://github.com/apache/jackrabbit/raw/415a22426d30498bdc860d7df55d295e8e34e505/jackrabbit/src/main/java/org/apache/jackrabbit/core/state/db/SimpleDbPersistenceManager.java",
                "status": "modified",
                "changes": 5,
                "deletions": 0,
                "sha": "9024bbdf73708e49dd468a8bcaf9415c22292c6e",
                "blob_url": "https://github.com/apache/jackrabbit/blob/415a22426d30498bdc860d7df55d295e8e34e505/jackrabbit/src/main/java/org/apache/jackrabbit/core/state/db/SimpleDbPersistenceManager.java",
                "filename": "jackrabbit/src/main/java/org/apache/jackrabbit/core/state/db/SimpleDbPersistenceManager.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/main/java/org/apache/jackrabbit/core/state/db/SimpleDbPersistenceManager.java?ref=415a22426d30498bdc860d7df55d295e8e34e505"
            }
        ],
        "bug_id": "jackrabbit_32",
        "parent": "https://github.com/apache/jackrabbit/commit/1cc7d4394b67ca85558302b4bf1fa5139357c8ba",
        "message": "- guarding eventual NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@354519 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/5b5275ceafb8c9c1fad63379aeca5f6ee0da95ac",
        "file": [
            {
                "patch": "@@ -123,16 +123,18 @@ public void setSession(SessionImpl systemSession) {\n      */\n     public void nodeTypeRegistered(QName ntName) {\n         try {\n-            // allow provider to update\n             if (virtProvider != null) {\n+                // allow provider to update\n                 virtProvider.onNodeTypeAdded(ntName);\n             }\n-\n-            NodeImpl root = (NodeImpl) systemSession.getItemManager().getItem(new NodeId(rootNodeId));\n-            NodeImpl child = root.getNode(ntName);\n-            List events = new ArrayList();\n-            recursiveAdd(events, root, child);\n-            obsDispatcher.dispatch(events, systemSession);\n+            if (systemSession != null) {\n+                // generate observation events\n+                NodeImpl root = (NodeImpl) systemSession.getItemManager().getItem(new NodeId(rootNodeId));\n+                NodeImpl child = root.getNode(ntName);\n+                List events = new ArrayList();\n+                recursiveAdd(events, root, child);\n+                obsDispatcher.dispatch(events, systemSession);\n+            }\n         } catch (RepositoryException e) {\n             log.error(\"Unable to index new nodetype: \" + e.toString());\n         }\n@@ -152,12 +154,16 @@ public void nodeTypeReRegistered(QName ntName) {\n      */\n     public void nodeTypeUnregistered(QName ntName) {\n         try {\n-            NodeImpl root = (NodeImpl) systemSession.getItemManager().getItem(new NodeId(rootNodeId));\n-            NodeImpl child = root.getNode(ntName);\n-            List events = new ArrayList();\n-            recursiveRemove(events, root, child);\n-            obsDispatcher.dispatch(events, systemSession);\n+            if (systemSession != null) {\n+                // generated observation events\n+                NodeImpl root = (NodeImpl) systemSession.getItemManager().getItem(new NodeId(rootNodeId));\n+                NodeImpl child = root.getNode(ntName);\n+                List events = new ArrayList();\n+                recursiveRemove(events, root, child);\n+                obsDispatcher.dispatch(events, systemSession);\n+            }\n             if (virtProvider != null) {\n+                // allow provider to update\n                 virtProvider.onNodeTypeRemoved(ntName);\n             }\n         } catch (RepositoryException e) {",
                "additions": 18,
                "raw_url": "https://github.com/apache/jackrabbit/raw/5b5275ceafb8c9c1fad63379aeca5f6ee0da95ac/src/java/org/apache/jackrabbit/core/nodetype/virtual/VirtualNodeTypeStateManager.java",
                "status": "modified",
                "changes": 30,
                "deletions": 12,
                "sha": "d68f79afa75c0de76a425dc03a9ff11a5fb1c468",
                "blob_url": "https://github.com/apache/jackrabbit/blob/5b5275ceafb8c9c1fad63379aeca5f6ee0da95ac/src/java/org/apache/jackrabbit/core/nodetype/virtual/VirtualNodeTypeStateManager.java",
                "filename": "src/java/org/apache/jackrabbit/core/nodetype/virtual/VirtualNodeTypeStateManager.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/src/java/org/apache/jackrabbit/core/nodetype/virtual/VirtualNodeTypeStateManager.java?ref=5b5275ceafb8c9c1fad63379aeca5f6ee0da95ac"
            }
        ],
        "bug_id": "jackrabbit_33",
        "parent": "https://github.com/apache/jackrabbit/commit/7370c7204c6011a5a8ceb2e34baae5b3c188b9f0",
        "message": "JCR-251 NullPointerException in VirtualNodeTypeStateManager.nodeTypeRegistered\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@314832 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/6c1e281564e937bb3f5b7650bd3768d68c99c455",
        "file": [
            {
                "patch": "@@ -548,6 +548,11 @@ public Object visit(RelationQueryNode node, Object data) {\n                         + node.getValueType());\n         }\n \n+        if (node.getProperty() == null) {\n+            exceptions.add(new InvalidQueryException(\"@* not supported in predicate\"));\n+            return data;\n+        }\n+\n         String field = \"\";\n         try {\n             field = node.getProperty().toJCRName(nsMappings);",
                "additions": 5,
                "raw_url": "https://github.com/apache/jackrabbit/raw/6c1e281564e937bb3f5b7650bd3768d68c99c455/core/src/java/org/apache/jackrabbit/core/query/lucene/LuceneQueryBuilder.java",
                "status": "modified",
                "changes": 5,
                "deletions": 0,
                "sha": "a8d864f36b5bb5a3a44a47840dedf5600e1e0faa",
                "blob_url": "https://github.com/apache/jackrabbit/blob/6c1e281564e937bb3f5b7650bd3768d68c99c455/core/src/java/org/apache/jackrabbit/core/query/lucene/LuceneQueryBuilder.java",
                "filename": "core/src/java/org/apache/jackrabbit/core/query/lucene/LuceneQueryBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/core/src/java/org/apache/jackrabbit/core/query/lucene/LuceneQueryBuilder.java?ref=6c1e281564e937bb3f5b7650bd3768d68c99c455"
            }
        ],
        "bug_id": "jackrabbit_34",
        "parent": "https://github.com/apache/jackrabbit/commit/5d4eac87e674df7533367da280f7925852fda9c4",
        "message": "JCR-214: NullPointerException in LuceneQueryBuilder\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@280332 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/f6ab8fed0ae1c15a92bcb48a85047ca9ee092362",
        "file": [
            {
                "patch": "@@ -135,10 +135,10 @@ static synchronized RepositoryStub getInstance(Map configuration)\n         }\n \n         if (props == null) {\n+            props = new Properties();\n             InputStream is = RepositoryStub.class.getClassLoader().getResourceAsStream(STUB_IMPL_PROPS);\n             if (is != null) {\n                 try {\n-                    props = new Properties();\n                     props.load(is);\n                 } catch (IOException e) {\n                     throw new RepositoryStubException(\"Exception reading \"",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/f6ab8fed0ae1c15a92bcb48a85047ca9ee092362/src/test/org/apache/jackrabbit/test/RepositoryStub.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "6cc7aa0bb75050fb42ef9d9bc9cd0edf1129699b",
                "blob_url": "https://github.com/apache/jackrabbit/blob/f6ab8fed0ae1c15a92bcb48a85047ca9ee092362/src/test/org/apache/jackrabbit/test/RepositoryStub.java",
                "filename": "src/test/org/apache/jackrabbit/test/RepositoryStub.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/src/test/org/apache/jackrabbit/test/RepositoryStub.java?ref=f6ab8fed0ae1c15a92bcb48a85047ca9ee092362"
            }
        ],
        "bug_id": "jackrabbit_35",
        "parent": "https://github.com/apache/jackrabbit/commit/f334cbfdcca489bd4fc6e9fe389ee53356644b00",
        "message": "RepositoryStub throws NullPointerException if repositoryStubImpl.properties is missing\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@126277 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/c9924979046924c428950f35dc9395ce800ecaca",
        "file": [
            {
                "patch": "@@ -333,14 +333,14 @@ public NodeId getNodeId(String uri, SessionInfo sessionInfo) throws RepositoryEx\n     public NodeId getNodeIdAfterEvent(String uri, SessionInfo sessionInfo, boolean nodeIsGone) throws RepositoryException {\n         return getNodeId(uri, sessionInfo, nodeIsGone);\n     }\n-    \n+\n     /**\n      * @inheritDoc\n      */\n     public PropertyId getPropertyId(String uri, SessionInfo sessionInfo) throws RepositoryException {\n         IdURICache cache = getCache(sessionInfo.getWorkspaceName());\n-        if (cache.containsUri(uri)) {\n-            ItemId id = cache.getItemId(uri);\n+        ItemId id = cache.getItemId(uri);\n+        if (id != null) {\n             if (!id.denotesNode()) {\n                 return (PropertyId) id;\n             }",
                "additions": 3,
                "raw_url": "https://github.com/apache/jackrabbit/raw/c9924979046924c428950f35dc9395ce800ecaca/jackrabbit-spi2dav/src/main/java/org/apache/jackrabbit/spi2dav/URIResolverImpl.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "aae0154958b4b06eb901f490aa88440b60af0fd3",
                "blob_url": "https://github.com/apache/jackrabbit/blob/c9924979046924c428950f35dc9395ce800ecaca/jackrabbit-spi2dav/src/main/java/org/apache/jackrabbit/spi2dav/URIResolverImpl.java",
                "filename": "jackrabbit-spi2dav/src/main/java/org/apache/jackrabbit/spi2dav/URIResolverImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-spi2dav/src/main/java/org/apache/jackrabbit/spi2dav/URIResolverImpl.java?ref=c9924979046924c428950f35dc9395ce800ecaca"
            }
        ],
        "bug_id": "jackrabbit_36",
        "parent": "https://github.com/apache/jackrabbit/commit/5a37e856830401142808a541ef52cd911e2327d1",
        "message": "JCR-4102: jcr2dav: change polling thread sometimes dies with NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1779460 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/524deb74243abba98b246845296ee422baf4c556",
        "file": [
            {
                "patch": "@@ -21,6 +21,7 @@\n import javax.jcr.version.Version;\n \n import java.util.Calendar;\n+import java.util.List;\n \n /**\n  * This interface defines the internal version.\n@@ -63,7 +64,7 @@\n      * @see javax.jcr.version.Version#getSuccessors()\n      * @return the successors as internal versions\n      */\n-    InternalVersion[] getSuccessors();\n+    List<InternalVersion> getSuccessors();\n \n     /**\n      * Equivalent to {@link Version#getLinearSuccessor()}.",
                "additions": 2,
                "raw_url": "https://github.com/apache/jackrabbit/raw/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersion.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "a612163bb2da395dbf05a11fd20e9470fc2e575a",
                "blob_url": "https://github.com/apache/jackrabbit/blob/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersion.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersion.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersion.java?ref=524deb74243abba98b246845296ee422baf4c556"
            },
            {
                "patch": "@@ -162,7 +162,7 @@ private synchronized void init() throws RepositoryException {\n         }\n \n         // fix legacy\n-        if (rootVersion.getSuccessors().length == 0) {\n+        if (rootVersion.getSuccessors().isEmpty()) {\n             for (Name versionName : nameCache.keySet()) {\n                 InternalVersionImpl v = createVersionInstance(versionName);\n                 v.legacyResolveSuccessors();",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "9929305c5226f744bb109a677579e0c1cdab183a",
                "blob_url": "https://github.com/apache/jackrabbit/blob/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java?ref=524deb74243abba98b246845296ee422baf4c556"
            },
            {
                "patch": "@@ -22,11 +22,14 @@\n import org.apache.jackrabbit.core.id.NodeId;\n import org.apache.jackrabbit.spi.Name;\n import org.apache.jackrabbit.spi.commons.name.NameConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import javax.jcr.PropertyType;\n import javax.jcr.RepositoryException;\n import java.util.Arrays;\n import java.util.Calendar;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.ArrayList;\n@@ -37,6 +40,10 @@\n class InternalVersionImpl extends InternalVersionItemImpl\n         implements InternalVersion {\n \n+    /** Logger instance */\n+    private static final Logger log =\n+        LoggerFactory.getLogger(InternalVersionImpl.class);\n+\n     /**\n      * the date when this version was created\n      */\n@@ -138,18 +145,27 @@ public Calendar getCreated() {\n     /**\n      * {@inheritDoc}\n      */\n-    public InternalVersion[] getSuccessors() {\n+    public List<InternalVersion> getSuccessors() {\n         ReadLock lock = vMgr.acquireReadLock();\n         try {\n-            InternalValue[] values = node.getPropertyValues(NameConstants.JCR_SUCCESSORS);\n+            InternalValue[] values =\n+                node.getPropertyValues(NameConstants.JCR_SUCCESSORS);\n             if (values != null) {\n-                InternalVersion[] versions = new InternalVersion[values.length];\n-                for (int i = 0; i < values.length; i++) {\n-                    versions[i] = versionHistory.getVersion(values[i].getNodeId());\n+                List<InternalVersion> versions =\n+                    new ArrayList<InternalVersion>(values.length);\n+                for (InternalValue value : values) {\n+                    InternalVersion version =\n+                        versionHistory.getVersion(value.getNodeId());\n+                    if (version != null) {\n+                        versions.add(version);\n+                    } else {\n+                        // Can happen with a corrupted repository (JCR-2655)\n+                        log.warn(\"Missing successor {}\", value.getNodeId());\n+                    }\n                 }\n                 return versions;\n             } else {\n-                return new InternalVersion[0];\n+                return Collections.emptyList();\n             }\n         } finally {\n             lock.release();\n@@ -275,8 +291,7 @@ private void storeXCessors(List<InternalVersion> cessors, Name propname, boolean\n      */\n     void internalDetach() throws RepositoryException {\n         // detach this from all successors\n-        InternalVersion[] succ = getSuccessors();\n-        for (InternalVersion aSucc : succ) {\n+        for (InternalVersion aSucc :  getSuccessors()) {\n             ((InternalVersionImpl) aSucc).internalDetachPredecessor(this, true);\n         }\n \n@@ -312,7 +327,7 @@ void internalAttach() throws RepositoryException {\n      */\n     private void internalAddSuccessor(InternalVersionImpl succ, boolean store)\n             throws RepositoryException {\n-        List<InternalVersion> l = new ArrayList<InternalVersion>(Arrays.asList(getSuccessors()));\n+        List<InternalVersion> l = new ArrayList<InternalVersion>(getSuccessors());\n         if (!l.contains(succ)) {\n             l.add(succ);\n             storeXCessors(l, NameConstants.JCR_SUCCESSORS, store);\n@@ -353,11 +368,11 @@ private void internalDetachPredecessor(InternalVersionImpl v, boolean store)\n     private void internalDetachSuccessor(InternalVersionImpl v, boolean store)\n             throws RepositoryException {\n         // remove 'v' from successors list\n-        List<InternalVersion> l = new ArrayList<InternalVersion>(Arrays.asList(getSuccessors()));\n+        List<InternalVersion> l = new ArrayList<InternalVersion>(getSuccessors());\n         l.remove(v);\n \n         // attach V's successors\n-        l.addAll(Arrays.asList(v.getSuccessors()));\n+        l.addAll(v.getSuccessors());\n         storeXCessors(l, NameConstants.JCR_SUCCESSORS, store);\n     }\n ",
                "additions": 26,
                "raw_url": "https://github.com/apache/jackrabbit/raw/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionImpl.java",
                "status": "modified",
                "changes": 37,
                "deletions": 11,
                "sha": "85309383189b4b9f6afd4d4bfe9cf0b8a293011d",
                "blob_url": "https://github.com/apache/jackrabbit/blob/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionImpl.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionImpl.java?ref=524deb74243abba98b246845296ee422baf4c556"
            },
            {
                "patch": "@@ -664,7 +664,7 @@ protected String calculateCheckinVersionName(InternalVersionHistoryImpl history,\n             return newVersionName;\n         } else {\n             // best is root version\n-            return String.valueOf(best.getSuccessors().length + 1) + \".0\";\n+            return String.valueOf(best.getSuccessors().size() + 1) + \".0\";\n         }\n     }\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerBase.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "0c12cb5eb2734f04f9d550c8bd9a8daa814a0949",
                "blob_url": "https://github.com/apache/jackrabbit/blob/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerBase.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerBase.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerBase.java?ref=524deb74243abba98b246845296ee422baf4c556"
            },
            {
                "patch": "@@ -512,12 +512,10 @@ protected void internalRemoveVersion(InternalVersionHistoryImpl history, Name na\n             xaItems.put(history.getId(), history);\n             // also put 'successor' and 'predecessor' version items to xaItem sets\n             InternalVersion v = history.getVersion(name);\n-            InternalVersion[] vs = v.getSuccessors();\n-            for (InternalVersion v1 : vs) {\n+            for (InternalVersion v1 : v.getSuccessors()) {\n                 xaItems.put(v1.getId(), v1);\n             }\n-            vs = v.getPredecessors();\n-            for (InternalVersion v1 : vs) {\n+            for (InternalVersion v1 : v.getPredecessors()) {\n                 xaItems.put(v1.getId(), v1);\n             }\n         }",
                "additions": 2,
                "raw_url": "https://github.com/apache/jackrabbit/raw/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalXAVersionManager.java",
                "status": "modified",
                "changes": 6,
                "deletions": 4,
                "sha": "819b40e2020ae624e26be9e0ee89c08df3f53808",
                "blob_url": "https://github.com/apache/jackrabbit/blob/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalXAVersionManager.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalXAVersionManager.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalXAVersionManager.java?ref=524deb74243abba98b246845296ee422baf4c556"
            },
            {
                "patch": "@@ -34,6 +34,7 @@\n import javax.jcr.Node;\n import javax.jcr.nodetype.ConstraintViolationException;\n import java.util.Calendar;\n+import java.util.List;\n \n /**\n  * Base implementation of the {@link javax.jcr.version.Version} interface.\n@@ -84,10 +85,11 @@ public Calendar getCreated() throws RepositoryException {\n      */\n     public javax.jcr.version.Version[] getSuccessors() throws RepositoryException {\n         // need to wrap it around proper node\n-        InternalVersion[] suc = getInternalVersion().getSuccessors();\n-        Version[] ret = new Version[suc.length];\n-        for (int i = 0; i < suc.length; i++) {\n-            ret[i] = (Version) sessionContext.getSessionImpl().getNodeById(suc[i].getId());\n+        List<InternalVersion> suc = getInternalVersion().getSuccessors();\n+        Version[] ret = new Version[suc.size()];\n+        for (int i = 0; i < ret.length; i++) {\n+            ret[i] = (Version) sessionContext.getSessionImpl().getNodeById(\n+                    suc.get(i).getId());\n         }\n         return ret;\n     }",
                "additions": 6,
                "raw_url": "https://github.com/apache/jackrabbit/raw/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionImpl.java",
                "status": "modified",
                "changes": 10,
                "deletions": 4,
                "sha": "42df5e3c39cd592e2374d105b0563af4af11956a",
                "blob_url": "https://github.com/apache/jackrabbit/blob/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionImpl.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionImpl.java?ref=524deb74243abba98b246845296ee422baf4c556"
            },
            {
                "patch": "@@ -26,7 +26,6 @@\n import java.util.ConcurrentModificationException;\n import java.util.LinkedList;\n import java.util.NoSuchElementException;\n-import java.util.Arrays;\n \n /**\n  * This Class implements a VersionIterator that iterates over a version\n@@ -170,8 +169,7 @@ private synchronized void collectAllVersions(InternalVersion root) {\n             NodeId id = currentVersion.getId();\n             if (!versions.contains(id)) {\n                 versions.add(id);\n-                InternalVersion[] successors = currentVersion.getSuccessors();\n-                workQueue.addAll(Arrays.asList(successors));\n+                workQueue.addAll(currentVersion.getSuccessors());\n             }\n         }\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionIteratorImpl.java",
                "status": "modified",
                "changes": 4,
                "deletions": 3,
                "sha": "99a485c51cfe190acda1ff4037c050be18e10034",
                "blob_url": "https://github.com/apache/jackrabbit/blob/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionIteratorImpl.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionIteratorImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionIteratorImpl.java?ref=524deb74243abba98b246845296ee422baf4c556"
            },
            {
                "patch": "@@ -19,6 +19,7 @@\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.LinkedList;\n+import java.util.List;\n import java.util.Set;\n \n import javax.jcr.ItemExistsException;\n@@ -577,14 +578,14 @@ protected void internalRestoreFrozen(NodeStateEx state,\n                     if (v == null) {\n                         // if version selector was unable to select version,\n                         // choose the initial one\n-                        InternalVersion[] vs = vh.getRootVersion().getSuccessors();\n-                        if (vs.length == 0) {\n+                        List<InternalVersion> vs = vh.getRootVersion().getSuccessors();\n+                        if (vs.isEmpty()) {\n                             String msg = \"Unable to select appropariate version for \"\n                                     + child.getName() + \" using \" + vsel;\n                             log.error(msg);\n                             throw new VersionException(msg);\n                         }\n-                        v = vs[0];\n+                        v = vs.get(0);\n                     }\n                     InternalFrozenNode f = v.getFrozenNode();\n                     restoredChild = state.addNode(fh.getName(), f.getFrozenPrimaryType(), f.getFrozenId());",
                "additions": 4,
                "raw_url": "https://github.com/apache/jackrabbit/raw/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionManagerImplRestore.java",
                "status": "modified",
                "changes": 7,
                "deletions": 3,
                "sha": "72a76bae530495bdcebb85bd89cf18e86bb893da",
                "blob_url": "https://github.com/apache/jackrabbit/blob/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionManagerImplRestore.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionManagerImplRestore.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionManagerImplRestore.java?ref=524deb74243abba98b246845296ee422baf4c556"
            },
            {
                "patch": "@@ -16,7 +16,9 @@\n  */\n package org.apache.jackrabbit.core.version;\n \n+import java.util.Arrays;\n import java.util.Calendar;\n+import java.util.List;\n \n import junit.framework.TestCase;\n \n@@ -37,8 +39,8 @@ public DummyInternalVersion(InternalVersion[] successors, NodeId id) {\n             this.id = id;\n         }\n \n-        public InternalVersion[] getSuccessors() {\n-            return successors;\n+        public List<InternalVersion> getSuccessors() {\n+            return Arrays.asList(successors);\n         }\n \n         public NodeId getId() {",
                "additions": 4,
                "raw_url": "https://github.com/apache/jackrabbit/raw/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/VersionIteratorImplTest.java",
                "status": "modified",
                "changes": 6,
                "deletions": 2,
                "sha": "c14f66bb6211a4ff7430a807018dbe1a311fd01b",
                "blob_url": "https://github.com/apache/jackrabbit/blob/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/VersionIteratorImplTest.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/VersionIteratorImplTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/VersionIteratorImplTest.java?ref=524deb74243abba98b246845296ee422baf4c556"
            }
        ],
        "bug_id": "jackrabbit_37",
        "parent": "https://github.com/apache/jackrabbit/commit/97bb7f89fc3d1487dc2155f44a2c2d9db7c74169",
        "message": "JCR-2655: initVersions crashes with NPE\n\nSkip missing successors to avoid the NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1000912 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/887b297f0c021dadc4107fa6248292aa76d4682a",
        "file": [
            {
                "patch": "@@ -1775,7 +1775,7 @@ private NodeState copyNodeState(NodeState srcState,\n                 QPropertyDefinition def = ent.getApplicablePropertyDef(\n                         srcChildState.getName(), srcChildState.getType(),\n                         srcChildState.isMultiValued());\n-                if (def.getDeclaringNodeType().equals(NameConstants.MIX_LOCKABLE)) {\n+                if (NameConstants.MIX_LOCKABLE.equals(def.getDeclaringNodeType())) {\n                     // skip properties defined by mix:lockable\n                     continue;\n                 }",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/887b297f0c021dadc4107fa6248292aa76d4682a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "db5eb6055e29bb746dc9e78271aa46b2a029b7d5",
                "blob_url": "https://github.com/apache/jackrabbit/blob/887b297f0c021dadc4107fa6248292aa76d4682a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java?ref=887b297f0c021dadc4107fa6248292aa76d4682a"
            }
        ],
        "bug_id": "jackrabbit_38",
        "parent": "https://github.com/apache/jackrabbit/commit/7d181b124200f4db5de61e8d5124d8738c43ae29",
        "message": "JCR-2433: NPE when copying nodes with Workspace.copy()\n\nWork around the potential NPE by rearranging the name equality test\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@927393 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/26e4a64576af30014947f125005319fd1e050ece",
        "file": [
            {
                "patch": "@@ -27,9 +27,15 @@\n \n import org.apache.jackrabbit.core.state.NoSuchItemStateException;\n import org.apache.jackrabbit.test.AbstractJCRTest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class NPEandCMETest extends AbstractJCRTest {\n \n+    /** Logger instance */\n+    private static final Logger log =\n+            LoggerFactory.getLogger(NPEandCMETest.class);\n+\n     private final static int NUM_THREADS = 10;\n     private final static boolean SHOW_STACKTRACE = true;\n     \n@@ -71,8 +77,8 @@ public void testDo() throws Exception {\n             npes += tasks[i].npes;\n             cmes += tasks[i].cmes;\n         }\n-        System.err.println(\"Total NPEs: \" + npes);\n-        System.err.println(\"Total CMEs: \" + cmes);\n+        assertEquals(\"Total NPEs > 0\", 0, npes);\n+        assertEquals(\"Total CMEs > 0\", 0, cmes);\n     }\n     \n     private static class TestTask implements Runnable {\n@@ -121,24 +127,18 @@ public void run() {\n                 // ignorable\n             }\n             catch (RepositoryException e) {\n-                if (e.getCause() == null || !(e.getCause() instanceof NoSuchItemStateException)) {\n-                    System.err.println(\"thread\" + id + \":\" + e);\n-                    e.printStackTrace();\n+                Throwable cause = e.getCause();\n+                if (!(cause instanceof NoSuchItemStateException)) {\n+                    log.warn(\"Unexpected RepositoryException caught\", e);\n                 }\n                 // else ignorable\n             }\n             catch (NullPointerException e) {\n-                System.err.println(\"====> \" + e);\n-                if (SHOW_STACKTRACE) {\n-                    e.printStackTrace();\n-                }\n+                log.error(\"NPE caught\", e);\n                 npes++;\n             }\n             catch (ConcurrentModificationException e) {\n-                System.err.println(\"====> \" + e);\n-                if (SHOW_STACKTRACE) {\n-                    e.printStackTrace();\n-                }\n+                log.error(\"CME caught\", e);\n                 cmes++;\n             }\n         }",
                "additions": 13,
                "raw_url": "https://github.com/apache/jackrabbit/raw/26e4a64576af30014947f125005319fd1e050ece/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/NPEandCMETest.java",
                "status": "modified",
                "changes": 26,
                "deletions": 13,
                "sha": "db55de6ce9374538c349e0958d3194f04c083893",
                "blob_url": "https://github.com/apache/jackrabbit/blob/26e4a64576af30014947f125005319fd1e050ece/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/NPEandCMETest.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/NPEandCMETest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/NPEandCMETest.java?ref=26e4a64576af30014947f125005319fd1e050ece"
            }
        ],
        "bug_id": "jackrabbit_39",
        "parent": "https://github.com/apache/jackrabbit/commit/e7094b41c645a957a2dc2057584d7f11b6243b70",
        "message": "JCR-3063 NullPointerException in ItemManager\n\nClean up output from the test case\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1175988 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/661cb4d47fb3926439ddc253c32426c058ba6102",
        "file": [
            {
                "patch": "@@ -324,15 +324,21 @@ private int deleteOlderRecursive(File file, long min) {\n                 }\n             }\n         } else if (file.isDirectory()) {\n-            for (File f: file.listFiles()) {\n-                count += deleteOlderRecursive(f, min);\n+            File[] list = file.listFiles();\n+            if (list != null) {\n+                for (File f: list) {\n+                    count += deleteOlderRecursive(f, min);\n+                }\n             }\n \n             // JCR-1396: FileDataStore Garbage Collector and empty directories\n             // Automatic removal of empty directories (but not the root!)\n             synchronized (this) {\n-                if (file != directory && file.list().length == 0) {\n-                    file.delete();\n+                if (file != directory) {\n+                    list = file.listFiles();\n+                    if (list != null && list.length == 0) {\n+                        file.delete();\n+                    }\n                 }\n             }\n         }",
                "additions": 10,
                "raw_url": "https://github.com/apache/jackrabbit/raw/661cb4d47fb3926439ddc253c32426c058ba6102/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/data/FileDataStore.java",
                "status": "modified",
                "changes": 14,
                "deletions": 4,
                "sha": "c878ecc655b9cc5066067909ca208a0e4b5f261b",
                "blob_url": "https://github.com/apache/jackrabbit/blob/661cb4d47fb3926439ddc253c32426c058ba6102/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/data/FileDataStore.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/data/FileDataStore.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/data/FileDataStore.java?ref=661cb4d47fb3926439ddc253c32426c058ba6102"
            }
        ],
        "bug_id": "jackrabbit_40",
        "parent": "https://github.com/apache/jackrabbit/commit/c12b0efa8eefe59856e5f42ba9c431b573f7eac5",
        "message": "JCR-2969 FileDataStore garbage collection can throw a NullPointerException if there is I/O problem\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1102601 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/e14c2ce2a45969e876d846fb9af61048aa4cbbe9",
        "file": [
            {
                "patch": "@@ -46,12 +46,19 @@ public Object perform(SessionContext context) throws RepositoryException {\n             id = context.getItemStateManager().getIdOfRootTransientNodeState();\n         }\n         if (LOG.isDebugEnabled()) {\n-            NodeId transientRoot = context.getItemStateManager().getIdOfRootTransientNodeState();\n-            ItemImpl item = context.getItemManager().getItem(transientRoot);\n+            String path;\n+            try {\n+                NodeId transientRoot = context.getItemStateManager().getIdOfRootTransientNodeState();\n+                ItemImpl item = context.getItemManager().getItem(transientRoot);\n+                path = item.getPath();\n+            } catch (Exception e) {\n+                LOG.warn(\"Could not get the path\", e);\n+                path = \"?\";\n+            }\n             if (LOG_WITH_STACKTRACE) {\n-                LOG.debug(\"Saving changes under \" + item.getPath(), new Exception());\n+                LOG.debug(\"Saving changes under \" + path, new Exception());\n             } else {\n-                LOG.debug(\"Saving changes under \" + item.getPath());\n+                LOG.debug(\"Saving changes under \" + path);\n             }\n         }\n         context.getItemManager().getItem(id).save();",
                "additions": 11,
                "raw_url": "https://github.com/apache/jackrabbit/raw/e14c2ce2a45969e876d846fb9af61048aa4cbbe9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/session/SessionSaveOperation.java",
                "status": "modified",
                "changes": 15,
                "deletions": 4,
                "sha": "7eafd94c05ecfd8d4bae49647697f7821b59472c",
                "blob_url": "https://github.com/apache/jackrabbit/blob/e14c2ce2a45969e876d846fb9af61048aa4cbbe9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/session/SessionSaveOperation.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/session/SessionSaveOperation.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/session/SessionSaveOperation.java?ref=e14c2ce2a45969e876d846fb9af61048aa4cbbe9"
            }
        ],
        "bug_id": "jackrabbit_41",
        "parent": "https://github.com/apache/jackrabbit/commit/c7b93e4d7c9c9891d00546662d0806aed41cb8cd",
        "message": "JCR-2961: Improve logging of Session.save() to trace back root cause of externally modified nodes - workaround for the NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1100064 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/82b6c925aeb4ef6344b303df21a3b19ee9ccbe55",
        "file": [
            {
                "patch": "@@ -104,6 +104,7 @@\n import org.apache.jackrabbit.core.state.ManagedMLRUItemStateCacheFactory;\n import org.apache.jackrabbit.core.state.SharedItemStateManager;\n import org.apache.jackrabbit.core.util.RepositoryLockMechanism;\n+import org.apache.jackrabbit.core.version.InternalVersionManager;\n import org.apache.jackrabbit.core.version.InternalVersionManagerImpl;\n import org.apache.jackrabbit.core.xml.ClonedInputSource;\n import org.apache.jackrabbit.spi.commons.name.NameConstants;\n@@ -1122,7 +1123,10 @@ protected synchronized void doShutdown() {\n         }\n \n         try {\n-            context.getInternalVersionManager().close();\n+            InternalVersionManager m = context.getInternalVersionManager();\n+            if (m != null) {\n+                m.close();\n+            }\n         } catch (Exception e) {\n             log.error(\"Error while closing Version Manager.\", e);\n         }",
                "additions": 5,
                "raw_url": "https://github.com/apache/jackrabbit/raw/82b6c925aeb4ef6344b303df21a3b19ee9ccbe55/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/RepositoryImpl.java",
                "status": "modified",
                "changes": 6,
                "deletions": 1,
                "sha": "484611cbe849cd1ad4e92aca010685a60b6eac7e",
                "blob_url": "https://github.com/apache/jackrabbit/blob/82b6c925aeb4ef6344b303df21a3b19ee9ccbe55/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/RepositoryImpl.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/RepositoryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/RepositoryImpl.java?ref=82b6c925aeb4ef6344b303df21a3b19ee9ccbe55"
            }
        ],
        "bug_id": "jackrabbit_42",
        "parent": "https://github.com/apache/jackrabbit/commit/88d0610c53b8934216a4fa93cfed449ea59b9bc9",
        "message": "JCR-2862 Jackrabbit logs a NullPointerException on shutdown if the version manager wasn't initialized\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1059807 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/a77386f1d9cafa6ab9680678661f90d284d2fb0c",
        "file": [
            {
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/a77386f1d9cafa6ab9680678661f90d284d2fb0c/jackrabbit-webapp/src/main/webapp/META-INF/LICENSE",
                "previous_filename": "jackrabbit-webapp/src/main/webapp/META-INF/LICENSE.txt",
                "status": "renamed",
                "changes": 0,
                "deletions": 0,
                "sha": "e1b7d484022f319447fc7d9b179d910e5dbf57ba",
                "blob_url": "https://github.com/apache/jackrabbit/blob/a77386f1d9cafa6ab9680678661f90d284d2fb0c/jackrabbit-webapp/src/main/webapp/META-INF/LICENSE",
                "filename": "jackrabbit-webapp/src/main/webapp/META-INF/LICENSE",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-webapp/src/main/webapp/META-INF/LICENSE?ref=a77386f1d9cafa6ab9680678661f90d284d2fb0c"
            },
            {
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/a77386f1d9cafa6ab9680678661f90d284d2fb0c/jackrabbit-webapp/src/main/webapp/META-INF/NOTICE",
                "previous_filename": "jackrabbit-webapp/src/main/webapp/META-INF/NOTICE.txt",
                "status": "renamed",
                "changes": 0,
                "deletions": 0,
                "sha": "f4e98f77f7b7268f7211ffa43ee0e4f793ac1275",
                "blob_url": "https://github.com/apache/jackrabbit/blob/a77386f1d9cafa6ab9680678661f90d284d2fb0c/jackrabbit-webapp/src/main/webapp/META-INF/NOTICE",
                "filename": "jackrabbit-webapp/src/main/webapp/META-INF/NOTICE",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-webapp/src/main/webapp/META-INF/NOTICE?ref=a77386f1d9cafa6ab9680678661f90d284d2fb0c"
            },
            {
                "patch": "@@ -67,7 +67,7 @@\n   <a href=\"http://www.apache.org/\">Apache Software Foundation</a>. \n </p>\n <h2>Copyright Notice</h2>\n-<pre><% output(\"/META-INF/NOTICE.txt\", out); %></pre>\n+<pre><% output(\"/META-INF/NOTICE\", out); %></pre>\n <h2>License Information</h2>\n-<pre><% output(\"/META-INF/LICENSE.txt\", out); %></pre>\n+<pre><% output(\"/META-INF/LICENSE\", out); %></pre>\n <jsp:include page=\"footer.jsp\"/>",
                "additions": 2,
                "raw_url": "https://github.com/apache/jackrabbit/raw/a77386f1d9cafa6ab9680678661f90d284d2fb0c/jackrabbit-webapp/src/main/webapp/about.jsp",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "8bed391d6cf3372834a80721a1bcd622e6dc173a",
                "blob_url": "https://github.com/apache/jackrabbit/blob/a77386f1d9cafa6ab9680678661f90d284d2fb0c/jackrabbit-webapp/src/main/webapp/about.jsp",
                "filename": "jackrabbit-webapp/src/main/webapp/about.jsp",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-webapp/src/main/webapp/about.jsp?ref=a77386f1d9cafa6ab9680678661f90d284d2fb0c"
            }
        ],
        "bug_id": "jackrabbit_43",
        "parent": "https://github.com/apache/jackrabbit/commit/2ff2ec20a5534355bced9d311584d39214627cf5",
        "message": "JCR-2364: NullPointerException when accessing the about.jsp page because of missing /META-INF/NOTICE.TXT\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@830665 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/787e2fca5b8e1176299dfa3e95d6d437fa8e7433",
        "file": [
            {
                "patch": "@@ -17,13 +17,12 @@\n package org.apache.jackrabbit.core.data;\n \n import java.io.File;\n+import java.io.FileDescriptor;\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n \n import org.apache.commons.io.input.AutoCloseInputStream;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n /**\n  * This input stream delays opening the file until the first byte is read, and\n@@ -32,7 +31,10 @@\n  */\n public class LazyFileInputStream extends AutoCloseInputStream {\n \n-    private static Logger log = LoggerFactory.getLogger(LazyFileInputStream.class);\n+    /**\n+     * The file descriptor to use.\n+     */\n+    protected final FileDescriptor fd;\n \n     /**\n      * The file to read from.\n@@ -47,83 +49,119 @@\n     protected boolean opened;\n \n     /**\n-     * Create a lazy input stream for the given file.\n+     * Creates a new <code>LazyFileInputStream</code> for the given file. If the\n+     * file is unreadable, a FileNotFoundException is thrown.\n      * The file is not opened until the first byte is read from the stream.\n-     * \n+     *\n      * @param file the file\n+     * @throws java.io.FileNotFoundException\n      */\n-    public LazyFileInputStream(File file) throws FileNotFoundException {\n+    public LazyFileInputStream(File file)\n+            throws FileNotFoundException {\n         super(null);\n         if (!file.canRead()) {\n             throw new FileNotFoundException(file.getPath());\n-        }        \n+        }\n         this.file = file;\n+        this.fd = null;\n+    }\n+\n+    /**\n+     * Creates a new <code>LazyFileInputStream</code> for the given file\n+     * descriptor.\n+     * The file is not opened until the first byte is read from the stream.\n+     *\n+     * @param fdObj\n+     */\n+    public LazyFileInputStream(FileDescriptor fd) {\n+        super(null);\n+        this.file = null;\n+        this.fd = fd;\n+    }\n+\n+    /**\n+     * Creates a new <code>LazyFileInputStream</code> for the given file. If the\n+     * file is unreadable, a FileNotFoundException is thrown.\n+     *\n+     * @param name\n+     * @throws java.io.FileNotFoundException\n+     */\n+    public LazyFileInputStream(String name) throws FileNotFoundException {\n+        this(new File(name));\n     }\n \n     /**\n      * Open the stream if required.\n-     * \n-     * @throws IOException\n+     *\n+     * @throws java.io.IOException\n      */\n-    protected void openStream() throws IOException {\n+    protected void open() throws IOException {\n         if (!opened) {\n             opened = true;\n-            in = new FileInputStream(file);\n+            if (fd != null) {\n+                in = new FileInputStream(fd);\n+            } else {\n+                in = new FileInputStream(file);\n+            }\n         }\n     }\n-    \n+\n     public int read() throws IOException {\n-        openStream();\n+        open();\n         return super.read();\n     }\n \n-    public int read(byte[] b) throws IOException {\n-        return read(b, 0, b.length);\n-    }\n-\n-    public int read(byte[] b, int off, int len) throws IOException {\n-        openStream();\n-        return super.read(b, off, len);\n+    public int available() throws IOException {\n+        open();\n+        return super.available();\n     }\n \n     public void close() throws IOException {\n         // make sure the file is not opened afterwards\n         opened = true;\n-        super.close();\n+        \n+        // only close the file if it was in fact opened\n+        if (in != null) {\n+            super.close();\n+        }\n     }\n \n-    public long skip(long n) throws IOException {\n-        openStream();\n-        return super.skip(n);\n+    public synchronized void reset() throws IOException {\n+        open();\n+        super.reset();\n     }\n \n-    public int available() throws IOException {\n-        openStream();\n-        return super.available();\n+    public boolean markSupported() {\n+        try {\n+            open();\n+        } catch (IOException e) {\n+            throw new IllegalStateException(e.toString());\n+        }\n+        return super.markSupported();\n     }\n \n-    public void mark(int readlimit) {\n+    public synchronized void mark(int readlimit) {\n         try {\n-            openStream();\n+            open();\n         } catch (IOException e) {\n-            log.info(\"Error getting underlying stream: \", e);\n+            throw new IllegalStateException(e.toString());\n         }\n         super.mark(readlimit);\n     }\n \n-    public void reset() throws IOException {\n-        openStream();\n-        super.reset();\n+    public long skip(long n) throws IOException {\n+        open();\n+        return super.skip(n);\n     }\n \n-    public boolean markSupported() {\n-        try {\n-            openStream();\n-        } catch (IOException e) {\n-            log.info(\"Error getting underlying stream: \", e);\n-            return false;\n-        }\n-        return super.markSupported();\n+    public int read(byte[] b) throws IOException {\n+        open();\n+        return super.read(b, 0, b.length);\n+    }\n+\n+    public int read(byte[] b, int off, int len) throws IOException {\n+        open();\n+        return super.read(b, off, len);\n     }\n \n }",
                "additions": 79,
                "raw_url": "https://github.com/apache/jackrabbit/raw/787e2fca5b8e1176299dfa3e95d6d437fa8e7433/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/data/LazyFileInputStream.java",
                "status": "modified",
                "changes": 120,
                "deletions": 41,
                "sha": "2741966a89b59d6416ea4477f84a359dd3e150d5",
                "blob_url": "https://github.com/apache/jackrabbit/blob/787e2fca5b8e1176299dfa3e95d6d437fa8e7433/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/data/LazyFileInputStream.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/data/LazyFileInputStream.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/data/LazyFileInputStream.java?ref=787e2fca5b8e1176299dfa3e95d6d437fa8e7433"
            },
            {
                "patch": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.core.data;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+\n+import org.apache.jackrabbit.test.JUnitTest;\n+\n+/**\n+ * Tests the LazyFileInputStream class.\n+ */\n+public class LazyFileInputStreamTest extends JUnitTest {\n+    \n+    private static final String TEST_FILE = \"target/test.txt\";\n+    \n+    private File file = new File(TEST_FILE);\n+\n+    public void setUp() {\n+        // Create the test directory\n+        new File(TEST_FILE).getParentFile().mkdirs();\n+    }\n+    \n+    public void tearDown() {\n+        new File(TEST_FILE).delete();\n+    }\n+    \n+    private void createFile() throws IOException {\n+        FileOutputStream out = new FileOutputStream(file);\n+        out.write(new byte[1]);\n+        out.close();\n+    }    \n+    \n+    public void test() throws IOException {\n+        \n+        createFile();\n+        \n+        // test exception if file doesn't exist\n+        try {\n+            LazyFileInputStream in = new LazyFileInputStream(file.getAbsolutePath() + \"XX\");\n+            in.close();\n+            fail();\n+        } catch (IOException e) {\n+            // expected\n+        }\n+        \n+        // test open / close (without reading)\n+        LazyFileInputStream in = new LazyFileInputStream(file);\n+        in.close();\n+        \n+        // test reading too much and closing too much\n+        in = new LazyFileInputStream(file);\n+        assertEquals(0, in.read());\n+        assertEquals(-1, in.read());\n+        assertEquals(-1, in.read());\n+        assertEquals(-1, in.read());\n+        in.close();\n+        in.close();\n+        in.close();\n+        assertEquals(-1, in.read());\n+        \n+        // test with file name\n+        in = new LazyFileInputStream(file.getAbsolutePath());\n+        assertEquals(1, in.available());\n+        assertEquals(0, in.read());\n+        assertEquals(0, in.available());\n+        assertEquals(-1, in.read());\n+        assertEquals(0, in.available());\n+        in.close();\n+        \n+        // test markSupported, mark, and reset\n+        in = new LazyFileInputStream(file);\n+        assertFalse(in.markSupported());\n+        in.mark(1);\n+        assertEquals(0, in.read());\n+        try {\n+            in.reset();\n+            fail();\n+        } catch (IOException e) {\n+            // expected\n+        }\n+        assertEquals(-1, in.read());\n+        in.close();\n+        \n+        // test read(byte[])\n+        in = new LazyFileInputStream(file);\n+        byte[] test = new byte[2];\n+        assertEquals(1, in.read(test));\n+        in.close();        \n+        \n+        // test read(byte[],int,int)\n+        in = new LazyFileInputStream(file);\n+        assertEquals(1, in.read(test, 0, 2));\n+        in.close();        \n+\n+        // test skip\n+        in = new LazyFileInputStream(file);\n+        assertEquals(2, in.skip(2));\n+        assertEquals(-1, in.read(test));\n+        assertEquals(0, in.skip(2));\n+        in.close();        \n+\n+        // test with the file descriptor\n+        RandomAccessFile ra = new RandomAccessFile(file, \"r\");\n+        in = new LazyFileInputStream(ra.getFD());\n+        assertEquals(0, in.read());\n+        assertEquals(-1, in.read());\n+        in.close();\n+        ra.close();\n+        \n+        // test that the file is not opened before reading\n+        in = new LazyFileInputStream(file);\n+        // this should fail in Windows if the file was opened\n+        file.delete();\n+        \n+        createFile();\n+        \n+        // test that the file is closed after reading the last byte\n+        in = new LazyFileInputStream(file);\n+        assertEquals(0, in.read());\n+        assertEquals(-1, in.read());\n+        // this should fail in Windows if the file was opened\n+        file.delete();\n+        \n+    }\n+\n+}",
                "additions": 143,
                "raw_url": "https://github.com/apache/jackrabbit/raw/787e2fca5b8e1176299dfa3e95d6d437fa8e7433/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/LazyFileInputStreamTest.java",
                "status": "added",
                "changes": 143,
                "deletions": 0,
                "sha": "2406570a9d344fa5bc006f053be6adbfb9f773f3",
                "blob_url": "https://github.com/apache/jackrabbit/blob/787e2fca5b8e1176299dfa3e95d6d437fa8e7433/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/LazyFileInputStreamTest.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/LazyFileInputStreamTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/LazyFileInputStreamTest.java?ref=787e2fca5b8e1176299dfa3e95d6d437fa8e7433"
            },
            {
                "patch": "@@ -32,6 +32,7 @@\n      */\n     public static Test suite() {\n         TestSuite suite = new TestSuite(\"Data tests\");\n+        suite.addTestSuite(LazyFileInputStreamTest.class);\n         suite.addTestSuite(OpenFilesTest.class);\n         suite.addTestSuite(DataStoreTest.class);\n         suite.addTestSuite(NodeTypeTest.class);",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/787e2fca5b8e1176299dfa3e95d6d437fa8e7433/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/TestAll.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "c5f3f397766a7b70d64da2e0a81dd7fd0115a69a",
                "blob_url": "https://github.com/apache/jackrabbit/blob/787e2fca5b8e1176299dfa3e95d6d437fa8e7433/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/TestAll.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/TestAll.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/TestAll.java?ref=787e2fca5b8e1176299dfa3e95d6d437fa8e7433"
            }
        ],
        "bug_id": "jackrabbit_44",
        "parent": "https://github.com/apache/jackrabbit/commit/fd2f40b7d6d5a7d4f9aaca099cce1c7913271f59",
        "message": "JCR-2067 FileDataStore: only open a stream when really necessary - close() can throw a NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@779081 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/5985fda10a7102209a6c04a03fd0440e0257984b",
        "file": [
            {
                "patch": "@@ -2151,7 +2151,8 @@ public void externalUpdate(ChangeLog external,\n                                    String userData) throws RepositoryException {\n             try {\n                 EventStateCollection esc = new EventStateCollection(\n-                        getObservationDispatcher(), null, null, userData);\n+                        getObservationDispatcher(), null, null);\n+                esc.setUserData(userData);\n                 esc.addAll(events);\n                 esc.setTimestamp(timestamp);\n ",
                "additions": 2,
                "raw_url": "https://github.com/apache/jackrabbit/raw/5985fda10a7102209a6c04a03fd0440e0257984b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/RepositoryImpl.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "a9cb344e870f5ec663265f511c37e4c268968614",
                "blob_url": "https://github.com/apache/jackrabbit/blob/5985fda10a7102209a6c04a03fd0440e0257984b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/RepositoryImpl.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/RepositoryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/RepositoryImpl.java?ref=5985fda10a7102209a6c04a03fd0440e0257984b"
            },
            {
                "patch": "@@ -25,8 +25,6 @@\n import java.util.HashSet;\n import java.util.List;\n \n-import javax.jcr.RepositoryException;\n-\n /**\n  * This Class implements an observation dispatcher, that delegates events to\n  * a set of underlying dispatchers.\n@@ -73,16 +71,9 @@ public void removeDispatcher(ObservationDispatcher dispatcher) {\n      * @param pathPrefix event path prefix\n      * @return new <code>EventStateCollection</code> instance\n      */\n-    public EventStateCollection createEventStateCollection(SessionImpl session,\n-                                                           Path pathPrefix) {\n-        String userData = null;\n-        try {\n-            userData = ((ObservationManagerImpl) session.getWorkspace().getObservationManager()).getUserData();\n-        } catch (RepositoryException e) {\n-            // should never happen because this\n-            // implementation supports observation\n-        }\n-        return new EventStateCollection(this, session, pathPrefix, userData);\n+    public EventStateCollection createEventStateCollection(\n+            SessionImpl session, Path pathPrefix) {\n+        return new EventStateCollection(this, session, pathPrefix);\n     }\n \n     //------------------------------------------------------< EventDispatcher >\n@@ -128,8 +119,8 @@ public void dispatch(List eventList, SessionImpl session,\n         }\n         for (int i = 0; i < disp.length; i++) {\n             EventStateCollection events =\n-                    new EventStateCollection(disp[i], session,\n-                            pathPrefix, userData);\n+                    new EventStateCollection(disp[i], session, pathPrefix);\n+            events.setUserData(userData);\n             try {\n                 events.addAll(eventList);\n                 events.prepare();",
                "additions": 5,
                "raw_url": "https://github.com/apache/jackrabbit/raw/5985fda10a7102209a6c04a03fd0440e0257984b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/DelegatingObservationDispatcher.java",
                "status": "modified",
                "changes": 19,
                "deletions": 14,
                "sha": "1023b8e24e6d159673ff97de67adf0ef23c40820",
                "blob_url": "https://github.com/apache/jackrabbit/blob/5985fda10a7102209a6c04a03fd0440e0257984b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/DelegatingObservationDispatcher.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/DelegatingObservationDispatcher.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/DelegatingObservationDispatcher.java?ref=5985fda10a7102209a6c04a03fd0440e0257984b"
            },
            {
                "patch": "@@ -37,6 +37,8 @@\n \n import javax.jcr.PathNotFoundException;\n import javax.jcr.RepositoryException;\n+import javax.jcr.observation.ObservationManager;\n+\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Iterator;\n@@ -109,16 +111,26 @@\n      * @param session    the session that created these events.\n      * @param pathPrefix the path to prefix the event paths or <code>null</code>\n      *                   if no prefix should be used.\n-     * @param userData   the user data attached to this event state collection.\n      */\n     public EventStateCollection(EventDispatcher dispatcher,\n                                 SessionImpl session,\n-                                Path pathPrefix,\n-                                String userData) {\n+                                Path pathPrefix) {\n         this.dispatcher = dispatcher;\n         this.session = session;\n         this.pathPrefix = pathPrefix;\n-        this.userData = userData;\n+        if (session != null) {\n+            try {\n+                ObservationManager manager =\n+                    session.getWorkspace().getObservationManager();\n+                this.userData = ((ObservationManagerImpl) manager).getUserData();\n+            } catch (RepositoryException e) {\n+                // should never happen because this\n+                // implementation supports observation\n+                this.userData = null;\n+            }\n+        } else {\n+            this.userData = null;\n+        }\n     }\n \n     /**",
                "additions": 16,
                "raw_url": "https://github.com/apache/jackrabbit/raw/5985fda10a7102209a6c04a03fd0440e0257984b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/EventStateCollection.java",
                "status": "modified",
                "changes": 20,
                "deletions": 4,
                "sha": "e91f5775414e34bde71013039eed4613121e534f",
                "blob_url": "https://github.com/apache/jackrabbit/blob/5985fda10a7102209a6c04a03fd0440e0257984b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/EventStateCollection.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/EventStateCollection.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/EventStateCollection.java?ref=5985fda10a7102209a6c04a03fd0440e0257984b"
            },
            {
                "patch": "@@ -229,6 +229,8 @@ public EventFilter createEventFilter(int eventTypes,\n      * which is attached to this <code>ObservationManager</code> instance.\n      */\n     public EventStateCollection createEventStateCollection() {\n-        return new EventStateCollection(dispatcher, session, null, userData);\n+        EventStateCollection esc = new EventStateCollection(dispatcher, session, null);\n+        esc.setUserData(userData);\n+        return esc;\n     }\n }",
                "additions": 3,
                "raw_url": "https://github.com/apache/jackrabbit/raw/5985fda10a7102209a6c04a03fd0440e0257984b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ObservationManagerImpl.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "5c53b1782bfc4a7fd366d04bff7351a06fa03b67",
                "blob_url": "https://github.com/apache/jackrabbit/blob/5985fda10a7102209a6c04a03fd0440e0257984b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ObservationManagerImpl.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ObservationManagerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ObservationManagerImpl.java?ref=5985fda10a7102209a6c04a03fd0440e0257984b"
            }
        ],
        "bug_id": "jackrabbit_45",
        "parent": "https://github.com/apache/jackrabbit/commit/54ac4bcd680a041703893c78f0cb48a6bde79e7a",
        "message": "JCR-1949: NullPointerException on DelegatingObservationDispatcher cause by parameter null on call : createEventStateCollection(null)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@745824 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/9dbf8ce74b6a9bbfc50868b1482193d78a34476f",
        "file": [
            {
                "patch": "@@ -182,13 +182,17 @@ public void testNullDateValue() throws IOException, RepositoryException {\n             factory.create((Calendar) null);\n             fail();\n         } catch (IllegalArgumentException e) {\n-            // ok\n+          // ok\n+        } catch (NullPointerException e) {\n+          // ok\n         }\n         try {\n             factory.create(null, PropertyType.DATE);\n             fail();\n         } catch (IllegalArgumentException e) {\n-            // ok\n+          // ok\n+        } catch (NullPointerException e) {\n+          // ok\n         }\n     }\n \n@@ -215,7 +219,9 @@ public void testNullReferenceValue() throws IOException, RepositoryException {\n             factory.create(null, PropertyType.REFERENCE);\n             fail();\n         } catch (IllegalArgumentException e) {\n-            // ok\n+          // ok\n+        } catch (NullPointerException e) {\n+          // ok\n         }\n     }\n \n@@ -256,7 +262,9 @@ public void testNullNameValue() throws IOException, RepositoryException {\n             factory.create((Name) null);\n             fail();\n         } catch (IllegalArgumentException e) {\n-            // ok\n+          // ok\n+        } catch (NullPointerException e) {\n+          // ok\n         }\n     }\n \n@@ -308,7 +316,9 @@ public void testNullPathValue() throws IOException, RepositoryException {\n             factory.create((Path) null);\n             fail();\n         } catch (IllegalArgumentException e) {\n-            // ok\n+          // ok\n+        } catch (NullPointerException e) {\n+          // ok\n         }\n     }\n \n@@ -361,19 +371,25 @@ public void testNullBinaryValue() throws IOException, RepositoryException {\n             factory.create((byte[]) null);\n             fail();\n         } catch (IllegalArgumentException e) {\n-            // ok\n+          // ok\n+        } catch (NullPointerException e) {\n+          // ok\n         }\n         try {\n             factory.create((InputStream) null);\n             fail();\n         } catch (IllegalArgumentException e) {\n-            // ok\n+          // ok\n+        } catch (NullPointerException e) {\n+          // ok\n         }\n         try {\n             factory.create((File) null);\n             fail();\n         } catch (IllegalArgumentException e) {\n-            // ok\n+          // ok\n+        } catch (NullPointerException e) {\n+          // ok\n         }\n     }\n ",
                "additions": 24,
                "raw_url": "https://github.com/apache/jackrabbit/raw/9dbf8ce74b6a9bbfc50868b1482193d78a34476f/jackrabbit-spi/src/test/java/org/apache/jackrabbit/spi/QValueFactoryTest.java",
                "status": "modified",
                "changes": 32,
                "deletions": 8,
                "sha": "f9c830f98e1dc14b3d18561066cc5868b8192b36",
                "blob_url": "https://github.com/apache/jackrabbit/blob/9dbf8ce74b6a9bbfc50868b1482193d78a34476f/jackrabbit-spi/src/test/java/org/apache/jackrabbit/spi/QValueFactoryTest.java",
                "filename": "jackrabbit-spi/src/test/java/org/apache/jackrabbit/spi/QValueFactoryTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-spi/src/test/java/org/apache/jackrabbit/spi/QValueFactoryTest.java?ref=9dbf8ce74b6a9bbfc50868b1482193d78a34476f"
            }
        ],
        "bug_id": "jackrabbit_46",
        "parent": "https://github.com/apache/jackrabbit/commit/c316aa357cffac2c1a00e6185eeaaccdeaedefa5",
        "message": "In the tests for creating QValue instances with null values, also consider a NullPointerException as legal (in addition to IllegalArgumentException)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@706660 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/790743e39e6c863c8799ec18b8cad1a70e0047fb",
        "file": [
            {
                "patch": "@@ -188,8 +188,10 @@ public void run() {\n             synchronized (Timer.this) {\n                 if (numScheduledTasks == 0 &&\n                         System.currentTimeMillis() > lastTaskScheduled + IDLE_TIME) {\n-                    delegatee.cancel();\n-                    delegatee = null;\n+                    if (delegatee != null) {\n+                        delegatee.cancel();\n+                        delegatee = null;\n+                    }\n                 }\n             }\n         }",
                "additions": 4,
                "raw_url": "https://github.com/apache/jackrabbit/raw/790743e39e6c863c8799ec18b8cad1a70e0047fb/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/util/Timer.java",
                "status": "modified",
                "changes": 6,
                "deletions": 2,
                "sha": "f35eca1bec675883705e40b6914af77f76660d03",
                "blob_url": "https://github.com/apache/jackrabbit/blob/790743e39e6c863c8799ec18b8cad1a70e0047fb/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/util/Timer.java",
                "filename": "jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/util/Timer.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/util/Timer.java?ref=790743e39e6c863c8799ec18b8cad1a70e0047fb"
            }
        ],
        "bug_id": "jackrabbit_47",
        "parent": "https://github.com/apache/jackrabbit/commit/94f74654e2bb435e0de8599d156b689302deab32",
        "message": "JCR-1486: Introduce Timer idle time\n- NullPointerException may happen when idle checker task runs while Timer.cancel() is called.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@638867 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/79c89fe5025b873a5bb8297795f9d89301b0b708",
        "file": [
            {
                "patch": "@@ -38,8 +38,7 @@ public Restore(Session s, String path) {\n     public NodeIterator execute() throws Exception {\n         Node n = getNode();\n         Version v = getRandomVersion(false);\n-        // TODO: for now only call restore on non-base versions. See: JCR-1476\n-        if (v != null && !n.getBaseVersion().isSame(v)) {\n+        if (v != null) {\n             log.info(n.getPath() + \":\" + v.getName());\n             n.restore(v, true);\n         }",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/79c89fe5025b873a5bb8297795f9d89301b0b708/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/integration/random/operation/Restore.java",
                "status": "modified",
                "changes": 3,
                "deletions": 2,
                "sha": "98f3953c4452377ebea771fcd44a160ef5f1dff4",
                "blob_url": "https://github.com/apache/jackrabbit/blob/79c89fe5025b873a5bb8297795f9d89301b0b708/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/integration/random/operation/Restore.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/integration/random/operation/Restore.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/integration/random/operation/Restore.java?ref=79c89fe5025b873a5bb8297795f9d89301b0b708"
            }
        ],
        "bug_id": "jackrabbit_48",
        "parent": "https://github.com/apache/jackrabbit/commit/73e1867b08af94ed615ee3746fd07793504b3ba1",
        "message": "JCR-1476: Restore to base version throws NullPointerException\n- remove workaround in test case\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@638821 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/4564500e7d54727a66ebc6ee5de082ecf9bb3f34",
        "file": [
            {
                "patch": "@@ -134,7 +134,8 @@ public static void setNestedProperty(Object object, String fieldName, Object val\n             PropertyUtils.setNestedProperty(object, fieldName, value);\n         }\n         catch(Exception ex) {\n-            throw new JcrMappingException(\"Cannot set the field \" + fieldName + \" in the class : \" + object.getClass().toString(),\n+            String className = (object == null) ? \"<null>\" : object.getClass().getName();\n+            throw new JcrMappingException(\"Cannot set the field \" + fieldName + \" in the class : \" + className,\n                     ex);\n         }\n     }",
                "additions": 2,
                "raw_url": "https://github.com/apache/jackrabbit/raw/4564500e7d54727a66ebc6ee5de082ecf9bb3f34/contrib/jackrabbit-jcr-mapping/jcr-mapping/src/main/java/org/apache/jackrabbit/ocm/reflection/ReflectionUtils.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "28f0a96e91f5202b8a6244f4fed00063366c3068",
                "blob_url": "https://github.com/apache/jackrabbit/blob/4564500e7d54727a66ebc6ee5de082ecf9bb3f34/contrib/jackrabbit-jcr-mapping/jcr-mapping/src/main/java/org/apache/jackrabbit/ocm/reflection/ReflectionUtils.java",
                "filename": "contrib/jackrabbit-jcr-mapping/jcr-mapping/src/main/java/org/apache/jackrabbit/ocm/reflection/ReflectionUtils.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/contrib/jackrabbit-jcr-mapping/jcr-mapping/src/main/java/org/apache/jackrabbit/ocm/reflection/ReflectionUtils.java?ref=4564500e7d54727a66ebc6ee5de082ecf9bb3f34"
            }
        ],
        "bug_id": "jackrabbit_49",
        "parent": "https://github.com/apache/jackrabbit/commit/525a8bc41d6d0c84d6e310461df4f5da01e08dd1",
        "message": "Prevent NullPointerException if the bean property cannot be set because the bean is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@574860 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/df083ff3203a72072661279b6cc77d6d85f01487",
        "file": [
            {
                "patch": "@@ -1007,7 +1007,6 @@ protected synchronized boolean reestablishConnection() {\n         for (Iterator it = preparedStatements.values().iterator(); it.hasNext(); ) {\n             closeStatement((PreparedStatement) it.next());\n         }\n-        preparedStatements.clear();\n         try {\n             closeConnection(con);\n         } catch (Exception ignore) {",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/df083ff3203a72072661279b6cc77d6d85f01487/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/fs/db/DatabaseFileSystem.java",
                "status": "modified",
                "changes": 1,
                "deletions": 1,
                "sha": "cf50dc10313bf92967812f89cff10f91ca0f3f24",
                "blob_url": "https://github.com/apache/jackrabbit/blob/df083ff3203a72072661279b6cc77d6d85f01487/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/fs/db/DatabaseFileSystem.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/fs/db/DatabaseFileSystem.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/fs/db/DatabaseFileSystem.java?ref=df083ff3203a72072661279b6cc77d6d85f01487"
            },
            {
                "patch": "@@ -780,7 +780,6 @@ protected synchronized boolean reestablishConnection() {\n         for (Iterator it = preparedStatements.values().iterator(); it.hasNext(); ) {\n             closeStatement((PreparedStatement) it.next());\n         }\n-        preparedStatements.clear();\n         try {\n             closeConnection(con);\n         } catch (Exception ignore) {",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/df083ff3203a72072661279b6cc77d6d85f01487/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java",
                "status": "modified",
                "changes": 1,
                "deletions": 1,
                "sha": "5b6164270d1c6e8cea5fa31f284e5014c68e3209",
                "blob_url": "https://github.com/apache/jackrabbit/blob/df083ff3203a72072661279b6cc77d6d85f01487/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java?ref=df083ff3203a72072661279b6cc77d6d85f01487"
            }
        ],
        "bug_id": "jackrabbit_50",
        "parent": "https://github.com/apache/jackrabbit/commit/7dd9250787ef432943baf5ade4be981851a14a47",
        "message": "JCR-710: NullPointerException in DatabasePersistenceManager and DatabaseFileSystem after a failed reconnection attempt\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@497392 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/37e9b799b87f8456e2a38112239d5f889a05bed8",
        "file": [
            {
                "patch": "@@ -119,9 +119,14 @@ public void orderBefore(String src, String dst) throws RepositoryException {\n     public Property setProperty(String name, Value value)\n             throws RepositoryException {\n         try {\n-            RemoteProperty property =\n-                remote.setProperty(name, SerialValueFactory.makeSerialValue(value));\n-            return getFactory().getProperty(getSession(), property);\n+            if (value == null) {\n+                remote.setProperty(name, (Value) null);\n+                return null;\n+            } else {\n+                RemoteProperty property = remote.setProperty(\n+                        name, SerialValueFactory.makeSerialValue(value));\n+                return getFactory().getProperty(getSession(), property);\n+            }\n         } catch (RemoteException ex) {\n             throw new RemoteRepositoryException(ex);\n         }\n@@ -131,9 +136,14 @@ public Property setProperty(String name, Value value)\n     public Property setProperty(String name, Value[] values)\n             throws RepositoryException {\n         try {\n-            Value[] serials = SerialValueFactory.makeSerialValueArray(values);\n-            RemoteProperty property = remote.setProperty(name, serials);\n-            return getFactory().getProperty(getSession(), property);\n+            if (values == null) {\n+                remote.setProperty(name, (Value[]) null);\n+                return null;\n+            } else {\n+                Value[] serials = SerialValueFactory.makeSerialValueArray(values);\n+                RemoteProperty property = remote.setProperty(name, serials);\n+                return getFactory().getProperty(getSession(), property);\n+            }\n         } catch (RemoteException ex) {\n             throw new RemoteRepositoryException(ex);\n         }\n@@ -142,23 +152,35 @@ public Property setProperty(String name, Value[] values)\n     /** {@inheritDoc} */\n     public Property setProperty(String name, String[] strings)\n             throws RepositoryException {\n-        Value[] values = new Value[strings.length];\n-        for (int i = 0; i < strings.length; i++) {\n-            values[i] = getSession().getValueFactory().createValue(strings[i]);\n+        if (strings == null) {\n+            return setProperty(name, (Value[]) null);\n+        } else {\n+            Value[] values = new Value[strings.length];\n+            for (int i = 0; i < strings.length; i++) {\n+                values[i] = getSession().getValueFactory().createValue(strings[i]);\n+            }\n+            return setProperty(name, values);\n         }\n-        return setProperty(name, values);\n     }\n \n     /** {@inheritDoc} */\n     public Property setProperty(String name, String value)\n             throws RepositoryException {\n-        return setProperty(name, getSession().getValueFactory().createValue(value));\n+        if (value == null) {\n+            return setProperty(name, (Value) null);\n+        } else {\n+            return setProperty(name, getSession().getValueFactory().createValue(value));\n+        }\n     }\n \n     /** {@inheritDoc} */\n     public Property setProperty(String name, InputStream value)\n             throws RepositoryException {\n-        return setProperty(name, getSession().getValueFactory().createValue(value));\n+        if (value == null) {\n+            return setProperty(name, (Value) null);\n+        } else {\n+            return setProperty(name, getSession().getValueFactory().createValue(value));\n+        }\n     }\n \n     /** {@inheritDoc} */\n@@ -182,13 +204,21 @@ public Property setProperty(String name, long value)\n     /** {@inheritDoc} */\n     public Property setProperty(String name, Calendar value)\n             throws RepositoryException {\n-        return setProperty(name, getSession().getValueFactory().createValue(value));\n+        if (value == null) {\n+            return setProperty(name, (Value) null);\n+        } else {\n+            return setProperty(name, getSession().getValueFactory().createValue(value));\n+        }\n     }\n \n     /** {@inheritDoc} */\n     public Property setProperty(String name, Node value)\n             throws RepositoryException {\n-        return setProperty(name, getSession().getValueFactory().createValue(value));\n+        if (value == null) {\n+            return setProperty(name, (Value) null);\n+        } else {\n+            return setProperty(name, getSession().getValueFactory().createValue(value));\n+        }\n     }\n \n     /** {@inheritDoc} */",
                "additions": 44,
                "raw_url": "https://github.com/apache/jackrabbit/raw/37e9b799b87f8456e2a38112239d5f889a05bed8/jcr-rmi/src/java/org/apache/jackrabbit/rmi/client/ClientNode.java",
                "status": "modified",
                "changes": 58,
                "deletions": 14,
                "sha": "ae24daa81e325a132e57cf8ca904f41bf22a7a36",
                "blob_url": "https://github.com/apache/jackrabbit/blob/37e9b799b87f8456e2a38112239d5f889a05bed8/jcr-rmi/src/java/org/apache/jackrabbit/rmi/client/ClientNode.java",
                "filename": "jcr-rmi/src/java/org/apache/jackrabbit/rmi/client/ClientNode.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jcr-rmi/src/java/org/apache/jackrabbit/rmi/client/ClientNode.java?ref=37e9b799b87f8456e2a38112239d5f889a05bed8"
            },
            {
                "patch": "@@ -165,7 +165,11 @@ public void setValue(boolean value) throws RepositoryException {\n      * {@inheritDoc}\n      */\n     public void setValue(Calendar value) throws RepositoryException {\n-        setValue(getSession().getValueFactory().createValue(value));\n+        if (value == null) {\n+            setValue((Value) null);\n+        } else {\n+            setValue(getSession().getValueFactory().createValue(value));\n+        }\n     }\n \n     /**\n@@ -185,7 +189,11 @@ public void setValue(double value) throws RepositoryException {\n      * {@inheritDoc}\n      */\n     public void setValue(InputStream value) throws RepositoryException {\n-        setValue(getSession().getValueFactory().createValue(value));\n+        if (value == null) {\n+            setValue((Value) null);\n+        } else {\n+            setValue(getSession().getValueFactory().createValue(value));\n+        }\n     }\n \n     /**\n@@ -205,7 +213,11 @@ public void setValue(long value) throws RepositoryException {\n      * {@inheritDoc}\n      */\n     public void setValue(Node value) throws RepositoryException {\n-        setValue(getSession().getValueFactory().createValue(value));\n+        if (value == null) {\n+            setValue((Value) null);\n+        } else {\n+            setValue(getSession().getValueFactory().createValue(value));\n+        }\n     }\n \n     /**\n@@ -215,7 +227,11 @@ public void setValue(Node value) throws RepositoryException {\n      * {@inheritDoc}\n      */\n     public void setValue(String value) throws RepositoryException {\n-        setValue(getSession().getValueFactory().createValue(value));\n+        if (value == null) {\n+            setValue((Value) null);\n+        } else {\n+            setValue(getSession().getValueFactory().createValue(value));\n+        }\n     }\n \n     /**\n@@ -225,17 +241,25 @@ public void setValue(String value) throws RepositoryException {\n      * {@inheritDoc}\n      */\n     public void setValue(String[] strings) throws RepositoryException {\n-        Value[] values = new Value[strings.length];\n-        for (int i = 0; i < strings.length; i++) {\n-            values[i] = getSession().getValueFactory().createValue(strings[i]);\n+        if (strings == null) {\n+            setValue((Value[]) null);\n+        } else {\n+            Value[] values = new Value[strings.length];\n+            for (int i = 0; i < strings.length; i++) {\n+                values[i] = getSession().getValueFactory().createValue(strings[i]);\n+            }\n+            setValue(values);\n         }\n-        setValue(values);\n     }\n \n     /** {@inheritDoc} */\n     public void setValue(Value value) throws RepositoryException {\n         try {\n-            remote.setValue(SerialValueFactory.makeSerialValue(value));\n+            if (value == null) {\n+                remote.setValue((Value) null);\n+            } else {\n+                remote.setValue(SerialValueFactory.makeSerialValue(value));\n+            }\n         } catch (RemoteException ex) {\n             throw new RemoteRepositoryException(ex);\n         }\n@@ -244,7 +268,11 @@ public void setValue(Value value) throws RepositoryException {\n     /** {@inheritDoc} */\n     public void setValue(Value[] values) throws RepositoryException {\n         try {\n-            remote.setValue(SerialValueFactory.makeSerialValueArray(values));\n+            if (values == null) {\n+                remote.setValue((Value[]) null);\n+            } else {\n+                remote.setValue(SerialValueFactory.makeSerialValueArray(values));\n+            }\n         } catch (RemoteException ex) {\n             throw new RemoteRepositoryException(ex);\n         }",
                "additions": 38,
                "raw_url": "https://github.com/apache/jackrabbit/raw/37e9b799b87f8456e2a38112239d5f889a05bed8/jcr-rmi/src/java/org/apache/jackrabbit/rmi/client/ClientProperty.java",
                "status": "modified",
                "changes": 48,
                "deletions": 10,
                "sha": "bcde810516fb635d519e6affbb3617baf11ad20e",
                "blob_url": "https://github.com/apache/jackrabbit/blob/37e9b799b87f8456e2a38112239d5f889a05bed8/jcr-rmi/src/java/org/apache/jackrabbit/rmi/client/ClientProperty.java",
                "filename": "jcr-rmi/src/java/org/apache/jackrabbit/rmi/client/ClientProperty.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jcr-rmi/src/java/org/apache/jackrabbit/rmi/client/ClientProperty.java?ref=37e9b799b87f8456e2a38112239d5f889a05bed8"
            },
            {
                "patch": "@@ -253,7 +253,12 @@ public RemoteProperty setProperty(String name, Value value)\n     public RemoteProperty setProperty(String name, Value value, int type)\n             throws RepositoryException, RemoteException {\n         try {\n-            return getFactory().getRemoteProperty(node.setProperty(name, value, type));\n+            Property property = node.setProperty(name, value, type);\n+            if (property == null) {\n+                return null;\n+            } else {\n+                return getFactory().getRemoteProperty(property);\n+            }\n         } catch (RepositoryException ex) {\n             throw getRepositoryException(ex);\n         }\n@@ -304,7 +309,11 @@ public RemoteProperty setProperty(String name, Value[] values)\n             throws RepositoryException, RemoteException {\n         try {\n             Property property = node.setProperty(name, values);\n-            return getFactory().getRemoteProperty(property);\n+            if (property == null) {\n+                return null;\n+            } else {\n+                return getFactory().getRemoteProperty(property);\n+            }\n         } catch (RepositoryException ex) {\n             throw getRepositoryException(ex);\n         }",
                "additions": 11,
                "raw_url": "https://github.com/apache/jackrabbit/raw/37e9b799b87f8456e2a38112239d5f889a05bed8/jcr-rmi/src/java/org/apache/jackrabbit/rmi/server/ServerNode.java",
                "status": "modified",
                "changes": 13,
                "deletions": 2,
                "sha": "0432a6816990231b03968c73883bc5459ff125b7",
                "blob_url": "https://github.com/apache/jackrabbit/blob/37e9b799b87f8456e2a38112239d5f889a05bed8/jcr-rmi/src/java/org/apache/jackrabbit/rmi/server/ServerNode.java",
                "filename": "jcr-rmi/src/java/org/apache/jackrabbit/rmi/server/ServerNode.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jcr-rmi/src/java/org/apache/jackrabbit/rmi/server/ServerNode.java?ref=37e9b799b87f8456e2a38112239d5f889a05bed8"
            }
        ],
        "bug_id": "jackrabbit_51",
        "parent": "https://github.com/apache/jackrabbit/commit/06b99750de417a52604e990e79d237f8c2f5051e",
        "message": "JCR-420: Avoid NullPointerExceptions when removing property values using calls like Property.setValue(null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@399638 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/58680f1f3a6a4334361537f519647a8c2437eb84",
        "file": [
            {
                "patch": "@@ -164,14 +164,13 @@ private void initOrderedIterator() {\n         do {\n             if (invalidUUIDs.size() > 0) {\n                 // previous sort run was not successful -> remove failed uuids\n-                ScoreNode[] tmp = new ScoreNode[nodes.length - invalidUUIDs.size()];\n-                int newIdx = 0;\n+                List tmp = new ArrayList();\n                 for (int i = 0; i < nodes.length; i++) {\n                     if (!invalidUUIDs.contains(nodes[i].uuid)) {\n-                        tmp[newIdx++] = nodes[i];\n+                        tmp.add(nodes[i]);\n                     }\n                 }\n-                nodes = tmp;\n+                nodes = (ScoreNode[]) tmp.toArray(new ScoreNode[tmp.size()]);\n                 invalidUUIDs.clear();\n             }\n ",
                "additions": 3,
                "raw_url": "https://github.com/apache/jackrabbit/raw/58680f1f3a6a4334361537f519647a8c2437eb84/src/java/org/apache/jackrabbit/core/query/lucene/DocOrderNodeIteratorImpl.java",
                "status": "modified",
                "changes": 7,
                "deletions": 4,
                "sha": "a6bdfcabae059de161cf34d8f6074596b7978306",
                "blob_url": "https://github.com/apache/jackrabbit/blob/58680f1f3a6a4334361537f519647a8c2437eb84/src/java/org/apache/jackrabbit/core/query/lucene/DocOrderNodeIteratorImpl.java",
                "filename": "src/java/org/apache/jackrabbit/core/query/lucene/DocOrderNodeIteratorImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/src/java/org/apache/jackrabbit/core/query/lucene/DocOrderNodeIteratorImpl.java?ref=58680f1f3a6a4334361537f519647a8c2437eb84"
            }
        ],
        "bug_id": "jackrabbit_52",
        "parent": "https://github.com/apache/jackrabbit/commit/3720552cb513952a2810ea401880806abccc875b",
        "message": "- DocOrderNodeIteratorImpl may throw NullPointerException in initOrderedIterator() if invalidUUIDs contains duplicate uuids.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@290665 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/8e3bf52bc35c37d42e841e44843a196391ff4943",
        "file": [
            {
                "patch": "@@ -419,7 +419,7 @@ private EffectiveNodeType validateNodeTypeDef(NodeTypeDef ntd)\n \n         // validate supertypes\n         QName[] supertypes = ntd.getSupertypes();\n-        if (supertypes != null) {\n+        if (supertypes != null && supertypes.length > 0) {\n             for (int i = 0; i < supertypes.length; i++) {\n                 // simple check for infinite recursion\n                 // (won't trap recursion on a deeper inheritance level)\n@@ -434,12 +434,12 @@ private EffectiveNodeType validateNodeTypeDef(NodeTypeDef ntd)\n                     throw new InvalidNodeTypeDefException(reason);\n                 }\n             }\n-        }\n \n-        // check for circularity in inheritance chain ('a' extends 'b' extends 'a'):\n-        Stack inheritanceChain = new Stack();\n-        inheritanceChain.push(name);\n-        checkForCircularInheritance(supertypes, inheritanceChain);\n+            // check for circularity in inheritance chain ('a' extends 'b' extends 'a'):\n+            Stack inheritanceChain = new Stack();\n+            inheritanceChain.push(name);\n+            checkForCircularInheritance(supertypes, inheritanceChain);\n+        }\n \n         /**\n          * note that infinite recursion through inheritance is automatically being checked",
                "additions": 6,
                "raw_url": "https://github.com/apache/jackrabbit/raw/8e3bf52bc35c37d42e841e44843a196391ff4943/src/java/org/apache/jackrabbit/core/nodetype/NodeTypeRegistry.java",
                "status": "modified",
                "changes": 12,
                "deletions": 6,
                "sha": "65efa1231704212304df4aea957c2874ae819cc8",
                "blob_url": "https://github.com/apache/jackrabbit/blob/8e3bf52bc35c37d42e841e44843a196391ff4943/src/java/org/apache/jackrabbit/core/nodetype/NodeTypeRegistry.java",
                "filename": "src/java/org/apache/jackrabbit/core/nodetype/NodeTypeRegistry.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/src/java/org/apache/jackrabbit/core/nodetype/NodeTypeRegistry.java?ref=8e3bf52bc35c37d42e841e44843a196391ff4943"
            }
        ],
        "bug_id": "jackrabbit_53",
        "parent": "https://github.com/apache/jackrabbit/commit/9c877bd5e5301a28846412aecab609bd71230334",
        "message": "fixed http://nagoya.apache.org/jira/browse/JCR-21 :\nNodeTypeRegistry.validateNodeTypeDef causes NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@106172 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/bf46c1b721699a2469da215b26fcd27ea6c20640",
        "file": [
            {
                "patch": "@@ -246,7 +246,7 @@ protected QueryResult execute(JoinMerger merger,\n                 merger.getRightSelectors());\n \n         if (leftRows == null || leftRows.isEmpty()) {\n-            return merger.merge(new RowIteratorAdapter(leftRows),\n+            return merger.merge(new RowIteratorAdapter((leftRows == null) ? Collections.emptySet() : leftRows),\n                     new RowIteratorAdapter(new TreeSet<Row>()), null, rightCo);\n         }\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/bf46c1b721699a2469da215b26fcd27ea6c20640/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/join/QueryEngine.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "11716774086ec47d97fb40777144f54119b0f853",
                "blob_url": "https://github.com/apache/jackrabbit/blob/bf46c1b721699a2469da215b26fcd27ea6c20640/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/join/QueryEngine.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/join/QueryEngine.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/join/QueryEngine.java?ref=bf46c1b721699a2469da215b26fcd27ea6c20640"
            }
        ],
        "bug_id": "jackrabbit_54",
        "parent": "https://github.com/apache/jackrabbit/commit/98dc67b8c6348ac2e12c9de516d04dd0ee164e3f",
        "message": "guard against NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1566430 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/d246283cb60de501463aab99e3038a6d966ad6ba",
        "file": [
            {
                "patch": "@@ -152,8 +152,11 @@ protected String doHighlight(TermPositionVector tvec,\n         Iterator<Term[]> it = queryTerms.iterator();\n         while (it.hasNext()) {\n             Term[] qt = it.next();\n+            if (qt == null) {\n+                continue;\n+            }\n             final int qtLen = qt.length;\n-            if (qt == null || qtLen == 0) {\n+            if (qtLen == 0) {\n                 continue;\n             }\n             String[] qtText = new String[qtLen];",
                "additions": 4,
                "raw_url": "https://github.com/apache/jackrabbit/raw/d246283cb60de501463aab99e3038a6d966ad6ba/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/DefaultHighlighter.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "6628880145c08a5d496b2722aba23ac1ac8b022e",
                "blob_url": "https://github.com/apache/jackrabbit/blob/d246283cb60de501463aab99e3038a6d966ad6ba/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/DefaultHighlighter.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/DefaultHighlighter.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/DefaultHighlighter.java?ref=d246283cb60de501463aab99e3038a6d966ad6ba"
            }
        ],
        "bug_id": "jackrabbit_55",
        "parent": "https://github.com/apache/jackrabbit/commit/b896752f76c9b06276b54b86c0426adf215f9b4d",
        "message": "guard against npes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1177524 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/1dbf453b95de047ca9d8fcd8c187f9e65b5382c0",
        "file": [
            {
                "patch": "@@ -284,8 +284,10 @@ protected NodeTypeRegistry getNodeTypeRegistry() {\n      * @param state\n      */\n     protected NodeState cache(NodeState state) {\n-        nodes.put(state.getId(), state);\n-        log.debug(\"item added to cache. size=\" + nodes.size());\n+        if (state != null) {\n+            nodes.put(state.getId(), state);\n+            log.debug(\"item added to cache. size=\" + nodes.size());\n+        }\n         return state;\n     }\n ",
                "additions": 4,
                "raw_url": "https://github.com/apache/jackrabbit/raw/1dbf453b95de047ca9d8fcd8c187f9e65b5382c0/src/java/org/apache/jackrabbit/core/virtual/AbstractVISProvider.java",
                "status": "modified",
                "changes": 6,
                "deletions": 2,
                "sha": "06f48c73adfba505c9c243d34f4c8d593f082883",
                "blob_url": "https://github.com/apache/jackrabbit/blob/1dbf453b95de047ca9d8fcd8c187f9e65b5382c0/src/java/org/apache/jackrabbit/core/virtual/AbstractVISProvider.java",
                "filename": "src/java/org/apache/jackrabbit/core/virtual/AbstractVISProvider.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/src/java/org/apache/jackrabbit/core/virtual/AbstractVISProvider.java?ref=1dbf453b95de047ca9d8fcd8c187f9e65b5382c0"
            }
        ],
        "bug_id": "jackrabbit_56",
        "parent": "https://github.com/apache/jackrabbit/commit/518afbd2e4573a4110bcb1d2819005bdd0ec8788",
        "message": "- fixing npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@158601 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/97288e64c29599e07e537f5a2c17ce0ccadc46e7",
        "file": [
            {
                "patch": "@@ -87,19 +87,22 @@\n      *                belongs to.\n      * @param itemMgr {@link org.apache.jackrabbit.core.ItemManager} of the passed\n      *                <code>Session</code>.\n-     * @throws NullPointerException if <code>session</code> or <code>itemMgr</code>\n-     *                              is <code>null</code>.\n+     * @throws NullPointerException if <code>dispatcher</code>, <code>session</code>\n+     *                              or <code>itemMgr</code> is <code>null</code>.\n      */\n     public ObservationManagerImpl(\n             ObservationDispatcher dispatcher, SessionImpl session,\n             ItemManager itemMgr, ClusterNode clusterNode) {\n+        if (dispatcher == null) {\n+            throw new NullPointerException(\"dispatcher\");\n+        }\n         if (session == null) {\n             throw new NullPointerException(\"session\");\n         }\n         if (itemMgr == null) {\n             throw new NullPointerException(\"itemMgr\");\n         }\n-\n+        \n         this.dispatcher = dispatcher;\n         this.session = session;\n         this.itemMgr = itemMgr;",
                "additions": 6,
                "raw_url": "https://github.com/apache/jackrabbit/raw/97288e64c29599e07e537f5a2c17ce0ccadc46e7/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ObservationManagerImpl.java",
                "status": "modified",
                "changes": 9,
                "deletions": 3,
                "sha": "285854025295ed76ef7c50f588a5a2dcc668176f",
                "blob_url": "https://github.com/apache/jackrabbit/blob/97288e64c29599e07e537f5a2c17ce0ccadc46e7/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ObservationManagerImpl.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ObservationManagerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ObservationManagerImpl.java?ref=97288e64c29599e07e537f5a2c17ce0ccadc46e7"
            }
        ],
        "bug_id": "jackrabbit_57",
        "parent": "https://github.com/apache/jackrabbit/commit/7b909badc488aaf11f98253b382b9a7176fec076",
        "message": "JCR-2380: NPE in ObservationManagerImpl.getRegisteredEventListeners() during shutdown after broken startup\n- explicitly throwing NPE earlier in constructor as it is done for other parameters as well\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@831934 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/d82b62405dc1db67b53d6e86d2d73e3353675b63",
        "file": [
            {
                "patch": "@@ -76,6 +76,10 @@ protected void tearDown() throws IOException {\n      * Test to validate store retrieve in cache.\n      */\n     public void testStoreRetrieve() {\n+        // FIXME: JCR-3806\n+        if (true) {\n+            return;\n+        }\n         try {\n             AsyncUploadCache pendingFiles = new AsyncUploadCache();\n             pendingFiles.init(TARGET_DIR, CACHE_DIR, 100);\n@@ -116,6 +120,10 @@ public void testStoreRetrieve() {\n      * cachePurgeTrigFactor * size.\n      */\n     public void testAutoPurge() {\n+        // FIXME: JCR-3806\n+        if (true) {\n+            return;\n+        }\n         try {\n             AsyncUploadCache pendingFiles = new AsyncUploadCache();\n             pendingFiles.init(TARGET_DIR, CACHE_DIR, 100);\n@@ -179,6 +187,10 @@ public void testAutoPurge() {\n      * cachePurgeTrigFactor * size.\n      */\n     public void testAutoPurgeWithPendingUpload() {\n+        // FIXME: JCR-3806\n+        if (true) {\n+            return;\n+        }\n         try {\n             AsyncUploadCache pendingFiles = new AsyncUploadCache();\n             pendingFiles.init(TARGET_DIR, CACHE_DIR, 100);",
                "additions": 12,
                "raw_url": "https://github.com/apache/jackrabbit/raw/d82b62405dc1db67b53d6e86d2d73e3353675b63/jackrabbit-data/src/test/java/org/apache/jackrabbit/core/data/TestLocalCache.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "705cc9fbe45d25dc1fefb45303c1499ee44db43d",
                "blob_url": "https://github.com/apache/jackrabbit/blob/d82b62405dc1db67b53d6e86d2d73e3353675b63/jackrabbit-data/src/test/java/org/apache/jackrabbit/core/data/TestLocalCache.java",
                "filename": "jackrabbit-data/src/test/java/org/apache/jackrabbit/core/data/TestLocalCache.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-data/src/test/java/org/apache/jackrabbit/core/data/TestLocalCache.java?ref=d82b62405dc1db67b53d6e86d2d73e3353675b63"
            }
        ],
        "bug_id": "jackrabbit_58",
        "parent": "https://github.com/apache/jackrabbit/commit/054c5906503c0a0893ce2f70ae80185045a51ef1",
        "message": "JCR-3806: TestLocalCache fails occasionally with NPE\n\nIgnore tests for now\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1619422 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/7280250cac441584c513a16937724b2adbbbfd87",
        "file": [
            {
                "patch": "@@ -328,7 +328,7 @@ private NodeImpl getTokenParent(User user) throws RepositoryException {\n                     }\n                 }\n             } else {\n-                log.debug(\"Cannot create login token: No corresponding node for User {}.\", user.getID());\n+                log.debug(\"Cannot create login token: No user specified. (null)\");\n             }\n         } catch (RepositoryException e) {\n             // conflict while creating token store for this user -> refresh and",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/7280250cac441584c513a16937724b2adbbbfd87/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authentication/token/TokenProvider.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "50666a2c1043303017427b5a102a819f9ef0cfe9",
                "blob_url": "https://github.com/apache/jackrabbit/blob/7280250cac441584c513a16937724b2adbbbfd87/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authentication/token/TokenProvider.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authentication/token/TokenProvider.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authentication/token/TokenProvider.java?ref=7280250cac441584c513a16937724b2adbbbfd87"
            }
        ],
        "bug_id": "jackrabbit_59",
        "parent": "https://github.com/apache/jackrabbit/commit/3d86c4ec5bb5a274ffc24362d28f0bcb23adacc9",
        "message": "fix NPE on error path when user is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1577995 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/356a1d9b15953683610094f24cc9a28c65bcc350",
        "file": [
            {
                "patch": "@@ -61,7 +61,9 @@ public Object perform(SessionContext context) throws RepositoryException {\n                 LOG.debug(\"Saving changes under \" + path);\n             }\n         }\n-        context.getItemManager().getItem(id).save();\n+        if (id != null) {\n+            context.getItemManager().getItem(id).save();\n+        }\n         return this;\n     }\n ",
                "additions": 3,
                "raw_url": "https://github.com/apache/jackrabbit/raw/356a1d9b15953683610094f24cc9a28c65bcc350/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/session/SessionSaveOperation.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "c7ebf1e24ca061c86731dea53b38f5df998d2106",
                "blob_url": "https://github.com/apache/jackrabbit/blob/356a1d9b15953683610094f24cc9a28c65bcc350/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/session/SessionSaveOperation.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/session/SessionSaveOperation.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/session/SessionSaveOperation.java?ref=356a1d9b15953683610094f24cc9a28c65bcc350"
            }
        ],
        "bug_id": "jackrabbit_60",
        "parent": "https://github.com/apache/jackrabbit/commit/3630007caed2ddcf14ded37669014341cf3c28a2",
        "message": "JCR-3486 guard against npe due to transient root being null\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1421853 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/aaff1bf7b7b1d255eaf220555721c9f963add87a",
        "file": [
            {
                "patch": "@@ -207,14 +207,15 @@ public void run() {\n             });\n         }\n \n-        try {\n-            latch.await();\n-        } catch (InterruptedException e) {\n-            throw new IOExceptionWithCause(\n-                    \"Wait for background indexing tasks was interrupted\", e);\n-        } finally {\n-            invalidateSharedReader();\n+        for (;;) {\n+            try {\n+                latch.await();\n+                break;\n+            } catch (InterruptedException e) {\n+                // retry\n+            }\n         }\n+        invalidateSharedReader();\n \n         if (!exceptions.isEmpty()) {\n             throw new IOExceptionWithCause(",
                "additions": 8,
                "raw_url": "https://github.com/apache/jackrabbit/raw/aaff1bf7b7b1d255eaf220555721c9f963add87a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/AbstractIndex.java",
                "status": "modified",
                "changes": 15,
                "deletions": 7,
                "sha": "e3c12f74f50abedbd522ff477bc9bbe40d3ec0f1",
                "blob_url": "https://github.com/apache/jackrabbit/blob/aaff1bf7b7b1d255eaf220555721c9f963add87a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/AbstractIndex.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/AbstractIndex.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/AbstractIndex.java?ref=aaff1bf7b7b1d255eaf220555721c9f963add87a"
            }
        ],
        "bug_id": "jackrabbit_61",
        "parent": "https://github.com/apache/jackrabbit/commit/cffe8f75524b1da26efc44e8779ce1971176cab3",
        "message": "JCR-3466: NPE in SingletonTokenStream\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1414629 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/a9501efa46f9833e96e1c7cb0f83f467649ac4b7",
        "file": [
            {
                "patch": "@@ -139,6 +139,12 @@ public void normalize(float norm) {\n         public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder,\n                 boolean topScorer) throws IOException {\n             contextScorer = context.weight(searcher).scorer(reader, scoreDocsInOrder, topScorer);\n+            if (contextScorer == null) {\n+                // context query does not match any node\n+                // the inverse is to match all nodes\n+                return new MatchAllDocsQuery().createWeight(searcher).scorer(\n+                        reader, scoreDocsInOrder, topScorer);\n+            }\n             return new NotQueryScorer(reader);\n         }\n \n@@ -185,10 +191,6 @@ public int nextDoc() throws IOException {\n             if (docNo == NO_MORE_DOCS) {\n                 return docNo;\n             }\n-            if (contextScorer == null) {\n-                docNo = NO_MORE_DOCS;\n-                return docNo;\n-            }\n \n             if (docNo == -1) {\n                 // get first doc of context scorer\n@@ -229,10 +231,6 @@ public int advance(int target) throws IOException {\n             if (docNo == NO_MORE_DOCS) {\n                 return docNo;\n             }\n-            if (contextScorer == null) {\n-                docNo = NO_MORE_DOCS;\n-                return docNo;\n-            }\n \n             // optimize in the case of an advance to finish.\n             // see https://issues.apache.org/jira/browse/JCR-3091",
                "additions": 6,
                "raw_url": "https://github.com/apache/jackrabbit/raw/a9501efa46f9833e96e1c7cb0f83f467649ac4b7/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/NotQuery.java",
                "status": "modified",
                "changes": 14,
                "deletions": 8,
                "sha": "c91fd3a651af7e09c517ed12595d3f89bea978cd",
                "blob_url": "https://github.com/apache/jackrabbit/blob/a9501efa46f9833e96e1c7cb0f83f467649ac4b7/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/NotQuery.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/NotQuery.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/NotQuery.java?ref=a9501efa46f9833e96e1c7cb0f83f467649ac4b7"
            },
            {
                "patch": "@@ -253,6 +253,6 @@ public void testNotIsDescendantNodeQuery() throws Exception {\n                 + testRootNode.getPath()\n                 + \"') and not isdescendantnode(a,'\"\n                 + foo.getPath() + \"')\";\n-        executeSQL2Query(sql, new Node[] {});\n+        executeSQL2Query(sql, new Node[] {foo});\n     }\n }",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/a9501efa46f9833e96e1c7cb0f83f467649ac4b7/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ChildAxisQueryTest.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "4ab3af55e4cbf43c063468a521bfd863adbb096b",
                "blob_url": "https://github.com/apache/jackrabbit/blob/a9501efa46f9833e96e1c7cb0f83f467649ac4b7/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ChildAxisQueryTest.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ChildAxisQueryTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ChildAxisQueryTest.java?ref=a9501efa46f9833e96e1c7cb0f83f467649ac4b7"
            }
        ],
        "bug_id": "jackrabbit_62",
        "parent": "https://github.com/apache/jackrabbit/commit/e60384f3420a4edecdd76472664527ccd61d07c2",
        "message": "JCR-3337 Negated descendant node query with no results throws NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1357591 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/936453a1287000626f6074db6ad0537ece561d9c",
        "file": [
            {
                "patch": "@@ -185,6 +185,10 @@ public int nextDoc() throws IOException {\n             if (docNo == NO_MORE_DOCS) {\n                 return docNo;\n             }\n+            if (contextScorer == null) {\n+                docNo = NO_MORE_DOCS;\n+                return docNo;\n+            }\n \n             if (docNo == -1) {\n                 // get first doc of context scorer\n@@ -225,6 +229,10 @@ public int advance(int target) throws IOException {\n             if (docNo == NO_MORE_DOCS) {\n                 return docNo;\n             }\n+            if (contextScorer == null) {\n+                docNo = NO_MORE_DOCS;\n+                return docNo;\n+            }\n \n             // optimize in the case of an advance to finish.\n             // see https://issues.apache.org/jira/browse/JCR-3091",
                "additions": 8,
                "raw_url": "https://github.com/apache/jackrabbit/raw/936453a1287000626f6074db6ad0537ece561d9c/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/NotQuery.java",
                "status": "modified",
                "changes": 8,
                "deletions": 0,
                "sha": "610c3b9494b14cbf68b467e862eb03476255db49",
                "blob_url": "https://github.com/apache/jackrabbit/blob/936453a1287000626f6074db6ad0537ece561d9c/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/NotQuery.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/NotQuery.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/NotQuery.java?ref=936453a1287000626f6074db6ad0537ece561d9c"
            },
            {
                "patch": "@@ -243,4 +243,16 @@ public void testSimpleQuery() throws Exception {\n         executeSQLQuery(sql, new Node[] {foo});\n     }\n \n+    /**\n+     * JCR-3337\n+     */\n+    public void testNotIsDescendantNodeQuery() throws Exception {\n+        Node foo = testRootNode.addNode(\"foo\");\n+        testRootNode.getSession().save();\n+        String sql = \"SELECT a.* FROM [nt:base] as a WHERE isdescendantnode(a,'\"\n+                + testRootNode.getPath()\n+                + \"') and not isdescendantnode(a,'\"\n+                + foo.getPath() + \"')\";\n+        executeSQL2Query(sql, new Node[] {});\n+    }\n }",
                "additions": 12,
                "raw_url": "https://github.com/apache/jackrabbit/raw/936453a1287000626f6074db6ad0537ece561d9c/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ChildAxisQueryTest.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "31b1d560beaca24b8a6249255f91ceada7a33726",
                "blob_url": "https://github.com/apache/jackrabbit/blob/936453a1287000626f6074db6ad0537ece561d9c/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ChildAxisQueryTest.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ChildAxisQueryTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ChildAxisQueryTest.java?ref=936453a1287000626f6074db6ad0537ece561d9c"
            }
        ],
        "bug_id": "jackrabbit_63",
        "parent": "https://github.com/apache/jackrabbit/commit/ac674fe9a3f293f97ecc194a5ec280b389290382",
        "message": "JCR-3337 Negated descendant node query with no results throws NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1352053 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/369b3d6496d02e44c770d355fd20e7ca7f718db8",
        "file": [
            {
                "patch": "@@ -24,6 +24,7 @@\n import org.apache.jackrabbit.core.RepositoryImpl;\n import org.apache.jackrabbit.core.config.RepositoryConfig;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.HashMap;\n@@ -115,8 +116,10 @@ private Repository createNonTransientRepository(\n                     }\n                 }\n             }            \t\n-        } else {\n+        } else if (configFile != null) {\n             config = RepositoryConfig.create(configFile, homeDir);\n+        } else {\n+            config = RepositoryConfig.create(new File(homeDir));\n         }\n         return RepositoryImpl.create(config);\n \t}",
                "additions": 4,
                "raw_url": "https://github.com/apache/jackrabbit/raw/369b3d6496d02e44c770d355fd20e7ca7f718db8/jackrabbit-jca/src/main/java/org/apache/jackrabbit/jca/JCARepositoryManager.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "efaaf8ffe58c26f21299d193cd016bed32f097ff",
                "blob_url": "https://github.com/apache/jackrabbit/blob/369b3d6496d02e44c770d355fd20e7ca7f718db8/jackrabbit-jca/src/main/java/org/apache/jackrabbit/jca/JCARepositoryManager.java",
                "filename": "jackrabbit-jca/src/main/java/org/apache/jackrabbit/jca/JCARepositoryManager.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jca/src/main/java/org/apache/jackrabbit/jca/JCARepositoryManager.java?ref=369b3d6496d02e44c770d355fd20e7ca7f718db8"
            }
        ],
        "bug_id": "jackrabbit_64",
        "parent": "https://github.com/apache/jackrabbit/commit/4e02044524a2dfc9f5502bd29663b37adfc061ff",
        "message": "JCR-3189 JCARepositoryManager.createNonTransientRepository throws NPE with no JCAManagedConnectionFactory.CONFIGFILE_KEY\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1232831 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/df3bb8b94b3b34b0cd21d1c4873cb326226c8918",
        "file": [
            {
                "patch": "@@ -271,4 +271,16 @@ public void testGetPropertyOfRemovedAncestor() throws RepositoryException {\n             rw.logout();\n         }\n     }\n+\n+    public void testGetDeepEmptyStringProperty() throws RepositoryException, NotExecutableException {\n+        Node n = testRootNode.getNode(nodeName1);\n+        Node n2 = n.addNode(nodeName2);\n+        Node n3 = n2.addNode(nodeName3);\n+        Node n4 = n3.addNode(nodeName4);\n+        Property emptyProp = n4.setProperty(propertyName1, \"\");\n+        testRootNode.save();\n+\n+        Property p = readOnly.getProperty(emptyProp.getPath());\n+        assertEquals(\"\", p.getString());\n+    }\n }",
                "additions": 12,
                "raw_url": "https://github.com/apache/jackrabbit/raw/df3bb8b94b3b34b0cd21d1c4873cb326226c8918/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/GetPropertyTest.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "af0e96341d1fb009dee8b82b250a28e406e355b5",
                "blob_url": "https://github.com/apache/jackrabbit/blob/df3bb8b94b3b34b0cd21d1c4873cb326226c8918/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/GetPropertyTest.java",
                "filename": "jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/GetPropertyTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/GetPropertyTest.java?ref=df3bb8b94b3b34b0cd21d1c4873cb326226c8918"
            },
            {
                "patch": "@@ -413,9 +413,10 @@ public PropertyInfo getPropertyInfo(SessionInfo sessionInfo, PropertyId property\n                     QValue qValue = getQValueFactory(sessionInfo).create(length, uri, QValueFactoryImpl.NO_INDEX) ;\n                     return new PropertyInfoImpl(propertyId, p, propertyType, qValue);\n                 }\n-            } else if (props.contains(JCR_GET_STRING) && props.get(JCR_GET_STRING).getValue() != null) {\n+            } else if (props.contains(JCR_GET_STRING)) {\n                 // single valued non-binary property\n-                String str = props.get(JCR_GET_STRING).getValue().toString();\n+                Object v = props.get(JCR_GET_STRING).getValue();\n+                String str = (v == null) ? \"\" : v.toString();\n                 QValue qValue = ValueFormat.getQValue(str, propertyType, getNamePathResolver(sessionInfo), getQValueFactory(sessionInfo));\n                 return new PropertyInfoImpl(propertyId, p, propertyType, qValue);\n             } else {",
                "additions": 3,
                "raw_url": "https://github.com/apache/jackrabbit/raw/df3bb8b94b3b34b0cd21d1c4873cb326226c8918/jackrabbit-spi2dav/src/main/java/org/apache/jackrabbit/spi2davex/RepositoryServiceImpl.java",
                "status": "modified",
                "changes": 5,
                "deletions": 2,
                "sha": "762dfa0dd4b5e0c2445423e2d3ac43040d08a4cd",
                "blob_url": "https://github.com/apache/jackrabbit/blob/df3bb8b94b3b34b0cd21d1c4873cb326226c8918/jackrabbit-spi2dav/src/main/java/org/apache/jackrabbit/spi2davex/RepositoryServiceImpl.java",
                "filename": "jackrabbit-spi2dav/src/main/java/org/apache/jackrabbit/spi2davex/RepositoryServiceImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-spi2dav/src/main/java/org/apache/jackrabbit/spi2davex/RepositoryServiceImpl.java?ref=df3bb8b94b3b34b0cd21d1c4873cb326226c8918"
            }
        ],
        "bug_id": "jackrabbit_65",
        "parent": "https://github.com/apache/jackrabbit/commit/9ccd17ce5df1888a815ca03f22aad6d2a82c3aa7",
        "message": "JCR-3163 NPE in RepositoryServiceImpl.getPropertyInfo()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1209033 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/ef3bfe520b24fd3ddaad11252cdf1807666e8113",
        "file": [
            {
                "patch": "@@ -413,7 +413,7 @@ public PropertyInfo getPropertyInfo(SessionInfo sessionInfo, PropertyId property\n                     QValue qValue = getQValueFactory(sessionInfo).create(length, uri, QValueFactoryImpl.NO_INDEX) ;\n                     return new PropertyInfoImpl(propertyId, p, propertyType, qValue);\n                 }\n-            } else if (props.contains(JCR_GET_STRING)) {\n+            } else if (props.contains(JCR_GET_STRING) && props.get(JCR_GET_STRING).getValue() != null) {\n                 // single valued non-binary property\n                 String str = props.get(JCR_GET_STRING).getValue().toString();\n                 QValue qValue = ValueFormat.getQValue(str, propertyType, getNamePathResolver(sessionInfo), getQValueFactory(sessionInfo));",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/ef3bfe520b24fd3ddaad11252cdf1807666e8113/jackrabbit-spi2dav/src/main/java/org/apache/jackrabbit/spi2davex/RepositoryServiceImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "4406b5b454eef647b43ac23981018a9f7c01e568",
                "blob_url": "https://github.com/apache/jackrabbit/blob/ef3bfe520b24fd3ddaad11252cdf1807666e8113/jackrabbit-spi2dav/src/main/java/org/apache/jackrabbit/spi2davex/RepositoryServiceImpl.java",
                "filename": "jackrabbit-spi2dav/src/main/java/org/apache/jackrabbit/spi2davex/RepositoryServiceImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-spi2dav/src/main/java/org/apache/jackrabbit/spi2davex/RepositoryServiceImpl.java?ref=ef3bfe520b24fd3ddaad11252cdf1807666e8113"
            }
        ],
        "bug_id": "jackrabbit_66",
        "parent": "https://github.com/apache/jackrabbit/commit/03c23d0b5233e2c0bf2bf86c5c8035724f54cc8c",
        "message": "JCR-3163 NPE in RepositoryServiceImpl.getPropertyInfo()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1208818 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/aef547f481e6250a9d1ff73b9c567b3403f8e62f",
        "file": [
            {
                "patch": "@@ -629,7 +629,9 @@ public void saveCacheToFile() throws IOException {\n                         \"Error saving \" + FILE_CACHE_NAME_ARRAY + \": \"\n                                 + e.getMessage(), e);\n             } finally {\n-                io.close();\n+                if (io != null) {\n+                    io.close();\n+                }\n             }\n         }\n ",
                "additions": 3,
                "raw_url": "https://github.com/apache/jackrabbit/raw/aef547f481e6250a9d1ff73b9c567b3403f8e62f/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/CachingIndexReader.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "8c0d7756b52a244009c25cca540f7b380f8aacdc",
                "blob_url": "https://github.com/apache/jackrabbit/blob/aef547f481e6250a9d1ff73b9c567b3403f8e62f/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/CachingIndexReader.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/CachingIndexReader.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/CachingIndexReader.java?ref=aef547f481e6250a9d1ff73b9c567b3403f8e62f"
            }
        ],
        "bug_id": "jackrabbit_67",
        "parent": "https://github.com/apache/jackrabbit/commit/ae8de242047148e14dafce3205f256b4b1f80dcf",
        "message": "guard against npe on exceptional path\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1200742 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/3117b716d6ec29073f570938ce30e963dc7aa004",
        "file": [
            {
                "patch": "@@ -546,12 +546,13 @@ protected static NodeStateEx getParentNode(NodeStateEx parent, String uuid, Name\n         NodeStateEx n = parent;\n         for (int i = 0; i < 3; i++) {\n             Name name = getName(uuid.substring(i * 2, i * 2 + 2));\n-            if (n.hasNode(name)) {\n-                n = n.getNode(name, 1);\n+            NodeStateEx childn = n.getNode(name, 1);\n+            if (childn != null) {\n+                n = childn;\n             } else if (interNT != null) {\n-                n.addNode(name, interNT, null, false);\n+                childn = n.addNode(name, interNT, null, false);\n                 n.store();\n-                n = n.getNode(name, 1);\n+                n = childn;\n             } else {\n                 return null;\n             }",
                "additions": 5,
                "raw_url": "https://github.com/apache/jackrabbit/raw/3117b716d6ec29073f570938ce30e963dc7aa004/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerBase.java",
                "status": "modified",
                "changes": 9,
                "deletions": 4,
                "sha": "ad2349b1f66590fbd93e54d5361b2b4ba007d472",
                "blob_url": "https://github.com/apache/jackrabbit/blob/3117b716d6ec29073f570938ce30e963dc7aa004/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerBase.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerBase.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerBase.java?ref=3117b716d6ec29073f570938ce30e963dc7aa004"
            }
        ],
        "bug_id": "jackrabbit_68",
        "parent": "https://github.com/apache/jackrabbit/commit/4d9b9b9774c4f6b46fe89fbd27e155dd09557dd9",
        "message": "JCR-3105 - fix potential NPE on concurrent versioning operations\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1181712 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/6f67f6fb6520fd7c9e65bdffa0c52e42ee7d96d2",
        "file": [
            {
                "patch": "@@ -54,13 +54,14 @@ public ConsolidatingChangeLog() {\n      * child.\n      * @param parentId  node id of the parent\n      * @param name  name of the child\n-     * @return  the path of the item <code>name</code>\n+     * @return  the path of the item <code>name</code> or <code>null</code> if <code>parentId</code>'s\n+     * path is not absolute\n      * @throws RepositoryException\n      */\n     protected static Path getPath(NodeId parentId, Name name) throws RepositoryException {\n         Path parent = parentId.getPath();\n         if (!parent.isAbsolute()) {\n-            throw new IllegalArgumentException(\"Path not absolute: \" + parent);\n+            return null;\n         }\n \n         return PATH_FACTORY.create(parent, name, true);\n@@ -69,7 +70,8 @@ protected static Path getPath(NodeId parentId, Name name) throws RepositoryExcep\n     /**\n      * Determine the {@link Path} from an {@link ItemId}.\n      * @param itemId\n-     * @return  path of the item <code>itemId</code>\n+     * @return  path of the item <code>itemId</code> or <code>null</code> if <code>itemId</code>'s\n+     * path is not absolute\n      */\n     protected static Path getPath(ItemId itemId) {\n         Path path = itemId.getPath();\n@@ -366,6 +368,9 @@ public int cancel(CancelableOperation other) throws RepositoryException {\n                 if (other instanceof Remove) {\n                     Path thisPath = ConsolidatingChangeLog.getPath(parentId, propertyName);\n                     Path otherPath = ConsolidatingChangeLog.getPath(((Remove) other).itemId);\n+                    if (thisPath == null || otherPath == null) {\n+                        return CANCEL_NONE;\n+                    }\n                     if (thisPath.equals(otherPath)) {\n                         return CANCEL_BOTH;\n                     }\n@@ -377,6 +382,9 @@ public int cancel(CancelableOperation other) throws RepositoryException {\n                     SetValue setValue = (SetValue) other;\n                     Path thisPath = ConsolidatingChangeLog.getPath(parentId, propertyName);\n                     Path otherPath = ConsolidatingChangeLog.getPath(setValue.propertyId);\n+                    if (thisPath == null || otherPath == null) {\n+                        return CANCEL_NONE;\n+                    }\n                     if (thisPath.equals(otherPath)) {\n                         if (!isMultivalued && setValue.values[0] == null) {\n                             return CANCEL_BOTH;",
                "additions": 11,
                "raw_url": "https://github.com/apache/jackrabbit/raw/6f67f6fb6520fd7c9e65bdffa0c52e42ee7d96d2/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatingChangeLog.java",
                "status": "modified",
                "changes": 14,
                "deletions": 3,
                "sha": "cf8d1ef2eacced5ff03c6f4ee8f0eded440a1397",
                "blob_url": "https://github.com/apache/jackrabbit/blob/6f67f6fb6520fd7c9e65bdffa0c52e42ee7d96d2/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatingChangeLog.java",
                "filename": "jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatingChangeLog.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatingChangeLog.java?ref=6f67f6fb6520fd7c9e65bdffa0c52e42ee7d96d2"
            }
        ],
        "bug_id": "jackrabbit_69",
        "parent": "https://github.com/apache/jackrabbit/commit/d0f888a068a29c17d8751250b2c867b2deaf206c",
        "message": "JCR-3049: NPE in ConsolidatingChangeLog for id base NodeId\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1161059 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/fd9513124a25480a186596086abea91f58074c5e",
        "file": [
            {
                "patch": "@@ -901,7 +901,7 @@ public void refresh(Event childEvent) {\n         ItemId eventId = childEvent.getItemId();\n         Path eventPath = childEvent.getPath();\n         Name eventName = eventPath.getName();\n-        HierarchyEntry child = lookupEntry(eventId, eventPath);\n+        HierarchyEntry child = eventId == null ? null : lookupEntry(eventId, eventPath);\n \n         switch (childEvent.getType()) {\n             case Event.NODE_ADDED:",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/fd9513124a25480a186596086abea91f58074c5e/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/hierarchy/NodeEntryImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "cf885f6090b404ec91226b1fd8eef8fc66a20766",
                "blob_url": "https://github.com/apache/jackrabbit/blob/fd9513124a25480a186596086abea91f58074c5e/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/hierarchy/NodeEntryImpl.java",
                "filename": "jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/hierarchy/NodeEntryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/hierarchy/NodeEntryImpl.java?ref=fd9513124a25480a186596086abea91f58074c5e"
            }
        ],
        "bug_id": "jackrabbit_70",
        "parent": "https://github.com/apache/jackrabbit/commit/9f4400916cc6aa93888d24e5ff5503742c2eeee1",
        "message": "JCR-3055 NPE in event polling thread\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1158330 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/c6d2e5124ac85811629739db1974fcb8cfc14183",
        "file": [
            {
                "patch": "@@ -74,7 +74,7 @@ protected static Path getPath(NodeId parentId, Name name) throws RepositoryExcep\n     protected static Path getPath(ItemId itemId) {\n         Path path = itemId.getPath();\n         if (path != null && !path.isAbsolute()) {\n-            throw new IllegalArgumentException(\"Path not absoulte: \" + path);\n+            return null;\n         }\n         return path;\n     }",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/c6d2e5124ac85811629739db1974fcb8cfc14183/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatingChangeLog.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "b6093584703d59543a4063d51c30d0afc564e6e0",
                "blob_url": "https://github.com/apache/jackrabbit/blob/c6d2e5124ac85811629739db1974fcb8cfc14183/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatingChangeLog.java",
                "filename": "jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatingChangeLog.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatingChangeLog.java?ref=c6d2e5124ac85811629739db1974fcb8cfc14183"
            }
        ],
        "bug_id": "jackrabbit_71",
        "parent": "https://github.com/apache/jackrabbit/commit/dd303b3f668ddd3e1f4b7f657f578e34abd61118",
        "message": "JCR-3049: NPE in ConsolidatingChangeLog for id base NodeId\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1157042 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/dd303b3f668ddd3e1f4b7f657f578e34abd61118",
        "file": [
            {
                "patch": "@@ -73,7 +73,7 @@ protected static Path getPath(NodeId parentId, Name name) throws RepositoryExcep\n      */\n     protected static Path getPath(ItemId itemId) {\n         Path path = itemId.getPath();\n-        if (!path.isAbsolute()) {\n+        if (path != null && !path.isAbsolute()) {\n             throw new IllegalArgumentException(\"Path not absoulte: \" + path);\n         }\n         return path;\n@@ -298,6 +298,9 @@ public int cancel(CancelableOperation other) throws RepositoryException {\n                 if (other instanceof Remove) {\n                     Path thisPath = ConsolidatingChangeLog.getPath(parentId, nodeName);\n                     Path otherPath = ConsolidatingChangeLog.getPath(((Remove) other).itemId);\n+                    if (thisPath == null || otherPath == null) {\n+                        return CANCEL_NONE;\n+                    }\n                     if (thisPath.equals(otherPath)) {\n                         return CANCEL_BOTH;\n                     }\n@@ -509,13 +512,19 @@ public int cancel(CancelableOperation other) throws RepositoryException {\n                 if (other instanceof Remove) {\n                     Path thisPath = ConsolidatingChangeLog.getPath(srcNodeId);\n                     Path otherPath = ConsolidatingChangeLog.getPath(((Remove) other).itemId);\n+                    if (thisPath == null || otherPath == null) {\n+                        return CANCEL_NONE;\n+                    }\n                     return thisPath.isDescendantOf(otherPath) || thisPath.equals(otherPath)\n                         ? CANCEL_THIS\n                         : CANCEL_NONE;\n                 }\n                 if (other instanceof ReorderNodes) {\n                     Path thisPath = ConsolidatingChangeLog.getPath(parentId);\n                     Path otherPath = ConsolidatingChangeLog.getPath(((ReorderNodes) other).parentId);\n+                    if (thisPath == null || otherPath == null) {\n+                        return CANCEL_NONE;\n+                    }\n                     return thisPath.equals(otherPath) && !hasSNS(srcNodeId) && !hasSNS(beforeNodeId)\n                         ? CANCEL_THIS\n                         : CANCEL_NONE;\n@@ -524,7 +533,12 @@ public int cancel(CancelableOperation other) throws RepositoryException {\n             }\n \n             private boolean hasSNS(NodeId nodeId) {\n-                return nodeId != null && ConsolidatingChangeLog.getPath(nodeId).getIndex() > 1;\n+                if (nodeId != null) {\n+                    Path path = ConsolidatingChangeLog.getPath(nodeId);\n+                    return path != null && path.getIndex() > 1;\n+                }\n+\n+                return false;\n             }\n         }\n \n@@ -569,6 +583,9 @@ public int cancel(CancelableOperation other) throws RepositoryException {\n                 if (other instanceof Remove) {\n                     Path thisPath = ConsolidatingChangeLog.getPath(nodeId);\n                     Path otherPath = ConsolidatingChangeLog.getPath(((Remove) other).itemId);\n+                    if (thisPath == null || otherPath == null) {\n+                        return CANCEL_NONE;\n+                    }\n                     return thisPath.isDescendantOf(otherPath) || thisPath.equals(otherPath)\n                         ? CANCEL_THIS\n                         : CANCEL_NONE;\n@@ -578,6 +595,9 @@ public int cancel(CancelableOperation other) throws RepositoryException {\n                     if (mixinNodeTypeNames.length == setMixin.mixinNodeTypeNames.length) {\n                         Path thisPath = ConsolidatingChangeLog.getPath(nodeId);\n                         Path otherPath = ConsolidatingChangeLog.getPath(setMixin.nodeId);\n+                        if (thisPath == null || otherPath == null) {\n+                            return CANCEL_NONE;\n+                        }\n                         if (thisPath.equals(otherPath)) {\n                             for (int k = 0; k < mixinNodeTypeNames.length; k++) {\n                                 if (!mixinNodeTypeNames[k].equals(setMixin.mixinNodeTypeNames[k])) {\n@@ -632,6 +652,9 @@ public int cancel(CancelableOperation other) throws RepositoryException {\n                 if (other instanceof Remove) {\n                     Path thisPath = ConsolidatingChangeLog.getPath(nodeId);\n                     Path otherPath = ConsolidatingChangeLog.getPath(((Remove) other).itemId);\n+                    if (thisPath == null || otherPath == null) {\n+                        return CANCEL_NONE;\n+                    }\n                     return thisPath.isDescendantOf(otherPath) || thisPath.equals(otherPath)\n                         ? CANCEL_THIS\n                         : CANCEL_NONE;\n@@ -641,6 +664,9 @@ public int cancel(CancelableOperation other) throws RepositoryException {\n                     if (primaryTypeName.equals(setPrimaryType.primaryTypeName)) {\n                         Path thisPath = ConsolidatingChangeLog.getPath(nodeId);\n                         Path otherPath = ConsolidatingChangeLog.getPath(setPrimaryType.nodeId);\n+                        if (thisPath == null || otherPath == null) {\n+                            return CANCEL_NONE;\n+                        }\n                         if (thisPath.equals(otherPath)) {\n                             return CANCEL_THIS;\n                         }\n@@ -693,13 +719,19 @@ public int cancel(CancelableOperation other) throws RepositoryException {\n                 if (other instanceof Remove) {\n                     Path thisPath = ConsolidatingChangeLog.getPath(propertyId);\n                     Path otherPath = ConsolidatingChangeLog.getPath(((Remove) other).itemId);\n+                    if (thisPath == null || otherPath == null) {\n+                        return CANCEL_NONE;\n+                    }\n                     return thisPath.isDescendantOf(otherPath) || thisPath.equals(otherPath)\n                         ? CANCEL_THIS\n                         : CANCEL_NONE;\n                 }\n                 if (other instanceof SetValue) {\n                     Path thisPath = ConsolidatingChangeLog.getPath(propertyId);\n                     Path otherPath = ConsolidatingChangeLog.getPath(((SetValue) other).propertyId);\n+                    if (thisPath == null || otherPath == null) {\n+                        return CANCEL_NONE;\n+                    }\n                     if (thisPath.equals(otherPath)) {\n                         return CANCEL_THIS;\n                     }",
                "additions": 34,
                "raw_url": "https://github.com/apache/jackrabbit/raw/dd303b3f668ddd3e1f4b7f657f578e34abd61118/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatingChangeLog.java",
                "status": "modified",
                "changes": 36,
                "deletions": 2,
                "sha": "364514338ef375136cf2eb671d0b9f8f7da1fe14",
                "blob_url": "https://github.com/apache/jackrabbit/blob/dd303b3f668ddd3e1f4b7f657f578e34abd61118/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatingChangeLog.java",
                "filename": "jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatingChangeLog.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatingChangeLog.java?ref=dd303b3f668ddd3e1f4b7f657f578e34abd61118"
            }
        ],
        "bug_id": "jackrabbit_72",
        "parent": "https://github.com/apache/jackrabbit/commit/8c65b9c138496c5883519d283811881db747f86e",
        "message": "JCR-3049: NPE in ConsolidatingChangeLog for id base NodeId\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1157025 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/dc18482310b2023b7cec952a65080369889ef6bf",
        "file": [
            {
                "patch": "@@ -524,7 +524,7 @@ public int cancel(CancelableOperation other) throws RepositoryException {\n             }\n \n             private boolean hasSNS(NodeId nodeId) {\n-                return ConsolidatingChangeLog.getPath(nodeId).getIndex() > 1;\n+                return nodeId != null && ConsolidatingChangeLog.getPath(nodeId).getIndex() > 1;\n             }\n         }\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/dc18482310b2023b7cec952a65080369889ef6bf/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatingChangeLog.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "0c87f38f02a62c31f8bb1858416b5ca78fd7fdb1",
                "blob_url": "https://github.com/apache/jackrabbit/blob/dc18482310b2023b7cec952a65080369889ef6bf/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatingChangeLog.java",
                "filename": "jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatingChangeLog.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatingChangeLog.java?ref=dc18482310b2023b7cec952a65080369889ef6bf"
            }
        ],
        "bug_id": "jackrabbit_73",
        "parent": "https://github.com/apache/jackrabbit/commit/accf70f056f47f577928a6c21d60f886bb96e549",
        "message": "JCR-3025: NPE in ConsolidatingChangeLog\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1148442 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/df0962e7e7ad68f89f52ad59cbb3ecb4aabc194d",
        "file": [
            {
                "patch": "@@ -462,15 +462,16 @@ public NodeId getIdOfRootTransientNodeState() throws RepositoryException {\n \n         // the nearest common ancestor of all transient states\n         // must be either\n-        // a) a node state with STATUS_EXISTING_MODIFIED, or\n-        // b) the parent node of a property state with STATUS_EXISTING_MODIFIED\n+        // a) a node state with STATUS_EXISTING_MODIFIED or STATUS_STALE_DESTROYED, or\n+        // b) the parent node of a property state with STATUS_EXISTING_MODIFIED or STATUS_STALE_DESTROYED\n \n         // collect all candidates based on above criteria\n         Collection<NodeId> candidateIds = new LinkedList<NodeId>();\n         try {\n             HierarchyManager hierMgr = getHierarchyMgr();\n             for (ItemState state : transientStore.values()) {\n-                if (state.getStatus() == ItemState.STATUS_EXISTING_MODIFIED) {\n+                if (state.getStatus() == ItemState.STATUS_EXISTING_MODIFIED\n+                        || state.getStatus() == ItemState.STATUS_STALE_DESTROYED) {\n                     NodeId nodeId;\n                     if (state.isNode()) {\n                         nodeId = (NodeId) state.getId();",
                "additions": 4,
                "raw_url": "https://github.com/apache/jackrabbit/raw/df0962e7e7ad68f89f52ad59cbb3ecb4aabc194d/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java",
                "status": "modified",
                "changes": 7,
                "deletions": 3,
                "sha": "635b975458cb98c5b7325009e4c31c7a80189005",
                "blob_url": "https://github.com/apache/jackrabbit/blob/df0962e7e7ad68f89f52ad59cbb3ecb4aabc194d/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java?ref=df0962e7e7ad68f89f52ad59cbb3ecb4aabc194d"
            }
        ],
        "bug_id": "jackrabbit_74",
        "parent": "https://github.com/apache/jackrabbit/commit/5d73d05bb45bfe574035fc3440d1c0b5095cc0e1",
        "message": "JCR-2967: SessionItemStateManager.getIdOfRootTransientNodeState() may cause NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1101046 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/6f86c84fc59da1cb9c54ff659a6bbbfc25c64498",
        "file": [
            {
                "patch": "@@ -43,7 +43,7 @@\n     /**\n      * the id's of the versions to return\n      */\n-    private LinkedList<NodeId> versions = new LinkedList<NodeId>();\n+    private final LinkedList<NodeId> versions = new LinkedList<NodeId>();\n \n     /**\n      * the current position",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/6f86c84fc59da1cb9c54ff659a6bbbfc25c64498/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionIteratorImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "7d2df985c5d0f05dfb89633dfc04a0125fc91b2f",
                "blob_url": "https://github.com/apache/jackrabbit/blob/6f86c84fc59da1cb9c54ff659a6bbbfc25c64498/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionIteratorImpl.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionIteratorImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionIteratorImpl.java?ref=6f86c84fc59da1cb9c54ff659a6bbbfc25c64498"
            }
        ],
        "bug_id": "jackrabbit_75",
        "parent": "https://github.com/apache/jackrabbit/commit/828e730f556c83e9dbc46384383d6f3081b316f1",
        "message": "JCR-2655: initVersions crashes with NPE\n\nMake an unmodified variable final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1032621 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/37f41a7715e128cf78a599199b7768311e8be1f9",
        "file": [
            {
                "patch": "@@ -416,7 +416,7 @@ void internalRemove(boolean staleParent) {\n             }\n         } else {\n             // unresolved\n-            if (!staleParent) {\n+            if (!staleParent && parent != null) {\n                 parent.internalRemoveChildEntry(this);\n             }\n         }",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/37f41a7715e128cf78a599199b7768311e8be1f9/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/hierarchy/HierarchyEntryImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "58a52888601ca84a2d274086b3754bab5a14a6bf",
                "blob_url": "https://github.com/apache/jackrabbit/blob/37f41a7715e128cf78a599199b7768311e8be1f9/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/hierarchy/HierarchyEntryImpl.java",
                "filename": "jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/hierarchy/HierarchyEntryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/hierarchy/HierarchyEntryImpl.java?ref=37f41a7715e128cf78a599199b7768311e8be1f9"
            }
        ],
        "bug_id": "jackrabbit_76",
        "parent": "https://github.com/apache/jackrabbit/commit/aa2c73ce74f4fe786874e8c420f19b12e61fb112",
        "message": "JCR-2484: NPE if RepositoryService#getItemInfos throws ItemNotFoundException\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@905997 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/a5c7496fde2a57bd754c962dc9d0b6c6802a839b",
        "file": [
            {
                "patch": "@@ -251,7 +251,7 @@ public void removeActivity(Node node) throws RepositoryException {\n         }\n         NodeId actId = actNode.getNodeId();\n         session.getVersionManager().removeActivity(session, actId);\n-        if (currentActivity.equals(actId)) {\n+        if (actId.equals(currentActivity)) {\n             currentActivity = null;\n         }\n     }",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/a5c7496fde2a57bd754c962dc9d0b6c6802a839b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/JcrVersionManagerImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "7343469355702a7249d6106a226e7931766c4e62",
                "blob_url": "https://github.com/apache/jackrabbit/blob/a5c7496fde2a57bd754c962dc9d0b6c6802a839b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/JcrVersionManagerImpl.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/JcrVersionManagerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/JcrVersionManagerImpl.java?ref=a5c7496fde2a57bd754c962dc9d0b6c6802a839b"
            }
        ],
        "bug_id": "jackrabbit_77",
        "parent": "https://github.com/apache/jackrabbit/commit/7199f14a20aefa3c42c7c51bfc081cde9abe7bcf",
        "message": "JCR-1592: removeActivity failed with NPE when no current activity set\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@791452 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/a4991790f9ab4135c1780a7ed73ada43528e5a7e",
        "file": [
            {
                "patch": "@@ -75,7 +75,7 @@ public Reader extractText(InputStream stream,\n \n             ZipInputStream zis = new ZipInputStream(stream);\n             ZipEntry ze = zis.getNextEntry();\n-            while (!ze.getName().equals(\"content.xml\")) {\n+            while (ze != null && !ze.getName().equals(\"content.xml\")) {\n                 ze = zis.getNextEntry();\n             }\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/a4991790f9ab4135c1780a7ed73ada43528e5a7e/jackrabbit-text-extractors/src/main/java/org/apache/jackrabbit/extractor/OpenOfficeTextExtractor.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "252306b383c192e1e881217a6541f116458823b9",
                "blob_url": "https://github.com/apache/jackrabbit/blob/a4991790f9ab4135c1780a7ed73ada43528e5a7e/jackrabbit-text-extractors/src/main/java/org/apache/jackrabbit/extractor/OpenOfficeTextExtractor.java",
                "filename": "jackrabbit-text-extractors/src/main/java/org/apache/jackrabbit/extractor/OpenOfficeTextExtractor.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-text-extractors/src/main/java/org/apache/jackrabbit/extractor/OpenOfficeTextExtractor.java?ref=a4991790f9ab4135c1780a7ed73ada43528e5a7e"
            }
        ],
        "bug_id": "jackrabbit_78",
        "parent": "https://github.com/apache/jackrabbit/commit/89fe1177eb816933d20cb0a0426e276691e0522e",
        "message": "JCR-1646: NPE in OpenOfficeTextExtractor\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@666098 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/087af73b40d3592418832f190a140b2541701189",
        "file": [
            {
                "patch": "@@ -1351,7 +1351,10 @@ private void revertTransientChanges() throws RepositoryException {\n      */\n     private void completeTransientChanges() {\n         // old parent can forget this one\n-        revertInfo.oldParent.childNodeAttic.remove(this);\n+        // root entry does not have oldParent\n+        if (revertInfo.oldParent != null) {\n+            revertInfo.oldParent.childNodeAttic.remove(this);\n+        }\n         revertInfo.dispose();\n         revertInfo = null;\n     }",
                "additions": 4,
                "raw_url": "https://github.com/apache/jackrabbit/raw/087af73b40d3592418832f190a140b2541701189/contrib/spi/jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/hierarchy/NodeEntryImpl.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "e1dc7dd40c8f06ebe075d89976cbaaa8af9727b0",
                "blob_url": "https://github.com/apache/jackrabbit/blob/087af73b40d3592418832f190a140b2541701189/contrib/spi/jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/hierarchy/NodeEntryImpl.java",
                "filename": "contrib/spi/jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/hierarchy/NodeEntryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/contrib/spi/jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/hierarchy/NodeEntryImpl.java?ref=087af73b40d3592418832f190a140b2541701189"
            }
        ],
        "bug_id": "jackrabbit_79",
        "parent": "https://github.com/apache/jackrabbit/commit/e806b85d5ec84adadefe03bb3cd033566ff1a010",
        "message": "JCR-1131: JCR2SPI NodeEntryImpl throws NPE during reorderNodes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@576296 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/a0ec94d1a547749bfb692cf5ada2dd30e11e5a3b",
        "file": [
            {
                "patch": "@@ -164,6 +164,12 @@ protected Document createDoc() throws RepositoryException {\n                 doc.add(new Field(FieldNames.PARENT, node.getParentId().toString(), Field.Store.YES, Field.Index.UN_TOKENIZED, Field.TermVector.NO));\n                 NodeState parent = (NodeState) stateProvider.getItemState(node.getParentId());\n                 NodeState.ChildNodeEntry child = parent.getChildNodeEntry(node.getNodeId());\n+                if (child == null) {\n+                    // this can only happen when jackrabbit\n+                    // is running in a cluster.\n+                    throw new RepositoryException(\"Missing child node entry \" +\n+                            \"for node with id: \" + node.getNodeId());\n+                }\n                 String name = NameFormat.format(child.getName(), mappings);\n                 doc.add(new Field(FieldNames.LABEL, name, Field.Store.NO, Field.Index.UN_TOKENIZED, Field.TermVector.NO));\n             }",
                "additions": 6,
                "raw_url": "https://github.com/apache/jackrabbit/raw/a0ec94d1a547749bfb692cf5ada2dd30e11e5a3b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/NodeIndexer.java",
                "status": "modified",
                "changes": 6,
                "deletions": 0,
                "sha": "cb8bb08f50679e2e330f352d09213e763b5b0985",
                "blob_url": "https://github.com/apache/jackrabbit/blob/a0ec94d1a547749bfb692cf5ada2dd30e11e5a3b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/NodeIndexer.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/NodeIndexer.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/NodeIndexer.java?ref=a0ec94d1a547749bfb692cf5ada2dd30e11e5a3b"
            },
            {
                "patch": "@@ -422,11 +422,11 @@ public Object next() {\n                 Document doc = null;\n                 try {\n                     doc = createDocument(state, getNamespaceMappings());\n+                    retrieveAggregateRoot(state, aggregateRoots);\n                 } catch (RepositoryException e) {\n-                    log.error(\"Exception while creating document for node: \"\n+                    log.warn(\"Exception while creating document for node: \"\n                             + state.getNodeId() + \": \" + e.toString());\n                 }\n-                retrieveAggregateRoot(state, aggregateRoots);\n                 return doc;\n             }\n         });\n@@ -451,7 +451,7 @@ public Object next() {\n                     try {\n                         return createDocument(state, getNamespaceMappings());\n                     } catch (RepositoryException e) {\n-                        log.error(\"Exception while creating document for node: \"\n+                        log.warn(\"Exception while creating document for node: \"\n                                 + state.getNodeId() + \": \" + e.toString());\n                     }\n                     return null;",
                "additions": 3,
                "raw_url": "https://github.com/apache/jackrabbit/raw/a0ec94d1a547749bfb692cf5ada2dd30e11e5a3b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "af975ed5c9ad7e04a74563266cc45897a2fea944",
                "blob_url": "https://github.com/apache/jackrabbit/blob/a0ec94d1a547749bfb692cf5ada2dd30e11e5a3b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java?ref=a0ec94d1a547749bfb692cf5ada2dd30e11e5a3b"
            }
        ],
        "bug_id": "jackrabbit_80",
        "parent": "https://github.com/apache/jackrabbit/commit/c0bca944465ca480ffd9d5f7112a6aa8f2093cb7",
        "message": "JCR-931: cluster synchronization NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@540492 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/53b661237c6cd1ce2f1b50792375f0f6852faeaf",
        "file": [
            {
                "patch": "@@ -90,16 +90,15 @@\n     public SessionItemStateManager(NodeId rootNodeId,\n                                    LocalItemStateManager stateMgr,\n                                    NamespaceResolver nsResolver) {\n+        transientStore = new ItemStateMap();\n+        atticStore = new ItemStateMap();\n \n         this.stateMgr = stateMgr;\n         stateMgr.addListener(this);\n \n         // create hierarchy manager that uses both transient and persistent state\n         hierMgr = new CachingHierarchyManager(rootNodeId, this, nsResolver);\n         addListener(hierMgr);\n-\n-        transientStore = new ItemStateMap();\n-        atticStore = new ItemStateMap();\n     }\n \n     /**",
                "additions": 2,
                "raw_url": "https://github.com/apache/jackrabbit/raw/53b661237c6cd1ce2f1b50792375f0f6852faeaf/jackrabbit/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java",
                "status": "modified",
                "changes": 5,
                "deletions": 3,
                "sha": "dcbdbf436aed021761153883559d22cf237b18be",
                "blob_url": "https://github.com/apache/jackrabbit/blob/53b661237c6cd1ce2f1b50792375f0f6852faeaf/jackrabbit/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java",
                "filename": "jackrabbit/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java?ref=53b661237c6cd1ce2f1b50792375f0f6852faeaf"
            }
        ],
        "bug_id": "jackrabbit_81",
        "parent": "https://github.com/apache/jackrabbit/commit/4bea7293726749d8f89ae4fe80d98d9e369bb2dd",
        "message": "JCR-648: fixed potential cause of NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@480877 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/b25503c7e069a88cd8ffa0499538e44b41f95783",
        "file": [
            {
                "patch": "@@ -364,15 +364,6 @@ private static String getPropertyDefSpec(PropertyDefinition property)\n         }\n         String type = PropertyType.nameFromValue(property.getRequiredType());\n         writer.println(\"  RequiredType \" + type.toUpperCase());\n-        writer.print(\"  ValueConstraints [\");\n-        String[] constraints = property.getValueConstraints();\n-        for (int i = 0; i < constraints.length; i++) {\n-            if (i > 0) {\n-                writer.print(',');\n-            }\n-            writer.print(constraints[i]);\n-        }\n-        writer.println(\"]\");\n         Value[] values = property.getDefaultValues();\n         if (values != null && values.length > 0) {\n             writer.print(\"  DefaultValues [\");",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/PredefinedNodeTypeTest.java",
                "status": "modified",
                "changes": 9,
                "deletions": 9,
                "sha": "2c00e83fba7dfd1de460d0bb52de84a1b2aa30f1",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/PredefinedNodeTypeTest.java",
                "filename": "jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/PredefinedNodeTypeTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/PredefinedNodeTypeTest.java?ref=b25503c7e069a88cd8ffa0499538e44b41f95783"
            },
            {
                "patch": "@@ -11,7 +11,6 @@ PrimaryItemName\n PropertyDefinition\n   Name jcr:lockIsDeep\n   RequiredType BOOLEAN\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory false\n@@ -21,7 +20,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:lockOwner\n   RequiredType STRING\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory false",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/mix-lockable.txt",
                "status": "modified",
                "changes": 2,
                "deletions": 2,
                "sha": "f0e0b774c6be5d5e0d617378e773cf729aefd7ad",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/mix-lockable.txt",
                "filename": "jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/mix-lockable.txt",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/mix-lockable.txt?ref=b25503c7e069a88cd8ffa0499538e44b41f95783"
            },
            {
                "patch": "@@ -11,7 +11,6 @@ PrimaryItemName\n PropertyDefinition\n   Name jcr:uuid\n   RequiredType STRING\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated true\n   Mandatory true",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/mix-referenceable.txt",
                "status": "modified",
                "changes": 1,
                "deletions": 1,
                "sha": "634c9854a4c5a3dd39839b67408eae7e146d58e0",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/mix-referenceable.txt",
                "filename": "jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/mix-referenceable.txt",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/mix-referenceable.txt?ref=b25503c7e069a88cd8ffa0499538e44b41f95783"
            },
            {
                "patch": "@@ -11,7 +11,6 @@ PrimaryItemName\n PropertyDefinition\n   Name jcr:baseVersion\n   RequiredType REFERENCE\n-  ValueConstraints [nt:version]\n   DefaultValues null\n   AutoCreated false\n   Mandatory true\n@@ -21,7 +20,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:isCheckedOut\n   RequiredType BOOLEAN\n-  ValueConstraints []\n   DefaultValues [true]\n   AutoCreated true\n   Mandatory true\n@@ -31,7 +29,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:mergeFailed\n   RequiredType REFERENCE\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory false\n@@ -41,7 +38,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:predecessors\n   RequiredType REFERENCE\n-  ValueConstraints [nt:version]\n   DefaultValues null\n   AutoCreated false\n   Mandatory true\n@@ -51,7 +47,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:versionHistory\n   RequiredType REFERENCE\n-  ValueConstraints [nt:versionHistory]\n   DefaultValues null\n   AutoCreated false\n   Mandatory true",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/mix-versionable.txt",
                "status": "modified",
                "changes": 5,
                "deletions": 5,
                "sha": "8aff88e48089378642017d566ed8dc223e37ef85",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/mix-versionable.txt",
                "filename": "jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/mix-versionable.txt",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/mix-versionable.txt?ref=b25503c7e069a88cd8ffa0499538e44b41f95783"
            },
            {
                "patch": "@@ -11,7 +11,6 @@ PrimaryItemName\n PropertyDefinition\n   Name jcr:mixinTypes\n   RequiredType NAME\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory false\n@@ -21,7 +20,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:primaryType\n   RequiredType NAME\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated true\n   Mandatory true",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-base.txt",
                "status": "modified",
                "changes": 2,
                "deletions": 2,
                "sha": "24eec467ce63b220c6959ed0465ccec3d97d5fd3",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-base.txt",
                "filename": "jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-base.txt",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-base.txt?ref=b25503c7e069a88cd8ffa0499538e44b41f95783"
            },
            {
                "patch": "@@ -11,7 +11,6 @@ PrimaryItemName\n PropertyDefinition\n   Name jcr:autoCreated\n   RequiredType BOOLEAN\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory true\n@@ -21,7 +20,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:defaultPrimaryType\n   RequiredType NAME\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory false\n@@ -31,7 +29,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:mandatory\n   RequiredType BOOLEAN\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory true\n@@ -41,7 +38,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:name\n   RequiredType NAME\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory false\n@@ -51,7 +47,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:onParentVersion\n   RequiredType STRING\n-  ValueConstraints [COPY,VERSION,INITIALIZE,COMPUTE,IGNORE,ABORT]\n   DefaultValues null\n   AutoCreated false\n   Mandatory true\n@@ -61,7 +56,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:protected\n   RequiredType BOOLEAN\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory true\n@@ -71,7 +65,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:requiredPrimaryTypes\n   RequiredType NAME\n-  ValueConstraints []\n   DefaultValues [nt:base]\n   AutoCreated false\n   Mandatory true\n@@ -81,7 +74,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:sameNameSiblings\n   RequiredType BOOLEAN\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory true",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-childNodeDefinition.txt",
                "status": "modified",
                "changes": 8,
                "deletions": 8,
                "sha": "1a5954e38d534d1e9f8d045755890f8a534cae07",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-childNodeDefinition.txt",
                "filename": "jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-childNodeDefinition.txt",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-childNodeDefinition.txt?ref=b25503c7e069a88cd8ffa0499538e44b41f95783"
            },
            {
                "patch": "@@ -21,7 +21,6 @@ ChildNodeDefinition\n PropertyDefinition\n   Name jcr:frozenMixinTypes\n   RequiredType NAME\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory false\n@@ -31,7 +30,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:frozenPrimaryType\n   RequiredType NAME\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated true\n   Mandatory true\n@@ -41,7 +39,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:frozenUuid\n   RequiredType STRING\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated true\n   Mandatory true\n@@ -51,7 +48,6 @@ PropertyDefinition\n PropertyDefinition\n   Name \"*\"\n   RequiredType UNDEFINED\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory false\n@@ -61,7 +57,6 @@ PropertyDefinition\n PropertyDefinition\n   Name \"*\"\n   RequiredType UNDEFINED\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory false",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-frozenNode.txt",
                "status": "modified",
                "changes": 5,
                "deletions": 5,
                "sha": "76ff255f5bc5b616512d7945bde192402a0b9fd5",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-frozenNode.txt",
                "filename": "jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-frozenNode.txt",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-frozenNode.txt?ref=b25503c7e069a88cd8ffa0499538e44b41f95783"
            },
            {
                "patch": "@@ -11,7 +11,6 @@ PrimaryItemName\n PropertyDefinition\n   Name jcr:created\n   RequiredType DATE\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated true\n   Mandatory false",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-hierarchyNode.txt",
                "status": "modified",
                "changes": 1,
                "deletions": 1,
                "sha": "70819a663ebfda918b87cb7729a1fd325dfbb6c2",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-hierarchyNode.txt",
                "filename": "jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-hierarchyNode.txt",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-hierarchyNode.txt?ref=b25503c7e069a88cd8ffa0499538e44b41f95783"
            },
            {
                "patch": "@@ -11,7 +11,6 @@ PrimaryItemName\n PropertyDefinition\n   Name jcr:content\n   RequiredType REFERENCE\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory true",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-linkedFile.txt",
                "status": "modified",
                "changes": 1,
                "deletions": 1,
                "sha": "372dae8004cc99851486db6586ef83c6f73d43ea",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-linkedFile.txt",
                "filename": "jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-linkedFile.txt",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-linkedFile.txt?ref=b25503c7e069a88cd8ffa0499538e44b41f95783"
            },
            {
                "patch": "@@ -29,7 +29,6 @@ ChildNodeDefinition\n PropertyDefinition\n   Name jcr:hasOrderableChildNodes\n   RequiredType BOOLEAN\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory true\n@@ -39,7 +38,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:isMixin\n   RequiredType BOOLEAN\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory true\n@@ -49,7 +47,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:nodeTypeName\n   RequiredType NAME\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory true\n@@ -59,7 +56,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:primaryItemName\n   RequiredType NAME\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory false\n@@ -69,7 +65,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:supertypes\n   RequiredType NAME\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory false",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-nodeType.txt",
                "status": "modified",
                "changes": 5,
                "deletions": 5,
                "sha": "f9302563dbdcb22b76f552e0e756713bd504eb67",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-nodeType.txt",
                "filename": "jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-nodeType.txt",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-nodeType.txt?ref=b25503c7e069a88cd8ffa0499538e44b41f95783"
            },
            {
                "patch": "@@ -11,7 +11,6 @@ PrimaryItemName\n PropertyDefinition\n   Name jcr:autoCreated\n   RequiredType BOOLEAN\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory true\n@@ -21,7 +20,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:defaultValues\n   RequiredType UNDEFINED\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory false\n@@ -31,7 +29,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:mandatory\n   RequiredType BOOLEAN\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory true\n@@ -41,7 +38,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:multiple\n   RequiredType BOOLEAN\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory true\n@@ -51,7 +47,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:name\n   RequiredType NAME\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory false\n@@ -61,7 +56,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:onParentVersion\n   RequiredType STRING\n-  ValueConstraints [COPY,VERSION,INITIALIZE,COMPUTE,IGNORE,ABORT]\n   DefaultValues null\n   AutoCreated false\n   Mandatory true\n@@ -71,7 +65,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:protected\n   RequiredType BOOLEAN\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory true\n@@ -81,7 +74,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:requiredType\n   RequiredType STRING\n-  ValueConstraints [STRING,BINARY,LONG,DOUBLE,BOOLEAN,DATE,NAME,PATH,REFERENCE,UNDEFINED]\n   DefaultValues null\n   AutoCreated false\n   Mandatory true\n@@ -91,7 +83,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:valueConstraints\n   RequiredType STRING\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory false",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-propertyDefinition.txt",
                "status": "modified",
                "changes": 9,
                "deletions": 9,
                "sha": "96300ed1606c4b167338277e253de6186c98b13e",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-propertyDefinition.txt",
                "filename": "jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-propertyDefinition.txt",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-propertyDefinition.txt?ref=b25503c7e069a88cd8ffa0499538e44b41f95783"
            },
            {
                "patch": "@@ -11,7 +11,6 @@ PrimaryItemName\n PropertyDefinition\n   Name jcr:language\n   RequiredType STRING\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory false\n@@ -21,7 +20,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:statement\n   RequiredType STRING\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory false",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-query.txt",
                "status": "modified",
                "changes": 2,
                "deletions": 2,
                "sha": "b4dba314ab058ddc60bc22fcdb12f45ea5824ae9",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-query.txt",
                "filename": "jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-query.txt",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-query.txt?ref=b25503c7e069a88cd8ffa0499538e44b41f95783"
            },
            {
                "patch": "@@ -12,7 +12,6 @@ PrimaryItemName\n PropertyDefinition\n   Name jcr:data\n   RequiredType BINARY\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory true\n@@ -22,7 +21,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:encoding\n   RequiredType STRING\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory false\n@@ -32,7 +30,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:lastModified\n   RequiredType DATE\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory true\n@@ -42,7 +39,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:mimeType\n   RequiredType STRING\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory true",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-resource.txt",
                "status": "modified",
                "changes": 4,
                "deletions": 4,
                "sha": "0ac93bf4f0450b9d06127e7fc61bf5b6eb9dd516",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-resource.txt",
                "filename": "jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-resource.txt",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-resource.txt?ref=b25503c7e069a88cd8ffa0499538e44b41f95783"
            },
            {
                "patch": "@@ -20,7 +20,6 @@ ChildNodeDefinition\n PropertyDefinition\n   Name \"*\"\n   RequiredType UNDEFINED\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory false\n@@ -30,7 +29,6 @@ PropertyDefinition\n PropertyDefinition\n   Name \"*\"\n   RequiredType UNDEFINED\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated false\n   Mandatory false",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-unstructured.txt",
                "status": "modified",
                "changes": 2,
                "deletions": 2,
                "sha": "20030495c86e4bea63bd7daf5811d41c2734eb96",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-unstructured.txt",
                "filename": "jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-unstructured.txt",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-unstructured.txt?ref=b25503c7e069a88cd8ffa0499538e44b41f95783"
            },
            {
                "patch": "@@ -21,7 +21,6 @@ ChildNodeDefinition\n PropertyDefinition\n   Name jcr:created\n   RequiredType DATE\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated true\n   Mandatory true\n@@ -31,7 +30,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:predecessors\n   RequiredType REFERENCE\n-  ValueConstraints [nt:version]\n   DefaultValues null\n   AutoCreated false\n   Mandatory false\n@@ -41,7 +39,6 @@ PropertyDefinition\n PropertyDefinition\n   Name jcr:successors\n   RequiredType REFERENCE\n-  ValueConstraints [nt:version]\n   DefaultValues null\n   AutoCreated false\n   Mandatory false",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-version.txt",
                "status": "modified",
                "changes": 3,
                "deletions": 3,
                "sha": "cac88227083978d22fce4951964ef9a1134688c0",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-version.txt",
                "filename": "jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-version.txt",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-version.txt?ref=b25503c7e069a88cd8ffa0499538e44b41f95783"
            },
            {
                "patch": "@@ -39,7 +39,6 @@ ChildNodeDefinition\n PropertyDefinition\n   Name jcr:versionableUuid\n   RequiredType STRING\n-  ValueConstraints []\n   DefaultValues null\n   AutoCreated true\n   Mandatory true",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-versionHistory.txt",
                "status": "modified",
                "changes": 1,
                "deletions": 1,
                "sha": "cad4c8f779c529cf5576a8972f2c239479083e22",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-versionHistory.txt",
                "filename": "jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-versionHistory.txt",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-versionHistory.txt?ref=b25503c7e069a88cd8ffa0499538e44b41f95783"
            },
            {
                "patch": "@@ -11,7 +11,6 @@ PrimaryItemName\n PropertyDefinition\n   Name \"*\"\n   RequiredType REFERENCE\n-  ValueConstraints [nt:version]\n   DefaultValues null\n   AutoCreated false\n   Mandatory false",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-versionLabels.txt",
                "status": "modified",
                "changes": 1,
                "deletions": 1,
                "sha": "71054269ddc32930ca6b1e752dc0248551c9a11d",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-versionLabels.txt",
                "filename": "jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-versionLabels.txt",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-versionLabels.txt?ref=b25503c7e069a88cd8ffa0499538e44b41f95783"
            },
            {
                "patch": "@@ -11,7 +11,6 @@ PrimaryItemName\n PropertyDefinition\n   Name jcr:childVersionHistory\n   RequiredType REFERENCE\n-  ValueConstraints [nt:versionHistory]\n   DefaultValues null\n   AutoCreated true\n   Mandatory true",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-versionedChild.txt",
                "status": "modified",
                "changes": 1,
                "deletions": 1,
                "sha": "8b101a09fdc648a2e2b7c2af5a5dc1c4f478864d",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b25503c7e069a88cd8ffa0499538e44b41f95783/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-versionedChild.txt",
                "filename": "jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-versionedChild.txt",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/nodetype/spec/nt-versionedChild.txt?ref=b25503c7e069a88cd8ffa0499538e44b41f95783"
            }
        ],
        "bug_id": "jackrabbit_82",
        "parent": "https://github.com/apache/jackrabbit/commit/e2272fe4ed0172d584f1094083f2aaa94d889468",
        "message": "JCR-541: NPE in PredefinedNodeTypeTest.getPropertyDefSpec\n- PropertyDefinition.getValueConstratins() may return null\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@430715 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/a0b46378111db40c38862ae45eea1e5387b91fbd",
        "file": [
            {
                "patch": "@@ -152,8 +152,12 @@ private void init() throws RepositoryException {\n                     QName name = pState.getName();\n                     UUID ref = (UUID) pState.getValues()[0].internalValue();\n                     InternalVersionImpl v = (InternalVersionImpl) getVersion(new NodeId(ref));\n-                    labelCache.put(name, v);\n-                    v.internalAddLabel(name);\n+                    if (v != null) {\n+                        labelCache.put(name, v);\n+                        v.internalAddLabel(name);\n+                    } else {\n+                        log.warn(\"Error while resolving label reference. Version missing: \" + ref);\n+                    }\n                 }\n             }\n         } catch (ItemStateException e) {",
                "additions": 6,
                "raw_url": "https://github.com/apache/jackrabbit/raw/a0b46378111db40c38862ae45eea1e5387b91fbd/jackrabbit/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java",
                "status": "modified",
                "changes": 8,
                "deletions": 2,
                "sha": "b09ccddc9eed9e6ffa507674aff034661defd861",
                "blob_url": "https://github.com/apache/jackrabbit/blob/a0b46378111db40c38862ae45eea1e5387b91fbd/jackrabbit/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java",
                "filename": "jackrabbit/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java?ref=a0b46378111db40c38862ae45eea1e5387b91fbd"
            }
        ],
        "bug_id": "jackrabbit_83",
        "parent": "https://github.com/apache/jackrabbit/commit/0ce449c65fc93dd402fd1d88ba3baa8e89be69df",
        "message": "adding simple protection of eventual NPE. need to investigate further.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@405567 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/13bccb105c764cd3aa61d34649a3b9efa4b482cd",
        "file": [
            {
                "patch": "@@ -929,10 +929,13 @@ private String getJcrName(DavPropertyName propName) throws RepositoryException {\n      * @throws RepositoryException\n      */\n     private void setJcrProperty(DavProperty property) throws RepositoryException {\n-        // retrieve value\n-        String value = property.getValue().toString();\n-        // set value; since multivalued-properties are not listed in the set\n-        // of available properties, this extra validation-check is omitted.\n+        // Retrieve the property value. Note, that a 'null' value is replaced\n+        // by empty string, since setting a jcr property value to 'null'\n+        // would be equivalent to its removal.\n+        String value = \"\";\n+        if (property.getValue() != null) {\n+            value = property.getValue().toString();\n+        }\n         node.setProperty(getJcrName(property.getName()), value);\n     }\n ",
                "additions": 7,
                "raw_url": "https://github.com/apache/jackrabbit/raw/13bccb105c764cd3aa61d34649a3b9efa4b482cd/jcr-server/server/src/java/org/apache/jackrabbit/webdav/simple/DavResourceImpl.java",
                "status": "modified",
                "changes": 11,
                "deletions": 4,
                "sha": "d45faca152fb7da8e32881afa4c8e15dbbe84106",
                "blob_url": "https://github.com/apache/jackrabbit/blob/13bccb105c764cd3aa61d34649a3b9efa4b482cd/jcr-server/server/src/java/org/apache/jackrabbit/webdav/simple/DavResourceImpl.java",
                "filename": "jcr-server/server/src/java/org/apache/jackrabbit/webdav/simple/DavResourceImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jcr-server/server/src/java/org/apache/jackrabbit/webdav/simple/DavResourceImpl.java?ref=13bccb105c764cd3aa61d34649a3b9efa4b482cd"
            }
        ],
        "bug_id": "jackrabbit_84",
        "parent": "https://github.com/apache/jackrabbit/commit/562b9c34963b405abfc2cbb1d1a618caddd07f6b",
        "message": "JCR-382: Setting WebDAV property without value causes NPE in DAVResourceImpl\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@390356 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/260862ca17080f2d5f6eb924f54b2a4b93c49638",
        "file": [
            {
                "patch": "@@ -1508,7 +1508,7 @@ public synchronized NodeImpl addNode(QName nodeName, QName nodeTypeName,\n         if (nodeTypeName != null) {\n             nt = session.getNodeTypeManager().getNodeType(nodeTypeName);\n         }\n-        return internalAddChildNode(nodeName, nt, new NodeId(uuid));\n+        return internalAddChildNode(nodeName, nt, uuid == null ? null : new NodeId(uuid));\n     }\n \n     /**",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/260862ca17080f2d5f6eb924f54b2a4b93c49638/jackrabbit/src/main/java/org/apache/jackrabbit/core/NodeImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "26f6d11222ac503bae732514d8c536408db92e54",
                "blob_url": "https://github.com/apache/jackrabbit/blob/260862ca17080f2d5f6eb924f54b2a4b93c49638/jackrabbit/src/main/java/org/apache/jackrabbit/core/NodeImpl.java",
                "filename": "jackrabbit/src/main/java/org/apache/jackrabbit/core/NodeImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/main/java/org/apache/jackrabbit/core/NodeImpl.java?ref=260862ca17080f2d5f6eb924f54b2a4b93c49638"
            }
        ],
        "bug_id": "jackrabbit_85",
        "parent": "https://github.com/apache/jackrabbit/commit/93ff88412eca3b31693cbaa37acdb7d1b093e237",
        "message": "- fixing eventual NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@378253 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/b6f107161b15c4cf1674f76df98421152551c88a",
        "file": [
            {
                "patch": "@@ -378,7 +378,8 @@ private NodeTypeImpl getNodeType(NodeState node, SessionImpl session)\n             throws ItemStateException {\n         try {\n             return session.getNodeTypeManager().getNodeType(node.getNodeTypeName());\n-        } catch (NoSuchNodeTypeException e) {\n+        } catch (Exception e) {\n+            // also catch eventual runtime exceptions here\n             // should never happen actually\n             String msg = \"Item \" + node.getId() + \" has unknown node type: \" + node.getNodeTypeName();\n             log.error(msg);",
                "additions": 2,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b6f107161b15c4cf1674f76df98421152551c88a/src/java/org/apache/jackrabbit/core/observation/EventStateCollection.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "69813c16e2b6d022047f29e83ecef0b7fac70f3b",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b6f107161b15c4cf1674f76df98421152551c88a/src/java/org/apache/jackrabbit/core/observation/EventStateCollection.java",
                "filename": "src/java/org/apache/jackrabbit/core/observation/EventStateCollection.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/src/java/org/apache/jackrabbit/core/observation/EventStateCollection.java?ref=b6f107161b15c4cf1674f76df98421152551c88a"
            }
        ],
        "bug_id": "jackrabbit_86",
        "parent": "https://github.com/apache/jackrabbit/commit/7f1fde4d31a586d681f568453384c6a1fd95b400",
        "message": "- adding better handling for unexpected NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@190367 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/6251ae013f83502b63a5ca7b88e50af8104c4a79",
        "file": [
            {
                "patch": "@@ -1617,12 +1617,14 @@ public boolean isNode() {\n      * {@inheritDoc}\n      */\n     public String getName() throws RepositoryException {\n+        // check state of this instance\n+        sanityCheck();\n+\n         if (state.getParentUUID() == null) {\n             // this is the root node\n             return \"\";\n         }\n \n-        //QName name = getPrimaryPath().getNameElement().getName();\n         QName name = session.getHierarchyManager().getName(id);\n         try {\n             return name.toJCRName(session.getNamespaceResolver());",
                "additions": 3,
                "raw_url": "https://github.com/apache/jackrabbit/raw/6251ae013f83502b63a5ca7b88e50af8104c4a79/src/java/org/apache/jackrabbit/core/NodeImpl.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "5f4fb7aa9d03f5bb38a208be0b6a554849c8a1e3",
                "blob_url": "https://github.com/apache/jackrabbit/blob/6251ae013f83502b63a5ca7b88e50af8104c4a79/src/java/org/apache/jackrabbit/core/NodeImpl.java",
                "filename": "src/java/org/apache/jackrabbit/core/NodeImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/src/java/org/apache/jackrabbit/core/NodeImpl.java?ref=6251ae013f83502b63a5ca7b88e50af8104c4a79"
            }
        ],
        "bug_id": "jackrabbit_87",
        "parent": "https://github.com/apache/jackrabbit/commit/105b3b1d3496786cd85305e462d208edf66d1ca9",
        "message": "calling Node.getName() on disposed instance could throw NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@160858 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/755261b37d3b958fd21af44435beea0f0e5f574c",
        "file": [
            {
                "patch": "@@ -243,8 +243,12 @@ private void readPrimaryItemName() throws InvalidNodeTypeDefException {\n      * Writes the primary item name of the node type definition.\n      */\n     private void writePrimaryItemName() {\n-        String value = toJCRName(def.getPrimaryItemName());\n-        setAttribute(PRIMARYITEMNAME_ATTRIBUTE, value);\n+        QName name = def.getPrimaryItemName();\n+        if (name == null) {\n+            setAttribute(PRIMARYITEMNAME_ATTRIBUTE, \"\");\n+        } else {\n+            setAttribute(PRIMARYITEMNAME_ATTRIBUTE, toJCRName(name));\n+        }\n     }\n \n     /**",
                "additions": 6,
                "raw_url": "https://github.com/apache/jackrabbit/raw/755261b37d3b958fd21af44435beea0f0e5f574c/src/java/org/apache/jackrabbit/core/nodetype/xml/NodeTypeFormat.java",
                "status": "modified",
                "changes": 8,
                "deletions": 2,
                "sha": "dfa45d2f8dc340e6b2955598302ef8e03b96a12b",
                "blob_url": "https://github.com/apache/jackrabbit/blob/755261b37d3b958fd21af44435beea0f0e5f574c/src/java/org/apache/jackrabbit/core/nodetype/xml/NodeTypeFormat.java",
                "filename": "src/java/org/apache/jackrabbit/core/nodetype/xml/NodeTypeFormat.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/src/java/org/apache/jackrabbit/core/nodetype/xml/NodeTypeFormat.java?ref=755261b37d3b958fd21af44435beea0f0e5f574c"
            }
        ],
        "bug_id": "jackrabbit_88",
        "parent": "https://github.com/apache/jackrabbit/commit/0c4f85792cdbac9648fd6fc18d544cdcf8ef5c31",
        "message": "- fixing NPE in export of custom nodetypes\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@157729 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/19cff315b9ba0d01002dceb39f74c8c3c09805a0",
        "file": [
            {
                "patch": "@@ -125,6 +125,7 @@\n      */\n     private RepositoryImpl(RepositoryConfig repConfig) throws RepositoryException {\n         this.repConfig = repConfig;\n+\n         // setup file systems\n         repStore = repConfig.getFileSystem();\n         String fsRootPath = \"/meta\";\n@@ -240,6 +241,12 @@ private RepositoryImpl(RepositoryConfig repConfig) throws RepositoryException {\n             throw new RepositoryException(msg, fse);\n         }\n \n+        // load repository properties\n+        repProps = new Properties();\n+        loadRepProps();\n+        nodesCount = Long.parseLong(repProps.getProperty(STATS_NODE_COUNT_PROPERTY, \"0\"));\n+        propsCount = Long.parseLong(repProps.getProperty(STATS_PROP_COUNT_PROPERTY, \"0\"));\n+\n         // setup internal transaction manager\n         // @todo rewrite to use file system abstraction (FileSystem interface)\n         try {\n@@ -276,12 +283,6 @@ private RepositoryImpl(RepositoryConfig repConfig) throws RepositoryException {\n         pvMgr = new NativePVM(verSession);\n         vMgr = new VersionManagerImpl(pvMgr);\n \n-        // load repository properties\n-        repProps = new Properties();\n-        loadRepProps();\n-        nodesCount = Long.parseLong(repProps.getProperty(STATS_NODE_COUNT_PROPERTY, \"0\"));\n-        propsCount = Long.parseLong(repProps.getProperty(STATS_PROP_COUNT_PROPERTY, \"0\"));\n-\n         // finally register shutdown hook\n         Runtime.getRuntime().addShutdownHook(new Thread() {\n             public void run() {",
                "additions": 7,
                "raw_url": "https://github.com/apache/jackrabbit/raw/19cff315b9ba0d01002dceb39f74c8c3c09805a0/src/java/org/apache/jackrabbit/core/RepositoryImpl.java",
                "status": "modified",
                "changes": 13,
                "deletions": 6,
                "sha": "f62e22602a3c31a992707c993b613c9b99d03c53",
                "blob_url": "https://github.com/apache/jackrabbit/blob/19cff315b9ba0d01002dceb39f74c8c3c09805a0/src/java/org/apache/jackrabbit/core/RepositoryImpl.java",
                "filename": "src/java/org/apache/jackrabbit/core/RepositoryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/src/java/org/apache/jackrabbit/core/RepositoryImpl.java?ref=19cff315b9ba0d01002dceb39f74c8c3c09805a0"
            }
        ],
        "bug_id": "jackrabbit_89",
        "parent": "https://github.com/apache/jackrabbit/commit/6ffd5f53a780cb6414bd48a28f2956f0198fcce5",
        "message": "fixed NPE that occured occasionally on repository instantiation \n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@125055 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/b6c2fa59db67bdb2a7acfa6e0ec7a41cb122e052",
        "file": [
            {
                "patch": "@@ -477,6 +477,11 @@ private String getPath(NodeState node) {\n                 NodeId parentId = node.getParentId();\n                 NodeState parent = (NodeState) stateMgr.getItemState(parentId);\n                 ChildNodeEntry entry = parent.getChildNodeEntry(node.getNodeId());\n+                if (entry == null) {\n+                    log.warn(\"Failed to build path: abandoned child {} of node {}. \" +\n+                            \"Please run a repository consistency check\", node.getNodeId(), parentId);\n+                    return uuid;\n+                }\n                 elements.add(entry);\n                 node = parent;\n             }",
                "additions": 5,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b6c2fa59db67bdb2a7acfa6e0ec7a41cb122e052/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/ConsistencyCheck.java",
                "status": "modified",
                "changes": 5,
                "deletions": 0,
                "sha": "8192984366c7464955a1201e03d2461700608676",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b6c2fa59db67bdb2a7acfa6e0ec7a41cb122e052/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/ConsistencyCheck.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/ConsistencyCheck.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/ConsistencyCheck.java?ref=b6c2fa59db67bdb2a7acfa6e0ec7a41cb122e052"
            }
        ],
        "bug_id": "jackrabbit_90",
        "parent": "https://github.com/apache/jackrabbit/commit/6e3483e1528c3df829a81cff7a9ada31554f39fb",
        "message": "JCR-3798 prevent NPE when encountering inconsistent hierarchy during building of path\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1613048 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/d64e3367c4bbb01e893b172bd735c1459d4c5f08",
        "file": [
            {
                "patch": "@@ -43,7 +43,6 @@\n import org.apache.jackrabbit.core.retention.RetentionRegistry;\n import org.apache.jackrabbit.core.security.AccessManager;\n import org.apache.jackrabbit.core.security.authorization.Permission;\n-import org.apache.jackrabbit.core.security.user.UserManagerImpl;\n import org.apache.jackrabbit.core.session.SessionContext;\n import org.apache.jackrabbit.core.state.ChildNodeEntry;\n import org.apache.jackrabbit.core.state.ItemState;\n@@ -934,10 +933,6 @@ public void checkRemoveNode(NodeState targetState, NodeId parentId,\n                 throw new RepositoryException(\"Unable to perform removal. Node is affected by a retention.\");\n             }\n         }\n-\n-        if (UserManagerImpl.includesAdmin(context.getSessionImpl().getItemManager().getNode(targetPath))) {\n-            throw new RepositoryException(\"Attempt to remove/move the admin user.\");\n-        }\n     }\n \n     /**",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java",
                "status": "modified",
                "changes": 5,
                "deletions": 5,
                "sha": "ff32888e91aa4922f35fc8c25a07d453b1a1d4ef",
                "blob_url": "https://github.com/apache/jackrabbit/blob/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java?ref=d64e3367c4bbb01e893b172bd735c1459d4c5f08"
            },
            {
                "patch": "@@ -33,7 +33,6 @@\n import org.apache.jackrabbit.core.nodetype.NodeTypeConflictException;\n import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;\n import org.apache.jackrabbit.core.security.authorization.Permission;\n-import org.apache.jackrabbit.core.security.user.UserManagerImpl;\n import org.apache.jackrabbit.core.session.SessionContext;\n import org.apache.jackrabbit.core.session.SessionOperation;\n import org.apache.jackrabbit.core.state.NodeState;\n@@ -303,10 +302,6 @@ private void checkCondition(ItemImpl item, int options, int permissions, boolean\n                 throw new RepositoryException(\"Unable to perform operation. Node is affected by a retention.\");\n             }\n         }\n-\n-        if (isRemoval && item.isNode() && UserManagerImpl.includesAdmin((NodeImpl) item)) {\n-            throw new RepositoryException(\"Attempt to remove/move the admin user.\");\n-        }\n     }\n \n     public synchronized boolean canModify(",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemValidator.java",
                "status": "modified",
                "changes": 5,
                "deletions": 5,
                "sha": "eb08c56812c9680ae9aab060fcb9095297c3797f",
                "blob_url": "https://github.com/apache/jackrabbit/blob/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemValidator.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemValidator.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemValidator.java?ref=d64e3367c4bbb01e893b172bd735c1459d4c5f08"
            },
            {
                "patch": "@@ -16,7 +16,6 @@\n  */\n package org.apache.jackrabbit.core.security.user;\n \n-import org.apache.jackrabbit.api.JackrabbitRepository;\n import org.apache.jackrabbit.api.security.principal.ItemBasedPrincipal;\n import org.apache.jackrabbit.api.security.user.Authorizable;\n import org.apache.jackrabbit.api.security.user.AuthorizableExistsException;\n@@ -1154,20 +1153,6 @@ public void loggedOut(SessionImpl session) {\n         }\n     }\n \n-    //--------------------------------------------------------------------------\n-    public static boolean includesAdmin(NodeImpl node) throws RepositoryException {\n-        SessionImpl s = (SessionImpl) node.getSession();\n-        if (s.getRepository().getDescriptorValue(JackrabbitRepository.OPTION_USER_MANAGEMENT_SUPPORTED).getBoolean()) {\n-            UserManager uMgr = s.getUserManager();\n-            if (uMgr instanceof UserManagerImpl) {\n-                UserManagerImpl uMgrImpl = (UserManagerImpl) uMgr;\n-                AuthorizableImpl admin = (AuthorizableImpl) uMgrImpl.getAuthorizable(uMgrImpl.adminId);\n-                return Text.isDescendantOrEqual(node.getPath(), admin.getNode().getPath());\n-            }\n-        }\n-        return false;\n-    }\n-\n     //------------------------------------------------------< inner classes >---\n     /**\n      * Inner class",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java",
                "status": "modified",
                "changes": 15,
                "deletions": 15,
                "sha": "dcdc91d5b9d1142c657dfa463d9e6355a472312d",
                "blob_url": "https://github.com/apache/jackrabbit/blob/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java?ref=d64e3367c4bbb01e893b172bd735c1459d4c5f08"
            },
            {
                "patch": "@@ -16,13 +16,20 @@\n  */\n package org.apache.jackrabbit.core.security.user;\n \n+import java.util.Properties;\n+import javax.jcr.Node;\n import javax.jcr.RepositoryException;\n import javax.jcr.Session;\n \n import org.apache.jackrabbit.api.security.user.AbstractUserTest;\n import org.apache.jackrabbit.api.security.user.Authorizable;\n+import org.apache.jackrabbit.api.security.user.User;\n+import org.apache.jackrabbit.api.security.user.UserManager;\n import org.apache.jackrabbit.core.NodeImpl;\n+import org.apache.jackrabbit.core.SessionImpl;\n+import org.apache.jackrabbit.core.id.NodeId;\n import org.apache.jackrabbit.core.security.principal.AdminPrincipal;\n+import org.apache.jackrabbit.spi.commons.conversion.NameResolver;\n import org.apache.jackrabbit.test.NotExecutableException;\n \n /**\n@@ -65,119 +72,197 @@ public void testRemoveSelf() throws RepositoryException, NotExecutableException\n         }\n     }\n \n+    /**\n+     * Test if the administrator is recreated upon login if the corresponding\n+     * node gets removed.\n+     *\n+     * @throws RepositoryException\n+     * @throws NotExecutableException\n+     */\n     public void testRemoveAdminNode() throws RepositoryException, NotExecutableException {\n         Authorizable admin = userMgr.getAuthorizable(adminId);\n \n         if (admin == null || !(admin instanceof AuthorizableImpl)) {\n             throw new NotExecutableException();\n         }\n \n-        Session s = null;\n+        // access the node corresponding to the admin user and remove it\n+        NodeImpl adminNode = ((AuthorizableImpl) admin).getNode();\n+        Session s = adminNode.getSession();\n+        adminNode.remove();\n+        // use session obtained from the node as usermgr may point to a dedicated\n+        // system workspace different from the superusers workspace.\n+        s.save();\n+\n+        // after removing the node the admin user doesn't exist any more\n+        assertNull(userMgr.getAuthorizable(adminId));\n+\n+        // login must succeed as system user mgr recreates the admin user\n+        Session s2 = getHelper().getSuperuserSession();\n         try {\n-            NodeImpl adminNode = ((AuthorizableImpl) admin).getNode();\n-            s = adminNode.getSession();\n-            adminNode.remove();\n-            // use session obtained from the node as usermgr may point to a dedicated\n-            // system workspace different from the superusers workspace.\n-            s.save();\n-            fail();\n-        } catch (RepositoryException e) {\n-            // success\n+            admin = userMgr.getAuthorizable(adminId);\n+            assertNotNull(admin);\n+            assertNotNull(getUserManager(s2).getAuthorizable(adminId));\n         } finally {\n-            if (s != null) {\n-                s.refresh(false);\n-            }\n+            s2.logout();\n         }\n     }\n \n-    public void testSessionRemoveItem()  throws RepositoryException, NotExecutableException {\n+    /**\n+     * Test for collisions that would prevent from recreate the admin user.\n+     * - an intermediate rep:AuthorizableFolder node with the same name\n+     */\n+    public void testAdminNodeCollidingWithAuthorizableFolder() throws RepositoryException, NotExecutableException {\n         Authorizable admin = userMgr.getAuthorizable(adminId);\n \n         if (admin == null || !(admin instanceof AuthorizableImpl)) {\n             throw new NotExecutableException();\n         }\n \n-        Session s = null;\n+        // access the node corresponding to the admin user and remove it\n+        NodeImpl adminNode = ((AuthorizableImpl) admin).getNode();\n+        String adminPath = adminNode.getPath();\n+        String adminNodeName = adminNode.getName();\n+        Node parentNode = adminNode.getParent();\n+\n+        Session s = adminNode.getSession();\n+        adminNode.remove();\n+        // use session obtained from the node as usermgr may point to a dedicated\n+        // system workspace different from the superusers workspace.\n+        s.save();\n+\n+        Session s2 = null;\n+        String collidingPath = null;\n         try {\n-            NodeImpl parent = (NodeImpl) ((AuthorizableImpl) admin).getNode().getParent();\n-            s = parent.getSession();\n-            s.removeItem(parent.getPath());\n+            // now create a colliding node:\n+            Node n = parentNode.addNode(adminNodeName, \"rep:AuthorizableFolder\");\n+            collidingPath = n.getPath();\n             s.save();\n-            fail();\n-        } catch (RepositoryException e) {\n-            // success\n+\n+            // force recreation of admin user.\n+            s2 = getHelper().getSuperuserSession();\n+\n+            admin = userMgr.getAuthorizable(adminId);\n+            assertNotNull(admin);\n+            assertEquals(adminNodeName, ((AuthorizableImpl) admin).getNode().getName());\n+            assertFalse(adminPath.equals(((AuthorizableImpl) admin).getNode().getPath()));\n+\n         } finally {\n-            if (s != null) {\n-                s.refresh(false);\n+            if (s2 != null) {\n+                s2.logout();\n+            }\n+            // remove the extra folder and the admin user (created underneath) again.\n+            if (collidingPath != null) {\n+                s.getNode(collidingPath).remove();\n+                s.save();\n             }\n         }\n     }\n \n-    public void testSessionMoveAdminNode()  throws RepositoryException, NotExecutableException {\n+    /**\n+     * Test for collisions that would prevent from recreate the admin user.\n+     * - a colliding node somewhere else with the same jcr:uuid.\n+     *\n+     * Test if creation of the administrator user forces the removal of some\n+     * other node in the repository that by change happens to have the same\n+     * jcr:uuid and thus inhibits the creation of the admininstrator user.\n+     */\n+    public void testAdminNodeCollidingWithRandomNode() throws RepositoryException, NotExecutableException {\n         Authorizable admin = userMgr.getAuthorizable(adminId);\n \n         if (admin == null || !(admin instanceof AuthorizableImpl)) {\n             throw new NotExecutableException();\n         }\n \n-        Session s = null;\n+        // access the node corresponding to the admin user and remove it\n+        NodeImpl adminNode = ((AuthorizableImpl) admin).getNode();\n+        NodeId nid = adminNode.getNodeId();\n+\n+        Session s = adminNode.getSession();\n+        adminNode.remove();\n+        // use session obtained from the node as usermgr may point to a dedicated\n+        // system workspace different from the superusers workspace.\n+        s.save();\n+\n+        Session s2 = null;\n+        String collidingPath = null;\n         try {\n-            NodeImpl adminNode = ((AuthorizableImpl) admin).getNode();\n-            s = adminNode.getSession();\n-            s.move(adminNode.getPath(), \"/somewhereelse\");\n-            // use session obtained from the node as usermgr may point to a dedicated\n-            // system workspace different from the superusers workspace.\n+            // create a colliding node outside of the user tree\n+            NameResolver nr = (SessionImpl) s;\n+            // NOTE: testRootNode will not be present if users are stored in a distinct wsp.\n+            //       therefore use root node as start...\n+            NodeImpl tr = (NodeImpl) s.getRootNode();\n+            Node n = tr.addNode(nr.getQName(\"tmpNode\"), nr.getQName(testNodeType), nid);\n+            collidingPath = n.getPath();\n             s.save();\n-            fail();\n-        } catch (RepositoryException e) {\n-            // success\n-        }  finally {\n-            if (s != null) {\n-                s.refresh(false);\n-            }\n-        }\n-    }\n \n-    public void testSessionMoveParentNode()  throws RepositoryException, NotExecutableException {\n-        Authorizable admin = userMgr.getAuthorizable(adminId);\n+            // force recreation of admin user.\n+            s2 = getHelper().getSuperuserSession();\n \n-        if (admin == null || !(admin instanceof AuthorizableImpl)) {\n-            throw new NotExecutableException();\n-        }\n+            admin = userMgr.getAuthorizable(adminId);\n+            assertNotNull(admin);\n+            // the colliding node must have been removed.\n+            assertFalse(s2.nodeExists(collidingPath));\n \n-        Session s = null;\n-        try {\n-            NodeImpl parent = (NodeImpl) ((AuthorizableImpl) admin).getNode().getParent();\n-            s = parent.getSession();\n-            s.move(parent.getPath(), \"/somewhereelse\");\n-            // use session obtained from the node as usermgr may point to a dedicated\n-            // system workspace different from the superusers workspace.\n-            s.save();\n-            fail();\n-        } catch (RepositoryException e) {\n-            // success\n         } finally {\n-            if (s != null) {\n-                s.refresh(false);\n+            if (s2 != null) {\n+                s2.logout();\n+            }\n+            if (collidingPath != null && s.nodeExists(collidingPath)) {\n+                s.getNode(collidingPath).remove();\n+                s.save();\n             }\n         }\n     }\n \n-    public void testWorkspaceMoveAdminNode()  throws RepositoryException, NotExecutableException {\n+    /**\n+     * Reconfiguration of the user-root-path will result in node collision\n+     * upon initialization of the built-in repository users. Test if the\n+     * UserManagerImpl in this case removes the colliding admin-user node.\n+     */\n+    public void testChangeUserRootPath() throws RepositoryException, NotExecutableException {\n         Authorizable admin = userMgr.getAuthorizable(adminId);\n \n         if (admin == null || !(admin instanceof AuthorizableImpl)) {\n             throw new NotExecutableException();\n         }\n \n         // access the node corresponding to the admin user and remove it\n+        NodeImpl adminNode = ((AuthorizableImpl) admin).getNode();\n+\n+        Session s = adminNode.getSession();\n+        adminNode.remove();\n+        // use session obtained from the node as usermgr may point to a dedicated\n+        // system workspace different from the superusers workspace.\n+        s.save();\n+\n+        Session s2 = null;\n+        String collidingPath = null;\n         try {\n-            NodeImpl adminNode = ((AuthorizableImpl) admin).getNode();\n-            Session s = adminNode.getSession();\n-            s.getWorkspace().move(adminNode.getPath(), \"/somewhereelse\");\n-            fail();\n-        } catch (RepositoryException e) {\n-            // success\n+            // create a colliding user node outside of the user tree\n+            Properties props = new Properties();\n+            props.setProperty(\"usersPath\", \"/testPath\");\n+            UserManager um = new UserManagerImpl((SessionImpl) s, adminId, props);\n+            User collidingUser = um.createUser(adminId, adminId);\n+            collidingPath = ((AuthorizableImpl) collidingUser).getNode().getPath();\n+            s.save();\n+\n+            // force recreation of admin user.\n+            s2 = getHelper().getSuperuserSession();\n+\n+            admin = userMgr.getAuthorizable(adminId);\n+            assertNotNull(admin);\n+            // the colliding node must have been removed.\n+            assertFalse(s2.nodeExists(collidingPath));\n+\n+        } finally {\n+            if (s2 != null) {\n+                s2.logout();\n+            }\n+            if (collidingPath != null && s.nodeExists(collidingPath)) {\n+                s.getNode(collidingPath).remove();\n+                s.save();\n+            }\n         }\n     }\n }",
                "additions": 149,
                "raw_url": "https://github.com/apache/jackrabbit/raw/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/AdministratorTest.java",
                "status": "modified",
                "changes": 213,
                "deletions": 64,
                "sha": "b26ac51731a8c899504728007d49b76051e5ec0f",
                "blob_url": "https://github.com/apache/jackrabbit/blob/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/AdministratorTest.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/AdministratorTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/AdministratorTest.java?ref=d64e3367c4bbb01e893b172bd735c1459d4c5f08"
            }
        ],
        "bug_id": "jackrabbit_91",
        "parent": "https://github.com/apache/jackrabbit/commit/e134f4233aba42748cd6b35f56eadcf9cc6c4eb5",
        "message": "JCR-3702 : NPE if user w/o read permission on admin user node removes any node\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1546953 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/7d653b12127c3da2f5c1804551bd76c6797fd21d",
        "file": [
            {
                "patch": "@@ -348,7 +348,7 @@ public Object visit(RelationQueryNode node, Object data) throws RepositoryExcept\n             PathQueryNode relPath = node.getRelativePath();\n             if (relPath == null) {\n                 propPath.append(\".\");\n-            } else if (relPath.getNumOperands() > 0 && relPath.getPathSteps()[0].getNameTest().equals(XPathQueryBuilder.FN_POSITION_FULL)) {\n+            } else if (relPath.getNumOperands() > 0 && XPathQueryBuilder.FN_POSITION_FULL.equals(relPath.getPathSteps()[0].getNameTest())) {\n                 propPath.append(resolver.getJCRName(XPathQueryBuilder.FN_POSITION_FULL));\n             } else {\n                 LocationStepQueryNode[] steps = relPath.getPathSteps();",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/7d653b12127c3da2f5c1804551bd76c6797fd21d/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/QueryFormat.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "d345adcaaaeb7c9dde3ff7b12e145c4c540a5b98",
                "blob_url": "https://github.com/apache/jackrabbit/blob/7d653b12127c3da2f5c1804551bd76c6797fd21d/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/QueryFormat.java",
                "filename": "jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/QueryFormat.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/QueryFormat.java?ref=7d653b12127c3da2f5c1804551bd76c6797fd21d"
            },
            {
                "patch": "@@ -425,8 +425,13 @@ public Object visit(SimpleNode node, Object data) {\n                         }\n                         PathQueryNode relPath = tmp.getRelativePath();\n                         LocationStepQueryNode[] steps = relPath.getPathSteps();\n-                        \n-                        tmpRelPath.addLast(steps[steps.length-1].getNameTest());\n+\n+                        Name nameTest = steps[steps.length-1].getNameTest();\n+                        if (nameTest==null) {\n+                        \t// see LocationStepQueryNode javadoc on when getNameTest()==null: when it was a star (asterisk)\n+                        \tnameTest = RelationQueryNode.STAR_NAME_TEST;\n+                        }\n+\t\t\t\t\t\ttmpRelPath.addLast(nameTest);\n                     }\n                 }\n                 break;\n@@ -956,7 +961,7 @@ private QueryNode createFunction(SimpleNode node, QueryNode queryNode) {\n                     }\n                     if (queryNode.getType() == QueryNode.TYPE_PATH) {\n                         PathQueryNode pathNode = (PathQueryNode) queryNode;\n-                        \n+\n                         pathNode.addPathStep(createDerefQueryNode(node, descendant, pathNode));\n                     } else if (queryNode.getType() == QueryNode.TYPE_RELATION) {\n                         RelationQueryNode relNode = (RelationQueryNode) queryNode;",
                "additions": 8,
                "raw_url": "https://github.com/apache/jackrabbit/raw/7d653b12127c3da2f5c1804551bd76c6797fd21d/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/XPathQueryBuilder.java",
                "status": "modified",
                "changes": 11,
                "deletions": 3,
                "sha": "2fa556437e041137d664dcbd958f04983d390450",
                "blob_url": "https://github.com/apache/jackrabbit/blob/7d653b12127c3da2f5c1804551bd76c6797fd21d/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/XPathQueryBuilder.java",
                "filename": "jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/XPathQueryBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/XPathQueryBuilder.java?ref=7d653b12127c3da2f5c1804551bd76c6797fd21d"
            },
            {
                "patch": "@@ -67,6 +67,14 @@ public void testStarNameTest() throws Exception {\n         checkStatement(\"//element(*, foo)[foo/*/@bar = 'bla']\");\n     }\n \n+    public void testStarNameAtBeginningOfPredicate() throws Exception {\n+        checkStatement(\"//element(*, foo)[*/*/@bar = 'bla']\");\n+    }\n+\n+    public void testChildStarName() throws Exception {\n+        checkStatement(\"//programs//*[*/@sunday]\");\n+    }\n+\n     public void testRepSimilar() throws Exception {\n         checkStatement(\"//element(*, foo)[rep:similar(foo, '/some/path')]\");\n     }",
                "additions": 8,
                "raw_url": "https://github.com/apache/jackrabbit/raw/7d653b12127c3da2f5c1804551bd76c6797fd21d/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/query/xpath/QueryFormatTest.java",
                "status": "modified",
                "changes": 8,
                "deletions": 0,
                "sha": "a07e8e255ab27c025c1e011d651663d55d8ab3a1",
                "blob_url": "https://github.com/apache/jackrabbit/blob/7d653b12127c3da2f5c1804551bd76c6797fd21d/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/query/xpath/QueryFormatTest.java",
                "filename": "jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/query/xpath/QueryFormatTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/query/xpath/QueryFormatTest.java?ref=7d653b12127c3da2f5c1804551bd76c6797fd21d"
            }
        ],
        "bug_id": "jackrabbit_92",
        "parent": "https://github.com/apache/jackrabbit/commit/c403b6eca2b7722a9dc8db2fb237e2fb050f79ac",
        "message": "JCR-3435: Fix NPE for xpath query with child axis and star name\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1393342 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/deff7702b5448de854ed27b64f485d53b13e887c",
        "file": [
            {
                "patch": "@@ -699,6 +699,13 @@ protected InternalVersion internalCheckin(\n     protected String calculateCheckinVersionName(InternalVersionHistoryImpl history,\n                                                  NodeStateEx node, boolean simple)\n             throws RepositoryException {\n+\n+        if (history == null) {\n+            String message = \"Node \" + node.getNodeId() + \" has no version history\";\n+            log.error(message);\n+            throw new VersionException(message);\n+        }\n+\n         InternalVersion best = null;\n         if (simple) {\n             // 1. in simple versioning just take the 'head' version\n@@ -721,12 +728,24 @@ protected String calculateCheckinVersionName(InternalVersionHistoryImpl history,\n \n             for (InternalValue value: values) {\n                 InternalVersion pred = history.getVersion(value.getNodeId());\n+                if (pred == null) {\n+                    String message = \"Could not instantiate InternalVersion for nodeId \" + value.getNodeId() + \" (VHR + \" + history.getId() + \", node \" + node.getNodeId() + \")\";\n+                    log.error(message);\n+                    throw new VersionException(message);\n+                }\n                 if (best == null\n                         || pred.getName().getLocalName().length() < best.getName().getLocalName().length()) {\n                     best = pred;\n                 }\n             }\n         }\n+\n+        if (best == null) {\n+            String message = \"Could not find 'best' predecessor node for \" + node.getNodeId();\n+            log.error(message);\n+            throw new VersionException(message);\n+        }\n+\n         // 2. generate version name (assume no namespaces in version names)\n         String versionName = best.getName().getLocalName();\n         int pos = versionName.lastIndexOf('.');",
                "additions": 19,
                "raw_url": "https://github.com/apache/jackrabbit/raw/deff7702b5448de854ed27b64f485d53b13e887c/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerBase.java",
                "status": "modified",
                "changes": 19,
                "deletions": 0,
                "sha": "f86a9a112da719136f97a2f3c61c7e05733294cf",
                "blob_url": "https://github.com/apache/jackrabbit/blob/deff7702b5448de854ed27b64f485d53b13e887c/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerBase.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerBase.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerBase.java?ref=deff7702b5448de854ed27b64f485d53b13e887c"
            }
        ],
        "bug_id": "jackrabbit_93",
        "parent": "https://github.com/apache/jackrabbit/commit/e71c0544e5a2945a29215736735897ab697dcaaa",
        "message": "JCR-3393: InternalVersionManagerBase.calculateCheckinVersionName may fail with NPE on broken versioning persistence\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1362924 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/16255dbad5a6b592dc0d348ac4514a07f16786b9",
        "file": [
            {
                "patch": "@@ -683,7 +683,8 @@ public void updateCommitted(Update update, String path) {\n \n                 log.debug(\"Stored record '{}' to Journal ({})\", recordRevision, journalUpdateSize);\n \n-                long updateSize = (Long)update.getAttribute(ATTRIBUTE_UPDATE_SIZE);\n+                Object updateSizeValue = update.getAttribute(ATTRIBUTE_UPDATE_SIZE);\n+                long updateSize = updateSizeValue != null? (Long)updateSizeValue : 0;\n                 updateCount.compareAndSet(Integer.MAX_VALUE, 0);\n \n                 auditLogger.info(\"[{}] {} {} ({})\", new Object[]{updateCount.incrementAndGet(), ",
                "additions": 2,
                "raw_url": "https://github.com/apache/jackrabbit/raw/16255dbad5a6b592dc0d348ac4514a07f16786b9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cluster/ClusterNode.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "688d2324c22a7634cdc065204b0555f2cd37f71b",
                "blob_url": "https://github.com/apache/jackrabbit/blob/16255dbad5a6b592dc0d348ac4514a07f16786b9/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cluster/ClusterNode.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cluster/ClusterNode.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cluster/ClusterNode.java?ref=16255dbad5a6b592dc0d348ac4514a07f16786b9"
            }
        ],
        "bug_id": "jackrabbit_94",
        "parent": "https://github.com/apache/jackrabbit/commit/5336f6a70a38ba924875a5af216e3c050875c9e3",
        "message": "JCR-3343 ClusterNode's updateCommited method throws NPE - patch contributed by Mete Atamel\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1350542 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/b56e112b239165ae3daa649994213e07ddb28cc2",
        "file": [
            {
                "patch": "@@ -16,6 +16,7 @@\n  */\n package org.apache.jackrabbit.spi2davex;\n \n+import org.apache.commons.httpclient.Header;\n import org.apache.commons.httpclient.HttpClient;\n import org.apache.commons.httpclient.methods.GetMethod;\n import org.apache.commons.httpclient.methods.HeadMethod;\n@@ -74,7 +75,10 @@ void loadBinary(String uri, int index, Target target) throws RepositoryException\n             if (statusCode == DavServletResponse.SC_OK) {\n                 Map<String, String> headers = new HashMap<String, String>();\n                 for (String name : headerNames) {\n-                    headers.put(name, method.getResponseHeader(name).getValue());\n+                    Header hdr = method.getResponseHeader(name);\n+                    if (hdr != null) {\n+                        headers.put(name, hdr.getValue());\n+                    }\n                 }\n                 return headers;\n             } else {",
                "additions": 5,
                "raw_url": "https://github.com/apache/jackrabbit/raw/b56e112b239165ae3daa649994213e07ddb28cc2/jackrabbit-spi2dav/src/main/java/org/apache/jackrabbit/spi2davex/ValueLoader.java",
                "status": "modified",
                "changes": 6,
                "deletions": 1,
                "sha": "07aec167b4db6cf6540803c837b4cbefa58cc1af",
                "blob_url": "https://github.com/apache/jackrabbit/blob/b56e112b239165ae3daa649994213e07ddb28cc2/jackrabbit-spi2dav/src/main/java/org/apache/jackrabbit/spi2davex/ValueLoader.java",
                "filename": "jackrabbit-spi2dav/src/main/java/org/apache/jackrabbit/spi2davex/ValueLoader.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-spi2dav/src/main/java/org/apache/jackrabbit/spi2davex/ValueLoader.java?ref=b56e112b239165ae3daa649994213e07ddb28cc2"
            }
        ],
        "bug_id": "jackrabbit_95",
        "parent": "https://github.com/apache/jackrabbit/commit/d83d11ac68b413db7ce3f97ff166399f35d26b57",
        "message": "JCR-3210 NPE in spi2dav when server does not send all headers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1232100 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/3f55d09a77b3e332efcc1507dbc319d4712c7fdb",
        "file": [
            {
                "patch": "@@ -806,7 +806,10 @@ public boolean itemExists(String absPath) throws RepositoryException {\n      * {@inheritDoc}\n      */\n     public void save() throws RepositoryException {\n-        perform(new SessionSaveOperation());\n+        // JCR-3131: no need to perform save op when there's nothing to save...\n+        if (context.getItemStateManager().hasAnyTransientItemStates()) {\n+            perform(new SessionSaveOperation());\n+        }\n     }\n \n     /**",
                "additions": 4,
                "raw_url": "https://github.com/apache/jackrabbit/raw/3f55d09a77b3e332efcc1507dbc319d4712c7fdb/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SessionImpl.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "c689c25b9bd0acc3d52c4dbe8f2ee8ef52bd378c",
                "blob_url": "https://github.com/apache/jackrabbit/blob/3f55d09a77b3e332efcc1507dbc319d4712c7fdb/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SessionImpl.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SessionImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SessionImpl.java?ref=3f55d09a77b3e332efcc1507dbc319d4712c7fdb"
            },
            {
                "patch": "@@ -504,4 +504,30 @@ public void testRemoveNodeWithInvisibleNonRemovableChild() throws Exception {\n             // success\n         }\n     }\n+    \n+    // https://issues.apache.org/jira/browse/JCR-3131\n+    public void testEmptySaveNoRootAccess() throws RepositoryException, NotExecutableException {\n+\n+        Session s = getTestSession();\n+        s.save();\n+\n+        Privilege[] read = privilegesFromName(Privilege.JCR_READ);\n+\n+        try {\n+            JackrabbitAccessControlList tmpl = getPolicy(acMgr, \"/\", testUser.getPrincipal());\n+            tmpl.addEntry(testUser.getPrincipal(), read, false, getRestrictions(superuser, path));\n+            acMgr.setPolicy(tmpl.getPath(), tmpl);\n+            superuser.save();\n+\n+            // empty save operation\n+            s.save();\n+        }\n+        finally {\n+            // undo revocation of read privilege\n+            JackrabbitAccessControlList tmpl = getPolicy(acMgr, \"/\", testUser.getPrincipal());\n+            tmpl.addEntry(testUser.getPrincipal(), read, true, getRestrictions(superuser, path));\n+            acMgr.setPolicy(tmpl.getPath(), tmpl);\n+            superuser.save();\n+        }\n+    }\n }\n\\ No newline at end of file",
                "additions": 26,
                "raw_url": "https://github.com/apache/jackrabbit/raw/3f55d09a77b3e332efcc1507dbc319d4712c7fdb/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/acl/WriteTest.java",
                "status": "modified",
                "changes": 26,
                "deletions": 0,
                "sha": "a6ae45e73c94a63b47777b987a5c8da7d1cfa0fb",
                "blob_url": "https://github.com/apache/jackrabbit/blob/3f55d09a77b3e332efcc1507dbc319d4712c7fdb/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/acl/WriteTest.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/acl/WriteTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/acl/WriteTest.java?ref=3f55d09a77b3e332efcc1507dbc319d4712c7fdb"
            }
        ],
        "bug_id": "jackrabbit_96",
        "parent": "https://github.com/apache/jackrabbit/commit/4fa3d5f41bd428876ad4fe5a44d340c94973b942",
        "message": "JCR-3131: NPE in ItemManager when calling Session.save() with nothing to save\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1196062 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/8574ab4ad17ac03976059c96168778aad607525b",
        "file": [
            {
                "patch": "@@ -681,6 +681,13 @@ protected String calculateCheckinVersionName(InternalVersionHistoryImpl history,\n         } else {\n             // 1. search a predecessor, suitable for generating the new name\n             InternalValue[] values = node.getPropertyValues(NameConstants.JCR_PREDECESSORS);\n+\n+            if (values == null) {\n+                String message = \"Mandatory jcr:predecessors property missing on node \" + node.getNodeId();\n+                log.error(message);\n+                throw new VersionException(message);\n+            }\n+\n             for (InternalValue value: values) {\n                 InternalVersion pred = history.getVersion(value.getNodeId());\n                 if (best == null",
                "additions": 7,
                "raw_url": "https://github.com/apache/jackrabbit/raw/8574ab4ad17ac03976059c96168778aad607525b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerBase.java",
                "status": "modified",
                "changes": 7,
                "deletions": 0,
                "sha": "daa1bed34e3e4aa32f641bf55ecd8f3e6ca21275",
                "blob_url": "https://github.com/apache/jackrabbit/blob/8574ab4ad17ac03976059c96168778aad607525b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerBase.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerBase.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerBase.java?ref=8574ab4ad17ac03976059c96168778aad607525b"
            }
        ],
        "bug_id": "jackrabbit_97",
        "parent": "https://github.com/apache/jackrabbit/commit/77146bf98c5b26bf28c95b8b21a32eff4aaf3b68",
        "message": "JCR-3085: better diagnostics when version storage is broken (produce a RepositoryException instead of a NPE, including the nodeId)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1177249 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/500c1ec6a054276151cf63520d9f919d6176ad8c",
        "file": [
            {
                "patch": "@@ -89,7 +89,7 @@ public HierarchyEntry lookup(ItemId workspaceItemId) {\n             if (path == null) {\n                 return nEntry;\n             } else {\n-                return nEntry.lookupDeepEntry(path);\n+                return nEntry != null ? nEntry.lookupDeepEntry(path) : null;\n             }\n         }\n     }",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/500c1ec6a054276151cf63520d9f919d6176ad8c/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/hierarchy/HierarchyManagerImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "10ced1c3d04e26bfe038f899a4689998431f5aa4",
                "blob_url": "https://github.com/apache/jackrabbit/blob/500c1ec6a054276151cf63520d9f919d6176ad8c/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/hierarchy/HierarchyManagerImpl.java",
                "filename": "jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/hierarchy/HierarchyManagerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/hierarchy/HierarchyManagerImpl.java?ref=500c1ec6a054276151cf63520d9f919d6176ad8c"
            }
        ],
        "bug_id": "jackrabbit_98",
        "parent": "https://github.com/apache/jackrabbit/commit/8c4d3df8d2346ad2b8912779c7351be431cf2ee2",
        "message": "JCR-2981 - Bundle of events may be dropped due to NPE (applying patch provided by timothee maret)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1136360 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/0e650aa902229e39b003c722f5674d4c6a89d8d0",
        "file": [
            {
                "patch": "@@ -1,282 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.jackrabbit.core.cache;\n-\n-import java.util.concurrent.ConcurrentHashMap;\n-\n-import org.apache.commons.collections.map.LinkedMap;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * An <code>ItemStateCache</code> implementation that internally uses a\n- * {@link LinkedMap} to maintain a cache of <code>ItemState</code> objects. The\n- * cache uses a rough estimate of the memory consumption of the cached item\n- * states for calculating the maximum number of entries. The oldest entries\n- * are flushed once the cache size has exceeded a certain limit.\n- * <p/>\n- * TODO rename class to something more appropriate, e.g. FIFOItemSateCache since\n- * it doesn't use a LRU eviction policy anymore.\n- */\n-public class LRUCache<Key, Value> implements Cache {\n-\n-    /** Logger instance */\n-    private static Logger log = LoggerFactory.getLogger(LRUCache.class);\n-\n-    /**\n-     * Map of cache entries.\n-     */\n-    private final ConcurrentHashMap<Key, Entry<Key, Value>> entries =\n-        new ConcurrentHashMap<Key, Entry<Key, Value>>();\n-\n-    /**\n-     * Most recently used entry, or <code>null</code> if the cache is empty.\n-     */\n-    private Entry<Key, Value> first = null;\n-\n-    /**\n-     * Least recently used entry, or <code>null</code> if the cache is empty.\n-     */\n-    private Entry<Key, Value> last = null;\n-\n-    /**\n-     * Current size of the cache; sum of the sizes of all the cached entries.\n-     */\n-    private long currentSize = 0;\n-\n-    /**\n-     * Maximum size of the cache\n-     */\n-    private long maximumSize;\n-\n-    /**\n-     * Cache access listener\n-     */\n-    private CacheAccessListener listener = null;\n-\n-    /**\n-     * Access count used to fire {@link CacheAccessListener#cacheAccessed()}\n-     * calls once every {@link CacheAccessListener#ACCESS_INTERVAL} hits.\n-     */\n-    private int accessCount;\n-\n-    /**\n-     * Constructs a new, empty <code>ItemStateCache</code> with the specified\n-     * maximum memory.\n-     *\n-     * @param maximumSize maximum size of the cache\n-     */\n-    public LRUCache(long maximumSize) {\n-        this.maximumSize = maximumSize;\n-    }\n-\n-    public boolean containsKey(Key key) {\n-        return entries.containsKey(key);\n-    }\n-\n-    public Value get(Key key) {\n-        Entry<Key, Value> entry = entries.get(key);\n-        if (entry != null) {\n-            boolean notifyAccessListener;\n-            synchronized (this) {\n-                // Check if we should notify the access listener\n-                notifyAccessListener =\n-                    (++accessCount % CacheAccessListener.ACCESS_INTERVAL) == 0;\n-\n-                // Move this entry to the beginning of the LRU linked list\n-                if (entry.prev != null) {\n-                    entry.prev.next = entry.next;\n-                    if (entry.next != null) {\n-                        entry.next.prev = entry.prev;\n-                    } else if (entry.prev != null) {\n-                        last = entry.prev;\n-                        entry.prev = null;\n-                    }\n-                    first.prev = entry;\n-                    entry.next = first;\n-                    first = entry;\n-                }\n-            }\n-\n-            // Notify the access listener outside the synchronized block\n-            if (notifyAccessListener && listener != null) {\n-                listener.cacheAccessed();\n-            }\n-\n-            return entry.value;\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public synchronized Value[] values() {\n-        Object[] values = new Object[entries.size()];\n-        Entry<Key, Value> entry = first;\n-        for (int i = 0; i < values.length && entry != null; i++) {\n-            values[i] = entry.value;\n-            entry = entry.next;\n-        }\n-        return (Value[]) values;\n-    }\n-\n-    public synchronized void put(Key key, Value value, long size) {\n-        Entry<Key, Value> entry = new Entry<Key, Value>(key, value, size);\n-        if (first != null) {\n-            first.prev = entry;\n-        }\n-        entry.next = first;\n-        first = entry;\n-        if (last == null) {\n-            last = entry;\n-        }\n-\n-        currentSize += size;\n-\n-        Entry<Key, Value> previous = entries.put(key, entry);\n-        if (previous != null) {\n-            log.warn(\"Overwriting cached entry {}\", key);\n-            currentSize -= previous.size;\n-        }\n-\n-        shrinkIfNeeded();\n-    }\n-\n-    public synchronized Value remove(Key key) {\n-        Entry<Key, Value> entry = entries.remove(key);\n-        if (entry != null) {\n-            if (entry.prev != null) {\n-                entry.prev.next = entry.next;\n-            } else {\n-                first = entry.next;\n-            }\n-            if (entry.next != null) {\n-                entry.next.prev = entry.prev;\n-            } else {\n-                last = entry.prev;\n-            }\n-\n-            currentSize -= entry.size;\n-\n-            return entry.value;\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    public synchronized void clear() {\n-        entries.clear();\n-        first = null;\n-        last = null;\n-        currentSize = 0;\n-    }\n-\n-    public boolean isEmpty() {\n-        return entries.isEmpty();\n-    }\n-\n-    public synchronized long getAccessCount() {\n-        return accessCount;\n-    }\n-\n-    public synchronized void resetAccessCount() {\n-        accessCount = 0;\n-    }\n-\n-    public synchronized long getMemoryUsed() {\n-        return currentSize;\n-    }\n-\n-    public synchronized long getMaxMemorySize() {\n-        return maximumSize;\n-    }\n-\n-    public synchronized void setMaxMemorySize(long size) {\n-        this.maximumSize = size;\n-        shrinkIfNeeded();\n-    }\n-\n-    private void shrinkIfNeeded() {\n-        while (currentSize > maximumSize && last != null) {\n-            entries.remove(last.key);\n-            currentSize -= last.size;\n-            if (last.prev != null) {\n-                last.prev.next = null;\n-                last = last.prev;\n-            } else {\n-                first = null;\n-                last = null;\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Set the cache access listener. Only one listener per cache is supported.\n-     *\n-     * @param listener the new listener\n-     */\n-    public synchronized void setAccessListener(CacheAccessListener listener) {\n-        this.listener = listener;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    public synchronized void dispose() {\n-        if (listener != null) {\n-            listener.disposeCache(this);\n-        }\n-    }\n-\n-    public String toString() {\n-        StringBuilder builder = new StringBuilder();\n-        builder.append(\"{ \");\n-        Entry<Key, Value> entry = first;\n-        while (entry != null) {\n-            builder.append(entry.key);\n-            builder.append(\" => \");\n-            builder.append(entry.value);\n-            builder.append(\" \");\n-        }\n-        builder.append(\"}\");\n-        return builder.toString();\n-    }\n-\n-    /**\n-     * Internal cache entry.\n-     */\n-    private static class Entry<Key, Value> {\n-\n-        final Key key;\n-\n-        final Value value;\n-\n-        final long size;\n-\n-        Entry<Key, Value> prev = null;\n-\n-        Entry<Key, Value> next = null;\n-\n-        public Entry(Key key, Value value, long size) {\n-            this.key = key;\n-            this.value = value;\n-            this.size = size;\n-        }\n-\n-    }\n-\n-}",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/44a1d182d1be2dbdd1f6920ed1676dba0327a71c/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cache/LRUCache.java",
                "status": "removed",
                "changes": 282,
                "deletions": 282,
                "sha": "a02fe447f705cecbb7ecbb6e382df0a433894a46",
                "blob_url": "https://github.com/apache/jackrabbit/blob/44a1d182d1be2dbdd1f6920ed1676dba0327a71c/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cache/LRUCache.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cache/LRUCache.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cache/LRUCache.java?ref=44a1d182d1be2dbdd1f6920ed1676dba0327a71c"
            },
            {
                "patch": "@@ -18,7 +18,6 @@\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.apache.jackrabbit.core.cache.LRUCache;\n import org.apache.jackrabbit.core.fs.FileSystemResource;\n import org.apache.jackrabbit.core.fs.FileSystem;\n import org.apache.jackrabbit.core.state.ItemState;\n@@ -38,6 +37,7 @@\n import org.apache.jackrabbit.core.persistence.PersistenceManager;\n import org.apache.jackrabbit.core.util.StringIndex;\n import org.apache.jackrabbit.core.persistence.util.BLOBStore;\n+import org.apache.jackrabbit.core.persistence.util.BundleCache;\n import org.apache.jackrabbit.core.persistence.util.FileBasedIndex;\n import org.apache.jackrabbit.core.persistence.util.LRUNodeIdCache;\n import org.apache.jackrabbit.core.persistence.util.NodePropBundle;\n@@ -68,7 +68,7 @@\n  * included in the bundle but generated when required.\n  * <p/>\n  * In order to increase performance, there are 2 caches maintained. One is the\n- * bundle cache that caches already loaded bundles. The other is the\n+ * {@link BundleCache} that caches already loaded bundles. The other is the\n  * {@link LRUNodeIdCache} that caches non-existent bundles. This is useful\n  * because a lot of {@link #exists(NodeId)} calls are issued that would result\n  * in a useless SQL execution if the desired bundle does not exist.\n@@ -103,7 +103,7 @@\n     private StringIndex nameIndex;\n \n     /** the cache of loaded bundles */\n-    private LRUCache<NodeId, NodePropBundle> bundles;\n+    private BundleCache bundles;\n \n     /** the cache of non-existent bundles */\n     private LRUNodeIdCache missing;\n@@ -387,7 +387,7 @@ protected abstract void store(NodeReferences refs)\n     public void init(PMContext context) throws Exception {\n         this.context = context;\n         // init bundle cache\n-        bundles = new LRUCache<NodeId, NodePropBundle>(bundleCacheSize);\n+        bundles = new BundleCache(bundleCacheSize);\n         missing = new LRUNodeIdCache();\n     }\n     \n@@ -656,7 +656,7 @@ private NodePropBundle getBundle(NodeId id) throws ItemStateException {\n                 bundle = loadBundle(id);\n                 if (bundle != null) {\n                     bundle.markOld();\n-                    bundles.put(id, bundle, bundle.getSize());\n+                    bundles.put(bundle);\n                 } else {\n                     missing.put(id);\n                 }\n@@ -692,9 +692,8 @@ private void putBundle(NodePropBundle bundle) throws ItemStateException {\n         missing.remove(bundle.getId());\n         // only put to cache if already exists. this is to ensure proper overwrite\n         // and not creating big contention during bulk loads\n-        if (bundles.containsKey(bundle.getId())) {\n-            bundles.remove(bundle.getId());\n-            bundles.put(bundle.getId(), bundle, bundle.getSize());\n+        if (bundles.contains(bundle.getId())) {\n+            bundles.put(bundle);\n         }\n     }\n ",
                "additions": 7,
                "raw_url": "https://github.com/apache/jackrabbit/raw/0e650aa902229e39b003c722f5674d4c6a89d8d0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
                "status": "modified",
                "changes": 15,
                "deletions": 8,
                "sha": "48ca35c3c84107e95dd25b1da8b552a3560b1d33",
                "blob_url": "https://github.com/apache/jackrabbit/blob/0e650aa902229e39b003c722f5674d4c6a89d8d0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java?ref=0e650aa902229e39b003c722f5674d4c6a89d8d0"
            },
            {
                "patch": "@@ -24,7 +24,6 @@\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.apache.jackrabbit.core.cache.LRUCache;\n import org.apache.jackrabbit.core.fs.FileSystemResource;\n import org.apache.jackrabbit.core.fs.FileSystem;\n import org.apache.jackrabbit.core.id.ItemId;\n@@ -35,6 +34,7 @@\n import org.apache.jackrabbit.core.persistence.PMContext;\n import org.apache.jackrabbit.core.persistence.PersistenceManager;\n import org.apache.jackrabbit.core.persistence.util.BLOBStore;\n+import org.apache.jackrabbit.core.persistence.util.BundleCache;\n import org.apache.jackrabbit.core.persistence.util.FileBasedIndex;\n import org.apache.jackrabbit.core.persistence.util.LRUNodeIdCache;\n import org.apache.jackrabbit.core.persistence.util.NodePropBundle;\n@@ -68,7 +68,7 @@\n  * included in the bundle but generated when required.\n  * <p/>\n  * In order to increase performance, there are 2 caches maintained. One is the\n- * bundle cache that caches already loaded bundles. The other is the\n+ * {@link BundleCache} that caches already loaded bundles. The other is the\n  * {@link LRUNodeIdCache} that caches non-existent bundles. This is useful\n  * because a lot of {@link #exists(NodeId)} calls are issued that would result\n  * in a useless SQL execution if the desired bundle does not exist.\n@@ -103,7 +103,7 @@\n     private StringIndex nameIndex;\n \n     /** the cache of loaded bundles */\n-    private LRUCache<NodeId, NodePropBundle> bundles;\n+    private BundleCache bundles;\n \n     /** the cache of non-existent bundles */\n     private LRUNodeIdCache missing;\n@@ -387,7 +387,7 @@ protected abstract void store(NodeReferences refs)\n     public void init(PMContext context) throws Exception {\n         this.context = context;\n         // init bundle cache\n-        bundles = new LRUCache<NodeId, NodePropBundle>(bundleCacheSize);\n+        bundles = new BundleCache(bundleCacheSize);\n         missing = new LRUNodeIdCache();\n     }\n \n@@ -654,7 +654,7 @@ private NodePropBundle getBundle(NodeId id) throws ItemStateException {\n                 bundle = loadBundle(id);\n                 if (bundle != null) {\n                     bundle.markOld();\n-                    bundles.put(id, bundle, bundle.getSize());\n+                    bundles.put(bundle);\n                 } else {\n                     missing.put(id);\n                 }\n@@ -690,9 +690,8 @@ private void putBundle(NodePropBundle bundle) throws ItemStateException {\n         missing.remove(bundle.getId());\n         // only put to cache if already exists. this is to ensure proper overwrite\n         // and not creating big contention during bulk loads\n-        if (bundles.containsKey(bundle.getId())) {\n-            bundles.remove(bundle.getId());\n-            bundles.put(bundle.getId(), bundle, bundle.getSize());\n+        if (bundles.contains(bundle.getId())) {\n+            bundles.put(bundle);\n         }\n     }\n ",
                "additions": 7,
                "raw_url": "https://github.com/apache/jackrabbit/raw/0e650aa902229e39b003c722f5674d4c6a89d8d0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/pool/AbstractBundlePersistenceManager.java",
                "status": "modified",
                "changes": 15,
                "deletions": 8,
                "sha": "8c224f4ff47cb4bad10797ee08da42956c75b273",
                "blob_url": "https://github.com/apache/jackrabbit/blob/0e650aa902229e39b003c722f5674d4c6a89d8d0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/pool/AbstractBundlePersistenceManager.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/pool/AbstractBundlePersistenceManager.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/pool/AbstractBundlePersistenceManager.java?ref=0e650aa902229e39b003c722f5674d4c6a89d8d0"
            },
            {
                "patch": "@@ -0,0 +1,196 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.core.persistence.util;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.jackrabbit.core.id.NodeId;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.Logger;\n+\n+/**\n+ * This Class implements a simple cache for nodeprop bundles\n+ */\n+public class BundleCache {\n+\n+    /**\n+     * the default logger\n+     */\n+    private static Logger log = LoggerFactory.getLogger(BundleCache.class);\n+\n+    /**\n+     * the current memory usage of this cache\n+     */\n+    private long curSize;\n+\n+    /**\n+     * the maximum chache size\n+     */\n+    private long maxSize;\n+\n+    /**\n+     * the number of cache hits\n+     */\n+    private long hits;\n+\n+    /**\n+     * the number of cache misses\n+     */\n+    private long misses;\n+\n+    /**\n+     * a map of the cache entries\n+     */\n+    private final LinkedHashMap<NodeId, NodePropBundle> bundles;\n+\n+    /**\n+     * Creates a new BundleCache\n+     *\n+     * @param maxSize the maximum size of this cache in bytes.\n+     */\n+    @SuppressWarnings(\"serial\")\n+    public BundleCache(long maxSize) {\n+        this.maxSize = maxSize;\n+        this.bundles = new LinkedHashMap<NodeId, NodePropBundle>(\n+                (int) maxSize / 1024, 0.75f, true /* access-ordered */) {\n+            @Override\n+            protected boolean removeEldestEntry(\n+                    Map.Entry<NodeId, NodePropBundle> e) {\n+                long maxSize = BundleCache.this.maxSize;\n+                if (curSize <= maxSize) {\n+                    return false;\n+                } else if (curSize - e.getValue().getSize() <= maxSize) {\n+                    curSize -= e.getValue().getSize();\n+                    return true;\n+                } else {\n+                    shrink();\n+                    return false;\n+                }\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Returns the maximum cache size in bytes.\n+     *\n+     * @return the maximum cache size in bytes.\n+     */\n+    public long getMaxSize() {\n+        return maxSize;\n+    }\n+\n+    /**\n+     * Sets the maximum cache size in bytes.\n+     *\n+     * @param maxSize the maximum cache size in bytes.\n+     */\n+    public void setMaxSize(long maxSize) {\n+        this.maxSize = maxSize;\n+\n+        if (curSize > maxSize) {\n+            shrink();\n+        }\n+    }\n+\n+    private void shrink() {\n+        List<NodePropBundle> list =\n+            new ArrayList<NodePropBundle>(bundles.values());\n+        for (int i = list.size() - 1; curSize > maxSize && i >= 0; i--) {\n+            NodePropBundle bundle = list.get(i);\n+            curSize -= bundle.getSize();\n+            bundles.remove(bundle.getId());\n+        }\n+    }\n+\n+    /**\n+     * Returns the bundle with the given <code>id</code> or <code>null</code>\n+     * if the bundle is not cached.\n+     *\n+     * @param id the id of the bundle\n+     * @return the cached bundle or <code>null</code>\n+     */\n+    public synchronized NodePropBundle get(NodeId id) {\n+        NodePropBundle bundle = bundles.get(id);\n+        if (bundle != null) {\n+            hits++;\n+        } else {\n+            misses++;\n+        }\n+        if (log.isInfoEnabled() && (hits + misses) % 10000 == 0) {\n+            long c = curSize / 1024;\n+            long m = maxSize / 1024;\n+            long a = bundles.size() > 0 ? curSize / bundles.size() : 0;\n+            log.info(\"num=\" + bundles.size() + \" mem=\" + c + \"k max=\" + m + \"k avg=\" + a\n+                    + \" hits=\" + hits + \" miss=\" + misses);\n+        }\n+        return bundle;\n+    }\n+\n+    /**\n+     * Puts a bundle to the cache.\n+     *\n+     * @param bundle the bunlde to put to the cache\n+     */\n+    public synchronized void put(NodePropBundle bundle) {\n+        NodePropBundle previous = bundles.get(bundle.getId());\n+        if (previous != null) {\n+            curSize -= previous.getSize();\n+        }\n+        bundles.put(bundle.getId(), bundle);\n+        curSize += bundle.getSize();\n+    }\n+\n+    /**\n+     * Checks if the bundle with the given id is cached.\n+     *\n+     * @param id the id of the bundle\n+     * @return <code>true</code> if the bundle is cached;\n+     *         <code>false</code> otherwise.\n+     */\n+    public synchronized boolean contains(NodeId id) {\n+        return bundles.containsKey(id);\n+    }\n+\n+    /**\n+     * Removes a bundle from this cache.\n+     *\n+     * @param id the id of the bunlde to remove.\n+     * @return the previously cached bunlde or <code>null</code> of the bundle\n+     *         was not cached.\n+     */\n+    public synchronized NodePropBundle remove(NodeId id) {\n+        NodePropBundle bundle = bundles.remove(id);\n+        if (bundle != null) {\n+            curSize -= bundle.getSize();\n+        }\n+        return bundle;\n+    }\n+\n+    /**\n+     * Clears this cache and removes all bundles.\n+     */\n+    public synchronized void clear() {\n+        bundles.clear();\n+        curSize = 0;\n+        hits = 0;\n+        misses = 0;\n+    }\n+\n+}",
                "additions": 196,
                "raw_url": "https://github.com/apache/jackrabbit/raw/0e650aa902229e39b003c722f5674d4c6a89d8d0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/util/BundleCache.java",
                "status": "added",
                "changes": 196,
                "deletions": 0,
                "sha": "eef26ab885356573c608013cd928954773738f24",
                "blob_url": "https://github.com/apache/jackrabbit/blob/0e650aa902229e39b003c722f5674d4c6a89d8d0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/util/BundleCache.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/util/BundleCache.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/util/BundleCache.java?ref=0e650aa902229e39b003c722f5674d4c6a89d8d0"
            },
            {
                "patch": "@@ -82,6 +82,14 @@\n      */\n     boolean isEmpty();\n \n+    /**\n+     * Informs the cache that the item was modified and the cache might need to\n+     * recalculate the items caching weight.\n+     *\n+     * @param id the id of the item that was modified.\n+     */\n+    void update(ItemId id);\n+\n     /**\n      * Informs the cache that it is no longer in use.\n      */",
                "additions": 8,
                "raw_url": "https://github.com/apache/jackrabbit/raw/0e650aa902229e39b003c722f5674d4c6a89d8d0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ItemStateCache.java",
                "status": "modified",
                "changes": 8,
                "deletions": 0,
                "sha": "6e2ad3f993d6131b4ad55931f638272071661e1c",
                "blob_url": "https://github.com/apache/jackrabbit/blob/0e650aa902229e39b003c722f5674d4c6a89d8d0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ItemStateCache.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ItemStateCache.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ItemStateCache.java?ref=0e650aa902229e39b003c722f5674d4c6a89d8d0"
            },
            {
                "patch": "@@ -159,6 +159,14 @@ public synchronized void evictAll() {\n         refs.clear();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    public synchronized void update(ItemId id) {\n+        // delegate\n+        cache.update(id);\n+    }\n+\n     /**\n      * {@inheritDoc}\n      */",
                "additions": 8,
                "raw_url": "https://github.com/apache/jackrabbit/raw/0e650aa902229e39b003c722f5674d4c6a89d8d0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ItemStateReferenceCache.java",
                "status": "modified",
                "changes": 8,
                "deletions": 0,
                "sha": "f7e23f70701618e016af839d928f0f60ba88187e",
                "blob_url": "https://github.com/apache/jackrabbit/blob/0e650aa902229e39b003c722f5674d4c6a89d8d0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ItemStateReferenceCache.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ItemStateReferenceCache.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ItemStateReferenceCache.java?ref=0e650aa902229e39b003c722f5674d4c6a89d8d0"
            },
            {
                "patch": "@@ -16,9 +16,14 @@\n  */\n package org.apache.jackrabbit.core.state;\n \n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n import org.apache.commons.collections.map.LinkedMap;\n-import org.apache.jackrabbit.core.cache.CacheManager;\n-import org.apache.jackrabbit.core.cache.LRUCache;\n+import org.apache.jackrabbit.core.cache.Cache;\n+import org.apache.jackrabbit.core.cache.CacheAccessListener;\n import org.apache.jackrabbit.core.id.ItemId;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -33,87 +38,275 @@\n  * TODO rename class to something more appropriate, e.g. FIFOItemSateCache since\n  * it doesn't use a LRU eviction policy anymore.\n  */\n-public class MLRUItemStateCache implements ItemStateCache {\n-\n+public class MLRUItemStateCache implements ItemStateCache, Cache {\n     /** Logger instance */\n     private static Logger log = LoggerFactory.getLogger(MLRUItemStateCache.class);\n \n     /** default maximum memory to use */\n     public static final int DEFAULT_MAX_MEM = 4 * 1024 * 1024;\n \n+    /** the amount of memory the entries use */\n+    private volatile long totalMem;\n+\n+    /** the maximum of memory the cache may use */\n+    private volatile long maxMem;\n+\n     /** the number of writes */\n-    private volatile long numWrites = 0;\n+    private volatile long numWrites;\n+\n+    /** the access count */\n+    private volatile long accessCount;\n \n-    private final LRUCache<ItemId, ItemState> cache =\n-        new LRUCache<ItemId, ItemState>(DEFAULT_MAX_MEM);\n+    /** the cache access listeners */\n+    private CacheAccessListener accessListener;\n \n-    public MLRUItemStateCache(CacheManager cacheMgr) {\n-        cacheMgr.add(cache);\n-        cache.setAccessListener(cacheMgr);\n+    /**\n+     * A cache for <code>ItemState</code> instances\n+     */\n+    private final Map<ItemId, Entry> cache;\n+\n+    /**\n+     * Constructs a new, empty <code>ItemStateCache</code> with a maximum amount\n+     * of memory of {@link #DEFAULT_MAX_MEM}.\n+     */\n+    public MLRUItemStateCache() {\n+        this(DEFAULT_MAX_MEM);\n     }\n \n-    //-------------------------------------------------------< ItemStateCache >\n+    /**\n+     * Constructs a new, empty <code>ItemStateCache</code> with the specified\n+     * maximum memory.\n+     *\n+     * @param maxMem the maximum amount of memory this cache may use.\n+     */\n+    @SuppressWarnings(\"serial\")\n+    private MLRUItemStateCache(int maxMem) {\n+        this.maxMem = maxMem;\n+        this.cache = new LinkedHashMap<ItemId, MLRUItemStateCache.Entry>(\n+                maxMem / 1024, 0.75f, true /* access-ordered */) {\n+            @Override\n+            protected boolean removeEldestEntry(Map.Entry<ItemId, Entry> e) {\n+                long maxMem = MLRUItemStateCache.this.maxMem;\n+                if (totalMem <= maxMem) {\n+                    return false;\n+                } else if (totalMem - e.getValue().size <= maxMem) {\n+                    totalMem -= e.getValue().size;\n+                    return true;\n+                } else {\n+                    shrink();\n+                    return false;\n+                }\n+            }\n+        };\n+    }\n \n+    //-------------------------------------------------------< ItemStateCache >\n     /**\n      * {@inheritDoc}\n      */\n     public boolean isCached(ItemId id) {\n-        return cache.containsKey(id);\n+        synchronized (cache) {\n+            return cache.containsKey(id);\n+        }\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     public ItemState retrieve(ItemId id) {\n-        return cache.get(id);\n+        touch();\n+        synchronized (cache) {\n+            Entry entry = cache.get(id);\n+            if (entry != null) {\n+                return entry.state;\n+            } else {\n+                return null;\n+            }\n+        }\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     public ItemState[] retrieveAll() {\n-        return cache.values();\n+        synchronized (cache) {\n+            ItemState[] states = new ItemState[cache.size()];\n+            int i = 0;\n+            for (Entry entry : cache.values()) {\n+                states[i++] = entry.state;\n+            }\n+            return states;\n+        }\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n-    public synchronized void cache(ItemState state) {\n-        cache.put(state.getId(), state, state.calculateMemoryFootprint());\n+    public void update(ItemId id) {\n+        touch();\n+        synchronized (cache) {\n+            Entry entry = cache.get(id);\n+            if (entry != null) {\n+                totalMem -= entry.size;\n+                entry.recalc();\n+                totalMem += entry.size;\n+            }\n+        }\n+    }\n \n-        if (numWrites++ % 10000 == 0 && log.isDebugEnabled()) {\n-            log.debug(\"Item state cache size: {}% of {} bytes\",\n-                    cache.getMemoryUsed() * 100 / cache.getMaxMemorySize(),\n-                    cache.getMaxMemorySize());\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public void cache(ItemState state) {\n+        touch();\n+        synchronized (cache) {\n+            ItemId id = state.getId();\n+            if (cache.containsKey(id)) {\n+                log.warn(\"overwriting cached entry \" + id);\n+                evict(id);\n+            }\n+            Entry entry = new Entry(state);\n+            totalMem += entry.size;\n+            cache.put(id, entry);\n+            if (numWrites++ % 10000 == 0 && log.isDebugEnabled()) {\n+                log.debug(this + \" size=\" + cache.size() + \", \" + totalMem + \"/\" + maxMem);\n+            }\n         }\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     public void evict(ItemId id) {\n-        cache.remove(id);\n+        touch();\n+        synchronized (cache) {\n+            Entry entry = cache.remove(id);\n+            if (entry != null) {\n+                totalMem -= entry.size;\n+            }\n+        }\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     public void evictAll() {\n-        cache.clear();\n+        synchronized (cache) {\n+            cache.clear();\n+            totalMem = 0;\n+        }\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     public boolean isEmpty() {\n-        return cache.isEmpty();\n+        synchronized (cache) {\n+            return cache.isEmpty();\n+        }\n+    }\n+\n+    private void touch() {\n+        accessCount++;\n+        if ((accessCount % CacheAccessListener.ACCESS_INTERVAL) == 0) {\n+            if (accessListener != null) {\n+                accessListener.cacheAccessed();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public long getAccessCount() {\n+        return accessCount;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public long getMaxMemorySize() {\n+        return maxMem;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public long getMemoryUsed() {\n+        return totalMem;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public void resetAccessCount() {\n+        synchronized (cache) {\n+            accessCount = 0;\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public void setMaxMemorySize(long size) {\n+        synchronized (cache) {\n+            this.maxMem = size;\n+\n+            // remove items, if too many\n+            if (totalMem > maxMem) {\n+                shrink();\n+            }\n+        }\n+    }\n+\n+    private void shrink() {\n+        List<Map.Entry<ItemId, Entry>> list =\n+            new ArrayList<Map.Entry<ItemId, Entry>>(cache.entrySet());\n+        for (int i = list.size() - 1; totalMem > maxMem && i >= 0; i--) {\n+            Map.Entry<ItemId, Entry> last = list.get(i);\n+            totalMem -= last.getValue().size;\n+            cache.remove(last.getKey());\n+        }\n+    }\n+\n+    /**\n+     * Set the cache access listener. Only one listener per cache is supported.\n+     *\n+     * @param listener the new listener\n+     */\n+    public void setAccessListener(CacheAccessListener listener) {\n+        this.accessListener = listener;\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     public void dispose() {\n-        cache.dispose();\n+        synchronized (cache) {\n+            if (accessListener != null) {\n+                accessListener.disposeCache(this);\n+            }\n+        }\n+    }\n+\n+\n+    /**\n+     * Internal cache entry.\n+     */\n+    private static class Entry {\n+\n+        private final ItemState state;\n+\n+        private long size;\n+\n+        public Entry(ItemState state) {\n+            this.state = state;\n+            this.size = 64 + state.calculateMemoryFootprint();\n+        }\n+\n+        public void recalc() {\n+            size = 64 + state.calculateMemoryFootprint();\n+        }\n     }\n \n }",
                "additions": 217,
                "raw_url": "https://github.com/apache/jackrabbit/raw/0e650aa902229e39b003c722f5674d4c6a89d8d0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/MLRUItemStateCache.java",
                "status": "modified",
                "changes": 241,
                "deletions": 24,
                "sha": "5fdccd585b0a8bae95dc29782678b7ca5acb576c",
                "blob_url": "https://github.com/apache/jackrabbit/blob/0e650aa902229e39b003c722f5674d4c6a89d8d0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/MLRUItemStateCache.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/MLRUItemStateCache.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/MLRUItemStateCache.java?ref=0e650aa902229e39b003c722f5674d4c6a89d8d0"
            },
            {
                "patch": "@@ -41,7 +41,10 @@ public ManagedMLRUItemStateCacheFactory(CacheManager cacheMgr) {\n      * Create a new cache instance and link it to the cache manager.\n      */\n     public ItemStateCache newItemStateCache() {\n-        return new MLRUItemStateCache(cacheMgr);\n+        MLRUItemStateCache cache = new MLRUItemStateCache();\n+        cacheMgr.add(cache);\n+        cache.setAccessListener(cacheMgr);\n+        return cache;\n     }\n \n }",
                "additions": 4,
                "raw_url": "https://github.com/apache/jackrabbit/raw/0e650aa902229e39b003c722f5674d4c6a89d8d0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ManagedMLRUItemStateCacheFactory.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "c9a843c4ecdc6b02ecf7e1d64cc114109233598f",
                "blob_url": "https://github.com/apache/jackrabbit/blob/0e650aa902229e39b003c722f5674d4c6a89d8d0/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ManagedMLRUItemStateCacheFactory.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ManagedMLRUItemStateCacheFactory.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/ManagedMLRUItemStateCacheFactory.java?ref=0e650aa902229e39b003c722f5674d4c6a89d8d0"
            },
            {
                "patch": "@@ -1,76 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.jackrabbit.core.cache;\n-\n-import junit.framework.TestCase;\n-\n-/**\n- * Test cases for the {@link LRUCache} class.\n- */\n-public class LRUCacheTest extends TestCase {\n-\n-    public void testLRUCache() {\n-        LRUCache<String, String> cache = new LRUCache<String, String>(3);\n-\n-        cache.put(\"foo\", \"1\", 1);\n-        assertTrue(cache.containsKey(\"foo\"));\n-        assertEquals(\"1\", cache.get(\"foo\"));\n-        assertEquals(1, cache.getMemoryUsed());\n-\n-        cache.put(\"bar\", \"12\", 2);\n-        assertTrue(cache.containsKey(\"foo\"));\n-        assertEquals(\"1\", cache.get(\"foo\"));\n-        assertTrue(cache.containsKey(\"bar\"));\n-        assertEquals(\"12\", cache.get(\"bar\"));\n-        assertEquals(3, cache.getMemoryUsed());\n-\n-        cache.put(\"baz\", \"123\", 3);\n-        assertFalse(cache.containsKey(\"foo\"));\n-        assertFalse(cache.containsKey(\"bar\"));\n-        assertTrue(cache.containsKey(\"baz\"));\n-        assertEquals(\"123\", cache.get(\"baz\"));\n-        assertEquals(3, cache.getMemoryUsed());\n-\n-        cache.put(\"foo\", \"1\", 1);\n-        assertTrue(cache.containsKey(\"foo\"));\n-        assertFalse(cache.containsKey(\"bar\"));\n-        assertFalse(cache.containsKey(\"baz\"));\n-        assertEquals(\"1\", cache.get(\"foo\"));\n-        assertEquals(1, cache.getMemoryUsed());\n-\n-        cache.put(\"bar\", \"12\", 2);\n-        assertTrue(cache.containsKey(\"foo\"));\n-        assertEquals(\"1\", cache.get(\"foo\"));\n-        assertTrue(cache.containsKey(\"bar\"));\n-        assertEquals(\"12\", cache.get(\"bar\"));\n-        assertEquals(3, cache.getMemoryUsed());\n-\n-        cache.remove(\"foo\");\n-        assertFalse(cache.containsKey(\"foo\"));\n-        assertTrue(cache.containsKey(\"bar\"));\n-        assertEquals(\"12\", cache.get(\"bar\"));\n-        assertEquals(2, cache.getMemoryUsed());\n-\n-        cache.put(\"foo\", \"1\", 1);\n-        assertTrue(cache.containsKey(\"foo\"));\n-        assertEquals(\"1\", cache.get(\"foo\"));\n-        assertTrue(cache.containsKey(\"bar\"));\n-        assertEquals(\"12\", cache.get(\"bar\"));\n-        assertEquals(3, cache.getMemoryUsed());\n-    }\n-\n-}",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/44a1d182d1be2dbdd1f6920ed1676dba0327a71c/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/cache/LRUCacheTest.java",
                "status": "removed",
                "changes": 76,
                "deletions": 76,
                "sha": "180cb9fdd5b22d100390b666e9b77b86f54fa89d",
                "blob_url": "https://github.com/apache/jackrabbit/blob/44a1d182d1be2dbdd1f6920ed1676dba0327a71c/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/cache/LRUCacheTest.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/cache/LRUCacheTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/cache/LRUCacheTest.java?ref=44a1d182d1be2dbdd1f6920ed1676dba0327a71c"
            },
            {
                "patch": "@@ -1,33 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.jackrabbit.core.cache;\n-\n-import junit.framework.TestCase;\n-import junit.framework.Test;\n-import junit.framework.TestSuite;\n-\n-public class TestAll extends TestCase {\n-\n-    public static Test suite() {\n-        TestSuite suite = new TestSuite();\n-\n-        suite.addTestSuite(LRUCacheTest.class);\n-\n-        return suite;\n-    }\n-\n-}",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/44a1d182d1be2dbdd1f6920ed1676dba0327a71c/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/cache/TestAll.java",
                "status": "removed",
                "changes": 33,
                "deletions": 33,
                "sha": "f4126ea88b635834181498950d1ad297890534c2",
                "blob_url": "https://github.com/apache/jackrabbit/blob/44a1d182d1be2dbdd1f6920ed1676dba0327a71c/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/cache/TestAll.java",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/cache/TestAll.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/cache/TestAll.java?ref=44a1d182d1be2dbdd1f6920ed1676dba0327a71c"
            }
        ],
        "bug_id": "jackrabbit_99",
        "parent": "https://github.com/apache/jackrabbit/commit/44a1d182d1be2dbdd1f6920ed1676dba0327a71c",
        "message": "JCR-2699: Improve read/write concurrency\n\nRevert revision 1003542 until I have time to solve the NPE issue.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1003773 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/62f9c0bba50be5258d294c74a55b880282670b6a",
        "file": [
            {
                "patch": "@@ -110,466 +110,435 @@ private QOMFormatter(QueryObjectModel qom) {\n      *\n      * @param qom the query object model to translate.\n      * @return the JCR_SQL2 statement.\n-     * @throws RepositoryException if an error occurs while formatting the qom. \n+     * @throws RepositoryException if an error occurs while formatting the qom.\n      */\n     public static String format(QueryObjectModel qom)\n             throws RepositoryException {\n         return new QOMFormatter(qom).format();\n     }\n \n     private String format() throws RepositoryException {\n-        sb.append(\"SELECT\");\n-        ws();\n-        format(qom.getColumns());\n-        ws();\n-        sb.append(\"FROM\");\n-        ws();\n-        format(qom.getSource());\n+        append(\"SELECT \");\n+        append(qom.getColumns());\n+        append(\" FROM \");\n+        append(qom.getSource());\n         Constraint c = qom.getConstraint();\n         if (c != null) {\n-            ws();\n-            sb.append(\"WHERE\");\n-            ws();\n-            format(c);\n+            append(\" WHERE \");\n+            append(c);\n         }\n         Ordering[] orderings = qom.getOrderings();\n         if (orderings.length > 0) {\n-            ws();\n-            sb.append(\"ORDER BY\");\n-            ws();\n-            format(orderings);\n+            append(\" ORDER BY \");\n+            append(orderings);\n         }\n         return sb.toString();\n     }\n \n-    private void format(Ordering[] orderings) {\n+    private void append(Ordering[] orderings) {\n         String comma = \"\";\n         for (Ordering ordering : orderings) {\n-            sb.append(comma);\n+            append(comma);\n             comma = \", \";\n-            format(ordering.getOperand());\n+            append(ordering.getOperand());\n             if (JCR_ORDER_DESCENDING.equals(ordering.getOrder())) {\n-                ws();\n-                sb.append(\"DESC\");\n+                append(\" DESC\");\n             }\n         }\n     }\n \n-    private void format(Constraint c)\n+    private void append(Constraint c)\n             throws RepositoryException {\n         if (c instanceof And) {\n-            format((And) c);\n+            append((And) c);\n         } else if (c instanceof ChildNode) {\n-            format((ChildNode) c);\n+            append((ChildNode) c);\n         } else if (c instanceof Comparison) {\n-            format((Comparison) c);\n+            append((Comparison) c);\n         } else if (c instanceof DescendantNode) {\n-            format((DescendantNode) c);\n+            append((DescendantNode) c);\n         } else if (c instanceof FullTextSearch) {\n-            format((FullTextSearch) c);\n+            append((FullTextSearch) c);\n         } else if (c instanceof Not) {\n-            format((Not) c);\n+            append((Not) c);\n         } else if (c instanceof Or) {\n-            format((Or) c);\n+            append((Or) c);\n         } else if (c instanceof PropertyExistence) {\n-            format((PropertyExistence) c);\n+            append((PropertyExistence) c);\n         } else {\n-            format((SameNode) c);\n+            append((SameNode) c);\n         }\n     }\n \n-    private void format(And constraint)\n+    private void append(And constraint)\n             throws RepositoryException {\n         String and = \"\";\n         for (Constraint c : Arrays.asList(\n                 constraint.getConstraint1(),\n                 constraint.getConstraint2())) {\n-            sb.append(and);\n+            append(and);\n             and = \" AND \";\n             boolean paren = c instanceof Or;\n             if (paren) {\n-                sb.append(\"(\");\n+                append(\"(\");\n             }\n-            format(c);\n+            append(c);\n             if (paren) {\n-                sb.append(\")\");\n+                append(\")\");\n             }\n         }\n     }\n \n-    private void format(ChildNode constraint) {\n-        sb.append(\"ISCHILDNODE(\");\n-        formatName(constraint.getSelectorName());\n-        sb.append(\",\");\n-        ws();\n-        formatPath(constraint.getParentPath());\n-        sb.append(\")\");\n+    private void append(ChildNode constraint) {\n+        append(\"ISCHILDNODE(\");\n+        appendName(constraint.getSelectorName());\n+        append(\", \");\n+        appendPath(constraint.getParentPath());\n+        append(\")\");\n     }\n \n-    private void format(Comparison constraint)\n+    private void append(Comparison constraint)\n             throws RepositoryException {\n-        format(constraint.getOperand1());\n-        ws();\n-        formatOperator(constraint.getOperator());\n-        ws();\n-        format(constraint.getOperand2());\n+        append(constraint.getOperand1());\n+        append(\" \");\n+        appendOperator(constraint.getOperator());\n+        append(\" \");\n+        append(constraint.getOperand2());\n     }\n \n-    private void format(StaticOperand operand)\n+    private void append(StaticOperand operand)\n             throws RepositoryException {\n         if (operand instanceof BindVariableValue) {\n-            format((BindVariableValue) operand);\n+            append((BindVariableValue) operand);\n         } else {\n-            format((Literal) operand);\n+            append((Literal) operand);\n         }\n     }\n \n-    private void format(BindVariableValue value) {\n-        sb.append(\"$\");\n-        sb.append(value.getBindVariableName());\n+    private void append(BindVariableValue value) {\n+        append(\"$\");\n+        append(value.getBindVariableName());\n     }\n \n-    private void format(Literal value)\n+    private void append(Literal value)\n             throws RepositoryException {\n         Value v = value.getLiteralValue();\n         switch (v.getType()) {\n             case PropertyType.BINARY:\n-                formatCastLiteral(v.getString(), \"BINARY\");\n+                appendCastLiteral(v.getString(), \"BINARY\");\n                 break;\n             case PropertyType.BOOLEAN:\n-                sb.append(v.getString());\n+                append(v.getString());\n                 break;\n             case PropertyType.DATE:\n-                formatCastLiteral(v.getString(), \"DATE\");\n+                appendCastLiteral(v.getString(), \"DATE\");\n                 break;\n             case PropertyType.DECIMAL:\n-                sb.append(v.getString());\n+                append(v.getString());\n                 break;\n             case PropertyType.DOUBLE:\n-                sb.append(v.getString());\n+                append(v.getString());\n                 break;\n             case PropertyType.LONG:\n-                sb.append(v.getString());\n+                append(v.getString());\n                 break;\n             case PropertyType.NAME:\n-                formatCastLiteral(v.getString(), \"NAME\");\n+                appendCastLiteral(v.getString(), \"NAME\");\n                 break;\n             case PropertyType.PATH:\n-                formatCastLiteral(v.getString(), \"PATH\");\n+                appendCastLiteral(v.getString(), \"PATH\");\n                 break;\n             case PropertyType.REFERENCE:\n-                formatCastLiteral(v.getString(), \"REFERENCE\");\n+                appendCastLiteral(v.getString(), \"REFERENCE\");\n                 break;\n             case PropertyType.STRING:\n-                formatStringLiteral(v.getString());\n+                appendStringLiteral(v.getString());\n                 break;\n             case PropertyType.URI:\n-                formatCastLiteral(v.getString(), \"URI\");\n+                appendCastLiteral(v.getString(), \"URI\");\n                 break;\n             case PropertyType.WEAKREFERENCE:\n-                formatCastLiteral(v.getString(), \"WEAKREFERENCE\");\n+                appendCastLiteral(v.getString(), \"WEAKREFERENCE\");\n                 break;\n         }\n     }\n \n-    private void formatCastLiteral(String value, String propertyType) {\n-        sb.append(\"CAST(\");\n-        formatStringLiteral(value);\n-        ws();\n-        sb.append(\"AS\");\n-        ws();\n-        sb.append(propertyType);\n-        sb.append(\")\");\n+    private void appendCastLiteral(String value, String propertyType) {\n+        append(\"CAST(\");\n+        appendStringLiteral(value);\n+        append(\" AS \");\n+        append(propertyType);\n+        append(\")\");\n     }\n \n-    private void formatStringLiteral(String value) {\n-        sb.append(\"'\");\n-        sb.append(value.replaceAll(\"'\", \"''\"));\n-        sb.append(\"'\");\n+    private void appendStringLiteral(String value) {\n+        append(\"'\");\n+        append(value.replaceAll(\"'\", \"''\"));\n+        append(\"'\");\n     }\n \n-    private void formatOperator(String operator) {\n+    private void appendOperator(String operator) {\n         if (JCR_OPERATOR_EQUAL_TO.equals(operator)) {\n-            sb.append(\"=\");\n+            append(\"=\");\n         } else if (JCR_OPERATOR_GREATER_THAN.equals(operator)) {\n-            sb.append(\">\");\n+            append(\">\");\n         } else if (JCR_OPERATOR_GREATER_THAN_OR_EQUAL_TO.equals(operator)) {\n-            sb.append(\">=\");\n+            append(\">=\");\n         } else if (JCR_OPERATOR_LESS_THAN.equals(operator)) {\n-            sb.append(\"<\");\n+            append(\"<\");\n         } else if (JCR_OPERATOR_LESS_THAN_OR_EQUAL_TO.equals(operator)) {\n-            sb.append(\"<=\");\n+            append(\"<=\");\n         } else if (JCR_OPERATOR_LIKE.equals(operator)) {\n-            sb.append(\"LIKE\");\n+            append(\"LIKE\");\n         } else {\n-            sb.append(\"<>\");\n+            append(\"<>\");\n         }\n     }\n \n-    private void format(DynamicOperand operand) {\n+    private void append(DynamicOperand operand) {\n         if (operand instanceof FullTextSearchScore) {\n-            format((FullTextSearchScore) operand);\n+            append((FullTextSearchScore) operand);\n         } else if (operand instanceof Length) {\n-            format((Length) operand);\n+            append((Length) operand);\n         } else if (operand instanceof LowerCase) {\n-            format((LowerCase) operand);\n+            append((LowerCase) operand);\n         } else if (operand instanceof NodeLocalName) {\n-            format((NodeLocalName) operand);\n+            append((NodeLocalName) operand);\n         } else if (operand instanceof NodeName) {\n-            format((NodeName) operand);\n+            append((NodeName) operand);\n         } else if (operand instanceof PropertyValue) {\n-            format((PropertyValue) operand);\n+            append((PropertyValue) operand);\n         } else {\n-            format((UpperCase) operand);\n+            append((UpperCase) operand);\n         }\n     }\n \n-    private void format(FullTextSearchScore operand) {\n-        sb.append(\"SCORE(\");\n-        formatName(operand.getSelectorName());\n-        sb.append(\")\");\n+    private void append(FullTextSearchScore operand) {\n+        append(\"SCORE(\");\n+        appendName(operand.getSelectorName());\n+        append(\")\");\n     }\n \n-    private void format(Length operand) {\n-        sb.append(\"LENGTH(\");\n-        format(operand.getPropertyValue());\n-        sb.append(\")\");\n+    private void append(Length operand) {\n+        append(\"LENGTH(\");\n+        append(operand.getPropertyValue());\n+        append(\")\");\n     }\n \n-    private void format(LowerCase operand) {\n-        sb.append(\"LOWER(\");\n-        format(operand.getOperand());\n-        sb.append(\")\");\n+    private void append(LowerCase operand) {\n+        append(\"LOWER(\");\n+        append(operand.getOperand());\n+        append(\")\");\n     }\n \n-    private void format(NodeLocalName operand) {\n-        sb.append(\"LOCALNAME(\");\n-        formatName(operand.getSelectorName());\n-        sb.append(\")\");\n+    private void append(NodeLocalName operand) {\n+        append(\"LOCALNAME(\");\n+        appendName(operand.getSelectorName());\n+        append(\")\");\n     }\n \n-    private void format(NodeName operand) {\n-        sb.append(\"NAME(\");\n-        formatName(operand.getSelectorName());\n-        sb.append(\")\");\n+    private void append(NodeName operand) {\n+        append(\"NAME(\");\n+        appendName(operand.getSelectorName());\n+        append(\")\");\n     }\n \n-    private void format(PropertyValue operand) {\n-        formatName(operand.getSelectorName());\n-        sb.append(\".\");\n-        formatName(operand.getPropertyName());\n+    private void append(PropertyValue operand) {\n+        appendName(operand.getSelectorName());\n+        append(\".\");\n+        appendName(operand.getPropertyName());\n     }\n \n-    private void format(UpperCase operand) {\n-        sb.append(\"UPPER(\");\n-        format(operand.getOperand());\n-        sb.append(\")\");\n+    private void append(UpperCase operand) {\n+        append(\"UPPER(\");\n+        append(operand.getOperand());\n+        append(\")\");\n     }\n \n-    private void format(DescendantNode constraint) {\n-        sb.append(\"ISDESCENDANTNODE(\");\n-        formatName(constraint.getSelectorName());\n-        sb.append(\",\");\n-        ws();\n-        formatPath(constraint.getAncestorPath());\n-        sb.append(\")\");\n+    private void append(DescendantNode constraint) {\n+        append(\"ISDESCENDANTNODE(\");\n+        appendName(constraint.getSelectorName());\n+        append(\", \");\n+        appendPath(constraint.getAncestorPath());\n+        append(\")\");\n     }\n \n-    private void format(FullTextSearch constraint)\n-            throws RepositoryException {\n-        sb.append(\"CONTAINS(\");\n-        formatName(constraint.getSelectorName());\n-        sb.append(\".\");\n+    private void append(FullTextSearch constraint) throws RepositoryException {\n+        append(\"CONTAINS(\");\n+        appendName(constraint.getSelectorName());\n+        append(\".\");\n         String propName = constraint.getPropertyName();\n         if (propName == null) {\n-            sb.append(\"*\");\n+            append(\"*\");\n         } else {\n-            formatName(propName);\n+            appendName(propName);\n         }\n-        sb.append(\",\");\n-        ws();\n-        format(constraint.getFullTextSearchExpression());\n-        sb.append(\")\");\n+        append(\", \");\n+        append(constraint.getFullTextSearchExpression());\n+        append(\")\");\n     }\n \n-    private void format(Not constraint)\n-            throws RepositoryException {\n-        sb.append(\"NOT\");\n-        ws();\n+    private void append(Not constraint) throws RepositoryException {\n+        append(\"NOT \");\n         Constraint c = constraint.getConstraint();\n         boolean paren = c instanceof And || c instanceof Or;\n         if (paren) {\n-            sb.append(\"(\");\n+            append(\"(\");\n         }\n-        format(c);\n+        append(c);\n         if (paren) {\n-            sb.append(\")\");\n+            append(\")\");\n         }\n     }\n \n-    private void format(Or constraint)\n-            throws RepositoryException {\n-        format(constraint.getConstraint1());\n-        ws();\n-        sb.append(\"OR\");\n-        ws();\n-        format(constraint.getConstraint2());\n+    private void append(Or constraint) throws RepositoryException {\n+        append(constraint.getConstraint1());\n+        append(\" OR \");\n+        append(constraint.getConstraint2());\n     }\n \n-    private void format(PropertyExistence constraint) {\n-        formatName(constraint.getSelectorName());\n-        sb.append(\".\");\n-        formatName(constraint.getPropertyName());\n-        ws();\n-        sb.append(\"IS NOT NULL\");\n+    private void append(PropertyExistence constraint) {\n+        appendName(constraint.getSelectorName());\n+        append(\".\");\n+        appendName(constraint.getPropertyName());\n+        append(\" IS NOT NULL\");\n     }\n \n-    private void format(SameNode constraint) {\n-        sb.append(\"ISSAMENODE(\");\n-        formatName(constraint.getSelectorName());\n-        sb.append(\",\");\n-        ws();\n-        formatPath(constraint.getPath());\n-        sb.append(\")\");\n+    private void append(SameNode constraint) {\n+        append(\"ISSAMENODE(\");\n+        appendName(constraint.getSelectorName());\n+        append(\", \");\n+        appendPath(constraint.getPath());\n+        append(\")\");\n     }\n \n-    private void format(Column[] columns) {\n+    private void append(Column[] columns) {\n         if (columns.length == 0) {\n-            sb.append(\"*\");\n+            append(\"*\");\n         } else {\n             String comma = \"\";\n             for (Column c : columns) {\n-                sb.append(comma);\n+                append(comma);\n                 comma = \", \";\n-                formatName(c.getSelectorName());\n-                sb.append(\".\");\n+                appendName(c.getSelectorName());\n+                append(\".\");\n                 String propName = c.getPropertyName();\n                 if (propName != null) {\n-                    formatName(propName);\n-                    ws();\n-                    sb.append(\"AS\");\n-                    ws();\n-                    formatName(c.getColumnName());\n+                    appendName(propName);\n+                    if (c.getColumnName() != null) {\n+                        append(\" AS \");\n+                        appendName(c.getColumnName());\n+                    }\n                 } else {\n-                    sb.append(\"*\");\n+                    append(\"*\");\n                 }\n             }\n         }\n     }\n \n-    private void format(Source source) {\n+    private void append(Source source) {\n         if (source instanceof Join) {\n-            format((Join) source);\n+            append((Join) source);\n         } else {\n-            format((Selector) source);\n+            append((Selector) source);\n         }\n     }\n \n-    private void format(Join join) {\n-        format(join.getLeft());\n-        ws();\n-        formatJoinType(join.getJoinType());\n-        ws();\n-        sb.append(\"JOIN\");\n-        ws();\n-        format(join.getRight());\n-        ws();\n-        sb.append(\"ON\");\n-        ws();\n-        format(join.getJoinCondition());\n+    private void append(Join join) {\n+        append(join.getLeft());\n+        append(\" \");\n+        appendJoinType(join.getJoinType());\n+        append(\" JOIN \");\n+        append(join.getRight());\n+        append(\" ON \");\n+        append(join.getJoinCondition());\n     }\n \n-    private void format(JoinCondition joinCondition) {\n+    private void append(JoinCondition joinCondition) {\n         if (joinCondition instanceof EquiJoinCondition) {\n-            format((EquiJoinCondition) joinCondition);\n+            append((EquiJoinCondition) joinCondition);\n         } else if (joinCondition instanceof ChildNodeJoinCondition) {\n-            format((ChildNodeJoinCondition) joinCondition);\n+            append((ChildNodeJoinCondition) joinCondition);\n         } else if (joinCondition instanceof DescendantNodeJoinCondition) {\n-            format((DescendantNodeJoinCondition) joinCondition);\n+            append((DescendantNodeJoinCondition) joinCondition);\n         } else {\n-            format((SameNodeJoinCondition) joinCondition);\n+            append((SameNodeJoinCondition) joinCondition);\n         }\n     }\n \n-    private void format(EquiJoinCondition condition) {\n-        formatName(condition.getSelector1Name());\n-        sb.append(\".\");\n-        formatName(condition.getProperty1Name());\n-        ws();\n-        sb.append(\"=\");\n-        ws();\n-        formatName(condition.getSelector2Name());\n-        sb.append(\".\");\n-        formatName(condition.getProperty2Name());\n-    }\n-\n-    private void format(ChildNodeJoinCondition condition) {\n-        sb.append(\"ISCHILDNODE(\");\n-        formatName(condition.getChildSelectorName());\n-        sb.append(\",\");\n-        ws();\n-        formatName(condition.getParentSelectorName());\n-        sb.append(\")\");\n-    }\n-\n-    private void format(DescendantNodeJoinCondition condition) {\n-        sb.append(\"ISDESCENDANTNODE(\");\n-        formatName(condition.getDescendantSelectorName());\n-        sb.append(\",\");\n-        ws();\n-        formatName(condition.getAncestorSelectorName());\n-        sb.append(\")\");\n-    }\n-\n-    private void format(SameNodeJoinCondition condition) {\n-        sb.append(\"ISSAMENODE(\");\n-        formatName(condition.getSelector1Name());\n-        sb.append(\",\");\n-        ws();\n-        formatName(condition.getSelector2Name());\n+    private void append(EquiJoinCondition condition) {\n+        appendName(condition.getSelector1Name());\n+        append(\".\");\n+        appendName(condition.getProperty1Name());\n+        append(\" = \");\n+        appendName(condition.getSelector2Name());\n+        append(\".\");\n+        appendName(condition.getProperty2Name());\n+    }\n+\n+    private void append(ChildNodeJoinCondition condition) {\n+        append(\"ISCHILDNODE(\");\n+        appendName(condition.getChildSelectorName());\n+        append(\", \");\n+        appendName(condition.getParentSelectorName());\n+        append(\")\");\n+    }\n+\n+    private void append(DescendantNodeJoinCondition condition) {\n+        append(\"ISDESCENDANTNODE(\");\n+        appendName(condition.getDescendantSelectorName());\n+        append(\", \");\n+        appendName(condition.getAncestorSelectorName());\n+        append(\")\");\n+    }\n+\n+    private void append(SameNodeJoinCondition condition) {\n+        append(\"ISSAMENODE(\");\n+        appendName(condition.getSelector1Name());\n+        append(\", \");\n+        appendName(condition.getSelector2Name());\n         if (condition.getSelector2Path() != null) {\n-            sb.append(\",\");\n-            ws();\n-            formatPath(condition.getSelector2Path());\n+            append(\", \");\n+            appendPath(condition.getSelector2Path());\n         }\n-        sb.append(\")\");\n+        append(\")\");\n     }\n \n-    private void formatPath(String path) {\n+    private void appendPath(String path) {\n         if (isSimpleName(path)) {\n-            sb.append(path);\n+            append(path);\n         } else {\n-            sb.append(\"[\");\n-            sb.append(path);\n-            sb.append(\"]\");\n+            append(\"[\");\n+            append(path);\n+            append(\"]\");\n         }\n     }\n \n-    private void formatJoinType(String joinType) {\n+    private void appendJoinType(String joinType) {\n         if (joinType.equals(JCR_JOIN_TYPE_INNER)) {\n-            sb.append(\"INNER\");\n+            append(\"INNER\");\n         } else if (joinType.equals(JCR_JOIN_TYPE_LEFT_OUTER)) {\n-            sb.append(\"LEFT OUTER\");\n+            append(\"LEFT OUTER\");\n         } else {\n-            sb.append(\"RIGHT OUTER\");\n+            append(\"RIGHT OUTER\");\n         }\n     }\n \n-    private void format(Selector selector) {\n-        formatName(selector.getNodeTypeName());\n-        ws();\n-        sb.append(\"AS\");\n-        ws();\n-        formatName(selector.getSelectorName());\n+    private void append(Selector selector) {\n+        appendName(selector.getNodeTypeName());\n+        if (!selector.getSelectorName().equals(selector.getNodeTypeName())) {\n+            append(\" AS \");\n+            appendName(selector.getSelectorName());\n+        }\n     }\n \n-    private void formatName(String name) {\n+    private void appendName(String name) {\n         if (isSimpleName(name)) {\n-            sb.append(name);\n+            append(name);\n         } else {\n-            sb.append(\"[\");\n-            sb.append(name);\n-            sb.append(\"]\");\n+            append(\"[\");\n+            append(name);\n+            append(\"]\");\n         }\n     }\n \n@@ -589,7 +558,8 @@ private static boolean isSimpleName(String name) {\n         return true;\n     }\n \n-    private void ws() {\n-        sb.append(\" \");\n+    private void append(String s) {\n+        sb.append(s);\n     }\n+\n }",
                "additions": 232,
                "raw_url": "https://github.com/apache/jackrabbit/raw/62f9c0bba50be5258d294c74a55b880282670b6a/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/query/sql2/QOMFormatter.java",
                "status": "modified",
                "changes": 494,
                "deletions": 262,
                "sha": "544e83c1e54e4ae080d006fad1f2703403d665d8",
                "blob_url": "https://github.com/apache/jackrabbit/blob/62f9c0bba50be5258d294c74a55b880282670b6a/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/query/sql2/QOMFormatter.java",
                "filename": "jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/query/sql2/QOMFormatter.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/query/sql2/QOMFormatter.java?ref=62f9c0bba50be5258d294c74a55b880282670b6a"
            }
        ],
        "bug_id": "jackrabbit_100",
        "parent": "https://github.com/apache/jackrabbit/commit/dcfe2b71ed33d8d2147b0a83eac9ec36ead85b2e",
        "message": "JCR-2561 SQL2 query - supplying column selector fails with NPE on getColumnName()\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@921890 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/afe7024fdd2f04bc4c93d8b983544acb9bc4f688",
        "file": [
            {
                "patch": "@@ -365,21 +365,18 @@ public Value getValue(Row row) throws RepositoryException {\n             } else {\n                 path = row.getPath();\n             }\n-            return vf.createValue(path, PropertyType.PATH);\n+            return (path == null) ? null : vf.createValue(path, PropertyType.PATH);\n         }\n     }\n \n     private static void collectSelectorNames(Query query,\n                                              QueryResult result,\n-                                             List<String> sn) {\n+                                             List<String> sn) throws RepositoryException {\n         if (query instanceof QueryObjectModel) {\n             QueryObjectModel qom = (QueryObjectModel) query;\n             collectSelectorNames(qom.getSource(), sn);\n         } else {\n-            // TODO\n-            // sn.addAll(Arrays.asList(qResult.getSelectorNames()));\n-            // TODO: remove once getSelectorNames() is available\n-            sn.add(null); // default selector\n+            sn.addAll(Arrays.asList(result.getSelectorNames()));\n         }\n     }\n ",
                "additions": 3,
                "raw_url": "https://github.com/apache/jackrabbit/raw/afe7024fdd2f04bc4c93d8b983544acb9bc4f688/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/search/SearchResourceImpl.java",
                "status": "modified",
                "changes": 9,
                "deletions": 6,
                "sha": "eaa904a32278cf0e13e181aaee0b22b4aa78c69a",
                "blob_url": "https://github.com/apache/jackrabbit/blob/afe7024fdd2f04bc4c93d8b983544acb9bc4f688/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/search/SearchResourceImpl.java",
                "filename": "jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/search/SearchResourceImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/search/SearchResourceImpl.java?ref=afe7024fdd2f04bc4c93d8b983544acb9bc4f688"
            }
        ],
        "bug_id": "jackrabbit_101",
        "parent": "https://github.com/apache/jackrabbit/commit/0dafce4b147a5f1514752f66acc0a51d5cc3306f",
        "message": "JCR-2534: jcr-server: NPE in SearchResourceImpl if PathValue path is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@918600 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/4e995165fa53f690061186acca45a8558f834df5",
        "file": [
            {
                "patch": "@@ -113,7 +113,7 @@ public Version getLinearSuccessor() throws RepositoryException {\n         InternalVersion base = ((VersionImpl) vn.getBaseVersion()).getInternalVersion();\n \n         InternalVersion suc = getInternalVersion().getLinearSuccessor(base);\n-        return (Version) session.getNodeById(suc.getId());\n+        return suc == null ? null : (Version) session.getNodeById(suc.getId());\n     }\n \n     /**",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/4e995165fa53f690061186acca45a8558f834df5/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "34db510591d990aae3ac7f1c7347b863bbb3c8ab",
                "blob_url": "https://github.com/apache/jackrabbit/blob/4e995165fa53f690061186acca45a8558f834df5/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionImpl.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionImpl.java?ref=4e995165fa53f690061186acca45a8558f834df5"
            }
        ],
        "bug_id": "jackrabbit_102",
        "parent": "https://github.com/apache/jackrabbit/commit/153c8f238512c92152a6020e900fa0b3a2adb6dc",
        "message": "JCR-2058: fix get getLinearSuccessor(), which was failing with NPE on the base version\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@772285 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/ac1354cd57d9aa8492555381a7c30715132909e6",
        "file": [
            {
                "patch": "@@ -94,8 +94,8 @@ public Credentials getCredentials(HttpServletRequest request)\n                     return null;\n                 } else {\n                     int pos = defaultHeaderValue.indexOf(':');\n-                    if (pos<0) {\n-                        return new SimpleCredentials(defaultHeaderValue, null);\n+                    if (pos < 0) {\n+                        return new SimpleCredentials(defaultHeaderValue, new char[0]);\n                     } else {\n                         return new SimpleCredentials(\n                                 defaultHeaderValue.substring(0, pos),",
                "additions": 2,
                "raw_url": "https://github.com/apache/jackrabbit/raw/ac1354cd57d9aa8492555381a7c30715132909e6/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/server/BasicCredentialsProvider.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "e80e812694e6022c0f44113f15327545a0e830bd",
                "blob_url": "https://github.com/apache/jackrabbit/blob/ac1354cd57d9aa8492555381a7c30715132909e6/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/server/BasicCredentialsProvider.java",
                "filename": "jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/server/BasicCredentialsProvider.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/server/BasicCredentialsProvider.java?ref=ac1354cd57d9aa8492555381a7c30715132909e6"
            },
            {
                "patch": "@@ -0,0 +1,287 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.server;\n+\n+import junit.framework.TestCase;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpSession;\n+import javax.servlet.ServletInputStream;\n+import javax.servlet.RequestDispatcher;\n+import javax.servlet.ServletException;\n+import javax.jcr.LoginException;\n+import javax.jcr.Credentials;\n+import javax.jcr.SimpleCredentials;\n+import java.util.Enumeration;\n+import java.util.Map;\n+import java.util.Locale;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.security.Principal;\n+import java.io.UnsupportedEncodingException;\n+import java.io.IOException;\n+import java.io.BufferedReader;\n+\n+/**\n+ * <code>BasicCredentialsProviderTest</code>...\n+ */\n+public class BasicCredentialsProviderTest extends TestCase {\n+\n+    public void testMissingDefaultHeader() throws ServletException {\n+        CredentialsProvider cb = new BasicCredentialsProvider(null);\n+        try {\n+            Credentials creds = cb.getCredentials(new RequestImpl(null));\n+            fail(\"LoginException expected\");\n+        } catch (LoginException e) {\n+            // ok\n+        }\n+    }\n+\n+    public void testDefaultPassword() throws ServletException, LoginException {\n+        Map m = new HashMap();\n+        m.put(\"userId\", new char[0]);\n+        m.put(\"userId:\", new char[0]);\n+        m.put(\"userId:pw\", \"pw\".toCharArray());\n+\n+        for (Iterator it = m.keySet().iterator(); it.hasNext();) {\n+            String defaultHeaderValue = it.next().toString();\n+            char[] pw = (char[]) m.get(defaultHeaderValue);\n+\n+            CredentialsProvider cb = new BasicCredentialsProvider(defaultHeaderValue);\n+            Credentials creds = cb.getCredentials(new RequestImpl(null));\n+\n+            assertNotNull(creds);\n+            assertTrue(creds instanceof SimpleCredentials);\n+            assertEquals(\"userId\",((SimpleCredentials) creds).getUserID());\n+            if (pw.length == 0) {\n+                assertEquals(0, ((SimpleCredentials) creds).getPassword().length);\n+            } else {\n+                assertEquals(new String(pw), new String(((SimpleCredentials) creds).getPassword()));\n+            }\n+        }\n+    }\n+\n+\n+\n+\n+    private class RequestImpl implements HttpServletRequest {\n+\n+        private final String authHeader;\n+\n+        private RequestImpl(String authHeader) {\n+            this.authHeader = authHeader;\n+        }\n+\n+        public String getAuthType() {\n+            return null;\n+        }\n+\n+        public Cookie[] getCookies() {\n+            return new Cookie[0];\n+        }\n+\n+        public long getDateHeader(String name) {\n+            return 0;\n+        }\n+\n+        public String getHeader(String name) {\n+            return authHeader;\n+        }\n+\n+        public Enumeration getHeaders(String name) {\n+            return null;\n+        }\n+\n+        public Enumeration getHeaderNames() {\n+            return null;\n+        }\n+\n+        public int getIntHeader(String name) {\n+            return 0;\n+        }\n+\n+        public String getMethod() {\n+            return null;\n+        }\n+\n+        public String getPathInfo() {\n+            return null;\n+        }\n+\n+        public String getPathTranslated() {\n+            return null;\n+        }\n+\n+        public String getContextPath() {\n+            return null;\n+        }\n+\n+        public String getQueryString() {\n+            return null;\n+        }\n+\n+        public String getRemoteUser() {\n+            return null;\n+        }\n+\n+        public boolean isUserInRole(String role) {\n+            return false;\n+        }\n+\n+        public Principal getUserPrincipal() {\n+            return null;\n+        }\n+\n+        public String getRequestedSessionId() {\n+            return null;\n+        }\n+\n+        public String getRequestURI() {\n+            return null;\n+        }\n+\n+        public StringBuffer getRequestURL() {\n+            return null;\n+        }\n+\n+        public String getServletPath() {\n+            return null;\n+        }\n+\n+        public HttpSession getSession(boolean create) {\n+            return null;\n+        }\n+\n+        public HttpSession getSession() {\n+            return null;\n+        }\n+\n+        public boolean isRequestedSessionIdValid() {\n+            return false;\n+        }\n+\n+        public boolean isRequestedSessionIdFromCookie() {\n+            return false;\n+        }\n+\n+        public boolean isRequestedSessionIdFromURL() {\n+            return false;\n+        }\n+\n+        public boolean isRequestedSessionIdFromUrl() {\n+            return false;\n+        }\n+\n+        public Object getAttribute(String name) {\n+            return null;\n+        }\n+\n+        public Enumeration getAttributeNames() {\n+            return null;\n+        }\n+\n+        public String getCharacterEncoding() {\n+            return null;\n+        }\n+\n+        public void setCharacterEncoding(String s) throws UnsupportedEncodingException {\n+        }\n+\n+        public int getContentLength() {\n+            return 0;\n+        }\n+\n+        public String getContentType() {\n+            return null;\n+        }\n+\n+        public ServletInputStream getInputStream() throws IOException {\n+            return null;\n+        }\n+\n+        public String getParameter(String name) {\n+            return null;\n+        }\n+\n+        public Enumeration getParameterNames() {\n+            return null;\n+        }\n+\n+        public String[] getParameterValues(String name) {\n+            return new String[0];\n+        }\n+\n+        public Map getParameterMap() {\n+            return null;\n+        }\n+\n+        public String getProtocol() {\n+            return null;\n+        }\n+\n+        public String getScheme() {\n+            return null;\n+        }\n+\n+        public String getServerName() {\n+            return null;\n+        }\n+\n+        public int getServerPort() {\n+            return 0;\n+        }\n+\n+        public BufferedReader getReader() throws IOException {\n+            return null;\n+        }\n+\n+        public String getRemoteAddr() {\n+            return null;\n+        }\n+\n+        public String getRemoteHost() {\n+            return null;\n+        }\n+\n+        public void setAttribute(String name, Object o) {\n+        }\n+\n+        public void removeAttribute(String name) {\n+        }\n+\n+        public Locale getLocale() {\n+            return null;\n+        }\n+\n+        public Enumeration getLocales() {\n+            return null;\n+        }\n+\n+        public boolean isSecure() {\n+            return false;\n+        }\n+\n+        public RequestDispatcher getRequestDispatcher(String path) {\n+            return null;\n+        }\n+\n+        public String getRealPath(String path) {\n+            return null;\n+        }\n+    }\n+}\n\\ No newline at end of file",
                "additions": 287,
                "raw_url": "https://github.com/apache/jackrabbit/raw/ac1354cd57d9aa8492555381a7c30715132909e6/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/BasicCredentialsProviderTest.java",
                "status": "added",
                "changes": 287,
                "deletions": 0,
                "sha": "f9b703db6b7f9b649b50f60a818112f72c983410",
                "blob_url": "https://github.com/apache/jackrabbit/blob/ac1354cd57d9aa8492555381a7c30715132909e6/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/BasicCredentialsProviderTest.java",
                "filename": "jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/BasicCredentialsProviderTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/BasicCredentialsProviderTest.java?ref=ac1354cd57d9aa8492555381a7c30715132909e6"
            },
            {
                "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.server;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test suite that includes all testcases for package org.apache.jackrabbit.server.\n+ */\n+public class TestAll extends TestCase {\n+\n+    /**\n+     * Returns a <code>Test</code> suite that executes all tests inside this\n+     * package.\n+     */\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(\"org.apache.jackrabbit.server tests\");\n+\n+        suite.addTestSuite(BasicCredentialsProviderTest.class);\n+\n+        return suite;\n+    }\n+}",
                "additions": 39,
                "raw_url": "https://github.com/apache/jackrabbit/raw/ac1354cd57d9aa8492555381a7c30715132909e6/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/TestAll.java",
                "status": "added",
                "changes": 39,
                "deletions": 0,
                "sha": "26efafb9d1b19aea6a1aa373f31f3d660ada6091",
                "blob_url": "https://github.com/apache/jackrabbit/blob/ac1354cd57d9aa8492555381a7c30715132909e6/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/TestAll.java",
                "filename": "jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/TestAll.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/TestAll.java?ref=ac1354cd57d9aa8492555381a7c30715132909e6"
            }
        ],
        "bug_id": "jackrabbit_103",
        "parent": "https://github.com/apache/jackrabbit/commit/cb0c0b1fe5e1137726ff14f5dbdc14bdae97dd63",
        "message": "JCR-2032 : BasicCredentialsProviderTest throws NPE if defaultAuthHeader init param misses the password\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@755512 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/75e67c5a35528f59729af55345b8428e7999951a",
        "file": [
            {
                "patch": "@@ -634,7 +634,10 @@ private QValue buildQValue(TextValue tv, int targetType, NamePathResolver resolv\n     private void checkIncludesMixReferenceable(Importer.NodeInfo nodeInfo) throws RepositoryException {\n         List l = new ArrayList();\n         l.add(nodeInfo.getNodeTypeName());\n-        l.addAll(Arrays.asList(nodeInfo.getMixinNames()));\n+        Name[] mixinNames = nodeInfo.getMixinNames();\n+        if (mixinNames != null && mixinNames.length > 0) {\n+            l.addAll(Arrays.asList(nodeInfo.getMixinNames()));\n+        }\n         if (l.contains(NameConstants.MIX_REFERENCEABLE)) {\n             // shortcut\n             return;",
                "additions": 4,
                "raw_url": "https://github.com/apache/jackrabbit/raw/75e67c5a35528f59729af55345b8428e7999951a/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/xml/SessionImporter.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "c8a2d55c61e2d061670dfa6a2dc93bd5b0f14a7e",
                "blob_url": "https://github.com/apache/jackrabbit/blob/75e67c5a35528f59729af55345b8428e7999951a/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/xml/SessionImporter.java",
                "filename": "jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/xml/SessionImporter.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/xml/SessionImporter.java?ref=75e67c5a35528f59729af55345b8428e7999951a"
            },
            {
                "patch": "@@ -16,21 +16,26 @@\n  */\n package org.apache.jackrabbit.jcr2spi.xml;\n \n-import org.apache.jackrabbit.test.AbstractJCRTest;\n-import org.apache.jackrabbit.spi.Name;\n import org.apache.jackrabbit.JcrConstants;\n+import org.apache.jackrabbit.spi.Name;\n+import org.apache.jackrabbit.test.AbstractJCRTest;\n+import org.apache.jackrabbit.uuid.UUID;\n import org.xml.sax.ContentHandler;\n import org.xml.sax.SAXException;\n import org.xml.sax.helpers.AttributesImpl;\n \n-import javax.jcr.RepositoryException;\n import javax.jcr.ImportUUIDBehavior;\n-import javax.jcr.PropertyType;\n-import javax.jcr.Session;\n import javax.jcr.Item;\n import javax.jcr.Property;\n-import java.util.List;\n+import javax.jcr.PropertyType;\n+import javax.jcr.RepositoryException;\n+import javax.jcr.Session;\n+import javax.jcr.nodetype.ConstraintViolationException;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n import java.util.Arrays;\n+import java.util.List;\n \n /**\n  * <code>SessionImportTest</code>...\n@@ -108,6 +113,73 @@ public void testImportNameValueWithUnregisteredNamespace() throws RepositoryExce\n         superuser.save();\n     }\n \n+    /**\n+     * Test case for issue <a href=\"https://issues.apache.org/jira/browse/JCR-1857\">JCR-1857</href>\n+     *\n+     * @throws IOException\n+     * @throws RepositoryException\n+     */\n+    public void testEmptyMixins() throws IOException, RepositoryException {\n+        String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<sv:node xmlns:nt=\\\"http://www.jcp.org/jcr/nt/1.0\\\"\\n\" +\n+                \"         xmlns:sv=\\\"http://www.jcp.org/jcr/sv/1.0\\\"\\n\" +\n+                \"         xmlns:mix=\\\"http://www.jcp.org/jcr/mix/1.0\\\"\\n\" +\n+                \"         xmlns:jcr=\\\"http://www.jcp.org/jcr/1.0\\\"\\n\" +\n+                \"         sv:name=\\\"testnode1\\\">\\n\" +\n+                \"    <sv:property sv:name=\\\"jcr:primaryType\\\" sv:type=\\\"Name\\\">\\n\" +\n+                \"        <sv:value>nt:unstructured</sv:value>\\n\" +\n+                \"    </sv:property>\\n\" +\n+                \"    <sv:property sv:name=\\\"jcr:title\\\" sv:type=\\\"String\\\">\\n\" +\n+                \"        <sv:value>Test Node</sv:value>\\n\" +\n+                \"    </sv:property>\\n\" +\n+                \"    <sv:property sv:name=\\\"jcr:uuid\\\" sv:type=\\\"String\\\">\\n\" +\n+                \"        <sv:value>1234</sv:value>\\n\" +\n+                \"    </sv:property>\\n\" +\n+                \"</sv:node>\";\n+\n+        InputStream in = new ByteArrayInputStream(xml.getBytes());\n+        try {\n+            superuser.importXML(testRootNode.getPath(), in, ImportUUIDBehavior.IMPORT_UUID_COLLISION_THROW);\n+            fail(\"jcr:uuid cannot be created if mix:referenceable is not part of the effective nodetype.\");\n+        } catch (ConstraintViolationException e) {\n+            // ok.\n+        }\n+    }\n+\n+    /**\n+     * Test case for issue <a href=\"https://issues.apache.org/jira/browse/JCR-1857\">JCR-1857</href>\n+     *\n+     * @throws IOException\n+     * @throws RepositoryException\n+     */\n+    public void testEmptyMixins2() throws IOException, RepositoryException {\n+        /*\n+        JSR 170: nt:resource includes mix:referenceable\n+        TODO: tests needs to be adjusted for JSR 283 (-> define test-property)\n+        */\n+        String referenceableNt = \"nt:resource\";\n+        /*\n+        TODO: retrieve valid jcr:uuid value from test-properties.\n+        */\n+        String uuid = UUID.randomUUID().toString();\n+        String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<sv:node xmlns:nt=\\\"http://www.jcp.org/jcr/nt/1.0\\\"\\n\" +\n+                \"         xmlns:sv=\\\"http://www.jcp.org/jcr/sv/1.0\\\"\\n\" +\n+                \"         xmlns:mix=\\\"http://www.jcp.org/jcr/mix/1.0\\\"\\n\" +\n+                \"         xmlns:jcr=\\\"http://www.jcp.org/jcr/1.0\\\"\\n\" +\n+                \"         sv:name=\\\"testnode1\\\">\\n\" +\n+                \"    <sv:property sv:name=\\\"jcr:primaryType\\\" sv:type=\\\"Name\\\">\\n\" +\n+                \"        <sv:value>\" + referenceableNt + \"</sv:value>\\n\" +\n+                \"    </sv:property>\\n\" +\n+                \"    <sv:property sv:name=\\\"jcr:uuid\\\" sv:type=\\\"String\\\">\\n\" +\n+                \"        <sv:value>\" + uuid + \"</sv:value>\\n\" +\n+                \"    </sv:property>\\n\" +\n+                \"</sv:node>\";\n+\n+        InputStream in = new ByteArrayInputStream(xml.getBytes());\n+        superuser.importXML(testRootNode.getPath(), in, ImportUUIDBehavior.IMPORT_UUID_COLLISION_THROW);\n+    }\n+\n     private static String getUnknownURI(Session session, String uriHint) throws RepositoryException {\n         String uri = uriHint;\n         int index = 0;\n@@ -122,7 +194,7 @@ private static String getUnknownURI(Session session, String uriHint) throws Repo\n     /**\n      * Returns a prefix that is unique among the already registered prefixes.\n      *\n-     * @param uriHint namespace uri that serves as hint for the prefix generation\n+     * @param session\n      * @return a unique prefix\n      */\n     public static String getUniquePrefix(Session session) throws RepositoryException {",
                "additions": 79,
                "raw_url": "https://github.com/apache/jackrabbit/raw/75e67c5a35528f59729af55345b8428e7999951a/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/xml/SessionImportTest.java",
                "status": "modified",
                "changes": 86,
                "deletions": 7,
                "sha": "a8bb3430b7a8dfbf8b4b5055bbd56558a2b0f98b",
                "blob_url": "https://github.com/apache/jackrabbit/blob/75e67c5a35528f59729af55345b8428e7999951a/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/xml/SessionImportTest.java",
                "filename": "jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/xml/SessionImportTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/xml/SessionImportTest.java?ref=75e67c5a35528f59729af55345b8428e7999951a"
            }
        ],
        "bug_id": "jackrabbit_104",
        "parent": "https://github.com/apache/jackrabbit/commit/b88ddc6c2057a1b66c56304b78d487c999cd7767",
        "message": "JCR-1857: NPE with SessionImporter#checkIncludesMixReferenceable if NodeInfo doesn't contain mixin names\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@714034 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/7be5cdd48db966403fe6ad44b18a38e8a1f8d3df",
        "file": [
            {
                "patch": "@@ -60,7 +60,7 @@\n      * @return locator of the resource specified with the Destination header.\n      * @see DavConstants#HEADER_DESTINATION\n      */\n-    public DavResourceLocator getDestinationLocator();\n+    public DavResourceLocator getDestinationLocator() throws DavException;\n \n     /**\n      * Returns true if the {@link DavConstants#HEADER_OVERWRITE Overwrite header}",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/7be5cdd48db966403fe6ad44b18a38e8a1f8d3df/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/DavServletRequest.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "2c336754166be31b819b043f07d6d1a2d7f8fa86",
                "blob_url": "https://github.com/apache/jackrabbit/blob/7be5cdd48db966403fe6ad44b18a38e8a1f8d3df/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/DavServletRequest.java",
                "filename": "jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/DavServletRequest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/DavServletRequest.java?ref=7be5cdd48db966403fe6ad44b18a38e8a1f8d3df"
            },
            {
                "patch": "@@ -163,32 +163,12 @@ public DavResourceLocator getRequestLocator() {\n      * resource.\n      *\n      * @return path of the destination resource.\n+     * @throws DavException \n      * @see #HEADER_DESTINATION\n      * @see DavServletRequest#getDestinationLocator\n      */\n-    public DavResourceLocator getDestinationLocator() {\n-        String destination = httpRequest.getHeader(HEADER_DESTINATION);\n-        if (destination != null) {\n-            try {\n-                URI uri = new URI(destination);\n-                if (uri.getAuthority().equals(httpRequest.getHeader(\"Host\"))) {\n-                    destination = uri.getRawPath();\n-                }\n-            } catch (URISyntaxException e) {\n-                log.debug(\"Destination is path is not a valid URI (\" + e.getMessage() + \".\");\n-                int pos = destination.lastIndexOf(\":\");\n-                if (pos > 0) {\n-                    destination = destination.substring(destination.indexOf(\"/\", pos));\n-                    log.debug(\"Tried to retrieve resource destination path from invalid URI: \" + destination);\n-                }\n-            }\n-            // cut off the context path\n-            String contextPath = httpRequest.getContextPath();\n-            if (destination.startsWith(contextPath)) {\n-                destination = destination.substring(contextPath.length());\n-            }\n-        }\n-        return factory.createResourceLocator(hrefPrefix, destination);\n+    public DavResourceLocator getDestinationLocator() throws DavException {\n+        return getHrefLocator(httpRequest.getHeader(HEADER_DESTINATION));\n     }\n \n     /**\n@@ -201,7 +181,7 @@ public DavResourceLocator getHrefLocator(String href) throws DavException {\n         String ref = href;\n         if (ref != null) {\n             //href should be a Simple-ref production as defined in RFC4918, so it is either an absolute URI\n-            //or an absoltute path\n+            //or an absolute path\n             try {\n                 URI uri = new URI(ref);\n                 String auth = uri.getAuthority();",
                "additions": 4,
                "raw_url": "https://github.com/apache/jackrabbit/raw/7be5cdd48db966403fe6ad44b18a38e8a1f8d3df/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/WebdavRequestImpl.java",
                "status": "modified",
                "changes": 28,
                "deletions": 24,
                "sha": "334d76b27b33b48c5cb5c97f70109d14e23c8cc1",
                "blob_url": "https://github.com/apache/jackrabbit/blob/7be5cdd48db966403fe6ad44b18a38e8a1f8d3df/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/WebdavRequestImpl.java",
                "filename": "jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/WebdavRequestImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/WebdavRequestImpl.java?ref=7be5cdd48db966403fe6ad44b18a38e8a1f8d3df"
            },
            {
                "patch": "@@ -0,0 +1,117 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.jackrabbit.webdav.server;\r\n+\r\n+import java.io.IOException;\r\n+import java.net.URI;\r\n+import java.net.URISyntaxException;\r\n+\r\n+import junit.framework.TestCase;\r\n+\r\n+import org.apache.commons.httpclient.HttpClient;\r\n+import org.apache.commons.httpclient.HttpException;\r\n+import org.apache.commons.httpclient.UsernamePasswordCredentials;\r\n+import org.apache.commons.httpclient.auth.AuthScope;\r\n+import org.apache.commons.httpclient.methods.HeadMethod;\r\n+import org.apache.commons.httpclient.methods.PutMethod;\r\n+import org.apache.jackrabbit.webdav.DavException;\r\n+import org.apache.jackrabbit.webdav.client.methods.DeleteMethod;\r\n+import org.apache.jackrabbit.webdav.client.methods.MoveMethod;\r\n+\r\n+/**\r\n+ * Test cases for WebDAV BIND functionality (see <a href=\"http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-20.html\">draft-ietf-webdav-bind-20</a>\r\n+ * <p>\r\n+ * Required system properties:\r\n+ * <ul>\r\n+ *   <li>webdav.test.url</li>\r\n+ *   <li>webdav.test.username</li>\r\n+ *   <li>webdav.test.password</li>\r\n+ * </ul>\r\n+ */\r\n+\r\n+public class RFC4918DestinationHeaderTest extends TestCase {\r\n+\r\n+    private String root;\r\n+    private URI uri;\r\n+    private String username, password;\r\n+    private HttpClient client;\r\n+    \r\n+    protected void setUp() throws Exception {\r\n+        this.uri = URI.create(System.getProperty(\"webdav.test.url\"));\r\n+        this.root = this.uri.toASCIIString();\r\n+        if (!this.root.endsWith(\"/\")) {\r\n+            this.root += \"/\";\r\n+        }\r\n+        this.username = System.getProperty((\"webdav.test.username\"), \"\");\r\n+        this.password = System.getProperty((\"webdav.test.password\"), \"\");\r\n+        this.client = new HttpClient();\r\n+        this.client.getState().setCredentials(\r\n+                new AuthScope(this.uri.getHost(), this.uri.getPort()),\r\n+                new UsernamePasswordCredentials(this.username, this.password));\r\n+        super.setUp();\r\n+    }\r\n+\r\n+    protected void tearDown() throws Exception {\r\n+        super.tearDown();\r\n+    }\r\n+    \r\n+    public void testMove() throws HttpException, IOException, DavException, URISyntaxException {\r\n+\r\n+        String testuri = this.root + \"movetest\";\r\n+        String destinationuri = testuri + \"2\";\r\n+        String destinationpath = new URI(destinationuri).getRawPath();\r\n+        // make sure the scheme is removed\r\n+        assertTrue(destinationpath.indexOf(\":\") < 0);\r\n+        \r\n+        int status;\r\n+        try {\r\n+            PutMethod put = new PutMethod(testuri);\r\n+            status = this.client.executeMethod(put);\r\n+            assertTrue(\"status: \" + status, status == 200 || status == 201 || status == 204);\r\n+\r\n+            // try to move outside the servlet's name space\r\n+            MoveMethod move = new MoveMethod(testuri, \"/foobar\", true);\r\n+            status = this.client.executeMethod(move);\r\n+            assertTrue(\"status: \" + status, status == 403);\r\n+\r\n+            // try a relative path\r\n+            move = new MoveMethod(testuri, \"foobar\", true);\r\n+            status = this.client.executeMethod(move);\r\n+            assertTrue(\"status: \" + status, status == 400);\r\n+\r\n+            move = new MoveMethod(testuri, destinationpath, true);\r\n+            status = this.client.executeMethod(move);\r\n+            assertTrue(\"status: \" + status, status == 200 || status == 201 || status == 204);\r\n+            \r\n+            HeadMethod head = new HeadMethod(destinationuri);\r\n+            status = this.client.executeMethod(head);\r\n+            assertTrue(\"status: \" + status, status == 200);\r\n+\r\n+            head = new HeadMethod(testuri);\r\n+            status = this.client.executeMethod(head);\r\n+            assertTrue(\"status: \" + status, status == 404);\r\n+\r\n+        } finally {\r\n+            DeleteMethod delete = new DeleteMethod(testuri);\r\n+            status = this.client.executeMethod(delete);\r\n+            assertTrue(\"status: \" + status, status == 200 || status == 204 || status == 404);\r\n+            delete = new DeleteMethod(destinationuri);\r\n+            status = this.client.executeMethod(delete);\r\n+            assertTrue(\"status: \" + status, status == 200 || status == 204 || status == 404);\r\n+        }\r\n+    }\r\n+}\r",
                "additions": 117,
                "raw_url": "https://github.com/apache/jackrabbit/raw/7be5cdd48db966403fe6ad44b18a38e8a1f8d3df/jackrabbit-webdav/src/test/java/org/apache/jackrabbit/webdav/server/RFC4918DestinationHeaderTest.java",
                "status": "added",
                "changes": 117,
                "deletions": 0,
                "sha": "409367508cbeb9eed1dace5107dc5591a1260f9b",
                "blob_url": "https://github.com/apache/jackrabbit/blob/7be5cdd48db966403fe6ad44b18a38e8a1f8d3df/jackrabbit-webdav/src/test/java/org/apache/jackrabbit/webdav/server/RFC4918DestinationHeaderTest.java",
                "filename": "jackrabbit-webdav/src/test/java/org/apache/jackrabbit/webdav/server/RFC4918DestinationHeaderTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-webdav/src/test/java/org/apache/jackrabbit/webdav/server/RFC4918DestinationHeaderTest.java?ref=7be5cdd48db966403fe6ad44b18a38e8a1f8d3df"
            },
            {
                "patch": "@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.jackrabbit.webdav.server;\r\n+\r\n+import junit.framework.Test;\r\n+import junit.framework.TestCase;\r\n+import junit.framework.TestSuite;\r\n+\r\n+public class WebdavServerTests extends TestCase {\r\n+\r\n+    public static Test suite() {\r\n+        TestSuite suite = new TestSuite(\"WebDAV Server Tests\");\r\n+\r\n+        suite.addTestSuite(BindTest.class);\r\n+        suite.addTestSuite(RFC4918DestinationHeaderTest.class);\r\n+\r\n+        return suite;\r\n+    }\r\n+}\n\\ No newline at end of file",
                "additions": 33,
                "raw_url": "https://github.com/apache/jackrabbit/raw/7be5cdd48db966403fe6ad44b18a38e8a1f8d3df/jackrabbit-webdav/src/test/java/org/apache/jackrabbit/webdav/server/WebdavServerTests.java",
                "status": "added",
                "changes": 33,
                "deletions": 0,
                "sha": "0e3bc4cadb38c0770ac0eb53bef06a3483f40576",
                "blob_url": "https://github.com/apache/jackrabbit/blob/7be5cdd48db966403fe6ad44b18a38e8a1f8d3df/jackrabbit-webdav/src/test/java/org/apache/jackrabbit/webdav/server/WebdavServerTests.java",
                "filename": "jackrabbit-webdav/src/test/java/org/apache/jackrabbit/webdav/server/WebdavServerTests.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-webdav/src/test/java/org/apache/jackrabbit/webdav/server/WebdavServerTests.java?ref=7be5cdd48db966403fe6ad44b18a38e8a1f8d3df"
            }
        ],
        "bug_id": "jackrabbit_105",
        "parent": "https://github.com/apache/jackrabbit/commit/bc05cc9a6912c94e7af980f3f2aac451446ec9f4",
        "message": "JCR-1782: fix potential NPE in parsing Destination header, add RFC 4918 compliant parsing, add test cases\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@701129 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/3f9e79cdc3cf8683a12779a003d235f1f4ee8a21",
        "file": [
            {
                "patch": "@@ -100,7 +100,10 @@ public void removeEventListener(EventListener listener)\n \n     /** {@inheritDoc} */\n     public EventListenerIterator getRegisteredEventListeners() {\n-        return new ArrayEventListenerIterator(poller.getListeners());\n+        EventListener[] listeners = (poller != null)\n+                ? poller.getListeners()\n+                : new EventListener[0];\n+        return new ArrayEventListenerIterator(listeners);\n     }\n \n     //---------- internal ------------------------------------------------------",
                "additions": 4,
                "raw_url": "https://github.com/apache/jackrabbit/raw/3f9e79cdc3cf8683a12779a003d235f1f4ee8a21/jackrabbit-jcr-rmi/src/main/java/org/apache/jackrabbit/rmi/client/ClientObservationManager.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "7222c4342f9e7d8a2db1a7ec8cd7413c3a26fd9b",
                "blob_url": "https://github.com/apache/jackrabbit/blob/3f9e79cdc3cf8683a12779a003d235f1f4ee8a21/jackrabbit-jcr-rmi/src/main/java/org/apache/jackrabbit/rmi/client/ClientObservationManager.java",
                "filename": "jackrabbit-jcr-rmi/src/main/java/org/apache/jackrabbit/rmi/client/ClientObservationManager.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr-rmi/src/main/java/org/apache/jackrabbit/rmi/client/ClientObservationManager.java?ref=3f9e79cdc3cf8683a12779a003d235f1f4ee8a21"
            }
        ],
        "bug_id": "jackrabbit_106",
        "parent": "https://github.com/apache/jackrabbit/commit/7219f128aeb146f9e6cd6779dfd3b28bc3ffa328",
        "message": "JCR-1454 Prevent NPE on enumerating event listeners if none have been registered yet\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@633796 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/f64c5543baead3bad17977b6ef29e4f5bf2c955c",
        "file": [
            {
                "patch": "@@ -68,16 +68,19 @@ public void accept(OperationVisitor visitor) throws PathNotFoundException, ItemE\n      */\n     public void persisted(CacheBehaviour cacheBehaviour) {\n         if (cacheBehaviour == CacheBehaviour.INVALIDATE) {\n+            NodeEntry entry;\n             if (nodeState == null || removeExisting) {\n                 // invalidate the complete tree\n-                NodeEntry root = nodeState.getNodeEntry();\n-                while (root.getParent() != null) {\n-                    root = root.getParent();\n+                // -> start searching root-entry from any version-entry or\n+                //    from the given nodestate\n+                entry = (nodeState == null) ? versionStates[0].getNodeEntry() : nodeState.getNodeEntry();\n+                while (entry.getParent() != null) {\n+                    entry = entry.getParent();\n                 }\n-                root.invalidate(true);\n             } else {\n-                nodeState.getHierarchyEntry().invalidate(true);\n+                entry = nodeState.getNodeEntry();\n             }\n+            entry.invalidate(true);\n         }\n     }\n     //----------------------------------------< Access Operation Parameters >---",
                "additions": 8,
                "raw_url": "https://github.com/apache/jackrabbit/raw/f64c5543baead3bad17977b6ef29e4f5bf2c955c/contrib/spi/jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/operation/Restore.java",
                "status": "modified",
                "changes": 13,
                "deletions": 5,
                "sha": "5e2c62d02d9cc7be0e52a6c0e6045885f94bbbc9",
                "blob_url": "https://github.com/apache/jackrabbit/blob/f64c5543baead3bad17977b6ef29e4f5bf2c955c/contrib/spi/jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/operation/Restore.java",
                "filename": "contrib/spi/jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/operation/Restore.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/contrib/spi/jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/operation/Restore.java?ref=f64c5543baead3bad17977b6ef29e4f5bf2c955c"
            }
        ],
        "bug_id": "jackrabbit_107",
        "parent": "https://github.com/apache/jackrabbit/commit/7a058b665b0568b0f903cfeaac47024b3f967a68",
        "message": "#0000 - avoid NPE upon Restore.persisted in case of a \n        Workspace.restore.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@508431 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/7ad35718087e1d235f06a6d36a8870517dac6b9a",
        "file": [
            {
                "patch": "@@ -112,10 +112,10 @@ public void testGetPath()\n     /**\n      * Tests if getName() returns same as last name returned by getPath()\n      */\n-    public void testGetName() throws RepositoryException {\n-        assertEquals(\"getName() of root must be an empty string\",\n-                \"\",\n-                session.getRootNode().getName());\n+    public void testGetName() throws RepositoryException, NotExecutableException {\n+        if (childNode == null) {\n+            throw new NotExecutableException(\"Workspace does not have sufficient content to run this test.\");\n+        }\n \n         // build name from path\n         String path = childNode.getPath();\n@@ -1017,4 +1017,4 @@ private Node locateNodeWithSameNameSiblings(Node node)\n         }\n         return null;\n     }\n-}\n\\ No newline at end of file\n+}",
                "additions": 5,
                "raw_url": "https://github.com/apache/jackrabbit/raw/7ad35718087e1d235f06a6d36a8870517dac6b9a/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/NodeReadMethodsTest.java",
                "status": "modified",
                "changes": 10,
                "deletions": 5,
                "sha": "e8e15352921671cc43569fa4988d7fdac8d1b3fe",
                "blob_url": "https://github.com/apache/jackrabbit/blob/7ad35718087e1d235f06a6d36a8870517dac6b9a/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/NodeReadMethodsTest.java",
                "filename": "jackrabbit/src/test/java/org/apache/jackrabbit/test/api/NodeReadMethodsTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/test/java/org/apache/jackrabbit/test/api/NodeReadMethodsTest.java?ref=7ad35718087e1d235f06a6d36a8870517dac6b9a"
            }
        ],
        "bug_id": "jackrabbit_108",
        "parent": "https://github.com/apache/jackrabbit/commit/5bb3f49b42789fd9d5ddcf849f162a8f007bc9ce",
        "message": "JCR-583: TCK: NodeReadMethodsTest.testGetName fails with NPE if 'testroot' has no child node\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@480975 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/ca0e663482e98fb755f9c2b55d19070cefd94246",
        "file": [
            {
                "patch": "@@ -101,8 +101,11 @@ public boolean isProtected() {\n      * @param document\n      */\n     public Element toXml(Document document) {\n-\tElement elem = document.createElement(getElementName());\n-        elem.setAttribute(DECLARINGNODETYPE_ATTRIBUTE, getDeclaringNodeType().getName());\n+        Element elem = document.createElement(getElementName());\n+        NodeType dnt = getDeclaringNodeType();\n+        if (dnt != null) {\n+            elem.setAttribute(DECLARINGNODETYPE_ATTRIBUTE, dnt.getName());\n+        }\n         elem.setAttribute(NAME_ATTRIBUTE, getName());\n         elem.setAttribute(AUTOCREATED_ATTRIBUTE, Boolean.toString(isAutoCreated()));\n         elem.setAttribute(MANDATORY_ATTRIBUTE, Boolean.toString(isMandatory()));",
                "additions": 5,
                "raw_url": "https://github.com/apache/jackrabbit/raw/ca0e663482e98fb755f9c2b55d19070cefd94246/jcr-server/server/src/java/org/apache/jackrabbit/webdav/jcr/nodetype/ItemDefinitionImpl.java",
                "status": "modified",
                "changes": 7,
                "deletions": 2,
                "sha": "29e7a6562ddbe41ac582d49e621f1e442bd1f7f0",
                "blob_url": "https://github.com/apache/jackrabbit/blob/ca0e663482e98fb755f9c2b55d19070cefd94246/jcr-server/server/src/java/org/apache/jackrabbit/webdav/jcr/nodetype/ItemDefinitionImpl.java",
                "filename": "jcr-server/server/src/java/org/apache/jackrabbit/webdav/jcr/nodetype/ItemDefinitionImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jcr-server/server/src/java/org/apache/jackrabbit/webdav/jcr/nodetype/ItemDefinitionImpl.java?ref=ca0e663482e98fb755f9c2b55d19070cefd94246"
            }
        ],
        "bug_id": "jackrabbit_109",
        "parent": "https://github.com/apache/jackrabbit/commit/fa5dcb3bc3e23246d45d99a59cb83fa14f15e95c",
        "message": "JCR-346: Jcr-Server: ItemDefinitionImpl.toXml throws NPE for the root\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@385459 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/f8957a704cd301c5707292108df2b1920568efde",
        "file": [
            {
                "patch": "@@ -50,7 +50,7 @@\n     private PersistenceManagerConfig pmc;\n \n     /**\n-     * Workspace search index configuration.\n+     * Workspace search index configuration. Can be <code>null</code>.\n      */\n     private SearchConfig sc;\n \n@@ -79,7 +79,9 @@\n      */\n     public void init() throws ConfigurationException {\n         fsc.init();\n-        sc.init();\n+        if (sc != null) {\n+            sc.init();\n+        }\n     }\n \n     /**",
                "additions": 4,
                "raw_url": "https://github.com/apache/jackrabbit/raw/f8957a704cd301c5707292108df2b1920568efde/src/java/org/apache/jackrabbit/core/config/WorkspaceConfig.java",
                "status": "modified",
                "changes": 6,
                "deletions": 2,
                "sha": "e216a1d1fd2143f72a65810ea80f09961a116cbb",
                "blob_url": "https://github.com/apache/jackrabbit/blob/f8957a704cd301c5707292108df2b1920568efde/src/java/org/apache/jackrabbit/core/config/WorkspaceConfig.java",
                "filename": "src/java/org/apache/jackrabbit/core/config/WorkspaceConfig.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/src/java/org/apache/jackrabbit/core/config/WorkspaceConfig.java?ref=f8957a704cd301c5707292108df2b1920568efde"
            }
        ],
        "bug_id": "jackrabbit_110",
        "parent": "https://github.com/apache/jackrabbit/commit/0647faf8d8dc2d52ba182c5436575337f8c28eb8",
        "message": "Fixed NPE in WorkspaceConfig.init() when SearchConfig is not available. (JCR-71)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@157916 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/a94e7a22c29e32ec348eace5e2f05b1bc8bc8d15",
        "file": [
            {
                "patch": "@@ -309,6 +309,8 @@ private void checkBundleConsistency(NodeId id, NodePropBundle bundle,\n                             log.error(message);\n                             missingChildren.add(entry);\n                         }\n+                    } else {\n+                        return;\n                     }\n                 } else {\n                     NodeId cp = childBundle.getParentId();\n@@ -333,6 +335,8 @@ private void checkBundleConsistency(NodeId id, NodePropBundle bundle,\n                                     log.error(message);\n                                 }\n                             }\n+                        } else {\n+                            return;\n                         }\n                     }\n                 }\n@@ -376,6 +380,8 @@ private void checkBundleConsistency(NodeId id, NodePropBundle bundle,\n                                 modifications.add(bundle);\n                             }\n                         }\n+                    } else {\n+                        return;\n                     }\n                 } else {\n                     boolean found = false;\n@@ -410,6 +416,8 @@ private void checkBundleConsistency(NodeId id, NodePropBundle bundle,\n                                         + \"'\");\n                                 modifications.add(parentBundle);\n                             }\n+                        } else {\n+                            return;\n                         }\n                     }\n ",
                "additions": 8,
                "raw_url": "https://github.com/apache/jackrabbit/raw/a94e7a22c29e32ec348eace5e2f05b1bc8bc8d15/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/ConsistencyCheckerImpl.java",
                "status": "modified",
                "changes": 8,
                "deletions": 0,
                "sha": "2afaffbb56e62ab5c3829df006b941569b903330",
                "blob_url": "https://github.com/apache/jackrabbit/blob/a94e7a22c29e32ec348eace5e2f05b1bc8bc8d15/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/ConsistencyCheckerImpl.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/ConsistencyCheckerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/ConsistencyCheckerImpl.java?ref=a94e7a22c29e32ec348eace5e2f05b1bc8bc8d15"
            }
        ],
        "bug_id": "jackrabbit_111",
        "parent": "https://github.com/apache/jackrabbit/commit/e3651d9a88b13b48cfb84f5830d985d3cac4dae0",
        "message": "JCR-3265 guard against possible npe's due to double checking: if the bundle is no longer there we don't need to continue to check it\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1350207 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/85a4a70e209e493b64bdd2e78401974098196816",
        "file": [
            {
                "patch": "@@ -16,6 +16,7 @@\n  */\n package org.apache.jackrabbit.core.version;\n \n+import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Collection;\n import java.util.List;\n@@ -692,6 +693,15 @@ public void externalUpdate(ChangeLog changes, List<EventState> events,\n         esc.setUserData(userData);\n \n         sharedStateMgr.externalUpdate(changes, esc);\n+\n+        Collection<InternalVersionItem> items =\n+            new ArrayList<InternalVersionItem>();\n+        for (Map.Entry<ItemId, InternalVersionItem> entry : versionItems.entrySet()) {\n+            if (changes.has(entry.getKey())) {\n+                items.add(entry.getValue());\n+            }\n+        }\n+        itemsUpdated(items);\n     }\n \n     //--------------------------------------------------------< inner classes >",
                "additions": 10,
                "raw_url": "https://github.com/apache/jackrabbit/raw/85a4a70e209e493b64bdd2e78401974098196816/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerImpl.java",
                "status": "modified",
                "changes": 10,
                "deletions": 0,
                "sha": "152f67d3b9d2c5c0a2b941a4b5c0cb211967be2b",
                "blob_url": "https://github.com/apache/jackrabbit/blob/85a4a70e209e493b64bdd2e78401974098196816/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerImpl.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerImpl.java?ref=85a4a70e209e493b64bdd2e78401974098196816"
            }
        ],
        "bug_id": "jackrabbit_112",
        "parent": "https://github.com/apache/jackrabbit/commit/95f1c16c4bc864777702e1bcd86eb22883117bca",
        "message": "JCR-1440: NPE Thrown when two Cluster Nodes are hitting the same underlying database\n\nAutomatically update internal version history caches when receiving updates from other cluster nodes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@919461 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/d5341dad66e0f20e9ddee078b9585bc1aa157a7c",
        "file": [
            {
                "patch": "@@ -52,10 +52,6 @@ public DB2FileSystem() {\n         // preset some attributes to reasonable defaults\n         schema = \"db2\";\n         driver = \"com.ibm.db2.jcc.DB2Driver\";\n-        schemaObjectPrefix = \"\";\n-        user = \"\";\n-        password = \"\";\n-        initialized = false;\n     }\n \n     //-----------------------------------------< DatabaseFileSystem overrides >",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/d5341dad66e0f20e9ddee078b9585bc1aa157a7c/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/fs/db/DB2FileSystem.java",
                "status": "modified",
                "changes": 4,
                "deletions": 4,
                "sha": "5b0742356da3ee30d81b919be0effd1ed15fc42f",
                "blob_url": "https://github.com/apache/jackrabbit/blob/d5341dad66e0f20e9ddee078b9585bc1aa157a7c/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/fs/db/DB2FileSystem.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/fs/db/DB2FileSystem.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/fs/db/DB2FileSystem.java?ref=d5341dad66e0f20e9ddee078b9585bc1aa157a7c"
            },
            {
                "patch": "@@ -55,7 +55,7 @@\n     public static final String TABLE_SPACE_VARIABLE = \"${tableSpace}\";\n \n     /** the MS SQL table space to use */\n-    protected String tableSpace;\n+    protected String tableSpace = \"\";\n \n     /**\n      * Returns the configured MS SQL table space.\n@@ -84,11 +84,6 @@ public MSSqlFileSystem() {\n         // preset some attributes to reasonable defaults\n         schema = \"mssql\";\n         driver = \"com.microsoft.sqlserver.jdbc.SQLServerDriver\";\n-        schemaObjectPrefix = \"\";\n-        user = \"\";\n-        password = \"\";\n-        tableSpace = null;\n-        initialized = false;\n     }\n \n    protected String createSchemaSql(String sql) {",
                "additions": 1,
                "raw_url": "https://github.com/apache/jackrabbit/raw/d5341dad66e0f20e9ddee078b9585bc1aa157a7c/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/fs/db/MSSqlFileSystem.java",
                "status": "modified",
                "changes": 7,
                "deletions": 6,
                "sha": "e6a79a395e6f47435a8601272592869536ab88da",
                "blob_url": "https://github.com/apache/jackrabbit/blob/d5341dad66e0f20e9ddee078b9585bc1aa157a7c/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/fs/db/MSSqlFileSystem.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/fs/db/MSSqlFileSystem.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/fs/db/MSSqlFileSystem.java?ref=d5341dad66e0f20e9ddee078b9585bc1aa157a7c"
            }
        ],
        "bug_id": "jackrabbit_113",
        "parent": "https://github.com/apache/jackrabbit/commit/b161b6b322dd41c7694236e381dda35ef1234937",
        "message": "JCR-2223 MSSqlFileSystem - JNDI & several configuration issues\n\nApplied patch:\n* Use null values for user and password such that JNDI configuration does not require a username/password in the repository descriptor.\n* Set tableSpace default to the empty string to prevent NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@800715 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/5234d5accc5cf52e594682593d40168afaa1aaee",
        "file": [
            {
                "patch": "@@ -18,32 +18,32 @@\n  */\n package org.apache.jackrabbit.rmi.xml;\n \n-import java.io.UnsupportedEncodingException;\n-\n import javax.jcr.RepositoryException;\n \n import junit.framework.TestCase;\n \n import org.apache.jackrabbit.rmi.xml.ImportContentHandler;\n-import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.AttributesImpl;\n \n public class ImportContentHandlerTest extends TestCase {\n \n-    public void testImportContentHandler() throws RepositoryException, SAXException {\n+    public void testImportContentHandler() throws Exception {\n         // fail test if handler cannot be set up\n         DummyImportContentHandler ch = new DummyImportContentHandler();\n \n         // these may throw SAXException\n         ch.startDocument();\n-        ch.startElement(null, \"sample\", \"sample\", null);\n-        ch.endElement(null, \"sample\", \"sample\");\n+        ch.startPrefixMapping(\"foo\", \"http://example.com/ns/foo\");\n+        ch.startElement(\n+                \"http://example.com/ns/foo\", \"sample\", \"foo:sample\",\n+                new AttributesImpl());\n+        ch.endElement(\"http://example.com/ns/foo\", \"sample\", \"foo:sample\");\n+        ch.endPrefixMapping(\"foo\");\n         ch.endDocument();\n \n-        byte[] xml = ch.getXML();\n-        assertNotNull(\"Serialized XML is null\", xml);\n-        assertTrue(\"Serialized XML is empty\", xml.length > 0);\n-\n-        // for the moment we don't actually care for the concrete contents\n+        String xml = new String(ch.getXML(), \"UTF-8\");\n+        assertTrue(xml.contains(\n+                \"<foo:sample xmlns:foo=\\\"http://example.com/ns/foo\\\"/>\"));\n     }\n \n     private static class DummyImportContentHandler extends ImportContentHandler {",
                "additions": 11,
                "raw_url": "https://github.com/apache/jackrabbit/raw/5234d5accc5cf52e594682593d40168afaa1aaee/jackrabbit-jcr-rmi/src/test/java/org/apache/jackrabbit/rmi/xml/ImportContentHandlerTest.java",
                "status": "modified",
                "changes": 22,
                "deletions": 11,
                "sha": "f74e41ad51f293ae109710cb7c36a8dd6c269eec",
                "blob_url": "https://github.com/apache/jackrabbit/blob/5234d5accc5cf52e594682593d40168afaa1aaee/jackrabbit-jcr-rmi/src/test/java/org/apache/jackrabbit/rmi/xml/ImportContentHandlerTest.java",
                "filename": "jackrabbit-jcr-rmi/src/test/java/org/apache/jackrabbit/rmi/xml/ImportContentHandlerTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr-rmi/src/test/java/org/apache/jackrabbit/rmi/xml/ImportContentHandlerTest.java?ref=5234d5accc5cf52e594682593d40168afaa1aaee"
            }
        ],
        "bug_id": "jackrabbit_114",
        "parent": "https://github.com/apache/jackrabbit/commit/a5e73c05166943ad412973bbd1c4fae9f073ea98",
        "message": "JCR-1343: Replace use of Xerces by JAXP to implement SAX DocumentHandler\r\n    - Improved test case, previous one was throwing an NPE\r\n      because of the null attributes argument to startElement()\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@615950 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/236ea1d08f890522facdad2e293ee453ead5d103",
        "file": [
            {
                "patch": "@@ -90,30 +90,6 @@\n  */\n public interface RemoteAdapterFactory {\n \n-    /**\n-     * Returns the RMI port to use.\n-     *\n-     * @return RMI port number\n-     * @since 1.3\n-     */\n-    int getPort();\n-\n-    /**\n-     * Returns the RMI client socket factory to use.\n-     *\n-     * @return RMI client socket factory\n-     * @since 1.3\n-     */\n-    RMIClientSocketFactory getClientSocketFactory(); \n-\n-    /**\n-     * Returns the RMI server socket factory to use.\n-     *\n-     * @return RMI server socket factory\n-     * @since 1.3\n-     */\n-    RMIServerSocketFactory getServerSocketFactory();\n-\n     /**\n      * Returns a remote adapter for the given local repository.\n      *",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/236ea1d08f890522facdad2e293ee453ead5d103/jackrabbit-jcr-rmi/src/main/java/org/apache/jackrabbit/rmi/server/RemoteAdapterFactory.java",
                "status": "modified",
                "changes": 24,
                "deletions": 24,
                "sha": "6e4a0a5572639ad76e3445b73ddae3b9c299da93",
                "blob_url": "https://github.com/apache/jackrabbit/blob/236ea1d08f890522facdad2e293ee453ead5d103/jackrabbit-jcr-rmi/src/main/java/org/apache/jackrabbit/rmi/server/RemoteAdapterFactory.java",
                "filename": "jackrabbit-jcr-rmi/src/main/java/org/apache/jackrabbit/rmi/server/RemoteAdapterFactory.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr-rmi/src/main/java/org/apache/jackrabbit/rmi/server/RemoteAdapterFactory.java?ref=236ea1d08f890522facdad2e293ee453ead5d103"
            },
            {
                "patch": "@@ -103,12 +103,6 @@\n     /** The buffer size of iterators created by this factory. */\n     private int bufferSize = DEFAULT_BUFFER_SIZE;\n \n-    private int port = 0;\n-\n-    private RMIClientSocketFactory clientSocketFactory = null;\n-\n-    private RMIServerSocketFactory serverSocketFactory = null;\n-\n     /**\n      * Returns the iterator buffer size.\n      *\n@@ -127,68 +121,6 @@ public void setBufferSize(int bufferSize) {\n         this.bufferSize = bufferSize;\n     }\n \n-    /**\n-     * Returns the RMI port to use.\n-     *\n-     * @return RMI port number\n-     * @since 1.3\n-     */\n-    public int getPort() {\n-        return port;\n-    }\n-\n-    /**\n-     * Sets the RMI port to use.\n-     *\n-     * @param port RMI port number\n-     * @since 1.3\n-     */\n-    public void setPort(int port) {\n-        this.port = port;\n-    }\n-\n-    /**\n-     * Returns the RMI client socket factory to use.\n-     *\n-     * @return RMI client socket factory\n-     * @since 1.3\n-     */\n-    public RMIClientSocketFactory getClientSocketFactory() {\n-        return clientSocketFactory;\n-    }\n-\n-    /**\n-     * Sets the RMI client socket factory to use.\n-     *\n-     * @param factory RMI client socket factory,\n-     *                or <code>null</code> to use the default\n-     * @since 1.3\n-     */\n-    public void setClientSocketFactory(RMIClientSocketFactory factory) {\n-        clientSocketFactory = factory;\n-    }\n-\n-    /**\n-     * Returns the RMI server socket factory to use.\n-     *\n-     * @return RMI server socket factory\n-     * @since 1.3\n-     */\n-    public RMIServerSocketFactory getServerSocketFactory() {\n-        return serverSocketFactory;\n-    }\n-\n-    /**\n-     * Sets the RMI server socket factory to use.\n-     *\n-     * @param factory RMI server socket factory,\n-     *                or <code>null</code> to use the default\n-     * @since 1.3\n-     */\n-    public void setServerSocketFactory(RMIServerSocketFactory factory) {\n-        serverSocketFactory = factory;\n-    }\n-\n     /**\n      * Creates a {@link ServerRepository ServerRepository} instance.\n      * {@inheritDoc}",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/236ea1d08f890522facdad2e293ee453ead5d103/jackrabbit-jcr-rmi/src/main/java/org/apache/jackrabbit/rmi/server/ServerAdapterFactory.java",
                "status": "modified",
                "changes": 68,
                "deletions": 68,
                "sha": "8f56b970ba4e4c90c2e866f2fb1e8189c3726fbb",
                "blob_url": "https://github.com/apache/jackrabbit/blob/236ea1d08f890522facdad2e293ee453ead5d103/jackrabbit-jcr-rmi/src/main/java/org/apache/jackrabbit/rmi/server/ServerAdapterFactory.java",
                "filename": "jackrabbit-jcr-rmi/src/main/java/org/apache/jackrabbit/rmi/server/ServerAdapterFactory.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr-rmi/src/main/java/org/apache/jackrabbit/rmi/server/ServerAdapterFactory.java?ref=236ea1d08f890522facdad2e293ee453ead5d103"
            },
            {
                "patch": "@@ -68,9 +68,6 @@\n      */\n     protected ServerObject(RemoteAdapterFactory factory)\n             throws RemoteException {\n-        super(factory.getPort(),\n-                factory.getClientSocketFactory(),\n-                factory.getServerSocketFactory());\n         this.factory = factory;\n     }\n ",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/236ea1d08f890522facdad2e293ee453ead5d103/jackrabbit-jcr-rmi/src/main/java/org/apache/jackrabbit/rmi/server/ServerObject.java",
                "status": "modified",
                "changes": 3,
                "deletions": 3,
                "sha": "2ca9eab7030902a8b96f8a6fa9b476061bc4a5a0",
                "blob_url": "https://github.com/apache/jackrabbit/blob/236ea1d08f890522facdad2e293ee453ead5d103/jackrabbit-jcr-rmi/src/main/java/org/apache/jackrabbit/rmi/server/ServerObject.java",
                "filename": "jackrabbit-jcr-rmi/src/main/java/org/apache/jackrabbit/rmi/server/ServerObject.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr-rmi/src/main/java/org/apache/jackrabbit/rmi/server/ServerObject.java?ref=236ea1d08f890522facdad2e293ee453ead5d103"
            }
        ],
        "bug_id": "jackrabbit_115",
        "parent": "https://github.com/apache/jackrabbit/commit/e29fe370a450ff6e2332a25f8d8c5680eb6f1a99",
        "message": "JCR-781: Reverted revision 526707 as I'm not confident enough that the default behaviour avoids NPEs in all environments. Let's try an alternative solution...\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@529906 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    },
    {
        "commit": "https://github.com/apache/jackrabbit/commit/9b9beb7f3a6970f234a637d127f820055b828053",
        "file": [
            {
                "patch": "@@ -290,6 +290,32 @@ public boolean hasVersion(Name versionName) {\n      * {@inheritDoc}\n      */\n     public InternalVersion getVersion(NodeId id) {\n+        InternalVersion v = getCachedVersion(id);\n+\n+        // If the version was not found, our cache may not have been\n+        // synchronized with updates from another cluster node.  Reload the history\n+        // to be sure we have the latest updates and try again.\n+        if (v == null) {\n+            try {\n+                reload();\n+            } catch (RepositoryException e) {\n+\n+                // We should add the checked exception to this method definition\n+                // so we don't need to wrap it.\n+                // Avoiding it for now to limit impact of this fix.\n+                throw new RuntimeException(e);\n+            }\n+            v = getCachedVersion(id);\n+        }\n+\n+        return v;\n+    }\n+\n+    /**\n+     * Returns the version from cache, or <code>null</code> if it is not\n+     * present.\n+     */\n+    private InternalVersion getCachedVersion(NodeId id) {\n         InternalVersion v = versionCache.get(id);\n         if (v == null) {\n             for (Name versionName : nameCache.keySet()) {",
                "additions": 26,
                "raw_url": "https://github.com/apache/jackrabbit/raw/9b9beb7f3a6970f234a637d127f820055b828053/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java",
                "status": "modified",
                "changes": 26,
                "deletions": 0,
                "sha": "3e9f5a266cbd589af12e30ff3054a1403752a13d",
                "blob_url": "https://github.com/apache/jackrabbit/blob/9b9beb7f3a6970f234a637d127f820055b828053/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java?ref=9b9beb7f3a6970f234a637d127f820055b828053"
            }
        ],
        "bug_id": "jackrabbit_116",
        "parent": "https://github.com/apache/jackrabbit/commit/c41e81997a91f21839c63ba4a8faf8d068054dfb",
        "message": "JCR-1440: NPE Thrown when two Cluster Nodes are hitting the same underlying database\n\nPatch by Ryan Brush\n\nThis needs more work (the solution reminds me of the double checked-locking antipattern), but at least it solves the most pressing issue and does not seem to cause any notable risk to other use cases.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@911856 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "jackrabbit"
    }
]