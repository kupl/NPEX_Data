[{"commit": "https://github.com/apache/tuscany-sca-2.x/commit/69e6cdce5174f978fcdd2ebd2ea1aeadf6e08432", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/e1f9f789665127a40424d145e9775cb2b5f966cd", "message": "Fix NPE as the autowire is Boolean and the value can be null. The autoboxing will throw NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@1383128 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_1", "file": [{"additions": 5, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/69e6cdce5174f978fcdd2ebd2ea1aeadf6e08432/modules/core/src/main/java/org/apache/tuscany/sca/core/runtime/impl/EndpointReferenceBinderImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/69e6cdce5174f978fcdd2ebd2ea1aeadf6e08432/modules/core/src/main/java/org/apache/tuscany/sca/core/runtime/impl/EndpointReferenceBinderImpl.java", "sha": "5118571e1faf2d6cf9f91522792f83c98ce36fad", "changes": 9, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/core/src/main/java/org/apache/tuscany/sca/core/runtime/impl/EndpointReferenceBinderImpl.java?ref=69e6cdce5174f978fcdd2ebd2ea1aeadf6e08432", "patch": "@@ -495,14 +495,15 @@ private void selectForwardEndpoint(EndpointReference endpointReference, List<End\n             } \n             \n             // TUSCANY-4069 if no binding specified on reference then use service binding.sca if that exists \n-            if (endpointReference.getBinding() == null && endpointReference.getReference().getAutowire() == true){\n-                for (Endpoint endpoint : matchedEndpoints){\n-                    if (endpoint.getBinding() instanceof SCABinding){\n+            if (endpointReference.getBinding() == null && Boolean.TRUE.equals(endpointReference.getReference()\n+                .getAutowire())) {\n+                for (Endpoint endpoint : matchedEndpoints) {\n+                    if (endpoint.getBinding() instanceof SCABinding) {\n                         matchedEndpoint = endpoint;\n                         break;\n                     }\n                 }\n-            } \n+            }\n \n             if (matchedEndpoint == null) {\n                 // just take the first matched endpoint from the list", "filename": "modules/core/src/main/java/org/apache/tuscany/sca/core/runtime/impl/EndpointReferenceBinderImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/ce19e3339b3aa0440d0a30148846ab7e5c4c8cff", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/fc2fb5c0bc2fd983bab30f7655ed3b3fba5f94bc", "message": "Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@802271 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_2", "file": [{"additions": 2, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/ce19e3339b3aa0440d0a30148846ab7e5c4c8cff/modules/interface-java-jaxws/src/test/java/org/apache/tuscany/sca/interfacedef/java/jaxws/JAXWSJavaInterfaceProcessorTestCase.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/ce19e3339b3aa0440d0a30148846ab7e5c4c8cff/modules/interface-java-jaxws/src/test/java/org/apache/tuscany/sca/interfacedef/java/jaxws/JAXWSJavaInterfaceProcessorTestCase.java", "sha": "1d34dd167973896c6e4f480c2f2f862bac5f7c38", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/interface-java-jaxws/src/test/java/org/apache/tuscany/sca/interfacedef/java/jaxws/JAXWSJavaInterfaceProcessorTestCase.java?ref=ce19e3339b3aa0440d0a30148846ab7e5c4c8cff", "patch": "@@ -27,6 +27,7 @@\n import javax.jws.soap.SOAPBinding;\n import javax.xml.namespace.QName;\n \n+import org.apache.tuscany.sca.core.DefaultExtensionPointRegistry;\n import org.apache.tuscany.sca.databinding.DataBindingExtensionPoint;\n import org.apache.tuscany.sca.databinding.DefaultDataBindingExtensionPoint;\n import org.apache.tuscany.sca.databinding.jaxb.DefaultXMLAdapterExtensionPoint;\n@@ -49,7 +50,7 @@\n \n     @Before\n     public void setUp() throws Exception {\n-        DataBindingExtensionPoint db = new DefaultDataBindingExtensionPoint();\n+        DataBindingExtensionPoint db = new DefaultDataBindingExtensionPoint(new DefaultExtensionPointRegistry());\n         XMLAdapterExtensionPoint xa = new DefaultXMLAdapterExtensionPoint();\n         interfaceProcessor = new JAXWSJavaInterfaceProcessor(db, new JAXWSFaultExceptionMapper(db, xa), xa);\n     }", "filename": "modules/interface-java-jaxws/src/test/java/org/apache/tuscany/sca/interfacedef/java/jaxws/JAXWSJavaInterfaceProcessorTestCase.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/f77cbf71718a8890315c454bb50faffdef6da255", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/29ba9934a39ba9dd2bc46b65fc03a688dcbfccaa", "message": "Fix NPE which I think was just causing noise in the logs in the case of a 1-way operation, as we were hitting NPE in the response path but never needed to send a response anyway.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@1151643 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_3", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/f77cbf71718a8890315c454bb50faffdef6da255/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/provider/AbstractMessageProcessor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/f77cbf71718a8890315c454bb50faffdef6da255/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/provider/AbstractMessageProcessor.java", "sha": "4569c9548f90801e85042d394f301482f365bee6", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/provider/AbstractMessageProcessor.java?ref=f77cbf71718a8890315c454bb50faffdef6da255", "patch": "@@ -70,9 +70,9 @@ public String getOperationName(Message message) {\n      */\n     public void setOperationName(String operationName, Message message) {\n         try {\n-\n-            message.setStringProperty(operationPropertyName, operationName);\n-\n+            if (message != null) {\n+                message.setStringProperty(operationPropertyName, operationName);\n+            }\n         } catch (JMSException e) {\n             throw new JMSBindingException(\"Exception setting the operation name on message\", e);\n         }", "filename": "modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/provider/AbstractMessageProcessor.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/204a6d9bf552ed3262c651875f662446503ec947", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/0ba29ca2ca4b36ae7b81686c334e81129aa88560", "message": "Fixed NPE with non-hierarchical URLs like the ones used with EJB bindings. Fixed NPE when wiring to services of a component of type implementation:composite when the composite is not fully resolved.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@658926 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_4", "file": [{"additions": 17, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/204a6d9bf552ed3262c651875f662446503ec947/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/BaseWireBuilderImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/204a6d9bf552ed3262c651875f662446503ec947/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/BaseWireBuilderImpl.java", "sha": "518ac767fbd90483d645b53acd3588d6cb5860cd", "changes": 33, "status": "modified", "deletions": 16, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/BaseWireBuilderImpl.java?ref=204a6d9bf552ed3262c651875f662446503ec947", "patch": "@@ -518,22 +518,23 @@ private void connectCompositeReferences(Composite composite, Map<String, Compone\n                 // user might have put a local target name in the uri so get\n                 // the path part and see if it refers to a target we know about\n                 // - if it does the reference binding will be matched with a service binding\n-                // - if it doesn't it is assumed to be an external reference \n-                uri = URI.create(uri).getPath();\n-                \n-                if (uri.startsWith(\"/\")) {\n-                    uri = uri.substring(1);\n-                }\n-                                               \n-                // Resolve the target component and service\n-                ComponentService targetComponentService = componentServices.get(uri);\n-                Component targetComponent;\n-                \n-                int s = uri.indexOf('/');\n-                if (s == -1) {\n-                    targetComponent = components.get(uri);\n-                } else {\n-                    targetComponent = components.get(uri.substring(0, s));\n+                // - if it doesn't it is assumed to be an external reference\n+                Component targetComponent = null;\n+                ComponentService targetComponentService = null;\n+                String path = URI.create(uri).getPath();\n+                if (path != null) {\n+                    if (path.startsWith(\"/\")) {\n+                        path = path.substring(1);\n+                    }\n+                                                   \n+                    // Resolve the target component and service\n+                    targetComponentService = componentServices.get(path);\n+                    int s = path.indexOf('/');\n+                    if (s == -1) {\n+                        targetComponent = components.get(path);\n+                    } else {\n+                        targetComponent = components.get(path.substring(0, s));\n+                    }\n                 }\n \n                 // if the path of the binding URI matches a component in the ", "filename": "modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/BaseWireBuilderImpl.java"}, {"additions": 5, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/204a6d9bf552ed3262c651875f662446503ec947/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/EndpointBuilderImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/204a6d9bf552ed3262c651875f662446503ec947/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/EndpointBuilderImpl.java", "sha": "f53e50ca12672b9ea5c35366315e14b3bba9ef20", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/EndpointBuilderImpl.java?ref=204a6d9bf552ed3262c651875f662446503ec947", "patch": "@@ -20,6 +20,7 @@\n package org.apache.tuscany.sca.assembly.builder.impl;\n \n import org.apache.tuscany.sca.assembly.Binding;\n+import org.apache.tuscany.sca.assembly.ComponentService;\n import org.apache.tuscany.sca.assembly.CompositeService;\n import org.apache.tuscany.sca.assembly.Endpoint;\n import org.apache.tuscany.sca.assembly.builder.EndpointBuilder;\n@@ -69,7 +70,10 @@ public void build(Endpoint endpoint) {\n         if (endpoint.getTargetComponentService().getService() instanceof CompositeService) {\n             CompositeService compositeService = (CompositeService) endpoint.getTargetComponentService().getService();\n             // Find the promoted component service\n-            endpoint.setTargetComponentService(ServiceConfigurationUtil.getPromotedComponentService(compositeService));\n+            ComponentService promotedComponentService = ServiceConfigurationUtil.getPromotedComponentService(compositeService);\n+            if (promotedComponentService != null && !promotedComponentService.isUnresolved()) {\n+                endpoint.setTargetComponentService(promotedComponentService);\n+            }\n         }\n         \n         try  {", "filename": "modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/EndpointBuilderImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/175684a85ead630ba33fbff68c0039fafb975b8f", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/2199f0ce9ddc83151fe6d12c827e606c02c2b5f5", "message": "Fix NPE with widget sample\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@1346827 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_5", "file": [{"additions": 2, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/175684a85ead630ba33fbff68c0039fafb975b8f/modules/implementation-widget-runtime/src/main/java/org/apache/tuscany/sca/implementation/widget/provider/WidgetImplementationInvoker.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/175684a85ead630ba33fbff68c0039fafb975b8f/modules/implementation-widget-runtime/src/main/java/org/apache/tuscany/sca/implementation/widget/provider/WidgetImplementationInvoker.java", "sha": "b92c35aa8db49ca45708b49c7fc975fcd28a481f", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/implementation-widget-runtime/src/main/java/org/apache/tuscany/sca/implementation/widget/provider/WidgetImplementationInvoker.java?ref=175684a85ead630ba33fbff68c0039fafb975b8f", "patch": "@@ -56,7 +56,8 @@\n     public Message invoke(Message msg) {\n         \n         // Get the resource id from the request message\n-        String id = (String)((Object[])msg.getBody())[0];\n+    \t\n+        String id = msg.getBody() == null ? \"\" : (String)((Object[])msg.getBody())[0];\n         try {\n             \n             if (id.length() == 0) {", "filename": "modules/implementation-widget-runtime/src/main/java/org/apache/tuscany/sca/implementation/widget/provider/WidgetImplementationInvoker.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/9f412e6a54ab4183a2446210c4a857c0014db754", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/8af62f66f3ecd6b037dbdff9957e18fc082d872c", "message": "Update with some guards to avoid NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@1182279 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_6", "file": [{"additions": 11, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/9f412e6a54ab4183a2446210c4a857c0014db754/modules/binding-ws-runtime-jaxws/src/main/java/org/apache/tuscany/sca/binding/ws/jaxws/JAXWSBindingInvoker.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/9f412e6a54ab4183a2446210c4a857c0014db754/modules/binding-ws-runtime-jaxws/src/main/java/org/apache/tuscany/sca/binding/ws/jaxws/JAXWSBindingInvoker.java", "sha": "0f37b1adb0f3c6f420df63e3a7347b3d19e04236", "changes": 19, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-ws-runtime-jaxws/src/main/java/org/apache/tuscany/sca/binding/ws/jaxws/JAXWSBindingInvoker.java?ref=9f412e6a54ab4183a2446210c4a857c0014db754", "patch": "@@ -114,16 +114,19 @@ public JAXWSBindingInvoker(Operation operation,\n     protected Dispatch<SOAPMessage> createDispatch(WebServiceBinding wsBinding) {\n         URL wsdlLocation = null;\n         try {\n-            wsdlLocation = new URL(wsBinding.getGeneratedWSDLDocument().getDocumentBaseURI());\n+            if (wsBinding.getGeneratedWSDLDocument() != null && wsBinding.getGeneratedWSDLDocument().getDocumentBaseURI() != null) {\n+                wsdlLocation = new URL(wsBinding.getGeneratedWSDLDocument().getDocumentBaseURI());\n+            }\n         } catch (Exception e) {\n-            try {\n-                if (wsBinding.getUserSpecifiedWSDLDefinition().getLocation() != null) {\n-                    wsdlLocation = wsBinding.getUserSpecifiedWSDLDefinition().getLocation().toURL();\n-                }\n-            } catch (MalformedURLException e1) {\n-                // TODO Auto-generated catch block\n-                e1.printStackTrace();\n+            // ignore and try getting the location from the other places \n+        }\n+        try {\n+            if (wsBinding.getUserSpecifiedWSDLDefinition().getLocation() != null) {\n+                wsdlLocation = wsBinding.getUserSpecifiedWSDLDefinition().getLocation().toURL();\n             }\n+        } catch (MalformedURLException e1) {\n+            // TODO Auto-generated catch block\n+            e1.printStackTrace();\n         }\n \n         QName serviceName = null;", "filename": "modules/binding-ws-runtime-jaxws/src/main/java/org/apache/tuscany/sca/binding/ws/jaxws/JAXWSBindingInvoker.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/e320db1bd1408d509a4d77e62375b92481bad5e0", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/6d83bebee276eee0c70134469ef729592baed3bb", "message": "Avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@1180781 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_7", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e320db1bd1408d509a4d77e62375b92481bad5e0/modules/binding-rest-runtime/src/main/java/org/apache/tuscany/sca/binding/rest/provider/DataBindingJAXRSProvider.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e320db1bd1408d509a4d77e62375b92481bad5e0/modules/binding-rest-runtime/src/main/java/org/apache/tuscany/sca/binding/rest/provider/DataBindingJAXRSProvider.java", "sha": "7d6d1adbec7596587871170da5e98f7cbc18e7ad", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-rest-runtime/src/main/java/org/apache/tuscany/sca/binding/rest/provider/DataBindingJAXRSProvider.java?ref=e320db1bd1408d509a4d77e62375b92481bad5e0", "patch": "@@ -61,6 +61,9 @@ public DataBindingJAXRSProvider(ExtensionPointRegistry registry) {\n     }\n \n     protected <A extends Annotation> A getAnnotation(Annotation[] annotations, Class<A> type) {\n+        if(annotations == null) {\n+            return null;\n+        }\n         for (Annotation a : annotations) {\n             if (a.annotationType() == type) {\n                 return type.cast(a);", "filename": "modules/binding-rest-runtime/src/main/java/org/apache/tuscany/sca/binding/rest/provider/DataBindingJAXRSProvider.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/1a151d9e9ef63493483cb23df3b74bbcf3725024", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/79125ff90014e973b85a599c652837a6ecb94692", "message": "Avoid NPE when no port location defined\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@1173122 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_8", "file": [{"additions": 9, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/1a151d9e9ef63493483cb23df3b74bbcf3725024/modules/binding-ws-runtime-axis2/src/main/java/org/apache/tuscany/sca/binding/ws/axis2/provider/Axis2EngineIntegration.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/1a151d9e9ef63493483cb23df3b74bbcf3725024/modules/binding-ws-runtime-axis2/src/main/java/org/apache/tuscany/sca/binding/ws/axis2/provider/Axis2EngineIntegration.java", "sha": "244135c90024c098f92b1e3667c63061585bcd35", "changes": 15, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-ws-runtime-axis2/src/main/java/org/apache/tuscany/sca/binding/ws/axis2/provider/Axis2EngineIntegration.java?ref=1a151d9e9ef63493483cb23df3b74bbcf3725024", "patch": "@@ -531,12 +531,15 @@ private static Operation getOperation(AxisOperation axisOp,WebServiceBinding wsB\n     //========================================================= \n     \n     public static String getPortAddress(Port port) {\n-        Object ext = port.getExtensibilityElements().get(0);\n-        if (ext instanceof SOAPAddress) {\n-            return ((SOAPAddress)ext).getLocationURI();\n-        }\n-        if (ext instanceof SOAP12Address) {\n-            return ((SOAP12Address)ext).getLocationURI();\n+        List<?> es = port.getExtensibilityElements();\n+        if (es != null && es.size() > 0) {\n+            Object ext = es.get(0);\n+            if (ext instanceof SOAPAddress) {\n+                return ((SOAPAddress)ext).getLocationURI();\n+            }\n+            if (ext instanceof SOAP12Address) {\n+                return ((SOAP12Address)ext).getLocationURI();\n+            }\n         }\n         return null;\n     }", "filename": "modules/binding-ws-runtime-axis2/src/main/java/org/apache/tuscany/sca/binding/ws/axis2/provider/Axis2EngineIntegration.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/9a5b823cb1c6ae4ae7b1544f1e3fc4da3877bb1c", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/c22adc033cc44df81eee856041d24d294d6d6c98", "message": "Fix NPE when the domainURI is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@1140682 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_9", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/9a5b823cb1c6ae4ae7b1544f1e3fc4da3877bb1c/modules/sca-api/src/main/java/org/oasisopen/sca/client/impl/SCAClientFactoryFinderImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/9a5b823cb1c6ae4ae7b1544f1e3fc4da3877bb1c/modules/sca-api/src/main/java/org/oasisopen/sca/client/impl/SCAClientFactoryFinderImpl.java", "sha": "5549091262966278b77ff9e57f85034f11d50dd9", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/sca-api/src/main/java/org/oasisopen/sca/client/impl/SCAClientFactoryFinderImpl.java?ref=9a5b823cb1c6ae4ae7b1544f1e3fc4da3877bb1c", "patch": "@@ -260,7 +260,7 @@ private static SCAClientFactory instantiateSCAClientFactoryClass(\n         \n         try {\n             Constructor<? extends SCAClientFactory> URIConstructor = \n-            \tfactoryImplClass.getConstructor(domainURI.getClass());\n+            \tfactoryImplClass.getConstructor(URI.class);\n             SCAClientFactory provider = \n                URIConstructor.newInstance( domainURI );\n             return provider;", "filename": "modules/sca-api/src/main/java/org/oasisopen/sca/client/impl/SCAClientFactoryFinderImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/785ad6c401234d481e3fff29393d951e2c976625", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/283bd8057286a3afc5c907a4dd5696b36587aa22", "message": "Fix NPE when stopping a remote composite\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@1132533 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_10", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/785ad6c401234d481e3fff29393d951e2c976625/modules/domain-node/src/main/java/org/apache/tuscany/sca/impl/DeployedComposite.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/785ad6c401234d481e3fff29393d951e2c976625/modules/domain-node/src/main/java/org/apache/tuscany/sca/impl/DeployedComposite.java", "sha": "7eba965b1a03df830f215dd3e9d9766c35b1023f", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/domain-node/src/main/java/org/apache/tuscany/sca/impl/DeployedComposite.java?ref=785ad6c401234d481e3fff29393d951e2c976625", "patch": "@@ -86,6 +86,7 @@ protected void build() throws ValidationException, ActivationException, Contribu\n         // TODO: Ideally deployer.build would set the name and uri to what this needs\n         builtComposite.setName(composite.getName());\n         builtComposite.setURI(composite.getURI());\n+        builtComposite.setContributionURI(composite.getContributionURI());\n         monitor.analyzeProblems();\n \n         compositeContext = new CompositeContext(extensionPointRegistry, ", "filename": "modules/domain-node/src/main/java/org/apache/tuscany/sca/impl/DeployedComposite.java"}, {"additions": 4, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/785ad6c401234d481e3fff29393d951e2c976625/modules/domain-node/src/main/java/org/apache/tuscany/sca/impl/NodeImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/785ad6c401234d481e3fff29393d951e2c976625/modules/domain-node/src/main/java/org/apache/tuscany/sca/impl/NodeImpl.java", "sha": "1b4f0a103f651dd5333daf6d44b0df945c8a4735", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/domain-node/src/main/java/org/apache/tuscany/sca/impl/NodeImpl.java?ref=785ad6c401234d481e3fff29393d951e2c976625", "patch": "@@ -261,7 +261,10 @@ public void startComposite(String memberName, String contributionURI, String com\n     public void stopComposite(String contributionURI, String compositeURI) throws ActivationException {\n         String key = contributionURI+\"/\"+compositeURI;\n         DeployedComposite dc = startedComposites.remove(key);\n-        if (dc == null) {\n+        if (dc != null) {\n+            dc.stop();\n+            stoppedComposites.put(key, dc);\n+        } else {\n             String member = domainRegistry.getRunningMember(contributionURI, compositeURI);\n             if (member == null) {\n                 throw new IllegalStateException(\"composite not started: \" + compositeURI);\n@@ -272,8 +275,6 @@ public void stopComposite(String contributionURI, String compositeURI) throws Ac\n                 throw new ActivationException(response);\n             }\n         }\n-        dc.stop();\n-        stoppedComposites.put(key, dc);\n     }\n \n     public String getDomainName() {", "filename": "modules/domain-node/src/main/java/org/apache/tuscany/sca/impl/NodeImpl.java"}, {"additions": 29, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/785ad6c401234d481e3fff29393d951e2c976625/modules/domain-node/src/main/java/org/apache/tuscany/sca/impl/ServiceHelper.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/785ad6c401234d481e3fff29393d951e2c976625/modules/domain-node/src/main/java/org/apache/tuscany/sca/impl/ServiceHelper.java", "sha": "fc46018904f13b3994cb202ace745fa1f9e9e9af", "changes": 29, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/domain-node/src/main/java/org/apache/tuscany/sca/impl/ServiceHelper.java?ref=785ad6c401234d481e3fff29393d951e2c976625", "patch": "@@ -19,8 +19,13 @@\n \r\n package org.apache.tuscany.sca.impl;\r\n \r\n+import java.net.MalformedURLException;\r\n+import java.net.URL;\r\n+import java.net.URLClassLoader;\r\n import java.util.List;\r\n \r\n+import javax.xml.bind.JAXBElement;\r\n+\r\n import org.apache.tuscany.sca.assembly.AssemblyFactory;\r\n import org.apache.tuscany.sca.assembly.Component;\r\n import org.apache.tuscany.sca.assembly.ComponentReference;\r\n@@ -42,6 +47,7 @@\n import org.apache.tuscany.sca.interfacedef.java.JavaInterface;\r\n import org.apache.tuscany.sca.interfacedef.java.JavaInterfaceFactory;\r\n import org.apache.tuscany.sca.runtime.DomainRegistry;\r\n+import org.apache.tuscany.sca.runtime.ContributionDescription;\r\n import org.apache.tuscany.sca.runtime.RuntimeComponent;\r\n import org.apache.tuscany.sca.runtime.RuntimeComponentReference;\r\n import org.apache.tuscany.sca.runtime.RuntimeEndpointReference;\r\n@@ -89,6 +95,14 @@\n             new CompositeContext(extensionPointRegistry, domainRegistry, null, null, null,\r\n                                  deployer.getSystemDefinitions());\r\n \r\n+        if (serviceInterface == null) {\r\n+            try {\r\n+                serviceInterface = (Class<T>)findInterface(endpoint, domainRegistry);\r\n+            } catch (Exception e) {\r\n+                throw new RuntimeException(e);\r\n+            }\r\n+        }\r\n+\r\n         RuntimeEndpointReference epr;\r\n         try {\r\n             epr =\r\n@@ -170,6 +184,8 @@ private static InterfaceContract getInterfaceContract(JavaInterfaceFactory javaI\n             // The interface is not assignable from the interface contract\r\n             interfaceContract = javaInterfaceFactory.createJavaInterfaceContract();\r\n             JavaInterface callInterface = javaInterfaceFactory.createJavaInterface(businessInterface);\r\n+            callInterface.setRemotable(true);\r\n+            callInterface.resetDataBinding(JAXBElement.class.getName());\r\n             interfaceContract.setInterface(callInterface);\r\n             if (callInterface.getCallbackClass() != null) {\r\n                 interfaceContract.setCallbackInterface(javaInterfaceFactory.createJavaInterface(callInterface\r\n@@ -179,4 +195,17 @@ private static InterfaceContract getInterfaceContract(JavaInterfaceFactory javaI\n \r\n         return interfaceContract;\r\n     }\r\n+\r\n+    private static Class<?> findInterface(Endpoint endpoint, DomainRegistry domainRegistry) throws MalformedURLException, ClassNotFoundException {\r\n+        Interface iface = endpoint.getService().getInterfaceContract().getInterface();\r\n+        if (iface instanceof JavaInterface) {\r\n+            String curi = domainRegistry.getContainingCompositesContributionURI(endpoint.getComponent().getName());\r\n+            if (curi != null) {\r\n+                ContributionDescription ic = domainRegistry.getInstalledContribution(curi);\r\n+                ClassLoader cl = new URLClassLoader(new URL[]{new URL(ic.getURL())});\r\n+                return cl.loadClass(((JavaInterface)iface).getName());\r\n+            }\r\n+        }\r\n+        return null;\r\n+    }\r\n }\r", "filename": "modules/domain-node/src/main/java/org/apache/tuscany/sca/impl/ServiceHelper.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/920740088b328ef06b9d5f4221e6f88a4cade180", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/acbea324f70d9c805116671ee3513e59e6385910", "message": "Guard against NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@1124611 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_11", "file": [{"additions": 5, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/920740088b328ef06b9d5f4221e6f88a4cade180/modules/domain-hazelcast/src/main/java/org/apache/tuscany/sca/registry/hazelcast/HazelcastDomainRegistry.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/920740088b328ef06b9d5f4221e6f88a4cade180/modules/domain-hazelcast/src/main/java/org/apache/tuscany/sca/registry/hazelcast/HazelcastDomainRegistry.java", "sha": "c0687cd13f64a50b70ebf7e232cf809219852b89", "changes": 8, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/domain-hazelcast/src/main/java/org/apache/tuscany/sca/registry/hazelcast/HazelcastDomainRegistry.java?ref=920740088b328ef06b9d5f4221e6f88a4cade180", "patch": "@@ -669,9 +669,11 @@ public String getLocalMember() {\n     public String getRunningMember(String contributionURI, String compositeURI) {\n         for (String m : runningCompositeOwners.keySet()) {\n             Map<String, List<String>> rcs = runningCompositeOwners.get(m);\n-            for (String curi : rcs.keySet()) {\n-                if (rcs.get(curi).contains(compositeURI)) {\n-                    return m;\n+            if (rcs != null) {\n+                for (String curi : rcs.keySet()) {\n+                    if (rcs.get(curi).contains(compositeURI)) {\n+                        return m;\n+                    }\n                 }\n             }\n         }", "filename": "modules/domain-hazelcast/src/main/java/org/apache/tuscany/sca/registry/hazelcast/HazelcastDomainRegistry.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/9cf7c8a304dc160550677122f4562a0c647ffff2", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/e6c009bde6e32718877d240507385c1e60ba9d2e", "message": "Fix potential NPE when bpel is unresolved\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@1035207 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_12", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/9cf7c8a304dc160550677122f4562a0c647ffff2/modules/implementation-bpel/src/main/java/org/apache/tuscany/sca/implementation/bpel/xml/BPELDocumentModelResolver.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/9cf7c8a304dc160550677122f4562a0c647ffff2/modules/implementation-bpel/src/main/java/org/apache/tuscany/sca/implementation/bpel/xml/BPELDocumentModelResolver.java", "sha": "2821130ca7463e8bd51609b1ba5b253810c0658d", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/implementation-bpel/src/main/java/org/apache/tuscany/sca/implementation/bpel/xml/BPELDocumentModelResolver.java?ref=9cf7c8a304dc160550677122f4562a0c647ffff2", "patch": "@@ -118,7 +118,7 @@ public Object removeModel(Object resolved, ProcessorContext context) {\n         // Not found, Lookup a definition for the given namespace, within contribution       \n         resolved = (BPELProcessDefinition) map.get(qname);\n         \n-        if(resolved.isUnresolved()) {\n+        if(resolved != null && resolved.isUnresolved()) {\n         \ttry {\n         \t\tresolve(resolved, context);\n         \t} catch(Exception e) {", "filename": "modules/implementation-bpel/src/main/java/org/apache/tuscany/sca/implementation/bpel/xml/BPELDocumentModelResolver.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/750c438d725fb13d1b99d1ea35ebe9624cc437a5", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/435088e8a3006215905a14ce14f7e80845a5c965", "message": "TUSCANY-3732 Fix potential NPE in JAXWSServiceBindingProvider\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@1024307 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_13", "file": [{"additions": 2, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/750c438d725fb13d1b99d1ea35ebe9624cc437a5/modules/binding-ws-runtime-jaxws-ri/src/main/java/org/apache/tuscany/sca/binding/ws/jaxws/ri/JAXWSServiceBindingProvider.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/750c438d725fb13d1b99d1ea35ebe9624cc437a5/modules/binding-ws-runtime-jaxws-ri/src/main/java/org/apache/tuscany/sca/binding/ws/jaxws/ri/JAXWSServiceBindingProvider.java", "sha": "91d4bca7c032526723441253ca13c4664b005c59", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-ws-runtime-jaxws-ri/src/main/java/org/apache/tuscany/sca/binding/ws/jaxws/ri/JAXWSServiceBindingProvider.java?ref=750c438d725fb13d1b99d1ea35ebe9624cc437a5", "patch": "@@ -112,8 +112,9 @@ public void start() {\n                                     wsBinding.getPort().getName());\n         properties.put(Endpoint.WSDL_PORT, portName);\n                       \n+        QName bindingServiceName = wsBinding.getServiceName() == null ? wsBinding.getService().getQName() : wsBinding.getServiceName();\n         QName serviceName = new QName(targetNamespace,\n-                                      wsBinding.getServiceName().getLocalPart()); \n+                                     bindingServiceName.getLocalPart()); \n         properties.put(Endpoint.WSDL_SERVICE, serviceName);\n \n         wsEndpoint.setMetadata(metadata);", "filename": "modules/binding-ws-runtime-jaxws-ri/src/main/java/org/apache/tuscany/sca/binding/ws/jaxws/ri/JAXWSServiceBindingProvider.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/31b00553f707b143139d9271cf7c4d5386380978", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/9925c573a44be2c4acf8a62f36670a1e16531475", "message": "Potential NPE in NamespaceContextImpl.getPrefixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@956962 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_14", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/31b00553f707b143139d9271cf7c4d5386380978/modules/common-xml/src/main/java/org/apache/tuscany/sca/common/xml/stax/reader/NamespaceContextImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/31b00553f707b143139d9271cf7c4d5386380978/modules/common-xml/src/main/java/org/apache/tuscany/sca/common/xml/stax/reader/NamespaceContextImpl.java", "sha": "d88f298a6c5edaf41bda0ad54685c6c2754126bd", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/common-xml/src/main/java/org/apache/tuscany/sca/common/xml/stax/reader/NamespaceContextImpl.java?ref=31b00553f707b143139d9271cf7c4d5386380978", "patch": "@@ -82,7 +82,7 @@ public Iterator getPrefixes(String nsURI) {\n             }\n         }\n         final Iterator<String> currentIterator = prefixList.iterator();\n-        final Iterator parentIterator = parent != null ? null : parent.getPrefixes(nsURI);\n+        final Iterator parentIterator = parent == null ? null : parent.getPrefixes(nsURI);\n         return new Iterator() {\n \n             public boolean hasNext() {", "filename": "modules/common-xml/src/main/java/org/apache/tuscany/sca/common/xml/stax/reader/NamespaceContextImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/f761634d820d1350641e2bc6cc88b1b4b73b19fb", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/40419745e318b9060d10829ef790f4b7e6a0f1b9", "message": "Avoid NPE if reg uri is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@941244 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_15", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/f761634d820d1350641e2bc6cc88b1b4b73b19fb/modules/core-spi/src/main/java/org/apache/tuscany/sca/runtime/ExtensibleDomainRegistryFactory.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/f761634d820d1350641e2bc6cc88b1b4b73b19fb/modules/core-spi/src/main/java/org/apache/tuscany/sca/runtime/ExtensibleDomainRegistryFactory.java", "sha": "d1d0fb2b290e1631a8d9cf2e455fbe65aa129a0d", "changes": 3, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/core-spi/src/main/java/org/apache/tuscany/sca/runtime/ExtensibleDomainRegistryFactory.java?ref=f761634d820d1350641e2bc6cc88b1b4b73b19fb", "patch": "@@ -79,8 +79,7 @@ public EndpointRegistry getEndpointRegistry(String endpointRegistryURI, String d\n             }\n         }\n \n-        URI uri = URI.create(endpointRegistryURI);\n-        String scheme = uri.getScheme();\n+        String scheme = endpointRegistryURI == null ? null : URI.create(endpointRegistryURI).getScheme();\n         if (scheme == null) {\n             \n             // See if there is a previously created registry for that domain", "filename": "modules/core-spi/src/main/java/org/apache/tuscany/sca/runtime/ExtensibleDomainRegistryFactory.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/916dca2d2e7a8d6d23bb9ddd648109e8ec2d39db", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/d405eaf502161e18a64190f896298974197ec214", "message": "Avoid NPE when no network is found\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@937974 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_16", "file": [{"additions": 5, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/916dca2d2e7a8d6d23bb9ddd648109e8ec2d39db/modules/endpoint-hazelcast/src/main/java/org/apache/tuscany/sca/endpoint/hazelcast/RegistryConfig.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/916dca2d2e7a8d6d23bb9ddd648109e8ec2d39db/modules/endpoint-hazelcast/src/main/java/org/apache/tuscany/sca/endpoint/hazelcast/RegistryConfig.java", "sha": "c6b1ccaa21c18e9a53153638e49a197dca376c75", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/endpoint-hazelcast/src/main/java/org/apache/tuscany/sca/endpoint/hazelcast/RegistryConfig.java?ref=916dca2d2e7a8d6d23bb9ddd648109e8ec2d39db", "patch": "@@ -48,7 +48,7 @@\n  */\r\n public class RegistryConfig {\r\n     \r\n-    private String bindAddress;\r\n+    private String bindAddress = \"*\";\r\n     private int bindPort = 14820;\r\n     private boolean multicastDisabled = false;\r\n     private String multicastAddress = \"224.5.12.10\";\r\n@@ -66,7 +66,10 @@ private void init(Properties properties) {\n    \r\n         String bindValue = properties.getProperty(\"bind\");\r\n         if (bindValue == null) {\r\n-            this.bindAddress = chooseLocalAddress().getHostAddress();\r\n+            InetAddress addr = chooseLocalAddress();\r\n+            if (addr != null) {\r\n+                this.bindAddress = addr.getHostAddress();\r\n+            }\r\n         } else {\r\n             if (bindValue.indexOf(\":\") == -1) {\r\n                 this.bindAddress = bindValue;\r", "filename": "modules/endpoint-hazelcast/src/main/java/org/apache/tuscany/sca/endpoint/hazelcast/RegistryConfig.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/298bfca71e71a25a98d01f732e734f3870ca03d3", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/f699589f413a7dd85733ee21298ea8c616f0246f", "message": "Initialize the properties to avoid any NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@934332 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_17", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/298bfca71e71a25a98d01f732e734f3870ca03d3/modules/node-api/src/main/java/org/apache/tuscany/sca/node/NodeFactory.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/298bfca71e71a25a98d01f732e734f3870ca03d3/modules/node-api/src/main/java/org/apache/tuscany/sca/node/NodeFactory.java", "sha": "a44eecc52c5cca2e8ece510bb87b311180e5e6a7", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/node-api/src/main/java/org/apache/tuscany/sca/node/NodeFactory.java?ref=298bfca71e71a25a98d01f732e734f3870ca03d3", "patch": "@@ -196,7 +196,7 @@ public static NodeFactory newInstance(Map<String, Map<String, String>> attribute\n         return nodeFactory;\n     }\n     \n-    protected Properties properties;\n+    protected Properties properties = new Properties();\n \n     public static NodeFactory newInstance(Properties properties) {\n         NodeFactory nodeFactory = null;", "filename": "modules/node-api/src/main/java/org/apache/tuscany/sca/node/NodeFactory.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/bb6ac82fe632fc442054dc93cf3c33e06607598c", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/b3893f476db56498078ae7dd24ae0794231f6102", "message": "Avoid NPE if source contract is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@887868 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_18", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/bb6ac82fe632fc442054dc93cf3c33e06607598c/modules/core-databinding/src/main/java/org/apache/tuscany/sca/core/databinding/wire/DataBindingRuntimeWireProcessor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/bb6ac82fe632fc442054dc93cf3c33e06607598c/modules/core-databinding/src/main/java/org/apache/tuscany/sca/core/databinding/wire/DataBindingRuntimeWireProcessor.java", "sha": "27c25e7f718134231c2b31d47ea8da6e08164deb", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/core-databinding/src/main/java/org/apache/tuscany/sca/core/databinding/wire/DataBindingRuntimeWireProcessor.java?ref=bb6ac82fe632fc442054dc93cf3c33e06607598c", "patch": "@@ -190,7 +190,7 @@ public void process(RuntimeEndpointReference endpointReference) {\n             targetContract = sourceContract;\n         }\n \n-        if (!sourceContract.getInterface().isRemotable()) {\n+        if (sourceContract == null || !sourceContract.getInterface().isRemotable()) {\n             return;\n         }\n         List<InvocationChain> chains = endpointReference.getInvocationChains();", "filename": "modules/core-databinding/src/main/java/org/apache/tuscany/sca/core/databinding/wire/DataBindingRuntimeWireProcessor.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/2a118de1b1dbfdd21788a5ba931b27aa2729a126", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/ebef5c946a762c555834e8f80d575e0a489d165e", "message": "Create a monitor to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@835235 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_19", "file": [{"additions": 4, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/2a118de1b1dbfdd21788a5ba931b27aa2729a126/modules/binding-ws-wsdlgen/src/main/java/org/apache/tuscany/sca/binding/ws/wsdlgen/BindingWSDLGenerator.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/2a118de1b1dbfdd21788a5ba931b27aa2729a126/modules/binding-ws-wsdlgen/src/main/java/org/apache/tuscany/sca/binding/ws/wsdlgen/BindingWSDLGenerator.java", "sha": "a63ac662b7fab8e7328d7c1f34cc4db4b4c297ef", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-ws-wsdlgen/src/main/java/org/apache/tuscany/sca/binding/ws/wsdlgen/BindingWSDLGenerator.java?ref=2a118de1b1dbfdd21788a5ba931b27aa2729a126", "patch": "@@ -32,6 +32,7 @@\n \n import org.apache.tuscany.sca.assembly.Component;\n import org.apache.tuscany.sca.assembly.Contract;\n+import org.apache.tuscany.sca.assembly.builder.BuilderContext;\n import org.apache.tuscany.sca.binding.ws.WebServiceBinding;\n import org.apache.tuscany.sca.contribution.resolver.ModelResolver;\n import org.apache.tuscany.sca.contribution.resolver.ResolverExtension;\n@@ -157,6 +158,9 @@ public static void generateWSDL(Component component,\n                                     WebServiceBinding wsBinding,\n                                     ExtensionPointRegistry extensionPoints,\n                                     Monitor monitor) {\n+        if (monitor == null) {\n+            monitor = new BuilderContext(extensionPoints).getMonitor();\n+        }\n         try {\n             createWSDLDocument(component, contract, wsBinding, extensionPoints, monitor);\n         } catch (WSDLGenerationException ex) {", "filename": "modules/binding-ws-wsdlgen/src/main/java/org/apache/tuscany/sca/binding/ws/wsdlgen/BindingWSDLGenerator.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/f73bcc50d172e9d0301525b87dbdeccf8e6938a0", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/aed89db4d2c306b7f04668b5db56b24e1ab0daf3", "message": "Fix NPE due to typo in if test\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@822756 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_20", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/f73bcc50d172e9d0301525b87dbdeccf8e6938a0/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/EndpointReferenceBuilderImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/f73bcc50d172e9d0301525b87dbdeccf8e6938a0/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/EndpointReferenceBuilderImpl.java", "sha": "b37699580e0f1bf78a80ce256b3c42b103dee1c7", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/EndpointReferenceBuilderImpl.java?ref=f73bcc50d172e9d0301525b87dbdeccf8e6938a0", "patch": "@@ -98,7 +98,7 @@ public Problem runtimeBuild(EndpointReference endpointReference) {\n             \n             // still need to check that the callback endpoint is set correctly\n             if (hasCallback(endpointReference) &&\n-                endpointReference.getCallbackEndpoint() == null &&\n+                endpointReference.getCallbackEndpoint() != null &&\n                 endpointReference.getCallbackEndpoint().isUnresolved() == true ){\n                 problem = selectCallbackEndpoint(endpointReference,\n                                                  endpointReference.getReference().getCallbackService().getEndpoints());", "filename": "modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/EndpointReferenceBuilderImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/f045bf848981ec6195782116a43b0ee11141f015", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/850b9e98586b506391a69088e7d0776d7fc3a0f6", "message": "Avoid NPE in the wire processor\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@814561 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_21", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/f045bf848981ec6195782116a43b0ee11141f015/modules/implementation-java-runtime/src/main/java/org/apache/tuscany/sca/implementation/java/invocation/JavaCallbackRuntimeWireProcessor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/f045bf848981ec6195782116a43b0ee11141f015/modules/implementation-java-runtime/src/main/java/org/apache/tuscany/sca/implementation/java/invocation/JavaCallbackRuntimeWireProcessor.java", "sha": "785d89b67703002e75d2e6fb64db1f56877ec3be", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/implementation-java-runtime/src/main/java/org/apache/tuscany/sca/implementation/java/invocation/JavaCallbackRuntimeWireProcessor.java?ref=f045bf848981ec6195782116a43b0ee11141f015", "patch": "@@ -68,6 +68,9 @@ private void addCallbackInterfaceInterceptors(RuntimeWire wire) {\n             return;\n         }\n         RuntimeComponent component = (RuntimeComponent) wire.getEndpointReference().getComponent();\n+        if (component == null) {\n+            return;\n+        }\n         Implementation implementation = component.getImplementation();\n         if (!(implementation instanceof JavaImplementation)) {\n             return;", "filename": "modules/implementation-java-runtime/src/main/java/org/apache/tuscany/sca/implementation/java/invocation/JavaCallbackRuntimeWireProcessor.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/bbd5009c618134b19587438e60d9ba49e229114a", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/9e1aab3b4d8d30af2d6cb14336359c98ea643ee5", "message": "Fix NPE when contribution jar doesn't have a manifest\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@808928 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_22", "file": [{"additions": 8, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/bbd5009c618134b19587438e60d9ba49e229114a/modules/launcher/src/main/java/org/apache/tuscany/sca/launcher/LauncherMain.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/bbd5009c618134b19587438e60d9ba49e229114a/modules/launcher/src/main/java/org/apache/tuscany/sca/launcher/LauncherMain.java", "sha": "71e90bf010ff097b4762305c3d9e58b7041254fc", "changes": 10, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/launcher/src/main/java/org/apache/tuscany/sca/launcher/LauncherMain.java?ref=bbd5009c618134b19587438e60d9ba49e229114a", "patch": "@@ -37,6 +37,7 @@\n import java.util.Properties;\n import java.util.Set;\n import java.util.jar.JarFile;\n+import java.util.jar.Manifest;\n \n public class LauncherMain {\n     \n@@ -166,8 +167,13 @@ private static boolean firstArgJarHasManifestMainClass(Properties launcherProper\n             return false;\n         }\n         JarFile jar = new JarFile(f);\n-        String mfc = jar.getManifest().getMainAttributes().getValue(\"Main-Class\");\n-        return mfc != null && mfc.length() > 0;\n+        Manifest mf = jar.getManifest();\n+        if (mf != null) {\n+            String mfc = jar.getManifest().getMainAttributes().getValue(\"Main-Class\");\n+            return mfc != null && mfc.length() > 0;\n+        } else {\n+            return false;\n+        }\n     }\n     /**\n      * Gets the jars matching a config classpath property", "filename": "modules/launcher/src/main/java/org/apache/tuscany/sca/launcher/LauncherMain.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/8a172f88fa1dc3bebdf1db369254d4f8353f4b3d", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/809f6afefc95b79f0563adbbe91e759f9c01af9a", "message": "Guard against NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@807278 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_23", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/8a172f88fa1dc3bebdf1db369254d4f8353f4b3d/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/ComponentReferenceEndpointReferenceBuilderImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/8a172f88fa1dc3bebdf1db369254d4f8353f4b3d/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/ComponentReferenceEndpointReferenceBuilderImpl.java", "sha": "a2a10a21f5b2f775d9feb3d479ea30e80e016471", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/ComponentReferenceEndpointReferenceBuilderImpl.java?ref=8a172f88fa1dc3bebdf1db369254d4f8353f4b3d", "patch": "@@ -1183,7 +1183,7 @@ private void setSingleAutoWireTarget(ComponentReference reference) {\n         \t\t\turi = c + \"#service(\" + s + \")\";\n         \t\t}\n     \t\t\tfor (EndpointReference er : reference.getEndpointReferences()) {\n-    \t\t\t\tif (er.getTargetEndpoint().getURI().equals(uri)) {\n+    \t\t\t\tif (er.getTargetEndpoint() != null && uri.equals(er.getTargetEndpoint().getURI())) {\n     \t\t\t\t\treference.getEndpointReferences().clear();\n     \t\t\t\t\treference.getEndpointReferences().add(er);\n     \t\t\t\t\treturn;", "filename": "modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/ComponentReferenceEndpointReferenceBuilderImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/12d0477d9d25c009fe2e97a799788a20b79623e0", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/5c2d7a9625edfa363bf445f4bad2a0724426e74b", "message": "Add error check to give better than just NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@803064 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_24", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/12d0477d9d25c009fe2e97a799788a20b79623e0/modules/implementation-web-runtime/src/main/java/org/apache/tuscany/sca/implementation/web/runtime/jsp/ReferenceTag.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/12d0477d9d25c009fe2e97a799788a20b79623e0/modules/implementation-web-runtime/src/main/java/org/apache/tuscany/sca/implementation/web/runtime/jsp/ReferenceTag.java", "sha": "b4655e3d954694888939b4b04dcb1df40748e99b", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/implementation-web-runtime/src/main/java/org/apache/tuscany/sca/implementation/web/runtime/jsp/ReferenceTag.java?ref=12d0477d9d25c009fe2e97a799788a20b79623e0", "patch": "@@ -50,6 +50,9 @@ public int doEndTag() throws JspException {\n \n         ServletContext servletContext = pageContext.getServletContext();\n         RuntimeComponent component = (RuntimeComponent)servletContext.getAttribute(\"org.apache.tuscany.sca.implementation.web.RuntimeComponent\");\n+        if (component == null) {\n+            throw new JspException(\"No Web component found. Is there an <implementation.web> missing?\");\n+        }\n         \n         Class<?> typeClass;\n         try {", "filename": "modules/implementation-web-runtime/src/main/java/org/apache/tuscany/sca/implementation/web/runtime/jsp/ReferenceTag.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/8b26e9bdbe693d1e580e5a7580bcc31e46116ba4", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/ce19e3339b3aa0440d0a30148846ab7e5c4c8cff", "message": "Fix test cases to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@802296 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_25", "file": [{"additions": 4, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/8b26e9bdbe693d1e580e5a7580bcc31e46116ba4/modules/binding-ws-wsdlgen/src/test/java/org/apache/tuscany/sca/binding/ws/wsdlgen/BindingWSDLGeneratorTestCase.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/8b26e9bdbe693d1e580e5a7580bcc31e46116ba4/modules/binding-ws-wsdlgen/src/test/java/org/apache/tuscany/sca/binding/ws/wsdlgen/BindingWSDLGeneratorTestCase.java", "sha": "6e3538c47b88e2c065badad14e508bb03c437fda", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-ws-wsdlgen/src/test/java/org/apache/tuscany/sca/binding/ws/wsdlgen/BindingWSDLGeneratorTestCase.java?ref=8b26e9bdbe693d1e580e5a7580bcc31e46116ba4", "patch": "@@ -24,6 +24,7 @@\n \n import org.apache.tuscany.sca.core.DefaultExtensionPointRegistry;\n import org.apache.tuscany.sca.core.DefaultFactoryExtensionPoint;\n+import org.apache.tuscany.sca.core.ExtensionPointRegistry;\n import org.apache.tuscany.sca.core.databinding.processor.DataBindingJavaInterfaceProcessor;\n import org.apache.tuscany.sca.databinding.DefaultDataBindingExtensionPoint;\n import org.apache.tuscany.sca.interfacedef.InvalidInterfaceException;\n@@ -47,14 +48,15 @@\n public class BindingWSDLGeneratorTestCase extends TestCase {\n \n     public void testCreateWSDLInterfaceContract() throws InvalidInterfaceException {\n-        org.apache.tuscany.sca.core.FactoryExtensionPoint modelFactories = new DefaultFactoryExtensionPoint(new DefaultExtensionPointRegistry());\n+        ExtensionPointRegistry registry = new DefaultExtensionPointRegistry();\n+        org.apache.tuscany.sca.core.FactoryExtensionPoint modelFactories = new DefaultFactoryExtensionPoint(registry);\n         WSDLFactory wsdlFactory = modelFactories.getFactory(WSDLFactory.class);\n         XSDFactory xsdFactory = modelFactories.getFactory(XSDFactory.class);\n         DocumentBuilderFactory documentBuilderFactory = modelFactories.getFactory(DocumentBuilderFactory.class);\n         JavaInterfaceFactory factory = new DefaultJavaInterfaceFactory();\n         JavaInterfaceContract javaIC = factory.createJavaInterfaceContract();\n         JavaInterface iface = factory.createJavaInterface(HelloWorld.class);\n-        DefaultDataBindingExtensionPoint dataBindings = new DefaultDataBindingExtensionPoint();\n+        DefaultDataBindingExtensionPoint dataBindings = new DefaultDataBindingExtensionPoint(registry);\n         JAXWSFaultExceptionMapper faultExceptionMapper = new JAXWSFaultExceptionMapper(dataBindings, null);\n         new JAXWSJavaInterfaceProcessor(dataBindings, faultExceptionMapper, null).visitInterface(iface);\n         new DataBindingJavaInterfaceProcessor(dataBindings).visitInterface(iface);", "filename": "modules/binding-ws-wsdlgen/src/test/java/org/apache/tuscany/sca/binding/ws/wsdlgen/BindingWSDLGeneratorTestCase.java"}, {"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/8b26e9bdbe693d1e580e5a7580bcc31e46116ba4/modules/binding-ws-wsdlgen/src/test/java/org/apache/tuscany/sca/binding/ws/wsdlgen/Interface2WSDLGeneratorTestCase.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/8b26e9bdbe693d1e580e5a7580bcc31e46116ba4/modules/binding-ws-wsdlgen/src/test/java/org/apache/tuscany/sca/binding/ws/wsdlgen/Interface2WSDLGeneratorTestCase.java", "sha": "cb866f69a086156c66504e12e6f974c528c82520", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-ws-wsdlgen/src/test/java/org/apache/tuscany/sca/binding/ws/wsdlgen/Interface2WSDLGeneratorTestCase.java?ref=8b26e9bdbe693d1e580e5a7580bcc31e46116ba4", "patch": "@@ -51,7 +51,7 @@\n     public void testGenerate() throws Exception {\n         JavaInterfaceFactory iFactory = new DefaultJavaInterfaceFactory();\n         JavaInterface iface = iFactory.createJavaInterface(TestJavaInterface.class);\n-        DefaultDataBindingExtensionPoint dataBindings = new DefaultDataBindingExtensionPoint();\n+        DefaultDataBindingExtensionPoint dataBindings = new DefaultDataBindingExtensionPoint(new DefaultExtensionPointRegistry());\n         JAXWSFaultExceptionMapper faultExceptionMapper = new JAXWSFaultExceptionMapper(dataBindings, null);\n         new JAXWSJavaInterfaceProcessor(dataBindings, faultExceptionMapper, null).visitInterface(iface);\n         new DataBindingJavaInterfaceProcessor(dataBindings).visitInterface(iface);", "filename": "modules/binding-ws-wsdlgen/src/test/java/org/apache/tuscany/sca/binding/ws/wsdlgen/Interface2WSDLGeneratorTestCase.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/72aa0372cbe587ce9da64c57a4a02cf746e098be", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/88bf126b8f86579a40abf4de86e5d2cc011dd02f", "message": "Check null to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@799473 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_26", "file": [{"additions": 8, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/72aa0372cbe587ce9da64c57a4a02cf746e098be/modules/endpoint/src/main/java/org/apache/tuscany/sca/endpoint/impl/EndpointRegistryImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/72aa0372cbe587ce9da64c57a4a02cf746e098be/modules/endpoint/src/main/java/org/apache/tuscany/sca/endpoint/impl/EndpointRegistryImpl.java", "sha": "8e51068793ab1e0c153599efdfae8358798e7f71", "changes": 12, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/endpoint/src/main/java/org/apache/tuscany/sca/endpoint/impl/EndpointRegistryImpl.java?ref=72aa0372cbe587ce9da64c57a4a02cf746e098be", "patch": "@@ -200,12 +200,16 @@ public void start() {\n \n     public void stop() {\n         List<Endpoint> localEndpoints = endpoints.remove(this);\n-        for (Endpoint endpoint : localEndpoints) {\n-            removeEndpoint(endpoint);\n+        if (localEndpoints != null) {\n+            for (Endpoint endpoint : localEndpoints) {\n+                removeEndpoint(endpoint);\n+            }\n         }\n         List<EndpointReference> localEndpointReferences = endpointreferences.remove(this);\n-        for (EndpointReference endpointReference : localEndpointReferences) {\n-            removeEndpointReference(endpointReference);\n+        if (localEndpointReferences != null) {\n+            for (EndpointReference endpointReference : localEndpointReferences) {\n+                removeEndpointReference(endpointReference);\n+            }\n         }\n         listeners.clear();\n     }", "filename": "modules/endpoint/src/main/java/org/apache/tuscany/sca/endpoint/impl/EndpointRegistryImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/f6d908e8a84bf04acaa17926d24fba7d9510e12f", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/8937b569ab0d9a947f2b588d2d919f62aa59dfe0", "message": "Removing debug message to avoid NPE when response is FAULT\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@790622 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_27", "file": [{"additions": 2, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/f6d908e8a84bf04acaa17926d24fba7d9510e12f/modules/implementation-bpel-runtime/src/main/java/org/apache/tuscany/sca/implementation/bpel/ode/EmbeddedODEServer.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/f6d908e8a84bf04acaa17926d24fba7d9510e12f/modules/implementation-bpel-runtime/src/main/java/org/apache/tuscany/sca/implementation/bpel/ode/EmbeddedODEServer.java", "sha": "1069015963275666d0e59c3efd32ed90c5e462ff", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/implementation-bpel-runtime/src/main/java/org/apache/tuscany/sca/implementation/bpel/ode/EmbeddedODEServer.java?ref=f6d908e8a84bf04acaa17926d24fba7d9510e12f", "patch": "@@ -138,8 +138,9 @@ private File getDatabaseLocationAsFile() throws ODEInitializationException,\n     \t// TODO - provide a system property / environment variable to set the path to the DB\n     \t\n         URL dbLocation = getClass().getClassLoader().getResource(\"jpadb\");\n-        if (dbLocation == null)\n+        if (dbLocation == null) {\n             throw new ODEInitializationException(\"Couldn't find database in the classpath\");\n+        }\n         // Handle OSGI bundle case\n         if( dbLocation.getProtocol() == \"bundleresource\" ) {\n         \ttry {", "filename": "modules/implementation-bpel-runtime/src/main/java/org/apache/tuscany/sca/implementation/bpel/ode/EmbeddedODEServer.java"}, {"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/f6d908e8a84bf04acaa17926d24fba7d9510e12f/modules/implementation-bpel-runtime/src/main/java/org/apache/tuscany/sca/implementation/bpel/ode/provider/BPELInvoker.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/f6d908e8a84bf04acaa17926d24fba7d9510e12f/modules/implementation-bpel-runtime/src/main/java/org/apache/tuscany/sca/implementation/bpel/ode/provider/BPELInvoker.java", "sha": "2562d6b52b0aeac1292c43fb13803e6fdc821c82", "changes": 9, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/implementation-bpel-runtime/src/main/java/org/apache/tuscany/sca/implementation/bpel/ode/provider/BPELInvoker.java?ref=f6d908e8a84bf04acaa17926d24fba7d9510e12f", "patch": "@@ -158,13 +158,6 @@ public Object doTheWork(Object[] args) throws InvocationTargetException {\n \n             Status status = mex.getStatus();\n \n-            if (__log.isDebugEnabled()) {\n-                Element invocationResponse = mex.getResponse().getMessage();\n-                __log.debug(\">>>Invocation status:\" + status.name());\n-                __log.debug(\">>>Response:\\n\" + DOMUtils.domToString(invocationResponse));\n-                __log.debug(\">>>Response:\\n\" + DOMUtils.domToString(invocationResponse));\n-            } // end if\n-\n             switch (status) {\n             case FAULT:\n                 if (__log.isDebugEnabled())\n@@ -184,7 +177,7 @@ public Object doTheWork(Object[] args) throws InvocationTargetException {\n                     __log.debug(\"Failure response message: \" + mex.getFault());\n                 break;\n             default:\n-                throw new ODEInvocationException(\"FAILURE received from BPEL process : \" + mex.getFault());\n+                throw new ODEInvocationException(\"FAILURE received from BPEL process : \" + mex.getStatus() + \" - \" + mex.getFault());\n             } // end switch\n \n             txMgr.commit();", "filename": "modules/implementation-bpel-runtime/src/main/java/org/apache/tuscany/sca/implementation/bpel/ode/provider/BPELInvoker.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/96424c136f8fccd7ac2738c867bb85a03890c7e9", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/ed740e249943eaf6298b92b7bd7bf4336f471d8d", "message": "Avoid NPE penalty\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@774855 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_28", "file": [{"additions": 20, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/96424c136f8fccd7ac2738c867bb85a03890c7e9/modules/binding-sca/src/main/java/org/apache/tuscany/sca/binding/sca/provider/RuntimeSCAReferenceBindingProvider.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/96424c136f8fccd7ac2738c867bb85a03890c7e9/modules/binding-sca/src/main/java/org/apache/tuscany/sca/binding/sca/provider/RuntimeSCAReferenceBindingProvider.java", "sha": "9a14a27f0888b72633cb45b2382d8733f52a21a7", "changes": 36, "status": "modified", "deletions": 16, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-sca/src/main/java/org/apache/tuscany/sca/binding/sca/provider/RuntimeSCAReferenceBindingProvider.java?ref=96424c136f8fccd7ac2738c867bb85a03890c7e9", "patch": "@@ -6,15 +6,15 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n- * under the License.    \n+ * under the License.\n  */\n \n package org.apache.tuscany.sca.binding.sca.provider;\n@@ -41,13 +41,13 @@\n import org.apache.tuscany.sca.runtime.RuntimeWire;\n import org.oasisopen.sca.ServiceUnavailableException;\n \n-/** \n- * The sca reference binding provider mediates between the twin requirements of \n- * local sca bindings and remote sca bindings. In the local case is does \n- * very little. When the sca binding model is set as being remote (because a \n- * reference target can't be resolved in the current model) this binding will \n+/**\n+ * The sca reference binding provider mediates between the twin requirements of\n+ * local sca bindings and remote sca bindings. In the local case is does\n+ * very little. When the sca binding model is set as being remote (because a\n+ * reference target can't be resolved in the current model) this binding will\n  * try and create a remote connection to it\n- * \n+ *\n  * @version $Rev$ $Date$\n  */\n public class RuntimeSCAReferenceBindingProvider implements ReferenceBindingProvider {\n@@ -71,7 +71,7 @@ public RuntimeSCAReferenceBindingProvider(ExtensionPointRegistry extensionPoints\n         this.binding = binding;\n \n         // look to see if a distributed SCA binding implementation has\n-        // been included on the classpath. This will be needed by the \n+        // been included on the classpath. This will be needed by the\n         // provider itself to do it's thing\n         ProviderFactoryExtensionPoint factoryExtensionPoint =\n             extensionPoints.getExtensionPoint(ProviderFactoryExtensionPoint.class);\n@@ -89,10 +89,10 @@ public boolean isTargetRemote() {\n \n         // The decision is based on the results of the wiring process in the assembly model\n         // The SCA binding is used to represent unresolved reference targets, i.e. those\n-        // reference targets that need resolving at run time. We can tell by lookin if the \n-        // service to which this binding refers is resolved or not. \n+        // reference targets that need resolving at run time. We can tell by lookin if the\n+        // service to which this binding refers is resolved or not.\n         //\n-        // TODO - When a callback is in operation. A callback reference bindings sometimes has to \n+        // TODO - When a callback is in operation. A callback reference bindings sometimes has to\n         //        act as though there is a local wire and sometimes as if there is a remote wire\n         //        what are the implications of this here?\n \n@@ -112,9 +112,13 @@ public boolean isTargetRemote() {\n             // the case where the wire is specified by URI, e.g. callbacks or user specified bindings, and\n             // look at the provided URI to decide whether it is a local or remote case\n             try {\n-                URI uri = new URI(binding.getURI());\n-                if (uri.isAbsolute()) {\n-                    targetIsRemote = true;\n+                if (binding.getURI() != null) {\n+                    URI uri = new URI(binding.getURI());\n+                    if (uri.isAbsolute()) {\n+                        targetIsRemote = true;\n+                    } else {\n+                        targetIsRemote = false;\n+                    }\n                 } else {\n                     targetIsRemote = false;\n                 }", "filename": "modules/binding-sca/src/main/java/org/apache/tuscany/sca/binding/sca/provider/RuntimeSCAReferenceBindingProvider.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/1910c45960b03c9bcfa3dd66548a47db693b97b3", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/cd41abfbd0d27f6a96077507c33427dc0c2e30e0", "message": "Avoid NPE if the reference doesn't have a binding\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@758478 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_29", "file": [{"additions": 2, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/1910c45960b03c9bcfa3dd66548a47db693b97b3/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/CompositePolicyBuilderImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/1910c45960b03c9bcfa3dd66548a47db693b97b3/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/CompositePolicyBuilderImpl.java", "sha": "6f7f7af6717763184e5bd2d65113d3ec7fa70c60", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/CompositePolicyBuilderImpl.java?ref=1910c45960b03c9bcfa3dd66548a47db693b97b3", "patch": "@@ -337,7 +337,8 @@ protected void computePolicies(Composite composite, Definitions definitions, Mon\n                     // Find the corresponding binding in the componentType and inherit the intents/policySets\n                     if (componentReference.getReference() != null) {\n                         for (Binding binding : componentReference.getReference().getBindings()) {\n-                            if (isEqual(epr.getBinding().getName(), binding.getName()) && (binding instanceof PolicySubject)) {\n+                            if (epr.getBinding() != null && isEqual(epr.getBinding().getName(), binding.getName())\n+                                && (binding instanceof PolicySubject)) {\n                                 isMutualExclusive((PolicySubject)epr.getBinding(), (PolicySubject)binding);\n                                 // Inherit from componentType.reference.binding\n                                 inherit(epr, binding);", "filename": "modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/CompositePolicyBuilderImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/b4a14310af35df1318e1e6d01dc18fe4a461215f", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/ed59a63affa9ab132fcb99ccb072b39b12194023", "message": "Fix the NPE when callback is not present\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@756264 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_30", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/b4a14310af35df1318e1e6d01dc18fe4a461215f/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/ComponentServiceEndpointBuilderImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/b4a14310af35df1318e1e6d01dc18fe4a461215f/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/ComponentServiceEndpointBuilderImpl.java", "sha": "1dc7af226a1a1e86d8f4277a23fd3f15c834b822", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/ComponentServiceEndpointBuilderImpl.java?ref=b4a14310af35df1318e1e6d01dc18fe4a461215f", "patch": "@@ -138,7 +138,9 @@ private void processComponentServices(Composite composite) {\n                     endpoint.setComponent(endpointComponent);\n                     endpoint.setService(endpointService);\n                     endpoint.setBinding(binding);\n-                    endpoint.getCallbackEndpointReferences().addAll(callbackEndpointReferences);\n+                    if (callbackEndpointReferences != null) {\n+                        endpoint.getCallbackEndpointReferences().addAll(callbackEndpointReferences);\n+                    }\n                     endpoint.setUnresolved(false);\n                     service.getEndpoints().add(endpoint);\n                 }", "filename": "modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/ComponentServiceEndpointBuilderImpl.java"}, {"additions": 0, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/b4a14310af35df1318e1e6d01dc18fe4a461215f/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/impl/Endpoint2Impl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/b4a14310af35df1318e1e6d01dc18fe4a461215f/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/impl/Endpoint2Impl.java", "sha": "eb3b87dec0254521660afa5bd719b18bf7271f0b", "changes": 9, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/impl/Endpoint2Impl.java?ref=b4a14310af35df1318e1e6d01dc18fe4a461215f", "patch": "@@ -108,15 +108,6 @@ public void setInterfaceContract(InterfaceContract interfaceContract) {\n         return callbackEndpointReferences;\n     }\n     \n-    /**\n-     * Set the reference callback endpoint refefences\n-     * \n-     * @param callbackEndpoint the reference callback endpoint\n-     */\n-    public void setCallbackEndpointReferences(List<EndpointReference2> callbackEndpointReferences)\n-    {\n-        this.callbackEndpointReferences = callbackEndpointReferences;\n-    }\n /*\n     public String getURI() {\n         return uri;", "filename": "modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/impl/Endpoint2Impl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/1ad455e58d1c4466296e92931e814b02d1960f50", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/2d505cf36b0d25ca7a02c687d5380512628237f6", "message": "Avoid NPE if the extensibility-equinox bundle is not present\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@752314 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_31", "file": [{"additions": 8, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/1ad455e58d1c4466296e92931e814b02d1960f50/modules/node-launcher-equinox/src/main/java/org/apache/tuscany/sca/node/equinox/launcher/EquinoxHost.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/1ad455e58d1c4466296e92931e814b02d1960f50/modules/node-launcher-equinox/src/main/java/org/apache/tuscany/sca/node/equinox/launcher/EquinoxHost.java", "sha": "c1c15db1c738416fe00f912a230cb922adb3836a", "changes": 14, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/node-launcher-equinox/src/main/java/org/apache/tuscany/sca/node/equinox/launcher/EquinoxHost.java?ref=1ad455e58d1c4466296e92931e814b02d1960f50", "patch": "@@ -294,13 +294,15 @@ public BundleContext start() {\n             // Start the extensiblity and launcher bundles\n             String extensibilityBundleName = \"org.apache.tuscany.sca.extensibility.equinox\";\n             Bundle extensibilityBundle = allBundles.get(extensibilityBundleName);\n-            if ((extensibilityBundle.getState() & Bundle.ACTIVE) == 0) {\n-                if (logger.isLoggable(Level.FINE)) {\n-                    logger.fine(\"Starting bundle: \" + string(extensibilityBundle, false));\n+            if (extensibilityBundle != null) {\n+                if ((extensibilityBundle.getState() & Bundle.ACTIVE) == 0) {\n+                    if (logger.isLoggable(Level.FINE)) {\n+                        logger.fine(\"Starting bundle: \" + string(extensibilityBundle, false));\n+                    }\n+                    extensibilityBundle.start();\n+                } else if (logger.isLoggable(Level.FINE)) {\n+                    logger.fine(\"Bundle is already started: \" + string(extensibilityBundle, false));\n                 }\n-                extensibilityBundle.start();\n-            } else if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"Bundle is already started: \" + string(extensibilityBundle, false));\n             }\n             if ((launcherBundle.getState() & Bundle.ACTIVE) == 0) {\n                 if (logger.isLoggable(Level.FINE)) {", "filename": "modules/node-launcher-equinox/src/main/java/org/apache/tuscany/sca/node/equinox/launcher/EquinoxHost.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/9e71c4111a0515922c3a9b0cda898883fc4e7168", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/12a20e018f76f004d07546b5172a43afb81892fe", "message": "Avoid the NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@750340 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_32", "file": [{"additions": 4, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/9e71c4111a0515922c3a9b0cda898883fc4e7168/modules/node-impl/src/main/java/org/apache/tuscany/sca/node/impl/NodeImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/9e71c4111a0515922c3a9b0cda898883fc4e7168/modules/node-impl/src/main/java/org/apache/tuscany/sca/node/impl/NodeImpl.java", "sha": "8fa3b77ef4526b256cee1cc09d2d23968d4fbe36", "changes": 8, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/node-impl/src/main/java/org/apache/tuscany/sca/node/impl/NodeImpl.java?ref=9e71c4111a0515922c3a9b0cda898883fc4e7168", "patch": "@@ -38,9 +38,6 @@\n import javax.xml.namespace.QName;\n import javax.xml.stream.XMLInputFactory;\n import javax.xml.stream.XMLStreamReader;\n-import javax.xml.xpath.XPath;\n-import javax.xml.xpath.XPathExpression;\n-import javax.xml.xpath.XPathFactory;\n \n import org.apache.tuscany.sca.assembly.AssemblyFactory;\n import org.apache.tuscany.sca.assembly.Component;\n@@ -84,7 +81,6 @@\n import org.apache.tuscany.sca.node.Client;\n import org.apache.tuscany.sca.node.ContributionLocationHelper;\n import org.apache.tuscany.sca.node.Node;\n-import org.apache.tuscany.sca.policy.PolicySet;\n import org.apache.tuscany.sca.provider.DefinitionsProvider;\n import org.apache.tuscany.sca.provider.DefinitionsProviderException;\n import org.apache.tuscany.sca.provider.DefinitionsProviderExtensionPoint;\n@@ -567,7 +563,10 @@ private void configureNode(ConfiguredNodeImplementation configuration) throws Ex\n         // available\n         compositeActivator.setDomainComposite(tempComposite);\n         \n+        /*\n+        // The following line may return null, to be investigated\n         XPathFactory xPathFactory = modelFactories.getFactory(XPathFactory.class);\n+        \n         for (PolicySet policySet : systemDefinitions.getPolicySets()) {\n             if (policySet.getAppliesTo() != null) {\n                 XPath xpath = xPathFactory.newXPath();\n@@ -578,6 +577,7 @@ private void configureNode(ConfiguredNodeImplementation configuration) throws Ex\n                 // exp.evaluate(item, XPathConstants.BOOLEAN);\n             }\n         }\n+        */\n     }\n \n     public void start() {", "filename": "modules/node-impl/src/main/java/org/apache/tuscany/sca/node/impl/NodeImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/bd0b073ed3115eb1cc43a7bf930c4eff5fd93929", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/34ed9246deaf8711200b101a8739facbe8b43c3e", "message": "Fix NPE in finally after earlier exception.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@696399 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_33", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/bd0b073ed3115eb1cc43a7bf930c4eff5fd93929/modules/databinding-jaxb-axiom/src/main/java/org/apache/tuscany/sca/databinding/jaxb/axiom/OMElement2JAXB.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/bd0b073ed3115eb1cc43a7bf930c4eff5fd93929/modules/databinding-jaxb-axiom/src/main/java/org/apache/tuscany/sca/databinding/jaxb/axiom/OMElement2JAXB.java", "sha": "3753fd9d6475e2d991bcd41216c10197eacf556b", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/databinding-jaxb-axiom/src/main/java/org/apache/tuscany/sca/databinding/jaxb/axiom/OMElement2JAXB.java?ref=bd0b073ed3115eb1cc43a7bf930c4eff5fd93929", "patch": "@@ -62,7 +62,9 @@ public Object run() throws JAXBException, XMLStreamException {\n                         reader = source.getXMLStreamReaderWithoutCaching();\n                         result = unmarshaller.unmarshal(reader, JAXBContextHelper.getJavaType(context.getTargetDataType()));\n                     } finally {\n-                        reader.close();\n+                        if (reader != null) {\n+                            reader.close();\n+                        }\n                         JAXBContextHelper.releaseJAXBUnmarshaller(jaxbContext, unmarshaller);\n                     }\n                     return JAXBContextHelper.createReturnValue(jaxbContext, context.getTargetDataType(), result);", "filename": "modules/databinding-jaxb-axiom/src/main/java/org/apache/tuscany/sca/databinding/jaxb/axiom/OMElement2JAXB.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/b56e20d4da097fd8cc00a5c3011568918ad0c853", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/dda7244342e48778bddc1778efc3fe9e02b5a7fa", "message": "Fix NPE as now getServiceDiscoverer is non-static\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@691514 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_34", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/b56e20d4da097fd8cc00a5c3011568918ad0c853/modules/node-launcher-osgi/src/main/java/org/apache/tuscany/sca/node/osgi/launcher/FelixOSGiHost.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/b56e20d4da097fd8cc00a5c3011568918ad0c853/modules/node-launcher-osgi/src/main/java/org/apache/tuscany/sca/node/osgi/launcher/FelixOSGiHost.java", "sha": "4eeb706767532f4c7b5ceceae5c58175cc77fb6a", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/node-launcher-osgi/src/main/java/org/apache/tuscany/sca/node/osgi/launcher/FelixOSGiHost.java?ref=b56e20d4da097fd8cc00a5c3011568918ad0c853", "patch": "@@ -148,8 +148,10 @@ private ClassLoader getContextClassLoader(BundleContext bundleContext) {\n                 try {\n                     b.start();\n                     Class<?> discovererClass = b.loadClass(\"org.apache.tuscany.sca.extensibility.ServiceDiscovery\");\n+                    Method getInstance = discovererClass.getMethod(\"getInstance\");\n+                    Object instance = getInstance.invoke(null);\n                     Method getter = discovererClass.getMethod(\"getServiceDiscoverer\");\n-                    Object discoverer = getter.invoke(null);\n+                    Object discoverer = getter.invoke(instance);\n \n                     Method getCL = discoverer.getClass().getMethod(\"getContextClassLoader\");\n                     ClassLoader cl = (ClassLoader)getCL.invoke(discoverer);", "filename": "modules/node-launcher-osgi/src/main/java/org/apache/tuscany/sca/node/osgi/launcher/FelixOSGiHost.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/0d5dec8a3f59697173d4887a93b84ac81c922923", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/492f45daee76a561ac68e18735945441b19f8d09", "message": "Protect against NPE when InterfaceContract is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@684647 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_35", "file": [{"additions": 13, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/0d5dec8a3f59697173d4887a93b84ac81c922923/modules/core/src/main/java/org/apache/tuscany/sca/core/context/ComponentContextImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/0d5dec8a3f59697173d4887a93b84ac81c922923/modules/core/src/main/java/org/apache/tuscany/sca/core/context/ComponentContextImpl.java", "sha": "ed01a509d2db1252d2386c68c9e892f32ade93a5", "changes": 19, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/core/src/main/java/org/apache/tuscany/sca/core/context/ComponentContextImpl.java?ref=0d5dec8a3f59697173d4887a93b84ac81c922923", "patch": "@@ -219,7 +219,11 @@ public RequestContext getRequestContext() {\n             InterfaceContract refInterfaceContract = getInterfaceContract(interfaceContract, businessInterface);\n             if (refInterfaceContract != interfaceContract) {\n                 ref = (RuntimeComponentReference)reference.clone();\n-                ref.setInterfaceContract(interfaceContract);\n+                if (interfaceContract != null) {\n+                    ref.setInterfaceContract(interfaceContract);\n+                } else {\n+                    ref.setInterfaceContract(refInterfaceContract);\n+                }\n             }\n             ref.setComponent(component);\n             return new ServiceReferenceImpl<B>(businessInterface, component, ref, binding, proxyFactory, compositeActivator);\n@@ -342,14 +346,17 @@ private ComponentReference createSelfReference(Component component,\n      */\n     private InterfaceContract getInterfaceContract(InterfaceContract interfaceContract, Class<?> businessInterface)\n         throws CloneNotSupportedException, InvalidInterfaceException {\n-        Interface interfaze = interfaceContract.getInterface();\n         boolean compatible = false;\n-        if (interfaze instanceof JavaInterface) {\n-            Class<?> cls = ((JavaInterface)interfaze).getJavaClass();\n-            if (businessInterface.isAssignableFrom(cls)) {\n-                compatible = true;\n+        if (interfaceContract != null && interfaceContract.getInterface() != null) {\n+            Interface interfaze = interfaceContract.getInterface();\n+            if (interfaze instanceof JavaInterface) {\n+                Class<?> cls = ((JavaInterface)interfaze).getJavaClass();\n+                if (businessInterface.isAssignableFrom(cls)) {\n+                    compatible = true;\n+                }\n             }\n         }\n+\n         if (!compatible) {\n             // The interface is not assignable from the interface contract\n             interfaceContract = javaInterfaceFactory.createJavaInterfaceContract();", "filename": "modules/core/src/main/java/org/apache/tuscany/sca/core/context/ComponentContextImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/492f45daee76a561ac68e18735945441b19f8d09", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/7953b37e6075a8e2616f5d8411db41633336ed85", "message": "Protect against NPE when the InterfaceCOntract is also null\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@684646 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_36", "file": [{"additions": 8, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/492f45daee76a561ac68e18735945441b19f8d09/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/CompositeActivatorImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/492f45daee76a561ac68e18735945441b19f8d09/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/CompositeActivatorImpl.java", "sha": "6eb5f0d1e5bfbde64021838285b682cfe477e208", "changes": 10, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/CompositeActivatorImpl.java?ref=492f45daee76a561ac68e18735945441b19f8d09", "patch": "@@ -412,8 +412,14 @@ private RuntimeWire addReferenceWire(Component refComponent,\n \n         // Use the interface contract of the reference on the component type\n         Reference componentTypeRef = reference.getReference();\n-        InterfaceContract sourceContract =\n-            componentTypeRef == null ? reference.getInterfaceContract() : componentTypeRef.getInterfaceContract();\n+\n+        InterfaceContract sourceContract;\n+        if (componentTypeRef == null || componentTypeRef.getInterfaceContract() == null) {\n+            sourceContract = reference.getInterfaceContract();\n+        } else {\n+            sourceContract = componentTypeRef.getInterfaceContract();\n+        }\n+\n         sourceContract = sourceContract.makeUnidirectional(false);\n \n         EndpointReference wireSource =", "filename": "modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/CompositeActivatorImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/8b0b9063f605624219a4d618993de8a2198755a1", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/d71e2201c05444cba0cfd9d229b2679cccd7aabe", "message": "Fixed NPE when WebServiceBinding does not have a configured builder.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@676651 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_37", "file": [{"additions": 5, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/8b0b9063f605624219a4d618993de8a2198755a1/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/ComponentServiceBindingBuilderImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/8b0b9063f605624219a4d618993de8a2198755a1/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/ComponentServiceBindingBuilderImpl.java", "sha": "12ea86eac3882d5771fa9a6fb5c6902f95d0f82a", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/ComponentServiceBindingBuilderImpl.java?ref=8b0b9063f605624219a4d618993de8a2198755a1", "patch": "@@ -25,6 +25,7 @@\n import org.apache.tuscany.sca.assembly.Composite;\n import org.apache.tuscany.sca.assembly.Implementation;\n import org.apache.tuscany.sca.assembly.Service;\n+import org.apache.tuscany.sca.assembly.builder.BindingBuilder;\n import org.apache.tuscany.sca.assembly.builder.BindingBuilderExtension;\n import org.apache.tuscany.sca.assembly.builder.CompositeBuilder;\n import org.apache.tuscany.sca.assembly.builder.CompositeBuilderException;\n@@ -62,7 +63,10 @@ private void buildServiceBindings(Composite composite) {\n             for (ComponentService componentService : component.getServices()) {\n                 for (Binding binding : componentService.getBindings()) {\n                     if (binding instanceof BindingBuilderExtension) {\n-                        ((BindingBuilderExtension)binding).getBuilder().build(component, componentService, binding, monitor);\n+                        BindingBuilder builder = ((BindingBuilderExtension)binding).getBuilder();\n+                        if (builder != null) {\n+                            builder.build(component, componentService, binding, monitor);\n+                        }\n                     }\n                 }\n             }", "filename": "modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/ComponentServiceBindingBuilderImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/910ffcfae02b7a7efdb231d24b709297176b7d16", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/bb887f4637eb992abbcc3766116adeaa00eacd9d", "message": "Fix NPE when the conversationID==null\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@671426 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_38", "file": [{"additions": 2, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/910ffcfae02b7a7efdb231d24b709297176b7d16/modules/core/src/main/java/org/apache/tuscany/sca/core/conversation/ConversationManagerImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/910ffcfae02b7a7efdb231d24b709297176b7d16/modules/core/src/main/java/org/apache/tuscany/sca/core/conversation/ConversationManagerImpl.java", "sha": "8a883f8e15d724866cf94adca412f53584ccb66f", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/core/src/main/java/org/apache/tuscany/sca/core/conversation/ConversationManagerImpl.java?ref=910ffcfae02b7a7efdb231d24b709297176b7d16", "patch": "@@ -146,7 +146,8 @@ public void expireConversation(Object conversationID) {\n      * @see org.apache.tuscany.sca.core.conversation.ConversationManager#getConversation(java.lang.Object)\n      */\n     public ExtendedConversation getConversation(Object conversationID) {\n-        return conversations.get(conversationID);\n+        // ConcurrentHashMap cannot take null key\n+        return conversationID == null ? null : conversations.get(conversationID);\n     }\n \n     /**", "filename": "modules/core/src/main/java/org/apache/tuscany/sca/core/conversation/ConversationManagerImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/1e0c48a8de668a0b45f5d80a407880c5571f613c", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/ab68b72486306736af79ab904fc3a7509db1e581", "message": "TUSCANY-2243: ServiceRuntimeException due to NPE with ComponentContext.getService()\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@667144 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_39", "file": [{"additions": 2, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/1e0c48a8de668a0b45f5d80a407880c5571f613c/vtest/java-api/apis/componentcontext/src/test/java/org/apache/tuscany/sca/vtest/javaapi/apis/componentcontext/ComponentContextTestCase.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/1e0c48a8de668a0b45f5d80a407880c5571f613c/vtest/java-api/apis/componentcontext/src/test/java/org/apache/tuscany/sca/vtest/javaapi/apis/componentcontext/ComponentContextTestCase.java", "sha": "5f39638e5ce712497975939587343f9e8c80712b", "changes": 6, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/vtest/java-api/apis/componentcontext/src/test/java/org/apache/tuscany/sca/vtest/javaapi/apis/componentcontext/ComponentContextTestCase.java?ref=1e0c48a8de668a0b45f5d80a407880c5571f613c", "patch": "@@ -137,14 +137,12 @@ public void testGetProperty() throws Exception {\n      * request, or null if there is no current request or if the context is\n      * unavailable.\n      * \n-     * @throws Exception TODO: fails for me so I've added\n-     * @Ignore\n+     * @throws Exception\n      */\n     @Test\n-    @Ignore\n     public void testGetRequestContext() throws Exception {\n         Assert.assertEquals(\"AComponent\", a.getRequestContextServiceName());\n-        Assert.assertEquals(\"Null\", a.getRequestContextContent());\n+        Assert.assertEquals(\"NotNull\", a.getRequestContextContent());\n     }\n \n     /**", "filename": "vtest/java-api/apis/componentcontext/src/test/java/org/apache/tuscany/sca/vtest/javaapi/apis/componentcontext/ComponentContextTestCase.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/00e20221d051bb662784f0020510882a614fbe01", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/ea50a35519e8a87599b76ed2172cc0874c58ff40", "message": "Fix NPE when no ICF defined\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@666547 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_40", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/00e20221d051bb662784f0020510882a614fbe01/modules/binding-jms/src/main/java/org/apache/tuscany/sca/binding/jms/provider/JMSResourceFactory.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/00e20221d051bb662784f0020510882a614fbe01/modules/binding-jms/src/main/java/org/apache/tuscany/sca/binding/jms/provider/JMSResourceFactory.java", "sha": "23a77d4a7382c4beaf6a106bb995034c42b0e88c", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-jms/src/main/java/org/apache/tuscany/sca/binding/jms/provider/JMSResourceFactory.java?ref=00e20221d051bb662784f0020510882a614fbe01", "patch": "@@ -136,7 +136,7 @@ private synchronized Context getInitialContext() throws NamingException {\n      * See: http://www-1.ibm.com/support/docview.wss?uid=swg24012804 \n      */\n     private void initJREEnvironment(Properties props) {\n-    \tif (props.get(Context.INITIAL_CONTEXT_FACTORY).equals(\"com.ibm.websphere.naming.WsnInitialContextFactory\")) {\n+    \tif (\"com.ibm.websphere.naming.WsnInitialContextFactory\".equals(props.get(Context.INITIAL_CONTEXT_FACTORY))) {\n         \tString vendor = System.getProperty(\"java.vendor\");\n     \t\tif (vendor == null || !vendor.contains(\"IBM\")) {\n             \tprops.setProperty(\"com.ibm.CORBA.ORBInit\",\"com.ibm.ws.sib.client.ORB\");", "filename": "modules/binding-jms/src/main/java/org/apache/tuscany/sca/binding/jms/provider/JMSResourceFactory.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/8a59e0e6f84df7544aa9297fc755c38d94f7cf9b", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/78a6df73d198d836f6524ce4082a6a8a3ac61a9c", "message": "Add NPE check\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@659652 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_41", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/8a59e0e6f84df7544aa9297fc755c38d94f7cf9b/modules/databinding/src/main/java/org/apache/tuscany/sca/databinding/impl/SimpleTypeMapperImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/8a59e0e6f84df7544aa9297fc755c38d94f7cf9b/modules/databinding/src/main/java/org/apache/tuscany/sca/databinding/impl/SimpleTypeMapperImpl.java", "sha": "32a2313f599664424b42b55a11d5cef45253ed2f", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/databinding/src/main/java/org/apache/tuscany/sca/databinding/impl/SimpleTypeMapperImpl.java?ref=8a59e0e6f84df7544aa9297fc755c38d94f7cf9b", "patch": "@@ -230,7 +230,7 @@ public SimpleTypeMapperImpl() {\n     }\n \n     public static Class getJavaType(QName xmlType) {\n-        if (URI_2001_SCHEMA_XSD.equals(xmlType.getNamespaceURI())) {\n+         if (xmlType != null && URI_2001_SCHEMA_XSD.equals(xmlType.getNamespaceURI())) {\n             return XML2JAVA.get(xmlType.getLocalPart());\n         } else {\n             return null;", "filename": "modules/databinding/src/main/java/org/apache/tuscany/sca/databinding/impl/SimpleTypeMapperImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/ae6ed18d8c91e582f9a1073f3c09bdae22afdc5d", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/107ef0a7694f1b24562e50d8a9e3cdecc0f30e0c", "message": "Avoid NPE when the target op is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@651191 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_42", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/ae6ed18d8c91e582f9a1073f3c09bdae22afdc5d/modules/interface/src/main/java/org/apache/tuscany/sca/interfacedef/impl/InterfaceContractMapperImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/ae6ed18d8c91e582f9a1073f3c09bdae22afdc5d/modules/interface/src/main/java/org/apache/tuscany/sca/interfacedef/impl/InterfaceContractMapperImpl.java", "sha": "0d8051e183e6f90ecb5319050dd5dd1a3cb66732", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/interface/src/main/java/org/apache/tuscany/sca/interfacedef/impl/InterfaceContractMapperImpl.java?ref=ae6ed18d8c91e582f9a1073f3c09bdae22afdc5d", "patch": "@@ -280,7 +280,7 @@ public boolean isCompatible(InterfaceContract source, InterfaceContract target)\n      */\n     public Operation map(Interface target, Operation source) {\n         // TODO: How to handle the case that source operation is dynamic?\n-        if (target.isDynamic()) {\n+        if (target == null || target.isDynamic()) {\n             return source;\n         } else if (target.isRemotable()) {\n             for (Operation op : target.getOperations()) {", "filename": "modules/interface/src/main/java/org/apache/tuscany/sca/interfacedef/impl/InterfaceContractMapperImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/31b2c75dc65d5ad0a2d34653d13822f9caa51398", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/d0fc16850c50c03764a35663a30917f2bb102d8e", "message": "Avoid NPE when operation or operation faultTypes are null\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@650879 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_43", "file": [{"additions": 4, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/31b2c75dc65d5ad0a2d34653d13822f9caa51398/modules/interface-java-jaxws/src/main/java/org/apache/tuscany/sca/interfacedef/java/jaxws/JAXWSJavaInterfaceProcessor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/31b2c75dc65d5ad0a2d34653d13822f9caa51398/modules/interface-java-jaxws/src/main/java/org/apache/tuscany/sca/interfacedef/java/jaxws/JAXWSJavaInterfaceProcessor.java", "sha": "8bd38c0968551bd0feefaddfc033e0b4ad4a4185", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/interface-java-jaxws/src/main/java/org/apache/tuscany/sca/interfacedef/java/jaxws/JAXWSJavaInterfaceProcessor.java?ref=31b2c75dc65d5ad0a2d34653d13822f9caa51398", "patch": "@@ -210,8 +210,10 @@ public void visitInterface(JavaInterface contract) throws InvalidInterfaceExcept\n \n     @SuppressWarnings(\"unchecked\")\n     private void introspectFaultTypes(Operation operation) {\n-        for (DataType exceptionType : operation.getFaultTypes()) {\n-            faultExceptionMapper.introspectFaultDataType(exceptionType);\n+        if (operation!= null && operation.getFaultTypes() != null) {\n+            for (DataType exceptionType : operation.getFaultTypes()) {\n+                faultExceptionMapper.introspectFaultDataType(exceptionType);\n+            }\n         }\n     }\n ", "filename": "modules/interface-java-jaxws/src/main/java/org/apache/tuscany/sca/interfacedef/java/jaxws/JAXWSJavaInterfaceProcessor.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/d0fc16850c50c03764a35663a30917f2bb102d8e", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/70f86fb840ed8159c42c17a912876fb0f595c620", "message": "Avoid NPE when interface is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@650862 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_44", "file": [{"additions": 4, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/d0fc16850c50c03764a35663a30917f2bb102d8e/modules/binding-ws-axis2/src/main/java/org/apache/tuscany/sca/binding/ws/axis2/Axis2ReferenceBindingProvider.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/d0fc16850c50c03764a35663a30917f2bb102d8e/modules/binding-ws-axis2/src/main/java/org/apache/tuscany/sca/binding/ws/axis2/Axis2ReferenceBindingProvider.java", "sha": "f215c2178478504b8305f350498d6e7b30e48dfc", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-ws-axis2/src/main/java/org/apache/tuscany/sca/binding/ws/axis2/Axis2ReferenceBindingProvider.java?ref=d0fc16850c50c03764a35663a30917f2bb102d8e", "patch": "@@ -61,7 +61,7 @@ public Axis2ReferenceBindingProvider(RuntimeComponent component,\n         // TODO - fix up the conversational flag and operation sequences in case the contract has come from WSDL\n         // as we don't yet support requires=\"conversational\" or sca:endConversation annotations\n         // in WSDL interface descriptions (see section 1.5.4 of the Assembly Specification V1.0)\n-        if ( reference.getInterfaceContract().getInterface() != null ) {\n+        if ( reference.getInterfaceContract().getInterface() != null && contract.getInterface() != null) {\n             contract.getInterface().setConversational(reference.getInterfaceContract().getInterface().isConversational());\n     \n             for (Operation operation : contract.getInterface().getOperations()){\n@@ -81,7 +81,9 @@ public Axis2ReferenceBindingProvider(RuntimeComponent component,\n         }\n \n         // Set to use the Axiom data binding\n-        contract.getInterface().resetDataBinding(OMElement.class.getName());\n+        if (contract.getInterface() != null) {\n+            contract.getInterface().resetDataBinding(OMElement.class.getName());\n+        }\n \n         axisClient = new Axis2ServiceClient(component, reference, wsBinding, servletHost, messageFactory, policyHandlerClassnames);\n     }", "filename": "modules/binding-ws-axis2/src/main/java/org/apache/tuscany/sca/binding/ws/axis2/Axis2ReferenceBindingProvider.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/2e3f12bd9221a4f0186c26a956cfb0f9d7e2a77b", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/0690407bbf52bd64100e22fa58c37092b7691277", "message": "Fix NPE after stop/restart of the binding.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@610596 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_45", "file": [{"additions": 0, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/2e3f12bd9221a4f0186c26a956cfb0f9d7e2a77b/modules/binding-feed/src/main/java/org/apache/tuscany/sca/binding/feed/provider/AtomReferenceBindingProvider.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/2e3f12bd9221a4f0186c26a956cfb0f9d7e2a77b/modules/binding-feed/src/main/java/org/apache/tuscany/sca/binding/feed/provider/AtomReferenceBindingProvider.java", "sha": "f8f65f2ae38b28ea43d15762998056e53d66a5ac", "changes": 2, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-feed/src/main/java/org/apache/tuscany/sca/binding/feed/provider/AtomReferenceBindingProvider.java?ref=2e3f12bd9221a4f0186c26a956cfb0f9d7e2a77b", "patch": "@@ -54,7 +54,6 @@\n         // Prepare authorization header\n         String authorization = \"admin\" + \":\" + \"admin\";\n         authorizationHeader = \"Basic \" + new String(Base64.encodeBase64(authorization.getBytes()));\n-        ;\n \n         // Create an HTTP client\n         httpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n@@ -100,7 +99,6 @@ public void start() {\n     }\n \n     public void stop() {\n-        httpClient = null;\n     }\n     \n     public boolean supportsOneWayInvocation() {", "filename": "modules/binding-feed/src/main/java/org/apache/tuscany/sca/binding/feed/provider/AtomReferenceBindingProvider.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/03f86148f0ce20f05f1b7fdc1132da13bd72552d", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/4d8dd84d856b122da39a317e587e440b5f8dcf6f", "message": "add null guard to prevent NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@605042 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_46", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/03f86148f0ce20f05f1b7fdc1132da13bd72552d/modules/core-databinding/src/main/java/org/apache/tuscany/sca/core/databinding/wire/PassByValueInterceptor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/03f86148f0ce20f05f1b7fdc1132da13bd72552d/modules/core-databinding/src/main/java/org/apache/tuscany/sca/core/databinding/wire/PassByValueInterceptor.java", "sha": "6c46a54ee95967d87cb7f2e094e6ea3db442d458", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/core-databinding/src/main/java/org/apache/tuscany/sca/core/databinding/wire/PassByValueInterceptor.java?ref=03f86148f0ce20f05f1b7fdc1132da13bd72552d", "patch": "@@ -76,7 +76,9 @@ public Message invoke(Message msg) {\n                     String dataBindingId = operation.getInputType().getLogical().get(i).getDataBinding();\n                     DataBinding dataBinding = dataBindings.getDataBinding(dataBindingId);\n                     // HACK: Use JAXB to copy non-Serializable beans\n-                    if (JavaBeansDataBinding.NAME.equals(dataBinding.getName()) && !(args[i] instanceof Serializable)) {\n+                    if (dataBinding != null &&\n+                        JavaBeansDataBinding.NAME.equals(dataBinding.getName()) &&\n+                        !(args[i] instanceof Serializable)) {\n                         dataBinding = dataBindings.getDataBinding(JAXBDataBinding.NAME);\n                     }\n                     copiedArg = copy(args[i], dataBinding);", "filename": "modules/core-databinding/src/main/java/org/apache/tuscany/sca/core/databinding/wire/PassByValueInterceptor.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/cfc3398b76a3224acc7973ece42e70ef2c535c8b", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/21dca956fc1e4653f22d9e251d30a5061d75ab30", "message": "Avoid NPE if the vertex cannot be found\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@599614 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_47", "file": [{"additions": 8, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/cfc3398b76a3224acc7973ece42e70ef2c535c8b/modules/databinding/src/main/java/org/apache/tuscany/sca/databinding/impl/DirectedGraph.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/cfc3398b76a3224acc7973ece42e70ef2c535c8b/modules/databinding/src/main/java/org/apache/tuscany/sca/databinding/impl/DirectedGraph.java", "sha": "e5ee6796b987ac7d7bc149416cea34e56e0750f3", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/databinding/src/main/java/org/apache/tuscany/sca/databinding/impl/DirectedGraph.java?ref=cfc3398b76a3224acc7973ece42e70ef2c535c8b", "patch": "@@ -216,6 +216,14 @@ public Edge getEdge(Vertex source, Vertex target) {\n     }\n \n     public Edge getEdge(V source, V target) {\n+        Vertex sv = getVertex(source);\n+        if (sv == null) {\n+            return null;\n+        }\n+        Vertex tv = getVertex(target);\n+        if (tv == null) {\n+            return null;\n+        }\n         return getEdge(getVertex(source), getVertex(target));\n     }\n ", "filename": "modules/databinding/src/main/java/org/apache/tuscany/sca/databinding/impl/DirectedGraph.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/6391aaca5bc2b037b1f052dee5807abb03822020", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/5375677c21d0abe8105dcf09753b518b7d0bf66b", "message": "Prvent NPE when there is no domain\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@589987 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_48", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/6391aaca5bc2b037b1f052dee5807abb03822020/modules/node-impl/src/main/java/org/apache/tuscany/sca/node/impl/SCADomainProxyImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/6391aaca5bc2b037b1f052dee5807abb03822020/modules/node-impl/src/main/java/org/apache/tuscany/sca/node/impl/SCADomainProxyImpl.java", "sha": "d0bbf6f9dbd3b4cbdfbbb838be7c7489d06b5df9", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/node-impl/src/main/java/org/apache/tuscany/sca/node/impl/SCADomainProxyImpl.java?ref=6391aaca5bc2b037b1f052dee5807abb03822020", "patch": "@@ -244,7 +244,9 @@ public void removeNode(SCANode nodeImpl) throws DomainException {\n     }  \n     \n     public void registerContribution(String nodeURI, String contributionURI, String contributionURL){\n-        domainManager.registerContribution(nodeURI, contributionURI, contributionURL);\n+        if (domainManager != null) {\n+            domainManager.registerContribution(nodeURI, contributionURI, contributionURL);\n+        }\n     }\n     \n     public void unregisterContribution(String contributionURI){", "filename": "modules/node-impl/src/main/java/org/apache/tuscany/sca/node/impl/SCADomainProxyImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/810b2401c1480811b31d7c502fd6f5f2ef48cc64", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/272ee2cb4c01200479a4cfc1bfc385e130c98a5c", "message": "WORKAROUND: Properly init the XMLSchemaCollection to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@581976 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_49", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/810b2401c1480811b31d7c502fd6f5f2ef48cc64/modules/interface-wsdl/src/main/java/org/apache/tuscany/sca/interfacedef/wsdl/impl/XSDefinitionImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/810b2401c1480811b31d7c502fd6f5f2ef48cc64/modules/interface-wsdl/src/main/java/org/apache/tuscany/sca/interfacedef/wsdl/impl/XSDefinitionImpl.java", "sha": "ebc0f753df12ae8ea9039b083dd36f4793b4a35a", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/interface-wsdl/src/main/java/org/apache/tuscany/sca/interfacedef/wsdl/impl/XSDefinitionImpl.java?ref=810b2401c1480811b31d7c502fd6f5f2ef48cc64", "patch": "@@ -32,7 +32,7 @@\n  * @version $Rev$ $Date$\n  */\n public class XSDefinitionImpl implements XSDefinition {\n-    private XmlSchemaCollection schemaCollection;\n+    private XmlSchemaCollection schemaCollection = new XmlSchemaCollection();\n     private XmlSchema schema;\n     private String namespace;\n     private URI location;", "filename": "modules/interface-wsdl/src/main/java/org/apache/tuscany/sca/interfacedef/wsdl/impl/XSDefinitionImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/35977f3403a965664c125464bd70b4dcf48fc77f", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/570710420fca0b58f188604260e00bd82afc3de2", "message": "Workaround for NPE in binding-echo-extension\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@575419 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_50", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/35977f3403a965664c125464bd70b4dcf48fc77f/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/CompositeWireBuilderImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/35977f3403a965664c125464bd70b4dcf48fc77f/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/CompositeWireBuilderImpl.java", "sha": "be082e36e29ef09a6e3b7c2762f45d81e5a13060", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/CompositeWireBuilderImpl.java?ref=35977f3403a965664c125464bd70b4dcf48fc77f", "patch": "@@ -1103,7 +1103,7 @@ private boolean isPolicySetApplicable(Base parent,\n                                           IntentAttachPointType bindingType) {\n         \n         //FIXME: For now do a simple check and later implement whatever is mentioned in the next comment\n-       if ( xpath != null && xpath.indexOf(bindingType.getName().getLocalPart()) != -1) {\n+       if ( xpath != null && bindingType != null && xpath.indexOf(bindingType.getName().getLocalPart()) != -1) {\n            return true;\n        } else {\n            return false;", "filename": "modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/CompositeWireBuilderImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/c3107028b9c751eab39cda39d333f2adc1c7a945", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/65094489597f5a1d8100bcc02b2a23cd10cb5fc1", "message": "Fix NPE when clazz not resolved\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@561293 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_51", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/c3107028b9c751eab39cda39d333f2adc1c7a945/modules/databinding-sdo/src/main/java/org/apache/tuscany/sca/databinding/sdo/ImportSDOPostProcessor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/c3107028b9c751eab39cda39d333f2adc1c7a945/modules/databinding-sdo/src/main/java/org/apache/tuscany/sca/databinding/sdo/ImportSDOPostProcessor.java", "sha": "4397e068502c1d6e4a7d301a64d9f1c39f3d1f04", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/databinding-sdo/src/main/java/org/apache/tuscany/sca/databinding/sdo/ImportSDOPostProcessor.java?ref=c3107028b9c751eab39cda39d333f2adc1c7a945", "patch": "@@ -56,7 +56,7 @@ public void visit(Contribution contribution) {\n                 String factoryName = getFactoryClassName(artifactURI);\r\n                 ClassReference clazz = new ClassReference(factoryName);\r\n                 clazz = contribution.getModelResolver().resolveModel(ClassReference.class, clazz);\r\n-                if (clazz.getClass() != null) {\r\n+                if (clazz.getJavaClass() != null) {\r\n                     try {\r\n                         //check if it's a SDO factory by introspecting INSTANCE field\r\n                         if (isSDOFactory(clazz.getJavaClass())) {\r", "filename": "modules/databinding-sdo/src/main/java/org/apache/tuscany/sca/databinding/sdo/ImportSDOPostProcessor.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/c0514bbc5d37b5e3258e8659e7066bce67092dea", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/8b7c114de05664498937662750c877e16f00da4f", "message": "Fixing NPE during server shutdown\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@540706 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_52", "file": [{"additions": 7, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/c0514bbc5d37b5e3258e8659e7066bce67092dea/modules/binding-ajax/src/main/java/org/apache/tuscany/sca/binding/ajax/AjaxModuleActivator.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/c0514bbc5d37b5e3258e8659e7066bce67092dea/modules/binding-ajax/src/main/java/org/apache/tuscany/sca/binding/ajax/AjaxModuleActivator.java", "sha": "b5daa025188e92c830558ed0e0b7d6aa63d75b5c", "changes": 11, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-ajax/src/main/java/org/apache/tuscany/sca/binding/ajax/AjaxModuleActivator.java?ref=c0514bbc5d37b5e3258e8659e7066bce67092dea", "patch": "@@ -20,7 +20,6 @@\n package org.apache.tuscany.sca.binding.ajax;\n \n import org.apache.tuscany.sca.assembly.Binding;\n-import org.apache.tuscany.sca.contribution.processor.StAXArtifactProcessor;\n import org.apache.tuscany.sca.contribution.processor.StAXArtifactProcessorExtensionPoint;\n import org.apache.tuscany.sca.core.ExtensionPointRegistry;\n import org.apache.tuscany.sca.core.ModuleActivator;\n@@ -38,12 +37,14 @@\n  * ajax service and reference providers with the Tuscany runtime.\n  */\n public class AjaxModuleActivator implements ModuleActivator {\n+    AjaxBindingSCDLProcessor ajaxBindingProcessor;\n \n     public void start(ExtensionPointRegistry registry) {\n-\n+        ajaxBindingProcessor =  new AjaxBindingSCDLProcessor(); \n+        \n         // Add the ajax binding SCDL processor to the runtime\n         StAXArtifactProcessorExtensionPoint staxProcessors = registry.getExtensionPoint(StAXArtifactProcessorExtensionPoint.class);\n-        staxProcessors.addArtifactProcessor(new AjaxBindingSCDLProcessor());\n+        staxProcessors.addArtifactProcessor(ajaxBindingProcessor);\n \n         final ServletHost servletHost = registry.getExtensionPoint(ServletHost.class);\n         \n@@ -65,7 +66,9 @@ public Class getModelType() {\n     public void stop(ExtensionPointRegistry registry) {\n         // Remove the ajax binding SCDL processor from the runtime\n         StAXArtifactProcessorExtensionPoint staxProcessors = registry.getExtensionPoint(StAXArtifactProcessorExtensionPoint.class);\n-        staxProcessors.removeArtifactProcessor((StAXArtifactProcessor)staxProcessors.getProcessor(AjaxBindingSCDLProcessor.class));\n+        if ( staxProcessors != null) {\n+            staxProcessors.removeArtifactProcessor(ajaxBindingProcessor);\n+        }\n \n         // Remove the ajax provider factory from the runtime\n         ProviderFactoryExtensionPoint providerFactories = registry.getExtensionPoint(ProviderFactoryExtensionPoint.class);", "filename": "modules/binding-ajax/src/main/java/org/apache/tuscany/sca/binding/ajax/AjaxModuleActivator.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/854f17b2247f03eb86f88b13f6d1169ee37ff592", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/a3b9cf898d605ff0584fbb349bb2fd8ee42b10c7", "message": "Avoid NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@535971 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_53", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/854f17b2247f03eb86f88b13f6d1169ee37ff592/modules/assembly/src/main/java/org/apache/tuscany/assembly/builder/impl/DefaultCompositeBuilder.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/854f17b2247f03eb86f88b13f6d1169ee37ff592/modules/assembly/src/main/java/org/apache/tuscany/assembly/builder/impl/DefaultCompositeBuilder.java", "sha": "a6e333461785e85ef8ecae0c60e0d95d723f7bea", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/assembly/src/main/java/org/apache/tuscany/assembly/builder/impl/DefaultCompositeBuilder.java?ref=854f17b2247f03eb86f88b13f6d1169ee37ff592", "patch": "@@ -716,7 +716,8 @@ private void connectCompositeReferences(Composite composite,\n             for (int i = 0, n = promotedReferences.size(); i < n; i++) {\n                 ComponentReference componentReference = promotedReferences.get(i);\n                 if (componentReference.isUnresolved()) {\n-                    componentReference = componentReferences.get(componentReference.getName());\n+                    String componentReferenceName = componentReference.getName();\n+                    componentReference = componentReferences.get(componentReferenceName);\n                     if (componentReference != null) {\n \n                         // Point to the resolved component reference\n@@ -731,7 +732,7 @@ private void connectCompositeReferences(Composite composite,\n                         }\n \n                     } else {\n-                        warning(\"Promoted component reference not found: \" + componentReference.getName(), composite);\n+                        warning(\"Promoted component reference not found: \" + componentReferenceName, composite);\n                     }\n                 }\n             }", "filename": "modules/assembly/src/main/java/org/apache/tuscany/assembly/builder/impl/DefaultCompositeBuilder.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/aa4dd845621679620dde0f102234ca51c60085d9", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/f7eaf4e10bff64e7f1036f2ac3529266f495c50f", "message": "Fix for NPE on bad componentName and new test\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@535374 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_54", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/aa4dd845621679620dde0f102234ca51c60085d9/itest/extended-api/src/test/java/org/apache/tuscany/sca/test/extended/ServiceLocateTestCase.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/aa4dd845621679620dde0f102234ca51c60085d9/itest/extended-api/src/test/java/org/apache/tuscany/sca/test/extended/ServiceLocateTestCase.java", "sha": "70b26bb41843a0e279a97cc85792bbe3c083ea31", "changes": 13, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/itest/extended-api/src/test/java/org/apache/tuscany/sca/test/extended/ServiceLocateTestCase.java?ref=aa4dd845621679620dde0f102234ca51c60085d9", "patch": "@@ -36,7 +36,7 @@ public void unmanagedLocateService() {\n         assertEquals(-99, service.negate(99));\n \n     }\n-    \n+\n     @Test\n     public void managedLocateService() {\n \n@@ -46,20 +46,13 @@ public void managedLocateService() {\n \n     }\n \n-    @Ignore\n-    @Test\n+    @Test(expected = IllegalArgumentException.class)\n     public void badComponentName() {\n \n-        BasicService service = SCARuntimeActivator.locateService(BasicService.class, \"IvalidComponentName\");\n-\n-        assertEquals(-99, service.delegateNegate(99));\n+        SCARuntimeActivator.locateService(BasicService.class, \"IvalidComponentName\");\n \n     }\n \n-    \n-    \n-    \n-    \n     @Before\n     public void init() throws Exception {\n ", "filename": "itest/extended-api/src/test/java/org/apache/tuscany/sca/test/extended/ServiceLocateTestCase.java"}, {"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/aa4dd845621679620dde0f102234ca51c60085d9/modules/core/src/main/java/org/apache/tuscany/core/runtime/RuntimeActivatorImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/aa4dd845621679620dde0f102234ca51c60085d9/modules/core/src/main/java/org/apache/tuscany/core/runtime/RuntimeActivatorImpl.java", "sha": "b1842ed95b32f26c53ed2e40d6a470cc06a83286", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/core/src/main/java/org/apache/tuscany/core/runtime/RuntimeActivatorImpl.java?ref=aa4dd845621679620dde0f102234ca51c60085d9", "patch": "@@ -272,7 +272,7 @@ public ComponentContext getComponentContext(String componentName) {\n                 return (ComponentContext)component;\n             }\n         }\n-        return null;\n+        throw new IllegalArgumentException(\"ComponentContext for component named: \" + componentName + \" not found in this domain\");\n     }\n \n     public void start(Contribution contribution) throws ActivationException {", "filename": "modules/core/src/main/java/org/apache/tuscany/core/runtime/RuntimeActivatorImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/0e6d8a134b2d4f151649c064ffe64e8e104c77d7", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/4ff2bf3d42e5c061f87140e087f6de7b5a669ef7", "message": "Test if a property is readable to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@535095 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_55", "file": [{"additions": 6, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/0e6d8a134b2d4f151649c064ffe64e8e104c77d7/modules/assembly/src/main/java/org/apache/tuscany/assembly/util/PrintUtil.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/0e6d8a134b2d4f151649c064ffe64e8e104c77d7/modules/assembly/src/main/java/org/apache/tuscany/assembly/util/PrintUtil.java", "sha": "55e1a010d73507aaf55c0451d17c26c07da1e48c", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/assembly/src/main/java/org/apache/tuscany/assembly/util/PrintUtil.java?ref=0e6d8a134b2d4f151649c064ffe64e8e104c77d7", "patch": "@@ -25,6 +25,7 @@\n import java.io.OutputStream;\n import java.io.OutputStreamWriter;\n import java.io.PrintWriter;\n+import java.lang.reflect.Method;\n import java.util.Arrays;\n import java.util.HashSet;\n import java.util.List;\n@@ -78,7 +79,11 @@ public void print(Object object) {\n                     try {\n \n                         // Get the value of each property\n-                        Object value = propertyDescriptor.getReadMethod().invoke(object);\n+                        Method getter = propertyDescriptor.getReadMethod();\n+                        if (getter == null) {\n+                            continue;\n+                        }\n+                        Object value = getter.invoke(object);\n                         if (value != null) {\n \n                             // Convert array value into a list", "filename": "modules/assembly/src/main/java/org/apache/tuscany/assembly/util/PrintUtil.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/700bfbbc1c3b92cf6fbacfe67840ce019ab99626", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/3dbdc87ece53570858ec31633bc29366d9a281e8", "message": "Axis2 binding, avoid NPE when port is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@529201 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_56", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/700bfbbc1c3b92cf6fbacfe67840ce019ab99626/modules/binding-ws-axis2/src/main/java/org/apache/tuscany/binding/axis2/util/WebServicePortMetaData.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/700bfbbc1c3b92cf6fbacfe67840ce019ab99626/modules/binding-ws-axis2/src/main/java/org/apache/tuscany/binding/axis2/util/WebServicePortMetaData.java", "sha": "6795f7523a59152d6e9181522e119e845c37288b", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-ws-axis2/src/main/java/org/apache/tuscany/binding/axis2/util/WebServicePortMetaData.java?ref=700bfbbc1c3b92cf6fbacfe67840ce019ab99626", "patch": "@@ -60,7 +60,9 @@ public WebServicePortMetaData(Definition wsdlDefinition, Port wsdlPort, String e\n \n         // Lookup the named port\n         this.wsdlPort = wsdlPort;\n-        wsdlPortName = new QName(wsdlDefinition.getTargetNamespace(), wsdlPort.getName());\n+        if (wsdlPort != null) {\n+            wsdlPortName = new QName(wsdlDefinition.getTargetNamespace(), wsdlPort.getName());\n+        }\n         Collection services = wsdlDefinition.getServices().values();\n         for (Object serviceObj : services) {\n             Service service = (Service) serviceObj;", "filename": "modules/binding-ws-axis2/src/main/java/org/apache/tuscany/binding/axis2/util/WebServicePortMetaData.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/3ad83ffeeb3fa2d5fee796429d552bd9ba9d0692", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/529e872eb5d3a8c305bbdd5dfcd97377936ae8d8", "message": "Fix NPE in the test case failure\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@528730 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_57", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/3ad83ffeeb3fa2d5fee796429d552bd9ba9d0692/modules/core/src/test/java/org/apache/tuscany/core/wire/WireUtilsTestCase.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/3ad83ffeeb3fa2d5fee796429d552bd9ba9d0692/modules/core/src/test/java/org/apache/tuscany/core/wire/WireUtilsTestCase.java", "sha": "3a5f93d5a92d7ef2954f92318839abe5f5c2c57b", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/core/src/test/java/org/apache/tuscany/core/wire/WireUtilsTestCase.java?ref=3ad83ffeeb3fa2d5fee796429d552bd9ba9d0692", "patch": "@@ -25,6 +25,7 @@\n \n import org.apache.tuscany.interfacedef.Operation;\n import org.apache.tuscany.interfacedef.impl.OperationImpl;\n+import org.apache.tuscany.interfacedef.java.impl.JavaInterfaceImpl;\n import org.apache.tuscany.spi.wire.ChainHolder;\n import org.apache.tuscany.spi.wire.InvocationChain;\n import org.apache.tuscany.spi.wire.Wire;\n@@ -39,6 +40,7 @@ public void testCreateInterfaceToWireMapping() throws Exception {\n         Wire wire = new WireImpl();\n         Operation op = new OperationImpl();\n         op.setName(\"hello\");\n+        op.setInterface(new JavaInterfaceImpl());\n         InvocationChain chain = new InvocationChainImpl(op);\n         wire.addInvocationChain(chain);\n         Map<Method, ChainHolder> chains = WireUtils.createInterfaceToWireMapping(Foo.class, wire);\n@@ -50,6 +52,7 @@ public void testCreateInterfaceToWireMappingNoOperation() throws Exception {\n         Wire wire = new WireImpl();\n         Operation op = new OperationImpl();\n         op.setName(\"goodbye\");\n+        op.setInterface(new JavaInterfaceImpl());\n         InvocationChain chain = new InvocationChainImpl(op);\n         wire.addInvocationChain(chain);\n         try {", "filename": "modules/core/src/test/java/org/apache/tuscany/core/wire/WireUtilsTestCase.java"}, {"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/3ad83ffeeb3fa2d5fee796429d552bd9ba9d0692/modules/interface-java/src/main/java/org/apache/tuscany/interfacedef/java/impl/JavaInterfaceUtil.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/3ad83ffeeb3fa2d5fee796429d552bd9ba9d0692/modules/interface-java/src/main/java/org/apache/tuscany/interfacedef/java/impl/JavaInterfaceUtil.java", "sha": "8c701bec4fc07745c9c7ba241f7eb62d78087047", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/interface-java/src/main/java/org/apache/tuscany/interfacedef/java/impl/JavaInterfaceUtil.java?ref=3ad83ffeeb3fa2d5fee796429d552bd9ba9d0692", "patch": "@@ -24,6 +24,7 @@\n import java.util.List;\n \n import org.apache.tuscany.interfacedef.DataType;\n+import org.apache.tuscany.interfacedef.Interface;\n import org.apache.tuscany.interfacedef.Operation;\n \n /**\n@@ -49,7 +50,8 @@ private JavaInterfaceUtil() {\n      */\n     public static  Method findMethod(Class<?> implClass, Operation operation) throws NoSuchMethodException {\n         String name = operation.getName();\n-        if(operation.getInterface().isRemotable()) {\n+        Interface interface1 = operation.getInterface();\n+        if(interface1!=null && interface1.isRemotable()) {\n             for(Method m: implClass.getMethods()) {\n                 if(m.getName().equals(name)) {\n                     return m;", "filename": "modules/interface-java/src/main/java/org/apache/tuscany/interfacedef/java/impl/JavaInterfaceUtil.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/531915b653015161a923dd91bd90362523429218", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/a0f2b9f6880e6f7a7a3664458bd0e104fcec6af9", "message": "Fixing NPE when model object is not available\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@526619 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_58", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/531915b653015161a923dd91bd90362523429218/modules/contribution-impl/src/main/java/org/apache/tuscany/services/contribution/ContributionServiceImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/531915b653015161a923dd91bd90362523429218/modules/contribution-impl/src/main/java/org/apache/tuscany/services/contribution/ContributionServiceImpl.java", "sha": "3555a6a04ee7ccd9bbf407538a00c4784edabcb6", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/contribution-impl/src/main/java/org/apache/tuscany/services/contribution/ContributionServiceImpl.java?ref=531915b653015161a923dd91bd90362523429218", "patch": "@@ -284,7 +284,9 @@ private void processResolvePhase(Contribution contribution) throws ContributionE\n         // for each artifact that was processed on the contribution\n         for (DeployedArtifact artifact : contribution.getArtifacts().values()) {\n             // resolve the model object\n-           this.artifactProcessor.resolve(artifact.getModelObject(), artifactResolver);\n+            if (artifact.getModelObject() != null) {\n+                this.artifactProcessor.resolve(artifact.getModelObject(), artifactResolver);\n+            }\n         }\n \n     }", "filename": "modules/contribution-impl/src/main/java/org/apache/tuscany/services/contribution/ContributionServiceImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/e90d6581def68234bde787075bf15d773e331543", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/5af45404643bde439e333e71e818f00262dcc1f5", "message": "avoid NPE \n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@519863 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_59", "file": [{"additions": 8, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e90d6581def68234bde787075bf15d773e331543/kernel/core/src/main/java/org/apache/tuscany/core/implementation/java/JavaPhysicalComponentGenerator.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e90d6581def68234bde787075bf15d773e331543/kernel/core/src/main/java/org/apache/tuscany/core/implementation/java/JavaPhysicalComponentGenerator.java", "sha": "4a41a891ea21ef491cd1e1a5c8adeea54cfe1d54", "changes": 10, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/kernel/core/src/main/java/org/apache/tuscany/core/implementation/java/JavaPhysicalComponentGenerator.java?ref=e90d6581def68234bde787075bf15d773e331543", "patch": "@@ -71,8 +71,14 @@ public void generate(ComponentDefinition<JavaImplementation> definition, Generat\n         pDefinition.setScope(type.getImplementationScope());\n         // TODO get classloader id\n         ReflectiveIFProviderDefinition provider = new ReflectiveIFProviderDefinition();\n-        provider.setDestroyMethod(type.getDestroyMethod().toString());\n-        provider.setInitMethod(type.getInitMethod().toString());\n+        Method destroyMethod = type.getDestroyMethod();\n+        if (destroyMethod != null) {\n+            provider.setDestroyMethod(destroyMethod.toString());\n+        }\n+        Method initMethod = type.getInitMethod();\n+        if (initMethod != null) {\n+            provider.setInitMethod(initMethod.toString());\n+        }\n         provider.setImplementationClass(implementation.getImplementationClass().getName());\n         // TODO ctor arguments\n         // TODO set CDI source for ref, props, and callbacks", "filename": "kernel/core/src/main/java/org/apache/tuscany/core/implementation/java/JavaPhysicalComponentGenerator.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/7c051bc6eb929f97991e27de6401be00809a47f3", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/2890893fcc12b6740794fb4f5cfff333545f3220", "message": "avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@510840 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_60", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/7c051bc6eb929f97991e27de6401be00809a47f3/kernel/core/src/main/java/org/apache/tuscany/core/resolver/DefaultAutowireResolver.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/7c051bc6eb929f97991e27de6401be00809a47f3/kernel/core/src/main/java/org/apache/tuscany/core/resolver/DefaultAutowireResolver.java", "sha": "1e5792e277c61cbaa3e32f42887dd2942b5dc720", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/kernel/core/src/main/java/org/apache/tuscany/core/resolver/DefaultAutowireResolver.java?ref=7c051bc6eb929f97991e27de6401be00809a47f3", "patch": "@@ -115,6 +115,9 @@ private void resolve(CompositeComponentType<?, ?, ?> compositeType,\n             ComponentType<?, ?, ?> candidateType = candidateImpl.getComponentType();\n             for (ServiceDefinition service : candidateType.getServices().values()) {\n                 Class<?> serviceInterface = service.getServiceContract().getInterfaceClass();\n+                if (serviceInterface == null){\n+                    continue;\n+                }\n                 if (requiredInterface.equals(serviceInterface)) {\n                     targetUri = URI.create(candidate.getUri().toString() + service.getUri());\n                     break;", "filename": "kernel/core/src/main/java/org/apache/tuscany/core/resolver/DefaultAutowireResolver.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/a5b411d608fe8b03c5c5c77561ca93fa6ea8f3c9", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/22c539136de454469e19e138eadd0e4b6203ed8f", "message": "Fix the NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@453291 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_61", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/a5b411d608fe8b03c5c5c77561ca93fa6ea8f3c9/kernel/spi/src/main/java/org/apache/tuscany/spi/databinding/extension/DataBindingExtension.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/a5b411d608fe8b03c5c5c77561ca93fa6ea8f3c9/kernel/spi/src/main/java/org/apache/tuscany/spi/databinding/extension/DataBindingExtension.java", "sha": "ff578ab1d3673347e3127aed8d3fa5b01fac4719", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/kernel/spi/src/main/java/org/apache/tuscany/spi/databinding/extension/DataBindingExtension.java?ref=a5b411d608fe8b03c5c5c77561ca93fa6ea8f3c9", "patch": "@@ -72,6 +72,9 @@ public void init() {\n     }\n \n     public DataType introspect(Class<?> javaType) {\n+        if (baseType == null || javaType == null) {\n+            return null;\n+        }\n         if (baseType.isAssignableFrom(javaType)) {\n             return new DataType<Class>(name, javaType, baseType);\n         } else {", "filename": "kernel/spi/src/main/java/org/apache/tuscany/spi/databinding/extension/DataBindingExtension.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/f25e36bdebd1035f52599125cd2f12b1b1d7822d", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/9bf3be93f7549b5d6f9d61f539e0500a439e1149", "message": "avoid npe if request ends with no session\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@453060 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_62", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/f25e36bdebd1035f52599125cd2f12b1b1d7822d/runtime/webapp/src/main/java/org/apache/tuscany/runtime/webapp/TuscanyRequestListener.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/f25e36bdebd1035f52599125cd2f12b1b1d7822d/runtime/webapp/src/main/java/org/apache/tuscany/runtime/webapp/TuscanyRequestListener.java", "sha": "0da3f20b22aa37a26fc7305bf3240e42e4a8adc4", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/runtime/webapp/src/main/java/org/apache/tuscany/runtime/webapp/TuscanyRequestListener.java?ref=f25e36bdebd1035f52599125cd2f12b1b1d7822d", "patch": "@@ -44,7 +44,7 @@ public void requestDestroyed(ServletRequestEvent servletRequestEvent) {\n         if (servletRequest instanceof HttpServletRequest) {\r\n             HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;\r\n             HttpSession session = httpServletRequest.getSession(false);\r\n-            runtime.httpRequestEnded(session.getId());\r\n+            runtime.httpRequestEnded(session == null ? null : session.getId());\r\n \r\n         }\r\n \r", "filename": "runtime/webapp/src/main/java/org/apache/tuscany/runtime/webapp/TuscanyRequestListener.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/61a7ba49f6d0fa95c8d04b1189aad853665f65bf", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/154e71117608cbf8c80cb94f605ef2296d044e4a", "message": "Fix the NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@452225 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_63", "file": [{"additions": 6, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/61a7ba49f6d0fa95c8d04b1189aad853665f65bf/kernel/spi/src/main/java/org/apache/tuscany/spi/extension/CompositeComponentExtension.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/61a7ba49f6d0fa95c8d04b1189aad853665f65bf/kernel/spi/src/main/java/org/apache/tuscany/spi/extension/CompositeComponentExtension.java", "sha": "93aec79bfda936753ebccdfda879cc5b9b0c405a", "changes": 8, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/kernel/spi/src/main/java/org/apache/tuscany/spi/extension/CompositeComponentExtension.java?ref=61a7ba49f6d0fa95c8d04b1189aad853665f65bf", "patch": "@@ -353,7 +353,7 @@ public Object getSystemServiceInstance(String name) throws TargetException {\n                     return instanceInterface.cast(this);\n                 }\n                 // resolve to parent\n-                if (parent == null) {\n+                if (getParent() == null) {\n                     return null;\n                 }\n                 return getParent().resolveInstance(instanceInterface);\n@@ -387,7 +387,11 @@ public Object getSystemServiceInstance(String name) throws TargetException {\n         } else {\n             try {\n                 // resolve to parent\n-                return getParent().resolveSystemInstance(instanceInterface);\n+                if (getParent() != null) {\n+                    return getParent().resolveSystemInstance(instanceInterface);\n+                } else {\n+                    return null;\n+                }\n             } catch (AutowireResolutionException e) {\n                 e.addContextName(getName());\n                 throw e;", "filename": "kernel/spi/src/main/java/org/apache/tuscany/spi/extension/CompositeComponentExtension.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/9fbce1c3f4c27eac8b2032cc02ba7b04a685696d", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/e99c368d17c30cf4a6937dcd1d5b66a4f79e6f1e", "message": "Workaround the NPE if the service contract is WSDL\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@441718 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_64", "file": [{"additions": 5, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/9fbce1c3f4c27eac8b2032cc02ba7b04a685696d/kernel/core/src/main/java/org/apache/tuscany/core/implementation/composite/AbstractCompositeComponent.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/9fbce1c3f4c27eac8b2032cc02ba7b04a685696d/kernel/core/src/main/java/org/apache/tuscany/core/implementation/composite/AbstractCompositeComponent.java", "sha": "c17f1cdf0fdae43ddae3fe788b98f8327c3604f2", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/kernel/core/src/main/java/org/apache/tuscany/core/implementation/composite/AbstractCompositeComponent.java?ref=9fbce1c3f4c27eac8b2032cc02ba7b04a685696d", "patch": "@@ -255,7 +255,11 @@ protected void registerAutowireExternal(Class<?> interfaze, SystemService contex\n     }\n \n     protected void registerAutowireInternal(Class<?> interfaze, SCAObject context) {\n-        assert interfaze != null : \"Interface was null\";\n+        // assert interfaze != null : \"Interface was null\";\n+        if (interfaze == null) {\n+            // The ServiceContract is not from Java\n+            return;\n+        }\n         if (autowireInternal.containsKey(interfaze)) {\n             return;\n         }", "filename": "kernel/core/src/main/java/org/apache/tuscany/core/implementation/composite/AbstractCompositeComponent.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/17276882fabeb9e9a8c3967d45efe9a7fb246ac3", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/eda8c6c84e7da8ed71d574cb6b268834ff71997c", "message": "Fixed NPE in tomcat listener when stopping the server\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@383009 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_65", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/17276882fabeb9e9a8c3967d45efe9a7fb246ac3/tomcat/src/main/java/org/apache/tuscany/tomcat/TuscanyContextListener.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/17276882fabeb9e9a8c3967d45efe9a7fb246ac3/tomcat/src/main/java/org/apache/tuscany/tomcat/TuscanyContextListener.java", "sha": "04977dbc27d076ada9843ceca1c083ce08a25717", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/tomcat/src/main/java/org/apache/tuscany/tomcat/TuscanyContextListener.java?ref=17276882fabeb9e9a8c3967d45efe9a7fb246ac3", "patch": "@@ -121,7 +121,9 @@ private void startContext(Context ctx) {\n     }\n \n     private void stopContext(Context ctx) {\n-        moduleContext.fireEvent(EventContext.MODULE_START, null);\n+        if (moduleContext!=null) {\n+            moduleContext.fireEvent(EventContext.MODULE_START, null);\n+        }\n         // todo unload module component from runtime\n     }\n ", "filename": "tomcat/src/main/java/org/apache/tuscany/tomcat/TuscanyContextListener.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/3db386e8736494c73f367be5bd6f2c5fdebb8173", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/2d853024e43377e55aa526d0ca9fb610559769f8", "message": "NPE fix in samples due to JDKProxyFactory changes\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@376224 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_66", "file": [{"additions": 20, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/3db386e8736494c73f367be5bd6f2c5fdebb8173/container.java/src/main/java/org/apache/tuscany/container/java/handler/ScopedJavaComponentInvoker.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/3db386e8736494c73f367be5bd6f2c5fdebb8173/container.java/src/main/java/org/apache/tuscany/container/java/handler/ScopedJavaComponentInvoker.java", "sha": "f6d984880789806b6b919c7c60a8186f55902755", "changes": 21, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/container.java/src/main/java/org/apache/tuscany/container/java/handler/ScopedJavaComponentInvoker.java?ref=3db386e8736494c73f367be5bd6f2c5fdebb8173", "patch": "@@ -33,6 +33,8 @@\n \n     private QualifiedName name;\n \n+    private Object target;\n+\n     public ScopedJavaComponentInvoker(String serviceName, Method operation, ScopeContext container) {\n         super(operation);\n         assert (serviceName != null) : \"No service name specified\";\n@@ -41,8 +43,25 @@ public ScopedJavaComponentInvoker(String serviceName, Method operation, ScopeCon\n         this.container = container;\n     }\n \n+    public boolean cacheable;\n+\n+    public boolean getCacheable() {\n+        return cacheable;\n+    }\n+\n+    public void setCacheable(boolean val) {\n+        cacheable = val;\n+    }\n+\n     protected Object getInstance() throws TargetException {\n-        return container.getInstance(name);\n+        if (!cacheable) {\n+            return container.getInstance(name);\n+        } else {\n+            if (target == null) {\n+                target = container.getInstance(name);\n+            }\n+            return target;\n+        }\n     }\n \n }", "filename": "container.java/src/main/java/org/apache/tuscany/container/java/handler/ScopedJavaComponentInvoker.java"}, {"additions": 2, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/3db386e8736494c73f367be5bd6f2c5fdebb8173/core/src/main/java/org/apache/tuscany/core/builder/impl/PortRuntimeConfigurationBuilderImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/3db386e8736494c73f367be5bd6f2c5fdebb8173/core/src/main/java/org/apache/tuscany/core/builder/impl/PortRuntimeConfigurationBuilderImpl.java", "sha": "7c2ef2ce64e5e52cd82944675f85301835686083", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/core/src/main/java/org/apache/tuscany/core/builder/impl/PortRuntimeConfigurationBuilderImpl.java?ref=3db386e8736494c73f367be5bd6f2c5fdebb8173", "patch": "@@ -127,9 +127,9 @@ private ProxyFactory buildProxyFactory(ConfiguredService configuredService) {\n         // Create a proxy factory\n         ProxyFactory proxyFactory = new JDKProxyFactory();\n         try {\n-            proxyFactory.initialize();\n             proxyFactory.setBusinessInterface(javaInterface);\n             proxyFactory.setProxyConfiguration(proxyConfiguration);\n+            proxyFactory.initialize();\n         } catch (ProxyInitializationException e) {\n             throw new ServiceRuntimeException(e);\n         }\n@@ -173,9 +173,9 @@ private ProxyFactory buildProxyFactory(ConfiguredReference configuredReference)\n         // Create a proxy factory\n         ProxyFactory proxyFactory = new JDKProxyFactory();\n         try {\n-            proxyFactory.initialize();\n             proxyFactory.setBusinessInterface(javaInterface);\n             proxyFactory.setProxyConfiguration(proxyConfiguration);\n+            proxyFactory.initialize();\n         } catch (ProxyInitializationException e) {\n             throw new ServiceRuntimeException(e);\n         }", "filename": "core/src/main/java/org/apache/tuscany/core/builder/impl/PortRuntimeConfigurationBuilderImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/a35ea6aa0f8611276af0b695edf244e6e79df90c", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/889290c54cfae0888be49a71def31476c591d897", "message": "Enhance the include/exclude filter processing and fix a NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@1386756 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_67", "file": [{"additions": 8, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/a35ea6aa0f8611276af0b695edf244e6e79df90c/modules/binding-rest-runtime/src/main/java/org/apache/tuscany/sca/binding/rest/provider/DataBindingJAXRSWriter.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/a35ea6aa0f8611276af0b695edf244e6e79df90c/modules/binding-rest-runtime/src/main/java/org/apache/tuscany/sca/binding/rest/provider/DataBindingJAXRSWriter.java", "sha": "6064d23b1ed603b84def4115101589b8ca499858", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-rest-runtime/src/main/java/org/apache/tuscany/sca/binding/rest/provider/DataBindingJAXRSWriter.java?ref=a35ea6aa0f8611276af0b695edf244e6e79df90c", "patch": "@@ -120,8 +120,16 @@ public void writeTo(T t,\n                 Set<String> fieldSet = tokenize(fields);\n                 for (String f : fieldSet) {\n                     if (f.startsWith(\"-\")) {\n+                        if (excludedFields == null) {\n+                            excludedFields = new HashSet<String>();\n+                            metadata.put(EXCLUDED_FIELDS, excludedFields);\n+                        }\n                         excludedFields.add(f.substring(1));\n                     } else {\n+                        if (includedFields == null) {\n+                            includedFields = new HashSet<String>();\n+                            metadata.put(INCLUDED_FIELDS, includedFields);\n+                        }\n                         includedFields.add(f);\n                     }\n                 }", "filename": "modules/binding-rest-runtime/src/main/java/org/apache/tuscany/sca/binding/rest/provider/DataBindingJAXRSWriter.java"}, {"additions": 34, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/a35ea6aa0f8611276af0b695edf244e6e79df90c/modules/binding-rest-runtime/src/test/java/org/apache/tuscany/sca/binding/rest/wireformat/json/CatalogServiceTestCase.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/a35ea6aa0f8611276af0b695edf244e6e79df90c/modules/binding-rest-runtime/src/test/java/org/apache/tuscany/sca/binding/rest/wireformat/json/CatalogServiceTestCase.java", "sha": "7a07c9b5c86271a76ad211e690a71208a4f58c27", "changes": 36, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-rest-runtime/src/test/java/org/apache/tuscany/sca/binding/rest/wireformat/json/CatalogServiceTestCase.java?ref=a35ea6aa0f8611276af0b695edf244e6e79df90c", "patch": "@@ -91,15 +91,47 @@ public void testGetInvocation() throws Exception {\n     }\n \n     @Test\n-    public void testGetInvocationWithFilter() throws Exception {\n+    public void testGetInvocationWithFilter1() throws Exception {\n         WebConversation wc = new WebConversation();\n-        WebRequest request = new GetMethodWebRequest(SERVICE_URL + \"?excludedFields=price\");\n+        WebRequest request = new GetMethodWebRequest(SERVICE_URL + \"?excludedFields=items.price\");\n         request.setHeaderField(\"Content-Type\", \"application/json\");\n         WebResponse response = wc.getResource(request);\n \n         Assert.assertEquals(200, response.getResponseCode());\n         String json = response.getText();\n+        System.out.println(json);\n         Assert.assertNotNull(json);\n+        Assert.assertTrue(json.contains(\"name\"));\n+        Assert.assertFalse(json.contains(\"price\"));\n+    }\n+\n+    @Test\n+    public void testGetInvocationWithFilter2() throws Exception {\n+        WebConversation wc = new WebConversation();\n+        WebRequest request = new GetMethodWebRequest(SERVICE_URL + \"?fields=items,-items.price\");\n+        request.setHeaderField(\"Content-Type\", \"application/json\");\n+        WebResponse response = wc.getResource(request);\n+\n+        Assert.assertEquals(200, response.getResponseCode());\n+        String json = response.getText();\n+        System.out.println(json);\n+        Assert.assertNotNull(json);\n+        Assert.assertTrue(json.contains(\"name\"));\n+        Assert.assertFalse(json.contains(\"price\"));\n+    }\n+\n+    @Test\n+    public void testGetInvocationWithFilter3() throws Exception {\n+        WebConversation wc = new WebConversation();\n+        WebRequest request = new GetMethodWebRequest(SERVICE_URL + \"?includedFields=items.name&excludedFields=items\");\n+        request.setHeaderField(\"Content-Type\", \"application/json\");\n+        WebResponse response = wc.getResource(request);\n+\n+        Assert.assertEquals(200, response.getResponseCode());\n+        String json = response.getText();\n+        System.out.println(json);\n+        Assert.assertNotNull(json);\n+        Assert.assertTrue(json.contains(\"name\"));\n         Assert.assertFalse(json.contains(\"price\"));\n     }\n ", "filename": "modules/binding-rest-runtime/src/test/java/org/apache/tuscany/sca/binding/rest/wireformat/json/CatalogServiceTestCase.java"}, {"additions": 38, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/a35ea6aa0f8611276af0b695edf244e6e79df90c/modules/databinding-json/src/main/java/org/apache/tuscany/sca/databinding/json/jackson/JacksonHelper.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/a35ea6aa0f8611276af0b695edf244e6e79df90c/modules/databinding-json/src/main/java/org/apache/tuscany/sca/databinding/json/jackson/JacksonHelper.java", "sha": "50a4b0fff82c4c30e545b9c031dc0d2f2ccff3e8", "changes": 54, "status": "modified", "deletions": 16, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/databinding-json/src/main/java/org/apache/tuscany/sca/databinding/json/jackson/JacksonHelper.java?ref=a35ea6aa0f8611276af0b695edf244e6e79df90c", "patch": "@@ -24,8 +24,10 @@\n import java.io.OutputStream;\n import java.io.Reader;\n import java.io.StringWriter;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import java.util.Stack;\n \n@@ -272,20 +274,23 @@ public static FilterProvider configureFilterProvider(TransformationContext conte\n     }\n \n     private static class TuscanyBeanPropertyFilter extends SimpleBeanPropertyFilter {\n-        private Set<String> includedFields;\n-        private Set<String> excludedFields;\n+        private List<String> includedFields;\n+        private List<String> excludedFields;\n \n         private Stack<String> path = new Stack<String>();\n \n         public TuscanyBeanPropertyFilter(Set<String> includedFields, Set<String> excludedFields) {\n             if (includedFields == null) {\n-                includedFields = Collections.emptySet();\n+                includedFields = new HashSet<String>();\n+                includedFields.add(\"\"); // Allows any fields\n             }\n             if (excludedFields == null) {\n                 excludedFields = Collections.emptySet();\n             }\n-            this.includedFields = includedFields;\n-            this.excludedFields = excludedFields;\n+            this.includedFields = new ArrayList<String>(includedFields);\n+            Collections.sort(this.includedFields, Collections.reverseOrder());\n+            this.excludedFields = new ArrayList<String>(excludedFields);\n+            Collections.sort(this.excludedFields, Collections.reverseOrder());\n         }\n \n         @Override\n@@ -294,11 +299,11 @@ public void serializeAsField(Object bean,\n                                      SerializerProvider provider,\n                                      BeanPropertyWriter writer) throws Exception {\n             path.push(writer.getName());\n+            String fname = getFullName(path);\n             try {\n                 // System.out.println(path);\n-                if (matches(path, includedFields, true)) {\n-                    writer.serializeAsField(bean, jgen, provider);\n-                } else if (includedFields.isEmpty() && !matches(path, excludedFields, false)) {\n+                if (isAllowed(fname, includedFields, excludedFields)) {\n+                    // Matching includes, write\n                     writer.serializeAsField(bean, jgen, provider);\n                 }\n             } finally {\n@@ -312,7 +317,7 @@ public void serializeAsField(Object bean,\n          * @param target\n          * @return\n          */\n-        private boolean isPrefix(String source, String target) {\n+        private boolean matches(String source, String target) {\n             int index = source.indexOf(target);\n             if (index == -1) {\n                 return false;\n@@ -330,7 +335,29 @@ private boolean isPrefix(String source, String target) {\n          * @param included\n          * @return\n          */\n-        private boolean matches(Stack<String> path, Set<String> patterns, boolean included) {\n+        private boolean isAllowed(String fullName, List<String> included, List<String> excluded) {\n+            String ex = null;\n+            for (String p : excluded) {\n+                if (matches(fullName, p)) {\n+                    ex = p;\n+                    break;\n+                }\n+            }\n+            for (String p : included) {\n+                if (matches(fullName, p) // If the parent element is included\n+                    || matches(p, fullName) // If one of the child elements is included \n+                    ) {\n+                    if (ex != null && ex.length() > p.length()) {\n+                        // We already have an exclusion pattern that's more matching  \n+                        return false;\n+                    }\n+                    return true;\n+                }\n+            }\n+            return ex == null && included.contains(\"\");\n+        }\n+\n+        private String getFullName(Stack<String> path) {\n             StringBuilder builder = new StringBuilder();\n             for (int i = 0; i < path.size(); i++) {\n                 builder.append(path.get(i));\n@@ -339,12 +366,7 @@ private boolean matches(Stack<String> path, Set<String> patterns, boolean includ\n                 }\n             }\n             String qname = builder.toString();\n-            for (String p : patterns) {\n-                if ((included && isPrefix(p, qname)) || ((!included) && isPrefix(qname, p))) {\n-                    return true;\n-                }\n-            }\n-            return false;\n+            return qname;\n         }\n \n     }", "filename": "modules/databinding-json/src/main/java/org/apache/tuscany/sca/databinding/json/jackson/JacksonHelper.java"}, {"additions": 8, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/a35ea6aa0f8611276af0b695edf244e6e79df90c/modules/databinding-json/src/test/java/org/apache/tuscany/sca/databinding/json/jackson/Object2JSONTestCase.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/a35ea6aa0f8611276af0b695edf244e6e79df90c/modules/databinding-json/src/test/java/org/apache/tuscany/sca/databinding/json/jackson/Object2JSONTestCase.java", "sha": "d46f7ecf8ef157d33e08ac8561322812b5328660", "changes": 10, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/databinding-json/src/test/java/org/apache/tuscany/sca/databinding/json/jackson/Object2JSONTestCase.java?ref=a35ea6aa0f8611276af0b695edf244e6e79df90c", "patch": "@@ -271,19 +271,25 @@ public void testBean2JSONWithFilter() throws Exception {\n         Object2JSON t1 = new Object2JSON();\n         TransformationContext context = new TransformationContextImpl();\n         Set<String> included = new HashSet<String>();\n+        Set<String> excluded = new HashSet<String>();\n         included.add(\"name\");\n-        included.add(\"you.name\");\n+        included.add(\"you\");\n+        excluded.add(\"you.id\");\n+\n         // included.add(\"you.id\");\n         context.getMetadata().put(\"includedFields\", included);\n+        context.getMetadata().put(\"excludedFields\", excluded);\n+\n         Object result = t1.transform(me, context);\n         System.out.println(result);\n         JSONObject json = new JSONObject(result.toString());\n         Assert.assertTrue(json.has(\"name\"));\n         Assert.assertTrue(json.has(\"you\"));\n         Assert.assertTrue(json.getJSONObject(\"you\").has(\"name\"));\n         Assert.assertFalse(json.getJSONObject(\"you\").has(\"id\"));\n+        \n         context = new TransformationContextImpl();\n-        Set<String> excluded = new HashSet<String>();\n+        excluded = new HashSet<String>();\n         excluded.add(\"you.name\");\n         excluded.add(\"age\");\n         context.getMetadata().put(\"excludedFields\", excluded);", "filename": "modules/databinding-json/src/test/java/org/apache/tuscany/sca/databinding/json/jackson/Object2JSONTestCase.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/7eaf6667be18f25736c5ef86cd8085d5bdf5403c", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/645d2b9563b60ae00b9f94e0892fab6dafe15f20", "message": "Avoid NPE for the remote endpoints which don't have interface contracts set\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@1367808 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_68", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/7eaf6667be18f25736c5ef86cd8085d5bdf5403c/modules/core/src/main/java/org/apache/tuscany/sca/core/runtime/impl/EndpointReferenceBinderImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/7eaf6667be18f25736c5ef86cd8085d5bdf5403c/modules/core/src/main/java/org/apache/tuscany/sca/core/runtime/impl/EndpointReferenceBinderImpl.java", "sha": "a206a7d1611193adffeb775feec15f5e5eaf1126", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/core/src/main/java/org/apache/tuscany/sca/core/runtime/impl/EndpointReferenceBinderImpl.java?ref=7eaf6667be18f25736c5ef86cd8085d5bdf5403c", "patch": "@@ -1089,7 +1089,7 @@ private boolean haveMatchingInterfaceContracts(EndpointReference endpointReferen\n         InterfaceContract endpointReferenceContract = endpointReference.getReference().getInterfaceContract();\n         InterfaceContract endpointContract = endpoint.getComponentServiceInterfaceContract();\n         \n-        if (endpointReferenceContract == null){\n+        if (endpointReferenceContract == null || endpointContract == null){\n             matchAudit.append(\"Match because there is no interface contract on the reference \");\n             matchAudit.appendSeperator();\n             return true;", "filename": "modules/core/src/main/java/org/apache/tuscany/sca/core/runtime/impl/EndpointReferenceBinderImpl.java"}, {"additions": 12, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/7eaf6667be18f25736c5ef86cd8085d5bdf5403c/modules/node-impl/src/main/java/org/apache/tuscany/sca/node/configuration/xml/RemoteEndpointsProcessor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/7eaf6667be18f25736c5ef86cd8085d5bdf5403c/modules/node-impl/src/main/java/org/apache/tuscany/sca/node/configuration/xml/RemoteEndpointsProcessor.java", "sha": "174bee413922215cde97f6058762d0a86f3722a6", "changes": 12, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/node-impl/src/main/java/org/apache/tuscany/sca/node/configuration/xml/RemoteEndpointsProcessor.java?ref=7eaf6667be18f25736c5ef86cd8085d5bdf5403c", "patch": "@@ -41,6 +41,8 @@\n import org.apache.tuscany.sca.contribution.resolver.ModelResolver;\n import org.apache.tuscany.sca.core.ExtensionPointRegistry;\n import org.apache.tuscany.sca.core.FactoryExtensionPoint;\n+import org.apache.tuscany.sca.interfacedef.java.JavaInterfaceContract;\n+import org.apache.tuscany.sca.interfacedef.java.JavaInterfaceFactory;\n import org.apache.tuscany.sca.policy.PolicySet;\n \n /**\n@@ -96,8 +98,18 @@ public RemoteEndpoints read(XMLStreamReader reader, ProcessorContext context) th\n                 for (ComponentService service : component.getServices()) {\n                     for (Binding binding : service.getBindings()) {\n                         Endpoint endpoint = assemblyFactory.createEndpoint();\n+                        endpoint.setRemote(true);\n                         endpoint.setComponent(component);\n                         endpoint.setService(service);\n+                        /*\n+                        if (service.getInterfaceContract() == null) {\n+                            JavaInterfaceFactory interfaceFactory =\n+                                modelFactories(registry).getFactory(JavaInterfaceFactory.class);\n+                            JavaInterfaceContract contract = interfaceFactory.createJavaInterfaceContract();\n+                            contract.setInterface(interfaceFactory.createJavaInterface());\n+                            service.setInterfaceContract(contract);\n+                        }\n+                        */\n                         endpoint.setBinding(binding);\n \n                         // retrieve the stash of intents and policy sets from the component", "filename": "modules/node-impl/src/main/java/org/apache/tuscany/sca/node/configuration/xml/RemoteEndpointsProcessor.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/d0489e4d137a1dfad78d9c2a460b47091ac25af3", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/d85c07125ae9c0b4c801933d44511339ecf0c327", "message": "Avoid NPE when binding doesn't support callback\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@1304325 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_69", "file": [{"additions": 6, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/d0489e4d137a1dfad78d9c2a460b47091ac25af3/modules/core/src/main/java/org/apache/tuscany/sca/core/context/impl/CallbackServiceReferenceImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/d0489e4d137a1dfad78d9c2a460b47091ac25af3/modules/core/src/main/java/org/apache/tuscany/sca/core/context/impl/CallbackServiceReferenceImpl.java", "sha": "4c206ec5dbc85376fde1cc8b20ebd1ab86a4da06", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/core/src/main/java/org/apache/tuscany/sca/core/context/impl/CallbackServiceReferenceImpl.java?ref=d0489e4d137a1dfad78d9c2a460b47091ac25af3", "patch": "@@ -132,7 +132,12 @@ public CallbackServiceReferenceImpl(Class<B> interfaze,\n         // to model the callback URI. With these changes the binding can just set a CallbackHandler\n         // in the forward message to get the same effect. Some bindings don't do that hence\n         // the various checks\n-        this.resolvedEndpoint = msgContext.getFrom().getCallbackEndpoint();\n+        this.resolvedEndpoint = null;\n+        \n+        if (msgContext.getFrom() != null){\n+            resolvedEndpoint = msgContext.getFrom().getCallbackEndpoint();\n+        }\n+        \n         if (resolvedEndpoint != null){\n             if (resolvedEndpoint.getBinding() == null){\n                 this.callbackHandler = new CallbackHandler(resolvedEndpoint.getURI());", "filename": "modules/core/src/main/java/org/apache/tuscany/sca/core/context/impl/CallbackServiceReferenceImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/fdf46641b60eb1d0586584f8c6af0f8a5e499a4d", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/35b84c22e5ba9818ad16ef580ac93e15ef4f0921", "message": "Fix a couple of NPE and index out of bound exceptions for async operations with void return types\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@1203688 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_70", "file": [{"additions": 14, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/fdf46641b60eb1d0586584f8c6af0f8a5e499a4d/modules/interface-java-jaxws/src/main/java/org/apache/tuscany/sca/interfacedef/java/jaxws/JAXWSAsyncInterfaceProcessor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/fdf46641b60eb1d0586584f8c6af0f8a5e499a4d/modules/interface-java-jaxws/src/main/java/org/apache/tuscany/sca/interfacedef/java/jaxws/JAXWSAsyncInterfaceProcessor.java", "sha": "daa0bebd81b285db7fb6ab42ae0172900d121ebd", "changes": 21, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/interface-java-jaxws/src/main/java/org/apache/tuscany/sca/interfacedef/java/jaxws/JAXWSAsyncInterfaceProcessor.java?ref=fdf46641b60eb1d0586584f8c6af0f8a5e499a4d", "patch": "@@ -101,7 +101,10 @@ private static boolean isJAXWSAsyncPoolingOperation(Operation operation, Operati\n         }\n \n         //a return type of Response<R> where R is the return type of M\n-        DataType<?> operationOutputType = operation.getOutputType().getLogical().get(0);\n+        DataType<?> operationOutputType = null;\n+        if (operation.getOutputType()!= null && operation.getOutputType().getLogical() != null && operation.getOutputType().getLogical().size() > 0) {\n+            operationOutputType = operation.getOutputType().getLogical().get(0);\n+        }\n         DataType<?> asyncOperationOutputType = asyncOperation.getOutputType().getLogical().get(0);\n \n         if (operationOutputType != null && asyncOperationOutputType != null) {\n@@ -173,7 +176,6 @@ private static boolean isJAXWSAsyncCallbackOperation(Operation operation, Operat\n         Class<?> asyncLastParameterTypeClass = asyncOperationInputType.get(size).getPhysical();\n         if (asyncLastParameterTypeClass == AsyncHandler.class) {\n             //now check the actual type of the AsyncHandler<R> with R\n-            Class<?> returnType = operation.getOutputType().getLogical().get(0).getPhysical();\n             Class<?> asyncActualLastParameterTypeClass = Object.class;\n             if (genericParamType instanceof ParameterizedType) {\n                 ParameterizedType asyncLastParameterType = (ParameterizedType)genericParamType;\n@@ -188,12 +190,17 @@ private static boolean isJAXWSAsyncCallbackOperation(Operation operation, Operat\n                 }\n             }\n \n-            if (returnType == asyncActualLastParameterTypeClass || returnType.isPrimitive()\n-                && primitiveAssignable(returnType, asyncActualLastParameterTypeClass)) {\n-                return true;\n-            } else {\n-                return false;\n+            Class<?> returnType = null;\n+            if (operation.getOutputType() != null && operation.getOutputType().getLogical() != null && operation.getOutputType().getLogical().size() > 0) {\n+                returnType = operation.getOutputType().getLogical().get(0).getPhysical();\n+            }\n+            if (returnType != null) {\n+                if (returnType == asyncActualLastParameterTypeClass || returnType.isPrimitive()\n+                    && primitiveAssignable(returnType, asyncActualLastParameterTypeClass)) {\n+                    return true;\n+                }\n             }\n+            return false;\n         }\n \n         return true;", "filename": "modules/interface-java-jaxws/src/main/java/org/apache/tuscany/sca/interfacedef/java/jaxws/JAXWSAsyncInterfaceProcessor.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/97989a75ce9ab2923deeb9e34f83260da1d2e50c", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/fe006743a8797f4a5ce285b219ef3c421e028ea8", "message": "Use operation instead of method to avoid NPE with async server operation\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@1170560 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_71", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/97989a75ce9ab2923deeb9e34f83260da1d2e50c/modules/interface-java-jaxws/src/main/java/org/apache/tuscany/sca/interfacedef/java/jaxws/JAXWSJavaInterfaceProcessor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/97989a75ce9ab2923deeb9e34f83260da1d2e50c/modules/interface-java-jaxws/src/main/java/org/apache/tuscany/sca/interfacedef/java/jaxws/JAXWSJavaInterfaceProcessor.java", "sha": "e8faa88de3aeb45d696eaee5c426b0a356dfdad8", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/interface-java-jaxws/src/main/java/org/apache/tuscany/sca/interfacedef/java/jaxws/JAXWSJavaInterfaceProcessor.java?ref=97989a75ce9ab2923deeb9e34f83260da1d2e50c", "patch": "@@ -306,7 +306,7 @@ public void visitInterface(JavaInterface contract) throws InvalidInterfaceExcept\n                 }\n                 \n                 List<ElementInfo> inputElements = new ArrayList<ElementInfo>();\n-                for (int i = 0; i < method.getParameterTypes().length; i++) {\n+                for (int i = 0; i < operation.getInputType().getLogical().size(); i++) {\n                     WebParam param = getAnnotation(method, i, WebParam.class);\n                     ns = param != null ? param.targetNamespace() : \"\";\n                     // Default to \"\" for doc-lit-wrapped && non-header", "filename": "modules/interface-java-jaxws/src/main/java/org/apache/tuscany/sca/interfacedef/java/jaxws/JAXWSJavaInterfaceProcessor.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/735516c37a2c87457de0e1be6f97604c1420162d", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/7d462418e553719f93544a694f471fab432d6d31", "message": "Update jms wireformats to fix NPE with async services\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@1160610 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_72", "file": [{"additions": 7, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/735516c37a2c87457de0e1be6f97604c1420162d/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsbytes/runtime/WireFormatJMSBytesProviderFactory.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/735516c37a2c87457de0e1be6f97604c1420162d/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsbytes/runtime/WireFormatJMSBytesProviderFactory.java", "sha": "e6ef82e55da287da0e41d43de8c8f8fb2b23abc8", "changes": 8, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsbytes/runtime/WireFormatJMSBytesProviderFactory.java?ref=735516c37a2c87457de0e1be6f97604c1420162d", "patch": "@@ -19,6 +19,9 @@\n \n package org.apache.tuscany.sca.binding.jms.wireformat.jmsbytes.runtime;\n \n+import org.apache.tuscany.sca.binding.jms.JMSBinding;\n+import org.apache.tuscany.sca.binding.jms.provider.JMSResourceFactory;\n+import org.apache.tuscany.sca.binding.jms.provider.JMSResourceFactoryExtensionPoint;\n import org.apache.tuscany.sca.binding.jms.wireformat.WireFormatJMSBytes;\n import org.apache.tuscany.sca.core.ExtensionPointRegistry;\n import org.apache.tuscany.sca.provider.WireFormatProvider;\n@@ -31,10 +34,12 @@\n  */\n public class WireFormatJMSBytesProviderFactory implements WireFormatProviderFactory<WireFormatJMSBytes> {\n     private ExtensionPointRegistry registry;\n+    private JMSResourceFactoryExtensionPoint jmsRFEP;\n     \n     public WireFormatJMSBytesProviderFactory(ExtensionPointRegistry registry) {\n         super();\n         this.registry = registry;\n+        jmsRFEP = (JMSResourceFactoryExtensionPoint)registry.getExtensionPoint(JMSResourceFactoryExtensionPoint.class);\n     }\n \n     /**\n@@ -46,7 +51,8 @@ public WireFormatProvider createReferenceWireFormatProvider(RuntimeEndpointRefer\n     /**\n       */\n     public WireFormatProvider createServiceWireFormatProvider(RuntimeEndpoint endpoint) {\n-        return new WireFormatJMSBytesServiceProvider(registry, endpoint);\n+        JMSResourceFactory jmsRF = jmsRFEP.createJMSResourceFactory((JMSBinding)endpoint.getBinding());\n+        return new WireFormatJMSBytesServiceProvider(registry, endpoint, jmsRF);\n     }\n \n     /**", "filename": "modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsbytes/runtime/WireFormatJMSBytesProviderFactory.java"}, {"additions": 13, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/735516c37a2c87457de0e1be6f97604c1420162d/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsbytes/runtime/WireFormatJMSBytesServiceInterceptor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/735516c37a2c87457de0e1be6f97604c1420162d/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsbytes/runtime/WireFormatJMSBytesServiceInterceptor.java", "sha": "f8d88f6809a1b14372b14e842c0c70899f11fcbc", "changes": 14, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsbytes/runtime/WireFormatJMSBytesServiceInterceptor.java?ref=735516c37a2c87457de0e1be6f97604c1420162d", "patch": "@@ -91,6 +91,12 @@ public Message invokeRequest(Message msg) {\n     public Message invokeResponse(Message msg) {\n         // get the jms context\n         JMSBindingContext context = msg.getBindingContext();\n+        // The Binding Context may be null on an asynchronous response - in which case, create a new one\n+        if(context == null) {\n+            context = createBindingContext();\n+            msg.setBindingContext(context);\n+        }\n+\n         Session session = context.getJmsResponseSession();\n \n         javax.jms.Message responseJMSMsg;\n@@ -114,7 +120,13 @@ public void setNext(Invoker next) {\n         this.next = next;\n     }\n     \n-\tpublic Message processRequest(Message msg) {\n+    private JMSBindingContext createBindingContext() {\n+        JMSBindingContext context = new JMSBindingContext();\n+        context.setJmsResourceFactory(jmsResourceFactory);\n+        return context;\n+    }\n+\n+    public Message processRequest(Message msg) {\n \t\treturn invokeRequest(msg);\n \t} // end method processRequest\n ", "filename": "modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsbytes/runtime/WireFormatJMSBytesServiceInterceptor.java"}, {"additions": 8, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/735516c37a2c87457de0e1be6f97604c1420162d/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsbytes/runtime/WireFormatJMSBytesServiceProvider.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/735516c37a2c87457de0e1be6f97604c1420162d/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsbytes/runtime/WireFormatJMSBytesServiceProvider.java", "sha": "fee2ac774822295a2220cd34b0a3ed92117817e6", "changes": 11, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsbytes/runtime/WireFormatJMSBytesServiceProvider.java?ref=735516c37a2c87457de0e1be6f97604c1420162d", "patch": "@@ -21,6 +21,7 @@\n \n import org.apache.tuscany.sca.binding.jms.JMSBinding;\n import org.apache.tuscany.sca.binding.jms.JMSBindingConstants;\n+import org.apache.tuscany.sca.binding.jms.provider.JMSResourceFactory;\n import org.apache.tuscany.sca.binding.jms.wireformat.WireFormatJMSBytes;\n import org.apache.tuscany.sca.core.ExtensionPointRegistry;\n import org.apache.tuscany.sca.interfacedef.InterfaceContract;\n@@ -36,13 +37,17 @@\n     private ExtensionPointRegistry registry;\n     private RuntimeEndpoint endpoint;\n     private JMSBinding binding;\n-    private InterfaceContract interfaceContract; \n+    private InterfaceContract interfaceContract;\n+    private JMSResourceFactory jmsResourceFactory; \n \n     public WireFormatJMSBytesServiceProvider(ExtensionPointRegistry registry,\n-                                             RuntimeEndpoint endpoint) {\n+                                             RuntimeEndpoint endpoint, \n+                                             JMSResourceFactory jmsResourceFactory) {\n         super();\n         this.registry = registry;\n         this.endpoint = endpoint;\n+        this.endpoint = endpoint;\n+        this.jmsResourceFactory = jmsResourceFactory;\n         this.binding = (JMSBinding) endpoint.getBinding();\n         \n         // configure the service based on this wire format\n@@ -81,7 +86,7 @@ public InterfaceContract configureWireFormatInterfaceContract(InterfaceContract\n     /**\n      */\n     public Interceptor createInterceptor() {\n-        return new WireFormatJMSBytesServiceInterceptor(registry, null, endpoint);\n+        return new WireFormatJMSBytesServiceInterceptor(registry, jmsResourceFactory, endpoint);\n     }\n \n     /**", "filename": "modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsbytes/runtime/WireFormatJMSBytesServiceProvider.java"}, {"additions": 13, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/735516c37a2c87457de0e1be6f97604c1420162d/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsbytesxml/runtime/WireFormatJMSBytesXMLServiceInterceptor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/735516c37a2c87457de0e1be6f97604c1420162d/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsbytesxml/runtime/WireFormatJMSBytesXMLServiceInterceptor.java", "sha": "d5bbbec369fd5a3c2ef43bfa9196cb16bbf00052", "changes": 14, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsbytesxml/runtime/WireFormatJMSBytesXMLServiceInterceptor.java?ref=735516c37a2c87457de0e1be6f97604c1420162d", "patch": "@@ -85,6 +85,12 @@ public Message invokeRequest(Message msg) {\n     public Message invokeResponse(Message msg) {\n         // get the jms context\n         JMSBindingContext context = msg.getBindingContext();\n+        // The Binding Context may be null on an asynchronous response - in which case, create a new one\n+        if(context == null) {\n+            context = createBindingContext();\n+            msg.setBindingContext(context);\n+        }\n+\n         Session session = context.getJmsResponseSession();\n \n         javax.jms.Message responseJMSMsg;\n@@ -108,7 +114,13 @@ public void setNext(Invoker next) {\n         this.next = next;\n     }\n     \n-\tpublic Message processRequest(Message msg) {\n+    private JMSBindingContext createBindingContext() {\n+        JMSBindingContext context = new JMSBindingContext();\n+        context.setJmsResourceFactory(jmsResourceFactory);\n+        return context;\n+    }\n+\n+    public Message processRequest(Message msg) {\n \t\treturn invokeRequest(msg);\n \t} // end method processRequest\n ", "filename": "modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsbytesxml/runtime/WireFormatJMSBytesXMLServiceInterceptor.java"}, {"additions": 12, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/735516c37a2c87457de0e1be6f97604c1420162d/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmstextxml/runtime/WireFormatJMSTextXMLServiceInterceptor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/735516c37a2c87457de0e1be6f97604c1420162d/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmstextxml/runtime/WireFormatJMSTextXMLServiceInterceptor.java", "sha": "77664692712929b6dafe2954e6d8580affdd40b5", "changes": 12, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmstextxml/runtime/WireFormatJMSTextXMLServiceInterceptor.java?ref=735516c37a2c87457de0e1be6f97604c1420162d", "patch": "@@ -93,6 +93,12 @@ public Message invokeResponse(Message msg) {\n         \n         // get the jms context\n         JMSBindingContext context = msg.getBindingContext();\n+        // The Binding Context may be null on an asynchronous response - in which case, create a new one\n+        if(context == null) {\n+            context = createBindingContext();\n+            msg.setBindingContext(context);\n+        }\n+\n         Session session = context.getJmsResponseSession();\n \n         javax.jms.Message responseJMSMsg;\n@@ -114,6 +120,12 @@ public Invoker getNext() {\n     public void setNext(Invoker next) {\n         this.next = next;\n     }\n+\n+    private JMSBindingContext createBindingContext() {\n+        JMSBindingContext context = new JMSBindingContext();\n+        context.setJmsResourceFactory(jmsResourceFactory);\n+        return context;\n+    }\n     \n \tpublic Message processRequest(Message msg) {\n \t\treturn invokeRequest(msg);", "filename": "modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmstextxml/runtime/WireFormatJMSTextXMLServiceInterceptor.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/e51d308ec6d21952a4ca991f206fec768a4ccc5c", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/adf80bb847b4b86a7edbe25b2850c8177faa2ff7", "message": "Fix NPE in jmsObject wireformat with async services\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@1159761 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_73", "file": [{"additions": 7, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e51d308ec6d21952a4ca991f206fec768a4ccc5c/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsobject/runtime/WireFormatJMSObjectProviderFactory.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e51d308ec6d21952a4ca991f206fec768a4ccc5c/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsobject/runtime/WireFormatJMSObjectProviderFactory.java", "sha": "3b033004c498ee207e03aa5c9febac40aa17876a", "changes": 8, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsobject/runtime/WireFormatJMSObjectProviderFactory.java?ref=e51d308ec6d21952a4ca991f206fec768a4ccc5c", "patch": "@@ -19,6 +19,9 @@\n \n package org.apache.tuscany.sca.binding.jms.wireformat.jmsobject.runtime;\n \n+import org.apache.tuscany.sca.binding.jms.JMSBinding;\n+import org.apache.tuscany.sca.binding.jms.provider.JMSResourceFactory;\n+import org.apache.tuscany.sca.binding.jms.provider.JMSResourceFactoryExtensionPoint;\n import org.apache.tuscany.sca.binding.jms.wireformat.WireFormatJMSObject;\n import org.apache.tuscany.sca.core.ExtensionPointRegistry;\n import org.apache.tuscany.sca.provider.WireFormatProvider;\n@@ -31,10 +34,12 @@\n  */\n public class WireFormatJMSObjectProviderFactory implements WireFormatProviderFactory<WireFormatJMSObject> {\n     private ExtensionPointRegistry registry;\n+    private JMSResourceFactoryExtensionPoint jmsRFEP;\n     \n     public WireFormatJMSObjectProviderFactory(ExtensionPointRegistry registry) {\n         super();\n         this.registry = registry;\n+        jmsRFEP = (JMSResourceFactoryExtensionPoint) registry.getExtensionPoint(JMSResourceFactoryExtensionPoint.class);\n     }\n \n     /**\n@@ -46,7 +51,8 @@ public WireFormatProvider createReferenceWireFormatProvider(RuntimeEndpointRefer\n     /**\n       */\n     public WireFormatProvider createServiceWireFormatProvider(RuntimeEndpoint endpoint) {\n-        return new WireFormatJMSObjectServiceProvider(registry, endpoint);\n+        JMSResourceFactory jmsResourceFactory = jmsRFEP.createJMSResourceFactory((JMSBinding) endpoint.getBinding());\n+        return new WireFormatJMSObjectServiceProvider(registry, endpoint, jmsResourceFactory);\n     }\n \n     /**", "filename": "modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsobject/runtime/WireFormatJMSObjectProviderFactory.java"}, {"additions": 14, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e51d308ec6d21952a4ca991f206fec768a4ccc5c/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsobject/runtime/WireFormatJMSObjectServiceInterceptor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e51d308ec6d21952a4ca991f206fec768a4ccc5c/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsobject/runtime/WireFormatJMSObjectServiceInterceptor.java", "sha": "d4bc99aa7b61af68051bd4eb5d967bd5210a939a", "changes": 15, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsobject/runtime/WireFormatJMSObjectServiceInterceptor.java?ref=e51d308ec6d21952a4ca991f206fec768a4ccc5c", "patch": "@@ -116,6 +116,13 @@ public Message invokeRequest(Message msg) {\n     public Message invokeResponse(Message msg) {\n         // get the jms context\n         JMSBindingContext context = msg.getBindingContext();\n+        \n+        // The Binding Context may be null on an asynchronous response - in which case, create a new one\n+        if(context == null) {\n+            context = createBindingContext();\n+            msg.setBindingContext(context);\n+        }\n+\n         Session session = context.getJmsResponseSession();\n \n         javax.jms.Message responseJMSMsg = null;\n@@ -138,7 +145,13 @@ public void setNext(Invoker next) {\n         this.next = next;\n     }\n     \n-\tpublic Message processRequest(Message msg) {\n+    private JMSBindingContext createBindingContext() {\n+        JMSBindingContext context = new JMSBindingContext();\n+        context.setJmsResourceFactory(jmsResourceFactory);\n+        return context;\n+    }\n+\n+    public Message processRequest(Message msg) {\n \t\treturn invokeRequest(msg);\n \t} // end method processRequest\n ", "filename": "modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsobject/runtime/WireFormatJMSObjectServiceInterceptor.java"}, {"additions": 5, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e51d308ec6d21952a4ca991f206fec768a4ccc5c/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsobject/runtime/WireFormatJMSObjectServiceProvider.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e51d308ec6d21952a4ca991f206fec768a4ccc5c/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsobject/runtime/WireFormatJMSObjectServiceProvider.java", "sha": "2b16ba650e17051ba98e3992198e099fe83d8f20", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsobject/runtime/WireFormatJMSObjectServiceProvider.java?ref=e51d308ec6d21952a4ca991f206fec768a4ccc5c", "patch": "@@ -26,6 +26,7 @@\n import org.apache.tuscany.sca.assembly.ComponentService;\n import org.apache.tuscany.sca.binding.jms.JMSBinding;\n import org.apache.tuscany.sca.binding.jms.JMSBindingConstants;\n+import org.apache.tuscany.sca.binding.jms.provider.JMSResourceFactory;\n import org.apache.tuscany.sca.binding.jms.wireformat.WireFormatJMSObject;\n import org.apache.tuscany.sca.core.ExtensionPointRegistry;\n import org.apache.tuscany.sca.interfacedef.InterfaceContract;\n@@ -45,11 +46,13 @@\n     private InterfaceContract interfaceContract; \n     private HashMap<String,Class<?>> singleArgMap;\n     private boolean wrapSingle = true;\n+    private JMSResourceFactory jmsResourceFactory ;\n \n-    public WireFormatJMSObjectServiceProvider(ExtensionPointRegistry registry, RuntimeEndpoint endpoint) {\n+    public WireFormatJMSObjectServiceProvider(ExtensionPointRegistry registry, RuntimeEndpoint endpoint, JMSResourceFactory jmsResourceFactory) {\n         super();\n         this.registry = registry;\n         this.endpoint = endpoint;\n+        this.jmsResourceFactory = jmsResourceFactory;\n         this.binding = (JMSBinding)endpoint.getBinding();\n         this.singleArgMap = new HashMap<String,Class<?>>();\n         \n@@ -104,7 +107,7 @@ public InterfaceContract configureWireFormatInterfaceContract(InterfaceContract\n      */\n     public Interceptor createInterceptor() {\n \n-        return new WireFormatJMSObjectServiceInterceptor(registry, null, endpoint, this.singleArgMap, wrapSingle);\n+        return new WireFormatJMSObjectServiceInterceptor(registry, jmsResourceFactory, endpoint, this.singleArgMap, wrapSingle);\n     }\n \n     /**", "filename": "modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/wireformat/jmsobject/runtime/WireFormatJMSObjectServiceProvider.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/b3780cb9d6677121746386d4a77261378e9fbed4", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/5607955e9bc38ad0aaf768c6ee62868055913465", "message": "Fix NPE with remote services by simplify code to just use node.getService to get the proxy\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@1132974 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_74", "file": [{"additions": 24, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/b3780cb9d6677121746386d4a77261378e9fbed4/modules/shell/src/main/java/org/apache/tuscany/sca/shell/jline/ServiceOperationCompletor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/b3780cb9d6677121746386d4a77261378e9fbed4/modules/shell/src/main/java/org/apache/tuscany/sca/shell/jline/ServiceOperationCompletor.java", "sha": "c61e8cf4ca8cb2a57d1bfd58d82f8b52fe5caba1", "changes": 43, "status": "modified", "deletions": 19, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/shell/src/main/java/org/apache/tuscany/sca/shell/jline/ServiceOperationCompletor.java?ref=b3780cb9d6677121746386d4a77261378e9fbed4", "patch": "@@ -31,6 +31,7 @@\n import org.apache.tuscany.sca.runtime.DomainRegistry;\n import org.apache.tuscany.sca.runtime.RuntimeComponent;\n import org.apache.tuscany.sca.shell.Shell;\n+import org.oasisopen.sca.NoSuchServiceException;\n \n /**\n  * A Completor for available service operations\n@@ -58,27 +59,31 @@ public ServiceOperationCompletor(Shell shell) {\n     @Override\n     public int complete(final String buffer, final int cursor, final List clist) {\n         String service = TShellCompletor.lastArg;\n-        DomainRegistry reg = ((NodeImpl)shell.getNode()).getEndpointRegistry();\n-        List<Endpoint> endpoints = reg.findEndpoint(service);\n-        if (endpoints.size() < 1) {\n-            return -1;\n-        }\n-        String serviceName = null;\n-        if (service.contains(\"/\")) {\n-            int i = service.indexOf(\"/\");\n-            if (i < service.length()-1) {\n-                serviceName = service.substring(i+1);\n-            }\n-        }\n-        Object proxy = ((RuntimeComponent)endpoints.get(0).getComponent()).getServiceReference(null, serviceName).getService();        \n-        Method[] ms = proxy.getClass().getMethods();\n-        List<String> ops = new ArrayList<String>();\n-        for (Method m : ms) {\n-            if (!EXCLUDED_OPS.contains(m.getName())) {\n-                ops.add(m.getName());\n+//        DomainRegistry reg = ((NodeImpl)shell.getNode()).getEndpointRegistry();\n+//        List<Endpoint> endpoints = reg.findEndpoint(service);\n+//        if (endpoints.size() < 1) {\n+//            return -1;\n+//        }\n+//        String serviceName = null;\n+//        if (service.contains(\"/\")) {\n+//            int i = service.indexOf(\"/\");\n+//            if (i < service.length()-1) {\n+//                serviceName = service.substring(i+1);\n+//            }\n+//        }\n+//        Object proxy = ((RuntimeComponent)endpoints.get(0).getComponent()).getServiceReference(null, serviceName).getService();        \n+        try {\n+            Object proxy = shell.getNode().getService(null, service);\n+            Method[] ms = proxy.getClass().getMethods();\n+            List<String> ops = new ArrayList<String>();\n+            for (Method m : ms) {\n+                if (!EXCLUDED_OPS.contains(m.getName())) {\n+                    ops.add(m.getName());\n+                }\n             }\n+            setCandidateStrings(ops.toArray(new String[ops.size()]));\n+        } catch (NoSuchServiceException e) {\n         }\n-        setCandidateStrings(ops.toArray(new String[ops.size()]));\n         return super.complete(buffer, cursor, clist);\n     }\n }", "filename": "modules/shell/src/main/java/org/apache/tuscany/sca/shell/jline/ServiceOperationCompletor.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/1f992a75ac6f3dece805107bf3631d6b315b255e", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/57014c2f486f8b01afe7c5ce4075f4f297592f8e", "message": "Fix the string comparison to have constant as the 1st parameter to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@1084772 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_75", "file": [{"additions": 2, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/1f992a75ac6f3dece805107bf3631d6b315b255e/modules/binding-ws/META-INF/MANIFEST.MF", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/1f992a75ac6f3dece805107bf3631d6b315b255e/modules/binding-ws/META-INF/MANIFEST.MF", "sha": "7d1ba0d04478d7ff2ef81f01a2dcb60db97be8db", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-ws/META-INF/MANIFEST.MF?ref=1f992a75ac6f3dece805107bf3631d6b315b255e", "patch": "@@ -17,7 +17,8 @@ Bundle-Version: 2.0.0\n Bundle-ManifestVersion: 2\r\n Bundle-License: http://www.apache.org/licenses/LICENSE-2.0.txt\r\n Bundle-Description: Apache Tuscany SCA WS Binding Model\r\n-Import-Package: javax.wsdl,\r\n+Import-Package: javax.jws.soap,\r\n+ javax.wsdl,\r\n  javax.wsdl.extensions;version=\"1.6.2\",\r\n  javax.wsdl.extensions.soap;version=\"1.6.2\",\r\n  javax.wsdl.extensions.soap12;version=\"1.6.2\",\r", "filename": "modules/binding-ws/META-INF/MANIFEST.MF"}, {"additions": 59, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/1f992a75ac6f3dece805107bf3631d6b315b255e/modules/binding-ws/src/main/java/org/apache/tuscany/sca/binding/ws/impl/WebServiceBindingImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/1f992a75ac6f3dece805107bf3631d6b315b255e/modules/binding-ws/src/main/java/org/apache/tuscany/sca/binding/ws/impl/WebServiceBindingImpl.java", "sha": "21f7b73756867bcbed74287b19c89bfdaa552bc8", "changes": 121, "status": "modified", "deletions": 62, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-ws/src/main/java/org/apache/tuscany/sca/binding/ws/impl/WebServiceBindingImpl.java?ref=1f992a75ac6f3dece805107bf3631d6b315b255e", "patch": "@@ -25,6 +25,7 @@\n import java.util.Map;\n \n import javax.wsdl.Binding;\n+import javax.wsdl.BindingInput;\n import javax.wsdl.BindingOperation;\n import javax.wsdl.Definition;\n import javax.wsdl.Message;\n@@ -90,7 +91,7 @@ protected WebServiceBindingImpl() {\n      * Provide a meaningful representation of this Binding\n      */\n     public String toString() {\n-    \treturn \"Web Service Binding: \" + name;\n+        return \"Web Service Binding: \" + name;\n     } // end method toString\n \n     public String getName() {\n@@ -250,7 +251,7 @@ public WSDLDefinition getUserSpecifiedWSDLDefinition() {\n         if (userSpecifiedWSDLDefinition == null) {\n             Interface iface = bindingInterfaceContract.getInterface();\n             if (iface instanceof WSDLInterface) {\n-                userSpecifiedWSDLDefinition = ((WSDLInterface) iface).getWsdlDefinition();\n+                userSpecifiedWSDLDefinition = ((WSDLInterface)iface).getWsdlDefinition();\n             }\n         }\n         return userSpecifiedWSDLDefinition;\n@@ -312,28 +313,28 @@ public void setGeneratedWSDLDocument(Definition definition) {\n     public QName getType() {\n         return TYPE;\n     }\n-    \n+\n     public WireFormat getRequestWireFormat() {\n         return null;\n     }\n-    \n-    public void setRequestWireFormat(WireFormat wireFormat) {  \n+\n+    public void setRequestWireFormat(WireFormat wireFormat) {\n     }\n-    \n+\n     public WireFormat getResponseWireFormat() {\n         return null;\n     }\n-    \n+\n     public void setResponseWireFormat(WireFormat wireFormat) {\n     }\n-    \n+\n     public OperationSelector getOperationSelector() {\n         return null;\n     }\n-    \n+\n     public void setOperationSelector(OperationSelector operationSelector) {\n-    }   \n-    \n+    }\n+\n     /**\n      * Some items get calculated and cached as they are used at runtime\n      * to decide what message processing is required\n@@ -343,118 +344,114 @@ protected void determineWSDLCharacteristics() {\n         setIsLiteralEncoding();\n         setIsMessageWrapped();\n     }\n-    \n+\n     protected void setIsDocumentStyle() {\n-        \n-        if (binding == null){\n-            if (userSpecifiedWSDLDefinition != null && userSpecifiedWSDLDefinition.getDefinition() != null){\n-                Message firstMessage = (Message)userSpecifiedWSDLDefinition.getDefinition().getMessages().values().iterator().next();\n+\n+        if (binding == null) {\n+            if (userSpecifiedWSDLDefinition != null && userSpecifiedWSDLDefinition.getDefinition() != null) {\n+                Message firstMessage =\n+                    (Message)userSpecifiedWSDLDefinition.getDefinition().getMessages().values().iterator().next();\n                 Part firstPart = (Part)firstMessage.getParts().values().iterator().next();\n-                if (firstPart.getTypeName() != null){\n+                if (firstPart.getTypeName() != null) {\n                     isDocumentStyle = false;\n                     return;\n                 }\n-            } \n-            \n+            }\n+\n             // default to document style\n             isDocumentStyle = true;\n             return;\n         } else {\n-           for (Object ext : binding.getExtensibilityElements()){\n-               if (ext instanceof SOAPBinding){\n-                  if (((SOAPBinding)ext).getStyle().equals(\"rpc\")){\n-                      isDocumentStyle = false;\n-                      return;\n-                  } else {\n-                      isDocumentStyle = true;\n-                      return;\n-                  }\n-               }\n-           }\n-           isDocumentStyle = true;\n-           return;\n+            for (Object ext : binding.getExtensibilityElements()) {\n+                if (ext instanceof SOAPBinding) {\n+                    isDocumentStyle = !\"rpc\".equals(((SOAPBinding)ext).getStyle());\n+                    return;\n+                }\n+            }\n+            isDocumentStyle = true;\n+            return;\n         }\n-        \n+\n     }\n-    \n+\n     protected void setIsLiteralEncoding() {\n-        \n-        if (binding == null){\n+\n+        if (binding == null) {\n             // default to literal encoding\n             isLiteralEncoding = true;\n             return;\n         } else {\n-            for(Object ext : ((BindingOperation)binding.getBindingOperations().get(0)).getBindingInput().getExtensibilityElements()){\n-                if (ext instanceof SOAPBody){\n-                    if (((SOAPBody)ext).getUse().equals(\"literal\")){\n-                        isLiteralEncoding = true;\n-                        return;\n-                    } else {\n-                        isLiteralEncoding = false;\n-                        return;\n+            for (Object bop : binding.getBindingOperations()) {\n+                BindingInput bindingInput = ((BindingOperation)bop).getBindingInput();\n+                if (bindingInput != null) {\n+                    for (Object ext : bindingInput.getExtensibilityElements()) {\n+                        if (ext instanceof SOAPBody) {\n+                            isLiteralEncoding = \"literal\".equals(((SOAPBody)ext).getUse());\n+                            return;\n+                        }\n                     }\n                 }\n             }\n             isLiteralEncoding = true;\n             return;\n         }\n     }\n-    \n+\n     protected void setIsMessageWrapped() {\n-        if (getBindingInterfaceContract() != null){\n+        if (getBindingInterfaceContract() != null) {\n             isMessageWrapped = getBindingInterfaceContract().getInterface().getOperations().get(0).isWrapperStyle();\n         }\n     }\n-   \n+\n     public boolean isRpcEncoded() {\n         return (!isDocumentStyle) && (!isLiteralEncoding);\n     }\n-    \n+\n     public boolean isRpcLiteral() {\n         return (!isDocumentStyle) && (isLiteralEncoding);\n     }\n-    \n+\n     public boolean isDocEncoded() {\n         return (isDocumentStyle) && (!isLiteralEncoding);\n     }\n-    \n+\n     public boolean isDocLiteralUnwrapped() {\n         setIsMessageWrapped();\n         return (isDocumentStyle) && (isLiteralEncoding) && (!isMessageWrapped);\n     }\n-    \n+\n     public boolean isDocLiteralWrapped() {\n         setIsMessageWrapped();\n-        return (isDocumentStyle) && (isLiteralEncoding) &&(isMessageWrapped);\n+        return (isDocumentStyle) && (isLiteralEncoding) && (isMessageWrapped);\n     }\n-    \n+\n     public boolean isDocLiteralBare() {\n         setIsMessageWrapped();\n         return (isDocumentStyle) && (isLiteralEncoding);\n-    }   \n-    \n+    }\n+\n     public boolean isHTTPTransport() {\n         return getBindingTransport().equals(\"http://schemas.xmlsoap.org/soap/http\");\n     }\n-    \n+\n     public boolean isJMSTransport() {\n         return getBindingTransport().equals(\"http://schemas.xmlsoap.org/soap/jms\");\n     }\n-    \n+\n     public String getBindingTransport() {\n-        if (binding != null){\n-            for (Object ext : binding.getExtensibilityElements()){\n-                if (ext instanceof SOAPBinding){\n+        if (binding != null) {\n+            for (Object ext : binding.getExtensibilityElements()) {\n+                if (ext instanceof SOAPBinding) {\n                     return ((SOAPBinding)ext).getTransportURI();\n                 }\n             }\n         }\n-        \n+\n         // if no binding is explicitly specified by the user then default to http\n         return \"http://schemas.xmlsoap.org/soap/http\";\n     }\n \n     public Map<String, String> getWsdliLocations() {\n-        return wsdliLocations ;\n+        return wsdliLocations;\n     }\n }", "filename": "modules/binding-ws/src/main/java/org/apache/tuscany/sca/binding/ws/impl/WebServiceBindingImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/bfcf52daffacdafcb9a2824569f035e778348cb7", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/71744a8fc63fab1dedb5935ef2f0c0c4175d38d0", "message": "TUSCANY-3843: Apply patch from Benjamin Busjaeger to fix Node.start() throws NPE after NodeFactory.create(List<?>)\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@1080131 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_76", "file": [{"additions": 2, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/bfcf52daffacdafcb9a2824569f035e778348cb7/modules/node-impl/src/main/java/org/apache/tuscany/sca/node/impl/NodeImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/bfcf52daffacdafcb9a2824569f035e778348cb7/modules/node-impl/src/main/java/org/apache/tuscany/sca/node/impl/NodeImpl.java", "sha": "6d6c98c66f50f53e6bd282d528fefda0b1660e75", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/node-impl/src/main/java/org/apache/tuscany/sca/node/impl/NodeImpl.java?ref=bfcf52daffacdafcb9a2824569f035e778348cb7", "patch": "@@ -123,7 +123,9 @@ public Node start() {\n                 // to read the contributions and create the domain composite\n                 if (contributions == null) {\n                     contributions = nodeFactory.loadContributions(configuration, context);\n+                }\n               \n+                if (domainComposite == null) {  \n                     domainComposite = nodeFactory.configureNode(configuration, contributions, context);\n     \n                     this.compositeContext =", "filename": "modules/node-impl/src/main/java/org/apache/tuscany/sca/node/impl/NodeImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/51913c5a0f834677df1f87a00719df2cbee4e02f", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/c920fa57e3cba72978431caf1999d7b60cbf20f7", "message": "TUSCANY-3667 - Handling possible SecurityException/NPE from clazz.getDeclaredFields() in GAE environment\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@998004 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_77", "file": [{"additions": 78, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/51913c5a0f834677df1f87a00719df2cbee4e02f/modules/implementation-java/src/main/java/org/apache/tuscany/sca/implementation/java/introspect/JavaIntrospectionHelper.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/51913c5a0f834677df1f87a00719df2cbee4e02f/modules/implementation-java/src/main/java/org/apache/tuscany/sca/implementation/java/introspect/JavaIntrospectionHelper.java", "sha": "a04ad3721a8e31a61ff5f5a8576ac58f6f4aec76", "changes": 130, "status": "modified", "deletions": 52, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/implementation-java/src/main/java/org/apache/tuscany/sca/implementation/java/introspect/JavaIntrospectionHelper.java?ref=51913c5a0f834677df1f87a00719df2cbee4e02f", "patch": "@@ -6,15 +6,15 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n- * under the License.    \n+ * under the License.\n  */\n package org.apache.tuscany.sca.implementation.java.introspect;\n \n@@ -39,13 +39,14 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.logging.Level;\n import java.util.logging.Logger;\n \n import org.oasisopen.sca.ServiceReference;\n \n /**\n  * Implements various reflection-related operations\n- * \n+ *\n  * @version $Rev$ $Date$\n  */\n public final class JavaIntrospectionHelper {\n@@ -83,70 +84,95 @@ private static void checkInvalidAnnotations(AnnotatedElement element) {\n             return fields;\n         }\n         fields = getAllPublicAndProtectedFields(clazz.getSuperclass(), fields, validating);\n-        Field[] declaredFields = clazz.getDeclaredFields();\n-        for (final Field field : declaredFields) {\n-            int modifiers = field.getModifiers();\n-            // The field should be non-final and non-static\n-            if ((Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) && !Modifier.isStatic(modifiers) && !Modifier.isFinal(modifiers)) {\n-                // Allow privileged access to set accessibility. Requires ReflectPermission\n-                // in security policy.\n-                AccessController.doPrivileged(new PrivilegedAction<Object>() {\n-                    public Object run() {\n-                        field.setAccessible(true); // ignore Java accessibility\n-                        return null;\n+\n+        Field[] declaredFields = null;\n+\n+        try {\n+        \tdeclaredFields = clazz.getDeclaredFields();\n+        } catch(Throwable t) {\n+        \t//TUSCANY-3667 - clazz.getDeclaredFields might fail in GAE environment (log and ignore)\n+        \tlogger.log(Level.WARNING, \"Error retrieving declared fields from class : \" + t.getMessage());\n+        }\n+\n+        if( declaredFields != null ) {\n+            for (final Field field : declaredFields) {\n+                int modifiers = field.getModifiers();\n+                // The field should be non-final and non-static\n+                if ((Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) && !Modifier.isStatic(modifiers) && !Modifier.isFinal(modifiers)) {\n+                    // Allow privileged access to set accessibility. Requires ReflectPermission\n+                    // in security policy.\n+                    AccessController.doPrivileged(new PrivilegedAction<Object>() {\n+                        public Object run() {\n+                            field.setAccessible(true); // ignore Java accessibility\n+                            return null;\n+                        }\n+                    });\n+                    fields.add(field);\n+                } /*else {\n+                    if (validating) {\n+                        checkInvalidAnnotations(field);\n                     }\n-                });\n-                fields.add(field);\n-            } /*else {\n-                if (validating) {\n-                    checkInvalidAnnotations(field);\n-                }\n-            }*/\n+                }*/\n+            }\n         }\n         return fields;\n     }\n-    \n+\n     /**\n      * Returns a collection of injectable fields declared by a class\n      * or one of its supertypes\n-     * \n-     * For now we will include final or static fields so that validation problems can be reported \n+     *\n+     * For now we will include final or static fields so that validation problems can be reported\n      */\n     public static Set<Field> getInjectableFields(Class<?> clazz, boolean validating) {\n         return getInjectableFields(clazz, new HashSet<Field>(), validating);\n     }\n-    \n+\n     /**\n-     * Recursively evaluates the type hierarchy to return all fields \n+     * Recursively evaluates the type hierarchy to return all fields\n      */\n     private static Set<Field> getInjectableFields(Class<?> clazz, Set<Field> fields, boolean validating) {\n         if (clazz == null || clazz.isArray() || Object.class.equals(clazz)) {\n             return fields;\n         }\n+\n         fields = getInjectableFields(clazz.getSuperclass(), fields, validating);\n-        Field[] declaredFields = clazz.getDeclaredFields();\n-        for (final Field field : declaredFields) {\n-            int modifiers = field.getModifiers();\n-            // The field should be non-final and non-static\n-            if (!Modifier.isStatic(modifiers) \n-                // && !Modifier.isFinal(modifiers)\n-                ) {\n-            \n-                // Allow privileged access to set accessibility. Requires ReflectPermission\n-                // in security policy.\n-                AccessController.doPrivileged(new PrivilegedAction<Object>() {\n-                    public Object run() {\n-                        field.setAccessible(true); // ignore Java accessibility\n-                        return null;\n+\n+        Field[] declaredFields = null;\n+\n+        try {\n+        \tdeclaredFields = clazz.getDeclaredFields();\n+        } catch(Throwable t) {\n+        \t//TUSCANY-3667 - clazz.getDeclaredFields might fail in GAE environment (log and ignore)\n+        \tlogger.log(Level.WARNING, \"Error retrieving declared fields from class : \" + t.getMessage());\n+        }\n+\n+        if( declaredFields != null ) {\n+            for (final Field field : declaredFields) {\n+                int modifiers = field.getModifiers();\n+                // The field should be non-final and non-static\n+                if (!Modifier.isStatic(modifiers)\n+                    // && !Modifier.isFinal(modifiers)\n+                    ) {\n+\n+                    // Allow privileged access to set accessibility. Requires ReflectPermission\n+                    // in security policy.\n+                    AccessController.doPrivileged(new PrivilegedAction<Object>() {\n+                        public Object run() {\n+                            field.setAccessible(true); // ignore Java accessibility\n+                            return null;\n+                        }\n+                    });\n+                    fields.add(field);\n+                } else {\n+                    if (validating) {\n+                        checkInvalidAnnotations(field);\n                     }\n-                });\n-                fields.add(field);\n-            } else {\n-                if (validating) {\n-                    checkInvalidAnnotations(field);\n                 }\n             }\n         }\n+\n+\n         return fields;\n     }\n \n@@ -216,7 +242,7 @@ public Object run() {\n     /**\n      * Finds the closest matching field with the given name, that is, a field of\n      * the exact specified type or, alternately, of a supertype.\n-     * \n+     *\n      * @param name the name of the field\n      * @param type the field type\n      * @param fields the collection of fields to search\n@@ -252,7 +278,7 @@ public static Field findClosestMatchingField(String name, Class type, Set<Field>\n     /**\n      * Finds the closest matching method with the given name, that is, a method\n      * taking the exact parameter types or, alternately, parameter supertypes.\n-     * \n+     *\n      * @param name the name of the method\n      * @param types the method parameter types\n      * @param methods the collection of methods to search\n@@ -325,7 +351,7 @@ public static boolean exactMethodMatch(Method method1, Method method2) {\n     /**\n      * Returns the simple name of a class - i.e. the class name devoid of its\n      * package qualifier\n-     * \n+     *\n      * @param implClass the implementation class\n      */\n     public static String getBaseName(Class<?> implClass) {\n@@ -484,7 +510,7 @@ private static boolean primitiveAssignable(Class<?> memberType, Class<?> param)\n      * JavaIntrospectionHelper.getGenerics(field.getGenericType());\n      * <p/>\n      * JavaIntrospectionHelper.getGenerics(m.getGenericParameterTypes()[0];); </code>\n-     * \n+     *\n      * @return the generic types in order of declaration or an empty array if\n      *         the type is not genericized\n      */\n@@ -603,7 +629,7 @@ public static String getSignature(Class<?> cls) {\n                 methods.add(declaredMethod);\n             }\n         }\n-        \n+\n         return methods;\n     }\n \n@@ -616,7 +642,7 @@ public static String getSignature(Class<?> cls) {\n                 fields.add(declaredField);\n             }\n         }\n-        \n+\n         return fields;\n     }\n }", "filename": "modules/implementation-java/src/main/java/org/apache/tuscany/sca/implementation/java/introspect/JavaIntrospectionHelper.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/eee4b6aa79759035f888ed8e3a771ac03f6ee56c", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/fd2f060dded7a5c41f497358950f1c1f2283cb67", "message": "Check for the null binding provider to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@993614 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_78", "file": [{"additions": 4, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/eee4b6aa79759035f888ed8e3a771ac03f6ee56c/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeEndpointReferenceImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/eee4b6aa79759035f888ed8e3a771ac03f6ee56c/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeEndpointReferenceImpl.java", "sha": "36480f34350697f5f2f016c6f96dbb2df669aab8", "changes": 8, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeEndpointReferenceImpl.java?ref=eee4b6aa79759035f888ed8e3a771ac03f6ee56c", "patch": "@@ -38,7 +38,6 @@\n import org.apache.tuscany.sca.assembly.Contract;\n import org.apache.tuscany.sca.assembly.EndpointReference;\n import org.apache.tuscany.sca.assembly.builder.BuilderExtensionPoint;\n-import org.apache.tuscany.sca.assembly.builder.ContractBuilder;\n import org.apache.tuscany.sca.assembly.impl.EndpointReferenceImpl;\n import org.apache.tuscany.sca.context.CompositeContext;\n import org.apache.tuscany.sca.core.ExtensionPointRegistry;\n@@ -53,15 +52,13 @@\n import org.apache.tuscany.sca.interfacedef.InterfaceContract;\n import org.apache.tuscany.sca.interfacedef.InterfaceContractMapper;\n import org.apache.tuscany.sca.interfacedef.Operation;\n-import org.apache.tuscany.sca.interfacedef.java.JavaInterface;\n import org.apache.tuscany.sca.interfacedef.java.JavaInterfaceContract;\n import org.apache.tuscany.sca.invocation.Interceptor;\n import org.apache.tuscany.sca.invocation.InvocationChain;\n import org.apache.tuscany.sca.invocation.Invoker;\n import org.apache.tuscany.sca.invocation.Message;\n import org.apache.tuscany.sca.invocation.MessageFactory;\n import org.apache.tuscany.sca.invocation.Phase;\n-import org.apache.tuscany.sca.monitor.Monitor;\n import org.apache.tuscany.sca.provider.BindingProviderFactory;\n import org.apache.tuscany.sca.provider.EndpointReferenceProvider;\n import org.apache.tuscany.sca.provider.PolicyProvider;\n@@ -541,7 +538,10 @@ public InterfaceContract getBindingInterfaceContract() {\n         if (bindingInterfaceContract != null) {\n             return bindingInterfaceContract;\n         }\n-        bindingInterfaceContract = getBindingProvider().getBindingInterfaceContract();\n+        ReferenceBindingProvider provider = getBindingProvider();\n+        if (provider != null) {\n+            bindingInterfaceContract = provider.getBindingInterfaceContract();\n+        }\n         if (bindingInterfaceContract == null) {\n             bindingInterfaceContract = getComponentReferenceInterfaceContract();\n         }", "filename": "modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeEndpointReferenceImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/38025635a16827671ec67df1291961ed87852b09", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/647323db256620dec072c4b3a502fa6f35871377", "message": "Avoid NPE in test cases. Encountered when writing out the system definitions file to XML. \n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@992280 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_79", "file": [{"additions": 8, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/38025635a16827671ec67df1291961ed87852b09/modules/assembly-xml/src/main/java/org/apache/tuscany/sca/policy/xml/PolicySetProcessor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/38025635a16827671ec67df1291961ed87852b09/modules/assembly-xml/src/main/java/org/apache/tuscany/sca/policy/xml/PolicySetProcessor.java", "sha": "6bf797d9573267e207d3323f105bf7682155d267", "changes": 10, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/assembly-xml/src/main/java/org/apache/tuscany/sca/policy/xml/PolicySetProcessor.java?ref=38025635a16827671ec67df1291961ed87852b09", "patch": "@@ -359,8 +359,14 @@ public void write(PolicySet policySet, XMLStreamWriter writer, ProcessorContext\n         writer.writeStartElement(SCA11_NS, POLICY_SET);\n         writer.writeNamespace(policySet.getName().getPrefix(), policySet.getName().getNamespaceURI());\n         writer.writeAttribute(NAME, policySet.getName().getPrefix() + COLON + policySet.getName().getLocalPart());\n-        writer.writeAttribute(APPLIES_TO, policySet.getAppliesTo());\n-        writer.writeAttribute(ATTACH_TO, policySet.getAttachTo());\n+\n+        if (policySet.getAppliesTo() != null){\n+            writer.writeAttribute(APPLIES_TO, policySet.getAppliesTo());\n+        }\n+        \n+        if (policySet.getAttachTo() != null){\n+            writer.writeAttribute(ATTACH_TO, policySet.getAttachTo());\n+        }\n \n         writeProvidedIntents(policySet, writer);\n ", "filename": "modules/assembly-xml/src/main/java/org/apache/tuscany/sca/policy/xml/PolicySetProcessor.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/d0af4ed10d7cd233b58704d7b2e3d526d839e6ed", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/60bab739fb01492d6d6298b8d273af72b705a08f", "message": "Check if superClass is not null to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@986835 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_80", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/d0af4ed10d7cd233b58704d7b2e3d526d839e6ed/modules/implementation-java/src/main/java/org/apache/tuscany/sca/implementation/java/introspect/impl/EagerInitProcessor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/d0af4ed10d7cd233b58704d7b2e3d526d839e6ed/modules/implementation-java/src/main/java/org/apache/tuscany/sca/implementation/java/introspect/impl/EagerInitProcessor.java", "sha": "5c0e2c1397901ace537627c8d2ceb041302068c2", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/implementation-java/src/main/java/org/apache/tuscany/sca/implementation/java/introspect/impl/EagerInitProcessor.java?ref=d0af4ed10d7cd233b58704d7b2e3d526d839e6ed", "patch": "@@ -47,7 +47,7 @@ public EagerInitProcessor(ExtensionPointRegistry registry) {\n         EagerInit annotation = clazz.getAnnotation(EagerInit.class);\n         if (annotation == null) {\n             Class<?> superClass = clazz.getSuperclass();\n-            while (!Object.class.equals(superClass)) {\n+            while (superClass != null && !Object.class.equals(superClass)) {\n                 annotation = superClass.getAnnotation(EagerInit.class);\n                 if (annotation != null) {\n                     break;", "filename": "modules/implementation-java/src/main/java/org/apache/tuscany/sca/implementation/java/introspect/impl/EagerInitProcessor.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/ea291eb8a8e813f50478e154ff7d73687fafc887", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/cc17c97c25faa960b216671dab7591f98da25a8c", "message": "Avoid NPE when no dependent contributions are used\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@983368 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_81", "file": [{"additions": 4, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/ea291eb8a8e813f50478e154ff7d73687fafc887/modules/domain-node/src/main/java/org/apache/tuscany/sca/node2/NodeFactory.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/ea291eb8a8e813f50478e154ff7d73687fafc887/modules/domain-node/src/main/java/org/apache/tuscany/sca/node2/NodeFactory.java", "sha": "153a5341cd7cfc230559f5f636bab010cf11a8cf", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/domain-node/src/main/java/org/apache/tuscany/sca/node2/NodeFactory.java?ref=ea291eb8a8e813f50478e154ff7d73687fafc887", "patch": "@@ -66,8 +66,10 @@ public static Node newStandaloneNode(String compositeURI, String contributionURL\n             EndpointRegistry endpointRegistry = new EndpointRegistryImpl(nodeFactory.extensionPointRegistry, null, null);\n             NodeImpl node = new NodeImpl(\"default\", nodeFactory.deployer, nodeFactory.compositeActivator, endpointRegistry, nodeFactory.extensionPointRegistry, nodeFactory);\n \n-            for (int i=dependentContributionURLs.length-1; i>-1; i--) {\n-                node.installContribution(null, dependentContributionURLs[i], null, null, false);\n+            if (dependentContributionURLs != null) {\n+                for (int i=dependentContributionURLs.length-1; i>-1; i--) {\n+                    node.installContribution(null, dependentContributionURLs[i], null, null, false);\n+                }\n             }\n \n             String curi = node.installContribution(null, contributionURL, null, null, compositeURI == null);", "filename": "modules/domain-node/src/main/java/org/apache/tuscany/sca/node2/NodeFactory.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/54f7500ce63d5aabd73475004f2a1c52f14de214", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/c4d8bf8b70a1632f99ebaebab35c442fbcad41c2", "message": "Check for message context being null to prevent NPE when these methods are called from a new thread. \n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@955860 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_82", "file": [{"additions": 30, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/54f7500ce63d5aabd73475004f2a1c52f14de214/modules/core/src/main/java/org/apache/tuscany/sca/core/context/impl/RequestContextImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/54f7500ce63d5aabd73475004f2a1c52f14de214/modules/core/src/main/java/org/apache/tuscany/sca/core/context/impl/RequestContextImpl.java", "sha": "5d0527682e73fe763c9f3b10d808ddaed6aab052", "changes": 33, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/core/src/main/java/org/apache/tuscany/sca/core/context/impl/RequestContextImpl.java?ref=54f7500ce63d5aabd73475004f2a1c52f14de214", "patch": "@@ -43,9 +43,17 @@ public RequestContextImpl(RuntimeComponent component) {\n     }\n \n     public Subject getSecuritySubject() {\n-        Subject subject = null;\n         \n-        for (Object header : ThreadMessageContext.getMessageContext().getHeaders().values()){\n+        Message msgContext = ThreadMessageContext.getMessageContext();\n+        \n+        if (msgContext == null){\n+            // message in thread context could be null if the user has \n+            // spun up a new thread inside their component implementation \n+            return null;\n+        }\n+        \n+        Subject subject = null;\n+        for (Object header : msgContext.getHeaders().values()){\n             if (header instanceof Subject){\n                 subject  = (Subject)header;\n                 break;\n@@ -55,11 +63,24 @@ public Subject getSecuritySubject() {\n     }\n \n     public String getServiceName() {\n-        return ThreadMessageContext.getMessageContext().getTo().getService().getName();\n+        Message msgContext = ThreadMessageContext.getMessageContext();\n+        \n+        if (msgContext != null){\n+            return msgContext.getTo().getService().getName();\n+        } else {\n+            // message in thread context could be null if the user has \n+            // spun up a new thread inside their component implementation \n+            return null;\n+        }\n     }\n \n     public <B> ServiceReference<B> getServiceReference() {\n         Message msgContext = ThreadMessageContext.getMessageContext();\n+        if (msgContext == null){\n+            // message in thread context could be null if the user has \n+            // spun up a new thread inside their component implementation \n+            return null;\n+        }\n         // FIXME: [rfeng] Is this the service reference matching the caller side?\n         RuntimeEndpoint to = (RuntimeEndpoint) msgContext.getTo();\n         RuntimeComponent component = (RuntimeComponent) to.getComponent();\n@@ -80,6 +101,12 @@ public String getServiceName() {\n     @SuppressWarnings(\"unchecked\")\n     public <CB> ServiceReference<CB> getCallbackReference() {\n         Message msgContext = ThreadMessageContext.getMessageContext();\n+        if (msgContext == null){\n+            // message in thread context could be null if the user has \n+            // spun up a new thread inside their component implementation \n+            return null;\n+        }\n+        \n         Endpoint to = msgContext.getTo();\n         RuntimeComponentService service = (RuntimeComponentService) to.getService();\n         RuntimeComponentReference callbackReference = (RuntimeComponentReference)service.getCallbackReference();", "filename": "modules/core/src/main/java/org/apache/tuscany/sca/core/context/impl/RequestContextImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/0433f1d863f6f6b38d7ddebce38f19c2886b1032", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/836cb9f501ee123a57405e97cae02bbbf868632b", "message": "Instead of NPE throw NoSuchServiceException if the service doesn't exist\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@948743 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_83", "file": [{"additions": 4, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/0433f1d863f6f6b38d7ddebce38f19c2886b1032/modules/binding-hazelcast-runtime/src/main/java/org/apache/tuscany/sca/binding/hazelcast/ServiceInvoker.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/0433f1d863f6f6b38d7ddebce38f19c2886b1032/modules/binding-hazelcast-runtime/src/main/java/org/apache/tuscany/sca/binding/hazelcast/ServiceInvoker.java", "sha": "d25c32a68cbbea2a5e689ad60e8a3887abf9286e", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-hazelcast-runtime/src/main/java/org/apache/tuscany/sca/binding/hazelcast/ServiceInvoker.java?ref=0433f1d863f6f6b38d7ddebce38f19c2886b1032", "patch": "@@ -30,6 +30,7 @@\n import org.apache.tuscany.sca.interfacedef.Operation;\r\n import org.apache.tuscany.sca.interfacedef.util.FaultException;\r\n import org.apache.tuscany.sca.runtime.RuntimeEndpoint;\r\n+import org.oasisopen.sca.NoSuchServiceException;\r\n import org.oasisopen.sca.ServiceRuntimeException;\r\n import org.w3c.dom.Document;\r\n import org.w3c.dom.Node;\r\n@@ -51,6 +52,9 @@ public ServiceInvoker(String serviceURI, String operationName, String msgXML) {\n \r\n     public String call() throws Exception {\r\n         RuntimeEndpoint endpoint = EndpointStash.getEndpoint(serviceURI);\r\n+        if (endpoint == null) {\r\n+            throw new NoSuchServiceException(serviceURI);\r\n+        }\r\n         Operation operation = getRequestOperation(endpoint);\r\n         DOMHelper domHelper = DOMHelper.getInstance(endpoint.getCompositeContext().getExtensionPointRegistry());\r\n         Object[] args = getRequestArgs(domHelper);\r", "filename": "modules/binding-hazelcast-runtime/src/main/java/org/apache/tuscany/sca/binding/hazelcast/ServiceInvoker.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/16e3b6e6a71551deae7fb0dcaf930f1cc14a2ec6", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/ef1ea193ac69b1c93a289dc697496b4d96f77300", "message": "Avoid NPE by not setting null in domain name\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@945640 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_84", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/16e3b6e6a71551deae7fb0dcaf930f1cc14a2ec6/modules/node-api/src/main/java/org/apache/tuscany/sca/node/NodeFactory.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/16e3b6e6a71551deae7fb0dcaf930f1cc14a2ec6/modules/node-api/src/main/java/org/apache/tuscany/sca/node/NodeFactory.java", "sha": "2d2df84f421ec736894c446a076b14a0714fd67a", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/node-api/src/main/java/org/apache/tuscany/sca/node/NodeFactory.java?ref=16e3b6e6a71551deae7fb0dcaf930f1cc14a2ec6", "patch": "@@ -554,7 +554,9 @@ public Node createNode() {\n     private NodeConfiguration createConfiguration(Contribution... contributions) {\n         NodeConfigurationFactory factory = this;\n         NodeConfiguration configuration = factory.createNodeConfiguration();\n-        configuration.setDomainURI(properties.getProperty(\"defaultDomainName\"));\n+        if (properties.getProperty(\"defaultDomainName\") != null) {\n+            configuration.setDomainURI(properties.getProperty(\"defaultDomainName\"));\n+        }\n         // Make sure a unique node URI is created for the same node factory\n         configuration.setURI(generateNodeURI());\n         if (contributions != null) {", "filename": "modules/node-api/src/main/java/org/apache/tuscany/sca/node/NodeFactory.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/49653470fb606d8885fd528c43a3165da05f3fea", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/74a264dcbecdca129bcee7306f067ea7e17c903e", "message": "Prevent NPE when the exception message is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@929533 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_85", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/49653470fb606d8885fd528c43a3165da05f3fea/modules/binding-ws-runtime-jaxws/src/main/java/org/apache/tuscany/sca/binding/ws/jaxws/JAXWSServiceBindingProvider.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/49653470fb606d8885fd528c43a3165da05f3fea/modules/binding-ws-runtime-jaxws/src/main/java/org/apache/tuscany/sca/binding/ws/jaxws/JAXWSServiceBindingProvider.java", "sha": "ff1327f070aae57f056d69fbabcc726fc3f311a1", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-ws-runtime-jaxws/src/main/java/org/apache/tuscany/sca/binding/ws/jaxws/JAXWSServiceBindingProvider.java?ref=49653470fb606d8885fd528c43a3165da05f3fea", "patch": "@@ -150,7 +150,9 @@ public SOAPMessage invoke(SOAPMessage request) {\n                 Detail d = fault.addDetail();\n                 DetailEntry de = d.addDetailEntry(fe.getFaultName());\n                 SOAPElement dece = de.addChildElement(\"message\");\n-                dece.addTextNode(fe.getMessage());\n+                if (fe.getMessage() != null) {\n+                    dece.addTextNode(fe.getMessage());\n+                }\n             } else {\n                 Element element = responseMsg.getBody();\n                 response.getSOAPBody().addChildElement(soapFactory.createElement(element));", "filename": "modules/binding-ws-runtime-jaxws/src/main/java/org/apache/tuscany/sca/binding/ws/jaxws/JAXWSServiceBindingProvider.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/565df78627d796669de33365144342d83eaaba6c", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/021b0fbc11908620aeab3377f067d59b3a2049ce", "message": "TUSCANY-3468 - Fixing NPE when contracts are not available (e.g in implementation widget)\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@912090 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_86", "file": [{"additions": 19, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/565df78627d796669de33365144342d83eaaba6c/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeEndpointReferenceImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/565df78627d796669de33365144342d83eaaba6c/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeEndpointReferenceImpl.java", "sha": "940155d613d05cafc90823030fb0bdfe7b92a0c5", "changes": 36, "status": "modified", "deletions": 17, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeEndpointReferenceImpl.java?ref=565df78627d796669de33365144342d83eaaba6c", "patch": "@@ -258,7 +258,7 @@ private void initInvocationChains() {\n         // TODO - EPR why is this looking at the component types. The endpoint should have the right interface contract by this time\n         //InterfaceContract targetContract = getLeafInterfaceContract(endpoint);\n \n-        if (sourceContract == null) {\n+        if (sourceContract == null && targetContract != null) {\n             // TODO: until the web component introspection is brought up\n             try {\n                 sourceContract = (InterfaceContract)targetContract.clone();\n@@ -268,22 +268,24 @@ private void initInvocationChains() {\n         }\n \n         List<InvocationChain> chainList = new ArrayList<InvocationChain>();\n-        RuntimeComponentReference reference = (RuntimeComponentReference)getReference();\n-        for (Operation operation : sourceContract.getInterface().getOperations()) {\n-            Operation targetOperation = interfaceContractMapper.map(targetContract.getInterface(), operation);\n-            if (targetOperation == null) {\n-                throw new ServiceRuntimeException(\"No matching operation for \" + operation.getName()\n-                    + \" is found in reference \"\n-                    + getComponent().getURI()\n-                    + \"#\"\n-                    + reference.getName());\n-            }\n-            InvocationChain chain = new InvocationChainImpl(operation, targetOperation, true, phaseManager);\n-            if (operation.isNonBlocking()) {\n-                addNonBlockingInterceptor(chain);\n-            }\n-            chainList.add(chain);\n-            addReferenceBindingInterceptor(chain, operation);\n+        if(sourceContract != null && targetContract != null) {\n+            RuntimeComponentReference reference = (RuntimeComponentReference)getReference();\n+            for (Operation operation : sourceContract.getInterface().getOperations()) {\n+                Operation targetOperation = interfaceContractMapper.map(targetContract.getInterface(), operation);\n+                if (targetOperation == null) {\n+                    throw new ServiceRuntimeException(\"No matching operation for \" + operation.getName()\n+                        + \" is found in reference \"\n+                        + getComponent().getURI()\n+                        + \"#\"\n+                        + reference.getName());\n+                }\n+                InvocationChain chain = new InvocationChainImpl(operation, targetOperation, true, phaseManager);\n+                if (operation.isNonBlocking()) {\n+                    addNonBlockingInterceptor(chain);\n+                }\n+                chainList.add(chain);\n+                addReferenceBindingInterceptor(chain, operation);\n+            }            \n         }\n \n         // Set the chains until it's fully populated. If we initialize too early, any exeception could", "filename": "modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeEndpointReferenceImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/37ac31a3e57cac4939358a08f40eac40893c459c", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/4e3af1039ef9155b93c34c08f290df5f49e2c839", "message": "Use a dummy invocation chain to avoid NPE on ConcurrentHashMap\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@907812 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_87", "file": [{"additions": 10, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/37ac31a3e57cac4939358a08f40eac40893c459c/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeEndpointImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/37ac31a3e57cac4939358a08f40eac40893c459c/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeEndpointImpl.java", "sha": "733880a9b3b41c8433e34f473569d2de698338fe", "changes": 11, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeEndpointImpl.java?ref=37ac31a3e57cac4939358a08f40eac40893c459c", "patch": "@@ -200,6 +200,11 @@ public synchronized InvocationChain getBindingInvocationChain() {\n         return bindingInvocationChain;\n     }\n \n+    /**\n+     * A dummy invocation chain representing null as ConcurrentHashMap doesn't allow null values\n+     */\n+    private static final InvocationChain NULL_CHAIN = new InvocationChainImpl(null, null, false, null);\n+\n     public InvocationChain getInvocationChain(Operation operation) {\n         InvocationChain cached = invocationChainMap.get(operation);\n         if (cached == null) {\n@@ -211,9 +216,13 @@ public InvocationChain getInvocationChain(Operation operation) {\n                     return chain;\n                 }\n             }\n-            invocationChainMap.put(operation, null);\n+            // Cache it with the NULL_CHAIN to avoid NPE\n+            invocationChainMap.put(operation, NULL_CHAIN);\n             return null;\n         } else {\n+            if (cached == NULL_CHAIN) {\n+                cached = null;\n+            }\n             return cached;\n         }\n     }", "filename": "modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeEndpointImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/b3893f476db56498078ae7dd24ae0794231f6102", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/182ef26e26063153eb35a8a23ead1e58bf73069b", "message": "Avoid NPE when sourec interface hasn't yet by introspected\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@887662 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_88", "file": [{"additions": 9, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/b3893f476db56498078ae7dd24ae0794231f6102/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeEndpointReferenceImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/b3893f476db56498078ae7dd24ae0794231f6102/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeEndpointReferenceImpl.java", "sha": "ad7985f91b713cc23177b329b025a1b927ed22be", "changes": 9, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeEndpointReferenceImpl.java?ref=b3893f476db56498078ae7dd24ae0794231f6102", "patch": "@@ -260,6 +260,15 @@ private void initInvocationChains() {\n         // TODO - EPR why is this looking at the component types. The endpoint should have the right interface contract by this time\n         //InterfaceContract targetContract = getLeafInterfaceContract(endpoint);\n \n+        if (sourceContract == null) {\n+            // TODO: until the web component introspection is brought up\n+            try {\n+                sourceContract = (InterfaceContract)targetContract.clone();\n+            } catch (CloneNotSupportedException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+        \n         RuntimeComponentReference reference = (RuntimeComponentReference)getReference();\n         for (Operation operation : sourceContract.getInterface().getOperations()) {\n             Operation targetOperation = interfaceContractMapper.map(targetContract.getInterface(), operation);", "filename": "modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeEndpointReferenceImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/2ecbeb9b3a738dd4aec9ddd259294b8028a0b5ef", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/fc831c29658c18edcf6851d6cb2f06cc38946229", "message": "Fix NPE when autowire is null (ASM_5031 though this doesn't yet fix the test)\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@806485 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_89", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/2ecbeb9b3a738dd4aec9ddd259294b8028a0b5ef/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/ComponentReferenceEndpointReferenceBuilderImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/2ecbeb9b3a738dd4aec9ddd259294b8028a0b5ef/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/ComponentReferenceEndpointReferenceBuilderImpl.java", "sha": "2adf29d33e0aa1625b622798cb20ab7e7f0934ba", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/ComponentReferenceEndpointReferenceBuilderImpl.java?ref=2ecbeb9b3a738dd4aec9ddd259294b8028a0b5ef", "patch": "@@ -432,7 +432,7 @@ private void validateReferenceMultiplicity(Composite composite, Component compon\n                 } else {             \n                     // no error if reference is autowire and more targets\n                     // than multiplicity have been found \n-                    if (componentReference.getAutowire() == true){\n+                    if (componentReference.getAutowire() == Boolean.TRUE){\n                         break;\n                     }\n                     ", "filename": "modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/ComponentReferenceEndpointReferenceBuilderImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/8702f791daa62b279b5cb54d08c8a508e48321b1", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/732da74304ca016a7fb734fcea5e9f6c8630bbdc", "message": "Reenable the EquinoxHost test case that was ignored due to NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@801708 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_90", "file": [{"additions": 7, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/8702f791daa62b279b5cb54d08c8a508e48321b1/modules/node-launcher-equinox/src/main/java/org/apache/tuscany/sca/node/equinox/launcher/FrameworkLauncher.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/8702f791daa62b279b5cb54d08c8a508e48321b1/modules/node-launcher-equinox/src/main/java/org/apache/tuscany/sca/node/equinox/launcher/FrameworkLauncher.java", "sha": "5714df2a5d285a778b8d000bebed3fed5b6d3597", "changes": 14, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/node-launcher-equinox/src/main/java/org/apache/tuscany/sca/node/equinox/launcher/FrameworkLauncher.java?ref=8702f791daa62b279b5cb54d08c8a508e48321b1", "patch": "@@ -38,6 +38,8 @@\n  * Launcher for the OSGi framework using the framework launch APIs\n  */\n public class FrameworkLauncher implements BundleActivator {\n+    private static final String FACTORY_RESOURCE = \"META-INF/services/\" + FrameworkFactory.class.getName();\n+\n     private static final Logger logger = Logger.getLogger(FrameworkLauncher.class.getName());\n \n     private FrameworkFactory factory;\n@@ -46,22 +48,20 @@\n     @SuppressWarnings(\"unchecked\")\n     private synchronized FrameworkFactory loadFrameworkFactory() {\n         if (factory == null) {\n-            // Use reflection APIs to call ServiceDiscovery to avoid hard dependency to tuscany-extensibility\n             try {\n-                ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-                InputStream is =\n-                    classLoader.getResourceAsStream(\"META-INF/services/\" + FrameworkFactory.class.getName());\n+                ClassLoader classLoader = FrameworkFactory.class.getClassLoader();\n+                InputStream is = classLoader.getResourceAsStream(FACTORY_RESOURCE);\n                 if (is == null) {\n-                    classLoader = FrameworkFactory.class.getClassLoader();\n-                    is = classLoader.getResourceAsStream(\"META-INF/services/\" + FrameworkFactory.class.getName());\n+                    classLoader = Thread.currentThread().getContextClassLoader();\n+                    is = classLoader.getResourceAsStream(FACTORY_RESOURCE);\n                 }\n                 if (is == null) {\n                     return null;\n                 }\n                 BufferedReader reader = null;\n                 String line = null;\n                 try {\n-                    reader = new BufferedReader(new InputStreamReader(is));\n+                    reader = new BufferedReader(new InputStreamReader(is, \"UTF-8\"));\n                     while (true) {\n                         line = reader.readLine();\n                         if (line == null)", "filename": "modules/node-launcher-equinox/src/main/java/org/apache/tuscany/sca/node/equinox/launcher/FrameworkLauncher.java"}, {"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/8702f791daa62b279b5cb54d08c8a508e48321b1/modules/node-launcher-equinox/src/test/java/org/apache/tuscany/sca/node/equinox/launcher/EquinoxOSGiHostTestCase.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/8702f791daa62b279b5cb54d08c8a508e48321b1/modules/node-launcher-equinox/src/test/java/org/apache/tuscany/sca/node/equinox/launcher/EquinoxOSGiHostTestCase.java", "sha": "5728ad2e07a1c873a0a3d34a560694656be332a4", "changes": 4, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/node-launcher-equinox/src/test/java/org/apache/tuscany/sca/node/equinox/launcher/EquinoxOSGiHostTestCase.java?ref=8702f791daa62b279b5cb54d08c8a508e48321b1", "patch": "@@ -23,16 +23,14 @@\n import java.util.Enumeration;\n \n import org.junit.Assert;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.osgi.framework.Bundle;\n import org.osgi.framework.BundleContext;\n \n \n /**\n- * \n+ * Test case for equinox host\n  */\n-@Ignore\n public class EquinoxOSGiHostTestCase {\n \n     @Test", "filename": "modules/node-launcher-equinox/src/test/java/org/apache/tuscany/sca/node/equinox/launcher/EquinoxOSGiHostTestCase.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/f2718e3d8efdcd44ac63f2af2c4ae1fda846188b", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/55a69dadd69567e99a586568e000b6795dde03c2", "message": "Be more defensive when checking for interface compatibility. Prevent NPE when testing ASM_8003.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@799581 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_91", "file": [{"additions": 12, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/f2718e3d8efdcd44ac63f2af2c4ae1fda846188b/modules/interface/src/main/java/org/apache/tuscany/sca/interfacedef/impl/InterfaceContractMapperImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/f2718e3d8efdcd44ac63f2af2c4ae1fda846188b/modules/interface/src/main/java/org/apache/tuscany/sca/interfacedef/impl/InterfaceContractMapperImpl.java", "sha": "289fd255942c54fb6f707bcff8b5080909ba4028", "changes": 12, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/interface/src/main/java/org/apache/tuscany/sca/interfacedef/impl/InterfaceContractMapperImpl.java?ref=f2718e3d8efdcd44ac63f2af2c4ae1fda846188b", "patch": "@@ -218,6 +218,18 @@ public boolean checkCompatibility(InterfaceContract source,\n             // Shortcut for performance\n             return true;\n         }\n+        \n+        if (source == null || target == null){\n+            return false;\n+        }\n+        \n+        if (source.getInterface() == target.getInterface()){\n+            return true;\n+        }\n+        \n+        if (source.getInterface() == null || target.getInterface() == null){\n+            return false;\n+        }\n \n         if (source.getInterface().isDynamic() || target.getInterface().isDynamic()) {\n             return true;", "filename": "modules/interface/src/main/java/org/apache/tuscany/sca/interfacedef/impl/InterfaceContractMapperImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/32768901f41138fe6e97e95b711c7636a8912d6a", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/5572ea62a850e06b428451e21dcb10ede67f6564", "message": "Check null to avoid NPE (we also have to find out why Endpoint.interfaceContract is not set)\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@788811 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_92", "file": [{"additions": 20, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/32768901f41138fe6e97e95b711c7636a8912d6a/modules/implementation-bpel-runtime/src/main/java/org/apache/tuscany/sca/implementation/bpel/ode/provider/BPELImplementationProvider.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/32768901f41138fe6e97e95b711c7636a8912d6a/modules/implementation-bpel-runtime/src/main/java/org/apache/tuscany/sca/implementation/bpel/ode/provider/BPELImplementationProvider.java", "sha": "6ac9bc0a3fb74584991a5b41a5b033496dd06df0", "changes": 39, "status": "modified", "deletions": 19, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/implementation-bpel-runtime/src/main/java/org/apache/tuscany/sca/implementation/bpel/ode/provider/BPELImplementationProvider.java?ref=32768901f41138fe6e97e95b711c7636a8912d6a", "patch": "@@ -6,15 +6,15 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n- * under the License.    \n+ * under the License.\n  */\n package org.apache.tuscany.sca.implementation.bpel.ode.provider;\n \n@@ -26,7 +26,6 @@\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.tuscany.sca.assembly.Endpoint;\n-import org.apache.tuscany.sca.assembly.EndpointReference;\n import org.apache.tuscany.sca.assembly.Reference;\n import org.apache.tuscany.sca.assembly.Service;\n import org.apache.tuscany.sca.databinding.xml.DOMDataBinding;\n@@ -42,18 +41,18 @@\n \n /**\n  * BPEL Implementation provider\n- * \n+ *\n  * @version $Rev$ $Date$\n  */\n public class BPELImplementationProvider implements ImplementationProvider {\n     private final Log __log = LogFactory.getLog(getClass());\n-    \n+\n     private RuntimeComponent component;\n     private BPELImplementation implementation;\n-    \n+\n     private EmbeddedODEServer odeServer;\n     private TransactionManager txMgr;\n-    \n+\n     /**\n      * Constructs a new BPEL Implementation.\n      */\n@@ -65,32 +64,34 @@ public BPELImplementationProvider(RuntimeComponent component,\n         this.implementation = implementation;\n         this.odeServer = odeServer;\n         this.txMgr = txMgr;\n-        \n+\n         // Configure the service and reference interfaces to use a DOM databinding\n         // as it's what ODE expects\n         for (Service service: component.getServices()) {\n         \t//TODO - MJE, 06/06/2009 - we can eventually remove the reset of the service interface\n         \t// contract and leave it to the Endpoints only\n             service.getInterfaceContract().getInterface().resetDataBinding(DOMDataBinding.NAME);\n             for( Endpoint endpoint : service.getEndpoints() ) {\n-            \tendpoint.getInterfaceContract().getInterface().resetDataBinding(DOMDataBinding.NAME);\n+                if (endpoint.getInterfaceContract() != null) {\n+                    endpoint.getInterfaceContract().getInterface().resetDataBinding(DOMDataBinding.NAME);\n+                }\n             } // end for\n         } // end for\n-       \n+\n         for (Reference reference: component.getReferences()) {\n             reference.getInterfaceContract().getInterface().resetDataBinding(DOMDataBinding.NAME);\n             /* for( EndpointReference epr : reference.getEndpointReferences() ) {\n             \tepr.getInterfaceContract().getInterface().resetDataBinding(DOMDataBinding.NAME);\n             } // end for */\n         } // end for\n-        \n+\n     }\n \n     public Invoker createInvoker(RuntimeComponentService service, Operation operation) {\n         BPELInvoker invoker = new BPELInvoker(component, service, operation, odeServer, txMgr);\n         return invoker;\n     }\n-    \n+\n     public boolean supportsOneWayInvocation() {\n         return false;\n     }\n@@ -99,7 +100,7 @@ public void start() {\n         if(__log.isInfoEnabled()) {\n             __log.info(\"Starting \" + component.getName());\n         }\n-        \n+\n         try {\n             if (!odeServer.isInitialized()) {\n                 // start ode server\n@@ -108,9 +109,9 @@ public void start() {\n \n             String location = this.implementation.getProcessDefinition().getLocation();\n             URI deployURI = new URI(null, location, null);\n-            \n+\n             File deploymentDir = new File(deployURI).getParentFile();\n-            \n+\n             if(__log.isInfoEnabled()) {\n                 __log.info(\">>> Deploying : \" + deploymentDir.toString());\n             }\n@@ -129,7 +130,7 @@ public void start() {\n                     //txMgr.rollback();\n                 }\n             }\n-            \n+\n         } catch (ODEInitializationException inite) {\n             throw new RuntimeException(\"BPEL Component Type Implementation : Error initializing embedded ODE server \" + inite.getMessage(), inite);\n         } catch(Exception e) {\n@@ -141,12 +142,12 @@ public void stop() {\n         if(__log.isInfoEnabled()) {\n             __log.info(\"Stopping \" + component.getName());\n         }\n-        \n+\n         if (odeServer.isInitialized()) {\n             // start ode server\n             odeServer.stop();\n         }\n-        \n+\n         txMgr = null;\n \n         if(__log.isInfoEnabled()) {", "filename": "modules/implementation-bpel-runtime/src/main/java/org/apache/tuscany/sca/implementation/bpel/ode/provider/BPELImplementationProvider.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/5092ebd86016507437b26338710b9a3d3a3ff897", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/d47affed6e1498368d3bb5c97ff027dce3fe4c2d", "message": "Use uri for Endpoint/EndpointReference\nDefer the deserilization of Endpoint to later point to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@783634 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_93", "file": [{"additions": 6, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/5092ebd86016507437b26338710b9a3d3a3ff897/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/Endpoint2.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/5092ebd86016507437b26338710b9a3d3a3ff897/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/Endpoint2.java", "sha": "f400cf0d01635a83ffb00bf3fe1d2667b667b76c", "changes": 12, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/Endpoint2.java?ref=5092ebd86016507437b26338710b9a3d3a3ff897", "patch": "@@ -58,42 +58,42 @@\n      *\n      * @return componentName\n      */\n-    String getComponentName();\n+    // String getComponentName();\n \n     /**\n      * Set the name of the component to which this endpoint refers\n      *\n      * @Param componentName\n      */\n-    void setComponentName(String componentName);\n+    // void setComponentName(String componentName);\n \n     /**\n      * Get the name of the service to which this endpoint refers\n      *\n      * @return serviceName\n      */\n-    String getServiceName();\n+    // String getServiceName();\n \n     /**\n      * Set the name of the component to which this endpoint refers\n      *\n      * @Param serviceName\n      */\n-    void setServiceName(String serviceName);\n+    // void setServiceName(String serviceName);\n \n     /**\n      * Get the name of the binding to which this endpoint refers\n      *\n      * @return bindingName\n      */\n-    String getBindingName();\n+    // String getBindingName();\n \n     /**\n      * Set the name of the component to which this endpoint refers\n      *\n      * @param bindingName\n      */\n-    void setBindingName(String bindingName);\n+    // void setBindingName(String bindingName);\n \n     /**\n      * Get the component model object", "filename": "modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/Endpoint2.java"}, {"additions": 174, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/5092ebd86016507437b26338710b9a3d3a3ff897/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/ComponentReferenceEndpointReferenceBuilderImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/5092ebd86016507437b26338710b9a3d3a3ff897/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/ComponentReferenceEndpointReferenceBuilderImpl.java", "sha": "7fd49a9d0d611727fd0fbd00e2a5d3eabd7fa056", "changes": 325, "status": "modified", "deletions": 151, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/ComponentReferenceEndpointReferenceBuilderImpl.java?ref=5092ebd86016507437b26338710b9a3d3a3ff897", "patch": "@@ -6,15 +6,15 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n- * under the License.    \n+ * under the License.\n  */\n \n package org.apache.tuscany.sca.assembly.builder.impl;\n@@ -35,7 +35,6 @@\n import org.apache.tuscany.sca.assembly.EndpointReference2;\n import org.apache.tuscany.sca.assembly.Implementation;\n import org.apache.tuscany.sca.assembly.Multiplicity;\n-import org.apache.tuscany.sca.assembly.Reference;\n import org.apache.tuscany.sca.assembly.SCABinding;\n import org.apache.tuscany.sca.assembly.builder.CompositeBuilder;\n import org.apache.tuscany.sca.assembly.builder.CompositeBuilderException;\n@@ -57,7 +56,7 @@\n \t// Testing\n \t//boolean useNew = true;\n \tboolean useNew = false;\n-\t\n+\n     public ComponentReferenceEndpointReferenceBuilderImpl(AssemblyFactory assemblyFactory, InterfaceContractMapper interfaceContractMapper) {\n         super(assemblyFactory, null, null, null, interfaceContractMapper);\n     }\n@@ -68,48 +67,48 @@ public String getID() {\n \n     /**\n      * Create endpoint references for all component references.\n-     * \n+     *\n      * @param composite\n      */\n-    public void build(Composite composite, Definitions definitions, Monitor monitor) throws CompositeBuilderException \n+    public void build(Composite composite, Definitions definitions, Monitor monitor) throws CompositeBuilderException\n     {\n     \tthis.monitor = monitor;\n-        \n-        \n+\n+\n     \t// process component services\n-    \tprocessComponentReferences(composite);  \n+    \tprocessComponentReferences(composite);\n     }\n-      \n+\n     private void processComponentReferences(Composite composite) {\n-        \n+\n         // index all of the components in the composite\n         Map<String, Component> components = new HashMap<String, Component>();\n         indexComponents(composite, components);\n-        \n+\n         // index all of the services in the composite\n         Map<String, ComponentService> componentServices = new HashMap<String, ComponentService>();\n         indexServices(composite, componentServices);\n-        \n+\n         // create endpoint references for each component's references\n         for (Component component : composite.getComponents()) {\n-        \t\n+\n             for (ComponentReference reference : component.getReferences()) {\n                 createReferenceEndpointReferences2( composite, component, reference, components, componentServices);\n             } // end for\n-            \n+\n             // recurse for composite implementations\n             Implementation implementation = component.getImplementation();\n             if (implementation instanceof Composite) {\n                 processComponentReferences((Composite)implementation);\n             }\n-            \n+\n             // create endpoint references to represent the component reference\n             for (ComponentReference reference : component.getReferences()) {\n-                \n+\n             \tif( !useNew ) {\n             \t\tcreateReferenceEndpointReferences(composite, component, reference, components, componentServices);\n             \t} // end if\n-                \n+\n                 // fix up links between endpoints and endpoint references that represent callbacks\n                 for (ComponentService service : component.getServices()){\n                     if ((service.getInterfaceContract() != null) &&\n@@ -125,28 +124,28 @@ private void processComponentReferences(Composite composite) {\n             } // end for\n         } // end for\n     } // end method processCompoenntReferences\n-    \n-    private void createReferenceEndpointReferences(Composite composite, \n-                                                   Component component, \n-                                                   ComponentReference reference, \n+\n+    private void createReferenceEndpointReferences(Composite composite,\n+                                                   Component component,\n+                                                   ComponentReference reference,\n                                                    Map<String, Component> components,\n                                                    Map<String, ComponentService> componentServices)\n     {\n-        // Get reference targets \n+        // Get reference targets\n     \tList<ComponentService> refTargets = getReferenceTargets( reference );\n-    \tif (reference.getAutowire() == Boolean.TRUE && \n+    \tif (reference.getAutowire() == Boolean.TRUE &&\n             reference.getTargets().isEmpty()) {\n \n             // Find suitable targets in the current composite for an\n             // autowired reference\n             Multiplicity multiplicity = reference.getMultiplicity();\n             for (Component targetComponent : composite.getComponents()) {\n-                \n+\n                 // Prevent autowire connecting to self\n             \tif( targetComponent == component ) continue;\n-                \n+\n                 for (ComponentService targetComponentService : targetComponent.getServices()) {\n-                    if (reference.getInterfaceContract() == null || \n+                    if (reference.getInterfaceContract() == null ||\n                         interfaceContractMapper.isCompatible(reference.getInterfaceContract(),\n                                                              targetComponentService.getInterfaceContract())) {\n                         // create endpoint reference - with a dummy endpoint which will be replaced when policies\n@@ -156,42 +155,42 @@ private void createReferenceEndpointReferences(Composite composite,\n                         reference.getEndpointReferences().add(endpointRef);\n \n                         // Stop with the first match for 0..1 and 1..1 references\n-                        if (multiplicity == Multiplicity.ZERO_ONE || \n+                        if (multiplicity == Multiplicity.ZERO_ONE ||\n                             multiplicity == Multiplicity.ONE_ONE) {\n                             break;\n                         } // end if\n                     } // end if\n                 } // end for\n             } // end for\n \n-            if (multiplicity == Multiplicity.ONE_N || \n+            if (multiplicity == Multiplicity.ONE_N ||\n                 multiplicity == Multiplicity.ONE_ONE) {\n                 if (reference.getEndpointReferences().size() == 0) {\n                     warning(monitor, \"NoComponentReferenceTarget\",\n-                            reference, \n+                            reference,\n                             reference.getName());\n                 }\n             }\n \n         } else if (!refTargets.isEmpty()) {\n-            // Check that the component reference does not mix the use of endpoint references \n-        \t// specified via the target attribute with the presence of binding elements \n+            // Check that the component reference does not mix the use of endpoint references\n+        \t// specified via the target attribute with the presence of binding elements\n             if( bindingsIdentifyTargets( reference ) ) {\n                 warning(monitor, \"ReferenceEndPointMixWithTarget\",\n                         composite, composite.getName().toString(), component.getName(), reference.getName());\n             }\n \n             // Resolve targets specified on the component reference\n-            for (ComponentService target : refTargets) {               \n-                \n+            for (ComponentService target : refTargets) {\n+\n                 String targetName = target.getName();\n                 ComponentService targetComponentService = componentServices.get(targetName);\n-                \n+\n                 Component targetComponent = getComponentFromTargetName( components, targetName );\n \n                 if (targetComponentService != null) {\n                     // Check that target component service provides a superset of the component reference interface\n-                    if (reference.getInterfaceContract() == null || \n+                    if (reference.getInterfaceContract() == null ||\n                         interfaceContractMapper.isCompatible(reference.getInterfaceContract(),\n                                                              targetComponentService.getInterfaceContract())) {\n \n@@ -202,25 +201,25 @@ private void createReferenceEndpointReferences(Composite composite,\n                         reference.getEndpointReferences().add(endpointRef);\n                     } else {\n                         warning(monitor, \"ReferenceIncompatibleInterface\",\n-                                composite, \n+                                composite,\n                                 composite.getName().toString(),\n-                                component.getName() + \".\" + reference.getName(), \n+                                component.getName() + \".\" + reference.getName(),\n                                 targetName);\n                     }\n                 } else {\n                     // add an unresolved endpoint reference with an unresolved endpoint to go with it\n                     EndpointReference2 endpointRef = createEndpointRef( component, reference, true  );\n-                    endpointRef.setTargetEndpoint(createEndpoint(targetName));\n+                    endpointRef.setTargetEndpoint(createEndpoint(component, targetName));\n                     reference.getEndpointReferences().add(endpointRef);\n                     warning(monitor, \"ComponentReferenceTargetNotFound\",\n-                            composite, \n+                            composite,\n                             composite.getName().toString(),\n                             targetName);\n                 } // end if\n             } // end for\n         } // end if\n \n-        // if no endpoints have found so far the bindings hold the targets. \n+        // if no endpoints have found so far the bindings hold the targets.\n         if (reference.getEndpointReferences().isEmpty()) {\n             for (Binding binding : reference.getBindings()) {\n \n@@ -232,10 +231,10 @@ private void createReferenceEndpointReferences(Composite composite,\n                 \t// Regular forward references are UNWIRED with no endpoint if they have an SCABinding with NO targets\n                 \t// and NO URI set - but Callbacks with an SCABinding are wired and need an endpoint\n                 \tif( !reference.isCallback() && (binding instanceof SCABinding) ) continue;\n-                \t\n+\n                     // create endpoint reference for manually configured bindings with a resolved endpoint to\n                 \t// signify that this reference is pointing at some unwired endpoint\n-                    EndpointReference2 endpointRef = createEndpointRef( component, reference, \n+                    EndpointReference2 endpointRef = createEndpointRef( component, reference,\n                     \t\tbinding, null, false  );\n                     endpointRef.setTargetEndpoint(createEndpoint(false));\n                     reference.getEndpointReferences().add(endpointRef);\n@@ -253,14 +252,14 @@ private void createReferenceEndpointReferences(Composite composite,\n                 ComponentService targetComponentService = componentServices.get(uri);\n                 Component targetComponent = getComponentFromTargetName( components, uri );\n \n-                // If the binding URI matches a component in the composite, configure an endpoint reference with \n-                // this component as the target. \n+                // If the binding URI matches a component in the composite, configure an endpoint reference with\n+                // this component as the target.\n                 // If not, the binding URI is assumed to reference an external service\n                 if (targetComponentService != null) {\n \n                     // Check that the target component service provides\n                     // a superset of the component reference interface\n-                    if (reference.getInterfaceContract() == null || \n+                    if (reference.getInterfaceContract() == null ||\n                         interfaceContractMapper.isCompatible(reference.getInterfaceContract(),\n                                                              targetComponentService.getInterfaceContract())) {\n                         // create endpoint reference with dummy endpoint which will be replaced when policies\n@@ -270,22 +269,22 @@ private void createReferenceEndpointReferences(Composite composite,\n                         reference.getEndpointReferences().add(endpointRef);\n                     } else {\n                         warning(monitor, \"ReferenceIncompatibleInterface\",\n-                                composite, \n+                                composite,\n                                 composite.getName().toString(),\n-                                reference.getName(), \n+                                reference.getName(),\n                                 uri);\n                     }\n                 } else {\n-                    // create endpoint reference for manually configured bindings with resolved endpoint \n+                    // create endpoint reference for manually configured bindings with resolved endpoint\n                 \t// to signify that this reference is pointing at some unwired endpoint\n                     EndpointReference2 endpointRef = createEndpointRef( component, reference, binding, null, false  );\n                     endpointRef.setTargetEndpoint(createEndpoint( false ));\n                     reference.getEndpointReferences().add(endpointRef);\n-                } // end if \n+                } // end if\n             }\n         }\n     } // end method\n-    \n+\n     /**\n      * Create Endpoint References for a component reference inside a given composite\n      * @param composite - the composite\n@@ -294,30 +293,30 @@ private void createReferenceEndpointReferences(Composite composite,\n      * @param components - a map of the components in the composite\n      * @param componentServices - a map of the component services in the composite\n      */\n-    private void createReferenceEndpointReferences2(Composite composite, \n-            Component component, \n-            ComponentReference reference, \n+    private void createReferenceEndpointReferences2(Composite composite,\n+            Component component,\n+            ComponentReference reference,\n             Map<String, Component> components,\n             Map<String, ComponentService> componentServices)\n     {\n     \t// Find all the leafmost component references related to this component reference\n     \tEndpointrefInfo refInfo = gatherEndpointrefInfo( component, reference, null );\n-    \t\n-    \tList<Endpoint2> endpoints = getReferenceEndpoints( composite, component, \n+\n+    \tList<Endpoint2> endpoints = getReferenceEndpoints( composite, component,\n         \t\t                                           reference, components, componentServices );\n-    \t\n+\n     \tMultiplicity multiplicity = reference.getMultiplicity();\n         if (multiplicity == Multiplicity.ONE_N || multiplicity == Multiplicity.ONE_ONE) {\n         \t// If there are no endpoints defined and also no endpoint references already present\n         \t// then this reference is unwired, which is an error - the existing endpoint references\n         \t// will have been attached to a nested reference when a promoting reference has its endpoint\n         \t// references computed\n             if (endpoints.size() == 0 && !reference.isPromoted() ) {\n-                warning(monitor, \"ReferenceWithoutTargets\", reference, \n+                warning(monitor, \"ReferenceWithoutTargets\", reference,\n                 \t\tcomposite.getName().toString(), reference.getName());\n             } // end if\n         } // end if\n-        \n+\n         // An endpoint reference is created for the combination of each leafmost component reference and\n         // each discovered endpoint\n     \tfor( int i = 0; i < refInfo.getRefs().size(); i++ ) {\n@@ -326,13 +325,13 @@ private void createReferenceEndpointReferences2(Composite composite,\n     \t\tboolean unresolved = false;\n \n         \tfor( Endpoint2 endpoint : endpoints ) {\n-        \t\tif( endpoint.isUnresolved() && endpoint.getComponent() == null && endpoint.getService() == null ) { \n-        \t\t\tunresolved = true; \n+        \t\tif( endpoint.isUnresolved() && endpoint.getComponent() == null && endpoint.getService() == null ) {\n+        \t\t\tunresolved = true;\n         \t\t} else {\n-        \t\t\tunresolved = false; \n+        \t\t\tunresolved = false;\n         \t\t} // end if\n         \t\t// Create an EndpointReference pointing at the endpoint\n-        \t\tEndpointReference2 endRef =\tcreateEndpointRef( leafComponent, leafReference, \n+        \t\tEndpointReference2 endRef =\tcreateEndpointRef( leafComponent, leafReference,\n         \t    \t\t\t\t\t\t\t\t\t\t\t   endpoint.getBinding(), endpoint, unresolved);\n         \t\t// Add the EndpointReference to the top level AND the leaf level reference, if not the same!!\n         \t\tif( useNew ) {\n@@ -349,42 +348,42 @@ private void createReferenceEndpointReferences2(Composite composite,\n         \t\t//\t\tendpoint.getComponent() + \" target Service = \" + endpoint.getService() );\n         \t} // end for\n         } // end for\n-    \t\n+\n     } // end method createReferenceEndpointReferences2\n-    \n-    private List<Endpoint2> getReferenceEndpoints(Composite composite, Component component, \n+\n+    private List<Endpoint2> getReferenceEndpoints(Composite composite, Component component,\n     \t\tComponentReference reference, Map<String, Component> components,\n             Map<String, ComponentService> componentServices ) {\n     \t// Target services for a component reference are specified in one of a number of ways, in order:\n     \t// 1. Component services declared by the @target attribute of the reference\n     \t// 2. Service endpoints inside or outside the domain through bindings with configured endpoints\n-    \t// 3. If @autowire=true is declared, component services within the composite containing the component which \n+    \t// 3. If @autowire=true is declared, component services within the composite containing the component which\n     \t//    are compatible with the reference\n     \t// 1. takes precedence over 2. - 3. is only used if neither of the other applies\n-    \t\n+\n     \tList<Endpoint2> endpoints = new ArrayList<Endpoint2>();\n-    \t\n+\n     \t// Get targets for references that are callbacks...\n-    \tif( getReferenceCallbackEndpoints( composite, component, reference, \n+    \tif( getReferenceCallbackEndpoints( composite, component, reference,\n                 components, componentServices, endpoints ) ) {\n-    \t\n+\n     \t// Get reference targets declared by @target attribute\n-    \t} else if ( getReferenceTargetEndpoints( composite, component, reference, \n+    \t} else if ( getReferenceTargetEndpoints( composite, component, reference,\n         \t\t                          components, componentServices, endpoints ) ) {\n-    \t\n+\n    \t\t// TODO - need to ensure that <wire/> elements are handled correctly\n     \t// Get reference targets identified by configured <binding/> subelements\n     \t} else if ( getReferenceBindingEndpoints( composite, component, reference,\n     \t\t\t                                  components, componentServices, endpoints )) {\n-    \t\n-    \t// Get reference targets identified by @autowire \n-    \t} else { \n+\n+    \t// Get reference targets identified by @autowire\n+    \t} else {\n     \t\tgetReferenceAutowireEndpoints( composite, component, reference,\n                                            components, componentServices, endpoints );\n-    \t} // end if \n+    \t} // end if\n     \treturn endpoints;\n     } // end method getReferenceEndpoints\n-    \n+\n     /**\n      * Gets the callback endpoints of a reference that is a callback reference\n      * @param composite - the composite\n@@ -395,7 +394,7 @@ private void createReferenceEndpointReferences2(Composite composite,\n      * @param endpoints - a list of the endpoints (in/out parameter)\n      * @return - true if the reference is a callback reference, false otherwise\n      */\n-    private boolean getReferenceCallbackEndpoints( Composite composite, Component component, \n+    private boolean getReferenceCallbackEndpoints( Composite composite, Component component,\n     \t\tComponentReference reference, Map<String, Component> components,\n             Map<String, ComponentService> componentServices, List<Endpoint2> endpoints ) {\n     \t// Only if this reference is a callback are there any endpoints of this kind\n@@ -406,14 +405,14 @@ private boolean getReferenceCallbackEndpoints( Composite composite, Component co\n \t    \t\tEndpoint2 endpoint = createEndpoint(true);\n \t    \t\tendpoint.setBinding(binding);\n \t            endpoints.add( endpoint );\n-    \t\t} // end for \n+    \t\t} // end for\n     \t\treturn true;\n     \t} else {\n     \t\treturn false;\n     \t} // end if\n-    \t\n+\n     } // end method getReferenceCallbackEndpoints\n-    \n+\n     /**\n      * Gets the endpoints for the services identified by the @target attribute of a reference\n      * @param composite - the composite\n@@ -424,19 +423,19 @@ private boolean getReferenceCallbackEndpoints( Composite composite, Component co\n      * @param endpoints - a list of the endpoints (in/out parameter)\n      * @return true if the @target attribute was set, false otherwise\n      */\n-    private boolean getReferenceTargetEndpoints( Composite composite, Component component, \n+    private boolean getReferenceTargetEndpoints( Composite composite, Component component,\n     \t\tComponentReference reference, Map<String, Component> components,\n             Map<String, ComponentService> componentServices, List<Endpoint2> endpoints ) {\n-    \t\n+\n     \tList<ComponentService> refTargets = getReferenceTargets( reference );\n     \tif ( !refTargets.isEmpty() ) {\n             // Resolve targets specified on the component reference\n-\t    \tfor (ComponentService target : refTargets) {               \n-\t            \n+\t    \tfor (ComponentService target : refTargets) {\n+\n \t            String targetName = target.getName();\n \t            Component targetComponent = getComponentFromTargetName( components, targetName );\n \t            ComponentService targetComponentService = componentServices.get(targetName);\n-\t\n+\n \t            if (targetComponentService != null) {\n \t                // Check that target component service provides a superset of the component reference interface\n \t                if (InterfaceContractIsCompatible( reference, targetComponentService )) {\n@@ -445,7 +444,7 @@ private boolean getReferenceTargetEndpoints( Composite composite, Component comp\n \t                \t// TODO\n \t                \tEndpoint2 endpoint = selectTargetEndpoint( reference, targetComponentService );\n \t                \tSystem.out.println(\"Selected Endpoint: component=\" + endpoint.getComponent().getName() +\n-\t                \t\t\t\" service=\" + endpoint.getService().getName() + \n+\t                \t\t\t\" service=\" + endpoint.getService().getName() +\n \t                \t\t\t\" binding=\" + endpoint.getBinding().toString());\n \t                \tEndpoint2 endpoint2 = createEndpoint(targetComponent, targetComponentService, true);\n \t                \tendpoint2.setBinding( endpoint.getBinding() );\n@@ -469,7 +468,7 @@ private boolean getReferenceTargetEndpoints( Composite composite, Component comp\n     \t} // end if\n \n     } // end method getReferenceTargetEndpoints\n-    \n+\n     /**\n      * Selects one endpoint of a target service which is compatible with the policy requirements of a reference\n      * @param reference - the reference (carries policy data with it)\n@@ -479,16 +478,16 @@ private boolean getReferenceTargetEndpoints( Composite composite, Component comp\n      * service.  If there are no matches, this method returns null\n      */\n     private Endpoint2 selectTargetEndpoint( ComponentReference reference, ComponentService service ) {\n-    \t    \t\n+\n     \t// Return the first endpoint with a Binding which is compatible with the policy requirements on\n     \t// the reference\n     \tfor( Endpoint2 endpoint : service.getEndpoints() ) {\n     \t\treturn endpoint;\n     \t} //end for\n-    \t\n+\n     \treturn null;\n     } // end method selectTargetEndpoint\n-    \n+\n     /**\n      * Gets the endpoints for the services identified by the <binding/> subelements of a reference\n      * @param composite - the composite\n@@ -499,7 +498,7 @@ private Endpoint2 selectTargetEndpoint( ComponentReference reference, ComponentS\n      * @param endpoints - a list of the endpoints (in/out parameter)\n      * @return true if the <binding/> subelements identify target services, false otherwise\n      */\n-    private boolean getReferenceBindingEndpoints( Composite composite, Component component, \n+    private boolean getReferenceBindingEndpoints( Composite composite, Component component,\n     \t\tComponentReference reference, Map<String, Component> components,\n             Map<String, ComponentService> componentServices, List<Endpoint2> endpoints ) {\n     \t// Get service endpoints declared by <binding/> subelements\n@@ -514,7 +513,7 @@ private boolean getReferenceBindingEndpoints( Composite composite, Component com\n                 \t// Regular forward references are UNWIRED with no endpoint if they have an SCABinding with NO targets\n                 \t// and NO URI set - but Callbacks with an SCABinding are wired and need an endpoint\n                 \tif( !reference.isCallback() && (binding instanceof SCABinding) ) continue;\n-                \t\n+\n                     // create an unwired endpoint containing the binding\n                 \tEndpoint2 endpoint = createEndpoint( false );\n                 \tendpoint.setBinding( binding );\n@@ -531,8 +530,8 @@ private boolean getReferenceBindingEndpoints( Composite composite, Component com\n                 ComponentService targetComponentService = componentServices.get(uri);\n                 Component targetComponent = getComponentFromTargetName( components, uri );\n \n-                // If the binding URI matches a component in the composite, configure an endpoint reference with \n-                // this component as the target. \n+                // If the binding URI matches a component in the composite, configure an endpoint reference with\n+                // this component as the target.\n                 // If not, the binding URI is assumed to reference an external service\n                 if (targetComponentService != null) {\n                     // Check that the target component service provides\n@@ -549,13 +548,13 @@ private boolean getReferenceBindingEndpoints( Composite composite, Component com\n                 } else {\n                     // create resolved endpoint to signify that this reference is pointing at some unwired endpoint\n                 \tendpoints.add( createEndpoint( false ) );\n-                } // end if \n+                } // end if\n             } // end for\n     \t\treturn true;\n     \t} else {\n     \t\treturn false;\n-    \t} // end if \n- \n+    \t} // end if\n+\n     } // end method getReferenceBindingEndpoints\n \n     /**\n@@ -568,26 +567,26 @@ private boolean getReferenceBindingEndpoints( Composite composite, Component com\n      * @param endpoints - a list of the endpoints (in/out parameter)\n      * @return true if the @autowire attribute was set, false otherwise\n      */\n-    private boolean getReferenceAutowireEndpoints( Composite composite, Component component, \n+    private boolean getReferenceAutowireEndpoints( Composite composite, Component component,\n         \t\tComponentReference reference, Map<String, Component> components,\n                 Map<String, ComponentService> componentServices, List<Endpoint2> endpoints ) {\n     \t// Get compatible target services if @autowire=true is specified\n     \tif ( reference.getAutowire() == Boolean.TRUE ) {\n-\t\t\n+\n             Multiplicity multiplicity = reference.getMultiplicity();\n             for (Component targetComponent : composite.getComponents()) {\n-                \n+\n                 // Prevent autowire connecting to self\n             \tif( targetComponent == component ) continue;\n-                \n+\n                 for (ComponentService targetComponentService : targetComponent.getServices()) {\n                     if (InterfaceContractIsCompatible( reference, targetComponentService )) {\n                         // create endpoint reference - with a dummy endpoint which will be replaced when policies\n                         // are matched and bindings are configured later\n                     \tendpoints.add( createEndpoint(targetComponent, targetComponentService, true) );\n \n                         // Stop with the first match for 0..1 and 1..1 references\n-                        if (multiplicity == Multiplicity.ZERO_ONE || \n+                        if (multiplicity == Multiplicity.ZERO_ONE ||\n                             multiplicity == Multiplicity.ONE_ONE) {\n                             break;\n                         } // end if\n@@ -597,10 +596,10 @@ private boolean getReferenceAutowireEndpoints( Composite composite, Component co\n     \t\treturn true;\n     \t} else {\n     \t\treturn false;\n-    \t} // end if \n+    \t} // end if\n \n     } // end method getReferenceAutowireEndpoints\n-    \n+\n     /**\n      * Evaluates if the interface contract of a component service is a compatible superset of the interface contract\n      * of a component reference\n@@ -613,7 +612,7 @@ private boolean InterfaceContractIsCompatible( ComponentReference reference, Com\n     \treturn interfaceContractMapper.isCompatible(reference.getInterfaceContract(),\n                                                     service.getInterfaceContract());\n     } // end method InterfaceContractIsCompatible\n-    \n+\n     /**\n      * Gather the Endpoint reference information for a component reference\n      * - gathers information from deeper in the hierarchy for a component which is implemented by a composite\n@@ -628,9 +627,9 @@ private EndpointrefInfo gatherEndpointrefInfo( Component component, ComponentRef\n     \tif( refInfo == null ) refInfo = new EndpointrefInfo();\n     \t// Deal with the cases where there is an error in the configuration\n     \tif( reference.isUnresolved() ) return refInfo;\n-    \t\n+\n     \trefInfo.setContract(reference.getInterfaceContract());\n-    \t// RULE: If the interface contract is not already set at this level, then it must be \n+    \t// RULE: If the interface contract is not already set at this level, then it must be\n     \t// identical across all the next level elements - otherwise they can be subsets\n     \tboolean equalInterfaces = false;\n     \tif( refInfo.getContract() == null ) equalInterfaces = true;\n@@ -653,10 +652,10 @@ private EndpointrefInfo gatherEndpointrefInfo( Component component, ComponentRef\n     \t} // end if\n     \t// RULE: Any PolicySets at this level override PolicySets from lower levels\n     \trefInfo.setPolicySets(reference.getPolicySets());\n-    \t\n-    \treturn refInfo;    \t\n+\n+    \treturn refInfo;\n     } // end method gatherEndpointrefInfo\n-    \n+\n     /**\n      * A class used to gather endpoint reference information for a component reference\n      * - handles the information in a promotion hierarchy where the component reference is implemented\n@@ -670,7 +669,7 @@ private EndpointrefInfo gatherEndpointrefInfo( Component component, ComponentRef\n \t\tprivate List<Intent> \t\t\t\tintents \t= new ArrayList<Intent>();\n     \tprivate List<PolicySet>\t\t\t\tpolicySets\t= null;\n     \tprivate boolean\t\t\t\t\t\tcontractEqual = false;\n-    \t\n+\n     \t/**\n     \t * Sets whether new contracts must be equal to the current contract or not\n     \t * @param isEqual - true means that Contracts must be equal to the current contract - false means that Contracts\n@@ -679,11 +678,11 @@ private EndpointrefInfo gatherEndpointrefInfo( Component component, ComponentRef\n     \tvoid setContractEqual( boolean isEqual ) {\n     \t\tcontractEqual = isEqual;\n     \t}\n-    \t\n+\n     \tboolean getContractEqual() {\n     \t\treturn contractEqual;\n     \t}\n-\t\t\n+\n     \tList<PolicySet> getPolicySets() {\n \t\t\treturn policySets;\n \t\t}\n@@ -695,23 +694,23 @@ void setPolicySets(List<PolicySet> policySets) {\n     \tList<Component> getComponents() {\n \t\t\treturn components;\n \t\t}\n-\t\t\n+\n     \tvoid addComponent(Component component) {\n \t\t\tthis.components.add( component );\n \t\t}\n-\t\t\n+\n     \tList<ComponentReference> getRefs() {\n \t\t\treturn refs;\n \t\t}\n-\t\t\n+\n     \tvoid addRef(ComponentReference ref) {\n \t\t\tthis.refs.add( ref );\n \t\t}\n-\t\t\n+\n     \tInterfaceContract getContract() {\n \t\t\treturn contract;\n \t\t}\n-\t\t\n+\n     \t/**\n     \t * Set the contract - with checking of the contract if a contract is already set\n     \t * @param contract - the contract to set\n@@ -735,9 +734,9 @@ void setContract(InterfaceContract contract) {\n                                 this.contract.toString(), contract.toString() );\n     \t\t\t\t} // end if\n     \t\t\t} // end if\n-    \t\t} // end if \n+    \t\t} // end if\n \t\t}\n-\t\t\n+\n     \tList<Intent> getIntents() {\n \t\t\treturn intents;\n \t\t}\n@@ -748,10 +747,10 @@ void setContract(InterfaceContract contract) {\n \t\tvoid addIntents(List<Intent> intents) {\n \t\t\tthis.intents.addAll( intents );\n \t\t}\n-    \t\n-    \t\n+\n+\n     } // end class EndpointrefInfo\n-    \n+\n     /**\n      * Evaluates whether the bindings attached to a reference identify one or more target services.\n      * @param reference - the reference\n@@ -761,13 +760,13 @@ private boolean bindingsIdentifyTargets( ComponentReference reference ) {\n     \tfor( Binding binding : reference.getBindings() ) {\n     \t\t// <binding.sca without a URI does not identify a target\n         \tif( (binding instanceof SCABinding) && (binding.getURI() == null) ) continue;\n-        \t// any other binding implies a target \n+        \t// any other binding implies a target\n         \t// TODO Processing for other binding types\n         \treturn true;\n     \t} // end for\n     \treturn false;\n     } // end bindingsIdentifyTargets\n-    \n+\n     /**\n      * Helper method which obtains a list of targets for a reference\n      * @param reference - Component reference\n@@ -783,7 +782,7 @@ private boolean bindingsIdentifyTargets( ComponentReference reference ) {\n     \t} // end if\n     \treturn theTargets;\n     } // end method getReferenceTargets\n-    \n+\n     /**\n      * Helper method that finds the Component given a target name\n      * @param components\n@@ -800,7 +799,7 @@ private Component getComponentFromTargetName( Map<String, Component> components,\n         }\n     \treturn theComponent;\n     } // end method getComponentFromTargetName\n-    \n+\n     /**\n      * Helper method to create an Endpoint Reference\n      * @param component\n@@ -810,14 +809,14 @@ private Component getComponentFromTargetName( Map<String, Component> components,\n      * @param unresolved\n      * @return the endpoint reference\n      */\n-    private EndpointReference2 createEndpointRef( Component component, ComponentReference reference, \n+    private EndpointReference2 createEndpointRef( Component component, ComponentReference reference,\n     \t\tBinding binding, Endpoint2 endpoint, boolean unresolved  ) {\n     \tEndpointReference2 endpointRef = createEndpointRef( component, reference, unresolved  );\n         endpointRef.setBinding(binding);\n         endpointRef.setTargetEndpoint(endpoint);\n         return endpointRef;\n-    } // end method\t\n-    \n+    } // end method\n+\n     /**\n      * Helper method to create an Endpoint Reference\n      * @param component\n@@ -832,8 +831,8 @@ private EndpointReference2 createEndpointRef( Component component, ComponentRefe\n \t    endpointRef.setUnresolved(unresolved);\n \t    return endpointRef;\n     } // end method createEndpointRef\n-    \n-    \n+\n+\n     /**\n      * Helper method to create an endpoint\n      * @param component\n@@ -848,7 +847,7 @@ private Endpoint2 createEndpoint( Component component, ComponentService service,\n \t    endpoint.setUnresolved(unresolved);\n \t    return endpoint;\n     } // end method createEndpoint\n-    \n+\n     /**\n      * Helper method to create an Endpoint\n      * @param unresolved\n@@ -859,31 +858,55 @@ private Endpoint2 createEndpoint( boolean unresolved) {\n \t    endpoint.setUnresolved(unresolved);\n \t    return endpoint;\n     } // end method createEndpoint\n-    \n+\n     /**\n      * Helper method to create an Endpoint\n-     * @param unresolved\n+     *\n+     * @param component The component that owns the reference\n+     * @param targetName It can be one of the following formats\n+     * <ul>\n+     * <li>componentName\n+     * <li>componentName/serviceName\n+     * <li>componentName/serviceName/bindingName\n+     * </ul>\n      * @return the endpoint\n      */\n-    private Endpoint2 createEndpoint(String targetName) {\n-        String componentName;\n-        String serviceName;\n-        int i = targetName.lastIndexOf('/');\n-        if (i != -1) {\n-            componentName = targetName.substring(0, i);\n-            serviceName = targetName.substring(i + 1);\n+    private Endpoint2 createEndpoint(Component component, String targetName) {\n+        String[] parts = targetName.split(\"/\");\n+        if (parts.length < 1 || parts.length > 3) {\n+            throw new IllegalArgumentException(\"Invalid target URI: \" + targetName);\n+        }\n \n+        // Find the parent uri\n+        String uri = component.getURI();\n+        int index = uri.lastIndexOf('/');\n+        if (index == -1) {\n+            uri = \"\";\n         } else {\n-            componentName = targetName;\n-            serviceName = null;\n+            uri = uri.substring(0, index);\n         }\n-        \n+\n+        if (parts.length >= 1) {\n+            // Append the target component name\n+            if (uri.length() == 0) {\n+                uri = parts[0];\n+            } else {\n+                uri = uri + \"/\" + parts[0];\n+            }\n+        }\n+        if (parts.length == 3) {\n+            // <componentURI>#service-binding(serviceName/bindingName)\n+            uri = uri + \"#service-binding(\" + parts[1] + \"/\" + parts[2] + \")\";\n+        } else if (parts.length == 2) {\n+            // <componentURI>#service(serviceName)\n+            uri = uri + \"#service(\" + parts[1] + \")\";\n+        }\n+\n         Endpoint2 endpoint = assemblyFactory.createEndpoint();\n         endpoint.setUnresolved(true);\n-        endpoint.setComponentName(componentName);\n-        endpoint.setServiceName(serviceName);\n+        endpoint.setURI(uri);\n         return endpoint;\n     } // end method createEndpoint\n \n-    \n+\n } // end class", "filename": "modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/ComponentReferenceEndpointReferenceBuilderImpl.java"}, {"additions": 32, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/5092ebd86016507437b26338710b9a3d3a3ff897/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/impl/Endpoint2Impl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/5092ebd86016507437b26338710b9a3d3a3ff897/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/impl/Endpoint2Impl.java", "sha": "bc5f5899d6153a804ad2b83116b170c533e9f1b0", "changes": 75, "status": "modified", "deletions": 43, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/impl/Endpoint2Impl.java?ref=5092ebd86016507437b26338710b9a3d3a3ff897", "patch": "@@ -44,11 +44,8 @@\n     protected ExtensionPointRegistry registry;\n     protected boolean unresolved;\n     protected String uri;\n-    protected String componentName;\n     protected Component component;\n-    protected String serviceName;\n     protected ComponentService service;\n-    protected String bindingName;\n     protected Binding binding;\n     protected InterfaceContract interfaceContract;\n     protected List<EndpointReference2> callbackEndpointReferences = new ArrayList<EndpointReference2>();\n@@ -72,58 +69,38 @@ public void setUnresolved(boolean unresolved) {\n         this.unresolved = unresolved;\n     }\n \n-    public String getComponentName() {\n-        return componentName;\n-    }\n-\n-    public void setComponentName(String componentName) {\n-        this.componentName = componentName;\n-    }\n-\n     public Component getComponent() {\n+        resolve();\n         return component;\n     }\n \n     public void setComponent(Component component) {\n         this.component = component;\n-        this.componentName = component.getURI();\n-    }\n-\n-    public String getServiceName() {\n-        return serviceName;\n-    }\n-\n-    public void setServiceName(String serviceName) {\n-        this.serviceName = serviceName;\n+        reset();\n     }\n \n     public ComponentService getService() {\n+        resolve();\n         return service;\n     }\n \n     public void setService(ComponentService service) {\n         this.service = service;\n-        this.serviceName = service.getName();\n-    }\n-\n-    public String getBindingName() {\n-        return bindingName;\n-    }\n-\n-    public void setBindingName(String bindingName) {\n-        this.bindingName = bindingName;\n+        reset();\n     }\n \n     public Binding getBinding() {\n+        resolve();\n         return binding;\n     }\n \n     public void setBinding(Binding binding) {\n         this.binding = binding;\n-        this.bindingName = binding.getName();\n+        reset();\n     }\n \n     public InterfaceContract getInterfaceContract() {\n+        resolve();\n         return interfaceContract;\n     }\n \n@@ -139,14 +116,17 @@ public void setInterfaceContract(InterfaceContract interfaceContract) {\n      * @return callbackEndpoint the reference callback endpoint\n      */\n     public List<EndpointReference2> getCallbackEndpointReferences(){\n+        resolve();\n         return callbackEndpointReferences;\n     }\n \n     public List<PolicySet> getPolicySets() {\n+        resolve();\n         return policySets;\n     }\n \n     public List<Intent> getRequiredIntents() {\n+        resolve();\n         return requiredIntents;\n     }\n \n@@ -164,33 +144,42 @@ public void setType(ExtensionType type) {\n     public String toString(){\n         String output =  \"Endpoint: \";\n \n-        if (componentName != null){\n-            output += \" Component = \" + componentName;\n-        }\n-\n-        if (serviceName != null){\n-            output += \" Service = \" + serviceName;\n-        }\n-\n-        if (bindingName != null){\n-            output += \" Binding = \" + bindingName + \"/\" + binding.getClass().getName() + \" \";\n+        if (getURI() != null){\n+            output += \" URI = \" + uri;\n         }\n \n         if (unresolved) {\n-            output += \" Unresolved = true\";\n-        } else {\n-            output += \" Unresolved = false\";\n+            output += \" [Unresolved]\";\n         }\n \n         return output;\n     }\n \n     public String getURI() {\n+        if (uri == null) {\n+            if (component != null && service != null && binding != null) {\n+                String bindingName = binding.getName();\n+                if (bindingName == null) {\n+                    bindingName = service.getName();\n+                }\n+                uri = component.getURI() + \"#service-binding(\" + service.getName() + \"/\" + bindingName + \")\";\n+            } else if (component != null && service != null) {\n+                uri = component.getURI() + \"#service(\" + service.getName() + \")\";\n+            } else if (component != null) {\n+                uri = component.getURI();\n+            }\n+        }\n         return uri;\n     }\n \n     public void setURI(String uri) {\n         this.uri = uri;\n     }\n \n+    protected void resolve() {\n+    }\n+\n+    protected void reset() {\n+        this.uri = null;\n+    }\n }", "filename": "modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/impl/Endpoint2Impl.java"}, {"additions": 22, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/5092ebd86016507437b26338710b9a3d3a3ff897/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/impl/EndpointReference2Impl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/5092ebd86016507437b26338710b9a3d3a3ff897/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/impl/EndpointReference2Impl.java", "sha": "c175689082b40fdec276c2e836cc9f7489c65613", "changes": 38, "status": "modified", "deletions": 16, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/impl/EndpointReference2Impl.java?ref=5092ebd86016507437b26338710b9a3d3a3ff897", "patch": "@@ -86,6 +86,7 @@ public Component getComponent() {\n \n     public void setComponent(Component component) {\n         this.component = component;\n+        this.uri = null;\n     }\n \n     public ComponentReference getReference() {\n@@ -94,6 +95,7 @@ public ComponentReference getReference() {\n \n     public void setReference(ComponentReference reference) {\n         this.reference = reference;\n+        this.uri = null;\n     }\n \n     public Binding getBinding() {\n@@ -102,6 +104,7 @@ public Binding getBinding() {\n \n     public void setBinding(Binding binding) {\n         this.binding = binding;\n+        this.uri = null;\n     }\n \n     public Endpoint2 getTargetEndpoint() {\n@@ -147,35 +150,38 @@ public void setCallbackEndpoint(Endpoint2 callbackEndpoint) {\n         this.callbackEndpoint = callbackEndpoint;\n     }\n \n-    public String toString(){\n-        String output =  \"Endpoint Reference: \";\n+    public String toString() {\n+        String output = \"Endpoint Reference: \";\n \n-        if (component != null){\n-            output += \" Component = \" + component.getName();\n-        }\n-\n-        if (reference != null){\n-            output += \" Reference = \" + reference.getName();\n-        }\n-\n-        if (binding != null){\n-            output += \" Binding = \" + binding.getName() + \"/\" + binding.getClass().getName() + \" \";\n+        if (getURI() != null) {\n+            output += \" URI = \" + uri;\n         }\n \n         if (unresolved) {\n-            output += \" Unresolved = true \";\n-        } else {\n-            output += \" Unresolved = false \";\n+            output += \" [Unresolved]\";\n         }\n \n         if (targetEndpoint != null) {\n-            output += \" Target \" + targetEndpoint.toString();\n+            output += \" Target = \" + targetEndpoint.toString();\n         }\n \n         return output;\n     }\n \n     public String getURI() {\n+        if (uri == null) {\n+            if (component != null && reference != null && binding != null) {\n+                String bindingName = binding.getName();\n+                if (bindingName == null) {\n+                    bindingName = reference.getName();\n+                }\n+                uri = component.getURI() + \"#reference-binding(\" + reference.getName() + \"/\" + bindingName + \")\";\n+            } else if (component != null && reference != null) {\n+                uri = component.getURI() + \"#reference(\" + reference.getName() + \")\";\n+            } else if (component != null) {\n+                uri = component.getURI();\n+            }\n+        }\n         return uri;\n     }\n ", "filename": "modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/impl/EndpointReference2Impl.java"}, {"additions": 4, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/5092ebd86016507437b26338710b9a3d3a3ff897/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/EndpointSerializer.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/5092ebd86016507437b26338710b9a3d3a3ff897/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/EndpointSerializer.java", "sha": "ff2c98cefb17429e6bf7ee01d3e2cc8c24cfe281", "changes": 10, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/EndpointSerializer.java?ref=5092ebd86016507437b26338710b9a3d3a3ff897", "patch": "@@ -20,8 +20,6 @@\n package org.apache.tuscany.sca.core.assembly;\r\n \r\n import java.io.IOException;\r\n-import java.io.ObjectInput;\r\n-import java.io.ObjectOutput;\r\n \r\n import org.apache.tuscany.sca.assembly.Endpoint2;\r\n import org.apache.tuscany.sca.assembly.EndpointReference2;\r\n@@ -30,11 +28,11 @@\n  * A utility to seralize/deserialize Endpoint/EndpointReference objects\r\n  */\r\n public interface EndpointSerializer {\r\n-    void readExternal(Endpoint2 endpoint, ObjectInput input) throws IOException;\r\n+    void read(Endpoint2 endpoint, String xml) throws IOException;\r\n \r\n-    void writeExternal(Endpoint2 endpoint, ObjectOutput output) throws IOException;\r\n+    String write(Endpoint2 endpoint) throws IOException;\r\n \r\n-    void readExternal(EndpointReference2 endpointReference, ObjectInput input) throws IOException;\r\n+    void read(EndpointReference2 endpointReference, String xml) throws IOException;\r\n \r\n-    void writeExternal(EndpointReference2 endpointReference, ObjectOutput output) throws IOException;\r\n+    String write(EndpointReference2 endpointReference) throws IOException;\r\n }\r", "filename": "modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/EndpointSerializer.java"}, {"additions": 9, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/5092ebd86016507437b26338710b9a3d3a3ff897/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/EndpointSerializerImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/5092ebd86016507437b26338710b9a3d3a3ff897/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/EndpointSerializerImpl.java", "sha": "1cef10955337747d0ea9914534cb48e4d9fc9e8d", "changes": 19, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/EndpointSerializerImpl.java?ref=5092ebd86016507437b26338710b9a3d3a3ff897", "patch": "@@ -20,8 +20,6 @@\n package org.apache.tuscany.sca.core.assembly.impl;\r\n \r\n import java.io.IOException;\r\n-import java.io.ObjectInput;\r\n-import java.io.ObjectOutput;\r\n import java.io.StringReader;\r\n import java.io.StringWriter;\r\n \r\n@@ -54,54 +52,55 @@ public EndpointSerializerImpl(ExtensionPointRegistry registry) {\n         refProcessor = processors.getProcessor(EndpointReference2.class);\r\n     }\r\n \r\n-    public void readExternal(Endpoint2 endpoint, ObjectInput input) throws IOException {\r\n+    public void read(Endpoint2 endpoint, String xml) throws IOException {\r\n         try {\r\n-            String xml = input.readUTF();\r\n             XMLStreamReader reader = inputFactory.createXMLStreamReader(new StringReader(xml));\r\n             Endpoint2 result = processor.read(reader);\r\n             endpoint.setComponent(result.getComponent());\r\n             endpoint.setService(result.getService());\r\n             endpoint.setBinding(result.getBinding());\r\n+            endpoint.setInterfaceContract(result.getService().getInterfaceContract());\r\n         } catch (Exception e) {\r\n             throw new IOException(e);\r\n         }\r\n \r\n     }\r\n \r\n-    public void writeExternal(Endpoint2 endpoint, ObjectOutput output) throws IOException {\r\n+    public String write(Endpoint2 endpoint) throws IOException {\r\n         StringWriter sw = new StringWriter();\r\n         try {\r\n             XMLStreamWriter writer = outputFactory.createXMLStreamWriter(sw);\r\n             processor.write(endpoint, writer);\r\n             writer.flush();\r\n-            output.writeUTF(sw.toString());\r\n             writer.close();\r\n+            return sw.toString();\r\n         } catch (Exception e) {\r\n             throw new IOException(e);\r\n         }\r\n     }\r\n \r\n-    public void readExternal(EndpointReference2 endpointReference, ObjectInput input) throws IOException {\r\n+    public void read(EndpointReference2 endpointReference, String xml) throws IOException {\r\n         try {\r\n-            String xml = input.readUTF();\r\n             XMLStreamReader reader = inputFactory.createXMLStreamReader(new StringReader(xml));\r\n             EndpointReference2 result = refProcessor.read(reader);\r\n             reader.close();\r\n             endpointReference.setComponent(result.getComponent());\r\n             endpointReference.setReference(result.getReference());\r\n             endpointReference.setBinding(result.getBinding());\r\n+            endpointReference.setInterfaceContract(result.getReference().getInterfaceContract());\r\n         } catch (Exception e) {\r\n             throw new IOException(e);\r\n         }\r\n     }\r\n \r\n-    public void writeExternal(EndpointReference2 endpointReference, ObjectOutput output) throws IOException {\r\n+    public String write(EndpointReference2 endpointReference) throws IOException {\r\n         StringWriter sw = new StringWriter();\r\n         try {\r\n             XMLStreamWriter writer = outputFactory.createXMLStreamWriter(sw);\r\n             refProcessor.write(endpointReference, writer);\r\n             writer.flush();\r\n-            output.writeUTF(sw.toString());\r\n+            writer.close();\r\n+            return sw.toString();\r\n         } catch (Exception e) {\r\n             throw new IOException(e);\r\n         }\r", "filename": "modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/EndpointSerializerImpl.java"}, {"additions": 28, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/5092ebd86016507437b26338710b9a3d3a3ff897/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeEndpointImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/5092ebd86016507437b26338710b9a3d3a3ff897/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeEndpointImpl.java", "sha": "da21e9f8baa1e0f757b6e715a1d11a38dbeb4e18", "changes": 32, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeEndpointImpl.java?ref=5092ebd86016507437b26338710b9a3d3a3ff897", "patch": "@@ -32,7 +32,12 @@\n  * Runtime model for Endpoint that supports java serialization\r\n  */\r\n public class RuntimeEndpointImpl extends Endpoint2Impl implements Externalizable {\r\n+    /**\r\n+     * FIXME: What's the best way to get the extension point registry upon deserialization?\r\n+     * We can expose a method to receive the extension point registry\r\n+     */\r\n     private static EndpointSerializer serializer;\r\n+    private String xml;\r\n \r\n     /**\r\n      * No-arg constructor for Java serilization\r\n@@ -49,13 +54,32 @@ public RuntimeEndpointImpl(ExtensionPointRegistry registry) {\n     }\r\n \r\n     public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\r\n-        // When this method is invoked, the instance is created using the no-arg constructor\r\n-        // We need to keep the serializer as a static\r\n-        serializer.readExternal(this, in);\r\n+        this.uri = in.readUTF();\r\n+        this.xml = in.readUTF();\r\n+        // Defer the loading to resolve();\r\n     }\r\n \r\n     public void writeExternal(ObjectOutput out) throws IOException {\r\n-        serializer.writeExternal(this, out);\r\n+        out.writeUTF(getURI());\r\n+        out.writeUTF(serializer.write(this));\r\n+    }\r\n+\r\n+    @Override\r\n+    protected void reset() {\r\n+        super.reset();\r\n+        this.xml = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    protected void resolve() {\r\n+        if (component == null && xml != null) {\r\n+            try {\r\n+                serializer.read(this, xml);\r\n+            } catch (IOException e) {\r\n+                throw new IllegalStateException(e);\r\n+            }\r\n+        }\r\n+        super.resolve();\r\n     }\r\n \r\n }\r", "filename": "modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeEndpointImpl.java"}, {"additions": 48, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/5092ebd86016507437b26338710b9a3d3a3ff897/modules/endpoint-tribes/src/main/java/org/apache/tuscany/sca/endpoint/tribes/ReplicatedEndpointRegistry.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/5092ebd86016507437b26338710b9a3d3a3ff897/modules/endpoint-tribes/src/main/java/org/apache/tuscany/sca/endpoint/tribes/ReplicatedEndpointRegistry.java", "sha": "f7dac1ff33b2fffc4594f67b0b65535d193b32fd", "changes": 58, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/endpoint-tribes/src/main/java/org/apache/tuscany/sca/endpoint/tribes/ReplicatedEndpointRegistry.java?ref=5092ebd86016507437b26338710b9a3d3a3ff897", "patch": "@@ -128,6 +128,50 @@ public void addListener(EndpointListener listener) {\n         listeners.add(listener);\r\n     }\r\n \r\n+    /**\r\n+     * Parse the component/service/binding URI into an array of parts (componentURI, serviceName, bindingName)\r\n+     * @param uri\r\n+     * @return\r\n+     */\r\n+    private String[] parse(String uri) {\r\n+        String[] names = new String[3];\r\n+        int index = uri.lastIndexOf('#');\r\n+        if (index == -1) {\r\n+            names[0] = uri;\r\n+        } else {\r\n+            names[0] = uri.substring(0, index);\r\n+            String str = uri.substring(index + 1);\r\n+            if (str.startsWith(\"service-binding(\") && str.endsWith(\")\")) {\r\n+                str = str.substring(\"service-binding(\".length(), str.length() - 1);\r\n+                String[] parts = str.split(\"/\");\r\n+                if (parts.length != 2) {\r\n+                    throw new IllegalArgumentException(\"Invalid service-binding URI: \" + uri);\r\n+                }\r\n+                names[1] = parts[0];\r\n+                names[2] = parts[1];\r\n+            } else if (str.startsWith(\"service(\") && str.endsWith(\")\")) {\r\n+                str = str.substring(\"service(\".length(), str.length() - 1);\r\n+                names[1] = str;\r\n+            } else {\r\n+                throw new IllegalArgumentException(\"Invalid component/service/binding URI: \" + uri);\r\n+            }\r\n+        }\r\n+        return names;\r\n+    }\r\n+\r\n+    private boolean matches(String target, String uri) {\r\n+        String[] parts1 = parse(target);\r\n+        String[] parts2 = parse(uri);\r\n+        for (int i = 0; i < parts1.length; i++) {\r\n+            if (parts1[i] == null || parts1[i].equals(parts2[i])) {\r\n+                continue;\r\n+            } else {\r\n+                return false;\r\n+            }\r\n+        }\r\n+        return true;\r\n+    }\r\n+\r\n     public List<Endpoint2> findEndpoint(EndpointReference2 endpointReference) {\r\n         List<Endpoint2> foundEndpoints = new ArrayList<Endpoint2>();\r\n \r\n@@ -138,17 +182,11 @@ public void addListener(EndpointListener listener) {\n             for (Object v : map.values()) {\r\n                 Endpoint2 endpoint = (Endpoint2)v;\r\n                 // TODO: implement more complete matching\r\n-                if (endpoint.getComponentName().equals(targetEndpoint.getComponentName())) {\r\n-                    if ((targetEndpoint.getServiceName() == null) || (targetEndpoint.getServiceName().equals(endpoint\r\n-                        .getServiceName()))) {\r\n-                        foundEndpoints.add(endpoint);\r\n-                        logger.info(\"EndpointRegistry: Found endpoint with matching service  - \" + endpoint);\r\n-                    } else if (targetEndpoint.getServiceName() == null) {\r\n-                        foundEndpoints.add(endpoint);\r\n-                        logger.info(\"EndpointRegistry: Found endpoint with matching component  - \" + endpoint);\r\n-                    }\r\n-                    // else the service name doesn't match\r\n+                if (matches(targetEndpoint.getURI(), endpoint.getURI())) {\r\n+                    foundEndpoints.add(endpoint);\r\n+                    logger.info(\"EndpointRegistry: Found endpoint with matching service  - \" + endpoint);\r\n                 }\r\n+                // else the service name doesn't match\r\n             }\r\n         }\r\n         return foundEndpoints;\r", "filename": "modules/endpoint-tribes/src/main/java/org/apache/tuscany/sca/endpoint/tribes/ReplicatedEndpointRegistry.java"}, {"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/5092ebd86016507437b26338710b9a3d3a3ff897/modules/endpoint-tribes/src/main/resources/META-INF/services/org.apache.tuscany.sca.runtime.EndpointRegistry", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/5092ebd86016507437b26338710b9a3d3a3ff897/modules/endpoint-tribes/src/main/resources/META-INF/services/org.apache.tuscany.sca.runtime.EndpointRegistry", "sha": "f23acf50102fc7c5bf5d4a4d0e289bd45719ffa1", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/endpoint-tribes/src/main/resources/META-INF/services/org.apache.tuscany.sca.runtime.EndpointRegistry?ref=5092ebd86016507437b26338710b9a3d3a3ff897", "patch": "@@ -14,4 +14,4 @@\n # KIND, either express or implied.  See the License for the\r\n # specific language governing permissions and limitations\r\n # under the License.\r\n-org.apache.tuscany.sca.endpoint.tribes.ReplicatedEndpointRegistry;ranking=100,address=228.0.0.100,port=50000,timeout=50\n\\ No newline at end of file\n+org.apache.tuscany.sca.endpoint.tribes.ReplicatedEndpointRegistry;ranking=50,address=228.0.0.100,port=50000,timeout=50\n\\ No newline at end of file", "filename": "modules/endpoint-tribes/src/main/resources/META-INF/services/org.apache.tuscany.sca.runtime.EndpointRegistry"}, {"additions": 49, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/5092ebd86016507437b26338710b9a3d3a3ff897/modules/endpoint/src/main/java/org/apache/tuscany/sca/endpoint/impl/EndpointRegistryImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/5092ebd86016507437b26338710b9a3d3a3ff897/modules/endpoint/src/main/java/org/apache/tuscany/sca/endpoint/impl/EndpointRegistryImpl.java", "sha": "c57fc579c8884238f0d67581c53685101203e015", "changes": 60, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/endpoint/src/main/java/org/apache/tuscany/sca/endpoint/impl/EndpointRegistryImpl.java?ref=5092ebd86016507437b26338710b9a3d3a3ff897", "patch": "@@ -54,6 +54,50 @@ public void addEndpointReference(EndpointReference2 endpointReference) {\n         logger.info(\"EndpointRegistry: Add endpoint reference - \" + endpointReference.toString());\n     }\n \n+    /**\n+     * Parse the component/service/binding URI into an array of parts (componentURI, serviceName, bindingName)\n+     * @param uri\n+     * @return\n+     */\n+    private String[] parse(String uri) {\n+        String[] names = new String[3];\n+        int index = uri.lastIndexOf('#');\n+        if (index == -1) {\n+            names[0] = uri;\n+        } else {\n+            names[0] = uri.substring(0, index);\n+            String str = uri.substring(index + 1);\n+            if (str.startsWith(\"service-binding(\") && str.endsWith(\")\")) {\n+                str = str.substring(\"service-binding(\".length(), str.length() - 1);\n+                String[] parts = str.split(\"/\");\n+                if (parts.length != 2) {\n+                    throw new IllegalArgumentException(\"Invalid service-binding URI: \" + uri);\n+                }\n+                names[1] = parts[0];\n+                names[2] = parts[1];\n+            } else if (str.startsWith(\"service(\") && str.endsWith(\")\")) {\n+                str = str.substring(\"service(\".length(), str.length() - 1);\n+                names[1] = str;\n+            } else {\n+                throw new IllegalArgumentException(\"Invalid component/service/binding URI: \" + uri);\n+            }\n+        }\n+        return names;\n+    }\n+\n+    private boolean matches(String target, String uri) {\n+        String[] parts1 = parse(target);\n+        String[] parts2 = parse(uri);\n+        for (int i = 0; i < parts1.length; i++) {\n+            if (parts1[i] == null || parts1[i].equals(parts2[i])) {\n+                continue;\n+            } else {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n     public List<Endpoint2> findEndpoint(EndpointReference2 endpointReference) {\n         List<Endpoint2> foundEndpoints = new ArrayList<Endpoint2>();\n \n@@ -63,20 +107,14 @@ public void addEndpointReference(EndpointReference2 endpointReference) {\n             Endpoint2 targetEndpoint = endpointReference.getTargetEndpoint();\n             for (Endpoint2 endpoint : endpoints) {\n                 // TODO: implement more complete matching\n-                if (endpoint.getComponentName().equals(targetEndpoint.getComponentName())) {\n-                    if ((targetEndpoint.getServiceName() != null) && (endpoint.getServiceName().equals(targetEndpoint\n-                        .getServiceName()))) {\n-                        foundEndpoints.add(endpoint);\n-                        logger.info(\"EndpointRegistry: Found endpoint with matching service  - \" + endpoint.toString());\n-                    } else if (targetEndpoint.getServiceName() == null) {\n-                        foundEndpoints.add(endpoint);\n-                        logger.info(\"EndpointRegistry: Found endpoint with matching component  - \" + endpoint\n-                            .toString());\n-                    }\n-                    // else the service name doesn't match\n+                if (matches(targetEndpoint.getURI(), endpoint.getURI())) {\n+                    foundEndpoints.add(endpoint);\n+                    logger.info(\"EndpointRegistry: Found endpoint with matching service  - \" + endpoint);\n                 }\n+                // else the service name doesn't match\n             }\n         }\n+\n         return foundEndpoints;\n     }\n ", "filename": "modules/endpoint/src/main/java/org/apache/tuscany/sca/endpoint/impl/EndpointRegistryImpl.java"}, {"additions": 4, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/5092ebd86016507437b26338710b9a3d3a3ff897/modules/endpoint/src/main/resources/META-INF/services/org.apache.tuscany.sca.runtime.EndpointRegistry", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/5092ebd86016507437b26338710b9a3d3a3ff897/modules/endpoint/src/main/resources/META-INF/services/org.apache.tuscany.sca.runtime.EndpointRegistry", "sha": "75a909199eebcc231f28cf85da4cf5d0f4f5d18b", "changes": 8, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/endpoint/src/main/resources/META-INF/services/org.apache.tuscany.sca.runtime.EndpointRegistry?ref=5092ebd86016507437b26338710b9a3d3a3ff897", "patch": "@@ -5,14 +5,14 @@\n # to you under the Apache License, Version 2.0 (the\r\n # \"License\"); you may not use this file except in compliance\r\n # with the License.  You may obtain a copy of the License at\r\n-# \r\n+#\r\n #   http://www.apache.org/licenses/LICENSE-2.0\r\n-# \r\n+#\r\n # Unless required by applicable law or agreed to in writing,\r\n # software distributed under the License is distributed on an\r\n # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n # KIND, either express or implied.  See the License for the\r\n # specific language governing permissions and limitations\r\n-# under the License. \r\n+# under the License.\r\n \r\n-org.apache.tuscany.sca.endpoint.impl.EndpointRegistryImpl\n\\ No newline at end of file\n+org.apache.tuscany.sca.endpoint.impl.EndpointRegistryImpl;ranking=100\n\\ No newline at end of file", "filename": "modules/endpoint/src/main/resources/META-INF/services/org.apache.tuscany.sca.runtime.EndpointRegistry"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/d7d4872bc7a19a68f0a1a1918dfddf5acc71cc83", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/f27f4341b4a18188c10d6c678511cbc3a007c24e", "message": "Fix NPEs in RuntimeWireImpl2 when implementation.web in one node is wired to a service in another node\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@782798 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_94", "file": [{"additions": 5, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/d7d4872bc7a19a68f0a1a1918dfddf5acc71cc83/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeWireImpl2.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/d7d4872bc7a19a68f0a1a1918dfddf5acc71cc83/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeWireImpl2.java", "sha": "ab03645182e8672a13d3135f6a6ab16a824aa373", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeWireImpl2.java?ref=d7d4872bc7a19a68f0a1a1918dfddf5acc71cc83", "patch": "@@ -315,6 +315,9 @@ private ReferenceBindingProvider addReferenceBindingProvider(\n     \n     private InterfaceContract getInterfaceContract(ComponentReference reference, Binding binding) {\n         InterfaceContract interfaceContract = reference.getInterfaceContract();\n+        if (interfaceContract == null) {\n+            interfaceContract = endpoint.getInterfaceContract();\n+        }\n         ReferenceBindingProvider provider = ((RuntimeComponentReference)reference).getBindingProvider(binding);\n         if (provider != null) {\n             InterfaceContract bindingContract = provider.getBindingInterfaceContract();\n@@ -419,6 +422,8 @@ public EndpointReference getSource() {\n     public EndpointReference getTarget() {\n         // TODO - EPR convert this into method that returns Endpoint2\n         \n+        Endpoint2 endpoint = this.endpoint != null ? this.endpoint : endpointReference.getTargetEndpoint();\n+\n         // convert the target info into old endpoint reference format\n         EndpointReference epr = new EndpointReferenceImpl((RuntimeComponent)endpoint.getComponent(),\n                                                            endpoint.getService(),", "filename": "modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/impl/RuntimeWireImpl2.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/538beb125ed779a7e484e10e9521db9517d6d454", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/37853e9e1ac1caf524ba5cecc6aed6bc52afa829", "message": "Add some extension point definitions to allow the JMS service binding provider to find them instead of failing with an NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@709231 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_95", "file": [{"additions": 19, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/538beb125ed779a7e484e10e9521db9517d6d454/modules/binding-jms-runtime/src/main/resources/META-INF/services/org.apache.tuscany.sca.provider.OperationSelectorProviderFactory", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/538beb125ed779a7e484e10e9521db9517d6d454/modules/binding-jms-runtime/src/main/resources/META-INF/services/org.apache.tuscany.sca.provider.OperationSelectorProviderFactory", "sha": "50dfcdf9a02f7c741c3aed3021019772976f93de", "changes": 19, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-jms-runtime/src/main/resources/META-INF/services/org.apache.tuscany.sca.provider.OperationSelectorProviderFactory?ref=538beb125ed779a7e484e10e9521db9517d6d454", "patch": "@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\r\n+# or more contributor license agreements.  See the NOTICE file\r\n+# distributed with this work for additional information\r\n+# regarding copyright ownership.  The ASF licenses this file\r\n+# to you under the Apache License, Version 2.0 (the\r\n+# \"License\"); you may not use this file except in compliance\r\n+# with the License.  You may obtain a copy of the License at\r\n+# \r\n+#   http://www.apache.org/licenses/LICENSE-2.0\r\n+# \r\n+# Unless required by applicable law or agreed to in writing,\r\n+# software distributed under the License is distributed on an\r\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+# KIND, either express or implied.  See the License for the\r\n+# specific language governing permissions and limitations\r\n+# under the License. \r\n+\r\n+# Implementation class for the binding extension\r\n+org.apache.tuscany.sca.binding.jms.operationselector.jmsdefault.OperationSelectorJMSDefaultProviderFactory;model=org.apache.tuscany.sca.binding.jms.operationselector.jmsdefault.OperationSelectorJMSDefault\r", "filename": "modules/binding-jms-runtime/src/main/resources/META-INF/services/org.apache.tuscany.sca.provider.OperationSelectorProviderFactory"}, {"additions": 20, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/538beb125ed779a7e484e10e9521db9517d6d454/modules/binding-jms-runtime/src/main/resources/META-INF/services/org.apache.tuscany.sca.provider.WireFormatProviderFactory", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/538beb125ed779a7e484e10e9521db9517d6d454/modules/binding-jms-runtime/src/main/resources/META-INF/services/org.apache.tuscany.sca.provider.WireFormatProviderFactory", "sha": "3658a30bb678b5ba2a9ba73c298fb063a4f0f0d7", "changes": 20, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-jms-runtime/src/main/resources/META-INF/services/org.apache.tuscany.sca.provider.WireFormatProviderFactory?ref=538beb125ed779a7e484e10e9521db9517d6d454", "patch": "@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\r\n+# or more contributor license agreements.  See the NOTICE file\r\n+# distributed with this work for additional information\r\n+# regarding copyright ownership.  The ASF licenses this file\r\n+# to you under the Apache License, Version 2.0 (the\r\n+# \"License\"); you may not use this file except in compliance\r\n+# with the License.  You may obtain a copy of the License at\r\n+# \r\n+#   http://www.apache.org/licenses/LICENSE-2.0\r\n+# \r\n+# Unless required by applicable law or agreed to in writing,\r\n+# software distributed under the License is distributed on an\r\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+# KIND, either express or implied.  See the License for the\r\n+# specific language governing permissions and limitations\r\n+# under the License. \r\n+\r\n+# Implementation class for the binding extension\r\n+org.apache.tuscany.sca.binding.jms.wireformat.jmsdefault.WireFormatJMSDefaultProviderFactory;model=org.apache.tuscany.sca.binding.jms.wireformat.jmsdefault.WireFormatJMSDefault\r\n+org.apache.tuscany.sca.binding.jms.wireformat.bytes.WireFormatJMSDBytesProviderFactory;model=org.apache.tuscany.sca.binding.jms.wireformat.bytes.WireFormatJMSBytes\r", "filename": "modules/binding-jms-runtime/src/main/resources/META-INF/services/org.apache.tuscany.sca.provider.WireFormatProviderFactory"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/092c8dc8c63da1ba691647a9e7611abc157bc63e", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/4bfee0249c0d066acf5375744dfaef4c85804d4c", "message": "Guard against an NPE when the reference interface contract hasn't been resolved yet\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@691218 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_96", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/092c8dc8c63da1ba691647a9e7611abc157bc63e/modules/binding-sca/src/main/java/org/apache/tuscany/sca/binding/sca/impl/RuntimeSCAReferenceBindingProvider.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/092c8dc8c63da1ba691647a9e7611abc157bc63e/modules/binding-sca/src/main/java/org/apache/tuscany/sca/binding/sca/impl/RuntimeSCAReferenceBindingProvider.java", "sha": "7ec3f2d60ac56d842e69a7914ffa5ccc5448f726", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-sca/src/main/java/org/apache/tuscany/sca/binding/sca/impl/RuntimeSCAReferenceBindingProvider.java?ref=092c8dc8c63da1ba691647a9e7611abc157bc63e", "patch": "@@ -125,7 +125,7 @@ private ReferenceBindingProvider getDistributedProvider() {\n         if (isTargetRemote()) {\n             // initialize the remote provider if it hasn't been done already\n             if (distributedProvider == null) {\n-                if (!reference.getInterfaceContract().getInterface().isRemotable()) {\n+                if (reference.getInterfaceContract() != null && !reference.getInterfaceContract().getInterface().isRemotable()) {\n                     throw new IllegalStateException(\"Reference interface not remotable for component: \" + component\n                         .getName()\n                         + \" and reference: \"", "filename": "modules/binding-sca/src/main/java/org/apache/tuscany/sca/binding/sca/impl/RuntimeSCAReferenceBindingProvider.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/4bfee0249c0d066acf5375744dfaef4c85804d4c", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/9a20d460e7ab58e2b17bf2d72e94933bf2614c73", "message": "Try to avoid an NPE in JMS binding when the refernce interface contarct is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@691217 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_97", "file": [{"additions": 5, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/4bfee0249c0d066acf5375744dfaef4c85804d4c/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/provider/JMSBindingReferenceBindingProvider.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/4bfee0249c0d066acf5375744dfaef4c85804d4c/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/provider/JMSBindingReferenceBindingProvider.java", "sha": "020829def69315763f41f312484932e2440b54bb", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/provider/JMSBindingReferenceBindingProvider.java?ref=4bfee0249c0d066acf5375744dfaef4c85804d4c", "patch": "@@ -90,7 +90,11 @@ public boolean supportsOneWayInvocation() {\n     }\n \n     public InterfaceContract getBindingInterfaceContract() {\n-        return reference.getInterfaceContract();\n+        if (reference.getInterfaceContract() == null) {\n+            return reference.getReference().getInterfaceContract();\n+        } else {\n+            return reference.getInterfaceContract();\n+        }\n     }\n \n     public void start() {", "filename": "modules/binding-jms-runtime/src/main/java/org/apache/tuscany/sca/binding/jms/provider/JMSBindingReferenceBindingProvider.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/8192c1ae4ff0bd5e6719719d57cabeddf3c2c3be", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/80be4589a2a43ea828cd3c76001d9041cfd064a7", "message": "TUSCANY-2242: Apply patch from Ramkumar Ramalingam for Incorrent port name in wsdlElement leads to NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@690913 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_98", "file": [{"additions": 92, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/8192c1ae4ff0bd5e6719719d57cabeddf3c2c3be/itest/validation/src/main/resources/binding/wsxml/WsdlPortTypeDoesNotMatch/helloworld.wsdl", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/8192c1ae4ff0bd5e6719719d57cabeddf3c2c3be/itest/validation/src/main/resources/binding/wsxml/WsdlPortTypeDoesNotMatch/helloworld.wsdl", "sha": "218dbc47c469734feee3102a7e057d2e68104422", "changes": 92, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/itest/validation/src/main/resources/binding/wsxml/WsdlPortTypeDoesNotMatch/helloworld.wsdl?ref=8192c1ae4ff0bd5e6719719d57cabeddf3c2c3be", "patch": "@@ -0,0 +1,92 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<!--\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ * \r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+-->\r\n+<wsdl:definitions targetNamespace=\"http://helloworld\" xmlns:tns=\"http://helloworld\" xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:wsdlsoap=\"http://schemas.xmlsoap.org/wsdl/soap/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n+\tname=\"helloworld\">\r\n+\r\n+    <wsdl:types>\r\n+        <schema elementFormDefault=\"qualified\" targetNamespace=\"http://helloworld\" xmlns=\"http://www.w3.org/2001/XMLSchema\">\r\n+\r\n+            <element name=\"getGreetings\">\r\n+                <complexType>\r\n+                    <sequence>\r\n+                        <element name=\"name\" type=\"xsd:string\"/>\r\n+                    </sequence>\r\n+                </complexType>\r\n+            </element>\r\n+\r\n+            <element name=\"getGreetingsResponse\">\r\n+                <complexType>\r\n+                    <sequence>\r\n+                        <element name=\"getGreetingsReturn\" type=\"xsd:string\"/>\r\n+                    </sequence>\r\n+                </complexType>\r\n+            </element>\r\n+            \r\n+        </schema>\r\n+    </wsdl:types>\r\n+\r\n+    <wsdl:message name=\"getGreetingsRequest\">\r\n+        <wsdl:part element=\"tns:getGreetings\" name=\"parameters\"/>\r\n+    </wsdl:message>\r\n+\r\n+    <wsdl:message name=\"getGreetingsResponse\">\r\n+        <wsdl:part element=\"tns:getGreetingsResponse\" name=\"parameters\"/>\r\n+    </wsdl:message>\r\n+\r\n+    <wsdl:portType name=\"HelloWorld\">\r\n+        <wsdl:operation name=\"getGreetings\">\r\n+            <wsdl:input message=\"tns:getGreetingsRequest\" name=\"getGreetingsRequest\"/>\r\n+            <wsdl:output message=\"tns:getGreetingsResponse\" name=\"getGreetingsResponse\"/>\r\n+        </wsdl:operation>\r\n+    </wsdl:portType>\r\n+\r\n+    <wsdl:binding name=\"HelloWorldSoapBinding\" type=\"tns:HelloWorld\">\r\n+        <wsdlsoap:binding style=\"document\" transport=\"http://schemas.xmlsoap.org/soap/http\"/>\r\n+        <wsdl:operation name=\"getGreetings\">\r\n+            <wsdlsoap:operation soapAction=\"\"/>\r\n+            <wsdl:input name=\"getGreetingsRequest\">\r\n+                <wsdlsoap:body use=\"literal\"/>\r\n+            </wsdl:input>\r\n+            <wsdl:output name=\"getGreetingsResponse\">\r\n+                <wsdlsoap:body use=\"literal\"/>\r\n+            </wsdl:output>\r\n+        </wsdl:operation>\r\n+    </wsdl:binding>\r\n+\r\n+    <wsdl:binding name=\"HelloWorldSoapJmsBinding\" type=\"tns:HelloWorld\">\r\n+        <wsdlsoap:binding style=\"document\" transport=\"http://schemas.xmlsoap.org/soap/jms\"/>\r\n+        <wsdl:operation name=\"getGreetings\">\r\n+            <wsdlsoap:operation soapAction=\"\"/>\r\n+            <wsdl:input name=\"getGreetingsRequest\">\r\n+                <wsdlsoap:body use=\"literal\"/>\r\n+            </wsdl:input>\r\n+            <wsdl:output name=\"getGreetingsResponse\">\r\n+                <wsdlsoap:body use=\"literal\"/>\r\n+            </wsdl:output>\r\n+        </wsdl:operation>\r\n+    </wsdl:binding>\r\n+\r\n+    <wsdl:service name=\"HelloWorldService\">\r\n+        <wsdl:port binding=\"tns:HelloWorldSoapBinding\" name=\"HelloWorldSoapPort\">\r\n+            <wsdlsoap:address location=\"http://localhost:8085/HelloWorldService\"/>\r\n+        </wsdl:port>\r\n+    </wsdl:service>\r\n+\r\n+</wsdl:definitions>\r", "filename": "itest/validation/src/main/resources/binding/wsxml/WsdlPortTypeDoesNotMatch/helloworld.wsdl"}, {"additions": 45, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/8192c1ae4ff0bd5e6719719d57cabeddf3c2c3be/itest/validation/src/main/resources/binding/wsxml/WsdlPortTypeDoesNotMatch/helloworldwsclient.composite", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/8192c1ae4ff0bd5e6719719d57cabeddf3c2c3be/itest/validation/src/main/resources/binding/wsxml/WsdlPortTypeDoesNotMatch/helloworldwsclient.composite", "sha": "5975c27663200837c38043b0b8deb7e272721adc", "changes": 45, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/itest/validation/src/main/resources/binding/wsxml/WsdlPortTypeDoesNotMatch/helloworldwsclient.composite?ref=8192c1ae4ff0bd5e6719719d57cabeddf3c2c3be", "patch": "@@ -0,0 +1,45 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<!--\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ * \r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+-->\r\n+<composite xmlns=\"http://www.osoa.org/xmlns/sca/1.0\"\r\n+\ttargetNamespace=\"http://helloworld\"\r\n+\txmlns:hw=\"http://helloworld\"\r\n+\tname=\"helloworldwsclient\">\r\n+    \r\n+    <!-- A component with an embedded reference definition connecting to an external webservice \r\n+         The wsdl interface for the reference is derived from the information specified by the 'wsdlElement'\r\n+     -->\r\n+    <component name=\"HelloTuscanyServiceComponent\">\r\n+      <implementation.java class=\"binding.jms.HelloWorldServiceImpl\"/>\r\n+      <reference name=\"helloWorldService\">\r\n+        <binding.ws wsdlElement=\"http://helloworld#wsdl.port(HelloWorldService/HelloWorldSoapPort2)\"/>\r\n+      </reference>\r\n+    </component>\r\n+    \r\n+    <!-- A component with a reference promoted as a composite reference -->\r\n+    <component name=\"HelloWorldServiceComponent\">\r\n+      <implementation.java class=\"binding.jms.HelloWorldServiceImpl\"/>\r\n+    </component>\r\n+    \r\n+    <reference name=\"HelloWorldService\" promote=\"HelloWorldServiceComponent/helloWorldService\">\r\n+        <interface.java interface=\"binding.jms.HelloWorldService\" />\r\n+        <binding.ws wsdlElement=\"http://helloworld#wsdl.port(HelloWorldService/HelloWorldSoapPort2)\"/>\r\n+    </reference>\r\n+\r\n+</composite>\r", "filename": "itest/validation/src/main/resources/binding/wsxml/WsdlPortTypeDoesNotMatch/helloworldwsclient.composite"}, {"additions": 60, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/8192c1ae4ff0bd5e6719719d57cabeddf3c2c3be/itest/validation/src/test/java/binding/wsxml/WsdlPortTypeDoesNotMatchTestCase.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/8192c1ae4ff0bd5e6719719d57cabeddf3c2c3be/itest/validation/src/test/java/binding/wsxml/WsdlPortTypeDoesNotMatchTestCase.java", "sha": "1ef5f7b00af61afea4329e89079b25f6216fc72c", "changes": 60, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/itest/validation/src/test/java/binding/wsxml/WsdlPortTypeDoesNotMatchTestCase.java?ref=8192c1ae4ff0bd5e6719719d57cabeddf3c2c3be", "patch": "@@ -0,0 +1,60 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ * \r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package binding.wsxml;\r\n+\r\n+import junit.framework.TestCase;\r\n+\r\n+import org.apache.tuscany.sca.monitor.Monitor;\r\n+import org.apache.tuscany.sca.monitor.Problem;\r\n+import org.apache.tuscany.sca.monitor.logging.impl.DefaultLoggingMonitorImpl;\r\n+\r\n+import domain.CustomCompositeBuilder;\r\n+\r\n+/**\r\n+ * This shows how to test the Calculator service component.\r\n+ */\r\n+public class WsdlPortTypeDoesNotMatchTestCase extends TestCase {\r\n+\t\r\n+    private CustomCompositeBuilder customDomain;\r\n+    \r\n+    @Override\r\n+    protected void setUp() throws Exception \r\n+    {\r\n+        customDomain = CustomCompositeBuilder.getInstance();\r\n+        try {\r\n+             customDomain.loadContribution(\"src/main/resources/binding/wsxml/WsdlPortTypeDoesNotMatch/helloworldwsclient.composite\", \r\n+                       \"TestContribution\", \"src/main/resources/binding/wsxml/WsdlPortTypeDoesNotMatch/\");\r\n+        } catch (Exception ex){\r\n+            //throw ex;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    protected void tearDown() throws Exception {\r\n+        //node.stop();\r\n+    }\r\n+\r\n+    public void testCalculator() {\r\n+        Monitor monitor = customDomain.getMonitorInstance();\r\n+        Problem problem = ((DefaultLoggingMonitorImpl)monitor).getLastLoggedProblem();\r\n+        \r\n+        assertNotNull(problem);\r\n+        assertEquals(\"WsdlPortTypeDoesNotMatch\", problem.getMessageId()); \r\n+    }\r\n+}\r", "filename": "itest/validation/src/test/java/binding/wsxml/WsdlPortTypeDoesNotMatchTestCase.java"}, {"additions": 6, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/8192c1ae4ff0bd5e6719719d57cabeddf3c2c3be/modules/binding-ws-xml/src/main/java/org/apache/tuscany/sca/binding/ws/xml/WebServiceBindingProcessor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/8192c1ae4ff0bd5e6719719d57cabeddf3c2c3be/modules/binding-ws-xml/src/main/java/org/apache/tuscany/sca/binding/ws/xml/WebServiceBindingProcessor.java", "sha": "15b58e499ccae1fd4ce5f06c0c173540defc9037", "changes": 8, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-ws-xml/src/main/java/org/apache/tuscany/sca/binding/ws/xml/WebServiceBindingProcessor.java?ref=8192c1ae4ff0bd5e6719719d57cabeddf3c2c3be", "patch": "@@ -348,8 +348,12 @@ public void resolve(WebServiceBinding model, ModelResolver resolver) throws Cont\n                     model.setService(service.getElement());\n                     if (model.getPortName() != null) {\n                         Port port = service.getElement().getPort(model.getPortName());\n-                        model.setPort(port);\n-                        model.setBinding(port.getBinding());\n+                        if (port != null) {\n+                            model.setPort(port);\n+                            model.setBinding(port.getBinding());\n+                        } else {\n+                            warning(\"WsdlPortTypeDoesNotMatch\", wsdlDefinition, model.getPortName());\n+                        }\n                     }\n                 } else {\n                 \twarning(\"WsdlServiceDoesNotMatch\", wsdlDefinition, model.getServiceName());", "filename": "modules/binding-ws-xml/src/main/java/org/apache/tuscany/sca/binding/ws/xml/WebServiceBindingProcessor.java"}, {"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/8192c1ae4ff0bd5e6719719d57cabeddf3c2c3be/modules/binding-ws-xml/src/main/resources/binding-wsxml-validation-messages.properties", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/8192c1ae4ff0bd5e6719719d57cabeddf3c2c3be/modules/binding-ws-xml/src/main/resources/binding-wsxml-validation-messages.properties", "sha": "2dfa5e61335f8d1c32193974ae6e0d04d4f2829b", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-ws-xml/src/main/resources/binding-wsxml-validation-messages.properties?ref=8192c1ae4ff0bd5e6719719d57cabeddf3c2c3be", "patch": "@@ -21,6 +21,8 @@\n InvalidWsdlElementAttr = Invalid WebService binding wsdlElement attribute: {0}\n MustUseWsdlBinding = {0} must use wsdl.binding when using wsa:EndpointReference\n InvalidInterfaceException = Exception creating interface from WSDL for binding: {0}\n-WsdlBindingDoesNotMatch = The #wsdl.binding({0}) does not match with the WSDL Definitions \n+WsdlBindingDoesNotMatch = The #wsdl.binding({0}) does not match with the WSDL Definitions\n WsdlServiceDoesNotMatch = The #wsdl.service({0}) does not match with the WSDL Definitions\n+WsdlPortTypeDoesNotMatch = The #wsdl.port({0}) does not match with the WSDL Definitions\n+\n ", "filename": "modules/binding-ws-xml/src/main/resources/binding-wsxml-validation-messages.properties"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/e50d74fc99ff17904f29f7aeef970519b6d7904c", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/40641c4323f6ccce34f4a7fd29d90d1998ea95c1", "message": "Fixed a number of NPEs when a contribution contains multiple WSDLs in a namespace used by a BPEL process.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@686587 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_99", "file": [{"additions": 93, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e50d74fc99ff17904f29f7aeef970519b6d7904c/modules/implementation-bpel/src/main/java/org/apache/tuscany/sca/implementation/bpel/xml/BPELDocumentProcessor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e50d74fc99ff17904f29f7aeef970519b6d7904c/modules/implementation-bpel/src/main/java/org/apache/tuscany/sca/implementation/bpel/xml/BPELDocumentProcessor.java", "sha": "28651a93bd5d30b9abcbec74011c5918a59b8840", "changes": 169, "status": "modified", "deletions": 76, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/implementation-bpel/src/main/java/org/apache/tuscany/sca/implementation/bpel/xml/BPELDocumentProcessor.java?ref=e50d74fc99ff17904f29f7aeef970519b6d7904c", "patch": "@@ -70,6 +70,7 @@\n     private static final String SCA_BPEL_NS = \"http://docs.oasis-open.org/ns/opencsa/sca-bpel/200801\";\n     private static final String BPEL_NS = \"http://schemas.xmlsoap.org/ws/2004/03/business-process/\";\n     private static final String BPEL_PLINK_NS = \"http://schemas.xmlsoap.org/ws/2004/03/partner-link/\";\n+    private static final String WSDL_NS = \"http://schemas.xmlsoap.org/wsdl/\";\n     private static final QName PROCESS_ELEMENT = new QName(BPEL_NS, \"process\");\n     private static final QName PARTNERLINK_ELEMENT = new QName(BPEL_NS, \"partnerLink\");\n     private static final QName ONEVENT_ELEMENT = new QName(BPEL_NS, \"onEvent\");\n@@ -137,22 +138,22 @@ public void resolve(BPELProcessDefinition model, ModelResolver resolver) throws\n         for (BPELImportElement theImport : theImports) {\n \n             // Deal with WSDL imports\n-            if (theImport.getImportType().equals(\"http://schemas.xmlsoap.org/wsdl/\")) {\n-                String WSDLLocation = theImport.getLocation();\n-                String WSDLNamespace = theImport.getNamespace();\n+            if (theImport.getImportType().equals(WSDL_NS)) {\n+                String wsdlLocation = theImport.getLocation();\n+                String wsdlNamespace = theImport.getNamespace();\n \n                 // Resolve the WSDL definition\n                 WSDLDefinition proxy = WSDLfactory.createWSDLDefinition();\n                 proxy.setUnresolved(true);\n-                proxy.setNamespace(WSDLNamespace);\n-                if (WSDLLocation != null) {\n-                    proxy.setLocation(URI.create(WSDLLocation));\n+                proxy.setNamespace(wsdlNamespace);\n+                if (wsdlLocation != null) {\n+                    proxy.setLocation(URI.create(wsdlLocation));\n                 }\n                 WSDLDefinition resolved = resolver.resolveModel(WSDLDefinition.class, proxy);\n                 if (resolved != null && !resolved.isUnresolved()) {\n                     theImport.setWSDLDefinition(resolved);\n                 } else {\n-                    error(\"CannotResolveWSDLReference\", resolver, WSDLLocation, WSDLNamespace);\n+                    error(\"CannotResolveWSDLReference\", resolver, wsdlLocation, wsdlNamespace);\n                     return;\n                 } // end if\n             } // end if\n@@ -193,48 +194,57 @@ public void resolve(BPELProcessDefinition model, ModelResolver resolver) throws\n         // We must find the partner link type elements from amongst the imported\n         // WSDLs\n         for (BPELImportElement theImport : theImports) {\n-            WSDLDefinition theWSDL = theImport.getWSDLDefinition();\n-            Definition WSDLDefinition = theWSDL.getDefinition();\n-\n-            // The BPEL partnerLinkType elements are extension elements within\n-            // the WSDL\n-            List<ExtensibilityElement> extensibilityElements = WSDLDefinition.getExtensibilityElements();\n-\n-            for (ExtensibilityElement theElement : extensibilityElements) {\n-                QName elementType = theElement.getElementType();\n-                if (elementType.equals(LINKTYPE_ELEMENT)) {\n-                    BPELPartnerLinkTypeExt pLinkExt = (BPELPartnerLinkTypeExt)theElement;\n-                    // Fetch the name of the partnerLinkType\n-                    String name = pLinkExt.getName();\n-                    QName qName = new QName(WSDLDefinition.getTargetNamespace(), name);\n-                    BPELPartnerLinkTypeElement pLinkElement = new BPELPartnerLinkTypeElement(qName);\n-\n-                    // The partnerLinkType must have one and may have 2 role\n-                    // child elements\n-                    int count = 0;\n-                    for (int i = 0; i < 2; i++) {\n-                        if (pLinkExt.getRoleName(i) == null)\n-                            continue;\n-                        PortType pType = WSDLDefinition.getPortType(pLinkExt.getRolePortType(i));\n-                        if (count == 0) {\n-                            pLinkElement.setRole1(pLinkExt.getRoleName(i), pLinkExt.getRolePortType(i), pType);\n-                            count++;\n-                        } else if (count == 1) {\n-                            pLinkElement.setRole2(pLinkExt.getRoleName(i), pLinkExt.getRolePortType(i), pType);\n-                            count++;\n-                        } else {\n-                            break;\n-                        } // end if\n-                    } // end for\n+            if (theImport.getImportType().equals(WSDL_NS)) {\n+\n+                // Find all the WSDL definitions matching the imported namespace\n+                List<Definition> wsdlDefinitions = new ArrayList<Definition>();\n+                WSDLDefinition theWSDL = theImport.getWSDLDefinition();\n+                wsdlDefinitions.add(theWSDL.getDefinition());\n+                for (WSDLDefinition importedWSDL: theWSDL.getImportedDefinitions()) {\n+                    wsdlDefinitions.add(importedWSDL.getDefinition());\n+                }\n \n-                    if (count == 0) {\n-                        error(\"PartnerLinkTypeNoRoles\", theElement, pLinkElement.getName());\n-                        throw new ContributionResolveException(\"partnerLinkType \" + pLinkElement.getName() + \" has no Roles defined\");\n-                    } else\n-                        thePLinks.add(pLinkElement);\n-                } // end if\n+                // The BPEL partnerLinkType elements are extension elements within\n+                // the WSDL definitions\n+                for (Definition wsdlDefinition: wsdlDefinitions) {\n+                    for (ExtensibilityElement theElement : (List<ExtensibilityElement>)wsdlDefinition.getExtensibilityElements()) {\n+                        QName elementType = theElement.getElementType();\n+                        if (elementType.equals(LINKTYPE_ELEMENT)) {\n+                            BPELPartnerLinkTypeExt pLinkExt = (BPELPartnerLinkTypeExt)theElement;\n+                            \n+                            // Fetch the name of the partnerLinkType\n+                            String name = pLinkExt.getName();\n+                            QName qName = new QName(wsdlDefinition.getTargetNamespace(), name);\n+                            BPELPartnerLinkTypeElement pLinkElement = new BPELPartnerLinkTypeElement(qName);\n+\n+                            // The partnerLinkType must have one and may have 2 role\n+                            // child elements\n+                            int count = 0;\n+                            for (int i = 0; i < 2; i++) {\n+                                if (pLinkExt.getRoleName(i) == null)\n+                                    continue;\n+                                PortType pType = wsdlDefinition.getPortType(pLinkExt.getRolePortType(i));\n+                                if (count == 0) {\n+                                    pLinkElement.setRole1(pLinkExt.getRoleName(i), pLinkExt.getRolePortType(i), pType);\n+                                    count++;\n+                                } else if (count == 1) {\n+                                    pLinkElement.setRole2(pLinkExt.getRoleName(i), pLinkExt.getRolePortType(i), pType);\n+                                    count++;\n+                                } else {\n+                                    break;\n+                                } // end if\n+                            } // end for\n+\n+                            if (count == 0) {\n+                                error(\"PartnerLinkTypeNoRoles\", theElement, pLinkElement.getName());\n+                                throw new ContributionResolveException(\"partnerLinkType \" + pLinkElement.getName() + \" has no Roles defined\");\n+                            } else\n+                                thePLinks.add(pLinkElement);\n+                        } // end if\n \n-            } // end for\n+                    } // end for\n+                }\n+            }\n         } // end for\n         return thePLinks;\n     } // end getPartnerLinkTypes\n@@ -253,35 +263,42 @@ public void resolve(BPELProcessDefinition model, ModelResolver resolver) throws\n \n         Collection<PortType> thePortTypes = (Collection<PortType>)new ArrayList<PortType>();\n         for (BPELImportElement theImport : theImports) {\n-            WSDLDefinition theWSDL = theImport.getWSDLDefinition();\n-            Definition wsdlDefinition = theWSDL.getDefinition();\n-\n-            Collection<PortType> portTypes = (Collection<PortType>)wsdlDefinition.getPortTypes().values();\n-            thePortTypes.addAll(portTypes);\n-\n-            // Create WSDLInterface elements for each PortType found\n-            for (PortType portType : portTypes) {\n-                WSDLObject<PortType> wsdlPortType = theWSDL.getWSDLObject(PortType.class, portType.getQName());\n-                WSDLInterface wsdlInterface;\n-                if (wsdlPortType != null) {\n-                    // Introspect the WSDL portType and add the resulting\n-                    // WSDLInterface to the resolver\n-                    try {\n-                        theWSDL.setDefinition(wsdlPortType.getDefinition());\n-                        wsdlInterface = WSDLfactory.createWSDLInterface(wsdlPortType.getElement(), theWSDL, resolver);\n-                        wsdlInterface.setWsdlDefinition(theWSDL);\n-                    } catch (InvalidInterfaceException e) {\n-                        ContributionResolveException ce = new ContributionResolveException(e);\n-                        error(\"ContributionResolveException\", resolver, ce);\n-                        throw ce;\n-                    } // end try\n-                    resolver.addModel(wsdlInterface);\n-                    theInterfaces.add(wsdlInterface);\n-                } // end if\n-            } // end for\n-\n-            // -----------------------\n-\n+            if (theImport.getImportType().equals(WSDL_NS)) {\n+                \n+                // Find all the WSDL definitions matching the imported namespace\n+                List<Definition> wsdlDefinitions = new ArrayList<Definition>();\n+                WSDLDefinition theWSDL = theImport.getWSDLDefinition();\n+                wsdlDefinitions.add(theWSDL.getDefinition());\n+                for (WSDLDefinition importedWSDL: theWSDL.getImportedDefinitions()) {\n+                    wsdlDefinitions.add(importedWSDL.getDefinition());\n+                }\n+                for (Definition wsdlDefinition: wsdlDefinitions) {\n+\n+                    Collection<PortType> portTypes = (Collection<PortType>)wsdlDefinition.getPortTypes().values();\n+                    thePortTypes.addAll(portTypes);\n+\n+                    // Create WSDLInterface elements for each PortType found\n+                    for (PortType portType : portTypes) {\n+                        WSDLObject<PortType> wsdlPortType = theWSDL.getWSDLObject(PortType.class, portType.getQName());\n+                        WSDLInterface wsdlInterface;\n+                        if (wsdlPortType != null) {\n+                            // Introspect the WSDL portType and add the resulting\n+                            // WSDLInterface to the resolver\n+                            try {\n+                                theWSDL.setDefinition(wsdlPortType.getDefinition());\n+                                wsdlInterface = WSDLfactory.createWSDLInterface(wsdlPortType.getElement(), theWSDL, resolver);\n+                                wsdlInterface.setWsdlDefinition(theWSDL);\n+                            } catch (InvalidInterfaceException e) {\n+                                ContributionResolveException ce = new ContributionResolveException(e);\n+                                error(\"ContributionResolveException\", resolver, ce);\n+                                throw ce;\n+                            } // end try\n+                            resolver.addModel(wsdlInterface);\n+                            theInterfaces.add(wsdlInterface);\n+                        } // end if\n+                    } // end for\n+                }\n+            }\n         } // end for\n \n         return thePortTypes;", "filename": "modules/implementation-bpel/src/main/java/org/apache/tuscany/sca/implementation/bpel/xml/BPELDocumentProcessor.java"}, {"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e50d74fc99ff17904f29f7aeef970519b6d7904c/modules/implementation-bpel/src/main/java/org/apache/tuscany/sca/implementation/bpel/xml/BPELImplementationProcessor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e50d74fc99ff17904f29f7aeef970519b6d7904c/modules/implementation-bpel/src/main/java/org/apache/tuscany/sca/implementation/bpel/xml/BPELImplementationProcessor.java", "sha": "c822eade1e07db0d2c5451a5b6565ae3a3bc676b", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/implementation-bpel/src/main/java/org/apache/tuscany/sca/implementation/bpel/xml/BPELImplementationProcessor.java?ref=e50d74fc99ff17904f29f7aeef970519b6d7904c", "patch": "@@ -194,11 +194,11 @@ private void generateComponentType(BPELImplementation impl) throws ContributionR\n             // check that the partner link has been designated as service or\n             // reference in SCA terms\n             if (pLink.isSCATyped()) {\n-                String SCAName = pLink.getSCAName();\n+                String scaName = pLink.getSCAName();\n                 if (pLink.querySCAType().equals(\"reference\")) {\n-                    componentType.getReferences().add(generateReference(SCAName, pLink.getMyRolePortType(), pLink.getPartnerRolePortType(), theProcess.getInterfaces()));\n+                    componentType.getReferences().add(generateReference(scaName, pLink.getMyRolePortType(), pLink.getPartnerRolePortType(), theProcess.getInterfaces()));\n                 } else {\n-                    componentType.getServices().add(generateService(SCAName, pLink.getMyRolePortType(), pLink.getPartnerRolePortType(), theProcess.getInterfaces()));\n+                    componentType.getServices().add(generateService(scaName, pLink.getMyRolePortType(), pLink.getPartnerRolePortType(), theProcess.getInterfaces()));\n                 } // end if\n             } // end if\n         } // end for", "filename": "modules/implementation-bpel/src/main/java/org/apache/tuscany/sca/implementation/bpel/xml/BPELImplementationProcessor.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/829c6cad362e4eccc5d0a9dcc85e1e77bead895e", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/537f380b9b479800a1db296c5de58907c0b34298", "message": "TUSCANY-2319 - fix NPE in binding.ws and add validation itests. Thanks for the patch Ram.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@661651 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_100", "file": [{"additions": 92, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/itest/validation/src/main/resources/binding/wsxml/WsdlBindingDoesNotMatch/helloworld.wsdl", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/itest/validation/src/main/resources/binding/wsxml/WsdlBindingDoesNotMatch/helloworld.wsdl", "sha": "013a55b61e8ada3fb996e0b504737ea215b7bc0f", "changes": 92, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/itest/validation/src/main/resources/binding/wsxml/WsdlBindingDoesNotMatch/helloworld.wsdl?ref=829c6cad362e4eccc5d0a9dcc85e1e77bead895e", "patch": "@@ -0,0 +1,92 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+-->\n+<wsdl:definitions targetNamespace=\"http://helloworld\" xmlns:tns=\"http://helloworld\" xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:wsdlsoap=\"http://schemas.xmlsoap.org/wsdl/soap/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n+\tname=\"helloworld\">\n+\n+    <wsdl:types>\n+        <schema elementFormDefault=\"qualified\" targetNamespace=\"http://helloworld\" xmlns=\"http://www.w3.org/2001/XMLSchema\">\n+\n+            <element name=\"getGreetings\">\n+                <complexType>\n+                    <sequence>\n+                        <element name=\"name\" type=\"xsd:string\"/>\n+                    </sequence>\n+                </complexType>\n+            </element>\n+\n+            <element name=\"getGreetingsResponse\">\n+                <complexType>\n+                    <sequence>\n+                        <element name=\"getGreetingsReturn\" type=\"xsd:string\"/>\n+                    </sequence>\n+                </complexType>\n+            </element>\n+            \n+        </schema>\n+    </wsdl:types>\n+\n+    <wsdl:message name=\"getGreetingsRequest\">\n+        <wsdl:part element=\"tns:getGreetings\" name=\"parameters\"/>\n+    </wsdl:message>\n+\n+    <wsdl:message name=\"getGreetingsResponse\">\n+        <wsdl:part element=\"tns:getGreetingsResponse\" name=\"parameters\"/>\n+    </wsdl:message>\n+\n+    <wsdl:portType name=\"HelloWorld\">\n+        <wsdl:operation name=\"getGreetings\">\n+            <wsdl:input message=\"tns:getGreetingsRequest\" name=\"getGreetingsRequest\"/>\n+            <wsdl:output message=\"tns:getGreetingsResponse\" name=\"getGreetingsResponse\"/>\n+        </wsdl:operation>\n+    </wsdl:portType>\n+\n+    <wsdl:binding name=\"HelloWorldSoapBinding\" type=\"tns:HelloWorld\">\n+        <wsdlsoap:binding style=\"document\" transport=\"http://schemas.xmlsoap.org/soap/http\"/>\n+        <wsdl:operation name=\"getGreetings\">\n+            <wsdlsoap:operation soapAction=\"\"/>\n+            <wsdl:input name=\"getGreetingsRequest\">\n+                <wsdlsoap:body use=\"literal\"/>\n+            </wsdl:input>\n+            <wsdl:output name=\"getGreetingsResponse\">\n+                <wsdlsoap:body use=\"literal\"/>\n+            </wsdl:output>\n+        </wsdl:operation>\n+    </wsdl:binding>\n+\n+    <wsdl:binding name=\"HelloWorldSoapJmsBinding\" type=\"tns:HelloWorld\">\n+        <wsdlsoap:binding style=\"document\" transport=\"http://schemas.xmlsoap.org/soap/jms\"/>\n+        <wsdl:operation name=\"getGreetings\">\n+            <wsdlsoap:operation soapAction=\"\"/>\n+            <wsdl:input name=\"getGreetingsRequest\">\n+                <wsdlsoap:body use=\"literal\"/>\n+            </wsdl:input>\n+            <wsdl:output name=\"getGreetingsResponse\">\n+                <wsdlsoap:body use=\"literal\"/>\n+            </wsdl:output>\n+        </wsdl:operation>\n+    </wsdl:binding>\n+\n+    <wsdl:service name=\"HelloWorldService\">\n+        <wsdl:port binding=\"tns:HelloWorldSoapJmsBinding\" name=\"HelloWorldSoapJmsPort\">\n+            <wsdlsoap:address location=\"jms:/queue.sample?transport.jms.ConnectionFactoryJNDIName=QueueConnectionFactory&amp;java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;java.naming.provider.url=tcp://localhost:61619\"/>\n+        </wsdl:port>\n+    </wsdl:service>\n+\n+</wsdl:definitions>", "filename": "itest/validation/src/main/resources/binding/wsxml/WsdlBindingDoesNotMatch/helloworld.wsdl"}, {"additions": 34, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/itest/validation/src/main/resources/binding/wsxml/WsdlBindingDoesNotMatch/helloworldwsjms.composite", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/itest/validation/src/main/resources/binding/wsxml/WsdlBindingDoesNotMatch/helloworldwsjms.composite", "sha": "b7ff1e304f42cbfb766e6578ea023ce90f293129", "changes": 34, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/itest/validation/src/main/resources/binding/wsxml/WsdlBindingDoesNotMatch/helloworldwsjms.composite?ref=829c6cad362e4eccc5d0a9dcc85e1e77bead895e", "patch": "@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    * Licensed to the Apache Software Foundation (ASF) under one\n+    * or more contributor license agreements.  See the NOTICE file\n+    * distributed with this work for additional information\n+    * regarding copyright ownership.  The ASF licenses this file\n+    * to you under the Apache License, Version 2.0 (the\n+    * \"License\"); you may not use this file except in compliance\n+    * with the License.  You may obtain a copy of the License at\n+    * \n+    *   http://www.apache.org/licenses/LICENSE-2.0\n+    * \n+    * Unless required by applicable law or agreed to in writing,\n+    * software distributed under the License is distributed on an\n+    * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    * KIND, either express or implied.  See the License for the\n+    * specific language governing permissions and limitations\n+    * under the License.    \n+-->\n+<composite xmlns=\"http://www.osoa.org/xmlns/sca/1.0\"\n+\ttargetNamespace=\"http://helloworld\"\n+\txmlns:hw=\"http://helloworld\"\n+    name=\"helloworldws\">\n+\n+    <component name=\"HelloWorldServiceComponent\">\n+        <implementation.java class=\"binding.jms.HelloWorldServiceImpl\" />\n+\t    <service name=\"HelloWorldService\">\n+\t        <interface.wsdl interface=\"http://helloworld#wsdl.interface(HelloWorld)\" />\n+            <binding.ws wsdlElement=\"http://helloworld#wsdl.binding(HelloWorldSoapJmsBinding2)\"\n+                    uri=\"jms:/queue.sample?transport.jms.ConnectionFactoryJNDIName=QueueConnectionFactory&amp;java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;java.naming.provider.url=tcp://localhost:61619\"/>\n+        </service>\n+    </component>\n+\n+</composite>", "filename": "itest/validation/src/main/resources/binding/wsxml/WsdlBindingDoesNotMatch/helloworldwsjms.composite"}, {"additions": 92, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/itest/validation/src/main/resources/binding/wsxml/WsdlServiceDoesNotMatch/helloworld.wsdl", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/itest/validation/src/main/resources/binding/wsxml/WsdlServiceDoesNotMatch/helloworld.wsdl", "sha": "013a55b61e8ada3fb996e0b504737ea215b7bc0f", "changes": 92, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/itest/validation/src/main/resources/binding/wsxml/WsdlServiceDoesNotMatch/helloworld.wsdl?ref=829c6cad362e4eccc5d0a9dcc85e1e77bead895e", "patch": "@@ -0,0 +1,92 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+-->\n+<wsdl:definitions targetNamespace=\"http://helloworld\" xmlns:tns=\"http://helloworld\" xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:wsdlsoap=\"http://schemas.xmlsoap.org/wsdl/soap/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n+\tname=\"helloworld\">\n+\n+    <wsdl:types>\n+        <schema elementFormDefault=\"qualified\" targetNamespace=\"http://helloworld\" xmlns=\"http://www.w3.org/2001/XMLSchema\">\n+\n+            <element name=\"getGreetings\">\n+                <complexType>\n+                    <sequence>\n+                        <element name=\"name\" type=\"xsd:string\"/>\n+                    </sequence>\n+                </complexType>\n+            </element>\n+\n+            <element name=\"getGreetingsResponse\">\n+                <complexType>\n+                    <sequence>\n+                        <element name=\"getGreetingsReturn\" type=\"xsd:string\"/>\n+                    </sequence>\n+                </complexType>\n+            </element>\n+            \n+        </schema>\n+    </wsdl:types>\n+\n+    <wsdl:message name=\"getGreetingsRequest\">\n+        <wsdl:part element=\"tns:getGreetings\" name=\"parameters\"/>\n+    </wsdl:message>\n+\n+    <wsdl:message name=\"getGreetingsResponse\">\n+        <wsdl:part element=\"tns:getGreetingsResponse\" name=\"parameters\"/>\n+    </wsdl:message>\n+\n+    <wsdl:portType name=\"HelloWorld\">\n+        <wsdl:operation name=\"getGreetings\">\n+            <wsdl:input message=\"tns:getGreetingsRequest\" name=\"getGreetingsRequest\"/>\n+            <wsdl:output message=\"tns:getGreetingsResponse\" name=\"getGreetingsResponse\"/>\n+        </wsdl:operation>\n+    </wsdl:portType>\n+\n+    <wsdl:binding name=\"HelloWorldSoapBinding\" type=\"tns:HelloWorld\">\n+        <wsdlsoap:binding style=\"document\" transport=\"http://schemas.xmlsoap.org/soap/http\"/>\n+        <wsdl:operation name=\"getGreetings\">\n+            <wsdlsoap:operation soapAction=\"\"/>\n+            <wsdl:input name=\"getGreetingsRequest\">\n+                <wsdlsoap:body use=\"literal\"/>\n+            </wsdl:input>\n+            <wsdl:output name=\"getGreetingsResponse\">\n+                <wsdlsoap:body use=\"literal\"/>\n+            </wsdl:output>\n+        </wsdl:operation>\n+    </wsdl:binding>\n+\n+    <wsdl:binding name=\"HelloWorldSoapJmsBinding\" type=\"tns:HelloWorld\">\n+        <wsdlsoap:binding style=\"document\" transport=\"http://schemas.xmlsoap.org/soap/jms\"/>\n+        <wsdl:operation name=\"getGreetings\">\n+            <wsdlsoap:operation soapAction=\"\"/>\n+            <wsdl:input name=\"getGreetingsRequest\">\n+                <wsdlsoap:body use=\"literal\"/>\n+            </wsdl:input>\n+            <wsdl:output name=\"getGreetingsResponse\">\n+                <wsdlsoap:body use=\"literal\"/>\n+            </wsdl:output>\n+        </wsdl:operation>\n+    </wsdl:binding>\n+\n+    <wsdl:service name=\"HelloWorldService\">\n+        <wsdl:port binding=\"tns:HelloWorldSoapJmsBinding\" name=\"HelloWorldSoapJmsPort\">\n+            <wsdlsoap:address location=\"jms:/queue.sample?transport.jms.ConnectionFactoryJNDIName=QueueConnectionFactory&amp;java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;java.naming.provider.url=tcp://localhost:61619\"/>\n+        </wsdl:port>\n+    </wsdl:service>\n+\n+</wsdl:definitions>", "filename": "itest/validation/src/main/resources/binding/wsxml/WsdlServiceDoesNotMatch/helloworld.wsdl"}, {"additions": 34, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/itest/validation/src/main/resources/binding/wsxml/WsdlServiceDoesNotMatch/helloworldwsjms.composite", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/itest/validation/src/main/resources/binding/wsxml/WsdlServiceDoesNotMatch/helloworldwsjms.composite", "sha": "8cda0b007e9448cdf93636c463253691c4b29021", "changes": 34, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/itest/validation/src/main/resources/binding/wsxml/WsdlServiceDoesNotMatch/helloworldwsjms.composite?ref=829c6cad362e4eccc5d0a9dcc85e1e77bead895e", "patch": "@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    * Licensed to the Apache Software Foundation (ASF) under one\n+    * or more contributor license agreements.  See the NOTICE file\n+    * distributed with this work for additional information\n+    * regarding copyright ownership.  The ASF licenses this file\n+    * to you under the Apache License, Version 2.0 (the\n+    * \"License\"); you may not use this file except in compliance\n+    * with the License.  You may obtain a copy of the License at\n+    * \n+    *   http://www.apache.org/licenses/LICENSE-2.0\n+    * \n+    * Unless required by applicable law or agreed to in writing,\n+    * software distributed under the License is distributed on an\n+    * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    * KIND, either express or implied.  See the License for the\n+    * specific language governing permissions and limitations\n+    * under the License.    \n+-->\n+<composite xmlns=\"http://www.osoa.org/xmlns/sca/1.0\"\n+\ttargetNamespace=\"http://helloworld\"\n+\txmlns:hw=\"http://helloworld\"\n+    name=\"helloworldws\">\n+\n+    <component name=\"HelloWorldServiceComponent\">\n+        <implementation.java class=\"binding.jms.HelloWorldServiceImpl\" />\n+\t    <service name=\"HelloWorldService\">\n+\t        <interface.wsdl interface=\"http://helloworld#wsdl.interface(HelloWorld)\" />\n+            <binding.ws wsdlElement=\"http://helloworld#wsdl.service(HelloWorldService2)\"\n+                    uri=\"jms:/queue.sample?transport.jms.ConnectionFactoryJNDIName=QueueConnectionFactory&amp;java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;java.naming.provider.url=tcp://localhost:61619\"/>\n+        </service>\n+    </component>\n+\n+</composite>", "filename": "itest/validation/src/main/resources/binding/wsxml/WsdlServiceDoesNotMatch/helloworldwsjms.composite"}, {"additions": 92, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/itest/validation/src/main/resources/interfacewsdl/xml/WsdlInterfaceDoesNotMatch/helloworld.wsdl", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/itest/validation/src/main/resources/interfacewsdl/xml/WsdlInterfaceDoesNotMatch/helloworld.wsdl", "sha": "013a55b61e8ada3fb996e0b504737ea215b7bc0f", "changes": 92, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/itest/validation/src/main/resources/interfacewsdl/xml/WsdlInterfaceDoesNotMatch/helloworld.wsdl?ref=829c6cad362e4eccc5d0a9dcc85e1e77bead895e", "patch": "@@ -0,0 +1,92 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+-->\n+<wsdl:definitions targetNamespace=\"http://helloworld\" xmlns:tns=\"http://helloworld\" xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:wsdlsoap=\"http://schemas.xmlsoap.org/wsdl/soap/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n+\tname=\"helloworld\">\n+\n+    <wsdl:types>\n+        <schema elementFormDefault=\"qualified\" targetNamespace=\"http://helloworld\" xmlns=\"http://www.w3.org/2001/XMLSchema\">\n+\n+            <element name=\"getGreetings\">\n+                <complexType>\n+                    <sequence>\n+                        <element name=\"name\" type=\"xsd:string\"/>\n+                    </sequence>\n+                </complexType>\n+            </element>\n+\n+            <element name=\"getGreetingsResponse\">\n+                <complexType>\n+                    <sequence>\n+                        <element name=\"getGreetingsReturn\" type=\"xsd:string\"/>\n+                    </sequence>\n+                </complexType>\n+            </element>\n+            \n+        </schema>\n+    </wsdl:types>\n+\n+    <wsdl:message name=\"getGreetingsRequest\">\n+        <wsdl:part element=\"tns:getGreetings\" name=\"parameters\"/>\n+    </wsdl:message>\n+\n+    <wsdl:message name=\"getGreetingsResponse\">\n+        <wsdl:part element=\"tns:getGreetingsResponse\" name=\"parameters\"/>\n+    </wsdl:message>\n+\n+    <wsdl:portType name=\"HelloWorld\">\n+        <wsdl:operation name=\"getGreetings\">\n+            <wsdl:input message=\"tns:getGreetingsRequest\" name=\"getGreetingsRequest\"/>\n+            <wsdl:output message=\"tns:getGreetingsResponse\" name=\"getGreetingsResponse\"/>\n+        </wsdl:operation>\n+    </wsdl:portType>\n+\n+    <wsdl:binding name=\"HelloWorldSoapBinding\" type=\"tns:HelloWorld\">\n+        <wsdlsoap:binding style=\"document\" transport=\"http://schemas.xmlsoap.org/soap/http\"/>\n+        <wsdl:operation name=\"getGreetings\">\n+            <wsdlsoap:operation soapAction=\"\"/>\n+            <wsdl:input name=\"getGreetingsRequest\">\n+                <wsdlsoap:body use=\"literal\"/>\n+            </wsdl:input>\n+            <wsdl:output name=\"getGreetingsResponse\">\n+                <wsdlsoap:body use=\"literal\"/>\n+            </wsdl:output>\n+        </wsdl:operation>\n+    </wsdl:binding>\n+\n+    <wsdl:binding name=\"HelloWorldSoapJmsBinding\" type=\"tns:HelloWorld\">\n+        <wsdlsoap:binding style=\"document\" transport=\"http://schemas.xmlsoap.org/soap/jms\"/>\n+        <wsdl:operation name=\"getGreetings\">\n+            <wsdlsoap:operation soapAction=\"\"/>\n+            <wsdl:input name=\"getGreetingsRequest\">\n+                <wsdlsoap:body use=\"literal\"/>\n+            </wsdl:input>\n+            <wsdl:output name=\"getGreetingsResponse\">\n+                <wsdlsoap:body use=\"literal\"/>\n+            </wsdl:output>\n+        </wsdl:operation>\n+    </wsdl:binding>\n+\n+    <wsdl:service name=\"HelloWorldService\">\n+        <wsdl:port binding=\"tns:HelloWorldSoapJmsBinding\" name=\"HelloWorldSoapJmsPort\">\n+            <wsdlsoap:address location=\"jms:/queue.sample?transport.jms.ConnectionFactoryJNDIName=QueueConnectionFactory&amp;java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;java.naming.provider.url=tcp://localhost:61619\"/>\n+        </wsdl:port>\n+    </wsdl:service>\n+\n+</wsdl:definitions>", "filename": "itest/validation/src/main/resources/interfacewsdl/xml/WsdlInterfaceDoesNotMatch/helloworld.wsdl"}, {"additions": 34, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/itest/validation/src/main/resources/interfacewsdl/xml/WsdlInterfaceDoesNotMatch/helloworldwsjms.composite", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/itest/validation/src/main/resources/interfacewsdl/xml/WsdlInterfaceDoesNotMatch/helloworldwsjms.composite", "sha": "d9252ba54f7e52dd1db881068b363467dc4d0844", "changes": 34, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/itest/validation/src/main/resources/interfacewsdl/xml/WsdlInterfaceDoesNotMatch/helloworldwsjms.composite?ref=829c6cad362e4eccc5d0a9dcc85e1e77bead895e", "patch": "@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    * Licensed to the Apache Software Foundation (ASF) under one\n+    * or more contributor license agreements.  See the NOTICE file\n+    * distributed with this work for additional information\n+    * regarding copyright ownership.  The ASF licenses this file\n+    * to you under the Apache License, Version 2.0 (the\n+    * \"License\"); you may not use this file except in compliance\n+    * with the License.  You may obtain a copy of the License at\n+    * \n+    *   http://www.apache.org/licenses/LICENSE-2.0\n+    * \n+    * Unless required by applicable law or agreed to in writing,\n+    * software distributed under the License is distributed on an\n+    * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    * KIND, either express or implied.  See the License for the\n+    * specific language governing permissions and limitations\n+    * under the License.    \n+-->\n+<composite xmlns=\"http://www.osoa.org/xmlns/sca/1.0\"\n+\ttargetNamespace=\"http://helloworld\"\n+\txmlns:hw=\"http://helloworld\"\n+    name=\"helloworldws\">\n+\n+    <component name=\"HelloWorldServiceComponent\">\n+        <implementation.java class=\"binding.jms.HelloWorldServiceImpl\" />\n+\t    <service name=\"HelloWorldService\">\n+\t        <interface.wsdl interface=\"http://helloworld#wsdl.interface(HelloWorld2)\" />\n+            <binding.ws wsdlElement=\"http://helloworld#wsdl.binding(HelloWorldSoapJmsBinding)\"\n+                    uri=\"jms:/queue.sample?transport.jms.ConnectionFactoryJNDIName=QueueConnectionFactory&amp;java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;java.naming.provider.url=tcp://localhost:61619\"/>\n+        </service>\n+    </component>\n+\n+</composite>", "filename": "itest/validation/src/main/resources/interfacewsdl/xml/WsdlInterfaceDoesNotMatch/helloworldwsjms.composite"}, {"additions": 60, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/itest/validation/src/test/java/binding/wsxml/WsdlBindingDoesNotMatchTestCase.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/itest/validation/src/test/java/binding/wsxml/WsdlBindingDoesNotMatchTestCase.java", "sha": "baea34c8ab29a37bdb7e51b70eac349e54392bcf", "changes": 60, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/itest/validation/src/test/java/binding/wsxml/WsdlBindingDoesNotMatchTestCase.java?ref=829c6cad362e4eccc5d0a9dcc85e1e77bead895e", "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package binding.wsxml;\n+\n+import junit.framework.TestCase;\n+import org.apache.tuscany.sca.monitor.Monitor;\n+import org.apache.tuscany.sca.monitor.Problem;\n+import org.apache.tuscany.sca.monitor.impl.DefaultLoggingMonitorImpl;\n+\n+import domain.CustomCompositeBuilder;\n+\n+/**\n+ * This shows how to test the Calculator service component.\n+ */\n+public class WsdlBindingDoesNotMatchTestCase extends TestCase {\n+\t\n+    private CustomCompositeBuilder customDomain;\n+    \n+    @Override\n+    protected void setUp() throws Exception \n+    {\n+        customDomain = CustomCompositeBuilder.getInstance();\n+        try {\n+             customDomain.loadContribution(\"src/main/resources/binding/wsxml/WsdlBindingDoesNotMatch/helloworldwsjms.composite\", \n+                       \"TestContribution\", \"src/main/resources/binding/wsxml/WsdlBindingDoesNotMatch/\");\n+        } catch (Exception ex){\n+            //throw ex;\n+        }\n+    }\n+\n+    @Override\n+    protected void tearDown() throws Exception {\n+        //node.stop();\n+    }\n+\n+    public void testCalculator() {\n+    \tMonitor monitor = customDomain.getMonitorInstance();\n+    \tProblem problem = ((DefaultLoggingMonitorImpl)monitor).getLastLoggedProblem();\n+        \n+    \tassertNotNull(problem);\n+       assertEquals(\"WsdlBindingDoesNotMatch\", problem.getMessageId());\n+ \n+    }\n+}", "filename": "itest/validation/src/test/java/binding/wsxml/WsdlBindingDoesNotMatchTestCase.java"}, {"additions": 60, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/itest/validation/src/test/java/binding/wsxml/WsdlServiceDoesNotMatchTestCase.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/itest/validation/src/test/java/binding/wsxml/WsdlServiceDoesNotMatchTestCase.java", "sha": "5fc5e39f9c586f3ea42d2eb32c441f05aac2432f", "changes": 60, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/itest/validation/src/test/java/binding/wsxml/WsdlServiceDoesNotMatchTestCase.java?ref=829c6cad362e4eccc5d0a9dcc85e1e77bead895e", "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package binding.wsxml;\n+\n+import junit.framework.TestCase;\n+import org.apache.tuscany.sca.monitor.Monitor;\n+import org.apache.tuscany.sca.monitor.Problem;\n+import org.apache.tuscany.sca.monitor.impl.DefaultLoggingMonitorImpl;\n+\n+import domain.CustomCompositeBuilder;\n+\n+/**\n+ * This shows how to test the Calculator service component.\n+ */\n+public class WsdlServiceDoesNotMatchTestCase extends TestCase {\n+\t\n+    private CustomCompositeBuilder customDomain;\n+    \n+    @Override\n+    protected void setUp() throws Exception \n+    {\n+        customDomain = CustomCompositeBuilder.getInstance();\n+        try {\n+             customDomain.loadContribution(\"src/main/resources/binding/wsxml/WsdlServiceDoesNotMatch/helloworldwsjms.composite\", \n+                       \"TestContribution\", \"src/main/resources/binding/wsxml/WsdlServiceDoesNotMatch/\");\n+        } catch (Exception ex){\n+            //throw ex;\n+        }\n+    }\n+\n+    @Override\n+    protected void tearDown() throws Exception {\n+        //node.stop();\n+    }\n+\n+    public void testCalculator() {\n+    \tMonitor monitor = customDomain.getMonitorInstance();\n+    \tProblem problem = ((DefaultLoggingMonitorImpl)monitor).getLastLoggedProblem();\n+        \n+    \tassertNotNull(problem);\n+       assertEquals(\"WsdlServiceDoesNotMatch\", problem.getMessageId());\n+ \n+    }\n+}", "filename": "itest/validation/src/test/java/binding/wsxml/WsdlServiceDoesNotMatchTestCase.java"}, {"additions": 58, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/itest/validation/src/test/java/interfacewsdl/xml/WsdlInterfaceDoesNotMatchTestCase.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/itest/validation/src/test/java/interfacewsdl/xml/WsdlInterfaceDoesNotMatchTestCase.java", "sha": "32f2e9751baf26d3774120c6b76282a28ea97d7c", "changes": 58, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/itest/validation/src/test/java/interfacewsdl/xml/WsdlInterfaceDoesNotMatchTestCase.java?ref=829c6cad362e4eccc5d0a9dcc85e1e77bead895e", "patch": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package interfacewsdl.xml;\n+\n+import junit.framework.TestCase;\n+import org.apache.tuscany.sca.monitor.Monitor;\n+import org.apache.tuscany.sca.monitor.Problem;\n+import org.apache.tuscany.sca.monitor.impl.DefaultLoggingMonitorImpl;\n+import domain.CustomCompositeBuilder;\n+\n+/**\n+ * This shows how to test the Calculator service component.\n+ */\n+public class WsdlInterfaceDoesNotMatchTestCase extends TestCase {\n+\n+    private CustomCompositeBuilder customDomain;\n+\t\n+    @Override\n+    protected void setUp() throws Exception \n+    {\n+        customDomain = CustomCompositeBuilder.getInstance();\n+        try {        \t\n+             customDomain.loadContribution(\"src/main/resources/interfacewsdl/xml/WsdlInterfaceDoesNotMatch/helloworldwsjms.composite\", \n+                       \"TestContribution\", \"src/main/resources/interfacewsdl/xml/WsdlInterfaceDoesNotMatch/\");        \t            \n+        } catch (Exception ex){\n+            //throw ex;\n+        }\n+    }\n+\n+    @Override\n+    protected void tearDown() throws Exception {\n+        //node.stop();\n+    }\n+\n+    public void testCalculator() {\n+    \tMonitor monitor = customDomain.getMonitorInstance();\n+    \tProblem problem = ((DefaultLoggingMonitorImpl)monitor).getLastLoggedProblem();\n+        \n+    \tassertNotNull(problem);\n+       assertEquals(\"WsdlInterfaceDoesNotMatch\", problem.getMessageId());  \n+    }\n+}", "filename": "itest/validation/src/test/java/interfacewsdl/xml/WsdlInterfaceDoesNotMatchTestCase.java"}, {"additions": 5, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/modules/binding-ws-xml/src/main/java/org/apache/tuscany/sca/binding/ws/xml/WebServiceBindingProcessor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/modules/binding-ws-xml/src/main/java/org/apache/tuscany/sca/binding/ws/xml/WebServiceBindingProcessor.java", "sha": "e5eb6581911273984699e64bcabf60b862c5047e", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-ws-xml/src/main/java/org/apache/tuscany/sca/binding/ws/xml/WebServiceBindingProcessor.java?ref=829c6cad362e4eccc5d0a9dcc85e1e77bead895e", "patch": "@@ -324,6 +324,8 @@ public void resolve(WebServiceBinding model, ModelResolver resolver) throws Cont\n                 if (binding != null) {\n                     wsdlDefinition.setDefinition(binding.getDefinition());\n                     model.setBinding(binding.getElement());\n+                } else {\n+                \twarning(\"WsdlBindingDoesNotMatch\", wsdlDefinition, model.getBindingName());\n                 }\n             }\n             if (model.getServiceName() != null) {\n@@ -336,6 +338,8 @@ public void resolve(WebServiceBinding model, ModelResolver resolver) throws Cont\n                         model.setPort(port);\n                         model.setBinding(port.getBinding());\n                     }\n+                } else {\n+                \twarning(\"WsdlServiceDoesNotMatch\", wsdlDefinition, model.getServiceName());\n                 }\n             }\n \n@@ -346,8 +350,7 @@ public void resolve(WebServiceBinding model, ModelResolver resolver) throws Cont\n                 try {\n                     wsdlInterface = wsdlFactory.createWSDLInterface(portType, wsdlDefinition, resolver);\n                 } catch (InvalidInterfaceException e) {\n-                \twarning(\"InvalidInterfaceException\", wsdlFactory, model.getName());\n-                    logger.log(Level.WARNING, \"Exception creating interface from WSDL for binding: \" + model.getName(), e); \n+                \twarning(\"InvalidInterfaceException\", wsdlFactory, model.getName()); \n                 }\n                 interfaceContract.setInterface(wsdlInterface);\n                 model.setBindingInterfaceContract(interfaceContract);", "filename": "modules/binding-ws-xml/src/main/java/org/apache/tuscany/sca/binding/ws/xml/WebServiceBindingProcessor.java"}, {"additions": 2, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/modules/binding-ws-xml/src/main/resources/binding-wsxml-validation-messages.properties", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/modules/binding-ws-xml/src/main/resources/binding-wsxml-validation-messages.properties", "sha": "60a7e9e2f21595a340f3d85134436c156c50cb4f", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-ws-xml/src/main/resources/binding-wsxml-validation-messages.properties?ref=829c6cad362e4eccc5d0a9dcc85e1e77bead895e", "patch": "@@ -21,4 +21,6 @@\n InvalidWsdlElementAttr = Invalid WebService binding wsdlElement attribute: {0}\n MustUseWsdlBinding = {0} must use wsdl.binding when using wsa:EndpointReference\n InvalidInterfaceException = Exception creating interface from WSDL for binding: {0}\n+WsdlBindingDoesNotMatch = The #wsdl.binding({0}) does not match with the WSDL Definitions \n+WsdlServiceDoesNotMatch = The #wsdl.service({0}) does not match with the WSDL Definitions\n ", "filename": "modules/binding-ws-xml/src/main/resources/binding-wsxml-validation-messages.properties"}, {"additions": 18, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/modules/interface-wsdl-xml/src/main/java/org/apache/tuscany/sca/interfacedef/wsdl/xml/WSDLInterfaceProcessor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/modules/interface-wsdl-xml/src/main/java/org/apache/tuscany/sca/interfacedef/wsdl/xml/WSDLInterfaceProcessor.java", "sha": "abd9f15e49ea509748c9c2ab50ac8fe5426189b6", "changes": 20, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/interface-wsdl-xml/src/main/java/org/apache/tuscany/sca/interfacedef/wsdl/xml/WSDLInterfaceProcessor.java?ref=829c6cad362e4eccc5d0a9dcc85e1e77bead895e", "patch": "@@ -59,6 +59,20 @@ public WSDLInterfaceProcessor(ModelFactoryExtensionPoint modelFactories, Monitor\n         this.monitor = monitor;\n     }\n     \n+    /**\n+     * Report a warning.\n+     * \n+     * @param problems\n+     * @param message\n+     * @param model\n+     */\n+    private void warning(String message, Object model, Object... messageParameters) {\n+        if (monitor != null) {\n+            Problem problem = new ProblemImpl(this.getClass().getName(), \"interface-wsdlxml-validation-messages\", Severity.WARNING, model, message, (Object[])messageParameters);\n+                                              monitor.problem(problem);\n+        }\n+     }\n+    \n     /**\n      * Report a error.\n      * \n@@ -188,8 +202,7 @@ private WSDLInterface resolveWSDLInterface(WSDLInterface wsdlInterface, ModelRes\n                     wsdlDefinition.getXmlSchemas().addAll(resolved.getXmlSchemas());\n                     wsdlDefinition.setUnresolved(false);\n                     WSDLObject<PortType> portType = wsdlDefinition.getWSDLObject(PortType.class, wsdlInterface.getName());\n-                    if (portType != null) {\n-                        \n+                    if (portType != null) {                        \n                         // Introspect the WSDL portType and add the resulting\n                         // WSDLInterface to the resolver\n                         try {\n@@ -203,6 +216,9 @@ private WSDLInterface resolveWSDLInterface(WSDLInterface wsdlInterface, ModelRes\n                         }\n                         resolver.addModel(wsdlInterface);\n                     }\n+                    else {\n+                    \twarning(\"WsdlInterfaceDoesNotMatch\", wsdlDefinition, wsdlInterface.getName());\n+                    }\n                 }\n             }\n         }", "filename": "modules/interface-wsdl-xml/src/main/java/org/apache/tuscany/sca/interfacedef/wsdl/xml/WSDLInterfaceProcessor.java"}, {"additions": 2, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/modules/interface-wsdl-xml/src/main/resources/interface-wsdlxml-validation-messages.properties", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/829c6cad362e4eccc5d0a9dcc85e1e77bead895e/modules/interface-wsdl-xml/src/main/resources/interface-wsdlxml-validation-messages.properties", "sha": "2f8c3e05002973e76a0e93cbbce11820bf264ded", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/interface-wsdl-xml/src/main/resources/interface-wsdlxml-validation-messages.properties?ref=829c6cad362e4eccc5d0a9dcc85e1e77bead895e", "patch": "@@ -20,4 +20,5 @@\n #\n ContributionReadException = ContributionReadException occured due to :\n ContributionResolveException = ContributionResolveException occured due to :\n-InvalidWSDLInterfaceAttr = Invalid WSDL interface attribute: {0}\n\\ No newline at end of file\n+InvalidWSDLInterfaceAttr = Invalid WSDL interface attribute: {0}\n+WsdlInterfaceDoesNotMatch = The #wsdl.interface({0}) specified does not match with WSDL Definitions\n\\ No newline at end of file", "filename": "modules/interface-wsdl-xml/src/main/resources/interface-wsdlxml-validation-messages.properties"}], "repo": "tuscany-sca-2.x"}]
[{"commit": "https://github.com/apache/tuscany-sca-2.x/commit/f57cb751969c30490ccaf071d081703d8f5fadca", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/a5c04b6e633f186eb1a2a9c3bf9bb8706dc85e99", "message": "Added null check to avoid NPE when ContentType on the Request is null (FindBugs reported issue)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@658242 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_101", "file": [{"additions": 2, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/f57cb751969c30490ccaf071d081703d8f5fadca/modules/binding-feed/src/main/java/org/apache/tuscany/sca/binding/feed/provider/FeedBindingListenerServlet.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/f57cb751969c30490ccaf071d081703d8f5fadca/modules/binding-feed/src/main/java/org/apache/tuscany/sca/binding/feed/provider/FeedBindingListenerServlet.java", "sha": "7268d14a22b60c951c7a3bc12b53be638831228e", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-feed/src/main/java/org/apache/tuscany/sca/binding/feed/provider/FeedBindingListenerServlet.java?ref=f57cb751969c30490ccaf071d081703d8f5fadca", "patch": "@@ -513,7 +513,7 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \n             // Create a new Atom entry\n             String contentType = request.getContentType();\n-            if (contentType.startsWith(\"application/atom+xml\")) {\n+            if (contentType != null && contentType.startsWith(\"application/atom+xml\")) {\n \n                 // Read the entry from the request\n                 Entry feedEntry;\n@@ -623,7 +623,7 @@ protected void doPut(HttpServletRequest request, HttpServletResponse response) t\n \n             // Update an Atom entry\n             String contentType = request.getContentType();\n-            if (contentType.startsWith(\"application/atom+xml\")) {\n+            if (contentType != null && contentType.startsWith(\"application/atom+xml\")) {\n \n                 // Read the entry from the request\n                 Entry feedEntry;", "filename": "modules/binding-feed/src/main/java/org/apache/tuscany/sca/binding/feed/provider/FeedBindingListenerServlet.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/a5c04b6e633f186eb1a2a9c3bf9bb8706dc85e99", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/d279348e1ee81d39ca17c58a9da3e90dcc7bdd8c", "message": "Added null check to avoid NPE when ContentType on the Request is null (FindBugs reported issue)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@658239 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_102", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/a5c04b6e633f186eb1a2a9c3bf9bb8706dc85e99/modules/binding-atom-abdera/src/main/java/org/apache/tuscany/sca/binding/atom/provider/AtomBindingListenerServlet.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/a5c04b6e633f186eb1a2a9c3bf9bb8706dc85e99/modules/binding-atom-abdera/src/main/java/org/apache/tuscany/sca/binding/atom/provider/AtomBindingListenerServlet.java", "sha": "54f3cbfa3934b69933ffc2112b6ba77c5a442035", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-atom-abdera/src/main/java/org/apache/tuscany/sca/binding/atom/provider/AtomBindingListenerServlet.java?ref=a5c04b6e633f186eb1a2a9c3bf9bb8706dc85e99", "patch": "@@ -435,7 +435,7 @@ protected void doPut(HttpServletRequest request, HttpServletResponse response) t\n \n             // Update an Atom entry\n             String contentType = request.getContentType();\n-            if (contentType.startsWith(\"application/atom+xml\")) {\n+            if (contentType != null && contentType.startsWith(\"application/atom+xml\")) {\n \n                 // Read the entry from the request\n                 org.apache.abdera.model.Entry feedEntry;", "filename": "modules/binding-atom-abdera/src/main/java/org/apache/tuscany/sca/binding/atom/provider/AtomBindingListenerServlet.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/d279348e1ee81d39ca17c58a9da3e90dcc7bdd8c", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/c35adfbfe9de9811d469abf80044503fcc005f53", "message": "Added null check to avoid NPE when ContentType on the Request is null (FindBugs reported issue)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@658237 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_103", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/d279348e1ee81d39ca17c58a9da3e90dcc7bdd8c/modules/binding-atom-abdera/src/main/java/org/apache/tuscany/sca/binding/atom/provider/AtomBindingListenerServlet.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/d279348e1ee81d39ca17c58a9da3e90dcc7bdd8c/modules/binding-atom-abdera/src/main/java/org/apache/tuscany/sca/binding/atom/provider/AtomBindingListenerServlet.java", "sha": "98fa2e5338b6b52da3d7e61d5adf46b3afbf72e0", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-atom-abdera/src/main/java/org/apache/tuscany/sca/binding/atom/provider/AtomBindingListenerServlet.java?ref=d279348e1ee81d39ca17c58a9da3e90dcc7bdd8c", "patch": "@@ -329,7 +329,7 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \n             // Create a new Atom entry\n             String contentType = request.getContentType();\n-            if (contentType.startsWith(\"application/atom+xml\")) {\n+            if (contentType != null && contentType.startsWith(\"application/atom+xml\")) {\n \n                 // Read the entry from the request\n                 org.apache.abdera.model.Entry feedEntry;", "filename": "modules/binding-atom-abdera/src/main/java/org/apache/tuscany/sca/binding/atom/provider/AtomBindingListenerServlet.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/2c1f28152fb696a4553ee497d5dd6a937901e810", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/21e3b17248191bf1128534af7f144ed30241dcf5", "message": "Checking if policedBinding has a null type before checking if it is unresolved to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@655687 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_104", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/2c1f28152fb696a4553ee497d5dd6a937901e810/modules/assembly-xml/src/main/java/org/apache/tuscany/sca/assembly/xml/BaseAssemblyProcessor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/2c1f28152fb696a4553ee497d5dd6a937901e810/modules/assembly-xml/src/main/java/org/apache/tuscany/sca/assembly/xml/BaseAssemblyProcessor.java", "sha": "c559cc63e875784a03461d8adecc3a31ccb8fc2c", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/assembly-xml/src/main/java/org/apache/tuscany/sca/assembly/xml/BaseAssemblyProcessor.java?ref=2c1f28152fb696a4553ee497d5dd6a937901e810", "patch": "@@ -383,7 +383,7 @@ protected Implementation resolveImplementation(Implementation implementation, Mo\n                     if (binding instanceof IntentAttachPoint) {\n                         IntentAttachPoint policiedBinding = (IntentAttachPoint)binding;\n                         \n-                        if ( policiedBinding.getType().isUnresolved() ) {\n+                        if ( policiedBinding.getType() != null && policiedBinding.getType().isUnresolved() ) {\n                             IntentAttachPointType resolved = \n                                 resolver.resolveModel(IntentAttachPointType.class, \n                                                       policiedBinding.getType());", "filename": "modules/assembly-xml/src/main/java/org/apache/tuscany/sca/assembly/xml/BaseAssemblyProcessor.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/1a96dba267a94b907e520cc6cc9369eaec9bb5a9", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/dd1aa9eaa8c19c4869f3345205fd692140278e59", "message": "Check for null to fix an NPE with composite services that do not promote a component service.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@655642 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_105", "file": [{"additions": 21, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/1a96dba267a94b907e520cc6cc9369eaec9bb5a9/modules/assembly-xml/src/main/java/org/apache/tuscany/sca/assembly/xml/CompositeProcessor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/1a96dba267a94b907e520cc6cc9369eaec9bb5a9/modules/assembly-xml/src/main/java/org/apache/tuscany/sca/assembly/xml/CompositeProcessor.java", "sha": "2f18f44f09584173c5d3e96641aece6afdc98ac9", "changes": 40, "status": "modified", "deletions": 19, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/assembly-xml/src/main/java/org/apache/tuscany/sca/assembly/xml/CompositeProcessor.java?ref=1a96dba267a94b907e520cc6cc9369eaec9bb5a9", "patch": "@@ -199,27 +199,29 @@ public Composite read(XMLStreamReader reader) throws ContributionReadException,\n                             compositeService.setName(getString(reader, NAME));\n \n                             String promoted = getString(reader, PROMOTE);\n-                            String promotedComponentName;\n-                            String promotedServiceName;\n-                            int s = promoted.indexOf('/');\n-                            if (s == -1) {\n-                                promotedComponentName = promoted;\n-                                promotedServiceName = null;\n-                            } else {\n-                                promotedComponentName = promoted.substring(0, s);\n-                                promotedServiceName = promoted.substring(s + 1);\n+                            if (promoted != null) {\n+                                String promotedComponentName;\n+                                String promotedServiceName;\n+                                int s = promoted.indexOf('/');\n+                                if (s == -1) {\n+                                    promotedComponentName = promoted;\n+                                    promotedServiceName = null;\n+                                } else {\n+                                    promotedComponentName = promoted.substring(0, s);\n+                                    promotedServiceName = promoted.substring(s + 1);\n+                                }\n+    \n+                                Component promotedComponent = assemblyFactory.createComponent();\n+                                promotedComponent.setUnresolved(true);\n+                                promotedComponent.setName(promotedComponentName);\n+                                compositeService.setPromotedComponent(promotedComponent);\n+    \n+                                ComponentService promotedService = assemblyFactory.createComponentService();\n+                                promotedService.setUnresolved(true);\n+                                promotedService.setName(promotedServiceName);\n+                                compositeService.setPromotedService(promotedService);\n                             }\n \n-                            Component promotedComponent = assemblyFactory.createComponent();\n-                            promotedComponent.setUnresolved(true);\n-                            promotedComponent.setName(promotedComponentName);\n-                            compositeService.setPromotedComponent(promotedComponent);\n-\n-                            ComponentService promotedService = assemblyFactory.createComponentService();\n-                            promotedService.setUnresolved(true);\n-                            promotedService.setName(promotedServiceName);\n-                            compositeService.setPromotedService(promotedService);\n-\n                             composite.getServices().add(compositeService);\n                             policyProcessor.readPolicies(contract, reader);\n                         }", "filename": "modules/assembly-xml/src/main/java/org/apache/tuscany/sca/assembly/xml/CompositeProcessor.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/1acec03b89168462bff29d773a56744cb3e99800", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/a1d4284911f4822335ebe120178f70efd849e66e", "message": "Check the null for implementation policy provider to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@635666 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_106", "file": [{"additions": 5, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/1acec03b89168462bff29d773a56744cb3e99800/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/CompositeActivatorImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/1acec03b89168462bff29d773a56744cb3e99800/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/CompositeActivatorImpl.java", "sha": "5c73a156991b394df28da450a37001ddd493b538", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/CompositeActivatorImpl.java?ref=1acec03b89168462bff29d773a56744cb3e99800", "patch": "@@ -397,8 +397,11 @@ private void addImplementationProvider(RuntimeComponent component, Implementatio\n             throw new IllegalStateException(\"Provider factory not found for class: \" + implementation.getClass()\n                 .getName());\n         }\n-        for(PolicyProviderFactory f: providerFactories.getPolicyProviderFactories()){\n-            component.addPolicyProvider(f.createImplementationPolicyProvider(component, implementation));\n+        for (PolicyProviderFactory f : providerFactories.getPolicyProviderFactories()) {\n+            PolicyProvider policyProvider = f.createImplementationPolicyProvider(component, implementation);\n+            if (policyProvider != null) {\n+                component.addPolicyProvider(policyProvider);\n+            }\n         }\n         \n     }", "filename": "modules/core/src/main/java/org/apache/tuscany/sca/core/assembly/CompositeActivatorImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/a35c31146f2b40846eef33c0101679a04effbe6c", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/c8f19f8cebf8527a4b79829ae7f6d78bd3f69ce1", "message": "give more help than NPE when a connection factory isn't found\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@629793 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_107", "file": [{"additions": 5, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/a35c31146f2b40846eef33c0101679a04effbe6c/modules/binding-jms/src/main/java/org/apache/tuscany/sca/binding/jms/provider/JMSResourceFactory.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/a35c31146f2b40846eef33c0101679a04effbe6c/modules/binding-jms/src/main/java/org/apache/tuscany/sca/binding/jms/provider/JMSResourceFactory.java", "sha": "5b68b4900fa96411486256c70473d1e5c5890afe", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-jms/src/main/java/org/apache/tuscany/sca/binding/jms/provider/JMSResourceFactory.java?ref=a35c31146f2b40846eef33c0101679a04effbe6c", "patch": "@@ -29,6 +29,8 @@\n import javax.naming.InitialContext;\n import javax.naming.NamingException;\n \n+import org.apache.tuscany.sca.binding.jms.impl.JMSBindingException;\n+\n /**\n  * Abstracts away any JMS provide specific feature from the JMS binding\n  */\n@@ -102,6 +104,9 @@ public void closeConnection() throws JMSException {\n \n     private void createConnection() throws NamingException, JMSException {\n         ConnectionFactory connectionFactory = (ConnectionFactory)jndiLookUp(connectionFactoryName);\n+        if (connectionFactory == null) {\n+            throw new JMSBindingException(\"connection factory not found: \" + connectionFactoryName);\n+        }\n         connection = connectionFactory.createConnection();\n     }\n ", "filename": "modules/binding-jms/src/main/java/org/apache/tuscany/sca/binding/jms/provider/JMSResourceFactory.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/64a35d31448701f94ea246de5485294d59cff275", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/48e2ef9fc81a69a88ac28be77665b75647ad441a", "message": "Use a dummy service name to avoid NPE in the build\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@627796 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_108", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/64a35d31448701f94ea246de5485294d59cff275/modules/host-rmi/src/test/java/org/apache/tuscany/sca/host/rmi/RMIHostImplTestCase.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/64a35d31448701f94ea246de5485294d59cff275/modules/host-rmi/src/test/java/org/apache/tuscany/sca/host/rmi/RMIHostImplTestCase.java", "sha": "c64cb5ee7a516df0455bf1285ed0dbfd1cdc5461", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/host-rmi/src/test/java/org/apache/tuscany/sca/host/rmi/RMIHostImplTestCase.java?ref=64a35d31448701f94ea246de5485294d59cff275", "patch": "@@ -31,7 +31,7 @@ public void testInit() {\n \r\n     public void testFindServiceBadHost() throws RMIHostRuntimeException, RMIHostException {\r\n         try {\r\n-            new DefaultRMIHost().findService(null, \"0\", null);\r\n+            new DefaultRMIHost().findService(null, \"9994\", \"$BAD$\");\r\n             fail();\r\n         } catch (RMIHostRuntimeException e) {\r\n             // expected\r", "filename": "modules/host-rmi/src/test/java/org/apache/tuscany/sca/host/rmi/RMIHostImplTestCase.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/847ccd803eda4e5c46326c80a68b3c2886ec48ce", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/f4ffcbfbdd40b16a6d7204ca8cd5f1cccca0e2d9", "message": "Fix for TUSCANY-1722, NPE in JSON webapp samples. Initialize default URI of bindings on top level composite services.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@576352 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_109", "file": [{"additions": 5, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/847ccd803eda4e5c46326c80a68b3c2886ec48ce/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/CompositeConfigurationBuilderImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/847ccd803eda4e5c46326c80a68b3c2886ec48ce/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/CompositeConfigurationBuilderImpl.java", "sha": "111424d6852eac2ac36c0d28c5ba8f25d037f495", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/CompositeConfigurationBuilderImpl.java?ref=847ccd803eda4e5c46326c80a68b3c2886ec48ce", "patch": "@@ -133,7 +133,11 @@ private void configureComponents(Composite composite, String uri) {\n                     } else {\n                         // If there's only one service then binding URI defaults\n                         // to the parent URI\n-                        bindingURI = parentURI;\n+                        if (parentURI != null) {\n+                            bindingURI = parentURI;\n+                        } else {\n+                            bindingURI = String.valueOf(binding.getName());\n+                        }\n                     }\n                 } else {\n                     // Combine the specified binding URI with the component URI", "filename": "modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/CompositeConfigurationBuilderImpl.java"}, {"additions": 5, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/847ccd803eda4e5c46326c80a68b3c2886ec48ce/modules/binding-ws-axis2/src/main/java/org/apache/tuscany/sca/binding/ws/axis2/Axis2ServiceProvider.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/847ccd803eda4e5c46326c80a68b3c2886ec48ce/modules/binding-ws-axis2/src/main/java/org/apache/tuscany/sca/binding/ws/axis2/Axis2ServiceProvider.java", "sha": "b8a8612a6c3ca95373876c725a3c44a13f791451", "changes": 8, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-ws-axis2/src/main/java/org/apache/tuscany/sca/binding/ws/axis2/Axis2ServiceProvider.java?ref=847ccd803eda4e5c46326c80a68b3c2886ec48ce", "patch": "@@ -214,9 +214,11 @@ protected URI computeActualURI(String baseURI, RuntimeComponent component, Abstr\n \n         // if the wsa:EndpointReference has an address element with an absolute URI use that\n         if (eprURI != null && eprURI.isAbsolute()) {\n-            if (wsBinding.getURI() != null) {\n-                throw new IllegalArgumentException(\"Cannot specify binding URI when wsa:EndpointReference has aboslute address URI\");\n-            }\n+            //FIXME Throwing an exception breaks as wsBinding.getURI() will return the default URI\n+            // derived from the service name or the URI actually configured in the .composite\n+//            if (wsBinding.getURI() != null) {\n+//                throw new IllegalArgumentException(\"Cannot specify binding URI when wsa:EndpointReference has aboslute address URI\");\n+//            }\n             return URI.create(eprURI.toString());\n         }\n         ", "filename": "modules/binding-ws-axis2/src/main/java/org/apache/tuscany/sca/binding/ws/axis2/Axis2ServiceProvider.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/f23debccb6d6b29ca3c2e05c5e31ce4c3024a9d7", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/d930a54bc8b2e29a2a8cb3de2ff92b50fb829b5e", "message": "Report service not found error with a ServiceRuntimeException except of an NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@535709 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_110", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/f23debccb6d6b29ca3c2e05c5e31ce4c3024a9d7/modules/host-embedded/src/main/java/org/apache/tuscany/host/embedded/impl/DefaultSCADomain.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/f23debccb6d6b29ca3c2e05c5e31ce4c3024a9d7/modules/host-embedded/src/main/java/org/apache/tuscany/host/embedded/impl/DefaultSCADomain.java", "sha": "051c18db45a3cd377c1484acec7d7d715d843518", "changes": 4, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/host-embedded/src/main/java/org/apache/tuscany/host/embedded/impl/DefaultSCADomain.java?ref=f23debccb6d6b29ca3c2e05c5e31ce4c3024a9d7", "patch": "@@ -282,9 +282,7 @@ private URL getContributionLocation(String contributionPath, String[] composites\n                 }\n             }\n             if (componentContext == null) {\n-                if (component == null) {\n-                    throw new ServiceRuntimeException(\"Composite service not found: \" + name);\n-                }\n+                throw new ServiceRuntimeException(\"Composite service not found: \" + name);\n             }\n         } else {\n             componentContext = (ComponentContext)component;", "filename": "modules/host-embedded/src/main/java/org/apache/tuscany/host/embedded/impl/DefaultSCADomain.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/62cb337f0a867d67f7a0bfc2987dd67cada56735", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/2f2040fe12acd654bafb95c34c8e2fbea04a0a91", "message": "log exception from failure\nalso prevents an NPE from Surefire's AbstractReporter\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@506788 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_111", "file": [{"additions": 7, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/62cb337f0a867d67f7a0bfc2987dd67cada56735/runtime/itest/plugin/src/main/java/org/apache/tuscany/sca/plugin/itest/SCATestSet.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/62cb337f0a867d67f7a0bfc2987dd67cada56735/runtime/itest/plugin/src/main/java/org/apache/tuscany/sca/plugin/itest/SCATestSet.java", "sha": "afa07823302e7a57b864e80c01152b90e581d00c", "changes": 10, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/runtime/itest/plugin/src/main/java/org/apache/tuscany/sca/plugin/itest/SCATestSet.java?ref=62cb337f0a867d67f7a0bfc2987dd67cada56735", "patch": "@@ -25,6 +25,8 @@\n import org.apache.maven.surefire.testset.TestSetFailedException;\n import org.apache.maven.surefire.report.ReporterManager;\n import org.apache.maven.surefire.report.ReportEntry;\n+import org.apache.maven.surefire.report.StackTraceWriter;\n+import org.apache.maven.surefire.report.PojoStackTraceWriter;\n \n import org.apache.tuscany.spi.model.Operation;\n \n@@ -46,12 +48,14 @@ public SCATestSet(MavenEmbeddedRuntime runtime, String name, URI uri, Collection\n \n     public void execute(ReporterManager reporterManager, ClassLoader classLoader) throws TestSetFailedException {\n         for (Operation<?> operation : operations) {\n-            reporterManager.testStarting(new ReportEntry(this, operation.getName(), getName()));\n+            String operationName = operation.getName();\n+            reporterManager.testStarting(new ReportEntry(this, operationName, name));\n             try {\n                 runtime.executeTest(uri, operation);\n-                reporterManager.testSucceeded(new ReportEntry(this, operation.getName(), getName()));\n+                reporterManager.testSucceeded(new ReportEntry(this, operationName, name));\n             } catch (Exception e) {\n-                reporterManager.testFailed(new ReportEntry(this, operation.getName(), getName()));\n+                StackTraceWriter stw = new PojoStackTraceWriter(name, operationName, e);\n+                reporterManager.testFailed(new ReportEntry(this, operationName, name, stw));\n                 throw new TestSetFailedException(e);\n             }\n         }", "filename": "runtime/itest/plugin/src/main/java/org/apache/tuscany/sca/plugin/itest/SCATestSet.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/2d5491af5c2e7cd7e2a36a0530cf77d74326b229", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/9e665bc7646c6c2a5e5e76364ce67383e67eff2b", "message": "TUSCANY-700, fix NPE if session destroyed before runtime is created\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@494020 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_112", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/2d5491af5c2e7cd7e2a36a0530cf77d74326b229/runtime/webapp/webapp-api/src/main/java/org/apache/tuscany/runtime/webapp/TuscanySessionListener.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/2d5491af5c2e7cd7e2a36a0530cf77d74326b229/runtime/webapp/webapp-api/src/main/java/org/apache/tuscany/runtime/webapp/TuscanySessionListener.java", "sha": "0335c7bc6af04d86bdd4784e0b8f79cc029a0c46", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/runtime/webapp/webapp-api/src/main/java/org/apache/tuscany/runtime/webapp/TuscanySessionListener.java?ref=2d5491af5c2e7cd7e2a36a0530cf77d74326b229", "patch": "@@ -46,7 +46,8 @@ public void sessionCreated(HttpSessionEvent event) {\n     }\n \n     public void sessionDestroyed(HttpSessionEvent event) {\n-        runtime.sessionDestroyed(event);\n-\n+        if (runtime != null) {\n+            runtime.sessionDestroyed(event);\n+        }\n     }\n }", "filename": "runtime/webapp/webapp-api/src/main/java/org/apache/tuscany/runtime/webapp/TuscanySessionListener.java"}, {"additions": 5, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/2d5491af5c2e7cd7e2a36a0530cf77d74326b229/runtime/webapp/webapp-api/src/test/java/org/apache/tuscany/runtime/webapp/TuscanySessionListenerTestCase.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/2d5491af5c2e7cd7e2a36a0530cf77d74326b229/runtime/webapp/webapp-api/src/test/java/org/apache/tuscany/runtime/webapp/TuscanySessionListenerTestCase.java", "sha": "156ff35b68658cb182dfabdc3f746eccc34d7077", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/runtime/webapp/webapp-api/src/test/java/org/apache/tuscany/runtime/webapp/TuscanySessionListenerTestCase.java?ref=2d5491af5c2e7cd7e2a36a0530cf77d74326b229", "patch": "@@ -52,4 +52,9 @@ public void testRuntimeNotConfigured() throws Exception {\n         listener.sessionCreated(event);\n         EasyMock.verify(context);\n     }\n+\n+    public void testSessionDestroyedBeforeCreated() throws Exception {\n+        TuscanySessionListener listener = new TuscanySessionListener();\n+        listener.sessionDestroyed(null);\n+    }\n }", "filename": "runtime/webapp/webapp-api/src/test/java/org/apache/tuscany/runtime/webapp/TuscanySessionListenerTestCase.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/911ca6e9359b0d0017ca8d2f1c2d5c631fbab2f2", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/204d21225259da1c63ca4bed3868fbfc6fec3e8e", "message": "need to give better error info than NPE for bad wsdl location\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@433593 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_113", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/911ca6e9359b0d0017ca8d2f1c2d5c631fbab2f2/databinding/databinding-sdo/src/main/java/org/apache/tuscany/databinding/sdo/ImportSDOLoader.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/911ca6e9359b0d0017ca8d2f1c2d5c631fbab2f2/databinding/databinding-sdo/src/main/java/org/apache/tuscany/databinding/sdo/ImportSDOLoader.java", "sha": "f7767c91a23bbbe4c7fa1da11fd6768bbeafbcf1", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/databinding/databinding-sdo/src/main/java/org/apache/tuscany/databinding/sdo/ImportSDOLoader.java?ref=911ca6e9359b0d0017ca8d2f1c2d5c631fbab2f2", "patch": "@@ -109,6 +109,9 @@ private void importWSDL(XMLStreamReader reader, DeploymentContext deploymentCont\n                     wsdlURL = uri.toURL();\n                 }\n                 wsdlURL = deploymentContext.getClassLoader().getResource(location);\n+                if(null == wsdlURL){\n+                    throw new LoaderException(\"WSDL location error '\" +location+\"'\");\n+                }\n                 InputStream xsdInputStream = wsdlURL.openStream();\n                 try {\n                     XSDHelper xsdHelper = SDOUtil.createXSDHelper(typeHelper);", "filename": "databinding/databinding-sdo/src/main/java/org/apache/tuscany/databinding/sdo/ImportSDOLoader.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/90811ab848c77f6837c00f70d99e561fb885ded2", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/2bd394fad1e2d3349e2d4cef4fcd78d88c51f7fd", "message": "Fixed the NPE instroduced by r432913 by adding the ComponentBindlessBuilder to the composite.scdl\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@433258 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_114", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/90811ab848c77f6837c00f70d99e561fb885ded2/commands/launcher/src/main/resources/META-INF/tuscany/composite.scdl", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/90811ab848c77f6837c00f70d99e561fb885ded2/commands/launcher/src/main/resources/META-INF/tuscany/composite.scdl", "sha": "f84f58954881f2990e65ebf1904720779cb0e2ce", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/commands/launcher/src/main/resources/META-INF/tuscany/composite.scdl?ref=90811ab848c77f6837c00f70d99e561fb885ded2", "patch": "@@ -39,4 +39,7 @@\n     <component name=\"composite.builder\">\n         <system:implementation.system class=\"org.apache.tuscany.core.implementation.composite.CompositeBuilder\"/>\n     </component>\n+    <component name=\"composite.bindlessbuilder\">\n+        <system:implementation.system class=\"org.apache.tuscany.core.implementation.composite.CompositeBindlessBuilder\"/>\n+    </component>\n </composite>", "filename": "commands/launcher/src/main/resources/META-INF/tuscany/composite.scdl"}, {"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/90811ab848c77f6837c00f70d99e561fb885ded2/runtime/webapp-host/src/main/resources/META-INF/sca/composite.scdl", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/90811ab848c77f6837c00f70d99e561fb885ded2/runtime/webapp-host/src/main/resources/META-INF/sca/composite.scdl", "sha": "b4cee97b4018f3dd4b34a622b3d7419d4c47209f", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/runtime/webapp-host/src/main/resources/META-INF/sca/composite.scdl?ref=90811ab848c77f6837c00f70d99e561fb885ded2", "patch": "@@ -39,4 +39,7 @@\n     <component name=\"composite.builder\">\n         <system:implementation.system class=\"org.apache.tuscany.core.implementation.composite.CompositeBuilder\"/>\n     </component>\n+    <component name=\"composite.bindlessbuilder\">\n+        <system:implementation.system class=\"org.apache.tuscany.core.implementation.composite.CompositeBindlessBuilder\"/>\n+    </component>\n </composite>", "filename": "runtime/webapp-host/src/main/resources/META-INF/sca/composite.scdl"}, {"additions": 4, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/90811ab848c77f6837c00f70d99e561fb885ded2/test/src/main/resources/META-INF/tuscany/composite.scdl", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/90811ab848c77f6837c00f70d99e561fb885ded2/test/src/main/resources/META-INF/tuscany/composite.scdl", "sha": "8a9dec18cd34a81fe73853a25d71c4fe0a005359", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/test/src/main/resources/META-INF/tuscany/composite.scdl?ref=90811ab848c77f6837c00f70d99e561fb885ded2", "patch": "@@ -39,4 +39,8 @@\n     <component name=\"composite.builder\">\n         <system:implementation.system class=\"org.apache.tuscany.core.implementation.composite.CompositeBuilder\"/>\n     </component>\n+    <component name=\"composite.bindlessbuilder\">\n+        <system:implementation.system class=\"org.apache.tuscany.core.implementation.composite.CompositeBindlessBuilder\"/>\n+    </component>\n+    \n </composite>", "filename": "test/src/main/resources/META-INF/tuscany/composite.scdl"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/3a4ba8ecd78f33f753e576681590dc921db5c71c", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/26982e37a5e63acf1b08e7dc285395af4f72d957", "message": "Fix for wrong wsdl location.\nThrow a better exception than NPE if wsdl is not found.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@431878 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_115", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/3a4ba8ecd78f33f753e576681590dc921db5c71c/bindings/binding.axis2/src/main/java/org/apache/tuscany/binding/axis2/WebServiceBindingLoader.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/3a4ba8ecd78f33f753e576681590dc921db5c71c/bindings/binding.axis2/src/main/java/org/apache/tuscany/binding/axis2/WebServiceBindingLoader.java", "sha": "150972883860bdb37ef97bad7318ad003c53d9c9", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/bindings/binding.axis2/src/main/java/org/apache/tuscany/binding/axis2/WebServiceBindingLoader.java?ref=3a4ba8ecd78f33f753e576681590dc921db5c71c", "patch": "@@ -116,6 +116,7 @@ private WebServiceBinding createBinding(String port, String portURI, DeploymentC\n             // FIXME need to find out how to get wsdl and what context to use --- terrible hack attack!\n             // URL wsdlurl = Thread.currentThread().getContextClassLoader().getResource(wsdlLocation);\n             URL wsdlurl = deploymentContext.getClassLoader().getResource(wsdlLocation);\n+            if(wsdlurl == null) throw new RuntimeException(\"Failed to load wsdl from '\" + wsdlLocation +\"'\" );\n             \n             WSDLFactory factory = WSDLFactory.newInstance();\n             WSDLReader reader = factory.newWSDLReader();", "filename": "bindings/binding.axis2/src/main/java/org/apache/tuscany/binding/axis2/WebServiceBindingLoader.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/ea3bf0bb8286b98acf71fb4e2b280a1ce2aa6d10", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/2aae20e1c0041c43822b1c4b571cb5759a8d8a1c", "message": "Give a little better message than NPE when a type is not found in the registered SDO types.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@398921 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_116", "file": [{"additions": 4, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/ea3bf0bb8286b98acf71fb4e2b280a1ce2aa6d10/bindings/binding.axis2/src/main/java/org/apache/tuscany/binding/axis2/util/AxiomHelper.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/ea3bf0bb8286b98acf71fb4e2b280a1ce2aa6d10/bindings/binding.axis2/src/main/java/org/apache/tuscany/binding/axis2/util/AxiomHelper.java", "sha": "5da21349c2181e11451d0777407636dc2208319a", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/bindings/binding.axis2/src/main/java/org/apache/tuscany/binding/axis2/util/AxiomHelper.java?ref=ea3bf0bb8286b98acf71fb4e2b280a1ce2aa6d10", "patch": "@@ -27,6 +27,7 @@\n import javax.xml.stream.XMLStreamException;\n import javax.xml.stream.XMLStreamReader;\n \n+import org.apache.tuscany.core.wire.InvocationRuntimeException;\n import org.apache.tuscany.sdo.helper.DataFactoryImpl;\n import org.apache.tuscany.sdo.helper.XMLHelperImpl;\n import org.apache.tuscany.sdo.helper.XSDHelperImpl;\n@@ -176,6 +177,9 @@ public static DataObject toDataObject(TypeHelper typeHelper, OMElement omElement\n     public static DataObject toDataObject(TypeHelper typeHelper, Object[] os, QName typeQN) {\n         XSDHelper xsdHelper = new XSDHelperImpl(typeHelper);\n         Property property = xsdHelper.getGlobalProperty(typeQN.getNamespaceURI(), typeQN.getLocalPart(), true);\n+        if(null == property){\n+            throw new InvocationRuntimeException(\"Type '\" + typeQN.toString() + \"' not found in registered SDO types.\" );\n+        }\n         DataObject dataObject = new DataFactoryImpl(typeHelper).create(property.getType());\n         List ips = dataObject.getInstanceProperties();\n         for (int i = 0; i < ips.size(); i++) {", "filename": "bindings/binding.axis2/src/main/java/org/apache/tuscany/binding/axis2/util/AxiomHelper.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/168b6aa57634aa5c99b0c6d49545008ce2fdeb6b", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/9a80c9308753d552d98c95ad77556cbdb04179f6", "message": "report missing implementation as a error rather than a NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@381503 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_117", "file": [{"additions": 9, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/168b6aa57634aa5c99b0c6d49545008ce2fdeb6b/core/src/main/java/org/apache/tuscany/core/context/impl/AbstractAggregateContext.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/168b6aa57634aa5c99b0c6d49545008ce2fdeb6b/core/src/main/java/org/apache/tuscany/core/context/impl/AbstractAggregateContext.java", "sha": "b7f319a10380d6da6136f8109f0a259e833ad3a7", "changes": 11, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/core/src/main/java/org/apache/tuscany/core/context/impl/AbstractAggregateContext.java?ref=168b6aa57634aa5c99b0c6d49545008ce2fdeb6b", "patch": "@@ -53,6 +53,7 @@\n import org.apache.tuscany.model.assembly.ExternalService;\n import org.apache.tuscany.model.assembly.Module;\n import org.apache.tuscany.model.assembly.Scope;\n+import org.apache.tuscany.model.assembly.ComponentImplementation;\n import org.apache.tuscany.model.assembly.impl.AssemblyFactoryImpl;\n \n /**\n@@ -288,8 +289,14 @@ public void registerModelObject(Extensible model) throws ConfigurationException\n             Module newModule = (Module) model;\n             module = newModule;\n             for (Component component : newModule.getComponents()) {\n-                configuration = (RuntimeConfiguration<InstanceContext>) component.getComponentImplementation()\n-                        .getRuntimeConfiguration();\n+                ComponentImplementation componentImplementation = component.getComponentImplementation();\n+                if (componentImplementation == null) {\n+                    ConfigurationException e = new ConfigurationException(\"Component implementation not set\");\n+                    e.addContextName(component.getName());\n+                    e.addContextName(getName());\n+                    throw e;\n+                }\n+                configuration = (RuntimeConfiguration<InstanceContext>) componentImplementation .getRuntimeConfiguration();\n                 if (configuration == null) {\n                     ConfigurationException e = new ConfigurationException(\"Runtime configuration not set\");\n                     e.addContextName(component.getName());", "filename": "core/src/main/java/org/apache/tuscany/core/context/impl/AbstractAggregateContext.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/46d5e875c89d39c3494962de898cfc56e56b68ed", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/36a05120a75316b7d2ba2522bca0eccc5fae62d4", "message": "Some defensive code to avert an NPE that's now causing ASM_8005, ASM_8017, ASM_8018 to fail. It's not clear why this code is being hit now when it wasn't previously. \n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@979597 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_118", "file": [{"additions": 2, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/46d5e875c89d39c3494962de898cfc56e56b68ed/modules/assembly/src/main/resources/org/apache/tuscany/sca/assembly/builder/assembly-validation-messages.properties", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/46d5e875c89d39c3494962de898cfc56e56b68ed/modules/assembly/src/main/resources/org/apache/tuscany/sca/assembly/builder/assembly-validation-messages.properties", "sha": "91b1721bf7f30f5f8828046012118de0fcb4a35f", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/assembly/src/main/resources/org/apache/tuscany/sca/assembly/builder/assembly-validation-messages.properties?ref=46d5e875c89d39c3494962de898cfc56e56b68ed", "patch": "@@ -81,3 +81,5 @@ PropertyValueDoesNotMatchComplexType = [ASM50038] The property {0} on component\n PropertyValueDoesNotMatchElement = [ASM50029] The property {0} on component {1} has a value which does not match the element {2} with which it is associated. Validation reported {3}\n EPRIncompatibleInterface = [BWS20007] The reference interface is incompatible with the interface of the reference binding {0}\n EPIncompatibleInterface = [BWS20007] The service interface is incompatible with the interface of the service binding {0}\n+PromotedCallbackReferenceNotFound = For component {0} and service {1} the promoted component {2} does not have a callback reference called {3} which should have been created automatically by Tuscany\n+PromotedCallbackServiceNotFound = For component {0} and reference {1} the promoted component {2} does not have a callback service called {3} which should have been created automatically by Tuscany", "filename": "modules/assembly/src/main/resources/org/apache/tuscany/sca/assembly/builder/assembly-validation-messages.properties"}, {"additions": 31, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/46d5e875c89d39c3494962de898cfc56e56b68ed/modules/builder/src/main/java/org/apache/tuscany/sca/builder/impl/ComponentBuilderImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/46d5e875c89d39c3494962de898cfc56e56b68ed/modules/builder/src/main/java/org/apache/tuscany/sca/builder/impl/ComponentBuilderImpl.java", "sha": "ec9683a030c748b07891ab5626aa0f2c379abceb", "changes": 38, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/builder/src/main/java/org/apache/tuscany/sca/builder/impl/ComponentBuilderImpl.java?ref=46d5e875c89d39c3494962de898cfc56e56b68ed", "patch": "@@ -270,7 +270,7 @@ private void configureServices(Component component, BuilderContext context) {\n             calculateBindings(component, componentService, componentTypeService, context);\n \n             // add callback reference model objects\n-            createCallbackReference(component, componentService);\n+            createCallbackReference(component, componentService, monitor);\n         }\n     }\n \n@@ -312,7 +312,7 @@ private void configureReferences(Component component, BuilderContext context) {\n             calculateBindings(componentReference, componentTypeReference);\n \n             // add callback service model objects\n-            createCallbackService(component, componentReference);\n+            createCallbackService(component, componentReference, monitor);\n \n             // Propagate autowire setting from the component down the structural \n             // hierarchy\n@@ -1156,12 +1156,12 @@ private Document evaluateXPath2(Document node,\n      * @param component\n      * @param service\n      */\n-    private void createCallbackReference(Component component, ComponentService service) {\n+    private void createCallbackReference(Component component, ComponentService service, Monitor monitor) {\n \n         // if the service has a callback interface create a reference\n         // to represent the callback \n         if (service.getInterfaceContract() != null && // can be null in unit tests\n-        service.getInterfaceContract().getCallbackInterface() != null) {\n+            service.getInterfaceContract().getCallbackInterface() != null) {\n \n             ComponentReference callbackReference = assemblyFactory.createComponentReference();\n             callbackReference.setForCallback(true);\n@@ -1197,7 +1197,19 @@ private void createCallbackReference(Component component, ComponentService servi\n                     if (((CompositeService)implService).getPromotedService().isUnresolved() == false){\n                         String referenceName = ((CompositeService)implService).getPromotedService().getName();\n                         ComponentReference promotedReference = ((CompositeService)implService).getPromotedComponent().getReference(referenceName);\n-                        implCompReference.getPromotedReferences().add(promotedReference);\n+                        \n+                        if (promotedReference != null){\n+                            implCompReference.getPromotedReferences().add(promotedReference);\n+                        } else {\n+                            Monitor.error(monitor,\n+                                          this,\n+                                          Messages.ASSEMBLY_VALIDATION,\n+                                          \"PromotedCallbackReferenceNotFound\",\n+                                          component.getName(),\n+                                          service.getName(),\n+                                          ((CompositeService)implService).getPromotedComponent().getName(),\n+                                          referenceName);\n+                        }\n                     }                 \n                     implReference = implCompReference;\n                     \n@@ -1263,7 +1275,7 @@ private void createCallbackReference(Component component, ComponentService servi\n      * @param component\n      * @param service\n      */\n-    private void createCallbackService(Component component, ComponentReference reference) {\n+    private void createCallbackService(Component component, ComponentReference reference, Monitor monitor) {\n         if (reference.getInterfaceContract() != null && // can be null in unit tests\n             reference.getInterfaceContract().getCallbackInterface() != null) {\n             ComponentService callbackService = assemblyFactory.createComponentService();\n@@ -1299,7 +1311,19 @@ private void createCallbackService(Component component, ComponentReference refer\n                     if (((CompositeReference)implReference).getPromotedReferences().get(0).isUnresolved() == false){\n                         String serviceName = ((CompositeReference)implReference).getPromotedReferences().get(0).getName();\n                         ComponentService promotedService = ((CompositeReference)implReference).getPromotedComponents().get(0).getService(serviceName);\n-                        implCompService.setPromotedService(promotedService);\n+                        \n+                        if (promotedService != null){\n+                            implCompService.setPromotedService(promotedService);\n+                        } else {\n+                            Monitor.error(monitor,\n+                                          this,\n+                                          Messages.ASSEMBLY_VALIDATION,\n+                                          \"PromotedCallbackServiceNotFound\",\n+                                          component.getName(),\n+                                          reference.getName(),\n+                                          ((CompositeReference)implReference).getPromotedComponents().get(0).getName(),\n+                                          serviceName);\n+                        }\n                     }\n                     \n                     implService = implCompService;", "filename": "modules/builder/src/main/java/org/apache/tuscany/sca/builder/impl/ComponentBuilderImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/07ba95783726f65310e3e704b333e82fe7eaeb82", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/6156c16bcebacbf6d6034d80c68cf6bba93bcb9e", "message": "Better handling of case where contribution import is not satisfied, to avoid NPE when attempting to resolve artifacts against that import. Modified code in addContributionDependencies(...).\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@802046 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_119", "file": [{"additions": 7, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/07ba95783726f65310e3e704b333e82fe7eaeb82/modules/node-impl/src/main/java/org/apache/tuscany/sca/node/impl/NodeFactoryImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/07ba95783726f65310e3e704b333e82fe7eaeb82/modules/node-impl/src/main/java/org/apache/tuscany/sca/node/impl/NodeFactoryImpl.java", "sha": "ea8b00a48929a8d626c97de0f80525e717a8d60b", "changes": 13, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/node-impl/src/main/java/org/apache/tuscany/sca/node/impl/NodeFactoryImpl.java?ref=07ba95783726f65310e3e704b333e82fe7eaeb82", "patch": "@@ -248,23 +248,24 @@ private void addContributionDependencies(Contribution contribution, List<Contrib\n \n                             // Now add the dependencies of that contribution\n                             addContributionDependencies(dependency, contributions, dependencies, set, monitor);\n-                        }\n-                    }\n-                }\n-            }\n+                        } // end if\n+                    } // end if \n+                } // end for\n+            } // end for\n \n             if (resolved) {\n-\n                 // Initialize the import's model resolver with a delegating model\n                 // resolver which will delegate to the matching exports\n                 import_.setModelResolver(new DefaultImportModelResolver(matchingExports));\n \n             } else {\n                 // Record import resolution issue\n                 if (!(import_ instanceof DefaultImport)) {\n+                \t// Add the (empty) matchingExports List and report a warning\n+                \timport_.setModelResolver(new DefaultImportModelResolver(matchingExports));\n                     warning(monitor, \"UnresolvedImport\", import_, import_);\n                 }\n-            }\n+            } // end if\n         }\n     }\n ", "filename": "modules/node-impl/src/main/java/org/apache/tuscany/sca/node/impl/NodeFactoryImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/2caf8a601b53bd0d5b4f8ee3c459549c9d72d4fa", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/f2718e3d8efdcd44ac63f2af2c4ae1fda846188b", "message": "Be more defensive in check the implementation reference. Follow the pattern used for services in the same method. Fixes NPE while test ASM_8004.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@799584 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_120", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/2caf8a601b53bd0d5b4f8ee3c459549c9d72d4fa/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/CompositePolicyBuilderImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/2caf8a601b53bd0d5b4f8ee3c459549c9d72d4fa/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/CompositePolicyBuilderImpl.java", "sha": "9c7bd6b2d9804c79c252ee4654a3b1b37a212eb6", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/CompositePolicyBuilderImpl.java?ref=2caf8a601b53bd0d5b4f8ee3c459549c9d72d4fa", "patch": "@@ -351,7 +351,7 @@ protected void computePolicies(Composite composite, Definitions definitions, Mon\n             for (ComponentReference componentReference : component.getReferences()) {\n                 isMutualExclusive(componentReference, componentReference.getReference());\n \n-                if (componentReference.getInterfaceContract() != null) {\n+                if (componentReference.getInterfaceContract() != null && componentReference.getReference() != null) {\n                     isMutualExclusive(componentReference.getInterfaceContract().getInterface(), componentReference\n                         .getReference().getInterfaceContract().getInterface());\n                     isMutualExclusive(componentReference.getInterfaceContract().getCallbackInterface(),", "filename": "modules/assembly/src/main/java/org/apache/tuscany/sca/assembly/builder/impl/CompositePolicyBuilderImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/63139735a8060b8ada7a179a8d80f21b4bb5464f", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/c4eca5c561559b5516f8190e187551880491dbf3", "message": "Fix for unguarded access to compositeActivator.getDomainComposite() in stop() method of NodeImpl which causes NPE in situations where start() completes with ContributionReadException (and similar error exceptions)\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@779992 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_121", "file": [{"additions": 13, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/63139735a8060b8ada7a179a8d80f21b4bb5464f/modules/node-impl/src/main/java/org/apache/tuscany/sca/node/impl/NodeImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/63139735a8060b8ada7a179a8d80f21b4bb5464f/modules/node-impl/src/main/java/org/apache/tuscany/sca/node/impl/NodeImpl.java", "sha": "acd2d91db93d1574adbf61d09ad905035304fe49", "changes": 24, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/node-impl/src/main/java/org/apache/tuscany/sca/node/impl/NodeImpl.java?ref=63139735a8060b8ada7a179a8d80f21b4bb5464f", "patch": "@@ -103,17 +103,19 @@ public void stop() {\n                 return;\n             }\n             NodeFinder.removeNode(NodeUtil.createURI(configuration.getDomainURI()));\n-            List<Composite> composites = compositeActivator.getDomainComposite().getIncludes();\n-            for (Composite composite : composites) {\n-\n-                // Stop the composite\n-                compositeActivator.stop(composite);\n-\n-                // Deactivate the composite\n-                compositeActivator.deactivate(composite);\n-\n-            }\n-            composites.clear();\n+            if( compositeActivator.getDomainComposite() != null ) {\n+\t            List<Composite> composites = compositeActivator.getDomainComposite().getIncludes();\n+\t            for (Composite composite : composites) {\n+\t\n+\t                // Stop the composite\n+\t                compositeActivator.stop(composite);\n+\t\n+\t                // Deactivate the composite\n+\t                compositeActivator.deactivate(composite);\n+\t\n+\t            } // end for\n+\t            composites.clear();\n+            } // end if \n \n             manager.removeNode(configuration);\n             this.compositeActivator = null;", "filename": "modules/node-impl/src/main/java/org/apache/tuscany/sca/node/impl/NodeImpl.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/b5ccf3e307e4fae78a078e94b9bc30802a1ca4bc", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/20d3673fd7ea497c65a02d037bb25d9e9b21d150", "message": "Fix NPE when using jetty:run plugin with webapps, change contribution to be entire webapp instead of just web-inf/classes, change to use getrealpath instead of getContextName for the nodeURI to be compatable with Tomcat 5.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/java/sca@777830 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_122", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/b5ccf3e307e4fae78a078e94b9bc30802a1ca4bc/modules/host-webapp/src/main/java/org/apache/tuscany/sca/host/webapp/ServletHostHelper.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/b5ccf3e307e4fae78a078e94b9bc30802a1ca4bc/modules/host-webapp/src/main/java/org/apache/tuscany/sca/host/webapp/ServletHostHelper.java", "sha": "c3aaf02e3aa881c80b00501e25845c92f27bc5b1", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/host-webapp/src/main/java/org/apache/tuscany/sca/host/webapp/ServletHostHelper.java?ref=b5ccf3e307e4fae78a078e94b9bc30802a1ca4bc", "patch": "@@ -66,7 +66,7 @@ private static URL getResource(ServletContext servletContext, String location) t\n                 path = \"/\" + path;\r\n             }\r\n             URL url = servletContext.getResource(path);\r\n-            if (url.getProtocol().equals(\"jndi\")) {\r\n+            if (url != null && url.getProtocol().equals(\"jndi\")) {\r\n                 //this is Tomcat case, we should use getRealPath\r\n                 File warRootFile = new File(servletContext.getRealPath(path));\r\n                 return warRootFile.toURI().toURL();\r\n@@ -97,15 +97,15 @@ private static NodeConfiguration getNodeConfiguration(ServletContext servletCont\n             }\r\n             if (configuration.getContributions().isEmpty()) {\r\n                 // TODO: Which path should be the default root\r\n-                configuration.addContribution(getResource(servletContext, \"/WEB-INF/classes\"));\r\n+                configuration.addContribution(getResource(servletContext, \"/\"));\r\n             }\r\n             URL composite = getResource(servletContext, \"/WEB-INF/web.composite\");\r\n             if (composite != null) {\r\n                 configuration.getContributions().get(0).addDeploymentComposite(composite);\r\n             }\r\n             String nodeURI = servletContext.getInitParameter(\"node.uri\");\r\n             if (nodeURI == null) {\r\n-                nodeURI = servletContext.getContextPath();\r\n+                nodeURI = new File(servletContext.getRealPath(\"/\")).getName();\r\n             }\r\n             configuration.setURI(nodeURI);\r\n             String domainURI = servletContext.getInitParameter(\"domain.uri\");\r", "filename": "modules/host-webapp/src/main/java/org/apache/tuscany/sca/host/webapp/ServletHostHelper.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/3dd5b501bf2222372d02d8dcf1fd776075ca8b48", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/decdd6fc2da62decb8912ac8b8bc8b00a1e15a61", "message": "Add monitor dependency to pom to solve NPE. Not sure why this test is not picking this up via host-embedded. I will investigate. \n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@659022 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_123", "file": [{"additions": 7, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/3dd5b501bf2222372d02d8dcf1fd776075ca8b48/itest/contribution-classloader/contribution-test/pom.xml", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/3dd5b501bf2222372d02d8dcf1fd776075ca8b48/itest/contribution-classloader/contribution-test/pom.xml", "sha": "f1e6a62e2cd10c948de2850648fe4d858ef12242", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/itest/contribution-classloader/contribution-test/pom.xml?ref=3dd5b501bf2222372d02d8dcf1fd776075ca8b48", "patch": "@@ -41,6 +41,13 @@\n             <version>2.0-incubating-SNAPSHOT</version>\n             <scope>runtime</scope>\n         </dependency>\n+        \n+        <dependency>\n+            <groupId>org.apache.tuscany.sca</groupId>\n+            <artifactId>tuscany-monitor-logging</artifactId>\n+            <version>2.0-incubating-SNAPSHOT</version>\n+            <scope>runtime</scope>\n+        </dependency>        \n \n         <dependency>\n             <groupId>junit</groupId>", "filename": "itest/contribution-classloader/contribution-test/pom.xml"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/a025cb49b420fa75b0ad3c1043aa20b8f020ed4d", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/ba140a7706476ca831538e387c56e7aee01bd2f0", "message": "TUSCANY-2023 Fix NPE when Service Implementation exposes multiple services and has a callback and one of the implemented interfaces does not have a callback\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@616731 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_124", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/a025cb49b420fa75b0ad3c1043aa20b8f020ed4d/modules/implementation-java/src/main/java/org/apache/tuscany/sca/implementation/java/introspect/impl/ServiceProcessor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/a025cb49b420fa75b0ad3c1043aa20b8f020ed4d/modules/implementation-java/src/main/java/org/apache/tuscany/sca/implementation/java/introspect/impl/ServiceProcessor.java", "sha": "b82e0df117d2adad9074f0b6690730633f192910", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/implementation-java/src/main/java/org/apache/tuscany/sca/implementation/java/introspect/impl/ServiceProcessor.java?ref=a025cb49b420fa75b0ad3c1043aa20b8f020ed4d", "patch": "@@ -135,7 +135,7 @@ private void createCallback(JavaImplementation type, JavaElementImpl element)\n         }        \n         for (Service service : type.getServices()) {\n             JavaInterface javaInterface = (JavaInterface)service.getInterfaceContract().getCallbackInterface();\n-            if (baseType == javaInterface.getJavaClass()) {\n+            if (javaInterface != null && baseType == javaInterface.getJavaClass()) {\n                 callbackService = service;\n             }\n         }", "filename": "modules/implementation-java/src/main/java/org/apache/tuscany/sca/implementation/java/introspect/impl/ServiceProcessor.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/520920c4fdba44043793fcb34945a979c1049140", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/b439407d393b7a21a834ec4c7656b2a5336d1d9d", "message": "Fix for TUSCANY-1736, add a check for null request path in the Feed binding listener servlet, to fix an NPE in the store sample.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@576738 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_125", "file": [{"additions": 16, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/520920c4fdba44043793fcb34945a979c1049140/modules/binding-feed/src/main/java/org/apache/tuscany/sca/binding/feed/provider/FeedBindingListenerServlet.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/520920c4fdba44043793fcb34945a979c1049140/modules/binding-feed/src/main/java/org/apache/tuscany/sca/binding/feed/provider/FeedBindingListenerServlet.java", "sha": "a949b4d16dcf4d5290bf573c1c58a11707d772ee", "changes": 31, "status": "modified", "deletions": 15, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-feed/src/main/java/org/apache/tuscany/sca/binding/feed/provider/FeedBindingListenerServlet.java?ref=520920c4fdba44043793fcb34945a979c1049140", "patch": "@@ -445,23 +445,24 @@ protected void doDelete(HttpServletRequest request, HttpServletResponse response\n         // Get the request path\n         String path = request.getPathInfo();\n \n-        if (path.startsWith(\"/\")) {\n-            String id = path.substring(1);\n+        String id;\n+        if (path != null && path.startsWith(\"/\")) {\n+            id = path.substring(1);\n+        } else {\n+            id = \"\";\n+        }\n \n-            // Delete a specific entry from the collection\n-            Message requestMessage = messageFactory.createMessage();\n-            requestMessage.setBody(new Object[] {id});\n-            Message responseMessage = deleteInvoker.invoke(requestMessage);\n-            if (responseMessage.isFault()) {\n-                Object body = responseMessage.getBody();\n-                if (body instanceof NotFoundException) {\n-                    response.sendError(HttpServletResponse.SC_NOT_FOUND);\n-                } else {\n-                    throw new ServletException((Throwable)responseMessage.getBody());\n-                }\n+        // Delete a specific entry from the collection\n+        Message requestMessage = messageFactory.createMessage();\n+        requestMessage.setBody(new Object[] {id});\n+        Message responseMessage = deleteInvoker.invoke(requestMessage);\n+        if (responseMessage.isFault()) {\n+            Object body = responseMessage.getBody();\n+            if (body instanceof NotFoundException) {\n+                response.sendError(HttpServletResponse.SC_NOT_FOUND);\n+            } else {\n+                throw new ServletException((Throwable)responseMessage.getBody());\n             }\n-        } else {\n-            response.sendError(HttpServletResponse.SC_NOT_FOUND);\n         }\n     }\n ", "filename": "modules/binding-feed/src/main/java/org/apache/tuscany/sca/binding/feed/provider/FeedBindingListenerServlet.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/0aa8d35c80a28716fce69466920557436c14a331", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/c8aad7528ca4334551d23af4f3f68b72d21e2325", "message": "Fix the databindings interop testcase that was failing with NPE as the sca domain instance can be null when the static initialised var is true. Not completly sure i understand this test to know this is the cirrect fix, but it does get eveything working\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@536812 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_126", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/0aa8d35c80a28716fce69466920557436c14a331/itest/databindings/interop/src/main/resources/generate/InteropDatabindingTestCase.java.vm", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/0aa8d35c80a28716fce69466920557436c14a331/itest/databindings/interop/src/main/resources/generate/InteropDatabindingTestCase.java.vm", "sha": "f4792da2ad303a21324c5e5c775b65ab12ee7f14", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/itest/databindings/interop/src/main/resources/generate/InteropDatabindingTestCase.java.vm?ref=0aa8d35c80a28716fce69466920557436c14a331", "patch": "@@ -43,7 +43,7 @@ public class InteropDatabindingTestCase extends TestCase  {\n \n     private static boolean initalised = false;\n     private GreeterService greeterClient;\n-    private SCADomain domain;\n+    private static SCADomain domain;\n \n     /**\n      * Runs before each test method", "filename": "itest/databindings/interop/src/main/resources/generate/InteropDatabindingTestCase.java.vm"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/48424ac67e0e6fd2ecd6cd86913130214f565b7f", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/e64d757278d8a85e4694840173d9e473c009d5f4", "message": "Fixed NPE caused by changing the default multiplicity to null. We're changing it to null so that a component reference can inherit it from the corresponding reference.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@535760 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_127", "file": [{"additions": 0, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/48424ac67e0e6fd2ecd6cd86913130214f565b7f/modules/assembly-xml/src/test/java/org/apache/tuscany/assembly/xml/ReadAllTestCase.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/48424ac67e0e6fd2ecd6cd86913130214f565b7f/modules/assembly-xml/src/test/java/org/apache/tuscany/assembly/xml/ReadAllTestCase.java", "sha": "ea801b9c67d277be7ea83471d0b2b9ac1a5a569b", "changes": 1, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/assembly-xml/src/test/java/org/apache/tuscany/assembly/xml/ReadAllTestCase.java?ref=48424ac67e0e6fd2ecd6cd86913130214f565b7f", "patch": "@@ -124,7 +124,6 @@ public void testReadComposite() throws Exception {\n         assertEquals(calcComponentReference.getName(), \"addService\");\n         assertEquals(calcComponentReference.isAutowire(), false);\n         assertEquals(calcComponentReference.isWiredByImpl(), false);\n-        assertEquals(calcComponentReference.getMultiplicity(), Multiplicity.ONE_ONE);\n         assertEquals(calcComponentReference.getRequiredIntents().get(0).getName(),\n                      new QName(\"http://test/confidentiality\", \"confidentiality\"));\n         assertEquals(calcComponentReference.getPolicySets().get(0).getName(), new QName(\"http://test/secure\", \"secure\"));", "filename": "modules/assembly-xml/src/test/java/org/apache/tuscany/assembly/xml/ReadAllTestCase.java"}, {"additions": 7, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/48424ac67e0e6fd2ecd6cd86913130214f565b7f/modules/assembly/src/main/java/org/apache/tuscany/assembly/builder/impl/ReferenceUtil.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/48424ac67e0e6fd2ecd6cd86913130214f565b7f/modules/assembly/src/main/java/org/apache/tuscany/assembly/builder/impl/ReferenceUtil.java", "sha": "7d2957fb0f0c9e28a9e534148816af053cb92a51", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/assembly/src/main/java/org/apache/tuscany/assembly/builder/impl/ReferenceUtil.java?ref=48424ac67e0e6fd2ecd6cd86913130214f565b7f", "patch": "@@ -55,6 +55,13 @@ static boolean validateMultiplicityAndTargets(Multiplicity multiplicity,\n                 return false;\n             }\n         }\n+        \n+        //FIXME workaround, this validation is sometimes invoked too early\n+        // because we get a chance to init the multiplicity attribute\n+        if (multiplicity == null) {\n+            return true;\n+        }\n+        \n         switch (multiplicity) {\n             case ZERO_N:\n                 break;", "filename": "modules/assembly/src/main/java/org/apache/tuscany/assembly/builder/impl/ReferenceUtil.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/9bb9289d9d09dc1d01ea945c88b570f16cd7c714", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/ddfaff8c403cf85533ae56f4fa50ad6c54be5b0a", "message": "This seems to in the loanconversationWSclient case on a void case to be called with NULL as arg. resulting in NPE.\nThis fixes seems to fix it. Need venkat to look at it.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@496829 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_128", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/9bb9289d9d09dc1d01ea945c88b570f16cd7c714/kernel/core/src/main/java/org/apache/tuscany/core/databinding/impl/PassByValueInterceptor.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/9bb9289d9d09dc1d01ea945c88b570f16cd7c714/kernel/core/src/main/java/org/apache/tuscany/core/databinding/impl/PassByValueInterceptor.java", "sha": "53c5d891cb937bb29dd6ae9914bf2fdfdd4db769", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/kernel/core/src/main/java/org/apache/tuscany/core/databinding/impl/PassByValueInterceptor.java?ref=9bb9289d9d09dc1d01ea945c88b570f16cd7c714", "patch": "@@ -100,6 +100,7 @@ public Message invoke(Message msg) {\n     }\r\n \r\n     public Object copy(Object arg, DataBinding argDataBinding) {\r\n+        if(arg == null) return null;\r\n         Object copiedArg;\r\n         if (dataBinding != null) {\r\n             copiedArg = dataBinding.copy(arg);\r", "filename": "kernel/core/src/main/java/org/apache/tuscany/core/databinding/impl/PassByValueInterceptor.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/976e670f8683be515925046b5282b8cfbb3d5b3f", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/598fc4218b777c7b02ccbb20e22928d391972d56", "message": "TUSCANY-2069 - Fixed a NPE build break by the recent change of paths from HashMap to ConcurrentHashMap. The problem is that HashMap supports null keys and values whereas ConcurrentHashMap does not. I've added a null check in the code to make sure that null values are not added to the ConcurrentHashMap\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@649008 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_129", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/976e670f8683be515925046b5282b8cfbb3d5b3f/modules/databinding/src/main/java/org/apache/tuscany/sca/databinding/impl/DirectedGraph.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/976e670f8683be515925046b5282b8cfbb3d5b3f/modules/databinding/src/main/java/org/apache/tuscany/sca/databinding/impl/DirectedGraph.java", "sha": "5b7a189490ef504f7861d05d8a0ddd36ecde745f", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/databinding/src/main/java/org/apache/tuscany/sca/databinding/impl/DirectedGraph.java?ref=976e670f8683be515925046b5282b8cfbb3d5b3f", "patch": "@@ -316,7 +316,9 @@ public Path getShortestPath(V sourceValue, V targetValue) {\n             nextNode = extractMin(otherNodes);\n             if (nextNode.vertex == target) {\n                 path = getPath(nextNode);\n-                paths.put(pair, path); // Cache it\n+                if (path != null) {\n+                    paths.put(pair, path); // Cache it\n+                }\n                 return path;\n             }\n             nodesOnPath.add(nextNode);", "filename": "modules/databinding/src/main/java/org/apache/tuscany/sca/databinding/impl/DirectedGraph.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/e22d946ccff042b39f00f310ccb1cb9cea58c5f7", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/f6e36f91184f3a2f37a29849a28024d56038fa70", "message": "make autowire throw a TargetException when the target cannot be resolved (this will avoid NPEs being thrown in components as a result of configuration error; cleanup of system SCDLs to resolve all autowires; introduce test cases into webapp and webapp-host so that we can verify autowire configuration and basic bootstrap operation; cleanup of webapp and webapp-host projects\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@437500 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_130", "file": [{"additions": 8, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/commands/launcher/src/main/resources/META-INF/tuscany/system.scdl", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/commands/launcher/src/main/resources/META-INF/tuscany/system.scdl", "sha": "48ab8cb59f7e25fbcce1b1e7b8da274ee067333d", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/commands/launcher/src/main/resources/META-INF/tuscany/system.scdl?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7", "patch": "@@ -114,4 +114,12 @@\n         <system:implementation.system class=\"org.apache.tuscany.core.services.work.jsr237.Jsr237WorkScheduler\"/>\n     </component>\n \n+    <component name=\"policyBuilderRegistry\">\n+         <system:implementation.system class=\"org.apache.tuscany.core.policy.PolicyBuilderRegistryImpl\"/>\n+    </component>\n+\n+    <component name=\"propertyFactory\">\n+        <system:implementation.system class=\"org.apache.tuscany.core.loader.StringParserPropertyFactory\"/>\n+    </component>\n+\n </composite>", "filename": "commands/launcher/src/main/resources/META-INF/tuscany/system.scdl"}, {"additions": 11, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/core/src/main/java/org/apache/tuscany/core/implementation/system/wire/SystemOutboundAutowire.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/core/src/main/java/org/apache/tuscany/core/implementation/system/wire/SystemOutboundAutowire.java", "sha": "e4a364ada52cabeb003bf1bbbd842154e145081e", "changes": 15, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/core/src/main/java/org/apache/tuscany/core/implementation/system/wire/SystemOutboundAutowire.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7", "patch": "@@ -24,6 +24,7 @@\n \n import org.apache.tuscany.spi.QualifiedName;\n import org.apache.tuscany.spi.component.TargetException;\n+import org.apache.tuscany.spi.component.TargetNotFoundException;\n import org.apache.tuscany.spi.wire.InboundInvocationChain;\n import org.apache.tuscany.spi.wire.InboundWire;\n import org.apache.tuscany.spi.wire.OutboundInvocationChain;\n@@ -39,12 +40,12 @@\n public class SystemOutboundAutowire<T> implements OutboundAutowire<T>, SystemOutboundWire<T> {\n     private String referenceName;\n     private Class<T> businessInterface;\n-    private AutowireComponent<?> context;\n+    private AutowireComponent<?> component;\n \n-    public SystemOutboundAutowire(String referenceName, Class<T> businessInterface, AutowireComponent<?> context) {\n+    public SystemOutboundAutowire(String referenceName, Class<T> businessInterface, AutowireComponent<?> component) {\n         this.referenceName = referenceName;\n         this.businessInterface = businessInterface;\n-        this.context = context;\n+        this.component = component;\n     }\n \n     public String getReferenceName() {\n@@ -63,7 +64,13 @@ public void setTargetName(QualifiedName targetName) {\n     }\n \n     public T getTargetService() throws TargetException {\n-        return context.resolveInstance(businessInterface);\n+        T service = component.resolveInstance(businessInterface);\n+        if (service == null) {\n+            TargetNotFoundException e = new TargetNotFoundException(\"Autowire target not found\");\n+            e.setIdentifier(businessInterface.getName());\n+            throw e;\n+        }\n+        return service;\n     }\n \n     public Class<T> getBusinessInterface() {", "filename": "core/src/main/java/org/apache/tuscany/core/implementation/system/wire/SystemOutboundAutowire.java"}, {"additions": 3, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/core/src/main/java/org/apache/tuscany/core/launcher/LauncherImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/core/src/main/java/org/apache/tuscany/core/launcher/LauncherImpl.java", "sha": "cc81f95f3f2b3095f711aeab1684a0c03be642fb", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/core/src/main/java/org/apache/tuscany/core/launcher/LauncherImpl.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7", "patch": "@@ -85,6 +85,9 @@ public void bootRuntime(URL systemScdl, ClassLoader systemClassLoader, MonitorFa\n         RuntimeInfo runtimeInfo = new LauncherRuntimeInfo(getInstallDirectory(), getApplicationRootDirectory());\n         parent.registerJavaObject(\"RuntimeInfo\", RuntimeInfo.class, runtimeInfo);\n \n+        // registory the monitor factory\n+        parent.registerJavaObject(\"MonitorFactory\", MonitorFactory.class, monitor);\n+        \n         // create a ComponentDefinition to represent the component we are going to deploy\n         SystemCompositeImplementation moduleImplementation = new SystemCompositeImplementation();\n         moduleImplementation.setScdlLocation(systemScdl);", "filename": "core/src/main/java/org/apache/tuscany/core/launcher/LauncherImpl.java"}, {"additions": 41, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/core/src/test/java/org/apache/tuscany/core/implementation/system/wire/SystemOutboundAutowireTestCase.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/core/src/test/java/org/apache/tuscany/core/implementation/system/wire/SystemOutboundAutowireTestCase.java", "sha": "d61525f1ef88fb8c5e6c879a8a5c21c1e1ac0627", "changes": 41, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/core/src/test/java/org/apache/tuscany/core/implementation/system/wire/SystemOutboundAutowireTestCase.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7", "patch": "@@ -0,0 +1,41 @@\n+package org.apache.tuscany.core.implementation.system.wire;\n+\n+import org.apache.tuscany.spi.component.TargetNotFoundException;\n+\n+import junit.framework.TestCase;\n+import org.apache.tuscany.core.component.AutowireComponent;\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.easymock.EasyMock.verify;\n+\n+/**\n+ * @version $Rev$ $Date$\n+ */\n+public class SystemOutboundAutowireTestCase extends TestCase {\n+\n+    public void testAutowire() {\n+        AutowireComponent<?> component = createMock(AutowireComponent.class);\n+        expect(component.resolveInstance(Object.class)).andReturn(new Object());\n+        replay(component);\n+        SystemOutboundAutowire<Object> wire = new SystemOutboundAutowire<Object>(\"foo\", Object.class, component);\n+        assertNotNull(wire.getTargetService());\n+        verify(component);\n+    }\n+\n+\n+    public void testNonExistentAutowire() {\n+        AutowireComponent<?> component = createMock(AutowireComponent.class);\n+        expect(component.resolveInstance(Object.class)).andReturn(null);\n+        replay(component);\n+        SystemOutboundAutowire<Object> wire = new SystemOutboundAutowire<Object>(\"foo\", Object.class, component);\n+        try {\n+            wire.getTargetService();\n+            fail();\n+        } catch (TargetNotFoundException e) {\n+            // expected\n+        }\n+        verify(component);\n+    }\n+\n+}", "filename": "core/src/test/java/org/apache/tuscany/core/implementation/system/wire/SystemOutboundAutowireTestCase.java"}, {"additions": 23, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/core/src/test/resources/org/apache/tuscany/core/deployer/boot2.scdl", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/core/src/test/resources/org/apache/tuscany/core/deployer/boot2.scdl", "sha": "a0f46e1e36bae5f373aa740f192506079557ba65", "changes": 23, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/core/src/test/resources/org/apache/tuscany/core/deployer/boot2.scdl?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7", "patch": "@@ -87,8 +87,31 @@\n         <system:implementation.system class=\"org.apache.tuscany.core.loader.ServiceLoader\"/>\n     </component>\n \n+    <component name=\"wireService\">\n+            <system:implementation.system class=\"org.apache.tuscany.core.wire.jdk.JDKWireService\"/>\n+    </component>\n+\n     <!-- Composite implementation type -->\n     <component name=\"composite.loader\">\n         <system:implementation.system class=\"org.apache.tuscany.core.implementation.composite.CompositeLoader\"/>\n     </component>\n+\n+    <component name=\"interfaceJava.introspector\">\n+        <system:implementation.system class=\"org.apache.tuscany.core.idl.java.InterfaceJavaIntrospectorImpl\"/>\n+    </component>\n+\n+    <component name=\"artifactRepository\">\n+        <system:implementation.system class=\"org.apache.tuscany.core.services.artifact.LocalMavenRepository\"/>\n+        <property name=\"repository\">.m2/repository</property>\n+    </component>\n+\n+    <component name=\"propertyFactory\">\n+        <system:implementation.system class=\"org.apache.tuscany.core.loader.StringParserPropertyFactory\"/>\n+    </component>\n+\n+    <component name=\"policyBuilderRegistry\">\n+        <system:implementation.system class=\"org.apache.tuscany.core.policy.PolicyBuilderRegistryImpl\"/>\n+    </component>\n+\n+\n </composite>", "filename": "core/src/test/resources/org/apache/tuscany/core/deployer/boot2.scdl"}, {"additions": 190, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/.ruleset", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/.ruleset", "sha": "3886f07f2d7dd60867eb1392bae2a4bfdef8f69c", "changes": 190, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/runtime/webapp-host/.ruleset?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7", "patch": "@@ -0,0 +1,190 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+-->\n+<ruleset name=\"pmd-eclipse\">\n+  <description>PMD Plugin preferences rule set</description>\n+  \n+  \n+  <rule ref=\"rulesets/basic.xml/BooleanInstantiation\"/>\n+  <rule ref=\"rulesets/basic.xml/CollapsibleIfStatements\"/>\n+  <rule ref=\"rulesets/basic.xml/DoubleCheckedLocking\"/>\n+<!--<rule ref=\"rulesets/basic.xml/EmptyCatchBlock\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptyFinallyBlock\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptyIfStmt\"/>-->\n+  <rule ref=\"rulesets/basic.xml/EmptyStatementNotInLoop\"/>\n+<!--<rule ref=\"rulesets/basic.xml/EmptyStaticInitializer\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptySwitchStatements\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptySynchronizedBlock\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptyTryBlock\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptyWhileStmt\"/>-->\n+  <rule ref=\"rulesets/basic.xml/ForLoopShouldBeWhileLoop\"/>\n+  <rule ref=\"rulesets/basic.xml/JumbledIncrementer\"/>\n+<!--<rule ref=\"rulesets/basic.xml/OverrideBothEqualsAndHashcode\"/>-->\n+  <rule ref=\"rulesets/basic.xml/ReturnFromFinallyBlock\"/>\n+  <rule ref=\"rulesets/basic.xml/UnconditionalIfStatement\"/>\n+  <rule ref=\"rulesets/basic.xml/UnnecessaryConversionTemporary\"/>\n+  <rule ref=\"rulesets/basic.xml/UnnecessaryFinalModifier\"/>\n+  <rule ref=\"rulesets/basic.xml/UnnecessaryReturn\"/>\n+<!--<rule ref=\"rulesets/basic.xml/UselessOverridingMethod\"/>-->\n+  \n+<!--<rule ref=\"rulesets/braces.xml/ForLoopsMustUseBraces\"/>-->\n+<!--<rule ref=\"rulesets/braces.xml/IfElseStmtsMustUseBraces\"/>-->\n+<!--<rule ref=\"rulesets/braces.xml/IfStmtsMustUseBraces\"/>-->\n+<!--<rule ref=\"rulesets/braces.xml/WhileLoopsMustUseBraces\"/>-->\n+\n+<!--<rule ref=\"rulesets/clone.xml/CloneMethodMustImplementCloneable\"/>-->\n+<!--<rule ref=\"rulesets/clone.xml/CloneThrowsCloneNotSupportedException\"/>-->\n+<!--<rule ref=\"rulesets/clone.xml/ProperCloneImplementation\"/>-->\n+  \n+<!--<rule ref=\"rulesets/codesize.xml/CyclomaticComplexity\"/>-->\n+<!--<rule ref=\"rulesets/codesize.xml/ExcessiveClassLength\"/>-->\n+<!--<rule ref=\"rulesets/codesize.xml/ExcessiveMethodLength\"/>-->\n+<!--<rule ref=\"rulesets/codesize.xml/ExcessiveParameterList\"/>-->\n+<!--<rule ref=\"rulesets/codesize.xml/ExcessivePublicCount\"/>-->\n+<!--<rule ref=\"rulesets/codesize.xml/TooManyFields\"/>-->\n+\n+<rule ref=\"rulesets/controversial.xml/AssignmentInOperand\"/>\n+<!--<rule ref=\"rulesets/controversial.xml/AtLeastOneConstructor\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/CallSuperInConstructor\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/DontImportSun\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/NullAssignment\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/OnlyOneReturn\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/SingularField\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/SuspiciousOctalEscape\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/UnnecessaryConstructor\"/>-->\n+<rule ref=\"rulesets/controversial.xml/UnnecessaryParentheses\"/>\n+<!--<rule ref=\"rulesets/controversial.xml/UnusedModifier\"/>-->\n+\n+<!--<rule ref=\"rulesets/coupling.xml/CouplingBetweenObjects\"/>-->\n+<!--<rule ref=\"rulesets/coupling.xml/ExcessiveImports\"/>-->\n+<!--<rule ref=\"rulesets/coupling.xml/LooseCoupling\"/>-->\n+\n+<!--<rule ref=\"rulesets/design.xml/AbstractClassWithoutAbstractMethod\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/AccessorClassGeneration\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/AssignmentToNonFinalStatic\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/AvoidDeeplyNestedIfStmts\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/AvoidInstanceofChecksInCatchClause\"/>-->\n+<rule ref=\"rulesets/design.xml/AvoidProtectedFieldInFinalClass\"/>\n+<!--<rule ref=\"rulesets/design.xml/AvoidReassigningParameters\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/AvoidSynchronizedAtMethodLevel\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/BadComparison\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/CloseConnection\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/CompareObjectsWithEquals\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/ConfusingTernary\"/>-->\n+<rule ref=\"rulesets/design.xml/ConstructorCallsOverridableMethod\"/>\n+<!--<rule ref=\"rulesets/design.xml/DefaultLabelNotLastInSwitchStmt\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/FinalFieldCouldBeStatic\"/>-->\n+<rule ref=\"rulesets/design.xml/IdempotentOperations\"/>\n+<!--<rule ref=\"rulesets/design.xml/ImmutableField\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/InstantiationToGetClass\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/MissingBreakInSwitch\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/MissingStaticMethodInNonInstantiatableClass\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/NonCaseLabelInSwitchStatement\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/NonStaticInitializer\"/>-->\n+<rule ref=\"rulesets/design.xml/OptimizableToArrayCall\"/>\n+<rule ref=\"rulesets/design.xml/PositionLiteralsFirstInComparisons\"/>\n+<rule ref=\"rulesets/design.xml/SimplifyBooleanExpressions\"/>\n+<rule ref=\"rulesets/design.xml/SimplifyBooleanReturns\"/>\n+<rule ref=\"rulesets/design.xml/SimplifyConditional\"/>\n+<!--<rule ref=\"rulesets/design.xml/SwitchDensity\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/SwitchStmtsShouldHaveDefault\"/>-->\n+<rule ref=\"rulesets/design.xml/UnnecessaryLocalBeforeReturn\"/>\n+<!--<rule ref=\"rulesets/design.xml/UseLocaleWithCaseConversions\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/UseNotifyAllInsteadOfNotify\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/UseSingleton\"/>-->\n+\n+<!--<rule ref=\"rulesets/finalizers.xml/EmptyFinalizer\"/>-->\n+<!--<rule ref=\"rulesets/finalizers.xml/FinalizeOnlyCallsSuperFinalize\"/>-->\n+<!--<rule ref=\"rulesets/finalizers.xml/FinalizeOverloaded\"/>-->\n+<!--<rule ref=\"rulesets/finalizers.xml/FinalizeDoesNotCallSuperFinalize\"/>-->\n+<!--<rule ref=\"rulesets/finalizers.xml/FinalizeShouldBeProtected\"/>-->\n+<!--<rule ref=\"rulesets/finalizers.xml/AvoidCallingFinalize\"/>-->\n+\n+<!--<rule ref=\"rulesets/imports.xml/DuplicateImports\"/>-->\n+<!--<rule ref=\"rulesets/imports.xml/DontImportJavaLang\"/>-->\n+<!--<rule ref=\"rulesets/imports.xml/UnusedImports\"/>-->\n+<!--<rule ref=\"rulesets/imports.xml/ImportFromSamePackage\"/>-->\n+\n+<!--<rule ref=\"rulesets/javabeans.xml/BeanMembersShouldSerialize\"/>-->\n+<!--<rule ref=\"rulesets/javabeans.xml/MissingSerialVersionUID\"/>-->\n+\n+<!--<rule ref=\"rulesets/junit.xml/JUnitStaticSuite\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/JUnitSpelling\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/JUnitAssertionsShouldIncludeMessage\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/JUnitTestsShouldIncludeAssert\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/TestClassWithoutTestCases\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/UnnecessaryBooleanAssertion\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/UseAssertEqualsInsteadOfAssertTrue\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/UseAssertSameInsteadOfAssertTrue\"/>-->\n+\n+  <!--<rule ref=\"rulesets/logging-java.xml/AvoidPrintStackTrace\"/>-->\n+  <!--<rule ref=\"rulesets/logging-java.xml/LoggerIsNotStaticFinal\"/>-->\n+  <!--<rule ref=\"rulesets/logging-java.xml/MoreThanOneLogger\"/>-->\n+  <!--<rule ref=\"rulesets/logging-java.xml/LoggerIsNotStaticFinal\"/>-->\n+  <!--<rule ref=\"rulesets/logging-java.xml/LogBlockWithoutIf\"/>-->\n+  <!--<rule ref=\"rulesets/logging-java.xml/SystemPrintln\"/>-->\n+  <!--<rule ref=\"rulesets/logging-jakarta-commons.xml/UseCorrectExceptionLogging\"/>-->\n+  <!--<rule ref=\"rulesets/logging-jakarta-commons.xml/ProperLogger\"/>-->\n+  \n+  <!--<rule ref=\"rulesets/naming.xml/ShortVariable\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/LongVariable\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/ShortMethodName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/VariableNamingConventions\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/MethodNamingConventions\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/ClassNamingConventions\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/AbstractNaming\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/AvoidDollarSigns\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/MethodWithSameNameAsEnclosingClass\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/SuspiciousHashcodeMethodName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/SuspiciousConstantFieldName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/AvoidFieldNameMatchingTypeName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/AvoidFieldNameMatchingMethodName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/AvoidNonConstructorMethodsWithClassName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/NoPackage\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/PackageCase\"/>-->\n+\n+  <!--<rule ref=\"rulesets/optimizations.xml/LocalVariableCouldBeFinal\"/>-->\n+  <!--<rule ref=\"rulesets/optimizations.xml/MethodArgumentCouldBeFinal\"/>-->\n+  <!--<rule ref=\"rulesets/optimizations.xml/AvoidInstantiatingObjectsInLoops\"/>-->\n+  <!--<rule ref=\"rulesets/optimizations.xml/UseArrayListInsteadOfVector\"/>-->\n+  <!--<rule ref=\"rulesets/optimizations.xml/SimplifyStartsWith\"/>-->\n+  <!--<rule ref=\"rulesets/optimizations.xml/UseStringBufferForStringAppends\"/>-->\n+\n+  <!--<rule ref=\"rulesets/strictexception.xml/AvoidCatchingThrowable\"/>-->\n+  <!--<rule ref=\"rulesets/strictexception.xml/SignatureDeclareThrowsException\"/>-->\n+  <!--<rule ref=\"rulesets/strictexception.xml/ExceptionAsFlowControl\"/>-->\n+  <!--<rule ref=\"rulesets/strictexception.xml/AvoidCatchingNPE\"/>-->\n+  <!--<rule ref=\"rulesets/strictexception.xml/AvoidThrowingRawExceptionTypes\"/>-->\n+  <!--<rule ref=\"rulesets/strictexception.xml/AvoidThrowingNullPointerException\"/>-->\n+ \n+  <!--<rule ref=\"rulesets/strings.xml/AvoidDuplicateLiterals\"/>-->\n+  <!--<rule ref=\"rulesets/strings.xml/StringInstantiation\"/>-->\n+  <!--<rule ref=\"rulesets/strings.xml/StringToString\"/>-->\n+  <!--<rule ref=\"rulesets/strings.xml/AvoidConcatenatingNonLiteralsInStringBuffer\"/>-->\n+  <!--<rule ref=\"rulesets/strings.xml/UnnecessaryCaseChange\"/>-->\n+  \n+  <!--<rule ref=\"rulesets/sunsecure.xml/MethodReturnsInternalArray\"/>-->\n+  <!--<rule ref=\"rulesets/sunsecure.xml/ArrayIsStoredDirectly\"/>-->\n+  \n+  <rule ref=\"rulesets/unusedcode.xml/UnusedLocalVariable\"/>\n+  <rule ref=\"rulesets/unusedcode.xml/UnusedPrivateField\"/>\n+  <rule ref=\"rulesets/unusedcode.xml/UnusedPrivateMethod\"/>\n+  <!--<rule ref=\"rulesets/unusedcode.xml/UnusedFormalParameter\"/>-->\n+  \n+</ruleset>", "filename": "runtime/webapp-host/.ruleset"}, {"additions": 11, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/pom.xml", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/pom.xml", "sha": "f818c2eb20f4c4473bcbb482bbe040e38c5790b5", "changes": 15, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/runtime/webapp-host/pom.xml?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7", "patch": "@@ -71,13 +71,20 @@\n             <scope>test</scope>\n         </dependency>\n \n+        <!-- test dependencies -->\n         <dependency>\n-            <groupId>jmock</groupId>\n-            <artifactId>jmock</artifactId>\n+            <groupId>org.easymock</groupId>\n+            <artifactId>easymockclassextension</artifactId>\n+            <version>2.2</version>\n+            <scope>test</scope>\n         </dependency>\n+\n         <dependency>\n-            <groupId>org.easymock</groupId>\n-            <artifactId>easymock</artifactId>\n+            <groupId>org.apache.tuscany</groupId>\n+            <artifactId>test</artifactId>\n+            <version>${sca.version}</version>\n+            <scope>test</scope>\n         </dependency>\n+\n     </dependencies>\n </project>", "filename": "runtime/webapp-host/pom.xml"}, {"additions": 10, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/main/java/org/apache/tuscany/runtime/webapp/ServletHostImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/main/java/org/apache/tuscany/runtime/webapp/ServletHostImpl.java", "sha": "c0036ca95e1deb1bb55cbc747f06b1356bf13dcd", "changes": 17, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/runtime/webapp-host/src/main/java/org/apache/tuscany/runtime/webapp/ServletHostImpl.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7", "patch": "@@ -21,21 +21,22 @@\n import java.io.IOException;\n import java.util.HashMap;\n import java.util.Map;\n-\n import javax.servlet.Servlet;\n import javax.servlet.ServletException;\n import javax.servlet.ServletRequest;\n import javax.servlet.ServletResponse;\n import javax.servlet.http.HttpServletRequest;\n \n-import org.apache.tuscany.host.servlet.ServletRequestInjector;\n-import org.apache.tuscany.spi.host.ServletHost;\n import org.osoa.sca.annotations.Init;\n import org.osoa.sca.annotations.Service;\n \n+import org.apache.tuscany.spi.host.ServletHost;\n+\n+import org.apache.tuscany.host.servlet.ServletRequestInjector;\n+\n /**\n- * ServletHost impl that forwards requests to registered servlets\n- * TODO: TUSCANY-649, move this and ServletLauncherListener to a new webapp-host module\n+ * ServletHost impl that forwards requests to registered servlets TODO: TUSCANY-649, move this and\n+ * ServletLauncherListener to a new webapp-host module\n  */\n @Service(ServletHost.class)\n public class ServletHostImpl implements ServletHost, ServletRequestInjector {\n@@ -51,17 +52,19 @@ public void init() {\n     }\n \n     public void service(ServletRequest req, ServletResponse resp) throws ServletException, IOException {\n+        assert req instanceof HttpServletRequest : \"implementation only supports HttpServletRequest\";\n         String path = ((HttpServletRequest) req).getPathInfo();\n         Servlet servlet = servlets.get(path);\n         if (servlet == null) {\n-            throw new IllegalStateException(\"no servlet registered for path: \" + path);\n+            throw new IllegalStateException(\"No servlet registered for path: \" + path);\n         }\n         servlet.service(req, resp);\n     }\n \n     public void registerMapping(String path, Servlet servlet) {\n+\n         if (servlets.containsKey(path)) {\n-            throw new IllegalStateException(\"servlet already registered at path: \" + path);\n+            throw new IllegalStateException(\"Servlet already registered at path: \" + path);\n         }\n         servlets.put(path, servlet);\n     }", "filename": "runtime/webapp-host/src/main/java/org/apache/tuscany/runtime/webapp/ServletHostImpl.java"}, {"additions": 38, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/main/java/org/apache/tuscany/runtime/webapp/ServletLauncherListener.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/main/java/org/apache/tuscany/runtime/webapp/ServletLauncherListener.java", "sha": "a082f370a80878750aa51b0d65b248bc19482ea9", "changes": 58, "status": "modified", "deletions": 20, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/runtime/webapp-host/src/main/java/org/apache/tuscany/runtime/webapp/ServletLauncherListener.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7", "patch": "@@ -23,27 +23,27 @@\n import java.util.HashMap;\n import java.util.Map;\n import java.util.logging.Level;\n-\n import javax.servlet.ServletContext;\n import javax.servlet.ServletContextEvent;\n import javax.servlet.ServletContextListener;\n \n+import org.apache.tuscany.spi.component.CompositeComponent;\n+import org.apache.tuscany.spi.loader.LoaderException;\n+import org.apache.tuscany.spi.loader.MissingResourceException;\n+\n import org.apache.tuscany.core.launcher.CompositeContextImpl;\n import org.apache.tuscany.core.launcher.LauncherImpl;\n import org.apache.tuscany.core.monitor.MonitorFactoryUtil;\n import org.apache.tuscany.host.MonitorFactory;\n-import org.apache.tuscany.spi.component.CompositeComponent;\n-import org.apache.tuscany.spi.loader.LoaderException;\n \n /**\n- * LauncherImpl for runtime environment that loads info from servlet context params.\n- * This listener manages one top-level LauncherImpl (and hence one Tuscany runtime context)\n- * per servlet context; the lifecycle of that runtime corresponds to the the lifecycle of the\n- * associated servlet context.\n- *\n+ * LauncherImpl for runtime environment that loads info from servlet context params. This listener manages one top-level\n+ * LauncherImpl (and hence one Tuscany runtime context) per servlet context; the lifecycle of that runtime corresponds\n+ * to the the lifecycle of the associated servlet context.\n+ * <p/>\n  * Web application code may obtain the top-level CompositeContext via\n- * {@link org.osoa.sca.CurrentCompositeContext#getContext()}.  If that returns null,\n- * it is likely the runtime failed to boot: the context param {@link LAUNCHER_THROWABLE_ATTRIBUTE}\n+ * {@link org.osoa.sca.CurrentCompositeContext#getContext()}.\n+ * If that returns null, it is likely the runtime failed to boot: the context param {@link LAUNCHER_THROWABLE_ATTRIBUTE}\n  * will contain a {@link Throwable} with diagnostic information.\n  *\n  * @version $$Rev$$ $$Date$$\n@@ -59,9 +59,8 @@\n      */\n     public static final String APPLICATION_SCDL_PATH_PARAM = \"applicationScdlPath\";\n     /**\n-     * Servlet context-param name for system monitoring level.\n-     * Supported values are the names of statics defined in java.util.logging.Level.\n-     * If absent, no monitoring will take place.\n+     * Servlet context-param name for system monitoring level. Supported values are the names of statics defined in\n+     * java.util.logging.Level. If absent, no monitoring will take place.\n      */\n     public static final String SYSTEM_MONITORING_PARAM = \"tuscanyMonitoringLevel\";\n \n@@ -71,17 +70,18 @@\n     public static final String DEFAULT_APPLICATION_SCDL_PATH = \"/WEB-INF/default.scdl\";\n \n     /**\n-     * Context attribute to which an Exception or Error object will be bound to if the\n-     * launcher fails to initialize.\n+     * Context attribute to which an Exception or Error object will be bound to if the launcher fails to initialize.\n      */\n     public static final String LAUNCHER_THROWABLE_ATTRIBUTE = \"Tuscany.LauncherImpl.Throwable\";\n \n     /**\n-     * Context attribute to which the active {@link LauncherImpl} managing the runtime for this\n-     * servlet context is stored.\n+     * Context attribute to which the active {@link LauncherImpl} managing the runtime for this servlet context is\n+     * stored.\n      */\n     private static final String LAUNCHER_ATTRIBUTE = \"Tuscany.LauncherImpl\";\n \n+    private URL testSystemScdl;\n+\n     public void contextInitialized(ServletContextEvent servletContextEvent) {\n         ServletContext servletContext = servletContextEvent.getServletContext();\n \n@@ -111,10 +111,21 @@ public void contextInitialized(ServletContextEvent servletContextEvent) {\n         CompositeContextImpl context;\n \n         try {\n-            URL systemScdl = getClass().getResource(systemScdlPath);\n+            URL systemScdl;\n+            if (testSystemScdl != null) {\n+                systemScdl = testSystemScdl;\n+            } else {\n+                systemScdl = getClass().getResource(systemScdlPath);\n+                if (systemScdl == null) {\n+                    MissingResourceException e = new MissingResourceException(\"System SCDL not found\");\n+                    e.setIdentifier(systemScdlPath);\n+                    throw e;\n+                }\n+            }\n             CompositeComponent<?> rt = launcher.bootRuntime(systemScdl, mf);\n             servletContext.setAttribute(LAUNCHER_ATTRIBUTE, launcher);\n-            servletContext.setAttribute(\"Tuscany.ServletRequestInjector\", rt.getChild(\"servletHost\").getServiceInstance());\n+            servletContext\n+                .setAttribute(\"Tuscany.ServletRequestInjector\", rt.getChild(\"servletHost\").getServiceInstance());\n \n             URL appScdl;\n             if (applicationScdlPath.startsWith(\"/\")) {\n@@ -143,7 +154,7 @@ public void contextInitialized(ServletContextEvent servletContextEvent) {\n \n         } catch (Throwable t) {\n             servletContext.setAttribute(LAUNCHER_THROWABLE_ATTRIBUTE, t);\n-            t.printStackTrace();\n+            servletContext.log(\"Error launching Tuscany Runtime\", t);\n         }\n     }\n \n@@ -157,6 +168,13 @@ public void contextDestroyed(ServletContextEvent servletContextEvent) {\n         }\n     }\n \n+    /**\n+     * Sets the system SCDL url for testing\n+     */\n+    void setTestSystemScdl(URL testSystemScdl) {\n+        this.testSystemScdl = testSystemScdl;\n+    }\n+\n     private MonitorFactory getMonitorFactory(String loggingLevel) {\n         String factoryName = \"org.apache.tuscany.core.monitor.NullMonitorFactory\";\n         Map<String, Object> props = null;", "filename": "runtime/webapp-host/src/main/java/org/apache/tuscany/runtime/webapp/ServletLauncherListener.java"}, {"additions": 19, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/main/resources/META-INF/sca/webapp.system.scdl", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/main/resources/META-INF/sca/webapp.system.scdl", "sha": "4480dcba71811b152b71ca55c771687b3dbc6fd1", "changes": 23, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/runtime/webapp-host/src/main/resources/META-INF/sca/webapp.system.scdl?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7", "patch": "@@ -113,11 +113,26 @@\n     <component name=\"servletHost\">\n         <system:implementation.system class=\"org.apache.tuscany.runtime.webapp.ServletHostImpl\"/>\n     </component>\n-    \n-    <!-- TODO: Hack the Axis extension in  -->\n-    <include name=\"binding.axis2\" scdlLocation=\"binding.axis2.scdl\"/>\n+\n+    <component name=\"policyBuilderRegistry\">\n+         <system:implementation.system class=\"org.apache.tuscany.core.policy.PolicyBuilderRegistryImpl\"/>\n+    </component>\n+\n+    <component name=\"propertyFactory\">\n+        <system:implementation.system class=\"org.apache.tuscany.core.loader.StringParserPropertyFactory\"/>\n+    </component>\n+\n+    <component name=\"artifactRepository\">\n+            <system:implementation.system class=\"org.apache.tuscany.core.services.artifact.LocalMavenRepository\"/>\n+            <!-- this value needs to change to a correct one -->\n+            <property name = \"repository\">.</property>\n+    </component>\n+\n+\n+    <!-- TODO: Hack the Axis extension in -->\n+    <include name=\"binding.axis2\" scdlLocation=\"binding.axis2.scdl\"/> \n     \n     <!-- TODO: Hack the SDO DataBinding extension in -->\n-    <include name=\"databinding.sdo\" scdlLocation=\"databinding.sdo.scdl\"/>\n+    <include name=\"databinding.sdo\" scdlLocation=\"databinding.sdo.scdl\"/>  \n \n </composite>", "filename": "runtime/webapp-host/src/main/resources/META-INF/sca/webapp.system.scdl"}, {"additions": 25, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/Foo.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/Foo.java", "sha": "75b49de18843c077f9e4cf2858da0578ca3b44c5", "changes": 25, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/Foo.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7", "patch": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tuscany.runtime.webapp;\n+\n+/**\n+ * @version $Rev$ $Date$\n+ */\n+public interface Foo {\n+}", "filename": "runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/Foo.java"}, {"additions": 25, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/FooImpl.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/FooImpl.java", "sha": "dd938f2a58eae3652b39f9f92e5c83a51876d961", "changes": 25, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/FooImpl.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7", "patch": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tuscany.runtime.webapp;\n+\n+/**\n+ * @version $Rev$ $Date$\n+ */\n+public class FooImpl implements Foo {\n+}", "filename": "runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/FooImpl.java"}, {"additions": 83, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/ServletHostTestCase.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/ServletHostTestCase.java", "sha": "543be9b7df4e2a4f610c9b804aa53d81e35b07b6", "changes": 83, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/ServletHostTestCase.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7", "patch": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tuscany.runtime.webapp;\n+\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.verify;\n+\n+import javax.servlet.Servlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import junit.framework.TestCase;\n+import org.easymock.EasyMock;\n+\n+/**\n+ * @version $Rev$ $Date$\n+ */\n+public class ServletHostTestCase extends TestCase {\n+\n+    public void testDispatch() throws Exception {\n+        HttpServletRequest req = createMock(HttpServletRequest.class);\n+        expect(req.getPathInfo()).andReturn(\"foo\");\n+        replay(req);\n+        HttpServletResponse res = createMock(HttpServletResponse.class);\n+        Servlet servlet = createMock(Servlet.class);\n+        servlet.service(req, res);\n+        EasyMock.expectLastCall();\n+        replay(servlet);\n+        ServletHostImpl host = new ServletHostImpl();\n+        host.registerMapping(\"foo\", servlet);\n+        host.service(req, res);\n+        verify(servlet);\n+    }\n+\n+    public void testDuplicateRegistration() throws Exception {\n+        Servlet servlet = createMock(Servlet.class);\n+        ServletHostImpl host = new ServletHostImpl();\n+        host.registerMapping(\"foo\", servlet);\n+        try {\n+            host.registerMapping(\"foo\", servlet);\n+            fail();\n+        } catch (IllegalStateException e) {\n+            // expected\n+        }\n+    }\n+\n+    public void testUnregister() throws Exception {\n+        HttpServletRequest req = createMock(HttpServletRequest.class);\n+        expect(req.getPathInfo()).andReturn(\"foo\");\n+        replay(req);\n+        HttpServletResponse res = createMock(HttpServletResponse.class);\n+        Servlet servlet = createMock(Servlet.class);\n+        replay(servlet);\n+        ServletHostImpl host = new ServletHostImpl();\n+        host.registerMapping(\"foo\", servlet);\n+        host.unregisterMapping(\"foo\");\n+        try {\n+            host.service(req, res);\n+        } catch (IllegalStateException e) {\n+            // expected\n+        }\n+        verify(servlet);\n+    }\n+\n+}", "filename": "runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/ServletHostTestCase.java"}, {"additions": 123, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/ServletLauncherListenerTestCase.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/ServletLauncherListenerTestCase.java", "sha": "c881649acd352ccafc60260f5e762bed332c00bb", "changes": 123, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/ServletLauncherListenerTestCase.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7", "patch": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tuscany.runtime.webapp;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletContextEvent;\n+\n+import org.apache.tuscany.spi.loader.LoaderException;\n+import org.apache.tuscany.spi.loader.MissingResourceException;\n+\n+import junit.framework.TestCase;\n+import static org.apache.tuscany.runtime.webapp.ServletLauncherListener.APPLICATION_SCDL_PATH_PARAM;\n+import static org.apache.tuscany.runtime.webapp.ServletLauncherListener.SYSTEM_MONITORING_PARAM;\n+import static org.apache.tuscany.runtime.webapp.ServletLauncherListener.SYSTEM_SCDL_PATH_PARAM;\n+import static org.easymock.EasyMock.expect;\n+import org.easymock.classextension.EasyMock;\n+\n+/**\n+ * @version $Rev$ $Date$\n+ */\n+public class ServletLauncherListenerTestCase extends TestCase {\n+\n+    /**\n+     * Verifies the web app host is configured properly to perform a basic boot\n+     * <p/>\n+     * FIXME Uncomment this test case when the webapp project is fixed by removing the dependency on web services\n+     */\n+    public void testBoot() throws Exception {\n+//        final Launcher[] launcher = new Launcher[1];\n+//        ServletLauncherListener listener = new ServletLauncherListener();\n+//        listener.setTestSystemScdl(getClass().getClassLoader().getResource(\"META-INF/sca/webapp.system.scdl\"));\n+//        ServletContext context = EasyMock.createMock(ServletContext.class);\n+//        expect(context.getServletContextName()).andReturn(\"foo\").anyTimes();\n+//        expect(context.getInitParameter(SYSTEM_SCDL_PATH_PARAM)).andReturn(null);\n+//        expect(context.getInitParameter(APPLICATION_SCDL_PATH_PARAM)).andReturn(null);\n+//        expect(context.getInitParameter(SYSTEM_MONITORING_PARAM)).andReturn(null);\n+//        context.setAttribute(EasyMock.eq(\"Tuscany.LauncherImpl\"), EasyMock.isA(Launcher.class));\n+//        EasyMock.expectLastCall().andStubAnswer(new IAnswer() {\n+//            public Object answer() throws Throwable {\n+//                Object o = EasyMock.getCurrentArguments()[1];\n+//                launcher[0] = (Launcher) o;\n+//                return null;\n+//            }\n+//        });\n+//        context.setAttribute(EasyMock.eq(\"Tuscany.ServletRequestInjector\"), EasyMock.isA(ServletHost.class));\n+//        expect(context.getResource(\"/WEB-INF/default.scdl\"))\n+//            .andReturn(getClass().getClassLoader().getResource(\"testapp.scdl\"));\n+//        expect(context.getAttribute(EasyMock.eq(\"Tuscany.LauncherImpl\"))).andReturn(launcher[0]);\n+//        EasyMock.replay(context);\n+//        ServletContextEvent event = EasyMock.createMock(ServletContextEvent.class);\n+//        EasyMock.expect(event.getServletContext()).andReturn(context).anyTimes();\n+//        EasyMock.replay(event);\n+//        listener.contextInitialized(event);\n+//        listener.contextDestroyed(event);\n+//        EasyMock.verify(context);\n+    }\n+\n+    /**\n+     * Verifies a {@link LoaderException} is thrown when the application SCDL is not found\n+     * <p/>\n+     * FIXME Uncomment this test case when the webapp project is fixed by removing the dependency on web services\n+     */\n+    public void testApplicationSCDLNotFound() throws Exception {\n+//        ServletLauncherListener listener = new ServletLauncherListener();\n+//        listener.setTestSystemScdl(getClass().getClassLoader().getResource(\"META-INF/sca/webapp.system.scdl\"));\n+//        ServletContext context = EasyMock.createMock(ServletContext.class);\n+//        expect(context.getInitParameter(SYSTEM_SCDL_PATH_PARAM)).andReturn(null);\n+//        expect(context.getServletContextName()).andReturn(\"foo\").anyTimes();\n+//        context.setAttribute(EasyMock.eq(\"Tuscany.LauncherImpl\"), EasyMock.isA(Launcher.class));\n+//        context.setAttribute(EasyMock.eq(\"Tuscany.ServletRequestInjector\"), EasyMock.isA(ServletHost.class));\n+//        expect(context.getInitParameter(APPLICATION_SCDL_PATH_PARAM)).andReturn(null);\n+//        expect(context.getInitParameter(SYSTEM_MONITORING_PARAM)).andReturn(null);\n+//        expect(context.getResource(\"/WEB-INF/default.scdl\")).andReturn(null);\n+//        context.setAttribute(EasyMock.eq(\"Tuscany.LauncherImpl.Throwable\"), EasyMock.isA(LoaderException.class));\n+//        context.log(EasyMock.isA(String.class), EasyMock.isA(Throwable.class));\n+//        EasyMock.replay(context);\n+//        ServletContextEvent event = EasyMock.createMock(ServletContextEvent.class);\n+//        expect(event.getServletContext()).andReturn(context);\n+//        EasyMock.replay(event);\n+//        listener.contextInitialized(event);\n+//        EasyMock.verify(context);\n+    }\n+\n+    /**\n+     * Verifies a {@link MissingResourceException} is thrown if the system SCDL is not found\n+     *\n+     * @throws Exception\n+     */\n+    public void testSystemSCDLNotFound() throws Exception {\n+        ServletLauncherListener listener = new ServletLauncherListener();\n+        ServletContext context = EasyMock.createMock(ServletContext.class);\n+        expect(context.getInitParameter(SYSTEM_SCDL_PATH_PARAM)).andReturn(\"notthere\");\n+        context\n+            .setAttribute(EasyMock.eq(\"Tuscany.LauncherImpl.Throwable\"), EasyMock.isA(MissingResourceException.class));\n+        expect(context.getInitParameter(APPLICATION_SCDL_PATH_PARAM)).andReturn(null);\n+        expect(context.getInitParameter(SYSTEM_MONITORING_PARAM)).andReturn(null);\n+        context.log(EasyMock.isA(String.class), EasyMock.isA(Throwable.class));\n+        EasyMock.replay(context);\n+        ServletContextEvent event = EasyMock.createMock(ServletContextEvent.class);\n+        EasyMock.expect(event.getServletContext()).andReturn(context);\n+        EasyMock.replay(event);\n+        listener.contextInitialized(event);\n+        EasyMock.verify(context);\n+    }\n+\n+\n+}", "filename": "runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/ServletLauncherListenerTestCase.java"}, {"additions": 26, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/test/resources/testapp.scdl", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/test/resources/testapp.scdl", "sha": "9b5bda7fb6171cdea97eed31cde628e70195e282", "changes": 26, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/runtime/webapp-host/src/test/resources/testapp.scdl?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7", "patch": "@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+-->\n+<composite xmlns=\"http://www.osoa.org/xmlns/sca/1.0\" name=\"testapp\">\n+\n+    <component name=\"component\">\n+        <implementation.java class=\"org.apache.tuscany.runtime.webapp.FooImpl\"/>\n+    </component>\n+\n+</composite>", "filename": "runtime/webapp-host/src/test/resources/testapp.scdl"}, {"additions": 190, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp/.ruleset", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp/.ruleset", "sha": "3886f07f2d7dd60867eb1392bae2a4bfdef8f69c", "changes": 190, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/runtime/webapp/.ruleset?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7", "patch": "@@ -0,0 +1,190 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+-->\n+<ruleset name=\"pmd-eclipse\">\n+  <description>PMD Plugin preferences rule set</description>\n+  \n+  \n+  <rule ref=\"rulesets/basic.xml/BooleanInstantiation\"/>\n+  <rule ref=\"rulesets/basic.xml/CollapsibleIfStatements\"/>\n+  <rule ref=\"rulesets/basic.xml/DoubleCheckedLocking\"/>\n+<!--<rule ref=\"rulesets/basic.xml/EmptyCatchBlock\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptyFinallyBlock\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptyIfStmt\"/>-->\n+  <rule ref=\"rulesets/basic.xml/EmptyStatementNotInLoop\"/>\n+<!--<rule ref=\"rulesets/basic.xml/EmptyStaticInitializer\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptySwitchStatements\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptySynchronizedBlock\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptyTryBlock\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptyWhileStmt\"/>-->\n+  <rule ref=\"rulesets/basic.xml/ForLoopShouldBeWhileLoop\"/>\n+  <rule ref=\"rulesets/basic.xml/JumbledIncrementer\"/>\n+<!--<rule ref=\"rulesets/basic.xml/OverrideBothEqualsAndHashcode\"/>-->\n+  <rule ref=\"rulesets/basic.xml/ReturnFromFinallyBlock\"/>\n+  <rule ref=\"rulesets/basic.xml/UnconditionalIfStatement\"/>\n+  <rule ref=\"rulesets/basic.xml/UnnecessaryConversionTemporary\"/>\n+  <rule ref=\"rulesets/basic.xml/UnnecessaryFinalModifier\"/>\n+  <rule ref=\"rulesets/basic.xml/UnnecessaryReturn\"/>\n+<!--<rule ref=\"rulesets/basic.xml/UselessOverridingMethod\"/>-->\n+  \n+<!--<rule ref=\"rulesets/braces.xml/ForLoopsMustUseBraces\"/>-->\n+<!--<rule ref=\"rulesets/braces.xml/IfElseStmtsMustUseBraces\"/>-->\n+<!--<rule ref=\"rulesets/braces.xml/IfStmtsMustUseBraces\"/>-->\n+<!--<rule ref=\"rulesets/braces.xml/WhileLoopsMustUseBraces\"/>-->\n+\n+<!--<rule ref=\"rulesets/clone.xml/CloneMethodMustImplementCloneable\"/>-->\n+<!--<rule ref=\"rulesets/clone.xml/CloneThrowsCloneNotSupportedException\"/>-->\n+<!--<rule ref=\"rulesets/clone.xml/ProperCloneImplementation\"/>-->\n+  \n+<!--<rule ref=\"rulesets/codesize.xml/CyclomaticComplexity\"/>-->\n+<!--<rule ref=\"rulesets/codesize.xml/ExcessiveClassLength\"/>-->\n+<!--<rule ref=\"rulesets/codesize.xml/ExcessiveMethodLength\"/>-->\n+<!--<rule ref=\"rulesets/codesize.xml/ExcessiveParameterList\"/>-->\n+<!--<rule ref=\"rulesets/codesize.xml/ExcessivePublicCount\"/>-->\n+<!--<rule ref=\"rulesets/codesize.xml/TooManyFields\"/>-->\n+\n+<rule ref=\"rulesets/controversial.xml/AssignmentInOperand\"/>\n+<!--<rule ref=\"rulesets/controversial.xml/AtLeastOneConstructor\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/CallSuperInConstructor\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/DontImportSun\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/NullAssignment\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/OnlyOneReturn\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/SingularField\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/SuspiciousOctalEscape\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/UnnecessaryConstructor\"/>-->\n+<rule ref=\"rulesets/controversial.xml/UnnecessaryParentheses\"/>\n+<!--<rule ref=\"rulesets/controversial.xml/UnusedModifier\"/>-->\n+\n+<!--<rule ref=\"rulesets/coupling.xml/CouplingBetweenObjects\"/>-->\n+<!--<rule ref=\"rulesets/coupling.xml/ExcessiveImports\"/>-->\n+<!--<rule ref=\"rulesets/coupling.xml/LooseCoupling\"/>-->\n+\n+<!--<rule ref=\"rulesets/design.xml/AbstractClassWithoutAbstractMethod\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/AccessorClassGeneration\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/AssignmentToNonFinalStatic\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/AvoidDeeplyNestedIfStmts\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/AvoidInstanceofChecksInCatchClause\"/>-->\n+<rule ref=\"rulesets/design.xml/AvoidProtectedFieldInFinalClass\"/>\n+<!--<rule ref=\"rulesets/design.xml/AvoidReassigningParameters\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/AvoidSynchronizedAtMethodLevel\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/BadComparison\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/CloseConnection\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/CompareObjectsWithEquals\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/ConfusingTernary\"/>-->\n+<rule ref=\"rulesets/design.xml/ConstructorCallsOverridableMethod\"/>\n+<!--<rule ref=\"rulesets/design.xml/DefaultLabelNotLastInSwitchStmt\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/FinalFieldCouldBeStatic\"/>-->\n+<rule ref=\"rulesets/design.xml/IdempotentOperations\"/>\n+<!--<rule ref=\"rulesets/design.xml/ImmutableField\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/InstantiationToGetClass\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/MissingBreakInSwitch\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/MissingStaticMethodInNonInstantiatableClass\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/NonCaseLabelInSwitchStatement\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/NonStaticInitializer\"/>-->\n+<rule ref=\"rulesets/design.xml/OptimizableToArrayCall\"/>\n+<rule ref=\"rulesets/design.xml/PositionLiteralsFirstInComparisons\"/>\n+<rule ref=\"rulesets/design.xml/SimplifyBooleanExpressions\"/>\n+<rule ref=\"rulesets/design.xml/SimplifyBooleanReturns\"/>\n+<rule ref=\"rulesets/design.xml/SimplifyConditional\"/>\n+<!--<rule ref=\"rulesets/design.xml/SwitchDensity\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/SwitchStmtsShouldHaveDefault\"/>-->\n+<rule ref=\"rulesets/design.xml/UnnecessaryLocalBeforeReturn\"/>\n+<!--<rule ref=\"rulesets/design.xml/UseLocaleWithCaseConversions\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/UseNotifyAllInsteadOfNotify\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/UseSingleton\"/>-->\n+\n+<!--<rule ref=\"rulesets/finalizers.xml/EmptyFinalizer\"/>-->\n+<!--<rule ref=\"rulesets/finalizers.xml/FinalizeOnlyCallsSuperFinalize\"/>-->\n+<!--<rule ref=\"rulesets/finalizers.xml/FinalizeOverloaded\"/>-->\n+<!--<rule ref=\"rulesets/finalizers.xml/FinalizeDoesNotCallSuperFinalize\"/>-->\n+<!--<rule ref=\"rulesets/finalizers.xml/FinalizeShouldBeProtected\"/>-->\n+<!--<rule ref=\"rulesets/finalizers.xml/AvoidCallingFinalize\"/>-->\n+\n+<!--<rule ref=\"rulesets/imports.xml/DuplicateImports\"/>-->\n+<!--<rule ref=\"rulesets/imports.xml/DontImportJavaLang\"/>-->\n+<!--<rule ref=\"rulesets/imports.xml/UnusedImports\"/>-->\n+<!--<rule ref=\"rulesets/imports.xml/ImportFromSamePackage\"/>-->\n+\n+<!--<rule ref=\"rulesets/javabeans.xml/BeanMembersShouldSerialize\"/>-->\n+<!--<rule ref=\"rulesets/javabeans.xml/MissingSerialVersionUID\"/>-->\n+\n+<!--<rule ref=\"rulesets/junit.xml/JUnitStaticSuite\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/JUnitSpelling\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/JUnitAssertionsShouldIncludeMessage\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/JUnitTestsShouldIncludeAssert\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/TestClassWithoutTestCases\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/UnnecessaryBooleanAssertion\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/UseAssertEqualsInsteadOfAssertTrue\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/UseAssertSameInsteadOfAssertTrue\"/>-->\n+\n+  <!--<rule ref=\"rulesets/logging-java.xml/AvoidPrintStackTrace\"/>-->\n+  <!--<rule ref=\"rulesets/logging-java.xml/LoggerIsNotStaticFinal\"/>-->\n+  <!--<rule ref=\"rulesets/logging-java.xml/MoreThanOneLogger\"/>-->\n+  <!--<rule ref=\"rulesets/logging-java.xml/LoggerIsNotStaticFinal\"/>-->\n+  <!--<rule ref=\"rulesets/logging-java.xml/LogBlockWithoutIf\"/>-->\n+  <!--<rule ref=\"rulesets/logging-java.xml/SystemPrintln\"/>-->\n+  <!--<rule ref=\"rulesets/logging-jakarta-commons.xml/UseCorrectExceptionLogging\"/>-->\n+  <!--<rule ref=\"rulesets/logging-jakarta-commons.xml/ProperLogger\"/>-->\n+  \n+  <!--<rule ref=\"rulesets/naming.xml/ShortVariable\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/LongVariable\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/ShortMethodName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/VariableNamingConventions\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/MethodNamingConventions\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/ClassNamingConventions\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/AbstractNaming\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/AvoidDollarSigns\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/MethodWithSameNameAsEnclosingClass\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/SuspiciousHashcodeMethodName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/SuspiciousConstantFieldName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/AvoidFieldNameMatchingTypeName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/AvoidFieldNameMatchingMethodName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/AvoidNonConstructorMethodsWithClassName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/NoPackage\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/PackageCase\"/>-->\n+\n+  <!--<rule ref=\"rulesets/optimizations.xml/LocalVariableCouldBeFinal\"/>-->\n+  <!--<rule ref=\"rulesets/optimizations.xml/MethodArgumentCouldBeFinal\"/>-->\n+  <!--<rule ref=\"rulesets/optimizations.xml/AvoidInstantiatingObjectsInLoops\"/>-->\n+  <!--<rule ref=\"rulesets/optimizations.xml/UseArrayListInsteadOfVector\"/>-->\n+  <!--<rule ref=\"rulesets/optimizations.xml/SimplifyStartsWith\"/>-->\n+  <!--<rule ref=\"rulesets/optimizations.xml/UseStringBufferForStringAppends\"/>-->\n+\n+  <!--<rule ref=\"rulesets/strictexception.xml/AvoidCatchingThrowable\"/>-->\n+  <!--<rule ref=\"rulesets/strictexception.xml/SignatureDeclareThrowsException\"/>-->\n+  <!--<rule ref=\"rulesets/strictexception.xml/ExceptionAsFlowControl\"/>-->\n+  <!--<rule ref=\"rulesets/strictexception.xml/AvoidCatchingNPE\"/>-->\n+  <!--<rule ref=\"rulesets/strictexception.xml/AvoidThrowingRawExceptionTypes\"/>-->\n+  <!--<rule ref=\"rulesets/strictexception.xml/AvoidThrowingNullPointerException\"/>-->\n+ \n+  <!--<rule ref=\"rulesets/strings.xml/AvoidDuplicateLiterals\"/>-->\n+  <!--<rule ref=\"rulesets/strings.xml/StringInstantiation\"/>-->\n+  <!--<rule ref=\"rulesets/strings.xml/StringToString\"/>-->\n+  <!--<rule ref=\"rulesets/strings.xml/AvoidConcatenatingNonLiteralsInStringBuffer\"/>-->\n+  <!--<rule ref=\"rulesets/strings.xml/UnnecessaryCaseChange\"/>-->\n+  \n+  <!--<rule ref=\"rulesets/sunsecure.xml/MethodReturnsInternalArray\"/>-->\n+  <!--<rule ref=\"rulesets/sunsecure.xml/ArrayIsStoredDirectly\"/>-->\n+  \n+  <rule ref=\"rulesets/unusedcode.xml/UnusedLocalVariable\"/>\n+  <rule ref=\"rulesets/unusedcode.xml/UnusedPrivateField\"/>\n+  <rule ref=\"rulesets/unusedcode.xml/UnusedPrivateMethod\"/>\n+  <!--<rule ref=\"rulesets/unusedcode.xml/UnusedFormalParameter\"/>-->\n+  \n+</ruleset>", "filename": "runtime/webapp/.ruleset"}, {"additions": 10, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp/pom.xml", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp/pom.xml", "sha": "6592563bf299aa8cb8f173cfc0ec03c00b35d929", "changes": 14, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/runtime/webapp/pom.xml?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7", "patch": "@@ -43,13 +43,19 @@\n             <scope>compile</scope>\n         </dependency>\n \n+        <!-- test dependencies -->\n         <dependency>\n-            <groupId>jmock</groupId>\n-            <artifactId>jmock</artifactId>\n+            <groupId>org.easymock</groupId>\n+            <artifactId>easymockclassextension</artifactId>\n+            <version>2.2</version>\n+            <scope>test</scope>\n         </dependency>\n+\n         <dependency>\n-            <groupId>org.easymock</groupId>\n-            <artifactId>easymock</artifactId>\n+            <groupId>org.apache.tuscany</groupId>\n+            <artifactId>test</artifactId>\n+            <version>${sca.version}</version>\n+            <scope>test</scope>\n         </dependency>\n     </dependencies>\n </project>", "filename": "runtime/webapp/pom.xml"}, {"additions": 2, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp/src/main/java/org/apache/tuscany/runtime/webapp/TuscanyServlet.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp/src/main/java/org/apache/tuscany/runtime/webapp/TuscanyServlet.java", "sha": "e1385e7a1b370c21f089c6cc319dca75cade8f47", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/runtime/webapp/src/main/java/org/apache/tuscany/runtime/webapp/TuscanyServlet.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7", "patch": "@@ -34,6 +34,7 @@\n  */\n public class TuscanyServlet extends HttpServlet {\n \n+    public static final String TUSCANY_SERVLET_REQUEST_INJECTOR = \"Tuscany.ServletRequestInjector\";\n     private static final long serialVersionUID = 1L;\n \n     private ServletRequestInjector servletRequestInjector;\n@@ -42,7 +43,7 @@\n     public void init(ServletConfig config) {\n         ServletContext servletContext = config.getServletContext();\n         this.servletRequestInjector =\n-            (ServletRequestInjector) servletContext.getAttribute(\"Tuscany.ServletRequestInjector\");\n+            (ServletRequestInjector) servletContext.getAttribute(TUSCANY_SERVLET_REQUEST_INJECTOR);\n     }\n \n     @Override", "filename": "runtime/webapp/src/main/java/org/apache/tuscany/runtime/webapp/TuscanyServlet.java"}, {"additions": 76, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp/src/test/java/org/apache/tuscany/runtime/webapp/TuscanyContextListenerTestCase.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp/src/test/java/org/apache/tuscany/runtime/webapp/TuscanyContextListenerTestCase.java", "sha": "abc26f6c35ffc2430b694fba1358e0a8f4c536a7", "changes": 76, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/runtime/webapp/src/test/java/org/apache/tuscany/runtime/webapp/TuscanyContextListenerTestCase.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7", "patch": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tuscany.runtime.webapp;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+\n+import junit.framework.TestCase;\n+import static org.easymock.EasyMock.expect;\n+import org.easymock.classextension.EasyMock;\n+\n+/**\n+ * Verifies a context listener is properly instantiated and lifecycle events are sent to it\n+ *\n+ * @version $Rev$ $Date$\n+ */\n+public class TuscanyContextListenerTestCase extends TestCase {\n+\n+    public void testLifecycle() {\n+        ServletContext context = EasyMock.createMock(ServletContext.class);\n+        expect(context.getInitParameter(TuscanyContextListener.BOOTDIR_PARAM)).andReturn(\"foo\");\n+        expect(context.getResourcePaths(\"foo\")).andReturn(null);\n+        expect(context.getInitParameter(TuscanyContextListener.LAUNCHER_PARAM)).andReturn(TestLauncher.class.getName());\n+        EasyMock.replay(context);\n+        ServletContextEvent event = EasyMock.createMock(ServletContextEvent.class);\n+        EasyMock.expect(event.getServletContext()).andReturn(context);\n+        EasyMock.replay(event);\n+        TuscanyContextListener listener = new TuscanyContextListener();\n+        listener.contextInitialized(event);\n+        assertEquals(1, TestLauncher.getInitialized());\n+        listener.contextDestroyed(event);\n+        assertEquals(1, TestLauncher.getDestroyed());\n+    }\n+\n+    public static class TestLauncher implements ServletContextListener {\n+\n+        private static int initialized;\n+        private static int destroyed;\n+\n+        public TestLauncher() {\n+        }\n+\n+        public static int getInitialized() {\n+            return initialized;\n+        }\n+\n+        public static int getDestroyed() {\n+            return destroyed;\n+        }\n+\n+        public void contextInitialized(ServletContextEvent servletContextEvent) {\n+            ++initialized;\n+        }\n+\n+        public void contextDestroyed(ServletContextEvent servletContextEvent) {\n+            ++destroyed;\n+        }\n+    }\n+}", "filename": "runtime/webapp/src/test/java/org/apache/tuscany/runtime/webapp/TuscanyContextListenerTestCase.java"}, {"additions": 58, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp/src/test/java/org/apache/tuscany/runtime/webapp/TuscanyServletTestCase.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp/src/test/java/org/apache/tuscany/runtime/webapp/TuscanyServletTestCase.java", "sha": "0cbd8333b71919ecc9fbbb402645889d7942da51", "changes": 58, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/runtime/webapp/src/test/java/org/apache/tuscany/runtime/webapp/TuscanyServletTestCase.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7", "patch": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tuscany.runtime.webapp;\n+\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+\n+import junit.framework.TestCase;\n+import org.apache.tuscany.host.servlet.ServletRequestInjector;\n+import org.easymock.EasyMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.isA;\n+\n+/**\n+ * Verifies {@link TuscanyServlet} properly services a request\n+ *\n+ * @version $Rev$ $Date$\n+ */\n+public class TuscanyServletTestCase extends TestCase {\n+\n+    public void testService() throws Exception {\n+        ServletRequestInjector requestInjector = EasyMock.createMock(ServletRequestInjector.class);\n+        requestInjector.service(isA(ServletRequest.class), isA(ServletResponse.class));\n+        EasyMock.expectLastCall();\n+        EasyMock.replay(requestInjector);\n+        ServletContext context = org.easymock.classextension.EasyMock.createMock(ServletContext.class);\n+        expect(context.getAttribute(TuscanyServlet.TUSCANY_SERVLET_REQUEST_INJECTOR)).andReturn(requestInjector);\n+        org.easymock.classextension.EasyMock.replay(context);\n+        ServletConfig config = EasyMock.createMock(ServletConfig.class);\n+        EasyMock.expect(config.getServletContext()).andReturn(context);\n+        EasyMock.replay(config);\n+        TuscanyServlet servlet = new TuscanyServlet();\n+        servlet.init(config);\n+        ServletRequest req = EasyMock.createNiceMock(ServletRequest.class);\n+        ServletResponse res = EasyMock.createNiceMock(ServletResponse.class);\n+        servlet.service(req, res);\n+        EasyMock.verify(requestInjector);\n+    }\n+\n+}", "filename": "runtime/webapp/src/test/java/org/apache/tuscany/runtime/webapp/TuscanyServletTestCase.java"}, {"additions": 8, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/test/src/main/resources/META-INF/tuscany/system.scdl", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/test/src/main/resources/META-INF/tuscany/system.scdl", "sha": "5f23fecb65e137fae2c1055b41822c95facfa6f0", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/test/src/main/resources/META-INF/tuscany/system.scdl?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7", "patch": "@@ -117,4 +117,12 @@\n         <system:implementation.system class=\"org.apache.tuscany.core.services.work.jsr237.Jsr237WorkScheduler\"/>\n     </component>\n \n+    <component name=\"policyBuilderRegistry\">\n+         <system:implementation.system class=\"org.apache.tuscany.core.policy.PolicyBuilderRegistryImpl\"/>\n+    </component>\n+\n+    <component name=\"propertyFactory\">\n+        <system:implementation.system class=\"org.apache.tuscany.core.loader.StringParserPropertyFactory\"/>\n+    </component>\n+    \n </composite>", "filename": "test/src/main/resources/META-INF/tuscany/system.scdl"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/e250bb4581ad3509bf4475f6f3b557a5bb3b317f", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/9c35409607f8865a8042753b65f957018beb36b1", "message": "Currently the JSONP binding shouldn't directly rely on the HTTP binding runtime as there is work to do to ensure that the HTTP binding has reference support and JSONP wire format support (assuming we want to go that way). For now I've ranked the JSONP provider higher than the HTTP provider so that the JSONP runtime will always pick up the JSONP provider now that the JSONP model is an instanceof both the HTTP model and the JSONP model. This should fix the NPE reported on the ML for the short term. \n\ngit-svn-id: https://svn.apache.org/repos/asf/tuscany/sca-java-2.x/trunk@996954 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_131", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e250bb4581ad3509bf4475f6f3b557a5bb3b317f/modules/binding-http-runtime/src/main/resources/META-INF/services/org.apache.tuscany.sca.provider.BindingProviderFactory", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e250bb4581ad3509bf4475f6f3b557a5bb3b317f/modules/binding-http-runtime/src/main/resources/META-INF/services/org.apache.tuscany.sca.provider.BindingProviderFactory", "sha": "48678871eb73d2b49783a48300359c7294911609", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-http-runtime/src/main/resources/META-INF/services/org.apache.tuscany.sca.provider.BindingProviderFactory?ref=e250bb4581ad3509bf4475f6f3b557a5bb3b317f", "patch": "@@ -16,5 +16,5 @@\n # under the License. \r\n \r\n # Implementation class for the binding extension\r\n-org.apache.tuscany.sca.binding.http.provider.HTTPBindingProviderFactory;model=org.apache.tuscany.sca.binding.http.HTTPBinding\r\n+org.apache.tuscany.sca.binding.http.provider.HTTPBindingProviderFactory;model=org.apache.tuscany.sca.binding.http.HTTPBinding,ranking=100\r\n \r", "filename": "modules/binding-http-runtime/src/main/resources/META-INF/services/org.apache.tuscany.sca.provider.BindingProviderFactory"}, {"additions": 2, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e250bb4581ad3509bf4475f6f3b557a5bb3b317f/modules/binding-jsonp-runtime/pom.xml", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e250bb4581ad3509bf4475f6f3b557a5bb3b317f/modules/binding-jsonp-runtime/pom.xml", "sha": "bc6e526184dd00df7bbb186768aa43e4950596db", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-jsonp-runtime/pom.xml?ref=e250bb4581ad3509bf4475f6f3b557a5bb3b317f", "patch": "@@ -36,11 +36,11 @@\n             <version>2.0-SNAPSHOT</version>\n         </dependency>\n \n-        <dependency>\n+        <!-- dependency>\n             <groupId>org.apache.tuscany.sca</groupId>\n             <artifactId>tuscany-binding-http-runtime</artifactId>\n             <version>2.0-SNAPSHOT</version>\n-        </dependency>   \n+        </dependency-->   \n \n         <dependency>\n             <groupId>org.apache.tuscany.sca</groupId>", "filename": "modules/binding-jsonp-runtime/pom.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e250bb4581ad3509bf4475f6f3b557a5bb3b317f/modules/binding-jsonp-runtime/src/main/resources/META-INF/services/org.apache.tuscany.sca.provider.BindingProviderFactory", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e250bb4581ad3509bf4475f6f3b557a5bb3b317f/modules/binding-jsonp-runtime/src/main/resources/META-INF/services/org.apache.tuscany.sca.provider.BindingProviderFactory", "sha": "da84f1ac6dd0461129ade4d687b73749c6782723", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-jsonp-runtime/src/main/resources/META-INF/services/org.apache.tuscany.sca.provider.BindingProviderFactory?ref=e250bb4581ad3509bf4475f6f3b557a5bb3b317f", "patch": "@@ -16,5 +16,5 @@\n # under the License. \r\n \r\n # Implementation class for the binding extension\r\n-org.apache.tuscany.sca.binding.jsonp.runtime.JSONPBindingProviderFactory;model=org.apache.tuscany.sca.binding.jsonp.JSONPBinding\r\n+org.apache.tuscany.sca.binding.jsonp.runtime.JSONPBindingProviderFactory;model=org.apache.tuscany.sca.binding.jsonp.JSONPBinding,ranking=200\r\n \r", "filename": "modules/binding-jsonp-runtime/src/main/resources/META-INF/services/org.apache.tuscany.sca.provider.BindingProviderFactory"}, {"additions": 0, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/e250bb4581ad3509bf4475f6f3b557a5bb3b317f/modules/binding-jsonp-runtime/src/test/java/test/BindingTestCase.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/e250bb4581ad3509bf4475f6f3b557a5bb3b317f/modules/binding-jsonp-runtime/src/test/java/test/BindingTestCase.java", "sha": "0259fdf39da887496f989b1740d0129222a5e32a", "changes": 1, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-jsonp-runtime/src/test/java/test/BindingTestCase.java?ref=e250bb4581ad3509bf4475f6f3b557a5bb3b317f", "patch": "@@ -70,7 +70,6 @@ public void testReference() throws MalformedURLException, IOException {\n     }\n     \n     @Test\n-    //@Ignore(\"TUSCANY-3635\")\n     public void testComplexParams() throws MalformedURLException, IOException {\n         \n         HelloWorldService client = node.getService(HelloWorldService.class, \"HelloWorldClient/HelloWorldService/sca\");", "filename": "modules/binding-jsonp-runtime/src/test/java/test/BindingTestCase.java"}], "repo": "tuscany-sca-2.x"}, {"commit": "https://github.com/apache/tuscany-sca-2.x/commit/ba6389ec5dba927254a27e68c4cf3b8e800fbe9f", "parent": "https://github.com/apache/tuscany-sca-2.x/commit/662c76b60248fafda30725730e81bd8cad15c693", "message": "The JSON and Ajax ServiceBindingProviders were incorrectly calling componentContext.createSelfReference() to get a proxy to the target ComponentService, and this was not working (NPE) with bindings declared on component services (although it was working by chance for bindings declared on composite services if you had no other binding declared on your first component service...). Since a self reference is configured to use the binding from its corresponding service for outgoing calls, it shoulnd't  be used to dispatch incoming calls to the component service, unless you want to go back out to the network :). I fixed the ServiceBindingProviders to use the correct runtime wires from the target service to create a proxy instead of using a self reference.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@566470 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tuscany-sca-2.x_132", "file": [{"additions": 7, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/ba6389ec5dba927254a27e68c4cf3b8e800fbe9f/modules/binding-ajax/src/main/java/org/apache/tuscany/sca/binding/ajax/AjaxService.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/ba6389ec5dba927254a27e68c4cf3b8e800fbe9f/modules/binding-ajax/src/main/java/org/apache/tuscany/sca/binding/ajax/AjaxService.java", "sha": "cb7ef6d60cbff235880e30674ce5c13f1f4c9690", "changes": 9, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-ajax/src/main/java/org/apache/tuscany/sca/binding/ajax/AjaxService.java?ref=ba6389ec5dba927254a27e68c4cf3b8e800fbe9f", "patch": "@@ -20,6 +20,8 @@\n package org.apache.tuscany.sca.binding.ajax;\n \n import org.apache.tuscany.sca.assembly.Binding;\n+import org.apache.tuscany.sca.core.invocation.JDKProxyService;\n+import org.apache.tuscany.sca.core.invocation.ProxyFactory;\n import org.apache.tuscany.sca.http.ServletHost;\n import org.apache.tuscany.sca.interfacedef.java.JavaInterface;\n import org.apache.tuscany.sca.runtime.RuntimeComponent;\n@@ -52,9 +54,12 @@ public void start() {\n         }\n         \n         Class<?> type = ((JavaInterface)rcs.getInterfaceContract().getInterface()).getJavaClass();\n-        Object instance = rc.createSelfReference(type).getService();\n \n-        servlet.addService(binding.getName(), type, instance);\n+        // Create a Java proxy to the target service\n+        ProxyFactory proxyFactory = new JDKProxyService();\n+        Object proxy = proxyFactory.createProxy(type, rcs.getRuntimeWire(binding));\n+\n+        servlet.addService(binding.getName(), type, proxy);\n \n         servletHost.addServletMapping(SERVLET_PATH, servlet);\n     }", "filename": "modules/binding-ajax/src/main/java/org/apache/tuscany/sca/binding/ajax/AjaxService.java"}, {"additions": 11, "raw_url": "https://github.com/apache/tuscany-sca-2.x/raw/ba6389ec5dba927254a27e68c4cf3b8e800fbe9f/modules/binding-jsonrpc/src/main/java/org/apache/tuscany/sca/binding/jsonrpc/JSONRPCService.java", "blob_url": "https://github.com/apache/tuscany-sca-2.x/blob/ba6389ec5dba927254a27e68c4cf3b8e800fbe9f/modules/binding-jsonrpc/src/main/java/org/apache/tuscany/sca/binding/jsonrpc/JSONRPCService.java", "sha": "a5f4d6cbc6751cfa6ee425df5317e9e8957df1a2", "changes": 14, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/tuscany-sca-2.x/contents/modules/binding-jsonrpc/src/main/java/org/apache/tuscany/sca/binding/jsonrpc/JSONRPCService.java?ref=ba6389ec5dba927254a27e68c4cf3b8e800fbe9f", "patch": "@@ -22,11 +22,14 @@\n import java.net.URI;\n \n import org.apache.tuscany.sca.assembly.Binding;\n+import org.apache.tuscany.sca.core.invocation.JDKProxyService;\n+import org.apache.tuscany.sca.core.invocation.ProxyFactory;\n import org.apache.tuscany.sca.http.ServletHost;\n import org.apache.tuscany.sca.interfacedef.Interface;\n import org.apache.tuscany.sca.interfacedef.java.JavaInterface;\n import org.apache.tuscany.sca.runtime.RuntimeComponent;\n import org.apache.tuscany.sca.runtime.RuntimeComponentService;\n+import org.apache.tuscany.sca.runtime.RuntimeWire;\n import org.apache.tuscany.sca.spi.ComponentLifecycle;\n \n /**\n@@ -66,10 +69,15 @@ public JSONRPCService(RuntimeComponent component,\n \n     public void start() {\n         \n-        // Create and register a servlet for this service\n+        // Determine the service business interface\n         Class<?> serviceInterface = getTargetJavaClass(service.getInterfaceContract().getInterface());\n-        Object instance = component.createSelfReference(serviceInterface).getService();\n-        JSONRPCServiceServlet serviceServlet = new JSONRPCServiceServlet(binding.getName(), serviceInterface, instance);\n+\n+        // Create a Java proxy to the target service\n+        ProxyFactory proxyFactory = new JDKProxyService();\n+        Object proxy = proxyFactory.createProxy(serviceInterface, service.getRuntimeWire(binding));\n+        \n+        // Create and register a servlet for this service\n+        JSONRPCServiceServlet serviceServlet = new JSONRPCServiceServlet(binding.getName(), serviceInterface, proxy);\n         int port;\n         servletHost.addServletMapping(binding.getURI(), serviceServlet);\n         URI uri = URI.create(binding.getURI());", "filename": "modules/binding-jsonrpc/src/main/java/org/apache/tuscany/sca/binding/jsonrpc/JSONRPCService.java"}], "repo": "tuscany-sca-2.x"}]
