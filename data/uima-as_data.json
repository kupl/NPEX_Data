[
    {
        "commit": "https://github.com/apache/uima-as/commit/610be190e1e63d19ae99c46df2d819d98e35d7d3",
        "file": [
            {
                "patch": "@@ -50,142 +50,138 @@\n import org.apache.uima.util.impl.ProcessTrace_impl;\n \n /**\n- * Initializes JMS session and creates JMS MessageProducer to be used for sending messages to a\n- * given destination. It extends BaseMessageSender which starts the worker thread and is tasked with\n- * sending messages. The application threads share a common 'queue' with the worker thread. The\n- * application threads add messages to the pendingMessageList 'queue' and the worker thread consumes\n- * them.\n+ * Initializes JMS session and creates JMS MessageProducer to be used for\n+ * sending messages to a given destination. It extends BaseMessageSender which\n+ * starts the worker thread and is tasked with sending messages. The application\n+ * threads share a common 'queue' with the worker thread. The application\n+ * threads add messages to the pendingMessageList 'queue' and the worker thread\n+ * consumes them.\n  * \n  */\n public class ActiveMQMessageSender extends BaseMessageSender {\n-  private static final Class<?> CLASS_NAME = ActiveMQMessageSender.class;\n-\n-  private volatile Connection connection = null;\n-\n-  private Session session = null;\n-\n-  private MessageProducer producer = null;\n-\n-  private String destinationName = null;\n-\n-  private ConcurrentHashMap<Destination, MessageProducer> producerMap = \n-\t\t  new ConcurrentHashMap<Destination, MessageProducer>();\n-\n-  public ActiveMQMessageSender(Connection aConnection, String aDestinationName,\n-          BaseUIMAAsynchronousEngineCommon_impl engine) throws Exception {\n-    super(engine);\n-    connection = aConnection;\n-    destinationName = aDestinationName;\n-  }\n-\n-  public synchronized MessageProducer getMessageProducer(Destination destination) throws Exception {\n-    if (producerMap.containsKey(destination)) {\n-      return (MessageProducer) producerMap.get(destination);\n-    }\n-    createSession();\n-    MessageProducer mProducer = session.createProducer(destination);\n-    mProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\n-    producerMap.put(destination, mProducer);\n-    return mProducer;\n-  }\n-  /**\n-   * This is called when a new Connection is created after broker is restarted\n-   */\n-  public void setConnection(Connection aConnection) {\n-    connection = aConnection;\n-    cleanup();\n-    try {\n-      initializeProducer();\n-    } catch( Exception e) {\n-      if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.WARNING)) {\n-        UIMAFramework.getLogger(CLASS_NAME).logrb(Level.WARNING, getClass().getName(),\n-                \"setConnection\", UIMAEE_Constants.JMS_LOG_RESOURCE_BUNDLE,\n-                \"UIMAEE_exception__WARNING\", e);\n-      }\n-    }\n-    \n-  }\n-  private String getBrokerURL() {\n-    try {\n-      return ((ActiveMQConnection) connection).getBrokerInfo().getBrokerURL();\n-    } catch (Exception ex) { /* handle silently. */\n-    }\n-    return \"\";\n-  }\n-\n-  private void createSession() throws Exception {\n-    String broker = getBrokerURL();\n-    try {\n-      if (session == null || engine.producerInitialized == false) {\n-        session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n-      }\n-    } catch (JMSException e) {\n-      if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.INFO)) {\n-        UIMAFramework.getLogger(CLASS_NAME).logrb(Level.INFO, CLASS_NAME.getName(),\n-                \"createSession\", JmsConstants.JMS_LOG_RESOURCE_BUNDLE,\n-                \"UIMAJMS_client_failed_creating_session_INFO\",\n-                new Object[] { destinationName, broker });\n-      }\n-      if (connection == null) {\n-        if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.INFO)) {\n-          UIMAFramework.getLogger(CLASS_NAME).logrb(Level.INFO, CLASS_NAME.getName(),\n-                  \"createSession\", JmsConstants.JMS_LOG_RESOURCE_BUNDLE,\n-                  \"UIMAJMS_client_connection_not_ready_INFO\", new Object[] { broker });\n-        }\n-      } else if (((ActiveMQConnection) connection).isClosed()\n-              || ((ActiveMQConnection) connection).isClosing()) {\n-        if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.INFO)) {\n-          UIMAFramework.getLogger(CLASS_NAME)\n-                  .logrb(Level.INFO, CLASS_NAME.getName(), \"createSession\",\n-                          JmsConstants.JMS_LOG_RESOURCE_BUNDLE,\n-                          \"UIMAJMS_client_connection_closed_INFO\",\n-                          new Object[] { destinationName, broker });\n-        }\n-      }\n-      throw e;\n-    } catch (Exception e) {\n-      throw e;\n-    }\n-  }\n-  /**\n-   * Returns the full name of the destination queue\n-   */\n-  protected String getDestinationEndpoint() throws Exception {\n-    return ((ActiveMQDestination) producer.getDestination()).getPhysicalName();\n-  }\n-\n-  /**\n-   * Creates a jms session object used to instantiate message producer\n-   */\n-  protected void initializeProducer() throws Exception {\n-    createSession();\n-    producer = getMessageProducer(session.createQueue(destinationName));\n-  }\n-\n-\n-  /**\n-   * Returns jsm MessageProducer\n-   */\n-  public MessageProducer getMessageProducer() {\n-    if ( engine.running && engine.producerInitialized == false  ) {\n-      try {\n-        SharedConnection con = engine.lookupConnection(getBrokerURL());\n-        if ( con != null ) {\n-          setConnection(con.getConnection());\n-          initializeProducer();\n-          engine.producerInitialized = true;\n-        }\n-      } catch( Exception e) {\n-        e.printStackTrace();\n-        if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.WARNING)) {\n-        UIMAFramework.getLogger(CLASS_NAME).logrb(Level.WARNING, getClass().getName(),\n-                \"getMessageProducer\", UIMAEE_Constants.JMS_LOG_RESOURCE_BUNDLE,\n-                \"UIMAEE_exception__WARNING\", e);\n-        }\n-      }\n-    } \n-    return producer;\n-  }\n+\tprivate static final Class<?> CLASS_NAME = ActiveMQMessageSender.class;\n+\n+\tprivate volatile Connection connection = null;\n+\n+\tprivate Session session = null;\n+\n+\tprivate MessageProducer producer = null;\n+\n+\tprivate String destinationName = null;\n+\n+\tprivate ConcurrentHashMap<Destination, MessageProducer> producerMap = new ConcurrentHashMap<Destination, MessageProducer>();\n+\n+\tpublic ActiveMQMessageSender(Connection aConnection, String aDestinationName,\n+\t\t\tBaseUIMAAsynchronousEngineCommon_impl engine) throws Exception {\n+\t\tsuper(engine);\n+\t\tconnection = aConnection;\n+\t\tdestinationName = aDestinationName;\n+\t}\n+\n+\tpublic synchronized MessageProducer getMessageProducer(Destination destination) throws Exception {\n+\t\tif (producerMap.containsKey(destination)) {\n+\t\t\treturn (MessageProducer) producerMap.get(destination);\n+\t\t}\n+\t\tcreateSession();\n+\t\tMessageProducer mProducer = session.createProducer(destination);\n+\t\tmProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\n+\t\tproducerMap.put(destination, mProducer);\n+\t\treturn mProducer;\n+\t}\n+\n+\t/**\n+\t * This is called when a new Connection is created after broker is restarted\n+\t */\n+\tpublic void setConnection(Connection aConnection) {\n+\t\tconnection = aConnection;\n+\t\tcleanup();\n+\t\ttry {\n+\t\t\tinitializeProducer();\n+\t\t} catch (Exception e) {\n+\t\t\tif (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.WARNING)) {\n+\t\t\t\tUIMAFramework.getLogger(CLASS_NAME).logrb(Level.WARNING, getClass().getName(), \"setConnection\",\n+\t\t\t\t\t\tUIMAEE_Constants.JMS_LOG_RESOURCE_BUNDLE, \"UIMAEE_exception__WARNING\", e);\n+\t\t\t}\n+\t\t}\n+\n+\t}\n+\n+\tprivate String getBrokerURL() {\n+\t\ttry {\n+\t\t\treturn ((ActiveMQConnection) connection).getBrokerInfo().getBrokerURL();\n+\t\t} catch (Exception ex) { /* handle silently. */\n+\t\t}\n+\t\treturn \"\";\n+\t}\n+\n+\tprivate void createSession() throws Exception {\n+\t\tString broker = getBrokerURL();\n+\t\ttry {\n+\t\t\tif (session == null || engine.producerInitialized == false) {\n+\t\t\t\tsession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+\t\t\t}\n+\t\t} catch (JMSException e) {\n+\t\t\tif (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.INFO)) {\n+\t\t\t\tUIMAFramework.getLogger(CLASS_NAME).logrb(Level.INFO, CLASS_NAME.getName(), \"createSession\",\n+\t\t\t\t\t\tJmsConstants.JMS_LOG_RESOURCE_BUNDLE, \"UIMAJMS_client_failed_creating_session_INFO\",\n+\t\t\t\t\t\tnew Object[] { destinationName, broker });\n+\t\t\t}\n+\t\t\tif (connection == null) {\n+\t\t\t\tif (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.INFO)) {\n+\t\t\t\t\tUIMAFramework.getLogger(CLASS_NAME).logrb(Level.INFO, CLASS_NAME.getName(), \"createSession\",\n+\t\t\t\t\t\t\tJmsConstants.JMS_LOG_RESOURCE_BUNDLE, \"UIMAJMS_client_connection_not_ready_INFO\",\n+\t\t\t\t\t\t\tnew Object[] { broker });\n+\t\t\t\t}\n+\t\t\t} else if (((ActiveMQConnection) connection).isClosed() || ((ActiveMQConnection) connection).isClosing()) {\n+\t\t\t\tif (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.INFO)) {\n+\t\t\t\t\tUIMAFramework.getLogger(CLASS_NAME).logrb(Level.INFO, CLASS_NAME.getName(), \"createSession\",\n+\t\t\t\t\t\t\tJmsConstants.JMS_LOG_RESOURCE_BUNDLE, \"UIMAJMS_client_connection_closed_INFO\",\n+\t\t\t\t\t\t\tnew Object[] { destinationName, broker });\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tthrow e;\n+\t\t} catch (Exception e) {\n+\t\t\tthrow e;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Returns the full name of the destination queue\n+\t */\n+\tprotected String getDestinationEndpoint() throws Exception {\n+\t\treturn ((ActiveMQDestination) producer.getDestination()).getPhysicalName();\n+\t}\n+\n+\t/**\n+\t * Creates a jms session object used to instantiate message producer\n+\t */\n+\tprotected void initializeProducer() throws Exception {\n+\t\tcreateSession();\n+\t\tproducer = getMessageProducer(session.createQueue(destinationName));\n+\t}\n+\n+\t/**\n+\t * Returns jsm MessageProducer\n+\t */\n+\tpublic MessageProducer getMessageProducer() {\n+\t\tif (engine.running && engine.producerInitialized == false) {\n+\t\t\ttry {\n+\t\t\t\tSharedConnection con = engine.lookupConnection(getBrokerURL());\n+\t\t\t\tif (con != null) {\n+\t\t\t\t\tsetConnection(con.getConnection());\n+\t\t\t\t\tinitializeProducer();\n+\t\t\t\t\tengine.producerInitialized = true;\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\te.printStackTrace();\n+\t\t\t\tif (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.WARNING)) {\n+\t\t\t\t\tUIMAFramework.getLogger(CLASS_NAME).logrb(Level.WARNING, getClass().getName(), \"getMessageProducer\",\n+\t\t\t\t\t\t\tUIMAEE_Constants.JMS_LOG_RESOURCE_BUNDLE, \"UIMAEE_exception__WARNING\", e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn producer;\n+\t}\n \n \tpublic TextMessage createTextMessage() throws Exception {\n \t\tsynchronized (ActiveMQMessageSender.class) {\n@@ -208,14 +204,14 @@ public TextMessage createTextMessage() throws Exception {\n \n \t}\n \n-  public BytesMessage createBytesMessage() throws Exception {\n+\tpublic BytesMessage createBytesMessage() throws Exception {\n \t\tsynchronized (ActiveMQMessageSender.class) {\n-\t\t    if (session == null) {\n-\t\t        //\tForce initialization of Producer\n-\t\t          initializeProducer();\n-\t\t    }\n-\t\t    BytesMessage msg = null;\n-\t\t    try {\n+\t\t\tif (session == null) {\n+\t\t\t\t// Force initialization of Producer\n+\t\t\t\tinitializeProducer();\n+\t\t\t}\n+\t\t\tBytesMessage msg = null;\n+\t\t\ttry {\n \t\t\t\tmsg = session.createBytesMessage();\n \t\t\t} catch (IllegalStateException e) {\n \t\t\t\t// stale Session\n@@ -226,203 +222,202 @@ public BytesMessage createBytesMessage() throws Exception {\n \t\t\treturn msg;\n \t\t}\n \n- //   return session.createBytesMessage();\n-  }\n-\n-  /**\n-   * Cleanup any jms resources used by the worker thread\n-   */\n-  protected void cleanup() { \n-    try {\n-      if (session != null) {\n-        session.close();\n-        session = null;\n-      }\n-      if (producer != null) {\n-        producer.close();\n-        producer = null;\n-      }\n-    } catch (Exception e) {\n-      // Ignore we are shutting down\n-    } finally {\n-      producerMap.clear();\n-    }\n-  }\n-  protected void dispatchMessage(PendingMessage pm, BaseUIMAAsynchronousEngineCommon_impl engine, boolean casProcessRequest ) throws Exception {\n-      SharedConnection sc = \n-    \t\t  engine.lookupConnection(engine.getBrokerURI());\n-      ClientRequest cacheEntry = null;\n-      boolean doCallback = false;\n-      boolean addTimeToLive = true;\n-      Session jmsSession = null;\n-      \n-      // Check the environment for existence of NoTTL tag. If present,\n-      // the deployer of the service wants to disable message expiration.\n-      if (System.getProperty(\"NoTTL\") != null) {\n-        addTimeToLive = false;\n-      }\n-      try {\n-//    \t  long t1 = System.currentTimeMillis();\n-    \t  jmsSession = sc.getConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);\n-          \n-          // Request JMS Message from the concrete implementation\n-          Message message = null;\n-          // Determine if this a CAS Process Request\n-//          boolean casProcessRequest = isProcessRequest(pm);\n-          // Only Process request can be serialized as binary\n-          if (casProcessRequest && (engine.getSerialFormat() != SerialFormat.XMI)) {\n-            message = jmsSession.createBytesMessage();\n-          } else {\n-            message = jmsSession.createTextMessage();\n-          }\n-          //  get the producer initialized from a valid connection\n-         // producer = getMessageProducer();\n-          \n-          Destination d = null;\n-          String selector = null;\n-          // UIMA-AS ver 2.10.0 + sends Free Cas request to a service targeted queue\n-          // instead of a temp queue. Regular queues can be recovered in case of\n-          // a broker restart. The test below will be true for UIMA-AS v. 2.10.0 +.\n-          // Code in JmsOutputChannel will add the selector if the service is a CM.\n-          if (pm.get(AsynchAEMessage.TargetingSelector) != null) {\n-        \t  selector = (String)pm.get(AsynchAEMessage.TargetingSelector);\n-          }\n-          if ( selector == null && (pm.getMessageType() == AsynchAEMessage.ReleaseCAS || pm.getMessageType() == AsynchAEMessage.Stop) ) {\n-        \t  d = (Destination)pm.get(AsynchAEMessage.Destination);\n-              \n-          } else {\n-              d = jmsSession.createQueue(destinationName);\n-          }\n-          MessageProducer mProducer = jmsSession.createProducer(d);\n-          mProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\n-          //System.out.println(\">>>>>>> Time to create and initialize JMS Sesssion:\"+(System.currentTimeMillis()-t1));\n-          super.initializeMessage(pm, message);\n-    \t  String destination = ((ActiveMQDestination) d).getPhysicalName();\n-          if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.FINE)) {\n-            UIMAFramework.getLogger(CLASS_NAME).logrb(\n-                    Level.FINE,\n-                    CLASS_NAME.getName(),\n-                    \"run\",\n-                    JmsConstants.JMS_LOG_RESOURCE_BUNDLE,\n-                    \"UIMAJMS_sending_msg_to_endpoint__FINE\",\n-                    new Object[] {\n-                        UimaMessageValidator.decodeIntToString(AsynchAEMessage.Command, message\n-                                .getIntProperty(AsynchAEMessage.Command)),\n-                        UimaMessageValidator.decodeIntToString(AsynchAEMessage.MessageType, message\n-                                .getIntProperty(AsynchAEMessage.MessageType)), destination });\n-          }\n-          if (casProcessRequest) {\n-            cacheEntry = (ClientRequest) engine.getCache().get(\n-                    pm.get(AsynchAEMessage.CasReference));\n-            if (cacheEntry != null) {\n-            //    CAS cas = cacheEntry.getCAS();\n-                // enable logging \n-                if (System.getProperty(\"UimaAsCasTracking\") != null) {\n-                  message.setStringProperty(\"UimaAsCasTracking\", \"enable\");\n-                }\n-                // Target specific service instance if targeting for the CAS is provided\n-                // by the client application\n-    \t\t\tif ( cacheEntry.getTargetServiceId() != null ) {\n- //   \t\t\t\tSystem.out.println(\"------------Client Sending CAS to Service Instance With Id:\"+cacheEntry.getTargetServiceId());;\n-    \t\t\t\tmessage.setStringProperty(UimaAsynchronousEngine.TargetSelectorProperty, cacheEntry.getTargetServiceId());\n-    \t\t\t}\n-         \t   // Use Process Timeout value for the time-to-live property in the\n-              // outgoing JMS message. When this time is exceeded\n-              // while the message sits in a queue, the JMS Server will remove it from\n-              // the queue. What happens with the expired message depends on the\n-              // configuration. Most JMS Providers create a special dead-letter queue\n-              // where all expired messages are placed. NOTE: In ActiveMQ expired msgs in the DLQ\n-              // are not auto evicted yet and accumulate taking up memory.\n-              long timeoutValue = cacheEntry.getProcessTimeout();\n-\n-              if (timeoutValue > 0 && addTimeToLive ) {\n-                // Set high time to live value\n-                message.setJMSExpiration(10 * timeoutValue);\n-              }\n-              if (pm.getMessageType() == AsynchAEMessage.Process) {\n-                cacheEntry.setCASDepartureTime(System.nanoTime());\n-              }\n-              cacheEntry.setCASDepartureTime(System.nanoTime());\n-      \n-              doCallback = true;\n-              \n-          } else {\n-              if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.WARNING)) {\n-\n-                  UIMAFramework.getLogger(CLASS_NAME).logrb(\n-                          Level.WARNING,\n-                          CLASS_NAME.getName(),\n-                          \"run\",\n-                          JmsConstants.JMS_LOG_RESOURCE_BUNDLE,\n-                          \"UIMAJMS_failed_cache_lookup__WARNING\",\n-                          new Object[] {\n-                         \t pm.get(AsynchAEMessage.CasReference),\n-                              UimaMessageValidator.decodeIntToString(AsynchAEMessage.Command, message\n-                                      .getIntProperty(AsynchAEMessage.Command)),\n-                              UimaMessageValidator.decodeIntToString(AsynchAEMessage.MessageType, message\n-                                      .getIntProperty(AsynchAEMessage.MessageType)), destination });\n-                }\n-             }\n-         \t \n-          }\n-          // start timers\n-          if( casProcessRequest ) { \n-         \t CAS cas = cacheEntry.getCAS();\n-\n-\n-            // Add the cas to a list of CASes pending reply. Also start the timer if necessary\n-            engine.serviceDelegate.addCasToOutstandingList(cacheEntry.getCasReferenceId(), cas.hashCode(), engine.timerPerCAS); // true=timer per cas\n-            if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.FINE)) {\n-         \t   UIMAFramework.getLogger(CLASS_NAME).logrb(Level.FINE, CLASS_NAME.getName(),\n-                     \"sendCAS\", JmsConstants.JMS_LOG_RESOURCE_BUNDLE,\n-                     \"UIMAJMS_cas_added_to_pending_FINE\", new Object[] { cacheEntry.getCasReferenceId(), String.valueOf(cas.hashCode()), engine.serviceDelegate.toString()});\n+\t\t// return session.createBytesMessage();\n+\t}\n+\n+\t/**\n+\t * Cleanup any jms resources used by the worker thread\n+\t */\n+\tprotected void cleanup() {\n+\t\ttry {\n+\t\t\tif (session != null) {\n+\t\t\t\tsession.close();\n+\t\t\t\tsession = null;\n+\t\t\t}\n+\t\t\tif (producer != null) {\n+\t\t\t\tproducer.close();\n+\t\t\t\tproducer = null;\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\t// Ignore we are shutting down\n+\t\t} finally {\n+\t\t\tproducerMap.clear();\n+\t\t}\n+\t}\n+\n+\tprotected void dispatchMessage(PendingMessage pm, BaseUIMAAsynchronousEngineCommon_impl engine,\n+\t\t\tboolean casProcessRequest) throws Exception {\n+\t\tSharedConnection sc = engine.lookupConnection(engine.getBrokerURI());\n+\t\tClientRequest cacheEntry = null;\n+\t\tboolean doCallback = false;\n+\t\tboolean addTimeToLive = true;\n+\t\tSession jmsSession = null;\n+\n+\t\t// Check the environment for existence of NoTTL tag. If present,\n+\t\t// the deployer of the service wants to disable message expiration.\n+\t\tif (System.getProperty(\"NoTTL\") != null) {\n+\t\t\taddTimeToLive = false;\n+\t\t}\n+\t\ttry {\n+\t\t\t// long t1 = System.currentTimeMillis();\n+\t\t\tjmsSession = sc.getConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);\n+\n+\t\t\t// Request JMS Message from the concrete implementation\n+\t\t\tMessage message = null;\n+\t\t\t// Determine if this a CAS Process Request\n+\t\t\t// boolean casProcessRequest = isProcessRequest(pm);\n+\t\t\t// Only Process request can be serialized as binary\n+\t\t\tif (casProcessRequest && (engine.getSerialFormat() != SerialFormat.XMI)) {\n+\t\t\t\tmessage = jmsSession.createBytesMessage();\n+\t\t\t} else {\n+\t\t\t\tmessage = jmsSession.createTextMessage();\n+\t\t\t}\n+\t\t\t// get the producer initialized from a valid connection\n+\t\t\t// producer = getMessageProducer();\n+\n+\t\t\tDestination d = null;\n+\t\t\tString selector = null;\n+\t\t\t// UIMA-AS ver 2.10.0 + sends Free Cas request to a service targeted queue\n+\t\t\t// instead of a temp queue. Regular queues can be recovered in case of\n+\t\t\t// a broker restart. The test below will be true for UIMA-AS v. 2.10.0 +.\n+\t\t\t// Code in JmsOutputChannel will add the selector if the service is a CM.\n+\t\t\tif (pm.get(AsynchAEMessage.TargetingSelector) != null) {\n+\t\t\t\tselector = (String) pm.get(AsynchAEMessage.TargetingSelector);\n+\t\t\t}\n+\t\t\tif (selector == null && (pm.getMessageType() == AsynchAEMessage.ReleaseCAS\n+\t\t\t\t\t|| pm.getMessageType() == AsynchAEMessage.Stop)) {\n+\t\t\t\td = (Destination) pm.get(AsynchAEMessage.Destination);\n+\n+\t\t\t} else {\n+\t\t\t\td = jmsSession.createQueue(destinationName);\n+\t\t\t}\n+\t\t\tMessageProducer mProducer = jmsSession.createProducer(d);\n+\t\t\tmProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\n+\t\t\t// System.out.println(\">>>>>>> Time to create and initialize JMS\n+\t\t\t// Sesssion:\"+(System.currentTimeMillis()-t1));\n+\t\t\tsuper.initializeMessage(pm, message);\n+\t\t\tString destination = ((ActiveMQDestination) d).getPhysicalName();\n+\t\t\tif (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.FINE)) {\n+\t\t\t\tUIMAFramework.getLogger(CLASS_NAME).logrb(Level.FINE, CLASS_NAME.getName(), \"run\",\n+\t\t\t\t\t\tJmsConstants.JMS_LOG_RESOURCE_BUNDLE, \"UIMAJMS_sending_msg_to_endpoint__FINE\",\n+\t\t\t\t\t\tnew Object[] {\n+\t\t\t\t\t\t\t\tUimaMessageValidator.decodeIntToString(AsynchAEMessage.Command,\n+\t\t\t\t\t\t\t\t\t\tmessage.getIntProperty(AsynchAEMessage.Command)),\n+\t\t\t\t\t\t\t\tUimaMessageValidator.decodeIntToString(AsynchAEMessage.MessageType,\n+\t\t\t\t\t\t\t\t\t\tmessage.getIntProperty(AsynchAEMessage.MessageType)),\n+\t\t\t\t\t\t\t\tdestination });\n+\t\t\t}\n+\t\t\tif (casProcessRequest) {\n+\t\t\t\tcacheEntry = (ClientRequest) engine.getCache().get(pm.get(AsynchAEMessage.CasReference));\n+\t\t\t\tif (cacheEntry != null) {\n+\t\t\t\t\t// CAS cas = cacheEntry.getCAS();\n+\t\t\t\t\t// enable logging\n+\t\t\t\t\tif (System.getProperty(\"UimaAsCasTracking\") != null) {\n+\t\t\t\t\t\tmessage.setStringProperty(\"UimaAsCasTracking\", \"enable\");\n+\t\t\t\t\t}\n+\t\t\t\t\t// Target specific service instance if targeting for the CAS is provided\n+\t\t\t\t\t// by the client application\n+\t\t\t\t\tif (cacheEntry.getTargetServiceId() != null) {\n+\t\t\t\t\t\t// System.out.println(\"------------Client Sending CAS to Service Instance With\n+\t\t\t\t\t\t// Id:\"+cacheEntry.getTargetServiceId());;\n+\t\t\t\t\t\tmessage.setStringProperty(UimaAsynchronousEngine.TargetSelectorProperty,\n+\t\t\t\t\t\t\t\tcacheEntry.getTargetServiceId());\n+\t\t\t\t\t}\n+\t\t\t\t\t// Use Process Timeout value for the time-to-live property in the\n+\t\t\t\t\t// outgoing JMS message. When this time is exceeded\n+\t\t\t\t\t// while the message sits in a queue, the JMS Server will remove it from\n+\t\t\t\t\t// the queue. What happens with the expired message depends on the\n+\t\t\t\t\t// configuration. Most JMS Providers create a special dead-letter queue\n+\t\t\t\t\t// where all expired messages are placed. NOTE: In ActiveMQ expired msgs in the\n+\t\t\t\t\t// DLQ\n+\t\t\t\t\t// are not auto evicted yet and accumulate taking up memory.\n+\t\t\t\t\tlong timeoutValue = cacheEntry.getProcessTimeout();\n+\n+\t\t\t\t\tif (timeoutValue > 0 && addTimeToLive) {\n+\t\t\t\t\t\t// Set high time to live value\n+\t\t\t\t\t\tmessage.setJMSExpiration(10 * timeoutValue);\n+\t\t\t\t\t}\n+\t\t\t\t\tif (pm.getMessageType() == AsynchAEMessage.Process) {\n+\t\t\t\t\t\tcacheEntry.setCASDepartureTime(System.nanoTime());\n+\t\t\t\t\t}\n+\t\t\t\t\tcacheEntry.setCASDepartureTime(System.nanoTime());\n+\n+\t\t\t\t\tdoCallback = true;\n+\n+\t\t\t\t} else {\n+\t\t\t\t\tif (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.WARNING)) {\n+\n+\t\t\t\t\t\tUIMAFramework.getLogger(CLASS_NAME).logrb(Level.WARNING, CLASS_NAME.getName(), \"run\",\n+\t\t\t\t\t\t\t\tJmsConstants.JMS_LOG_RESOURCE_BUNDLE, \"UIMAJMS_failed_cache_lookup__WARNING\",\n+\t\t\t\t\t\t\t\tnew Object[] { pm.get(AsynchAEMessage.CasReference),\n+\t\t\t\t\t\t\t\t\t\tUimaMessageValidator.decodeIntToString(AsynchAEMessage.Command,\n+\t\t\t\t\t\t\t\t\t\t\t\tmessage.getIntProperty(AsynchAEMessage.Command)),\n+\t\t\t\t\t\t\t\t\t\tUimaMessageValidator.decodeIntToString(AsynchAEMessage.MessageType,\n+\t\t\t\t\t\t\t\t\t\t\t\tmessage.getIntProperty(AsynchAEMessage.MessageType)),\n+\t\t\t\t\t\t\t\t\t\tdestination });\n+\t\t\t\t\t}\n+\t\t\t\t\treturn;  // no cacheEntry so just return\n+\t\t\t\t}\n+\n+\t\t\t}\n+\t\t\t// start timers\n+\t\t\tif (casProcessRequest) {\n+\t\t\t\tCAS cas = cacheEntry.getCAS();\n+\n+\t\t\t\t// Add the cas to a list of CASes pending reply. Also start the timer if\n+\t\t\t\t// necessary\n+\t\t\t\tengine.serviceDelegate.addCasToOutstandingList(cacheEntry.getCasReferenceId(), cas.hashCode(),\n+\t\t\t\t\t\tengine.timerPerCAS); // true=timer per cas\n+\t\t\t\tif (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.FINE)) {\n+\t\t\t\t\tUIMAFramework.getLogger(CLASS_NAME).logrb(Level.FINE, CLASS_NAME.getName(), \"sendCAS\",\n+\t\t\t\t\t\t\tJmsConstants.JMS_LOG_RESOURCE_BUNDLE, \"UIMAJMS_cas_added_to_pending_FINE\",\n+\t\t\t\t\t\t\tnew Object[] { cacheEntry.getCasReferenceId(), String.valueOf(cas.hashCode()),\n+\t\t\t\t\t\t\t\t\tengine.serviceDelegate.toString() });\n+\t\t\t\t}\n+\n+\t\t\t} else if (pm.getMessageType() == AsynchAEMessage.GetMeta\n+\t\t\t\t\t&& engine.serviceDelegate.getGetMetaTimeout() > 0) {\n+\t\t\t\t// timer for PING has been started in sendCAS()\n+\t\t\t\tif (!engine.serviceDelegate.isAwaitingPingReply()) {\n+\t\t\t\t\tengine.serviceDelegate.startGetMetaRequestTimer();\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tdoCallback = false; // dont call onBeforeMessageSend() callback on CPC\n+\t\t\t}\n+\t\t\t// Dispatch asynchronous request to Uima AS service\n+\t\t\tmProducer.send(message);\n+\n+\t\t\tif (doCallback) {\n+\t\t\t\tUimaASProcessStatus status = new UimaASProcessStatusImpl(new ProcessTrace_impl(), cacheEntry.getCAS(),\n+\t\t\t\t\t\tcacheEntry.getCasReferenceId());\n+\t\t\t\t// Notify engine before sending a message\n+\t\t\t\tif (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.FINE)) {\n+\t\t\t\t\tUIMAFramework.getLogger(CLASS_NAME).logrb(Level.FINE, CLASS_NAME.getName(), \"run\",\n+\t\t\t\t\t\t\tJmsConstants.JMS_LOG_RESOURCE_BUNDLE, \"UIMAJMS_calling_onBeforeMessageSend__FINE\",\n+\t\t\t\t\t\t\tnew Object[] { pm.get(AsynchAEMessage.CasReference),\n+\t\t\t\t\t\t\t\t\tString.valueOf(cacheEntry.getCAS().hashCode()) });\n+\t\t\t\t}\n+\t\t\t\t// Note the callback is a misnomer. The callback is made *after* the send now\n+\t\t\t\t// Application receiving this callback can consider the CAS as delivere to a\n+\t\t\t\t// queue\n+\t\t\t\tengine.onBeforeMessageSend(status);\n+\n+\t\t\t}\n+\t\t} catch( Exception e) {\n+            if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.WARNING)) {\n+                UIMAFramework.getLogger(CLASS_NAME).logrb(Level.WARNING, getClass().getName(),\n+                        \"run\", UIMAEE_Constants.JMS_LOG_RESOURCE_BUNDLE,\n+                        \"UIMAEE_exception__WARNING\", e);\n             }\n+\t\t} finally {\n+\t\t\tif (jmsSession != null) {\n+\t\t\t\ttry {\n+\t\t\t\t\tjmsSession.close();\n+\t\t\t\t} catch (Exception eee) {\n \n-          \n-          } else if ( pm.getMessageType() == AsynchAEMessage.GetMeta &&\n-                  engine.serviceDelegate.getGetMetaTimeout() > 0 ) {\n-            // timer for PING has been started in sendCAS()\n-            if ( !engine.serviceDelegate.isAwaitingPingReply()) {\n-              engine.serviceDelegate.startGetMetaRequestTimer();\n-            } \n-          } else {\n-         \t doCallback = false;  // dont call onBeforeMessageSend() callback on CPC\n-          }\n-          //  Dispatch asynchronous request to Uima AS service\n-          mProducer.send(message);\n-          \n-          if ( doCallback ) {\n-            UimaASProcessStatus status = new UimaASProcessStatusImpl(new ProcessTrace_impl(),cacheEntry.getCAS(),\n-                    cacheEntry.getCasReferenceId());\n-            // Notify engine before sending a message\n-            if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.FINE)) {\n-                UIMAFramework.getLogger(CLASS_NAME).logrb(\n-                        Level.FINE,\n-                        CLASS_NAME.getName(),\n-                        \"run\",\n-                        JmsConstants.JMS_LOG_RESOURCE_BUNDLE,\n-                        \"UIMAJMS_calling_onBeforeMessageSend__FINE\",\n-                        new Object[] {\n-                          pm.get(AsynchAEMessage.CasReference),\n-                          String.valueOf(cacheEntry.getCAS().hashCode())\n-                        });\n-              }  \n-            // Note the callback is a misnomer. The callback is made *after* the send now\n-            // Application receiving this callback can consider the CAS as delivere to a queue\n-            engine.onBeforeMessageSend(status);\n-          \n-          \n-          }\n-      } finally {\n-    \t  if ( jmsSession != null ) {\n-    \t\t  try {\n-    \t\t\t  jmsSession.close(); \n-    \t\t  } catch( Exception eee) {\n-    \t\t\t  \n-    \t\t  }\n-    \t  }\n-      }\n-\n-\n-  }\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t}\n }\n\\ No newline at end of file",
                "additions": 332,
                "raw_url": "https://github.com/apache/uima-as/raw/610be190e1e63d19ae99c46df2d819d98e35d7d3/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/ActiveMQMessageSender.java",
                "status": "modified",
                "changes": 669,
                "deletions": 337,
                "sha": "4293dde83fc284f174de6411fc4b60dfb8c85dc4",
                "blob_url": "https://github.com/apache/uima-as/blob/610be190e1e63d19ae99c46df2d819d98e35d7d3/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/ActiveMQMessageSender.java",
                "filename": "uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/ActiveMQMessageSender.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/ActiveMQMessageSender.java?ref=610be190e1e63d19ae99c46df2d819d98e35d7d3"
            }
        ],
        "bug_id": "uima-as_1",
        "parent": "https://github.com/apache/uima-as/commit/28e9e72bf97b582ef71a751ff6361bfc19f0a3fe",
        "message": "UIMA-5906 fixed cause of NPE and added logging if there is an exception\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-as/trunk@1846728 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "uima-as"
    },
    {
        "commit": "https://github.com/apache/uima-as/commit/5bdb2bef20b8236a404bafbdc857768fc554a9f5",
        "file": [
            {
                "patch": "@@ -1717,6 +1717,7 @@ public void testAsyncClientRecoveryFromBrokerStopAndRestart() throws Exception\n    * @throws Exception\n    */\n \n+  /*\n   @Test\n   public void testMultipleClientsRecoveryFromBrokerStopAndRestart() throws Exception  {\n     System.out.println(\"-------------- testMultipleClientsRecoveryFromBrokerStopAndRestart -------------\");\n@@ -1800,6 +1801,7 @@ public void testMultipleClientsRecoveryFromBrokerStopAndRestart() throws Excepti\n       broker2.waitUntilStopped();\n \n   }\n+  */\n   /**\n    * Tests ability of an aggregate to recover from a Broker restart. The broker managing\n    * delegate's input queue is stopped after 1st CAS is fully processed. As part of error",
                "additions": 2,
                "raw_url": "https://github.com/apache/uima-as/raw/5bdb2bef20b8236a404bafbdc857768fc554a9f5/uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "42713ac95b9a98a1c669b77a64924b1cabfca677",
                "blob_url": "https://github.com/apache/uima-as/blob/5bdb2bef20b8236a404bafbdc857768fc554a9f5/uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java",
                "filename": "uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java?ref=5bdb2bef20b8236a404bafbdc857768fc554a9f5"
            }
        ],
        "bug_id": "uima-as_2",
        "parent": "https://github.com/apache/uima-as/commit/d0b6b3d3850d79b35f7f7809997ab44183e0ff97",
        "message": "UIMA-5703 fixed NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-as/trunk@1821015 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "uima-as"
    },
    {
        "commit": "https://github.com/apache/uima-as/commit/d0b6b3d3850d79b35f7f7809997ab44183e0ff97",
        "file": [
            {
                "patch": "@@ -2005,7 +2005,7 @@ public void stop(Throwable cause, String aCasReferenceId, boolean shutdownNow )\n     if (inputChannelList != null) {\n       inputChannelList.clear();\n     }\n-    inputChannel = null;\n+    //inputChannel = null;\n \n     if (serviceErrorMap != null) {\n       serviceErrorMap.clear();\n@@ -2149,7 +2149,6 @@ public void terminate() {\n   }\n \n   public void terminate(Throwable cause, String aCasReferenceId) {\n-\n       if (stopLatch.getCount() > 0) {\n         if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.INFO)) {\n           UIMAFramework.getLogger(CLASS_NAME).logrb(Level.INFO, getClass().getName(), \"terminate\",\n@@ -2431,9 +2430,9 @@ public AnalysisEngineController getCasMultiplierController(String cmKey) {\n   public InputChannel getInputChannel(String anEndpointName) {\n \n     for (int i = 0; inputChannelList != null && i < inputChannelList.size(); i++) {\n-      InputChannel iC = (InputChannel) inputChannelList.get(i);\n-      if (iC.isListenerForDestination(anEndpointName)) {\n-        return (InputChannel) inputChannelList.get(i);\n+      InputChannel iC = inputChannelList.get(i);\n+      if (iC != null && iC.isListenerForDestination(anEndpointName)) {\n+        return inputChannelList.get(i);\n       }\n     }\n     return null;",
                "additions": 4,
                "raw_url": "https://github.com/apache/uima-as/raw/d0b6b3d3850d79b35f7f7809997ab44183e0ff97/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/BaseAnalysisEngineController.java",
                "status": "modified",
                "changes": 9,
                "deletions": 5,
                "sha": "1bf2e565416e0b3b5e5d327a799b26d2fabd157f",
                "blob_url": "https://github.com/apache/uima-as/blob/d0b6b3d3850d79b35f7f7809997ab44183e0ff97/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/BaseAnalysisEngineController.java",
                "filename": "uimaj-as-core/src/main/java/org/apache/uima/aae/controller/BaseAnalysisEngineController.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/BaseAnalysisEngineController.java?ref=d0b6b3d3850d79b35f7f7809997ab44183e0ff97"
            }
        ],
        "bug_id": "uima-as_3",
        "parent": "https://github.com/apache/uima-as/commit/add625b2ce55b09442aec680d28d44923990cd7f",
        "message": "UIMA-5703 Fixed cause of the NPE. While cleaning up the inputchannel instance is set to null by one thread while other threads still operates on that instance. Fix was to remove nullifying the inputchannel instance. No need to do that.\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-as/trunk@1820935 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "uima-as"
    },
    {
        "commit": "https://github.com/apache/uima-as/commit/480ea6f5818ba6bbf7f1f7da8f3c2f5d5f954983",
        "file": [
            {
                "patch": "@@ -678,6 +678,20 @@ public boolean send(final Message aMessage, long msgSize, boolean startTimer, bo\n                   new Object[] { destinationName });\n         }\n         logMessageSize(aMessage, msgSize, destinationName);\n+  \t  // If in ParallelStep its possible to receive a reply from one of the delegates in parallel \n+  \t  // step *before* a CAS is dispatched to all of the delegates. This can cause a problem\n+  \t  // as replies are merged which causes the CAS to be in an inconsistent state.\n+  \t  // The following code calls dispatchCasToParallelDelegate() which count down\n+  \t  // a java latch. The same latch is used when receiving replies. If the latch is non zero\n+  \t  // the code blocks a thread from performing deserialization.\n+  \t  if ( msgType == AsynchAEMessage.Request && command == AsynchAEMessage.Process ) {\n+  \t\t  String casReferenceId = aMessage.getStringProperty(AsynchAEMessage.CasReference);\n+  \t\t  CasStateEntry casStateEntry = controller.getLocalCache().lookupEntry(casReferenceId);\n+  \t\t  if ( casStateEntry.getNumberOfParallelDelegates() > 0) {\n+  \t\t\t  casStateEntry.dispatchedCasToParallelDelegate();\n+  \t\t  }\n+  \t  }\n+\n         synchronized (producer) {\n           producer.send(aMessage);\n         }\n@@ -694,20 +708,6 @@ public boolean send(final Message aMessage, long msgSize, boolean startTimer, bo\n       // record the time when this dispatches sent a message. This time will be used\n       // to find inactive sessions.\n \t  lastDispatchTimestamp.set(System.currentTimeMillis());\n-\t  \n-\t  // If in ParallelStep its possible to receive a reply from one of the delegates in parallel \n-\t  // step *before* a CAS is dispatched to all of the delegates. This can cause a problem\n-\t  // as replies are merged which causes the CAS to be in an inconsistent state.\n-\t  // The following code calls dispatchCasToParallelDelegate() which count down\n-\t  // a java latch. The same latch is used when receiving replies. If the latch is non zero\n-\t  // the code blocks a thread from performing deserialization.\n-\t  if ( msgType == AsynchAEMessage.Request && command == AsynchAEMessage.Process ) {\n-\t\t  String casReferenceId = aMessage.getStringProperty(AsynchAEMessage.CasReference);\n-\t\t  CasStateEntry casStateEntry = controller.getLocalCache().lookupEntry(casReferenceId);\n-\t\t  if ( casStateEntry.getNumberOfParallelDelegates() > 0) {\n-\t\t\t  casStateEntry.dispatchedCasToParallelDelegate();\n-\t\t  }\n-\t  }\n       // Succeeded sending the CAS\n       return true;\n     } catch (Exception e) {",
                "additions": 14,
                "raw_url": "https://github.com/apache/uima-as/raw/480ea6f5818ba6bbf7f1f7da8f3c2f5d5f954983/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/activemq/JmsEndpointConnection_impl.java",
                "status": "modified",
                "changes": 28,
                "deletions": 14,
                "sha": "0ade20845ea7da29034378c234f4437577d32373",
                "blob_url": "https://github.com/apache/uima-as/blob/480ea6f5818ba6bbf7f1f7da8f3c2f5d5f954983/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/activemq/JmsEndpointConnection_impl.java",
                "filename": "uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/activemq/JmsEndpointConnection_impl.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/activemq/JmsEndpointConnection_impl.java?ref=480ea6f5818ba6bbf7f1f7da8f3c2f5d5f954983"
            }
        ],
        "bug_id": "uima-as_4",
        "parent": "https://github.com/apache/uima-as/commit/fa60ad3c77a92558c5e5052558d2173a7f50ebb3",
        "message": "UIMA-4857 fixed race condition causing NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-as/trunk@1735296 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "uima-as"
    },
    {
        "commit": "https://github.com/apache/uima-as/commit/13b3f9710b4a7a9a7d5931026dc7281904fcf614",
        "file": [
            {
                "patch": "@@ -2013,7 +2013,11 @@ private void sendReplyWithException(CacheEntry acacheEntry, CasStateEntry casSta\n \n   private boolean sendExceptionToClient(CacheEntry cacheEntry, CasStateEntry casStateEntry,\n           Endpoint replyEndpoint) throws Exception {\n-    // Dont send CASes to the client if the input CAS is in failed state. One\n+\n+\tif ( casStateEntry == null ) {\n+\t\treturn false;\n+\t}\n+\t  // Dont send CASes to the client if the input CAS is in failed state. One\n     // of the descendant CASes may have failed in one of the delegates. Any\n     // exception on descendant CAS causes the input CAS to be returned to the\n     // client with an exception but only when all its descendant CASes are",
                "additions": 5,
                "raw_url": "https://github.com/apache/uima-as/raw/13b3f9710b4a7a9a7d5931026dc7281904fcf614/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java",
                "status": "modified",
                "changes": 6,
                "deletions": 1,
                "sha": "aae2b1f02333bc80da9c619f72354092a24b72f7",
                "blob_url": "https://github.com/apache/uima-as/blob/13b3f9710b4a7a9a7d5931026dc7281904fcf614/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java",
                "filename": "uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java?ref=13b3f9710b4a7a9a7d5931026dc7281904fcf614"
            }
        ],
        "bug_id": "uima-as_5",
        "parent": "https://github.com/apache/uima-as/commit/f54941cf49d894be500c59ca86b42a4eda49d151",
        "message": "UIMA-2668 Modified sendExceptionToClient to prevent NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-as/trunk@1492445 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "uima-as"
    },
    {
        "commit": "https://github.com/apache/uima-as/commit/80c2562cc27a637b1b6c6ad1647921e1b1a7274f",
        "file": [
            {
                "patch": "@@ -2006,23 +2006,29 @@ private boolean sendExceptionToClient(CacheEntry cacheEntry, CasStateEntry casSt\n       // Fetch the top ancestor CAS of this CAS.\n       CasStateEntry topAncestorCasStateEntry = getLocalCache().getTopCasAncestor(\n               casStateEntry.getInputCasReferenceId());\n-      // check the state\n-      if (topAncestorCasStateEntry.isFailed() && casHasExceptions(casStateEntry)\n-              && topAncestorCasStateEntry.getSubordinateCasInPlayCount() == 0) {\n-        return true;\n-      } else {\n-        // Add the id of the generated CAS to the map holding outstanding CASes. This\n-        // map will be referenced when a client sends Free CAS Notification. The map\n-        // stores the id of the CAS both as a key and a value. Map is used to facilitate\n-        // quick lookup\n-        cmOutstandingCASes\n-                .put(casStateEntry.getCasReferenceId(), casStateEntry.getCasReferenceId());\n-      }\n-    } else if (casStateEntry.isFailed() && casHasExceptions(casStateEntry)) {\n-      return true;\n-    }\n+      if ( topAncestorCasStateEntry != null ) {\n+    \t// check the state\n+          if (topAncestorCasStateEntry.isFailed() && casHasExceptions(casStateEntry)\n+                  && topAncestorCasStateEntry.getSubordinateCasInPlayCount() == 0) {\n+            return true;\n+          } else {\n+            // Add the id of the generated CAS to the map holding outstanding CASes. This\n+            // map will be referenced when a client sends Free CAS Notification. The map\n+            // stores the id of the CAS both as a key and a value. Map is used to facilitate\n+            // quick lookup\n+            cmOutstandingCASes\n+                    .put(casStateEntry.getCasReferenceId(), casStateEntry.getCasReferenceId());\n+          }\n+        } else if (casStateEntry.isFailed() && casHasExceptions(casStateEntry)) {\n+          return true;\n+        }\n+      } else  if (casStateEntry.isFailed() && casHasExceptions(casStateEntry)) {\n+         return true;\n+      }\n+      \n     return false;\n-  }\n+  }  \n+  \n \n   private void sendReplyToRemoteClient(CacheEntry cacheEntry, CasStateEntry casStateEntry,\n           Endpoint replyEndpoint) throws Exception {",
                "additions": 22,
                "raw_url": "https://github.com/apache/uima-as/raw/80c2562cc27a637b1b6c6ad1647921e1b1a7274f/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java",
                "status": "modified",
                "changes": 38,
                "deletions": 16,
                "sha": "539e8533ecd340b102d0ed4d92791592f4be27d4",
                "blob_url": "https://github.com/apache/uima-as/blob/80c2562cc27a637b1b6c6ad1647921e1b1a7274f/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java",
                "filename": "uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java?ref=80c2562cc27a637b1b6c6ad1647921e1b1a7274f"
            }
        ],
        "bug_id": "uima-as_6",
        "parent": "https://github.com/apache/uima-as/commit/8d1bbb46c100ab20b6f25c98c90d10b838ad031b",
        "message": "UIMA-2668 Fixed another NPE in the aggregate\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-as/trunk@1446625 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "uima-as"
    },
    {
        "commit": "https://github.com/apache/uima-as/commit/9efc71b369440fa36c6d53b092e1cd3cde69ae60",
        "file": [
            {
                "patch": "@@ -1794,8 +1794,8 @@ public void finalStep(FinalStep aStep, String aCasReferenceId) {\n                       \"finalStep\",\n                       UIMAEE_Constants.JMS_LOG_RESOURCE_BUNDLE,\n                       \"UIMAEE_cas_decremented_child_count__FINE\",\n-                      new Object[] { getComponentName(), casStateEntry.getCasReferenceId(),\n-                          casStateEntry.getSubordinateCasInPlayCount() });\n+                      new Object[] { getComponentName(), parentCasStateEntry.getCasReferenceId(),\n+                    \t  parentCasStateEntry.getSubordinateCasInPlayCount() });\n             }\n           }\n         }\n@@ -2125,9 +2125,9 @@ private void sendReplyToCollocatedClient(CacheEntry cacheEntry, CasStateEntry ca\n         // Modify the parent of this CAS.\n         if (inputCasId != null ) {\n           if ( !inputCasId.equals(casStateEntry.getInputCasReferenceId())) {\n-            casStateEntry.setInputCasReferenceId(inputCasId);\n             cacheEntry.setInputCasReferenceId(inputCasId);\n           }\n+          // Update counters in the parents controller local cache. \n           CasStateEntry parentCasStateEntry = \n             parentController.getLocalCache().lookupEntry(inputCasId);\n           if ( parentCasStateEntry != null ) {",
                "additions": 3,
                "raw_url": "https://github.com/apache/uima-as/raw/9efc71b369440fa36c6d53b092e1cd3cde69ae60/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "5f45a8ffa9bf789d44b5b2bbbed5dbbcd0c39cec",
                "blob_url": "https://github.com/apache/uima-as/blob/9efc71b369440fa36c6d53b092e1cd3cde69ae60/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java",
                "filename": "uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java?ref=9efc71b369440fa36c6d53b092e1cd3cde69ae60"
            }
        ],
        "bug_id": "uima-as_7",
        "parent": "https://github.com/apache/uima-as/commit/2c646b4d25826d642c8b2396492de6bce077aa0d",
        "message": "UIMA-2668 Fixed CAS accounting to prevent NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-as/trunk@1445924 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "uima-as"
    },
    {
        "commit": "https://github.com/apache/uima-as/commit/7328faa5f08127dd44df7c8e6f63ad76551110c1",
        "file": [
            {
                "patch": "@@ -390,9 +390,9 @@ private UimaVmQueueMBean getQueueMBean(MBeanServerConnection server, String aPat\n \r\n   protected ServiceMetrics[] collectStats(boolean initial, long uptime) {\r\n     int cmFreeCasInstanceCount = 0;\r\n-    ServiceMetrics[] metrics = new ServiceMetrics[servicePerformanceNames.size()];\r\n+    ServiceMetrics[] metrics = null;\r\n     int index = 0;\r\n-\r\n+    List<ServiceMetrics> metricsList = new ArrayList<ServiceMetrics>();\r\n     // iterate over all Performance MBeans to retrieve current metrics\r\n     for (ObjectName name : servicePerformanceNames) {\r\n       try {\r\n@@ -494,7 +494,8 @@ private UimaVmQueueMBean getQueueMBean(MBeanServerConnection server, String aPat\n         // Add metrics collected from the service to the array of metrics\r\n         // in the current sampling (interval). The metrics array will\r\n         // be provided to all listeners plugged into this monitor.\r\n-        metrics[index++] = serviceMetrics;\r\n+//        metrics[index++] = serviceMetrics;\r\n+        metricsList.add(serviceMetrics);\r\n         // Save current metrics for the next delta\r\n         entry.setIdleTime(idleTime);\r\n         entry.incrementCASCount(processCount);\r\n@@ -507,8 +508,11 @@ private UimaVmQueueMBean getQueueMBean(MBeanServerConnection server, String aPat\n                   \"UIMAJMS_exception__WARNING\", e);\r\n         }\r\n       }\r\n-\r\n     } // for\r\n+    if ( metricsList.size() > 0 ) {\r\n+      metrics = new ServiceMetrics[metricsList.size()];\r\n+      metricsList.toArray(metrics);\r\n+    }\r\n     return metrics;\r\n   }\r\n \r\n@@ -534,9 +538,11 @@ public void run() {\n         }\r\n       }\r\n       ServiceMetrics[] metrics = collectStats(initial, uptime);\r\n-      initial = false;\r\n-      // Notify listeners with current metrics collected from MBeans\r\n-      notifyListeners(uptime, metrics);\r\n+      if ( metrics != null ) {\r\n+        initial = false;\r\n+        // Notify listeners with current metrics collected from MBeans\r\n+        notifyListeners(uptime, metrics);\r\n+      }\r\n \r\n       // compute wait time till next sample\r\n       long sampleEnd = System.nanoTime();\r",
                "additions": 13,
                "raw_url": "https://github.com/apache/uima-as/raw/7328faa5f08127dd44df7c8e6f63ad76551110c1/uimaj-as-activemq/src/main/java/org/apache/uima/aae/jmx/monitor/JmxMonitor.java",
                "status": "modified",
                "changes": 20,
                "deletions": 7,
                "sha": "ced62b3dc1af06a8d8d2112c8043ed5edb87c481",
                "blob_url": "https://github.com/apache/uima-as/blob/7328faa5f08127dd44df7c8e6f63ad76551110c1/uimaj-as-activemq/src/main/java/org/apache/uima/aae/jmx/monitor/JmxMonitor.java",
                "filename": "uimaj-as-activemq/src/main/java/org/apache/uima/aae/jmx/monitor/JmxMonitor.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/main/java/org/apache/uima/aae/jmx/monitor/JmxMonitor.java?ref=7328faa5f08127dd44df7c8e6f63ad76551110c1"
            }
        ],
        "bug_id": "uima-as_8",
        "parent": "https://github.com/apache/uima-as/commit/8c8e991e11da429ef6797a00d32cb8d199fb323a",
        "message": "UIMA-1680 Fixed NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/uima/uima-as/trunk@931620 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "uima-as"
    },
    {
        "commit": "https://github.com/apache/uima-as/commit/cebbcfd7aea953fa1536e844339ffeaba58ac1d6",
        "file": [
            {
                "patch": "@@ -36,6 +36,7 @@\n import org.apache.uima.UIMAFramework;\n import org.apache.uima.aae.UIMAEE_Constants;\n import org.apache.uima.adapter.jms.JmsConstants;\n+import org.apache.uima.adapter.jms.client.BaseUIMAAsynchronousEngineCommon_impl.SharedConnection;\n import org.apache.uima.util.Level;\n \n /**\n@@ -157,9 +158,12 @@ protected String getDestinationEndpoint() throws Exception {\n   public MessageProducer getMessageProducer() {\n     if ( engine.running && engine.producerInitialized == false  ) {\n       try {\n-        setConnection(engine.lookupConnection(getBrokerURL()).getConnection());\n-        initializeProducer();\n-        engine.producerInitialized = true;\n+        SharedConnection con = engine.lookupConnection(getBrokerURL());\n+        if ( con != null ) {\n+          setConnection(con.getConnection());\n+          initializeProducer();\n+          engine.producerInitialized = true;\n+        }\n       } catch( Exception e) {\n         e.printStackTrace();\n         if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.WARNING)) {",
                "additions": 7,
                "raw_url": "https://github.com/apache/uima-as/raw/cebbcfd7aea953fa1536e844339ffeaba58ac1d6/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/ActiveMQMessageSender.java",
                "status": "modified",
                "changes": 10,
                "deletions": 3,
                "sha": "f4164a82315feb53a65132f3ff04beeaa5f0cf16",
                "blob_url": "https://github.com/apache/uima-as/blob/cebbcfd7aea953fa1536e844339ffeaba58ac1d6/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/ActiveMQMessageSender.java",
                "filename": "uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/ActiveMQMessageSender.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/ActiveMQMessageSender.java?ref=cebbcfd7aea953fa1536e844339ffeaba58ac1d6"
            },
            {
                "patch": "@@ -224,7 +224,7 @@ protected void setCommonProperties(String aCasReferenceId, Message msg,\n   }\n   private void stopConnection() {\n \tSharedConnection sharedConnection;\n-    if ((sharedConnection = lookupConnection(brokerURI)) != null) {\n+    if ( brokerURI != null && (sharedConnection = lookupConnection(brokerURI)) != null) {\n       // Remove a client from registry\n       sharedConnection.unregisterClient(this);\n       ActiveMQConnection amqc = (ActiveMQConnection)sharedConnection.getConnection();\n@@ -422,7 +422,7 @@ private void addPrefetch(ActiveMQConnection aConnection) {\n     ((ActiveMQConnection) aConnection).setPrefetchPolicy(prefetchPolicy);\n   }\n \n-  private SharedConnection validateConnection(String aBrokerURI) throws Exception {\n+  protected SharedConnection validateConnection(String aBrokerURI) throws Exception {\n     // checks if a sharedConnection exists and if not creates a new one\n     return createSharedConnection(aBrokerURI);\n   }",
                "additions": 2,
                "raw_url": "https://github.com/apache/uima-as/raw/cebbcfd7aea953fa1536e844339ffeaba58ac1d6/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/BaseUIMAAsynchronousEngine_impl.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "16ca19bd7c076ffc900f63ace77fd4566410133d",
                "blob_url": "https://github.com/apache/uima-as/blob/cebbcfd7aea953fa1536e844339ffeaba58ac1d6/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/BaseUIMAAsynchronousEngine_impl.java",
                "filename": "uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/BaseUIMAAsynchronousEngine_impl.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/BaseUIMAAsynchronousEngine_impl.java?ref=cebbcfd7aea953fa1536e844339ffeaba58ac1d6"
            },
            {
                "patch": "@@ -26,6 +26,7 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.Timer;\n import java.util.TimerTask;\n import java.util.concurrent.BlockingQueue;\n@@ -61,7 +62,6 @@\n import org.apache.uima.aae.client.UimaAsBaseCallbackListener;\n import org.apache.uima.aae.client.UimaAsynchronousEngine;\n import org.apache.uima.aae.controller.AggregateAnalysisEngineController_impl;\n-import org.apache.uima.aae.controller.Endpoint;\n import org.apache.uima.aae.delegate.Delegate;\n import org.apache.uima.aae.delegate.Delegate.DelegateEntry;\n import org.apache.uima.aae.error.AsynchAEException;\n@@ -84,18 +84,17 @@\n import org.apache.uima.cas.SerialFormat;\n import org.apache.uima.cas.impl.AllowPreexistingFS;\n import org.apache.uima.cas.impl.BinaryCasSerDes6;\n+import org.apache.uima.cas.impl.BinaryCasSerDes6.ReuseInfo;\n import org.apache.uima.cas.impl.CASImpl;\n import org.apache.uima.cas.impl.Serialization;\n import org.apache.uima.cas.impl.TypeSystemImpl;\n import org.apache.uima.cas.impl.XmiSerializationSharedData;\n-import org.apache.uima.cas.impl.BinaryCasSerDes6.ReuseInfo;\n import org.apache.uima.collection.CollectionReader;\n import org.apache.uima.collection.EntityProcessStatus;\n import org.apache.uima.jms.error.handler.BrokerConnectionException;\n import org.apache.uima.resource.ResourceInitializationException;\n import org.apache.uima.resource.ResourceProcessException;\n import org.apache.uima.resource.metadata.ProcessingResourceMetaData;\n-import org.apache.uima.resourceSpecifier.factory.SerializationStrategy;\n import org.apache.uima.util.Level;\n import org.apache.uima.util.ProcessTrace;\n import org.apache.uima.util.XMLInputSource;\n@@ -255,6 +254,8 @@ abstract protected String deploySpringContainer(String[] springContextFiles)\n   \n   abstract protected void initializeConsumer(String aBrokerURI, Connection connection) throws Exception;\n \n+  abstract protected SharedConnection validateConnection(String aBrokerURI) throws Exception;\n+\n   // enables/disable timer per CAS. Defaul is to use single timer for\n   // all outstanding CASes\n   protected volatile boolean timerPerCAS=false;\n@@ -908,7 +909,7 @@ private String sendCAS(CAS aCAS, ClientRequest requestToCache) throws ResourcePr\n           SharedConnection sharedConnection = lookupConnection(getBrokerURI());\n           \n           //  Send Ping to service as getMeta request\n-          if ( !serviceDelegate.isAwaitingPingReply() && sharedConnection.isOpen() ) {\n+          if ( sharedConnection != null && !serviceDelegate.isAwaitingPingReply() && sharedConnection.isOpen() ) {\n             serviceDelegate.setAwaitingPingReply();\n             // Add the cas to a list of CASes pending reply. Also start the timer if necessary\n \t\t\t// serviceDelegate.addCasToOutstandingList(requestToCache.getCasReferenceId());\n@@ -953,7 +954,7 @@ private String sendCAS(CAS aCAS, ClientRequest requestToCache) throws ResourcePr\n           }\n         }\n         SharedConnection sharedConnection = lookupConnection(getBrokerURI());\n-        if ( !sharedConnection.isOpen() ) {\n+        if ( sharedConnection != null &&  !sharedConnection.isOpen() ) {\n           if (requestToCache != null && !requestToCache.isSynchronousInvocation() && aCAS != null ) {\n             aCAS.release();\n           }\n@@ -2847,7 +2848,7 @@ public boolean recoverSharedConnectionIfClosed() {\n \tSharedConnection sharedConnection;\n     if ( !connectionOpen() ) {\n       sharedConnection = lookupConnection(getBrokerURI());\n-      while ( running ) {\n+      while ( sharedConnection != null && running ) {\n         //  blocks until connection is refreshed \n         try {\n           sharedConnection.retryConnectionUntilSuccessfull();\n@@ -2888,12 +2889,67 @@ protected void setReleaseCASMessage(TextMessage msg, String aCasReferenceId) thr\n \n   \n   protected SharedConnection lookupConnection(String brokerUrl) {\n+    SharedConnection sharedConnection = null;\n+    try {\n+      if ( sharedConnections.containsKey(brokerUrl) ) {\n+        return sharedConnections.get(brokerUrl);\n+      } else {\n+        boolean first = true;\n+        while( running ) {\n+\n+          try {\n+            producerInitialized = false;\n+            sharedConnection = validateConnection(brokerUrl);\n+            sharedConnection.retryConnectionUntilSuccessfull();\n+            break;\n+          } catch( Exception e) {\n+            Object monitor = new Object();\n+            try {\n+              synchronized(monitor) {\n+                if ( first ) {\n+                  first = false;\n+                  if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.WARNING)) {\n+                    UIMAFramework.getLogger(CLASS_NAME).logrb(Level.WARNING, CLASS_NAME.getName(), \"onException\",\n+                            JmsConstants.JMS_LOG_RESOURCE_BUNDLE, \"UIMAJMS_retrying_jms_connection__WARNING\",\n+                            new Object[] { brokerUrl });\n+                  }\n+                }\n+                monitor.wait(5000);  // retry connection every 5 secs\n+              }\n+            } catch( Exception ex) {\n+            }\n+          }\n+        } // while\n+      }\n+    } catch( Exception exx ) {\n+\n+      if ( brokerUrl == null ) {\n+        UIMAFramework.getLogger(CLASS_NAME).logrb(Level.WARNING, CLASS_NAME.getName(), \"onException\",\n+                JmsConstants.JMS_LOG_RESOURCE_BUNDLE, \"UIMAJMS_invalid_broker_url__WARNING\",\n+                new Object[] { });\n+        Thread.dumpStack();\n+      }\n+      StringBuffer sb = new StringBuffer();\n+      for( Entry<String, SharedConnection> conn : sharedConnections.entrySet()) {\n+        sb.append(\"-- Shared Connection broker:\"+conn.getKey()+\" State:\"+conn.getValue().getState()+\"\\n\");\n+      }\n+      if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.WARNING)) {\n+        UIMAFramework.getLogger(CLASS_NAME).logrb(Level.WARNING, CLASS_NAME.getName(), \"onException\",\n+                JmsConstants.JMS_LOG_RESOURCE_BUNDLE, \"UIMAJMS_shared_connections__INFO\",\n+                new Object[] { sb.toString()});\n+      }\n+      throw new RuntimeException(\"Invalid State\");\n+    }\n+\n+    return sharedConnection;\n+    /*    \n     if ( brokerUrl != null ) {\n       if ( sharedConnections.containsKey(brokerUrl) ) {\n         return sharedConnections.get(brokerUrl);\n       }\n     }\n \t  return null;\n+\t*/  \n   }\n   \n   // This class is used to share JMS Connection by all instances of UIMA AS",
                "additions": 62,
                "raw_url": "https://github.com/apache/uima-as/raw/cebbcfd7aea953fa1536e844339ffeaba58ac1d6/uimaj-as-jms/src/main/java/org/apache/uima/adapter/jms/client/BaseUIMAAsynchronousEngineCommon_impl.java",
                "status": "modified",
                "changes": 68,
                "deletions": 6,
                "sha": "5170a97f6dff82a49b2314f2e8d3ae4f56bfff07",
                "blob_url": "https://github.com/apache/uima-as/blob/cebbcfd7aea953fa1536e844339ffeaba58ac1d6/uimaj-as-jms/src/main/java/org/apache/uima/adapter/jms/client/BaseUIMAAsynchronousEngineCommon_impl.java",
                "filename": "uimaj-as-jms/src/main/java/org/apache/uima/adapter/jms/client/BaseUIMAAsynchronousEngineCommon_impl.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-jms/src/main/java/org/apache/uima/adapter/jms/client/BaseUIMAAsynchronousEngineCommon_impl.java?ref=cebbcfd7aea953fa1536e844339ffeaba58ac1d6"
            }
        ],
        "bug_id": "uima-as_9",
        "parent": "https://github.com/apache/uima-as/commit/158a2c826ba2b02dcc7720e9460600f496eedfc1",
        "message": "UIMA-3393 Improved detection of NPE and provided better handling\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-as/trunk@1538051 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "uima-as"
    },
    {
        "commit": "https://github.com/apache/uima-as/commit/ae3c5d5cfd5d6e0c9db3ad0ecade48b6a64de958",
        "file": [
            {
                "patch": "@@ -2014,9 +2014,6 @@ private void sendReplyWithException(CacheEntry acacheEntry, CasStateEntry casSta\n   private boolean sendExceptionToClient(CacheEntry cacheEntry, CasStateEntry casStateEntry,\n           Endpoint replyEndpoint) throws Exception {\n \n-\tif ( casStateEntry == null ) {\n-\t\treturn false;\n-\t}\n \t  // Dont send CASes to the client if the input CAS is in failed state. One\n     // of the descendant CASes may have failed in one of the delegates. Any\n     // exception on descendant CAS causes the input CAS to be returned to the",
                "additions": 0,
                "raw_url": "https://github.com/apache/uima-as/raw/ae3c5d5cfd5d6e0c9db3ad0ecade48b6a64de958/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java",
                "status": "modified",
                "changes": 3,
                "deletions": 3,
                "sha": "a3dfd6c466450f59b88e38e4ea91c5d56530e779",
                "blob_url": "https://github.com/apache/uima-as/blob/ae3c5d5cfd5d6e0c9db3ad0ecade48b6a64de958/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java",
                "filename": "uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java?ref=ae3c5d5cfd5d6e0c9db3ad0ecade48b6a64de958"
            }
        ],
        "bug_id": "uima-as_10",
        "parent": "https://github.com/apache/uima-as/commit/c562f9b5ea6e2f59279d5f0b35944813732facb2",
        "message": "UIMA-2668 undo the last change as it did not fix npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-as/trunk@1493140 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "uima-as"
    },
    {
        "commit": "https://github.com/apache/uima-as/commit/42c949b522a95df599c19dcb0c0318c4c7ea4558",
        "file": [
            {
                "patch": "@@ -63,6 +63,8 @@\n   private String text;\n \n   long docCount = 0;\n+  \n+  int failOnDocumentNumber;\n \n   /*\n    * (non-Javadoc)\n@@ -73,6 +75,13 @@\n   public void initialize(UimaContext aContext) throws ResourceInitializationException {\n     super.initialize(aContext);\n     this.nToGen = ((Integer) aContext.getConfigParameterValue(\"NumberToGenerate\")).intValue();\n+    if ( aContext.getConfigParameterValue(\"DocumentNumberToFailOn\") != null ) {\n+      int tmpCount = ((Integer) aContext.getConfigParameterValue(\"DocumentNumberToFailOn\")).intValue();\n+      if ( tmpCount > 0 ) {\n+        this.failOnDocumentNumber = tmpCount;\n+      }\n+    }\n+    \n     FileInputStream fis = null;\n     try {\n       String filename = ((String) aContext.getConfigParameterValue(\"InputFile\")).trim();\n@@ -137,6 +146,13 @@ public AbstractCas next() throws AnalysisEngineProcessException {\n       System.out.println(\"Initializing CAS with a Document of Size:\" + text.length());\n     }\n     docCount++;\n+    \n+    if ( this.failOnDocumentNumber == docCount ) {\n+      cas.release();\n+      //  force CM to finish producing CASes on error\n+      this.mCount = this.nToGen;\n+      throw new AnalysisEngineProcessException(new Exception(\"Simulated Exception in Cas Multiplier next() method\"));\n+    }\n     if (UIMAFramework.getLogger().isLoggable(Level.FINE))\n       System.out.println(\"CasMult creating document#\" + docCount);\n     cas.setDocumentText(this.text);",
                "additions": 16,
                "raw_url": "https://github.com/apache/uima-as/raw/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-activemq/src/test/java/org/apache/uima/ae/multiplier/SimpleCasGenerator.java",
                "status": "modified",
                "changes": 16,
                "deletions": 0,
                "sha": "4f5fc33a69332fdd1b1a94cb982a9c633c225b05",
                "blob_url": "https://github.com/apache/uima-as/blob/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-activemq/src/test/java/org/apache/uima/ae/multiplier/SimpleCasGenerator.java",
                "filename": "uimaj-as-activemq/src/test/java/org/apache/uima/ae/multiplier/SimpleCasGenerator.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/test/java/org/apache/uima/ae/multiplier/SimpleCasGenerator.java?ref=42c949b522a95df599c19dcb0c0318c4c7ea4558"
            },
            {
                "patch": "@@ -23,10 +23,13 @@\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n+import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.io.Reader;\n+import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.ExecutorService;\n@@ -53,6 +56,7 @@\n import org.apache.uima.aae.controller.Endpoint;\n import org.apache.uima.aae.error.MessageTimeoutException;\n import org.apache.uima.aae.error.ServiceShutdownException;\n+import org.apache.uima.aae.monitor.statistics.AnalysisEnginePerformanceMetrics;\n import org.apache.uima.adapter.jms.JmsConstants;\n import org.apache.uima.adapter.jms.activemq.JmsOutputChannel;\n import org.apache.uima.adapter.jms.activemq.SpringContainerDeployer;\n@@ -61,6 +65,8 @@\n import org.apache.uima.analysis_engine.AnalysisEngineDescription;\n import org.apache.uima.cas.CAS;\n import org.apache.uima.cas.TypeSystem;\n+import org.apache.uima.cas.impl.XmiCasDeserializer;\n+import org.apache.uima.collection.CollectionException;\n import org.apache.uima.collection.CollectionReader;\n import org.apache.uima.collection.CollectionReaderDescription;\n import org.apache.uima.collection.EntityProcessStatus;\n@@ -74,6 +80,7 @@\n import org.apache.uima.resourceSpecifier.factory.UimaASDeploymentDescriptor;\n import org.apache.uima.util.XMLInputSource;\n import org.josql.expressions.IsNullExpression;\n+import org.xml.sax.SAXException;\n \n public class TestUimaASExtended extends BaseTestSupport {\n \n@@ -99,6 +106,183 @@ public void testBrokerLifecycle() {\n             + System.getProperty(\"file.separator\") + \"bin\" + System.getProperty(\"file.separator\")\n             + \"dd2spring.xsl\");\n   }\n+  \n+  public void testDeployAggregateServiceWithFailingCollocatedCM() throws Exception {\n+    System.out.println(\"-------------- testDeployAggregateServiceWithFailingCollocatedCM -------------\");\n+    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+    System.setProperty(JmsConstants.SessionTimeoutOverride, \"2500000\");\n+    deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+    deployService(eeUimaEngine, relativePath + \"/Deploy_AggregateAnnotatorWithFailingCollocatedCM.xml\");\n+    \n+    Map<String, Object> appCtx = buildContext(String.valueOf(broker.getMasterConnectorURI()),\n+            \"TopLevelTaeQueue\");\n+    appCtx.put(UimaAsynchronousEngine.Timeout, 0);\n+    appCtx.put(UimaAsynchronousEngine.GetMetaTimeout, 0);\n+    \n+    //addExceptionToignore(org.apache.uima.aae.error.UimaEEServiceException.class); \n+    \n+    runTest(appCtx, eeUimaEngine, String.valueOf(broker.getMasterConnectorURI()), \"TopLevelTaeQueue\",\n+            1, EXCEPTION_LATCH);\n+  }\n+  \n+  \n+  public void getLargeCAS(CAS aCAS, File xmiFile) throws IOException, CollectionException {\n+\t    FileInputStream inputStream = new FileInputStream(xmiFile);\n+\t    try {\n+\t    \tXmiCasDeserializer.deserialize(inputStream, aCAS, false);\n+\t    } catch (SAXException e) {\n+\t      throw new CollectionException(e);\n+\t    } finally {\n+\t      inputStream.close();\n+\t    }\n+\t    \n+\t  }\n+  /*\n+  public void testLargeCAS() {\n+\t    System.out.println(\"-------------- testLargeCAS -------------\");\n+\t    try {\n+\t\t    // Instantiate Uima AS Client\n+\t\t    BaseUIMAAsynchronousEngine_impl uimaAsEngine = new BaseUIMAAsynchronousEngine_impl();\n+\t\t    // Deploy Uima AS Primitive Service\n+//\t\t    deployService(uimaAsEngine, relativePath + \"/Deploy_PersonTitleAnnotator.xml\");\n+\t\t    deployService(uimaAsEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+//\t\t    Map<String, Object> appCtx = buildContext(String.valueOf(broker.getMasterConnectorURI()),\n+//\t\t            \"PersonTitleAnnotatorQueue\");\n+\t\t    Map<String, Object> appCtx = buildContext(String.valueOf(broker.getMasterConnectorURI()),\n+\t\t            \"NoOpAnnotatorQueue\");\n+\t\t    \n+\t\t    \n+\t\t    appCtx.put(UimaAsynchronousEngine.Timeout, 1100);\n+\t\t    appCtx.put(UimaAsynchronousEngine.CpcTimeout, 1100);\n+\t\t    initialize(uimaAsEngine, appCtx);\n+\t\t    waitUntilInitialized();\n+\t        CAS cas = uimaAsEngine.getCAS();\n+\t        getLargeCAS(cas, new File(\"C:/uima/largeCASTest/NYT_ENG_20070514.0065.out.xmi\"));\n+\t       \n+\t        System.out.println(\"UIMA AS Client Sending CAS Request to a Service\");\n+\t\t    uimaAsEngine.sendCAS(cas);\n+\t\t    uimaAsEngine.collectionProcessingComplete();\n+\t\t    System.clearProperty(\"DefaultBrokerURL\");\n+\t\t    uimaAsEngine.stop();\t  \n+\t    \t\n+\t    } catch( Exception e) {\n+\t    \te.printStackTrace();\n+\t    }\n+  }\n+  */\n+  /**\n+   * Tests service quiesce and stop support. This test sets a CasPool to 1 to send just one CAS at a\n+   * time. After the first CAS is sent, a thread is started with a timer to expire before the reply\n+   * is received. When the timer expires, the client initiates quiesceAndStop on the top level\n+   * controller. As part of this, the top level controller stops its listeners on the input queue\n+   * (GetMeta and Process Listeners), and registers a callback with the InProcess cache. When the\n+   * cache is empty, meaning all CASes are processed, the cache notifies the controller which then\n+   * begins the service shutdown. Meanwhile, the client receives a reply for the first CAS, and\n+   * sends a second CAS. This CAS, will remain in the queue as the service has previously stopped\n+   * its listeners. The client times out after 10 seconds and shuts down.\n+   * \n+   * @throws Exception\n+   */\n+  public void testQuiesceAndStop() throws Exception {\n+    System.out.println(\"-------------- testQuiesceAndStop -------------\");\n+    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+    Map<String, Object> appCtx = buildContext(String.valueOf(broker.getMasterConnectorURI()),\n+            \"TopLevelTaeQueue\");\n+    // Set an explicit process timeout so to test the ping on timeout\n+    appCtx.put(UimaAsynchronousEngine.Timeout, 10000);\n+    appCtx.put(UimaAsynchronousEngine.GetMetaTimeout, 300);\n+    appCtx.put(UimaAsynchronousEngine.CasPoolSize, 10);\n+    String containers[] = new String[1];\n+    containers[0] = deployService(eeUimaEngine, relativePath + \"/Deploy_ScaledPrimitiveAggregateAnnotator.xml\");\n+\n+    \n+//    String containers[] = new String[2];\n+ //   containers[0] = deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+   // containers[1] =  deployService(eeUimaEngine, relativePath\n+     //       + \"/Deploy_AggregateAnnotatorWithInternalCM1000Docs.xml\");\n+//    spinShutdownThread(eeUimaEngine, 5000, containers, SpringContainerDeployer.QUIESCE_AND_STOP);\n+    spinShutdownThread(eeUimaEngine, 5000, containers, SpringContainerDeployer.QUIESCE_AND_STOP);\n+    \n+    runTest(appCtx, eeUimaEngine, String.valueOf(broker.getMasterConnectorURI()),\n+            \"TopLevelTaeQueue\", 1000, EXCEPTION_LATCH);\n+    //eeUimaEngine.stop();\n+  }\n+/*\n+  public void testQuiesceAndStop2() throws Exception {\n+\t    System.out.println(\"-------------- testQuiesceAndStop -------------\");\n+\t    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+\t    Map<String, Object> appCtx = buildContext(String.valueOf(broker.getMasterConnectorURI()),\n+\t            \"TopLevelTaeQueue\");\n+\t    // Set an explicit process timeout so to test the ping on timeout\n+\t    appCtx.put(UimaAsynchronousEngine.Timeout, 10000);\n+\t    appCtx.put(UimaAsynchronousEngine.GetMetaTimeout, 300);\n+\t    appCtx.put(UimaAsynchronousEngine.CasPoolSize, 1);\n+\t    String containers[] = new String[1];\n+\t    containers[0] = deployService(eeUimaEngine, relativePath + \"/Deploy_ScaledPrimitiveAggregateAnnotator.xml\");\n+\t    \n+\t    \n+\t    runTest(appCtx, eeUimaEngine, String.valueOf(broker.getMasterConnectorURI()),\n+\t            \"TopLevelTaeQueue\", 100, PROCESS_LATCH);\n+\t    System.out.println(\"------------ Undeploying ----------------\");\n+\t    eeUimaEngine.undeploy(containers[0] , SpringContainerDeployer.QUIESCE_AND_STOP);\n+//\t    eeUimaEngine.stop();\n+\t  }\n+\n+  */\n+  \n+  \n+  \n+  public void testStopNow() throws Exception {\n+    System.out.println(\"-------------- testAggregateWithFailedRemoteDelegate -------------\");\n+    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+    String containers[] = new String[2];\n+\n+    containers[0] = deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+    containers[1] = deployService(eeUimaEngine, relativePath\n+            + \"/Deploy_AggregateAnnotatorWithInternalCM1000Docs.xml\");\n+    Map<String, Object> appCtx = buildContext(String.valueOf(broker.getMasterConnectorURI()),\n+            \"TopLevelTaeQueue\");\n+    // Set an explicit process timeout so to test the ping on timeout\n+    appCtx.put(UimaAsynchronousEngine.Timeout, 4000);\n+    appCtx.put(UimaAsynchronousEngine.GetMetaTimeout, 300);\n+    spinShutdownThread(eeUimaEngine, 3000, containers, SpringContainerDeployer.STOP_NOW);\n+    //  send may fail since we forcefully stop the service. Tolerate\n+    //  ResourceProcessException\n+    addExceptionToignore(ResourceProcessException.class); \n+    runTest(appCtx, eeUimaEngine, String.valueOf(broker.getMasterConnectorURI()),\n+            \"TopLevelTaeQueue\", 10, EXCEPTION_LATCH);\n+  }\n+  public void testSendAndReceive() throws Exception  {\n+      BaseUIMAAsynchronousEngine_impl uimaAsEngine \n+      \t= new BaseUIMAAsynchronousEngine_impl();\n+      \n+      deployService(uimaAsEngine, relativePath + \"/Deploy_MeetingDetectorAggregate.xml\");\n+      // Deploy Uima AS Primitive Service\n+ //     deployService(uimaAsEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+      Map<String, Object> appCtx = buildContext(broker.getMasterConnectorURI().toString(),\"MeetingDetectorQueue\");\n+      appCtx.put(UimaAsynchronousEngine.Timeout, 1100);\n+      appCtx.put(UimaAsynchronousEngine.CpcTimeout, 1100);\n+      initialize(uimaAsEngine, appCtx);\n+      waitUntilInitialized();\n+      int errorCount = 0;\n+      List<AnalysisEnginePerformanceMetrics> componentMetricsList = \n+    \t\t  new ArrayList<AnalysisEnginePerformanceMetrics>();\n+      for (int i = 0; i < 15; i++) {\n+        CAS cas = uimaAsEngine.getCAS();\n+        cas.setDocumentText(\"Some Text\");\n+        System.out.println(\"UIMA AS Client Sending CAS#\" + (i + 1) + \" Request to a Service\");\n+        try {\n+          uimaAsEngine.sendAndReceiveCAS(cas,componentMetricsList);\n+          System.out.println(\"-------> Client Received Performance Metrics of Size:\"+componentMetricsList.size());\n+        } catch( Exception e) {\n+          errorCount++;\n+        } finally {\n+          cas.release();\n+          componentMetricsList.clear();\n+        }\n+      }\n+      uimaAsEngine.stop();\n+  }\n   public void testMultipleSyncClientsWithMultipleBrokers() throws Exception  {\n \t    System.out.println(\"-------------- testMultipleSyncClientsWithMultipleBrokers -------------\");\n \t    \n@@ -174,58 +358,6 @@ public void run() {\n \t    broker.stop();\n \t}\n   \n-  /**\n-   * Tests service quiesce and stop support. This test sets a CasPool to 1 to send just one CAS at a\n-   * time. After the first CAS is sent, a thread is started with a timer to expire before the reply\n-   * is received. When the timer expires, the client initiates quiesceAndStop on the top level\n-   * controller. As part of this, the top level controller stops its listeners on the input queue\n-   * (GetMeta and Process Listeners), and registers a callback with the InProcess cache. When the\n-   * cache is empty, meaning all CASes are processed, the cache notifies the controller which then\n-   * begins the service shutdown. Meanwhile, the client receives a reply for the first CAS, and\n-   * sends a second CAS. This CAS, will remain in the queue as the service has previously stopped\n-   * its listeners. The client times out after 10 seconds and shuts down.\n-   * \n-   * @throws Exception\n-   */\n-  public void testQuiesceAndStop() throws Exception {\n-    System.out.println(\"-------------- testQuiesceAndStop -------------\");\n-    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n-    Map<String, Object> appCtx = buildContext(String.valueOf(broker.getMasterConnectorURI()),\n-            \"TopLevelTaeQueue\");\n-    // Set an explicit process timeout so to test the ping on timeout\n-    appCtx.put(UimaAsynchronousEngine.Timeout, 10000);\n-    appCtx.put(UimaAsynchronousEngine.GetMetaTimeout, 300);\n-    appCtx.put(UimaAsynchronousEngine.CasPoolSize, 1);\n-    String containers[] = new String[2];\n-    containers[0] = deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n-    containers[1] =  deployService(eeUimaEngine, relativePath\n-            + \"/Deploy_AggregateAnnotatorWithInternalCM1000Docs.xml\");\n-    spinShutdownThread(eeUimaEngine, 5000, containers, SpringContainerDeployer.QUIESCE_AND_STOP);\n-    runTest(appCtx, eeUimaEngine, String.valueOf(broker.getMasterConnectorURI()),\n-            \"TopLevelTaeQueue\", 3, EXCEPTION_LATCH);\n-    eeUimaEngine.stop();\n-  }\n-\n-  public void testStopNow() throws Exception {\n-    System.out.println(\"-------------- testAggregateWithFailedRemoteDelegate -------------\");\n-    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n-    String containers[] = new String[2];\n-\n-    containers[0] = deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n-    containers[1] = deployService(eeUimaEngine, relativePath\n-            + \"/Deploy_AggregateAnnotatorWithInternalCM1000Docs.xml\");\n-    Map<String, Object> appCtx = buildContext(String.valueOf(broker.getMasterConnectorURI()),\n-            \"TopLevelTaeQueue\");\n-    // Set an explicit process timeout so to test the ping on timeout\n-    appCtx.put(UimaAsynchronousEngine.Timeout, 4000);\n-    appCtx.put(UimaAsynchronousEngine.GetMetaTimeout, 300);\n-    spinShutdownThread(eeUimaEngine, 3000, containers, SpringContainerDeployer.STOP_NOW);\n-    //  send may fail since we forcefully stop the service. Tolerate\n-    //  ResourceProcessException\n-    addExceptionToignore(ResourceProcessException.class); \n-    runTest(appCtx, eeUimaEngine, String.valueOf(broker.getMasterConnectorURI()),\n-            \"TopLevelTaeQueue\", 10, EXCEPTION_LATCH);\n-  }\n   public void testAggregateHttpTunnelling() throws Exception {\n     System.out.println(\"-------------- testAggregateHttpTunnelling -------------\");\n     // Create Uima EE Client",
                "additions": 184,
                "raw_url": "https://github.com/apache/uima-as/raw/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java",
                "status": "modified",
                "changes": 236,
                "deletions": 52,
                "sha": "8371429c40203c6842c0aac2c71810c54e2bad43",
                "blob_url": "https://github.com/apache/uima-as/blob/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java",
                "filename": "uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java?ref=42c949b522a95df599c19dcb0c0318c4c7ea4558"
            },
            {
                "patch": "@@ -0,0 +1,57 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+  <!--\n+   ***************************************************************\n+   * Licensed to the Apache Software Foundation (ASF) under one\n+   * or more contributor license agreements.  See the NOTICE file\n+   * distributed with this work for additional information\n+   * regarding copyright ownership.  The ASF licenses this file\n+   * to you under the Apache License, Version 2.0 (the\n+   * \"License\"); you may not use this file except in compliance\n+   * with the License.  You may obtain a copy of the License at\n+         *\n+   *   http://www.apache.org/licenses/LICENSE-2.0\n+   * \n+   * Unless required by applicable law or agreed to in writing,\n+   * software distributed under the License is distributed on an\n+   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+   * KIND, either express or implied.  See the License for the\n+   * specific language governing permissions and limitations\n+   * under the License.\n+   ***************************************************************\n+   -->\n+\n+<analysisEngineDeploymentDescription xmlns=\"http://uima.apache.org/resourceSpecifier\">\n+  \n+  <name>Top Level TAE</name>\n+  <description></description>\n+  \n+  <deployment protocol=\"jms\" provider=\"activemq\">\n+    <casPool numberOfCASes=\"5\"/>\n+    <service>\n+      <inputQueue endpoint=\"TopLevelTaeQueue\" brokerURL=\"${DefaultBrokerURL}\" prefetch=\"1\"/>\n+      <topDescriptor>\n+        <import location=\"../descriptors/analysis_engine/SimpleTestAggregateWithFailingCasMultiplier.xml\"/>\n+      </topDescriptor>\n+      <analysisEngine>\n+        <delegates>\n+        \n+          <analysisEngine key=\"TestMultiplier\">\n+\t        <casMultiplier poolSize=\"5\"/> \n+          </analysisEngine>\n+\n+          <remoteAnalysisEngine key=\"NoOp\" remoteReplyQueueScaleout=\"3\">\n+\t                  <inputQueue endpoint=\"NoOpAnnotatorQueue\" brokerURL=\"${DefaultBrokerURL}\"/>\n+\t                  <serializer method=\"xmi\"/>\n+                      <asyncAggregateErrorConfiguration>\n+                            <getMetadataErrors maxRetries=\"3\" timeout=\"0\" errorAction=\"continue\" />\n+                            <processCasErrors maxRetries=\"0\" timeout=\"0\" thresholdCount=\"0\" thresholdAction=\"continue\" />\n+                      </asyncAggregateErrorConfiguration>\n+          </remoteAnalysisEngine>\n+\n+        </delegates>\n+      </analysisEngine>\n+    </service>\n+  </deployment>\n+  \n+</analysisEngineDeploymentDescription>\n\\ No newline at end of file",
                "additions": 57,
                "raw_url": "https://github.com/apache/uima-as/raw/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-activemq/src/test/resources/deployment/Deploy_AggregateAnnotatorWithFailingCollocatedCM.xml",
                "status": "added",
                "changes": 57,
                "deletions": 0,
                "sha": "8ace35352b46296ddd7e4384c7608571c2f86a54",
                "blob_url": "https://github.com/apache/uima-as/blob/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-activemq/src/test/resources/deployment/Deploy_AggregateAnnotatorWithFailingCollocatedCM.xml",
                "filename": "uimaj-as-activemq/src/test/resources/deployment/Deploy_AggregateAnnotatorWithFailingCollocatedCM.xml",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/test/resources/deployment/Deploy_AggregateAnnotatorWithFailingCollocatedCM.xml?ref=42c949b522a95df599c19dcb0c0318c4c7ea4558"
            },
            {
                "patch": "@@ -0,0 +1,67 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+\t<!--\n+\t ***************************************************************\n+\t * Licensed to the Apache Software Foundation (ASF) under one\n+\t * or more contributor license agreements.  See the NOTICE file\n+\t * distributed with this work for additional information\n+\t * regarding copyright ownership.  The ASF licenses this file\n+\t * to you under the Apache License, Version 2.0 (the\n+\t * \"License\"); you may not use this file except in compliance\n+\t * with the License.  You may obtain a copy of the License at\n+         *\n+\t *   http://www.apache.org/licenses/LICENSE-2.0\n+\t * \n+\t * Unless required by applicable law or agreed to in writing,\n+\t * software distributed under the License is distributed on an\n+\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+\t * KIND, either express or implied.  See the License for the\n+\t * specific language governing permissions and limitations\n+\t * under the License.\n+\t ***************************************************************\n+   -->\n+   \n+<analysisEngineDescription xmlns=\"http://uima.apache.org/resourceSpecifier\">\n+  <frameworkImplementation>org.apache.uima.java</frameworkImplementation>\n+  <primitive>false</primitive>\n+  <delegateAnalysisEngineSpecifiers>\n+    \n+    <delegateAnalysisEngine key=\"TestMultiplier\">\n+      <import location=\"../multiplier/SimpleCasGeneratorWithFailureOnNthDocument.xml\"/>\n+    </delegateAnalysisEngine>\n+\n+\n+      <delegateAnalysisEngine key=\"NoOp\">\n+      <import location=\"NoOpAnnotator.xml\"/>\n+    </delegateAnalysisEngine>\n+  \n+  </delegateAnalysisEngineSpecifiers>\n+  <analysisEngineMetaData>\n+    <name>Test Aggregate TAE</name>\n+    <description>Detects Nothing</description>\n+    <configurationParameters/>\n+    <configurationParameterSettings/>\n+    <flowConstraints>\n+      <fixedFlow>\n+      \n+        <node>TestMultiplier</node>\n+        <node>NoOp</node> \n+      </fixedFlow>\n+    </flowConstraints>\n+    <capabilities>\n+      <capability>\n+        <inputs/>\n+        <outputs>\n+        </outputs>\n+        <languagesSupported>\n+          <language>en</language>\n+        </languagesSupported>\n+      </capability>\n+    </capabilities>\n+\t<operationalProperties>\n+\t\t<modifiesCas>true</modifiesCas>\n+\t\t<multipleDeploymentAllowed>true</multipleDeploymentAllowed>\n+\t\t<outputsNewCASes>true</outputsNewCASes>\n+\t</operationalProperties>\n+  </analysisEngineMetaData>\n+</analysisEngineDescription>",
                "additions": 67,
                "raw_url": "https://github.com/apache/uima-as/raw/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-activemq/src/test/resources/descriptors/analysis_engine/SimpleTestAggregateWithFailingCasMultiplier.xml",
                "status": "added",
                "changes": 67,
                "deletions": 0,
                "sha": "e211401b5d2be8a213dd927582fde5ab398e9729",
                "blob_url": "https://github.com/apache/uima-as/blob/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-activemq/src/test/resources/descriptors/analysis_engine/SimpleTestAggregateWithFailingCasMultiplier.xml",
                "filename": "uimaj-as-activemq/src/test/resources/descriptors/analysis_engine/SimpleTestAggregateWithFailingCasMultiplier.xml",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/test/resources/descriptors/analysis_engine/SimpleTestAggregateWithFailingCasMultiplier.xml?ref=42c949b522a95df599c19dcb0c0318c4c7ea4558"
            },
            {
                "patch": "@@ -0,0 +1,125 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+  <!--\n+   ***************************************************************\n+   * Licensed to the Apache Software Foundation (ASF) under one\n+   * or more contributor license agreements.  See the NOTICE file\n+   * distributed with this work for additional information\n+   * regarding copyright ownership.  The ASF licenses this file\n+   * to you under the Apache License, Version 2.0 (the\n+   * \"License\"); you may not use this file except in compliance\n+   * with the License.  You may obtain a copy of the License at\n+         *\n+   *   http://www.apache.org/licenses/LICENSE-2.0\n+   * \n+   * Unless required by applicable law or agreed to in writing,\n+   * software distributed under the License is distributed on an\n+   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+   * KIND, either express or implied.  See the License for the\n+   * specific language governing permissions and limitations\n+   * under the License.\n+   ***************************************************************\n+   -->\n+<analysisEngineDescription xmlns=\"http://uima.apache.org/resourceSpecifier\">\n+  <frameworkImplementation>org.apache.uima.java</frameworkImplementation>\n+  <primitive>true</primitive>\n+  <annotatorImplementationName>org.apache.uima.ae.multiplier.SimpleCasGenerator</annotatorImplementationName>\n+  <analysisEngineMetaData>\n+    <name>Simple Text Segmenter</name>\n+    <description>Generates specified number of CASes.</description>\n+    <version>1.0</version>\n+    <vendor>The Apache Software Foundation</vendor>\n+    <configurationParameters>\n+      <configurationParameter>\n+        <name>NumberToGenerate</name>\n+        <description>Approximate number of CASes to create.</description>\n+        <type>Integer</type>\n+        <multiValued>false</multiValued>\n+        <mandatory>true</mandatory>\n+      </configurationParameter>\n+      <configurationParameter>\n+        <name>DocumentNumberToFailOn</name>\n+        <description>Forces failure on specified document</description>\n+        <type>Integer</type>\n+        <multiValued>false</multiValued>\n+        <mandatory>true</mandatory>\n+      </configurationParameter>\n+      \n+      \n+      <configurationParameter>\n+        <name>StringOne</name>\n+        <description>document text</description>\n+        <type>String</type>\n+        <multiValued>false</multiValued>\n+        <mandatory>true</mandatory>\n+      </configurationParameter>\n+      <configurationParameter>\n+        <name>StringTwo</name>\n+        <description>document text</description>\n+        <type>String</type>\n+        <multiValued>false</multiValued>\n+        <mandatory>true</mandatory>\n+      </configurationParameter>\n+    \n+    \n+      <configurationParameter>\n+        <name>InputFile</name>\n+        <description>document text</description>\n+        <type>String</type>\n+        <multiValued>false</multiValued>\n+        <mandatory>true</mandatory>\n+      </configurationParameter>\n+    \n+    \n+    \n+    \n+    </configurationParameters>\n+    <configurationParameterSettings>\n+      <nameValuePair>\n+        <name>NumberToGenerate</name>\n+        <value>\n+          <integer>100</integer>\n+        </value>\n+      </nameValuePair>\n+      <nameValuePair>\n+        <name>DocumentNumberToFailOn</name>\n+        <value>\n+          <integer>10</integer>\n+        </value>\n+      </nameValuePair>\n+      <nameValuePair>\n+        <name>StringOne</name>\n+        <value>\n+          <string>Upcoming UIMA Seminars      April 7, 2004 Distillery Lunch Seminar   UIMA and its Metadata   12:00PM-1:00PM in HAW GN-K35.       Dave Ferrucci will give a UIMA overview and discuss the types of component metadata that UIMA components provide.  Jon Lenchner will give a demo of the Text Analysis Engine configurator tool.         April 16, 2004 KM &amp; I Department Tea    Title: An Eclipse-based TAE Configurator Tool   3:00PM-4:30PM in HAW GN-K35 .      Jon Lenchner will demo an Eclipse plugin for configuring TAE descriptors, which will be available soon for you to use.  No more editing XML descriptors by hand!         May 11, 2004 UIMA Tutorial    9:00AM-5:00PM in HAW GN-K35.      This is a full-day, hands-on tutorial on UIMA, covering the development of Text Analysis Engines and Collection Processing Engines, as well as how to include these components in your own applications.   </string>\n+        </value>\n+      </nameValuePair>\n+      <nameValuePair>\n+        <name>StringTwo</name>\n+        <value>\n+          <string>UIMA Summer School      August 26, 2003   UIMA 101 - The New UIMA Introduction    (Hands-on Tutorial)   9:00AM-5:00PM in HAW GN-K35      August 28, 2003   FROST Tutorial   9:00AM-5:00PM in HAW GN-K35      September 15, 2003   UIMA 201: UIMA Advanced Topics    (Hands-on Tutorial)   9:00AM-5:00PM in HAW 1S-F53      September 17, 2003   The UIMA System Integration Test and Hardening Service   The \"SITH\"   3:00PM-4:30PM in HAW GN-K35            UIMA Summer School Tutorial and Presentation Details   UIMA 101: The new UIMA tutorial     Tuesday August 26 9:00AM - 4:30PM in GN-K35      UIMA 101 is a hands-on programming tutorial.      UIMA 101 is intended for people who want a first introductory course to UIMA or for people who would like a refresher.      The tutorial covers the same concepts in the first UIMA tutorial given in 3Q 2002 except for some key updates:      1) It uses a new interface to the CAS that makes it more natural to access and update CAS feature structures using ordinary Java objects (i.e., the JCAS) and   2) It uses updated TAE interfaces that give the application developer more control over managing multiple CASs.       Please NOTE expert users of UIMA can skip this one and should consider attending the Advanced Topics tutorial.      Prerequisites for the UIMA 101 Tutorial   1) Java Programming   2) Some experience with Eclipse IDE helpful      FROST Tutorial   August 28  9:00AM - 5:00PM  in GN-K35      Visitors from the FROST team will be here to talk to us about FROST.      UIMA 201: The UIMA Advanced Topics Tutorial   September 15:   9:00AM - 5:30PM in Hawthorne 1S-F53      UIMA 201 will introduce some new UIMA concepts and walk the student through hands-on examples.      The advanced topics tutorial is designed for people who have some experience with UIMA and want    to use new capabilities of UIMA 1.0 to address one or more of the following    Advanced Topics:      1) Collection Processing and Collection Processing Engines (CPEs)   2) Multi-Threading and CAS Pooling   3) Using the UIMA adapter framework to integrate network TAEs with Java TAEs   4) A Semantic Search Application that brings it all together\t      Prerequisites for UIMA 201   1) UIMA 101 Tutorial OR Extensive UIMA Experience      The UIMA Integration Test bed Service (The \"SITH\")   September 17 3:00PM - 4:30PM in HAW GN-K35      We have developed the first version of the UIMA Integration Test bed service.      This service is being developed to help test, evaluate, certify and publish UIMA compliant components.      In this talk we will explain the service and what it is intended to provide the UIMA community. We will address the following topics:      1. SITH Services   2. How to submit components and what to expect in return   3. Overview of the test bed implementation using Collection Processing UIMA and Juru.    4. Next Steps for the SITH         </string>\n+        </value>\n+      </nameValuePair>\n+    \n+      <nameValuePair>\n+        <name>InputFile</name>\n+        <value>\n+        <string>data/IBM_LifeSciences.xml</string>\n+          <!-- <string>c:/new-nt.xml</string>  -->\n+        </value>\n+      </nameValuePair>\n+    \n+    </configurationParameterSettings>\n+    <typeSystemDescription/>\n+    <capabilities>\n+      <capability>\n+        <inputs/>\n+        <outputs/>\n+        <languagesSupported/>\n+      </capability>\n+    </capabilities>\n+    <operationalProperties>\n+      <modifiesCas>false</modifiesCas>\n+      <multipleDeploymentAllowed>true</multipleDeploymentAllowed>\n+      <outputsNewCASes>true</outputsNewCASes>\n+    </operationalProperties>\n+  </analysisEngineMetaData>\n+</analysisEngineDescription>",
                "additions": 125,
                "raw_url": "https://github.com/apache/uima-as/raw/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-activemq/src/test/resources/descriptors/multiplier/SimpleCasGeneratorWithFailureOnNthDocument.xml",
                "status": "added",
                "changes": 125,
                "deletions": 0,
                "sha": "36ac3508539130c445fd4b8a688df1b749868bdf",
                "blob_url": "https://github.com/apache/uima-as/blob/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-activemq/src/test/resources/descriptors/multiplier/SimpleCasGeneratorWithFailureOnNthDocument.xml",
                "filename": "uimaj-as-activemq/src/test/resources/descriptors/multiplier/SimpleCasGeneratorWithFailureOnNthDocument.xml",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/test/resources/descriptors/multiplier/SimpleCasGeneratorWithFailureOnNthDocument.xml?ref=42c949b522a95df599c19dcb0c0318c4c7ea4558"
            },
            {
                "patch": "@@ -1269,14 +1269,14 @@ private void simpleStep(SimpleStep aStep, String aCasReferenceId)// throws Async\n           CAS cas = cacheEntry.getCas();\n           logCasForEndpoint(analysisEngineKey, cas);\n         }\n-\n+        Delegate delegate = lookupDelegate(analysisEngineKey);\n+        casStateEntry.setLastDelegate(delegate);\n         if (endpoint.isCasMultiplier()) {\n-          Delegate delegateCM = lookupDelegate(analysisEngineKey);\n-          delegateCM.setGeneratingChildrenFrom(aCasReferenceId, true);\n+          delegate.setGeneratingChildrenFrom(aCasReferenceId, true);\n           // Record the outgoing CAS. CASes destined for remote CM are recorded\n           // in JmsOutputchannel.\n           if (!endpoint.isRemote()) {\n-            delegateCM.addNewCasToOutstandingList(aCasReferenceId, true);\n+            delegate.addNewCasToOutstandingList(aCasReferenceId, true);\n           }\n         }\n ",
                "additions": 4,
                "raw_url": "https://github.com/apache/uima-as/raw/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java",
                "status": "modified",
                "changes": 8,
                "deletions": 4,
                "sha": "d2fd5c3b7ad162a881f46d18cb4bca1efdcaa65d",
                "blob_url": "https://github.com/apache/uima-as/blob/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java",
                "filename": "uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java?ref=42c949b522a95df599c19dcb0c0318c4c7ea4558"
            },
            {
                "patch": "@@ -1781,6 +1781,29 @@ public void stop(Throwable cause, String aCasReferenceId, boolean shutdownNow )\n     if (!isStopped()) {\n       setStopped();\n     }\n+    /*\n+     * Send an exception to the client if this is a top level service\n+     */\n+    if (cause != null && aCasReferenceId != null && getOutputChannel() != null\n+            && isTopLevelComponent()) {\n+      Endpoint clientEndpoint = null;\n+      if ((clientEndpoint = getClientEndpoint()) != null) {\n+        try {\n+          getOutputChannel().sendReply(cause, aCasReferenceId, null, clientEndpoint,\n+                  clientEndpoint.getCommand());\n+        } catch (Exception e) {\n+          if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.WARNING)) {\n+            UIMAFramework.getLogger(CLASS_NAME).logrb(Level.WARNING, CLASS_NAME.getName(),\n+                    \"stop\", UIMAEE_Constants.JMS_LOG_RESOURCE_BUNDLE,\n+                    \"UIMAEE_service_exception_WARNING\", getComponentName());\n+\n+            UIMAFramework.getLogger(CLASS_NAME).logrb(Level.WARNING, CLASS_NAME.getName(), \"stop\",\n+                    UIMAEE_Constants.JMS_LOG_RESOURCE_BUNDLE, \"UIMAEE_exception__WARNING\",\n+                   e);\n+          }\n+        }\n+      }\n+    }\n \n     if (daemonServiceExecutor != null) {\n       daemonServiceExecutor.shutdown();\n@@ -1821,35 +1844,20 @@ public void stop(Throwable cause, String aCasReferenceId, boolean shutdownNow )\n     }\n     // Stops internal transport used to communicate with colocated services\n     stopTransportLayer();\n-    /*\n-     * Commented this block. It generates ShutdownException which causes problems The shutdown of\n-     * services happens ad hoc and not orderly. This whole logic needs to be revisited.\n-     * \n-     * // Send an exception to the client if this is a top level service\n-     */\n-    if (cause != null && aCasReferenceId != null && getOutputChannel() != null\n-            && isTopLevelComponent()) {\n-\n-      Endpoint clientEndpoint = null;\n-      if ((clientEndpoint = getClientEndpoint()) != null) {\n-        try {\n-          getOutputChannel().sendReply(cause, aCasReferenceId, null, clientEndpoint,\n-                  clientEndpoint.getCommand());\n-        } catch (Exception e) {\n-          if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.WARNING)) {\n-            UIMAFramework.getLogger(CLASS_NAME).logrb(Level.WARNING, CLASS_NAME.getName(),\n-                    \"stop\", UIMAEE_Constants.JMS_LOG_RESOURCE_BUNDLE,\n-                    \"UIMAEE_service_exception_WARNING\", getComponentName());\n-\n-            UIMAFramework.getLogger(CLASS_NAME).logrb(Level.WARNING, CLASS_NAME.getName(), \"stop\",\n-                    UIMAEE_Constants.JMS_LOG_RESOURCE_BUNDLE, \"UIMAEE_exception__WARNING\",\n-                   e);\n-          }\n-        }\n-      }\n-    }\n+    for (Iterator it = getLocalCache().entrySet().iterator(); it.hasNext();) {\n+       Map.Entry entry = (Map.Entry) it.next();\n+       CasStateEntry casStateEntry = (CasStateEntry) entry.getValue();\n+       if ( casStateEntry.isSubordinate() ) {\n+         try {\n+           getInProcessCache().getCacheEntryForCAS(casStateEntry.getCasReferenceId()).getCas().release();\n+         } catch( Exception e) {\n+           \n+         }\n+       }\n+    }   \n+    \n     getInProcessCache().releaseAllCASes();\n-\n+    getLocalCache().clear();\n     releasedAllCASes = true;\n     if (!isTopLevelComponent()) {\n       adminContext = null;",
                "additions": 36,
                "raw_url": "https://github.com/apache/uima-as/raw/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/BaseAnalysisEngineController.java",
                "status": "modified",
                "changes": 64,
                "deletions": 28,
                "sha": "99125207b37e0e7b0eb9d3fe2bf35a3e236c98b7",
                "blob_url": "https://github.com/apache/uima-as/blob/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/BaseAnalysisEngineController.java",
                "filename": "uimaj-as-core/src/main/java/org/apache/uima/aae/controller/BaseAnalysisEngineController.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/BaseAnalysisEngineController.java?ref=42c949b522a95df599c19dcb0c0318c4c7ea4558"
            }
        ],
        "bug_id": "uima-as_11",
        "parent": "https://github.com/apache/uima-as/commit/d06d5adf7cc459bc343aca9157ef68f801bf2d8c",
        "message": "UIMA-2324 Fixes NPE while recovering from CM failure. Added new testcase\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-as/trunk@1229564 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "uima-as"
    },
    {
        "commit": "https://github.com/apache/uima-as/commit/510e9926d7ddf039072459db22949c9366a7ad53",
        "file": [
            {
                "patch": "@@ -23,24 +23,21 @@\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.Timer;\n import java.util.TimerTask;\n-import java.util.Map.Entry;\n-import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.Semaphore;\n \n import org.apache.uima.UIMAFramework;\n import org.apache.uima.aae.AsynchAECasManager;\n import org.apache.uima.aae.InProcessCache;\n+import org.apache.uima.aae.InProcessCache.CacheEntry;\n import org.apache.uima.aae.UIMAEE_Constants;\n import org.apache.uima.aae.UimaClassFactory;\n-import org.apache.uima.aae.InProcessCache.CacheEntry;\n import org.apache.uima.aae.controller.LocalCache.CasStateEntry;\n import org.apache.uima.aae.error.AsynchAEException;\n import org.apache.uima.aae.error.ErrorContext;\n import org.apache.uima.aae.error.ErrorHandler;\n-import org.apache.uima.aae.error.ServiceShutdownException;\n import org.apache.uima.aae.jmx.JmxManagement;\n import org.apache.uima.aae.jmx.PrimitiveServiceInfo;\n import org.apache.uima.aae.jmx.ServicePerformance;\n@@ -51,24 +48,20 @@\n import org.apache.uima.aae.spi.transport.UimaMessage;\n import org.apache.uima.aae.spi.transport.UimaTransport;\n import org.apache.uima.analysis_engine.AnalysisEngine;\n-import org.apache.uima.analysis_engine.AnalysisEngineDescription;\n import org.apache.uima.analysis_engine.AnalysisEngineManagement;\n import org.apache.uima.analysis_engine.CasIterator;\n-import org.apache.uima.analysis_engine.impl.AnalysisEngineManagementImpl;\n import org.apache.uima.analysis_engine.metadata.AnalysisEngineMetaData;\n import org.apache.uima.cas.CAS;\n import org.apache.uima.cas.impl.CASImpl;\n import org.apache.uima.cas.impl.OutOfTypeSystemData;\n import org.apache.uima.resource.ResourceInitializationException;\n-import org.apache.uima.resource.ResourceProcessException;\n import org.apache.uima.resource.ResourceSpecifier;\n import org.apache.uima.resource.metadata.ConfigurationParameter;\n import org.apache.uima.resource.metadata.impl.ConfigurationParameter_impl;\n-import org.apache.uima.util.InvalidXMLException;\n import org.apache.uima.util.Level;\n-import org.apache.xmlbeans.impl.common.XmlStreamUtils;\n \n import com.thoughtworks.xstream.XStream;\n+import com.thoughtworks.xstream.io.xml.DomDriver;\n \n public class PrimitiveAnalysisEngineController_impl extends BaseAnalysisEngineController implements\n         PrimitiveAnalysisEngineController {\n@@ -102,7 +95,7 @@\n \n   static private Object threadDumpMonitor = new Object();\n   static private Long lastDump = Long.valueOf(0);\n-  private XStream xstream = new XStream();\n+  private XStream xstream = new XStream(new DomDriver());\n \n   public PrimitiveAnalysisEngineController_impl(String anEndpointName,\n           String anAnalysisEngineDescriptor, AsynchAECasManager aCasManager,\n@@ -179,7 +172,6 @@ public void initializeAnalysisEngine() throws ResourceInitializationException {\n       sharedInitSemaphore.acquire();\n       // Parse the descriptor in the calling thread.\n       rSpecifier = UimaClassFactory.produceResourceSpecifier(super.aeDescriptor);\n-\n       AnalysisEngine ae = UIMAFramework.produceAnalysisEngine(rSpecifier, paramsMap);\n         //  Call to produceAnalysisEngine() may take a long time to complete. While this\n         //  method was executing, the service may have been stopped. Before continuing \n@@ -546,8 +538,9 @@ public void process(CAS aCAS, String aCasReferenceId, Endpoint anEndpoint) {\n       \n       AnalysisEngineManagement rootAem = ae.getManagementInterface();\n       beforeAnalysisManagementObjects.add(deepCopy(rootAem));   \n-      getLeafManagementObjects(rootAem, beforeAnalysisManagementObjects, true);\n-      \n+      if ( rootAem.getComponents().size() > 0 ) {\n+          getLeafManagementObjects(rootAem, beforeAnalysisManagementObjects, true);\n+      }\n       \n       CasIterator casIterator = ae.processAndOutputNewCASes(aCAS);\n       if ( stackDumpTimer != null ) {\n@@ -803,13 +796,15 @@ public void process(CAS aCAS, String aCasReferenceId, Endpoint anEndpoint) {\n       AnalysisEngineManagement aem = ae.getManagementInterface();\n       //  Add the top level AnalysisEngineManagement instance.\n       afterAnalysisManagementObjects.add(aem);    \n-      //  Flatten the hierarchy by recursively (if this AE is an aggregate) extracting  \n-      //  primitive AE's AnalysisEngineManagement instance and placing it in \n-      //  afterAnalysisManagementObjects List.\n-      getLeafManagementObjects(aem, afterAnalysisManagementObjects, false);\n+      if ( aem.getComponents().size() > 0) {\n+          //  Flatten the hierarchy by recursively (if this AE is an aggregate) extracting  \n+          //  primitive AE's AnalysisEngineManagement instance and placing it in \n+          //  afterAnalysisManagementObjects List.\n+          getLeafManagementObjects(aem, afterAnalysisManagementObjects, false);\n+      }\n \n       //  Create a List to hold per CAS analysisTime and total number of CASes processed\n-      //  by each AE. This list will be serialized and send to the client\n+      //  by each AE. This list will be serialized and sent to the client\n       List<AnalysisEnginePerformanceMetrics> performanceList = \n         new ArrayList<AnalysisEnginePerformanceMetrics>();\n       //  Diff the before process() performance metrics with post process performance\n@@ -827,7 +822,7 @@ public void process(CAS aCAS, String aCasReferenceId, Endpoint anEndpoint) {\n           }\n         }\n       }\n-      //  Save this CAS per component performance metrics\n+      //  Save this component performance metrics\n       parentCasStateEntry.getAEPerformanceList().addAll(performanceList);\n       \n       if (!anEndpoint.isRemote()) {",
                "additions": 15,
                "raw_url": "https://github.com/apache/uima-as/raw/510e9926d7ddf039072459db22949c9366a7ad53/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/PrimitiveAnalysisEngineController_impl.java",
                "status": "modified",
                "changes": 35,
                "deletions": 20,
                "sha": "53883b4e81548986dc116d1b78526b69921fd5c5",
                "blob_url": "https://github.com/apache/uima-as/blob/510e9926d7ddf039072459db22949c9366a7ad53/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/PrimitiveAnalysisEngineController_impl.java",
                "filename": "uimaj-as-core/src/main/java/org/apache/uima/aae/controller/PrimitiveAnalysisEngineController_impl.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/PrimitiveAnalysisEngineController_impl.java?ref=510e9926d7ddf039072459db22949c9366a7ad53"
            }
        ],
        "bug_id": "uima-as_12",
        "parent": "https://github.com/apache/uima-as/commit/22ff0b314b042fba2a2f85981c17ce7d1dcd2b90",
        "message": "UIMA-2180 modified to use DOM parser when doing deep copy of AnalysisEngineManagement instance. Added sanity checks to guard against NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-as/trunk@1174844 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "uima-as"
    },
    {
        "commit": "https://github.com/apache/uima-as/commit/8c8e991e11da429ef6797a00d32cb8d199fb323a",
        "file": [
            {
                "patch": "@@ -156,7 +156,7 @@ protected String getDestinationEndpoint() throws Exception {\n    * Returns jsm MessageProducer\n    */\n   public MessageProducer getMessageProducer() {\n-    if ( engine.producerInitialized == false ) {\n+    if ( engine.running && engine.producerInitialized == false  ) {\n       try {\n         setConnection(engine.sharedConnection.getConnection());\n         initializeProducer();",
                "additions": 1,
                "raw_url": "https://github.com/apache/uima-as/raw/8c8e991e11da429ef6797a00d32cb8d199fb323a/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/ActiveMQMessageSender.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "df485e88da3bc72bf22e8fae32ef512227980600",
                "blob_url": "https://github.com/apache/uima-as/blob/8c8e991e11da429ef6797a00d32cb8d199fb323a/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/ActiveMQMessageSender.java",
                "filename": "uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/ActiveMQMessageSender.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/ActiveMQMessageSender.java?ref=8c8e991e11da429ef6797a00d32cb8d199fb323a"
            }
        ],
        "bug_id": "uima-as_13",
        "parent": "https://github.com/apache/uima-as/commit/fd2950af43752cb93061a1bb14abf146f4c3ec1c",
        "message": "UIMA-1751 Fixes NPE that sometimes happens when the engine stops\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/uima/uima-as/trunk@927925 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "uima-as"
    },
    {
        "commit": "https://github.com/apache/uima-as/commit/2356552c032aadfe59cce2533dc50c96bbcaa70a",
        "file": [
            {
                "patch": "@@ -836,6 +836,10 @@ public void setDelayedSingleStepList(List aList) {\n     public List getDelayedSingleStepList() {\n       return delayedSingleStepList;\n     }\n+    \n+    public void setMarker(Marker mark) {\n+\t\t\tthis.marker = mark;\n+\t\t}\n \n   }\n ",
                "additions": 4,
                "raw_url": "https://github.com/apache/uima-as/raw/2356552c032aadfe59cce2533dc50c96bbcaa70a/uimaj-as-core/src/main/java/org/apache/uima/aae/InProcessCache.java",
                "status": "modified",
                "changes": 4,
                "deletions": 0,
                "sha": "84bcde63f2efde5c490b68b9d35d93afbf9fad16",
                "blob_url": "https://github.com/apache/uima-as/blob/2356552c032aadfe59cce2533dc50c96bbcaa70a/uimaj-as-core/src/main/java/org/apache/uima/aae/InProcessCache.java",
                "filename": "uimaj-as-core/src/main/java/org/apache/uima/aae/InProcessCache.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-core/src/main/java/org/apache/uima/aae/InProcessCache.java?ref=2356552c032aadfe59cce2533dc50c96bbcaa70a"
            }
        ],
        "bug_id": "uima-as_14",
        "parent": "https://github.com/apache/uima-as/commit/38cb9ce4037197f434ef9120ebdea23fb49a7bba",
        "message": "UIMA-1269 Applied Bhavani patch to fix NPE when using C++ service via JNI\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/uima/uima-as/trunk@818199 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "uima-as"
    },
    {
        "commit": "https://github.com/apache/uima-as/commit/38cb9ce4037197f434ef9120ebdea23fb49a7bba",
        "file": [
            {
                "patch": "@@ -143,7 +143,7 @@ protected void setFreeCasQueue(Destination destination) {\n   }\n \n   public String getServerURI() {\n-    return serverURI; \n+    return serverURI;\n   }\n \n   public String getName() {\n@@ -211,14 +211,19 @@ public String serializeCAS(boolean isReply, CAS aCAS, String aCasReferenceId,\n       }\n       if (isReply) {\n         serSharedData = cacheEntry.getDeserSharedData();\n-        if (cacheEntry.acceptsDeltaCas()) {\n+        if (cacheEntry.acceptsDeltaCas()\n+                && (cacheEntry.getMarker() != null && cacheEntry.getMarker().isValid())) {\n           serializedCas = uimaSerializer.serializeCasToXmi(aCAS, serSharedData, cacheEntry\n                   .getMarker());\n           cacheEntry.setSentDeltaCas(true);\n         } else {\n           serializedCas = uimaSerializer.serializeCasToXmi(aCAS, serSharedData);\n           cacheEntry.setSentDeltaCas(false);\n         }\n+        // if market is invalid, create a fresh marker.\n+        if (cacheEntry.getMarker() != null && !cacheEntry.getMarker().isValid()) {\n+          cacheEntry.setMarker(aCAS.createMarker());\n+        }\n       } else {\n         serSharedData = cacheEntry.getDeserSharedData();\n         if (serSharedData == null) {\n@@ -528,7 +533,7 @@ public void sendRequest(int aCommand, Endpoint anEndpoint) {\n       TextMessage tm = endpointConnection.produceTextMessage(\"\");\n       tm.setIntProperty(AsynchAEMessage.Payload, AsynchAEMessage.None);\n       tm.setText(\"\"); // Need this to prevent the Broker from throwing an exception when sending a\n-                      // message to C++ service\n+      // message to C++ service\n \n       populateHeaderWithRequestContext(tm, anEndpoint, aCommand);\n \n@@ -1046,7 +1051,7 @@ public void sendReply(ProcessingResourceMetaData aProcessingResourceMetadata,\n       return;\n     }\n     long msgSize = 0;\n-    \n+\n     ByteArrayOutputStream bos = new ByteArrayOutputStream();\n     try {\n       anEndpoint.setReplyEndpoint(true);\n@@ -1133,12 +1138,21 @@ public void sendReply(ProcessingResourceMetaData aProcessingResourceMetadata,\n       }\n       if (serializer.equals(\"binary\")) {\n         if (entry.acceptsDeltaCas() && isReply) {\n-          serializedCAS = uimaSerializer.serializeCasToBinary(cas, entry.getMarker());\n-          entry.setSentDeltaCas(true);\n+          if (entry.getMarker() != null && entry.getMarker().isValid()) {\n+            serializedCAS = uimaSerializer.serializeCasToBinary(cas, entry.getMarker());\n+            entry.setSentDeltaCas(true);\n+          } else {\n+            serializedCAS = uimaSerializer.serializeCasToBinary(cas);\n+            entry.setSentDeltaCas(false);\n+          }\n         } else {\n           serializedCAS = uimaSerializer.serializeCasToBinary(cas);\n           entry.setSentDeltaCas(false);\n         }\n+        // create a fresh marker\n+        if (entry.getMarker() != null && !entry.getMarker().isValid()) {\n+          entry.setMarker(cas.createMarker());\n+        }\n       } else {\n         if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.INFO)) {\n           UIMAFramework.getLogger(CLASS_NAME).logrb(",
                "additions": 20,
                "raw_url": "https://github.com/apache/uima-as/raw/38cb9ce4037197f434ef9120ebdea23fb49a7bba/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/activemq/JmsOutputChannel.java",
                "status": "modified",
                "changes": 26,
                "deletions": 6,
                "sha": "1dfeecbae60f35520b2bc892e96cbc67c4a18129",
                "blob_url": "https://github.com/apache/uima-as/blob/38cb9ce4037197f434ef9120ebdea23fb49a7bba/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/activemq/JmsOutputChannel.java",
                "filename": "uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/activemq/JmsOutputChannel.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/activemq/JmsOutputChannel.java?ref=38cb9ce4037197f434ef9120ebdea23fb49a7bba"
            }
        ],
        "bug_id": "uima-as_15",
        "parent": "https://github.com/apache/uima-as/commit/305f93c178f548d30f0dc600dd1fba97e42d1453",
        "message": "UIMA-1269 Applied Bhavani patch to fix NPE when using C++ service via JNI\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/uima/uima-as/trunk@818197 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "uima-as"
    },
    {
        "commit": "https://github.com/apache/uima-as/commit/8579b5244f627de12eed29a2e869eaf60fdfc66f",
        "file": [
            {
                "patch": "@@ -1215,6 +1215,7 @@ private void handleProcessReplyFromCasMultiplier(Message message, String casRefe\n     Destination freeCASNotificationDestination = message.getJMSReplyTo();\n     if (freeCASNotificationDestination != null) {\n       TextMessage msg = createTextMessage();\n+      msg.setText(\"\");\n       setReleaseCASMessage(msg, casReferenceId);\n       // Create Message Producer for the Destination\n       MessageProducer msgProducer = getMessageProducer(freeCASNotificationDestination);",
                "additions": 1,
                "raw_url": "https://github.com/apache/uima-as/raw/8579b5244f627de12eed29a2e869eaf60fdfc66f/uimaj-as-jms/src/main/java/org/apache/uima/adapter/jms/client/BaseUIMAAsynchronousEngineCommon_impl.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "999eca4f35c157f26bd0a0561db682d67b553e0f",
                "blob_url": "https://github.com/apache/uima-as/blob/8579b5244f627de12eed29a2e869eaf60fdfc66f/uimaj-as-jms/src/main/java/org/apache/uima/adapter/jms/client/BaseUIMAAsynchronousEngineCommon_impl.java",
                "filename": "uimaj-as-jms/src/main/java/org/apache/uima/adapter/jms/client/BaseUIMAAsynchronousEngineCommon_impl.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-jms/src/main/java/org/apache/uima/adapter/jms/client/BaseUIMAAsynchronousEngineCommon_impl.java?ref=8579b5244f627de12eed29a2e869eaf60fdfc66f"
            }
        ],
        "bug_id": "uima-as_16",
        "parent": "https://github.com/apache/uima-as/commit/030a7c2f17f28f84a19924383c115e3d8117e663",
        "message": "UIMA-1565 Fixes NPE when running with AMQ 5.2 and using empty TextMessage\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/uima/uima-as/trunk@815403 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "uima-as"
    },
    {
        "commit": "https://github.com/apache/uima-as/commit/030a7c2f17f28f84a19924383c115e3d8117e663",
        "file": [
            {
                "patch": "@@ -145,7 +145,7 @@ public TextMessage createTextMessage() throws Exception {\n       throw new JMSException(\n               \"Unable To Create JMS TextMessage. Reason: JMS Session Not Initialized\");\n     }\n-    return session.createTextMessage();\n+    return session.createTextMessage(\"\");\n   }\n \n   public BytesMessage createBytesMessage() throws Exception {",
                "additions": 1,
                "raw_url": "https://github.com/apache/uima-as/raw/030a7c2f17f28f84a19924383c115e3d8117e663/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/ActiveMQMessageSender.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "1bdde7441e1f472f4aa9660a14882ec23b665480",
                "blob_url": "https://github.com/apache/uima-as/blob/030a7c2f17f28f84a19924383c115e3d8117e663/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/ActiveMQMessageSender.java",
                "filename": "uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/ActiveMQMessageSender.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/ActiveMQMessageSender.java?ref=030a7c2f17f28f84a19924383c115e3d8117e663"
            },
            {
                "patch": "@@ -955,6 +955,7 @@ private void stopProducingCases(ClientRequest clientCachedRequest) {\n     try {\n       if (clientCachedRequest.getFreeCasNotificationQueue() != null) {\n         TextMessage msg = createTextMessage();\n+        msg.setText(\"\");\n         msg.setIntProperty(AsynchAEMessage.Payload, AsynchAEMessage.None);\n         msg\n                 .setStringProperty(AsynchAEMessage.CasReference, clientCachedRequest",
                "additions": 1,
                "raw_url": "https://github.com/apache/uima-as/raw/030a7c2f17f28f84a19924383c115e3d8117e663/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/BaseUIMAAsynchronousEngine_impl.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "ff3fcd87cc1a34a887ba72c8806ff0d745f1b95b",
                "blob_url": "https://github.com/apache/uima-as/blob/030a7c2f17f28f84a19924383c115e3d8117e663/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/BaseUIMAAsynchronousEngine_impl.java",
                "filename": "uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/BaseUIMAAsynchronousEngine_impl.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/client/BaseUIMAAsynchronousEngine_impl.java?ref=030a7c2f17f28f84a19924383c115e3d8117e663"
            }
        ],
        "bug_id": "uima-as_17",
        "parent": "https://github.com/apache/uima-as/commit/a69cb998eb78b0d38f16ccf7b8d611bdf045635b",
        "message": "UIMA-1565 Fixes NPE when running with AMQ 5.2 and using empty TextMessage\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/uima/uima-as/trunk@815402 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "uima-as"
    },
    {
        "commit": "https://github.com/apache/uima-as/commit/d3e866b121aa320eb5979d151167c9fe86b502bd",
        "file": [
            {
                "patch": "@@ -501,7 +501,7 @@ public void run() {\n           __listenerRef.injectTaskExecutor();\n           //  Notify Spring Listener that all properties are ready\n           __listenerRef.allPropertiesSet();\n-          if (isActiveMQDestination()) {\n+          if (isActiveMQDestination() && destination != null ) {\n             destinationName = ((ActiveMQDestination) destination).getPhysicalName();\n           }\n           if ( !done ) {",
                "additions": 1,
                "raw_url": "https://github.com/apache/uima-as/raw/d3e866b121aa320eb5979d151167c9fe86b502bd/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/activemq/UimaDefaultMessageListenerContainer.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "c2455ea652c45d57323e29edd86c8e63bcebdace",
                "blob_url": "https://github.com/apache/uima-as/blob/d3e866b121aa320eb5979d151167c9fe86b502bd/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/activemq/UimaDefaultMessageListenerContainer.java",
                "filename": "uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/activemq/UimaDefaultMessageListenerContainer.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/activemq/UimaDefaultMessageListenerContainer.java?ref=d3e866b121aa320eb5979d151167c9fe86b502bd"
            }
        ],
        "bug_id": "uima-as_18",
        "parent": "https://github.com/apache/uima-as/commit/1624c695e58bb4e25b04346bb95bee09307f60b5",
        "message": "UIMA-1459 Fixes NPE in UimaDefaultMessageListenerContainer.afterPropertiesSet() when trying to extract a queue name from uninitialized destination object\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/uima/uima-as/trunk@810079 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "uima-as"
    },
    {
        "commit": "https://github.com/apache/uima-as/commit/3c01b46cc3c5600fcc34a88ac108a22711123747",
        "file": [
            {
                "patch": "@@ -544,7 +544,7 @@ public void sendRequest(int aCommand, Endpoint anEndpoint)\n \t\t\tJmsEndpointConnection_impl endpointConnection = \n \t\t\t\tgetEndpointConnection(anEndpoint);\n \t\t\t\n-\t\t\tTextMessage tm = endpointConnection.produceTextMessage(null);\n+\t\t\tTextMessage tm = endpointConnection.produceTextMessage(\"\");\n \t\t\ttm.setIntProperty(AsynchAEMessage.Payload, AsynchAEMessage.None); \n \t\t\ttm.setText(\"\");    // Need this to prevent the Broker from throwing an exception when sending a message to C++ service\n \t\t\t\n@@ -838,7 +838,7 @@ public void sendReply( int aCommand, Endpoint anEndpoint, String aCasReferenceId\n       JmsEndpointConnection_impl endpointConnection = \n         getEndpointConnection(anEndpoint);\n \n-      TextMessage tm = endpointConnection.produceTextMessage(null);\n+      TextMessage tm = endpointConnection.produceTextMessage(\"\");\n       tm.setIntProperty(AsynchAEMessage.Payload, AsynchAEMessage.None); \n       populateHeaderWithResponseContext(tm, anEndpoint, aCommand);\n       tm.setStringProperty(AsynchAEMessage.CasReference, aCasReferenceId);\n@@ -897,7 +897,7 @@ public void sendReply( int aCommand, Endpoint anEndpoint ) throws AsynchAEExcept\n \t\t\t}\n \t\t\tJmsEndpointConnection_impl endpointConnection = getEndpointConnection(anEndpoint);\n \n-\t\t\tTextMessage tm = endpointConnection.produceTextMessage(null);\n+\t\t\tTextMessage tm = endpointConnection.produceTextMessage(\"\");\n \t\t\ttm.setIntProperty(AsynchAEMessage.Payload, AsynchAEMessage.None); \n \t\t\tpopulateHeaderWithResponseContext(tm, anEndpoint, aCommand);\n \t\t\t\n@@ -2322,7 +2322,9 @@ public void run() {\n       delegate.getEndpoint().setStatus(Endpoint.FAILED);\n       //  Destroy listener associated with a reply queue for this delegate\n       InputChannel ic = controller.getInputChannel(delegate.getEndpoint().getDestination().toString());\n-      ic.destroyListener(delegate.getEndpoint().getDestination().toString(), endpoint.getDelegateKey());\n+      if ( ic != null && delegate != null && delegate.getEndpoint() != null) {\n+        ic.destroyListener(delegate.getEndpoint().getDestination().toString(), endpoint.getDelegateKey());\n+      }\n       //  Setup error context and handle failure in the error handler\n       ErrorContext errorContext = new ErrorContext();\n       errorContext.add(AsynchAEMessage.Command, AsynchAEMessage.Process);",
                "additions": 6,
                "raw_url": "https://github.com/apache/uima-as/raw/3c01b46cc3c5600fcc34a88ac108a22711123747/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/activemq/JmsOutputChannel.java",
                "status": "modified",
                "changes": 10,
                "deletions": 4,
                "sha": "42b9ff29833356dc9bdc958e85373cc7b5923139",
                "blob_url": "https://github.com/apache/uima-as/blob/3c01b46cc3c5600fcc34a88ac108a22711123747/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/activemq/JmsOutputChannel.java",
                "filename": "uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/activemq/JmsOutputChannel.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/main/java/org/apache/uima/adapter/jms/activemq/JmsOutputChannel.java?ref=3c01b46cc3c5600fcc34a88ac108a22711123747"
            }
        ],
        "bug_id": "uima-as_19",
        "parent": "https://github.com/apache/uima-as/commit/28fc3fee7e8f40ca72dcb13113e7f3ea132aa3bc",
        "message": "UIMA-1477 Fixes NPE when using TextMessage initialized with null. This seems to be a problem on 64 bit machines\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/uima/uima-as/trunk@808441 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "uima-as"
    },
    {
        "commit": "https://github.com/apache/uima-as/commit/ba19d0ba3fea7f1e4d610c0136ff932b009e558e",
        "file": [
            {
                "patch": "@@ -28,6 +28,7 @@\n import java.util.concurrent.ThreadFactory;\r\n import java.util.concurrent.ThreadPoolExecutor;\r\n import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.atomic.AtomicBoolean;\r\n \r\n import org.apache.uima.aae.UIDGenerator;\r\n import org.apache.uima.aae.UimaAsContext;\r\n@@ -71,6 +72,8 @@\n   private AnalysisEngineController controller;\r\n \r\n   private UimaAsContext context;\r\n+  \r\n+  private AtomicBoolean stopping = new AtomicBoolean(false);\r\n \r\n   public VmTransport(UimaAsContext aContext, AnalysisEngineController aController) {\r\n     context = aContext;\r\n@@ -112,6 +115,10 @@ public void startIt() throws UimaSpiException {\n   }\r\n \r\n   public synchronized void stopIt() throws UimaSpiException {\r\n+    if ( stopping.get() == true ) {\r\n+      return;\r\n+    }\r\n+    stopping.set(true);\r\n     executor.purge();\r\n     executor.shutdownNow();\r\n     workQueue.clear();\r\n@@ -121,8 +128,10 @@ public synchronized void stopIt() throws UimaSpiException {\n       dispatcher.stop();\r\n     }\r\n     if ( threadGroup != null ) {\r\n-        new Thread(threadGroup.getParent(),threadGroup.getName()+\":Reaper\") {\r\n+      //  Spin a thread where we wait for threads in the threadGroup to stop.\r\n+      new Thread(threadGroup.getParent(),threadGroup.getName()+\":Reaper\") {\r\n           public void run() {\r\n+            \r\n             while ( threadGroup.activeCount() > 0) {\r\n               synchronized(this) {\r\n                 try {\r",
                "additions": 10,
                "raw_url": "https://github.com/apache/uima-as/raw/ba19d0ba3fea7f1e4d610c0136ff932b009e558e/uimaj-as-core/src/main/java/org/apache/uima/aae/spi/transport/vm/VmTransport.java",
                "status": "modified",
                "changes": 11,
                "deletions": 1,
                "sha": "82324d104b75a74931408e22abfb34617d3e0db8",
                "blob_url": "https://github.com/apache/uima-as/blob/ba19d0ba3fea7f1e4d610c0136ff932b009e558e/uimaj-as-core/src/main/java/org/apache/uima/aae/spi/transport/vm/VmTransport.java",
                "filename": "uimaj-as-core/src/main/java/org/apache/uima/aae/spi/transport/vm/VmTransport.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-core/src/main/java/org/apache/uima/aae/spi/transport/vm/VmTransport.java?ref=ba19d0ba3fea7f1e4d610c0136ff932b009e558e"
            }
        ],
        "bug_id": "uima-as_20",
        "parent": "https://github.com/apache/uima-as/commit/67977ed4bde68b0d7565e0ce876621be94c0a17d",
        "message": "UIMA-1439 prevent stopIt() from executing by more than one thread. This problem fixes NPE and a race condition during service shutdown\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/uima/uima-as/trunk@806214 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "uima-as"
    },
    {
        "commit": "https://github.com/apache/uima-as/commit/6c15926c64eb63930af6613e68019babfc9e266d",
        "file": [
            {
                "patch": "@@ -89,15 +89,109 @@ public void testBrokerLifecycle() {\n             + System.getProperty(\"file.separator\") + \"bin\" + System.getProperty(\"file.separator\")\n             + \"dd2spring.xsl\");\n   }\n+  public void testAggregateHttpTunnelling() throws Exception {\n+    System.out.println(\"-------------- testAggregateHttpTunnelling -------------\");\n+    String httpURI = getHttpURI();\n+    // Create Uima EE Client\n+    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+    // Deploy remote service\n+    deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+    // Deploy top level aggregate that communicates with the remote via Http Tunnelling\n+    deployService(eeUimaEngine, relativePath + \"/Deploy_AggregateAnnotatorWithHttpDelegate.xml\");\n+\n+    // Initialize and run the Test. Wait for a completion and cleanup resources.\n+    runTest(null, eeUimaEngine, String.valueOf(broker.getMasterConnectorURI()), \"TopLevelTaeQueue\",\n+            10, CPC_LATCH);\n+  }\n+  public void testClientHttpTunnellingToAggregate() throws Exception {\n+    System.out.println(\"-------------- testClientHttpTunnellingToAggregate -------------\");\n+    // Add HTTP Connector to the broker. The connector will use port 8888. If this port is not\n+    // available the test fails\n+    String httpURI = getHttpURI();\n+    // Create Uima EE Client\n+    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+    // Deploy remote service\n+    deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+    deployService(eeUimaEngine, relativePath + \"/Deploy_AggregateAnnotator.xml\");\n+    // Initialize and run the Test. Wait for a completion and cleanup resources.\n+    System.out.println(\"-------- Connecting Client To Service: \"+httpURI);\n+    runTest(null, eeUimaEngine, httpURI, \"TopLevelTaeQueue\", 1, CPC_LATCH);\n+  }\n+  public void testClientHttpTunnelling() throws Exception {\n+    System.out.println(\"-------------- testClientHttpTunnelling -------------\");\n+    String httpURI = getHttpURI();\n+    // Create Uima EE Client\n+    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+    // Deploy remote service\n+    deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+    // Initialize and run the Test. Wait for a completion and cleanup resources.\n+    System.out.println(\"-------- Connecting Client To Service: \"+httpURI);\n+    runTest(null, eeUimaEngine, httpURI, \"NoOpAnnotatorQueue\", 1, PROCESS_LATCH);\n+  }\n+\n+\n+  public void testClientHttpTunnellingWithDoubleByteText() throws Exception {\n+    System.out.println(\"-------------- testClientHttpTunnellingWithDoubleByteText -------------\");\n+\n+    BufferedReader in = null;\n+    try {\n+      File file = new File(relativeDataPath + \"/DoubleByteText.txt\");\n+      System.out.println(\"Checking for existence of File:\" + file.getAbsolutePath());\n+      // Process only if the file exists\n+      if (file.exists()) {\n+        System.out\n+                .println(\" *** DoubleByteText.txt exists and will be sent through http connector.\");\n+        System.out.println(\" ***   If the vanilla activemq release is being used,\");\n+        System.out\n+                .println(\" ***   and DoubleByteText.txt is bigger than 64KB or so, this test case will hang.\");\n+        System.out\n+                .println(\" *** To fix, override the classpath with the jar files in and under the\");\n+        System.out\n+                .println(\" ***   apache-uima-as/uima-as-distr/src/main/apache-activemq-X.y.z directory\");\n+        System.out.println(\" ***   in the apache-uima-as source distribution.\");\n+\n+        String httpURI = getHttpURI();\n+      // Create Uima EE Client\n+        BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+        // Deploy remote service\n+        deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+\n+        InputStream fis = new FileInputStream(file);\n+        Reader rd = new InputStreamReader(fis, \"UTF-8\");\n+        in = new BufferedReader(rd);\n+        // Set the double-byte text. This is what will be sent to the service\n+        String line = in.readLine();\n+        super.setDoubleByteText(line);\n+        int err = XMLUtils.checkForNonXmlCharacters(line);\n+        if (err >= 0) {\n+          fail(\"Illegal XML char at offset \" + err);\n+        }\n+        System.out.println(\"-------- Connecting Client To Service: \"+httpURI);\n+        // Initialize and run the Test. Wait for a completion and cleanup resources.\n+        runTest(null, eeUimaEngine, httpURI, \"NoOpAnnotatorQueue\", 1, CPC_LATCH);\n+      }\n+    } catch (Exception e) {\n+      // Double-Byte Text file not present. Continue on with the next test\n+      e.printStackTrace();\n+      fail(\"Could not complete test\");\n+    } finally {\n+      if (in != null) {\n+        in.close();\n+      }\n+    }\n+  }\n+\n \n   public void testClientProcess() throws Exception {\n     System.out.println(\"-------------- testClientProcess -------------\");\n+    \n     // Instantiate Uima AS Client\n     BaseUIMAAsynchronousEngine_impl uimaAsEngine = new BaseUIMAAsynchronousEngine_impl();\n     // Deploy Uima AS Primitive Service\n     deployService(uimaAsEngine, relativePath + \"/Deploy_PersonTitleAnnotator.xml\");\n     Map<String, Object> appCtx = buildContext(String.valueOf(broker.getMasterConnectorURI()),\n             \"PersonTitleAnnotatorQueue\");\n+\n     initialize(uimaAsEngine, appCtx);\n     waitUntilInitialized();\n \n@@ -1485,109 +1579,109 @@ public void testPrimitiveShutdownOnTooManyErrors() throws Exception {\n             1, CPC_LATCH);\n   }\n \n-  public void testClientHttpTunnelling() throws Exception {\n-    System.out.println(\"-------------- testClientHttpTunnelling -------------\");\n-    // Add HTTP Connector to the broker. The connector will use port 8888. If this port is not\n-    // available the test fails\n-    String httpURI = addHttpConnector(DEFAULT_HTTP_PORT);\n-    // Create Uima EE Client\n-    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n-    // Deploy remote service\n-    deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n-    // Initialize and run the Test. Wait for a completion and cleanup resources.\n-    runTest(null, eeUimaEngine, httpURI, \"NoOpAnnotatorQueue\", 1, CPC_LATCH);\n-    // Remove the HTTP Connector\n-    removeHttpConnector();\n-  }\n-\n-  public void testClientHttpTunnellingToAggregate() throws Exception {\n-    System.out.println(\"-------------- testClientHttpTunnellingToAggregate -------------\");\n-    // Add HTTP Connector to the broker. The connector will use port 8888. If this port is not\n-    // available the test fails\n-    String httpURI = addHttpConnector(DEFAULT_HTTP_PORT);\n-    // Create Uima EE Client\n-    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n-    // Deploy remote service\n-    deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n-    deployService(eeUimaEngine, relativePath + \"/Deploy_AggregateAnnotator.xml\");\n-    // Initialize and run the Test. Wait for a completion and cleanup resources.\n-    runTest(null, eeUimaEngine, httpURI, \"TopLevelTaeQueue\", 1, CPC_LATCH);\n-    // Remove the HTTP Connector\n-    removeHttpConnector();\n-  }\n-\n-  public void testClientHttpTunnellingWithDoubleByteText() throws Exception {\n-    System.out.println(\"-------------- testClientHttpTunnellingWithDoubleByteText -------------\");\n-\n-    BufferedReader in = null;\n-    try {\n-      File file = new File(relativeDataPath + \"/DoubleByteText.txt\");\n-      System.out.println(\"Checking for existence of File:\" + file.getAbsolutePath());\n-      // Process only if the file exists\n-      if (file.exists()) {\n-        System.out\n-                .println(\" *** DoubleByteText.txt exists and will be sent through http connector.\");\n-        System.out.println(\" ***   If the vanilla activemq release is being used,\");\n-        System.out\n-                .println(\" ***   and DoubleByteText.txt is bigger than 64KB or so, this test case will hang.\");\n-        System.out\n-                .println(\" *** To fix, override the classpath with the jar files in and under the\");\n-        System.out\n-                .println(\" ***   apache-uima-as/uima-as-distr/src/main/apache-activemq-X.y.z directory\");\n-        System.out.println(\" ***   in the apache-uima-as source distribution.\");\n-\n-        // Add HTTP Connector to the broker. The connector will use port 8888. If this port is not\n-        // available the test fails\n-        String httpURI = addHttpConnector(DEFAULT_HTTP_PORT);\n-        // Create Uima EE Client\n-        BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n-        // Deploy remote service\n-        deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n-\n-        InputStream fis = new FileInputStream(file);\n-        Reader rd = new InputStreamReader(fis, \"UTF-8\");\n-        in = new BufferedReader(rd);\n-        // Set the double-byte text. This is what will be sent to the service\n-        String line = in.readLine();\n-        super.setDoubleByteText(line);\n-        int err = XMLUtils.checkForNonXmlCharacters(line);\n-        if (err >= 0) {\n-          fail(\"Illegal XML char at offset \" + err);\n-        }\n-        // Initialize and run the Test. Wait for a completion and cleanup resources.\n-        runTest(null, eeUimaEngine, httpURI, \"NoOpAnnotatorQueue\", 1, CPC_LATCH);\n-      }\n-    } catch (Exception e) {\n-      // Double-Byte Text file not present. Continue on with the next test\n-      e.printStackTrace();\n-      fail(\"Could not complete test\");\n-    } finally {\n-      if (in != null) {\n-        in.close();\n-      }\n-      // Remove the HTTP Connector\n-      removeHttpConnector();\n-    }\n-  }\n-\n-  public void testAggregateHttpTunnelling() throws Exception {\n-    System.out.println(\"-------------- testAggregateHttpTunnelling -------------\");\n-    // Add HTTP Connector to the broker. The connector will use port 8888. If this port is not\n-    // available the test fails\n-    addHttpConnector(DEFAULT_HTTP_PORT);\n-    // Create Uima EE Client\n-    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n-    // Deploy remote service\n-    deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n-    // Deploy top level aggregate that communicates with the remote via Http Tunnelling\n-    deployService(eeUimaEngine, relativePath + \"/Deploy_AggregateAnnotatorWithHttpDelegate.xml\");\n-\n-    // Initialize and run the Test. Wait for a completion and cleanup resources.\n-    runTest(null, eeUimaEngine, String.valueOf(broker.getMasterConnectorURI()), \"TopLevelTaeQueue\",\n-            10, CPC_LATCH);\n-    // Remove the HTTP Connector\n-    removeHttpConnector();\n-  }\n+//  public void testClientHttpTunnelling() throws Exception {\n+//    System.out.println(\"-------------- testClientHttpTunnelling -------------\");\n+//    // Add HTTP Connector to the broker. The connector will use port 8888. If this port is not\n+//    // available the test fails\n+//    String httpURI = addHttpConnector(DEFAULT_HTTP_PORT);\n+//    // Create Uima EE Client\n+//    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+//    // Deploy remote service\n+//    deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+//    // Initialize and run the Test. Wait for a completion and cleanup resources.\n+//    runTest(null, eeUimaEngine, httpURI, \"NoOpAnnotatorQueue\", 1, CPC_LATCH);\n+//    // Remove the HTTP Connector\n+//    removeHttpConnector();\n+//  }\n+//\n+//  public void testClientHttpTunnellingToAggregate() throws Exception {\n+//    System.out.println(\"-------------- testClientHttpTunnellingToAggregate -------------\");\n+//    // Add HTTP Connector to the broker. The connector will use port 8888. If this port is not\n+//    // available the test fails\n+//    String httpURI = addHttpConnector(DEFAULT_HTTP_PORT);\n+//    // Create Uima EE Client\n+//    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+//    // Deploy remote service\n+//    deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+//    deployService(eeUimaEngine, relativePath + \"/Deploy_AggregateAnnotator.xml\");\n+//    // Initialize and run the Test. Wait for a completion and cleanup resources.\n+//    runTest(null, eeUimaEngine, httpURI, \"TopLevelTaeQueue\", 1, CPC_LATCH);\n+//    // Remove the HTTP Connector\n+//    removeHttpConnector();\n+//  }\n+//\n+//  public void testClientHttpTunnellingWithDoubleByteText() throws Exception {\n+//    System.out.println(\"-------------- testClientHttpTunnellingWithDoubleByteText -------------\");\n+//\n+//    BufferedReader in = null;\n+//    try {\n+//      File file = new File(relativeDataPath + \"/DoubleByteText.txt\");\n+//      System.out.println(\"Checking for existence of File:\" + file.getAbsolutePath());\n+//      // Process only if the file exists\n+//      if (file.exists()) {\n+//        System.out\n+//                .println(\" *** DoubleByteText.txt exists and will be sent through http connector.\");\n+//        System.out.println(\" ***   If the vanilla activemq release is being used,\");\n+//        System.out\n+//                .println(\" ***   and DoubleByteText.txt is bigger than 64KB or so, this test case will hang.\");\n+//        System.out\n+//                .println(\" *** To fix, override the classpath with the jar files in and under the\");\n+//        System.out\n+//                .println(\" ***   apache-uima-as/uima-as-distr/src/main/apache-activemq-X.y.z directory\");\n+//        System.out.println(\" ***   in the apache-uima-as source distribution.\");\n+//\n+//        // Add HTTP Connector to the broker. The connector will use port 8888. If this port is not\n+//        // available the test fails\n+//        String httpURI = addHttpConnector(DEFAULT_HTTP_PORT);\n+//        // Create Uima EE Client\n+//        BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+//        // Deploy remote service\n+//        deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+//\n+//        InputStream fis = new FileInputStream(file);\n+//        Reader rd = new InputStreamReader(fis, \"UTF-8\");\n+//        in = new BufferedReader(rd);\n+//        // Set the double-byte text. This is what will be sent to the service\n+//        String line = in.readLine();\n+//        super.setDoubleByteText(line);\n+//        int err = XMLUtils.checkForNonXmlCharacters(line);\n+//        if (err >= 0) {\n+//          fail(\"Illegal XML char at offset \" + err);\n+//        }\n+//        // Initialize and run the Test. Wait for a completion and cleanup resources.\n+//        runTest(null, eeUimaEngine, httpURI, \"NoOpAnnotatorQueue\", 1, CPC_LATCH);\n+//      }\n+//    } catch (Exception e) {\n+//      // Double-Byte Text file not present. Continue on with the next test\n+//      e.printStackTrace();\n+//      fail(\"Could not complete test\");\n+//    } finally {\n+//      if (in != null) {\n+//        in.close();\n+//      }\n+//      // Remove the HTTP Connector\n+//      removeHttpConnector();\n+//    }\n+//  }\n+//\n+//  public void testAggregateHttpTunnelling() throws Exception {\n+//    System.out.println(\"-------------- testAggregateHttpTunnelling -------------\");\n+//    // Add HTTP Connector to the broker. The connector will use port 8888. If this port is not\n+//    // available the test fails\n+//    addHttpConnector(DEFAULT_HTTP_PORT);\n+//    // Create Uima EE Client\n+//    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+//    // Deploy remote service\n+//    deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+//    // Deploy top level aggregate that communicates with the remote via Http Tunnelling\n+//    deployService(eeUimaEngine, relativePath + \"/Deploy_AggregateAnnotatorWithHttpDelegate.xml\");\n+//\n+//    // Initialize and run the Test. Wait for a completion and cleanup resources.\n+//    runTest(null, eeUimaEngine, String.valueOf(broker.getMasterConnectorURI()), \"TopLevelTaeQueue\",\n+//            10, CPC_LATCH);\n+//    // Remove the HTTP Connector\n+//    removeHttpConnector();\n+//  }\n \n   /**\n    * Tests exception thrown in the Uima EE Client when the Collection Reader is added after the uima",
                "additions": 197,
                "raw_url": "https://github.com/apache/uima-as/raw/6c15926c64eb63930af6613e68019babfc9e266d/uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java",
                "status": "modified",
                "changes": 300,
                "deletions": 103,
                "sha": "932640069f128d635b36843dead84b826a825e74",
                "blob_url": "https://github.com/apache/uima-as/blob/6c15926c64eb63930af6613e68019babfc9e266d/uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java",
                "filename": "uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java?ref=6c15926c64eb63930af6613e68019babfc9e266d"
            }
        ],
        "bug_id": "uima-as_21",
        "parent": "https://github.com/apache/uima-as/commit/c78d2c0a737fa34a13fc0dced79ead9c960a716f",
        "message": "UIMA-1565 Modified to use reflection to detect 5.2.x version of AMQ. In such case the HTTP Connector must be initialized with an instance of a Broker before it is started. Otherwise NPE occurs. Modified to start HTTP Connector when the broker starts.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/uima/uima-as/trunk@815398 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "uima-as"
    },
    {
        "commit": "https://github.com/apache/uima-as/commit/c78d2c0a737fa34a13fc0dced79ead9c960a716f",
        "file": [
            {
                "patch": "@@ -20,39 +20,23 @@\n package org.apache.uima.ee.test.utils;\n \n import java.io.IOException;\n-import java.net.BindException;\n+import java.lang.reflect.Method;\n import java.net.ServerSocket;\n import java.net.URI;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.concurrent.CopyOnWriteArrayList;\n import java.util.concurrent.Semaphore;\n \n import javax.jms.Connection;\n import javax.jms.ConnectionFactory;\n-import javax.jms.Session;\n-import javax.management.ObjectName;\n \n import junit.framework.TestCase;\n \n import org.apache.activemq.ActiveMQConnectionFactory;\n import org.apache.activemq.broker.BrokerFactory;\n import org.apache.activemq.broker.BrokerService;\n-import org.apache.activemq.broker.Connector;\n-import org.apache.activemq.broker.TransportConnection;\n import org.apache.activemq.broker.TransportConnector;\n-import org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy;\n import org.apache.activemq.broker.region.policy.PolicyEntry;\n import org.apache.activemq.broker.region.policy.PolicyMap;\n import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;\n-import org.apache.activemq.command.ActiveMQDestination;\n-import org.apache.activemq.command.ActiveMQQueue;\n-import org.apache.uima.UIMAFramework;\n-import org.apache.uima.aae.error.handler.GetMetaErrorHandler;\n-import org.apache.uima.adapter.jms.JmsConstants;\n-import org.apache.uima.util.Level;\n \n public class ActiveMQSupport extends TestCase {\n   private static final Class CLASS_NAME = ActiveMQSupport.class;\n@@ -63,7 +47,7 @@\n \n   protected static ThreadGroup brokerThreadGroup = null;\n \n-  protected TransportConnector tcpConnector = null;\n+  protected static TransportConnector tcpConnector = null;\n \n   protected static final String relativePath = \"src\" + System.getProperty(\"file.separator\")\n           + \"test\" + System.getProperty(\"file.separator\") + \"resources\"\n@@ -75,9 +59,9 @@\n \n   private static Thread brokerThread = null;\n \n-  private TransportConnector httpConnector = null;\n+  protected static TransportConnector httpConnector = null;\n \n-  public Semaphore brokerSemaphore = new Semaphore(1);\n+  public static Semaphore brokerSemaphore = new Semaphore(1);\n \n   protected synchronized void setUp() throws Exception {\n     System.out.println(\"\\nSetting Up New Test - Thread Id:\" + Thread.currentThread().getId());\n@@ -95,6 +79,8 @@ public void run() {\n             broker = createBroker();\n             broker.start();\n             broker.setMasterConnectorURI(uri);\n+            addHttpConnector(8888);\n+\n             brokerSemaphore.release(); // broker started\n           } catch (Exception e) {\n             e.printStackTrace();\n@@ -121,6 +107,16 @@ protected String addHttpConnector(int aDefaultPort) throws Exception {\n     try {\n       String httpURI = generateInternalURI(\"http\", aDefaultPort);\n       httpConnector = broker.addConnector(httpURI);\n+      \n+      //  Use reflection to determine if the AMQ version is at least 5.2. If it is, we must\n+      //  plug in a broker to the httpConnector otherwise we get NPE when starting the connector.\n+      //  AMQ version 4.1.1 doesn't exhibit this problem.\n+      try {\n+        Method m = httpConnector.getClass().getDeclaredMethod(\"setBrokerService\", new Class[] {BrokerService.class});\n+        m.invoke(httpConnector, broker);\n+      } catch ( NoSuchMethodException e) {\n+        //  Ignore, this is not AMQ 5.2\n+      }\n       System.out.println(\"Adding HTTP Connector:\" + httpConnector.getConnectUri());\n       httpConnector.start();\n       return httpURI;\n@@ -129,9 +125,21 @@ protected String addHttpConnector(int aDefaultPort) throws Exception {\n       throw e;\n     }\n   }\n+  protected String getHttpURI() throws Exception {\n+    while ( httpConnector == null  ) {\n+     synchronized(this) {\n+       this.wait(100); \n+     }\n+    }\n+    return httpConnector.getConnectUri().toString();\n+  }\n+  protected void removeQueue(String aQueueName) throws Exception {\n+    httpConnector.stop();\n+  }\n \n   protected void removeHttpConnector() throws Exception {\n     httpConnector.stop();\n+    broker.removeConnector(httpConnector);\n   }\n \n   private String generateInternalURI(String aProtocol, int aDefaultPort) throws Exception {\n@@ -212,8 +220,10 @@ protected void stopBroker() throws Exception {\n       System.out.println(\">>> Stopping Broker\");\n       if (tcpConnector != null) {\n         tcpConnector.stop();\n+        broker.removeConnector(tcpConnector);\n         System.out.println(\"Broker Connector:\" + tcpConnector.getUri().toString() + \" is stopped\");\n       }\n+      removeHttpConnector();\n       broker.deleteAllMessages();\n       broker.stop();\n       System.out.println(\">>> Broker Stopped\");",
                "additions": 30,
                "raw_url": "https://github.com/apache/uima-as/raw/c78d2c0a737fa34a13fc0dced79ead9c960a716f/uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/utils/ActiveMQSupport.java",
                "status": "modified",
                "changes": 50,
                "deletions": 20,
                "sha": "e6a9861a9bdb7512a22ec1ed88d3c46012dc6918",
                "blob_url": "https://github.com/apache/uima-as/blob/c78d2c0a737fa34a13fc0dced79ead9c960a716f/uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/utils/ActiveMQSupport.java",
                "filename": "uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/utils/ActiveMQSupport.java",
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/utils/ActiveMQSupport.java?ref=c78d2c0a737fa34a13fc0dced79ead9c960a716f"
            }
        ],
        "bug_id": "uima-as_22",
        "parent": "https://github.com/apache/uima-as/commit/24b2a5d9bd8fab4de489b8e38481b749f4a1a7b8",
        "message": "UIMA-1565 Modified to use reflection to detect 5.2.x version of AMQ. In such case the HTTP Connector must be initialized with an instance of a Broker before it is started. Otherwise NPE occurs. Modified to start HTTP Connector when the broker starts.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/uima/uima-as/trunk@815395 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "uima-as"
    }
]