{
    "commons-configuration_1c53281": {
        "bug_id": "commons-configuration_1c53281",
        "commit": "https://github.com/apache/commons-configuration/commit/1c53281831611837de4358b6e75de594867f46b0",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-configuration/blob/1c53281831611837de4358b6e75de594867f46b0/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java?ref=1c53281831611837de4358b6e75de594867f46b0",
                "deletions": 3,
                "filename": "src/java/org/apache/commons/configuration/HierarchicalConfiguration.java",
                "patch": "@@ -151,7 +151,7 @@\n     private static final long serialVersionUID = 3373812230395363192L;\n \n     /** Stores the default expression engine to be used for new objects.*/\n-    private static ExpressionEngine defaultExpressionEngine = new DefaultExpressionEngine();\n+    private static ExpressionEngine defaultExpressionEngine;\n \n     /** Stores the root node of this configuration. This field is required for\n      * backwards compatibility only.\n@@ -258,8 +258,12 @@ public void setRootNode(ConfigurationNode rootNode)\n      * @return the default expression engine\n      * @since 1.3\n      */\n-    public static ExpressionEngine getDefaultExpressionEngine()\n+    public static synchronized ExpressionEngine getDefaultExpressionEngine()\n     {\n+        if (defaultExpressionEngine == null)\n+        {\n+            defaultExpressionEngine = new DefaultExpressionEngine();\n+        }\n         return defaultExpressionEngine;\n     }\n \n@@ -272,7 +276,7 @@ public static ExpressionEngine getDefaultExpressionEngine()\n      * @param engine the new default expression engine\n      * @since 1.3\n      */\n-    public static void setDefaultExpressionEngine(ExpressionEngine engine)\n+    public static synchronized void setDefaultExpressionEngine(ExpressionEngine engine)\n     {\n         if (engine == null)\n         {",
                "raw_url": "https://github.com/apache/commons-configuration/raw/1c53281831611837de4358b6e75de594867f46b0/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java",
                "sha": "ad839b9440c0f8bb5660fe53c69f89156401c164",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/commons-configuration/blob/1c53281831611837de4358b6e75de594867f46b0/xdocs/changes.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/xdocs/changes.xml?ref=1c53281831611837de4358b6e75de594867f46b0",
                "deletions": 0,
                "filename": "xdocs/changes.xml",
                "patch": "@@ -23,6 +23,11 @@\n \n   <body>\n     <release version=\"1.5-SNAPSHOT\" date=\"in SVN\" description=\"\">\n+      <action dev=\"oheger\" type=\"fix\" issue=\"CONFIGURATION-282\">\n+        The default expression engine used by HierarchicalConfiguration\n+        instances is now lazily initialized. This avoids NullPointerExceptions\n+        in certain server environments after a redeploy.\n+      </action>\n       <action dev=\"oheger\" type=\"fix\" issue=\"CONFIGURATION-281\">\n         Cycles in the JNDI tree no longer cause a stack overflow in\n         JNDIConfiguration.",
                "raw_url": "https://github.com/apache/commons-configuration/raw/1c53281831611837de4358b6e75de594867f46b0/xdocs/changes.xml",
                "sha": "85b0ec1bb2152df35de1b6f475bcb2d99eb586e6",
                "status": "modified"
            }
        ],
        "message": "CONFIGURATION-282: Initialize default expression engine for HierarchicalConfiguration lazily if it is null. This should avoid NPEs after redeployment.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/configuration/trunk@554746 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-configuration/commit/497bf061d76b0235738ad939d3196004036b207c",
        "repo": "commons-configuration",
        "unit_tests": [
            "TestHierarchicalConfiguration.java"
        ]
    },
    "commons-configuration_3af8e6e": {
        "bug_id": "commons-configuration_3af8e6e",
        "commit": "https://github.com/apache/commons-configuration/commit/3af8e6e23b211cd7d564b4d32cd214987131183d",
        "file": [
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/commons-configuration/blob/3af8e6e23b211cd7d564b4d32cd214987131183d/src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java?ref=3af8e6e23b211cd7d564b4d32cd214987131183d",
                "deletions": 11,
                "filename": "src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java",
                "patch": "@@ -47,6 +47,7 @@\n import org.apache.commons.configuration2.HierarchicalConfiguration;\n import org.apache.commons.configuration2.MapConfiguration;\n import org.apache.commons.configuration2.ex.ConfigurationException;\n+import org.apache.commons.configuration2.ex.ConfigurationRuntimeException;\n import org.apache.commons.configuration2.io.FileLocator;\n import org.apache.commons.configuration2.io.FileLocatorAware;\n import org.apache.commons.configuration2.tree.ImmutableNode;\n@@ -413,7 +414,7 @@ else if (value instanceof Map)\n         }\n         else if (value instanceof byte[])\n         {\n-            String base64 = null;\n+            String base64;\n             try\n             {\n                 base64 = new String(Base64.encodeBase64((byte[]) value), DATA_ENCODING);\n@@ -501,6 +502,23 @@ private PListNodeBuilder peek()\n             }\n         }\n \n+        /**\n+         * Returns the node on top of the non-empty stack. Throws an exception if the\n+         * stack is empty.\n+         *\n+         * @return the top node of the stack\n+         * @throws ConfigurationRuntimeException if the stack is empty\n+         */\n+        private PListNodeBuilder peekNE()\n+        {\n+            PListNodeBuilder result = peek();\n+            if (result == null)\n+            {\n+                throw new ConfigurationRuntimeException(\"Access to empty stack!\");\n+            }\n+            return result;\n+        }\n+\n         /**\n          * Remove and return the node on the top of the stack.\n          */\n@@ -549,7 +567,7 @@ public void endElement(String uri, String localName, String qName) throws SAXExc\n                 // create a new node, link it to its parent and push it on the stack\n                 PListNodeBuilder node = new PListNodeBuilder();\n                 node.setName(buffer.toString());\n-                peek().addChild(node);\n+                peekNE().addChild(node);\n                 push(node);\n             }\n             else if (\"dict\".equals(qName))\n@@ -562,41 +580,41 @@ else if (\"dict\".equals(qName))\n                     XMLPropertyListConfiguration config = new XMLPropertyListConfiguration(builder.createNode());\n \n                     // add it to the ArrayNodeBuilder\n-                    ArrayNodeBuilder node = (ArrayNodeBuilder) peek();\n+                    ArrayNodeBuilder node = (ArrayNodeBuilder) peekNE();\n                     node.addValue(config);\n                 }\n             }\n             else\n             {\n                 if (\"string\".equals(qName))\n                 {\n-                    peek().addValue(buffer.toString());\n+                    peekNE().addValue(buffer.toString());\n                 }\n                 else if (\"integer\".equals(qName))\n                 {\n-                    peek().addIntegerValue(buffer.toString());\n+                    peekNE().addIntegerValue(buffer.toString());\n                 }\n                 else if (\"real\".equals(qName))\n                 {\n-                    peek().addRealValue(buffer.toString());\n+                    peekNE().addRealValue(buffer.toString());\n                 }\n                 else if (\"true\".equals(qName))\n                 {\n-                    peek().addTrueValue();\n+                    peekNE().addTrueValue();\n                 }\n                 else if (\"false\".equals(qName))\n                 {\n-                    peek().addFalseValue();\n+                    peekNE().addFalseValue();\n                 }\n                 else if (\"data\".equals(qName))\n                 {\n-                    peek().addDataValue(buffer.toString());\n+                    peekNE().addDataValue(buffer.toString());\n                 }\n                 else if (\"date\".equals(qName))\n                 {\n                     try\n                     {\n-                        peek().addDateValue(buffer.toString());\n+                        peekNE().addDateValue(buffer.toString());\n                     }\n                     catch (IllegalArgumentException iex)\n                     {\n@@ -607,7 +625,7 @@ else if (\"date\".equals(qName))\n                 else if (\"array\".equals(qName))\n                 {\n                     ArrayNodeBuilder array = (ArrayNodeBuilder) pop();\n-                    peek().addList(array);\n+                    peekNE().addList(array);\n                 }\n \n                 // remove the plist node on the stack once the value has been parsed,",
                "raw_url": "https://github.com/apache/commons-configuration/raw/3af8e6e23b211cd7d564b4d32cd214987131183d/src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java",
                "sha": "4951804b8c0ca9343af354db9b2c9534d300cc6e",
                "status": "modified"
            }
        ],
        "message": "Fixed IntelliJ warnings related to potential NPEs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@1674555 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-configuration/commit/997f50595fd7b2df1730c7d4f9a0332ae9aad9f6",
        "repo": "commons-configuration",
        "unit_tests": [
            "TestXMLPropertyListConfiguration.java"
        ]
    },
    "commons-configuration_4930140": {
        "bug_id": "commons-configuration_4930140",
        "commit": "https://github.com/apache/commons-configuration/commit/4930140ec6fdceb7e15d31afa45243dee7d1e217",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/commons-configuration/blob/4930140ec6fdceb7e15d31afa45243dee7d1e217/src/main/java/org/apache/commons/configuration2/INIConfiguration.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/main/java/org/apache/commons/configuration2/INIConfiguration.java?ref=4930140ec6fdceb7e15d31afa45243dee7d1e217",
                "deletions": 1,
                "filename": "src/main/java/org/apache/commons/configuration2/INIConfiguration.java",
                "patch": "@@ -212,6 +212,10 @@\n  * <a href=\"http://commons.apache.org/proper/commons-configuration/userguide/howto_basicfeatures.html\">\n  * Basic features and AbstractConfiguration</a> of the user's guide.\n  * </p>\n+ * <p>\n+ * Note that this configuration does not support properties with null values.\n+ * Such properties are considered to be section nodes.\n+ * </p>\n  *\n  * @author <a\n  *         href=\"http://commons.apache.org/configuration/team-list.html\">Commons\n@@ -942,7 +946,7 @@ private SubnodeConfiguration getGlobalSection()\n      */\n     private static boolean isSectionNode(ImmutableNode node)\n     {\n-        return !node.getChildren().isEmpty();\n+        return node.getValue() == null;\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/commons-configuration/raw/4930140ec6fdceb7e15d31afa45243dee7d1e217/src/main/java/org/apache/commons/configuration2/INIConfiguration.java",
                "sha": "c9f516ab96610c24cf9ea3e15590c98880472cb1",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/commons-configuration/blob/4930140ec6fdceb7e15d31afa45243dee7d1e217/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java?ref=4930140ec6fdceb7e15d31afa45243dee7d1e217",
                "deletions": 0,
                "filename": "src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java",
                "patch": "@@ -1223,6 +1223,27 @@ public void testExpressionEngineIgnoringCase()\n                 config.getString(\"SECTION1.VAR1\"));\n     }\n \n+    /**\n+     * Tests whether an empty section can be saved. This is related to\n+     * CONFIGURATION-671.\n+     */\n+    @Test\n+    public void testWriteEmptySection()\n+            throws ConfigurationException, IOException\n+    {\n+        final String section = \"[EmptySection]\";\n+        INIConfiguration config = setUpConfig(section);\n+        assertEquals(\"Wrong number of sections\", 1,\n+                config.getSections().size());\n+        assertTrue(\"Section not found\",\n+                config.getSections().contains(\"EmptySection\"));\n+\n+        StringWriter writer = new StringWriter();\n+        config.write(writer);\n+        assertEquals(\"Wrong saved configuration\",\n+                section + LINE_SEPARATOR + LINE_SEPARATOR, writer.toString());\n+    }\n+\n     /**\n      * A thread class for testing concurrent access to the global section.\n      */",
                "raw_url": "https://github.com/apache/commons-configuration/raw/4930140ec6fdceb7e15d31afa45243dee7d1e217/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java",
                "sha": "30b8722610f11fd041252ceeadf01259a7ca0fcb",
                "status": "modified"
            }
        ],
        "message": "[CONFIGURATION-671] Fixed handling of empty sections in INIConfiguration.\n\nSaving of an INIConfiguration with an empty section caused a NPE. The\ncause was that nodes without children were not detected as section\nnodes. Now a different criterion is used.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@1806819 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-configuration/commit/e9dcc716af5014485846d28e174164c2a3720c15",
        "repo": "commons-configuration",
        "unit_tests": [
            "TestINIConfiguration.java"
        ]
    },
    "commons-configuration_4975496": {
        "bug_id": "commons-configuration_4975496",
        "commit": "https://github.com/apache/commons-configuration/commit/4975496a3ec2c152fb48a7b681000447c784d336",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/commons-configuration/blob/4975496a3ec2c152fb48a7b681000447c784d336/src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java?ref=4975496a3ec2c152fb48a7b681000447c784d336",
                "deletions": 0,
                "filename": "src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java",
                "patch": "@@ -574,6 +574,7 @@ else if (\"dict\".equals(qName))\n             {\n                 // remove the root of the XMLPropertyListConfiguration previously pushed on the stack\n                 PListNodeBuilder builder = pop();\n+                assert builder != null : \"Stack was empty!\";\n                 if (peek() instanceof ArrayNodeBuilder)\n                 {\n                     // create the configuration",
                "raw_url": "https://github.com/apache/commons-configuration/raw/4975496a3ec2c152fb48a7b681000447c784d336/src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java",
                "sha": "0a3a3dd8d6343ef98885953f8486631a1c3e9bc8",
                "status": "modified"
            }
        ],
        "message": "Fixed another IntelliJ warning related to a potential NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@1674558 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-configuration/commit/55f62e3f0a761ba60300f70285d10b038092c36f",
        "repo": "commons-configuration",
        "unit_tests": [
            "TestXMLPropertyListConfiguration.java"
        ]
    },
    "commons-configuration_514cdf8": {
        "bug_id": "commons-configuration_514cdf8",
        "commit": "https://github.com/apache/commons-configuration/commit/514cdf8f1ae0ebff29e600e4888928bb28b18345",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/commons-configuration/blob/514cdf8f1ae0ebff29e600e4888928bb28b18345/src/main/java/org/apache/commons/configuration/builder/DefaultReloadingDetectorFactory.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/main/java/org/apache/commons/configuration/builder/DefaultReloadingDetectorFactory.java?ref=514cdf8f1ae0ebff29e600e4888928bb28b18345",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/configuration/builder/DefaultReloadingDetectorFactory.java",
                "patch": "@@ -40,7 +40,9 @@ public ReloadingDetector createReloadingDetector(FileHandler handler,\n             FileBasedBuilderParametersImpl params)\n             throws ConfigurationException\n     {\n-        return new FileHandlerReloadingDetector(handler,\n-                params.getReloadingRefreshDelay());\n+        Long refreshDelay = params.getReloadingRefreshDelay();\n+        return (refreshDelay != null) ? new FileHandlerReloadingDetector(\n+                handler, refreshDelay) : new FileHandlerReloadingDetector(\n+                handler);\n     }\n }",
                "raw_url": "https://github.com/apache/commons-configuration/raw/514cdf8f1ae0ebff29e600e4888928bb28b18345/src/main/java/org/apache/commons/configuration/builder/DefaultReloadingDetectorFactory.java",
                "sha": "1b2a35fbcc061c031168b4c9f91ad52a0ec07622",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/commons-configuration/blob/514cdf8f1ae0ebff29e600e4888928bb28b18345/src/test/java/org/apache/commons/configuration/builder/TestDefaultReloadingDetectorFactory.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/test/java/org/apache/commons/configuration/builder/TestDefaultReloadingDetectorFactory.java?ref=514cdf8f1ae0ebff29e600e4888928bb28b18345",
                "deletions": 2,
                "filename": "src/test/java/org/apache/commons/configuration/builder/TestDefaultReloadingDetectorFactory.java",
                "patch": "@@ -18,6 +18,7 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n \n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.commons.configuration.io.FileHandler;\n@@ -50,13 +51,29 @@ public void testCreateReloadingDetector() throws ConfigurationException\n         FileHandler handler = new FileHandler();\n         FileBasedBuilderParametersImpl params =\n                 new FileBasedBuilderParametersImpl();\n-        final long refreshDelay = 10000L;\n+        final Long refreshDelay = 10000L;\n         params.setReloadingRefreshDelay(refreshDelay);\n         FileHandlerReloadingDetector detector =\n                 (FileHandlerReloadingDetector) factory.createReloadingDetector(\n                         handler, params);\n         assertSame(\"Wrong file handler\", handler, detector.getFileHandler());\n-        assertEquals(\"Wrong refresh delay\", refreshDelay,\n+        assertEquals(\"Wrong refresh delay\", refreshDelay.longValue(),\n                 detector.getRefreshDelay());\n     }\n+\n+    /**\n+     * Tests whether an undefined refresh delay is handled correctly.\n+     */\n+    @Test\n+    public void testCreateReloadingDetectorDefaultRefreshDelay()\n+            throws ConfigurationException\n+    {\n+        FileHandler handler = new FileHandler();\n+        FileBasedBuilderParametersImpl params =\n+                new FileBasedBuilderParametersImpl();\n+        FileHandlerReloadingDetector detector =\n+                (FileHandlerReloadingDetector) factory.createReloadingDetector(\n+                        handler, params);\n+        assertTrue(\"No default refresh delay\", detector.getRefreshDelay() != 0);\n+    }\n }",
                "raw_url": "https://github.com/apache/commons-configuration/raw/514cdf8f1ae0ebff29e600e4888928bb28b18345/src/test/java/org/apache/commons/configuration/builder/TestDefaultReloadingDetectorFactory.java",
                "sha": "ec9ce39e3b16b24a8f813443c9252a170ebad96e",
                "status": "modified"
            }
        ],
        "message": "Fixed a potential NPE in DefaultReloadingDetectorFactory.\n\nThe refreshDelay property of the parameters object can now be null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@1463687 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-configuration/commit/369a9ebc8de0d3324485c95576d8c984078109e0",
        "repo": "commons-configuration",
        "unit_tests": [
            "TestDefaultReloadingDetectorFactory.java"
        ]
    },
    "commons-configuration_97e542e": {
        "bug_id": "commons-configuration_97e542e",
        "commit": "https://github.com/apache/commons-configuration/commit/97e542e3afed5e1045b64c983ebb428448e78d44",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/commons-configuration/blob/97e542e3afed5e1045b64c983ebb428448e78d44/src/java/org/apache/commons/configuration/ConfigurationUtils.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/java/org/apache/commons/configuration/ConfigurationUtils.java?ref=97e542e3afed5e1045b64c983ebb428448e78d44",
                "deletions": 0,
                "filename": "src/java/org/apache/commons/configuration/ConfigurationUtils.java",
                "patch": "@@ -258,6 +258,12 @@ public static URL locate(String name)\n      */\n     public static URL locate(String base, String name)\n     {\n+        if (name == null)\n+        {\n+            // undefined, always return null\n+            return null;\n+        }\n+        \n         URL url = null;\n \n         // attempt to create an URL directly",
                "raw_url": "https://github.com/apache/commons-configuration/raw/97e542e3afed5e1045b64c983ebb428448e78d44/src/java/org/apache/commons/configuration/ConfigurationUtils.java",
                "sha": "9e45fdd3295813ab6da07c2cc185027bb0f65ae7",
                "status": "modified"
            }
        ],
        "message": "Fixed a NPE in locate()\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/configuration/trunk@234094 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-configuration/commit/36bc1584500da7fb876211d26cfb4f2c0420f88c",
        "repo": "commons-configuration",
        "unit_tests": [
            "TestConfigurationUtils.java"
        ]
    },
    "commons-configuration_cfd2560": {
        "bug_id": "commons-configuration_cfd2560",
        "commit": "https://github.com/apache/commons-configuration/commit/cfd2560843033325d5ed7001f363e93fd5294000",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/commons-configuration/blob/cfd2560843033325d5ed7001f363e93fd5294000/src/java/org/apache/commons/configuration/XMLConfiguration.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/java/org/apache/commons/configuration/XMLConfiguration.java?ref=cfd2560843033325d5ed7001f363e93fd5294000",
                "deletions": 2,
                "filename": "src/java/org/apache/commons/configuration/XMLConfiguration.java",
                "patch": "@@ -200,6 +200,7 @@ public XMLConfiguration(HierarchicalConfiguration c)\n     {\n         super(c);\n         clearReferences(getRootNode());\n+        setRootElementName(getRootNode().getName());\n     }\n \n     /**\n@@ -1266,8 +1267,10 @@ static void updateAttribute(Node node, String name, char listDelimiter)\n          */\n         private Element getElement(Node node)\n         {\n-            // special treatement for root node of the hierarchy\n-            return (node.getName() != null) ? (Element) node.getReference() : document.getDocumentElement();\n+            // special treatment for root node of the hierarchy\n+            return (node.getName() != null && node.getReference() != null) ? (Element) node\n+                    .getReference()\n+                    : document.getDocumentElement();\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/commons-configuration/raw/cfd2560843033325d5ed7001f363e93fd5294000/src/java/org/apache/commons/configuration/XMLConfiguration.java",
                "sha": "041fb2f7e9386b2d55ba6a104c37cb2c7a69031a",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/commons-configuration/blob/cfd2560843033325d5ed7001f363e93fd5294000/src/test/org/apache/commons/configuration/TestXMLConfiguration.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/test/org/apache/commons/configuration/TestXMLConfiguration.java?ref=cfd2560843033325d5ed7001f363e93fd5294000",
                "deletions": 0,
                "filename": "src/test/org/apache/commons/configuration/TestXMLConfiguration.java",
                "patch": "@@ -1278,6 +1278,23 @@ public void testRegisterEntityIdNull() throws IOException\n         }\n     }\n \n+    /**\n+     * Tests saving a configuration that was created from a hierarchical\n+     * configuration. This test exposes bug CONFIGURATION-301.\n+     */\n+    public void testSaveAfterCreateWithCopyConstructor()\n+            throws ConfigurationException\n+    {\n+        HierarchicalConfiguration hc = conf.configurationAt(\"element2\");\n+        conf = new XMLConfiguration(hc);\n+        conf.save(testSaveConf);\n+        XMLConfiguration checkConfig = new XMLConfiguration();\n+        checkConfig.setFile(testSaveConf);\n+        checkSavedConfig(checkConfig);\n+        assertEquals(\"Wrong name of root element\", \"element2\", checkConfig\n+                .getRootElementName());\n+    }\n+\n     /**\n      * Prepares a configuration object for testing a reload operation.\n      *",
                "raw_url": "https://github.com/apache/commons-configuration/raw/cfd2560843033325d5ed7001f363e93fd5294000/src/test/org/apache/commons/configuration/TestXMLConfiguration.java",
                "sha": "ac379d31c7d6b7c2dcce37c83384b2e5f2401606",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/commons-configuration/blob/cfd2560843033325d5ed7001f363e93fd5294000/xdocs/changes.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/xdocs/changes.xml?ref=cfd2560843033325d5ed7001f363e93fd5294000",
                "deletions": 0,
                "filename": "xdocs/changes.xml",
                "patch": "@@ -23,6 +23,11 @@\n \n   <body>\n     <release version=\"1.6\" date=\"in SVN\" description=\"\">\n+      <action dev=\"oheger\" type=\"fix\" issue=\"CONFIGURATION-301\">\n+        Fixed a NullPointerException that could be thrown under certain\n+        circumstances when saving an XMLConfiguration that was created using\n+        the constructor that takes a HierarchicalConfiguration.\n+      </action>\n     </release>\n \n     <release version=\"1.5\" date=\"2007-11-24\" description=\"Many smaller bugfixes\">",
                "raw_url": "https://github.com/apache/commons-configuration/raw/cfd2560843033325d5ed7001f363e93fd5294000/xdocs/changes.xml",
                "sha": "a4616673ec529ae41c6acadd2ab846abdbeca978",
                "status": "modified"
            }
        ],
        "message": "CONFIGURATION-301: Fix for NPE when saving an XMLConfiguration constructed from a HierarchicalConfiguration\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@603841 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-configuration/commit/7a5182133f90f7d5d9981c5f0be59c315e0828ec",
        "repo": "commons-configuration",
        "unit_tests": [
            "TestXMLConfiguration.java"
        ]
    },
    "commons-configuration_ef6627d": {
        "bug_id": "commons-configuration_ef6627d",
        "commit": "https://github.com/apache/commons-configuration/commit/ef6627d9de7f2d926ee211110bbe46fcad163010",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/commons-configuration/blob/ef6627d9de7f2d926ee211110bbe46fcad163010/src/java/org/apache/commons/configuration/XMLConfiguration.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/java/org/apache/commons/configuration/XMLConfiguration.java?ref=ef6627d9de7f2d926ee211110bbe46fcad163010",
                "deletions": 15,
                "filename": "src/java/org/apache/commons/configuration/XMLConfiguration.java",
                "patch": "@@ -50,7 +50,7 @@\n  * @author J\ufffdrg Schaible\n  * @author <a href=\"mailto:kelvint@apache.org\">Kelvin Tan</a>\n  * @author <a href=\"mailto:dlr@apache.org\">Daniel Rall</a>\n- * @version $Revision: 1.4 $, $Date: 2004/07/12 12:14:38 $\n+ * @version $Revision: 1.5 $, $Date: 2004/07/12 14:40:54 $\n  */\n public class XMLConfiguration extends BasePathConfiguration\n {\n@@ -81,11 +81,20 @@\n \n     /**\n      * Empty construtor.  You must provide a file/fileName\n-     * and call the load method\n-     *\n+     * to save the configuration.\n      */\n     public XMLConfiguration()\n     {\n+        // build an empty document.\n+        DocumentBuilder builder = null;\n+        try {\n+            builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+        } catch (ParserConfigurationException e) {\n+            throw new ConfigurationRuntimeException(e.getMessage(), e);\n+        }\n+\n+        document = builder.newDocument();\n+        document.appendChild(document.createElement(\"configuration\"));\n     }\n \n     /**\n@@ -126,19 +135,19 @@ public void load() throws ConfigurationException\n         }\n         catch (IOException de)\n         {\n-            throw new ConfigurationException(\"Could not load from \" + file.getAbsolutePath());\n+            throw new ConfigurationException(\"Could not load from \" + file.getAbsolutePath(), de);\n         }\n         catch (ParserConfigurationException ex)\n         {\n-            throw new ConfigurationException(\"Could not configure parser\");\n+            throw new ConfigurationException(\"Could not configure parser\", ex);\n \t\t}\n         catch (FactoryConfigurationError ex)\n         {\n-            throw new ConfigurationException(\"Could not create parser\");\n+            throw new ConfigurationException(\"Could not create parser\", ex);\n         }\n         catch (SAXException ex)\n         {\n-            throw new ConfigurationException(\"Error parsing file \" + file.getAbsolutePath());\n+            throw new ConfigurationException(\"Error parsing file \" + file.getAbsolutePath(), ex);\n \t\t}\n \n         initProperties(document.getDocumentElement(), new StringBuffer());\n@@ -204,13 +213,9 @@ private void processAttributes(String hierarchy, Element element)\n         NamedNodeMap attributes = element.getAttributes();\n         for (int i = 0; i < attributes.getLength(); ++i)\n         {\n-            Node node = attributes.item(i);\n-            if (node instanceof Attr)\n-            {\n-                Attr attr = (Attr) node;\n-                String attrName = hierarchy + '[' + ATTRIB_MARKER + attr.getName() + ']';\n-                super.addProperty(attrName, attr.getValue());\n-            }\n+            Attr attr = (Attr) attributes.item(i);\n+            String attrName = hierarchy + '[' + ATTRIB_MARKER + attr.getName() + ']';\n+            super.addProperty(attrName, attr.getValue());\n         }\n     }\n \n@@ -441,7 +446,7 @@ public void setFileName(String fileName)\n \n     /**\n      * Returns the fileName.\n-     * \n+     *\n      * @return String\n      */\n     public String getFileName()",
                "raw_url": "https://github.com/apache/commons-configuration/raw/ef6627d9de7f2d926ee211110bbe46fcad163010/src/java/org/apache/commons/configuration/XMLConfiguration.java",
                "sha": "0843f410c37a0d43033dd3990bd1417e202e2663",
                "status": "modified"
            }
        ],
        "message": "Fixed bug 29722 (addProperty throws a NPE in DOMConfiguration)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/configuration/trunk@141888 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-configuration/commit/d2f445fe15b4bcee24802885f3e09113dba43e62",
        "repo": "commons-configuration",
        "unit_tests": [
            "TestXMLConfiguration.java"
        ]
    },
    "commons-configuration_fc7db34": {
        "bug_id": "commons-configuration_fc7db34",
        "commit": "https://github.com/apache/commons-configuration/commit/fc7db34c11272bceda6fee8a28607d31ee1f0782",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-configuration/blob/fc7db34c11272bceda6fee8a28607d31ee1f0782/src/java/org/apache/commons/configuration/XMLConfiguration.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/commons-configuration/contents/src/java/org/apache/commons/configuration/XMLConfiguration.java?ref=fc7db34c11272bceda6fee8a28607d31ee1f0782",
                "deletions": 2,
                "filename": "src/java/org/apache/commons/configuration/XMLConfiguration.java",
                "patch": "@@ -68,7 +68,7 @@\n  * @author <a href=\"mailto:kelvint@apache.org\">Kelvin Tan </a>\n  * @author <a href=\"mailto:dlr@apache.org\">Daniel Rall </a>\n  * @author Emmanuel Bourg\n- * @version $Revision: 1.11 $, $Date: 2004/09/03 16:36:20 $\n+ * @version $Revision: 1.12 $, $Date: 2004/09/06 11:40:34 $\n  */\n public class XMLConfiguration extends BasePathConfiguration {\n     // For conformance with xpath\n@@ -166,6 +166,11 @@ private static File resourceURLToFile(String resource) {\n         if (confURL == null) {\n             confURL = ClassLoader.getSystemResource(resource);\n         }\n+        if (confURL == null) {\n+            throw new IllegalArgumentException(\"Resource: \"\n+                    + resource + \" not found through context or \"\n+                    + \"system classloaders.\");\n+        }\n         return new File(confURL.getFile());\n     }\n \n@@ -696,4 +701,4 @@ protected static String parseAttributeName(String key) {\n \n         return name;\n     }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/commons-configuration/raw/fc7db34c11272bceda6fee8a28607d31ee1f0782/src/java/org/apache/commons/configuration/XMLConfiguration.java",
                "sha": "780131acac6e148f893ce6c22b3278aaaf39d9cb",
                "status": "modified"
            }
        ],
        "message": "Handle NPE when missing resource. Patch from Bean Hutchison\n<Ben.Hutchison@sensis.com.au>.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/configuration/trunk@141935 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-configuration/commit/b9987345e00d42463328a978bf839e2e780e2829",
        "repo": "commons-configuration",
        "unit_tests": [
            "TestXMLConfiguration.java"
        ]
    }
}