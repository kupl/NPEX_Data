[{"commit": "https://github.com/apache/calcite/commit/0e16fe375f797e498c0039fc7cffecfd0dc9bc3d", "parent": "https://github.com/apache/calcite/commit/abe7729fb1d6e9b9cfbe4cf498806f67991b618e", "message": "[CALCITE-3536] NPE when executing plan with Coalesce due to wrong NullAs strategy (Jin Xing)\n\nClose apache/calcite#1605", "bug_id": "calcite_1", "file": [{"additions": 2, "raw_url": "https://github.com/apache/calcite/raw/0e16fe375f797e498c0039fc7cffecfd0dc9bc3d/core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java", "blob_url": "https://github.com/apache/calcite/blob/0e16fe375f797e498c0039fc7cffecfd0dc9bc3d/core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java", "sha": "d8e74af0e5516ce0f16a112deac051a4a6bf3fba", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java?ref=0e16fe375f797e498c0039fc7cffecfd0dc9bc3d", "patch": "@@ -2612,10 +2612,10 @@ public Expression implement(RexToLixTranslator translator, RexCall call,\n     private Expression implementRecurse(RexToLixTranslator translator,\n         List<RexNode> operands, NullAs nullAs) {\n       if (operands.size() == 1) {\n-        return translator.translate(operands.get(0));\n+        return translator.translate(operands.get(0), nullAs);\n       } else {\n         return Expressions.condition(\n-            translator.translate(operands.get(0), NullAs.IS_NULL),\n+            translator.translate(operands.get(0), NullAs.IS_NOT_NULL),\n             translator.translate(operands.get(0), nullAs),\n             implementRecurse(translator, Util.skip(operands), nullAs));\n       }", "filename": "core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java"}, {"additions": 60, "raw_url": "https://github.com/apache/calcite/raw/0e16fe375f797e498c0039fc7cffecfd0dc9bc3d/core/src/test/java/org/apache/calcite/test/enumerable/EnumerableCalcTest.java", "blob_url": "https://github.com/apache/calcite/blob/0e16fe375f797e498c0039fc7cffecfd0dc9bc3d/core/src/test/java/org/apache/calcite/test/enumerable/EnumerableCalcTest.java", "sha": "1318f10c2b0377a1453e078d44dde5511e23b0f6", "changes": 60, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/java/org/apache/calcite/test/enumerable/EnumerableCalcTest.java?ref=0e16fe375f797e498c0039fc7cffecfd0dc9bc3d", "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.test.enumerable;\n+\n+import org.apache.calcite.adapter.java.ReflectiveSchema;\n+import org.apache.calcite.sql.fun.SqlStdOperatorTable;\n+import org.apache.calcite.test.CalciteAssert;\n+import org.apache.calcite.test.JdbcTest;\n+\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Unit test for\n+ * {@link org.apache.calcite.adapter.enumerable.EnumerableCalc}\n+ */\n+public class EnumerableCalcTest {\n+\n+  /**\n+   * Test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-3536\">[CALCITE-3536]\n+   * NPE when executing plan with Coalesce due to wrong NullAs strategy</a>.\n+   */\n+  @Test public void testCoalesceImplementation() {\n+    CalciteAssert.that()\n+        .withSchema(\"s\", new ReflectiveSchema(new JdbcTest.HrSchema()))\n+        .query(\"?\")\n+        .withRel(\n+            builder -> builder\n+                .scan(\"s\", \"emps\")\n+                .project(\n+                  builder.call(\n+                    SqlStdOperatorTable.COALESCE,\n+                    builder.field(\"commission\"),\n+                    builder.literal(0)))\n+                .build()\n+        )\n+        .planContains(\"inp4_ != null ? inp4_.intValue() : 0;\")\n+        .returnsUnordered(\n+            \"$f0=0\",\n+            \"$f0=250\",\n+            \"$f0=500\",\n+            \"$f0=1000\");\n+  }\n+}\n+\n+// End EnumerableCalcTest.java", "filename": "core/src/test/java/org/apache/calcite/test/enumerable/EnumerableCalcTest.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/73417080f317fb925cf3978d40af6ba97129e3c8", "parent": "https://github.com/apache/calcite/commit/472523c4e0eb694f62c1da974d256553e2f33ce2", "message": "[CALCITE-3503] NPE at VolcanoPlanner#isValid when DEBUG is enabled (Xiening Dai)\n\nWhen planner root is null, we should skip the validation since the memo is\nempty at that moment.", "bug_id": "calcite_2", "file": [{"additions": 4, "raw_url": "https://github.com/apache/calcite/raw/73417080f317fb925cf3978d40af6ba97129e3c8/core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java", "blob_url": "https://github.com/apache/calcite/blob/73417080f317fb925cf3978d40af6ba97129e3c8/core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java", "sha": "c592290b5c5478814c8248895dd030d9d90eae6a", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java?ref=73417080f317fb925cf3978d40af6ba97129e3c8", "patch": "@@ -877,6 +877,10 @@ public RelSubset ensureRegistered(RelNode rel, RelNode equivRel) {\n    * Checks internal consistency.\n    */\n   protected boolean isValid(Litmus litmus) {\n+    if (this.getRoot() == null) {\n+      return true;\n+    }\n+\n     RelMetadataQuery metaQuery = this.getRoot().getCluster().getMetadataQuerySupplier().get();\n     for (RelSet set : allSets) {\n       if (set.equivalentSet != null) {", "filename": "core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/d8768f9c07fa3927475902e27c13c8bc39687897", "parent": "https://github.com/apache/calcite/commit/037250b99d6db8a605b64780a3643f784d07d308", "message": "[CALCITE-3082] Fix NPE in SqlUtil#getSelectListItem\n\nQueries similar to `SELECT 1 UNION SELECT 2, 3` might cause Calcite\nvalidator to throw an NPE exception instead of a proper error message.\n\nWhen validating operands of a set operation, if operands don't have\nmatching schema, and if one of the operand doesn't have a FROM clause,\nSqlUtil#getSelectListItem throws NPE.\n\nFixing by adding a proper check.", "bug_id": "calcite_3", "file": [{"additions": 1, "raw_url": "https://github.com/apache/calcite/raw/d8768f9c07fa3927475902e27c13c8bc39687897/core/src/main/java/org/apache/calcite/sql/SqlUtil.java", "blob_url": "https://github.com/apache/calcite/blob/d8768f9c07fa3927475902e27c13c8bc39687897/core/src/main/java/org/apache/calcite/sql/SqlUtil.java", "sha": "469f83d2dd3bf089c7837c4c0479fae53729d2f9", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/sql/SqlUtil.java?ref=d8768f9c07fa3927475902e27c13c8bc39687897", "patch": "@@ -692,7 +692,7 @@ public static SqlNode getSelectListItem(SqlNode query, int i) {\n     case SELECT:\n       SqlSelect select = (SqlSelect) query;\n       final SqlNode from = stripAs(select.getFrom());\n-      if (from.getKind() == SqlKind.VALUES) {\n+      if (from != null && from.getKind() == SqlKind.VALUES) {\n         // They wrote \"VALUES (x, y)\", but the validator has\n         // converted this into \"SELECT * FROM VALUES (x, y)\".\n         return getSelectListItem(from, i);", "filename": "core/src/main/java/org/apache/calcite/sql/SqlUtil.java"}, {"additions": 5, "raw_url": "https://github.com/apache/calcite/raw/d8768f9c07fa3927475902e27c13c8bc39687897/core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java", "blob_url": "https://github.com/apache/calcite/blob/d8768f9c07fa3927475902e27c13c8bc39687897/core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java", "sha": "c5e4b61c5263386bc6870ceb8fb5e7930c5f804a", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java?ref=d8768f9c07fa3927475902e27c13c8bc39687897", "patch": "@@ -5626,6 +5626,11 @@ public void testInvalidGroupByWithInvalidTableName() {\n         \"select 1 from (values (^'x'^)) union\\n\"\n             + \"(values ('a'))\",\n         \"Type mismatch in column 1 of UNION\");\n+\n+    checkFails(\n+        \"select 1, ^2^, 3 union\\n \"\n+            + \"select deptno, name, deptno from dept\",\n+        \"Type mismatch in column 2 of UNION\");\n   }\n \n   @Test public void testValuesTypeMismatchFails() {", "filename": "core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/883e19170a45e0badffa5b8fba04cd536e0f2eb2", "parent": "https://github.com/apache/calcite/commit/67fd318ed755ef975cf31262c96c982f0922a975", "message": "[CALCITE-3360] SqlValidator throws NPE for unregistered function without implicit type coercion\n\nSqlValidator should report the function signature for unregistered UDFs\nwhen implicit type coercion is turned off.\n\nWe also change SqlTypeNameSpec constructor to public so that any other\nengine can extend it and implement their custom data type.(Because it is\ntoo small change, i just merge it into this one)", "bug_id": "calcite_4", "file": [{"additions": 13, "raw_url": "https://github.com/apache/calcite/raw/883e19170a45e0badffa5b8fba04cd536e0f2eb2/core/src/main/java/org/apache/calcite/sql/SqlFunction.java", "blob_url": "https://github.com/apache/calcite/blob/883e19170a45e0badffa5b8fba04cd536e0f2eb2/core/src/main/java/org/apache/calcite/sql/SqlFunction.java", "sha": "b830a0885aa82346cfba0f5a1d5671b805a28270", "changes": 24, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/sql/SqlFunction.java?ref=883e19170a45e0badffa5b8fba04cd536e0f2eb2", "patch": "@@ -271,18 +271,20 @@ private RelDataType deriveType(\n         return validator.deriveConstructorType(scope, call, this, function,\n             argTypes);\n       }\n-      if (function == null && validator.isTypeCoercionEnabled()) {\n-        // try again if implicit type coercion is allowed.\n+      if (function == null) {\n         boolean changed = false;\n-        function = (SqlFunction) SqlUtil.lookupRoutine(validator.getOperatorTable(),\n-            getNameAsId(), argTypes, argNames, getFunctionType(), SqlSyntax.FUNCTION, getKind(),\n-            validator.getCatalogReader().nameMatcher(),\n-            true);\n-        // try to coerce the function arguments to the declared sql type name.\n-        // if we succeed, the arguments would be wrapped with CAST operator.\n-        if (function != null) {\n-          TypeCoercion typeCoercion = validator.getTypeCoercion();\n-          changed = typeCoercion.userDefinedFunctionCoercion(scope, call, function);\n+        if (validator.isTypeCoercionEnabled()) {\n+          // try again if implicit type coercion is allowed.\n+          function = (SqlFunction) SqlUtil.lookupRoutine(validator.getOperatorTable(),\n+              getNameAsId(), argTypes, argNames, getFunctionType(), SqlSyntax.FUNCTION, getKind(),\n+              validator.getCatalogReader().nameMatcher(),\n+              true);\n+          // try to coerce the function arguments to the declared sql type name.\n+          // if we succeed, the arguments would be wrapped with CAST operator.\n+          if (function != null) {\n+            TypeCoercion typeCoercion = validator.getTypeCoercion();\n+            changed = typeCoercion.userDefinedFunctionCoercion(scope, call, function);\n+          }\n         }\n         if (!changed) {\n           throw validator.handleUnresolvedFunction(call, this, argTypes,", "filename": "core/src/main/java/org/apache/calcite/sql/SqlFunction.java"}, {"additions": 1, "raw_url": "https://github.com/apache/calcite/raw/883e19170a45e0badffa5b8fba04cd536e0f2eb2/core/src/main/java/org/apache/calcite/sql/SqlTypeNameSpec.java", "blob_url": "https://github.com/apache/calcite/blob/883e19170a45e0badffa5b8fba04cd536e0f2eb2/core/src/main/java/org/apache/calcite/sql/SqlTypeNameSpec.java", "sha": "a0be99ae6a046d2f7732e900844ce24cae4191fa", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/sql/SqlTypeNameSpec.java?ref=883e19170a45e0badffa5b8fba04cd536e0f2eb2", "patch": "@@ -40,7 +40,7 @@\n    * @param name Name of the type.\n    * @param pos  Parser position, must not be null.\n    */\n-  SqlTypeNameSpec(SqlIdentifier name, SqlParserPos pos) {\n+  public SqlTypeNameSpec(SqlIdentifier name, SqlParserPos pos) {\n     this.typeName = name;\n     this.pos = pos;\n   }", "filename": "core/src/main/java/org/apache/calcite/sql/SqlTypeNameSpec.java"}, {"additions": 42, "raw_url": "https://github.com/apache/calcite/raw/883e19170a45e0badffa5b8fba04cd536e0f2eb2/core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java", "blob_url": "https://github.com/apache/calcite/blob/883e19170a45e0badffa5b8fba04cd536e0f2eb2/core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java", "sha": "77679a1742f85aa357bba40a90a558e7d364664f", "changes": 42, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java?ref=883e19170a45e0badffa5b8fba04cd536e0f2eb2", "patch": "@@ -11513,6 +11513,48 @@ private void checkCustomColumnResolving(String table) {\n         \"VARCHAR NOT NULL\");\n   }\n \n+  @Test public void testInvalidFunctionCall() {\n+    final SqlTester tester1 = tester\n+        .withCaseSensitive(true);\n+    final MockSqlOperatorTable operatorTable =\n+        new MockSqlOperatorTable(SqlStdOperatorTable.instance());\n+    MockSqlOperatorTable.addRamp(operatorTable);\n+    tester1.withOperatorTable(operatorTable);\n+    // With implicit type coercion.\n+    checkExpFails(\"^unknown_udf(1, 2)^\",\n+        \"(?s).*No match found for function signature \"\n+            + \"UNKNOWN_UDF\\\\(<NUMERIC>, <NUMERIC>\\\\).*\");\n+    checkExpFails(\"^power(cast(1 as timestamp), cast(2 as timestamp))^\",\n+        \"(?s).*Cannot apply 'POWER' to arguments of type \"\n+            + \"'POWER\\\\(<TIMESTAMP\\\\(0\\\\)>, <TIMESTAMP\\\\(0\\\\)>\\\\)'.*\");\n+    tester1.checkFails(\"^myFUN(cast('124' as timestamp))^\",\n+            \"(?s).*Cannot apply 'MYFUN' to arguments of type \"\n+                + \"'MYFUN\\\\(<TIMESTAMP\\\\(0\\\\)>\\\\)'.*\",\n+            false);\n+    tester1.checkFails(\"^myFUN(1, 2)^\",\n+        \"(?s).*No match found for function signature \"\n+            + \"MYFUN\\\\(<NUMERIC>, <NUMERIC>\\\\).*\",\n+        false);\n+    // Without implicit type coercion.\n+    checkExpFails(\"^unknown_udf(1, 2)^\",\n+        \"(?s).*No match found for function signature \"\n+            + \"UNKNOWN_UDF\\\\(<NUMERIC>, <NUMERIC>\\\\).*\",\n+        false);\n+    checkExpFails(\"^power(cast(1 as timestamp), cast(2 as timestamp))^\",\n+        \"(?s).*Cannot apply 'POWER' to arguments of type \"\n+            + \"'POWER\\\\(<TIMESTAMP\\\\(0\\\\)>, <TIMESTAMP\\\\(0\\\\)>\\\\)'.*\", false);\n+    tester1.enableTypeCoercion(false)\n+        .checkFails(\"^myFUN(cast('124' as timestamp))^\",\n+            \"(?s).*Cannot apply 'MYFUN' to arguments of type \"\n+                + \"'MYFUN\\\\(<TIMESTAMP\\\\(0\\\\)>\\\\)'.*\",\n+            false);\n+    tester1.enableTypeCoercion(false)\n+        .checkFails(\"^myFUN(1, 2)^\",\n+        \"(?s).*No match found for function signature \"\n+            + \"MYFUN\\\\(<NUMERIC>, <NUMERIC>\\\\).*\",\n+        false);\n+  }\n+\n   @Test public void testValidatorReportsOriginalQueryUsingReader()\n       throws Exception {\n     final String sql = \"select a from b\";", "filename": "core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/f2869e9ad3864caa4d1678fbefc50389b981f2e6", "parent": "https://github.com/apache/calcite/commit/3ed76375fd05b29db17d6117aa0487ccb85f45ba", "message": "[CALCITE-2739] NPE is thrown if the DEFINE statement contains IN in MATCH_RECOGNIZE\n\nClose #970", "bug_id": "calcite_5", "file": [{"additions": 1, "raw_url": "https://github.com/apache/calcite/raw/f2869e9ad3864caa4d1678fbefc50389b981f2e6/core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java", "blob_url": "https://github.com/apache/calcite/blob/f2869e9ad3864caa4d1678fbefc50389b981f2e6/core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java", "sha": "6d24bf3ce9873e055bd49750b83bc51c9141ae25", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java?ref=f2869e9ad3864caa4d1678fbefc50389b981f2e6", "patch": "@@ -2276,6 +2276,7 @@ protected void convertMatchRecognize(Blackboard bb, SqlCall call) {\n     final ImmutableMap.Builder<String, RexNode> definitionNodes =\n         ImmutableMap.builder();\n     for (SqlNode def : matchRecognize.getPatternDefList()) {\n+      replaceSubQueries(matchBb, def, RelOptUtil.Logic.UNKNOWN_AS_FALSE);\n       List<SqlNode> operands = ((SqlCall) def).getOperandList();\n       String alias = ((SqlIdentifier) operands.get(1)).getSimple();\n       RexNode rex = matchBb.convertExpression(operands.get(0));", "filename": "core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java"}, {"additions": 28, "raw_url": "https://github.com/apache/calcite/raw/f2869e9ad3864caa4d1678fbefc50389b981f2e6/core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java", "blob_url": "https://github.com/apache/calcite/blob/f2869e9ad3864caa4d1678fbefc50389b981f2e6/core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java", "sha": "b82b52cdd977164ca96979a2dd3bdf8b1cc5525f", "changes": 28, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java?ref=f2869e9ad3864caa4d1678fbefc50389b981f2e6", "patch": "@@ -2978,6 +2978,34 @@ private void checkLiteral2(String expression, String expected) {\n     sql(sql).ok(expected);\n   }\n \n+  @Test public void testMatchRecognizeIn() {\n+    final String sql = \"select *\\n\"\n+        + \"  from \\\"product\\\" match_recognize\\n\"\n+        + \"  (\\n\"\n+        + \"    partition by \\\"product_class_id\\\", \\\"brand_name\\\" \\n\"\n+        + \"    order by \\\"product_class_id\\\" asc, \\\"brand_name\\\" desc \\n\"\n+        + \"    pattern (strt down+ up+)\\n\"\n+        + \"    define\\n\"\n+        + \"      down as down.\\\"net_weight\\\" in (0, 1),\\n\"\n+        + \"      up as up.\\\"net_weight\\\" > prev(up.\\\"net_weight\\\")\\n\"\n+        + \"  ) mr\";\n+\n+    final String expected = \"SELECT *\\n\"\n+        + \"FROM (SELECT *\\n\"\n+        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n+        + \"PARTITION BY \\\"product_class_id\\\", \\\"brand_name\\\"\\n\"\n+        + \"ORDER BY \\\"product_class_id\\\", \\\"brand_name\\\" DESC\\n\"\n+        + \"ONE ROW PER MATCH\\n\"\n+        + \"AFTER MATCH SKIP TO NEXT ROW\\n\"\n+        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n+        + \"DEFINE \"\n+        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) = \"\n+        + \"0 OR PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) = 1, \"\n+        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0) > \"\n+        + \"PREV(\\\"UP\\\".\\\"net_weight\\\", 1))\";\n+    sql(sql).ok(expected);\n+  }\n+\n   @Test public void testValues() {\n     final String sql = \"select \\\"a\\\"\\n\"\n         + \"from (values (1, 'x'), (2, 'yy')) as t(\\\"a\\\", \\\"b\\\")\";", "filename": "core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java"}, {"additions": 13, "raw_url": "https://github.com/apache/calcite/raw/f2869e9ad3864caa4d1678fbefc50389b981f2e6/core/src/test/java/org/apache/calcite/test/SqlToRelConverterTest.java", "blob_url": "https://github.com/apache/calcite/blob/f2869e9ad3864caa4d1678fbefc50389b981f2e6/core/src/test/java/org/apache/calcite/test/SqlToRelConverterTest.java", "sha": "d4e2c9b36b53ce116b5964db36a6c4d215738406", "changes": 13, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/java/org/apache/calcite/test/SqlToRelConverterTest.java?ref=f2869e9ad3864caa4d1678fbefc50389b981f2e6", "patch": "@@ -2972,6 +2972,19 @@ private Tester getExtendedTester() {\n     sql(sql).ok();\n   }\n \n+  @Test public void testMatchRecognizeIn() {\n+    final String sql = \"select *\\n\"\n+        + \"  from emp match_recognize\\n\"\n+        + \"  (\\n\"\n+        + \"    partition by job, sal\\n\"\n+        + \"    order by job asc, sal desc, empno\\n\"\n+        + \"    pattern (strt down+ up+)\\n\"\n+        + \"    define\\n\"\n+        + \"      down as down.mgr in (0, 1),\\n\"\n+        + \"      up as up.mgr > prev(up.mgr)) as mr\";\n+    sql(sql).ok();\n+  }\n+\n   /** Test case for\n    * <a href=\"https://issues.apache.org/jira/browse/CALCITE-2323\">[CALCITE-2323]\n    * Validator should allow alternative nullCollations for ORDER BY in", "filename": "core/src/test/java/org/apache/calcite/test/SqlToRelConverterTest.java"}, {"additions": 20, "raw_url": "https://github.com/apache/calcite/raw/f2869e9ad3864caa4d1678fbefc50389b981f2e6/core/src/test/resources/org/apache/calcite/test/SqlToRelConverterTest.xml", "blob_url": "https://github.com/apache/calcite/blob/f2869e9ad3864caa4d1678fbefc50389b981f2e6/core/src/test/resources/org/apache/calcite/test/SqlToRelConverterTest.xml", "sha": "466a0659758f14b5d5a8e5e942a650278b07f0c0", "changes": 20, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/resources/org/apache/calcite/test/SqlToRelConverterTest.xml?ref=f2869e9ad3864caa4d1678fbefc50389b981f2e6", "patch": "@@ -3024,6 +3024,26 @@ GROUP BY (CASE WHEN emp.empno IN (3) THEN 0 ELSE 1 END)]]>\n LogicalAggregate(group=[{0}])\n   LogicalProject(EXPR$0=[CASE(=($0, 3), 0, 1)])\n     LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+]]>\n+        </Resource>\n+    </TestCase>\n+    <TestCase name=\"testMatchRecognizeIn\">\n+        <Resource name=\"sql\">\n+            <![CDATA[select *\n+  from emp match_recognize\n+  (\n+    partition by job, sal\n+    order by job asc, sal desc, empno\n+    pattern (strt down+ up+)\n+    define\n+      down as down.mgr in (0, 1),\n+      up as up.mgr > prev(up.mgr)) as mr]]>\n+        </Resource>\n+        <Resource name=\"plan\">\n+            <![CDATA[\n+LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])\n+  LogicalMatch(partition=[[$2, $5]], order=[[2, 5 DESC, 0]], outputFields=[[EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO, SLACKER]], allRows=[false], after=[FLAG(SKIP TO NEXT ROW)], pattern=[(('STRT', PATTERN_QUANTIFIER('DOWN', 1, -1, false)), PATTERN_QUANTIFIER('UP', 1, -1, false))], isStrictStarts=[false], isStrictEnds=[false], subsets=[[]], patternDefinitions=[[OR(=(PREV(DOWN.$3, 0), 0), =(PREV(DOWN.$3, 0), 1)), >(PREV(UP.$3, 0), PREV(UP.$3, 1))]], inputFields=[[EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO, SLACKER]])\n+    LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n ]]>\n         </Resource>\n     </TestCase>", "filename": "core/src/test/resources/org/apache/calcite/test/SqlToRelConverterTest.xml"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/af3e35d64a7c29dfaa451c4ab4880424a8fe8cee", "parent": "https://github.com/apache/calcite/commit/6cad2ee13e50e9444f80a744409d4e6ca483a30c", "message": "[CALCITE-2271] Join of two views with window aggregates produces incorrect results or NPE\n\nAvoid NPE in BlockBuilder.append when empty variable initializer is used\n\ncloses #673", "bug_id": "calcite_6", "file": [{"additions": 0, "raw_url": "https://github.com/apache/calcite/raw/af3e35d64a7c29dfaa451c4ab4880424a8fe8cee/core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java", "blob_url": "https://github.com/apache/calcite/blob/af3e35d64a7c29dfaa451c4ab4880424a8fe8cee/core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java", "sha": "58f26e721df70029c5c2265234d1e20982091951", "changes": 1, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java?ref=af3e35d64a7c29dfaa451c4ab4880424a8fe8cee", "patch": "@@ -72,7 +72,6 @@\n       new HashMap<>();\n   private final Map<Object, ParameterExpression> stashedParameters =\n       new IdentityHashMap<>();\n-  int windowCount = 0;\n \n   protected final Function1<String, RexToLixTranslator.InputGetter> allCorrelateVariables =\n       this::getCorrelVariableGetter;", "filename": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java"}, {"additions": 2, "raw_url": "https://github.com/apache/calcite/raw/af3e35d64a7c29dfaa451c4ab4880424a8fe8cee/core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java", "blob_url": "https://github.com/apache/calcite/blob/af3e35d64a7c29dfaa451c4ab4880424a8fe8cee/core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java", "sha": "6b55983af9d4d2bde33fddb01adfd2f51d33387d", "changes": 5, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java?ref=af3e35d64a7c29dfaa451c4ab4880424a8fe8cee", "patch": "@@ -175,11 +175,10 @@ public Result implement(EnumerableRelImplementor implementor, Prefer pref) {\n \n     PhysType inputPhysType = result.physType;\n \n-    final int w = implementor.windowCount++;\n     ParameterExpression prevStart =\n-        Expressions.parameter(int.class, builder.newName(\"prevStart\" + w));\n+        Expressions.parameter(int.class, builder.newName(\"prevStart\"));\n     ParameterExpression prevEnd =\n-        Expressions.parameter(int.class, builder.newName(\"prevEnd\" + w));\n+        Expressions.parameter(int.class, builder.newName(\"prevEnd\"));\n \n     builder.add(Expressions.declare(0, prevStart, null));\n     builder.add(Expressions.declare(0, prevEnd, null));", "filename": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java"}, {"additions": 55, "raw_url": "https://github.com/apache/calcite/raw/af3e35d64a7c29dfaa451c4ab4880424a8fe8cee/core/src/test/resources/sql/winagg.iq", "blob_url": "https://github.com/apache/calcite/blob/af3e35d64a7c29dfaa451c4ab4880424a8fe8cee/core/src/test/resources/sql/winagg.iq", "sha": "ff0aadcf5ad9bbea194fc000a4be9f137d78c127", "changes": 57, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/resources/sql/winagg.iq?ref=af3e35d64a7c29dfaa451c4ab4880424a8fe8cee", "patch": "@@ -420,16 +420,69 @@ limit 5;\n +--------+-----+-----+\n | deptno | AR  | BR  |\n +--------+-----+-----+\n+|     10 | 110 | 100 |\n |     10 | 110 | 110 |\n |     10 | 110 | 110 |\n-|     10 | 110 | 110 |\n+|     10 | 110 | 150 |\n |     20 | 200 | 200 |\n-|     20 | 200 |     |\n +--------+-----+-----+\n (5 rows)\n \n !ok\n \n+select a.\"empid\", a.\"deptno\", a.\"commission\", a.r as ar, b.r as br\n+from (\n+  select \"empid\", \"deptno\", \"commission\", first_value(\"empid\") over w as r\n+  from \"hr\".\"emps\"\n+  window w as (partition by \"deptno\" order by \"commission\")) a\n+join (\n+  select \"empid\", \"deptno\", \"commission\", last_value(\"empid\") over w as r\n+  from \"hr\".\"emps\"\n+  window w as (partition by \"deptno\" order by \"commission\")) b\n+on a.\"empid\" = b.\"empid\"\n+limit 5;\n+\n++-------+--------+------------+-----+-----+\n+| empid | deptno | commission | AR  | BR  |\n++-------+--------+------------+-----+-----+\n+|   100 |     10 |       1000 | 110 | 100 |\n+|   110 |     10 |        250 | 110 | 110 |\n+|   150 |     10 |            | 110 | 150 |\n+|   200 |     20 |        500 | 200 | 200 |\n++-------+--------+------------+-----+-----+\n+(4 rows)\n+\n+!ok\n+\n+# [CALCITE-2271] Two windows under a JOIN 2\n+select\n+ t1.l, t1.key as key1, t2.key as key2\n+from\n+ (\n+  select\n+   dense_rank() over (order by key) l,\n+   key\n+  from\n+   unnest(map[1,1,2,2]) k\n+ ) t1\n+ join\n+ (\n+  select\n+   dense_rank() over(order by key) l,\n+   key\n+  from\n+   unnest(map[2,2]) k\n+ ) t2 on (t1.l = t2.l and t1.key + 1 = t2.key);\n+\n++---+------+------+\n+| L | KEY1 | KEY2 |\n++---+------+------+\n+| 1 |    1 |    2 |\n++---+------+------+\n+(1 row)\n+\n+!ok\n+\n # NTH_VALUE\n select emp.\"ENAME\", emp.\"DEPTNO\",\n  nth_value(emp.\"DEPTNO\", 1) over() as \"first_value\",", "filename": "core/src/test/resources/sql/winagg.iq"}, {"additions": 28, "raw_url": "https://github.com/apache/calcite/raw/af3e35d64a7c29dfaa451c4ab4880424a8fe8cee/linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java", "blob_url": "https://github.com/apache/calcite/blob/af3e35d64a7c29dfaa451c4ab4880424a8fe8cee/linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java", "sha": "e59bc65d31ae1bfaab8c9963d111e33267d4b088", "changes": 37, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/calcite/contents/linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java?ref=af3e35d64a7c29dfaa451c4ab4880424a8fe8cee", "patch": "@@ -121,19 +121,30 @@ public Expression append(String name, BlockStatement block,\n       }\n       if (statement instanceof DeclarationStatement) {\n         DeclarationStatement declaration = (DeclarationStatement) statement;\n-        if (variables.contains(declaration.parameter.name)) {\n-          Expression x = append(\n-              newName(declaration.parameter.name, optimize),\n-              declaration.initializer);\n+        if (!variables.contains(declaration.parameter.name)) {\n+          add(statement);\n+        } else {\n+          String newName = newName(declaration.parameter.name, optimize);\n+          Expression x;\n+          // When initializer is null, append(name, initializer) can't deduce expression type\n+          if (declaration.initializer != null && isSafeForReuse(declaration)) {\n+            x = append(newName, declaration.initializer);\n+          } else {\n+            ParameterExpression pe = Expressions.parameter(\n+                declaration.parameter.type, newName);\n+            DeclarationStatement newDeclaration = Expressions.declare(\n+                declaration.modifiers, pe, declaration.initializer\n+            );\n+            x = pe;\n+            add(newDeclaration);\n+          }\n           statement = null;\n           result = x;\n           if (declaration.parameter != x) {\n             // declaration.parameter can be equal to x if exactly the same\n             // declaration was present in BlockBuilder\n             replacements.put(declaration.parameter, x);\n           }\n-        } else {\n-          add(statement);\n         }\n       } else {\n         add(statement);\n@@ -237,7 +248,7 @@ protected boolean isSimpleExpression(Expression expr) {\n   }\n \n   protected boolean isSafeForReuse(DeclarationStatement decl) {\n-    return (decl.modifiers & Modifier.FINAL) != 0;\n+    return (decl.modifiers & Modifier.FINAL) != 0 && !decl.parameter.name.startsWith(\"_\");\n   }\n \n   protected void addExpressionForReuse(DeclarationStatement decl) {\n@@ -340,7 +351,7 @@ private boolean optimize(Shuttle optimizer, boolean performInline) {\n     }\n     final Map<ParameterExpression, Expression> subMap =\n         new IdentityHashMap<>(useCounter.map.size());\n-    final SubstituteVariableVisitor visitor = new SubstituteVariableVisitor(\n+    final Shuttle visitor = new InlineVariableVisitor(\n         subMap);\n     final ArrayList<Statement> oldStatements = new ArrayList<>(statements);\n     statements.clear();\n@@ -493,7 +504,7 @@ public BlockBuilder append(Expression expression) {\n \n   /** Substitute Variable Visitor. */\n   private static class SubstituteVariableVisitor extends Shuttle {\n-    private final Map<ParameterExpression, Expression> map;\n+    protected final Map<ParameterExpression, Expression> map;\n     private final Map<ParameterExpression, Boolean> actives =\n         new IdentityHashMap<>();\n \n@@ -519,6 +530,14 @@ public BlockBuilder append(Expression expression) {\n       }\n       return super.visit(parameterExpression);\n     }\n+  }\n+\n+  /** Inline Variable Visitor. */\n+  private static class InlineVariableVisitor extends SubstituteVariableVisitor {\n+    InlineVariableVisitor(\n+        Map<ParameterExpression, Expression> map) {\n+      super(map);\n+    }\n \n     @Override public Expression visit(UnaryExpression unaryExpression,\n         Expression expression) {", "filename": "linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java"}, {"additions": 3, "raw_url": "https://github.com/apache/calcite/raw/af3e35d64a7c29dfaa451c4ab4880424a8fe8cee/linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java", "blob_url": "https://github.com/apache/calcite/blob/af3e35d64a7c29dfaa451c4ab4880424a8fe8cee/linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java", "sha": "0e4c3c2da1d54964f2a3ce766823f318c5c11dea", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java?ref=af3e35d64a7c29dfaa451c4ab4880424a8fe8cee", "patch": "@@ -2940,6 +2940,9 @@ public static DeclarationStatement declare(int modifiers,\n    */\n   public static DeclarationStatement declare(int modifiers, String name,\n       Expression initializer) {\n+    assert initializer != null\n+        : \"empty initializer for variable declaration with name '\" + name + \"', modifiers \"\n+        + modifiers + \". Please use declare(int, ParameterExpression, initializer) instead\";\n     return declare(modifiers, parameter(initializer.getType(), name),\n         initializer);\n   }", "filename": "linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java"}, {"additions": 46, "raw_url": "https://github.com/apache/calcite/raw/af3e35d64a7c29dfaa451c4ab4880424a8fe8cee/linq4j/src/test/java/org/apache/calcite/linq4j/test/BlockBuilderTest.java", "blob_url": "https://github.com/apache/calcite/blob/af3e35d64a7c29dfaa451c4ab4880424a8fe8cee/linq4j/src/test/java/org/apache/calcite/linq4j/test/BlockBuilderTest.java", "sha": "2886269594c6a74f18d4276f7492a1a2bdbe7c42", "changes": 46, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/linq4j/src/test/java/org/apache/calcite/linq4j/test/BlockBuilderTest.java?ref=af3e35d64a7c29dfaa451c4ab4880424a8fe8cee", "patch": "@@ -22,6 +22,7 @@\n import org.apache.calcite.linq4j.tree.ExpressionType;\n import org.apache.calcite.linq4j.tree.Expressions;\n import org.apache.calcite.linq4j.tree.OptimizeShuttle;\n+import org.apache.calcite.linq4j.tree.ParameterExpression;\n import org.apache.calcite.linq4j.tree.Shuttle;\n \n import org.junit.Before;\n@@ -78,6 +79,51 @@ public void prepareBuilder() {\n     b.add(Expressions.return_(null, Expressions.add(ONE, TWO)));\n     assertEquals(\"{\\n  return 4;\\n}\\n\", b.toBlock().toString());\n   }\n+\n+  private BlockBuilder appendBlockWithSameVariable(\n+      Expression initializer1, Expression initializer2) {\n+    BlockBuilder outer = new BlockBuilder();\n+    ParameterExpression outerX = Expressions.parameter(int.class, \"x\");\n+    outer.add(Expressions.declare(0, outerX, initializer1));\n+    outer.add(Expressions.statement(Expressions.assign(outerX, Expressions.constant(1))));\n+\n+    BlockBuilder inner = new BlockBuilder();\n+    ParameterExpression innerX = Expressions.parameter(int.class, \"x\");\n+    inner.add(Expressions.declare(0, innerX, initializer2));\n+    inner.add(Expressions.statement(Expressions.assign(innerX, Expressions.constant(42))));\n+    inner.add(Expressions.return_(null, innerX));\n+    outer.append(\"x\", inner.toBlock());\n+    return outer;\n+  }\n+\n+  @Test public void testRenameVariablesWithEmptyInitializer() {\n+    BlockBuilder outer = appendBlockWithSameVariable(null, null);\n+\n+    assertEquals(\"x in the second block should be renamed to avoid name clash\",\n+        \"{\\n\"\n+            + \"  int x;\\n\"\n+            + \"  x = 1;\\n\"\n+            + \"  int x0;\\n\"\n+            + \"  x0 = 42;\\n\"\n+            + \"}\\n\",\n+        Expressions.toString(outer.toBlock()));\n+  }\n+\n+  @Test public void testRenameVariablesWithInitializer() {\n+    BlockBuilder outer = appendBlockWithSameVariable(\n+        Expressions.constant(7), Expressions.constant(8));\n+\n+    assertEquals(\"x in the second block should be renamed to avoid name clash\",\n+        \"{\\n\"\n+            + \"  int x = 7;\\n\"\n+            + \"  x = 1;\\n\"\n+            + \"  int x0 = 8;\\n\"\n+            + \"  x0 = 42;\\n\"\n+            + \"}\\n\",\n+        Expressions.toString(outer.toBlock()));\n+  }\n+\n+\n }\n \n // End BlockBuilderTest.java", "filename": "linq4j/src/test/java/org/apache/calcite/linq4j/test/BlockBuilderTest.java"}, {"additions": 2, "raw_url": "https://github.com/apache/calcite/raw/af3e35d64a7c29dfaa451c4ab4880424a8fe8cee/linq4j/src/test/java/org/apache/calcite/linq4j/test/ExpressionTest.java", "blob_url": "https://github.com/apache/calcite/blob/af3e35d64a7c29dfaa451c4ab4880424a8fe8cee/linq4j/src/test/java/org/apache/calcite/linq4j/test/ExpressionTest.java", "sha": "6e77bd9d29a6a09caea7291b20e39fc76db9ba1a", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/calcite/contents/linq4j/src/test/java/org/apache/calcite/linq4j/test/ExpressionTest.java?ref=af3e35d64a7c29dfaa451c4ab4880424a8fe8cee", "patch": "@@ -995,7 +995,8 @@ public void checkBlockBuilder(boolean optimizing, String expected) {\n             + \"  final int _b = 1 + 2;\\n\"\n             + \"  final int _c = 1 + 3;\\n\"\n             + \"  final int _d = 1 + 4;\\n\"\n-            + \"  org.apache.calcite.linq4j.test.ExpressionTest.bar(1, _b, _c, _d, org.apache.calcite.linq4j.test.ExpressionTest.foo(_c));\\n\"\n+            + \"  final int _b0 = 1 + 3;\\n\"\n+            + \"  org.apache.calcite.linq4j.test.ExpressionTest.bar(1, _b, _c, _d, org.apache.calcite.linq4j.test.ExpressionTest.foo(_b0));\\n\"\n             + \"}\\n\",\n         Expressions.toString(expression));\n     expression.accept(new Shuttle());", "filename": "linq4j/src/test/java/org/apache/calcite/linq4j/test/ExpressionTest.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/01c8a454622771a8542b1fbdf5b175ff76227bb2", "parent": "https://github.com/apache/calcite/commit/1556cdd4bb67e85f1e4036730fa510a29db59df3", "message": "[CALCITE-2765] Bump Janino dependency to 3.0.11 (Fokko Driesprong)\n\nFixes some small issues and NPE fixes http://janino-compiler.github.io/janino/changelog.html\n\nfixes #988", "bug_id": "calcite_7", "file": [{"additions": 1, "raw_url": "https://github.com/apache/calcite/raw/01c8a454622771a8542b1fbdf5b175ff76227bb2/pom.xml", "blob_url": "https://github.com/apache/calcite/blob/01c8a454622771a8542b1fbdf5b175ff76227bb2/pom.xml", "sha": "155395eae13a167cfa59b13fca456be4eba03a00", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/calcite/contents/pom.xml?ref=01c8a454622771a8542b1fbdf5b175ff76227bb2", "patch": "@@ -103,7 +103,7 @@ limitations under the License.\n     <hydromatic-toolbox.version>0.3</hydromatic-toolbox.version>\n     <hydromatic-tpcds.version>0.4</hydromatic-tpcds.version>\n     <jackson.version>2.9.6</jackson.version>\n-    <janino.version>3.0.9</janino.version>\n+    <janino.version>3.0.11</janino.version>\n     <java-diff.version>1.1.2</java-diff.version>\n     <javacc-maven-plugin.version>2.4</javacc-maven-plugin.version>\n     <jcip-annotations.version>1.0-1</jcip-annotations.version>", "filename": "pom.xml"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/14a98e93949d016bb4a4d105e42414410803c8e4", "parent": "https://github.com/apache/calcite/commit/1c913e1b0499e85b5bfcb6495e478d68ad34d280", "message": "[CALCITE-2474] SqlAdvisor: avoid NPE in lookupFromHints where FROM is empty", "bug_id": "calcite_8", "file": [{"additions": 4, "raw_url": "https://github.com/apache/calcite/raw/14a98e93949d016bb4a4d105e42414410803c8e4/core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java", "blob_url": "https://github.com/apache/calcite/blob/14a98e93949d016bb4a4d105e42414410803c8e4/core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java", "sha": "70b8d970b03d1a6727d162f4b40d9b55a7d42118", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java?ref=14a98e93949d016bb4a4d105e42414410803c8e4", "patch": "@@ -704,6 +704,10 @@ private void lookupFromHints(\n       SqlValidatorScope scope,\n       SqlParserPos pos,\n       Collection<SqlMoniker> hintList) {\n+    if (node == null) {\n+      // This can happen in cases like \"select * _suggest_\", so from clause is absent\n+      return;\n+    }\n     final SqlValidatorNamespace ns = getNamespace(node);\n     if (ns.isWrapperFor(IdentifierNamespace.class)) {\n       IdentifierNamespace idNs = ns.unwrap(IdentifierNamespace.class);", "filename": "core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java"}, {"additions": 7, "raw_url": "https://github.com/apache/calcite/raw/14a98e93949d016bb4a4d105e42414410803c8e4/core/src/test/java/org/apache/calcite/sql/test/SqlAdvisorTest.java", "blob_url": "https://github.com/apache/calcite/blob/14a98e93949d016bb4a4d105e42414410803c8e4/core/src/test/java/org/apache/calcite/sql/test/SqlAdvisorTest.java", "sha": "8734bcdd1f5193289bd54d2654b3a98b487d1d2b", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/java/org/apache/calcite/sql/test/SqlAdvisorTest.java?ref=14a98e93949d016bb4a4d105e42414410803c8e4", "patch": "@@ -1339,6 +1339,13 @@ private void testSimpleParserQuotedIdImpl() {\n         ImmutableMap.of(\"COLUMN(isOne)\", \"isOne\"));\n   }\n \n+  @Test @WithLex(Lex.JAVA) public void testAdviceEmptyFrom() {\n+    String sql;\n+    sql = \"select * from^\";\n+    assertComplete(sql, \"KEYWORD(FROM)\\n\", \"from\",\n+        ImmutableMap.of(\"KEYWORD(FROM)\", \"from\"));\n+  }\n+\n   @Test public void testInsert() throws Exception {\n     String sql;\n     sql = \"insert into emp(empno, mgr) select ^ from dept a\";", "filename": "core/src/test/java/org/apache/calcite/sql/test/SqlAdvisorTest.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/a18a380095c9f0bb3da9912748a5b368e547134f", "parent": "https://github.com/apache/calcite/commit/6496cb76301e71911bdbe537bfa7af64b346c243", "message": "[CALCITE-2429] NPE: SqlValidatorImpl.lookupFieldNamespace when SQL Advisor observes non-existing field", "bug_id": "calcite_9", "file": [{"additions": 3, "raw_url": "https://github.com/apache/calcite/raw/a18a380095c9f0bb3da9912748a5b368e547134f/core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java", "blob_url": "https://github.com/apache/calcite/blob/a18a380095c9f0bb3da9912748a5b368e547134f/core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java", "sha": "3bb0cd4478cbaead6edc0008302ed1060f96b956", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java?ref=a18a380095c9f0bb3da9912748a5b368e547134f", "patch": "@@ -4831,6 +4831,9 @@ public void setOriginal(SqlNode expr, SqlNode original) {\n   SqlValidatorNamespace lookupFieldNamespace(RelDataType rowType, String name) {\n     final SqlNameMatcher nameMatcher = catalogReader.nameMatcher();\n     final RelDataTypeField field = nameMatcher.field(rowType, name);\n+    if (field == null) {\n+      return null;\n+    }\n     return new FieldNamespace(this, field.getType());\n   }\n ", "filename": "core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java"}, {"additions": 8, "raw_url": "https://github.com/apache/calcite/raw/a18a380095c9f0bb3da9912748a5b368e547134f/core/src/test/java/org/apache/calcite/test/JdbcTest.java", "blob_url": "https://github.com/apache/calcite/blob/a18a380095c9f0bb3da9912748a5b368e547134f/core/src/test/java/org/apache/calcite/test/JdbcTest.java", "sha": "8261b8d0d776e5b8562f04785aef8b33bd359189", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/java/org/apache/calcite/test/JdbcTest.java?ref=a18a380095c9f0bb3da9912748a5b368e547134f", "patch": "@@ -413,6 +413,14 @@ private static String q(String s) {\n             \"id=empid; names=[empid]; type=COLUMN\"));\n   }\n \n+  @Test public void testSqlAdvisorNonExistingColumn()\n+      throws SQLException, ClassNotFoundException {\n+    adviseSql(\"select e.empdid_wrong_name.^ from \\\"hr\\\".\\\"emps\\\" e\",\n+        CalciteAssert.checkResultUnordered(\n+            \"id=*; names=[*]; type=KEYWORD\",\n+            \"id=; names=null; type=MATCH\"));\n+  }\n+\n   @Test public void testSqlAdvisorTableInSchema()\n       throws SQLException, ClassNotFoundException {\n     adviseSql(\"select * from \\\"hr\\\".^\",", "filename": "core/src/test/java/org/apache/calcite/test/JdbcTest.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/e14cef28af2b4f0aac5c3876aa7023053e294ee1", "parent": "https://github.com/apache/calcite/commit/280642a02a4bcfd1fb9cbe8c5ab672d3619860e7", "message": "[CALCITE-2703] Reduce code generation and class loading overhead when executing queries in the EnumerableConvention\n\n1. Add a configurable Guava cache in EnumerableInterpretable#getBindable to re-use Bindable instances.\n2. Avoid caching instances of classes with static fields.\n3. Add JMH benchmark for the expensive part of EnumerableInterpretable#getBindable method.\n4. Add utility method for obtaining integer runtime properties.\n5. NPE in VisitorImpl when visiting a FieldDeclaration without an initializer.", "bug_id": "calcite_10", "file": [{"additions": 41, "raw_url": "https://github.com/apache/calcite/raw/e14cef28af2b4f0aac5c3876aa7023053e294ee1/core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpretable.java", "blob_url": "https://github.com/apache/calcite/blob/e14cef28af2b4f0aac5c3876aa7023053e294ee1/core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpretable.java", "sha": "86ed35c4f2d021ae392cb048f58a2c61ba124b23", "changes": 49, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpretable.java?ref=e14cef28af2b4f0aac5c3876aa7023053e294ee1", "patch": "@@ -31,6 +31,8 @@\n import org.apache.calcite.linq4j.Enumerator;\n import org.apache.calcite.linq4j.tree.ClassDeclaration;\n import org.apache.calcite.linq4j.tree.Expressions;\n+import org.apache.calcite.linq4j.tree.FieldDeclaration;\n+import org.apache.calcite.linq4j.tree.VisitorImpl;\n import org.apache.calcite.plan.ConventionTraitDef;\n import org.apache.calcite.plan.RelOptCluster;\n import org.apache.calcite.plan.RelTraitSet;\n@@ -43,15 +45,20 @@\n import org.apache.calcite.runtime.Utilities;\n import org.apache.calcite.util.Util;\n \n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+\n import org.codehaus.commons.compiler.CompileException;\n import org.codehaus.commons.compiler.CompilerFactoryFactory;\n import org.codehaus.commons.compiler.IClassBodyEvaluator;\n import org.codehaus.commons.compiler.ICompilerFactory;\n \n import java.io.IOException;\n import java.io.StringReader;\n+import java.lang.reflect.Modifier;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n \n /**\n  * Relational expression that converts an enumerable input to interpretable\n@@ -82,6 +89,18 @@ public Node implement(final InterpreterImplementor implementor) {\n     return new EnumerableNode(enumerable, implementor.compiler, this);\n   }\n \n+  /**\n+   * The cache storing Bindable objects, instantiated via dynamically generated Java classes.\n+   *\n+   * It allows to re-use Bindable objects for queries appearing relatively often. It is used\n+   * to avoid the cost of compiling and generating a new class and also instantiating the object.\n+   */\n+  private static final Cache<String, Bindable> BINDABLE_CACHE =\n+      CacheBuilder.newBuilder()\n+          .concurrencyLevel(CalciteSystemProperty.BINDABLE_CACHE_CONCURRENCY_LEVEL.value())\n+          .maximumSize(CalciteSystemProperty.BINDABLE_CACHE_MAX_SIZE.value())\n+          .build();\n+\n   public static Bindable toBindable(Map<String, Object> parameters,\n       CalcitePrepare.SparkHandler spark, EnumerableRel rel,\n       EnumerableRel.Prefer prefer) {\n@@ -110,22 +129,16 @@ public static Bindable toBindable(Map<String, Object> parameters,\n     }\n   }\n \n-  static ArrayBindable getArrayBindable(ClassDeclaration expr, String s,\n-      int fieldCount) throws CompileException, IOException {\n-    Bindable bindable = getBindable(expr, s, fieldCount);\n-    return box(bindable);\n-  }\n-\n   static Bindable getBindable(ClassDeclaration expr, String s, int fieldCount)\n-      throws CompileException, IOException {\n+      throws CompileException, IOException, ExecutionException {\n     ICompilerFactory compilerFactory;\n     try {\n       compilerFactory = CompilerFactoryFactory.getDefaultCompilerFactory();\n     } catch (Exception e) {\n       throw new IllegalStateException(\n           \"Unable to instantiate java compiler\", e);\n     }\n-    IClassBodyEvaluator cbe = compilerFactory.newClassBodyEvaluator();\n+    final IClassBodyEvaluator cbe = compilerFactory.newClassBodyEvaluator();\n     cbe.setClassName(expr.name);\n     cbe.setExtendedClass(Utilities.class);\n     cbe.setImplementedInterfaces(\n@@ -137,9 +150,29 @@ static Bindable getBindable(ClassDeclaration expr, String s, int fieldCount)\n       // Add line numbers to the generated janino class\n       cbe.setDebuggingInformation(true, true, true);\n     }\n+\n+    if (CalciteSystemProperty.BINDABLE_CACHE_MAX_SIZE.value() != 0) {\n+      StaticFieldDetector detector = new StaticFieldDetector();\n+      expr.accept(detector);\n+      if (!detector.containsStaticField) {\n+        return BINDABLE_CACHE.get(s, () -> (Bindable) cbe.createInstance(new StringReader(s)));\n+      }\n+    }\n     return (Bindable) cbe.createInstance(new StringReader(s));\n   }\n \n+  /**\n+   * A visitor detecting if the Java AST contains static fields.\n+   */\n+  static class StaticFieldDetector extends VisitorImpl<Void> {\n+    boolean containsStaticField = false;\n+\n+    @Override public Void visit(final FieldDeclaration fieldDeclaration) {\n+      containsStaticField = (fieldDeclaration.modifier & Modifier.STATIC) != 0;\n+      return containsStaticField ? null : super.visit(fieldDeclaration);\n+    }\n+  }\n+\n   /** Converts a bindable over scalar values into an array bindable, with each\n    * row as an array of 1 element. */\n   static ArrayBindable box(final Bindable bindable) {", "filename": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpretable.java"}, {"additions": 57, "raw_url": "https://github.com/apache/calcite/raw/e14cef28af2b4f0aac5c3876aa7023053e294ee1/core/src/main/java/org/apache/calcite/config/CalciteSystemProperty.java", "blob_url": "https://github.com/apache/calcite/blob/e14cef28af2b4f0aac5c3876aa7023053e294ee1/core/src/main/java/org/apache/calcite/config/CalciteSystemProperty.java", "sha": "0660b37818f44b6a594ad34b4561cdb7149677e3", "changes": 59, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/config/CalciteSystemProperty.java?ref=e14cef28af2b4f0aac5c3876aa7023053e294ee1", "patch": "@@ -26,6 +26,7 @@\n import java.util.Properties;\n import java.util.Set;\n import java.util.function.Function;\n+import java.util.function.IntPredicate;\n import java.util.stream.Stream;\n \n /**\n@@ -245,14 +246,68 @@\n   public static final CalciteSystemProperty<Integer> METADATA_HANDLER_CACHE_MAXIMUM_SIZE =\n       intProperty(\"calcite.metadata.handler.cache.maximum.size\", 1000);\n \n+  /**\n+   * The maximum size of the cache used for storing Bindable objects, instantiated via\n+   * dynamically generated Java classes.\n+   *\n+   * <p>The default value is 0.</p>\n+   *\n+   * <p>The property can take any value between [0, {@link Integer#MAX_VALUE}] inclusive. If the\n+   * value is not valid (or not specified) then the default value is used.</p>\n+   *\n+   * <p>The cached objects may be quite big so it is suggested to use a rather small cache size\n+   * (e.g., 1000). For the most common use cases a number close to 1000 should be enough to\n+   * alleviate the performance penalty of compiling and loading classes.</p>\n+   *\n+   * <p>Setting this property to 0 disables the cache.</p>\n+   */\n+  public static final CalciteSystemProperty<Integer> BINDABLE_CACHE_MAX_SIZE =\n+      intProperty(\"calcite.bindable.cache.maxSize\", 0, v -> v >= 0 && v <= Integer.MAX_VALUE);\n+  /**\n+   * The concurrency level of the cache used for storing Bindable objects, instantiated via\n+   * dynamically generated Java classes.\n+   *\n+   * <p>The default value is 1.</p>\n+   *\n+   * <p>The property can take any value between [1, {@link Integer#MAX_VALUE}] inclusive. If the\n+   * value is not valid (or not specified) then the default value is used.</p>\n+   *\n+   * <p>This property has no effect if the cache is disabled (i.e., {@link #BINDABLE_CACHE_MAX_SIZE}\n+   * set to 0.</p>\n+   */\n+  public static final CalciteSystemProperty<Integer> BINDABLE_CACHE_CONCURRENCY_LEVEL =\n+      intProperty(\"calcite.bindable.cache.concurrencyLevel\", 1,\n+          v -> v >= 1 && v <= Integer.MAX_VALUE);\n+\n   private static CalciteSystemProperty<Boolean> booleanProperty(String key, boolean defaultValue) {\n     return new CalciteSystemProperty<>(key,\n         v -> v == null ? defaultValue : Boolean.parseBoolean(v));\n   }\n \n   private static CalciteSystemProperty<Integer> intProperty(String key, int defaultValue) {\n-    return new CalciteSystemProperty<>(key,\n-        v -> v == null ? defaultValue : Integer.parseInt(v));\n+    return intProperty(key, defaultValue, v -> true);\n+  }\n+\n+  /**\n+   * Returns the value of the system property with the specified name as int, or\n+   * the <code>defaultValue</code> if any of the conditions below hold:\n+   * (i) the property is not defined;\n+   * (ii) the property value cannot be transformed to an int;\n+   * (iii) the property value does not satisfy the checker.\n+   */\n+  private static CalciteSystemProperty<Integer> intProperty(String key, int defaultValue,\n+      IntPredicate valueChecker) {\n+    return new CalciteSystemProperty<>(key, v -> {\n+      if (v == null) {\n+        return defaultValue;\n+      }\n+      try {\n+        int intVal = Integer.parseInt(v);\n+        return valueChecker.test(intVal) ? intVal : defaultValue;\n+      } catch (NumberFormatException nfe) {\n+        return defaultValue;\n+      }\n+    });\n   }\n \n   private static CalciteSystemProperty<String> stringProperty(String key, String defaultValue) {", "filename": "core/src/main/java/org/apache/calcite/config/CalciteSystemProperty.java"}, {"additions": 2, "raw_url": "https://github.com/apache/calcite/raw/e14cef28af2b4f0aac5c3876aa7023053e294ee1/linq4j/src/main/java/org/apache/calcite/linq4j/tree/VisitorImpl.java", "blob_url": "https://github.com/apache/calcite/blob/e14cef28af2b4f0aac5c3876aa7023053e294ee1/linq4j/src/main/java/org/apache/calcite/linq4j/tree/VisitorImpl.java", "sha": "8a4bf5851946d31602032eda139b293e0db791d4", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/calcite/contents/linq4j/src/main/java/org/apache/calcite/linq4j/tree/VisitorImpl.java?ref=e14cef28af2b4f0aac5c3876aa7023053e294ee1", "patch": "@@ -78,7 +78,8 @@ public R visit(DynamicExpression dynamicExpression) {\n \n   public R visit(FieldDeclaration fieldDeclaration) {\n     R r0 = fieldDeclaration.parameter.accept(this);\n-    return fieldDeclaration.initializer.accept(this);\n+    return fieldDeclaration.initializer == null ? null\n+        : fieldDeclaration.initializer.accept(this);\n   }\n \n   public R visit(ForStatement forStatement) {", "filename": "linq4j/src/main/java/org/apache/calcite/linq4j/tree/VisitorImpl.java"}, {"additions": 15, "raw_url": "https://github.com/apache/calcite/raw/e14cef28af2b4f0aac5c3876aa7023053e294ee1/ubenchmark/pom.xml", "blob_url": "https://github.com/apache/calcite/blob/e14cef28af2b4f0aac5c3876aa7023053e294ee1/ubenchmark/pom.xml", "sha": "63028bde385d9eebd9d52a58723be9adaaf2cc32", "changes": 19, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/calcite/contents/ubenchmark/pom.xml?ref=e14cef28af2b4f0aac5c3876aa7023053e294ee1", "patch": "@@ -39,6 +39,21 @@ limitations under the License.\n       <artifactId>calcite-core</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.apache.calcite</groupId>\n+      <artifactId>calcite-linq4j</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.google.guava</groupId>\n+      <artifactId>guava</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.codehaus.janino</groupId>\n+      <artifactId>commons-compiler</artifactId>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.openjdk.jmh</groupId>\n       <artifactId>jmh-core</artifactId>\n@@ -48,10 +63,6 @@ limitations under the License.\n       <artifactId>jmh-generator-annprocess</artifactId>\n       <scope>provided</scope>\n     </dependency>\n-    <dependency>\n-      <groupId>com.google.guava</groupId>\n-      <artifactId>guava</artifactId>\n-    </dependency>\n   </dependencies>\n \n   <build>", "filename": "ubenchmark/pom.xml"}, {"additions": 287, "raw_url": "https://github.com/apache/calcite/raw/e14cef28af2b4f0aac5c3876aa7023053e294ee1/ubenchmark/src/main/java/org/apache/calcite/adapter/enumerable/CodeGenerationBenchmark.java", "blob_url": "https://github.com/apache/calcite/blob/e14cef28af2b4f0aac5c3876aa7023053e294ee1/ubenchmark/src/main/java/org/apache/calcite/adapter/enumerable/CodeGenerationBenchmark.java", "sha": "4c32cdeede55e81b6e3f3573e23e2b25f1072fb2", "changes": 287, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/ubenchmark/src/main/java/org/apache/calcite/adapter/enumerable/CodeGenerationBenchmark.java?ref=e14cef28af2b4f0aac5c3876aa7023053e294ee1", "patch": "@@ -0,0 +1,287 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.adapter.enumerable;\n+\n+import org.apache.calcite.jdbc.JavaTypeFactoryImpl;\n+import org.apache.calcite.linq4j.tree.ClassDeclaration;\n+import org.apache.calcite.linq4j.tree.Expressions;\n+import org.apache.calcite.plan.ConventionTraitDef;\n+import org.apache.calcite.plan.RelOptCluster;\n+import org.apache.calcite.plan.RelTraitSet;\n+import org.apache.calcite.plan.volcano.VolcanoPlanner;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.core.JoinRelType;\n+import org.apache.calcite.rel.core.RelFactories;\n+import org.apache.calcite.rel.rules.FilterToCalcRule;\n+import org.apache.calcite.rel.rules.ProjectToCalcRule;\n+import org.apache.calcite.rel.type.RelDataTypeFactory;\n+import org.apache.calcite.rex.RexBuilder;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.runtime.ArrayBindable;\n+import org.apache.calcite.runtime.Bindable;\n+import org.apache.calcite.runtime.Typed;\n+import org.apache.calcite.runtime.Utilities;\n+import org.apache.calcite.tools.RelBuilder;\n+\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+\n+import org.codehaus.commons.compiler.CompilerFactoryFactory;\n+import org.codehaus.commons.compiler.IClassBodyEvaluator;\n+import org.codehaus.commons.compiler.ICompilerFactory;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.profile.GCProfiler;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A benchmark of the main methods that are dynamically\n+ * generating and compiling Java code at runtime.\n+ *\n+ * The benchmark examines the behavior of existing methods\n+ * and evaluates the potential of adding a caching layer on top.\n+ */\n+@Fork(value = 1, jvmArgsPrepend = \"-Xmx1024m\")\n+@Measurement(iterations = 10, time = 1)\n+@Warmup(iterations = 0)\n+@Threads(1)\n+@OutputTimeUnit(TimeUnit.SECONDS)\n+@BenchmarkMode(Mode.Throughput)\n+public class CodeGenerationBenchmark {\n+\n+  /**\n+   * State holding the generated queries/plans and additional information\n+   * exploited by the embedded compiler in order to dynamically build a Java class.\n+   */\n+  @State(Scope.Thread)\n+  public static class QueryState {\n+    /**\n+     * The number of distinct queries to be generated.\n+     */\n+    @Param({\"1\", \"10\", \"100\", \"1000\"})\n+    int queries;\n+\n+    /**\n+     * The number of joins for each generated query.\n+     */\n+    @Param({\"1\", \"10\", \"20\"})\n+    int joins;\n+\n+    /**\n+     * The number of disjunctions for each generated query.\n+     */\n+    @Param({\"1\", \"10\", \"100\"})\n+    int whereClauseDisjunctions;\n+\n+    /**\n+     * The necessary plan information for every generated query.\n+     */\n+    PlanInfo[] planInfos;\n+\n+    private int currentPlan = 0;\n+\n+    @Setup(Level.Trial)\n+    public void setup() {\n+      planInfos = new PlanInfo[queries];\n+      VolcanoPlanner planner = new VolcanoPlanner();\n+      planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n+      planner.addRule(FilterToCalcRule.INSTANCE);\n+      planner.addRule(ProjectToCalcRule.INSTANCE);\n+      planner.addRule(EnumerableRules.ENUMERABLE_CALC_RULE);\n+      planner.addRule(EnumerableRules.ENUMERABLE_JOIN_RULE);\n+      planner.addRule(EnumerableRules.ENUMERABLE_VALUES_RULE);\n+\n+      RelDataTypeFactory typeFactory =\n+          new JavaTypeFactoryImpl(org.apache.calcite.rel.type.RelDataTypeSystem.DEFAULT);\n+      RelOptCluster cluster = RelOptCluster.create(planner, new RexBuilder(typeFactory));\n+      RelTraitSet desiredTraits =\n+          cluster.traitSet().replace(EnumerableConvention.INSTANCE);\n+\n+      RelBuilder relBuilder = RelFactories.LOGICAL_BUILDER.create(cluster, null);\n+      // Generates queries of the following form depending on the configuration parameters.\n+      // SELECT `t`.`name`\n+      // FROM (VALUES  (1, 'Value0')) AS `t` (`id`, `name`)\n+      // INNER JOIN (VALUES  (1, 'Value1')) AS `t` (`id`, `name`) AS `t0` ON `t`.`id` = `t0`.`id`\n+      // INNER JOIN (VALUES  (2, 'Value2')) AS `t` (`id`, `name`) AS `t1` ON `t`.`id` = `t1`.`id`\n+      // INNER JOIN (VALUES  (3, 'Value3')) AS `t` (`id`, `name`) AS `t2` ON `t`.`id` = `t2`.`id`\n+      // INNER JOIN ...\n+      // WHERE\n+      //  `t`.`name` = 'name0' OR\n+      //  `t`.`name` = 'name1' OR\n+      //  `t`.`name` = 'name2' OR\n+      //  ...\n+      //  OR `t`.`id` = 0\n+      // The last disjunction (i.e, t.id = $i) is what makes the queries different from one another\n+      // by assigning a different constant literal.\n+      for (int i = 0; i < queries; i++) {\n+        relBuilder.values(new String[]{\"id\", \"name\"}, 1, \"Value\" + 0);\n+        for (int j = 1; j <= joins; j++) {\n+          relBuilder\n+              .values(new String[]{\"id\", \"name\"}, j, \"Value\" + j)\n+              .join(JoinRelType.INNER, \"id\");\n+        }\n+\n+        List<RexNode> disjunctions = new ArrayList<>();\n+        for (int j = 0; j < whereClauseDisjunctions; j++) {\n+          disjunctions.add(\n+              relBuilder.equals(\n+                  relBuilder.field(\"name\"),\n+                  relBuilder.literal(\"name\" + j)));\n+        }\n+        disjunctions.add(\n+            relBuilder.equals(\n+                relBuilder.field(\"id\"),\n+                relBuilder.literal(i)));\n+        RelNode query =\n+            relBuilder\n+                .filter(relBuilder.or(disjunctions))\n+                .project(relBuilder.field(\"name\"))\n+                .build();\n+\n+        RelNode query0 = planner.changeTraits(query, desiredTraits);\n+        planner.setRoot(query0);\n+\n+        PlanInfo info = new PlanInfo();\n+        EnumerableRel plan = (EnumerableRel) planner.findBestExp();\n+\n+        EnumerableRelImplementor relImplementor =\n+            new EnumerableRelImplementor(plan.getCluster().getRexBuilder(), new HashMap<>());\n+        info.classExpr = relImplementor.implementRoot(plan, EnumerableRel.Prefer.ARRAY);\n+        info.javaCode =\n+            Expressions.toString(info.classExpr.memberDeclarations, \"\\n\", false);\n+\n+        ICompilerFactory compilerFactory;\n+        try {\n+          compilerFactory = CompilerFactoryFactory.getDefaultCompilerFactory();\n+        } catch (Exception e) {\n+          throw new IllegalStateException(\n+              \"Unable to instantiate java compiler\", e);\n+        }\n+        IClassBodyEvaluator cbe = compilerFactory.newClassBodyEvaluator();\n+        cbe.setClassName(info.classExpr.name);\n+        cbe.setExtendedClass(Utilities.class);\n+        cbe.setImplementedInterfaces(\n+            plan.getRowType().getFieldCount() == 1\n+                ? new Class[]{Bindable.class, Typed.class}\n+                : new Class[]{ArrayBindable.class});\n+        cbe.setParentClassLoader(EnumerableInterpretable.class.getClassLoader());\n+        info.cbe = cbe;\n+        planInfos[i] = info;\n+      }\n+\n+    }\n+\n+    int nextPlan() {\n+      int ret = currentPlan;\n+      currentPlan = (currentPlan + 1) % queries;\n+      return ret;\n+    }\n+  }\n+\n+  /***/\n+  private static class PlanInfo {\n+    ClassDeclaration classExpr;\n+    IClassBodyEvaluator cbe;\n+    String javaCode;\n+  }\n+\n+  /**\n+   * State holding a cache that is initialized\n+   * once at the beginning of each iteration.\n+   */\n+  @State(Scope.Thread)\n+  public static class CacheState {\n+    @Param({\"10\", \"100\", \"1000\"})\n+    int cacheSize;\n+\n+    Cache<String, Bindable> cache;\n+\n+    @Setup(Level.Iteration)\n+    public void setup() {\n+      cache = CacheBuilder.newBuilder().maximumSize(cacheSize).concurrencyLevel(1).build();\n+    }\n+\n+  }\n+\n+\n+  /**\n+   * Benchmarks the part creating Bindable instances from\n+   * {@link EnumerableInterpretable#getBindable(ClassDeclaration, String, int)}\n+   * method without any additional caching layer.\n+   */\n+  @Benchmark\n+  public Bindable<?> getBindableNoCache(QueryState state) throws Exception {\n+    PlanInfo info = state.planInfos[state.nextPlan()];\n+    return (Bindable) info.cbe.createInstance(new StringReader(info.javaCode));\n+  }\n+\n+  /**\n+   * Benchmarks the part of creating Bindable instances from\n+   * {@link EnumerableInterpretable#getBindable(ClassDeclaration, String, int)}\n+   * method with an additional cache layer.\n+   */\n+  @Benchmark\n+  public Bindable<?> getBindableWithCache(\n+      QueryState jState,\n+      CacheState chState) throws Exception {\n+    PlanInfo info = jState.planInfos[jState.nextPlan()];\n+    Cache<String, Bindable> cache = chState.cache;\n+\n+    EnumerableInterpretable.StaticFieldDetector detector\n+        = new EnumerableInterpretable.StaticFieldDetector();\n+    info.classExpr.accept(detector);\n+    if (!detector.containsStaticField) {\n+      return cache.get(\n+          info.javaCode,\n+          () -> (Bindable) info.cbe.createInstance(new StringReader(info.javaCode)));\n+    }\n+    throw new IllegalStateException(\"Benchmark queries should not arrive here\");\n+  }\n+\n+  public static void main(String[] args) throws RunnerException {\n+    Options opt = new OptionsBuilder()\n+        .include(CodeGenerationBenchmark.class.getName())\n+        .addProfiler(GCProfiler.class)\n+        .detectJvmArgs()\n+        .build();\n+\n+    new Runner(opt).run();\n+  }\n+}\n+\n+// End CodeGenerationBenchmark.java", "filename": "ubenchmark/src/main/java/org/apache/calcite/adapter/enumerable/CodeGenerationBenchmark.java"}, {"additions": 26, "raw_url": "https://github.com/apache/calcite/raw/e14cef28af2b4f0aac5c3876aa7023053e294ee1/ubenchmark/src/main/java/org/apache/calcite/adapter/enumerable/package-info.java", "blob_url": "https://github.com/apache/calcite/blob/e14cef28af2b4f0aac5c3876aa7023053e294ee1/ubenchmark/src/main/java/org/apache/calcite/adapter/enumerable/package-info.java", "sha": "061c3f43b80fc12c057e5acd5781c6631b079db7", "changes": 26, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/ubenchmark/src/main/java/org/apache/calcite/adapter/enumerable/package-info.java?ref=e14cef28af2b4f0aac5c3876aa7023053e294ee1", "patch": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * JMH benchmarks for Calcite Enumerable adapter\n+ */\n+@PackageMarker\n+package org.apache.calcite.adapter.enumerable;\n+\n+import org.apache.calcite.avatica.util.PackageMarker;\n+\n+// End package-info.java", "filename": "ubenchmark/src/main/java/org/apache/calcite/adapter/enumerable/package-info.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/210fa866e792ce379f2deb52f79fc0686866f07a", "parent": "https://github.com/apache/calcite/commit/dfe251d7e5136ce93b1172ad1822bd908e953c86", "message": "Test case for [CALCITE-1952] NPE in VolcanoPlanner", "bug_id": "calcite_11", "file": [{"additions": 53, "raw_url": "https://github.com/apache/calcite/raw/210fa866e792ce379f2deb52f79fc0686866f07a/file/src/test/java/org/apache/calcite/adapter/file/FileReaderTest.java", "blob_url": "https://github.com/apache/calcite/blob/210fa866e792ce379f2deb52f79fc0686866f07a/file/src/test/java/org/apache/calcite/adapter/file/FileReaderTest.java", "sha": "b5e92aa44fc5721d2f39dce04d15030a819432b7", "changes": 55, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/calcite/contents/file/src/test/java/org/apache/calcite/adapter/file/FileReaderTest.java?ref=210fa866e792ce379f2deb52f79fc0686866f07a", "patch": "@@ -34,12 +34,17 @@\n \n import java.io.File;\n import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.Statement;\n import java.util.Iterator;\n+import java.util.Properties;\n \n /**\n  * Unit tests for FileReader.\n  */\n-\n public class FileReaderTest {\n \n   private static final Source CITIES_SOURCE =\n@@ -59,6 +64,15 @@ public static String file(String s) {\n     }\n   }\n \n+  private static String resourcePath(String path) {\n+    final URL url = FileReaderTest.class.getResource(\"/\" + path);\n+    String s = url.toString();\n+    if (s.startsWith(\"file:\")) {\n+      s = s.substring(\"file:\".length());\n+    }\n+    return s;\n+  }\n+\n   /** Tests {@link FileReader} URL instantiation - no path. */\n   @Test public void testFileReaderUrlNoPath() throws FileReaderException {\n     Assume.assumeTrue(FileSuite.hazNetwork());\n@@ -173,7 +187,6 @@ public void testFileReaderBadSelector() throws FileReaderException {\n \n   /** Tests {@link FileReader} iterator with static file, */\n   @Test public void testFileReaderIterator() throws FileReaderException {\n-    System.out.println(new File(\"\").getAbsolutePath());\n     final Source source =\n         Sources.file(null, file(\"target/test-classes/tableOK.html\"));\n     FileReader t = new FileReader(source);\n@@ -185,6 +198,44 @@ public void testFileReaderBadSelector() throws FileReaderException {\n     assertTrue(row.get(1).text().equals(\"R2C1\"));\n   }\n \n+  /** Tests reading a CSV file via the file adapter. Based on the test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-1952\">[CALCITE-1952]\n+   * NPE in planner</a>. */\n+  @Test public void testCsvFile() throws Exception {\n+    Properties info = new Properties();\n+    final String model = \"inline:\"\n+        + \"{\\n\"\n+        + \"  \\\"version\\\": \\\"1.0\\\",\\n\"\n+        + \"  \\\"defaultSchema\\\": \\\"XXX\\\",\\n\"\n+        + \"  \\\"schemas\\\": [\\n\"\n+        + \"    {\\n\"\n+        + \"      \\\"name\\\": \\\"FILES\\\",\\n\"\n+        + \"      \\\"type\\\": \\\"custom\\\",\\n\"\n+        + \"      \\\"factory\\\": \\\"org.apache.calcite.adapter.file.FileSchemaFactory\\\",\\n\"\n+        + \"      \\\"operand\\\": {\\n\"\n+        + \"        \\\"directory\\\": \\\"\" + resourcePath(\"sales-csv\") + \"\\\"\\n\"\n+        + \"      }\\n\"\n+        + \"    }\\n\"\n+        + \"  ]\\n\"\n+        + \"}\";\n+    info.put(\"model\", model);\n+    info.put(\"lex\", \"JAVA\");\n+\n+    try (Connection connection =\n+             DriverManager.getConnection(\"jdbc:calcite:\", info);\n+         Statement stmt = connection.createStatement()) {\n+      final String sql = \"select * from FILES.DEPTS\";\n+      final ResultSet rs = stmt.executeQuery(sql);\n+      assertThat(rs.next(), is(true));\n+      assertThat(rs.getString(1), is(\"10\"));\n+      assertThat(rs.next(), is(true));\n+      assertThat(rs.getString(1), is(\"20\"));\n+      assertThat(rs.next(), is(true));\n+      assertThat(rs.getString(1), is(\"30\"));\n+      assertThat(rs.next(), is(false));\n+      rs.close();\n+    }\n+  }\n }\n \n // End FileReaderTest.java", "filename": "file/src/test/java/org/apache/calcite/adapter/file/FileReaderTest.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/188c8020d4e68c0a3180265b07949aeb8830ff1b", "parent": "https://github.com/apache/calcite/commit/9baa96f39005a51061a675e245f1975254e37b13", "message": "[CALCITE-1910] NPE on filtered aggregators using \"IN\"\n\nClose apache/calcite#548", "bug_id": "calcite_12", "file": [{"additions": 16, "raw_url": "https://github.com/apache/calcite/raw/188c8020d4e68c0a3180265b07949aeb8830ff1b/core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java", "blob_url": "https://github.com/apache/calcite/blob/188c8020d4e68c0a3180265b07949aeb8830ff1b/core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java", "sha": "752743b1fdca265450fd5efb591e0c9b08224834", "changes": 16, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java?ref=188c8020d4e68c0a3180265b07949aeb8830ff1b", "patch": "@@ -2693,6 +2693,10 @@ protected final void createAggImpl(\n     replaceSubQueries(bb, aggregateFinder.list,\n         RelOptUtil.Logic.TRUE_FALSE_UNKNOWN);\n \n+    // also replace sub-queries inside filters in the aggregates\n+    replaceSubQueries(bb, aggregateFinder.filterList,\n+        RelOptUtil.Logic.TRUE_FALSE_UNKNOWN);\n+\n     // If group-by clause is missing, pretend that it has zero elements.\n     if (groupList == null) {\n       groupList = SqlNodeList.EMPTY;\n@@ -5214,12 +5218,24 @@ private SubQuery(SqlNode node, RelOptUtil.Logic logic) {\n    */\n   private static class AggregateFinder extends SqlBasicVisitor<Void> {\n     final SqlNodeList list = new SqlNodeList(SqlParserPos.ZERO);\n+    final SqlNodeList filterList = new SqlNodeList(SqlParserPos.ZERO);\n \n     @Override public Void visit(SqlCall call) {\n       // ignore window aggregates and ranking functions (associated with OVER operator)\n       if (call.getOperator().getKind() == SqlKind.OVER) {\n         return null;\n       }\n+\n+      if (call.getOperator().getKind() == SqlKind.FILTER) {\n+        // the WHERE in a FILTER must be tracked too so we can call replaceSubQueries on it.\n+        // see https://issues.apache.org/jira/browse/CALCITE-1910\n+        final SqlNode aggCall = call.getOperandList().get(0);\n+        final SqlNode whereCall = call.getOperandList().get(1);\n+        list.add(aggCall);\n+        filterList.add(whereCall);\n+        return null;\n+      }\n+\n       if (call.getOperator().isAggregator()) {\n         list.add(call);\n         return null;", "filename": "core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java"}, {"additions": 8, "raw_url": "https://github.com/apache/calcite/raw/188c8020d4e68c0a3180265b07949aeb8830ff1b/core/src/test/java/org/apache/calcite/test/SqlToRelConverterTest.java", "blob_url": "https://github.com/apache/calcite/blob/188c8020d4e68c0a3180265b07949aeb8830ff1b/core/src/test/java/org/apache/calcite/test/SqlToRelConverterTest.java", "sha": "f0276f400f86e7a29d35f336793eef27fc2f8682", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/java/org/apache/calcite/test/SqlToRelConverterTest.java?ref=188c8020d4e68c0a3180265b07949aeb8830ff1b", "patch": "@@ -469,6 +469,14 @@ protected final void check(\n     sql(sql).ok();\n   }\n \n+  @Test public void testAggFilterWithIn() {\n+    final String sql = \"select\\n\"\n+        + \"  deptno, sum(sal * 2) filter (where empno not in (1, 2)), count(*)\\n\"\n+        + \"from emp\\n\"\n+        + \"group by deptno\";\n+    sql(sql).ok();\n+  }\n+\n   @Test public void testFakeStar() {\n     sql(\"SELECT * FROM (VALUES (0, 0)) AS T(A, \\\"*\\\")\").ok();\n   }", "filename": "core/src/test/java/org/apache/calcite/test/SqlToRelConverterTest.java"}, {"additions": 15, "raw_url": "https://github.com/apache/calcite/raw/188c8020d4e68c0a3180265b07949aeb8830ff1b/core/src/test/resources/org/apache/calcite/test/SqlToRelConverterTest.xml", "blob_url": "https://github.com/apache/calcite/blob/188c8020d4e68c0a3180265b07949aeb8830ff1b/core/src/test/resources/org/apache/calcite/test/SqlToRelConverterTest.xml", "sha": "dd944d10800162a0a1594eb4ba30c39a8fc4746e", "changes": 15, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/resources/org/apache/calcite/test/SqlToRelConverterTest.xml?ref=188c8020d4e68c0a3180265b07949aeb8830ff1b", "patch": "@@ -2888,6 +2888,21 @@ group by deptno]]>\n LogicalAggregate(group=[{0}], EXPR$1=[SUM($1) FILTER $2], EXPR$2=[COUNT()])\n   LogicalProject(DEPTNO=[$7], $f1=[*($5, 2)], $f2=[<($0, 10)])\n     LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+]]>\n+        </Resource>\n+    </TestCase>\n+    <TestCase name=\"testAggFilterWithIn\">\n+        <Resource name=\"sql\">\n+            <![CDATA[select\n+  deptno, sum(sal * 2) filter (where empno not in (1, 2)), count(*)\n+from emp\n+group by deptno]]>\n+        </Resource>\n+        <Resource name=\"plan\">\n+            <![CDATA[\n+LogicalAggregate(group=[{0}], EXPR$1=[SUM($1) FILTER $2], EXPR$2=[COUNT()])\n+  LogicalProject(DEPTNO=[$7], $f1=[*($5, 2)], $f2=[AND(<>($0, 1), <>($0, 2))])\n+    LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n ]]>\n         </Resource>\n     </TestCase>", "filename": "core/src/test/resources/org/apache/calcite/test/SqlToRelConverterTest.xml"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/d633402c41158da3fc00eebcf0e75b0c7da71450", "parent": "https://github.com/apache/calcite/commit/67071b6b0ba52eeb953badfff39fa10d85b80bf5", "message": "[CALCITE-1982] NPE simplifying range expressions when literal value is null", "bug_id": "calcite_13", "file": [{"additions": 8, "raw_url": "https://github.com/apache/calcite/raw/d633402c41158da3fc00eebcf0e75b0c7da71450/core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "blob_url": "https://github.com/apache/calcite/blob/d633402c41158da3fc00eebcf0e75b0c7da71450/core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "sha": "286a6972842764811bb57709154967be8f85b358", "changes": 11, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/rex/RexSimplify.java?ref=d633402c41158da3fc00eebcf0e75b0c7da71450", "patch": "@@ -613,13 +613,18 @@ RexNode simplifyAnd2ForUnknownAsFalse(List<RexNode> terms,\n           RexCall rightCast = (RexCall) right;\n           comparedOperands.add(rightCast.getOperands().get(0).toString());\n         }\n-        // Check for equality on different constants. If the same ref or CAST(ref)\n-        // is equal to different constants, this condition cannot be satisfied,\n-        // and hence it can be evaluated to FALSE\n         final boolean leftRef = RexUtil.isReferenceOrAccess(left, true);\n         final boolean rightRef = RexUtil.isReferenceOrAccess(right, true);\n         final boolean leftConstant = left.isA(SqlKind.LITERAL);\n         final boolean rightConstant = right.isA(SqlKind.LITERAL);\n+        // Check for comparison with null values\n+        if (leftConstant && ((RexLiteral) left).getValue() == null\n+            || rightConstant && ((RexLiteral) right).getValue() == null) {\n+          return rexBuilder.makeLiteral(false);\n+        }\n+        // Check for equality on different constants. If the same ref or CAST(ref)\n+        // is equal to different constants, this condition cannot be satisfied,\n+        // and hence it can be evaluated to FALSE\n         if (term.getKind() == SqlKind.EQUALS) {\n           if (leftRef && rightConstant) {\n             final String literal = right.toString();", "filename": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java"}, {"additions": 3, "raw_url": "https://github.com/apache/calcite/raw/d633402c41158da3fc00eebcf0e75b0c7da71450/core/src/test/java/org/apache/calcite/test/RexProgramTest.java", "blob_url": "https://github.com/apache/calcite/blob/d633402c41158da3fc00eebcf0e75b0c7da71450/core/src/test/java/org/apache/calcite/test/RexProgramTest.java", "sha": "b0467d6dc6d74294af1c135779ad1ef67f096baa", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/java/org/apache/calcite/test/RexProgramTest.java?ref=d633402c41158da3fc00eebcf0e75b0c7da71450", "patch": "@@ -1311,6 +1311,9 @@ private void checkExponentialCnf(int n) {\n     checkSimplifyFilter(\n         case_(aRef, trueLiteral, bRef, trueLiteral, cRef, falseLiteral, dRef, falseLiteral,\n             unknownLiteral), \"CAST(OR(?0.a, ?0.b)):BOOLEAN\");\n+\n+    // condition with null value for range\n+    checkSimplifyFilter(and(gt(aRef, unknownLiteral), ge(bRef, literal1)), \"false\");\n   }\n \n   /** Unit test for", "filename": "core/src/test/java/org/apache/calcite/test/RexProgramTest.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/000622daf9af011b88022b4679dd08c7d09f1475", "parent": "https://github.com/apache/calcite/commit/a838a73c92575db16de337911564c90a9d4e967f", "message": "[CALCITE-2237] Upgrade Maven Surefire plugin to 2.21.0 (Kevin Risden)\n\nFixes NPE when using Maven Surefire plugin 2.20.1 on JDK 10.\nSee [SUREFIRE-1439] and [MPOM-184] for details.\n\nClose apache/calcite#656", "bug_id": "calcite_14", "file": [{"additions": 4, "raw_url": "https://github.com/apache/calcite/raw/000622daf9af011b88022b4679dd08c7d09f1475/pom.xml", "blob_url": "https://github.com/apache/calcite/blob/000622daf9af011b88022b4679dd08c7d09f1475/pom.xml", "sha": "105ae4a77b2714f6158c9e4ee7f802aa523280d4", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/calcite/contents/pom.xml?ref=000622daf9af011b88022b4679dd08c7d09f1475", "patch": "@@ -104,10 +104,12 @@ limitations under the License.\n     <maven-checkstyle-plugin.version>3.0.0</maven-checkstyle-plugin.version>\n     <maven-dependency-plugin.version>2.10</maven-dependency-plugin.version>\n     <maven-enforcer-plugin.version>3.0.0-M1</maven-enforcer-plugin.version>\n-    <!-- Apache 19 has 2.10.4, but need 3.0.0 for [LANG-365]. -->\n+    <!-- Apache 19 has 2.10.4, but need 3.0.0 for [LANG-1365]. -->\n     <maven-javadoc-plugin.version>3.0.0</maven-javadoc-plugin.version>\n     <maven-scm-provider.version>1.9.4</maven-scm-provider.version>\n     <maven-shade-plugin.version>2.1</maven-shade-plugin.version>\n+    <!-- Apache 19 has 2.20.1, but need 2.21.0+ for [MPOM-184] -->\n+    <maven-surefire-plugin.version>2.21.0</maven-surefire-plugin.version>\n     <mockito.version>2.5.5</mockito.version>\n     <mongo-java-driver.version>3.5.0</mongo-java-driver.version>\n     <mysql-driver.version>5.1.20</mysql-driver.version>\n@@ -855,6 +857,7 @@ limitations under the License.\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-surefire-plugin</artifactId>\n+          <version>${maven-surefire-plugin.version}</version>\n           <configuration>\n             <threadCount>1</threadCount>\n             <perCoreThreadCount>true</perCoreThreadCount>", "filename": "pom.xml"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/a2faf47b0f2bc98482a39ff51c23f7b92c118fee", "parent": "https://github.com/apache/calcite/commit/cdb30028ae429c3b6513c09627bceb3da5ac720a", "message": "[CALCITE-1859] NPE in validate method of VolcanoPlanner\n\nClose apache/calcite#483", "bug_id": "calcite_15", "file": [{"additions": 2, "raw_url": "https://github.com/apache/calcite/raw/a2faf47b0f2bc98482a39ff51c23f7b92c118fee/core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java", "blob_url": "https://github.com/apache/calcite/blob/a2faf47b0f2bc98482a39ff51c23f7b92c118fee/core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java", "sha": "f364704ca6af9efb67e8aab1805455b9a6036d35", "changes": 5, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java?ref=a2faf47b0f2bc98482a39ff51c23f7b92c118fee", "patch": "@@ -888,7 +888,6 @@ public RelSubset ensureRegistered(RelNode rel, RelNode equivRel) {\n    * Checks internal consistency.\n    */\n   protected void validate() {\n-    final RelMetadataQuery mq = root.getCluster().getMetadataQuery();\n     for (RelSet set : allSets) {\n       if (set.equivalentSet != null) {\n         throw new AssertionError(\n@@ -902,7 +901,7 @@ protected void validate() {\n               + \"] is in wrong set [\" + set + \"]\");\n         }\n         for (RelNode rel : subset.getRels()) {\n-          RelOptCost relCost = getCost(rel, mq);\n+          RelOptCost relCost = getCost(rel, rel.getCluster().getMetadataQuery());\n           if (relCost.isLt(subset.bestCost)) {\n             throw new AssertionError(\n                 \"rel [\" + rel.getDescription()\n@@ -1169,7 +1168,6 @@ public void setImportance(RelNode rel, double importance) {\n    * @see #normalizePlan(String)\n    */\n   public void dump(PrintWriter pw) {\n-    final RelMetadataQuery mq = root.getCluster().getMetadataQuery();\n     pw.println(\"Root: \" + root.getDescription());\n     pw.println(\"Original rel:\");\n     pw.println(originalRootString);\n@@ -1222,6 +1220,7 @@ public int compare(\n           if (importance != null) {\n             pw.print(\", importance=\" + importance);\n           }\n+          RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n           pw.print(\", rowcount=\" + mq.getRowCount(rel));\n           pw.println(\", cumulative cost=\" + getCost(rel, mq));\n         }", "filename": "core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/ef00738a053cbe881f2c840f3e3b5feeb010b6e1", "parent": "https://github.com/apache/calcite/commit/1aaa0d6860c7538d62998ec13bcc83763c04720f", "message": "[CALCITE-1770] Druid adapter: CAST(NULL AS ...) gives NPE (Slim Bouguerra)\n\nClose apache/calcite#441", "bug_id": "calcite_16", "file": [{"additions": 4, "raw_url": "https://github.com/apache/calcite/raw/ef00738a053cbe881f2c840f3e3b5feeb010b6e1/druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java", "blob_url": "https://github.com/apache/calcite/blob/ef00738a053cbe881f2c840f3e3b5feeb010b6e1/druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java", "sha": "81e94dda3705802c40b3a430f8edb1daf4898e01", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java?ref=ef00738a053cbe881f2c840f3e3b5feeb010b6e1", "patch": "@@ -959,6 +959,10 @@ public String getQueryString(String pagingIdentifier, int offset) {\n       case CAST:\n         return tr(e, 0, set);\n       case LITERAL:\n+        if (((RexLiteral) e).getValue3() == null) {\n+          // Druid considers null is equivalent to empty.\n+          return \"\";\n+        }\n         return ((RexLiteral) e).getValue3().toString();\n       case FLOOR:\n       case EXTRACT:", "filename": "druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java"}, {"additions": 12, "raw_url": "https://github.com/apache/calcite/raw/ef00738a053cbe881f2c840f3e3b5feeb010b6e1/druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java", "blob_url": "https://github.com/apache/calcite/blob/ef00738a053cbe881f2c840f3e3b5feeb010b6e1/druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java", "sha": "17d621116929212c18029f56a53020caa1d38c4b", "changes": 12, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java?ref=ef00738a053cbe881f2c840f3e3b5feeb010b6e1", "patch": "@@ -2088,6 +2088,18 @@ public Void apply(ResultSet resultSet) {\n     sql(sql).explainContains(plan).queryContains(druidChecker(\"'queryType':'select'\"))\n         .returnsUnordered(\"EXPR$0=19\");\n   }\n+\n+  /** Test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-1770\">[CALCITE-1770]\n+   * Druid adapter: CAST(NULL AS ...) gives NPE</a>. */\n+  @Test public void testPushCast() {\n+    final String sql = \"SELECT \\\"product_id\\\"\\n\"\n+        + \"from \\\"foodmart\\\"\\n\"\n+        + \"where \\\"product_id\\\" = cast(NULL as varchar)\\n\"\n+        + \"group by \\\"product_id\\\"\";\n+    String druidQuery = \"'filter':{'type':'selector','dimension':'product_id','value':''}\";\n+    sql(sql).queryContains(druidChecker(druidQuery));\n+  }\n }\n \n // End DruidAdapterIT.java", "filename": "druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf", "parent": "https://github.com/apache/calcite/commit/26fddf2a641aebf943f18b7da8f81397955f4e59", "message": "[CALCITE-1212] Fix NPE on some Cassandra projects", "bug_id": "calcite_17", "file": [{"additions": 1, "raw_url": "https://github.com/apache/calcite/raw/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraMethod.java", "blob_url": "https://github.com/apache/calcite/blob/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraMethod.java", "sha": "c7d0973d3972f36cba683682eff39595c88c1004", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/calcite/contents/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraMethod.java?ref=6baa9c4bed1100012ebf4ef9547cbb077f2edaaf", "patch": "@@ -28,7 +28,7 @@\n  */\n public enum CassandraMethod {\n   CASSANDRA_QUERYABLE_QUERY(CassandraTable.CassandraQueryable.class, \"query\",\n-      List.class, List.class, List.class, String.class);\n+      List.class, List.class, List.class, List.class, String.class);\n \n   public final Method method;\n ", "filename": "cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraMethod.java"}, {"additions": 5, "raw_url": "https://github.com/apache/calcite/raw/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraProject.java", "blob_url": "https://github.com/apache/calcite/blob/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraProject.java", "sha": "5e55e461ffb72b31bd1667eca95dd3e904da6e06", "changes": 15, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/calcite/contents/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraProject.java?ref=6baa9c4bed1100012ebf4ef9547cbb077f2edaaf", "patch": "@@ -28,8 +28,9 @@\n import org.apache.calcite.rex.RexNode;\n import org.apache.calcite.util.Pair;\n \n-import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * Implementation of {@link org.apache.calcite.rel.core.Project}\n@@ -60,17 +61,11 @@ public void implement(Implementor implementor) {\n         new CassandraRules.RexToCassandraTranslator(\n             (JavaTypeFactory) getCluster().getTypeFactory(),\n             CassandraRules.cassandraFieldNames(getInput().getRowType()));\n-    final List<String> fields = new ArrayList<String>();\n+    final Map<String, String> fields = new LinkedHashMap<String, String>();\n     for (Pair<RexNode, String> pair : getNamedProjects()) {\n       final String name = pair.right;\n-      final String expr = pair.left.accept(translator);\n-\n-      // Alias the field if necessary\n-      if (name.equals(expr)) {\n-        fields.add(name);\n-      } else {\n-        fields.add(name + \" AS \" + expr);\n-      }\n+      final String originalName = pair.left.accept(translator);\n+      fields.put(originalName, name);\n     }\n     implementor.add(fields, null);\n   }", "filename": "cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraProject.java"}, {"additions": 5, "raw_url": "https://github.com/apache/calcite/raw/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRel.java", "blob_url": "https://github.com/apache/calcite/blob/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRel.java", "sha": "0191fd06b298efb14e4ee840df78ae6663e5071f", "changes": 8, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/calcite/contents/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRel.java?ref=6baa9c4bed1100012ebf4ef9547cbb077f2edaaf", "patch": "@@ -21,7 +21,9 @@\n import org.apache.calcite.rel.RelNode;\n \n import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * Relational expression that uses Cassandra calling convention.\n@@ -35,7 +37,7 @@\n   /** Callback for the implementation process that converts a tree of\n    * {@link CassandraRel} nodes into a CQL query. */\n   class Implementor {\n-    final List<String> selectFields = new ArrayList<String>();\n+    final Map<String, String> selectFields = new LinkedHashMap<String, String>();\n     final List<String> whereClause = new ArrayList<String>();\n     String limitValue = null;\n     final List<String> order = new ArrayList<String>();\n@@ -48,9 +50,9 @@\n      * @param fields New fields to be projected from a query\n      * @param predicates New predicates to be applied to the query\n      */\n-    public void add(List<String> fields, List<String> predicates) {\n+    public void add(Map<String, String> fields, List<String> predicates) {\n       if (fields != null) {\n-        selectFields.addAll(fields);\n+        selectFields.putAll(fields);\n       }\n       if (predicates != null) {\n         whereClause.addAll(predicates);", "filename": "cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRel.java"}, {"additions": 11, "raw_url": "https://github.com/apache/calcite/raw/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java", "blob_url": "https://github.com/apache/calcite/blob/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java", "sha": "0e0bcb2438b93ec2be85fa3e264eccc29b249d5f", "changes": 11, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java?ref=6baa9c4bed1100012ebf4ef9547cbb077f2edaaf", "patch": "@@ -249,6 +249,17 @@ private CassandraProjectRule() {\n       super(LogicalProject.class, \"CassandraProjectRule\");\n     }\n \n+    @Override public boolean matches(RelOptRuleCall call) {\n+      LogicalProject project = call.rel(0);\n+      for (RexNode e : project.getProjects()) {\n+        if (!(e instanceof RexInputRef)) {\n+          return false;\n+        }\n+      }\n+\n+      return true;\n+    }\n+\n     public RelNode convert(RelNode rel) {\n       final LogicalProject project = (LogicalProject) rel;\n       final RelTraitSet traitSet = project.getTraitSet().replace(out);", "filename": "cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java"}, {"additions": 48, "raw_url": "https://github.com/apache/calcite/raw/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java", "blob_url": "https://github.com/apache/calcite/blob/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java", "sha": "c786dea45ecdcdde678ad76a07c2afef44f6fddf", "changes": 63, "status": "modified", "deletions": 15, "contents_url": "https://api.github.com/repos/apache/calcite/contents/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java?ref=6baa9c4bed1100012ebf4ef9547cbb077f2edaaf", "patch": "@@ -22,6 +22,7 @@\n import org.apache.calcite.linq4j.Enumerator;\n import org.apache.calcite.linq4j.QueryProvider;\n import org.apache.calcite.linq4j.Queryable;\n+import org.apache.calcite.linq4j.function.Function1;\n import org.apache.calcite.plan.RelOptCluster;\n import org.apache.calcite.plan.RelOptTable;\n import org.apache.calcite.rel.RelFieldCollation;\n@@ -42,8 +43,8 @@\n import com.datastax.driver.core.ResultSet;\n import com.datastax.driver.core.Session;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n \n@@ -97,6 +98,7 @@ public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n \n   public Enumerable<Object> query(final Session session) {\n     return query(session, Collections.<Map.Entry<String, Class>>emptyList(),\n+        Collections.<Map.Entry<String, String>>emptyList(),\n         Collections.<String>emptyList(), Collections.<String>emptyList(), null);\n   }\n \n@@ -108,27 +110,56 @@ public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n    * @return Enumerator of results\n    */\n   public Enumerable<Object> query(final Session session, List<Map.Entry<String, Class>> fields,\n-        List<String> predicates, List<String> order, String limit) {\n+        final List<Map.Entry<String, String>> selectFields, List<String> predicates,\n+        List<String> order, String limit) {\n     // Build the type of the resulting row based on the provided fields\n     final RelDataTypeFactory typeFactory =\n         new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n     final RelDataTypeFactory.FieldInfoBuilder fieldInfo = typeFactory.builder();\n     final RelDataType rowType = protoRowType.apply(typeFactory);\n-    List<String> fieldNames = new ArrayList<String>();\n-    for (Map.Entry<String, Class> field : fields) {\n-      String fieldName = field.getKey();\n-      fieldNames.add(fieldName);\n-      SqlTypeName typeName = rowType.getField(fieldName, true, false).getType().getSqlTypeName();\n-      fieldInfo.add(fieldName, typeFactory.createSqlType(typeName)).nullable(true);\n+\n+    Function1<String, Void> addField = new Function1<String, Void>() {\n+      public Void apply(String fieldName) {\n+        SqlTypeName typeName = rowType.getField(fieldName, true, false).getType().getSqlTypeName();\n+        fieldInfo.add(fieldName, typeFactory.createSqlType(typeName)).nullable(true);\n+        return null;\n+      }\n+    };\n+\n+    if (selectFields.isEmpty()) {\n+      for (Map.Entry<String, Class> field : fields) {\n+        addField.apply(field.getKey());\n+      }\n+    } else {\n+      for (Map.Entry<String, String> field : selectFields) {\n+        addField.apply(field.getKey());\n+      }\n     }\n+\n     final RelProtoDataType resultRowType = RelDataTypeImpl.proto(fieldInfo.build());\n \n     // Construct the list of fields to project\n-    final String selectFields;\n-    if (fields.isEmpty()) {\n-      selectFields = \"*\";\n+    final String selectString;\n+    if (selectFields.isEmpty()) {\n+      selectString = \"*\";\n     } else {\n-      selectFields = Util.toString(fieldNames, \"\", \", \", \"\");\n+      selectString = Util.toString(new Iterable<String>() {\n+        public Iterator<String> iterator() {\n+          final Iterator<Map.Entry<String, String>> selectIterator =\n+              selectFields.iterator();\n+\n+          return new Iterator<String>() {\n+            public boolean hasNext() {\n+              return selectIterator.hasNext();\n+            }\n+\n+            public String next() {\n+              Map.Entry<String, String> entry = selectIterator.next();\n+              return entry.getKey() + \" AS \" + entry.getValue();\n+            }\n+          };\n+        }\n+      }, \"\", \", \", \"\");\n     }\n \n     // Combine all predicates conjunctively\n@@ -140,7 +171,7 @@ public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n \n     // Build and issue the query and return an Enumerator over the results\n     StringBuilder queryBuilder = new StringBuilder(\"SELECT \");\n-    queryBuilder.append(selectFields);\n+    queryBuilder.append(selectString);\n     queryBuilder.append(\" FROM \\\"\" + columnFamily + \"\\\"\");\n     queryBuilder.append(whereClause);\n     if (!order.isEmpty()) {\n@@ -202,8 +233,10 @@ private Session getSession() {\n      */\n     @SuppressWarnings(\"UnusedDeclaration\")\n     public Enumerable<Object> query(List<Map.Entry<String, Class>> fields,\n-        List<String> predicates, List<String> order, String limit) {\n-      return getTable().query(getSession(), fields, predicates, order, limit);\n+        List<Map.Entry<String, String>> selectFields, List<String> predicates,\n+        List<String> order, String limit) {\n+      return getTable().query(getSession(), fields, selectFields, predicates,\n+          order, limit);\n     }\n   }\n }", "filename": "cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java"}, {"additions": 11, "raw_url": "https://github.com/apache/calcite/raw/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java", "blob_url": "https://github.com/apache/calcite/blob/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java", "sha": "31bfdcc2913b92db80521fe97927a42f043a4bf9", "changes": 12, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/calcite/contents/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java?ref=6baa9c4bed1100012ebf4ef9547cbb077f2edaaf", "patch": "@@ -43,7 +43,9 @@\n import com.google.common.collect.Lists;\n \n import java.util.AbstractList;\n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * Relational expression representing a scan of a table in a Cassandra data source.\n@@ -92,6 +94,14 @@ public Result implement(EnumerableRelImplementor implementor, Prefer pref) {\n                       }\n                     }),\n                 Pair.class));\n+    List<Map.Entry<String, String>> selectList = new ArrayList<Map.Entry<String, String>>();\n+    for (Map.Entry<String, String> entry\n+            : Pair.zip(cassandraImplementor.selectFields.keySet(),\n+                cassandraImplementor.selectFields.values())) {\n+      selectList.add(entry);\n+    }\n+    final Expression selectFields =\n+        list.append(\"selectFields\", constantArrayList(selectList, Pair.class));\n     final Expression table =\n         list.append(\"table\",\n             cassandraImplementor.table.getExpression(\n@@ -109,7 +119,7 @@ public Result implement(EnumerableRelImplementor implementor, Prefer pref) {\n         list.append(\"enumerable\",\n             Expressions.call(table,\n                 CassandraMethod.CASSANDRA_QUERYABLE_QUERY.method, fields,\n-                predicates, order, limit));\n+                selectFields, predicates, order, limit));\n     if (CalcitePrepareImpl.DEBUG) {\n       System.out.println(\"Cassandra: \" + predicates);\n     }", "filename": "cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java"}, {"additions": 17, "raw_url": "https://github.com/apache/calcite/raw/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/test/java/org/apache/calcite/test/CassandraAdapterIT.java", "blob_url": "https://github.com/apache/calcite/blob/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/test/java/org/apache/calcite/test/CassandraAdapterIT.java", "sha": "e02e4974fb898f3fbef58a670f3b368ecdad13c3", "changes": 17, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/cassandra/src/test/java/org/apache/calcite/test/CassandraAdapterIT.java?ref=6baa9c4bed1100012ebf4ef9547cbb077f2edaaf", "patch": "@@ -111,6 +111,23 @@ protected boolean enabled() {\n                 + \"      CassandraFilter(condition=[=(CAST($0):VARCHAR(8) CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\", '!PUBLIC!')])\\n\");\n   }\n \n+  @Test public void testProjectAlias() {\n+    CalciteAssert.that()\n+        .enable(enabled())\n+        .with(TWISSANDRA)\n+        .query(\"select \\\"tweet_id\\\" as \\\"foo\\\" from \\\"userline\\\" \"\n+                + \"where \\\"username\\\" = '!PUBLIC!' limit 1\")\n+        .returns(\"foo=f3c329de-d05b-11e5-b58b-90e2ba530b12\\n\");\n+  }\n+\n+  @Test public void testProjectConstant() {\n+    CalciteAssert.that()\n+        .enable(enabled())\n+        .with(TWISSANDRA)\n+        .query(\"select 'foo' as \\\"bar\\\" from \\\"userline\\\" limit 1\")\n+        .returns(\"bar=foo\\n\");\n+  }\n+\n   @Test public void testLimit() {\n     CalciteAssert.that()\n         .enable(enabled())", "filename": "cassandra/src/test/java/org/apache/calcite/test/CassandraAdapterIT.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/ea994131cd6d109ff7edf5e61754104e2b8619be", "parent": "https://github.com/apache/calcite/commit/e046be23d7364e16648ade5240ad948a04cc814b", "message": "[CALCITE-1770] Druid adapter: CAST(NULL AS ...) gives NPE (Slim Bouguerra)\n\nAvoid pushing literal NULL values to Druid.\n\nClose apache/calcite#448", "bug_id": "calcite_18", "file": [{"additions": 2, "raw_url": "https://github.com/apache/calcite/raw/ea994131cd6d109ff7edf5e61754104e2b8619be/druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java", "blob_url": "https://github.com/apache/calcite/blob/ea994131cd6d109ff7edf5e61754104e2b8619be/druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java", "sha": "c25262ed988a9aef1ed7802539a39551de8716e8", "changes": 7, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/calcite/contents/druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java?ref=ea994131cd6d109ff7edf5e61754104e2b8619be", "patch": "@@ -207,8 +207,9 @@ boolean isValidFilter(RexNode e) {\n   boolean isValidFilter(RexNode e, boolean boundedComparator) {\n     switch (e.getKind()) {\n     case INPUT_REF:\n-    case LITERAL:\n       return true;\n+    case LITERAL:\n+      return ((RexLiteral) e).getValue() != null;\n     case AND:\n     case OR:\n     case NOT:\n@@ -959,10 +960,6 @@ public String getQueryString(String pagingIdentifier, int offset) {\n       case CAST:\n         return tr(e, 0, set);\n       case LITERAL:\n-        if (((RexLiteral) e).getValue3() == null) {\n-          // Druid considers null is equivalent to empty.\n-          return \"\";\n-        }\n         return ((RexLiteral) e).getValue3().toString();\n       case FLOOR:\n       case EXTRACT:", "filename": "druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java"}, {"additions": 6, "raw_url": "https://github.com/apache/calcite/raw/ea994131cd6d109ff7edf5e61754104e2b8619be/druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java", "blob_url": "https://github.com/apache/calcite/blob/ea994131cd6d109ff7edf5e61754104e2b8619be/druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java", "sha": "2b639c84fef03c94433ce22f84a9765bb0030aa1", "changes": 8, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/calcite/contents/druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java?ref=ea994131cd6d109ff7edf5e61754104e2b8619be", "patch": "@@ -2097,8 +2097,12 @@ public Void apply(ResultSet resultSet) {\n         + \"from \\\"foodmart\\\"\\n\"\n         + \"where \\\"product_id\\\" = cast(NULL as varchar)\\n\"\n         + \"group by \\\"product_id\\\"\";\n-    String druidQuery = \"'filter':{'type':'selector','dimension':'product_id','value':''}\";\n-    sql(sql).queryContains(druidChecker(druidQuery));\n+    final String plan = \"PLAN=EnumerableInterpreter\\n\"\n+        + \"  BindableAggregate(group=[{0}])\\n\"\n+        + \"    BindableFilter(condition=[=($0, null)])\\n\"\n+        + \"      DruidQuery(table=[[foodmart, foodmart]], \"\n+        + \"intervals=[[1900-01-09T00:00:00.000/2992-01-10T00:00:00.000]], projects=[[$1]])\";\n+    sql(sql).explainContains(plan);\n   }\n \n   @Test public void testFalseFilter() {", "filename": "druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/4d8fb0901782ee9cf59af51b989e879ce586beee", "parent": "https://github.com/apache/calcite/commit/ef2a54c8620751c56059dfb89e9b080ece516ef6", "message": "Fix a NPE.", "bug_id": "calcite_19", "file": [{"additions": 9, "raw_url": "https://github.com/apache/calcite/raw/4d8fb0901782ee9cf59af51b989e879ce586beee/core/src/main/java/org/eigenbase/sql/type/SqlTypeExplicitPrecedenceList.java", "blob_url": "https://github.com/apache/calcite/blob/4d8fb0901782ee9cf59af51b989e879ce586beee/core/src/main/java/org/eigenbase/sql/type/SqlTypeExplicitPrecedenceList.java", "sha": "8096eaf640369c3d5d16b97c6d810f8c67f814c4", "changes": 11, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/eigenbase/sql/type/SqlTypeExplicitPrecedenceList.java?ref=4d8fb0901782ee9cf59af51b989e879ce586beee", "patch": "@@ -22,6 +22,8 @@\n import org.eigenbase.reltype.*;\n import org.eigenbase.util.Util;\n \n+import com.google.common.base.Predicates;\n+import com.google.common.collect.Iterables;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n \n@@ -53,6 +55,10 @@\n           SqlTypeName.FLOAT,\n           SqlTypeName.DOUBLE);\n \n+  private static final List<SqlTypeName> COMPACT_NUMERIC_TYPES =\n+      ImmutableList.copyOf(\n+          Iterables.filter(NUMERIC_TYPES, Predicates.notNull()));\n+\n   /**\n    * Map from SqlTypeName to corresponding precedence list.\n    *\n@@ -100,8 +106,9 @@ private static SqlTypeExplicitPrecedenceList list(SqlTypeName... array) {\n   }\n \n   private static SqlTypeExplicitPrecedenceList numeric(SqlTypeName typeName) {\n-    int i = getListPosition(typeName, NUMERIC_TYPES);\n-    return new SqlTypeExplicitPrecedenceList(Util.skip(NUMERIC_TYPES, i));\n+    int i = getListPosition(typeName, COMPACT_NUMERIC_TYPES);\n+    return new SqlTypeExplicitPrecedenceList(\n+        Util.skip(COMPACT_NUMERIC_TYPES, i));\n   }\n \n   // implement RelDataTypePrecedenceList", "filename": "core/src/main/java/org/eigenbase/sql/type/SqlTypeExplicitPrecedenceList.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/0ad58ed624dfad43bfcd26881588a9d3482397c1", "parent": "https://github.com/apache/calcite/commit/3a54e54fadfcf383693555ac753e88edb8f3f5d6", "message": "Add test case for [DRILL-4407] GROUP BY subquery causes Java NPE", "bug_id": "calcite_20", "file": [{"additions": 11, "raw_url": "https://github.com/apache/calcite/raw/0ad58ed624dfad43bfcd26881588a9d3482397c1/core/src/test/resources/sql/subquery.iq", "blob_url": "https://github.com/apache/calcite/blob/0ad58ed624dfad43bfcd26881588a9d3482397c1/core/src/test/resources/sql/subquery.iq", "sha": "d4f3a1009807b7d190dd78f250940cc76721945c", "changes": 11, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/resources/sql/subquery.iq?ref=0ad58ed624dfad43bfcd26881588a9d3482397c1", "patch": "@@ -274,6 +274,17 @@ GROUP BY emp.deptno;\n \n !ok\n \n+# [DRILL-4407] Group by subquery causes Java NPE\n+select count(*) as c\n+from \"scott\".emp\n+group by (select deptno from \"scott\".emp where empno = 10);\n+ C\n+----\n+ 14\n+(1 row)\n+\n+!ok\n+\n !if (fixed.calcite1045) {\n # Correlated IN sub-query in WHERE clause of JOIN\n select empno from \"scott\".emp as e", "filename": "core/src/test/resources/sql/subquery.iq"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/65774b056bcd277634e0fc6f678806f15ba05e83", "parent": "https://github.com/apache/calcite/commit/e48c7627c162726f42e786a0e0b8c3042315491a", "message": "Fix traits in MongoDB adapter, and NPE in JdbcTest", "bug_id": "calcite_21", "file": [{"additions": 8, "raw_url": "https://github.com/apache/calcite/raw/65774b056bcd277634e0fc6f678806f15ba05e83/core/src/test/java/org/apache/calcite/test/JdbcTest.java", "blob_url": "https://github.com/apache/calcite/blob/65774b056bcd277634e0fc6f678806f15ba05e83/core/src/test/java/org/apache/calcite/test/JdbcTest.java", "sha": "0f0e1627f9a4fecc4a4e4d3d999bb1d632efbf43", "changes": 12, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/java/org/apache/calcite/test/JdbcTest.java?ref=65774b056bcd277634e0fc6f678806f15ba05e83", "patch": "@@ -192,13 +192,17 @@\n       + \"   ]\\n\"\n       + \"}\";\n \n+  private static final ConnectionSpec SCOTT =\n+      Util.first(CalciteAssert.DB.scott,\n+          CalciteAssert.DatabaseInstance.HSQLDB.scott);\n+\n   public static final String SCOTT_SCHEMA = \"     {\\n\"\n       + \"       type: 'jdbc',\\n\"\n       + \"       name: 'SCOTT',\\n\"\n-      + \"       jdbcDriver: '\" + CalciteAssert.DB.scott.driver + \"',\\n\"\n-      + \"       jdbcUser: '\" + CalciteAssert.DB.scott.username + \"',\\n\"\n-      + \"       jdbcPassword: '\" + CalciteAssert.DB.scott.password + \"',\\n\"\n-      + \"       jdbcUrl: '\" + CalciteAssert.DB.scott.url + \"',\\n\"\n+      + \"       jdbcDriver: '\" + SCOTT.driver + \"',\\n\"\n+      + \"       jdbcUser: '\" + SCOTT.username + \"',\\n\"\n+      + \"       jdbcPassword: '\" + SCOTT.password + \"',\\n\"\n+      + \"       jdbcUrl: '\" + SCOTT.url + \"',\\n\"\n       + \"       jdbcCatalog: null,\\n\"\n       + \"       jdbcSchema: 'SCOTT'\\n\"\n       + \"     }\\n\";", "filename": "core/src/test/java/org/apache/calcite/test/JdbcTest.java"}, {"additions": 2, "raw_url": "https://github.com/apache/calcite/raw/65774b056bcd277634e0fc6f678806f15ba05e83/mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java", "blob_url": "https://github.com/apache/calcite/blob/65774b056bcd277634e0fc6f678806f15ba05e83/mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java", "sha": "0249cce81aacf8a34a75a71d1bcf7d87578f3bb1", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/calcite/contents/mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java?ref=65774b056bcd277634e0fc6f678806f15ba05e83", "patch": "@@ -239,7 +239,7 @@ public RelNode convert(RelNode rel) {\n       return new MongoFilter(\n           rel.getCluster(),\n           traitSet,\n-          convert(filter.getInput(), traitSet),\n+          convert(filter.getInput(), out),\n           filter.getCondition());\n     }\n   }\n@@ -260,7 +260,7 @@ public RelNode convert(RelNode rel) {\n       final LogicalProject project = (LogicalProject) rel;\n       final RelTraitSet traitSet = project.getTraitSet().replace(out);\n       return new MongoProject(project.getCluster(), traitSet,\n-          convert(project.getInput(), traitSet), project.getProjects(),\n+          convert(project.getInput(), out), project.getProjects(),\n           project.getRowType());\n     }\n   }", "filename": "mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java"}, {"additions": 14, "raw_url": "https://github.com/apache/calcite/raw/65774b056bcd277634e0fc6f678806f15ba05e83/mongodb/src/test/java/org/apache/calcite/test/MongoAdapterTest.java", "blob_url": "https://github.com/apache/calcite/blob/65774b056bcd277634e0fc6f678806f15ba05e83/mongodb/src/test/java/org/apache/calcite/test/MongoAdapterTest.java", "sha": "bc9a9dcbbac7bdd855cbebba8bfd8b1ac10baf8a", "changes": 19, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/calcite/contents/mongodb/src/test/java/org/apache/calcite/test/MongoAdapterTest.java?ref=65774b056bcd277634e0fc6f678806f15ba05e83", "patch": "@@ -530,8 +530,15 @@ public Void apply(ResultSet resultSet) {\n             + \" min(pop) as min_pop, max(pop) as max_pop, sum(pop) as sum_pop\\n\"\n             + \"from zips group by state\")\n         .limit(2)\n-        .returns(\"C=659; STATE=WV; MIN_POP=0; MAX_POP=70185; SUM_POP=1793477\\n\"\n-            + \"C=484; STATE=WA; MIN_POP=2; MAX_POP=50515; SUM_POP=4866692\\n\");\n+        .returns(\"C=195; STATE=AK; MIN_POP=0; MAX_POP=32383; SUM_POP=544698\\n\"\n+            + \"C=567; STATE=AL; MIN_POP=0; MAX_POP=44165; SUM_POP=4040587\\n\")\n+        .queryContains(\n+            mongoChecker(\n+                \"{$project: {STATE: '$state', POP: '$pop'}}\",\n+                \"{$group: {_id: '$STATE', C: {$sum: 1}, MIN_POP: {$min: '$POP'}, MAX_POP: {$max: '$POP'}, SUM_POP: {$sum: '$POP'}}}\",\n+                \"{$project: {STATE: '$_id', C: '$C', MIN_POP: '$MIN_POP', MAX_POP: '$MAX_POP', SUM_POP: '$SUM_POP'}}\",\n+                \"{$project: {C: 1, STATE: 1, MIN_POP: 1, MAX_POP: 1, SUM_POP: 1}}\",\n+                \"{$sort: {STATE: 1}}\"));\n   }\n \n   @Test public void testGroupComposite() {\n@@ -547,9 +554,9 @@ public Void apply(ResultSet resultSet) {\n                 \"{$project: {STATE: '$state', CITY: '$city'}}\",\n                 \"{$group: {_id: {STATE: '$STATE', CITY: '$CITY'}, C: {$sum: 1}}}\",\n                 \"{$project: {_id: 0, STATE: '$_id.STATE', CITY: '$_id.CITY', C: '$C'}}\",\n-                \"{$project: {C: 1, STATE: 1, CITY: 1}}\",\n                 \"{$sort: {C: -1}}\",\n-                \"{$limit: 2}\"));\n+                \"{$limit: 2}\",\n+                \"{$project: {C: 1, STATE: 1, CITY: 1}}\"));\n   }\n \n   @Test public void testDistinctCount() {\n@@ -615,7 +622,9 @@ public Void apply(ResultSet resultSet) {\n             + \"STATE=AL; CITY=ADAMSVILLE; ZERO=0\\n\")\n         .queryContains(\n             mongoChecker(\n-                \"{$project: {STATE: '$state', CITY: '$city', ZERO: {$ifNull: [null, 0]}}}\"));\n+                \"{$project: {CITY: '$city', STATE: '$state'}}\",\n+                \"{$sort: {STATE: 1, CITY: 1}}\",\n+                \"{$project: {STATE: 1, CITY: 1, ZERO: {$ifNull: [null, 0]}}}\"));\n   }\n \n   @Test public void testFilter() {", "filename": "mongodb/src/test/java/org/apache/calcite/test/MongoAdapterTest.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/ee0e824d1246bb3ac4da3bfd2757d390f8ca6583", "parent": "https://github.com/apache/calcite/commit/a6f65dc97ac578c886544b961cb4db40e90bcccf", "message": "[CALCITE-929] Calls to AbstractRelNode may result in NPE\n\nClose apache/incubator-calcite#158", "bug_id": "calcite_22", "file": [{"additions": 2, "raw_url": "https://github.com/apache/calcite/raw/ee0e824d1246bb3ac4da3bfd2757d390f8ca6583/core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java", "blob_url": "https://github.com/apache/calcite/blob/ee0e824d1246bb3ac4da3bfd2757d390f8ca6583/core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java", "sha": "0e7facdde8f4b91dcec8fd6a845aa2a711ca3554", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java?ref=ee0e824d1246bb3ac4da3bfd2757d390f8ca6583", "patch": "@@ -159,11 +159,11 @@ public String getCorrelVariable() {\n   }\n \n   public boolean isDistinct() {\n-    return RelMetadataQuery.areRowsUnique(this);\n+    return Boolean.TRUE.equals(RelMetadataQuery.areRowsUnique(this));\n   }\n \n   public boolean isKey(ImmutableBitSet columns) {\n-    return RelMetadataQuery.areColumnsUnique(this, columns);\n+    return Boolean.TRUE.equals(RelMetadataQuery.areColumnsUnique(this, columns));\n   }\n \n   public int getId() {", "filename": "core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/5a6b465b5b67cad20d309abe5d570e5311a03cbb", "parent": "https://github.com/apache/calcite/commit/8b0a22ee178b5f96cd2982ba75e8b36a2eb2ed5f", "message": "Fix NPE in CachingRelMetadataProvider if arg is null.", "bug_id": "calcite_23", "file": [{"additions": 11, "raw_url": "https://github.com/apache/calcite/raw/5a6b465b5b67cad20d309abe5d570e5311a03cbb/core/src/main/java/org/eigenbase/rel/metadata/CachingRelMetadataProvider.java", "blob_url": "https://github.com/apache/calcite/blob/5a6b465b5b67cad20d309abe5d570e5311a03cbb/core/src/main/java/org/eigenbase/rel/metadata/CachingRelMetadataProvider.java", "sha": "e3b8f23b8a2f1eaa194b9632af92694ca379322d", "changes": 12, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/eigenbase/rel/metadata/CachingRelMetadataProvider.java?ref=5a6b465b5b67cad20d309abe5d570e5311a03cbb", "patch": "@@ -39,6 +39,13 @@\n \n   private final RelOptPlanner planner;\n \n+  private static final Object NULL_SENTINEL = new Object() {\n+    @Override\n+    public String toString() {\n+      return \"{null}\";\n+    }\n+  };\n+\n   //~ Constructors -----------------------------------------------------------\n \n   public CachingRelMetadataProvider(\n@@ -93,7 +100,10 @@ public Object invoke(Object proxy, Method method, Object[] args)\n       builder.add(method);\n       builder.add(metadata.rel());\n       if (args != null) {\n-        builder.add(args);\n+        for (Object arg : args) {\n+          // Replace null values because ImmutableList does not allow them.\n+          builder.add(arg == null ? NULL_SENTINEL : arg);\n+        }\n       }\n       List<Object> key = builder.build();\n ", "filename": "core/src/main/java/org/eigenbase/rel/metadata/CachingRelMetadataProvider.java"}, {"additions": 23, "raw_url": "https://github.com/apache/calcite/raw/5a6b465b5b67cad20d309abe5d570e5311a03cbb/core/src/test/java/org/eigenbase/test/RelMetadataTest.java", "blob_url": "https://github.com/apache/calcite/blob/5a6b465b5b67cad20d309abe5d570e5311a03cbb/core/src/test/java/org/eigenbase/test/RelMetadataTest.java", "sha": "7b587fe1174b77eb63ac0db775843352bd628efc", "changes": 24, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/java/org/eigenbase/test/RelMetadataTest.java?ref=5a6b465b5b67cad20d309abe5d570e5311a03cbb", "patch": "@@ -27,6 +27,8 @@\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Iterables;\n \n+import org.hamcrest.CoreMatchers;\n+import org.hamcrest.Matcher;\n import org.junit.Ignore;\n import org.junit.Test;\n \n@@ -62,6 +64,10 @@\n \n   //~ Methods ----------------------------------------------------------------\n \n+  private static Matcher<? super Number> nearTo(Number v, Number epsilon) {\n+    return CoreMatchers.equalTo(v); // TODO: use epsilon\n+  }\n+\n   // ----------------------------------------------------------------------\n   // Tests for getPercentageOriginalRows\n   // ----------------------------------------------------------------------\n@@ -476,7 +482,7 @@ private void checkRelSelectivity(\n     RelNode rel =\n         convertSql(\n             \"select * from (select * from emp union all select * from emp) \"\n-            + \"where deptno = 10\");\n+                + \"where deptno = 10\");\n     checkRelSelectivity(rel, DEFAULT_EQUAL_SELECTIVITY);\n   }\n \n@@ -490,6 +496,22 @@ private void checkRelSelectivity(\n         DEFAULT_COMP_SELECTIVITY * DEFAULT_EQUAL_SELECTIVITY);\n   }\n \n+  /** Checks that we can cache a metadata request that includes a null\n+   * argument. */\n+  @Test public void testSelectivityAggCached() {\n+    RelNode rel =\n+        convertSql(\n+            \"select deptno, count(*) from emp where deptno > 10 \"\n+            + \"group by deptno having count(*) = 0\");\n+    rel.getCluster().setMetadataProvider(\n+        new CachingRelMetadataProvider(\n+            rel.getCluster().getMetadataProvider(),\n+            rel.getCluster().getPlanner()));\n+    Double result = RelMetadataQuery.getSelectivity(rel, null);\n+    assertThat(result,\n+        nearTo(DEFAULT_COMP_SELECTIVITY * DEFAULT_EQUAL_SELECTIVITY, EPSILON));\n+  }\n+\n   @Test public void testDistinctRowCountTable() {\n     // no unique key information is available so return null\n     RelNode rel = convertSql(\"select * from emp where deptno = 10\");", "filename": "core/src/test/java/org/eigenbase/test/RelMetadataTest.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/1580bd0fec62d836c9870edc339b0ab99d909cad", "parent": "https://github.com/apache/calcite/commit/2376ae4a876b421ee19c2b2a05a6bd1d306e442b", "message": "[CALCITE-821] Frameworks gives NPE when FrameworkConfig has no default schema", "bug_id": "calcite_24", "file": [{"additions": 3, "raw_url": "https://github.com/apache/calcite/raw/1580bd0fec62d836c9870edc339b0ab99d909cad/core/src/main/java/org/apache/calcite/tools/Frameworks.java", "blob_url": "https://github.com/apache/calcite/blob/1580bd0fec62d836c9870edc339b0ab99d909cad/core/src/main/java/org/apache/calcite/tools/Frameworks.java", "sha": "f3ebe1212b0ed5517660f8ba4f71061157956668", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/tools/Frameworks.java?ref=1580bd0fec62d836c9870edc339b0ab99d909cad", "patch": "@@ -33,6 +33,7 @@\n import org.apache.calcite.sql.parser.SqlParser;\n import org.apache.calcite.sql2rel.SqlRexConvertletTable;\n import org.apache.calcite.sql2rel.StandardConvertletTable;\n+import org.apache.calcite.util.Util;\n \n import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableList;\n@@ -107,7 +108,8 @@ public abstract R apply(RelOptCluster cluster, RelOptSchema relOptSchema,\n           public R apply(RelOptCluster cluster, RelOptSchema relOptSchema,\n               SchemaPlus rootSchema, CalciteServerStatement statement) {\n             final CalciteSchema schema =\n-                CalciteSchema.from(config.getDefaultSchema());\n+                CalciteSchema.from(\n+                    Util.first(config.getDefaultSchema(), rootSchema));\n             return action.apply(cluster, relOptSchema, schema.root().plus());\n           }\n         });", "filename": "core/src/main/java/org/apache/calcite/tools/Frameworks.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/88a6c5bdd2437eecabe05181c892957ff6b1ac5c", "parent": "https://github.com/apache/calcite/commit/ca871d3776646e94e6b1a1d61692c6d80777952f", "message": "Test case and NPE patch for [CALCITE-661] Remote fetch in Calcite JDBC driver (Yeong Wei)", "bug_id": "calcite_25", "file": [{"additions": 3, "raw_url": "https://github.com/apache/calcite/raw/88a6c5bdd2437eecabe05181c892957ff6b1ac5c/core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java", "blob_url": "https://github.com/apache/calcite/blob/88a6c5bdd2437eecabe05181c892957ff6b1ac5c/core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java", "sha": "455e55e21f7017a3b9ca21004807a0d60ab13de2", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java?ref=88a6c5bdd2437eecabe05181c892957ff6b1ac5c", "patch": "@@ -471,8 +471,9 @@ public MetaResultSet getTableTypes() {\n     final StatementHandle h = createStatement(ch);\n     final CalciteConnectionImpl calciteConnection = getConnection();\n     CalciteServerStatement statement = calciteConnection.server.getStatement(h);\n-    calciteConnection.parseQuery(sql, statement.createPrepareContext(),\n-        maxRowCount);\n+    h.signature =\n+        calciteConnection.parseQuery(sql, statement.createPrepareContext(),\n+            maxRowCount);\n     return h;\n   }\n ", "filename": "core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java"}, {"additions": 12, "raw_url": "https://github.com/apache/calcite/raw/88a6c5bdd2437eecabe05181c892957ff6b1ac5c/core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java", "blob_url": "https://github.com/apache/calcite/blob/88a6c5bdd2437eecabe05181c892957ff6b1ac5c/core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java", "sha": "c19216a48eeba9dfd65ec4603384a759f01d6320", "changes": 12, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java?ref=88a6c5bdd2437eecabe05181c892957ff6b1ac5c", "patch": "@@ -408,6 +408,18 @@ public void testAvaticaStatementException() throws Exception {\n     remoteConnection.createStatement().getMoreResults();\n   }\n \n+  @Test public void testRemotePreparedStatement() throws Exception {\n+    final PreparedStatement preparedStatement =\n+        remoteConnection.prepareStatement(\"select * from \\\"hr\\\".\\\"emps\\\"\");\n+    ResultSet resultSet = preparedStatement.executeQuery();\n+    int count = 0;\n+    while (resultSet.next()) {\n+      count += 1;\n+    }\n+    // TODO: implement remote fetch\n+    //assertTrue(count > 0);\n+  }\n+\n   /** A bunch of sample values of various types. */\n   private static final List<Object> SAMPLE_VALUES =\n       ImmutableList.<Object>of(false, true,", "filename": "core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/92cb0b67a21cd9bdd6ca622e416ef0d6c4a03e3c", "parent": "https://github.com/apache/calcite/commit/4c47a15cd156ef6b6aadbda63a896b065b44498c", "message": "Fix NPE using TRIM function with JDBC.\n\nSymbols have a null family.", "bug_id": "calcite_26", "file": [{"additions": 5, "raw_url": "https://github.com/apache/calcite/raw/92cb0b67a21cd9bdd6ca622e416ef0d6c4a03e3c/core/src/main/java/net/hydromatic/optiq/impl/jdbc/JdbcImplementor.java", "blob_url": "https://github.com/apache/calcite/blob/92cb0b67a21cd9bdd6ca622e416ef0d6c4a03e3c/core/src/main/java/net/hydromatic/optiq/impl/jdbc/JdbcImplementor.java", "sha": "b565a496a344e2fad30a98e1849cd764b0b2c2d5", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/net/hydromatic/optiq/impl/jdbc/JdbcImplementor.java?ref=92cb0b67a21cd9bdd6ca622e416ef0d6c4a03e3c", "patch": "@@ -30,6 +30,7 @@\n import org.eigenbase.sql.fun.SqlStdOperatorTable;\n import org.eigenbase.sql.parser.SqlParserPos;\n import org.eigenbase.sql.type.BasicSqlType;\n+import org.eigenbase.sql.type.SqlTypeName;\n import org.eigenbase.sql.validate.SqlValidatorUtil;\n import org.eigenbase.util.Pair;\n import org.eigenbase.util.Util;\n@@ -117,6 +118,10 @@ SqlNode toSql(RexProgram program, RexNode rex) {\n \n       case LITERAL:\n         final RexLiteral literal = (RexLiteral) rex;\n+        if (literal.getTypeName().equals(SqlTypeName.SYMBOL)) {\n+          return SqlLiteral\n+              .createSymbol((SqlLiteral.SqlSymbol) literal.getValue(), POS);\n+        }\n         switch (literal.getTypeName().getFamily()) {\n         case CHARACTER:\n           return SqlLiteral.createCharString((String) literal.getValue2(), POS);", "filename": "core/src/main/java/net/hydromatic/optiq/impl/jdbc/JdbcImplementor.java"}, {"additions": 14, "raw_url": "https://github.com/apache/calcite/raw/92cb0b67a21cd9bdd6ca622e416ef0d6c4a03e3c/core/src/test/java/net/hydromatic/optiq/test/JdbcTest.java", "blob_url": "https://github.com/apache/calcite/blob/92cb0b67a21cd9bdd6ca622e416ef0d6c4a03e3c/core/src/test/java/net/hydromatic/optiq/test/JdbcTest.java", "sha": "c117345b55f9eacb338ce118890dcd5cbd64578f", "changes": 14, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/java/net/hydromatic/optiq/test/JdbcTest.java?ref=92cb0b67a21cd9bdd6ca622e416ef0d6c4a03e3c", "patch": "@@ -2183,6 +2183,20 @@ private void checkNullableTimestamp(OptiqAssert.Config config) {\n     predicate(\"\\\"name\\\" not in ('a', 'b', null) and \\\"name\\\" is not null\");\n   }\n \n+  @Test public void testTrim() {\n+    OptiqAssert.that()\n+        .withModel(FOODMART_MODEL)\n+        .query(\"select trim(\\\"lname\\\") as \\\"lname\\\" \"\n+            + \"from \\\"customer\\\" where \\\"lname\\\" = 'Nowmer'\")\n+        .returns(\"lname=Nowmer\\n\");\n+\n+    OptiqAssert.that()\n+        .withModel(FOODMART_MODEL)\n+        .query(\"select trim(leading 'N' from \\\"lname\\\") as \\\"lname\\\" \"\n+            + \"from \\\"customer\\\" where \\\"lname\\\" = 'Nowmer'\")\n+        .returns(\"lname=owmer\\n\");\n+  }\n+\n   private OptiqAssert.AssertQuery predicate(String foo) {\n     return OptiqAssert.that()\n         .with(OptiqAssert.Config.REGULAR)", "filename": "core/src/test/java/net/hydromatic/optiq/test/JdbcTest.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/387bee8b616623d91103751e8afe6d7c21842446", "parent": "https://github.com/apache/calcite/commit/5b0e70c7457d23f7cf5ddb74c78395f5ad45476c", "message": "Fix bug where non-existent directory would give NPE. Instead print warning.", "bug_id": "calcite_27", "file": [{"additions": 4, "raw_url": "https://github.com/apache/calcite/raw/387bee8b616623d91103751e8afe6d7c21842446/src/main/java/net/hydromatic/optiq/impl/csv/CsvSchema.java", "blob_url": "https://github.com/apache/calcite/blob/387bee8b616623d91103751e8afe6d7c21842446/src/main/java/net/hydromatic/optiq/impl/csv/CsvSchema.java", "sha": "8640228582add0586a43a4fb0edc66e94d4bd5a7", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/src/main/java/net/hydromatic/optiq/impl/csv/CsvSchema.java?ref=387bee8b616623d91103751e8afe6d7c21842446", "patch": "@@ -67,6 +67,10 @@ public boolean accept(File dir, String name) {\n             return name.endsWith(\".csv\");\n           }\n         });\n+    if (files == null) {\n+      System.out.println(\"directory \" + directoryFile + \" not found\");\n+      files = new File[0];\n+    }\n     for (File file : files) {\n       String tableName = file.getName();\n       if (tableName.endsWith(\".csv\")) {", "filename": "src/main/java/net/hydromatic/optiq/impl/csv/CsvSchema.java"}, {"additions": 29, "raw_url": "https://github.com/apache/calcite/raw/387bee8b616623d91103751e8afe6d7c21842446/src/test/java/net/hydromatic/optiq/test/CsvTest.java", "blob_url": "https://github.com/apache/calcite/blob/387bee8b616623d91103751e8afe6d7c21842446/src/test/java/net/hydromatic/optiq/test/CsvTest.java", "sha": "a7869091924d39c6afc615d3e36e89d7f396cdad", "changes": 29, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/src/test/java/net/hydromatic/optiq/test/CsvTest.java?ref=387bee8b616623d91103751e8afe6d7c21842446", "patch": "@@ -71,6 +71,35 @@ private void close(Connection connection, Statement statement) {\n     connection.close();\n   }\n \n+  /** Tests an inline schema with a non-existent directory. */\n+  @Test public void testBadDirectory() throws SQLException {\n+    Properties info = new Properties();\n+    info.put(\"model\",\n+        \"inline:\"\n+        + \"{\\n\"\n+        + \"  version: '1.0',\\n\"\n+        + \"   schemas: [\\n\"\n+        + \"     {\\n\"\n+        + \"       type: 'custom',\\n\"\n+        + \"       name: 'bad',\\n\"\n+        + \"       factory: 'net.hydromatic.optiq.impl.csv.CsvSchemaFactory',\\n\"\n+        + \"       operand: {\\n\"\n+        + \"         directory: '/does/not/exist'\\n\"\n+        + \"       }\\n\"\n+        + \"     }\\n\"\n+        + \"   ]\\n\"\n+        + \"}\");\n+\n+    Connection connection =\n+        DriverManager.getConnection(\"jdbc:optiq:\", info);\n+    // must print \"directory ... not found\" to stdout, but not fail\n+    ResultSet tables =\n+        connection.getMetaData().getTables(null, null, null, null);\n+    tables.next();\n+    tables.close();\n+    connection.close();\n+  }\n+\n   /**\n    * Reads from a table.\n    */", "filename": "src/test/java/net/hydromatic/optiq/test/CsvTest.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/fcdb825e892d39c7f2157e05a68add24bddc82db", "parent": "https://github.com/apache/calcite/commit/6bf299263c39c353e600c4285f3291f4462d5236", "message": "Fix a type-cast issue in DatabaseMetaData.getColumns(), and an NPE handling a switched CASE expression.", "bug_id": "calcite_28", "file": [{"additions": 30, "raw_url": "https://github.com/apache/calcite/raw/fcdb825e892d39c7f2157e05a68add24bddc82db/src/main/java/net/hydromatic/optiq/jdbc/Meta.java", "blob_url": "https://github.com/apache/calcite/blob/fcdb825e892d39c7f2157e05a68add24bddc82db/src/main/java/net/hydromatic/optiq/jdbc/Meta.java", "sha": "882a39f1b440373c6a7b02f8c96112e84a9161cc", "changes": 32, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/calcite/contents/src/main/java/net/hydromatic/optiq/jdbc/Meta.java?ref=fcdb825e892d39c7f2157e05a68add24bddc82db", "patch": "@@ -24,12 +24,13 @@\n import net.hydromatic.optiq.*;\n import net.hydromatic.optiq.impl.TableInSchemaImpl;\n import net.hydromatic.optiq.impl.java.MapSchema;\n-\n import net.hydromatic.optiq.runtime.*;\n \n import org.eigenbase.reltype.*;\n import org.eigenbase.util.Pair;\n \n+import com.google.common.collect.ImmutableMap;\n+\n import java.lang.reflect.Field;\n import java.sql.*;\n import java.sql.Types;\n@@ -451,6 +452,28 @@ public String getName() {\n   }\n \n   private static class NamedFieldGetter {\n+    private static final Map<Class, Pair<Integer, String>> MAP =\n+        ImmutableMap.<Class, Pair<Integer, String>>builder()\n+            .put(boolean.class, Pair.of(Types.BOOLEAN, \"BOOLEAN\"))\n+            .put(Boolean.class, Pair.of(Types.BOOLEAN, \"BOOLEAN\"))\n+            .put(byte.class, Pair.of(Types.TINYINT, \"TINYINT\"))\n+            .put(Byte.class, Pair.of(Types.TINYINT, \"TINYINT\"))\n+            .put(short.class, Pair.of(Types.SMALLINT, \"SMALLINT\"))\n+            .put(Short.class, Pair.of(Types.SMALLINT, \"SMALLINT\"))\n+            .put(int.class, Pair.of(Types.INTEGER, \"INTEGER\"))\n+            .put(Integer.class, Pair.of(Types.INTEGER, \"INTEGER\"))\n+            .put(long.class, Pair.of(Types.BIGINT, \"BIGINT\"))\n+            .put(Long.class, Pair.of(Types.BIGINT, \"BIGINT\"))\n+            .put(float.class, Pair.of(Types.FLOAT, \"FLOAT\"))\n+            .put(Float.class, Pair.of(Types.FLOAT, \"FLOAT\"))\n+            .put(double.class, Pair.of(Types.DOUBLE, \"DOUBLE\"))\n+            .put(Double.class, Pair.of(Types.DOUBLE, \"DOUBLE\"))\n+            .put(String.class, Pair.of(Types.VARCHAR, \"VARCHAR\"))\n+            .put(java.sql.Date.class, Pair.of(Types.DATE, \"DATE\"))\n+            .put(Time.class, Pair.of(Types.TIME, \"TIME\"))\n+            .put(Timestamp.class, Pair.of(Types.TIMESTAMP, \"TIMESTAMP\"))\n+            .build();\n+\n     private final List<Field> fields = new ArrayList<Field>();\n     private final List<ColumnMetaData> columnNames =\n         new ArrayList<ColumnMetaData>();\n@@ -465,19 +488,24 @@ public NamedFieldGetter(Class clazz, String... names) {\n         } catch (NoSuchFieldException e) {\n           throw new RuntimeException(e);\n         }\n+        Pair<Integer, String> pair = lookupType(field.getType());\n         columnNames.add(\n             new ColumnMetaData(\n                 index, false, true, false, false,\n                 Primitive.is(field.getType())\n                     ? DatabaseMetaData.columnNullable\n                     : DatabaseMetaData.columnNoNulls,\n                 true, -1, name, name, null,\n-                0, 0, null, null, Types.VARCHAR, \"VARCHAR\", true,\n+                0, 0, null, null, pair.left, pair.right, true,\n                 false, false, null, field.getType()));\n         fields.add(field);\n       }\n     }\n \n+    private Pair<Integer, String> lookupType(Class<?> type) {\n+      return MAP.get(type);\n+    }\n+\n     private String uncamel(String name) {\n       StringBuilder buf = new StringBuilder();\n       int nextUpper = -1;", "filename": "src/main/java/net/hydromatic/optiq/jdbc/Meta.java"}, {"additions": 4, "raw_url": "https://github.com/apache/calcite/raw/fcdb825e892d39c7f2157e05a68add24bddc82db/src/main/java/org/eigenbase/sql2rel/SqlToRelConverter.java", "blob_url": "https://github.com/apache/calcite/blob/fcdb825e892d39c7f2157e05a68add24bddc82db/src/main/java/org/eigenbase/sql2rel/SqlToRelConverter.java", "sha": "47a79e1fd7cad23ed6d9cb8a24e37eb5a25bf610", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/calcite/contents/src/main/java/org/eigenbase/sql2rel/SqlToRelConverter.java?ref=fcdb825e892d39c7f2157e05a68add24bddc82db", "patch": "@@ -4652,7 +4652,10 @@ public Void visit(SqlCall call)\n                 return null;\n             } else {\n                 for (SqlNode operand : call.operands) {\n-                    operand.accept(this);\n+                    // Operands are occasionally null, e.g. switched CASE arg 0.\n+                    if (operand != null) {\n+                        operand.accept(this);\n+                    }\n                 }\n             }\n             return null;", "filename": "src/main/java/org/eigenbase/sql2rel/SqlToRelConverter.java"}, {"additions": 28, "raw_url": "https://github.com/apache/calcite/raw/fcdb825e892d39c7f2157e05a68add24bddc82db/src/test/java/net/hydromatic/optiq/test/JdbcTest.java", "blob_url": "https://github.com/apache/calcite/blob/fcdb825e892d39c7f2157e05a68add24bddc82db/src/test/java/net/hydromatic/optiq/test/JdbcTest.java", "sha": "9ea8ed5b163dd2687a1e3619387c99fed41c828c", "changes": 28, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/src/test/java/net/hydromatic/optiq/test/JdbcTest.java?ref=fcdb825e892d39c7f2157e05a68add24bddc82db", "patch": "@@ -435,6 +435,14 @@ public void onStatementClose(OptiqStatement statement) {\n     DatabaseMetaData metaData = connection.getMetaData();\n     ResultSet resultSet = metaData.getColumns(null, null, null, null);\n     assertTrue(resultSet.next()); // there's something\n+    String name = resultSet.getString(4);\n+    int type = resultSet.getInt(5);\n+    String typeName = resultSet.getString(6);\n+    int columnSize = resultSet.getInt(7);\n+    int decimalDigits = resultSet.getInt(9);\n+    int numPrecRadix = resultSet.getInt(10);\n+    int charOctetLength = resultSet.getInt(16);\n+    String isNullable = resultSet.getString(18);\n     resultSet.close();\n     connection.close();\n   }\n@@ -463,6 +471,16 @@ public void onStatementClose(OptiqStatement statement) {\n     connection.close();\n   }\n \n+  /** Tests some queries that have expedited processing because connection pools\n+   * like to use them to check whether the connection is alive.\n+   */\n+  @Test public void testSimple() {\n+    OptiqAssert.assertThat()\n+        .with(OptiqAssert.Config.FOODMART_CLONE)\n+        .query(\"SELECT 1\")\n+        .returns(\"EXPR$0=1\\n\");\n+  }\n+\n   @Test public void testCloneSchema()\n       throws ClassNotFoundException, SQLException {\n     final OptiqConnection connection = JdbcTest.getConnection(null, false);\n@@ -533,6 +551,16 @@ public void onStatementClose(OptiqStatement statement) {\n             + \"\\n\");\n   }\n \n+  @Test public void testOrderByCase() {\n+    OptiqAssert.assertThat()\n+        .with(OptiqAssert.Config.FOODMART_CLONE)\n+        .query(\n+            \"select \\\"time_by_day\\\".\\\"the_year\\\" as \\\"c0\\\" from \\\"time_by_day\\\" as \\\"time_by_day\\\" group by \\\"time_by_day\\\".\\\"the_year\\\" order by CASE WHEN \\\"time_by_day\\\".\\\"the_year\\\" IS NULL THEN 1 ELSE 0 END, \\\"time_by_day\\\".\\\"the_year\\\" ASC\")\n+        .returns(\n+            \"c0=1997\\n\"\n+            + \"c0=1998\\n\");\n+  }\n+\n   private static final String[] queries = {\n       \"select count(*) from (select 1 as \\\"c0\\\" from \\\"salary\\\" as \\\"salary\\\") as \\\"init\\\"\",\n       \"EXPR$0=21252\\n\",", "filename": "src/test/java/net/hydromatic/optiq/test/JdbcTest.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/86f5c4e2ff3ba239589cac9d9a961994eef3279b", "parent": "https://github.com/apache/calcite/commit/160433c8eee622ce7e495b3d44537af60d9bc472", "message": "Fix NPE when executing a DatabaseMetaData method that returns the empty set (e.g. getPrimaryKeys).", "bug_id": "calcite_29", "file": [{"additions": 2, "raw_url": "https://github.com/apache/calcite/raw/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/main/java/net/hydromatic/optiq/jdbc/Meta.java", "blob_url": "https://github.com/apache/calcite/blob/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/main/java/net/hydromatic/optiq/jdbc/Meta.java", "sha": "0d8359bff8b627fa1621f5df45bd25e30beca285", "changes": 6, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/calcite/contents/src/main/java/net/hydromatic/optiq/jdbc/Meta.java?ref=86f5c4e2ff3ba239589cac9d9a961994eef3279b", "patch": "@@ -128,17 +128,15 @@ private ResultSet createResultSet(\n         final NamedFieldGetter columnGetter)\n     {\n         try {\n-            OptiqResultSet x = connection.driver.factory.newResultSet(\n+            return connection.driver.factory.newResultSet(\n                 connection.createStatement(),\n                 columnGetter.columnNames,\n                 new Function0<Cursor>() {\n                     public Cursor apply() {\n                         return columnGetter.cursor(\n                             ((Enumerable) enumerable).enumerator());\n                     }\n-                });\n-            x.execute();\n-            return x;\n+                }).execute();\n         } catch (SQLException e) {\n             throw new RuntimeException(e);\n         }", "filename": "src/main/java/net/hydromatic/optiq/jdbc/Meta.java"}, {"additions": 1, "raw_url": "https://github.com/apache/calcite/raw/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/main/java/net/hydromatic/optiq/jdbc/OptiqDatabaseMetaData.java", "blob_url": "https://github.com/apache/calcite/blob/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/main/java/net/hydromatic/optiq/jdbc/OptiqDatabaseMetaData.java", "sha": "72efc5311b07adbcbfeca14f1b06172acbc5f348", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/calcite/contents/src/main/java/net/hydromatic/optiq/jdbc/OptiqDatabaseMetaData.java?ref=86f5c4e2ff3ba239589cac9d9a961994eef3279b", "patch": "@@ -882,7 +882,7 @@ public boolean next() {\n                             }\n                         };\n                     }\n-                });\n+                }).execute();\n         } catch (SQLException e) {\n             throw new RuntimeException(e);\n         }", "filename": "src/main/java/net/hydromatic/optiq/jdbc/OptiqDatabaseMetaData.java"}, {"additions": 2, "raw_url": "https://github.com/apache/calcite/raw/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/main/java/net/hydromatic/optiq/jdbc/OptiqResultSet.java", "blob_url": "https://github.com/apache/calcite/blob/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/main/java/net/hydromatic/optiq/jdbc/OptiqResultSet.java", "sha": "bbcc7efb6d96086ee512d0061d451419250cc36b", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/calcite/contents/src/main/java/net/hydromatic/optiq/jdbc/OptiqResultSet.java?ref=86f5c4e2ff3ba239589cac9d9a961994eef3279b", "patch": "@@ -130,7 +130,7 @@ void cancel() {\n      * constructor occurs while the statement is locked, to make sure that\n      * execute/cancel don't happen at the same time.</p>\n      */\n-    void execute() {\n+    OptiqResultSet execute() {\n         // Call driver's callback. It is permitted to throw a RuntimeException.\n         final boolean autoTemp =\n             ConnectionProperty.AUTO_TEMP.getBoolean(\n@@ -151,6 +151,7 @@ public void toBeCompleted() {\n         for (Map.Entry<String, Integer> entry : columnNameMap.entrySet()) {\n             accessorMap.put(entry.getKey(), accessorList.get(entry.getValue()));\n         }\n+        return this;\n     }\n \n     public boolean next() throws SQLException {", "filename": "src/main/java/net/hydromatic/optiq/jdbc/OptiqResultSet.java"}, {"additions": 23, "raw_url": "https://github.com/apache/calcite/raw/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/test/java/net/hydromatic/optiq/test/JdbcFrontJdbcBackTest.java", "blob_url": "https://github.com/apache/calcite/blob/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/test/java/net/hydromatic/optiq/test/JdbcFrontJdbcBackTest.java", "sha": "7f5b94d21aef890f8643b4cb9fa9aab453ba8539", "changes": 23, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/src/test/java/net/hydromatic/optiq/test/JdbcFrontJdbcBackTest.java?ref=86f5c4e2ff3ba239589cac9d9a961994eef3279b", "patch": "@@ -127,6 +127,29 @@ public Object apply(OptiqConnection a0) {\n             );\n     }\n \n+    /** Tests a JDBC method known to be not implemented (as it happens,\n+     * {@link java.sql.DatabaseMetaData#getPrimaryKeys}) that therefore uses\n+     * empty result set. */\n+    public void testEmpty() throws Exception {\n+        assertThat()\n+            .with(OptiqAssert.Config.JDBC_FOODMART2)\n+            .doWithConnection(\n+                new Function1<OptiqConnection, Object>() {\n+                    public Object apply(OptiqConnection a0) {\n+                        try {\n+                            ResultSet rset =\n+                                a0.getMetaData().getPrimaryKeys(\n+                                    null, null, \"sales_fact_1997\");\n+                            assertFalse(rset.next());\n+                        } catch (SQLException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                        return null;\n+                    }\n+                }\n+            );\n+    }\n+\n     public void testCase() {\n         assertThat()\n             .with(OptiqAssert.Config.JDBC_FOODMART2)", "filename": "src/test/java/net/hydromatic/optiq/test/JdbcFrontJdbcBackTest.java"}], "repo": "calcite"}, {"commit": "https://github.com/apache/calcite/commit/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb", "parent": "https://github.com/apache/calcite/commit/47e0e7c952aed22dd237529bb459a59580034f91", "message": "[CALCITE-980] Fix AND and OR implementation in Enumerable convention\n\nPreviously it could fail with NPE or return wrong result\n\nfixes #169", "bug_id": "calcite_30", "file": [{"additions": 55, "raw_url": "https://github.com/apache/calcite/raw/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java", "blob_url": "https://github.com/apache/calcite/blob/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java", "sha": "32c043ca28e4d7c0d1f76f8114f8772d8ac25d8c", "changes": 91, "status": "modified", "deletions": 36, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java?ref=963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb", "patch": "@@ -55,10 +55,8 @@\n import org.apache.calcite.util.BuiltInMethod;\n import org.apache.calcite.util.Util;\n \n-import com.google.common.base.Function;\n import com.google.common.base.Supplier;\n import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n \n import java.lang.reflect.Constructor;\n@@ -428,22 +426,38 @@ public Expression implement(\n       return new CallImplementor() {\n         public Expression implement(\n             RexToLixTranslator translator, RexCall call, NullAs nullAs) {\n+          assert call.getOperator() == AND\n+              : \"AND null semantics is supported only for AND operator. Actual operator is \"\n+              + String.valueOf(call.getOperator());\n           final RexCall call2 = call2(false, translator, call);\n-          final NullAs nullAs2 = nullAs == NullAs.TRUE ? NullAs.NULL : nullAs;\n-          final List<Expression> expressions =\n-              translator.translateList(call2.getOperands(), nullAs2);\n           switch (nullAs) {\n-          case NOT_POSSIBLE:\n+          case NOT_POSSIBLE: // Just foldAnd\n           case TRUE:\n+            // AND call should return false iff has FALSEs,\n+            // thus if we convert nulls to true then no harm is made\n+          case FALSE:\n+            // AND call should return false iff has FALSEs or has NULLs,\n+            // thus if we convert nulls to false, no harm is made\n+            final List<Expression> expressions =\n+                translator.translateList(call2.getOperands(), nullAs);\n             return Expressions.foldAnd(expressions);\n+          case NULL:\n+          case IS_NULL:\n+          case IS_NOT_NULL:\n+            final List<Expression> nullAsTrue =\n+                translator.translateList(call2.getOperands(), NullAs.TRUE);\n+            final List<Expression> nullAsIsNull =\n+                translator.translateList(call2.getOperands(), NullAs.IS_NULL);\n+            Expression hasFalse = Expressions.not(Expressions.foldAnd(nullAsTrue));\n+            Expression hasNull = Expressions.foldOr(nullAsIsNull);\n+            Expression result = nullAs.handle(\n+                Expressions.condition(hasFalse, BOXED_FALSE_EXPR,\n+                    Expressions.condition(hasNull, NULL_EXPR, BOXED_TRUE_EXPR)));\n+            return result;\n+          default:\n+            throw new IllegalArgumentException(\n+                \"Unknown nullAs when implementing AND: \" + nullAs);\n           }\n-          return Expressions.foldAnd(\n-              Lists.transform(expressions,\n-                  new Function<Expression, Expression>() {\n-                    public Expression apply(Expression e) {\n-                      return nullAs2.handle(e);\n-                    }\n-                  }));\n         }\n       };\n     case OR:\n@@ -456,34 +470,39 @@ public Expression apply(Expression e) {\n       //   : Boolean.TRUE;\n       return new CallImplementor() {\n         public Expression implement(\n-            RexToLixTranslator translator, RexCall call, NullAs nullAs) {\n+            RexToLixTranslator translator, RexCall call, final NullAs nullAs) {\n+          assert call.getOperator() == OR\n+              : \"OR null semantics is supported only for OR operator. Actual operator is \"\n+              + String.valueOf(call.getOperator());\n           final RexCall call2 = call2(harmonize, translator, call);\n-          final NullAs nullAs2 = nullAs == NullAs.TRUE ? NullAs.NULL : nullAs;\n-          final List<Expression> expressions =\n-              translator.translateList(call2.getOperands(), nullAs2);\n           switch (nullAs) {\n-          case NOT_POSSIBLE:\n+          case NOT_POSSIBLE: // Just foldOr\n+          case TRUE:\n+            // This should return false iff all arguments are FALSE,\n+            // thus we convert nulls to TRUE and foldOr\n           case FALSE:\n+            // This should return true iff has TRUE arguments,\n+            // thus we convert nulls to FALSE and foldOr\n+            final List<Expression> expressions =\n+                translator.translateList(call2.getOperands(), nullAs);\n             return Expressions.foldOr(expressions);\n+          case NULL:\n+          case IS_NULL:\n+          case IS_NOT_NULL:\n+            final List<Expression> nullAsFalse =\n+                translator.translateList(call2.getOperands(), NullAs.FALSE);\n+            final List<Expression> nullAsIsNull =\n+                translator.translateList(call2.getOperands(), NullAs.IS_NULL);\n+            Expression hasTrue = Expressions.foldOr(nullAsFalse);\n+            Expression hasNull = Expressions.foldOr(nullAsIsNull);\n+            Expression result = nullAs.handle(\n+                Expressions.condition(hasTrue, BOXED_TRUE_EXPR,\n+                    Expressions.condition(hasNull, NULL_EXPR, BOXED_FALSE_EXPR)));\n+            return result;\n+          default:\n+            throw new IllegalArgumentException(\n+                \"Unknown nullAs when implementing OR: \" + nullAs);\n           }\n-          final Expression t0 = expressions.get(0);\n-          final Expression t1 = expressions.get(1);\n-          if (!nullable(call2, 0) && !nullable(call2, 1)) {\n-            return Expressions.orElse(t0, t1);\n-          }\n-          return optimize(\n-              Expressions.condition(\n-                  Expressions.equal(t0, NULL_EXPR),\n-                  Expressions.condition(\n-                      Expressions.orElse(\n-                          Expressions.equal(t1, NULL_EXPR),\n-                          Expressions.not(t1)),\n-                      NULL_EXPR,\n-                      BOXED_TRUE_EXPR),\n-                  Expressions.condition(\n-                      Expressions.not(t0),\n-                      t1,\n-                      BOXED_TRUE_EXPR)));\n         }\n       };\n     case NOT:", "filename": "core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java"}, {"additions": 51, "raw_url": "https://github.com/apache/calcite/raw/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/test/java/org/apache/calcite/test/JdbcTest.java", "blob_url": "https://github.com/apache/calcite/blob/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/test/java/org/apache/calcite/test/JdbcTest.java", "sha": "4c203d671674ae39c5eb46294a98efc5ad3fd725", "changes": 51, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/java/org/apache/calcite/test/JdbcTest.java?ref=963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb", "patch": "@@ -4277,6 +4277,57 @@ private void startOfGroupStep3(String startOfGroup) {\n             \"empid=100; deptno=10; name=Bill; salary=10000.0; commission=1000\\n\");\n   }\n \n+  /** Tests CALCITE-980: Not (C='a' or C='b') causes NPE */\n+  @Test public void testWhereOrAndNullable() {\n+    /* Generates the following code:\n+       public boolean moveNext() {\n+         while (inputEnumerator.moveNext()) {\n+           final Object[] current = (Object[]) inputEnumerator.current();\n+           final String inp0_ = current[0] == null ? (String) null : current[0].toString();\n+           final String inp1_ = current[1] == null ? (String) null : current[1].toString();\n+           if (inp0_ != null && org.apache.calcite.runtime.SqlFunctions.eq(inp0_, \"a\")\n+               && (inp1_ != null && org.apache.calcite.runtime.SqlFunctions.eq(inp1_, \"b\"))\n+               || inp0_ != null && org.apache.calcite.runtime.SqlFunctions.eq(inp0_, \"b\")\n+               && (inp1_ != null && org.apache.calcite.runtime.SqlFunctions.eq(inp1_, \"c\"))) {\n+             return true;\n+           }\n+         }\n+         return false;\n+       }\n+     */\n+    CalciteAssert.that()\n+        .with(CalciteAssert.Config.REGULAR)\n+        .query(\"with tst(c) as (values('a'),('b'),('c'),(cast(null as varchar)))\"\n+            + \" select u.c u, v.c v from tst u, tst v where ((u.c = 'a' and v.c = 'b') or (u.c = 'b' and v.c = 'c'))\")\n+        .returnsUnordered(\n+            \"U=a; V=b\",\n+            \"U=b; V=c\");\n+  }\n+\n+  /** Tests CALCITE-980: different flavors of boolean logic */\n+  @Test public void testBooleansInWhere() throws Exception {\n+    checkRun(\"sql/conditions.oq\");\n+  }\n+\n+  /** Tests CALCITE-980: different flavors of boolean logic */\n+  @Ignore(\"Fails with org.codehaus.commons.compiler.CompileException: Line 16, Column 112:\"\n+      + \" Cannot compare types \\\"int\\\" and \\\"java.lang.String\\\"\\n\")\n+  @Test public void testComparingIntAndString() throws Exception {\n+    // if (((...test.ReflectiveSchemaTest.IntAndString) inputEnumerator.current()).id == \"T\")\n+\n+    CalciteAssert.that()\n+        .withSchema(\"s\",\n+            new ReflectiveSchema(\n+                new ReflectiveSchemaTest.CatchallSchema()))\n+        .query(\"select a.\\\"value\\\", b.\\\"value\\\"\\n\"\n+            + \"  from \\\"bools\\\" a\\n\"\n+            + \"     , \\\"bools\\\" b\\n\"\n+            + \" where b.\\\"value\\\" = 'T'\\n\"\n+            + \" order by 1, 2\")\n+        .returnsUnordered(\n+            \"should fail with 'not a number' sql error while converting text to number\");\n+  }\n+\n   /** Tests the LIKE operator. */\n   @Test public void testLike() {\n     CalciteAssert.that()", "filename": "core/src/test/java/org/apache/calcite/test/JdbcTest.java"}, {"additions": 18, "raw_url": "https://github.com/apache/calcite/raw/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/test/java/org/apache/calcite/test/ReflectiveSchemaTest.java", "blob_url": "https://github.com/apache/calcite/blob/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/test/java/org/apache/calcite/test/ReflectiveSchemaTest.java", "sha": "0ebd616ac5395fed40c4c3f1d9969ffa41a9bd94", "changes": 18, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/java/org/apache/calcite/test/ReflectiveSchemaTest.java?ref=963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb", "patch": "@@ -798,6 +798,17 @@ public boolean apply(Field v1) {\n     public final BitSet bitSet = new BitSet(0);\n   }\n \n+  /** Table that has integer and string fields */\n+  public static class IntAndString {\n+    public final int id;\n+    public final String value;\n+\n+    public IntAndString(int id, String value) {\n+      this.id = id;\n+      this.value = value;\n+    }\n+  }\n+\n   /** Object whose fields are relations. Called \"catch-all\" because it's OK\n    * if tests add new fields. */\n   public static class CatchallSchema {\n@@ -841,6 +852,13 @@ public boolean apply(Field v1) {\n \n     public final IntHolder[] primesCustomBoxed =\n         new IntHolder[]{new IntHolder(1), new IntHolder(3), new IntHolder(5)};\n+\n+    public final IntAndString[] nullables = new IntAndString[] {\n+      new IntAndString(1, \"A\"), new IntAndString(2, \"B\"), new IntAndString(2, \"C\"),\n+      new IntAndString(3, null)};\n+\n+    public final IntAndString[] bools = new IntAndString[] {\n+      new IntAndString(1, \"T\"), new IntAndString(2, \"F\"), new IntAndString(3, null)};\n   }\n \n   /**", "filename": "core/src/test/java/org/apache/calcite/test/ReflectiveSchemaTest.java"}, {"additions": 259, "raw_url": "https://github.com/apache/calcite/raw/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/test/resources/sql/conditions.oq", "blob_url": "https://github.com/apache/calcite/blob/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/test/resources/sql/conditions.oq", "sha": "f7d7f51c7450c1f26d7423b6e9ec62cd9342ed50", "changes": 259, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/resources/sql/conditions.oq?ref=963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb", "patch": "@@ -0,0 +1,259 @@\n+# conditions.oq - conditions\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to you under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+!use catchall\n+!set outputformat mysql\n+\n+# OR test\n+\n+with tmp(a, b) as (\n+  values (1, 1), (1, 0), (1, cast(null as int))\n+       , (0, 1), (0, 0), (0, cast(null as int))\n+       , (cast(null as int), 1), (cast(null as int), 0), (cast(null as int), cast(null as int)))\n+select *\n+  from tmp\n+ where a = 1 or b = 1\n+ order by 1, 2;\n+\n++---+---+\n+| A | B |\n++---+---+\n+| 0 | 1 |\n+| 1 | 0 |\n+| 1 | 1 |\n+| 1 |   |\n+|   | 1 |\n++---+---+\n+(5 rows)\n+\n+!ok\n+\n+with tmp(a, b) as (\n+  values (1, 1), (1, 0), (1, cast(null as int))\n+       , (0, 1), (0, 0), (0, cast(null as int))\n+       , (cast(null as int), 1), (cast(null as int), 0), (cast(null as int), cast(null as int)))\n+select *\n+  from tmp\n+ where not (a = 1 or b = 1)\n+ order by 1, 2;\n+\n++---+---+\n+| A | B |\n++---+---+\n+| 0 | 0 |\n++---+---+\n+(1 row)\n+\n+!ok\n+\n+# AND test\n+\n+with tmp(a, b) as (\n+  values (1, 1), (1, 0), (1, cast(null as int))\n+       , (0, 1), (0, 0), (0, cast(null as int))\n+       , (cast(null as int), 1), (cast(null as int), 0), (cast(null as int), cast(null as int)))\n+select *\n+  from tmp\n+ where a = 1 AND b = 1\n+ order by 1, 2;\n+\n++---+---+\n+| A | B |\n++---+---+\n+| 1 | 1 |\n++---+---+\n+(1 row)\n+\n+!ok\n+\n+with tmp(a, b) as (\n+  values (1, 1), (1, 0), (1, cast(null as int))\n+       , (0, 1), (0, 0), (0, cast(null as int))\n+       , (cast(null as int), 1), (cast(null as int), 0), (cast(null as int), cast(null as int)))\n+select *\n+  from tmp\n+ where not (a = 1 AND b = 1)\n+ order by 1, 2;\n+\n++---+---+\n+| A | B |\n++---+---+\n+| 0 | 0 |\n+| 0 | 1 |\n+| 0 |   |\n+| 1 | 0 |\n+|   | 0 |\n++---+---+\n+(5 rows)\n+\n+!ok\n+\n+# Test cases for CALCITE-980\n+\n+select \"value\" from \"nullables\" a where \"value\" = 'A' or \"value\" = 'B' order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| A     |\n+| B     |\n++-------+\n+(2 rows)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a where not (\"value\" = 'A' or \"value\" = 'B') order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| C     |\n++-------+\n+(1 row)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a where not (not (\"value\" = 'A' or \"value\" = 'B')) order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| A     |\n+| B     |\n++-------+\n+(2 rows)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a where \"value\" = 'A' and \"value\" = 'B' order by 1;\n+\n++-------+\n+| value |\n++-------+\n++-------+\n+(0 rows)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a where not (\"value\" = 'A' and \"value\" = 'B') order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| A     |\n+| B     |\n+| C     |\n++-------+\n+(3 rows)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a where not (not (\"value\" = 'A' and \"value\" = 'B')) order by 1;\n+\n++-------+\n+| value |\n++-------+\n++-------+\n+(0 rows)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a\n+ where case when not (\"value\" = 'A' or \"value\" = 'B') then 1 else 0 end = 1\n+ order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| C     |\n++-------+\n+(1 row)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a\n+ where\n+   case when not (\"value\"='A' or \"value\"='B')\n+     then\n+       case when (\"value\"='A' or \"value\"='B') then 1 else 2 end\n+     else 0\n+   end = 2\n+ order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| C     |\n++-------+\n+(1 row)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a\n+ where\n+   case when not (\"value\"='A' or \"value\"='B')\n+     then\n+       case when not /* <--diff from above */ (\"value\"='A' or \"value\"='B') then 1 else 2 end\n+     else 0\n+   end = 1 /* <- diff from above*/\n+ order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| C     |\n++-------+\n+(1 row)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a\n+ where\n+   case when not (\"value\"='A' or \"value\"='B')\n+     then\n+       case when not (\"value\"='A' or \"value\"='B') then 1 else 2 end\n+     else 0\n+   end = 0 /* <- diff from above*/\n+ order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| A     |\n+| B     |\n+|       |\n++-------+\n+(3 rows)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a\n+ where\n+   case when not (\"value\"='A' or \"value\"='B')\n+     then\n+       case when not (\"value\"='A' or \"value\"='B') then 1 else 2 end\n+     else 0\n+   end = 2 /* <- diff from above*/\n+ order by 1;\n+\n++-------+\n+| value |\n++-------+\n++-------+\n+(0 rows)\n+\n+!ok", "filename": "core/src/test/resources/sql/conditions.oq"}], "repo": "calcite"}]
