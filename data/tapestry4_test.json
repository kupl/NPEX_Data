{
    "tapestry4_e673815": {
        "repo": "tapestry4",
        "message": "TAPESTRY-1915: handle NPE and StringIndexOOBE in assetencoder\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry4/trunk@642446 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tapestry4/commit/e673815d0ab3702b4a710d45b8af52868b2f6e09",
        "parent": "https://github.com/apache/tapestry4/commit/4bb7c2aeb907a93d8c59b80fea3d4a58467ccd79",
        "bug_id": "tapestry4_e673815",
        "file": [
            {
                "sha": "87cc4df7bc8ca991bb43b27ddc62ee27b9eb03ec",
                "filename": "tapestry-framework/src/java/org/apache/tapestry/engine/encoders/AssetEncoder.java",
                "blob_url": "https://github.com/apache/tapestry4/blob/e673815d0ab3702b4a710d45b8af52868b2f6e09/tapestry-framework/src/java/org/apache/tapestry/engine/encoders/AssetEncoder.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/e673815d0ab3702b4a710d45b8af52868b2f6e09/tapestry-framework/src/java/org/apache/tapestry/engine/encoders/AssetEncoder.java",
                "status": "modified",
                "changes": 18,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/tapestry-framework/src/java/org/apache/tapestry/engine/encoders/AssetEncoder.java?ref=e673815d0ab3702b4a710d45b8af52868b2f6e09",
                "patch": "@@ -67,16 +67,24 @@ public void decode(ServiceEncoding encoding)\n     {\n         if (!encoding.getServletPath().equals(_path))\n             return;\n-        \n+        encoding.setParameterValue(ServiceConstants.SERVICE, Tapestry.ASSET_SERVICE);\n         String pathInfo = encoding.getPathInfo();\n+        if (pathInfo == null)\n+            pathInfo = \"/\";\n         \n         // The lead character is a slash, so find the next slash (the divider between the\n         // digest and the path).\n         int slashx = pathInfo.indexOf('/', 1);\n-        \n-        encoding.setParameterValue(ServiceConstants.SERVICE, Tapestry.ASSET_SERVICE);\n-        encoding.setParameterValue(AssetService.DIGEST, pathInfo.substring(1, slashx));\n-        encoding.setParameterValue(AssetService.PATH, pathInfo.substring(slashx));\n+        if (slashx < 0) \n+        {\n+            encoding.setParameterValue(AssetService.DIGEST, \"\");\n+            encoding.setParameterValue(AssetService.PATH, \"\");\n+        }\n+        else\n+        {\n+            encoding.setParameterValue(AssetService.DIGEST, pathInfo.substring(1, slashx));\n+            encoding.setParameterValue(AssetService.PATH, pathInfo.substring(slashx));\n+        }\n     }\n     \n }",
                "deletions": 5
            },
            {
                "sha": "3574387a170734e60b5cc6d5364727ab5f8c4af2",
                "filename": "tapestry-framework/src/test/org/apache/tapestry/engine/encoders/AssetEncoderTest.java",
                "blob_url": "https://github.com/apache/tapestry4/blob/e673815d0ab3702b4a710d45b8af52868b2f6e09/tapestry-framework/src/test/org/apache/tapestry/engine/encoders/AssetEncoderTest.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/e673815d0ab3702b4a710d45b8af52868b2f6e09/tapestry-framework/src/test/org/apache/tapestry/engine/encoders/AssetEncoderTest.java",
                "status": "modified",
                "changes": 42,
                "additions": 42,
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/tapestry-framework/src/test/org/apache/tapestry/engine/encoders/AssetEncoderTest.java?ref=e673815d0ab3702b4a710d45b8af52868b2f6e09",
                "patch": "@@ -189,4 +189,46 @@ public void test_Decode_Unprotected()\n \n         verify();\n     }\n+\n+    public void test_Decode_Null_Pathinfo()\n+    {\n+        ServiceEncoding encoding = newEncoding();\n+\n+        trainGetServletPath(encoding, \"/assets\");\n+        trainGetPathInfo(encoding, null);\n+\n+        encoding.setParameterValue(ServiceConstants.SERVICE, Tapestry.ASSET_SERVICE);\n+        encoding.setParameterValue(AssetService.DIGEST, \"\");\n+        encoding.setParameterValue(AssetService.PATH, \"\");\n+\n+        replay();\n+\n+        AssetEncoder encoder = new AssetEncoder();\n+        encoder.setPath(\"/assets\");\n+\n+        encoder.decode(encoding);\n+\n+        verify();\n+    }\n+    \n+    public void test_Decode_Empty_Pathinfo()\n+    {\n+        ServiceEncoding encoding = newEncoding();\n+\n+        trainGetServletPath(encoding, \"/assets\");\n+        trainGetPathInfo(encoding, \"/\");\n+\n+        encoding.setParameterValue(ServiceConstants.SERVICE, Tapestry.ASSET_SERVICE);\n+        encoding.setParameterValue(AssetService.DIGEST, \"\");\n+        encoding.setParameterValue(AssetService.PATH, \"\");         \n+\n+        replay();\n+\n+        AssetEncoder encoder = new AssetEncoder();\n+        encoder.setPath(\"/assets\");\n+\n+        encoder.decode(encoding);\n+\n+        verify();\n+    }\n }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "AssetEncoder.java"
        ],
        "unit_tests": [
            "AssetEncoderTest.java"
        ]
    },
    "tapestry4_02b9cfe": {
        "repo": "tapestry4",
        "message": "TAPESTRY-2570: Fixed NPE issue when trying to report an exception involving an instance that returns null for toString() + move around some variables definition to improve readability\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry4/trunk@833891 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tapestry4/commit/02b9cfe88da6501b9075f8ad2c89c97fed00b3ba",
        "parent": "https://github.com/apache/tapestry4/commit/618bae503b4c52bc550413051fd2e3fabf4ffb86",
        "bug_id": "tapestry4_02b9cfe",
        "file": [
            {
                "sha": "1ba34a976df9eade1c2abeb85d17c24cc549ca62",
                "filename": "tapestry-framework/src/java/org/apache/tapestry/util/exception/ExceptionAnalyzer.java",
                "blob_url": "https://github.com/apache/tapestry4/blob/02b9cfe88da6501b9075f8ad2c89c97fed00b3ba/tapestry-framework/src/java/org/apache/tapestry/util/exception/ExceptionAnalyzer.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/02b9cfe88da6501b9075f8ad2c89c97fed00b3ba/tapestry-framework/src/java/org/apache/tapestry/util/exception/ExceptionAnalyzer.java",
                "status": "modified",
                "changes": 50,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/tapestry-framework/src/java/org/apache/tapestry/util/exception/ExceptionAnalyzer.java?ref=02b9cfe88da6501b9075f8ad2c89c97fed00b3ba",
                "patch": "@@ -101,30 +101,15 @@ public void setExhaustive(boolean value)\n     }\n \n     protected Throwable buildDescription(Throwable exception)\n-    {\n-        BeanInfo info;\n-        Class exceptionClass;\n-        ExceptionProperty property;\n-        PropertyDescriptor[] descriptors;\n-        PropertyDescriptor descriptor;\n-        Throwable next = null;\n-        int i;\n-        Object value;\n-        Method method;\n-        ExceptionProperty[] properties;\n-        ExceptionDescription description;\n-        String stringValue;\n-        String message;\n-        String[] stackTrace = null;\n-\n+    {   \n         propertyDescriptions.clear();\n-\n-        message = exception.getMessage();\n-        exceptionClass = exception.getClass();\n+        \n+        Class exceptionClass = exception.getClass();\n \n         // Get properties, ignoring those in Throwable and higher\n         // (including the 'message' property).\n \n+        BeanInfo info;\n         try\n         {\n             info = Introspector.getBeanInfo(exceptionClass, Throwable.class);\n@@ -134,13 +119,16 @@ protected Throwable buildDescription(Throwable exception)\n             return null;\n         }\n \n-        descriptors = info.getPropertyDescriptors();\n+        Object value;\n+        Throwable next = null;\n+        String message = exception.getMessage();\n+        PropertyDescriptor[] descriptors = info.getPropertyDescriptors();\n \n-        for (i = 0; i < descriptors.length; i++)\n+        for (int i = 0; i < descriptors.length; i++)\n         {\n-            descriptor = descriptors[i];\n+        \tPropertyDescriptor descriptor = descriptors[i];\n \n-            method = descriptor.getReadMethod();\n+            Method method = descriptor.getReadMethod();\n             if (method == null)\n                 continue;\n \n@@ -175,29 +163,35 @@ protected Throwable buildDescription(Throwable exception)\n                 continue;\n             }\n \n-            stringValue = value.toString().trim();\n+            String stringValue = value.toString();\n+            \n+            if (stringValue == null)\n+            \tcontinue;\n+            \n+            stringValue = stringValue.trim();            \n \n             if (stringValue.length() == 0)\n                 continue;\n \n-            property = new ExceptionProperty(descriptor.getDisplayName(), value);\n+            ExceptionProperty property = new ExceptionProperty(descriptor.getDisplayName(), value);\n \n             propertyDescriptions.add(property);\n         }\n \n         // If exhaustive, or in the deepest exception (where there's no next)\n         // the extract the stack trace.\n-\n+        String[] stackTrace = null;\n+        \n         if (next == null || exhaustive)\n             stackTrace = getStackTrace(exception);\n \n         // Would be nice to sort the properties here.\n \n-        properties = new ExceptionProperty[propertyDescriptions.size()];\n+        ExceptionProperty[] properties = new ExceptionProperty[propertyDescriptions.size()];\n \n         ExceptionProperty[] propArray = (ExceptionProperty[]) propertyDescriptions.toArray(properties);\n \n-        description = new ExceptionDescription(exceptionClass.getName(), message, propArray, stackTrace);\n+        ExceptionDescription description = new ExceptionDescription(exceptionClass.getName(), message, propArray, stackTrace);\n \n         exceptionDescriptions.add(description);\n ",
                "deletions": 28
            },
            {
                "sha": "ccc3595474418d1e7f801cc27e5010bf8340e20e",
                "filename": "tapestry-framework/src/test/org/apache/tapestry/util/exception/TestExceptionAnalyzer.java",
                "blob_url": "https://github.com/apache/tapestry4/blob/02b9cfe88da6501b9075f8ad2c89c97fed00b3ba/tapestry-framework/src/test/org/apache/tapestry/util/exception/TestExceptionAnalyzer.java",
                "raw_url": "https://github.com/apache/tapestry4/raw/02b9cfe88da6501b9075f8ad2c89c97fed00b3ba/tapestry-framework/src/test/org/apache/tapestry/util/exception/TestExceptionAnalyzer.java",
                "status": "added",
                "changes": 52,
                "additions": 52,
                "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/tapestry-framework/src/test/org/apache/tapestry/util/exception/TestExceptionAnalyzer.java?ref=02b9cfe88da6501b9075f8ad2c89c97fed00b3ba",
                "patch": "@@ -0,0 +1,52 @@\n+package org.apache.tapestry.util.exception;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+\n+import org.apache.hivemind.ApplicationRuntimeException;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+@Test\n+public class TestExceptionAnalyzer extends Assert {\n+\t\n+\tpublic void test_report_exception() {\n+\t\tApplicationRuntimeException ex = new ApplicationRuntimeException(\"TAPerrorSTRY\");\t\t\n+\t\t\n+\t\tByteArrayOutputStream stream = new ByteArrayOutputStream();\n+\t\t\n+\t\tnew ExceptionAnalyzer().reportException(ex, new PrintStream(stream));\n+\t\t\n+\t\tString output = stream.toString();\n+\t\t\t\n+\t\tassertTrue(output.contains(\"org.apache.hivemind.ApplicationRuntimeException\"));\n+\t\tassertTrue(output.contains(\"TAPerrorSTRY\"));\n+\t}\n+\t\n+\t// test for TAPESTRY-2570\n+\tpublic void test_with_null_tostring_exception() {\n+\t\tException dummyException = new Exception(\"TAPerrorSTRY\"){\n+\t\t\tpublic Object getDummy() {\n+\t\t\t\treturn new Object(){\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic String toString() {\n+\t\t\t\t\t\treturn null;\n+\t\t\t\t\t}\n+\t\t\t\t};\n+\t\t\t}\n+\t\t};\n+\t\tApplicationRuntimeException ex = new ApplicationRuntimeException(dummyException);\n+\t\t\n+\t\tByteArrayOutputStream stream = new ByteArrayOutputStream();\n+\t\t\n+\t\tnew ExceptionAnalyzer().reportException(ex, new PrintStream(stream));\n+\t\t\n+\t\tString output = stream.toString();\n+\t\t\n+\t\tassertTrue(output.contains(\"org.apache.hivemind.ApplicationRuntimeException\"));\n+\t\tassertTrue(output.contains(\"TAPerrorSTRY\"));\n+\t\t\n+\t}\n+\t\n+\t\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ExceptionAnalyzer.java"
        ],
        "unit_tests": [
            "TestExceptionAnalyzer.java"
        ]
    }
}