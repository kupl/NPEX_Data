{
    "bookkeeper_1387b2b": {
        "bug_id": "bookkeeper_1387b2b",
        "commit": "https://github.com/apache/bookkeeper/commit/1387b2be44686abfe78bf4efee4ad52d2d699e12",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/bookkeeper/blob/1387b2be44686abfe78bf4efee4ad52d2d699e12/CHANGES.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=1387b2be44686abfe78bf4efee4ad52d2d699e12",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -38,6 +38,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-846: TestLedgerChecker times out (rakeshr via sijie)\n \n+      BOOKKEEPER-854: NPE on InterleavedLedgerStorage.onRotateEntryLog (sijie)\n+\n     IMPROVEMENTS:\n \n       BOOKKEEPER-800: Expose whether a ledger is closed or not (ivank)",
                "raw_url": "https://github.com/apache/bookkeeper/raw/1387b2be44686abfe78bf4efee4ad52d2d699e12/CHANGES.txt",
                "sha": "4415a2e112e26df1980df535ae24c9077ad2fbb8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/bookkeeper/blob/1387b2be44686abfe78bf4efee4ad52d2d699e12/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SortedLedgerStorage.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SortedLedgerStorage.java?ref=1387b2be44686abfe78bf4efee4ad52d2d699e12",
                "deletions": 1,
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SortedLedgerStorage.java",
                "patch": "@@ -46,7 +46,7 @@ public SortedLedgerStorage(ServerConfiguration conf, LedgerManager ledgerManager\n                                LedgerDirsManager ledgerDirsManager, LedgerDirsManager indexDirsManager,\n                                final CheckpointSource checkpointSource, StatsLogger statsLogger)\n                                        throws IOException {\n-        super(conf, ledgerManager, ledgerDirsManager, indexDirsManager, null, statsLogger);\n+        super(conf, ledgerManager, ledgerDirsManager, indexDirsManager, checkpointSource, statsLogger);\n         this.memTable = new EntryMemTable(conf, checkpointSource, statsLogger);\n         this.scheduler = Executors.newSingleThreadScheduledExecutor(\n                 new ThreadFactoryBuilder()",
                "raw_url": "https://github.com/apache/bookkeeper/raw/1387b2be44686abfe78bf4efee4ad52d2d699e12/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SortedLedgerStorage.java",
                "sha": "da14885820987121e7293d5dd41a6569d2af5063",
                "status": "modified"
            }
        ],
        "message": "BOOKKEEPER-854: NPE on InterleavedLedgerStorage.onRotateEntryLog (sijie)",
        "parent": "https://github.com/apache/bookkeeper/commit/5bd2edbf82bd0c8bd9ea9e507b07d23cb856f934",
        "repo": "bookkeeper",
        "unit_tests": [
            "SortedLedgerStorageTest.java"
        ]
    },
    "bookkeeper_1d6b550": {
        "bug_id": "bookkeeper_1d6b550",
        "commit": "https://github.com/apache/bookkeeper/commit/1d6b5506599accca30129348d52048b25766d1fa",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/bookkeeper/blob/1d6b5506599accca30129348d52048b25766d1fa/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessor.java?ref=1d6b5506599accca30129348d52048b25766d1fa",
                "deletions": 0,
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessor.java",
                "patch": "@@ -129,6 +129,10 @@ protected void processPacket() {\n         } catch (BookieException e) {\n             LOG.error(\"Unauthorized access to ledger \" + read.getLedgerId(), e);\n             errorCode = BookieProtocol.EUA;\n+        } catch (Throwable t) {\n+            LOG.error(\"Unexpected exception reading at {}:{} : {}\", read.getLedgerId(), read.getEntryId(),\n+                    t.getMessage(), t);\n+            errorCode = BookieProtocol.EBADREQ;\n         }\n \n         if (LOG.isTraceEnabled()) {",
                "raw_url": "https://github.com/apache/bookkeeper/raw/1d6b5506599accca30129348d52048b25766d1fa/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessor.java",
                "sha": "7849ca81afe25befb478cc5f2c5351b589fccc90",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/bookkeeper/blob/1d6b5506599accca30129348d52048b25766d1fa/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessor.java?ref=1d6b5506599accca30129348d52048b25766d1fa",
                "deletions": 0,
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessor.java",
                "patch": "@@ -87,6 +87,10 @@ protected void processPacket() {\n         } catch (BookieException e) {\n             LOG.error(\"Unauthorized access to ledger \" + add.getLedgerId(), e);\n             rc = BookieProtocol.EUA;\n+        } catch (Throwable t) {\n+            LOG.error(\"Unexpected exception while writing {}@{} : {}\", add.ledgerId, add.entryId, t.getMessage(), t);\n+            // some bad request which cause unexpected exception\n+            rc = BookieProtocol.EBADREQ;\n         } finally {\n             addData.release();\n         }",
                "raw_url": "https://github.com/apache/bookkeeper/raw/1d6b5506599accca30129348d52048b25766d1fa/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessor.java",
                "sha": "87df2d2ff9063c8da8ae31229fd192d2bff6e965",
                "status": "modified"
            }
        ],
        "message": "Handle unexpected throwable in Bookie V2 request processors\n\nMerging from https://github.com/yahoo/bookkeeper/commit/c54eafbe\n\nWhen getting any exception, the request processor for V2 protocol must make sure to get some response back to client. In the specific case, it was some NPE that was thrown and not handled properly.\n\nAuthor: Matteo Merli <mmerli@apache.org>\n\nReviewers: Ivan Kelly <ivank@apache.org>, Enrico Olivelli <eolivelli@gmail.com>, Sijie Guo <sijie@apache.org>\n\nThis closes #813 from merlimat/handle-throwable",
        "parent": "https://github.com/apache/bookkeeper/commit/b8dee21a253f4d6f449e53afa5596cc6c54b189c",
        "repo": "bookkeeper",
        "unit_tests": [
            "WriteEntryProcessorTest.java"
        ]
    },
    "bookkeeper_24dc8ac": {
        "bug_id": "bookkeeper_24dc8ac",
        "commit": "https://github.com/apache/bookkeeper/commit/24dc8ac30c97620cf4dbef48deff2bb957932eb8",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/bookkeeper/blob/24dc8ac30c97620cf4dbef48deff2bb957932eb8/CHANGES.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=24dc8ac30c97620cf4dbef48deff2bb957932eb8",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -112,6 +112,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-673: Ledger length can be inaccurate in failure case (sijie via ivank)\n \n+        BOOKKEEPER-688: NPE exception in PerChannelBookieClient (ivank via sijie)\n+\n       hedwig-server:\n \n         BOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj)",
                "raw_url": "https://github.com/apache/bookkeeper/raw/24dc8ac30c97620cf4dbef48deff2bb957932eb8/CHANGES.txt",
                "sha": "bc3f0f0908bfa78dd6be5a286617f9eee6226e9e",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/bookkeeper/blob/24dc8ac30c97620cf4dbef48deff2bb957932eb8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=24dc8ac30c97620cf4dbef48deff2bb957932eb8",
                "deletions": 6,
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "patch": "@@ -238,15 +238,20 @@ void addEntry(final long ledgerId, byte[] masterKey, final long entryId, Channel\n         final int entrySize = toSend.readableBytes();\n         final CompletionKey completionKey = new CompletionKey(ledgerId, entryId);\n         addCompletions.put(completionKey, new AddCompletion(cb, entrySize, ctx));\n+        final Channel c = channel;\n+        if (c == null) {\n+            errorOutAddKey(completionKey);\n+            return;\n+        }\n         try {\n-            ChannelFuture future = channel.write(r);\n+            ChannelFuture future = c.write(r);\n             future.addListener(new ChannelFutureListener() {\n                 @Override\n                 public void operationComplete(ChannelFuture future) throws Exception {\n                     if (future.isSuccess()) {\n                         if (LOG.isDebugEnabled()) {\n                             LOG.debug(\"Successfully wrote request for adding entry: \" + entryId + \" ledger-id: \" + ledgerId\n-                                                            + \" bookie: \" + channel.getRemoteAddress() + \" entry length: \" + entrySize);\n+                                                            + \" bookie: \" + c.getRemoteAddress() + \" entry length: \" + entrySize);\n                         }\n                         // totalBytesOutstanding.addAndGet(entrySize);\n                     } else {\n@@ -270,15 +275,21 @@ public void readEntryAndFenceLedger(final long ledgerId, byte[] masterKey,\n                 BookieProtocol.CURRENT_PROTOCOL_VERSION, ledgerId, entryId,\n                 BookieProtocol.FLAG_DO_FENCING, masterKey);\n \n+        final Channel c = channel;\n+        if (c == null) {\n+            errorOutReadKey(key);\n+            return;\n+        }\n+\n         try {\n-            ChannelFuture future = channel.write(r);\n+            ChannelFuture future = c.write(r);\n             future.addListener(new ChannelFutureListener() {\n                     @Override\n                     public void operationComplete(ChannelFuture future) throws Exception {\n                         if (future.isSuccess()) {\n                             if (LOG.isDebugEnabled()) {\n                                 LOG.debug(\"Successfully wrote request {} to {}\",\n-                                          r, channel.getRemoteAddress());\n+                                          r, c.getRemoteAddress());\n                             }\n                         } else {\n                             errorOutReadKey(key);\n@@ -299,15 +310,21 @@ public void readEntry(final long ledgerId, final long entryId, ReadEntryCallback\n                 BookieProtocol.CURRENT_PROTOCOL_VERSION, ledgerId, entryId,\n                 BookieProtocol.FLAG_NONE);\n \n+        final Channel c = channel;\n+        if (c == null) {\n+            errorOutReadKey(key);\n+            return;\n+        }\n+\n         try{\n-            ChannelFuture future = channel.write(r);\n+            ChannelFuture future = c.write(r);\n             future.addListener(new ChannelFutureListener() {\n                 @Override\n                 public void operationComplete(ChannelFuture future) throws Exception {\n                     if (future.isSuccess()) {\n                         if (LOG.isDebugEnabled()) {\n                             LOG.debug(\"Successfully wrote request {} to {}\",\n-                                      r, channel.getRemoteAddress());\n+                                      r, c.getRemoteAddress());\n                         }\n                     } else {\n                         errorOutReadKey(key);",
                "raw_url": "https://github.com/apache/bookkeeper/raw/24dc8ac30c97620cf4dbef48deff2bb957932eb8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "sha": "eb7d3b394117f74f2202c4821ace636a313f9aec",
                "status": "modified"
            }
        ],
        "message": "BOOKKEEPER-688: NPE exception in PerChannelBookieClient (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1534498 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/bookkeeper/commit/33ea58027b0a3ba160f7ac19d20568709f453f4d",
        "repo": "bookkeeper",
        "unit_tests": [
            "TestPerChannelBookieClient.java"
        ]
    },
    "bookkeeper_335c2ab": {
        "bug_id": "bookkeeper_335c2ab",
        "commit": "https://github.com/apache/bookkeeper/commit/335c2aba9bfd24eff224f1afae393026c17a2d5a",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/bookkeeper/blob/335c2aba9bfd24eff224f1afae393026c17a2d5a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java?ref=335c2aba9bfd24eff224f1afae393026c17a2d5a",
                "deletions": 1,
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java",
                "patch": "@@ -133,8 +133,17 @@ public static void asyncDeleteFullPathOptimistic(final ZooKeeper zk, final Strin\n             public void processResult(int rc, String path, Object ctx) {\n                 if (rc == Code.OK.intValue()) {\n                     String parent = new File(originalPath).getParent().replace(\"\\\\\", \"/\");\n-                    asyncDeleteFullPathOptimistic(zk, parent, -1, callback, leafNodePath);\n+                    zk.getData(parent, false, (dRc, dPath, dCtx, data, stat) -> {\n+                        if (Code.OK.intValue() == dRc && (stat != null && stat.getNumChildren() == 0)) {\n+                            asyncDeleteFullPathOptimistic(zk, parent, -1, callback, leafNodePath);\n+                        } else {\n+                            // parent node is not empty so, complete the\n+                            // callback\n+                            callback.processResult(Code.OK.intValue(), path, leafNodePath);\n+                        }\n+                    }, null);\n                 } else {\n+                    // parent node deletion fails.. so, complete the callback\n                     if (path.equals(leafNodePath)) {\n                         callback.processResult(rc, path, leafNodePath);\n                     } else {",
                "raw_url": "https://github.com/apache/bookkeeper/raw/335c2aba9bfd24eff224f1afae393026c17a2d5a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java",
                "sha": "9d6ba1ab9b06d0ac865e1778da5af4e74215db97",
                "status": "modified"
            }
        ],
        "message": "[BK-CLIENT] Check empty ledger-parent node while deleting ledger\n\n### Motivation\r\n\r\nAs discussed at [#4276](https://github.com/apache/pulsar/issues/4276), while deleting ledger, bk-client should check parent node is empty before issuing delete request for parent znode.\r\n\r\n\n\nReviewers: Enrico Olivelli <eolivelli@gmail.com>, Charan Reddy Guttapalem <reddycharan18@gmail.com>, Matteo Merli <mmerli@apache.org>\n\nThis closes #2097 from rdhabalia/led_del and squashes the following commits:\n\nf5c0ca36c [rdhabalia] return callback with ok\nede5e9403 [rdhabalia] [Bk-Client] Check empty ledger-parent node while deleting ledger\nd35aa22ad [Charan Reddy Guttapalem] Move common placementpolicy components to TopologyAwareEnsemblePlacementPolicy.\nb4ca4537b [Charan Reddy Guttapalem] Move common placementpolicy components to TopologyAwareEnsemblePlacementPolicy.\naa84c7fdd [Charan Reddy Guttapalem] GetListOfEntriesOfLedger implementation\n10859afb7 [Matteo Merli] Added HTTP handler to expose bookie state\n707ae5c85 [karanmehta93] ISSUE #2075: Bookieshell lastmark command isn't functional, always returning 0-0\n41b39c6ef [Charan Reddy Guttapalem] ISSUE #1967: make ledger creation and removal robust to zk connectionloss\n973d2ab0d [Matteo Merli] Use pure python implementation of MurmurHash\n9bb7e4b82 [Venkateswararao Jujjuri (JV)] Explicit error message if extent is not present on ZK (#2066)\nbd699e61d [mtang01] ISSUE #2067: reduce byte[] allocation in add entry\n7c62e1232 [karanmehta93] ISSUE #2073: ReadOnlyBookieTest#testBookieContinueWritingIfMulti\u2026\n42e77802c [Ivan Kelly] DLog Namespace#openLog should declare LogNotFoundException\n86bce12b5 [Yong Zhang] Migrate command `ledgermetadata`\n407cb35e5 [Charan Reddy Guttapalem] ISSUE #1967: make ledger creation and removal robust to zk connectionloss\neaa601404 [Like] Support asynchronous fence request for V2 ReadEntryProcessor\nd23b45ec8 [Ivan Kelly] Fix typo in overview page for 4.8.2\n44ee320b6 [Ivan Kelly] k\n316b71923 [Ivan Kelly] Wait for LAC update even if ledger fenced\n066621507 [Yong Zhang] Migrate command `updatecookie`\n6f3396801 [Yong Zhang] Migrate command `triggeraudit`\n60d993edf [Yong Zhang] Migrate command `autorecovery`\ned008f278 [Yong Zhang] Migrate command `whoisauditor`\n5b8e0971a [Yong Zhang] Migrate command `Whatisinstanceid`\n90c79444d [Yong Zhang] Migrate command `rebuild-db-ledger-locations-index`\n848f8527f [Nicolas Michael] ISSUE #2053: Bugfix for Percentile Calculation in FastCodahale Timer Implementation\n06f2b6f50 [Yong Zhang] Migrate command `updateledgers`\n7ad5849b1 [Yong Zhang] Migrate command `regenerate-interleaved-storage-index-file`\nd4dbb6bfb [Dongfa,Huang] Avoid useless verify if LedgerEntryRequest completed\n5c150f283 [Enrico Olivelli] Release notes for 4.9.1\n1246826ba [Yong Zhang] Migrate command `recover`\n1d4cc71fd [Yong Zhang] Migrate command `localconsistencycheck`\n67f83620e [Yong Zhang] Migrate command `readledger`\nbfbd6b023 [Yong Zhang] Migrate command `decommission`\nd40b8b69f [Yong Zhang] Migrate command `readlog`\n95d145a15 [Yong Zhang] Migrate command `nukeexistingcluster`\ne2b1dc7f3 [Yong Zhang] Migrate command `listunderreplicated`\n0988e12c7 [bd2019us] ISSUE #2023: change cached thread pool to fixed thread pool\n6a6d7bbd9 [Yong Zhang] Migrate command `initnewcluster`\nc391fe58d [Yong Zhang] Migrate command `readlogmetadata`\n120d67737 [Yong Zhang] Migrate command `lostbookierecoverydelay`\nbf66235e5 [Yong Zhang] Migrate command `deleteledger`\n751e55fa4 [Arvin] ISSUE #2020: close db properly to avoid open RocksDB failure at the second time\n138a7ae85 [Yong Zhang] Migrate command `metadataformat`\nb043d1694 [Yong Zhang] Migrate command `listledgers`\n4573285db [Ivan Kelly] Docker autobuild hook\ne3d807a32 [Like] Fix IDE complain as there are multi choices for error code\n9524a9f4a [Yong Zhang] Migrate command `readjournal`\n6c3f33f55 [Yong Zhang] Fix when met unexpect entry id crashed\ne35a108c7 [Like] Fix error message for unrecognized number-of-bookies\n5902ee27b [Boyang Jerry Peng] fix potential NPE when releasing entry that is null\n6aa73ce05 [Ivan Kelly] [RELEASE] Update website to include documentation for 4.8.2\n1448d12aa [Yong Zhang] Migrate command `listfilesondisk`\n4de598379 [Yong Zhang] Issue #1987: Migrate command `convert-to-interleaved-storage`\n468743e7e [Matteo Merli] In DbLedgerStorage use default values when config key is present but empty\nf26a4cae0 [Ivan Kelly] Release notes for v4.8.2\nec2636cd2 [Yong Zhang] Issue #1985: Migrate command `convert-to-db-storage`\n8cc7239ac [Yong Zhang] Issue #1982: Migrate command `bookiesanity`\nfa90f0185 [Yong Zhang] Issue #1980: Migrate command `ledger` from shell to bkctl",
        "parent": "https://github.com/apache/bookkeeper/commit/2ff26d69e400d16f533f424c6e95f2f30189e183",
        "repo": "bookkeeper",
        "unit_tests": [
            "TestZkUtils.java"
        ]
    },
    "bookkeeper_5902ee2": {
        "bug_id": "bookkeeper_5902ee2",
        "commit": "https://github.com/apache/bookkeeper/commit/5902ee27be2fb7eeade53f5e8e4afd3fe573ad5c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/bookkeeper/blob/5902ee27be2fb7eeade53f5e8e4afd3fe573ad5c/stream/distributedlog/core/src/main/java/org/apache/distributedlog/impl/logsegment/BKLogSegmentEntryReader.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/stream/distributedlog/core/src/main/java/org/apache/distributedlog/impl/logsegment/BKLogSegmentEntryReader.java?ref=5902ee27be2fb7eeade53f5e8e4afd3fe573ad5c",
                "deletions": 1,
                "filename": "stream/distributedlog/core/src/main/java/org/apache/distributedlog/impl/logsegment/BKLogSegmentEntryReader.java",
                "patch": "@@ -21,6 +21,7 @@\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.Lists;\n+import io.netty.util.ReferenceCountUtil;\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Enumeration;\n@@ -800,7 +801,7 @@ private void readEntriesFromReadAheadCache(PendingReadRequest nextRequest) {\n                         return;\n                     }\n                 } finally {\n-                    removedEntry.release();\n+                    ReferenceCountUtil.safeRelease(removedEntry);\n                 }\n             } else if (skipBrokenEntries && BKException.Code.DigestMatchException == entry.getRc()) {\n                 // skip this entry and move forward",
                "raw_url": "https://github.com/apache/bookkeeper/raw/5902ee27be2fb7eeade53f5e8e4afd3fe573ad5c/stream/distributedlog/core/src/main/java/org/apache/distributedlog/impl/logsegment/BKLogSegmentEntryReader.java",
                "sha": "f414bf4555521862126e49d8ba83ec33db90ff1a",
                "status": "modified"
            }
        ],
        "message": "fix potential NPE when releasing entry that is null\n\nDescriptions of the changes in this PR:\r\n\r\n### Motivation\r\nA interrupt exception can occur during the poll operation of the blocking and cause a NPE to be thrown\r\n\r\n### Changes\r\nCheck if entry is null before trying to release it\r\n\n\nReviewers: Ivan Kelly <ivank@apache.org>, Sijie Guo <sijie@apache.org>, Matteo Merli <mmerli@apache.org>\n\nThis closes #1998 from jerrypeng/fix_NPE",
        "parent": "https://github.com/apache/bookkeeper/commit/6aa73ce050feb247f491a489a42f6e3db09961cf",
        "repo": "bookkeeper",
        "unit_tests": [
            "TestBKLogSegmentEntryReader.java"
        ]
    },
    "bookkeeper_70d7153": {
        "bug_id": "bookkeeper_70d7153",
        "commit": "https://github.com/apache/bookkeeper/commit/70d7153a3cbe1aaa03c3f2a2f3946ee1964b9f47",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/bookkeeper/blob/70d7153a3cbe1aaa03c3f2a2f3946ee1964b9f47/clients/java/base/src/main/java/org/apache/distributedlog/clients/impl/internal/LocationClientImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/clients/java/base/src/main/java/org/apache/distributedlog/clients/impl/internal/LocationClientImpl.java?ref=70d7153a3cbe1aaa03c3f2a2f3946ee1964b9f47",
                "deletions": 1,
                "filename": "clients/java/base/src/main/java/org/apache/distributedlog/clients/impl/internal/LocationClientImpl.java",
                "patch": "@@ -130,7 +130,8 @@ private static boolean shouldRetryOnException(Throwable cause) {\n       () -> fromListenableFuture(\n         locationService.getStorageContainerEndpoint(request),\n         GetStorageContainerEndpointsFunction),\n-      scheduler);\n+      scheduler,\n+      request);\n   }\n \n   @Override",
                "raw_url": "https://github.com/apache/bookkeeper/raw/70d7153a3cbe1aaa03c3f2a2f3946ee1964b9f47/clients/java/base/src/main/java/org/apache/distributedlog/clients/impl/internal/LocationClientImpl.java",
                "sha": "e745cfbc1a8f54f0f23b97229d03dbbe5e0114c8",
                "status": "modified"
            }
        ],
        "message": "Fix NPE on LocalClientImpl",
        "parent": "https://github.com/apache/bookkeeper/commit/039084947d1af19d4d1e01e8ac94bf10ba007ace",
        "repo": "bookkeeper",
        "unit_tests": [
            "TestLocationClientImpl.java"
        ]
    },
    "bookkeeper_9366322": {
        "bug_id": "bookkeeper_9366322",
        "commit": "https://github.com/apache/bookkeeper/commit/9366322bfe3461a44a8b0444e66cd774ea1ac7d8",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/bookkeeper/blob/9366322bfe3461a44a8b0444e66cd774ea1ac7d8/CHANGES.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=9366322bfe3461a44a8b0444e66cd774ea1ac7d8",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -46,6 +46,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-177: Index file is lost or some index pages aren't flushed. (sijie via ivank)\n \n+        BOOKKEEPER-113: NPE In BookKeeper test (fpj via ivank)\n+\n       hedwig-server/\n       \n         BOOKKEEPER-140: Hub server doesn't subscribe remote region correctly when a region is down. (Sijie Gou via ivank)",
                "raw_url": "https://github.com/apache/bookkeeper/raw/9366322bfe3461a44a8b0444e66cd774ea1ac7d8/CHANGES.txt",
                "sha": "ce6184a3cf16fc29e5be1b1ae59878306b3ff375",
                "status": "modified"
            },
            {
                "additions": 48,
                "blob_url": "https://github.com/apache/bookkeeper/blob/9366322bfe3461a44a8b0444e66cd774ea1ac7d8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "changes": 92,
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=9366322bfe3461a44a8b0444e66cd774ea1ac7d8",
                "deletions": 44,
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "patch": "@@ -225,11 +225,6 @@ void addEntry(final long ledgerId, byte[] masterKey, final long entryId, Channel\n                   Object ctx, final int options) {\n         final int entrySize = toSend.readableBytes();\n \n-        // if (totalBytesOutstanding.get() > maxMemory) {\n-        // // TODO: how to throttle, throw an exception, or call the callback?\n-        // // Maybe this should be done at the layer above?\n-        // }\n-\n         final CompletionKey completionKey = new CompletionKey(ledgerId, entryId);\n \n         addCompletions.put(completionKey, new AddCompletion(cb, entrySize, ctx));\n@@ -238,30 +233,35 @@ void addEntry(final long ledgerId, byte[] masterKey, final long entryId, Channel\n                               + 4 // for the type of request\n                               + masterKey.length; // for the master key\n \n-        ChannelBuffer header = channel.getConfig().getBufferFactory().getBuffer(totalHeaderSize);\n-        header.writeInt(totalHeaderSize - 4 + entrySize);\n-        header.writeInt(new PacketHeader(BookieProtocol.CURRENT_PROTOCOL_VERSION, \n-                                         BookieProtocol.ADDENTRY, (short)options).toInt());\n-        header.writeBytes(masterKey);\n+        try{\n+            ChannelBuffer header = channel.getConfig().getBufferFactory().getBuffer(totalHeaderSize);\n \n-        ChannelBuffer wrappedBuffer = ChannelBuffers.wrappedBuffer(header, toSend);\n+            header.writeInt(totalHeaderSize - 4 + entrySize);\n+            header.writeInt(new PacketHeader(BookieProtocol.CURRENT_PROTOCOL_VERSION,\n+                                             BookieProtocol.ADDENTRY, (short)options).toInt());\n+            header.writeBytes(masterKey);\n \n-        ChannelFuture future = channel.write(wrappedBuffer);\n-        future.addListener(new ChannelFutureListener() {\n-            @Override\n-            public void operationComplete(ChannelFuture future) throws Exception {\n-                if (future.isSuccess()) {\n-                    if (LOG.isDebugEnabled()) {\n-                        LOG.debug(\"Successfully wrote request for adding entry: \" + entryId + \" ledger-id: \" + ledgerId\n-                                  + \" bookie: \" + channel.getRemoteAddress() + \" entry length: \" + entrySize);\n+            ChannelBuffer wrappedBuffer = ChannelBuffers.wrappedBuffer(header, toSend);\n+\n+            ChannelFuture future = channel.write(wrappedBuffer);\n+            future.addListener(new ChannelFutureListener() {\n+                @Override\n+                public void operationComplete(ChannelFuture future) throws Exception {\n+                    if (future.isSuccess()) {\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"Successfully wrote request for adding entry: \" + entryId + \" ledger-id: \" + ledgerId\n+                                                            + \" bookie: \" + channel.getRemoteAddress() + \" entry length: \" + entrySize);\n+                        }\n+                        // totalBytesOutstanding.addAndGet(entrySize);\n+                    } else {\n+                        errorOutAddKey(completionKey);\n                     }\n-                    // totalBytesOutstanding.addAndGet(entrySize);\n-                } else {\n-                    errorOutAddKey(completionKey);\n                 }\n-            }\n-        });\n-\n+            });\n+        } catch (Throwable e) {\n+            LOG.warn(\"Read entry operation failed\", e);\n+            errorOutReadKey(completionKey);\n+        }\n     }\n \n     public void readEntry(final long ledgerId, final long entryId, ReadEntryCallback cb, Object ctx, final int options) {\n@@ -273,29 +273,33 @@ public void readEntry(final long ledgerId, final long entryId, ReadEntryCallback\n                               + 8 // for ledgerId\n                               + 8; // for entryId\n \n-        ChannelBuffer tmpEntry = channel.getConfig().getBufferFactory().getBuffer(totalHeaderSize);\n-        tmpEntry.writeInt(totalHeaderSize - 4);\n+        try{\n+            ChannelBuffer tmpEntry = channel.getConfig().getBufferFactory().getBuffer(totalHeaderSize);\n+            tmpEntry.writeInt(totalHeaderSize - 4);\n \n-        tmpEntry.writeInt(new PacketHeader(BookieProtocol.CURRENT_PROTOCOL_VERSION, \n-                                           BookieProtocol.READENTRY, (short)options).toInt());\n-        tmpEntry.writeLong(ledgerId);\n-        tmpEntry.writeLong(entryId);\n+            tmpEntry.writeInt(new PacketHeader(BookieProtocol.CURRENT_PROTOCOL_VERSION,\n+                                               BookieProtocol.READENTRY, (short)options).toInt());\n+            tmpEntry.writeLong(ledgerId);\n+            tmpEntry.writeLong(entryId);\n \n-        ChannelFuture future = channel.write(tmpEntry);\n-        future.addListener(new ChannelFutureListener() {\n-            @Override\n-            public void operationComplete(ChannelFuture future) throws Exception {\n-                if (future.isSuccess()) {\n-                    if (LOG.isDebugEnabled()) {\n-                        LOG.debug(\"Successfully wrote request for reading entry: \" + entryId + \" ledger-id: \"\n-                                  + ledgerId + \" bookie: \" + channel.getRemoteAddress());\n+            ChannelFuture future = channel.write(tmpEntry);\n+            future.addListener(new ChannelFutureListener() {\n+                @Override\n+                public void operationComplete(ChannelFuture future) throws Exception {\n+                    if (future.isSuccess()) {\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"Successfully wrote request for reading entry: \" + entryId + \" ledger-id: \"\n+                                                            + ledgerId + \" bookie: \" + channel.getRemoteAddress());\n+                        }\n+                    } else {\n+                        errorOutReadKey(key);\n                     }\n-                } else {\n-                    errorOutReadKey(key);\n                 }\n-            }\n-        });\n-\n+            });\n+        } catch(Throwable e) {\n+            LOG.warn(\"Read entry operation failed\", e);\n+            errorOutReadKey(key);\n+        }\n     }\n \n     public void close() {",
                "raw_url": "https://github.com/apache/bookkeeper/raw/9366322bfe3461a44a8b0444e66cd774ea1ac7d8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "sha": "75a8e8cdbba384a84a4549daa53270f0fd8bf840",
                "status": "modified"
            }
        ],
        "message": "BOOKKEEPER-113: NPE In BookKeeper test (fpj via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1293383 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/bookkeeper/commit/2ec70d4dbf2266b17bdb99975f974f30afa65593",
        "repo": "bookkeeper",
        "unit_tests": [
            "TestPerChannelBookieClient.java"
        ]
    },
    "bookkeeper_9bade92": {
        "bug_id": "bookkeeper_9bade92",
        "commit": "https://github.com/apache/bookkeeper/commit/9bade929dd87829a8903e402f6c3e3be366a854a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/bookkeeper/blob/9bade929dd87829a8903e402f6c3e3be366a854a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java?ref=9bade929dd87829a8903e402f6c3e3be366a854a",
                "deletions": 1,
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java",
                "patch": "@@ -2301,7 +2301,7 @@ public void process(int journalVersion, long offset, ByteBuffer entry) throws IO\n      * Print last log mark\n      */\n     protected void printLastLogMark() throws IOException {\n-        for (Journal journal : journals) {\n+        for (Journal journal : getJournals()) {\n             LogMark lastLogMark = journal.getLastLogMark().getCurMark();\n             System.out.println(\"LastLogMark: Journal Id - \" + lastLogMark.getLogFileId() + \"(\"\n                     + Long.toHexString(lastLogMark.getLogFileId()) + \".txn), Pos - \"",
                "raw_url": "https://github.com/apache/bookkeeper/raw/9bade929dd87829a8903e402f6c3e3be366a854a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java",
                "sha": "8f9e63fedbdbf0217741e4567e9da8ee77b30912",
                "status": "modified"
            }
        ],
        "message": "BOOKKEEPER-1079: shell lastMark throws NPE\n\nAuthor: Enrico Olivelli <eolivelli@apache.org>\n\nReviewers: Sijie Guo\n\nCloses #167 from eolivelli/BOOKKEEPER-1079",
        "parent": "https://github.com/apache/bookkeeper/commit/fd3331a2769a29c379ed63e21ed2dc3c0f85ba25",
        "repo": "bookkeeper",
        "unit_tests": [
            "BookieShellTest.java"
        ]
    },
    "bookkeeper_cdf138e": {
        "bug_id": "bookkeeper_cdf138e",
        "commit": "https://github.com/apache/bookkeeper/commit/cdf138e24b76f934721eb1e82a226d0be296b838",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/bookkeeper/blob/cdf138e24b76f934721eb1e82a226d0be296b838/CHANGES.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=cdf138e24b76f934721eb1e82a226d0be296b838",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -42,6 +42,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-559: Fix occasional failure in AuditorBookieTest (ivank via umamahesh)\n \n+        BOOKKEEPER-599: NPE in PerChannelBookieClient (jiannan via sijie)\n+\n     IMPROVEMENTS:\n \n       BOOKKEEPER-555: Make BookieServer use Netty rather than a custom IO server (ivank)",
                "raw_url": "https://github.com/apache/bookkeeper/raw/cdf138e24b76f934721eb1e82a226d0be296b838/CHANGES.txt",
                "sha": "14c1136ba1fc6ec22f6bd3ad563fcdd74f40da70",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/bookkeeper/blob/cdf138e24b76f934721eb1e82a226d0be296b838/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=cdf138e24b76f934721eb1e82a226d0be296b838",
                "deletions": 2,
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "patch": "@@ -569,8 +569,8 @@ void handleAddResponse(BookieProtocol.AddResponse a) {\n \n     void handleReadResponse(BookieProtocol.ReadResponse rr) {\n         if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Got response for read request {} entry length: {}\",\n-                      rr, rr.getData().readableBytes());\n+            LOG.debug(\"Got response for read request {} entry length: {}\", rr,\n+                    rr.getData() != null ? rr.getData().readableBytes() : -1);\n         }\n \n         // convert to BKException code because thats what the uppper",
                "raw_url": "https://github.com/apache/bookkeeper/raw/cdf138e24b76f934721eb1e82a226d0be296b838/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "sha": "4c348b074e68a3cda48f38446c431ac05aae663f",
                "status": "modified"
            }
        ],
        "message": "BOOKKEEPER-599: NPE in PerChannelBookieClient (jiannan via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1465437 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/bookkeeper/commit/b118823702e946ccdeb14843e2691fdd760a59e4",
        "repo": "bookkeeper",
        "unit_tests": [
            "TestPerChannelBookieClient.java"
        ]
    },
    "bookkeeper_f0757e9": {
        "bug_id": "bookkeeper_f0757e9",
        "commit": "https://github.com/apache/bookkeeper/commit/f0757e9ac643d6f36a11be4065d163437180cb7e",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/bookkeeper/blob/f0757e9ac643d6f36a11be4065d163437180cb7e/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=f0757e9ac643d6f36a11be4065d163437180cb7e",
                "deletions": 10,
                "filename": "bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "patch": "@@ -876,17 +876,18 @@ private void writeAndFlush(final Channel channel,\n         try {\n             final long startTime = MathUtils.nowInNano();\n             ChannelFuture future = channel.writeAndFlush(request);\n-            future.addListener(new ChannelFutureListener() {\n-                @Override\n-                public void operationComplete(ChannelFuture future) throws Exception {\n-                    if (future.isSuccess()) {\n-                        nettyOpLogger.registerSuccessfulEvent(MathUtils.elapsedNanos(startTime),\n-                                TimeUnit.NANOSECONDS);\n-                        completionObjects.get(key).setOutstanding();\n-                    } else {\n-                        nettyOpLogger.registerFailedEvent(MathUtils.elapsedNanos(startTime),\n-                                TimeUnit.NANOSECONDS);\n+            future.addListener(future1 -> {\n+                if (future1.isSuccess()) {\n+                    nettyOpLogger.registerSuccessfulEvent(MathUtils.elapsedNanos(startTime),\n+                            TimeUnit.NANOSECONDS);\n+                    CompletionValue completion = completionObjects.get(key);\n+                    if (completion != null) {\n+                        completion.setOutstanding();\n                     }\n+\n+                } else {\n+                    nettyOpLogger.registerFailedEvent(MathUtils.elapsedNanos(startTime),\n+                            TimeUnit.NANOSECONDS);\n                 }\n             });\n         } catch (Throwable e) {",
                "raw_url": "https://github.com/apache/bookkeeper/raw/f0757e9ac643d6f36a11be4065d163437180cb7e/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java",
                "sha": "440239f1913dcf63affecaea80779f6c403b72df",
                "status": "modified"
            }
        ],
        "message": "Issue #1241: Fixed NPE in PerChannelBookieClient\n\nThe `CompletionValue` object from the map can be null in some cases and we need to protect for it.\n\nFixes #1241\n\nAuthor: Matteo Merli <mmerli@apache.org>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nThis closes #1242 from merlimat/fix-npe, closes #1241",
        "parent": "https://github.com/apache/bookkeeper/commit/e3d47ae14a0140b10a6303ecfddbcba66ce90933",
        "repo": "bookkeeper",
        "unit_tests": [
            "TestPerChannelBookieClient.java"
        ]
    }
}