{
    "openejb_012de1c": {
        "bug_id": "openejb_012de1c",
        "commit": "https://github.com/apache/openejb/commit/012de1c95fbeac5da73bfaa239aeae60691b93c7",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/openejb/blob/012de1c95fbeac5da73bfaa239aeae60691b93c7/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=012de1c95fbeac5da73bfaa239aeae60691b93c7",
                "deletions": 12,
                "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "patch": "@@ -1476,20 +1476,22 @@ public EjbModule deploy(EjbModule ejbModule) throws OpenEJBException {\n                 addJaxRsProviders(finder, ejbModule.getAppModule().getJaxRsProviders(), Provider.class);\n             }\n \n-            for (PersistenceModule pm : ejbModule.getAppModule().getPersistenceModules()) {\n-                for (org.apache.openejb.jee.jpa.unit.PersistenceUnit pu : pm.getPersistence().getPersistenceUnit()) {\n-                    if ((pu.isExcludeUnlistedClasses() == null || !pu.isExcludeUnlistedClasses())\n-                            && \"true\".equalsIgnoreCase(pu.getProperties().getProperty(OPENEJB_JPA_AUTO_SCAN))) {\n-                        // no need of meta currently since JPA providers doesn't support it\n-                        final List<Class<?>> classes = finder.findAnnotatedClasses(Entity.class);\n-                        final List<String> existingClasses = pu.getClazz();\n-                        for (Class<?> clazz : classes) {\n-                            final String name = clazz.getName();\n-                            if (!existingClasses.contains(name)) {\n-                                pu.getClazz().add(name);\n+            if (ejbModule.getAppModule() != null) {\n+                for (PersistenceModule pm : ejbModule.getAppModule().getPersistenceModules()) {\n+                    for (org.apache.openejb.jee.jpa.unit.PersistenceUnit pu : pm.getPersistence().getPersistenceUnit()) {\n+                        if ((pu.isExcludeUnlistedClasses() == null || !pu.isExcludeUnlistedClasses())\n+                                && \"true\".equalsIgnoreCase(pu.getProperties().getProperty(OPENEJB_JPA_AUTO_SCAN))) {\n+                            // no need of meta currently since JPA providers doesn't support it\n+                            final List<Class<?>> classes = finder.findAnnotatedClasses(Entity.class);\n+                            final List<String> existingClasses = pu.getClazz();\n+                            for (Class<?> clazz : classes) {\n+                                final String name = clazz.getName();\n+                                if (!existingClasses.contains(name)) {\n+                                    pu.getClazz().add(name);\n+                                }\n                             }\n+                            pu.setScanned(true);\n                         }\n-                        pu.setScanned(true);\n                     }\n                 }\n             }",
                "raw_url": "https://github.com/apache/openejb/raw/012de1c95fbeac5da73bfaa239aeae60691b93c7/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "sha": "0370a2264824f7769d3558d2c45867adf81be6c6",
                "status": "modified"
            }
        ],
        "message": "avoiding NPE (mainly coming from custom test classes)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1407969 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/4cc058e4df456420e4ba4980a8e7e6bde83bb1ab",
        "patched_files": [
            "AnnotationDeployer.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "AnnotationDeployerTest.java"
        ]
    },
    "openejb_19ff8d9": {
        "bug_id": "openejb_19ff8d9",
        "commit": "https://github.com/apache/openejb/commit/19ff8d90b40341cd3384675ae93383f87aee8cda",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/openejb/blob/19ff8d90b40341cd3384675ae93383f87aee8cda/openejb3/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java?ref=19ff8d90b40341cd3384675ae93383f87aee8cda",
                "deletions": 0,
                "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java",
                "patch": "@@ -846,6 +846,7 @@ private void registerSessionSynchronization(Instance instance, CoreDeploymentInf\n \n             // Invoke afterBegin\n             ThreadContext callContext = new ThreadContext(instance.deploymentInfo, instance.primaryKey, Operation.AFTER_BEGIN);\n+            callContext.setCurrentAllowedStates(StatefulContext.getStates());\n             ThreadContext oldCallContext = ThreadContext.enter(callContext);\n             try {\n ",
                "raw_url": "https://github.com/apache/openejb/raw/19ff8d90b40341cd3384675ae93383f87aee8cda/openejb3/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java",
                "sha": "ea1317d805b4bfc98139af713484f02d39e974e9",
                "status": "modified"
            }
        ],
        "message": "Patch from Ivan, OPENEJB-1042: NullPointerException is thrown while invoking Timer.getHandler()\n\nThanks, Ivan!\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@790752 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/3b875a58cad4ba77be39475f871dbcbf1b687663",
        "patched_files": [
            "StatefulContainer.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "StatefulContainerTest.java"
        ]
    },
    "openejb_1bb2ff3": {
        "bug_id": "openejb_1bb2ff3",
        "commit": "https://github.com/apache/openejb/commit/1bb2ff3e77f01a14829bd15515bc0afc0c199f0c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/openejb/blob/1bb2ff3e77f01a14829bd15515bc0afc0c199f0c/openejb/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java?ref=1bb2ff3e77f01a14829bd15515bc0afc0c199f0c",
                "deletions": 1,
                "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java",
                "patch": "@@ -784,7 +784,7 @@ private void discardInstance(ThreadContext threadContext) {\n         }\n \n         Instance instance = checkedOutInstances.remove(primaryKey);\n-        if (!containsExtendedPersistenceContext(instance.beanContext)) {\n+        if (instance != null && !containsExtendedPersistenceContext(instance.beanContext)) {\n             cache.remove(primaryKey);\n         }\n ",
                "raw_url": "https://github.com/apache/openejb/raw/1bb2ff3e77f01a14829bd15515bc0afc0c199f0c/openejb/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java",
                "sha": "5fc40d09dc1e7bd287e58ba87bd9659d81f6825b",
                "status": "modified"
            }
        ],
        "message": "NPE check\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1341276 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/955ea8d9dd0956127bb0e47073e3e7976ce32faf",
        "patched_files": [
            "StatefulContainer.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "StatefulContainerTest.java"
        ]
    },
    "openejb_2ade72e": {
        "bug_id": "openejb_2ade72e",
        "commit": "https://github.com/apache/openejb/commit/2ade72e64f34adfadc67c56a6087ab0900f2e0f3",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/openejb/blob/2ade72e64f34adfadc67c56a6087ab0900f2e0f3/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java?ref=2ade72e64f34adfadc67c56a6087ab0900f2e0f3",
                "deletions": 0,
                "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "patch": "@@ -547,6 +547,9 @@ public AppInfo configureApplication(File jarFile) throws OpenEJBException {\n      * @throws OpenEJBException on error\n      */\n     public AppInfo configureApplication(ClassLoader classLoader, String id, List<File> jarFiles) throws OpenEJBException {\n+        if (id == null) {\n+            id = \"\";\n+        }\n         Application application = new Application();\n         application.setApplicationName(id);\n         AppModule collection = new AppModule(classLoader, id, application, false);",
                "raw_url": "https://github.com/apache/openejb/raw/2ade72e64f34adfadc67c56a6087ab0900f2e0f3/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "sha": "e6ba1c33fb24cb4e6c2158b32cf9992c63a478fe",
                "status": "modified"
            }
        ],
        "message": "pass an empty application id to prevent NPEs and to ensure proper global jndi names are used\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@988313 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/a178c7ce1bf24a553ef05a86b4330ed920d79385",
        "patched_files": [
            "ConfigurationFactory.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "ConfigurationFactoryTest.java"
        ]
    },
    "openejb_2cc273f": {
        "bug_id": "openejb_2cc273f",
        "commit": "https://github.com/apache/openejb/commit/2cc273f54f9baeabac629e140cb7cac5a0d92fd1",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/openejb/blob/2cc273f54f9baeabac629e140cb7cac5a0d92fd1/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=2cc273f54f9baeabac629e140cb7cac5a0d92fd1",
                "deletions": 1,
                "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "patch": "@@ -1438,7 +1438,9 @@ public EjbModule deploy(EjbModule ejbModule) throws OpenEJBException {\n \n             // ejb can be rest bean and only then in standalone so scan providers here too\n             // adding them to app since they should be in the app classloader\n-            addJaxRsProviders(finder, ejbModule.getAppModule().getJaxRsProviders(), Provider.class);\n+            if (ejbModule.getAppModule() != null) {\n+                addJaxRsProviders(finder, ejbModule.getAppModule().getJaxRsProviders(), Provider.class);\n+            }\n \n             return ejbModule;\n         }",
                "raw_url": "https://github.com/apache/openejb/raw/2cc273f54f9baeabac629e140cb7cac5a0d92fd1/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "sha": "c9921b87b4ad74a8f123232fef853408f2b33b53",
                "status": "modified"
            }
        ],
        "message": "avoiding NPE when scanning jaxrs @Provider\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1342746 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/0fbcbb92feee8a7678ddf6e5c4ccf0f930d61497",
        "patched_files": [
            "AnnotationDeployer.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "AnnotationDeployerTest.java"
        ]
    },
    "openejb_3bd55ef": {
        "bug_id": "openejb_3bd55ef",
        "commit": "https://github.com/apache/openejb/commit/3bd55efd17e8e901dfdfb52d8c855253b644623c",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/openejb/blob/3bd55efd17e8e901dfdfb52d8c855253b644623c/openejb/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Configuration.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Configuration.java?ref=3bd55efd17e8e901dfdfb52d8c855253b644623c",
                "deletions": 3,
                "filename": "openejb/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Configuration.java",
                "patch": "@@ -71,9 +71,13 @@ public void setHost(String host) {\n     }\n \n     public void setServerXml(String file) {\n-        final File sXml = new File(file);\n-        if (sXml.exists()) {\n-            serverXml = sXml;\n+        if (file == null) {\n+            serverXml = null;\n+        } else {\n+            final File sXml = new File(file);\n+            if (sXml.exists()) {\n+                serverXml = sXml;\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/openejb/raw/3bd55efd17e8e901dfdfb52d8c855253b644623c/openejb/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Configuration.java",
                "sha": "84b0019ffe318eb38e620669001f88f41edc8de7",
                "status": "modified"
            }
        ],
        "message": "avoiding NPE when file is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1351171 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/c7ae0375222730902d3e47e465426e60c33aaded",
        "patched_files": [
            "Configuration.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "ConfigurationTest.java"
        ]
    },
    "openejb_4289fd7": {
        "bug_id": "openejb_4289fd7",
        "commit": "https://github.com/apache/openejb/commit/4289fd7fae4c7065afea3f6845421bbc6304acde",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/openejb/blob/4289fd7fae4c7065afea3f6845421bbc6304acde/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=4289fd7fae4c7065afea3f6845421bbc6304acde",
                "deletions": 1,
                "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "patch": "@@ -1380,7 +1380,7 @@ private void buildResource(JndiConsumer consumer, Resource resource, Member memb\n             JndiReference reference = consumer.getEnvEntryMap().get(refName);\n             if (reference == null) {\n \n-                { // Little quick validation for common mistake\n+                if (member != null) { // Little quick validation for common mistake\n                     Class type = member.getType();\n                     boolean shouldReturn = false;\n                     if (EntityManager.class.isAssignableFrom(type)){",
                "raw_url": "https://github.com/apache/openejb/raw/4289fd7fae4c7065afea3f6845421bbc6304acde/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "sha": "e3221e4d45ae6d0b468e9f15eb52ae8cf16aa5ea",
                "status": "modified"
            }
        ],
        "message": "OPENEJB-735 NPE in AnnotationDeployer if null member is passed into buildResource()\n\nContributed by: Joe Bohn\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@604145 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/ba6492d7fc97aab1605cf1f2248ba3a15dc7b6cb",
        "patched_files": [
            "AnnotationDeployer.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "AnnotationDeployerTest.java"
        ]
    },
    "openejb_477fcdc": {
        "bug_id": "openejb_477fcdc",
        "commit": "https://github.com/apache/openejb/commit/477fcdc2a522e9faa7891b5689ca84f542dd87d8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/openejb/blob/477fcdc2a522e9faa7891b5689ca84f542dd87d8/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java?ref=477fcdc2a522e9faa7891b5689ca84f542dd87d8",
                "deletions": 1,
                "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "patch": "@@ -200,7 +200,7 @@ public Assembler(JndiFactory jndiFactory) {\n \n         SystemInstance system = SystemInstance.get();\n \n-        system.setComponent(Assembler.class, this);\n+        system.setComponent(org.apache.openejb.spi.Assembler.class, this);\n \n         containerSystem = new CoreContainerSystem(jndiFactory);\n         system.setComponent(ContainerSystem.class, containerSystem);",
                "raw_url": "https://github.com/apache/openejb/raw/477fcdc2a522e9faa7891b5689ca84f542dd87d8/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "sha": "c558595822e6e4d994ffa372c63d8342f1710692",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/openejb/blob/477fcdc2a522e9faa7891b5689ca84f542dd87d8/openejb3/container/openejb-core/src/test/java/org/apache/openejb/iTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/test/java/org/apache/openejb/iTest.java?ref=477fcdc2a522e9faa7891b5689ca84f542dd87d8",
                "deletions": 1,
                "filename": "openejb3/container/openejb-core/src/test/java/org/apache/openejb/iTest.java",
                "patch": "@@ -60,7 +60,7 @@ protected void setUp() throws Exception {\n \n         // Copied from org.apache.openejb.SomeoneBrokeSurefireAndThisIsADirtyHackForItTest that's now gone\n         System.setProperty(\"openejb.assembler\", org.apache.openejb.assembler.classic.Assembler.class.getName());\n-        System.setProperty(\"openejb.deployments.classpath.include\", \".*openejb-itests-*.*\");\n+        System.setProperty(\"openejb.deployments.classpath.include\", \".*openejb-itests-[^a].*-.*\");\n         System.setProperty(\"openejb.deployments.classpath.filter.descriptors\", \"true\");\n         System.setProperty(\"openejb.deployments.classpath.filter.systemapps\", \"false\");\n         System.setProperty(\"openejb.deployments.classpath.ear\", \"false\");",
                "raw_url": "https://github.com/apache/openejb/raw/477fcdc2a522e9faa7891b5689ca84f542dd87d8/openejb3/container/openejb-core/src/test/java/org/apache/openejb/iTest.java",
                "sha": "122ea9b6037f595f134e13f40e56e4ff3b58d8ee",
                "status": "modified"
            }
        ],
        "message": "Fix the issue with OpenEJB.deploy throwing NPE because setComponent set Assembler the class not Assembler the interface\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@831551 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/b034cc4e9f8c2cc9dd9825c41be620ac61f96921",
        "patched_files": [
            "Assembler.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "iTest.java"
        ]
    },
    "openejb_607b917": {
        "bug_id": "openejb_607b917",
        "commit": "https://github.com/apache/openejb/commit/607b917753708a8ce8f6e3c5672c0c48c6c66eaa",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/openejb/blob/607b917753708a8ce8f6e3c5672c0c48c6c66eaa/openejb2/modules/core/src/test/org/openejb/cluster/server/E2EIntegrationTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb2/modules/core/src/test/org/openejb/cluster/server/E2EIntegrationTest.java?ref=607b917753708a8ce8f6e3c5672c0c48c6c66eaa",
                "deletions": 0,
                "filename": "openejb2/modules/core/src/test/org/openejb/cluster/server/E2EIntegrationTest.java",
                "patch": "@@ -82,6 +82,7 @@\n  * @version $Revision$ $Date$\n  */\n public class E2EIntegrationTest extends TestCase {\n+\n     private NodeInfo node1;\n     private NodeInfo node2;\n ",
                "raw_url": "https://github.com/apache/openejb/raw/607b917753708a8ce8f6e3c5672c0c48c6c66eaa/openejb2/modules/core/src/test/org/openejb/cluster/server/E2EIntegrationTest.java",
                "sha": "ba6d54ebc3c0f9716d40e339088091175df4e060",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/openejb/blob/607b917753708a8ce8f6e3c5672c0c48c6c66eaa/openejb2/modules/core/src/test/org/openejb/spring/spring.xml",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb2/modules/core/src/test/org/openejb/spring/spring.xml?ref=607b917753708a8ce8f6e3c5672c0c48c6c66eaa",
                "deletions": 1,
                "filename": "openejb2/modules/core/src/test/org/openejb/spring/spring.xml",
                "patch": "@@ -1,10 +1,15 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN//EN\" \"http://www.springframework.org/dtd/spring-beans.dtd\">\n <beans>\n+\n+  <bean id=\"XidFactory\" class=\"org.apache.geronimo.transaction.manager.XidFactoryImpl\">\n+  </bean>\n+\n   <bean id=\"TransactionManager\" class=\"org.apache.geronimo.transaction.manager.TransactionManagerImpl\">\n     <constructor-arg index=\"0\" value=\"100\"/>\n-    <constructor-arg index=\"1\"><null/></constructor-arg>\n+    <constructor-arg index=\"1\" ref=\"XidFactory\"/>\n     <constructor-arg index=\"2\"><null/></constructor-arg>\n+    <constructor-arg index=\"3\"><null/></constructor-arg>\n   </bean>\n \n   <bean id=\"TransactionContextManager\" class=\"org.apache.geronimo.transaction.context.TransactionContextManager\">",
                "raw_url": "https://github.com/apache/openejb/raw/607b917753708a8ce8f6e3c5672c0c48c6c66eaa/openejb2/modules/core/src/test/org/openejb/spring/spring.xml",
                "sha": "4425cf9c1100b6a511ccf950476db64081ffe13b",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/openejb/blob/607b917753708a8ce8f6e3c5672c0c48c6c66eaa/openejb2/modules/core/src/test/org/openejb/timer/TimerServiceImplTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb2/modules/core/src/test/org/openejb/timer/TimerServiceImplTest.java?ref=607b917753708a8ce8f6e3c5672c0c48c6c66eaa",
                "deletions": 1,
                "filename": "openejb2/modules/core/src/test/org/openejb/timer/TimerServiceImplTest.java",
                "patch": "@@ -71,6 +71,7 @@\n import org.apache.geronimo.transaction.context.TransactionContextManager;\n import org.apache.geronimo.transaction.context.UserTransactionImpl;\n import org.apache.geronimo.transaction.manager.TransactionManagerImpl;\n+import org.apache.geronimo.transaction.manager.XidFactoryImpl;\n import org.apache.geronimo.core.service.InvocationResult;\n import org.apache.geronimo.core.service.Invocation;\n import org.openejb.ExtendedEjbDeployment;\n@@ -113,7 +114,8 @@ public TimerServiceImplTest() {\n \n     protected void setUp() throws Exception {\n         super.setUp();\n-        TransactionManagerImpl transactionManager = new TransactionManagerImpl(10 * 1000, null, null);\n+        TransactionManagerImpl transactionManager = new TransactionManagerImpl(10 * 1000, \n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), null, null);\n         transactionContextManager = new TransactionContextManager(transactionManager, transactionManager);\n         executableWorkFactory = new TransactionalExecutorTaskFactory(transactionContextManager, 1);\n         threadPool = new ThreadPool(5, \"TestPool\", 10000, this.getClass().getClassLoader(), \"test:type=ThreadPool\");",
                "raw_url": "https://github.com/apache/openejb/raw/607b917753708a8ce8f6e3c5672c0c48c6c66eaa/openejb2/modules/core/src/test/org/openejb/timer/TimerServiceImplTest.java",
                "sha": "7229ecfc818c18974c159905589b25f6e32349b6",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/openejb/blob/607b917753708a8ce8f6e3c5672c0c48c6c66eaa/openejb2/modules/openejb-builder/src/test/org/openejb/deployment/DeploymentHelper.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb2/modules/openejb-builder/src/test/org/openejb/deployment/DeploymentHelper.java?ref=607b917753708a8ce8f6e3c5672c0c48c6c66eaa",
                "deletions": 0,
                "filename": "openejb2/modules/openejb-builder/src/test/org/openejb/deployment/DeploymentHelper.java",
                "patch": "@@ -73,6 +73,7 @@\n import org.apache.geronimo.timer.vm.VMStoreThreadPooledTransactionalTimer;\n import org.apache.geronimo.transaction.context.TransactionContextManagerGBean;\n import org.apache.geronimo.transaction.manager.TransactionManagerImplGBean;\n+import org.apache.geronimo.transaction.manager.XidFactoryImplGBean;\n import org.openejb.deployment.mdb.mockra.MockActivationSpec;\n import org.openejb.deployment.mdb.mockra.MockResourceAdapter;\n import org.openejb.slsb.DefaultStatelessEjbContainer;\n@@ -101,6 +102,7 @@\n     public static final ObjectName BMP_EJB_CONTAINER_NAME = JMXUtil.getObjectName(\"geronimo.test:name=Bmp,j2eeType=EjbContainer\");\n     public static final ObjectName CMP_EJB_CONTAINER_NAME = JMXUtil.getObjectName(\"geronimo.test:name=Cmp,j2eeType=EjbContainer\");\n     public static final ObjectName MDB_EJB_CONTAINER_NAME = JMXUtil.getObjectName(\"geronimo.test:name=Mdb,j2eeType=EjbContainer\");\n+    public static final ObjectName XIDFACTORY_NAME = JMXUtil.getObjectName(j2eeDomainName + \":type=\" + NameFactory.XID_FACTORY);\n     public static final ObjectName TRANSACTIONMANAGER_NAME = JMXUtil.getObjectName(j2eeDomainName + \":type=TransactionManager\");\n     public static final ObjectName TRANSACTIONCONTEXTMANAGER_NAME = JMXUtil.getObjectName(j2eeDomainName + \":type=TransactionContextManager\");\n     public static final ObjectName TRACKEDCONNECTIONASSOCIATOR_NAME = JMXUtil.getObjectName(\"geronimo.test:role=TrackedConnectionAssociator\");\n@@ -127,10 +129,15 @@\n     public static Kernel setUpKernelWithTransactionManager() throws Exception {\n         Kernel kernel = KernelHelper.getPreparedKernel();\n \n+        GBeanData xidFacGBean = new GBeanData(XIDFACTORY_NAME, XidFactoryImplGBean.GBEAN_INFO);\n+        xidFacGBean.setAttribute(\"tmId\", \"WHAT DO WE CALL IT?\".getBytes());\n+        start(kernel, xidFacGBean);\n+        \n         GBeanData tmGBean = new GBeanData(TRANSACTIONMANAGER_NAME, TransactionManagerImplGBean.GBEAN_INFO);\n         Set rmpatterns = new HashSet();\n         rmpatterns.add(ObjectName.getInstance(\"geronimo.server:j2eeType=JCAManagedConnectionFactory,*\"));\n         tmGBean.setAttribute(\"defaultTransactionTimeoutSeconds\", new Integer(100));\n+        tmGBean.setReferencePattern(\"XidFactory\", XIDFACTORY_NAME);\n         tmGBean.setReferencePatterns(\"ResourceManagers\", rmpatterns);\n         start(kernel, tmGBean);\n ",
                "raw_url": "https://github.com/apache/openejb/raw/607b917753708a8ce8f6e3c5672c0c48c6c66eaa/openejb2/modules/openejb-builder/src/test/org/openejb/deployment/DeploymentHelper.java",
                "sha": "73860b74126d7d9918e523df8daff4ca8569600b",
                "status": "modified"
            }
        ],
        "message": "GERONIMO-1599 HOWLLog throws NPE because XidFactory is missing\n\nExtract XidFactory from TransactionManagerImpl.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openejb/trunk@445979 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/29928a4eb69f0fd2ae1e3075629237fc3332553c",
        "patched_files": [
            "spring.java",
            "DeploymentHelper.java",
            "TimerServiceImpl.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "E2EIntegrationTest.java",
            "TimerServiceImplTest.java"
        ]
    },
    "openejb_638990f": {
        "bug_id": "openejb_638990f",
        "commit": "https://github.com/apache/openejb/commit/638990f60985adb04395a653fe69b472d3ca54fe",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/openejb/blob/638990f60985adb04395a653fe69b472d3ca54fe/openejb/container/openejb-core/src/main/java/org/apache/openejb/persistence/PersistenceUnitInfoImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/persistence/PersistenceUnitInfoImpl.java?ref=638990f60985adb04395a653fe69b472d3ca54fe",
                "deletions": 0,
                "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/persistence/PersistenceUnitInfoImpl.java",
                "patch": "@@ -327,6 +327,10 @@ public PersistenceClassFileTransformer(ClassTransformer classTransformer) {\n     // not the shouldSkip() method from UrlClassLoaderFirst since we skip more here\n     // we just need JPA stuff so all the tricks we have for the server part are useless\n     public static boolean isServerClass(final String name) {\n+        if (name == null) {\n+            return false;\n+        }\n+\n         for (String prefix : URLClassLoaderFirst.FORCED_SKIP) {\n             if (name.startsWith(prefix)) {\n                 return true;\n@@ -369,6 +373,7 @@ public static boolean isServerClass(final String name) {\n                 if (apache.startsWith(\"juli.\")) return true;\n                 if (apache.startsWith(\"webbeans.\")) return true;\n                 if (apache.startsWith(\"cxf.\")) return true;\n+                if (apache.startsWith(\"activemq.\")) return true;\n \n                 if (apache.startsWith(\"commons.\")) {\n                     final String commons = apache.substring(\"commons.\".length());",
                "raw_url": "https://github.com/apache/openejb/raw/638990f60985adb04395a653fe69b472d3ca54fe/openejb/container/openejb-core/src/main/java/org/apache/openejb/persistence/PersistenceUnitInfoImpl.java",
                "sha": "66405c519994f784c80b9b3a53c1b991186e605a",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/openejb/blob/638990f60985adb04395a653fe69b472d3ca54fe/openejb/container/openejb-core/src/main/java/org/apache/openejb/util/classloader/URLClassLoaderFirst.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/util/classloader/URLClassLoaderFirst.java?ref=638990f60985adb04395a653fe69b472d3ca54fe",
                "deletions": 0,
                "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/util/classloader/URLClassLoaderFirst.java",
                "patch": "@@ -169,6 +169,10 @@ public static boolean canBeLoadedFromSystem(final String name) {\n     // /!\\ please check org.apache.openejb.persistence.PersistenceUnitInfoImpl.isServerClass() too\n     // when updating this method\n     public static boolean shouldSkip(final String name) {\n+        if (name == null) { // can happen with rest servlet definition or errors\n+            return false;\n+        }\n+\n         for (String prefix : FORCED_SKIP) {\n             if (name.startsWith(prefix)) {\n                 return true;",
                "raw_url": "https://github.com/apache/openejb/raw/638990f60985adb04395a653fe69b472d3ca54fe/openejb/container/openejb-core/src/main/java/org/apache/openejb/util/classloader/URLClassLoaderFirst.java",
                "sha": "72b8b447adc30799e19e46edecf098f2762ff9ad",
                "status": "modified"
            },
            {
                "additions": 82,
                "blob_url": "https://github.com/apache/openejb/blob/638990f60985adb04395a653fe69b472d3ca54fe/openejb/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSRoutingTest.java",
                "changes": 82,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSRoutingTest.java?ref=638990f60985adb04395a653fe69b472d3ca54fe",
                "deletions": 0,
                "filename": "openejb/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSRoutingTest.java",
                "patch": "@@ -0,0 +1,82 @@\n+/*\n+ *     Licensed to the Apache Software Foundation (ASF) under one or more\n+ *     contributor license agreements.  See the NOTICE file distributed with\n+ *     this work for additional information regarding copyright ownership.\n+ *     The ASF licenses this file to You under the Apache License, Version 2.0\n+ *     (the \"License\"); you may not use this file except in compliance with\n+ *     the License.  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *     Unless required by applicable law or agreed to in writing, software\n+ *     distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *     See the License for the specific language governing permissions and\n+ *     limitations under the License.\n+ */\n+package org.apache.openejb.server.cxf.rs;\n+\n+import org.apache.cxf.jaxrs.client.ServerWebApplicationException;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.openejb.jee.WebApp;\n+import org.apache.openejb.junit.ApplicationComposer;\n+import org.apache.openejb.junit.Classes;\n+import org.apache.openejb.junit.EnableServices;\n+import org.apache.openejb.junit.Module;\n+import org.apache.openejb.server.cxf.rs.beans.*;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Application;\n+import javax.ws.rs.core.Response;\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@EnableServices(\"jax-rs\")\n+@RunWith(ApplicationComposer.class)\n+public class JAXRSRoutingTest {\n+    public static final String BASE_URL = \"http://localhost:4204/foo/\";\n+\n+    @Module\n+    @Classes({ RestWithInjections.class, SimpleEJB.class, MyExpertRestClass.class, MyFirstRestClass.class })\n+    public WebApp war() {\n+        return new WebApp()\n+                .contextRoot(\"foo\")\n+                .addServlet(\"REST Application\", Application.class.getName())\n+                .addInitParam(\"REST Application\", \"javax.ws.rs.Application\", NoClassAtPathApplication.class.getName());\n+    }\n+\n+    @Test\n+    public void routing() {\n+        assertEquals(\"routing\", WebClient.create(BASE_URL).path(\"routing\").get(String.class));\n+    }\n+\n+    public static class NoClassAtPathApplication extends Application {\n+        private final Set<Class<?>> classes = new HashSet<Class<?>>();\n+\n+        public NoClassAtPathApplication() {\n+            classes.add(FirstService.class);\n+        }\n+\n+        @Override\n+        public Set<Class<?>> getClasses() {\n+            return classes;\n+        }\n+    }\n+\n+    public static class FirstService {\n+        @Path(\"routing\")\n+        @GET\n+        public String routing() {\n+            return \"routing\";\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/openejb/raw/638990f60985adb04395a653fe69b472d3ca54fe/openejb/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSRoutingTest.java",
                "sha": "5e6db17a351001046aa1b4c422a086f5b16b0452",
                "status": "added"
            },
            {
                "additions": 83,
                "blob_url": "https://github.com/apache/openejb/blob/638990f60985adb04395a653fe69b472d3ca54fe/openejb/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSWithInterfaceTest.java",
                "changes": 83,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSWithInterfaceTest.java?ref=638990f60985adb04395a653fe69b472d3ca54fe",
                "deletions": 0,
                "filename": "openejb/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSWithInterfaceTest.java",
                "patch": "@@ -0,0 +1,83 @@\n+/*\n+ *     Licensed to the Apache Software Foundation (ASF) under one or more\n+ *     contributor license agreements.  See the NOTICE file distributed with\n+ *     this work for additional information regarding copyright ownership.\n+ *     The ASF licenses this file to You under the Apache License, Version 2.0\n+ *     (the \"License\"); you may not use this file except in compliance with\n+ *     the License.  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *     Unless required by applicable law or agreed to in writing, software\n+ *     distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *     See the License for the specific language governing permissions and\n+ *     limitations under the License.\n+ */\n+package org.apache.openejb.server.cxf.rs;\n+\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.openejb.jee.WebApp;\n+import org.apache.openejb.junit.ApplicationComposer;\n+import org.apache.openejb.junit.Classes;\n+import org.apache.openejb.junit.EnableServices;\n+import org.apache.openejb.junit.Module;\n+import org.apache.openejb.server.cxf.rs.beans.MyExpertRestClass;\n+import org.apache.openejb.server.cxf.rs.beans.MyFirstRestClass;\n+import org.apache.openejb.server.cxf.rs.beans.RestWithInjections;\n+import org.apache.openejb.server.cxf.rs.beans.SimpleEJB;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Application;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@EnableServices(\"jax-rs\")\n+@RunWith(ApplicationComposer.class)\n+public class JAXRSWithInterfaceTest {\n+    public static final String BASE_URL = \"http://localhost:4204/foo/\";\n+\n+    @Module\n+    @Classes({ RestWithInjections.class, SimpleEJB.class, MyExpertRestClass.class, MyFirstRestClass.class })\n+    public WebApp war() {\n+        return new WebApp()\n+                .contextRoot(\"foo\")\n+                .addServlet(\"REST Application\", Application.class.getName())\n+                .addInitParam(\"REST Application\", \"javax.ws.rs.Application\", InterfaceApp.class.getName());\n+    }\n+\n+    @Test\n+    public void itf() {\n+        assertEquals(\"itf\", WebClient.create(BASE_URL).path(\"itf\").get(String.class));\n+    }\n+\n+    public static class InterfaceApp extends Application {\n+        private final Set<Class<?>> classes = new HashSet<Class<?>>();\n+\n+        public InterfaceApp() {\n+            classes.add(Impl.class);\n+        }\n+\n+        @Override\n+        public Set<Class<?>> getClasses() {\n+            return classes;\n+        }\n+    }\n+\n+    public static interface Itf {\n+        @Path(\"itf\")\n+        @GET\n+        String itf();\n+    }\n+\n+    public static class Impl implements Itf {\n+        public String itf() {\n+            return \"itf\";\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/openejb/raw/638990f60985adb04395a653fe69b472d3ca54fe/openejb/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSWithInterfaceTest.java",
                "sha": "44417f03461322a7d8b89680cd3bf83eeda98881",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/openejb/blob/638990f60985adb04395a653fe69b472d3ca54fe/openejb/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java?ref=638990f60985adb04395a653fe69b472d3ca54fe",
                "deletions": 1,
                "filename": "openejb/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java",
                "patch": "@@ -71,7 +71,7 @@\n     private List<DeployedService> services = new ArrayList<DeployedService>();\n     private String virtualHost;\n     private boolean enabled = true;\n-    private String wildcard = SystemInstance.get().getProperty(\"openejb.rest.wildcard\", \".*\");\n+    private String wildcard = SystemInstance.get().getProperty(\"openejb.rest.wildcard\", \".*\"); // embedded = regex, tomee = servlet\n \n     public void afterApplicationCreated(final AppInfo appInfo, final WebAppInfo webApp) {\n         final WebContext webContext = containerSystem.getWebContext(webApp.moduleId);",
                "raw_url": "https://github.com/apache/openejb/raw/638990f60985adb04395a653fe69b472d3ca54fe/openejb/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java",
                "sha": "2d6859bea73bded948bba0790ffb25ffa0614e88",
                "status": "modified"
            }
        ],
        "message": "avoiding npe + some more jaxrs test\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1427453 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/b9986a203a7ac81b5101c3070687ad3ca5a6029e",
        "patched_files": [
            "PersistenceUnitInfoImpl.java",
            "URLClassLoaderFirst.java",
            "RESTService.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "JAXRSRoutingTest.java",
            "JAXRSWithInterfaceTest.java"
        ]
    },
    "openejb_6872ef0": {
        "bug_id": "openejb_6872ef0",
        "commit": "https://github.com/apache/openejb/commit/6872ef0ed6458feeb75785fb8571cb8529f7f442",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/openejb/blob/6872ef0ed6458feeb75785fb8571cb8529f7f442/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java?ref=6872ef0ed6458feeb75785fb8571cb8529f7f442",
                "deletions": 5,
                "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "patch": "@@ -101,6 +101,11 @@ public ConfigurationFactory() {\n         this(false);\n     }\n \n+    public ConfigurationFactory(boolean offline, OpenEjbConfiguration configuration) {\n+        this(offline);\n+        sys = configuration;\n+    }\n+\n     public static class Chain implements DynamicDeployer{\n         private final List<DynamicDeployer> chain = new ArrayList<DynamicDeployer>();\n \n@@ -670,9 +675,11 @@ private Properties getSystemProperties(String serviceId) {\n         List<String> resourceIds = new ArrayList<String>();\n \n         OpenEjbConfiguration runningConfig = getRunningConfig();\n-        for (ResourceInfo resourceInfo : runningConfig.facilities.resources) {\n-            if (isResourceType(resourceInfo.service, resourceInfo.types, type)) {\n-                resourceIds.add(resourceInfo.id);\n+        if (runningConfig != null) {\n+            for (ResourceInfo resourceInfo : runningConfig.facilities.resources) {\n+                if (isResourceType(resourceInfo.service, resourceInfo.types, type)) {\n+                    resourceIds.add(resourceInfo.id);\n+                }\n             }\n         }\n \n@@ -744,8 +751,10 @@ private boolean isResourceType(String service, List<String> types, String type)\n         List<ContainerInfo> containers = new ArrayList<ContainerInfo>();\n \n         OpenEjbConfiguration runningConfig = getRunningConfig();\n-        for (ContainerInfo containerInfo : runningConfig.containerSystem.containers) {\n-            containers.add(containerInfo);\n+        if (runningConfig != null) {\n+            for (ContainerInfo containerInfo : runningConfig.containerSystem.containers) {\n+                containers.add(containerInfo);\n+            }\n         }\n \n         if (sys != null) {",
                "raw_url": "https://github.com/apache/openejb/raw/6872ef0ed6458feeb75785fb8571cb8529f7f442/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "sha": "6cdddc4ea3380efc6f0fa013dc82d01f9955864f",
                "status": "modified"
            }
        ],
        "message": "GERONIMO-3481, there may be no running OpenEjbConfiguration so avoid NPEs, and allow construction of ConfigurationFactory with a known sys configuration.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@579046 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/9c0e46ceb960196f7adcee05f6f39757778c3075",
        "patched_files": [
            "ConfigurationFactory.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "ConfigurationFactoryTest.java"
        ]
    },
    "openejb_6e89279": {
        "bug_id": "openejb_6e89279",
        "commit": "https://github.com/apache/openejb/commit/6e89279aa062f97e98616e4ba280c54fa9849079",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/openejb/blob/6e89279aa062f97e98616e4ba280c54fa9849079/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/OpenEjb2Conversion.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/OpenEjb2Conversion.java?ref=6e89279aa062f97e98616e4ba280c54fa9849079",
                "deletions": 2,
                "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/OpenEjb2Conversion.java",
                "patch": "@@ -230,8 +230,10 @@ public void convertMdbConfigs(EjbJar ejbJar, OpenejbJarType openejbJarType) {\n \n     public void mergeEntityMappings(String moduleId, EntityMappings entityMappings, OpenejbJar openejbJar, OpenejbJarType openejbJarType) {\n         Map<String, EntityData> entities =  new TreeMap<String, EntityData>();\n-        for (Entity entity : entityMappings.getEntity()) {\n-            entities.put(entity.getDescription(), new EntityData(entity));\n+        if (entityMappings != null) {\n+            for (Entity entity : entityMappings.getEntity()) {\n+                entities.put(entity.getDescription(), new EntityData(entity));\n+            }\n         }\n         for (org.apache.openejb.jee.oejb2.EnterpriseBean enterpriseBean : openejbJarType.getEnterpriseBeans()) {\n             if (!(enterpriseBean instanceof EntityBeanType)) {",
                "raw_url": "https://github.com/apache/openejb/raw/6e89279aa062f97e98616e4ba280c54fa9849079/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/OpenEjb2Conversion.java",
                "sha": "83bcbadebdb0677ebb70bec580a4b413d0a0f519",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE (it seems to have broken Geronimo build today)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@606054 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/63a0657d9fcd7ad91b4312be036e691b0fc3ae5a",
        "patched_files": [
            "OpenEjb2Conversion.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "OpenEjb2ConversionTest.java"
        ]
    },
    "openejb_6eb2aa6": {
        "bug_id": "openejb_6eb2aa6",
        "commit": "https://github.com/apache/openejb/commit/6eb2aa65dd130ffd66f3d65d5f887ade3ef9afae",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/openejb/blob/6eb2aa65dd130ffd66f3d65d5f887ade3ef9afae/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java?ref=6eb2aa65dd130ffd66f3d65d5f887ade3ef9afae",
                "deletions": 5,
                "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java",
                "patch": "@@ -79,11 +79,7 @@ public AppModule deploy(AppModule appModule) throws OpenEJBException {\n             logger.info(\"Set the '\"+VALIDATION_LEVEL+\"' system property to \"+ join(\" or \", levels) +\" for increased validation details.\");\n         }\n \n-        validationFailedException = new ValidationFailedException(\"Module failed validation. \" + uberContext.getModuleType() + \"(name=\" + uberContext.getName() + \")\", uberContext, validationFailedException);\n-\n-        if (validationFailedException != null) throw validationFailedException;\n-\n-        return appModule;\n+        throw  new ValidationFailedException(\"Module failed validation. \" + uberContext.getModuleType() + \"(name=\" + uberContext.getName() + \")\", uberContext, validationFailedException);\n     }\n \n     private void logResults(ValidationContext context, Level level) {",
                "raw_url": "https://github.com/apache/openejb/raw/6eb2aa65dd130ffd66f3d65d5f887ade3ef9afae/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java",
                "sha": "fb0201cf2e440d6d4e1c24deee24b0fef408674f",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/openejb/blob/6eb2aa65dd130ffd66f3d65d5f887ade3ef9afae/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckCdiEnabled.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckCdiEnabled.java?ref=6eb2aa65dd130ffd66f3d65d5f887ade3ef9afae",
                "deletions": 2,
                "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckCdiEnabled.java",
                "patch": "@@ -17,15 +17,24 @@\n package org.apache.openejb.config.rules;\n \n import org.apache.openejb.config.EjbModule;\n+import org.apache.xbean.finder.IAnnotationFinder;\n \n import javax.inject.Inject;\n \n public class CheckCdiEnabled extends ValidationBase {\n     public void validate(EjbModule ejbModule) {\n+        if (ejbModule.getFinder() == null) {\n+            return;\n+        }\n+\n         if (ejbModule.getBeans() == null\n-                && (!ejbModule.getFinder().findAnnotatedMethods(Inject.class).isEmpty()\n-                || !ejbModule.getFinder().findAnnotatedFields(Inject.class).isEmpty())) {\n+                && hasAtInject(ejbModule.getFinder())) {\n             warn(ejbModule.getModuleId(), \"cdi.notEnabled\", ejbModule.getModuleId());\n         }\n     }\n+\n+    private static boolean hasAtInject(final IAnnotationFinder finder) {\n+        return !finder.findAnnotatedMethods(Inject.class).isEmpty()\n+                || !finder.findAnnotatedFields(Inject.class).isEmpty();\n+    }\n }",
                "raw_url": "https://github.com/apache/openejb/raw/6eb2aa65dd130ffd66f3d65d5f887ade3ef9afae/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckCdiEnabled.java",
                "sha": "3b56543648f34c8d5d36b07f3692553b399a3b51",
                "status": "modified"
            }
        ],
        "message": "avoiding NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1425860 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/805ee296026313b96981cf39d2df084e3c5f6bdd",
        "patched_files": [
            "CheckCdiEnabled.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "CheckCdiEnabledTest.java"
        ]
    },
    "openejb_7c68738": {
        "bug_id": "openejb_7c68738",
        "commit": "https://github.com/apache/openejb/commit/7c687383a58c83d472ec5d78244135a887dfdb8b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/openejb/blob/7c687383a58c83d472ec5d78244135a887dfdb8b/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java?ref=7c687383a58c83d472ec5d78244135a887dfdb8b",
                "deletions": 1,
                "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "patch": "@@ -808,7 +808,7 @@ private Beans mergeBeansXml(final Beans current, final URL url) {\n                 current.getInterceptors().addAll(beans.getInterceptors());\n             }\n             // check is done here since later we lost the data of the origin\n-            ReadDescriptors.checkDuplicatedByBeansXml(beans, current);\n+            ReadDescriptors.checkDuplicatedByBeansXml(beans, returnValue);\n         } catch (OpenEJBException e) {\n             logger.error(\"Unable to read beans.xml from :\" + url.toExternalForm());\n         }",
                "raw_url": "https://github.com/apache/openejb/raw/7c687383a58c83d472ec5d78244135a887dfdb8b/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "sha": "15a1be44b909fe695969c60e7fbf5a8e110c007f",
                "status": "modified"
            }
        ],
        "message": "NPE check\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1360040 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/9a859cb532e49ceff8b9473f898bdd77052069bc",
        "patched_files": [
            "DeploymentLoader.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "DeploymentLoaderTest.java"
        ]
    },
    "openejb_87e99fc": {
        "bug_id": "openejb_87e99fc",
        "commit": "https://github.com/apache/openejb/commit/87e99fce5ae041220709abbdb80b5ab071ae0ee8",
        "file": [
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/openejb/blob/87e99fce5ae041220709abbdb80b5ab071ae0ee8/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java?ref=87e99fce5ae041220709abbdb80b5ab071ae0ee8",
                "deletions": 0,
                "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "patch": "@@ -517,9 +517,18 @@ public DefaultService(String id, Class<? extends Service> type) {\n         info.properties = props;\n         info.constructorArgs.addAll(parseConstructorArgs(provider));\n \n+        specialProcessing(info);\n+\n+\n         return info;\n     }\n \n+    private <T extends ServiceInfo> void specialProcessing(T info) {\n+        ServiceInfo serviceInfo = info;\n+        TopicOrQueueDefaults.process(serviceInfo);\n+    }\n+\n+\n     @SuppressWarnings({\"unchecked\"})\n     private ServiceProvider resolveServiceProvider(Service service, Class infoType) throws OpenEJBException {\n \n@@ -736,4 +745,37 @@ private OpenEjbConfiguration getRunningConfig() {\n         return SystemInstance.get().getComponent(OpenEjbConfiguration.class);\n     }\n \n+\n+    private static class TopicOrQueueDefaults {\n+        public static void process(ServiceInfo provider) {\n+            if (!provider.service.equals(\"Resource\")) return;\n+            if (!provider.types.contains(\"Topic\") && !provider.types.contains(\"Queue\")) return;\n+            if (!provider.className.matches(\"org.apache.activemq.command.ActiveMQ(Topic|Queue)\")) return;\n+\n+\n+            Properties properties = provider.properties;\n+            String destination = normalizePropertyName(properties, \"destination\");\n+            if (properties.getProperty(destination) == null || properties.getProperty(destination).equals(\"\")){\n+                properties.setProperty(destination, provider.id);\n+            }\n+        }\n+\n+        /**\n+         * Our properties are not case sensitive, so they may have specified the name\n+         * under any case.  Would be super to have a case insensitive properties impl.\n+         * @param properties\n+         * @param property\n+         * @return the property name under any corrected case\n+         */\n+        private static String normalizePropertyName(Properties properties, String property) {\n+            for (Object o : properties.keySet()) {\n+                String name  = (String) o;\n+                if (name.equalsIgnoreCase(property)){\n+                    return name;\n+                }\n+            }\n+\n+            return property;\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/openejb/raw/87e99fce5ae041220709abbdb80b5ab071ae0ee8/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "sha": "d684dd6dc3010a1c9d1d126055b4c5a917efdff0",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/openejb/blob/87e99fce5ae041220709abbdb80b5ab071ae0ee8/openejb3/container/openejb-core/src/main/resources/META-INF/org.apache.openejb/service-jar.xml",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/resources/META-INF/org.apache.openejb/service-jar.xml?ref=87e99fce5ae041220709abbdb80b5ab071ae0ee8",
                "deletions": 7,
                "filename": "openejb3/container/openejb-core/src/main/resources/META-INF/org.apache.openejb/service-jar.xml",
                "patch": "@@ -278,7 +278,7 @@\n \n     # Default password\n \n-    Password  \n+    Password\n \n     # The connection properties that will be sent to the JDBC\n     # driver when establishing new connections\n@@ -413,7 +413,7 @@\n     # limit.\n     #\n     # NOTE - Some drivers have limits on the number of open\n-    # statements, so make sure there are some resources left \n+    # statements, so make sure there are some resources left\n     # for the other (non-prepared) statements.\n \n     MaxOpenPreparedStatements 0\n@@ -434,7 +434,7 @@\n     #\n     # NOTE: Do NOT close the underlying connection, only the\n     # original logical connection wrapper.\n-    \n+\n     AccessToUnderlyingConnectionAllowed\tfalse\n   </ServiceProvider>\n \n@@ -638,7 +638,7 @@\n \n     # Broker configuration\n     BrokerXmlConfig broker:(tcp://localhost:61616)?useJmx=false\n-    \n+\n     # Broker address\n     ServerUrl vm://localhost?async=true\n \n@@ -652,7 +652,7 @@\n           service=\"Resource\"\n           types=\"javax.jms.ConnectionFactory, javax.jms.QueueConnectionFactory, javax.jms.TopicConnectionFactory, QueueConnectionFactory, TopicConnectionFactory\"\n           class-name=\"org.apache.activemq.ra.ActiveMQManagedConnectionFactory\">\n-    \n+\n     ResourceAdapter Default JMS Resource Adapter\n \n     # Specifies if the connection is enrolled in global transaction\n@@ -678,7 +678,7 @@\n           types=\"javax.jms.Queue, Queue\"\n           constructor=\"destination\"\n           class-name=\"org.apache.activemq.command.ActiveMQQueue\">\n-    destination destination\n+    destination\n   </ServiceProvider>\n \n   <ServiceProvider\n@@ -687,7 +687,7 @@\n           types=\"javax.jms.Topic, Topic\"\n           constructor=\"destination\"\n           class-name=\"org.apache.activemq.command.ActiveMQTopic\">\n-    destination destination\n+    destination\n   </ServiceProvider>\n \n   <!--",
                "raw_url": "https://github.com/apache/openejb/raw/87e99fce5ae041220709abbdb80b5ab071ae0ee8/openejb3/container/openejb-core/src/main/resources/META-INF/org.apache.openejb/service-jar.xml",
                "sha": "95fb4ff15b1cd517ca0da76fe38a127c7cbc194f",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/openejb/blob/87e99fce5ae041220709abbdb80b5ab071ae0ee8/openejb3/container/openejb-core/src/test/java/org/apache/openejb/config/ConfigureServiceTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/test/java/org/apache/openejb/config/ConfigureServiceTest.java?ref=87e99fce5ae041220709abbdb80b5ab071ae0ee8",
                "deletions": 0,
                "filename": "openejb3/container/openejb-core/src/test/java/org/apache/openejb/config/ConfigureServiceTest.java",
                "patch": "@@ -19,6 +19,7 @@\n import junit.framework.TestCase;\n import org.apache.openejb.assembler.classic.StatelessSessionContainerInfo;\n import org.apache.openejb.assembler.classic.ContainerInfo;\n+import org.apache.openejb.assembler.classic.ResourceInfo;\n import org.apache.openejb.config.sys.Container;\n import org.apache.openejb.config.sys.Resource;\n \n@@ -135,5 +136,19 @@ public void testConfigureServiceAddedPropertyViaURI() throws Exception {\n         assertNotNull(myStatelessContainer.properties.getProperty(\"anotherProperty\"));\n         assertEquals(\"Cheese is good\", myStatelessContainer.properties.getProperty(\"anotherProperty\"));\n     }\n+\n+    public void testQueue() throws Exception {\n+        ConfigurationFactory factory = new ConfigurationFactory();\n+\n+        ResourceInfo resourceInfo = factory.configureService(new Resource(\"myQueue\", \"Queue\"), ResourceInfo.class);\n+\n+        assertNotNull(resourceInfo);\n+        assertEquals(\"myQueue\", resourceInfo.id);\n+        assertNotNull(resourceInfo.constructorArgs);\n+        assertNotNull(resourceInfo.properties);\n+        assertEquals(\"myQueue\", resourceInfo.properties.getProperty(\"destination\"));\n+    }\n+\n+\n }\n ",
                "raw_url": "https://github.com/apache/openejb/raw/87e99fce5ae041220709abbdb80b5ab071ae0ee8/openejb3/container/openejb-core/src/test/java/org/apache/openejb/config/ConfigureServiceTest.java",
                "sha": "09e0594e72c96024b64998680d6e9356fbd58eb2",
                "status": "modified"
            }
        ],
        "message": "When configuring a queue or topic, use the id of the <Resource> tag as the destination name allowing for something like this:\n  <Resource id=\"MyQueue\" type\"Queue\"/>\n\nFixes: OPENEJB-706: NullPointerException initializing activemq\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@607303 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/0d2eebc429b3f4c17109bc2a5e83c3804f0b7fe4",
        "patched_files": [
            "service-jar.java",
            "ConfigurationFactory.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "ConfigurationFactoryTest.java",
            "ConfigureServiceTest.java"
        ]
    },
    "openejb_a5291b4": {
        "bug_id": "openejb_a5291b4",
        "commit": "https://github.com/apache/openejb/commit/a5291b4cede0dfd49022a5b6af4fea15898640e3",
        "file": [
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/openejb/blob/a5291b4cede0dfd49022a5b6af4fea15898640e3/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java?ref=a5291b4cede0dfd49022a5b6af4fea15898640e3",
                "deletions": 20,
                "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "patch": "@@ -76,6 +76,7 @@\n import java.util.ArrayList;\n import java.util.Set;\n import java.util.LinkedHashSet;\n+import java.util.HashMap;\n import java.net.URL;\n import java.io.File;\n import java.io.IOException;\n@@ -250,29 +251,40 @@ void configureWebserviceSecurity(EjbJarInfo ejbJarInfo, EjbModule ejbModule) {\n \n         OpenejbJarType openejbJarType = (OpenejbJarType) altDD;\n \n+\n+        Map<String, org.apache.openejb.jee.oejb2.EnterpriseBean> beans = new HashMap<String, org.apache.openejb.jee.oejb2.EnterpriseBean>();\n+        for (org.apache.openejb.jee.oejb2.EnterpriseBean enterpriseBean : openejbJarType.getEnterpriseBeans()) {\n+            beans.put(enterpriseBean.getEjbName(), enterpriseBean);\n+        }\n+\n         List<PortInfo> infoList = ejbJarInfo.portInfos;\n         for (PortInfo portInfo : infoList) {\n-            String link = portInfo.serviceLink;\n-\n-            List<org.apache.openejb.jee.oejb2.EnterpriseBean> enterpriseBeans = openejbJarType.getEnterpriseBeans();\n-            for (org.apache.openejb.jee.oejb2.EnterpriseBean enterpriseBean : enterpriseBeans) {\n-                if (link.equals(enterpriseBean.getEjbName()) && enterpriseBean instanceof SessionBeanType) {\n-                    SessionBeanType sessionBean = (SessionBeanType) enterpriseBean;\n-                    WebServiceSecurityType webServiceSecurityType = sessionBean.getWebServiceSecurity();\n-                    portInfo.realmName = webServiceSecurityType.getRealmName();\n-                    portInfo.securityRealmName = webServiceSecurityType.getSecurityRealmName();\n-                    if (webServiceSecurityType.getTransportGuarantee() != null) {\n-                        portInfo.transportGuarantee = webServiceSecurityType.getTransportGuarantee().value();\n-                    } else {\n-                        portInfo.transportGuarantee = \"NONE\";\n-                    }\n \n-                    if (webServiceSecurityType.getAuthMethod() != null) {\n-                        portInfo.authMethod = webServiceSecurityType.getAuthMethod().value();\n-                    } else {\n-                        portInfo.authMethod = \"NONE\";\n-                    }\n-                }\n+            org.apache.openejb.jee.oejb2.EnterpriseBean bean = beans.get(portInfo.serviceLink);\n+\n+            if (bean == null) continue; /* TODO: throw something? */\n+            if (!(bean instanceof SessionBeanType)) continue; /* TODO: throw something? */\n+\n+            SessionBeanType sessionBean = (SessionBeanType) bean;\n+            WebServiceSecurityType webServiceSecurityType = sessionBean.getWebServiceSecurity();\n+\n+            if (webServiceSecurityType == null) {\n+                //TODO: this ok?\n+                continue;\n+            }\n+\n+            portInfo.realmName = webServiceSecurityType.getRealmName();\n+            portInfo.securityRealmName = webServiceSecurityType.getSecurityRealmName();\n+            if (webServiceSecurityType.getTransportGuarantee() != null) {\n+                portInfo.transportGuarantee = webServiceSecurityType.getTransportGuarantee().value();\n+            } else {\n+                portInfo.transportGuarantee = \"NONE\";\n+            }\n+\n+            if (webServiceSecurityType.getAuthMethod() != null) {\n+                portInfo.authMethod = webServiceSecurityType.getAuthMethod().value();\n+            } else {\n+                portInfo.authMethod = \"NONE\";\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/openejb/raw/a5291b4cede0dfd49022a5b6af4fea15898640e3/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "sha": "ca6b0a45c8aabbe51b5bfeeb03c7e8328a8025fc",
                "status": "modified"
            }
        ],
        "message": "Fix for OPENEJB-1021: NPE in AppInfoBuilder.configureWebserviceSecurity()\nNot sure if it's a good fix\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@767242 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/a6e9a418c1e3c931e4d32227934f8b83fa00ad3f",
        "patched_files": [
            "AppInfoBuilder.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "AppInfoBuilderTest.java"
        ]
    },
    "openejb_aae1e27": {
        "bug_id": "openejb_aae1e27",
        "commit": "https://github.com/apache/openejb/commit/aae1e27892b3d28852c6879949885b9de68c4514",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/openejb/blob/aae1e27892b3d28852c6879949885b9de68c4514/openejb3/assembly/openejb-tomcat/openejb-tomcat-catalina/src/main/java/org/apache/openejb/tomcat/catalina/TomcatJndiBuilder.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/assembly/openejb-tomcat/openejb-tomcat-catalina/src/main/java/org/apache/openejb/tomcat/catalina/TomcatJndiBuilder.java?ref=aae1e27892b3d28852c6879949885b9de68c4514",
                "deletions": 0,
                "filename": "openejb3/assembly/openejb-tomcat/openejb-tomcat-catalina/src/main/java/org/apache/openejb/tomcat/catalina/TomcatJndiBuilder.java",
                "patch": "@@ -397,6 +397,7 @@ public void mergeRef(NamingResources naming, ResourceEnvReferenceInfo ref) {\n \n         if (UserTransaction.class.getName().equals(ref.resourceEnvRefType)) {\n             resourceEnv.setProperty(Constants.FACTORY, UserTransactionFactory.class.getName());\n+            resourceEnv.setType(ref.resourceEnvRefType);\n         } else {\n             resourceEnv.setProperty(Constants.FACTORY, ResourceFactory.class.getName());\n             resourceEnv.setProperty(NAME, ref.resourceEnvRefName);",
                "raw_url": "https://github.com/apache/openejb/raw/aae1e27892b3d28852c6879949885b9de68c4514/openejb3/assembly/openejb-tomcat/openejb-tomcat-catalina/src/main/java/org/apache/openejb/tomcat/catalina/TomcatJndiBuilder.java",
                "sha": "fad9fd1201287a41bfd37ba05cac996fff408c9f",
                "status": "modified"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/openejb/blob/aae1e27892b3d28852c6879949885b9de68c4514/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "changes": 49,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=aae1e27892b3d28852c6879949885b9de68c4514",
                "deletions": 3,
                "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "patch": "@@ -21,7 +21,9 @@\n import org.apache.openejb.api.RemoteClient;\n import org.apache.openejb.loader.SystemInstance;\n import org.apache.openejb.core.webservices.JaxWsUtils;\n+import org.apache.openejb.core.TempClassLoader;\n import org.apache.xbean.finder.ClassFinder;\n+import org.apache.xbean.finder.UrlSet;\n import org.apache.openejb.jee.ActivationConfig;\n import org.apache.openejb.jee.ApplicationClient;\n import org.apache.openejb.jee.AroundInvoke;\n@@ -349,11 +351,20 @@ public ConnectorModule deploy(ConnectorModule connectorModule) throws OpenEJBExc\n \n         public WebModule deploy(WebModule webModule) throws OpenEJBException {\n             WebApp webApp = webModule.getWebApp();\n-            if (webApp != null && (webApp.isMetadataComplete() || !webApp.getServlet().isEmpty())) return webModule;\n+            if (webApp != null && (webApp.isMetadataComplete())) return webModule;\n \n             ClassFinder finder;\n             try {\n-                finder = new ClassFinder(webModule.getClassLoader());\n+                final ClassLoader webClassLoader = webModule.getClassLoader();\n+                ClassLoader parent = webClassLoader.getParent();\n+\n+                if (webClassLoader instanceof TempClassLoader) parent = parent.getParent();\n+\n+                UrlSet urlSet = new UrlSet(webClassLoader);\n+                urlSet = urlSet.exclude(parent);\n+                \n+                finder = new ClassFinder(webClassLoader, urlSet.getUrls());\n+                webModule.setFinder(finder);\n             } catch (Exception e) {\n                 startupLogger.warning(\"Unable to scrape for @WebService or @WebServiceProvider annotations. ClassFinder failed.\", e);\n                 return webModule;\n@@ -793,7 +804,7 @@ public WebModule deploy(WebModule webModule) throws OpenEJBException {\n             /*\n              * Classes added to this set will be scanned for annotations\n              */\n-            Set<Class<?>> classes = new HashSet<Class<?>>();\n+            Set<Class> classes = new HashSet<Class>();\n \n \n             ClassLoader classLoader = webModule.getClassLoader();\n@@ -919,6 +930,38 @@ public WebModule deploy(WebModule webModule) throws OpenEJBException {\n                 }\n             }\n \n+            ClassFinder finder = webModule.getFinder();\n+\n+            if (finder != null) {\n+                String[] webComponentAnnotations = {\n+                        \"javax.faces.bean.ManagedBean\",\n+                        \"javax.servlet.annotation.WebServlet\",\n+                        \"javax.servlet.annotation.WebServletContextListener\",\n+                        \"javax.servlet.annotation.ServletFilter\",\n+                };\n+\n+                List<Class<? extends Annotation>> annotations = new ArrayList<Class<? extends Annotation>>();\n+                for (String componentAnnotationName : webComponentAnnotations) {\n+                    try {\n+                        Class<?> clazz = classLoader.loadClass(componentAnnotationName);\n+                        annotations.add(clazz.asSubclass(Annotation.class));\n+                    } catch (ClassNotFoundException e) {\n+                        logger.debug(\"Support not enabled: \" + componentAnnotationName);\n+                    }\n+                }\n+\n+\n+                for (Class<? extends Annotation> annotation : annotations) {\n+                    logger.debug(\"Scanning for @\" + annotation.getName());\n+                    List<Class> list = finder.findAnnotatedClasses(annotation);\n+                    if (logger.isDebugEnabled()) for (Class clazz : list) {\n+                        logger.debug(\"Found \" + clazz.getName());\n+                    }\n+                    \n+                    classes.addAll(list);\n+                }\n+            }\n+\n             ClassFinder inheritedClassFinder = createInheritedClassFinder(classes.toArray(new Class<?>[classes.size()]));\n \n             /*",
                "raw_url": "https://github.com/apache/openejb/raw/aae1e27892b3d28852c6879949885b9de68c4514/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "sha": "15c10423056142bcd50e17704fe75b4fcd57d774",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/openejb/blob/aae1e27892b3d28852c6879949885b9de68c4514/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java?ref=aae1e27892b3d28852c6879949885b9de68c4514",
                "deletions": 20,
                "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "patch": "@@ -548,6 +548,30 @@ protected static WebModule createWebModule(String appId, String warPath, ClassLo\n         }\n \n         // determine war class path\n+        URL[] webUrls = getWebappUrls(warFile);\n+        ClassLoader warClassLoader = ClassLoaderUtil.createTempClassLoader(appId, webUrls, parentClassLoader);\n+\n+        // create web module\n+        WebModule webModule = new WebModule(webApp, contextRoot, warClassLoader, warFile.getAbsolutePath(), moduleName);\n+        webModule.getAltDDs().putAll(descriptors);\n+        webModule.getWatchedResources().add(warPath);\n+        webModule.getWatchedResources().add(warFile.getAbsolutePath());\n+        if (webXmlUrl != null && \"file\".equals(webXmlUrl.getProtocol())) {\n+            webModule.getWatchedResources().add(URLs.toFilePath(webXmlUrl));\n+        }\n+\n+        // find all tag libs\n+        addTagLibraries(webModule);\n+\n+        // load webservices descriptor\n+        addWebservices(webModule);\n+\n+        // load faces configuration files\n+        addFacesConfigs(webModule);\n+        return webModule;\n+    }\n+\n+    public static URL[] getWebappUrls(File warFile) {\n         List<URL> webClassPath = new ArrayList<URL>();\n         File webInfDir = new File(warFile, \"WEB-INF\");\n         try {\n@@ -571,26 +595,7 @@ protected static WebModule createWebModule(String appId, String warPath, ClassLo\n \n         // create the class loader\n         URL[] webUrls = webClassPath.toArray(new URL[webClassPath.size()]);\n-        ClassLoader warClassLoader = ClassLoaderUtil.createTempClassLoader(appId, webUrls, parentClassLoader);\n-\n-        // create web module\n-        WebModule webModule = new WebModule(webApp, contextRoot, warClassLoader, warFile.getAbsolutePath(), moduleName);\n-        webModule.getAltDDs().putAll(descriptors);\n-        webModule.getWatchedResources().add(warPath);\n-        webModule.getWatchedResources().add(warFile.getAbsolutePath());\n-        if (webXmlUrl != null && \"file\".equals(webXmlUrl.getProtocol())) {\n-            webModule.getWatchedResources().add(URLs.toFilePath(webXmlUrl));\n-        }\n-\n-        // find all tag libs\n-        addTagLibraries(webModule);\n-\n-        // load webservices descriptor\n-        addWebservices(webModule);\n-\n-        // load faces configuration files\n-        addFacesConfigs(webModule);\n-        return webModule;\n+        return webUrls;\n     }\n \n     private static void addWebservices(WsModule wsModule) throws OpenEJBException {",
                "raw_url": "https://github.com/apache/openejb/raw/aae1e27892b3d28852c6879949885b9de68c4514/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "sha": "4031e449d2f7ec127c65589afc611f66594ea6cc",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/openejb/blob/aae1e27892b3d28852c6879949885b9de68c4514/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/WebModule.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/WebModule.java?ref=aae1e27892b3d28852c6879949885b9de68c4514",
                "deletions": 0,
                "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/WebModule.java",
                "patch": "@@ -23,11 +23,13 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.TreeSet;\n+import java.util.concurrent.atomic.AtomicReference;\n \n import org.apache.openejb.jee.FacesConfig;\n import org.apache.openejb.jee.TldTaglib;\n import org.apache.openejb.jee.WebApp;\n import org.apache.openejb.jee.Webservices;\n+import org.apache.xbean.finder.ClassFinder;\n \n /**\n  * @version $Rev$ $Date$\n@@ -47,6 +49,8 @@\n     private final Set<String> watchedResources = new TreeSet<String>();\n     // List of all faces configuration files found in this web module\n     private final List<FacesConfig> facesConfigs = new ArrayList<FacesConfig>();\n+    private ClassFinder finder;\n+\n \n     public WebModule(WebApp webApp, String contextRoot, ClassLoader classLoader, String jarLocation, String moduleId) {\n         this.webApp = webApp;\n@@ -82,6 +86,14 @@ public WebModule(WebApp webApp, String contextRoot, ClassLoader classLoader, Str\n         validation = new ValidationContext(WebModule.class, jarLocation);\n     }\n \n+    public ClassFinder getFinder() {\n+        return finder;\n+    }\n+\n+    public void setFinder(ClassFinder finder) {\n+        this.finder = finder;\n+    }\n+\n     public ValidationContext getValidation() {\n         return validation;\n     }",
                "raw_url": "https://github.com/apache/openejb/raw/aae1e27892b3d28852c6879949885b9de68c4514/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/WebModule.java",
                "sha": "a51b291570263fd6b17ac9647163777b58cbfd5c",
                "status": "modified"
            }
        ],
        "message": "OPENEJB-1044: Webapp @Resource UserTransaction injection results in NullPointerException\nOPENEJB-1045: Injection support for JSF 2.0 ManagedBeans\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@785901 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/d35eeabf7013a6b7e6a4c951bd2cfce5b4f84c64",
        "patched_files": [
            "DeploymentLoader.java",
            "AnnotationDeployer.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "AnnotationDeployerTest.java",
            "DeploymentLoaderTest.java"
        ]
    },
    "openejb_c5c7c0c": {
        "bug_id": "openejb_c5c7c0c",
        "commit": "https://github.com/apache/openejb/commit/c5c7c0c7c4d0083c63a85f46e479c7a536da62a5",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/openejb/blob/c5c7c0c7c4d0083c63a85f46e479c7a536da62a5/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckDescriptorLocation.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckDescriptorLocation.java?ref=c5c7c0c7c4d0083c63a85f46e479c7a536da62a5",
                "deletions": 2,
                "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckDescriptorLocation.java",
                "patch": "@@ -29,6 +29,8 @@\n import java.net.URL;\n import java.util.*;\n \n+import static org.apache.openejb.util.CollectionsUtil.safe;\n+\n \n public class CheckDescriptorLocation extends ValidationBase {\n \n@@ -40,13 +42,13 @@ public void validate(AppModule appModule){\n \n         List<String> validated = new ArrayList<String>();\n \n-        for(WebModule webModule:appModule.getWebModules())\n+        for(WebModule webModule: safe(appModule.getWebModules()))\n         {\n             validated.add(webModule.getModuleId());\n             validateWebModule(webModule);\n         }\n \n-        for(EjbModule ejbModule:appModule.getEjbModules())\n+        for(EjbModule ejbModule: safe(appModule.getEjbModules()))\n         {\n             //without this check, CheckDescriptorLocationTest#testWarWithDescriptorInRoot() would fail\n             if(!validated.contains(ejbModule.getModuleId()))\n@@ -57,6 +59,9 @@ public void validate(AppModule appModule){\n \n     }\n \n+\n+\n+\n     private void validateWebModule(DeploymentModule webModule) {\n         URL baseUrl = null;\n         this.module= webModule;",
                "raw_url": "https://github.com/apache/openejb/raw/c5c7c0c7c4d0083c63a85f46e479c7a536da62a5/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckDescriptorLocation.java",
                "sha": "6506cf50fb131ce4186b96085d686d7ecfe09a13",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/openejb/blob/c5c7c0c7c4d0083c63a85f46e479c7a536da62a5/openejb/container/openejb-core/src/main/java/org/apache/openejb/util/CollectionsUtil.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/util/CollectionsUtil.java?ref=c5c7c0c7c4d0083c63a85f46e479c7a536da62a5",
                "deletions": 0,
                "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/util/CollectionsUtil.java",
                "patch": "@@ -0,0 +1,32 @@\n+/**\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.openejb.util;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.List;\r\n+\r\n+public class CollectionsUtil\r\n+{\r\n+    public static <T> List<T> safe(List<T> list)\r\n+    {\r\n+        if(list==null)\r\n+        {   return Collections.emptyList();\r\n+        }\r\n+        return list;\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/openejb/raw/c5c7c0c7c4d0083c63a85f46e479c7a536da62a5/openejb/container/openejb-core/src/main/java/org/apache/openejb/util/CollectionsUtil.java",
                "sha": "e6849714f2da4e1b40ecd6a3433072bcfa21d6f9",
                "status": "added"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/openejb/blob/c5c7c0c7c4d0083c63a85f46e479c7a536da62a5/openejb/container/openejb-core/src/test/java/org/apache/openejb/util/CollectionsUtilTest.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/test/java/org/apache/openejb/util/CollectionsUtilTest.java?ref=c5c7c0c7c4d0083c63a85f46e479c7a536da62a5",
                "deletions": 0,
                "filename": "openejb/container/openejb-core/src/test/java/org/apache/openejb/util/CollectionsUtilTest.java",
                "patch": "@@ -0,0 +1,36 @@\n+/**\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.openejb.util;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import java.util.List;\r\n+\r\n+public class CollectionsUtilTest {\r\n+\r\n+    @Test\r\n+    public void safeIterationForNullList()\r\n+    {\r\n+        List<String> stringList =null;\r\n+        for(String string: CollectionsUtil.safe(stringList))\r\n+        {\r\n+        }\r\n+\r\n+        //PASS: No NPE thrown\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/openejb/raw/c5c7c0c7c4d0083c63a85f46e479c7a536da62a5/openejb/container/openejb-core/src/test/java/org/apache/openejb/util/CollectionsUtilTest.java",
                "sha": "2001f22ca1b2f858709032913185121807fd2fbb",
                "status": "added"
            }
        ],
        "message": "Avoid NPE during emptyList forEach\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1377486 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/4aaef00a46af74371c3efd6039b7e3e9df81361f",
        "patched_files": [
            "CollectionsUtil.java",
            "CheckDescriptorLocation.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "CheckDescriptorLocationTest.java",
            "CollectionsUtilTest.java"
        ]
    },
    "openejb_d963464": {
        "bug_id": "openejb_d963464",
        "commit": "https://github.com/apache/openejb/commit/d96346433b963cb13c68abdcd5e3bc3ce1767f70",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/openejb/blob/d96346433b963cb13c68abdcd5e3bc3ce1767f70/openejb3/assembly/openejb-tomcat/openejb-tomcat-webapp/src/main/resources/META-INF/org.apache.openejb.tomcat/service-jar.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/assembly/openejb-tomcat/openejb-tomcat-webapp/src/main/resources/META-INF/org.apache.openejb.tomcat/service-jar.xml?ref=d96346433b963cb13c68abdcd5e3bc3ce1767f70",
                "deletions": 0,
                "filename": "openejb3/assembly/openejb-tomcat/openejb-tomcat-webapp/src/main/resources/META-INF/org.apache.openejb.tomcat/service-jar.xml",
                "patch": "@@ -641,6 +641,7 @@\n   <ServiceProvider\n           id=\"Default JMS Resource Adapter\"\n           service=\"Resource\"\n+          types=\"ActiveMQResourceAdapter\"\n           class-name=\"org.apache.activemq.ra.ActiveMQResourceAdapter\">\n \n     # Broker configuration",
                "raw_url": "https://github.com/apache/openejb/raw/d96346433b963cb13c68abdcd5e3bc3ce1767f70/openejb3/assembly/openejb-tomcat/openejb-tomcat-webapp/src/main/resources/META-INF/org.apache.openejb.tomcat/service-jar.xml",
                "sha": "c0a268bd5a4c77d226fa2096bc2f65c4daec6ae6",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/openejb/blob/d96346433b963cb13c68abdcd5e3bc3ce1767f70/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java?ref=d96346433b963cb13c68abdcd5e3bc3ce1767f70",
                "deletions": 3,
                "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "patch": "@@ -820,18 +820,21 @@ public void createProxyFactory(ProxyFactoryInfo serviceInfo) throws OpenEJBExcep\n     private void replaceResourceAdapterProperty(ObjectRecipe serviceRecipe) throws OpenEJBException {\n         Object resourceAdapterId = serviceRecipe.getProperty(\"ResourceAdapter\");\n         if (resourceAdapterId instanceof String)  {\n+            String id = (String) resourceAdapterId;\n+            id = id.trim();\n+\n             Object resourceAdapter = null;\n             try {\n-                resourceAdapter = containerSystem.getJNDIContext().lookup(\"java:openejb/Resource/\" + resourceAdapterId);\n+                resourceAdapter = containerSystem.getJNDIContext().lookup(\"java:openejb/Resource/\" + id);\n             } catch (NamingException e) {\n                 // handled below\n             }\n \n             if (resourceAdapter == null) {\n-                throw new OpenEJBException(\"No existing resource adapter defined with id '\" + resourceAdapterId + \"'.\");\n+                throw new OpenEJBException(\"No existing resource adapter defined with id '\" + id + \"'.\");\n             }\n             if (!(resourceAdapter instanceof ResourceAdapter)) {\n-                throw new OpenEJBException(\"Resource adapter defined with id '\" + resourceAdapterId + \"' is not an instance of ResourceAdapter, \" +\n+                throw new OpenEJBException(\"Resource adapter defined with id '\" + id + \"' is not an instance of ResourceAdapter, \" +\n                         \"but is an instance of \" + resourceAdapter.getClass());\n             }\n             serviceRecipe.setProperty(\"ResourceAdapter\", resourceAdapter);",
                "raw_url": "https://github.com/apache/openejb/raw/d96346433b963cb13c68abdcd5e3bc3ce1767f70/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "sha": "d75d5992496174c419a06821377f529e33a03939",
                "status": "modified"
            },
            {
                "additions": 148,
                "blob_url": "https://github.com/apache/openejb/blob/d96346433b963cb13c68abdcd5e3bc3ce1767f70/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "changes": 196,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java?ref=d96346433b963cb13c68abdcd5e3bc3ce1767f70",
                "deletions": 48,
                "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "patch": "@@ -64,8 +64,11 @@\n import org.apache.openejb.util.Logger;\n import org.apache.openejb.util.Messages;\n import org.apache.openejb.util.URISupport;\n+import org.apache.openejb.util.Join;\n \n import java.io.File;\n+import java.io.DataOutputStream;\n+import java.io.PrintWriter;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.util.ArrayList;\n@@ -75,11 +78,12 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n+import java.util.Comparator;\n \n public class ConfigurationFactory implements OpenEjbConfigurationFactory {\n \n-    private static final Logger logger = Logger.getInstance(LogCategory.OPENEJB_STARTUP_CONFIG, \"org.apache.openejb.util.resources\");\n-    private static final Messages messages = new Messages(\"org.apache.openejb.util.resources\");\n+    private static final Logger logger = Logger.getInstance(LogCategory.OPENEJB_STARTUP_CONFIG, ConfigurationFactory.class);\n+    private static final Messages messages = new Messages(ConfigurationFactory.class);\n \n     private String configLocation = \"\";\n \n@@ -250,10 +254,16 @@ public OpenEjbConfiguration getOpenEjbConfiguration() throws OpenEJBException {\n \n         sys.facilities.transactionService = configureService(openejb.getTransactionManager(), TransactionServiceInfo.class);\n \n+        List<ResourceInfo> resources = new ArrayList<ResourceInfo>();\n         for (Resource resource : openejb.getResource()) {\n             ResourceInfo resourceInfo = configureService(resource, ResourceInfo.class);\n-            sys.facilities.resources.add(resourceInfo);\n+            resources.add(resourceInfo);\n         }\n+        Collections.sort(resources, new ResourceInfoComparator(resources));\n+\n+        sys.facilities.resources.addAll(resources);\n+\n+\n \n //        ConnectionManagerInfo service = configureService(openejb.getConnectionManager(), ConnectionManagerInfo.class);\n //        sys.facilities.connectionManagers.add(service);\n@@ -363,14 +373,12 @@ public AppInfo configureApplication(File jarFile) throws OpenEJBException {\n             AppModule appModule = deploymentLoader.load(jarFile);\n             appInfo = configureApplication(appModule);\n         } catch (ValidationFailedException e) {\n-            String message = messages.format(\"conf.0004\", jarFile.getAbsolutePath(), e.getMessage());\n-            logger.warning(message); // DO not include the stacktrace in the message\n+            logger.warning(\"configureApplication.loadFailed\", jarFile.getAbsolutePath(), e.getMessage()); // DO not include the stacktrace in the message\n             throw e;\n         } catch (OpenEJBException e) {\n-            String message = messages.format(\"conf.0004\", jarFile.getAbsolutePath(), e.getMessage());\n             // DO NOT REMOVE THE EXCEPTION FROM THIS LOG MESSAGE\n             // removing this message causes NO messages to be printed when embedded\n-            logger.warning(message, e);\n+            logger.warning(\"configureApplication.loadFailed\", e, jarFile.getAbsolutePath(), e.getMessage());\n             throw e;\n         }\n         return appInfo;\n@@ -452,75 +460,109 @@ public DefaultService(String id, Class<? extends Service> type) {\n \n \n     public <T extends ServiceInfo> T configureService(Class<? extends T> type) throws OpenEJBException {\n-        Service service = getDefaultService(type);\n-\n-        return configureService(service, type);\n+        return configureService((Service)null, type);\n     }\n \n     private <T extends ServiceInfo>Service getDefaultService(Class<? extends T> type) throws OpenEJBException {\n         DefaultService defaultService = defaultProviders.get(type);\n \n+        if (defaultService == null) return null;\n+\n         Service service;\n         try {\n             service = JaxbOpenejb.create(defaultService.type);\n             service.setType(defaultService.id);\n         } catch (Exception e) {\n-            throw new OpenEJBException(\"Cannot instantiate class \" + defaultService.type.getName(), e);\n+            String name = (defaultService == null || defaultService.type == null) ? \"null\" : defaultService.type.getName();\n+            throw new OpenEJBException(\"Cannot instantiate class \" + name, e);\n         }\n         return service;\n     }\n \n \n     public <T extends ServiceInfo> T configureService(Service service, Class<? extends T> infoType) throws OpenEJBException {\n-        if (infoType == null) throw new NullPointerException(\"type\");\n-\n-        if (service == null) {\n-            service = getDefaultService(infoType);\n-        }\n+        try {\n+            if (infoType == null) throw new NullPointerException(\"type\");\n \n-        String providerType = service.getClass().getSimpleName();\n+            if (service == null) {\n+                service = getDefaultService(infoType);\n+                if (service == null){\n+                    throw new OpenEJBException(messages.format(\"configureService.noDefaultService\", infoType.getName()));\n+                }\n+            }\n \n-        ServiceProvider provider = resolveServiceProvider(service, infoType);\n \n-        if (provider == null){\n-            throw new NoSuchProviderException(\"Cannot determine a default provider for Service(\"+service.getId() +\", \"+infoType.getSimpleName()+\")\");\n-        }\n+            String providerType = service.getClass().getSimpleName();\n+\n+            ServiceProvider provider = resolveServiceProvider(service, infoType);\n+\n+            if (provider == null){\n+                List<ServiceProvider> providers = ServiceUtils.getServiceProvidersByServiceType(providerType);\n+                StringBuilder sb = new StringBuilder();\n+//                for (ServiceProvider p : providers) {\n+//                    sb.append(System.getProperty(\"line.separator\"));\n+//                    sb.append(\"  <\").append(p.getService());\n+//                    sb.append(\" id=\\\"\").append(service.getId()).append('\"');\n+//                    sb.append(\" provider=\\\"\").append(p.getId()).append(\"\\\"/>\");\n+//                }\n+\n+                List<String> types = new ArrayList<String>();\n+                for (ServiceProvider p : providers) {\n+                    for (String type : p.getTypes()) {\n+                        if (types.contains(type)) continue;\n+                        types.add(type);\n+                        sb.append(System.getProperty(\"line.separator\"));\n+                        sb.append(\"  <\").append(p.getService());\n+                        sb.append(\" id=\\\"\").append(service.getId()).append('\"');\n+                        sb.append(\" type=\\\"\").append(type).append(\"\\\"/>\");\n+                    }\n+                }\n+                String noProviderMessage = messages.format(\"configureService.noProviderForService\", providerType, service.getId(), service.getType(), service.getProvider(), sb.toString());\n+                throw new NoSuchProviderException(noProviderMessage);\n+            }\n \n-        if (service.getId() == null) service.setId(provider.getId());\n+            if (service.getId() == null) service.setId(provider.getId());\n \n-        logger.info(\"Configuring Service(id=\" + service.getId() + \", type=\" + provider.getService() + \", provider-id=\" + provider.getId() + \")\");\n+            logger.info(\"configureService.configuring\", service.getId(), provider.getService(), provider.getId());\n \n-        Properties props = new Properties();\n-        props.putAll(provider.getProperties());\n-        props.putAll(service.getProperties());\n-        props.putAll(getSystemProperties(service.getId(), provider.getService()));\n+            Properties props = new Properties();\n+            props.putAll(provider.getProperties());\n+            props.putAll(service.getProperties());\n+            props.putAll(getSystemProperties(service.getId(), provider.getService()));\n \n-        if (providerType != null && !provider.getService().equals(providerType)) {\n-            throw new OpenEJBException(messages.format(\"conf.4902\", service.getId(), providerType));\n-        }\n+            if (providerType != null && !provider.getService().equals(providerType)) {\n+                throw new OpenEJBException(messages.format(\"configureService.wrongProviderType\", service.getId(), providerType));\n+            }\n \n-        T info;\n+            T info;\n \n-        try {\n-            info = infoType.newInstance();\n-        } catch (Exception e) {\n-            throw new OpenEJBException(\"Cannot instantiate class \" + infoType.getName(), e);\n-        }\n+            try {\n+                info = infoType.newInstance();\n+            } catch (Exception e) {\n+                throw new OpenEJBException(\"Cannot instantiate class \" + infoType.getName(), e);\n+            }\n \n-        info.service = provider.getService();\n-        info.types.addAll(provider.getTypes());\n-        info.description = provider.getDescription();\n-        info.displayName = provider.getDisplayName();\n-        info.className = provider.getClassName();\n-        info.factoryMethod = provider.getFactoryName();\n-        info.id = service.getId();\n-        info.properties = props;\n-        info.constructorArgs.addAll(parseConstructorArgs(provider));\n+            info.service = provider.getService();\n+            info.types.addAll(provider.getTypes());\n+            info.description = provider.getDescription();\n+            info.displayName = provider.getDisplayName();\n+            info.className = provider.getClassName();\n+            info.factoryMethod = provider.getFactoryName();\n+            info.id = service.getId();\n+            info.properties = props;\n+            info.constructorArgs.addAll(parseConstructorArgs(provider));\n \n-        specialProcessing(info);\n+            specialProcessing(info);\n \n \n-        return info;\n+            return info;\n+        } catch (NoSuchProviderException e) {\n+            String message = logger.fatal(\"configureService.failed\", e, service.getId());\n+            throw new OpenEJBException(message + \": \" + e.getMessage());\n+        } catch (Throwable e) {\n+            String message = logger.fatal(\"configureService.failed\", e, service.getId());\n+            throw new OpenEJBException(message, e);\n+        }\n     }\n \n     private <T extends ServiceInfo> void specialProcessing(T info) {\n@@ -549,7 +591,9 @@ private ServiceProvider resolveServiceProvider(Service service, Class infoType)\n \n         if (infoType != null) {\n             Service defaultService = getDefaultService(infoType);\n-            return resolveServiceProvider(defaultService, null);\n+            if (defaultService != null) {\n+                return resolveServiceProvider(defaultService, null);\n+            }\n         }\n \n         return null;\n@@ -778,4 +822,60 @@ private static String normalizePropertyName(Properties properties, String proper\n             return property;\n         }\n     }\n+\n+    public static class ResourceInfoComparator implements Comparator<ResourceInfo> {\n+        private final List<String> ids;\n+\n+        public ResourceInfoComparator(List<ResourceInfo> resources){\n+            ids = new ArrayList<String>();\n+            for (ResourceInfo info : resources) {\n+                ids.add(info.id);\n+            }\n+        }\n+\n+        public int compare(ResourceInfo a, ResourceInfo b) {\n+            String refA = getReference(a);\n+            String refB = getReference(b);\n+\n+            // both null or the same id\n+            if (refA == refB) return 0;\n+\n+            // b is null\n+            if (refA != null && refB == null){\n+                return 1;\n+            }\n+\n+            // a is null\n+            if (refB != null && refA == null){\n+                return -1;\n+            }\n+\n+            // b is referencing a\n+            if (a.id.equals(refB)) {\n+                return 1;\n+            }\n+\n+            // a is referencing b\n+            if (b.id.equals(refA)) {\n+                return 1;\n+            }\n+\n+            return 0;\n+        }\n+\n+        public int hasReference(ResourceInfo info){\n+            for (Object value : info.properties.values()) {\n+                if (ids.contains(value)) return 1;\n+            }\n+            return 0;\n+        }\n+\n+        public String getReference(ResourceInfo info){\n+            for (Object value : info.properties.values()) {\n+                value = ((String)value).trim();\n+                if (ids.contains(value)) return (String) value;\n+            }\n+            return null;\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/openejb/raw/d96346433b963cb13c68abdcd5e3bc3ce1767f70/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java",
                "sha": "9a8df2c66688377961c85b7c15d71878f92682ef",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/openejb/blob/d96346433b963cb13c68abdcd5e3bc3ce1767f70/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ServiceUtils.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ServiceUtils.java?ref=d96346433b963cb13c68abdcd5e3bc3ce1767f70",
                "deletions": 7,
                "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ServiceUtils.java",
                "patch": "@@ -63,7 +63,7 @@ public static boolean hasServiceProvider(String id) {\n         try {\n             ProviderInfo info = getProviderInfo(id);\n \n-            List<ServiceProvider> services = getServices(info.getPackageName());\n+            List<ServiceProvider> services = getServiceProviders(info.getPackageName());\n \n             for (ServiceProvider service : services) {\n                 if (service.getId().equals(id)) {\n@@ -79,7 +79,7 @@ public static boolean hasServiceProvider(String id) {\n     public static ServiceProvider getServiceProvider(String id) throws OpenEJBException {\n         ProviderInfo info = getProviderInfo(id);\n \n-        List<ServiceProvider> services = getServices(info.getPackageName());\n+        List<ServiceProvider> services = getServiceProviders(info.getPackageName());\n \n         for (ServiceProvider service : services) {\n             if (service.getId().equals(info.getServiceName())) {\n@@ -95,10 +95,27 @@ public static String getServiceProviderId(String type) throws OpenEJBException {\n         return provider != null? provider.getId(): null;\n     }\n \n+\n+    public static List<ServiceProvider> getServiceProvidersByServiceType(String type) throws OpenEJBException {\n+        ArrayList<ServiceProvider> providers = new ArrayList<ServiceProvider>();\n+        if (type == null) return providers;\n+\n+        List<ServiceProvider> services = getServiceProviders(defaultProviderURL);\n+\n+        for (ServiceProvider service : services) {\n+            if (service.getService().equals(type)) {\n+                providers.add(service);\n+            }\n+        }\n+\n+        return providers;\n+    }\n+\n+\n     public static ServiceProvider getServiceProviderByType(String type) throws OpenEJBException {\n         if (type == null) return null;\n \n-        List<ServiceProvider> services = getServices(defaultProviderURL);\n+        List<ServiceProvider> services = getServiceProviders(defaultProviderURL);\n \n         for (ServiceProvider service : services) {\n             if (service.getTypes().contains(type)) {\n@@ -112,11 +129,9 @@ public static ServiceProvider getServiceProviderByType(String type) throws OpenE\n     public static ServiceProvider getServiceProviderByType(String providerType, String serviceType) throws OpenEJBException {\n         if (serviceType == null) return null;\n \n-        List<ServiceProvider> services = getServices(defaultProviderURL);\n+        List<ServiceProvider> services = getServiceProvidersByServiceType(providerType);\n \n         for (ServiceProvider service : services) {\n-            if (!service.getService().equals(providerType)) continue;\n-            \n             if (service.getTypes().contains(serviceType)) {\n                 return service;\n             }\n@@ -125,7 +140,11 @@ public static ServiceProvider getServiceProviderByType(String providerType, Stri\n         return null;\n     }\n \n-    private static List<ServiceProvider> getServices(String packageName) throws OpenEJBException {\n+    public static List<ServiceProvider> getServiceProviders() throws OpenEJBException {\n+        return getServiceProviders(defaultProviderURL);\n+    }\n+\n+    public static List<ServiceProvider> getServiceProviders(String packageName) throws OpenEJBException {\n         List<ServiceProvider> services = loadedServiceJars.get(packageName);\n         if (services == null) {\n             ServicesJar servicesJar = JaxbOpenejb.readServicesJar(packageName);",
                "raw_url": "https://github.com/apache/openejb/raw/d96346433b963cb13c68abdcd5e3bc3ce1767f70/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ServiceUtils.java",
                "sha": "6c4001d35b2fab090565670e0f96d7a294a71ca9",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/openejb/blob/d96346433b963cb13c68abdcd5e3bc3ce1767f70/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/sys/Openejb.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/sys/Openejb.java?ref=d96346433b963cb13c68abdcd5e3bc3ce1767f70",
                "deletions": 0,
                "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/sys/Openejb.java",
                "patch": "@@ -266,6 +266,7 @@ public void setProxyFactory(ProxyFactory value) {\n                 Resource resource = new Resource();\n                 resource.setJar(connector.getJar());\n                 resource.setId(connector.getId());\n+                resource.setType(connector.getType());\n                 resource.setProvider(connector.getProvider());\n                 resource.getProperties().putAll(connector.getProperties());\n                 this.resource.add(resource);",
                "raw_url": "https://github.com/apache/openejb/raw/d96346433b963cb13c68abdcd5e3bc3ce1767f70/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/sys/Openejb.java",
                "sha": "1e1bdedb48bd9a5ccd8e02086d4b5798584a8ed8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/openejb/blob/d96346433b963cb13c68abdcd5e3bc3ce1767f70/openejb3/container/openejb-core/src/main/resources/META-INF/org.apache.openejb/service-jar.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/resources/META-INF/org.apache.openejb/service-jar.xml?ref=d96346433b963cb13c68abdcd5e3bc3ce1767f70",
                "deletions": 0,
                "filename": "openejb3/container/openejb-core/src/main/resources/META-INF/org.apache.openejb/service-jar.xml",
                "patch": "@@ -634,6 +634,7 @@\n   <ServiceProvider\n           id=\"Default JMS Resource Adapter\"\n           service=\"Resource\"\n+          types=\"ActiveMQResourceAdapter\"\n           class-name=\"org.apache.activemq.ra.ActiveMQResourceAdapter\">\n \n     # Broker configuration",
                "raw_url": "https://github.com/apache/openejb/raw/d96346433b963cb13c68abdcd5e3bc3ce1767f70/openejb3/container/openejb-core/src/main/resources/META-INF/org.apache.openejb/service-jar.xml",
                "sha": "f7df2c91484fcaa84eede1614f69e75677fb0d78",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/openejb/blob/d96346433b963cb13c68abdcd5e3bc3ce1767f70/openejb3/container/openejb-core/src/main/resources/default.openejb.conf",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/resources/default.openejb.conf?ref=d96346433b963cb13c68abdcd5e3bc3ce1767f70",
                "deletions": 12,
                "filename": "openejb3/container/openejb-core/src/main/resources/default.openejb.conf",
                "patch": "@@ -22,7 +22,7 @@\n \n <openejb>\n \n-<Container id=\"Default CMP Container\" ctype=\"CMP_ENTITY\">\n+<Container id=\"My CMP Container\" type=\"CMP_ENTITY\">\n   # This container can service CMP 1.1 and 2.x Entity Beans\n   #\n   # Persistence is achived by taking the entity beans deployed\n@@ -38,12 +38,12 @@\n   # ConnectorName is he id of the Connector element which\n   # should provide connectivity for this CMP Container\n \n-  ConnectorName  Default JDBC Database\n+  ConnectorName  My DataSource\n \n </Container>\n \n \n-<Container id=\"Default BMP Container\" ctype=\"BMP_ENTITY\">\n+<Container id=\"My BMP Container\" type=\"BMP_ENTITY\">\n \n   # Specifies the size of the bean pools for this\n   # bmp entity container.\n@@ -53,7 +53,7 @@\n </Container>\n \n \n-<Container id=\"Default Stateful Container\" ctype=\"STATEFUL\">\n+<Container id=\"My Stateful Container\" type=\"STATEFUL\">\n   #  The passivator is responsible for writing beans to disk\n   #  at passivation time. Different passivators can be used\n   #  by setting this property to the fully qualified class name\n@@ -89,7 +89,7 @@\n </Container>\n \n \n-<Container id=\"Default Stateless Container\" ctype=\"STATELESS\">\n+<Container id=\"My Stateless Container\" type=\"STATELESS\">\n   #  Specifies the time to wait between invocations. This\n   #  value is measured in milliseconds.  A value of 5 would\n   #  result in a time-out of 5 milliseconds between invocations.\n@@ -119,11 +119,11 @@\n </Container>\n \n \n-<Container id=\"Default \" ctype=\"MESSAGE\">\n+<Container id=\"My MDB Container \" type=\"MESSAGE\">\n \n   #  The resource adapter delivers messages to the container\n \n-  ResourceAdapter Default JMS Resource Adapter\n+  ResourceAdapter My JMS Resource Adapter\n \n   # Specifies the message listener interface handled by this container\n \n@@ -146,7 +146,7 @@\n # http://openejb.apache.org/3.0/databases.html\n -->\n \n-<Resource id=\"Default JDBC Database\" >\n+<Resource id=\"My DataSource\" type=\"DataSource\">\n   JdbcDriver org.hsqldb.jdbcDriver\n   JdbcUrl jdbc:hsqldb:file:hsqldb\n   UserName sa\n@@ -155,7 +155,7 @@\n </Resource>\n \n \n-<Resource id=\"Default Unmanaged JDBC Database\">\n+<Resource id=\"My Unmanaged DataSource\" type=\"DataSource\">\n   JdbcDriver org.hsqldb.jdbcDriver\n   JdbcUrl jdbc:hsqldb:file:hsqldb\n   UserName sa\n@@ -164,7 +164,7 @@\n </Resource>\n \n \n-<Resource id=\"Default JMS Resource Adapter\">\n+<Resource id=\"My JMS Resource Adapter\" type=\"ActiveMQResourceAdapter\">\n   # Broker configuration URI as defined by ActiveMQ\n   # see http://activemq.apache.org/broker-configuration-uri.html\n \n@@ -180,9 +180,9 @@\n </Resource>\n \n \n-<Connector id=\"Default JMS Connection Factory\">\n+<Connector id=\"My JMS Connection Factory\" type=\"javax.jms.ConnectionFactory\">\n \n-  ResourceAdapter Default JMS Resource Adapter\n+  ResourceAdapter My JMS Resource Adapter\n \n   # Specifies if the connection is enrolled in global transaction\n   # allowed values: xa, local or none",
                "raw_url": "https://github.com/apache/openejb/raw/d96346433b963cb13c68abdcd5e3bc3ce1767f70/openejb3/container/openejb-core/src/main/resources/default.openejb.conf",
                "sha": "92ea9d7fd9d693124e4bfb020b51a80c2e87ff65",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/openejb/blob/d96346433b963cb13c68abdcd5e3bc3ce1767f70/openejb3/container/openejb-core/src/main/resources/org/apache/openejb/config/Messages.properties",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/resources/org/apache/openejb/config/Messages.properties?ref=d96346433b963cb13c68abdcd5e3bc3ce1767f70",
                "deletions": 0,
                "filename": "openejb3/container/openejb-core/src/main/resources/org/apache/openejb/config/Messages.properties",
                "patch": "@@ -97,3 +97,25 @@ config.noBeanFoundEjbLink=Cannot find bean \\\"{0}\\\" referenced by bean \\\"{1}\\\" wi\n \n #fatal(\"config.noBeanFound\", ejb.getEjbRefName(), referringComponent);\n config.noBeanFound=Cannot find bean \\\"{0}\\\" referenced by bean \\\"{1}\\\".\n+\n+# info(\"configureService.configuring\", service.getId(), provider.getService(), provider.getId());\n+configureService.configuring=Configuring Service(id={0}, type={1}, provider-id={2})\n+\n+# fatal(\"configureService.failed\", service.getId(), e)\n+configureService.failed=Failed Configuring Service(id={0})\n+\n+# \"configureService.wrongProviderType\", service.getId(), providerType));\n+configureService.wrongProviderType=ServiceProvider of \"{0}\" is not of type \"{1}\"\n+\n+\n+# info(\"config.configApp\", appModule.getJarLocation());\n+config.configApp=Configuring app: {0}\n+\n+# warning(\"configureApplication.loadFailed\", jarFile.getAbsolutePath(), e.getMessage());\n+configureApplication.loadFailed=Jar not loaded. {0}.  {1}\n+\n+# format(\"configureService.noDefaultService\", infoType.getName())\n+configureService.noDefaultService = No Default Service for {0}\n+\n+# format(\"configureService.noProviderForService\", service.getClass().getName(), service.getId(), service.getType(), service.getProvider(), sb.toString());\n+configureService.noProviderForService = Cannot determine a provider for {0}(id={1}, type={2}, provider={3}).\\n\\nPossible valid configurations might be: {4}",
                "raw_url": "https://github.com/apache/openejb/raw/d96346433b963cb13c68abdcd5e3bc3ce1767f70/openejb3/container/openejb-core/src/main/resources/org/apache/openejb/config/Messages.properties",
                "sha": "44a5ebd0cb45c1e57391600b81c96697e93e7b32",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/openejb/blob/d96346433b963cb13c68abdcd5e3bc3ce1767f70/openejb3/container/openejb-core/src/main/resources/org/apache/openejb/util/resources/Messages.properties",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/resources/org/apache/openejb/util/resources/Messages.properties?ref=d96346433b963cb13c68abdcd5e3bc3ce1767f70",
                "deletions": 1,
                "filename": "openejb3/container/openejb-core/src/main/resources/org/apache/openejb/util/resources/Messages.properties",
                "patch": "@@ -229,7 +229,6 @@ config.gettingFromDefault=Getting {0} from default configuration.\n config.usingDefault=OpenEJB configuration not found, using default configuration.\n config.noContainerFound=Cannot find container \"{0}\" for bean \"{1}\".\n config.noBeanFound=Cannot find bean \"{0}\" referenced by bean \"{1}\".\n-config.configApp=Configuring app: {0}\n \n init.0100=Invalid {0} provider {1}.  The factory class specified, {2}, does not implement the {3} interface.  Please check the configuration of {1}.\"\n ",
                "raw_url": "https://github.com/apache/openejb/raw/d96346433b963cb13c68abdcd5e3bc3ce1767f70/openejb3/container/openejb-core/src/main/resources/org/apache/openejb/util/resources/Messages.properties",
                "sha": "e008eae79135ad29245a4650a022e7910a3be94d",
                "status": "modified"
            },
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/openejb/blob/d96346433b963cb13c68abdcd5e3bc3ce1767f70/openejb3/container/openejb-core/src/test/java/org/apache/openejb/assembler/classic/ResourceInfoComparatorTest.java",
                "changes": 63,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/test/java/org/apache/openejb/assembler/classic/ResourceInfoComparatorTest.java?ref=d96346433b963cb13c68abdcd5e3bc3ce1767f70",
                "deletions": 0,
                "filename": "openejb3/container/openejb-core/src/test/java/org/apache/openejb/assembler/classic/ResourceInfoComparatorTest.java",
                "patch": "@@ -0,0 +1,63 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openejb.assembler.classic;\n+\n+import junit.framework.TestCase;\n+\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Properties;\n+\n+import org.apache.openejb.config.ConfigurationFactory;\n+\n+/**\n+ * @version $Rev$ $Date$\n+ */\n+public class ResourceInfoComparatorTest extends TestCase {\n+\n+    public void test() throws Exception {\n+        List<ResourceInfo> resources = new ArrayList<ResourceInfo>();\n+\n+        resources.add(new ResourceInfo());\n+        resources.get(0).id = \"Red\";\n+        resources.get(0).properties = new Properties();\n+        resources.get(0).properties.put(\"someValue\", \"Blue\");\n+\n+        resources.add(new ResourceInfo());\n+        resources.get(1).id = \"Blue\";\n+        resources.get(1).properties = new Properties();\n+        resources.get(1).properties.put(\"foo\", \"Green\");\n+\n+        resources.add(new ResourceInfo());\n+        resources.get(2).properties = new Properties();\n+        resources.get(2).id = \"Green\";\n+\n+        resources.add(new ResourceInfo());\n+        resources.get(3).id = \"Yellow\";\n+        resources.get(3).properties = new Properties();\n+        resources.get(3).properties.put(\"foo\", \"Green\");\n+\n+        Collections.sort(resources, new ConfigurationFactory.ResourceInfoComparator(resources));\n+\n+        assertEquals(\"Green\", resources.get(0).id);\n+        assertEquals(\"Blue\", resources.get(1).id);\n+        assertEquals(\"Red\", resources.get(2).id);\n+        assertEquals(\"Yellow\", resources.get(3).id);\n+\n+    }\n+}",
                "raw_url": "https://github.com/apache/openejb/raw/d96346433b963cb13c68abdcd5e3bc3ce1767f70/openejb3/container/openejb-core/src/test/java/org/apache/openejb/assembler/classic/ResourceInfoComparatorTest.java",
                "sha": "f9e4f331ec71ab737abbad8cd7741aafa10d38ab",
                "status": "added"
            }
        ],
        "message": "OPENEJB-743: Improved configuration error detection and help\nOPENEJB-742: java.lang.NullPointerException at ConfigurationFactory$DefaultService.access$000(ConfigurationFactory.java:NNN)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@607392 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/4242bafecd8094de18ef6d77064108cca944f435",
        "patched_files": [
            "default.java",
            "service-jar.java",
            "Openejb.java",
            "ConfigurationFactory.java",
            "Messages.java",
            "Assembler.java",
            "ServiceUtils.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "ResourceInfoComparatorTest.java",
            "ConfigurationFactoryTest.java",
            "OpenejbTest.java",
            "ServiceUtilsTest.java"
        ]
    },
    "openejb_da18a8d": {
        "bug_id": "openejb_da18a8d",
        "commit": "https://github.com/apache/openejb/commit/da18a8d89b049d24844ee37c2db10e5deb2db42c",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/openejb/blob/da18a8d89b049d24844ee37c2db10e5deb2db42c/openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/ValidatorBuilder.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/ValidatorBuilder.java?ref=da18a8d89b049d24844ee37c2db10e5deb2db42c",
                "deletions": 0,
                "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/ValidatorBuilder.java",
                "patch": "@@ -81,6 +81,9 @@ public static ValidatorFactory buildFactory(ValidationInfo config, ClassLoader c\n                 factory = Validation.buildDefaultValidatorFactory();\n             } else {\n                 Configuration<?> configuration = getConfig(config);\n+                if (configuration == null) {\n+                    configuration = getConfig(config);\n+                }\n                 try {\n                     factory = configuration.buildValidatorFactory();\n                 } catch (ValidationException ve) {",
                "raw_url": "https://github.com/apache/openejb/raw/da18a8d89b049d24844ee37c2db10e5deb2db42c/openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/ValidatorBuilder.java",
                "sha": "e249e0b46712d70c0a4fbe6e6ad978b680405bae",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/openejb/blob/da18a8d89b049d24844ee37c2db10e5deb2db42c/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java?ref=da18a8d89b049d24844ee37c2db10e5deb2db42c",
                "deletions": 0,
                "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "patch": "@@ -84,6 +84,7 @@\n import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n import java.util.jar.Manifest;\n+import java.util.zip.ZipEntry;\n \n import static org.apache.openejb.config.NewLoaderLogic.applyBuiltinExcludes;\n import static org.apache.openejb.config.TldScanner.scanForTagLibs;\n@@ -1538,6 +1539,19 @@ public boolean accept(final String annotationName) {\n \n             if (classFinder.find(filter)) {\n                 cls = EjbModule.class;\n+                // if it is a war just throw an error\n+                try {\n+                    final File ar = URLs.toFile(urls);\n+                    if (!ar.isDirectory() && !ar.getName().endsWith(\"ar\")) { // guess no archive extension, check it is not a hidden war\n+                        final JarFile war = new JarFile(ar);\n+                        final ZipEntry entry = war.getEntry(\"WEB-INF/\");\n+                        if (entry != null) {\n+                            logger.warning(\"you deployed \" + urls.toExternalForm() + \", it seems it is a war with no extension, please rename it\");\n+                        }\n+                    }\n+                } catch (Exception ignored) {\n+                    // no-op\n+                }\n             }\n \n             if (otherTypes.size() > 0) {",
                "raw_url": "https://github.com/apache/openejb/raw/da18a8d89b049d24844ee37c2db10e5deb2db42c/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "sha": "74363546a66edd30ec357af0db60dd376cb554b2",
                "status": "modified"
            }
        ],
        "message": "trying to avoid NPE (appears on builbot) + logging a warning if a a war is deployed without extension\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1373184 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/99ba75c962be8ce0f635477544f87088c99b34af",
        "patched_files": [
            "DeploymentLoader.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "DeploymentLoaderTest.java"
        ]
    },
    "openejb_da21e11": {
        "bug_id": "openejb_da21e11",
        "commit": "https://github.com/apache/openejb/commit/da21e11d6b0f3c6d57ed6cc7757546fe60633580",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/openejb/blob/da21e11d6b0f3c6d57ed6cc7757546fe60633580/openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/AppInfo.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/AppInfo.java?ref=da21e11d6b0f3c6d57ed6cc7757546fe60633580",
                "deletions": 4,
                "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/AppInfo.java",
                "patch": "@@ -18,9 +18,8 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n+import java.util.Properties;\n import java.util.Set;\n-import java.util.TreeMap;\n import java.util.TreeSet;\n \n /**\n@@ -41,6 +40,6 @@\n     public final JndiEncInfo globalJndiEnc = new JndiEncInfo();\n     public final JndiEncInfo appJndiEnc = new JndiEncInfo();\n     public String cmpMappingsXml;\n-    public Map<String, String> jmx = new TreeMap<String, String>();\n-    public Set<String> mbeans = new TreeSet<String>();\n+    public final Properties jmx = new Properties();\n+    public final Set<String> mbeans = new TreeSet<String>();\n }",
                "raw_url": "https://github.com/apache/openejb/raw/da21e11d6b0f3c6d57ed6cc7757546fe60633580/openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/AppInfo.java",
                "sha": "0af49b9f36113e6437f86232f64f6973bceac11a",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/openejb/blob/da21e11d6b0f3c6d57ed6cc7757546fe60633580/openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java?ref=da21e11d6b0f3c6d57ed6cc7757546fe60633580",
                "deletions": 3,
                "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "patch": "@@ -909,7 +909,7 @@ public AppContext createApplication(AppInfo appInfo, ClassLoader classLoader, bo\n         }\n     }\n \n-    private static void deployMBean(final BeanManager bm, final ClassLoader cl, final String mbeanClass, final Map<String, String> appMbeans, final String id) {\n+    private static void deployMBean(final BeanManager bm, final ClassLoader cl, final String mbeanClass, final Properties appMbeans, final String id) {\n         final Class<?> clazz;\n         try {\n             clazz = cl.loadClass(mbeanClass);\n@@ -1291,9 +1291,9 @@ public synchronized void destroyApplication(AppInfo appInfo) throws UndeployExce\n \n         // mbeans\n         MBeanServer server = LocalMBeanServer.get();\n-        for (String objectName : appInfo.jmx.values()) {\n+        for (Object objectName : appInfo.jmx.values()) {\n             try {\n-              ObjectName on = new ObjectName(objectName);\n+              ObjectName on = new ObjectName((String) objectName);\n               if (server.isRegistered(on)) {\n                       server.unregisterMBean(on);\n               }",
                "raw_url": "https://github.com/apache/openejb/raw/da21e11d6b0f3c6d57ed6cc7757546fe60633580/openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java",
                "sha": "5d087c7c5de33a4365b34f6f560d399a73c537ec",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/openejb/blob/da21e11d6b0f3c6d57ed6cc7757546fe60633580/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java?ref=da21e11d6b0f3c6d57ed6cc7757546fe60633580",
                "deletions": 1,
                "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "patch": "@@ -102,7 +102,7 @@ public AppInfo build(AppModule appModule) throws OpenEJBException {\n         appInfo.path = appModule.getJarLocation();\n         appInfo.standaloneModule = appModule.isStandaloneModule();\n         appInfo.watchedResources.addAll(appModule.getWatchedResources());\n-        appInfo.mbeans = appModule.getAdditionalLibMbeans();\n+        appInfo.mbeans.addAll(appModule.getAdditionalLibMbeans());\n \n         if (appInfo.appId == null) throw new IllegalArgumentException(\"AppInfo.appId cannot be null\");\n         if (appInfo.path == null) appInfo.path = appInfo.appId;",
                "raw_url": "https://github.com/apache/openejb/raw/da21e11d6b0f3c6d57ed6cc7757546fe60633580/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java",
                "sha": "07ea3c1501d9809804e177c6d2b51ede18b0af52",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/openejb/blob/da21e11d6b0f3c6d57ed6cc7757546fe60633580/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/MBeanDeployer.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/MBeanDeployer.java?ref=da21e11d6b0f3c6d57ed6cc7757546fe60633580",
                "deletions": 0,
                "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/config/MBeanDeployer.java",
                "patch": "@@ -43,6 +43,10 @@ public AppModule deploy(AppModule appModule) throws OpenEJBException {\n         // there is an ejbmodule by webapp so we should't need to go through the webapp\n \n         for (EjbModule ejbModule : appModule.getEjbModules()) {\n+            if (ejbModule.getFinder() == null) {\n+                continue;\n+            }\n+\n             for (Annotated<Class<?>> clazz : ejbModule.getFinder().findMetaAnnotatedClasses(MBean.class)) {\n                 final Class<?> realClass = clazz.get();\n                 final String name = clazz.get().getName();\n@@ -55,6 +59,10 @@ public AppModule deploy(AppModule appModule) throws OpenEJBException {\n             }\n         }\n         for (ClientModule clientModule : appModule.getClientModules()) {\n+            if (clientModule.getFinder() == null) {\n+                continue;\n+            }\n+\n             for (Annotated<Class<?>> clazz : clientModule.getFinder().findMetaAnnotatedClasses(MBean.class)) {\n                 final String name = clazz.get().getName();\n                 if (done.contains(name)) {",
                "raw_url": "https://github.com/apache/openejb/raw/da21e11d6b0f3c6d57ed6cc7757546fe60633580/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/MBeanDeployer.java",
                "sha": "602d4f2de87eb7cc6f0deed32f153defdaa8e144",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/openejb/blob/da21e11d6b0f3c6d57ed6cc7757546fe60633580/openejb/container/openejb-core/src/test/java/org/apache/openejb/config/MBeanDeployerTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/test/java/org/apache/openejb/config/MBeanDeployerTest.java?ref=da21e11d6b0f3c6d57ed6cc7757546fe60633580",
                "deletions": 2,
                "filename": "openejb/container/openejb-core/src/test/java/org/apache/openejb/config/MBeanDeployerTest.java",
                "patch": "@@ -90,8 +90,8 @@ public void resetList() {\n     @Test\n     public void mbeans() throws Exception {\n         final Set<String> parsed = new HashSet<String>();\n-        for (String name : appInfo.jmx.values()) {\n-            final ObjectName on = new ObjectName(name);\n+        for (Object name : appInfo.jmx.values()) {\n+            final ObjectName on = new ObjectName((String) name);\n             final String cn = on.getCanonicalName();\n             if (cn.contains(\"name=Empty\")) {\n                 assertTrue(cn.startsWith(\"openejb.user.mbeans\"));",
                "raw_url": "https://github.com/apache/openejb/raw/da21e11d6b0f3c6d57ed6cc7757546fe60633580/openejb/container/openejb-core/src/test/java/org/apache/openejb/config/MBeanDeployerTest.java",
                "sha": "acde838e568255944c97f3ad8be5e99df871b420",
                "status": "modified"
            }
        ],
        "message": "avoiding NPE in MBeanDeployer\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1298185 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/398771af213ed6bc0a8585f8b21754451b7a25c3",
        "patched_files": [
            "Assembler.java",
            "AppInfoBuilder.java",
            "AppInfo.java",
            "MBeanDeployer.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "MBeanDeployerTest.java",
            "AppInfoBuilderTest.java"
        ]
    },
    "openejb_e815e2e": {
        "bug_id": "openejb_e815e2e",
        "commit": "https://github.com/apache/openejb/commit/e815e2e475eb2f01801ecf0bccd589fc998df6cc",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/openejb/blob/e815e2e475eb2f01801ecf0bccd589fc998df6cc/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java?ref=e815e2e475eb2f01801ecf0bccd589fc998df6cc",
                "deletions": 2,
                "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "patch": "@@ -611,15 +611,16 @@ protected void addWebModule(AppModule appModule, URL warUrl, ClassLoader parentC\n         ClassLoader webClassLoader = webModule.getClassLoader();\n \n         // get include/exclude properties from context-param\n+        // using a Set instead of a list would be easier ...\n         Options contextParams = new Options(getContextParams(webModule.getWebApp().getContextParam()));\n         String include = contextParams.get(CLASSPATH_INCLUDE, \"\");\n         String exclude = contextParams.get(CLASSPATH_EXCLUDE, \".*\");\n         Set<RequireDescriptors> requireDescriptors = contextParams.getAll(CLASSPATH_REQUIRE_DESCRIPTOR, RequireDescriptors.CLIENT);\n         boolean filterDescriptors = contextParams.get(CLASSPATH_FILTER_DESCRIPTORS, false);\n         boolean filterSystemApps = contextParams.get(CLASSPATH_FILTER_SYSTEMAPPS, true);\n \n-        contextParams.getProperties().put(moduleName, warPath);\n-        FileUtils base = new FileUtils(moduleName, moduleName, contextParams.getProperties());\n+        contextParams.getProperties().put(webModule.getModuleId(), warPath);\n+        FileUtils base = new FileUtils(webModule.getModuleId(), webModule.getModuleId(), contextParams.getProperties());\n         DeploymentsResolver.loadFromClasspath(base, urls, webClassLoader, include, exclude, requireDescriptors, filterDescriptors, filterSystemApps);\n \n         // we need to exclude previously deployed modules",
                "raw_url": "https://github.com/apache/openejb/raw/e815e2e475eb2f01801ecf0bccd589fc998df6cc/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java",
                "sha": "b394e52f0a34c2a1c7bec824da02e9b12fc89725",
                "status": "modified"
            }
        ],
        "message": "Change the module name by the module id in the map to avoid NPE when not running in Tomcat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1057107 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/e2d41adbfe160782c07bdc9c2ddc3aef1fa27bf8",
        "patched_files": [
            "DeploymentLoader.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "DeploymentLoaderTest.java"
        ]
    },
    "openejb_ed51a27": {
        "bug_id": "openejb_ed51a27",
        "commit": "https://github.com/apache/openejb/commit/ed51a27e9ded92bf94f86cd09590e0a5e521d5dc",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/openejb/blob/ed51a27e9ded92bf94f86cd09590e0a5e521d5dc/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=ed51a27e9ded92bf94f86cd09590e0a5e521d5dc",
                "deletions": 1,
                "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "patch": "@@ -827,7 +827,13 @@ void process(ClassLoader cl, String cls, Object object) {\n \n \t\tprivate String getConfigPropertyType(javax.resource.spi.ConfigProperty annotation, Class<?> type) {\n \t\t\tClass<?> t = (annotation == null) ? null : annotation.type();\n-\t\t\tif (t == null || t.equals(Object.class)) {\n+            if (t == null && type != null) {\n+                return type.getName();\n+            } else if (t == null) {\n+                return null;\n+            }\n+\n+\t\t\tif (t.equals(Object.class)) {\n \t\t\t\tt = type;\n \t\t\t}\n             if (t == null) { // t == null && type == null",
                "raw_url": "https://github.com/apache/openejb/raw/ed51a27e9ded92bf94f86cd09590e0a5e521d5dc/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java",
                "sha": "dc438489a407a9af0649798cb445c89fac57bb6c",
                "status": "modified"
            }
        ],
        "message": "avoiding NPE when a custom mdb container uses badly defined activation properties\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1203155 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/30db9245e5d3421fb5014b85f97aed3dd14699b8",
        "patched_files": [
            "AnnotationDeployer.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "AnnotationDeployerTest.java"
        ]
    },
    "openejb_fe60a8f": {
        "bug_id": "openejb_fe60a8f",
        "commit": "https://github.com/apache/openejb/commit/fe60a8ffb2253c4fa09c78c3aea0d58908e62b4e",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/openejb/blob/fe60a8ffb2253c4fa09c78c3aea0d58908e62b4e/openejb/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TomEEContainer.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TomEEContainer.java?ref=fe60a8ffb2253c4fa09c78c3aea0d58908e62b4e",
                "deletions": 4,
                "filename": "openejb/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TomEEContainer.java",
                "patch": "@@ -171,7 +171,15 @@ public void addServlets(final HTTPContext httpContext, final AppInfo appInfo) {\n         for (WebAppInfo webApps : appInfo.webApps) {\n             for (ServletInfo servlet : webApps.servlets) {\n                 // weird but arquillianurl doesn't match the servlet url but its context\n-                httpContext.add(new Servlet(servlet.servletClass, webApps.contextRoot));\n+                String clazz = servlet.servletClass;\n+                if (clazz == null) {\n+                    clazz = servlet.servletName;\n+                    if (clazz == null) {\n+                        continue;\n+                    }\n+                }\n+\n+                httpContext.add(new Servlet(clazz, webApps.contextRoot));\n                 /*\n                 for (String mapping : servlet.mappings) {\n                     httpContext.add(new Servlet(servlet.servletClass, startWithSlash(uniqueSlash(webApps.contextRoot, mapping))));\n@@ -231,9 +239,7 @@ public ProtocolMetaData deploy(Archive<?> archive) throws DeploymentException {\n             httpContext.add(new Servlet(\"ArquillianServletRunner\", arquillianServlet));\n             addServlets(httpContext, appInfo);\n \n-            // we should probably get all servlets and add them to the context\n-            final ProtocolMetaData metadata = new ProtocolMetaData().addContext(httpContext);\n-            return metadata;\n+            return new ProtocolMetaData().addContext(httpContext);\n         } catch (Exception e) {\n             e.printStackTrace();\n             throw new DeploymentException(\"Unable to deploy\", e);",
                "raw_url": "https://github.com/apache/openejb/raw/fe60a8ffb2253c4fa09c78c3aea0d58908e62b4e/openejb/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TomEEContainer.java",
                "sha": "b8852d5deb60089d4d706cef9c54b0ecfa6589a6",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/openejb/blob/34829fee1dbc5b3a3d111bb84ecda5001cf74db8/openejb/arquillian/arquillian-tomee-extensions/pom.xml",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/arquillian/arquillian-tomee-extensions/pom.xml?ref=34829fee1dbc5b3a3d111bb84ecda5001cf74db8",
                "deletions": 22,
                "filename": "openejb/arquillian/arquillian-tomee-extensions/pom.xml",
                "patch": "@@ -1,22 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-  <parent>\n-    <artifactId>arquillian</artifactId>\n-    <groupId>org.apache.openejb</groupId>\n-    <version>1.1.0-SNAPSHOT</version>\n-  </parent>\n-  <modelVersion>4.0.0</modelVersion>\n-\n-  <artifactId>arquillian-tomee-extensions</artifactId>\n-  <name>OpenEJB :: Arquillian Adaptors Parent :: TomEE Extensions</name>\n-\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.jboss.arquillian.container</groupId>\n-      <artifactId>arquillian-container-test-impl-base</artifactId>\n-      <version>${version.arquillian}</version>\n-    </dependency>\n-  </dependencies>\n-</project>",
                "raw_url": "https://github.com/apache/openejb/raw/34829fee1dbc5b3a3d111bb84ecda5001cf74db8/openejb/arquillian/arquillian-tomee-extensions/pom.xml",
                "sha": "15941019865c600bd1aa42da171c665cb0587564",
                "status": "removed"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/openejb/blob/fe60a8ffb2253c4fa09c78c3aea0d58908e62b4e/openejb/arquillian/pom.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/arquillian/pom.xml?ref=fe60a8ffb2253c4fa09c78c3aea0d58908e62b4e",
                "deletions": 1,
                "filename": "openejb/arquillian/pom.xml",
                "patch": "@@ -48,6 +48,5 @@\n     <module>arquillian-tomee-moviefun-example</module>\n     <module>arquillian-openejb-embedded-4</module>\n     <module>ziplock</module>\n-    <module>arquillian-tomee-extensions</module>\n   </modules>\n </project>",
                "raw_url": "https://github.com/apache/openejb/raw/fe60a8ffb2253c4fa09c78c3aea0d58908e62b4e/openejb/arquillian/pom.xml",
                "sha": "f27b508a288750f7fd6513840a7b765f866852b4",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/openejb/blob/fe60a8ffb2253c4fa09c78c3aea0d58908e62b4e/openejb/server/openejb-webservices/src/main/java/org/apache/openejb/server/webservices/WsService.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/server/openejb-webservices/src/main/java/org/apache/openejb/server/webservices/WsService.java?ref=fe60a8ffb2253c4fa09c78c3aea0d58908e62b4e",
                "deletions": 2,
                "filename": "openejb/server/openejb-webservices/src/main/java/org/apache/openejb/server/webservices/WsService.java",
                "patch": "@@ -323,8 +323,14 @@ public void afterApplicationCreated(WebAppInfo webApp) {\n         }\n \n         for (ServletInfo servlet : webApp.servlets) {\n+            if (servlet.servletName == null) {\n+                continue;\n+            }\n+\n             PortInfo portInfo = ports.get(servlet.servletName);\n-            if (portInfo == null) continue;\n+            if (portInfo == null) {\n+                continue;\n+            }\n \n             try {\n                 ClassLoader classLoader = webContext.getClassLoader();\n@@ -396,8 +402,14 @@ public void beforeApplicationDestroyed(AppInfo appInfo) {\n                 }\n \n                 for (ServletInfo servlet : webApp.servlets) {\n+                    if (servlet.servletClass == null) {\n+                        continue;\n+                    }\n+\n                     PortInfo portInfo = ports.get(servlet.servletClass);\n-                    if (portInfo == null) continue;\n+                    if (portInfo == null) {\n+                        continue;\n+                    }\n \n                     // remove wsdl addresses from global registry\n                     String address = servletAddresses.remove(webApp.moduleId + \".\" + servlet.servletName);",
                "raw_url": "https://github.com/apache/openejb/raw/fe60a8ffb2253c4fa09c78c3aea0d58908e62b4e/openejb/server/openejb-webservices/src/main/java/org/apache/openejb/server/webservices/WsService.java",
                "sha": "60e8a9234a78a66fa83dc3185bbbd0ff72a12aff",
                "status": "modified"
            }
        ],
        "message": "avoiding NPE when the servlet cant be added\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1343695 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openejb/commit/34829fee1dbc5b3a3d111bb84ecda5001cf74db8",
        "patched_files": [
            "TomEEContainer.java"
        ],
        "repo": "openejb",
        "unit_tests": [
            "TomEEContainerTest.java"
        ]
    }
}