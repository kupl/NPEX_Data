[
    {
        "repo": "sling-org-apache-sling-hapi",
        "message": "SLING-6978 [HApi] NPE if type is fetched from cache before the end of initialization\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1800275 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/sling-org-apache-sling-hapi/commit/1f510cec25134676b32cbe6a45a268dc969f2e71",
        "parent": "https://github.com/apache/sling-org-apache-sling-hapi/commit/23b854f35fd0b864715c1bb00d856eebb1ab1385",
        "bug_id": "sling-org-apache-sling-hapi_1",
        "file": [
            {
                "sha": "8fcdfacafda540fa6d13118dfa864fe57229c9ed",
                "filename": "src/main/java/org/apache/sling/hapi/HApiType.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-hapi/blob/1f510cec25134676b32cbe6a45a268dc969f2e71/src/main/java/org/apache/sling/hapi/HApiType.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-hapi/raw/1f510cec25134676b32cbe6a45a268dc969f2e71/src/main/java/org/apache/sling/hapi/HApiType.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-hapi/contents/src/main/java/org/apache/sling/hapi/HApiType.java?ref=1f510cec25134676b32cbe6a45a268dc969f2e71",
                "patch": "@@ -27,6 +27,7 @@\n /**\n  * A Hypermedia API type.\n  */\n+\n @ProviderType\n public interface HApiType {\n ",
                "deletions": 0
            },
            {
                "sha": "8d6eb2cee5fcf85a11268e5cd2828585621e4b20",
                "filename": "src/main/java/org/apache/sling/hapi/impl/HApiTypeImpl.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-hapi/blob/1f510cec25134676b32cbe6a45a268dc969f2e71/src/main/java/org/apache/sling/hapi/impl/HApiTypeImpl.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-hapi/raw/1f510cec25134676b32cbe6a45a268dc969f2e71/src/main/java/org/apache/sling/hapi/impl/HApiTypeImpl.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-hapi/contents/src/main/java/org/apache/sling/hapi/impl/HApiTypeImpl.java?ref=1f510cec25134676b32cbe6a45a268dc969f2e71",
                "patch": "@@ -23,7 +23,10 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.util.*;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n \n /**\n  * {@inheritDoc}",
                "deletions": 1
            },
            {
                "sha": "62e1fe6edfddd09fd04379fa656b51982aa64afc",
                "filename": "src/main/java/org/apache/sling/hapi/impl/HApiTypeLazyWrapper.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-hapi/blob/1f510cec25134676b32cbe6a45a268dc969f2e71/src/main/java/org/apache/sling/hapi/impl/HApiTypeLazyWrapper.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-hapi/raw/1f510cec25134676b32cbe6a45a268dc969f2e71/src/main/java/org/apache/sling/hapi/impl/HApiTypeLazyWrapper.java",
                "status": "added",
                "changes": 188,
                "additions": 188,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-hapi/contents/src/main/java/org/apache/sling/hapi/impl/HApiTypeLazyWrapper.java?ref=1f510cec25134676b32cbe6a45a268dc969f2e71",
                "patch": "@@ -0,0 +1,188 @@\n+/*******************************************************************************\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ ******************************************************************************/\n+package org.apache.sling.hapi.impl;\n+\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.api.resource.ResourceResolver;\n+import org.apache.sling.hapi.HApiException;\n+import org.apache.sling.hapi.HApiProperty;\n+import org.apache.sling.hapi.HApiType;\n+import org.apache.sling.hapi.HApiUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.jcr.RepositoryException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * {@inheritDoc}\n+ */\n+public class HApiTypeLazyWrapper implements HApiType {\n+    public static final Logger LOG = LoggerFactory.getLogger(HApiTypeLazyWrapper.class);\n+    private final HApiUtil util;\n+    private final ResourceResolver resolver;\n+    private String serverUrl;\n+    private final Resource resource;\n+\n+    /**\n+     * A new HApiType that is just a weak reference by name\n+     * @param util\n+     * @param resolver\n+     * @param name\n+     */\n+    public HApiTypeLazyWrapper(HApiUtil util, ResourceResolver resolver, String serverUrl, String name) {\n+        this.util = util;\n+        this.resolver = resolver;\n+        this.serverUrl = serverUrl;\n+        try {\n+            this.resource = util.getTypeResource(resolver, name);\n+        } catch (RepositoryException e) {\n+            throw new HApiException(\"Can't find type \" + name + \"!\", e);\n+        }\n+    }\n+\n+    public HApiTypeLazyWrapper(HApiUtil util, ResourceResolver resolver, String serverUrl, Resource resource) {\n+        this.util = util;\n+        this.resolver = resolver;\n+        this.serverUrl = serverUrl;\n+        this.resource = resource;\n+    }\n+    /**\n+     * Load the type from the cache\n+     * @return\n+     */\n+    private HApiType getTypeFromCache() {\n+        try {\n+            return TypesCache.getInstance(this.util).getType(resolver, resource);\n+        } catch (RepositoryException e) {\n+            String name = (null != resource) ? resource.getName() : \"\";\n+            throw new HApiException(\"Can't find type \" + name + \"!\", e);\n+        }\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getName() {\n+        return getTypeFromCache().getName();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getDescription() {\n+        return getTypeFromCache().getDescription();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getPath() {\n+        return getTypeFromCache().getPath();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getUrl() {\n+        return this.serverUrl + getPath() + \".html\";\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getFqdn() {\n+        return getTypeFromCache().getFqdn();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<String> getParameters() {\n+        return getTypeFromCache().getParameters();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Map<String, HApiProperty> getProperties() {\n+        return getTypeFromCache().getProperties();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Map<String, HApiProperty> getAllProperties() {\n+        return getAllProperties(this);\n+    }\n+\n+    private Map<String, HApiProperty> getAllProperties(HApiType rootType) {\n+        HApiType parent = getParent(rootType);\n+        Map<String, HApiProperty> allProps = new HashMap<String, HApiProperty>();\n+        LOG.debug(\"parent: {}\", parent);\n+        if (null != parent) {\n+            Map<String, HApiProperty> parentProps;\n+            if (parent instanceof HApiTypeLazyWrapper) {\n+                parentProps = ((HApiTypeLazyWrapper) parent).getAllProperties(rootType);\n+            } else {\n+                parentProps = parent.getAllProperties();\n+            }\n+            LOG.debug(\"parent props: {}\", parentProps);\n+            allProps.putAll(parentProps);\n+        }\n+        allProps.putAll(getProperties());\n+        return allProps;\n+    }\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public HApiType getParent() {\n+        return getTypeFromCache().getParent();\n+    }\n+\n+    private HApiType getParent(HApiType rootType) {\n+        if (this.equals(rootType)) return null;\n+        return getParent();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isAbstract() {\n+        return getTypeFromCache().isAbstract();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"[Weak reference] \"  + this.getName() + \"(\" + this.getPath() + \"): Properties: \" + this.getProperties();\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "f1ae6e915b8ea47f1bd8553339bf351116cad849",
                "filename": "src/main/java/org/apache/sling/hapi/impl/HApiUtilImpl.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-hapi/blob/1f510cec25134676b32cbe6a45a268dc969f2e71/src/main/java/org/apache/sling/hapi/impl/HApiUtilImpl.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-hapi/raw/1f510cec25134676b32cbe6a45a268dc969f2e71/src/main/java/org/apache/sling/hapi/impl/HApiUtilImpl.java",
                "status": "modified",
                "changes": 154,
                "additions": 83,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-hapi/contents/src/main/java/org/apache/sling/hapi/impl/HApiUtilImpl.java?ref=1f510cec25134676b32cbe6a45a268dc969f2e71",
                "patch": "@@ -34,44 +34,72 @@\n import javax.jcr.query.QueryManager;\n import javax.jcr.query.QueryResult;\n \n-import org.apache.felix.scr.annotations.Activate;\n-import org.apache.felix.scr.annotations.Component;\n-import org.apache.felix.scr.annotations.Property;\n-import org.apache.felix.scr.annotations.Service;\n import org.apache.sling.api.resource.Resource;\n import org.apache.sling.api.resource.ResourceResolver;\n import org.apache.sling.api.resource.ValueMap;\n-import org.apache.sling.commons.osgi.PropertiesUtil;\n import org.apache.sling.hapi.*;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.metatype.annotations.AttributeDefinition;\n+import org.osgi.service.metatype.annotations.AttributeType;\n+import org.osgi.service.metatype.annotations.Designate;\n+import org.osgi.service.metatype.annotations.ObjectClassDefinition;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n-@Component(label = \"Apache Sling Hypermedia API tools\", metatype = true)\n-@Service(value = HApiUtil.class)\n+@Component(\n+        name = \"Apache Sling Hypermedia API tools\",\n+        service = HApiUtil.class,\n+        configurationPid = \"org.apache.sling.hapi.impl.HApiUtilImpl\"\n+)\n+@Designate(\n+        ocd = HApiUtilImpl.Configuration.class\n+)\n public class HApiUtilImpl implements HApiUtil {\n \n     private final Logger LOG = LoggerFactory.getLogger(HApiUtil.class);\n \n-    @Property(label = \"HApi Resource Type\", cardinality = 0, value = DEFAULT_RESOURCE_TYPE,\n-            description = RESOURCE_TYPE_DESC)\n-    public static final String HAPI_RESOURCE_TYPE = RESOURCE_TYPE;\n+    @ObjectClassDefinition(\n+            name = \"Apache Sling Hypermedia API tools\"\n+    )\n+    @interface Configuration {\n \n-    @Property(label = \"HApi Collection Resource Type\", cardinality = 0, value = DEFAULT_COLLECTION_RESOURCE_TYPE,\n-            description = COLLECTION_RESOURCE_TYPE_DESC)\n-    private static final String HAPI_COLLECTION_RESOURCE_TYPE = COLLECTION_RESOURCE_TYPE;\n+        @AttributeDefinition(\n+                name = \"HApi Resource Type\",\n+                description = RESOURCE_TYPE_DESC\n \n-    @Property(label = \"HApi Types Search Paths\", cardinality=50, value = {DEFAULT_SEARCH_PATH},\n-            description = SEARCH_PATHS_DESC)\n-    public static final String HAPI_PATHS = SEARCH_PATHS;\n+        )\n+        String org_apache_sling_hapi_tools_resourcetype() default DEFAULT_RESOURCE_TYPE;\n \n-    @Property(label = \"External server URL\", cardinality = 0, value = DEFAULT_SERVER_URL,\n-            description = EXTERNAL_URL_DESC)\n-    public static final String HAPI_EXTERNAL_URL = EXTERNAL_URL;\n+        @AttributeDefinition(\n+                name = \"HApi Collection Resource Type\",\n+                description = COLLECTION_RESOURCE_TYPE_DESC\n \n-    @Property(label = \"Enabled\", boolValue = DEFAULT_ENABLED,\n-            description = ENABLED_DESC)\n-    public static final String HAPI_ENABLED = ENABLED;\n+        )\n+        String org_apache_sling_hapi_tools_collectionresourcetype() default DEFAULT_COLLECTION_RESOURCE_TYPE;\n+\n+        @AttributeDefinition(\n+                name = \"HApi Types Search Paths\",\n+                description = SEARCH_PATHS_DESC\n+        )\n+        String[] org_apache_sling_hapi_tools_searchpaths() default {DEFAULT_SEARCH_PATH};\n+\n+        @AttributeDefinition(\n+                name = \"External server URL\",\n+                description = EXTERNAL_URL_DESC\n+\n+        )\n+        String org_apache_sling_hapi_tools_externalurl() default DEFAULT_SERVER_URL;\n+\n+        @AttributeDefinition(\n+                name = \"Enabled\",\n+                description = ENABLED_DESC,\n+                type = AttributeType.BOOLEAN\n+        )\n+        boolean org_apache_sling_hapi_tools_enabled() default DEFAULT_ENABLED;\n+\n+    }\n \n \n     private static String resourceType;\n@@ -82,15 +110,14 @@\n \n \n     @Activate\n-    private void activate(Map<String, Object> configuration) {\n-        enabled = PropertiesUtil.toBoolean(configuration.get(HAPI_ENABLED), false);\n+    private void activate(HApiUtilImpl.Configuration configuration) {\n+        enabled = configuration.org_apache_sling_hapi_tools_enabled();\n         if (!enabled) return;\n \n-        resourceType = PropertiesUtil.toString(configuration.get(HAPI_RESOURCE_TYPE), DEFAULT_RESOURCE_TYPE);\n-        collectionResourceType = PropertiesUtil.toString(configuration.get(HAPI_COLLECTION_RESOURCE_TYPE),\n-                DEFAULT_COLLECTION_RESOURCE_TYPE);\n-        hApiPaths = PropertiesUtil.toStringArray(configuration.get(HAPI_PATHS));\n-        serverContextPath = PropertiesUtil.toString(configuration.get(HAPI_EXTERNAL_URL), DEFAULT_SERVER_URL);\n+        resourceType = configuration.org_apache_sling_hapi_tools_resourcetype();\n+        collectionResourceType = configuration.org_apache_sling_hapi_tools_collectionresourcetype();\n+        hApiPaths = configuration.org_apache_sling_hapi_tools_searchpaths();\n+        serverContextPath = configuration.org_apache_sling_hapi_tools_externalurl();\n     }\n \n     /**\n@@ -221,51 +248,36 @@ public HApiType fromResource(ResourceResolver resolver, Resource typeResource) t\n         for (Value p : Arrays.asList(parameterValues)) {\n             parameters.add(p.getString());\n         }\n-        HApiTypeImpl newType = new HApiTypeImpl(name, description, serverContextPath, path, fqdn, parameters, null, null, false);\n-        TypesCache.getInstance(this).addType(newType);\n-        LOG.debug(\"Inserted type {} to cache: {}\", newType, TypesCache.getInstance(this));\n \n-\n-        try {\n-            // Get parent if it exists\n-            HApiType parent = null;\n-            String parentPath = resProps.get(\"extends\", (String) null);\n-            if (null != parentPath) {\n-                parent = TypesCache.getInstance(this).getType(resolver, getTypeResource(resolver, parentPath));\n-            }\n-\n-            // Get properties\n-            Map<String, HApiProperty> properties = new HashMap<String, HApiProperty>();\n-            for (Resource res : typeResource.getChildren()) {\n-                ValueMap resValueMap = res.adaptTo(ValueMap.class);\n-\n-                String propName = res.getName();\n-                String propDescription = resValueMap.get(\"description\", \"\");\n-                String typeFqdnOrPath = resValueMap.get(\"type\", (String) null);\n-                Resource propTypeResource = getTypeResource(resolver, typeFqdnOrPath);\n-                HApiType propType = (null != propTypeResource)\n-                        ? TypesCache.getInstance(this).getType(resolver, propTypeResource)\n-                        : new AbstractHapiTypeImpl(typeFqdnOrPath);\n-                LOG.debug(\"Fetched type {} from cache\", propType);\n-                Boolean propMultiple = resValueMap.get(\"multiple\", false);\n-\n-                HApiProperty prop = new HApiPropertyImpl(propName, propDescription, propType, propMultiple);\n-                properties.put(prop.getName(), prop);\n-            }\n-            // Set parent and properties\n-            newType.setParent(parent);\n-            newType.setProperties(properties);\n-\n-        } catch (RuntimeException t) {\n-            // Remove type from cache if it wasn't created successfully\n-            TypesCache.getInstance(this).removeType(newType.getPath());\n-            throw t;\n-        } catch (RepositoryException e) {\n-            // Remove type from cache if it wasn't created successfully\n-            TypesCache.getInstance(this).removeType(newType.getPath());\n-            throw e;\n+        // Parent weak reference\n+        String parentPath = resProps.get(\"extends\", (String) null);\n+        HApiType parentWeak = new HApiTypeLazyWrapper(this, resolver, this.serverContextPath, parentPath);\n+\n+        // Properties weak reference\n+        Map<String, HApiProperty> properties = new HashMap<String, HApiProperty>();\n+        for (Resource res : typeResource.getChildren()) {\n+            ValueMap resValueMap = res.adaptTo(ValueMap.class);\n+\n+            String propName = res.getName();\n+            String propDescription = resValueMap.get(\"description\", \"\");\n+            String typeFqdnOrPath = resValueMap.get(\"type\", (String) null);\n+            Resource propTypeResource = getTypeResource(resolver, typeFqdnOrPath);\n+            HApiType propTypeWeak = (null != propTypeResource)\n+                    ? new HApiTypeLazyWrapper(this, resolver, this.serverContextPath, propTypeResource)\n+                    : new AbstractHapiTypeImpl(typeFqdnOrPath);\n+            Boolean propMultiple = resValueMap.get(\"multiple\", false);\n+\n+            HApiProperty prop = new HApiPropertyImpl(propName, propDescription, propTypeWeak, propMultiple);\n+            properties.put(prop.getName(), prop);\n         }\n \n+        //\n+        // Create type and add to cache\n+        //\n+        HApiTypeImpl newType = new HApiTypeImpl(name, description, serverContextPath, path, fqdn, parameters, properties, parentWeak, false);\n+        TypesCache.getInstance(this).addType(newType);\n+        LOG.debug(\"Inserted type {} to cache: {}\", newType, TypesCache.getInstance(this));\n+\n         LOG.debug(\"Created type {}\", newType);\n         return newType;\n     }",
                "deletions": 71
            }
        ]
    }
]