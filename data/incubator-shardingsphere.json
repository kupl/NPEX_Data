{
    "incubator-shardingsphere_3ba1834": {
        "bug_id": "incubator-shardingsphere_3ba1834",
        "commit": "https://github.com/apache/incubator-shardingsphere/commit/3ba18348c228fceb6610bd97a2ac21caea25d6b9",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/3ba18348c228fceb6610bd97a2ac21caea25d6b9/sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java?ref=3ba18348c228fceb6610bd97a2ac21caea25d6b9",
                "deletions": 1,
                "filename": "sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java",
                "patch": "@@ -18,6 +18,9 @@\n package org.apache.shardingsphere.opentracing.hook;\n \n import com.google.common.base.Joiner;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.Collections2;\n+import com.google.common.collect.Lists;\n import io.opentracing.ActiveSpan;\n import io.opentracing.Span;\n import io.opentracing.tag.Tags;\n@@ -61,7 +64,11 @@ public void start(final RouteUnit routeUnit, final DataSourceMetaData dataSource\n     }\n     \n     private String toString(final List<Object> parameterSets) {\n-        return parameterSets.isEmpty() ? \"\" : String.format(\"[%s]\", Joiner.on(\", \").join(parameterSets));\n+\n+        if (null == parameterSets || parameterSets.isEmpty()) {\n+            return \"\";\n+        }\n+        return String.format(\"[%s]\", Joiner.on(\", \").join(parameterSets));\n     }\n     \n     @Override",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/3ba18348c228fceb6610bd97a2ac21caea25d6b9/sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java",
                "sha": "2d97263930cefc1c51e53d5369aaa64698c17c9c",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/3ba18348c228fceb6610bd97a2ac21caea25d6b9/sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java?ref=3ba18348c228fceb6610bd97a2ac21caea25d6b9",
                "deletions": 0,
                "filename": "sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java",
                "patch": "@@ -95,6 +95,30 @@ public void assertExecuteSuccessForTrunkThread() {\n         assertThat(actualTags.get(Tags.DB_STATEMENT.getKey()), CoreMatchers.<Object>is(\"SELECT * FROM success_tbl;\"));\n         assertThat(actualTags.get(ShardingTags.DB_BIND_VARIABLES.getKey()), CoreMatchers.<Object>is(\"[1, 2]\"));\n         verify(activeSpan, times(0)).deactivate();\n+\n+        sqlExecutionHook.start(createRouteUnit(\"success_ds\", \"SELECT * FROM success_tbl;\", null), dataSourceMetaData, true, null);\n+        sqlExecutionHook.finishSuccess();\n+    }\n+\n+    @Test\n+    public void assertExecuteSuccessForTrunkThreadWhenParamsIsNull() {\n+        DataSourceMetaData dataSourceMetaData = mock(DataSourceMetaData.class);\n+        when(dataSourceMetaData.getHostName()).thenReturn(\"localhost\");\n+        when(dataSourceMetaData.getPort()).thenReturn(8888);\n+        sqlExecutionHook.start(createRouteUnit(\"success_ds\", \"SELECT * FROM success_tbl;\", null), dataSourceMetaData, true, null);\n+        sqlExecutionHook.finishSuccess();\n+        MockSpan actual = getActualSpan();\n+        assertThat(actual.operationName(), is(\"/Sharding-Sphere/executeSQL/\"));\n+        Map<String, Object> actualTags = actual.tags();\n+        assertThat(actualTags.get(Tags.COMPONENT.getKey()), CoreMatchers.<Object>is(ShardingTags.COMPONENT_NAME));\n+        assertThat(actualTags.get(Tags.SPAN_KIND.getKey()), CoreMatchers.<Object>is(Tags.SPAN_KIND_CLIENT));\n+        assertThat(actualTags.get(Tags.PEER_HOSTNAME.getKey()), CoreMatchers.<Object>is(\"localhost\"));\n+        assertThat(actualTags.get(Tags.PEER_PORT.getKey()), CoreMatchers.<Object>is(8888));\n+        assertThat(actualTags.get(Tags.DB_TYPE.getKey()), CoreMatchers.<Object>is(\"sql\"));\n+        assertThat(actualTags.get(Tags.DB_INSTANCE.getKey()), CoreMatchers.<Object>is(\"success_ds\"));\n+        assertThat(actualTags.get(Tags.DB_STATEMENT.getKey()), CoreMatchers.<Object>is(\"SELECT * FROM success_tbl;\"));\n+        assertThat(actualTags.get(ShardingTags.DB_BIND_VARIABLES.getKey()), CoreMatchers.<Object>is(\"\"));\n+        verify(activeSpan, times(0)).deactivate();\n     }\n     \n     @Test",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/3ba18348c228fceb6610bd97a2ac21caea25d6b9/sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java",
                "sha": "38108e6e7bf162787f1908940b413f33fd260d9e",
                "status": "modified"
            }
        ],
        "message": "fix npe problem",
        "parent": "https://github.com/apache/incubator-shardingsphere/commit/7f4faf2cfc42e8cf34458226b85f95ff013d92a0",
        "repo": "incubator-shardingsphere",
        "unit_tests": [
            "OpenTracingSQLExecutionHookTest.java"
        ]
    },
    "incubator-shardingsphere_b3ebe42": {
        "bug_id": "incubator-shardingsphere_b3ebe42",
        "commit": "https://github.com/apache/incubator-shardingsphere/commit/b3ebe4265f6abf7934d622c82418073ca783f073",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/b3ebe4265f6abf7934d622c82418073ca783f073/sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java?ref=b3ebe4265f6abf7934d622c82418073ca783f073",
                "deletions": 1,
                "filename": "sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java",
                "patch": "@@ -61,7 +61,10 @@ public void start(final RouteUnit routeUnit, final DataSourceMetaData dataSource\n     }\n     \n     private String toString(final List<Object> parameterSets) {\n-        return parameterSets.isEmpty() ? \"\" : String.format(\"[%s]\", Joiner.on(\", \").join(parameterSets));\n+        if (null == parameterSets || parameterSets.isEmpty()) {\n+            return \"\";\n+        }\n+        return String.format(\"[%s]\", Joiner.on(\", \").join(parameterSets));\n     }\n     \n     @Override",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/b3ebe4265f6abf7934d622c82418073ca783f073/sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java",
                "sha": "62e6c4c52b40abdd9b3090dcccf02f131f8d39cd",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/b3ebe4265f6abf7934d622c82418073ca783f073/sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java?ref=b3ebe4265f6abf7934d622c82418073ca783f073",
                "deletions": 0,
                "filename": "sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java",
                "patch": "@@ -95,6 +95,29 @@ public void assertExecuteSuccessForTrunkThread() {\n         assertThat(actualTags.get(Tags.DB_STATEMENT.getKey()), CoreMatchers.<Object>is(\"SELECT * FROM success_tbl;\"));\n         assertThat(actualTags.get(ShardingTags.DB_BIND_VARIABLES.getKey()), CoreMatchers.<Object>is(\"[1, 2]\"));\n         verify(activeSpan, times(0)).deactivate();\n+        sqlExecutionHook.start(createRouteUnit(\"success_ds\", \"SELECT * FROM success_tbl;\", null), dataSourceMetaData, true, null);\n+        sqlExecutionHook.finishSuccess();\n+    }\n+\n+    @Test\n+    public void assertExecuteSuccessForTrunkThreadWhenParamsIsNull() {\n+        DataSourceMetaData dataSourceMetaData = mock(DataSourceMetaData.class);\n+        when(dataSourceMetaData.getHostName()).thenReturn(\"localhost\");\n+        when(dataSourceMetaData.getPort()).thenReturn(8888);\n+        sqlExecutionHook.start(createRouteUnit(\"success_ds\", \"SELECT * FROM success_tbl;\", null), dataSourceMetaData, true, null);\n+        sqlExecutionHook.finishSuccess();\n+        MockSpan actual = getActualSpan();\n+        assertThat(actual.operationName(), is(\"/Sharding-Sphere/executeSQL/\"));\n+        Map<String, Object> actualTags = actual.tags();\n+        assertThat(actualTags.get(Tags.COMPONENT.getKey()), CoreMatchers.<Object>is(ShardingTags.COMPONENT_NAME));\n+        assertThat(actualTags.get(Tags.SPAN_KIND.getKey()), CoreMatchers.<Object>is(Tags.SPAN_KIND_CLIENT));\n+        assertThat(actualTags.get(Tags.PEER_HOSTNAME.getKey()), CoreMatchers.<Object>is(\"localhost\"));\n+        assertThat(actualTags.get(Tags.PEER_PORT.getKey()), CoreMatchers.<Object>is(8888));\n+        assertThat(actualTags.get(Tags.DB_TYPE.getKey()), CoreMatchers.<Object>is(\"sql\"));\n+        assertThat(actualTags.get(Tags.DB_INSTANCE.getKey()), CoreMatchers.<Object>is(\"success_ds\"));\n+        assertThat(actualTags.get(Tags.DB_STATEMENT.getKey()), CoreMatchers.<Object>is(\"SELECT * FROM success_tbl;\"));\n+        assertThat(actualTags.get(ShardingTags.DB_BIND_VARIABLES.getKey()), CoreMatchers.<Object>is(\"\"));\n+        verify(activeSpan, times(0)).deactivate();\n     }\n     \n     @Test",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/b3ebe4265f6abf7934d622c82418073ca783f073/sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java",
                "sha": "3e953d72b7a6e2d30e5abfdf8e3dfa7b80e16e79",
                "status": "modified"
            }
        ],
        "message": "Feature/bug fix (#2240)\n\n* fix npe problem\r\n\r\n* remove useless import\r\n\r\n* remove empty line",
        "parent": "https://github.com/apache/incubator-shardingsphere/commit/ffc9eec96262f4e2e2034bd1c1fad4430d3f860c",
        "repo": "incubator-shardingsphere",
        "unit_tests": [
            "OpenTracingSQLExecutionHookTest.java"
        ]
    },
    "incubator-shardingsphere_c7fcb4c": {
        "bug_id": "incubator-shardingsphere_c7fcb4c",
        "commit": "https://github.com/apache/incubator-shardingsphere/commit/c7fcb4cbb968bd286006eb6fc106dfa9974fc59d",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/c7fcb4cbb968bd286006eb6fc106dfa9974fc59d/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeader.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeader.java?ref=c7fcb4cbb968bd286006eb6fc106dfa9974fc59d",
                "deletions": 5,
                "filename": "sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeader.java",
                "patch": "@@ -62,17 +62,17 @@ public QueryHeader(final ResultSetMetaData resultSetMetaData, final LogicSchema\n         if (logicSchema instanceof ShardingSchema) {\n             Collection<String> tableNames = logicSchema.getShardingRule().getLogicTableNames(resultSetMetaData.getTableName(columnIndex));\n             this.table = tableNames.isEmpty() ? \"\" : tableNames.iterator().next();\n-            if (resultSetMetaData.getTableName(columnIndex).isEmpty()) {\n-                this.primaryKey = false;\n-                this.notNull = false;\n-                this.autoIncrement = false;\n-            } else {\n+            if (logicSchema.getMetaData().getTables().containsTable(resultSetMetaData.getTableName(columnIndex))) {\n                 this.primaryKey = logicSchema.getMetaData().getTables().get(resultSetMetaData.getTableName(columnIndex)).getColumns()\n                         .get(resultSetMetaData.getColumnName(columnIndex).toLowerCase()).isPrimaryKey();\n                 this.notNull = logicSchema.getMetaData().getTables().get(resultSetMetaData.getTableName(columnIndex)).getColumns()\n                         .get(resultSetMetaData.getColumnName(columnIndex).toLowerCase()).isNotNull();\n                 this.autoIncrement = logicSchema.getMetaData().getTables().get(resultSetMetaData.getTableName(columnIndex)).getColumns()\n                         .get(resultSetMetaData.getColumnName(columnIndex).toLowerCase()).isAutoIncrement();\n+            } else {\n+                this.primaryKey = false;\n+                this.notNull = false;\n+                this.autoIncrement = false;\n             }\n         } else {\n             this.table = resultSetMetaData.getTableName(columnIndex);",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/c7fcb4cbb968bd286006eb6fc106dfa9974fc59d/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeader.java",
                "sha": "42721f6d9e4df966d4ab57f64ac4420d4e5925a4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/c7fcb4cbb968bd286006eb6fc106dfa9974fc59d/sharding-proxy/sharding-proxy-backend/src/test/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeaderTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-proxy/sharding-proxy-backend/src/test/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeaderTest.java?ref=c7fcb4cbb968bd286006eb6fc106dfa9974fc59d",
                "deletions": 0,
                "filename": "sharding-proxy/sharding-proxy-backend/src/test/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeaderTest.java",
                "patch": "@@ -112,6 +112,7 @@ private ShardingSchema getShardingSchema() {\n         ColumnMetaData columnMetaData = new ColumnMetaData(\"order_id\", \"int\", true, true, true);\n         TableMetas tableMetas = mock(TableMetas.class);\n         when(tableMetas.get(\"t_order\")).thenReturn(new TableMetaData(Arrays.asList(columnMetaData), Arrays.asList(\"order_id\")));\n+        when(tableMetas.containsTable(\"t_order\")).thenReturn(true);\n         ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n         when(metaData.getTables()).thenReturn(tableMetas);\n         DataSourceMetas dataSourceMetas = mock(DataSourceMetas.class);",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/c7fcb4cbb968bd286006eb6fc106dfa9974fc59d/sharding-proxy/sharding-proxy-backend/src/test/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeaderTest.java",
                "sha": "dcd187f5d7c8f027419ed123a89e27a7c0a254be",
                "status": "modified"
            }
        ],
        "message": "fixes QueryHeader NPE bug.(#3397) (#3401)",
        "parent": "https://github.com/apache/incubator-shardingsphere/commit/3cdc700a2bfa5465f8fb5ccf68b21f9bbb78fb7c",
        "repo": "incubator-shardingsphere",
        "unit_tests": [
            "QueryHeaderTest.java"
        ]
    },
    "incubator-shardingsphere_d367e25": {
        "bug_id": "incubator-shardingsphere_d367e25",
        "commit": "https://github.com/apache/incubator-shardingsphere/commit/d367e25213a530a87c9242225dcf64310f70691d",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/d367e25213a530a87c9242225dcf64310f70691d/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/ResultSetReturnedDatabaseMetaData.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/ResultSetReturnedDatabaseMetaData.java?ref=d367e25213a530a87c9242225dcf64310f70691d",
                "deletions": 1,
                "filename": "sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/ResultSetReturnedDatabaseMetaData.java",
                "patch": "@@ -263,7 +263,10 @@ private String getCurrentDataSourceName() {\n     }\n     \n     private String getActualTableNamePattern(final String tableNamePattern) {\n-        return null == tableNamePattern ? tableNamePattern : (shardingRule.findTableRule(tableNamePattern).isPresent() ? \"%\" + tableNamePattern + \"%\" : tableNamePattern);\n+        if (null == tableNamePattern || null == shardingRule) {\n+            return tableNamePattern;\n+        }\n+        return shardingRule.findTableRule(tableNamePattern).isPresent() ? \"%\" + tableNamePattern + \"%\" : tableNamePattern;\n     }\n     \n     private String getActualTable(final String table) {",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/d367e25213a530a87c9242225dcf64310f70691d/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/ResultSetReturnedDatabaseMetaData.java",
                "sha": "13c2a12d1e173a903fd24c795f8337e787f4e95f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/d367e25213a530a87c9242225dcf64310f70691d/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/DatabaseMetaDataResultSet.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/DatabaseMetaDataResultSet.java?ref=d367e25213a530a87c9242225dcf64310f70691d",
                "deletions": 1,
                "filename": "sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/DatabaseMetaDataResultSet.java",
                "patch": "@@ -30,6 +30,7 @@\n import java.sql.Timestamp;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n@@ -100,7 +101,7 @@ private DatabaseMetaDataObject generateDatabaseMetaDataObject(final int tableNam\n         for (int i = 1; i <= columnLabelIndexMap.size(); i++) {\n             if (tableNameColumnIndex == i) {\n                 String tableName = resultSet.getString(i);\n-                Collection<String> logicTableNames = shardingRule.getLogicTableNames(tableName);\n+                Collection<String> logicTableNames = null == shardingRule ? Collections.<String>emptyList() : shardingRule.getLogicTableNames(tableName);\n                 result.addObject(logicTableNames.isEmpty() ? tableName : logicTableNames.iterator().next());\n             } else if (indexNameColumnIndex == i) {\n                 String tableName = resultSet.getString(tableNameColumnIndex);",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/d367e25213a530a87c9242225dcf64310f70691d/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/DatabaseMetaDataResultSet.java",
                "sha": "5aff76a5d4bbebcb55b7a12a036650218dd46e27",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/d367e25213a530a87c9242225dcf64310f70691d/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/CachedDatabaseMetaDataTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/CachedDatabaseMetaDataTest.java?ref=d367e25213a530a87c9242225dcf64310f70691d",
                "deletions": 2,
                "filename": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/CachedDatabaseMetaDataTest.java",
                "patch": "@@ -858,8 +858,8 @@ public void assertGetProcedureColumns() throws SQLException {\n     \n     @Test\n     public void assertGetTables() throws SQLException {\n-        when(databaseMetaData.getTables(\"test\", null, null, null)).thenReturn(resultSet);\n-        assertThat(cachedDatabaseMetaData.getTables(\"test\", null, null, null), instanceOf(DatabaseMetaDataResultSet.class));\n+        when(databaseMetaData.getTables(\"test\", null, \"%\" + TABLE_NAME + \"%\", null)).thenReturn(resultSet);\n+        assertThat(cachedDatabaseMetaData.getTables(\"test\", null, TABLE_NAME, null), instanceOf(DatabaseMetaDataResultSet.class));\n     }\n     \n     @Test",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/d367e25213a530a87c9242225dcf64310f70691d/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/CachedDatabaseMetaDataTest.java",
                "sha": "7b3c07fc90e30810e4ab554fd04d180a1a2c3aa1",
                "status": "modified"
            }
        ],
        "message": "Fixes #2527, NPE in CachedDatabaseMetaData when use masterSlaveDataSource",
        "parent": "https://github.com/apache/incubator-shardingsphere/commit/6981f690ae2864fa4927fdb5fc74f795a981191e",
        "repo": "incubator-shardingsphere",
        "unit_tests": [
            "DatabaseMetaDataResultSetTest.java"
        ]
    },
    "incubator-shardingsphere_db14dbf": {
        "bug_id": "incubator-shardingsphere_db14dbf",
        "commit": "https://github.com/apache/incubator-shardingsphere/commit/db14dbfee81c7e57945bad9479cf60deb2b61efe",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/db14dbfee81c7e57945bad9479cf60deb2b61efe/sharding-proxy/src/main/java/io/shardingsphere/proxy/backend/common/jdbc/BackendConnection.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-proxy/src/main/java/io/shardingsphere/proxy/backend/common/jdbc/BackendConnection.java?ref=db14dbfee81c7e57945bad9479cf60deb2b61efe",
                "deletions": 2,
                "filename": "sharding-proxy/src/main/java/io/shardingsphere/proxy/backend/common/jdbc/BackendConnection.java",
                "patch": "@@ -23,7 +23,7 @@\n import java.sql.Connection;\n import java.sql.SQLException;\n import java.util.Collection;\n-import java.util.LinkedList;\n+import java.util.concurrent.CopyOnWriteArrayList;\n \n /**\n  * Backend connection.\n@@ -33,7 +33,7 @@\n  */\n public final class BackendConnection implements AutoCloseable {\n     \n-    private final Collection<Connection> cachedConnections = new LinkedList<>();\n+    private final Collection<Connection> cachedConnections = new CopyOnWriteArrayList<>();\n     \n     /**\n      * Get connection of current thread datasource.",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/db14dbfee81c7e57945bad9479cf60deb2b61efe/sharding-proxy/src/main/java/io/shardingsphere/proxy/backend/common/jdbc/BackendConnection.java",
                "sha": "117e030b7ed05fcb85f5e43c5105a0ba02efef1d",
                "status": "modified"
            }
        ],
        "message": "fix multiple thread read connection throw npe",
        "parent": "https://github.com/apache/incubator-shardingsphere/commit/124ac0b761fcf0165a1ccae49f4f50977bfb4f6c",
        "repo": "incubator-shardingsphere",
        "unit_tests": [
            "BackendConnectionTest.java"
        ]
    }
}