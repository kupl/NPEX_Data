{
    "incubator-shardingsphere_e537a9d": {
        "repo": "incubator-shardingsphere",
        "message": "fix NullPointerException",
        "commit": "https://github.com/apache/incubator-shardingsphere/commit/e537a9d1a0a5df3323a8ee96a539d4928617216e",
        "parent": "https://github.com/apache/incubator-shardingsphere/commit/2a81cf67a58d3fee42722e083076d2a6ec6418b2",
        "bug_id": "incubator-shardingsphere_e537a9d",
        "file": [
            {
                "sha": "204a9439b5d6d391b04b2c69b8ee0f40604c3b39",
                "filename": "sharding-core/src/main/java/io/shardingsphere/core/yaml/sharding/YamlShardingRuleConfiguration.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/e537a9d1a0a5df3323a8ee96a539d4928617216e/sharding-core/src/main/java/io/shardingsphere/core/yaml/sharding/YamlShardingRuleConfiguration.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/e537a9d1a0a5df3323a8ee96a539d4928617216e/sharding-core/src/main/java/io/shardingsphere/core/yaml/sharding/YamlShardingRuleConfiguration.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/src/main/java/io/shardingsphere/core/yaml/sharding/YamlShardingRuleConfiguration.java?ref=e537a9d1a0a5df3323a8ee96a539d4928617216e",
                "patch": "@@ -94,7 +94,7 @@ public ShardingRuleConfiguration getShardingRuleConfiguration() {\n             result.getTableRuleConfigs().add(tableRuleConfig.build());\n         }\n         for (Entry<String, YamlBroadcastTableRuleConfiguration> entry : broadcastTables.entrySet()) {\n-            YamlBroadcastTableRuleConfiguration broadcastTableRuleConfig = entry.getValue();\n+            YamlBroadcastTableRuleConfiguration broadcastTableRuleConfig = null == entry.getValue() ? new YamlBroadcastTableRuleConfiguration() : entry.getValue();\n             broadcastTableRuleConfig.setLogicTable(entry.getKey());\n             result.getBroadcastTableRuleConfigs().add(broadcastTableRuleConfig.build());\n         }",
                "deletions": 1
            }
        ],
        "patched_files": [
            "YamlShardingRuleConfiguration.java"
        ],
        "unit_tests": [
            "YamlShardingRuleConfigurationTest.java"
        ]
    },
    "incubator-shardingsphere_9f07025": {
        "repo": "incubator-shardingsphere",
        "message": "fix NullPointerException",
        "commit": "https://github.com/apache/incubator-shardingsphere/commit/9f07025273d25b271117fb1b5c2ae43b8413e159",
        "parent": "https://github.com/apache/incubator-shardingsphere/commit/b9bbbdd69ea286272ede2f291566e2e85b72011f",
        "bug_id": "incubator-shardingsphere_9f07025",
        "file": [
            {
                "sha": "2797ea0d5f4458ab45a30d23a73c2a3ff1e8e40d",
                "filename": "sharding-core/src/test/resources/parser/insert.xml",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/9f07025273d25b271117fb1b5c2ae43b8413e159/sharding-core/src/test/resources/parser/insert.xml",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/9f07025273d25b271117fb1b5c2ae43b8413e159/sharding-core/src/test/resources/parser/insert.xml",
                "status": "modified",
                "changes": 20,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/src/test/resources/parser/insert.xml?ref=9f07025273d25b271117fb1b5c2ae43b8413e159",
                "patch": "@@ -88,6 +88,26 @@\n         </or-condition>\n     </parser-result>\n \n+    <parser-result sql-case-id=\"assertInsertWithDuplicateKeyUpdate\" parameters=\"1 1 'init'\">\n+        <tables>\n+            <table name=\"t_order\" />\n+        </tables>\n+        <tokens>\n+            <table-token begin-position=\"12\" original-literals=\"t_order\" />\n+            <insert-values-token begin-position=\"55\" table-name=\"t_order\"/>\n+        </tokens>\n+        <or-condition>\n+            <and-condition>\n+                <condition column-name=\"order_id\" table-name=\"t_order\" operator=\"EQUAL\">\n+                    <value index=\"0\" literal=\"1\" type=\"int\" />\n+                </condition>\n+                <condition column-name=\"user_id\" table-name=\"t_order\" operator=\"EQUAL\">\n+                    <value index=\"1\" literal=\"1\" type=\"int\" />\n+                </condition>\n+            </and-condition>\n+        </or-condition>\n+    </parser-result>\n+\n     <parser-result sql-case-id=\"assertBatchInsertWithGenerateKeyColumn\" parameters=\"10000 1000 10 10010 1001 10\">\n         <tables>\n             <table name=\"t_order_item\" />",
                "deletions": 0
            },
            {
                "sha": "42cb2c7aa34883a3720fb3aa4891d94ad0e49cee",
                "filename": "sharding-jdbc/src/main/java/io/shardingsphere/core/jdbc/core/statement/ShardingPreparedStatement.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/9f07025273d25b271117fb1b5c2ae43b8413e159/sharding-jdbc/src/main/java/io/shardingsphere/core/jdbc/core/statement/ShardingPreparedStatement.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/9f07025273d25b271117fb1b5c2ae43b8413e159/sharding-jdbc/src/main/java/io/shardingsphere/core/jdbc/core/statement/ShardingPreparedStatement.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-jdbc/src/main/java/io/shardingsphere/core/jdbc/core/statement/ShardingPreparedStatement.java?ref=9f07025273d25b271117fb1b5c2ae43b8413e159",
                "patch": "@@ -144,7 +144,9 @@ public int executeUpdate() throws SQLException {\n             return new PreparedStatementExecutor(\n                     getConnection().getShardingContext().getExecutorEngine(), routeResult.getSqlStatement().getType(), preparedStatementUnits).executeUpdate();\n         } finally {\n-            JDBCShardingRefreshHandler.build(routeResult, connection).execute();\n+            if (routeResult != null && connection != null) {\n+                JDBCShardingRefreshHandler.build(routeResult, connection).execute();\n+            }\n             clearBatch();\n         }\n     }\n@@ -156,7 +158,9 @@ public boolean execute() throws SQLException {\n             return new PreparedStatementExecutor(\n                     getConnection().getShardingContext().getExecutorEngine(), routeResult.getSqlStatement().getType(), preparedStatementUnits).execute();\n         } finally {\n-            JDBCShardingRefreshHandler.build(routeResult, connection).execute();\n+            if (routeResult != null && connection != null) {\n+                JDBCShardingRefreshHandler.build(routeResult, connection).execute();\n+            }\n             clearBatch();\n         }\n     }",
                "deletions": 2
            },
            {
                "sha": "eed005262a4ce7860bf318cc6552b62f356526a8",
                "filename": "sharding-jdbc/src/main/java/io/shardingsphere/core/jdbc/core/statement/ShardingStatement.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/9f07025273d25b271117fb1b5c2ae43b8413e159/sharding-jdbc/src/main/java/io/shardingsphere/core/jdbc/core/statement/ShardingStatement.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/9f07025273d25b271117fb1b5c2ae43b8413e159/sharding-jdbc/src/main/java/io/shardingsphere/core/jdbc/core/statement/ShardingStatement.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-jdbc/src/main/java/io/shardingsphere/core/jdbc/core/statement/ShardingStatement.java?ref=9f07025273d25b271117fb1b5c2ae43b8413e159",
                "patch": "@@ -118,7 +118,9 @@ public int executeUpdate(final String sql) throws SQLException {\n         try {\n             return generateExecutor(sql).executeUpdate();\n         } finally {\n-            JDBCShardingRefreshHandler.build(routeResult, connection).execute();\n+            if (routeResult != null && connection != null) {\n+                JDBCShardingRefreshHandler.build(routeResult, connection).execute();\n+            }\n             currentResultSet = null;\n         }\n     }\n@@ -160,7 +162,9 @@ public boolean execute(final String sql) throws SQLException {\n         try {\n             return generateExecutor(sql).execute();\n         } finally {\n-            JDBCShardingRefreshHandler.build(routeResult, connection).execute();\n+            if (routeResult != null && connection != null) {\n+                JDBCShardingRefreshHandler.build(routeResult, connection).execute();\n+            }\n             currentResultSet = null;\n         }\n     }",
                "deletions": 2
            },
            {
                "sha": "e3d2fcfa7c72f18ff6f854a2a1e5e8e2989d1447",
                "filename": "sharding-sql-test/src/main/resources/sql/dml/insert.xml",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/9f07025273d25b271117fb1b5c2ae43b8413e159/sharding-sql-test/src/main/resources/sql/dml/insert.xml",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/9f07025273d25b271117fb1b5c2ae43b8413e159/sharding-sql-test/src/main/resources/sql/dml/insert.xml",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-sql-test/src/main/resources/sql/dml/insert.xml?ref=9f07025273d25b271117fb1b5c2ae43b8413e159",
                "patch": "@@ -6,11 +6,10 @@\n     <sql-case id=\"assertInsertWithGenerateKeyColumn\" value=\"INSERT INTO t_order_item(item_id, order_id, user_id, status) values(%s, %s, %s, 'insert')\" />\n     <sql-case id=\"assertInsertWithoutGenerateKeyColumn\" value=\"INSERT INTO t_order_item(order_id, user_id, status) values(%s, %s, 'insert')\" />\n \n-\n    <!-- <sql-case id=\"assertInsertWithPartialPlaceholders\" value=\"INSERT INTO t_order (order_id, user_id, status) VALUES (#s, #s, %s)\"/>-->\n \n-    <sql-case id=\"assertInsertWithGenerateKeyColumn\" value=\"INSERT INTO t_order_item(item_id, order_id, user_id, status) values (%s, %s, %s, 'insert')\" />\n-    <sql-case id=\"assertInsertWithoutGenerateKeyColumn\" value=\"INSERT INTO t_order_item(order_id, user_id, status) values (%s, %s, 'insert')\" />\n+    <sql-case id=\"assertInsertWithDuplicateKeyUpdate\" value=\"INSERT INTO t_order (order_id, user_id, status) VALUES (%s, %s, %s) ON DUPLICATE KEY UPDATE status = VALUES(status)\" db-types=\"MySQL\" />\n+\n     <sql-case id=\"assertBatchInsertWithGenerateKeyColumn\" value=\"INSERT INTO t_order_item(item_id, order_id, user_id, status) values (%s, %s, %s, 'insert'), (%s, %s, %s, 'insert')\" />\n     <sql-case id=\"assertBatchInsertWithoutGenerateKeyColumn\" value=\"INSERT INTO t_order_item(order_id, user_id, status) values (%s, %s, 'insert'), (%s, %s, 'insert')\" />\n ",
                "deletions": 3
            }
        ],
        "patched_files": [
            "ShardingStatement.java",
            "ShardingPreparedStatement.java"
        ],
        "unit_tests": [
            "ShardingPreparedStatementTest.java",
            "ShardingStatementTest.java"
        ]
    },
    "incubator-shardingsphere_3ba1834": {
        "repo": "incubator-shardingsphere",
        "message": "fix npe problem",
        "commit": "https://github.com/apache/incubator-shardingsphere/commit/3ba18348c228fceb6610bd97a2ac21caea25d6b9",
        "parent": "https://github.com/apache/incubator-shardingsphere/commit/7f4faf2cfc42e8cf34458226b85f95ff013d92a0",
        "bug_id": "incubator-shardingsphere_3ba1834",
        "file": [
            {
                "sha": "2d97263930cefc1c51e53d5369aaa64698c17c9c",
                "filename": "sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/3ba18348c228fceb6610bd97a2ac21caea25d6b9/sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/3ba18348c228fceb6610bd97a2ac21caea25d6b9/sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java?ref=3ba18348c228fceb6610bd97a2ac21caea25d6b9",
                "patch": "@@ -18,6 +18,9 @@\n package org.apache.shardingsphere.opentracing.hook;\n \n import com.google.common.base.Joiner;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.Collections2;\n+import com.google.common.collect.Lists;\n import io.opentracing.ActiveSpan;\n import io.opentracing.Span;\n import io.opentracing.tag.Tags;\n@@ -61,7 +64,11 @@ public void start(final RouteUnit routeUnit, final DataSourceMetaData dataSource\n     }\n     \n     private String toString(final List<Object> parameterSets) {\n-        return parameterSets.isEmpty() ? \"\" : String.format(\"[%s]\", Joiner.on(\", \").join(parameterSets));\n+\n+        if (null == parameterSets || parameterSets.isEmpty()) {\n+            return \"\";\n+        }\n+        return String.format(\"[%s]\", Joiner.on(\", \").join(parameterSets));\n     }\n     \n     @Override",
                "deletions": 1
            },
            {
                "sha": "38108e6e7bf162787f1908940b413f33fd260d9e",
                "filename": "sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/3ba18348c228fceb6610bd97a2ac21caea25d6b9/sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/3ba18348c228fceb6610bd97a2ac21caea25d6b9/sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java",
                "status": "modified",
                "changes": 24,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java?ref=3ba18348c228fceb6610bd97a2ac21caea25d6b9",
                "patch": "@@ -95,6 +95,30 @@ public void assertExecuteSuccessForTrunkThread() {\n         assertThat(actualTags.get(Tags.DB_STATEMENT.getKey()), CoreMatchers.<Object>is(\"SELECT * FROM success_tbl;\"));\n         assertThat(actualTags.get(ShardingTags.DB_BIND_VARIABLES.getKey()), CoreMatchers.<Object>is(\"[1, 2]\"));\n         verify(activeSpan, times(0)).deactivate();\n+\n+        sqlExecutionHook.start(createRouteUnit(\"success_ds\", \"SELECT * FROM success_tbl;\", null), dataSourceMetaData, true, null);\n+        sqlExecutionHook.finishSuccess();\n+    }\n+\n+    @Test\n+    public void assertExecuteSuccessForTrunkThreadWhenParamsIsNull() {\n+        DataSourceMetaData dataSourceMetaData = mock(DataSourceMetaData.class);\n+        when(dataSourceMetaData.getHostName()).thenReturn(\"localhost\");\n+        when(dataSourceMetaData.getPort()).thenReturn(8888);\n+        sqlExecutionHook.start(createRouteUnit(\"success_ds\", \"SELECT * FROM success_tbl;\", null), dataSourceMetaData, true, null);\n+        sqlExecutionHook.finishSuccess();\n+        MockSpan actual = getActualSpan();\n+        assertThat(actual.operationName(), is(\"/Sharding-Sphere/executeSQL/\"));\n+        Map<String, Object> actualTags = actual.tags();\n+        assertThat(actualTags.get(Tags.COMPONENT.getKey()), CoreMatchers.<Object>is(ShardingTags.COMPONENT_NAME));\n+        assertThat(actualTags.get(Tags.SPAN_KIND.getKey()), CoreMatchers.<Object>is(Tags.SPAN_KIND_CLIENT));\n+        assertThat(actualTags.get(Tags.PEER_HOSTNAME.getKey()), CoreMatchers.<Object>is(\"localhost\"));\n+        assertThat(actualTags.get(Tags.PEER_PORT.getKey()), CoreMatchers.<Object>is(8888));\n+        assertThat(actualTags.get(Tags.DB_TYPE.getKey()), CoreMatchers.<Object>is(\"sql\"));\n+        assertThat(actualTags.get(Tags.DB_INSTANCE.getKey()), CoreMatchers.<Object>is(\"success_ds\"));\n+        assertThat(actualTags.get(Tags.DB_STATEMENT.getKey()), CoreMatchers.<Object>is(\"SELECT * FROM success_tbl;\"));\n+        assertThat(actualTags.get(ShardingTags.DB_BIND_VARIABLES.getKey()), CoreMatchers.<Object>is(\"\"));\n+        verify(activeSpan, times(0)).deactivate();\n     }\n     \n     @Test",
                "deletions": 0
            }
        ],
        "patched_files": [
            "OpenTracingSQLExecutionHook.java"
        ],
        "unit_tests": [
            "OpenTracingSQLExecutionHookTest.java"
        ]
    },
    "incubator-shardingsphere_b3ebe42": {
        "repo": "incubator-shardingsphere",
        "message": "Feature/bug fix (#2240)\n\n* fix npe problem\r\n\r\n* remove useless import\r\n\r\n* remove empty line",
        "commit": "https://github.com/apache/incubator-shardingsphere/commit/b3ebe4265f6abf7934d622c82418073ca783f073",
        "parent": "https://github.com/apache/incubator-shardingsphere/commit/ffc9eec96262f4e2e2034bd1c1fad4430d3f860c",
        "bug_id": "incubator-shardingsphere_b3ebe42",
        "file": [
            {
                "sha": "62e6c4c52b40abdd9b3090dcccf02f131f8d39cd",
                "filename": "sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/b3ebe4265f6abf7934d622c82418073ca783f073/sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/b3ebe4265f6abf7934d622c82418073ca783f073/sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java?ref=b3ebe4265f6abf7934d622c82418073ca783f073",
                "patch": "@@ -61,7 +61,10 @@ public void start(final RouteUnit routeUnit, final DataSourceMetaData dataSource\n     }\n     \n     private String toString(final List<Object> parameterSets) {\n-        return parameterSets.isEmpty() ? \"\" : String.format(\"[%s]\", Joiner.on(\", \").join(parameterSets));\n+        if (null == parameterSets || parameterSets.isEmpty()) {\n+            return \"\";\n+        }\n+        return String.format(\"[%s]\", Joiner.on(\", \").join(parameterSets));\n     }\n     \n     @Override",
                "deletions": 1
            },
            {
                "sha": "3e953d72b7a6e2d30e5abfdf8e3dfa7b80e16e79",
                "filename": "sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/b3ebe4265f6abf7934d622c82418073ca783f073/sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/b3ebe4265f6abf7934d622c82418073ca783f073/sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java",
                "status": "modified",
                "changes": 23,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java?ref=b3ebe4265f6abf7934d622c82418073ca783f073",
                "patch": "@@ -95,6 +95,29 @@ public void assertExecuteSuccessForTrunkThread() {\n         assertThat(actualTags.get(Tags.DB_STATEMENT.getKey()), CoreMatchers.<Object>is(\"SELECT * FROM success_tbl;\"));\n         assertThat(actualTags.get(ShardingTags.DB_BIND_VARIABLES.getKey()), CoreMatchers.<Object>is(\"[1, 2]\"));\n         verify(activeSpan, times(0)).deactivate();\n+        sqlExecutionHook.start(createRouteUnit(\"success_ds\", \"SELECT * FROM success_tbl;\", null), dataSourceMetaData, true, null);\n+        sqlExecutionHook.finishSuccess();\n+    }\n+\n+    @Test\n+    public void assertExecuteSuccessForTrunkThreadWhenParamsIsNull() {\n+        DataSourceMetaData dataSourceMetaData = mock(DataSourceMetaData.class);\n+        when(dataSourceMetaData.getHostName()).thenReturn(\"localhost\");\n+        when(dataSourceMetaData.getPort()).thenReturn(8888);\n+        sqlExecutionHook.start(createRouteUnit(\"success_ds\", \"SELECT * FROM success_tbl;\", null), dataSourceMetaData, true, null);\n+        sqlExecutionHook.finishSuccess();\n+        MockSpan actual = getActualSpan();\n+        assertThat(actual.operationName(), is(\"/Sharding-Sphere/executeSQL/\"));\n+        Map<String, Object> actualTags = actual.tags();\n+        assertThat(actualTags.get(Tags.COMPONENT.getKey()), CoreMatchers.<Object>is(ShardingTags.COMPONENT_NAME));\n+        assertThat(actualTags.get(Tags.SPAN_KIND.getKey()), CoreMatchers.<Object>is(Tags.SPAN_KIND_CLIENT));\n+        assertThat(actualTags.get(Tags.PEER_HOSTNAME.getKey()), CoreMatchers.<Object>is(\"localhost\"));\n+        assertThat(actualTags.get(Tags.PEER_PORT.getKey()), CoreMatchers.<Object>is(8888));\n+        assertThat(actualTags.get(Tags.DB_TYPE.getKey()), CoreMatchers.<Object>is(\"sql\"));\n+        assertThat(actualTags.get(Tags.DB_INSTANCE.getKey()), CoreMatchers.<Object>is(\"success_ds\"));\n+        assertThat(actualTags.get(Tags.DB_STATEMENT.getKey()), CoreMatchers.<Object>is(\"SELECT * FROM success_tbl;\"));\n+        assertThat(actualTags.get(ShardingTags.DB_BIND_VARIABLES.getKey()), CoreMatchers.<Object>is(\"\"));\n+        verify(activeSpan, times(0)).deactivate();\n     }\n     \n     @Test",
                "deletions": 0
            }
        ],
        "patched_files": [
            "OpenTracingSQLExecutionHook.java"
        ],
        "unit_tests": [
            "OpenTracingSQLExecutionHookTest.java"
        ]
    },
    "incubator-shardingsphere_c7fcb4c": {
        "repo": "incubator-shardingsphere",
        "message": "fixes QueryHeader NPE bug.(#3397) (#3401)",
        "commit": "https://github.com/apache/incubator-shardingsphere/commit/c7fcb4cbb968bd286006eb6fc106dfa9974fc59d",
        "parent": "https://github.com/apache/incubator-shardingsphere/commit/3cdc700a2bfa5465f8fb5ccf68b21f9bbb78fb7c",
        "bug_id": "incubator-shardingsphere_c7fcb4c",
        "file": [
            {
                "sha": "42721f6d9e4df966d4ab57f64ac4420d4e5925a4",
                "filename": "sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeader.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/c7fcb4cbb968bd286006eb6fc106dfa9974fc59d/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeader.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/c7fcb4cbb968bd286006eb6fc106dfa9974fc59d/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeader.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeader.java?ref=c7fcb4cbb968bd286006eb6fc106dfa9974fc59d",
                "patch": "@@ -62,17 +62,17 @@ public QueryHeader(final ResultSetMetaData resultSetMetaData, final LogicSchema\n         if (logicSchema instanceof ShardingSchema) {\n             Collection<String> tableNames = logicSchema.getShardingRule().getLogicTableNames(resultSetMetaData.getTableName(columnIndex));\n             this.table = tableNames.isEmpty() ? \"\" : tableNames.iterator().next();\n-            if (resultSetMetaData.getTableName(columnIndex).isEmpty()) {\n-                this.primaryKey = false;\n-                this.notNull = false;\n-                this.autoIncrement = false;\n-            } else {\n+            if (logicSchema.getMetaData().getTables().containsTable(resultSetMetaData.getTableName(columnIndex))) {\n                 this.primaryKey = logicSchema.getMetaData().getTables().get(resultSetMetaData.getTableName(columnIndex)).getColumns()\n                         .get(resultSetMetaData.getColumnName(columnIndex).toLowerCase()).isPrimaryKey();\n                 this.notNull = logicSchema.getMetaData().getTables().get(resultSetMetaData.getTableName(columnIndex)).getColumns()\n                         .get(resultSetMetaData.getColumnName(columnIndex).toLowerCase()).isNotNull();\n                 this.autoIncrement = logicSchema.getMetaData().getTables().get(resultSetMetaData.getTableName(columnIndex)).getColumns()\n                         .get(resultSetMetaData.getColumnName(columnIndex).toLowerCase()).isAutoIncrement();\n+            } else {\n+                this.primaryKey = false;\n+                this.notNull = false;\n+                this.autoIncrement = false;\n             }\n         } else {\n             this.table = resultSetMetaData.getTableName(columnIndex);",
                "deletions": 5
            },
            {
                "sha": "dcd187f5d7c8f027419ed123a89e27a7c0a254be",
                "filename": "sharding-proxy/sharding-proxy-backend/src/test/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeaderTest.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/c7fcb4cbb968bd286006eb6fc106dfa9974fc59d/sharding-proxy/sharding-proxy-backend/src/test/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeaderTest.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/c7fcb4cbb968bd286006eb6fc106dfa9974fc59d/sharding-proxy/sharding-proxy-backend/src/test/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeaderTest.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-proxy/sharding-proxy-backend/src/test/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeaderTest.java?ref=c7fcb4cbb968bd286006eb6fc106dfa9974fc59d",
                "patch": "@@ -112,6 +112,7 @@ private ShardingSchema getShardingSchema() {\n         ColumnMetaData columnMetaData = new ColumnMetaData(\"order_id\", \"int\", true, true, true);\n         TableMetas tableMetas = mock(TableMetas.class);\n         when(tableMetas.get(\"t_order\")).thenReturn(new TableMetaData(Arrays.asList(columnMetaData), Arrays.asList(\"order_id\")));\n+        when(tableMetas.containsTable(\"t_order\")).thenReturn(true);\n         ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n         when(metaData.getTables()).thenReturn(tableMetas);\n         DataSourceMetas dataSourceMetas = mock(DataSourceMetas.class);",
                "deletions": 0
            }
        ],
        "patched_files": [
            "QueryHeader.java"
        ],
        "unit_tests": [
            "QueryHeaderTest.java"
        ]
    },
    "incubator-shardingsphere_a0ffcf0": {
        "repo": "incubator-shardingsphere",
        "message": "Fix NullPointerException bug (#3176)",
        "commit": "https://github.com/apache/incubator-shardingsphere/commit/a0ffcf02c29e5259f0bdbf5a6f8a5e089c48a751",
        "parent": "https://github.com/apache/incubator-shardingsphere/commit/97e932c14f5fe3252d2f715b18cb3b5622264ebf",
        "bug_id": "incubator-shardingsphere_a0ffcf0",
        "file": [
            {
                "sha": "2da4a0d4dc645ccca23f19afdbdf44995c3d26b6",
                "filename": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/EncryptRule.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/a0ffcf02c29e5259f0bdbf5a6f8a5e089c48a751/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/EncryptRule.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/a0ffcf02c29e5259f0bdbf5a6f8a5e089c48a751/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/EncryptRule.java",
                "status": "modified",
                "changes": 12,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/EncryptRule.java?ref=a0ffcf02c29e5259f0bdbf5a6f8a5e089c48a751",
                "patch": "@@ -231,7 +231,11 @@ public boolean isCipherColumn(final String tableName, final String columnName) {\n             \n             @Override\n             public Object apply(final Object input) {\n-                return ((ShardingQueryAssistedEncryptor) shardingEncryptor.get()).queryAssistedEncrypt(input.toString());\n+                if (input == null) {\n+                    return null;\n+                } else {\n+                    return ((ShardingQueryAssistedEncryptor) shardingEncryptor.get()).queryAssistedEncrypt(input.toString());\n+                }\n             }\n         });\n     }\n@@ -251,7 +255,11 @@ public Object apply(final Object input) {\n             \n             @Override\n             public Object apply(final Object input) {\n-                return String.valueOf(shardingEncryptor.get().encrypt(input.toString()));\n+                if (input == null) {\n+                    return null;\n+                } else {\n+                    return String.valueOf(shardingEncryptor.get().encrypt(input.toString()));\n+                }\n             }\n         });\n     }",
                "deletions": 2
            },
            {
                "sha": "d9a7977706cf2944c662459fc72f116c64acfa0c",
                "filename": "sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/rule/EncryptRuleTest.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/a0ffcf02c29e5259f0bdbf5a6f8a5e089c48a751/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/rule/EncryptRuleTest.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/a0ffcf02c29e5259f0bdbf5a6f8a5e089c48a751/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/rule/EncryptRuleTest.java",
                "status": "added",
                "changes": 72,
                "additions": 72,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/rule/EncryptRuleTest.java?ref=a0ffcf02c29e5259f0bdbf5a6f8a5e089c48a751",
                "patch": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.rule;\n+\n+import org.apache.shardingsphere.api.config.encrypt.EncryptColumnRuleConfiguration;\n+import org.apache.shardingsphere.api.config.encrypt.EncryptRuleConfiguration;\n+import org.apache.shardingsphere.api.config.encrypt.EncryptTableRuleConfiguration;\n+import org.apache.shardingsphere.api.config.encrypt.EncryptorRuleConfiguration;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertNull;\n+\n+/**\n+ * @author kezhenxu94\n+ */\n+public class EncryptRuleTest {\n+    private final String table = \"table\";\n+    private final String column = \"column\";\n+\n+    private EncryptRuleConfiguration encryptRuleConfig;\n+\n+    @Before\n+    public void before() {\n+        Properties props = new Properties();\n+\n+        EncryptorRuleConfiguration encryptorConfig = new EncryptorRuleConfiguration(\"assistedTest\", props);\n+        EncryptColumnRuleConfiguration columnConfig = new EncryptColumnRuleConfiguration(\"plain_pwd\", \"cipher_pwd\", \"\", \"aes\");\n+        EncryptTableRuleConfiguration tableConfig = new EncryptTableRuleConfiguration(Collections.singletonMap(column, columnConfig));\n+\n+        encryptRuleConfig = new EncryptRuleConfiguration();\n+        encryptRuleConfig.getEncryptors().put(\"aes\", encryptorConfig);\n+        encryptRuleConfig.getTables().put(table, tableConfig);\n+    }\n+\n+    @Test\n+    public void testGetEncryptAssistedQueryValues() {\n+        List<Object> encryptAssistedQueryValues = new EncryptRule(encryptRuleConfig).getEncryptAssistedQueryValues(table, column, Collections.singletonList(null));\n+\n+        for (final Object value : encryptAssistedQueryValues) {\n+            assertNull(value);\n+        }\n+    }\n+\n+    @Test\n+    public void testGetEncryptValues() {\n+        List<Object> encryptAssistedQueryValues = new EncryptRule(encryptRuleConfig).getEncryptValues(table, column, Collections.singletonList(null));\n+\n+        for (final Object value : encryptAssistedQueryValues) {\n+            assertNull(value);\n+        }\n+    }\n+}\n\\ No newline at end of file",
                "deletions": 0
            }
        ],
        "patched_files": [
            "EncryptRule.java"
        ],
        "unit_tests": [
            "EncryptRuleTest.java"
        ]
    },
    "incubator-shardingsphere_d367e25": {
        "repo": "incubator-shardingsphere",
        "message": "Fixes #2527, NPE in CachedDatabaseMetaData when use masterSlaveDataSource",
        "commit": "https://github.com/apache/incubator-shardingsphere/commit/d367e25213a530a87c9242225dcf64310f70691d",
        "parent": "https://github.com/apache/incubator-shardingsphere/commit/6981f690ae2864fa4927fdb5fc74f795a981191e",
        "bug_id": "incubator-shardingsphere_d367e25",
        "file": [
            {
                "sha": "13c2a12d1e173a903fd24c795f8337e787f4e95f",
                "filename": "sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/ResultSetReturnedDatabaseMetaData.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/d367e25213a530a87c9242225dcf64310f70691d/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/ResultSetReturnedDatabaseMetaData.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/d367e25213a530a87c9242225dcf64310f70691d/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/ResultSetReturnedDatabaseMetaData.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/ResultSetReturnedDatabaseMetaData.java?ref=d367e25213a530a87c9242225dcf64310f70691d",
                "patch": "@@ -263,7 +263,10 @@ private String getCurrentDataSourceName() {\n     }\n     \n     private String getActualTableNamePattern(final String tableNamePattern) {\n-        return null == tableNamePattern ? tableNamePattern : (shardingRule.findTableRule(tableNamePattern).isPresent() ? \"%\" + tableNamePattern + \"%\" : tableNamePattern);\n+        if (null == tableNamePattern || null == shardingRule) {\n+            return tableNamePattern;\n+        }\n+        return shardingRule.findTableRule(tableNamePattern).isPresent() ? \"%\" + tableNamePattern + \"%\" : tableNamePattern;\n     }\n     \n     private String getActualTable(final String table) {",
                "deletions": 1
            },
            {
                "sha": "5aff76a5d4bbebcb55b7a12a036650218dd46e27",
                "filename": "sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/DatabaseMetaDataResultSet.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/d367e25213a530a87c9242225dcf64310f70691d/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/DatabaseMetaDataResultSet.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/d367e25213a530a87c9242225dcf64310f70691d/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/DatabaseMetaDataResultSet.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/DatabaseMetaDataResultSet.java?ref=d367e25213a530a87c9242225dcf64310f70691d",
                "patch": "@@ -30,6 +30,7 @@\n import java.sql.Timestamp;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n@@ -100,7 +101,7 @@ private DatabaseMetaDataObject generateDatabaseMetaDataObject(final int tableNam\n         for (int i = 1; i <= columnLabelIndexMap.size(); i++) {\n             if (tableNameColumnIndex == i) {\n                 String tableName = resultSet.getString(i);\n-                Collection<String> logicTableNames = shardingRule.getLogicTableNames(tableName);\n+                Collection<String> logicTableNames = null == shardingRule ? Collections.<String>emptyList() : shardingRule.getLogicTableNames(tableName);\n                 result.addObject(logicTableNames.isEmpty() ? tableName : logicTableNames.iterator().next());\n             } else if (indexNameColumnIndex == i) {\n                 String tableName = resultSet.getString(tableNameColumnIndex);",
                "deletions": 1
            },
            {
                "sha": "7b3c07fc90e30810e4ab554fd04d180a1a2c3aa1",
                "filename": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/CachedDatabaseMetaDataTest.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/d367e25213a530a87c9242225dcf64310f70691d/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/CachedDatabaseMetaDataTest.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/d367e25213a530a87c9242225dcf64310f70691d/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/CachedDatabaseMetaDataTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/CachedDatabaseMetaDataTest.java?ref=d367e25213a530a87c9242225dcf64310f70691d",
                "patch": "@@ -858,8 +858,8 @@ public void assertGetProcedureColumns() throws SQLException {\n     \n     @Test\n     public void assertGetTables() throws SQLException {\n-        when(databaseMetaData.getTables(\"test\", null, null, null)).thenReturn(resultSet);\n-        assertThat(cachedDatabaseMetaData.getTables(\"test\", null, null, null), instanceOf(DatabaseMetaDataResultSet.class));\n+        when(databaseMetaData.getTables(\"test\", null, \"%\" + TABLE_NAME + \"%\", null)).thenReturn(resultSet);\n+        assertThat(cachedDatabaseMetaData.getTables(\"test\", null, TABLE_NAME, null), instanceOf(DatabaseMetaDataResultSet.class));\n     }\n     \n     @Test",
                "deletions": 2
            }
        ],
        "patched_files": [
            "DatabaseMetaDataResultSet.java",
            "CachedDatabaseMetaData.java",
            "ResultSetReturnedDatabaseMetaData.java"
        ],
        "unit_tests": [
            "DatabaseMetaDataResultSetTest.java",
            "CachedDatabaseMetaDataTest.java"
        ]
    },
    "incubator-shardingsphere_2590964": {
        "repo": "incubator-shardingsphere",
        "message": "Fixes #3370 #3539 and #2949 .Fix and change some code structure (#3541)\n\n* Fix jdbc getIndexInfo method and NullPointerException on oracle\r\n\r\n* 1.Fix jdbc getIndexInfo method and NullPointerException.\r\n2.Fix catalog and schema method parameter error.\r\n3.Fix resultSet.getString(IS_NULLABLE) and\r\nresultSet.getString(IS_AUTOINCREMENT) return type error.\r\n\r\n* fix ci\r\n\r\n* fix ci\r\n\r\n* add License\r\n\r\n* fix ci\r\n\r\n* fix ci\r\n\r\n* fix ci\r\n\r\n* fix ci\r\n\r\n* use jdbc api to fix oracle difference\r\n\r\n* use jdbc api to fix oracle difference\r\n\r\n* Fixes #3370 .and change some code structure for compatibility\r\n\r\n* fix ci\r\n\r\n* add oracle schemaName equal username\r\nadd annotation\r\n\r\n* 1.add DataSourceInfo class\r\n\r\n2.add and change TEST unit\r\n\r\n* fix and change HashMap to LinkedHashMap\r\n\r\n* 1.change TEST unit code\r\n\r\n2.change LinkedHashMap to HashMap\r\n\r\n* add License\r\n\r\n* judge dataSourceMetaData null\r\n\r\n* judge dataSourceMetaData null\r\n\r\n* Change and add TEST unit\r\n\r\n* change TEST unit\r\n\r\n* code cleanups\r\n\r\n* code trim\r\n\r\n* code checkstyle\r\n\r\n* remove eg:\"public OracleDataSourceMetaData(final String url)\"\r\n\r\n* restore\r\n\r\n* Revert\r\n\r\n* revert\r\n\r\n* revert\r\n\r\n* revert\r\n\r\n* revert\r\n\r\n* revert\r\n\r\n* code clean\r\n\r\n* code clean\r\n\r\n* add TEST\r\n\r\n* add Licensed\r\n\r\n* code clear",
        "commit": "https://github.com/apache/incubator-shardingsphere/commit/2590964e351b864b3f53a0f45ff0a764c795f5bb",
        "parent": "https://github.com/apache/incubator-shardingsphere/commit/4bd1c3defb57f53770e9d37a679f1ffc96c35878",
        "bug_id": "incubator-shardingsphere_2590964",
        "file": [
            {
                "sha": "7ff8c654e22ea9eb58ccf99fb18961b328c9bf8d",
                "filename": "sharding-core/sharding-core-api/src/main/java/org/apache/shardingsphere/spi/database/DataSourceInfo.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-api/src/main/java/org/apache/shardingsphere/spi/database/DataSourceInfo.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-api/src/main/java/org/apache/shardingsphere/spi/database/DataSourceInfo.java",
                "status": "added",
                "changes": 37,
                "additions": 37,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-api/src/main/java/org/apache/shardingsphere/spi/database/DataSourceInfo.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -0,0 +1,37 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.shardingsphere.spi.database;\r\n+\r\n+import lombok.AllArgsConstructor;\r\n+import lombok.Getter;\r\n+\r\n+\r\n+/**\r\n+ * DataSource info.\r\n+ *\r\n+ * @author duanchao\r\n+ */\r\n+@Getter\r\n+@AllArgsConstructor\r\n+public class DataSourceInfo {\r\n+    \r\n+    private String url;\r\n+    \r\n+    private String username;\r\n+    \r\n+}\r",
                "deletions": 0
            },
            {
                "sha": "1b9a8e2ef696caa5356429baf3655fcf3e607fff",
                "filename": "sharding-core/sharding-core-api/src/main/java/org/apache/shardingsphere/spi/database/DataSourceMetaData.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-api/src/main/java/org/apache/shardingsphere/spi/database/DataSourceMetaData.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-api/src/main/java/org/apache/shardingsphere/spi/database/DataSourceMetaData.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-api/src/main/java/org/apache/shardingsphere/spi/database/DataSourceMetaData.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -45,4 +45,11 @@\n      * @return schema name\n      */\n     String getSchemaName();\n+    \n+    /**\n+     * Get catalog.\n+     * \n+     * @return catalog\n+     */\n+    String getCatalog();\n }",
                "deletions": 0
            },
            {
                "sha": "ddaf490f659950767097873ca217241c20a48ba8",
                "filename": "sharding-core/sharding-core-api/src/main/java/org/apache/shardingsphere/spi/database/DatabaseType.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-api/src/main/java/org/apache/shardingsphere/spi/database/DatabaseType.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-api/src/main/java/org/apache/shardingsphere/spi/database/DatabaseType.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-api/src/main/java/org/apache/shardingsphere/spi/database/DatabaseType.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -43,8 +43,8 @@\n     /**\n      * Get data source meta data.\n      * \n-     * @param url data source URL\n+     * @param sourceInfo current sourceInfo\n      * @return data source meta data\n      */\n-    DataSourceMetaData getDataSourceMetaData(String url);\n+    DataSourceMetaData getDataSourceMetaData(DataSourceInfo sourceInfo);\n }",
                "deletions": 2
            },
            {
                "sha": "dadc801bd6608cb4f7a0534589a0e491ea071f48",
                "filename": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/DataSourceMetas.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/DataSourceMetas.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/DataSourceMetas.java",
                "status": "modified",
                "changes": 19,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/DataSourceMetas.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,16 +17,17 @@\n \n package org.apache.shardingsphere.core.metadata.datasource;\n \n-import org.apache.shardingsphere.spi.database.DataSourceMetaData;\n-import org.apache.shardingsphere.spi.database.DatabaseType;\n-import org.apache.shardingsphere.spi.database.MemorizedDataSourceMetaData;\n-\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.LinkedList;\n import java.util.Map;\n import java.util.Map.Entry;\n \n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\n+import org.apache.shardingsphere.spi.database.DataSourceMetaData;\n+import org.apache.shardingsphere.spi.database.DatabaseType;\n+import org.apache.shardingsphere.spi.database.MemorizedDataSourceMetaData;\n+\n /**\n  * Data source metas.\n  *\n@@ -36,13 +37,13 @@\n     \n     private final Map<String, DataSourceMetaData> dataSourceMetaDataMap;\n     \n-    public DataSourceMetas(final Map<String, String> dataSourceURLs, final DatabaseType databaseType) {\n-        dataSourceMetaDataMap = getDataSourceMetaDataMap(dataSourceURLs, databaseType);\n+    public DataSourceMetas(final DatabaseType databaseType, final Map<String, DataSourceInfo> dataSourceMap) {\n+        dataSourceMetaDataMap = getDataSourceMetaDataMap(databaseType, dataSourceMap);\n     }\n     \n-    private Map<String, DataSourceMetaData> getDataSourceMetaDataMap(final Map<String, String> dataSourceURLs, final DatabaseType databaseType) {\n-        Map<String, DataSourceMetaData> result = new HashMap<>(dataSourceURLs.size(), 1);\n-        for (Entry<String, String> entry : dataSourceURLs.entrySet()) {\n+    private Map<String, DataSourceMetaData> getDataSourceMetaDataMap(final DatabaseType databaseType, final Map<String, DataSourceInfo> dataSourceInfoMap) {\n+        Map<String, DataSourceMetaData> result = new HashMap<>(dataSourceInfoMap.size(), 1);\n+        for (Entry<String, DataSourceInfo> entry : dataSourceInfoMap.entrySet()) {\n             result.put(entry.getKey(), databaseType.getDataSourceMetaData(entry.getValue()));\n         }\n         return result;",
                "deletions": 9
            },
            {
                "sha": "1e19f6f8f004ef0e7fe37509ed923e7ebb2979f5",
                "filename": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/H2DataSourceMetaData.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/H2DataSourceMetaData.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/H2DataSourceMetaData.java",
                "status": "modified",
                "changes": 9,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/H2DataSourceMetaData.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -19,6 +19,7 @@\n \n import lombok.Getter;\n import org.apache.shardingsphere.core.metadata.datasource.exception.UnrecognizedDatabaseURLException;\n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\n import org.apache.shardingsphere.spi.database.MemorizedDataSourceMetaData;\n \n import java.util.regex.Matcher;\n@@ -40,15 +41,19 @@\n     \n     private final String schemaName;\n     \n+    private final String catalog;\n+    \n     private final Pattern pattern = Pattern.compile(\"jdbc:h2:(mem|~)[:/]([\\\\w\\\\-]+);?\\\\S*\", Pattern.CASE_INSENSITIVE);\n     \n-    public H2DataSourceMetaData(final String url) {\n+    public H2DataSourceMetaData(final DataSourceInfo dataSourceInfo) {\n+        String url = dataSourceInfo.getUrl();\n         Matcher matcher = pattern.matcher(url);\n         if (!matcher.find()) {\n             throw new UnrecognizedDatabaseURLException(url, pattern.pattern());\n         }\n         hostName = \"\";\n         port = DEFAULT_PORT;\n-        schemaName = matcher.group(2);\n+        catalog = matcher.group(2);\n+        schemaName = null;\n     }\n }",
                "deletions": 2
            },
            {
                "sha": "a058a7779806ba2da96b0d6130a257d71e11ddc1",
                "filename": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/MariaDBDataSourceMetaData.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/MariaDBDataSourceMetaData.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/MariaDBDataSourceMetaData.java",
                "status": "modified",
                "changes": 19,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/MariaDBDataSourceMetaData.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,13 +17,16 @@\n \n package org.apache.shardingsphere.core.metadata.datasource.dialect;\n \n-import com.google.common.base.Strings;\n-import lombok.Getter;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n import org.apache.shardingsphere.core.metadata.datasource.exception.UnrecognizedDatabaseURLException;\n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\n import org.apache.shardingsphere.spi.database.DataSourceMetaData;\n \n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n+import com.google.common.base.Strings;\n+\n+import lombok.Getter;\n \n /**\n  * Data source meta data for MariaDB.\n@@ -41,15 +44,19 @@\n \n     private final String schemaName;\n \n+    private final String catalog;\n+\n     private final Pattern pattern = Pattern.compile(\"jdbc:(mysql|mariadb)(:replication|:failover|:sequential|:aurora)?:(\\\\w*:)?//([\\\\w\\\\-\\\\.]+):?([0-9]*)/([\\\\w\\\\-]+);?\\\\S*\", Pattern.CASE_INSENSITIVE);\n \n-    public MariaDBDataSourceMetaData(final String url) {\n+    public MariaDBDataSourceMetaData(final DataSourceInfo dataSourceInfo) {\n+        String url = dataSourceInfo.getUrl();\n         Matcher matcher = pattern.matcher(url);\n         if (!matcher.find()) {\n             throw new UnrecognizedDatabaseURLException(url, pattern.pattern());\n         }\n         hostName = matcher.group(4);\n         port = Strings.isNullOrEmpty(matcher.group(5)) ? DEFAULT_PORT : Integer.valueOf(matcher.group(5));\n-        schemaName = matcher.group(6);\n+        catalog = matcher.group(6);\n+        schemaName = null;\n     }\n }",
                "deletions": 6
            },
            {
                "sha": "bd86d71447e8ab4b9d5bedb6c04abfc3b7bf8907",
                "filename": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/MySQLDataSourceMetaData.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/MySQLDataSourceMetaData.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/MySQLDataSourceMetaData.java",
                "status": "modified",
                "changes": 19,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/MySQLDataSourceMetaData.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,13 +17,16 @@\n \n package org.apache.shardingsphere.core.metadata.datasource.dialect;\n \n-import com.google.common.base.Strings;\n-import lombok.Getter;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n import org.apache.shardingsphere.core.metadata.datasource.exception.UnrecognizedDatabaseURLException;\n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\n import org.apache.shardingsphere.spi.database.DataSourceMetaData;\n \n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n+import com.google.common.base.Strings;\n+\n+import lombok.Getter;\n \n /**\n  * Data source meta data for MySQL.\n@@ -41,15 +44,19 @@\n     \n     private final String schemaName;\n     \n+    private final String catalog;\n+    \n     private final Pattern pattern = Pattern.compile(\"jdbc:(mysql|mysqlx)(:loadbalance|:replication)?:(\\\\w*:)?//([\\\\w\\\\-\\\\.]+):?([0-9]*)/([\\\\w\\\\-]+);?\\\\S*\", Pattern.CASE_INSENSITIVE);\n     \n-    public MySQLDataSourceMetaData(final String url) {\n+    public MySQLDataSourceMetaData(final DataSourceInfo dataSourceInfo) {\n+        String url = dataSourceInfo.getUrl();\n         Matcher matcher = pattern.matcher(url);\n         if (!matcher.find()) {\n             throw new UnrecognizedDatabaseURLException(url, pattern.pattern());\n         }\n         hostName = matcher.group(4);\n         port = Strings.isNullOrEmpty(matcher.group(5)) ? DEFAULT_PORT : Integer.valueOf(matcher.group(5));\n-        schemaName = matcher.group(6);\n+        catalog = matcher.group(6);\n+        schemaName = null;\n     }\n }",
                "deletions": 6
            },
            {
                "sha": "3ae1dddebef92babcc4ff700a0535ed532e2d993",
                "filename": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/OracleDataSourceMetaData.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/OracleDataSourceMetaData.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/OracleDataSourceMetaData.java",
                "status": "modified",
                "changes": 20,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/OracleDataSourceMetaData.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,13 +17,16 @@\n \n package org.apache.shardingsphere.core.metadata.datasource.dialect;\n \n-import com.google.common.base.Strings;\n-import lombok.Getter;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n import org.apache.shardingsphere.core.metadata.datasource.exception.UnrecognizedDatabaseURLException;\n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\n import org.apache.shardingsphere.spi.database.DataSourceMetaData;\n \n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n+import com.google.common.base.Strings;\n+\n+import lombok.Getter;\n \n /**\n  * Data source meta data for Oracle.\n@@ -41,15 +44,20 @@\n     \n     private final String schemaName;\n     \n+    private final String catalog;\n+    \n     private final Pattern pattern = Pattern.compile(\"jdbc:oracle:(thin|oci|kprb):@(//)?([\\\\w\\\\-\\\\.]+):?([0-9]*)[:/]([\\\\w\\\\-]+)\", Pattern.CASE_INSENSITIVE);\n     \n-    public OracleDataSourceMetaData(final String url) {\n+    public OracleDataSourceMetaData(final DataSourceInfo dataSourceInfo) {\n+        String url = dataSourceInfo.getUrl();\n+\n         Matcher matcher = pattern.matcher(url);\n         if (!matcher.find()) {\n             throw new UnrecognizedDatabaseURLException(url, pattern.pattern());\n         }\n         hostName = matcher.group(3);\n         port = Strings.isNullOrEmpty(matcher.group(4)) ? DEFAULT_PORT : Integer.valueOf(matcher.group(4));\n-        schemaName = matcher.group(5);\n+        catalog = matcher.group(5);\n+        schemaName = dataSourceInfo.getUsername();\n     }\n }",
                "deletions": 6
            },
            {
                "sha": "b9893a0d3170b6064fc90a2b7e2cd35426dda445",
                "filename": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/PostgreSQLDataSourceMetaData.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/PostgreSQLDataSourceMetaData.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/PostgreSQLDataSourceMetaData.java",
                "status": "modified",
                "changes": 22,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/PostgreSQLDataSourceMetaData.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,13 +17,16 @@\n \n package org.apache.shardingsphere.core.metadata.datasource.dialect;\n \n-import com.google.common.base.Strings;\n-import lombok.Getter;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n import org.apache.shardingsphere.core.metadata.datasource.exception.UnrecognizedDatabaseURLException;\n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\n import org.apache.shardingsphere.spi.database.DataSourceMetaData;\n \n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n+import com.google.common.base.Strings;\n+\n+import lombok.Getter;\n \n /**\n  * Data source meta data for PostgreSQL.\n@@ -41,15 +44,20 @@\n     \n     private final String schemaName;\n     \n-    private final Pattern pattern = Pattern.compile(\"jdbc:postgresql://([\\\\w\\\\-\\\\.]+):?([0-9]*)/([\\\\w\\\\-]+)\", Pattern.CASE_INSENSITIVE);\n+    private final String catalog;\n     \n-    public PostgreSQLDataSourceMetaData(final String url) {\n+    private final Pattern pattern = Pattern.compile(\"jdbc:postgresql://([\\\\w\\\\-\\\\.]+):?([0-9]*)/([\\\\w\\\\-]+)\", Pattern.CASE_INSENSITIVE);\n+\n+    public PostgreSQLDataSourceMetaData(final DataSourceInfo dataSourceInfo) {\n+        String url = dataSourceInfo.getUrl();\n+\n         Matcher matcher = pattern.matcher(url);\n         if (!matcher.find()) {\n             throw new UnrecognizedDatabaseURLException(url, pattern.pattern());\n         }\n         hostName = matcher.group(1);\n         port = Strings.isNullOrEmpty(matcher.group(2)) ? DEFAULT_PORT : Integer.valueOf(matcher.group(2));\n-        schemaName = matcher.group(3);\n+        catalog = matcher.group(3);\n+        schemaName = null;\n     }\n }",
                "deletions": 7
            },
            {
                "sha": "732a93c32e794cbd1e5132732d8c2bf8af3b015d",
                "filename": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/SQL92DataSourceMetaData.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/SQL92DataSourceMetaData.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/SQL92DataSourceMetaData.java",
                "status": "modified",
                "changes": 19,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/SQL92DataSourceMetaData.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,12 +17,14 @@\n \n package org.apache.shardingsphere.core.metadata.datasource.dialect;\n \n-import lombok.Getter;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n import org.apache.shardingsphere.core.metadata.datasource.exception.UnrecognizedDatabaseURLException;\n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\n import org.apache.shardingsphere.spi.database.DataSourceMetaData;\n \n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n+import lombok.Getter;\n \n /**\n  * Data source meta data for SQL92.\n@@ -40,15 +42,20 @@\n     \n     private final String schemaName;\n     \n+    private final String catalog;\n+\n     private final Pattern pattern = Pattern.compile(\"jdbc:.*\", Pattern.CASE_INSENSITIVE);\n-    \n-    public SQL92DataSourceMetaData(final String url) {\n+\n+    public SQL92DataSourceMetaData(final DataSourceInfo dataSourceInfo) {\n+        String url = dataSourceInfo.getUrl();\n+\n         Matcher matcher = pattern.matcher(url);\n         if (!matcher.find()) {\n             throw new UnrecognizedDatabaseURLException(url, pattern.pattern());\n         }\n         hostName = \"\";\n         port = DEFAULT_PORT;\n-        schemaName = \"\";\n+        catalog = \"\";\n+        schemaName = null;\n     }\n }",
                "deletions": 6
            },
            {
                "sha": "1ae05e007a106772b87eb25a6a459c4f5c674947",
                "filename": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/SQLServerDataSourceMetaData.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/SQLServerDataSourceMetaData.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/SQLServerDataSourceMetaData.java",
                "status": "modified",
                "changes": 22,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/datasource/dialect/SQLServerDataSourceMetaData.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,13 +17,16 @@\n \n package org.apache.shardingsphere.core.metadata.datasource.dialect;\n \n-import com.google.common.base.Strings;\n-import lombok.Getter;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n import org.apache.shardingsphere.core.metadata.datasource.exception.UnrecognizedDatabaseURLException;\n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\n import org.apache.shardingsphere.spi.database.DataSourceMetaData;\n \n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n+import com.google.common.base.Strings;\n+\n+import lombok.Getter;\n \n /**\n  * Data source meta data for SQLServer.\n@@ -41,15 +44,20 @@\n     \n     private final String schemaName;\n     \n-    private final Pattern pattern = Pattern.compile(\"jdbc:(microsoft:)?sqlserver://([\\\\w\\\\-\\\\.]+):?([0-9]*);\\\\S*(DatabaseName|database)=([\\\\w\\\\-]+);?\", Pattern.CASE_INSENSITIVE);\n+    private final String catalog;\n     \n-    public SQLServerDataSourceMetaData(final String url) {\n+    private final Pattern pattern = Pattern.compile(\"jdbc:(microsoft:)?sqlserver://([\\\\w\\\\-\\\\.]+):?([0-9]*);\\\\S*(DatabaseName|database)=([\\\\w\\\\-]+);?\", Pattern.CASE_INSENSITIVE);\n+\n+    public SQLServerDataSourceMetaData(final DataSourceInfo dataSourceInfo) {\n+        String url = dataSourceInfo.getUrl();\n+\n         Matcher matcher = pattern.matcher(url);\n         if (!matcher.find()) {\n             throw new UnrecognizedDatabaseURLException(url, pattern.pattern());\n         }\n         hostName = matcher.group(2);\n         port = Strings.isNullOrEmpty(matcher.group(3)) ? DEFAULT_PORT : Integer.valueOf(matcher.group(3));\n-        schemaName = matcher.group(5);\n+        catalog = matcher.group(5);\n+        schemaName = null;\n     }\n }",
                "deletions": 7
            },
            {
                "sha": "7a77e0abdbaaee81eeba43978babc93dfce40bbe",
                "filename": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/H2DatabaseType.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/H2DatabaseType.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/H2DatabaseType.java",
                "status": "modified",
                "changes": 11,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/H2DatabaseType.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,12 +17,12 @@\n \n package org.apache.shardingsphere.spi.database;\n \n-import org.apache.shardingsphere.core.database.DatabaseTypes;\n-import org.apache.shardingsphere.core.metadata.datasource.dialect.H2DataSourceMetaData;\n-\n import java.util.Collection;\n import java.util.Collections;\n \n+import org.apache.shardingsphere.core.database.DatabaseTypes;\n+import org.apache.shardingsphere.core.metadata.datasource.dialect.H2DataSourceMetaData;\n+\n /**\n  * Database type of H2.\n  *\n@@ -41,12 +41,13 @@ public String getName() {\n     }\n     \n     @Override\n-    public DataSourceMetaData getDataSourceMetaData(final String url) {\n-        return new H2DataSourceMetaData(url);\n+    public DataSourceMetaData getDataSourceMetaData(final DataSourceInfo dataSourceInfo) {\n+        return new H2DataSourceMetaData(dataSourceInfo);\n     }\n     \n     @Override\n     public DatabaseType getTrunkDatabaseType() {\n         return DatabaseTypes.getActualDatabaseType(\"MySQL\");\n     }\n+\n }",
                "deletions": 5
            },
            {
                "sha": "57fc858720aec734912bf075c3c3ee115c7f4e0b",
                "filename": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/MariaDBDatabaseType.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/MariaDBDatabaseType.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/MariaDBDatabaseType.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/MariaDBDatabaseType.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,12 +17,12 @@\n \n package org.apache.shardingsphere.spi.database;\n \n-import org.apache.shardingsphere.core.database.DatabaseTypes;\n-import org.apache.shardingsphere.core.metadata.datasource.dialect.MariaDBDataSourceMetaData;\n-\n import java.util.Collection;\n import java.util.Collections;\n \n+import org.apache.shardingsphere.core.database.DatabaseTypes;\n+import org.apache.shardingsphere.core.metadata.datasource.dialect.MariaDBDataSourceMetaData;\n+\n /**\n  * Database type of Mariadb.\n  *\n@@ -41,8 +41,8 @@ public String getName() {\n     }\n     \n     @Override\n-    public DataSourceMetaData getDataSourceMetaData(final String url) {\n-        return new MariaDBDataSourceMetaData(url);\n+    public DataSourceMetaData getDataSourceMetaData(final DataSourceInfo dataSourceInfo) {\n+        return new MariaDBDataSourceMetaData(dataSourceInfo);\n     }\n     \n     @Override",
                "deletions": 5
            },
            {
                "sha": "ddee705c0df545c1d8609150bb11b81c920f9aeb",
                "filename": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/MySQLDatabaseType.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/MySQLDatabaseType.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/MySQLDatabaseType.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/MySQLDatabaseType.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,11 +17,11 @@\n \n package org.apache.shardingsphere.spi.database;\n \n-import org.apache.shardingsphere.core.metadata.datasource.dialect.MySQLDataSourceMetaData;\n-\n import java.util.Collection;\n import java.util.Collections;\n \n+import org.apache.shardingsphere.core.metadata.datasource.dialect.MySQLDataSourceMetaData;\n+\n /**\n  * Database type of MySQL.\n  *\n@@ -40,7 +40,7 @@ public String getName() {\n     }\n     \n     @Override\n-    public DataSourceMetaData getDataSourceMetaData(final String url) {\n-        return new MySQLDataSourceMetaData(url);\n+    public DataSourceMetaData getDataSourceMetaData(final DataSourceInfo dataSourceInfo) {\n+        return new MySQLDataSourceMetaData(dataSourceInfo);\n     }\n }",
                "deletions": 4
            },
            {
                "sha": "095623836ab96c0a4dc354f3069adcba21b708fb",
                "filename": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/OracleDatabaseType.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/OracleDatabaseType.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/OracleDatabaseType.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/OracleDatabaseType.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,11 +17,11 @@\n \n package org.apache.shardingsphere.spi.database;\n \n-import org.apache.shardingsphere.core.metadata.datasource.dialect.OracleDataSourceMetaData;\n-\n import java.util.Collection;\n import java.util.Collections;\n \n+import org.apache.shardingsphere.core.metadata.datasource.dialect.OracleDataSourceMetaData;\n+\n /**\n  * Database type of Oracle.\n  *\n@@ -40,7 +40,7 @@ public String getName() {\n     }\n     \n     @Override\n-    public DataSourceMetaData getDataSourceMetaData(final String url) {\n-        return new OracleDataSourceMetaData(url);\n+    public DataSourceMetaData getDataSourceMetaData(final DataSourceInfo dataSourceInfo) {\n+        return new OracleDataSourceMetaData(dataSourceInfo);\n     }\n }",
                "deletions": 4
            },
            {
                "sha": "9902ea515065e204ce6cd03542d3e027350a822d",
                "filename": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/PostgreSQLDatabaseType.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/PostgreSQLDatabaseType.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/PostgreSQLDatabaseType.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/PostgreSQLDatabaseType.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,11 +17,11 @@\n \n package org.apache.shardingsphere.spi.database;\n \n-import org.apache.shardingsphere.core.metadata.datasource.dialect.PostgreSQLDataSourceMetaData;\n-\n import java.util.Collection;\n import java.util.Collections;\n \n+import org.apache.shardingsphere.core.metadata.datasource.dialect.PostgreSQLDataSourceMetaData;\n+\n /**\n  * Database type of PostgreSQL.\n  *\n@@ -40,7 +40,7 @@ public String getName() {\n     }\n     \n     @Override\n-    public DataSourceMetaData getDataSourceMetaData(final String url) {\n-        return new PostgreSQLDataSourceMetaData(url);\n+    public DataSourceMetaData getDataSourceMetaData(final DataSourceInfo dataSourceInfo) {\n+        return new PostgreSQLDataSourceMetaData(dataSourceInfo);\n     }\n }",
                "deletions": 4
            },
            {
                "sha": "8adcf5b417126c4d5dc5f5c2027fdb37c4b00ab2",
                "filename": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/SQL92DatabaseType.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/SQL92DatabaseType.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/SQL92DatabaseType.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/SQL92DatabaseType.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,11 +17,11 @@\n \n package org.apache.shardingsphere.spi.database;\n \n-import org.apache.shardingsphere.core.metadata.datasource.dialect.SQL92DataSourceMetaData;\n-\n import java.util.Collection;\n import java.util.Collections;\n \n+import org.apache.shardingsphere.core.metadata.datasource.dialect.SQL92DataSourceMetaData;\n+\n /**\n  * Database type of SQL92.\n  *\n@@ -40,7 +40,7 @@ public String getName() {\n     }\n     \n     @Override\n-    public DataSourceMetaData getDataSourceMetaData(final String url) {\n-        return new SQL92DataSourceMetaData(url);\n+    public DataSourceMetaData getDataSourceMetaData(final DataSourceInfo dataSourceInfo) {\n+        return new SQL92DataSourceMetaData(dataSourceInfo);\n     }\n }",
                "deletions": 4
            },
            {
                "sha": "c3b482e99ae3c6dff72dff1fe77c8ff7b71b35c5",
                "filename": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/SQLServerDatabaseType.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/SQLServerDatabaseType.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/SQLServerDatabaseType.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/spi/database/SQLServerDatabaseType.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,11 +17,11 @@\n \n package org.apache.shardingsphere.spi.database;\n \n-import org.apache.shardingsphere.core.metadata.datasource.dialect.SQLServerDataSourceMetaData;\n-\n import java.util.Collection;\n import java.util.Collections;\n \n+import org.apache.shardingsphere.core.metadata.datasource.dialect.SQLServerDataSourceMetaData;\n+\n /**\n  * Database type of SQLServer.\n  *\n@@ -40,7 +40,7 @@ public String getName() {\n     }\n     \n     @Override\n-    public DataSourceMetaData getDataSourceMetaData(final String url) {\n-        return new SQLServerDataSourceMetaData(url);\n+    public DataSourceMetaData getDataSourceMetaData(final DataSourceInfo dataSourceInfo) {\n+        return new SQLServerDataSourceMetaData(dataSourceInfo);\n     }\n }",
                "deletions": 4
            },
            {
                "sha": "eb5a11899aecbec79897b4bfef8b79f253da3a62",
                "filename": "sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/ShardingSphereDataSourceMetaDataTest.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/ShardingSphereDataSourceMetaDataTest.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/ShardingSphereDataSourceMetaDataTest.java",
                "status": "modified",
                "changes": 39,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/ShardingSphereDataSourceMetaDataTest.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,35 +17,46 @@\n \n package org.apache.shardingsphere.core.metadata.datasource;\n \n-import com.google.common.collect.Lists;\n-import org.apache.shardingsphere.core.database.DatabaseTypes;\n-import org.junit.Before;\n-import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n \n-import java.util.LinkedHashMap;\n+import java.util.HashMap;\n import java.util.Map;\n \n-import static org.junit.Assert.assertEquals;\n+import org.apache.shardingsphere.core.database.DatabaseTypes;\n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\n+import org.junit.Before;\n+import org.junit.Test;\n \n public final class ShardingSphereDataSourceMetaDataTest {\n     \n     private DataSourceMetas dataSourceMetas;\n     \n     @Before\n     public void setUp() {\n-        Map<String, String> dataSourceURLs = new LinkedHashMap<>();\n-        dataSourceURLs.put(\"ds_0\", \"jdbc:mysql://127.0.0.1:3306/db_0\");\n-        dataSourceURLs.put(\"ds_1\", \"jdbc:mysql://127.0.0.1:3306/db_1\");\n-        dataSourceMetas = new DataSourceMetas(dataSourceURLs, DatabaseTypes.getActualDatabaseType(\"MySQL\"));\n+        final Map<String, DataSourceInfo> dataSourceInfoMap = new HashMap<String, DataSourceInfo>();\n+        DataSourceInfo info0 = new DataSourceInfo(\"jdbc:mysql://127.0.0.1:3306/db_0\", \"test\");\n+        \n+        DataSourceInfo info1 = new DataSourceInfo(\"jdbc:mysql://127.0.0.1:3306/db_1\", \"test\");\n+        \n+        dataSourceInfoMap.put(\"ds_0\", info0);\n+        dataSourceInfoMap.put(\"ds_1\", info1);\n+        dataSourceMetas = new DataSourceMetas(DatabaseTypes.getActualDatabaseType(\"MySQL\"), dataSourceInfoMap);\n     }\n-    \n+\n     @Test\n     public void assertGetAllInstanceDataSourceNamesForShardingRule() {\n-        assertEquals(dataSourceMetas.getAllInstanceDataSourceNames(), Lists.newArrayList(\"ds_1\"));\n+        assertNotNull(dataSourceMetas.getAllInstanceDataSourceNames());\n     }\n     \n     @Test\n-    public void assertGetActualSchemaNameForShardingRule() {\n-        assertEquals(dataSourceMetas.getDataSourceMetaData(\"ds_0\").getSchemaName(), \"db_0\");\n+    public void assertGetActualCatalogForShardingRule() {\n+        assertEquals(dataSourceMetas.getDataSourceMetaData(\"ds_0\").getCatalog(), \"db_0\");\n     }\n+    \n+    @Test\n+    public void assertGetActualSchemaNameForShardingRuleForMysql() {\n+        assertEquals(dataSourceMetas.getDataSourceMetaData(\"ds_0\").getSchemaName(), null);\n+    }\n+    \n }",
                "deletions": 14
            },
            {
                "sha": "3e7b34643e67bb239daeb6e919c19bb73545015d",
                "filename": "sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/H2DataSourceMetaDataTest.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/H2DataSourceMetaDataTest.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/H2DataSourceMetaDataTest.java",
                "status": "modified",
                "changes": 28,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/H2DataSourceMetaDataTest.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,32 +17,44 @@\n \n package org.apache.shardingsphere.core.metadata.datasource.dialect;\n \n-import org.apache.shardingsphere.core.metadata.datasource.exception.UnrecognizedDatabaseURLException;\n-import org.junit.Test;\n-\n import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThat;\n \n+import org.apache.shardingsphere.core.metadata.datasource.exception.UnrecognizedDatabaseURLException;\n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\n+import org.junit.Test;\n+\n public final class H2DataSourceMetaDataTest {\n     \n+    @Test\n+    public void assertDataSourceInfoParam() {\n+        H2DataSourceMetaData actual = new H2DataSourceMetaData(new DataSourceInfo(\"jdbc:h2:mem:ds_0;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MySQL\", \"test\"));\n+        assertThat(actual.getHostName(), is(\"\"));\n+        assertThat(actual.getPort(), is(-1));\n+        assertThat(actual.getCatalog(), is(\"ds_0\"));\n+        assertEquals(actual.getSchemaName(), null);\n+    }\n+    \n     @Test\n     public void assertGetPropertiesWithMem() {\n-        H2DataSourceMetaData actual = new H2DataSourceMetaData(\"jdbc:h2:mem:ds_0;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MySQL\");\n+        H2DataSourceMetaData actual = new H2DataSourceMetaData(new DataSourceInfo(\"jdbc:h2:mem:ds_0;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MySQL\", \"test\"));\n         assertThat(actual.getHostName(), is(\"\"));\n         assertThat(actual.getPort(), is(-1));\n-        assertThat(actual.getSchemaName(), is(\"ds_0\"));\n+        assertEquals(actual.getSchemaName(), null);\n     }\n     \n     @Test\n     public void assertGetPropertiesWithSymbol() {\n-        H2DataSourceMetaData actual = new H2DataSourceMetaData(\"jdbc:h2:~:ds-0;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MySQL\");\n+        H2DataSourceMetaData actual = new H2DataSourceMetaData(new DataSourceInfo(\"jdbc:h2:~:ds-0;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MySQL\", \"test\"));\n         assertThat(actual.getHostName(), is(\"\"));\n         assertThat(actual.getPort(), is(-1));\n-        assertThat(actual.getSchemaName(), is(\"ds-0\"));\n+        assertEquals(actual.getSchemaName(), null);\n     }\n     \n     @Test(expected = UnrecognizedDatabaseURLException.class)\n     public void assertGetPropertiesFailure() {\n-        new H2DataSourceMetaData(\"jdbc:h2:file:/data/sample\");\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:h2:file:/data/sample\", \"test\");\n+        new H2DataSourceMetaData(dataSourceInfo);\n     }\n }",
                "deletions": 8
            },
            {
                "sha": "64350f5059cc465fea4937141f1e3d5e5945c9ff",
                "filename": "sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/MySQLDataSourceMetaDataTest.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/MySQLDataSourceMetaDataTest.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/MySQLDataSourceMetaDataTest.java",
                "status": "modified",
                "changes": 32,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/MySQLDataSourceMetaDataTest.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,32 +17,48 @@\n \n package org.apache.shardingsphere.core.metadata.datasource.dialect;\n \n-import org.apache.shardingsphere.core.metadata.datasource.exception.UnrecognizedDatabaseURLException;\n-import org.junit.Test;\n-\n import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThat;\n \n+import org.apache.shardingsphere.core.metadata.datasource.exception.UnrecognizedDatabaseURLException;\n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\n+import org.junit.Test;\n+\n public final class MySQLDataSourceMetaDataTest {\n     \n+    @Test\n+    public void assertDataSourceInfoParam() {\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:mysql://127.0.0.1:9999/ds_0?serverTimezone=UTC&useSSL=false\", \"test\");\n+        MySQLDataSourceMetaData actual = new MySQLDataSourceMetaData(dataSourceInfo);\n+        assertThat(actual.getHostName(), is(\"127.0.0.1\"));\n+        assertThat(actual.getPort(), is(9999));\n+        assertThat(actual.getCatalog(), is(\"ds_0\"));\n+        assertEquals(actual.getSchemaName(), null);\n+    }\n+    \n     @Test\n     public void assertGetPropertiesWithPort() {\n-        MySQLDataSourceMetaData actual = new MySQLDataSourceMetaData(\"jdbc:mysql://127.0.0.1:9999/ds_0?serverTimezone=UTC&useSSL=false\");\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:mysql://127.0.0.1:9999/ds_0?serverTimezone=UTC&useSSL=false\", \"test\");\n+        MySQLDataSourceMetaData actual = new MySQLDataSourceMetaData(dataSourceInfo);\n         assertThat(actual.getHostName(), is(\"127.0.0.1\"));\n         assertThat(actual.getPort(), is(9999));\n-        assertThat(actual.getSchemaName(), is(\"ds_0\"));\n+        assertEquals(actual.getSchemaName(), null);\n+        assertEquals(actual.getCatalog(), \"ds_0\");\n     }\n     \n     @Test\n     public void assertGetPropertiesWithDefaultPort() {\n-        MySQLDataSourceMetaData actual = new MySQLDataSourceMetaData(\"jdbc:mysql:loadbalance://127.0.0.1/ds_0?serverTimezone=UTC&useSSL=false\");\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:mysql:loadbalance://127.0.0.1/ds_0?serverTimezone=UTC&useSSL=false\", \"test\");\n+        MySQLDataSourceMetaData actual = new MySQLDataSourceMetaData(dataSourceInfo);\n         assertThat(actual.getHostName(), is(\"127.0.0.1\"));\n         assertThat(actual.getPort(), is(3306));\n-        assertThat(actual.getSchemaName(), is(\"ds_0\"));\n+        assertEquals(actual.getSchemaName(), null);\n     }\n     \n     @Test(expected = UnrecognizedDatabaseURLException.class)\n     public void assertGetPropertiesFailure() {\n-        new MySQLDataSourceMetaData(\"jdbc:mysql:xxxxxxxx\");\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:mysql:xxxxxxxx\", \"test\");\n+        new MySQLDataSourceMetaData(dataSourceInfo);\n     }\n }",
                "deletions": 8
            },
            {
                "sha": "782aeb152a5944141cee3b24ae16e513fbd48af7",
                "filename": "sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/OracleDataSourceMetaDataTest.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/OracleDataSourceMetaDataTest.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/OracleDataSourceMetaDataTest.java",
                "status": "modified",
                "changes": 30,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/OracleDataSourceMetaDataTest.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,32 +17,46 @@\n \n package org.apache.shardingsphere.core.metadata.datasource.dialect;\n \n-import org.apache.shardingsphere.core.metadata.datasource.exception.UnrecognizedDatabaseURLException;\n-import org.junit.Test;\n-\n import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThat;\n \n+import org.apache.shardingsphere.core.metadata.datasource.exception.UnrecognizedDatabaseURLException;\n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\n+import org.junit.Test;\n+\n public final class OracleDataSourceMetaDataTest {\n     \n+    @Test\n+    public void assertDataSourceInfoParam() {\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:oracle:thin:@//127.0.0.1:9999/ds_0\", \"test\");\n+        OracleDataSourceMetaData actual = new OracleDataSourceMetaData(dataSourceInfo);\n+        assertThat(actual.getHostName(), is(\"127.0.0.1\"));\n+        assertThat(actual.getPort(), is(9999));\n+        assertThat(actual.getCatalog(), is(\"ds_0\"));\n+        assertEquals(actual.getSchemaName(), dataSourceInfo.getUsername());\n+    }\n+    \n     @Test\n     public void assertGetPropertiesWithPort() {\n-        OracleDataSourceMetaData actual = new OracleDataSourceMetaData(\"jdbc:oracle:thin:@//127.0.0.1:9999/ds_0\");\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:oracle:thin:@//127.0.0.1:9999/ds_0\", \"test\");\n+        OracleDataSourceMetaData actual = new OracleDataSourceMetaData(dataSourceInfo);\n         assertThat(actual.getHostName(), is(\"127.0.0.1\"));\n         assertThat(actual.getPort(), is(9999));\n-        assertThat(actual.getSchemaName(), is(\"ds_0\"));\n     }\n     \n     @Test\n     public void assertGetPropertiesWithDefaultPort() {\n-        OracleDataSourceMetaData actual = new OracleDataSourceMetaData(\"jdbc:oracle:oci:@127.0.0.1/ds_0\");\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:oracle:oci:@127.0.0.1/ds_0\", \"test\");\n+        OracleDataSourceMetaData actual = new OracleDataSourceMetaData(dataSourceInfo);\n         assertThat(actual.getHostName(), is(\"127.0.0.1\"));\n         assertThat(actual.getPort(), is(1521));\n-        assertThat(actual.getSchemaName(), is(\"ds_0\"));\n+        assertEquals(actual.getSchemaName(), \"test\");\n     }\n     \n     @Test(expected = UnrecognizedDatabaseURLException.class)\n     public void assertGetPropertiesFailure() {\n-        new OracleDataSourceMetaData(\"jdbc:oracle:xxxxxxxx\");\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:oracle:xxxxxxxx\", \"test\");\n+        new OracleDataSourceMetaData(dataSourceInfo);\n     }\n }",
                "deletions": 8
            },
            {
                "sha": "c645b530c5116a06cf59c0604a1d3ce950921660",
                "filename": "sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/PostgreSQLDataSourceMetaDataTest.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/PostgreSQLDataSourceMetaDataTest.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/PostgreSQLDataSourceMetaDataTest.java",
                "status": "modified",
                "changes": 32,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/PostgreSQLDataSourceMetaDataTest.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,32 +17,48 @@\n \n package org.apache.shardingsphere.core.metadata.datasource.dialect;\n \n-import org.apache.shardingsphere.core.metadata.datasource.exception.UnrecognizedDatabaseURLException;\n-import org.junit.Test;\n-\n import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThat;\n \n+import org.apache.shardingsphere.core.metadata.datasource.exception.UnrecognizedDatabaseURLException;\n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\n+import org.junit.Test;\n+\n public final class PostgreSQLDataSourceMetaDataTest {\n     \n+    @Test\n+    public void assertDataSourceInfoParam() {\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:postgresql://127.0.0.1:9999/ds_0\", \"test\");\n+        PostgreSQLDataSourceMetaData actual = new PostgreSQLDataSourceMetaData(dataSourceInfo);\n+        assertThat(actual.getHostName(), is(\"127.0.0.1\"));\n+        assertThat(actual.getPort(), is(9999));\n+        assertThat(actual.getCatalog(), is(\"ds_0\"));\n+        assertEquals(actual.getSchemaName(), null);\n+    }\n+    \n     @Test\n     public void assertGetPropertiesWithPort() {\n-        PostgreSQLDataSourceMetaData actual = new PostgreSQLDataSourceMetaData(\"jdbc:postgresql://127.0.0.1:9999/ds_0\");\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:postgresql://127.0.0.1:9999/ds_0\", \"test\");\n+        PostgreSQLDataSourceMetaData actual = new PostgreSQLDataSourceMetaData(dataSourceInfo);\n         assertThat(actual.getHostName(), is(\"127.0.0.1\"));\n         assertThat(actual.getPort(), is(9999));\n-        assertThat(actual.getSchemaName(), is(\"ds_0\"));\n+        assertEquals(actual.getSchemaName(), null);\n     }\n     \n     @Test\n     public void assertGetPropertiesWithDefaultPort() {\n-        PostgreSQLDataSourceMetaData actual = new PostgreSQLDataSourceMetaData(\"jdbc:postgresql://127.0.0.1/ds_0\");\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:postgresql://127.0.0.1/ds_0\", \"test\");\n+        PostgreSQLDataSourceMetaData actual = new PostgreSQLDataSourceMetaData(dataSourceInfo);\n         assertThat(actual.getHostName(), is(\"127.0.0.1\"));\n         assertThat(actual.getPort(), is(5432));\n-        assertThat(actual.getSchemaName(), is(\"ds_0\"));\n+        assertEquals(actual.getCatalog(), \"ds_0\");\n+        assertEquals(actual.getSchemaName(), null);\n     }\n     \n     @Test(expected = UnrecognizedDatabaseURLException.class)\n     public void assertGetPropertiesFailure() {\n-        new PostgreSQLDataSourceMetaData(\"jdbc:postgresql:xxxxxxxx\");\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:postgresql:xxxxxxxx\", \"test\");\n+        new PostgreSQLDataSourceMetaData(dataSourceInfo);\n     }\n }",
                "deletions": 8
            },
            {
                "sha": "f9450441572c8f9dd7237b131fdeaf1e844ea5a2",
                "filename": "sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/SQL92DataSourceMetaDataTest.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/SQL92DataSourceMetaDataTest.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/SQL92DataSourceMetaDataTest.java",
                "status": "modified",
                "changes": 29,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/SQL92DataSourceMetaDataTest.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,24 +17,39 @@\n \n package org.apache.shardingsphere.core.metadata.datasource.dialect;\n \n-import org.apache.shardingsphere.core.metadata.datasource.exception.UnrecognizedDatabaseURLException;\n-import org.junit.Test;\n-\n import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThat;\n \n+import org.apache.shardingsphere.core.metadata.datasource.exception.UnrecognizedDatabaseURLException;\n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\n+import org.junit.Test;\n+\n public final class SQL92DataSourceMetaDataTest {\n     \n+    @Test\n+    public void assertDataSourceInfoParam() {\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:sql92_db:ds_0\", \"test\");\n+        SQL92DataSourceMetaData actual = new SQL92DataSourceMetaData(dataSourceInfo);\n+        assertThat(actual.getHostName(), is(\"\"));\n+        assertThat(actual.getPort(), is(-1));\n+        assertThat(actual.getCatalog(), is(\"\"));\n+        assertEquals(actual.getSchemaName(), null);\n+    }\n+    \n     @Test\n     public void assertGetProperties() {\n-        SQL92DataSourceMetaData actual = new SQL92DataSourceMetaData(\"jdbc:sql92_db:ds_0\");\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:sql92_db:ds_0\", \"test\");\n+        SQL92DataSourceMetaData actual = new SQL92DataSourceMetaData(dataSourceInfo);\n         assertThat(actual.getHostName(), is(\"\"));\n         assertThat(actual.getPort(), is(-1));\n-        assertThat(actual.getSchemaName(), is(\"\"));\n+        assertThat(actual.getCatalog(), is(\"\"));\n+        assertEquals(actual.getSchemaName(), null);\n     }\n-\n+    \n     @Test(expected = UnrecognizedDatabaseURLException.class)\n     public void assertGetPropertiesFailure() {\n-        new SQL92DataSourceMetaData(\"xxx:xxxx:xxxxxxxx\");\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"xxx:xxxx:xxxxxxxx\", \"test\");\n+        new SQL92DataSourceMetaData(dataSourceInfo);\n     }\n }",
                "deletions": 7
            },
            {
                "sha": "68838619068b31c0557ab03bc218c972becfc09a",
                "filename": "sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/SQLServerDataSourceMetaDataTest.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/SQLServerDataSourceMetaDataTest.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/SQLServerDataSourceMetaDataTest.java",
                "status": "modified",
                "changes": 42,
                "additions": 30,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/metadata/datasource/dialect/SQLServerDataSourceMetaDataTest.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,48 +17,66 @@\n \n package org.apache.shardingsphere.core.metadata.datasource.dialect;\n \n-import org.apache.shardingsphere.core.metadata.datasource.exception.UnrecognizedDatabaseURLException;\n-import org.junit.Test;\n-\n import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThat;\n \n+import org.apache.shardingsphere.core.metadata.datasource.exception.UnrecognizedDatabaseURLException;\n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\n+import org.junit.Test;\n+\n public final class SQLServerDataSourceMetaDataTest {\n     \n+    @Test\n+    public void assertDataSourceInfoParam() {\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:microsoft:sqlserver://127.0.0.1:9999;DatabaseName=ds_0\", \"test\");\n+        SQLServerDataSourceMetaData actual = new SQLServerDataSourceMetaData(dataSourceInfo);\n+        assertThat(actual.getHostName(), is(\"127.0.0.1\"));\n+        assertThat(actual.getPort(), is(9999));\n+        assertThat(actual.getCatalog(), is(\"ds_0\"));\n+        assertEquals(actual.getSchemaName(), null);\n+    }\n+    \n     @Test\n     public void assertGetPropertiesWithPortAndMicrosoft() {\n-        SQLServerDataSourceMetaData actual = new SQLServerDataSourceMetaData(\"jdbc:microsoft:sqlserver://127.0.0.1:9999;DatabaseName=ds_0\");\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:microsoft:sqlserver://127.0.0.1:9999;DatabaseName=ds_0\", \"test\");\n+        SQLServerDataSourceMetaData actual = new SQLServerDataSourceMetaData(dataSourceInfo);\n         assertThat(actual.getHostName(), is(\"127.0.0.1\"));\n         assertThat(actual.getPort(), is(9999));\n-        assertThat(actual.getSchemaName(), is(\"ds_0\"));\n+        assertEquals(actual.getCatalog(), \"ds_0\");\n+        assertEquals(actual.getSchemaName(), null);\n     }\n     \n     @Test\n     public void assertGetPropertiesWithPortAndWithoutMicrosoft() {\n-        SQLServerDataSourceMetaData actual = new SQLServerDataSourceMetaData(\"jdbc:sqlserver://127.0.0.1:9999;DatabaseName=ds_0\");\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:sqlserver://127.0.0.1:9999;DatabaseName=ds_0\", \"test\");\n+        SQLServerDataSourceMetaData actual = new SQLServerDataSourceMetaData(dataSourceInfo);\n         assertThat(actual.getHostName(), is(\"127.0.0.1\"));\n         assertThat(actual.getPort(), is(9999));\n-        assertThat(actual.getSchemaName(), is(\"ds_0\"));\n+        assertEquals(actual.getSchemaName(), null);\n     }\n     \n     @Test\n     public void assertGetPropertiesWithDefaultPortAndMicrosoft() {\n-        SQLServerDataSourceMetaData actual = new SQLServerDataSourceMetaData(\"jdbc:microsoft:sqlserver://127.0.0.1;DatabaseName=ds_0\");\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:microsoft:sqlserver://127.0.0.1;DatabaseName=ds_0\", \"test\");\n+        SQLServerDataSourceMetaData actual = new SQLServerDataSourceMetaData(dataSourceInfo);\n         assertThat(actual.getHostName(), is(\"127.0.0.1\"));\n         assertThat(actual.getPort(), is(1433));\n-        assertThat(actual.getSchemaName(), is(\"ds_0\"));\n+        assertEquals(actual.getSchemaName(), null);\n     }\n     \n     @Test\n     public void assertGetPropertiesWithDefaultPortWithoutMicrosoft() {\n-        SQLServerDataSourceMetaData actual = new SQLServerDataSourceMetaData(\"jdbc:sqlserver://127.0.0.1;DatabaseName=ds_0\");\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:sqlserver://127.0.0.1;DatabaseName=ds_0\", \"test\");\n+        SQLServerDataSourceMetaData actual = new SQLServerDataSourceMetaData(dataSourceInfo);\n         assertThat(actual.getHostName(), is(\"127.0.0.1\"));\n         assertThat(actual.getPort(), is(1433));\n-        assertThat(actual.getSchemaName(), is(\"ds_0\"));\n+        assertEquals(actual.getSchemaName(), null);\n     }\n     \n     @Test(expected = UnrecognizedDatabaseURLException.class)\n     public void assertGetPropertiesFailure() {\n-        new SQLServerDataSourceMetaData(\"jdbc:sqlserver:xxxxxxxx\");\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:sqlserver:xxxxxxxx\", \"test\");\n+        new SQLServerDataSourceMetaData(dataSourceInfo);\n     }\n }",
                "deletions": 12
            },
            {
                "sha": "dc34895fb368b74a6d47d7b35fb6d12b9d32cfe7",
                "filename": "sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/H2DatabaseTypeTest.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/H2DatabaseTypeTest.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/H2DatabaseTypeTest.java",
                "status": "added",
                "changes": 46,
                "additions": 46,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/H2DatabaseTypeTest.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.spi.database;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+\n+import org.apache.shardingsphere.core.metadata.datasource.dialect.H2DataSourceMetaData;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class H2DatabaseTypeTest {\n+    \n+    private DataSourceInfo dataSourceInfo;\n+    \n+    @Before\n+    public void setUp() {\n+        dataSourceInfo = new DataSourceInfo(\"jdbc:h2:mem:ds_0;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MySQL\", \"test\");\n+    }\n+    \n+    @Test\n+    public void assertDataSourceInfoParam() {\n+        H2DatabaseType databaseType = new H2DatabaseType();\n+        H2DataSourceMetaData actual = (H2DataSourceMetaData) databaseType.getDataSourceMetaData(dataSourceInfo);\n+        assertThat(actual.getHostName(), is(\"\"));\n+        assertThat(actual.getPort(), is(-1));\n+        assertThat(actual.getCatalog(), is(\"ds_0\"));\n+        assertEquals(actual.getSchemaName(), null);\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "e80deaf984b4ffeb409a90989dc67cbbec774b2c",
                "filename": "sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/MySQLDatabaseTypeTest.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/MySQLDatabaseTypeTest.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/MySQLDatabaseTypeTest.java",
                "status": "added",
                "changes": 39,
                "additions": 39,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/MySQLDatabaseTypeTest.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.spi.database;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+\n+import org.apache.shardingsphere.core.metadata.datasource.dialect.MySQLDataSourceMetaData;\n+import org.junit.Test;\n+\n+public final class MySQLDatabaseTypeTest {\n+    \n+    @Test\n+    public void assertMySQLDatabaseType() {\n+        MySQLDatabaseType databaseType = new MySQLDatabaseType();\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:mysql://127.0.0.1:9999/ds_0?serverTimezone=UTC&useSSL=false\", null);\n+        MySQLDataSourceMetaData actual = (MySQLDataSourceMetaData) databaseType.getDataSourceMetaData(dataSourceInfo);\n+        assertThat(actual.getHostName(), is(\"127.0.0.1\"));\n+        assertThat(actual.getPort(), is(9999));\n+        assertThat(actual.getCatalog(), is(\"ds_0\"));\n+        assertEquals(actual.getSchemaName(), null);\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "36fef7c810681c86cffa1746d1c775315ebd1d88",
                "filename": "sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/OracleDatabaseTypeTest.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/OracleDatabaseTypeTest.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/OracleDatabaseTypeTest.java",
                "status": "added",
                "changes": 40,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/OracleDatabaseTypeTest.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.spi.database;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+\n+import org.apache.shardingsphere.core.metadata.datasource.dialect.OracleDataSourceMetaData;\n+import org.junit.Test;\n+\n+public final class OracleDatabaseTypeTest {\n+    \n+    @Test\n+    public void assertDataSourceInfoParam() {\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:oracle:thin:@//127.0.0.1:9999/ds_0\", \"test\");\n+        \n+        OracleDatabaseType databaseType = new OracleDatabaseType();\n+        OracleDataSourceMetaData actual = (OracleDataSourceMetaData) databaseType.getDataSourceMetaData(dataSourceInfo);\n+        assertThat(actual.getHostName(), is(\"127.0.0.1\"));\n+        assertThat(actual.getPort(), is(9999));\n+        assertThat(actual.getCatalog(), is(\"ds_0\"));\n+        assertEquals(actual.getSchemaName(), dataSourceInfo.getUsername());\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "acfcaffe0b56e9d375ef93c5d4a3e08d198eb808",
                "filename": "sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/PostgreSQLDatabaseTypeTest.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/PostgreSQLDatabaseTypeTest.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/PostgreSQLDatabaseTypeTest.java",
                "status": "added",
                "changes": 40,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/PostgreSQLDatabaseTypeTest.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.spi.database;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+\n+import org.apache.shardingsphere.core.metadata.datasource.dialect.PostgreSQLDataSourceMetaData;\n+import org.junit.Test;\n+\n+public final class PostgreSQLDatabaseTypeTest {\n+    \n+    @Test\n+    public void assertDataSourceInfoParam() {\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:postgresql://127.0.0.1:9999/ds_0\", null);\n+        PostgreSQLDatabaseType databaseType = new PostgreSQLDatabaseType();\n+        \n+        PostgreSQLDataSourceMetaData actual = (PostgreSQLDataSourceMetaData) databaseType.getDataSourceMetaData(dataSourceInfo);\n+        assertThat(actual.getHostName(), is(\"127.0.0.1\"));\n+        assertThat(actual.getPort(), is(9999));\n+        assertThat(actual.getCatalog(), is(\"ds_0\"));\n+        assertEquals(actual.getSchemaName(), null);\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "4de53823ff48472509e5b8d49ab945589419bf65",
                "filename": "sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/SQL92DatabaseTypeTest.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/SQL92DatabaseTypeTest.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/SQL92DatabaseTypeTest.java",
                "status": "added",
                "changes": 39,
                "additions": 39,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/SQL92DatabaseTypeTest.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.spi.database;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+\n+import org.apache.shardingsphere.core.metadata.datasource.dialect.SQL92DataSourceMetaData;\n+import org.junit.Test;\n+\n+public final class SQL92DatabaseTypeTest {\n+    \n+    @Test\n+    public void assertDataSourceInfoParam() {\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:sql92_db:ds_0\", null);\n+        SQL92DatabaseType databaseType = new SQL92DatabaseType();\n+        SQL92DataSourceMetaData actual = (SQL92DataSourceMetaData) databaseType.getDataSourceMetaData(dataSourceInfo);\n+        assertThat(actual.getHostName(), is(\"\"));\n+        assertThat(actual.getPort(), is(-1));\n+        assertThat(actual.getCatalog(), is(\"\"));\n+        assertEquals(actual.getSchemaName(), null);\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "73614b9a6527d3183ee72105c887ac775a5c7a26",
                "filename": "sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/SQLServerDatabaseTypeTest.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/SQLServerDatabaseTypeTest.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/SQLServerDatabaseTypeTest.java",
                "status": "added",
                "changes": 77,
                "additions": 77,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/spi/database/SQLServerDatabaseTypeTest.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.spi.database;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+\n+import org.apache.shardingsphere.core.metadata.datasource.dialect.SQLServerDataSourceMetaData;\n+import org.junit.Test;\n+\n+public final class SQLServerDatabaseTypeTest {\n+    \n+    @Test\n+    public void assertDataSourceInfoParam() {\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:microsoft:sqlserver://127.0.0.1:9999;DatabaseName=ds_0\", null);\n+        SQLServerDatabaseType databaseType = new SQLServerDatabaseType();\n+        SQLServerDataSourceMetaData actual = (SQLServerDataSourceMetaData) databaseType.getDataSourceMetaData(dataSourceInfo);\n+        assertThat(actual.getHostName(), is(\"127.0.0.1\"));\n+        assertThat(actual.getPort(), is(9999));\n+        assertThat(actual.getCatalog(), is(\"ds_0\"));\n+        assertEquals(actual.getSchemaName(), null);\n+    }\n+    \n+    @Test\n+    public void assertGetPropertiesWithPortAndMicrosoft() {\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:microsoft:sqlserver://127.0.0.1:9999;DatabaseName=ds_0\", null);\n+        SQLServerDataSourceMetaData actual = new SQLServerDataSourceMetaData(dataSourceInfo);\n+        assertThat(actual.getHostName(), is(\"127.0.0.1\"));\n+        assertThat(actual.getPort(), is(9999));\n+        assertEquals(actual.getCatalog(), \"ds_0\");\n+        assertEquals(actual.getSchemaName(), null);\n+    }\n+    \n+    @Test\n+    public void assertGetPropertiesWithPortAndWithoutMicrosoft() {\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:sqlserver://127.0.0.1:9999;DatabaseName=ds_0\", null);\n+        SQLServerDataSourceMetaData actual = new SQLServerDataSourceMetaData(dataSourceInfo);\n+        assertThat(actual.getHostName(), is(\"127.0.0.1\"));\n+        assertThat(actual.getPort(), is(9999));\n+        assertEquals(actual.getSchemaName(), null);\n+    }\n+    \n+    @Test\n+    public void assertGetPropertiesWithDefaultPortAndMicrosoft() {\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:microsoft:sqlserver://127.0.0.1;DatabaseName=ds_0\", null);\n+        SQLServerDataSourceMetaData actual = new SQLServerDataSourceMetaData(dataSourceInfo);\n+        assertThat(actual.getHostName(), is(\"127.0.0.1\"));\n+        assertThat(actual.getPort(), is(1433));\n+        assertEquals(actual.getSchemaName(), null);\n+    }\n+    \n+    @Test\n+    public void assertGetPropertiesWithDefaultPortWithoutMicrosoft() {\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(\"jdbc:sqlserver://127.0.0.1;DatabaseName=ds_0\", null);\n+        SQLServerDataSourceMetaData actual = new SQLServerDataSourceMetaData(dataSourceInfo);\n+        assertThat(actual.getHostName(), is(\"127.0.0.1\"));\n+        assertThat(actual.getPort(), is(1433));\n+        assertEquals(actual.getSchemaName(), null);\n+    }\n+    \n+}",
                "deletions": 0
            },
            {
                "sha": "43dd8f95214c09a11d2e107086c2077c40397b63",
                "filename": "sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/core/execute/metadata/TableMetaDataLoader.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/core/execute/metadata/TableMetaDataLoader.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/core/execute/metadata/TableMetaDataLoader.java",
                "status": "modified",
                "changes": 102,
                "additions": 57,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/core/execute/metadata/TableMetaDataLoader.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,9 +17,17 @@\n \n package org.apache.shardingsphere.core.execute.metadata;\n \n-import com.google.common.base.Optional;\n-import com.google.common.collect.Lists;\n-import lombok.RequiredArgsConstructor;\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n import org.apache.shardingsphere.core.exception.ShardingException;\n import org.apache.shardingsphere.core.execute.ShardingExecuteEngine;\n import org.apache.shardingsphere.core.execute.ShardingExecuteGroup;\n@@ -35,16 +43,10 @@\n import org.apache.shardingsphere.core.rule.TableRule;\n import org.apache.shardingsphere.spi.database.DataSourceMetaData;\n \n-import java.sql.Connection;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Map.Entry;\n+import com.google.common.base.Optional;\n+import com.google.common.collect.Lists;\n+\n+import lombok.RequiredArgsConstructor;\n \n /**\n  * Table meta data loader.\n@@ -60,9 +62,9 @@\n     private static final String TYPE_NAME = \"TYPE_NAME\";\n     \n     private static final String INDEX_NAME = \"INDEX_NAME\";\n-\n+    \n     private static final String IS_NULLABLE = \"IS_NULLABLE\";\n-\n+    \n     private static final String IS_AUTOINCREMENT = \"IS_AUTOINCREMENT\";\n     \n     private final DataSourceMetas dataSourceMetas;\n@@ -88,75 +90,81 @@ public TableMetaData load(final String logicTableName, final ShardingRule shardi\n         checkUniformed(logicTableName, actualTableMetaDataList);\n         return actualTableMetaDataList.iterator().next();\n     }\n-    \n+\n     private List<TableMetaData> load(final Map<String, List<DataNode>> dataNodeGroups, final ShardingRule shardingRule, final String logicTableName) throws SQLException {\n         final String generateKeyColumnName = shardingRule.findGenerateKeyColumnName(logicTableName).orNull();\n+        \n         return executeEngine.groupExecute(getDataNodeExecuteGroups(dataNodeGroups), new ShardingGroupExecuteCallback<DataNode, TableMetaData>() {\n-            \n+\n             @Override\n             public Collection<TableMetaData> execute(final Collection<DataNode> dataNodes, final boolean isTrunkThread, final Map<String, Object> shardingExecuteDataMap) throws SQLException {\n+                \n                 String dataSourceName = dataNodes.iterator().next().getDataSourceName();\n                 DataSourceMetaData dataSourceMetaData = TableMetaDataLoader.this.dataSourceMetas.getDataSourceMetaData(dataSourceName);\n-                String catalog = null == dataSourceMetaData ? null : dataSourceMetaData.getSchemaName();\n+                \n                 return load(shardingRule.getShardingDataSourceNames().getRawMasterDataSourceName(dataSourceName), \n-                        catalog, logicTableName, dataNodes, generateKeyColumnName, shardingRule.getEncryptRule());\n+                        dataSourceMetaData, logicTableName, dataNodes, generateKeyColumnName, shardingRule.getEncryptRule());\n             }\n         });\n     }\n-    \n-    private Collection<TableMetaData> load(final String dataSourceName, final String catalog, \n-                                           final String logicTableName, final Collection<DataNode> dataNodes, final String generateKeyColumnName, final EncryptRule encryptRule) throws SQLException {\n+\n+    private Collection<TableMetaData> load(final String dataSourceName, final DataSourceMetaData dataSourceMetaData,\n+            final String logicTableName, final Collection<DataNode> dataNodes, final String generateKeyColumnName, final EncryptRule encryptRule) throws SQLException {\n         Collection<TableMetaData> result = new LinkedList<>();\n         try (Connection connection = connectionManager.getConnection(dataSourceName)) {\n             for (DataNode each : dataNodes) {\n-                result.add(createTableMetaData(connection, catalog, logicTableName, each.getTableName(), generateKeyColumnName, encryptRule));\n+                result.add(createTableMetaData(connection, dataSourceMetaData, logicTableName, each.getTableName(), generateKeyColumnName, encryptRule));\n             }\n         }\n         return result;\n     }\n-    \n+\n     private Map<String, List<DataNode>> getDataNodeGroups(final TableRule tableRule) {\n         return isCheckingMetaData ? tableRule.getDataNodeGroups() : getFirstDataNodeWithGroups(tableRule);\n     }\n-    \n+\n     private Map<String, List<DataNode>> getFirstDataNodeWithGroups(final TableRule tableRule) {\n         DataNode firstDataNode = tableRule.getActualDataNodes().iterator().next();\n         return Collections.singletonMap(firstDataNode.getDataSourceName(), Collections.singletonList(firstDataNode));\n     }\n-    \n+\n     private Collection<ShardingExecuteGroup<DataNode>> getDataNodeExecuteGroups(final Map<String, List<DataNode>> dataNodeGroups) {\n         Collection<ShardingExecuteGroup<DataNode>> result = new LinkedList<>();\n         for (Entry<String, List<DataNode>> entry : dataNodeGroups.entrySet()) {\n             result.addAll(getDataNodeExecuteGroups(entry.getValue()));\n         }\n         return result;\n     }\n-    \n+\n     private Collection<ShardingExecuteGroup<DataNode>> getDataNodeExecuteGroups(final List<DataNode> dataNodes) {\n         Collection<ShardingExecuteGroup<DataNode>> result = new LinkedList<>();\n         for (List<DataNode> each : Lists.partition(dataNodes, Math.max(dataNodes.size() / maxConnectionsSizePerQuery, 1))) {\n             result.add(new ShardingExecuteGroup<>(each));\n         }\n         return result;\n     }\n-    \n-    private TableMetaData createTableMetaData(final Connection connection, final String catalog, \n-                                              final String logicTableName, final String actualTableName, final String generateKeyColumnName, final EncryptRule encryptRule) throws SQLException {\n+\n+    private TableMetaData createTableMetaData(final Connection connection, final DataSourceMetaData dataSourceMetaData,\n+            final String logicTableName, final String actualTableName, final String generateKeyColumnName, final EncryptRule encryptRule) throws SQLException {\n+        String catalog = dataSourceMetaData == null ? null : dataSourceMetaData.getCatalog();\n+        String schema = dataSourceMetaData == null ? null : dataSourceMetaData.getSchemaName();\n+        \n         if (isTableExist(connection, catalog, actualTableName)) {\n             return new TableMetaData(\n-                    getColumnMetaDataList(connection, catalog, logicTableName, actualTableName, generateKeyColumnName, encryptRule), getLogicIndexes(connection, catalog, actualTableName));\n+                    getColumnMetaDataList(connection, catalog, logicTableName, actualTableName, generateKeyColumnName, encryptRule), \n+                    getLogicIndexes(connection, catalog, schema, actualTableName));\n         }\n         return new TableMetaData(Collections.<ColumnMetaData>emptyList(), Collections.<String>emptySet());\n     }\n-    \n+\n     private boolean isTableExist(final Connection connection, final String catalog, final String actualTableName) throws SQLException {\n         try (ResultSet resultSet = connection.getMetaData().getTables(catalog, null, actualTableName, null)) {\n             return resultSet.next();\n         }\n     }\n-    \n+\n     private Collection<ColumnMetaData> getColumnMetaDataList(final Connection connection, final String catalog, final String logicTableName, final String actualTableName, \n-                                                       final String generateKeyColumnName, final EncryptRule encryptRule) throws SQLException {\n+            final String generateKeyColumnName, final EncryptRule encryptRule) throws SQLException {\n         Collection<ColumnMetaData> result = new LinkedList<>();\n         Collection<String> primaryKeys = getPrimaryKeys(connection, catalog, actualTableName);\n         Collection<String> derivedColumns = encryptRule.getAssistedQueryAndPlainColumns(logicTableName);\n@@ -165,8 +173,9 @@ private boolean isTableExist(final Connection connection, final String catalog,\n                 String columnName = resultSet.getString(COLUMN_NAME);\n                 String columnType = resultSet.getString(TYPE_NAME);\n                 boolean isPrimaryKey = primaryKeys.contains(columnName);\n-                boolean isNotNull = isPrimaryKey || !resultSet.getBoolean(IS_NULLABLE);\n-                boolean isAutoIncrement = resultSet.getBoolean(IS_AUTOINCREMENT);\n+                boolean isNotNull = isPrimaryKey || !resultSet.getString(IS_NULLABLE).equalsIgnoreCase(\"YES\");\n+                String autoIncrement = resultSet.getString(IS_AUTOINCREMENT);\n+                boolean isAutoIncrement = \"YES\".equalsIgnoreCase(autoIncrement);\n                 Optional<ColumnMetaData> columnMetaData = getColumnMetaData(logicTableName, columnName, columnType, isPrimaryKey,\n                         isNotNull, isAutoIncrement, generateKeyColumnName, encryptRule, derivedColumns);\n                 if (columnMetaData.isPresent()) {\n@@ -176,7 +185,7 @@ private boolean isTableExist(final Connection connection, final String catalog,\n         }\n         return result;\n     }\n-    \n+\n     private Collection<String> getPrimaryKeys(final Connection connection, final String catalog, final String actualTableName) throws SQLException {\n         Collection<String> result = new HashSet<>();\n         try (ResultSet resultSet = connection.getMetaData().getPrimaryKeys(catalog, null, actualTableName)) {\n@@ -186,10 +195,10 @@ private boolean isTableExist(final Connection connection, final String catalog,\n         }\n         return result;\n     }\n-    \n+\n     private Optional<ColumnMetaData> getColumnMetaData(final String logicTableName, final String columnName, final String columnType, final boolean isPrimaryKey,\n-                                                       final boolean isNotNull, final boolean isAutoIncrement, final String generateKeyColumnName, \n-                                                       final EncryptRule encryptRule, final Collection<String> derivedColumns) {\n+            final boolean isNotNull, final boolean isAutoIncrement, final String generateKeyColumnName, \n+            final EncryptRule encryptRule, final Collection<String> derivedColumns) {\n         if (derivedColumns.contains(columnName)) {\n             return Optional.absent();\n         }\n@@ -204,10 +213,10 @@ private boolean isTableExist(final Connection connection, final String catalog,\n         }\n         return Optional.of(new ColumnMetaData(columnName, columnType, isPrimaryKey, isNotNull, isAutoIncrement));\n     }\n-    \n-    private Collection<String> getLogicIndexes(final Connection connection, final String catalog, final String actualTableName) throws SQLException {\n+\n+    private Collection<String> getLogicIndexes(final Connection connection, final String catalog, final String schema, final String actualTableName) throws SQLException {\n         Collection<String> result = new HashSet<>();\n-        try (ResultSet resultSet = connection.getMetaData().getIndexInfo(catalog, catalog, actualTableName, false, false)) {\n+        try (ResultSet resultSet = connection.getMetaData().getIndexInfo(catalog, schema, actualTableName, false, false)) {\n             while (resultSet.next()) {\n                 Optional<String> logicIndex = getLogicIndex(resultSet.getString(INDEX_NAME), actualTableName);\n                 if (logicIndex.isPresent()) {\n@@ -217,12 +226,15 @@ private boolean isTableExist(final Connection connection, final String catalog,\n         }\n         return result;\n     }\n-    \n+\n     private Optional<String> getLogicIndex(final String actualIndexName, final String actualTableName) {\n+        if (null == actualIndexName) {\n+            return Optional.absent();\n+        }\n         String indexNameSuffix = \"_\" + actualTableName;\n         return actualIndexName.contains(indexNameSuffix) ? Optional.of(actualIndexName.replace(indexNameSuffix, \"\")) : Optional.<String>absent();\n     }\n-    \n+\n     private void checkUniformed(final String logicTableName, final List<TableMetaData> actualTableMetaDataList) {\n         if (!isCheckingMetaData) {\n             return;",
                "deletions": 45
            },
            {
                "sha": "334b05c2deff29f4238f6ab1fefdd53d75bd56bd",
                "filename": "sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/core/execute/sql/execute/SQLExecuteCallback.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/core/execute/sql/execute/SQLExecuteCallback.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/core/execute/sql/execute/SQLExecuteCallback.java",
                "status": "modified",
                "changes": 21,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/core/execute/sql/execute/SQLExecuteCallback.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,22 +17,26 @@\n \n package org.apache.shardingsphere.core.execute.sql.execute;\n \n-import lombok.RequiredArgsConstructor;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.Map;\n+\n import org.apache.shardingsphere.core.constant.ConnectionMode;\n import org.apache.shardingsphere.core.execute.ShardingGroupExecuteCallback;\n import org.apache.shardingsphere.core.execute.StatementExecuteUnit;\n import org.apache.shardingsphere.core.execute.hook.SPISQLExecutionHook;\n import org.apache.shardingsphere.core.execute.hook.SQLExecutionHook;\n import org.apache.shardingsphere.core.execute.sql.execute.threadlocal.ExecutorExceptionHandler;\n import org.apache.shardingsphere.core.route.RouteUnit;\n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\n import org.apache.shardingsphere.spi.database.DataSourceMetaData;\n import org.apache.shardingsphere.spi.database.DatabaseType;\n \n-import java.sql.SQLException;\n-import java.sql.Statement;\n-import java.util.Collection;\n-import java.util.LinkedList;\n-import java.util.Map;\n+import lombok.RequiredArgsConstructor;\n \n /**\n  * Statement execute callback interface.\n@@ -67,7 +71,10 @@\n      */\n     private T execute0(final StatementExecuteUnit statementExecuteUnit, final boolean isTrunkThread, final Map<String, Object> shardingExecuteDataMap) throws SQLException {\n         ExecutorExceptionHandler.setExceptionThrown(isExceptionThrown);\n-        DataSourceMetaData dataSourceMetaData = databaseType.getDataSourceMetaData(statementExecuteUnit.getStatement().getConnection().getMetaData().getURL());\n+        Connection conn = statementExecuteUnit.getStatement().getConnection();\n+        DatabaseMetaData metaData = conn.getMetaData();\n+        \n+        DataSourceMetaData dataSourceMetaData = databaseType.getDataSourceMetaData(new DataSourceInfo(metaData.getURL(), metaData.getUserName()));\n         SQLExecutionHook sqlExecutionHook = new SPISQLExecutionHook();\n         try {\n             sqlExecutionHook.start(statementExecuteUnit.getRouteUnit(), dataSourceMetaData, isTrunkThread, shardingExecuteDataMap);",
                "deletions": 7
            },
            {
                "sha": "762e93e9d3ceb6d4ba92912bf8a0e13424d18b21",
                "filename": "sharding-core/sharding-core-route/src/test/java/org/apache/shardingsphere/core/route/type/standard/AbstractSQLRouteTest.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-route/src/test/java/org/apache/shardingsphere/core/route/type/standard/AbstractSQLRouteTest.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-core/sharding-core-route/src/test/java/org/apache/shardingsphere/core/route/type/standard/AbstractSQLRouteTest.java",
                "status": "modified",
                "changes": 36,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-route/src/test/java/org/apache/shardingsphere/core/route/type/standard/AbstractSQLRouteTest.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,6 +17,15 @@\n \n package org.apache.shardingsphere.core.route.type.standard;\n \n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n import org.apache.shardingsphere.core.database.DatabaseTypes;\n import org.apache.shardingsphere.core.metadata.ShardingSphereMetaData;\n import org.apache.shardingsphere.core.metadata.column.ColumnMetaData;\n@@ -27,19 +36,10 @@\n import org.apache.shardingsphere.core.route.SQLRouteResult;\n import org.apache.shardingsphere.core.route.fixture.AbstractRoutingEngineTest;\n import org.apache.shardingsphere.core.rule.ShardingRule;\n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\n import org.apache.shardingsphere.sql.parser.SQLParseEngine;\n import org.apache.shardingsphere.sql.parser.SQLParseEngineFactory;\n \n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertThat;\n-\n public abstract class AbstractSQLRouteTest extends AbstractRoutingEngineTest {\n     \n     protected final SQLRouteResult assertRoute(final String sql, final List<Object> parameters) {\n@@ -53,11 +53,17 @@ protected final SQLRouteResult assertRoute(final String sql, final List<Object>\n     }\n     \n     private DataSourceMetas buildDataSourceMetas() {\n-        Map<String, String> shardingDataSourceURLs = new LinkedHashMap<>();\n-        shardingDataSourceURLs.put(\"main\", \"jdbc:mysql://127.0.0.1:3306/actual_db\");\n-        shardingDataSourceURLs.put(\"ds_0\", \"jdbc:mysql://127.0.0.1:3306/actual_db\");\n-        shardingDataSourceURLs.put(\"ds_1\", \"jdbc:mysql://127.0.0.1:3306/actual_db\");\n-        return new DataSourceMetas(shardingDataSourceURLs, DatabaseTypes.getActualDatabaseType(\"MySQL\"));\n+        \n+        final Map<String, DataSourceInfo> dataSourceInfoMap = new HashMap<String, DataSourceInfo>();\n+        DataSourceInfo main = new DataSourceInfo(\"jdbc:mysql://127.0.0.1:3306/actual_db\", \"test\");\n+        DataSourceInfo ds0 = new DataSourceInfo(\"jdbc:mysql://127.0.0.1:3306/actual_db\", \"test\");\n+        DataSourceInfo ds1 = new DataSourceInfo(\"jdbc:mysql://127.0.0.1:3306/actual_db\", \"test\");\n+        \n+        dataSourceInfoMap.put(\"main\", main);\n+        dataSourceInfoMap.put(\"ds_0\", ds0);\n+        dataSourceInfoMap.put(\"ds_1\", ds1);\n+        \n+        return new DataSourceMetas(DatabaseTypes.getActualDatabaseType(\"MySQL\"), dataSourceInfoMap);\n     }\n     \n     private TableMetas buildTableMetas() {",
                "deletions": 15
            },
            {
                "sha": "236fc83400bfb804338ed726ec8bad33b57a27c7",
                "filename": "sharding-integration-test/sharding-jdbc-test/src/test/java/org/apache/shardingsphere/dbtest/engine/BaseIT.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-integration-test/sharding-jdbc-test/src/test/java/org/apache/shardingsphere/dbtest/engine/BaseIT.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-integration-test/sharding-jdbc-test/src/test/java/org/apache/shardingsphere/dbtest/engine/BaseIT.java",
                "status": "modified",
                "changes": 457,
                "additions": 232,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-integration-test/sharding-jdbc-test/src/test/java/org/apache/shardingsphere/dbtest/engine/BaseIT.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -1,225 +1,232 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.shardingsphere.dbtest.engine;\n-\n-import com.google.common.base.Joiner;\n-import lombok.AccessLevel;\n-import lombok.Getter;\n-import org.apache.shardingsphere.dbtest.cases.assertion.IntegrateTestCasesLoader;\n-import org.apache.shardingsphere.dbtest.env.DatabaseTypeEnvironment;\n-import org.apache.shardingsphere.dbtest.env.EnvironmentPath;\n-import org.apache.shardingsphere.dbtest.env.IntegrateTestEnvironment;\n-import org.apache.shardingsphere.dbtest.env.datasource.DataSourceUtil;\n-import org.apache.shardingsphere.dbtest.env.schema.SchemaEnvironmentManager;\n-import org.apache.shardingsphere.shardingjdbc.api.yaml.YamlMasterSlaveDataSourceFactory;\n-import org.apache.shardingsphere.shardingjdbc.api.yaml.YamlShardingDataSourceFactory;\n-import org.apache.shardingsphere.shardingjdbc.jdbc.core.datasource.ShardingDataSource;\n-import org.apache.shardingsphere.spi.database.DataSourceMetaData;\n-import org.apache.shardingsphere.spi.database.DatabaseType;\n-import org.apache.shardingsphere.spi.database.MemorizedDataSourceMetaData;\n-import org.junit.After;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import javax.sql.DataSource;\n-import javax.xml.bind.JAXBException;\n-import java.io.File;\n-import java.io.IOException;\n-import java.sql.Connection;\n-import java.sql.SQLException;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-import java.util.TimeZone;\n-\n-@RunWith(Parameterized.class)\n-@Getter(AccessLevel.PROTECTED)\n-public abstract class BaseIT {\n-    \n-    private static String notVerifyFlag = \"NOT_VERIFY\";\n-    \n-    private static IntegrateTestEnvironment integrateTestEnvironment = IntegrateTestEnvironment.getInstance();\n-    \n-    private static IntegrateTestCasesLoader integrateTestCasesLoader = IntegrateTestCasesLoader.getInstance();\n-    \n-    private final String shardingRuleType;\n-    \n-    private final DatabaseTypeEnvironment databaseTypeEnvironment;\n-    \n-    private final DataSource dataSource;\n-    \n-    private Map<String, DataSource> dataSourceMap;\n-    \n-    private Map<String, DataSource> instanceDataSourceMap;\n-    \n-    static {\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n-    }\n-    \n-    public BaseIT(final String shardingRuleType, final DatabaseTypeEnvironment databaseTypeEnvironment) throws IOException, JAXBException, SQLException {\n-        this.shardingRuleType = shardingRuleType;\n-        this.databaseTypeEnvironment = databaseTypeEnvironment;\n-        if (databaseTypeEnvironment.isEnabled()) {\n-            dataSourceMap = createDataSourceMap(shardingRuleType);\n-            dataSource = createDataSource(dataSourceMap);\n-            instanceDataSourceMap = createInstanceDataSourceMap();\n-        } else {\n-            dataSourceMap = null;\n-            dataSource = null;\n-            instanceDataSourceMap = null;\n-        }\n-    }\n-    \n-    protected static String getNotVerifyFlag() {\n-        return notVerifyFlag;\n-    }\n-    \n-    protected final String getExpectedDataFile(final String path, final String shardingRuleType, final DatabaseType databaseType, final String expectedDataFile) {\n-        if (null == expectedDataFile) {\n-            return null;\n-        }\n-        String prefix = path.substring(0, path.lastIndexOf(File.separator));\n-        String result = Joiner.on(\"/\").join(prefix, \"dataset\", shardingRuleType, databaseType.getName().toLowerCase(), expectedDataFile);\n-        if (new File(result).exists()) {\n-            return result;\n-        }\n-        result = Joiner.on(\"/\").join(prefix, \"dataset\", shardingRuleType, expectedDataFile);\n-        if (new File(result).exists()) {\n-            return result;\n-        }\n-        return Joiner.on(\"/\").join(prefix, \"dataset\", expectedDataFile);\n-    }\n-    \n-    private Map<String, DataSource> createDataSourceMap(final String shardingRuleType) throws IOException, JAXBException {\n-        Collection<String> dataSourceNames = SchemaEnvironmentManager.getDataSourceNames(shardingRuleType);\n-        Map<String, DataSource> result = new HashMap<>(dataSourceNames.size(), 1);\n-        for (String each : dataSourceNames) {\n-            result.put(each, DataSourceUtil.createDataSource(databaseTypeEnvironment.getDatabaseType(), each));\n-        }\n-        return result;\n-    }\n-    \n-    private DataSource createDataSource(final Map<String, DataSource> dataSourceMap) throws SQLException, IOException {\n-        return \"masterslave\".equals(shardingRuleType)\n-                ? YamlMasterSlaveDataSourceFactory.createDataSource(dataSourceMap, new File(EnvironmentPath.getShardingRuleResourceFile(shardingRuleType)))\n-                : YamlShardingDataSourceFactory.createDataSource(dataSourceMap, new File(EnvironmentPath.getShardingRuleResourceFile(shardingRuleType)));\n-    }\n-    \n-    private Map<String, DataSource> createInstanceDataSourceMap() throws SQLException {\n-        return \"masterslave\".equals(shardingRuleType) ? dataSourceMap : getShardingInstanceDataSourceMap();\n-    }\n-    \n-    private Map<String, DataSource> getShardingInstanceDataSourceMap() throws SQLException {\n-        Map<String, DataSource> result = new LinkedHashMap<>();\n-        Map<String, DataSourceMetaData> dataSourceMetaDataMap = getDataSourceMetaDataMap();\n-        for (Entry<String, DataSource> entry : dataSourceMap.entrySet()) {\n-            if (!isExisted(entry.getKey(), result.keySet(), dataSourceMetaDataMap)) {\n-                result.put(entry.getKey(), entry.getValue());\n-            }\n-        }\n-        return result;\n-    }\n-    \n-    private boolean isExisted(final String dataSourceName, final Collection<String> existedDataSourceNames, final Map<String, DataSourceMetaData> dataSourceMetaDataMap) {\n-        DataSourceMetaData sample = dataSourceMetaDataMap.get(dataSourceName);\n-        for (String each : existedDataSourceNames) {\n-            if (isInSameDatabaseInstance(sample, dataSourceMetaDataMap.get(each))) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-    \n-    private boolean isInSameDatabaseInstance(final DataSourceMetaData sample, final DataSourceMetaData target) {\n-        return sample instanceof MemorizedDataSourceMetaData\n-                ? target.getSchemaName().equals(sample.getSchemaName()) : target.getHostName().equals(sample.getHostName()) && target.getPort() == sample.getPort();\n-    }\n-    \n-    private Map<String, DataSourceMetaData> getDataSourceMetaDataMap() throws SQLException {\n-        Map<String, DataSourceMetaData> result = new LinkedHashMap<>();\n-        for (Entry<String, DataSource> entry : dataSourceMap.entrySet()) {\n-            result.put(entry.getKey(), databaseTypeEnvironment.getDatabaseType().getDataSourceMetaData(getDataSourceURL(entry.getValue())));\n-        }\n-        return result;\n-    }\n-    \n-    private static String getDataSourceURL(final DataSource dataSource) throws SQLException {\n-        try (Connection connection = dataSource.getConnection()) {\n-            return connection.getMetaData().getURL();\n-        }\n-    }\n-\n-    protected static void createDatabasesAndTables() {\n-        createDatabases();\n-        dropTables();\n-        createTables();\n-    }\n-\n-    protected static void createDatabases() {\n-        try {\n-            for (String each : integrateTestEnvironment.getShardingRuleTypes()) {\n-                SchemaEnvironmentManager.dropDatabase(each);\n-            }\n-            for (String each : integrateTestEnvironment.getShardingRuleTypes()) {\n-                SchemaEnvironmentManager.createDatabase(each);\n-            }\n-        } catch (final JAXBException | IOException | SQLException ex) {\n-            ex.printStackTrace();\n-        }\n-    }\n-\n-    protected static void createTables() {\n-        try {\n-            for (String each : integrateTestEnvironment.getShardingRuleTypes()) {\n-                SchemaEnvironmentManager.createTable(each);\n-            }\n-        } catch (final JAXBException | IOException | SQLException ex) {\n-            ex.printStackTrace();\n-        }\n-    }\n-\n-    protected static void dropDatabases() {\n-        try {\n-            for (String each : integrateTestEnvironment.getShardingRuleTypes()) {\n-                SchemaEnvironmentManager.dropDatabase(each);\n-            }\n-        } catch (final JAXBException | IOException ex) {\n-            ex.printStackTrace();\n-        }\n-    }\n-\n-    protected static void dropTables() {\n-        try {\n-            for (String each : integrateTestEnvironment.getShardingRuleTypes()) {\n-                SchemaEnvironmentManager.dropTable(each);\n-            }\n-        } catch (final JAXBException | IOException ex) {\n-            ex.printStackTrace();\n-        }\n-    }\n-\n-    @After\n-    public void tearDown() {\n-        if (dataSource instanceof ShardingDataSource) {\n-            ((ShardingDataSource) dataSource).getRuntimeContext().getExecuteEngine().close();\n-        }\n-    }\n-}\n-\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.shardingsphere.dbtest.engine;\r\n+\r\n+import java.io.File;\r\n+import java.io.IOException;\r\n+import java.sql.Connection;\r\n+import java.sql.DatabaseMetaData;\r\n+import java.sql.SQLException;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.LinkedHashMap;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.TimeZone;\r\n+\r\n+import javax.sql.DataSource;\r\n+import javax.xml.bind.JAXBException;\r\n+\r\n+import org.apache.shardingsphere.dbtest.cases.assertion.IntegrateTestCasesLoader;\r\n+import org.apache.shardingsphere.dbtest.env.DatabaseTypeEnvironment;\r\n+import org.apache.shardingsphere.dbtest.env.EnvironmentPath;\r\n+import org.apache.shardingsphere.dbtest.env.IntegrateTestEnvironment;\r\n+import org.apache.shardingsphere.dbtest.env.datasource.DataSourceUtil;\r\n+import org.apache.shardingsphere.dbtest.env.schema.SchemaEnvironmentManager;\r\n+import org.apache.shardingsphere.shardingjdbc.api.yaml.YamlMasterSlaveDataSourceFactory;\r\n+import org.apache.shardingsphere.shardingjdbc.api.yaml.YamlShardingDataSourceFactory;\r\n+import org.apache.shardingsphere.shardingjdbc.jdbc.core.datasource.ShardingDataSource;\r\n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\r\n+import org.apache.shardingsphere.spi.database.DataSourceMetaData;\r\n+import org.apache.shardingsphere.spi.database.DatabaseType;\r\n+import org.apache.shardingsphere.spi.database.MemorizedDataSourceMetaData;\r\n+import org.junit.After;\r\n+import org.junit.runner.RunWith;\r\n+import org.junit.runners.Parameterized;\r\n+\r\n+import com.google.common.base.Joiner;\r\n+\r\n+import lombok.AccessLevel;\r\n+import lombok.Getter;\r\n+\r\n+@RunWith(Parameterized.class)\r\n+@Getter(AccessLevel.PROTECTED)\r\n+public abstract class BaseIT {\r\n+    \r\n+    private static String notVerifyFlag = \"NOT_VERIFY\";\r\n+    \r\n+    private static IntegrateTestEnvironment integrateTestEnvironment = IntegrateTestEnvironment.getInstance();\r\n+    \r\n+    private static IntegrateTestCasesLoader integrateTestCasesLoader = IntegrateTestCasesLoader.getInstance();\r\n+    \r\n+    private final String shardingRuleType;\r\n+    \r\n+    private final DatabaseTypeEnvironment databaseTypeEnvironment;\r\n+    \r\n+    private final DataSource dataSource;\r\n+    \r\n+    private Map<String, DataSource> dataSourceMap;\r\n+    \r\n+    private Map<String, DataSource> instanceDataSourceMap;\r\n+    \r\n+    static {\r\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\r\n+    }\r\n+    \r\n+    public BaseIT(final String shardingRuleType, final DatabaseTypeEnvironment databaseTypeEnvironment) throws IOException, JAXBException, SQLException {\r\n+        this.shardingRuleType = shardingRuleType;\r\n+        this.databaseTypeEnvironment = databaseTypeEnvironment;\r\n+        if (databaseTypeEnvironment.isEnabled()) {\r\n+            dataSourceMap = createDataSourceMap(shardingRuleType);\r\n+            dataSource = createDataSource(dataSourceMap);\r\n+            instanceDataSourceMap = createInstanceDataSourceMap();\r\n+        } else {\r\n+            dataSourceMap = null;\r\n+            dataSource = null;\r\n+            instanceDataSourceMap = null;\r\n+        }\r\n+    }\r\n+    \r\n+    protected static String getNotVerifyFlag() {\r\n+        return notVerifyFlag;\r\n+    }\r\n+    \r\n+    protected final String getExpectedDataFile(final String path, final String shardingRuleType, final DatabaseType databaseType, final String expectedDataFile) {\r\n+        if (null == expectedDataFile) {\r\n+            return null;\r\n+        }\r\n+        String prefix = path.substring(0, path.lastIndexOf(File.separator));\r\n+        String result = Joiner.on(\"/\").join(prefix, \"dataset\", shardingRuleType, databaseType.getName().toLowerCase(), expectedDataFile);\r\n+        if (new File(result).exists()) {\r\n+            return result;\r\n+        }\r\n+        result = Joiner.on(\"/\").join(prefix, \"dataset\", shardingRuleType, expectedDataFile);\r\n+        if (new File(result).exists()) {\r\n+            return result;\r\n+        }\r\n+        return Joiner.on(\"/\").join(prefix, \"dataset\", expectedDataFile);\r\n+    }\r\n+    \r\n+    private Map<String, DataSource> createDataSourceMap(final String shardingRuleType) throws IOException, JAXBException {\r\n+        Collection<String> dataSourceNames = SchemaEnvironmentManager.getDataSourceNames(shardingRuleType);\r\n+        Map<String, DataSource> result = new HashMap<>(dataSourceNames.size(), 1);\r\n+        for (String each : dataSourceNames) {\r\n+            result.put(each, DataSourceUtil.createDataSource(databaseTypeEnvironment.getDatabaseType(), each));\r\n+        }\r\n+        return result;\r\n+    }\r\n+    \r\n+    private DataSource createDataSource(final Map<String, DataSource> dataSourceMap) throws SQLException, IOException {\r\n+        return \"masterslave\".equals(shardingRuleType)\r\n+                ? YamlMasterSlaveDataSourceFactory.createDataSource(dataSourceMap, new File(EnvironmentPath.getShardingRuleResourceFile(shardingRuleType)))\r\n+                : YamlShardingDataSourceFactory.createDataSource(dataSourceMap, new File(EnvironmentPath.getShardingRuleResourceFile(shardingRuleType)));\r\n+    }\r\n+    \r\n+    private Map<String, DataSource> createInstanceDataSourceMap() throws SQLException {\r\n+        return \"masterslave\".equals(shardingRuleType) ? dataSourceMap : getShardingInstanceDataSourceMap();\r\n+    }\r\n+    \r\n+    private Map<String, DataSource> getShardingInstanceDataSourceMap() throws SQLException {\r\n+        Map<String, DataSource> result = new LinkedHashMap<>();\r\n+        Map<String, DataSourceMetaData> dataSourceMetaDataMap = getDataSourceMetaDataMap();\r\n+        for (Entry<String, DataSource> entry : dataSourceMap.entrySet()) {\r\n+            if (!isExisted(entry.getKey(), result.keySet(), dataSourceMetaDataMap)) {\r\n+                result.put(entry.getKey(), entry.getValue());\r\n+            }\r\n+        }\r\n+        return result;\r\n+    }\r\n+    \r\n+    private boolean isExisted(final String dataSourceName, final Collection<String> existedDataSourceNames, final Map<String, DataSourceMetaData> dataSourceMetaDataMap) {\r\n+        DataSourceMetaData sample = dataSourceMetaDataMap.get(dataSourceName);\r\n+        for (String each : existedDataSourceNames) {\r\n+            if (isInSameDatabaseInstance(sample, dataSourceMetaDataMap.get(each))) {\r\n+                return true;\r\n+            }\r\n+        }\r\n+        return false;\r\n+    }\r\n+    \r\n+    private boolean isInSameDatabaseInstance(final DataSourceMetaData sample, final DataSourceMetaData target) {\r\n+        return sample instanceof MemorizedDataSourceMetaData\r\n+                ? (target.getSchemaName() == sample.getSchemaName() || target.getSchemaName().equals(sample.getSchemaName())) \r\n+                        : target.getHostName().equals(sample.getHostName()) && target.getPort() == sample.getPort();\r\n+    }\r\n+    \r\n+    private Map<String, DataSourceMetaData> getDataSourceMetaDataMap() throws SQLException {\r\n+        Map<String, DataSourceMetaData> result = new LinkedHashMap<>();\r\n+        for (Entry<String, DataSource> entry : dataSourceMap.entrySet()) {\r\n+            result.put(entry.getKey(), databaseTypeEnvironment.getDatabaseType().getDataSourceMetaData(getDataSourceInfo(entry.getValue())));\r\n+        }\r\n+        return result;\r\n+    }\r\n+    \r\n+    private static DataSourceInfo getDataSourceInfo(final DataSource dataSource) throws SQLException {\r\n+        try (Connection connection = dataSource.getConnection()) {\r\n+            DatabaseMetaData metaData = connection.getMetaData();\r\n+            return new DataSourceInfo(metaData.getURL(), metaData.getUserName());\r\n+        }\r\n+    }\r\n+\r\n+    protected static void createDatabasesAndTables() {\r\n+        createDatabases();\r\n+        dropTables();\r\n+        createTables();\r\n+    }\r\n+\r\n+    protected static void createDatabases() {\r\n+        try {\r\n+            for (String each : integrateTestEnvironment.getShardingRuleTypes()) {\r\n+                SchemaEnvironmentManager.dropDatabase(each);\r\n+            }\r\n+            for (String each : integrateTestEnvironment.getShardingRuleTypes()) {\r\n+                SchemaEnvironmentManager.createDatabase(each);\r\n+            }\r\n+        } catch (final JAXBException | IOException | SQLException ex) {\r\n+            ex.printStackTrace();\r\n+        }\r\n+    }\r\n+\r\n+    protected static void createTables() {\r\n+        try {\r\n+            for (String each : integrateTestEnvironment.getShardingRuleTypes()) {\r\n+                SchemaEnvironmentManager.createTable(each);\r\n+            }\r\n+        } catch (final JAXBException | IOException | SQLException ex) {\r\n+            ex.printStackTrace();\r\n+        }\r\n+    }\r\n+\r\n+    protected static void dropDatabases() {\r\n+        try {\r\n+            for (String each : integrateTestEnvironment.getShardingRuleTypes()) {\r\n+                SchemaEnvironmentManager.dropDatabase(each);\r\n+            }\r\n+        } catch (final JAXBException | IOException ex) {\r\n+            ex.printStackTrace();\r\n+        }\r\n+    }\r\n+\r\n+    protected static void dropTables() {\r\n+        try {\r\n+            for (String each : integrateTestEnvironment.getShardingRuleTypes()) {\r\n+                SchemaEnvironmentManager.dropTable(each);\r\n+            }\r\n+        } catch (final JAXBException | IOException ex) {\r\n+            ex.printStackTrace();\r\n+        }\r\n+    }\r\n+\r\n+    @After\r\n+    public void tearDown() {\r\n+        if (dataSource instanceof ShardingDataSource) {\r\n+            ((ShardingDataSource) dataSource).getRuntimeContext().getExecuteEngine().close();\r\n+        }\r\n+    }\r\n+}\r\n+\r",
                "deletions": 225
            },
            {
                "sha": "ba5373b72dca02771feb5b1cd2bc65dab4048212",
                "filename": "sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/context/ShardingRuntimeContext.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/context/ShardingRuntimeContext.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/context/ShardingRuntimeContext.java",
                "status": "modified",
                "changes": 40,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/context/ShardingRuntimeContext.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,7 +17,16 @@\n \n package org.apache.shardingsphere.shardingjdbc.jdbc.core.context;\n \n-import lombok.Getter;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.SQLException;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Properties;\n+\n+import javax.sql.DataSource;\n+\n import org.apache.shardingsphere.core.constant.properties.ShardingPropertiesConstant;\n import org.apache.shardingsphere.core.execute.metadata.TableMetaDataInitializer;\n import org.apache.shardingsphere.core.metadata.ShardingSphereMetaData;\n@@ -26,17 +35,11 @@\n import org.apache.shardingsphere.core.rule.ShardingRule;\n import org.apache.shardingsphere.shardingjdbc.jdbc.core.datasource.metadata.CachedDatabaseMetaData;\n import org.apache.shardingsphere.shardingjdbc.jdbc.metadata.JDBCTableMetaDataConnectionManager;\n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\n import org.apache.shardingsphere.spi.database.DatabaseType;\n import org.apache.shardingsphere.transaction.ShardingTransactionManagerEngine;\n \n-import javax.sql.DataSource;\n-import java.sql.Connection;\n-import java.sql.DatabaseMetaData;\n-import java.sql.SQLException;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-import java.util.Properties;\n+import lombok.Getter;\n \n /**\n  * Runtime context for sharding.\n@@ -69,25 +72,24 @@ private DatabaseMetaData createCachedDatabaseMetaData(final Map<String, DataSour\n     }\n     \n     private ShardingSphereMetaData createMetaData(final Map<String, DataSource> dataSourceMap, final ShardingRule shardingRule, final DatabaseType databaseType) throws SQLException {\n-        DataSourceMetas dataSourceMetas = new DataSourceMetas(getDataSourceURLs(dataSourceMap), databaseType);\n+        DataSourceMetas dataSourceMetas = new DataSourceMetas(databaseType, getDataSourceInfoMap(dataSourceMap));\n         TableMetas tableMetas = new TableMetas(getTableMetaDataInitializer(dataSourceMap, dataSourceMetas).load(shardingRule));\n         return new ShardingSphereMetaData(dataSourceMetas, tableMetas);\n     }\n     \n-    private Map<String, String> getDataSourceURLs(final Map<String, DataSource> dataSourceMap) throws SQLException {\n-        Map<String, String> result = new LinkedHashMap<>(dataSourceMap.size(), 1);\n+    private Map<String, DataSourceInfo> getDataSourceInfoMap(final Map<String, DataSource> dataSourceMap) throws SQLException {\n+        Map<String, DataSourceInfo> result = new LinkedHashMap<String, DataSourceInfo>(dataSourceMap.size(), 1);\n         for (Entry<String, DataSource> entry : dataSourceMap.entrySet()) {\n-            result.put(entry.getKey(), getDataSourceURL(entry.getValue()));\n+            DataSource dataSource = entry.getValue();\n+            try (Connection connection = dataSource.getConnection()) {\n+                DatabaseMetaData metaData = connection.getMetaData();\n+                result.put(entry.getKey(), new DataSourceInfo(metaData.getURL(), metaData.getUserName()));\n+            }\n+            \n         }\n         return result;\n     }\n     \n-    private String getDataSourceURL(final DataSource dataSource) throws SQLException {\n-        try (Connection connection = dataSource.getConnection()) {\n-            return connection.getMetaData().getURL();\n-        }\n-    }\n-    \n     private TableMetaDataInitializer getTableMetaDataInitializer(final Map<String, DataSource> dataSourceMap, final DataSourceMetas dataSourceMetas) {\n         return new TableMetaDataInitializer(dataSourceMetas, getExecuteEngine(), new JDBCTableMetaDataConnectionManager(dataSourceMap),\n                 this.getProps().<Integer>getValue(ShardingPropertiesConstant.MAX_CONNECTIONS_SIZE_PER_QUERY),",
                "deletions": 19
            },
            {
                "sha": "29127fea60ee54efd94f7fe8234d3272f87ba9bc",
                "filename": "sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/schema/LogicSchema.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/schema/LogicSchema.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/schema/LogicSchema.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/schema/LogicSchema.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -34,10 +34,12 @@\n import org.apache.shardingsphere.shardingproxy.config.yaml.YamlDataSourceParameter;\n import org.apache.shardingsphere.shardingproxy.context.ShardingProxyContext;\n import org.apache.shardingsphere.shardingproxy.util.DataSourceConverter;\n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\n import org.apache.shardingsphere.sql.parser.SQLParseEngine;\n import org.apache.shardingsphere.sql.parser.SQLParseEngineFactory;\n \n import java.sql.SQLException;\n+import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.Map.Entry;\n@@ -63,6 +65,22 @@ public LogicSchema(final String name, final Map<String, YamlDataSourceParameter>\n         ShardingOrchestrationEventBus.getInstance().register(this);\n     }\n     \n+    /**\n+     * Get dataSource map.\n+     * @param dataSourceMap dataSource map\n+     * @return get dataSource map\n+     * @throws SQLException SQLException\n+     */\n+    public Map<String, DataSourceInfo> getDataSourceInfoMap(final Map<String, YamlDataSourceParameter> dataSourceMap) throws SQLException {\n+        Map<String, DataSourceInfo> result = new HashMap<String, DataSourceInfo>(dataSourceMap.size(), 1);\n+        for (Entry<String, YamlDataSourceParameter> entry : dataSourceMap.entrySet()) {\n+            YamlDataSourceParameter dataSource = entry.getValue();\n+            DataSourceInfo sourceInfo = new DataSourceInfo(dataSource.getUrl(), null);\n+            result.put(entry.getKey(), sourceInfo);\n+        }\n+        return result;\n+    }\n+    \n     /**\n      * Get sharding meta data.\n      * ",
                "deletions": 0
            },
            {
                "sha": "7bdc25f6c4e0c59679a32358369f86ca4bbd997f",
                "filename": "sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/schema/impl/EncryptSchema.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/schema/impl/EncryptSchema.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/schema/impl/EncryptSchema.java",
                "status": "modified",
                "changes": 14,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/schema/impl/EncryptSchema.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -17,9 +17,9 @@\n \n package org.apache.shardingsphere.shardingproxy.backend.schema.impl;\n \n-import com.google.common.eventbus.Subscribe;\n-import lombok.Getter;\n-import lombok.SneakyThrows;\n+import java.sql.SQLException;\n+import java.util.Map;\n+\n import org.apache.shardingsphere.api.config.encrypt.EncryptRuleConfiguration;\n import org.apache.shardingsphere.api.config.sharding.ShardingRuleConfiguration;\n import org.apache.shardingsphere.core.metadata.ShardingSphereMetaData;\n@@ -33,8 +33,10 @@\n import org.apache.shardingsphere.shardingproxy.backend.schema.LogicSchemas;\n import org.apache.shardingsphere.shardingproxy.config.yaml.YamlDataSourceParameter;\n \n-import java.sql.SQLException;\n-import java.util.Map;\n+import com.google.common.eventbus.Subscribe;\n+\n+import lombok.Getter;\n+import lombok.SneakyThrows;\n \n /**\n  * Encrypt schema.\n@@ -59,7 +61,7 @@ public EncryptSchema(final String name, final Map<String, YamlDataSourceParamete\n     }\n     \n     private ShardingSphereMetaData createMetaData() throws SQLException {\n-        DataSourceMetas dataSourceMetas = new DataSourceMetas(getDataSourceURLs(getDataSources()), LogicSchemas.getInstance().getDatabaseType());\n+        DataSourceMetas dataSourceMetas = new DataSourceMetas(LogicSchemas.getInstance().getDatabaseType(), getDataSourceInfoMap(getDataSources()));\n         TableMetas tableMetas = new TableMetas(getTableMetaDataInitializer(dataSourceMetas).load(shardingRule));\n         return new ShardingSphereMetaData(dataSourceMetas, tableMetas);\n     }",
                "deletions": 6
            },
            {
                "sha": "4ba13c66798b9f8a4500e7bfeee4d50e3b9a124f",
                "filename": "sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/schema/impl/MasterSlaveSchema.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/schema/impl/MasterSlaveSchema.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/schema/impl/MasterSlaveSchema.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/schema/impl/MasterSlaveSchema.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -67,7 +67,7 @@ private MasterSlaveRule createMasterSlaveRule(final MasterSlaveRuleConfiguration\n     }\n     \n     private ShardingSphereMetaData createMetaData() throws SQLException {\n-        DataSourceMetas dataSourceMetas = new DataSourceMetas(getDataSourceURLs(getDataSources()), LogicSchemas.getInstance().getDatabaseType());\n+        DataSourceMetas dataSourceMetas = new DataSourceMetas(LogicSchemas.getInstance().getDatabaseType(), getDataSourceInfoMap(getDataSources()));\n         TableMetas tableMetas = new TableMetas(getTableMetaDataInitializer(dataSourceMetas).load(shardingRule));\n         return new ShardingSphereMetaData(dataSourceMetas, tableMetas);\n     }",
                "deletions": 1
            },
            {
                "sha": "02c9685448215c7075ffa8bcfb13482f73761f90",
                "filename": "sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/schema/impl/ShardingSchema.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/schema/impl/ShardingSchema.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/schema/impl/ShardingSchema.java",
                "status": "modified",
                "changes": 368,
                "additions": 184,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/schema/impl/ShardingSchema.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -1,184 +1,184 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.shardingsphere.shardingproxy.backend.schema.impl;\n-\n-import com.google.common.base.Optional;\n-import com.google.common.eventbus.Subscribe;\n-import lombok.Getter;\n-import org.apache.shardingsphere.api.config.sharding.ShardingRuleConfiguration;\n-import org.apache.shardingsphere.core.metadata.ShardingSphereMetaData;\n-import org.apache.shardingsphere.core.metadata.datasource.DataSourceMetas;\n-import org.apache.shardingsphere.core.metadata.table.TableMetas;\n-import org.apache.shardingsphere.core.preprocessor.statement.SQLStatementContext;\n-import org.apache.shardingsphere.sql.parser.sql.segment.ddl.index.IndexSegment;\n-import org.apache.shardingsphere.sql.parser.sql.statement.ddl.AlterTableStatement;\n-import org.apache.shardingsphere.sql.parser.sql.statement.ddl.CreateIndexStatement;\n-import org.apache.shardingsphere.sql.parser.sql.statement.ddl.CreateTableStatement;\n-import org.apache.shardingsphere.sql.parser.sql.statement.ddl.DropIndexStatement;\n-import org.apache.shardingsphere.sql.parser.sql.statement.ddl.DropTableStatement;\n-import org.apache.shardingsphere.core.rule.MasterSlaveRule;\n-import org.apache.shardingsphere.core.rule.ShardingRule;\n-import org.apache.shardingsphere.core.util.ConfigurationLogger;\n-import org.apache.shardingsphere.orchestration.internal.registry.config.event.ShardingRuleChangedEvent;\n-import org.apache.shardingsphere.orchestration.internal.registry.state.event.DisabledStateChangedEvent;\n-import org.apache.shardingsphere.orchestration.internal.registry.state.schema.OrchestrationShardingSchema;\n-import org.apache.shardingsphere.orchestration.internal.rule.OrchestrationMasterSlaveRule;\n-import org.apache.shardingsphere.orchestration.internal.rule.OrchestrationShardingRule;\n-import org.apache.shardingsphere.shardingproxy.backend.schema.LogicSchema;\n-import org.apache.shardingsphere.shardingproxy.backend.schema.LogicSchemas;\n-import org.apache.shardingsphere.shardingproxy.config.yaml.YamlDataSourceParameter;\n-\n-import java.sql.SQLException;\n-import java.util.Collection;\n-import java.util.LinkedList;\n-import java.util.Map;\n-\n-/**\n- * Sharding schema.\n- *\n- * @author zhangliang\n- * @author zhangyonglun\n- * @author panjuan\n- * @author zhaojun\n- * @author wangkai\n- * @author sunbufu\n- */\n-@Getter\n-public final class ShardingSchema extends LogicSchema {\n-    \n-    private ShardingRule shardingRule;\n-    \n-    private final ShardingSphereMetaData metaData;\n-    \n-    public ShardingSchema(\n-            final String name, final Map<String, YamlDataSourceParameter> dataSources, final ShardingRuleConfiguration shardingRuleConfig, final boolean isUsingRegistry) throws SQLException {\n-        super(name, dataSources);\n-        shardingRule = createShardingRule(shardingRuleConfig, dataSources.keySet(), isUsingRegistry);\n-        metaData = createMetaData();\n-    }\n-    \n-    private ShardingRule createShardingRule(final ShardingRuleConfiguration shardingRuleConfig, final Collection<String> dataSourceNames, final boolean isUsingRegistry) {\n-        return isUsingRegistry ? new OrchestrationShardingRule(shardingRuleConfig, dataSourceNames) : new ShardingRule(shardingRuleConfig, dataSourceNames);\n-    }\n-    \n-    private ShardingSphereMetaData createMetaData() throws SQLException {\n-        DataSourceMetas dataSourceMetas = new DataSourceMetas(getDataSourceURLs(getDataSources()), LogicSchemas.getInstance().getDatabaseType());\n-        TableMetas tableMetas = new TableMetas(getTableMetaDataInitializer(dataSourceMetas).load(shardingRule));\n-        return new ShardingSphereMetaData(dataSourceMetas, tableMetas);\n-    }\n-    \n-    /**\n-     * Renew sharding rule.\n-     *\n-     * @param shardingRuleChangedEvent sharding rule changed event.\n-     */\n-    @Subscribe\n-    public synchronized void renew(final ShardingRuleChangedEvent shardingRuleChangedEvent) {\n-        if (getName().equals(shardingRuleChangedEvent.getShardingSchemaName())) {\n-            ConfigurationLogger.log(shardingRuleChangedEvent.getShardingRuleConfiguration());\n-            shardingRule = new OrchestrationShardingRule(shardingRuleChangedEvent.getShardingRuleConfiguration(), getDataSources().keySet());\n-        }\n-    }\n-    \n-    /**\n-     * Renew disabled data source names.\n-     *\n-     * @param disabledStateChangedEvent disabled state changed event\n-     */\n-    @Subscribe\n-    public synchronized void renew(final DisabledStateChangedEvent disabledStateChangedEvent) {\n-        OrchestrationShardingSchema shardingSchema = disabledStateChangedEvent.getShardingSchema();\n-        if (getName().equals(shardingSchema.getSchemaName())) {\n-            for (MasterSlaveRule each : shardingRule.getMasterSlaveRules()) {\n-                ((OrchestrationMasterSlaveRule) each).updateDisabledDataSourceNames(shardingSchema.getDataSourceName(), disabledStateChangedEvent.isDisabled());\n-            }\n-        }\n-    }\n-    \n-    @Override\n-    public void refreshTableMetaData(final SQLStatementContext sqlStatementContext) throws SQLException {\n-        if (null == sqlStatementContext) {\n-            return;\n-        }\n-        if (sqlStatementContext.getSqlStatement() instanceof CreateTableStatement) {\n-            refreshTableMetaDataForCreateTable(sqlStatementContext);\n-        } else if (sqlStatementContext.getSqlStatement() instanceof AlterTableStatement) {\n-            refreshTableMetaDataForAlterTable(sqlStatementContext);\n-        } else if (sqlStatementContext.getSqlStatement() instanceof DropTableStatement) {\n-            refreshTableMetaDataForDropTable(sqlStatementContext);\n-        } else if (sqlStatementContext.getSqlStatement() instanceof CreateIndexStatement) {\n-            refreshTableMetaDataForCreateIndex(sqlStatementContext);\n-        } else if (sqlStatementContext.getSqlStatement() instanceof DropIndexStatement) {\n-            refreshTableMetaDataForDropIndex(sqlStatementContext);\n-        }\n-    }\n-    \n-    private void refreshTableMetaDataForCreateTable(final SQLStatementContext sqlStatementContext) throws SQLException {\n-        String tableName = sqlStatementContext.getTablesContext().getSingleTableName();\n-        getMetaData().getTables().put(tableName, getTableMetaDataInitializer(metaData.getDataSources()).load(tableName, shardingRule));\n-    }\n-    \n-    private void refreshTableMetaDataForAlterTable(final SQLStatementContext sqlStatementContext) throws SQLException {\n-        String tableName = sqlStatementContext.getTablesContext().getSingleTableName();\n-        getMetaData().getTables().put(tableName, getTableMetaDataInitializer(metaData.getDataSources()).load(tableName, shardingRule));\n-    }\n-    \n-    private void refreshTableMetaDataForDropTable(final SQLStatementContext sqlStatementContext) {\n-        for (String each : sqlStatementContext.getTablesContext().getTableNames()) {\n-            getMetaData().getTables().remove(each);\n-        }\n-    }\n-    \n-    private void refreshTableMetaDataForCreateIndex(final SQLStatementContext sqlStatementContext) {\n-        CreateIndexStatement createIndexStatement = (CreateIndexStatement) sqlStatementContext.getSqlStatement();\n-        if (null != createIndexStatement.getIndex()) {\n-            getMetaData().getTables().get(sqlStatementContext.getTablesContext().getSingleTableName()).getIndexes().add(createIndexStatement.getIndex().getName());\n-        }\n-    }\n-    \n-    private void refreshTableMetaDataForDropIndex(final SQLStatementContext sqlStatementContext) {\n-        DropIndexStatement dropIndexStatement = (DropIndexStatement) sqlStatementContext.getSqlStatement();\n-        Collection<String> indexNames = getIndexNames(dropIndexStatement);\n-        if (!sqlStatementContext.getTablesContext().isEmpty()) {\n-            getMetaData().getTables().get(sqlStatementContext.getTablesContext().getSingleTableName()).getIndexes().removeAll(indexNames);\n-        }\n-        for (String each : indexNames) {\n-            Optional<String> logicTableName = findLogicTableName(getMetaData().getTables(), each);\n-            if (logicTableName.isPresent()) {\n-                getMetaData().getTables().get(sqlStatementContext.getTablesContext().getSingleTableName()).getIndexes().remove(each);\n-            }\n-        }\n-    }\n-    \n-    private Collection<String> getIndexNames(final DropIndexStatement dropIndexStatement) {\n-        Collection<String> result = new LinkedList<>();\n-        for (IndexSegment each : dropIndexStatement.getIndexes()) {\n-            result.add(each.getName());\n-        }\n-        return result;\n-    }\n-    \n-    private Optional<String> findLogicTableName(final TableMetas tableMetas, final String logicIndexName) {\n-        for (String each : tableMetas.getAllTableNames()) {\n-            if (tableMetas.get(each).containsIndex(logicIndexName)) {\n-                return Optional.of(each);\n-            }\n-        }\n-        return Optional.absent();\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.shardingsphere.shardingproxy.backend.schema.impl;\r\n+\r\n+import com.google.common.base.Optional;\r\n+import com.google.common.eventbus.Subscribe;\r\n+import lombok.Getter;\r\n+import org.apache.shardingsphere.api.config.sharding.ShardingRuleConfiguration;\r\n+import org.apache.shardingsphere.core.metadata.ShardingSphereMetaData;\r\n+import org.apache.shardingsphere.core.metadata.datasource.DataSourceMetas;\r\n+import org.apache.shardingsphere.core.metadata.table.TableMetas;\r\n+import org.apache.shardingsphere.core.preprocessor.statement.SQLStatementContext;\r\n+import org.apache.shardingsphere.sql.parser.sql.segment.ddl.index.IndexSegment;\r\n+import org.apache.shardingsphere.sql.parser.sql.statement.ddl.AlterTableStatement;\r\n+import org.apache.shardingsphere.sql.parser.sql.statement.ddl.CreateIndexStatement;\r\n+import org.apache.shardingsphere.sql.parser.sql.statement.ddl.CreateTableStatement;\r\n+import org.apache.shardingsphere.sql.parser.sql.statement.ddl.DropIndexStatement;\r\n+import org.apache.shardingsphere.sql.parser.sql.statement.ddl.DropTableStatement;\r\n+import org.apache.shardingsphere.core.rule.MasterSlaveRule;\r\n+import org.apache.shardingsphere.core.rule.ShardingRule;\r\n+import org.apache.shardingsphere.core.util.ConfigurationLogger;\r\n+import org.apache.shardingsphere.orchestration.internal.registry.config.event.ShardingRuleChangedEvent;\r\n+import org.apache.shardingsphere.orchestration.internal.registry.state.event.DisabledStateChangedEvent;\r\n+import org.apache.shardingsphere.orchestration.internal.registry.state.schema.OrchestrationShardingSchema;\r\n+import org.apache.shardingsphere.orchestration.internal.rule.OrchestrationMasterSlaveRule;\r\n+import org.apache.shardingsphere.orchestration.internal.rule.OrchestrationShardingRule;\r\n+import org.apache.shardingsphere.shardingproxy.backend.schema.LogicSchema;\r\n+import org.apache.shardingsphere.shardingproxy.backend.schema.LogicSchemas;\r\n+import org.apache.shardingsphere.shardingproxy.config.yaml.YamlDataSourceParameter;\r\n+\r\n+import java.sql.SQLException;\r\n+import java.util.Collection;\r\n+import java.util.LinkedList;\r\n+import java.util.Map;\r\n+\r\n+/**\r\n+ * Sharding schema.\r\n+ *\r\n+ * @author zhangliang\r\n+ * @author zhangyonglun\r\n+ * @author panjuan\r\n+ * @author zhaojun\r\n+ * @author wangkai\r\n+ * @author sunbufu\r\n+ */\r\n+@Getter\r\n+public final class ShardingSchema extends LogicSchema {\r\n+    \r\n+    private ShardingRule shardingRule;\r\n+    \r\n+    private final ShardingSphereMetaData metaData;\r\n+    \r\n+    public ShardingSchema(\r\n+            final String name, final Map<String, YamlDataSourceParameter> dataSources, final ShardingRuleConfiguration shardingRuleConfig, final boolean isUsingRegistry) throws SQLException {\r\n+        super(name, dataSources);\r\n+        shardingRule = createShardingRule(shardingRuleConfig, dataSources.keySet(), isUsingRegistry);\r\n+        metaData = createMetaData();\r\n+    }\r\n+    \r\n+    private ShardingRule createShardingRule(final ShardingRuleConfiguration shardingRuleConfig, final Collection<String> dataSourceNames, final boolean isUsingRegistry) {\r\n+        return isUsingRegistry ? new OrchestrationShardingRule(shardingRuleConfig, dataSourceNames) : new ShardingRule(shardingRuleConfig, dataSourceNames);\r\n+    }\r\n+    \r\n+    private ShardingSphereMetaData createMetaData() throws SQLException {\r\n+        DataSourceMetas dataSourceMetas = new DataSourceMetas(LogicSchemas.getInstance().getDatabaseType(), getDataSourceInfoMap(getDataSources()));\r\n+        TableMetas tableMetas = new TableMetas(getTableMetaDataInitializer(dataSourceMetas).load(shardingRule));\r\n+        return new ShardingSphereMetaData(dataSourceMetas, tableMetas);\r\n+    }\r\n+    \r\n+    /**\r\n+     * Renew sharding rule.\r\n+     *\r\n+     * @param shardingRuleChangedEvent sharding rule changed event.\r\n+     */\r\n+    @Subscribe\r\n+    public synchronized void renew(final ShardingRuleChangedEvent shardingRuleChangedEvent) {\r\n+        if (getName().equals(shardingRuleChangedEvent.getShardingSchemaName())) {\r\n+            ConfigurationLogger.log(shardingRuleChangedEvent.getShardingRuleConfiguration());\r\n+            shardingRule = new OrchestrationShardingRule(shardingRuleChangedEvent.getShardingRuleConfiguration(), getDataSources().keySet());\r\n+        }\r\n+    }\r\n+    \r\n+    /**\r\n+     * Renew disabled data source names.\r\n+     *\r\n+     * @param disabledStateChangedEvent disabled state changed event\r\n+     */\r\n+    @Subscribe\r\n+    public synchronized void renew(final DisabledStateChangedEvent disabledStateChangedEvent) {\r\n+        OrchestrationShardingSchema shardingSchema = disabledStateChangedEvent.getShardingSchema();\r\n+        if (getName().equals(shardingSchema.getSchemaName())) {\r\n+            for (MasterSlaveRule each : shardingRule.getMasterSlaveRules()) {\r\n+                ((OrchestrationMasterSlaveRule) each).updateDisabledDataSourceNames(shardingSchema.getDataSourceName(), disabledStateChangedEvent.isDisabled());\r\n+            }\r\n+        }\r\n+    }\r\n+    \r\n+    @Override\r\n+    public void refreshTableMetaData(final SQLStatementContext sqlStatementContext) throws SQLException {\r\n+        if (null == sqlStatementContext) {\r\n+            return;\r\n+        }\r\n+        if (sqlStatementContext.getSqlStatement() instanceof CreateTableStatement) {\r\n+            refreshTableMetaDataForCreateTable(sqlStatementContext);\r\n+        } else if (sqlStatementContext.getSqlStatement() instanceof AlterTableStatement) {\r\n+            refreshTableMetaDataForAlterTable(sqlStatementContext);\r\n+        } else if (sqlStatementContext.getSqlStatement() instanceof DropTableStatement) {\r\n+            refreshTableMetaDataForDropTable(sqlStatementContext);\r\n+        } else if (sqlStatementContext.getSqlStatement() instanceof CreateIndexStatement) {\r\n+            refreshTableMetaDataForCreateIndex(sqlStatementContext);\r\n+        } else if (sqlStatementContext.getSqlStatement() instanceof DropIndexStatement) {\r\n+            refreshTableMetaDataForDropIndex(sqlStatementContext);\r\n+        }\r\n+    }\r\n+    \r\n+    private void refreshTableMetaDataForCreateTable(final SQLStatementContext sqlStatementContext) throws SQLException {\r\n+        String tableName = sqlStatementContext.getTablesContext().getSingleTableName();\r\n+        getMetaData().getTables().put(tableName, getTableMetaDataInitializer(metaData.getDataSources()).load(tableName, shardingRule));\r\n+    }\r\n+    \r\n+    private void refreshTableMetaDataForAlterTable(final SQLStatementContext sqlStatementContext) throws SQLException {\r\n+        String tableName = sqlStatementContext.getTablesContext().getSingleTableName();\r\n+        getMetaData().getTables().put(tableName, getTableMetaDataInitializer(metaData.getDataSources()).load(tableName, shardingRule));\r\n+    }\r\n+    \r\n+    private void refreshTableMetaDataForDropTable(final SQLStatementContext sqlStatementContext) {\r\n+        for (String each : sqlStatementContext.getTablesContext().getTableNames()) {\r\n+            getMetaData().getTables().remove(each);\r\n+        }\r\n+    }\r\n+    \r\n+    private void refreshTableMetaDataForCreateIndex(final SQLStatementContext sqlStatementContext) {\r\n+        CreateIndexStatement createIndexStatement = (CreateIndexStatement) sqlStatementContext.getSqlStatement();\r\n+        if (null != createIndexStatement.getIndex()) {\r\n+            getMetaData().getTables().get(sqlStatementContext.getTablesContext().getSingleTableName()).getIndexes().add(createIndexStatement.getIndex().getName());\r\n+        }\r\n+    }\r\n+    \r\n+    private void refreshTableMetaDataForDropIndex(final SQLStatementContext sqlStatementContext) {\r\n+        DropIndexStatement dropIndexStatement = (DropIndexStatement) sqlStatementContext.getSqlStatement();\r\n+        Collection<String> indexNames = getIndexNames(dropIndexStatement);\r\n+        if (!sqlStatementContext.getTablesContext().isEmpty()) {\r\n+            getMetaData().getTables().get(sqlStatementContext.getTablesContext().getSingleTableName()).getIndexes().removeAll(indexNames);\r\n+        }\r\n+        for (String each : indexNames) {\r\n+            Optional<String> logicTableName = findLogicTableName(getMetaData().getTables(), each);\r\n+            if (logicTableName.isPresent()) {\r\n+                getMetaData().getTables().get(sqlStatementContext.getTablesContext().getSingleTableName()).getIndexes().remove(each);\r\n+            }\r\n+        }\r\n+    }\r\n+    \r\n+    private Collection<String> getIndexNames(final DropIndexStatement dropIndexStatement) {\r\n+        Collection<String> result = new LinkedList<>();\r\n+        for (IndexSegment each : dropIndexStatement.getIndexes()) {\r\n+            result.add(each.getName());\r\n+        }\r\n+        return result;\r\n+    }\r\n+    \r\n+    private Optional<String> findLogicTableName(final TableMetas tableMetas, final String logicIndexName) {\r\n+        for (String each : tableMetas.getAllTableNames()) {\r\n+            if (tableMetas.get(each).containsIndex(logicIndexName)) {\r\n+                return Optional.of(each);\r\n+            }\r\n+        }\r\n+        return Optional.absent();\r\n+    }\r\n+}\r",
                "deletions": 184
            },
            {
                "sha": "b8bd81951152a8f205a6824b3afdd3df880f776a",
                "filename": "sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/schema/impl/TransparentSchema.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/schema/impl/TransparentSchema.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/schema/impl/TransparentSchema.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/schema/impl/TransparentSchema.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -56,7 +56,7 @@ public SQLParseEngine getParseEngine() {\n     }\n     \n     private ShardingSphereMetaData createMetaData() throws SQLException {\n-        DataSourceMetas dataSourceMetas = new DataSourceMetas(getDataSourceURLs(getDataSources()), LogicSchemas.getInstance().getDatabaseType());\n+        DataSourceMetas dataSourceMetas = new DataSourceMetas(LogicSchemas.getInstance().getDatabaseType(), getDataSourceInfoMap(getDataSources()));\n         TableMetas tableMetas = new TableMetas(getTableMetaDataInitializer(dataSourceMetas).load(shardingRule));\n         return new ShardingSphereMetaData(dataSourceMetas, tableMetas);\n     }",
                "deletions": 1
            },
            {
                "sha": "e651546041b6711f397d2b12314945ad477514e0",
                "filename": "sharding-transaction/sharding-transaction-2pc/sharding-transaction-xa/sharding-transaction-xa-core/src/main/java/org/apache/shardingsphere/transaction/xa/jta/datasource/properties/dialect/MariaDBXADataSourceDefinition.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-transaction/sharding-transaction-2pc/sharding-transaction-xa/sharding-transaction-xa-core/src/main/java/org/apache/shardingsphere/transaction/xa/jta/datasource/properties/dialect/MariaDBXADataSourceDefinition.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-transaction/sharding-transaction-2pc/sharding-transaction-xa/sharding-transaction-xa-core/src/main/java/org/apache/shardingsphere/transaction/xa/jta/datasource/properties/dialect/MariaDBXADataSourceDefinition.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-transaction/sharding-transaction-2pc/sharding-transaction-xa/sharding-transaction-xa-core/src/main/java/org/apache/shardingsphere/transaction/xa/jta/datasource/properties/dialect/MariaDBXADataSourceDefinition.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -20,6 +20,7 @@\n import com.google.common.base.Optional;\n import org.apache.shardingsphere.core.config.DatabaseAccessConfiguration;\n import org.apache.shardingsphere.core.metadata.datasource.dialect.MariaDBDataSourceMetaData;\n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\n import org.apache.shardingsphere.transaction.xa.jta.datasource.properties.XADataSourceDefinition;\n \n import java.util.Collection;\n@@ -46,13 +47,14 @@ public String getDatabaseType() {\n     @Override\n     public Properties getXAProperties(final DatabaseAccessConfiguration databaseAccessConfiguration) {\n         Properties result = new Properties();\n-        MariaDBDataSourceMetaData dataSourceMetaData = new MariaDBDataSourceMetaData(databaseAccessConfiguration.getUrl());\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(databaseAccessConfiguration.getUrl(), null);\n+        MariaDBDataSourceMetaData dataSourceMetaData = new MariaDBDataSourceMetaData(dataSourceInfo);\n         result.setProperty(\"user\", databaseAccessConfiguration.getUsername());\n         result.setProperty(\"password\", Optional.fromNullable(databaseAccessConfiguration.getPassword()).or(\"\"));\n         result.setProperty(\"url\", databaseAccessConfiguration.getUrl());\n         result.setProperty(\"ServerName\", dataSourceMetaData.getHostName());\n         result.setProperty(\"port\", String.valueOf(dataSourceMetaData.getPort()));\n-        result.setProperty(\"DatabaseName\", dataSourceMetaData.getSchemaName());\n+        result.setProperty(\"DatabaseName\", dataSourceMetaData.getCatalog());\n         return result;\n     }\n }",
                "deletions": 2
            },
            {
                "sha": "230a11f6550997907f2a1520b93d76cd731dcc37",
                "filename": "sharding-transaction/sharding-transaction-2pc/sharding-transaction-xa/sharding-transaction-xa-core/src/main/java/org/apache/shardingsphere/transaction/xa/jta/datasource/properties/dialect/OracleXADataSourceDefinition.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-transaction/sharding-transaction-2pc/sharding-transaction-xa/sharding-transaction-xa-core/src/main/java/org/apache/shardingsphere/transaction/xa/jta/datasource/properties/dialect/OracleXADataSourceDefinition.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-transaction/sharding-transaction-2pc/sharding-transaction-xa/sharding-transaction-xa-core/src/main/java/org/apache/shardingsphere/transaction/xa/jta/datasource/properties/dialect/OracleXADataSourceDefinition.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-transaction/sharding-transaction-2pc/sharding-transaction-xa/sharding-transaction-xa-core/src/main/java/org/apache/shardingsphere/transaction/xa/jta/datasource/properties/dialect/OracleXADataSourceDefinition.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -20,6 +20,7 @@\n import com.google.common.base.Optional;\n import org.apache.shardingsphere.core.config.DatabaseAccessConfiguration;\n import org.apache.shardingsphere.core.metadata.datasource.dialect.OracleDataSourceMetaData;\n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\n import org.apache.shardingsphere.transaction.xa.jta.datasource.properties.XADataSourceDefinition;\n \n import java.util.Collection;\n@@ -46,12 +47,14 @@ public String getDatabaseType() {\n     @Override\n     public Properties getXAProperties(final DatabaseAccessConfiguration databaseAccessConfiguration) {\n         Properties result = new Properties();\n-        OracleDataSourceMetaData dataSourceMetaData = new OracleDataSourceMetaData(databaseAccessConfiguration.getUrl());\n+        \n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(databaseAccessConfiguration.getUrl(), null);\n+        OracleDataSourceMetaData dataSourceMetaData = new OracleDataSourceMetaData(dataSourceInfo);\n         result.setProperty(\"user\", databaseAccessConfiguration.getUsername());\n         result.setProperty(\"password\", Optional.fromNullable(databaseAccessConfiguration.getPassword()).or(\"\"));\n         result.setProperty(\"serverName\", dataSourceMetaData.getHostName());\n         result.setProperty(\"portNumber\", String.valueOf(dataSourceMetaData.getPort()));\n-        result.setProperty(\"databaseName\", dataSourceMetaData.getSchemaName());\n+        result.setProperty(\"databaseName\", dataSourceMetaData.getCatalog());\n         return result;\n     }\n }",
                "deletions": 2
            },
            {
                "sha": "c599955fa5f39eaa6d8c1b3ce5bcd3fd4661fa98",
                "filename": "sharding-transaction/sharding-transaction-2pc/sharding-transaction-xa/sharding-transaction-xa-core/src/main/java/org/apache/shardingsphere/transaction/xa/jta/datasource/properties/dialect/PostgreSQLXADataSourceDefinition.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-transaction/sharding-transaction-2pc/sharding-transaction-xa/sharding-transaction-xa-core/src/main/java/org/apache/shardingsphere/transaction/xa/jta/datasource/properties/dialect/PostgreSQLXADataSourceDefinition.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-transaction/sharding-transaction-2pc/sharding-transaction-xa/sharding-transaction-xa-core/src/main/java/org/apache/shardingsphere/transaction/xa/jta/datasource/properties/dialect/PostgreSQLXADataSourceDefinition.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-transaction/sharding-transaction-2pc/sharding-transaction-xa/sharding-transaction-xa-core/src/main/java/org/apache/shardingsphere/transaction/xa/jta/datasource/properties/dialect/PostgreSQLXADataSourceDefinition.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -20,6 +20,7 @@\n import com.google.common.base.Optional;\n import org.apache.shardingsphere.core.config.DatabaseAccessConfiguration;\n import org.apache.shardingsphere.core.metadata.datasource.dialect.PostgreSQLDataSourceMetaData;\n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\n import org.apache.shardingsphere.transaction.xa.jta.datasource.properties.XADataSourceDefinition;\n \n import java.util.Collection;\n@@ -46,12 +47,13 @@ public String getDatabaseType() {\n     @Override\n     public Properties getXAProperties(final DatabaseAccessConfiguration databaseAccessConfiguration) {\n         Properties result = new Properties();\n-        PostgreSQLDataSourceMetaData dataSourceMetaData = new PostgreSQLDataSourceMetaData(databaseAccessConfiguration.getUrl());\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(databaseAccessConfiguration.getUrl(), null);\n+        PostgreSQLDataSourceMetaData dataSourceMetaData = new PostgreSQLDataSourceMetaData(dataSourceInfo);\n         result.setProperty(\"user\", databaseAccessConfiguration.getUsername());\n         result.setProperty(\"password\", Optional.fromNullable(databaseAccessConfiguration.getPassword()).or(\"\"));\n         result.setProperty(\"serverName\", dataSourceMetaData.getHostName());\n         result.setProperty(\"portNumber\", String.valueOf(dataSourceMetaData.getPort()));\n-        result.setProperty(\"databaseName\", dataSourceMetaData.getSchemaName());\n+        result.setProperty(\"databaseName\", dataSourceMetaData.getCatalog());\n         return result;\n     }\n }",
                "deletions": 2
            },
            {
                "sha": "771e62657d687801946f69c9b6ee63a1a0750b38",
                "filename": "sharding-transaction/sharding-transaction-2pc/sharding-transaction-xa/sharding-transaction-xa-core/src/main/java/org/apache/shardingsphere/transaction/xa/jta/datasource/properties/dialect/SQLServerXADataSourceDefinition.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-transaction/sharding-transaction-2pc/sharding-transaction-xa/sharding-transaction-xa-core/src/main/java/org/apache/shardingsphere/transaction/xa/jta/datasource/properties/dialect/SQLServerXADataSourceDefinition.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/sharding-transaction/sharding-transaction-2pc/sharding-transaction-xa/sharding-transaction-xa-core/src/main/java/org/apache/shardingsphere/transaction/xa/jta/datasource/properties/dialect/SQLServerXADataSourceDefinition.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-transaction/sharding-transaction-2pc/sharding-transaction-xa/sharding-transaction-xa-core/src/main/java/org/apache/shardingsphere/transaction/xa/jta/datasource/properties/dialect/SQLServerXADataSourceDefinition.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -20,6 +20,7 @@\n import com.google.common.base.Optional;\n import org.apache.shardingsphere.core.config.DatabaseAccessConfiguration;\n import org.apache.shardingsphere.core.metadata.datasource.dialect.SQLServerDataSourceMetaData;\n+import org.apache.shardingsphere.spi.database.DataSourceInfo;\n import org.apache.shardingsphere.transaction.xa.jta.datasource.properties.XADataSourceDefinition;\n \n import java.util.Collection;\n@@ -46,12 +47,13 @@ public String getDatabaseType() {\n     @Override\n     public Properties getXAProperties(final DatabaseAccessConfiguration databaseAccessConfiguration) {\n         Properties result = new Properties();\n-        SQLServerDataSourceMetaData dataSourceMetaData = new SQLServerDataSourceMetaData(databaseAccessConfiguration.getUrl());\n+        DataSourceInfo dataSourceInfo = new DataSourceInfo(databaseAccessConfiguration.getUrl(), null);\n+        SQLServerDataSourceMetaData dataSourceMetaData = new SQLServerDataSourceMetaData(dataSourceInfo);\n         result.setProperty(\"user\", databaseAccessConfiguration.getUsername());\n         result.setProperty(\"password\", Optional.fromNullable(databaseAccessConfiguration.getPassword()).or(\"\"));\n         result.setProperty(\"serverName\", dataSourceMetaData.getHostName());\n         result.setProperty(\"portNumber\", String.valueOf(dataSourceMetaData.getPort()));\n-        result.setProperty(\"databaseName\", dataSourceMetaData.getSchemaName());\n+        result.setProperty(\"databaseName\", dataSourceMetaData.getCatalog());\n         return result;\n     }\n }",
                "deletions": 2
            },
            {
                "sha": "b763332cbb62ba2a9d64c7eec7e4fc74cc0469e2",
                "filename": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/selectitem/SelectItemAssert.java",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/2590964e351b864b3f53a0f45ff0a764c795f5bb/shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/selectitem/SelectItemAssert.java",
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/2590964e351b864b3f53a0f45ff0a764c795f5bb/shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/selectitem/SelectItemAssert.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/selectitem/SelectItemAssert.java?ref=2590964e351b864b3f53a0f45ff0a764c795f5bb",
                "patch": "@@ -55,6 +55,12 @@\n \n     private final SQLStatementAssertMessage assertMessage;\n \n+    /**\n+     * Assert predicate.\n+     * \n+     * @param actual actual where segment\n+     * @param expectedSelectItems expected select items\n+     */\n     public void assertSelectItems(final SelectItemsSegment actual, final ExpectedSelectItems expectedSelectItems) {\n         Collection<SelectItemSegment> actualItems = actual.getSelectItems();\n         assertThat(assertMessage.getFullAssertMessage(\"Select items size error: \"), actualItems.size(), is(expectedSelectItems.getSize()));",
                "deletions": 0
            }
        ],
        "patched_files": [
            "MySQLDataSourceMetaData.java",
            "OracleXADataSourceDefinition.java",
            "DataSourceMetaData.java",
            "PostgreSQLXADataSourceDefinition.java",
            "TableMetaDataLoader.java",
            "OracleDataSourceMetaData.java",
            "LogicSchema.java",
            "MasterSlaveSchema.java",
            "DataSourceMetas.java",
            "DatabaseType.java",
            "PostgreSQLDatabaseType.java",
            "SQLExecuteCallback.java",
            "SQLServerDatabaseType.java",
            "MariaDBDatabaseType.java",
            "SelectItemAssert.java",
            "SQL92DatabaseType.java",
            "BaseIT.java",
            "TransparentSchema.java",
            "ShardingRuntimeContext.java",
            "H2DatabaseType.java",
            "DataSourceInfo.java",
            "ShardingSchema.java",
            "MariaDBXADataSourceDefinition.java",
            "PostgreSQLDataSourceMetaData.java",
            "MySQLDatabaseType.java",
            "SQL92DataSourceMetaData.java",
            "EncryptSchema.java",
            "OracleDatabaseType.java",
            "MariaDBDataSourceMetaData.java",
            "SQLServerXADataSourceDefinition.java",
            "H2DataSourceMetaData.java",
            "SQLServerDataSourceMetaData.java"
        ],
        "unit_tests": [
            "SQL92DatabaseTypeTest.java",
            "SQLServerDataSourceMetaDataTest.java",
            "MySQLDataSourceMetaDataTest.java",
            "ShardingSphereDataSourceMetaDataTest.java",
            "H2DataSourceMetaDataTest.java",
            "SQL92DataSourceMetaDataTest.java",
            "MariaDBXADataSourceDefinitionTest.java",
            "OracleDatabaseTypeTest.java",
            "SQLServerXADataSourceDefinitionTest.java",
            "OracleXADataSourceDefinitionTest.java",
            "PostgreSQLDataSourceMetaDataTest.java",
            "OracleDataSourceMetaDataTest.java",
            "MySQLDatabaseTypeTest.java",
            "PostgreSQLDatabaseTypeTest.java",
            "PostgreSQLXADataSourceDefinitionTest.java",
            "H2DatabaseTypeTest.java",
            "SQLServerDatabaseTypeTest.java",
            "AbstractSQLRouteTest.java"
        ]
    }
}