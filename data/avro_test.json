{
    "avro_9075618": {
        "repo": "avro",
        "message": "AVRO-759. Java: Fix NullPointerException when some but not all fields are aliased.  Contributed by Xiaolu Ye.\n\ngit-svn-id: https://svn.apache.org/repos/asf/avro/trunk@1071083 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/avro/commit/9075618bf7890a8761107fa96da92dedf73d8a3e",
        "parent": "https://github.com/apache/avro/commit/c6469bfc32c0ebd53439b42feebc28439ac04506",
        "bug_id": "avro_9075618",
        "file": [
            {
                "sha": "6e3b3704796636aeeec35ef7270678c6bc9f8f2a",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/avro/blob/9075618bf7890a8761107fa96da92dedf73d8a3e/CHANGES.txt",
                "raw_url": "https://github.com/apache/avro/raw/9075618bf7890a8761107fa96da92dedf73d8a3e/CHANGES.txt",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/CHANGES.txt?ref=9075618bf7890a8761107fa96da92dedf73d8a3e",
                "patch": "@@ -212,6 +212,9 @@ Avro 1.5.0 (unreleased)\n     over stateful connections, permitting interoperability with\n     Python and Ruby, which drop the one-way message attribute. (cutting)\n \n+    AVRO-759. Java: Fix NullPointerException when some but not all\n+    fields are aliased. (Xiaolu Ye via cutting)\n+\n Avro 1.4.1 (13 October 2010)\n \n   NEW FEATURES",
                "deletions": 0
            },
            {
                "sha": "d69cb51aaf2a3a06741d727a36f4e132c4771418",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "blob_url": "https://github.com/apache/avro/blob/9075618bf7890a8761107fa96da92dedf73d8a3e/lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "raw_url": "https://github.com/apache/avro/raw/9075618bf7890a8761107fa96da92dedf73d8a3e/lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/Schema.java?ref=9075618bf7890a8761107fa96da92dedf73d8a3e",
                "patch": "@@ -1253,7 +1253,10 @@ private static void getAliases(Schema schema,\n     Map<String,String> recordAliases = fieldAliases.get(record);\n     if (recordAliases == null)\n       return field;\n-    return recordAliases.get(field);\n+    String alias = recordAliases.get(field);\n+    if (alias == null)\n+      return field;\n+    return alias;\n   }\n \n   /**",
                "deletions": 1
            },
            {
                "sha": "6585230caadafaf11bfc74578346d70b3d2ea48d",
                "filename": "lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java",
                "blob_url": "https://github.com/apache/avro/blob/9075618bf7890a8761107fa96da92dedf73d8a3e/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java",
                "raw_url": "https://github.com/apache/avro/raw/9075618bf7890a8761107fa96da92dedf73d8a3e/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java?ref=9075618bf7890a8761107fa96da92dedf73d8a3e",
                "patch": "@@ -482,10 +482,12 @@ public void testFieldDocs() {\n \n   @Test\n   public void testAliases() throws Exception {\n-    String t1 = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"a.b\\\",\"\n-      +\"\\\"fields\\\":[{\\\"name\\\":\\\"f\\\",\\\"type\\\":\\\"long\\\"}]}\";\n+    String t1 = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"a.b\\\",\\\"fields\\\":[\"\n+      +\"{\\\"name\\\":\\\"f\\\",\\\"type\\\":\\\"long\\\"},\"\n+      +\"{\\\"name\\\":\\\"h\\\",\\\"type\\\":\\\"int\\\"}]}\";\n     String t2 = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"x.y\\\",\\\"aliases\\\":[\\\"a.b\\\"],\"\n-      +\"\\\"fields\\\":[{\\\"name\\\":\\\"g\\\",\\\"type\\\":\\\"long\\\",\\\"aliases\\\":[\\\"f\\\"]}]}\";\n+      +\"\\\"fields\\\":[{\\\"name\\\":\\\"g\\\",\\\"type\\\":\\\"long\\\",\\\"aliases\\\":[\\\"f\\\"]},\"\n+      +\"{\\\"name\\\":\\\"h\\\",\\\"type\\\":\\\"int\\\"}]}\";\n     Schema s1 = Schema.parse(t1);\n     Schema s2 = Schema.parse(t2);\n     Schema s3 = Schema.applyAliases(s1,s2);",
                "deletions": 3
            }
        ],
        "patched_files": [
            "Schema.java"
        ],
        "unit_tests": [
            "TestSchema.java"
        ]
    },
    "avro_2564afe": {
        "repo": "avro",
        "message": "AVRO-1780: Java: Fix NPE in tools. Contributed by Tom White.\n\nChanges for AVRO-1728 moved NOTICE, which was used to create the\nno-argument output for Java's avro-tools. Using the new location fixed\nthe NPE and this also includes an update to show just the top of NOTICE\nsince it is now much longer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/avro/trunk@1724287 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/avro/commit/2564afeb1fdc4792603f7ddc1a7b3b347d05b54e",
        "parent": "https://github.com/apache/avro/commit/080cd772f235a8f490928ce512aa62089af0f203",
        "bug_id": "avro_2564afe",
        "file": [
            {
                "sha": "93c827ccd7d7934095ee0c5da25c0e8b3313e698",
                "filename": "lang/java/tools/src/main/java/org/apache/avro/tool/Main.java",
                "blob_url": "https://github.com/apache/avro/blob/2564afeb1fdc4792603f7ddc1a7b3b347d05b54e/lang/java/tools/src/main/java/org/apache/avro/tool/Main.java",
                "raw_url": "https://github.com/apache/avro/raw/2564afeb1fdc4792603f7ddc1a7b3b347d05b54e/lang/java/tools/src/main/java/org/apache/avro/tool/Main.java",
                "status": "modified",
                "changes": 15,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/tools/src/main/java/org/apache/avro/tool/Main.java?ref=2564afeb1fdc4792603f7ddc1a7b3b347d05b54e",
                "patch": "@@ -17,6 +17,8 @@\n  */\n package org.apache.avro.tool;\n \n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n import java.util.Arrays;\n import java.util.Map;\n import java.util.TreeMap;\n@@ -89,7 +91,7 @@ private int run(String[] args) throws Exception {\n     System.err.print(\"Version \");\n     printStream(Main.class.getClassLoader().getResourceAsStream(\"VERSION.txt\"));\n     System.err.print(\" of \");\n-    printStream(Main.class.getClassLoader().getResourceAsStream(\"NOTICE.txt\"));\n+    printHead(Main.class.getClassLoader().getResourceAsStream(\"META-INF/NOTICE\"), 5);\n     System.err.println(\"----------------\");\n \n     System.err.println(\"Available tools:\");\n@@ -106,4 +108,15 @@ private static void printStream(InputStream in) throws Exception {\n       System.err.write(buffer, 0, i);\n   }\n \n+  private static void printHead(InputStream in, int lines) throws Exception {\n+    BufferedReader r = new BufferedReader(new InputStreamReader(in));\n+    for (int i = 0; i < lines; i++) {\n+      String line = r.readLine();\n+      if (line == null) {\n+        break;\n+      }\n+      System.err.println(line);\n+    }\n+  }\n+\n }",
                "deletions": 1
            }
        ],
        "patched_files": [
            "Main.java"
        ],
        "unit_tests": [
            "TestMain.java"
        ]
    },
    "avro_a02c5c2": {
        "repo": "avro",
        "message": "AVRO-780. Java: Fix a NullPointerException with reflect data when a union contains an array and null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/avro/trunk@1087136 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/avro/commit/a02c5c2ce3edae38b70648b177a78cc7a64a7b25",
        "parent": "https://github.com/apache/avro/commit/7784b56a4aeda94de1de3bbe12a468108b7b8e0e",
        "bug_id": "avro_a02c5c2",
        "file": [
            {
                "sha": "e82fedaac1bd40a3059b8f089bd69995f54beed4",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/avro/blob/a02c5c2ce3edae38b70648b177a78cc7a64a7b25/CHANGES.txt",
                "raw_url": "https://github.com/apache/avro/raw/a02c5c2ce3edae38b70648b177a78cc7a64a7b25/CHANGES.txt",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/CHANGES.txt?ref=a02c5c2ce3edae38b70648b177a78cc7a64a7b25",
                "patch": "@@ -29,6 +29,9 @@ Avro 1.5.1 (unreleased)\n \n     AVRO-786. Java: Fix equals() to work on objects containing maps. (cutting)\n \n+    AVRO-780. Java: Fix a NullPointerException with reflect data when\n+    a union contains an array and null. (cutting)\n+\n Avro 1.5.0 (10 March 2011)\n \n   INCOMPATIBLE CHANGES",
                "deletions": 0
            },
            {
                "sha": "8a6585e35d9740e70e19f1c6ac88c37b3c9c362c",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java",
                "blob_url": "https://github.com/apache/avro/blob/a02c5c2ce3edae38b70648b177a78cc7a64a7b25/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java",
                "raw_url": "https://github.com/apache/avro/raw/a02c5c2ce3edae38b70648b177a78cc7a64a7b25/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java?ref=a02c5c2ce3edae38b70648b177a78cc7a64a7b25",
                "patch": "@@ -106,6 +106,7 @@ protected boolean isRecord(Object datum) {\n \n   @Override\n   protected boolean isArray(Object datum) {\n+    if (datum == null) return false;\n     return (datum instanceof Collection) || datum.getClass().isArray();\n   }\n ",
                "deletions": 0
            },
            {
                "sha": "17248ac3c7e5d585dbafba9ab94a818f5c991300",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectDatumWriter.java",
                "blob_url": "https://github.com/apache/avro/blob/a02c5c2ce3edae38b70648b177a78cc7a64a7b25/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectDatumWriter.java",
                "raw_url": "https://github.com/apache/avro/raw/a02c5c2ce3edae38b70648b177a78cc7a64a7b25/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectDatumWriter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectDatumWriter.java?ref=a02c5c2ce3edae38b70648b177a78cc7a64a7b25",
                "patch": "@@ -103,7 +103,7 @@ protected void write(Schema schema, Object datum, Encoder out)\n     } catch (NullPointerException e) {            // improve error message\n       NullPointerException result =\n         new NullPointerException(\"in \"+schema.getFullName()+\" \"+e.getMessage());\n-      result.initCause(e);\n+      result.initCause(e.getCause() == null ? e : e.getCause());\n       throw result;\n     }\n   }",
                "deletions": 1
            },
            {
                "sha": "f6856c77e39ddf2f99163cd382c471591dfce574",
                "filename": "lang/java/avro/src/test/java/org/apache/avro/TestReflect.java",
                "blob_url": "https://github.com/apache/avro/blob/a02c5c2ce3edae38b70648b177a78cc7a64a7b25/lang/java/avro/src/test/java/org/apache/avro/TestReflect.java",
                "raw_url": "https://github.com/apache/avro/raw/a02c5c2ce3edae38b70648b177a78cc7a64a7b25/lang/java/avro/src/test/java/org/apache/avro/TestReflect.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/test/java/org/apache/avro/TestReflect.java?ref=a02c5c2ce3edae38b70648b177a78cc7a64a7b25",
                "patch": "@@ -550,6 +550,14 @@ public void testReflectWithinGeneric() throws Exception {\n     checkBinary(schema, record);\n   }\n \n+  /** Test union of null and an array. */\n+  @Test\n+  public void testNullArray() throws Exception {\n+    String json = \"[{\\\"type\\\":\\\"array\\\", \\\"items\\\": \\\"long\\\"}, \\\"null\\\"]\";\n+    Schema schema = Schema.parse(json);\n+    checkBinary(schema, null);\n+  }\n+\n   public static void checkBinary(Schema schema, Object datum)\n     throws IOException {\n     ReflectDatumWriter<Object> writer = new ReflectDatumWriter<Object>(schema);",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ReflectData.java",
            "ReflectDatumWriter.java"
        ],
        "unit_tests": [
            "TestReflect.java"
        ]
    },
    "avro_60d9ef0": {
        "repo": "avro",
        "message": "AVRO-1655. Java: Fix NPE in RecordSchema#toString. Contributed by Lars Francke.\n\nThis also adds a variant of Schema.createRecord with a field list to\nallow callers to create valid record schemas in a single call.\n\ngit-svn-id: https://svn.apache.org/repos/asf/avro/trunk@1674398 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/avro/commit/60d9ef0ad24d91735210830b2481e884ec45c9e7",
        "parent": "https://github.com/apache/avro/commit/630562a0b16ae73c8cb8d85da723bca6b28de6db",
        "bug_id": "avro_60d9ef0",
        "file": [
            {
                "sha": "e0ce5c79e73ccec11d59d9b41080dc2132822825",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/avro/blob/60d9ef0ad24d91735210830b2481e884ec45c9e7/CHANGES.txt",
                "raw_url": "https://github.com/apache/avro/raw/60d9ef0ad24d91735210830b2481e884ec45c9e7/CHANGES.txt",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/CHANGES.txt?ref=60d9ef0ad24d91735210830b2481e884ec45c9e7",
                "patch": "@@ -68,6 +68,9 @@ Trunk (not yet released)\n     AVRO-1628. Java: Add Schema#createUnion(Schema ...) convenience method.\n     (Cl\u00e9ment Mahtieu via cutting)\n \n+    AVRO-1655. Java: Add Schema.createRecord with field list.\n+    (Lars Francke via blue)\n+\n   BUG FIXES\n \n     AVRO-1553. Java: MapReduce never uses MapOutputValueSchema (tomwhite)\n@@ -131,6 +134,9 @@ Trunk (not yet released)\n     AVRO-1652. Java: Do not warn or validate defaults if validation is off.\n     (Michael D'Angelo via blue)\n \n+    AVRO-1655. Java: Fix NPE in RecordSchema#toString when fields are null.\n+    (Lars Francke via blue)\n+\n Avro 1.7.7 (23 July 2014)\n \n   NEW FEATURES",
                "deletions": 0
            },
            {
                "sha": "1f2dd8fa7ca862b542e01497bfb3ee7ebf982799",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "blob_url": "https://github.com/apache/avro/blob/60d9ef0ad24d91735210830b2481e884ec45c9e7/lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "raw_url": "https://github.com/apache/avro/raw/60d9ef0ad24d91735210830b2481e884ec45c9e7/lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "status": "modified",
                "changes": 22,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/Schema.java?ref=60d9ef0ad24d91735210830b2481e884ec45c9e7",
                "patch": "@@ -151,6 +151,12 @@ public static Schema createRecord(String name, String doc, String namespace,\n     return new RecordSchema(new Name(name, namespace), doc, isError);\n   }\n \n+  /** Create a named record schema with fields already set. */\n+  public static Schema createRecord(String name, String doc, String namespace,\n+                                    boolean isError, List<Field> fields) {\n+    return new RecordSchema(new Name(name, namespace), doc, isError, fields);\n+  }\n+\n   /** Create an enum schema. */\n   public static Schema createEnum(String name, String doc, String namespace,\n                                   List<String> values) {\n@@ -594,6 +600,14 @@ public RecordSchema(Name name, String doc, boolean isError) {\n       super(Type.RECORD, name, doc);\n       this.isError = isError;\n     }\n+\n+    public RecordSchema(Name name, String doc, boolean isError,\n+                        List<Field> fields) {\n+      super(Type.RECORD, name, doc);\n+      this.isError = isError;\n+      setFields(fields);\n+    }\n+\n     public boolean isError() { return isError; }\n \n     @Override\n@@ -671,8 +685,12 @@ void toJson(Names names, JsonGenerator gen) throws IOException {\n       names.space = name.space;                   // set default namespace\n       if (getDoc() != null)\n         gen.writeStringField(\"doc\", getDoc());\n-      gen.writeFieldName(\"fields\");\n-      fieldsToJson(names, gen);\n+\n+      if (fields != null) {\n+        gen.writeFieldName(\"fields\");\n+        fieldsToJson(names, gen);\n+      }\n+\n       writeProps(gen);\n       aliasesToJson(gen);\n       gen.writeEndObject();",
                "deletions": 2
            },
            {
                "sha": "ba2cab49d72b8ce9c1619994a9355daf42c15f1f",
                "filename": "lang/java/avro/src/test/java/org/apache/avro/TestSchema.java",
                "blob_url": "https://github.com/apache/avro/blob/60d9ef0ad24d91735210830b2481e884ec45c9e7/lang/java/avro/src/test/java/org/apache/avro/TestSchema.java",
                "raw_url": "https://github.com/apache/avro/raw/60d9ef0ad24d91735210830b2481e884ec45c9e7/lang/java/avro/src/test/java/org/apache/avro/TestSchema.java",
                "status": "modified",
                "changes": 25,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/test/java/org/apache/avro/TestSchema.java?ref=60d9ef0ad24d91735210830b2481e884ec45c9e7",
                "patch": "@@ -75,4 +75,29 @@ public void testCreateUnionVarargs() {\n     Schema schema = Schema.createUnion(Schema.create(Type.NULL), Schema.create(Type.LONG));\n     assertEquals(expected, schema);\n   }\n+\n+  @Test\n+  public void testEmptyRecordSchema() {\n+    Schema schema = Schema.createRecord(\"foobar\", null, null, false);\n+    String schemaString = schema.toString();\n+    assertNotNull(schemaString);\n+  }\n+\n+  @Test\n+  public void testSchemaWithFields() {\n+    List<Field> fields = new ArrayList<Field>();\n+    fields.add(new Field(\"field_name1\", Schema.create(Type.NULL), null, null));\n+    fields.add(new Field(\"field_name2\", Schema.create(Type.INT), null, null));\n+    Schema schema = Schema.createRecord(\"foobar\", null, null, false, fields);\n+    String schemaString = schema.toString();\n+    assertNotNull(schemaString);\n+    assertEquals(2, schema.getFields().size());\n+  }\n+\n+  @Test(expected = NullPointerException.class)\n+  public void testSchemaWithNullFields() {\n+    Schema.createRecord(\"foobar\", null, null, false, null);\n+  }\n+\n+\n }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "Schema.java"
        ],
        "unit_tests": [
            "TestSchema.java"
        ]
    },
    "avro_196777c": {
        "repo": "avro",
        "message": "AVRO-2383: NPE during Schema.applyAliases (#510)",
        "commit": "https://github.com/apache/avro/commit/196777ccc2e698e9dba153d48a08ef4b68b144a1",
        "parent": "https://github.com/apache/avro/commit/3f44b7c22e355e5fde239fd16b5105cf5804b70b",
        "bug_id": "avro_196777c",
        "file": [
            {
                "sha": "f4dda2686b5b9f1422b9c2b50c352e65b4a9a429",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "blob_url": "https://github.com/apache/avro/blob/196777ccc2e698e9dba153d48a08ef4b68b144a1/lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "raw_url": "https://github.com/apache/avro/raw/196777ccc2e698e9dba153d48a08ef4b68b144a1/lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/Schema.java?ref=196777ccc2e698e9dba153d48a08ef4b68b144a1",
                "patch": "@@ -886,7 +886,7 @@ public boolean equals(Object o) {\n       boolean first = seen.isEmpty();\n       try {\n         seen.add(here);\n-        return fields.equals(((RecordSchema) o).fields);\n+        return Objects.equals(fields, that.fields);\n       } finally {\n         if (first)\n           seen.clear();",
                "deletions": 1
            },
            {
                "sha": "cd5413a5fb945eff5a88ae0ec0aafc83ce9a6bef",
                "filename": "lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java",
                "blob_url": "https://github.com/apache/avro/blob/196777ccc2e698e9dba153d48a08ef4b68b144a1/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java",
                "raw_url": "https://github.com/apache/avro/raw/196777ccc2e698e9dba153d48a08ef4b68b144a1/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java",
                "status": "modified",
                "changes": 15,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java?ref=196777ccc2e698e9dba153d48a08ef4b68b144a1",
                "patch": "@@ -594,6 +594,21 @@ public void testAliases() {\n     assertEquals(s2, s3);\n   }\n \n+  @Test\n+  public void testAliasesSelfReferential() {\n+    String t1 = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"a\\\",\\\"fields\\\":[{\\\"name\\\":\\\"f\\\",\\\"type\\\":{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"C\\\",\\\"fields\\\":[{\\\"name\\\":\\\"c\\\",\\\"type\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":[\\\"null\\\",\\\"C\\\"]}}]}}]}\";\n+    String t2 = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"x\\\",\\\"fields\\\":[{\\\"name\\\":\\\"f\\\",\\\"type\\\":{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"C\\\",\\\"fields\\\":[{\\\"name\\\":\\\"d\\\",\\\"type\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":[\\\"null\\\",\\\"C\\\"]},\\\"aliases\\\":[\\\"c\\\"]}]}}],\\\"aliases\\\":[\\\"a\\\"]}\";\n+    Schema s1 = new Schema.Parser().parse(t1);\n+    Schema s2 = new Schema.Parser().parse(t2);\n+\n+    assertEquals(s1.getAliases(), Collections.emptySet());\n+    assertEquals(s2.getAliases(), Collections.singleton(\"a\"));\n+\n+    Schema s3 = Schema.applyAliases(s1, s2);\n+    assertNotSame(s2, s3);\n+    assertEquals(s2, s3);\n+  }\n+\n   private static void check(File dst, String schemaJson, String defaultJson, Object defaultValue) throws Exception {\n     check(dst, schemaJson, defaultJson, defaultValue, true);\n   }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "Schema.java"
        ],
        "unit_tests": [
            "TestSchema.java"
        ]
    },
    "avro_a7a43da": {
        "repo": "avro",
        "message": "AVRO-2120: Fix NullPointerException thrown by Schema.Parser#parse(\"\")",
        "commit": "https://github.com/apache/avro/commit/a7a43da6de9bd44e57e057319127c64b2fca56a0",
        "parent": "https://github.com/apache/avro/commit/a3e05bee1c81b54eed8cb37b278652cf80666121",
        "bug_id": "avro_a7a43da",
        "file": [
            {
                "sha": "04c49235cd5c6b36b9c2657862c8da10489543af",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/avro/blob/a7a43da6de9bd44e57e057319127c64b2fca56a0/CHANGES.txt",
                "raw_url": "https://github.com/apache/avro/raw/a7a43da6de9bd44e57e057319127c64b2fca56a0/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/CHANGES.txt?ref=a7a43da6de9bd44e57e057319127c64b2fca56a0",
                "patch": "@@ -220,6 +220,8 @@ Trunk (not yet released)\n     AVRO-1485: Specification says Record field type can be record name but implementation allows any named type.\n     (Nandor Kollar via gabor)\n \n+    AVRO-2120: Fix NullPointerException thrown by Schema.Parser#parse(\"\")\n+\n Avro 1.8.1 (14 May 2016)\n \n   INCOMPATIBLE CHANGES",
                "deletions": 0
            },
            {
                "sha": "97aed83cc84c462b444920be6784734163f8703c",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "blob_url": "https://github.com/apache/avro/blob/a7a43da6de9bd44e57e057319127c64b2fca56a0/lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "raw_url": "https://github.com/apache/avro/raw/a7a43da6de9bd44e57e057319127c64b2fca56a0/lang/java/avro/src/main/java/org/apache/avro/Schema.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/Schema.java?ref=a7a43da6de9bd44e57e057319127c64b2fca56a0",
                "patch": "@@ -1225,6 +1225,9 @@ private static boolean isValidDefault(Schema schema, JsonNode defaultValue) {\n \n   /** @see #parse(String) */\n   static Schema parse(JsonNode schema, Names names) {\n+    if (schema == null) {\n+      throw new SchemaParseException(\"Cannot parse <null> schema\");\n+    }\n     if (schema.isTextual()) {                     // name\n       Schema result = names.get(schema.getTextValue());\n       if (result == null)",
                "deletions": 0
            },
            {
                "sha": "25858b5f9e6bf4c9c80b19e51ee8bb28a44e3546",
                "filename": "lang/java/avro/src/test/java/org/apache/avro/TestSchema.java",
                "blob_url": "https://github.com/apache/avro/blob/a7a43da6de9bd44e57e057319127c64b2fca56a0/lang/java/avro/src/test/java/org/apache/avro/TestSchema.java",
                "raw_url": "https://github.com/apache/avro/raw/a7a43da6de9bd44e57e057319127c64b2fca56a0/lang/java/avro/src/test/java/org/apache/avro/TestSchema.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/test/java/org/apache/avro/TestSchema.java?ref=a7a43da6de9bd44e57e057319127c64b2fca56a0",
                "patch": "@@ -83,6 +83,11 @@ public void testEmptyRecordSchema() {\n     assertNotNull(schemaString);\n   }\n \n+  @Test(expected = SchemaParseException.class)\n+  public void testParseEmptySchema() {\n+    Schema schema = new Schema.Parser().parse(\"\");\n+  }\n+\n   @Test\n   public void testSchemaWithFields() {\n     List<Field> fields = new ArrayList<>();",
                "deletions": 0
            }
        ],
        "patched_files": [
            "Schema.java"
        ],
        "unit_tests": [
            "TestSchema.java"
        ]
    },
    "avro_152fa09": {
        "repo": "avro",
        "message": "AVRO-1967: Java: Fix NPE when calling getXyzBuilder on instance where the xyz is null",
        "commit": "https://github.com/apache/avro/commit/152fa0954bb74e8e1e627751ccab55ada4f5b375",
        "parent": "https://github.com/apache/avro/commit/a53a4fd10072471aa7c8170499a10792e61e0d95",
        "bug_id": "avro_152fa09",
        "file": [
            {
                "sha": "d5341e8905cfaf43b09732f958d21ea7598bc84b",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/avro/blob/152fa0954bb74e8e1e627751ccab55ada4f5b375/CHANGES.txt",
                "raw_url": "https://github.com/apache/avro/raw/152fa0954bb74e8e1e627751ccab55ada4f5b375/CHANGES.txt",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/CHANGES.txt?ref=152fa0954bb74e8e1e627751ccab55ada4f5b375",
                "patch": "@@ -106,6 +106,9 @@ Trunk (not yet released)\n \n     AVRO-1966: Java: Fix NPE When copying builder with nullable record. (Niels Basjes)\n \n+    AVRO-1967: Java: Fix NPE when calling getXyzBuilder on instance where the xyz is null\n+    (Niels Basjes)\n+\n Avro 1.8.1 (14 May 2016)\n \n   INCOMPATIBLE CHANGES",
                "deletions": 0
            },
            {
                "sha": "ccec4b60c1d666c52a71912b04d6d705f944c5c1",
                "filename": "lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm",
                "blob_url": "https://github.com/apache/avro/blob/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm",
                "raw_url": "https://github.com/apache/avro/raw/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm",
                "status": "modified",
                "changes": 14,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm?ref=152fa0954bb74e8e1e627751ccab55ada4f5b375",
                "patch": "@@ -221,7 +221,11 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or\n    * @return A new ${this.mangle($schema.getName())} RecordBuilder\n    */\n   public static #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder newBuilder(#if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder other) {\n-    return new #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder(other);\n+    if (other == null) {\n+      return new #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder();\n+    } else {\n+      return new #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder(other);\n+    }\n   }\n \n   /**\n@@ -230,7 +234,11 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or\n    * @return A new ${this.mangle($schema.getName())} RecordBuilder\n    */\n   public static #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder newBuilder(#if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())} other) {\n-    return new #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder(other);\n+    if (other == null) {\n+      return new #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder();\n+    } else {\n+      return new #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder(other);\n+    }\n   }\n \n   /**\n@@ -279,7 +287,7 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or\n      * @param other The existing instance to copy.\n      */\n     private Builder(#if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())} other) {\n-      #if ($schema.isError())super(other)#else\n+#if ($schema.isError())      super(other)#else\n       super(SCHEMA$)#end;\n #foreach ($field in $schema.getFields())\n       if (isValidValue(fields()[$field.pos()], other.${this.mangle($field.name(), $schema.isError())})) {",
                "deletions": 3
            },
            {
                "sha": "6a69833698946606e34fb1f344fa8fb27b97d49d",
                "filename": "lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java",
                "blob_url": "https://github.com/apache/avro/blob/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java",
                "raw_url": "https://github.com/apache/avro/raw/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java",
                "status": "modified",
                "changes": 77,
                "additions": 77,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java?ref=152fa0954bb74e8e1e627751ccab55ada4f5b375",
                "patch": "@@ -27,6 +27,7 @@\n import static org.apache.avro.test.nullable.Nullable.*;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n public class TestSpecificBuilderTree {\n@@ -283,4 +284,80 @@ public void copyBuilderWithNullables() {\n     builderCopy.getNullableRecordBuilder();\n   }\n \n+  @Test\n+  public void copyBuilderWithNullablesAndSetToNull() {\n+    // Create builder with all values default to null, yet unset.\n+    RecordWithNullables.Builder builder = RecordWithNullables.newBuilder();\n+\n+    // Ensure all values have not been set\n+    assertFalse(builder.hasNullableRecordBuilder());\n+    assertFalse(builder.hasNullableRecord());\n+    assertFalse(builder.hasNullableString());\n+    assertFalse(builder.hasNullableLong  ());\n+    assertFalse(builder.hasNullableInt   ());\n+    assertFalse(builder.hasNullableMap   ());\n+    assertFalse(builder.hasNullableArray ());\n+\n+    // Set all values to null\n+    builder.setNullableRecordBuilder(null);\n+    builder.setNullableRecord(null);\n+    builder.setNullableString(null);\n+    builder.setNullableLong  (null);\n+    builder.setNullableInt   (null);\n+    builder.setNullableMap   (null);\n+    builder.setNullableArray (null);\n+\n+    // A Builder remains False because it is null\n+    assertFalse(builder.hasNullableRecordBuilder());\n+\n+    // Ensure all values have been set\n+    assertTrue(builder.hasNullableRecord());\n+    assertTrue(builder.hasNullableString());\n+    assertTrue(builder.hasNullableLong  ());\n+    assertTrue(builder.hasNullableInt   ());\n+    assertTrue(builder.hasNullableMap   ());\n+    assertTrue(builder.hasNullableArray ());\n+\n+    // Implicitly create a builder instance and clear the actual value.\n+    builder.getNullableRecordBuilder();\n+    assertTrue(builder.hasNullableRecordBuilder());\n+    assertFalse(builder.hasNullableRecord());\n+\n+    // Create a copy of this builder.\n+    RecordWithNullables.Builder builderCopy = RecordWithNullables.newBuilder(builder);\n+\n+    // Ensure all values are still the same\n+    assertTrue(builder.hasNullableRecordBuilder());\n+    assertFalse(builder.hasNullableRecord());\n+    assertTrue(builder.hasNullableString());\n+    assertTrue(builder.hasNullableLong  ());\n+    assertTrue(builder.hasNullableInt   ());\n+    assertTrue(builder.hasNullableMap   ());\n+    assertTrue(builder.hasNullableArray ());\n+  }\n+\n+  @Test\n+  public void getBuilderForRecordWithNullRecord() {\n+    // Create a record with all nullable fields set to the default value : null\n+    RecordWithNullables recordWithNullables = RecordWithNullables.newBuilder().build();\n+\n+    // Now create a Builder using this record as the base\n+    RecordWithNullables.Builder builder = RecordWithNullables.newBuilder(recordWithNullables);\n+\n+    // In the past this caused an NPE\n+    builder.getNullableRecordBuilder();\n+  }\n+\n+  @Test\n+  public void getBuilderForNullRecord() {\n+    // In the past this caused an NPE\n+    RecordWithNullables.newBuilder((RecordWithNullables)null);\n+  }\n+\n+  @Test\n+  public void getBuilderForNullBuilder() {\n+    // In the past this caused an NPE\n+    RecordWithNullables.newBuilder((RecordWithNullables.Builder)null);\n+  }\n+\n }",
                "deletions": 0
            },
            {
                "sha": "4dff5ef5053974adb6a4dbce785a0604224df27e",
                "filename": "lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java",
                "blob_url": "https://github.com/apache/avro/blob/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java",
                "raw_url": "https://github.com/apache/avro/raw/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java",
                "status": "modified",
                "changes": 14,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java?ref=152fa0954bb74e8e1e627751ccab55ada4f5b375",
                "patch": "@@ -182,7 +182,11 @@ public void setPosition(java.util.List<avro.examples.baseball.Position> value) {\n    * @return A new Player RecordBuilder\n    */\n   public static avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player.Builder other) {\n-    return new avro.examples.baseball.Player.Builder(other);\n+    if (other == null) {\n+      return new avro.examples.baseball.Player.Builder();\n+    } else {\n+      return new avro.examples.baseball.Player.Builder(other);\n+    }\n   }\n \n   /**\n@@ -191,7 +195,11 @@ public void setPosition(java.util.List<avro.examples.baseball.Position> value) {\n    * @return A new Player RecordBuilder\n    */\n   public static avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player other) {\n-    return new avro.examples.baseball.Player.Builder(other);\n+    if (other == null) {\n+      return new avro.examples.baseball.Player.Builder();\n+    } else {\n+      return new avro.examples.baseball.Player.Builder(other);\n+    }\n   }\n \n   /**\n@@ -240,7 +248,7 @@ private Builder(avro.examples.baseball.Player.Builder other) {\n      * @param other The existing instance to copy.\n      */\n     private Builder(avro.examples.baseball.Player other) {\n-            super(SCHEMA$);\n+      super(SCHEMA$);\n       if (isValidValue(fields()[0], other.number)) {\n         this.number = data().deepCopy(fields()[0].schema(), other.number);\n         fieldSetFlags()[0] = true;",
                "deletions": 3
            },
            {
                "sha": "26fcbc0d559c37373a7f5bb195fa2bd830195b4a",
                "filename": "lang/java/tools/src/test/compiler/output/Player.java",
                "blob_url": "https://github.com/apache/avro/blob/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/tools/src/test/compiler/output/Player.java",
                "raw_url": "https://github.com/apache/avro/raw/152fa0954bb74e8e1e627751ccab55ada4f5b375/lang/java/tools/src/test/compiler/output/Player.java",
                "status": "modified",
                "changes": 14,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/tools/src/test/compiler/output/Player.java?ref=152fa0954bb74e8e1e627751ccab55ada4f5b375",
                "patch": "@@ -182,7 +182,11 @@ public void setPosition(java.util.List<avro.examples.baseball.Position> value) {\n    * @return A new Player RecordBuilder\n    */\n   public static avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player.Builder other) {\n-    return new avro.examples.baseball.Player.Builder(other);\n+    if (other == null) {\n+      return new avro.examples.baseball.Player.Builder();\n+    } else {\n+      return new avro.examples.baseball.Player.Builder(other);\n+    }\n   }\n \n   /**\n@@ -191,7 +195,11 @@ public void setPosition(java.util.List<avro.examples.baseball.Position> value) {\n    * @return A new Player RecordBuilder\n    */\n   public static avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player other) {\n-    return new avro.examples.baseball.Player.Builder(other);\n+    if (other == null) {\n+      return new avro.examples.baseball.Player.Builder();\n+    } else {\n+      return new avro.examples.baseball.Player.Builder(other);\n+    }\n   }\n \n   /**\n@@ -240,7 +248,7 @@ private Builder(avro.examples.baseball.Player.Builder other) {\n      * @param other The existing instance to copy.\n      */\n     private Builder(avro.examples.baseball.Player other) {\n-            super(SCHEMA$);\n+      super(SCHEMA$);\n       if (isValidValue(fields()[0], other.number)) {\n         this.number = data().deepCopy(fields()[0].schema(), other.number);\n         fieldSetFlags()[0] = true;",
                "deletions": 3
            }
        ],
        "patched_files": [
            "Player.java"
        ],
        "unit_tests": [
            "TestSpecificBuilderTree.java"
        ]
    },
    "avro_a53a4fd": {
        "repo": "avro",
        "message": "AVRO-1966: Java: Fix NPE When copying builder with nullable record.",
        "commit": "https://github.com/apache/avro/commit/a53a4fd10072471aa7c8170499a10792e61e0d95",
        "parent": "https://github.com/apache/avro/commit/cae491a6204b8167481fcc46e7f7eed061a44a82",
        "bug_id": "avro_a53a4fd",
        "file": [
            {
                "sha": "fa11bb821309c8e2fd4f2f0dbb92225119b1a4eb",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/avro/blob/a53a4fd10072471aa7c8170499a10792e61e0d95/CHANGES.txt",
                "raw_url": "https://github.com/apache/avro/raw/a53a4fd10072471aa7c8170499a10792e61e0d95/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/CHANGES.txt?ref=a53a4fd10072471aa7c8170499a10792e61e0d95",
                "patch": "@@ -104,6 +104,8 @@ Trunk (not yet released)\n \n     AVRO-1951: Python: Fix ipc_test.py with a valid DNS name. (blue)\n \n+    AVRO-1966: Java: Fix NPE When copying builder with nullable record. (Niels Basjes)\n+\n Avro 1.8.1 (14 May 2016)\n \n   INCOMPATIBLE CHANGES",
                "deletions": 0
            },
            {
                "sha": "c333dd076d5790c3ba2b2f57159fdb7c39531ac2",
                "filename": "lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm",
                "blob_url": "https://github.com/apache/avro/blob/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm",
                "raw_url": "https://github.com/apache/avro/raw/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm?ref=a53a4fd10072471aa7c8170499a10792e61e0d95",
                "patch": "@@ -264,7 +264,7 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or\n #foreach ($field in $schema.getFields())\n       if (isValidValue(fields()[$field.pos()], other.${this.mangle($field.name(), $schema.isError())})) {\n         this.${this.mangle($field.name(), $schema.isError())} = data().deepCopy(fields()[$field.pos()].schema(), other.${this.mangle($field.name(), $schema.isError())});\n-        fieldSetFlags()[$field.pos()] = true;\n+        fieldSetFlags()[$field.pos()] = other.fieldSetFlags()[$field.pos()];\n       }\n #if (${this.hasBuilder($field.schema())})\n       if (other.${this.generateHasBuilderMethod($schema, $field)}()) {",
                "deletions": 1
            },
            {
                "sha": "87b9e6f6e944520da278b9b68a5e393eedadbc18",
                "filename": "lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java",
                "blob_url": "https://github.com/apache/avro/blob/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java",
                "raw_url": "https://github.com/apache/avro/raw/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java",
                "status": "modified",
                "changes": 29,
                "additions": 29,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java?ref=a53a4fd10072471aa7c8170499a10792e61e0d95",
                "patch": "@@ -18,11 +18,15 @@\n package org.apache.avro.specific;\n \n import org.apache.avro.test.http.*;\n+import org.apache.avro.test.nullable.Nullable;\n+import org.apache.avro.test.nullable.RecordWithNullables;\n import org.junit.Test;\n \n import java.util.ArrayList;\n \n+import static org.apache.avro.test.nullable.Nullable.*;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.fail;\n \n public class TestSpecificBuilderTree {\n@@ -254,4 +258,29 @@ public void lastOneWins_Builder() {\n     assertEquals(\"/index.html\",     request.getHttpRequest().getURI().getPath());\n   }\n \n+  @Test\n+  public void copyBuilderWithNullables() {\n+    RecordWithNullables.Builder builder = RecordWithNullables.newBuilder();\n+\n+    assertFalse(builder.hasNullableRecordBuilder());\n+    assertFalse(builder.hasNullableRecord());\n+    assertFalse(builder.hasNullableString());\n+    assertFalse(builder.hasNullableLong  ());\n+    assertFalse(builder.hasNullableInt   ());\n+    assertFalse(builder.hasNullableMap   ());\n+    assertFalse(builder.hasNullableArray ());\n+\n+    RecordWithNullables.Builder builderCopy = RecordWithNullables.newBuilder(builder);\n+\n+    assertFalse(builderCopy.hasNullableRecordBuilder());\n+    assertFalse(builderCopy.hasNullableRecord());\n+    assertFalse(builderCopy.hasNullableString());\n+    assertFalse(builderCopy.hasNullableLong  ());\n+    assertFalse(builderCopy.hasNullableInt   ());\n+    assertFalse(builderCopy.hasNullableMap   ());\n+    assertFalse(builderCopy.hasNullableArray ());\n+\n+    builderCopy.getNullableRecordBuilder();\n+  }\n+\n }",
                "deletions": 0
            },
            {
                "sha": "da58e20c88ea6d69b770a199a486e1860367b7d6",
                "filename": "lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java",
                "blob_url": "https://github.com/apache/avro/blob/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java",
                "raw_url": "https://github.com/apache/avro/raw/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java?ref=a53a4fd10072471aa7c8170499a10792e61e0d95",
                "patch": "@@ -219,19 +219,19 @@ private Builder(avro.examples.baseball.Player.Builder other) {\n       super(other);\n       if (isValidValue(fields()[0], other.number)) {\n         this.number = data().deepCopy(fields()[0].schema(), other.number);\n-        fieldSetFlags()[0] = true;\n+        fieldSetFlags()[0] = other.fieldSetFlags()[0];\n       }\n       if (isValidValue(fields()[1], other.first_name)) {\n         this.first_name = data().deepCopy(fields()[1].schema(), other.first_name);\n-        fieldSetFlags()[1] = true;\n+        fieldSetFlags()[1] = other.fieldSetFlags()[1];\n       }\n       if (isValidValue(fields()[2], other.last_name)) {\n         this.last_name = data().deepCopy(fields()[2].schema(), other.last_name);\n-        fieldSetFlags()[2] = true;\n+        fieldSetFlags()[2] = other.fieldSetFlags()[2];\n       }\n       if (isValidValue(fields()[3], other.position)) {\n         this.position = data().deepCopy(fields()[3].schema(), other.position);\n-        fieldSetFlags()[3] = true;\n+        fieldSetFlags()[3] = other.fieldSetFlags()[3];\n       }\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "0a0b88203dc1db27efceb8fab2d1baac0bb8cd96",
                "filename": "lang/java/tools/src/test/compiler/output/Player.java",
                "blob_url": "https://github.com/apache/avro/blob/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/tools/src/test/compiler/output/Player.java",
                "raw_url": "https://github.com/apache/avro/raw/a53a4fd10072471aa7c8170499a10792e61e0d95/lang/java/tools/src/test/compiler/output/Player.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/tools/src/test/compiler/output/Player.java?ref=a53a4fd10072471aa7c8170499a10792e61e0d95",
                "patch": "@@ -219,19 +219,19 @@ private Builder(avro.examples.baseball.Player.Builder other) {\n       super(other);\n       if (isValidValue(fields()[0], other.number)) {\n         this.number = data().deepCopy(fields()[0].schema(), other.number);\n-        fieldSetFlags()[0] = true;\n+        fieldSetFlags()[0] = other.fieldSetFlags()[0];\n       }\n       if (isValidValue(fields()[1], other.first_name)) {\n         this.first_name = data().deepCopy(fields()[1].schema(), other.first_name);\n-        fieldSetFlags()[1] = true;\n+        fieldSetFlags()[1] = other.fieldSetFlags()[1];\n       }\n       if (isValidValue(fields()[2], other.last_name)) {\n         this.last_name = data().deepCopy(fields()[2].schema(), other.last_name);\n-        fieldSetFlags()[2] = true;\n+        fieldSetFlags()[2] = other.fieldSetFlags()[2];\n       }\n       if (isValidValue(fields()[3], other.position)) {\n         this.position = data().deepCopy(fields()[3].schema(), other.position);\n-        fieldSetFlags()[3] = true;\n+        fieldSetFlags()[3] = other.fieldSetFlags()[3];\n       }\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "a62c205a3372d1811dde81c6305b8b5a0f1ec047",
                "filename": "share/test/schemas/nestedNullable.avdl",
                "blob_url": "https://github.com/apache/avro/blob/a53a4fd10072471aa7c8170499a10792e61e0d95/share/test/schemas/nestedNullable.avdl",
                "raw_url": "https://github.com/apache/avro/raw/a53a4fd10072471aa7c8170499a10792e61e0d95/share/test/schemas/nestedNullable.avdl",
                "status": "added",
                "changes": 41,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/share/test/schemas/nestedNullable.avdl?ref=a53a4fd10072471aa7c8170499a10792e61e0d95",
                "patch": "@@ -0,0 +1,41 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+@namespace(\"org.apache.avro.test.nullable\")\n+protocol Nullable {\n+\n+    enum MyEnum {\n+        One,\n+        Two\n+    }\n+\n+    record SubRecord {\n+        string value;\n+    }\n+\n+    record RecordWithNullables {\n+        union { null, string        } nullableString    = null;\n+        union { null, long          } nullableLong      = null;\n+        union { null, int           } nullableInt       = null;\n+        union { null, map<string>   } nullableMap       = null;\n+        union { null, array<string> } nullableArray     = null;\n+        union { null, SubRecord     } nullableRecord    = null;\n+        union { null, MyEnum        } nullableEnum      = null;\n+    }\n+\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "Player.java"
        ],
        "unit_tests": [
            "TestSpecificBuilderTree.java"
        ]
    },
    "avro_68796d3": {
        "repo": "avro",
        "message": "AVRO-2627: Unify NullPointerException Management",
        "commit": "https://github.com/apache/avro/commit/68796d30d8898cf1cd9e806623602da519cd4058",
        "parent": "https://github.com/apache/avro/commit/f8afef1f98b1f27deb9e73ef804ed74ba2d20bbb",
        "bug_id": "avro_68796d3",
        "file": [
            {
                "sha": "b9e92381aa6937dfb6576162fc9e43871062d3e6",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/LogicalTypes.java",
                "blob_url": "https://github.com/apache/avro/blob/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/LogicalTypes.java",
                "raw_url": "https://github.com/apache/avro/raw/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/LogicalTypes.java",
                "status": "modified",
                "changes": 18,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/LogicalTypes.java?ref=68796d30d8898cf1cd9e806623602da519cd4058",
                "patch": "@@ -19,6 +19,7 @@\n package org.apache.avro;\n \n import java.util.Map;\n+import java.util.Objects;\n import java.util.concurrent.ConcurrentHashMap;\n \n import org.slf4j.Logger;\n@@ -34,13 +35,18 @@\n \n   private static final Map<String, LogicalTypeFactory> REGISTERED_TYPES = new ConcurrentHashMap<>();\n \n+  /**\n+   * Register a logical type.\n+   *\n+   * @param logicalTypeName The logical type name\n+   * @param factory         The logical type factory\n+   *\n+   * @throws NullPointerException if {@code logicalTypeName} or {@code factory} is\n+   *                              {@code null}\n+   */\n   public static void register(String logicalTypeName, LogicalTypeFactory factory) {\n-    if (logicalTypeName == null) {\n-      throw new NullPointerException(\"Invalid logical type name: null\");\n-    }\n-    if (factory == null) {\n-      throw new NullPointerException(\"Invalid logical type factory: null\");\n-    }\n+    Objects.requireNonNull(logicalTypeName, \"Logical type name cannot be null\");\n+    Objects.requireNonNull(factory, \"Logical type factory cannot be null\");\n     REGISTERED_TYPES.put(logicalTypeName, factory);\n   }\n ",
                "deletions": 6
            },
            {
                "sha": "50b403695c4159ec3d29acb2c3e06a59fe7cf101",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java",
                "blob_url": "https://github.com/apache/avro/blob/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java",
                "raw_url": "https://github.com/apache/avro/raw/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java",
                "status": "modified",
                "changes": 10,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java?ref=68796d30d8898cf1cd9e806623602da519cd4058",
                "patch": "@@ -26,6 +26,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n \n import com.fasterxml.jackson.core.io.JsonStringEncoder;\n@@ -412,9 +413,8 @@ private boolean hasProps() {\n     private String[] aliases;\n \n     protected NamedBuilder(NameContext names, String name) {\n-      checkRequired(name, \"Type must have a name\");\n+      this.name = Objects.requireNonNull(name, \"Type must have a name\");\n       this.names = names;\n-      this.name = name;\n     }\n \n     /** configure this type's optional documentation string **/\n@@ -2692,12 +2692,6 @@ public R endUnion() {\n     }\n   }\n \n-  private static void checkRequired(Object reference, String errorMessage) {\n-    if (reference == null) {\n-      throw new NullPointerException(errorMessage);\n-    }\n-  }\n-\n   // create default value JsonNodes from objects\n   private static JsonNode toJsonNode(Object o) {\n     try {",
                "deletions": 8
            },
            {
                "sha": "91276ef45b9dd6cb2382c849aabe179b5c12e5a3",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/data/RecordBuilderBase.java",
                "blob_url": "https://github.com/apache/avro/blob/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/data/RecordBuilderBase.java",
                "raw_url": "https://github.com/apache/avro/raw/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/data/RecordBuilderBase.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/data/RecordBuilderBase.java?ref=68796d30d8898cf1cd9e806623602da519cd4058",
                "patch": "@@ -85,13 +85,11 @@ protected RecordBuilderBase(RecordBuilderBase<T> other, GenericData data) {\n    * \n    * @param field the field to validate.\n    * @param value the value to validate.\n-   * @throws NullPointerException if value is null and the given field does not\n+   * @throws AvroRuntimeException if value is null and the given field does not\n    *                              accept null values.\n    */\n   protected void validate(Field field, Object value) {\n-    if (isValidValue(field, value)) {\n-    } else if (field.defaultVal() != null) {\n-    } else {\n+    if (!isValidValue(field, value) && field.defaultVal() == null) {\n       throw new AvroRuntimeException(\"Field \" + field + \" does not accept null values\");\n     }\n   }",
                "deletions": 4
            },
            {
                "sha": "376289ec882c4fd19da7f28358e051772cf569c3",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/io/BufferedBinaryEncoder.java",
                "blob_url": "https://github.com/apache/avro/blob/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/BufferedBinaryEncoder.java",
                "raw_url": "https://github.com/apache/avro/raw/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/BufferedBinaryEncoder.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/io/BufferedBinaryEncoder.java?ref=68796d30d8898cf1cd9e806623602da519cd4058",
                "patch": "@@ -22,6 +22,7 @@\n import java.nio.ByteBuffer;\n import java.nio.channels.Channels;\n import java.nio.channels.WritableByteChannel;\n+import java.util.Objects;\n \n import org.apache.avro.AvroRuntimeException;\n \n@@ -57,8 +58,7 @@\n   }\n \n   BufferedBinaryEncoder configure(OutputStream out, int bufferSize) {\n-    if (null == out)\n-      throw new NullPointerException(\"OutputStream cannot be null!\");\n+    Objects.requireNonNull(out, \"OutputStream cannot be null\");\n     if (null != this.sink) {\n       if (pos > 0) {\n         try {",
                "deletions": 2
            },
            {
                "sha": "62b2a48262721f55742e763f9bf23f3e5ea6da74",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/io/DirectBinaryEncoder.java",
                "blob_url": "https://github.com/apache/avro/blob/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/DirectBinaryEncoder.java",
                "raw_url": "https://github.com/apache/avro/raw/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/DirectBinaryEncoder.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/io/DirectBinaryEncoder.java?ref=68796d30d8898cf1cd9e806623602da519cd4058",
                "patch": "@@ -19,6 +19,7 @@\n \n import java.io.IOException;\n import java.io.OutputStream;\n+import java.util.Objects;\n \n /**\n  * An {@link Encoder} for Avro's binary encoding that does not buffer output.\n@@ -52,8 +53,7 @@\n   }\n \n   DirectBinaryEncoder configure(OutputStream out) {\n-    if (null == out)\n-      throw new NullPointerException(\"OutputStream cannot be null!\");\n+    Objects.requireNonNull(out, \"OutputStream cannot be null\");\n     this.out = out;\n     return this;\n   }",
                "deletions": 2
            },
            {
                "sha": "c1c38511ab4c9a3e963626495448082f329f3ec0",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/io/JsonDecoder.java",
                "blob_url": "https://github.com/apache/avro/blob/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/JsonDecoder.java",
                "raw_url": "https://github.com/apache/avro/raw/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/JsonDecoder.java",
                "status": "modified",
                "changes": 15,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/io/JsonDecoder.java?ref=68796d30d8898cf1cd9e806623602da519cd4058",
                "patch": "@@ -24,6 +24,7 @@\n import java.nio.charset.StandardCharsets;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Stack;\n \n import org.apache.avro.AvroTypeException;\n@@ -74,9 +75,7 @@ private JsonDecoder(Symbol root, String in) throws IOException {\n   }\n \n   private static Symbol getSymbol(Schema schema) {\n-    if (null == schema) {\n-      throw new NullPointerException(\"Schema cannot be null!\");\n-    }\n+    Objects.requireNonNull(schema, \"Schema cannot be null\");\n     return new JsonGrammarGenerator().generate(schema);\n   }\n \n@@ -90,12 +89,11 @@ private static Symbol getSymbol(Schema schema) {\n    * \n    * @param in The InputStream to read from. Cannot be null.\n    * @throws IOException\n+   * @throws NullPointerException if {@code in} is {@code null}\n    * @return this JsonDecoder\n    */\n   public JsonDecoder configure(InputStream in) throws IOException {\n-    if (null == in) {\n-      throw new NullPointerException(\"InputStream to read from cannot be null!\");\n-    }\n+    Objects.requireNonNull(in, \"InputStream cannot be null\");\n     parser.reset();\n     reorderBuffers.clear();\n     currentReorderBuffer = null;\n@@ -114,12 +112,11 @@ public JsonDecoder configure(InputStream in) throws IOException {\n    * \n    * @param in The String to read from. Cannot be null.\n    * @throws IOException\n+   * @throws NullPointerException if {@code in} is {@code null}\n    * @return this JsonDecoder\n    */\n   public JsonDecoder configure(String in) throws IOException {\n-    if (null == in) {\n-      throw new NullPointerException(\"String to read from cannot be null!\");\n-    }\n+    Objects.requireNonNull(in, \"String to read from cannot be null\");\n     parser.reset();\n     reorderBuffers.clear();\n     currentReorderBuffer = null;",
                "deletions": 9
            },
            {
                "sha": "71cc690b8a4e44875c956da4a01cb2d9b04eaa58",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/io/JsonEncoder.java",
                "blob_url": "https://github.com/apache/avro/blob/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/JsonEncoder.java",
                "raw_url": "https://github.com/apache/avro/raw/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/JsonEncoder.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/io/JsonEncoder.java?ref=68796d30d8898cf1cd9e806623602da519cd4058",
                "patch": "@@ -22,6 +22,7 @@\n import java.nio.ByteBuffer;\n import java.nio.charset.StandardCharsets;\n import java.util.BitSet;\n+import java.util.Objects;\n \n import org.apache.avro.AvroTypeException;\n import org.apache.avro.Schema;\n@@ -80,8 +81,7 @@ public void flush() throws IOException {\n   // by default, one object per line.\n   // with pretty option use default pretty printer with root line separator.\n   private static JsonGenerator getJsonGenerator(OutputStream out, boolean pretty) throws IOException {\n-    if (null == out)\n-      throw new NullPointerException(\"OutputStream cannot be null\");\n+    Objects.requireNonNull(out, \"OutputStream cannot be null\");\n     JsonGenerator g = new JsonFactory().createGenerator(out, JsonEncoding.UTF8);\n     if (pretty) {\n       DefaultPrettyPrinter pp = new DefaultPrettyPrinter() {\n@@ -118,6 +118,7 @@ public void setIncludeNamespace(final boolean includeNamespace) {\n    *\n    * @param out The OutputStream to direct output to. Cannot be null.\n    * @throws IOException\n+   * @throws NullPointerException if {@code out} is {@code null}\n    * @return this JsonEncoder\n    */\n   public JsonEncoder configure(OutputStream out) throws IOException {\n@@ -135,11 +136,11 @@ public JsonEncoder configure(OutputStream out) throws IOException {\n    *\n    * @param generator The JsonGenerator to direct output to. Cannot be null.\n    * @throws IOException\n+   * @throws NullPointerException if {@code generator} is {@code null}\n    * @return this JsonEncoder\n    */\n   private JsonEncoder configure(JsonGenerator generator) throws IOException {\n-    if (null == generator)\n-      throw new NullPointerException(\"JsonGenerator cannot be null\");\n+    Objects.requireNonNull(generator, \"JsonGenerator cannot be null\");\n     if (null != parser) {\n       flush();\n     }",
                "deletions": 4
            },
            {
                "sha": "8952ff96763d463e832d3ffb8b43d53679dbc459",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java",
                "blob_url": "https://github.com/apache/avro/blob/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java",
                "raw_url": "https://github.com/apache/avro/raw/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java",
                "status": "modified",
                "changes": 11,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java?ref=68796d30d8898cf1cd9e806623602da519cd4058",
                "patch": "@@ -20,6 +20,7 @@\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n \n import org.apache.avro.AvroTypeException;\n import org.apache.avro.Schema;\n@@ -74,14 +75,12 @@ private ResolvingDecoder(Object resolver, Decoder in) throws IOException {\n    * @param reader The reader's schema. Cannot be null.\n    * @return The opaque resolver.\n    * @throws IOException\n+   * @throws NullPointerException if {@code writer} or {@code reader} is\n+   *                              {@code null}\n    */\n   public static Object resolve(Schema writer, Schema reader) throws IOException {\n-    if (null == writer) {\n-      throw new NullPointerException(\"writer cannot be null!\");\n-    }\n-    if (null == reader) {\n-      throw new NullPointerException(\"reader cannot be null!\");\n-    }\n+    Objects.requireNonNull(writer, \"Writer schema cannot be null\");\n+    Objects.requireNonNull(reader, \"Reader schema cannot be null\");\n     return new ResolvingGrammarGenerator().generate(writer, reader);\n   }\n ",
                "deletions": 6
            },
            {
                "sha": "dbee4458575d2a070ebeade3310fcba6f0f51ee5",
                "filename": "lang/java/avro/src/main/java/org/apache/avro/io/ValidatingDecoder.java",
                "blob_url": "https://github.com/apache/avro/blob/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/ValidatingDecoder.java",
                "raw_url": "https://github.com/apache/avro/raw/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/avro/src/main/java/org/apache/avro/io/ValidatingDecoder.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/avro/src/main/java/org/apache/avro/io/ValidatingDecoder.java?ref=68796d30d8898cf1cd9e806623602da519cd4058",
                "patch": "@@ -19,6 +19,7 @@\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n+import java.util.Objects;\n \n import org.apache.avro.AvroTypeException;\n import org.apache.avro.Schema;\n@@ -52,9 +53,7 @@\n   }\n \n   private static Symbol getSymbol(Schema schema) {\n-    if (null == schema) {\n-      throw new NullPointerException(\"Schema cannot be null\");\n-    }\n+    Objects.requireNonNull(schema, \"Schema cannot be null\");\n     return new ValidatingGrammarGenerator().generate(schema);\n   }\n ",
                "deletions": 3
            },
            {
                "sha": "d141a5a8ece8a7c307772a4fa0d0855bada97e0a",
                "filename": "lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java",
                "blob_url": "https://github.com/apache/avro/blob/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java",
                "raw_url": "https://github.com/apache/avro/raw/68796d30d8898cf1cd9e806623602da519cd4058/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/avro/contents/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java?ref=68796d30d8898cf1cd9e806623602da519cd4058",
                "patch": "@@ -24,6 +24,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Executors;\n@@ -170,13 +171,13 @@ public NettyTransceiver(InetSocketAddress addr, ChannelFactory channelFactory, L\n    *                                    Channel.\n    * @param nettyClientBootstrapOptions map of Netty ClientBootstrap options to\n    *                                    use.\n-   * @throws IOException if an error occurs connecting to the given address.\n+   * @throws IOException          if an error occurs connecting to the given\n+   *                              address.\n+   * @throws NullPointerException if {@code channelFactory} is {@code null}\n    */\n   public NettyTransceiver(InetSocketAddress addr, ChannelFactory channelFactory,\n       Map<String, Object> nettyClientBootstrapOptions) throws IOException {\n-    if (channelFactory == null) {\n-      throw new NullPointerException(\"channelFactory is null\");\n-    }\n+    Objects.requireNonNull(channelFactory, \"channelFactory cannot be null\");\n \n     // Set up.\n     this.channelFactory = channelFactory;",
                "deletions": 4
            }
        ],
        "patched_files": [
            "SchemaBuilder.java",
            "RecordBuilderBase.java",
            "JsonDecoder.java"
        ],
        "unit_tests": [
            "RecordBuilderBaseTest.java",
            "TestJsonDecoder.java",
            "TestSchemaBuilder.java"
        ]
    }
}