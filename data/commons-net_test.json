{
    "commons-net_cc94b27": {
        "repo": "commons-net",
        "message": "Avoid possible NPE warning by only catching CCE where it can occur\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1022904 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-net/commit/cc94b271b7dbc9f4512e8d6e578914f4d36cf66e",
        "parent": "https://github.com/apache/commons-net/commit/c4786e75f22050e5716072b2ce53463c87a076d0",
        "bug_id": "commons-net_cc94b27",
        "file": [
            {
                "sha": "8e0ef7333617f5a0d10532fe2dbeb9b748d515ec",
                "filename": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                "blob_url": "https://github.com/apache/commons-net/blob/cc94b271b7dbc9f4512e8d6e578914f4d36cf66e/src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                "raw_url": "https://github.com/apache/commons-net/raw/cc94b271b7dbc9f4512e8d6e578914f4d36cf66e/src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                "status": "modified",
                "changes": 14,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java?ref=cc94b271b7dbc9f4512e8d6e578914f4d36cf66e",
                "patch": "@@ -86,7 +86,13 @@ public FTPFileEntryParser createFileEntryParser(String key)\n         try\n         {\n             parserClass = Class.forName(key);\n-            parser = (FTPFileEntryParser) parserClass.newInstance();\n+            try {\n+                parser = (FTPFileEntryParser) parserClass.newInstance();\n+            } catch (ClassCastException e) {\n+                throw new ParserInitializationException(parserClass.getName()\n+                    + \" does not implement the interface \"\n+                    + \"org.apache.commons.net.ftp.FTPFileEntryParser.\", e);\n+            }\n         }\n         catch (ClassNotFoundException e)\n         {\n@@ -142,12 +148,6 @@ else if (ukey.indexOf(FTPClientConfig.SYST_L8) >= 0)\n         {\n             throw new ParserInitializationException(\"Error initializing parser\", e);\n         }\n-        catch (ClassCastException e)\n-        {\n-            throw new ParserInitializationException(parserClass.getName()\n-                + \" does not implement the interface \"\n-                + \"org.apache.commons.net.ftp.FTPFileEntryParser.\", e);\n-        }\n         catch (Throwable e)\n         {\n             throw new ParserInitializationException(\"Error initializing parser\", e);",
                "deletions": 7
            }
        ],
        "patched_files": [
            "DefaultFTPFileEntryParserFactory.java"
        ],
        "unit_tests": [
            "DefaultFTPFileEntryParserFactoryTest.java"
        ]
    },
    "commons-net_98d829e": {
        "repo": "commons-net",
        "message": "NET-643 NPE when closing telnet stream\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1823550 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-net/commit/98d829eb6af5449ac27b66382952de37602ebe4e",
        "parent": "https://github.com/apache/commons-net/commit/f6c513acaf04dbf3acc69f96053897b0c90dc746",
        "bug_id": "commons-net_98d829e",
        "file": [
            {
                "sha": "bbaf6c2ad7ad09832a66bd37f4b3a1d7536b73f8",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-net/blob/98d829eb6af5449ac27b66382952de37602ebe4e/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-net/raw/98d829eb6af5449ac27b66382952de37602ebe4e/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/changes/changes.xml?ref=98d829eb6af5449ac27b66382952de37602ebe4e",
                "patch": "@@ -74,6 +74,9 @@ This is mainly a bug-fix release. See further details below.\n  The examples are not part of the public API, so this does not affect compatibility.\n \n \">\n+            <action issue=\"NET-643\" type=\"fix\" dev=\"sebb\" due-to=\"Vasily\">\n+            NPE when closing telnet stream\n+            </action>\n             <action issue=\"NET-648\" type=\"add\" dev=\"pschumacher\">\n             Add Automatic-Module-Name MANIFEST entry for Java 9 compatibility\n             </action>",
                "deletions": 0
            },
            {
                "sha": "d113276831c0af3f0b7b6e362a32a472ad993480",
                "filename": "src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                "blob_url": "https://github.com/apache/commons-net/blob/98d829eb6af5449ac27b66382952de37602ebe4e/src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                "raw_url": "https://github.com/apache/commons-net/raw/98d829eb6af5449ac27b66382952de37602ebe4e/src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/main/java/org/apache/commons/net/telnet/TelnetClient.java?ref=98d829eb6af5449ac27b66382952de37602ebe4e",
                "patch": "@@ -100,10 +100,16 @@ public TelnetClient(String termtype, int maxSubnegotiationLength)\n \n     void _flushOutputStream() throws IOException\n     {\n+        if (_output_ == null) {\n+            throw new IOException(\"Stream closed\");\n+        }\n         _output_.flush();\n     }\n     void _closeOutputStream() throws IOException\n     {\n+        if (_output_ == null) {\n+            return;\n+        }\n         try {\n             _output_.close();\n         } finally {",
                "deletions": 0
            }
        ],
        "patched_files": [
            "TelnetClient.java"
        ],
        "unit_tests": [
            "TelnetClientTest.java"
        ]
    },
    "commons-net_6037f82": {
        "repo": "commons-net",
        "message": "NET-473 FTPClient setSoTimeout (int time) will result in NullPointerException. Clarify Javadoc.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1361535 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-net/commit/6037f828b16141d886e636a782fe81fe69662606",
        "parent": "https://github.com/apache/commons-net/commit/8c404450fa97dc5432cec89d37f96cf1c2c2926f",
        "bug_id": "commons-net_6037f82",
        "file": [
            {
                "sha": "dc411d2bf9498ab44bd123355ee8d65fb352703e",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-net/blob/6037f828b16141d886e636a782fe81fe69662606/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-net/raw/6037f828b16141d886e636a782fe81fe69662606/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/changes/changes.xml?ref=6037f828b16141d886e636a782fe81fe69662606",
                "patch": "@@ -65,6 +65,9 @@ The <action> type attribute can be add,update,fix,remove.\n         <release version=\"3.2\" date=\"TBA\" description=\"\n TBA\n         \">\n+            <action issue=\"NET-473\" dev=\"sebb\" type=\"fix\">\n+            FTPClient setSoTimeout (int time) will result in NullPointerException. Clarify Javadoc.\n+            </action>\n             <action issue=\"NET-468\" dev=\"sebb\" type=\"add\" due-to=\"Bogdan Drozdowski\">\n             Request for native support for socks proxy routing with Commons net FTP.\n             </action>",
                "deletions": 0
            },
            {
                "sha": "766fc33a8b4ac5fdab1595f02596f44b811bbad0",
                "filename": "src/main/java/org/apache/commons/net/SocketClient.java",
                "blob_url": "https://github.com/apache/commons-net/blob/6037f828b16141d886e636a782fe81fe69662606/src/main/java/org/apache/commons/net/SocketClient.java",
                "raw_url": "https://github.com/apache/commons-net/raw/6037f828b16141d886e636a782fe81fe69662606/src/main/java/org/apache/commons/net/SocketClient.java",
                "status": "modified",
                "changes": 14,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/main/java/org/apache/commons/net/SocketClient.java?ref=6037f828b16141d886e636a782fe81fe69662606",
                "patch": "@@ -450,9 +450,12 @@ public int getDefaultTimeout()\n      * Only call this method after a connection has been opened\n      * by {@link #connect connect()}.\n      * <p>\n+     * To set the initial timeout, use {@link #setDefaultTimeout(int)} instead.\n+     * \n      * @param timeout  The timeout in milliseconds to use for the currently\n      *                 open socket connection.\n      * @exception SocketException If the operation fails.\n+     * @throws NullPointerException if the socket is not currently open\n      */\n     public void setSoTimeout(int timeout) throws SocketException\n     {\n@@ -505,6 +508,7 @@ protected int getReceiveBufferSize(){\n      * <p>\n      * @return The timeout in milliseconds of the currently opened socket.\n      * @exception SocketException If the operation fails.\n+     * @throws NullPointerException if the socket is not currently open\n      */\n     public int getSoTimeout() throws SocketException\n     {\n@@ -517,6 +521,7 @@ public int getSoTimeout() throws SocketException\n      * <p>\n      * @param on  True if Nagle's algorithm is to be enabled, false if not.\n      * @exception SocketException If the operation fails.\n+     * @throws NullPointerException if the socket is not currently open\n      */\n     public void setTcpNoDelay(boolean on) throws SocketException\n     {\n@@ -531,6 +536,7 @@ public void setTcpNoDelay(boolean on) throws SocketException\n      * @return True if Nagle's algorithm is enabled on the currently opened\n      *        socket, false otherwise.\n      * @exception SocketException If the operation fails.\n+     * @throws NullPointerException if the socket is not currently open\n      */\n     public boolean getTcpNoDelay() throws SocketException\n     {\n@@ -546,6 +552,7 @@ public boolean getTcpNoDelay() throws SocketException\n      * other systems.\n      * @param  keepAlive If true, keepAlive is turned on\n      * @throws SocketException\n+     * @throws NullPointerException if the socket is not currently open\n      * @since 2.2\n      */\n     public void setKeepAlive(boolean keepAlive) throws SocketException {\n@@ -557,6 +564,7 @@ public void setKeepAlive(boolean keepAlive) throws SocketException {\n      * Delegates to {@link Socket#getKeepAlive()}\n      * @return True if SO_KEEPALIVE is enabled.\n      * @throws SocketException\n+     * @throws NullPointerException if the socket is not currently open\n      * @since 2.2\n      */\n     public boolean getKeepAlive() throws SocketException {\n@@ -569,6 +577,7 @@ public boolean getKeepAlive() throws SocketException {\n      * @param on  True if linger is to be enabled, false if not.\n      * @param val The linger timeout (in hundredths of a second?)\n      * @exception SocketException If the operation fails.\n+     * @throws NullPointerException if the socket is not currently open\n      */\n     public void setSoLinger(boolean on, int val) throws SocketException\n     {\n@@ -582,6 +591,7 @@ public void setSoLinger(boolean on, int val) throws SocketException\n      * @return The current SO_LINGER timeout.  If SO_LINGER is disabled returns\n      *         -1.\n      * @exception SocketException If the operation fails.\n+     * @throws NullPointerException if the socket is not currently open\n      */\n     public int getSoLinger() throws SocketException\n     {\n@@ -596,6 +606,7 @@ public int getSoLinger() throws SocketException\n      * <p>\n      * @return The port number of the open socket on the local host used\n      *         for the connection.\n+     * @throws NullPointerException if the socket is not currently open\n      */\n     public int getLocalPort()\n     {\n@@ -608,6 +619,7 @@ public int getLocalPort()\n      * Delegates to {@link Socket#getLocalAddress()}\n      * <p>\n      * @return The local address to which the client's socket is bound.\n+     * @throws NullPointerException if the socket is not currently open\n      */\n     public InetAddress getLocalAddress()\n     {\n@@ -621,6 +633,7 @@ public InetAddress getLocalAddress()\n      * <p>\n      * @return The port number of the remote host to which the client is\n      *         connected.\n+     * @throws NullPointerException if the socket is not currently open\n      */\n     public int getRemotePort()\n     {\n@@ -631,6 +644,7 @@ public int getRemotePort()\n     /**\n      * @return The remote address to which the client is connected.\n      * Delegates to {@link Socket#getInetAddress()}\n+     * @throws NullPointerException if the socket is not currently open\n      */\n     public InetAddress getRemoteAddress()\n     {",
                "deletions": 0
            }
        ],
        "patched_files": [
            "SocketClient.java"
        ],
        "unit_tests": [
            "SocketClientTest.java"
        ]
    },
    "commons-net_796a288": {
        "repo": "commons-net",
        "message": "NET-596 NullPointerException when disconnecting TelnetClient twice with JDK 7\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1782091 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-net/commit/796a288e0c2e17ddf7dc44a4cd790a7eab4e158d",
        "parent": "https://github.com/apache/commons-net/commit/6697e685dd8d3bb7a41c65a013276e79910203f5",
        "bug_id": "commons-net_796a288",
        "file": [
            {
                "sha": "837a64a49f0d273d2f9887c74d5235e761b8abbe",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-net/blob/796a288e0c2e17ddf7dc44a4cd790a7eab4e158d/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-net/raw/796a288e0c2e17ddf7dc44a4cd790a7eab4e158d/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/changes/changes.xml?ref=796a288e0c2e17ddf7dc44a4cd790a7eab4e158d",
                "patch": "@@ -87,6 +87,9 @@ without checking it if is a space.\n   The POP3Mail examples can now get password from console, stdin or an environment variable.\n   \n \">\n+            <action issue=\"NET-596\" type=\"fix\" dev=\"sebb\" due-to=\"Vincent Bories-Azeau\">\n+            NullPointerException when disconnecting TelnetClient twice with JDK 7\n+            </action>\n             <action issue=\"NET-602\" type=\"fix\" dev=\"sebb\" due-to=\"Ross Braithwaite\">\n             Failure to parse times from SYST_L8 systems that report as \"WINDOWS Type: L8\"\n             </action>",
                "deletions": 0
            },
            {
                "sha": "67f10e0affcdbe0841a59bcb133a338f4e27058c",
                "filename": "src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                "blob_url": "https://github.com/apache/commons-net/blob/796a288e0c2e17ddf7dc44a4cd790a7eab4e158d/src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                "raw_url": "https://github.com/apache/commons-net/raw/796a288e0c2e17ddf7dc44a4cd790a7eab4e158d/src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/main/java/org/apache/commons/net/telnet/TelnetClient.java?ref=796a288e0c2e17ddf7dc44a4cd790a7eab4e158d",
                "patch": "@@ -80,7 +80,11 @@ void _flushOutputStream() throws IOException\n     }\n     void _closeOutputStream() throws IOException\n     {\n-        _output_.close();\n+        try {\n+            _output_.close();            \n+        } finally {\n+            _output_ = null;\n+        }\n     }\n \n     /***\n@@ -125,6 +129,8 @@ public void disconnect() throws IOException\n                 __output.close();\n             }\n         } finally { // NET-594\n+            __output = null;\n+            __input = null;\n             super.disconnect();\n         }\n     }",
                "deletions": 1
            }
        ],
        "patched_files": [
            "TelnetClient.java"
        ],
        "unit_tests": [
            "TelnetClientTest.java"
        ]
    },
    "commons-net_722b08d": {
        "repo": "commons-net",
        "message": "Avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1362315 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-net/commit/722b08d1f31ce1b9425880002c8805b069b9b29e",
        "parent": "https://github.com/apache/commons-net/commit/737a076added6e41719d205ca9aa5261e68e5002",
        "bug_id": "commons-net_722b08d",
        "file": [
            {
                "sha": "9df26cf13d5f97ed38e948608f6c2bdeec9c934e",
                "filename": "src/test/java/org/apache/commons/net/ftp/FTPClientConfigFunctionalTest.java",
                "blob_url": "https://github.com/apache/commons-net/blob/722b08d1f31ce1b9425880002c8805b069b9b29e/src/test/java/org/apache/commons/net/ftp/FTPClientConfigFunctionalTest.java",
                "raw_url": "https://github.com/apache/commons-net/raw/722b08d1f31ce1b9425880002c8805b069b9b29e/src/test/java/org/apache/commons/net/ftp/FTPClientConfigFunctionalTest.java",
                "status": "modified",
                "changes": 27,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/test/java/org/apache/commons/net/ftp/FTPClientConfigFunctionalTest.java?ref=722b08d1f31ce1b9425880002c8805b069b9b29e",
                "patch": "@@ -143,18 +143,21 @@ public void testTimeZoneFunctionality() throws Exception {\n             lastfile = thisfile;\n         }\n \n-        // test that notwithstanding any time zone differences, the newest file\n-        // is older than now.\n-        assertTrue(lastfile.getTimestamp().getTime().before(now));\n-        Calendar first = firstfile.getTimestamp();\n-\n-        // test that the oldest is less than two days older than the newest\n-        // and, in particular, that no files have been considered \"future\"\n-        // by the parser and therefore been relegated to the same date a\n-        // year ago.\n-        first.add(Calendar.DATE, 2);\n-        assertTrue(lastfile.getTimestamp().getTime().toString()+\" before \"+ first.getTime().toString(),lastfile.getTimestamp().before(first));\n-\n+        if (firstfile == null || lastfile == null)  {\n+            fail(\"No files found\");\n+        } else {\n+            // test that notwithstanding any time zone differences, the newest file\n+            // is older than now.\n+            assertTrue(lastfile.getTimestamp().getTime().before(now));\n+            Calendar first = firstfile.getTimestamp();\n+    \n+            // test that the oldest is less than two days older than the newest\n+            // and, in particular, that no files have been considered \"future\"\n+            // by the parser and therefore been relegated to the same date a\n+            // year ago.\n+            first.add(Calendar.DATE, 2);\n+            assertTrue(lastfile.getTimestamp().getTime().toString()+\" before \"+ first.getTime().toString(),lastfile.getTimestamp().before(first));\n+        }\n     }\n }\n ",
                "deletions": 12
            }
        ],
        "patched_files": [],
        "unit_tests": [
            "FTPClientConfigFunctionalTest.java"
        ]
    },
    "commons-net_d8812a3": {
        "repo": "commons-net",
        "message": "Simplify and avoid NPE warning\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1132387 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-net/commit/d8812a3f61941c32e81dc59b4d3ec5679a47f62b",
        "parent": "https://github.com/apache/commons-net/commit/e19c09ea549c4ad4d5e92106aa2ee2cabc92eb45",
        "bug_id": "commons-net_d8812a3",
        "file": [
            {
                "sha": "a05bac0f6bb76a7b9987e843cdefede577e477e1",
                "filename": "src/test/java/org/apache/commons/net/telnet/TelnetClientTest.java",
                "blob_url": "https://github.com/apache/commons-net/blob/d8812a3f61941c32e81dc59b4d3ec5679a47f62b/src/test/java/org/apache/commons/net/telnet/TelnetClientTest.java",
                "raw_url": "https://github.com/apache/commons-net/raw/d8812a3f61941c32e81dc59b4d3ec5679a47f62b/src/test/java/org/apache/commons/net/telnet/TelnetClientTest.java",
                "status": "modified",
                "changes": 29,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/test/java/org/apache/commons/net/telnet/TelnetClientTest.java?ref=d8812a3f61941c32e81dc59b4d3ec5679a47f62b",
                "patch": "@@ -37,9 +37,9 @@\n      * used in testing for clarity.\n      */\n     private class TestConnection {\n-        TelnetTestSimpleServer server;\n-        TelnetClient client;\n-        int port;\n+        private final TelnetTestSimpleServer server;\n+        private final TelnetClient client;\n+        private final int port;\n         TestConnection(\n                 TelnetTestSimpleServer server,\n                 TelnetClient client,\n@@ -89,6 +89,8 @@ protected void setUp() throws Exception\n                         client = new TelnetClient();\n                         // redundant but makes code clearer.\n                         client.setReaderThread(true);\n+                        client.connect(\"127.0.0.1\", port);\n+                        STANDARD = new TestConnection(server, client, port);\n                         break;\n                     case 1:\n                         client = new TelnetClient();\n@@ -102,32 +104,21 @@ protected void setUp() throws Exception\n                         client.addOptionHandler(ttopt);\n                         client.addOptionHandler(echoopt);\n                         client.addOptionHandler(gaopt);\n+                        client.connect(\"127.0.0.1\", port);\n+                        OPTIONS = new TestConnection(server, client, port);\n                         break;\n                     case 2:\n                         client = new TelnetClient(\"ANSI\");\n+                        client.connect(\"127.0.0.1\", port);\n+                        ANSI = new TestConnection(server, client, port);\n                         break;\n                     case 3:\n                         client = new TelnetClient();\n                         client.setReaderThread(false);\n-                        break;\n-               }\n-               client.connect(\"127.0.0.1\", port);\n-               switch (socket) {\n-                    case 0:\n-                        STANDARD = new TestConnection(server, client, port);\n-                        break;\n-                    case 1:\n-                        OPTIONS = new TestConnection(server, client, port);\n-                        break;\n-                    case 2:\n-                        ANSI = new TestConnection(server, client, port);\n-                        break;\n-                    case 3:\n+                        client.connect(\"127.0.0.1\", port);\n                         NOREAD = new TestConnection(server, client, port);\n                         break;\n-\n                }\n-\n                // only increment socket number on success\n                socket++;\n            } catch (IOException e) {",
                "deletions": 19
            }
        ],
        "patched_files": [
            "TelnetClient.java"
        ],
        "unit_tests": [
            "TelnetClientTest.java"
        ]
    },
    "commons-net_b26a3b4": {
        "repo": "commons-net",
        "message": "NET-539 NPE if Threader.thread invoked with empty list or with null array\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1587651 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-net/commit/b26a3b41b047cdcc37aa65625075fa621d13f66e",
        "parent": "https://github.com/apache/commons-net/commit/061d70dd783a9150601fc884cc93831d39efd751",
        "bug_id": "commons-net_b26a3b4",
        "file": [
            {
                "sha": "8f95baec9706c4bc4cc54274c447b180965f88e5",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-net/blob/b26a3b41b047cdcc37aa65625075fa621d13f66e/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-net/raw/b26a3b41b047cdcc37aa65625075fa621d13f66e/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/changes/changes.xml?ref=b26a3b41b047cdcc37aa65625075fa621d13f66e",
                "patch": "@@ -68,6 +68,9 @@ This is mainly a bug-fix release. See further details below.\n   IMAPExportMbox (example app) allows IMAP folders to be exported into an mbox file.\n   This is the inverse of the IMAPImportMbox example added previously\n         \">\n+            <action issue=\"NET-539\" type=\"fix\" dev=\"sebb\">\n+            NPE if Threader.thread invoked with empty list or with null array\n+            </action>\n             <action issue=\"NET-536\" type=\"add\" dev=\"sebb\">\n             IMAP FETCH example\n             IMAPExportMbox can export selected nessages from an IMAP folder",
                "deletions": 0
            },
            {
                "sha": "bf9345177aa147db8db6543ea912ec4ecac872bd",
                "filename": "src/main/java/org/apache/commons/net/nntp/Threader.java",
                "blob_url": "https://github.com/apache/commons-net/blob/b26a3b41b047cdcc37aa65625075fa621d13f66e/src/main/java/org/apache/commons/net/nntp/Threader.java",
                "raw_url": "https://github.com/apache/commons-net/raw/b26a3b41b047cdcc37aa65625075fa621d13f66e/src/main/java/org/apache/commons/net/nntp/Threader.java",
                "status": "modified",
                "changes": 22,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/main/java/org/apache/commons/net/nntp/Threader.java?ref=b26a3b41b047cdcc37aa65625075fa621d13f66e",
                "patch": "@@ -27,6 +27,7 @@\n  *\n  */\n \n+import java.util.Arrays;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n@@ -36,8 +37,8 @@\n     /**\n      * The client passes in a list of Threadable objects, and\n      * the Threader constructs a connected 'graph' of messages\n-     * @param messages list of messages to thread\n-     * @return null if messages == null or root.child == null\n+     * @param messages list of messages to thread, must not be empty\n+     * @return null if messages == null or root.child == null or messages list is empty\n      * @since 2.2\n      */\n     public Threadable thread(List<? extends Threadable> messages) {\n@@ -47,8 +48,8 @@ public Threadable thread(List<? extends Threadable> messages) {\n     /**\n      * The client passes in a list of Iterable objects, and\n      * the Threader constructs a connected 'graph' of messages\n-     * @param messages iterable of messages to thread\n-     * @return null if messages == null or root.child == null\n+     * @param messages iterable of messages to thread, must not be empty\n+     * @return null if messages == null or root.child == null or messages list is empty\n      * @since 3.0\n      */\n     public Threadable thread(Iterable<? extends Threadable> messages) {\n@@ -65,6 +66,10 @@ public Threadable thread(Iterable<? extends Threadable> messages) {\n             }\n         }\n \n+        if (idTable.isEmpty()) {\n+            return null;\n+        }\n+\n         ThreadContainer root = findRootSet(idTable);\n         idTable.clear();\n         idTable = null;\n@@ -446,13 +451,16 @@ private void gatherSubjects(ThreadContainer root) {\n     /**\n      * The client passes in an array of Threadable objects, and\n      * the Threader constructs a connected 'graph' of messages\n-     * @param messages array of messages to thread\n-     * @return null if messages == null or root.child == null\n+     * @param messages array of messages to thread, must not be empty\n+     * @return null if messages == null or root.child == null or messages array is empty\n      * @deprecated (2.2) prefer {@link #thread(List)}\n      */\n     @Deprecated\n     public Threadable thread(Threadable[] messages) {\n-        return thread(java.util.Arrays.asList(messages));\n+        if (messages == null) {\n+            return null;\n+        }\n+        return thread(Arrays.asList(messages));\n     }\n \n }",
                "deletions": 7
            },
            {
                "sha": "f18030b70a93ee4f48f1a4f31f15b8d0fba25556",
                "filename": "src/test/java/org/apache/commons/net/nntp/TestThreader.java",
                "blob_url": "https://github.com/apache/commons-net/blob/b26a3b41b047cdcc37aa65625075fa621d13f66e/src/test/java/org/apache/commons/net/nntp/TestThreader.java",
                "raw_url": "https://github.com/apache/commons-net/raw/b26a3b41b047cdcc37aa65625075fa621d13f66e/src/test/java/org/apache/commons/net/nntp/TestThreader.java",
                "status": "added",
                "changes": 77,
                "additions": 77,
                "contents_url": "https://api.github.com/repos/apache/commons-net/contents/src/test/java/org/apache/commons/net/nntp/TestThreader.java?ref=b26a3b41b047cdcc37aa65625075fa621d13f66e",
                "patch": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.net.nntp;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test the Threader\n+ */\n+public class TestThreader {\n+    \n+    @Test\n+    @SuppressWarnings(\"deprecation\") // test of deprecated method\n+    public void testNullArray() { // NET-539\n+        Threader t = new Threader();\n+        Threadable[] messages=null;\n+        Assert.assertNull(t.thread(messages));        \n+    }\n+\n+    @Test\n+    public void testNullList() {\n+        Threader t = new Threader();\n+        List<Threadable> messages=null;\n+        Assert.assertNull(t.thread(messages));        \n+    }\n+\n+    @Test\n+    public void testNullIterable() {\n+        Threader t = new Threader();\n+        Iterable<Threadable> messages=null;\n+        Assert.assertNull(t.thread(messages));        \n+    }\n+\n+    @SuppressWarnings(\"deprecation\") // test of deprecated method\n+    @Test\n+    public void testEmptyArray() { // NET-539\n+        Threader t = new Threader();\n+        Threadable[] messages=new Threadable[0];\n+        Assert.assertNull(t.thread(messages));\n+    }\n+\n+    @Test\n+    public void testEmptyList() { // NET-539\n+        Threader t = new Threader();\n+        Threadable[] messages=new Threadable[0];\n+        final List<Threadable> asList = Arrays.asList(messages);\n+        Assert.assertNull(t.thread(asList));\n+    }\n+\n+    @Test\n+    public void testEmptyIterable() { // NET-539\n+        Threader t = new Threader();\n+        Threadable[] messages=new Threadable[0];\n+        final Iterable<Threadable> asList = Arrays.asList(messages);\n+        Assert.assertNull(t.thread(asList));\n+    }\n+\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "Threader.java"
        ],
        "unit_tests": [
            "TestThreader.java"
        ]
    }
}